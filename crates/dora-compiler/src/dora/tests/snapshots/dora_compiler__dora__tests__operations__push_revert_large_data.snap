---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  func.func private @dora_fn_nop()
  func.func private @dora_fn_tracing(!llvm.ptr, i8, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_fn_is_static(!llvm.ptr) -> i8
  func.func private @dora_fn_exp(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_calldata_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_data_section(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_data_section_size(!llvm.ptr) -> i64
  func.func private @dora_fn_data_section_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_chainid(!llvm.ptr) -> i64
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gaslimit_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_memory_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_memory_size(!llvm.ptr) -> i64
  func.func private @dora_fn_code_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_eofcreate(!llvm.ptr, i8, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returncontract(!llvm.ptr, i8, i64, i64, index, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_call(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_extcall(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_returndata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_returndata_copy(!llvm.ptr, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_tload(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_tstore(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @op95(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr, %arg4: !llvm.ptr) -> i8 {
    cf.br ^bb3
  ^bb1(%0: i8):  // 2 preds: ^bb3, ^bb4
    %c0_i64 = arith.constant 0 : i64
    %1 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64, %c0_i64, %1, %0) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %0 : i8
  ^bb2(%2: i8):  // no predecessors
    return %2 : i8
  ^bb3:  // pred: ^bb0
    %3 = llvm.load %arg1 : !llvm.ptr -> i64
    %c2_i64 = arith.constant 2 : i64
    call @dora_fn_nop() : () -> ()
    %4 = arith.cmpi uge, %3, %c2_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %4, ^bb5, ^bb1(%c80_i8 : i8)
  ^bb4:  // pred: ^bb5
    %c1024_i64 = arith.constant 1024 : i64
    %5 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %6 = arith.addi %5, %c1_i64 : i64
    llvm.store %6, %arg3 : i64, !llvm.ptr
    %7 = arith.cmpi ult, %c1024_i64, %6 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %7, ^bb1(%c92_i8 : i8), ^bb6
  ^bb5:  // pred: ^bb3
    %8 = arith.subi %3, %c2_i64 : i64
    llvm.store %8, %arg1 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb6:  // pred: ^bb4
    %c0_i256 = arith.constant 0 : i256
    %9 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256, %9 : i256, !llvm.ptr
    %10 = llvm.getelementptr %9[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %10, %arg4 : !llvm.ptr, !llvm.ptr
    cf.br ^bb7
  ^bb7:  // pred: ^bb6
    %c0_i8 = arith.constant 0 : i8
    return %c0_i8 : i8
  }
  func.func private @op253(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr, %arg4: !llvm.ptr) -> i8 {
    cf.br ^bb3
  ^bb1(%0: i8):  // 9 preds: ^bb3, ^bb4, ^bb6, ^bb7, ^bb12, ^bb13, ^bb14, ^bb17, ^bb18
    %c0_i64 = arith.constant 0 : i64
    %1 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64, %c0_i64, %1, %0) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %0 : i8
  ^bb2(%2: i8):  // no predecessors
    return %2 : i8
  ^bb3:  // pred: ^bb0
    %3 = llvm.load %arg1 : !llvm.ptr -> i64
    %c0_i64_0 = arith.constant 0 : i64
    call @dora_fn_nop() : () -> ()
    %4 = arith.cmpi uge, %3, %c0_i64_0 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %4, ^bb5, ^bb1(%c80_i8 : i8)
  ^bb4:  // pred: ^bb5
    %c1024_i64 = arith.constant 1024 : i64
    %5 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-2_i64 = arith.constant -2 : i64
    %6 = arith.addi %5, %c-2_i64 : i64
    llvm.store %6, %arg3 : i64, !llvm.ptr
    %c2_i64 = arith.constant 2 : i64
    %7 = arith.cmpi ult, %5, %c2_i64 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %7, ^bb1(%c91_i8 : i8), ^bb6
  ^bb5:  // pred: ^bb3
    %8 = arith.subi %3, %c0_i64_0 : i64
    llvm.store %8, %arg1 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb6:  // pred: ^bb4
    %9 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.getelementptr %9[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %11 = llvm.load %10 : !llvm.ptr -> i256
    llvm.store %10, %arg4 : !llvm.ptr, !llvm.ptr
    %12 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.getelementptr %12[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %14 = llvm.load %13 : !llvm.ptr -> i256
    llvm.store %13, %arg4 : !llvm.ptr, !llvm.ptr
    %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256
    %15 = arith.cmpi sgt, %14, %c18446744073709551615_i256 : i256
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %15, ^bb1(%c84_i8 : i8), ^bb7
  ^bb7:  // pred: ^bb6
    %16 = arith.trunci %14 : i256 to i64
    %c0_i64_1 = arith.constant 0 : i64
    %17 = arith.cmpi slt, %16, %c0_i64_1 : i64
    %c84_i8_2 = arith.constant 84 : i8
    cf.cond_br %17, ^bb1(%c84_i8_2 : i8), ^bb8
  ^bb8:  // pred: ^bb7
    %c0_i64_3 = arith.constant 0 : i64
    %18 = arith.cmpi ne, %16, %c0_i64_3 : i64
    cf.cond_br %18, ^bb12, ^bb9
  ^bb9:  // 2 preds: ^bb8, ^bb16
    %19 = arith.trunci %11 : i256 to i64
    %20 = llvm.load %arg1 : !llvm.ptr -> i64
    %c16_i8 = arith.constant 16 : i8
    call @dora_fn_write_result(%arg0, %19, %16, %20, %c16_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c16_i8 : i8
  ^bb10:  // no predecessors
    cf.br ^bb11
  ^bb11:  // pred: ^bb10
    %c0_i8 = arith.constant 0 : i8
    return %c0_i8 : i8
  ^bb12:  // pred: ^bb8
    %c18446744073709551615_i256_4 = arith.constant 18446744073709551615 : i256
    %21 = arith.cmpi sgt, %11, %c18446744073709551615_i256_4 : i256
    %c84_i8_5 = arith.constant 84 : i8
    cf.cond_br %21, ^bb1(%c84_i8_5 : i8), ^bb13
  ^bb13:  // pred: ^bb12
    %22 = arith.trunci %11 : i256 to i64
    %c0_i64_6 = arith.constant 0 : i64
    %23 = arith.cmpi slt, %22, %c0_i64_6 : i64
    %c84_i8_7 = arith.constant 84 : i8
    cf.cond_br %23, ^bb1(%c84_i8_7 : i8), ^bb14
  ^bb14:  // pred: ^bb13
    %24 = arith.addi %22, %16 : i64
    %c0_i64_8 = arith.constant 0 : i64
    %25 = arith.cmpi slt, %24, %c0_i64_8 : i64
    %c84_i8_9 = arith.constant 84 : i8
    cf.cond_br %25, ^bb1(%c84_i8_9 : i8), ^bb15
  ^bb15:  // pred: ^bb14
    %c31_i64 = arith.constant 31 : i64
    %c32_i64 = arith.constant 32 : i64
    %26 = arith.addi %24, %c31_i64 : i64
    %27 = arith.divui %26, %c32_i64 : i64
    %c32_i64_10 = arith.constant 32 : i64
    %28 = arith.muli %27, %c32_i64_10 : i64
    %29 = call @dora_fn_memory_size(%arg0) : (!llvm.ptr) -> i64
    %c31_i64_11 = arith.constant 31 : i64
    %c32_i64_12 = arith.constant 32 : i64
    %30 = arith.addi %29, %c31_i64_11 : i64
    %31 = arith.divui %30, %c32_i64_12 : i64
    %32 = arith.muli %31, %c32_i64_10 : i64
    %33 = arith.cmpi ult, %32, %28 : i64
    cf.cond_br %33, ^bb17, ^bb16
  ^bb16:  // 2 preds: ^bb15, ^bb19
    cf.br ^bb9
  ^bb17:  // pred: ^bb15
    %c3_i64 = arith.constant 3 : i64
    %c512_i64 = arith.constant 512 : i64
    %34 = arith.muli %31, %31 : i64
    %35 = arith.divui %34, %c512_i64 : i64
    %36 = arith.muli %31, %c3_i64 : i64
    %37 = arith.addi %35, %36 : i64
    %c3_i64_13 = arith.constant 3 : i64
    %c512_i64_14 = arith.constant 512 : i64
    %38 = arith.muli %27, %27 : i64
    %39 = arith.divui %38, %c512_i64_14 : i64
    %40 = arith.muli %27, %c3_i64_13 : i64
    %41 = arith.addi %39, %40 : i64
    %42 = arith.subi %41, %37 : i64
    %43 = llvm.load %arg1 : !llvm.ptr -> i64
    %44 = arith.cmpi ult, %43, %42 : i64
    scf.if %44 {
    } else {
      %49 = arith.subi %43, %42 : i64
      llvm.store %49, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_15 = arith.constant 80 : i8
    cf.cond_br %44, ^bb1(%c80_i8_15 : i8), ^bb18
  ^bb18:  // pred: ^bb17
    %45 = call @dora_fn_extend_memory(%arg0, %28) : (!llvm.ptr, i64) -> !llvm.ptr
    %46 = llvm.getelementptr %45[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %47 = llvm.load %46 : !llvm.ptr -> i8
    %c0_i8_16 = arith.constant 0 : i8
    %48 = arith.cmpi ne, %47, %c0_i8_16 : i8
    cf.cond_br %48, ^bb1(%47 : i8), ^bb19
  ^bb19:  // pred: ^bb18
    cf.br ^bb16
  }
  func.func public @main(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr) -> i8 attributes {llvm.emit_c_interface} {
    %c0_i64 = arith.constant 0 : i64
    %0 = llvm.alloca %c0_i64 x !llvm.ptr : (i64) -> !llvm.ptr
    llvm.store %arg2, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8 = arith.constant 0 : i8
    %c0_i8_0 = arith.constant 0 : i8
    %1 = arith.cmpi ne, %c0_i8, %c0_i8_0 : i8
    cf.cond_br %1, ^bb1(%c0_i8 : i8), ^bb4
  ^bb1(%2: i8):  // 4 preds: ^bb0, ^bb2, ^bb4, ^bb7
    %c0_i64_1 = arith.constant 0 : i64
    %3 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_1, %c0_i64_1, %3, %2) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %2 : i8
  ^bb2(%4: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %4 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3(%5: i8):  // 3 preds: ^bb5, ^bb6, ^bb9
    return %5 : i8
  ^bb4:  // pred: ^bb0
    %6 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %7 = arith.cmpi uge, %6, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %7, ^bb8, ^bb1(%c80_i8 : i8)
  ^bb5:  // pred: ^bb9
    %8 = call @op95(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %9 = arith.cmpi ne, %8, %c0_i8_0 : i8
    cf.cond_br %9, ^bb3(%8 : i8), ^bb6
  ^bb6:  // pred: ^bb5
    %10 = call @op253(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %11 = arith.cmpi ne, %10, %c0_i8_0 : i8
    cf.cond_br %11, ^bb3(%10 : i8), ^bb10
  ^bb7:  // pred: ^bb8
    %c1024_i64 = arith.constant 1024 : i64
    %12 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %13 = arith.addi %12, %c1_i64 : i64
    llvm.store %13, %arg3 : i64, !llvm.ptr
    %14 = arith.cmpi ult, %c1024_i64, %13 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %14, ^bb1(%c92_i8 : i8), ^bb9
  ^bb8:  // pred: ^bb4
    %15 = arith.subi %6, %c3_i64 : i64
    llvm.store %15, %arg1 : i64, !llvm.ptr
    cf.br ^bb7
  ^bb9:  // pred: ^bb7
    %c64_i256 = arith.constant 64 : i256
    %16 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c64_i256, %16 : i256, !llvm.ptr
    %17 = llvm.getelementptr %16[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %17, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_2 = arith.constant 0 : i8
    %18 = arith.cmpi ne, %c0_i8_2, %c0_i8_0 : i8
    cf.cond_br %18, ^bb3(%c0_i8_2 : i8), ^bb5
  ^bb10:  // pred: ^bb6
    %c0_i64_3 = arith.constant 0 : i64
    %c2_i8 = arith.constant 2 : i8
    %19 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_3, %c0_i64_3, %19, %c2_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c2_i8 : i8
  }
}
