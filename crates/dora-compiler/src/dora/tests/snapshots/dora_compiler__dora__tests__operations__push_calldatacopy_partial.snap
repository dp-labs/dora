---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  llvm.mlir.global internal @dora_global_memory_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_memory_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_calldata_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_calldata_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_gas_counter() {addr_space = 0 : i32} : i64
  func.func private @dora_fn_nop()
  func.func private @dora_fn_tracing(!llvm.ptr, i8, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_fn_is_static(!llvm.ptr) -> i8
  func.func private @dora_fn_exp(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_chainid(!llvm.ptr) -> i64
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gaslimit_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_code_copy(!llvm.ptr, !llvm.ptr, i64, i64)
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_call(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_returndata_copy(!llvm.ptr, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_tload(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_tstore(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func public @main(%arg0: !llvm.ptr, %arg1: i64, %arg2: !llvm.ptr, %arg3: !llvm.ptr) -> i8 attributes {llvm.emit_c_interface} {
    %c0_i64 = arith.constant 0 : i64
    %0 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %c0_i64, %0 : i64, !llvm.ptr
    %1 = call @dora_fn_calldata(%arg0) : (!llvm.ptr) -> !llvm.ptr
    %2 = llvm.mlir.addressof @dora_global_calldata_ptr : !llvm.ptr
    llvm.store %1, %2 : !llvm.ptr, !llvm.ptr
    %3 = call @dora_fn_calldata_size(%arg0) : (!llvm.ptr) -> i64
    %4 = llvm.mlir.addressof @dora_global_calldata_size : !llvm.ptr
    llvm.store %3, %4 : i64, !llvm.ptr
    %5 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    llvm.store %arg1, %5 : i64, !llvm.ptr
    cf.br ^bb5
  ^bb1(%6: i8):  // 17 preds: ^bb2, ^bb4, ^bb5, ^bb8, ^bb9, ^bb12, ^bb13, ^bb15, ^bb16, ^bb19, ^bb20, ^bb23, ^bb24, ^bb25, ^bb26, ^bb29, ^bb30
    %c0_i64_0 = arith.constant 0 : i64
    %7 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %8 = llvm.load %7 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_0, %c0_i64_0, %8, %6) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %6 : i8
  ^bb2(%9: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %9 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3:  // pred: ^bb4
    %c0_i256 = arith.constant 0 : i256
    %10 = llvm.load %arg3 : !llvm.ptr -> i64
    %11 = llvm.getelementptr %arg2[%10] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64 = arith.constant 1 : i64
    %12 = arith.addi %10, %c1_i64 : i64
    llvm.store %12, %arg3 : i64, !llvm.ptr
    llvm.store %c0_i256, %11 : i256, !llvm.ptr
    cf.br ^bb9
  ^bb4:  // pred: ^bb6
    %c1024_i64 = arith.constant 1024 : i64
    %13 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_1 = arith.constant 1 : i64
    %14 = arith.addi %13, %c1_i64_1 : i64
    %15 = arith.cmpi ult, %c1024_i64, %14 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %15, ^bb1(%c92_i8 : i8), ^bb3
  ^bb5:  // pred: ^bb0
    %16 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %17 = llvm.load %16 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %18 = arith.cmpi uge, %17, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %18, ^bb6, ^bb1(%c80_i8 : i8)
  ^bb6:  // pred: ^bb5
    %19 = arith.subi %17, %c3_i64 : i64
    llvm.store %19, %16 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb7:  // pred: ^bb8
    %c10_i256 = arith.constant 10 : i256
    %20 = llvm.load %arg3 : !llvm.ptr -> i64
    %21 = llvm.getelementptr %arg2[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_2 = arith.constant 1 : i64
    %22 = arith.addi %20, %c1_i64_2 : i64
    llvm.store %22, %arg3 : i64, !llvm.ptr
    llvm.store %c10_i256, %21 : i256, !llvm.ptr
    cf.br ^bb13
  ^bb8:  // pred: ^bb10
    %c1024_i64_3 = arith.constant 1024 : i64
    %23 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_4 = arith.constant 1 : i64
    %24 = arith.addi %23, %c1_i64_4 : i64
    %25 = arith.cmpi ult, %c1024_i64_3, %24 : i64
    %c92_i8_5 = arith.constant 92 : i8
    cf.cond_br %25, ^bb1(%c92_i8_5 : i8), ^bb7
  ^bb9:  // pred: ^bb3
    %26 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %27 = llvm.load %26 : !llvm.ptr -> i64
    %c3_i64_6 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %28 = arith.cmpi uge, %27, %c3_i64_6 : i64
    %c80_i8_7 = arith.constant 80 : i8
    cf.cond_br %28, ^bb10, ^bb1(%c80_i8_7 : i8)
  ^bb10:  // pred: ^bb9
    %29 = arith.subi %27, %c3_i64_6 : i64
    llvm.store %29, %26 : i64, !llvm.ptr
    cf.br ^bb8
  ^bb11:  // pred: ^bb12
    %c20_i256 = arith.constant 20 : i256
    %30 = llvm.load %arg3 : !llvm.ptr -> i64
    %31 = llvm.getelementptr %arg2[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_8 = arith.constant 1 : i64
    %32 = arith.addi %30, %c1_i64_8 : i64
    llvm.store %32, %arg3 : i64, !llvm.ptr
    llvm.store %c20_i256, %31 : i256, !llvm.ptr
    cf.br ^bb20
  ^bb12:  // pred: ^bb14
    %c1024_i64_9 = arith.constant 1024 : i64
    %33 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_10 = arith.constant 1 : i64
    %34 = arith.addi %33, %c1_i64_10 : i64
    %35 = arith.cmpi ult, %c1024_i64_9, %34 : i64
    %c92_i8_11 = arith.constant 92 : i8
    cf.cond_br %35, ^bb1(%c92_i8_11 : i8), ^bb11
  ^bb13:  // pred: ^bb7
    %36 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %37 = llvm.load %36 : !llvm.ptr -> i64
    %c3_i64_12 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %38 = arith.cmpi uge, %37, %c3_i64_12 : i64
    %c80_i8_13 = arith.constant 80 : i8
    cf.cond_br %38, ^bb14, ^bb1(%c80_i8_13 : i8)
  ^bb14:  // pred: ^bb13
    %39 = arith.subi %37, %c3_i64_12 : i64
    llvm.store %39, %36 : i64, !llvm.ptr
    cf.br ^bb12
  ^bb15:  // pred: ^bb19
    %40 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_14 = arith.constant 1 : i64
    %41 = arith.subi %40, %c1_i64_14 : i64
    %42 = llvm.getelementptr %arg2[%41] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %41, %arg3 : i64, !llvm.ptr
    %43 = llvm.load %42 : !llvm.ptr -> i256
    %44 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_15 = arith.constant 1 : i64
    %45 = arith.subi %44, %c1_i64_15 : i64
    %46 = llvm.getelementptr %arg2[%45] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %45, %arg3 : i64, !llvm.ptr
    %47 = llvm.load %46 : !llvm.ptr -> i256
    %48 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_16 = arith.constant 1 : i64
    %49 = arith.subi %48, %c1_i64_16 : i64
    %50 = llvm.getelementptr %arg2[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %49, %arg3 : i64, !llvm.ptr
    %51 = llvm.load %50 : !llvm.ptr -> i256
    %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256
    %52 = arith.cmpi sgt, %51, %c18446744073709551615_i256 : i256
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %52, ^bb1(%c84_i8 : i8), ^bb16
  ^bb16:  // pred: ^bb15
    %53 = arith.trunci %51 : i256 to i64
    %c0_i64_17 = arith.constant 0 : i64
    %54 = arith.cmpi slt, %53, %c0_i64_17 : i64
    %c84_i8_18 = arith.constant 84 : i8
    cf.cond_br %54, ^bb1(%c84_i8_18 : i8), ^bb17
  ^bb17:  // pred: ^bb16
    %c0_i64_19 = arith.constant 0 : i64
    %55 = arith.cmpi ne, %53, %c0_i64_19 : i64
    cf.cond_br %55, ^bb23, ^bb18
  ^bb18:  // 2 preds: ^bb17, ^bb28
    %56 = arith.trunci %43 : i256 to i64
    %c1_i256 = arith.constant 1 : i256
    %57 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %47, %57 {alignment = 1 : i64} : i256, !llvm.ptr
    call @dora_fn_calldata_copy(%arg0, %56, %57, %53) : (!llvm.ptr, i64, !llvm.ptr, i64) -> ()
    cf.br ^bb22
  ^bb19:  // pred: ^bb21
    %c1024_i64_20 = arith.constant 1024 : i64
    %58 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-3_i64 = arith.constant -3 : i64
    %59 = arith.addi %58, %c-3_i64 : i64
    %c3_i64_21 = arith.constant 3 : i64
    %60 = arith.cmpi ult, %58, %c3_i64_21 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %60, ^bb1(%c91_i8 : i8), ^bb15
  ^bb20:  // pred: ^bb11
    %61 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %62 = llvm.load %61 : !llvm.ptr -> i64
    %c3_i64_22 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %63 = arith.cmpi uge, %62, %c3_i64_22 : i64
    %c80_i8_23 = arith.constant 80 : i8
    cf.cond_br %63, ^bb21, ^bb1(%c80_i8_23 : i8)
  ^bb21:  // pred: ^bb20
    %64 = arith.subi %62, %c3_i64_22 : i64
    llvm.store %64, %61 : i64, !llvm.ptr
    cf.br ^bb19
  ^bb22:  // pred: ^bb18
    %c0_i64_24 = arith.constant 0 : i64
    %c1_i8 = arith.constant 1 : i8
    %65 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %66 = llvm.load %65 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_24, %c0_i64_24, %66, %c1_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c1_i8 : i8
  ^bb23:  // pred: ^bb17
    %c31_i64 = arith.constant 31 : i64
    %c32_i64 = arith.constant 32 : i64
    %67 = arith.addi %53, %c31_i64 : i64
    %68 = arith.divui %67, %c32_i64 : i64
    %c3_i64_25 = arith.constant 3 : i64
    %69 = arith.muli %68, %c3_i64_25 : i64
    %70 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %71 = llvm.load %70 : !llvm.ptr -> i64
    %72 = arith.cmpi ult, %71, %69 : i64
    scf.if %72 {
    } else {
      %107 = arith.subi %71, %69 : i64
      llvm.store %107, %70 : i64, !llvm.ptr
    }
    %c80_i8_26 = arith.constant 80 : i8
    cf.cond_br %72, ^bb1(%c80_i8_26 : i8), ^bb24
  ^bb24:  // pred: ^bb23
    %c18446744073709551615_i256_27 = arith.constant 18446744073709551615 : i256
    %73 = arith.cmpi sgt, %43, %c18446744073709551615_i256_27 : i256
    %c84_i8_28 = arith.constant 84 : i8
    cf.cond_br %73, ^bb1(%c84_i8_28 : i8), ^bb25
  ^bb25:  // pred: ^bb24
    %74 = arith.trunci %43 : i256 to i64
    %c0_i64_29 = arith.constant 0 : i64
    %75 = arith.cmpi slt, %74, %c0_i64_29 : i64
    %c84_i8_30 = arith.constant 84 : i8
    cf.cond_br %75, ^bb1(%c84_i8_30 : i8), ^bb26
  ^bb26:  // pred: ^bb25
    %76 = arith.addi %74, %53 : i64
    %c0_i64_31 = arith.constant 0 : i64
    %77 = arith.cmpi slt, %76, %c0_i64_31 : i64
    %c84_i8_32 = arith.constant 84 : i8
    cf.cond_br %77, ^bb1(%c84_i8_32 : i8), ^bb27
  ^bb27:  // pred: ^bb26
    %c31_i64_33 = arith.constant 31 : i64
    %c32_i64_34 = arith.constant 32 : i64
    %78 = arith.addi %76, %c31_i64_33 : i64
    %79 = arith.divui %78, %c32_i64_34 : i64
    %c32_i64_35 = arith.constant 32 : i64
    %80 = arith.muli %79, %c32_i64_35 : i64
    %81 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    %82 = llvm.load %81 : !llvm.ptr -> i64
    %c31_i64_36 = arith.constant 31 : i64
    %c32_i64_37 = arith.constant 32 : i64
    %83 = arith.addi %82, %c31_i64_36 : i64
    %84 = arith.divui %83, %c32_i64_37 : i64
    %85 = arith.muli %84, %c32_i64_35 : i64
    %86 = arith.cmpi ult, %85, %80 : i64
    cf.cond_br %86, ^bb29, ^bb28
  ^bb28:  // 2 preds: ^bb27, ^bb31
    cf.br ^bb18
  ^bb29:  // pred: ^bb27
    %c3_i64_38 = arith.constant 3 : i64
    %c512_i64 = arith.constant 512 : i64
    %87 = arith.muli %84, %84 : i64
    %88 = arith.divui %87, %c512_i64 : i64
    %89 = arith.muli %84, %c3_i64_38 : i64
    %90 = arith.addi %88, %89 : i64
    %c3_i64_39 = arith.constant 3 : i64
    %c512_i64_40 = arith.constant 512 : i64
    %91 = arith.muli %79, %79 : i64
    %92 = arith.divui %91, %c512_i64_40 : i64
    %93 = arith.muli %79, %c3_i64_39 : i64
    %94 = arith.addi %92, %93 : i64
    %95 = arith.subi %94, %90 : i64
    %96 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %97 = llvm.load %96 : !llvm.ptr -> i64
    %98 = arith.cmpi ult, %97, %95 : i64
    scf.if %98 {
    } else {
      %107 = arith.subi %97, %95 : i64
      llvm.store %107, %96 : i64, !llvm.ptr
    }
    %c80_i8_41 = arith.constant 80 : i8
    cf.cond_br %98, ^bb1(%c80_i8_41 : i8), ^bb30
  ^bb30:  // pred: ^bb29
    %99 = call @dora_fn_extend_memory(%arg0, %80) : (!llvm.ptr, i64) -> !llvm.ptr
    %100 = llvm.getelementptr %99[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %101 = llvm.load %100 : !llvm.ptr -> !llvm.ptr
    %102 = llvm.getelementptr %99[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %103 = llvm.load %102 : !llvm.ptr -> i8
    %c0_i8 = arith.constant 0 : i8
    %104 = arith.cmpi ne, %103, %c0_i8 : i8
    cf.cond_br %104, ^bb1(%103 : i8), ^bb31
  ^bb31:  // pred: ^bb30
    %105 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    llvm.store %101, %105 : !llvm.ptr, !llvm.ptr
    %106 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %80, %106 : i64, !llvm.ptr
    cf.br ^bb28
  }
}
