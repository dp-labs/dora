---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  llvm.mlir.global internal @dora_stack_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_stack_length() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_memory_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_memory_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_calldata_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_calldata_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_gas_counter() {addr_space = 0 : i32} : i64
  llvm.mlir.global external @dora_ctx_is_static() {addr_space = 0 : i32} : !llvm.ptr
  func.func private @dora_debug_print(i32)
  func.func private @dora_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_get_calldata_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_get_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_get_chainid(!llvm.ptr) -> i64
  func.func private @dora_store_in_callvalue_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_caller_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_get_gaslimit(!llvm.ptr) -> i64
  func.func private @dora_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_copy_code_to_memory(!llvm.ptr, i64, i64, i64)
  func.func private @dora_read_storage(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_write_storage(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> i64
  func.func private @dora_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_get_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_get_coinbase_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_get_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_get_codesize_from_address(!llvm.ptr, !llvm.ptr) -> i64
  func.func private @dora_get_address_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_get_prevrandao(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_call(!llvm.ptr, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr, i8) -> i8
  func.func private @dora_store_in_balance(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> i64
  func.func private @dora_copy_ext_code_to_memory(!llvm.ptr, !llvm.ptr, i64, i64, i64)
  func.func private @dora_get_blob_hash_at_index(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_get_block_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_get_code_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_create(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr) -> i8
  func.func private @dora_create2(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
  func.func private @dora_get_return_data_size(!llvm.ptr) -> i64
  func.func private @dora_copy_return_data_into_memory(!llvm.ptr, i64, i64, i64)
  func.func private @dora_selfdestruct(!llvm.ptr, !llvm.ptr) -> i64
  func.func private @dora_transient_storage_read(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_transient_storage_write(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func public @main(%arg0: !llvm.ptr, %arg1: i64) -> i8 attributes {llvm.emit_c_interface} {
    %c1024_i256 = arith.constant 1024 : i256
    %0 = llvm.alloca %c1024_i256 x i256 : (i256) -> !llvm.ptr
    %1 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    llvm.store %0, %1 : !llvm.ptr, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %2 = llvm.mlir.addressof @dora_stack_length : !llvm.ptr
    llvm.store %c0_i64, %2 : i64, !llvm.ptr
    %c0_i64_0 = arith.constant 0 : i64
    %3 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    llvm.store %c0_i64_0, %3 : i64, !llvm.ptr
    %4 = call @dora_get_calldata_ptr(%arg0) : (!llvm.ptr) -> !llvm.ptr
    %5 = llvm.mlir.addressof @dora_calldata_ptr : !llvm.ptr
    llvm.store %4, %5 : !llvm.ptr, !llvm.ptr
    %6 = call @dora_get_calldata_size(%arg0) : (!llvm.ptr) -> i64
    %7 = llvm.mlir.addressof @dora_calldata_size : !llvm.ptr
    llvm.store %6, %7 : i64, !llvm.ptr
    %8 = llvm.mlir.addressof @dora_gas_counter : !llvm.ptr
    llvm.store %arg1, %8 : i64, !llvm.ptr
    %9 = llvm.mlir.addressof @dora_stack_length : !llvm.ptr
    %c1024_i64 = arith.constant 1024 : i64
    cf.br ^bb3
  ^bb1(%10: i8):  // 8 preds: ^bb2, ^bb5, ^bb9, ^bb14, ^bb15, ^bb19, ^bb23, ^bb29
    %c0_i64_1 = arith.constant 0 : i64
    call @dora_write_result(%arg0, %c0_i64_1, %c0_i64_1, %c0_i64_1, %10) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %10 : i8
  ^bb2(%11: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %11 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3:  // pred: ^bb0
    %c170141183460469231731687303715884105727_i256 = arith.constant 170141183460469231731687303715884105727 : i256
    %12 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    llvm.store %c170141183460469231731687303715884105727_i256, %13 : i256, !llvm.ptr
    %14 = llvm.getelementptr %13[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %14, %12 : !llvm.ptr, !llvm.ptr
    cf.br ^bb4
  ^bb4:  // pred: ^bb3
    %c0_i256 = arith.constant 0 : i256
    %15 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %16 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256, %16 : i256, !llvm.ptr
    %17 = llvm.getelementptr %16[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %17, %15 : !llvm.ptr, !llvm.ptr
    cf.br ^bb5
  ^bb5:  // pred: ^bb4
    %18 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %19 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %20 = llvm.getelementptr %19[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %21 = llvm.load %20 : !llvm.ptr -> i256
    llvm.store %20, %18 : !llvm.ptr, !llvm.ptr
    %22 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %23 = llvm.load %22 : !llvm.ptr -> !llvm.ptr
    %24 = llvm.getelementptr %23[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %25 = llvm.load %24 : !llvm.ptr -> i256
    llvm.store %24, %22 : !llvm.ptr, !llvm.ptr
    %26 = arith.trunci %21 : i256 to i64
    %c32_i64 = arith.constant 32 : i64
    %27 = arith.addi %26, %c32_i64 : i64
    %c0_i64_2 = arith.constant 0 : i64
    %28 = arith.cmpi slt, %27, %c0_i64_2 : i64
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %28, ^bb1(%c84_i8 : i8), ^bb6
  ^bb6:  // pred: ^bb5
    %29 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    %30 = llvm.load %29 : !llvm.ptr -> i64
    %c31_i64 = arith.constant 31 : i64
    %c32_i64_3 = arith.constant 32 : i64
    %31 = arith.addi %27, %c31_i64 : i64
    %32 = arith.divui %31, %c32_i64_3 : i64
    %33 = arith.muli %32, %c32_i64_3 : i64
    %34 = arith.cmpi ult, %30, %33 : i64
    scf.if %34 {
      %205 = func.call @dora_extend_memory(%arg0, %33) : (!llvm.ptr, i64) -> !llvm.ptr
      llvm.store %33, %29 : i64, !llvm.ptr
      %206 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
      llvm.store %205, %206 : !llvm.ptr, !llvm.ptr
    } else {
    }
    %35 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
    %36 = llvm.load %35 : !llvm.ptr -> !llvm.ptr
    %37 = llvm.getelementptr %36[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %38 = llvm.intr.bswap(%25)  : (i256) -> i256
    llvm.store %38, %37 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb7
  ^bb7:  // pred: ^bb6
    %c170141183460469231731687303715884105727_i256_4 = arith.constant 170141183460469231731687303715884105727 : i256
    %39 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %40 = llvm.load %39 : !llvm.ptr -> !llvm.ptr
    llvm.store %c170141183460469231731687303715884105727_i256_4, %40 : i256, !llvm.ptr
    %41 = llvm.getelementptr %40[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %41, %39 : !llvm.ptr, !llvm.ptr
    cf.br ^bb8
  ^bb8:  // pred: ^bb7
    %c32_i256 = arith.constant 32 : i256
    %42 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %43 = llvm.load %42 : !llvm.ptr -> !llvm.ptr
    llvm.store %c32_i256, %43 : i256, !llvm.ptr
    %44 = llvm.getelementptr %43[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %44, %42 : !llvm.ptr, !llvm.ptr
    cf.br ^bb9
  ^bb9:  // pred: ^bb8
    %45 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %46 = llvm.load %45 : !llvm.ptr -> !llvm.ptr
    %47 = llvm.getelementptr %46[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %48 = llvm.load %47 : !llvm.ptr -> i256
    llvm.store %47, %45 : !llvm.ptr, !llvm.ptr
    %49 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %50 = llvm.load %49 : !llvm.ptr -> !llvm.ptr
    %51 = llvm.getelementptr %50[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %52 = llvm.load %51 : !llvm.ptr -> i256
    llvm.store %51, %49 : !llvm.ptr, !llvm.ptr
    %53 = arith.trunci %48 : i256 to i64
    %c32_i64_5 = arith.constant 32 : i64
    %54 = arith.addi %53, %c32_i64_5 : i64
    %c0_i64_6 = arith.constant 0 : i64
    %55 = arith.cmpi slt, %54, %c0_i64_6 : i64
    %c84_i8_7 = arith.constant 84 : i8
    cf.cond_br %55, ^bb1(%c84_i8_7 : i8), ^bb10
  ^bb10:  // pred: ^bb9
    %56 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    %57 = llvm.load %56 : !llvm.ptr -> i64
    %c31_i64_8 = arith.constant 31 : i64
    %c32_i64_9 = arith.constant 32 : i64
    %58 = arith.addi %54, %c31_i64_8 : i64
    %59 = arith.divui %58, %c32_i64_9 : i64
    %60 = arith.muli %59, %c32_i64_9 : i64
    %61 = arith.cmpi ult, %57, %60 : i64
    scf.if %61 {
      %205 = func.call @dora_extend_memory(%arg0, %60) : (!llvm.ptr, i64) -> !llvm.ptr
      llvm.store %60, %56 : i64, !llvm.ptr
      %206 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
      llvm.store %205, %206 : !llvm.ptr, !llvm.ptr
    } else {
    }
    %62 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
    %63 = llvm.load %62 : !llvm.ptr -> !llvm.ptr
    %64 = llvm.getelementptr %63[%53] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %65 = llvm.intr.bswap(%52)  : (i256) -> i256
    llvm.store %65, %64 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb11
  ^bb11:  // pred: ^bb10
    %c41_i256 = arith.constant 41 : i256
    %66 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %67 = llvm.load %66 : !llvm.ptr -> !llvm.ptr
    llvm.store %c41_i256, %67 : i256, !llvm.ptr
    %68 = llvm.getelementptr %67[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %68, %66 : !llvm.ptr, !llvm.ptr
    cf.br ^bb12
  ^bb12:  // pred: ^bb11
    %c0_i256_10 = arith.constant 0 : i256
    %69 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %70 = llvm.load %69 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_10, %70 : i256, !llvm.ptr
    %71 = llvm.getelementptr %70[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %71, %69 : !llvm.ptr, !llvm.ptr
    cf.br ^bb13
  ^bb13:  // pred: ^bb12
    %c0_i256_11 = arith.constant 0 : i256
    %72 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %73 = llvm.load %72 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_11, %73 : i256, !llvm.ptr
    %74 = llvm.getelementptr %73[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %74, %72 : !llvm.ptr, !llvm.ptr
    cf.br ^bb14
  ^bb14:  // pred: ^bb13
    %75 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %76 = llvm.load %75 : !llvm.ptr -> !llvm.ptr
    %77 = llvm.getelementptr %76[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %78 = llvm.load %77 : !llvm.ptr -> i256
    llvm.store %77, %75 : !llvm.ptr, !llvm.ptr
    %79 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %80 = llvm.load %79 : !llvm.ptr -> !llvm.ptr
    %81 = llvm.getelementptr %80[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %82 = llvm.load %81 : !llvm.ptr -> i256
    llvm.store %81, %79 : !llvm.ptr, !llvm.ptr
    %83 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %84 = llvm.load %83 : !llvm.ptr -> !llvm.ptr
    %85 = llvm.getelementptr %84[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %86 = llvm.load %85 : !llvm.ptr -> i256
    llvm.store %85, %83 : !llvm.ptr, !llvm.ptr
    %87 = arith.trunci %82 : i256 to i64
    %88 = arith.trunci %86 : i256 to i64
    %89 = arith.addi %87, %88 : i64
    %c0_i64_12 = arith.constant 0 : i64
    %90 = arith.cmpi slt, %89, %c0_i64_12 : i64
    %c84_i8_13 = arith.constant 84 : i8
    cf.cond_br %90, ^bb1(%c84_i8_13 : i8), ^bb15
  ^bb15:  // pred: ^bb14
    %91 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    %92 = llvm.load %91 : !llvm.ptr -> i64
    %c31_i64_14 = arith.constant 31 : i64
    %c32_i64_15 = arith.constant 32 : i64
    %93 = arith.addi %89, %c31_i64_14 : i64
    %94 = arith.divui %93, %c32_i64_15 : i64
    %95 = arith.muli %94, %c32_i64_15 : i64
    %96 = arith.cmpi ult, %92, %95 : i64
    scf.if %96 {
      %205 = func.call @dora_extend_memory(%arg0, %95) : (!llvm.ptr, i64) -> !llvm.ptr
      llvm.store %95, %91 : i64, !llvm.ptr
      %206 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
      llvm.store %205, %206 : !llvm.ptr, !llvm.ptr
    } else {
    }
    %c1_i256 = arith.constant 1 : i256
    %97 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %78, %97 {alignment = 1 : i64} : i256, !llvm.ptr
    %98 = llvm.mlir.addressof @dora_gas_counter : !llvm.ptr
    %99 = llvm.load %98 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %100 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %99, %100 {alignment = 1 : i64} : i64, !llvm.ptr
    %101 = call @dora_create(%arg0, %88, %87, %97, %100) : (!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr) -> i8
    %c0_i8 = arith.constant 0 : i8
    %102 = arith.cmpi ne, %c0_i8, %101 : i8
    %c94_i8 = arith.constant 94 : i8
    cf.cond_br %102, ^bb1(%c94_i8 : i8), ^bb16
  ^bb16:  // pred: ^bb15
    %103 = llvm.load %97 : !llvm.ptr -> i256
    %104 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %105 = llvm.load %104 : !llvm.ptr -> !llvm.ptr
    llvm.store %103, %105 : i256, !llvm.ptr
    %106 = llvm.getelementptr %105[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %106, %104 : !llvm.ptr, !llvm.ptr
    cf.br ^bb17
  ^bb17:  // pred: ^bb16
    %c0_i256_16 = arith.constant 0 : i256
    %107 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %108 = llvm.load %107 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_16, %108 : i256, !llvm.ptr
    %109 = llvm.getelementptr %108[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %109, %107 : !llvm.ptr, !llvm.ptr
    cf.br ^bb18
  ^bb18:  // pred: ^bb17
    %c0_i256_17 = arith.constant 0 : i256
    %110 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %111 = llvm.load %110 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_17, %111 : i256, !llvm.ptr
    %112 = llvm.getelementptr %111[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %112, %110 : !llvm.ptr, !llvm.ptr
    cf.br ^bb19
  ^bb19:  // pred: ^bb18
    %113 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %114 = llvm.load %113 : !llvm.ptr -> !llvm.ptr
    %115 = llvm.getelementptr %114[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %116 = llvm.load %115 : !llvm.ptr -> i256
    llvm.store %115, %113 : !llvm.ptr, !llvm.ptr
    %117 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %118 = llvm.load %117 : !llvm.ptr -> !llvm.ptr
    %119 = llvm.getelementptr %118[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %120 = llvm.load %119 : !llvm.ptr -> i256
    llvm.store %119, %117 : !llvm.ptr, !llvm.ptr
    %121 = arith.trunci %116 : i256 to i64
    %c32_i64_18 = arith.constant 32 : i64
    %122 = arith.addi %121, %c32_i64_18 : i64
    %c0_i64_19 = arith.constant 0 : i64
    %123 = arith.cmpi slt, %122, %c0_i64_19 : i64
    %c84_i8_20 = arith.constant 84 : i8
    cf.cond_br %123, ^bb1(%c84_i8_20 : i8), ^bb20
  ^bb20:  // pred: ^bb19
    %124 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    %125 = llvm.load %124 : !llvm.ptr -> i64
    %c31_i64_21 = arith.constant 31 : i64
    %c32_i64_22 = arith.constant 32 : i64
    %126 = arith.addi %122, %c31_i64_21 : i64
    %127 = arith.divui %126, %c32_i64_22 : i64
    %128 = arith.muli %127, %c32_i64_22 : i64
    %129 = arith.cmpi ult, %125, %128 : i64
    scf.if %129 {
      %205 = func.call @dora_extend_memory(%arg0, %128) : (!llvm.ptr, i64) -> !llvm.ptr
      llvm.store %128, %124 : i64, !llvm.ptr
      %206 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
      llvm.store %205, %206 : !llvm.ptr, !llvm.ptr
    } else {
    }
    %130 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
    %131 = llvm.load %130 : !llvm.ptr -> !llvm.ptr
    %132 = llvm.getelementptr %131[%121] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %133 = llvm.intr.bswap(%120)  : (i256) -> i256
    llvm.store %133, %132 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb21
  ^bb21:  // pred: ^bb20
    %c0_i256_23 = arith.constant 0 : i256
    %134 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %135 = llvm.load %134 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_23, %135 : i256, !llvm.ptr
    %136 = llvm.getelementptr %135[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %136, %134 : !llvm.ptr, !llvm.ptr
    cf.br ^bb22
  ^bb22:  // pred: ^bb21
    %c32_i256_24 = arith.constant 32 : i256
    %137 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %138 = llvm.load %137 : !llvm.ptr -> !llvm.ptr
    llvm.store %c32_i256_24, %138 : i256, !llvm.ptr
    %139 = llvm.getelementptr %138[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %139, %137 : !llvm.ptr, !llvm.ptr
    cf.br ^bb23
  ^bb23:  // pred: ^bb22
    %140 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %141 = llvm.load %140 : !llvm.ptr -> !llvm.ptr
    %142 = llvm.getelementptr %141[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %143 = llvm.load %142 : !llvm.ptr -> i256
    llvm.store %142, %140 : !llvm.ptr, !llvm.ptr
    %144 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %145 = llvm.load %144 : !llvm.ptr -> !llvm.ptr
    %146 = llvm.getelementptr %145[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %147 = llvm.load %146 : !llvm.ptr -> i256
    llvm.store %146, %144 : !llvm.ptr, !llvm.ptr
    %148 = arith.trunci %143 : i256 to i64
    %c32_i64_25 = arith.constant 32 : i64
    %149 = arith.addi %148, %c32_i64_25 : i64
    %c0_i64_26 = arith.constant 0 : i64
    %150 = arith.cmpi slt, %149, %c0_i64_26 : i64
    %c84_i8_27 = arith.constant 84 : i8
    cf.cond_br %150, ^bb1(%c84_i8_27 : i8), ^bb24
  ^bb24:  // pred: ^bb23
    %151 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    %152 = llvm.load %151 : !llvm.ptr -> i64
    %c31_i64_28 = arith.constant 31 : i64
    %c32_i64_29 = arith.constant 32 : i64
    %153 = arith.addi %149, %c31_i64_28 : i64
    %154 = arith.divui %153, %c32_i64_29 : i64
    %155 = arith.muli %154, %c32_i64_29 : i64
    %156 = arith.cmpi ult, %152, %155 : i64
    scf.if %156 {
      %205 = func.call @dora_extend_memory(%arg0, %155) : (!llvm.ptr, i64) -> !llvm.ptr
      llvm.store %155, %151 : i64, !llvm.ptr
      %206 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
      llvm.store %205, %206 : !llvm.ptr, !llvm.ptr
    } else {
    }
    %157 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
    %158 = llvm.load %157 : !llvm.ptr -> !llvm.ptr
    %159 = llvm.getelementptr %158[%148] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %160 = llvm.intr.bswap(%147)  : (i256) -> i256
    llvm.store %160, %159 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb25
  ^bb25:  // pred: ^bb24
    %c32_i256_30 = arith.constant 32 : i256
    %161 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %162 = llvm.load %161 : !llvm.ptr -> !llvm.ptr
    llvm.store %c32_i256_30, %162 : i256, !llvm.ptr
    %163 = llvm.getelementptr %162[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %163, %161 : !llvm.ptr, !llvm.ptr
    cf.br ^bb26
  ^bb26:  // pred: ^bb25
    %c0_i256_31 = arith.constant 0 : i256
    %164 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %165 = llvm.load %164 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_31, %165 : i256, !llvm.ptr
    %166 = llvm.getelementptr %165[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %166, %164 : !llvm.ptr, !llvm.ptr
    cf.br ^bb27
  ^bb27:  // pred: ^bb26
    %c0_i256_32 = arith.constant 0 : i256
    %167 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %168 = llvm.load %167 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_32, %168 : i256, !llvm.ptr
    %169 = llvm.getelementptr %168[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %169, %167 : !llvm.ptr, !llvm.ptr
    cf.br ^bb28
  ^bb28:  // pred: ^bb27
    %170 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %171 = llvm.load %170 : !llvm.ptr -> !llvm.ptr
    %172 = llvm.getelementptr %171[-4] : (!llvm.ptr) -> !llvm.ptr, i256
    %173 = llvm.load %172 : !llvm.ptr -> i256
    %174 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %175 = llvm.load %174 : !llvm.ptr -> !llvm.ptr
    llvm.store %173, %175 : i256, !llvm.ptr
    %176 = llvm.getelementptr %175[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %176, %174 : !llvm.ptr, !llvm.ptr
    cf.br ^bb29
  ^bb29:  // pred: ^bb28
    %177 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %178 = llvm.load %177 : !llvm.ptr -> !llvm.ptr
    %179 = llvm.getelementptr %178[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %180 = llvm.load %179 : !llvm.ptr -> i256
    llvm.store %179, %177 : !llvm.ptr, !llvm.ptr
    %181 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %182 = llvm.load %181 : !llvm.ptr -> !llvm.ptr
    %183 = llvm.getelementptr %182[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %184 = llvm.load %183 : !llvm.ptr -> i256
    llvm.store %183, %181 : !llvm.ptr, !llvm.ptr
    %185 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %186 = llvm.load %185 : !llvm.ptr -> !llvm.ptr
    %187 = llvm.getelementptr %186[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %188 = llvm.load %187 : !llvm.ptr -> i256
    llvm.store %187, %185 : !llvm.ptr, !llvm.ptr
    %189 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %190 = llvm.load %189 : !llvm.ptr -> !llvm.ptr
    %191 = llvm.getelementptr %190[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %192 = llvm.load %191 : !llvm.ptr -> i256
    llvm.store %191, %189 : !llvm.ptr, !llvm.ptr
    %193 = arith.trunci %188 : i256 to i64
    %194 = arith.trunci %192 : i256 to i64
    %195 = arith.trunci %184 : i256 to i64
    %c1_i256_33 = arith.constant 1 : i256
    %196 = llvm.alloca %c1_i256_33 x i256 : (i256) -> !llvm.ptr
    llvm.store %180, %196 {alignment = 1 : i64} : i256, !llvm.ptr
    %197 = arith.addi %195, %194 : i64
    %c0_i64_34 = arith.constant 0 : i64
    %198 = arith.cmpi slt, %197, %c0_i64_34 : i64
    %c84_i8_35 = arith.constant 84 : i8
    cf.cond_br %198, ^bb1(%c84_i8_35 : i8), ^bb30
  ^bb30:  // pred: ^bb29
    %199 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    %200 = llvm.load %199 : !llvm.ptr -> i64
    %c31_i64_36 = arith.constant 31 : i64
    %c32_i64_37 = arith.constant 32 : i64
    %201 = arith.addi %197, %c31_i64_36 : i64
    %202 = arith.divui %201, %c32_i64_37 : i64
    %203 = arith.muli %202, %c32_i64_37 : i64
    %204 = arith.cmpi ult, %200, %203 : i64
    scf.if %204 {
      %205 = func.call @dora_extend_memory(%arg0, %203) : (!llvm.ptr, i64) -> !llvm.ptr
      llvm.store %203, %199 : i64, !llvm.ptr
      %206 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
      llvm.store %205, %206 : !llvm.ptr, !llvm.ptr
    } else {
    }
    call @dora_copy_ext_code_to_memory(%arg0, %196, %193, %194, %195) : (!llvm.ptr, !llvm.ptr, i64, i64, i64) -> ()
    cf.br ^bb31
  ^bb31:  // pred: ^bb30
    %c0_i64_38 = arith.constant 0 : i64
    %c1_i8 = arith.constant 1 : i8
    call @dora_write_result(%arg0, %c0_i64_38, %c0_i64_38, %arg1, %c1_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c1_i8 : i8
  }
}
