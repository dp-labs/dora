---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  func.func private @dora_fn_nop()
  func.func private @dora_fn_tracing(!llvm.ptr, i8, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_fn_is_static(!llvm.ptr) -> i8
  func.func private @dora_fn_exp(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_calldata_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_data_section(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_data_section_size(!llvm.ptr) -> i16
  func.func private @dora_fn_data_section_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_chainid(!llvm.ptr) -> i64
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gaslimit_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_memory_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_memory_size(!llvm.ptr) -> i64
  func.func private @dora_fn_code_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_eofcreate(!llvm.ptr, i8, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returncontract(!llvm.ptr, i8, i64, i64, index, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_call(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_extcall(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_returndata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_returndata_copy(!llvm.ptr, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_tload(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_tstore(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @op240(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr, %arg4: !llvm.ptr) -> i8 {
    cf.br ^bb12
  ^bb1(%0: i8):  // 15 preds: ^bb3, ^bb4, ^bb5, ^bb7, ^bb8, ^bb9, ^bb11, ^bb12, ^bb15, ^bb16, ^bb17, ^bb18, ^bb19, ^bb22, ^bb23
    %c0_i64 = arith.constant 0 : i64
    %1 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64, %c0_i64, %1, %0) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %0 : i8
  ^bb2(%2: i8):  // no predecessors
    return %2 : i8
  ^bb3:  // pred: ^bb11
    %3 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %4 = llvm.getelementptr %3[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %5 = llvm.load %4 : !llvm.ptr -> i256
    llvm.store %4, %arg4 : !llvm.ptr, !llvm.ptr
    %6 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %6[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %8 = llvm.load %7 : !llvm.ptr -> i256
    llvm.store %7, %arg4 : !llvm.ptr, !llvm.ptr
    %9 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.getelementptr %9[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %11 = llvm.load %10 : !llvm.ptr -> i256
    llvm.store %10, %arg4 : !llvm.ptr, !llvm.ptr
    %12 = call @dora_fn_is_static(%arg0) : (!llvm.ptr) -> i8
    %c0_i8 = arith.constant 0 : i8
    %13 = arith.cmpi ne, %12, %c0_i8 : i8
    %c87_i8 = arith.constant 87 : i8
    cf.cond_br %13, ^bb1(%c87_i8 : i8), ^bb4
  ^bb4:  // pred: ^bb3
    %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256
    %14 = arith.cmpi sgt, %11, %c18446744073709551615_i256 : i256
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %14, ^bb1(%c84_i8 : i8), ^bb5
  ^bb5:  // pred: ^bb4
    %15 = arith.trunci %11 : i256 to i64
    %c0_i64_0 = arith.constant 0 : i64
    %16 = arith.cmpi slt, %15, %c0_i64_0 : i64
    %c84_i8_1 = arith.constant 84 : i8
    cf.cond_br %16, ^bb1(%c84_i8_1 : i8), ^bb6
  ^bb6:  // pred: ^bb5
    %c0_i64_2 = arith.constant 0 : i64
    %17 = arith.cmpi ne, %15, %c0_i64_2 : i64
    cf.cond_br %17, ^bb15, ^bb7
  ^bb7:  // 2 preds: ^bb6, ^bb21
    %c32000_i64 = arith.constant 32000 : i64
    %18 = llvm.load %arg1 : !llvm.ptr -> i64
    %19 = arith.cmpi ult, %18, %c32000_i64 : i64
    scf.if %19 {
    } else {
      %74 = arith.subi %18, %c32000_i64 : i64
      llvm.store %74, %arg1 : i64, !llvm.ptr
    }
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %19, ^bb1(%c80_i8 : i8), ^bb8
  ^bb8:  // pred: ^bb7
    %c1_i256 = arith.constant 1 : i256
    %20 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %5, %20 {alignment = 1 : i64} : i256, !llvm.ptr
    %21 = llvm.load %arg1 : !llvm.ptr -> i64
    %22 = arith.trunci %8 : i256 to i64
    %23 = call @dora_fn_create(%arg0, %15, %22, %20, %21) : (!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
    %24 = llvm.getelementptr %23[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %25 = llvm.load %24 : !llvm.ptr -> i8
    %c0_i8_3 = arith.constant 0 : i8
    %26 = arith.cmpi ne, %25, %c0_i8_3 : i8
    cf.cond_br %26, ^bb1(%25 : i8), ^bb9
  ^bb9:  // pred: ^bb8
    %27 = llvm.getelementptr %23[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %28 = llvm.load %27 : !llvm.ptr -> i64
    %29 = llvm.load %arg1 : !llvm.ptr -> i64
    %30 = arith.cmpi ult, %29, %28 : i64
    scf.if %30 {
    } else {
      %74 = arith.subi %29, %28 : i64
      llvm.store %74, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_4 = arith.constant 80 : i8
    cf.cond_br %30, ^bb1(%c80_i8_4 : i8), ^bb10
  ^bb10:  // pred: ^bb9
    %31 = llvm.load %20 : !llvm.ptr -> i256
    %32 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    llvm.store %31, %32 : i256, !llvm.ptr
    %33 = llvm.getelementptr %32[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %33, %arg4 : !llvm.ptr, !llvm.ptr
    cf.br ^bb14
  ^bb11:  // pred: ^bb13
    %c1024_i64 = arith.constant 1024 : i64
    %34 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-2_i64 = arith.constant -2 : i64
    %35 = arith.addi %34, %c-2_i64 : i64
    llvm.store %35, %arg3 : i64, !llvm.ptr
    %c3_i64 = arith.constant 3 : i64
    %36 = arith.cmpi ult, %34, %c3_i64 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %36, ^bb1(%c91_i8 : i8), ^bb3
  ^bb12:  // pred: ^bb0
    %37 = llvm.load %arg1 : !llvm.ptr -> i64
    %c0_i64_5 = arith.constant 0 : i64
    call @dora_fn_nop() : () -> ()
    %38 = arith.cmpi uge, %37, %c0_i64_5 : i64
    %c80_i8_6 = arith.constant 80 : i8
    cf.cond_br %38, ^bb13, ^bb1(%c80_i8_6 : i8)
  ^bb13:  // pred: ^bb12
    %39 = arith.subi %37, %c0_i64_5 : i64
    llvm.store %39, %arg1 : i64, !llvm.ptr
    cf.br ^bb11
  ^bb14:  // pred: ^bb10
    %c0_i8_7 = arith.constant 0 : i8
    return %c0_i8_7 : i8
  ^bb15:  // pred: ^bb6
    %c49152_i64 = arith.constant 49152 : i64
    %40 = arith.cmpi ugt, %15, %c49152_i64 : i64
    %c100_i8 = arith.constant 100 : i8
    cf.cond_br %40, ^bb1(%c100_i8 : i8), ^bb16
  ^bb16:  // pred: ^bb15
    %c31_i64 = arith.constant 31 : i64
    %c32_i64 = arith.constant 32 : i64
    %41 = arith.addi %15, %c31_i64 : i64
    %42 = arith.divui %41, %c32_i64 : i64
    %c2_i64 = arith.constant 2 : i64
    %43 = arith.muli %42, %c2_i64 : i64
    %44 = llvm.load %arg1 : !llvm.ptr -> i64
    %45 = arith.cmpi ult, %44, %43 : i64
    scf.if %45 {
    } else {
      %74 = arith.subi %44, %43 : i64
      llvm.store %74, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_8 = arith.constant 80 : i8
    cf.cond_br %45, ^bb1(%c80_i8_8 : i8), ^bb17
  ^bb17:  // pred: ^bb16
    %c18446744073709551615_i256_9 = arith.constant 18446744073709551615 : i256
    %46 = arith.cmpi sgt, %8, %c18446744073709551615_i256_9 : i256
    %c84_i8_10 = arith.constant 84 : i8
    cf.cond_br %46, ^bb1(%c84_i8_10 : i8), ^bb18
  ^bb18:  // pred: ^bb17
    %47 = arith.trunci %8 : i256 to i64
    %c0_i64_11 = arith.constant 0 : i64
    %48 = arith.cmpi slt, %47, %c0_i64_11 : i64
    %c84_i8_12 = arith.constant 84 : i8
    cf.cond_br %48, ^bb1(%c84_i8_12 : i8), ^bb19
  ^bb19:  // pred: ^bb18
    %49 = arith.addi %47, %15 : i64
    %c0_i64_13 = arith.constant 0 : i64
    %50 = arith.cmpi slt, %49, %c0_i64_13 : i64
    %c84_i8_14 = arith.constant 84 : i8
    cf.cond_br %50, ^bb1(%c84_i8_14 : i8), ^bb20
  ^bb20:  // pred: ^bb19
    %c31_i64_15 = arith.constant 31 : i64
    %c32_i64_16 = arith.constant 32 : i64
    %51 = arith.addi %49, %c31_i64_15 : i64
    %52 = arith.divui %51, %c32_i64_16 : i64
    %c32_i64_17 = arith.constant 32 : i64
    %53 = arith.muli %52, %c32_i64_17 : i64
    %54 = call @dora_fn_memory_size(%arg0) : (!llvm.ptr) -> i64
    %c31_i64_18 = arith.constant 31 : i64
    %c32_i64_19 = arith.constant 32 : i64
    %55 = arith.addi %54, %c31_i64_18 : i64
    %56 = arith.divui %55, %c32_i64_19 : i64
    %57 = arith.muli %56, %c32_i64_17 : i64
    %58 = arith.cmpi ult, %57, %53 : i64
    cf.cond_br %58, ^bb22, ^bb21
  ^bb21:  // 2 preds: ^bb20, ^bb24
    cf.br ^bb7
  ^bb22:  // pred: ^bb20
    %c3_i64_20 = arith.constant 3 : i64
    %c512_i64 = arith.constant 512 : i64
    %59 = arith.muli %56, %56 : i64
    %60 = arith.divui %59, %c512_i64 : i64
    %61 = arith.muli %56, %c3_i64_20 : i64
    %62 = arith.addi %60, %61 : i64
    %c3_i64_21 = arith.constant 3 : i64
    %c512_i64_22 = arith.constant 512 : i64
    %63 = arith.muli %52, %52 : i64
    %64 = arith.divui %63, %c512_i64_22 : i64
    %65 = arith.muli %52, %c3_i64_21 : i64
    %66 = arith.addi %64, %65 : i64
    %67 = arith.subi %66, %62 : i64
    %68 = llvm.load %arg1 : !llvm.ptr -> i64
    %69 = arith.cmpi ult, %68, %67 : i64
    scf.if %69 {
    } else {
      %74 = arith.subi %68, %67 : i64
      llvm.store %74, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_23 = arith.constant 80 : i8
    cf.cond_br %69, ^bb1(%c80_i8_23 : i8), ^bb23
  ^bb23:  // pred: ^bb22
    %70 = call @dora_fn_extend_memory(%arg0, %53) : (!llvm.ptr, i64) -> !llvm.ptr
    %71 = llvm.getelementptr %70[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %72 = llvm.load %71 : !llvm.ptr -> i8
    %c0_i8_24 = arith.constant 0 : i8
    %73 = arith.cmpi ne, %72, %c0_i8_24 : i8
    cf.cond_br %73, ^bb1(%72 : i8), ^bb24
  ^bb24:  // pred: ^bb23
    cf.br ^bb21
  }
  func.func private @op60(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr, %arg4: !llvm.ptr) -> i8 {
    cf.br ^bb10
  ^bb1(%0: i8):  // 11 preds: ^bb3, ^bb4, ^bb5, ^bb7, ^bb9, ^bb10, ^bb13, ^bb14, ^bb15, ^bb18, ^bb19
    %c0_i64 = arith.constant 0 : i64
    %1 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64, %c0_i64, %1, %0) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %0 : i8
  ^bb2(%2: i8):  // no predecessors
    return %2 : i8
  ^bb3:  // pred: ^bb9
    %3 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %4 = llvm.getelementptr %3[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %5 = llvm.load %4 : !llvm.ptr -> i256
    llvm.store %4, %arg4 : !llvm.ptr, !llvm.ptr
    %6 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %6[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %8 = llvm.load %7 : !llvm.ptr -> i256
    llvm.store %7, %arg4 : !llvm.ptr, !llvm.ptr
    %9 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.getelementptr %9[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %11 = llvm.load %10 : !llvm.ptr -> i256
    llvm.store %10, %arg4 : !llvm.ptr, !llvm.ptr
    %12 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.getelementptr %12[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %14 = llvm.load %13 : !llvm.ptr -> i256
    llvm.store %13, %arg4 : !llvm.ptr, !llvm.ptr
    %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256
    %15 = arith.cmpi sgt, %14, %c18446744073709551615_i256 : i256
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %15, ^bb1(%c84_i8 : i8), ^bb4
  ^bb4:  // pred: ^bb3
    %16 = arith.trunci %14 : i256 to i64
    %c0_i64_0 = arith.constant 0 : i64
    %17 = arith.cmpi slt, %16, %c0_i64_0 : i64
    %c84_i8_1 = arith.constant 84 : i8
    cf.cond_br %17, ^bb1(%c84_i8_1 : i8), ^bb5
  ^bb5:  // pred: ^bb4
    %c31_i64 = arith.constant 31 : i64
    %c32_i64 = arith.constant 32 : i64
    %18 = arith.addi %16, %c31_i64 : i64
    %19 = arith.divui %18, %c32_i64 : i64
    %c3_i64 = arith.constant 3 : i64
    %20 = arith.muli %19, %c3_i64 : i64
    %21 = llvm.load %arg1 : !llvm.ptr -> i64
    %22 = arith.cmpi ult, %21, %20 : i64
    scf.if %22 {
    } else {
      %66 = arith.subi %21, %20 : i64
      llvm.store %66, %arg1 : i64, !llvm.ptr
    }
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %22, ^bb1(%c80_i8 : i8), ^bb6
  ^bb6:  // pred: ^bb5
    %c0_i64_2 = arith.constant 0 : i64
    %23 = arith.cmpi ne, %16, %c0_i64_2 : i64
    cf.cond_br %23, ^bb13, ^bb7
  ^bb7:  // 2 preds: ^bb6, ^bb17
    %24 = arith.trunci %8 : i256 to i64
    %c1_i256 = arith.constant 1 : i256
    %25 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %5, %25 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i256_3 = arith.constant 1 : i256
    %26 = llvm.alloca %c1_i256_3 x i256 : (i256) -> !llvm.ptr
    llvm.store %11, %26 {alignment = 1 : i64} : i256, !llvm.ptr
    %27 = call @dora_fn_ext_code_copy(%arg0, %25, %26, %16, %24) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64) -> !llvm.ptr
    %28 = llvm.getelementptr %27[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %29 = llvm.load %28 : !llvm.ptr -> i64
    %30 = llvm.load %arg1 : !llvm.ptr -> i64
    %31 = arith.cmpi ult, %30, %29 : i64
    scf.if %31 {
    } else {
      %66 = arith.subi %30, %29 : i64
      llvm.store %66, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_4 = arith.constant 80 : i8
    cf.cond_br %31, ^bb1(%c80_i8_4 : i8), ^bb8
  ^bb8:  // pred: ^bb7
    cf.br ^bb12
  ^bb9:  // pred: ^bb11
    %c1024_i64 = arith.constant 1024 : i64
    %32 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-4_i64 = arith.constant -4 : i64
    %33 = arith.addi %32, %c-4_i64 : i64
    llvm.store %33, %arg3 : i64, !llvm.ptr
    %c4_i64 = arith.constant 4 : i64
    %34 = arith.cmpi ult, %32, %c4_i64 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %34, ^bb1(%c91_i8 : i8), ^bb3
  ^bb10:  // pred: ^bb0
    %35 = llvm.load %arg1 : !llvm.ptr -> i64
    %c0_i64_5 = arith.constant 0 : i64
    call @dora_fn_nop() : () -> ()
    %36 = arith.cmpi uge, %35, %c0_i64_5 : i64
    %c80_i8_6 = arith.constant 80 : i8
    cf.cond_br %36, ^bb11, ^bb1(%c80_i8_6 : i8)
  ^bb11:  // pred: ^bb10
    %37 = arith.subi %35, %c0_i64_5 : i64
    llvm.store %37, %arg1 : i64, !llvm.ptr
    cf.br ^bb9
  ^bb12:  // pred: ^bb8
    %c0_i8 = arith.constant 0 : i8
    return %c0_i8 : i8
  ^bb13:  // pred: ^bb6
    %c18446744073709551615_i256_7 = arith.constant 18446744073709551615 : i256
    %38 = arith.cmpi sgt, %8, %c18446744073709551615_i256_7 : i256
    %c84_i8_8 = arith.constant 84 : i8
    cf.cond_br %38, ^bb1(%c84_i8_8 : i8), ^bb14
  ^bb14:  // pred: ^bb13
    %39 = arith.trunci %8 : i256 to i64
    %c0_i64_9 = arith.constant 0 : i64
    %40 = arith.cmpi slt, %39, %c0_i64_9 : i64
    %c84_i8_10 = arith.constant 84 : i8
    cf.cond_br %40, ^bb1(%c84_i8_10 : i8), ^bb15
  ^bb15:  // pred: ^bb14
    %41 = arith.addi %39, %16 : i64
    %c0_i64_11 = arith.constant 0 : i64
    %42 = arith.cmpi slt, %41, %c0_i64_11 : i64
    %c84_i8_12 = arith.constant 84 : i8
    cf.cond_br %42, ^bb1(%c84_i8_12 : i8), ^bb16
  ^bb16:  // pred: ^bb15
    %c31_i64_13 = arith.constant 31 : i64
    %c32_i64_14 = arith.constant 32 : i64
    %43 = arith.addi %41, %c31_i64_13 : i64
    %44 = arith.divui %43, %c32_i64_14 : i64
    %c32_i64_15 = arith.constant 32 : i64
    %45 = arith.muli %44, %c32_i64_15 : i64
    %46 = call @dora_fn_memory_size(%arg0) : (!llvm.ptr) -> i64
    %c31_i64_16 = arith.constant 31 : i64
    %c32_i64_17 = arith.constant 32 : i64
    %47 = arith.addi %46, %c31_i64_16 : i64
    %48 = arith.divui %47, %c32_i64_17 : i64
    %49 = arith.muli %48, %c32_i64_15 : i64
    %50 = arith.cmpi ult, %49, %45 : i64
    cf.cond_br %50, ^bb18, ^bb17
  ^bb17:  // 2 preds: ^bb16, ^bb20
    cf.br ^bb7
  ^bb18:  // pred: ^bb16
    %c3_i64_18 = arith.constant 3 : i64
    %c512_i64 = arith.constant 512 : i64
    %51 = arith.muli %48, %48 : i64
    %52 = arith.divui %51, %c512_i64 : i64
    %53 = arith.muli %48, %c3_i64_18 : i64
    %54 = arith.addi %52, %53 : i64
    %c3_i64_19 = arith.constant 3 : i64
    %c512_i64_20 = arith.constant 512 : i64
    %55 = arith.muli %44, %44 : i64
    %56 = arith.divui %55, %c512_i64_20 : i64
    %57 = arith.muli %44, %c3_i64_19 : i64
    %58 = arith.addi %56, %57 : i64
    %59 = arith.subi %58, %54 : i64
    %60 = llvm.load %arg1 : !llvm.ptr -> i64
    %61 = arith.cmpi ult, %60, %59 : i64
    scf.if %61 {
    } else {
      %66 = arith.subi %60, %59 : i64
      llvm.store %66, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_21 = arith.constant 80 : i8
    cf.cond_br %61, ^bb1(%c80_i8_21 : i8), ^bb19
  ^bb19:  // pred: ^bb18
    %62 = call @dora_fn_extend_memory(%arg0, %45) : (!llvm.ptr, i64) -> !llvm.ptr
    %63 = llvm.getelementptr %62[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %64 = llvm.load %63 : !llvm.ptr -> i8
    %c0_i8_22 = arith.constant 0 : i8
    %65 = arith.cmpi ne, %64, %c0_i8_22 : i8
    cf.cond_br %65, ^bb1(%64 : i8), ^bb20
  ^bb20:  // pred: ^bb19
    cf.br ^bb17
  }
  func.func private @op82(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr, %arg4: !llvm.ptr) -> i8 {
    cf.br ^bb6
  ^bb1(%0: i8):  // 7 preds: ^bb5, ^bb6, ^bb9, ^bb10, ^bb11, ^bb14, ^bb15
    %c0_i64 = arith.constant 0 : i64
    %1 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64, %c0_i64, %1, %0) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %0 : i8
  ^bb2(%2: i8):  // no predecessors
    return %2 : i8
  ^bb3:  // pred: ^bb5
    %3 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %4 = llvm.getelementptr %3[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %5 = llvm.load %4 : !llvm.ptr -> i256
    llvm.store %4, %arg4 : !llvm.ptr, !llvm.ptr
    %6 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %6[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %8 = llvm.load %7 : !llvm.ptr -> i256
    llvm.store %7, %arg4 : !llvm.ptr, !llvm.ptr
    %c32_i64 = arith.constant 32 : i64
    %c0_i64_0 = arith.constant 0 : i64
    %9 = arith.cmpi ne, %c32_i64, %c0_i64_0 : i64
    cf.cond_br %9, ^bb9, ^bb4
  ^bb4:  // 2 preds: ^bb3, ^bb13
    %10 = arith.trunci %5 : i256 to i64
    %11 = call @dora_fn_memory_ptr(%arg0) : (!llvm.ptr) -> !llvm.ptr
    %12 = llvm.getelementptr %11[%10] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %13 = llvm.intr.bswap(%8)  : (i256) -> i256
    llvm.store %13, %12 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb8
  ^bb5:  // pred: ^bb7
    %c1024_i64 = arith.constant 1024 : i64
    %14 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-2_i64 = arith.constant -2 : i64
    %15 = arith.addi %14, %c-2_i64 : i64
    llvm.store %15, %arg3 : i64, !llvm.ptr
    %c2_i64 = arith.constant 2 : i64
    %16 = arith.cmpi ult, %14, %c2_i64 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %16, ^bb1(%c91_i8 : i8), ^bb3
  ^bb6:  // pred: ^bb0
    %17 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %18 = arith.cmpi uge, %17, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %18, ^bb7, ^bb1(%c80_i8 : i8)
  ^bb7:  // pred: ^bb6
    %19 = arith.subi %17, %c3_i64 : i64
    llvm.store %19, %arg1 : i64, !llvm.ptr
    cf.br ^bb5
  ^bb8:  // pred: ^bb4
    %c0_i8 = arith.constant 0 : i8
    return %c0_i8 : i8
  ^bb9:  // pred: ^bb3
    %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256
    %20 = arith.cmpi sgt, %5, %c18446744073709551615_i256 : i256
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %20, ^bb1(%c84_i8 : i8), ^bb10
  ^bb10:  // pred: ^bb9
    %21 = arith.trunci %5 : i256 to i64
    %c0_i64_1 = arith.constant 0 : i64
    %22 = arith.cmpi slt, %21, %c0_i64_1 : i64
    %c84_i8_2 = arith.constant 84 : i8
    cf.cond_br %22, ^bb1(%c84_i8_2 : i8), ^bb11
  ^bb11:  // pred: ^bb10
    %23 = arith.addi %21, %c32_i64 : i64
    %c0_i64_3 = arith.constant 0 : i64
    %24 = arith.cmpi slt, %23, %c0_i64_3 : i64
    %c84_i8_4 = arith.constant 84 : i8
    cf.cond_br %24, ^bb1(%c84_i8_4 : i8), ^bb12
  ^bb12:  // pred: ^bb11
    %c31_i64 = arith.constant 31 : i64
    %c32_i64_5 = arith.constant 32 : i64
    %25 = arith.addi %23, %c31_i64 : i64
    %26 = arith.divui %25, %c32_i64_5 : i64
    %c32_i64_6 = arith.constant 32 : i64
    %27 = arith.muli %26, %c32_i64_6 : i64
    %28 = call @dora_fn_memory_size(%arg0) : (!llvm.ptr) -> i64
    %c31_i64_7 = arith.constant 31 : i64
    %c32_i64_8 = arith.constant 32 : i64
    %29 = arith.addi %28, %c31_i64_7 : i64
    %30 = arith.divui %29, %c32_i64_8 : i64
    %31 = arith.muli %30, %c32_i64_6 : i64
    %32 = arith.cmpi ult, %31, %27 : i64
    cf.cond_br %32, ^bb14, ^bb13
  ^bb13:  // 2 preds: ^bb12, ^bb16
    cf.br ^bb4
  ^bb14:  // pred: ^bb12
    %c3_i64_9 = arith.constant 3 : i64
    %c512_i64 = arith.constant 512 : i64
    %33 = arith.muli %30, %30 : i64
    %34 = arith.divui %33, %c512_i64 : i64
    %35 = arith.muli %30, %c3_i64_9 : i64
    %36 = arith.addi %34, %35 : i64
    %c3_i64_10 = arith.constant 3 : i64
    %c512_i64_11 = arith.constant 512 : i64
    %37 = arith.muli %26, %26 : i64
    %38 = arith.divui %37, %c512_i64_11 : i64
    %39 = arith.muli %26, %c3_i64_10 : i64
    %40 = arith.addi %38, %39 : i64
    %41 = arith.subi %40, %36 : i64
    %42 = llvm.load %arg1 : !llvm.ptr -> i64
    %43 = arith.cmpi ult, %42, %41 : i64
    scf.if %43 {
    } else {
      %48 = arith.subi %42, %41 : i64
      llvm.store %48, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_12 = arith.constant 80 : i8
    cf.cond_br %43, ^bb1(%c80_i8_12 : i8), ^bb15
  ^bb15:  // pred: ^bb14
    %44 = call @dora_fn_extend_memory(%arg0, %27) : (!llvm.ptr, i64) -> !llvm.ptr
    %45 = llvm.getelementptr %44[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %46 = llvm.load %45 : !llvm.ptr -> i8
    %c0_i8_13 = arith.constant 0 : i8
    %47 = arith.cmpi ne, %46, %c0_i8_13 : i8
    cf.cond_br %47, ^bb1(%46 : i8), ^bb16
  ^bb16:  // pred: ^bb15
    cf.br ^bb13
  }
  func.func private @op131(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr, %arg4: !llvm.ptr) -> i8 {
    cf.br ^bb5
  ^bb1(%0: i8):  // 2 preds: ^bb4, ^bb5
    %c0_i64 = arith.constant 0 : i64
    %1 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64, %c0_i64, %1, %0) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %0 : i8
  ^bb2(%2: i8):  // no predecessors
    return %2 : i8
  ^bb3:  // pred: ^bb4
    %3 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %4 = llvm.getelementptr %3[-4] : (!llvm.ptr) -> !llvm.ptr, i256
    %5 = llvm.load %4 : !llvm.ptr -> i256
    %6 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    llvm.store %5, %6 : i256, !llvm.ptr
    %7 = llvm.getelementptr %6[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %7, %arg4 : !llvm.ptr, !llvm.ptr
    cf.br ^bb7
  ^bb4:  // pred: ^bb6
    %c1024_i64 = arith.constant 1024 : i64
    %8 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %9 = arith.addi %8, %c1_i64 : i64
    llvm.store %9, %arg3 : i64, !llvm.ptr
    %c4_i64 = arith.constant 4 : i64
    %10 = arith.cmpi ult, %8, %c4_i64 : i64
    %11 = arith.cmpi ult, %c1024_i64, %9 : i64
    %12 = arith.xori %10, %11 : i1
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %12, ^bb1(%c92_i8 : i8), ^bb3
  ^bb5:  // pred: ^bb0
    %13 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %14 = arith.cmpi uge, %13, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %14, ^bb6, ^bb1(%c80_i8 : i8)
  ^bb6:  // pred: ^bb5
    %15 = arith.subi %13, %c3_i64 : i64
    llvm.store %15, %arg1 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb7:  // pred: ^bb3
    %c0_i8 = arith.constant 0 : i8
    return %c0_i8 : i8
  }
  func.func public @main(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr) -> i8 attributes {llvm.emit_c_interface} {
    %c0_i64 = arith.constant 0 : i64
    %0 = llvm.alloca %c0_i64 x !llvm.ptr : (i64) -> !llvm.ptr
    llvm.store %arg2, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8 = arith.constant 0 : i8
    %c0_i8_0 = arith.constant 0 : i8
    %1 = arith.cmpi ne, %c0_i8, %c0_i8_0 : i8
    cf.cond_br %1, ^bb1(%c0_i8 : i8), ^bb6
  ^bb1(%2: i8):  // 43 preds: ^bb0, ^bb2, ^bb4, ^bb5, ^bb6, ^bb9, ^bb10, ^bb12, ^bb13, ^bb14, ^bb15, ^bb18, ^bb19, ^bb21, ^bb22, ^bb23, ^bb24, ^bb26, ^bb27, ^bb28, ^bb31, ^bb32, ^bb34, ^bb35, ^bb36, ^bb37, ^bb40, ^bb41, ^bb43, ^bb44, ^bb45, ^bb46, ^bb49, ^bb50, ^bb52, ^bb53, ^bb54, ^bb55, ^bb57, ^bb58, ^bb59, ^bb62, ^bb63
    %c0_i64_1 = arith.constant 0 : i64
    %3 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_1, %c0_i64_1, %3, %2) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %2 : i8
  ^bb2(%4: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %4 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3(%5: i8):  // 8 preds: ^bb8, ^bb17, ^bb30, ^bb39, ^bb48, ^bb61, ^bb65, ^bb66
    return %5 : i8
  ^bb4:  // pred: ^bb5
    %c170141183460469231731687303715884105727_i256 = arith.constant 170141183460469231731687303715884105727 : i256
    %6 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c170141183460469231731687303715884105727_i256, %6 : i256, !llvm.ptr
    %7 = llvm.getelementptr %6[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %7, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_2 = arith.constant 0 : i8
    %8 = arith.cmpi ne, %c0_i8_2, %c0_i8_0 : i8
    cf.cond_br %8, ^bb1(%c0_i8_2 : i8), ^bb10
  ^bb5:  // pred: ^bb7
    %c1024_i64 = arith.constant 1024 : i64
    %9 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %10 = arith.addi %9, %c1_i64 : i64
    llvm.store %10, %arg3 : i64, !llvm.ptr
    %11 = arith.cmpi ult, %c1024_i64, %10 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %11, ^bb1(%c92_i8 : i8), ^bb4
  ^bb6:  // pred: ^bb0
    %12 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %13 = arith.cmpi uge, %12, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %13, ^bb7, ^bb1(%c80_i8 : i8)
  ^bb7:  // pred: ^bb6
    %14 = arith.subi %12, %c3_i64 : i64
    llvm.store %14, %arg1 : i64, !llvm.ptr
    cf.br ^bb5
  ^bb8:  // pred: ^bb9
    %c0_i256 = arith.constant 0 : i256
    %15 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256, %15 : i256, !llvm.ptr
    %16 = llvm.getelementptr %15[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %16, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_3 = arith.constant 0 : i8
    %17 = arith.cmpi ne, %c0_i8_3, %c0_i8_0 : i8
    cf.cond_br %17, ^bb3(%c0_i8_3 : i8), ^bb12
  ^bb9:  // pred: ^bb11
    %c1024_i64_4 = arith.constant 1024 : i64
    %18 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_5 = arith.constant 1 : i64
    %19 = arith.addi %18, %c1_i64_5 : i64
    llvm.store %19, %arg3 : i64, !llvm.ptr
    %20 = arith.cmpi ult, %c1024_i64_4, %19 : i64
    %c92_i8_6 = arith.constant 92 : i8
    cf.cond_br %20, ^bb1(%c92_i8_6 : i8), ^bb8
  ^bb10:  // pred: ^bb4
    %21 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_7 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %22 = arith.cmpi uge, %21, %c3_i64_7 : i64
    %c80_i8_8 = arith.constant 80 : i8
    cf.cond_br %22, ^bb11, ^bb1(%c80_i8_8 : i8)
  ^bb11:  // pred: ^bb10
    %23 = arith.subi %21, %c3_i64_7 : i64
    llvm.store %23, %arg1 : i64, !llvm.ptr
    cf.br ^bb9
  ^bb12:  // pred: ^bb8
    %24 = call @op82(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %25 = arith.cmpi ne, %24, %c0_i8_0 : i8
    cf.cond_br %25, ^bb1(%24 : i8), ^bb15
  ^bb13:  // pred: ^bb14
    %c170141183460469231731687303715884105727_i256_9 = arith.constant 170141183460469231731687303715884105727 : i256
    %26 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c170141183460469231731687303715884105727_i256_9, %26 : i256, !llvm.ptr
    %27 = llvm.getelementptr %26[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %27, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_10 = arith.constant 0 : i8
    %28 = arith.cmpi ne, %c0_i8_10, %c0_i8_0 : i8
    cf.cond_br %28, ^bb1(%c0_i8_10 : i8), ^bb19
  ^bb14:  // pred: ^bb16
    %c1024_i64_11 = arith.constant 1024 : i64
    %29 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_12 = arith.constant 1 : i64
    %30 = arith.addi %29, %c1_i64_12 : i64
    llvm.store %30, %arg3 : i64, !llvm.ptr
    %31 = arith.cmpi ult, %c1024_i64_11, %30 : i64
    %c92_i8_13 = arith.constant 92 : i8
    cf.cond_br %31, ^bb1(%c92_i8_13 : i8), ^bb13
  ^bb15:  // pred: ^bb12
    %32 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_14 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %33 = arith.cmpi uge, %32, %c3_i64_14 : i64
    %c80_i8_15 = arith.constant 80 : i8
    cf.cond_br %33, ^bb16, ^bb1(%c80_i8_15 : i8)
  ^bb16:  // pred: ^bb15
    %34 = arith.subi %32, %c3_i64_14 : i64
    llvm.store %34, %arg1 : i64, !llvm.ptr
    cf.br ^bb14
  ^bb17:  // pred: ^bb18
    %c32_i256 = arith.constant 32 : i256
    %35 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c32_i256, %35 : i256, !llvm.ptr
    %36 = llvm.getelementptr %35[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %36, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_16 = arith.constant 0 : i8
    %37 = arith.cmpi ne, %c0_i8_16, %c0_i8_0 : i8
    cf.cond_br %37, ^bb3(%c0_i8_16 : i8), ^bb21
  ^bb18:  // pred: ^bb20
    %c1024_i64_17 = arith.constant 1024 : i64
    %38 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_18 = arith.constant 1 : i64
    %39 = arith.addi %38, %c1_i64_18 : i64
    llvm.store %39, %arg3 : i64, !llvm.ptr
    %40 = arith.cmpi ult, %c1024_i64_17, %39 : i64
    %c92_i8_19 = arith.constant 92 : i8
    cf.cond_br %40, ^bb1(%c92_i8_19 : i8), ^bb17
  ^bb19:  // pred: ^bb13
    %41 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_20 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %42 = arith.cmpi uge, %41, %c3_i64_20 : i64
    %c80_i8_21 = arith.constant 80 : i8
    cf.cond_br %42, ^bb20, ^bb1(%c80_i8_21 : i8)
  ^bb20:  // pred: ^bb19
    %43 = arith.subi %41, %c3_i64_20 : i64
    llvm.store %43, %arg1 : i64, !llvm.ptr
    cf.br ^bb18
  ^bb21:  // pred: ^bb17
    %44 = call @op82(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %45 = arith.cmpi ne, %44, %c0_i8_0 : i8
    cf.cond_br %45, ^bb1(%44 : i8), ^bb24
  ^bb22:  // pred: ^bb23
    %c41_i256 = arith.constant 41 : i256
    %46 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c41_i256, %46 : i256, !llvm.ptr
    %47 = llvm.getelementptr %46[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %47, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_22 = arith.constant 0 : i8
    %48 = arith.cmpi ne, %c0_i8_22, %c0_i8_0 : i8
    cf.cond_br %48, ^bb1(%c0_i8_22 : i8), ^bb28
  ^bb23:  // pred: ^bb25
    %c1024_i64_23 = arith.constant 1024 : i64
    %49 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_24 = arith.constant 1 : i64
    %50 = arith.addi %49, %c1_i64_24 : i64
    llvm.store %50, %arg3 : i64, !llvm.ptr
    %51 = arith.cmpi ult, %c1024_i64_23, %50 : i64
    %c92_i8_25 = arith.constant 92 : i8
    cf.cond_br %51, ^bb1(%c92_i8_25 : i8), ^bb22
  ^bb24:  // pred: ^bb21
    %52 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_26 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %53 = arith.cmpi uge, %52, %c3_i64_26 : i64
    %c80_i8_27 = arith.constant 80 : i8
    cf.cond_br %53, ^bb25, ^bb1(%c80_i8_27 : i8)
  ^bb25:  // pred: ^bb24
    %54 = arith.subi %52, %c3_i64_26 : i64
    llvm.store %54, %arg1 : i64, !llvm.ptr
    cf.br ^bb23
  ^bb26:  // pred: ^bb27
    %c0_i256_28 = arith.constant 0 : i256
    %55 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_28, %55 : i256, !llvm.ptr
    %56 = llvm.getelementptr %55[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %56, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_29 = arith.constant 0 : i8
    %57 = arith.cmpi ne, %c0_i8_29, %c0_i8_0 : i8
    cf.cond_br %57, ^bb1(%c0_i8_29 : i8), ^bb32
  ^bb27:  // pred: ^bb29
    %c1024_i64_30 = arith.constant 1024 : i64
    %58 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_31 = arith.constant 1 : i64
    %59 = arith.addi %58, %c1_i64_31 : i64
    llvm.store %59, %arg3 : i64, !llvm.ptr
    %60 = arith.cmpi ult, %c1024_i64_30, %59 : i64
    %c92_i8_32 = arith.constant 92 : i8
    cf.cond_br %60, ^bb1(%c92_i8_32 : i8), ^bb26
  ^bb28:  // pred: ^bb22
    %61 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_33 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %62 = arith.cmpi uge, %61, %c3_i64_33 : i64
    %c80_i8_34 = arith.constant 80 : i8
    cf.cond_br %62, ^bb29, ^bb1(%c80_i8_34 : i8)
  ^bb29:  // pred: ^bb28
    %63 = arith.subi %61, %c3_i64_33 : i64
    llvm.store %63, %arg1 : i64, !llvm.ptr
    cf.br ^bb27
  ^bb30:  // pred: ^bb31
    %c0_i256_35 = arith.constant 0 : i256
    %64 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_35, %64 : i256, !llvm.ptr
    %65 = llvm.getelementptr %64[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %65, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_36 = arith.constant 0 : i8
    %66 = arith.cmpi ne, %c0_i8_36, %c0_i8_0 : i8
    cf.cond_br %66, ^bb3(%c0_i8_36 : i8), ^bb34
  ^bb31:  // pred: ^bb33
    %c1024_i64_37 = arith.constant 1024 : i64
    %67 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_38 = arith.constant 1 : i64
    %68 = arith.addi %67, %c1_i64_38 : i64
    llvm.store %68, %arg3 : i64, !llvm.ptr
    %69 = arith.cmpi ult, %c1024_i64_37, %68 : i64
    %c92_i8_39 = arith.constant 92 : i8
    cf.cond_br %69, ^bb1(%c92_i8_39 : i8), ^bb30
  ^bb32:  // pred: ^bb26
    %70 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_40 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %71 = arith.cmpi uge, %70, %c3_i64_40 : i64
    %c80_i8_41 = arith.constant 80 : i8
    cf.cond_br %71, ^bb33, ^bb1(%c80_i8_41 : i8)
  ^bb33:  // pred: ^bb32
    %72 = arith.subi %70, %c3_i64_40 : i64
    llvm.store %72, %arg1 : i64, !llvm.ptr
    cf.br ^bb31
  ^bb34:  // pred: ^bb30
    %73 = call @op240(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %74 = arith.cmpi ne, %73, %c0_i8_0 : i8
    cf.cond_br %74, ^bb1(%73 : i8), ^bb37
  ^bb35:  // pred: ^bb36
    %c0_i256_42 = arith.constant 0 : i256
    %75 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_42, %75 : i256, !llvm.ptr
    %76 = llvm.getelementptr %75[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %76, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_43 = arith.constant 0 : i8
    %77 = arith.cmpi ne, %c0_i8_43, %c0_i8_0 : i8
    cf.cond_br %77, ^bb1(%c0_i8_43 : i8), ^bb41
  ^bb36:  // pred: ^bb38
    %c1024_i64_44 = arith.constant 1024 : i64
    %78 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_45 = arith.constant 1 : i64
    %79 = arith.addi %78, %c1_i64_45 : i64
    llvm.store %79, %arg3 : i64, !llvm.ptr
    %80 = arith.cmpi ult, %c1024_i64_44, %79 : i64
    %c92_i8_46 = arith.constant 92 : i8
    cf.cond_br %80, ^bb1(%c92_i8_46 : i8), ^bb35
  ^bb37:  // pred: ^bb34
    %81 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_47 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %82 = arith.cmpi uge, %81, %c3_i64_47 : i64
    %c80_i8_48 = arith.constant 80 : i8
    cf.cond_br %82, ^bb38, ^bb1(%c80_i8_48 : i8)
  ^bb38:  // pred: ^bb37
    %83 = arith.subi %81, %c3_i64_47 : i64
    llvm.store %83, %arg1 : i64, !llvm.ptr
    cf.br ^bb36
  ^bb39:  // pred: ^bb40
    %c0_i256_49 = arith.constant 0 : i256
    %84 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_49, %84 : i256, !llvm.ptr
    %85 = llvm.getelementptr %84[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %85, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_50 = arith.constant 0 : i8
    %86 = arith.cmpi ne, %c0_i8_50, %c0_i8_0 : i8
    cf.cond_br %86, ^bb3(%c0_i8_50 : i8), ^bb43
  ^bb40:  // pred: ^bb42
    %c1024_i64_51 = arith.constant 1024 : i64
    %87 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_52 = arith.constant 1 : i64
    %88 = arith.addi %87, %c1_i64_52 : i64
    llvm.store %88, %arg3 : i64, !llvm.ptr
    %89 = arith.cmpi ult, %c1024_i64_51, %88 : i64
    %c92_i8_53 = arith.constant 92 : i8
    cf.cond_br %89, ^bb1(%c92_i8_53 : i8), ^bb39
  ^bb41:  // pred: ^bb35
    %90 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_54 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %91 = arith.cmpi uge, %90, %c3_i64_54 : i64
    %c80_i8_55 = arith.constant 80 : i8
    cf.cond_br %91, ^bb42, ^bb1(%c80_i8_55 : i8)
  ^bb42:  // pred: ^bb41
    %92 = arith.subi %90, %c3_i64_54 : i64
    llvm.store %92, %arg1 : i64, !llvm.ptr
    cf.br ^bb40
  ^bb43:  // pred: ^bb39
    %93 = call @op82(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %94 = arith.cmpi ne, %93, %c0_i8_0 : i8
    cf.cond_br %94, ^bb1(%93 : i8), ^bb46
  ^bb44:  // pred: ^bb45
    %c0_i256_56 = arith.constant 0 : i256
    %95 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_56, %95 : i256, !llvm.ptr
    %96 = llvm.getelementptr %95[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %96, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_57 = arith.constant 0 : i8
    %97 = arith.cmpi ne, %c0_i8_57, %c0_i8_0 : i8
    cf.cond_br %97, ^bb1(%c0_i8_57 : i8), ^bb50
  ^bb45:  // pred: ^bb47
    %c1024_i64_58 = arith.constant 1024 : i64
    %98 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_59 = arith.constant 1 : i64
    %99 = arith.addi %98, %c1_i64_59 : i64
    llvm.store %99, %arg3 : i64, !llvm.ptr
    %100 = arith.cmpi ult, %c1024_i64_58, %99 : i64
    %c92_i8_60 = arith.constant 92 : i8
    cf.cond_br %100, ^bb1(%c92_i8_60 : i8), ^bb44
  ^bb46:  // pred: ^bb43
    %101 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_61 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %102 = arith.cmpi uge, %101, %c3_i64_61 : i64
    %c80_i8_62 = arith.constant 80 : i8
    cf.cond_br %102, ^bb47, ^bb1(%c80_i8_62 : i8)
  ^bb47:  // pred: ^bb46
    %103 = arith.subi %101, %c3_i64_61 : i64
    llvm.store %103, %arg1 : i64, !llvm.ptr
    cf.br ^bb45
  ^bb48:  // pred: ^bb49
    %c32_i256_63 = arith.constant 32 : i256
    %104 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c32_i256_63, %104 : i256, !llvm.ptr
    %105 = llvm.getelementptr %104[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %105, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_64 = arith.constant 0 : i8
    %106 = arith.cmpi ne, %c0_i8_64, %c0_i8_0 : i8
    cf.cond_br %106, ^bb3(%c0_i8_64 : i8), ^bb52
  ^bb49:  // pred: ^bb51
    %c1024_i64_65 = arith.constant 1024 : i64
    %107 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_66 = arith.constant 1 : i64
    %108 = arith.addi %107, %c1_i64_66 : i64
    llvm.store %108, %arg3 : i64, !llvm.ptr
    %109 = arith.cmpi ult, %c1024_i64_65, %108 : i64
    %c92_i8_67 = arith.constant 92 : i8
    cf.cond_br %109, ^bb1(%c92_i8_67 : i8), ^bb48
  ^bb50:  // pred: ^bb44
    %110 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_68 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %111 = arith.cmpi uge, %110, %c3_i64_68 : i64
    %c80_i8_69 = arith.constant 80 : i8
    cf.cond_br %111, ^bb51, ^bb1(%c80_i8_69 : i8)
  ^bb51:  // pred: ^bb50
    %112 = arith.subi %110, %c3_i64_68 : i64
    llvm.store %112, %arg1 : i64, !llvm.ptr
    cf.br ^bb49
  ^bb52:  // pred: ^bb48
    %113 = call @op82(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %114 = arith.cmpi ne, %113, %c0_i8_0 : i8
    cf.cond_br %114, ^bb1(%113 : i8), ^bb55
  ^bb53:  // pred: ^bb54
    %c32_i256_70 = arith.constant 32 : i256
    %115 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c32_i256_70, %115 : i256, !llvm.ptr
    %116 = llvm.getelementptr %115[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %116, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_71 = arith.constant 0 : i8
    %117 = arith.cmpi ne, %c0_i8_71, %c0_i8_0 : i8
    cf.cond_br %117, ^bb1(%c0_i8_71 : i8), ^bb59
  ^bb54:  // pred: ^bb56
    %c1024_i64_72 = arith.constant 1024 : i64
    %118 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_73 = arith.constant 1 : i64
    %119 = arith.addi %118, %c1_i64_73 : i64
    llvm.store %119, %arg3 : i64, !llvm.ptr
    %120 = arith.cmpi ult, %c1024_i64_72, %119 : i64
    %c92_i8_74 = arith.constant 92 : i8
    cf.cond_br %120, ^bb1(%c92_i8_74 : i8), ^bb53
  ^bb55:  // pred: ^bb52
    %121 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_75 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %122 = arith.cmpi uge, %121, %c3_i64_75 : i64
    %c80_i8_76 = arith.constant 80 : i8
    cf.cond_br %122, ^bb56, ^bb1(%c80_i8_76 : i8)
  ^bb56:  // pred: ^bb55
    %123 = arith.subi %121, %c3_i64_75 : i64
    llvm.store %123, %arg1 : i64, !llvm.ptr
    cf.br ^bb54
  ^bb57:  // pred: ^bb58
    %c0_i256_77 = arith.constant 0 : i256
    %124 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_77, %124 : i256, !llvm.ptr
    %125 = llvm.getelementptr %124[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %125, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_78 = arith.constant 0 : i8
    %126 = arith.cmpi ne, %c0_i8_78, %c0_i8_0 : i8
    cf.cond_br %126, ^bb1(%c0_i8_78 : i8), ^bb63
  ^bb58:  // pred: ^bb60
    %c1024_i64_79 = arith.constant 1024 : i64
    %127 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_80 = arith.constant 1 : i64
    %128 = arith.addi %127, %c1_i64_80 : i64
    llvm.store %128, %arg3 : i64, !llvm.ptr
    %129 = arith.cmpi ult, %c1024_i64_79, %128 : i64
    %c92_i8_81 = arith.constant 92 : i8
    cf.cond_br %129, ^bb1(%c92_i8_81 : i8), ^bb57
  ^bb59:  // pred: ^bb53
    %130 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_82 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %131 = arith.cmpi uge, %130, %c3_i64_82 : i64
    %c80_i8_83 = arith.constant 80 : i8
    cf.cond_br %131, ^bb60, ^bb1(%c80_i8_83 : i8)
  ^bb60:  // pred: ^bb59
    %132 = arith.subi %130, %c3_i64_82 : i64
    llvm.store %132, %arg1 : i64, !llvm.ptr
    cf.br ^bb58
  ^bb61:  // pred: ^bb62
    %c0_i256_84 = arith.constant 0 : i256
    %133 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_84, %133 : i256, !llvm.ptr
    %134 = llvm.getelementptr %133[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %134, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_85 = arith.constant 0 : i8
    %135 = arith.cmpi ne, %c0_i8_85, %c0_i8_0 : i8
    cf.cond_br %135, ^bb3(%c0_i8_85 : i8), ^bb65
  ^bb62:  // pred: ^bb64
    %c1024_i64_86 = arith.constant 1024 : i64
    %136 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_87 = arith.constant 1 : i64
    %137 = arith.addi %136, %c1_i64_87 : i64
    llvm.store %137, %arg3 : i64, !llvm.ptr
    %138 = arith.cmpi ult, %c1024_i64_86, %137 : i64
    %c92_i8_88 = arith.constant 92 : i8
    cf.cond_br %138, ^bb1(%c92_i8_88 : i8), ^bb61
  ^bb63:  // pred: ^bb57
    %139 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_89 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %140 = arith.cmpi uge, %139, %c3_i64_89 : i64
    %c80_i8_90 = arith.constant 80 : i8
    cf.cond_br %140, ^bb64, ^bb1(%c80_i8_90 : i8)
  ^bb64:  // pred: ^bb63
    %141 = arith.subi %139, %c3_i64_89 : i64
    llvm.store %141, %arg1 : i64, !llvm.ptr
    cf.br ^bb62
  ^bb65:  // pred: ^bb61
    %142 = call @op131(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %143 = arith.cmpi ne, %142, %c0_i8_0 : i8
    cf.cond_br %143, ^bb3(%142 : i8), ^bb66
  ^bb66:  // pred: ^bb65
    %144 = call @op60(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %145 = arith.cmpi ne, %144, %c0_i8_0 : i8
    cf.cond_br %145, ^bb3(%144 : i8), ^bb67
  ^bb67:  // pred: ^bb66
    %c0_i64_91 = arith.constant 0 : i64
    %c2_i8 = arith.constant 2 : i8
    %146 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_91, %c0_i64_91, %146, %c2_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c2_i8 : i8
  }
}
