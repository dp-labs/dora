---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
---
module {
  llvm.mlir.global internal @dora_stack_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_stack_length() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_memory_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_memory_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_calldata_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_calldata_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_gas_counter() {addr_space = 0 : i32} : i64
  llvm.mlir.global external @dora_ctx_is_static() {addr_space = 0 : i32} : !llvm.ptr
  func.func private @dora_debug_print(i32)
  func.func private @dora_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_get_calldata_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_get_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_get_chainid(!llvm.ptr) -> i64
  func.func private @dora_store_in_callvalue_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_caller_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_get_gaslimit(!llvm.ptr) -> i64
  func.func private @dora_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_copy_code_to_memory(!llvm.ptr, i64, i64, i64)
  func.func private @dora_read_storage(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_write_storage(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> i64
  func.func private @dora_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_get_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_get_coinbase_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_get_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_get_codesize_from_address(!llvm.ptr, !llvm.ptr) -> i64
  func.func private @dora_get_address_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_get_prevrandao(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_call(!llvm.ptr, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr, i8) -> i8
  func.func private @dora_store_in_balance(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> i64
  func.func private @dora_copy_ext_code_to_memory(!llvm.ptr, !llvm.ptr, i64, i64, i64)
  func.func private @dora_get_blob_hash_at_index(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_get_block_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_get_code_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_create(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr) -> i8
  func.func private @dora_create2(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
  func.func private @dora_get_return_data_size(!llvm.ptr) -> i64
  func.func private @dora_copy_return_data_into_memory(!llvm.ptr, i64, i64, i64)
  func.func private @dora_selfdestruct(!llvm.ptr, !llvm.ptr) -> i64
  func.func private @dora_transient_storage_read(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_transient_storage_write(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func public @main(%arg0: !llvm.ptr, %arg1: i64) -> i8 attributes {llvm.emit_c_interface} {
    %c1024_i256 = arith.constant 1024 : i256
    %0 = llvm.alloca %c1024_i256 x i256 : (i256) -> !llvm.ptr
    %1 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    llvm.store %0, %1 : !llvm.ptr, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %2 = llvm.mlir.addressof @dora_stack_length : !llvm.ptr
    llvm.store %c0_i64, %2 : i64, !llvm.ptr
    %c0_i64_0 = arith.constant 0 : i64
    %3 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    llvm.store %c0_i64_0, %3 : i64, !llvm.ptr
    %4 = call @dora_get_calldata_ptr(%arg0) : (!llvm.ptr) -> !llvm.ptr
    %5 = llvm.mlir.addressof @dora_calldata_ptr : !llvm.ptr
    llvm.store %4, %5 : !llvm.ptr, !llvm.ptr
    %6 = call @dora_get_calldata_size(%arg0) : (!llvm.ptr) -> i64
    %7 = llvm.mlir.addressof @dora_calldata_size : !llvm.ptr
    llvm.store %6, %7 : i64, !llvm.ptr
    %8 = llvm.mlir.addressof @dora_gas_counter : !llvm.ptr
    llvm.store %arg1, %8 : i64, !llvm.ptr
    %9 = llvm.mlir.addressof @dora_stack_length : !llvm.ptr
    %c1024_i64 = arith.constant 1024 : i64
    cf.br ^bb3
  ^bb1:  // 8 preds: ^bb2, ^bb5, ^bb9, ^bb14, ^bb15, ^bb19, ^bb23, ^bb29
    %c0_i64_1 = arith.constant 0 : i64
    %c3_i8 = arith.constant 3 : i8
    call @dora_write_result(%arg0, %c0_i64_1, %c0_i64_1, %c0_i64_1, %c3_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c3_i8 : i8
  ^bb2(%10: i256):  // no predecessors
    cf.switch %10 : i256, [
      default: ^bb1
    ]
  ^bb3:  // pred: ^bb0
    %c170141183460469231731687303715884105727_i256 = arith.constant 170141183460469231731687303715884105727 : i256
    %11 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    llvm.store %c170141183460469231731687303715884105727_i256, %12 : i256, !llvm.ptr
    %13 = llvm.getelementptr %12[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %13, %11 : !llvm.ptr, !llvm.ptr
    cf.br ^bb4
  ^bb4:  // pred: ^bb3
    %c0_i256 = arith.constant 0 : i256
    %14 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %15 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256, %15 : i256, !llvm.ptr
    %16 = llvm.getelementptr %15[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %16, %14 : !llvm.ptr, !llvm.ptr
    cf.br ^bb5
  ^bb5:  // pred: ^bb4
    %17 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %18 = llvm.load %17 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.getelementptr %18[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %20 = llvm.load %19 : !llvm.ptr -> i256
    llvm.store %19, %17 : !llvm.ptr, !llvm.ptr
    %21 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %22 = llvm.load %21 : !llvm.ptr -> !llvm.ptr
    %23 = llvm.getelementptr %22[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %24 = llvm.load %23 : !llvm.ptr -> i256
    llvm.store %23, %21 : !llvm.ptr, !llvm.ptr
    %25 = arith.trunci %20 : i256 to i64
    %c32_i64 = arith.constant 32 : i64
    %26 = arith.addi %25, %c32_i64 : i64
    %c0_i64_2 = arith.constant 0 : i64
    %27 = arith.cmpi slt, %26, %c0_i64_2 : i64
    cf.cond_br %27, ^bb1, ^bb6
  ^bb6:  // pred: ^bb5
    %28 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    %29 = llvm.load %28 : !llvm.ptr -> i64
    %c31_i64 = arith.constant 31 : i64
    %c32_i64_3 = arith.constant 32 : i64
    %30 = arith.addi %26, %c31_i64 : i64
    %31 = arith.divui %30, %c32_i64_3 : i64
    %32 = arith.muli %31, %c32_i64_3 : i64
    %33 = arith.cmpi ult, %29, %32 : i64
    scf.if %33 {
      %204 = func.call @dora_extend_memory(%arg0, %32) : (!llvm.ptr, i64) -> !llvm.ptr
      llvm.store %32, %28 : i64, !llvm.ptr
      %205 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
      llvm.store %204, %205 : !llvm.ptr, !llvm.ptr
    } else {
    }
    %34 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
    %35 = llvm.load %34 : !llvm.ptr -> !llvm.ptr
    %36 = llvm.getelementptr %35[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %37 = llvm.intr.bswap(%24)  : (i256) -> i256
    llvm.store %37, %36 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb7
  ^bb7:  // pred: ^bb6
    %c170141183460469231731687303715884105727_i256_4 = arith.constant 170141183460469231731687303715884105727 : i256
    %38 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %39 = llvm.load %38 : !llvm.ptr -> !llvm.ptr
    llvm.store %c170141183460469231731687303715884105727_i256_4, %39 : i256, !llvm.ptr
    %40 = llvm.getelementptr %39[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %40, %38 : !llvm.ptr, !llvm.ptr
    cf.br ^bb8
  ^bb8:  // pred: ^bb7
    %c32_i256 = arith.constant 32 : i256
    %41 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %42 = llvm.load %41 : !llvm.ptr -> !llvm.ptr
    llvm.store %c32_i256, %42 : i256, !llvm.ptr
    %43 = llvm.getelementptr %42[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %43, %41 : !llvm.ptr, !llvm.ptr
    cf.br ^bb9
  ^bb9:  // pred: ^bb8
    %44 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %45 = llvm.load %44 : !llvm.ptr -> !llvm.ptr
    %46 = llvm.getelementptr %45[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %47 = llvm.load %46 : !llvm.ptr -> i256
    llvm.store %46, %44 : !llvm.ptr, !llvm.ptr
    %48 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %49 = llvm.load %48 : !llvm.ptr -> !llvm.ptr
    %50 = llvm.getelementptr %49[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %51 = llvm.load %50 : !llvm.ptr -> i256
    llvm.store %50, %48 : !llvm.ptr, !llvm.ptr
    %52 = arith.trunci %47 : i256 to i64
    %c32_i64_5 = arith.constant 32 : i64
    %53 = arith.addi %52, %c32_i64_5 : i64
    %c0_i64_6 = arith.constant 0 : i64
    %54 = arith.cmpi slt, %53, %c0_i64_6 : i64
    cf.cond_br %54, ^bb1, ^bb10
  ^bb10:  // pred: ^bb9
    %55 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    %56 = llvm.load %55 : !llvm.ptr -> i64
    %c31_i64_7 = arith.constant 31 : i64
    %c32_i64_8 = arith.constant 32 : i64
    %57 = arith.addi %53, %c31_i64_7 : i64
    %58 = arith.divui %57, %c32_i64_8 : i64
    %59 = arith.muli %58, %c32_i64_8 : i64
    %60 = arith.cmpi ult, %56, %59 : i64
    scf.if %60 {
      %204 = func.call @dora_extend_memory(%arg0, %59) : (!llvm.ptr, i64) -> !llvm.ptr
      llvm.store %59, %55 : i64, !llvm.ptr
      %205 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
      llvm.store %204, %205 : !llvm.ptr, !llvm.ptr
    } else {
    }
    %61 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
    %62 = llvm.load %61 : !llvm.ptr -> !llvm.ptr
    %63 = llvm.getelementptr %62[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %64 = llvm.intr.bswap(%51)  : (i256) -> i256
    llvm.store %64, %63 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb11
  ^bb11:  // pred: ^bb10
    %c41_i256 = arith.constant 41 : i256
    %65 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %66 = llvm.load %65 : !llvm.ptr -> !llvm.ptr
    llvm.store %c41_i256, %66 : i256, !llvm.ptr
    %67 = llvm.getelementptr %66[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %67, %65 : !llvm.ptr, !llvm.ptr
    cf.br ^bb12
  ^bb12:  // pred: ^bb11
    %c0_i256_9 = arith.constant 0 : i256
    %68 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %69 = llvm.load %68 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_9, %69 : i256, !llvm.ptr
    %70 = llvm.getelementptr %69[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %70, %68 : !llvm.ptr, !llvm.ptr
    cf.br ^bb13
  ^bb13:  // pred: ^bb12
    %c0_i256_10 = arith.constant 0 : i256
    %71 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %72 = llvm.load %71 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_10, %72 : i256, !llvm.ptr
    %73 = llvm.getelementptr %72[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %73, %71 : !llvm.ptr, !llvm.ptr
    cf.br ^bb14
  ^bb14:  // pred: ^bb13
    %74 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %75 = llvm.load %74 : !llvm.ptr -> !llvm.ptr
    %76 = llvm.getelementptr %75[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %77 = llvm.load %76 : !llvm.ptr -> i256
    llvm.store %76, %74 : !llvm.ptr, !llvm.ptr
    %78 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %79 = llvm.load %78 : !llvm.ptr -> !llvm.ptr
    %80 = llvm.getelementptr %79[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %81 = llvm.load %80 : !llvm.ptr -> i256
    llvm.store %80, %78 : !llvm.ptr, !llvm.ptr
    %82 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %83 = llvm.load %82 : !llvm.ptr -> !llvm.ptr
    %84 = llvm.getelementptr %83[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %85 = llvm.load %84 : !llvm.ptr -> i256
    llvm.store %84, %82 : !llvm.ptr, !llvm.ptr
    %86 = arith.trunci %81 : i256 to i64
    %87 = arith.trunci %85 : i256 to i64
    %88 = arith.addi %86, %87 : i64
    %c0_i64_11 = arith.constant 0 : i64
    %89 = arith.cmpi slt, %88, %c0_i64_11 : i64
    cf.cond_br %89, ^bb1, ^bb15
  ^bb15:  // pred: ^bb14
    %90 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    %91 = llvm.load %90 : !llvm.ptr -> i64
    %c31_i64_12 = arith.constant 31 : i64
    %c32_i64_13 = arith.constant 32 : i64
    %92 = arith.addi %88, %c31_i64_12 : i64
    %93 = arith.divui %92, %c32_i64_13 : i64
    %94 = arith.muli %93, %c32_i64_13 : i64
    %95 = arith.cmpi ult, %91, %94 : i64
    scf.if %95 {
      %204 = func.call @dora_extend_memory(%arg0, %94) : (!llvm.ptr, i64) -> !llvm.ptr
      llvm.store %94, %90 : i64, !llvm.ptr
      %205 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
      llvm.store %204, %205 : !llvm.ptr, !llvm.ptr
    } else {
    }
    %c1_i256 = arith.constant 1 : i256
    %96 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %77, %96 {alignment = 1 : i64} : i256, !llvm.ptr
    %97 = llvm.mlir.addressof @dora_gas_counter : !llvm.ptr
    %98 = llvm.load %97 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %99 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %98, %99 {alignment = 1 : i64} : i64, !llvm.ptr
    %100 = call @dora_create(%arg0, %87, %86, %96, %99) : (!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr) -> i8
    %c0_i8 = arith.constant 0 : i8
    %101 = arith.cmpi ne, %c0_i8, %100 : i8
    %102 = llvm.load %96 : !llvm.ptr -> i256
    cf.cond_br %101, ^bb1, ^bb16
  ^bb16:  // pred: ^bb15
    %103 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %104 = llvm.load %103 : !llvm.ptr -> !llvm.ptr
    llvm.store %102, %104 : i256, !llvm.ptr
    %105 = llvm.getelementptr %104[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %105, %103 : !llvm.ptr, !llvm.ptr
    cf.br ^bb17
  ^bb17:  // pred: ^bb16
    %c0_i256_14 = arith.constant 0 : i256
    %106 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %107 = llvm.load %106 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_14, %107 : i256, !llvm.ptr
    %108 = llvm.getelementptr %107[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %108, %106 : !llvm.ptr, !llvm.ptr
    cf.br ^bb18
  ^bb18:  // pred: ^bb17
    %c0_i256_15 = arith.constant 0 : i256
    %109 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %110 = llvm.load %109 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_15, %110 : i256, !llvm.ptr
    %111 = llvm.getelementptr %110[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %111, %109 : !llvm.ptr, !llvm.ptr
    cf.br ^bb19
  ^bb19:  // pred: ^bb18
    %112 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %113 = llvm.load %112 : !llvm.ptr -> !llvm.ptr
    %114 = llvm.getelementptr %113[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %115 = llvm.load %114 : !llvm.ptr -> i256
    llvm.store %114, %112 : !llvm.ptr, !llvm.ptr
    %116 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %117 = llvm.load %116 : !llvm.ptr -> !llvm.ptr
    %118 = llvm.getelementptr %117[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %119 = llvm.load %118 : !llvm.ptr -> i256
    llvm.store %118, %116 : !llvm.ptr, !llvm.ptr
    %120 = arith.trunci %115 : i256 to i64
    %c32_i64_16 = arith.constant 32 : i64
    %121 = arith.addi %120, %c32_i64_16 : i64
    %c0_i64_17 = arith.constant 0 : i64
    %122 = arith.cmpi slt, %121, %c0_i64_17 : i64
    cf.cond_br %122, ^bb1, ^bb20
  ^bb20:  // pred: ^bb19
    %123 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    %124 = llvm.load %123 : !llvm.ptr -> i64
    %c31_i64_18 = arith.constant 31 : i64
    %c32_i64_19 = arith.constant 32 : i64
    %125 = arith.addi %121, %c31_i64_18 : i64
    %126 = arith.divui %125, %c32_i64_19 : i64
    %127 = arith.muli %126, %c32_i64_19 : i64
    %128 = arith.cmpi ult, %124, %127 : i64
    scf.if %128 {
      %204 = func.call @dora_extend_memory(%arg0, %127) : (!llvm.ptr, i64) -> !llvm.ptr
      llvm.store %127, %123 : i64, !llvm.ptr
      %205 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
      llvm.store %204, %205 : !llvm.ptr, !llvm.ptr
    } else {
    }
    %129 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
    %130 = llvm.load %129 : !llvm.ptr -> !llvm.ptr
    %131 = llvm.getelementptr %130[%120] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %132 = llvm.intr.bswap(%119)  : (i256) -> i256
    llvm.store %132, %131 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb21
  ^bb21:  // pred: ^bb20
    %c0_i256_20 = arith.constant 0 : i256
    %133 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %134 = llvm.load %133 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_20, %134 : i256, !llvm.ptr
    %135 = llvm.getelementptr %134[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %135, %133 : !llvm.ptr, !llvm.ptr
    cf.br ^bb22
  ^bb22:  // pred: ^bb21
    %c32_i256_21 = arith.constant 32 : i256
    %136 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %137 = llvm.load %136 : !llvm.ptr -> !llvm.ptr
    llvm.store %c32_i256_21, %137 : i256, !llvm.ptr
    %138 = llvm.getelementptr %137[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %138, %136 : !llvm.ptr, !llvm.ptr
    cf.br ^bb23
  ^bb23:  // pred: ^bb22
    %139 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %140 = llvm.load %139 : !llvm.ptr -> !llvm.ptr
    %141 = llvm.getelementptr %140[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %142 = llvm.load %141 : !llvm.ptr -> i256
    llvm.store %141, %139 : !llvm.ptr, !llvm.ptr
    %143 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %144 = llvm.load %143 : !llvm.ptr -> !llvm.ptr
    %145 = llvm.getelementptr %144[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %146 = llvm.load %145 : !llvm.ptr -> i256
    llvm.store %145, %143 : !llvm.ptr, !llvm.ptr
    %147 = arith.trunci %142 : i256 to i64
    %c32_i64_22 = arith.constant 32 : i64
    %148 = arith.addi %147, %c32_i64_22 : i64
    %c0_i64_23 = arith.constant 0 : i64
    %149 = arith.cmpi slt, %148, %c0_i64_23 : i64
    cf.cond_br %149, ^bb1, ^bb24
  ^bb24:  // pred: ^bb23
    %150 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    %151 = llvm.load %150 : !llvm.ptr -> i64
    %c31_i64_24 = arith.constant 31 : i64
    %c32_i64_25 = arith.constant 32 : i64
    %152 = arith.addi %148, %c31_i64_24 : i64
    %153 = arith.divui %152, %c32_i64_25 : i64
    %154 = arith.muli %153, %c32_i64_25 : i64
    %155 = arith.cmpi ult, %151, %154 : i64
    scf.if %155 {
      %204 = func.call @dora_extend_memory(%arg0, %154) : (!llvm.ptr, i64) -> !llvm.ptr
      llvm.store %154, %150 : i64, !llvm.ptr
      %205 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
      llvm.store %204, %205 : !llvm.ptr, !llvm.ptr
    } else {
    }
    %156 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
    %157 = llvm.load %156 : !llvm.ptr -> !llvm.ptr
    %158 = llvm.getelementptr %157[%147] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %159 = llvm.intr.bswap(%146)  : (i256) -> i256
    llvm.store %159, %158 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb25
  ^bb25:  // pred: ^bb24
    %c32_i256_26 = arith.constant 32 : i256
    %160 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %161 = llvm.load %160 : !llvm.ptr -> !llvm.ptr
    llvm.store %c32_i256_26, %161 : i256, !llvm.ptr
    %162 = llvm.getelementptr %161[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %162, %160 : !llvm.ptr, !llvm.ptr
    cf.br ^bb26
  ^bb26:  // pred: ^bb25
    %c0_i256_27 = arith.constant 0 : i256
    %163 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %164 = llvm.load %163 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_27, %164 : i256, !llvm.ptr
    %165 = llvm.getelementptr %164[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %165, %163 : !llvm.ptr, !llvm.ptr
    cf.br ^bb27
  ^bb27:  // pred: ^bb26
    %c0_i256_28 = arith.constant 0 : i256
    %166 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %167 = llvm.load %166 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_28, %167 : i256, !llvm.ptr
    %168 = llvm.getelementptr %167[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %168, %166 : !llvm.ptr, !llvm.ptr
    cf.br ^bb28
  ^bb28:  // pred: ^bb27
    %169 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %170 = llvm.load %169 : !llvm.ptr -> !llvm.ptr
    %171 = llvm.getelementptr %170[-4] : (!llvm.ptr) -> !llvm.ptr, i256
    %172 = llvm.load %171 : !llvm.ptr -> i256
    %173 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %174 = llvm.load %173 : !llvm.ptr -> !llvm.ptr
    llvm.store %172, %174 : i256, !llvm.ptr
    %175 = llvm.getelementptr %174[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %175, %173 : !llvm.ptr, !llvm.ptr
    cf.br ^bb29
  ^bb29:  // pred: ^bb28
    %176 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %177 = llvm.load %176 : !llvm.ptr -> !llvm.ptr
    %178 = llvm.getelementptr %177[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %179 = llvm.load %178 : !llvm.ptr -> i256
    llvm.store %178, %176 : !llvm.ptr, !llvm.ptr
    %180 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %181 = llvm.load %180 : !llvm.ptr -> !llvm.ptr
    %182 = llvm.getelementptr %181[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %183 = llvm.load %182 : !llvm.ptr -> i256
    llvm.store %182, %180 : !llvm.ptr, !llvm.ptr
    %184 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %185 = llvm.load %184 : !llvm.ptr -> !llvm.ptr
    %186 = llvm.getelementptr %185[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %187 = llvm.load %186 : !llvm.ptr -> i256
    llvm.store %186, %184 : !llvm.ptr, !llvm.ptr
    %188 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %189 = llvm.load %188 : !llvm.ptr -> !llvm.ptr
    %190 = llvm.getelementptr %189[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %191 = llvm.load %190 : !llvm.ptr -> i256
    llvm.store %190, %188 : !llvm.ptr, !llvm.ptr
    %192 = arith.trunci %187 : i256 to i64
    %193 = arith.trunci %191 : i256 to i64
    %194 = arith.trunci %183 : i256 to i64
    %c1_i256_29 = arith.constant 1 : i256
    %195 = llvm.alloca %c1_i256_29 x i256 : (i256) -> !llvm.ptr
    llvm.store %179, %195 {alignment = 1 : i64} : i256, !llvm.ptr
    %196 = arith.addi %194, %193 : i64
    %c0_i64_30 = arith.constant 0 : i64
    %197 = arith.cmpi slt, %196, %c0_i64_30 : i64
    cf.cond_br %197, ^bb1, ^bb30
  ^bb30:  // pred: ^bb29
    %198 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    %199 = llvm.load %198 : !llvm.ptr -> i64
    %c31_i64_31 = arith.constant 31 : i64
    %c32_i64_32 = arith.constant 32 : i64
    %200 = arith.addi %196, %c31_i64_31 : i64
    %201 = arith.divui %200, %c32_i64_32 : i64
    %202 = arith.muli %201, %c32_i64_32 : i64
    %203 = arith.cmpi ult, %199, %202 : i64
    scf.if %203 {
      %204 = func.call @dora_extend_memory(%arg0, %202) : (!llvm.ptr, i64) -> !llvm.ptr
      llvm.store %202, %198 : i64, !llvm.ptr
      %205 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
      llvm.store %204, %205 : !llvm.ptr, !llvm.ptr
    } else {
    }
    call @dora_copy_ext_code_to_memory(%arg0, %195, %192, %193, %194) : (!llvm.ptr, !llvm.ptr, i64, i64, i64) -> ()
    cf.br ^bb31
  ^bb31:  // pred: ^bb30
    %c0_i64_33 = arith.constant 0 : i64
    %c1_i8 = arith.constant 1 : i8
    call @dora_write_result(%arg0, %c0_i64_33, %c0_i64_33, %arg1, %c1_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c1_i8 : i8
  }
}
