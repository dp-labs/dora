---
source: crates/dora-compiler/src/dora/tests/gas.rs
expression: op
snapshot_kind: text
---
module {
  llvm.mlir.global internal @dora_global_stack_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_stack_length() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_memory_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_memory_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_calldata_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_calldata_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_gas_counter() {addr_space = 0 : i32} : i64
  llvm.mlir.global external @dora_global_ctx_is_static() {addr_space = 0 : i32} : !llvm.ptr
  func.func private @dora_fn_debug_print(i32)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_chainid(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_gaslimit(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_code_copy(!llvm.ptr, i64, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_read_storage(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_write_storage(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_call(!llvm.ptr, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr, i8) -> !llvm.ptr
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, i64, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_return_data_size(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_return_data_copy(!llvm.ptr, i64, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_transient_storage_read(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_transient_storage_write(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func public @main(%arg0: !llvm.ptr, %arg1: i64) -> i8 attributes {llvm.emit_c_interface} {
    %c1024_i256 = arith.constant 1024 : i256
    %0 = llvm.alloca %c1024_i256 x i256 : (i256) -> !llvm.ptr
    %1 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    llvm.store %0, %1 : !llvm.ptr, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %2 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    llvm.store %c0_i64, %2 : i64, !llvm.ptr
    %c0_i64_0 = arith.constant 0 : i64
    %3 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %c0_i64_0, %3 : i64, !llvm.ptr
    %4 = call @dora_fn_calldata(%arg0) : (!llvm.ptr) -> !llvm.ptr
    %5 = llvm.mlir.addressof @dora_global_calldata_ptr : !llvm.ptr
    llvm.store %4, %5 : !llvm.ptr, !llvm.ptr
    %6 = call @dora_fn_calldata_size(%arg0) : (!llvm.ptr) -> i64
    %7 = llvm.mlir.addressof @dora_global_calldata_size : !llvm.ptr
    llvm.store %6, %7 : i64, !llvm.ptr
    %8 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    llvm.store %arg1, %8 : i64, !llvm.ptr
    %9 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64 = arith.constant 1024 : i64
    %10 = llvm.load %9 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %11 = arith.addi %10, %c1_i64 : i64
    llvm.store %11, %9 : i64, !llvm.ptr
    %12 = arith.cmpi ult, %c1024_i64, %11 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %12, ^bb1(%c92_i8 : i8), ^bb3
  ^bb1(%13: i8):  // 11 preds: ^bb0, ^bb2, ^bb3, ^bb4, ^bb5, ^bb6, ^bb7, ^bb8, ^bb9, ^bb10, ^bb11
    %c0_i64_1 = arith.constant 0 : i64
    %14 = call @dora_fn_write_result(%arg0, %c0_i64_1, %c0_i64_1, %c0_i64_1, %13) : (!llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
    return %13 : i8
  ^bb2(%15: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %15 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3:  // pred: ^bb0
    %c3_i256 = arith.constant 3 : i256
    %16 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %17 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    llvm.store %c3_i256, %17 : i256, !llvm.ptr
    %18 = llvm.getelementptr %17[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %18, %16 : !llvm.ptr, !llvm.ptr
    %19 = llvm.load %9 : !llvm.ptr -> i64
    %c1_i64_2 = arith.constant 1 : i64
    %20 = arith.addi %19, %c1_i64_2 : i64
    llvm.store %20, %9 : i64, !llvm.ptr
    %21 = arith.cmpi ult, %c1024_i64, %20 : i64
    %c92_i8_3 = arith.constant 92 : i8
    cf.cond_br %21, ^bb1(%c92_i8_3 : i8), ^bb4
  ^bb4:  // pred: ^bb3
    %c3_i256_4 = arith.constant 3 : i256
    %22 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %23 = llvm.load %22 : !llvm.ptr -> !llvm.ptr
    llvm.store %c3_i256_4, %23 : i256, !llvm.ptr
    %24 = llvm.getelementptr %23[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %24, %22 : !llvm.ptr, !llvm.ptr
    %25 = llvm.load %9 : !llvm.ptr -> i64
    %c-1_i64 = arith.constant -1 : i64
    %26 = arith.addi %25, %c-1_i64 : i64
    llvm.store %26, %9 : i64, !llvm.ptr
    %c2_i64 = arith.constant 2 : i64
    %27 = arith.cmpi ult, %25, %c2_i64 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %27, ^bb1(%c91_i8 : i8), ^bb5
  ^bb5:  // pred: ^bb4
    %28 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %29 = llvm.load %28 : !llvm.ptr -> !llvm.ptr
    %30 = llvm.getelementptr %29[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %31 = llvm.load %30 : !llvm.ptr -> i256
    llvm.store %30, %28 : !llvm.ptr, !llvm.ptr
    %32 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %33 = llvm.load %32 : !llvm.ptr -> !llvm.ptr
    %34 = llvm.getelementptr %33[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %35 = llvm.load %34 : !llvm.ptr -> i256
    llvm.store %34, %32 : !llvm.ptr, !llvm.ptr
    %36 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %37 = llvm.load %36 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    %38 = arith.cmpi sge, %37, %c3_i64 : i64
    %39 = arith.subi %37, %c3_i64 : i64
    llvm.store %39, %36 : i64, !llvm.ptr
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %38, ^bb6, ^bb1(%c80_i8 : i8)
  ^bb6:  // pred: ^bb5
    %40 = "dora.add"(%31, %35) : (i256, i256) -> i256
    %41 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %42 = llvm.load %41 : !llvm.ptr -> !llvm.ptr
    llvm.store %40, %42 : i256, !llvm.ptr
    %43 = llvm.getelementptr %42[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %43, %41 : !llvm.ptr, !llvm.ptr
    %44 = llvm.load %9 : !llvm.ptr -> i64
    %c1_i64_5 = arith.constant 1 : i64
    %45 = arith.addi %44, %c1_i64_5 : i64
    llvm.store %45, %9 : i64, !llvm.ptr
    %46 = arith.cmpi ult, %c1024_i64, %45 : i64
    %c92_i8_6 = arith.constant 92 : i8
    cf.cond_br %46, ^bb1(%c92_i8_6 : i8), ^bb7
  ^bb7:  // pred: ^bb6
    %c3_i256_7 = arith.constant 3 : i256
    %47 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %48 = llvm.load %47 : !llvm.ptr -> !llvm.ptr
    llvm.store %c3_i256_7, %48 : i256, !llvm.ptr
    %49 = llvm.getelementptr %48[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %49, %47 : !llvm.ptr, !llvm.ptr
    %50 = llvm.load %9 : !llvm.ptr -> i64
    %c-1_i64_8 = arith.constant -1 : i64
    %51 = arith.addi %50, %c-1_i64_8 : i64
    llvm.store %51, %9 : i64, !llvm.ptr
    %c2_i64_9 = arith.constant 2 : i64
    %52 = arith.cmpi ult, %50, %c2_i64_9 : i64
    %c91_i8_10 = arith.constant 91 : i8
    cf.cond_br %52, ^bb1(%c91_i8_10 : i8), ^bb8
  ^bb8:  // pred: ^bb7
    %53 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %54 = llvm.load %53 : !llvm.ptr -> !llvm.ptr
    %55 = llvm.getelementptr %54[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %56 = llvm.load %55 : !llvm.ptr -> i256
    llvm.store %55, %53 : !llvm.ptr, !llvm.ptr
    %57 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %58 = llvm.load %57 : !llvm.ptr -> !llvm.ptr
    %59 = llvm.getelementptr %58[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %60 = llvm.load %59 : !llvm.ptr -> i256
    llvm.store %59, %57 : !llvm.ptr, !llvm.ptr
    %61 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %62 = llvm.load %61 : !llvm.ptr -> i64
    %c3_i64_11 = arith.constant 3 : i64
    %63 = arith.cmpi sge, %62, %c3_i64_11 : i64
    %64 = arith.subi %62, %c3_i64_11 : i64
    llvm.store %64, %61 : i64, !llvm.ptr
    %c80_i8_12 = arith.constant 80 : i8
    cf.cond_br %63, ^bb9, ^bb1(%c80_i8_12 : i8)
  ^bb9:  // pred: ^bb8
    %65 = "dora.sub"(%56, %60) : (i256, i256) -> i256
    %66 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %67 = llvm.load %66 : !llvm.ptr -> !llvm.ptr
    llvm.store %65, %67 : i256, !llvm.ptr
    %68 = llvm.getelementptr %67[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %68, %66 : !llvm.ptr, !llvm.ptr
    %69 = llvm.load %9 : !llvm.ptr -> i64
    %c1_i64_13 = arith.constant 1 : i64
    %70 = arith.addi %69, %c1_i64_13 : i64
    llvm.store %70, %9 : i64, !llvm.ptr
    %71 = arith.cmpi ult, %c1024_i64, %70 : i64
    %c92_i8_14 = arith.constant 92 : i8
    cf.cond_br %71, ^bb1(%c92_i8_14 : i8), ^bb10
  ^bb10:  // pred: ^bb9
    %c3_i256_15 = arith.constant 3 : i256
    %72 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %73 = llvm.load %72 : !llvm.ptr -> !llvm.ptr
    llvm.store %c3_i256_15, %73 : i256, !llvm.ptr
    %74 = llvm.getelementptr %73[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %74, %72 : !llvm.ptr, !llvm.ptr
    %75 = llvm.load %9 : !llvm.ptr -> i64
    %c-1_i64_16 = arith.constant -1 : i64
    %76 = arith.addi %75, %c-1_i64_16 : i64
    llvm.store %76, %9 : i64, !llvm.ptr
    %c2_i64_17 = arith.constant 2 : i64
    %77 = arith.cmpi ult, %75, %c2_i64_17 : i64
    %c91_i8_18 = arith.constant 91 : i8
    cf.cond_br %77, ^bb1(%c91_i8_18 : i8), ^bb11
  ^bb11:  // pred: ^bb10
    %78 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %79 = llvm.load %78 : !llvm.ptr -> !llvm.ptr
    %80 = llvm.getelementptr %79[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %81 = llvm.load %80 : !llvm.ptr -> i256
    llvm.store %80, %78 : !llvm.ptr, !llvm.ptr
    %82 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %83 = llvm.load %82 : !llvm.ptr -> !llvm.ptr
    %84 = llvm.getelementptr %83[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %85 = llvm.load %84 : !llvm.ptr -> i256
    llvm.store %84, %82 : !llvm.ptr, !llvm.ptr
    %86 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %87 = llvm.load %86 : !llvm.ptr -> i64
    %c5_i64 = arith.constant 5 : i64
    %88 = arith.cmpi sge, %87, %c5_i64 : i64
    %89 = arith.subi %87, %c5_i64 : i64
    llvm.store %89, %86 : i64, !llvm.ptr
    %c80_i8_19 = arith.constant 80 : i8
    cf.cond_br %88, ^bb12, ^bb1(%c80_i8_19 : i8)
  ^bb12:  // pred: ^bb11
    %90 = "dora.mul"(%81, %85) : (i256, i256) -> i256
    %91 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %92 = llvm.load %91 : !llvm.ptr -> !llvm.ptr
    llvm.store %90, %92 : i256, !llvm.ptr
    %93 = llvm.getelementptr %92[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %93, %91 : !llvm.ptr, !llvm.ptr
    cf.br ^bb13
  ^bb13:  // pred: ^bb12
    %c0_i64_20 = arith.constant 0 : i64
    %c1_i8 = arith.constant 1 : i8
    %94 = call @dora_fn_write_result(%arg0, %c0_i64_20, %c0_i64_20, %arg1, %c1_i8) : (!llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
    return %c1_i8 : i8
  }
}
