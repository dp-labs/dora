---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  llvm.mlir.global internal @dora_global_stack_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_stack_length() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_memory_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_memory_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_calldata_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_calldata_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_gas_counter() {addr_space = 0 : i32} : i64
  llvm.mlir.global external @dora_global_ctx_is_static() {addr_space = 0 : i32} : !llvm.ptr
  func.func private @dora_fn_debug_print(i32)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_chainid(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_gaslimit(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_code_copy(!llvm.ptr, i64, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_call(!llvm.ptr, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr, i8) -> !llvm.ptr
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, i64, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_size(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_copy(!llvm.ptr, i64, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_transient_storage_read(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_transient_storage_write(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func public @main(%arg0: !llvm.ptr, %arg1: i64) -> i8 attributes {llvm.emit_c_interface} {
    %c1024_i256 = arith.constant 1024 : i256
    %0 = llvm.alloca %c1024_i256 x i256 : (i256) -> !llvm.ptr
    %1 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    llvm.store %0, %1 : !llvm.ptr, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %2 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    llvm.store %c0_i64, %2 : i64, !llvm.ptr
    %c0_i64_0 = arith.constant 0 : i64
    %3 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %c0_i64_0, %3 : i64, !llvm.ptr
    %4 = call @dora_fn_calldata(%arg0) : (!llvm.ptr) -> !llvm.ptr
    %5 = llvm.mlir.addressof @dora_global_calldata_ptr : !llvm.ptr
    llvm.store %4, %5 : !llvm.ptr, !llvm.ptr
    %6 = call @dora_fn_calldata_size(%arg0) : (!llvm.ptr) -> i64
    %7 = llvm.mlir.addressof @dora_global_calldata_size : !llvm.ptr
    llvm.store %6, %7 : i64, !llvm.ptr
    %8 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    llvm.store %arg1, %8 : i64, !llvm.ptr
    cf.br ^bb5
  ^bb1(%9: i8):  // 27 preds: ^bb2, ^bb4, ^bb5, ^bb8, ^bb9, ^bb11, ^bb12, ^bb13, ^bb14, ^bb16, ^bb17, ^bb20, ^bb21, ^bb24, ^bb25, ^bb28, ^bb29, ^bb31, ^bb32, ^bb33, ^bb34, ^bb36, ^bb37, ^bb40, ^bb41, ^bb44, ^bb45
    %c0_i64_1 = arith.constant 0 : i64
    %10 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %11 = llvm.load %10 : !llvm.ptr -> i64
    %12 = call @dora_fn_write_result(%arg0, %c0_i64_1, %c0_i64_1, %11, %9) : (!llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
    return %9 : i8
  ^bb2(%13: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %13 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3:  // pred: ^bb4
    %14 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    %15 = llvm.load %14 : !llvm.ptr -> i64
    %16 = arith.extui %15 : i64 to i256
    %17 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %18 = llvm.load %17 : !llvm.ptr -> !llvm.ptr
    llvm.store %16, %18 : i256, !llvm.ptr
    %19 = llvm.getelementptr %18[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %19, %17 : !llvm.ptr, !llvm.ptr
    cf.br ^bb9
  ^bb4:  // pred: ^bb6
    %20 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64 = arith.constant 1024 : i64
    %21 = llvm.load %20 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %22 = arith.addi %21, %c1_i64 : i64
    llvm.store %22, %20 : i64, !llvm.ptr
    %23 = arith.cmpi ult, %c1024_i64, %22 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %23, ^bb1(%c92_i8 : i8), ^bb3
  ^bb5:  // pred: ^bb0
    %24 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %25 = llvm.load %24 : !llvm.ptr -> i64
    %c2_i64 = arith.constant 2 : i64
    %26 = arith.cmpi uge, %25, %c2_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %26, ^bb6, ^bb1(%c80_i8 : i8)
  ^bb6:  // pred: ^bb5
    %27 = arith.subi %25, %c2_i64 : i64
    llvm.store %27, %24 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb7:  // pred: ^bb8
    %c0_i256 = arith.constant 0 : i256
    %28 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %29 = llvm.load %28 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256, %29 : i256, !llvm.ptr
    %30 = llvm.getelementptr %29[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %30, %28 : !llvm.ptr, !llvm.ptr
    cf.br ^bb17
  ^bb8:  // pred: ^bb10
    %31 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_2 = arith.constant 1024 : i64
    %32 = llvm.load %31 : !llvm.ptr -> i64
    %c1_i64_3 = arith.constant 1 : i64
    %33 = arith.addi %32, %c1_i64_3 : i64
    llvm.store %33, %31 : i64, !llvm.ptr
    %34 = arith.cmpi ult, %c1024_i64_2, %33 : i64
    %c92_i8_4 = arith.constant 92 : i8
    cf.cond_br %34, ^bb1(%c92_i8_4 : i8), ^bb7
  ^bb9:  // pred: ^bb3
    %35 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %36 = llvm.load %35 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    %37 = arith.cmpi uge, %36, %c3_i64 : i64
    %c80_i8_5 = arith.constant 80 : i8
    cf.cond_br %37, ^bb10, ^bb1(%c80_i8_5 : i8)
  ^bb10:  // pred: ^bb9
    %38 = arith.subi %36, %c3_i64 : i64
    llvm.store %38, %35 : i64, !llvm.ptr
    cf.br ^bb8
  ^bb11:  // pred: ^bb16
    %39 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %40 = llvm.load %39 : !llvm.ptr -> !llvm.ptr
    %41 = llvm.getelementptr %40[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %42 = llvm.load %41 : !llvm.ptr -> i256
    llvm.store %41, %39 : !llvm.ptr, !llvm.ptr
    %43 = arith.trunci %42 : i256 to i64
    %c0_i64_6 = arith.constant 0 : i64
    %44 = arith.cmpi slt, %43, %c0_i64_6 : i64
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %44, ^bb1(%c84_i8 : i8), ^bb12
  ^bb12:  // pred: ^bb11
    %c32_i64 = arith.constant 32 : i64
    %45 = arith.addi %43, %c32_i64 : i64
    %c0_i64_7 = arith.constant 0 : i64
    %46 = arith.cmpi slt, %45, %c0_i64_7 : i64
    %c84_i8_8 = arith.constant 84 : i8
    cf.cond_br %46, ^bb1(%c84_i8_8 : i8), ^bb13
  ^bb13:  // pred: ^bb12
    %c31_i64 = arith.constant 31 : i64
    %c32_i64_9 = arith.constant 32 : i64
    %47 = arith.addi %45, %c31_i64 : i64
    %48 = arith.divui %47, %c32_i64_9 : i64
    %c32_i64_10 = arith.constant 32 : i64
    %49 = arith.muli %48, %c32_i64_10 : i64
    %50 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    %51 = llvm.load %50 : !llvm.ptr -> i64
    %c31_i64_11 = arith.constant 31 : i64
    %c32_i64_12 = arith.constant 32 : i64
    %52 = arith.addi %51, %c31_i64_11 : i64
    %53 = arith.divui %52, %c32_i64_12 : i64
    %54 = arith.muli %53, %c32_i64_10 : i64
    %55 = arith.cmpi ult, %54, %49 : i64
    %56 = scf.if %55 -> (i64) {
      %c3_i64_64 = arith.constant 3 : i64
      %c512_i64 = arith.constant 512 : i64
      %195 = arith.muli %53, %53 : i64
      %196 = arith.divui %195, %c512_i64 : i64
      %197 = arith.muli %53, %c3_i64_64 : i64
      %198 = arith.addi %196, %197 : i64
      %c3_i64_65 = arith.constant 3 : i64
      %c512_i64_66 = arith.constant 512 : i64
      %199 = arith.muli %48, %48 : i64
      %200 = arith.divui %199, %c512_i64_66 : i64
      %201 = arith.muli %48, %c3_i64_65 : i64
      %202 = arith.addi %200, %201 : i64
      %203 = arith.subi %202, %198 : i64
      scf.yield %203 : i64
    } else {
      %c0_i64_64 = arith.constant 0 : i64
      scf.yield %c0_i64_64 : i64
    }
    %57 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %58 = llvm.load %57 : !llvm.ptr -> i64
    %59 = arith.cmpi ult, %58, %56 : i64
    scf.if %59 {
    } else {
      %195 = arith.subi %58, %56 : i64
      llvm.store %195, %57 : i64, !llvm.ptr
    }
    %c80_i8_13 = arith.constant 80 : i8
    cf.cond_br %59, ^bb1(%c80_i8_13 : i8), ^bb14
  ^bb14:  // pred: ^bb13
    %60 = call @dora_fn_extend_memory(%arg0, %49) : (!llvm.ptr, i64) -> !llvm.ptr
    %61 = llvm.getelementptr %60[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %62 = llvm.load %61 : !llvm.ptr -> !llvm.ptr
    %63 = llvm.getelementptr %60[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %64 = llvm.load %63 : !llvm.ptr -> i8
    %c0_i8 = arith.constant 0 : i8
    %65 = arith.cmpi ne, %64, %c0_i8 : i8
    cf.cond_br %65, ^bb1(%64 : i8), ^bb15
  ^bb15:  // pred: ^bb14
    %66 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    llvm.store %62, %66 : !llvm.ptr, !llvm.ptr
    %67 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %49, %67 : i64, !llvm.ptr
    %68 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    %69 = llvm.load %68 : !llvm.ptr -> !llvm.ptr
    %70 = llvm.getelementptr %69[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %71 = llvm.load %70 {alignment = 1 : i64} : !llvm.ptr -> i256
    %72 = llvm.intr.bswap(%71)  : (i256) -> i256
    %73 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %74 = llvm.load %73 : !llvm.ptr -> !llvm.ptr
    llvm.store %72, %74 : i256, !llvm.ptr
    %75 = llvm.getelementptr %74[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %75, %73 : !llvm.ptr, !llvm.ptr
    cf.br ^bb21
  ^bb16:  // pred: ^bb18
    %76 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_14 = arith.constant 1024 : i64
    %77 = llvm.load %76 : !llvm.ptr -> i64
    %c0_i64_15 = arith.constant 0 : i64
    %78 = arith.addi %77, %c0_i64_15 : i64
    llvm.store %78, %76 : i64, !llvm.ptr
    %c1_i64_16 = arith.constant 1 : i64
    %79 = arith.cmpi ult, %77, %c1_i64_16 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %79, ^bb1(%c91_i8 : i8), ^bb11
  ^bb17:  // pred: ^bb7
    %80 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %81 = llvm.load %80 : !llvm.ptr -> i64
    %c3_i64_17 = arith.constant 3 : i64
    %82 = arith.cmpi uge, %81, %c3_i64_17 : i64
    %c80_i8_18 = arith.constant 80 : i8
    cf.cond_br %82, ^bb18, ^bb1(%c80_i8_18 : i8)
  ^bb18:  // pred: ^bb17
    %83 = arith.subi %81, %c3_i64_17 : i64
    llvm.store %83, %80 : i64, !llvm.ptr
    cf.br ^bb16
  ^bb19:  // pred: ^bb20
    %84 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %85 = llvm.load %84 : !llvm.ptr -> !llvm.ptr
    %86 = llvm.getelementptr %85[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %87 = llvm.load %86 : !llvm.ptr -> i256
    llvm.store %86, %84 : !llvm.ptr, !llvm.ptr
    cf.br ^bb25
  ^bb20:  // pred: ^bb22
    %88 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_19 = arith.constant 1024 : i64
    %89 = llvm.load %88 : !llvm.ptr -> i64
    %c-1_i64 = arith.constant -1 : i64
    %90 = arith.addi %89, %c-1_i64 : i64
    llvm.store %90, %88 : i64, !llvm.ptr
    %c1_i64_20 = arith.constant 1 : i64
    %91 = arith.cmpi ult, %89, %c1_i64_20 : i64
    %c91_i8_21 = arith.constant 91 : i8
    cf.cond_br %91, ^bb1(%c91_i8_21 : i8), ^bb19
  ^bb21:  // pred: ^bb15
    %92 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %93 = llvm.load %92 : !llvm.ptr -> i64
    %c2_i64_22 = arith.constant 2 : i64
    %94 = arith.cmpi uge, %93, %c2_i64_22 : i64
    %c80_i8_23 = arith.constant 80 : i8
    cf.cond_br %94, ^bb22, ^bb1(%c80_i8_23 : i8)
  ^bb22:  // pred: ^bb21
    %95 = arith.subi %93, %c2_i64_22 : i64
    llvm.store %95, %92 : i64, !llvm.ptr
    cf.br ^bb20
  ^bb23:  // pred: ^bb24
    %96 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    %97 = llvm.load %96 : !llvm.ptr -> i64
    %98 = arith.extui %97 : i64 to i256
    %99 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %100 = llvm.load %99 : !llvm.ptr -> !llvm.ptr
    llvm.store %98, %100 : i256, !llvm.ptr
    %101 = llvm.getelementptr %100[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %101, %99 : !llvm.ptr, !llvm.ptr
    cf.br ^bb29
  ^bb24:  // pred: ^bb26
    %102 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_24 = arith.constant 1024 : i64
    %103 = llvm.load %102 : !llvm.ptr -> i64
    %c1_i64_25 = arith.constant 1 : i64
    %104 = arith.addi %103, %c1_i64_25 : i64
    llvm.store %104, %102 : i64, !llvm.ptr
    %105 = arith.cmpi ult, %c1024_i64_24, %104 : i64
    %c92_i8_26 = arith.constant 92 : i8
    cf.cond_br %105, ^bb1(%c92_i8_26 : i8), ^bb23
  ^bb25:  // pred: ^bb19
    %106 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %107 = llvm.load %106 : !llvm.ptr -> i64
    %c2_i64_27 = arith.constant 2 : i64
    %108 = arith.cmpi uge, %107, %c2_i64_27 : i64
    %c80_i8_28 = arith.constant 80 : i8
    cf.cond_br %108, ^bb26, ^bb1(%c80_i8_28 : i8)
  ^bb26:  // pred: ^bb25
    %109 = arith.subi %107, %c2_i64_27 : i64
    llvm.store %109, %106 : i64, !llvm.ptr
    cf.br ^bb24
  ^bb27:  // pred: ^bb28
    %c39_i256 = arith.constant 39 : i256
    %110 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %111 = llvm.load %110 : !llvm.ptr -> !llvm.ptr
    llvm.store %c39_i256, %111 : i256, !llvm.ptr
    %112 = llvm.getelementptr %111[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %112, %110 : !llvm.ptr, !llvm.ptr
    cf.br ^bb37
  ^bb28:  // pred: ^bb30
    %113 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_29 = arith.constant 1024 : i64
    %114 = llvm.load %113 : !llvm.ptr -> i64
    %c1_i64_30 = arith.constant 1 : i64
    %115 = arith.addi %114, %c1_i64_30 : i64
    llvm.store %115, %113 : i64, !llvm.ptr
    %116 = arith.cmpi ult, %c1024_i64_29, %115 : i64
    %c92_i8_31 = arith.constant 92 : i8
    cf.cond_br %116, ^bb1(%c92_i8_31 : i8), ^bb27
  ^bb29:  // pred: ^bb23
    %117 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %118 = llvm.load %117 : !llvm.ptr -> i64
    %c3_i64_32 = arith.constant 3 : i64
    %119 = arith.cmpi uge, %118, %c3_i64_32 : i64
    %c80_i8_33 = arith.constant 80 : i8
    cf.cond_br %119, ^bb30, ^bb1(%c80_i8_33 : i8)
  ^bb30:  // pred: ^bb29
    %120 = arith.subi %118, %c3_i64_32 : i64
    llvm.store %120, %117 : i64, !llvm.ptr
    cf.br ^bb28
  ^bb31:  // pred: ^bb36
    %121 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %122 = llvm.load %121 : !llvm.ptr -> !llvm.ptr
    %123 = llvm.getelementptr %122[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %124 = llvm.load %123 : !llvm.ptr -> i256
    llvm.store %123, %121 : !llvm.ptr, !llvm.ptr
    %125 = arith.trunci %124 : i256 to i64
    %c0_i64_34 = arith.constant 0 : i64
    %126 = arith.cmpi slt, %125, %c0_i64_34 : i64
    %c84_i8_35 = arith.constant 84 : i8
    cf.cond_br %126, ^bb1(%c84_i8_35 : i8), ^bb32
  ^bb32:  // pred: ^bb31
    %c32_i64_36 = arith.constant 32 : i64
    %127 = arith.addi %125, %c32_i64_36 : i64
    %c0_i64_37 = arith.constant 0 : i64
    %128 = arith.cmpi slt, %127, %c0_i64_37 : i64
    %c84_i8_38 = arith.constant 84 : i8
    cf.cond_br %128, ^bb1(%c84_i8_38 : i8), ^bb33
  ^bb33:  // pred: ^bb32
    %c31_i64_39 = arith.constant 31 : i64
    %c32_i64_40 = arith.constant 32 : i64
    %129 = arith.addi %127, %c31_i64_39 : i64
    %130 = arith.divui %129, %c32_i64_40 : i64
    %c32_i64_41 = arith.constant 32 : i64
    %131 = arith.muli %130, %c32_i64_41 : i64
    %132 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    %133 = llvm.load %132 : !llvm.ptr -> i64
    %c31_i64_42 = arith.constant 31 : i64
    %c32_i64_43 = arith.constant 32 : i64
    %134 = arith.addi %133, %c31_i64_42 : i64
    %135 = arith.divui %134, %c32_i64_43 : i64
    %136 = arith.muli %135, %c32_i64_41 : i64
    %137 = arith.cmpi ult, %136, %131 : i64
    %138 = scf.if %137 -> (i64) {
      %c3_i64_64 = arith.constant 3 : i64
      %c512_i64 = arith.constant 512 : i64
      %195 = arith.muli %135, %135 : i64
      %196 = arith.divui %195, %c512_i64 : i64
      %197 = arith.muli %135, %c3_i64_64 : i64
      %198 = arith.addi %196, %197 : i64
      %c3_i64_65 = arith.constant 3 : i64
      %c512_i64_66 = arith.constant 512 : i64
      %199 = arith.muli %130, %130 : i64
      %200 = arith.divui %199, %c512_i64_66 : i64
      %201 = arith.muli %130, %c3_i64_65 : i64
      %202 = arith.addi %200, %201 : i64
      %203 = arith.subi %202, %198 : i64
      scf.yield %203 : i64
    } else {
      %c0_i64_64 = arith.constant 0 : i64
      scf.yield %c0_i64_64 : i64
    }
    %139 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %140 = llvm.load %139 : !llvm.ptr -> i64
    %141 = arith.cmpi ult, %140, %138 : i64
    scf.if %141 {
    } else {
      %195 = arith.subi %140, %138 : i64
      llvm.store %195, %139 : i64, !llvm.ptr
    }
    %c80_i8_44 = arith.constant 80 : i8
    cf.cond_br %141, ^bb1(%c80_i8_44 : i8), ^bb34
  ^bb34:  // pred: ^bb33
    %142 = call @dora_fn_extend_memory(%arg0, %131) : (!llvm.ptr, i64) -> !llvm.ptr
    %143 = llvm.getelementptr %142[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %144 = llvm.load %143 : !llvm.ptr -> !llvm.ptr
    %145 = llvm.getelementptr %142[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %146 = llvm.load %145 : !llvm.ptr -> i8
    %c0_i8_45 = arith.constant 0 : i8
    %147 = arith.cmpi ne, %146, %c0_i8_45 : i8
    cf.cond_br %147, ^bb1(%146 : i8), ^bb35
  ^bb35:  // pred: ^bb34
    %148 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    llvm.store %144, %148 : !llvm.ptr, !llvm.ptr
    %149 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %131, %149 : i64, !llvm.ptr
    %150 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    %151 = llvm.load %150 : !llvm.ptr -> !llvm.ptr
    %152 = llvm.getelementptr %151[%125] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %153 = llvm.load %152 {alignment = 1 : i64} : !llvm.ptr -> i256
    %154 = llvm.intr.bswap(%153)  : (i256) -> i256
    %155 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %156 = llvm.load %155 : !llvm.ptr -> !llvm.ptr
    llvm.store %154, %156 : i256, !llvm.ptr
    %157 = llvm.getelementptr %156[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %157, %155 : !llvm.ptr, !llvm.ptr
    cf.br ^bb41
  ^bb36:  // pred: ^bb38
    %158 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_46 = arith.constant 1024 : i64
    %159 = llvm.load %158 : !llvm.ptr -> i64
    %c0_i64_47 = arith.constant 0 : i64
    %160 = arith.addi %159, %c0_i64_47 : i64
    llvm.store %160, %158 : i64, !llvm.ptr
    %c1_i64_48 = arith.constant 1 : i64
    %161 = arith.cmpi ult, %159, %c1_i64_48 : i64
    %c91_i8_49 = arith.constant 91 : i8
    cf.cond_br %161, ^bb1(%c91_i8_49 : i8), ^bb31
  ^bb37:  // pred: ^bb27
    %162 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %163 = llvm.load %162 : !llvm.ptr -> i64
    %c3_i64_50 = arith.constant 3 : i64
    %164 = arith.cmpi uge, %163, %c3_i64_50 : i64
    %c80_i8_51 = arith.constant 80 : i8
    cf.cond_br %164, ^bb38, ^bb1(%c80_i8_51 : i8)
  ^bb38:  // pred: ^bb37
    %165 = arith.subi %163, %c3_i64_50 : i64
    llvm.store %165, %162 : i64, !llvm.ptr
    cf.br ^bb36
  ^bb39:  // pred: ^bb40
    %166 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %167 = llvm.load %166 : !llvm.ptr -> !llvm.ptr
    %168 = llvm.getelementptr %167[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %169 = llvm.load %168 : !llvm.ptr -> i256
    llvm.store %168, %166 : !llvm.ptr, !llvm.ptr
    cf.br ^bb45
  ^bb40:  // pred: ^bb42
    %170 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_52 = arith.constant 1024 : i64
    %171 = llvm.load %170 : !llvm.ptr -> i64
    %c-1_i64_53 = arith.constant -1 : i64
    %172 = arith.addi %171, %c-1_i64_53 : i64
    llvm.store %172, %170 : i64, !llvm.ptr
    %c1_i64_54 = arith.constant 1 : i64
    %173 = arith.cmpi ult, %171, %c1_i64_54 : i64
    %c91_i8_55 = arith.constant 91 : i8
    cf.cond_br %173, ^bb1(%c91_i8_55 : i8), ^bb39
  ^bb41:  // pred: ^bb35
    %174 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %175 = llvm.load %174 : !llvm.ptr -> i64
    %c2_i64_56 = arith.constant 2 : i64
    %176 = arith.cmpi uge, %175, %c2_i64_56 : i64
    %c80_i8_57 = arith.constant 80 : i8
    cf.cond_br %176, ^bb42, ^bb1(%c80_i8_57 : i8)
  ^bb42:  // pred: ^bb41
    %177 = arith.subi %175, %c2_i64_56 : i64
    llvm.store %177, %174 : i64, !llvm.ptr
    cf.br ^bb40
  ^bb43:  // pred: ^bb44
    %178 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    %179 = llvm.load %178 : !llvm.ptr -> i64
    %180 = arith.extui %179 : i64 to i256
    %181 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %182 = llvm.load %181 : !llvm.ptr -> !llvm.ptr
    llvm.store %180, %182 : i256, !llvm.ptr
    %183 = llvm.getelementptr %182[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %183, %181 : !llvm.ptr, !llvm.ptr
    cf.br ^bb47
  ^bb44:  // pred: ^bb46
    %184 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_58 = arith.constant 1024 : i64
    %185 = llvm.load %184 : !llvm.ptr -> i64
    %c1_i64_59 = arith.constant 1 : i64
    %186 = arith.addi %185, %c1_i64_59 : i64
    llvm.store %186, %184 : i64, !llvm.ptr
    %187 = arith.cmpi ult, %c1024_i64_58, %186 : i64
    %c92_i8_60 = arith.constant 92 : i8
    cf.cond_br %187, ^bb1(%c92_i8_60 : i8), ^bb43
  ^bb45:  // pred: ^bb39
    %188 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %189 = llvm.load %188 : !llvm.ptr -> i64
    %c2_i64_61 = arith.constant 2 : i64
    %190 = arith.cmpi uge, %189, %c2_i64_61 : i64
    %c80_i8_62 = arith.constant 80 : i8
    cf.cond_br %190, ^bb46, ^bb1(%c80_i8_62 : i8)
  ^bb46:  // pred: ^bb45
    %191 = arith.subi %189, %c2_i64_61 : i64
    llvm.store %191, %188 : i64, !llvm.ptr
    cf.br ^bb44
  ^bb47:  // pred: ^bb43
    %c0_i64_63 = arith.constant 0 : i64
    %c1_i8 = arith.constant 1 : i8
    %192 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %193 = llvm.load %192 : !llvm.ptr -> i64
    %194 = call @dora_fn_write_result(%arg0, %c0_i64_63, %c0_i64_63, %193, %c1_i8) : (!llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
    return %c1_i8 : i8
  }
}
