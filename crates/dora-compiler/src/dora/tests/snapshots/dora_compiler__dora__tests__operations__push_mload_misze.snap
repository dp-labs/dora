---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  llvm.mlir.global internal @dora_stack_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_stack_length() {addr_space = 0 : i32} : i32
  llvm.mlir.global internal @dora_memory_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_memory_size() {addr_space = 0 : i32} : i32
  llvm.mlir.global internal @dora_calldata_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_calldata_size() {addr_space = 0 : i32} : i32
  llvm.mlir.global internal @dora_gas_counter() {addr_space = 0 : i32} : i64
  llvm.mlir.global external @dora_ctx_is_static() {addr_space = 0 : i32} : !llvm.ptr
  func.func private @dora_debug_print(i32)
  func.func private @dora_write_result(!llvm.ptr, i32, i32, i64, i8)
  func.func private @dora_keccak256_hasher(!llvm.ptr, i32, i32, !llvm.ptr)
  func.func private @dora_get_calldata_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_get_calldata_size(!llvm.ptr) -> i32
  func.func private @dora_get_chainid(!llvm.ptr) -> i64
  func.func private @dora_store_in_callvalue_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_caller_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_get_gaslimit(!llvm.ptr) -> i64
  func.func private @dora_extend_memory(!llvm.ptr, i32) -> !llvm.ptr
  func.func private @dora_copy_code_to_memory(!llvm.ptr, i32, i32, i32)
  func.func private @dora_read_storage(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_write_storage(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> i64
  func.func private @dora_append_log(!llvm.ptr, i32, i32)
  func.func private @dora_append_log_with_one_topic(!llvm.ptr, i32, i32, !llvm.ptr)
  func.func private @dora_append_log_with_two_topics(!llvm.ptr, i32, i32, !llvm.ptr, !llvm.ptr)
  func.func private @dora_append_log_with_three_topics(!llvm.ptr, i32, i32, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_append_log_with_four_topics(!llvm.ptr, i32, i32, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_get_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_get_coinbase_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_get_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_get_codesize_from_address(!llvm.ptr, !llvm.ptr) -> i64
  func.func private @dora_get_address_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_get_prevrandao(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_call(!llvm.ptr, i64, !llvm.ptr, !llvm.ptr, i32, i32, i32, i32, i64, !llvm.ptr, i8) -> i8
  func.func private @dora_store_in_balance(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_copy_ext_code_to_memory(!llvm.ptr, !llvm.ptr, i32, i32, i32)
  func.func private @dora_get_blob_hash_at_index(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_get_block_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_get_code_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_create(!llvm.ptr, i32, i32, !llvm.ptr, !llvm.ptr) -> i8
  func.func private @dora_create2(!llvm.ptr, i32, i32, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
  func.func private @dora_get_return_data_size(!llvm.ptr) -> i32
  func.func private @dora_copy_return_data_into_memory(!llvm.ptr, i32, i32, i32)
  func.func private @dora_selfdestruct(!llvm.ptr, !llvm.ptr) -> i64
  func.func private @dora_transient_storage_read(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_transient_storage_write(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func public @main(%arg0: !llvm.ptr, %arg1: i64) -> i8 attributes {llvm.emit_c_interface} {
    %c1024_i256 = arith.constant 1024 : i256
    %0 = llvm.alloca %c1024_i256 x i256 : (i256) -> !llvm.ptr
    %1 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    llvm.store %0, %1 : !llvm.ptr, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %2 = llvm.mlir.addressof @dora_stack_length : !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c0_i32_0 = arith.constant 0 : i32
    %3 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    llvm.store %c0_i32_0, %3 : i32, !llvm.ptr
    %4 = call @dora_get_calldata_ptr(%arg0) : (!llvm.ptr) -> !llvm.ptr
    %5 = llvm.mlir.addressof @dora_calldata_ptr : !llvm.ptr
    llvm.store %4, %5 : !llvm.ptr, !llvm.ptr
    %6 = call @dora_get_calldata_size(%arg0) : (!llvm.ptr) -> i32
    %7 = llvm.mlir.addressof @dora_calldata_size : !llvm.ptr
    llvm.store %6, %7 : i32, !llvm.ptr
    %8 = llvm.mlir.addressof @dora_gas_counter : !llvm.ptr
    llvm.store %arg1, %8 : i64, !llvm.ptr
    %9 = llvm.mlir.addressof @dora_stack_length : !llvm.ptr
    %c1024_i32 = arith.constant 1024 : i32
    cf.br ^bb3
  ^bb1:  // pred: ^bb2
    %c0_i32_1 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %c3_i8 = arith.constant 3 : i8
    call @dora_write_result(%arg0, %c0_i32_1, %c0_i32_1, %c0_i64, %c3_i8) : (!llvm.ptr, i32, i32, i64, i8) -> ()
    return %c3_i8 : i8
  ^bb2(%10: i256):  // no predecessors
    cf.switch %10 : i256, [
      default: ^bb1
    ]
  ^bb3:  // pred: ^bb0
    %11 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    %12 = llvm.load %11 : !llvm.ptr -> i32
    %13 = arith.extui %12 : i32 to i256
    %14 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %15 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    llvm.store %13, %15 : i256, !llvm.ptr
    %16 = llvm.getelementptr %15[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %16, %14 : !llvm.ptr, !llvm.ptr
    cf.br ^bb4
  ^bb4:  // pred: ^bb3
    %c0_i256 = arith.constant 0 : i256
    %17 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %18 = llvm.load %17 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256, %18 : i256, !llvm.ptr
    %19 = llvm.getelementptr %18[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %19, %17 : !llvm.ptr, !llvm.ptr
    cf.br ^bb5
  ^bb5:  // pred: ^bb4
    %20 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %21 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %22 = llvm.getelementptr %21[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %23 = llvm.load %22 : !llvm.ptr -> i256
    llvm.store %22, %20 : !llvm.ptr, !llvm.ptr
    %24 = arith.trunci %23 : i256 to i32
    %c32_i32 = arith.constant 32 : i32
    %25 = arith.addi %24, %c32_i32 : i32
    %26 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    %27 = llvm.load %26 : !llvm.ptr -> i32
    %c31_i32 = arith.constant 31 : i32
    %c32_i32_2 = arith.constant 32 : i32
    %28 = arith.addi %25, %c31_i32 : i32
    %29 = arith.divui %28, %c32_i32_2 : i32
    %30 = arith.muli %29, %c32_i32_2 : i32
    %31 = arith.cmpi ult, %27, %30 : i32
    scf.if %31 {
      %83 = func.call @dora_extend_memory(%arg0, %30) : (!llvm.ptr, i32) -> !llvm.ptr
      llvm.store %30, %26 : i32, !llvm.ptr
      %84 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
      llvm.store %83, %84 : !llvm.ptr, !llvm.ptr
    } else {
    }
    %32 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
    %33 = llvm.load %32 : !llvm.ptr -> !llvm.ptr
    %34 = llvm.getelementptr %33[%24] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %35 = llvm.load %34 {alignment = 1 : i64} : !llvm.ptr -> i256
    %36 = llvm.intr.bswap(%35)  : (i256) -> i256
    %37 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %38 = llvm.load %37 : !llvm.ptr -> !llvm.ptr
    llvm.store %36, %38 : i256, !llvm.ptr
    %39 = llvm.getelementptr %38[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %39, %37 : !llvm.ptr, !llvm.ptr
    cf.br ^bb6
  ^bb6:  // pred: ^bb5
    %40 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %41 = llvm.load %40 : !llvm.ptr -> !llvm.ptr
    %42 = llvm.getelementptr %41[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %43 = llvm.load %42 : !llvm.ptr -> i256
    llvm.store %42, %40 : !llvm.ptr, !llvm.ptr
    cf.br ^bb7
  ^bb7:  // pred: ^bb6
    %44 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    %45 = llvm.load %44 : !llvm.ptr -> i32
    %46 = arith.extui %45 : i32 to i256
    %47 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %48 = llvm.load %47 : !llvm.ptr -> !llvm.ptr
    llvm.store %46, %48 : i256, !llvm.ptr
    %49 = llvm.getelementptr %48[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %49, %47 : !llvm.ptr, !llvm.ptr
    cf.br ^bb8
  ^bb8:  // pred: ^bb7
    %c39_i256 = arith.constant 39 : i256
    %50 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %51 = llvm.load %50 : !llvm.ptr -> !llvm.ptr
    llvm.store %c39_i256, %51 : i256, !llvm.ptr
    %52 = llvm.getelementptr %51[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %52, %50 : !llvm.ptr, !llvm.ptr
    cf.br ^bb9
  ^bb9:  // pred: ^bb8
    %53 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %54 = llvm.load %53 : !llvm.ptr -> !llvm.ptr
    %55 = llvm.getelementptr %54[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %56 = llvm.load %55 : !llvm.ptr -> i256
    llvm.store %55, %53 : !llvm.ptr, !llvm.ptr
    %57 = arith.trunci %56 : i256 to i32
    %c32_i32_3 = arith.constant 32 : i32
    %58 = arith.addi %57, %c32_i32_3 : i32
    %59 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    %60 = llvm.load %59 : !llvm.ptr -> i32
    %c31_i32_4 = arith.constant 31 : i32
    %c32_i32_5 = arith.constant 32 : i32
    %61 = arith.addi %58, %c31_i32_4 : i32
    %62 = arith.divui %61, %c32_i32_5 : i32
    %63 = arith.muli %62, %c32_i32_5 : i32
    %64 = arith.cmpi ult, %60, %63 : i32
    scf.if %64 {
      %83 = func.call @dora_extend_memory(%arg0, %63) : (!llvm.ptr, i32) -> !llvm.ptr
      llvm.store %63, %59 : i32, !llvm.ptr
      %84 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
      llvm.store %83, %84 : !llvm.ptr, !llvm.ptr
    } else {
    }
    %65 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
    %66 = llvm.load %65 : !llvm.ptr -> !llvm.ptr
    %67 = llvm.getelementptr %66[%57] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %68 = llvm.load %67 {alignment = 1 : i64} : !llvm.ptr -> i256
    %69 = llvm.intr.bswap(%68)  : (i256) -> i256
    %70 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %71 = llvm.load %70 : !llvm.ptr -> !llvm.ptr
    llvm.store %69, %71 : i256, !llvm.ptr
    %72 = llvm.getelementptr %71[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %72, %70 : !llvm.ptr, !llvm.ptr
    cf.br ^bb10
  ^bb10:  // pred: ^bb9
    %73 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %74 = llvm.load %73 : !llvm.ptr -> !llvm.ptr
    %75 = llvm.getelementptr %74[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %76 = llvm.load %75 : !llvm.ptr -> i256
    llvm.store %75, %73 : !llvm.ptr, !llvm.ptr
    cf.br ^bb11
  ^bb11:  // pred: ^bb10
    %77 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    %78 = llvm.load %77 : !llvm.ptr -> i32
    %79 = arith.extui %78 : i32 to i256
    %80 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %81 = llvm.load %80 : !llvm.ptr -> !llvm.ptr
    llvm.store %79, %81 : i256, !llvm.ptr
    %82 = llvm.getelementptr %81[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %82, %80 : !llvm.ptr, !llvm.ptr
    cf.br ^bb12
  ^bb12:  // pred: ^bb11
    %c0_i32_6 = arith.constant 0 : i32
    %c1_i8 = arith.constant 1 : i8
    call @dora_write_result(%arg0, %c0_i32_6, %c0_i32_6, %arg1, %c1_i8) : (!llvm.ptr, i32, i32, i64, i8) -> ()
    return %c1_i8 : i8
  }
}
