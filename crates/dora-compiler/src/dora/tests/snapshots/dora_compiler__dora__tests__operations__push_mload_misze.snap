---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  func.func private @dora_fn_nop()
  func.func private @dora_fn_tracing(!llvm.ptr, i8, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_fn_is_static(!llvm.ptr) -> i8
  func.func private @dora_fn_exp(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_chainid(!llvm.ptr) -> i64
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gaslimit_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_memory_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_memory_size(!llvm.ptr) -> i64
  func.func private @dora_fn_code_copy(!llvm.ptr, !llvm.ptr, i64, i64)
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_call(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_returndata_copy(!llvm.ptr, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_tload(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_tstore(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func public @main(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr) -> i8 attributes {llvm.emit_c_interface} {
    %c0_i64 = arith.constant 0 : i64
    %0 = llvm.alloca %c0_i64 x !llvm.ptr : (i64) -> !llvm.ptr
    llvm.store %arg2, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb5
  ^bb1(%1: i8):  // 29 preds: ^bb2, ^bb4, ^bb5, ^bb8, ^bb9, ^bb13, ^bb14, ^bb17, ^bb18, ^bb21, ^bb22, ^bb25, ^bb26, ^bb30, ^bb31, ^bb34, ^bb35, ^bb38, ^bb39, ^bb42, ^bb43, ^bb44, ^bb47, ^bb48, ^bb50, ^bb51, ^bb52, ^bb55, ^bb56
    %c0_i64_0 = arith.constant 0 : i64
    %2 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_0, %c0_i64_0, %2, %1) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %1 : i8
  ^bb2(%3: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %3 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3:  // pred: ^bb4
    %4 = call @dora_fn_memory_size(%arg0) : (!llvm.ptr) -> i64
    %5 = arith.extui %4 : i64 to i256
    %6 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %5, %6 : i256, !llvm.ptr
    %7 = llvm.getelementptr %6[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %7, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb9
  ^bb4:  // pred: ^bb6
    %c1024_i64 = arith.constant 1024 : i64
    %8 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %9 = arith.addi %8, %c1_i64 : i64
    llvm.store %9, %arg3 : i64, !llvm.ptr
    %10 = arith.cmpi ult, %c1024_i64, %9 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %10, ^bb1(%c92_i8 : i8), ^bb3
  ^bb5:  // pred: ^bb0
    %11 = llvm.load %arg1 : !llvm.ptr -> i64
    %c2_i64 = arith.constant 2 : i64
    call @dora_fn_nop() : () -> ()
    %12 = arith.cmpi uge, %11, %c2_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %12, ^bb6, ^bb1(%c80_i8 : i8)
  ^bb6:  // pred: ^bb5
    %13 = arith.subi %11, %c2_i64 : i64
    llvm.store %13, %arg1 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb7:  // pred: ^bb8
    %c0_i256 = arith.constant 0 : i256
    %14 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256, %14 : i256, !llvm.ptr
    %15 = llvm.getelementptr %14[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %15, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb14
  ^bb8:  // pred: ^bb10
    %c1024_i64_1 = arith.constant 1024 : i64
    %16 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_2 = arith.constant 1 : i64
    %17 = arith.addi %16, %c1_i64_2 : i64
    llvm.store %17, %arg3 : i64, !llvm.ptr
    %18 = arith.cmpi ult, %c1024_i64_1, %17 : i64
    %c92_i8_3 = arith.constant 92 : i8
    cf.cond_br %18, ^bb1(%c92_i8_3 : i8), ^bb7
  ^bb9:  // pred: ^bb3
    %19 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %20 = arith.cmpi uge, %19, %c3_i64 : i64
    %c80_i8_4 = arith.constant 80 : i8
    cf.cond_br %20, ^bb10, ^bb1(%c80_i8_4 : i8)
  ^bb10:  // pred: ^bb9
    %21 = arith.subi %19, %c3_i64 : i64
    llvm.store %21, %arg1 : i64, !llvm.ptr
    cf.br ^bb8
  ^bb11:  // pred: ^bb13
    %22 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %23 = llvm.getelementptr %22[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %24 = llvm.load %23 : !llvm.ptr -> i256
    llvm.store %23, %0 : !llvm.ptr, !llvm.ptr
    %c32_i64 = arith.constant 32 : i64
    %c0_i64_5 = arith.constant 0 : i64
    %25 = arith.cmpi ne, %c32_i64, %c0_i64_5 : i64
    cf.cond_br %25, ^bb42, ^bb12
  ^bb12:  // 2 preds: ^bb11, ^bb46
    %26 = arith.trunci %24 : i256 to i64
    %27 = call @dora_fn_memory_ptr(%arg0) : (!llvm.ptr) -> !llvm.ptr
    %28 = llvm.getelementptr %27[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %29 = llvm.load %28 {alignment = 1 : i64} : !llvm.ptr -> i256
    %30 = llvm.intr.bswap(%29)  : (i256) -> i256
    %31 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %30, %31 : i256, !llvm.ptr
    %32 = llvm.getelementptr %31[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %32, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb18
  ^bb13:  // pred: ^bb15
    %c1024_i64_6 = arith.constant 1024 : i64
    %33 = llvm.load %arg3 : !llvm.ptr -> i64
    %c0_i64_7 = arith.constant 0 : i64
    %34 = arith.addi %33, %c0_i64_7 : i64
    llvm.store %34, %arg3 : i64, !llvm.ptr
    %c1_i64_8 = arith.constant 1 : i64
    %35 = arith.cmpi ult, %33, %c1_i64_8 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %35, ^bb1(%c91_i8 : i8), ^bb11
  ^bb14:  // pred: ^bb7
    %36 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_9 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %37 = arith.cmpi uge, %36, %c3_i64_9 : i64
    %c80_i8_10 = arith.constant 80 : i8
    cf.cond_br %37, ^bb15, ^bb1(%c80_i8_10 : i8)
  ^bb15:  // pred: ^bb14
    %38 = arith.subi %36, %c3_i64_9 : i64
    llvm.store %38, %arg1 : i64, !llvm.ptr
    cf.br ^bb13
  ^bb16:  // pred: ^bb17
    %39 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %40 = llvm.getelementptr %39[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %41 = llvm.load %40 : !llvm.ptr -> i256
    llvm.store %40, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb22
  ^bb17:  // pred: ^bb19
    %c1024_i64_11 = arith.constant 1024 : i64
    %42 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-1_i64 = arith.constant -1 : i64
    %43 = arith.addi %42, %c-1_i64 : i64
    llvm.store %43, %arg3 : i64, !llvm.ptr
    %c1_i64_12 = arith.constant 1 : i64
    %44 = arith.cmpi ult, %42, %c1_i64_12 : i64
    %c91_i8_13 = arith.constant 91 : i8
    cf.cond_br %44, ^bb1(%c91_i8_13 : i8), ^bb16
  ^bb18:  // pred: ^bb12
    %45 = llvm.load %arg1 : !llvm.ptr -> i64
    %c2_i64_14 = arith.constant 2 : i64
    call @dora_fn_nop() : () -> ()
    %46 = arith.cmpi uge, %45, %c2_i64_14 : i64
    %c80_i8_15 = arith.constant 80 : i8
    cf.cond_br %46, ^bb19, ^bb1(%c80_i8_15 : i8)
  ^bb19:  // pred: ^bb18
    %47 = arith.subi %45, %c2_i64_14 : i64
    llvm.store %47, %arg1 : i64, !llvm.ptr
    cf.br ^bb17
  ^bb20:  // pred: ^bb21
    %48 = call @dora_fn_memory_size(%arg0) : (!llvm.ptr) -> i64
    %49 = arith.extui %48 : i64 to i256
    %50 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %49, %50 : i256, !llvm.ptr
    %51 = llvm.getelementptr %50[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %51, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb26
  ^bb21:  // pred: ^bb23
    %c1024_i64_16 = arith.constant 1024 : i64
    %52 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_17 = arith.constant 1 : i64
    %53 = arith.addi %52, %c1_i64_17 : i64
    llvm.store %53, %arg3 : i64, !llvm.ptr
    %54 = arith.cmpi ult, %c1024_i64_16, %53 : i64
    %c92_i8_18 = arith.constant 92 : i8
    cf.cond_br %54, ^bb1(%c92_i8_18 : i8), ^bb20
  ^bb22:  // pred: ^bb16
    %55 = llvm.load %arg1 : !llvm.ptr -> i64
    %c2_i64_19 = arith.constant 2 : i64
    call @dora_fn_nop() : () -> ()
    %56 = arith.cmpi uge, %55, %c2_i64_19 : i64
    %c80_i8_20 = arith.constant 80 : i8
    cf.cond_br %56, ^bb23, ^bb1(%c80_i8_20 : i8)
  ^bb23:  // pred: ^bb22
    %57 = arith.subi %55, %c2_i64_19 : i64
    llvm.store %57, %arg1 : i64, !llvm.ptr
    cf.br ^bb21
  ^bb24:  // pred: ^bb25
    %c39_i256 = arith.constant 39 : i256
    %58 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c39_i256, %58 : i256, !llvm.ptr
    %59 = llvm.getelementptr %58[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %59, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb31
  ^bb25:  // pred: ^bb27
    %c1024_i64_21 = arith.constant 1024 : i64
    %60 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_22 = arith.constant 1 : i64
    %61 = arith.addi %60, %c1_i64_22 : i64
    llvm.store %61, %arg3 : i64, !llvm.ptr
    %62 = arith.cmpi ult, %c1024_i64_21, %61 : i64
    %c92_i8_23 = arith.constant 92 : i8
    cf.cond_br %62, ^bb1(%c92_i8_23 : i8), ^bb24
  ^bb26:  // pred: ^bb20
    %63 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_24 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %64 = arith.cmpi uge, %63, %c3_i64_24 : i64
    %c80_i8_25 = arith.constant 80 : i8
    cf.cond_br %64, ^bb27, ^bb1(%c80_i8_25 : i8)
  ^bb27:  // pred: ^bb26
    %65 = arith.subi %63, %c3_i64_24 : i64
    llvm.store %65, %arg1 : i64, !llvm.ptr
    cf.br ^bb25
  ^bb28:  // pred: ^bb30
    %66 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %67 = llvm.getelementptr %66[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %68 = llvm.load %67 : !llvm.ptr -> i256
    llvm.store %67, %0 : !llvm.ptr, !llvm.ptr
    %c32_i64_26 = arith.constant 32 : i64
    %c0_i64_27 = arith.constant 0 : i64
    %69 = arith.cmpi ne, %c32_i64_26, %c0_i64_27 : i64
    cf.cond_br %69, ^bb50, ^bb29
  ^bb29:  // 2 preds: ^bb28, ^bb54
    %70 = arith.trunci %68 : i256 to i64
    %71 = call @dora_fn_memory_ptr(%arg0) : (!llvm.ptr) -> !llvm.ptr
    %72 = llvm.getelementptr %71[%70] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %73 = llvm.load %72 {alignment = 1 : i64} : !llvm.ptr -> i256
    %74 = llvm.intr.bswap(%73)  : (i256) -> i256
    %75 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %74, %75 : i256, !llvm.ptr
    %76 = llvm.getelementptr %75[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %76, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb35
  ^bb30:  // pred: ^bb32
    %c1024_i64_28 = arith.constant 1024 : i64
    %77 = llvm.load %arg3 : !llvm.ptr -> i64
    %c0_i64_29 = arith.constant 0 : i64
    %78 = arith.addi %77, %c0_i64_29 : i64
    llvm.store %78, %arg3 : i64, !llvm.ptr
    %c1_i64_30 = arith.constant 1 : i64
    %79 = arith.cmpi ult, %77, %c1_i64_30 : i64
    %c91_i8_31 = arith.constant 91 : i8
    cf.cond_br %79, ^bb1(%c91_i8_31 : i8), ^bb28
  ^bb31:  // pred: ^bb24
    %80 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_32 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %81 = arith.cmpi uge, %80, %c3_i64_32 : i64
    %c80_i8_33 = arith.constant 80 : i8
    cf.cond_br %81, ^bb32, ^bb1(%c80_i8_33 : i8)
  ^bb32:  // pred: ^bb31
    %82 = arith.subi %80, %c3_i64_32 : i64
    llvm.store %82, %arg1 : i64, !llvm.ptr
    cf.br ^bb30
  ^bb33:  // pred: ^bb34
    %83 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %84 = llvm.getelementptr %83[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %85 = llvm.load %84 : !llvm.ptr -> i256
    llvm.store %84, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb39
  ^bb34:  // pred: ^bb36
    %c1024_i64_34 = arith.constant 1024 : i64
    %86 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-1_i64_35 = arith.constant -1 : i64
    %87 = arith.addi %86, %c-1_i64_35 : i64
    llvm.store %87, %arg3 : i64, !llvm.ptr
    %c1_i64_36 = arith.constant 1 : i64
    %88 = arith.cmpi ult, %86, %c1_i64_36 : i64
    %c91_i8_37 = arith.constant 91 : i8
    cf.cond_br %88, ^bb1(%c91_i8_37 : i8), ^bb33
  ^bb35:  // pred: ^bb29
    %89 = llvm.load %arg1 : !llvm.ptr -> i64
    %c2_i64_38 = arith.constant 2 : i64
    call @dora_fn_nop() : () -> ()
    %90 = arith.cmpi uge, %89, %c2_i64_38 : i64
    %c80_i8_39 = arith.constant 80 : i8
    cf.cond_br %90, ^bb36, ^bb1(%c80_i8_39 : i8)
  ^bb36:  // pred: ^bb35
    %91 = arith.subi %89, %c2_i64_38 : i64
    llvm.store %91, %arg1 : i64, !llvm.ptr
    cf.br ^bb34
  ^bb37:  // pred: ^bb38
    %92 = call @dora_fn_memory_size(%arg0) : (!llvm.ptr) -> i64
    %93 = arith.extui %92 : i64 to i256
    %94 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %93, %94 : i256, !llvm.ptr
    %95 = llvm.getelementptr %94[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %95, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb41
  ^bb38:  // pred: ^bb40
    %c1024_i64_40 = arith.constant 1024 : i64
    %96 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_41 = arith.constant 1 : i64
    %97 = arith.addi %96, %c1_i64_41 : i64
    llvm.store %97, %arg3 : i64, !llvm.ptr
    %98 = arith.cmpi ult, %c1024_i64_40, %97 : i64
    %c92_i8_42 = arith.constant 92 : i8
    cf.cond_br %98, ^bb1(%c92_i8_42 : i8), ^bb37
  ^bb39:  // pred: ^bb33
    %99 = llvm.load %arg1 : !llvm.ptr -> i64
    %c2_i64_43 = arith.constant 2 : i64
    call @dora_fn_nop() : () -> ()
    %100 = arith.cmpi uge, %99, %c2_i64_43 : i64
    %c80_i8_44 = arith.constant 80 : i8
    cf.cond_br %100, ^bb40, ^bb1(%c80_i8_44 : i8)
  ^bb40:  // pred: ^bb39
    %101 = arith.subi %99, %c2_i64_43 : i64
    llvm.store %101, %arg1 : i64, !llvm.ptr
    cf.br ^bb38
  ^bb41:  // pred: ^bb37
    %c0_i64_45 = arith.constant 0 : i64
    %c1_i8 = arith.constant 1 : i8
    %102 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_45, %c0_i64_45, %102, %c1_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c1_i8 : i8
  ^bb42:  // pred: ^bb11
    %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256
    %103 = arith.cmpi sgt, %24, %c18446744073709551615_i256 : i256
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %103, ^bb1(%c84_i8 : i8), ^bb43
  ^bb43:  // pred: ^bb42
    %104 = arith.trunci %24 : i256 to i64
    %c0_i64_46 = arith.constant 0 : i64
    %105 = arith.cmpi slt, %104, %c0_i64_46 : i64
    %c84_i8_47 = arith.constant 84 : i8
    cf.cond_br %105, ^bb1(%c84_i8_47 : i8), ^bb44
  ^bb44:  // pred: ^bb43
    %106 = arith.addi %104, %c32_i64 : i64
    %c0_i64_48 = arith.constant 0 : i64
    %107 = arith.cmpi slt, %106, %c0_i64_48 : i64
    %c84_i8_49 = arith.constant 84 : i8
    cf.cond_br %107, ^bb1(%c84_i8_49 : i8), ^bb45
  ^bb45:  // pred: ^bb44
    %c31_i64 = arith.constant 31 : i64
    %c32_i64_50 = arith.constant 32 : i64
    %108 = arith.addi %106, %c31_i64 : i64
    %109 = arith.divui %108, %c32_i64_50 : i64
    %c32_i64_51 = arith.constant 32 : i64
    %110 = arith.muli %109, %c32_i64_51 : i64
    %111 = call @dora_fn_memory_size(%arg0) : (!llvm.ptr) -> i64
    %c31_i64_52 = arith.constant 31 : i64
    %c32_i64_53 = arith.constant 32 : i64
    %112 = arith.addi %111, %c31_i64_52 : i64
    %113 = arith.divui %112, %c32_i64_53 : i64
    %114 = arith.muli %113, %c32_i64_51 : i64
    %115 = arith.cmpi ult, %114, %110 : i64
    cf.cond_br %115, ^bb47, ^bb46
  ^bb46:  // 2 preds: ^bb45, ^bb49
    cf.br ^bb12
  ^bb47:  // pred: ^bb45
    %c3_i64_54 = arith.constant 3 : i64
    %c512_i64 = arith.constant 512 : i64
    %116 = arith.muli %113, %113 : i64
    %117 = arith.divui %116, %c512_i64 : i64
    %118 = arith.muli %113, %c3_i64_54 : i64
    %119 = arith.addi %117, %118 : i64
    %c3_i64_55 = arith.constant 3 : i64
    %c512_i64_56 = arith.constant 512 : i64
    %120 = arith.muli %109, %109 : i64
    %121 = arith.divui %120, %c512_i64_56 : i64
    %122 = arith.muli %109, %c3_i64_55 : i64
    %123 = arith.addi %121, %122 : i64
    %124 = arith.subi %123, %119 : i64
    %125 = llvm.load %arg1 : !llvm.ptr -> i64
    %126 = arith.cmpi ult, %125, %124 : i64
    scf.if %126 {
    } else {
      %159 = arith.subi %125, %124 : i64
      llvm.store %159, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_57 = arith.constant 80 : i8
    cf.cond_br %126, ^bb1(%c80_i8_57 : i8), ^bb48
  ^bb48:  // pred: ^bb47
    %127 = call @dora_fn_extend_memory(%arg0, %110) : (!llvm.ptr, i64) -> !llvm.ptr
    %128 = llvm.getelementptr %127[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %129 = llvm.load %128 : !llvm.ptr -> i8
    %c0_i8 = arith.constant 0 : i8
    %130 = arith.cmpi ne, %129, %c0_i8 : i8
    cf.cond_br %130, ^bb1(%129 : i8), ^bb49
  ^bb49:  // pred: ^bb48
    cf.br ^bb46
  ^bb50:  // pred: ^bb28
    %c18446744073709551615_i256_58 = arith.constant 18446744073709551615 : i256
    %131 = arith.cmpi sgt, %68, %c18446744073709551615_i256_58 : i256
    %c84_i8_59 = arith.constant 84 : i8
    cf.cond_br %131, ^bb1(%c84_i8_59 : i8), ^bb51
  ^bb51:  // pred: ^bb50
    %132 = arith.trunci %68 : i256 to i64
    %c0_i64_60 = arith.constant 0 : i64
    %133 = arith.cmpi slt, %132, %c0_i64_60 : i64
    %c84_i8_61 = arith.constant 84 : i8
    cf.cond_br %133, ^bb1(%c84_i8_61 : i8), ^bb52
  ^bb52:  // pred: ^bb51
    %134 = arith.addi %132, %c32_i64_26 : i64
    %c0_i64_62 = arith.constant 0 : i64
    %135 = arith.cmpi slt, %134, %c0_i64_62 : i64
    %c84_i8_63 = arith.constant 84 : i8
    cf.cond_br %135, ^bb1(%c84_i8_63 : i8), ^bb53
  ^bb53:  // pred: ^bb52
    %c31_i64_64 = arith.constant 31 : i64
    %c32_i64_65 = arith.constant 32 : i64
    %136 = arith.addi %134, %c31_i64_64 : i64
    %137 = arith.divui %136, %c32_i64_65 : i64
    %c32_i64_66 = arith.constant 32 : i64
    %138 = arith.muli %137, %c32_i64_66 : i64
    %139 = call @dora_fn_memory_size(%arg0) : (!llvm.ptr) -> i64
    %c31_i64_67 = arith.constant 31 : i64
    %c32_i64_68 = arith.constant 32 : i64
    %140 = arith.addi %139, %c31_i64_67 : i64
    %141 = arith.divui %140, %c32_i64_68 : i64
    %142 = arith.muli %141, %c32_i64_66 : i64
    %143 = arith.cmpi ult, %142, %138 : i64
    cf.cond_br %143, ^bb55, ^bb54
  ^bb54:  // 2 preds: ^bb53, ^bb57
    cf.br ^bb29
  ^bb55:  // pred: ^bb53
    %c3_i64_69 = arith.constant 3 : i64
    %c512_i64_70 = arith.constant 512 : i64
    %144 = arith.muli %141, %141 : i64
    %145 = arith.divui %144, %c512_i64_70 : i64
    %146 = arith.muli %141, %c3_i64_69 : i64
    %147 = arith.addi %145, %146 : i64
    %c3_i64_71 = arith.constant 3 : i64
    %c512_i64_72 = arith.constant 512 : i64
    %148 = arith.muli %137, %137 : i64
    %149 = arith.divui %148, %c512_i64_72 : i64
    %150 = arith.muli %137, %c3_i64_71 : i64
    %151 = arith.addi %149, %150 : i64
    %152 = arith.subi %151, %147 : i64
    %153 = llvm.load %arg1 : !llvm.ptr -> i64
    %154 = arith.cmpi ult, %153, %152 : i64
    scf.if %154 {
    } else {
      %159 = arith.subi %153, %152 : i64
      llvm.store %159, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_73 = arith.constant 80 : i8
    cf.cond_br %154, ^bb1(%c80_i8_73 : i8), ^bb56
  ^bb56:  // pred: ^bb55
    %155 = call @dora_fn_extend_memory(%arg0, %138) : (!llvm.ptr, i64) -> !llvm.ptr
    %156 = llvm.getelementptr %155[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %157 = llvm.load %156 : !llvm.ptr -> i8
    %c0_i8_74 = arith.constant 0 : i8
    %158 = arith.cmpi ne, %157, %c0_i8_74 : i8
    cf.cond_br %158, ^bb1(%157 : i8), ^bb57
  ^bb57:  // pred: ^bb56
    cf.br ^bb54
  }
}
