---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  llvm.mlir.global internal @dora_global_stack_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_stack_length() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_memory_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_memory_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_calldata_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_calldata_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_gas_counter() {addr_space = 0 : i32} : i64
  llvm.mlir.global external @dora_global_ctx_is_static() {addr_space = 0 : i32} : !llvm.ptr
  func.func private @dora_fn_debug_print(i32)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_chainid(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_gaslimit(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_code_copy(!llvm.ptr, i64, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_call(!llvm.ptr, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr, i8) -> !llvm.ptr
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, i64, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_return_data_size(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_return_data_copy(!llvm.ptr, i64, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_transient_storage_read(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_transient_storage_write(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func public @main(%arg0: !llvm.ptr, %arg1: i64) -> i8 attributes {llvm.emit_c_interface} {
    %c1024_i256 = arith.constant 1024 : i256
    %0 = llvm.alloca %c1024_i256 x i256 : (i256) -> !llvm.ptr
    %1 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    llvm.store %0, %1 : !llvm.ptr, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %2 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    llvm.store %c0_i64, %2 : i64, !llvm.ptr
    %c0_i64_0 = arith.constant 0 : i64
    %3 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %c0_i64_0, %3 : i64, !llvm.ptr
    %4 = call @dora_fn_calldata(%arg0) : (!llvm.ptr) -> !llvm.ptr
    %5 = llvm.mlir.addressof @dora_global_calldata_ptr : !llvm.ptr
    llvm.store %4, %5 : !llvm.ptr, !llvm.ptr
    %6 = call @dora_fn_calldata_size(%arg0) : (!llvm.ptr) -> i64
    %7 = llvm.mlir.addressof @dora_global_calldata_size : !llvm.ptr
    llvm.store %6, %7 : i64, !llvm.ptr
    %8 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    llvm.store %arg1, %8 : i64, !llvm.ptr
    %9 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64 = arith.constant 1024 : i64
    %10 = llvm.load %9 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %11 = arith.addi %10, %c1_i64 : i64
    llvm.store %11, %9 : i64, !llvm.ptr
    %12 = arith.cmpi ult, %c1024_i64, %11 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %12, ^bb1(%c92_i8 : i8), ^bb3
  ^bb1(%13: i8):  // 16 preds: ^bb0, ^bb2, ^bb3, ^bb4, ^bb5, ^bb6, ^bb7, ^bb8, ^bb9, ^bb10, ^bb11, ^bb12, ^bb13, ^bb14, ^bb15, ^bb16
    %c0_i64_1 = arith.constant 0 : i64
    %14 = call @dora_fn_write_result(%arg0, %c0_i64_1, %c0_i64_1, %c0_i64_1, %13) : (!llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
    return %13 : i8
  ^bb2(%15: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %15 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3:  // pred: ^bb0
    %16 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    %17 = llvm.load %16 : !llvm.ptr -> i64
    %18 = arith.extui %17 : i64 to i256
    %19 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %20 = llvm.load %19 : !llvm.ptr -> !llvm.ptr
    llvm.store %18, %20 : i256, !llvm.ptr
    %21 = llvm.getelementptr %20[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %21, %19 : !llvm.ptr, !llvm.ptr
    %22 = llvm.load %9 : !llvm.ptr -> i64
    %c1_i64_2 = arith.constant 1 : i64
    %23 = arith.addi %22, %c1_i64_2 : i64
    llvm.store %23, %9 : i64, !llvm.ptr
    %24 = arith.cmpi ult, %c1024_i64, %23 : i64
    %c92_i8_3 = arith.constant 92 : i8
    cf.cond_br %24, ^bb1(%c92_i8_3 : i8), ^bb4
  ^bb4:  // pred: ^bb3
    %c0_i256 = arith.constant 0 : i256
    %25 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %26 = llvm.load %25 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256, %26 : i256, !llvm.ptr
    %27 = llvm.getelementptr %26[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %27, %25 : !llvm.ptr, !llvm.ptr
    %28 = llvm.load %9 : !llvm.ptr -> i64
    %c0_i64_4 = arith.constant 0 : i64
    %29 = arith.addi %28, %c0_i64_4 : i64
    llvm.store %29, %9 : i64, !llvm.ptr
    %c1_i64_5 = arith.constant 1 : i64
    %30 = arith.cmpi ult, %28, %c1_i64_5 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %30, ^bb1(%c91_i8 : i8), ^bb5
  ^bb5:  // pred: ^bb4
    %31 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %32 = llvm.load %31 : !llvm.ptr -> !llvm.ptr
    %33 = llvm.getelementptr %32[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %34 = llvm.load %33 : !llvm.ptr -> i256
    llvm.store %33, %31 : !llvm.ptr, !llvm.ptr
    %35 = arith.trunci %34 : i256 to i64
    %c0_i64_6 = arith.constant 0 : i64
    %36 = arith.cmpi slt, %35, %c0_i64_6 : i64
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %36, ^bb1(%c84_i8 : i8), ^bb6
  ^bb6:  // pred: ^bb5
    %c32_i64 = arith.constant 32 : i64
    %37 = arith.addi %35, %c32_i64 : i64
    %c0_i64_7 = arith.constant 0 : i64
    %38 = arith.cmpi slt, %37, %c0_i64_7 : i64
    %c84_i8_8 = arith.constant 84 : i8
    cf.cond_br %38, ^bb1(%c84_i8_8 : i8), ^bb7
  ^bb7:  // pred: ^bb6
    %c31_i64 = arith.constant 31 : i64
    %c32_i64_9 = arith.constant 32 : i64
    %39 = arith.addi %37, %c31_i64 : i64
    %40 = arith.divui %39, %c32_i64_9 : i64
    %41 = arith.muli %40, %c32_i64_9 : i64
    %42 = call @dora_fn_extend_memory(%arg0, %41) : (!llvm.ptr, i64) -> !llvm.ptr
    %43 = llvm.getelementptr %42[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %44 = llvm.load %43 : !llvm.ptr -> !llvm.ptr
    %45 = llvm.getelementptr %42[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %46 = llvm.load %45 : !llvm.ptr -> i8
    %c0_i8 = arith.constant 0 : i8
    %47 = arith.cmpi ne, %46, %c0_i8 : i8
    cf.cond_br %47, ^bb1(%46 : i8), ^bb8
  ^bb8:  // pred: ^bb7
    %48 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    llvm.store %44, %48 : !llvm.ptr, !llvm.ptr
    %49 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %41, %49 : i64, !llvm.ptr
    %50 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    %51 = llvm.load %50 : !llvm.ptr -> !llvm.ptr
    %52 = llvm.getelementptr %51[%35] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %53 = llvm.load %52 {alignment = 1 : i64} : !llvm.ptr -> i256
    %54 = llvm.intr.bswap(%53)  : (i256) -> i256
    %55 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %56 = llvm.load %55 : !llvm.ptr -> !llvm.ptr
    llvm.store %54, %56 : i256, !llvm.ptr
    %57 = llvm.getelementptr %56[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %57, %55 : !llvm.ptr, !llvm.ptr
    %58 = llvm.load %9 : !llvm.ptr -> i64
    %c-1_i64 = arith.constant -1 : i64
    %59 = arith.addi %58, %c-1_i64 : i64
    llvm.store %59, %9 : i64, !llvm.ptr
    %c1_i64_10 = arith.constant 1 : i64
    %60 = arith.cmpi ult, %58, %c1_i64_10 : i64
    %c91_i8_11 = arith.constant 91 : i8
    cf.cond_br %60, ^bb1(%c91_i8_11 : i8), ^bb9
  ^bb9:  // pred: ^bb8
    %61 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %62 = llvm.load %61 : !llvm.ptr -> !llvm.ptr
    %63 = llvm.getelementptr %62[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %64 = llvm.load %63 : !llvm.ptr -> i256
    llvm.store %63, %61 : !llvm.ptr, !llvm.ptr
    %65 = llvm.load %9 : !llvm.ptr -> i64
    %c1_i64_12 = arith.constant 1 : i64
    %66 = arith.addi %65, %c1_i64_12 : i64
    llvm.store %66, %9 : i64, !llvm.ptr
    %67 = arith.cmpi ult, %c1024_i64, %66 : i64
    %c92_i8_13 = arith.constant 92 : i8
    cf.cond_br %67, ^bb1(%c92_i8_13 : i8), ^bb10
  ^bb10:  // pred: ^bb9
    %68 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    %69 = llvm.load %68 : !llvm.ptr -> i64
    %70 = arith.extui %69 : i64 to i256
    %71 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %72 = llvm.load %71 : !llvm.ptr -> !llvm.ptr
    llvm.store %70, %72 : i256, !llvm.ptr
    %73 = llvm.getelementptr %72[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %73, %71 : !llvm.ptr, !llvm.ptr
    %74 = llvm.load %9 : !llvm.ptr -> i64
    %c1_i64_14 = arith.constant 1 : i64
    %75 = arith.addi %74, %c1_i64_14 : i64
    llvm.store %75, %9 : i64, !llvm.ptr
    %76 = arith.cmpi ult, %c1024_i64, %75 : i64
    %c92_i8_15 = arith.constant 92 : i8
    cf.cond_br %76, ^bb1(%c92_i8_15 : i8), ^bb11
  ^bb11:  // pred: ^bb10
    %c39_i256 = arith.constant 39 : i256
    %77 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %78 = llvm.load %77 : !llvm.ptr -> !llvm.ptr
    llvm.store %c39_i256, %78 : i256, !llvm.ptr
    %79 = llvm.getelementptr %78[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %79, %77 : !llvm.ptr, !llvm.ptr
    %80 = llvm.load %9 : !llvm.ptr -> i64
    %c0_i64_16 = arith.constant 0 : i64
    %81 = arith.addi %80, %c0_i64_16 : i64
    llvm.store %81, %9 : i64, !llvm.ptr
    %c1_i64_17 = arith.constant 1 : i64
    %82 = arith.cmpi ult, %80, %c1_i64_17 : i64
    %c91_i8_18 = arith.constant 91 : i8
    cf.cond_br %82, ^bb1(%c91_i8_18 : i8), ^bb12
  ^bb12:  // pred: ^bb11
    %83 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %84 = llvm.load %83 : !llvm.ptr -> !llvm.ptr
    %85 = llvm.getelementptr %84[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %86 = llvm.load %85 : !llvm.ptr -> i256
    llvm.store %85, %83 : !llvm.ptr, !llvm.ptr
    %87 = arith.trunci %86 : i256 to i64
    %c0_i64_19 = arith.constant 0 : i64
    %88 = arith.cmpi slt, %87, %c0_i64_19 : i64
    %c84_i8_20 = arith.constant 84 : i8
    cf.cond_br %88, ^bb1(%c84_i8_20 : i8), ^bb13
  ^bb13:  // pred: ^bb12
    %c32_i64_21 = arith.constant 32 : i64
    %89 = arith.addi %87, %c32_i64_21 : i64
    %c0_i64_22 = arith.constant 0 : i64
    %90 = arith.cmpi slt, %89, %c0_i64_22 : i64
    %c84_i8_23 = arith.constant 84 : i8
    cf.cond_br %90, ^bb1(%c84_i8_23 : i8), ^bb14
  ^bb14:  // pred: ^bb13
    %c31_i64_24 = arith.constant 31 : i64
    %c32_i64_25 = arith.constant 32 : i64
    %91 = arith.addi %89, %c31_i64_24 : i64
    %92 = arith.divui %91, %c32_i64_25 : i64
    %93 = arith.muli %92, %c32_i64_25 : i64
    %94 = call @dora_fn_extend_memory(%arg0, %93) : (!llvm.ptr, i64) -> !llvm.ptr
    %95 = llvm.getelementptr %94[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %96 = llvm.load %95 : !llvm.ptr -> !llvm.ptr
    %97 = llvm.getelementptr %94[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %98 = llvm.load %97 : !llvm.ptr -> i8
    %c0_i8_26 = arith.constant 0 : i8
    %99 = arith.cmpi ne, %98, %c0_i8_26 : i8
    cf.cond_br %99, ^bb1(%98 : i8), ^bb15
  ^bb15:  // pred: ^bb14
    %100 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    llvm.store %96, %100 : !llvm.ptr, !llvm.ptr
    %101 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %93, %101 : i64, !llvm.ptr
    %102 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    %103 = llvm.load %102 : !llvm.ptr -> !llvm.ptr
    %104 = llvm.getelementptr %103[%87] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %105 = llvm.load %104 {alignment = 1 : i64} : !llvm.ptr -> i256
    %106 = llvm.intr.bswap(%105)  : (i256) -> i256
    %107 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %108 = llvm.load %107 : !llvm.ptr -> !llvm.ptr
    llvm.store %106, %108 : i256, !llvm.ptr
    %109 = llvm.getelementptr %108[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %109, %107 : !llvm.ptr, !llvm.ptr
    %110 = llvm.load %9 : !llvm.ptr -> i64
    %c-1_i64_27 = arith.constant -1 : i64
    %111 = arith.addi %110, %c-1_i64_27 : i64
    llvm.store %111, %9 : i64, !llvm.ptr
    %c1_i64_28 = arith.constant 1 : i64
    %112 = arith.cmpi ult, %110, %c1_i64_28 : i64
    %c91_i8_29 = arith.constant 91 : i8
    cf.cond_br %112, ^bb1(%c91_i8_29 : i8), ^bb16
  ^bb16:  // pred: ^bb15
    %113 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %114 = llvm.load %113 : !llvm.ptr -> !llvm.ptr
    %115 = llvm.getelementptr %114[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %116 = llvm.load %115 : !llvm.ptr -> i256
    llvm.store %115, %113 : !llvm.ptr, !llvm.ptr
    %117 = llvm.load %9 : !llvm.ptr -> i64
    %c1_i64_30 = arith.constant 1 : i64
    %118 = arith.addi %117, %c1_i64_30 : i64
    llvm.store %118, %9 : i64, !llvm.ptr
    %119 = arith.cmpi ult, %c1024_i64, %118 : i64
    %c92_i8_31 = arith.constant 92 : i8
    cf.cond_br %119, ^bb1(%c92_i8_31 : i8), ^bb17
  ^bb17:  // pred: ^bb16
    %120 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    %121 = llvm.load %120 : !llvm.ptr -> i64
    %122 = arith.extui %121 : i64 to i256
    %123 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %124 = llvm.load %123 : !llvm.ptr -> !llvm.ptr
    llvm.store %122, %124 : i256, !llvm.ptr
    %125 = llvm.getelementptr %124[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %125, %123 : !llvm.ptr, !llvm.ptr
    cf.br ^bb18
  ^bb18:  // pred: ^bb17
    %c0_i64_32 = arith.constant 0 : i64
    %c1_i8 = arith.constant 1 : i8
    %126 = call @dora_fn_write_result(%arg0, %c0_i64_32, %c0_i64_32, %arg1, %c1_i8) : (!llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
    return %c1_i8 : i8
  }
}
