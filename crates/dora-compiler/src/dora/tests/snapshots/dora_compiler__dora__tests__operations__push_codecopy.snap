---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  func.func private @dora_fn_nop()
  func.func private @dora_fn_tracing(!llvm.ptr, i8, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_fn_is_static(!llvm.ptr) -> i8
  func.func private @dora_fn_exp(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_chainid(!llvm.ptr) -> i64
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gaslimit_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_memory_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_memory_size(!llvm.ptr) -> i64
  func.func private @dora_fn_code_copy(!llvm.ptr, !llvm.ptr, i64, i64)
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_call(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_returndata_copy(!llvm.ptr, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_tload(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_tstore(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func public @main(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr) -> i8 attributes {llvm.emit_c_interface} {
    %c0_i64 = arith.constant 0 : i64
    %0 = llvm.alloca %c0_i64 x !llvm.ptr : (i64) -> !llvm.ptr
    llvm.store %arg2, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb5
  ^bb1(%1: i8):  // 25 preds: ^bb2, ^bb4, ^bb5, ^bb8, ^bb9, ^bb12, ^bb13, ^bb16, ^bb17, ^bb20, ^bb21, ^bb24, ^bb25, ^bb28, ^bb29, ^bb31, ^bb32, ^bb35, ^bb36, ^bb39, ^bb40, ^bb41, ^bb42, ^bb45, ^bb46
    %c0_i64_0 = arith.constant 0 : i64
    %2 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_0, %c0_i64_0, %2, %1) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %1 : i8
  ^bb2(%3: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %3 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3:  // pred: ^bb4
    %c1329227995784915872903807060280344575_i256 = arith.constant 1329227995784915872903807060280344575 : i256
    %4 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c1329227995784915872903807060280344575_i256, %4 : i256, !llvm.ptr
    %5 = llvm.getelementptr %4[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %5, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb9
  ^bb4:  // pred: ^bb6
    %c1024_i64 = arith.constant 1024 : i64
    %6 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %7 = arith.addi %6, %c1_i64 : i64
    llvm.store %7, %arg3 : i64, !llvm.ptr
    %8 = arith.cmpi ult, %c1024_i64, %7 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %8, ^bb1(%c92_i8 : i8), ^bb3
  ^bb5:  // pred: ^bb0
    %9 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %10 = arith.cmpi uge, %9, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %10, ^bb6, ^bb1(%c80_i8 : i8)
  ^bb6:  // pred: ^bb5
    %11 = arith.subi %9, %c3_i64 : i64
    llvm.store %11, %arg1 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb7:  // pred: ^bb8
    %c0_i256 = arith.constant 0 : i256
    %12 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256, %12 : i256, !llvm.ptr
    %13 = llvm.getelementptr %12[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %13, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb13
  ^bb8:  // pred: ^bb10
    %c1024_i64_1 = arith.constant 1024 : i64
    %14 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_2 = arith.constant 1 : i64
    %15 = arith.addi %14, %c1_i64_2 : i64
    llvm.store %15, %arg3 : i64, !llvm.ptr
    %16 = arith.cmpi ult, %c1024_i64_1, %15 : i64
    %c92_i8_3 = arith.constant 92 : i8
    cf.cond_br %16, ^bb1(%c92_i8_3 : i8), ^bb7
  ^bb9:  // pred: ^bb3
    %17 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_4 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %18 = arith.cmpi uge, %17, %c3_i64_4 : i64
    %c80_i8_5 = arith.constant 80 : i8
    cf.cond_br %18, ^bb10, ^bb1(%c80_i8_5 : i8)
  ^bb10:  // pred: ^bb9
    %19 = arith.subi %17, %c3_i64_4 : i64
    llvm.store %19, %arg1 : i64, !llvm.ptr
    cf.br ^bb8
  ^bb11:  // pred: ^bb12
    %20 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %21 = llvm.getelementptr %20[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %22 = llvm.load %21 : !llvm.ptr -> i256
    llvm.store %21, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb17
  ^bb12:  // pred: ^bb14
    %c1024_i64_6 = arith.constant 1024 : i64
    %23 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-1_i64 = arith.constant -1 : i64
    %24 = arith.addi %23, %c-1_i64 : i64
    llvm.store %24, %arg3 : i64, !llvm.ptr
    %c1_i64_7 = arith.constant 1 : i64
    %25 = arith.cmpi ult, %23, %c1_i64_7 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %25, ^bb1(%c91_i8 : i8), ^bb11
  ^bb13:  // pred: ^bb7
    %26 = llvm.load %arg1 : !llvm.ptr -> i64
    %c2_i64 = arith.constant 2 : i64
    call @dora_fn_nop() : () -> ()
    %27 = arith.cmpi uge, %26, %c2_i64 : i64
    %c80_i8_8 = arith.constant 80 : i8
    cf.cond_br %27, ^bb14, ^bb1(%c80_i8_8 : i8)
  ^bb14:  // pred: ^bb13
    %28 = arith.subi %26, %c2_i64 : i64
    llvm.store %28, %arg1 : i64, !llvm.ptr
    cf.br ^bb12
  ^bb15:  // pred: ^bb16
    %29 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %30 = llvm.getelementptr %29[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %31 = llvm.load %30 : !llvm.ptr -> i256
    llvm.store %30, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb21
  ^bb16:  // pred: ^bb18
    %c1024_i64_9 = arith.constant 1024 : i64
    %32 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-1_i64_10 = arith.constant -1 : i64
    %33 = arith.addi %32, %c-1_i64_10 : i64
    llvm.store %33, %arg3 : i64, !llvm.ptr
    %c1_i64_11 = arith.constant 1 : i64
    %34 = arith.cmpi ult, %32, %c1_i64_11 : i64
    %c91_i8_12 = arith.constant 91 : i8
    cf.cond_br %34, ^bb1(%c91_i8_12 : i8), ^bb15
  ^bb17:  // pred: ^bb11
    %35 = llvm.load %arg1 : !llvm.ptr -> i64
    %c2_i64_13 = arith.constant 2 : i64
    call @dora_fn_nop() : () -> ()
    %36 = arith.cmpi uge, %35, %c2_i64_13 : i64
    %c80_i8_14 = arith.constant 80 : i8
    cf.cond_br %36, ^bb18, ^bb1(%c80_i8_14 : i8)
  ^bb18:  // pred: ^bb17
    %37 = arith.subi %35, %c2_i64_13 : i64
    llvm.store %37, %arg1 : i64, !llvm.ptr
    cf.br ^bb16
  ^bb19:  // pred: ^bb20
    %c32_i256 = arith.constant 32 : i256
    %38 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c32_i256, %38 : i256, !llvm.ptr
    %39 = llvm.getelementptr %38[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %39, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb25
  ^bb20:  // pred: ^bb22
    %c1024_i64_15 = arith.constant 1024 : i64
    %40 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_16 = arith.constant 1 : i64
    %41 = arith.addi %40, %c1_i64_16 : i64
    llvm.store %41, %arg3 : i64, !llvm.ptr
    %42 = arith.cmpi ult, %c1024_i64_15, %41 : i64
    %c92_i8_17 = arith.constant 92 : i8
    cf.cond_br %42, ^bb1(%c92_i8_17 : i8), ^bb19
  ^bb21:  // pred: ^bb15
    %43 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_18 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %44 = arith.cmpi uge, %43, %c3_i64_18 : i64
    %c80_i8_19 = arith.constant 80 : i8
    cf.cond_br %44, ^bb22, ^bb1(%c80_i8_19 : i8)
  ^bb22:  // pred: ^bb21
    %45 = arith.subi %43, %c3_i64_18 : i64
    llvm.store %45, %arg1 : i64, !llvm.ptr
    cf.br ^bb20
  ^bb23:  // pred: ^bb24
    %c0_i256_20 = arith.constant 0 : i256
    %46 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_20, %46 : i256, !llvm.ptr
    %47 = llvm.getelementptr %46[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %47, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb29
  ^bb24:  // pred: ^bb26
    %c1024_i64_21 = arith.constant 1024 : i64
    %48 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_22 = arith.constant 1 : i64
    %49 = arith.addi %48, %c1_i64_22 : i64
    llvm.store %49, %arg3 : i64, !llvm.ptr
    %50 = arith.cmpi ult, %c1024_i64_21, %49 : i64
    %c92_i8_23 = arith.constant 92 : i8
    cf.cond_br %50, ^bb1(%c92_i8_23 : i8), ^bb23
  ^bb25:  // pred: ^bb19
    %51 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_24 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %52 = arith.cmpi uge, %51, %c3_i64_24 : i64
    %c80_i8_25 = arith.constant 80 : i8
    cf.cond_br %52, ^bb26, ^bb1(%c80_i8_25 : i8)
  ^bb26:  // pred: ^bb25
    %53 = arith.subi %51, %c3_i64_24 : i64
    llvm.store %53, %arg1 : i64, !llvm.ptr
    cf.br ^bb24
  ^bb27:  // pred: ^bb28
    %c0_i256_26 = arith.constant 0 : i256
    %54 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_26, %54 : i256, !llvm.ptr
    %55 = llvm.getelementptr %54[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %55, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb36
  ^bb28:  // pred: ^bb30
    %c1024_i64_27 = arith.constant 1024 : i64
    %56 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_28 = arith.constant 1 : i64
    %57 = arith.addi %56, %c1_i64_28 : i64
    llvm.store %57, %arg3 : i64, !llvm.ptr
    %58 = arith.cmpi ult, %c1024_i64_27, %57 : i64
    %c92_i8_29 = arith.constant 92 : i8
    cf.cond_br %58, ^bb1(%c92_i8_29 : i8), ^bb27
  ^bb29:  // pred: ^bb23
    %59 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_30 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %60 = arith.cmpi uge, %59, %c3_i64_30 : i64
    %c80_i8_31 = arith.constant 80 : i8
    cf.cond_br %60, ^bb30, ^bb1(%c80_i8_31 : i8)
  ^bb30:  // pred: ^bb29
    %61 = arith.subi %59, %c3_i64_30 : i64
    llvm.store %61, %arg1 : i64, !llvm.ptr
    cf.br ^bb28
  ^bb31:  // pred: ^bb35
    %62 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %63 = llvm.getelementptr %62[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %64 = llvm.load %63 : !llvm.ptr -> i256
    llvm.store %63, %0 : !llvm.ptr, !llvm.ptr
    %65 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %66 = llvm.getelementptr %65[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %67 = llvm.load %66 : !llvm.ptr -> i256
    llvm.store %66, %0 : !llvm.ptr, !llvm.ptr
    %68 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %69 = llvm.getelementptr %68[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %70 = llvm.load %69 : !llvm.ptr -> i256
    llvm.store %69, %0 : !llvm.ptr, !llvm.ptr
    %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256
    %71 = arith.cmpi sgt, %70, %c18446744073709551615_i256 : i256
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %71, ^bb1(%c84_i8 : i8), ^bb32
  ^bb32:  // pred: ^bb31
    %72 = arith.trunci %70 : i256 to i64
    %c0_i64_32 = arith.constant 0 : i64
    %73 = arith.cmpi slt, %72, %c0_i64_32 : i64
    %c84_i8_33 = arith.constant 84 : i8
    cf.cond_br %73, ^bb1(%c84_i8_33 : i8), ^bb33
  ^bb33:  // pred: ^bb32
    %c0_i64_34 = arith.constant 0 : i64
    %74 = arith.cmpi ne, %72, %c0_i64_34 : i64
    cf.cond_br %74, ^bb39, ^bb34
  ^bb34:  // 2 preds: ^bb33, ^bb44
    %75 = arith.trunci %64 : i256 to i64
    %c1_i256 = arith.constant 1 : i256
    %76 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %67, %76 {alignment = 1 : i64} : i256, !llvm.ptr
    call @dora_fn_code_copy(%arg0, %76, %72, %75) : (!llvm.ptr, !llvm.ptr, i64, i64) -> ()
    cf.br ^bb38
  ^bb35:  // pred: ^bb37
    %c1024_i64_35 = arith.constant 1024 : i64
    %77 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-3_i64 = arith.constant -3 : i64
    %78 = arith.addi %77, %c-3_i64 : i64
    llvm.store %78, %arg3 : i64, !llvm.ptr
    %c3_i64_36 = arith.constant 3 : i64
    %79 = arith.cmpi ult, %77, %c3_i64_36 : i64
    %c91_i8_37 = arith.constant 91 : i8
    cf.cond_br %79, ^bb1(%c91_i8_37 : i8), ^bb31
  ^bb36:  // pred: ^bb27
    %80 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_38 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %81 = arith.cmpi uge, %80, %c3_i64_38 : i64
    %c80_i8_39 = arith.constant 80 : i8
    cf.cond_br %81, ^bb37, ^bb1(%c80_i8_39 : i8)
  ^bb37:  // pred: ^bb36
    %82 = arith.subi %80, %c3_i64_38 : i64
    llvm.store %82, %arg1 : i64, !llvm.ptr
    cf.br ^bb35
  ^bb38:  // pred: ^bb34
    %c0_i64_40 = arith.constant 0 : i64
    %c2_i8 = arith.constant 2 : i8
    %83 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_40, %c0_i64_40, %83, %c2_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c2_i8 : i8
  ^bb39:  // pred: ^bb33
    %c31_i64 = arith.constant 31 : i64
    %c32_i64 = arith.constant 32 : i64
    %84 = arith.addi %72, %c31_i64 : i64
    %85 = arith.divui %84, %c32_i64 : i64
    %c3_i64_41 = arith.constant 3 : i64
    %86 = arith.muli %85, %c3_i64_41 : i64
    %87 = llvm.load %arg1 : !llvm.ptr -> i64
    %88 = arith.cmpi ult, %87, %86 : i64
    scf.if %88 {
    } else {
      %117 = arith.subi %87, %86 : i64
      llvm.store %117, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_42 = arith.constant 80 : i8
    cf.cond_br %88, ^bb1(%c80_i8_42 : i8), ^bb40
  ^bb40:  // pred: ^bb39
    %c18446744073709551615_i256_43 = arith.constant 18446744073709551615 : i256
    %89 = arith.cmpi sgt, %64, %c18446744073709551615_i256_43 : i256
    %c84_i8_44 = arith.constant 84 : i8
    cf.cond_br %89, ^bb1(%c84_i8_44 : i8), ^bb41
  ^bb41:  // pred: ^bb40
    %90 = arith.trunci %64 : i256 to i64
    %c0_i64_45 = arith.constant 0 : i64
    %91 = arith.cmpi slt, %90, %c0_i64_45 : i64
    %c84_i8_46 = arith.constant 84 : i8
    cf.cond_br %91, ^bb1(%c84_i8_46 : i8), ^bb42
  ^bb42:  // pred: ^bb41
    %92 = arith.addi %90, %72 : i64
    %c0_i64_47 = arith.constant 0 : i64
    %93 = arith.cmpi slt, %92, %c0_i64_47 : i64
    %c84_i8_48 = arith.constant 84 : i8
    cf.cond_br %93, ^bb1(%c84_i8_48 : i8), ^bb43
  ^bb43:  // pred: ^bb42
    %c31_i64_49 = arith.constant 31 : i64
    %c32_i64_50 = arith.constant 32 : i64
    %94 = arith.addi %92, %c31_i64_49 : i64
    %95 = arith.divui %94, %c32_i64_50 : i64
    %c32_i64_51 = arith.constant 32 : i64
    %96 = arith.muli %95, %c32_i64_51 : i64
    %97 = call @dora_fn_memory_size(%arg0) : (!llvm.ptr) -> i64
    %c31_i64_52 = arith.constant 31 : i64
    %c32_i64_53 = arith.constant 32 : i64
    %98 = arith.addi %97, %c31_i64_52 : i64
    %99 = arith.divui %98, %c32_i64_53 : i64
    %100 = arith.muli %99, %c32_i64_51 : i64
    %101 = arith.cmpi ult, %100, %96 : i64
    cf.cond_br %101, ^bb45, ^bb44
  ^bb44:  // 2 preds: ^bb43, ^bb47
    cf.br ^bb34
  ^bb45:  // pred: ^bb43
    %c3_i64_54 = arith.constant 3 : i64
    %c512_i64 = arith.constant 512 : i64
    %102 = arith.muli %99, %99 : i64
    %103 = arith.divui %102, %c512_i64 : i64
    %104 = arith.muli %99, %c3_i64_54 : i64
    %105 = arith.addi %103, %104 : i64
    %c3_i64_55 = arith.constant 3 : i64
    %c512_i64_56 = arith.constant 512 : i64
    %106 = arith.muli %95, %95 : i64
    %107 = arith.divui %106, %c512_i64_56 : i64
    %108 = arith.muli %95, %c3_i64_55 : i64
    %109 = arith.addi %107, %108 : i64
    %110 = arith.subi %109, %105 : i64
    %111 = llvm.load %arg1 : !llvm.ptr -> i64
    %112 = arith.cmpi ult, %111, %110 : i64
    scf.if %112 {
    } else {
      %117 = arith.subi %111, %110 : i64
      llvm.store %117, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_57 = arith.constant 80 : i8
    cf.cond_br %112, ^bb1(%c80_i8_57 : i8), ^bb46
  ^bb46:  // pred: ^bb45
    %113 = call @dora_fn_extend_memory(%arg0, %96) : (!llvm.ptr, i64) -> !llvm.ptr
    %114 = llvm.getelementptr %113[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %115 = llvm.load %114 : !llvm.ptr -> i8
    %c0_i8 = arith.constant 0 : i8
    %116 = arith.cmpi ne, %115, %c0_i8 : i8
    cf.cond_br %116, ^bb1(%115 : i8), ^bb47
  ^bb47:  // pred: ^bb46
    cf.br ^bb44
  }
}
