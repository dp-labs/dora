---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  func.func private @dora_fn_nop()
  func.func private @dora_fn_tracing(!llvm.ptr, i8, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_fn_is_static(!llvm.ptr) -> i8
  func.func private @dora_fn_exp(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_chainid(!llvm.ptr) -> i64
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gaslimit_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_memory_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_memory_size(!llvm.ptr) -> i64
  func.func private @dora_fn_code_copy(!llvm.ptr, !llvm.ptr, i64, i64)
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_call(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_returndata_copy(!llvm.ptr, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_tload(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_tstore(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func public @main(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr) -> i8 attributes {llvm.emit_c_interface} {
    cf.br ^bb5
  ^bb1(%0: i8):  // 25 preds: ^bb2, ^bb4, ^bb5, ^bb8, ^bb9, ^bb12, ^bb13, ^bb16, ^bb17, ^bb20, ^bb21, ^bb24, ^bb25, ^bb28, ^bb29, ^bb31, ^bb32, ^bb35, ^bb36, ^bb39, ^bb40, ^bb41, ^bb42, ^bb45, ^bb46
    %c0_i64 = arith.constant 0 : i64
    %1 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64, %c0_i64, %1, %0) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %0 : i8
  ^bb2(%2: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %2 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3:  // pred: ^bb4
    %c1329227995784915872903807060280344575_i256 = arith.constant 1329227995784915872903807060280344575 : i256
    %3 = llvm.load %arg3 : !llvm.ptr -> i64
    %4 = llvm.getelementptr %arg2[%3] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64 = arith.constant 1 : i64
    %5 = arith.addi %3, %c1_i64 : i64
    llvm.store %5, %arg3 : i64, !llvm.ptr
    llvm.store %c1329227995784915872903807060280344575_i256, %4 : i256, !llvm.ptr
    cf.br ^bb9
  ^bb4:  // pred: ^bb6
    %c1024_i64 = arith.constant 1024 : i64
    %6 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_0 = arith.constant 1 : i64
    %7 = arith.addi %6, %c1_i64_0 : i64
    %8 = arith.cmpi ult, %c1024_i64, %7 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %8, ^bb1(%c92_i8 : i8), ^bb3
  ^bb5:  // pred: ^bb0
    %9 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %10 = arith.cmpi uge, %9, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %10, ^bb6, ^bb1(%c80_i8 : i8)
  ^bb6:  // pred: ^bb5
    %11 = arith.subi %9, %c3_i64 : i64
    llvm.store %11, %arg1 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb7:  // pred: ^bb8
    %c0_i256 = arith.constant 0 : i256
    %12 = llvm.load %arg3 : !llvm.ptr -> i64
    %13 = llvm.getelementptr %arg2[%12] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_1 = arith.constant 1 : i64
    %14 = arith.addi %12, %c1_i64_1 : i64
    llvm.store %14, %arg3 : i64, !llvm.ptr
    llvm.store %c0_i256, %13 : i256, !llvm.ptr
    cf.br ^bb13
  ^bb8:  // pred: ^bb10
    %c1024_i64_2 = arith.constant 1024 : i64
    %15 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_3 = arith.constant 1 : i64
    %16 = arith.addi %15, %c1_i64_3 : i64
    %17 = arith.cmpi ult, %c1024_i64_2, %16 : i64
    %c92_i8_4 = arith.constant 92 : i8
    cf.cond_br %17, ^bb1(%c92_i8_4 : i8), ^bb7
  ^bb9:  // pred: ^bb3
    %18 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_5 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %19 = arith.cmpi uge, %18, %c3_i64_5 : i64
    %c80_i8_6 = arith.constant 80 : i8
    cf.cond_br %19, ^bb10, ^bb1(%c80_i8_6 : i8)
  ^bb10:  // pred: ^bb9
    %20 = arith.subi %18, %c3_i64_5 : i64
    llvm.store %20, %arg1 : i64, !llvm.ptr
    cf.br ^bb8
  ^bb11:  // pred: ^bb12
    %21 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_7 = arith.constant 1 : i64
    %22 = arith.subi %21, %c1_i64_7 : i64
    %23 = llvm.getelementptr %arg2[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %22, %arg3 : i64, !llvm.ptr
    %24 = llvm.load %23 : !llvm.ptr -> i256
    cf.br ^bb17
  ^bb12:  // pred: ^bb14
    %c1024_i64_8 = arith.constant 1024 : i64
    %25 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-1_i64 = arith.constant -1 : i64
    %26 = arith.addi %25, %c-1_i64 : i64
    %c1_i64_9 = arith.constant 1 : i64
    %27 = arith.cmpi ult, %25, %c1_i64_9 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %27, ^bb1(%c91_i8 : i8), ^bb11
  ^bb13:  // pred: ^bb7
    %28 = llvm.load %arg1 : !llvm.ptr -> i64
    %c2_i64 = arith.constant 2 : i64
    call @dora_fn_nop() : () -> ()
    %29 = arith.cmpi uge, %28, %c2_i64 : i64
    %c80_i8_10 = arith.constant 80 : i8
    cf.cond_br %29, ^bb14, ^bb1(%c80_i8_10 : i8)
  ^bb14:  // pred: ^bb13
    %30 = arith.subi %28, %c2_i64 : i64
    llvm.store %30, %arg1 : i64, !llvm.ptr
    cf.br ^bb12
  ^bb15:  // pred: ^bb16
    %31 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_11 = arith.constant 1 : i64
    %32 = arith.subi %31, %c1_i64_11 : i64
    %33 = llvm.getelementptr %arg2[%32] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %32, %arg3 : i64, !llvm.ptr
    %34 = llvm.load %33 : !llvm.ptr -> i256
    cf.br ^bb21
  ^bb16:  // pred: ^bb18
    %c1024_i64_12 = arith.constant 1024 : i64
    %35 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-1_i64_13 = arith.constant -1 : i64
    %36 = arith.addi %35, %c-1_i64_13 : i64
    %c1_i64_14 = arith.constant 1 : i64
    %37 = arith.cmpi ult, %35, %c1_i64_14 : i64
    %c91_i8_15 = arith.constant 91 : i8
    cf.cond_br %37, ^bb1(%c91_i8_15 : i8), ^bb15
  ^bb17:  // pred: ^bb11
    %38 = llvm.load %arg1 : !llvm.ptr -> i64
    %c2_i64_16 = arith.constant 2 : i64
    call @dora_fn_nop() : () -> ()
    %39 = arith.cmpi uge, %38, %c2_i64_16 : i64
    %c80_i8_17 = arith.constant 80 : i8
    cf.cond_br %39, ^bb18, ^bb1(%c80_i8_17 : i8)
  ^bb18:  // pred: ^bb17
    %40 = arith.subi %38, %c2_i64_16 : i64
    llvm.store %40, %arg1 : i64, !llvm.ptr
    cf.br ^bb16
  ^bb19:  // pred: ^bb20
    %c32_i256 = arith.constant 32 : i256
    %41 = llvm.load %arg3 : !llvm.ptr -> i64
    %42 = llvm.getelementptr %arg2[%41] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_18 = arith.constant 1 : i64
    %43 = arith.addi %41, %c1_i64_18 : i64
    llvm.store %43, %arg3 : i64, !llvm.ptr
    llvm.store %c32_i256, %42 : i256, !llvm.ptr
    cf.br ^bb25
  ^bb20:  // pred: ^bb22
    %c1024_i64_19 = arith.constant 1024 : i64
    %44 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_20 = arith.constant 1 : i64
    %45 = arith.addi %44, %c1_i64_20 : i64
    %46 = arith.cmpi ult, %c1024_i64_19, %45 : i64
    %c92_i8_21 = arith.constant 92 : i8
    cf.cond_br %46, ^bb1(%c92_i8_21 : i8), ^bb19
  ^bb21:  // pred: ^bb15
    %47 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_22 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %48 = arith.cmpi uge, %47, %c3_i64_22 : i64
    %c80_i8_23 = arith.constant 80 : i8
    cf.cond_br %48, ^bb22, ^bb1(%c80_i8_23 : i8)
  ^bb22:  // pred: ^bb21
    %49 = arith.subi %47, %c3_i64_22 : i64
    llvm.store %49, %arg1 : i64, !llvm.ptr
    cf.br ^bb20
  ^bb23:  // pred: ^bb24
    %c0_i256_24 = arith.constant 0 : i256
    %50 = llvm.load %arg3 : !llvm.ptr -> i64
    %51 = llvm.getelementptr %arg2[%50] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_25 = arith.constant 1 : i64
    %52 = arith.addi %50, %c1_i64_25 : i64
    llvm.store %52, %arg3 : i64, !llvm.ptr
    llvm.store %c0_i256_24, %51 : i256, !llvm.ptr
    cf.br ^bb29
  ^bb24:  // pred: ^bb26
    %c1024_i64_26 = arith.constant 1024 : i64
    %53 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_27 = arith.constant 1 : i64
    %54 = arith.addi %53, %c1_i64_27 : i64
    %55 = arith.cmpi ult, %c1024_i64_26, %54 : i64
    %c92_i8_28 = arith.constant 92 : i8
    cf.cond_br %55, ^bb1(%c92_i8_28 : i8), ^bb23
  ^bb25:  // pred: ^bb19
    %56 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_29 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %57 = arith.cmpi uge, %56, %c3_i64_29 : i64
    %c80_i8_30 = arith.constant 80 : i8
    cf.cond_br %57, ^bb26, ^bb1(%c80_i8_30 : i8)
  ^bb26:  // pred: ^bb25
    %58 = arith.subi %56, %c3_i64_29 : i64
    llvm.store %58, %arg1 : i64, !llvm.ptr
    cf.br ^bb24
  ^bb27:  // pred: ^bb28
    %c0_i256_31 = arith.constant 0 : i256
    %59 = llvm.load %arg3 : !llvm.ptr -> i64
    %60 = llvm.getelementptr %arg2[%59] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_32 = arith.constant 1 : i64
    %61 = arith.addi %59, %c1_i64_32 : i64
    llvm.store %61, %arg3 : i64, !llvm.ptr
    llvm.store %c0_i256_31, %60 : i256, !llvm.ptr
    cf.br ^bb36
  ^bb28:  // pred: ^bb30
    %c1024_i64_33 = arith.constant 1024 : i64
    %62 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_34 = arith.constant 1 : i64
    %63 = arith.addi %62, %c1_i64_34 : i64
    %64 = arith.cmpi ult, %c1024_i64_33, %63 : i64
    %c92_i8_35 = arith.constant 92 : i8
    cf.cond_br %64, ^bb1(%c92_i8_35 : i8), ^bb27
  ^bb29:  // pred: ^bb23
    %65 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_36 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %66 = arith.cmpi uge, %65, %c3_i64_36 : i64
    %c80_i8_37 = arith.constant 80 : i8
    cf.cond_br %66, ^bb30, ^bb1(%c80_i8_37 : i8)
  ^bb30:  // pred: ^bb29
    %67 = arith.subi %65, %c3_i64_36 : i64
    llvm.store %67, %arg1 : i64, !llvm.ptr
    cf.br ^bb28
  ^bb31:  // pred: ^bb35
    %68 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_38 = arith.constant 1 : i64
    %69 = arith.subi %68, %c1_i64_38 : i64
    %70 = llvm.getelementptr %arg2[%69] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %69, %arg3 : i64, !llvm.ptr
    %71 = llvm.load %70 : !llvm.ptr -> i256
    %72 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_39 = arith.constant 1 : i64
    %73 = arith.subi %72, %c1_i64_39 : i64
    %74 = llvm.getelementptr %arg2[%73] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %73, %arg3 : i64, !llvm.ptr
    %75 = llvm.load %74 : !llvm.ptr -> i256
    %76 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_40 = arith.constant 1 : i64
    %77 = arith.subi %76, %c1_i64_40 : i64
    %78 = llvm.getelementptr %arg2[%77] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %77, %arg3 : i64, !llvm.ptr
    %79 = llvm.load %78 : !llvm.ptr -> i256
    %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256
    %80 = arith.cmpi sgt, %79, %c18446744073709551615_i256 : i256
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %80, ^bb1(%c84_i8 : i8), ^bb32
  ^bb32:  // pred: ^bb31
    %81 = arith.trunci %79 : i256 to i64
    %c0_i64_41 = arith.constant 0 : i64
    %82 = arith.cmpi slt, %81, %c0_i64_41 : i64
    %c84_i8_42 = arith.constant 84 : i8
    cf.cond_br %82, ^bb1(%c84_i8_42 : i8), ^bb33
  ^bb33:  // pred: ^bb32
    %c0_i64_43 = arith.constant 0 : i64
    %83 = arith.cmpi ne, %81, %c0_i64_43 : i64
    cf.cond_br %83, ^bb39, ^bb34
  ^bb34:  // 2 preds: ^bb33, ^bb44
    %84 = arith.trunci %71 : i256 to i64
    %c1_i256 = arith.constant 1 : i256
    %85 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %75, %85 {alignment = 1 : i64} : i256, !llvm.ptr
    call @dora_fn_code_copy(%arg0, %85, %81, %84) : (!llvm.ptr, !llvm.ptr, i64, i64) -> ()
    cf.br ^bb38
  ^bb35:  // pred: ^bb37
    %c1024_i64_44 = arith.constant 1024 : i64
    %86 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-3_i64 = arith.constant -3 : i64
    %87 = arith.addi %86, %c-3_i64 : i64
    %c3_i64_45 = arith.constant 3 : i64
    %88 = arith.cmpi ult, %86, %c3_i64_45 : i64
    %c91_i8_46 = arith.constant 91 : i8
    cf.cond_br %88, ^bb1(%c91_i8_46 : i8), ^bb31
  ^bb36:  // pred: ^bb27
    %89 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_47 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %90 = arith.cmpi uge, %89, %c3_i64_47 : i64
    %c80_i8_48 = arith.constant 80 : i8
    cf.cond_br %90, ^bb37, ^bb1(%c80_i8_48 : i8)
  ^bb37:  // pred: ^bb36
    %91 = arith.subi %89, %c3_i64_47 : i64
    llvm.store %91, %arg1 : i64, !llvm.ptr
    cf.br ^bb35
  ^bb38:  // pred: ^bb34
    %c0_i64_49 = arith.constant 0 : i64
    %c1_i8 = arith.constant 1 : i8
    %92 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_49, %c0_i64_49, %92, %c1_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c1_i8 : i8
  ^bb39:  // pred: ^bb33
    %c31_i64 = arith.constant 31 : i64
    %c32_i64 = arith.constant 32 : i64
    %93 = arith.addi %81, %c31_i64 : i64
    %94 = arith.divui %93, %c32_i64 : i64
    %c3_i64_50 = arith.constant 3 : i64
    %95 = arith.muli %94, %c3_i64_50 : i64
    %96 = llvm.load %arg1 : !llvm.ptr -> i64
    %97 = arith.cmpi ult, %96, %95 : i64
    scf.if %97 {
    } else {
      %126 = arith.subi %96, %95 : i64
      llvm.store %126, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_51 = arith.constant 80 : i8
    cf.cond_br %97, ^bb1(%c80_i8_51 : i8), ^bb40
  ^bb40:  // pred: ^bb39
    %c18446744073709551615_i256_52 = arith.constant 18446744073709551615 : i256
    %98 = arith.cmpi sgt, %71, %c18446744073709551615_i256_52 : i256
    %c84_i8_53 = arith.constant 84 : i8
    cf.cond_br %98, ^bb1(%c84_i8_53 : i8), ^bb41
  ^bb41:  // pred: ^bb40
    %99 = arith.trunci %71 : i256 to i64
    %c0_i64_54 = arith.constant 0 : i64
    %100 = arith.cmpi slt, %99, %c0_i64_54 : i64
    %c84_i8_55 = arith.constant 84 : i8
    cf.cond_br %100, ^bb1(%c84_i8_55 : i8), ^bb42
  ^bb42:  // pred: ^bb41
    %101 = arith.addi %99, %81 : i64
    %c0_i64_56 = arith.constant 0 : i64
    %102 = arith.cmpi slt, %101, %c0_i64_56 : i64
    %c84_i8_57 = arith.constant 84 : i8
    cf.cond_br %102, ^bb1(%c84_i8_57 : i8), ^bb43
  ^bb43:  // pred: ^bb42
    %c31_i64_58 = arith.constant 31 : i64
    %c32_i64_59 = arith.constant 32 : i64
    %103 = arith.addi %101, %c31_i64_58 : i64
    %104 = arith.divui %103, %c32_i64_59 : i64
    %c32_i64_60 = arith.constant 32 : i64
    %105 = arith.muli %104, %c32_i64_60 : i64
    %106 = call @dora_fn_memory_size(%arg0) : (!llvm.ptr) -> i64
    %c31_i64_61 = arith.constant 31 : i64
    %c32_i64_62 = arith.constant 32 : i64
    %107 = arith.addi %106, %c31_i64_61 : i64
    %108 = arith.divui %107, %c32_i64_62 : i64
    %109 = arith.muli %108, %c32_i64_60 : i64
    %110 = arith.cmpi ult, %109, %105 : i64
    cf.cond_br %110, ^bb45, ^bb44
  ^bb44:  // 2 preds: ^bb43, ^bb47
    cf.br ^bb34
  ^bb45:  // pred: ^bb43
    %c3_i64_63 = arith.constant 3 : i64
    %c512_i64 = arith.constant 512 : i64
    %111 = arith.muli %108, %108 : i64
    %112 = arith.divui %111, %c512_i64 : i64
    %113 = arith.muli %108, %c3_i64_63 : i64
    %114 = arith.addi %112, %113 : i64
    %c3_i64_64 = arith.constant 3 : i64
    %c512_i64_65 = arith.constant 512 : i64
    %115 = arith.muli %104, %104 : i64
    %116 = arith.divui %115, %c512_i64_65 : i64
    %117 = arith.muli %104, %c3_i64_64 : i64
    %118 = arith.addi %116, %117 : i64
    %119 = arith.subi %118, %114 : i64
    %120 = llvm.load %arg1 : !llvm.ptr -> i64
    %121 = arith.cmpi ult, %120, %119 : i64
    scf.if %121 {
    } else {
      %126 = arith.subi %120, %119 : i64
      llvm.store %126, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_66 = arith.constant 80 : i8
    cf.cond_br %121, ^bb1(%c80_i8_66 : i8), ^bb46
  ^bb46:  // pred: ^bb45
    %122 = call @dora_fn_extend_memory(%arg0, %105) : (!llvm.ptr, i64) -> !llvm.ptr
    %123 = llvm.getelementptr %122[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %124 = llvm.load %123 : !llvm.ptr -> i8
    %c0_i8 = arith.constant 0 : i8
    %125 = arith.cmpi ne, %124, %c0_i8 : i8
    cf.cond_br %125, ^bb1(%124 : i8), ^bb47
  ^bb47:  // pred: ^bb46
    cf.br ^bb44
  }
}
