---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  llvm.mlir.global internal @dora_global_stack_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_stack_length() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_memory_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_memory_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_calldata_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_calldata_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_gas_counter() {addr_space = 0 : i32} : i64
  llvm.mlir.global external @dora_global_ctx_is_static() {addr_space = 0 : i32} : !llvm.ptr
  func.func private @dora_fn_debug_print(i32)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_chainid(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_gaslimit(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_code_copy(!llvm.ptr, i64, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_call(!llvm.ptr, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr, i8) -> !llvm.ptr
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, i64, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_return_data_size(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_return_data_copy(!llvm.ptr, i64, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_transient_storage_read(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_transient_storage_write(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func public @main(%arg0: !llvm.ptr, %arg1: i64) -> i8 attributes {llvm.emit_c_interface} {
    %c1024_i256 = arith.constant 1024 : i256
    %0 = llvm.alloca %c1024_i256 x i256 : (i256) -> !llvm.ptr
    %1 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    llvm.store %0, %1 : !llvm.ptr, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %2 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    llvm.store %c0_i64, %2 : i64, !llvm.ptr
    %c0_i64_0 = arith.constant 0 : i64
    %3 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %c0_i64_0, %3 : i64, !llvm.ptr
    %4 = call @dora_fn_calldata(%arg0) : (!llvm.ptr) -> !llvm.ptr
    %5 = llvm.mlir.addressof @dora_global_calldata_ptr : !llvm.ptr
    llvm.store %4, %5 : !llvm.ptr, !llvm.ptr
    %6 = call @dora_fn_calldata_size(%arg0) : (!llvm.ptr) -> i64
    %7 = llvm.mlir.addressof @dora_global_calldata_size : !llvm.ptr
    llvm.store %6, %7 : i64, !llvm.ptr
    %8 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    llvm.store %arg1, %8 : i64, !llvm.ptr
    %9 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64 = arith.constant 1024 : i64
    %10 = llvm.load %9 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %11 = arith.addi %10, %c1_i64 : i64
    llvm.store %11, %9 : i64, !llvm.ptr
    %12 = arith.cmpi ult, %c1024_i64, %11 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %12, ^bb1(%c92_i8 : i8), ^bb3
  ^bb1(%13: i8):  // 14 preds: ^bb0, ^bb2, ^bb3, ^bb4, ^bb5, ^bb6, ^bb7, ^bb8, ^bb9, ^bb10, ^bb11, ^bb12, ^bb13, ^bb14
    %c0_i64_1 = arith.constant 0 : i64
    %14 = call @dora_fn_write_result(%arg0, %c0_i64_1, %c0_i64_1, %c0_i64_1, %13) : (!llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
    return %13 : i8
  ^bb2(%15: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %15 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3:  // pred: ^bb0
    %c1329227995784915872903807060280344575_i256 = arith.constant 1329227995784915872903807060280344575 : i256
    %16 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %17 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    llvm.store %c1329227995784915872903807060280344575_i256, %17 : i256, !llvm.ptr
    %18 = llvm.getelementptr %17[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %18, %16 : !llvm.ptr, !llvm.ptr
    %19 = llvm.load %9 : !llvm.ptr -> i64
    %c1_i64_2 = arith.constant 1 : i64
    %20 = arith.addi %19, %c1_i64_2 : i64
    llvm.store %20, %9 : i64, !llvm.ptr
    %21 = arith.cmpi ult, %c1024_i64, %20 : i64
    %c92_i8_3 = arith.constant 92 : i8
    cf.cond_br %21, ^bb1(%c92_i8_3 : i8), ^bb4
  ^bb4:  // pred: ^bb3
    %c0_i256 = arith.constant 0 : i256
    %22 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %23 = llvm.load %22 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256, %23 : i256, !llvm.ptr
    %24 = llvm.getelementptr %23[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %24, %22 : !llvm.ptr, !llvm.ptr
    %25 = llvm.load %9 : !llvm.ptr -> i64
    %c-1_i64 = arith.constant -1 : i64
    %26 = arith.addi %25, %c-1_i64 : i64
    llvm.store %26, %9 : i64, !llvm.ptr
    %c1_i64_4 = arith.constant 1 : i64
    %27 = arith.cmpi ult, %25, %c1_i64_4 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %27, ^bb1(%c91_i8 : i8), ^bb5
  ^bb5:  // pred: ^bb4
    %28 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %29 = llvm.load %28 : !llvm.ptr -> !llvm.ptr
    %30 = llvm.getelementptr %29[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %31 = llvm.load %30 : !llvm.ptr -> i256
    llvm.store %30, %28 : !llvm.ptr, !llvm.ptr
    %32 = llvm.load %9 : !llvm.ptr -> i64
    %c-1_i64_5 = arith.constant -1 : i64
    %33 = arith.addi %32, %c-1_i64_5 : i64
    llvm.store %33, %9 : i64, !llvm.ptr
    %c1_i64_6 = arith.constant 1 : i64
    %34 = arith.cmpi ult, %32, %c1_i64_6 : i64
    %c91_i8_7 = arith.constant 91 : i8
    cf.cond_br %34, ^bb1(%c91_i8_7 : i8), ^bb6
  ^bb6:  // pred: ^bb5
    %35 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %36 = llvm.load %35 : !llvm.ptr -> !llvm.ptr
    %37 = llvm.getelementptr %36[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %38 = llvm.load %37 : !llvm.ptr -> i256
    llvm.store %37, %35 : !llvm.ptr, !llvm.ptr
    %39 = llvm.load %9 : !llvm.ptr -> i64
    %c1_i64_8 = arith.constant 1 : i64
    %40 = arith.addi %39, %c1_i64_8 : i64
    llvm.store %40, %9 : i64, !llvm.ptr
    %41 = arith.cmpi ult, %c1024_i64, %40 : i64
    %c92_i8_9 = arith.constant 92 : i8
    cf.cond_br %41, ^bb1(%c92_i8_9 : i8), ^bb7
  ^bb7:  // pred: ^bb6
    %c32_i256 = arith.constant 32 : i256
    %42 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %43 = llvm.load %42 : !llvm.ptr -> !llvm.ptr
    llvm.store %c32_i256, %43 : i256, !llvm.ptr
    %44 = llvm.getelementptr %43[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %44, %42 : !llvm.ptr, !llvm.ptr
    %45 = llvm.load %9 : !llvm.ptr -> i64
    %c1_i64_10 = arith.constant 1 : i64
    %46 = arith.addi %45, %c1_i64_10 : i64
    llvm.store %46, %9 : i64, !llvm.ptr
    %47 = arith.cmpi ult, %c1024_i64, %46 : i64
    %c92_i8_11 = arith.constant 92 : i8
    cf.cond_br %47, ^bb1(%c92_i8_11 : i8), ^bb8
  ^bb8:  // pred: ^bb7
    %c0_i256_12 = arith.constant 0 : i256
    %48 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %49 = llvm.load %48 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_12, %49 : i256, !llvm.ptr
    %50 = llvm.getelementptr %49[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %50, %48 : !llvm.ptr, !llvm.ptr
    %51 = llvm.load %9 : !llvm.ptr -> i64
    %c1_i64_13 = arith.constant 1 : i64
    %52 = arith.addi %51, %c1_i64_13 : i64
    llvm.store %52, %9 : i64, !llvm.ptr
    %53 = arith.cmpi ult, %c1024_i64, %52 : i64
    %c92_i8_14 = arith.constant 92 : i8
    cf.cond_br %53, ^bb1(%c92_i8_14 : i8), ^bb9
  ^bb9:  // pred: ^bb8
    %c0_i256_15 = arith.constant 0 : i256
    %54 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %55 = llvm.load %54 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_15, %55 : i256, !llvm.ptr
    %56 = llvm.getelementptr %55[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %56, %54 : !llvm.ptr, !llvm.ptr
    %57 = llvm.load %9 : !llvm.ptr -> i64
    %c-3_i64 = arith.constant -3 : i64
    %58 = arith.addi %57, %c-3_i64 : i64
    llvm.store %58, %9 : i64, !llvm.ptr
    %c3_i64 = arith.constant 3 : i64
    %59 = arith.cmpi ult, %57, %c3_i64 : i64
    %c91_i8_16 = arith.constant 91 : i8
    cf.cond_br %59, ^bb1(%c91_i8_16 : i8), ^bb10
  ^bb10:  // pred: ^bb9
    %60 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %61 = llvm.load %60 : !llvm.ptr -> !llvm.ptr
    %62 = llvm.getelementptr %61[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %63 = llvm.load %62 : !llvm.ptr -> i256
    llvm.store %62, %60 : !llvm.ptr, !llvm.ptr
    %64 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %65 = llvm.load %64 : !llvm.ptr -> !llvm.ptr
    %66 = llvm.getelementptr %65[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %67 = llvm.load %66 : !llvm.ptr -> i256
    llvm.store %66, %64 : !llvm.ptr, !llvm.ptr
    %68 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %69 = llvm.load %68 : !llvm.ptr -> !llvm.ptr
    %70 = llvm.getelementptr %69[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %71 = llvm.load %70 : !llvm.ptr -> i256
    llvm.store %70, %68 : !llvm.ptr, !llvm.ptr
    %72 = arith.trunci %67 : i256 to i64
    %c0_i64_17 = arith.constant 0 : i64
    %73 = arith.cmpi slt, %72, %c0_i64_17 : i64
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %73, ^bb1(%c84_i8 : i8), ^bb11
  ^bb11:  // pred: ^bb10
    %74 = arith.trunci %63 : i256 to i64
    %c0_i64_18 = arith.constant 0 : i64
    %75 = arith.cmpi slt, %74, %c0_i64_18 : i64
    %c84_i8_19 = arith.constant 84 : i8
    cf.cond_br %75, ^bb1(%c84_i8_19 : i8), ^bb12
  ^bb12:  // pred: ^bb11
    %76 = arith.trunci %71 : i256 to i64
    %c0_i64_20 = arith.constant 0 : i64
    %77 = arith.cmpi slt, %76, %c0_i64_20 : i64
    %c84_i8_21 = arith.constant 84 : i8
    cf.cond_br %77, ^bb1(%c84_i8_21 : i8), ^bb13
  ^bb13:  // pred: ^bb12
    %78 = arith.addi %74, %76 : i64
    %c0_i64_22 = arith.constant 0 : i64
    %79 = arith.cmpi slt, %78, %c0_i64_22 : i64
    %c84_i8_23 = arith.constant 84 : i8
    cf.cond_br %79, ^bb1(%c84_i8_23 : i8), ^bb14
  ^bb14:  // pred: ^bb13
    %c31_i64 = arith.constant 31 : i64
    %c32_i64 = arith.constant 32 : i64
    %80 = arith.addi %78, %c31_i64 : i64
    %81 = arith.divui %80, %c32_i64 : i64
    %82 = arith.muli %81, %c32_i64 : i64
    %83 = call @dora_fn_extend_memory(%arg0, %82) : (!llvm.ptr, i64) -> !llvm.ptr
    %84 = llvm.getelementptr %83[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %85 = llvm.load %84 : !llvm.ptr -> !llvm.ptr
    %86 = llvm.getelementptr %83[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %87 = llvm.load %86 : !llvm.ptr -> i8
    %c0_i8 = arith.constant 0 : i8
    %88 = arith.cmpi ne, %87, %c0_i8 : i8
    cf.cond_br %88, ^bb1(%87 : i8), ^bb15
  ^bb15:  // pred: ^bb14
    %89 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    llvm.store %85, %89 : !llvm.ptr, !llvm.ptr
    %90 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %82, %90 : i64, !llvm.ptr
    %91 = call @dora_fn_code_copy(%arg0, %72, %76, %74) : (!llvm.ptr, i64, i64, i64) -> !llvm.ptr
    cf.br ^bb16
  ^bb16:  // pred: ^bb15
    %c0_i64_24 = arith.constant 0 : i64
    %c1_i8 = arith.constant 1 : i8
    %92 = call @dora_fn_write_result(%arg0, %c0_i64_24, %c0_i64_24, %arg1, %c1_i8) : (!llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
    return %c1_i8 : i8
  }
}
