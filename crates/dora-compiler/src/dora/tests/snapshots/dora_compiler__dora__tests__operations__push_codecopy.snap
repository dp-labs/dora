---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  llvm.mlir.global internal @dora_global_memory_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_memory_size() {addr_space = 0 : i32} : i64
  func.func private @dora_fn_nop()
  func.func private @dora_fn_tracing(!llvm.ptr, i8, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_fn_is_static(!llvm.ptr) -> i8
  func.func private @dora_fn_exp(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_chainid(!llvm.ptr) -> i64
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gaslimit_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_code_copy(!llvm.ptr, !llvm.ptr, i64, i64)
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_call(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_returndata_copy(!llvm.ptr, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_tload(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_tstore(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func public @main(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr) -> i8 attributes {llvm.emit_c_interface} {
    %c0_i64 = arith.constant 0 : i64
    %0 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %c0_i64, %0 : i64, !llvm.ptr
    cf.br ^bb5
  ^bb1(%1: i8):  // 25 preds: ^bb2, ^bb4, ^bb5, ^bb8, ^bb9, ^bb12, ^bb13, ^bb16, ^bb17, ^bb20, ^bb21, ^bb24, ^bb25, ^bb28, ^bb29, ^bb31, ^bb32, ^bb35, ^bb36, ^bb39, ^bb40, ^bb41, ^bb42, ^bb45, ^bb46
    %c0_i64_0 = arith.constant 0 : i64
    %2 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_0, %c0_i64_0, %2, %1) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %1 : i8
  ^bb2(%3: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %3 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3:  // pred: ^bb4
    %c1329227995784915872903807060280344575_i256 = arith.constant 1329227995784915872903807060280344575 : i256
    %4 = llvm.load %arg3 : !llvm.ptr -> i64
    %5 = llvm.getelementptr %arg2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64 = arith.constant 1 : i64
    %6 = arith.addi %4, %c1_i64 : i64
    llvm.store %6, %arg3 : i64, !llvm.ptr
    llvm.store %c1329227995784915872903807060280344575_i256, %5 : i256, !llvm.ptr
    cf.br ^bb9
  ^bb4:  // pred: ^bb6
    %c1024_i64 = arith.constant 1024 : i64
    %7 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_1 = arith.constant 1 : i64
    %8 = arith.addi %7, %c1_i64_1 : i64
    %9 = arith.cmpi ult, %c1024_i64, %8 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %9, ^bb1(%c92_i8 : i8), ^bb3
  ^bb5:  // pred: ^bb0
    %10 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %11 = arith.cmpi uge, %10, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %11, ^bb6, ^bb1(%c80_i8 : i8)
  ^bb6:  // pred: ^bb5
    %12 = arith.subi %10, %c3_i64 : i64
    llvm.store %12, %arg1 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb7:  // pred: ^bb8
    %c0_i256 = arith.constant 0 : i256
    %13 = llvm.load %arg3 : !llvm.ptr -> i64
    %14 = llvm.getelementptr %arg2[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_2 = arith.constant 1 : i64
    %15 = arith.addi %13, %c1_i64_2 : i64
    llvm.store %15, %arg3 : i64, !llvm.ptr
    llvm.store %c0_i256, %14 : i256, !llvm.ptr
    cf.br ^bb13
  ^bb8:  // pred: ^bb10
    %c1024_i64_3 = arith.constant 1024 : i64
    %16 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_4 = arith.constant 1 : i64
    %17 = arith.addi %16, %c1_i64_4 : i64
    %18 = arith.cmpi ult, %c1024_i64_3, %17 : i64
    %c92_i8_5 = arith.constant 92 : i8
    cf.cond_br %18, ^bb1(%c92_i8_5 : i8), ^bb7
  ^bb9:  // pred: ^bb3
    %19 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_6 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %20 = arith.cmpi uge, %19, %c3_i64_6 : i64
    %c80_i8_7 = arith.constant 80 : i8
    cf.cond_br %20, ^bb10, ^bb1(%c80_i8_7 : i8)
  ^bb10:  // pred: ^bb9
    %21 = arith.subi %19, %c3_i64_6 : i64
    llvm.store %21, %arg1 : i64, !llvm.ptr
    cf.br ^bb8
  ^bb11:  // pred: ^bb12
    %22 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_8 = arith.constant 1 : i64
    %23 = arith.subi %22, %c1_i64_8 : i64
    %24 = llvm.getelementptr %arg2[%23] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %23, %arg3 : i64, !llvm.ptr
    %25 = llvm.load %24 : !llvm.ptr -> i256
    cf.br ^bb17
  ^bb12:  // pred: ^bb14
    %c1024_i64_9 = arith.constant 1024 : i64
    %26 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-1_i64 = arith.constant -1 : i64
    %27 = arith.addi %26, %c-1_i64 : i64
    %c1_i64_10 = arith.constant 1 : i64
    %28 = arith.cmpi ult, %26, %c1_i64_10 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %28, ^bb1(%c91_i8 : i8), ^bb11
  ^bb13:  // pred: ^bb7
    %29 = llvm.load %arg1 : !llvm.ptr -> i64
    %c2_i64 = arith.constant 2 : i64
    call @dora_fn_nop() : () -> ()
    %30 = arith.cmpi uge, %29, %c2_i64 : i64
    %c80_i8_11 = arith.constant 80 : i8
    cf.cond_br %30, ^bb14, ^bb1(%c80_i8_11 : i8)
  ^bb14:  // pred: ^bb13
    %31 = arith.subi %29, %c2_i64 : i64
    llvm.store %31, %arg1 : i64, !llvm.ptr
    cf.br ^bb12
  ^bb15:  // pred: ^bb16
    %32 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_12 = arith.constant 1 : i64
    %33 = arith.subi %32, %c1_i64_12 : i64
    %34 = llvm.getelementptr %arg2[%33] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %33, %arg3 : i64, !llvm.ptr
    %35 = llvm.load %34 : !llvm.ptr -> i256
    cf.br ^bb21
  ^bb16:  // pred: ^bb18
    %c1024_i64_13 = arith.constant 1024 : i64
    %36 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-1_i64_14 = arith.constant -1 : i64
    %37 = arith.addi %36, %c-1_i64_14 : i64
    %c1_i64_15 = arith.constant 1 : i64
    %38 = arith.cmpi ult, %36, %c1_i64_15 : i64
    %c91_i8_16 = arith.constant 91 : i8
    cf.cond_br %38, ^bb1(%c91_i8_16 : i8), ^bb15
  ^bb17:  // pred: ^bb11
    %39 = llvm.load %arg1 : !llvm.ptr -> i64
    %c2_i64_17 = arith.constant 2 : i64
    call @dora_fn_nop() : () -> ()
    %40 = arith.cmpi uge, %39, %c2_i64_17 : i64
    %c80_i8_18 = arith.constant 80 : i8
    cf.cond_br %40, ^bb18, ^bb1(%c80_i8_18 : i8)
  ^bb18:  // pred: ^bb17
    %41 = arith.subi %39, %c2_i64_17 : i64
    llvm.store %41, %arg1 : i64, !llvm.ptr
    cf.br ^bb16
  ^bb19:  // pred: ^bb20
    %c32_i256 = arith.constant 32 : i256
    %42 = llvm.load %arg3 : !llvm.ptr -> i64
    %43 = llvm.getelementptr %arg2[%42] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_19 = arith.constant 1 : i64
    %44 = arith.addi %42, %c1_i64_19 : i64
    llvm.store %44, %arg3 : i64, !llvm.ptr
    llvm.store %c32_i256, %43 : i256, !llvm.ptr
    cf.br ^bb25
  ^bb20:  // pred: ^bb22
    %c1024_i64_20 = arith.constant 1024 : i64
    %45 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_21 = arith.constant 1 : i64
    %46 = arith.addi %45, %c1_i64_21 : i64
    %47 = arith.cmpi ult, %c1024_i64_20, %46 : i64
    %c92_i8_22 = arith.constant 92 : i8
    cf.cond_br %47, ^bb1(%c92_i8_22 : i8), ^bb19
  ^bb21:  // pred: ^bb15
    %48 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_23 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %49 = arith.cmpi uge, %48, %c3_i64_23 : i64
    %c80_i8_24 = arith.constant 80 : i8
    cf.cond_br %49, ^bb22, ^bb1(%c80_i8_24 : i8)
  ^bb22:  // pred: ^bb21
    %50 = arith.subi %48, %c3_i64_23 : i64
    llvm.store %50, %arg1 : i64, !llvm.ptr
    cf.br ^bb20
  ^bb23:  // pred: ^bb24
    %c0_i256_25 = arith.constant 0 : i256
    %51 = llvm.load %arg3 : !llvm.ptr -> i64
    %52 = llvm.getelementptr %arg2[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_26 = arith.constant 1 : i64
    %53 = arith.addi %51, %c1_i64_26 : i64
    llvm.store %53, %arg3 : i64, !llvm.ptr
    llvm.store %c0_i256_25, %52 : i256, !llvm.ptr
    cf.br ^bb29
  ^bb24:  // pred: ^bb26
    %c1024_i64_27 = arith.constant 1024 : i64
    %54 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_28 = arith.constant 1 : i64
    %55 = arith.addi %54, %c1_i64_28 : i64
    %56 = arith.cmpi ult, %c1024_i64_27, %55 : i64
    %c92_i8_29 = arith.constant 92 : i8
    cf.cond_br %56, ^bb1(%c92_i8_29 : i8), ^bb23
  ^bb25:  // pred: ^bb19
    %57 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_30 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %58 = arith.cmpi uge, %57, %c3_i64_30 : i64
    %c80_i8_31 = arith.constant 80 : i8
    cf.cond_br %58, ^bb26, ^bb1(%c80_i8_31 : i8)
  ^bb26:  // pred: ^bb25
    %59 = arith.subi %57, %c3_i64_30 : i64
    llvm.store %59, %arg1 : i64, !llvm.ptr
    cf.br ^bb24
  ^bb27:  // pred: ^bb28
    %c0_i256_32 = arith.constant 0 : i256
    %60 = llvm.load %arg3 : !llvm.ptr -> i64
    %61 = llvm.getelementptr %arg2[%60] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_33 = arith.constant 1 : i64
    %62 = arith.addi %60, %c1_i64_33 : i64
    llvm.store %62, %arg3 : i64, !llvm.ptr
    llvm.store %c0_i256_32, %61 : i256, !llvm.ptr
    cf.br ^bb36
  ^bb28:  // pred: ^bb30
    %c1024_i64_34 = arith.constant 1024 : i64
    %63 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_35 = arith.constant 1 : i64
    %64 = arith.addi %63, %c1_i64_35 : i64
    %65 = arith.cmpi ult, %c1024_i64_34, %64 : i64
    %c92_i8_36 = arith.constant 92 : i8
    cf.cond_br %65, ^bb1(%c92_i8_36 : i8), ^bb27
  ^bb29:  // pred: ^bb23
    %66 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_37 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %67 = arith.cmpi uge, %66, %c3_i64_37 : i64
    %c80_i8_38 = arith.constant 80 : i8
    cf.cond_br %67, ^bb30, ^bb1(%c80_i8_38 : i8)
  ^bb30:  // pred: ^bb29
    %68 = arith.subi %66, %c3_i64_37 : i64
    llvm.store %68, %arg1 : i64, !llvm.ptr
    cf.br ^bb28
  ^bb31:  // pred: ^bb35
    %69 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_39 = arith.constant 1 : i64
    %70 = arith.subi %69, %c1_i64_39 : i64
    %71 = llvm.getelementptr %arg2[%70] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %70, %arg3 : i64, !llvm.ptr
    %72 = llvm.load %71 : !llvm.ptr -> i256
    %73 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_40 = arith.constant 1 : i64
    %74 = arith.subi %73, %c1_i64_40 : i64
    %75 = llvm.getelementptr %arg2[%74] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %74, %arg3 : i64, !llvm.ptr
    %76 = llvm.load %75 : !llvm.ptr -> i256
    %77 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_41 = arith.constant 1 : i64
    %78 = arith.subi %77, %c1_i64_41 : i64
    %79 = llvm.getelementptr %arg2[%78] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %78, %arg3 : i64, !llvm.ptr
    %80 = llvm.load %79 : !llvm.ptr -> i256
    %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256
    %81 = arith.cmpi sgt, %80, %c18446744073709551615_i256 : i256
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %81, ^bb1(%c84_i8 : i8), ^bb32
  ^bb32:  // pred: ^bb31
    %82 = arith.trunci %80 : i256 to i64
    %c0_i64_42 = arith.constant 0 : i64
    %83 = arith.cmpi slt, %82, %c0_i64_42 : i64
    %c84_i8_43 = arith.constant 84 : i8
    cf.cond_br %83, ^bb1(%c84_i8_43 : i8), ^bb33
  ^bb33:  // pred: ^bb32
    %c0_i64_44 = arith.constant 0 : i64
    %84 = arith.cmpi ne, %82, %c0_i64_44 : i64
    cf.cond_br %84, ^bb39, ^bb34
  ^bb34:  // 2 preds: ^bb33, ^bb44
    %85 = arith.trunci %72 : i256 to i64
    %c1_i256 = arith.constant 1 : i256
    %86 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %76, %86 {alignment = 1 : i64} : i256, !llvm.ptr
    call @dora_fn_code_copy(%arg0, %86, %82, %85) : (!llvm.ptr, !llvm.ptr, i64, i64) -> ()
    cf.br ^bb38
  ^bb35:  // pred: ^bb37
    %c1024_i64_45 = arith.constant 1024 : i64
    %87 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-3_i64 = arith.constant -3 : i64
    %88 = arith.addi %87, %c-3_i64 : i64
    %c3_i64_46 = arith.constant 3 : i64
    %89 = arith.cmpi ult, %87, %c3_i64_46 : i64
    %c91_i8_47 = arith.constant 91 : i8
    cf.cond_br %89, ^bb1(%c91_i8_47 : i8), ^bb31
  ^bb36:  // pred: ^bb27
    %90 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_48 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %91 = arith.cmpi uge, %90, %c3_i64_48 : i64
    %c80_i8_49 = arith.constant 80 : i8
    cf.cond_br %91, ^bb37, ^bb1(%c80_i8_49 : i8)
  ^bb37:  // pred: ^bb36
    %92 = arith.subi %90, %c3_i64_48 : i64
    llvm.store %92, %arg1 : i64, !llvm.ptr
    cf.br ^bb35
  ^bb38:  // pred: ^bb34
    %c0_i64_50 = arith.constant 0 : i64
    %c1_i8 = arith.constant 1 : i8
    %93 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_50, %c0_i64_50, %93, %c1_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c1_i8 : i8
  ^bb39:  // pred: ^bb33
    %c31_i64 = arith.constant 31 : i64
    %c32_i64 = arith.constant 32 : i64
    %94 = arith.addi %82, %c31_i64 : i64
    %95 = arith.divui %94, %c32_i64 : i64
    %c3_i64_51 = arith.constant 3 : i64
    %96 = arith.muli %95, %c3_i64_51 : i64
    %97 = llvm.load %arg1 : !llvm.ptr -> i64
    %98 = arith.cmpi ult, %97, %96 : i64
    scf.if %98 {
    } else {
      %132 = arith.subi %97, %96 : i64
      llvm.store %132, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_52 = arith.constant 80 : i8
    cf.cond_br %98, ^bb1(%c80_i8_52 : i8), ^bb40
  ^bb40:  // pred: ^bb39
    %c18446744073709551615_i256_53 = arith.constant 18446744073709551615 : i256
    %99 = arith.cmpi sgt, %72, %c18446744073709551615_i256_53 : i256
    %c84_i8_54 = arith.constant 84 : i8
    cf.cond_br %99, ^bb1(%c84_i8_54 : i8), ^bb41
  ^bb41:  // pred: ^bb40
    %100 = arith.trunci %72 : i256 to i64
    %c0_i64_55 = arith.constant 0 : i64
    %101 = arith.cmpi slt, %100, %c0_i64_55 : i64
    %c84_i8_56 = arith.constant 84 : i8
    cf.cond_br %101, ^bb1(%c84_i8_56 : i8), ^bb42
  ^bb42:  // pred: ^bb41
    %102 = arith.addi %100, %82 : i64
    %c0_i64_57 = arith.constant 0 : i64
    %103 = arith.cmpi slt, %102, %c0_i64_57 : i64
    %c84_i8_58 = arith.constant 84 : i8
    cf.cond_br %103, ^bb1(%c84_i8_58 : i8), ^bb43
  ^bb43:  // pred: ^bb42
    %c31_i64_59 = arith.constant 31 : i64
    %c32_i64_60 = arith.constant 32 : i64
    %104 = arith.addi %102, %c31_i64_59 : i64
    %105 = arith.divui %104, %c32_i64_60 : i64
    %c32_i64_61 = arith.constant 32 : i64
    %106 = arith.muli %105, %c32_i64_61 : i64
    %107 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    %108 = llvm.load %107 : !llvm.ptr -> i64
    %c31_i64_62 = arith.constant 31 : i64
    %c32_i64_63 = arith.constant 32 : i64
    %109 = arith.addi %108, %c31_i64_62 : i64
    %110 = arith.divui %109, %c32_i64_63 : i64
    %111 = arith.muli %110, %c32_i64_61 : i64
    %112 = arith.cmpi ult, %111, %106 : i64
    cf.cond_br %112, ^bb45, ^bb44
  ^bb44:  // 2 preds: ^bb43, ^bb47
    cf.br ^bb34
  ^bb45:  // pred: ^bb43
    %c3_i64_64 = arith.constant 3 : i64
    %c512_i64 = arith.constant 512 : i64
    %113 = arith.muli %110, %110 : i64
    %114 = arith.divui %113, %c512_i64 : i64
    %115 = arith.muli %110, %c3_i64_64 : i64
    %116 = arith.addi %114, %115 : i64
    %c3_i64_65 = arith.constant 3 : i64
    %c512_i64_66 = arith.constant 512 : i64
    %117 = arith.muli %105, %105 : i64
    %118 = arith.divui %117, %c512_i64_66 : i64
    %119 = arith.muli %105, %c3_i64_65 : i64
    %120 = arith.addi %118, %119 : i64
    %121 = arith.subi %120, %116 : i64
    %122 = llvm.load %arg1 : !llvm.ptr -> i64
    %123 = arith.cmpi ult, %122, %121 : i64
    scf.if %123 {
    } else {
      %132 = arith.subi %122, %121 : i64
      llvm.store %132, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_67 = arith.constant 80 : i8
    cf.cond_br %123, ^bb1(%c80_i8_67 : i8), ^bb46
  ^bb46:  // pred: ^bb45
    %124 = call @dora_fn_extend_memory(%arg0, %106) : (!llvm.ptr, i64) -> !llvm.ptr
    %125 = llvm.getelementptr %124[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %126 = llvm.load %125 : !llvm.ptr -> !llvm.ptr
    %127 = llvm.getelementptr %124[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %128 = llvm.load %127 : !llvm.ptr -> i8
    %c0_i8 = arith.constant 0 : i8
    %129 = arith.cmpi ne, %128, %c0_i8 : i8
    cf.cond_br %129, ^bb1(%128 : i8), ^bb47
  ^bb47:  // pred: ^bb46
    %130 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    llvm.store %126, %130 : !llvm.ptr, !llvm.ptr
    %131 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %106, %131 : i64, !llvm.ptr
    cf.br ^bb44
  }
}
