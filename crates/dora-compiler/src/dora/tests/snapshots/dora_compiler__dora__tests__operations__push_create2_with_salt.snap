---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  llvm.mlir.global internal @dora_global_stack_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_stack_length() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_memory_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_memory_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_calldata_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_calldata_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_gas_counter() {addr_space = 0 : i32} : i64
  llvm.mlir.global external @dora_global_ctx_is_static() {addr_space = 0 : i32} : !llvm.ptr
  func.func private @dora_fn_debug_print(i32)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_chainid(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_gaslimit(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_code_copy(!llvm.ptr, i64, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_call(!llvm.ptr, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, i64, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_size(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_copy(!llvm.ptr, i64, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_transient_storage_read(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_transient_storage_write(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func public @main(%arg0: !llvm.ptr, %arg1: i64) -> i8 attributes {llvm.emit_c_interface} {
    %c1024_i256 = arith.constant 1024 : i256
    %0 = llvm.alloca %c1024_i256 x i256 : (i256) -> !llvm.ptr
    %1 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    llvm.store %0, %1 : !llvm.ptr, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %2 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    llvm.store %c0_i64, %2 : i64, !llvm.ptr
    %c0_i64_0 = arith.constant 0 : i64
    %3 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %c0_i64_0, %3 : i64, !llvm.ptr
    %4 = call @dora_fn_calldata(%arg0) : (!llvm.ptr) -> !llvm.ptr
    %5 = llvm.mlir.addressof @dora_global_calldata_ptr : !llvm.ptr
    llvm.store %4, %5 : !llvm.ptr, !llvm.ptr
    %6 = call @dora_fn_calldata_size(%arg0) : (!llvm.ptr) -> i64
    %7 = llvm.mlir.addressof @dora_global_calldata_size : !llvm.ptr
    llvm.store %6, %7 : i64, !llvm.ptr
    %8 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    llvm.store %arg1, %8 : i64, !llvm.ptr
    cf.br ^bb5
  ^bb1(%9: i8):  // 22 preds: ^bb2, ^bb4, ^bb5, ^bb8, ^bb9, ^bb12, ^bb13, ^bb16, ^bb17, ^bb19, ^bb20, ^bb21, ^bb23, ^bb24, ^bb25, ^bb27, ^bb28, ^bb31, ^bb32, ^bb33, ^bb34, ^bb35
    %c0_i64_1 = arith.constant 0 : i64
    %10 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %11 = llvm.load %10 : !llvm.ptr -> i64
    %12 = call @dora_fn_write_result(%arg0, %c0_i64_1, %c0_i64_1, %11, %9) : (!llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
    return %9 : i8
  ^bb2(%13: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %13 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3:  // pred: ^bb4
    %c4660_i256 = arith.constant 4660 : i256
    %14 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %15 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    llvm.store %c4660_i256, %15 : i256, !llvm.ptr
    %16 = llvm.getelementptr %15[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %16, %14 : !llvm.ptr, !llvm.ptr
    cf.br ^bb9
  ^bb4:  // pred: ^bb6
    %17 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64 = arith.constant 1024 : i64
    %18 = llvm.load %17 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %19 = arith.addi %18, %c1_i64 : i64
    llvm.store %19, %17 : i64, !llvm.ptr
    %20 = arith.cmpi ult, %c1024_i64, %19 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %20, ^bb1(%c92_i8 : i8), ^bb3
  ^bb5:  // pred: ^bb0
    %21 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %22 = llvm.load %21 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    %23 = arith.cmpi uge, %22, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %23, ^bb6, ^bb1(%c80_i8 : i8)
  ^bb6:  // pred: ^bb5
    %24 = arith.subi %22, %c3_i64 : i64
    llvm.store %24, %21 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb7:  // pred: ^bb8
    %c0_i256 = arith.constant 0 : i256
    %25 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %26 = llvm.load %25 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256, %26 : i256, !llvm.ptr
    %27 = llvm.getelementptr %26[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %27, %25 : !llvm.ptr, !llvm.ptr
    cf.br ^bb13
  ^bb8:  // pred: ^bb10
    %28 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_2 = arith.constant 1024 : i64
    %29 = llvm.load %28 : !llvm.ptr -> i64
    %c1_i64_3 = arith.constant 1 : i64
    %30 = arith.addi %29, %c1_i64_3 : i64
    llvm.store %30, %28 : i64, !llvm.ptr
    %31 = arith.cmpi ult, %c1024_i64_2, %30 : i64
    %c92_i8_4 = arith.constant 92 : i8
    cf.cond_br %31, ^bb1(%c92_i8_4 : i8), ^bb7
  ^bb9:  // pred: ^bb3
    %32 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %33 = llvm.load %32 : !llvm.ptr -> i64
    %c3_i64_5 = arith.constant 3 : i64
    %34 = arith.cmpi uge, %33, %c3_i64_5 : i64
    %c80_i8_6 = arith.constant 80 : i8
    cf.cond_br %34, ^bb10, ^bb1(%c80_i8_6 : i8)
  ^bb10:  // pred: ^bb9
    %35 = arith.subi %33, %c3_i64_5 : i64
    llvm.store %35, %32 : i64, !llvm.ptr
    cf.br ^bb8
  ^bb11:  // pred: ^bb12
    %c20_i256 = arith.constant 20 : i256
    %36 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %37 = llvm.load %36 : !llvm.ptr -> !llvm.ptr
    llvm.store %c20_i256, %37 : i256, !llvm.ptr
    %38 = llvm.getelementptr %37[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %38, %36 : !llvm.ptr, !llvm.ptr
    cf.br ^bb17
  ^bb12:  // pred: ^bb14
    %39 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_7 = arith.constant 1024 : i64
    %40 = llvm.load %39 : !llvm.ptr -> i64
    %c1_i64_8 = arith.constant 1 : i64
    %41 = arith.addi %40, %c1_i64_8 : i64
    llvm.store %41, %39 : i64, !llvm.ptr
    %42 = arith.cmpi ult, %c1024_i64_7, %41 : i64
    %c92_i8_9 = arith.constant 92 : i8
    cf.cond_br %42, ^bb1(%c92_i8_9 : i8), ^bb11
  ^bb13:  // pred: ^bb7
    %43 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %44 = llvm.load %43 : !llvm.ptr -> i64
    %c3_i64_10 = arith.constant 3 : i64
    %45 = arith.cmpi uge, %44, %c3_i64_10 : i64
    %c80_i8_11 = arith.constant 80 : i8
    cf.cond_br %45, ^bb14, ^bb1(%c80_i8_11 : i8)
  ^bb14:  // pred: ^bb13
    %46 = arith.subi %44, %c3_i64_10 : i64
    llvm.store %46, %43 : i64, !llvm.ptr
    cf.br ^bb12
  ^bb15:  // pred: ^bb16
    %c10_i256 = arith.constant 10 : i256
    %47 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %48 = llvm.load %47 : !llvm.ptr -> !llvm.ptr
    llvm.store %c10_i256, %48 : i256, !llvm.ptr
    %49 = llvm.getelementptr %48[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %49, %47 : !llvm.ptr, !llvm.ptr
    cf.br ^bb28
  ^bb16:  // pred: ^bb18
    %50 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_12 = arith.constant 1024 : i64
    %51 = llvm.load %50 : !llvm.ptr -> i64
    %c1_i64_13 = arith.constant 1 : i64
    %52 = arith.addi %51, %c1_i64_13 : i64
    llvm.store %52, %50 : i64, !llvm.ptr
    %53 = arith.cmpi ult, %c1024_i64_12, %52 : i64
    %c92_i8_14 = arith.constant 92 : i8
    cf.cond_br %53, ^bb1(%c92_i8_14 : i8), ^bb15
  ^bb17:  // pred: ^bb11
    %54 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %55 = llvm.load %54 : !llvm.ptr -> i64
    %c3_i64_15 = arith.constant 3 : i64
    %56 = arith.cmpi uge, %55, %c3_i64_15 : i64
    %c80_i8_16 = arith.constant 80 : i8
    cf.cond_br %56, ^bb18, ^bb1(%c80_i8_16 : i8)
  ^bb18:  // pred: ^bb17
    %57 = arith.subi %55, %c3_i64_15 : i64
    llvm.store %57, %54 : i64, !llvm.ptr
    cf.br ^bb16
  ^bb19:  // pred: ^bb27
    %58 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %59 = llvm.load %58 : !llvm.ptr -> !llvm.ptr
    %60 = llvm.getelementptr %59[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %61 = llvm.load %60 : !llvm.ptr -> i256
    llvm.store %60, %58 : !llvm.ptr, !llvm.ptr
    %62 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %63 = llvm.load %62 : !llvm.ptr -> !llvm.ptr
    %64 = llvm.getelementptr %63[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %65 = llvm.load %64 : !llvm.ptr -> i256
    llvm.store %64, %62 : !llvm.ptr, !llvm.ptr
    %66 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %67 = llvm.load %66 : !llvm.ptr -> !llvm.ptr
    %68 = llvm.getelementptr %67[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %69 = llvm.load %68 : !llvm.ptr -> i256
    llvm.store %68, %66 : !llvm.ptr, !llvm.ptr
    %70 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %71 = llvm.load %70 : !llvm.ptr -> !llvm.ptr
    %72 = llvm.getelementptr %71[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %73 = llvm.load %72 : !llvm.ptr -> i256
    llvm.store %72, %70 : !llvm.ptr, !llvm.ptr
    %74 = llvm.mlir.addressof @dora_global_ctx_is_static : !llvm.ptr
    %75 = llvm.load %74 : !llvm.ptr -> i1
    %c87_i8 = arith.constant 87 : i8
    cf.cond_br %75, ^bb1(%c87_i8 : i8), ^bb20
  ^bb20:  // pred: ^bb19
    %76 = arith.trunci %65 : i256 to i64
    %c0_i64_17 = arith.constant 0 : i64
    %77 = arith.cmpi slt, %76, %c0_i64_17 : i64
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %77, ^bb1(%c84_i8 : i8), ^bb21
  ^bb21:  // pred: ^bb20
    %78 = arith.trunci %69 : i256 to i64
    %c0_i64_18 = arith.constant 0 : i64
    %79 = arith.cmpi slt, %78, %c0_i64_18 : i64
    %c84_i8_19 = arith.constant 84 : i8
    cf.cond_br %79, ^bb1(%c84_i8_19 : i8), ^bb22
  ^bb22:  // pred: ^bb21
    %c0_i64_20 = arith.constant 0 : i64
    %80 = arith.cmpi ne, %78, %c0_i64_20 : i64
    cf.cond_br %80, ^bb31, ^bb23
  ^bb23:  // 2 preds: ^bb22, ^bb36
    %c32000_i64 = arith.constant 32000 : i64
    %c31_i64 = arith.constant 31 : i64
    %c32_i64 = arith.constant 32 : i64
    %81 = arith.addi %78, %c31_i64 : i64
    %82 = arith.divui %81, %c32_i64 : i64
    %c6_i64 = arith.constant 6 : i64
    %83 = arith.muli %82, %c6_i64 : i64
    %84 = arith.addi %c32000_i64, %83 : i64
    %85 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %86 = llvm.load %85 : !llvm.ptr -> i64
    %87 = arith.cmpi ult, %86, %84 : i64
    scf.if %87 {
    } else {
      %146 = arith.subi %86, %84 : i64
      llvm.store %146, %85 : i64, !llvm.ptr
    }
    %c80_i8_21 = arith.constant 80 : i8
    cf.cond_br %87, ^bb1(%c80_i8_21 : i8), ^bb24
  ^bb24:  // pred: ^bb23
    %c1_i256 = arith.constant 1 : i256
    %88 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %61, %88 {alignment = 1 : i64} : i256, !llvm.ptr
    %89 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %90 = llvm.load %89 : !llvm.ptr -> i64
    %c1_i256_22 = arith.constant 1 : i256
    %91 = llvm.alloca %c1_i256_22 x i256 : (i256) -> !llvm.ptr
    llvm.store %73, %91 {alignment = 1 : i64} : i256, !llvm.ptr
    %92 = call @dora_fn_create2(%arg0, %78, %76, %88, %90, %91) : (!llvm.ptr, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
    %93 = llvm.getelementptr %92[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %94 = llvm.load %93 : !llvm.ptr -> i8
    %c0_i8 = arith.constant 0 : i8
    %95 = arith.cmpi ne, %94, %c0_i8 : i8
    cf.cond_br %95, ^bb1(%94 : i8), ^bb25
  ^bb25:  // pred: ^bb24
    %96 = llvm.getelementptr %92[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %97 = llvm.load %96 : !llvm.ptr -> i64
    %98 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %99 = llvm.load %98 : !llvm.ptr -> i64
    %100 = arith.cmpi ult, %99, %97 : i64
    scf.if %100 {
    } else {
      %146 = arith.subi %99, %97 : i64
      llvm.store %146, %98 : i64, !llvm.ptr
    }
    %c80_i8_23 = arith.constant 80 : i8
    cf.cond_br %100, ^bb1(%c80_i8_23 : i8), ^bb26
  ^bb26:  // pred: ^bb25
    %101 = llvm.load %88 : !llvm.ptr -> i256
    %102 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %103 = llvm.load %102 : !llvm.ptr -> !llvm.ptr
    llvm.store %101, %103 : i256, !llvm.ptr
    %104 = llvm.getelementptr %103[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %104, %102 : !llvm.ptr, !llvm.ptr
    cf.br ^bb30
  ^bb27:  // pred: ^bb29
    %105 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_24 = arith.constant 1024 : i64
    %106 = llvm.load %105 : !llvm.ptr -> i64
    %c-3_i64 = arith.constant -3 : i64
    %107 = arith.addi %106, %c-3_i64 : i64
    llvm.store %107, %105 : i64, !llvm.ptr
    %c4_i64 = arith.constant 4 : i64
    %108 = arith.cmpi ult, %106, %c4_i64 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %108, ^bb1(%c91_i8 : i8), ^bb19
  ^bb28:  // pred: ^bb15
    %109 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %110 = llvm.load %109 : !llvm.ptr -> i64
    %c0_i64_25 = arith.constant 0 : i64
    %111 = arith.cmpi uge, %110, %c0_i64_25 : i64
    %c80_i8_26 = arith.constant 80 : i8
    cf.cond_br %111, ^bb29, ^bb1(%c80_i8_26 : i8)
  ^bb29:  // pred: ^bb28
    %112 = arith.subi %110, %c0_i64_25 : i64
    llvm.store %112, %109 : i64, !llvm.ptr
    cf.br ^bb27
  ^bb30:  // pred: ^bb26
    %c0_i64_27 = arith.constant 0 : i64
    %c1_i8 = arith.constant 1 : i8
    %113 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %114 = llvm.load %113 : !llvm.ptr -> i64
    %115 = call @dora_fn_write_result(%arg0, %c0_i64_27, %c0_i64_27, %114, %c1_i8) : (!llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
    return %c1_i8 : i8
  ^bb31:  // pred: ^bb22
    %c49152_i64 = arith.constant 49152 : i64
    %116 = arith.cmpi ugt, %78, %c49152_i64 : i64
    %c100_i8 = arith.constant 100 : i8
    cf.cond_br %116, ^bb1(%c100_i8 : i8), ^bb32
  ^bb32:  // pred: ^bb31
    %c31_i64_28 = arith.constant 31 : i64
    %c32_i64_29 = arith.constant 32 : i64
    %117 = arith.addi %78, %c31_i64_28 : i64
    %118 = arith.divui %117, %c32_i64_29 : i64
    %c2_i64 = arith.constant 2 : i64
    %119 = arith.muli %118, %c2_i64 : i64
    %120 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %121 = llvm.load %120 : !llvm.ptr -> i64
    %122 = arith.cmpi ult, %121, %119 : i64
    scf.if %122 {
    } else {
      %146 = arith.subi %121, %119 : i64
      llvm.store %146, %120 : i64, !llvm.ptr
    }
    %c80_i8_30 = arith.constant 80 : i8
    cf.cond_br %122, ^bb1(%c80_i8_30 : i8), ^bb33
  ^bb33:  // pred: ^bb32
    %123 = arith.addi %76, %78 : i64
    %c0_i64_31 = arith.constant 0 : i64
    %124 = arith.cmpi slt, %123, %c0_i64_31 : i64
    %c84_i8_32 = arith.constant 84 : i8
    cf.cond_br %124, ^bb1(%c84_i8_32 : i8), ^bb34
  ^bb34:  // pred: ^bb33
    %c31_i64_33 = arith.constant 31 : i64
    %c32_i64_34 = arith.constant 32 : i64
    %125 = arith.addi %123, %c31_i64_33 : i64
    %126 = arith.divui %125, %c32_i64_34 : i64
    %c32_i64_35 = arith.constant 32 : i64
    %127 = arith.muli %126, %c32_i64_35 : i64
    %128 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    %129 = llvm.load %128 : !llvm.ptr -> i64
    %c31_i64_36 = arith.constant 31 : i64
    %c32_i64_37 = arith.constant 32 : i64
    %130 = arith.addi %129, %c31_i64_36 : i64
    %131 = arith.divui %130, %c32_i64_37 : i64
    %132 = arith.muli %131, %c32_i64_35 : i64
    %133 = arith.cmpi ult, %132, %127 : i64
    %134 = scf.if %133 -> (i64) {
      %c3_i64_40 = arith.constant 3 : i64
      %c512_i64 = arith.constant 512 : i64
      %146 = arith.muli %131, %131 : i64
      %147 = arith.divui %146, %c512_i64 : i64
      %148 = arith.muli %131, %c3_i64_40 : i64
      %149 = arith.addi %147, %148 : i64
      %c3_i64_41 = arith.constant 3 : i64
      %c512_i64_42 = arith.constant 512 : i64
      %150 = arith.muli %126, %126 : i64
      %151 = arith.divui %150, %c512_i64_42 : i64
      %152 = arith.muli %126, %c3_i64_41 : i64
      %153 = arith.addi %151, %152 : i64
      %154 = arith.subi %153, %149 : i64
      scf.yield %154 : i64
    } else {
      %c0_i64_40 = arith.constant 0 : i64
      scf.yield %c0_i64_40 : i64
    }
    %135 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %136 = llvm.load %135 : !llvm.ptr -> i64
    %137 = arith.cmpi ult, %136, %134 : i64
    scf.if %137 {
    } else {
      %146 = arith.subi %136, %134 : i64
      llvm.store %146, %135 : i64, !llvm.ptr
    }
    %c80_i8_38 = arith.constant 80 : i8
    cf.cond_br %137, ^bb1(%c80_i8_38 : i8), ^bb35
  ^bb35:  // pred: ^bb34
    %138 = call @dora_fn_extend_memory(%arg0, %127) : (!llvm.ptr, i64) -> !llvm.ptr
    %139 = llvm.getelementptr %138[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %140 = llvm.load %139 : !llvm.ptr -> !llvm.ptr
    %141 = llvm.getelementptr %138[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %142 = llvm.load %141 : !llvm.ptr -> i8
    %c0_i8_39 = arith.constant 0 : i8
    %143 = arith.cmpi ne, %142, %c0_i8_39 : i8
    cf.cond_br %143, ^bb1(%142 : i8), ^bb36
  ^bb36:  // pred: ^bb35
    %144 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    llvm.store %140, %144 : !llvm.ptr, !llvm.ptr
    %145 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %127, %145 : i64, !llvm.ptr
    cf.br ^bb23
  }
}
