---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
---
module {
  llvm.mlir.global internal @dora_global_stack_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_stack_length() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_memory_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_memory_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_calldata_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_calldata_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_gas_counter() {addr_space = 0 : i32} : i64
  llvm.mlir.global external @dora_global_ctx_is_static() {addr_space = 0 : i32} : !llvm.ptr
  func.func private @dora_fn_debug_print(i32)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_chainid(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_gaslimit(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_code_copy(!llvm.ptr, i64, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_call(!llvm.ptr, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr, i8) -> !llvm.ptr
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, i64, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_return_data_size(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_return_data_copy(!llvm.ptr, i64, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_transient_storage_read(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_transient_storage_write(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func public @main(%arg0: !llvm.ptr, %arg1: i64) -> i8 attributes {llvm.emit_c_interface} {
    %c1024_i256 = arith.constant 1024 : i256
    %0 = llvm.alloca %c1024_i256 x i256 : (i256) -> !llvm.ptr
    %1 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    llvm.store %0, %1 : !llvm.ptr, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %2 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    llvm.store %c0_i64, %2 : i64, !llvm.ptr
    %c0_i64_0 = arith.constant 0 : i64
    %3 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %c0_i64_0, %3 : i64, !llvm.ptr
    %4 = call @dora_fn_calldata(%arg0) : (!llvm.ptr) -> !llvm.ptr
    %5 = llvm.mlir.addressof @dora_global_calldata_ptr : !llvm.ptr
    llvm.store %4, %5 : !llvm.ptr, !llvm.ptr
    %6 = call @dora_fn_calldata_size(%arg0) : (!llvm.ptr) -> i64
    %7 = llvm.mlir.addressof @dora_global_calldata_size : !llvm.ptr
    llvm.store %6, %7 : i64, !llvm.ptr
    %8 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    llvm.store %arg1, %8 : i64, !llvm.ptr
    %9 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64 = arith.constant 1024 : i64
    %10 = llvm.load %9 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %11 = arith.addi %10, %c1_i64 : i64
    llvm.store %11, %9 : i64, !llvm.ptr
    %12 = arith.cmpi ult, %c1024_i64, %11 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %12, ^bb1(%c92_i8 : i8), ^bb3
  ^bb1(%13: i8):  // 10 preds: ^bb0, ^bb2, ^bb3, ^bb4, ^bb5, ^bb6, ^bb7, ^bb8, ^bb9, ^bb10
    %c0_i64_1 = arith.constant 0 : i64
    %14 = call @dora_fn_write_result(%arg0, %c0_i64_1, %c0_i64_1, %c0_i64_1, %13) : (!llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
    return %13 : i8
  ^bb2(%15: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %15 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3:  // pred: ^bb0
    %c4660_i256 = arith.constant 4660 : i256
    %16 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %17 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    llvm.store %c4660_i256, %17 : i256, !llvm.ptr
    %18 = llvm.getelementptr %17[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %18, %16 : !llvm.ptr, !llvm.ptr
    %19 = llvm.load %9 : !llvm.ptr -> i64
    %c1_i64_2 = arith.constant 1 : i64
    %20 = arith.addi %19, %c1_i64_2 : i64
    llvm.store %20, %9 : i64, !llvm.ptr
    %21 = arith.cmpi ult, %c1024_i64, %20 : i64
    %c92_i8_3 = arith.constant 92 : i8
    cf.cond_br %21, ^bb1(%c92_i8_3 : i8), ^bb4
  ^bb4:  // pred: ^bb3
    %c0_i256 = arith.constant 0 : i256
    %22 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %23 = llvm.load %22 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256, %23 : i256, !llvm.ptr
    %24 = llvm.getelementptr %23[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %24, %22 : !llvm.ptr, !llvm.ptr
    %25 = llvm.load %9 : !llvm.ptr -> i64
    %c1_i64_4 = arith.constant 1 : i64
    %26 = arith.addi %25, %c1_i64_4 : i64
    llvm.store %26, %9 : i64, !llvm.ptr
    %27 = arith.cmpi ult, %c1024_i64, %26 : i64
    %c92_i8_5 = arith.constant 92 : i8
    cf.cond_br %27, ^bb1(%c92_i8_5 : i8), ^bb5
  ^bb5:  // pred: ^bb4
    %c20_i256 = arith.constant 20 : i256
    %28 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %29 = llvm.load %28 : !llvm.ptr -> !llvm.ptr
    llvm.store %c20_i256, %29 : i256, !llvm.ptr
    %30 = llvm.getelementptr %29[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %30, %28 : !llvm.ptr, !llvm.ptr
    %31 = llvm.load %9 : !llvm.ptr -> i64
    %c1_i64_6 = arith.constant 1 : i64
    %32 = arith.addi %31, %c1_i64_6 : i64
    llvm.store %32, %9 : i64, !llvm.ptr
    %33 = arith.cmpi ult, %c1024_i64, %32 : i64
    %c92_i8_7 = arith.constant 92 : i8
    cf.cond_br %33, ^bb1(%c92_i8_7 : i8), ^bb6
  ^bb6:  // pred: ^bb5
    %c10_i256 = arith.constant 10 : i256
    %34 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %35 = llvm.load %34 : !llvm.ptr -> !llvm.ptr
    llvm.store %c10_i256, %35 : i256, !llvm.ptr
    %36 = llvm.getelementptr %35[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %36, %34 : !llvm.ptr, !llvm.ptr
    %37 = llvm.load %9 : !llvm.ptr -> i64
    %c-3_i64 = arith.constant -3 : i64
    %38 = arith.addi %37, %c-3_i64 : i64
    llvm.store %38, %9 : i64, !llvm.ptr
    %c4_i64 = arith.constant 4 : i64
    %39 = arith.cmpi ult, %37, %c4_i64 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %39, ^bb1(%c91_i8 : i8), ^bb7
  ^bb7:  // pred: ^bb6
    %40 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %41 = llvm.load %40 : !llvm.ptr -> !llvm.ptr
    %42 = llvm.getelementptr %41[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %43 = llvm.load %42 : !llvm.ptr -> i256
    llvm.store %42, %40 : !llvm.ptr, !llvm.ptr
    %44 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %45 = llvm.load %44 : !llvm.ptr -> !llvm.ptr
    %46 = llvm.getelementptr %45[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %47 = llvm.load %46 : !llvm.ptr -> i256
    llvm.store %46, %44 : !llvm.ptr, !llvm.ptr
    %48 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %49 = llvm.load %48 : !llvm.ptr -> !llvm.ptr
    %50 = llvm.getelementptr %49[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %51 = llvm.load %50 : !llvm.ptr -> i256
    llvm.store %50, %48 : !llvm.ptr, !llvm.ptr
    %52 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %53 = llvm.load %52 : !llvm.ptr -> !llvm.ptr
    %54 = llvm.getelementptr %53[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %55 = llvm.load %54 : !llvm.ptr -> i256
    llvm.store %54, %52 : !llvm.ptr, !llvm.ptr
    %56 = arith.trunci %47 : i256 to i64
    %57 = arith.trunci %51 : i256 to i64
    %58 = arith.addi %56, %57 : i64
    %c0_i64_8 = arith.constant 0 : i64
    %59 = arith.cmpi slt, %58, %c0_i64_8 : i64
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %59, ^bb1(%c84_i8 : i8), ^bb8
  ^bb8:  // pred: ^bb7
    %c31_i64 = arith.constant 31 : i64
    %c32_i64 = arith.constant 32 : i64
    %60 = arith.addi %58, %c31_i64 : i64
    %61 = arith.divui %60, %c32_i64 : i64
    %62 = arith.muli %61, %c32_i64 : i64
    %63 = call @dora_fn_extend_memory(%arg0, %62) : (!llvm.ptr, i64) -> !llvm.ptr
    %64 = llvm.getelementptr %63[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %65 = llvm.load %64 : !llvm.ptr -> !llvm.ptr
    %66 = llvm.getelementptr %63[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %67 = llvm.load %66 : !llvm.ptr -> i8
    %c0_i8 = arith.constant 0 : i8
    %68 = arith.cmpi ne, %67, %c0_i8 : i8
    cf.cond_br %68, ^bb1(%67 : i8), ^bb9
  ^bb9:  // pred: ^bb8
    %69 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    llvm.store %65, %69 : !llvm.ptr, !llvm.ptr
    %70 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %62, %70 : i64, !llvm.ptr
    %c1_i256 = arith.constant 1 : i256
    %71 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %43, %71 {alignment = 1 : i64} : i256, !llvm.ptr
    %72 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %73 = llvm.load %72 : !llvm.ptr -> i64
    %c1_i64_9 = arith.constant 1 : i64
    %74 = llvm.alloca %c1_i64_9 x i64 : (i64) -> !llvm.ptr
    llvm.store %73, %74 {alignment = 1 : i64} : i64, !llvm.ptr
    %c1_i256_10 = arith.constant 1 : i256
    %75 = llvm.alloca %c1_i256_10 x i256 : (i256) -> !llvm.ptr
    llvm.store %55, %75 {alignment = 1 : i64} : i256, !llvm.ptr
    %76 = call @dora_fn_create2(%arg0, %57, %56, %71, %74, %75) : (!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %77 = llvm.getelementptr %76[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %78 = llvm.load %77 : !llvm.ptr -> i8
    %79 = llvm.getelementptr %76[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %80 = llvm.load %79 : !llvm.ptr -> i8
    %c0_i8_11 = arith.constant 0 : i8
    %81 = arith.cmpi ne, %80, %c0_i8_11 : i8
    cf.cond_br %81, ^bb1(%80 : i8), ^bb10
  ^bb10:  // pred: ^bb9
    %c0_i8_12 = arith.constant 0 : i8
    %82 = arith.cmpi ne, %c0_i8_12, %78 : i8
    %c94_i8 = arith.constant 94 : i8
    cf.cond_br %82, ^bb1(%c94_i8 : i8), ^bb11
  ^bb11:  // pred: ^bb10
    %83 = llvm.load %71 : !llvm.ptr -> i256
    %84 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %85 = llvm.load %84 : !llvm.ptr -> !llvm.ptr
    llvm.store %83, %85 : i256, !llvm.ptr
    %86 = llvm.getelementptr %85[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %86, %84 : !llvm.ptr, !llvm.ptr
    cf.br ^bb12
  ^bb12:  // pred: ^bb11
    %c0_i64_13 = arith.constant 0 : i64
    %c1_i8 = arith.constant 1 : i8
    %87 = call @dora_fn_write_result(%arg0, %c0_i64_13, %c0_i64_13, %arg1, %c1_i8) : (!llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
    return %c1_i8 : i8
  }
}
