---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  llvm.mlir.global internal @dora_stack_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_stack_length() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_memory_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_memory_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_calldata_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_calldata_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_gas_counter() {addr_space = 0 : i32} : i64
  llvm.mlir.global external @dora_ctx_is_static() {addr_space = 0 : i32} : !llvm.ptr
  func.func private @dora_debug_print(i32)
  func.func private @dora_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_get_calldata_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_get_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_get_chainid(!llvm.ptr) -> i64
  func.func private @dora_store_in_callvalue_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_caller_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_get_gaslimit(!llvm.ptr) -> i64
  func.func private @dora_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_copy_code_to_memory(!llvm.ptr, i64, i64, i64)
  func.func private @dora_read_storage(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_write_storage(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> i64
  func.func private @dora_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_get_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_get_coinbase_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_get_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_get_codesize_from_address(!llvm.ptr, !llvm.ptr) -> i64
  func.func private @dora_get_address_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_get_prevrandao(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_call(!llvm.ptr, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr, i8) -> i8
  func.func private @dora_store_in_balance(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> i64
  func.func private @dora_copy_ext_code_to_memory(!llvm.ptr, !llvm.ptr, i64, i64, i64)
  func.func private @dora_get_blob_hash_at_index(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_get_block_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_get_code_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_create(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr) -> i8
  func.func private @dora_create2(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
  func.func private @dora_get_return_data_size(!llvm.ptr) -> i64
  func.func private @dora_copy_return_data_into_memory(!llvm.ptr, i64, i64, i64)
  func.func private @dora_selfdestruct(!llvm.ptr, !llvm.ptr) -> i64
  func.func private @dora_transient_storage_read(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_transient_storage_write(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func public @main(%arg0: !llvm.ptr, %arg1: i64) -> i8 attributes {llvm.emit_c_interface} {
    %c1024_i256 = arith.constant 1024 : i256
    %0 = llvm.alloca %c1024_i256 x i256 : (i256) -> !llvm.ptr
    %1 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    llvm.store %0, %1 : !llvm.ptr, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %2 = llvm.mlir.addressof @dora_stack_length : !llvm.ptr
    llvm.store %c0_i64, %2 : i64, !llvm.ptr
    %c0_i64_0 = arith.constant 0 : i64
    %3 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    llvm.store %c0_i64_0, %3 : i64, !llvm.ptr
    %4 = call @dora_get_calldata_ptr(%arg0) : (!llvm.ptr) -> !llvm.ptr
    %5 = llvm.mlir.addressof @dora_calldata_ptr : !llvm.ptr
    llvm.store %4, %5 : !llvm.ptr, !llvm.ptr
    %6 = call @dora_get_calldata_size(%arg0) : (!llvm.ptr) -> i64
    %7 = llvm.mlir.addressof @dora_calldata_size : !llvm.ptr
    llvm.store %6, %7 : i64, !llvm.ptr
    %8 = llvm.mlir.addressof @dora_gas_counter : !llvm.ptr
    llvm.store %arg1, %8 : i64, !llvm.ptr
    %9 = llvm.mlir.addressof @dora_stack_length : !llvm.ptr
    %c1024_i64 = arith.constant 1024 : i64
    cf.br ^bb3
  ^bb1(%10: i8):  // 11 preds: ^bb2, ^bb5, ^bb9, ^bb13, ^bb18, ^bb19, ^bb27, ^bb33, ^bb37, ^bb41, ^bb46
    %c0_i64_1 = arith.constant 0 : i64
    call @dora_write_result(%arg0, %c0_i64_1, %c0_i64_1, %c0_i64_1, %10) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %10 : i8
  ^bb2(%11: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %11 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3:  // pred: ^bb0
    %c57669888194366464517598830424248860356609074394020202793089226410191109488639_i256 = arith.constant 57669888194366464517598830424248860356609074394020202793089226410191109488639 : i256
    %12 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    llvm.store %c57669888194366464517598830424248860356609074394020202793089226410191109488639_i256, %13 : i256, !llvm.ptr
    %14 = llvm.getelementptr %13[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %14, %12 : !llvm.ptr, !llvm.ptr
    cf.br ^bb4
  ^bb4:  // pred: ^bb3
    %c0_i256 = arith.constant 0 : i256
    %15 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %16 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256, %16 : i256, !llvm.ptr
    %17 = llvm.getelementptr %16[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %17, %15 : !llvm.ptr, !llvm.ptr
    cf.br ^bb5
  ^bb5:  // pred: ^bb4
    %18 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %19 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %20 = llvm.getelementptr %19[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %21 = llvm.load %20 : !llvm.ptr -> i256
    llvm.store %20, %18 : !llvm.ptr, !llvm.ptr
    %22 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %23 = llvm.load %22 : !llvm.ptr -> !llvm.ptr
    %24 = llvm.getelementptr %23[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %25 = llvm.load %24 : !llvm.ptr -> i256
    llvm.store %24, %22 : !llvm.ptr, !llvm.ptr
    %26 = arith.trunci %21 : i256 to i64
    %c32_i64 = arith.constant 32 : i64
    %27 = arith.addi %26, %c32_i64 : i64
    %c0_i64_2 = arith.constant 0 : i64
    %28 = arith.cmpi slt, %27, %c0_i64_2 : i64
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %28, ^bb1(%c84_i8 : i8), ^bb6
  ^bb6:  // pred: ^bb5
    %29 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    %30 = llvm.load %29 : !llvm.ptr -> i64
    %c31_i64 = arith.constant 31 : i64
    %c32_i64_3 = arith.constant 32 : i64
    %31 = arith.addi %27, %c31_i64 : i64
    %32 = arith.divui %31, %c32_i64_3 : i64
    %33 = arith.muli %32, %c32_i64_3 : i64
    %34 = arith.cmpi ult, %30, %33 : i64
    scf.if %34 {
      %327 = func.call @dora_extend_memory(%arg0, %33) : (!llvm.ptr, i64) -> !llvm.ptr
      llvm.store %33, %29 : i64, !llvm.ptr
      %328 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
      llvm.store %327, %328 : !llvm.ptr, !llvm.ptr
    } else {
    }
    %35 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
    %36 = llvm.load %35 : !llvm.ptr -> !llvm.ptr
    %37 = llvm.getelementptr %36[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %38 = llvm.intr.bswap(%25)  : (i256) -> i256
    llvm.store %38, %37 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb7
  ^bb7:  // pred: ^bb6
    %c-282693306169198560872784742741978202424711039104693490077813924759764729856_i256 = arith.constant -282693306169198560872784742741978202424711039104693490077813924759764729856 : i256
    %39 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %40 = llvm.load %39 : !llvm.ptr -> !llvm.ptr
    llvm.store %c-282693306169198560872784742741978202424711039104693490077813924759764729856_i256, %40 : i256, !llvm.ptr
    %41 = llvm.getelementptr %40[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %41, %39 : !llvm.ptr, !llvm.ptr
    cf.br ^bb8
  ^bb8:  // pred: ^bb7
    %c32_i256 = arith.constant 32 : i256
    %42 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %43 = llvm.load %42 : !llvm.ptr -> !llvm.ptr
    llvm.store %c32_i256, %43 : i256, !llvm.ptr
    %44 = llvm.getelementptr %43[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %44, %42 : !llvm.ptr, !llvm.ptr
    cf.br ^bb9
  ^bb9:  // pred: ^bb8
    %45 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %46 = llvm.load %45 : !llvm.ptr -> !llvm.ptr
    %47 = llvm.getelementptr %46[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %48 = llvm.load %47 : !llvm.ptr -> i256
    llvm.store %47, %45 : !llvm.ptr, !llvm.ptr
    %49 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %50 = llvm.load %49 : !llvm.ptr -> !llvm.ptr
    %51 = llvm.getelementptr %50[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %52 = llvm.load %51 : !llvm.ptr -> i256
    llvm.store %51, %49 : !llvm.ptr, !llvm.ptr
    %53 = arith.trunci %48 : i256 to i64
    %c32_i64_4 = arith.constant 32 : i64
    %54 = arith.addi %53, %c32_i64_4 : i64
    %c0_i64_5 = arith.constant 0 : i64
    %55 = arith.cmpi slt, %54, %c0_i64_5 : i64
    %c84_i8_6 = arith.constant 84 : i8
    cf.cond_br %55, ^bb1(%c84_i8_6 : i8), ^bb10
  ^bb10:  // pred: ^bb9
    %56 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    %57 = llvm.load %56 : !llvm.ptr -> i64
    %c31_i64_7 = arith.constant 31 : i64
    %c32_i64_8 = arith.constant 32 : i64
    %58 = arith.addi %54, %c31_i64_7 : i64
    %59 = arith.divui %58, %c32_i64_8 : i64
    %60 = arith.muli %59, %c32_i64_8 : i64
    %61 = arith.cmpi ult, %57, %60 : i64
    scf.if %61 {
      %327 = func.call @dora_extend_memory(%arg0, %60) : (!llvm.ptr, i64) -> !llvm.ptr
      llvm.store %60, %56 : i64, !llvm.ptr
      %328 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
      llvm.store %327, %328 : !llvm.ptr, !llvm.ptr
    } else {
    }
    %62 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
    %63 = llvm.load %62 : !llvm.ptr -> !llvm.ptr
    %64 = llvm.getelementptr %63[%53] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %65 = llvm.intr.bswap(%52)  : (i256) -> i256
    llvm.store %65, %64 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb11
  ^bb11:  // pred: ^bb10
    %c10123276409175967808859434475862811765392092841461775252157603250176_i256 = arith.constant 10123276409175967808859434475862811765392092841461775252157603250176 : i256
    %66 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %67 = llvm.load %66 : !llvm.ptr -> !llvm.ptr
    llvm.store %c10123276409175967808859434475862811765392092841461775252157603250176_i256, %67 : i256, !llvm.ptr
    %68 = llvm.getelementptr %67[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %68, %66 : !llvm.ptr, !llvm.ptr
    cf.br ^bb12
  ^bb12:  // pred: ^bb11
    %c64_i256 = arith.constant 64 : i256
    %69 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %70 = llvm.load %69 : !llvm.ptr -> !llvm.ptr
    llvm.store %c64_i256, %70 : i256, !llvm.ptr
    %71 = llvm.getelementptr %70[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %71, %69 : !llvm.ptr, !llvm.ptr
    cf.br ^bb13
  ^bb13:  // pred: ^bb12
    %72 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %73 = llvm.load %72 : !llvm.ptr -> !llvm.ptr
    %74 = llvm.getelementptr %73[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %75 = llvm.load %74 : !llvm.ptr -> i256
    llvm.store %74, %72 : !llvm.ptr, !llvm.ptr
    %76 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %77 = llvm.load %76 : !llvm.ptr -> !llvm.ptr
    %78 = llvm.getelementptr %77[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %79 = llvm.load %78 : !llvm.ptr -> i256
    llvm.store %78, %76 : !llvm.ptr, !llvm.ptr
    %80 = arith.trunci %75 : i256 to i64
    %c32_i64_9 = arith.constant 32 : i64
    %81 = arith.addi %80, %c32_i64_9 : i64
    %c0_i64_10 = arith.constant 0 : i64
    %82 = arith.cmpi slt, %81, %c0_i64_10 : i64
    %c84_i8_11 = arith.constant 84 : i8
    cf.cond_br %82, ^bb1(%c84_i8_11 : i8), ^bb14
  ^bb14:  // pred: ^bb13
    %83 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    %84 = llvm.load %83 : !llvm.ptr -> i64
    %c31_i64_12 = arith.constant 31 : i64
    %c32_i64_13 = arith.constant 32 : i64
    %85 = arith.addi %81, %c31_i64_12 : i64
    %86 = arith.divui %85, %c32_i64_13 : i64
    %87 = arith.muli %86, %c32_i64_13 : i64
    %88 = arith.cmpi ult, %84, %87 : i64
    scf.if %88 {
      %327 = func.call @dora_extend_memory(%arg0, %87) : (!llvm.ptr, i64) -> !llvm.ptr
      llvm.store %87, %83 : i64, !llvm.ptr
      %328 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
      llvm.store %327, %328 : !llvm.ptr, !llvm.ptr
    } else {
    }
    %89 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
    %90 = llvm.load %89 : !llvm.ptr -> !llvm.ptr
    %91 = llvm.getelementptr %90[%80] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %92 = llvm.intr.bswap(%79)  : (i256) -> i256
    llvm.store %92, %91 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb15
  ^bb15:  // pred: ^bb14
    %c77_i256 = arith.constant 77 : i256
    %93 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %94 = llvm.load %93 : !llvm.ptr -> !llvm.ptr
    llvm.store %c77_i256, %94 : i256, !llvm.ptr
    %95 = llvm.getelementptr %94[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %95, %93 : !llvm.ptr, !llvm.ptr
    cf.br ^bb16
  ^bb16:  // pred: ^bb15
    %c0_i256_14 = arith.constant 0 : i256
    %96 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %97 = llvm.load %96 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_14, %97 : i256, !llvm.ptr
    %98 = llvm.getelementptr %97[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %98, %96 : !llvm.ptr, !llvm.ptr
    cf.br ^bb17
  ^bb17:  // pred: ^bb16
    %c0_i256_15 = arith.constant 0 : i256
    %99 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %100 = llvm.load %99 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_15, %100 : i256, !llvm.ptr
    %101 = llvm.getelementptr %100[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %101, %99 : !llvm.ptr, !llvm.ptr
    cf.br ^bb18
  ^bb18:  // pred: ^bb17
    %102 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %103 = llvm.load %102 : !llvm.ptr -> !llvm.ptr
    %104 = llvm.getelementptr %103[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %105 = llvm.load %104 : !llvm.ptr -> i256
    llvm.store %104, %102 : !llvm.ptr, !llvm.ptr
    %106 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %107 = llvm.load %106 : !llvm.ptr -> !llvm.ptr
    %108 = llvm.getelementptr %107[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %109 = llvm.load %108 : !llvm.ptr -> i256
    llvm.store %108, %106 : !llvm.ptr, !llvm.ptr
    %110 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %111 = llvm.load %110 : !llvm.ptr -> !llvm.ptr
    %112 = llvm.getelementptr %111[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %113 = llvm.load %112 : !llvm.ptr -> i256
    llvm.store %112, %110 : !llvm.ptr, !llvm.ptr
    %114 = arith.trunci %109 : i256 to i64
    %115 = arith.trunci %113 : i256 to i64
    %116 = arith.addi %114, %115 : i64
    %c0_i64_16 = arith.constant 0 : i64
    %117 = arith.cmpi slt, %116, %c0_i64_16 : i64
    %c84_i8_17 = arith.constant 84 : i8
    cf.cond_br %117, ^bb1(%c84_i8_17 : i8), ^bb19
  ^bb19:  // pred: ^bb18
    %118 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    %119 = llvm.load %118 : !llvm.ptr -> i64
    %c31_i64_18 = arith.constant 31 : i64
    %c32_i64_19 = arith.constant 32 : i64
    %120 = arith.addi %116, %c31_i64_18 : i64
    %121 = arith.divui %120, %c32_i64_19 : i64
    %122 = arith.muli %121, %c32_i64_19 : i64
    %123 = arith.cmpi ult, %119, %122 : i64
    scf.if %123 {
      %327 = func.call @dora_extend_memory(%arg0, %122) : (!llvm.ptr, i64) -> !llvm.ptr
      llvm.store %122, %118 : i64, !llvm.ptr
      %328 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
      llvm.store %327, %328 : !llvm.ptr, !llvm.ptr
    } else {
    }
    %c1_i256 = arith.constant 1 : i256
    %124 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %105, %124 {alignment = 1 : i64} : i256, !llvm.ptr
    %125 = llvm.mlir.addressof @dora_gas_counter : !llvm.ptr
    %126 = llvm.load %125 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %127 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %126, %127 {alignment = 1 : i64} : i64, !llvm.ptr
    %128 = call @dora_create(%arg0, %115, %114, %124, %127) : (!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr) -> i8
    %c0_i8 = arith.constant 0 : i8
    %129 = arith.cmpi ne, %c0_i8, %128 : i8
    %c94_i8 = arith.constant 94 : i8
    cf.cond_br %129, ^bb1(%c94_i8 : i8), ^bb20
  ^bb20:  // pred: ^bb19
    %130 = llvm.load %124 : !llvm.ptr -> i256
    %131 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %132 = llvm.load %131 : !llvm.ptr -> !llvm.ptr
    llvm.store %130, %132 : i256, !llvm.ptr
    %133 = llvm.getelementptr %132[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %133, %131 : !llvm.ptr, !llvm.ptr
    cf.br ^bb21
  ^bb21:  // pred: ^bb20
    %c0_i256_20 = arith.constant 0 : i256
    %134 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %135 = llvm.load %134 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_20, %135 : i256, !llvm.ptr
    %136 = llvm.getelementptr %135[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %136, %134 : !llvm.ptr, !llvm.ptr
    cf.br ^bb22
  ^bb22:  // pred: ^bb21
    %c0_i256_21 = arith.constant 0 : i256
    %137 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %138 = llvm.load %137 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_21, %138 : i256, !llvm.ptr
    %139 = llvm.getelementptr %138[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %139, %137 : !llvm.ptr, !llvm.ptr
    cf.br ^bb23
  ^bb23:  // pred: ^bb22
    %c0_i256_22 = arith.constant 0 : i256
    %140 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %141 = llvm.load %140 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_22, %141 : i256, !llvm.ptr
    %142 = llvm.getelementptr %141[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %142, %140 : !llvm.ptr, !llvm.ptr
    cf.br ^bb24
  ^bb24:  // pred: ^bb23
    %c0_i256_23 = arith.constant 0 : i256
    %143 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %144 = llvm.load %143 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_23, %144 : i256, !llvm.ptr
    %145 = llvm.getelementptr %144[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %145, %143 : !llvm.ptr, !llvm.ptr
    cf.br ^bb25
  ^bb25:  // pred: ^bb24
    %146 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %147 = llvm.load %146 : !llvm.ptr -> !llvm.ptr
    %148 = llvm.getelementptr %147[-5] : (!llvm.ptr) -> !llvm.ptr, i256
    %149 = llvm.load %148 : !llvm.ptr -> i256
    %150 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %151 = llvm.load %150 : !llvm.ptr -> !llvm.ptr
    llvm.store %149, %151 : i256, !llvm.ptr
    %152 = llvm.getelementptr %151[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %152, %150 : !llvm.ptr, !llvm.ptr
    cf.br ^bb26
  ^bb26:  // pred: ^bb25
    %c4294967295_i256 = arith.constant 4294967295 : i256
    %153 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %154 = llvm.load %153 : !llvm.ptr -> !llvm.ptr
    llvm.store %c4294967295_i256, %154 : i256, !llvm.ptr
    %155 = llvm.getelementptr %154[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %155, %153 : !llvm.ptr, !llvm.ptr
    cf.br ^bb27
  ^bb27:  // pred: ^bb26
    %156 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %157 = llvm.load %156 : !llvm.ptr -> !llvm.ptr
    %158 = llvm.getelementptr %157[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %159 = llvm.load %158 : !llvm.ptr -> i256
    llvm.store %158, %156 : !llvm.ptr, !llvm.ptr
    %160 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %161 = llvm.load %160 : !llvm.ptr -> !llvm.ptr
    %162 = llvm.getelementptr %161[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %163 = llvm.load %162 : !llvm.ptr -> i256
    llvm.store %162, %160 : !llvm.ptr, !llvm.ptr
    %164 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %165 = llvm.load %164 : !llvm.ptr -> !llvm.ptr
    %166 = llvm.getelementptr %165[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %167 = llvm.load %166 : !llvm.ptr -> i256
    llvm.store %166, %164 : !llvm.ptr, !llvm.ptr
    %168 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %169 = llvm.load %168 : !llvm.ptr -> !llvm.ptr
    %170 = llvm.getelementptr %169[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %171 = llvm.load %170 : !llvm.ptr -> i256
    llvm.store %170, %168 : !llvm.ptr, !llvm.ptr
    %172 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %173 = llvm.load %172 : !llvm.ptr -> !llvm.ptr
    %174 = llvm.getelementptr %173[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %175 = llvm.load %174 : !llvm.ptr -> i256
    llvm.store %174, %172 : !llvm.ptr, !llvm.ptr
    %176 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %177 = llvm.load %176 : !llvm.ptr -> !llvm.ptr
    %178 = llvm.getelementptr %177[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %179 = llvm.load %178 : !llvm.ptr -> i256
    llvm.store %178, %176 : !llvm.ptr, !llvm.ptr
    %c0_i256_24 = arith.constant 0 : i256
    %180 = arith.trunci %159 : i256 to i64
    %181 = arith.trunci %167 : i256 to i64
    %182 = arith.trunci %171 : i256 to i64
    %183 = arith.trunci %175 : i256 to i64
    %184 = arith.trunci %179 : i256 to i64
    %185 = arith.addi %181, %182 : i64
    %186 = arith.addi %183, %184 : i64
    %187 = arith.maxui %185, %186 : i64
    %c0_i64_25 = arith.constant 0 : i64
    %188 = arith.cmpi slt, %187, %c0_i64_25 : i64
    %c84_i8_26 = arith.constant 84 : i8
    cf.cond_br %188, ^bb1(%c84_i8_26 : i8), ^bb28
  ^bb28:  // pred: ^bb27
    %189 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    %190 = llvm.load %189 : !llvm.ptr -> i64
    %c31_i64_27 = arith.constant 31 : i64
    %c32_i64_28 = arith.constant 32 : i64
    %191 = arith.addi %187, %c31_i64_27 : i64
    %192 = arith.divui %191, %c32_i64_28 : i64
    %193 = arith.muli %192, %c32_i64_28 : i64
    %194 = arith.cmpi ult, %190, %193 : i64
    scf.if %194 {
      %327 = func.call @dora_extend_memory(%arg0, %193) : (!llvm.ptr, i64) -> !llvm.ptr
      llvm.store %193, %189 : i64, !llvm.ptr
      %328 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
      llvm.store %327, %328 : !llvm.ptr, !llvm.ptr
    } else {
    }
    %195 = llvm.mlir.addressof @dora_gas_counter : !llvm.ptr
    %196 = llvm.load %195 : !llvm.ptr -> i64
    %c1_i256_29 = arith.constant 1 : i256
    %197 = llvm.alloca %c1_i256_29 x i256 : (i256) -> !llvm.ptr
    llvm.store %c0_i256_24, %197 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i256_30 = arith.constant 1 : i256
    %198 = llvm.alloca %c1_i256_30 x i256 : (i256) -> !llvm.ptr
    llvm.store %163, %198 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i64_31 = arith.constant 1 : i64
    %199 = llvm.alloca %c1_i64_31 x i64 : (i64) -> !llvm.ptr
    %c0_i8_32 = arith.constant 0 : i8
    %200 = call @dora_call(%arg0, %180, %198, %197, %181, %182, %183, %184, %196, %199, %c0_i8_32) : (!llvm.ptr, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr, i8) -> i8
    %201 = llvm.load %199 : !llvm.ptr -> i64
    %202 = arith.extui %200 : i8 to i256
    %203 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %204 = llvm.load %203 : !llvm.ptr -> !llvm.ptr
    llvm.store %202, %204 : i256, !llvm.ptr
    %205 = llvm.getelementptr %204[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %205, %203 : !llvm.ptr, !llvm.ptr
    cf.br ^bb29
  ^bb29:  // pred: ^bb28
    %206 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %207 = llvm.load %206 : !llvm.ptr -> !llvm.ptr
    %208 = llvm.getelementptr %207[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %209 = llvm.load %208 : !llvm.ptr -> i256
    llvm.store %208, %206 : !llvm.ptr, !llvm.ptr
    cf.br ^bb30
  ^bb30:  // pred: ^bb29
    %210 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %211 = llvm.load %210 : !llvm.ptr -> !llvm.ptr
    %212 = llvm.getelementptr %211[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %213 = llvm.load %212 : !llvm.ptr -> i256
    llvm.store %212, %210 : !llvm.ptr, !llvm.ptr
    cf.br ^bb31
  ^bb31:  // pred: ^bb30
    %c0_i256_33 = arith.constant 0 : i256
    %214 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %215 = llvm.load %214 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_33, %215 : i256, !llvm.ptr
    %216 = llvm.getelementptr %215[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %216, %214 : !llvm.ptr, !llvm.ptr
    cf.br ^bb32
  ^bb32:  // pred: ^bb31
    %c0_i256_34 = arith.constant 0 : i256
    %217 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %218 = llvm.load %217 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_34, %218 : i256, !llvm.ptr
    %219 = llvm.getelementptr %218[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %219, %217 : !llvm.ptr, !llvm.ptr
    cf.br ^bb33
  ^bb33:  // pred: ^bb32
    %220 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %221 = llvm.load %220 : !llvm.ptr -> !llvm.ptr
    %222 = llvm.getelementptr %221[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %223 = llvm.load %222 : !llvm.ptr -> i256
    llvm.store %222, %220 : !llvm.ptr, !llvm.ptr
    %224 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %225 = llvm.load %224 : !llvm.ptr -> !llvm.ptr
    %226 = llvm.getelementptr %225[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %227 = llvm.load %226 : !llvm.ptr -> i256
    llvm.store %226, %224 : !llvm.ptr, !llvm.ptr
    %228 = arith.trunci %223 : i256 to i64
    %c32_i64_35 = arith.constant 32 : i64
    %229 = arith.addi %228, %c32_i64_35 : i64
    %c0_i64_36 = arith.constant 0 : i64
    %230 = arith.cmpi slt, %229, %c0_i64_36 : i64
    %c84_i8_37 = arith.constant 84 : i8
    cf.cond_br %230, ^bb1(%c84_i8_37 : i8), ^bb34
  ^bb34:  // pred: ^bb33
    %231 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    %232 = llvm.load %231 : !llvm.ptr -> i64
    %c31_i64_38 = arith.constant 31 : i64
    %c32_i64_39 = arith.constant 32 : i64
    %233 = arith.addi %229, %c31_i64_38 : i64
    %234 = arith.divui %233, %c32_i64_39 : i64
    %235 = arith.muli %234, %c32_i64_39 : i64
    %236 = arith.cmpi ult, %232, %235 : i64
    scf.if %236 {
      %327 = func.call @dora_extend_memory(%arg0, %235) : (!llvm.ptr, i64) -> !llvm.ptr
      llvm.store %235, %231 : i64, !llvm.ptr
      %328 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
      llvm.store %327, %328 : !llvm.ptr, !llvm.ptr
    } else {
    }
    %237 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
    %238 = llvm.load %237 : !llvm.ptr -> !llvm.ptr
    %239 = llvm.getelementptr %238[%228] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %240 = llvm.intr.bswap(%227)  : (i256) -> i256
    llvm.store %240, %239 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb35
  ^bb35:  // pred: ^bb34
    %c0_i256_40 = arith.constant 0 : i256
    %241 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %242 = llvm.load %241 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_40, %242 : i256, !llvm.ptr
    %243 = llvm.getelementptr %242[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %243, %241 : !llvm.ptr, !llvm.ptr
    cf.br ^bb36
  ^bb36:  // pred: ^bb35
    %c32_i256_41 = arith.constant 32 : i256
    %244 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %245 = llvm.load %244 : !llvm.ptr -> !llvm.ptr
    llvm.store %c32_i256_41, %245 : i256, !llvm.ptr
    %246 = llvm.getelementptr %245[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %246, %244 : !llvm.ptr, !llvm.ptr
    cf.br ^bb37
  ^bb37:  // pred: ^bb36
    %247 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %248 = llvm.load %247 : !llvm.ptr -> !llvm.ptr
    %249 = llvm.getelementptr %248[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %250 = llvm.load %249 : !llvm.ptr -> i256
    llvm.store %249, %247 : !llvm.ptr, !llvm.ptr
    %251 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %252 = llvm.load %251 : !llvm.ptr -> !llvm.ptr
    %253 = llvm.getelementptr %252[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %254 = llvm.load %253 : !llvm.ptr -> i256
    llvm.store %253, %251 : !llvm.ptr, !llvm.ptr
    %255 = arith.trunci %250 : i256 to i64
    %c32_i64_42 = arith.constant 32 : i64
    %256 = arith.addi %255, %c32_i64_42 : i64
    %c0_i64_43 = arith.constant 0 : i64
    %257 = arith.cmpi slt, %256, %c0_i64_43 : i64
    %c84_i8_44 = arith.constant 84 : i8
    cf.cond_br %257, ^bb1(%c84_i8_44 : i8), ^bb38
  ^bb38:  // pred: ^bb37
    %258 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    %259 = llvm.load %258 : !llvm.ptr -> i64
    %c31_i64_45 = arith.constant 31 : i64
    %c32_i64_46 = arith.constant 32 : i64
    %260 = arith.addi %256, %c31_i64_45 : i64
    %261 = arith.divui %260, %c32_i64_46 : i64
    %262 = arith.muli %261, %c32_i64_46 : i64
    %263 = arith.cmpi ult, %259, %262 : i64
    scf.if %263 {
      %327 = func.call @dora_extend_memory(%arg0, %262) : (!llvm.ptr, i64) -> !llvm.ptr
      llvm.store %262, %258 : i64, !llvm.ptr
      %328 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
      llvm.store %327, %328 : !llvm.ptr, !llvm.ptr
    } else {
    }
    %264 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
    %265 = llvm.load %264 : !llvm.ptr -> !llvm.ptr
    %266 = llvm.getelementptr %265[%255] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %267 = llvm.intr.bswap(%254)  : (i256) -> i256
    llvm.store %267, %266 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb39
  ^bb39:  // pred: ^bb38
    %c0_i256_47 = arith.constant 0 : i256
    %268 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %269 = llvm.load %268 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_47, %269 : i256, !llvm.ptr
    %270 = llvm.getelementptr %269[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %270, %268 : !llvm.ptr, !llvm.ptr
    cf.br ^bb40
  ^bb40:  // pred: ^bb39
    %c64_i256_48 = arith.constant 64 : i256
    %271 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %272 = llvm.load %271 : !llvm.ptr -> !llvm.ptr
    llvm.store %c64_i256_48, %272 : i256, !llvm.ptr
    %273 = llvm.getelementptr %272[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %273, %271 : !llvm.ptr, !llvm.ptr
    cf.br ^bb41
  ^bb41:  // pred: ^bb40
    %274 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %275 = llvm.load %274 : !llvm.ptr -> !llvm.ptr
    %276 = llvm.getelementptr %275[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %277 = llvm.load %276 : !llvm.ptr -> i256
    llvm.store %276, %274 : !llvm.ptr, !llvm.ptr
    %278 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %279 = llvm.load %278 : !llvm.ptr -> !llvm.ptr
    %280 = llvm.getelementptr %279[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %281 = llvm.load %280 : !llvm.ptr -> i256
    llvm.store %280, %278 : !llvm.ptr, !llvm.ptr
    %282 = arith.trunci %277 : i256 to i64
    %c32_i64_49 = arith.constant 32 : i64
    %283 = arith.addi %282, %c32_i64_49 : i64
    %c0_i64_50 = arith.constant 0 : i64
    %284 = arith.cmpi slt, %283, %c0_i64_50 : i64
    %c84_i8_51 = arith.constant 84 : i8
    cf.cond_br %284, ^bb1(%c84_i8_51 : i8), ^bb42
  ^bb42:  // pred: ^bb41
    %285 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    %286 = llvm.load %285 : !llvm.ptr -> i64
    %c31_i64_52 = arith.constant 31 : i64
    %c32_i64_53 = arith.constant 32 : i64
    %287 = arith.addi %283, %c31_i64_52 : i64
    %288 = arith.divui %287, %c32_i64_53 : i64
    %289 = arith.muli %288, %c32_i64_53 : i64
    %290 = arith.cmpi ult, %286, %289 : i64
    scf.if %290 {
      %327 = func.call @dora_extend_memory(%arg0, %289) : (!llvm.ptr, i64) -> !llvm.ptr
      llvm.store %289, %285 : i64, !llvm.ptr
      %328 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
      llvm.store %327, %328 : !llvm.ptr, !llvm.ptr
    } else {
    }
    %291 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
    %292 = llvm.load %291 : !llvm.ptr -> !llvm.ptr
    %293 = llvm.getelementptr %292[%282] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %294 = llvm.intr.bswap(%281)  : (i256) -> i256
    llvm.store %294, %293 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb43
  ^bb43:  // pred: ^bb42
    %c32_i256_54 = arith.constant 32 : i256
    %295 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %296 = llvm.load %295 : !llvm.ptr -> !llvm.ptr
    llvm.store %c32_i256_54, %296 : i256, !llvm.ptr
    %297 = llvm.getelementptr %296[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %297, %295 : !llvm.ptr, !llvm.ptr
    cf.br ^bb44
  ^bb44:  // pred: ^bb43
    %c0_i256_55 = arith.constant 0 : i256
    %298 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %299 = llvm.load %298 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_55, %299 : i256, !llvm.ptr
    %300 = llvm.getelementptr %299[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %300, %298 : !llvm.ptr, !llvm.ptr
    cf.br ^bb45
  ^bb45:  // pred: ^bb44
    %c0_i256_56 = arith.constant 0 : i256
    %301 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %302 = llvm.load %301 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_56, %302 : i256, !llvm.ptr
    %303 = llvm.getelementptr %302[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %303, %301 : !llvm.ptr, !llvm.ptr
    cf.br ^bb46
  ^bb46:  // pred: ^bb45
    %304 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %305 = llvm.load %304 : !llvm.ptr -> !llvm.ptr
    %306 = llvm.getelementptr %305[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %307 = llvm.load %306 : !llvm.ptr -> i256
    llvm.store %306, %304 : !llvm.ptr, !llvm.ptr
    %308 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %309 = llvm.load %308 : !llvm.ptr -> !llvm.ptr
    %310 = llvm.getelementptr %309[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %311 = llvm.load %310 : !llvm.ptr -> i256
    llvm.store %310, %308 : !llvm.ptr, !llvm.ptr
    %312 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %313 = llvm.load %312 : !llvm.ptr -> !llvm.ptr
    %314 = llvm.getelementptr %313[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %315 = llvm.load %314 : !llvm.ptr -> i256
    llvm.store %314, %312 : !llvm.ptr, !llvm.ptr
    %316 = arith.trunci %307 : i256 to i64
    %317 = arith.trunci %311 : i256 to i64
    %318 = arith.trunci %315 : i256 to i64
    %319 = arith.addi %316, %318 : i64
    %c0_i64_57 = arith.constant 0 : i64
    %320 = arith.cmpi slt, %319, %c0_i64_57 : i64
    %c84_i8_58 = arith.constant 84 : i8
    cf.cond_br %320, ^bb1(%c84_i8_58 : i8), ^bb47
  ^bb47:  // pred: ^bb46
    %321 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    %322 = llvm.load %321 : !llvm.ptr -> i64
    %c31_i64_59 = arith.constant 31 : i64
    %c32_i64_60 = arith.constant 32 : i64
    %323 = arith.addi %319, %c31_i64_59 : i64
    %324 = arith.divui %323, %c32_i64_60 : i64
    %325 = arith.muli %324, %c32_i64_60 : i64
    %326 = arith.cmpi ult, %322, %325 : i64
    scf.if %326 {
      %327 = func.call @dora_extend_memory(%arg0, %325) : (!llvm.ptr, i64) -> !llvm.ptr
      llvm.store %325, %321 : i64, !llvm.ptr
      %328 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
      llvm.store %327, %328 : !llvm.ptr, !llvm.ptr
    } else {
    }
    call @dora_copy_return_data_into_memory(%arg0, %316, %317, %318) : (!llvm.ptr, i64, i64, i64) -> ()
    cf.br ^bb48
  ^bb48:  // pred: ^bb47
    %c0_i64_61 = arith.constant 0 : i64
    %c1_i8 = arith.constant 1 : i8
    call @dora_write_result(%arg0, %c0_i64_61, %c0_i64_61, %arg1, %c1_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c1_i8 : i8
  }
}
