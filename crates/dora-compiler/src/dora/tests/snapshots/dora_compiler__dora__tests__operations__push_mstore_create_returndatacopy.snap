---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  llvm.mlir.global internal @dora_stack_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_stack_length() {addr_space = 0 : i32} : i32
  llvm.mlir.global internal @dora_memory_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_memory_size() {addr_space = 0 : i32} : i32
  llvm.mlir.global internal @dora_calldata_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_calldata_size() {addr_space = 0 : i32} : i32
  llvm.mlir.global internal @dora_gas_counter() {addr_space = 0 : i32} : i64
  llvm.mlir.global external @dora_ctx_is_static() {addr_space = 0 : i32} : !llvm.ptr
  func.func private @dora_debug_print(i32)
  func.func private @dora_write_result(!llvm.ptr, i32, i32, i64, i8)
  func.func private @dora_keccak256_hasher(!llvm.ptr, i32, i32, !llvm.ptr)
  func.func private @dora_get_calldata_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_get_calldata_size(!llvm.ptr) -> i32
  func.func private @dora_get_chainid(!llvm.ptr) -> i64
  func.func private @dora_store_in_callvalue_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_caller_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_get_gaslimit(!llvm.ptr) -> i64
  func.func private @dora_extend_memory(!llvm.ptr, i32) -> !llvm.ptr
  func.func private @dora_copy_code_to_memory(!llvm.ptr, i32, i32, i32)
  func.func private @dora_read_storage(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_write_storage(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> i64
  func.func private @dora_append_log(!llvm.ptr, i32, i32)
  func.func private @dora_append_log_with_one_topic(!llvm.ptr, i32, i32, !llvm.ptr)
  func.func private @dora_append_log_with_two_topics(!llvm.ptr, i32, i32, !llvm.ptr, !llvm.ptr)
  func.func private @dora_append_log_with_three_topics(!llvm.ptr, i32, i32, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_append_log_with_four_topics(!llvm.ptr, i32, i32, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_get_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_get_coinbase_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_get_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_get_codesize_from_address(!llvm.ptr, !llvm.ptr) -> i64
  func.func private @dora_get_address_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_get_prevrandao(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_call(!llvm.ptr, i64, !llvm.ptr, !llvm.ptr, i32, i32, i32, i32, i64, !llvm.ptr, i8) -> i8
  func.func private @dora_store_in_balance(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_copy_ext_code_to_memory(!llvm.ptr, !llvm.ptr, i32, i32, i32)
  func.func private @dora_get_blob_hash_at_index(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_get_block_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_get_code_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_create(!llvm.ptr, i32, i32, !llvm.ptr, !llvm.ptr) -> i8
  func.func private @dora_create2(!llvm.ptr, i32, i32, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
  func.func private @dora_get_return_data_size(!llvm.ptr) -> i32
  func.func private @dora_copy_return_data_into_memory(!llvm.ptr, i32, i32, i32)
  func.func private @dora_selfdestruct(!llvm.ptr, !llvm.ptr) -> i64
  func.func private @dora_transient_storage_read(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_transient_storage_write(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func public @main(%arg0: !llvm.ptr, %arg1: i64) -> i8 attributes {llvm.emit_c_interface} {
    %c1024_i256 = arith.constant 1024 : i256
    %0 = llvm.alloca %c1024_i256 x i256 : (i256) -> !llvm.ptr
    %1 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    llvm.store %0, %1 : !llvm.ptr, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %2 = llvm.mlir.addressof @dora_stack_length : !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c0_i32_0 = arith.constant 0 : i32
    %3 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    llvm.store %c0_i32_0, %3 : i32, !llvm.ptr
    %4 = call @dora_get_calldata_ptr(%arg0) : (!llvm.ptr) -> !llvm.ptr
    %5 = llvm.mlir.addressof @dora_calldata_ptr : !llvm.ptr
    llvm.store %4, %5 : !llvm.ptr, !llvm.ptr
    %6 = call @dora_get_calldata_size(%arg0) : (!llvm.ptr) -> i32
    %7 = llvm.mlir.addressof @dora_calldata_size : !llvm.ptr
    llvm.store %6, %7 : i32, !llvm.ptr
    %8 = llvm.mlir.addressof @dora_gas_counter : !llvm.ptr
    llvm.store %arg1, %8 : i64, !llvm.ptr
    %9 = llvm.mlir.addressof @dora_stack_length : !llvm.ptr
    %c1024_i32 = arith.constant 1024 : i32
    cf.br ^bb3
  ^bb1:  // 2 preds: ^bb2, ^bb15
    %c0_i32_1 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %c3_i8 = arith.constant 3 : i8
    call @dora_write_result(%arg0, %c0_i32_1, %c0_i32_1, %c0_i64, %c3_i8) : (!llvm.ptr, i32, i32, i64, i8) -> ()
    return %c3_i8 : i8
  ^bb2(%10: i256):  // no predecessors
    cf.switch %10 : i256, [
      default: ^bb1
    ]
  ^bb3:  // pred: ^bb0
    %c57669888194366464517598830424248860356609074394020202793089226410191109488639_i256 = arith.constant 57669888194366464517598830424248860356609074394020202793089226410191109488639 : i256
    %11 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    llvm.store %c57669888194366464517598830424248860356609074394020202793089226410191109488639_i256, %12 : i256, !llvm.ptr
    %13 = llvm.getelementptr %12[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %13, %11 : !llvm.ptr, !llvm.ptr
    cf.br ^bb4
  ^bb4:  // pred: ^bb3
    %c0_i256 = arith.constant 0 : i256
    %14 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %15 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256, %15 : i256, !llvm.ptr
    %16 = llvm.getelementptr %15[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %16, %14 : !llvm.ptr, !llvm.ptr
    cf.br ^bb5
  ^bb5:  // pred: ^bb4
    %17 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %18 = llvm.load %17 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.getelementptr %18[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %20 = llvm.load %19 : !llvm.ptr -> i256
    llvm.store %19, %17 : !llvm.ptr, !llvm.ptr
    %21 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %22 = llvm.load %21 : !llvm.ptr -> !llvm.ptr
    %23 = llvm.getelementptr %22[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %24 = llvm.load %23 : !llvm.ptr -> i256
    llvm.store %23, %21 : !llvm.ptr, !llvm.ptr
    %25 = arith.trunci %20 : i256 to i32
    %c32_i32 = arith.constant 32 : i32
    %26 = arith.addi %25, %c32_i32 : i32
    %27 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    %28 = llvm.load %27 : !llvm.ptr -> i32
    %c31_i32 = arith.constant 31 : i32
    %c32_i32_2 = arith.constant 32 : i32
    %29 = arith.addi %26, %c31_i32 : i32
    %30 = arith.divui %29, %c32_i32_2 : i32
    %31 = arith.muli %30, %c32_i32_2 : i32
    %32 = arith.cmpi ult, %28, %31 : i32
    scf.if %32 {
      %317 = func.call @dora_extend_memory(%arg0, %31) : (!llvm.ptr, i32) -> !llvm.ptr
      llvm.store %31, %27 : i32, !llvm.ptr
      %318 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
      llvm.store %317, %318 : !llvm.ptr, !llvm.ptr
    } else {
    }
    %33 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
    %34 = llvm.load %33 : !llvm.ptr -> !llvm.ptr
    %35 = llvm.getelementptr %34[%25] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %36 = llvm.intr.bswap(%24)  : (i256) -> i256
    llvm.store %36, %35 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb6
  ^bb6:  // pred: ^bb5
    %c-282693306169198560872784742741978202424711039104693490077813924759764729856_i256 = arith.constant -282693306169198560872784742741978202424711039104693490077813924759764729856 : i256
    %37 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %38 = llvm.load %37 : !llvm.ptr -> !llvm.ptr
    llvm.store %c-282693306169198560872784742741978202424711039104693490077813924759764729856_i256, %38 : i256, !llvm.ptr
    %39 = llvm.getelementptr %38[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %39, %37 : !llvm.ptr, !llvm.ptr
    cf.br ^bb7
  ^bb7:  // pred: ^bb6
    %c32_i256 = arith.constant 32 : i256
    %40 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %41 = llvm.load %40 : !llvm.ptr -> !llvm.ptr
    llvm.store %c32_i256, %41 : i256, !llvm.ptr
    %42 = llvm.getelementptr %41[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %42, %40 : !llvm.ptr, !llvm.ptr
    cf.br ^bb8
  ^bb8:  // pred: ^bb7
    %43 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %44 = llvm.load %43 : !llvm.ptr -> !llvm.ptr
    %45 = llvm.getelementptr %44[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %46 = llvm.load %45 : !llvm.ptr -> i256
    llvm.store %45, %43 : !llvm.ptr, !llvm.ptr
    %47 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %48 = llvm.load %47 : !llvm.ptr -> !llvm.ptr
    %49 = llvm.getelementptr %48[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %50 = llvm.load %49 : !llvm.ptr -> i256
    llvm.store %49, %47 : !llvm.ptr, !llvm.ptr
    %51 = arith.trunci %46 : i256 to i32
    %c32_i32_3 = arith.constant 32 : i32
    %52 = arith.addi %51, %c32_i32_3 : i32
    %53 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    %54 = llvm.load %53 : !llvm.ptr -> i32
    %c31_i32_4 = arith.constant 31 : i32
    %c32_i32_5 = arith.constant 32 : i32
    %55 = arith.addi %52, %c31_i32_4 : i32
    %56 = arith.divui %55, %c32_i32_5 : i32
    %57 = arith.muli %56, %c32_i32_5 : i32
    %58 = arith.cmpi ult, %54, %57 : i32
    scf.if %58 {
      %317 = func.call @dora_extend_memory(%arg0, %57) : (!llvm.ptr, i32) -> !llvm.ptr
      llvm.store %57, %53 : i32, !llvm.ptr
      %318 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
      llvm.store %317, %318 : !llvm.ptr, !llvm.ptr
    } else {
    }
    %59 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
    %60 = llvm.load %59 : !llvm.ptr -> !llvm.ptr
    %61 = llvm.getelementptr %60[%51] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %62 = llvm.intr.bswap(%50)  : (i256) -> i256
    llvm.store %62, %61 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb9
  ^bb9:  // pred: ^bb8
    %c10123276409175967808859434475862811765392092841461775252157603250176_i256 = arith.constant 10123276409175967808859434475862811765392092841461775252157603250176 : i256
    %63 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %64 = llvm.load %63 : !llvm.ptr -> !llvm.ptr
    llvm.store %c10123276409175967808859434475862811765392092841461775252157603250176_i256, %64 : i256, !llvm.ptr
    %65 = llvm.getelementptr %64[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %65, %63 : !llvm.ptr, !llvm.ptr
    cf.br ^bb10
  ^bb10:  // pred: ^bb9
    %c64_i256 = arith.constant 64 : i256
    %66 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %67 = llvm.load %66 : !llvm.ptr -> !llvm.ptr
    llvm.store %c64_i256, %67 : i256, !llvm.ptr
    %68 = llvm.getelementptr %67[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %68, %66 : !llvm.ptr, !llvm.ptr
    cf.br ^bb11
  ^bb11:  // pred: ^bb10
    %69 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %70 = llvm.load %69 : !llvm.ptr -> !llvm.ptr
    %71 = llvm.getelementptr %70[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %72 = llvm.load %71 : !llvm.ptr -> i256
    llvm.store %71, %69 : !llvm.ptr, !llvm.ptr
    %73 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %74 = llvm.load %73 : !llvm.ptr -> !llvm.ptr
    %75 = llvm.getelementptr %74[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %76 = llvm.load %75 : !llvm.ptr -> i256
    llvm.store %75, %73 : !llvm.ptr, !llvm.ptr
    %77 = arith.trunci %72 : i256 to i32
    %c32_i32_6 = arith.constant 32 : i32
    %78 = arith.addi %77, %c32_i32_6 : i32
    %79 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    %80 = llvm.load %79 : !llvm.ptr -> i32
    %c31_i32_7 = arith.constant 31 : i32
    %c32_i32_8 = arith.constant 32 : i32
    %81 = arith.addi %78, %c31_i32_7 : i32
    %82 = arith.divui %81, %c32_i32_8 : i32
    %83 = arith.muli %82, %c32_i32_8 : i32
    %84 = arith.cmpi ult, %80, %83 : i32
    scf.if %84 {
      %317 = func.call @dora_extend_memory(%arg0, %83) : (!llvm.ptr, i32) -> !llvm.ptr
      llvm.store %83, %79 : i32, !llvm.ptr
      %318 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
      llvm.store %317, %318 : !llvm.ptr, !llvm.ptr
    } else {
    }
    %85 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
    %86 = llvm.load %85 : !llvm.ptr -> !llvm.ptr
    %87 = llvm.getelementptr %86[%77] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %88 = llvm.intr.bswap(%76)  : (i256) -> i256
    llvm.store %88, %87 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb12
  ^bb12:  // pred: ^bb11
    %c77_i256 = arith.constant 77 : i256
    %89 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %90 = llvm.load %89 : !llvm.ptr -> !llvm.ptr
    llvm.store %c77_i256, %90 : i256, !llvm.ptr
    %91 = llvm.getelementptr %90[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %91, %89 : !llvm.ptr, !llvm.ptr
    cf.br ^bb13
  ^bb13:  // pred: ^bb12
    %c0_i256_9 = arith.constant 0 : i256
    %92 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %93 = llvm.load %92 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_9, %93 : i256, !llvm.ptr
    %94 = llvm.getelementptr %93[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %94, %92 : !llvm.ptr, !llvm.ptr
    cf.br ^bb14
  ^bb14:  // pred: ^bb13
    %c0_i256_10 = arith.constant 0 : i256
    %95 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %96 = llvm.load %95 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_10, %96 : i256, !llvm.ptr
    %97 = llvm.getelementptr %96[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %97, %95 : !llvm.ptr, !llvm.ptr
    cf.br ^bb15
  ^bb15:  // pred: ^bb14
    %98 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %99 = llvm.load %98 : !llvm.ptr -> !llvm.ptr
    %100 = llvm.getelementptr %99[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %101 = llvm.load %100 : !llvm.ptr -> i256
    llvm.store %100, %98 : !llvm.ptr, !llvm.ptr
    %102 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %103 = llvm.load %102 : !llvm.ptr -> !llvm.ptr
    %104 = llvm.getelementptr %103[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %105 = llvm.load %104 : !llvm.ptr -> i256
    llvm.store %104, %102 : !llvm.ptr, !llvm.ptr
    %106 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %107 = llvm.load %106 : !llvm.ptr -> !llvm.ptr
    %108 = llvm.getelementptr %107[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %109 = llvm.load %108 : !llvm.ptr -> i256
    llvm.store %108, %106 : !llvm.ptr, !llvm.ptr
    %110 = arith.trunci %105 : i256 to i32
    %111 = arith.trunci %109 : i256 to i32
    %112 = arith.addi %110, %111 : i32
    %113 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    %114 = llvm.load %113 : !llvm.ptr -> i32
    %c31_i32_11 = arith.constant 31 : i32
    %c32_i32_12 = arith.constant 32 : i32
    %115 = arith.addi %112, %c31_i32_11 : i32
    %116 = arith.divui %115, %c32_i32_12 : i32
    %117 = arith.muli %116, %c32_i32_12 : i32
    %118 = arith.cmpi ult, %114, %117 : i32
    scf.if %118 {
      %317 = func.call @dora_extend_memory(%arg0, %117) : (!llvm.ptr, i32) -> !llvm.ptr
      llvm.store %117, %113 : i32, !llvm.ptr
      %318 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
      llvm.store %317, %318 : !llvm.ptr, !llvm.ptr
    } else {
    }
    %c1_i256 = arith.constant 1 : i256
    %119 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %101, %119 {alignment = 1 : i64} : i256, !llvm.ptr
    %120 = llvm.mlir.addressof @dora_gas_counter : !llvm.ptr
    %121 = llvm.load %120 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %122 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %121, %122 {alignment = 1 : i64} : i64, !llvm.ptr
    %123 = call @dora_create(%arg0, %111, %110, %119, %122) : (!llvm.ptr, i32, i32, !llvm.ptr, !llvm.ptr) -> i8
    %c0_i8 = arith.constant 0 : i8
    %124 = arith.cmpi eq, %c0_i8, %123 : i8
    %125 = llvm.load %119 : !llvm.ptr -> i256
    cf.cond_br %124, ^bb16, ^bb1
  ^bb16:  // pred: ^bb15
    %126 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %127 = llvm.load %126 : !llvm.ptr -> !llvm.ptr
    llvm.store %125, %127 : i256, !llvm.ptr
    %128 = llvm.getelementptr %127[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %128, %126 : !llvm.ptr, !llvm.ptr
    cf.br ^bb17
  ^bb17:  // pred: ^bb16
    %c0_i256_13 = arith.constant 0 : i256
    %129 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %130 = llvm.load %129 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_13, %130 : i256, !llvm.ptr
    %131 = llvm.getelementptr %130[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %131, %129 : !llvm.ptr, !llvm.ptr
    cf.br ^bb18
  ^bb18:  // pred: ^bb17
    %c0_i256_14 = arith.constant 0 : i256
    %132 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %133 = llvm.load %132 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_14, %133 : i256, !llvm.ptr
    %134 = llvm.getelementptr %133[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %134, %132 : !llvm.ptr, !llvm.ptr
    cf.br ^bb19
  ^bb19:  // pred: ^bb18
    %c0_i256_15 = arith.constant 0 : i256
    %135 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %136 = llvm.load %135 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_15, %136 : i256, !llvm.ptr
    %137 = llvm.getelementptr %136[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %137, %135 : !llvm.ptr, !llvm.ptr
    cf.br ^bb20
  ^bb20:  // pred: ^bb19
    %c0_i256_16 = arith.constant 0 : i256
    %138 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %139 = llvm.load %138 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_16, %139 : i256, !llvm.ptr
    %140 = llvm.getelementptr %139[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %140, %138 : !llvm.ptr, !llvm.ptr
    cf.br ^bb21
  ^bb21:  // pred: ^bb20
    %141 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %142 = llvm.load %141 : !llvm.ptr -> !llvm.ptr
    %143 = llvm.getelementptr %142[-5] : (!llvm.ptr) -> !llvm.ptr, i256
    %144 = llvm.load %143 : !llvm.ptr -> i256
    %145 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %146 = llvm.load %145 : !llvm.ptr -> !llvm.ptr
    llvm.store %144, %146 : i256, !llvm.ptr
    %147 = llvm.getelementptr %146[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %147, %145 : !llvm.ptr, !llvm.ptr
    cf.br ^bb22
  ^bb22:  // pred: ^bb21
    %c4294967295_i256 = arith.constant 4294967295 : i256
    %148 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %149 = llvm.load %148 : !llvm.ptr -> !llvm.ptr
    llvm.store %c4294967295_i256, %149 : i256, !llvm.ptr
    %150 = llvm.getelementptr %149[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %150, %148 : !llvm.ptr, !llvm.ptr
    cf.br ^bb23
  ^bb23:  // pred: ^bb22
    %151 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %152 = llvm.load %151 : !llvm.ptr -> !llvm.ptr
    %153 = llvm.getelementptr %152[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %154 = llvm.load %153 : !llvm.ptr -> i256
    llvm.store %153, %151 : !llvm.ptr, !llvm.ptr
    %155 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %156 = llvm.load %155 : !llvm.ptr -> !llvm.ptr
    %157 = llvm.getelementptr %156[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %158 = llvm.load %157 : !llvm.ptr -> i256
    llvm.store %157, %155 : !llvm.ptr, !llvm.ptr
    %159 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %160 = llvm.load %159 : !llvm.ptr -> !llvm.ptr
    %161 = llvm.getelementptr %160[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %162 = llvm.load %161 : !llvm.ptr -> i256
    llvm.store %161, %159 : !llvm.ptr, !llvm.ptr
    %163 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %164 = llvm.load %163 : !llvm.ptr -> !llvm.ptr
    %165 = llvm.getelementptr %164[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %166 = llvm.load %165 : !llvm.ptr -> i256
    llvm.store %165, %163 : !llvm.ptr, !llvm.ptr
    %167 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %168 = llvm.load %167 : !llvm.ptr -> !llvm.ptr
    %169 = llvm.getelementptr %168[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %170 = llvm.load %169 : !llvm.ptr -> i256
    llvm.store %169, %167 : !llvm.ptr, !llvm.ptr
    %171 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %172 = llvm.load %171 : !llvm.ptr -> !llvm.ptr
    %173 = llvm.getelementptr %172[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %174 = llvm.load %173 : !llvm.ptr -> i256
    llvm.store %173, %171 : !llvm.ptr, !llvm.ptr
    %c0_i256_17 = arith.constant 0 : i256
    %175 = arith.trunci %154 : i256 to i64
    %176 = arith.trunci %162 : i256 to i32
    %177 = arith.trunci %166 : i256 to i32
    %178 = arith.trunci %170 : i256 to i32
    %179 = arith.trunci %174 : i256 to i32
    %180 = arith.addi %176, %177 : i32
    %181 = arith.addi %178, %179 : i32
    %182 = arith.maxui %180, %181 : i32
    %183 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    %184 = llvm.load %183 : !llvm.ptr -> i32
    %c31_i32_18 = arith.constant 31 : i32
    %c32_i32_19 = arith.constant 32 : i32
    %185 = arith.addi %182, %c31_i32_18 : i32
    %186 = arith.divui %185, %c32_i32_19 : i32
    %187 = arith.muli %186, %c32_i32_19 : i32
    %188 = arith.cmpi ult, %184, %187 : i32
    scf.if %188 {
      %317 = func.call @dora_extend_memory(%arg0, %187) : (!llvm.ptr, i32) -> !llvm.ptr
      llvm.store %187, %183 : i32, !llvm.ptr
      %318 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
      llvm.store %317, %318 : !llvm.ptr, !llvm.ptr
    } else {
    }
    %189 = llvm.mlir.addressof @dora_gas_counter : !llvm.ptr
    %190 = llvm.load %189 : !llvm.ptr -> i64
    %c1_i256_20 = arith.constant 1 : i256
    %191 = llvm.alloca %c1_i256_20 x i256 : (i256) -> !llvm.ptr
    llvm.store %c0_i256_17, %191 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i256_21 = arith.constant 1 : i256
    %192 = llvm.alloca %c1_i256_21 x i256 : (i256) -> !llvm.ptr
    llvm.store %158, %192 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i64_22 = arith.constant 1 : i64
    %193 = llvm.alloca %c1_i64_22 x i64 : (i64) -> !llvm.ptr
    %c0_i8_23 = arith.constant 0 : i8
    %194 = call @dora_call(%arg0, %175, %192, %191, %176, %177, %178, %179, %190, %193, %c0_i8_23) : (!llvm.ptr, i64, !llvm.ptr, !llvm.ptr, i32, i32, i32, i32, i64, !llvm.ptr, i8) -> i8
    %195 = llvm.load %193 : !llvm.ptr -> i64
    %196 = arith.extui %194 : i8 to i256
    %197 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %198 = llvm.load %197 : !llvm.ptr -> !llvm.ptr
    llvm.store %196, %198 : i256, !llvm.ptr
    %199 = llvm.getelementptr %198[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %199, %197 : !llvm.ptr, !llvm.ptr
    cf.br ^bb24
  ^bb24:  // pred: ^bb23
    %200 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %201 = llvm.load %200 : !llvm.ptr -> !llvm.ptr
    %202 = llvm.getelementptr %201[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %203 = llvm.load %202 : !llvm.ptr -> i256
    llvm.store %202, %200 : !llvm.ptr, !llvm.ptr
    cf.br ^bb25
  ^bb25:  // pred: ^bb24
    %204 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %205 = llvm.load %204 : !llvm.ptr -> !llvm.ptr
    %206 = llvm.getelementptr %205[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %207 = llvm.load %206 : !llvm.ptr -> i256
    llvm.store %206, %204 : !llvm.ptr, !llvm.ptr
    cf.br ^bb26
  ^bb26:  // pred: ^bb25
    %c0_i256_24 = arith.constant 0 : i256
    %208 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %209 = llvm.load %208 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_24, %209 : i256, !llvm.ptr
    %210 = llvm.getelementptr %209[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %210, %208 : !llvm.ptr, !llvm.ptr
    cf.br ^bb27
  ^bb27:  // pred: ^bb26
    %c0_i256_25 = arith.constant 0 : i256
    %211 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %212 = llvm.load %211 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_25, %212 : i256, !llvm.ptr
    %213 = llvm.getelementptr %212[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %213, %211 : !llvm.ptr, !llvm.ptr
    cf.br ^bb28
  ^bb28:  // pred: ^bb27
    %214 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %215 = llvm.load %214 : !llvm.ptr -> !llvm.ptr
    %216 = llvm.getelementptr %215[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %217 = llvm.load %216 : !llvm.ptr -> i256
    llvm.store %216, %214 : !llvm.ptr, !llvm.ptr
    %218 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %219 = llvm.load %218 : !llvm.ptr -> !llvm.ptr
    %220 = llvm.getelementptr %219[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %221 = llvm.load %220 : !llvm.ptr -> i256
    llvm.store %220, %218 : !llvm.ptr, !llvm.ptr
    %222 = arith.trunci %217 : i256 to i32
    %c32_i32_26 = arith.constant 32 : i32
    %223 = arith.addi %222, %c32_i32_26 : i32
    %224 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    %225 = llvm.load %224 : !llvm.ptr -> i32
    %c31_i32_27 = arith.constant 31 : i32
    %c32_i32_28 = arith.constant 32 : i32
    %226 = arith.addi %223, %c31_i32_27 : i32
    %227 = arith.divui %226, %c32_i32_28 : i32
    %228 = arith.muli %227, %c32_i32_28 : i32
    %229 = arith.cmpi ult, %225, %228 : i32
    scf.if %229 {
      %317 = func.call @dora_extend_memory(%arg0, %228) : (!llvm.ptr, i32) -> !llvm.ptr
      llvm.store %228, %224 : i32, !llvm.ptr
      %318 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
      llvm.store %317, %318 : !llvm.ptr, !llvm.ptr
    } else {
    }
    %230 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
    %231 = llvm.load %230 : !llvm.ptr -> !llvm.ptr
    %232 = llvm.getelementptr %231[%222] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %233 = llvm.intr.bswap(%221)  : (i256) -> i256
    llvm.store %233, %232 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb29
  ^bb29:  // pred: ^bb28
    %c0_i256_29 = arith.constant 0 : i256
    %234 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %235 = llvm.load %234 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_29, %235 : i256, !llvm.ptr
    %236 = llvm.getelementptr %235[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %236, %234 : !llvm.ptr, !llvm.ptr
    cf.br ^bb30
  ^bb30:  // pred: ^bb29
    %c32_i256_30 = arith.constant 32 : i256
    %237 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %238 = llvm.load %237 : !llvm.ptr -> !llvm.ptr
    llvm.store %c32_i256_30, %238 : i256, !llvm.ptr
    %239 = llvm.getelementptr %238[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %239, %237 : !llvm.ptr, !llvm.ptr
    cf.br ^bb31
  ^bb31:  // pred: ^bb30
    %240 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %241 = llvm.load %240 : !llvm.ptr -> !llvm.ptr
    %242 = llvm.getelementptr %241[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %243 = llvm.load %242 : !llvm.ptr -> i256
    llvm.store %242, %240 : !llvm.ptr, !llvm.ptr
    %244 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %245 = llvm.load %244 : !llvm.ptr -> !llvm.ptr
    %246 = llvm.getelementptr %245[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %247 = llvm.load %246 : !llvm.ptr -> i256
    llvm.store %246, %244 : !llvm.ptr, !llvm.ptr
    %248 = arith.trunci %243 : i256 to i32
    %c32_i32_31 = arith.constant 32 : i32
    %249 = arith.addi %248, %c32_i32_31 : i32
    %250 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    %251 = llvm.load %250 : !llvm.ptr -> i32
    %c31_i32_32 = arith.constant 31 : i32
    %c32_i32_33 = arith.constant 32 : i32
    %252 = arith.addi %249, %c31_i32_32 : i32
    %253 = arith.divui %252, %c32_i32_33 : i32
    %254 = arith.muli %253, %c32_i32_33 : i32
    %255 = arith.cmpi ult, %251, %254 : i32
    scf.if %255 {
      %317 = func.call @dora_extend_memory(%arg0, %254) : (!llvm.ptr, i32) -> !llvm.ptr
      llvm.store %254, %250 : i32, !llvm.ptr
      %318 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
      llvm.store %317, %318 : !llvm.ptr, !llvm.ptr
    } else {
    }
    %256 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
    %257 = llvm.load %256 : !llvm.ptr -> !llvm.ptr
    %258 = llvm.getelementptr %257[%248] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %259 = llvm.intr.bswap(%247)  : (i256) -> i256
    llvm.store %259, %258 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb32
  ^bb32:  // pred: ^bb31
    %c0_i256_34 = arith.constant 0 : i256
    %260 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %261 = llvm.load %260 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_34, %261 : i256, !llvm.ptr
    %262 = llvm.getelementptr %261[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %262, %260 : !llvm.ptr, !llvm.ptr
    cf.br ^bb33
  ^bb33:  // pred: ^bb32
    %c64_i256_35 = arith.constant 64 : i256
    %263 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %264 = llvm.load %263 : !llvm.ptr -> !llvm.ptr
    llvm.store %c64_i256_35, %264 : i256, !llvm.ptr
    %265 = llvm.getelementptr %264[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %265, %263 : !llvm.ptr, !llvm.ptr
    cf.br ^bb34
  ^bb34:  // pred: ^bb33
    %266 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %267 = llvm.load %266 : !llvm.ptr -> !llvm.ptr
    %268 = llvm.getelementptr %267[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %269 = llvm.load %268 : !llvm.ptr -> i256
    llvm.store %268, %266 : !llvm.ptr, !llvm.ptr
    %270 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %271 = llvm.load %270 : !llvm.ptr -> !llvm.ptr
    %272 = llvm.getelementptr %271[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %273 = llvm.load %272 : !llvm.ptr -> i256
    llvm.store %272, %270 : !llvm.ptr, !llvm.ptr
    %274 = arith.trunci %269 : i256 to i32
    %c32_i32_36 = arith.constant 32 : i32
    %275 = arith.addi %274, %c32_i32_36 : i32
    %276 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    %277 = llvm.load %276 : !llvm.ptr -> i32
    %c31_i32_37 = arith.constant 31 : i32
    %c32_i32_38 = arith.constant 32 : i32
    %278 = arith.addi %275, %c31_i32_37 : i32
    %279 = arith.divui %278, %c32_i32_38 : i32
    %280 = arith.muli %279, %c32_i32_38 : i32
    %281 = arith.cmpi ult, %277, %280 : i32
    scf.if %281 {
      %317 = func.call @dora_extend_memory(%arg0, %280) : (!llvm.ptr, i32) -> !llvm.ptr
      llvm.store %280, %276 : i32, !llvm.ptr
      %318 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
      llvm.store %317, %318 : !llvm.ptr, !llvm.ptr
    } else {
    }
    %282 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
    %283 = llvm.load %282 : !llvm.ptr -> !llvm.ptr
    %284 = llvm.getelementptr %283[%274] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %285 = llvm.intr.bswap(%273)  : (i256) -> i256
    llvm.store %285, %284 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb35
  ^bb35:  // pred: ^bb34
    %c32_i256_39 = arith.constant 32 : i256
    %286 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %287 = llvm.load %286 : !llvm.ptr -> !llvm.ptr
    llvm.store %c32_i256_39, %287 : i256, !llvm.ptr
    %288 = llvm.getelementptr %287[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %288, %286 : !llvm.ptr, !llvm.ptr
    cf.br ^bb36
  ^bb36:  // pred: ^bb35
    %c0_i256_40 = arith.constant 0 : i256
    %289 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %290 = llvm.load %289 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_40, %290 : i256, !llvm.ptr
    %291 = llvm.getelementptr %290[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %291, %289 : !llvm.ptr, !llvm.ptr
    cf.br ^bb37
  ^bb37:  // pred: ^bb36
    %c0_i256_41 = arith.constant 0 : i256
    %292 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %293 = llvm.load %292 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_41, %293 : i256, !llvm.ptr
    %294 = llvm.getelementptr %293[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %294, %292 : !llvm.ptr, !llvm.ptr
    cf.br ^bb38
  ^bb38:  // pred: ^bb37
    %295 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %296 = llvm.load %295 : !llvm.ptr -> !llvm.ptr
    %297 = llvm.getelementptr %296[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %298 = llvm.load %297 : !llvm.ptr -> i256
    llvm.store %297, %295 : !llvm.ptr, !llvm.ptr
    %299 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %300 = llvm.load %299 : !llvm.ptr -> !llvm.ptr
    %301 = llvm.getelementptr %300[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %302 = llvm.load %301 : !llvm.ptr -> i256
    llvm.store %301, %299 : !llvm.ptr, !llvm.ptr
    %303 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %304 = llvm.load %303 : !llvm.ptr -> !llvm.ptr
    %305 = llvm.getelementptr %304[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %306 = llvm.load %305 : !llvm.ptr -> i256
    llvm.store %305, %303 : !llvm.ptr, !llvm.ptr
    %307 = arith.trunci %298 : i256 to i32
    %308 = arith.trunci %302 : i256 to i32
    %309 = arith.trunci %306 : i256 to i32
    %310 = arith.addi %307, %309 : i32
    %311 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    %312 = llvm.load %311 : !llvm.ptr -> i32
    %c31_i32_42 = arith.constant 31 : i32
    %c32_i32_43 = arith.constant 32 : i32
    %313 = arith.addi %310, %c31_i32_42 : i32
    %314 = arith.divui %313, %c32_i32_43 : i32
    %315 = arith.muli %314, %c32_i32_43 : i32
    %316 = arith.cmpi ult, %312, %315 : i32
    scf.if %316 {
      %317 = func.call @dora_extend_memory(%arg0, %315) : (!llvm.ptr, i32) -> !llvm.ptr
      llvm.store %315, %311 : i32, !llvm.ptr
      %318 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
      llvm.store %317, %318 : !llvm.ptr, !llvm.ptr
    } else {
    }
    call @dora_copy_return_data_into_memory(%arg0, %307, %308, %309) : (!llvm.ptr, i32, i32, i32) -> ()
    cf.br ^bb39
  ^bb39:  // pred: ^bb38
    %c0_i32_44 = arith.constant 0 : i32
    %c1_i8 = arith.constant 1 : i8
    call @dora_write_result(%arg0, %c0_i32_44, %c0_i32_44, %arg1, %c1_i8) : (!llvm.ptr, i32, i32, i64, i8) -> ()
    return %c1_i8 : i8
  }
}
