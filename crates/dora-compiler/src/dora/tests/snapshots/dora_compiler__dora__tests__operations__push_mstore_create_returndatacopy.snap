---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
---
module {
  func.func private @dora_fn_nop()
  func.func private @dora_fn_tracing(!llvm.ptr, i8, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_fn_is_static(!llvm.ptr) -> i8
  func.func private @dora_fn_exp(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_calldata_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_data_section(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_data_section_size(!llvm.ptr) -> i64
  func.func private @dora_fn_data_section_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_chainid(!llvm.ptr) -> i64
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gaslimit_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_memory_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_memory_size(!llvm.ptr) -> i64
  func.func private @dora_fn_code_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_eofcreate(!llvm.ptr, i8, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returncontract(!llvm.ptr, i8, i64, i64, index, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_call(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_extcall(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_returndata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_returndata_copy(!llvm.ptr, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_tload(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_tstore(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @op62(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr, %arg4: !llvm.ptr) -> i8 {
    cf.br ^bb3
  ^bb1(%0: i8):  // 11 preds: ^bb3, ^bb4, ^bb6, ^bb7, ^bb8, ^bb10, ^bb13, ^bb14, ^bb15, ^bb18, ^bb19
    %c0_i64 = arith.constant 0 : i64
    %1 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64, %c0_i64, %1, %0) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %0 : i8
  ^bb2(%2: i8):  // no predecessors
    return %2 : i8
  ^bb3:  // pred: ^bb0
    %3 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %4 = arith.cmpi uge, %3, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %4, ^bb5, ^bb1(%c80_i8 : i8)
  ^bb4:  // pred: ^bb5
    %c1024_i64 = arith.constant 1024 : i64
    %5 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-3_i64 = arith.constant -3 : i64
    %6 = arith.addi %5, %c-3_i64 : i64
    llvm.store %6, %arg3 : i64, !llvm.ptr
    %c3_i64_0 = arith.constant 3 : i64
    %7 = arith.cmpi ult, %5, %c3_i64_0 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %7, ^bb1(%c91_i8 : i8), ^bb6
  ^bb5:  // pred: ^bb3
    %8 = arith.subi %3, %c3_i64 : i64
    llvm.store %8, %arg1 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb6:  // pred: ^bb4
    %9 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.getelementptr %9[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %11 = llvm.load %10 : !llvm.ptr -> i256
    llvm.store %10, %arg4 : !llvm.ptr, !llvm.ptr
    %12 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.getelementptr %12[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %14 = llvm.load %13 : !llvm.ptr -> i256
    llvm.store %13, %arg4 : !llvm.ptr, !llvm.ptr
    %15 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %16 = llvm.getelementptr %15[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %17 = llvm.load %16 : !llvm.ptr -> i256
    llvm.store %16, %arg4 : !llvm.ptr, !llvm.ptr
    %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256
    %18 = arith.cmpi sgt, %17, %c18446744073709551615_i256 : i256
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %18, ^bb1(%c84_i8 : i8), ^bb7
  ^bb7:  // pred: ^bb6
    %19 = arith.trunci %17 : i256 to i64
    %c0_i64_1 = arith.constant 0 : i64
    %20 = arith.cmpi slt, %19, %c0_i64_1 : i64
    %c84_i8_2 = arith.constant 84 : i8
    cf.cond_br %20, ^bb1(%c84_i8_2 : i8), ^bb8
  ^bb8:  // pred: ^bb7
    %c31_i64 = arith.constant 31 : i64
    %c32_i64 = arith.constant 32 : i64
    %21 = arith.addi %19, %c31_i64 : i64
    %22 = arith.divui %21, %c32_i64 : i64
    %c3_i64_3 = arith.constant 3 : i64
    %23 = arith.muli %22, %c3_i64_3 : i64
    %24 = llvm.load %arg1 : !llvm.ptr -> i64
    %25 = arith.cmpi ult, %24, %23 : i64
    scf.if %25 {
    } else {
      %61 = arith.subi %24, %23 : i64
      llvm.store %61, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_4 = arith.constant 80 : i8
    cf.cond_br %25, ^bb1(%c80_i8_4 : i8), ^bb9
  ^bb9:  // pred: ^bb8
    %c1_i256 = arith.constant 1 : i256
    %26 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %14, %26 {alignment = 1 : i64} : i256, !llvm.ptr
    %c0_i64_5 = arith.constant 0 : i64
    %27 = arith.cmpi ne, %19, %c0_i64_5 : i64
    cf.cond_br %27, ^bb13, ^bb10
  ^bb10:  // 2 preds: ^bb9, ^bb17
    %28 = arith.trunci %11 : i256 to i64
    %29 = call @dora_fn_returndata_copy(%arg0, %28, %26, %19) : (!llvm.ptr, i64, !llvm.ptr, i64) -> !llvm.ptr
    %30 = llvm.getelementptr %29[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %31 = llvm.load %30 : !llvm.ptr -> i8
    %c0_i8 = arith.constant 0 : i8
    %32 = arith.cmpi ne, %31, %c0_i8 : i8
    cf.cond_br %32, ^bb1(%31 : i8), ^bb11
  ^bb11:  // pred: ^bb10
    cf.br ^bb12
  ^bb12:  // pred: ^bb11
    %c0_i8_6 = arith.constant 0 : i8
    return %c0_i8_6 : i8
  ^bb13:  // pred: ^bb9
    %c18446744073709551615_i256_7 = arith.constant 18446744073709551615 : i256
    %33 = arith.cmpi sgt, %11, %c18446744073709551615_i256_7 : i256
    %c84_i8_8 = arith.constant 84 : i8
    cf.cond_br %33, ^bb1(%c84_i8_8 : i8), ^bb14
  ^bb14:  // pred: ^bb13
    %34 = arith.trunci %11 : i256 to i64
    %c0_i64_9 = arith.constant 0 : i64
    %35 = arith.cmpi slt, %34, %c0_i64_9 : i64
    %c84_i8_10 = arith.constant 84 : i8
    cf.cond_br %35, ^bb1(%c84_i8_10 : i8), ^bb15
  ^bb15:  // pred: ^bb14
    %36 = arith.addi %34, %19 : i64
    %c0_i64_11 = arith.constant 0 : i64
    %37 = arith.cmpi slt, %36, %c0_i64_11 : i64
    %c84_i8_12 = arith.constant 84 : i8
    cf.cond_br %37, ^bb1(%c84_i8_12 : i8), ^bb16
  ^bb16:  // pred: ^bb15
    %c31_i64_13 = arith.constant 31 : i64
    %c32_i64_14 = arith.constant 32 : i64
    %38 = arith.addi %36, %c31_i64_13 : i64
    %39 = arith.divui %38, %c32_i64_14 : i64
    %c32_i64_15 = arith.constant 32 : i64
    %40 = arith.muli %39, %c32_i64_15 : i64
    %41 = call @dora_fn_memory_size(%arg0) : (!llvm.ptr) -> i64
    %c31_i64_16 = arith.constant 31 : i64
    %c32_i64_17 = arith.constant 32 : i64
    %42 = arith.addi %41, %c31_i64_16 : i64
    %43 = arith.divui %42, %c32_i64_17 : i64
    %44 = arith.muli %43, %c32_i64_15 : i64
    %45 = arith.cmpi ult, %44, %40 : i64
    cf.cond_br %45, ^bb18, ^bb17
  ^bb17:  // 2 preds: ^bb16, ^bb20
    cf.br ^bb10
  ^bb18:  // pred: ^bb16
    %c3_i64_18 = arith.constant 3 : i64
    %c512_i64 = arith.constant 512 : i64
    %46 = arith.muli %43, %43 : i64
    %47 = arith.divui %46, %c512_i64 : i64
    %48 = arith.muli %43, %c3_i64_18 : i64
    %49 = arith.addi %47, %48 : i64
    %c3_i64_19 = arith.constant 3 : i64
    %c512_i64_20 = arith.constant 512 : i64
    %50 = arith.muli %39, %39 : i64
    %51 = arith.divui %50, %c512_i64_20 : i64
    %52 = arith.muli %39, %c3_i64_19 : i64
    %53 = arith.addi %51, %52 : i64
    %54 = arith.subi %53, %49 : i64
    %55 = llvm.load %arg1 : !llvm.ptr -> i64
    %56 = arith.cmpi ult, %55, %54 : i64
    scf.if %56 {
    } else {
      %61 = arith.subi %55, %54 : i64
      llvm.store %61, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_21 = arith.constant 80 : i8
    cf.cond_br %56, ^bb1(%c80_i8_21 : i8), ^bb19
  ^bb19:  // pred: ^bb18
    %57 = call @dora_fn_extend_memory(%arg0, %40) : (!llvm.ptr, i64) -> !llvm.ptr
    %58 = llvm.getelementptr %57[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %59 = llvm.load %58 : !llvm.ptr -> i8
    %c0_i8_22 = arith.constant 0 : i8
    %60 = arith.cmpi ne, %59, %c0_i8_22 : i8
    cf.cond_br %60, ^bb1(%59 : i8), ^bb20
  ^bb20:  // pred: ^bb19
    cf.br ^bb17
  }
  func.func private @op132(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr, %arg4: !llvm.ptr) -> i8 {
    cf.br ^bb3
  ^bb1(%0: i8):  // 2 preds: ^bb3, ^bb4
    %c0_i64 = arith.constant 0 : i64
    %1 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64, %c0_i64, %1, %0) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %0 : i8
  ^bb2(%2: i8):  // no predecessors
    return %2 : i8
  ^bb3:  // pred: ^bb0
    %3 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %4 = arith.cmpi uge, %3, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %4, ^bb5, ^bb1(%c80_i8 : i8)
  ^bb4:  // pred: ^bb5
    %c1024_i64 = arith.constant 1024 : i64
    %5 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %6 = arith.addi %5, %c1_i64 : i64
    llvm.store %6, %arg3 : i64, !llvm.ptr
    %c5_i64 = arith.constant 5 : i64
    %7 = arith.cmpi ult, %5, %c5_i64 : i64
    %8 = arith.cmpi ult, %c1024_i64, %6 : i64
    %9 = arith.xori %7, %8 : i1
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %9, ^bb1(%c92_i8 : i8), ^bb6
  ^bb5:  // pred: ^bb3
    %10 = arith.subi %3, %c3_i64 : i64
    llvm.store %10, %arg1 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb6:  // pred: ^bb4
    %11 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.getelementptr %11[-5] : (!llvm.ptr) -> !llvm.ptr, i256
    %13 = llvm.load %12 : !llvm.ptr -> i256
    %14 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    llvm.store %13, %14 : i256, !llvm.ptr
    %15 = llvm.getelementptr %14[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %15, %arg4 : !llvm.ptr, !llvm.ptr
    cf.br ^bb7
  ^bb7:  // pred: ^bb6
    %c0_i8 = arith.constant 0 : i8
    return %c0_i8 : i8
  }
  func.func private @op95(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr, %arg4: !llvm.ptr) -> i8 {
    cf.br ^bb3
  ^bb1(%0: i8):  // 2 preds: ^bb3, ^bb4
    %c0_i64 = arith.constant 0 : i64
    %1 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64, %c0_i64, %1, %0) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %0 : i8
  ^bb2(%2: i8):  // no predecessors
    return %2 : i8
  ^bb3:  // pred: ^bb0
    %3 = llvm.load %arg1 : !llvm.ptr -> i64
    %c2_i64 = arith.constant 2 : i64
    call @dora_fn_nop() : () -> ()
    %4 = arith.cmpi uge, %3, %c2_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %4, ^bb5, ^bb1(%c80_i8 : i8)
  ^bb4:  // pred: ^bb5
    %c1024_i64 = arith.constant 1024 : i64
    %5 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %6 = arith.addi %5, %c1_i64 : i64
    llvm.store %6, %arg3 : i64, !llvm.ptr
    %7 = arith.cmpi ult, %c1024_i64, %6 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %7, ^bb1(%c92_i8 : i8), ^bb6
  ^bb5:  // pred: ^bb3
    %8 = arith.subi %3, %c2_i64 : i64
    llvm.store %8, %arg1 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb6:  // pred: ^bb4
    %c0_i256 = arith.constant 0 : i256
    %9 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256, %9 : i256, !llvm.ptr
    %10 = llvm.getelementptr %9[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %10, %arg4 : !llvm.ptr, !llvm.ptr
    cf.br ^bb7
  ^bb7:  // pred: ^bb6
    %c0_i8 = arith.constant 0 : i8
    return %c0_i8 : i8
  }
  func.func private @op82(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr, %arg4: !llvm.ptr) -> i8 {
    cf.br ^bb3
  ^bb1(%0: i8):  // 7 preds: ^bb3, ^bb4, ^bb9, ^bb10, ^bb11, ^bb14, ^bb15
    %c0_i64 = arith.constant 0 : i64
    %1 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64, %c0_i64, %1, %0) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %0 : i8
  ^bb2(%2: i8):  // no predecessors
    return %2 : i8
  ^bb3:  // pred: ^bb0
    %3 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %4 = arith.cmpi uge, %3, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %4, ^bb5, ^bb1(%c80_i8 : i8)
  ^bb4:  // pred: ^bb5
    %c1024_i64 = arith.constant 1024 : i64
    %5 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-2_i64 = arith.constant -2 : i64
    %6 = arith.addi %5, %c-2_i64 : i64
    llvm.store %6, %arg3 : i64, !llvm.ptr
    %c2_i64 = arith.constant 2 : i64
    %7 = arith.cmpi ult, %5, %c2_i64 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %7, ^bb1(%c91_i8 : i8), ^bb6
  ^bb5:  // pred: ^bb3
    %8 = arith.subi %3, %c3_i64 : i64
    llvm.store %8, %arg1 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb6:  // pred: ^bb4
    %9 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.getelementptr %9[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %11 = llvm.load %10 : !llvm.ptr -> i256
    llvm.store %10, %arg4 : !llvm.ptr, !llvm.ptr
    %12 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.getelementptr %12[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %14 = llvm.load %13 : !llvm.ptr -> i256
    llvm.store %13, %arg4 : !llvm.ptr, !llvm.ptr
    %c32_i64 = arith.constant 32 : i64
    %c0_i64_0 = arith.constant 0 : i64
    %15 = arith.cmpi ne, %c32_i64, %c0_i64_0 : i64
    cf.cond_br %15, ^bb9, ^bb7
  ^bb7:  // 2 preds: ^bb6, ^bb13
    %16 = arith.trunci %11 : i256 to i64
    %17 = call @dora_fn_memory_ptr(%arg0) : (!llvm.ptr) -> !llvm.ptr
    %18 = llvm.getelementptr %17[%16] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %19 = llvm.intr.bswap(%14)  : (i256) -> i256
    llvm.store %19, %18 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb8
  ^bb8:  // pred: ^bb7
    %c0_i8 = arith.constant 0 : i8
    return %c0_i8 : i8
  ^bb9:  // pred: ^bb6
    %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256
    %20 = arith.cmpi sgt, %11, %c18446744073709551615_i256 : i256
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %20, ^bb1(%c84_i8 : i8), ^bb10
  ^bb10:  // pred: ^bb9
    %21 = arith.trunci %11 : i256 to i64
    %c0_i64_1 = arith.constant 0 : i64
    %22 = arith.cmpi slt, %21, %c0_i64_1 : i64
    %c84_i8_2 = arith.constant 84 : i8
    cf.cond_br %22, ^bb1(%c84_i8_2 : i8), ^bb11
  ^bb11:  // pred: ^bb10
    %23 = arith.addi %21, %c32_i64 : i64
    %c0_i64_3 = arith.constant 0 : i64
    %24 = arith.cmpi slt, %23, %c0_i64_3 : i64
    %c84_i8_4 = arith.constant 84 : i8
    cf.cond_br %24, ^bb1(%c84_i8_4 : i8), ^bb12
  ^bb12:  // pred: ^bb11
    %c31_i64 = arith.constant 31 : i64
    %c32_i64_5 = arith.constant 32 : i64
    %25 = arith.addi %23, %c31_i64 : i64
    %26 = arith.divui %25, %c32_i64_5 : i64
    %c32_i64_6 = arith.constant 32 : i64
    %27 = arith.muli %26, %c32_i64_6 : i64
    %28 = call @dora_fn_memory_size(%arg0) : (!llvm.ptr) -> i64
    %c31_i64_7 = arith.constant 31 : i64
    %c32_i64_8 = arith.constant 32 : i64
    %29 = arith.addi %28, %c31_i64_7 : i64
    %30 = arith.divui %29, %c32_i64_8 : i64
    %31 = arith.muli %30, %c32_i64_6 : i64
    %32 = arith.cmpi ult, %31, %27 : i64
    cf.cond_br %32, ^bb14, ^bb13
  ^bb13:  // 2 preds: ^bb12, ^bb16
    cf.br ^bb7
  ^bb14:  // pred: ^bb12
    %c3_i64_9 = arith.constant 3 : i64
    %c512_i64 = arith.constant 512 : i64
    %33 = arith.muli %30, %30 : i64
    %34 = arith.divui %33, %c512_i64 : i64
    %35 = arith.muli %30, %c3_i64_9 : i64
    %36 = arith.addi %34, %35 : i64
    %c3_i64_10 = arith.constant 3 : i64
    %c512_i64_11 = arith.constant 512 : i64
    %37 = arith.muli %26, %26 : i64
    %38 = arith.divui %37, %c512_i64_11 : i64
    %39 = arith.muli %26, %c3_i64_10 : i64
    %40 = arith.addi %38, %39 : i64
    %41 = arith.subi %40, %36 : i64
    %42 = llvm.load %arg1 : !llvm.ptr -> i64
    %43 = arith.cmpi ult, %42, %41 : i64
    scf.if %43 {
    } else {
      %48 = arith.subi %42, %41 : i64
      llvm.store %48, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_12 = arith.constant 80 : i8
    cf.cond_br %43, ^bb1(%c80_i8_12 : i8), ^bb15
  ^bb15:  // pred: ^bb14
    %44 = call @dora_fn_extend_memory(%arg0, %27) : (!llvm.ptr, i64) -> !llvm.ptr
    %45 = llvm.getelementptr %44[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %46 = llvm.load %45 : !llvm.ptr -> i8
    %c0_i8_13 = arith.constant 0 : i8
    %47 = arith.cmpi ne, %46, %c0_i8_13 : i8
    cf.cond_br %47, ^bb1(%46 : i8), ^bb16
  ^bb16:  // pred: ^bb15
    cf.br ^bb13
  }
  func.func private @op250(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr, %arg4: !llvm.ptr) -> i8 {
    cf.br ^bb3
  ^bb1(%0: i8):  // 18 preds: ^bb3, ^bb4, ^bb6, ^bb7, ^bb9, ^bb10, ^bb12, ^bb13, ^bb16, ^bb17, ^bb18, ^bb21, ^bb22, ^bb24, ^bb25, ^bb26, ^bb29, ^bb30
    %c0_i64 = arith.constant 0 : i64
    %1 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64, %c0_i64, %1, %0) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %0 : i8
  ^bb2(%2: i8):  // no predecessors
    return %2 : i8
  ^bb3:  // pred: ^bb0
    %3 = llvm.load %arg1 : !llvm.ptr -> i64
    %c0_i64_0 = arith.constant 0 : i64
    call @dora_fn_nop() : () -> ()
    %4 = arith.cmpi uge, %3, %c0_i64_0 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %4, ^bb5, ^bb1(%c80_i8 : i8)
  ^bb4:  // pred: ^bb5
    %c1024_i64 = arith.constant 1024 : i64
    %5 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-5_i64 = arith.constant -5 : i64
    %6 = arith.addi %5, %c-5_i64 : i64
    llvm.store %6, %arg3 : i64, !llvm.ptr
    %c6_i64 = arith.constant 6 : i64
    %7 = arith.cmpi ult, %5, %c6_i64 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %7, ^bb1(%c91_i8 : i8), ^bb6
  ^bb5:  // pred: ^bb3
    %8 = arith.subi %3, %c0_i64_0 : i64
    llvm.store %8, %arg1 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb6:  // pred: ^bb4
    %9 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.getelementptr %9[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %11 = llvm.load %10 : !llvm.ptr -> i256
    llvm.store %10, %arg4 : !llvm.ptr, !llvm.ptr
    %12 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.getelementptr %12[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %14 = llvm.load %13 : !llvm.ptr -> i256
    llvm.store %13, %arg4 : !llvm.ptr, !llvm.ptr
    %15 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %16 = llvm.getelementptr %15[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %17 = llvm.load %16 : !llvm.ptr -> i256
    llvm.store %16, %arg4 : !llvm.ptr, !llvm.ptr
    %18 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.getelementptr %18[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %20 = llvm.load %19 : !llvm.ptr -> i256
    llvm.store %19, %arg4 : !llvm.ptr, !llvm.ptr
    %21 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %22 = llvm.getelementptr %21[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %23 = llvm.load %22 : !llvm.ptr -> i256
    llvm.store %22, %arg4 : !llvm.ptr, !llvm.ptr
    %24 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %25 = llvm.getelementptr %24[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %26 = llvm.load %25 : !llvm.ptr -> i256
    llvm.store %25, %arg4 : !llvm.ptr, !llvm.ptr
    %c0_i256 = arith.constant 0 : i256
    %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256
    %27 = arith.cmpi sgt, %20, %c18446744073709551615_i256 : i256
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %27, ^bb1(%c84_i8 : i8), ^bb7
  ^bb7:  // pred: ^bb6
    %28 = arith.trunci %20 : i256 to i64
    %c0_i64_1 = arith.constant 0 : i64
    %29 = arith.cmpi slt, %28, %c0_i64_1 : i64
    %c84_i8_2 = arith.constant 84 : i8
    cf.cond_br %29, ^bb1(%c84_i8_2 : i8), ^bb8
  ^bb8:  // pred: ^bb7
    %c0_i64_3 = arith.constant 0 : i64
    %30 = arith.cmpi ne, %28, %c0_i64_3 : i64
    cf.cond_br %30, ^bb16, ^bb9
  ^bb9:  // 2 preds: ^bb8, ^bb20
    %c18446744073709551615_i256_4 = arith.constant 18446744073709551615 : i256
    %31 = arith.cmpi sgt, %26, %c18446744073709551615_i256_4 : i256
    %c84_i8_5 = arith.constant 84 : i8
    cf.cond_br %31, ^bb1(%c84_i8_5 : i8), ^bb10
  ^bb10:  // pred: ^bb9
    %32 = arith.trunci %26 : i256 to i64
    %c0_i64_6 = arith.constant 0 : i64
    %33 = arith.cmpi slt, %32, %c0_i64_6 : i64
    %c84_i8_7 = arith.constant 84 : i8
    cf.cond_br %33, ^bb1(%c84_i8_7 : i8), ^bb11
  ^bb11:  // pred: ^bb10
    %c0_i64_8 = arith.constant 0 : i64
    %34 = arith.cmpi ne, %32, %c0_i64_8 : i64
    cf.cond_br %34, ^bb24, ^bb12
  ^bb12:  // 2 preds: ^bb11, ^bb28
    %35 = arith.trunci %17 : i256 to i64
    %36 = arith.trunci %23 : i256 to i64
    %37 = llvm.load %arg1 : !llvm.ptr -> i64
    %c1_i256 = arith.constant 1 : i256
    %38 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %c0_i256, %38 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i256_9 = arith.constant 1 : i256
    %39 = llvm.alloca %c1_i256_9 x i256 : (i256) -> !llvm.ptr
    llvm.store %11, %39 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i256_10 = arith.constant 1 : i256
    %40 = llvm.alloca %c1_i256_10 x i256 : (i256) -> !llvm.ptr
    llvm.store %14, %40 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i8 = arith.constant 1 : i8
    %41 = call @dora_fn_call(%arg0, %39, %40, %38, %35, %28, %36, %32, %37, %c1_i8) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
    %42 = llvm.getelementptr %41[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %43 = llvm.load %42 : !llvm.ptr -> i64
    %44 = llvm.getelementptr %41[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %45 = llvm.load %44 : !llvm.ptr -> i8
    %c0_i8 = arith.constant 0 : i8
    %46 = arith.cmpi ne, %45, %c0_i8 : i8
    cf.cond_br %46, ^bb1(%45 : i8), ^bb13
  ^bb13:  // pred: ^bb12
    %47 = llvm.getelementptr %41[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %48 = llvm.load %47 : !llvm.ptr -> i64
    %49 = llvm.load %arg1 : !llvm.ptr -> i64
    %50 = arith.cmpi ult, %49, %48 : i64
    scf.if %50 {
    } else {
      %110 = arith.subi %49, %48 : i64
      llvm.store %110, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_11 = arith.constant 80 : i8
    cf.cond_br %50, ^bb1(%c80_i8_11 : i8), ^bb14
  ^bb14:  // pred: ^bb13
    %51 = arith.extui %43 : i64 to i256
    %52 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    llvm.store %51, %52 : i256, !llvm.ptr
    %53 = llvm.getelementptr %52[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %53, %arg4 : !llvm.ptr, !llvm.ptr
    cf.br ^bb15
  ^bb15:  // pred: ^bb14
    %c0_i8_12 = arith.constant 0 : i8
    return %c0_i8_12 : i8
  ^bb16:  // pred: ^bb8
    %c18446744073709551615_i256_13 = arith.constant 18446744073709551615 : i256
    %54 = arith.cmpi sgt, %17, %c18446744073709551615_i256_13 : i256
    %c84_i8_14 = arith.constant 84 : i8
    cf.cond_br %54, ^bb1(%c84_i8_14 : i8), ^bb17
  ^bb17:  // pred: ^bb16
    %55 = arith.trunci %17 : i256 to i64
    %c0_i64_15 = arith.constant 0 : i64
    %56 = arith.cmpi slt, %55, %c0_i64_15 : i64
    %c84_i8_16 = arith.constant 84 : i8
    cf.cond_br %56, ^bb1(%c84_i8_16 : i8), ^bb18
  ^bb18:  // pred: ^bb17
    %57 = arith.addi %55, %28 : i64
    %c0_i64_17 = arith.constant 0 : i64
    %58 = arith.cmpi slt, %57, %c0_i64_17 : i64
    %c84_i8_18 = arith.constant 84 : i8
    cf.cond_br %58, ^bb1(%c84_i8_18 : i8), ^bb19
  ^bb19:  // pred: ^bb18
    %c31_i64 = arith.constant 31 : i64
    %c32_i64 = arith.constant 32 : i64
    %59 = arith.addi %57, %c31_i64 : i64
    %60 = arith.divui %59, %c32_i64 : i64
    %c32_i64_19 = arith.constant 32 : i64
    %61 = arith.muli %60, %c32_i64_19 : i64
    %62 = call @dora_fn_memory_size(%arg0) : (!llvm.ptr) -> i64
    %c31_i64_20 = arith.constant 31 : i64
    %c32_i64_21 = arith.constant 32 : i64
    %63 = arith.addi %62, %c31_i64_20 : i64
    %64 = arith.divui %63, %c32_i64_21 : i64
    %65 = arith.muli %64, %c32_i64_19 : i64
    %66 = arith.cmpi ult, %65, %61 : i64
    cf.cond_br %66, ^bb21, ^bb20
  ^bb20:  // 2 preds: ^bb19, ^bb23
    cf.br ^bb9
  ^bb21:  // pred: ^bb19
    %c3_i64 = arith.constant 3 : i64
    %c512_i64 = arith.constant 512 : i64
    %67 = arith.muli %64, %64 : i64
    %68 = arith.divui %67, %c512_i64 : i64
    %69 = arith.muli %64, %c3_i64 : i64
    %70 = arith.addi %68, %69 : i64
    %c3_i64_22 = arith.constant 3 : i64
    %c512_i64_23 = arith.constant 512 : i64
    %71 = arith.muli %60, %60 : i64
    %72 = arith.divui %71, %c512_i64_23 : i64
    %73 = arith.muli %60, %c3_i64_22 : i64
    %74 = arith.addi %72, %73 : i64
    %75 = arith.subi %74, %70 : i64
    %76 = llvm.load %arg1 : !llvm.ptr -> i64
    %77 = arith.cmpi ult, %76, %75 : i64
    scf.if %77 {
    } else {
      %110 = arith.subi %76, %75 : i64
      llvm.store %110, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_24 = arith.constant 80 : i8
    cf.cond_br %77, ^bb1(%c80_i8_24 : i8), ^bb22
  ^bb22:  // pred: ^bb21
    %78 = call @dora_fn_extend_memory(%arg0, %61) : (!llvm.ptr, i64) -> !llvm.ptr
    %79 = llvm.getelementptr %78[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %80 = llvm.load %79 : !llvm.ptr -> i8
    %c0_i8_25 = arith.constant 0 : i8
    %81 = arith.cmpi ne, %80, %c0_i8_25 : i8
    cf.cond_br %81, ^bb1(%80 : i8), ^bb23
  ^bb23:  // pred: ^bb22
    cf.br ^bb20
  ^bb24:  // pred: ^bb11
    %c18446744073709551615_i256_26 = arith.constant 18446744073709551615 : i256
    %82 = arith.cmpi sgt, %23, %c18446744073709551615_i256_26 : i256
    %c84_i8_27 = arith.constant 84 : i8
    cf.cond_br %82, ^bb1(%c84_i8_27 : i8), ^bb25
  ^bb25:  // pred: ^bb24
    %83 = arith.trunci %23 : i256 to i64
    %c0_i64_28 = arith.constant 0 : i64
    %84 = arith.cmpi slt, %83, %c0_i64_28 : i64
    %c84_i8_29 = arith.constant 84 : i8
    cf.cond_br %84, ^bb1(%c84_i8_29 : i8), ^bb26
  ^bb26:  // pred: ^bb25
    %85 = arith.addi %83, %32 : i64
    %c0_i64_30 = arith.constant 0 : i64
    %86 = arith.cmpi slt, %85, %c0_i64_30 : i64
    %c84_i8_31 = arith.constant 84 : i8
    cf.cond_br %86, ^bb1(%c84_i8_31 : i8), ^bb27
  ^bb27:  // pred: ^bb26
    %c31_i64_32 = arith.constant 31 : i64
    %c32_i64_33 = arith.constant 32 : i64
    %87 = arith.addi %85, %c31_i64_32 : i64
    %88 = arith.divui %87, %c32_i64_33 : i64
    %c32_i64_34 = arith.constant 32 : i64
    %89 = arith.muli %88, %c32_i64_34 : i64
    %90 = call @dora_fn_memory_size(%arg0) : (!llvm.ptr) -> i64
    %c31_i64_35 = arith.constant 31 : i64
    %c32_i64_36 = arith.constant 32 : i64
    %91 = arith.addi %90, %c31_i64_35 : i64
    %92 = arith.divui %91, %c32_i64_36 : i64
    %93 = arith.muli %92, %c32_i64_34 : i64
    %94 = arith.cmpi ult, %93, %89 : i64
    cf.cond_br %94, ^bb29, ^bb28
  ^bb28:  // 2 preds: ^bb27, ^bb31
    cf.br ^bb12
  ^bb29:  // pred: ^bb27
    %c3_i64_37 = arith.constant 3 : i64
    %c512_i64_38 = arith.constant 512 : i64
    %95 = arith.muli %92, %92 : i64
    %96 = arith.divui %95, %c512_i64_38 : i64
    %97 = arith.muli %92, %c3_i64_37 : i64
    %98 = arith.addi %96, %97 : i64
    %c3_i64_39 = arith.constant 3 : i64
    %c512_i64_40 = arith.constant 512 : i64
    %99 = arith.muli %88, %88 : i64
    %100 = arith.divui %99, %c512_i64_40 : i64
    %101 = arith.muli %88, %c3_i64_39 : i64
    %102 = arith.addi %100, %101 : i64
    %103 = arith.subi %102, %98 : i64
    %104 = llvm.load %arg1 : !llvm.ptr -> i64
    %105 = arith.cmpi ult, %104, %103 : i64
    scf.if %105 {
    } else {
      %110 = arith.subi %104, %103 : i64
      llvm.store %110, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_41 = arith.constant 80 : i8
    cf.cond_br %105, ^bb1(%c80_i8_41 : i8), ^bb30
  ^bb30:  // pred: ^bb29
    %106 = call @dora_fn_extend_memory(%arg0, %89) : (!llvm.ptr, i64) -> !llvm.ptr
    %107 = llvm.getelementptr %106[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %108 = llvm.load %107 : !llvm.ptr -> i8
    %c0_i8_42 = arith.constant 0 : i8
    %109 = arith.cmpi ne, %108, %c0_i8_42 : i8
    cf.cond_br %109, ^bb1(%108 : i8), ^bb31
  ^bb31:  // pred: ^bb30
    cf.br ^bb28
  }
  func.func private @op240(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr, %arg4: !llvm.ptr) -> i8 {
    cf.br ^bb3
  ^bb1(%0: i8):  // 15 preds: ^bb3, ^bb4, ^bb6, ^bb7, ^bb8, ^bb10, ^bb11, ^bb12, ^bb15, ^bb16, ^bb17, ^bb18, ^bb19, ^bb22, ^bb23
    %c0_i64 = arith.constant 0 : i64
    %1 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64, %c0_i64, %1, %0) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %0 : i8
  ^bb2(%2: i8):  // no predecessors
    return %2 : i8
  ^bb3:  // pred: ^bb0
    %3 = llvm.load %arg1 : !llvm.ptr -> i64
    %c0_i64_0 = arith.constant 0 : i64
    call @dora_fn_nop() : () -> ()
    %4 = arith.cmpi uge, %3, %c0_i64_0 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %4, ^bb5, ^bb1(%c80_i8 : i8)
  ^bb4:  // pred: ^bb5
    %c1024_i64 = arith.constant 1024 : i64
    %5 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-2_i64 = arith.constant -2 : i64
    %6 = arith.addi %5, %c-2_i64 : i64
    llvm.store %6, %arg3 : i64, !llvm.ptr
    %c3_i64 = arith.constant 3 : i64
    %7 = arith.cmpi ult, %5, %c3_i64 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %7, ^bb1(%c91_i8 : i8), ^bb6
  ^bb5:  // pred: ^bb3
    %8 = arith.subi %3, %c0_i64_0 : i64
    llvm.store %8, %arg1 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb6:  // pred: ^bb4
    %9 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.getelementptr %9[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %11 = llvm.load %10 : !llvm.ptr -> i256
    llvm.store %10, %arg4 : !llvm.ptr, !llvm.ptr
    %12 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.getelementptr %12[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %14 = llvm.load %13 : !llvm.ptr -> i256
    llvm.store %13, %arg4 : !llvm.ptr, !llvm.ptr
    %15 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %16 = llvm.getelementptr %15[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %17 = llvm.load %16 : !llvm.ptr -> i256
    llvm.store %16, %arg4 : !llvm.ptr, !llvm.ptr
    %18 = call @dora_fn_is_static(%arg0) : (!llvm.ptr) -> i8
    %c0_i8 = arith.constant 0 : i8
    %19 = arith.cmpi ne, %18, %c0_i8 : i8
    %c87_i8 = arith.constant 87 : i8
    cf.cond_br %19, ^bb1(%c87_i8 : i8), ^bb7
  ^bb7:  // pred: ^bb6
    %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256
    %20 = arith.cmpi sgt, %17, %c18446744073709551615_i256 : i256
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %20, ^bb1(%c84_i8 : i8), ^bb8
  ^bb8:  // pred: ^bb7
    %21 = arith.trunci %17 : i256 to i64
    %c0_i64_1 = arith.constant 0 : i64
    %22 = arith.cmpi slt, %21, %c0_i64_1 : i64
    %c84_i8_2 = arith.constant 84 : i8
    cf.cond_br %22, ^bb1(%c84_i8_2 : i8), ^bb9
  ^bb9:  // pred: ^bb8
    %c0_i64_3 = arith.constant 0 : i64
    %23 = arith.cmpi ne, %21, %c0_i64_3 : i64
    cf.cond_br %23, ^bb15, ^bb10
  ^bb10:  // 2 preds: ^bb9, ^bb21
    %c32000_i64 = arith.constant 32000 : i64
    %24 = llvm.load %arg1 : !llvm.ptr -> i64
    %25 = arith.cmpi ult, %24, %c32000_i64 : i64
    scf.if %25 {
    } else {
      %74 = arith.subi %24, %c32000_i64 : i64
      llvm.store %74, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_4 = arith.constant 80 : i8
    cf.cond_br %25, ^bb1(%c80_i8_4 : i8), ^bb11
  ^bb11:  // pred: ^bb10
    %c1_i256 = arith.constant 1 : i256
    %26 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %11, %26 {alignment = 1 : i64} : i256, !llvm.ptr
    %27 = llvm.load %arg1 : !llvm.ptr -> i64
    %28 = arith.trunci %14 : i256 to i64
    %29 = call @dora_fn_create(%arg0, %21, %28, %26, %27) : (!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
    %30 = llvm.getelementptr %29[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %31 = llvm.load %30 : !llvm.ptr -> i8
    %c0_i8_5 = arith.constant 0 : i8
    %32 = arith.cmpi ne, %31, %c0_i8_5 : i8
    cf.cond_br %32, ^bb1(%31 : i8), ^bb12
  ^bb12:  // pred: ^bb11
    %33 = llvm.getelementptr %29[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %34 = llvm.load %33 : !llvm.ptr -> i64
    %35 = llvm.load %arg1 : !llvm.ptr -> i64
    %36 = arith.cmpi ult, %35, %34 : i64
    scf.if %36 {
    } else {
      %74 = arith.subi %35, %34 : i64
      llvm.store %74, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_6 = arith.constant 80 : i8
    cf.cond_br %36, ^bb1(%c80_i8_6 : i8), ^bb13
  ^bb13:  // pred: ^bb12
    %37 = llvm.load %26 : !llvm.ptr -> i256
    %38 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    llvm.store %37, %38 : i256, !llvm.ptr
    %39 = llvm.getelementptr %38[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %39, %arg4 : !llvm.ptr, !llvm.ptr
    cf.br ^bb14
  ^bb14:  // pred: ^bb13
    %c0_i8_7 = arith.constant 0 : i8
    return %c0_i8_7 : i8
  ^bb15:  // pred: ^bb9
    %c49152_i64 = arith.constant 49152 : i64
    %40 = arith.cmpi ugt, %21, %c49152_i64 : i64
    %c100_i8 = arith.constant 100 : i8
    cf.cond_br %40, ^bb1(%c100_i8 : i8), ^bb16
  ^bb16:  // pred: ^bb15
    %c31_i64 = arith.constant 31 : i64
    %c32_i64 = arith.constant 32 : i64
    %41 = arith.addi %21, %c31_i64 : i64
    %42 = arith.divui %41, %c32_i64 : i64
    %c2_i64 = arith.constant 2 : i64
    %43 = arith.muli %42, %c2_i64 : i64
    %44 = llvm.load %arg1 : !llvm.ptr -> i64
    %45 = arith.cmpi ult, %44, %43 : i64
    scf.if %45 {
    } else {
      %74 = arith.subi %44, %43 : i64
      llvm.store %74, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_8 = arith.constant 80 : i8
    cf.cond_br %45, ^bb1(%c80_i8_8 : i8), ^bb17
  ^bb17:  // pred: ^bb16
    %c18446744073709551615_i256_9 = arith.constant 18446744073709551615 : i256
    %46 = arith.cmpi sgt, %14, %c18446744073709551615_i256_9 : i256
    %c84_i8_10 = arith.constant 84 : i8
    cf.cond_br %46, ^bb1(%c84_i8_10 : i8), ^bb18
  ^bb18:  // pred: ^bb17
    %47 = arith.trunci %14 : i256 to i64
    %c0_i64_11 = arith.constant 0 : i64
    %48 = arith.cmpi slt, %47, %c0_i64_11 : i64
    %c84_i8_12 = arith.constant 84 : i8
    cf.cond_br %48, ^bb1(%c84_i8_12 : i8), ^bb19
  ^bb19:  // pred: ^bb18
    %49 = arith.addi %47, %21 : i64
    %c0_i64_13 = arith.constant 0 : i64
    %50 = arith.cmpi slt, %49, %c0_i64_13 : i64
    %c84_i8_14 = arith.constant 84 : i8
    cf.cond_br %50, ^bb1(%c84_i8_14 : i8), ^bb20
  ^bb20:  // pred: ^bb19
    %c31_i64_15 = arith.constant 31 : i64
    %c32_i64_16 = arith.constant 32 : i64
    %51 = arith.addi %49, %c31_i64_15 : i64
    %52 = arith.divui %51, %c32_i64_16 : i64
    %c32_i64_17 = arith.constant 32 : i64
    %53 = arith.muli %52, %c32_i64_17 : i64
    %54 = call @dora_fn_memory_size(%arg0) : (!llvm.ptr) -> i64
    %c31_i64_18 = arith.constant 31 : i64
    %c32_i64_19 = arith.constant 32 : i64
    %55 = arith.addi %54, %c31_i64_18 : i64
    %56 = arith.divui %55, %c32_i64_19 : i64
    %57 = arith.muli %56, %c32_i64_17 : i64
    %58 = arith.cmpi ult, %57, %53 : i64
    cf.cond_br %58, ^bb22, ^bb21
  ^bb21:  // 2 preds: ^bb20, ^bb24
    cf.br ^bb10
  ^bb22:  // pred: ^bb20
    %c3_i64_20 = arith.constant 3 : i64
    %c512_i64 = arith.constant 512 : i64
    %59 = arith.muli %56, %56 : i64
    %60 = arith.divui %59, %c512_i64 : i64
    %61 = arith.muli %56, %c3_i64_20 : i64
    %62 = arith.addi %60, %61 : i64
    %c3_i64_21 = arith.constant 3 : i64
    %c512_i64_22 = arith.constant 512 : i64
    %63 = arith.muli %52, %52 : i64
    %64 = arith.divui %63, %c512_i64_22 : i64
    %65 = arith.muli %52, %c3_i64_21 : i64
    %66 = arith.addi %64, %65 : i64
    %67 = arith.subi %66, %62 : i64
    %68 = llvm.load %arg1 : !llvm.ptr -> i64
    %69 = arith.cmpi ult, %68, %67 : i64
    scf.if %69 {
    } else {
      %74 = arith.subi %68, %67 : i64
      llvm.store %74, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_23 = arith.constant 80 : i8
    cf.cond_br %69, ^bb1(%c80_i8_23 : i8), ^bb23
  ^bb23:  // pred: ^bb22
    %70 = call @dora_fn_extend_memory(%arg0, %53) : (!llvm.ptr, i64) -> !llvm.ptr
    %71 = llvm.getelementptr %70[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %72 = llvm.load %71 : !llvm.ptr -> i8
    %c0_i8_24 = arith.constant 0 : i8
    %73 = arith.cmpi ne, %72, %c0_i8_24 : i8
    cf.cond_br %73, ^bb1(%72 : i8), ^bb24
  ^bb24:  // pred: ^bb23
    cf.br ^bb21
  }
  func.func private @op80(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr, %arg4: !llvm.ptr) -> i8 {
    cf.br ^bb3
  ^bb1(%0: i8):  // 2 preds: ^bb3, ^bb4
    %c0_i64 = arith.constant 0 : i64
    %1 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64, %c0_i64, %1, %0) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %0 : i8
  ^bb2(%2: i8):  // no predecessors
    return %2 : i8
  ^bb3:  // pred: ^bb0
    %3 = llvm.load %arg1 : !llvm.ptr -> i64
    %c2_i64 = arith.constant 2 : i64
    call @dora_fn_nop() : () -> ()
    %4 = arith.cmpi uge, %3, %c2_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %4, ^bb5, ^bb1(%c80_i8 : i8)
  ^bb4:  // pred: ^bb5
    %c1024_i64 = arith.constant 1024 : i64
    %5 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-1_i64 = arith.constant -1 : i64
    %6 = arith.addi %5, %c-1_i64 : i64
    llvm.store %6, %arg3 : i64, !llvm.ptr
    %c1_i64 = arith.constant 1 : i64
    %7 = arith.cmpi ult, %5, %c1_i64 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %7, ^bb1(%c91_i8 : i8), ^bb6
  ^bb5:  // pred: ^bb3
    %8 = arith.subi %3, %c2_i64 : i64
    llvm.store %8, %arg1 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb6:  // pred: ^bb4
    %9 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.getelementptr %9[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %11 = llvm.load %10 : !llvm.ptr -> i256
    llvm.store %10, %arg4 : !llvm.ptr, !llvm.ptr
    cf.br ^bb7
  ^bb7:  // pred: ^bb6
    %c0_i8 = arith.constant 0 : i8
    return %c0_i8 : i8
  }
  func.func public @main(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr) -> i8 attributes {llvm.emit_c_interface} {
    %c0_i64 = arith.constant 0 : i64
    %0 = llvm.alloca %c0_i64 x !llvm.ptr : (i64) -> !llvm.ptr
    llvm.store %arg2, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8 = arith.constant 0 : i8
    %c0_i8_0 = arith.constant 0 : i8
    %1 = arith.cmpi ne, %c0_i8, %c0_i8_0 : i8
    cf.cond_br %1, ^bb1(%c0_i8 : i8), ^bb4
  ^bb1(%2: i8):  // 31 preds: ^bb0, ^bb2, ^bb4, ^bb6, ^bb7, ^bb8, ^bb9, ^bb10, ^bb11, ^bb12, ^bb13, ^bb21, ^bb22, ^bb29, ^bb30, ^bb32, ^bb33, ^bb34, ^bb35, ^bb39, ^bb42, ^bb44, ^bb45, ^bb48, ^bb50, ^bb51, ^bb54, ^bb57, ^bb60, ^bb63, ^bb66
    %c0_i64_1 = arith.constant 0 : i64
    %3 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_1, %c0_i64_1, %3, %2) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %2 : i8
  ^bb2(%4: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %4 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3(%5: i8):  // 26 preds: ^bb5, ^bb14, ^bb15, ^bb16, ^bb17, ^bb18, ^bb19, ^bb20, ^bb23, ^bb24, ^bb25, ^bb26, ^bb27, ^bb28, ^bb31, ^bb36, ^bb37, ^bb38, ^bb41, ^bb47, ^bb53, ^bb56, ^bb59, ^bb62, ^bb65, ^bb68
    return %5 : i8
  ^bb4:  // pred: ^bb0
    %6 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %7 = arith.cmpi uge, %6, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %7, ^bb40, ^bb1(%c80_i8 : i8)
  ^bb5:  // pred: ^bb41
    %8 = call @op95(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %9 = arith.cmpi ne, %8, %c0_i8_0 : i8
    cf.cond_br %9, ^bb3(%8 : i8), ^bb6
  ^bb6:  // pred: ^bb5
    %10 = call @op82(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %11 = arith.cmpi ne, %10, %c0_i8_0 : i8
    cf.cond_br %11, ^bb1(%10 : i8), ^bb7
  ^bb7:  // pred: ^bb6
    %12 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_2 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %13 = arith.cmpi uge, %12, %c3_i64_2 : i64
    %c80_i8_3 = arith.constant 80 : i8
    cf.cond_br %13, ^bb43, ^bb1(%c80_i8_3 : i8)
  ^bb8:  // pred: ^bb44
    %14 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_4 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %15 = arith.cmpi uge, %14, %c3_i64_4 : i64
    %c80_i8_5 = arith.constant 80 : i8
    cf.cond_br %15, ^bb46, ^bb1(%c80_i8_5 : i8)
  ^bb9:  // pred: ^bb47
    %16 = call @op82(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %17 = arith.cmpi ne, %16, %c0_i8_0 : i8
    cf.cond_br %17, ^bb1(%16 : i8), ^bb10
  ^bb10:  // pred: ^bb9
    %18 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_6 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %19 = arith.cmpi uge, %18, %c3_i64_6 : i64
    %c80_i8_7 = arith.constant 80 : i8
    cf.cond_br %19, ^bb49, ^bb1(%c80_i8_7 : i8)
  ^bb11:  // pred: ^bb50
    %20 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_8 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %21 = arith.cmpi uge, %20, %c3_i64_8 : i64
    %c80_i8_9 = arith.constant 80 : i8
    cf.cond_br %21, ^bb52, ^bb1(%c80_i8_9 : i8)
  ^bb12:  // pred: ^bb53
    %22 = call @op82(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %23 = arith.cmpi ne, %22, %c0_i8_0 : i8
    cf.cond_br %23, ^bb1(%22 : i8), ^bb13
  ^bb13:  // pred: ^bb12
    %24 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_10 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %25 = arith.cmpi uge, %24, %c3_i64_10 : i64
    %c80_i8_11 = arith.constant 80 : i8
    cf.cond_br %25, ^bb55, ^bb1(%c80_i8_11 : i8)
  ^bb14:  // pred: ^bb56
    %26 = call @op95(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %27 = arith.cmpi ne, %26, %c0_i8_0 : i8
    cf.cond_br %27, ^bb3(%26 : i8), ^bb15
  ^bb15:  // pred: ^bb14
    %28 = call @op95(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %29 = arith.cmpi ne, %28, %c0_i8_0 : i8
    cf.cond_br %29, ^bb3(%28 : i8), ^bb16
  ^bb16:  // pred: ^bb15
    %30 = call @op240(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %31 = arith.cmpi ne, %30, %c0_i8_0 : i8
    cf.cond_br %31, ^bb3(%30 : i8), ^bb17
  ^bb17:  // pred: ^bb16
    %32 = call @op95(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %33 = arith.cmpi ne, %32, %c0_i8_0 : i8
    cf.cond_br %33, ^bb3(%32 : i8), ^bb18
  ^bb18:  // pred: ^bb17
    %34 = call @op95(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %35 = arith.cmpi ne, %34, %c0_i8_0 : i8
    cf.cond_br %35, ^bb3(%34 : i8), ^bb19
  ^bb19:  // pred: ^bb18
    %36 = call @op95(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %37 = arith.cmpi ne, %36, %c0_i8_0 : i8
    cf.cond_br %37, ^bb3(%36 : i8), ^bb20
  ^bb20:  // pred: ^bb19
    %38 = call @op95(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %39 = arith.cmpi ne, %38, %c0_i8_0 : i8
    cf.cond_br %39, ^bb3(%38 : i8), ^bb21
  ^bb21:  // pred: ^bb20
    %40 = call @op132(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %41 = arith.cmpi ne, %40, %c0_i8_0 : i8
    cf.cond_br %41, ^bb1(%40 : i8), ^bb22
  ^bb22:  // pred: ^bb21
    %42 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_12 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %43 = arith.cmpi uge, %42, %c3_i64_12 : i64
    %c80_i8_13 = arith.constant 80 : i8
    cf.cond_br %43, ^bb58, ^bb1(%c80_i8_13 : i8)
  ^bb23:  // pred: ^bb59
    %44 = call @op250(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %45 = arith.cmpi ne, %44, %c0_i8_0 : i8
    cf.cond_br %45, ^bb3(%44 : i8), ^bb24
  ^bb24:  // pred: ^bb23
    %46 = call @op80(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %47 = arith.cmpi ne, %46, %c0_i8_0 : i8
    cf.cond_br %47, ^bb3(%46 : i8), ^bb25
  ^bb25:  // pred: ^bb24
    %48 = call @op80(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %49 = arith.cmpi ne, %48, %c0_i8_0 : i8
    cf.cond_br %49, ^bb3(%48 : i8), ^bb26
  ^bb26:  // pred: ^bb25
    %50 = call @op95(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %51 = arith.cmpi ne, %50, %c0_i8_0 : i8
    cf.cond_br %51, ^bb3(%50 : i8), ^bb27
  ^bb27:  // pred: ^bb26
    %52 = call @op95(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %53 = arith.cmpi ne, %52, %c0_i8_0 : i8
    cf.cond_br %53, ^bb3(%52 : i8), ^bb28
  ^bb28:  // pred: ^bb27
    %54 = call @op82(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %55 = arith.cmpi ne, %54, %c0_i8_0 : i8
    cf.cond_br %55, ^bb3(%54 : i8), ^bb29
  ^bb29:  // pred: ^bb28
    %56 = call @op95(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %57 = arith.cmpi ne, %56, %c0_i8_0 : i8
    cf.cond_br %57, ^bb1(%56 : i8), ^bb30
  ^bb30:  // pred: ^bb29
    %58 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_14 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %59 = arith.cmpi uge, %58, %c3_i64_14 : i64
    %c80_i8_15 = arith.constant 80 : i8
    cf.cond_br %59, ^bb61, ^bb1(%c80_i8_15 : i8)
  ^bb31:  // pred: ^bb62
    %60 = call @op82(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %61 = arith.cmpi ne, %60, %c0_i8_0 : i8
    cf.cond_br %61, ^bb3(%60 : i8), ^bb32
  ^bb32:  // pred: ^bb31
    %62 = call @op95(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %63 = arith.cmpi ne, %62, %c0_i8_0 : i8
    cf.cond_br %63, ^bb1(%62 : i8), ^bb33
  ^bb33:  // pred: ^bb32
    %64 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_16 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %65 = arith.cmpi uge, %64, %c3_i64_16 : i64
    %c80_i8_17 = arith.constant 80 : i8
    cf.cond_br %65, ^bb64, ^bb1(%c80_i8_17 : i8)
  ^bb34:  // pred: ^bb65
    %66 = call @op82(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %67 = arith.cmpi ne, %66, %c0_i8_0 : i8
    cf.cond_br %67, ^bb1(%66 : i8), ^bb35
  ^bb35:  // pred: ^bb34
    %68 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_18 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %69 = arith.cmpi uge, %68, %c3_i64_18 : i64
    %c80_i8_19 = arith.constant 80 : i8
    cf.cond_br %69, ^bb67, ^bb1(%c80_i8_19 : i8)
  ^bb36:  // pred: ^bb68
    %70 = call @op95(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %71 = arith.cmpi ne, %70, %c0_i8_0 : i8
    cf.cond_br %71, ^bb3(%70 : i8), ^bb37
  ^bb37:  // pred: ^bb36
    %72 = call @op95(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %73 = arith.cmpi ne, %72, %c0_i8_0 : i8
    cf.cond_br %73, ^bb3(%72 : i8), ^bb38
  ^bb38:  // pred: ^bb37
    %74 = call @op62(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %75 = arith.cmpi ne, %74, %c0_i8_0 : i8
    cf.cond_br %75, ^bb3(%74 : i8), ^bb69
  ^bb39:  // pred: ^bb40
    %c1024_i64 = arith.constant 1024 : i64
    %76 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %77 = arith.addi %76, %c1_i64 : i64
    llvm.store %77, %arg3 : i64, !llvm.ptr
    %78 = arith.cmpi ult, %c1024_i64, %77 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %78, ^bb1(%c92_i8 : i8), ^bb41
  ^bb40:  // pred: ^bb4
    %79 = arith.subi %6, %c3_i64 : i64
    llvm.store %79, %arg1 : i64, !llvm.ptr
    cf.br ^bb39
  ^bb41:  // pred: ^bb39
    %c57669888194366464517598830424248860356609074394020202793089226410191109488639_i256 = arith.constant 57669888194366464517598830424248860356609074394020202793089226410191109488639 : i256
    %80 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c57669888194366464517598830424248860356609074394020202793089226410191109488639_i256, %80 : i256, !llvm.ptr
    %81 = llvm.getelementptr %80[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %81, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_20 = arith.constant 0 : i8
    %82 = arith.cmpi ne, %c0_i8_20, %c0_i8_0 : i8
    cf.cond_br %82, ^bb3(%c0_i8_20 : i8), ^bb5
  ^bb42:  // pred: ^bb43
    %c1024_i64_21 = arith.constant 1024 : i64
    %83 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_22 = arith.constant 1 : i64
    %84 = arith.addi %83, %c1_i64_22 : i64
    llvm.store %84, %arg3 : i64, !llvm.ptr
    %85 = arith.cmpi ult, %c1024_i64_21, %84 : i64
    %c92_i8_23 = arith.constant 92 : i8
    cf.cond_br %85, ^bb1(%c92_i8_23 : i8), ^bb44
  ^bb43:  // pred: ^bb7
    %86 = arith.subi %12, %c3_i64_2 : i64
    llvm.store %86, %arg1 : i64, !llvm.ptr
    cf.br ^bb42
  ^bb44:  // pred: ^bb42
    %c-282693306169198560872784742741978202424711039104693490077813924759764729856_i256 = arith.constant -282693306169198560872784742741978202424711039104693490077813924759764729856 : i256
    %87 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c-282693306169198560872784742741978202424711039104693490077813924759764729856_i256, %87 : i256, !llvm.ptr
    %88 = llvm.getelementptr %87[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %88, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_24 = arith.constant 0 : i8
    %89 = arith.cmpi ne, %c0_i8_24, %c0_i8_0 : i8
    cf.cond_br %89, ^bb1(%c0_i8_24 : i8), ^bb8
  ^bb45:  // pred: ^bb46
    %c1024_i64_25 = arith.constant 1024 : i64
    %90 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_26 = arith.constant 1 : i64
    %91 = arith.addi %90, %c1_i64_26 : i64
    llvm.store %91, %arg3 : i64, !llvm.ptr
    %92 = arith.cmpi ult, %c1024_i64_25, %91 : i64
    %c92_i8_27 = arith.constant 92 : i8
    cf.cond_br %92, ^bb1(%c92_i8_27 : i8), ^bb47
  ^bb46:  // pred: ^bb8
    %93 = arith.subi %14, %c3_i64_4 : i64
    llvm.store %93, %arg1 : i64, !llvm.ptr
    cf.br ^bb45
  ^bb47:  // pred: ^bb45
    %c32_i256 = arith.constant 32 : i256
    %94 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c32_i256, %94 : i256, !llvm.ptr
    %95 = llvm.getelementptr %94[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %95, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_28 = arith.constant 0 : i8
    %96 = arith.cmpi ne, %c0_i8_28, %c0_i8_0 : i8
    cf.cond_br %96, ^bb3(%c0_i8_28 : i8), ^bb9
  ^bb48:  // pred: ^bb49
    %c1024_i64_29 = arith.constant 1024 : i64
    %97 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_30 = arith.constant 1 : i64
    %98 = arith.addi %97, %c1_i64_30 : i64
    llvm.store %98, %arg3 : i64, !llvm.ptr
    %99 = arith.cmpi ult, %c1024_i64_29, %98 : i64
    %c92_i8_31 = arith.constant 92 : i8
    cf.cond_br %99, ^bb1(%c92_i8_31 : i8), ^bb50
  ^bb49:  // pred: ^bb10
    %100 = arith.subi %18, %c3_i64_6 : i64
    llvm.store %100, %arg1 : i64, !llvm.ptr
    cf.br ^bb48
  ^bb50:  // pred: ^bb48
    %c10123276409175967808859434475862811765392092841461775252157603250176_i256 = arith.constant 10123276409175967808859434475862811765392092841461775252157603250176 : i256
    %101 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c10123276409175967808859434475862811765392092841461775252157603250176_i256, %101 : i256, !llvm.ptr
    %102 = llvm.getelementptr %101[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %102, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_32 = arith.constant 0 : i8
    %103 = arith.cmpi ne, %c0_i8_32, %c0_i8_0 : i8
    cf.cond_br %103, ^bb1(%c0_i8_32 : i8), ^bb11
  ^bb51:  // pred: ^bb52
    %c1024_i64_33 = arith.constant 1024 : i64
    %104 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_34 = arith.constant 1 : i64
    %105 = arith.addi %104, %c1_i64_34 : i64
    llvm.store %105, %arg3 : i64, !llvm.ptr
    %106 = arith.cmpi ult, %c1024_i64_33, %105 : i64
    %c92_i8_35 = arith.constant 92 : i8
    cf.cond_br %106, ^bb1(%c92_i8_35 : i8), ^bb53
  ^bb52:  // pred: ^bb11
    %107 = arith.subi %20, %c3_i64_8 : i64
    llvm.store %107, %arg1 : i64, !llvm.ptr
    cf.br ^bb51
  ^bb53:  // pred: ^bb51
    %c64_i256 = arith.constant 64 : i256
    %108 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c64_i256, %108 : i256, !llvm.ptr
    %109 = llvm.getelementptr %108[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %109, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_36 = arith.constant 0 : i8
    %110 = arith.cmpi ne, %c0_i8_36, %c0_i8_0 : i8
    cf.cond_br %110, ^bb3(%c0_i8_36 : i8), ^bb12
  ^bb54:  // pred: ^bb55
    %c1024_i64_37 = arith.constant 1024 : i64
    %111 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_38 = arith.constant 1 : i64
    %112 = arith.addi %111, %c1_i64_38 : i64
    llvm.store %112, %arg3 : i64, !llvm.ptr
    %113 = arith.cmpi ult, %c1024_i64_37, %112 : i64
    %c92_i8_39 = arith.constant 92 : i8
    cf.cond_br %113, ^bb1(%c92_i8_39 : i8), ^bb56
  ^bb55:  // pred: ^bb13
    %114 = arith.subi %24, %c3_i64_10 : i64
    llvm.store %114, %arg1 : i64, !llvm.ptr
    cf.br ^bb54
  ^bb56:  // pred: ^bb54
    %c77_i256 = arith.constant 77 : i256
    %115 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c77_i256, %115 : i256, !llvm.ptr
    %116 = llvm.getelementptr %115[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %116, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_40 = arith.constant 0 : i8
    %117 = arith.cmpi ne, %c0_i8_40, %c0_i8_0 : i8
    cf.cond_br %117, ^bb3(%c0_i8_40 : i8), ^bb14
  ^bb57:  // pred: ^bb58
    %c1024_i64_41 = arith.constant 1024 : i64
    %118 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_42 = arith.constant 1 : i64
    %119 = arith.addi %118, %c1_i64_42 : i64
    llvm.store %119, %arg3 : i64, !llvm.ptr
    %120 = arith.cmpi ult, %c1024_i64_41, %119 : i64
    %c92_i8_43 = arith.constant 92 : i8
    cf.cond_br %120, ^bb1(%c92_i8_43 : i8), ^bb59
  ^bb58:  // pred: ^bb22
    %121 = arith.subi %42, %c3_i64_12 : i64
    llvm.store %121, %arg1 : i64, !llvm.ptr
    cf.br ^bb57
  ^bb59:  // pred: ^bb57
    %c4294967295_i256 = arith.constant 4294967295 : i256
    %122 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c4294967295_i256, %122 : i256, !llvm.ptr
    %123 = llvm.getelementptr %122[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %123, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_44 = arith.constant 0 : i8
    %124 = arith.cmpi ne, %c0_i8_44, %c0_i8_0 : i8
    cf.cond_br %124, ^bb3(%c0_i8_44 : i8), ^bb23
  ^bb60:  // pred: ^bb61
    %c1024_i64_45 = arith.constant 1024 : i64
    %125 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_46 = arith.constant 1 : i64
    %126 = arith.addi %125, %c1_i64_46 : i64
    llvm.store %126, %arg3 : i64, !llvm.ptr
    %127 = arith.cmpi ult, %c1024_i64_45, %126 : i64
    %c92_i8_47 = arith.constant 92 : i8
    cf.cond_br %127, ^bb1(%c92_i8_47 : i8), ^bb62
  ^bb61:  // pred: ^bb30
    %128 = arith.subi %58, %c3_i64_14 : i64
    llvm.store %128, %arg1 : i64, !llvm.ptr
    cf.br ^bb60
  ^bb62:  // pred: ^bb60
    %c32_i256_48 = arith.constant 32 : i256
    %129 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c32_i256_48, %129 : i256, !llvm.ptr
    %130 = llvm.getelementptr %129[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %130, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_49 = arith.constant 0 : i8
    %131 = arith.cmpi ne, %c0_i8_49, %c0_i8_0 : i8
    cf.cond_br %131, ^bb3(%c0_i8_49 : i8), ^bb31
  ^bb63:  // pred: ^bb64
    %c1024_i64_50 = arith.constant 1024 : i64
    %132 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_51 = arith.constant 1 : i64
    %133 = arith.addi %132, %c1_i64_51 : i64
    llvm.store %133, %arg3 : i64, !llvm.ptr
    %134 = arith.cmpi ult, %c1024_i64_50, %133 : i64
    %c92_i8_52 = arith.constant 92 : i8
    cf.cond_br %134, ^bb1(%c92_i8_52 : i8), ^bb65
  ^bb64:  // pred: ^bb33
    %135 = arith.subi %64, %c3_i64_16 : i64
    llvm.store %135, %arg1 : i64, !llvm.ptr
    cf.br ^bb63
  ^bb65:  // pred: ^bb63
    %c64_i256_53 = arith.constant 64 : i256
    %136 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c64_i256_53, %136 : i256, !llvm.ptr
    %137 = llvm.getelementptr %136[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %137, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_54 = arith.constant 0 : i8
    %138 = arith.cmpi ne, %c0_i8_54, %c0_i8_0 : i8
    cf.cond_br %138, ^bb3(%c0_i8_54 : i8), ^bb34
  ^bb66:  // pred: ^bb67
    %c1024_i64_55 = arith.constant 1024 : i64
    %139 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_56 = arith.constant 1 : i64
    %140 = arith.addi %139, %c1_i64_56 : i64
    llvm.store %140, %arg3 : i64, !llvm.ptr
    %141 = arith.cmpi ult, %c1024_i64_55, %140 : i64
    %c92_i8_57 = arith.constant 92 : i8
    cf.cond_br %141, ^bb1(%c92_i8_57 : i8), ^bb68
  ^bb67:  // pred: ^bb35
    %142 = arith.subi %68, %c3_i64_18 : i64
    llvm.store %142, %arg1 : i64, !llvm.ptr
    cf.br ^bb66
  ^bb68:  // pred: ^bb66
    %c32_i256_58 = arith.constant 32 : i256
    %143 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c32_i256_58, %143 : i256, !llvm.ptr
    %144 = llvm.getelementptr %143[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %144, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_59 = arith.constant 0 : i8
    %145 = arith.cmpi ne, %c0_i8_59, %c0_i8_0 : i8
    cf.cond_br %145, ^bb3(%c0_i8_59 : i8), ^bb36
  ^bb69:  // pred: ^bb38
    %c0_i64_60 = arith.constant 0 : i64
    %c2_i8 = arith.constant 2 : i8
    %146 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_60, %c0_i64_60, %146, %c2_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c2_i8 : i8
  }
}
