---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  llvm.mlir.global internal @dora_global_memory_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_memory_size() {addr_space = 0 : i32} : i64
  func.func private @dora_fn_nop()
  func.func private @dora_fn_tracing(!llvm.ptr, i8, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_fn_is_static(!llvm.ptr) -> i8
  func.func private @dora_fn_exp(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_chainid(!llvm.ptr) -> i64
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gaslimit_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_code_copy(!llvm.ptr, !llvm.ptr, i64, i64)
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_call(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_returndata_copy(!llvm.ptr, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_tload(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_tstore(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func public @main(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr) -> i8 attributes {llvm.emit_c_interface} {
    %c0_i64 = arith.constant 0 : i64
    %0 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %c0_i64, %0 : i64, !llvm.ptr
    cf.br ^bb5
  ^bb1(%1: i8):  // 47 preds: ^bb2, ^bb4, ^bb5, ^bb8, ^bb9, ^bb13, ^bb14, ^bb17, ^bb18, ^bb21, ^bb22, ^bb26, ^bb27, ^bb30, ^bb31, ^bb34, ^bb35, ^bb38, ^bb39, ^bb41, ^bb42, ^bb43, ^bb45, ^bb46, ^bb47, ^bb49, ^bb50, ^bb52, ^bb54, ^bb55, ^bb58, ^bb59, ^bb60, ^bb63, ^bb64, ^bb66, ^bb67, ^bb68, ^bb71, ^bb72, ^bb74, ^bb75, ^bb76, ^bb77, ^bb78, ^bb81, ^bb82
    %c0_i64_0 = arith.constant 0 : i64
    %2 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_0, %c0_i64_0, %2, %1) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %1 : i8
  ^bb2(%3: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %3 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3:  // pred: ^bb4
    %c170141183460469231731687303715884105727_i256 = arith.constant 170141183460469231731687303715884105727 : i256
    %4 = llvm.load %arg3 : !llvm.ptr -> i64
    %5 = llvm.getelementptr %arg2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64 = arith.constant 1 : i64
    %6 = arith.addi %4, %c1_i64 : i64
    llvm.store %6, %arg3 : i64, !llvm.ptr
    llvm.store %c170141183460469231731687303715884105727_i256, %5 : i256, !llvm.ptr
    cf.br ^bb9
  ^bb4:  // pred: ^bb6
    %c1024_i64 = arith.constant 1024 : i64
    %7 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_1 = arith.constant 1 : i64
    %8 = arith.addi %7, %c1_i64_1 : i64
    %9 = arith.cmpi ult, %c1024_i64, %8 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %9, ^bb1(%c92_i8 : i8), ^bb3
  ^bb5:  // pred: ^bb0
    %10 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %11 = arith.cmpi uge, %10, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %11, ^bb6, ^bb1(%c80_i8 : i8)
  ^bb6:  // pred: ^bb5
    %12 = arith.subi %10, %c3_i64 : i64
    llvm.store %12, %arg1 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb7:  // pred: ^bb8
    %c0_i256 = arith.constant 0 : i256
    %13 = llvm.load %arg3 : !llvm.ptr -> i64
    %14 = llvm.getelementptr %arg2[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_2 = arith.constant 1 : i64
    %15 = arith.addi %13, %c1_i64_2 : i64
    llvm.store %15, %arg3 : i64, !llvm.ptr
    llvm.store %c0_i256, %14 : i256, !llvm.ptr
    cf.br ^bb14
  ^bb8:  // pred: ^bb10
    %c1024_i64_3 = arith.constant 1024 : i64
    %16 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_4 = arith.constant 1 : i64
    %17 = arith.addi %16, %c1_i64_4 : i64
    %18 = arith.cmpi ult, %c1024_i64_3, %17 : i64
    %c92_i8_5 = arith.constant 92 : i8
    cf.cond_br %18, ^bb1(%c92_i8_5 : i8), ^bb7
  ^bb9:  // pred: ^bb3
    %19 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_6 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %20 = arith.cmpi uge, %19, %c3_i64_6 : i64
    %c80_i8_7 = arith.constant 80 : i8
    cf.cond_br %20, ^bb10, ^bb1(%c80_i8_7 : i8)
  ^bb10:  // pred: ^bb9
    %21 = arith.subi %19, %c3_i64_6 : i64
    llvm.store %21, %arg1 : i64, !llvm.ptr
    cf.br ^bb8
  ^bb11:  // pred: ^bb13
    %22 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_8 = arith.constant 1 : i64
    %23 = arith.subi %22, %c1_i64_8 : i64
    %24 = llvm.getelementptr %arg2[%23] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %23, %arg3 : i64, !llvm.ptr
    %25 = llvm.load %24 : !llvm.ptr -> i256
    %26 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_9 = arith.constant 1 : i64
    %27 = arith.subi %26, %c1_i64_9 : i64
    %28 = llvm.getelementptr %arg2[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %27, %arg3 : i64, !llvm.ptr
    %29 = llvm.load %28 : !llvm.ptr -> i256
    %c32_i64 = arith.constant 32 : i64
    %c0_i64_10 = arith.constant 0 : i64
    %30 = arith.cmpi ne, %c32_i64, %c0_i64_10 : i64
    cf.cond_br %30, ^bb58, ^bb12
  ^bb12:  // 2 preds: ^bb11, ^bb62
    %31 = arith.trunci %25 : i256 to i64
    %32 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    %33 = llvm.load %32 : !llvm.ptr -> !llvm.ptr
    %34 = llvm.getelementptr %33[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %35 = llvm.intr.bswap(%29)  : (i256) -> i256
    llvm.store %35, %34 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb18
  ^bb13:  // pred: ^bb15
    %c1024_i64_11 = arith.constant 1024 : i64
    %36 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-2_i64 = arith.constant -2 : i64
    %37 = arith.addi %36, %c-2_i64 : i64
    %c2_i64 = arith.constant 2 : i64
    %38 = arith.cmpi ult, %36, %c2_i64 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %38, ^bb1(%c91_i8 : i8), ^bb11
  ^bb14:  // pred: ^bb7
    %39 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_12 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %40 = arith.cmpi uge, %39, %c3_i64_12 : i64
    %c80_i8_13 = arith.constant 80 : i8
    cf.cond_br %40, ^bb15, ^bb1(%c80_i8_13 : i8)
  ^bb15:  // pred: ^bb14
    %41 = arith.subi %39, %c3_i64_12 : i64
    llvm.store %41, %arg1 : i64, !llvm.ptr
    cf.br ^bb13
  ^bb16:  // pred: ^bb17
    %c170141183460469231731687303715884105727_i256_14 = arith.constant 170141183460469231731687303715884105727 : i256
    %42 = llvm.load %arg3 : !llvm.ptr -> i64
    %43 = llvm.getelementptr %arg2[%42] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_15 = arith.constant 1 : i64
    %44 = arith.addi %42, %c1_i64_15 : i64
    llvm.store %44, %arg3 : i64, !llvm.ptr
    llvm.store %c170141183460469231731687303715884105727_i256_14, %43 : i256, !llvm.ptr
    cf.br ^bb22
  ^bb17:  // pred: ^bb19
    %c1024_i64_16 = arith.constant 1024 : i64
    %45 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_17 = arith.constant 1 : i64
    %46 = arith.addi %45, %c1_i64_17 : i64
    %47 = arith.cmpi ult, %c1024_i64_16, %46 : i64
    %c92_i8_18 = arith.constant 92 : i8
    cf.cond_br %47, ^bb1(%c92_i8_18 : i8), ^bb16
  ^bb18:  // pred: ^bb12
    %48 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_19 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %49 = arith.cmpi uge, %48, %c3_i64_19 : i64
    %c80_i8_20 = arith.constant 80 : i8
    cf.cond_br %49, ^bb19, ^bb1(%c80_i8_20 : i8)
  ^bb19:  // pred: ^bb18
    %50 = arith.subi %48, %c3_i64_19 : i64
    llvm.store %50, %arg1 : i64, !llvm.ptr
    cf.br ^bb17
  ^bb20:  // pred: ^bb21
    %c32_i256 = arith.constant 32 : i256
    %51 = llvm.load %arg3 : !llvm.ptr -> i64
    %52 = llvm.getelementptr %arg2[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_21 = arith.constant 1 : i64
    %53 = arith.addi %51, %c1_i64_21 : i64
    llvm.store %53, %arg3 : i64, !llvm.ptr
    llvm.store %c32_i256, %52 : i256, !llvm.ptr
    cf.br ^bb27
  ^bb21:  // pred: ^bb23
    %c1024_i64_22 = arith.constant 1024 : i64
    %54 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_23 = arith.constant 1 : i64
    %55 = arith.addi %54, %c1_i64_23 : i64
    %56 = arith.cmpi ult, %c1024_i64_22, %55 : i64
    %c92_i8_24 = arith.constant 92 : i8
    cf.cond_br %56, ^bb1(%c92_i8_24 : i8), ^bb20
  ^bb22:  // pred: ^bb16
    %57 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_25 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %58 = arith.cmpi uge, %57, %c3_i64_25 : i64
    %c80_i8_26 = arith.constant 80 : i8
    cf.cond_br %58, ^bb23, ^bb1(%c80_i8_26 : i8)
  ^bb23:  // pred: ^bb22
    %59 = arith.subi %57, %c3_i64_25 : i64
    llvm.store %59, %arg1 : i64, !llvm.ptr
    cf.br ^bb21
  ^bb24:  // pred: ^bb26
    %60 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_27 = arith.constant 1 : i64
    %61 = arith.subi %60, %c1_i64_27 : i64
    %62 = llvm.getelementptr %arg2[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %61, %arg3 : i64, !llvm.ptr
    %63 = llvm.load %62 : !llvm.ptr -> i256
    %64 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_28 = arith.constant 1 : i64
    %65 = arith.subi %64, %c1_i64_28 : i64
    %66 = llvm.getelementptr %arg2[%65] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %65, %arg3 : i64, !llvm.ptr
    %67 = llvm.load %66 : !llvm.ptr -> i256
    %c32_i64_29 = arith.constant 32 : i64
    %c0_i64_30 = arith.constant 0 : i64
    %68 = arith.cmpi ne, %c32_i64_29, %c0_i64_30 : i64
    cf.cond_br %68, ^bb66, ^bb25
  ^bb25:  // 2 preds: ^bb24, ^bb70
    %69 = arith.trunci %63 : i256 to i64
    %70 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    %71 = llvm.load %70 : !llvm.ptr -> !llvm.ptr
    %72 = llvm.getelementptr %71[%69] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %73 = llvm.intr.bswap(%67)  : (i256) -> i256
    llvm.store %73, %72 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb31
  ^bb26:  // pred: ^bb28
    %c1024_i64_31 = arith.constant 1024 : i64
    %74 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-2_i64_32 = arith.constant -2 : i64
    %75 = arith.addi %74, %c-2_i64_32 : i64
    %c2_i64_33 = arith.constant 2 : i64
    %76 = arith.cmpi ult, %74, %c2_i64_33 : i64
    %c91_i8_34 = arith.constant 91 : i8
    cf.cond_br %76, ^bb1(%c91_i8_34 : i8), ^bb24
  ^bb27:  // pred: ^bb20
    %77 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_35 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %78 = arith.cmpi uge, %77, %c3_i64_35 : i64
    %c80_i8_36 = arith.constant 80 : i8
    cf.cond_br %78, ^bb28, ^bb1(%c80_i8_36 : i8)
  ^bb28:  // pred: ^bb27
    %79 = arith.subi %77, %c3_i64_35 : i64
    llvm.store %79, %arg1 : i64, !llvm.ptr
    cf.br ^bb26
  ^bb29:  // pred: ^bb30
    %c41_i256 = arith.constant 41 : i256
    %80 = llvm.load %arg3 : !llvm.ptr -> i64
    %81 = llvm.getelementptr %arg2[%80] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_37 = arith.constant 1 : i64
    %82 = arith.addi %80, %c1_i64_37 : i64
    llvm.store %82, %arg3 : i64, !llvm.ptr
    llvm.store %c41_i256, %81 : i256, !llvm.ptr
    cf.br ^bb35
  ^bb30:  // pred: ^bb32
    %c1024_i64_38 = arith.constant 1024 : i64
    %83 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_39 = arith.constant 1 : i64
    %84 = arith.addi %83, %c1_i64_39 : i64
    %85 = arith.cmpi ult, %c1024_i64_38, %84 : i64
    %c92_i8_40 = arith.constant 92 : i8
    cf.cond_br %85, ^bb1(%c92_i8_40 : i8), ^bb29
  ^bb31:  // pred: ^bb25
    %86 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_41 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %87 = arith.cmpi uge, %86, %c3_i64_41 : i64
    %c80_i8_42 = arith.constant 80 : i8
    cf.cond_br %87, ^bb32, ^bb1(%c80_i8_42 : i8)
  ^bb32:  // pred: ^bb31
    %88 = arith.subi %86, %c3_i64_41 : i64
    llvm.store %88, %arg1 : i64, !llvm.ptr
    cf.br ^bb30
  ^bb33:  // pred: ^bb34
    %c0_i256_43 = arith.constant 0 : i256
    %89 = llvm.load %arg3 : !llvm.ptr -> i64
    %90 = llvm.getelementptr %arg2[%89] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_44 = arith.constant 1 : i64
    %91 = arith.addi %89, %c1_i64_44 : i64
    llvm.store %91, %arg3 : i64, !llvm.ptr
    llvm.store %c0_i256_43, %90 : i256, !llvm.ptr
    cf.br ^bb39
  ^bb34:  // pred: ^bb36
    %c1024_i64_45 = arith.constant 1024 : i64
    %92 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_46 = arith.constant 1 : i64
    %93 = arith.addi %92, %c1_i64_46 : i64
    %94 = arith.cmpi ult, %c1024_i64_45, %93 : i64
    %c92_i8_47 = arith.constant 92 : i8
    cf.cond_br %94, ^bb1(%c92_i8_47 : i8), ^bb33
  ^bb35:  // pred: ^bb29
    %95 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_48 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %96 = arith.cmpi uge, %95, %c3_i64_48 : i64
    %c80_i8_49 = arith.constant 80 : i8
    cf.cond_br %96, ^bb36, ^bb1(%c80_i8_49 : i8)
  ^bb36:  // pred: ^bb35
    %97 = arith.subi %95, %c3_i64_48 : i64
    llvm.store %97, %arg1 : i64, !llvm.ptr
    cf.br ^bb34
  ^bb37:  // pred: ^bb38
    %c0_i256_50 = arith.constant 0 : i256
    %98 = llvm.load %arg3 : !llvm.ptr -> i64
    %99 = llvm.getelementptr %arg2[%98] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_51 = arith.constant 1 : i64
    %100 = arith.addi %98, %c1_i64_51 : i64
    llvm.store %100, %arg3 : i64, !llvm.ptr
    llvm.store %c0_i256_50, %99 : i256, !llvm.ptr
    cf.br ^bb50
  ^bb38:  // pred: ^bb40
    %c1024_i64_52 = arith.constant 1024 : i64
    %101 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_53 = arith.constant 1 : i64
    %102 = arith.addi %101, %c1_i64_53 : i64
    %103 = arith.cmpi ult, %c1024_i64_52, %102 : i64
    %c92_i8_54 = arith.constant 92 : i8
    cf.cond_br %103, ^bb1(%c92_i8_54 : i8), ^bb37
  ^bb39:  // pred: ^bb33
    %104 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_55 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %105 = arith.cmpi uge, %104, %c3_i64_55 : i64
    %c80_i8_56 = arith.constant 80 : i8
    cf.cond_br %105, ^bb40, ^bb1(%c80_i8_56 : i8)
  ^bb40:  // pred: ^bb39
    %106 = arith.subi %104, %c3_i64_55 : i64
    llvm.store %106, %arg1 : i64, !llvm.ptr
    cf.br ^bb38
  ^bb41:  // pred: ^bb49
    %107 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_57 = arith.constant 1 : i64
    %108 = arith.subi %107, %c1_i64_57 : i64
    %109 = llvm.getelementptr %arg2[%108] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %108, %arg3 : i64, !llvm.ptr
    %110 = llvm.load %109 : !llvm.ptr -> i256
    %111 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_58 = arith.constant 1 : i64
    %112 = arith.subi %111, %c1_i64_58 : i64
    %113 = llvm.getelementptr %arg2[%112] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %112, %arg3 : i64, !llvm.ptr
    %114 = llvm.load %113 : !llvm.ptr -> i256
    %115 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_59 = arith.constant 1 : i64
    %116 = arith.subi %115, %c1_i64_59 : i64
    %117 = llvm.getelementptr %arg2[%116] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %116, %arg3 : i64, !llvm.ptr
    %118 = llvm.load %117 : !llvm.ptr -> i256
    %119 = call @dora_fn_is_static(%arg0) : (!llvm.ptr) -> i8
    %c0_i8 = arith.constant 0 : i8
    %120 = arith.cmpi ne, %119, %c0_i8 : i8
    %c87_i8 = arith.constant 87 : i8
    cf.cond_br %120, ^bb1(%c87_i8 : i8), ^bb42
  ^bb42:  // pred: ^bb41
    %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256
    %121 = arith.cmpi sgt, %118, %c18446744073709551615_i256 : i256
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %121, ^bb1(%c84_i8 : i8), ^bb43
  ^bb43:  // pred: ^bb42
    %122 = arith.trunci %118 : i256 to i64
    %c0_i64_60 = arith.constant 0 : i64
    %123 = arith.cmpi slt, %122, %c0_i64_60 : i64
    %c84_i8_61 = arith.constant 84 : i8
    cf.cond_br %123, ^bb1(%c84_i8_61 : i8), ^bb44
  ^bb44:  // pred: ^bb43
    %c0_i64_62 = arith.constant 0 : i64
    %124 = arith.cmpi ne, %122, %c0_i64_62 : i64
    cf.cond_br %124, ^bb74, ^bb45
  ^bb45:  // 2 preds: ^bb44, ^bb80
    %c32000_i64 = arith.constant 32000 : i64
    %125 = llvm.load %arg1 : !llvm.ptr -> i64
    %126 = arith.cmpi ult, %125, %c32000_i64 : i64
    scf.if %126 {
    } else {
      %276 = arith.subi %125, %c32000_i64 : i64
      llvm.store %276, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_63 = arith.constant 80 : i8
    cf.cond_br %126, ^bb1(%c80_i8_63 : i8), ^bb46
  ^bb46:  // pred: ^bb45
    %c1_i256 = arith.constant 1 : i256
    %127 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %110, %127 {alignment = 1 : i64} : i256, !llvm.ptr
    %128 = llvm.load %arg1 : !llvm.ptr -> i64
    %129 = arith.trunci %114 : i256 to i64
    %130 = call @dora_fn_create(%arg0, %122, %129, %127, %128) : (!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
    %131 = llvm.getelementptr %130[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %132 = llvm.load %131 : !llvm.ptr -> i8
    %c0_i8_64 = arith.constant 0 : i8
    %133 = arith.cmpi ne, %132, %c0_i8_64 : i8
    cf.cond_br %133, ^bb1(%132 : i8), ^bb47
  ^bb47:  // pred: ^bb46
    %134 = llvm.getelementptr %130[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %135 = llvm.load %134 : !llvm.ptr -> i64
    %136 = llvm.load %arg1 : !llvm.ptr -> i64
    %137 = arith.cmpi ult, %136, %135 : i64
    scf.if %137 {
    } else {
      %276 = arith.subi %136, %135 : i64
      llvm.store %276, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_65 = arith.constant 80 : i8
    cf.cond_br %137, ^bb1(%c80_i8_65 : i8), ^bb48
  ^bb48:  // pred: ^bb47
    %138 = llvm.load %127 : !llvm.ptr -> i256
    %139 = llvm.load %arg3 : !llvm.ptr -> i64
    %140 = llvm.getelementptr %arg2[%139] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_66 = arith.constant 1 : i64
    %141 = arith.addi %139, %c1_i64_66 : i64
    llvm.store %141, %arg3 : i64, !llvm.ptr
    llvm.store %138, %140 : i256, !llvm.ptr
    cf.br ^bb55
  ^bb49:  // pred: ^bb51
    %c1024_i64_67 = arith.constant 1024 : i64
    %142 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-2_i64_68 = arith.constant -2 : i64
    %143 = arith.addi %142, %c-2_i64_68 : i64
    %c3_i64_69 = arith.constant 3 : i64
    %144 = arith.cmpi ult, %142, %c3_i64_69 : i64
    %c91_i8_70 = arith.constant 91 : i8
    cf.cond_br %144, ^bb1(%c91_i8_70 : i8), ^bb41
  ^bb50:  // pred: ^bb37
    %145 = llvm.load %arg1 : !llvm.ptr -> i64
    %c0_i64_71 = arith.constant 0 : i64
    call @dora_fn_nop() : () -> ()
    %146 = arith.cmpi uge, %145, %c0_i64_71 : i64
    %c80_i8_72 = arith.constant 80 : i8
    cf.cond_br %146, ^bb51, ^bb1(%c80_i8_72 : i8)
  ^bb51:  // pred: ^bb50
    %147 = arith.subi %145, %c0_i64_71 : i64
    llvm.store %147, %arg1 : i64, !llvm.ptr
    cf.br ^bb49
  ^bb52:  // pred: ^bb54
    %148 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_73 = arith.constant 1 : i64
    %149 = arith.subi %148, %c1_i64_73 : i64
    %150 = llvm.getelementptr %arg2[%149] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %149, %arg3 : i64, !llvm.ptr
    %151 = llvm.load %150 : !llvm.ptr -> i256
    %c1_i256_74 = arith.constant 1 : i256
    %152 = llvm.alloca %c1_i256_74 x i256 : (i256) -> !llvm.ptr
    llvm.store %151, %152 {alignment = 1 : i64} : i256, !llvm.ptr
    %153 = call @dora_fn_extcodesize(%arg0, %152) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %154 = llvm.getelementptr %153[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %155 = llvm.load %154 : !llvm.ptr -> i64
    %156 = llvm.getelementptr %153[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %157 = llvm.load %156 : !llvm.ptr -> i64
    %158 = llvm.load %arg1 : !llvm.ptr -> i64
    %159 = arith.cmpi ult, %158, %157 : i64
    scf.if %159 {
    } else {
      %276 = arith.subi %158, %157 : i64
      llvm.store %276, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_75 = arith.constant 80 : i8
    cf.cond_br %159, ^bb1(%c80_i8_75 : i8), ^bb53
  ^bb53:  // pred: ^bb52
    %160 = arith.extui %155 : i64 to i256
    %161 = llvm.load %arg3 : !llvm.ptr -> i64
    %162 = llvm.getelementptr %arg2[%161] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_76 = arith.constant 1 : i64
    %163 = arith.addi %161, %c1_i64_76 : i64
    llvm.store %163, %arg3 : i64, !llvm.ptr
    llvm.store %160, %162 : i256, !llvm.ptr
    cf.br ^bb57
  ^bb54:  // pred: ^bb56
    %c1024_i64_77 = arith.constant 1024 : i64
    %164 = llvm.load %arg3 : !llvm.ptr -> i64
    %c0_i64_78 = arith.constant 0 : i64
    %165 = arith.addi %164, %c0_i64_78 : i64
    %c1_i64_79 = arith.constant 1 : i64
    %166 = arith.cmpi ult, %164, %c1_i64_79 : i64
    %c91_i8_80 = arith.constant 91 : i8
    cf.cond_br %166, ^bb1(%c91_i8_80 : i8), ^bb52
  ^bb55:  // pred: ^bb48
    %167 = llvm.load %arg1 : !llvm.ptr -> i64
    %c0_i64_81 = arith.constant 0 : i64
    call @dora_fn_nop() : () -> ()
    %168 = arith.cmpi uge, %167, %c0_i64_81 : i64
    %c80_i8_82 = arith.constant 80 : i8
    cf.cond_br %168, ^bb56, ^bb1(%c80_i8_82 : i8)
  ^bb56:  // pred: ^bb55
    %169 = arith.subi %167, %c0_i64_81 : i64
    llvm.store %169, %arg1 : i64, !llvm.ptr
    cf.br ^bb54
  ^bb57:  // pred: ^bb53
    %c0_i64_83 = arith.constant 0 : i64
    %c1_i8 = arith.constant 1 : i8
    %170 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_83, %c0_i64_83, %170, %c1_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c1_i8 : i8
  ^bb58:  // pred: ^bb11
    %c18446744073709551615_i256_84 = arith.constant 18446744073709551615 : i256
    %171 = arith.cmpi sgt, %25, %c18446744073709551615_i256_84 : i256
    %c84_i8_85 = arith.constant 84 : i8
    cf.cond_br %171, ^bb1(%c84_i8_85 : i8), ^bb59
  ^bb59:  // pred: ^bb58
    %172 = arith.trunci %25 : i256 to i64
    %c0_i64_86 = arith.constant 0 : i64
    %173 = arith.cmpi slt, %172, %c0_i64_86 : i64
    %c84_i8_87 = arith.constant 84 : i8
    cf.cond_br %173, ^bb1(%c84_i8_87 : i8), ^bb60
  ^bb60:  // pred: ^bb59
    %174 = arith.addi %172, %c32_i64 : i64
    %c0_i64_88 = arith.constant 0 : i64
    %175 = arith.cmpi slt, %174, %c0_i64_88 : i64
    %c84_i8_89 = arith.constant 84 : i8
    cf.cond_br %175, ^bb1(%c84_i8_89 : i8), ^bb61
  ^bb61:  // pred: ^bb60
    %c31_i64 = arith.constant 31 : i64
    %c32_i64_90 = arith.constant 32 : i64
    %176 = arith.addi %174, %c31_i64 : i64
    %177 = arith.divui %176, %c32_i64_90 : i64
    %c32_i64_91 = arith.constant 32 : i64
    %178 = arith.muli %177, %c32_i64_91 : i64
    %179 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    %180 = llvm.load %179 : !llvm.ptr -> i64
    %c31_i64_92 = arith.constant 31 : i64
    %c32_i64_93 = arith.constant 32 : i64
    %181 = arith.addi %180, %c31_i64_92 : i64
    %182 = arith.divui %181, %c32_i64_93 : i64
    %183 = arith.muli %182, %c32_i64_91 : i64
    %184 = arith.cmpi ult, %183, %178 : i64
    cf.cond_br %184, ^bb63, ^bb62
  ^bb62:  // 2 preds: ^bb61, ^bb65
    cf.br ^bb12
  ^bb63:  // pred: ^bb61
    %c3_i64_94 = arith.constant 3 : i64
    %c512_i64 = arith.constant 512 : i64
    %185 = arith.muli %182, %182 : i64
    %186 = arith.divui %185, %c512_i64 : i64
    %187 = arith.muli %182, %c3_i64_94 : i64
    %188 = arith.addi %186, %187 : i64
    %c3_i64_95 = arith.constant 3 : i64
    %c512_i64_96 = arith.constant 512 : i64
    %189 = arith.muli %177, %177 : i64
    %190 = arith.divui %189, %c512_i64_96 : i64
    %191 = arith.muli %177, %c3_i64_95 : i64
    %192 = arith.addi %190, %191 : i64
    %193 = arith.subi %192, %188 : i64
    %194 = llvm.load %arg1 : !llvm.ptr -> i64
    %195 = arith.cmpi ult, %194, %193 : i64
    scf.if %195 {
    } else {
      %276 = arith.subi %194, %193 : i64
      llvm.store %276, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_97 = arith.constant 80 : i8
    cf.cond_br %195, ^bb1(%c80_i8_97 : i8), ^bb64
  ^bb64:  // pred: ^bb63
    %196 = call @dora_fn_extend_memory(%arg0, %178) : (!llvm.ptr, i64) -> !llvm.ptr
    %197 = llvm.getelementptr %196[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %198 = llvm.load %197 : !llvm.ptr -> !llvm.ptr
    %199 = llvm.getelementptr %196[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %200 = llvm.load %199 : !llvm.ptr -> i8
    %c0_i8_98 = arith.constant 0 : i8
    %201 = arith.cmpi ne, %200, %c0_i8_98 : i8
    cf.cond_br %201, ^bb1(%200 : i8), ^bb65
  ^bb65:  // pred: ^bb64
    %202 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    llvm.store %198, %202 : !llvm.ptr, !llvm.ptr
    %203 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %178, %203 : i64, !llvm.ptr
    cf.br ^bb62
  ^bb66:  // pred: ^bb24
    %c18446744073709551615_i256_99 = arith.constant 18446744073709551615 : i256
    %204 = arith.cmpi sgt, %63, %c18446744073709551615_i256_99 : i256
    %c84_i8_100 = arith.constant 84 : i8
    cf.cond_br %204, ^bb1(%c84_i8_100 : i8), ^bb67
  ^bb67:  // pred: ^bb66
    %205 = arith.trunci %63 : i256 to i64
    %c0_i64_101 = arith.constant 0 : i64
    %206 = arith.cmpi slt, %205, %c0_i64_101 : i64
    %c84_i8_102 = arith.constant 84 : i8
    cf.cond_br %206, ^bb1(%c84_i8_102 : i8), ^bb68
  ^bb68:  // pred: ^bb67
    %207 = arith.addi %205, %c32_i64_29 : i64
    %c0_i64_103 = arith.constant 0 : i64
    %208 = arith.cmpi slt, %207, %c0_i64_103 : i64
    %c84_i8_104 = arith.constant 84 : i8
    cf.cond_br %208, ^bb1(%c84_i8_104 : i8), ^bb69
  ^bb69:  // pred: ^bb68
    %c31_i64_105 = arith.constant 31 : i64
    %c32_i64_106 = arith.constant 32 : i64
    %209 = arith.addi %207, %c31_i64_105 : i64
    %210 = arith.divui %209, %c32_i64_106 : i64
    %c32_i64_107 = arith.constant 32 : i64
    %211 = arith.muli %210, %c32_i64_107 : i64
    %212 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    %213 = llvm.load %212 : !llvm.ptr -> i64
    %c31_i64_108 = arith.constant 31 : i64
    %c32_i64_109 = arith.constant 32 : i64
    %214 = arith.addi %213, %c31_i64_108 : i64
    %215 = arith.divui %214, %c32_i64_109 : i64
    %216 = arith.muli %215, %c32_i64_107 : i64
    %217 = arith.cmpi ult, %216, %211 : i64
    cf.cond_br %217, ^bb71, ^bb70
  ^bb70:  // 2 preds: ^bb69, ^bb73
    cf.br ^bb25
  ^bb71:  // pred: ^bb69
    %c3_i64_110 = arith.constant 3 : i64
    %c512_i64_111 = arith.constant 512 : i64
    %218 = arith.muli %215, %215 : i64
    %219 = arith.divui %218, %c512_i64_111 : i64
    %220 = arith.muli %215, %c3_i64_110 : i64
    %221 = arith.addi %219, %220 : i64
    %c3_i64_112 = arith.constant 3 : i64
    %c512_i64_113 = arith.constant 512 : i64
    %222 = arith.muli %210, %210 : i64
    %223 = arith.divui %222, %c512_i64_113 : i64
    %224 = arith.muli %210, %c3_i64_112 : i64
    %225 = arith.addi %223, %224 : i64
    %226 = arith.subi %225, %221 : i64
    %227 = llvm.load %arg1 : !llvm.ptr -> i64
    %228 = arith.cmpi ult, %227, %226 : i64
    scf.if %228 {
    } else {
      %276 = arith.subi %227, %226 : i64
      llvm.store %276, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_114 = arith.constant 80 : i8
    cf.cond_br %228, ^bb1(%c80_i8_114 : i8), ^bb72
  ^bb72:  // pred: ^bb71
    %229 = call @dora_fn_extend_memory(%arg0, %211) : (!llvm.ptr, i64) -> !llvm.ptr
    %230 = llvm.getelementptr %229[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %231 = llvm.load %230 : !llvm.ptr -> !llvm.ptr
    %232 = llvm.getelementptr %229[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %233 = llvm.load %232 : !llvm.ptr -> i8
    %c0_i8_115 = arith.constant 0 : i8
    %234 = arith.cmpi ne, %233, %c0_i8_115 : i8
    cf.cond_br %234, ^bb1(%233 : i8), ^bb73
  ^bb73:  // pred: ^bb72
    %235 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    llvm.store %231, %235 : !llvm.ptr, !llvm.ptr
    %236 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %211, %236 : i64, !llvm.ptr
    cf.br ^bb70
  ^bb74:  // pred: ^bb44
    %c49152_i64 = arith.constant 49152 : i64
    %237 = arith.cmpi ugt, %122, %c49152_i64 : i64
    %c100_i8 = arith.constant 100 : i8
    cf.cond_br %237, ^bb1(%c100_i8 : i8), ^bb75
  ^bb75:  // pred: ^bb74
    %c31_i64_116 = arith.constant 31 : i64
    %c32_i64_117 = arith.constant 32 : i64
    %238 = arith.addi %122, %c31_i64_116 : i64
    %239 = arith.divui %238, %c32_i64_117 : i64
    %c2_i64_118 = arith.constant 2 : i64
    %240 = arith.muli %239, %c2_i64_118 : i64
    %241 = llvm.load %arg1 : !llvm.ptr -> i64
    %242 = arith.cmpi ult, %241, %240 : i64
    scf.if %242 {
    } else {
      %276 = arith.subi %241, %240 : i64
      llvm.store %276, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_119 = arith.constant 80 : i8
    cf.cond_br %242, ^bb1(%c80_i8_119 : i8), ^bb76
  ^bb76:  // pred: ^bb75
    %c18446744073709551615_i256_120 = arith.constant 18446744073709551615 : i256
    %243 = arith.cmpi sgt, %114, %c18446744073709551615_i256_120 : i256
    %c84_i8_121 = arith.constant 84 : i8
    cf.cond_br %243, ^bb1(%c84_i8_121 : i8), ^bb77
  ^bb77:  // pred: ^bb76
    %244 = arith.trunci %114 : i256 to i64
    %c0_i64_122 = arith.constant 0 : i64
    %245 = arith.cmpi slt, %244, %c0_i64_122 : i64
    %c84_i8_123 = arith.constant 84 : i8
    cf.cond_br %245, ^bb1(%c84_i8_123 : i8), ^bb78
  ^bb78:  // pred: ^bb77
    %246 = arith.addi %244, %122 : i64
    %c0_i64_124 = arith.constant 0 : i64
    %247 = arith.cmpi slt, %246, %c0_i64_124 : i64
    %c84_i8_125 = arith.constant 84 : i8
    cf.cond_br %247, ^bb1(%c84_i8_125 : i8), ^bb79
  ^bb79:  // pred: ^bb78
    %c31_i64_126 = arith.constant 31 : i64
    %c32_i64_127 = arith.constant 32 : i64
    %248 = arith.addi %246, %c31_i64_126 : i64
    %249 = arith.divui %248, %c32_i64_127 : i64
    %c32_i64_128 = arith.constant 32 : i64
    %250 = arith.muli %249, %c32_i64_128 : i64
    %251 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    %252 = llvm.load %251 : !llvm.ptr -> i64
    %c31_i64_129 = arith.constant 31 : i64
    %c32_i64_130 = arith.constant 32 : i64
    %253 = arith.addi %252, %c31_i64_129 : i64
    %254 = arith.divui %253, %c32_i64_130 : i64
    %255 = arith.muli %254, %c32_i64_128 : i64
    %256 = arith.cmpi ult, %255, %250 : i64
    cf.cond_br %256, ^bb81, ^bb80
  ^bb80:  // 2 preds: ^bb79, ^bb83
    cf.br ^bb45
  ^bb81:  // pred: ^bb79
    %c3_i64_131 = arith.constant 3 : i64
    %c512_i64_132 = arith.constant 512 : i64
    %257 = arith.muli %254, %254 : i64
    %258 = arith.divui %257, %c512_i64_132 : i64
    %259 = arith.muli %254, %c3_i64_131 : i64
    %260 = arith.addi %258, %259 : i64
    %c3_i64_133 = arith.constant 3 : i64
    %c512_i64_134 = arith.constant 512 : i64
    %261 = arith.muli %249, %249 : i64
    %262 = arith.divui %261, %c512_i64_134 : i64
    %263 = arith.muli %249, %c3_i64_133 : i64
    %264 = arith.addi %262, %263 : i64
    %265 = arith.subi %264, %260 : i64
    %266 = llvm.load %arg1 : !llvm.ptr -> i64
    %267 = arith.cmpi ult, %266, %265 : i64
    scf.if %267 {
    } else {
      %276 = arith.subi %266, %265 : i64
      llvm.store %276, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_135 = arith.constant 80 : i8
    cf.cond_br %267, ^bb1(%c80_i8_135 : i8), ^bb82
  ^bb82:  // pred: ^bb81
    %268 = call @dora_fn_extend_memory(%arg0, %250) : (!llvm.ptr, i64) -> !llvm.ptr
    %269 = llvm.getelementptr %268[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %270 = llvm.load %269 : !llvm.ptr -> !llvm.ptr
    %271 = llvm.getelementptr %268[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %272 = llvm.load %271 : !llvm.ptr -> i8
    %c0_i8_136 = arith.constant 0 : i8
    %273 = arith.cmpi ne, %272, %c0_i8_136 : i8
    cf.cond_br %273, ^bb1(%272 : i8), ^bb83
  ^bb83:  // pred: ^bb82
    %274 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    llvm.store %270, %274 : !llvm.ptr, !llvm.ptr
    %275 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %250, %275 : i64, !llvm.ptr
    cf.br ^bb80
  }
}
