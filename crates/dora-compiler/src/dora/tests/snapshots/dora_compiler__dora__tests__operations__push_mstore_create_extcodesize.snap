---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  func.func private @dora_fn_nop()
  func.func private @dora_fn_tracing(!llvm.ptr, i8, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_fn_is_static(!llvm.ptr) -> i8
  func.func private @dora_fn_exp(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_chainid(!llvm.ptr) -> i64
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gaslimit_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_memory_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_memory_size(!llvm.ptr) -> i64
  func.func private @dora_fn_code_copy(!llvm.ptr, !llvm.ptr, i64, i64)
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_call(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_returndata_copy(!llvm.ptr, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_tload(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_tstore(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func public @main(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr) -> i8 attributes {llvm.emit_c_interface} {
    cf.br ^bb5
  ^bb1(%0: i8):  // 47 preds: ^bb2, ^bb4, ^bb5, ^bb8, ^bb9, ^bb13, ^bb14, ^bb17, ^bb18, ^bb21, ^bb22, ^bb26, ^bb27, ^bb30, ^bb31, ^bb34, ^bb35, ^bb38, ^bb39, ^bb41, ^bb42, ^bb43, ^bb45, ^bb46, ^bb47, ^bb49, ^bb50, ^bb52, ^bb54, ^bb55, ^bb58, ^bb59, ^bb60, ^bb63, ^bb64, ^bb66, ^bb67, ^bb68, ^bb71, ^bb72, ^bb74, ^bb75, ^bb76, ^bb77, ^bb78, ^bb81, ^bb82
    %c0_i64 = arith.constant 0 : i64
    %1 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64, %c0_i64, %1, %0) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %0 : i8
  ^bb2(%2: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %2 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3:  // pred: ^bb4
    %c170141183460469231731687303715884105727_i256 = arith.constant 170141183460469231731687303715884105727 : i256
    %3 = llvm.load %arg3 : !llvm.ptr -> i64
    %4 = llvm.getelementptr %arg2[%3] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64 = arith.constant 1 : i64
    %5 = arith.addi %3, %c1_i64 : i64
    llvm.store %5, %arg3 : i64, !llvm.ptr
    llvm.store %c170141183460469231731687303715884105727_i256, %4 : i256, !llvm.ptr
    cf.br ^bb9
  ^bb4:  // pred: ^bb6
    %c1024_i64 = arith.constant 1024 : i64
    %6 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_0 = arith.constant 1 : i64
    %7 = arith.addi %6, %c1_i64_0 : i64
    %8 = arith.cmpi ult, %c1024_i64, %7 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %8, ^bb1(%c92_i8 : i8), ^bb3
  ^bb5:  // pred: ^bb0
    %9 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %10 = arith.cmpi uge, %9, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %10, ^bb6, ^bb1(%c80_i8 : i8)
  ^bb6:  // pred: ^bb5
    %11 = arith.subi %9, %c3_i64 : i64
    llvm.store %11, %arg1 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb7:  // pred: ^bb8
    %c0_i256 = arith.constant 0 : i256
    %12 = llvm.load %arg3 : !llvm.ptr -> i64
    %13 = llvm.getelementptr %arg2[%12] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_1 = arith.constant 1 : i64
    %14 = arith.addi %12, %c1_i64_1 : i64
    llvm.store %14, %arg3 : i64, !llvm.ptr
    llvm.store %c0_i256, %13 : i256, !llvm.ptr
    cf.br ^bb14
  ^bb8:  // pred: ^bb10
    %c1024_i64_2 = arith.constant 1024 : i64
    %15 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_3 = arith.constant 1 : i64
    %16 = arith.addi %15, %c1_i64_3 : i64
    %17 = arith.cmpi ult, %c1024_i64_2, %16 : i64
    %c92_i8_4 = arith.constant 92 : i8
    cf.cond_br %17, ^bb1(%c92_i8_4 : i8), ^bb7
  ^bb9:  // pred: ^bb3
    %18 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_5 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %19 = arith.cmpi uge, %18, %c3_i64_5 : i64
    %c80_i8_6 = arith.constant 80 : i8
    cf.cond_br %19, ^bb10, ^bb1(%c80_i8_6 : i8)
  ^bb10:  // pred: ^bb9
    %20 = arith.subi %18, %c3_i64_5 : i64
    llvm.store %20, %arg1 : i64, !llvm.ptr
    cf.br ^bb8
  ^bb11:  // pred: ^bb13
    %21 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_7 = arith.constant 1 : i64
    %22 = arith.subi %21, %c1_i64_7 : i64
    %23 = llvm.getelementptr %arg2[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %22, %arg3 : i64, !llvm.ptr
    %24 = llvm.load %23 : !llvm.ptr -> i256
    %25 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_8 = arith.constant 1 : i64
    %26 = arith.subi %25, %c1_i64_8 : i64
    %27 = llvm.getelementptr %arg2[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %26, %arg3 : i64, !llvm.ptr
    %28 = llvm.load %27 : !llvm.ptr -> i256
    %c32_i64 = arith.constant 32 : i64
    %c0_i64_9 = arith.constant 0 : i64
    %29 = arith.cmpi ne, %c32_i64, %c0_i64_9 : i64
    cf.cond_br %29, ^bb58, ^bb12
  ^bb12:  // 2 preds: ^bb11, ^bb62
    %30 = arith.trunci %24 : i256 to i64
    %31 = call @dora_fn_memory_ptr(%arg0) : (!llvm.ptr) -> !llvm.ptr
    %32 = llvm.getelementptr %31[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %33 = llvm.intr.bswap(%28)  : (i256) -> i256
    llvm.store %33, %32 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb18
  ^bb13:  // pred: ^bb15
    %c1024_i64_10 = arith.constant 1024 : i64
    %34 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-2_i64 = arith.constant -2 : i64
    %35 = arith.addi %34, %c-2_i64 : i64
    %c2_i64 = arith.constant 2 : i64
    %36 = arith.cmpi ult, %34, %c2_i64 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %36, ^bb1(%c91_i8 : i8), ^bb11
  ^bb14:  // pred: ^bb7
    %37 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_11 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %38 = arith.cmpi uge, %37, %c3_i64_11 : i64
    %c80_i8_12 = arith.constant 80 : i8
    cf.cond_br %38, ^bb15, ^bb1(%c80_i8_12 : i8)
  ^bb15:  // pred: ^bb14
    %39 = arith.subi %37, %c3_i64_11 : i64
    llvm.store %39, %arg1 : i64, !llvm.ptr
    cf.br ^bb13
  ^bb16:  // pred: ^bb17
    %c170141183460469231731687303715884105727_i256_13 = arith.constant 170141183460469231731687303715884105727 : i256
    %40 = llvm.load %arg3 : !llvm.ptr -> i64
    %41 = llvm.getelementptr %arg2[%40] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_14 = arith.constant 1 : i64
    %42 = arith.addi %40, %c1_i64_14 : i64
    llvm.store %42, %arg3 : i64, !llvm.ptr
    llvm.store %c170141183460469231731687303715884105727_i256_13, %41 : i256, !llvm.ptr
    cf.br ^bb22
  ^bb17:  // pred: ^bb19
    %c1024_i64_15 = arith.constant 1024 : i64
    %43 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_16 = arith.constant 1 : i64
    %44 = arith.addi %43, %c1_i64_16 : i64
    %45 = arith.cmpi ult, %c1024_i64_15, %44 : i64
    %c92_i8_17 = arith.constant 92 : i8
    cf.cond_br %45, ^bb1(%c92_i8_17 : i8), ^bb16
  ^bb18:  // pred: ^bb12
    %46 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_18 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %47 = arith.cmpi uge, %46, %c3_i64_18 : i64
    %c80_i8_19 = arith.constant 80 : i8
    cf.cond_br %47, ^bb19, ^bb1(%c80_i8_19 : i8)
  ^bb19:  // pred: ^bb18
    %48 = arith.subi %46, %c3_i64_18 : i64
    llvm.store %48, %arg1 : i64, !llvm.ptr
    cf.br ^bb17
  ^bb20:  // pred: ^bb21
    %c32_i256 = arith.constant 32 : i256
    %49 = llvm.load %arg3 : !llvm.ptr -> i64
    %50 = llvm.getelementptr %arg2[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_20 = arith.constant 1 : i64
    %51 = arith.addi %49, %c1_i64_20 : i64
    llvm.store %51, %arg3 : i64, !llvm.ptr
    llvm.store %c32_i256, %50 : i256, !llvm.ptr
    cf.br ^bb27
  ^bb21:  // pred: ^bb23
    %c1024_i64_21 = arith.constant 1024 : i64
    %52 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_22 = arith.constant 1 : i64
    %53 = arith.addi %52, %c1_i64_22 : i64
    %54 = arith.cmpi ult, %c1024_i64_21, %53 : i64
    %c92_i8_23 = arith.constant 92 : i8
    cf.cond_br %54, ^bb1(%c92_i8_23 : i8), ^bb20
  ^bb22:  // pred: ^bb16
    %55 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_24 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %56 = arith.cmpi uge, %55, %c3_i64_24 : i64
    %c80_i8_25 = arith.constant 80 : i8
    cf.cond_br %56, ^bb23, ^bb1(%c80_i8_25 : i8)
  ^bb23:  // pred: ^bb22
    %57 = arith.subi %55, %c3_i64_24 : i64
    llvm.store %57, %arg1 : i64, !llvm.ptr
    cf.br ^bb21
  ^bb24:  // pred: ^bb26
    %58 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_26 = arith.constant 1 : i64
    %59 = arith.subi %58, %c1_i64_26 : i64
    %60 = llvm.getelementptr %arg2[%59] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %59, %arg3 : i64, !llvm.ptr
    %61 = llvm.load %60 : !llvm.ptr -> i256
    %62 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_27 = arith.constant 1 : i64
    %63 = arith.subi %62, %c1_i64_27 : i64
    %64 = llvm.getelementptr %arg2[%63] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %63, %arg3 : i64, !llvm.ptr
    %65 = llvm.load %64 : !llvm.ptr -> i256
    %c32_i64_28 = arith.constant 32 : i64
    %c0_i64_29 = arith.constant 0 : i64
    %66 = arith.cmpi ne, %c32_i64_28, %c0_i64_29 : i64
    cf.cond_br %66, ^bb66, ^bb25
  ^bb25:  // 2 preds: ^bb24, ^bb70
    %67 = arith.trunci %61 : i256 to i64
    %68 = call @dora_fn_memory_ptr(%arg0) : (!llvm.ptr) -> !llvm.ptr
    %69 = llvm.getelementptr %68[%67] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %70 = llvm.intr.bswap(%65)  : (i256) -> i256
    llvm.store %70, %69 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb31
  ^bb26:  // pred: ^bb28
    %c1024_i64_30 = arith.constant 1024 : i64
    %71 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-2_i64_31 = arith.constant -2 : i64
    %72 = arith.addi %71, %c-2_i64_31 : i64
    %c2_i64_32 = arith.constant 2 : i64
    %73 = arith.cmpi ult, %71, %c2_i64_32 : i64
    %c91_i8_33 = arith.constant 91 : i8
    cf.cond_br %73, ^bb1(%c91_i8_33 : i8), ^bb24
  ^bb27:  // pred: ^bb20
    %74 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_34 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %75 = arith.cmpi uge, %74, %c3_i64_34 : i64
    %c80_i8_35 = arith.constant 80 : i8
    cf.cond_br %75, ^bb28, ^bb1(%c80_i8_35 : i8)
  ^bb28:  // pred: ^bb27
    %76 = arith.subi %74, %c3_i64_34 : i64
    llvm.store %76, %arg1 : i64, !llvm.ptr
    cf.br ^bb26
  ^bb29:  // pred: ^bb30
    %c41_i256 = arith.constant 41 : i256
    %77 = llvm.load %arg3 : !llvm.ptr -> i64
    %78 = llvm.getelementptr %arg2[%77] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_36 = arith.constant 1 : i64
    %79 = arith.addi %77, %c1_i64_36 : i64
    llvm.store %79, %arg3 : i64, !llvm.ptr
    llvm.store %c41_i256, %78 : i256, !llvm.ptr
    cf.br ^bb35
  ^bb30:  // pred: ^bb32
    %c1024_i64_37 = arith.constant 1024 : i64
    %80 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_38 = arith.constant 1 : i64
    %81 = arith.addi %80, %c1_i64_38 : i64
    %82 = arith.cmpi ult, %c1024_i64_37, %81 : i64
    %c92_i8_39 = arith.constant 92 : i8
    cf.cond_br %82, ^bb1(%c92_i8_39 : i8), ^bb29
  ^bb31:  // pred: ^bb25
    %83 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_40 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %84 = arith.cmpi uge, %83, %c3_i64_40 : i64
    %c80_i8_41 = arith.constant 80 : i8
    cf.cond_br %84, ^bb32, ^bb1(%c80_i8_41 : i8)
  ^bb32:  // pred: ^bb31
    %85 = arith.subi %83, %c3_i64_40 : i64
    llvm.store %85, %arg1 : i64, !llvm.ptr
    cf.br ^bb30
  ^bb33:  // pred: ^bb34
    %c0_i256_42 = arith.constant 0 : i256
    %86 = llvm.load %arg3 : !llvm.ptr -> i64
    %87 = llvm.getelementptr %arg2[%86] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_43 = arith.constant 1 : i64
    %88 = arith.addi %86, %c1_i64_43 : i64
    llvm.store %88, %arg3 : i64, !llvm.ptr
    llvm.store %c0_i256_42, %87 : i256, !llvm.ptr
    cf.br ^bb39
  ^bb34:  // pred: ^bb36
    %c1024_i64_44 = arith.constant 1024 : i64
    %89 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_45 = arith.constant 1 : i64
    %90 = arith.addi %89, %c1_i64_45 : i64
    %91 = arith.cmpi ult, %c1024_i64_44, %90 : i64
    %c92_i8_46 = arith.constant 92 : i8
    cf.cond_br %91, ^bb1(%c92_i8_46 : i8), ^bb33
  ^bb35:  // pred: ^bb29
    %92 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_47 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %93 = arith.cmpi uge, %92, %c3_i64_47 : i64
    %c80_i8_48 = arith.constant 80 : i8
    cf.cond_br %93, ^bb36, ^bb1(%c80_i8_48 : i8)
  ^bb36:  // pred: ^bb35
    %94 = arith.subi %92, %c3_i64_47 : i64
    llvm.store %94, %arg1 : i64, !llvm.ptr
    cf.br ^bb34
  ^bb37:  // pred: ^bb38
    %c0_i256_49 = arith.constant 0 : i256
    %95 = llvm.load %arg3 : !llvm.ptr -> i64
    %96 = llvm.getelementptr %arg2[%95] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_50 = arith.constant 1 : i64
    %97 = arith.addi %95, %c1_i64_50 : i64
    llvm.store %97, %arg3 : i64, !llvm.ptr
    llvm.store %c0_i256_49, %96 : i256, !llvm.ptr
    cf.br ^bb50
  ^bb38:  // pred: ^bb40
    %c1024_i64_51 = arith.constant 1024 : i64
    %98 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_52 = arith.constant 1 : i64
    %99 = arith.addi %98, %c1_i64_52 : i64
    %100 = arith.cmpi ult, %c1024_i64_51, %99 : i64
    %c92_i8_53 = arith.constant 92 : i8
    cf.cond_br %100, ^bb1(%c92_i8_53 : i8), ^bb37
  ^bb39:  // pred: ^bb33
    %101 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_54 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %102 = arith.cmpi uge, %101, %c3_i64_54 : i64
    %c80_i8_55 = arith.constant 80 : i8
    cf.cond_br %102, ^bb40, ^bb1(%c80_i8_55 : i8)
  ^bb40:  // pred: ^bb39
    %103 = arith.subi %101, %c3_i64_54 : i64
    llvm.store %103, %arg1 : i64, !llvm.ptr
    cf.br ^bb38
  ^bb41:  // pred: ^bb49
    %104 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_56 = arith.constant 1 : i64
    %105 = arith.subi %104, %c1_i64_56 : i64
    %106 = llvm.getelementptr %arg2[%105] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %105, %arg3 : i64, !llvm.ptr
    %107 = llvm.load %106 : !llvm.ptr -> i256
    %108 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_57 = arith.constant 1 : i64
    %109 = arith.subi %108, %c1_i64_57 : i64
    %110 = llvm.getelementptr %arg2[%109] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %109, %arg3 : i64, !llvm.ptr
    %111 = llvm.load %110 : !llvm.ptr -> i256
    %112 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_58 = arith.constant 1 : i64
    %113 = arith.subi %112, %c1_i64_58 : i64
    %114 = llvm.getelementptr %arg2[%113] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %113, %arg3 : i64, !llvm.ptr
    %115 = llvm.load %114 : !llvm.ptr -> i256
    %116 = call @dora_fn_is_static(%arg0) : (!llvm.ptr) -> i8
    %c0_i8 = arith.constant 0 : i8
    %117 = arith.cmpi ne, %116, %c0_i8 : i8
    %c87_i8 = arith.constant 87 : i8
    cf.cond_br %117, ^bb1(%c87_i8 : i8), ^bb42
  ^bb42:  // pred: ^bb41
    %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256
    %118 = arith.cmpi sgt, %115, %c18446744073709551615_i256 : i256
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %118, ^bb1(%c84_i8 : i8), ^bb43
  ^bb43:  // pred: ^bb42
    %119 = arith.trunci %115 : i256 to i64
    %c0_i64_59 = arith.constant 0 : i64
    %120 = arith.cmpi slt, %119, %c0_i64_59 : i64
    %c84_i8_60 = arith.constant 84 : i8
    cf.cond_br %120, ^bb1(%c84_i8_60 : i8), ^bb44
  ^bb44:  // pred: ^bb43
    %c0_i64_61 = arith.constant 0 : i64
    %121 = arith.cmpi ne, %119, %c0_i64_61 : i64
    cf.cond_br %121, ^bb74, ^bb45
  ^bb45:  // 2 preds: ^bb44, ^bb80
    %c32000_i64 = arith.constant 32000 : i64
    %122 = llvm.load %arg1 : !llvm.ptr -> i64
    %123 = arith.cmpi ult, %122, %c32000_i64 : i64
    scf.if %123 {
    } else {
      %258 = arith.subi %122, %c32000_i64 : i64
      llvm.store %258, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_62 = arith.constant 80 : i8
    cf.cond_br %123, ^bb1(%c80_i8_62 : i8), ^bb46
  ^bb46:  // pred: ^bb45
    %c1_i256 = arith.constant 1 : i256
    %124 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %107, %124 {alignment = 1 : i64} : i256, !llvm.ptr
    %125 = llvm.load %arg1 : !llvm.ptr -> i64
    %126 = arith.trunci %111 : i256 to i64
    %127 = call @dora_fn_create(%arg0, %119, %126, %124, %125) : (!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
    %128 = llvm.getelementptr %127[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %129 = llvm.load %128 : !llvm.ptr -> i8
    %c0_i8_63 = arith.constant 0 : i8
    %130 = arith.cmpi ne, %129, %c0_i8_63 : i8
    cf.cond_br %130, ^bb1(%129 : i8), ^bb47
  ^bb47:  // pred: ^bb46
    %131 = llvm.getelementptr %127[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %132 = llvm.load %131 : !llvm.ptr -> i64
    %133 = llvm.load %arg1 : !llvm.ptr -> i64
    %134 = arith.cmpi ult, %133, %132 : i64
    scf.if %134 {
    } else {
      %258 = arith.subi %133, %132 : i64
      llvm.store %258, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_64 = arith.constant 80 : i8
    cf.cond_br %134, ^bb1(%c80_i8_64 : i8), ^bb48
  ^bb48:  // pred: ^bb47
    %135 = llvm.load %124 : !llvm.ptr -> i256
    %136 = llvm.load %arg3 : !llvm.ptr -> i64
    %137 = llvm.getelementptr %arg2[%136] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_65 = arith.constant 1 : i64
    %138 = arith.addi %136, %c1_i64_65 : i64
    llvm.store %138, %arg3 : i64, !llvm.ptr
    llvm.store %135, %137 : i256, !llvm.ptr
    cf.br ^bb55
  ^bb49:  // pred: ^bb51
    %c1024_i64_66 = arith.constant 1024 : i64
    %139 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-2_i64_67 = arith.constant -2 : i64
    %140 = arith.addi %139, %c-2_i64_67 : i64
    %c3_i64_68 = arith.constant 3 : i64
    %141 = arith.cmpi ult, %139, %c3_i64_68 : i64
    %c91_i8_69 = arith.constant 91 : i8
    cf.cond_br %141, ^bb1(%c91_i8_69 : i8), ^bb41
  ^bb50:  // pred: ^bb37
    %142 = llvm.load %arg1 : !llvm.ptr -> i64
    %c0_i64_70 = arith.constant 0 : i64
    call @dora_fn_nop() : () -> ()
    %143 = arith.cmpi uge, %142, %c0_i64_70 : i64
    %c80_i8_71 = arith.constant 80 : i8
    cf.cond_br %143, ^bb51, ^bb1(%c80_i8_71 : i8)
  ^bb51:  // pred: ^bb50
    %144 = arith.subi %142, %c0_i64_70 : i64
    llvm.store %144, %arg1 : i64, !llvm.ptr
    cf.br ^bb49
  ^bb52:  // pred: ^bb54
    %145 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_72 = arith.constant 1 : i64
    %146 = arith.subi %145, %c1_i64_72 : i64
    %147 = llvm.getelementptr %arg2[%146] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %146, %arg3 : i64, !llvm.ptr
    %148 = llvm.load %147 : !llvm.ptr -> i256
    %c1_i256_73 = arith.constant 1 : i256
    %149 = llvm.alloca %c1_i256_73 x i256 : (i256) -> !llvm.ptr
    llvm.store %148, %149 {alignment = 1 : i64} : i256, !llvm.ptr
    %150 = call @dora_fn_extcodesize(%arg0, %149) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %151 = llvm.getelementptr %150[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %152 = llvm.load %151 : !llvm.ptr -> i64
    %153 = llvm.getelementptr %150[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %154 = llvm.load %153 : !llvm.ptr -> i64
    %155 = llvm.load %arg1 : !llvm.ptr -> i64
    %156 = arith.cmpi ult, %155, %154 : i64
    scf.if %156 {
    } else {
      %258 = arith.subi %155, %154 : i64
      llvm.store %258, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_74 = arith.constant 80 : i8
    cf.cond_br %156, ^bb1(%c80_i8_74 : i8), ^bb53
  ^bb53:  // pred: ^bb52
    %157 = arith.extui %152 : i64 to i256
    %158 = llvm.load %arg3 : !llvm.ptr -> i64
    %159 = llvm.getelementptr %arg2[%158] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_75 = arith.constant 1 : i64
    %160 = arith.addi %158, %c1_i64_75 : i64
    llvm.store %160, %arg3 : i64, !llvm.ptr
    llvm.store %157, %159 : i256, !llvm.ptr
    cf.br ^bb57
  ^bb54:  // pred: ^bb56
    %c1024_i64_76 = arith.constant 1024 : i64
    %161 = llvm.load %arg3 : !llvm.ptr -> i64
    %c0_i64_77 = arith.constant 0 : i64
    %162 = arith.addi %161, %c0_i64_77 : i64
    %c1_i64_78 = arith.constant 1 : i64
    %163 = arith.cmpi ult, %161, %c1_i64_78 : i64
    %c91_i8_79 = arith.constant 91 : i8
    cf.cond_br %163, ^bb1(%c91_i8_79 : i8), ^bb52
  ^bb55:  // pred: ^bb48
    %164 = llvm.load %arg1 : !llvm.ptr -> i64
    %c0_i64_80 = arith.constant 0 : i64
    call @dora_fn_nop() : () -> ()
    %165 = arith.cmpi uge, %164, %c0_i64_80 : i64
    %c80_i8_81 = arith.constant 80 : i8
    cf.cond_br %165, ^bb56, ^bb1(%c80_i8_81 : i8)
  ^bb56:  // pred: ^bb55
    %166 = arith.subi %164, %c0_i64_80 : i64
    llvm.store %166, %arg1 : i64, !llvm.ptr
    cf.br ^bb54
  ^bb57:  // pred: ^bb53
    %c0_i64_82 = arith.constant 0 : i64
    %c1_i8 = arith.constant 1 : i8
    %167 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_82, %c0_i64_82, %167, %c1_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c1_i8 : i8
  ^bb58:  // pred: ^bb11
    %c18446744073709551615_i256_83 = arith.constant 18446744073709551615 : i256
    %168 = arith.cmpi sgt, %24, %c18446744073709551615_i256_83 : i256
    %c84_i8_84 = arith.constant 84 : i8
    cf.cond_br %168, ^bb1(%c84_i8_84 : i8), ^bb59
  ^bb59:  // pred: ^bb58
    %169 = arith.trunci %24 : i256 to i64
    %c0_i64_85 = arith.constant 0 : i64
    %170 = arith.cmpi slt, %169, %c0_i64_85 : i64
    %c84_i8_86 = arith.constant 84 : i8
    cf.cond_br %170, ^bb1(%c84_i8_86 : i8), ^bb60
  ^bb60:  // pred: ^bb59
    %171 = arith.addi %169, %c32_i64 : i64
    %c0_i64_87 = arith.constant 0 : i64
    %172 = arith.cmpi slt, %171, %c0_i64_87 : i64
    %c84_i8_88 = arith.constant 84 : i8
    cf.cond_br %172, ^bb1(%c84_i8_88 : i8), ^bb61
  ^bb61:  // pred: ^bb60
    %c31_i64 = arith.constant 31 : i64
    %c32_i64_89 = arith.constant 32 : i64
    %173 = arith.addi %171, %c31_i64 : i64
    %174 = arith.divui %173, %c32_i64_89 : i64
    %c32_i64_90 = arith.constant 32 : i64
    %175 = arith.muli %174, %c32_i64_90 : i64
    %176 = call @dora_fn_memory_size(%arg0) : (!llvm.ptr) -> i64
    %c31_i64_91 = arith.constant 31 : i64
    %c32_i64_92 = arith.constant 32 : i64
    %177 = arith.addi %176, %c31_i64_91 : i64
    %178 = arith.divui %177, %c32_i64_92 : i64
    %179 = arith.muli %178, %c32_i64_90 : i64
    %180 = arith.cmpi ult, %179, %175 : i64
    cf.cond_br %180, ^bb63, ^bb62
  ^bb62:  // 2 preds: ^bb61, ^bb65
    cf.br ^bb12
  ^bb63:  // pred: ^bb61
    %c3_i64_93 = arith.constant 3 : i64
    %c512_i64 = arith.constant 512 : i64
    %181 = arith.muli %178, %178 : i64
    %182 = arith.divui %181, %c512_i64 : i64
    %183 = arith.muli %178, %c3_i64_93 : i64
    %184 = arith.addi %182, %183 : i64
    %c3_i64_94 = arith.constant 3 : i64
    %c512_i64_95 = arith.constant 512 : i64
    %185 = arith.muli %174, %174 : i64
    %186 = arith.divui %185, %c512_i64_95 : i64
    %187 = arith.muli %174, %c3_i64_94 : i64
    %188 = arith.addi %186, %187 : i64
    %189 = arith.subi %188, %184 : i64
    %190 = llvm.load %arg1 : !llvm.ptr -> i64
    %191 = arith.cmpi ult, %190, %189 : i64
    scf.if %191 {
    } else {
      %258 = arith.subi %190, %189 : i64
      llvm.store %258, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_96 = arith.constant 80 : i8
    cf.cond_br %191, ^bb1(%c80_i8_96 : i8), ^bb64
  ^bb64:  // pred: ^bb63
    %192 = call @dora_fn_extend_memory(%arg0, %175) : (!llvm.ptr, i64) -> !llvm.ptr
    %193 = llvm.getelementptr %192[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %194 = llvm.load %193 : !llvm.ptr -> i8
    %c0_i8_97 = arith.constant 0 : i8
    %195 = arith.cmpi ne, %194, %c0_i8_97 : i8
    cf.cond_br %195, ^bb1(%194 : i8), ^bb65
  ^bb65:  // pred: ^bb64
    cf.br ^bb62
  ^bb66:  // pred: ^bb24
    %c18446744073709551615_i256_98 = arith.constant 18446744073709551615 : i256
    %196 = arith.cmpi sgt, %61, %c18446744073709551615_i256_98 : i256
    %c84_i8_99 = arith.constant 84 : i8
    cf.cond_br %196, ^bb1(%c84_i8_99 : i8), ^bb67
  ^bb67:  // pred: ^bb66
    %197 = arith.trunci %61 : i256 to i64
    %c0_i64_100 = arith.constant 0 : i64
    %198 = arith.cmpi slt, %197, %c0_i64_100 : i64
    %c84_i8_101 = arith.constant 84 : i8
    cf.cond_br %198, ^bb1(%c84_i8_101 : i8), ^bb68
  ^bb68:  // pred: ^bb67
    %199 = arith.addi %197, %c32_i64_28 : i64
    %c0_i64_102 = arith.constant 0 : i64
    %200 = arith.cmpi slt, %199, %c0_i64_102 : i64
    %c84_i8_103 = arith.constant 84 : i8
    cf.cond_br %200, ^bb1(%c84_i8_103 : i8), ^bb69
  ^bb69:  // pred: ^bb68
    %c31_i64_104 = arith.constant 31 : i64
    %c32_i64_105 = arith.constant 32 : i64
    %201 = arith.addi %199, %c31_i64_104 : i64
    %202 = arith.divui %201, %c32_i64_105 : i64
    %c32_i64_106 = arith.constant 32 : i64
    %203 = arith.muli %202, %c32_i64_106 : i64
    %204 = call @dora_fn_memory_size(%arg0) : (!llvm.ptr) -> i64
    %c31_i64_107 = arith.constant 31 : i64
    %c32_i64_108 = arith.constant 32 : i64
    %205 = arith.addi %204, %c31_i64_107 : i64
    %206 = arith.divui %205, %c32_i64_108 : i64
    %207 = arith.muli %206, %c32_i64_106 : i64
    %208 = arith.cmpi ult, %207, %203 : i64
    cf.cond_br %208, ^bb71, ^bb70
  ^bb70:  // 2 preds: ^bb69, ^bb73
    cf.br ^bb25
  ^bb71:  // pred: ^bb69
    %c3_i64_109 = arith.constant 3 : i64
    %c512_i64_110 = arith.constant 512 : i64
    %209 = arith.muli %206, %206 : i64
    %210 = arith.divui %209, %c512_i64_110 : i64
    %211 = arith.muli %206, %c3_i64_109 : i64
    %212 = arith.addi %210, %211 : i64
    %c3_i64_111 = arith.constant 3 : i64
    %c512_i64_112 = arith.constant 512 : i64
    %213 = arith.muli %202, %202 : i64
    %214 = arith.divui %213, %c512_i64_112 : i64
    %215 = arith.muli %202, %c3_i64_111 : i64
    %216 = arith.addi %214, %215 : i64
    %217 = arith.subi %216, %212 : i64
    %218 = llvm.load %arg1 : !llvm.ptr -> i64
    %219 = arith.cmpi ult, %218, %217 : i64
    scf.if %219 {
    } else {
      %258 = arith.subi %218, %217 : i64
      llvm.store %258, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_113 = arith.constant 80 : i8
    cf.cond_br %219, ^bb1(%c80_i8_113 : i8), ^bb72
  ^bb72:  // pred: ^bb71
    %220 = call @dora_fn_extend_memory(%arg0, %203) : (!llvm.ptr, i64) -> !llvm.ptr
    %221 = llvm.getelementptr %220[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %222 = llvm.load %221 : !llvm.ptr -> i8
    %c0_i8_114 = arith.constant 0 : i8
    %223 = arith.cmpi ne, %222, %c0_i8_114 : i8
    cf.cond_br %223, ^bb1(%222 : i8), ^bb73
  ^bb73:  // pred: ^bb72
    cf.br ^bb70
  ^bb74:  // pred: ^bb44
    %c49152_i64 = arith.constant 49152 : i64
    %224 = arith.cmpi ugt, %119, %c49152_i64 : i64
    %c100_i8 = arith.constant 100 : i8
    cf.cond_br %224, ^bb1(%c100_i8 : i8), ^bb75
  ^bb75:  // pred: ^bb74
    %c31_i64_115 = arith.constant 31 : i64
    %c32_i64_116 = arith.constant 32 : i64
    %225 = arith.addi %119, %c31_i64_115 : i64
    %226 = arith.divui %225, %c32_i64_116 : i64
    %c2_i64_117 = arith.constant 2 : i64
    %227 = arith.muli %226, %c2_i64_117 : i64
    %228 = llvm.load %arg1 : !llvm.ptr -> i64
    %229 = arith.cmpi ult, %228, %227 : i64
    scf.if %229 {
    } else {
      %258 = arith.subi %228, %227 : i64
      llvm.store %258, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_118 = arith.constant 80 : i8
    cf.cond_br %229, ^bb1(%c80_i8_118 : i8), ^bb76
  ^bb76:  // pred: ^bb75
    %c18446744073709551615_i256_119 = arith.constant 18446744073709551615 : i256
    %230 = arith.cmpi sgt, %111, %c18446744073709551615_i256_119 : i256
    %c84_i8_120 = arith.constant 84 : i8
    cf.cond_br %230, ^bb1(%c84_i8_120 : i8), ^bb77
  ^bb77:  // pred: ^bb76
    %231 = arith.trunci %111 : i256 to i64
    %c0_i64_121 = arith.constant 0 : i64
    %232 = arith.cmpi slt, %231, %c0_i64_121 : i64
    %c84_i8_122 = arith.constant 84 : i8
    cf.cond_br %232, ^bb1(%c84_i8_122 : i8), ^bb78
  ^bb78:  // pred: ^bb77
    %233 = arith.addi %231, %119 : i64
    %c0_i64_123 = arith.constant 0 : i64
    %234 = arith.cmpi slt, %233, %c0_i64_123 : i64
    %c84_i8_124 = arith.constant 84 : i8
    cf.cond_br %234, ^bb1(%c84_i8_124 : i8), ^bb79
  ^bb79:  // pred: ^bb78
    %c31_i64_125 = arith.constant 31 : i64
    %c32_i64_126 = arith.constant 32 : i64
    %235 = arith.addi %233, %c31_i64_125 : i64
    %236 = arith.divui %235, %c32_i64_126 : i64
    %c32_i64_127 = arith.constant 32 : i64
    %237 = arith.muli %236, %c32_i64_127 : i64
    %238 = call @dora_fn_memory_size(%arg0) : (!llvm.ptr) -> i64
    %c31_i64_128 = arith.constant 31 : i64
    %c32_i64_129 = arith.constant 32 : i64
    %239 = arith.addi %238, %c31_i64_128 : i64
    %240 = arith.divui %239, %c32_i64_129 : i64
    %241 = arith.muli %240, %c32_i64_127 : i64
    %242 = arith.cmpi ult, %241, %237 : i64
    cf.cond_br %242, ^bb81, ^bb80
  ^bb80:  // 2 preds: ^bb79, ^bb83
    cf.br ^bb45
  ^bb81:  // pred: ^bb79
    %c3_i64_130 = arith.constant 3 : i64
    %c512_i64_131 = arith.constant 512 : i64
    %243 = arith.muli %240, %240 : i64
    %244 = arith.divui %243, %c512_i64_131 : i64
    %245 = arith.muli %240, %c3_i64_130 : i64
    %246 = arith.addi %244, %245 : i64
    %c3_i64_132 = arith.constant 3 : i64
    %c512_i64_133 = arith.constant 512 : i64
    %247 = arith.muli %236, %236 : i64
    %248 = arith.divui %247, %c512_i64_133 : i64
    %249 = arith.muli %236, %c3_i64_132 : i64
    %250 = arith.addi %248, %249 : i64
    %251 = arith.subi %250, %246 : i64
    %252 = llvm.load %arg1 : !llvm.ptr -> i64
    %253 = arith.cmpi ult, %252, %251 : i64
    scf.if %253 {
    } else {
      %258 = arith.subi %252, %251 : i64
      llvm.store %258, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_134 = arith.constant 80 : i8
    cf.cond_br %253, ^bb1(%c80_i8_134 : i8), ^bb82
  ^bb82:  // pred: ^bb81
    %254 = call @dora_fn_extend_memory(%arg0, %237) : (!llvm.ptr, i64) -> !llvm.ptr
    %255 = llvm.getelementptr %254[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %256 = llvm.load %255 : !llvm.ptr -> i8
    %c0_i8_135 = arith.constant 0 : i8
    %257 = arith.cmpi ne, %256, %c0_i8_135 : i8
    cf.cond_br %257, ^bb1(%256 : i8), ^bb83
  ^bb83:  // pred: ^bb82
    cf.br ^bb80
  }
}
