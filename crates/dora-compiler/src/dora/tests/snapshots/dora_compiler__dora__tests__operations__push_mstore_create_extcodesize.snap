---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  llvm.mlir.global internal @dora_global_stack_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_stack_length() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_memory_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_memory_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_calldata_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_calldata_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_gas_counter() {addr_space = 0 : i32} : i64
  llvm.mlir.global external @dora_global_ctx_is_static() {addr_space = 0 : i32} : !llvm.ptr
  func.func private @dora_fn_debug_print(i32)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_chainid(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_gaslimit(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_code_copy(!llvm.ptr, i64, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_read_storage(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_write_storage(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_call(!llvm.ptr, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr, i8) -> !llvm.ptr
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_copy_ext_code_to_memory(!llvm.ptr, !llvm.ptr, i64, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_return_data_size(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_return_data_copy(!llvm.ptr, i64, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_transient_storage_read(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_transient_storage_write(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func public @main(%arg0: !llvm.ptr, %arg1: i64) -> i8 attributes {llvm.emit_c_interface} {
    %c1024_i256 = arith.constant 1024 : i256
    %0 = llvm.alloca %c1024_i256 x i256 : (i256) -> !llvm.ptr
    %1 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    llvm.store %0, %1 : !llvm.ptr, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %2 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    llvm.store %c0_i64, %2 : i64, !llvm.ptr
    %c0_i64_0 = arith.constant 0 : i64
    %3 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %c0_i64_0, %3 : i64, !llvm.ptr
    %4 = call @dora_fn_calldata(%arg0) : (!llvm.ptr) -> !llvm.ptr
    %5 = llvm.mlir.addressof @dora_global_calldata_ptr : !llvm.ptr
    llvm.store %4, %5 : !llvm.ptr, !llvm.ptr
    %6 = call @dora_fn_calldata_size(%arg0) : (!llvm.ptr) -> i64
    %7 = llvm.mlir.addressof @dora_global_calldata_size : !llvm.ptr
    llvm.store %6, %7 : i64, !llvm.ptr
    %8 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    llvm.store %arg1, %8 : i64, !llvm.ptr
    %9 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64 = arith.constant 1024 : i64
    cf.br ^bb3
  ^bb1(%10: i8):  // 5 preds: ^bb2, ^bb5, ^bb9, ^bb14, ^bb15
    %c0_i64_1 = arith.constant 0 : i64
    %11 = call @dora_fn_write_result(%arg0, %c0_i64_1, %c0_i64_1, %c0_i64_1, %10) : (!llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
    return %10 : i8
  ^bb2(%12: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %12 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3:  // pred: ^bb0
    %c170141183460469231731687303715884105727_i256 = arith.constant 170141183460469231731687303715884105727 : i256
    %13 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %14 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    llvm.store %c170141183460469231731687303715884105727_i256, %14 : i256, !llvm.ptr
    %15 = llvm.getelementptr %14[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %15, %13 : !llvm.ptr, !llvm.ptr
    cf.br ^bb4
  ^bb4:  // pred: ^bb3
    %c0_i256 = arith.constant 0 : i256
    %16 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %17 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256, %17 : i256, !llvm.ptr
    %18 = llvm.getelementptr %17[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %18, %16 : !llvm.ptr, !llvm.ptr
    cf.br ^bb5
  ^bb5:  // pred: ^bb4
    %19 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %20 = llvm.load %19 : !llvm.ptr -> !llvm.ptr
    %21 = llvm.getelementptr %20[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %22 = llvm.load %21 : !llvm.ptr -> i256
    llvm.store %21, %19 : !llvm.ptr, !llvm.ptr
    %23 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %24 = llvm.load %23 : !llvm.ptr -> !llvm.ptr
    %25 = llvm.getelementptr %24[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %26 = llvm.load %25 : !llvm.ptr -> i256
    llvm.store %25, %23 : !llvm.ptr, !llvm.ptr
    %27 = arith.trunci %22 : i256 to i64
    %c32_i64 = arith.constant 32 : i64
    %28 = arith.addi %27, %c32_i64 : i64
    %c0_i64_2 = arith.constant 0 : i64
    %29 = arith.cmpi slt, %28, %c0_i64_2 : i64
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %29, ^bb1(%c84_i8 : i8), ^bb6
  ^bb6:  // pred: ^bb5
    %30 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    %31 = llvm.load %30 : !llvm.ptr -> i64
    %c31_i64 = arith.constant 31 : i64
    %c32_i64_3 = arith.constant 32 : i64
    %32 = arith.addi %28, %c31_i64 : i64
    %33 = arith.divui %32, %c32_i64_3 : i64
    %34 = arith.muli %33, %c32_i64_3 : i64
    %35 = arith.cmpi ult, %31, %34 : i64
    scf.if %35 {
      %123 = func.call @dora_fn_extend_memory(%arg0, %34) : (!llvm.ptr, i64) -> !llvm.ptr
      %124 = llvm.getelementptr %123[16] : (!llvm.ptr) -> !llvm.ptr, i8
      %125 = llvm.load %124 : !llvm.ptr -> !llvm.ptr
      llvm.store %34, %30 : i64, !llvm.ptr
      %126 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
      llvm.store %125, %126 : !llvm.ptr, !llvm.ptr
    } else {
    }
    %36 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    %37 = llvm.load %36 : !llvm.ptr -> !llvm.ptr
    %38 = llvm.getelementptr %37[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %39 = llvm.intr.bswap(%26)  : (i256) -> i256
    llvm.store %39, %38 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb7
  ^bb7:  // pred: ^bb6
    %c170141183460469231731687303715884105727_i256_4 = arith.constant 170141183460469231731687303715884105727 : i256
    %40 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %41 = llvm.load %40 : !llvm.ptr -> !llvm.ptr
    llvm.store %c170141183460469231731687303715884105727_i256_4, %41 : i256, !llvm.ptr
    %42 = llvm.getelementptr %41[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %42, %40 : !llvm.ptr, !llvm.ptr
    cf.br ^bb8
  ^bb8:  // pred: ^bb7
    %c32_i256 = arith.constant 32 : i256
    %43 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %44 = llvm.load %43 : !llvm.ptr -> !llvm.ptr
    llvm.store %c32_i256, %44 : i256, !llvm.ptr
    %45 = llvm.getelementptr %44[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %45, %43 : !llvm.ptr, !llvm.ptr
    cf.br ^bb9
  ^bb9:  // pred: ^bb8
    %46 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %47 = llvm.load %46 : !llvm.ptr -> !llvm.ptr
    %48 = llvm.getelementptr %47[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %49 = llvm.load %48 : !llvm.ptr -> i256
    llvm.store %48, %46 : !llvm.ptr, !llvm.ptr
    %50 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %51 = llvm.load %50 : !llvm.ptr -> !llvm.ptr
    %52 = llvm.getelementptr %51[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %53 = llvm.load %52 : !llvm.ptr -> i256
    llvm.store %52, %50 : !llvm.ptr, !llvm.ptr
    %54 = arith.trunci %49 : i256 to i64
    %c32_i64_5 = arith.constant 32 : i64
    %55 = arith.addi %54, %c32_i64_5 : i64
    %c0_i64_6 = arith.constant 0 : i64
    %56 = arith.cmpi slt, %55, %c0_i64_6 : i64
    %c84_i8_7 = arith.constant 84 : i8
    cf.cond_br %56, ^bb1(%c84_i8_7 : i8), ^bb10
  ^bb10:  // pred: ^bb9
    %57 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    %58 = llvm.load %57 : !llvm.ptr -> i64
    %c31_i64_8 = arith.constant 31 : i64
    %c32_i64_9 = arith.constant 32 : i64
    %59 = arith.addi %55, %c31_i64_8 : i64
    %60 = arith.divui %59, %c32_i64_9 : i64
    %61 = arith.muli %60, %c32_i64_9 : i64
    %62 = arith.cmpi ult, %58, %61 : i64
    scf.if %62 {
      %123 = func.call @dora_fn_extend_memory(%arg0, %61) : (!llvm.ptr, i64) -> !llvm.ptr
      %124 = llvm.getelementptr %123[16] : (!llvm.ptr) -> !llvm.ptr, i8
      %125 = llvm.load %124 : !llvm.ptr -> !llvm.ptr
      llvm.store %61, %57 : i64, !llvm.ptr
      %126 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
      llvm.store %125, %126 : !llvm.ptr, !llvm.ptr
    } else {
    }
    %63 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    %64 = llvm.load %63 : !llvm.ptr -> !llvm.ptr
    %65 = llvm.getelementptr %64[%54] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %66 = llvm.intr.bswap(%53)  : (i256) -> i256
    llvm.store %66, %65 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb11
  ^bb11:  // pred: ^bb10
    %c41_i256 = arith.constant 41 : i256
    %67 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %68 = llvm.load %67 : !llvm.ptr -> !llvm.ptr
    llvm.store %c41_i256, %68 : i256, !llvm.ptr
    %69 = llvm.getelementptr %68[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %69, %67 : !llvm.ptr, !llvm.ptr
    cf.br ^bb12
  ^bb12:  // pred: ^bb11
    %c0_i256_10 = arith.constant 0 : i256
    %70 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %71 = llvm.load %70 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_10, %71 : i256, !llvm.ptr
    %72 = llvm.getelementptr %71[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %72, %70 : !llvm.ptr, !llvm.ptr
    cf.br ^bb13
  ^bb13:  // pred: ^bb12
    %c0_i256_11 = arith.constant 0 : i256
    %73 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %74 = llvm.load %73 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_11, %74 : i256, !llvm.ptr
    %75 = llvm.getelementptr %74[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %75, %73 : !llvm.ptr, !llvm.ptr
    cf.br ^bb14
  ^bb14:  // pred: ^bb13
    %76 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %77 = llvm.load %76 : !llvm.ptr -> !llvm.ptr
    %78 = llvm.getelementptr %77[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %79 = llvm.load %78 : !llvm.ptr -> i256
    llvm.store %78, %76 : !llvm.ptr, !llvm.ptr
    %80 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %81 = llvm.load %80 : !llvm.ptr -> !llvm.ptr
    %82 = llvm.getelementptr %81[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %83 = llvm.load %82 : !llvm.ptr -> i256
    llvm.store %82, %80 : !llvm.ptr, !llvm.ptr
    %84 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %85 = llvm.load %84 : !llvm.ptr -> !llvm.ptr
    %86 = llvm.getelementptr %85[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %87 = llvm.load %86 : !llvm.ptr -> i256
    llvm.store %86, %84 : !llvm.ptr, !llvm.ptr
    %88 = arith.trunci %83 : i256 to i64
    %89 = arith.trunci %87 : i256 to i64
    %90 = arith.addi %88, %89 : i64
    %c0_i64_12 = arith.constant 0 : i64
    %91 = arith.cmpi slt, %90, %c0_i64_12 : i64
    %c84_i8_13 = arith.constant 84 : i8
    cf.cond_br %91, ^bb1(%c84_i8_13 : i8), ^bb15
  ^bb15:  // pred: ^bb14
    %92 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    %93 = llvm.load %92 : !llvm.ptr -> i64
    %c31_i64_14 = arith.constant 31 : i64
    %c32_i64_15 = arith.constant 32 : i64
    %94 = arith.addi %90, %c31_i64_14 : i64
    %95 = arith.divui %94, %c32_i64_15 : i64
    %96 = arith.muli %95, %c32_i64_15 : i64
    %97 = arith.cmpi ult, %93, %96 : i64
    scf.if %97 {
      %123 = func.call @dora_fn_extend_memory(%arg0, %96) : (!llvm.ptr, i64) -> !llvm.ptr
      %124 = llvm.getelementptr %123[16] : (!llvm.ptr) -> !llvm.ptr, i8
      %125 = llvm.load %124 : !llvm.ptr -> !llvm.ptr
      llvm.store %96, %92 : i64, !llvm.ptr
      %126 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
      llvm.store %125, %126 : !llvm.ptr, !llvm.ptr
    } else {
    }
    %c1_i256 = arith.constant 1 : i256
    %98 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %79, %98 {alignment = 1 : i64} : i256, !llvm.ptr
    %99 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %100 = llvm.load %99 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %101 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %100, %101 {alignment = 1 : i64} : i64, !llvm.ptr
    %102 = call @dora_fn_create(%arg0, %89, %88, %98, %101) : (!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %103 = llvm.getelementptr %102[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %104 = llvm.load %103 : !llvm.ptr -> i8
    %c0_i8 = arith.constant 0 : i8
    %105 = arith.cmpi ne, %c0_i8, %104 : i8
    %c94_i8 = arith.constant 94 : i8
    cf.cond_br %105, ^bb1(%c94_i8 : i8), ^bb16
  ^bb16:  // pred: ^bb15
    %106 = llvm.load %98 : !llvm.ptr -> i256
    %107 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %108 = llvm.load %107 : !llvm.ptr -> !llvm.ptr
    llvm.store %106, %108 : i256, !llvm.ptr
    %109 = llvm.getelementptr %108[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %109, %107 : !llvm.ptr, !llvm.ptr
    cf.br ^bb17
  ^bb17:  // pred: ^bb16
    %110 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %111 = llvm.load %110 : !llvm.ptr -> !llvm.ptr
    %112 = llvm.getelementptr %111[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %113 = llvm.load %112 : !llvm.ptr -> i256
    llvm.store %112, %110 : !llvm.ptr, !llvm.ptr
    %c1_i256_16 = arith.constant 1 : i256
    %114 = llvm.alloca %c1_i256_16 x i256 : (i256) -> !llvm.ptr
    llvm.store %113, %114 {alignment = 1 : i64} : i256, !llvm.ptr
    %115 = call @dora_fn_extcodesize(%arg0, %114) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %116 = llvm.getelementptr %115[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %117 = llvm.load %116 : !llvm.ptr -> i64
    %118 = arith.extui %117 : i64 to i256
    %119 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %120 = llvm.load %119 : !llvm.ptr -> !llvm.ptr
    llvm.store %118, %120 : i256, !llvm.ptr
    %121 = llvm.getelementptr %120[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %121, %119 : !llvm.ptr, !llvm.ptr
    cf.br ^bb18
  ^bb18:  // pred: ^bb17
    %c0_i64_17 = arith.constant 0 : i64
    %c1_i8 = arith.constant 1 : i8
    %122 = call @dora_fn_write_result(%arg0, %c0_i64_17, %c0_i64_17, %arg1, %c1_i8) : (!llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
    return %c1_i8 : i8
  }
}
