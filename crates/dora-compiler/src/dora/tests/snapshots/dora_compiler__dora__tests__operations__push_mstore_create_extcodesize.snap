---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
---
module {
  func.func private @dora_fn_nop()
  func.func private @dora_fn_tracing(!llvm.ptr, i8, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_fn_is_static(!llvm.ptr) -> i8
  func.func private @dora_fn_exp(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_calldata_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_data_section(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_data_section_size(!llvm.ptr) -> i64
  func.func private @dora_fn_data_section_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_chainid(!llvm.ptr) -> i64
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gaslimit_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_memory_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_memory_size(!llvm.ptr) -> i64
  func.func private @dora_fn_code_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_eofcreate(!llvm.ptr, i8, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returncontract(!llvm.ptr, i8, i64, i64, index, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_call(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_extcall(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_returndata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_returndata_copy(!llvm.ptr, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_tload(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_tstore(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @op95(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr, %arg4: !llvm.ptr) -> i8 {
    cf.br ^bb3
  ^bb1(%0: i8):  // 2 preds: ^bb3, ^bb4
    %c0_i64 = arith.constant 0 : i64
    %1 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64, %c0_i64, %1, %0) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %0 : i8
  ^bb2(%2: i8):  // no predecessors
    return %2 : i8
  ^bb3:  // pred: ^bb0
    %3 = llvm.load %arg1 : !llvm.ptr -> i64
    %c2_i64 = arith.constant 2 : i64
    call @dora_fn_nop() : () -> ()
    %4 = arith.cmpi uge, %3, %c2_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %4, ^bb5, ^bb1(%c80_i8 : i8)
  ^bb4:  // pred: ^bb5
    %c1024_i64 = arith.constant 1024 : i64
    %5 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %6 = arith.addi %5, %c1_i64 : i64
    llvm.store %6, %arg3 : i64, !llvm.ptr
    %7 = arith.cmpi ult, %c1024_i64, %6 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %7, ^bb1(%c92_i8 : i8), ^bb6
  ^bb5:  // pred: ^bb3
    %8 = arith.subi %3, %c2_i64 : i64
    llvm.store %8, %arg1 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb6:  // pred: ^bb4
    %c0_i256 = arith.constant 0 : i256
    %9 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256, %9 : i256, !llvm.ptr
    %10 = llvm.getelementptr %9[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %10, %arg4 : !llvm.ptr, !llvm.ptr
    cf.br ^bb7
  ^bb7:  // pred: ^bb6
    %c0_i8 = arith.constant 0 : i8
    return %c0_i8 : i8
  }
  func.func private @op82(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr, %arg4: !llvm.ptr) -> i8 {
    cf.br ^bb3
  ^bb1(%0: i8):  // 7 preds: ^bb3, ^bb4, ^bb9, ^bb10, ^bb11, ^bb14, ^bb15
    %c0_i64 = arith.constant 0 : i64
    %1 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64, %c0_i64, %1, %0) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %0 : i8
  ^bb2(%2: i8):  // no predecessors
    return %2 : i8
  ^bb3:  // pred: ^bb0
    %3 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %4 = arith.cmpi uge, %3, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %4, ^bb5, ^bb1(%c80_i8 : i8)
  ^bb4:  // pred: ^bb5
    %c1024_i64 = arith.constant 1024 : i64
    %5 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-2_i64 = arith.constant -2 : i64
    %6 = arith.addi %5, %c-2_i64 : i64
    llvm.store %6, %arg3 : i64, !llvm.ptr
    %c2_i64 = arith.constant 2 : i64
    %7 = arith.cmpi ult, %5, %c2_i64 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %7, ^bb1(%c91_i8 : i8), ^bb6
  ^bb5:  // pred: ^bb3
    %8 = arith.subi %3, %c3_i64 : i64
    llvm.store %8, %arg1 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb6:  // pred: ^bb4
    %9 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.getelementptr %9[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %11 = llvm.load %10 : !llvm.ptr -> i256
    llvm.store %10, %arg4 : !llvm.ptr, !llvm.ptr
    %12 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.getelementptr %12[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %14 = llvm.load %13 : !llvm.ptr -> i256
    llvm.store %13, %arg4 : !llvm.ptr, !llvm.ptr
    %c32_i64 = arith.constant 32 : i64
    %c0_i64_0 = arith.constant 0 : i64
    %15 = arith.cmpi ne, %c32_i64, %c0_i64_0 : i64
    cf.cond_br %15, ^bb9, ^bb7
  ^bb7:  // 2 preds: ^bb6, ^bb13
    %16 = arith.trunci %11 : i256 to i64
    %17 = call @dora_fn_memory_ptr(%arg0) : (!llvm.ptr) -> !llvm.ptr
    %18 = llvm.getelementptr %17[%16] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %19 = llvm.intr.bswap(%14)  : (i256) -> i256
    llvm.store %19, %18 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb8
  ^bb8:  // pred: ^bb7
    %c0_i8 = arith.constant 0 : i8
    return %c0_i8 : i8
  ^bb9:  // pred: ^bb6
    %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256
    %20 = arith.cmpi sgt, %11, %c18446744073709551615_i256 : i256
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %20, ^bb1(%c84_i8 : i8), ^bb10
  ^bb10:  // pred: ^bb9
    %21 = arith.trunci %11 : i256 to i64
    %c0_i64_1 = arith.constant 0 : i64
    %22 = arith.cmpi slt, %21, %c0_i64_1 : i64
    %c84_i8_2 = arith.constant 84 : i8
    cf.cond_br %22, ^bb1(%c84_i8_2 : i8), ^bb11
  ^bb11:  // pred: ^bb10
    %23 = arith.addi %21, %c32_i64 : i64
    %c0_i64_3 = arith.constant 0 : i64
    %24 = arith.cmpi slt, %23, %c0_i64_3 : i64
    %c84_i8_4 = arith.constant 84 : i8
    cf.cond_br %24, ^bb1(%c84_i8_4 : i8), ^bb12
  ^bb12:  // pred: ^bb11
    %c31_i64 = arith.constant 31 : i64
    %c32_i64_5 = arith.constant 32 : i64
    %25 = arith.addi %23, %c31_i64 : i64
    %26 = arith.divui %25, %c32_i64_5 : i64
    %c32_i64_6 = arith.constant 32 : i64
    %27 = arith.muli %26, %c32_i64_6 : i64
    %28 = call @dora_fn_memory_size(%arg0) : (!llvm.ptr) -> i64
    %c31_i64_7 = arith.constant 31 : i64
    %c32_i64_8 = arith.constant 32 : i64
    %29 = arith.addi %28, %c31_i64_7 : i64
    %30 = arith.divui %29, %c32_i64_8 : i64
    %31 = arith.muli %30, %c32_i64_6 : i64
    %32 = arith.cmpi ult, %31, %27 : i64
    cf.cond_br %32, ^bb14, ^bb13
  ^bb13:  // 2 preds: ^bb12, ^bb16
    cf.br ^bb7
  ^bb14:  // pred: ^bb12
    %c3_i64_9 = arith.constant 3 : i64
    %c512_i64 = arith.constant 512 : i64
    %33 = arith.muli %30, %30 : i64
    %34 = arith.divui %33, %c512_i64 : i64
    %35 = arith.muli %30, %c3_i64_9 : i64
    %36 = arith.addi %34, %35 : i64
    %c3_i64_10 = arith.constant 3 : i64
    %c512_i64_11 = arith.constant 512 : i64
    %37 = arith.muli %26, %26 : i64
    %38 = arith.divui %37, %c512_i64_11 : i64
    %39 = arith.muli %26, %c3_i64_10 : i64
    %40 = arith.addi %38, %39 : i64
    %41 = arith.subi %40, %36 : i64
    %42 = llvm.load %arg1 : !llvm.ptr -> i64
    %43 = arith.cmpi ult, %42, %41 : i64
    scf.if %43 {
    } else {
      %48 = arith.subi %42, %41 : i64
      llvm.store %48, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_12 = arith.constant 80 : i8
    cf.cond_br %43, ^bb1(%c80_i8_12 : i8), ^bb15
  ^bb15:  // pred: ^bb14
    %44 = call @dora_fn_extend_memory(%arg0, %27) : (!llvm.ptr, i64) -> !llvm.ptr
    %45 = llvm.getelementptr %44[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %46 = llvm.load %45 : !llvm.ptr -> i8
    %c0_i8_13 = arith.constant 0 : i8
    %47 = arith.cmpi ne, %46, %c0_i8_13 : i8
    cf.cond_br %47, ^bb1(%46 : i8), ^bb16
  ^bb16:  // pred: ^bb15
    cf.br ^bb13
  }
  func.func private @op240(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr, %arg4: !llvm.ptr) -> i8 {
    cf.br ^bb3
  ^bb1(%0: i8):  // 15 preds: ^bb3, ^bb4, ^bb6, ^bb7, ^bb8, ^bb10, ^bb11, ^bb12, ^bb15, ^bb16, ^bb17, ^bb18, ^bb19, ^bb22, ^bb23
    %c0_i64 = arith.constant 0 : i64
    %1 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64, %c0_i64, %1, %0) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %0 : i8
  ^bb2(%2: i8):  // no predecessors
    return %2 : i8
  ^bb3:  // pred: ^bb0
    %3 = llvm.load %arg1 : !llvm.ptr -> i64
    %c0_i64_0 = arith.constant 0 : i64
    call @dora_fn_nop() : () -> ()
    %4 = arith.cmpi uge, %3, %c0_i64_0 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %4, ^bb5, ^bb1(%c80_i8 : i8)
  ^bb4:  // pred: ^bb5
    %c1024_i64 = arith.constant 1024 : i64
    %5 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-2_i64 = arith.constant -2 : i64
    %6 = arith.addi %5, %c-2_i64 : i64
    llvm.store %6, %arg3 : i64, !llvm.ptr
    %c3_i64 = arith.constant 3 : i64
    %7 = arith.cmpi ult, %5, %c3_i64 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %7, ^bb1(%c91_i8 : i8), ^bb6
  ^bb5:  // pred: ^bb3
    %8 = arith.subi %3, %c0_i64_0 : i64
    llvm.store %8, %arg1 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb6:  // pred: ^bb4
    %9 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.getelementptr %9[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %11 = llvm.load %10 : !llvm.ptr -> i256
    llvm.store %10, %arg4 : !llvm.ptr, !llvm.ptr
    %12 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.getelementptr %12[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %14 = llvm.load %13 : !llvm.ptr -> i256
    llvm.store %13, %arg4 : !llvm.ptr, !llvm.ptr
    %15 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %16 = llvm.getelementptr %15[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %17 = llvm.load %16 : !llvm.ptr -> i256
    llvm.store %16, %arg4 : !llvm.ptr, !llvm.ptr
    %18 = call @dora_fn_is_static(%arg0) : (!llvm.ptr) -> i8
    %c0_i8 = arith.constant 0 : i8
    %19 = arith.cmpi ne, %18, %c0_i8 : i8
    %c87_i8 = arith.constant 87 : i8
    cf.cond_br %19, ^bb1(%c87_i8 : i8), ^bb7
  ^bb7:  // pred: ^bb6
    %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256
    %20 = arith.cmpi sgt, %17, %c18446744073709551615_i256 : i256
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %20, ^bb1(%c84_i8 : i8), ^bb8
  ^bb8:  // pred: ^bb7
    %21 = arith.trunci %17 : i256 to i64
    %c0_i64_1 = arith.constant 0 : i64
    %22 = arith.cmpi slt, %21, %c0_i64_1 : i64
    %c84_i8_2 = arith.constant 84 : i8
    cf.cond_br %22, ^bb1(%c84_i8_2 : i8), ^bb9
  ^bb9:  // pred: ^bb8
    %c0_i64_3 = arith.constant 0 : i64
    %23 = arith.cmpi ne, %21, %c0_i64_3 : i64
    cf.cond_br %23, ^bb15, ^bb10
  ^bb10:  // 2 preds: ^bb9, ^bb21
    %c32000_i64 = arith.constant 32000 : i64
    %24 = llvm.load %arg1 : !llvm.ptr -> i64
    %25 = arith.cmpi ult, %24, %c32000_i64 : i64
    scf.if %25 {
    } else {
      %74 = arith.subi %24, %c32000_i64 : i64
      llvm.store %74, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_4 = arith.constant 80 : i8
    cf.cond_br %25, ^bb1(%c80_i8_4 : i8), ^bb11
  ^bb11:  // pred: ^bb10
    %c1_i256 = arith.constant 1 : i256
    %26 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %11, %26 {alignment = 1 : i64} : i256, !llvm.ptr
    %27 = llvm.load %arg1 : !llvm.ptr -> i64
    %28 = arith.trunci %14 : i256 to i64
    %29 = call @dora_fn_create(%arg0, %21, %28, %26, %27) : (!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
    %30 = llvm.getelementptr %29[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %31 = llvm.load %30 : !llvm.ptr -> i8
    %c0_i8_5 = arith.constant 0 : i8
    %32 = arith.cmpi ne, %31, %c0_i8_5 : i8
    cf.cond_br %32, ^bb1(%31 : i8), ^bb12
  ^bb12:  // pred: ^bb11
    %33 = llvm.getelementptr %29[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %34 = llvm.load %33 : !llvm.ptr -> i64
    %35 = llvm.load %arg1 : !llvm.ptr -> i64
    %36 = arith.cmpi ult, %35, %34 : i64
    scf.if %36 {
    } else {
      %74 = arith.subi %35, %34 : i64
      llvm.store %74, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_6 = arith.constant 80 : i8
    cf.cond_br %36, ^bb1(%c80_i8_6 : i8), ^bb13
  ^bb13:  // pred: ^bb12
    %37 = llvm.load %26 : !llvm.ptr -> i256
    %38 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    llvm.store %37, %38 : i256, !llvm.ptr
    %39 = llvm.getelementptr %38[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %39, %arg4 : !llvm.ptr, !llvm.ptr
    cf.br ^bb14
  ^bb14:  // pred: ^bb13
    %c0_i8_7 = arith.constant 0 : i8
    return %c0_i8_7 : i8
  ^bb15:  // pred: ^bb9
    %c49152_i64 = arith.constant 49152 : i64
    %40 = arith.cmpi ugt, %21, %c49152_i64 : i64
    %c100_i8 = arith.constant 100 : i8
    cf.cond_br %40, ^bb1(%c100_i8 : i8), ^bb16
  ^bb16:  // pred: ^bb15
    %c31_i64 = arith.constant 31 : i64
    %c32_i64 = arith.constant 32 : i64
    %41 = arith.addi %21, %c31_i64 : i64
    %42 = arith.divui %41, %c32_i64 : i64
    %c2_i64 = arith.constant 2 : i64
    %43 = arith.muli %42, %c2_i64 : i64
    %44 = llvm.load %arg1 : !llvm.ptr -> i64
    %45 = arith.cmpi ult, %44, %43 : i64
    scf.if %45 {
    } else {
      %74 = arith.subi %44, %43 : i64
      llvm.store %74, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_8 = arith.constant 80 : i8
    cf.cond_br %45, ^bb1(%c80_i8_8 : i8), ^bb17
  ^bb17:  // pred: ^bb16
    %c18446744073709551615_i256_9 = arith.constant 18446744073709551615 : i256
    %46 = arith.cmpi sgt, %14, %c18446744073709551615_i256_9 : i256
    %c84_i8_10 = arith.constant 84 : i8
    cf.cond_br %46, ^bb1(%c84_i8_10 : i8), ^bb18
  ^bb18:  // pred: ^bb17
    %47 = arith.trunci %14 : i256 to i64
    %c0_i64_11 = arith.constant 0 : i64
    %48 = arith.cmpi slt, %47, %c0_i64_11 : i64
    %c84_i8_12 = arith.constant 84 : i8
    cf.cond_br %48, ^bb1(%c84_i8_12 : i8), ^bb19
  ^bb19:  // pred: ^bb18
    %49 = arith.addi %47, %21 : i64
    %c0_i64_13 = arith.constant 0 : i64
    %50 = arith.cmpi slt, %49, %c0_i64_13 : i64
    %c84_i8_14 = arith.constant 84 : i8
    cf.cond_br %50, ^bb1(%c84_i8_14 : i8), ^bb20
  ^bb20:  // pred: ^bb19
    %c31_i64_15 = arith.constant 31 : i64
    %c32_i64_16 = arith.constant 32 : i64
    %51 = arith.addi %49, %c31_i64_15 : i64
    %52 = arith.divui %51, %c32_i64_16 : i64
    %c32_i64_17 = arith.constant 32 : i64
    %53 = arith.muli %52, %c32_i64_17 : i64
    %54 = call @dora_fn_memory_size(%arg0) : (!llvm.ptr) -> i64
    %c31_i64_18 = arith.constant 31 : i64
    %c32_i64_19 = arith.constant 32 : i64
    %55 = arith.addi %54, %c31_i64_18 : i64
    %56 = arith.divui %55, %c32_i64_19 : i64
    %57 = arith.muli %56, %c32_i64_17 : i64
    %58 = arith.cmpi ult, %57, %53 : i64
    cf.cond_br %58, ^bb22, ^bb21
  ^bb21:  // 2 preds: ^bb20, ^bb24
    cf.br ^bb10
  ^bb22:  // pred: ^bb20
    %c3_i64_20 = arith.constant 3 : i64
    %c512_i64 = arith.constant 512 : i64
    %59 = arith.muli %56, %56 : i64
    %60 = arith.divui %59, %c512_i64 : i64
    %61 = arith.muli %56, %c3_i64_20 : i64
    %62 = arith.addi %60, %61 : i64
    %c3_i64_21 = arith.constant 3 : i64
    %c512_i64_22 = arith.constant 512 : i64
    %63 = arith.muli %52, %52 : i64
    %64 = arith.divui %63, %c512_i64_22 : i64
    %65 = arith.muli %52, %c3_i64_21 : i64
    %66 = arith.addi %64, %65 : i64
    %67 = arith.subi %66, %62 : i64
    %68 = llvm.load %arg1 : !llvm.ptr -> i64
    %69 = arith.cmpi ult, %68, %67 : i64
    scf.if %69 {
    } else {
      %74 = arith.subi %68, %67 : i64
      llvm.store %74, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_23 = arith.constant 80 : i8
    cf.cond_br %69, ^bb1(%c80_i8_23 : i8), ^bb23
  ^bb23:  // pred: ^bb22
    %70 = call @dora_fn_extend_memory(%arg0, %53) : (!llvm.ptr, i64) -> !llvm.ptr
    %71 = llvm.getelementptr %70[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %72 = llvm.load %71 : !llvm.ptr -> i8
    %c0_i8_24 = arith.constant 0 : i8
    %73 = arith.cmpi ne, %72, %c0_i8_24 : i8
    cf.cond_br %73, ^bb1(%72 : i8), ^bb24
  ^bb24:  // pred: ^bb23
    cf.br ^bb21
  }
  func.func private @op59(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr, %arg4: !llvm.ptr) -> i8 {
    cf.br ^bb3
  ^bb1(%0: i8):  // 3 preds: ^bb3, ^bb4, ^bb6
    %c0_i64 = arith.constant 0 : i64
    %1 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64, %c0_i64, %1, %0) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %0 : i8
  ^bb2(%2: i8):  // no predecessors
    return %2 : i8
  ^bb3:  // pred: ^bb0
    %3 = llvm.load %arg1 : !llvm.ptr -> i64
    %c0_i64_0 = arith.constant 0 : i64
    call @dora_fn_nop() : () -> ()
    %4 = arith.cmpi uge, %3, %c0_i64_0 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %4, ^bb5, ^bb1(%c80_i8 : i8)
  ^bb4:  // pred: ^bb5
    %c1024_i64 = arith.constant 1024 : i64
    %5 = llvm.load %arg3 : !llvm.ptr -> i64
    %c0_i64_1 = arith.constant 0 : i64
    %6 = arith.addi %5, %c0_i64_1 : i64
    llvm.store %6, %arg3 : i64, !llvm.ptr
    %c1_i64 = arith.constant 1 : i64
    %7 = arith.cmpi ult, %5, %c1_i64 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %7, ^bb1(%c91_i8 : i8), ^bb6
  ^bb5:  // pred: ^bb3
    %8 = arith.subi %3, %c0_i64_0 : i64
    llvm.store %8, %arg1 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb6:  // pred: ^bb4
    %9 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.getelementptr %9[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %11 = llvm.load %10 : !llvm.ptr -> i256
    llvm.store %10, %arg4 : !llvm.ptr, !llvm.ptr
    %c1_i256 = arith.constant 1 : i256
    %12 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %11, %12 {alignment = 1 : i64} : i256, !llvm.ptr
    %13 = call @dora_fn_extcodesize(%arg0, %12) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %14 = llvm.getelementptr %13[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %14 : !llvm.ptr -> i64
    %16 = llvm.getelementptr %13[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %16 : !llvm.ptr -> i64
    %18 = llvm.load %arg1 : !llvm.ptr -> i64
    %19 = arith.cmpi ult, %18, %17 : i64
    scf.if %19 {
    } else {
      %23 = arith.subi %18, %17 : i64
      llvm.store %23, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_2 = arith.constant 80 : i8
    cf.cond_br %19, ^bb1(%c80_i8_2 : i8), ^bb7
  ^bb7:  // pred: ^bb6
    %20 = arith.extui %15 : i64 to i256
    %21 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    llvm.store %20, %21 : i256, !llvm.ptr
    %22 = llvm.getelementptr %21[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %22, %arg4 : !llvm.ptr, !llvm.ptr
    cf.br ^bb8
  ^bb8:  // pred: ^bb7
    %c0_i8 = arith.constant 0 : i8
    return %c0_i8 : i8
  }
  func.func public @call(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr) -> i8 attributes {llvm.emit_c_interface} {
    %c0_i64 = arith.constant 0 : i64
    %0 = llvm.alloca %c0_i64 x !llvm.ptr : (i64) -> !llvm.ptr
    llvm.store %arg2, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8 = arith.constant 0 : i8
    %c0_i8_0 = arith.constant 0 : i8
    %1 = arith.cmpi ne, %c0_i8, %c0_i8_0 : i8
    cf.cond_br %1, ^bb1(%c0_i8 : i8), ^bb4
  ^bb1(%2: i8):  // 13 preds: ^bb0, ^bb2, ^bb4, ^bb6, ^bb7, ^bb8, ^bb9, ^bb10, ^bb15, ^bb18, ^bb20, ^bb21, ^bb24
    %c0_i64_1 = arith.constant 0 : i64
    %3 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_1, %c0_i64_1, %3, %2) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %2 : i8
  ^bb2(%4: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %4 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3(%5: i8):  // 8 preds: ^bb5, ^bb11, ^bb12, ^bb13, ^bb14, ^bb17, ^bb23, ^bb26
    return %5 : i8
  ^bb4:  // pred: ^bb0
    %6 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %7 = arith.cmpi uge, %6, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %7, ^bb16, ^bb1(%c80_i8 : i8)
  ^bb5:  // pred: ^bb17
    %8 = call @op95(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %9 = arith.cmpi ne, %8, %c0_i8_0 : i8
    cf.cond_br %9, ^bb3(%8 : i8), ^bb6
  ^bb6:  // pred: ^bb5
    %10 = call @op82(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %11 = arith.cmpi ne, %10, %c0_i8_0 : i8
    cf.cond_br %11, ^bb1(%10 : i8), ^bb7
  ^bb7:  // pred: ^bb6
    %12 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_2 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %13 = arith.cmpi uge, %12, %c3_i64_2 : i64
    %c80_i8_3 = arith.constant 80 : i8
    cf.cond_br %13, ^bb19, ^bb1(%c80_i8_3 : i8)
  ^bb8:  // pred: ^bb20
    %14 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_4 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %15 = arith.cmpi uge, %14, %c3_i64_4 : i64
    %c80_i8_5 = arith.constant 80 : i8
    cf.cond_br %15, ^bb22, ^bb1(%c80_i8_5 : i8)
  ^bb9:  // pred: ^bb23
    %16 = call @op82(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %17 = arith.cmpi ne, %16, %c0_i8_0 : i8
    cf.cond_br %17, ^bb1(%16 : i8), ^bb10
  ^bb10:  // pred: ^bb9
    %18 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_6 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %19 = arith.cmpi uge, %18, %c3_i64_6 : i64
    %c80_i8_7 = arith.constant 80 : i8
    cf.cond_br %19, ^bb25, ^bb1(%c80_i8_7 : i8)
  ^bb11:  // pred: ^bb26
    %20 = call @op95(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %21 = arith.cmpi ne, %20, %c0_i8_0 : i8
    cf.cond_br %21, ^bb3(%20 : i8), ^bb12
  ^bb12:  // pred: ^bb11
    %22 = call @op95(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %23 = arith.cmpi ne, %22, %c0_i8_0 : i8
    cf.cond_br %23, ^bb3(%22 : i8), ^bb13
  ^bb13:  // pred: ^bb12
    %24 = call @op240(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %25 = arith.cmpi ne, %24, %c0_i8_0 : i8
    cf.cond_br %25, ^bb3(%24 : i8), ^bb14
  ^bb14:  // pred: ^bb13
    %26 = call @op59(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %27 = arith.cmpi ne, %26, %c0_i8_0 : i8
    cf.cond_br %27, ^bb3(%26 : i8), ^bb27
  ^bb15:  // pred: ^bb16
    %c1024_i64 = arith.constant 1024 : i64
    %28 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %29 = arith.addi %28, %c1_i64 : i64
    llvm.store %29, %arg3 : i64, !llvm.ptr
    %30 = arith.cmpi ult, %c1024_i64, %29 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %30, ^bb1(%c92_i8 : i8), ^bb17
  ^bb16:  // pred: ^bb4
    %31 = arith.subi %6, %c3_i64 : i64
    llvm.store %31, %arg1 : i64, !llvm.ptr
    cf.br ^bb15
  ^bb17:  // pred: ^bb15
    %c170141183460469231731687303715884105727_i256 = arith.constant 170141183460469231731687303715884105727 : i256
    %32 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c170141183460469231731687303715884105727_i256, %32 : i256, !llvm.ptr
    %33 = llvm.getelementptr %32[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %33, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_8 = arith.constant 0 : i8
    %34 = arith.cmpi ne, %c0_i8_8, %c0_i8_0 : i8
    cf.cond_br %34, ^bb3(%c0_i8_8 : i8), ^bb5
  ^bb18:  // pred: ^bb19
    %c1024_i64_9 = arith.constant 1024 : i64
    %35 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_10 = arith.constant 1 : i64
    %36 = arith.addi %35, %c1_i64_10 : i64
    llvm.store %36, %arg3 : i64, !llvm.ptr
    %37 = arith.cmpi ult, %c1024_i64_9, %36 : i64
    %c92_i8_11 = arith.constant 92 : i8
    cf.cond_br %37, ^bb1(%c92_i8_11 : i8), ^bb20
  ^bb19:  // pred: ^bb7
    %38 = arith.subi %12, %c3_i64_2 : i64
    llvm.store %38, %arg1 : i64, !llvm.ptr
    cf.br ^bb18
  ^bb20:  // pred: ^bb18
    %c170141183460469231731687303715884105727_i256_12 = arith.constant 170141183460469231731687303715884105727 : i256
    %39 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c170141183460469231731687303715884105727_i256_12, %39 : i256, !llvm.ptr
    %40 = llvm.getelementptr %39[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %40, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_13 = arith.constant 0 : i8
    %41 = arith.cmpi ne, %c0_i8_13, %c0_i8_0 : i8
    cf.cond_br %41, ^bb1(%c0_i8_13 : i8), ^bb8
  ^bb21:  // pred: ^bb22
    %c1024_i64_14 = arith.constant 1024 : i64
    %42 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_15 = arith.constant 1 : i64
    %43 = arith.addi %42, %c1_i64_15 : i64
    llvm.store %43, %arg3 : i64, !llvm.ptr
    %44 = arith.cmpi ult, %c1024_i64_14, %43 : i64
    %c92_i8_16 = arith.constant 92 : i8
    cf.cond_br %44, ^bb1(%c92_i8_16 : i8), ^bb23
  ^bb22:  // pred: ^bb8
    %45 = arith.subi %14, %c3_i64_4 : i64
    llvm.store %45, %arg1 : i64, !llvm.ptr
    cf.br ^bb21
  ^bb23:  // pred: ^bb21
    %c32_i256 = arith.constant 32 : i256
    %46 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c32_i256, %46 : i256, !llvm.ptr
    %47 = llvm.getelementptr %46[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %47, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_17 = arith.constant 0 : i8
    %48 = arith.cmpi ne, %c0_i8_17, %c0_i8_0 : i8
    cf.cond_br %48, ^bb3(%c0_i8_17 : i8), ^bb9
  ^bb24:  // pred: ^bb25
    %c1024_i64_18 = arith.constant 1024 : i64
    %49 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_19 = arith.constant 1 : i64
    %50 = arith.addi %49, %c1_i64_19 : i64
    llvm.store %50, %arg3 : i64, !llvm.ptr
    %51 = arith.cmpi ult, %c1024_i64_18, %50 : i64
    %c92_i8_20 = arith.constant 92 : i8
    cf.cond_br %51, ^bb1(%c92_i8_20 : i8), ^bb26
  ^bb25:  // pred: ^bb10
    %52 = arith.subi %18, %c3_i64_6 : i64
    llvm.store %52, %arg1 : i64, !llvm.ptr
    cf.br ^bb24
  ^bb26:  // pred: ^bb24
    %c41_i256 = arith.constant 41 : i256
    %53 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c41_i256, %53 : i256, !llvm.ptr
    %54 = llvm.getelementptr %53[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %54, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_21 = arith.constant 0 : i8
    %55 = arith.cmpi ne, %c0_i8_21, %c0_i8_0 : i8
    cf.cond_br %55, ^bb3(%c0_i8_21 : i8), ^bb11
  ^bb27:  // pred: ^bb14
    %c0_i64_22 = arith.constant 0 : i64
    %c2_i8 = arith.constant 2 : i8
    %56 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_22, %c0_i64_22, %56, %c2_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c2_i8 : i8
  }
}
