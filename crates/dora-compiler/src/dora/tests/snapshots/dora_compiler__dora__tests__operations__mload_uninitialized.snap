---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  llvm.mlir.global internal @dora_global_memory_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_memory_size() {addr_space = 0 : i32} : i64
  func.func private @dora_fn_nop()
  func.func private @dora_fn_tracing(!llvm.ptr, i8, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_fn_is_static(!llvm.ptr) -> i8
  func.func private @dora_fn_exp(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_chainid(!llvm.ptr) -> i64
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gaslimit_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_code_copy(!llvm.ptr, !llvm.ptr, i64, i64)
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_call(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_returndata_copy(!llvm.ptr, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_tload(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_tstore(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func public @main(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr) -> i8 attributes {llvm.emit_c_interface} {
    %c0_i64 = arith.constant 0 : i64
    %0 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %c0_i64, %0 : i64, !llvm.ptr
    cf.br ^bb5
  ^bb1(%1: i8):  // 10 preds: ^bb2, ^bb4, ^bb5, ^bb9, ^bb10, ^bb13, ^bb14, ^bb15, ^bb18, ^bb19
    %c0_i64_0 = arith.constant 0 : i64
    %2 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_0, %c0_i64_0, %2, %1) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %1 : i8
  ^bb2(%3: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %3 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3:  // pred: ^bb4
    %c0_i256 = arith.constant 0 : i256
    %4 = llvm.load %arg3 : !llvm.ptr -> i64
    %5 = llvm.getelementptr %arg2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64 = arith.constant 1 : i64
    %6 = arith.addi %4, %c1_i64 : i64
    llvm.store %6, %arg3 : i64, !llvm.ptr
    llvm.store %c0_i256, %5 : i256, !llvm.ptr
    cf.br ^bb10
  ^bb4:  // pred: ^bb6
    %c1024_i64 = arith.constant 1024 : i64
    %7 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_1 = arith.constant 1 : i64
    %8 = arith.addi %7, %c1_i64_1 : i64
    %9 = arith.cmpi ult, %c1024_i64, %8 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %9, ^bb1(%c92_i8 : i8), ^bb3
  ^bb5:  // pred: ^bb0
    %10 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %11 = arith.cmpi uge, %10, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %11, ^bb6, ^bb1(%c80_i8 : i8)
  ^bb6:  // pred: ^bb5
    %12 = arith.subi %10, %c3_i64 : i64
    llvm.store %12, %arg1 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb7:  // pred: ^bb9
    %13 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_2 = arith.constant 1 : i64
    %14 = arith.subi %13, %c1_i64_2 : i64
    %15 = llvm.getelementptr %arg2[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %14, %arg3 : i64, !llvm.ptr
    %16 = llvm.load %15 : !llvm.ptr -> i256
    %c32_i64 = arith.constant 32 : i64
    %c0_i64_3 = arith.constant 0 : i64
    %17 = arith.cmpi ne, %c32_i64, %c0_i64_3 : i64
    cf.cond_br %17, ^bb13, ^bb8
  ^bb8:  // 2 preds: ^bb7, ^bb17
    %18 = arith.trunci %16 : i256 to i64
    %19 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    %20 = llvm.load %19 : !llvm.ptr -> !llvm.ptr
    %21 = llvm.getelementptr %20[%18] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %22 = llvm.load %21 {alignment = 1 : i64} : !llvm.ptr -> i256
    %23 = llvm.intr.bswap(%22)  : (i256) -> i256
    %24 = llvm.load %arg3 : !llvm.ptr -> i64
    %25 = llvm.getelementptr %arg2[%24] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_4 = arith.constant 1 : i64
    %26 = arith.addi %24, %c1_i64_4 : i64
    llvm.store %26, %arg3 : i64, !llvm.ptr
    llvm.store %23, %25 : i256, !llvm.ptr
    cf.br ^bb12
  ^bb9:  // pred: ^bb11
    %c1024_i64_5 = arith.constant 1024 : i64
    %27 = llvm.load %arg3 : !llvm.ptr -> i64
    %c0_i64_6 = arith.constant 0 : i64
    %28 = arith.addi %27, %c0_i64_6 : i64
    %c1_i64_7 = arith.constant 1 : i64
    %29 = arith.cmpi ult, %27, %c1_i64_7 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %29, ^bb1(%c91_i8 : i8), ^bb7
  ^bb10:  // pred: ^bb3
    %30 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_8 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %31 = arith.cmpi uge, %30, %c3_i64_8 : i64
    %c80_i8_9 = arith.constant 80 : i8
    cf.cond_br %31, ^bb11, ^bb1(%c80_i8_9 : i8)
  ^bb11:  // pred: ^bb10
    %32 = arith.subi %30, %c3_i64_8 : i64
    llvm.store %32, %arg1 : i64, !llvm.ptr
    cf.br ^bb9
  ^bb12:  // pred: ^bb8
    %c0_i64_10 = arith.constant 0 : i64
    %c1_i8 = arith.constant 1 : i8
    %33 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_10, %c0_i64_10, %33, %c1_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c1_i8 : i8
  ^bb13:  // pred: ^bb7
    %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256
    %34 = arith.cmpi sgt, %16, %c18446744073709551615_i256 : i256
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %34, ^bb1(%c84_i8 : i8), ^bb14
  ^bb14:  // pred: ^bb13
    %35 = arith.trunci %16 : i256 to i64
    %c0_i64_11 = arith.constant 0 : i64
    %36 = arith.cmpi slt, %35, %c0_i64_11 : i64
    %c84_i8_12 = arith.constant 84 : i8
    cf.cond_br %36, ^bb1(%c84_i8_12 : i8), ^bb15
  ^bb15:  // pred: ^bb14
    %37 = arith.addi %35, %c32_i64 : i64
    %c0_i64_13 = arith.constant 0 : i64
    %38 = arith.cmpi slt, %37, %c0_i64_13 : i64
    %c84_i8_14 = arith.constant 84 : i8
    cf.cond_br %38, ^bb1(%c84_i8_14 : i8), ^bb16
  ^bb16:  // pred: ^bb15
    %c31_i64 = arith.constant 31 : i64
    %c32_i64_15 = arith.constant 32 : i64
    %39 = arith.addi %37, %c31_i64 : i64
    %40 = arith.divui %39, %c32_i64_15 : i64
    %c32_i64_16 = arith.constant 32 : i64
    %41 = arith.muli %40, %c32_i64_16 : i64
    %42 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    %43 = llvm.load %42 : !llvm.ptr -> i64
    %c31_i64_17 = arith.constant 31 : i64
    %c32_i64_18 = arith.constant 32 : i64
    %44 = arith.addi %43, %c31_i64_17 : i64
    %45 = arith.divui %44, %c32_i64_18 : i64
    %46 = arith.muli %45, %c32_i64_16 : i64
    %47 = arith.cmpi ult, %46, %41 : i64
    cf.cond_br %47, ^bb18, ^bb17
  ^bb17:  // 2 preds: ^bb16, ^bb20
    cf.br ^bb8
  ^bb18:  // pred: ^bb16
    %c3_i64_19 = arith.constant 3 : i64
    %c512_i64 = arith.constant 512 : i64
    %48 = arith.muli %45, %45 : i64
    %49 = arith.divui %48, %c512_i64 : i64
    %50 = arith.muli %45, %c3_i64_19 : i64
    %51 = arith.addi %49, %50 : i64
    %c3_i64_20 = arith.constant 3 : i64
    %c512_i64_21 = arith.constant 512 : i64
    %52 = arith.muli %40, %40 : i64
    %53 = arith.divui %52, %c512_i64_21 : i64
    %54 = arith.muli %40, %c3_i64_20 : i64
    %55 = arith.addi %53, %54 : i64
    %56 = arith.subi %55, %51 : i64
    %57 = llvm.load %arg1 : !llvm.ptr -> i64
    %58 = arith.cmpi ult, %57, %56 : i64
    scf.if %58 {
    } else {
      %67 = arith.subi %57, %56 : i64
      llvm.store %67, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_22 = arith.constant 80 : i8
    cf.cond_br %58, ^bb1(%c80_i8_22 : i8), ^bb19
  ^bb19:  // pred: ^bb18
    %59 = call @dora_fn_extend_memory(%arg0, %41) : (!llvm.ptr, i64) -> !llvm.ptr
    %60 = llvm.getelementptr %59[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %61 = llvm.load %60 : !llvm.ptr -> !llvm.ptr
    %62 = llvm.getelementptr %59[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %63 = llvm.load %62 : !llvm.ptr -> i8
    %c0_i8 = arith.constant 0 : i8
    %64 = arith.cmpi ne, %63, %c0_i8 : i8
    cf.cond_br %64, ^bb1(%63 : i8), ^bb20
  ^bb20:  // pred: ^bb19
    %65 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    llvm.store %61, %65 : !llvm.ptr, !llvm.ptr
    %66 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %41, %66 : i64, !llvm.ptr
    cf.br ^bb17
  }
}
