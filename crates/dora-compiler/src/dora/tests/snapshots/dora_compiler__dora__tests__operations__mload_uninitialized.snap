---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  llvm.mlir.global internal @dora_global_stack_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_stack_length() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_memory_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_memory_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_calldata_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_calldata_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_gas_counter() {addr_space = 0 : i32} : i64
  func.func private @dora_fn_nop()
  func.func private @dora_fn_tracing(!llvm.ptr, i8, i64, !llvm.ptr, i64)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_fn_is_static(!llvm.ptr) -> i8
  func.func private @dora_fn_exp(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_chainid(!llvm.ptr) -> i64
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gaslimit_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_code_copy(!llvm.ptr, !llvm.ptr, i64, i64)
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_call(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_returndata_copy(!llvm.ptr, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_tload(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_tstore(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func public @main(%arg0: !llvm.ptr, %arg1: i64) -> i8 attributes {llvm.emit_c_interface} {
    %c1024_i256 = arith.constant 1024 : i256
    %0 = llvm.alloca %c1024_i256 x i256 : (i256) -> !llvm.ptr
    %1 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    llvm.store %0, %1 : !llvm.ptr, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %2 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    llvm.store %c0_i64, %2 : i64, !llvm.ptr
    %c0_i64_0 = arith.constant 0 : i64
    %3 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %c0_i64_0, %3 : i64, !llvm.ptr
    %4 = call @dora_fn_calldata(%arg0) : (!llvm.ptr) -> !llvm.ptr
    %5 = llvm.mlir.addressof @dora_global_calldata_ptr : !llvm.ptr
    llvm.store %4, %5 : !llvm.ptr, !llvm.ptr
    %6 = call @dora_fn_calldata_size(%arg0) : (!llvm.ptr) -> i64
    %7 = llvm.mlir.addressof @dora_global_calldata_size : !llvm.ptr
    llvm.store %6, %7 : i64, !llvm.ptr
    %8 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    llvm.store %arg1, %8 : i64, !llvm.ptr
    cf.br ^bb5
  ^bb1(%9: i8):  // 9 preds: ^bb2, ^bb4, ^bb5, ^bb7, ^bb10, ^bb11, ^bb14, ^bb17, ^bb18
    %c0_i64_1 = arith.constant 0 : i64
    %10 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %11 = llvm.load %10 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_1, %c0_i64_1, %11, %9) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %9 : i8
  ^bb2(%12: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %12 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3:  // pred: ^bb4
    %c0_i256 = arith.constant 0 : i256
    %13 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %14 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256, %14 : i256, !llvm.ptr
    %15 = llvm.getelementptr %14[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %15, %13 : !llvm.ptr, !llvm.ptr
    cf.br ^bb11
  ^bb4:  // pred: ^bb6
    %16 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64 = arith.constant 1024 : i64
    %17 = llvm.load %16 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %18 = arith.addi %17, %c1_i64 : i64
    llvm.store %18, %16 : i64, !llvm.ptr
    %19 = arith.cmpi ult, %c1024_i64, %18 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %19, ^bb1(%c92_i8 : i8), ^bb3
  ^bb5:  // pred: ^bb0
    %20 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %21 = llvm.load %20 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %22 = arith.cmpi uge, %21, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %22, ^bb6, ^bb1(%c80_i8 : i8)
  ^bb6:  // pred: ^bb5
    %23 = arith.subi %21, %c3_i64 : i64
    llvm.store %23, %20 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb7:  // pred: ^bb10
    %24 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %25 = llvm.load %24 : !llvm.ptr -> !llvm.ptr
    %26 = llvm.getelementptr %25[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %27 = llvm.load %26 : !llvm.ptr -> i256
    llvm.store %26, %24 : !llvm.ptr, !llvm.ptr
    %28 = arith.trunci %27 : i256 to i64
    %c0_i64_2 = arith.constant 0 : i64
    %29 = arith.cmpi slt, %28, %c0_i64_2 : i64
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %29, ^bb1(%c84_i8 : i8), ^bb8
  ^bb8:  // pred: ^bb7
    %c32_i64 = arith.constant 32 : i64
    %c0_i64_3 = arith.constant 0 : i64
    %30 = arith.cmpi ne, %c32_i64, %c0_i64_3 : i64
    cf.cond_br %30, ^bb14, ^bb9
  ^bb9:  // 2 preds: ^bb8, ^bb16
    %31 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    %32 = llvm.load %31 : !llvm.ptr -> !llvm.ptr
    %33 = llvm.getelementptr %32[%28] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %34 = llvm.load %33 {alignment = 1 : i64} : !llvm.ptr -> i256
    %35 = llvm.intr.bswap(%34)  : (i256) -> i256
    %36 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %37 = llvm.load %36 : !llvm.ptr -> !llvm.ptr
    llvm.store %35, %37 : i256, !llvm.ptr
    %38 = llvm.getelementptr %37[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %38, %36 : !llvm.ptr, !llvm.ptr
    cf.br ^bb13
  ^bb10:  // pred: ^bb12
    %39 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_4 = arith.constant 1024 : i64
    %40 = llvm.load %39 : !llvm.ptr -> i64
    %c0_i64_5 = arith.constant 0 : i64
    %41 = arith.addi %40, %c0_i64_5 : i64
    llvm.store %41, %39 : i64, !llvm.ptr
    %c1_i64_6 = arith.constant 1 : i64
    %42 = arith.cmpi ult, %40, %c1_i64_6 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %42, ^bb1(%c91_i8 : i8), ^bb7
  ^bb11:  // pred: ^bb3
    %43 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %44 = llvm.load %43 : !llvm.ptr -> i64
    %c3_i64_7 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %45 = arith.cmpi uge, %44, %c3_i64_7 : i64
    %c80_i8_8 = arith.constant 80 : i8
    cf.cond_br %45, ^bb12, ^bb1(%c80_i8_8 : i8)
  ^bb12:  // pred: ^bb11
    %46 = arith.subi %44, %c3_i64_7 : i64
    llvm.store %46, %43 : i64, !llvm.ptr
    cf.br ^bb10
  ^bb13:  // pred: ^bb9
    %c0_i64_9 = arith.constant 0 : i64
    %c1_i8 = arith.constant 1 : i8
    %47 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %48 = llvm.load %47 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_9, %c0_i64_9, %48, %c1_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c1_i8 : i8
  ^bb14:  // pred: ^bb8
    %49 = arith.addi %28, %c32_i64 : i64
    %c0_i64_10 = arith.constant 0 : i64
    %50 = arith.cmpi slt, %49, %c0_i64_10 : i64
    %c84_i8_11 = arith.constant 84 : i8
    cf.cond_br %50, ^bb1(%c84_i8_11 : i8), ^bb15
  ^bb15:  // pred: ^bb14
    %c31_i64 = arith.constant 31 : i64
    %c32_i64_12 = arith.constant 32 : i64
    %51 = arith.addi %49, %c31_i64 : i64
    %52 = arith.divui %51, %c32_i64_12 : i64
    %c32_i64_13 = arith.constant 32 : i64
    %53 = arith.muli %52, %c32_i64_13 : i64
    %54 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    %55 = llvm.load %54 : !llvm.ptr -> i64
    %c31_i64_14 = arith.constant 31 : i64
    %c32_i64_15 = arith.constant 32 : i64
    %56 = arith.addi %55, %c31_i64_14 : i64
    %57 = arith.divui %56, %c32_i64_15 : i64
    %58 = arith.muli %57, %c32_i64_13 : i64
    %59 = arith.cmpi ult, %58, %53 : i64
    cf.cond_br %59, ^bb17, ^bb16
  ^bb16:  // 2 preds: ^bb15, ^bb19
    cf.br ^bb9
  ^bb17:  // pred: ^bb15
    %c3_i64_16 = arith.constant 3 : i64
    %c512_i64 = arith.constant 512 : i64
    %60 = arith.muli %57, %57 : i64
    %61 = arith.divui %60, %c512_i64 : i64
    %62 = arith.muli %57, %c3_i64_16 : i64
    %63 = arith.addi %61, %62 : i64
    %c3_i64_17 = arith.constant 3 : i64
    %c512_i64_18 = arith.constant 512 : i64
    %64 = arith.muli %52, %52 : i64
    %65 = arith.divui %64, %c512_i64_18 : i64
    %66 = arith.muli %52, %c3_i64_17 : i64
    %67 = arith.addi %65, %66 : i64
    %68 = arith.subi %67, %63 : i64
    %69 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %70 = llvm.load %69 : !llvm.ptr -> i64
    %71 = arith.cmpi ult, %70, %68 : i64
    scf.if %71 {
    } else {
      %80 = arith.subi %70, %68 : i64
      llvm.store %80, %69 : i64, !llvm.ptr
    }
    %c80_i8_19 = arith.constant 80 : i8
    cf.cond_br %71, ^bb1(%c80_i8_19 : i8), ^bb18
  ^bb18:  // pred: ^bb17
    %72 = call @dora_fn_extend_memory(%arg0, %53) : (!llvm.ptr, i64) -> !llvm.ptr
    %73 = llvm.getelementptr %72[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %74 = llvm.load %73 : !llvm.ptr -> !llvm.ptr
    %75 = llvm.getelementptr %72[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %76 = llvm.load %75 : !llvm.ptr -> i8
    %c0_i8 = arith.constant 0 : i8
    %77 = arith.cmpi ne, %76, %c0_i8 : i8
    cf.cond_br %77, ^bb1(%76 : i8), ^bb19
  ^bb19:  // pred: ^bb18
    %78 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    llvm.store %74, %78 : !llvm.ptr, !llvm.ptr
    %79 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %53, %79 : i64, !llvm.ptr
    cf.br ^bb16
  }
}
