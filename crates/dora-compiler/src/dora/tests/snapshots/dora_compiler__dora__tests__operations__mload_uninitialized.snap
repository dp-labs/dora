---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  llvm.mlir.global internal @dora_global_memory_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_memory_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_gas_counter() {addr_space = 0 : i32} : i64
  func.func private @dora_fn_nop()
  func.func private @dora_fn_tracing(!llvm.ptr, i8, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_fn_is_static(!llvm.ptr) -> i8
  func.func private @dora_fn_exp(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_chainid(!llvm.ptr) -> i64
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gaslimit_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_code_copy(!llvm.ptr, !llvm.ptr, i64, i64)
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_call(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_returndata_copy(!llvm.ptr, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_tload(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_tstore(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func public @main(%arg0: !llvm.ptr, %arg1: i64, %arg2: !llvm.ptr, %arg3: !llvm.ptr) -> i8 attributes {llvm.emit_c_interface} {
    %c0_i64 = arith.constant 0 : i64
    %0 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %c0_i64, %0 : i64, !llvm.ptr
    %1 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    llvm.store %arg1, %1 : i64, !llvm.ptr
    cf.br ^bb5
  ^bb1(%2: i8):  // 10 preds: ^bb2, ^bb4, ^bb5, ^bb9, ^bb10, ^bb13, ^bb14, ^bb15, ^bb18, ^bb19
    %c0_i64_0 = arith.constant 0 : i64
    %3 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %4 = llvm.load %3 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_0, %c0_i64_0, %4, %2) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %2 : i8
  ^bb2(%5: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %5 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3:  // pred: ^bb4
    %c0_i256 = arith.constant 0 : i256
    %6 = llvm.load %arg3 : !llvm.ptr -> i64
    %7 = llvm.getelementptr %arg2[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64 = arith.constant 1 : i64
    %8 = arith.addi %6, %c1_i64 : i64
    llvm.store %8, %arg3 : i64, !llvm.ptr
    llvm.store %c0_i256, %7 : i256, !llvm.ptr
    cf.br ^bb10
  ^bb4:  // pred: ^bb6
    %c1024_i64 = arith.constant 1024 : i64
    %9 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_1 = arith.constant 1 : i64
    %10 = arith.addi %9, %c1_i64_1 : i64
    %11 = arith.cmpi ult, %c1024_i64, %10 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %11, ^bb1(%c92_i8 : i8), ^bb3
  ^bb5:  // pred: ^bb0
    %12 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %13 = llvm.load %12 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %14 = arith.cmpi uge, %13, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %14, ^bb6, ^bb1(%c80_i8 : i8)
  ^bb6:  // pred: ^bb5
    %15 = arith.subi %13, %c3_i64 : i64
    llvm.store %15, %12 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb7:  // pred: ^bb9
    %16 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_2 = arith.constant 1 : i64
    %17 = arith.subi %16, %c1_i64_2 : i64
    %18 = llvm.getelementptr %arg2[%17] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %17, %arg3 : i64, !llvm.ptr
    %19 = llvm.load %18 : !llvm.ptr -> i256
    %c32_i64 = arith.constant 32 : i64
    %c0_i64_3 = arith.constant 0 : i64
    %20 = arith.cmpi ne, %c32_i64, %c0_i64_3 : i64
    cf.cond_br %20, ^bb13, ^bb8
  ^bb8:  // 2 preds: ^bb7, ^bb17
    %21 = arith.trunci %19 : i256 to i64
    %22 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    %23 = llvm.load %22 : !llvm.ptr -> !llvm.ptr
    %24 = llvm.getelementptr %23[%21] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %25 = llvm.load %24 {alignment = 1 : i64} : !llvm.ptr -> i256
    %26 = llvm.intr.bswap(%25)  : (i256) -> i256
    %27 = llvm.load %arg3 : !llvm.ptr -> i64
    %28 = llvm.getelementptr %arg2[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_4 = arith.constant 1 : i64
    %29 = arith.addi %27, %c1_i64_4 : i64
    llvm.store %29, %arg3 : i64, !llvm.ptr
    llvm.store %26, %28 : i256, !llvm.ptr
    cf.br ^bb12
  ^bb9:  // pred: ^bb11
    %c1024_i64_5 = arith.constant 1024 : i64
    %30 = llvm.load %arg3 : !llvm.ptr -> i64
    %c0_i64_6 = arith.constant 0 : i64
    %31 = arith.addi %30, %c0_i64_6 : i64
    %c1_i64_7 = arith.constant 1 : i64
    %32 = arith.cmpi ult, %30, %c1_i64_7 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %32, ^bb1(%c91_i8 : i8), ^bb7
  ^bb10:  // pred: ^bb3
    %33 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %34 = llvm.load %33 : !llvm.ptr -> i64
    %c3_i64_8 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %35 = arith.cmpi uge, %34, %c3_i64_8 : i64
    %c80_i8_9 = arith.constant 80 : i8
    cf.cond_br %35, ^bb11, ^bb1(%c80_i8_9 : i8)
  ^bb11:  // pred: ^bb10
    %36 = arith.subi %34, %c3_i64_8 : i64
    llvm.store %36, %33 : i64, !llvm.ptr
    cf.br ^bb9
  ^bb12:  // pred: ^bb8
    %c0_i64_10 = arith.constant 0 : i64
    %c1_i8 = arith.constant 1 : i8
    %37 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %38 = llvm.load %37 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_10, %c0_i64_10, %38, %c1_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c1_i8 : i8
  ^bb13:  // pred: ^bb7
    %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256
    %39 = arith.cmpi sgt, %19, %c18446744073709551615_i256 : i256
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %39, ^bb1(%c84_i8 : i8), ^bb14
  ^bb14:  // pred: ^bb13
    %40 = arith.trunci %19 : i256 to i64
    %c0_i64_11 = arith.constant 0 : i64
    %41 = arith.cmpi slt, %40, %c0_i64_11 : i64
    %c84_i8_12 = arith.constant 84 : i8
    cf.cond_br %41, ^bb1(%c84_i8_12 : i8), ^bb15
  ^bb15:  // pred: ^bb14
    %42 = arith.addi %40, %c32_i64 : i64
    %c0_i64_13 = arith.constant 0 : i64
    %43 = arith.cmpi slt, %42, %c0_i64_13 : i64
    %c84_i8_14 = arith.constant 84 : i8
    cf.cond_br %43, ^bb1(%c84_i8_14 : i8), ^bb16
  ^bb16:  // pred: ^bb15
    %c31_i64 = arith.constant 31 : i64
    %c32_i64_15 = arith.constant 32 : i64
    %44 = arith.addi %42, %c31_i64 : i64
    %45 = arith.divui %44, %c32_i64_15 : i64
    %c32_i64_16 = arith.constant 32 : i64
    %46 = arith.muli %45, %c32_i64_16 : i64
    %47 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    %48 = llvm.load %47 : !llvm.ptr -> i64
    %c31_i64_17 = arith.constant 31 : i64
    %c32_i64_18 = arith.constant 32 : i64
    %49 = arith.addi %48, %c31_i64_17 : i64
    %50 = arith.divui %49, %c32_i64_18 : i64
    %51 = arith.muli %50, %c32_i64_16 : i64
    %52 = arith.cmpi ult, %51, %46 : i64
    cf.cond_br %52, ^bb18, ^bb17
  ^bb17:  // 2 preds: ^bb16, ^bb20
    cf.br ^bb8
  ^bb18:  // pred: ^bb16
    %c3_i64_19 = arith.constant 3 : i64
    %c512_i64 = arith.constant 512 : i64
    %53 = arith.muli %50, %50 : i64
    %54 = arith.divui %53, %c512_i64 : i64
    %55 = arith.muli %50, %c3_i64_19 : i64
    %56 = arith.addi %54, %55 : i64
    %c3_i64_20 = arith.constant 3 : i64
    %c512_i64_21 = arith.constant 512 : i64
    %57 = arith.muli %45, %45 : i64
    %58 = arith.divui %57, %c512_i64_21 : i64
    %59 = arith.muli %45, %c3_i64_20 : i64
    %60 = arith.addi %58, %59 : i64
    %61 = arith.subi %60, %56 : i64
    %62 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %63 = llvm.load %62 : !llvm.ptr -> i64
    %64 = arith.cmpi ult, %63, %61 : i64
    scf.if %64 {
    } else {
      %73 = arith.subi %63, %61 : i64
      llvm.store %73, %62 : i64, !llvm.ptr
    }
    %c80_i8_22 = arith.constant 80 : i8
    cf.cond_br %64, ^bb1(%c80_i8_22 : i8), ^bb19
  ^bb19:  // pred: ^bb18
    %65 = call @dora_fn_extend_memory(%arg0, %46) : (!llvm.ptr, i64) -> !llvm.ptr
    %66 = llvm.getelementptr %65[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %67 = llvm.load %66 : !llvm.ptr -> !llvm.ptr
    %68 = llvm.getelementptr %65[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %69 = llvm.load %68 : !llvm.ptr -> i8
    %c0_i8 = arith.constant 0 : i8
    %70 = arith.cmpi ne, %69, %c0_i8 : i8
    cf.cond_br %70, ^bb1(%69 : i8), ^bb20
  ^bb20:  // pred: ^bb19
    %71 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    llvm.store %67, %71 : !llvm.ptr, !llvm.ptr
    %72 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %46, %72 : i64, !llvm.ptr
    cf.br ^bb17
  }
}
