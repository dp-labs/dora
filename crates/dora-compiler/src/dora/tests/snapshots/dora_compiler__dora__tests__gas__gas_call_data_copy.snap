---
source: crates/dora-compiler/src/dora/tests/gas.rs
expression: op
snapshot_kind: text
---
module {
  llvm.mlir.global internal @dora_stack_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_stack_length() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_memory_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_memory_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_calldata_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_calldata_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_gas_counter() {addr_space = 0 : i32} : i64
  llvm.mlir.global external @dora_ctx_is_static() {addr_space = 0 : i32} : !llvm.ptr
  func.func private @dora_debug_print(i32)
  func.func private @dora_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_get_calldata_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_get_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_get_chainid(!llvm.ptr) -> i64
  func.func private @dora_store_in_callvalue_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_caller_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_get_gaslimit(!llvm.ptr) -> i64
  func.func private @dora_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_copy_code_to_memory(!llvm.ptr, i64, i64, i64)
  func.func private @dora_read_storage(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_write_storage(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> i64
  func.func private @dora_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_get_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_get_coinbase_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_get_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_get_codesize_from_address(!llvm.ptr, !llvm.ptr) -> i64
  func.func private @dora_get_address_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_get_prevrandao(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_call(!llvm.ptr, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr, i8) -> i8
  func.func private @dora_store_in_balance(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> i64
  func.func private @dora_copy_ext_code_to_memory(!llvm.ptr, !llvm.ptr, i64, i64, i64)
  func.func private @dora_get_blob_hash_at_index(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_get_block_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_get_code_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_create(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr) -> i8
  func.func private @dora_create2(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
  func.func private @dora_get_return_data_size(!llvm.ptr) -> i64
  func.func private @dora_copy_return_data_into_memory(!llvm.ptr, i64, i64, i64)
  func.func private @dora_selfdestruct(!llvm.ptr, !llvm.ptr) -> i64
  func.func private @dora_transient_storage_read(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_transient_storage_write(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func public @main(%arg0: !llvm.ptr, %arg1: i64) -> i8 attributes {llvm.emit_c_interface} {
    %c1024_i256 = arith.constant 1024 : i256
    %0 = llvm.alloca %c1024_i256 x i256 : (i256) -> !llvm.ptr
    %1 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    llvm.store %0, %1 : !llvm.ptr, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %2 = llvm.mlir.addressof @dora_stack_length : !llvm.ptr
    llvm.store %c0_i64, %2 : i64, !llvm.ptr
    %c0_i64_0 = arith.constant 0 : i64
    %3 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    llvm.store %c0_i64_0, %3 : i64, !llvm.ptr
    %4 = call @dora_get_calldata_ptr(%arg0) : (!llvm.ptr) -> !llvm.ptr
    %5 = llvm.mlir.addressof @dora_calldata_ptr : !llvm.ptr
    llvm.store %4, %5 : !llvm.ptr, !llvm.ptr
    %6 = call @dora_get_calldata_size(%arg0) : (!llvm.ptr) -> i64
    %7 = llvm.mlir.addressof @dora_calldata_size : !llvm.ptr
    llvm.store %6, %7 : i64, !llvm.ptr
    %8 = llvm.mlir.addressof @dora_gas_counter : !llvm.ptr
    llvm.store %arg1, %8 : i64, !llvm.ptr
    %9 = llvm.mlir.addressof @dora_stack_length : !llvm.ptr
    %c1024_i64 = arith.constant 1024 : i64
    cf.br ^bb3
  ^bb1(%10: i8):  // 2 preds: ^bb2, ^bb6
    %c0_i64_1 = arith.constant 0 : i64
    call @dora_write_result(%arg0, %c0_i64_1, %c0_i64_1, %c0_i64_1, %10) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %10 : i8
  ^bb2(%11: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %11 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3:  // pred: ^bb0
    %c32_i256 = arith.constant 32 : i256
    %12 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    llvm.store %c32_i256, %13 : i256, !llvm.ptr
    %14 = llvm.getelementptr %13[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %14, %12 : !llvm.ptr, !llvm.ptr
    cf.br ^bb4
  ^bb4:  // pred: ^bb3
    %c0_i256 = arith.constant 0 : i256
    %15 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %16 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256, %16 : i256, !llvm.ptr
    %17 = llvm.getelementptr %16[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %17, %15 : !llvm.ptr, !llvm.ptr
    cf.br ^bb5
  ^bb5:  // pred: ^bb4
    %c0_i256_2 = arith.constant 0 : i256
    %18 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %19 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_2, %19 : i256, !llvm.ptr
    %20 = llvm.getelementptr %19[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %20, %18 : !llvm.ptr, !llvm.ptr
    cf.br ^bb6
  ^bb6:  // pred: ^bb5
    %21 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %22 = llvm.load %21 : !llvm.ptr -> !llvm.ptr
    %23 = llvm.getelementptr %22[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %24 = llvm.load %23 : !llvm.ptr -> i256
    llvm.store %23, %21 : !llvm.ptr, !llvm.ptr
    %25 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %26 = llvm.load %25 : !llvm.ptr -> !llvm.ptr
    %27 = llvm.getelementptr %26[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %28 = llvm.load %27 : !llvm.ptr -> i256
    llvm.store %27, %25 : !llvm.ptr, !llvm.ptr
    %29 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %30 = llvm.load %29 : !llvm.ptr -> !llvm.ptr
    %31 = llvm.getelementptr %30[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %32 = llvm.load %31 : !llvm.ptr -> i256
    llvm.store %31, %29 : !llvm.ptr, !llvm.ptr
    %33 = llvm.mlir.addressof @dora_gas_counter : !llvm.ptr
    %34 = llvm.load %33 : !llvm.ptr -> i64
    %35 = arith.trunci %24 : i256 to i64
    %36 = arith.trunci %32 : i256 to i64
    %37 = arith.addi %35, %36 : i64
    %38 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    %39 = llvm.load %38 : !llvm.ptr -> i64
    %c31_i64 = arith.constant 31 : i64
    %c32_i64 = arith.constant 32 : i64
    %40 = arith.addi %37, %c31_i64 : i64
    %41 = arith.divui %40, %c32_i64 : i64
    %42 = arith.muli %41, %c32_i64 : i64
    %43 = arith.cmpi ult, %39, %42 : i64
    %c3_i64 = arith.constant 3 : i64
    %44 = scf.if %43 -> (i64) {
      %c3_i64_4 = arith.constant 3 : i64
      %c31_i64_5 = arith.constant 31 : i64
      %c32_i64_6 = arith.constant 32 : i64
      %c512_i64 = arith.constant 512 : i64
      %48 = arith.addi %39, %c31_i64_5 : i64
      %49 = arith.divui %48, %c32_i64_6 : i64
      %50 = arith.muli %49, %49 : i64
      %51 = arith.divui %50, %c512_i64 : i64
      %52 = arith.muli %49, %c3_i64_4 : i64
      %53 = arith.addi %51, %52 : i64
      %c3_i64_7 = arith.constant 3 : i64
      %c31_i64_8 = arith.constant 31 : i64
      %c32_i64_9 = arith.constant 32 : i64
      %c512_i64_10 = arith.constant 512 : i64
      %54 = arith.addi %42, %c31_i64_8 : i64
      %55 = arith.divui %54, %c32_i64_9 : i64
      %56 = arith.muli %55, %55 : i64
      %57 = arith.divui %56, %c512_i64_10 : i64
      %58 = arith.muli %55, %c3_i64_7 : i64
      %59 = arith.addi %57, %58 : i64
      %60 = arith.subi %59, %53 : i64
      scf.yield %60 : i64
    } else {
      %c0_i64_4 = arith.constant 0 : i64
      scf.yield %c0_i64_4 : i64
    }
    %45 = arith.addi %44, %c3_i64 : i64
    %46 = arith.cmpi sge, %34, %45 : i64
    %47 = arith.subi %34, %45 : i64
    llvm.store %47, %33 : i64, !llvm.ptr
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %46, ^bb7, ^bb1(%c80_i8 : i8)
  ^bb7:  // pred: ^bb6
    "dora.calldatacopy"(%24, %28, %32) : (i256, i256, i256) -> ()
    cf.br ^bb8
  ^bb8:  // pred: ^bb7
    %c0_i64_3 = arith.constant 0 : i64
    %c1_i8 = arith.constant 1 : i8
    call @dora_write_result(%arg0, %c0_i64_3, %c0_i64_3, %arg1, %c1_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c1_i8 : i8
  }
}
