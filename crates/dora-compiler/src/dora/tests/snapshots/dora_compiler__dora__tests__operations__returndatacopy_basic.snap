---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  llvm.mlir.global internal @dora_global_stack_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_stack_length() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_memory_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_memory_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_calldata_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_calldata_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_gas_counter() {addr_space = 0 : i32} : i64
  llvm.mlir.global external @dora_global_ctx_is_static() {addr_space = 0 : i32} : !llvm.ptr
  func.func private @dora_fn_nop()
  func.func private @dora_fn_tracing(!llvm.ptr, i8, i64, !llvm.ptr, i64)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_chainid(!llvm.ptr) -> i64
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_gaslimit(!llvm.ptr) -> i64
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_code_copy(!llvm.ptr, i64, i64, i64)
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_call(!llvm.ptr, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, i64, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_returndata_copy(!llvm.ptr, i64, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_tload(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_tstore(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func public @main(%arg0: !llvm.ptr, %arg1: i64) -> i8 attributes {llvm.emit_c_interface} {
    %c1024_i256 = arith.constant 1024 : i256
    %0 = llvm.alloca %c1024_i256 x i256 : (i256) -> !llvm.ptr
    %1 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    llvm.store %0, %1 : !llvm.ptr, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %2 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    llvm.store %c0_i64, %2 : i64, !llvm.ptr
    %c0_i64_0 = arith.constant 0 : i64
    %3 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %c0_i64_0, %3 : i64, !llvm.ptr
    %4 = call @dora_fn_calldata(%arg0) : (!llvm.ptr) -> !llvm.ptr
    %5 = llvm.mlir.addressof @dora_global_calldata_ptr : !llvm.ptr
    llvm.store %4, %5 : !llvm.ptr, !llvm.ptr
    %6 = call @dora_fn_calldata_size(%arg0) : (!llvm.ptr) -> i64
    %7 = llvm.mlir.addressof @dora_global_calldata_size : !llvm.ptr
    llvm.store %6, %7 : i64, !llvm.ptr
    %8 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    llvm.store %arg1, %8 : i64, !llvm.ptr
    cf.br ^bb5
  ^bb1(%9: i8):  // 17 preds: ^bb2, ^bb4, ^bb5, ^bb8, ^bb9, ^bb12, ^bb13, ^bb15, ^bb16, ^bb17, ^bb18, ^bb20, ^bb22, ^bb23, ^bb26, ^bb29, ^bb30
    %c0_i64_1 = arith.constant 0 : i64
    %10 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %11 = llvm.load %10 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_1, %c0_i64_1, %11, %9) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %9 : i8
  ^bb2(%12: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %12 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3:  // pred: ^bb4
    %c0_i256 = arith.constant 0 : i256
    %13 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %14 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256, %14 : i256, !llvm.ptr
    %15 = llvm.getelementptr %14[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %15, %13 : !llvm.ptr, !llvm.ptr
    cf.br ^bb9
  ^bb4:  // pred: ^bb6
    %16 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64 = arith.constant 1024 : i64
    %17 = llvm.load %16 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %18 = arith.addi %17, %c1_i64 : i64
    llvm.store %18, %16 : i64, !llvm.ptr
    %19 = arith.cmpi ult, %c1024_i64, %18 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %19, ^bb1(%c92_i8 : i8), ^bb3
  ^bb5:  // pred: ^bb0
    %20 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %21 = llvm.load %20 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %22 = arith.cmpi uge, %21, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %22, ^bb6, ^bb1(%c80_i8 : i8)
  ^bb6:  // pred: ^bb5
    %23 = arith.subi %21, %c3_i64 : i64
    llvm.store %23, %20 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb7:  // pred: ^bb8
    %c0_i256_2 = arith.constant 0 : i256
    %24 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %25 = llvm.load %24 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_2, %25 : i256, !llvm.ptr
    %26 = llvm.getelementptr %25[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %26, %24 : !llvm.ptr, !llvm.ptr
    cf.br ^bb13
  ^bb8:  // pred: ^bb10
    %27 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_3 = arith.constant 1024 : i64
    %28 = llvm.load %27 : !llvm.ptr -> i64
    %c1_i64_4 = arith.constant 1 : i64
    %29 = arith.addi %28, %c1_i64_4 : i64
    llvm.store %29, %27 : i64, !llvm.ptr
    %30 = arith.cmpi ult, %c1024_i64_3, %29 : i64
    %c92_i8_5 = arith.constant 92 : i8
    cf.cond_br %30, ^bb1(%c92_i8_5 : i8), ^bb7
  ^bb9:  // pred: ^bb3
    %31 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %32 = llvm.load %31 : !llvm.ptr -> i64
    %c3_i64_6 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %33 = arith.cmpi uge, %32, %c3_i64_6 : i64
    %c80_i8_7 = arith.constant 80 : i8
    cf.cond_br %33, ^bb10, ^bb1(%c80_i8_7 : i8)
  ^bb10:  // pred: ^bb9
    %34 = arith.subi %32, %c3_i64_6 : i64
    llvm.store %34, %31 : i64, !llvm.ptr
    cf.br ^bb8
  ^bb11:  // pred: ^bb12
    %c32_i256 = arith.constant 32 : i256
    %35 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %36 = llvm.load %35 : !llvm.ptr -> !llvm.ptr
    llvm.store %c32_i256, %36 : i256, !llvm.ptr
    %37 = llvm.getelementptr %36[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %37, %35 : !llvm.ptr, !llvm.ptr
    cf.br ^bb23
  ^bb12:  // pred: ^bb14
    %38 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_8 = arith.constant 1024 : i64
    %39 = llvm.load %38 : !llvm.ptr -> i64
    %c1_i64_9 = arith.constant 1 : i64
    %40 = arith.addi %39, %c1_i64_9 : i64
    llvm.store %40, %38 : i64, !llvm.ptr
    %41 = arith.cmpi ult, %c1024_i64_8, %40 : i64
    %c92_i8_10 = arith.constant 92 : i8
    cf.cond_br %41, ^bb1(%c92_i8_10 : i8), ^bb11
  ^bb13:  // pred: ^bb7
    %42 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %43 = llvm.load %42 : !llvm.ptr -> i64
    %c3_i64_11 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %44 = arith.cmpi uge, %43, %c3_i64_11 : i64
    %c80_i8_12 = arith.constant 80 : i8
    cf.cond_br %44, ^bb14, ^bb1(%c80_i8_12 : i8)
  ^bb14:  // pred: ^bb13
    %45 = arith.subi %43, %c3_i64_11 : i64
    llvm.store %45, %42 : i64, !llvm.ptr
    cf.br ^bb12
  ^bb15:  // pred: ^bb22
    %46 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %47 = llvm.load %46 : !llvm.ptr -> !llvm.ptr
    %48 = llvm.getelementptr %47[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %49 = llvm.load %48 : !llvm.ptr -> i256
    llvm.store %48, %46 : !llvm.ptr, !llvm.ptr
    %50 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %51 = llvm.load %50 : !llvm.ptr -> !llvm.ptr
    %52 = llvm.getelementptr %51[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %53 = llvm.load %52 : !llvm.ptr -> i256
    llvm.store %52, %50 : !llvm.ptr, !llvm.ptr
    %54 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %55 = llvm.load %54 : !llvm.ptr -> !llvm.ptr
    %56 = llvm.getelementptr %55[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %57 = llvm.load %56 : !llvm.ptr -> i256
    llvm.store %56, %54 : !llvm.ptr, !llvm.ptr
    %58 = arith.trunci %57 : i256 to i64
    %c0_i64_13 = arith.constant 0 : i64
    %59 = arith.cmpi slt, %58, %c0_i64_13 : i64
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %59, ^bb1(%c84_i8 : i8), ^bb16
  ^bb16:  // pred: ^bb15
    %c31_i64 = arith.constant 31 : i64
    %c32_i64 = arith.constant 32 : i64
    %60 = arith.addi %58, %c31_i64 : i64
    %61 = arith.divui %60, %c32_i64 : i64
    %c3_i64_14 = arith.constant 3 : i64
    %62 = arith.muli %61, %c3_i64_14 : i64
    %63 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %64 = llvm.load %63 : !llvm.ptr -> i64
    %65 = arith.cmpi ult, %64, %62 : i64
    scf.if %65 {
    } else {
      %116 = arith.subi %64, %62 : i64
      llvm.store %116, %63 : i64, !llvm.ptr
    }
    %c80_i8_15 = arith.constant 80 : i8
    cf.cond_br %65, ^bb1(%c80_i8_15 : i8), ^bb17
  ^bb17:  // pred: ^bb16
    %66 = arith.trunci %49 : i256 to i64
    %c0_i64_16 = arith.constant 0 : i64
    %67 = arith.cmpi slt, %66, %c0_i64_16 : i64
    %c84_i8_17 = arith.constant 84 : i8
    cf.cond_br %67, ^bb1(%c84_i8_17 : i8), ^bb18
  ^bb18:  // pred: ^bb17
    %68 = arith.trunci %53 : i256 to i64
    %c0_i64_18 = arith.constant 0 : i64
    %69 = arith.cmpi slt, %68, %c0_i64_18 : i64
    %c84_i8_19 = arith.constant 84 : i8
    cf.cond_br %69, ^bb1(%c84_i8_19 : i8), ^bb19
  ^bb19:  // pred: ^bb18
    %c0_i64_20 = arith.constant 0 : i64
    %70 = arith.cmpi ne, %58, %c0_i64_20 : i64
    cf.cond_br %70, ^bb26, ^bb20
  ^bb20:  // 2 preds: ^bb19, ^bb28
    %71 = call @dora_fn_returndata_copy(%arg0, %66, %68, %58) : (!llvm.ptr, i64, i64, i64) -> !llvm.ptr
    %72 = llvm.getelementptr %71[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %73 = llvm.load %72 : !llvm.ptr -> i8
    %c0_i8 = arith.constant 0 : i8
    %74 = arith.cmpi ne, %73, %c0_i8 : i8
    cf.cond_br %74, ^bb1(%73 : i8), ^bb21
  ^bb21:  // pred: ^bb20
    cf.br ^bb25
  ^bb22:  // pred: ^bb24
    %75 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_21 = arith.constant 1024 : i64
    %76 = llvm.load %75 : !llvm.ptr -> i64
    %c-3_i64 = arith.constant -3 : i64
    %77 = arith.addi %76, %c-3_i64 : i64
    llvm.store %77, %75 : i64, !llvm.ptr
    %c3_i64_22 = arith.constant 3 : i64
    %78 = arith.cmpi ult, %76, %c3_i64_22 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %78, ^bb1(%c91_i8 : i8), ^bb15
  ^bb23:  // pred: ^bb11
    %79 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %80 = llvm.load %79 : !llvm.ptr -> i64
    %c3_i64_23 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %81 = arith.cmpi uge, %80, %c3_i64_23 : i64
    %c80_i8_24 = arith.constant 80 : i8
    cf.cond_br %81, ^bb24, ^bb1(%c80_i8_24 : i8)
  ^bb24:  // pred: ^bb23
    %82 = arith.subi %80, %c3_i64_23 : i64
    llvm.store %82, %79 : i64, !llvm.ptr
    cf.br ^bb22
  ^bb25:  // pred: ^bb21
    %c0_i64_25 = arith.constant 0 : i64
    %c1_i8 = arith.constant 1 : i8
    %83 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %84 = llvm.load %83 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_25, %c0_i64_25, %84, %c1_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c1_i8 : i8
  ^bb26:  // pred: ^bb19
    %85 = arith.addi %66, %58 : i64
    %c0_i64_26 = arith.constant 0 : i64
    %86 = arith.cmpi slt, %85, %c0_i64_26 : i64
    %c84_i8_27 = arith.constant 84 : i8
    cf.cond_br %86, ^bb1(%c84_i8_27 : i8), ^bb27
  ^bb27:  // pred: ^bb26
    %c31_i64_28 = arith.constant 31 : i64
    %c32_i64_29 = arith.constant 32 : i64
    %87 = arith.addi %85, %c31_i64_28 : i64
    %88 = arith.divui %87, %c32_i64_29 : i64
    %c32_i64_30 = arith.constant 32 : i64
    %89 = arith.muli %88, %c32_i64_30 : i64
    %90 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    %91 = llvm.load %90 : !llvm.ptr -> i64
    %c31_i64_31 = arith.constant 31 : i64
    %c32_i64_32 = arith.constant 32 : i64
    %92 = arith.addi %91, %c31_i64_31 : i64
    %93 = arith.divui %92, %c32_i64_32 : i64
    %94 = arith.muli %93, %c32_i64_30 : i64
    %95 = arith.cmpi ult, %94, %89 : i64
    cf.cond_br %95, ^bb29, ^bb28
  ^bb28:  // 2 preds: ^bb27, ^bb31
    cf.br ^bb20
  ^bb29:  // pred: ^bb27
    %c3_i64_33 = arith.constant 3 : i64
    %c512_i64 = arith.constant 512 : i64
    %96 = arith.muli %93, %93 : i64
    %97 = arith.divui %96, %c512_i64 : i64
    %98 = arith.muli %93, %c3_i64_33 : i64
    %99 = arith.addi %97, %98 : i64
    %c3_i64_34 = arith.constant 3 : i64
    %c512_i64_35 = arith.constant 512 : i64
    %100 = arith.muli %88, %88 : i64
    %101 = arith.divui %100, %c512_i64_35 : i64
    %102 = arith.muli %88, %c3_i64_34 : i64
    %103 = arith.addi %101, %102 : i64
    %104 = arith.subi %103, %99 : i64
    %105 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %106 = llvm.load %105 : !llvm.ptr -> i64
    %107 = arith.cmpi ult, %106, %104 : i64
    scf.if %107 {
    } else {
      %116 = arith.subi %106, %104 : i64
      llvm.store %116, %105 : i64, !llvm.ptr
    }
    %c80_i8_36 = arith.constant 80 : i8
    cf.cond_br %107, ^bb1(%c80_i8_36 : i8), ^bb30
  ^bb30:  // pred: ^bb29
    %108 = call @dora_fn_extend_memory(%arg0, %89) : (!llvm.ptr, i64) -> !llvm.ptr
    %109 = llvm.getelementptr %108[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %110 = llvm.load %109 : !llvm.ptr -> !llvm.ptr
    %111 = llvm.getelementptr %108[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %112 = llvm.load %111 : !llvm.ptr -> i8
    %c0_i8_37 = arith.constant 0 : i8
    %113 = arith.cmpi ne, %112, %c0_i8_37 : i8
    cf.cond_br %113, ^bb1(%112 : i8), ^bb31
  ^bb31:  // pred: ^bb30
    %114 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    llvm.store %110, %114 : !llvm.ptr, !llvm.ptr
    %115 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %89, %115 : i64, !llvm.ptr
    cf.br ^bb28
  }
}
