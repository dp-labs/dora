---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  llvm.mlir.global internal @dora_global_memory_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_memory_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_gas_counter() {addr_space = 0 : i32} : i64
  func.func private @dora_fn_nop()
  func.func private @dora_fn_tracing(!llvm.ptr, i8, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_fn_is_static(!llvm.ptr) -> i8
  func.func private @dora_fn_exp(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_chainid(!llvm.ptr) -> i64
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gaslimit_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_code_copy(!llvm.ptr, !llvm.ptr, i64, i64)
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_call(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_returndata_copy(!llvm.ptr, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_tload(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_tstore(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func public @main(%arg0: !llvm.ptr, %arg1: i64, %arg2: !llvm.ptr, %arg3: !llvm.ptr) -> i8 attributes {llvm.emit_c_interface} {
    %c0_i64 = arith.constant 0 : i64
    %0 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %c0_i64, %0 : i64, !llvm.ptr
    %1 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    llvm.store %arg1, %1 : i64, !llvm.ptr
    cf.br ^bb5
  ^bb1(%2: i8):  // 23 preds: ^bb2, ^bb4, ^bb5, ^bb8, ^bb9, ^bb13, ^bb14, ^bb17, ^bb18, ^bb21, ^bb22, ^bb26, ^bb27, ^bb30, ^bb31, ^bb32, ^bb35, ^bb36, ^bb38, ^bb39, ^bb40, ^bb43, ^bb44
    %c0_i64_0 = arith.constant 0 : i64
    %3 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %4 = llvm.load %3 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_0, %c0_i64_0, %4, %2) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %2 : i8
  ^bb2(%5: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %5 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3:  // pred: ^bb4
    %c0_i256 = arith.constant 0 : i256
    %6 = llvm.load %arg3 : !llvm.ptr -> i64
    %7 = llvm.getelementptr %arg2[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64 = arith.constant 1 : i64
    %8 = arith.addi %6, %c1_i64 : i64
    llvm.store %8, %arg3 : i64, !llvm.ptr
    llvm.store %c0_i256, %7 : i256, !llvm.ptr
    cf.br ^bb9
  ^bb4:  // pred: ^bb6
    %c1024_i64 = arith.constant 1024 : i64
    %9 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_1 = arith.constant 1 : i64
    %10 = arith.addi %9, %c1_i64_1 : i64
    %11 = arith.cmpi ult, %c1024_i64, %10 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %11, ^bb1(%c92_i8 : i8), ^bb3
  ^bb5:  // pred: ^bb0
    %12 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %13 = llvm.load %12 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %14 = arith.cmpi uge, %13, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %14, ^bb6, ^bb1(%c80_i8 : i8)
  ^bb6:  // pred: ^bb5
    %15 = arith.subi %13, %c3_i64 : i64
    llvm.store %15, %12 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb7:  // pred: ^bb8
    %c42_i256 = arith.constant 42 : i256
    %16 = llvm.load %arg3 : !llvm.ptr -> i64
    %17 = llvm.getelementptr %arg2[%16] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_2 = arith.constant 1 : i64
    %18 = arith.addi %16, %c1_i64_2 : i64
    llvm.store %18, %arg3 : i64, !llvm.ptr
    llvm.store %c42_i256, %17 : i256, !llvm.ptr
    cf.br ^bb14
  ^bb8:  // pred: ^bb10
    %c1024_i64_3 = arith.constant 1024 : i64
    %19 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_4 = arith.constant 1 : i64
    %20 = arith.addi %19, %c1_i64_4 : i64
    %21 = arith.cmpi ult, %c1024_i64_3, %20 : i64
    %c92_i8_5 = arith.constant 92 : i8
    cf.cond_br %21, ^bb1(%c92_i8_5 : i8), ^bb7
  ^bb9:  // pred: ^bb3
    %22 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %23 = llvm.load %22 : !llvm.ptr -> i64
    %c3_i64_6 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %24 = arith.cmpi uge, %23, %c3_i64_6 : i64
    %c80_i8_7 = arith.constant 80 : i8
    cf.cond_br %24, ^bb10, ^bb1(%c80_i8_7 : i8)
  ^bb10:  // pred: ^bb9
    %25 = arith.subi %23, %c3_i64_6 : i64
    llvm.store %25, %22 : i64, !llvm.ptr
    cf.br ^bb8
  ^bb11:  // pred: ^bb13
    %26 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_8 = arith.constant 1 : i64
    %27 = arith.subi %26, %c1_i64_8 : i64
    %28 = llvm.getelementptr %arg2[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %27, %arg3 : i64, !llvm.ptr
    %29 = llvm.load %28 : !llvm.ptr -> i256
    %30 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_9 = arith.constant 1 : i64
    %31 = arith.subi %30, %c1_i64_9 : i64
    %32 = llvm.getelementptr %arg2[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %31, %arg3 : i64, !llvm.ptr
    %33 = llvm.load %32 : !llvm.ptr -> i256
    %c32_i64 = arith.constant 32 : i64
    %c0_i64_10 = arith.constant 0 : i64
    %34 = arith.cmpi ne, %c32_i64, %c0_i64_10 : i64
    cf.cond_br %34, ^bb30, ^bb12
  ^bb12:  // 2 preds: ^bb11, ^bb34
    %35 = arith.trunci %29 : i256 to i64
    %36 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    %37 = llvm.load %36 : !llvm.ptr -> !llvm.ptr
    %38 = llvm.getelementptr %37[%35] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %39 = llvm.intr.bswap(%33)  : (i256) -> i256
    llvm.store %39, %38 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb18
  ^bb13:  // pred: ^bb15
    %c1024_i64_11 = arith.constant 1024 : i64
    %40 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-2_i64 = arith.constant -2 : i64
    %41 = arith.addi %40, %c-2_i64 : i64
    %c2_i64 = arith.constant 2 : i64
    %42 = arith.cmpi ult, %40, %c2_i64 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %42, ^bb1(%c91_i8 : i8), ^bb11
  ^bb14:  // pred: ^bb7
    %43 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %44 = llvm.load %43 : !llvm.ptr -> i64
    %c3_i64_12 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %45 = arith.cmpi uge, %44, %c3_i64_12 : i64
    %c80_i8_13 = arith.constant 80 : i8
    cf.cond_br %45, ^bb15, ^bb1(%c80_i8_13 : i8)
  ^bb15:  // pred: ^bb14
    %46 = arith.subi %44, %c3_i64_12 : i64
    llvm.store %46, %43 : i64, !llvm.ptr
    cf.br ^bb13
  ^bb16:  // pred: ^bb17
    %c0_i256_14 = arith.constant 0 : i256
    %47 = llvm.load %arg3 : !llvm.ptr -> i64
    %48 = llvm.getelementptr %arg2[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_15 = arith.constant 1 : i64
    %49 = arith.addi %47, %c1_i64_15 : i64
    llvm.store %49, %arg3 : i64, !llvm.ptr
    llvm.store %c0_i256_14, %48 : i256, !llvm.ptr
    cf.br ^bb22
  ^bb17:  // pred: ^bb19
    %c1024_i64_16 = arith.constant 1024 : i64
    %50 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_17 = arith.constant 1 : i64
    %51 = arith.addi %50, %c1_i64_17 : i64
    %52 = arith.cmpi ult, %c1024_i64_16, %51 : i64
    %c92_i8_18 = arith.constant 92 : i8
    cf.cond_br %52, ^bb1(%c92_i8_18 : i8), ^bb16
  ^bb18:  // pred: ^bb12
    %53 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %54 = llvm.load %53 : !llvm.ptr -> i64
    %c3_i64_19 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %55 = arith.cmpi uge, %54, %c3_i64_19 : i64
    %c80_i8_20 = arith.constant 80 : i8
    cf.cond_br %55, ^bb19, ^bb1(%c80_i8_20 : i8)
  ^bb19:  // pred: ^bb18
    %56 = arith.subi %54, %c3_i64_19 : i64
    llvm.store %56, %53 : i64, !llvm.ptr
    cf.br ^bb17
  ^bb20:  // pred: ^bb21
    %c99_i256 = arith.constant 99 : i256
    %57 = llvm.load %arg3 : !llvm.ptr -> i64
    %58 = llvm.getelementptr %arg2[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_21 = arith.constant 1 : i64
    %59 = arith.addi %57, %c1_i64_21 : i64
    llvm.store %59, %arg3 : i64, !llvm.ptr
    llvm.store %c99_i256, %58 : i256, !llvm.ptr
    cf.br ^bb27
  ^bb21:  // pred: ^bb23
    %c1024_i64_22 = arith.constant 1024 : i64
    %60 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_23 = arith.constant 1 : i64
    %61 = arith.addi %60, %c1_i64_23 : i64
    %62 = arith.cmpi ult, %c1024_i64_22, %61 : i64
    %c92_i8_24 = arith.constant 92 : i8
    cf.cond_br %62, ^bb1(%c92_i8_24 : i8), ^bb20
  ^bb22:  // pred: ^bb16
    %63 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %64 = llvm.load %63 : !llvm.ptr -> i64
    %c3_i64_25 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %65 = arith.cmpi uge, %64, %c3_i64_25 : i64
    %c80_i8_26 = arith.constant 80 : i8
    cf.cond_br %65, ^bb23, ^bb1(%c80_i8_26 : i8)
  ^bb23:  // pred: ^bb22
    %66 = arith.subi %64, %c3_i64_25 : i64
    llvm.store %66, %63 : i64, !llvm.ptr
    cf.br ^bb21
  ^bb24:  // pred: ^bb26
    %67 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_27 = arith.constant 1 : i64
    %68 = arith.subi %67, %c1_i64_27 : i64
    %69 = llvm.getelementptr %arg2[%68] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %68, %arg3 : i64, !llvm.ptr
    %70 = llvm.load %69 : !llvm.ptr -> i256
    %71 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_28 = arith.constant 1 : i64
    %72 = arith.subi %71, %c1_i64_28 : i64
    %73 = llvm.getelementptr %arg2[%72] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %72, %arg3 : i64, !llvm.ptr
    %74 = llvm.load %73 : !llvm.ptr -> i256
    %c32_i64_29 = arith.constant 32 : i64
    %c0_i64_30 = arith.constant 0 : i64
    %75 = arith.cmpi ne, %c32_i64_29, %c0_i64_30 : i64
    cf.cond_br %75, ^bb38, ^bb25
  ^bb25:  // 2 preds: ^bb24, ^bb42
    %76 = arith.trunci %70 : i256 to i64
    %77 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    %78 = llvm.load %77 : !llvm.ptr -> !llvm.ptr
    %79 = llvm.getelementptr %78[%76] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %80 = llvm.intr.bswap(%74)  : (i256) -> i256
    llvm.store %80, %79 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb29
  ^bb26:  // pred: ^bb28
    %c1024_i64_31 = arith.constant 1024 : i64
    %81 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-2_i64_32 = arith.constant -2 : i64
    %82 = arith.addi %81, %c-2_i64_32 : i64
    %c2_i64_33 = arith.constant 2 : i64
    %83 = arith.cmpi ult, %81, %c2_i64_33 : i64
    %c91_i8_34 = arith.constant 91 : i8
    cf.cond_br %83, ^bb1(%c91_i8_34 : i8), ^bb24
  ^bb27:  // pred: ^bb20
    %84 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %85 = llvm.load %84 : !llvm.ptr -> i64
    %c3_i64_35 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %86 = arith.cmpi uge, %85, %c3_i64_35 : i64
    %c80_i8_36 = arith.constant 80 : i8
    cf.cond_br %86, ^bb28, ^bb1(%c80_i8_36 : i8)
  ^bb28:  // pred: ^bb27
    %87 = arith.subi %85, %c3_i64_35 : i64
    llvm.store %87, %84 : i64, !llvm.ptr
    cf.br ^bb26
  ^bb29:  // pred: ^bb25
    %c0_i64_37 = arith.constant 0 : i64
    %c1_i8 = arith.constant 1 : i8
    %88 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %89 = llvm.load %88 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_37, %c0_i64_37, %89, %c1_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c1_i8 : i8
  ^bb30:  // pred: ^bb11
    %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256
    %90 = arith.cmpi sgt, %29, %c18446744073709551615_i256 : i256
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %90, ^bb1(%c84_i8 : i8), ^bb31
  ^bb31:  // pred: ^bb30
    %91 = arith.trunci %29 : i256 to i64
    %c0_i64_38 = arith.constant 0 : i64
    %92 = arith.cmpi slt, %91, %c0_i64_38 : i64
    %c84_i8_39 = arith.constant 84 : i8
    cf.cond_br %92, ^bb1(%c84_i8_39 : i8), ^bb32
  ^bb32:  // pred: ^bb31
    %93 = arith.addi %91, %c32_i64 : i64
    %c0_i64_40 = arith.constant 0 : i64
    %94 = arith.cmpi slt, %93, %c0_i64_40 : i64
    %c84_i8_41 = arith.constant 84 : i8
    cf.cond_br %94, ^bb1(%c84_i8_41 : i8), ^bb33
  ^bb33:  // pred: ^bb32
    %c31_i64 = arith.constant 31 : i64
    %c32_i64_42 = arith.constant 32 : i64
    %95 = arith.addi %93, %c31_i64 : i64
    %96 = arith.divui %95, %c32_i64_42 : i64
    %c32_i64_43 = arith.constant 32 : i64
    %97 = arith.muli %96, %c32_i64_43 : i64
    %98 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    %99 = llvm.load %98 : !llvm.ptr -> i64
    %c31_i64_44 = arith.constant 31 : i64
    %c32_i64_45 = arith.constant 32 : i64
    %100 = arith.addi %99, %c31_i64_44 : i64
    %101 = arith.divui %100, %c32_i64_45 : i64
    %102 = arith.muli %101, %c32_i64_43 : i64
    %103 = arith.cmpi ult, %102, %97 : i64
    cf.cond_br %103, ^bb35, ^bb34
  ^bb34:  // 2 preds: ^bb33, ^bb37
    cf.br ^bb12
  ^bb35:  // pred: ^bb33
    %c3_i64_46 = arith.constant 3 : i64
    %c512_i64 = arith.constant 512 : i64
    %104 = arith.muli %101, %101 : i64
    %105 = arith.divui %104, %c512_i64 : i64
    %106 = arith.muli %101, %c3_i64_46 : i64
    %107 = arith.addi %105, %106 : i64
    %c3_i64_47 = arith.constant 3 : i64
    %c512_i64_48 = arith.constant 512 : i64
    %108 = arith.muli %96, %96 : i64
    %109 = arith.divui %108, %c512_i64_48 : i64
    %110 = arith.muli %96, %c3_i64_47 : i64
    %111 = arith.addi %109, %110 : i64
    %112 = arith.subi %111, %107 : i64
    %113 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %114 = llvm.load %113 : !llvm.ptr -> i64
    %115 = arith.cmpi ult, %114, %112 : i64
    scf.if %115 {
    } else {
      %158 = arith.subi %114, %112 : i64
      llvm.store %158, %113 : i64, !llvm.ptr
    }
    %c80_i8_49 = arith.constant 80 : i8
    cf.cond_br %115, ^bb1(%c80_i8_49 : i8), ^bb36
  ^bb36:  // pred: ^bb35
    %116 = call @dora_fn_extend_memory(%arg0, %97) : (!llvm.ptr, i64) -> !llvm.ptr
    %117 = llvm.getelementptr %116[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %118 = llvm.load %117 : !llvm.ptr -> !llvm.ptr
    %119 = llvm.getelementptr %116[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %120 = llvm.load %119 : !llvm.ptr -> i8
    %c0_i8 = arith.constant 0 : i8
    %121 = arith.cmpi ne, %120, %c0_i8 : i8
    cf.cond_br %121, ^bb1(%120 : i8), ^bb37
  ^bb37:  // pred: ^bb36
    %122 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    llvm.store %118, %122 : !llvm.ptr, !llvm.ptr
    %123 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %97, %123 : i64, !llvm.ptr
    cf.br ^bb34
  ^bb38:  // pred: ^bb24
    %c18446744073709551615_i256_50 = arith.constant 18446744073709551615 : i256
    %124 = arith.cmpi sgt, %70, %c18446744073709551615_i256_50 : i256
    %c84_i8_51 = arith.constant 84 : i8
    cf.cond_br %124, ^bb1(%c84_i8_51 : i8), ^bb39
  ^bb39:  // pred: ^bb38
    %125 = arith.trunci %70 : i256 to i64
    %c0_i64_52 = arith.constant 0 : i64
    %126 = arith.cmpi slt, %125, %c0_i64_52 : i64
    %c84_i8_53 = arith.constant 84 : i8
    cf.cond_br %126, ^bb1(%c84_i8_53 : i8), ^bb40
  ^bb40:  // pred: ^bb39
    %127 = arith.addi %125, %c32_i64_29 : i64
    %c0_i64_54 = arith.constant 0 : i64
    %128 = arith.cmpi slt, %127, %c0_i64_54 : i64
    %c84_i8_55 = arith.constant 84 : i8
    cf.cond_br %128, ^bb1(%c84_i8_55 : i8), ^bb41
  ^bb41:  // pred: ^bb40
    %c31_i64_56 = arith.constant 31 : i64
    %c32_i64_57 = arith.constant 32 : i64
    %129 = arith.addi %127, %c31_i64_56 : i64
    %130 = arith.divui %129, %c32_i64_57 : i64
    %c32_i64_58 = arith.constant 32 : i64
    %131 = arith.muli %130, %c32_i64_58 : i64
    %132 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    %133 = llvm.load %132 : !llvm.ptr -> i64
    %c31_i64_59 = arith.constant 31 : i64
    %c32_i64_60 = arith.constant 32 : i64
    %134 = arith.addi %133, %c31_i64_59 : i64
    %135 = arith.divui %134, %c32_i64_60 : i64
    %136 = arith.muli %135, %c32_i64_58 : i64
    %137 = arith.cmpi ult, %136, %131 : i64
    cf.cond_br %137, ^bb43, ^bb42
  ^bb42:  // 2 preds: ^bb41, ^bb45
    cf.br ^bb25
  ^bb43:  // pred: ^bb41
    %c3_i64_61 = arith.constant 3 : i64
    %c512_i64_62 = arith.constant 512 : i64
    %138 = arith.muli %135, %135 : i64
    %139 = arith.divui %138, %c512_i64_62 : i64
    %140 = arith.muli %135, %c3_i64_61 : i64
    %141 = arith.addi %139, %140 : i64
    %c3_i64_63 = arith.constant 3 : i64
    %c512_i64_64 = arith.constant 512 : i64
    %142 = arith.muli %130, %130 : i64
    %143 = arith.divui %142, %c512_i64_64 : i64
    %144 = arith.muli %130, %c3_i64_63 : i64
    %145 = arith.addi %143, %144 : i64
    %146 = arith.subi %145, %141 : i64
    %147 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %148 = llvm.load %147 : !llvm.ptr -> i64
    %149 = arith.cmpi ult, %148, %146 : i64
    scf.if %149 {
    } else {
      %158 = arith.subi %148, %146 : i64
      llvm.store %158, %147 : i64, !llvm.ptr
    }
    %c80_i8_65 = arith.constant 80 : i8
    cf.cond_br %149, ^bb1(%c80_i8_65 : i8), ^bb44
  ^bb44:  // pred: ^bb43
    %150 = call @dora_fn_extend_memory(%arg0, %131) : (!llvm.ptr, i64) -> !llvm.ptr
    %151 = llvm.getelementptr %150[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %152 = llvm.load %151 : !llvm.ptr -> !llvm.ptr
    %153 = llvm.getelementptr %150[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %154 = llvm.load %153 : !llvm.ptr -> i8
    %c0_i8_66 = arith.constant 0 : i8
    %155 = arith.cmpi ne, %154, %c0_i8_66 : i8
    cf.cond_br %155, ^bb1(%154 : i8), ^bb45
  ^bb45:  // pred: ^bb44
    %156 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    llvm.store %152, %156 : !llvm.ptr, !llvm.ptr
    %157 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %131, %157 : i64, !llvm.ptr
    cf.br ^bb42
  }
}
