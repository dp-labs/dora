---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  func.func private @dora_fn_nop()
  func.func private @dora_fn_tracing(!llvm.ptr, i8, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_fn_is_static(!llvm.ptr) -> i8
  func.func private @dora_fn_exp(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_chainid(!llvm.ptr) -> i64
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gaslimit_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_memory_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_memory_size(!llvm.ptr) -> i64
  func.func private @dora_fn_code_copy(!llvm.ptr, !llvm.ptr, i64, i64)
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_call(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_returndata_copy(!llvm.ptr, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_tload(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_tstore(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func public @main(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr) -> i8 attributes {llvm.emit_c_interface} {
    %c0_i64 = arith.constant 0 : i64
    %0 = llvm.alloca %c0_i64 x !llvm.ptr : (i64) -> !llvm.ptr
    llvm.store %arg2, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb5
  ^bb1(%1: i8):  // 23 preds: ^bb2, ^bb4, ^bb5, ^bb8, ^bb9, ^bb13, ^bb14, ^bb17, ^bb18, ^bb21, ^bb22, ^bb26, ^bb27, ^bb30, ^bb31, ^bb32, ^bb35, ^bb36, ^bb38, ^bb39, ^bb40, ^bb43, ^bb44
    %c0_i64_0 = arith.constant 0 : i64
    %2 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_0, %c0_i64_0, %2, %1) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %1 : i8
  ^bb2(%3: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %3 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3:  // pred: ^bb4
    %c0_i256 = arith.constant 0 : i256
    %4 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256, %4 : i256, !llvm.ptr
    %5 = llvm.getelementptr %4[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %5, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb9
  ^bb4:  // pred: ^bb6
    %c1024_i64 = arith.constant 1024 : i64
    %6 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %7 = arith.addi %6, %c1_i64 : i64
    llvm.store %7, %arg3 : i64, !llvm.ptr
    %8 = arith.cmpi ult, %c1024_i64, %7 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %8, ^bb1(%c92_i8 : i8), ^bb3
  ^bb5:  // pred: ^bb0
    %9 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %10 = arith.cmpi uge, %9, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %10, ^bb6, ^bb1(%c80_i8 : i8)
  ^bb6:  // pred: ^bb5
    %11 = arith.subi %9, %c3_i64 : i64
    llvm.store %11, %arg1 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb7:  // pred: ^bb8
    %c42_i256 = arith.constant 42 : i256
    %12 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c42_i256, %12 : i256, !llvm.ptr
    %13 = llvm.getelementptr %12[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %13, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb14
  ^bb8:  // pred: ^bb10
    %c1024_i64_1 = arith.constant 1024 : i64
    %14 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_2 = arith.constant 1 : i64
    %15 = arith.addi %14, %c1_i64_2 : i64
    llvm.store %15, %arg3 : i64, !llvm.ptr
    %16 = arith.cmpi ult, %c1024_i64_1, %15 : i64
    %c92_i8_3 = arith.constant 92 : i8
    cf.cond_br %16, ^bb1(%c92_i8_3 : i8), ^bb7
  ^bb9:  // pred: ^bb3
    %17 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_4 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %18 = arith.cmpi uge, %17, %c3_i64_4 : i64
    %c80_i8_5 = arith.constant 80 : i8
    cf.cond_br %18, ^bb10, ^bb1(%c80_i8_5 : i8)
  ^bb10:  // pred: ^bb9
    %19 = arith.subi %17, %c3_i64_4 : i64
    llvm.store %19, %arg1 : i64, !llvm.ptr
    cf.br ^bb8
  ^bb11:  // pred: ^bb13
    %20 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %21 = llvm.getelementptr %20[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %22 = llvm.load %21 : !llvm.ptr -> i256
    llvm.store %21, %0 : !llvm.ptr, !llvm.ptr
    %23 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %24 = llvm.getelementptr %23[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %25 = llvm.load %24 : !llvm.ptr -> i256
    llvm.store %24, %0 : !llvm.ptr, !llvm.ptr
    %c32_i64 = arith.constant 32 : i64
    %c0_i64_6 = arith.constant 0 : i64
    %26 = arith.cmpi ne, %c32_i64, %c0_i64_6 : i64
    cf.cond_br %26, ^bb30, ^bb12
  ^bb12:  // 2 preds: ^bb11, ^bb34
    %27 = arith.trunci %22 : i256 to i64
    %28 = call @dora_fn_memory_ptr(%arg0) : (!llvm.ptr) -> !llvm.ptr
    %29 = llvm.getelementptr %28[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %30 = llvm.intr.bswap(%25)  : (i256) -> i256
    llvm.store %30, %29 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb18
  ^bb13:  // pred: ^bb15
    %c1024_i64_7 = arith.constant 1024 : i64
    %31 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-2_i64 = arith.constant -2 : i64
    %32 = arith.addi %31, %c-2_i64 : i64
    llvm.store %32, %arg3 : i64, !llvm.ptr
    %c2_i64 = arith.constant 2 : i64
    %33 = arith.cmpi ult, %31, %c2_i64 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %33, ^bb1(%c91_i8 : i8), ^bb11
  ^bb14:  // pred: ^bb7
    %34 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_8 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %35 = arith.cmpi uge, %34, %c3_i64_8 : i64
    %c80_i8_9 = arith.constant 80 : i8
    cf.cond_br %35, ^bb15, ^bb1(%c80_i8_9 : i8)
  ^bb15:  // pred: ^bb14
    %36 = arith.subi %34, %c3_i64_8 : i64
    llvm.store %36, %arg1 : i64, !llvm.ptr
    cf.br ^bb13
  ^bb16:  // pred: ^bb17
    %c0_i256_10 = arith.constant 0 : i256
    %37 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_10, %37 : i256, !llvm.ptr
    %38 = llvm.getelementptr %37[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %38, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb22
  ^bb17:  // pred: ^bb19
    %c1024_i64_11 = arith.constant 1024 : i64
    %39 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_12 = arith.constant 1 : i64
    %40 = arith.addi %39, %c1_i64_12 : i64
    llvm.store %40, %arg3 : i64, !llvm.ptr
    %41 = arith.cmpi ult, %c1024_i64_11, %40 : i64
    %c92_i8_13 = arith.constant 92 : i8
    cf.cond_br %41, ^bb1(%c92_i8_13 : i8), ^bb16
  ^bb18:  // pred: ^bb12
    %42 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_14 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %43 = arith.cmpi uge, %42, %c3_i64_14 : i64
    %c80_i8_15 = arith.constant 80 : i8
    cf.cond_br %43, ^bb19, ^bb1(%c80_i8_15 : i8)
  ^bb19:  // pred: ^bb18
    %44 = arith.subi %42, %c3_i64_14 : i64
    llvm.store %44, %arg1 : i64, !llvm.ptr
    cf.br ^bb17
  ^bb20:  // pred: ^bb21
    %c99_i256 = arith.constant 99 : i256
    %45 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c99_i256, %45 : i256, !llvm.ptr
    %46 = llvm.getelementptr %45[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %46, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb27
  ^bb21:  // pred: ^bb23
    %c1024_i64_16 = arith.constant 1024 : i64
    %47 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_17 = arith.constant 1 : i64
    %48 = arith.addi %47, %c1_i64_17 : i64
    llvm.store %48, %arg3 : i64, !llvm.ptr
    %49 = arith.cmpi ult, %c1024_i64_16, %48 : i64
    %c92_i8_18 = arith.constant 92 : i8
    cf.cond_br %49, ^bb1(%c92_i8_18 : i8), ^bb20
  ^bb22:  // pred: ^bb16
    %50 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_19 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %51 = arith.cmpi uge, %50, %c3_i64_19 : i64
    %c80_i8_20 = arith.constant 80 : i8
    cf.cond_br %51, ^bb23, ^bb1(%c80_i8_20 : i8)
  ^bb23:  // pred: ^bb22
    %52 = arith.subi %50, %c3_i64_19 : i64
    llvm.store %52, %arg1 : i64, !llvm.ptr
    cf.br ^bb21
  ^bb24:  // pred: ^bb26
    %53 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %54 = llvm.getelementptr %53[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %55 = llvm.load %54 : !llvm.ptr -> i256
    llvm.store %54, %0 : !llvm.ptr, !llvm.ptr
    %56 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %57 = llvm.getelementptr %56[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %58 = llvm.load %57 : !llvm.ptr -> i256
    llvm.store %57, %0 : !llvm.ptr, !llvm.ptr
    %c32_i64_21 = arith.constant 32 : i64
    %c0_i64_22 = arith.constant 0 : i64
    %59 = arith.cmpi ne, %c32_i64_21, %c0_i64_22 : i64
    cf.cond_br %59, ^bb38, ^bb25
  ^bb25:  // 2 preds: ^bb24, ^bb42
    %60 = arith.trunci %55 : i256 to i64
    %61 = call @dora_fn_memory_ptr(%arg0) : (!llvm.ptr) -> !llvm.ptr
    %62 = llvm.getelementptr %61[%60] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %63 = llvm.intr.bswap(%58)  : (i256) -> i256
    llvm.store %63, %62 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb29
  ^bb26:  // pred: ^bb28
    %c1024_i64_23 = arith.constant 1024 : i64
    %64 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-2_i64_24 = arith.constant -2 : i64
    %65 = arith.addi %64, %c-2_i64_24 : i64
    llvm.store %65, %arg3 : i64, !llvm.ptr
    %c2_i64_25 = arith.constant 2 : i64
    %66 = arith.cmpi ult, %64, %c2_i64_25 : i64
    %c91_i8_26 = arith.constant 91 : i8
    cf.cond_br %66, ^bb1(%c91_i8_26 : i8), ^bb24
  ^bb27:  // pred: ^bb20
    %67 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_27 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %68 = arith.cmpi uge, %67, %c3_i64_27 : i64
    %c80_i8_28 = arith.constant 80 : i8
    cf.cond_br %68, ^bb28, ^bb1(%c80_i8_28 : i8)
  ^bb28:  // pred: ^bb27
    %69 = arith.subi %67, %c3_i64_27 : i64
    llvm.store %69, %arg1 : i64, !llvm.ptr
    cf.br ^bb26
  ^bb29:  // pred: ^bb25
    %c0_i64_29 = arith.constant 0 : i64
    %c2_i8 = arith.constant 2 : i8
    %70 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_29, %c0_i64_29, %70, %c2_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c2_i8 : i8
  ^bb30:  // pred: ^bb11
    %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256
    %71 = arith.cmpi sgt, %22, %c18446744073709551615_i256 : i256
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %71, ^bb1(%c84_i8 : i8), ^bb31
  ^bb31:  // pred: ^bb30
    %72 = arith.trunci %22 : i256 to i64
    %c0_i64_30 = arith.constant 0 : i64
    %73 = arith.cmpi slt, %72, %c0_i64_30 : i64
    %c84_i8_31 = arith.constant 84 : i8
    cf.cond_br %73, ^bb1(%c84_i8_31 : i8), ^bb32
  ^bb32:  // pred: ^bb31
    %74 = arith.addi %72, %c32_i64 : i64
    %c0_i64_32 = arith.constant 0 : i64
    %75 = arith.cmpi slt, %74, %c0_i64_32 : i64
    %c84_i8_33 = arith.constant 84 : i8
    cf.cond_br %75, ^bb1(%c84_i8_33 : i8), ^bb33
  ^bb33:  // pred: ^bb32
    %c31_i64 = arith.constant 31 : i64
    %c32_i64_34 = arith.constant 32 : i64
    %76 = arith.addi %74, %c31_i64 : i64
    %77 = arith.divui %76, %c32_i64_34 : i64
    %c32_i64_35 = arith.constant 32 : i64
    %78 = arith.muli %77, %c32_i64_35 : i64
    %79 = call @dora_fn_memory_size(%arg0) : (!llvm.ptr) -> i64
    %c31_i64_36 = arith.constant 31 : i64
    %c32_i64_37 = arith.constant 32 : i64
    %80 = arith.addi %79, %c31_i64_36 : i64
    %81 = arith.divui %80, %c32_i64_37 : i64
    %82 = arith.muli %81, %c32_i64_35 : i64
    %83 = arith.cmpi ult, %82, %78 : i64
    cf.cond_br %83, ^bb35, ^bb34
  ^bb34:  // 2 preds: ^bb33, ^bb37
    cf.br ^bb12
  ^bb35:  // pred: ^bb33
    %c3_i64_38 = arith.constant 3 : i64
    %c512_i64 = arith.constant 512 : i64
    %84 = arith.muli %81, %81 : i64
    %85 = arith.divui %84, %c512_i64 : i64
    %86 = arith.muli %81, %c3_i64_38 : i64
    %87 = arith.addi %85, %86 : i64
    %c3_i64_39 = arith.constant 3 : i64
    %c512_i64_40 = arith.constant 512 : i64
    %88 = arith.muli %77, %77 : i64
    %89 = arith.divui %88, %c512_i64_40 : i64
    %90 = arith.muli %77, %c3_i64_39 : i64
    %91 = arith.addi %89, %90 : i64
    %92 = arith.subi %91, %87 : i64
    %93 = llvm.load %arg1 : !llvm.ptr -> i64
    %94 = arith.cmpi ult, %93, %92 : i64
    scf.if %94 {
    } else {
      %127 = arith.subi %93, %92 : i64
      llvm.store %127, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_41 = arith.constant 80 : i8
    cf.cond_br %94, ^bb1(%c80_i8_41 : i8), ^bb36
  ^bb36:  // pred: ^bb35
    %95 = call @dora_fn_extend_memory(%arg0, %78) : (!llvm.ptr, i64) -> !llvm.ptr
    %96 = llvm.getelementptr %95[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %97 = llvm.load %96 : !llvm.ptr -> i8
    %c0_i8 = arith.constant 0 : i8
    %98 = arith.cmpi ne, %97, %c0_i8 : i8
    cf.cond_br %98, ^bb1(%97 : i8), ^bb37
  ^bb37:  // pred: ^bb36
    cf.br ^bb34
  ^bb38:  // pred: ^bb24
    %c18446744073709551615_i256_42 = arith.constant 18446744073709551615 : i256
    %99 = arith.cmpi sgt, %55, %c18446744073709551615_i256_42 : i256
    %c84_i8_43 = arith.constant 84 : i8
    cf.cond_br %99, ^bb1(%c84_i8_43 : i8), ^bb39
  ^bb39:  // pred: ^bb38
    %100 = arith.trunci %55 : i256 to i64
    %c0_i64_44 = arith.constant 0 : i64
    %101 = arith.cmpi slt, %100, %c0_i64_44 : i64
    %c84_i8_45 = arith.constant 84 : i8
    cf.cond_br %101, ^bb1(%c84_i8_45 : i8), ^bb40
  ^bb40:  // pred: ^bb39
    %102 = arith.addi %100, %c32_i64_21 : i64
    %c0_i64_46 = arith.constant 0 : i64
    %103 = arith.cmpi slt, %102, %c0_i64_46 : i64
    %c84_i8_47 = arith.constant 84 : i8
    cf.cond_br %103, ^bb1(%c84_i8_47 : i8), ^bb41
  ^bb41:  // pred: ^bb40
    %c31_i64_48 = arith.constant 31 : i64
    %c32_i64_49 = arith.constant 32 : i64
    %104 = arith.addi %102, %c31_i64_48 : i64
    %105 = arith.divui %104, %c32_i64_49 : i64
    %c32_i64_50 = arith.constant 32 : i64
    %106 = arith.muli %105, %c32_i64_50 : i64
    %107 = call @dora_fn_memory_size(%arg0) : (!llvm.ptr) -> i64
    %c31_i64_51 = arith.constant 31 : i64
    %c32_i64_52 = arith.constant 32 : i64
    %108 = arith.addi %107, %c31_i64_51 : i64
    %109 = arith.divui %108, %c32_i64_52 : i64
    %110 = arith.muli %109, %c32_i64_50 : i64
    %111 = arith.cmpi ult, %110, %106 : i64
    cf.cond_br %111, ^bb43, ^bb42
  ^bb42:  // 2 preds: ^bb41, ^bb45
    cf.br ^bb25
  ^bb43:  // pred: ^bb41
    %c3_i64_53 = arith.constant 3 : i64
    %c512_i64_54 = arith.constant 512 : i64
    %112 = arith.muli %109, %109 : i64
    %113 = arith.divui %112, %c512_i64_54 : i64
    %114 = arith.muli %109, %c3_i64_53 : i64
    %115 = arith.addi %113, %114 : i64
    %c3_i64_55 = arith.constant 3 : i64
    %c512_i64_56 = arith.constant 512 : i64
    %116 = arith.muli %105, %105 : i64
    %117 = arith.divui %116, %c512_i64_56 : i64
    %118 = arith.muli %105, %c3_i64_55 : i64
    %119 = arith.addi %117, %118 : i64
    %120 = arith.subi %119, %115 : i64
    %121 = llvm.load %arg1 : !llvm.ptr -> i64
    %122 = arith.cmpi ult, %121, %120 : i64
    scf.if %122 {
    } else {
      %127 = arith.subi %121, %120 : i64
      llvm.store %127, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_57 = arith.constant 80 : i8
    cf.cond_br %122, ^bb1(%c80_i8_57 : i8), ^bb44
  ^bb44:  // pred: ^bb43
    %123 = call @dora_fn_extend_memory(%arg0, %106) : (!llvm.ptr, i64) -> !llvm.ptr
    %124 = llvm.getelementptr %123[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %125 = llvm.load %124 : !llvm.ptr -> i8
    %c0_i8_58 = arith.constant 0 : i8
    %126 = arith.cmpi ne, %125, %c0_i8_58 : i8
    cf.cond_br %126, ^bb1(%125 : i8), ^bb45
  ^bb45:  // pred: ^bb44
    cf.br ^bb42
  }
}
