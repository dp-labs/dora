---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  func.func private @dora_fn_nop()
  func.func private @dora_fn_tracing(!llvm.ptr, i8, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_fn_is_static(!llvm.ptr) -> i8
  func.func private @dora_fn_exp(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_chainid(!llvm.ptr) -> i64
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gaslimit_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_memory_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_memory_size(!llvm.ptr) -> i64
  func.func private @dora_fn_code_copy(!llvm.ptr, !llvm.ptr, i64, i64)
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_call(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_returndata_copy(!llvm.ptr, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_tload(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_tstore(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func public @main(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr) -> i8 attributes {llvm.emit_c_interface} {
    cf.br ^bb5
  ^bb1(%0: i8):  // 30 preds: ^bb2, ^bb4, ^bb5, ^bb8, ^bb9, ^bb13, ^bb14, ^bb17, ^bb18, ^bb21, ^bb22, ^bb25, ^bb26, ^bb28, ^bb29, ^bb30, ^bb33, ^bb34, ^bb37, ^bb38, ^bb39, ^bb42, ^bb43, ^bb45, ^bb46, ^bb47, ^bb48, ^bb49, ^bb52, ^bb53
    %c0_i64 = arith.constant 0 : i64
    %1 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64, %c0_i64, %1, %0) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %0 : i8
  ^bb2(%2: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %2 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3:  // pred: ^bb4
    %c255_i256 = arith.constant 255 : i256
    %3 = llvm.load %arg3 : !llvm.ptr -> i64
    %4 = llvm.getelementptr %arg2[%3] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64 = arith.constant 1 : i64
    %5 = arith.addi %3, %c1_i64 : i64
    llvm.store %5, %arg3 : i64, !llvm.ptr
    llvm.store %c255_i256, %4 : i256, !llvm.ptr
    cf.br ^bb9
  ^bb4:  // pred: ^bb6
    %c1024_i64 = arith.constant 1024 : i64
    %6 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_0 = arith.constant 1 : i64
    %7 = arith.addi %6, %c1_i64_0 : i64
    %8 = arith.cmpi ult, %c1024_i64, %7 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %8, ^bb1(%c92_i8 : i8), ^bb3
  ^bb5:  // pred: ^bb0
    %9 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %10 = arith.cmpi uge, %9, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %10, ^bb6, ^bb1(%c80_i8 : i8)
  ^bb6:  // pred: ^bb5
    %11 = arith.subi %9, %c3_i64 : i64
    llvm.store %11, %arg1 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb7:  // pred: ^bb8
    %c32_i256 = arith.constant 32 : i256
    %12 = llvm.load %arg3 : !llvm.ptr -> i64
    %13 = llvm.getelementptr %arg2[%12] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_1 = arith.constant 1 : i64
    %14 = arith.addi %12, %c1_i64_1 : i64
    llvm.store %14, %arg3 : i64, !llvm.ptr
    llvm.store %c32_i256, %13 : i256, !llvm.ptr
    cf.br ^bb14
  ^bb8:  // pred: ^bb10
    %c1024_i64_2 = arith.constant 1024 : i64
    %15 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_3 = arith.constant 1 : i64
    %16 = arith.addi %15, %c1_i64_3 : i64
    %17 = arith.cmpi ult, %c1024_i64_2, %16 : i64
    %c92_i8_4 = arith.constant 92 : i8
    cf.cond_br %17, ^bb1(%c92_i8_4 : i8), ^bb7
  ^bb9:  // pred: ^bb3
    %18 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_5 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %19 = arith.cmpi uge, %18, %c3_i64_5 : i64
    %c80_i8_6 = arith.constant 80 : i8
    cf.cond_br %19, ^bb10, ^bb1(%c80_i8_6 : i8)
  ^bb10:  // pred: ^bb9
    %20 = arith.subi %18, %c3_i64_5 : i64
    llvm.store %20, %arg1 : i64, !llvm.ptr
    cf.br ^bb8
  ^bb11:  // pred: ^bb13
    %21 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_7 = arith.constant 1 : i64
    %22 = arith.subi %21, %c1_i64_7 : i64
    %23 = llvm.getelementptr %arg2[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %22, %arg3 : i64, !llvm.ptr
    %24 = llvm.load %23 : !llvm.ptr -> i256
    %25 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_8 = arith.constant 1 : i64
    %26 = arith.subi %25, %c1_i64_8 : i64
    %27 = llvm.getelementptr %arg2[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %26, %arg3 : i64, !llvm.ptr
    %28 = llvm.load %27 : !llvm.ptr -> i256
    %c32_i64 = arith.constant 32 : i64
    %c0_i64_9 = arith.constant 0 : i64
    %29 = arith.cmpi ne, %c32_i64, %c0_i64_9 : i64
    cf.cond_br %29, ^bb37, ^bb12
  ^bb12:  // 2 preds: ^bb11, ^bb41
    %30 = arith.trunci %24 : i256 to i64
    %31 = call @dora_fn_memory_ptr(%arg0) : (!llvm.ptr) -> !llvm.ptr
    %32 = llvm.getelementptr %31[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %33 = llvm.intr.bswap(%28)  : (i256) -> i256
    llvm.store %33, %32 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb18
  ^bb13:  // pred: ^bb15
    %c1024_i64_10 = arith.constant 1024 : i64
    %34 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-2_i64 = arith.constant -2 : i64
    %35 = arith.addi %34, %c-2_i64 : i64
    %c2_i64 = arith.constant 2 : i64
    %36 = arith.cmpi ult, %34, %c2_i64 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %36, ^bb1(%c91_i8 : i8), ^bb11
  ^bb14:  // pred: ^bb7
    %37 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_11 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %38 = arith.cmpi uge, %37, %c3_i64_11 : i64
    %c80_i8_12 = arith.constant 80 : i8
    cf.cond_br %38, ^bb15, ^bb1(%c80_i8_12 : i8)
  ^bb15:  // pred: ^bb14
    %39 = arith.subi %37, %c3_i64_11 : i64
    llvm.store %39, %arg1 : i64, !llvm.ptr
    cf.br ^bb13
  ^bb16:  // pred: ^bb17
    %c32_i256_13 = arith.constant 32 : i256
    %40 = llvm.load %arg3 : !llvm.ptr -> i64
    %41 = llvm.getelementptr %arg2[%40] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_14 = arith.constant 1 : i64
    %42 = arith.addi %40, %c1_i64_14 : i64
    llvm.store %42, %arg3 : i64, !llvm.ptr
    llvm.store %c32_i256_13, %41 : i256, !llvm.ptr
    cf.br ^bb22
  ^bb17:  // pred: ^bb19
    %c1024_i64_15 = arith.constant 1024 : i64
    %43 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_16 = arith.constant 1 : i64
    %44 = arith.addi %43, %c1_i64_16 : i64
    %45 = arith.cmpi ult, %c1024_i64_15, %44 : i64
    %c92_i8_17 = arith.constant 92 : i8
    cf.cond_br %45, ^bb1(%c92_i8_17 : i8), ^bb16
  ^bb18:  // pred: ^bb12
    %46 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_18 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %47 = arith.cmpi uge, %46, %c3_i64_18 : i64
    %c80_i8_19 = arith.constant 80 : i8
    cf.cond_br %47, ^bb19, ^bb1(%c80_i8_19 : i8)
  ^bb19:  // pred: ^bb18
    %48 = arith.subi %46, %c3_i64_18 : i64
    llvm.store %48, %arg1 : i64, !llvm.ptr
    cf.br ^bb17
  ^bb20:  // pred: ^bb21
    %c32_i256_20 = arith.constant 32 : i256
    %49 = llvm.load %arg3 : !llvm.ptr -> i64
    %50 = llvm.getelementptr %arg2[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_21 = arith.constant 1 : i64
    %51 = arith.addi %49, %c1_i64_21 : i64
    llvm.store %51, %arg3 : i64, !llvm.ptr
    llvm.store %c32_i256_20, %50 : i256, !llvm.ptr
    cf.br ^bb26
  ^bb21:  // pred: ^bb23
    %c1024_i64_22 = arith.constant 1024 : i64
    %52 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_23 = arith.constant 1 : i64
    %53 = arith.addi %52, %c1_i64_23 : i64
    %54 = arith.cmpi ult, %c1024_i64_22, %53 : i64
    %c92_i8_24 = arith.constant 92 : i8
    cf.cond_br %54, ^bb1(%c92_i8_24 : i8), ^bb20
  ^bb22:  // pred: ^bb16
    %55 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_25 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %56 = arith.cmpi uge, %55, %c3_i64_25 : i64
    %c80_i8_26 = arith.constant 80 : i8
    cf.cond_br %56, ^bb23, ^bb1(%c80_i8_26 : i8)
  ^bb23:  // pred: ^bb22
    %57 = arith.subi %55, %c3_i64_25 : i64
    llvm.store %57, %arg1 : i64, !llvm.ptr
    cf.br ^bb21
  ^bb24:  // pred: ^bb25
    %c0_i256 = arith.constant 0 : i256
    %58 = llvm.load %arg3 : !llvm.ptr -> i64
    %59 = llvm.getelementptr %arg2[%58] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_27 = arith.constant 1 : i64
    %60 = arith.addi %58, %c1_i64_27 : i64
    llvm.store %60, %arg3 : i64, !llvm.ptr
    llvm.store %c0_i256, %59 : i256, !llvm.ptr
    cf.br ^bb34
  ^bb25:  // pred: ^bb27
    %c1024_i64_28 = arith.constant 1024 : i64
    %61 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_29 = arith.constant 1 : i64
    %62 = arith.addi %61, %c1_i64_29 : i64
    %63 = arith.cmpi ult, %c1024_i64_28, %62 : i64
    %c92_i8_30 = arith.constant 92 : i8
    cf.cond_br %63, ^bb1(%c92_i8_30 : i8), ^bb24
  ^bb26:  // pred: ^bb20
    %64 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_31 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %65 = arith.cmpi uge, %64, %c3_i64_31 : i64
    %c80_i8_32 = arith.constant 80 : i8
    cf.cond_br %65, ^bb27, ^bb1(%c80_i8_32 : i8)
  ^bb27:  // pred: ^bb26
    %66 = arith.subi %64, %c3_i64_31 : i64
    llvm.store %66, %arg1 : i64, !llvm.ptr
    cf.br ^bb25
  ^bb28:  // pred: ^bb33
    %67 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_33 = arith.constant 1 : i64
    %68 = arith.subi %67, %c1_i64_33 : i64
    %69 = llvm.getelementptr %arg2[%68] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %68, %arg3 : i64, !llvm.ptr
    %70 = llvm.load %69 : !llvm.ptr -> i256
    %71 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_34 = arith.constant 1 : i64
    %72 = arith.subi %71, %c1_i64_34 : i64
    %73 = llvm.getelementptr %arg2[%72] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %72, %arg3 : i64, !llvm.ptr
    %74 = llvm.load %73 : !llvm.ptr -> i256
    %75 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_35 = arith.constant 1 : i64
    %76 = arith.subi %75, %c1_i64_35 : i64
    %77 = llvm.getelementptr %arg2[%76] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %76, %arg3 : i64, !llvm.ptr
    %78 = llvm.load %77 : !llvm.ptr -> i256
    %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256
    %79 = arith.cmpi sgt, %78, %c18446744073709551615_i256 : i256
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %79, ^bb1(%c84_i8 : i8), ^bb29
  ^bb29:  // pred: ^bb28
    %80 = arith.trunci %78 : i256 to i64
    %c0_i64_36 = arith.constant 0 : i64
    %81 = arith.cmpi slt, %80, %c0_i64_36 : i64
    %c84_i8_37 = arith.constant 84 : i8
    cf.cond_br %81, ^bb1(%c84_i8_37 : i8), ^bb30
  ^bb30:  // pred: ^bb29
    %c31_i64 = arith.constant 31 : i64
    %c32_i64_38 = arith.constant 32 : i64
    %82 = arith.addi %80, %c31_i64 : i64
    %83 = arith.divui %82, %c32_i64_38 : i64
    %c3_i64_39 = arith.constant 3 : i64
    %84 = arith.muli %83, %c3_i64_39 : i64
    %85 = llvm.load %arg1 : !llvm.ptr -> i64
    %86 = arith.cmpi ult, %85, %84 : i64
    scf.if %86 {
    } else {
      %158 = arith.subi %85, %84 : i64
      llvm.store %158, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_40 = arith.constant 80 : i8
    cf.cond_br %86, ^bb1(%c80_i8_40 : i8), ^bb31
  ^bb31:  // pred: ^bb30
    %87 = arith.maxui %70, %74 : i256
    %c0_i64_41 = arith.constant 0 : i64
    %88 = arith.cmpi ne, %80, %c0_i64_41 : i64
    cf.cond_br %88, ^bb45, ^bb32
  ^bb32:  // 2 preds: ^bb31, ^bb51
    %89 = call @dora_fn_memory_ptr(%arg0) : (!llvm.ptr) -> !llvm.ptr
    %90 = llvm.getelementptr %89[%87] : (!llvm.ptr, i256) -> !llvm.ptr, i8
    %91 = llvm.getelementptr %89[%70] : (!llvm.ptr, i256) -> !llvm.ptr, i8
    "llvm.intr.memmove"(%91, %90, %80) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> ()
    cf.br ^bb36
  ^bb33:  // pred: ^bb35
    %c1024_i64_42 = arith.constant 1024 : i64
    %92 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-3_i64 = arith.constant -3 : i64
    %93 = arith.addi %92, %c-3_i64 : i64
    %c3_i64_43 = arith.constant 3 : i64
    %94 = arith.cmpi ult, %92, %c3_i64_43 : i64
    %c91_i8_44 = arith.constant 91 : i8
    cf.cond_br %94, ^bb1(%c91_i8_44 : i8), ^bb28
  ^bb34:  // pred: ^bb24
    %95 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_45 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %96 = arith.cmpi uge, %95, %c3_i64_45 : i64
    %c80_i8_46 = arith.constant 80 : i8
    cf.cond_br %96, ^bb35, ^bb1(%c80_i8_46 : i8)
  ^bb35:  // pred: ^bb34
    %97 = arith.subi %95, %c3_i64_45 : i64
    llvm.store %97, %arg1 : i64, !llvm.ptr
    cf.br ^bb33
  ^bb36:  // pred: ^bb32
    %c0_i64_47 = arith.constant 0 : i64
    %c1_i8 = arith.constant 1 : i8
    %98 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_47, %c0_i64_47, %98, %c1_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c1_i8 : i8
  ^bb37:  // pred: ^bb11
    %c18446744073709551615_i256_48 = arith.constant 18446744073709551615 : i256
    %99 = arith.cmpi sgt, %24, %c18446744073709551615_i256_48 : i256
    %c84_i8_49 = arith.constant 84 : i8
    cf.cond_br %99, ^bb1(%c84_i8_49 : i8), ^bb38
  ^bb38:  // pred: ^bb37
    %100 = arith.trunci %24 : i256 to i64
    %c0_i64_50 = arith.constant 0 : i64
    %101 = arith.cmpi slt, %100, %c0_i64_50 : i64
    %c84_i8_51 = arith.constant 84 : i8
    cf.cond_br %101, ^bb1(%c84_i8_51 : i8), ^bb39
  ^bb39:  // pred: ^bb38
    %102 = arith.addi %100, %c32_i64 : i64
    %c0_i64_52 = arith.constant 0 : i64
    %103 = arith.cmpi slt, %102, %c0_i64_52 : i64
    %c84_i8_53 = arith.constant 84 : i8
    cf.cond_br %103, ^bb1(%c84_i8_53 : i8), ^bb40
  ^bb40:  // pred: ^bb39
    %c31_i64_54 = arith.constant 31 : i64
    %c32_i64_55 = arith.constant 32 : i64
    %104 = arith.addi %102, %c31_i64_54 : i64
    %105 = arith.divui %104, %c32_i64_55 : i64
    %c32_i64_56 = arith.constant 32 : i64
    %106 = arith.muli %105, %c32_i64_56 : i64
    %107 = call @dora_fn_memory_size(%arg0) : (!llvm.ptr) -> i64
    %c31_i64_57 = arith.constant 31 : i64
    %c32_i64_58 = arith.constant 32 : i64
    %108 = arith.addi %107, %c31_i64_57 : i64
    %109 = arith.divui %108, %c32_i64_58 : i64
    %110 = arith.muli %109, %c32_i64_56 : i64
    %111 = arith.cmpi ult, %110, %106 : i64
    cf.cond_br %111, ^bb42, ^bb41
  ^bb41:  // 2 preds: ^bb40, ^bb44
    cf.br ^bb12
  ^bb42:  // pred: ^bb40
    %c3_i64_59 = arith.constant 3 : i64
    %c512_i64 = arith.constant 512 : i64
    %112 = arith.muli %109, %109 : i64
    %113 = arith.divui %112, %c512_i64 : i64
    %114 = arith.muli %109, %c3_i64_59 : i64
    %115 = arith.addi %113, %114 : i64
    %c3_i64_60 = arith.constant 3 : i64
    %c512_i64_61 = arith.constant 512 : i64
    %116 = arith.muli %105, %105 : i64
    %117 = arith.divui %116, %c512_i64_61 : i64
    %118 = arith.muli %105, %c3_i64_60 : i64
    %119 = arith.addi %117, %118 : i64
    %120 = arith.subi %119, %115 : i64
    %121 = llvm.load %arg1 : !llvm.ptr -> i64
    %122 = arith.cmpi ult, %121, %120 : i64
    scf.if %122 {
    } else {
      %158 = arith.subi %121, %120 : i64
      llvm.store %158, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_62 = arith.constant 80 : i8
    cf.cond_br %122, ^bb1(%c80_i8_62 : i8), ^bb43
  ^bb43:  // pred: ^bb42
    %123 = call @dora_fn_extend_memory(%arg0, %106) : (!llvm.ptr, i64) -> !llvm.ptr
    %124 = llvm.getelementptr %123[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %125 = llvm.load %124 : !llvm.ptr -> i8
    %c0_i8 = arith.constant 0 : i8
    %126 = arith.cmpi ne, %125, %c0_i8 : i8
    cf.cond_br %126, ^bb1(%125 : i8), ^bb44
  ^bb44:  // pred: ^bb43
    cf.br ^bb41
  ^bb45:  // pred: ^bb31
    %c18446744073709551615_i256_63 = arith.constant 18446744073709551615 : i256
    %127 = arith.cmpi sgt, %70, %c18446744073709551615_i256_63 : i256
    %c84_i8_64 = arith.constant 84 : i8
    cf.cond_br %127, ^bb1(%c84_i8_64 : i8), ^bb46
  ^bb46:  // pred: ^bb45
    %128 = arith.trunci %70 : i256 to i64
    %c0_i64_65 = arith.constant 0 : i64
    %129 = arith.cmpi slt, %128, %c0_i64_65 : i64
    %c84_i8_66 = arith.constant 84 : i8
    cf.cond_br %129, ^bb1(%c84_i8_66 : i8), ^bb47
  ^bb47:  // pred: ^bb46
    %c18446744073709551615_i256_67 = arith.constant 18446744073709551615 : i256
    %130 = arith.cmpi sgt, %87, %c18446744073709551615_i256_67 : i256
    %c84_i8_68 = arith.constant 84 : i8
    cf.cond_br %130, ^bb1(%c84_i8_68 : i8), ^bb48
  ^bb48:  // pred: ^bb47
    %131 = arith.trunci %87 : i256 to i64
    %c0_i64_69 = arith.constant 0 : i64
    %132 = arith.cmpi slt, %131, %c0_i64_69 : i64
    %c84_i8_70 = arith.constant 84 : i8
    cf.cond_br %132, ^bb1(%c84_i8_70 : i8), ^bb49
  ^bb49:  // pred: ^bb48
    %133 = arith.addi %128, %80 : i64
    %c0_i64_71 = arith.constant 0 : i64
    %134 = arith.cmpi slt, %133, %c0_i64_71 : i64
    %c84_i8_72 = arith.constant 84 : i8
    cf.cond_br %134, ^bb1(%c84_i8_72 : i8), ^bb50
  ^bb50:  // pred: ^bb49
    %c31_i64_73 = arith.constant 31 : i64
    %c32_i64_74 = arith.constant 32 : i64
    %135 = arith.addi %133, %c31_i64_73 : i64
    %136 = arith.divui %135, %c32_i64_74 : i64
    %c32_i64_75 = arith.constant 32 : i64
    %137 = arith.muli %136, %c32_i64_75 : i64
    %138 = call @dora_fn_memory_size(%arg0) : (!llvm.ptr) -> i64
    %c31_i64_76 = arith.constant 31 : i64
    %c32_i64_77 = arith.constant 32 : i64
    %139 = arith.addi %138, %c31_i64_76 : i64
    %140 = arith.divui %139, %c32_i64_77 : i64
    %141 = arith.muli %140, %c32_i64_75 : i64
    %142 = arith.cmpi ult, %141, %137 : i64
    cf.cond_br %142, ^bb52, ^bb51
  ^bb51:  // 2 preds: ^bb50, ^bb54
    cf.br ^bb32
  ^bb52:  // pred: ^bb50
    %c3_i64_78 = arith.constant 3 : i64
    %c512_i64_79 = arith.constant 512 : i64
    %143 = arith.muli %140, %140 : i64
    %144 = arith.divui %143, %c512_i64_79 : i64
    %145 = arith.muli %140, %c3_i64_78 : i64
    %146 = arith.addi %144, %145 : i64
    %c3_i64_80 = arith.constant 3 : i64
    %c512_i64_81 = arith.constant 512 : i64
    %147 = arith.muli %136, %136 : i64
    %148 = arith.divui %147, %c512_i64_81 : i64
    %149 = arith.muli %136, %c3_i64_80 : i64
    %150 = arith.addi %148, %149 : i64
    %151 = arith.subi %150, %146 : i64
    %152 = llvm.load %arg1 : !llvm.ptr -> i64
    %153 = arith.cmpi ult, %152, %151 : i64
    scf.if %153 {
    } else {
      %158 = arith.subi %152, %151 : i64
      llvm.store %158, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_82 = arith.constant 80 : i8
    cf.cond_br %153, ^bb1(%c80_i8_82 : i8), ^bb53
  ^bb53:  // pred: ^bb52
    %154 = call @dora_fn_extend_memory(%arg0, %137) : (!llvm.ptr, i64) -> !llvm.ptr
    %155 = llvm.getelementptr %154[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %156 = llvm.load %155 : !llvm.ptr -> i8
    %c0_i8_83 = arith.constant 0 : i8
    %157 = arith.cmpi ne, %156, %c0_i8_83 : i8
    cf.cond_br %157, ^bb1(%156 : i8), ^bb54
  ^bb54:  // pred: ^bb53
    cf.br ^bb51
  }
}
