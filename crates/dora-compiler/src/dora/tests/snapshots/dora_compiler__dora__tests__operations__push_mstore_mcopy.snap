---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  llvm.mlir.global internal @dora_global_stack_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_stack_length() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_memory_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_memory_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_calldata_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_calldata_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_gas_counter() {addr_space = 0 : i32} : i64
  llvm.mlir.global external @dora_global_ctx_is_static() {addr_space = 0 : i32} : !llvm.ptr
  func.func private @dora_fn_nop()
  func.func private @dora_fn_tracing(!llvm.ptr, i8, i64, !llvm.ptr, i64)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_chainid(!llvm.ptr) -> i64
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gaslimit_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_code_copy(!llvm.ptr, i64, i64, i64)
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_call(!llvm.ptr, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, i64, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_returndata_copy(!llvm.ptr, i64, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_tload(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_tstore(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func public @main(%arg0: !llvm.ptr, %arg1: i64) -> i8 attributes {llvm.emit_c_interface} {
    %c1024_i256 = arith.constant 1024 : i256
    %0 = llvm.alloca %c1024_i256 x i256 : (i256) -> !llvm.ptr
    %1 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    llvm.store %0, %1 : !llvm.ptr, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %2 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    llvm.store %c0_i64, %2 : i64, !llvm.ptr
    %c0_i64_0 = arith.constant 0 : i64
    %3 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %c0_i64_0, %3 : i64, !llvm.ptr
    %4 = call @dora_fn_calldata(%arg0) : (!llvm.ptr) -> !llvm.ptr
    %5 = llvm.mlir.addressof @dora_global_calldata_ptr : !llvm.ptr
    llvm.store %4, %5 : !llvm.ptr, !llvm.ptr
    %6 = call @dora_fn_calldata_size(%arg0) : (!llvm.ptr) -> i64
    %7 = llvm.mlir.addressof @dora_global_calldata_size : !llvm.ptr
    llvm.store %6, %7 : i64, !llvm.ptr
    %8 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    llvm.store %arg1, %8 : i64, !llvm.ptr
    cf.br ^bb5
  ^bb1(%9: i8):  // 26 preds: ^bb2, ^bb4, ^bb5, ^bb8, ^bb9, ^bb11, ^bb14, ^bb15, ^bb18, ^bb19, ^bb22, ^bb23, ^bb26, ^bb27, ^bb29, ^bb30, ^bb31, ^bb32, ^bb35, ^bb36, ^bb39, ^bb42, ^bb43, ^bb45, ^bb48, ^bb49
    %c0_i64_1 = arith.constant 0 : i64
    %10 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %11 = llvm.load %10 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_1, %c0_i64_1, %11, %9) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %9 : i8
  ^bb2(%12: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %12 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3:  // pred: ^bb4
    %c255_i256 = arith.constant 255 : i256
    %13 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %14 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    llvm.store %c255_i256, %14 : i256, !llvm.ptr
    %15 = llvm.getelementptr %14[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %15, %13 : !llvm.ptr, !llvm.ptr
    cf.br ^bb9
  ^bb4:  // pred: ^bb6
    %16 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64 = arith.constant 1024 : i64
    %17 = llvm.load %16 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %18 = arith.addi %17, %c1_i64 : i64
    llvm.store %18, %16 : i64, !llvm.ptr
    %19 = arith.cmpi ult, %c1024_i64, %18 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %19, ^bb1(%c92_i8 : i8), ^bb3
  ^bb5:  // pred: ^bb0
    %20 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %21 = llvm.load %20 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %22 = arith.cmpi uge, %21, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %22, ^bb6, ^bb1(%c80_i8 : i8)
  ^bb6:  // pred: ^bb5
    %23 = arith.subi %21, %c3_i64 : i64
    llvm.store %23, %20 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb7:  // pred: ^bb8
    %c32_i256 = arith.constant 32 : i256
    %24 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %25 = llvm.load %24 : !llvm.ptr -> !llvm.ptr
    llvm.store %c32_i256, %25 : i256, !llvm.ptr
    %26 = llvm.getelementptr %25[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %26, %24 : !llvm.ptr, !llvm.ptr
    cf.br ^bb15
  ^bb8:  // pred: ^bb10
    %27 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_2 = arith.constant 1024 : i64
    %28 = llvm.load %27 : !llvm.ptr -> i64
    %c1_i64_3 = arith.constant 1 : i64
    %29 = arith.addi %28, %c1_i64_3 : i64
    llvm.store %29, %27 : i64, !llvm.ptr
    %30 = arith.cmpi ult, %c1024_i64_2, %29 : i64
    %c92_i8_4 = arith.constant 92 : i8
    cf.cond_br %30, ^bb1(%c92_i8_4 : i8), ^bb7
  ^bb9:  // pred: ^bb3
    %31 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %32 = llvm.load %31 : !llvm.ptr -> i64
    %c3_i64_5 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %33 = arith.cmpi uge, %32, %c3_i64_5 : i64
    %c80_i8_6 = arith.constant 80 : i8
    cf.cond_br %33, ^bb10, ^bb1(%c80_i8_6 : i8)
  ^bb10:  // pred: ^bb9
    %34 = arith.subi %32, %c3_i64_5 : i64
    llvm.store %34, %31 : i64, !llvm.ptr
    cf.br ^bb8
  ^bb11:  // pred: ^bb14
    %35 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %36 = llvm.load %35 : !llvm.ptr -> !llvm.ptr
    %37 = llvm.getelementptr %36[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %38 = llvm.load %37 : !llvm.ptr -> i256
    llvm.store %37, %35 : !llvm.ptr, !llvm.ptr
    %39 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %40 = llvm.load %39 : !llvm.ptr -> !llvm.ptr
    %41 = llvm.getelementptr %40[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %42 = llvm.load %41 : !llvm.ptr -> i256
    llvm.store %41, %39 : !llvm.ptr, !llvm.ptr
    %43 = arith.trunci %38 : i256 to i64
    %c0_i64_7 = arith.constant 0 : i64
    %44 = arith.cmpi slt, %43, %c0_i64_7 : i64
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %44, ^bb1(%c84_i8 : i8), ^bb12
  ^bb12:  // pred: ^bb11
    %c32_i64 = arith.constant 32 : i64
    %c0_i64_8 = arith.constant 0 : i64
    %45 = arith.cmpi ne, %c32_i64, %c0_i64_8 : i64
    cf.cond_br %45, ^bb39, ^bb13
  ^bb13:  // 2 preds: ^bb12, ^bb41
    %46 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    %47 = llvm.load %46 : !llvm.ptr -> !llvm.ptr
    %48 = llvm.getelementptr %47[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %49 = llvm.intr.bswap(%42)  : (i256) -> i256
    llvm.store %49, %48 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb19
  ^bb14:  // pred: ^bb16
    %50 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_9 = arith.constant 1024 : i64
    %51 = llvm.load %50 : !llvm.ptr -> i64
    %c-2_i64 = arith.constant -2 : i64
    %52 = arith.addi %51, %c-2_i64 : i64
    llvm.store %52, %50 : i64, !llvm.ptr
    %c2_i64 = arith.constant 2 : i64
    %53 = arith.cmpi ult, %51, %c2_i64 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %53, ^bb1(%c91_i8 : i8), ^bb11
  ^bb15:  // pred: ^bb7
    %54 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %55 = llvm.load %54 : !llvm.ptr -> i64
    %c3_i64_10 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %56 = arith.cmpi uge, %55, %c3_i64_10 : i64
    %c80_i8_11 = arith.constant 80 : i8
    cf.cond_br %56, ^bb16, ^bb1(%c80_i8_11 : i8)
  ^bb16:  // pred: ^bb15
    %57 = arith.subi %55, %c3_i64_10 : i64
    llvm.store %57, %54 : i64, !llvm.ptr
    cf.br ^bb14
  ^bb17:  // pred: ^bb18
    %c32_i256_12 = arith.constant 32 : i256
    %58 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %59 = llvm.load %58 : !llvm.ptr -> !llvm.ptr
    llvm.store %c32_i256_12, %59 : i256, !llvm.ptr
    %60 = llvm.getelementptr %59[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %60, %58 : !llvm.ptr, !llvm.ptr
    cf.br ^bb23
  ^bb18:  // pred: ^bb20
    %61 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_13 = arith.constant 1024 : i64
    %62 = llvm.load %61 : !llvm.ptr -> i64
    %c1_i64_14 = arith.constant 1 : i64
    %63 = arith.addi %62, %c1_i64_14 : i64
    llvm.store %63, %61 : i64, !llvm.ptr
    %64 = arith.cmpi ult, %c1024_i64_13, %63 : i64
    %c92_i8_15 = arith.constant 92 : i8
    cf.cond_br %64, ^bb1(%c92_i8_15 : i8), ^bb17
  ^bb19:  // pred: ^bb13
    %65 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %66 = llvm.load %65 : !llvm.ptr -> i64
    %c3_i64_16 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %67 = arith.cmpi uge, %66, %c3_i64_16 : i64
    %c80_i8_17 = arith.constant 80 : i8
    cf.cond_br %67, ^bb20, ^bb1(%c80_i8_17 : i8)
  ^bb20:  // pred: ^bb19
    %68 = arith.subi %66, %c3_i64_16 : i64
    llvm.store %68, %65 : i64, !llvm.ptr
    cf.br ^bb18
  ^bb21:  // pred: ^bb22
    %c32_i256_18 = arith.constant 32 : i256
    %69 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %70 = llvm.load %69 : !llvm.ptr -> !llvm.ptr
    llvm.store %c32_i256_18, %70 : i256, !llvm.ptr
    %71 = llvm.getelementptr %70[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %71, %69 : !llvm.ptr, !llvm.ptr
    cf.br ^bb27
  ^bb22:  // pred: ^bb24
    %72 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_19 = arith.constant 1024 : i64
    %73 = llvm.load %72 : !llvm.ptr -> i64
    %c1_i64_20 = arith.constant 1 : i64
    %74 = arith.addi %73, %c1_i64_20 : i64
    llvm.store %74, %72 : i64, !llvm.ptr
    %75 = arith.cmpi ult, %c1024_i64_19, %74 : i64
    %c92_i8_21 = arith.constant 92 : i8
    cf.cond_br %75, ^bb1(%c92_i8_21 : i8), ^bb21
  ^bb23:  // pred: ^bb17
    %76 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %77 = llvm.load %76 : !llvm.ptr -> i64
    %c3_i64_22 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %78 = arith.cmpi uge, %77, %c3_i64_22 : i64
    %c80_i8_23 = arith.constant 80 : i8
    cf.cond_br %78, ^bb24, ^bb1(%c80_i8_23 : i8)
  ^bb24:  // pred: ^bb23
    %79 = arith.subi %77, %c3_i64_22 : i64
    llvm.store %79, %76 : i64, !llvm.ptr
    cf.br ^bb22
  ^bb25:  // pred: ^bb26
    %c0_i256 = arith.constant 0 : i256
    %80 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %81 = llvm.load %80 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256, %81 : i256, !llvm.ptr
    %82 = llvm.getelementptr %81[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %82, %80 : !llvm.ptr, !llvm.ptr
    cf.br ^bb36
  ^bb26:  // pred: ^bb28
    %83 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_24 = arith.constant 1024 : i64
    %84 = llvm.load %83 : !llvm.ptr -> i64
    %c1_i64_25 = arith.constant 1 : i64
    %85 = arith.addi %84, %c1_i64_25 : i64
    llvm.store %85, %83 : i64, !llvm.ptr
    %86 = arith.cmpi ult, %c1024_i64_24, %85 : i64
    %c92_i8_26 = arith.constant 92 : i8
    cf.cond_br %86, ^bb1(%c92_i8_26 : i8), ^bb25
  ^bb27:  // pred: ^bb21
    %87 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %88 = llvm.load %87 : !llvm.ptr -> i64
    %c3_i64_27 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %89 = arith.cmpi uge, %88, %c3_i64_27 : i64
    %c80_i8_28 = arith.constant 80 : i8
    cf.cond_br %89, ^bb28, ^bb1(%c80_i8_28 : i8)
  ^bb28:  // pred: ^bb27
    %90 = arith.subi %88, %c3_i64_27 : i64
    llvm.store %90, %87 : i64, !llvm.ptr
    cf.br ^bb26
  ^bb29:  // pred: ^bb35
    %91 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %92 = llvm.load %91 : !llvm.ptr -> !llvm.ptr
    %93 = llvm.getelementptr %92[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %94 = llvm.load %93 : !llvm.ptr -> i256
    llvm.store %93, %91 : !llvm.ptr, !llvm.ptr
    %95 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %96 = llvm.load %95 : !llvm.ptr -> !llvm.ptr
    %97 = llvm.getelementptr %96[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %98 = llvm.load %97 : !llvm.ptr -> i256
    llvm.store %97, %95 : !llvm.ptr, !llvm.ptr
    %99 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %100 = llvm.load %99 : !llvm.ptr -> !llvm.ptr
    %101 = llvm.getelementptr %100[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %102 = llvm.load %101 : !llvm.ptr -> i256
    llvm.store %101, %99 : !llvm.ptr, !llvm.ptr
    %103 = arith.trunci %102 : i256 to i64
    %c0_i64_29 = arith.constant 0 : i64
    %104 = arith.cmpi slt, %103, %c0_i64_29 : i64
    %c84_i8_30 = arith.constant 84 : i8
    cf.cond_br %104, ^bb1(%c84_i8_30 : i8), ^bb30
  ^bb30:  // pred: ^bb29
    %c31_i64 = arith.constant 31 : i64
    %c32_i64_31 = arith.constant 32 : i64
    %105 = arith.addi %103, %c31_i64 : i64
    %106 = arith.divui %105, %c32_i64_31 : i64
    %c3_i64_32 = arith.constant 3 : i64
    %107 = arith.muli %106, %c3_i64_32 : i64
    %108 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %109 = llvm.load %108 : !llvm.ptr -> i64
    %110 = arith.cmpi ult, %109, %107 : i64
    scf.if %110 {
    } else {
      %193 = arith.subi %109, %107 : i64
      llvm.store %193, %108 : i64, !llvm.ptr
    }
    %c80_i8_33 = arith.constant 80 : i8
    cf.cond_br %110, ^bb1(%c80_i8_33 : i8), ^bb31
  ^bb31:  // pred: ^bb30
    %111 = arith.trunci %94 : i256 to i64
    %c0_i64_34 = arith.constant 0 : i64
    %112 = arith.cmpi slt, %111, %c0_i64_34 : i64
    %c84_i8_35 = arith.constant 84 : i8
    cf.cond_br %112, ^bb1(%c84_i8_35 : i8), ^bb32
  ^bb32:  // pred: ^bb31
    %113 = arith.trunci %98 : i256 to i64
    %c0_i64_36 = arith.constant 0 : i64
    %114 = arith.cmpi slt, %113, %c0_i64_36 : i64
    %c84_i8_37 = arith.constant 84 : i8
    cf.cond_br %114, ^bb1(%c84_i8_37 : i8), ^bb33
  ^bb33:  // pred: ^bb32
    %115 = arith.maxui %111, %113 : i64
    %c0_i64_38 = arith.constant 0 : i64
    %116 = arith.cmpi ne, %103, %c0_i64_38 : i64
    cf.cond_br %116, ^bb45, ^bb34
  ^bb34:  // 2 preds: ^bb33, ^bb47
    %117 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    %118 = llvm.load %117 : !llvm.ptr -> !llvm.ptr
    %119 = llvm.getelementptr %118[%115] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %120 = llvm.getelementptr %118[%111] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    "llvm.intr.memmove"(%120, %119, %103) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> ()
    cf.br ^bb38
  ^bb35:  // pred: ^bb37
    %121 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_39 = arith.constant 1024 : i64
    %122 = llvm.load %121 : !llvm.ptr -> i64
    %c-3_i64 = arith.constant -3 : i64
    %123 = arith.addi %122, %c-3_i64 : i64
    llvm.store %123, %121 : i64, !llvm.ptr
    %c3_i64_40 = arith.constant 3 : i64
    %124 = arith.cmpi ult, %122, %c3_i64_40 : i64
    %c91_i8_41 = arith.constant 91 : i8
    cf.cond_br %124, ^bb1(%c91_i8_41 : i8), ^bb29
  ^bb36:  // pred: ^bb25
    %125 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %126 = llvm.load %125 : !llvm.ptr -> i64
    %c3_i64_42 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %127 = arith.cmpi uge, %126, %c3_i64_42 : i64
    %c80_i8_43 = arith.constant 80 : i8
    cf.cond_br %127, ^bb37, ^bb1(%c80_i8_43 : i8)
  ^bb37:  // pred: ^bb36
    %128 = arith.subi %126, %c3_i64_42 : i64
    llvm.store %128, %125 : i64, !llvm.ptr
    cf.br ^bb35
  ^bb38:  // pred: ^bb34
    %c0_i64_44 = arith.constant 0 : i64
    %c1_i8 = arith.constant 1 : i8
    %129 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %130 = llvm.load %129 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_44, %c0_i64_44, %130, %c1_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c1_i8 : i8
  ^bb39:  // pred: ^bb12
    %131 = arith.addi %43, %c32_i64 : i64
    %c0_i64_45 = arith.constant 0 : i64
    %132 = arith.cmpi slt, %131, %c0_i64_45 : i64
    %c84_i8_46 = arith.constant 84 : i8
    cf.cond_br %132, ^bb1(%c84_i8_46 : i8), ^bb40
  ^bb40:  // pred: ^bb39
    %c31_i64_47 = arith.constant 31 : i64
    %c32_i64_48 = arith.constant 32 : i64
    %133 = arith.addi %131, %c31_i64_47 : i64
    %134 = arith.divui %133, %c32_i64_48 : i64
    %c32_i64_49 = arith.constant 32 : i64
    %135 = arith.muli %134, %c32_i64_49 : i64
    %136 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    %137 = llvm.load %136 : !llvm.ptr -> i64
    %c31_i64_50 = arith.constant 31 : i64
    %c32_i64_51 = arith.constant 32 : i64
    %138 = arith.addi %137, %c31_i64_50 : i64
    %139 = arith.divui %138, %c32_i64_51 : i64
    %140 = arith.muli %139, %c32_i64_49 : i64
    %141 = arith.cmpi ult, %140, %135 : i64
    cf.cond_br %141, ^bb42, ^bb41
  ^bb41:  // 2 preds: ^bb40, ^bb44
    cf.br ^bb13
  ^bb42:  // pred: ^bb40
    %c3_i64_52 = arith.constant 3 : i64
    %c512_i64 = arith.constant 512 : i64
    %142 = arith.muli %139, %139 : i64
    %143 = arith.divui %142, %c512_i64 : i64
    %144 = arith.muli %139, %c3_i64_52 : i64
    %145 = arith.addi %143, %144 : i64
    %c3_i64_53 = arith.constant 3 : i64
    %c512_i64_54 = arith.constant 512 : i64
    %146 = arith.muli %134, %134 : i64
    %147 = arith.divui %146, %c512_i64_54 : i64
    %148 = arith.muli %134, %c3_i64_53 : i64
    %149 = arith.addi %147, %148 : i64
    %150 = arith.subi %149, %145 : i64
    %151 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %152 = llvm.load %151 : !llvm.ptr -> i64
    %153 = arith.cmpi ult, %152, %150 : i64
    scf.if %153 {
    } else {
      %193 = arith.subi %152, %150 : i64
      llvm.store %193, %151 : i64, !llvm.ptr
    }
    %c80_i8_55 = arith.constant 80 : i8
    cf.cond_br %153, ^bb1(%c80_i8_55 : i8), ^bb43
  ^bb43:  // pred: ^bb42
    %154 = call @dora_fn_extend_memory(%arg0, %135) : (!llvm.ptr, i64) -> !llvm.ptr
    %155 = llvm.getelementptr %154[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %156 = llvm.load %155 : !llvm.ptr -> !llvm.ptr
    %157 = llvm.getelementptr %154[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %158 = llvm.load %157 : !llvm.ptr -> i8
    %c0_i8 = arith.constant 0 : i8
    %159 = arith.cmpi ne, %158, %c0_i8 : i8
    cf.cond_br %159, ^bb1(%158 : i8), ^bb44
  ^bb44:  // pred: ^bb43
    %160 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    llvm.store %156, %160 : !llvm.ptr, !llvm.ptr
    %161 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %135, %161 : i64, !llvm.ptr
    cf.br ^bb41
  ^bb45:  // pred: ^bb33
    %162 = arith.addi %111, %103 : i64
    %c0_i64_56 = arith.constant 0 : i64
    %163 = arith.cmpi slt, %162, %c0_i64_56 : i64
    %c84_i8_57 = arith.constant 84 : i8
    cf.cond_br %163, ^bb1(%c84_i8_57 : i8), ^bb46
  ^bb46:  // pred: ^bb45
    %c31_i64_58 = arith.constant 31 : i64
    %c32_i64_59 = arith.constant 32 : i64
    %164 = arith.addi %162, %c31_i64_58 : i64
    %165 = arith.divui %164, %c32_i64_59 : i64
    %c32_i64_60 = arith.constant 32 : i64
    %166 = arith.muli %165, %c32_i64_60 : i64
    %167 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    %168 = llvm.load %167 : !llvm.ptr -> i64
    %c31_i64_61 = arith.constant 31 : i64
    %c32_i64_62 = arith.constant 32 : i64
    %169 = arith.addi %168, %c31_i64_61 : i64
    %170 = arith.divui %169, %c32_i64_62 : i64
    %171 = arith.muli %170, %c32_i64_60 : i64
    %172 = arith.cmpi ult, %171, %166 : i64
    cf.cond_br %172, ^bb48, ^bb47
  ^bb47:  // 2 preds: ^bb46, ^bb50
    cf.br ^bb34
  ^bb48:  // pred: ^bb46
    %c3_i64_63 = arith.constant 3 : i64
    %c512_i64_64 = arith.constant 512 : i64
    %173 = arith.muli %170, %170 : i64
    %174 = arith.divui %173, %c512_i64_64 : i64
    %175 = arith.muli %170, %c3_i64_63 : i64
    %176 = arith.addi %174, %175 : i64
    %c3_i64_65 = arith.constant 3 : i64
    %c512_i64_66 = arith.constant 512 : i64
    %177 = arith.muli %165, %165 : i64
    %178 = arith.divui %177, %c512_i64_66 : i64
    %179 = arith.muli %165, %c3_i64_65 : i64
    %180 = arith.addi %178, %179 : i64
    %181 = arith.subi %180, %176 : i64
    %182 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %183 = llvm.load %182 : !llvm.ptr -> i64
    %184 = arith.cmpi ult, %183, %181 : i64
    scf.if %184 {
    } else {
      %193 = arith.subi %183, %181 : i64
      llvm.store %193, %182 : i64, !llvm.ptr
    }
    %c80_i8_67 = arith.constant 80 : i8
    cf.cond_br %184, ^bb1(%c80_i8_67 : i8), ^bb49
  ^bb49:  // pred: ^bb48
    %185 = call @dora_fn_extend_memory(%arg0, %166) : (!llvm.ptr, i64) -> !llvm.ptr
    %186 = llvm.getelementptr %185[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %187 = llvm.load %186 : !llvm.ptr -> !llvm.ptr
    %188 = llvm.getelementptr %185[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %189 = llvm.load %188 : !llvm.ptr -> i8
    %c0_i8_68 = arith.constant 0 : i8
    %190 = arith.cmpi ne, %189, %c0_i8_68 : i8
    cf.cond_br %190, ^bb1(%189 : i8), ^bb50
  ^bb50:  // pred: ^bb49
    %191 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    llvm.store %187, %191 : !llvm.ptr, !llvm.ptr
    %192 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %166, %192 : i64, !llvm.ptr
    cf.br ^bb47
  }
}
