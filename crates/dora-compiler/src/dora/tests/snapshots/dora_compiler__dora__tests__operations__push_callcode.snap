---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  func.func private @dora_fn_nop()
  func.func private @dora_fn_tracing(!llvm.ptr, i8, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_fn_is_static(!llvm.ptr) -> i8
  func.func private @dora_fn_exp(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_chainid(!llvm.ptr) -> i64
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gaslimit_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_memory_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_memory_size(!llvm.ptr) -> i64
  func.func private @dora_fn_code_copy(!llvm.ptr, !llvm.ptr, i64, i64)
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_call(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_returndata_copy(!llvm.ptr, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_tload(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_tstore(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func public @main(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr) -> i8 attributes {llvm.emit_c_interface} {
    cf.br ^bb5
  ^bb1(%0: i8):  // 33 preds: ^bb2, ^bb4, ^bb5, ^bb8, ^bb9, ^bb12, ^bb13, ^bb16, ^bb17, ^bb20, ^bb21, ^bb24, ^bb25, ^bb28, ^bb29, ^bb31, ^bb32, ^bb34, ^bb35, ^bb37, ^bb38, ^bb40, ^bb41, ^bb44, ^bb45, ^bb46, ^bb49, ^bb50, ^bb52, ^bb53, ^bb54, ^bb57, ^bb58
    %c0_i64 = arith.constant 0 : i64
    %1 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64, %c0_i64, %1, %0) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %0 : i8
  ^bb2(%2: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %2 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3:  // pred: ^bb4
    %c5000_i256 = arith.constant 5000 : i256
    %3 = llvm.load %arg3 : !llvm.ptr -> i64
    %4 = llvm.getelementptr %arg2[%3] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64 = arith.constant 1 : i64
    %5 = arith.addi %3, %c1_i64 : i64
    llvm.store %5, %arg3 : i64, !llvm.ptr
    llvm.store %c5000_i256, %4 : i256, !llvm.ptr
    cf.br ^bb9
  ^bb4:  // pred: ^bb6
    %c1024_i64 = arith.constant 1024 : i64
    %6 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_0 = arith.constant 1 : i64
    %7 = arith.addi %6, %c1_i64_0 : i64
    %8 = arith.cmpi ult, %c1024_i64, %7 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %8, ^bb1(%c92_i8 : i8), ^bb3
  ^bb5:  // pred: ^bb0
    %9 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %10 = arith.cmpi uge, %9, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %10, ^bb6, ^bb1(%c80_i8 : i8)
  ^bb6:  // pred: ^bb5
    %11 = arith.subi %9, %c3_i64 : i64
    llvm.store %11, %arg1 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb7:  // pred: ^bb8
    %c8192_i256 = arith.constant 8192 : i256
    %12 = llvm.load %arg3 : !llvm.ptr -> i64
    %13 = llvm.getelementptr %arg2[%12] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_1 = arith.constant 1 : i64
    %14 = arith.addi %12, %c1_i64_1 : i64
    llvm.store %14, %arg3 : i64, !llvm.ptr
    llvm.store %c8192_i256, %13 : i256, !llvm.ptr
    cf.br ^bb13
  ^bb8:  // pred: ^bb10
    %c1024_i64_2 = arith.constant 1024 : i64
    %15 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_3 = arith.constant 1 : i64
    %16 = arith.addi %15, %c1_i64_3 : i64
    %17 = arith.cmpi ult, %c1024_i64_2, %16 : i64
    %c92_i8_4 = arith.constant 92 : i8
    cf.cond_br %17, ^bb1(%c92_i8_4 : i8), ^bb7
  ^bb9:  // pred: ^bb3
    %18 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_5 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %19 = arith.cmpi uge, %18, %c3_i64_5 : i64
    %c80_i8_6 = arith.constant 80 : i8
    cf.cond_br %19, ^bb10, ^bb1(%c80_i8_6 : i8)
  ^bb10:  // pred: ^bb9
    %20 = arith.subi %18, %c3_i64_5 : i64
    llvm.store %20, %arg1 : i64, !llvm.ptr
    cf.br ^bb8
  ^bb11:  // pred: ^bb12
    %c0_i256 = arith.constant 0 : i256
    %21 = llvm.load %arg3 : !llvm.ptr -> i64
    %22 = llvm.getelementptr %arg2[%21] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_7 = arith.constant 1 : i64
    %23 = arith.addi %21, %c1_i64_7 : i64
    llvm.store %23, %arg3 : i64, !llvm.ptr
    llvm.store %c0_i256, %22 : i256, !llvm.ptr
    cf.br ^bb17
  ^bb12:  // pred: ^bb14
    %c1024_i64_8 = arith.constant 1024 : i64
    %24 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_9 = arith.constant 1 : i64
    %25 = arith.addi %24, %c1_i64_9 : i64
    %26 = arith.cmpi ult, %c1024_i64_8, %25 : i64
    %c92_i8_10 = arith.constant 92 : i8
    cf.cond_br %26, ^bb1(%c92_i8_10 : i8), ^bb11
  ^bb13:  // pred: ^bb7
    %27 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_11 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %28 = arith.cmpi uge, %27, %c3_i64_11 : i64
    %c80_i8_12 = arith.constant 80 : i8
    cf.cond_br %28, ^bb14, ^bb1(%c80_i8_12 : i8)
  ^bb14:  // pred: ^bb13
    %29 = arith.subi %27, %c3_i64_11 : i64
    llvm.store %29, %arg1 : i64, !llvm.ptr
    cf.br ^bb12
  ^bb15:  // pred: ^bb16
    %c32_i256 = arith.constant 32 : i256
    %30 = llvm.load %arg3 : !llvm.ptr -> i64
    %31 = llvm.getelementptr %arg2[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_13 = arith.constant 1 : i64
    %32 = arith.addi %30, %c1_i64_13 : i64
    llvm.store %32, %arg3 : i64, !llvm.ptr
    llvm.store %c32_i256, %31 : i256, !llvm.ptr
    cf.br ^bb21
  ^bb16:  // pred: ^bb18
    %c1024_i64_14 = arith.constant 1024 : i64
    %33 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_15 = arith.constant 1 : i64
    %34 = arith.addi %33, %c1_i64_15 : i64
    %35 = arith.cmpi ult, %c1024_i64_14, %34 : i64
    %c92_i8_16 = arith.constant 92 : i8
    cf.cond_br %35, ^bb1(%c92_i8_16 : i8), ^bb15
  ^bb17:  // pred: ^bb11
    %36 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_17 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %37 = arith.cmpi uge, %36, %c3_i64_17 : i64
    %c80_i8_18 = arith.constant 80 : i8
    cf.cond_br %37, ^bb18, ^bb1(%c80_i8_18 : i8)
  ^bb18:  // pred: ^bb17
    %38 = arith.subi %36, %c3_i64_17 : i64
    llvm.store %38, %arg1 : i64, !llvm.ptr
    cf.br ^bb16
  ^bb19:  // pred: ^bb20
    %c32_i256_19 = arith.constant 32 : i256
    %39 = llvm.load %arg3 : !llvm.ptr -> i64
    %40 = llvm.getelementptr %arg2[%39] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_20 = arith.constant 1 : i64
    %41 = arith.addi %39, %c1_i64_20 : i64
    llvm.store %41, %arg3 : i64, !llvm.ptr
    llvm.store %c32_i256_19, %40 : i256, !llvm.ptr
    cf.br ^bb25
  ^bb20:  // pred: ^bb22
    %c1024_i64_21 = arith.constant 1024 : i64
    %42 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_22 = arith.constant 1 : i64
    %43 = arith.addi %42, %c1_i64_22 : i64
    %44 = arith.cmpi ult, %c1024_i64_21, %43 : i64
    %c92_i8_23 = arith.constant 92 : i8
    cf.cond_br %44, ^bb1(%c92_i8_23 : i8), ^bb19
  ^bb21:  // pred: ^bb15
    %45 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_24 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %46 = arith.cmpi uge, %45, %c3_i64_24 : i64
    %c80_i8_25 = arith.constant 80 : i8
    cf.cond_br %46, ^bb22, ^bb1(%c80_i8_25 : i8)
  ^bb22:  // pred: ^bb21
    %47 = arith.subi %45, %c3_i64_24 : i64
    llvm.store %47, %arg1 : i64, !llvm.ptr
    cf.br ^bb20
  ^bb23:  // pred: ^bb24
    %c64_i256 = arith.constant 64 : i256
    %48 = llvm.load %arg3 : !llvm.ptr -> i64
    %49 = llvm.getelementptr %arg2[%48] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_26 = arith.constant 1 : i64
    %50 = arith.addi %48, %c1_i64_26 : i64
    llvm.store %50, %arg3 : i64, !llvm.ptr
    llvm.store %c64_i256, %49 : i256, !llvm.ptr
    cf.br ^bb29
  ^bb24:  // pred: ^bb26
    %c1024_i64_27 = arith.constant 1024 : i64
    %51 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_28 = arith.constant 1 : i64
    %52 = arith.addi %51, %c1_i64_28 : i64
    %53 = arith.cmpi ult, %c1024_i64_27, %52 : i64
    %c92_i8_29 = arith.constant 92 : i8
    cf.cond_br %53, ^bb1(%c92_i8_29 : i8), ^bb23
  ^bb25:  // pred: ^bb19
    %54 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_30 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %55 = arith.cmpi uge, %54, %c3_i64_30 : i64
    %c80_i8_31 = arith.constant 80 : i8
    cf.cond_br %55, ^bb26, ^bb1(%c80_i8_31 : i8)
  ^bb26:  // pred: ^bb25
    %56 = arith.subi %54, %c3_i64_30 : i64
    llvm.store %56, %arg1 : i64, !llvm.ptr
    cf.br ^bb24
  ^bb27:  // pred: ^bb28
    %c64_i256_32 = arith.constant 64 : i256
    %57 = llvm.load %arg3 : !llvm.ptr -> i64
    %58 = llvm.getelementptr %arg2[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_33 = arith.constant 1 : i64
    %59 = arith.addi %57, %c1_i64_33 : i64
    llvm.store %59, %arg3 : i64, !llvm.ptr
    llvm.store %c64_i256_32, %58 : i256, !llvm.ptr
    cf.br ^bb41
  ^bb28:  // pred: ^bb30
    %c1024_i64_34 = arith.constant 1024 : i64
    %60 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_35 = arith.constant 1 : i64
    %61 = arith.addi %60, %c1_i64_35 : i64
    %62 = arith.cmpi ult, %c1024_i64_34, %61 : i64
    %c92_i8_36 = arith.constant 92 : i8
    cf.cond_br %62, ^bb1(%c92_i8_36 : i8), ^bb27
  ^bb29:  // pred: ^bb23
    %63 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_37 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %64 = arith.cmpi uge, %63, %c3_i64_37 : i64
    %c80_i8_38 = arith.constant 80 : i8
    cf.cond_br %64, ^bb30, ^bb1(%c80_i8_38 : i8)
  ^bb30:  // pred: ^bb29
    %65 = arith.subi %63, %c3_i64_37 : i64
    llvm.store %65, %arg1 : i64, !llvm.ptr
    cf.br ^bb28
  ^bb31:  // pred: ^bb40
    %66 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_39 = arith.constant 1 : i64
    %67 = arith.subi %66, %c1_i64_39 : i64
    %68 = llvm.getelementptr %arg2[%67] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %67, %arg3 : i64, !llvm.ptr
    %69 = llvm.load %68 : !llvm.ptr -> i256
    %70 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_40 = arith.constant 1 : i64
    %71 = arith.subi %70, %c1_i64_40 : i64
    %72 = llvm.getelementptr %arg2[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %71, %arg3 : i64, !llvm.ptr
    %73 = llvm.load %72 : !llvm.ptr -> i256
    %74 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_41 = arith.constant 1 : i64
    %75 = arith.subi %74, %c1_i64_41 : i64
    %76 = llvm.getelementptr %arg2[%75] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %75, %arg3 : i64, !llvm.ptr
    %77 = llvm.load %76 : !llvm.ptr -> i256
    %78 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_42 = arith.constant 1 : i64
    %79 = arith.subi %78, %c1_i64_42 : i64
    %80 = llvm.getelementptr %arg2[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %79, %arg3 : i64, !llvm.ptr
    %81 = llvm.load %80 : !llvm.ptr -> i256
    %82 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_43 = arith.constant 1 : i64
    %83 = arith.subi %82, %c1_i64_43 : i64
    %84 = llvm.getelementptr %arg2[%83] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %83, %arg3 : i64, !llvm.ptr
    %85 = llvm.load %84 : !llvm.ptr -> i256
    %86 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_44 = arith.constant 1 : i64
    %87 = arith.subi %86, %c1_i64_44 : i64
    %88 = llvm.getelementptr %arg2[%87] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %87, %arg3 : i64, !llvm.ptr
    %89 = llvm.load %88 : !llvm.ptr -> i256
    %90 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_45 = arith.constant 1 : i64
    %91 = arith.subi %90, %c1_i64_45 : i64
    %92 = llvm.getelementptr %arg2[%91] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %91, %arg3 : i64, !llvm.ptr
    %93 = llvm.load %92 : !llvm.ptr -> i256
    %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256
    %94 = arith.cmpi sgt, %85, %c18446744073709551615_i256 : i256
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %94, ^bb1(%c84_i8 : i8), ^bb32
  ^bb32:  // pred: ^bb31
    %95 = arith.trunci %85 : i256 to i64
    %c0_i64_46 = arith.constant 0 : i64
    %96 = arith.cmpi slt, %95, %c0_i64_46 : i64
    %c84_i8_47 = arith.constant 84 : i8
    cf.cond_br %96, ^bb1(%c84_i8_47 : i8), ^bb33
  ^bb33:  // pred: ^bb32
    %c0_i64_48 = arith.constant 0 : i64
    %97 = arith.cmpi ne, %95, %c0_i64_48 : i64
    cf.cond_br %97, ^bb44, ^bb34
  ^bb34:  // 2 preds: ^bb33, ^bb48
    %c18446744073709551615_i256_49 = arith.constant 18446744073709551615 : i256
    %98 = arith.cmpi sgt, %93, %c18446744073709551615_i256_49 : i256
    %c84_i8_50 = arith.constant 84 : i8
    cf.cond_br %98, ^bb1(%c84_i8_50 : i8), ^bb35
  ^bb35:  // pred: ^bb34
    %99 = arith.trunci %93 : i256 to i64
    %c0_i64_51 = arith.constant 0 : i64
    %100 = arith.cmpi slt, %99, %c0_i64_51 : i64
    %c84_i8_52 = arith.constant 84 : i8
    cf.cond_br %100, ^bb1(%c84_i8_52 : i8), ^bb36
  ^bb36:  // pred: ^bb35
    %c0_i64_53 = arith.constant 0 : i64
    %101 = arith.cmpi ne, %99, %c0_i64_53 : i64
    cf.cond_br %101, ^bb52, ^bb37
  ^bb37:  // 2 preds: ^bb36, ^bb56
    %102 = arith.trunci %81 : i256 to i64
    %103 = arith.trunci %89 : i256 to i64
    %104 = llvm.load %arg1 : !llvm.ptr -> i64
    %c1_i256 = arith.constant 1 : i256
    %105 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %77, %105 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i256_54 = arith.constant 1 : i256
    %106 = llvm.alloca %c1_i256_54 x i256 : (i256) -> !llvm.ptr
    llvm.store %69, %106 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i256_55 = arith.constant 1 : i256
    %107 = llvm.alloca %c1_i256_55 x i256 : (i256) -> !llvm.ptr
    llvm.store %73, %107 {alignment = 1 : i64} : i256, !llvm.ptr
    %c3_i8 = arith.constant 3 : i8
    %108 = call @dora_fn_call(%arg0, %106, %107, %105, %102, %95, %103, %99, %104, %c3_i8) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
    %109 = llvm.getelementptr %108[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %110 = llvm.load %109 : !llvm.ptr -> i8
    %111 = llvm.getelementptr %108[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %112 = llvm.load %111 : !llvm.ptr -> i8
    %c0_i8 = arith.constant 0 : i8
    %113 = arith.cmpi ne, %112, %c0_i8 : i8
    cf.cond_br %113, ^bb1(%112 : i8), ^bb38
  ^bb38:  // pred: ^bb37
    %114 = llvm.getelementptr %108[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %115 = llvm.load %114 : !llvm.ptr -> i64
    %116 = llvm.load %arg1 : !llvm.ptr -> i64
    %117 = arith.cmpi ult, %116, %115 : i64
    scf.if %117 {
    } else {
      %185 = arith.subi %116, %115 : i64
      llvm.store %185, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_56 = arith.constant 80 : i8
    cf.cond_br %117, ^bb1(%c80_i8_56 : i8), ^bb39
  ^bb39:  // pred: ^bb38
    %118 = arith.extui %110 : i8 to i256
    %119 = llvm.load %arg3 : !llvm.ptr -> i64
    %120 = llvm.getelementptr %arg2[%119] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_57 = arith.constant 1 : i64
    %121 = arith.addi %119, %c1_i64_57 : i64
    llvm.store %121, %arg3 : i64, !llvm.ptr
    llvm.store %118, %120 : i256, !llvm.ptr
    cf.br ^bb43
  ^bb40:  // pred: ^bb42
    %c1024_i64_58 = arith.constant 1024 : i64
    %122 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-6_i64 = arith.constant -6 : i64
    %123 = arith.addi %122, %c-6_i64 : i64
    %c7_i64 = arith.constant 7 : i64
    %124 = arith.cmpi ult, %122, %c7_i64 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %124, ^bb1(%c91_i8 : i8), ^bb31
  ^bb41:  // pred: ^bb27
    %125 = llvm.load %arg1 : !llvm.ptr -> i64
    %c0_i64_59 = arith.constant 0 : i64
    call @dora_fn_nop() : () -> ()
    %126 = arith.cmpi uge, %125, %c0_i64_59 : i64
    %c80_i8_60 = arith.constant 80 : i8
    cf.cond_br %126, ^bb42, ^bb1(%c80_i8_60 : i8)
  ^bb42:  // pred: ^bb41
    %127 = arith.subi %125, %c0_i64_59 : i64
    llvm.store %127, %arg1 : i64, !llvm.ptr
    cf.br ^bb40
  ^bb43:  // pred: ^bb39
    %c0_i64_61 = arith.constant 0 : i64
    %c1_i8 = arith.constant 1 : i8
    %128 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_61, %c0_i64_61, %128, %c1_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c1_i8 : i8
  ^bb44:  // pred: ^bb33
    %c18446744073709551615_i256_62 = arith.constant 18446744073709551615 : i256
    %129 = arith.cmpi sgt, %81, %c18446744073709551615_i256_62 : i256
    %c84_i8_63 = arith.constant 84 : i8
    cf.cond_br %129, ^bb1(%c84_i8_63 : i8), ^bb45
  ^bb45:  // pred: ^bb44
    %130 = arith.trunci %81 : i256 to i64
    %c0_i64_64 = arith.constant 0 : i64
    %131 = arith.cmpi slt, %130, %c0_i64_64 : i64
    %c84_i8_65 = arith.constant 84 : i8
    cf.cond_br %131, ^bb1(%c84_i8_65 : i8), ^bb46
  ^bb46:  // pred: ^bb45
    %132 = arith.addi %130, %95 : i64
    %c0_i64_66 = arith.constant 0 : i64
    %133 = arith.cmpi slt, %132, %c0_i64_66 : i64
    %c84_i8_67 = arith.constant 84 : i8
    cf.cond_br %133, ^bb1(%c84_i8_67 : i8), ^bb47
  ^bb47:  // pred: ^bb46
    %c31_i64 = arith.constant 31 : i64
    %c32_i64 = arith.constant 32 : i64
    %134 = arith.addi %132, %c31_i64 : i64
    %135 = arith.divui %134, %c32_i64 : i64
    %c32_i64_68 = arith.constant 32 : i64
    %136 = arith.muli %135, %c32_i64_68 : i64
    %137 = call @dora_fn_memory_size(%arg0) : (!llvm.ptr) -> i64
    %c31_i64_69 = arith.constant 31 : i64
    %c32_i64_70 = arith.constant 32 : i64
    %138 = arith.addi %137, %c31_i64_69 : i64
    %139 = arith.divui %138, %c32_i64_70 : i64
    %140 = arith.muli %139, %c32_i64_68 : i64
    %141 = arith.cmpi ult, %140, %136 : i64
    cf.cond_br %141, ^bb49, ^bb48
  ^bb48:  // 2 preds: ^bb47, ^bb51
    cf.br ^bb34
  ^bb49:  // pred: ^bb47
    %c3_i64_71 = arith.constant 3 : i64
    %c512_i64 = arith.constant 512 : i64
    %142 = arith.muli %139, %139 : i64
    %143 = arith.divui %142, %c512_i64 : i64
    %144 = arith.muli %139, %c3_i64_71 : i64
    %145 = arith.addi %143, %144 : i64
    %c3_i64_72 = arith.constant 3 : i64
    %c512_i64_73 = arith.constant 512 : i64
    %146 = arith.muli %135, %135 : i64
    %147 = arith.divui %146, %c512_i64_73 : i64
    %148 = arith.muli %135, %c3_i64_72 : i64
    %149 = arith.addi %147, %148 : i64
    %150 = arith.subi %149, %145 : i64
    %151 = llvm.load %arg1 : !llvm.ptr -> i64
    %152 = arith.cmpi ult, %151, %150 : i64
    scf.if %152 {
    } else {
      %185 = arith.subi %151, %150 : i64
      llvm.store %185, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_74 = arith.constant 80 : i8
    cf.cond_br %152, ^bb1(%c80_i8_74 : i8), ^bb50
  ^bb50:  // pred: ^bb49
    %153 = call @dora_fn_extend_memory(%arg0, %136) : (!llvm.ptr, i64) -> !llvm.ptr
    %154 = llvm.getelementptr %153[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %155 = llvm.load %154 : !llvm.ptr -> i8
    %c0_i8_75 = arith.constant 0 : i8
    %156 = arith.cmpi ne, %155, %c0_i8_75 : i8
    cf.cond_br %156, ^bb1(%155 : i8), ^bb51
  ^bb51:  // pred: ^bb50
    cf.br ^bb48
  ^bb52:  // pred: ^bb36
    %c18446744073709551615_i256_76 = arith.constant 18446744073709551615 : i256
    %157 = arith.cmpi sgt, %89, %c18446744073709551615_i256_76 : i256
    %c84_i8_77 = arith.constant 84 : i8
    cf.cond_br %157, ^bb1(%c84_i8_77 : i8), ^bb53
  ^bb53:  // pred: ^bb52
    %158 = arith.trunci %89 : i256 to i64
    %c0_i64_78 = arith.constant 0 : i64
    %159 = arith.cmpi slt, %158, %c0_i64_78 : i64
    %c84_i8_79 = arith.constant 84 : i8
    cf.cond_br %159, ^bb1(%c84_i8_79 : i8), ^bb54
  ^bb54:  // pred: ^bb53
    %160 = arith.addi %158, %99 : i64
    %c0_i64_80 = arith.constant 0 : i64
    %161 = arith.cmpi slt, %160, %c0_i64_80 : i64
    %c84_i8_81 = arith.constant 84 : i8
    cf.cond_br %161, ^bb1(%c84_i8_81 : i8), ^bb55
  ^bb55:  // pred: ^bb54
    %c31_i64_82 = arith.constant 31 : i64
    %c32_i64_83 = arith.constant 32 : i64
    %162 = arith.addi %160, %c31_i64_82 : i64
    %163 = arith.divui %162, %c32_i64_83 : i64
    %c32_i64_84 = arith.constant 32 : i64
    %164 = arith.muli %163, %c32_i64_84 : i64
    %165 = call @dora_fn_memory_size(%arg0) : (!llvm.ptr) -> i64
    %c31_i64_85 = arith.constant 31 : i64
    %c32_i64_86 = arith.constant 32 : i64
    %166 = arith.addi %165, %c31_i64_85 : i64
    %167 = arith.divui %166, %c32_i64_86 : i64
    %168 = arith.muli %167, %c32_i64_84 : i64
    %169 = arith.cmpi ult, %168, %164 : i64
    cf.cond_br %169, ^bb57, ^bb56
  ^bb56:  // 2 preds: ^bb55, ^bb59
    cf.br ^bb37
  ^bb57:  // pred: ^bb55
    %c3_i64_87 = arith.constant 3 : i64
    %c512_i64_88 = arith.constant 512 : i64
    %170 = arith.muli %167, %167 : i64
    %171 = arith.divui %170, %c512_i64_88 : i64
    %172 = arith.muli %167, %c3_i64_87 : i64
    %173 = arith.addi %171, %172 : i64
    %c3_i64_89 = arith.constant 3 : i64
    %c512_i64_90 = arith.constant 512 : i64
    %174 = arith.muli %163, %163 : i64
    %175 = arith.divui %174, %c512_i64_90 : i64
    %176 = arith.muli %163, %c3_i64_89 : i64
    %177 = arith.addi %175, %176 : i64
    %178 = arith.subi %177, %173 : i64
    %179 = llvm.load %arg1 : !llvm.ptr -> i64
    %180 = arith.cmpi ult, %179, %178 : i64
    scf.if %180 {
    } else {
      %185 = arith.subi %179, %178 : i64
      llvm.store %185, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_91 = arith.constant 80 : i8
    cf.cond_br %180, ^bb1(%c80_i8_91 : i8), ^bb58
  ^bb58:  // pred: ^bb57
    %181 = call @dora_fn_extend_memory(%arg0, %164) : (!llvm.ptr, i64) -> !llvm.ptr
    %182 = llvm.getelementptr %181[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %183 = llvm.load %182 : !llvm.ptr -> i8
    %c0_i8_92 = arith.constant 0 : i8
    %184 = arith.cmpi ne, %183, %c0_i8_92 : i8
    cf.cond_br %184, ^bb1(%183 : i8), ^bb59
  ^bb59:  // pred: ^bb58
    cf.br ^bb56
  }
}
