---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  llvm.mlir.global internal @dora_stack_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_stack_length() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_memory_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_memory_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_calldata_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_calldata_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_gas_counter() {addr_space = 0 : i32} : i64
  llvm.mlir.global external @dora_ctx_is_static() {addr_space = 0 : i32} : !llvm.ptr
  func.func private @dora_debug_print(i32)
  func.func private @dora_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_get_calldata_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_get_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_get_chainid(!llvm.ptr) -> i64
  func.func private @dora_store_in_callvalue_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_caller_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_get_gaslimit(!llvm.ptr) -> i64
  func.func private @dora_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_copy_code_to_memory(!llvm.ptr, i64, i64, i64)
  func.func private @dora_read_storage(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_write_storage(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> i64
  func.func private @dora_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_get_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_get_coinbase_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_get_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_get_codesize_from_address(!llvm.ptr, !llvm.ptr) -> i64
  func.func private @dora_get_address_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_get_prevrandao(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_call(!llvm.ptr, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr, i8) -> i8
  func.func private @dora_store_in_balance(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_copy_ext_code_to_memory(!llvm.ptr, !llvm.ptr, i64, i64, i64)
  func.func private @dora_get_blob_hash_at_index(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_get_block_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_get_code_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_create(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr) -> i8
  func.func private @dora_create2(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
  func.func private @dora_get_return_data_size(!llvm.ptr) -> i64
  func.func private @dora_copy_return_data_into_memory(!llvm.ptr, i64, i64, i64)
  func.func private @dora_selfdestruct(!llvm.ptr, !llvm.ptr) -> i64
  func.func private @dora_transient_storage_read(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_transient_storage_write(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func public @main(%arg0: !llvm.ptr, %arg1: i64) -> i8 attributes {llvm.emit_c_interface} {
    %c1024_i256 = arith.constant 1024 : i256
    %0 = llvm.alloca %c1024_i256 x i256 : (i256) -> !llvm.ptr
    %1 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    llvm.store %0, %1 : !llvm.ptr, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %2 = llvm.mlir.addressof @dora_stack_length : !llvm.ptr
    llvm.store %c0_i64, %2 : i64, !llvm.ptr
    %c0_i64_0 = arith.constant 0 : i64
    %3 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    llvm.store %c0_i64_0, %3 : i64, !llvm.ptr
    %4 = call @dora_get_calldata_ptr(%arg0) : (!llvm.ptr) -> !llvm.ptr
    %5 = llvm.mlir.addressof @dora_calldata_ptr : !llvm.ptr
    llvm.store %4, %5 : !llvm.ptr, !llvm.ptr
    %6 = call @dora_get_calldata_size(%arg0) : (!llvm.ptr) -> i64
    %7 = llvm.mlir.addressof @dora_calldata_size : !llvm.ptr
    llvm.store %6, %7 : i64, !llvm.ptr
    %8 = llvm.mlir.addressof @dora_gas_counter : !llvm.ptr
    llvm.store %arg1, %8 : i64, !llvm.ptr
    %9 = llvm.mlir.addressof @dora_stack_length : !llvm.ptr
    %c1024_i64 = arith.constant 1024 : i64
    cf.br ^bb3
  ^bb1:  // 3 preds: ^bb2, ^bb10, ^bb11
    %c0_i64_1 = arith.constant 0 : i64
    %c3_i8 = arith.constant 3 : i8
    call @dora_write_result(%arg0, %c0_i64_1, %c0_i64_1, %c0_i64_1, %c3_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c3_i8 : i8
  ^bb2(%10: i256):  // no predecessors
    cf.switch %10 : i256, [
      default: ^bb1
    ]
  ^bb3:  // pred: ^bb0
    %c5000_i256 = arith.constant 5000 : i256
    %11 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    llvm.store %c5000_i256, %12 : i256, !llvm.ptr
    %13 = llvm.getelementptr %12[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %13, %11 : !llvm.ptr, !llvm.ptr
    cf.br ^bb4
  ^bb4:  // pred: ^bb3
    %c8192_i256 = arith.constant 8192 : i256
    %14 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %15 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    llvm.store %c8192_i256, %15 : i256, !llvm.ptr
    %16 = llvm.getelementptr %15[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %16, %14 : !llvm.ptr, !llvm.ptr
    cf.br ^bb5
  ^bb5:  // pred: ^bb4
    %c0_i256 = arith.constant 0 : i256
    %17 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %18 = llvm.load %17 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256, %18 : i256, !llvm.ptr
    %19 = llvm.getelementptr %18[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %19, %17 : !llvm.ptr, !llvm.ptr
    cf.br ^bb6
  ^bb6:  // pred: ^bb5
    %c32_i256 = arith.constant 32 : i256
    %20 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %21 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    llvm.store %c32_i256, %21 : i256, !llvm.ptr
    %22 = llvm.getelementptr %21[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %22, %20 : !llvm.ptr, !llvm.ptr
    cf.br ^bb7
  ^bb7:  // pred: ^bb6
    %c32_i256_2 = arith.constant 32 : i256
    %23 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %24 = llvm.load %23 : !llvm.ptr -> !llvm.ptr
    llvm.store %c32_i256_2, %24 : i256, !llvm.ptr
    %25 = llvm.getelementptr %24[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %25, %23 : !llvm.ptr, !llvm.ptr
    cf.br ^bb8
  ^bb8:  // pred: ^bb7
    %c64_i256 = arith.constant 64 : i256
    %26 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %27 = llvm.load %26 : !llvm.ptr -> !llvm.ptr
    llvm.store %c64_i256, %27 : i256, !llvm.ptr
    %28 = llvm.getelementptr %27[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %28, %26 : !llvm.ptr, !llvm.ptr
    cf.br ^bb9
  ^bb9:  // pred: ^bb8
    %c64_i256_3 = arith.constant 64 : i256
    %29 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %30 = llvm.load %29 : !llvm.ptr -> !llvm.ptr
    llvm.store %c64_i256_3, %30 : i256, !llvm.ptr
    %31 = llvm.getelementptr %30[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %31, %29 : !llvm.ptr, !llvm.ptr
    cf.br ^bb10
  ^bb10:  // pred: ^bb9
    %32 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %33 = llvm.load %32 : !llvm.ptr -> !llvm.ptr
    %34 = llvm.getelementptr %33[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %35 = llvm.load %34 : !llvm.ptr -> i256
    llvm.store %34, %32 : !llvm.ptr, !llvm.ptr
    %36 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %37 = llvm.load %36 : !llvm.ptr -> !llvm.ptr
    %38 = llvm.getelementptr %37[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %39 = llvm.load %38 : !llvm.ptr -> i256
    llvm.store %38, %36 : !llvm.ptr, !llvm.ptr
    %40 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %41 = llvm.load %40 : !llvm.ptr -> !llvm.ptr
    %42 = llvm.getelementptr %41[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %43 = llvm.load %42 : !llvm.ptr -> i256
    llvm.store %42, %40 : !llvm.ptr, !llvm.ptr
    %44 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %45 = llvm.load %44 : !llvm.ptr -> !llvm.ptr
    %46 = llvm.getelementptr %45[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %47 = llvm.load %46 : !llvm.ptr -> i256
    llvm.store %46, %44 : !llvm.ptr, !llvm.ptr
    %48 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %49 = llvm.load %48 : !llvm.ptr -> !llvm.ptr
    %50 = llvm.getelementptr %49[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %51 = llvm.load %50 : !llvm.ptr -> i256
    llvm.store %50, %48 : !llvm.ptr, !llvm.ptr
    %52 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %53 = llvm.load %52 : !llvm.ptr -> !llvm.ptr
    %54 = llvm.getelementptr %53[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %55 = llvm.load %54 : !llvm.ptr -> i256
    llvm.store %54, %52 : !llvm.ptr, !llvm.ptr
    %56 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %57 = llvm.load %56 : !llvm.ptr -> !llvm.ptr
    %58 = llvm.getelementptr %57[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %59 = llvm.load %58 : !llvm.ptr -> i256
    llvm.store %58, %56 : !llvm.ptr, !llvm.ptr
    %60 = llvm.mlir.addressof @dora_ctx_is_static : !llvm.ptr
    %61 = llvm.load %60 : !llvm.ptr -> i1
    %c0_i256_4 = arith.constant 0 : i256
    %62 = arith.cmpi ne, %43, %c0_i256_4 : i256
    %63 = arith.andi %61, %62 : i1
    cf.cond_br %63, ^bb1, ^bb11
  ^bb11:  // pred: ^bb10
    %64 = arith.trunci %35 : i256 to i64
    %65 = arith.trunci %47 : i256 to i64
    %66 = arith.trunci %51 : i256 to i64
    %67 = arith.trunci %55 : i256 to i64
    %68 = arith.trunci %59 : i256 to i64
    %69 = arith.addi %65, %66 : i64
    %70 = arith.addi %67, %68 : i64
    %71 = arith.maxui %69, %70 : i64
    %c0_i64_5 = arith.constant 0 : i64
    %72 = arith.cmpi slt, %71, %c0_i64_5 : i64
    cf.cond_br %72, ^bb1, ^bb12
  ^bb12:  // pred: ^bb11
    %73 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    %74 = llvm.load %73 : !llvm.ptr -> i64
    %c31_i64 = arith.constant 31 : i64
    %c32_i64 = arith.constant 32 : i64
    %75 = arith.addi %71, %c31_i64 : i64
    %76 = arith.divui %75, %c32_i64 : i64
    %77 = arith.muli %76, %c32_i64 : i64
    %78 = arith.cmpi ult, %74, %77 : i64
    scf.if %78 {
      %90 = func.call @dora_extend_memory(%arg0, %77) : (!llvm.ptr, i64) -> !llvm.ptr
      llvm.store %77, %73 : i64, !llvm.ptr
      %91 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
      llvm.store %90, %91 : !llvm.ptr, !llvm.ptr
    } else {
    }
    %79 = llvm.mlir.addressof @dora_gas_counter : !llvm.ptr
    %80 = llvm.load %79 : !llvm.ptr -> i64
    %c1_i256 = arith.constant 1 : i256
    %81 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %43, %81 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i256_6 = arith.constant 1 : i256
    %82 = llvm.alloca %c1_i256_6 x i256 : (i256) -> !llvm.ptr
    llvm.store %39, %82 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i64 = arith.constant 1 : i64
    %83 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    %c0_i8 = arith.constant 0 : i8
    %84 = call @dora_call(%arg0, %64, %82, %81, %65, %66, %67, %68, %80, %83, %c0_i8) : (!llvm.ptr, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr, i8) -> i8
    %85 = llvm.load %83 : !llvm.ptr -> i64
    %86 = arith.extui %84 : i8 to i256
    %87 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %88 = llvm.load %87 : !llvm.ptr -> !llvm.ptr
    llvm.store %86, %88 : i256, !llvm.ptr
    %89 = llvm.getelementptr %88[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %89, %87 : !llvm.ptr, !llvm.ptr
    cf.br ^bb13
  ^bb13:  // pred: ^bb12
    %c0_i64_7 = arith.constant 0 : i64
    %c1_i8 = arith.constant 1 : i8
    call @dora_write_result(%arg0, %c0_i64_7, %c0_i64_7, %arg1, %c1_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c1_i8 : i8
  }
}
