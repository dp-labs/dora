---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  func.func private @dora_fn_nop()
  func.func private @dora_fn_tracing(!llvm.ptr, i8, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_fn_is_static(!llvm.ptr) -> i8
  func.func private @dora_fn_exp(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_calldata_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_data_section(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_data_section_size(!llvm.ptr) -> i16
  func.func private @dora_fn_data_section_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_chainid(!llvm.ptr) -> i64
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gaslimit_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_memory_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_memory_size(!llvm.ptr) -> i64
  func.func private @dora_fn_code_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_eofcreate(!llvm.ptr, i8, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returncontract(!llvm.ptr, i8, i64, i64, index, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_call(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_extcall(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_returndata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_returndata_copy(!llvm.ptr, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_tload(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_tstore(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @op242(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr, %arg4: !llvm.ptr) -> i8 {
    cf.br ^bb13
  ^bb1(%0: i8):  // 18 preds: ^bb3, ^bb4, ^bb6, ^bb7, ^bb9, ^bb10, ^bb12, ^bb13, ^bb16, ^bb17, ^bb18, ^bb21, ^bb22, ^bb24, ^bb25, ^bb26, ^bb29, ^bb30
    %c0_i64 = arith.constant 0 : i64
    %1 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64, %c0_i64, %1, %0) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %0 : i8
  ^bb2(%2: i8):  // no predecessors
    return %2 : i8
  ^bb3:  // pred: ^bb12
    %3 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %4 = llvm.getelementptr %3[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %5 = llvm.load %4 : !llvm.ptr -> i256
    llvm.store %4, %arg4 : !llvm.ptr, !llvm.ptr
    %6 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %6[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %8 = llvm.load %7 : !llvm.ptr -> i256
    llvm.store %7, %arg4 : !llvm.ptr, !llvm.ptr
    %9 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.getelementptr %9[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %11 = llvm.load %10 : !llvm.ptr -> i256
    llvm.store %10, %arg4 : !llvm.ptr, !llvm.ptr
    %12 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.getelementptr %12[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %14 = llvm.load %13 : !llvm.ptr -> i256
    llvm.store %13, %arg4 : !llvm.ptr, !llvm.ptr
    %15 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %16 = llvm.getelementptr %15[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %17 = llvm.load %16 : !llvm.ptr -> i256
    llvm.store %16, %arg4 : !llvm.ptr, !llvm.ptr
    %18 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.getelementptr %18[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %20 = llvm.load %19 : !llvm.ptr -> i256
    llvm.store %19, %arg4 : !llvm.ptr, !llvm.ptr
    %21 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %22 = llvm.getelementptr %21[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %23 = llvm.load %22 : !llvm.ptr -> i256
    llvm.store %22, %arg4 : !llvm.ptr, !llvm.ptr
    %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256
    %24 = arith.cmpi sgt, %17, %c18446744073709551615_i256 : i256
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %24, ^bb1(%c84_i8 : i8), ^bb4
  ^bb4:  // pred: ^bb3
    %25 = arith.trunci %17 : i256 to i64
    %c0_i64_0 = arith.constant 0 : i64
    %26 = arith.cmpi slt, %25, %c0_i64_0 : i64
    %c84_i8_1 = arith.constant 84 : i8
    cf.cond_br %26, ^bb1(%c84_i8_1 : i8), ^bb5
  ^bb5:  // pred: ^bb4
    %c0_i64_2 = arith.constant 0 : i64
    %27 = arith.cmpi ne, %25, %c0_i64_2 : i64
    cf.cond_br %27, ^bb16, ^bb6
  ^bb6:  // 2 preds: ^bb5, ^bb20
    %c18446744073709551615_i256_3 = arith.constant 18446744073709551615 : i256
    %28 = arith.cmpi sgt, %23, %c18446744073709551615_i256_3 : i256
    %c84_i8_4 = arith.constant 84 : i8
    cf.cond_br %28, ^bb1(%c84_i8_4 : i8), ^bb7
  ^bb7:  // pred: ^bb6
    %29 = arith.trunci %23 : i256 to i64
    %c0_i64_5 = arith.constant 0 : i64
    %30 = arith.cmpi slt, %29, %c0_i64_5 : i64
    %c84_i8_6 = arith.constant 84 : i8
    cf.cond_br %30, ^bb1(%c84_i8_6 : i8), ^bb8
  ^bb8:  // pred: ^bb7
    %c0_i64_7 = arith.constant 0 : i64
    %31 = arith.cmpi ne, %29, %c0_i64_7 : i64
    cf.cond_br %31, ^bb24, ^bb9
  ^bb9:  // 2 preds: ^bb8, ^bb28
    %32 = arith.trunci %14 : i256 to i64
    %33 = arith.trunci %20 : i256 to i64
    %34 = llvm.load %arg1 : !llvm.ptr -> i64
    %c1_i256 = arith.constant 1 : i256
    %35 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %11, %35 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i256_8 = arith.constant 1 : i256
    %36 = llvm.alloca %c1_i256_8 x i256 : (i256) -> !llvm.ptr
    llvm.store %5, %36 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i256_9 = arith.constant 1 : i256
    %37 = llvm.alloca %c1_i256_9 x i256 : (i256) -> !llvm.ptr
    llvm.store %8, %37 {alignment = 1 : i64} : i256, !llvm.ptr
    %c3_i8 = arith.constant 3 : i8
    %38 = call @dora_fn_call(%arg0, %36, %37, %35, %32, %25, %33, %29, %34, %c3_i8) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
    %39 = llvm.getelementptr %38[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %40 = llvm.load %39 : !llvm.ptr -> i64
    %41 = llvm.getelementptr %38[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %42 = llvm.load %41 : !llvm.ptr -> i8
    %c0_i8 = arith.constant 0 : i8
    %43 = arith.cmpi ne, %42, %c0_i8 : i8
    cf.cond_br %43, ^bb1(%42 : i8), ^bb10
  ^bb10:  // pred: ^bb9
    %44 = llvm.getelementptr %38[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %45 = llvm.load %44 : !llvm.ptr -> i64
    %46 = llvm.load %arg1 : !llvm.ptr -> i64
    %47 = arith.cmpi ult, %46, %45 : i64
    scf.if %47 {
    } else {
      %113 = arith.subi %46, %45 : i64
      llvm.store %113, %arg1 : i64, !llvm.ptr
    }
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %47, ^bb1(%c80_i8 : i8), ^bb11
  ^bb11:  // pred: ^bb10
    %48 = arith.extui %40 : i64 to i256
    %49 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    llvm.store %48, %49 : i256, !llvm.ptr
    %50 = llvm.getelementptr %49[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %50, %arg4 : !llvm.ptr, !llvm.ptr
    cf.br ^bb15
  ^bb12:  // pred: ^bb14
    %c1024_i64 = arith.constant 1024 : i64
    %51 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-6_i64 = arith.constant -6 : i64
    %52 = arith.addi %51, %c-6_i64 : i64
    llvm.store %52, %arg3 : i64, !llvm.ptr
    %c7_i64 = arith.constant 7 : i64
    %53 = arith.cmpi ult, %51, %c7_i64 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %53, ^bb1(%c91_i8 : i8), ^bb3
  ^bb13:  // pred: ^bb0
    %54 = llvm.load %arg1 : !llvm.ptr -> i64
    %c0_i64_10 = arith.constant 0 : i64
    call @dora_fn_nop() : () -> ()
    %55 = arith.cmpi uge, %54, %c0_i64_10 : i64
    %c80_i8_11 = arith.constant 80 : i8
    cf.cond_br %55, ^bb14, ^bb1(%c80_i8_11 : i8)
  ^bb14:  // pred: ^bb13
    %56 = arith.subi %54, %c0_i64_10 : i64
    llvm.store %56, %arg1 : i64, !llvm.ptr
    cf.br ^bb12
  ^bb15:  // pred: ^bb11
    %c0_i8_12 = arith.constant 0 : i8
    return %c0_i8_12 : i8
  ^bb16:  // pred: ^bb5
    %c18446744073709551615_i256_13 = arith.constant 18446744073709551615 : i256
    %57 = arith.cmpi sgt, %14, %c18446744073709551615_i256_13 : i256
    %c84_i8_14 = arith.constant 84 : i8
    cf.cond_br %57, ^bb1(%c84_i8_14 : i8), ^bb17
  ^bb17:  // pred: ^bb16
    %58 = arith.trunci %14 : i256 to i64
    %c0_i64_15 = arith.constant 0 : i64
    %59 = arith.cmpi slt, %58, %c0_i64_15 : i64
    %c84_i8_16 = arith.constant 84 : i8
    cf.cond_br %59, ^bb1(%c84_i8_16 : i8), ^bb18
  ^bb18:  // pred: ^bb17
    %60 = arith.addi %58, %25 : i64
    %c0_i64_17 = arith.constant 0 : i64
    %61 = arith.cmpi slt, %60, %c0_i64_17 : i64
    %c84_i8_18 = arith.constant 84 : i8
    cf.cond_br %61, ^bb1(%c84_i8_18 : i8), ^bb19
  ^bb19:  // pred: ^bb18
    %c31_i64 = arith.constant 31 : i64
    %c32_i64 = arith.constant 32 : i64
    %62 = arith.addi %60, %c31_i64 : i64
    %63 = arith.divui %62, %c32_i64 : i64
    %c32_i64_19 = arith.constant 32 : i64
    %64 = arith.muli %63, %c32_i64_19 : i64
    %65 = call @dora_fn_memory_size(%arg0) : (!llvm.ptr) -> i64
    %c31_i64_20 = arith.constant 31 : i64
    %c32_i64_21 = arith.constant 32 : i64
    %66 = arith.addi %65, %c31_i64_20 : i64
    %67 = arith.divui %66, %c32_i64_21 : i64
    %68 = arith.muli %67, %c32_i64_19 : i64
    %69 = arith.cmpi ult, %68, %64 : i64
    cf.cond_br %69, ^bb21, ^bb20
  ^bb20:  // 2 preds: ^bb19, ^bb23
    cf.br ^bb6
  ^bb21:  // pred: ^bb19
    %c3_i64 = arith.constant 3 : i64
    %c512_i64 = arith.constant 512 : i64
    %70 = arith.muli %67, %67 : i64
    %71 = arith.divui %70, %c512_i64 : i64
    %72 = arith.muli %67, %c3_i64 : i64
    %73 = arith.addi %71, %72 : i64
    %c3_i64_22 = arith.constant 3 : i64
    %c512_i64_23 = arith.constant 512 : i64
    %74 = arith.muli %63, %63 : i64
    %75 = arith.divui %74, %c512_i64_23 : i64
    %76 = arith.muli %63, %c3_i64_22 : i64
    %77 = arith.addi %75, %76 : i64
    %78 = arith.subi %77, %73 : i64
    %79 = llvm.load %arg1 : !llvm.ptr -> i64
    %80 = arith.cmpi ult, %79, %78 : i64
    scf.if %80 {
    } else {
      %113 = arith.subi %79, %78 : i64
      llvm.store %113, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_24 = arith.constant 80 : i8
    cf.cond_br %80, ^bb1(%c80_i8_24 : i8), ^bb22
  ^bb22:  // pred: ^bb21
    %81 = call @dora_fn_extend_memory(%arg0, %64) : (!llvm.ptr, i64) -> !llvm.ptr
    %82 = llvm.getelementptr %81[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %83 = llvm.load %82 : !llvm.ptr -> i8
    %c0_i8_25 = arith.constant 0 : i8
    %84 = arith.cmpi ne, %83, %c0_i8_25 : i8
    cf.cond_br %84, ^bb1(%83 : i8), ^bb23
  ^bb23:  // pred: ^bb22
    cf.br ^bb20
  ^bb24:  // pred: ^bb8
    %c18446744073709551615_i256_26 = arith.constant 18446744073709551615 : i256
    %85 = arith.cmpi sgt, %20, %c18446744073709551615_i256_26 : i256
    %c84_i8_27 = arith.constant 84 : i8
    cf.cond_br %85, ^bb1(%c84_i8_27 : i8), ^bb25
  ^bb25:  // pred: ^bb24
    %86 = arith.trunci %20 : i256 to i64
    %c0_i64_28 = arith.constant 0 : i64
    %87 = arith.cmpi slt, %86, %c0_i64_28 : i64
    %c84_i8_29 = arith.constant 84 : i8
    cf.cond_br %87, ^bb1(%c84_i8_29 : i8), ^bb26
  ^bb26:  // pred: ^bb25
    %88 = arith.addi %86, %29 : i64
    %c0_i64_30 = arith.constant 0 : i64
    %89 = arith.cmpi slt, %88, %c0_i64_30 : i64
    %c84_i8_31 = arith.constant 84 : i8
    cf.cond_br %89, ^bb1(%c84_i8_31 : i8), ^bb27
  ^bb27:  // pred: ^bb26
    %c31_i64_32 = arith.constant 31 : i64
    %c32_i64_33 = arith.constant 32 : i64
    %90 = arith.addi %88, %c31_i64_32 : i64
    %91 = arith.divui %90, %c32_i64_33 : i64
    %c32_i64_34 = arith.constant 32 : i64
    %92 = arith.muli %91, %c32_i64_34 : i64
    %93 = call @dora_fn_memory_size(%arg0) : (!llvm.ptr) -> i64
    %c31_i64_35 = arith.constant 31 : i64
    %c32_i64_36 = arith.constant 32 : i64
    %94 = arith.addi %93, %c31_i64_35 : i64
    %95 = arith.divui %94, %c32_i64_36 : i64
    %96 = arith.muli %95, %c32_i64_34 : i64
    %97 = arith.cmpi ult, %96, %92 : i64
    cf.cond_br %97, ^bb29, ^bb28
  ^bb28:  // 2 preds: ^bb27, ^bb31
    cf.br ^bb9
  ^bb29:  // pred: ^bb27
    %c3_i64_37 = arith.constant 3 : i64
    %c512_i64_38 = arith.constant 512 : i64
    %98 = arith.muli %95, %95 : i64
    %99 = arith.divui %98, %c512_i64_38 : i64
    %100 = arith.muli %95, %c3_i64_37 : i64
    %101 = arith.addi %99, %100 : i64
    %c3_i64_39 = arith.constant 3 : i64
    %c512_i64_40 = arith.constant 512 : i64
    %102 = arith.muli %91, %91 : i64
    %103 = arith.divui %102, %c512_i64_40 : i64
    %104 = arith.muli %91, %c3_i64_39 : i64
    %105 = arith.addi %103, %104 : i64
    %106 = arith.subi %105, %101 : i64
    %107 = llvm.load %arg1 : !llvm.ptr -> i64
    %108 = arith.cmpi ult, %107, %106 : i64
    scf.if %108 {
    } else {
      %113 = arith.subi %107, %106 : i64
      llvm.store %113, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_41 = arith.constant 80 : i8
    cf.cond_br %108, ^bb1(%c80_i8_41 : i8), ^bb30
  ^bb30:  // pred: ^bb29
    %109 = call @dora_fn_extend_memory(%arg0, %92) : (!llvm.ptr, i64) -> !llvm.ptr
    %110 = llvm.getelementptr %109[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %111 = llvm.load %110 : !llvm.ptr -> i8
    %c0_i8_42 = arith.constant 0 : i8
    %112 = arith.cmpi ne, %111, %c0_i8_42 : i8
    cf.cond_br %112, ^bb1(%111 : i8), ^bb31
  ^bb31:  // pred: ^bb30
    cf.br ^bb28
  }
  func.func public @main(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr) -> i8 attributes {llvm.emit_c_interface} {
    %c0_i64 = arith.constant 0 : i64
    %0 = llvm.alloca %c0_i64 x !llvm.ptr : (i64) -> !llvm.ptr
    llvm.store %arg2, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8 = arith.constant 0 : i8
    %c0_i8_0 = arith.constant 0 : i8
    %1 = arith.cmpi ne, %c0_i8, %c0_i8_0 : i8
    cf.cond_br %1, ^bb1(%c0_i8 : i8), ^bb6
  ^bb1(%2: i8):  // 22 preds: ^bb0, ^bb2, ^bb4, ^bb5, ^bb6, ^bb8, ^bb9, ^bb10, ^bb12, ^bb13, ^bb14, ^bb16, ^bb17, ^bb18, ^bb20, ^bb21, ^bb22, ^bb24, ^bb25, ^bb26, ^bb29, ^bb30
    %c0_i64_1 = arith.constant 0 : i64
    %3 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_1, %c0_i64_1, %3, %2) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %2 : i8
  ^bb2(%4: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %4 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3(%5: i8):  // 2 preds: ^bb28, ^bb32
    return %5 : i8
  ^bb4:  // pred: ^bb5
    %c5000_i256 = arith.constant 5000 : i256
    %6 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c5000_i256, %6 : i256, !llvm.ptr
    %7 = llvm.getelementptr %6[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %7, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_2 = arith.constant 0 : i8
    %8 = arith.cmpi ne, %c0_i8_2, %c0_i8_0 : i8
    cf.cond_br %8, ^bb1(%c0_i8_2 : i8), ^bb10
  ^bb5:  // pred: ^bb7
    %c1024_i64 = arith.constant 1024 : i64
    %9 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %10 = arith.addi %9, %c1_i64 : i64
    llvm.store %10, %arg3 : i64, !llvm.ptr
    %11 = arith.cmpi ult, %c1024_i64, %10 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %11, ^bb1(%c92_i8 : i8), ^bb4
  ^bb6:  // pred: ^bb0
    %12 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %13 = arith.cmpi uge, %12, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %13, ^bb7, ^bb1(%c80_i8 : i8)
  ^bb7:  // pred: ^bb6
    %14 = arith.subi %12, %c3_i64 : i64
    llvm.store %14, %arg1 : i64, !llvm.ptr
    cf.br ^bb5
  ^bb8:  // pred: ^bb9
    %c8192_i256 = arith.constant 8192 : i256
    %15 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c8192_i256, %15 : i256, !llvm.ptr
    %16 = llvm.getelementptr %15[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %16, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_3 = arith.constant 0 : i8
    %17 = arith.cmpi ne, %c0_i8_3, %c0_i8_0 : i8
    cf.cond_br %17, ^bb1(%c0_i8_3 : i8), ^bb14
  ^bb9:  // pred: ^bb11
    %c1024_i64_4 = arith.constant 1024 : i64
    %18 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_5 = arith.constant 1 : i64
    %19 = arith.addi %18, %c1_i64_5 : i64
    llvm.store %19, %arg3 : i64, !llvm.ptr
    %20 = arith.cmpi ult, %c1024_i64_4, %19 : i64
    %c92_i8_6 = arith.constant 92 : i8
    cf.cond_br %20, ^bb1(%c92_i8_6 : i8), ^bb8
  ^bb10:  // pred: ^bb4
    %21 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_7 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %22 = arith.cmpi uge, %21, %c3_i64_7 : i64
    %c80_i8_8 = arith.constant 80 : i8
    cf.cond_br %22, ^bb11, ^bb1(%c80_i8_8 : i8)
  ^bb11:  // pred: ^bb10
    %23 = arith.subi %21, %c3_i64_7 : i64
    llvm.store %23, %arg1 : i64, !llvm.ptr
    cf.br ^bb9
  ^bb12:  // pred: ^bb13
    %c0_i256 = arith.constant 0 : i256
    %24 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256, %24 : i256, !llvm.ptr
    %25 = llvm.getelementptr %24[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %25, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_9 = arith.constant 0 : i8
    %26 = arith.cmpi ne, %c0_i8_9, %c0_i8_0 : i8
    cf.cond_br %26, ^bb1(%c0_i8_9 : i8), ^bb18
  ^bb13:  // pred: ^bb15
    %c1024_i64_10 = arith.constant 1024 : i64
    %27 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_11 = arith.constant 1 : i64
    %28 = arith.addi %27, %c1_i64_11 : i64
    llvm.store %28, %arg3 : i64, !llvm.ptr
    %29 = arith.cmpi ult, %c1024_i64_10, %28 : i64
    %c92_i8_12 = arith.constant 92 : i8
    cf.cond_br %29, ^bb1(%c92_i8_12 : i8), ^bb12
  ^bb14:  // pred: ^bb8
    %30 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_13 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %31 = arith.cmpi uge, %30, %c3_i64_13 : i64
    %c80_i8_14 = arith.constant 80 : i8
    cf.cond_br %31, ^bb15, ^bb1(%c80_i8_14 : i8)
  ^bb15:  // pred: ^bb14
    %32 = arith.subi %30, %c3_i64_13 : i64
    llvm.store %32, %arg1 : i64, !llvm.ptr
    cf.br ^bb13
  ^bb16:  // pred: ^bb17
    %c32_i256 = arith.constant 32 : i256
    %33 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c32_i256, %33 : i256, !llvm.ptr
    %34 = llvm.getelementptr %33[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %34, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_15 = arith.constant 0 : i8
    %35 = arith.cmpi ne, %c0_i8_15, %c0_i8_0 : i8
    cf.cond_br %35, ^bb1(%c0_i8_15 : i8), ^bb22
  ^bb17:  // pred: ^bb19
    %c1024_i64_16 = arith.constant 1024 : i64
    %36 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_17 = arith.constant 1 : i64
    %37 = arith.addi %36, %c1_i64_17 : i64
    llvm.store %37, %arg3 : i64, !llvm.ptr
    %38 = arith.cmpi ult, %c1024_i64_16, %37 : i64
    %c92_i8_18 = arith.constant 92 : i8
    cf.cond_br %38, ^bb1(%c92_i8_18 : i8), ^bb16
  ^bb18:  // pred: ^bb12
    %39 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_19 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %40 = arith.cmpi uge, %39, %c3_i64_19 : i64
    %c80_i8_20 = arith.constant 80 : i8
    cf.cond_br %40, ^bb19, ^bb1(%c80_i8_20 : i8)
  ^bb19:  // pred: ^bb18
    %41 = arith.subi %39, %c3_i64_19 : i64
    llvm.store %41, %arg1 : i64, !llvm.ptr
    cf.br ^bb17
  ^bb20:  // pred: ^bb21
    %c32_i256_21 = arith.constant 32 : i256
    %42 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c32_i256_21, %42 : i256, !llvm.ptr
    %43 = llvm.getelementptr %42[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %43, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_22 = arith.constant 0 : i8
    %44 = arith.cmpi ne, %c0_i8_22, %c0_i8_0 : i8
    cf.cond_br %44, ^bb1(%c0_i8_22 : i8), ^bb26
  ^bb21:  // pred: ^bb23
    %c1024_i64_23 = arith.constant 1024 : i64
    %45 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_24 = arith.constant 1 : i64
    %46 = arith.addi %45, %c1_i64_24 : i64
    llvm.store %46, %arg3 : i64, !llvm.ptr
    %47 = arith.cmpi ult, %c1024_i64_23, %46 : i64
    %c92_i8_25 = arith.constant 92 : i8
    cf.cond_br %47, ^bb1(%c92_i8_25 : i8), ^bb20
  ^bb22:  // pred: ^bb16
    %48 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_26 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %49 = arith.cmpi uge, %48, %c3_i64_26 : i64
    %c80_i8_27 = arith.constant 80 : i8
    cf.cond_br %49, ^bb23, ^bb1(%c80_i8_27 : i8)
  ^bb23:  // pred: ^bb22
    %50 = arith.subi %48, %c3_i64_26 : i64
    llvm.store %50, %arg1 : i64, !llvm.ptr
    cf.br ^bb21
  ^bb24:  // pred: ^bb25
    %c64_i256 = arith.constant 64 : i256
    %51 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c64_i256, %51 : i256, !llvm.ptr
    %52 = llvm.getelementptr %51[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %52, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_28 = arith.constant 0 : i8
    %53 = arith.cmpi ne, %c0_i8_28, %c0_i8_0 : i8
    cf.cond_br %53, ^bb1(%c0_i8_28 : i8), ^bb30
  ^bb25:  // pred: ^bb27
    %c1024_i64_29 = arith.constant 1024 : i64
    %54 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_30 = arith.constant 1 : i64
    %55 = arith.addi %54, %c1_i64_30 : i64
    llvm.store %55, %arg3 : i64, !llvm.ptr
    %56 = arith.cmpi ult, %c1024_i64_29, %55 : i64
    %c92_i8_31 = arith.constant 92 : i8
    cf.cond_br %56, ^bb1(%c92_i8_31 : i8), ^bb24
  ^bb26:  // pred: ^bb20
    %57 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_32 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %58 = arith.cmpi uge, %57, %c3_i64_32 : i64
    %c80_i8_33 = arith.constant 80 : i8
    cf.cond_br %58, ^bb27, ^bb1(%c80_i8_33 : i8)
  ^bb27:  // pred: ^bb26
    %59 = arith.subi %57, %c3_i64_32 : i64
    llvm.store %59, %arg1 : i64, !llvm.ptr
    cf.br ^bb25
  ^bb28:  // pred: ^bb29
    %c64_i256_34 = arith.constant 64 : i256
    %60 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c64_i256_34, %60 : i256, !llvm.ptr
    %61 = llvm.getelementptr %60[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %61, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_35 = arith.constant 0 : i8
    %62 = arith.cmpi ne, %c0_i8_35, %c0_i8_0 : i8
    cf.cond_br %62, ^bb3(%c0_i8_35 : i8), ^bb32
  ^bb29:  // pred: ^bb31
    %c1024_i64_36 = arith.constant 1024 : i64
    %63 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_37 = arith.constant 1 : i64
    %64 = arith.addi %63, %c1_i64_37 : i64
    llvm.store %64, %arg3 : i64, !llvm.ptr
    %65 = arith.cmpi ult, %c1024_i64_36, %64 : i64
    %c92_i8_38 = arith.constant 92 : i8
    cf.cond_br %65, ^bb1(%c92_i8_38 : i8), ^bb28
  ^bb30:  // pred: ^bb24
    %66 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_39 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %67 = arith.cmpi uge, %66, %c3_i64_39 : i64
    %c80_i8_40 = arith.constant 80 : i8
    cf.cond_br %67, ^bb31, ^bb1(%c80_i8_40 : i8)
  ^bb31:  // pred: ^bb30
    %68 = arith.subi %66, %c3_i64_39 : i64
    llvm.store %68, %arg1 : i64, !llvm.ptr
    cf.br ^bb29
  ^bb32:  // pred: ^bb28
    %69 = call @op242(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %70 = arith.cmpi ne, %69, %c0_i8_0 : i8
    cf.cond_br %70, ^bb3(%69 : i8), ^bb33
  ^bb33:  // pred: ^bb32
    %c0_i64_41 = arith.constant 0 : i64
    %c2_i8 = arith.constant 2 : i8
    %71 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_41, %c0_i64_41, %71, %c2_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c2_i8 : i8
  }
}
