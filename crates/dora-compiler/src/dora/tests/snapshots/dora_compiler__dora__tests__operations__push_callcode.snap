---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  func.func private @dora_fn_nop()
  func.func private @dora_fn_tracing(!llvm.ptr, i8, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_fn_is_static(!llvm.ptr) -> i8
  func.func private @dora_fn_exp(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_chainid(!llvm.ptr) -> i64
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gaslimit_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_memory_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_memory_size(!llvm.ptr) -> i64
  func.func private @dora_fn_code_copy(!llvm.ptr, !llvm.ptr, i64, i64)
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_call(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_returndata_copy(!llvm.ptr, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_tload(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_tstore(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func public @main(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr) -> i8 attributes {llvm.emit_c_interface} {
    %c0_i64 = arith.constant 0 : i64
    %0 = llvm.alloca %c0_i64 x !llvm.ptr : (i64) -> !llvm.ptr
    llvm.store %arg2, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb5
  ^bb1(%1: i8):  // 33 preds: ^bb2, ^bb4, ^bb5, ^bb8, ^bb9, ^bb12, ^bb13, ^bb16, ^bb17, ^bb20, ^bb21, ^bb24, ^bb25, ^bb28, ^bb29, ^bb31, ^bb32, ^bb34, ^bb35, ^bb37, ^bb38, ^bb40, ^bb41, ^bb44, ^bb45, ^bb46, ^bb49, ^bb50, ^bb52, ^bb53, ^bb54, ^bb57, ^bb58
    %c0_i64_0 = arith.constant 0 : i64
    %2 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_0, %c0_i64_0, %2, %1) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %1 : i8
  ^bb2(%3: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %3 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3:  // pred: ^bb4
    %c5000_i256 = arith.constant 5000 : i256
    %4 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c5000_i256, %4 : i256, !llvm.ptr
    %5 = llvm.getelementptr %4[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %5, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb9
  ^bb4:  // pred: ^bb6
    %c1024_i64 = arith.constant 1024 : i64
    %6 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %7 = arith.addi %6, %c1_i64 : i64
    llvm.store %7, %arg3 : i64, !llvm.ptr
    %8 = arith.cmpi ult, %c1024_i64, %7 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %8, ^bb1(%c92_i8 : i8), ^bb3
  ^bb5:  // pred: ^bb0
    %9 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %10 = arith.cmpi uge, %9, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %10, ^bb6, ^bb1(%c80_i8 : i8)
  ^bb6:  // pred: ^bb5
    %11 = arith.subi %9, %c3_i64 : i64
    llvm.store %11, %arg1 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb7:  // pred: ^bb8
    %c8192_i256 = arith.constant 8192 : i256
    %12 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c8192_i256, %12 : i256, !llvm.ptr
    %13 = llvm.getelementptr %12[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %13, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb13
  ^bb8:  // pred: ^bb10
    %c1024_i64_1 = arith.constant 1024 : i64
    %14 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_2 = arith.constant 1 : i64
    %15 = arith.addi %14, %c1_i64_2 : i64
    llvm.store %15, %arg3 : i64, !llvm.ptr
    %16 = arith.cmpi ult, %c1024_i64_1, %15 : i64
    %c92_i8_3 = arith.constant 92 : i8
    cf.cond_br %16, ^bb1(%c92_i8_3 : i8), ^bb7
  ^bb9:  // pred: ^bb3
    %17 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_4 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %18 = arith.cmpi uge, %17, %c3_i64_4 : i64
    %c80_i8_5 = arith.constant 80 : i8
    cf.cond_br %18, ^bb10, ^bb1(%c80_i8_5 : i8)
  ^bb10:  // pred: ^bb9
    %19 = arith.subi %17, %c3_i64_4 : i64
    llvm.store %19, %arg1 : i64, !llvm.ptr
    cf.br ^bb8
  ^bb11:  // pred: ^bb12
    %c0_i256 = arith.constant 0 : i256
    %20 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256, %20 : i256, !llvm.ptr
    %21 = llvm.getelementptr %20[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %21, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb17
  ^bb12:  // pred: ^bb14
    %c1024_i64_6 = arith.constant 1024 : i64
    %22 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_7 = arith.constant 1 : i64
    %23 = arith.addi %22, %c1_i64_7 : i64
    llvm.store %23, %arg3 : i64, !llvm.ptr
    %24 = arith.cmpi ult, %c1024_i64_6, %23 : i64
    %c92_i8_8 = arith.constant 92 : i8
    cf.cond_br %24, ^bb1(%c92_i8_8 : i8), ^bb11
  ^bb13:  // pred: ^bb7
    %25 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_9 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %26 = arith.cmpi uge, %25, %c3_i64_9 : i64
    %c80_i8_10 = arith.constant 80 : i8
    cf.cond_br %26, ^bb14, ^bb1(%c80_i8_10 : i8)
  ^bb14:  // pred: ^bb13
    %27 = arith.subi %25, %c3_i64_9 : i64
    llvm.store %27, %arg1 : i64, !llvm.ptr
    cf.br ^bb12
  ^bb15:  // pred: ^bb16
    %c32_i256 = arith.constant 32 : i256
    %28 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c32_i256, %28 : i256, !llvm.ptr
    %29 = llvm.getelementptr %28[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %29, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb21
  ^bb16:  // pred: ^bb18
    %c1024_i64_11 = arith.constant 1024 : i64
    %30 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_12 = arith.constant 1 : i64
    %31 = arith.addi %30, %c1_i64_12 : i64
    llvm.store %31, %arg3 : i64, !llvm.ptr
    %32 = arith.cmpi ult, %c1024_i64_11, %31 : i64
    %c92_i8_13 = arith.constant 92 : i8
    cf.cond_br %32, ^bb1(%c92_i8_13 : i8), ^bb15
  ^bb17:  // pred: ^bb11
    %33 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_14 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %34 = arith.cmpi uge, %33, %c3_i64_14 : i64
    %c80_i8_15 = arith.constant 80 : i8
    cf.cond_br %34, ^bb18, ^bb1(%c80_i8_15 : i8)
  ^bb18:  // pred: ^bb17
    %35 = arith.subi %33, %c3_i64_14 : i64
    llvm.store %35, %arg1 : i64, !llvm.ptr
    cf.br ^bb16
  ^bb19:  // pred: ^bb20
    %c32_i256_16 = arith.constant 32 : i256
    %36 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c32_i256_16, %36 : i256, !llvm.ptr
    %37 = llvm.getelementptr %36[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %37, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb25
  ^bb20:  // pred: ^bb22
    %c1024_i64_17 = arith.constant 1024 : i64
    %38 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_18 = arith.constant 1 : i64
    %39 = arith.addi %38, %c1_i64_18 : i64
    llvm.store %39, %arg3 : i64, !llvm.ptr
    %40 = arith.cmpi ult, %c1024_i64_17, %39 : i64
    %c92_i8_19 = arith.constant 92 : i8
    cf.cond_br %40, ^bb1(%c92_i8_19 : i8), ^bb19
  ^bb21:  // pred: ^bb15
    %41 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_20 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %42 = arith.cmpi uge, %41, %c3_i64_20 : i64
    %c80_i8_21 = arith.constant 80 : i8
    cf.cond_br %42, ^bb22, ^bb1(%c80_i8_21 : i8)
  ^bb22:  // pred: ^bb21
    %43 = arith.subi %41, %c3_i64_20 : i64
    llvm.store %43, %arg1 : i64, !llvm.ptr
    cf.br ^bb20
  ^bb23:  // pred: ^bb24
    %c64_i256 = arith.constant 64 : i256
    %44 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c64_i256, %44 : i256, !llvm.ptr
    %45 = llvm.getelementptr %44[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %45, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb29
  ^bb24:  // pred: ^bb26
    %c1024_i64_22 = arith.constant 1024 : i64
    %46 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_23 = arith.constant 1 : i64
    %47 = arith.addi %46, %c1_i64_23 : i64
    llvm.store %47, %arg3 : i64, !llvm.ptr
    %48 = arith.cmpi ult, %c1024_i64_22, %47 : i64
    %c92_i8_24 = arith.constant 92 : i8
    cf.cond_br %48, ^bb1(%c92_i8_24 : i8), ^bb23
  ^bb25:  // pred: ^bb19
    %49 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_25 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %50 = arith.cmpi uge, %49, %c3_i64_25 : i64
    %c80_i8_26 = arith.constant 80 : i8
    cf.cond_br %50, ^bb26, ^bb1(%c80_i8_26 : i8)
  ^bb26:  // pred: ^bb25
    %51 = arith.subi %49, %c3_i64_25 : i64
    llvm.store %51, %arg1 : i64, !llvm.ptr
    cf.br ^bb24
  ^bb27:  // pred: ^bb28
    %c64_i256_27 = arith.constant 64 : i256
    %52 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c64_i256_27, %52 : i256, !llvm.ptr
    %53 = llvm.getelementptr %52[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %53, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb41
  ^bb28:  // pred: ^bb30
    %c1024_i64_28 = arith.constant 1024 : i64
    %54 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_29 = arith.constant 1 : i64
    %55 = arith.addi %54, %c1_i64_29 : i64
    llvm.store %55, %arg3 : i64, !llvm.ptr
    %56 = arith.cmpi ult, %c1024_i64_28, %55 : i64
    %c92_i8_30 = arith.constant 92 : i8
    cf.cond_br %56, ^bb1(%c92_i8_30 : i8), ^bb27
  ^bb29:  // pred: ^bb23
    %57 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_31 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %58 = arith.cmpi uge, %57, %c3_i64_31 : i64
    %c80_i8_32 = arith.constant 80 : i8
    cf.cond_br %58, ^bb30, ^bb1(%c80_i8_32 : i8)
  ^bb30:  // pred: ^bb29
    %59 = arith.subi %57, %c3_i64_31 : i64
    llvm.store %59, %arg1 : i64, !llvm.ptr
    cf.br ^bb28
  ^bb31:  // pred: ^bb40
    %60 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %61 = llvm.getelementptr %60[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %62 = llvm.load %61 : !llvm.ptr -> i256
    llvm.store %61, %0 : !llvm.ptr, !llvm.ptr
    %63 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %64 = llvm.getelementptr %63[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %65 = llvm.load %64 : !llvm.ptr -> i256
    llvm.store %64, %0 : !llvm.ptr, !llvm.ptr
    %66 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %67 = llvm.getelementptr %66[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %68 = llvm.load %67 : !llvm.ptr -> i256
    llvm.store %67, %0 : !llvm.ptr, !llvm.ptr
    %69 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %70 = llvm.getelementptr %69[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %71 = llvm.load %70 : !llvm.ptr -> i256
    llvm.store %70, %0 : !llvm.ptr, !llvm.ptr
    %72 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %73 = llvm.getelementptr %72[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %74 = llvm.load %73 : !llvm.ptr -> i256
    llvm.store %73, %0 : !llvm.ptr, !llvm.ptr
    %75 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %76 = llvm.getelementptr %75[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %77 = llvm.load %76 : !llvm.ptr -> i256
    llvm.store %76, %0 : !llvm.ptr, !llvm.ptr
    %78 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %79 = llvm.getelementptr %78[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %80 = llvm.load %79 : !llvm.ptr -> i256
    llvm.store %79, %0 : !llvm.ptr, !llvm.ptr
    %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256
    %81 = arith.cmpi sgt, %74, %c18446744073709551615_i256 : i256
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %81, ^bb1(%c84_i8 : i8), ^bb32
  ^bb32:  // pred: ^bb31
    %82 = arith.trunci %74 : i256 to i64
    %c0_i64_33 = arith.constant 0 : i64
    %83 = arith.cmpi slt, %82, %c0_i64_33 : i64
    %c84_i8_34 = arith.constant 84 : i8
    cf.cond_br %83, ^bb1(%c84_i8_34 : i8), ^bb33
  ^bb33:  // pred: ^bb32
    %c0_i64_35 = arith.constant 0 : i64
    %84 = arith.cmpi ne, %82, %c0_i64_35 : i64
    cf.cond_br %84, ^bb44, ^bb34
  ^bb34:  // 2 preds: ^bb33, ^bb48
    %c18446744073709551615_i256_36 = arith.constant 18446744073709551615 : i256
    %85 = arith.cmpi sgt, %80, %c18446744073709551615_i256_36 : i256
    %c84_i8_37 = arith.constant 84 : i8
    cf.cond_br %85, ^bb1(%c84_i8_37 : i8), ^bb35
  ^bb35:  // pred: ^bb34
    %86 = arith.trunci %80 : i256 to i64
    %c0_i64_38 = arith.constant 0 : i64
    %87 = arith.cmpi slt, %86, %c0_i64_38 : i64
    %c84_i8_39 = arith.constant 84 : i8
    cf.cond_br %87, ^bb1(%c84_i8_39 : i8), ^bb36
  ^bb36:  // pred: ^bb35
    %c0_i64_40 = arith.constant 0 : i64
    %88 = arith.cmpi ne, %86, %c0_i64_40 : i64
    cf.cond_br %88, ^bb52, ^bb37
  ^bb37:  // 2 preds: ^bb36, ^bb56
    %89 = arith.trunci %71 : i256 to i64
    %90 = arith.trunci %77 : i256 to i64
    %91 = llvm.load %arg1 : !llvm.ptr -> i64
    %c1_i256 = arith.constant 1 : i256
    %92 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %68, %92 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i256_41 = arith.constant 1 : i256
    %93 = llvm.alloca %c1_i256_41 x i256 : (i256) -> !llvm.ptr
    llvm.store %62, %93 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i256_42 = arith.constant 1 : i256
    %94 = llvm.alloca %c1_i256_42 x i256 : (i256) -> !llvm.ptr
    llvm.store %65, %94 {alignment = 1 : i64} : i256, !llvm.ptr
    %c3_i8 = arith.constant 3 : i8
    %95 = call @dora_fn_call(%arg0, %93, %94, %92, %89, %82, %90, %86, %91, %c3_i8) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
    %96 = llvm.getelementptr %95[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %97 = llvm.load %96 : !llvm.ptr -> i8
    %98 = llvm.getelementptr %95[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %99 = llvm.load %98 : !llvm.ptr -> i8
    %c0_i8 = arith.constant 0 : i8
    %100 = arith.cmpi ne, %99, %c0_i8 : i8
    cf.cond_br %100, ^bb1(%99 : i8), ^bb38
  ^bb38:  // pred: ^bb37
    %101 = llvm.getelementptr %95[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %102 = llvm.load %101 : !llvm.ptr -> i64
    %103 = llvm.load %arg1 : !llvm.ptr -> i64
    %104 = arith.cmpi ult, %103, %102 : i64
    scf.if %104 {
    } else {
      %171 = arith.subi %103, %102 : i64
      llvm.store %171, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_43 = arith.constant 80 : i8
    cf.cond_br %104, ^bb1(%c80_i8_43 : i8), ^bb39
  ^bb39:  // pred: ^bb38
    %105 = arith.extui %97 : i8 to i256
    %106 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %105, %106 : i256, !llvm.ptr
    %107 = llvm.getelementptr %106[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %107, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb43
  ^bb40:  // pred: ^bb42
    %c1024_i64_44 = arith.constant 1024 : i64
    %108 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-6_i64 = arith.constant -6 : i64
    %109 = arith.addi %108, %c-6_i64 : i64
    llvm.store %109, %arg3 : i64, !llvm.ptr
    %c7_i64 = arith.constant 7 : i64
    %110 = arith.cmpi ult, %108, %c7_i64 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %110, ^bb1(%c91_i8 : i8), ^bb31
  ^bb41:  // pred: ^bb27
    %111 = llvm.load %arg1 : !llvm.ptr -> i64
    %c0_i64_45 = arith.constant 0 : i64
    call @dora_fn_nop() : () -> ()
    %112 = arith.cmpi uge, %111, %c0_i64_45 : i64
    %c80_i8_46 = arith.constant 80 : i8
    cf.cond_br %112, ^bb42, ^bb1(%c80_i8_46 : i8)
  ^bb42:  // pred: ^bb41
    %113 = arith.subi %111, %c0_i64_45 : i64
    llvm.store %113, %arg1 : i64, !llvm.ptr
    cf.br ^bb40
  ^bb43:  // pred: ^bb39
    %c0_i64_47 = arith.constant 0 : i64
    %c2_i8 = arith.constant 2 : i8
    %114 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_47, %c0_i64_47, %114, %c2_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c2_i8 : i8
  ^bb44:  // pred: ^bb33
    %c18446744073709551615_i256_48 = arith.constant 18446744073709551615 : i256
    %115 = arith.cmpi sgt, %71, %c18446744073709551615_i256_48 : i256
    %c84_i8_49 = arith.constant 84 : i8
    cf.cond_br %115, ^bb1(%c84_i8_49 : i8), ^bb45
  ^bb45:  // pred: ^bb44
    %116 = arith.trunci %71 : i256 to i64
    %c0_i64_50 = arith.constant 0 : i64
    %117 = arith.cmpi slt, %116, %c0_i64_50 : i64
    %c84_i8_51 = arith.constant 84 : i8
    cf.cond_br %117, ^bb1(%c84_i8_51 : i8), ^bb46
  ^bb46:  // pred: ^bb45
    %118 = arith.addi %116, %82 : i64
    %c0_i64_52 = arith.constant 0 : i64
    %119 = arith.cmpi slt, %118, %c0_i64_52 : i64
    %c84_i8_53 = arith.constant 84 : i8
    cf.cond_br %119, ^bb1(%c84_i8_53 : i8), ^bb47
  ^bb47:  // pred: ^bb46
    %c31_i64 = arith.constant 31 : i64
    %c32_i64 = arith.constant 32 : i64
    %120 = arith.addi %118, %c31_i64 : i64
    %121 = arith.divui %120, %c32_i64 : i64
    %c32_i64_54 = arith.constant 32 : i64
    %122 = arith.muli %121, %c32_i64_54 : i64
    %123 = call @dora_fn_memory_size(%arg0) : (!llvm.ptr) -> i64
    %c31_i64_55 = arith.constant 31 : i64
    %c32_i64_56 = arith.constant 32 : i64
    %124 = arith.addi %123, %c31_i64_55 : i64
    %125 = arith.divui %124, %c32_i64_56 : i64
    %126 = arith.muli %125, %c32_i64_54 : i64
    %127 = arith.cmpi ult, %126, %122 : i64
    cf.cond_br %127, ^bb49, ^bb48
  ^bb48:  // 2 preds: ^bb47, ^bb51
    cf.br ^bb34
  ^bb49:  // pred: ^bb47
    %c3_i64_57 = arith.constant 3 : i64
    %c512_i64 = arith.constant 512 : i64
    %128 = arith.muli %125, %125 : i64
    %129 = arith.divui %128, %c512_i64 : i64
    %130 = arith.muli %125, %c3_i64_57 : i64
    %131 = arith.addi %129, %130 : i64
    %c3_i64_58 = arith.constant 3 : i64
    %c512_i64_59 = arith.constant 512 : i64
    %132 = arith.muli %121, %121 : i64
    %133 = arith.divui %132, %c512_i64_59 : i64
    %134 = arith.muli %121, %c3_i64_58 : i64
    %135 = arith.addi %133, %134 : i64
    %136 = arith.subi %135, %131 : i64
    %137 = llvm.load %arg1 : !llvm.ptr -> i64
    %138 = arith.cmpi ult, %137, %136 : i64
    scf.if %138 {
    } else {
      %171 = arith.subi %137, %136 : i64
      llvm.store %171, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_60 = arith.constant 80 : i8
    cf.cond_br %138, ^bb1(%c80_i8_60 : i8), ^bb50
  ^bb50:  // pred: ^bb49
    %139 = call @dora_fn_extend_memory(%arg0, %122) : (!llvm.ptr, i64) -> !llvm.ptr
    %140 = llvm.getelementptr %139[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %141 = llvm.load %140 : !llvm.ptr -> i8
    %c0_i8_61 = arith.constant 0 : i8
    %142 = arith.cmpi ne, %141, %c0_i8_61 : i8
    cf.cond_br %142, ^bb1(%141 : i8), ^bb51
  ^bb51:  // pred: ^bb50
    cf.br ^bb48
  ^bb52:  // pred: ^bb36
    %c18446744073709551615_i256_62 = arith.constant 18446744073709551615 : i256
    %143 = arith.cmpi sgt, %77, %c18446744073709551615_i256_62 : i256
    %c84_i8_63 = arith.constant 84 : i8
    cf.cond_br %143, ^bb1(%c84_i8_63 : i8), ^bb53
  ^bb53:  // pred: ^bb52
    %144 = arith.trunci %77 : i256 to i64
    %c0_i64_64 = arith.constant 0 : i64
    %145 = arith.cmpi slt, %144, %c0_i64_64 : i64
    %c84_i8_65 = arith.constant 84 : i8
    cf.cond_br %145, ^bb1(%c84_i8_65 : i8), ^bb54
  ^bb54:  // pred: ^bb53
    %146 = arith.addi %144, %86 : i64
    %c0_i64_66 = arith.constant 0 : i64
    %147 = arith.cmpi slt, %146, %c0_i64_66 : i64
    %c84_i8_67 = arith.constant 84 : i8
    cf.cond_br %147, ^bb1(%c84_i8_67 : i8), ^bb55
  ^bb55:  // pred: ^bb54
    %c31_i64_68 = arith.constant 31 : i64
    %c32_i64_69 = arith.constant 32 : i64
    %148 = arith.addi %146, %c31_i64_68 : i64
    %149 = arith.divui %148, %c32_i64_69 : i64
    %c32_i64_70 = arith.constant 32 : i64
    %150 = arith.muli %149, %c32_i64_70 : i64
    %151 = call @dora_fn_memory_size(%arg0) : (!llvm.ptr) -> i64
    %c31_i64_71 = arith.constant 31 : i64
    %c32_i64_72 = arith.constant 32 : i64
    %152 = arith.addi %151, %c31_i64_71 : i64
    %153 = arith.divui %152, %c32_i64_72 : i64
    %154 = arith.muli %153, %c32_i64_70 : i64
    %155 = arith.cmpi ult, %154, %150 : i64
    cf.cond_br %155, ^bb57, ^bb56
  ^bb56:  // 2 preds: ^bb55, ^bb59
    cf.br ^bb37
  ^bb57:  // pred: ^bb55
    %c3_i64_73 = arith.constant 3 : i64
    %c512_i64_74 = arith.constant 512 : i64
    %156 = arith.muli %153, %153 : i64
    %157 = arith.divui %156, %c512_i64_74 : i64
    %158 = arith.muli %153, %c3_i64_73 : i64
    %159 = arith.addi %157, %158 : i64
    %c3_i64_75 = arith.constant 3 : i64
    %c512_i64_76 = arith.constant 512 : i64
    %160 = arith.muli %149, %149 : i64
    %161 = arith.divui %160, %c512_i64_76 : i64
    %162 = arith.muli %149, %c3_i64_75 : i64
    %163 = arith.addi %161, %162 : i64
    %164 = arith.subi %163, %159 : i64
    %165 = llvm.load %arg1 : !llvm.ptr -> i64
    %166 = arith.cmpi ult, %165, %164 : i64
    scf.if %166 {
    } else {
      %171 = arith.subi %165, %164 : i64
      llvm.store %171, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_77 = arith.constant 80 : i8
    cf.cond_br %166, ^bb1(%c80_i8_77 : i8), ^bb58
  ^bb58:  // pred: ^bb57
    %167 = call @dora_fn_extend_memory(%arg0, %150) : (!llvm.ptr, i64) -> !llvm.ptr
    %168 = llvm.getelementptr %167[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %169 = llvm.load %168 : !llvm.ptr -> i8
    %c0_i8_78 = arith.constant 0 : i8
    %170 = arith.cmpi ne, %169, %c0_i8_78 : i8
    cf.cond_br %170, ^bb1(%169 : i8), ^bb59
  ^bb59:  // pred: ^bb58
    cf.br ^bb56
  }
}
