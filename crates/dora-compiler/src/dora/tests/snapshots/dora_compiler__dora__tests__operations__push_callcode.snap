---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  llvm.mlir.global internal @dora_global_stack_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_stack_length() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_memory_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_memory_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_calldata_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_calldata_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_gas_counter() {addr_space = 0 : i32} : i64
  llvm.mlir.global external @dora_global_ctx_is_static() {addr_space = 0 : i32} : !llvm.ptr
  func.func private @dora_fn_debug_print(i32)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_chainid(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_gaslimit(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_code_copy(!llvm.ptr, i64, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_call(!llvm.ptr, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr, i8) -> !llvm.ptr
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, i64, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_return_data_size(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_return_data_copy(!llvm.ptr, i64, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_transient_storage_read(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_transient_storage_write(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func public @main(%arg0: !llvm.ptr, %arg1: i64) -> i8 attributes {llvm.emit_c_interface} {
    %c1024_i256 = arith.constant 1024 : i256
    %0 = llvm.alloca %c1024_i256 x i256 : (i256) -> !llvm.ptr
    %1 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    llvm.store %0, %1 : !llvm.ptr, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %2 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    llvm.store %c0_i64, %2 : i64, !llvm.ptr
    %c0_i64_0 = arith.constant 0 : i64
    %3 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %c0_i64_0, %3 : i64, !llvm.ptr
    %4 = call @dora_fn_calldata(%arg0) : (!llvm.ptr) -> !llvm.ptr
    %5 = llvm.mlir.addressof @dora_global_calldata_ptr : !llvm.ptr
    llvm.store %4, %5 : !llvm.ptr, !llvm.ptr
    %6 = call @dora_fn_calldata_size(%arg0) : (!llvm.ptr) -> i64
    %7 = llvm.mlir.addressof @dora_global_calldata_size : !llvm.ptr
    llvm.store %6, %7 : i64, !llvm.ptr
    %8 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    llvm.store %arg1, %8 : i64, !llvm.ptr
    %9 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64 = arith.constant 1024 : i64
    %10 = llvm.load %9 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %11 = arith.addi %10, %c1_i64 : i64
    llvm.store %11, %9 : i64, !llvm.ptr
    %12 = arith.cmpi ult, %c1024_i64, %11 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %12, ^bb1(%c92_i8 : i8), ^bb3
  ^bb1(%13: i8):  // 17 preds: ^bb0, ^bb2, ^bb3, ^bb4, ^bb5, ^bb6, ^bb7, ^bb8, ^bb9, ^bb10, ^bb11, ^bb12, ^bb13, ^bb14, ^bb15, ^bb16, ^bb17
    %c0_i64_1 = arith.constant 0 : i64
    %14 = call @dora_fn_write_result(%arg0, %c0_i64_1, %c0_i64_1, %c0_i64_1, %13) : (!llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
    return %13 : i8
  ^bb2(%15: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %15 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3:  // pred: ^bb0
    %c5000_i256 = arith.constant 5000 : i256
    %16 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %17 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    llvm.store %c5000_i256, %17 : i256, !llvm.ptr
    %18 = llvm.getelementptr %17[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %18, %16 : !llvm.ptr, !llvm.ptr
    %19 = llvm.load %9 : !llvm.ptr -> i64
    %c1_i64_2 = arith.constant 1 : i64
    %20 = arith.addi %19, %c1_i64_2 : i64
    llvm.store %20, %9 : i64, !llvm.ptr
    %21 = arith.cmpi ult, %c1024_i64, %20 : i64
    %c92_i8_3 = arith.constant 92 : i8
    cf.cond_br %21, ^bb1(%c92_i8_3 : i8), ^bb4
  ^bb4:  // pred: ^bb3
    %c8192_i256 = arith.constant 8192 : i256
    %22 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %23 = llvm.load %22 : !llvm.ptr -> !llvm.ptr
    llvm.store %c8192_i256, %23 : i256, !llvm.ptr
    %24 = llvm.getelementptr %23[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %24, %22 : !llvm.ptr, !llvm.ptr
    %25 = llvm.load %9 : !llvm.ptr -> i64
    %c1_i64_4 = arith.constant 1 : i64
    %26 = arith.addi %25, %c1_i64_4 : i64
    llvm.store %26, %9 : i64, !llvm.ptr
    %27 = arith.cmpi ult, %c1024_i64, %26 : i64
    %c92_i8_5 = arith.constant 92 : i8
    cf.cond_br %27, ^bb1(%c92_i8_5 : i8), ^bb5
  ^bb5:  // pred: ^bb4
    %c0_i256 = arith.constant 0 : i256
    %28 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %29 = llvm.load %28 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256, %29 : i256, !llvm.ptr
    %30 = llvm.getelementptr %29[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %30, %28 : !llvm.ptr, !llvm.ptr
    %31 = llvm.load %9 : !llvm.ptr -> i64
    %c1_i64_6 = arith.constant 1 : i64
    %32 = arith.addi %31, %c1_i64_6 : i64
    llvm.store %32, %9 : i64, !llvm.ptr
    %33 = arith.cmpi ult, %c1024_i64, %32 : i64
    %c92_i8_7 = arith.constant 92 : i8
    cf.cond_br %33, ^bb1(%c92_i8_7 : i8), ^bb6
  ^bb6:  // pred: ^bb5
    %c32_i256 = arith.constant 32 : i256
    %34 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %35 = llvm.load %34 : !llvm.ptr -> !llvm.ptr
    llvm.store %c32_i256, %35 : i256, !llvm.ptr
    %36 = llvm.getelementptr %35[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %36, %34 : !llvm.ptr, !llvm.ptr
    %37 = llvm.load %9 : !llvm.ptr -> i64
    %c1_i64_8 = arith.constant 1 : i64
    %38 = arith.addi %37, %c1_i64_8 : i64
    llvm.store %38, %9 : i64, !llvm.ptr
    %39 = arith.cmpi ult, %c1024_i64, %38 : i64
    %c92_i8_9 = arith.constant 92 : i8
    cf.cond_br %39, ^bb1(%c92_i8_9 : i8), ^bb7
  ^bb7:  // pred: ^bb6
    %c32_i256_10 = arith.constant 32 : i256
    %40 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %41 = llvm.load %40 : !llvm.ptr -> !llvm.ptr
    llvm.store %c32_i256_10, %41 : i256, !llvm.ptr
    %42 = llvm.getelementptr %41[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %42, %40 : !llvm.ptr, !llvm.ptr
    %43 = llvm.load %9 : !llvm.ptr -> i64
    %c1_i64_11 = arith.constant 1 : i64
    %44 = arith.addi %43, %c1_i64_11 : i64
    llvm.store %44, %9 : i64, !llvm.ptr
    %45 = arith.cmpi ult, %c1024_i64, %44 : i64
    %c92_i8_12 = arith.constant 92 : i8
    cf.cond_br %45, ^bb1(%c92_i8_12 : i8), ^bb8
  ^bb8:  // pred: ^bb7
    %c64_i256 = arith.constant 64 : i256
    %46 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %47 = llvm.load %46 : !llvm.ptr -> !llvm.ptr
    llvm.store %c64_i256, %47 : i256, !llvm.ptr
    %48 = llvm.getelementptr %47[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %48, %46 : !llvm.ptr, !llvm.ptr
    %49 = llvm.load %9 : !llvm.ptr -> i64
    %c1_i64_13 = arith.constant 1 : i64
    %50 = arith.addi %49, %c1_i64_13 : i64
    llvm.store %50, %9 : i64, !llvm.ptr
    %51 = arith.cmpi ult, %c1024_i64, %50 : i64
    %c92_i8_14 = arith.constant 92 : i8
    cf.cond_br %51, ^bb1(%c92_i8_14 : i8), ^bb9
  ^bb9:  // pred: ^bb8
    %c64_i256_15 = arith.constant 64 : i256
    %52 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %53 = llvm.load %52 : !llvm.ptr -> !llvm.ptr
    llvm.store %c64_i256_15, %53 : i256, !llvm.ptr
    %54 = llvm.getelementptr %53[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %54, %52 : !llvm.ptr, !llvm.ptr
    %55 = llvm.load %9 : !llvm.ptr -> i64
    %c-6_i64 = arith.constant -6 : i64
    %56 = arith.addi %55, %c-6_i64 : i64
    llvm.store %56, %9 : i64, !llvm.ptr
    %c7_i64 = arith.constant 7 : i64
    %57 = arith.cmpi ult, %55, %c7_i64 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %57, ^bb1(%c91_i8 : i8), ^bb10
  ^bb10:  // pred: ^bb9
    %58 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %59 = llvm.load %58 : !llvm.ptr -> !llvm.ptr
    %60 = llvm.getelementptr %59[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %61 = llvm.load %60 : !llvm.ptr -> i256
    llvm.store %60, %58 : !llvm.ptr, !llvm.ptr
    %62 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %63 = llvm.load %62 : !llvm.ptr -> !llvm.ptr
    %64 = llvm.getelementptr %63[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %65 = llvm.load %64 : !llvm.ptr -> i256
    llvm.store %64, %62 : !llvm.ptr, !llvm.ptr
    %66 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %67 = llvm.load %66 : !llvm.ptr -> !llvm.ptr
    %68 = llvm.getelementptr %67[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %69 = llvm.load %68 : !llvm.ptr -> i256
    llvm.store %68, %66 : !llvm.ptr, !llvm.ptr
    %70 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %71 = llvm.load %70 : !llvm.ptr -> !llvm.ptr
    %72 = llvm.getelementptr %71[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %73 = llvm.load %72 : !llvm.ptr -> i256
    llvm.store %72, %70 : !llvm.ptr, !llvm.ptr
    %74 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %75 = llvm.load %74 : !llvm.ptr -> !llvm.ptr
    %76 = llvm.getelementptr %75[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %77 = llvm.load %76 : !llvm.ptr -> i256
    llvm.store %76, %74 : !llvm.ptr, !llvm.ptr
    %78 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %79 = llvm.load %78 : !llvm.ptr -> !llvm.ptr
    %80 = llvm.getelementptr %79[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %81 = llvm.load %80 : !llvm.ptr -> i256
    llvm.store %80, %78 : !llvm.ptr, !llvm.ptr
    %82 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %83 = llvm.load %82 : !llvm.ptr -> !llvm.ptr
    %84 = llvm.getelementptr %83[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %85 = llvm.load %84 : !llvm.ptr -> i256
    llvm.store %84, %82 : !llvm.ptr, !llvm.ptr
    %86 = llvm.mlir.addressof @dora_global_ctx_is_static : !llvm.ptr
    %87 = llvm.load %86 : !llvm.ptr -> i1
    %c0_i256_16 = arith.constant 0 : i256
    %88 = arith.cmpi ne, %69, %c0_i256_16 : i256
    %89 = arith.andi %87, %88 : i1
    %c86_i8 = arith.constant 86 : i8
    cf.cond_br %89, ^bb1(%c86_i8 : i8), ^bb11
  ^bb11:  // pred: ^bb10
    %90 = arith.trunci %61 : i256 to i64
    %91 = arith.trunci %73 : i256 to i64
    %c0_i64_17 = arith.constant 0 : i64
    %92 = arith.cmpi slt, %91, %c0_i64_17 : i64
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %92, ^bb1(%c84_i8 : i8), ^bb12
  ^bb12:  // pred: ^bb11
    %93 = arith.trunci %77 : i256 to i64
    %c0_i64_18 = arith.constant 0 : i64
    %94 = arith.cmpi slt, %93, %c0_i64_18 : i64
    %c84_i8_19 = arith.constant 84 : i8
    cf.cond_br %94, ^bb1(%c84_i8_19 : i8), ^bb13
  ^bb13:  // pred: ^bb12
    %95 = arith.trunci %81 : i256 to i64
    %c0_i64_20 = arith.constant 0 : i64
    %96 = arith.cmpi slt, %95, %c0_i64_20 : i64
    %c84_i8_21 = arith.constant 84 : i8
    cf.cond_br %96, ^bb1(%c84_i8_21 : i8), ^bb14
  ^bb14:  // pred: ^bb13
    %97 = arith.trunci %85 : i256 to i64
    %c0_i64_22 = arith.constant 0 : i64
    %98 = arith.cmpi slt, %97, %c0_i64_22 : i64
    %c84_i8_23 = arith.constant 84 : i8
    cf.cond_br %98, ^bb1(%c84_i8_23 : i8), ^bb15
  ^bb15:  // pred: ^bb14
    %99 = arith.addi %91, %93 : i64
    %100 = arith.addi %95, %97 : i64
    %101 = arith.maxui %99, %100 : i64
    %c0_i64_24 = arith.constant 0 : i64
    %102 = arith.cmpi slt, %101, %c0_i64_24 : i64
    %c84_i8_25 = arith.constant 84 : i8
    cf.cond_br %102, ^bb1(%c84_i8_25 : i8), ^bb16
  ^bb16:  // pred: ^bb15
    %c31_i64 = arith.constant 31 : i64
    %c32_i64 = arith.constant 32 : i64
    %103 = arith.addi %101, %c31_i64 : i64
    %104 = arith.divui %103, %c32_i64 : i64
    %105 = arith.muli %104, %c32_i64 : i64
    %106 = call @dora_fn_extend_memory(%arg0, %105) : (!llvm.ptr, i64) -> !llvm.ptr
    %107 = llvm.getelementptr %106[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %108 = llvm.load %107 : !llvm.ptr -> !llvm.ptr
    %109 = llvm.getelementptr %106[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %110 = llvm.load %109 : !llvm.ptr -> i8
    %c0_i8 = arith.constant 0 : i8
    %111 = arith.cmpi ne, %110, %c0_i8 : i8
    cf.cond_br %111, ^bb1(%110 : i8), ^bb17
  ^bb17:  // pred: ^bb16
    %112 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    llvm.store %108, %112 : !llvm.ptr, !llvm.ptr
    %113 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %105, %113 : i64, !llvm.ptr
    %114 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %115 = llvm.load %114 : !llvm.ptr -> i64
    %c1_i256 = arith.constant 1 : i256
    %116 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %69, %116 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i256_26 = arith.constant 1 : i256
    %117 = llvm.alloca %c1_i256_26 x i256 : (i256) -> !llvm.ptr
    llvm.store %65, %117 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i64_27 = arith.constant 1 : i64
    %118 = llvm.alloca %c1_i64_27 x i64 : (i64) -> !llvm.ptr
    %c0_i8_28 = arith.constant 0 : i8
    %119 = call @dora_fn_call(%arg0, %90, %117, %116, %91, %93, %95, %97, %115, %118, %c0_i8_28) : (!llvm.ptr, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr, i8) -> !llvm.ptr
    %120 = llvm.getelementptr %119[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %121 = llvm.load %120 : !llvm.ptr -> i8
    %122 = llvm.getelementptr %119[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %123 = llvm.load %122 : !llvm.ptr -> i8
    %c0_i8_29 = arith.constant 0 : i8
    %124 = arith.cmpi ne, %123, %c0_i8_29 : i8
    cf.cond_br %124, ^bb1(%123 : i8), ^bb18
  ^bb18:  // pred: ^bb17
    %125 = llvm.load %118 : !llvm.ptr -> i64
    %126 = arith.extui %121 : i8 to i256
    %127 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %128 = llvm.load %127 : !llvm.ptr -> !llvm.ptr
    llvm.store %126, %128 : i256, !llvm.ptr
    %129 = llvm.getelementptr %128[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %129, %127 : !llvm.ptr, !llvm.ptr
    cf.br ^bb19
  ^bb19:  // pred: ^bb18
    %c0_i64_30 = arith.constant 0 : i64
    %c1_i8 = arith.constant 1 : i8
    %130 = call @dora_fn_write_result(%arg0, %c0_i64_30, %c0_i64_30, %arg1, %c1_i8) : (!llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
    return %c1_i8 : i8
  }
}
