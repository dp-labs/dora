---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  llvm.mlir.global internal @dora_global_memory_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_memory_size() {addr_space = 0 : i32} : i64
  func.func private @dora_fn_nop()
  func.func private @dora_fn_tracing(!llvm.ptr, i8, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_fn_is_static(!llvm.ptr) -> i8
  func.func private @dora_fn_exp(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_chainid(!llvm.ptr) -> i64
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gaslimit_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_code_copy(!llvm.ptr, !llvm.ptr, i64, i64)
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_call(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_returndata_copy(!llvm.ptr, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_tload(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_tstore(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func public @main(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr) -> i8 attributes {llvm.emit_c_interface} {
    %c0_i64 = arith.constant 0 : i64
    %0 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %c0_i64, %0 : i64, !llvm.ptr
    cf.br ^bb5
  ^bb1(%1: i8):  // 33 preds: ^bb2, ^bb4, ^bb5, ^bb8, ^bb9, ^bb12, ^bb13, ^bb16, ^bb17, ^bb20, ^bb21, ^bb24, ^bb25, ^bb28, ^bb29, ^bb31, ^bb32, ^bb34, ^bb35, ^bb37, ^bb38, ^bb40, ^bb41, ^bb44, ^bb45, ^bb46, ^bb49, ^bb50, ^bb52, ^bb53, ^bb54, ^bb57, ^bb58
    %c0_i64_0 = arith.constant 0 : i64
    %2 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_0, %c0_i64_0, %2, %1) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %1 : i8
  ^bb2(%3: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %3 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3:  // pred: ^bb4
    %c5000_i256 = arith.constant 5000 : i256
    %4 = llvm.load %arg3 : !llvm.ptr -> i64
    %5 = llvm.getelementptr %arg2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64 = arith.constant 1 : i64
    %6 = arith.addi %4, %c1_i64 : i64
    llvm.store %6, %arg3 : i64, !llvm.ptr
    llvm.store %c5000_i256, %5 : i256, !llvm.ptr
    cf.br ^bb9
  ^bb4:  // pred: ^bb6
    %c1024_i64 = arith.constant 1024 : i64
    %7 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_1 = arith.constant 1 : i64
    %8 = arith.addi %7, %c1_i64_1 : i64
    %9 = arith.cmpi ult, %c1024_i64, %8 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %9, ^bb1(%c92_i8 : i8), ^bb3
  ^bb5:  // pred: ^bb0
    %10 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %11 = arith.cmpi uge, %10, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %11, ^bb6, ^bb1(%c80_i8 : i8)
  ^bb6:  // pred: ^bb5
    %12 = arith.subi %10, %c3_i64 : i64
    llvm.store %12, %arg1 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb7:  // pred: ^bb8
    %c8192_i256 = arith.constant 8192 : i256
    %13 = llvm.load %arg3 : !llvm.ptr -> i64
    %14 = llvm.getelementptr %arg2[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_2 = arith.constant 1 : i64
    %15 = arith.addi %13, %c1_i64_2 : i64
    llvm.store %15, %arg3 : i64, !llvm.ptr
    llvm.store %c8192_i256, %14 : i256, !llvm.ptr
    cf.br ^bb13
  ^bb8:  // pred: ^bb10
    %c1024_i64_3 = arith.constant 1024 : i64
    %16 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_4 = arith.constant 1 : i64
    %17 = arith.addi %16, %c1_i64_4 : i64
    %18 = arith.cmpi ult, %c1024_i64_3, %17 : i64
    %c92_i8_5 = arith.constant 92 : i8
    cf.cond_br %18, ^bb1(%c92_i8_5 : i8), ^bb7
  ^bb9:  // pred: ^bb3
    %19 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_6 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %20 = arith.cmpi uge, %19, %c3_i64_6 : i64
    %c80_i8_7 = arith.constant 80 : i8
    cf.cond_br %20, ^bb10, ^bb1(%c80_i8_7 : i8)
  ^bb10:  // pred: ^bb9
    %21 = arith.subi %19, %c3_i64_6 : i64
    llvm.store %21, %arg1 : i64, !llvm.ptr
    cf.br ^bb8
  ^bb11:  // pred: ^bb12
    %c0_i256 = arith.constant 0 : i256
    %22 = llvm.load %arg3 : !llvm.ptr -> i64
    %23 = llvm.getelementptr %arg2[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_8 = arith.constant 1 : i64
    %24 = arith.addi %22, %c1_i64_8 : i64
    llvm.store %24, %arg3 : i64, !llvm.ptr
    llvm.store %c0_i256, %23 : i256, !llvm.ptr
    cf.br ^bb17
  ^bb12:  // pred: ^bb14
    %c1024_i64_9 = arith.constant 1024 : i64
    %25 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_10 = arith.constant 1 : i64
    %26 = arith.addi %25, %c1_i64_10 : i64
    %27 = arith.cmpi ult, %c1024_i64_9, %26 : i64
    %c92_i8_11 = arith.constant 92 : i8
    cf.cond_br %27, ^bb1(%c92_i8_11 : i8), ^bb11
  ^bb13:  // pred: ^bb7
    %28 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_12 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %29 = arith.cmpi uge, %28, %c3_i64_12 : i64
    %c80_i8_13 = arith.constant 80 : i8
    cf.cond_br %29, ^bb14, ^bb1(%c80_i8_13 : i8)
  ^bb14:  // pred: ^bb13
    %30 = arith.subi %28, %c3_i64_12 : i64
    llvm.store %30, %arg1 : i64, !llvm.ptr
    cf.br ^bb12
  ^bb15:  // pred: ^bb16
    %c32_i256 = arith.constant 32 : i256
    %31 = llvm.load %arg3 : !llvm.ptr -> i64
    %32 = llvm.getelementptr %arg2[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_14 = arith.constant 1 : i64
    %33 = arith.addi %31, %c1_i64_14 : i64
    llvm.store %33, %arg3 : i64, !llvm.ptr
    llvm.store %c32_i256, %32 : i256, !llvm.ptr
    cf.br ^bb21
  ^bb16:  // pred: ^bb18
    %c1024_i64_15 = arith.constant 1024 : i64
    %34 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_16 = arith.constant 1 : i64
    %35 = arith.addi %34, %c1_i64_16 : i64
    %36 = arith.cmpi ult, %c1024_i64_15, %35 : i64
    %c92_i8_17 = arith.constant 92 : i8
    cf.cond_br %36, ^bb1(%c92_i8_17 : i8), ^bb15
  ^bb17:  // pred: ^bb11
    %37 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_18 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %38 = arith.cmpi uge, %37, %c3_i64_18 : i64
    %c80_i8_19 = arith.constant 80 : i8
    cf.cond_br %38, ^bb18, ^bb1(%c80_i8_19 : i8)
  ^bb18:  // pred: ^bb17
    %39 = arith.subi %37, %c3_i64_18 : i64
    llvm.store %39, %arg1 : i64, !llvm.ptr
    cf.br ^bb16
  ^bb19:  // pred: ^bb20
    %c32_i256_20 = arith.constant 32 : i256
    %40 = llvm.load %arg3 : !llvm.ptr -> i64
    %41 = llvm.getelementptr %arg2[%40] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_21 = arith.constant 1 : i64
    %42 = arith.addi %40, %c1_i64_21 : i64
    llvm.store %42, %arg3 : i64, !llvm.ptr
    llvm.store %c32_i256_20, %41 : i256, !llvm.ptr
    cf.br ^bb25
  ^bb20:  // pred: ^bb22
    %c1024_i64_22 = arith.constant 1024 : i64
    %43 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_23 = arith.constant 1 : i64
    %44 = arith.addi %43, %c1_i64_23 : i64
    %45 = arith.cmpi ult, %c1024_i64_22, %44 : i64
    %c92_i8_24 = arith.constant 92 : i8
    cf.cond_br %45, ^bb1(%c92_i8_24 : i8), ^bb19
  ^bb21:  // pred: ^bb15
    %46 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_25 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %47 = arith.cmpi uge, %46, %c3_i64_25 : i64
    %c80_i8_26 = arith.constant 80 : i8
    cf.cond_br %47, ^bb22, ^bb1(%c80_i8_26 : i8)
  ^bb22:  // pred: ^bb21
    %48 = arith.subi %46, %c3_i64_25 : i64
    llvm.store %48, %arg1 : i64, !llvm.ptr
    cf.br ^bb20
  ^bb23:  // pred: ^bb24
    %c64_i256 = arith.constant 64 : i256
    %49 = llvm.load %arg3 : !llvm.ptr -> i64
    %50 = llvm.getelementptr %arg2[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_27 = arith.constant 1 : i64
    %51 = arith.addi %49, %c1_i64_27 : i64
    llvm.store %51, %arg3 : i64, !llvm.ptr
    llvm.store %c64_i256, %50 : i256, !llvm.ptr
    cf.br ^bb29
  ^bb24:  // pred: ^bb26
    %c1024_i64_28 = arith.constant 1024 : i64
    %52 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_29 = arith.constant 1 : i64
    %53 = arith.addi %52, %c1_i64_29 : i64
    %54 = arith.cmpi ult, %c1024_i64_28, %53 : i64
    %c92_i8_30 = arith.constant 92 : i8
    cf.cond_br %54, ^bb1(%c92_i8_30 : i8), ^bb23
  ^bb25:  // pred: ^bb19
    %55 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_31 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %56 = arith.cmpi uge, %55, %c3_i64_31 : i64
    %c80_i8_32 = arith.constant 80 : i8
    cf.cond_br %56, ^bb26, ^bb1(%c80_i8_32 : i8)
  ^bb26:  // pred: ^bb25
    %57 = arith.subi %55, %c3_i64_31 : i64
    llvm.store %57, %arg1 : i64, !llvm.ptr
    cf.br ^bb24
  ^bb27:  // pred: ^bb28
    %c64_i256_33 = arith.constant 64 : i256
    %58 = llvm.load %arg3 : !llvm.ptr -> i64
    %59 = llvm.getelementptr %arg2[%58] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_34 = arith.constant 1 : i64
    %60 = arith.addi %58, %c1_i64_34 : i64
    llvm.store %60, %arg3 : i64, !llvm.ptr
    llvm.store %c64_i256_33, %59 : i256, !llvm.ptr
    cf.br ^bb41
  ^bb28:  // pred: ^bb30
    %c1024_i64_35 = arith.constant 1024 : i64
    %61 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_36 = arith.constant 1 : i64
    %62 = arith.addi %61, %c1_i64_36 : i64
    %63 = arith.cmpi ult, %c1024_i64_35, %62 : i64
    %c92_i8_37 = arith.constant 92 : i8
    cf.cond_br %63, ^bb1(%c92_i8_37 : i8), ^bb27
  ^bb29:  // pred: ^bb23
    %64 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_38 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %65 = arith.cmpi uge, %64, %c3_i64_38 : i64
    %c80_i8_39 = arith.constant 80 : i8
    cf.cond_br %65, ^bb30, ^bb1(%c80_i8_39 : i8)
  ^bb30:  // pred: ^bb29
    %66 = arith.subi %64, %c3_i64_38 : i64
    llvm.store %66, %arg1 : i64, !llvm.ptr
    cf.br ^bb28
  ^bb31:  // pred: ^bb40
    %67 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_40 = arith.constant 1 : i64
    %68 = arith.subi %67, %c1_i64_40 : i64
    %69 = llvm.getelementptr %arg2[%68] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %68, %arg3 : i64, !llvm.ptr
    %70 = llvm.load %69 : !llvm.ptr -> i256
    %71 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_41 = arith.constant 1 : i64
    %72 = arith.subi %71, %c1_i64_41 : i64
    %73 = llvm.getelementptr %arg2[%72] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %72, %arg3 : i64, !llvm.ptr
    %74 = llvm.load %73 : !llvm.ptr -> i256
    %75 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_42 = arith.constant 1 : i64
    %76 = arith.subi %75, %c1_i64_42 : i64
    %77 = llvm.getelementptr %arg2[%76] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %76, %arg3 : i64, !llvm.ptr
    %78 = llvm.load %77 : !llvm.ptr -> i256
    %79 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_43 = arith.constant 1 : i64
    %80 = arith.subi %79, %c1_i64_43 : i64
    %81 = llvm.getelementptr %arg2[%80] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %80, %arg3 : i64, !llvm.ptr
    %82 = llvm.load %81 : !llvm.ptr -> i256
    %83 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_44 = arith.constant 1 : i64
    %84 = arith.subi %83, %c1_i64_44 : i64
    %85 = llvm.getelementptr %arg2[%84] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %84, %arg3 : i64, !llvm.ptr
    %86 = llvm.load %85 : !llvm.ptr -> i256
    %87 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_45 = arith.constant 1 : i64
    %88 = arith.subi %87, %c1_i64_45 : i64
    %89 = llvm.getelementptr %arg2[%88] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %88, %arg3 : i64, !llvm.ptr
    %90 = llvm.load %89 : !llvm.ptr -> i256
    %91 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_46 = arith.constant 1 : i64
    %92 = arith.subi %91, %c1_i64_46 : i64
    %93 = llvm.getelementptr %arg2[%92] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %92, %arg3 : i64, !llvm.ptr
    %94 = llvm.load %93 : !llvm.ptr -> i256
    %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256
    %95 = arith.cmpi sgt, %86, %c18446744073709551615_i256 : i256
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %95, ^bb1(%c84_i8 : i8), ^bb32
  ^bb32:  // pred: ^bb31
    %96 = arith.trunci %86 : i256 to i64
    %c0_i64_47 = arith.constant 0 : i64
    %97 = arith.cmpi slt, %96, %c0_i64_47 : i64
    %c84_i8_48 = arith.constant 84 : i8
    cf.cond_br %97, ^bb1(%c84_i8_48 : i8), ^bb33
  ^bb33:  // pred: ^bb32
    %c0_i64_49 = arith.constant 0 : i64
    %98 = arith.cmpi ne, %96, %c0_i64_49 : i64
    cf.cond_br %98, ^bb44, ^bb34
  ^bb34:  // 2 preds: ^bb33, ^bb48
    %c18446744073709551615_i256_50 = arith.constant 18446744073709551615 : i256
    %99 = arith.cmpi sgt, %94, %c18446744073709551615_i256_50 : i256
    %c84_i8_51 = arith.constant 84 : i8
    cf.cond_br %99, ^bb1(%c84_i8_51 : i8), ^bb35
  ^bb35:  // pred: ^bb34
    %100 = arith.trunci %94 : i256 to i64
    %c0_i64_52 = arith.constant 0 : i64
    %101 = arith.cmpi slt, %100, %c0_i64_52 : i64
    %c84_i8_53 = arith.constant 84 : i8
    cf.cond_br %101, ^bb1(%c84_i8_53 : i8), ^bb36
  ^bb36:  // pred: ^bb35
    %c0_i64_54 = arith.constant 0 : i64
    %102 = arith.cmpi ne, %100, %c0_i64_54 : i64
    cf.cond_br %102, ^bb52, ^bb37
  ^bb37:  // 2 preds: ^bb36, ^bb56
    %103 = arith.trunci %82 : i256 to i64
    %104 = arith.trunci %90 : i256 to i64
    %105 = llvm.load %arg1 : !llvm.ptr -> i64
    %c1_i256 = arith.constant 1 : i256
    %106 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %78, %106 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i256_55 = arith.constant 1 : i256
    %107 = llvm.alloca %c1_i256_55 x i256 : (i256) -> !llvm.ptr
    llvm.store %70, %107 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i256_56 = arith.constant 1 : i256
    %108 = llvm.alloca %c1_i256_56 x i256 : (i256) -> !llvm.ptr
    llvm.store %74, %108 {alignment = 1 : i64} : i256, !llvm.ptr
    %c3_i8 = arith.constant 3 : i8
    %109 = call @dora_fn_call(%arg0, %107, %108, %106, %103, %96, %104, %100, %105, %c3_i8) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
    %110 = llvm.getelementptr %109[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %111 = llvm.load %110 : !llvm.ptr -> i8
    %112 = llvm.getelementptr %109[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %113 = llvm.load %112 : !llvm.ptr -> i8
    %c0_i8 = arith.constant 0 : i8
    %114 = arith.cmpi ne, %113, %c0_i8 : i8
    cf.cond_br %114, ^bb1(%113 : i8), ^bb38
  ^bb38:  // pred: ^bb37
    %115 = llvm.getelementptr %109[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %116 = llvm.load %115 : !llvm.ptr -> i64
    %117 = llvm.load %arg1 : !llvm.ptr -> i64
    %118 = arith.cmpi ult, %117, %116 : i64
    scf.if %118 {
    } else {
      %196 = arith.subi %117, %116 : i64
      llvm.store %196, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_57 = arith.constant 80 : i8
    cf.cond_br %118, ^bb1(%c80_i8_57 : i8), ^bb39
  ^bb39:  // pred: ^bb38
    %119 = arith.extui %111 : i8 to i256
    %120 = llvm.load %arg3 : !llvm.ptr -> i64
    %121 = llvm.getelementptr %arg2[%120] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_58 = arith.constant 1 : i64
    %122 = arith.addi %120, %c1_i64_58 : i64
    llvm.store %122, %arg3 : i64, !llvm.ptr
    llvm.store %119, %121 : i256, !llvm.ptr
    cf.br ^bb43
  ^bb40:  // pred: ^bb42
    %c1024_i64_59 = arith.constant 1024 : i64
    %123 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-6_i64 = arith.constant -6 : i64
    %124 = arith.addi %123, %c-6_i64 : i64
    %c7_i64 = arith.constant 7 : i64
    %125 = arith.cmpi ult, %123, %c7_i64 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %125, ^bb1(%c91_i8 : i8), ^bb31
  ^bb41:  // pred: ^bb27
    %126 = llvm.load %arg1 : !llvm.ptr -> i64
    %c0_i64_60 = arith.constant 0 : i64
    call @dora_fn_nop() : () -> ()
    %127 = arith.cmpi uge, %126, %c0_i64_60 : i64
    %c80_i8_61 = arith.constant 80 : i8
    cf.cond_br %127, ^bb42, ^bb1(%c80_i8_61 : i8)
  ^bb42:  // pred: ^bb41
    %128 = arith.subi %126, %c0_i64_60 : i64
    llvm.store %128, %arg1 : i64, !llvm.ptr
    cf.br ^bb40
  ^bb43:  // pred: ^bb39
    %c0_i64_62 = arith.constant 0 : i64
    %c1_i8 = arith.constant 1 : i8
    %129 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_62, %c0_i64_62, %129, %c1_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c1_i8 : i8
  ^bb44:  // pred: ^bb33
    %c18446744073709551615_i256_63 = arith.constant 18446744073709551615 : i256
    %130 = arith.cmpi sgt, %82, %c18446744073709551615_i256_63 : i256
    %c84_i8_64 = arith.constant 84 : i8
    cf.cond_br %130, ^bb1(%c84_i8_64 : i8), ^bb45
  ^bb45:  // pred: ^bb44
    %131 = arith.trunci %82 : i256 to i64
    %c0_i64_65 = arith.constant 0 : i64
    %132 = arith.cmpi slt, %131, %c0_i64_65 : i64
    %c84_i8_66 = arith.constant 84 : i8
    cf.cond_br %132, ^bb1(%c84_i8_66 : i8), ^bb46
  ^bb46:  // pred: ^bb45
    %133 = arith.addi %131, %96 : i64
    %c0_i64_67 = arith.constant 0 : i64
    %134 = arith.cmpi slt, %133, %c0_i64_67 : i64
    %c84_i8_68 = arith.constant 84 : i8
    cf.cond_br %134, ^bb1(%c84_i8_68 : i8), ^bb47
  ^bb47:  // pred: ^bb46
    %c31_i64 = arith.constant 31 : i64
    %c32_i64 = arith.constant 32 : i64
    %135 = arith.addi %133, %c31_i64 : i64
    %136 = arith.divui %135, %c32_i64 : i64
    %c32_i64_69 = arith.constant 32 : i64
    %137 = arith.muli %136, %c32_i64_69 : i64
    %138 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    %139 = llvm.load %138 : !llvm.ptr -> i64
    %c31_i64_70 = arith.constant 31 : i64
    %c32_i64_71 = arith.constant 32 : i64
    %140 = arith.addi %139, %c31_i64_70 : i64
    %141 = arith.divui %140, %c32_i64_71 : i64
    %142 = arith.muli %141, %c32_i64_69 : i64
    %143 = arith.cmpi ult, %142, %137 : i64
    cf.cond_br %143, ^bb49, ^bb48
  ^bb48:  // 2 preds: ^bb47, ^bb51
    cf.br ^bb34
  ^bb49:  // pred: ^bb47
    %c3_i64_72 = arith.constant 3 : i64
    %c512_i64 = arith.constant 512 : i64
    %144 = arith.muli %141, %141 : i64
    %145 = arith.divui %144, %c512_i64 : i64
    %146 = arith.muli %141, %c3_i64_72 : i64
    %147 = arith.addi %145, %146 : i64
    %c3_i64_73 = arith.constant 3 : i64
    %c512_i64_74 = arith.constant 512 : i64
    %148 = arith.muli %136, %136 : i64
    %149 = arith.divui %148, %c512_i64_74 : i64
    %150 = arith.muli %136, %c3_i64_73 : i64
    %151 = arith.addi %149, %150 : i64
    %152 = arith.subi %151, %147 : i64
    %153 = llvm.load %arg1 : !llvm.ptr -> i64
    %154 = arith.cmpi ult, %153, %152 : i64
    scf.if %154 {
    } else {
      %196 = arith.subi %153, %152 : i64
      llvm.store %196, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_75 = arith.constant 80 : i8
    cf.cond_br %154, ^bb1(%c80_i8_75 : i8), ^bb50
  ^bb50:  // pred: ^bb49
    %155 = call @dora_fn_extend_memory(%arg0, %137) : (!llvm.ptr, i64) -> !llvm.ptr
    %156 = llvm.getelementptr %155[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %157 = llvm.load %156 : !llvm.ptr -> !llvm.ptr
    %158 = llvm.getelementptr %155[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %159 = llvm.load %158 : !llvm.ptr -> i8
    %c0_i8_76 = arith.constant 0 : i8
    %160 = arith.cmpi ne, %159, %c0_i8_76 : i8
    cf.cond_br %160, ^bb1(%159 : i8), ^bb51
  ^bb51:  // pred: ^bb50
    %161 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    llvm.store %157, %161 : !llvm.ptr, !llvm.ptr
    %162 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %137, %162 : i64, !llvm.ptr
    cf.br ^bb48
  ^bb52:  // pred: ^bb36
    %c18446744073709551615_i256_77 = arith.constant 18446744073709551615 : i256
    %163 = arith.cmpi sgt, %90, %c18446744073709551615_i256_77 : i256
    %c84_i8_78 = arith.constant 84 : i8
    cf.cond_br %163, ^bb1(%c84_i8_78 : i8), ^bb53
  ^bb53:  // pred: ^bb52
    %164 = arith.trunci %90 : i256 to i64
    %c0_i64_79 = arith.constant 0 : i64
    %165 = arith.cmpi slt, %164, %c0_i64_79 : i64
    %c84_i8_80 = arith.constant 84 : i8
    cf.cond_br %165, ^bb1(%c84_i8_80 : i8), ^bb54
  ^bb54:  // pred: ^bb53
    %166 = arith.addi %164, %100 : i64
    %c0_i64_81 = arith.constant 0 : i64
    %167 = arith.cmpi slt, %166, %c0_i64_81 : i64
    %c84_i8_82 = arith.constant 84 : i8
    cf.cond_br %167, ^bb1(%c84_i8_82 : i8), ^bb55
  ^bb55:  // pred: ^bb54
    %c31_i64_83 = arith.constant 31 : i64
    %c32_i64_84 = arith.constant 32 : i64
    %168 = arith.addi %166, %c31_i64_83 : i64
    %169 = arith.divui %168, %c32_i64_84 : i64
    %c32_i64_85 = arith.constant 32 : i64
    %170 = arith.muli %169, %c32_i64_85 : i64
    %171 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    %172 = llvm.load %171 : !llvm.ptr -> i64
    %c31_i64_86 = arith.constant 31 : i64
    %c32_i64_87 = arith.constant 32 : i64
    %173 = arith.addi %172, %c31_i64_86 : i64
    %174 = arith.divui %173, %c32_i64_87 : i64
    %175 = arith.muli %174, %c32_i64_85 : i64
    %176 = arith.cmpi ult, %175, %170 : i64
    cf.cond_br %176, ^bb57, ^bb56
  ^bb56:  // 2 preds: ^bb55, ^bb59
    cf.br ^bb37
  ^bb57:  // pred: ^bb55
    %c3_i64_88 = arith.constant 3 : i64
    %c512_i64_89 = arith.constant 512 : i64
    %177 = arith.muli %174, %174 : i64
    %178 = arith.divui %177, %c512_i64_89 : i64
    %179 = arith.muli %174, %c3_i64_88 : i64
    %180 = arith.addi %178, %179 : i64
    %c3_i64_90 = arith.constant 3 : i64
    %c512_i64_91 = arith.constant 512 : i64
    %181 = arith.muli %169, %169 : i64
    %182 = arith.divui %181, %c512_i64_91 : i64
    %183 = arith.muli %169, %c3_i64_90 : i64
    %184 = arith.addi %182, %183 : i64
    %185 = arith.subi %184, %180 : i64
    %186 = llvm.load %arg1 : !llvm.ptr -> i64
    %187 = arith.cmpi ult, %186, %185 : i64
    scf.if %187 {
    } else {
      %196 = arith.subi %186, %185 : i64
      llvm.store %196, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_92 = arith.constant 80 : i8
    cf.cond_br %187, ^bb1(%c80_i8_92 : i8), ^bb58
  ^bb58:  // pred: ^bb57
    %188 = call @dora_fn_extend_memory(%arg0, %170) : (!llvm.ptr, i64) -> !llvm.ptr
    %189 = llvm.getelementptr %188[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %190 = llvm.load %189 : !llvm.ptr -> !llvm.ptr
    %191 = llvm.getelementptr %188[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %192 = llvm.load %191 : !llvm.ptr -> i8
    %c0_i8_93 = arith.constant 0 : i8
    %193 = arith.cmpi ne, %192, %c0_i8_93 : i8
    cf.cond_br %193, ^bb1(%192 : i8), ^bb59
  ^bb59:  // pred: ^bb58
    %194 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    llvm.store %190, %194 : !llvm.ptr, !llvm.ptr
    %195 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %170, %195 : i64, !llvm.ptr
    cf.br ^bb56
  }
}
