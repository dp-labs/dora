---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
---
module {
  llvm.mlir.global internal @dora_stack_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_stack_length() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_memory_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_memory_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_calldata_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_calldata_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_gas_counter() {addr_space = 0 : i32} : i64
  llvm.mlir.global external @dora_ctx_is_static() {addr_space = 0 : i32} : !llvm.ptr
  func.func private @dora_debug_print(i32)
  func.func private @dora_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_get_calldata_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_get_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_get_chainid(!llvm.ptr) -> i64
  func.func private @dora_store_in_callvalue_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_caller_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_get_gaslimit(!llvm.ptr) -> i64
  func.func private @dora_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_copy_code_to_memory(!llvm.ptr, i64, i64, i64)
  func.func private @dora_read_storage(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_write_storage(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> i64
  func.func private @dora_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_get_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_get_coinbase_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_get_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_get_codesize_from_address(!llvm.ptr, !llvm.ptr) -> i64
  func.func private @dora_get_address_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_get_prevrandao(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_call(!llvm.ptr, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr, i8) -> i8
  func.func private @dora_store_in_balance(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> i64
  func.func private @dora_copy_ext_code_to_memory(!llvm.ptr, !llvm.ptr, i64, i64, i64)
  func.func private @dora_get_blob_hash_at_index(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_get_block_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_get_code_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_create(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr) -> i8
  func.func private @dora_create2(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
  func.func private @dora_get_return_data_size(!llvm.ptr) -> i64
  func.func private @dora_copy_return_data_into_memory(!llvm.ptr, i64, i64, i64)
  func.func private @dora_selfdestruct(!llvm.ptr, !llvm.ptr) -> i64
  func.func private @dora_transient_storage_read(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_transient_storage_write(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func public @main(%arg0: !llvm.ptr, %arg1: i64) -> i8 attributes {llvm.emit_c_interface} {
    %c1024_i256 = arith.constant 1024 : i256
    %0 = llvm.alloca %c1024_i256 x i256 : (i256) -> !llvm.ptr
    %1 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    llvm.store %0, %1 : !llvm.ptr, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %2 = llvm.mlir.addressof @dora_stack_length : !llvm.ptr
    llvm.store %c0_i64, %2 : i64, !llvm.ptr
    %c0_i64_0 = arith.constant 0 : i64
    %3 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    llvm.store %c0_i64_0, %3 : i64, !llvm.ptr
    %4 = call @dora_get_calldata_ptr(%arg0) : (!llvm.ptr) -> !llvm.ptr
    %5 = llvm.mlir.addressof @dora_calldata_ptr : !llvm.ptr
    llvm.store %4, %5 : !llvm.ptr, !llvm.ptr
    %6 = call @dora_get_calldata_size(%arg0) : (!llvm.ptr) -> i64
    %7 = llvm.mlir.addressof @dora_calldata_size : !llvm.ptr
    llvm.store %6, %7 : i64, !llvm.ptr
    %8 = llvm.mlir.addressof @dora_gas_counter : !llvm.ptr
    llvm.store %arg1, %8 : i64, !llvm.ptr
    %9 = llvm.mlir.addressof @dora_stack_length : !llvm.ptr
    %c1024_i64 = arith.constant 1024 : i64
    cf.br ^bb3
  ^bb1:  // 7 preds: ^bb2, ^bb5, ^bb9, ^bb13, ^bb18, ^bb19, ^bb27
    %c0_i64_1 = arith.constant 0 : i64
    %c3_i8 = arith.constant 3 : i8
    call @dora_write_result(%arg0, %c0_i64_1, %c0_i64_1, %c0_i64_1, %c3_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c3_i8 : i8
  ^bb2(%10: i256):  // no predecessors
    cf.switch %10 : i256, [
      default: ^bb1
    ]
  ^bb3:  // pred: ^bb0
    %c57669888194366464517598830424248860356609074394020202793089226410191109488639_i256 = arith.constant 57669888194366464517598830424248860356609074394020202793089226410191109488639 : i256
    %11 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    llvm.store %c57669888194366464517598830424248860356609074394020202793089226410191109488639_i256, %12 : i256, !llvm.ptr
    %13 = llvm.getelementptr %12[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %13, %11 : !llvm.ptr, !llvm.ptr
    cf.br ^bb4
  ^bb4:  // pred: ^bb3
    %c0_i256 = arith.constant 0 : i256
    %14 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %15 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256, %15 : i256, !llvm.ptr
    %16 = llvm.getelementptr %15[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %16, %14 : !llvm.ptr, !llvm.ptr
    cf.br ^bb5
  ^bb5:  // pred: ^bb4
    %17 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %18 = llvm.load %17 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.getelementptr %18[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %20 = llvm.load %19 : !llvm.ptr -> i256
    llvm.store %19, %17 : !llvm.ptr, !llvm.ptr
    %21 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %22 = llvm.load %21 : !llvm.ptr -> !llvm.ptr
    %23 = llvm.getelementptr %22[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %24 = llvm.load %23 : !llvm.ptr -> i256
    llvm.store %23, %21 : !llvm.ptr, !llvm.ptr
    %25 = arith.trunci %20 : i256 to i64
    %c32_i64 = arith.constant 32 : i64
    %26 = arith.addi %25, %c32_i64 : i64
    %c0_i64_2 = arith.constant 0 : i64
    %27 = arith.cmpi slt, %26, %c0_i64_2 : i64
    cf.cond_br %27, ^bb1, ^bb6
  ^bb6:  // pred: ^bb5
    %28 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    %29 = llvm.load %28 : !llvm.ptr -> i64
    %c31_i64 = arith.constant 31 : i64
    %c32_i64_3 = arith.constant 32 : i64
    %30 = arith.addi %26, %c31_i64 : i64
    %31 = arith.divui %30, %c32_i64_3 : i64
    %32 = arith.muli %31, %c32_i64_3 : i64
    %33 = arith.cmpi ult, %29, %32 : i64
    scf.if %33 {
      %210 = func.call @dora_extend_memory(%arg0, %32) : (!llvm.ptr, i64) -> !llvm.ptr
      llvm.store %32, %28 : i64, !llvm.ptr
      %211 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
      llvm.store %210, %211 : !llvm.ptr, !llvm.ptr
    } else {
    }
    %34 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
    %35 = llvm.load %34 : !llvm.ptr -> !llvm.ptr
    %36 = llvm.getelementptr %35[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %37 = llvm.intr.bswap(%24)  : (i256) -> i256
    llvm.store %37, %36 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb7
  ^bb7:  // pred: ^bb6
    %c-282693306169198560872784742741978202424711039104693490077813924759764729856_i256 = arith.constant -282693306169198560872784742741978202424711039104693490077813924759764729856 : i256
    %38 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %39 = llvm.load %38 : !llvm.ptr -> !llvm.ptr
    llvm.store %c-282693306169198560872784742741978202424711039104693490077813924759764729856_i256, %39 : i256, !llvm.ptr
    %40 = llvm.getelementptr %39[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %40, %38 : !llvm.ptr, !llvm.ptr
    cf.br ^bb8
  ^bb8:  // pred: ^bb7
    %c32_i256 = arith.constant 32 : i256
    %41 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %42 = llvm.load %41 : !llvm.ptr -> !llvm.ptr
    llvm.store %c32_i256, %42 : i256, !llvm.ptr
    %43 = llvm.getelementptr %42[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %43, %41 : !llvm.ptr, !llvm.ptr
    cf.br ^bb9
  ^bb9:  // pred: ^bb8
    %44 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %45 = llvm.load %44 : !llvm.ptr -> !llvm.ptr
    %46 = llvm.getelementptr %45[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %47 = llvm.load %46 : !llvm.ptr -> i256
    llvm.store %46, %44 : !llvm.ptr, !llvm.ptr
    %48 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %49 = llvm.load %48 : !llvm.ptr -> !llvm.ptr
    %50 = llvm.getelementptr %49[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %51 = llvm.load %50 : !llvm.ptr -> i256
    llvm.store %50, %48 : !llvm.ptr, !llvm.ptr
    %52 = arith.trunci %47 : i256 to i64
    %c32_i64_4 = arith.constant 32 : i64
    %53 = arith.addi %52, %c32_i64_4 : i64
    %c0_i64_5 = arith.constant 0 : i64
    %54 = arith.cmpi slt, %53, %c0_i64_5 : i64
    cf.cond_br %54, ^bb1, ^bb10
  ^bb10:  // pred: ^bb9
    %55 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    %56 = llvm.load %55 : !llvm.ptr -> i64
    %c31_i64_6 = arith.constant 31 : i64
    %c32_i64_7 = arith.constant 32 : i64
    %57 = arith.addi %53, %c31_i64_6 : i64
    %58 = arith.divui %57, %c32_i64_7 : i64
    %59 = arith.muli %58, %c32_i64_7 : i64
    %60 = arith.cmpi ult, %56, %59 : i64
    scf.if %60 {
      %210 = func.call @dora_extend_memory(%arg0, %59) : (!llvm.ptr, i64) -> !llvm.ptr
      llvm.store %59, %55 : i64, !llvm.ptr
      %211 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
      llvm.store %210, %211 : !llvm.ptr, !llvm.ptr
    } else {
    }
    %61 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
    %62 = llvm.load %61 : !llvm.ptr -> !llvm.ptr
    %63 = llvm.getelementptr %62[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %64 = llvm.intr.bswap(%51)  : (i256) -> i256
    llvm.store %64, %63 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb11
  ^bb11:  // pred: ^bb10
    %c10123276409175967808859434475862811765392092841461775252157603250176_i256 = arith.constant 10123276409175967808859434475862811765392092841461775252157603250176 : i256
    %65 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %66 = llvm.load %65 : !llvm.ptr -> !llvm.ptr
    llvm.store %c10123276409175967808859434475862811765392092841461775252157603250176_i256, %66 : i256, !llvm.ptr
    %67 = llvm.getelementptr %66[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %67, %65 : !llvm.ptr, !llvm.ptr
    cf.br ^bb12
  ^bb12:  // pred: ^bb11
    %c64_i256 = arith.constant 64 : i256
    %68 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %69 = llvm.load %68 : !llvm.ptr -> !llvm.ptr
    llvm.store %c64_i256, %69 : i256, !llvm.ptr
    %70 = llvm.getelementptr %69[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %70, %68 : !llvm.ptr, !llvm.ptr
    cf.br ^bb13
  ^bb13:  // pred: ^bb12
    %71 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %72 = llvm.load %71 : !llvm.ptr -> !llvm.ptr
    %73 = llvm.getelementptr %72[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %74 = llvm.load %73 : !llvm.ptr -> i256
    llvm.store %73, %71 : !llvm.ptr, !llvm.ptr
    %75 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %76 = llvm.load %75 : !llvm.ptr -> !llvm.ptr
    %77 = llvm.getelementptr %76[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %78 = llvm.load %77 : !llvm.ptr -> i256
    llvm.store %77, %75 : !llvm.ptr, !llvm.ptr
    %79 = arith.trunci %74 : i256 to i64
    %c32_i64_8 = arith.constant 32 : i64
    %80 = arith.addi %79, %c32_i64_8 : i64
    %c0_i64_9 = arith.constant 0 : i64
    %81 = arith.cmpi slt, %80, %c0_i64_9 : i64
    cf.cond_br %81, ^bb1, ^bb14
  ^bb14:  // pred: ^bb13
    %82 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    %83 = llvm.load %82 : !llvm.ptr -> i64
    %c31_i64_10 = arith.constant 31 : i64
    %c32_i64_11 = arith.constant 32 : i64
    %84 = arith.addi %80, %c31_i64_10 : i64
    %85 = arith.divui %84, %c32_i64_11 : i64
    %86 = arith.muli %85, %c32_i64_11 : i64
    %87 = arith.cmpi ult, %83, %86 : i64
    scf.if %87 {
      %210 = func.call @dora_extend_memory(%arg0, %86) : (!llvm.ptr, i64) -> !llvm.ptr
      llvm.store %86, %82 : i64, !llvm.ptr
      %211 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
      llvm.store %210, %211 : !llvm.ptr, !llvm.ptr
    } else {
    }
    %88 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
    %89 = llvm.load %88 : !llvm.ptr -> !llvm.ptr
    %90 = llvm.getelementptr %89[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %91 = llvm.intr.bswap(%78)  : (i256) -> i256
    llvm.store %91, %90 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb15
  ^bb15:  // pred: ^bb14
    %c77_i256 = arith.constant 77 : i256
    %92 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %93 = llvm.load %92 : !llvm.ptr -> !llvm.ptr
    llvm.store %c77_i256, %93 : i256, !llvm.ptr
    %94 = llvm.getelementptr %93[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %94, %92 : !llvm.ptr, !llvm.ptr
    cf.br ^bb16
  ^bb16:  // pred: ^bb15
    %c0_i256_12 = arith.constant 0 : i256
    %95 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %96 = llvm.load %95 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_12, %96 : i256, !llvm.ptr
    %97 = llvm.getelementptr %96[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %97, %95 : !llvm.ptr, !llvm.ptr
    cf.br ^bb17
  ^bb17:  // pred: ^bb16
    %c0_i256_13 = arith.constant 0 : i256
    %98 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %99 = llvm.load %98 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_13, %99 : i256, !llvm.ptr
    %100 = llvm.getelementptr %99[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %100, %98 : !llvm.ptr, !llvm.ptr
    cf.br ^bb18
  ^bb18:  // pred: ^bb17
    %101 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %102 = llvm.load %101 : !llvm.ptr -> !llvm.ptr
    %103 = llvm.getelementptr %102[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %104 = llvm.load %103 : !llvm.ptr -> i256
    llvm.store %103, %101 : !llvm.ptr, !llvm.ptr
    %105 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %106 = llvm.load %105 : !llvm.ptr -> !llvm.ptr
    %107 = llvm.getelementptr %106[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %108 = llvm.load %107 : !llvm.ptr -> i256
    llvm.store %107, %105 : !llvm.ptr, !llvm.ptr
    %109 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %110 = llvm.load %109 : !llvm.ptr -> !llvm.ptr
    %111 = llvm.getelementptr %110[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %112 = llvm.load %111 : !llvm.ptr -> i256
    llvm.store %111, %109 : !llvm.ptr, !llvm.ptr
    %113 = arith.trunci %108 : i256 to i64
    %114 = arith.trunci %112 : i256 to i64
    %115 = arith.addi %113, %114 : i64
    %c0_i64_14 = arith.constant 0 : i64
    %116 = arith.cmpi slt, %115, %c0_i64_14 : i64
    cf.cond_br %116, ^bb1, ^bb19
  ^bb19:  // pred: ^bb18
    %117 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    %118 = llvm.load %117 : !llvm.ptr -> i64
    %c31_i64_15 = arith.constant 31 : i64
    %c32_i64_16 = arith.constant 32 : i64
    %119 = arith.addi %115, %c31_i64_15 : i64
    %120 = arith.divui %119, %c32_i64_16 : i64
    %121 = arith.muli %120, %c32_i64_16 : i64
    %122 = arith.cmpi ult, %118, %121 : i64
    scf.if %122 {
      %210 = func.call @dora_extend_memory(%arg0, %121) : (!llvm.ptr, i64) -> !llvm.ptr
      llvm.store %121, %117 : i64, !llvm.ptr
      %211 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
      llvm.store %210, %211 : !llvm.ptr, !llvm.ptr
    } else {
    }
    %c1_i256 = arith.constant 1 : i256
    %123 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %104, %123 {alignment = 1 : i64} : i256, !llvm.ptr
    %124 = llvm.mlir.addressof @dora_gas_counter : !llvm.ptr
    %125 = llvm.load %124 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %126 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %125, %126 {alignment = 1 : i64} : i64, !llvm.ptr
    %127 = call @dora_create(%arg0, %114, %113, %123, %126) : (!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr) -> i8
    %c0_i8 = arith.constant 0 : i8
    %128 = arith.cmpi ne, %c0_i8, %127 : i8
    %129 = llvm.load %123 : !llvm.ptr -> i256
    cf.cond_br %128, ^bb1, ^bb20
  ^bb20:  // pred: ^bb19
    %130 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %131 = llvm.load %130 : !llvm.ptr -> !llvm.ptr
    llvm.store %129, %131 : i256, !llvm.ptr
    %132 = llvm.getelementptr %131[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %132, %130 : !llvm.ptr, !llvm.ptr
    cf.br ^bb21
  ^bb21:  // pred: ^bb20
    %c0_i256_17 = arith.constant 0 : i256
    %133 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %134 = llvm.load %133 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_17, %134 : i256, !llvm.ptr
    %135 = llvm.getelementptr %134[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %135, %133 : !llvm.ptr, !llvm.ptr
    cf.br ^bb22
  ^bb22:  // pred: ^bb21
    %c0_i256_18 = arith.constant 0 : i256
    %136 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %137 = llvm.load %136 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_18, %137 : i256, !llvm.ptr
    %138 = llvm.getelementptr %137[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %138, %136 : !llvm.ptr, !llvm.ptr
    cf.br ^bb23
  ^bb23:  // pred: ^bb22
    %c0_i256_19 = arith.constant 0 : i256
    %139 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %140 = llvm.load %139 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_19, %140 : i256, !llvm.ptr
    %141 = llvm.getelementptr %140[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %141, %139 : !llvm.ptr, !llvm.ptr
    cf.br ^bb24
  ^bb24:  // pred: ^bb23
    %c0_i256_20 = arith.constant 0 : i256
    %142 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %143 = llvm.load %142 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_20, %143 : i256, !llvm.ptr
    %144 = llvm.getelementptr %143[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %144, %142 : !llvm.ptr, !llvm.ptr
    cf.br ^bb25
  ^bb25:  // pred: ^bb24
    %145 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %146 = llvm.load %145 : !llvm.ptr -> !llvm.ptr
    %147 = llvm.getelementptr %146[-5] : (!llvm.ptr) -> !llvm.ptr, i256
    %148 = llvm.load %147 : !llvm.ptr -> i256
    %149 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %150 = llvm.load %149 : !llvm.ptr -> !llvm.ptr
    llvm.store %148, %150 : i256, !llvm.ptr
    %151 = llvm.getelementptr %150[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %151, %149 : !llvm.ptr, !llvm.ptr
    cf.br ^bb26
  ^bb26:  // pred: ^bb25
    %c4294967295_i256 = arith.constant 4294967295 : i256
    %152 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %153 = llvm.load %152 : !llvm.ptr -> !llvm.ptr
    llvm.store %c4294967295_i256, %153 : i256, !llvm.ptr
    %154 = llvm.getelementptr %153[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %154, %152 : !llvm.ptr, !llvm.ptr
    cf.br ^bb27
  ^bb27:  // pred: ^bb26
    %155 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %156 = llvm.load %155 : !llvm.ptr -> !llvm.ptr
    %157 = llvm.getelementptr %156[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %158 = llvm.load %157 : !llvm.ptr -> i256
    llvm.store %157, %155 : !llvm.ptr, !llvm.ptr
    %159 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %160 = llvm.load %159 : !llvm.ptr -> !llvm.ptr
    %161 = llvm.getelementptr %160[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %162 = llvm.load %161 : !llvm.ptr -> i256
    llvm.store %161, %159 : !llvm.ptr, !llvm.ptr
    %163 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %164 = llvm.load %163 : !llvm.ptr -> !llvm.ptr
    %165 = llvm.getelementptr %164[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %166 = llvm.load %165 : !llvm.ptr -> i256
    llvm.store %165, %163 : !llvm.ptr, !llvm.ptr
    %167 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %168 = llvm.load %167 : !llvm.ptr -> !llvm.ptr
    %169 = llvm.getelementptr %168[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %170 = llvm.load %169 : !llvm.ptr -> i256
    llvm.store %169, %167 : !llvm.ptr, !llvm.ptr
    %171 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %172 = llvm.load %171 : !llvm.ptr -> !llvm.ptr
    %173 = llvm.getelementptr %172[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %174 = llvm.load %173 : !llvm.ptr -> i256
    llvm.store %173, %171 : !llvm.ptr, !llvm.ptr
    %175 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %176 = llvm.load %175 : !llvm.ptr -> !llvm.ptr
    %177 = llvm.getelementptr %176[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %178 = llvm.load %177 : !llvm.ptr -> i256
    llvm.store %177, %175 : !llvm.ptr, !llvm.ptr
    %c0_i256_21 = arith.constant 0 : i256
    %179 = arith.trunci %158 : i256 to i64
    %180 = arith.trunci %166 : i256 to i64
    %181 = arith.trunci %170 : i256 to i64
    %182 = arith.trunci %174 : i256 to i64
    %183 = arith.trunci %178 : i256 to i64
    %184 = arith.addi %180, %181 : i64
    %185 = arith.addi %182, %183 : i64
    %186 = arith.maxui %184, %185 : i64
    %c0_i64_22 = arith.constant 0 : i64
    %187 = arith.cmpi slt, %186, %c0_i64_22 : i64
    cf.cond_br %187, ^bb1, ^bb28
  ^bb28:  // pred: ^bb27
    %188 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    %189 = llvm.load %188 : !llvm.ptr -> i64
    %c31_i64_23 = arith.constant 31 : i64
    %c32_i64_24 = arith.constant 32 : i64
    %190 = arith.addi %186, %c31_i64_23 : i64
    %191 = arith.divui %190, %c32_i64_24 : i64
    %192 = arith.muli %191, %c32_i64_24 : i64
    %193 = arith.cmpi ult, %189, %192 : i64
    scf.if %193 {
      %210 = func.call @dora_extend_memory(%arg0, %192) : (!llvm.ptr, i64) -> !llvm.ptr
      llvm.store %192, %188 : i64, !llvm.ptr
      %211 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
      llvm.store %210, %211 : !llvm.ptr, !llvm.ptr
    } else {
    }
    %194 = llvm.mlir.addressof @dora_gas_counter : !llvm.ptr
    %195 = llvm.load %194 : !llvm.ptr -> i64
    %c1_i256_25 = arith.constant 1 : i256
    %196 = llvm.alloca %c1_i256_25 x i256 : (i256) -> !llvm.ptr
    llvm.store %c0_i256_21, %196 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i256_26 = arith.constant 1 : i256
    %197 = llvm.alloca %c1_i256_26 x i256 : (i256) -> !llvm.ptr
    llvm.store %162, %197 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i64_27 = arith.constant 1 : i64
    %198 = llvm.alloca %c1_i64_27 x i64 : (i64) -> !llvm.ptr
    %c0_i8_28 = arith.constant 0 : i8
    %199 = call @dora_call(%arg0, %179, %197, %196, %180, %181, %182, %183, %195, %198, %c0_i8_28) : (!llvm.ptr, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr, i8) -> i8
    %200 = llvm.load %198 : !llvm.ptr -> i64
    %201 = arith.extui %199 : i8 to i256
    %202 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %203 = llvm.load %202 : !llvm.ptr -> !llvm.ptr
    llvm.store %201, %203 : i256, !llvm.ptr
    %204 = llvm.getelementptr %203[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %204, %202 : !llvm.ptr, !llvm.ptr
    cf.br ^bb29
  ^bb29:  // pred: ^bb28
    %205 = call @dora_get_return_data_size(%arg0) : (!llvm.ptr) -> i64
    %206 = arith.extui %205 : i64 to i256
    %207 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %208 = llvm.load %207 : !llvm.ptr -> !llvm.ptr
    llvm.store %206, %208 : i256, !llvm.ptr
    %209 = llvm.getelementptr %208[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %209, %207 : !llvm.ptr, !llvm.ptr
    cf.br ^bb30
  ^bb30:  // pred: ^bb29
    %c0_i64_29 = arith.constant 0 : i64
    %c1_i8 = arith.constant 1 : i8
    call @dora_write_result(%arg0, %c0_i64_29, %c0_i64_29, %arg1, %c1_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c1_i8 : i8
  }
}
