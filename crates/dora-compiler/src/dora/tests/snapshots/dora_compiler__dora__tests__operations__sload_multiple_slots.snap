---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  func.func private @dora_fn_nop()
  func.func private @dora_fn_tracing(!llvm.ptr, i8, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_fn_is_static(!llvm.ptr) -> i8
  func.func private @dora_fn_exp(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_chainid(!llvm.ptr) -> i64
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gaslimit_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_memory_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_memory_size(!llvm.ptr) -> i64
  func.func private @dora_fn_code_copy(!llvm.ptr, !llvm.ptr, i64, i64)
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_call(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_returndata_copy(!llvm.ptr, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_tload(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_tstore(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func public @main(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr) -> i8 attributes {llvm.emit_c_interface} {
    cf.br ^bb5
  ^bb1(%0: i8):  // 27 preds: ^bb2, ^bb4, ^bb5, ^bb8, ^bb9, ^bb11, ^bb12, ^bb14, ^bb15, ^bb18, ^bb19, ^bb22, ^bb23, ^bb25, ^bb26, ^bb28, ^bb29, ^bb32, ^bb33, ^bb35, ^bb37, ^bb38, ^bb41, ^bb42, ^bb44, ^bb46, ^bb47
    %c0_i64 = arith.constant 0 : i64
    %1 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64, %c0_i64, %1, %0) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %0 : i8
  ^bb2(%2: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %2 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3:  // pred: ^bb4
    %c0_i256 = arith.constant 0 : i256
    %3 = llvm.load %arg3 : !llvm.ptr -> i64
    %4 = llvm.getelementptr %arg2[%3] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64 = arith.constant 1 : i64
    %5 = arith.addi %3, %c1_i64 : i64
    llvm.store %5, %arg3 : i64, !llvm.ptr
    llvm.store %c0_i256, %4 : i256, !llvm.ptr
    cf.br ^bb9
  ^bb4:  // pred: ^bb6
    %c1024_i64 = arith.constant 1024 : i64
    %6 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_0 = arith.constant 1 : i64
    %7 = arith.addi %6, %c1_i64_0 : i64
    %8 = arith.cmpi ult, %c1024_i64, %7 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %8, ^bb1(%c92_i8 : i8), ^bb3
  ^bb5:  // pred: ^bb0
    %9 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %10 = arith.cmpi uge, %9, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %10, ^bb6, ^bb1(%c80_i8 : i8)
  ^bb6:  // pred: ^bb5
    %11 = arith.subi %9, %c3_i64 : i64
    llvm.store %11, %arg1 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb7:  // pred: ^bb8
    %c100_i256 = arith.constant 100 : i256
    %12 = llvm.load %arg3 : !llvm.ptr -> i64
    %13 = llvm.getelementptr %arg2[%12] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_1 = arith.constant 1 : i64
    %14 = arith.addi %12, %c1_i64_1 : i64
    llvm.store %14, %arg3 : i64, !llvm.ptr
    llvm.store %c100_i256, %13 : i256, !llvm.ptr
    cf.br ^bb15
  ^bb8:  // pred: ^bb10
    %c1024_i64_2 = arith.constant 1024 : i64
    %15 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_3 = arith.constant 1 : i64
    %16 = arith.addi %15, %c1_i64_3 : i64
    %17 = arith.cmpi ult, %c1024_i64_2, %16 : i64
    %c92_i8_4 = arith.constant 92 : i8
    cf.cond_br %17, ^bb1(%c92_i8_4 : i8), ^bb7
  ^bb9:  // pred: ^bb3
    %18 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_5 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %19 = arith.cmpi uge, %18, %c3_i64_5 : i64
    %c80_i8_6 = arith.constant 80 : i8
    cf.cond_br %19, ^bb10, ^bb1(%c80_i8_6 : i8)
  ^bb10:  // pred: ^bb9
    %20 = arith.subi %18, %c3_i64_5 : i64
    llvm.store %20, %arg1 : i64, !llvm.ptr
    cf.br ^bb8
  ^bb11:  // pred: ^bb14
    %21 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_7 = arith.constant 1 : i64
    %22 = arith.subi %21, %c1_i64_7 : i64
    %23 = llvm.getelementptr %arg2[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %22, %arg3 : i64, !llvm.ptr
    %24 = llvm.load %23 : !llvm.ptr -> i256
    %25 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_8 = arith.constant 1 : i64
    %26 = arith.subi %25, %c1_i64_8 : i64
    %27 = llvm.getelementptr %arg2[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %26, %arg3 : i64, !llvm.ptr
    %28 = llvm.load %27 : !llvm.ptr -> i256
    %c1_i256 = arith.constant 1 : i256
    %29 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %24, %29 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i256_9 = arith.constant 1 : i256
    %30 = llvm.alloca %c1_i256_9 x i256 : (i256) -> !llvm.ptr
    llvm.store %28, %30 {alignment = 1 : i64} : i256, !llvm.ptr
    %31 = llvm.load %arg1 : !llvm.ptr -> i64
    %32 = call @dora_fn_sstore(%arg0, %29, %30, %31) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
    %33 = llvm.getelementptr %32[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %34 = llvm.load %33 : !llvm.ptr -> i8
    %c0_i8 = arith.constant 0 : i8
    %35 = arith.cmpi ne, %34, %c0_i8 : i8
    cf.cond_br %35, ^bb1(%34 : i8), ^bb12
  ^bb12:  // pred: ^bb11
    %36 = llvm.getelementptr %32[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %37 = llvm.load %36 : !llvm.ptr -> i64
    %38 = llvm.load %arg1 : !llvm.ptr -> i64
    %39 = arith.cmpi ult, %38, %37 : i64
    scf.if %39 {
    } else {
      %150 = arith.subi %38, %37 : i64
      llvm.store %150, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_10 = arith.constant 80 : i8
    cf.cond_br %39, ^bb1(%c80_i8_10 : i8), ^bb13
  ^bb13:  // pred: ^bb12
    cf.br ^bb19
  ^bb14:  // pred: ^bb16
    %c1024_i64_11 = arith.constant 1024 : i64
    %40 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-2_i64 = arith.constant -2 : i64
    %41 = arith.addi %40, %c-2_i64 : i64
    %c2_i64 = arith.constant 2 : i64
    %42 = arith.cmpi ult, %40, %c2_i64 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %42, ^bb1(%c91_i8 : i8), ^bb11
  ^bb15:  // pred: ^bb7
    %43 = llvm.load %arg1 : !llvm.ptr -> i64
    %c0_i64_12 = arith.constant 0 : i64
    call @dora_fn_nop() : () -> ()
    %44 = arith.cmpi uge, %43, %c0_i64_12 : i64
    %c80_i8_13 = arith.constant 80 : i8
    cf.cond_br %44, ^bb16, ^bb1(%c80_i8_13 : i8)
  ^bb16:  // pred: ^bb15
    %45 = arith.subi %43, %c0_i64_12 : i64
    llvm.store %45, %arg1 : i64, !llvm.ptr
    cf.br ^bb14
  ^bb17:  // pred: ^bb18
    %c1_i256_14 = arith.constant 1 : i256
    %46 = llvm.load %arg3 : !llvm.ptr -> i64
    %47 = llvm.getelementptr %arg2[%46] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_15 = arith.constant 1 : i64
    %48 = arith.addi %46, %c1_i64_15 : i64
    llvm.store %48, %arg3 : i64, !llvm.ptr
    llvm.store %c1_i256_14, %47 : i256, !llvm.ptr
    cf.br ^bb23
  ^bb18:  // pred: ^bb20
    %c1024_i64_16 = arith.constant 1024 : i64
    %49 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_17 = arith.constant 1 : i64
    %50 = arith.addi %49, %c1_i64_17 : i64
    %51 = arith.cmpi ult, %c1024_i64_16, %50 : i64
    %c92_i8_18 = arith.constant 92 : i8
    cf.cond_br %51, ^bb1(%c92_i8_18 : i8), ^bb17
  ^bb19:  // pred: ^bb13
    %52 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_19 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %53 = arith.cmpi uge, %52, %c3_i64_19 : i64
    %c80_i8_20 = arith.constant 80 : i8
    cf.cond_br %53, ^bb20, ^bb1(%c80_i8_20 : i8)
  ^bb20:  // pred: ^bb19
    %54 = arith.subi %52, %c3_i64_19 : i64
    llvm.store %54, %arg1 : i64, !llvm.ptr
    cf.br ^bb18
  ^bb21:  // pred: ^bb22
    %c200_i256 = arith.constant 200 : i256
    %55 = llvm.load %arg3 : !llvm.ptr -> i64
    %56 = llvm.getelementptr %arg2[%55] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_21 = arith.constant 1 : i64
    %57 = arith.addi %55, %c1_i64_21 : i64
    llvm.store %57, %arg3 : i64, !llvm.ptr
    llvm.store %c200_i256, %56 : i256, !llvm.ptr
    cf.br ^bb29
  ^bb22:  // pred: ^bb24
    %c1024_i64_22 = arith.constant 1024 : i64
    %58 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_23 = arith.constant 1 : i64
    %59 = arith.addi %58, %c1_i64_23 : i64
    %60 = arith.cmpi ult, %c1024_i64_22, %59 : i64
    %c92_i8_24 = arith.constant 92 : i8
    cf.cond_br %60, ^bb1(%c92_i8_24 : i8), ^bb21
  ^bb23:  // pred: ^bb17
    %61 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_25 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %62 = arith.cmpi uge, %61, %c3_i64_25 : i64
    %c80_i8_26 = arith.constant 80 : i8
    cf.cond_br %62, ^bb24, ^bb1(%c80_i8_26 : i8)
  ^bb24:  // pred: ^bb23
    %63 = arith.subi %61, %c3_i64_25 : i64
    llvm.store %63, %arg1 : i64, !llvm.ptr
    cf.br ^bb22
  ^bb25:  // pred: ^bb28
    %64 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_27 = arith.constant 1 : i64
    %65 = arith.subi %64, %c1_i64_27 : i64
    %66 = llvm.getelementptr %arg2[%65] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %65, %arg3 : i64, !llvm.ptr
    %67 = llvm.load %66 : !llvm.ptr -> i256
    %68 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_28 = arith.constant 1 : i64
    %69 = arith.subi %68, %c1_i64_28 : i64
    %70 = llvm.getelementptr %arg2[%69] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %69, %arg3 : i64, !llvm.ptr
    %71 = llvm.load %70 : !llvm.ptr -> i256
    %c1_i256_29 = arith.constant 1 : i256
    %72 = llvm.alloca %c1_i256_29 x i256 : (i256) -> !llvm.ptr
    llvm.store %67, %72 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i256_30 = arith.constant 1 : i256
    %73 = llvm.alloca %c1_i256_30 x i256 : (i256) -> !llvm.ptr
    llvm.store %71, %73 {alignment = 1 : i64} : i256, !llvm.ptr
    %74 = llvm.load %arg1 : !llvm.ptr -> i64
    %75 = call @dora_fn_sstore(%arg0, %72, %73, %74) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
    %76 = llvm.getelementptr %75[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %77 = llvm.load %76 : !llvm.ptr -> i8
    %c0_i8_31 = arith.constant 0 : i8
    %78 = arith.cmpi ne, %77, %c0_i8_31 : i8
    cf.cond_br %78, ^bb1(%77 : i8), ^bb26
  ^bb26:  // pred: ^bb25
    %79 = llvm.getelementptr %75[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %80 = llvm.load %79 : !llvm.ptr -> i64
    %81 = llvm.load %arg1 : !llvm.ptr -> i64
    %82 = arith.cmpi ult, %81, %80 : i64
    scf.if %82 {
    } else {
      %150 = arith.subi %81, %80 : i64
      llvm.store %150, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_32 = arith.constant 80 : i8
    cf.cond_br %82, ^bb1(%c80_i8_32 : i8), ^bb27
  ^bb27:  // pred: ^bb26
    cf.br ^bb33
  ^bb28:  // pred: ^bb30
    %c1024_i64_33 = arith.constant 1024 : i64
    %83 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-2_i64_34 = arith.constant -2 : i64
    %84 = arith.addi %83, %c-2_i64_34 : i64
    %c2_i64_35 = arith.constant 2 : i64
    %85 = arith.cmpi ult, %83, %c2_i64_35 : i64
    %c91_i8_36 = arith.constant 91 : i8
    cf.cond_br %85, ^bb1(%c91_i8_36 : i8), ^bb25
  ^bb29:  // pred: ^bb21
    %86 = llvm.load %arg1 : !llvm.ptr -> i64
    %c0_i64_37 = arith.constant 0 : i64
    call @dora_fn_nop() : () -> ()
    %87 = arith.cmpi uge, %86, %c0_i64_37 : i64
    %c80_i8_38 = arith.constant 80 : i8
    cf.cond_br %87, ^bb30, ^bb1(%c80_i8_38 : i8)
  ^bb30:  // pred: ^bb29
    %88 = arith.subi %86, %c0_i64_37 : i64
    llvm.store %88, %arg1 : i64, !llvm.ptr
    cf.br ^bb28
  ^bb31:  // pred: ^bb32
    %c0_i256_39 = arith.constant 0 : i256
    %89 = llvm.load %arg3 : !llvm.ptr -> i64
    %90 = llvm.getelementptr %arg2[%89] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_40 = arith.constant 1 : i64
    %91 = arith.addi %89, %c1_i64_40 : i64
    llvm.store %91, %arg3 : i64, !llvm.ptr
    llvm.store %c0_i256_39, %90 : i256, !llvm.ptr
    cf.br ^bb38
  ^bb32:  // pred: ^bb34
    %c1024_i64_41 = arith.constant 1024 : i64
    %92 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_42 = arith.constant 1 : i64
    %93 = arith.addi %92, %c1_i64_42 : i64
    %94 = arith.cmpi ult, %c1024_i64_41, %93 : i64
    %c92_i8_43 = arith.constant 92 : i8
    cf.cond_br %94, ^bb1(%c92_i8_43 : i8), ^bb31
  ^bb33:  // pred: ^bb27
    %95 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_44 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %96 = arith.cmpi uge, %95, %c3_i64_44 : i64
    %c80_i8_45 = arith.constant 80 : i8
    cf.cond_br %96, ^bb34, ^bb1(%c80_i8_45 : i8)
  ^bb34:  // pred: ^bb33
    %97 = arith.subi %95, %c3_i64_44 : i64
    llvm.store %97, %arg1 : i64, !llvm.ptr
    cf.br ^bb32
  ^bb35:  // pred: ^bb37
    %98 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_46 = arith.constant 1 : i64
    %99 = arith.subi %98, %c1_i64_46 : i64
    %100 = llvm.getelementptr %arg2[%99] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %99, %arg3 : i64, !llvm.ptr
    %101 = llvm.load %100 : !llvm.ptr -> i256
    %c1_i256_47 = arith.constant 1 : i256
    %102 = llvm.alloca %c1_i256_47 x i256 : (i256) -> !llvm.ptr
    llvm.store %101, %102 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i256_48 = arith.constant 1 : i256
    %103 = llvm.alloca %c1_i256_48 x i256 : (i256) -> !llvm.ptr
    %104 = call @dora_fn_sload(%arg0, %102, %103) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %105 = llvm.getelementptr %104[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %106 = llvm.load %105 : !llvm.ptr -> i64
    %107 = llvm.load %arg1 : !llvm.ptr -> i64
    %108 = arith.cmpi ult, %107, %106 : i64
    scf.if %108 {
    } else {
      %150 = arith.subi %107, %106 : i64
      llvm.store %150, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_49 = arith.constant 80 : i8
    cf.cond_br %108, ^bb1(%c80_i8_49 : i8), ^bb36
  ^bb36:  // pred: ^bb35
    %109 = llvm.load %103 : !llvm.ptr -> i256
    %110 = llvm.load %arg3 : !llvm.ptr -> i64
    %111 = llvm.getelementptr %arg2[%110] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_50 = arith.constant 1 : i64
    %112 = arith.addi %110, %c1_i64_50 : i64
    llvm.store %112, %arg3 : i64, !llvm.ptr
    llvm.store %109, %111 : i256, !llvm.ptr
    cf.br ^bb42
  ^bb37:  // pred: ^bb39
    %c1024_i64_51 = arith.constant 1024 : i64
    %113 = llvm.load %arg3 : !llvm.ptr -> i64
    %c0_i64_52 = arith.constant 0 : i64
    %114 = arith.addi %113, %c0_i64_52 : i64
    %c1_i64_53 = arith.constant 1 : i64
    %115 = arith.cmpi ult, %113, %c1_i64_53 : i64
    %c91_i8_54 = arith.constant 91 : i8
    cf.cond_br %115, ^bb1(%c91_i8_54 : i8), ^bb35
  ^bb38:  // pred: ^bb31
    %116 = llvm.load %arg1 : !llvm.ptr -> i64
    %c0_i64_55 = arith.constant 0 : i64
    call @dora_fn_nop() : () -> ()
    %117 = arith.cmpi uge, %116, %c0_i64_55 : i64
    %c80_i8_56 = arith.constant 80 : i8
    cf.cond_br %117, ^bb39, ^bb1(%c80_i8_56 : i8)
  ^bb39:  // pred: ^bb38
    %118 = arith.subi %116, %c0_i64_55 : i64
    llvm.store %118, %arg1 : i64, !llvm.ptr
    cf.br ^bb37
  ^bb40:  // pred: ^bb41
    %c1_i256_57 = arith.constant 1 : i256
    %119 = llvm.load %arg3 : !llvm.ptr -> i64
    %120 = llvm.getelementptr %arg2[%119] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_58 = arith.constant 1 : i64
    %121 = arith.addi %119, %c1_i64_58 : i64
    llvm.store %121, %arg3 : i64, !llvm.ptr
    llvm.store %c1_i256_57, %120 : i256, !llvm.ptr
    cf.br ^bb47
  ^bb41:  // pred: ^bb43
    %c1024_i64_59 = arith.constant 1024 : i64
    %122 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_60 = arith.constant 1 : i64
    %123 = arith.addi %122, %c1_i64_60 : i64
    %124 = arith.cmpi ult, %c1024_i64_59, %123 : i64
    %c92_i8_61 = arith.constant 92 : i8
    cf.cond_br %124, ^bb1(%c92_i8_61 : i8), ^bb40
  ^bb42:  // pred: ^bb36
    %125 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_62 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %126 = arith.cmpi uge, %125, %c3_i64_62 : i64
    %c80_i8_63 = arith.constant 80 : i8
    cf.cond_br %126, ^bb43, ^bb1(%c80_i8_63 : i8)
  ^bb43:  // pred: ^bb42
    %127 = arith.subi %125, %c3_i64_62 : i64
    llvm.store %127, %arg1 : i64, !llvm.ptr
    cf.br ^bb41
  ^bb44:  // pred: ^bb46
    %128 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_64 = arith.constant 1 : i64
    %129 = arith.subi %128, %c1_i64_64 : i64
    %130 = llvm.getelementptr %arg2[%129] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %129, %arg3 : i64, !llvm.ptr
    %131 = llvm.load %130 : !llvm.ptr -> i256
    %c1_i256_65 = arith.constant 1 : i256
    %132 = llvm.alloca %c1_i256_65 x i256 : (i256) -> !llvm.ptr
    llvm.store %131, %132 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i256_66 = arith.constant 1 : i256
    %133 = llvm.alloca %c1_i256_66 x i256 : (i256) -> !llvm.ptr
    %134 = call @dora_fn_sload(%arg0, %132, %133) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %135 = llvm.getelementptr %134[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %136 = llvm.load %135 : !llvm.ptr -> i64
    %137 = llvm.load %arg1 : !llvm.ptr -> i64
    %138 = arith.cmpi ult, %137, %136 : i64
    scf.if %138 {
    } else {
      %150 = arith.subi %137, %136 : i64
      llvm.store %150, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_67 = arith.constant 80 : i8
    cf.cond_br %138, ^bb1(%c80_i8_67 : i8), ^bb45
  ^bb45:  // pred: ^bb44
    %139 = llvm.load %133 : !llvm.ptr -> i256
    %140 = llvm.load %arg3 : !llvm.ptr -> i64
    %141 = llvm.getelementptr %arg2[%140] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_68 = arith.constant 1 : i64
    %142 = arith.addi %140, %c1_i64_68 : i64
    llvm.store %142, %arg3 : i64, !llvm.ptr
    llvm.store %139, %141 : i256, !llvm.ptr
    cf.br ^bb49
  ^bb46:  // pred: ^bb48
    %c1024_i64_69 = arith.constant 1024 : i64
    %143 = llvm.load %arg3 : !llvm.ptr -> i64
    %c0_i64_70 = arith.constant 0 : i64
    %144 = arith.addi %143, %c0_i64_70 : i64
    %c1_i64_71 = arith.constant 1 : i64
    %145 = arith.cmpi ult, %143, %c1_i64_71 : i64
    %c91_i8_72 = arith.constant 91 : i8
    cf.cond_br %145, ^bb1(%c91_i8_72 : i8), ^bb44
  ^bb47:  // pred: ^bb40
    %146 = llvm.load %arg1 : !llvm.ptr -> i64
    %c0_i64_73 = arith.constant 0 : i64
    call @dora_fn_nop() : () -> ()
    %147 = arith.cmpi uge, %146, %c0_i64_73 : i64
    %c80_i8_74 = arith.constant 80 : i8
    cf.cond_br %147, ^bb48, ^bb1(%c80_i8_74 : i8)
  ^bb48:  // pred: ^bb47
    %148 = arith.subi %146, %c0_i64_73 : i64
    llvm.store %148, %arg1 : i64, !llvm.ptr
    cf.br ^bb46
  ^bb49:  // pred: ^bb45
    %c0_i64_75 = arith.constant 0 : i64
    %c1_i8 = arith.constant 1 : i8
    %149 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_75, %c0_i64_75, %149, %c1_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c1_i8 : i8
  }
}
