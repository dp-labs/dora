---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  func.func private @dora_fn_nop()
  func.func private @dora_fn_tracing(!llvm.ptr, i8, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_fn_is_static(!llvm.ptr) -> i8
  func.func private @dora_fn_exp(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_calldata_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_data_section(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_data_section_size(!llvm.ptr) -> i64
  func.func private @dora_fn_data_section_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_chainid(!llvm.ptr) -> i64
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gaslimit_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_memory_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_memory_size(!llvm.ptr) -> i64
  func.func private @dora_fn_code_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_eofcreate(!llvm.ptr, i8, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returncontract(!llvm.ptr, i8, i64, i64, index, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_call(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_extcall(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_returndata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_returndata_copy(!llvm.ptr, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_tload(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_tstore(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @op84(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr, %arg4: !llvm.ptr) -> i8 {
    cf.br ^bb3
  ^bb1(%0: i8):  // 3 preds: ^bb3, ^bb4, ^bb6
    %c0_i64 = arith.constant 0 : i64
    %1 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64, %c0_i64, %1, %0) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %0 : i8
  ^bb2(%2: i8):  // no predecessors
    return %2 : i8
  ^bb3:  // pred: ^bb0
    %3 = llvm.load %arg1 : !llvm.ptr -> i64
    %c0_i64_0 = arith.constant 0 : i64
    call @dora_fn_nop() : () -> ()
    %4 = arith.cmpi uge, %3, %c0_i64_0 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %4, ^bb5, ^bb1(%c80_i8 : i8)
  ^bb4:  // pred: ^bb5
    %c1024_i64 = arith.constant 1024 : i64
    %5 = llvm.load %arg3 : !llvm.ptr -> i64
    %c0_i64_1 = arith.constant 0 : i64
    %6 = arith.addi %5, %c0_i64_1 : i64
    llvm.store %6, %arg3 : i64, !llvm.ptr
    %c1_i64 = arith.constant 1 : i64
    %7 = arith.cmpi ult, %5, %c1_i64 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %7, ^bb1(%c91_i8 : i8), ^bb6
  ^bb5:  // pred: ^bb3
    %8 = arith.subi %3, %c0_i64_0 : i64
    llvm.store %8, %arg1 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb6:  // pred: ^bb4
    %9 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.getelementptr %9[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %11 = llvm.load %10 : !llvm.ptr -> i256
    llvm.store %10, %arg4 : !llvm.ptr, !llvm.ptr
    %c1_i256 = arith.constant 1 : i256
    %12 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %11, %12 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i256_2 = arith.constant 1 : i256
    %13 = llvm.alloca %c1_i256_2 x i256 : (i256) -> !llvm.ptr
    %14 = call @dora_fn_sload(%arg0, %12, %13) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %15 = llvm.getelementptr %14[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %15 : !llvm.ptr -> i64
    %17 = llvm.load %arg1 : !llvm.ptr -> i64
    %18 = arith.cmpi ult, %17, %16 : i64
    scf.if %18 {
    } else {
      %22 = arith.subi %17, %16 : i64
      llvm.store %22, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_3 = arith.constant 80 : i8
    cf.cond_br %18, ^bb1(%c80_i8_3 : i8), ^bb7
  ^bb7:  // pred: ^bb6
    %19 = llvm.load %13 : !llvm.ptr -> i256
    %20 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    llvm.store %19, %20 : i256, !llvm.ptr
    %21 = llvm.getelementptr %20[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %21, %arg4 : !llvm.ptr, !llvm.ptr
    cf.br ^bb8
  ^bb8:  // pred: ^bb7
    %c0_i8 = arith.constant 0 : i8
    return %c0_i8 : i8
  }
  func.func private @op85(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr, %arg4: !llvm.ptr) -> i8 {
    cf.br ^bb3
  ^bb1(%0: i8):  // 4 preds: ^bb3, ^bb4, ^bb6, ^bb7
    %c0_i64 = arith.constant 0 : i64
    %1 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64, %c0_i64, %1, %0) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %0 : i8
  ^bb2(%2: i8):  // no predecessors
    return %2 : i8
  ^bb3:  // pred: ^bb0
    %3 = llvm.load %arg1 : !llvm.ptr -> i64
    %c0_i64_0 = arith.constant 0 : i64
    call @dora_fn_nop() : () -> ()
    %4 = arith.cmpi uge, %3, %c0_i64_0 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %4, ^bb5, ^bb1(%c80_i8 : i8)
  ^bb4:  // pred: ^bb5
    %c1024_i64 = arith.constant 1024 : i64
    %5 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-2_i64 = arith.constant -2 : i64
    %6 = arith.addi %5, %c-2_i64 : i64
    llvm.store %6, %arg3 : i64, !llvm.ptr
    %c2_i64 = arith.constant 2 : i64
    %7 = arith.cmpi ult, %5, %c2_i64 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %7, ^bb1(%c91_i8 : i8), ^bb6
  ^bb5:  // pred: ^bb3
    %8 = arith.subi %3, %c0_i64_0 : i64
    llvm.store %8, %arg1 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb6:  // pred: ^bb4
    %9 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.getelementptr %9[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %11 = llvm.load %10 : !llvm.ptr -> i256
    llvm.store %10, %arg4 : !llvm.ptr, !llvm.ptr
    %12 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.getelementptr %12[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %14 = llvm.load %13 : !llvm.ptr -> i256
    llvm.store %13, %arg4 : !llvm.ptr, !llvm.ptr
    %c1_i256 = arith.constant 1 : i256
    %15 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %11, %15 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i256_1 = arith.constant 1 : i256
    %16 = llvm.alloca %c1_i256_1 x i256 : (i256) -> !llvm.ptr
    llvm.store %14, %16 {alignment = 1 : i64} : i256, !llvm.ptr
    %17 = llvm.load %arg1 : !llvm.ptr -> i64
    %18 = call @dora_fn_sstore(%arg0, %15, %16, %17) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
    %19 = llvm.getelementptr %18[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %20 = llvm.load %19 : !llvm.ptr -> i8
    %c0_i8 = arith.constant 0 : i8
    %21 = arith.cmpi ne, %20, %c0_i8 : i8
    cf.cond_br %21, ^bb1(%20 : i8), ^bb7
  ^bb7:  // pred: ^bb6
    %22 = llvm.getelementptr %18[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %23 = llvm.load %22 : !llvm.ptr -> i64
    %24 = llvm.load %arg1 : !llvm.ptr -> i64
    %25 = arith.cmpi ult, %24, %23 : i64
    scf.if %25 {
    } else {
      %26 = arith.subi %24, %23 : i64
      llvm.store %26, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_2 = arith.constant 80 : i8
    cf.cond_br %25, ^bb1(%c80_i8_2 : i8), ^bb8
  ^bb8:  // pred: ^bb7
    cf.br ^bb9
  ^bb9:  // pred: ^bb8
    %c0_i8_3 = arith.constant 0 : i8
    return %c0_i8_3 : i8
  }
  func.func public @main(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr) -> i8 attributes {llvm.emit_c_interface} {
    %c0_i64 = arith.constant 0 : i64
    %0 = llvm.alloca %c0_i64 x !llvm.ptr : (i64) -> !llvm.ptr
    llvm.store %arg2, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8 = arith.constant 0 : i8
    %c0_i8_0 = arith.constant 0 : i8
    %1 = arith.cmpi ne, %c0_i8, %c0_i8_0 : i8
    cf.cond_br %1, ^bb1(%c0_i8 : i8), ^bb4
  ^bb1(%2: i8):  // 19 preds: ^bb0, ^bb2, ^bb4, ^bb5, ^bb6, ^bb7, ^bb8, ^bb9, ^bb10, ^bb11, ^bb12, ^bb14, ^bb16, ^bb17, ^bb20, ^bb22, ^bb23, ^bb26, ^bb29
    %c0_i64_1 = arith.constant 0 : i64
    %3 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_1, %c0_i64_1, %3, %2) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %2 : i8
  ^bb2(%4: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %4 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3(%5: i8):  // 5 preds: ^bb13, ^bb19, ^bb25, ^bb28, ^bb31
    return %5 : i8
  ^bb4:  // pred: ^bb0
    %6 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %7 = arith.cmpi uge, %6, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %7, ^bb15, ^bb1(%c80_i8 : i8)
  ^bb5:  // pred: ^bb16
    %8 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_2 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %9 = arith.cmpi uge, %8, %c3_i64_2 : i64
    %c80_i8_3 = arith.constant 80 : i8
    cf.cond_br %9, ^bb18, ^bb1(%c80_i8_3 : i8)
  ^bb6:  // pred: ^bb19
    %10 = call @op85(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %11 = arith.cmpi ne, %10, %c0_i8_0 : i8
    cf.cond_br %11, ^bb1(%10 : i8), ^bb7
  ^bb7:  // pred: ^bb6
    %12 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_4 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %13 = arith.cmpi uge, %12, %c3_i64_4 : i64
    %c80_i8_5 = arith.constant 80 : i8
    cf.cond_br %13, ^bb21, ^bb1(%c80_i8_5 : i8)
  ^bb8:  // pred: ^bb22
    %14 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_6 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %15 = arith.cmpi uge, %14, %c3_i64_6 : i64
    %c80_i8_7 = arith.constant 80 : i8
    cf.cond_br %15, ^bb24, ^bb1(%c80_i8_7 : i8)
  ^bb9:  // pred: ^bb25
    %16 = call @op85(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %17 = arith.cmpi ne, %16, %c0_i8_0 : i8
    cf.cond_br %17, ^bb1(%16 : i8), ^bb10
  ^bb10:  // pred: ^bb9
    %18 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_8 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %19 = arith.cmpi uge, %18, %c3_i64_8 : i64
    %c80_i8_9 = arith.constant 80 : i8
    cf.cond_br %19, ^bb27, ^bb1(%c80_i8_9 : i8)
  ^bb11:  // pred: ^bb28
    %20 = call @op84(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %21 = arith.cmpi ne, %20, %c0_i8_0 : i8
    cf.cond_br %21, ^bb1(%20 : i8), ^bb12
  ^bb12:  // pred: ^bb11
    %22 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_10 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %23 = arith.cmpi uge, %22, %c3_i64_10 : i64
    %c80_i8_11 = arith.constant 80 : i8
    cf.cond_br %23, ^bb30, ^bb1(%c80_i8_11 : i8)
  ^bb13:  // pred: ^bb31
    %24 = call @op84(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %25 = arith.cmpi ne, %24, %c0_i8_0 : i8
    cf.cond_br %25, ^bb3(%24 : i8), ^bb32
  ^bb14:  // pred: ^bb15
    %c1024_i64 = arith.constant 1024 : i64
    %26 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %27 = arith.addi %26, %c1_i64 : i64
    llvm.store %27, %arg3 : i64, !llvm.ptr
    %28 = arith.cmpi ult, %c1024_i64, %27 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %28, ^bb1(%c92_i8 : i8), ^bb16
  ^bb15:  // pred: ^bb4
    %29 = arith.subi %6, %c3_i64 : i64
    llvm.store %29, %arg1 : i64, !llvm.ptr
    cf.br ^bb14
  ^bb16:  // pred: ^bb14
    %c0_i256 = arith.constant 0 : i256
    %30 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256, %30 : i256, !llvm.ptr
    %31 = llvm.getelementptr %30[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %31, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_12 = arith.constant 0 : i8
    %32 = arith.cmpi ne, %c0_i8_12, %c0_i8_0 : i8
    cf.cond_br %32, ^bb1(%c0_i8_12 : i8), ^bb5
  ^bb17:  // pred: ^bb18
    %c1024_i64_13 = arith.constant 1024 : i64
    %33 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_14 = arith.constant 1 : i64
    %34 = arith.addi %33, %c1_i64_14 : i64
    llvm.store %34, %arg3 : i64, !llvm.ptr
    %35 = arith.cmpi ult, %c1024_i64_13, %34 : i64
    %c92_i8_15 = arith.constant 92 : i8
    cf.cond_br %35, ^bb1(%c92_i8_15 : i8), ^bb19
  ^bb18:  // pred: ^bb5
    %36 = arith.subi %8, %c3_i64_2 : i64
    llvm.store %36, %arg1 : i64, !llvm.ptr
    cf.br ^bb17
  ^bb19:  // pred: ^bb17
    %c100_i256 = arith.constant 100 : i256
    %37 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c100_i256, %37 : i256, !llvm.ptr
    %38 = llvm.getelementptr %37[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %38, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_16 = arith.constant 0 : i8
    %39 = arith.cmpi ne, %c0_i8_16, %c0_i8_0 : i8
    cf.cond_br %39, ^bb3(%c0_i8_16 : i8), ^bb6
  ^bb20:  // pred: ^bb21
    %c1024_i64_17 = arith.constant 1024 : i64
    %40 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_18 = arith.constant 1 : i64
    %41 = arith.addi %40, %c1_i64_18 : i64
    llvm.store %41, %arg3 : i64, !llvm.ptr
    %42 = arith.cmpi ult, %c1024_i64_17, %41 : i64
    %c92_i8_19 = arith.constant 92 : i8
    cf.cond_br %42, ^bb1(%c92_i8_19 : i8), ^bb22
  ^bb21:  // pred: ^bb7
    %43 = arith.subi %12, %c3_i64_4 : i64
    llvm.store %43, %arg1 : i64, !llvm.ptr
    cf.br ^bb20
  ^bb22:  // pred: ^bb20
    %c1_i256 = arith.constant 1 : i256
    %44 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c1_i256, %44 : i256, !llvm.ptr
    %45 = llvm.getelementptr %44[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %45, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_20 = arith.constant 0 : i8
    %46 = arith.cmpi ne, %c0_i8_20, %c0_i8_0 : i8
    cf.cond_br %46, ^bb1(%c0_i8_20 : i8), ^bb8
  ^bb23:  // pred: ^bb24
    %c1024_i64_21 = arith.constant 1024 : i64
    %47 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_22 = arith.constant 1 : i64
    %48 = arith.addi %47, %c1_i64_22 : i64
    llvm.store %48, %arg3 : i64, !llvm.ptr
    %49 = arith.cmpi ult, %c1024_i64_21, %48 : i64
    %c92_i8_23 = arith.constant 92 : i8
    cf.cond_br %49, ^bb1(%c92_i8_23 : i8), ^bb25
  ^bb24:  // pred: ^bb8
    %50 = arith.subi %14, %c3_i64_6 : i64
    llvm.store %50, %arg1 : i64, !llvm.ptr
    cf.br ^bb23
  ^bb25:  // pred: ^bb23
    %c200_i256 = arith.constant 200 : i256
    %51 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c200_i256, %51 : i256, !llvm.ptr
    %52 = llvm.getelementptr %51[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %52, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_24 = arith.constant 0 : i8
    %53 = arith.cmpi ne, %c0_i8_24, %c0_i8_0 : i8
    cf.cond_br %53, ^bb3(%c0_i8_24 : i8), ^bb9
  ^bb26:  // pred: ^bb27
    %c1024_i64_25 = arith.constant 1024 : i64
    %54 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_26 = arith.constant 1 : i64
    %55 = arith.addi %54, %c1_i64_26 : i64
    llvm.store %55, %arg3 : i64, !llvm.ptr
    %56 = arith.cmpi ult, %c1024_i64_25, %55 : i64
    %c92_i8_27 = arith.constant 92 : i8
    cf.cond_br %56, ^bb1(%c92_i8_27 : i8), ^bb28
  ^bb27:  // pred: ^bb10
    %57 = arith.subi %18, %c3_i64_8 : i64
    llvm.store %57, %arg1 : i64, !llvm.ptr
    cf.br ^bb26
  ^bb28:  // pred: ^bb26
    %c0_i256_28 = arith.constant 0 : i256
    %58 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_28, %58 : i256, !llvm.ptr
    %59 = llvm.getelementptr %58[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %59, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_29 = arith.constant 0 : i8
    %60 = arith.cmpi ne, %c0_i8_29, %c0_i8_0 : i8
    cf.cond_br %60, ^bb3(%c0_i8_29 : i8), ^bb11
  ^bb29:  // pred: ^bb30
    %c1024_i64_30 = arith.constant 1024 : i64
    %61 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_31 = arith.constant 1 : i64
    %62 = arith.addi %61, %c1_i64_31 : i64
    llvm.store %62, %arg3 : i64, !llvm.ptr
    %63 = arith.cmpi ult, %c1024_i64_30, %62 : i64
    %c92_i8_32 = arith.constant 92 : i8
    cf.cond_br %63, ^bb1(%c92_i8_32 : i8), ^bb31
  ^bb30:  // pred: ^bb12
    %64 = arith.subi %22, %c3_i64_10 : i64
    llvm.store %64, %arg1 : i64, !llvm.ptr
    cf.br ^bb29
  ^bb31:  // pred: ^bb29
    %c1_i256_33 = arith.constant 1 : i256
    %65 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c1_i256_33, %65 : i256, !llvm.ptr
    %66 = llvm.getelementptr %65[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %66, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_34 = arith.constant 0 : i8
    %67 = arith.cmpi ne, %c0_i8_34, %c0_i8_0 : i8
    cf.cond_br %67, ^bb3(%c0_i8_34 : i8), ^bb13
  ^bb32:  // pred: ^bb13
    %c0_i64_35 = arith.constant 0 : i64
    %c2_i8 = arith.constant 2 : i8
    %68 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_35, %c0_i64_35, %68, %c2_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c2_i8 : i8
  }
}
