---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  func.func private @dora_fn_nop()
  func.func private @dora_fn_tracing(!llvm.ptr, i8, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_fn_is_static(!llvm.ptr) -> i8
  func.func private @dora_fn_exp(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_calldata_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_data_section(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_data_section_size(!llvm.ptr) -> i64
  func.func private @dora_fn_data_section_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_chainid(!llvm.ptr) -> i64
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gaslimit_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_memory_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_memory_size(!llvm.ptr) -> i64
  func.func private @dora_fn_code_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_eofcreate(!llvm.ptr, i8, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returncontract(!llvm.ptr, i8, i64, i64, index, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_call(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_extcall(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_returndata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_returndata_copy(!llvm.ptr, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_tload(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_tstore(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @op85(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr, %arg4: !llvm.ptr) -> i8 {
    cf.br ^bb7
  ^bb1(%0: i8):  // 4 preds: ^bb3, ^bb4, ^bb6, ^bb7
    %c0_i64 = arith.constant 0 : i64
    %1 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64, %c0_i64, %1, %0) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %0 : i8
  ^bb2(%2: i8):  // no predecessors
    return %2 : i8
  ^bb3:  // pred: ^bb6
    %3 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %4 = llvm.getelementptr %3[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %5 = llvm.load %4 : !llvm.ptr -> i256
    llvm.store %4, %arg4 : !llvm.ptr, !llvm.ptr
    %6 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %6[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %8 = llvm.load %7 : !llvm.ptr -> i256
    llvm.store %7, %arg4 : !llvm.ptr, !llvm.ptr
    %c1_i256 = arith.constant 1 : i256
    %9 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %5, %9 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i256_0 = arith.constant 1 : i256
    %10 = llvm.alloca %c1_i256_0 x i256 : (i256) -> !llvm.ptr
    llvm.store %8, %10 {alignment = 1 : i64} : i256, !llvm.ptr
    %11 = llvm.load %arg1 : !llvm.ptr -> i64
    %12 = call @dora_fn_sstore(%arg0, %9, %10, %11) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
    %13 = llvm.getelementptr %12[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.load %13 : !llvm.ptr -> i8
    %c0_i8 = arith.constant 0 : i8
    %15 = arith.cmpi ne, %14, %c0_i8 : i8
    cf.cond_br %15, ^bb1(%14 : i8), ^bb4
  ^bb4:  // pred: ^bb3
    %16 = llvm.getelementptr %12[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %16 : !llvm.ptr -> i64
    %18 = llvm.load %arg1 : !llvm.ptr -> i64
    %19 = arith.cmpi ult, %18, %17 : i64
    scf.if %19 {
    } else {
      %26 = arith.subi %18, %17 : i64
      llvm.store %26, %arg1 : i64, !llvm.ptr
    }
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %19, ^bb1(%c80_i8 : i8), ^bb5
  ^bb5:  // pred: ^bb4
    cf.br ^bb9
  ^bb6:  // pred: ^bb8
    %c1024_i64 = arith.constant 1024 : i64
    %20 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-2_i64 = arith.constant -2 : i64
    %21 = arith.addi %20, %c-2_i64 : i64
    llvm.store %21, %arg3 : i64, !llvm.ptr
    %c2_i64 = arith.constant 2 : i64
    %22 = arith.cmpi ult, %20, %c2_i64 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %22, ^bb1(%c91_i8 : i8), ^bb3
  ^bb7:  // pred: ^bb0
    %23 = llvm.load %arg1 : !llvm.ptr -> i64
    %c0_i64_1 = arith.constant 0 : i64
    call @dora_fn_nop() : () -> ()
    %24 = arith.cmpi uge, %23, %c0_i64_1 : i64
    %c80_i8_2 = arith.constant 80 : i8
    cf.cond_br %24, ^bb8, ^bb1(%c80_i8_2 : i8)
  ^bb8:  // pred: ^bb7
    %25 = arith.subi %23, %c0_i64_1 : i64
    llvm.store %25, %arg1 : i64, !llvm.ptr
    cf.br ^bb6
  ^bb9:  // pred: ^bb5
    %c0_i8_3 = arith.constant 0 : i8
    return %c0_i8_3 : i8
  }
  func.func private @op84(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr, %arg4: !llvm.ptr) -> i8 {
    cf.br ^bb6
  ^bb1(%0: i8):  // 3 preds: ^bb3, ^bb5, ^bb6
    %c0_i64 = arith.constant 0 : i64
    %1 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64, %c0_i64, %1, %0) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %0 : i8
  ^bb2(%2: i8):  // no predecessors
    return %2 : i8
  ^bb3:  // pred: ^bb5
    %3 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %4 = llvm.getelementptr %3[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %5 = llvm.load %4 : !llvm.ptr -> i256
    llvm.store %4, %arg4 : !llvm.ptr, !llvm.ptr
    %c1_i256 = arith.constant 1 : i256
    %6 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %5, %6 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i256_0 = arith.constant 1 : i256
    %7 = llvm.alloca %c1_i256_0 x i256 : (i256) -> !llvm.ptr
    %8 = call @dora_fn_sload(%arg0, %6, %7) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %9 = llvm.getelementptr %8[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> i64
    %11 = llvm.load %arg1 : !llvm.ptr -> i64
    %12 = arith.cmpi ult, %11, %10 : i64
    scf.if %12 {
    } else {
      %22 = arith.subi %11, %10 : i64
      llvm.store %22, %arg1 : i64, !llvm.ptr
    }
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %12, ^bb1(%c80_i8 : i8), ^bb4
  ^bb4:  // pred: ^bb3
    %13 = llvm.load %7 : !llvm.ptr -> i256
    %14 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    llvm.store %13, %14 : i256, !llvm.ptr
    %15 = llvm.getelementptr %14[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %15, %arg4 : !llvm.ptr, !llvm.ptr
    cf.br ^bb8
  ^bb5:  // pred: ^bb7
    %c1024_i64 = arith.constant 1024 : i64
    %16 = llvm.load %arg3 : !llvm.ptr -> i64
    %c0_i64_1 = arith.constant 0 : i64
    %17 = arith.addi %16, %c0_i64_1 : i64
    llvm.store %17, %arg3 : i64, !llvm.ptr
    %c1_i64 = arith.constant 1 : i64
    %18 = arith.cmpi ult, %16, %c1_i64 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %18, ^bb1(%c91_i8 : i8), ^bb3
  ^bb6:  // pred: ^bb0
    %19 = llvm.load %arg1 : !llvm.ptr -> i64
    %c0_i64_2 = arith.constant 0 : i64
    call @dora_fn_nop() : () -> ()
    %20 = arith.cmpi uge, %19, %c0_i64_2 : i64
    %c80_i8_3 = arith.constant 80 : i8
    cf.cond_br %20, ^bb7, ^bb1(%c80_i8_3 : i8)
  ^bb7:  // pred: ^bb6
    %21 = arith.subi %19, %c0_i64_2 : i64
    llvm.store %21, %arg1 : i64, !llvm.ptr
    cf.br ^bb5
  ^bb8:  // pred: ^bb4
    %c0_i8 = arith.constant 0 : i8
    return %c0_i8 : i8
  }
  func.func public @main(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr) -> i8 attributes {llvm.emit_c_interface} {
    %c0_i64 = arith.constant 0 : i64
    %0 = llvm.alloca %c0_i64 x !llvm.ptr : (i64) -> !llvm.ptr
    llvm.store %arg2, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8 = arith.constant 0 : i8
    %c0_i8_0 = arith.constant 0 : i8
    %1 = arith.cmpi ne, %c0_i8, %c0_i8_0 : i8
    cf.cond_br %1, ^bb1(%c0_i8 : i8), ^bb6
  ^bb1(%2: i8):  // 19 preds: ^bb0, ^bb2, ^bb4, ^bb5, ^bb6, ^bb9, ^bb10, ^bb12, ^bb13, ^bb14, ^bb15, ^bb18, ^bb19, ^bb21, ^bb23, ^bb24, ^bb26, ^bb28, ^bb29
    %c0_i64_1 = arith.constant 0 : i64
    %3 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_1, %c0_i64_1, %3, %2) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %2 : i8
  ^bb2(%4: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %4 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3(%5: i8):  // 5 preds: ^bb8, ^bb17, ^bb22, ^bb27, ^bb31
    return %5 : i8
  ^bb4:  // pred: ^bb5
    %c0_i256 = arith.constant 0 : i256
    %6 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256, %6 : i256, !llvm.ptr
    %7 = llvm.getelementptr %6[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %7, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_2 = arith.constant 0 : i8
    %8 = arith.cmpi ne, %c0_i8_2, %c0_i8_0 : i8
    cf.cond_br %8, ^bb1(%c0_i8_2 : i8), ^bb10
  ^bb5:  // pred: ^bb7
    %c1024_i64 = arith.constant 1024 : i64
    %9 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %10 = arith.addi %9, %c1_i64 : i64
    llvm.store %10, %arg3 : i64, !llvm.ptr
    %11 = arith.cmpi ult, %c1024_i64, %10 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %11, ^bb1(%c92_i8 : i8), ^bb4
  ^bb6:  // pred: ^bb0
    %12 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %13 = arith.cmpi uge, %12, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %13, ^bb7, ^bb1(%c80_i8 : i8)
  ^bb7:  // pred: ^bb6
    %14 = arith.subi %12, %c3_i64 : i64
    llvm.store %14, %arg1 : i64, !llvm.ptr
    cf.br ^bb5
  ^bb8:  // pred: ^bb9
    %c100_i256 = arith.constant 100 : i256
    %15 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c100_i256, %15 : i256, !llvm.ptr
    %16 = llvm.getelementptr %15[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %16, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_3 = arith.constant 0 : i8
    %17 = arith.cmpi ne, %c0_i8_3, %c0_i8_0 : i8
    cf.cond_br %17, ^bb3(%c0_i8_3 : i8), ^bb12
  ^bb9:  // pred: ^bb11
    %c1024_i64_4 = arith.constant 1024 : i64
    %18 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_5 = arith.constant 1 : i64
    %19 = arith.addi %18, %c1_i64_5 : i64
    llvm.store %19, %arg3 : i64, !llvm.ptr
    %20 = arith.cmpi ult, %c1024_i64_4, %19 : i64
    %c92_i8_6 = arith.constant 92 : i8
    cf.cond_br %20, ^bb1(%c92_i8_6 : i8), ^bb8
  ^bb10:  // pred: ^bb4
    %21 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_7 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %22 = arith.cmpi uge, %21, %c3_i64_7 : i64
    %c80_i8_8 = arith.constant 80 : i8
    cf.cond_br %22, ^bb11, ^bb1(%c80_i8_8 : i8)
  ^bb11:  // pred: ^bb10
    %23 = arith.subi %21, %c3_i64_7 : i64
    llvm.store %23, %arg1 : i64, !llvm.ptr
    cf.br ^bb9
  ^bb12:  // pred: ^bb8
    %24 = call @op85(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %25 = arith.cmpi ne, %24, %c0_i8_0 : i8
    cf.cond_br %25, ^bb1(%24 : i8), ^bb15
  ^bb13:  // pred: ^bb14
    %c1_i256 = arith.constant 1 : i256
    %26 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c1_i256, %26 : i256, !llvm.ptr
    %27 = llvm.getelementptr %26[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %27, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_9 = arith.constant 0 : i8
    %28 = arith.cmpi ne, %c0_i8_9, %c0_i8_0 : i8
    cf.cond_br %28, ^bb1(%c0_i8_9 : i8), ^bb19
  ^bb14:  // pred: ^bb16
    %c1024_i64_10 = arith.constant 1024 : i64
    %29 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_11 = arith.constant 1 : i64
    %30 = arith.addi %29, %c1_i64_11 : i64
    llvm.store %30, %arg3 : i64, !llvm.ptr
    %31 = arith.cmpi ult, %c1024_i64_10, %30 : i64
    %c92_i8_12 = arith.constant 92 : i8
    cf.cond_br %31, ^bb1(%c92_i8_12 : i8), ^bb13
  ^bb15:  // pred: ^bb12
    %32 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_13 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %33 = arith.cmpi uge, %32, %c3_i64_13 : i64
    %c80_i8_14 = arith.constant 80 : i8
    cf.cond_br %33, ^bb16, ^bb1(%c80_i8_14 : i8)
  ^bb16:  // pred: ^bb15
    %34 = arith.subi %32, %c3_i64_13 : i64
    llvm.store %34, %arg1 : i64, !llvm.ptr
    cf.br ^bb14
  ^bb17:  // pred: ^bb18
    %c200_i256 = arith.constant 200 : i256
    %35 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c200_i256, %35 : i256, !llvm.ptr
    %36 = llvm.getelementptr %35[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %36, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_15 = arith.constant 0 : i8
    %37 = arith.cmpi ne, %c0_i8_15, %c0_i8_0 : i8
    cf.cond_br %37, ^bb3(%c0_i8_15 : i8), ^bb21
  ^bb18:  // pred: ^bb20
    %c1024_i64_16 = arith.constant 1024 : i64
    %38 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_17 = arith.constant 1 : i64
    %39 = arith.addi %38, %c1_i64_17 : i64
    llvm.store %39, %arg3 : i64, !llvm.ptr
    %40 = arith.cmpi ult, %c1024_i64_16, %39 : i64
    %c92_i8_18 = arith.constant 92 : i8
    cf.cond_br %40, ^bb1(%c92_i8_18 : i8), ^bb17
  ^bb19:  // pred: ^bb13
    %41 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_19 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %42 = arith.cmpi uge, %41, %c3_i64_19 : i64
    %c80_i8_20 = arith.constant 80 : i8
    cf.cond_br %42, ^bb20, ^bb1(%c80_i8_20 : i8)
  ^bb20:  // pred: ^bb19
    %43 = arith.subi %41, %c3_i64_19 : i64
    llvm.store %43, %arg1 : i64, !llvm.ptr
    cf.br ^bb18
  ^bb21:  // pred: ^bb17
    %44 = call @op85(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %45 = arith.cmpi ne, %44, %c0_i8_0 : i8
    cf.cond_br %45, ^bb1(%44 : i8), ^bb24
  ^bb22:  // pred: ^bb23
    %c0_i256_21 = arith.constant 0 : i256
    %46 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_21, %46 : i256, !llvm.ptr
    %47 = llvm.getelementptr %46[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %47, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_22 = arith.constant 0 : i8
    %48 = arith.cmpi ne, %c0_i8_22, %c0_i8_0 : i8
    cf.cond_br %48, ^bb3(%c0_i8_22 : i8), ^bb26
  ^bb23:  // pred: ^bb25
    %c1024_i64_23 = arith.constant 1024 : i64
    %49 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_24 = arith.constant 1 : i64
    %50 = arith.addi %49, %c1_i64_24 : i64
    llvm.store %50, %arg3 : i64, !llvm.ptr
    %51 = arith.cmpi ult, %c1024_i64_23, %50 : i64
    %c92_i8_25 = arith.constant 92 : i8
    cf.cond_br %51, ^bb1(%c92_i8_25 : i8), ^bb22
  ^bb24:  // pred: ^bb21
    %52 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_26 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %53 = arith.cmpi uge, %52, %c3_i64_26 : i64
    %c80_i8_27 = arith.constant 80 : i8
    cf.cond_br %53, ^bb25, ^bb1(%c80_i8_27 : i8)
  ^bb25:  // pred: ^bb24
    %54 = arith.subi %52, %c3_i64_26 : i64
    llvm.store %54, %arg1 : i64, !llvm.ptr
    cf.br ^bb23
  ^bb26:  // pred: ^bb22
    %55 = call @op84(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %56 = arith.cmpi ne, %55, %c0_i8_0 : i8
    cf.cond_br %56, ^bb1(%55 : i8), ^bb29
  ^bb27:  // pred: ^bb28
    %c1_i256_28 = arith.constant 1 : i256
    %57 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c1_i256_28, %57 : i256, !llvm.ptr
    %58 = llvm.getelementptr %57[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %58, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_29 = arith.constant 0 : i8
    %59 = arith.cmpi ne, %c0_i8_29, %c0_i8_0 : i8
    cf.cond_br %59, ^bb3(%c0_i8_29 : i8), ^bb31
  ^bb28:  // pred: ^bb30
    %c1024_i64_30 = arith.constant 1024 : i64
    %60 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_31 = arith.constant 1 : i64
    %61 = arith.addi %60, %c1_i64_31 : i64
    llvm.store %61, %arg3 : i64, !llvm.ptr
    %62 = arith.cmpi ult, %c1024_i64_30, %61 : i64
    %c92_i8_32 = arith.constant 92 : i8
    cf.cond_br %62, ^bb1(%c92_i8_32 : i8), ^bb27
  ^bb29:  // pred: ^bb26
    %63 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_33 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %64 = arith.cmpi uge, %63, %c3_i64_33 : i64
    %c80_i8_34 = arith.constant 80 : i8
    cf.cond_br %64, ^bb30, ^bb1(%c80_i8_34 : i8)
  ^bb30:  // pred: ^bb29
    %65 = arith.subi %63, %c3_i64_33 : i64
    llvm.store %65, %arg1 : i64, !llvm.ptr
    cf.br ^bb28
  ^bb31:  // pred: ^bb27
    %66 = call @op84(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %67 = arith.cmpi ne, %66, %c0_i8_0 : i8
    cf.cond_br %67, ^bb3(%66 : i8), ^bb32
  ^bb32:  // pred: ^bb31
    %c0_i64_35 = arith.constant 0 : i64
    %c2_i8 = arith.constant 2 : i8
    %68 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_35, %c0_i64_35, %68, %c2_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c2_i8 : i8
  }
}
