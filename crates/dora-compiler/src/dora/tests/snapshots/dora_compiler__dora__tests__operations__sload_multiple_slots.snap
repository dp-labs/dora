---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  llvm.mlir.global internal @dora_global_stack_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_stack_length() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_memory_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_memory_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_calldata_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_calldata_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_gas_counter() {addr_space = 0 : i32} : i64
  llvm.mlir.global external @dora_global_ctx_is_static() {addr_space = 0 : i32} : !llvm.ptr
  func.func private @dora_fn_debug_print(i32)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_chainid(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_gaslimit(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_code_copy(!llvm.ptr, i64, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_call(!llvm.ptr, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr, i8) -> !llvm.ptr
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, i64, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_return_data_size(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_return_data_copy(!llvm.ptr, i64, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_transient_storage_read(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_transient_storage_write(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func public @main(%arg0: !llvm.ptr, %arg1: i64) -> i8 attributes {llvm.emit_c_interface} {
    %c1024_i256 = arith.constant 1024 : i256
    %0 = llvm.alloca %c1024_i256 x i256 : (i256) -> !llvm.ptr
    %1 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    llvm.store %0, %1 : !llvm.ptr, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %2 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    llvm.store %c0_i64, %2 : i64, !llvm.ptr
    %c0_i64_0 = arith.constant 0 : i64
    %3 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %c0_i64_0, %3 : i64, !llvm.ptr
    %4 = call @dora_fn_calldata(%arg0) : (!llvm.ptr) -> !llvm.ptr
    %5 = llvm.mlir.addressof @dora_global_calldata_ptr : !llvm.ptr
    llvm.store %4, %5 : !llvm.ptr, !llvm.ptr
    %6 = call @dora_fn_calldata_size(%arg0) : (!llvm.ptr) -> i64
    %7 = llvm.mlir.addressof @dora_global_calldata_size : !llvm.ptr
    llvm.store %6, %7 : i64, !llvm.ptr
    %8 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    llvm.store %arg1, %8 : i64, !llvm.ptr
    %9 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64 = arith.constant 1024 : i64
    %10 = llvm.load %9 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %11 = arith.addi %10, %c1_i64 : i64
    llvm.store %11, %9 : i64, !llvm.ptr
    %12 = arith.cmpi ult, %c1024_i64, %11 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %12, ^bb1(%c92_i8 : i8), ^bb3
  ^bb1(%13: i8):  // 13 preds: ^bb0, ^bb2, ^bb3, ^bb4, ^bb5, ^bb6, ^bb7, ^bb8, ^bb9, ^bb10, ^bb11, ^bb12, ^bb13
    %c0_i64_1 = arith.constant 0 : i64
    %14 = call @dora_fn_write_result(%arg0, %c0_i64_1, %c0_i64_1, %c0_i64_1, %13) : (!llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
    return %13 : i8
  ^bb2(%15: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %15 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3:  // pred: ^bb0
    %c0_i256 = arith.constant 0 : i256
    %16 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %17 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256, %17 : i256, !llvm.ptr
    %18 = llvm.getelementptr %17[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %18, %16 : !llvm.ptr, !llvm.ptr
    %19 = llvm.load %9 : !llvm.ptr -> i64
    %c1_i64_2 = arith.constant 1 : i64
    %20 = arith.addi %19, %c1_i64_2 : i64
    llvm.store %20, %9 : i64, !llvm.ptr
    %21 = arith.cmpi ult, %c1024_i64, %20 : i64
    %c92_i8_3 = arith.constant 92 : i8
    cf.cond_br %21, ^bb1(%c92_i8_3 : i8), ^bb4
  ^bb4:  // pred: ^bb3
    %c100_i256 = arith.constant 100 : i256
    %22 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %23 = llvm.load %22 : !llvm.ptr -> !llvm.ptr
    llvm.store %c100_i256, %23 : i256, !llvm.ptr
    %24 = llvm.getelementptr %23[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %24, %22 : !llvm.ptr, !llvm.ptr
    %25 = llvm.load %9 : !llvm.ptr -> i64
    %c-2_i64 = arith.constant -2 : i64
    %26 = arith.addi %25, %c-2_i64 : i64
    llvm.store %26, %9 : i64, !llvm.ptr
    %c2_i64 = arith.constant 2 : i64
    %27 = arith.cmpi ult, %25, %c2_i64 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %27, ^bb1(%c91_i8 : i8), ^bb5
  ^bb5:  // pred: ^bb4
    %28 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %29 = llvm.load %28 : !llvm.ptr -> !llvm.ptr
    %30 = llvm.getelementptr %29[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %31 = llvm.load %30 : !llvm.ptr -> i256
    llvm.store %30, %28 : !llvm.ptr, !llvm.ptr
    %32 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %33 = llvm.load %32 : !llvm.ptr -> !llvm.ptr
    %34 = llvm.getelementptr %33[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %35 = llvm.load %34 : !llvm.ptr -> i256
    llvm.store %34, %32 : !llvm.ptr, !llvm.ptr
    %36 = llvm.mlir.addressof @dora_global_ctx_is_static : !llvm.ptr
    %37 = llvm.load %36 : !llvm.ptr -> i1
    %c87_i8 = arith.constant 87 : i8
    cf.cond_br %37, ^bb1(%c87_i8 : i8), ^bb6
  ^bb6:  // pred: ^bb5
    %c1_i256 = arith.constant 1 : i256
    %38 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %31, %38 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i256_4 = arith.constant 1 : i256
    %39 = llvm.alloca %c1_i256_4 x i256 : (i256) -> !llvm.ptr
    llvm.store %35, %39 {alignment = 1 : i64} : i256, !llvm.ptr
    %40 = call @dora_fn_sstore(%arg0, %38, %39) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %41 = llvm.load %9 : !llvm.ptr -> i64
    %c1_i64_5 = arith.constant 1 : i64
    %42 = arith.addi %41, %c1_i64_5 : i64
    llvm.store %42, %9 : i64, !llvm.ptr
    %43 = arith.cmpi ult, %c1024_i64, %42 : i64
    %c92_i8_6 = arith.constant 92 : i8
    cf.cond_br %43, ^bb1(%c92_i8_6 : i8), ^bb7
  ^bb7:  // pred: ^bb6
    %c1_i256_7 = arith.constant 1 : i256
    %44 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %45 = llvm.load %44 : !llvm.ptr -> !llvm.ptr
    llvm.store %c1_i256_7, %45 : i256, !llvm.ptr
    %46 = llvm.getelementptr %45[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %46, %44 : !llvm.ptr, !llvm.ptr
    %47 = llvm.load %9 : !llvm.ptr -> i64
    %c1_i64_8 = arith.constant 1 : i64
    %48 = arith.addi %47, %c1_i64_8 : i64
    llvm.store %48, %9 : i64, !llvm.ptr
    %49 = arith.cmpi ult, %c1024_i64, %48 : i64
    %c92_i8_9 = arith.constant 92 : i8
    cf.cond_br %49, ^bb1(%c92_i8_9 : i8), ^bb8
  ^bb8:  // pred: ^bb7
    %c200_i256 = arith.constant 200 : i256
    %50 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %51 = llvm.load %50 : !llvm.ptr -> !llvm.ptr
    llvm.store %c200_i256, %51 : i256, !llvm.ptr
    %52 = llvm.getelementptr %51[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %52, %50 : !llvm.ptr, !llvm.ptr
    %53 = llvm.load %9 : !llvm.ptr -> i64
    %c-2_i64_10 = arith.constant -2 : i64
    %54 = arith.addi %53, %c-2_i64_10 : i64
    llvm.store %54, %9 : i64, !llvm.ptr
    %c2_i64_11 = arith.constant 2 : i64
    %55 = arith.cmpi ult, %53, %c2_i64_11 : i64
    %c91_i8_12 = arith.constant 91 : i8
    cf.cond_br %55, ^bb1(%c91_i8_12 : i8), ^bb9
  ^bb9:  // pred: ^bb8
    %56 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %57 = llvm.load %56 : !llvm.ptr -> !llvm.ptr
    %58 = llvm.getelementptr %57[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %59 = llvm.load %58 : !llvm.ptr -> i256
    llvm.store %58, %56 : !llvm.ptr, !llvm.ptr
    %60 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %61 = llvm.load %60 : !llvm.ptr -> !llvm.ptr
    %62 = llvm.getelementptr %61[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %63 = llvm.load %62 : !llvm.ptr -> i256
    llvm.store %62, %60 : !llvm.ptr, !llvm.ptr
    %64 = llvm.mlir.addressof @dora_global_ctx_is_static : !llvm.ptr
    %65 = llvm.load %64 : !llvm.ptr -> i1
    %c87_i8_13 = arith.constant 87 : i8
    cf.cond_br %65, ^bb1(%c87_i8_13 : i8), ^bb10
  ^bb10:  // pred: ^bb9
    %c1_i256_14 = arith.constant 1 : i256
    %66 = llvm.alloca %c1_i256_14 x i256 : (i256) -> !llvm.ptr
    llvm.store %59, %66 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i256_15 = arith.constant 1 : i256
    %67 = llvm.alloca %c1_i256_15 x i256 : (i256) -> !llvm.ptr
    llvm.store %63, %67 {alignment = 1 : i64} : i256, !llvm.ptr
    %68 = call @dora_fn_sstore(%arg0, %66, %67) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %69 = llvm.load %9 : !llvm.ptr -> i64
    %c1_i64_16 = arith.constant 1 : i64
    %70 = arith.addi %69, %c1_i64_16 : i64
    llvm.store %70, %9 : i64, !llvm.ptr
    %71 = arith.cmpi ult, %c1024_i64, %70 : i64
    %c92_i8_17 = arith.constant 92 : i8
    cf.cond_br %71, ^bb1(%c92_i8_17 : i8), ^bb11
  ^bb11:  // pred: ^bb10
    %c0_i256_18 = arith.constant 0 : i256
    %72 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %73 = llvm.load %72 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_18, %73 : i256, !llvm.ptr
    %74 = llvm.getelementptr %73[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %74, %72 : !llvm.ptr, !llvm.ptr
    %75 = llvm.load %9 : !llvm.ptr -> i64
    %c0_i64_19 = arith.constant 0 : i64
    %76 = arith.addi %75, %c0_i64_19 : i64
    llvm.store %76, %9 : i64, !llvm.ptr
    %c1_i64_20 = arith.constant 1 : i64
    %77 = arith.cmpi ult, %75, %c1_i64_20 : i64
    %c91_i8_21 = arith.constant 91 : i8
    cf.cond_br %77, ^bb1(%c91_i8_21 : i8), ^bb12
  ^bb12:  // pred: ^bb11
    %78 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %79 = llvm.load %78 : !llvm.ptr -> !llvm.ptr
    %80 = llvm.getelementptr %79[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %81 = llvm.load %80 : !llvm.ptr -> i256
    llvm.store %80, %78 : !llvm.ptr, !llvm.ptr
    %c1_i256_22 = arith.constant 1 : i256
    %82 = llvm.alloca %c1_i256_22 x i256 : (i256) -> !llvm.ptr
    llvm.store %81, %82 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i256_23 = arith.constant 1 : i256
    %83 = llvm.alloca %c1_i256_23 x i256 : (i256) -> !llvm.ptr
    %84 = call @dora_fn_sload(%arg0, %82, %83) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %85 = llvm.load %83 : !llvm.ptr -> i256
    %86 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %87 = llvm.load %86 : !llvm.ptr -> !llvm.ptr
    llvm.store %85, %87 : i256, !llvm.ptr
    %88 = llvm.getelementptr %87[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %88, %86 : !llvm.ptr, !llvm.ptr
    %89 = llvm.load %9 : !llvm.ptr -> i64
    %c1_i64_24 = arith.constant 1 : i64
    %90 = arith.addi %89, %c1_i64_24 : i64
    llvm.store %90, %9 : i64, !llvm.ptr
    %91 = arith.cmpi ult, %c1024_i64, %90 : i64
    %c92_i8_25 = arith.constant 92 : i8
    cf.cond_br %91, ^bb1(%c92_i8_25 : i8), ^bb13
  ^bb13:  // pred: ^bb12
    %c1_i256_26 = arith.constant 1 : i256
    %92 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %93 = llvm.load %92 : !llvm.ptr -> !llvm.ptr
    llvm.store %c1_i256_26, %93 : i256, !llvm.ptr
    %94 = llvm.getelementptr %93[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %94, %92 : !llvm.ptr, !llvm.ptr
    %95 = llvm.load %9 : !llvm.ptr -> i64
    %c0_i64_27 = arith.constant 0 : i64
    %96 = arith.addi %95, %c0_i64_27 : i64
    llvm.store %96, %9 : i64, !llvm.ptr
    %c1_i64_28 = arith.constant 1 : i64
    %97 = arith.cmpi ult, %95, %c1_i64_28 : i64
    %c91_i8_29 = arith.constant 91 : i8
    cf.cond_br %97, ^bb1(%c91_i8_29 : i8), ^bb14
  ^bb14:  // pred: ^bb13
    %98 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %99 = llvm.load %98 : !llvm.ptr -> !llvm.ptr
    %100 = llvm.getelementptr %99[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %101 = llvm.load %100 : !llvm.ptr -> i256
    llvm.store %100, %98 : !llvm.ptr, !llvm.ptr
    %c1_i256_30 = arith.constant 1 : i256
    %102 = llvm.alloca %c1_i256_30 x i256 : (i256) -> !llvm.ptr
    llvm.store %101, %102 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i256_31 = arith.constant 1 : i256
    %103 = llvm.alloca %c1_i256_31 x i256 : (i256) -> !llvm.ptr
    %104 = call @dora_fn_sload(%arg0, %102, %103) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %105 = llvm.load %103 : !llvm.ptr -> i256
    %106 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %107 = llvm.load %106 : !llvm.ptr -> !llvm.ptr
    llvm.store %105, %107 : i256, !llvm.ptr
    %108 = llvm.getelementptr %107[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %108, %106 : !llvm.ptr, !llvm.ptr
    cf.br ^bb15
  ^bb15:  // pred: ^bb14
    %c0_i64_32 = arith.constant 0 : i64
    %c1_i8 = arith.constant 1 : i8
    %109 = call @dora_fn_write_result(%arg0, %c0_i64_32, %c0_i64_32, %arg1, %c1_i8) : (!llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
    return %c1_i8 : i8
  }
}
