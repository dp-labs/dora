---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  func.func private @dora_fn_nop()
  func.func private @dora_fn_tracing(!llvm.ptr, i8, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_fn_is_static(!llvm.ptr) -> i8
  func.func private @dora_fn_exp(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_chainid(!llvm.ptr) -> i64
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gaslimit_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_memory_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_memory_size(!llvm.ptr) -> i64
  func.func private @dora_fn_code_copy(!llvm.ptr, !llvm.ptr, i64, i64)
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_call(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_returndata_copy(!llvm.ptr, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_tload(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_tstore(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func public @main(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr) -> i8 attributes {llvm.emit_c_interface} {
    cf.br ^bb5
  ^bb1(%0: i8):  // 21 preds: ^bb2, ^bb4, ^bb5, ^bb8, ^bb9, ^bb13, ^bb14, ^bb17, ^bb18, ^bb22, ^bb23, ^bb26, ^bb27, ^bb28, ^bb31, ^bb32, ^bb34, ^bb35, ^bb36, ^bb39, ^bb40
    %c0_i64 = arith.constant 0 : i64
    %1 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64, %c0_i64, %1, %0) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %0 : i8
  ^bb2(%2: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %2 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3:  // pred: ^bb4
    %c255_i256 = arith.constant 255 : i256
    %3 = llvm.load %arg3 : !llvm.ptr -> i64
    %4 = llvm.getelementptr %arg2[%3] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64 = arith.constant 1 : i64
    %5 = arith.addi %3, %c1_i64 : i64
    llvm.store %5, %arg3 : i64, !llvm.ptr
    llvm.store %c255_i256, %4 : i256, !llvm.ptr
    cf.br ^bb9
  ^bb4:  // pred: ^bb6
    %c1024_i64 = arith.constant 1024 : i64
    %6 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_0 = arith.constant 1 : i64
    %7 = arith.addi %6, %c1_i64_0 : i64
    %8 = arith.cmpi ult, %c1024_i64, %7 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %8, ^bb1(%c92_i8 : i8), ^bb3
  ^bb5:  // pred: ^bb0
    %9 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %10 = arith.cmpi uge, %9, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %10, ^bb6, ^bb1(%c80_i8 : i8)
  ^bb6:  // pred: ^bb5
    %11 = arith.subi %9, %c3_i64 : i64
    llvm.store %11, %arg1 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb7:  // pred: ^bb8
    %c0_i256 = arith.constant 0 : i256
    %12 = llvm.load %arg3 : !llvm.ptr -> i64
    %13 = llvm.getelementptr %arg2[%12] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_1 = arith.constant 1 : i64
    %14 = arith.addi %12, %c1_i64_1 : i64
    llvm.store %14, %arg3 : i64, !llvm.ptr
    llvm.store %c0_i256, %13 : i256, !llvm.ptr
    cf.br ^bb14
  ^bb8:  // pred: ^bb10
    %c1024_i64_2 = arith.constant 1024 : i64
    %15 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_3 = arith.constant 1 : i64
    %16 = arith.addi %15, %c1_i64_3 : i64
    %17 = arith.cmpi ult, %c1024_i64_2, %16 : i64
    %c92_i8_4 = arith.constant 92 : i8
    cf.cond_br %17, ^bb1(%c92_i8_4 : i8), ^bb7
  ^bb9:  // pred: ^bb3
    %18 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_5 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %19 = arith.cmpi uge, %18, %c3_i64_5 : i64
    %c80_i8_6 = arith.constant 80 : i8
    cf.cond_br %19, ^bb10, ^bb1(%c80_i8_6 : i8)
  ^bb10:  // pred: ^bb9
    %20 = arith.subi %18, %c3_i64_5 : i64
    llvm.store %20, %arg1 : i64, !llvm.ptr
    cf.br ^bb8
  ^bb11:  // pred: ^bb13
    %21 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_7 = arith.constant 1 : i64
    %22 = arith.subi %21, %c1_i64_7 : i64
    %23 = llvm.getelementptr %arg2[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %22, %arg3 : i64, !llvm.ptr
    %24 = llvm.load %23 : !llvm.ptr -> i256
    %25 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_8 = arith.constant 1 : i64
    %26 = arith.subi %25, %c1_i64_8 : i64
    %27 = llvm.getelementptr %arg2[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %26, %arg3 : i64, !llvm.ptr
    %28 = llvm.load %27 : !llvm.ptr -> i256
    %c32_i64 = arith.constant 32 : i64
    %c0_i64_9 = arith.constant 0 : i64
    %29 = arith.cmpi ne, %c32_i64, %c0_i64_9 : i64
    cf.cond_br %29, ^bb26, ^bb12
  ^bb12:  // 2 preds: ^bb11, ^bb30
    %30 = arith.trunci %24 : i256 to i64
    %31 = call @dora_fn_memory_ptr(%arg0) : (!llvm.ptr) -> !llvm.ptr
    %32 = llvm.getelementptr %31[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %33 = llvm.intr.bswap(%28)  : (i256) -> i256
    llvm.store %33, %32 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb18
  ^bb13:  // pred: ^bb15
    %c1024_i64_10 = arith.constant 1024 : i64
    %34 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-2_i64 = arith.constant -2 : i64
    %35 = arith.addi %34, %c-2_i64 : i64
    %c2_i64 = arith.constant 2 : i64
    %36 = arith.cmpi ult, %34, %c2_i64 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %36, ^bb1(%c91_i8 : i8), ^bb11
  ^bb14:  // pred: ^bb7
    %37 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_11 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %38 = arith.cmpi uge, %37, %c3_i64_11 : i64
    %c80_i8_12 = arith.constant 80 : i8
    cf.cond_br %38, ^bb15, ^bb1(%c80_i8_12 : i8)
  ^bb15:  // pred: ^bb14
    %39 = arith.subi %37, %c3_i64_11 : i64
    llvm.store %39, %arg1 : i64, !llvm.ptr
    cf.br ^bb13
  ^bb16:  // pred: ^bb17
    %c0_i256_13 = arith.constant 0 : i256
    %40 = llvm.load %arg3 : !llvm.ptr -> i64
    %41 = llvm.getelementptr %arg2[%40] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_14 = arith.constant 1 : i64
    %42 = arith.addi %40, %c1_i64_14 : i64
    llvm.store %42, %arg3 : i64, !llvm.ptr
    llvm.store %c0_i256_13, %41 : i256, !llvm.ptr
    cf.br ^bb23
  ^bb17:  // pred: ^bb19
    %c1024_i64_15 = arith.constant 1024 : i64
    %43 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_16 = arith.constant 1 : i64
    %44 = arith.addi %43, %c1_i64_16 : i64
    %45 = arith.cmpi ult, %c1024_i64_15, %44 : i64
    %c92_i8_17 = arith.constant 92 : i8
    cf.cond_br %45, ^bb1(%c92_i8_17 : i8), ^bb16
  ^bb18:  // pred: ^bb12
    %46 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_18 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %47 = arith.cmpi uge, %46, %c3_i64_18 : i64
    %c80_i8_19 = arith.constant 80 : i8
    cf.cond_br %47, ^bb19, ^bb1(%c80_i8_19 : i8)
  ^bb19:  // pred: ^bb18
    %48 = arith.subi %46, %c3_i64_18 : i64
    llvm.store %48, %arg1 : i64, !llvm.ptr
    cf.br ^bb17
  ^bb20:  // pred: ^bb22
    %49 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_20 = arith.constant 1 : i64
    %50 = arith.subi %49, %c1_i64_20 : i64
    %51 = llvm.getelementptr %arg2[%50] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %50, %arg3 : i64, !llvm.ptr
    %52 = llvm.load %51 : !llvm.ptr -> i256
    %c32_i64_21 = arith.constant 32 : i64
    %c0_i64_22 = arith.constant 0 : i64
    %53 = arith.cmpi ne, %c32_i64_21, %c0_i64_22 : i64
    cf.cond_br %53, ^bb34, ^bb21
  ^bb21:  // 2 preds: ^bb20, ^bb38
    %54 = arith.trunci %52 : i256 to i64
    %55 = call @dora_fn_memory_ptr(%arg0) : (!llvm.ptr) -> !llvm.ptr
    %56 = llvm.getelementptr %55[%54] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %57 = llvm.load %56 {alignment = 1 : i64} : !llvm.ptr -> i256
    %58 = llvm.intr.bswap(%57)  : (i256) -> i256
    %59 = llvm.load %arg3 : !llvm.ptr -> i64
    %60 = llvm.getelementptr %arg2[%59] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_23 = arith.constant 1 : i64
    %61 = arith.addi %59, %c1_i64_23 : i64
    llvm.store %61, %arg3 : i64, !llvm.ptr
    llvm.store %58, %60 : i256, !llvm.ptr
    cf.br ^bb25
  ^bb22:  // pred: ^bb24
    %c1024_i64_24 = arith.constant 1024 : i64
    %62 = llvm.load %arg3 : !llvm.ptr -> i64
    %c0_i64_25 = arith.constant 0 : i64
    %63 = arith.addi %62, %c0_i64_25 : i64
    %c1_i64_26 = arith.constant 1 : i64
    %64 = arith.cmpi ult, %62, %c1_i64_26 : i64
    %c91_i8_27 = arith.constant 91 : i8
    cf.cond_br %64, ^bb1(%c91_i8_27 : i8), ^bb20
  ^bb23:  // pred: ^bb16
    %65 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_28 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %66 = arith.cmpi uge, %65, %c3_i64_28 : i64
    %c80_i8_29 = arith.constant 80 : i8
    cf.cond_br %66, ^bb24, ^bb1(%c80_i8_29 : i8)
  ^bb24:  // pred: ^bb23
    %67 = arith.subi %65, %c3_i64_28 : i64
    llvm.store %67, %arg1 : i64, !llvm.ptr
    cf.br ^bb22
  ^bb25:  // pred: ^bb21
    %c0_i64_30 = arith.constant 0 : i64
    %c1_i8 = arith.constant 1 : i8
    %68 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_30, %c0_i64_30, %68, %c1_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c1_i8 : i8
  ^bb26:  // pred: ^bb11
    %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256
    %69 = arith.cmpi sgt, %24, %c18446744073709551615_i256 : i256
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %69, ^bb1(%c84_i8 : i8), ^bb27
  ^bb27:  // pred: ^bb26
    %70 = arith.trunci %24 : i256 to i64
    %c0_i64_31 = arith.constant 0 : i64
    %71 = arith.cmpi slt, %70, %c0_i64_31 : i64
    %c84_i8_32 = arith.constant 84 : i8
    cf.cond_br %71, ^bb1(%c84_i8_32 : i8), ^bb28
  ^bb28:  // pred: ^bb27
    %72 = arith.addi %70, %c32_i64 : i64
    %c0_i64_33 = arith.constant 0 : i64
    %73 = arith.cmpi slt, %72, %c0_i64_33 : i64
    %c84_i8_34 = arith.constant 84 : i8
    cf.cond_br %73, ^bb1(%c84_i8_34 : i8), ^bb29
  ^bb29:  // pred: ^bb28
    %c31_i64 = arith.constant 31 : i64
    %c32_i64_35 = arith.constant 32 : i64
    %74 = arith.addi %72, %c31_i64 : i64
    %75 = arith.divui %74, %c32_i64_35 : i64
    %c32_i64_36 = arith.constant 32 : i64
    %76 = arith.muli %75, %c32_i64_36 : i64
    %77 = call @dora_fn_memory_size(%arg0) : (!llvm.ptr) -> i64
    %c31_i64_37 = arith.constant 31 : i64
    %c32_i64_38 = arith.constant 32 : i64
    %78 = arith.addi %77, %c31_i64_37 : i64
    %79 = arith.divui %78, %c32_i64_38 : i64
    %80 = arith.muli %79, %c32_i64_36 : i64
    %81 = arith.cmpi ult, %80, %76 : i64
    cf.cond_br %81, ^bb31, ^bb30
  ^bb30:  // 2 preds: ^bb29, ^bb33
    cf.br ^bb12
  ^bb31:  // pred: ^bb29
    %c3_i64_39 = arith.constant 3 : i64
    %c512_i64 = arith.constant 512 : i64
    %82 = arith.muli %79, %79 : i64
    %83 = arith.divui %82, %c512_i64 : i64
    %84 = arith.muli %79, %c3_i64_39 : i64
    %85 = arith.addi %83, %84 : i64
    %c3_i64_40 = arith.constant 3 : i64
    %c512_i64_41 = arith.constant 512 : i64
    %86 = arith.muli %75, %75 : i64
    %87 = arith.divui %86, %c512_i64_41 : i64
    %88 = arith.muli %75, %c3_i64_40 : i64
    %89 = arith.addi %87, %88 : i64
    %90 = arith.subi %89, %85 : i64
    %91 = llvm.load %arg1 : !llvm.ptr -> i64
    %92 = arith.cmpi ult, %91, %90 : i64
    scf.if %92 {
    } else {
      %125 = arith.subi %91, %90 : i64
      llvm.store %125, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_42 = arith.constant 80 : i8
    cf.cond_br %92, ^bb1(%c80_i8_42 : i8), ^bb32
  ^bb32:  // pred: ^bb31
    %93 = call @dora_fn_extend_memory(%arg0, %76) : (!llvm.ptr, i64) -> !llvm.ptr
    %94 = llvm.getelementptr %93[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %95 = llvm.load %94 : !llvm.ptr -> i8
    %c0_i8 = arith.constant 0 : i8
    %96 = arith.cmpi ne, %95, %c0_i8 : i8
    cf.cond_br %96, ^bb1(%95 : i8), ^bb33
  ^bb33:  // pred: ^bb32
    cf.br ^bb30
  ^bb34:  // pred: ^bb20
    %c18446744073709551615_i256_43 = arith.constant 18446744073709551615 : i256
    %97 = arith.cmpi sgt, %52, %c18446744073709551615_i256_43 : i256
    %c84_i8_44 = arith.constant 84 : i8
    cf.cond_br %97, ^bb1(%c84_i8_44 : i8), ^bb35
  ^bb35:  // pred: ^bb34
    %98 = arith.trunci %52 : i256 to i64
    %c0_i64_45 = arith.constant 0 : i64
    %99 = arith.cmpi slt, %98, %c0_i64_45 : i64
    %c84_i8_46 = arith.constant 84 : i8
    cf.cond_br %99, ^bb1(%c84_i8_46 : i8), ^bb36
  ^bb36:  // pred: ^bb35
    %100 = arith.addi %98, %c32_i64_21 : i64
    %c0_i64_47 = arith.constant 0 : i64
    %101 = arith.cmpi slt, %100, %c0_i64_47 : i64
    %c84_i8_48 = arith.constant 84 : i8
    cf.cond_br %101, ^bb1(%c84_i8_48 : i8), ^bb37
  ^bb37:  // pred: ^bb36
    %c31_i64_49 = arith.constant 31 : i64
    %c32_i64_50 = arith.constant 32 : i64
    %102 = arith.addi %100, %c31_i64_49 : i64
    %103 = arith.divui %102, %c32_i64_50 : i64
    %c32_i64_51 = arith.constant 32 : i64
    %104 = arith.muli %103, %c32_i64_51 : i64
    %105 = call @dora_fn_memory_size(%arg0) : (!llvm.ptr) -> i64
    %c31_i64_52 = arith.constant 31 : i64
    %c32_i64_53 = arith.constant 32 : i64
    %106 = arith.addi %105, %c31_i64_52 : i64
    %107 = arith.divui %106, %c32_i64_53 : i64
    %108 = arith.muli %107, %c32_i64_51 : i64
    %109 = arith.cmpi ult, %108, %104 : i64
    cf.cond_br %109, ^bb39, ^bb38
  ^bb38:  // 2 preds: ^bb37, ^bb41
    cf.br ^bb21
  ^bb39:  // pred: ^bb37
    %c3_i64_54 = arith.constant 3 : i64
    %c512_i64_55 = arith.constant 512 : i64
    %110 = arith.muli %107, %107 : i64
    %111 = arith.divui %110, %c512_i64_55 : i64
    %112 = arith.muli %107, %c3_i64_54 : i64
    %113 = arith.addi %111, %112 : i64
    %c3_i64_56 = arith.constant 3 : i64
    %c512_i64_57 = arith.constant 512 : i64
    %114 = arith.muli %103, %103 : i64
    %115 = arith.divui %114, %c512_i64_57 : i64
    %116 = arith.muli %103, %c3_i64_56 : i64
    %117 = arith.addi %115, %116 : i64
    %118 = arith.subi %117, %113 : i64
    %119 = llvm.load %arg1 : !llvm.ptr -> i64
    %120 = arith.cmpi ult, %119, %118 : i64
    scf.if %120 {
    } else {
      %125 = arith.subi %119, %118 : i64
      llvm.store %125, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_58 = arith.constant 80 : i8
    cf.cond_br %120, ^bb1(%c80_i8_58 : i8), ^bb40
  ^bb40:  // pred: ^bb39
    %121 = call @dora_fn_extend_memory(%arg0, %104) : (!llvm.ptr, i64) -> !llvm.ptr
    %122 = llvm.getelementptr %121[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %123 = llvm.load %122 : !llvm.ptr -> i8
    %c0_i8_59 = arith.constant 0 : i8
    %124 = arith.cmpi ne, %123, %c0_i8_59 : i8
    cf.cond_br %124, ^bb1(%123 : i8), ^bb41
  ^bb41:  // pred: ^bb40
    cf.br ^bb38
  }
}
