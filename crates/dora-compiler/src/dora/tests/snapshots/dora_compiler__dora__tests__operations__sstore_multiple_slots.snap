---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  llvm.mlir.global internal @dora_global_stack_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_stack_length() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_memory_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_memory_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_calldata_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_calldata_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_gas_counter() {addr_space = 0 : i32} : i64
  llvm.mlir.global external @dora_global_ctx_is_static() {addr_space = 0 : i32} : !llvm.ptr
  func.func private @dora_fn_debug_print(i32)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_chainid(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_gaslimit(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_code_copy(!llvm.ptr, i64, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_call(!llvm.ptr, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr, i8) -> !llvm.ptr
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, i64, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_return_data_size(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_return_data_copy(!llvm.ptr, i64, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_transient_storage_read(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_transient_storage_write(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func public @main(%arg0: !llvm.ptr, %arg1: i64) -> i8 attributes {llvm.emit_c_interface} {
    %c1024_i256 = arith.constant 1024 : i256
    %0 = llvm.alloca %c1024_i256 x i256 : (i256) -> !llvm.ptr
    %1 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    llvm.store %0, %1 : !llvm.ptr, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %2 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    llvm.store %c0_i64, %2 : i64, !llvm.ptr
    %c0_i64_0 = arith.constant 0 : i64
    %3 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %c0_i64_0, %3 : i64, !llvm.ptr
    %4 = call @dora_fn_calldata(%arg0) : (!llvm.ptr) -> !llvm.ptr
    %5 = llvm.mlir.addressof @dora_global_calldata_ptr : !llvm.ptr
    llvm.store %4, %5 : !llvm.ptr, !llvm.ptr
    %6 = call @dora_fn_calldata_size(%arg0) : (!llvm.ptr) -> i64
    %7 = llvm.mlir.addressof @dora_global_calldata_size : !llvm.ptr
    llvm.store %6, %7 : i64, !llvm.ptr
    %8 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    llvm.store %arg1, %8 : i64, !llvm.ptr
    cf.br ^bb5
  ^bb1(%9: i8):  // 19 preds: ^bb2, ^bb4, ^bb5, ^bb8, ^bb9, ^bb11, ^bb12, ^bb13, ^bb15, ^bb16, ^bb19, ^bb20, ^bb23, ^bb24, ^bb26, ^bb27, ^bb28, ^bb30, ^bb31
    %c0_i64_1 = arith.constant 0 : i64
    %10 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %11 = llvm.load %10 : !llvm.ptr -> i64
    %12 = call @dora_fn_write_result(%arg0, %c0_i64_1, %c0_i64_1, %11, %9) : (!llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
    return %9 : i8
  ^bb2(%13: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %13 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3:  // pred: ^bb4
    %c0_i256 = arith.constant 0 : i256
    %14 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %15 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256, %15 : i256, !llvm.ptr
    %16 = llvm.getelementptr %15[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %16, %14 : !llvm.ptr, !llvm.ptr
    cf.br ^bb9
  ^bb4:  // pred: ^bb6
    %17 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64 = arith.constant 1024 : i64
    %18 = llvm.load %17 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %19 = arith.addi %18, %c1_i64 : i64
    llvm.store %19, %17 : i64, !llvm.ptr
    %20 = arith.cmpi ult, %c1024_i64, %19 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %20, ^bb1(%c92_i8 : i8), ^bb3
  ^bb5:  // pred: ^bb0
    %21 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %22 = llvm.load %21 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    %23 = arith.cmpi uge, %22, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %23, ^bb6, ^bb1(%c80_i8 : i8)
  ^bb6:  // pred: ^bb5
    %24 = arith.subi %22, %c3_i64 : i64
    llvm.store %24, %21 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb7:  // pred: ^bb8
    %c500_i256 = arith.constant 500 : i256
    %25 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %26 = llvm.load %25 : !llvm.ptr -> !llvm.ptr
    llvm.store %c500_i256, %26 : i256, !llvm.ptr
    %27 = llvm.getelementptr %26[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %27, %25 : !llvm.ptr, !llvm.ptr
    cf.br ^bb16
  ^bb8:  // pred: ^bb10
    %28 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_2 = arith.constant 1024 : i64
    %29 = llvm.load %28 : !llvm.ptr -> i64
    %c1_i64_3 = arith.constant 1 : i64
    %30 = arith.addi %29, %c1_i64_3 : i64
    llvm.store %30, %28 : i64, !llvm.ptr
    %31 = arith.cmpi ult, %c1024_i64_2, %30 : i64
    %c92_i8_4 = arith.constant 92 : i8
    cf.cond_br %31, ^bb1(%c92_i8_4 : i8), ^bb7
  ^bb9:  // pred: ^bb3
    %32 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %33 = llvm.load %32 : !llvm.ptr -> i64
    %c3_i64_5 = arith.constant 3 : i64
    %34 = arith.cmpi uge, %33, %c3_i64_5 : i64
    %c80_i8_6 = arith.constant 80 : i8
    cf.cond_br %34, ^bb10, ^bb1(%c80_i8_6 : i8)
  ^bb10:  // pred: ^bb9
    %35 = arith.subi %33, %c3_i64_5 : i64
    llvm.store %35, %32 : i64, !llvm.ptr
    cf.br ^bb8
  ^bb11:  // pred: ^bb15
    %36 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %37 = llvm.load %36 : !llvm.ptr -> !llvm.ptr
    %38 = llvm.getelementptr %37[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %39 = llvm.load %38 : !llvm.ptr -> i256
    llvm.store %38, %36 : !llvm.ptr, !llvm.ptr
    %40 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %41 = llvm.load %40 : !llvm.ptr -> !llvm.ptr
    %42 = llvm.getelementptr %41[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %43 = llvm.load %42 : !llvm.ptr -> i256
    llvm.store %42, %40 : !llvm.ptr, !llvm.ptr
    %44 = llvm.mlir.addressof @dora_global_ctx_is_static : !llvm.ptr
    %45 = llvm.load %44 : !llvm.ptr -> i1
    %c87_i8 = arith.constant 87 : i8
    cf.cond_br %45, ^bb1(%c87_i8 : i8), ^bb12
  ^bb12:  // pred: ^bb11
    %c1_i256 = arith.constant 1 : i256
    %46 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %39, %46 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i256_7 = arith.constant 1 : i256
    %47 = llvm.alloca %c1_i256_7 x i256 : (i256) -> !llvm.ptr
    llvm.store %43, %47 {alignment = 1 : i64} : i256, !llvm.ptr
    %48 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %49 = llvm.load %48 : !llvm.ptr -> i64
    %50 = call @dora_fn_sstore(%arg0, %46, %47, %49) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
    %51 = llvm.getelementptr %50[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %52 = llvm.load %51 : !llvm.ptr -> i8
    %c0_i8 = arith.constant 0 : i8
    %53 = arith.cmpi ne, %52, %c0_i8 : i8
    cf.cond_br %53, ^bb1(%52 : i8), ^bb13
  ^bb13:  // pred: ^bb12
    %54 = llvm.getelementptr %50[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %55 = llvm.load %54 : !llvm.ptr -> i64
    %56 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %57 = llvm.load %56 : !llvm.ptr -> i64
    %58 = arith.cmpi ult, %57, %55 : i64
    scf.if %58 {
    } else {
      %123 = arith.subi %57, %55 : i64
      llvm.store %123, %56 : i64, !llvm.ptr
    }
    %c80_i8_8 = arith.constant 80 : i8
    cf.cond_br %58, ^bb1(%c80_i8_8 : i8), ^bb14
  ^bb14:  // pred: ^bb13
    cf.br ^bb20
  ^bb15:  // pred: ^bb17
    %59 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_9 = arith.constant 1024 : i64
    %60 = llvm.load %59 : !llvm.ptr -> i64
    %c-2_i64 = arith.constant -2 : i64
    %61 = arith.addi %60, %c-2_i64 : i64
    llvm.store %61, %59 : i64, !llvm.ptr
    %c2_i64 = arith.constant 2 : i64
    %62 = arith.cmpi ult, %60, %c2_i64 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %62, ^bb1(%c91_i8 : i8), ^bb11
  ^bb16:  // pred: ^bb7
    %63 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %64 = llvm.load %63 : !llvm.ptr -> i64
    %c0_i64_10 = arith.constant 0 : i64
    %65 = arith.cmpi uge, %64, %c0_i64_10 : i64
    %c80_i8_11 = arith.constant 80 : i8
    cf.cond_br %65, ^bb17, ^bb1(%c80_i8_11 : i8)
  ^bb17:  // pred: ^bb16
    %66 = arith.subi %64, %c0_i64_10 : i64
    llvm.store %66, %63 : i64, !llvm.ptr
    cf.br ^bb15
  ^bb18:  // pred: ^bb19
    %c1_i256_12 = arith.constant 1 : i256
    %67 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %68 = llvm.load %67 : !llvm.ptr -> !llvm.ptr
    llvm.store %c1_i256_12, %68 : i256, !llvm.ptr
    %69 = llvm.getelementptr %68[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %69, %67 : !llvm.ptr, !llvm.ptr
    cf.br ^bb24
  ^bb19:  // pred: ^bb21
    %70 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_13 = arith.constant 1024 : i64
    %71 = llvm.load %70 : !llvm.ptr -> i64
    %c1_i64_14 = arith.constant 1 : i64
    %72 = arith.addi %71, %c1_i64_14 : i64
    llvm.store %72, %70 : i64, !llvm.ptr
    %73 = arith.cmpi ult, %c1024_i64_13, %72 : i64
    %c92_i8_15 = arith.constant 92 : i8
    cf.cond_br %73, ^bb1(%c92_i8_15 : i8), ^bb18
  ^bb20:  // pred: ^bb14
    %74 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %75 = llvm.load %74 : !llvm.ptr -> i64
    %c3_i64_16 = arith.constant 3 : i64
    %76 = arith.cmpi uge, %75, %c3_i64_16 : i64
    %c80_i8_17 = arith.constant 80 : i8
    cf.cond_br %76, ^bb21, ^bb1(%c80_i8_17 : i8)
  ^bb21:  // pred: ^bb20
    %77 = arith.subi %75, %c3_i64_16 : i64
    llvm.store %77, %74 : i64, !llvm.ptr
    cf.br ^bb19
  ^bb22:  // pred: ^bb23
    %c600_i256 = arith.constant 600 : i256
    %78 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %79 = llvm.load %78 : !llvm.ptr -> !llvm.ptr
    llvm.store %c600_i256, %79 : i256, !llvm.ptr
    %80 = llvm.getelementptr %79[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %80, %78 : !llvm.ptr, !llvm.ptr
    cf.br ^bb31
  ^bb23:  // pred: ^bb25
    %81 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_18 = arith.constant 1024 : i64
    %82 = llvm.load %81 : !llvm.ptr -> i64
    %c1_i64_19 = arith.constant 1 : i64
    %83 = arith.addi %82, %c1_i64_19 : i64
    llvm.store %83, %81 : i64, !llvm.ptr
    %84 = arith.cmpi ult, %c1024_i64_18, %83 : i64
    %c92_i8_20 = arith.constant 92 : i8
    cf.cond_br %84, ^bb1(%c92_i8_20 : i8), ^bb22
  ^bb24:  // pred: ^bb18
    %85 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %86 = llvm.load %85 : !llvm.ptr -> i64
    %c3_i64_21 = arith.constant 3 : i64
    %87 = arith.cmpi uge, %86, %c3_i64_21 : i64
    %c80_i8_22 = arith.constant 80 : i8
    cf.cond_br %87, ^bb25, ^bb1(%c80_i8_22 : i8)
  ^bb25:  // pred: ^bb24
    %88 = arith.subi %86, %c3_i64_21 : i64
    llvm.store %88, %85 : i64, !llvm.ptr
    cf.br ^bb23
  ^bb26:  // pred: ^bb30
    %89 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %90 = llvm.load %89 : !llvm.ptr -> !llvm.ptr
    %91 = llvm.getelementptr %90[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %92 = llvm.load %91 : !llvm.ptr -> i256
    llvm.store %91, %89 : !llvm.ptr, !llvm.ptr
    %93 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %94 = llvm.load %93 : !llvm.ptr -> !llvm.ptr
    %95 = llvm.getelementptr %94[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %96 = llvm.load %95 : !llvm.ptr -> i256
    llvm.store %95, %93 : !llvm.ptr, !llvm.ptr
    %97 = llvm.mlir.addressof @dora_global_ctx_is_static : !llvm.ptr
    %98 = llvm.load %97 : !llvm.ptr -> i1
    %c87_i8_23 = arith.constant 87 : i8
    cf.cond_br %98, ^bb1(%c87_i8_23 : i8), ^bb27
  ^bb27:  // pred: ^bb26
    %c1_i256_24 = arith.constant 1 : i256
    %99 = llvm.alloca %c1_i256_24 x i256 : (i256) -> !llvm.ptr
    llvm.store %92, %99 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i256_25 = arith.constant 1 : i256
    %100 = llvm.alloca %c1_i256_25 x i256 : (i256) -> !llvm.ptr
    llvm.store %96, %100 {alignment = 1 : i64} : i256, !llvm.ptr
    %101 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %102 = llvm.load %101 : !llvm.ptr -> i64
    %103 = call @dora_fn_sstore(%arg0, %99, %100, %102) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
    %104 = llvm.getelementptr %103[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %105 = llvm.load %104 : !llvm.ptr -> i8
    %c0_i8_26 = arith.constant 0 : i8
    %106 = arith.cmpi ne, %105, %c0_i8_26 : i8
    cf.cond_br %106, ^bb1(%105 : i8), ^bb28
  ^bb28:  // pred: ^bb27
    %107 = llvm.getelementptr %103[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %108 = llvm.load %107 : !llvm.ptr -> i64
    %109 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %110 = llvm.load %109 : !llvm.ptr -> i64
    %111 = arith.cmpi ult, %110, %108 : i64
    scf.if %111 {
    } else {
      %123 = arith.subi %110, %108 : i64
      llvm.store %123, %109 : i64, !llvm.ptr
    }
    %c80_i8_27 = arith.constant 80 : i8
    cf.cond_br %111, ^bb1(%c80_i8_27 : i8), ^bb29
  ^bb29:  // pred: ^bb28
    cf.br ^bb33
  ^bb30:  // pred: ^bb32
    %112 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_28 = arith.constant 1024 : i64
    %113 = llvm.load %112 : !llvm.ptr -> i64
    %c-2_i64_29 = arith.constant -2 : i64
    %114 = arith.addi %113, %c-2_i64_29 : i64
    llvm.store %114, %112 : i64, !llvm.ptr
    %c2_i64_30 = arith.constant 2 : i64
    %115 = arith.cmpi ult, %113, %c2_i64_30 : i64
    %c91_i8_31 = arith.constant 91 : i8
    cf.cond_br %115, ^bb1(%c91_i8_31 : i8), ^bb26
  ^bb31:  // pred: ^bb22
    %116 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %117 = llvm.load %116 : !llvm.ptr -> i64
    %c0_i64_32 = arith.constant 0 : i64
    %118 = arith.cmpi uge, %117, %c0_i64_32 : i64
    %c80_i8_33 = arith.constant 80 : i8
    cf.cond_br %118, ^bb32, ^bb1(%c80_i8_33 : i8)
  ^bb32:  // pred: ^bb31
    %119 = arith.subi %117, %c0_i64_32 : i64
    llvm.store %119, %116 : i64, !llvm.ptr
    cf.br ^bb30
  ^bb33:  // pred: ^bb29
    %c0_i64_34 = arith.constant 0 : i64
    %c1_i8 = arith.constant 1 : i8
    %120 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %121 = llvm.load %120 : !llvm.ptr -> i64
    %122 = call @dora_fn_write_result(%arg0, %c0_i64_34, %c0_i64_34, %121, %c1_i8) : (!llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
    return %c1_i8 : i8
  }
}
