---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
---
module {
  llvm.mlir.global internal @dora_global_stack_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_stack_length() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_memory_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_memory_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_calldata_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_calldata_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_gas_counter() {addr_space = 0 : i32} : i64
  llvm.mlir.global external @dora_global_ctx_is_static() {addr_space = 0 : i32} : !llvm.ptr
  func.func private @dora_fn_debug_print(i32)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_chainid(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_gaslimit(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_code_copy(!llvm.ptr, i64, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_read_storage(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_write_storage(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_call(!llvm.ptr, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr, i8) -> !llvm.ptr
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, i64, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_return_data_size(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_return_data_copy(!llvm.ptr, i64, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_transient_storage_read(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_transient_storage_write(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func public @main(%arg0: !llvm.ptr, %arg1: i64) -> i8 attributes {llvm.emit_c_interface} {
    %c1024_i256 = arith.constant 1024 : i256
    %0 = llvm.alloca %c1024_i256 x i256 : (i256) -> !llvm.ptr
    %1 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    llvm.store %0, %1 : !llvm.ptr, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %2 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    llvm.store %c0_i64, %2 : i64, !llvm.ptr
    %c0_i64_0 = arith.constant 0 : i64
    %3 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %c0_i64_0, %3 : i64, !llvm.ptr
    %4 = call @dora_fn_calldata(%arg0) : (!llvm.ptr) -> !llvm.ptr
    %5 = llvm.mlir.addressof @dora_global_calldata_ptr : !llvm.ptr
    llvm.store %4, %5 : !llvm.ptr, !llvm.ptr
    %6 = call @dora_fn_calldata_size(%arg0) : (!llvm.ptr) -> i64
    %7 = llvm.mlir.addressof @dora_global_calldata_size : !llvm.ptr
    llvm.store %6, %7 : i64, !llvm.ptr
    %8 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    llvm.store %arg1, %8 : i64, !llvm.ptr
    %9 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64 = arith.constant 1024 : i64
    cf.br ^bb3
  ^bb1(%10: i8):  // 12 preds: ^bb2, ^bb5, ^bb6, ^bb10, ^bb11, ^bb16, ^bb17, ^bb18, ^bb22, ^bb23, ^bb27, ^bb28
    %c0_i64_1 = arith.constant 0 : i64
    %11 = call @dora_fn_write_result(%arg0, %c0_i64_1, %c0_i64_1, %c0_i64_1, %10) : (!llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
    return %10 : i8
  ^bb2(%12: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %12 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3:  // pred: ^bb0
    %c170141183460469231731687303715884105727_i256 = arith.constant 170141183460469231731687303715884105727 : i256
    %13 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %14 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    llvm.store %c170141183460469231731687303715884105727_i256, %14 : i256, !llvm.ptr
    %15 = llvm.getelementptr %14[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %15, %13 : !llvm.ptr, !llvm.ptr
    cf.br ^bb4
  ^bb4:  // pred: ^bb3
    %c0_i256 = arith.constant 0 : i256
    %16 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %17 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256, %17 : i256, !llvm.ptr
    %18 = llvm.getelementptr %17[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %18, %16 : !llvm.ptr, !llvm.ptr
    cf.br ^bb5
  ^bb5:  // pred: ^bb4
    %19 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %20 = llvm.load %19 : !llvm.ptr -> !llvm.ptr
    %21 = llvm.getelementptr %20[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %22 = llvm.load %21 : !llvm.ptr -> i256
    llvm.store %21, %19 : !llvm.ptr, !llvm.ptr
    %23 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %24 = llvm.load %23 : !llvm.ptr -> !llvm.ptr
    %25 = llvm.getelementptr %24[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %26 = llvm.load %25 : !llvm.ptr -> i256
    llvm.store %25, %23 : !llvm.ptr, !llvm.ptr
    %27 = arith.trunci %22 : i256 to i64
    %c32_i64 = arith.constant 32 : i64
    %28 = arith.addi %27, %c32_i64 : i64
    %c0_i64_2 = arith.constant 0 : i64
    %29 = arith.cmpi slt, %28, %c0_i64_2 : i64
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %29, ^bb1(%c84_i8 : i8), ^bb6
  ^bb6:  // pred: ^bb5
    %c31_i64 = arith.constant 31 : i64
    %c32_i64_3 = arith.constant 32 : i64
    %30 = arith.addi %28, %c31_i64 : i64
    %31 = arith.divui %30, %c32_i64_3 : i64
    %32 = arith.muli %31, %c32_i64_3 : i64
    %33 = call @dora_fn_extend_memory(%arg0, %32) : (!llvm.ptr, i64) -> !llvm.ptr
    %34 = llvm.getelementptr %33[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %35 = llvm.load %34 : !llvm.ptr -> !llvm.ptr
    %36 = llvm.getelementptr %33[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %37 = llvm.load %36 : !llvm.ptr -> i8
    %c0_i8 = arith.constant 0 : i8
    %38 = arith.cmpi ne, %37, %c0_i8 : i8
    cf.cond_br %38, ^bb1(%37 : i8), ^bb7
  ^bb7:  // pred: ^bb6
    %39 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    llvm.store %35, %39 : !llvm.ptr, !llvm.ptr
    %40 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %32, %40 : i64, !llvm.ptr
    %41 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    %42 = llvm.load %41 : !llvm.ptr -> !llvm.ptr
    %43 = llvm.getelementptr %42[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %44 = llvm.intr.bswap(%26)  : (i256) -> i256
    llvm.store %44, %43 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb8
  ^bb8:  // pred: ^bb7
    %c170141183460469231731687303715884105727_i256_4 = arith.constant 170141183460469231731687303715884105727 : i256
    %45 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %46 = llvm.load %45 : !llvm.ptr -> !llvm.ptr
    llvm.store %c170141183460469231731687303715884105727_i256_4, %46 : i256, !llvm.ptr
    %47 = llvm.getelementptr %46[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %47, %45 : !llvm.ptr, !llvm.ptr
    cf.br ^bb9
  ^bb9:  // pred: ^bb8
    %c32_i256 = arith.constant 32 : i256
    %48 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %49 = llvm.load %48 : !llvm.ptr -> !llvm.ptr
    llvm.store %c32_i256, %49 : i256, !llvm.ptr
    %50 = llvm.getelementptr %49[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %50, %48 : !llvm.ptr, !llvm.ptr
    cf.br ^bb10
  ^bb10:  // pred: ^bb9
    %51 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %52 = llvm.load %51 : !llvm.ptr -> !llvm.ptr
    %53 = llvm.getelementptr %52[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %54 = llvm.load %53 : !llvm.ptr -> i256
    llvm.store %53, %51 : !llvm.ptr, !llvm.ptr
    %55 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %56 = llvm.load %55 : !llvm.ptr -> !llvm.ptr
    %57 = llvm.getelementptr %56[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %58 = llvm.load %57 : !llvm.ptr -> i256
    llvm.store %57, %55 : !llvm.ptr, !llvm.ptr
    %59 = arith.trunci %54 : i256 to i64
    %c32_i64_5 = arith.constant 32 : i64
    %60 = arith.addi %59, %c32_i64_5 : i64
    %c0_i64_6 = arith.constant 0 : i64
    %61 = arith.cmpi slt, %60, %c0_i64_6 : i64
    %c84_i8_7 = arith.constant 84 : i8
    cf.cond_br %61, ^bb1(%c84_i8_7 : i8), ^bb11
  ^bb11:  // pred: ^bb10
    %c31_i64_8 = arith.constant 31 : i64
    %c32_i64_9 = arith.constant 32 : i64
    %62 = arith.addi %60, %c31_i64_8 : i64
    %63 = arith.divui %62, %c32_i64_9 : i64
    %64 = arith.muli %63, %c32_i64_9 : i64
    %65 = call @dora_fn_extend_memory(%arg0, %64) : (!llvm.ptr, i64) -> !llvm.ptr
    %66 = llvm.getelementptr %65[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %67 = llvm.load %66 : !llvm.ptr -> !llvm.ptr
    %68 = llvm.getelementptr %65[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %69 = llvm.load %68 : !llvm.ptr -> i8
    %c0_i8_10 = arith.constant 0 : i8
    %70 = arith.cmpi ne, %69, %c0_i8_10 : i8
    cf.cond_br %70, ^bb1(%69 : i8), ^bb12
  ^bb12:  // pred: ^bb11
    %71 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    llvm.store %67, %71 : !llvm.ptr, !llvm.ptr
    %72 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %64, %72 : i64, !llvm.ptr
    %73 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    %74 = llvm.load %73 : !llvm.ptr -> !llvm.ptr
    %75 = llvm.getelementptr %74[%59] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %76 = llvm.intr.bswap(%58)  : (i256) -> i256
    llvm.store %76, %75 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb13
  ^bb13:  // pred: ^bb12
    %c41_i256 = arith.constant 41 : i256
    %77 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %78 = llvm.load %77 : !llvm.ptr -> !llvm.ptr
    llvm.store %c41_i256, %78 : i256, !llvm.ptr
    %79 = llvm.getelementptr %78[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %79, %77 : !llvm.ptr, !llvm.ptr
    cf.br ^bb14
  ^bb14:  // pred: ^bb13
    %c0_i256_11 = arith.constant 0 : i256
    %80 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %81 = llvm.load %80 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_11, %81 : i256, !llvm.ptr
    %82 = llvm.getelementptr %81[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %82, %80 : !llvm.ptr, !llvm.ptr
    cf.br ^bb15
  ^bb15:  // pred: ^bb14
    %c0_i256_12 = arith.constant 0 : i256
    %83 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %84 = llvm.load %83 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_12, %84 : i256, !llvm.ptr
    %85 = llvm.getelementptr %84[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %85, %83 : !llvm.ptr, !llvm.ptr
    cf.br ^bb16
  ^bb16:  // pred: ^bb15
    %86 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %87 = llvm.load %86 : !llvm.ptr -> !llvm.ptr
    %88 = llvm.getelementptr %87[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %89 = llvm.load %88 : !llvm.ptr -> i256
    llvm.store %88, %86 : !llvm.ptr, !llvm.ptr
    %90 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %91 = llvm.load %90 : !llvm.ptr -> !llvm.ptr
    %92 = llvm.getelementptr %91[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %93 = llvm.load %92 : !llvm.ptr -> i256
    llvm.store %92, %90 : !llvm.ptr, !llvm.ptr
    %94 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %95 = llvm.load %94 : !llvm.ptr -> !llvm.ptr
    %96 = llvm.getelementptr %95[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %97 = llvm.load %96 : !llvm.ptr -> i256
    llvm.store %96, %94 : !llvm.ptr, !llvm.ptr
    %98 = arith.trunci %93 : i256 to i64
    %99 = arith.trunci %97 : i256 to i64
    %100 = arith.addi %98, %99 : i64
    %c0_i64_13 = arith.constant 0 : i64
    %101 = arith.cmpi slt, %100, %c0_i64_13 : i64
    %c84_i8_14 = arith.constant 84 : i8
    cf.cond_br %101, ^bb1(%c84_i8_14 : i8), ^bb17
  ^bb17:  // pred: ^bb16
    %c31_i64_15 = arith.constant 31 : i64
    %c32_i64_16 = arith.constant 32 : i64
    %102 = arith.addi %100, %c31_i64_15 : i64
    %103 = arith.divui %102, %c32_i64_16 : i64
    %104 = arith.muli %103, %c32_i64_16 : i64
    %105 = call @dora_fn_extend_memory(%arg0, %104) : (!llvm.ptr, i64) -> !llvm.ptr
    %106 = llvm.getelementptr %105[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %107 = llvm.load %106 : !llvm.ptr -> !llvm.ptr
    %108 = llvm.getelementptr %105[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %109 = llvm.load %108 : !llvm.ptr -> i8
    %c0_i8_17 = arith.constant 0 : i8
    %110 = arith.cmpi ne, %109, %c0_i8_17 : i8
    cf.cond_br %110, ^bb1(%109 : i8), ^bb18
  ^bb18:  // pred: ^bb17
    %111 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    llvm.store %107, %111 : !llvm.ptr, !llvm.ptr
    %112 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %104, %112 : i64, !llvm.ptr
    %c1_i256 = arith.constant 1 : i256
    %113 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %89, %113 {alignment = 1 : i64} : i256, !llvm.ptr
    %114 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %115 = llvm.load %114 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %116 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %115, %116 {alignment = 1 : i64} : i64, !llvm.ptr
    %117 = call @dora_fn_create(%arg0, %99, %98, %113, %116) : (!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %118 = llvm.getelementptr %117[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %119 = llvm.load %118 : !llvm.ptr -> i8
    %c0_i8_18 = arith.constant 0 : i8
    %120 = arith.cmpi ne, %c0_i8_18, %119 : i8
    %c94_i8 = arith.constant 94 : i8
    cf.cond_br %120, ^bb1(%c94_i8 : i8), ^bb19
  ^bb19:  // pred: ^bb18
    %121 = llvm.load %113 : !llvm.ptr -> i256
    %122 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %123 = llvm.load %122 : !llvm.ptr -> !llvm.ptr
    llvm.store %121, %123 : i256, !llvm.ptr
    %124 = llvm.getelementptr %123[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %124, %122 : !llvm.ptr, !llvm.ptr
    cf.br ^bb20
  ^bb20:  // pred: ^bb19
    %125 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %126 = llvm.load %125 : !llvm.ptr -> !llvm.ptr
    %127 = llvm.getelementptr %126[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %128 = llvm.load %127 : !llvm.ptr -> i256
    llvm.store %127, %125 : !llvm.ptr, !llvm.ptr
    %c1_i256_19 = arith.constant 1 : i256
    %129 = llvm.alloca %c1_i256_19 x i256 : (i256) -> !llvm.ptr
    llvm.store %128, %129 {alignment = 1 : i64} : i256, !llvm.ptr
    %130 = call @dora_fn_extcodesize(%arg0, %129) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %131 = llvm.getelementptr %130[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %132 = llvm.load %131 : !llvm.ptr -> i64
    %133 = arith.extui %132 : i64 to i256
    %134 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %135 = llvm.load %134 : !llvm.ptr -> !llvm.ptr
    llvm.store %133, %135 : i256, !llvm.ptr
    %136 = llvm.getelementptr %135[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %136, %134 : !llvm.ptr, !llvm.ptr
    cf.br ^bb21
  ^bb21:  // pred: ^bb20
    %c0_i256_20 = arith.constant 0 : i256
    %137 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %138 = llvm.load %137 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_20, %138 : i256, !llvm.ptr
    %139 = llvm.getelementptr %138[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %139, %137 : !llvm.ptr, !llvm.ptr
    cf.br ^bb22
  ^bb22:  // pred: ^bb21
    %140 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %141 = llvm.load %140 : !llvm.ptr -> !llvm.ptr
    %142 = llvm.getelementptr %141[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %143 = llvm.load %142 : !llvm.ptr -> i256
    llvm.store %142, %140 : !llvm.ptr, !llvm.ptr
    %144 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %145 = llvm.load %144 : !llvm.ptr -> !llvm.ptr
    %146 = llvm.getelementptr %145[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %147 = llvm.load %146 : !llvm.ptr -> i256
    llvm.store %146, %144 : !llvm.ptr, !llvm.ptr
    %148 = arith.trunci %143 : i256 to i64
    %c32_i64_21 = arith.constant 32 : i64
    %149 = arith.addi %148, %c32_i64_21 : i64
    %c0_i64_22 = arith.constant 0 : i64
    %150 = arith.cmpi slt, %149, %c0_i64_22 : i64
    %c84_i8_23 = arith.constant 84 : i8
    cf.cond_br %150, ^bb1(%c84_i8_23 : i8), ^bb23
  ^bb23:  // pred: ^bb22
    %c31_i64_24 = arith.constant 31 : i64
    %c32_i64_25 = arith.constant 32 : i64
    %151 = arith.addi %149, %c31_i64_24 : i64
    %152 = arith.divui %151, %c32_i64_25 : i64
    %153 = arith.muli %152, %c32_i64_25 : i64
    %154 = call @dora_fn_extend_memory(%arg0, %153) : (!llvm.ptr, i64) -> !llvm.ptr
    %155 = llvm.getelementptr %154[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %156 = llvm.load %155 : !llvm.ptr -> !llvm.ptr
    %157 = llvm.getelementptr %154[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %158 = llvm.load %157 : !llvm.ptr -> i8
    %c0_i8_26 = arith.constant 0 : i8
    %159 = arith.cmpi ne, %158, %c0_i8_26 : i8
    cf.cond_br %159, ^bb1(%158 : i8), ^bb24
  ^bb24:  // pred: ^bb23
    %160 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    llvm.store %156, %160 : !llvm.ptr, !llvm.ptr
    %161 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %153, %161 : i64, !llvm.ptr
    %162 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    %163 = llvm.load %162 : !llvm.ptr -> !llvm.ptr
    %164 = llvm.getelementptr %163[%148] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %165 = llvm.intr.bswap(%147)  : (i256) -> i256
    llvm.store %165, %164 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb25
  ^bb25:  // pred: ^bb24
    %c32_i256_27 = arith.constant 32 : i256
    %166 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %167 = llvm.load %166 : !llvm.ptr -> !llvm.ptr
    llvm.store %c32_i256_27, %167 : i256, !llvm.ptr
    %168 = llvm.getelementptr %167[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %168, %166 : !llvm.ptr, !llvm.ptr
    cf.br ^bb26
  ^bb26:  // pred: ^bb25
    %c0_i256_28 = arith.constant 0 : i256
    %169 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %170 = llvm.load %169 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_28, %170 : i256, !llvm.ptr
    %171 = llvm.getelementptr %170[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %171, %169 : !llvm.ptr, !llvm.ptr
    cf.br ^bb27
  ^bb27:  // pred: ^bb26
    %172 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %173 = llvm.load %172 : !llvm.ptr -> !llvm.ptr
    %174 = llvm.getelementptr %173[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %175 = llvm.load %174 : !llvm.ptr -> i256
    llvm.store %174, %172 : !llvm.ptr, !llvm.ptr
    %176 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %177 = llvm.load %176 : !llvm.ptr -> !llvm.ptr
    %178 = llvm.getelementptr %177[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %179 = llvm.load %178 : !llvm.ptr -> i256
    llvm.store %178, %176 : !llvm.ptr, !llvm.ptr
    %180 = arith.trunci %175 : i256 to i64
    %181 = arith.trunci %179 : i256 to i64
    %182 = arith.addi %181, %180 : i64
    %183 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %184 = llvm.load %183 : !llvm.ptr -> i64
    %c0_i64_29 = arith.constant 0 : i64
    %185 = arith.cmpi slt, %182, %c0_i64_29 : i64
    %c84_i8_30 = arith.constant 84 : i8
    cf.cond_br %185, ^bb1(%c84_i8_30 : i8), ^bb28
  ^bb28:  // pred: ^bb27
    %c31_i64_31 = arith.constant 31 : i64
    %c32_i64_32 = arith.constant 32 : i64
    %186 = arith.addi %182, %c31_i64_31 : i64
    %187 = arith.divui %186, %c32_i64_32 : i64
    %188 = arith.muli %187, %c32_i64_32 : i64
    %189 = call @dora_fn_extend_memory(%arg0, %188) : (!llvm.ptr, i64) -> !llvm.ptr
    %190 = llvm.getelementptr %189[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %191 = llvm.load %190 : !llvm.ptr -> !llvm.ptr
    %192 = llvm.getelementptr %189[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %193 = llvm.load %192 : !llvm.ptr -> i8
    %c0_i8_33 = arith.constant 0 : i8
    %194 = arith.cmpi ne, %193, %c0_i8_33 : i8
    cf.cond_br %194, ^bb1(%193 : i8), ^bb29
  ^bb29:  // pred: ^bb28
    %195 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    llvm.store %191, %195 : !llvm.ptr, !llvm.ptr
    %196 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %188, %196 : i64, !llvm.ptr
    %c0_i8_34 = arith.constant 0 : i8
    %197 = call @dora_fn_write_result(%arg0, %180, %181, %184, %c0_i8_34) : (!llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
    return %c0_i8_34 : i8
  ^bb30:  // no predecessors
    cf.br ^bb31
  ^bb31:  // pred: ^bb30
    %c0_i64_35 = arith.constant 0 : i64
    %c1_i8 = arith.constant 1 : i8
    %198 = call @dora_fn_write_result(%arg0, %c0_i64_35, %c0_i64_35, %arg1, %c1_i8) : (!llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
    return %c1_i8 : i8
  }
}
