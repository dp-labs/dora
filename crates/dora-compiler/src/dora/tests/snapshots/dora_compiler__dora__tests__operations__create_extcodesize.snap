---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  func.func private @dora_fn_nop()
  func.func private @dora_fn_tracing(!llvm.ptr, i8, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_fn_is_static(!llvm.ptr) -> i8
  func.func private @dora_fn_exp(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_chainid(!llvm.ptr) -> i64
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gaslimit_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_memory_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_memory_size(!llvm.ptr) -> i64
  func.func private @dora_fn_code_copy(!llvm.ptr, !llvm.ptr, i64, i64)
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_call(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_returndata_copy(!llvm.ptr, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_tload(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_tstore(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func public @main(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr) -> i8 attributes {llvm.emit_c_interface} {
    cf.br ^bb5
  ^bb1(%0: i8):  // 69 preds: ^bb2, ^bb4, ^bb5, ^bb8, ^bb9, ^bb13, ^bb14, ^bb17, ^bb18, ^bb21, ^bb22, ^bb26, ^bb27, ^bb30, ^bb31, ^bb34, ^bb35, ^bb38, ^bb39, ^bb41, ^bb42, ^bb43, ^bb45, ^bb46, ^bb47, ^bb49, ^bb50, ^bb52, ^bb54, ^bb55, ^bb58, ^bb59, ^bb63, ^bb64, ^bb67, ^bb68, ^bb71, ^bb72, ^bb74, ^bb75, ^bb79, ^bb80, ^bb83, ^bb84, ^bb85, ^bb88, ^bb89, ^bb91, ^bb92, ^bb93, ^bb96, ^bb97, ^bb99, ^bb100, ^bb101, ^bb102, ^bb103, ^bb106, ^bb107, ^bb109, ^bb110, ^bb111, ^bb114, ^bb115, ^bb117, ^bb118, ^bb119, ^bb122, ^bb123
    %c0_i64 = arith.constant 0 : i64
    %1 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64, %c0_i64, %1, %0) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %0 : i8
  ^bb2(%2: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %2 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3:  // pred: ^bb4
    %c170141183460469231731687303715884105727_i256 = arith.constant 170141183460469231731687303715884105727 : i256
    %3 = llvm.load %arg3 : !llvm.ptr -> i64
    %4 = llvm.getelementptr %arg2[%3] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64 = arith.constant 1 : i64
    %5 = arith.addi %3, %c1_i64 : i64
    llvm.store %5, %arg3 : i64, !llvm.ptr
    llvm.store %c170141183460469231731687303715884105727_i256, %4 : i256, !llvm.ptr
    cf.br ^bb9
  ^bb4:  // pred: ^bb6
    %c1024_i64 = arith.constant 1024 : i64
    %6 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_0 = arith.constant 1 : i64
    %7 = arith.addi %6, %c1_i64_0 : i64
    %8 = arith.cmpi ult, %c1024_i64, %7 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %8, ^bb1(%c92_i8 : i8), ^bb3
  ^bb5:  // pred: ^bb0
    %9 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %10 = arith.cmpi uge, %9, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %10, ^bb6, ^bb1(%c80_i8 : i8)
  ^bb6:  // pred: ^bb5
    %11 = arith.subi %9, %c3_i64 : i64
    llvm.store %11, %arg1 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb7:  // pred: ^bb8
    %c0_i256 = arith.constant 0 : i256
    %12 = llvm.load %arg3 : !llvm.ptr -> i64
    %13 = llvm.getelementptr %arg2[%12] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_1 = arith.constant 1 : i64
    %14 = arith.addi %12, %c1_i64_1 : i64
    llvm.store %14, %arg3 : i64, !llvm.ptr
    llvm.store %c0_i256, %13 : i256, !llvm.ptr
    cf.br ^bb14
  ^bb8:  // pred: ^bb10
    %c1024_i64_2 = arith.constant 1024 : i64
    %15 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_3 = arith.constant 1 : i64
    %16 = arith.addi %15, %c1_i64_3 : i64
    %17 = arith.cmpi ult, %c1024_i64_2, %16 : i64
    %c92_i8_4 = arith.constant 92 : i8
    cf.cond_br %17, ^bb1(%c92_i8_4 : i8), ^bb7
  ^bb9:  // pred: ^bb3
    %18 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_5 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %19 = arith.cmpi uge, %18, %c3_i64_5 : i64
    %c80_i8_6 = arith.constant 80 : i8
    cf.cond_br %19, ^bb10, ^bb1(%c80_i8_6 : i8)
  ^bb10:  // pred: ^bb9
    %20 = arith.subi %18, %c3_i64_5 : i64
    llvm.store %20, %arg1 : i64, !llvm.ptr
    cf.br ^bb8
  ^bb11:  // pred: ^bb13
    %21 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_7 = arith.constant 1 : i64
    %22 = arith.subi %21, %c1_i64_7 : i64
    %23 = llvm.getelementptr %arg2[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %22, %arg3 : i64, !llvm.ptr
    %24 = llvm.load %23 : !llvm.ptr -> i256
    %25 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_8 = arith.constant 1 : i64
    %26 = arith.subi %25, %c1_i64_8 : i64
    %27 = llvm.getelementptr %arg2[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %26, %arg3 : i64, !llvm.ptr
    %28 = llvm.load %27 : !llvm.ptr -> i256
    %c32_i64 = arith.constant 32 : i64
    %c0_i64_9 = arith.constant 0 : i64
    %29 = arith.cmpi ne, %c32_i64, %c0_i64_9 : i64
    cf.cond_br %29, ^bb83, ^bb12
  ^bb12:  // 2 preds: ^bb11, ^bb87
    %30 = arith.trunci %24 : i256 to i64
    %31 = call @dora_fn_memory_ptr(%arg0) : (!llvm.ptr) -> !llvm.ptr
    %32 = llvm.getelementptr %31[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %33 = llvm.intr.bswap(%28)  : (i256) -> i256
    llvm.store %33, %32 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb18
  ^bb13:  // pred: ^bb15
    %c1024_i64_10 = arith.constant 1024 : i64
    %34 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-2_i64 = arith.constant -2 : i64
    %35 = arith.addi %34, %c-2_i64 : i64
    %c2_i64 = arith.constant 2 : i64
    %36 = arith.cmpi ult, %34, %c2_i64 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %36, ^bb1(%c91_i8 : i8), ^bb11
  ^bb14:  // pred: ^bb7
    %37 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_11 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %38 = arith.cmpi uge, %37, %c3_i64_11 : i64
    %c80_i8_12 = arith.constant 80 : i8
    cf.cond_br %38, ^bb15, ^bb1(%c80_i8_12 : i8)
  ^bb15:  // pred: ^bb14
    %39 = arith.subi %37, %c3_i64_11 : i64
    llvm.store %39, %arg1 : i64, !llvm.ptr
    cf.br ^bb13
  ^bb16:  // pred: ^bb17
    %c170141183460469231731687303715884105727_i256_13 = arith.constant 170141183460469231731687303715884105727 : i256
    %40 = llvm.load %arg3 : !llvm.ptr -> i64
    %41 = llvm.getelementptr %arg2[%40] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_14 = arith.constant 1 : i64
    %42 = arith.addi %40, %c1_i64_14 : i64
    llvm.store %42, %arg3 : i64, !llvm.ptr
    llvm.store %c170141183460469231731687303715884105727_i256_13, %41 : i256, !llvm.ptr
    cf.br ^bb22
  ^bb17:  // pred: ^bb19
    %c1024_i64_15 = arith.constant 1024 : i64
    %43 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_16 = arith.constant 1 : i64
    %44 = arith.addi %43, %c1_i64_16 : i64
    %45 = arith.cmpi ult, %c1024_i64_15, %44 : i64
    %c92_i8_17 = arith.constant 92 : i8
    cf.cond_br %45, ^bb1(%c92_i8_17 : i8), ^bb16
  ^bb18:  // pred: ^bb12
    %46 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_18 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %47 = arith.cmpi uge, %46, %c3_i64_18 : i64
    %c80_i8_19 = arith.constant 80 : i8
    cf.cond_br %47, ^bb19, ^bb1(%c80_i8_19 : i8)
  ^bb19:  // pred: ^bb18
    %48 = arith.subi %46, %c3_i64_18 : i64
    llvm.store %48, %arg1 : i64, !llvm.ptr
    cf.br ^bb17
  ^bb20:  // pred: ^bb21
    %c32_i256 = arith.constant 32 : i256
    %49 = llvm.load %arg3 : !llvm.ptr -> i64
    %50 = llvm.getelementptr %arg2[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_20 = arith.constant 1 : i64
    %51 = arith.addi %49, %c1_i64_20 : i64
    llvm.store %51, %arg3 : i64, !llvm.ptr
    llvm.store %c32_i256, %50 : i256, !llvm.ptr
    cf.br ^bb27
  ^bb21:  // pred: ^bb23
    %c1024_i64_21 = arith.constant 1024 : i64
    %52 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_22 = arith.constant 1 : i64
    %53 = arith.addi %52, %c1_i64_22 : i64
    %54 = arith.cmpi ult, %c1024_i64_21, %53 : i64
    %c92_i8_23 = arith.constant 92 : i8
    cf.cond_br %54, ^bb1(%c92_i8_23 : i8), ^bb20
  ^bb22:  // pred: ^bb16
    %55 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_24 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %56 = arith.cmpi uge, %55, %c3_i64_24 : i64
    %c80_i8_25 = arith.constant 80 : i8
    cf.cond_br %56, ^bb23, ^bb1(%c80_i8_25 : i8)
  ^bb23:  // pred: ^bb22
    %57 = arith.subi %55, %c3_i64_24 : i64
    llvm.store %57, %arg1 : i64, !llvm.ptr
    cf.br ^bb21
  ^bb24:  // pred: ^bb26
    %58 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_26 = arith.constant 1 : i64
    %59 = arith.subi %58, %c1_i64_26 : i64
    %60 = llvm.getelementptr %arg2[%59] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %59, %arg3 : i64, !llvm.ptr
    %61 = llvm.load %60 : !llvm.ptr -> i256
    %62 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_27 = arith.constant 1 : i64
    %63 = arith.subi %62, %c1_i64_27 : i64
    %64 = llvm.getelementptr %arg2[%63] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %63, %arg3 : i64, !llvm.ptr
    %65 = llvm.load %64 : !llvm.ptr -> i256
    %c32_i64_28 = arith.constant 32 : i64
    %c0_i64_29 = arith.constant 0 : i64
    %66 = arith.cmpi ne, %c32_i64_28, %c0_i64_29 : i64
    cf.cond_br %66, ^bb91, ^bb25
  ^bb25:  // 2 preds: ^bb24, ^bb95
    %67 = arith.trunci %61 : i256 to i64
    %68 = call @dora_fn_memory_ptr(%arg0) : (!llvm.ptr) -> !llvm.ptr
    %69 = llvm.getelementptr %68[%67] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %70 = llvm.intr.bswap(%65)  : (i256) -> i256
    llvm.store %70, %69 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb31
  ^bb26:  // pred: ^bb28
    %c1024_i64_30 = arith.constant 1024 : i64
    %71 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-2_i64_31 = arith.constant -2 : i64
    %72 = arith.addi %71, %c-2_i64_31 : i64
    %c2_i64_32 = arith.constant 2 : i64
    %73 = arith.cmpi ult, %71, %c2_i64_32 : i64
    %c91_i8_33 = arith.constant 91 : i8
    cf.cond_br %73, ^bb1(%c91_i8_33 : i8), ^bb24
  ^bb27:  // pred: ^bb20
    %74 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_34 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %75 = arith.cmpi uge, %74, %c3_i64_34 : i64
    %c80_i8_35 = arith.constant 80 : i8
    cf.cond_br %75, ^bb28, ^bb1(%c80_i8_35 : i8)
  ^bb28:  // pred: ^bb27
    %76 = arith.subi %74, %c3_i64_34 : i64
    llvm.store %76, %arg1 : i64, !llvm.ptr
    cf.br ^bb26
  ^bb29:  // pred: ^bb30
    %c41_i256 = arith.constant 41 : i256
    %77 = llvm.load %arg3 : !llvm.ptr -> i64
    %78 = llvm.getelementptr %arg2[%77] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_36 = arith.constant 1 : i64
    %79 = arith.addi %77, %c1_i64_36 : i64
    llvm.store %79, %arg3 : i64, !llvm.ptr
    llvm.store %c41_i256, %78 : i256, !llvm.ptr
    cf.br ^bb35
  ^bb30:  // pred: ^bb32
    %c1024_i64_37 = arith.constant 1024 : i64
    %80 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_38 = arith.constant 1 : i64
    %81 = arith.addi %80, %c1_i64_38 : i64
    %82 = arith.cmpi ult, %c1024_i64_37, %81 : i64
    %c92_i8_39 = arith.constant 92 : i8
    cf.cond_br %82, ^bb1(%c92_i8_39 : i8), ^bb29
  ^bb31:  // pred: ^bb25
    %83 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_40 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %84 = arith.cmpi uge, %83, %c3_i64_40 : i64
    %c80_i8_41 = arith.constant 80 : i8
    cf.cond_br %84, ^bb32, ^bb1(%c80_i8_41 : i8)
  ^bb32:  // pred: ^bb31
    %85 = arith.subi %83, %c3_i64_40 : i64
    llvm.store %85, %arg1 : i64, !llvm.ptr
    cf.br ^bb30
  ^bb33:  // pred: ^bb34
    %c0_i256_42 = arith.constant 0 : i256
    %86 = llvm.load %arg3 : !llvm.ptr -> i64
    %87 = llvm.getelementptr %arg2[%86] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_43 = arith.constant 1 : i64
    %88 = arith.addi %86, %c1_i64_43 : i64
    llvm.store %88, %arg3 : i64, !llvm.ptr
    llvm.store %c0_i256_42, %87 : i256, !llvm.ptr
    cf.br ^bb39
  ^bb34:  // pred: ^bb36
    %c1024_i64_44 = arith.constant 1024 : i64
    %89 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_45 = arith.constant 1 : i64
    %90 = arith.addi %89, %c1_i64_45 : i64
    %91 = arith.cmpi ult, %c1024_i64_44, %90 : i64
    %c92_i8_46 = arith.constant 92 : i8
    cf.cond_br %91, ^bb1(%c92_i8_46 : i8), ^bb33
  ^bb35:  // pred: ^bb29
    %92 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_47 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %93 = arith.cmpi uge, %92, %c3_i64_47 : i64
    %c80_i8_48 = arith.constant 80 : i8
    cf.cond_br %93, ^bb36, ^bb1(%c80_i8_48 : i8)
  ^bb36:  // pred: ^bb35
    %94 = arith.subi %92, %c3_i64_47 : i64
    llvm.store %94, %arg1 : i64, !llvm.ptr
    cf.br ^bb34
  ^bb37:  // pred: ^bb38
    %c0_i256_49 = arith.constant 0 : i256
    %95 = llvm.load %arg3 : !llvm.ptr -> i64
    %96 = llvm.getelementptr %arg2[%95] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_50 = arith.constant 1 : i64
    %97 = arith.addi %95, %c1_i64_50 : i64
    llvm.store %97, %arg3 : i64, !llvm.ptr
    llvm.store %c0_i256_49, %96 : i256, !llvm.ptr
    cf.br ^bb50
  ^bb38:  // pred: ^bb40
    %c1024_i64_51 = arith.constant 1024 : i64
    %98 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_52 = arith.constant 1 : i64
    %99 = arith.addi %98, %c1_i64_52 : i64
    %100 = arith.cmpi ult, %c1024_i64_51, %99 : i64
    %c92_i8_53 = arith.constant 92 : i8
    cf.cond_br %100, ^bb1(%c92_i8_53 : i8), ^bb37
  ^bb39:  // pred: ^bb33
    %101 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_54 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %102 = arith.cmpi uge, %101, %c3_i64_54 : i64
    %c80_i8_55 = arith.constant 80 : i8
    cf.cond_br %102, ^bb40, ^bb1(%c80_i8_55 : i8)
  ^bb40:  // pred: ^bb39
    %103 = arith.subi %101, %c3_i64_54 : i64
    llvm.store %103, %arg1 : i64, !llvm.ptr
    cf.br ^bb38
  ^bb41:  // pred: ^bb49
    %104 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_56 = arith.constant 1 : i64
    %105 = arith.subi %104, %c1_i64_56 : i64
    %106 = llvm.getelementptr %arg2[%105] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %105, %arg3 : i64, !llvm.ptr
    %107 = llvm.load %106 : !llvm.ptr -> i256
    %108 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_57 = arith.constant 1 : i64
    %109 = arith.subi %108, %c1_i64_57 : i64
    %110 = llvm.getelementptr %arg2[%109] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %109, %arg3 : i64, !llvm.ptr
    %111 = llvm.load %110 : !llvm.ptr -> i256
    %112 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_58 = arith.constant 1 : i64
    %113 = arith.subi %112, %c1_i64_58 : i64
    %114 = llvm.getelementptr %arg2[%113] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %113, %arg3 : i64, !llvm.ptr
    %115 = llvm.load %114 : !llvm.ptr -> i256
    %116 = call @dora_fn_is_static(%arg0) : (!llvm.ptr) -> i8
    %c0_i8 = arith.constant 0 : i8
    %117 = arith.cmpi ne, %116, %c0_i8 : i8
    %c87_i8 = arith.constant 87 : i8
    cf.cond_br %117, ^bb1(%c87_i8 : i8), ^bb42
  ^bb42:  // pred: ^bb41
    %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256
    %118 = arith.cmpi sgt, %115, %c18446744073709551615_i256 : i256
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %118, ^bb1(%c84_i8 : i8), ^bb43
  ^bb43:  // pred: ^bb42
    %119 = arith.trunci %115 : i256 to i64
    %c0_i64_59 = arith.constant 0 : i64
    %120 = arith.cmpi slt, %119, %c0_i64_59 : i64
    %c84_i8_60 = arith.constant 84 : i8
    cf.cond_br %120, ^bb1(%c84_i8_60 : i8), ^bb44
  ^bb44:  // pred: ^bb43
    %c0_i64_61 = arith.constant 0 : i64
    %121 = arith.cmpi ne, %119, %c0_i64_61 : i64
    cf.cond_br %121, ^bb99, ^bb45
  ^bb45:  // 2 preds: ^bb44, ^bb105
    %c32000_i64 = arith.constant 32000 : i64
    %122 = llvm.load %arg1 : !llvm.ptr -> i64
    %123 = arith.cmpi ult, %122, %c32000_i64 : i64
    scf.if %123 {
    } else {
      %380 = arith.subi %122, %c32000_i64 : i64
      llvm.store %380, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_62 = arith.constant 80 : i8
    cf.cond_br %123, ^bb1(%c80_i8_62 : i8), ^bb46
  ^bb46:  // pred: ^bb45
    %c1_i256 = arith.constant 1 : i256
    %124 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %107, %124 {alignment = 1 : i64} : i256, !llvm.ptr
    %125 = llvm.load %arg1 : !llvm.ptr -> i64
    %126 = arith.trunci %111 : i256 to i64
    %127 = call @dora_fn_create(%arg0, %119, %126, %124, %125) : (!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
    %128 = llvm.getelementptr %127[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %129 = llvm.load %128 : !llvm.ptr -> i8
    %c0_i8_63 = arith.constant 0 : i8
    %130 = arith.cmpi ne, %129, %c0_i8_63 : i8
    cf.cond_br %130, ^bb1(%129 : i8), ^bb47
  ^bb47:  // pred: ^bb46
    %131 = llvm.getelementptr %127[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %132 = llvm.load %131 : !llvm.ptr -> i64
    %133 = llvm.load %arg1 : !llvm.ptr -> i64
    %134 = arith.cmpi ult, %133, %132 : i64
    scf.if %134 {
    } else {
      %380 = arith.subi %133, %132 : i64
      llvm.store %380, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_64 = arith.constant 80 : i8
    cf.cond_br %134, ^bb1(%c80_i8_64 : i8), ^bb48
  ^bb48:  // pred: ^bb47
    %135 = llvm.load %124 : !llvm.ptr -> i256
    %136 = llvm.load %arg3 : !llvm.ptr -> i64
    %137 = llvm.getelementptr %arg2[%136] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_65 = arith.constant 1 : i64
    %138 = arith.addi %136, %c1_i64_65 : i64
    llvm.store %138, %arg3 : i64, !llvm.ptr
    llvm.store %135, %137 : i256, !llvm.ptr
    cf.br ^bb55
  ^bb49:  // pred: ^bb51
    %c1024_i64_66 = arith.constant 1024 : i64
    %139 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-2_i64_67 = arith.constant -2 : i64
    %140 = arith.addi %139, %c-2_i64_67 : i64
    %c3_i64_68 = arith.constant 3 : i64
    %141 = arith.cmpi ult, %139, %c3_i64_68 : i64
    %c91_i8_69 = arith.constant 91 : i8
    cf.cond_br %141, ^bb1(%c91_i8_69 : i8), ^bb41
  ^bb50:  // pred: ^bb37
    %142 = llvm.load %arg1 : !llvm.ptr -> i64
    %c0_i64_70 = arith.constant 0 : i64
    call @dora_fn_nop() : () -> ()
    %143 = arith.cmpi uge, %142, %c0_i64_70 : i64
    %c80_i8_71 = arith.constant 80 : i8
    cf.cond_br %143, ^bb51, ^bb1(%c80_i8_71 : i8)
  ^bb51:  // pred: ^bb50
    %144 = arith.subi %142, %c0_i64_70 : i64
    llvm.store %144, %arg1 : i64, !llvm.ptr
    cf.br ^bb49
  ^bb52:  // pred: ^bb54
    %145 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_72 = arith.constant 1 : i64
    %146 = arith.subi %145, %c1_i64_72 : i64
    %147 = llvm.getelementptr %arg2[%146] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %146, %arg3 : i64, !llvm.ptr
    %148 = llvm.load %147 : !llvm.ptr -> i256
    %c1_i256_73 = arith.constant 1 : i256
    %149 = llvm.alloca %c1_i256_73 x i256 : (i256) -> !llvm.ptr
    llvm.store %148, %149 {alignment = 1 : i64} : i256, !llvm.ptr
    %150 = call @dora_fn_extcodesize(%arg0, %149) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %151 = llvm.getelementptr %150[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %152 = llvm.load %151 : !llvm.ptr -> i64
    %153 = llvm.getelementptr %150[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %154 = llvm.load %153 : !llvm.ptr -> i64
    %155 = llvm.load %arg1 : !llvm.ptr -> i64
    %156 = arith.cmpi ult, %155, %154 : i64
    scf.if %156 {
    } else {
      %380 = arith.subi %155, %154 : i64
      llvm.store %380, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_74 = arith.constant 80 : i8
    cf.cond_br %156, ^bb1(%c80_i8_74 : i8), ^bb53
  ^bb53:  // pred: ^bb52
    %157 = arith.extui %152 : i64 to i256
    %158 = llvm.load %arg3 : !llvm.ptr -> i64
    %159 = llvm.getelementptr %arg2[%158] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_75 = arith.constant 1 : i64
    %160 = arith.addi %158, %c1_i64_75 : i64
    llvm.store %160, %arg3 : i64, !llvm.ptr
    llvm.store %157, %159 : i256, !llvm.ptr
    cf.br ^bb59
  ^bb54:  // pred: ^bb56
    %c1024_i64_76 = arith.constant 1024 : i64
    %161 = llvm.load %arg3 : !llvm.ptr -> i64
    %c0_i64_77 = arith.constant 0 : i64
    %162 = arith.addi %161, %c0_i64_77 : i64
    %c1_i64_78 = arith.constant 1 : i64
    %163 = arith.cmpi ult, %161, %c1_i64_78 : i64
    %c91_i8_79 = arith.constant 91 : i8
    cf.cond_br %163, ^bb1(%c91_i8_79 : i8), ^bb52
  ^bb55:  // pred: ^bb48
    %164 = llvm.load %arg1 : !llvm.ptr -> i64
    %c0_i64_80 = arith.constant 0 : i64
    call @dora_fn_nop() : () -> ()
    %165 = arith.cmpi uge, %164, %c0_i64_80 : i64
    %c80_i8_81 = arith.constant 80 : i8
    cf.cond_br %165, ^bb56, ^bb1(%c80_i8_81 : i8)
  ^bb56:  // pred: ^bb55
    %166 = arith.subi %164, %c0_i64_80 : i64
    llvm.store %166, %arg1 : i64, !llvm.ptr
    cf.br ^bb54
  ^bb57:  // pred: ^bb58
    %c0_i256_82 = arith.constant 0 : i256
    %167 = llvm.load %arg3 : !llvm.ptr -> i64
    %168 = llvm.getelementptr %arg2[%167] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_83 = arith.constant 1 : i64
    %169 = arith.addi %167, %c1_i64_83 : i64
    llvm.store %169, %arg3 : i64, !llvm.ptr
    llvm.store %c0_i256_82, %168 : i256, !llvm.ptr
    cf.br ^bb64
  ^bb58:  // pred: ^bb60
    %c1024_i64_84 = arith.constant 1024 : i64
    %170 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_85 = arith.constant 1 : i64
    %171 = arith.addi %170, %c1_i64_85 : i64
    %172 = arith.cmpi ult, %c1024_i64_84, %171 : i64
    %c92_i8_86 = arith.constant 92 : i8
    cf.cond_br %172, ^bb1(%c92_i8_86 : i8), ^bb57
  ^bb59:  // pred: ^bb53
    %173 = llvm.load %arg1 : !llvm.ptr -> i64
    %c2_i64_87 = arith.constant 2 : i64
    call @dora_fn_nop() : () -> ()
    %174 = arith.cmpi uge, %173, %c2_i64_87 : i64
    %c80_i8_88 = arith.constant 80 : i8
    cf.cond_br %174, ^bb60, ^bb1(%c80_i8_88 : i8)
  ^bb60:  // pred: ^bb59
    %175 = arith.subi %173, %c2_i64_87 : i64
    llvm.store %175, %arg1 : i64, !llvm.ptr
    cf.br ^bb58
  ^bb61:  // pred: ^bb63
    %176 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_89 = arith.constant 1 : i64
    %177 = arith.subi %176, %c1_i64_89 : i64
    %178 = llvm.getelementptr %arg2[%177] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %177, %arg3 : i64, !llvm.ptr
    %179 = llvm.load %178 : !llvm.ptr -> i256
    %180 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_90 = arith.constant 1 : i64
    %181 = arith.subi %180, %c1_i64_90 : i64
    %182 = llvm.getelementptr %arg2[%181] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %181, %arg3 : i64, !llvm.ptr
    %183 = llvm.load %182 : !llvm.ptr -> i256
    %c32_i64_91 = arith.constant 32 : i64
    %c0_i64_92 = arith.constant 0 : i64
    %184 = arith.cmpi ne, %c32_i64_91, %c0_i64_92 : i64
    cf.cond_br %184, ^bb109, ^bb62
  ^bb62:  // 2 preds: ^bb61, ^bb113
    %185 = arith.trunci %179 : i256 to i64
    %186 = call @dora_fn_memory_ptr(%arg0) : (!llvm.ptr) -> !llvm.ptr
    %187 = llvm.getelementptr %186[%185] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %188 = llvm.intr.bswap(%183)  : (i256) -> i256
    llvm.store %188, %187 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb68
  ^bb63:  // pred: ^bb65
    %c1024_i64_93 = arith.constant 1024 : i64
    %189 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-2_i64_94 = arith.constant -2 : i64
    %190 = arith.addi %189, %c-2_i64_94 : i64
    %c2_i64_95 = arith.constant 2 : i64
    %191 = arith.cmpi ult, %189, %c2_i64_95 : i64
    %c91_i8_96 = arith.constant 91 : i8
    cf.cond_br %191, ^bb1(%c91_i8_96 : i8), ^bb61
  ^bb64:  // pred: ^bb57
    %192 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_97 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %193 = arith.cmpi uge, %192, %c3_i64_97 : i64
    %c80_i8_98 = arith.constant 80 : i8
    cf.cond_br %193, ^bb65, ^bb1(%c80_i8_98 : i8)
  ^bb65:  // pred: ^bb64
    %194 = arith.subi %192, %c3_i64_97 : i64
    llvm.store %194, %arg1 : i64, !llvm.ptr
    cf.br ^bb63
  ^bb66:  // pred: ^bb67
    %c32_i256_99 = arith.constant 32 : i256
    %195 = llvm.load %arg3 : !llvm.ptr -> i64
    %196 = llvm.getelementptr %arg2[%195] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_100 = arith.constant 1 : i64
    %197 = arith.addi %195, %c1_i64_100 : i64
    llvm.store %197, %arg3 : i64, !llvm.ptr
    llvm.store %c32_i256_99, %196 : i256, !llvm.ptr
    cf.br ^bb72
  ^bb67:  // pred: ^bb69
    %c1024_i64_101 = arith.constant 1024 : i64
    %198 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_102 = arith.constant 1 : i64
    %199 = arith.addi %198, %c1_i64_102 : i64
    %200 = arith.cmpi ult, %c1024_i64_101, %199 : i64
    %c92_i8_103 = arith.constant 92 : i8
    cf.cond_br %200, ^bb1(%c92_i8_103 : i8), ^bb66
  ^bb68:  // pred: ^bb62
    %201 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_104 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %202 = arith.cmpi uge, %201, %c3_i64_104 : i64
    %c80_i8_105 = arith.constant 80 : i8
    cf.cond_br %202, ^bb69, ^bb1(%c80_i8_105 : i8)
  ^bb69:  // pred: ^bb68
    %203 = arith.subi %201, %c3_i64_104 : i64
    llvm.store %203, %arg1 : i64, !llvm.ptr
    cf.br ^bb67
  ^bb70:  // pred: ^bb71
    %c0_i256_106 = arith.constant 0 : i256
    %204 = llvm.load %arg3 : !llvm.ptr -> i64
    %205 = llvm.getelementptr %arg2[%204] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_107 = arith.constant 1 : i64
    %206 = arith.addi %204, %c1_i64_107 : i64
    llvm.store %206, %arg3 : i64, !llvm.ptr
    llvm.store %c0_i256_106, %205 : i256, !llvm.ptr
    cf.br ^bb80
  ^bb71:  // pred: ^bb73
    %c1024_i64_108 = arith.constant 1024 : i64
    %207 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_109 = arith.constant 1 : i64
    %208 = arith.addi %207, %c1_i64_109 : i64
    %209 = arith.cmpi ult, %c1024_i64_108, %208 : i64
    %c92_i8_110 = arith.constant 92 : i8
    cf.cond_br %209, ^bb1(%c92_i8_110 : i8), ^bb70
  ^bb72:  // pred: ^bb66
    %210 = llvm.load %arg1 : !llvm.ptr -> i64
    %c2_i64_111 = arith.constant 2 : i64
    call @dora_fn_nop() : () -> ()
    %211 = arith.cmpi uge, %210, %c2_i64_111 : i64
    %c80_i8_112 = arith.constant 80 : i8
    cf.cond_br %211, ^bb73, ^bb1(%c80_i8_112 : i8)
  ^bb73:  // pred: ^bb72
    %212 = arith.subi %210, %c2_i64_111 : i64
    llvm.store %212, %arg1 : i64, !llvm.ptr
    cf.br ^bb71
  ^bb74:  // pred: ^bb79
    %213 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_113 = arith.constant 1 : i64
    %214 = arith.subi %213, %c1_i64_113 : i64
    %215 = llvm.getelementptr %arg2[%214] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %214, %arg3 : i64, !llvm.ptr
    %216 = llvm.load %215 : !llvm.ptr -> i256
    %217 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_114 = arith.constant 1 : i64
    %218 = arith.subi %217, %c1_i64_114 : i64
    %219 = llvm.getelementptr %arg2[%218] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %218, %arg3 : i64, !llvm.ptr
    %220 = llvm.load %219 : !llvm.ptr -> i256
    %c18446744073709551615_i256_115 = arith.constant 18446744073709551615 : i256
    %221 = arith.cmpi sgt, %220, %c18446744073709551615_i256_115 : i256
    %c84_i8_116 = arith.constant 84 : i8
    cf.cond_br %221, ^bb1(%c84_i8_116 : i8), ^bb75
  ^bb75:  // pred: ^bb74
    %222 = arith.trunci %220 : i256 to i64
    %c0_i64_117 = arith.constant 0 : i64
    %223 = arith.cmpi slt, %222, %c0_i64_117 : i64
    %c84_i8_118 = arith.constant 84 : i8
    cf.cond_br %223, ^bb1(%c84_i8_118 : i8), ^bb76
  ^bb76:  // pred: ^bb75
    %c0_i64_119 = arith.constant 0 : i64
    %224 = arith.cmpi ne, %222, %c0_i64_119 : i64
    cf.cond_br %224, ^bb117, ^bb77
  ^bb77:  // 2 preds: ^bb76, ^bb121
    %c0_i8_120 = arith.constant 0 : i8
    %225 = arith.trunci %216 : i256 to i64
    %226 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %225, %222, %226, %c0_i8_120) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c0_i8_120 : i8
  ^bb78:  // no predecessors
    cf.br ^bb82
  ^bb79:  // pred: ^bb81
    %c1024_i64_121 = arith.constant 1024 : i64
    %227 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-2_i64_122 = arith.constant -2 : i64
    %228 = arith.addi %227, %c-2_i64_122 : i64
    %c2_i64_123 = arith.constant 2 : i64
    %229 = arith.cmpi ult, %227, %c2_i64_123 : i64
    %c91_i8_124 = arith.constant 91 : i8
    cf.cond_br %229, ^bb1(%c91_i8_124 : i8), ^bb74
  ^bb80:  // pred: ^bb70
    %230 = llvm.load %arg1 : !llvm.ptr -> i64
    %c0_i64_125 = arith.constant 0 : i64
    call @dora_fn_nop() : () -> ()
    %231 = arith.cmpi uge, %230, %c0_i64_125 : i64
    %c80_i8_126 = arith.constant 80 : i8
    cf.cond_br %231, ^bb81, ^bb1(%c80_i8_126 : i8)
  ^bb81:  // pred: ^bb80
    %232 = arith.subi %230, %c0_i64_125 : i64
    llvm.store %232, %arg1 : i64, !llvm.ptr
    cf.br ^bb79
  ^bb82:  // pred: ^bb78
    %c0_i64_127 = arith.constant 0 : i64
    %c1_i8 = arith.constant 1 : i8
    %233 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_127, %c0_i64_127, %233, %c1_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c1_i8 : i8
  ^bb83:  // pred: ^bb11
    %c18446744073709551615_i256_128 = arith.constant 18446744073709551615 : i256
    %234 = arith.cmpi sgt, %24, %c18446744073709551615_i256_128 : i256
    %c84_i8_129 = arith.constant 84 : i8
    cf.cond_br %234, ^bb1(%c84_i8_129 : i8), ^bb84
  ^bb84:  // pred: ^bb83
    %235 = arith.trunci %24 : i256 to i64
    %c0_i64_130 = arith.constant 0 : i64
    %236 = arith.cmpi slt, %235, %c0_i64_130 : i64
    %c84_i8_131 = arith.constant 84 : i8
    cf.cond_br %236, ^bb1(%c84_i8_131 : i8), ^bb85
  ^bb85:  // pred: ^bb84
    %237 = arith.addi %235, %c32_i64 : i64
    %c0_i64_132 = arith.constant 0 : i64
    %238 = arith.cmpi slt, %237, %c0_i64_132 : i64
    %c84_i8_133 = arith.constant 84 : i8
    cf.cond_br %238, ^bb1(%c84_i8_133 : i8), ^bb86
  ^bb86:  // pred: ^bb85
    %c31_i64 = arith.constant 31 : i64
    %c32_i64_134 = arith.constant 32 : i64
    %239 = arith.addi %237, %c31_i64 : i64
    %240 = arith.divui %239, %c32_i64_134 : i64
    %c32_i64_135 = arith.constant 32 : i64
    %241 = arith.muli %240, %c32_i64_135 : i64
    %242 = call @dora_fn_memory_size(%arg0) : (!llvm.ptr) -> i64
    %c31_i64_136 = arith.constant 31 : i64
    %c32_i64_137 = arith.constant 32 : i64
    %243 = arith.addi %242, %c31_i64_136 : i64
    %244 = arith.divui %243, %c32_i64_137 : i64
    %245 = arith.muli %244, %c32_i64_135 : i64
    %246 = arith.cmpi ult, %245, %241 : i64
    cf.cond_br %246, ^bb88, ^bb87
  ^bb87:  // 2 preds: ^bb86, ^bb90
    cf.br ^bb12
  ^bb88:  // pred: ^bb86
    %c3_i64_138 = arith.constant 3 : i64
    %c512_i64 = arith.constant 512 : i64
    %247 = arith.muli %244, %244 : i64
    %248 = arith.divui %247, %c512_i64 : i64
    %249 = arith.muli %244, %c3_i64_138 : i64
    %250 = arith.addi %248, %249 : i64
    %c3_i64_139 = arith.constant 3 : i64
    %c512_i64_140 = arith.constant 512 : i64
    %251 = arith.muli %240, %240 : i64
    %252 = arith.divui %251, %c512_i64_140 : i64
    %253 = arith.muli %240, %c3_i64_139 : i64
    %254 = arith.addi %252, %253 : i64
    %255 = arith.subi %254, %250 : i64
    %256 = llvm.load %arg1 : !llvm.ptr -> i64
    %257 = arith.cmpi ult, %256, %255 : i64
    scf.if %257 {
    } else {
      %380 = arith.subi %256, %255 : i64
      llvm.store %380, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_141 = arith.constant 80 : i8
    cf.cond_br %257, ^bb1(%c80_i8_141 : i8), ^bb89
  ^bb89:  // pred: ^bb88
    %258 = call @dora_fn_extend_memory(%arg0, %241) : (!llvm.ptr, i64) -> !llvm.ptr
    %259 = llvm.getelementptr %258[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %260 = llvm.load %259 : !llvm.ptr -> i8
    %c0_i8_142 = arith.constant 0 : i8
    %261 = arith.cmpi ne, %260, %c0_i8_142 : i8
    cf.cond_br %261, ^bb1(%260 : i8), ^bb90
  ^bb90:  // pred: ^bb89
    cf.br ^bb87
  ^bb91:  // pred: ^bb24
    %c18446744073709551615_i256_143 = arith.constant 18446744073709551615 : i256
    %262 = arith.cmpi sgt, %61, %c18446744073709551615_i256_143 : i256
    %c84_i8_144 = arith.constant 84 : i8
    cf.cond_br %262, ^bb1(%c84_i8_144 : i8), ^bb92
  ^bb92:  // pred: ^bb91
    %263 = arith.trunci %61 : i256 to i64
    %c0_i64_145 = arith.constant 0 : i64
    %264 = arith.cmpi slt, %263, %c0_i64_145 : i64
    %c84_i8_146 = arith.constant 84 : i8
    cf.cond_br %264, ^bb1(%c84_i8_146 : i8), ^bb93
  ^bb93:  // pred: ^bb92
    %265 = arith.addi %263, %c32_i64_28 : i64
    %c0_i64_147 = arith.constant 0 : i64
    %266 = arith.cmpi slt, %265, %c0_i64_147 : i64
    %c84_i8_148 = arith.constant 84 : i8
    cf.cond_br %266, ^bb1(%c84_i8_148 : i8), ^bb94
  ^bb94:  // pred: ^bb93
    %c31_i64_149 = arith.constant 31 : i64
    %c32_i64_150 = arith.constant 32 : i64
    %267 = arith.addi %265, %c31_i64_149 : i64
    %268 = arith.divui %267, %c32_i64_150 : i64
    %c32_i64_151 = arith.constant 32 : i64
    %269 = arith.muli %268, %c32_i64_151 : i64
    %270 = call @dora_fn_memory_size(%arg0) : (!llvm.ptr) -> i64
    %c31_i64_152 = arith.constant 31 : i64
    %c32_i64_153 = arith.constant 32 : i64
    %271 = arith.addi %270, %c31_i64_152 : i64
    %272 = arith.divui %271, %c32_i64_153 : i64
    %273 = arith.muli %272, %c32_i64_151 : i64
    %274 = arith.cmpi ult, %273, %269 : i64
    cf.cond_br %274, ^bb96, ^bb95
  ^bb95:  // 2 preds: ^bb94, ^bb98
    cf.br ^bb25
  ^bb96:  // pred: ^bb94
    %c3_i64_154 = arith.constant 3 : i64
    %c512_i64_155 = arith.constant 512 : i64
    %275 = arith.muli %272, %272 : i64
    %276 = arith.divui %275, %c512_i64_155 : i64
    %277 = arith.muli %272, %c3_i64_154 : i64
    %278 = arith.addi %276, %277 : i64
    %c3_i64_156 = arith.constant 3 : i64
    %c512_i64_157 = arith.constant 512 : i64
    %279 = arith.muli %268, %268 : i64
    %280 = arith.divui %279, %c512_i64_157 : i64
    %281 = arith.muli %268, %c3_i64_156 : i64
    %282 = arith.addi %280, %281 : i64
    %283 = arith.subi %282, %278 : i64
    %284 = llvm.load %arg1 : !llvm.ptr -> i64
    %285 = arith.cmpi ult, %284, %283 : i64
    scf.if %285 {
    } else {
      %380 = arith.subi %284, %283 : i64
      llvm.store %380, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_158 = arith.constant 80 : i8
    cf.cond_br %285, ^bb1(%c80_i8_158 : i8), ^bb97
  ^bb97:  // pred: ^bb96
    %286 = call @dora_fn_extend_memory(%arg0, %269) : (!llvm.ptr, i64) -> !llvm.ptr
    %287 = llvm.getelementptr %286[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %288 = llvm.load %287 : !llvm.ptr -> i8
    %c0_i8_159 = arith.constant 0 : i8
    %289 = arith.cmpi ne, %288, %c0_i8_159 : i8
    cf.cond_br %289, ^bb1(%288 : i8), ^bb98
  ^bb98:  // pred: ^bb97
    cf.br ^bb95
  ^bb99:  // pred: ^bb44
    %c49152_i64 = arith.constant 49152 : i64
    %290 = arith.cmpi ugt, %119, %c49152_i64 : i64
    %c100_i8 = arith.constant 100 : i8
    cf.cond_br %290, ^bb1(%c100_i8 : i8), ^bb100
  ^bb100:  // pred: ^bb99
    %c31_i64_160 = arith.constant 31 : i64
    %c32_i64_161 = arith.constant 32 : i64
    %291 = arith.addi %119, %c31_i64_160 : i64
    %292 = arith.divui %291, %c32_i64_161 : i64
    %c2_i64_162 = arith.constant 2 : i64
    %293 = arith.muli %292, %c2_i64_162 : i64
    %294 = llvm.load %arg1 : !llvm.ptr -> i64
    %295 = arith.cmpi ult, %294, %293 : i64
    scf.if %295 {
    } else {
      %380 = arith.subi %294, %293 : i64
      llvm.store %380, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_163 = arith.constant 80 : i8
    cf.cond_br %295, ^bb1(%c80_i8_163 : i8), ^bb101
  ^bb101:  // pred: ^bb100
    %c18446744073709551615_i256_164 = arith.constant 18446744073709551615 : i256
    %296 = arith.cmpi sgt, %111, %c18446744073709551615_i256_164 : i256
    %c84_i8_165 = arith.constant 84 : i8
    cf.cond_br %296, ^bb1(%c84_i8_165 : i8), ^bb102
  ^bb102:  // pred: ^bb101
    %297 = arith.trunci %111 : i256 to i64
    %c0_i64_166 = arith.constant 0 : i64
    %298 = arith.cmpi slt, %297, %c0_i64_166 : i64
    %c84_i8_167 = arith.constant 84 : i8
    cf.cond_br %298, ^bb1(%c84_i8_167 : i8), ^bb103
  ^bb103:  // pred: ^bb102
    %299 = arith.addi %297, %119 : i64
    %c0_i64_168 = arith.constant 0 : i64
    %300 = arith.cmpi slt, %299, %c0_i64_168 : i64
    %c84_i8_169 = arith.constant 84 : i8
    cf.cond_br %300, ^bb1(%c84_i8_169 : i8), ^bb104
  ^bb104:  // pred: ^bb103
    %c31_i64_170 = arith.constant 31 : i64
    %c32_i64_171 = arith.constant 32 : i64
    %301 = arith.addi %299, %c31_i64_170 : i64
    %302 = arith.divui %301, %c32_i64_171 : i64
    %c32_i64_172 = arith.constant 32 : i64
    %303 = arith.muli %302, %c32_i64_172 : i64
    %304 = call @dora_fn_memory_size(%arg0) : (!llvm.ptr) -> i64
    %c31_i64_173 = arith.constant 31 : i64
    %c32_i64_174 = arith.constant 32 : i64
    %305 = arith.addi %304, %c31_i64_173 : i64
    %306 = arith.divui %305, %c32_i64_174 : i64
    %307 = arith.muli %306, %c32_i64_172 : i64
    %308 = arith.cmpi ult, %307, %303 : i64
    cf.cond_br %308, ^bb106, ^bb105
  ^bb105:  // 2 preds: ^bb104, ^bb108
    cf.br ^bb45
  ^bb106:  // pred: ^bb104
    %c3_i64_175 = arith.constant 3 : i64
    %c512_i64_176 = arith.constant 512 : i64
    %309 = arith.muli %306, %306 : i64
    %310 = arith.divui %309, %c512_i64_176 : i64
    %311 = arith.muli %306, %c3_i64_175 : i64
    %312 = arith.addi %310, %311 : i64
    %c3_i64_177 = arith.constant 3 : i64
    %c512_i64_178 = arith.constant 512 : i64
    %313 = arith.muli %302, %302 : i64
    %314 = arith.divui %313, %c512_i64_178 : i64
    %315 = arith.muli %302, %c3_i64_177 : i64
    %316 = arith.addi %314, %315 : i64
    %317 = arith.subi %316, %312 : i64
    %318 = llvm.load %arg1 : !llvm.ptr -> i64
    %319 = arith.cmpi ult, %318, %317 : i64
    scf.if %319 {
    } else {
      %380 = arith.subi %318, %317 : i64
      llvm.store %380, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_179 = arith.constant 80 : i8
    cf.cond_br %319, ^bb1(%c80_i8_179 : i8), ^bb107
  ^bb107:  // pred: ^bb106
    %320 = call @dora_fn_extend_memory(%arg0, %303) : (!llvm.ptr, i64) -> !llvm.ptr
    %321 = llvm.getelementptr %320[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %322 = llvm.load %321 : !llvm.ptr -> i8
    %c0_i8_180 = arith.constant 0 : i8
    %323 = arith.cmpi ne, %322, %c0_i8_180 : i8
    cf.cond_br %323, ^bb1(%322 : i8), ^bb108
  ^bb108:  // pred: ^bb107
    cf.br ^bb105
  ^bb109:  // pred: ^bb61
    %c18446744073709551615_i256_181 = arith.constant 18446744073709551615 : i256
    %324 = arith.cmpi sgt, %179, %c18446744073709551615_i256_181 : i256
    %c84_i8_182 = arith.constant 84 : i8
    cf.cond_br %324, ^bb1(%c84_i8_182 : i8), ^bb110
  ^bb110:  // pred: ^bb109
    %325 = arith.trunci %179 : i256 to i64
    %c0_i64_183 = arith.constant 0 : i64
    %326 = arith.cmpi slt, %325, %c0_i64_183 : i64
    %c84_i8_184 = arith.constant 84 : i8
    cf.cond_br %326, ^bb1(%c84_i8_184 : i8), ^bb111
  ^bb111:  // pred: ^bb110
    %327 = arith.addi %325, %c32_i64_91 : i64
    %c0_i64_185 = arith.constant 0 : i64
    %328 = arith.cmpi slt, %327, %c0_i64_185 : i64
    %c84_i8_186 = arith.constant 84 : i8
    cf.cond_br %328, ^bb1(%c84_i8_186 : i8), ^bb112
  ^bb112:  // pred: ^bb111
    %c31_i64_187 = arith.constant 31 : i64
    %c32_i64_188 = arith.constant 32 : i64
    %329 = arith.addi %327, %c31_i64_187 : i64
    %330 = arith.divui %329, %c32_i64_188 : i64
    %c32_i64_189 = arith.constant 32 : i64
    %331 = arith.muli %330, %c32_i64_189 : i64
    %332 = call @dora_fn_memory_size(%arg0) : (!llvm.ptr) -> i64
    %c31_i64_190 = arith.constant 31 : i64
    %c32_i64_191 = arith.constant 32 : i64
    %333 = arith.addi %332, %c31_i64_190 : i64
    %334 = arith.divui %333, %c32_i64_191 : i64
    %335 = arith.muli %334, %c32_i64_189 : i64
    %336 = arith.cmpi ult, %335, %331 : i64
    cf.cond_br %336, ^bb114, ^bb113
  ^bb113:  // 2 preds: ^bb112, ^bb116
    cf.br ^bb62
  ^bb114:  // pred: ^bb112
    %c3_i64_192 = arith.constant 3 : i64
    %c512_i64_193 = arith.constant 512 : i64
    %337 = arith.muli %334, %334 : i64
    %338 = arith.divui %337, %c512_i64_193 : i64
    %339 = arith.muli %334, %c3_i64_192 : i64
    %340 = arith.addi %338, %339 : i64
    %c3_i64_194 = arith.constant 3 : i64
    %c512_i64_195 = arith.constant 512 : i64
    %341 = arith.muli %330, %330 : i64
    %342 = arith.divui %341, %c512_i64_195 : i64
    %343 = arith.muli %330, %c3_i64_194 : i64
    %344 = arith.addi %342, %343 : i64
    %345 = arith.subi %344, %340 : i64
    %346 = llvm.load %arg1 : !llvm.ptr -> i64
    %347 = arith.cmpi ult, %346, %345 : i64
    scf.if %347 {
    } else {
      %380 = arith.subi %346, %345 : i64
      llvm.store %380, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_196 = arith.constant 80 : i8
    cf.cond_br %347, ^bb1(%c80_i8_196 : i8), ^bb115
  ^bb115:  // pred: ^bb114
    %348 = call @dora_fn_extend_memory(%arg0, %331) : (!llvm.ptr, i64) -> !llvm.ptr
    %349 = llvm.getelementptr %348[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %350 = llvm.load %349 : !llvm.ptr -> i8
    %c0_i8_197 = arith.constant 0 : i8
    %351 = arith.cmpi ne, %350, %c0_i8_197 : i8
    cf.cond_br %351, ^bb1(%350 : i8), ^bb116
  ^bb116:  // pred: ^bb115
    cf.br ^bb113
  ^bb117:  // pred: ^bb76
    %c18446744073709551615_i256_198 = arith.constant 18446744073709551615 : i256
    %352 = arith.cmpi sgt, %216, %c18446744073709551615_i256_198 : i256
    %c84_i8_199 = arith.constant 84 : i8
    cf.cond_br %352, ^bb1(%c84_i8_199 : i8), ^bb118
  ^bb118:  // pred: ^bb117
    %353 = arith.trunci %216 : i256 to i64
    %c0_i64_200 = arith.constant 0 : i64
    %354 = arith.cmpi slt, %353, %c0_i64_200 : i64
    %c84_i8_201 = arith.constant 84 : i8
    cf.cond_br %354, ^bb1(%c84_i8_201 : i8), ^bb119
  ^bb119:  // pred: ^bb118
    %355 = arith.addi %353, %222 : i64
    %c0_i64_202 = arith.constant 0 : i64
    %356 = arith.cmpi slt, %355, %c0_i64_202 : i64
    %c84_i8_203 = arith.constant 84 : i8
    cf.cond_br %356, ^bb1(%c84_i8_203 : i8), ^bb120
  ^bb120:  // pred: ^bb119
    %c31_i64_204 = arith.constant 31 : i64
    %c32_i64_205 = arith.constant 32 : i64
    %357 = arith.addi %355, %c31_i64_204 : i64
    %358 = arith.divui %357, %c32_i64_205 : i64
    %c32_i64_206 = arith.constant 32 : i64
    %359 = arith.muli %358, %c32_i64_206 : i64
    %360 = call @dora_fn_memory_size(%arg0) : (!llvm.ptr) -> i64
    %c31_i64_207 = arith.constant 31 : i64
    %c32_i64_208 = arith.constant 32 : i64
    %361 = arith.addi %360, %c31_i64_207 : i64
    %362 = arith.divui %361, %c32_i64_208 : i64
    %363 = arith.muli %362, %c32_i64_206 : i64
    %364 = arith.cmpi ult, %363, %359 : i64
    cf.cond_br %364, ^bb122, ^bb121
  ^bb121:  // 2 preds: ^bb120, ^bb124
    cf.br ^bb77
  ^bb122:  // pred: ^bb120
    %c3_i64_209 = arith.constant 3 : i64
    %c512_i64_210 = arith.constant 512 : i64
    %365 = arith.muli %362, %362 : i64
    %366 = arith.divui %365, %c512_i64_210 : i64
    %367 = arith.muli %362, %c3_i64_209 : i64
    %368 = arith.addi %366, %367 : i64
    %c3_i64_211 = arith.constant 3 : i64
    %c512_i64_212 = arith.constant 512 : i64
    %369 = arith.muli %358, %358 : i64
    %370 = arith.divui %369, %c512_i64_212 : i64
    %371 = arith.muli %358, %c3_i64_211 : i64
    %372 = arith.addi %370, %371 : i64
    %373 = arith.subi %372, %368 : i64
    %374 = llvm.load %arg1 : !llvm.ptr -> i64
    %375 = arith.cmpi ult, %374, %373 : i64
    scf.if %375 {
    } else {
      %380 = arith.subi %374, %373 : i64
      llvm.store %380, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_213 = arith.constant 80 : i8
    cf.cond_br %375, ^bb1(%c80_i8_213 : i8), ^bb123
  ^bb123:  // pred: ^bb122
    %376 = call @dora_fn_extend_memory(%arg0, %359) : (!llvm.ptr, i64) -> !llvm.ptr
    %377 = llvm.getelementptr %376[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %378 = llvm.load %377 : !llvm.ptr -> i8
    %c0_i8_214 = arith.constant 0 : i8
    %379 = arith.cmpi ne, %378, %c0_i8_214 : i8
    cf.cond_br %379, ^bb1(%378 : i8), ^bb124
  ^bb124:  // pred: ^bb123
    cf.br ^bb121
  }
}
