---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  llvm.mlir.global internal @dora_global_memory_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_memory_size() {addr_space = 0 : i32} : i64
  func.func private @dora_fn_nop()
  func.func private @dora_fn_tracing(!llvm.ptr, i8, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_fn_is_static(!llvm.ptr) -> i8
  func.func private @dora_fn_exp(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_chainid(!llvm.ptr) -> i64
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gaslimit_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_code_copy(!llvm.ptr, !llvm.ptr, i64, i64)
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_call(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_returndata_copy(!llvm.ptr, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_tload(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_tstore(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func public @main(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr) -> i8 attributes {llvm.emit_c_interface} {
    %c0_i64 = arith.constant 0 : i64
    %0 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %c0_i64, %0 : i64, !llvm.ptr
    cf.br ^bb5
  ^bb1(%1: i8):  // 69 preds: ^bb2, ^bb4, ^bb5, ^bb8, ^bb9, ^bb13, ^bb14, ^bb17, ^bb18, ^bb21, ^bb22, ^bb26, ^bb27, ^bb30, ^bb31, ^bb34, ^bb35, ^bb38, ^bb39, ^bb41, ^bb42, ^bb43, ^bb45, ^bb46, ^bb47, ^bb49, ^bb50, ^bb52, ^bb54, ^bb55, ^bb58, ^bb59, ^bb63, ^bb64, ^bb67, ^bb68, ^bb71, ^bb72, ^bb74, ^bb75, ^bb79, ^bb80, ^bb83, ^bb84, ^bb85, ^bb88, ^bb89, ^bb91, ^bb92, ^bb93, ^bb96, ^bb97, ^bb99, ^bb100, ^bb101, ^bb102, ^bb103, ^bb106, ^bb107, ^bb109, ^bb110, ^bb111, ^bb114, ^bb115, ^bb117, ^bb118, ^bb119, ^bb122, ^bb123
    %c0_i64_0 = arith.constant 0 : i64
    %2 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_0, %c0_i64_0, %2, %1) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %1 : i8
  ^bb2(%3: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %3 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3:  // pred: ^bb4
    %c170141183460469231731687303715884105727_i256 = arith.constant 170141183460469231731687303715884105727 : i256
    %4 = llvm.load %arg3 : !llvm.ptr -> i64
    %5 = llvm.getelementptr %arg2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64 = arith.constant 1 : i64
    %6 = arith.addi %4, %c1_i64 : i64
    llvm.store %6, %arg3 : i64, !llvm.ptr
    llvm.store %c170141183460469231731687303715884105727_i256, %5 : i256, !llvm.ptr
    cf.br ^bb9
  ^bb4:  // pred: ^bb6
    %c1024_i64 = arith.constant 1024 : i64
    %7 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_1 = arith.constant 1 : i64
    %8 = arith.addi %7, %c1_i64_1 : i64
    %9 = arith.cmpi ult, %c1024_i64, %8 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %9, ^bb1(%c92_i8 : i8), ^bb3
  ^bb5:  // pred: ^bb0
    %10 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %11 = arith.cmpi uge, %10, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %11, ^bb6, ^bb1(%c80_i8 : i8)
  ^bb6:  // pred: ^bb5
    %12 = arith.subi %10, %c3_i64 : i64
    llvm.store %12, %arg1 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb7:  // pred: ^bb8
    %c0_i256 = arith.constant 0 : i256
    %13 = llvm.load %arg3 : !llvm.ptr -> i64
    %14 = llvm.getelementptr %arg2[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_2 = arith.constant 1 : i64
    %15 = arith.addi %13, %c1_i64_2 : i64
    llvm.store %15, %arg3 : i64, !llvm.ptr
    llvm.store %c0_i256, %14 : i256, !llvm.ptr
    cf.br ^bb14
  ^bb8:  // pred: ^bb10
    %c1024_i64_3 = arith.constant 1024 : i64
    %16 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_4 = arith.constant 1 : i64
    %17 = arith.addi %16, %c1_i64_4 : i64
    %18 = arith.cmpi ult, %c1024_i64_3, %17 : i64
    %c92_i8_5 = arith.constant 92 : i8
    cf.cond_br %18, ^bb1(%c92_i8_5 : i8), ^bb7
  ^bb9:  // pred: ^bb3
    %19 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_6 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %20 = arith.cmpi uge, %19, %c3_i64_6 : i64
    %c80_i8_7 = arith.constant 80 : i8
    cf.cond_br %20, ^bb10, ^bb1(%c80_i8_7 : i8)
  ^bb10:  // pred: ^bb9
    %21 = arith.subi %19, %c3_i64_6 : i64
    llvm.store %21, %arg1 : i64, !llvm.ptr
    cf.br ^bb8
  ^bb11:  // pred: ^bb13
    %22 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_8 = arith.constant 1 : i64
    %23 = arith.subi %22, %c1_i64_8 : i64
    %24 = llvm.getelementptr %arg2[%23] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %23, %arg3 : i64, !llvm.ptr
    %25 = llvm.load %24 : !llvm.ptr -> i256
    %26 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_9 = arith.constant 1 : i64
    %27 = arith.subi %26, %c1_i64_9 : i64
    %28 = llvm.getelementptr %arg2[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %27, %arg3 : i64, !llvm.ptr
    %29 = llvm.load %28 : !llvm.ptr -> i256
    %c32_i64 = arith.constant 32 : i64
    %c0_i64_10 = arith.constant 0 : i64
    %30 = arith.cmpi ne, %c32_i64, %c0_i64_10 : i64
    cf.cond_br %30, ^bb83, ^bb12
  ^bb12:  // 2 preds: ^bb11, ^bb87
    %31 = arith.trunci %25 : i256 to i64
    %32 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    %33 = llvm.load %32 : !llvm.ptr -> !llvm.ptr
    %34 = llvm.getelementptr %33[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %35 = llvm.intr.bswap(%29)  : (i256) -> i256
    llvm.store %35, %34 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb18
  ^bb13:  // pred: ^bb15
    %c1024_i64_11 = arith.constant 1024 : i64
    %36 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-2_i64 = arith.constant -2 : i64
    %37 = arith.addi %36, %c-2_i64 : i64
    %c2_i64 = arith.constant 2 : i64
    %38 = arith.cmpi ult, %36, %c2_i64 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %38, ^bb1(%c91_i8 : i8), ^bb11
  ^bb14:  // pred: ^bb7
    %39 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_12 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %40 = arith.cmpi uge, %39, %c3_i64_12 : i64
    %c80_i8_13 = arith.constant 80 : i8
    cf.cond_br %40, ^bb15, ^bb1(%c80_i8_13 : i8)
  ^bb15:  // pred: ^bb14
    %41 = arith.subi %39, %c3_i64_12 : i64
    llvm.store %41, %arg1 : i64, !llvm.ptr
    cf.br ^bb13
  ^bb16:  // pred: ^bb17
    %c170141183460469231731687303715884105727_i256_14 = arith.constant 170141183460469231731687303715884105727 : i256
    %42 = llvm.load %arg3 : !llvm.ptr -> i64
    %43 = llvm.getelementptr %arg2[%42] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_15 = arith.constant 1 : i64
    %44 = arith.addi %42, %c1_i64_15 : i64
    llvm.store %44, %arg3 : i64, !llvm.ptr
    llvm.store %c170141183460469231731687303715884105727_i256_14, %43 : i256, !llvm.ptr
    cf.br ^bb22
  ^bb17:  // pred: ^bb19
    %c1024_i64_16 = arith.constant 1024 : i64
    %45 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_17 = arith.constant 1 : i64
    %46 = arith.addi %45, %c1_i64_17 : i64
    %47 = arith.cmpi ult, %c1024_i64_16, %46 : i64
    %c92_i8_18 = arith.constant 92 : i8
    cf.cond_br %47, ^bb1(%c92_i8_18 : i8), ^bb16
  ^bb18:  // pred: ^bb12
    %48 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_19 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %49 = arith.cmpi uge, %48, %c3_i64_19 : i64
    %c80_i8_20 = arith.constant 80 : i8
    cf.cond_br %49, ^bb19, ^bb1(%c80_i8_20 : i8)
  ^bb19:  // pred: ^bb18
    %50 = arith.subi %48, %c3_i64_19 : i64
    llvm.store %50, %arg1 : i64, !llvm.ptr
    cf.br ^bb17
  ^bb20:  // pred: ^bb21
    %c32_i256 = arith.constant 32 : i256
    %51 = llvm.load %arg3 : !llvm.ptr -> i64
    %52 = llvm.getelementptr %arg2[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_21 = arith.constant 1 : i64
    %53 = arith.addi %51, %c1_i64_21 : i64
    llvm.store %53, %arg3 : i64, !llvm.ptr
    llvm.store %c32_i256, %52 : i256, !llvm.ptr
    cf.br ^bb27
  ^bb21:  // pred: ^bb23
    %c1024_i64_22 = arith.constant 1024 : i64
    %54 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_23 = arith.constant 1 : i64
    %55 = arith.addi %54, %c1_i64_23 : i64
    %56 = arith.cmpi ult, %c1024_i64_22, %55 : i64
    %c92_i8_24 = arith.constant 92 : i8
    cf.cond_br %56, ^bb1(%c92_i8_24 : i8), ^bb20
  ^bb22:  // pred: ^bb16
    %57 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_25 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %58 = arith.cmpi uge, %57, %c3_i64_25 : i64
    %c80_i8_26 = arith.constant 80 : i8
    cf.cond_br %58, ^bb23, ^bb1(%c80_i8_26 : i8)
  ^bb23:  // pred: ^bb22
    %59 = arith.subi %57, %c3_i64_25 : i64
    llvm.store %59, %arg1 : i64, !llvm.ptr
    cf.br ^bb21
  ^bb24:  // pred: ^bb26
    %60 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_27 = arith.constant 1 : i64
    %61 = arith.subi %60, %c1_i64_27 : i64
    %62 = llvm.getelementptr %arg2[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %61, %arg3 : i64, !llvm.ptr
    %63 = llvm.load %62 : !llvm.ptr -> i256
    %64 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_28 = arith.constant 1 : i64
    %65 = arith.subi %64, %c1_i64_28 : i64
    %66 = llvm.getelementptr %arg2[%65] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %65, %arg3 : i64, !llvm.ptr
    %67 = llvm.load %66 : !llvm.ptr -> i256
    %c32_i64_29 = arith.constant 32 : i64
    %c0_i64_30 = arith.constant 0 : i64
    %68 = arith.cmpi ne, %c32_i64_29, %c0_i64_30 : i64
    cf.cond_br %68, ^bb91, ^bb25
  ^bb25:  // 2 preds: ^bb24, ^bb95
    %69 = arith.trunci %63 : i256 to i64
    %70 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    %71 = llvm.load %70 : !llvm.ptr -> !llvm.ptr
    %72 = llvm.getelementptr %71[%69] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %73 = llvm.intr.bswap(%67)  : (i256) -> i256
    llvm.store %73, %72 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb31
  ^bb26:  // pred: ^bb28
    %c1024_i64_31 = arith.constant 1024 : i64
    %74 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-2_i64_32 = arith.constant -2 : i64
    %75 = arith.addi %74, %c-2_i64_32 : i64
    %c2_i64_33 = arith.constant 2 : i64
    %76 = arith.cmpi ult, %74, %c2_i64_33 : i64
    %c91_i8_34 = arith.constant 91 : i8
    cf.cond_br %76, ^bb1(%c91_i8_34 : i8), ^bb24
  ^bb27:  // pred: ^bb20
    %77 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_35 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %78 = arith.cmpi uge, %77, %c3_i64_35 : i64
    %c80_i8_36 = arith.constant 80 : i8
    cf.cond_br %78, ^bb28, ^bb1(%c80_i8_36 : i8)
  ^bb28:  // pred: ^bb27
    %79 = arith.subi %77, %c3_i64_35 : i64
    llvm.store %79, %arg1 : i64, !llvm.ptr
    cf.br ^bb26
  ^bb29:  // pred: ^bb30
    %c41_i256 = arith.constant 41 : i256
    %80 = llvm.load %arg3 : !llvm.ptr -> i64
    %81 = llvm.getelementptr %arg2[%80] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_37 = arith.constant 1 : i64
    %82 = arith.addi %80, %c1_i64_37 : i64
    llvm.store %82, %arg3 : i64, !llvm.ptr
    llvm.store %c41_i256, %81 : i256, !llvm.ptr
    cf.br ^bb35
  ^bb30:  // pred: ^bb32
    %c1024_i64_38 = arith.constant 1024 : i64
    %83 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_39 = arith.constant 1 : i64
    %84 = arith.addi %83, %c1_i64_39 : i64
    %85 = arith.cmpi ult, %c1024_i64_38, %84 : i64
    %c92_i8_40 = arith.constant 92 : i8
    cf.cond_br %85, ^bb1(%c92_i8_40 : i8), ^bb29
  ^bb31:  // pred: ^bb25
    %86 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_41 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %87 = arith.cmpi uge, %86, %c3_i64_41 : i64
    %c80_i8_42 = arith.constant 80 : i8
    cf.cond_br %87, ^bb32, ^bb1(%c80_i8_42 : i8)
  ^bb32:  // pred: ^bb31
    %88 = arith.subi %86, %c3_i64_41 : i64
    llvm.store %88, %arg1 : i64, !llvm.ptr
    cf.br ^bb30
  ^bb33:  // pred: ^bb34
    %c0_i256_43 = arith.constant 0 : i256
    %89 = llvm.load %arg3 : !llvm.ptr -> i64
    %90 = llvm.getelementptr %arg2[%89] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_44 = arith.constant 1 : i64
    %91 = arith.addi %89, %c1_i64_44 : i64
    llvm.store %91, %arg3 : i64, !llvm.ptr
    llvm.store %c0_i256_43, %90 : i256, !llvm.ptr
    cf.br ^bb39
  ^bb34:  // pred: ^bb36
    %c1024_i64_45 = arith.constant 1024 : i64
    %92 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_46 = arith.constant 1 : i64
    %93 = arith.addi %92, %c1_i64_46 : i64
    %94 = arith.cmpi ult, %c1024_i64_45, %93 : i64
    %c92_i8_47 = arith.constant 92 : i8
    cf.cond_br %94, ^bb1(%c92_i8_47 : i8), ^bb33
  ^bb35:  // pred: ^bb29
    %95 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_48 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %96 = arith.cmpi uge, %95, %c3_i64_48 : i64
    %c80_i8_49 = arith.constant 80 : i8
    cf.cond_br %96, ^bb36, ^bb1(%c80_i8_49 : i8)
  ^bb36:  // pred: ^bb35
    %97 = arith.subi %95, %c3_i64_48 : i64
    llvm.store %97, %arg1 : i64, !llvm.ptr
    cf.br ^bb34
  ^bb37:  // pred: ^bb38
    %c0_i256_50 = arith.constant 0 : i256
    %98 = llvm.load %arg3 : !llvm.ptr -> i64
    %99 = llvm.getelementptr %arg2[%98] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_51 = arith.constant 1 : i64
    %100 = arith.addi %98, %c1_i64_51 : i64
    llvm.store %100, %arg3 : i64, !llvm.ptr
    llvm.store %c0_i256_50, %99 : i256, !llvm.ptr
    cf.br ^bb50
  ^bb38:  // pred: ^bb40
    %c1024_i64_52 = arith.constant 1024 : i64
    %101 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_53 = arith.constant 1 : i64
    %102 = arith.addi %101, %c1_i64_53 : i64
    %103 = arith.cmpi ult, %c1024_i64_52, %102 : i64
    %c92_i8_54 = arith.constant 92 : i8
    cf.cond_br %103, ^bb1(%c92_i8_54 : i8), ^bb37
  ^bb39:  // pred: ^bb33
    %104 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_55 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %105 = arith.cmpi uge, %104, %c3_i64_55 : i64
    %c80_i8_56 = arith.constant 80 : i8
    cf.cond_br %105, ^bb40, ^bb1(%c80_i8_56 : i8)
  ^bb40:  // pred: ^bb39
    %106 = arith.subi %104, %c3_i64_55 : i64
    llvm.store %106, %arg1 : i64, !llvm.ptr
    cf.br ^bb38
  ^bb41:  // pred: ^bb49
    %107 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_57 = arith.constant 1 : i64
    %108 = arith.subi %107, %c1_i64_57 : i64
    %109 = llvm.getelementptr %arg2[%108] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %108, %arg3 : i64, !llvm.ptr
    %110 = llvm.load %109 : !llvm.ptr -> i256
    %111 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_58 = arith.constant 1 : i64
    %112 = arith.subi %111, %c1_i64_58 : i64
    %113 = llvm.getelementptr %arg2[%112] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %112, %arg3 : i64, !llvm.ptr
    %114 = llvm.load %113 : !llvm.ptr -> i256
    %115 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_59 = arith.constant 1 : i64
    %116 = arith.subi %115, %c1_i64_59 : i64
    %117 = llvm.getelementptr %arg2[%116] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %116, %arg3 : i64, !llvm.ptr
    %118 = llvm.load %117 : !llvm.ptr -> i256
    %119 = call @dora_fn_is_static(%arg0) : (!llvm.ptr) -> i8
    %c0_i8 = arith.constant 0 : i8
    %120 = arith.cmpi ne, %119, %c0_i8 : i8
    %c87_i8 = arith.constant 87 : i8
    cf.cond_br %120, ^bb1(%c87_i8 : i8), ^bb42
  ^bb42:  // pred: ^bb41
    %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256
    %121 = arith.cmpi sgt, %118, %c18446744073709551615_i256 : i256
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %121, ^bb1(%c84_i8 : i8), ^bb43
  ^bb43:  // pred: ^bb42
    %122 = arith.trunci %118 : i256 to i64
    %c0_i64_60 = arith.constant 0 : i64
    %123 = arith.cmpi slt, %122, %c0_i64_60 : i64
    %c84_i8_61 = arith.constant 84 : i8
    cf.cond_br %123, ^bb1(%c84_i8_61 : i8), ^bb44
  ^bb44:  // pred: ^bb43
    %c0_i64_62 = arith.constant 0 : i64
    %124 = arith.cmpi ne, %122, %c0_i64_62 : i64
    cf.cond_br %124, ^bb99, ^bb45
  ^bb45:  // 2 preds: ^bb44, ^bb105
    %c32000_i64 = arith.constant 32000 : i64
    %125 = llvm.load %arg1 : !llvm.ptr -> i64
    %126 = arith.cmpi ult, %125, %c32000_i64 : i64
    scf.if %126 {
    } else {
      %409 = arith.subi %125, %c32000_i64 : i64
      llvm.store %409, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_63 = arith.constant 80 : i8
    cf.cond_br %126, ^bb1(%c80_i8_63 : i8), ^bb46
  ^bb46:  // pred: ^bb45
    %c1_i256 = arith.constant 1 : i256
    %127 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %110, %127 {alignment = 1 : i64} : i256, !llvm.ptr
    %128 = llvm.load %arg1 : !llvm.ptr -> i64
    %129 = arith.trunci %114 : i256 to i64
    %130 = call @dora_fn_create(%arg0, %122, %129, %127, %128) : (!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
    %131 = llvm.getelementptr %130[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %132 = llvm.load %131 : !llvm.ptr -> i8
    %c0_i8_64 = arith.constant 0 : i8
    %133 = arith.cmpi ne, %132, %c0_i8_64 : i8
    cf.cond_br %133, ^bb1(%132 : i8), ^bb47
  ^bb47:  // pred: ^bb46
    %134 = llvm.getelementptr %130[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %135 = llvm.load %134 : !llvm.ptr -> i64
    %136 = llvm.load %arg1 : !llvm.ptr -> i64
    %137 = arith.cmpi ult, %136, %135 : i64
    scf.if %137 {
    } else {
      %409 = arith.subi %136, %135 : i64
      llvm.store %409, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_65 = arith.constant 80 : i8
    cf.cond_br %137, ^bb1(%c80_i8_65 : i8), ^bb48
  ^bb48:  // pred: ^bb47
    %138 = llvm.load %127 : !llvm.ptr -> i256
    %139 = llvm.load %arg3 : !llvm.ptr -> i64
    %140 = llvm.getelementptr %arg2[%139] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_66 = arith.constant 1 : i64
    %141 = arith.addi %139, %c1_i64_66 : i64
    llvm.store %141, %arg3 : i64, !llvm.ptr
    llvm.store %138, %140 : i256, !llvm.ptr
    cf.br ^bb55
  ^bb49:  // pred: ^bb51
    %c1024_i64_67 = arith.constant 1024 : i64
    %142 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-2_i64_68 = arith.constant -2 : i64
    %143 = arith.addi %142, %c-2_i64_68 : i64
    %c3_i64_69 = arith.constant 3 : i64
    %144 = arith.cmpi ult, %142, %c3_i64_69 : i64
    %c91_i8_70 = arith.constant 91 : i8
    cf.cond_br %144, ^bb1(%c91_i8_70 : i8), ^bb41
  ^bb50:  // pred: ^bb37
    %145 = llvm.load %arg1 : !llvm.ptr -> i64
    %c0_i64_71 = arith.constant 0 : i64
    call @dora_fn_nop() : () -> ()
    %146 = arith.cmpi uge, %145, %c0_i64_71 : i64
    %c80_i8_72 = arith.constant 80 : i8
    cf.cond_br %146, ^bb51, ^bb1(%c80_i8_72 : i8)
  ^bb51:  // pred: ^bb50
    %147 = arith.subi %145, %c0_i64_71 : i64
    llvm.store %147, %arg1 : i64, !llvm.ptr
    cf.br ^bb49
  ^bb52:  // pred: ^bb54
    %148 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_73 = arith.constant 1 : i64
    %149 = arith.subi %148, %c1_i64_73 : i64
    %150 = llvm.getelementptr %arg2[%149] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %149, %arg3 : i64, !llvm.ptr
    %151 = llvm.load %150 : !llvm.ptr -> i256
    %c1_i256_74 = arith.constant 1 : i256
    %152 = llvm.alloca %c1_i256_74 x i256 : (i256) -> !llvm.ptr
    llvm.store %151, %152 {alignment = 1 : i64} : i256, !llvm.ptr
    %153 = call @dora_fn_extcodesize(%arg0, %152) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %154 = llvm.getelementptr %153[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %155 = llvm.load %154 : !llvm.ptr -> i64
    %156 = llvm.getelementptr %153[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %157 = llvm.load %156 : !llvm.ptr -> i64
    %158 = llvm.load %arg1 : !llvm.ptr -> i64
    %159 = arith.cmpi ult, %158, %157 : i64
    scf.if %159 {
    } else {
      %409 = arith.subi %158, %157 : i64
      llvm.store %409, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_75 = arith.constant 80 : i8
    cf.cond_br %159, ^bb1(%c80_i8_75 : i8), ^bb53
  ^bb53:  // pred: ^bb52
    %160 = arith.extui %155 : i64 to i256
    %161 = llvm.load %arg3 : !llvm.ptr -> i64
    %162 = llvm.getelementptr %arg2[%161] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_76 = arith.constant 1 : i64
    %163 = arith.addi %161, %c1_i64_76 : i64
    llvm.store %163, %arg3 : i64, !llvm.ptr
    llvm.store %160, %162 : i256, !llvm.ptr
    cf.br ^bb59
  ^bb54:  // pred: ^bb56
    %c1024_i64_77 = arith.constant 1024 : i64
    %164 = llvm.load %arg3 : !llvm.ptr -> i64
    %c0_i64_78 = arith.constant 0 : i64
    %165 = arith.addi %164, %c0_i64_78 : i64
    %c1_i64_79 = arith.constant 1 : i64
    %166 = arith.cmpi ult, %164, %c1_i64_79 : i64
    %c91_i8_80 = arith.constant 91 : i8
    cf.cond_br %166, ^bb1(%c91_i8_80 : i8), ^bb52
  ^bb55:  // pred: ^bb48
    %167 = llvm.load %arg1 : !llvm.ptr -> i64
    %c0_i64_81 = arith.constant 0 : i64
    call @dora_fn_nop() : () -> ()
    %168 = arith.cmpi uge, %167, %c0_i64_81 : i64
    %c80_i8_82 = arith.constant 80 : i8
    cf.cond_br %168, ^bb56, ^bb1(%c80_i8_82 : i8)
  ^bb56:  // pred: ^bb55
    %169 = arith.subi %167, %c0_i64_81 : i64
    llvm.store %169, %arg1 : i64, !llvm.ptr
    cf.br ^bb54
  ^bb57:  // pred: ^bb58
    %c0_i256_83 = arith.constant 0 : i256
    %170 = llvm.load %arg3 : !llvm.ptr -> i64
    %171 = llvm.getelementptr %arg2[%170] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_84 = arith.constant 1 : i64
    %172 = arith.addi %170, %c1_i64_84 : i64
    llvm.store %172, %arg3 : i64, !llvm.ptr
    llvm.store %c0_i256_83, %171 : i256, !llvm.ptr
    cf.br ^bb64
  ^bb58:  // pred: ^bb60
    %c1024_i64_85 = arith.constant 1024 : i64
    %173 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_86 = arith.constant 1 : i64
    %174 = arith.addi %173, %c1_i64_86 : i64
    %175 = arith.cmpi ult, %c1024_i64_85, %174 : i64
    %c92_i8_87 = arith.constant 92 : i8
    cf.cond_br %175, ^bb1(%c92_i8_87 : i8), ^bb57
  ^bb59:  // pred: ^bb53
    %176 = llvm.load %arg1 : !llvm.ptr -> i64
    %c2_i64_88 = arith.constant 2 : i64
    call @dora_fn_nop() : () -> ()
    %177 = arith.cmpi uge, %176, %c2_i64_88 : i64
    %c80_i8_89 = arith.constant 80 : i8
    cf.cond_br %177, ^bb60, ^bb1(%c80_i8_89 : i8)
  ^bb60:  // pred: ^bb59
    %178 = arith.subi %176, %c2_i64_88 : i64
    llvm.store %178, %arg1 : i64, !llvm.ptr
    cf.br ^bb58
  ^bb61:  // pred: ^bb63
    %179 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_90 = arith.constant 1 : i64
    %180 = arith.subi %179, %c1_i64_90 : i64
    %181 = llvm.getelementptr %arg2[%180] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %180, %arg3 : i64, !llvm.ptr
    %182 = llvm.load %181 : !llvm.ptr -> i256
    %183 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_91 = arith.constant 1 : i64
    %184 = arith.subi %183, %c1_i64_91 : i64
    %185 = llvm.getelementptr %arg2[%184] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %184, %arg3 : i64, !llvm.ptr
    %186 = llvm.load %185 : !llvm.ptr -> i256
    %c32_i64_92 = arith.constant 32 : i64
    %c0_i64_93 = arith.constant 0 : i64
    %187 = arith.cmpi ne, %c32_i64_92, %c0_i64_93 : i64
    cf.cond_br %187, ^bb109, ^bb62
  ^bb62:  // 2 preds: ^bb61, ^bb113
    %188 = arith.trunci %182 : i256 to i64
    %189 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    %190 = llvm.load %189 : !llvm.ptr -> !llvm.ptr
    %191 = llvm.getelementptr %190[%188] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %192 = llvm.intr.bswap(%186)  : (i256) -> i256
    llvm.store %192, %191 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb68
  ^bb63:  // pred: ^bb65
    %c1024_i64_94 = arith.constant 1024 : i64
    %193 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-2_i64_95 = arith.constant -2 : i64
    %194 = arith.addi %193, %c-2_i64_95 : i64
    %c2_i64_96 = arith.constant 2 : i64
    %195 = arith.cmpi ult, %193, %c2_i64_96 : i64
    %c91_i8_97 = arith.constant 91 : i8
    cf.cond_br %195, ^bb1(%c91_i8_97 : i8), ^bb61
  ^bb64:  // pred: ^bb57
    %196 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_98 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %197 = arith.cmpi uge, %196, %c3_i64_98 : i64
    %c80_i8_99 = arith.constant 80 : i8
    cf.cond_br %197, ^bb65, ^bb1(%c80_i8_99 : i8)
  ^bb65:  // pred: ^bb64
    %198 = arith.subi %196, %c3_i64_98 : i64
    llvm.store %198, %arg1 : i64, !llvm.ptr
    cf.br ^bb63
  ^bb66:  // pred: ^bb67
    %c32_i256_100 = arith.constant 32 : i256
    %199 = llvm.load %arg3 : !llvm.ptr -> i64
    %200 = llvm.getelementptr %arg2[%199] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_101 = arith.constant 1 : i64
    %201 = arith.addi %199, %c1_i64_101 : i64
    llvm.store %201, %arg3 : i64, !llvm.ptr
    llvm.store %c32_i256_100, %200 : i256, !llvm.ptr
    cf.br ^bb72
  ^bb67:  // pred: ^bb69
    %c1024_i64_102 = arith.constant 1024 : i64
    %202 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_103 = arith.constant 1 : i64
    %203 = arith.addi %202, %c1_i64_103 : i64
    %204 = arith.cmpi ult, %c1024_i64_102, %203 : i64
    %c92_i8_104 = arith.constant 92 : i8
    cf.cond_br %204, ^bb1(%c92_i8_104 : i8), ^bb66
  ^bb68:  // pred: ^bb62
    %205 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_105 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %206 = arith.cmpi uge, %205, %c3_i64_105 : i64
    %c80_i8_106 = arith.constant 80 : i8
    cf.cond_br %206, ^bb69, ^bb1(%c80_i8_106 : i8)
  ^bb69:  // pred: ^bb68
    %207 = arith.subi %205, %c3_i64_105 : i64
    llvm.store %207, %arg1 : i64, !llvm.ptr
    cf.br ^bb67
  ^bb70:  // pred: ^bb71
    %c0_i256_107 = arith.constant 0 : i256
    %208 = llvm.load %arg3 : !llvm.ptr -> i64
    %209 = llvm.getelementptr %arg2[%208] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_108 = arith.constant 1 : i64
    %210 = arith.addi %208, %c1_i64_108 : i64
    llvm.store %210, %arg3 : i64, !llvm.ptr
    llvm.store %c0_i256_107, %209 : i256, !llvm.ptr
    cf.br ^bb80
  ^bb71:  // pred: ^bb73
    %c1024_i64_109 = arith.constant 1024 : i64
    %211 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_110 = arith.constant 1 : i64
    %212 = arith.addi %211, %c1_i64_110 : i64
    %213 = arith.cmpi ult, %c1024_i64_109, %212 : i64
    %c92_i8_111 = arith.constant 92 : i8
    cf.cond_br %213, ^bb1(%c92_i8_111 : i8), ^bb70
  ^bb72:  // pred: ^bb66
    %214 = llvm.load %arg1 : !llvm.ptr -> i64
    %c2_i64_112 = arith.constant 2 : i64
    call @dora_fn_nop() : () -> ()
    %215 = arith.cmpi uge, %214, %c2_i64_112 : i64
    %c80_i8_113 = arith.constant 80 : i8
    cf.cond_br %215, ^bb73, ^bb1(%c80_i8_113 : i8)
  ^bb73:  // pred: ^bb72
    %216 = arith.subi %214, %c2_i64_112 : i64
    llvm.store %216, %arg1 : i64, !llvm.ptr
    cf.br ^bb71
  ^bb74:  // pred: ^bb79
    %217 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_114 = arith.constant 1 : i64
    %218 = arith.subi %217, %c1_i64_114 : i64
    %219 = llvm.getelementptr %arg2[%218] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %218, %arg3 : i64, !llvm.ptr
    %220 = llvm.load %219 : !llvm.ptr -> i256
    %221 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_115 = arith.constant 1 : i64
    %222 = arith.subi %221, %c1_i64_115 : i64
    %223 = llvm.getelementptr %arg2[%222] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %222, %arg3 : i64, !llvm.ptr
    %224 = llvm.load %223 : !llvm.ptr -> i256
    %c18446744073709551615_i256_116 = arith.constant 18446744073709551615 : i256
    %225 = arith.cmpi sgt, %224, %c18446744073709551615_i256_116 : i256
    %c84_i8_117 = arith.constant 84 : i8
    cf.cond_br %225, ^bb1(%c84_i8_117 : i8), ^bb75
  ^bb75:  // pred: ^bb74
    %226 = arith.trunci %224 : i256 to i64
    %c0_i64_118 = arith.constant 0 : i64
    %227 = arith.cmpi slt, %226, %c0_i64_118 : i64
    %c84_i8_119 = arith.constant 84 : i8
    cf.cond_br %227, ^bb1(%c84_i8_119 : i8), ^bb76
  ^bb76:  // pred: ^bb75
    %c0_i64_120 = arith.constant 0 : i64
    %228 = arith.cmpi ne, %226, %c0_i64_120 : i64
    cf.cond_br %228, ^bb117, ^bb77
  ^bb77:  // 2 preds: ^bb76, ^bb121
    %c0_i8_121 = arith.constant 0 : i8
    %229 = arith.trunci %220 : i256 to i64
    %230 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %229, %226, %230, %c0_i8_121) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c0_i8_121 : i8
  ^bb78:  // no predecessors
    cf.br ^bb82
  ^bb79:  // pred: ^bb81
    %c1024_i64_122 = arith.constant 1024 : i64
    %231 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-2_i64_123 = arith.constant -2 : i64
    %232 = arith.addi %231, %c-2_i64_123 : i64
    %c2_i64_124 = arith.constant 2 : i64
    %233 = arith.cmpi ult, %231, %c2_i64_124 : i64
    %c91_i8_125 = arith.constant 91 : i8
    cf.cond_br %233, ^bb1(%c91_i8_125 : i8), ^bb74
  ^bb80:  // pred: ^bb70
    %234 = llvm.load %arg1 : !llvm.ptr -> i64
    %c0_i64_126 = arith.constant 0 : i64
    call @dora_fn_nop() : () -> ()
    %235 = arith.cmpi uge, %234, %c0_i64_126 : i64
    %c80_i8_127 = arith.constant 80 : i8
    cf.cond_br %235, ^bb81, ^bb1(%c80_i8_127 : i8)
  ^bb81:  // pred: ^bb80
    %236 = arith.subi %234, %c0_i64_126 : i64
    llvm.store %236, %arg1 : i64, !llvm.ptr
    cf.br ^bb79
  ^bb82:  // pred: ^bb78
    %c0_i64_128 = arith.constant 0 : i64
    %c1_i8 = arith.constant 1 : i8
    %237 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_128, %c0_i64_128, %237, %c1_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c1_i8 : i8
  ^bb83:  // pred: ^bb11
    %c18446744073709551615_i256_129 = arith.constant 18446744073709551615 : i256
    %238 = arith.cmpi sgt, %25, %c18446744073709551615_i256_129 : i256
    %c84_i8_130 = arith.constant 84 : i8
    cf.cond_br %238, ^bb1(%c84_i8_130 : i8), ^bb84
  ^bb84:  // pred: ^bb83
    %239 = arith.trunci %25 : i256 to i64
    %c0_i64_131 = arith.constant 0 : i64
    %240 = arith.cmpi slt, %239, %c0_i64_131 : i64
    %c84_i8_132 = arith.constant 84 : i8
    cf.cond_br %240, ^bb1(%c84_i8_132 : i8), ^bb85
  ^bb85:  // pred: ^bb84
    %241 = arith.addi %239, %c32_i64 : i64
    %c0_i64_133 = arith.constant 0 : i64
    %242 = arith.cmpi slt, %241, %c0_i64_133 : i64
    %c84_i8_134 = arith.constant 84 : i8
    cf.cond_br %242, ^bb1(%c84_i8_134 : i8), ^bb86
  ^bb86:  // pred: ^bb85
    %c31_i64 = arith.constant 31 : i64
    %c32_i64_135 = arith.constant 32 : i64
    %243 = arith.addi %241, %c31_i64 : i64
    %244 = arith.divui %243, %c32_i64_135 : i64
    %c32_i64_136 = arith.constant 32 : i64
    %245 = arith.muli %244, %c32_i64_136 : i64
    %246 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    %247 = llvm.load %246 : !llvm.ptr -> i64
    %c31_i64_137 = arith.constant 31 : i64
    %c32_i64_138 = arith.constant 32 : i64
    %248 = arith.addi %247, %c31_i64_137 : i64
    %249 = arith.divui %248, %c32_i64_138 : i64
    %250 = arith.muli %249, %c32_i64_136 : i64
    %251 = arith.cmpi ult, %250, %245 : i64
    cf.cond_br %251, ^bb88, ^bb87
  ^bb87:  // 2 preds: ^bb86, ^bb90
    cf.br ^bb12
  ^bb88:  // pred: ^bb86
    %c3_i64_139 = arith.constant 3 : i64
    %c512_i64 = arith.constant 512 : i64
    %252 = arith.muli %249, %249 : i64
    %253 = arith.divui %252, %c512_i64 : i64
    %254 = arith.muli %249, %c3_i64_139 : i64
    %255 = arith.addi %253, %254 : i64
    %c3_i64_140 = arith.constant 3 : i64
    %c512_i64_141 = arith.constant 512 : i64
    %256 = arith.muli %244, %244 : i64
    %257 = arith.divui %256, %c512_i64_141 : i64
    %258 = arith.muli %244, %c3_i64_140 : i64
    %259 = arith.addi %257, %258 : i64
    %260 = arith.subi %259, %255 : i64
    %261 = llvm.load %arg1 : !llvm.ptr -> i64
    %262 = arith.cmpi ult, %261, %260 : i64
    scf.if %262 {
    } else {
      %409 = arith.subi %261, %260 : i64
      llvm.store %409, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_142 = arith.constant 80 : i8
    cf.cond_br %262, ^bb1(%c80_i8_142 : i8), ^bb89
  ^bb89:  // pred: ^bb88
    %263 = call @dora_fn_extend_memory(%arg0, %245) : (!llvm.ptr, i64) -> !llvm.ptr
    %264 = llvm.getelementptr %263[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %265 = llvm.load %264 : !llvm.ptr -> !llvm.ptr
    %266 = llvm.getelementptr %263[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %267 = llvm.load %266 : !llvm.ptr -> i8
    %c0_i8_143 = arith.constant 0 : i8
    %268 = arith.cmpi ne, %267, %c0_i8_143 : i8
    cf.cond_br %268, ^bb1(%267 : i8), ^bb90
  ^bb90:  // pred: ^bb89
    %269 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    llvm.store %265, %269 : !llvm.ptr, !llvm.ptr
    %270 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %245, %270 : i64, !llvm.ptr
    cf.br ^bb87
  ^bb91:  // pred: ^bb24
    %c18446744073709551615_i256_144 = arith.constant 18446744073709551615 : i256
    %271 = arith.cmpi sgt, %63, %c18446744073709551615_i256_144 : i256
    %c84_i8_145 = arith.constant 84 : i8
    cf.cond_br %271, ^bb1(%c84_i8_145 : i8), ^bb92
  ^bb92:  // pred: ^bb91
    %272 = arith.trunci %63 : i256 to i64
    %c0_i64_146 = arith.constant 0 : i64
    %273 = arith.cmpi slt, %272, %c0_i64_146 : i64
    %c84_i8_147 = arith.constant 84 : i8
    cf.cond_br %273, ^bb1(%c84_i8_147 : i8), ^bb93
  ^bb93:  // pred: ^bb92
    %274 = arith.addi %272, %c32_i64_29 : i64
    %c0_i64_148 = arith.constant 0 : i64
    %275 = arith.cmpi slt, %274, %c0_i64_148 : i64
    %c84_i8_149 = arith.constant 84 : i8
    cf.cond_br %275, ^bb1(%c84_i8_149 : i8), ^bb94
  ^bb94:  // pred: ^bb93
    %c31_i64_150 = arith.constant 31 : i64
    %c32_i64_151 = arith.constant 32 : i64
    %276 = arith.addi %274, %c31_i64_150 : i64
    %277 = arith.divui %276, %c32_i64_151 : i64
    %c32_i64_152 = arith.constant 32 : i64
    %278 = arith.muli %277, %c32_i64_152 : i64
    %279 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    %280 = llvm.load %279 : !llvm.ptr -> i64
    %c31_i64_153 = arith.constant 31 : i64
    %c32_i64_154 = arith.constant 32 : i64
    %281 = arith.addi %280, %c31_i64_153 : i64
    %282 = arith.divui %281, %c32_i64_154 : i64
    %283 = arith.muli %282, %c32_i64_152 : i64
    %284 = arith.cmpi ult, %283, %278 : i64
    cf.cond_br %284, ^bb96, ^bb95
  ^bb95:  // 2 preds: ^bb94, ^bb98
    cf.br ^bb25
  ^bb96:  // pred: ^bb94
    %c3_i64_155 = arith.constant 3 : i64
    %c512_i64_156 = arith.constant 512 : i64
    %285 = arith.muli %282, %282 : i64
    %286 = arith.divui %285, %c512_i64_156 : i64
    %287 = arith.muli %282, %c3_i64_155 : i64
    %288 = arith.addi %286, %287 : i64
    %c3_i64_157 = arith.constant 3 : i64
    %c512_i64_158 = arith.constant 512 : i64
    %289 = arith.muli %277, %277 : i64
    %290 = arith.divui %289, %c512_i64_158 : i64
    %291 = arith.muli %277, %c3_i64_157 : i64
    %292 = arith.addi %290, %291 : i64
    %293 = arith.subi %292, %288 : i64
    %294 = llvm.load %arg1 : !llvm.ptr -> i64
    %295 = arith.cmpi ult, %294, %293 : i64
    scf.if %295 {
    } else {
      %409 = arith.subi %294, %293 : i64
      llvm.store %409, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_159 = arith.constant 80 : i8
    cf.cond_br %295, ^bb1(%c80_i8_159 : i8), ^bb97
  ^bb97:  // pred: ^bb96
    %296 = call @dora_fn_extend_memory(%arg0, %278) : (!llvm.ptr, i64) -> !llvm.ptr
    %297 = llvm.getelementptr %296[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %298 = llvm.load %297 : !llvm.ptr -> !llvm.ptr
    %299 = llvm.getelementptr %296[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %300 = llvm.load %299 : !llvm.ptr -> i8
    %c0_i8_160 = arith.constant 0 : i8
    %301 = arith.cmpi ne, %300, %c0_i8_160 : i8
    cf.cond_br %301, ^bb1(%300 : i8), ^bb98
  ^bb98:  // pred: ^bb97
    %302 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    llvm.store %298, %302 : !llvm.ptr, !llvm.ptr
    %303 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %278, %303 : i64, !llvm.ptr
    cf.br ^bb95
  ^bb99:  // pred: ^bb44
    %c49152_i64 = arith.constant 49152 : i64
    %304 = arith.cmpi ugt, %122, %c49152_i64 : i64
    %c100_i8 = arith.constant 100 : i8
    cf.cond_br %304, ^bb1(%c100_i8 : i8), ^bb100
  ^bb100:  // pred: ^bb99
    %c31_i64_161 = arith.constant 31 : i64
    %c32_i64_162 = arith.constant 32 : i64
    %305 = arith.addi %122, %c31_i64_161 : i64
    %306 = arith.divui %305, %c32_i64_162 : i64
    %c2_i64_163 = arith.constant 2 : i64
    %307 = arith.muli %306, %c2_i64_163 : i64
    %308 = llvm.load %arg1 : !llvm.ptr -> i64
    %309 = arith.cmpi ult, %308, %307 : i64
    scf.if %309 {
    } else {
      %409 = arith.subi %308, %307 : i64
      llvm.store %409, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_164 = arith.constant 80 : i8
    cf.cond_br %309, ^bb1(%c80_i8_164 : i8), ^bb101
  ^bb101:  // pred: ^bb100
    %c18446744073709551615_i256_165 = arith.constant 18446744073709551615 : i256
    %310 = arith.cmpi sgt, %114, %c18446744073709551615_i256_165 : i256
    %c84_i8_166 = arith.constant 84 : i8
    cf.cond_br %310, ^bb1(%c84_i8_166 : i8), ^bb102
  ^bb102:  // pred: ^bb101
    %311 = arith.trunci %114 : i256 to i64
    %c0_i64_167 = arith.constant 0 : i64
    %312 = arith.cmpi slt, %311, %c0_i64_167 : i64
    %c84_i8_168 = arith.constant 84 : i8
    cf.cond_br %312, ^bb1(%c84_i8_168 : i8), ^bb103
  ^bb103:  // pred: ^bb102
    %313 = arith.addi %311, %122 : i64
    %c0_i64_169 = arith.constant 0 : i64
    %314 = arith.cmpi slt, %313, %c0_i64_169 : i64
    %c84_i8_170 = arith.constant 84 : i8
    cf.cond_br %314, ^bb1(%c84_i8_170 : i8), ^bb104
  ^bb104:  // pred: ^bb103
    %c31_i64_171 = arith.constant 31 : i64
    %c32_i64_172 = arith.constant 32 : i64
    %315 = arith.addi %313, %c31_i64_171 : i64
    %316 = arith.divui %315, %c32_i64_172 : i64
    %c32_i64_173 = arith.constant 32 : i64
    %317 = arith.muli %316, %c32_i64_173 : i64
    %318 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    %319 = llvm.load %318 : !llvm.ptr -> i64
    %c31_i64_174 = arith.constant 31 : i64
    %c32_i64_175 = arith.constant 32 : i64
    %320 = arith.addi %319, %c31_i64_174 : i64
    %321 = arith.divui %320, %c32_i64_175 : i64
    %322 = arith.muli %321, %c32_i64_173 : i64
    %323 = arith.cmpi ult, %322, %317 : i64
    cf.cond_br %323, ^bb106, ^bb105
  ^bb105:  // 2 preds: ^bb104, ^bb108
    cf.br ^bb45
  ^bb106:  // pred: ^bb104
    %c3_i64_176 = arith.constant 3 : i64
    %c512_i64_177 = arith.constant 512 : i64
    %324 = arith.muli %321, %321 : i64
    %325 = arith.divui %324, %c512_i64_177 : i64
    %326 = arith.muli %321, %c3_i64_176 : i64
    %327 = arith.addi %325, %326 : i64
    %c3_i64_178 = arith.constant 3 : i64
    %c512_i64_179 = arith.constant 512 : i64
    %328 = arith.muli %316, %316 : i64
    %329 = arith.divui %328, %c512_i64_179 : i64
    %330 = arith.muli %316, %c3_i64_178 : i64
    %331 = arith.addi %329, %330 : i64
    %332 = arith.subi %331, %327 : i64
    %333 = llvm.load %arg1 : !llvm.ptr -> i64
    %334 = arith.cmpi ult, %333, %332 : i64
    scf.if %334 {
    } else {
      %409 = arith.subi %333, %332 : i64
      llvm.store %409, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_180 = arith.constant 80 : i8
    cf.cond_br %334, ^bb1(%c80_i8_180 : i8), ^bb107
  ^bb107:  // pred: ^bb106
    %335 = call @dora_fn_extend_memory(%arg0, %317) : (!llvm.ptr, i64) -> !llvm.ptr
    %336 = llvm.getelementptr %335[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %337 = llvm.load %336 : !llvm.ptr -> !llvm.ptr
    %338 = llvm.getelementptr %335[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %339 = llvm.load %338 : !llvm.ptr -> i8
    %c0_i8_181 = arith.constant 0 : i8
    %340 = arith.cmpi ne, %339, %c0_i8_181 : i8
    cf.cond_br %340, ^bb1(%339 : i8), ^bb108
  ^bb108:  // pred: ^bb107
    %341 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    llvm.store %337, %341 : !llvm.ptr, !llvm.ptr
    %342 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %317, %342 : i64, !llvm.ptr
    cf.br ^bb105
  ^bb109:  // pred: ^bb61
    %c18446744073709551615_i256_182 = arith.constant 18446744073709551615 : i256
    %343 = arith.cmpi sgt, %182, %c18446744073709551615_i256_182 : i256
    %c84_i8_183 = arith.constant 84 : i8
    cf.cond_br %343, ^bb1(%c84_i8_183 : i8), ^bb110
  ^bb110:  // pred: ^bb109
    %344 = arith.trunci %182 : i256 to i64
    %c0_i64_184 = arith.constant 0 : i64
    %345 = arith.cmpi slt, %344, %c0_i64_184 : i64
    %c84_i8_185 = arith.constant 84 : i8
    cf.cond_br %345, ^bb1(%c84_i8_185 : i8), ^bb111
  ^bb111:  // pred: ^bb110
    %346 = arith.addi %344, %c32_i64_92 : i64
    %c0_i64_186 = arith.constant 0 : i64
    %347 = arith.cmpi slt, %346, %c0_i64_186 : i64
    %c84_i8_187 = arith.constant 84 : i8
    cf.cond_br %347, ^bb1(%c84_i8_187 : i8), ^bb112
  ^bb112:  // pred: ^bb111
    %c31_i64_188 = arith.constant 31 : i64
    %c32_i64_189 = arith.constant 32 : i64
    %348 = arith.addi %346, %c31_i64_188 : i64
    %349 = arith.divui %348, %c32_i64_189 : i64
    %c32_i64_190 = arith.constant 32 : i64
    %350 = arith.muli %349, %c32_i64_190 : i64
    %351 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    %352 = llvm.load %351 : !llvm.ptr -> i64
    %c31_i64_191 = arith.constant 31 : i64
    %c32_i64_192 = arith.constant 32 : i64
    %353 = arith.addi %352, %c31_i64_191 : i64
    %354 = arith.divui %353, %c32_i64_192 : i64
    %355 = arith.muli %354, %c32_i64_190 : i64
    %356 = arith.cmpi ult, %355, %350 : i64
    cf.cond_br %356, ^bb114, ^bb113
  ^bb113:  // 2 preds: ^bb112, ^bb116
    cf.br ^bb62
  ^bb114:  // pred: ^bb112
    %c3_i64_193 = arith.constant 3 : i64
    %c512_i64_194 = arith.constant 512 : i64
    %357 = arith.muli %354, %354 : i64
    %358 = arith.divui %357, %c512_i64_194 : i64
    %359 = arith.muli %354, %c3_i64_193 : i64
    %360 = arith.addi %358, %359 : i64
    %c3_i64_195 = arith.constant 3 : i64
    %c512_i64_196 = arith.constant 512 : i64
    %361 = arith.muli %349, %349 : i64
    %362 = arith.divui %361, %c512_i64_196 : i64
    %363 = arith.muli %349, %c3_i64_195 : i64
    %364 = arith.addi %362, %363 : i64
    %365 = arith.subi %364, %360 : i64
    %366 = llvm.load %arg1 : !llvm.ptr -> i64
    %367 = arith.cmpi ult, %366, %365 : i64
    scf.if %367 {
    } else {
      %409 = arith.subi %366, %365 : i64
      llvm.store %409, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_197 = arith.constant 80 : i8
    cf.cond_br %367, ^bb1(%c80_i8_197 : i8), ^bb115
  ^bb115:  // pred: ^bb114
    %368 = call @dora_fn_extend_memory(%arg0, %350) : (!llvm.ptr, i64) -> !llvm.ptr
    %369 = llvm.getelementptr %368[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %370 = llvm.load %369 : !llvm.ptr -> !llvm.ptr
    %371 = llvm.getelementptr %368[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %372 = llvm.load %371 : !llvm.ptr -> i8
    %c0_i8_198 = arith.constant 0 : i8
    %373 = arith.cmpi ne, %372, %c0_i8_198 : i8
    cf.cond_br %373, ^bb1(%372 : i8), ^bb116
  ^bb116:  // pred: ^bb115
    %374 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    llvm.store %370, %374 : !llvm.ptr, !llvm.ptr
    %375 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %350, %375 : i64, !llvm.ptr
    cf.br ^bb113
  ^bb117:  // pred: ^bb76
    %c18446744073709551615_i256_199 = arith.constant 18446744073709551615 : i256
    %376 = arith.cmpi sgt, %220, %c18446744073709551615_i256_199 : i256
    %c84_i8_200 = arith.constant 84 : i8
    cf.cond_br %376, ^bb1(%c84_i8_200 : i8), ^bb118
  ^bb118:  // pred: ^bb117
    %377 = arith.trunci %220 : i256 to i64
    %c0_i64_201 = arith.constant 0 : i64
    %378 = arith.cmpi slt, %377, %c0_i64_201 : i64
    %c84_i8_202 = arith.constant 84 : i8
    cf.cond_br %378, ^bb1(%c84_i8_202 : i8), ^bb119
  ^bb119:  // pred: ^bb118
    %379 = arith.addi %377, %226 : i64
    %c0_i64_203 = arith.constant 0 : i64
    %380 = arith.cmpi slt, %379, %c0_i64_203 : i64
    %c84_i8_204 = arith.constant 84 : i8
    cf.cond_br %380, ^bb1(%c84_i8_204 : i8), ^bb120
  ^bb120:  // pred: ^bb119
    %c31_i64_205 = arith.constant 31 : i64
    %c32_i64_206 = arith.constant 32 : i64
    %381 = arith.addi %379, %c31_i64_205 : i64
    %382 = arith.divui %381, %c32_i64_206 : i64
    %c32_i64_207 = arith.constant 32 : i64
    %383 = arith.muli %382, %c32_i64_207 : i64
    %384 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    %385 = llvm.load %384 : !llvm.ptr -> i64
    %c31_i64_208 = arith.constant 31 : i64
    %c32_i64_209 = arith.constant 32 : i64
    %386 = arith.addi %385, %c31_i64_208 : i64
    %387 = arith.divui %386, %c32_i64_209 : i64
    %388 = arith.muli %387, %c32_i64_207 : i64
    %389 = arith.cmpi ult, %388, %383 : i64
    cf.cond_br %389, ^bb122, ^bb121
  ^bb121:  // 2 preds: ^bb120, ^bb124
    cf.br ^bb77
  ^bb122:  // pred: ^bb120
    %c3_i64_210 = arith.constant 3 : i64
    %c512_i64_211 = arith.constant 512 : i64
    %390 = arith.muli %387, %387 : i64
    %391 = arith.divui %390, %c512_i64_211 : i64
    %392 = arith.muli %387, %c3_i64_210 : i64
    %393 = arith.addi %391, %392 : i64
    %c3_i64_212 = arith.constant 3 : i64
    %c512_i64_213 = arith.constant 512 : i64
    %394 = arith.muli %382, %382 : i64
    %395 = arith.divui %394, %c512_i64_213 : i64
    %396 = arith.muli %382, %c3_i64_212 : i64
    %397 = arith.addi %395, %396 : i64
    %398 = arith.subi %397, %393 : i64
    %399 = llvm.load %arg1 : !llvm.ptr -> i64
    %400 = arith.cmpi ult, %399, %398 : i64
    scf.if %400 {
    } else {
      %409 = arith.subi %399, %398 : i64
      llvm.store %409, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_214 = arith.constant 80 : i8
    cf.cond_br %400, ^bb1(%c80_i8_214 : i8), ^bb123
  ^bb123:  // pred: ^bb122
    %401 = call @dora_fn_extend_memory(%arg0, %383) : (!llvm.ptr, i64) -> !llvm.ptr
    %402 = llvm.getelementptr %401[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %403 = llvm.load %402 : !llvm.ptr -> !llvm.ptr
    %404 = llvm.getelementptr %401[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %405 = llvm.load %404 : !llvm.ptr -> i8
    %c0_i8_215 = arith.constant 0 : i8
    %406 = arith.cmpi ne, %405, %c0_i8_215 : i8
    cf.cond_br %406, ^bb1(%405 : i8), ^bb124
  ^bb124:  // pred: ^bb123
    %407 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    llvm.store %403, %407 : !llvm.ptr, !llvm.ptr
    %408 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %383, %408 : i64, !llvm.ptr
    cf.br ^bb121
  }
}
