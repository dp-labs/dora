---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
---
module {
  llvm.mlir.global internal @dora_stack_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_memory_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_memory_size() {addr_space = 0 : i32} : i32
  llvm.mlir.global internal @dora_calldata_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_calldata_size() {addr_space = 0 : i32} : i32
  llvm.mlir.global internal @dora_gas_counter() {addr_space = 0 : i32} : i64
  func.func private @dora_debug_print(i32)
  func.func private @dora_write_result(!llvm.ptr, i32, i32, i64, i8)
  func.func private @dora_keccak256_hasher(!llvm.ptr, i32, i32, !llvm.ptr)
  func.func private @dora_get_calldata_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_get_calldata_size(!llvm.ptr) -> i32
  func.func private @dora_get_chainid(!llvm.ptr) -> i64
  func.func private @dora_store_in_callvalue_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_caller_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_get_gaslimit(!llvm.ptr) -> i64
  func.func private @dora_extend_memory(!llvm.ptr, i32) -> !llvm.ptr
  func.func private @dora_copy_code_to_memory(!llvm.ptr, i32, i32, i32)
  func.func private @dora_read_storage(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_write_storage(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> i64
  func.func private @dora_append_log(!llvm.ptr, i32, i32)
  func.func private @dora_append_log_with_one_topic(!llvm.ptr, i32, i32, !llvm.ptr)
  func.func private @dora_append_log_with_two_topics(!llvm.ptr, i32, i32, !llvm.ptr, !llvm.ptr)
  func.func private @dora_append_log_with_three_topics(!llvm.ptr, i32, i32, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_append_log_with_four_topics(!llvm.ptr, i32, i32, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_get_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_get_coinbase_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_get_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_get_codesize_from_address(!llvm.ptr, !llvm.ptr) -> i64
  func.func private @dora_get_address_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_get_prevrandao(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_call(!llvm.ptr, i64, !llvm.ptr, !llvm.ptr, i32, i32, i32, i32, i64, !llvm.ptr, i8) -> i8
  func.func private @dora_store_in_balance(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_copy_ext_code_to_memory(!llvm.ptr, !llvm.ptr, i32, i32, i32)
  func.func private @dora_get_blob_hash_at_index(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_get_block_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_get_code_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_create(!llvm.ptr, i32, i32, !llvm.ptr, !llvm.ptr) -> i8
  func.func private @dora_create2(!llvm.ptr, i32, i32, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
  func.func private @dora_get_return_data_size(!llvm.ptr) -> i32
  func.func private @dora_copy_return_data_into_memory(!llvm.ptr, i32, i32, i32)
  func.func private @dora_selfdestruct(!llvm.ptr, !llvm.ptr) -> i64
  func.func private @dora_transient_storage_read(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_transient_storage_write(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func public @main(%arg0: !llvm.ptr, %arg1: i64) -> i8 attributes {llvm.emit_c_interface} {
    %c1024_i256 = arith.constant 1024 : i256
    %0 = llvm.alloca %c1024_i256 x i256 : (i256) -> !llvm.ptr
    %1 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    llvm.store %0, %1 : !llvm.ptr, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %2 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = call @dora_get_calldata_ptr(%arg0) : (!llvm.ptr) -> !llvm.ptr
    %4 = llvm.mlir.addressof @dora_calldata_ptr : !llvm.ptr
    llvm.store %3, %4 : !llvm.ptr, !llvm.ptr
    %5 = call @dora_get_calldata_size(%arg0) : (!llvm.ptr) -> i32
    %6 = llvm.mlir.addressof @dora_calldata_size : !llvm.ptr
    llvm.store %5, %6 : i32, !llvm.ptr
    %7 = llvm.mlir.addressof @dora_gas_counter : !llvm.ptr
    llvm.store %arg1, %7 : i64, !llvm.ptr
    cf.br ^bb3
  ^bb1:  // 2 preds: ^bb2, ^bb12
    %c0_i32_0 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %c3_i8 = arith.constant 3 : i8
    call @dora_write_result(%arg0, %c0_i32_0, %c0_i32_0, %c0_i64, %c3_i8) : (!llvm.ptr, i32, i32, i64, i8) -> ()
    return %c3_i8 : i8
  ^bb2(%8: i256):  // no predecessors
    cf.switch %8 : i256, [
      default: ^bb1
    ]
  ^bb3:  // pred: ^bb0
    %c170141183460469231731687303715884105727_i256 = arith.constant 170141183460469231731687303715884105727 : i256
    %9 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    llvm.store %c170141183460469231731687303715884105727_i256, %10 : i256, !llvm.ptr
    %11 = llvm.getelementptr %10[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %11, %9 : !llvm.ptr, !llvm.ptr
    cf.br ^bb4
  ^bb4:  // pred: ^bb3
    %c0_i256 = arith.constant 0 : i256
    %12 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256, %13 : i256, !llvm.ptr
    %14 = llvm.getelementptr %13[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %14, %12 : !llvm.ptr, !llvm.ptr
    cf.br ^bb5
  ^bb5:  // pred: ^bb4
    %15 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %16 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.getelementptr %16[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %18 = llvm.load %17 : !llvm.ptr -> i256
    llvm.store %17, %15 : !llvm.ptr, !llvm.ptr
    %19 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %20 = llvm.load %19 : !llvm.ptr -> !llvm.ptr
    %21 = llvm.getelementptr %20[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %22 = llvm.load %21 : !llvm.ptr -> i256
    llvm.store %21, %19 : !llvm.ptr, !llvm.ptr
    %23 = arith.trunci %18 : i256 to i32
    %c32_i32 = arith.constant 32 : i32
    %24 = arith.addi %23, %c32_i32 : i32
    %25 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    %26 = llvm.load %25 : !llvm.ptr -> i32
    %c31_i32 = arith.constant 31 : i32
    %c32_i32_1 = arith.constant 32 : i32
    %27 = arith.addi %24, %c31_i32 : i32
    %28 = arith.divui %27, %c32_i32_1 : i32
    %29 = arith.muli %28, %c32_i32_1 : i32
    %30 = arith.cmpi ult, %26, %29 : i32
    scf.if %30 {
      %159 = func.call @dora_extend_memory(%arg0, %29) : (!llvm.ptr, i32) -> !llvm.ptr
      llvm.store %29, %25 : i32, !llvm.ptr
      %160 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
      llvm.store %159, %160 : !llvm.ptr, !llvm.ptr
    } else {
    }
    %31 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
    %32 = llvm.load %31 : !llvm.ptr -> !llvm.ptr
    %33 = llvm.getelementptr %32[%23] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %34 = llvm.intr.bswap(%22)  : (i256) -> i256
    llvm.store %34, %33 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb6
  ^bb6:  // pred: ^bb5
    %c170141183460469231731687303715884105727_i256_2 = arith.constant 170141183460469231731687303715884105727 : i256
    %35 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %36 = llvm.load %35 : !llvm.ptr -> !llvm.ptr
    llvm.store %c170141183460469231731687303715884105727_i256_2, %36 : i256, !llvm.ptr
    %37 = llvm.getelementptr %36[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %37, %35 : !llvm.ptr, !llvm.ptr
    cf.br ^bb7
  ^bb7:  // pred: ^bb6
    %c32_i256 = arith.constant 32 : i256
    %38 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %39 = llvm.load %38 : !llvm.ptr -> !llvm.ptr
    llvm.store %c32_i256, %39 : i256, !llvm.ptr
    %40 = llvm.getelementptr %39[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %40, %38 : !llvm.ptr, !llvm.ptr
    cf.br ^bb8
  ^bb8:  // pred: ^bb7
    %41 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %42 = llvm.load %41 : !llvm.ptr -> !llvm.ptr
    %43 = llvm.getelementptr %42[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %44 = llvm.load %43 : !llvm.ptr -> i256
    llvm.store %43, %41 : !llvm.ptr, !llvm.ptr
    %45 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %46 = llvm.load %45 : !llvm.ptr -> !llvm.ptr
    %47 = llvm.getelementptr %46[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %48 = llvm.load %47 : !llvm.ptr -> i256
    llvm.store %47, %45 : !llvm.ptr, !llvm.ptr
    %49 = arith.trunci %44 : i256 to i32
    %c32_i32_3 = arith.constant 32 : i32
    %50 = arith.addi %49, %c32_i32_3 : i32
    %51 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    %52 = llvm.load %51 : !llvm.ptr -> i32
    %c31_i32_4 = arith.constant 31 : i32
    %c32_i32_5 = arith.constant 32 : i32
    %53 = arith.addi %50, %c31_i32_4 : i32
    %54 = arith.divui %53, %c32_i32_5 : i32
    %55 = arith.muli %54, %c32_i32_5 : i32
    %56 = arith.cmpi ult, %52, %55 : i32
    scf.if %56 {
      %159 = func.call @dora_extend_memory(%arg0, %55) : (!llvm.ptr, i32) -> !llvm.ptr
      llvm.store %55, %51 : i32, !llvm.ptr
      %160 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
      llvm.store %159, %160 : !llvm.ptr, !llvm.ptr
    } else {
    }
    %57 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
    %58 = llvm.load %57 : !llvm.ptr -> !llvm.ptr
    %59 = llvm.getelementptr %58[%49] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %60 = llvm.intr.bswap(%48)  : (i256) -> i256
    llvm.store %60, %59 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb9
  ^bb9:  // pred: ^bb8
    %c41_i256 = arith.constant 41 : i256
    %61 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %62 = llvm.load %61 : !llvm.ptr -> !llvm.ptr
    llvm.store %c41_i256, %62 : i256, !llvm.ptr
    %63 = llvm.getelementptr %62[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %63, %61 : !llvm.ptr, !llvm.ptr
    cf.br ^bb10
  ^bb10:  // pred: ^bb9
    %c0_i256_6 = arith.constant 0 : i256
    %64 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %65 = llvm.load %64 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_6, %65 : i256, !llvm.ptr
    %66 = llvm.getelementptr %65[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %66, %64 : !llvm.ptr, !llvm.ptr
    cf.br ^bb11
  ^bb11:  // pred: ^bb10
    %c0_i256_7 = arith.constant 0 : i256
    %67 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %68 = llvm.load %67 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_7, %68 : i256, !llvm.ptr
    %69 = llvm.getelementptr %68[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %69, %67 : !llvm.ptr, !llvm.ptr
    cf.br ^bb12
  ^bb12:  // pred: ^bb11
    %70 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %71 = llvm.load %70 : !llvm.ptr -> !llvm.ptr
    %72 = llvm.getelementptr %71[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %73 = llvm.load %72 : !llvm.ptr -> i256
    llvm.store %72, %70 : !llvm.ptr, !llvm.ptr
    %74 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %75 = llvm.load %74 : !llvm.ptr -> !llvm.ptr
    %76 = llvm.getelementptr %75[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %77 = llvm.load %76 : !llvm.ptr -> i256
    llvm.store %76, %74 : !llvm.ptr, !llvm.ptr
    %78 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %79 = llvm.load %78 : !llvm.ptr -> !llvm.ptr
    %80 = llvm.getelementptr %79[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %81 = llvm.load %80 : !llvm.ptr -> i256
    llvm.store %80, %78 : !llvm.ptr, !llvm.ptr
    %82 = arith.trunci %77 : i256 to i32
    %83 = arith.trunci %81 : i256 to i32
    %84 = arith.addi %82, %83 : i32
    %85 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    %86 = llvm.load %85 : !llvm.ptr -> i32
    %c31_i32_8 = arith.constant 31 : i32
    %c32_i32_9 = arith.constant 32 : i32
    %87 = arith.addi %84, %c31_i32_8 : i32
    %88 = arith.divui %87, %c32_i32_9 : i32
    %89 = arith.muli %88, %c32_i32_9 : i32
    %90 = arith.cmpi ult, %86, %89 : i32
    scf.if %90 {
      %159 = func.call @dora_extend_memory(%arg0, %89) : (!llvm.ptr, i32) -> !llvm.ptr
      llvm.store %89, %85 : i32, !llvm.ptr
      %160 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
      llvm.store %159, %160 : !llvm.ptr, !llvm.ptr
    } else {
    }
    %c1_i256 = arith.constant 1 : i256
    %91 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %73, %91 {alignment = 1 : i64} : i256, !llvm.ptr
    %92 = llvm.mlir.addressof @dora_gas_counter : !llvm.ptr
    %93 = llvm.load %92 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %94 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %93, %94 {alignment = 1 : i64} : i64, !llvm.ptr
    %95 = call @dora_create(%arg0, %83, %82, %91, %94) : (!llvm.ptr, i32, i32, !llvm.ptr, !llvm.ptr) -> i8
    %c0_i8 = arith.constant 0 : i8
    %96 = arith.cmpi eq, %c0_i8, %95 : i8
    %97 = llvm.load %91 : !llvm.ptr -> i256
    cf.cond_br %96, ^bb13, ^bb1
  ^bb13:  // pred: ^bb12
    %98 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %99 = llvm.load %98 : !llvm.ptr -> !llvm.ptr
    llvm.store %97, %99 : i256, !llvm.ptr
    %100 = llvm.getelementptr %99[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %100, %98 : !llvm.ptr, !llvm.ptr
    cf.br ^bb14
  ^bb14:  // pred: ^bb13
    %101 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %102 = llvm.load %101 : !llvm.ptr -> !llvm.ptr
    %103 = llvm.getelementptr %102[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %104 = llvm.load %103 : !llvm.ptr -> i256
    llvm.store %103, %101 : !llvm.ptr, !llvm.ptr
    %c1_i256_10 = arith.constant 1 : i256
    %105 = llvm.alloca %c1_i256_10 x i256 : (i256) -> !llvm.ptr
    llvm.store %104, %105 {alignment = 1 : i64} : i256, !llvm.ptr
    %106 = call @dora_get_codesize_from_address(%arg0, %105) : (!llvm.ptr, !llvm.ptr) -> i64
    %107 = arith.extui %106 : i64 to i256
    %108 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %109 = llvm.load %108 : !llvm.ptr -> !llvm.ptr
    llvm.store %107, %109 : i256, !llvm.ptr
    %110 = llvm.getelementptr %109[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %110, %108 : !llvm.ptr, !llvm.ptr
    cf.br ^bb15
  ^bb15:  // pred: ^bb14
    %c0_i256_11 = arith.constant 0 : i256
    %111 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %112 = llvm.load %111 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_11, %112 : i256, !llvm.ptr
    %113 = llvm.getelementptr %112[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %113, %111 : !llvm.ptr, !llvm.ptr
    cf.br ^bb16
  ^bb16:  // pred: ^bb15
    %114 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %115 = llvm.load %114 : !llvm.ptr -> !llvm.ptr
    %116 = llvm.getelementptr %115[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %117 = llvm.load %116 : !llvm.ptr -> i256
    llvm.store %116, %114 : !llvm.ptr, !llvm.ptr
    %118 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %119 = llvm.load %118 : !llvm.ptr -> !llvm.ptr
    %120 = llvm.getelementptr %119[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %121 = llvm.load %120 : !llvm.ptr -> i256
    llvm.store %120, %118 : !llvm.ptr, !llvm.ptr
    %122 = arith.trunci %117 : i256 to i32
    %c32_i32_12 = arith.constant 32 : i32
    %123 = arith.addi %122, %c32_i32_12 : i32
    %124 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    %125 = llvm.load %124 : !llvm.ptr -> i32
    %c31_i32_13 = arith.constant 31 : i32
    %c32_i32_14 = arith.constant 32 : i32
    %126 = arith.addi %123, %c31_i32_13 : i32
    %127 = arith.divui %126, %c32_i32_14 : i32
    %128 = arith.muli %127, %c32_i32_14 : i32
    %129 = arith.cmpi ult, %125, %128 : i32
    scf.if %129 {
      %159 = func.call @dora_extend_memory(%arg0, %128) : (!llvm.ptr, i32) -> !llvm.ptr
      llvm.store %128, %124 : i32, !llvm.ptr
      %160 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
      llvm.store %159, %160 : !llvm.ptr, !llvm.ptr
    } else {
    }
    %130 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
    %131 = llvm.load %130 : !llvm.ptr -> !llvm.ptr
    %132 = llvm.getelementptr %131[%122] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %133 = llvm.intr.bswap(%121)  : (i256) -> i256
    llvm.store %133, %132 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb17
  ^bb17:  // pred: ^bb16
    %c32_i256_15 = arith.constant 32 : i256
    %134 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %135 = llvm.load %134 : !llvm.ptr -> !llvm.ptr
    llvm.store %c32_i256_15, %135 : i256, !llvm.ptr
    %136 = llvm.getelementptr %135[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %136, %134 : !llvm.ptr, !llvm.ptr
    cf.br ^bb18
  ^bb18:  // pred: ^bb17
    %c0_i256_16 = arith.constant 0 : i256
    %137 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %138 = llvm.load %137 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_16, %138 : i256, !llvm.ptr
    %139 = llvm.getelementptr %138[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %139, %137 : !llvm.ptr, !llvm.ptr
    cf.br ^bb19
  ^bb19:  // pred: ^bb18
    %140 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %141 = llvm.load %140 : !llvm.ptr -> !llvm.ptr
    %142 = llvm.getelementptr %141[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %143 = llvm.load %142 : !llvm.ptr -> i256
    llvm.store %142, %140 : !llvm.ptr, !llvm.ptr
    %144 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %145 = llvm.load %144 : !llvm.ptr -> !llvm.ptr
    %146 = llvm.getelementptr %145[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %147 = llvm.load %146 : !llvm.ptr -> i256
    llvm.store %146, %144 : !llvm.ptr, !llvm.ptr
    %148 = arith.trunci %143 : i256 to i32
    %149 = arith.trunci %147 : i256 to i32
    %150 = arith.addi %149, %148 : i32
    %151 = llvm.mlir.addressof @dora_gas_counter : !llvm.ptr
    %152 = llvm.load %151 : !llvm.ptr -> i64
    %153 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    %154 = llvm.load %153 : !llvm.ptr -> i32
    %c31_i32_17 = arith.constant 31 : i32
    %c32_i32_18 = arith.constant 32 : i32
    %155 = arith.addi %150, %c31_i32_17 : i32
    %156 = arith.divui %155, %c32_i32_18 : i32
    %157 = arith.muli %156, %c32_i32_18 : i32
    %158 = arith.cmpi ult, %154, %157 : i32
    scf.if %158 {
      %159 = func.call @dora_extend_memory(%arg0, %157) : (!llvm.ptr, i32) -> !llvm.ptr
      llvm.store %157, %153 : i32, !llvm.ptr
      %160 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
      llvm.store %159, %160 : !llvm.ptr, !llvm.ptr
    } else {
    }
    %c0_i8_19 = arith.constant 0 : i8
    call @dora_write_result(%arg0, %148, %149, %152, %c0_i8_19) : (!llvm.ptr, i32, i32, i64, i8) -> ()
    return %c0_i8_19 : i8
  ^bb20:  // no predecessors
    cf.br ^bb21
  ^bb21:  // pred: ^bb20
    %c0_i32_20 = arith.constant 0 : i32
    %c1_i8 = arith.constant 1 : i8
    call @dora_write_result(%arg0, %c0_i32_20, %c0_i32_20, %arg1, %c1_i8) : (!llvm.ptr, i32, i32, i64, i8) -> ()
    return %c1_i8 : i8
  }
}
