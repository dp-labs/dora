---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  llvm.mlir.global internal @dora_stack_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_stack_length() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_memory_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_memory_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_calldata_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_calldata_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_gas_counter() {addr_space = 0 : i32} : i64
  llvm.mlir.global external @dora_ctx_is_static() {addr_space = 0 : i32} : !llvm.ptr
  func.func private @dora_debug_print(i32)
  func.func private @dora_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_get_calldata_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_get_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_get_chainid(!llvm.ptr) -> i64
  func.func private @dora_store_in_callvalue_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_caller_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_get_gaslimit(!llvm.ptr) -> i64
  func.func private @dora_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_copy_code_to_memory(!llvm.ptr, i64, i64, i64)
  func.func private @dora_read_storage(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_write_storage(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> i64
  func.func private @dora_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_get_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_get_coinbase_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_get_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_get_codesize_from_address(!llvm.ptr, !llvm.ptr) -> i64
  func.func private @dora_get_address_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_get_prevrandao(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_call(!llvm.ptr, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr, i8) -> i8
  func.func private @dora_store_in_balance(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_copy_ext_code_to_memory(!llvm.ptr, !llvm.ptr, i64, i64, i64)
  func.func private @dora_get_blob_hash_at_index(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_get_block_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_get_code_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_create(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr) -> i8
  func.func private @dora_create2(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
  func.func private @dora_get_return_data_size(!llvm.ptr) -> i64
  func.func private @dora_copy_return_data_into_memory(!llvm.ptr, i64, i64, i64)
  func.func private @dora_selfdestruct(!llvm.ptr, !llvm.ptr) -> i64
  func.func private @dora_transient_storage_read(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_transient_storage_write(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func public @main(%arg0: !llvm.ptr, %arg1: i64) -> i8 attributes {llvm.emit_c_interface} {
    %c1024_i256 = arith.constant 1024 : i256
    %0 = llvm.alloca %c1024_i256 x i256 : (i256) -> !llvm.ptr
    %1 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    llvm.store %0, %1 : !llvm.ptr, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %2 = llvm.mlir.addressof @dora_stack_length : !llvm.ptr
    llvm.store %c0_i64, %2 : i64, !llvm.ptr
    %c0_i64_0 = arith.constant 0 : i64
    %3 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    llvm.store %c0_i64_0, %3 : i64, !llvm.ptr
    %4 = call @dora_get_calldata_ptr(%arg0) : (!llvm.ptr) -> !llvm.ptr
    %5 = llvm.mlir.addressof @dora_calldata_ptr : !llvm.ptr
    llvm.store %4, %5 : !llvm.ptr, !llvm.ptr
    %6 = call @dora_get_calldata_size(%arg0) : (!llvm.ptr) -> i64
    %7 = llvm.mlir.addressof @dora_calldata_size : !llvm.ptr
    llvm.store %6, %7 : i64, !llvm.ptr
    %8 = llvm.mlir.addressof @dora_gas_counter : !llvm.ptr
    llvm.store %arg1, %8 : i64, !llvm.ptr
    %9 = llvm.mlir.addressof @dora_stack_length : !llvm.ptr
    %c1024_i64 = arith.constant 1024 : i64
    cf.br ^bb3
  ^bb1:  // 2 preds: ^bb2, ^bb12
    %c0_i64_1 = arith.constant 0 : i64
    %c3_i8 = arith.constant 3 : i8
    call @dora_write_result(%arg0, %c0_i64_1, %c0_i64_1, %c0_i64_1, %c3_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c3_i8 : i8
  ^bb2(%10: i256):  // no predecessors
    cf.switch %10 : i256, [
      default: ^bb1
    ]
  ^bb3:  // pred: ^bb0
    %c170141183460469231731687303715884105727_i256 = arith.constant 170141183460469231731687303715884105727 : i256
    %11 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    llvm.store %c170141183460469231731687303715884105727_i256, %12 : i256, !llvm.ptr
    %13 = llvm.getelementptr %12[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %13, %11 : !llvm.ptr, !llvm.ptr
    cf.br ^bb4
  ^bb4:  // pred: ^bb3
    %c0_i256 = arith.constant 0 : i256
    %14 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %15 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256, %15 : i256, !llvm.ptr
    %16 = llvm.getelementptr %15[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %16, %14 : !llvm.ptr, !llvm.ptr
    cf.br ^bb5
  ^bb5:  // pred: ^bb4
    %17 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %18 = llvm.load %17 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.getelementptr %18[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %20 = llvm.load %19 : !llvm.ptr -> i256
    llvm.store %19, %17 : !llvm.ptr, !llvm.ptr
    %21 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %22 = llvm.load %21 : !llvm.ptr -> !llvm.ptr
    %23 = llvm.getelementptr %22[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %24 = llvm.load %23 : !llvm.ptr -> i256
    llvm.store %23, %21 : !llvm.ptr, !llvm.ptr
    %25 = arith.trunci %20 : i256 to i64
    %c32_i64 = arith.constant 32 : i64
    %26 = arith.addi %25, %c32_i64 : i64
    %27 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    %28 = llvm.load %27 : !llvm.ptr -> i64
    %c31_i64 = arith.constant 31 : i64
    %c32_i64_2 = arith.constant 32 : i64
    %29 = arith.addi %26, %c31_i64 : i64
    %30 = arith.divui %29, %c32_i64_2 : i64
    %31 = arith.muli %30, %c32_i64_2 : i64
    %32 = arith.cmpi ult, %28, %31 : i64
    scf.if %32 {
      %161 = func.call @dora_extend_memory(%arg0, %31) : (!llvm.ptr, i64) -> !llvm.ptr
      llvm.store %31, %27 : i64, !llvm.ptr
      %162 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
      llvm.store %161, %162 : !llvm.ptr, !llvm.ptr
    } else {
    }
    %33 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
    %34 = llvm.load %33 : !llvm.ptr -> !llvm.ptr
    %35 = llvm.getelementptr %34[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %36 = llvm.intr.bswap(%24)  : (i256) -> i256
    llvm.store %36, %35 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb6
  ^bb6:  // pred: ^bb5
    %c170141183460469231731687303715884105727_i256_3 = arith.constant 170141183460469231731687303715884105727 : i256
    %37 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %38 = llvm.load %37 : !llvm.ptr -> !llvm.ptr
    llvm.store %c170141183460469231731687303715884105727_i256_3, %38 : i256, !llvm.ptr
    %39 = llvm.getelementptr %38[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %39, %37 : !llvm.ptr, !llvm.ptr
    cf.br ^bb7
  ^bb7:  // pred: ^bb6
    %c32_i256 = arith.constant 32 : i256
    %40 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %41 = llvm.load %40 : !llvm.ptr -> !llvm.ptr
    llvm.store %c32_i256, %41 : i256, !llvm.ptr
    %42 = llvm.getelementptr %41[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %42, %40 : !llvm.ptr, !llvm.ptr
    cf.br ^bb8
  ^bb8:  // pred: ^bb7
    %43 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %44 = llvm.load %43 : !llvm.ptr -> !llvm.ptr
    %45 = llvm.getelementptr %44[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %46 = llvm.load %45 : !llvm.ptr -> i256
    llvm.store %45, %43 : !llvm.ptr, !llvm.ptr
    %47 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %48 = llvm.load %47 : !llvm.ptr -> !llvm.ptr
    %49 = llvm.getelementptr %48[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %50 = llvm.load %49 : !llvm.ptr -> i256
    llvm.store %49, %47 : !llvm.ptr, !llvm.ptr
    %51 = arith.trunci %46 : i256 to i64
    %c32_i64_4 = arith.constant 32 : i64
    %52 = arith.addi %51, %c32_i64_4 : i64
    %53 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    %54 = llvm.load %53 : !llvm.ptr -> i64
    %c31_i64_5 = arith.constant 31 : i64
    %c32_i64_6 = arith.constant 32 : i64
    %55 = arith.addi %52, %c31_i64_5 : i64
    %56 = arith.divui %55, %c32_i64_6 : i64
    %57 = arith.muli %56, %c32_i64_6 : i64
    %58 = arith.cmpi ult, %54, %57 : i64
    scf.if %58 {
      %161 = func.call @dora_extend_memory(%arg0, %57) : (!llvm.ptr, i64) -> !llvm.ptr
      llvm.store %57, %53 : i64, !llvm.ptr
      %162 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
      llvm.store %161, %162 : !llvm.ptr, !llvm.ptr
    } else {
    }
    %59 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
    %60 = llvm.load %59 : !llvm.ptr -> !llvm.ptr
    %61 = llvm.getelementptr %60[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %62 = llvm.intr.bswap(%50)  : (i256) -> i256
    llvm.store %62, %61 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb9
  ^bb9:  // pred: ^bb8
    %c41_i256 = arith.constant 41 : i256
    %63 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %64 = llvm.load %63 : !llvm.ptr -> !llvm.ptr
    llvm.store %c41_i256, %64 : i256, !llvm.ptr
    %65 = llvm.getelementptr %64[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %65, %63 : !llvm.ptr, !llvm.ptr
    cf.br ^bb10
  ^bb10:  // pred: ^bb9
    %c0_i256_7 = arith.constant 0 : i256
    %66 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %67 = llvm.load %66 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_7, %67 : i256, !llvm.ptr
    %68 = llvm.getelementptr %67[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %68, %66 : !llvm.ptr, !llvm.ptr
    cf.br ^bb11
  ^bb11:  // pred: ^bb10
    %c0_i256_8 = arith.constant 0 : i256
    %69 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %70 = llvm.load %69 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_8, %70 : i256, !llvm.ptr
    %71 = llvm.getelementptr %70[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %71, %69 : !llvm.ptr, !llvm.ptr
    cf.br ^bb12
  ^bb12:  // pred: ^bb11
    %72 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %73 = llvm.load %72 : !llvm.ptr -> !llvm.ptr
    %74 = llvm.getelementptr %73[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %75 = llvm.load %74 : !llvm.ptr -> i256
    llvm.store %74, %72 : !llvm.ptr, !llvm.ptr
    %76 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %77 = llvm.load %76 : !llvm.ptr -> !llvm.ptr
    %78 = llvm.getelementptr %77[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %79 = llvm.load %78 : !llvm.ptr -> i256
    llvm.store %78, %76 : !llvm.ptr, !llvm.ptr
    %80 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %81 = llvm.load %80 : !llvm.ptr -> !llvm.ptr
    %82 = llvm.getelementptr %81[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %83 = llvm.load %82 : !llvm.ptr -> i256
    llvm.store %82, %80 : !llvm.ptr, !llvm.ptr
    %84 = arith.trunci %79 : i256 to i64
    %85 = arith.trunci %83 : i256 to i64
    %86 = arith.addi %84, %85 : i64
    %87 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    %88 = llvm.load %87 : !llvm.ptr -> i64
    %c31_i64_9 = arith.constant 31 : i64
    %c32_i64_10 = arith.constant 32 : i64
    %89 = arith.addi %86, %c31_i64_9 : i64
    %90 = arith.divui %89, %c32_i64_10 : i64
    %91 = arith.muli %90, %c32_i64_10 : i64
    %92 = arith.cmpi ult, %88, %91 : i64
    scf.if %92 {
      %161 = func.call @dora_extend_memory(%arg0, %91) : (!llvm.ptr, i64) -> !llvm.ptr
      llvm.store %91, %87 : i64, !llvm.ptr
      %162 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
      llvm.store %161, %162 : !llvm.ptr, !llvm.ptr
    } else {
    }
    %c1_i256 = arith.constant 1 : i256
    %93 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %75, %93 {alignment = 1 : i64} : i256, !llvm.ptr
    %94 = llvm.mlir.addressof @dora_gas_counter : !llvm.ptr
    %95 = llvm.load %94 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %96 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %95, %96 {alignment = 1 : i64} : i64, !llvm.ptr
    %97 = call @dora_create(%arg0, %85, %84, %93, %96) : (!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr) -> i8
    %c0_i8 = arith.constant 0 : i8
    %98 = arith.cmpi eq, %c0_i8, %97 : i8
    %99 = llvm.load %93 : !llvm.ptr -> i256
    cf.cond_br %98, ^bb13, ^bb1
  ^bb13:  // pred: ^bb12
    %100 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %101 = llvm.load %100 : !llvm.ptr -> !llvm.ptr
    llvm.store %99, %101 : i256, !llvm.ptr
    %102 = llvm.getelementptr %101[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %102, %100 : !llvm.ptr, !llvm.ptr
    cf.br ^bb14
  ^bb14:  // pred: ^bb13
    %103 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %104 = llvm.load %103 : !llvm.ptr -> !llvm.ptr
    %105 = llvm.getelementptr %104[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %106 = llvm.load %105 : !llvm.ptr -> i256
    llvm.store %105, %103 : !llvm.ptr, !llvm.ptr
    %c1_i256_11 = arith.constant 1 : i256
    %107 = llvm.alloca %c1_i256_11 x i256 : (i256) -> !llvm.ptr
    llvm.store %106, %107 {alignment = 1 : i64} : i256, !llvm.ptr
    %108 = call @dora_get_codesize_from_address(%arg0, %107) : (!llvm.ptr, !llvm.ptr) -> i64
    %109 = arith.extui %108 : i64 to i256
    %110 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %111 = llvm.load %110 : !llvm.ptr -> !llvm.ptr
    llvm.store %109, %111 : i256, !llvm.ptr
    %112 = llvm.getelementptr %111[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %112, %110 : !llvm.ptr, !llvm.ptr
    cf.br ^bb15
  ^bb15:  // pred: ^bb14
    %c0_i256_12 = arith.constant 0 : i256
    %113 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %114 = llvm.load %113 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_12, %114 : i256, !llvm.ptr
    %115 = llvm.getelementptr %114[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %115, %113 : !llvm.ptr, !llvm.ptr
    cf.br ^bb16
  ^bb16:  // pred: ^bb15
    %116 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %117 = llvm.load %116 : !llvm.ptr -> !llvm.ptr
    %118 = llvm.getelementptr %117[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %119 = llvm.load %118 : !llvm.ptr -> i256
    llvm.store %118, %116 : !llvm.ptr, !llvm.ptr
    %120 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %121 = llvm.load %120 : !llvm.ptr -> !llvm.ptr
    %122 = llvm.getelementptr %121[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %123 = llvm.load %122 : !llvm.ptr -> i256
    llvm.store %122, %120 : !llvm.ptr, !llvm.ptr
    %124 = arith.trunci %119 : i256 to i64
    %c32_i64_13 = arith.constant 32 : i64
    %125 = arith.addi %124, %c32_i64_13 : i64
    %126 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    %127 = llvm.load %126 : !llvm.ptr -> i64
    %c31_i64_14 = arith.constant 31 : i64
    %c32_i64_15 = arith.constant 32 : i64
    %128 = arith.addi %125, %c31_i64_14 : i64
    %129 = arith.divui %128, %c32_i64_15 : i64
    %130 = arith.muli %129, %c32_i64_15 : i64
    %131 = arith.cmpi ult, %127, %130 : i64
    scf.if %131 {
      %161 = func.call @dora_extend_memory(%arg0, %130) : (!llvm.ptr, i64) -> !llvm.ptr
      llvm.store %130, %126 : i64, !llvm.ptr
      %162 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
      llvm.store %161, %162 : !llvm.ptr, !llvm.ptr
    } else {
    }
    %132 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
    %133 = llvm.load %132 : !llvm.ptr -> !llvm.ptr
    %134 = llvm.getelementptr %133[%124] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %135 = llvm.intr.bswap(%123)  : (i256) -> i256
    llvm.store %135, %134 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb17
  ^bb17:  // pred: ^bb16
    %c32_i256_16 = arith.constant 32 : i256
    %136 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %137 = llvm.load %136 : !llvm.ptr -> !llvm.ptr
    llvm.store %c32_i256_16, %137 : i256, !llvm.ptr
    %138 = llvm.getelementptr %137[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %138, %136 : !llvm.ptr, !llvm.ptr
    cf.br ^bb18
  ^bb18:  // pred: ^bb17
    %c0_i256_17 = arith.constant 0 : i256
    %139 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %140 = llvm.load %139 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_17, %140 : i256, !llvm.ptr
    %141 = llvm.getelementptr %140[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %141, %139 : !llvm.ptr, !llvm.ptr
    cf.br ^bb19
  ^bb19:  // pred: ^bb18
    %142 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %143 = llvm.load %142 : !llvm.ptr -> !llvm.ptr
    %144 = llvm.getelementptr %143[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %145 = llvm.load %144 : !llvm.ptr -> i256
    llvm.store %144, %142 : !llvm.ptr, !llvm.ptr
    %146 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %147 = llvm.load %146 : !llvm.ptr -> !llvm.ptr
    %148 = llvm.getelementptr %147[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %149 = llvm.load %148 : !llvm.ptr -> i256
    llvm.store %148, %146 : !llvm.ptr, !llvm.ptr
    %150 = arith.trunci %145 : i256 to i64
    %151 = arith.trunci %149 : i256 to i64
    %152 = arith.addi %151, %150 : i64
    %153 = llvm.mlir.addressof @dora_gas_counter : !llvm.ptr
    %154 = llvm.load %153 : !llvm.ptr -> i64
    %155 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    %156 = llvm.load %155 : !llvm.ptr -> i64
    %c31_i64_18 = arith.constant 31 : i64
    %c32_i64_19 = arith.constant 32 : i64
    %157 = arith.addi %152, %c31_i64_18 : i64
    %158 = arith.divui %157, %c32_i64_19 : i64
    %159 = arith.muli %158, %c32_i64_19 : i64
    %160 = arith.cmpi ult, %156, %159 : i64
    scf.if %160 {
      %161 = func.call @dora_extend_memory(%arg0, %159) : (!llvm.ptr, i64) -> !llvm.ptr
      llvm.store %159, %155 : i64, !llvm.ptr
      %162 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
      llvm.store %161, %162 : !llvm.ptr, !llvm.ptr
    } else {
    }
    %c0_i8_20 = arith.constant 0 : i8
    call @dora_write_result(%arg0, %150, %151, %154, %c0_i8_20) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c0_i8_20 : i8
  ^bb20:  // no predecessors
    cf.br ^bb21
  ^bb21:  // pred: ^bb20
    %c0_i64_21 = arith.constant 0 : i64
    %c1_i8 = arith.constant 1 : i8
    call @dora_write_result(%arg0, %c0_i64_21, %c0_i64_21, %arg1, %c1_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c1_i8 : i8
  }
}
