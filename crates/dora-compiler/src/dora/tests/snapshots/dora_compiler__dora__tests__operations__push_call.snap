---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  llvm.mlir.global internal @dora_global_stack_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_stack_length() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_memory_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_memory_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_calldata_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_calldata_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_gas_counter() {addr_space = 0 : i32} : i64
  llvm.mlir.global external @dora_global_ctx_is_static() {addr_space = 0 : i32} : !llvm.ptr
  func.func private @dora_fn_debug_print(i32)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_chainid(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_gaslimit(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_code_copy(!llvm.ptr, i64, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_call(!llvm.ptr, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr, i8) -> !llvm.ptr
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, i64, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_size(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_copy(!llvm.ptr, i64, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_transient_storage_read(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_transient_storage_write(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func public @main(%arg0: !llvm.ptr, %arg1: i64) -> i8 attributes {llvm.emit_c_interface} {
    %c1024_i256 = arith.constant 1024 : i256
    %0 = llvm.alloca %c1024_i256 x i256 : (i256) -> !llvm.ptr
    %1 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    llvm.store %0, %1 : !llvm.ptr, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %2 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    llvm.store %c0_i64, %2 : i64, !llvm.ptr
    %c0_i64_0 = arith.constant 0 : i64
    %3 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %c0_i64_0, %3 : i64, !llvm.ptr
    %4 = call @dora_fn_calldata(%arg0) : (!llvm.ptr) -> !llvm.ptr
    %5 = llvm.mlir.addressof @dora_global_calldata_ptr : !llvm.ptr
    llvm.store %4, %5 : !llvm.ptr, !llvm.ptr
    %6 = call @dora_fn_calldata_size(%arg0) : (!llvm.ptr) -> i64
    %7 = llvm.mlir.addressof @dora_global_calldata_size : !llvm.ptr
    llvm.store %6, %7 : i64, !llvm.ptr
    %8 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    llvm.store %arg1, %8 : i64, !llvm.ptr
    cf.br ^bb5
  ^bb1(%9: i8):  // 30 preds: ^bb2, ^bb4, ^bb5, ^bb8, ^bb9, ^bb12, ^bb13, ^bb16, ^bb17, ^bb20, ^bb21, ^bb24, ^bb25, ^bb28, ^bb29, ^bb31, ^bb32, ^bb33, ^bb34, ^bb35, ^bb36, ^bb37, ^bb38, ^bb39, ^bb40, ^bb41, ^bb42, ^bb43, ^bb45, ^bb46
    %c0_i64_1 = arith.constant 0 : i64
    %10 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %11 = llvm.load %10 : !llvm.ptr -> i64
    %12 = call @dora_fn_write_result(%arg0, %c0_i64_1, %c0_i64_1, %11, %9) : (!llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
    return %9 : i8
  ^bb2(%13: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %13 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3:  // pred: ^bb4
    %c10000_i256 = arith.constant 10000 : i256
    %14 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %15 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    llvm.store %c10000_i256, %15 : i256, !llvm.ptr
    %16 = llvm.getelementptr %15[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %16, %14 : !llvm.ptr, !llvm.ptr
    cf.br ^bb9
  ^bb4:  // pred: ^bb6
    %17 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64 = arith.constant 1024 : i64
    %18 = llvm.load %17 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %19 = arith.addi %18, %c1_i64 : i64
    llvm.store %19, %17 : i64, !llvm.ptr
    %20 = arith.cmpi ult, %c1024_i64, %19 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %20, ^bb1(%c92_i8 : i8), ^bb3
  ^bb5:  // pred: ^bb0
    %21 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %22 = llvm.load %21 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    %23 = arith.cmpi uge, %22, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %23, ^bb6, ^bb1(%c80_i8 : i8)
  ^bb6:  // pred: ^bb5
    %24 = arith.subi %22, %c3_i64 : i64
    llvm.store %24, %21 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb7:  // pred: ^bb8
    %c4096_i256 = arith.constant 4096 : i256
    %25 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %26 = llvm.load %25 : !llvm.ptr -> !llvm.ptr
    llvm.store %c4096_i256, %26 : i256, !llvm.ptr
    %27 = llvm.getelementptr %26[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %27, %25 : !llvm.ptr, !llvm.ptr
    cf.br ^bb13
  ^bb8:  // pred: ^bb10
    %28 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_2 = arith.constant 1024 : i64
    %29 = llvm.load %28 : !llvm.ptr -> i64
    %c1_i64_3 = arith.constant 1 : i64
    %30 = arith.addi %29, %c1_i64_3 : i64
    llvm.store %30, %28 : i64, !llvm.ptr
    %31 = arith.cmpi ult, %c1024_i64_2, %30 : i64
    %c92_i8_4 = arith.constant 92 : i8
    cf.cond_br %31, ^bb1(%c92_i8_4 : i8), ^bb7
  ^bb9:  // pred: ^bb3
    %32 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %33 = llvm.load %32 : !llvm.ptr -> i64
    %c3_i64_5 = arith.constant 3 : i64
    %34 = arith.cmpi uge, %33, %c3_i64_5 : i64
    %c80_i8_6 = arith.constant 80 : i8
    cf.cond_br %34, ^bb10, ^bb1(%c80_i8_6 : i8)
  ^bb10:  // pred: ^bb9
    %35 = arith.subi %33, %c3_i64_5 : i64
    llvm.store %35, %32 : i64, !llvm.ptr
    cf.br ^bb8
  ^bb11:  // pred: ^bb12
    %c1_i256 = arith.constant 1 : i256
    %36 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %37 = llvm.load %36 : !llvm.ptr -> !llvm.ptr
    llvm.store %c1_i256, %37 : i256, !llvm.ptr
    %38 = llvm.getelementptr %37[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %38, %36 : !llvm.ptr, !llvm.ptr
    cf.br ^bb17
  ^bb12:  // pred: ^bb14
    %39 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_7 = arith.constant 1024 : i64
    %40 = llvm.load %39 : !llvm.ptr -> i64
    %c1_i64_8 = arith.constant 1 : i64
    %41 = arith.addi %40, %c1_i64_8 : i64
    llvm.store %41, %39 : i64, !llvm.ptr
    %42 = arith.cmpi ult, %c1024_i64_7, %41 : i64
    %c92_i8_9 = arith.constant 92 : i8
    cf.cond_br %42, ^bb1(%c92_i8_9 : i8), ^bb11
  ^bb13:  // pred: ^bb7
    %43 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %44 = llvm.load %43 : !llvm.ptr -> i64
    %c3_i64_10 = arith.constant 3 : i64
    %45 = arith.cmpi uge, %44, %c3_i64_10 : i64
    %c80_i8_11 = arith.constant 80 : i8
    cf.cond_br %45, ^bb14, ^bb1(%c80_i8_11 : i8)
  ^bb14:  // pred: ^bb13
    %46 = arith.subi %44, %c3_i64_10 : i64
    llvm.store %46, %43 : i64, !llvm.ptr
    cf.br ^bb12
  ^bb15:  // pred: ^bb16
    %c32_i256 = arith.constant 32 : i256
    %47 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %48 = llvm.load %47 : !llvm.ptr -> !llvm.ptr
    llvm.store %c32_i256, %48 : i256, !llvm.ptr
    %49 = llvm.getelementptr %48[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %49, %47 : !llvm.ptr, !llvm.ptr
    cf.br ^bb21
  ^bb16:  // pred: ^bb18
    %50 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_12 = arith.constant 1024 : i64
    %51 = llvm.load %50 : !llvm.ptr -> i64
    %c1_i64_13 = arith.constant 1 : i64
    %52 = arith.addi %51, %c1_i64_13 : i64
    llvm.store %52, %50 : i64, !llvm.ptr
    %53 = arith.cmpi ult, %c1024_i64_12, %52 : i64
    %c92_i8_14 = arith.constant 92 : i8
    cf.cond_br %53, ^bb1(%c92_i8_14 : i8), ^bb15
  ^bb17:  // pred: ^bb11
    %54 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %55 = llvm.load %54 : !llvm.ptr -> i64
    %c3_i64_15 = arith.constant 3 : i64
    %56 = arith.cmpi uge, %55, %c3_i64_15 : i64
    %c80_i8_16 = arith.constant 80 : i8
    cf.cond_br %56, ^bb18, ^bb1(%c80_i8_16 : i8)
  ^bb18:  // pred: ^bb17
    %57 = arith.subi %55, %c3_i64_15 : i64
    llvm.store %57, %54 : i64, !llvm.ptr
    cf.br ^bb16
  ^bb19:  // pred: ^bb20
    %c32_i256_17 = arith.constant 32 : i256
    %58 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %59 = llvm.load %58 : !llvm.ptr -> !llvm.ptr
    llvm.store %c32_i256_17, %59 : i256, !llvm.ptr
    %60 = llvm.getelementptr %59[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %60, %58 : !llvm.ptr, !llvm.ptr
    cf.br ^bb25
  ^bb20:  // pred: ^bb22
    %61 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_18 = arith.constant 1024 : i64
    %62 = llvm.load %61 : !llvm.ptr -> i64
    %c1_i64_19 = arith.constant 1 : i64
    %63 = arith.addi %62, %c1_i64_19 : i64
    llvm.store %63, %61 : i64, !llvm.ptr
    %64 = arith.cmpi ult, %c1024_i64_18, %63 : i64
    %c92_i8_20 = arith.constant 92 : i8
    cf.cond_br %64, ^bb1(%c92_i8_20 : i8), ^bb19
  ^bb21:  // pred: ^bb15
    %65 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %66 = llvm.load %65 : !llvm.ptr -> i64
    %c3_i64_21 = arith.constant 3 : i64
    %67 = arith.cmpi uge, %66, %c3_i64_21 : i64
    %c80_i8_22 = arith.constant 80 : i8
    cf.cond_br %67, ^bb22, ^bb1(%c80_i8_22 : i8)
  ^bb22:  // pred: ^bb21
    %68 = arith.subi %66, %c3_i64_21 : i64
    llvm.store %68, %65 : i64, !llvm.ptr
    cf.br ^bb20
  ^bb23:  // pred: ^bb24
    %c64_i256 = arith.constant 64 : i256
    %69 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %70 = llvm.load %69 : !llvm.ptr -> !llvm.ptr
    llvm.store %c64_i256, %70 : i256, !llvm.ptr
    %71 = llvm.getelementptr %70[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %71, %69 : !llvm.ptr, !llvm.ptr
    cf.br ^bb29
  ^bb24:  // pred: ^bb26
    %72 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_23 = arith.constant 1024 : i64
    %73 = llvm.load %72 : !llvm.ptr -> i64
    %c1_i64_24 = arith.constant 1 : i64
    %74 = arith.addi %73, %c1_i64_24 : i64
    llvm.store %74, %72 : i64, !llvm.ptr
    %75 = arith.cmpi ult, %c1024_i64_23, %74 : i64
    %c92_i8_25 = arith.constant 92 : i8
    cf.cond_br %75, ^bb1(%c92_i8_25 : i8), ^bb23
  ^bb25:  // pred: ^bb19
    %76 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %77 = llvm.load %76 : !llvm.ptr -> i64
    %c3_i64_26 = arith.constant 3 : i64
    %78 = arith.cmpi uge, %77, %c3_i64_26 : i64
    %c80_i8_27 = arith.constant 80 : i8
    cf.cond_br %78, ^bb26, ^bb1(%c80_i8_27 : i8)
  ^bb26:  // pred: ^bb25
    %79 = arith.subi %77, %c3_i64_26 : i64
    llvm.store %79, %76 : i64, !llvm.ptr
    cf.br ^bb24
  ^bb27:  // pred: ^bb28
    %c64_i256_28 = arith.constant 64 : i256
    %80 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %81 = llvm.load %80 : !llvm.ptr -> !llvm.ptr
    llvm.store %c64_i256_28, %81 : i256, !llvm.ptr
    %82 = llvm.getelementptr %81[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %82, %80 : !llvm.ptr, !llvm.ptr
    cf.br ^bb46
  ^bb28:  // pred: ^bb30
    %83 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_29 = arith.constant 1024 : i64
    %84 = llvm.load %83 : !llvm.ptr -> i64
    %c1_i64_30 = arith.constant 1 : i64
    %85 = arith.addi %84, %c1_i64_30 : i64
    llvm.store %85, %83 : i64, !llvm.ptr
    %86 = arith.cmpi ult, %c1024_i64_29, %85 : i64
    %c92_i8_31 = arith.constant 92 : i8
    cf.cond_br %86, ^bb1(%c92_i8_31 : i8), ^bb27
  ^bb29:  // pred: ^bb23
    %87 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %88 = llvm.load %87 : !llvm.ptr -> i64
    %c3_i64_32 = arith.constant 3 : i64
    %89 = arith.cmpi uge, %88, %c3_i64_32 : i64
    %c80_i8_33 = arith.constant 80 : i8
    cf.cond_br %89, ^bb30, ^bb1(%c80_i8_33 : i8)
  ^bb30:  // pred: ^bb29
    %90 = arith.subi %88, %c3_i64_32 : i64
    llvm.store %90, %87 : i64, !llvm.ptr
    cf.br ^bb28
  ^bb31:  // pred: ^bb45
    %91 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %92 = llvm.load %91 : !llvm.ptr -> !llvm.ptr
    %93 = llvm.getelementptr %92[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %94 = llvm.load %93 : !llvm.ptr -> i256
    llvm.store %93, %91 : !llvm.ptr, !llvm.ptr
    %95 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %96 = llvm.load %95 : !llvm.ptr -> !llvm.ptr
    %97 = llvm.getelementptr %96[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %98 = llvm.load %97 : !llvm.ptr -> i256
    llvm.store %97, %95 : !llvm.ptr, !llvm.ptr
    %99 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %100 = llvm.load %99 : !llvm.ptr -> !llvm.ptr
    %101 = llvm.getelementptr %100[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %102 = llvm.load %101 : !llvm.ptr -> i256
    llvm.store %101, %99 : !llvm.ptr, !llvm.ptr
    %103 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %104 = llvm.load %103 : !llvm.ptr -> !llvm.ptr
    %105 = llvm.getelementptr %104[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %106 = llvm.load %105 : !llvm.ptr -> i256
    llvm.store %105, %103 : !llvm.ptr, !llvm.ptr
    %107 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %108 = llvm.load %107 : !llvm.ptr -> !llvm.ptr
    %109 = llvm.getelementptr %108[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %110 = llvm.load %109 : !llvm.ptr -> i256
    llvm.store %109, %107 : !llvm.ptr, !llvm.ptr
    %111 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %112 = llvm.load %111 : !llvm.ptr -> !llvm.ptr
    %113 = llvm.getelementptr %112[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %114 = llvm.load %113 : !llvm.ptr -> i256
    llvm.store %113, %111 : !llvm.ptr, !llvm.ptr
    %115 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %116 = llvm.load %115 : !llvm.ptr -> !llvm.ptr
    %117 = llvm.getelementptr %116[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %118 = llvm.load %117 : !llvm.ptr -> i256
    llvm.store %117, %115 : !llvm.ptr, !llvm.ptr
    %119 = llvm.mlir.addressof @dora_global_ctx_is_static : !llvm.ptr
    %120 = llvm.load %119 : !llvm.ptr -> i1
    %c0_i256 = arith.constant 0 : i256
    %121 = arith.cmpi ne, %102, %c0_i256 : i256
    %122 = arith.andi %120, %121 : i1
    %c86_i8 = arith.constant 86 : i8
    cf.cond_br %122, ^bb1(%c86_i8 : i8), ^bb32
  ^bb32:  // pred: ^bb31
    %123 = arith.trunci %94 : i256 to i64
    %c0_i64_34 = arith.constant 0 : i64
    %124 = arith.cmpi slt, %123, %c0_i64_34 : i64
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %124, ^bb1(%c84_i8 : i8), ^bb33
  ^bb33:  // pred: ^bb32
    %125 = arith.trunci %106 : i256 to i64
    %c0_i64_35 = arith.constant 0 : i64
    %126 = arith.cmpi slt, %125, %c0_i64_35 : i64
    %c84_i8_36 = arith.constant 84 : i8
    cf.cond_br %126, ^bb1(%c84_i8_36 : i8), ^bb34
  ^bb34:  // pred: ^bb33
    %127 = arith.trunci %110 : i256 to i64
    %c0_i64_37 = arith.constant 0 : i64
    %128 = arith.cmpi slt, %127, %c0_i64_37 : i64
    %c84_i8_38 = arith.constant 84 : i8
    cf.cond_br %128, ^bb1(%c84_i8_38 : i8), ^bb35
  ^bb35:  // pred: ^bb34
    %129 = arith.trunci %114 : i256 to i64
    %c0_i64_39 = arith.constant 0 : i64
    %130 = arith.cmpi slt, %129, %c0_i64_39 : i64
    %c84_i8_40 = arith.constant 84 : i8
    cf.cond_br %130, ^bb1(%c84_i8_40 : i8), ^bb36
  ^bb36:  // pred: ^bb35
    %131 = arith.trunci %118 : i256 to i64
    %c0_i64_41 = arith.constant 0 : i64
    %132 = arith.cmpi slt, %131, %c0_i64_41 : i64
    %c84_i8_42 = arith.constant 84 : i8
    cf.cond_br %132, ^bb1(%c84_i8_42 : i8), ^bb37
  ^bb37:  // pred: ^bb36
    %133 = arith.addi %125, %127 : i64
    %c0_i64_43 = arith.constant 0 : i64
    %134 = arith.cmpi slt, %133, %c0_i64_43 : i64
    %c84_i8_44 = arith.constant 84 : i8
    cf.cond_br %134, ^bb1(%c84_i8_44 : i8), ^bb38
  ^bb38:  // pred: ^bb37
    %c31_i64 = arith.constant 31 : i64
    %c32_i64 = arith.constant 32 : i64
    %135 = arith.addi %133, %c31_i64 : i64
    %136 = arith.divui %135, %c32_i64 : i64
    %c32_i64_45 = arith.constant 32 : i64
    %137 = arith.muli %136, %c32_i64_45 : i64
    %138 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    %139 = llvm.load %138 : !llvm.ptr -> i64
    %c31_i64_46 = arith.constant 31 : i64
    %c32_i64_47 = arith.constant 32 : i64
    %140 = arith.addi %139, %c31_i64_46 : i64
    %141 = arith.divui %140, %c32_i64_47 : i64
    %142 = arith.muli %141, %c32_i64_45 : i64
    %143 = arith.cmpi ult, %142, %137 : i64
    %144 = scf.if %143 -> (i64) {
      %c3_i64_67 = arith.constant 3 : i64
      %c512_i64 = arith.constant 512 : i64
      %206 = arith.muli %141, %141 : i64
      %207 = arith.divui %206, %c512_i64 : i64
      %208 = arith.muli %141, %c3_i64_67 : i64
      %209 = arith.addi %207, %208 : i64
      %c3_i64_68 = arith.constant 3 : i64
      %c512_i64_69 = arith.constant 512 : i64
      %210 = arith.muli %136, %136 : i64
      %211 = arith.divui %210, %c512_i64_69 : i64
      %212 = arith.muli %136, %c3_i64_68 : i64
      %213 = arith.addi %211, %212 : i64
      %214 = arith.subi %213, %209 : i64
      scf.yield %214 : i64
    } else {
      %c0_i64_67 = arith.constant 0 : i64
      scf.yield %c0_i64_67 : i64
    }
    %145 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %146 = llvm.load %145 : !llvm.ptr -> i64
    %147 = arith.cmpi ult, %146, %144 : i64
    scf.if %147 {
    } else {
      %206 = arith.subi %146, %144 : i64
      llvm.store %206, %145 : i64, !llvm.ptr
    }
    %c80_i8_48 = arith.constant 80 : i8
    cf.cond_br %147, ^bb1(%c80_i8_48 : i8), ^bb39
  ^bb39:  // pred: ^bb38
    %148 = call @dora_fn_extend_memory(%arg0, %137) : (!llvm.ptr, i64) -> !llvm.ptr
    %149 = llvm.getelementptr %148[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %150 = llvm.load %149 : !llvm.ptr -> !llvm.ptr
    %151 = llvm.getelementptr %148[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %152 = llvm.load %151 : !llvm.ptr -> i8
    %c0_i8 = arith.constant 0 : i8
    %153 = arith.cmpi ne, %152, %c0_i8 : i8
    cf.cond_br %153, ^bb1(%152 : i8), ^bb40
  ^bb40:  // pred: ^bb39
    %154 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    llvm.store %150, %154 : !llvm.ptr, !llvm.ptr
    %155 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %137, %155 : i64, !llvm.ptr
    %156 = arith.addi %129, %131 : i64
    %c0_i64_49 = arith.constant 0 : i64
    %157 = arith.cmpi slt, %156, %c0_i64_49 : i64
    %c84_i8_50 = arith.constant 84 : i8
    cf.cond_br %157, ^bb1(%c84_i8_50 : i8), ^bb41
  ^bb41:  // pred: ^bb40
    %c31_i64_51 = arith.constant 31 : i64
    %c32_i64_52 = arith.constant 32 : i64
    %158 = arith.addi %156, %c31_i64_51 : i64
    %159 = arith.divui %158, %c32_i64_52 : i64
    %c32_i64_53 = arith.constant 32 : i64
    %160 = arith.muli %159, %c32_i64_53 : i64
    %161 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    %162 = llvm.load %161 : !llvm.ptr -> i64
    %c31_i64_54 = arith.constant 31 : i64
    %c32_i64_55 = arith.constant 32 : i64
    %163 = arith.addi %162, %c31_i64_54 : i64
    %164 = arith.divui %163, %c32_i64_55 : i64
    %165 = arith.muli %164, %c32_i64_53 : i64
    %166 = arith.cmpi ult, %165, %160 : i64
    %167 = scf.if %166 -> (i64) {
      %c3_i64_67 = arith.constant 3 : i64
      %c512_i64 = arith.constant 512 : i64
      %206 = arith.muli %164, %164 : i64
      %207 = arith.divui %206, %c512_i64 : i64
      %208 = arith.muli %164, %c3_i64_67 : i64
      %209 = arith.addi %207, %208 : i64
      %c3_i64_68 = arith.constant 3 : i64
      %c512_i64_69 = arith.constant 512 : i64
      %210 = arith.muli %159, %159 : i64
      %211 = arith.divui %210, %c512_i64_69 : i64
      %212 = arith.muli %159, %c3_i64_68 : i64
      %213 = arith.addi %211, %212 : i64
      %214 = arith.subi %213, %209 : i64
      scf.yield %214 : i64
    } else {
      %c0_i64_67 = arith.constant 0 : i64
      scf.yield %c0_i64_67 : i64
    }
    %168 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %169 = llvm.load %168 : !llvm.ptr -> i64
    %170 = arith.cmpi ult, %169, %167 : i64
    scf.if %170 {
    } else {
      %206 = arith.subi %169, %167 : i64
      llvm.store %206, %168 : i64, !llvm.ptr
    }
    %c80_i8_56 = arith.constant 80 : i8
    cf.cond_br %170, ^bb1(%c80_i8_56 : i8), ^bb42
  ^bb42:  // pred: ^bb41
    %171 = call @dora_fn_extend_memory(%arg0, %160) : (!llvm.ptr, i64) -> !llvm.ptr
    %172 = llvm.getelementptr %171[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %173 = llvm.load %172 : !llvm.ptr -> !llvm.ptr
    %174 = llvm.getelementptr %171[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %175 = llvm.load %174 : !llvm.ptr -> i8
    %c0_i8_57 = arith.constant 0 : i8
    %176 = arith.cmpi ne, %175, %c0_i8_57 : i8
    cf.cond_br %176, ^bb1(%175 : i8), ^bb43
  ^bb43:  // pred: ^bb42
    %177 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    llvm.store %173, %177 : !llvm.ptr, !llvm.ptr
    %178 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %160, %178 : i64, !llvm.ptr
    %179 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %180 = llvm.load %179 : !llvm.ptr -> i64
    %c1_i256_58 = arith.constant 1 : i256
    %181 = llvm.alloca %c1_i256_58 x i256 : (i256) -> !llvm.ptr
    llvm.store %102, %181 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i256_59 = arith.constant 1 : i256
    %182 = llvm.alloca %c1_i256_59 x i256 : (i256) -> !llvm.ptr
    llvm.store %98, %182 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i64_60 = arith.constant 1 : i64
    %183 = llvm.alloca %c1_i64_60 x i64 : (i64) -> !llvm.ptr
    %c0_i8_61 = arith.constant 0 : i8
    %184 = call @dora_fn_call(%arg0, %123, %182, %181, %125, %127, %129, %131, %180, %183, %c0_i8_61) : (!llvm.ptr, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr, i8) -> !llvm.ptr
    %185 = llvm.getelementptr %184[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %186 = llvm.load %185 : !llvm.ptr -> i8
    %187 = llvm.getelementptr %184[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %188 = llvm.load %187 : !llvm.ptr -> i8
    %c0_i8_62 = arith.constant 0 : i8
    %189 = arith.cmpi ne, %188, %c0_i8_62 : i8
    cf.cond_br %189, ^bb1(%188 : i8), ^bb44
  ^bb44:  // pred: ^bb43
    %190 = llvm.load %183 : !llvm.ptr -> i64
    %191 = arith.extui %186 : i8 to i256
    %192 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %193 = llvm.load %192 : !llvm.ptr -> !llvm.ptr
    llvm.store %191, %193 : i256, !llvm.ptr
    %194 = llvm.getelementptr %193[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %194, %192 : !llvm.ptr, !llvm.ptr
    cf.br ^bb48
  ^bb45:  // pred: ^bb47
    %195 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_63 = arith.constant 1024 : i64
    %196 = llvm.load %195 : !llvm.ptr -> i64
    %c-6_i64 = arith.constant -6 : i64
    %197 = arith.addi %196, %c-6_i64 : i64
    llvm.store %197, %195 : i64, !llvm.ptr
    %c7_i64 = arith.constant 7 : i64
    %198 = arith.cmpi ult, %196, %c7_i64 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %198, ^bb1(%c91_i8 : i8), ^bb31
  ^bb46:  // pred: ^bb27
    %199 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %200 = llvm.load %199 : !llvm.ptr -> i64
    %c0_i64_64 = arith.constant 0 : i64
    %201 = arith.cmpi uge, %200, %c0_i64_64 : i64
    %c80_i8_65 = arith.constant 80 : i8
    cf.cond_br %201, ^bb47, ^bb1(%c80_i8_65 : i8)
  ^bb47:  // pred: ^bb46
    %202 = arith.subi %200, %c0_i64_64 : i64
    llvm.store %202, %199 : i64, !llvm.ptr
    cf.br ^bb45
  ^bb48:  // pred: ^bb44
    %c0_i64_66 = arith.constant 0 : i64
    %c1_i8 = arith.constant 1 : i8
    %203 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %204 = llvm.load %203 : !llvm.ptr -> i64
    %205 = call @dora_fn_write_result(%arg0, %c0_i64_66, %c0_i64_66, %204, %c1_i8) : (!llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
    return %c1_i8 : i8
  }
}
