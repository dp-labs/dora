---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  llvm.mlir.global internal @dora_global_memory_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_memory_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_gas_counter() {addr_space = 0 : i32} : i64
  func.func private @dora_fn_nop()
  func.func private @dora_fn_tracing(!llvm.ptr, i8, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_fn_is_static(!llvm.ptr) -> i8
  func.func private @dora_fn_exp(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_chainid(!llvm.ptr) -> i64
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gaslimit_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_code_copy(!llvm.ptr, !llvm.ptr, i64, i64)
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_call(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_returndata_copy(!llvm.ptr, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_tload(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_tstore(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func public @main(%arg0: !llvm.ptr, %arg1: i64, %arg2: !llvm.ptr, %arg3: !llvm.ptr) -> i8 attributes {llvm.emit_c_interface} {
    %c0_i64 = arith.constant 0 : i64
    %0 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %c0_i64, %0 : i64, !llvm.ptr
    %1 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    llvm.store %arg1, %1 : i64, !llvm.ptr
    cf.br ^bb5
  ^bb1(%2: i8):  // 14 preds: ^bb2, ^bb4, ^bb5, ^bb8, ^bb9, ^bb11, ^bb12, ^bb14, ^bb15, ^bb18, ^bb19, ^bb21, ^bb23, ^bb24
    %c0_i64_0 = arith.constant 0 : i64
    %3 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %4 = llvm.load %3 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_0, %c0_i64_0, %4, %2) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %2 : i8
  ^bb2(%5: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %5 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3:  // pred: ^bb4
    %c0_i256 = arith.constant 0 : i256
    %6 = llvm.load %arg3 : !llvm.ptr -> i64
    %7 = llvm.getelementptr %arg2[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64 = arith.constant 1 : i64
    %8 = arith.addi %6, %c1_i64 : i64
    llvm.store %8, %arg3 : i64, !llvm.ptr
    llvm.store %c0_i256, %7 : i256, !llvm.ptr
    cf.br ^bb9
  ^bb4:  // pred: ^bb6
    %c1024_i64 = arith.constant 1024 : i64
    %9 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_1 = arith.constant 1 : i64
    %10 = arith.addi %9, %c1_i64_1 : i64
    %11 = arith.cmpi ult, %c1024_i64, %10 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %11, ^bb1(%c92_i8 : i8), ^bb3
  ^bb5:  // pred: ^bb0
    %12 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %13 = llvm.load %12 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %14 = arith.cmpi uge, %13, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %14, ^bb6, ^bb1(%c80_i8 : i8)
  ^bb6:  // pred: ^bb5
    %15 = arith.subi %13, %c3_i64 : i64
    llvm.store %15, %12 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb7:  // pred: ^bb8
    %c400_i256 = arith.constant 400 : i256
    %16 = llvm.load %arg3 : !llvm.ptr -> i64
    %17 = llvm.getelementptr %arg2[%16] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_2 = arith.constant 1 : i64
    %18 = arith.addi %16, %c1_i64_2 : i64
    llvm.store %18, %arg3 : i64, !llvm.ptr
    llvm.store %c400_i256, %17 : i256, !llvm.ptr
    cf.br ^bb15
  ^bb8:  // pred: ^bb10
    %c1024_i64_3 = arith.constant 1024 : i64
    %19 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_4 = arith.constant 1 : i64
    %20 = arith.addi %19, %c1_i64_4 : i64
    %21 = arith.cmpi ult, %c1024_i64_3, %20 : i64
    %c92_i8_5 = arith.constant 92 : i8
    cf.cond_br %21, ^bb1(%c92_i8_5 : i8), ^bb7
  ^bb9:  // pred: ^bb3
    %22 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %23 = llvm.load %22 : !llvm.ptr -> i64
    %c3_i64_6 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %24 = arith.cmpi uge, %23, %c3_i64_6 : i64
    %c80_i8_7 = arith.constant 80 : i8
    cf.cond_br %24, ^bb10, ^bb1(%c80_i8_7 : i8)
  ^bb10:  // pred: ^bb9
    %25 = arith.subi %23, %c3_i64_6 : i64
    llvm.store %25, %22 : i64, !llvm.ptr
    cf.br ^bb8
  ^bb11:  // pred: ^bb14
    %26 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_8 = arith.constant 1 : i64
    %27 = arith.subi %26, %c1_i64_8 : i64
    %28 = llvm.getelementptr %arg2[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %27, %arg3 : i64, !llvm.ptr
    %29 = llvm.load %28 : !llvm.ptr -> i256
    %30 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_9 = arith.constant 1 : i64
    %31 = arith.subi %30, %c1_i64_9 : i64
    %32 = llvm.getelementptr %arg2[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %31, %arg3 : i64, !llvm.ptr
    %33 = llvm.load %32 : !llvm.ptr -> i256
    %c1_i256 = arith.constant 1 : i256
    %34 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %29, %34 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i256_10 = arith.constant 1 : i256
    %35 = llvm.alloca %c1_i256_10 x i256 : (i256) -> !llvm.ptr
    llvm.store %33, %35 {alignment = 1 : i64} : i256, !llvm.ptr
    %36 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %37 = llvm.load %36 : !llvm.ptr -> i64
    %38 = call @dora_fn_sstore(%arg0, %34, %35, %37) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
    %39 = llvm.getelementptr %38[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %40 = llvm.load %39 : !llvm.ptr -> i8
    %c0_i8 = arith.constant 0 : i8
    %41 = arith.cmpi ne, %40, %c0_i8 : i8
    cf.cond_br %41, ^bb1(%40 : i8), ^bb12
  ^bb12:  // pred: ^bb11
    %42 = llvm.getelementptr %38[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %43 = llvm.load %42 : !llvm.ptr -> i64
    %44 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %45 = llvm.load %44 : !llvm.ptr -> i64
    %46 = arith.cmpi ult, %45, %43 : i64
    scf.if %46 {
    } else {
      %89 = arith.subi %45, %43 : i64
      llvm.store %89, %44 : i64, !llvm.ptr
    }
    %c80_i8_11 = arith.constant 80 : i8
    cf.cond_br %46, ^bb1(%c80_i8_11 : i8), ^bb13
  ^bb13:  // pred: ^bb12
    cf.br ^bb19
  ^bb14:  // pred: ^bb16
    %c1024_i64_12 = arith.constant 1024 : i64
    %47 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-2_i64 = arith.constant -2 : i64
    %48 = arith.addi %47, %c-2_i64 : i64
    %c2_i64 = arith.constant 2 : i64
    %49 = arith.cmpi ult, %47, %c2_i64 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %49, ^bb1(%c91_i8 : i8), ^bb11
  ^bb15:  // pred: ^bb7
    %50 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %51 = llvm.load %50 : !llvm.ptr -> i64
    %c0_i64_13 = arith.constant 0 : i64
    call @dora_fn_nop() : () -> ()
    %52 = arith.cmpi uge, %51, %c0_i64_13 : i64
    %c80_i8_14 = arith.constant 80 : i8
    cf.cond_br %52, ^bb16, ^bb1(%c80_i8_14 : i8)
  ^bb16:  // pred: ^bb15
    %53 = arith.subi %51, %c0_i64_13 : i64
    llvm.store %53, %50 : i64, !llvm.ptr
    cf.br ^bb14
  ^bb17:  // pred: ^bb18
    %c0_i256_15 = arith.constant 0 : i256
    %54 = llvm.load %arg3 : !llvm.ptr -> i64
    %55 = llvm.getelementptr %arg2[%54] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_16 = arith.constant 1 : i64
    %56 = arith.addi %54, %c1_i64_16 : i64
    llvm.store %56, %arg3 : i64, !llvm.ptr
    llvm.store %c0_i256_15, %55 : i256, !llvm.ptr
    cf.br ^bb24
  ^bb18:  // pred: ^bb20
    %c1024_i64_17 = arith.constant 1024 : i64
    %57 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_18 = arith.constant 1 : i64
    %58 = arith.addi %57, %c1_i64_18 : i64
    %59 = arith.cmpi ult, %c1024_i64_17, %58 : i64
    %c92_i8_19 = arith.constant 92 : i8
    cf.cond_br %59, ^bb1(%c92_i8_19 : i8), ^bb17
  ^bb19:  // pred: ^bb13
    %60 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %61 = llvm.load %60 : !llvm.ptr -> i64
    %c3_i64_20 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %62 = arith.cmpi uge, %61, %c3_i64_20 : i64
    %c80_i8_21 = arith.constant 80 : i8
    cf.cond_br %62, ^bb20, ^bb1(%c80_i8_21 : i8)
  ^bb20:  // pred: ^bb19
    %63 = arith.subi %61, %c3_i64_20 : i64
    llvm.store %63, %60 : i64, !llvm.ptr
    cf.br ^bb18
  ^bb21:  // pred: ^bb23
    %64 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_22 = arith.constant 1 : i64
    %65 = arith.subi %64, %c1_i64_22 : i64
    %66 = llvm.getelementptr %arg2[%65] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %65, %arg3 : i64, !llvm.ptr
    %67 = llvm.load %66 : !llvm.ptr -> i256
    %c1_i256_23 = arith.constant 1 : i256
    %68 = llvm.alloca %c1_i256_23 x i256 : (i256) -> !llvm.ptr
    llvm.store %67, %68 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i256_24 = arith.constant 1 : i256
    %69 = llvm.alloca %c1_i256_24 x i256 : (i256) -> !llvm.ptr
    %70 = call @dora_fn_sload(%arg0, %68, %69) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %71 = llvm.getelementptr %70[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %72 = llvm.load %71 : !llvm.ptr -> i64
    %73 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %74 = llvm.load %73 : !llvm.ptr -> i64
    %75 = arith.cmpi ult, %74, %72 : i64
    scf.if %75 {
    } else {
      %89 = arith.subi %74, %72 : i64
      llvm.store %89, %73 : i64, !llvm.ptr
    }
    %c80_i8_25 = arith.constant 80 : i8
    cf.cond_br %75, ^bb1(%c80_i8_25 : i8), ^bb22
  ^bb22:  // pred: ^bb21
    %76 = llvm.load %69 : !llvm.ptr -> i256
    %77 = llvm.load %arg3 : !llvm.ptr -> i64
    %78 = llvm.getelementptr %arg2[%77] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_26 = arith.constant 1 : i64
    %79 = arith.addi %77, %c1_i64_26 : i64
    llvm.store %79, %arg3 : i64, !llvm.ptr
    llvm.store %76, %78 : i256, !llvm.ptr
    cf.br ^bb26
  ^bb23:  // pred: ^bb25
    %c1024_i64_27 = arith.constant 1024 : i64
    %80 = llvm.load %arg3 : !llvm.ptr -> i64
    %c0_i64_28 = arith.constant 0 : i64
    %81 = arith.addi %80, %c0_i64_28 : i64
    %c1_i64_29 = arith.constant 1 : i64
    %82 = arith.cmpi ult, %80, %c1_i64_29 : i64
    %c91_i8_30 = arith.constant 91 : i8
    cf.cond_br %82, ^bb1(%c91_i8_30 : i8), ^bb21
  ^bb24:  // pred: ^bb17
    %83 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %84 = llvm.load %83 : !llvm.ptr -> i64
    %c0_i64_31 = arith.constant 0 : i64
    call @dora_fn_nop() : () -> ()
    %85 = arith.cmpi uge, %84, %c0_i64_31 : i64
    %c80_i8_32 = arith.constant 80 : i8
    cf.cond_br %85, ^bb25, ^bb1(%c80_i8_32 : i8)
  ^bb25:  // pred: ^bb24
    %86 = arith.subi %84, %c0_i64_31 : i64
    llvm.store %86, %83 : i64, !llvm.ptr
    cf.br ^bb23
  ^bb26:  // pred: ^bb22
    %c0_i64_33 = arith.constant 0 : i64
    %c1_i8 = arith.constant 1 : i8
    %87 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %88 = llvm.load %87 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_33, %c0_i64_33, %88, %c1_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c1_i8 : i8
  }
}
