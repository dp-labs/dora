---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  func.func private @dora_fn_nop()
  func.func private @dora_fn_tracing(!llvm.ptr, i8, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_fn_is_static(!llvm.ptr) -> i8
  func.func private @dora_fn_exp(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_chainid(!llvm.ptr) -> i64
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gaslimit_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_memory_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_memory_size(!llvm.ptr) -> i64
  func.func private @dora_fn_code_copy(!llvm.ptr, !llvm.ptr, i64, i64)
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_call(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_returndata_copy(!llvm.ptr, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_tload(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_tstore(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func public @main(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr) -> i8 attributes {llvm.emit_c_interface} {
    %c0_i64 = arith.constant 0 : i64
    %0 = llvm.alloca %c0_i64 x !llvm.ptr : (i64) -> !llvm.ptr
    llvm.store %arg2, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb5
  ^bb1(%1: i8):  // 36 preds: ^bb2, ^bb4, ^bb5, ^bb8, ^bb9, ^bb13, ^bb14, ^bb17, ^bb18, ^bb21, ^bb22, ^bb25, ^bb26, ^bb28, ^bb29, ^bb30, ^bb32, ^bb33, ^bb34, ^bb36, ^bb37, ^bb39, ^bb41, ^bb42, ^bb45, ^bb46, ^bb47, ^bb50, ^bb51, ^bb53, ^bb54, ^bb55, ^bb56, ^bb57, ^bb60, ^bb61
    %c0_i64_0 = arith.constant 0 : i64
    %2 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_0, %c0_i64_0, %2, %1) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %1 : i8
  ^bb2(%3: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %3 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3:  // pred: ^bb4
    %c7922816251414904634880670302451_i256 = arith.constant 7922816251414904634880670302451 : i256
    %4 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c7922816251414904634880670302451_i256, %4 : i256, !llvm.ptr
    %5 = llvm.getelementptr %4[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %5, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb9
  ^bb4:  // pred: ^bb6
    %c1024_i64 = arith.constant 1024 : i64
    %6 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %7 = arith.addi %6, %c1_i64 : i64
    llvm.store %7, %arg3 : i64, !llvm.ptr
    %8 = arith.cmpi ult, %c1024_i64, %7 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %8, ^bb1(%c92_i8 : i8), ^bb3
  ^bb5:  // pred: ^bb0
    %9 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %10 = arith.cmpi uge, %9, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %10, ^bb6, ^bb1(%c80_i8 : i8)
  ^bb6:  // pred: ^bb5
    %11 = arith.subi %9, %c3_i64 : i64
    llvm.store %11, %arg1 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb7:  // pred: ^bb8
    %c0_i256 = arith.constant 0 : i256
    %12 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256, %12 : i256, !llvm.ptr
    %13 = llvm.getelementptr %12[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %13, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb14
  ^bb8:  // pred: ^bb10
    %c1024_i64_1 = arith.constant 1024 : i64
    %14 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_2 = arith.constant 1 : i64
    %15 = arith.addi %14, %c1_i64_2 : i64
    llvm.store %15, %arg3 : i64, !llvm.ptr
    %16 = arith.cmpi ult, %c1024_i64_1, %15 : i64
    %c92_i8_3 = arith.constant 92 : i8
    cf.cond_br %16, ^bb1(%c92_i8_3 : i8), ^bb7
  ^bb9:  // pred: ^bb3
    %17 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_4 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %18 = arith.cmpi uge, %17, %c3_i64_4 : i64
    %c80_i8_5 = arith.constant 80 : i8
    cf.cond_br %18, ^bb10, ^bb1(%c80_i8_5 : i8)
  ^bb10:  // pred: ^bb9
    %19 = arith.subi %17, %c3_i64_4 : i64
    llvm.store %19, %arg1 : i64, !llvm.ptr
    cf.br ^bb8
  ^bb11:  // pred: ^bb13
    %20 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %21 = llvm.getelementptr %20[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %22 = llvm.load %21 : !llvm.ptr -> i256
    llvm.store %21, %0 : !llvm.ptr, !llvm.ptr
    %23 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %24 = llvm.getelementptr %23[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %25 = llvm.load %24 : !llvm.ptr -> i256
    llvm.store %24, %0 : !llvm.ptr, !llvm.ptr
    %c32_i64 = arith.constant 32 : i64
    %c0_i64_6 = arith.constant 0 : i64
    %26 = arith.cmpi ne, %c32_i64, %c0_i64_6 : i64
    cf.cond_br %26, ^bb45, ^bb12
  ^bb12:  // 2 preds: ^bb11, ^bb49
    %27 = arith.trunci %22 : i256 to i64
    %28 = call @dora_fn_memory_ptr(%arg0) : (!llvm.ptr) -> !llvm.ptr
    %29 = llvm.getelementptr %28[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %30 = llvm.intr.bswap(%25)  : (i256) -> i256
    llvm.store %30, %29 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb18
  ^bb13:  // pred: ^bb15
    %c1024_i64_7 = arith.constant 1024 : i64
    %31 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-2_i64 = arith.constant -2 : i64
    %32 = arith.addi %31, %c-2_i64 : i64
    llvm.store %32, %arg3 : i64, !llvm.ptr
    %c2_i64 = arith.constant 2 : i64
    %33 = arith.cmpi ult, %31, %c2_i64 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %33, ^bb1(%c91_i8 : i8), ^bb11
  ^bb14:  // pred: ^bb7
    %34 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_8 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %35 = arith.cmpi uge, %34, %c3_i64_8 : i64
    %c80_i8_9 = arith.constant 80 : i8
    cf.cond_br %35, ^bb15, ^bb1(%c80_i8_9 : i8)
  ^bb15:  // pred: ^bb14
    %36 = arith.subi %34, %c3_i64_8 : i64
    llvm.store %36, %arg1 : i64, !llvm.ptr
    cf.br ^bb13
  ^bb16:  // pred: ^bb17
    %c13_i256 = arith.constant 13 : i256
    %37 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c13_i256, %37 : i256, !llvm.ptr
    %38 = llvm.getelementptr %37[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %38, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb22
  ^bb17:  // pred: ^bb19
    %c1024_i64_10 = arith.constant 1024 : i64
    %39 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_11 = arith.constant 1 : i64
    %40 = arith.addi %39, %c1_i64_11 : i64
    llvm.store %40, %arg3 : i64, !llvm.ptr
    %41 = arith.cmpi ult, %c1024_i64_10, %40 : i64
    %c92_i8_12 = arith.constant 92 : i8
    cf.cond_br %41, ^bb1(%c92_i8_12 : i8), ^bb16
  ^bb18:  // pred: ^bb12
    %42 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_13 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %43 = arith.cmpi uge, %42, %c3_i64_13 : i64
    %c80_i8_14 = arith.constant 80 : i8
    cf.cond_br %43, ^bb19, ^bb1(%c80_i8_14 : i8)
  ^bb19:  // pred: ^bb18
    %44 = arith.subi %42, %c3_i64_13 : i64
    llvm.store %44, %arg1 : i64, !llvm.ptr
    cf.br ^bb17
  ^bb20:  // pred: ^bb21
    %c0_i256_15 = arith.constant 0 : i256
    %45 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_15, %45 : i256, !llvm.ptr
    %46 = llvm.getelementptr %45[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %46, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb26
  ^bb21:  // pred: ^bb23
    %c1024_i64_16 = arith.constant 1024 : i64
    %47 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_17 = arith.constant 1 : i64
    %48 = arith.addi %47, %c1_i64_17 : i64
    llvm.store %48, %arg3 : i64, !llvm.ptr
    %49 = arith.cmpi ult, %c1024_i64_16, %48 : i64
    %c92_i8_18 = arith.constant 92 : i8
    cf.cond_br %49, ^bb1(%c92_i8_18 : i8), ^bb20
  ^bb22:  // pred: ^bb16
    %50 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_19 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %51 = arith.cmpi uge, %50, %c3_i64_19 : i64
    %c80_i8_20 = arith.constant 80 : i8
    cf.cond_br %51, ^bb23, ^bb1(%c80_i8_20 : i8)
  ^bb23:  // pred: ^bb22
    %52 = arith.subi %50, %c3_i64_19 : i64
    llvm.store %52, %arg1 : i64, !llvm.ptr
    cf.br ^bb21
  ^bb24:  // pred: ^bb25
    %c0_i256_21 = arith.constant 0 : i256
    %53 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_21, %53 : i256, !llvm.ptr
    %54 = llvm.getelementptr %53[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %54, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb37
  ^bb25:  // pred: ^bb27
    %c1024_i64_22 = arith.constant 1024 : i64
    %55 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_23 = arith.constant 1 : i64
    %56 = arith.addi %55, %c1_i64_23 : i64
    llvm.store %56, %arg3 : i64, !llvm.ptr
    %57 = arith.cmpi ult, %c1024_i64_22, %56 : i64
    %c92_i8_24 = arith.constant 92 : i8
    cf.cond_br %57, ^bb1(%c92_i8_24 : i8), ^bb24
  ^bb26:  // pred: ^bb20
    %58 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_25 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %59 = arith.cmpi uge, %58, %c3_i64_25 : i64
    %c80_i8_26 = arith.constant 80 : i8
    cf.cond_br %59, ^bb27, ^bb1(%c80_i8_26 : i8)
  ^bb27:  // pred: ^bb26
    %60 = arith.subi %58, %c3_i64_25 : i64
    llvm.store %60, %arg1 : i64, !llvm.ptr
    cf.br ^bb25
  ^bb28:  // pred: ^bb36
    %61 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %62 = llvm.getelementptr %61[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %63 = llvm.load %62 : !llvm.ptr -> i256
    llvm.store %62, %0 : !llvm.ptr, !llvm.ptr
    %64 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %65 = llvm.getelementptr %64[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %66 = llvm.load %65 : !llvm.ptr -> i256
    llvm.store %65, %0 : !llvm.ptr, !llvm.ptr
    %67 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %68 = llvm.getelementptr %67[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %69 = llvm.load %68 : !llvm.ptr -> i256
    llvm.store %68, %0 : !llvm.ptr, !llvm.ptr
    %70 = call @dora_fn_is_static(%arg0) : (!llvm.ptr) -> i8
    %c0_i8 = arith.constant 0 : i8
    %71 = arith.cmpi ne, %70, %c0_i8 : i8
    %c87_i8 = arith.constant 87 : i8
    cf.cond_br %71, ^bb1(%c87_i8 : i8), ^bb29
  ^bb29:  // pred: ^bb28
    %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256
    %72 = arith.cmpi sgt, %69, %c18446744073709551615_i256 : i256
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %72, ^bb1(%c84_i8 : i8), ^bb30
  ^bb30:  // pred: ^bb29
    %73 = arith.trunci %69 : i256 to i64
    %c0_i64_27 = arith.constant 0 : i64
    %74 = arith.cmpi slt, %73, %c0_i64_27 : i64
    %c84_i8_28 = arith.constant 84 : i8
    cf.cond_br %74, ^bb1(%c84_i8_28 : i8), ^bb31
  ^bb31:  // pred: ^bb30
    %c0_i64_29 = arith.constant 0 : i64
    %75 = arith.cmpi ne, %73, %c0_i64_29 : i64
    cf.cond_br %75, ^bb53, ^bb32
  ^bb32:  // 2 preds: ^bb31, ^bb59
    %c32000_i64 = arith.constant 32000 : i64
    %76 = llvm.load %arg1 : !llvm.ptr -> i64
    %77 = arith.cmpi ult, %76, %c32000_i64 : i64
    scf.if %77 {
    } else {
      %179 = arith.subi %76, %c32000_i64 : i64
      llvm.store %179, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_30 = arith.constant 80 : i8
    cf.cond_br %77, ^bb1(%c80_i8_30 : i8), ^bb33
  ^bb33:  // pred: ^bb32
    %c1_i256 = arith.constant 1 : i256
    %78 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %63, %78 {alignment = 1 : i64} : i256, !llvm.ptr
    %79 = llvm.load %arg1 : !llvm.ptr -> i64
    %80 = arith.trunci %66 : i256 to i64
    %81 = call @dora_fn_create(%arg0, %73, %80, %78, %79) : (!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
    %82 = llvm.getelementptr %81[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %83 = llvm.load %82 : !llvm.ptr -> i8
    %c0_i8_31 = arith.constant 0 : i8
    %84 = arith.cmpi ne, %83, %c0_i8_31 : i8
    cf.cond_br %84, ^bb1(%83 : i8), ^bb34
  ^bb34:  // pred: ^bb33
    %85 = llvm.getelementptr %81[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %86 = llvm.load %85 : !llvm.ptr -> i64
    %87 = llvm.load %arg1 : !llvm.ptr -> i64
    %88 = arith.cmpi ult, %87, %86 : i64
    scf.if %88 {
    } else {
      %179 = arith.subi %87, %86 : i64
      llvm.store %179, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_32 = arith.constant 80 : i8
    cf.cond_br %88, ^bb1(%c80_i8_32 : i8), ^bb35
  ^bb35:  // pred: ^bb34
    %89 = llvm.load %78 : !llvm.ptr -> i256
    %90 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %89, %90 : i256, !llvm.ptr
    %91 = llvm.getelementptr %90[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %91, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb42
  ^bb36:  // pred: ^bb38
    %c1024_i64_33 = arith.constant 1024 : i64
    %92 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-2_i64_34 = arith.constant -2 : i64
    %93 = arith.addi %92, %c-2_i64_34 : i64
    llvm.store %93, %arg3 : i64, !llvm.ptr
    %c3_i64_35 = arith.constant 3 : i64
    %94 = arith.cmpi ult, %92, %c3_i64_35 : i64
    %c91_i8_36 = arith.constant 91 : i8
    cf.cond_br %94, ^bb1(%c91_i8_36 : i8), ^bb28
  ^bb37:  // pred: ^bb24
    %95 = llvm.load %arg1 : !llvm.ptr -> i64
    %c0_i64_37 = arith.constant 0 : i64
    call @dora_fn_nop() : () -> ()
    %96 = arith.cmpi uge, %95, %c0_i64_37 : i64
    %c80_i8_38 = arith.constant 80 : i8
    cf.cond_br %96, ^bb38, ^bb1(%c80_i8_38 : i8)
  ^bb38:  // pred: ^bb37
    %97 = arith.subi %95, %c0_i64_37 : i64
    llvm.store %97, %arg1 : i64, !llvm.ptr
    cf.br ^bb36
  ^bb39:  // pred: ^bb41
    %98 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %99 = llvm.getelementptr %98[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %100 = llvm.load %99 : !llvm.ptr -> i256
    llvm.store %99, %0 : !llvm.ptr, !llvm.ptr
    %c1_i256_39 = arith.constant 1 : i256
    %101 = llvm.alloca %c1_i256_39 x i256 : (i256) -> !llvm.ptr
    llvm.store %100, %101 {alignment = 1 : i64} : i256, !llvm.ptr
    %102 = call @dora_fn_ext_code_hash(%arg0, %101) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %103 = llvm.getelementptr %102[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %104 = llvm.load %103 : !llvm.ptr -> i64
    %105 = llvm.load %arg1 : !llvm.ptr -> i64
    %106 = arith.cmpi ult, %105, %104 : i64
    scf.if %106 {
    } else {
      %179 = arith.subi %105, %104 : i64
      llvm.store %179, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_40 = arith.constant 80 : i8
    cf.cond_br %106, ^bb1(%c80_i8_40 : i8), ^bb40
  ^bb40:  // pred: ^bb39
    %107 = llvm.load %101 : !llvm.ptr -> i256
    %108 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %107, %108 : i256, !llvm.ptr
    %109 = llvm.getelementptr %108[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %109, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb44
  ^bb41:  // pred: ^bb43
    %c1024_i64_41 = arith.constant 1024 : i64
    %110 = llvm.load %arg3 : !llvm.ptr -> i64
    %c0_i64_42 = arith.constant 0 : i64
    %111 = arith.addi %110, %c0_i64_42 : i64
    llvm.store %111, %arg3 : i64, !llvm.ptr
    %c1_i64_43 = arith.constant 1 : i64
    %112 = arith.cmpi ult, %110, %c1_i64_43 : i64
    %c91_i8_44 = arith.constant 91 : i8
    cf.cond_br %112, ^bb1(%c91_i8_44 : i8), ^bb39
  ^bb42:  // pred: ^bb35
    %113 = llvm.load %arg1 : !llvm.ptr -> i64
    %c0_i64_45 = arith.constant 0 : i64
    call @dora_fn_nop() : () -> ()
    %114 = arith.cmpi uge, %113, %c0_i64_45 : i64
    %c80_i8_46 = arith.constant 80 : i8
    cf.cond_br %114, ^bb43, ^bb1(%c80_i8_46 : i8)
  ^bb43:  // pred: ^bb42
    %115 = arith.subi %113, %c0_i64_45 : i64
    llvm.store %115, %arg1 : i64, !llvm.ptr
    cf.br ^bb41
  ^bb44:  // pred: ^bb40
    %c0_i64_47 = arith.constant 0 : i64
    %c1_i8 = arith.constant 1 : i8
    %116 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_47, %c0_i64_47, %116, %c1_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c1_i8 : i8
  ^bb45:  // pred: ^bb11
    %c18446744073709551615_i256_48 = arith.constant 18446744073709551615 : i256
    %117 = arith.cmpi sgt, %22, %c18446744073709551615_i256_48 : i256
    %c84_i8_49 = arith.constant 84 : i8
    cf.cond_br %117, ^bb1(%c84_i8_49 : i8), ^bb46
  ^bb46:  // pred: ^bb45
    %118 = arith.trunci %22 : i256 to i64
    %c0_i64_50 = arith.constant 0 : i64
    %119 = arith.cmpi slt, %118, %c0_i64_50 : i64
    %c84_i8_51 = arith.constant 84 : i8
    cf.cond_br %119, ^bb1(%c84_i8_51 : i8), ^bb47
  ^bb47:  // pred: ^bb46
    %120 = arith.addi %118, %c32_i64 : i64
    %c0_i64_52 = arith.constant 0 : i64
    %121 = arith.cmpi slt, %120, %c0_i64_52 : i64
    %c84_i8_53 = arith.constant 84 : i8
    cf.cond_br %121, ^bb1(%c84_i8_53 : i8), ^bb48
  ^bb48:  // pred: ^bb47
    %c31_i64 = arith.constant 31 : i64
    %c32_i64_54 = arith.constant 32 : i64
    %122 = arith.addi %120, %c31_i64 : i64
    %123 = arith.divui %122, %c32_i64_54 : i64
    %c32_i64_55 = arith.constant 32 : i64
    %124 = arith.muli %123, %c32_i64_55 : i64
    %125 = call @dora_fn_memory_size(%arg0) : (!llvm.ptr) -> i64
    %c31_i64_56 = arith.constant 31 : i64
    %c32_i64_57 = arith.constant 32 : i64
    %126 = arith.addi %125, %c31_i64_56 : i64
    %127 = arith.divui %126, %c32_i64_57 : i64
    %128 = arith.muli %127, %c32_i64_55 : i64
    %129 = arith.cmpi ult, %128, %124 : i64
    cf.cond_br %129, ^bb50, ^bb49
  ^bb49:  // 2 preds: ^bb48, ^bb52
    cf.br ^bb12
  ^bb50:  // pred: ^bb48
    %c3_i64_58 = arith.constant 3 : i64
    %c512_i64 = arith.constant 512 : i64
    %130 = arith.muli %127, %127 : i64
    %131 = arith.divui %130, %c512_i64 : i64
    %132 = arith.muli %127, %c3_i64_58 : i64
    %133 = arith.addi %131, %132 : i64
    %c3_i64_59 = arith.constant 3 : i64
    %c512_i64_60 = arith.constant 512 : i64
    %134 = arith.muli %123, %123 : i64
    %135 = arith.divui %134, %c512_i64_60 : i64
    %136 = arith.muli %123, %c3_i64_59 : i64
    %137 = arith.addi %135, %136 : i64
    %138 = arith.subi %137, %133 : i64
    %139 = llvm.load %arg1 : !llvm.ptr -> i64
    %140 = arith.cmpi ult, %139, %138 : i64
    scf.if %140 {
    } else {
      %179 = arith.subi %139, %138 : i64
      llvm.store %179, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_61 = arith.constant 80 : i8
    cf.cond_br %140, ^bb1(%c80_i8_61 : i8), ^bb51
  ^bb51:  // pred: ^bb50
    %141 = call @dora_fn_extend_memory(%arg0, %124) : (!llvm.ptr, i64) -> !llvm.ptr
    %142 = llvm.getelementptr %141[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %143 = llvm.load %142 : !llvm.ptr -> i8
    %c0_i8_62 = arith.constant 0 : i8
    %144 = arith.cmpi ne, %143, %c0_i8_62 : i8
    cf.cond_br %144, ^bb1(%143 : i8), ^bb52
  ^bb52:  // pred: ^bb51
    cf.br ^bb49
  ^bb53:  // pred: ^bb31
    %c49152_i64 = arith.constant 49152 : i64
    %145 = arith.cmpi ugt, %73, %c49152_i64 : i64
    %c100_i8 = arith.constant 100 : i8
    cf.cond_br %145, ^bb1(%c100_i8 : i8), ^bb54
  ^bb54:  // pred: ^bb53
    %c31_i64_63 = arith.constant 31 : i64
    %c32_i64_64 = arith.constant 32 : i64
    %146 = arith.addi %73, %c31_i64_63 : i64
    %147 = arith.divui %146, %c32_i64_64 : i64
    %c2_i64_65 = arith.constant 2 : i64
    %148 = arith.muli %147, %c2_i64_65 : i64
    %149 = llvm.load %arg1 : !llvm.ptr -> i64
    %150 = arith.cmpi ult, %149, %148 : i64
    scf.if %150 {
    } else {
      %179 = arith.subi %149, %148 : i64
      llvm.store %179, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_66 = arith.constant 80 : i8
    cf.cond_br %150, ^bb1(%c80_i8_66 : i8), ^bb55
  ^bb55:  // pred: ^bb54
    %c18446744073709551615_i256_67 = arith.constant 18446744073709551615 : i256
    %151 = arith.cmpi sgt, %66, %c18446744073709551615_i256_67 : i256
    %c84_i8_68 = arith.constant 84 : i8
    cf.cond_br %151, ^bb1(%c84_i8_68 : i8), ^bb56
  ^bb56:  // pred: ^bb55
    %152 = arith.trunci %66 : i256 to i64
    %c0_i64_69 = arith.constant 0 : i64
    %153 = arith.cmpi slt, %152, %c0_i64_69 : i64
    %c84_i8_70 = arith.constant 84 : i8
    cf.cond_br %153, ^bb1(%c84_i8_70 : i8), ^bb57
  ^bb57:  // pred: ^bb56
    %154 = arith.addi %152, %73 : i64
    %c0_i64_71 = arith.constant 0 : i64
    %155 = arith.cmpi slt, %154, %c0_i64_71 : i64
    %c84_i8_72 = arith.constant 84 : i8
    cf.cond_br %155, ^bb1(%c84_i8_72 : i8), ^bb58
  ^bb58:  // pred: ^bb57
    %c31_i64_73 = arith.constant 31 : i64
    %c32_i64_74 = arith.constant 32 : i64
    %156 = arith.addi %154, %c31_i64_73 : i64
    %157 = arith.divui %156, %c32_i64_74 : i64
    %c32_i64_75 = arith.constant 32 : i64
    %158 = arith.muli %157, %c32_i64_75 : i64
    %159 = call @dora_fn_memory_size(%arg0) : (!llvm.ptr) -> i64
    %c31_i64_76 = arith.constant 31 : i64
    %c32_i64_77 = arith.constant 32 : i64
    %160 = arith.addi %159, %c31_i64_76 : i64
    %161 = arith.divui %160, %c32_i64_77 : i64
    %162 = arith.muli %161, %c32_i64_75 : i64
    %163 = arith.cmpi ult, %162, %158 : i64
    cf.cond_br %163, ^bb60, ^bb59
  ^bb59:  // 2 preds: ^bb58, ^bb62
    cf.br ^bb32
  ^bb60:  // pred: ^bb58
    %c3_i64_78 = arith.constant 3 : i64
    %c512_i64_79 = arith.constant 512 : i64
    %164 = arith.muli %161, %161 : i64
    %165 = arith.divui %164, %c512_i64_79 : i64
    %166 = arith.muli %161, %c3_i64_78 : i64
    %167 = arith.addi %165, %166 : i64
    %c3_i64_80 = arith.constant 3 : i64
    %c512_i64_81 = arith.constant 512 : i64
    %168 = arith.muli %157, %157 : i64
    %169 = arith.divui %168, %c512_i64_81 : i64
    %170 = arith.muli %157, %c3_i64_80 : i64
    %171 = arith.addi %169, %170 : i64
    %172 = arith.subi %171, %167 : i64
    %173 = llvm.load %arg1 : !llvm.ptr -> i64
    %174 = arith.cmpi ult, %173, %172 : i64
    scf.if %174 {
    } else {
      %179 = arith.subi %173, %172 : i64
      llvm.store %179, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_82 = arith.constant 80 : i8
    cf.cond_br %174, ^bb1(%c80_i8_82 : i8), ^bb61
  ^bb61:  // pred: ^bb60
    %175 = call @dora_fn_extend_memory(%arg0, %158) : (!llvm.ptr, i64) -> !llvm.ptr
    %176 = llvm.getelementptr %175[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %177 = llvm.load %176 : !llvm.ptr -> i8
    %c0_i8_83 = arith.constant 0 : i8
    %178 = arith.cmpi ne, %177, %c0_i8_83 : i8
    cf.cond_br %178, ^bb1(%177 : i8), ^bb62
  ^bb62:  // pred: ^bb61
    cf.br ^bb59
  }
}
