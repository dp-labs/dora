---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  llvm.mlir.global internal @dora_global_stack_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_stack_length() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_memory_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_memory_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_calldata_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_calldata_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_gas_counter() {addr_space = 0 : i32} : i64
  func.func private @dora_fn_nop()
  func.func private @dora_fn_tracing(!llvm.ptr, i8, i64, !llvm.ptr, i64)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_fn_is_static(!llvm.ptr) -> i8
  func.func private @dora_fn_exp(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_chainid(!llvm.ptr) -> i64
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gaslimit_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_code_copy(!llvm.ptr, !llvm.ptr, i64, i64)
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_call(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_returndata_copy(!llvm.ptr, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_tload(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_tstore(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func public @main(%arg0: !llvm.ptr, %arg1: i64) -> i8 attributes {llvm.emit_c_interface} {
    %c1024_i256 = arith.constant 1024 : i256
    %0 = llvm.alloca %c1024_i256 x i256 : (i256) -> !llvm.ptr
    %1 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    llvm.store %0, %1 : !llvm.ptr, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %2 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    llvm.store %c0_i64, %2 : i64, !llvm.ptr
    %c0_i64_0 = arith.constant 0 : i64
    %3 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %c0_i64_0, %3 : i64, !llvm.ptr
    %4 = call @dora_fn_calldata(%arg0) : (!llvm.ptr) -> !llvm.ptr
    %5 = llvm.mlir.addressof @dora_global_calldata_ptr : !llvm.ptr
    llvm.store %4, %5 : !llvm.ptr, !llvm.ptr
    %6 = call @dora_fn_calldata_size(%arg0) : (!llvm.ptr) -> i64
    %7 = llvm.mlir.addressof @dora_global_calldata_size : !llvm.ptr
    llvm.store %6, %7 : i64, !llvm.ptr
    %8 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    llvm.store %arg1, %8 : i64, !llvm.ptr
    cf.br ^bb5
  ^bb1(%9: i8):  // 19 preds: ^bb2, ^bb4, ^bb5, ^bb8, ^bb9, ^bb13, ^bb14, ^bb17, ^bb18, ^bb22, ^bb23, ^bb26, ^bb27, ^bb30, ^bb31, ^bb33, ^bb34, ^bb37, ^bb38
    %c0_i64_1 = arith.constant 0 : i64
    %10 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %11 = llvm.load %10 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_1, %c0_i64_1, %11, %9) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %9 : i8
  ^bb2(%12: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %12 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3:  // pred: ^bb4
    %c1024_i256_2 = arith.constant 1024 : i256
    %13 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %14 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    llvm.store %c1024_i256_2, %14 : i256, !llvm.ptr
    %15 = llvm.getelementptr %14[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %15, %13 : !llvm.ptr, !llvm.ptr
    cf.br ^bb9
  ^bb4:  // pred: ^bb6
    %16 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64 = arith.constant 1024 : i64
    %17 = llvm.load %16 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %18 = arith.addi %17, %c1_i64 : i64
    llvm.store %18, %16 : i64, !llvm.ptr
    %19 = arith.cmpi ult, %c1024_i64, %18 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %19, ^bb1(%c92_i8 : i8), ^bb3
  ^bb5:  // pred: ^bb0
    %20 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %21 = llvm.load %20 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %22 = arith.cmpi uge, %21, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %22, ^bb6, ^bb1(%c80_i8 : i8)
  ^bb6:  // pred: ^bb5
    %23 = arith.subi %21, %c3_i64 : i64
    llvm.store %23, %20 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb7:  // pred: ^bb8
    %c987654321_i256 = arith.constant 987654321 : i256
    %24 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %25 = llvm.load %24 : !llvm.ptr -> !llvm.ptr
    llvm.store %c987654321_i256, %25 : i256, !llvm.ptr
    %26 = llvm.getelementptr %25[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %26, %24 : !llvm.ptr, !llvm.ptr
    cf.br ^bb14
  ^bb8:  // pred: ^bb10
    %27 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_3 = arith.constant 1024 : i64
    %28 = llvm.load %27 : !llvm.ptr -> i64
    %c1_i64_4 = arith.constant 1 : i64
    %29 = arith.addi %28, %c1_i64_4 : i64
    llvm.store %29, %27 : i64, !llvm.ptr
    %30 = arith.cmpi ult, %c1024_i64_3, %29 : i64
    %c92_i8_5 = arith.constant 92 : i8
    cf.cond_br %30, ^bb1(%c92_i8_5 : i8), ^bb7
  ^bb9:  // pred: ^bb3
    %31 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %32 = llvm.load %31 : !llvm.ptr -> i64
    %c3_i64_6 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %33 = arith.cmpi uge, %32, %c3_i64_6 : i64
    %c80_i8_7 = arith.constant 80 : i8
    cf.cond_br %33, ^bb10, ^bb1(%c80_i8_7 : i8)
  ^bb10:  // pred: ^bb9
    %34 = arith.subi %32, %c3_i64_6 : i64
    llvm.store %34, %31 : i64, !llvm.ptr
    cf.br ^bb8
  ^bb11:  // pred: ^bb13
    %35 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %36 = llvm.load %35 : !llvm.ptr -> !llvm.ptr
    %37 = llvm.getelementptr %36[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %38 = llvm.load %37 : !llvm.ptr -> i256
    llvm.store %37, %35 : !llvm.ptr, !llvm.ptr
    %39 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %40 = llvm.load %39 : !llvm.ptr -> !llvm.ptr
    %41 = llvm.getelementptr %40[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %42 = llvm.load %41 : !llvm.ptr -> i256
    llvm.store %41, %39 : !llvm.ptr, !llvm.ptr
    %c32_i64 = arith.constant 32 : i64
    %c0_i64_8 = arith.constant 0 : i64
    %43 = arith.cmpi ne, %c32_i64, %c0_i64_8 : i64
    cf.cond_br %43, ^bb26, ^bb12
  ^bb12:  // 2 preds: ^bb11, ^bb29
    %44 = arith.trunci %38 : i256 to i64
    %45 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    %46 = llvm.load %45 : !llvm.ptr -> !llvm.ptr
    %47 = llvm.getelementptr %46[%44] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %48 = llvm.intr.bswap(%42)  : (i256) -> i256
    llvm.store %48, %47 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb18
  ^bb13:  // pred: ^bb15
    %49 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_9 = arith.constant 1024 : i64
    %50 = llvm.load %49 : !llvm.ptr -> i64
    %c-2_i64 = arith.constant -2 : i64
    %51 = arith.addi %50, %c-2_i64 : i64
    %c2_i64 = arith.constant 2 : i64
    llvm.store %51, %49 : i64, !llvm.ptr
    %52 = arith.cmpi ult, %50, %c2_i64 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %52, ^bb1(%c91_i8 : i8), ^bb11
  ^bb14:  // pred: ^bb7
    %53 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %54 = llvm.load %53 : !llvm.ptr -> i64
    %c3_i64_10 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %55 = arith.cmpi uge, %54, %c3_i64_10 : i64
    %c80_i8_11 = arith.constant 80 : i8
    cf.cond_br %55, ^bb15, ^bb1(%c80_i8_11 : i8)
  ^bb15:  // pred: ^bb14
    %56 = arith.subi %54, %c3_i64_10 : i64
    llvm.store %56, %53 : i64, !llvm.ptr
    cf.br ^bb13
  ^bb16:  // pred: ^bb17
    %c1024_i256_12 = arith.constant 1024 : i256
    %57 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %58 = llvm.load %57 : !llvm.ptr -> !llvm.ptr
    llvm.store %c1024_i256_12, %58 : i256, !llvm.ptr
    %59 = llvm.getelementptr %58[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %59, %57 : !llvm.ptr, !llvm.ptr
    cf.br ^bb23
  ^bb17:  // pred: ^bb19
    %60 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_13 = arith.constant 1024 : i64
    %61 = llvm.load %60 : !llvm.ptr -> i64
    %c1_i64_14 = arith.constant 1 : i64
    %62 = arith.addi %61, %c1_i64_14 : i64
    llvm.store %62, %60 : i64, !llvm.ptr
    %63 = arith.cmpi ult, %c1024_i64_13, %62 : i64
    %c92_i8_15 = arith.constant 92 : i8
    cf.cond_br %63, ^bb1(%c92_i8_15 : i8), ^bb16
  ^bb18:  // pred: ^bb12
    %64 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %65 = llvm.load %64 : !llvm.ptr -> i64
    %c3_i64_16 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %66 = arith.cmpi uge, %65, %c3_i64_16 : i64
    %c80_i8_17 = arith.constant 80 : i8
    cf.cond_br %66, ^bb19, ^bb1(%c80_i8_17 : i8)
  ^bb19:  // pred: ^bb18
    %67 = arith.subi %65, %c3_i64_16 : i64
    llvm.store %67, %64 : i64, !llvm.ptr
    cf.br ^bb17
  ^bb20:  // pred: ^bb22
    %68 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %69 = llvm.load %68 : !llvm.ptr -> !llvm.ptr
    %70 = llvm.getelementptr %69[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %71 = llvm.load %70 : !llvm.ptr -> i256
    llvm.store %70, %68 : !llvm.ptr, !llvm.ptr
    %c32_i64_18 = arith.constant 32 : i64
    %c0_i64_19 = arith.constant 0 : i64
    %72 = arith.cmpi ne, %c32_i64_18, %c0_i64_19 : i64
    cf.cond_br %72, ^bb33, ^bb21
  ^bb21:  // 2 preds: ^bb20, ^bb36
    %73 = arith.trunci %71 : i256 to i64
    %74 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    %75 = llvm.load %74 : !llvm.ptr -> !llvm.ptr
    %76 = llvm.getelementptr %75[%73] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %77 = llvm.load %76 {alignment = 1 : i64} : !llvm.ptr -> i256
    %78 = llvm.intr.bswap(%77)  : (i256) -> i256
    %79 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %80 = llvm.load %79 : !llvm.ptr -> !llvm.ptr
    llvm.store %78, %80 : i256, !llvm.ptr
    %81 = llvm.getelementptr %80[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %81, %79 : !llvm.ptr, !llvm.ptr
    cf.br ^bb25
  ^bb22:  // pred: ^bb24
    %82 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_20 = arith.constant 1024 : i64
    %83 = llvm.load %82 : !llvm.ptr -> i64
    %c0_i64_21 = arith.constant 0 : i64
    %84 = arith.addi %83, %c0_i64_21 : i64
    %c1_i64_22 = arith.constant 1 : i64
    llvm.store %84, %82 : i64, !llvm.ptr
    %85 = arith.cmpi ult, %83, %c1_i64_22 : i64
    %c91_i8_23 = arith.constant 91 : i8
    cf.cond_br %85, ^bb1(%c91_i8_23 : i8), ^bb20
  ^bb23:  // pred: ^bb16
    %86 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %87 = llvm.load %86 : !llvm.ptr -> i64
    %c3_i64_24 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %88 = arith.cmpi uge, %87, %c3_i64_24 : i64
    %c80_i8_25 = arith.constant 80 : i8
    cf.cond_br %88, ^bb24, ^bb1(%c80_i8_25 : i8)
  ^bb24:  // pred: ^bb23
    %89 = arith.subi %87, %c3_i64_24 : i64
    llvm.store %89, %86 : i64, !llvm.ptr
    cf.br ^bb22
  ^bb25:  // pred: ^bb21
    %c0_i64_26 = arith.constant 0 : i64
    %c1_i8 = arith.constant 1 : i8
    %90 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %91 = llvm.load %90 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_26, %c0_i64_26, %91, %c1_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c1_i8 : i8
  ^bb26:  // pred: ^bb11
    %92 = arith.trunci %38 : i256 to i64
    %c0_i64_27 = arith.constant 0 : i64
    %93 = arith.cmpi slt, %92, %c0_i64_27 : i64
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %93, ^bb1(%c84_i8 : i8), ^bb27
  ^bb27:  // pred: ^bb26
    %94 = arith.addi %92, %c32_i64 : i64
    %c0_i64_28 = arith.constant 0 : i64
    %95 = arith.cmpi slt, %94, %c0_i64_28 : i64
    %c84_i8_29 = arith.constant 84 : i8
    cf.cond_br %95, ^bb1(%c84_i8_29 : i8), ^bb28
  ^bb28:  // pred: ^bb27
    %c31_i64 = arith.constant 31 : i64
    %c32_i64_30 = arith.constant 32 : i64
    %96 = arith.addi %94, %c31_i64 : i64
    %97 = arith.divui %96, %c32_i64_30 : i64
    %c32_i64_31 = arith.constant 32 : i64
    %98 = arith.muli %97, %c32_i64_31 : i64
    %99 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    %100 = llvm.load %99 : !llvm.ptr -> i64
    %c31_i64_32 = arith.constant 31 : i64
    %c32_i64_33 = arith.constant 32 : i64
    %101 = arith.addi %100, %c31_i64_32 : i64
    %102 = arith.divui %101, %c32_i64_33 : i64
    %103 = arith.muli %102, %c32_i64_31 : i64
    %104 = arith.cmpi ult, %103, %98 : i64
    cf.cond_br %104, ^bb30, ^bb29
  ^bb29:  // 2 preds: ^bb28, ^bb32
    cf.br ^bb12
  ^bb30:  // pred: ^bb28
    %c3_i64_34 = arith.constant 3 : i64
    %c512_i64 = arith.constant 512 : i64
    %105 = arith.muli %102, %102 : i64
    %106 = arith.divui %105, %c512_i64 : i64
    %107 = arith.muli %102, %c3_i64_34 : i64
    %108 = arith.addi %106, %107 : i64
    %c3_i64_35 = arith.constant 3 : i64
    %c512_i64_36 = arith.constant 512 : i64
    %109 = arith.muli %97, %97 : i64
    %110 = arith.divui %109, %c512_i64_36 : i64
    %111 = arith.muli %97, %c3_i64_35 : i64
    %112 = arith.addi %110, %111 : i64
    %113 = arith.subi %112, %108 : i64
    %114 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %115 = llvm.load %114 : !llvm.ptr -> i64
    %116 = arith.cmpi ult, %115, %113 : i64
    scf.if %116 {
    } else {
      %158 = arith.subi %115, %113 : i64
      llvm.store %158, %114 : i64, !llvm.ptr
    }
    %c80_i8_37 = arith.constant 80 : i8
    cf.cond_br %116, ^bb1(%c80_i8_37 : i8), ^bb31
  ^bb31:  // pred: ^bb30
    %117 = call @dora_fn_extend_memory(%arg0, %98) : (!llvm.ptr, i64) -> !llvm.ptr
    %118 = llvm.getelementptr %117[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %119 = llvm.load %118 : !llvm.ptr -> !llvm.ptr
    %120 = llvm.getelementptr %117[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %121 = llvm.load %120 : !llvm.ptr -> i8
    %c0_i8 = arith.constant 0 : i8
    %122 = arith.cmpi ne, %121, %c0_i8 : i8
    cf.cond_br %122, ^bb1(%121 : i8), ^bb32
  ^bb32:  // pred: ^bb31
    %123 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    llvm.store %119, %123 : !llvm.ptr, !llvm.ptr
    %124 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %98, %124 : i64, !llvm.ptr
    cf.br ^bb29
  ^bb33:  // pred: ^bb20
    %125 = arith.trunci %71 : i256 to i64
    %c0_i64_38 = arith.constant 0 : i64
    %126 = arith.cmpi slt, %125, %c0_i64_38 : i64
    %c84_i8_39 = arith.constant 84 : i8
    cf.cond_br %126, ^bb1(%c84_i8_39 : i8), ^bb34
  ^bb34:  // pred: ^bb33
    %127 = arith.addi %125, %c32_i64_18 : i64
    %c0_i64_40 = arith.constant 0 : i64
    %128 = arith.cmpi slt, %127, %c0_i64_40 : i64
    %c84_i8_41 = arith.constant 84 : i8
    cf.cond_br %128, ^bb1(%c84_i8_41 : i8), ^bb35
  ^bb35:  // pred: ^bb34
    %c31_i64_42 = arith.constant 31 : i64
    %c32_i64_43 = arith.constant 32 : i64
    %129 = arith.addi %127, %c31_i64_42 : i64
    %130 = arith.divui %129, %c32_i64_43 : i64
    %c32_i64_44 = arith.constant 32 : i64
    %131 = arith.muli %130, %c32_i64_44 : i64
    %132 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    %133 = llvm.load %132 : !llvm.ptr -> i64
    %c31_i64_45 = arith.constant 31 : i64
    %c32_i64_46 = arith.constant 32 : i64
    %134 = arith.addi %133, %c31_i64_45 : i64
    %135 = arith.divui %134, %c32_i64_46 : i64
    %136 = arith.muli %135, %c32_i64_44 : i64
    %137 = arith.cmpi ult, %136, %131 : i64
    cf.cond_br %137, ^bb37, ^bb36
  ^bb36:  // 2 preds: ^bb35, ^bb39
    cf.br ^bb21
  ^bb37:  // pred: ^bb35
    %c3_i64_47 = arith.constant 3 : i64
    %c512_i64_48 = arith.constant 512 : i64
    %138 = arith.muli %135, %135 : i64
    %139 = arith.divui %138, %c512_i64_48 : i64
    %140 = arith.muli %135, %c3_i64_47 : i64
    %141 = arith.addi %139, %140 : i64
    %c3_i64_49 = arith.constant 3 : i64
    %c512_i64_50 = arith.constant 512 : i64
    %142 = arith.muli %130, %130 : i64
    %143 = arith.divui %142, %c512_i64_50 : i64
    %144 = arith.muli %130, %c3_i64_49 : i64
    %145 = arith.addi %143, %144 : i64
    %146 = arith.subi %145, %141 : i64
    %147 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %148 = llvm.load %147 : !llvm.ptr -> i64
    %149 = arith.cmpi ult, %148, %146 : i64
    scf.if %149 {
    } else {
      %158 = arith.subi %148, %146 : i64
      llvm.store %158, %147 : i64, !llvm.ptr
    }
    %c80_i8_51 = arith.constant 80 : i8
    cf.cond_br %149, ^bb1(%c80_i8_51 : i8), ^bb38
  ^bb38:  // pred: ^bb37
    %150 = call @dora_fn_extend_memory(%arg0, %131) : (!llvm.ptr, i64) -> !llvm.ptr
    %151 = llvm.getelementptr %150[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %152 = llvm.load %151 : !llvm.ptr -> !llvm.ptr
    %153 = llvm.getelementptr %150[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %154 = llvm.load %153 : !llvm.ptr -> i8
    %c0_i8_52 = arith.constant 0 : i8
    %155 = arith.cmpi ne, %154, %c0_i8_52 : i8
    cf.cond_br %155, ^bb1(%154 : i8), ^bb39
  ^bb39:  // pred: ^bb38
    %156 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    llvm.store %152, %156 : !llvm.ptr, !llvm.ptr
    %157 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %131, %157 : i64, !llvm.ptr
    cf.br ^bb36
  }
}
