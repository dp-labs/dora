---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
---
module {
  func.func private @dora_fn_nop()
  func.func private @dora_fn_tracing(!llvm.ptr, i8, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_fn_is_static(!llvm.ptr) -> i8
  func.func private @dora_fn_exp(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_calldata_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_data_load(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_data_section(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_data_section_size(!llvm.ptr) -> i64
  func.func private @dora_fn_data_section_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_chainid(!llvm.ptr) -> i64
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gaslimit_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_memory_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_memory_size(!llvm.ptr) -> i64
  func.func private @dora_fn_code_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_eofcreate(!llvm.ptr, i8, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returncontract(!llvm.ptr, i8, i64, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_call(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_extcall(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_returndata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_returndata_copy(!llvm.ptr, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_tload(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_tstore(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_func_stack_push(!llvm.ptr, i64, i64) -> i8
  func.func private @dora_fn_func_stack_pop(!llvm.ptr) -> i64
  func.func private @dora_fn_func_stack_grow(!llvm.ptr)
  func.func private @op162(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr, %arg4: !llvm.ptr) -> i8 {
    cf.br ^bb3
  ^bb1(%0: i8):  // 11 preds: ^bb3, ^bb4, ^bb6, ^bb7, ^bb8, ^bb9, ^bb13, ^bb14, ^bb15, ^bb18, ^bb19
    %c0_i64 = arith.constant 0 : i64
    %1 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64, %c0_i64, %1, %0) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %0 : i8
  ^bb2(%2: i8):  // no predecessors
    return %2 : i8
  ^bb3:  // pred: ^bb0
    %3 = llvm.load %arg1 : !llvm.ptr -> i64
    %c1125_i64 = arith.constant 1125 : i64
    call @dora_fn_nop() : () -> ()
    %4 = arith.cmpi uge, %3, %c1125_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %4, ^bb5, ^bb1(%c80_i8 : i8)
  ^bb4:  // pred: ^bb5
    %c1024_i64 = arith.constant 1024 : i64
    %5 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-4_i64 = arith.constant -4 : i64
    %6 = arith.addi %5, %c-4_i64 : i64
    llvm.store %6, %arg3 : i64, !llvm.ptr
    %c4_i64 = arith.constant 4 : i64
    %7 = arith.cmpi ult, %5, %c4_i64 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %7, ^bb1(%c91_i8 : i8), ^bb6
  ^bb5:  // pred: ^bb3
    %8 = arith.subi %3, %c1125_i64 : i64
    llvm.store %8, %arg1 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb6:  // pred: ^bb4
    %9 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.getelementptr %9[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %11 = llvm.load %10 : !llvm.ptr -> i256
    llvm.store %10, %arg4 : !llvm.ptr, !llvm.ptr
    %12 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.getelementptr %12[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %14 = llvm.load %13 : !llvm.ptr -> i256
    llvm.store %13, %arg4 : !llvm.ptr, !llvm.ptr
    %15 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %16 = llvm.getelementptr %15[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %17 = llvm.load %16 : !llvm.ptr -> i256
    llvm.store %16, %arg4 : !llvm.ptr, !llvm.ptr
    %18 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.getelementptr %18[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %20 = llvm.load %19 : !llvm.ptr -> i256
    llvm.store %19, %arg4 : !llvm.ptr, !llvm.ptr
    %21 = call @dora_fn_is_static(%arg0) : (!llvm.ptr) -> i8
    %c0_i8 = arith.constant 0 : i8
    %22 = arith.cmpi ne, %21, %c0_i8 : i8
    %c87_i8 = arith.constant 87 : i8
    cf.cond_br %22, ^bb1(%c87_i8 : i8), ^bb7
  ^bb7:  // pred: ^bb6
    %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256
    %23 = arith.cmpi ugt, %14, %c18446744073709551615_i256 : i256
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %23, ^bb1(%c84_i8 : i8), ^bb8
  ^bb8:  // pred: ^bb7
    %24 = arith.trunci %14 : i256 to i64
    %c0_i64_0 = arith.constant 0 : i64
    %25 = arith.cmpi slt, %24, %c0_i64_0 : i64
    %c84_i8_1 = arith.constant 84 : i8
    cf.cond_br %25, ^bb1(%c84_i8_1 : i8), ^bb9
  ^bb9:  // pred: ^bb8
    %c8_i64 = arith.constant 8 : i64
    %26 = arith.muli %24, %c8_i64 : i64
    %27 = llvm.load %arg1 : !llvm.ptr -> i64
    %28 = arith.cmpi ult, %27, %26 : i64
    scf.if %28 {
    } else {
      %61 = arith.subi %27, %26 : i64
      llvm.store %61, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_2 = arith.constant 80 : i8
    cf.cond_br %28, ^bb1(%c80_i8_2 : i8), ^bb10
  ^bb10:  // pred: ^bb9
    %c0_i64_3 = arith.constant 0 : i64
    %29 = arith.cmpi ne, %24, %c0_i64_3 : i64
    cf.cond_br %29, ^bb13, ^bb11
  ^bb11:  // 2 preds: ^bb10, ^bb17
    %30 = arith.trunci %11 : i256 to i64
    %c1_i256 = arith.constant 1 : i256
    %31 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %17, %31 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i256_4 = arith.constant 1 : i256
    %32 = llvm.alloca %c1_i256_4 x i256 : (i256) -> !llvm.ptr
    llvm.store %20, %32 {alignment = 1 : i64} : i256, !llvm.ptr
    call @dora_fn_append_log_with_two_topics(%arg0, %30, %24, %31, %32) : (!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr) -> ()
    cf.br ^bb12
  ^bb12:  // pred: ^bb11
    %c0_i8_5 = arith.constant 0 : i8
    return %c0_i8_5 : i8
  ^bb13:  // pred: ^bb10
    %c18446744073709551615_i256_6 = arith.constant 18446744073709551615 : i256
    %33 = arith.cmpi ugt, %11, %c18446744073709551615_i256_6 : i256
    %c84_i8_7 = arith.constant 84 : i8
    cf.cond_br %33, ^bb1(%c84_i8_7 : i8), ^bb14
  ^bb14:  // pred: ^bb13
    %34 = arith.trunci %11 : i256 to i64
    %c0_i64_8 = arith.constant 0 : i64
    %35 = arith.cmpi slt, %34, %c0_i64_8 : i64
    %c84_i8_9 = arith.constant 84 : i8
    cf.cond_br %35, ^bb1(%c84_i8_9 : i8), ^bb15
  ^bb15:  // pred: ^bb14
    %36 = arith.addi %34, %24 : i64
    %c0_i64_10 = arith.constant 0 : i64
    %37 = arith.cmpi slt, %36, %c0_i64_10 : i64
    %c84_i8_11 = arith.constant 84 : i8
    cf.cond_br %37, ^bb1(%c84_i8_11 : i8), ^bb16
  ^bb16:  // pred: ^bb15
    %c31_i64 = arith.constant 31 : i64
    %c32_i64 = arith.constant 32 : i64
    %38 = arith.addi %36, %c31_i64 : i64
    %39 = arith.divui %38, %c32_i64 : i64
    %c32_i64_12 = arith.constant 32 : i64
    %40 = arith.muli %39, %c32_i64_12 : i64
    %41 = call @dora_fn_memory_size(%arg0) : (!llvm.ptr) -> i64
    %c31_i64_13 = arith.constant 31 : i64
    %c32_i64_14 = arith.constant 32 : i64
    %42 = arith.addi %41, %c31_i64_13 : i64
    %43 = arith.divui %42, %c32_i64_14 : i64
    %44 = arith.muli %43, %c32_i64_12 : i64
    %45 = arith.cmpi ult, %44, %40 : i64
    cf.cond_br %45, ^bb18, ^bb17
  ^bb17:  // 2 preds: ^bb16, ^bb20
    cf.br ^bb11
  ^bb18:  // pred: ^bb16
    %c3_i64 = arith.constant 3 : i64
    %c512_i64 = arith.constant 512 : i64
    %46 = arith.muli %43, %43 : i64
    %47 = arith.divui %46, %c512_i64 : i64
    %48 = arith.muli %43, %c3_i64 : i64
    %49 = arith.addi %47, %48 : i64
    %c3_i64_15 = arith.constant 3 : i64
    %c512_i64_16 = arith.constant 512 : i64
    %50 = arith.muli %39, %39 : i64
    %51 = arith.divui %50, %c512_i64_16 : i64
    %52 = arith.muli %39, %c3_i64_15 : i64
    %53 = arith.addi %51, %52 : i64
    %54 = arith.subi %53, %49 : i64
    %55 = llvm.load %arg1 : !llvm.ptr -> i64
    %56 = arith.cmpi ult, %55, %54 : i64
    scf.if %56 {
    } else {
      %61 = arith.subi %55, %54 : i64
      llvm.store %61, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_17 = arith.constant 80 : i8
    cf.cond_br %56, ^bb1(%c80_i8_17 : i8), ^bb19
  ^bb19:  // pred: ^bb18
    %57 = call @dora_fn_extend_memory(%arg0, %40) : (!llvm.ptr, i64) -> !llvm.ptr
    %58 = llvm.getelementptr %57[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %59 = llvm.load %58 : !llvm.ptr -> i8
    %c0_i8_18 = arith.constant 0 : i8
    %60 = arith.cmpi ne, %59, %c0_i8_18 : i8
    cf.cond_br %60, ^bb1(%59 : i8), ^bb20
  ^bb20:  // pred: ^bb19
    cf.br ^bb17
  }
  func.func public @call(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr) -> i8 attributes {llvm.emit_c_interface} {
    %c0_i64 = arith.constant 0 : i64
    %0 = llvm.alloca %c0_i64 x !llvm.ptr : (i64) -> !llvm.ptr
    llvm.store %arg2, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8 = arith.constant 0 : i8
    %c0_i8_0 = arith.constant 0 : i8
    %1 = arith.cmpi ne, %c0_i8, %c0_i8_0 : i8
    cf.cond_br %1, ^bb1(%c0_i8 : i8), ^bb4
  ^bb1(%2: i8):  // 13 preds: ^bb0, ^bb2, ^bb4, ^bb5, ^bb6, ^bb7, ^bb9, ^bb11, ^bb12, ^bb14, ^bb15, ^bb17, ^bb18
    %c0_i64_1 = arith.constant 0 : i64
    %3 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_1, %c0_i64_1, %3, %2) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %2 : i8
  ^bb2(%4: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %4 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3(%5: i8):  // 2 preds: ^bb8, ^bb20
    return %5 : i8
  ^bb4:  // pred: ^bb0
    %6 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %7 = arith.cmpi uge, %6, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %7, ^bb10, ^bb1(%c80_i8 : i8)
  ^bb5:  // pred: ^bb11
    %8 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_2 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %9 = arith.cmpi uge, %8, %c3_i64_2 : i64
    %c80_i8_3 = arith.constant 80 : i8
    cf.cond_br %9, ^bb13, ^bb1(%c80_i8_3 : i8)
  ^bb6:  // pred: ^bb14
    %10 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_4 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %11 = arith.cmpi uge, %10, %c3_i64_4 : i64
    %c80_i8_5 = arith.constant 80 : i8
    cf.cond_br %11, ^bb16, ^bb1(%c80_i8_5 : i8)
  ^bb7:  // pred: ^bb17
    %12 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_6 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %13 = arith.cmpi uge, %12, %c3_i64_6 : i64
    %c80_i8_7 = arith.constant 80 : i8
    cf.cond_br %13, ^bb19, ^bb1(%c80_i8_7 : i8)
  ^bb8:  // pred: ^bb20
    %14 = call @op162(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %15 = arith.cmpi ne, %14, %c0_i8_0 : i8
    cf.cond_br %15, ^bb3(%14 : i8), ^bb21
  ^bb9:  // pred: ^bb10
    %c1024_i64 = arith.constant 1024 : i64
    %16 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %17 = arith.addi %16, %c1_i64 : i64
    llvm.store %17, %arg3 : i64, !llvm.ptr
    %18 = arith.cmpi ult, %c1024_i64, %17 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %18, ^bb1(%c92_i8 : i8), ^bb11
  ^bb10:  // pred: ^bb4
    %19 = arith.subi %6, %c3_i64 : i64
    llvm.store %19, %arg1 : i64, !llvm.ptr
    cf.br ^bb9
  ^bb11:  // pred: ^bb9
    %c32_i256 = arith.constant 32 : i256
    %20 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c32_i256, %20 : i256, !llvm.ptr
    %21 = llvm.getelementptr %20[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %21, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_8 = arith.constant 0 : i8
    %22 = arith.cmpi ne, %c0_i8_8, %c0_i8_0 : i8
    cf.cond_br %22, ^bb1(%c0_i8_8 : i8), ^bb5
  ^bb12:  // pred: ^bb13
    %c1024_i64_9 = arith.constant 1024 : i64
    %23 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_10 = arith.constant 1 : i64
    %24 = arith.addi %23, %c1_i64_10 : i64
    llvm.store %24, %arg3 : i64, !llvm.ptr
    %25 = arith.cmpi ult, %c1024_i64_9, %24 : i64
    %c92_i8_11 = arith.constant 92 : i8
    cf.cond_br %25, ^bb1(%c92_i8_11 : i8), ^bb14
  ^bb13:  // pred: ^bb5
    %26 = arith.subi %8, %c3_i64_2 : i64
    llvm.store %26, %arg1 : i64, !llvm.ptr
    cf.br ^bb12
  ^bb14:  // pred: ^bb12
    %c10_i256 = arith.constant 10 : i256
    %27 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c10_i256, %27 : i256, !llvm.ptr
    %28 = llvm.getelementptr %27[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %28, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_12 = arith.constant 0 : i8
    %29 = arith.cmpi ne, %c0_i8_12, %c0_i8_0 : i8
    cf.cond_br %29, ^bb1(%c0_i8_12 : i8), ^bb6
  ^bb15:  // pred: ^bb16
    %c1024_i64_13 = arith.constant 1024 : i64
    %30 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_14 = arith.constant 1 : i64
    %31 = arith.addi %30, %c1_i64_14 : i64
    llvm.store %31, %arg3 : i64, !llvm.ptr
    %32 = arith.cmpi ult, %c1024_i64_13, %31 : i64
    %c92_i8_15 = arith.constant 92 : i8
    cf.cond_br %32, ^bb1(%c92_i8_15 : i8), ^bb17
  ^bb16:  // pred: ^bb6
    %33 = arith.subi %10, %c3_i64_4 : i64
    llvm.store %33, %arg1 : i64, !llvm.ptr
    cf.br ^bb15
  ^bb17:  // pred: ^bb15
    %c1_i256 = arith.constant 1 : i256
    %34 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c1_i256, %34 : i256, !llvm.ptr
    %35 = llvm.getelementptr %34[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %35, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_16 = arith.constant 0 : i8
    %36 = arith.cmpi ne, %c0_i8_16, %c0_i8_0 : i8
    cf.cond_br %36, ^bb1(%c0_i8_16 : i8), ^bb7
  ^bb18:  // pred: ^bb19
    %c1024_i64_17 = arith.constant 1024 : i64
    %37 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_18 = arith.constant 1 : i64
    %38 = arith.addi %37, %c1_i64_18 : i64
    llvm.store %38, %arg3 : i64, !llvm.ptr
    %39 = arith.cmpi ult, %c1024_i64_17, %38 : i64
    %c92_i8_19 = arith.constant 92 : i8
    cf.cond_br %39, ^bb1(%c92_i8_19 : i8), ^bb20
  ^bb19:  // pred: ^bb7
    %40 = arith.subi %12, %c3_i64_6 : i64
    llvm.store %40, %arg1 : i64, !llvm.ptr
    cf.br ^bb18
  ^bb20:  // pred: ^bb18
    %c2_i256 = arith.constant 2 : i256
    %41 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c2_i256, %41 : i256, !llvm.ptr
    %42 = llvm.getelementptr %41[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %42, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_20 = arith.constant 0 : i8
    %43 = arith.cmpi ne, %c0_i8_20, %c0_i8_0 : i8
    cf.cond_br %43, ^bb3(%c0_i8_20 : i8), ^bb8
  ^bb21:  // pred: ^bb8
    %c0_i64_21 = arith.constant 0 : i64
    %c2_i8 = arith.constant 2 : i8
    %44 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_21, %c0_i64_21, %44, %c2_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c2_i8 : i8
  }
}
