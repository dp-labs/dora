---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  func.func private @dora_fn_nop()
  func.func private @dora_fn_tracing(!llvm.ptr, i8, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_fn_is_static(!llvm.ptr) -> i8
  func.func private @dora_fn_exp(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_chainid(!llvm.ptr) -> i64
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gaslimit_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_memory_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_memory_size(!llvm.ptr) -> i64
  func.func private @dora_fn_code_copy(!llvm.ptr, !llvm.ptr, i64, i64)
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_call(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_returndata_copy(!llvm.ptr, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_tload(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_tstore(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func public @main(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr) -> i8 attributes {llvm.emit_c_interface} {
    cf.br ^bb5
  ^bb1(%0: i8):  // 31 preds: ^bb2, ^bb4, ^bb5, ^bb8, ^bb9, ^bb12, ^bb13, ^bb16, ^bb17, ^bb20, ^bb21, ^bb24, ^bb25, ^bb27, ^bb28, ^bb30, ^bb31, ^bb33, ^bb34, ^bb36, ^bb37, ^bb40, ^bb41, ^bb42, ^bb45, ^bb46, ^bb48, ^bb49, ^bb50, ^bb53, ^bb54
    %c0_i64 = arith.constant 0 : i64
    %1 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64, %c0_i64, %1, %0) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %0 : i8
  ^bb2(%2: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %2 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3:  // pred: ^bb4
    %c8000_i256 = arith.constant 8000 : i256
    %3 = llvm.load %arg3 : !llvm.ptr -> i64
    %4 = llvm.getelementptr %arg2[%3] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64 = arith.constant 1 : i64
    %5 = arith.addi %3, %c1_i64 : i64
    llvm.store %5, %arg3 : i64, !llvm.ptr
    llvm.store %c8000_i256, %4 : i256, !llvm.ptr
    cf.br ^bb9
  ^bb4:  // pred: ^bb6
    %c1024_i64 = arith.constant 1024 : i64
    %6 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_0 = arith.constant 1 : i64
    %7 = arith.addi %6, %c1_i64_0 : i64
    %8 = arith.cmpi ult, %c1024_i64, %7 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %8, ^bb1(%c92_i8 : i8), ^bb3
  ^bb5:  // pred: ^bb0
    %9 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %10 = arith.cmpi uge, %9, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %10, ^bb6, ^bb1(%c80_i8 : i8)
  ^bb6:  // pred: ^bb5
    %11 = arith.subi %9, %c3_i64 : i64
    llvm.store %11, %arg1 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb7:  // pred: ^bb8
    %c16384_i256 = arith.constant 16384 : i256
    %12 = llvm.load %arg3 : !llvm.ptr -> i64
    %13 = llvm.getelementptr %arg2[%12] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_1 = arith.constant 1 : i64
    %14 = arith.addi %12, %c1_i64_1 : i64
    llvm.store %14, %arg3 : i64, !llvm.ptr
    llvm.store %c16384_i256, %13 : i256, !llvm.ptr
    cf.br ^bb13
  ^bb8:  // pred: ^bb10
    %c1024_i64_2 = arith.constant 1024 : i64
    %15 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_3 = arith.constant 1 : i64
    %16 = arith.addi %15, %c1_i64_3 : i64
    %17 = arith.cmpi ult, %c1024_i64_2, %16 : i64
    %c92_i8_4 = arith.constant 92 : i8
    cf.cond_br %17, ^bb1(%c92_i8_4 : i8), ^bb7
  ^bb9:  // pred: ^bb3
    %18 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_5 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %19 = arith.cmpi uge, %18, %c3_i64_5 : i64
    %c80_i8_6 = arith.constant 80 : i8
    cf.cond_br %19, ^bb10, ^bb1(%c80_i8_6 : i8)
  ^bb10:  // pred: ^bb9
    %20 = arith.subi %18, %c3_i64_5 : i64
    llvm.store %20, %arg1 : i64, !llvm.ptr
    cf.br ^bb8
  ^bb11:  // pred: ^bb12
    %c32_i256 = arith.constant 32 : i256
    %21 = llvm.load %arg3 : !llvm.ptr -> i64
    %22 = llvm.getelementptr %arg2[%21] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_7 = arith.constant 1 : i64
    %23 = arith.addi %21, %c1_i64_7 : i64
    llvm.store %23, %arg3 : i64, !llvm.ptr
    llvm.store %c32_i256, %22 : i256, !llvm.ptr
    cf.br ^bb17
  ^bb12:  // pred: ^bb14
    %c1024_i64_8 = arith.constant 1024 : i64
    %24 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_9 = arith.constant 1 : i64
    %25 = arith.addi %24, %c1_i64_9 : i64
    %26 = arith.cmpi ult, %c1024_i64_8, %25 : i64
    %c92_i8_10 = arith.constant 92 : i8
    cf.cond_br %26, ^bb1(%c92_i8_10 : i8), ^bb11
  ^bb13:  // pred: ^bb7
    %27 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_11 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %28 = arith.cmpi uge, %27, %c3_i64_11 : i64
    %c80_i8_12 = arith.constant 80 : i8
    cf.cond_br %28, ^bb14, ^bb1(%c80_i8_12 : i8)
  ^bb14:  // pred: ^bb13
    %29 = arith.subi %27, %c3_i64_11 : i64
    llvm.store %29, %arg1 : i64, !llvm.ptr
    cf.br ^bb12
  ^bb15:  // pred: ^bb16
    %c32_i256_13 = arith.constant 32 : i256
    %30 = llvm.load %arg3 : !llvm.ptr -> i64
    %31 = llvm.getelementptr %arg2[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_14 = arith.constant 1 : i64
    %32 = arith.addi %30, %c1_i64_14 : i64
    llvm.store %32, %arg3 : i64, !llvm.ptr
    llvm.store %c32_i256_13, %31 : i256, !llvm.ptr
    cf.br ^bb21
  ^bb16:  // pred: ^bb18
    %c1024_i64_15 = arith.constant 1024 : i64
    %33 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_16 = arith.constant 1 : i64
    %34 = arith.addi %33, %c1_i64_16 : i64
    %35 = arith.cmpi ult, %c1024_i64_15, %34 : i64
    %c92_i8_17 = arith.constant 92 : i8
    cf.cond_br %35, ^bb1(%c92_i8_17 : i8), ^bb15
  ^bb17:  // pred: ^bb11
    %36 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_18 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %37 = arith.cmpi uge, %36, %c3_i64_18 : i64
    %c80_i8_19 = arith.constant 80 : i8
    cf.cond_br %37, ^bb18, ^bb1(%c80_i8_19 : i8)
  ^bb18:  // pred: ^bb17
    %38 = arith.subi %36, %c3_i64_18 : i64
    llvm.store %38, %arg1 : i64, !llvm.ptr
    cf.br ^bb16
  ^bb19:  // pred: ^bb20
    %c64_i256 = arith.constant 64 : i256
    %39 = llvm.load %arg3 : !llvm.ptr -> i64
    %40 = llvm.getelementptr %arg2[%39] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_20 = arith.constant 1 : i64
    %41 = arith.addi %39, %c1_i64_20 : i64
    llvm.store %41, %arg3 : i64, !llvm.ptr
    llvm.store %c64_i256, %40 : i256, !llvm.ptr
    cf.br ^bb25
  ^bb20:  // pred: ^bb22
    %c1024_i64_21 = arith.constant 1024 : i64
    %42 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_22 = arith.constant 1 : i64
    %43 = arith.addi %42, %c1_i64_22 : i64
    %44 = arith.cmpi ult, %c1024_i64_21, %43 : i64
    %c92_i8_23 = arith.constant 92 : i8
    cf.cond_br %44, ^bb1(%c92_i8_23 : i8), ^bb19
  ^bb21:  // pred: ^bb15
    %45 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_24 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %46 = arith.cmpi uge, %45, %c3_i64_24 : i64
    %c80_i8_25 = arith.constant 80 : i8
    cf.cond_br %46, ^bb22, ^bb1(%c80_i8_25 : i8)
  ^bb22:  // pred: ^bb21
    %47 = arith.subi %45, %c3_i64_24 : i64
    llvm.store %47, %arg1 : i64, !llvm.ptr
    cf.br ^bb20
  ^bb23:  // pred: ^bb24
    %c64_i256_26 = arith.constant 64 : i256
    %48 = llvm.load %arg3 : !llvm.ptr -> i64
    %49 = llvm.getelementptr %arg2[%48] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_27 = arith.constant 1 : i64
    %50 = arith.addi %48, %c1_i64_27 : i64
    llvm.store %50, %arg3 : i64, !llvm.ptr
    llvm.store %c64_i256_26, %49 : i256, !llvm.ptr
    cf.br ^bb37
  ^bb24:  // pred: ^bb26
    %c1024_i64_28 = arith.constant 1024 : i64
    %51 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_29 = arith.constant 1 : i64
    %52 = arith.addi %51, %c1_i64_29 : i64
    %53 = arith.cmpi ult, %c1024_i64_28, %52 : i64
    %c92_i8_30 = arith.constant 92 : i8
    cf.cond_br %53, ^bb1(%c92_i8_30 : i8), ^bb23
  ^bb25:  // pred: ^bb19
    %54 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_31 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %55 = arith.cmpi uge, %54, %c3_i64_31 : i64
    %c80_i8_32 = arith.constant 80 : i8
    cf.cond_br %55, ^bb26, ^bb1(%c80_i8_32 : i8)
  ^bb26:  // pred: ^bb25
    %56 = arith.subi %54, %c3_i64_31 : i64
    llvm.store %56, %arg1 : i64, !llvm.ptr
    cf.br ^bb24
  ^bb27:  // pred: ^bb36
    %57 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_33 = arith.constant 1 : i64
    %58 = arith.subi %57, %c1_i64_33 : i64
    %59 = llvm.getelementptr %arg2[%58] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %58, %arg3 : i64, !llvm.ptr
    %60 = llvm.load %59 : !llvm.ptr -> i256
    %61 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_34 = arith.constant 1 : i64
    %62 = arith.subi %61, %c1_i64_34 : i64
    %63 = llvm.getelementptr %arg2[%62] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %62, %arg3 : i64, !llvm.ptr
    %64 = llvm.load %63 : !llvm.ptr -> i256
    %65 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_35 = arith.constant 1 : i64
    %66 = arith.subi %65, %c1_i64_35 : i64
    %67 = llvm.getelementptr %arg2[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %66, %arg3 : i64, !llvm.ptr
    %68 = llvm.load %67 : !llvm.ptr -> i256
    %69 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_36 = arith.constant 1 : i64
    %70 = arith.subi %69, %c1_i64_36 : i64
    %71 = llvm.getelementptr %arg2[%70] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %70, %arg3 : i64, !llvm.ptr
    %72 = llvm.load %71 : !llvm.ptr -> i256
    %73 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_37 = arith.constant 1 : i64
    %74 = arith.subi %73, %c1_i64_37 : i64
    %75 = llvm.getelementptr %arg2[%74] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %74, %arg3 : i64, !llvm.ptr
    %76 = llvm.load %75 : !llvm.ptr -> i256
    %77 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_38 = arith.constant 1 : i64
    %78 = arith.subi %77, %c1_i64_38 : i64
    %79 = llvm.getelementptr %arg2[%78] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %78, %arg3 : i64, !llvm.ptr
    %80 = llvm.load %79 : !llvm.ptr -> i256
    %c0_i256 = arith.constant 0 : i256
    %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256
    %81 = arith.cmpi sgt, %72, %c18446744073709551615_i256 : i256
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %81, ^bb1(%c84_i8 : i8), ^bb28
  ^bb28:  // pred: ^bb27
    %82 = arith.trunci %72 : i256 to i64
    %c0_i64_39 = arith.constant 0 : i64
    %83 = arith.cmpi slt, %82, %c0_i64_39 : i64
    %c84_i8_40 = arith.constant 84 : i8
    cf.cond_br %83, ^bb1(%c84_i8_40 : i8), ^bb29
  ^bb29:  // pred: ^bb28
    %c0_i64_41 = arith.constant 0 : i64
    %84 = arith.cmpi ne, %82, %c0_i64_41 : i64
    cf.cond_br %84, ^bb40, ^bb30
  ^bb30:  // 2 preds: ^bb29, ^bb44
    %c18446744073709551615_i256_42 = arith.constant 18446744073709551615 : i256
    %85 = arith.cmpi sgt, %80, %c18446744073709551615_i256_42 : i256
    %c84_i8_43 = arith.constant 84 : i8
    cf.cond_br %85, ^bb1(%c84_i8_43 : i8), ^bb31
  ^bb31:  // pred: ^bb30
    %86 = arith.trunci %80 : i256 to i64
    %c0_i64_44 = arith.constant 0 : i64
    %87 = arith.cmpi slt, %86, %c0_i64_44 : i64
    %c84_i8_45 = arith.constant 84 : i8
    cf.cond_br %87, ^bb1(%c84_i8_45 : i8), ^bb32
  ^bb32:  // pred: ^bb31
    %c0_i64_46 = arith.constant 0 : i64
    %88 = arith.cmpi ne, %86, %c0_i64_46 : i64
    cf.cond_br %88, ^bb48, ^bb33
  ^bb33:  // 2 preds: ^bb32, ^bb52
    %89 = arith.trunci %68 : i256 to i64
    %90 = arith.trunci %76 : i256 to i64
    %91 = llvm.load %arg1 : !llvm.ptr -> i64
    %c1_i256 = arith.constant 1 : i256
    %92 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %c0_i256, %92 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i256_47 = arith.constant 1 : i256
    %93 = llvm.alloca %c1_i256_47 x i256 : (i256) -> !llvm.ptr
    llvm.store %60, %93 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i256_48 = arith.constant 1 : i256
    %94 = llvm.alloca %c1_i256_48 x i256 : (i256) -> !llvm.ptr
    llvm.store %64, %94 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i8 = arith.constant 1 : i8
    %95 = call @dora_fn_call(%arg0, %93, %94, %92, %89, %82, %90, %86, %91, %c1_i8) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
    %96 = llvm.getelementptr %95[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %97 = llvm.load %96 : !llvm.ptr -> i8
    %98 = llvm.getelementptr %95[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %99 = llvm.load %98 : !llvm.ptr -> i8
    %c0_i8 = arith.constant 0 : i8
    %100 = arith.cmpi ne, %99, %c0_i8 : i8
    cf.cond_br %100, ^bb1(%99 : i8), ^bb34
  ^bb34:  // pred: ^bb33
    %101 = llvm.getelementptr %95[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %102 = llvm.load %101 : !llvm.ptr -> i64
    %103 = llvm.load %arg1 : !llvm.ptr -> i64
    %104 = arith.cmpi ult, %103, %102 : i64
    scf.if %104 {
    } else {
      %172 = arith.subi %103, %102 : i64
      llvm.store %172, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_49 = arith.constant 80 : i8
    cf.cond_br %104, ^bb1(%c80_i8_49 : i8), ^bb35
  ^bb35:  // pred: ^bb34
    %105 = arith.extui %97 : i8 to i256
    %106 = llvm.load %arg3 : !llvm.ptr -> i64
    %107 = llvm.getelementptr %arg2[%106] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_50 = arith.constant 1 : i64
    %108 = arith.addi %106, %c1_i64_50 : i64
    llvm.store %108, %arg3 : i64, !llvm.ptr
    llvm.store %105, %107 : i256, !llvm.ptr
    cf.br ^bb39
  ^bb36:  // pred: ^bb38
    %c1024_i64_51 = arith.constant 1024 : i64
    %109 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-5_i64 = arith.constant -5 : i64
    %110 = arith.addi %109, %c-5_i64 : i64
    %c6_i64 = arith.constant 6 : i64
    %111 = arith.cmpi ult, %109, %c6_i64 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %111, ^bb1(%c91_i8 : i8), ^bb27
  ^bb37:  // pred: ^bb23
    %112 = llvm.load %arg1 : !llvm.ptr -> i64
    %c0_i64_52 = arith.constant 0 : i64
    call @dora_fn_nop() : () -> ()
    %113 = arith.cmpi uge, %112, %c0_i64_52 : i64
    %c80_i8_53 = arith.constant 80 : i8
    cf.cond_br %113, ^bb38, ^bb1(%c80_i8_53 : i8)
  ^bb38:  // pred: ^bb37
    %114 = arith.subi %112, %c0_i64_52 : i64
    llvm.store %114, %arg1 : i64, !llvm.ptr
    cf.br ^bb36
  ^bb39:  // pred: ^bb35
    %c0_i64_54 = arith.constant 0 : i64
    %c1_i8_55 = arith.constant 1 : i8
    %115 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_54, %c0_i64_54, %115, %c1_i8_55) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c1_i8_55 : i8
  ^bb40:  // pred: ^bb29
    %c18446744073709551615_i256_56 = arith.constant 18446744073709551615 : i256
    %116 = arith.cmpi sgt, %68, %c18446744073709551615_i256_56 : i256
    %c84_i8_57 = arith.constant 84 : i8
    cf.cond_br %116, ^bb1(%c84_i8_57 : i8), ^bb41
  ^bb41:  // pred: ^bb40
    %117 = arith.trunci %68 : i256 to i64
    %c0_i64_58 = arith.constant 0 : i64
    %118 = arith.cmpi slt, %117, %c0_i64_58 : i64
    %c84_i8_59 = arith.constant 84 : i8
    cf.cond_br %118, ^bb1(%c84_i8_59 : i8), ^bb42
  ^bb42:  // pred: ^bb41
    %119 = arith.addi %117, %82 : i64
    %c0_i64_60 = arith.constant 0 : i64
    %120 = arith.cmpi slt, %119, %c0_i64_60 : i64
    %c84_i8_61 = arith.constant 84 : i8
    cf.cond_br %120, ^bb1(%c84_i8_61 : i8), ^bb43
  ^bb43:  // pred: ^bb42
    %c31_i64 = arith.constant 31 : i64
    %c32_i64 = arith.constant 32 : i64
    %121 = arith.addi %119, %c31_i64 : i64
    %122 = arith.divui %121, %c32_i64 : i64
    %c32_i64_62 = arith.constant 32 : i64
    %123 = arith.muli %122, %c32_i64_62 : i64
    %124 = call @dora_fn_memory_size(%arg0) : (!llvm.ptr) -> i64
    %c31_i64_63 = arith.constant 31 : i64
    %c32_i64_64 = arith.constant 32 : i64
    %125 = arith.addi %124, %c31_i64_63 : i64
    %126 = arith.divui %125, %c32_i64_64 : i64
    %127 = arith.muli %126, %c32_i64_62 : i64
    %128 = arith.cmpi ult, %127, %123 : i64
    cf.cond_br %128, ^bb45, ^bb44
  ^bb44:  // 2 preds: ^bb43, ^bb47
    cf.br ^bb30
  ^bb45:  // pred: ^bb43
    %c3_i64_65 = arith.constant 3 : i64
    %c512_i64 = arith.constant 512 : i64
    %129 = arith.muli %126, %126 : i64
    %130 = arith.divui %129, %c512_i64 : i64
    %131 = arith.muli %126, %c3_i64_65 : i64
    %132 = arith.addi %130, %131 : i64
    %c3_i64_66 = arith.constant 3 : i64
    %c512_i64_67 = arith.constant 512 : i64
    %133 = arith.muli %122, %122 : i64
    %134 = arith.divui %133, %c512_i64_67 : i64
    %135 = arith.muli %122, %c3_i64_66 : i64
    %136 = arith.addi %134, %135 : i64
    %137 = arith.subi %136, %132 : i64
    %138 = llvm.load %arg1 : !llvm.ptr -> i64
    %139 = arith.cmpi ult, %138, %137 : i64
    scf.if %139 {
    } else {
      %172 = arith.subi %138, %137 : i64
      llvm.store %172, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_68 = arith.constant 80 : i8
    cf.cond_br %139, ^bb1(%c80_i8_68 : i8), ^bb46
  ^bb46:  // pred: ^bb45
    %140 = call @dora_fn_extend_memory(%arg0, %123) : (!llvm.ptr, i64) -> !llvm.ptr
    %141 = llvm.getelementptr %140[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %142 = llvm.load %141 : !llvm.ptr -> i8
    %c0_i8_69 = arith.constant 0 : i8
    %143 = arith.cmpi ne, %142, %c0_i8_69 : i8
    cf.cond_br %143, ^bb1(%142 : i8), ^bb47
  ^bb47:  // pred: ^bb46
    cf.br ^bb44
  ^bb48:  // pred: ^bb32
    %c18446744073709551615_i256_70 = arith.constant 18446744073709551615 : i256
    %144 = arith.cmpi sgt, %76, %c18446744073709551615_i256_70 : i256
    %c84_i8_71 = arith.constant 84 : i8
    cf.cond_br %144, ^bb1(%c84_i8_71 : i8), ^bb49
  ^bb49:  // pred: ^bb48
    %145 = arith.trunci %76 : i256 to i64
    %c0_i64_72 = arith.constant 0 : i64
    %146 = arith.cmpi slt, %145, %c0_i64_72 : i64
    %c84_i8_73 = arith.constant 84 : i8
    cf.cond_br %146, ^bb1(%c84_i8_73 : i8), ^bb50
  ^bb50:  // pred: ^bb49
    %147 = arith.addi %145, %86 : i64
    %c0_i64_74 = arith.constant 0 : i64
    %148 = arith.cmpi slt, %147, %c0_i64_74 : i64
    %c84_i8_75 = arith.constant 84 : i8
    cf.cond_br %148, ^bb1(%c84_i8_75 : i8), ^bb51
  ^bb51:  // pred: ^bb50
    %c31_i64_76 = arith.constant 31 : i64
    %c32_i64_77 = arith.constant 32 : i64
    %149 = arith.addi %147, %c31_i64_76 : i64
    %150 = arith.divui %149, %c32_i64_77 : i64
    %c32_i64_78 = arith.constant 32 : i64
    %151 = arith.muli %150, %c32_i64_78 : i64
    %152 = call @dora_fn_memory_size(%arg0) : (!llvm.ptr) -> i64
    %c31_i64_79 = arith.constant 31 : i64
    %c32_i64_80 = arith.constant 32 : i64
    %153 = arith.addi %152, %c31_i64_79 : i64
    %154 = arith.divui %153, %c32_i64_80 : i64
    %155 = arith.muli %154, %c32_i64_78 : i64
    %156 = arith.cmpi ult, %155, %151 : i64
    cf.cond_br %156, ^bb53, ^bb52
  ^bb52:  // 2 preds: ^bb51, ^bb55
    cf.br ^bb33
  ^bb53:  // pred: ^bb51
    %c3_i64_81 = arith.constant 3 : i64
    %c512_i64_82 = arith.constant 512 : i64
    %157 = arith.muli %154, %154 : i64
    %158 = arith.divui %157, %c512_i64_82 : i64
    %159 = arith.muli %154, %c3_i64_81 : i64
    %160 = arith.addi %158, %159 : i64
    %c3_i64_83 = arith.constant 3 : i64
    %c512_i64_84 = arith.constant 512 : i64
    %161 = arith.muli %150, %150 : i64
    %162 = arith.divui %161, %c512_i64_84 : i64
    %163 = arith.muli %150, %c3_i64_83 : i64
    %164 = arith.addi %162, %163 : i64
    %165 = arith.subi %164, %160 : i64
    %166 = llvm.load %arg1 : !llvm.ptr -> i64
    %167 = arith.cmpi ult, %166, %165 : i64
    scf.if %167 {
    } else {
      %172 = arith.subi %166, %165 : i64
      llvm.store %172, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_85 = arith.constant 80 : i8
    cf.cond_br %167, ^bb1(%c80_i8_85 : i8), ^bb54
  ^bb54:  // pred: ^bb53
    %168 = call @dora_fn_extend_memory(%arg0, %151) : (!llvm.ptr, i64) -> !llvm.ptr
    %169 = llvm.getelementptr %168[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %170 = llvm.load %169 : !llvm.ptr -> i8
    %c0_i8_86 = arith.constant 0 : i8
    %171 = arith.cmpi ne, %170, %c0_i8_86 : i8
    cf.cond_br %171, ^bb1(%170 : i8), ^bb55
  ^bb55:  // pred: ^bb54
    cf.br ^bb52
  }
}
