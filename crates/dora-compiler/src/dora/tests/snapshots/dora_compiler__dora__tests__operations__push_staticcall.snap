---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  func.func private @dora_fn_nop()
  func.func private @dora_fn_tracing(!llvm.ptr, i8, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_fn_is_static(!llvm.ptr) -> i8
  func.func private @dora_fn_exp(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_chainid(!llvm.ptr) -> i64
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gaslimit_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_memory_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_memory_size(!llvm.ptr) -> i64
  func.func private @dora_fn_code_copy(!llvm.ptr, !llvm.ptr, i64, i64)
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_call(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_returndata_copy(!llvm.ptr, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_tload(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_tstore(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @op250(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr, %arg4: !llvm.ptr) -> i8 {
    cf.br ^bb13
  ^bb1(%0: i8):  // 18 preds: ^bb3, ^bb4, ^bb6, ^bb7, ^bb9, ^bb10, ^bb12, ^bb13, ^bb16, ^bb17, ^bb18, ^bb21, ^bb22, ^bb24, ^bb25, ^bb26, ^bb29, ^bb30
    %c0_i64 = arith.constant 0 : i64
    %1 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64, %c0_i64, %1, %0) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %0 : i8
  ^bb2(%2: i8):  // no predecessors
    return %2 : i8
  ^bb3:  // pred: ^bb12
    %3 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %4 = llvm.getelementptr %3[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %5 = llvm.load %4 : !llvm.ptr -> i256
    llvm.store %4, %arg4 : !llvm.ptr, !llvm.ptr
    %6 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %6[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %8 = llvm.load %7 : !llvm.ptr -> i256
    llvm.store %7, %arg4 : !llvm.ptr, !llvm.ptr
    %9 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.getelementptr %9[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %11 = llvm.load %10 : !llvm.ptr -> i256
    llvm.store %10, %arg4 : !llvm.ptr, !llvm.ptr
    %12 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.getelementptr %12[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %14 = llvm.load %13 : !llvm.ptr -> i256
    llvm.store %13, %arg4 : !llvm.ptr, !llvm.ptr
    %15 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %16 = llvm.getelementptr %15[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %17 = llvm.load %16 : !llvm.ptr -> i256
    llvm.store %16, %arg4 : !llvm.ptr, !llvm.ptr
    %18 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.getelementptr %18[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %20 = llvm.load %19 : !llvm.ptr -> i256
    llvm.store %19, %arg4 : !llvm.ptr, !llvm.ptr
    %c0_i256 = arith.constant 0 : i256
    %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256
    %21 = arith.cmpi sgt, %14, %c18446744073709551615_i256 : i256
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %21, ^bb1(%c84_i8 : i8), ^bb4
  ^bb4:  // pred: ^bb3
    %22 = arith.trunci %14 : i256 to i64
    %c0_i64_0 = arith.constant 0 : i64
    %23 = arith.cmpi slt, %22, %c0_i64_0 : i64
    %c84_i8_1 = arith.constant 84 : i8
    cf.cond_br %23, ^bb1(%c84_i8_1 : i8), ^bb5
  ^bb5:  // pred: ^bb4
    %c0_i64_2 = arith.constant 0 : i64
    %24 = arith.cmpi ne, %22, %c0_i64_2 : i64
    cf.cond_br %24, ^bb16, ^bb6
  ^bb6:  // 2 preds: ^bb5, ^bb20
    %c18446744073709551615_i256_3 = arith.constant 18446744073709551615 : i256
    %25 = arith.cmpi sgt, %20, %c18446744073709551615_i256_3 : i256
    %c84_i8_4 = arith.constant 84 : i8
    cf.cond_br %25, ^bb1(%c84_i8_4 : i8), ^bb7
  ^bb7:  // pred: ^bb6
    %26 = arith.trunci %20 : i256 to i64
    %c0_i64_5 = arith.constant 0 : i64
    %27 = arith.cmpi slt, %26, %c0_i64_5 : i64
    %c84_i8_6 = arith.constant 84 : i8
    cf.cond_br %27, ^bb1(%c84_i8_6 : i8), ^bb8
  ^bb8:  // pred: ^bb7
    %c0_i64_7 = arith.constant 0 : i64
    %28 = arith.cmpi ne, %26, %c0_i64_7 : i64
    cf.cond_br %28, ^bb24, ^bb9
  ^bb9:  // 2 preds: ^bb8, ^bb28
    %29 = arith.trunci %11 : i256 to i64
    %30 = arith.trunci %17 : i256 to i64
    %31 = llvm.load %arg1 : !llvm.ptr -> i64
    %c1_i256 = arith.constant 1 : i256
    %32 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %c0_i256, %32 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i256_8 = arith.constant 1 : i256
    %33 = llvm.alloca %c1_i256_8 x i256 : (i256) -> !llvm.ptr
    llvm.store %5, %33 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i256_9 = arith.constant 1 : i256
    %34 = llvm.alloca %c1_i256_9 x i256 : (i256) -> !llvm.ptr
    llvm.store %8, %34 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i8 = arith.constant 1 : i8
    %35 = call @dora_fn_call(%arg0, %33, %34, %32, %29, %22, %30, %26, %31, %c1_i8) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
    %36 = llvm.getelementptr %35[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %37 = llvm.load %36 : !llvm.ptr -> i64
    %38 = llvm.getelementptr %35[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %39 = llvm.load %38 : !llvm.ptr -> i8
    %c0_i8 = arith.constant 0 : i8
    %40 = arith.cmpi ne, %39, %c0_i8 : i8
    cf.cond_br %40, ^bb1(%39 : i8), ^bb10
  ^bb10:  // pred: ^bb9
    %41 = llvm.getelementptr %35[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %42 = llvm.load %41 : !llvm.ptr -> i64
    %43 = llvm.load %arg1 : !llvm.ptr -> i64
    %44 = arith.cmpi ult, %43, %42 : i64
    scf.if %44 {
    } else {
      %110 = arith.subi %43, %42 : i64
      llvm.store %110, %arg1 : i64, !llvm.ptr
    }
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %44, ^bb1(%c80_i8 : i8), ^bb11
  ^bb11:  // pred: ^bb10
    %45 = arith.extui %37 : i64 to i256
    %46 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    llvm.store %45, %46 : i256, !llvm.ptr
    %47 = llvm.getelementptr %46[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %47, %arg4 : !llvm.ptr, !llvm.ptr
    cf.br ^bb15
  ^bb12:  // pred: ^bb14
    %c1024_i64 = arith.constant 1024 : i64
    %48 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-5_i64 = arith.constant -5 : i64
    %49 = arith.addi %48, %c-5_i64 : i64
    llvm.store %49, %arg3 : i64, !llvm.ptr
    %c6_i64 = arith.constant 6 : i64
    %50 = arith.cmpi ult, %48, %c6_i64 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %50, ^bb1(%c91_i8 : i8), ^bb3
  ^bb13:  // pred: ^bb0
    %51 = llvm.load %arg1 : !llvm.ptr -> i64
    %c0_i64_10 = arith.constant 0 : i64
    call @dora_fn_nop() : () -> ()
    %52 = arith.cmpi uge, %51, %c0_i64_10 : i64
    %c80_i8_11 = arith.constant 80 : i8
    cf.cond_br %52, ^bb14, ^bb1(%c80_i8_11 : i8)
  ^bb14:  // pred: ^bb13
    %53 = arith.subi %51, %c0_i64_10 : i64
    llvm.store %53, %arg1 : i64, !llvm.ptr
    cf.br ^bb12
  ^bb15:  // pred: ^bb11
    %c0_i8_12 = arith.constant 0 : i8
    return %c0_i8_12 : i8
  ^bb16:  // pred: ^bb5
    %c18446744073709551615_i256_13 = arith.constant 18446744073709551615 : i256
    %54 = arith.cmpi sgt, %11, %c18446744073709551615_i256_13 : i256
    %c84_i8_14 = arith.constant 84 : i8
    cf.cond_br %54, ^bb1(%c84_i8_14 : i8), ^bb17
  ^bb17:  // pred: ^bb16
    %55 = arith.trunci %11 : i256 to i64
    %c0_i64_15 = arith.constant 0 : i64
    %56 = arith.cmpi slt, %55, %c0_i64_15 : i64
    %c84_i8_16 = arith.constant 84 : i8
    cf.cond_br %56, ^bb1(%c84_i8_16 : i8), ^bb18
  ^bb18:  // pred: ^bb17
    %57 = arith.addi %55, %22 : i64
    %c0_i64_17 = arith.constant 0 : i64
    %58 = arith.cmpi slt, %57, %c0_i64_17 : i64
    %c84_i8_18 = arith.constant 84 : i8
    cf.cond_br %58, ^bb1(%c84_i8_18 : i8), ^bb19
  ^bb19:  // pred: ^bb18
    %c31_i64 = arith.constant 31 : i64
    %c32_i64 = arith.constant 32 : i64
    %59 = arith.addi %57, %c31_i64 : i64
    %60 = arith.divui %59, %c32_i64 : i64
    %c32_i64_19 = arith.constant 32 : i64
    %61 = arith.muli %60, %c32_i64_19 : i64
    %62 = call @dora_fn_memory_size(%arg0) : (!llvm.ptr) -> i64
    %c31_i64_20 = arith.constant 31 : i64
    %c32_i64_21 = arith.constant 32 : i64
    %63 = arith.addi %62, %c31_i64_20 : i64
    %64 = arith.divui %63, %c32_i64_21 : i64
    %65 = arith.muli %64, %c32_i64_19 : i64
    %66 = arith.cmpi ult, %65, %61 : i64
    cf.cond_br %66, ^bb21, ^bb20
  ^bb20:  // 2 preds: ^bb19, ^bb23
    cf.br ^bb6
  ^bb21:  // pred: ^bb19
    %c3_i64 = arith.constant 3 : i64
    %c512_i64 = arith.constant 512 : i64
    %67 = arith.muli %64, %64 : i64
    %68 = arith.divui %67, %c512_i64 : i64
    %69 = arith.muli %64, %c3_i64 : i64
    %70 = arith.addi %68, %69 : i64
    %c3_i64_22 = arith.constant 3 : i64
    %c512_i64_23 = arith.constant 512 : i64
    %71 = arith.muli %60, %60 : i64
    %72 = arith.divui %71, %c512_i64_23 : i64
    %73 = arith.muli %60, %c3_i64_22 : i64
    %74 = arith.addi %72, %73 : i64
    %75 = arith.subi %74, %70 : i64
    %76 = llvm.load %arg1 : !llvm.ptr -> i64
    %77 = arith.cmpi ult, %76, %75 : i64
    scf.if %77 {
    } else {
      %110 = arith.subi %76, %75 : i64
      llvm.store %110, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_24 = arith.constant 80 : i8
    cf.cond_br %77, ^bb1(%c80_i8_24 : i8), ^bb22
  ^bb22:  // pred: ^bb21
    %78 = call @dora_fn_extend_memory(%arg0, %61) : (!llvm.ptr, i64) -> !llvm.ptr
    %79 = llvm.getelementptr %78[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %80 = llvm.load %79 : !llvm.ptr -> i8
    %c0_i8_25 = arith.constant 0 : i8
    %81 = arith.cmpi ne, %80, %c0_i8_25 : i8
    cf.cond_br %81, ^bb1(%80 : i8), ^bb23
  ^bb23:  // pred: ^bb22
    cf.br ^bb20
  ^bb24:  // pred: ^bb8
    %c18446744073709551615_i256_26 = arith.constant 18446744073709551615 : i256
    %82 = arith.cmpi sgt, %17, %c18446744073709551615_i256_26 : i256
    %c84_i8_27 = arith.constant 84 : i8
    cf.cond_br %82, ^bb1(%c84_i8_27 : i8), ^bb25
  ^bb25:  // pred: ^bb24
    %83 = arith.trunci %17 : i256 to i64
    %c0_i64_28 = arith.constant 0 : i64
    %84 = arith.cmpi slt, %83, %c0_i64_28 : i64
    %c84_i8_29 = arith.constant 84 : i8
    cf.cond_br %84, ^bb1(%c84_i8_29 : i8), ^bb26
  ^bb26:  // pred: ^bb25
    %85 = arith.addi %83, %26 : i64
    %c0_i64_30 = arith.constant 0 : i64
    %86 = arith.cmpi slt, %85, %c0_i64_30 : i64
    %c84_i8_31 = arith.constant 84 : i8
    cf.cond_br %86, ^bb1(%c84_i8_31 : i8), ^bb27
  ^bb27:  // pred: ^bb26
    %c31_i64_32 = arith.constant 31 : i64
    %c32_i64_33 = arith.constant 32 : i64
    %87 = arith.addi %85, %c31_i64_32 : i64
    %88 = arith.divui %87, %c32_i64_33 : i64
    %c32_i64_34 = arith.constant 32 : i64
    %89 = arith.muli %88, %c32_i64_34 : i64
    %90 = call @dora_fn_memory_size(%arg0) : (!llvm.ptr) -> i64
    %c31_i64_35 = arith.constant 31 : i64
    %c32_i64_36 = arith.constant 32 : i64
    %91 = arith.addi %90, %c31_i64_35 : i64
    %92 = arith.divui %91, %c32_i64_36 : i64
    %93 = arith.muli %92, %c32_i64_34 : i64
    %94 = arith.cmpi ult, %93, %89 : i64
    cf.cond_br %94, ^bb29, ^bb28
  ^bb28:  // 2 preds: ^bb27, ^bb31
    cf.br ^bb9
  ^bb29:  // pred: ^bb27
    %c3_i64_37 = arith.constant 3 : i64
    %c512_i64_38 = arith.constant 512 : i64
    %95 = arith.muli %92, %92 : i64
    %96 = arith.divui %95, %c512_i64_38 : i64
    %97 = arith.muli %92, %c3_i64_37 : i64
    %98 = arith.addi %96, %97 : i64
    %c3_i64_39 = arith.constant 3 : i64
    %c512_i64_40 = arith.constant 512 : i64
    %99 = arith.muli %88, %88 : i64
    %100 = arith.divui %99, %c512_i64_40 : i64
    %101 = arith.muli %88, %c3_i64_39 : i64
    %102 = arith.addi %100, %101 : i64
    %103 = arith.subi %102, %98 : i64
    %104 = llvm.load %arg1 : !llvm.ptr -> i64
    %105 = arith.cmpi ult, %104, %103 : i64
    scf.if %105 {
    } else {
      %110 = arith.subi %104, %103 : i64
      llvm.store %110, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_41 = arith.constant 80 : i8
    cf.cond_br %105, ^bb1(%c80_i8_41 : i8), ^bb30
  ^bb30:  // pred: ^bb29
    %106 = call @dora_fn_extend_memory(%arg0, %89) : (!llvm.ptr, i64) -> !llvm.ptr
    %107 = llvm.getelementptr %106[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %108 = llvm.load %107 : !llvm.ptr -> i8
    %c0_i8_42 = arith.constant 0 : i8
    %109 = arith.cmpi ne, %108, %c0_i8_42 : i8
    cf.cond_br %109, ^bb1(%108 : i8), ^bb31
  ^bb31:  // pred: ^bb30
    cf.br ^bb28
  }
  func.func public @main(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr) -> i8 attributes {llvm.emit_c_interface} {
    %c0_i64 = arith.constant 0 : i64
    %0 = llvm.alloca %c0_i64 x !llvm.ptr : (i64) -> !llvm.ptr
    llvm.store %arg2, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8 = arith.constant 0 : i8
    %c0_i8_0 = arith.constant 0 : i8
    %1 = arith.cmpi ne, %c0_i8, %c0_i8_0 : i8
    cf.cond_br %1, ^bb1(%c0_i8 : i8), ^bb6
  ^bb1(%2: i8):  // 19 preds: ^bb0, ^bb2, ^bb4, ^bb5, ^bb6, ^bb8, ^bb9, ^bb10, ^bb12, ^bb13, ^bb14, ^bb16, ^bb17, ^bb18, ^bb20, ^bb21, ^bb22, ^bb25, ^bb26
    %c0_i64_1 = arith.constant 0 : i64
    %3 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_1, %c0_i64_1, %3, %2) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %2 : i8
  ^bb2(%4: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %4 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3(%5: i8):  // 2 preds: ^bb24, ^bb28
    return %5 : i8
  ^bb4:  // pred: ^bb5
    %c8000_i256 = arith.constant 8000 : i256
    %6 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c8000_i256, %6 : i256, !llvm.ptr
    %7 = llvm.getelementptr %6[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %7, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_2 = arith.constant 0 : i8
    %8 = arith.cmpi ne, %c0_i8_2, %c0_i8_0 : i8
    cf.cond_br %8, ^bb1(%c0_i8_2 : i8), ^bb10
  ^bb5:  // pred: ^bb7
    %c1024_i64 = arith.constant 1024 : i64
    %9 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %10 = arith.addi %9, %c1_i64 : i64
    llvm.store %10, %arg3 : i64, !llvm.ptr
    %11 = arith.cmpi ult, %c1024_i64, %10 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %11, ^bb1(%c92_i8 : i8), ^bb4
  ^bb6:  // pred: ^bb0
    %12 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %13 = arith.cmpi uge, %12, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %13, ^bb7, ^bb1(%c80_i8 : i8)
  ^bb7:  // pred: ^bb6
    %14 = arith.subi %12, %c3_i64 : i64
    llvm.store %14, %arg1 : i64, !llvm.ptr
    cf.br ^bb5
  ^bb8:  // pred: ^bb9
    %c16384_i256 = arith.constant 16384 : i256
    %15 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c16384_i256, %15 : i256, !llvm.ptr
    %16 = llvm.getelementptr %15[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %16, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_3 = arith.constant 0 : i8
    %17 = arith.cmpi ne, %c0_i8_3, %c0_i8_0 : i8
    cf.cond_br %17, ^bb1(%c0_i8_3 : i8), ^bb14
  ^bb9:  // pred: ^bb11
    %c1024_i64_4 = arith.constant 1024 : i64
    %18 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_5 = arith.constant 1 : i64
    %19 = arith.addi %18, %c1_i64_5 : i64
    llvm.store %19, %arg3 : i64, !llvm.ptr
    %20 = arith.cmpi ult, %c1024_i64_4, %19 : i64
    %c92_i8_6 = arith.constant 92 : i8
    cf.cond_br %20, ^bb1(%c92_i8_6 : i8), ^bb8
  ^bb10:  // pred: ^bb4
    %21 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_7 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %22 = arith.cmpi uge, %21, %c3_i64_7 : i64
    %c80_i8_8 = arith.constant 80 : i8
    cf.cond_br %22, ^bb11, ^bb1(%c80_i8_8 : i8)
  ^bb11:  // pred: ^bb10
    %23 = arith.subi %21, %c3_i64_7 : i64
    llvm.store %23, %arg1 : i64, !llvm.ptr
    cf.br ^bb9
  ^bb12:  // pred: ^bb13
    %c32_i256 = arith.constant 32 : i256
    %24 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c32_i256, %24 : i256, !llvm.ptr
    %25 = llvm.getelementptr %24[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %25, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_9 = arith.constant 0 : i8
    %26 = arith.cmpi ne, %c0_i8_9, %c0_i8_0 : i8
    cf.cond_br %26, ^bb1(%c0_i8_9 : i8), ^bb18
  ^bb13:  // pred: ^bb15
    %c1024_i64_10 = arith.constant 1024 : i64
    %27 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_11 = arith.constant 1 : i64
    %28 = arith.addi %27, %c1_i64_11 : i64
    llvm.store %28, %arg3 : i64, !llvm.ptr
    %29 = arith.cmpi ult, %c1024_i64_10, %28 : i64
    %c92_i8_12 = arith.constant 92 : i8
    cf.cond_br %29, ^bb1(%c92_i8_12 : i8), ^bb12
  ^bb14:  // pred: ^bb8
    %30 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_13 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %31 = arith.cmpi uge, %30, %c3_i64_13 : i64
    %c80_i8_14 = arith.constant 80 : i8
    cf.cond_br %31, ^bb15, ^bb1(%c80_i8_14 : i8)
  ^bb15:  // pred: ^bb14
    %32 = arith.subi %30, %c3_i64_13 : i64
    llvm.store %32, %arg1 : i64, !llvm.ptr
    cf.br ^bb13
  ^bb16:  // pred: ^bb17
    %c32_i256_15 = arith.constant 32 : i256
    %33 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c32_i256_15, %33 : i256, !llvm.ptr
    %34 = llvm.getelementptr %33[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %34, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_16 = arith.constant 0 : i8
    %35 = arith.cmpi ne, %c0_i8_16, %c0_i8_0 : i8
    cf.cond_br %35, ^bb1(%c0_i8_16 : i8), ^bb22
  ^bb17:  // pred: ^bb19
    %c1024_i64_17 = arith.constant 1024 : i64
    %36 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_18 = arith.constant 1 : i64
    %37 = arith.addi %36, %c1_i64_18 : i64
    llvm.store %37, %arg3 : i64, !llvm.ptr
    %38 = arith.cmpi ult, %c1024_i64_17, %37 : i64
    %c92_i8_19 = arith.constant 92 : i8
    cf.cond_br %38, ^bb1(%c92_i8_19 : i8), ^bb16
  ^bb18:  // pred: ^bb12
    %39 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_20 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %40 = arith.cmpi uge, %39, %c3_i64_20 : i64
    %c80_i8_21 = arith.constant 80 : i8
    cf.cond_br %40, ^bb19, ^bb1(%c80_i8_21 : i8)
  ^bb19:  // pred: ^bb18
    %41 = arith.subi %39, %c3_i64_20 : i64
    llvm.store %41, %arg1 : i64, !llvm.ptr
    cf.br ^bb17
  ^bb20:  // pred: ^bb21
    %c64_i256 = arith.constant 64 : i256
    %42 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c64_i256, %42 : i256, !llvm.ptr
    %43 = llvm.getelementptr %42[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %43, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_22 = arith.constant 0 : i8
    %44 = arith.cmpi ne, %c0_i8_22, %c0_i8_0 : i8
    cf.cond_br %44, ^bb1(%c0_i8_22 : i8), ^bb26
  ^bb21:  // pred: ^bb23
    %c1024_i64_23 = arith.constant 1024 : i64
    %45 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_24 = arith.constant 1 : i64
    %46 = arith.addi %45, %c1_i64_24 : i64
    llvm.store %46, %arg3 : i64, !llvm.ptr
    %47 = arith.cmpi ult, %c1024_i64_23, %46 : i64
    %c92_i8_25 = arith.constant 92 : i8
    cf.cond_br %47, ^bb1(%c92_i8_25 : i8), ^bb20
  ^bb22:  // pred: ^bb16
    %48 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_26 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %49 = arith.cmpi uge, %48, %c3_i64_26 : i64
    %c80_i8_27 = arith.constant 80 : i8
    cf.cond_br %49, ^bb23, ^bb1(%c80_i8_27 : i8)
  ^bb23:  // pred: ^bb22
    %50 = arith.subi %48, %c3_i64_26 : i64
    llvm.store %50, %arg1 : i64, !llvm.ptr
    cf.br ^bb21
  ^bb24:  // pred: ^bb25
    %c64_i256_28 = arith.constant 64 : i256
    %51 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c64_i256_28, %51 : i256, !llvm.ptr
    %52 = llvm.getelementptr %51[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %52, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_29 = arith.constant 0 : i8
    %53 = arith.cmpi ne, %c0_i8_29, %c0_i8_0 : i8
    cf.cond_br %53, ^bb3(%c0_i8_29 : i8), ^bb28
  ^bb25:  // pred: ^bb27
    %c1024_i64_30 = arith.constant 1024 : i64
    %54 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_31 = arith.constant 1 : i64
    %55 = arith.addi %54, %c1_i64_31 : i64
    llvm.store %55, %arg3 : i64, !llvm.ptr
    %56 = arith.cmpi ult, %c1024_i64_30, %55 : i64
    %c92_i8_32 = arith.constant 92 : i8
    cf.cond_br %56, ^bb1(%c92_i8_32 : i8), ^bb24
  ^bb26:  // pred: ^bb20
    %57 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_33 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %58 = arith.cmpi uge, %57, %c3_i64_33 : i64
    %c80_i8_34 = arith.constant 80 : i8
    cf.cond_br %58, ^bb27, ^bb1(%c80_i8_34 : i8)
  ^bb27:  // pred: ^bb26
    %59 = arith.subi %57, %c3_i64_33 : i64
    llvm.store %59, %arg1 : i64, !llvm.ptr
    cf.br ^bb25
  ^bb28:  // pred: ^bb24
    %60 = call @op250(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %61 = arith.cmpi ne, %60, %c0_i8_0 : i8
    cf.cond_br %61, ^bb3(%60 : i8), ^bb29
  ^bb29:  // pred: ^bb28
    %c0_i64_35 = arith.constant 0 : i64
    %c2_i8 = arith.constant 2 : i8
    %62 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_35, %c0_i64_35, %62, %c2_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c2_i8 : i8
  }
}
