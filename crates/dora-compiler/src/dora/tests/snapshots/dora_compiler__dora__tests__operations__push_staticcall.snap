---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  func.func private @dora_fn_nop()
  func.func private @dora_fn_tracing(!llvm.ptr, i8, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_fn_is_static(!llvm.ptr) -> i8
  func.func private @dora_fn_exp(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_chainid(!llvm.ptr) -> i64
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gaslimit_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_memory_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_memory_size(!llvm.ptr) -> i64
  func.func private @dora_fn_code_copy(!llvm.ptr, !llvm.ptr, i64, i64)
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_call(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_returndata_copy(!llvm.ptr, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_tload(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_tstore(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func public @main(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr) -> i8 attributes {llvm.emit_c_interface} {
    %c0_i64 = arith.constant 0 : i64
    %0 = llvm.alloca %c0_i64 x !llvm.ptr : (i64) -> !llvm.ptr
    llvm.store %arg2, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb5
  ^bb1(%1: i8):  // 31 preds: ^bb2, ^bb4, ^bb5, ^bb8, ^bb9, ^bb12, ^bb13, ^bb16, ^bb17, ^bb20, ^bb21, ^bb24, ^bb25, ^bb27, ^bb28, ^bb30, ^bb31, ^bb33, ^bb34, ^bb36, ^bb37, ^bb40, ^bb41, ^bb42, ^bb45, ^bb46, ^bb48, ^bb49, ^bb50, ^bb53, ^bb54
    %c0_i64_0 = arith.constant 0 : i64
    %2 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_0, %c0_i64_0, %2, %1) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %1 : i8
  ^bb2(%3: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %3 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3:  // pred: ^bb4
    %c8000_i256 = arith.constant 8000 : i256
    %4 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c8000_i256, %4 : i256, !llvm.ptr
    %5 = llvm.getelementptr %4[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %5, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb9
  ^bb4:  // pred: ^bb6
    %c1024_i64 = arith.constant 1024 : i64
    %6 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %7 = arith.addi %6, %c1_i64 : i64
    llvm.store %7, %arg3 : i64, !llvm.ptr
    %8 = arith.cmpi ult, %c1024_i64, %7 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %8, ^bb1(%c92_i8 : i8), ^bb3
  ^bb5:  // pred: ^bb0
    %9 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %10 = arith.cmpi uge, %9, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %10, ^bb6, ^bb1(%c80_i8 : i8)
  ^bb6:  // pred: ^bb5
    %11 = arith.subi %9, %c3_i64 : i64
    llvm.store %11, %arg1 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb7:  // pred: ^bb8
    %c16384_i256 = arith.constant 16384 : i256
    %12 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c16384_i256, %12 : i256, !llvm.ptr
    %13 = llvm.getelementptr %12[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %13, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb13
  ^bb8:  // pred: ^bb10
    %c1024_i64_1 = arith.constant 1024 : i64
    %14 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_2 = arith.constant 1 : i64
    %15 = arith.addi %14, %c1_i64_2 : i64
    llvm.store %15, %arg3 : i64, !llvm.ptr
    %16 = arith.cmpi ult, %c1024_i64_1, %15 : i64
    %c92_i8_3 = arith.constant 92 : i8
    cf.cond_br %16, ^bb1(%c92_i8_3 : i8), ^bb7
  ^bb9:  // pred: ^bb3
    %17 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_4 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %18 = arith.cmpi uge, %17, %c3_i64_4 : i64
    %c80_i8_5 = arith.constant 80 : i8
    cf.cond_br %18, ^bb10, ^bb1(%c80_i8_5 : i8)
  ^bb10:  // pred: ^bb9
    %19 = arith.subi %17, %c3_i64_4 : i64
    llvm.store %19, %arg1 : i64, !llvm.ptr
    cf.br ^bb8
  ^bb11:  // pred: ^bb12
    %c32_i256 = arith.constant 32 : i256
    %20 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c32_i256, %20 : i256, !llvm.ptr
    %21 = llvm.getelementptr %20[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %21, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb17
  ^bb12:  // pred: ^bb14
    %c1024_i64_6 = arith.constant 1024 : i64
    %22 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_7 = arith.constant 1 : i64
    %23 = arith.addi %22, %c1_i64_7 : i64
    llvm.store %23, %arg3 : i64, !llvm.ptr
    %24 = arith.cmpi ult, %c1024_i64_6, %23 : i64
    %c92_i8_8 = arith.constant 92 : i8
    cf.cond_br %24, ^bb1(%c92_i8_8 : i8), ^bb11
  ^bb13:  // pred: ^bb7
    %25 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_9 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %26 = arith.cmpi uge, %25, %c3_i64_9 : i64
    %c80_i8_10 = arith.constant 80 : i8
    cf.cond_br %26, ^bb14, ^bb1(%c80_i8_10 : i8)
  ^bb14:  // pred: ^bb13
    %27 = arith.subi %25, %c3_i64_9 : i64
    llvm.store %27, %arg1 : i64, !llvm.ptr
    cf.br ^bb12
  ^bb15:  // pred: ^bb16
    %c32_i256_11 = arith.constant 32 : i256
    %28 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c32_i256_11, %28 : i256, !llvm.ptr
    %29 = llvm.getelementptr %28[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %29, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb21
  ^bb16:  // pred: ^bb18
    %c1024_i64_12 = arith.constant 1024 : i64
    %30 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_13 = arith.constant 1 : i64
    %31 = arith.addi %30, %c1_i64_13 : i64
    llvm.store %31, %arg3 : i64, !llvm.ptr
    %32 = arith.cmpi ult, %c1024_i64_12, %31 : i64
    %c92_i8_14 = arith.constant 92 : i8
    cf.cond_br %32, ^bb1(%c92_i8_14 : i8), ^bb15
  ^bb17:  // pred: ^bb11
    %33 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_15 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %34 = arith.cmpi uge, %33, %c3_i64_15 : i64
    %c80_i8_16 = arith.constant 80 : i8
    cf.cond_br %34, ^bb18, ^bb1(%c80_i8_16 : i8)
  ^bb18:  // pred: ^bb17
    %35 = arith.subi %33, %c3_i64_15 : i64
    llvm.store %35, %arg1 : i64, !llvm.ptr
    cf.br ^bb16
  ^bb19:  // pred: ^bb20
    %c64_i256 = arith.constant 64 : i256
    %36 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c64_i256, %36 : i256, !llvm.ptr
    %37 = llvm.getelementptr %36[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %37, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb25
  ^bb20:  // pred: ^bb22
    %c1024_i64_17 = arith.constant 1024 : i64
    %38 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_18 = arith.constant 1 : i64
    %39 = arith.addi %38, %c1_i64_18 : i64
    llvm.store %39, %arg3 : i64, !llvm.ptr
    %40 = arith.cmpi ult, %c1024_i64_17, %39 : i64
    %c92_i8_19 = arith.constant 92 : i8
    cf.cond_br %40, ^bb1(%c92_i8_19 : i8), ^bb19
  ^bb21:  // pred: ^bb15
    %41 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_20 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %42 = arith.cmpi uge, %41, %c3_i64_20 : i64
    %c80_i8_21 = arith.constant 80 : i8
    cf.cond_br %42, ^bb22, ^bb1(%c80_i8_21 : i8)
  ^bb22:  // pred: ^bb21
    %43 = arith.subi %41, %c3_i64_20 : i64
    llvm.store %43, %arg1 : i64, !llvm.ptr
    cf.br ^bb20
  ^bb23:  // pred: ^bb24
    %c64_i256_22 = arith.constant 64 : i256
    %44 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c64_i256_22, %44 : i256, !llvm.ptr
    %45 = llvm.getelementptr %44[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %45, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb37
  ^bb24:  // pred: ^bb26
    %c1024_i64_23 = arith.constant 1024 : i64
    %46 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_24 = arith.constant 1 : i64
    %47 = arith.addi %46, %c1_i64_24 : i64
    llvm.store %47, %arg3 : i64, !llvm.ptr
    %48 = arith.cmpi ult, %c1024_i64_23, %47 : i64
    %c92_i8_25 = arith.constant 92 : i8
    cf.cond_br %48, ^bb1(%c92_i8_25 : i8), ^bb23
  ^bb25:  // pred: ^bb19
    %49 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_26 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %50 = arith.cmpi uge, %49, %c3_i64_26 : i64
    %c80_i8_27 = arith.constant 80 : i8
    cf.cond_br %50, ^bb26, ^bb1(%c80_i8_27 : i8)
  ^bb26:  // pred: ^bb25
    %51 = arith.subi %49, %c3_i64_26 : i64
    llvm.store %51, %arg1 : i64, !llvm.ptr
    cf.br ^bb24
  ^bb27:  // pred: ^bb36
    %52 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %53 = llvm.getelementptr %52[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %54 = llvm.load %53 : !llvm.ptr -> i256
    llvm.store %53, %0 : !llvm.ptr, !llvm.ptr
    %55 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %56 = llvm.getelementptr %55[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %57 = llvm.load %56 : !llvm.ptr -> i256
    llvm.store %56, %0 : !llvm.ptr, !llvm.ptr
    %58 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %59 = llvm.getelementptr %58[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %60 = llvm.load %59 : !llvm.ptr -> i256
    llvm.store %59, %0 : !llvm.ptr, !llvm.ptr
    %61 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %62 = llvm.getelementptr %61[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %63 = llvm.load %62 : !llvm.ptr -> i256
    llvm.store %62, %0 : !llvm.ptr, !llvm.ptr
    %64 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %65 = llvm.getelementptr %64[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %66 = llvm.load %65 : !llvm.ptr -> i256
    llvm.store %65, %0 : !llvm.ptr, !llvm.ptr
    %67 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %68 = llvm.getelementptr %67[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %69 = llvm.load %68 : !llvm.ptr -> i256
    llvm.store %68, %0 : !llvm.ptr, !llvm.ptr
    %c0_i256 = arith.constant 0 : i256
    %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256
    %70 = arith.cmpi sgt, %63, %c18446744073709551615_i256 : i256
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %70, ^bb1(%c84_i8 : i8), ^bb28
  ^bb28:  // pred: ^bb27
    %71 = arith.trunci %63 : i256 to i64
    %c0_i64_28 = arith.constant 0 : i64
    %72 = arith.cmpi slt, %71, %c0_i64_28 : i64
    %c84_i8_29 = arith.constant 84 : i8
    cf.cond_br %72, ^bb1(%c84_i8_29 : i8), ^bb29
  ^bb29:  // pred: ^bb28
    %c0_i64_30 = arith.constant 0 : i64
    %73 = arith.cmpi ne, %71, %c0_i64_30 : i64
    cf.cond_br %73, ^bb40, ^bb30
  ^bb30:  // 2 preds: ^bb29, ^bb44
    %c18446744073709551615_i256_31 = arith.constant 18446744073709551615 : i256
    %74 = arith.cmpi sgt, %69, %c18446744073709551615_i256_31 : i256
    %c84_i8_32 = arith.constant 84 : i8
    cf.cond_br %74, ^bb1(%c84_i8_32 : i8), ^bb31
  ^bb31:  // pred: ^bb30
    %75 = arith.trunci %69 : i256 to i64
    %c0_i64_33 = arith.constant 0 : i64
    %76 = arith.cmpi slt, %75, %c0_i64_33 : i64
    %c84_i8_34 = arith.constant 84 : i8
    cf.cond_br %76, ^bb1(%c84_i8_34 : i8), ^bb32
  ^bb32:  // pred: ^bb31
    %c0_i64_35 = arith.constant 0 : i64
    %77 = arith.cmpi ne, %75, %c0_i64_35 : i64
    cf.cond_br %77, ^bb48, ^bb33
  ^bb33:  // 2 preds: ^bb32, ^bb52
    %78 = arith.trunci %60 : i256 to i64
    %79 = arith.trunci %66 : i256 to i64
    %80 = llvm.load %arg1 : !llvm.ptr -> i64
    %c1_i256 = arith.constant 1 : i256
    %81 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %c0_i256, %81 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i256_36 = arith.constant 1 : i256
    %82 = llvm.alloca %c1_i256_36 x i256 : (i256) -> !llvm.ptr
    llvm.store %54, %82 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i256_37 = arith.constant 1 : i256
    %83 = llvm.alloca %c1_i256_37 x i256 : (i256) -> !llvm.ptr
    llvm.store %57, %83 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i8 = arith.constant 1 : i8
    %84 = call @dora_fn_call(%arg0, %82, %83, %81, %78, %71, %79, %75, %80, %c1_i8) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
    %85 = llvm.getelementptr %84[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %86 = llvm.load %85 : !llvm.ptr -> i8
    %87 = llvm.getelementptr %84[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %88 = llvm.load %87 : !llvm.ptr -> i8
    %c0_i8 = arith.constant 0 : i8
    %89 = arith.cmpi ne, %88, %c0_i8 : i8
    cf.cond_br %89, ^bb1(%88 : i8), ^bb34
  ^bb34:  // pred: ^bb33
    %90 = llvm.getelementptr %84[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %91 = llvm.load %90 : !llvm.ptr -> i64
    %92 = llvm.load %arg1 : !llvm.ptr -> i64
    %93 = arith.cmpi ult, %92, %91 : i64
    scf.if %93 {
    } else {
      %160 = arith.subi %92, %91 : i64
      llvm.store %160, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_38 = arith.constant 80 : i8
    cf.cond_br %93, ^bb1(%c80_i8_38 : i8), ^bb35
  ^bb35:  // pred: ^bb34
    %94 = arith.extui %86 : i8 to i256
    %95 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %94, %95 : i256, !llvm.ptr
    %96 = llvm.getelementptr %95[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %96, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb39
  ^bb36:  // pred: ^bb38
    %c1024_i64_39 = arith.constant 1024 : i64
    %97 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-5_i64 = arith.constant -5 : i64
    %98 = arith.addi %97, %c-5_i64 : i64
    llvm.store %98, %arg3 : i64, !llvm.ptr
    %c6_i64 = arith.constant 6 : i64
    %99 = arith.cmpi ult, %97, %c6_i64 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %99, ^bb1(%c91_i8 : i8), ^bb27
  ^bb37:  // pred: ^bb23
    %100 = llvm.load %arg1 : !llvm.ptr -> i64
    %c0_i64_40 = arith.constant 0 : i64
    call @dora_fn_nop() : () -> ()
    %101 = arith.cmpi uge, %100, %c0_i64_40 : i64
    %c80_i8_41 = arith.constant 80 : i8
    cf.cond_br %101, ^bb38, ^bb1(%c80_i8_41 : i8)
  ^bb38:  // pred: ^bb37
    %102 = arith.subi %100, %c0_i64_40 : i64
    llvm.store %102, %arg1 : i64, !llvm.ptr
    cf.br ^bb36
  ^bb39:  // pred: ^bb35
    %c0_i64_42 = arith.constant 0 : i64
    %c1_i8_43 = arith.constant 1 : i8
    %103 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_42, %c0_i64_42, %103, %c1_i8_43) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c1_i8_43 : i8
  ^bb40:  // pred: ^bb29
    %c18446744073709551615_i256_44 = arith.constant 18446744073709551615 : i256
    %104 = arith.cmpi sgt, %60, %c18446744073709551615_i256_44 : i256
    %c84_i8_45 = arith.constant 84 : i8
    cf.cond_br %104, ^bb1(%c84_i8_45 : i8), ^bb41
  ^bb41:  // pred: ^bb40
    %105 = arith.trunci %60 : i256 to i64
    %c0_i64_46 = arith.constant 0 : i64
    %106 = arith.cmpi slt, %105, %c0_i64_46 : i64
    %c84_i8_47 = arith.constant 84 : i8
    cf.cond_br %106, ^bb1(%c84_i8_47 : i8), ^bb42
  ^bb42:  // pred: ^bb41
    %107 = arith.addi %105, %71 : i64
    %c0_i64_48 = arith.constant 0 : i64
    %108 = arith.cmpi slt, %107, %c0_i64_48 : i64
    %c84_i8_49 = arith.constant 84 : i8
    cf.cond_br %108, ^bb1(%c84_i8_49 : i8), ^bb43
  ^bb43:  // pred: ^bb42
    %c31_i64 = arith.constant 31 : i64
    %c32_i64 = arith.constant 32 : i64
    %109 = arith.addi %107, %c31_i64 : i64
    %110 = arith.divui %109, %c32_i64 : i64
    %c32_i64_50 = arith.constant 32 : i64
    %111 = arith.muli %110, %c32_i64_50 : i64
    %112 = call @dora_fn_memory_size(%arg0) : (!llvm.ptr) -> i64
    %c31_i64_51 = arith.constant 31 : i64
    %c32_i64_52 = arith.constant 32 : i64
    %113 = arith.addi %112, %c31_i64_51 : i64
    %114 = arith.divui %113, %c32_i64_52 : i64
    %115 = arith.muli %114, %c32_i64_50 : i64
    %116 = arith.cmpi ult, %115, %111 : i64
    cf.cond_br %116, ^bb45, ^bb44
  ^bb44:  // 2 preds: ^bb43, ^bb47
    cf.br ^bb30
  ^bb45:  // pred: ^bb43
    %c3_i64_53 = arith.constant 3 : i64
    %c512_i64 = arith.constant 512 : i64
    %117 = arith.muli %114, %114 : i64
    %118 = arith.divui %117, %c512_i64 : i64
    %119 = arith.muli %114, %c3_i64_53 : i64
    %120 = arith.addi %118, %119 : i64
    %c3_i64_54 = arith.constant 3 : i64
    %c512_i64_55 = arith.constant 512 : i64
    %121 = arith.muli %110, %110 : i64
    %122 = arith.divui %121, %c512_i64_55 : i64
    %123 = arith.muli %110, %c3_i64_54 : i64
    %124 = arith.addi %122, %123 : i64
    %125 = arith.subi %124, %120 : i64
    %126 = llvm.load %arg1 : !llvm.ptr -> i64
    %127 = arith.cmpi ult, %126, %125 : i64
    scf.if %127 {
    } else {
      %160 = arith.subi %126, %125 : i64
      llvm.store %160, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_56 = arith.constant 80 : i8
    cf.cond_br %127, ^bb1(%c80_i8_56 : i8), ^bb46
  ^bb46:  // pred: ^bb45
    %128 = call @dora_fn_extend_memory(%arg0, %111) : (!llvm.ptr, i64) -> !llvm.ptr
    %129 = llvm.getelementptr %128[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %130 = llvm.load %129 : !llvm.ptr -> i8
    %c0_i8_57 = arith.constant 0 : i8
    %131 = arith.cmpi ne, %130, %c0_i8_57 : i8
    cf.cond_br %131, ^bb1(%130 : i8), ^bb47
  ^bb47:  // pred: ^bb46
    cf.br ^bb44
  ^bb48:  // pred: ^bb32
    %c18446744073709551615_i256_58 = arith.constant 18446744073709551615 : i256
    %132 = arith.cmpi sgt, %66, %c18446744073709551615_i256_58 : i256
    %c84_i8_59 = arith.constant 84 : i8
    cf.cond_br %132, ^bb1(%c84_i8_59 : i8), ^bb49
  ^bb49:  // pred: ^bb48
    %133 = arith.trunci %66 : i256 to i64
    %c0_i64_60 = arith.constant 0 : i64
    %134 = arith.cmpi slt, %133, %c0_i64_60 : i64
    %c84_i8_61 = arith.constant 84 : i8
    cf.cond_br %134, ^bb1(%c84_i8_61 : i8), ^bb50
  ^bb50:  // pred: ^bb49
    %135 = arith.addi %133, %75 : i64
    %c0_i64_62 = arith.constant 0 : i64
    %136 = arith.cmpi slt, %135, %c0_i64_62 : i64
    %c84_i8_63 = arith.constant 84 : i8
    cf.cond_br %136, ^bb1(%c84_i8_63 : i8), ^bb51
  ^bb51:  // pred: ^bb50
    %c31_i64_64 = arith.constant 31 : i64
    %c32_i64_65 = arith.constant 32 : i64
    %137 = arith.addi %135, %c31_i64_64 : i64
    %138 = arith.divui %137, %c32_i64_65 : i64
    %c32_i64_66 = arith.constant 32 : i64
    %139 = arith.muli %138, %c32_i64_66 : i64
    %140 = call @dora_fn_memory_size(%arg0) : (!llvm.ptr) -> i64
    %c31_i64_67 = arith.constant 31 : i64
    %c32_i64_68 = arith.constant 32 : i64
    %141 = arith.addi %140, %c31_i64_67 : i64
    %142 = arith.divui %141, %c32_i64_68 : i64
    %143 = arith.muli %142, %c32_i64_66 : i64
    %144 = arith.cmpi ult, %143, %139 : i64
    cf.cond_br %144, ^bb53, ^bb52
  ^bb52:  // 2 preds: ^bb51, ^bb55
    cf.br ^bb33
  ^bb53:  // pred: ^bb51
    %c3_i64_69 = arith.constant 3 : i64
    %c512_i64_70 = arith.constant 512 : i64
    %145 = arith.muli %142, %142 : i64
    %146 = arith.divui %145, %c512_i64_70 : i64
    %147 = arith.muli %142, %c3_i64_69 : i64
    %148 = arith.addi %146, %147 : i64
    %c3_i64_71 = arith.constant 3 : i64
    %c512_i64_72 = arith.constant 512 : i64
    %149 = arith.muli %138, %138 : i64
    %150 = arith.divui %149, %c512_i64_72 : i64
    %151 = arith.muli %138, %c3_i64_71 : i64
    %152 = arith.addi %150, %151 : i64
    %153 = arith.subi %152, %148 : i64
    %154 = llvm.load %arg1 : !llvm.ptr -> i64
    %155 = arith.cmpi ult, %154, %153 : i64
    scf.if %155 {
    } else {
      %160 = arith.subi %154, %153 : i64
      llvm.store %160, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_73 = arith.constant 80 : i8
    cf.cond_br %155, ^bb1(%c80_i8_73 : i8), ^bb54
  ^bb54:  // pred: ^bb53
    %156 = call @dora_fn_extend_memory(%arg0, %139) : (!llvm.ptr, i64) -> !llvm.ptr
    %157 = llvm.getelementptr %156[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %158 = llvm.load %157 : !llvm.ptr -> i8
    %c0_i8_74 = arith.constant 0 : i8
    %159 = arith.cmpi ne, %158, %c0_i8_74 : i8
    cf.cond_br %159, ^bb1(%158 : i8), ^bb55
  ^bb55:  // pred: ^bb54
    cf.br ^bb52
  }
}
