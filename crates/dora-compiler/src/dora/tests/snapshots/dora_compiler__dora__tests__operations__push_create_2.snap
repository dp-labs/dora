---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  llvm.mlir.global internal @dora_global_stack_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_stack_length() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_memory_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_memory_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_calldata_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_calldata_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_gas_counter() {addr_space = 0 : i32} : i64
  llvm.mlir.global external @dora_global_ctx_is_static() {addr_space = 0 : i32} : !llvm.ptr
  func.func private @dora_fn_debug_print(i32)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_chainid(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_gaslimit(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_code_copy(!llvm.ptr, i64, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_read_storage(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_write_storage(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_call(!llvm.ptr, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr, i8) -> !llvm.ptr
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_copy_ext_code_to_memory(!llvm.ptr, !llvm.ptr, i64, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_return_data_size(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_return_data_copy(!llvm.ptr, i64, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_transient_storage_read(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_transient_storage_write(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func public @main(%arg0: !llvm.ptr, %arg1: i64) -> i8 attributes {llvm.emit_c_interface} {
    %c1024_i256 = arith.constant 1024 : i256
    %0 = llvm.alloca %c1024_i256 x i256 : (i256) -> !llvm.ptr
    %1 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    llvm.store %0, %1 : !llvm.ptr, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %2 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    llvm.store %c0_i64, %2 : i64, !llvm.ptr
    %c0_i64_0 = arith.constant 0 : i64
    %3 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %c0_i64_0, %3 : i64, !llvm.ptr
    %4 = call @dora_fn_calldata(%arg0) : (!llvm.ptr) -> !llvm.ptr
    %5 = llvm.mlir.addressof @dora_global_calldata_ptr : !llvm.ptr
    llvm.store %4, %5 : !llvm.ptr, !llvm.ptr
    %6 = call @dora_fn_calldata_size(%arg0) : (!llvm.ptr) -> i64
    %7 = llvm.mlir.addressof @dora_global_calldata_size : !llvm.ptr
    llvm.store %6, %7 : i64, !llvm.ptr
    %8 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    llvm.store %arg1, %8 : i64, !llvm.ptr
    %9 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64 = arith.constant 1024 : i64
    cf.br ^bb3
  ^bb1(%10: i8):  // 4 preds: ^bb2, ^bb5, ^bb10, ^bb11
    %c0_i64_1 = arith.constant 0 : i64
    %11 = call @dora_fn_write_result(%arg0, %c0_i64_1, %c0_i64_1, %c0_i64_1, %10) : (!llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
    return %10 : i8
  ^bb2(%12: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %12 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3:  // pred: ^bb0
    %c30948500970605382398753381619_i256 = arith.constant 30948500970605382398753381619 : i256
    %13 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %14 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    llvm.store %c30948500970605382398753381619_i256, %14 : i256, !llvm.ptr
    %15 = llvm.getelementptr %14[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %15, %13 : !llvm.ptr, !llvm.ptr
    cf.br ^bb4
  ^bb4:  // pred: ^bb3
    %c0_i256 = arith.constant 0 : i256
    %16 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %17 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256, %17 : i256, !llvm.ptr
    %18 = llvm.getelementptr %17[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %18, %16 : !llvm.ptr, !llvm.ptr
    cf.br ^bb5
  ^bb5:  // pred: ^bb4
    %19 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %20 = llvm.load %19 : !llvm.ptr -> !llvm.ptr
    %21 = llvm.getelementptr %20[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %22 = llvm.load %21 : !llvm.ptr -> i256
    llvm.store %21, %19 : !llvm.ptr, !llvm.ptr
    %23 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %24 = llvm.load %23 : !llvm.ptr -> !llvm.ptr
    %25 = llvm.getelementptr %24[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %26 = llvm.load %25 : !llvm.ptr -> i256
    llvm.store %25, %23 : !llvm.ptr, !llvm.ptr
    %27 = arith.trunci %22 : i256 to i64
    %c32_i64 = arith.constant 32 : i64
    %28 = arith.addi %27, %c32_i64 : i64
    %c0_i64_2 = arith.constant 0 : i64
    %29 = arith.cmpi slt, %28, %c0_i64_2 : i64
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %29, ^bb1(%c84_i8 : i8), ^bb6
  ^bb6:  // pred: ^bb5
    %30 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    %31 = llvm.load %30 : !llvm.ptr -> i64
    %c31_i64 = arith.constant 31 : i64
    %c32_i64_3 = arith.constant 32 : i64
    %32 = arith.addi %28, %c31_i64 : i64
    %33 = arith.divui %32, %c32_i64_3 : i64
    %34 = arith.muli %33, %c32_i64_3 : i64
    %35 = arith.cmpi ult, %31, %34 : i64
    scf.if %35 {
      %84 = func.call @dora_fn_extend_memory(%arg0, %34) : (!llvm.ptr, i64) -> !llvm.ptr
      %85 = llvm.getelementptr %84[16] : (!llvm.ptr) -> !llvm.ptr, i8
      %86 = llvm.load %85 : !llvm.ptr -> !llvm.ptr
      llvm.store %34, %30 : i64, !llvm.ptr
      %87 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
      llvm.store %86, %87 : !llvm.ptr, !llvm.ptr
    } else {
    }
    %36 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    %37 = llvm.load %36 : !llvm.ptr -> !llvm.ptr
    %38 = llvm.getelementptr %37[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %39 = llvm.intr.bswap(%26)  : (i256) -> i256
    llvm.store %39, %38 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb7
  ^bb7:  // pred: ^bb6
    %c13_i256 = arith.constant 13 : i256
    %40 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %41 = llvm.load %40 : !llvm.ptr -> !llvm.ptr
    llvm.store %c13_i256, %41 : i256, !llvm.ptr
    %42 = llvm.getelementptr %41[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %42, %40 : !llvm.ptr, !llvm.ptr
    cf.br ^bb8
  ^bb8:  // pred: ^bb7
    %c19_i256 = arith.constant 19 : i256
    %43 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %44 = llvm.load %43 : !llvm.ptr -> !llvm.ptr
    llvm.store %c19_i256, %44 : i256, !llvm.ptr
    %45 = llvm.getelementptr %44[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %45, %43 : !llvm.ptr, !llvm.ptr
    cf.br ^bb9
  ^bb9:  // pred: ^bb8
    %c0_i256_4 = arith.constant 0 : i256
    %46 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %47 = llvm.load %46 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_4, %47 : i256, !llvm.ptr
    %48 = llvm.getelementptr %47[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %48, %46 : !llvm.ptr, !llvm.ptr
    cf.br ^bb10
  ^bb10:  // pred: ^bb9
    %49 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %50 = llvm.load %49 : !llvm.ptr -> !llvm.ptr
    %51 = llvm.getelementptr %50[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %52 = llvm.load %51 : !llvm.ptr -> i256
    llvm.store %51, %49 : !llvm.ptr, !llvm.ptr
    %53 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %54 = llvm.load %53 : !llvm.ptr -> !llvm.ptr
    %55 = llvm.getelementptr %54[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %56 = llvm.load %55 : !llvm.ptr -> i256
    llvm.store %55, %53 : !llvm.ptr, !llvm.ptr
    %57 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %58 = llvm.load %57 : !llvm.ptr -> !llvm.ptr
    %59 = llvm.getelementptr %58[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %60 = llvm.load %59 : !llvm.ptr -> i256
    llvm.store %59, %57 : !llvm.ptr, !llvm.ptr
    %61 = arith.trunci %56 : i256 to i64
    %62 = arith.trunci %60 : i256 to i64
    %63 = arith.addi %61, %62 : i64
    %c0_i64_5 = arith.constant 0 : i64
    %64 = arith.cmpi slt, %63, %c0_i64_5 : i64
    %c84_i8_6 = arith.constant 84 : i8
    cf.cond_br %64, ^bb1(%c84_i8_6 : i8), ^bb11
  ^bb11:  // pred: ^bb10
    %65 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    %66 = llvm.load %65 : !llvm.ptr -> i64
    %c31_i64_7 = arith.constant 31 : i64
    %c32_i64_8 = arith.constant 32 : i64
    %67 = arith.addi %63, %c31_i64_7 : i64
    %68 = arith.divui %67, %c32_i64_8 : i64
    %69 = arith.muli %68, %c32_i64_8 : i64
    %70 = arith.cmpi ult, %66, %69 : i64
    scf.if %70 {
      %84 = func.call @dora_fn_extend_memory(%arg0, %69) : (!llvm.ptr, i64) -> !llvm.ptr
      %85 = llvm.getelementptr %84[16] : (!llvm.ptr) -> !llvm.ptr, i8
      %86 = llvm.load %85 : !llvm.ptr -> !llvm.ptr
      llvm.store %69, %65 : i64, !llvm.ptr
      %87 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
      llvm.store %86, %87 : !llvm.ptr, !llvm.ptr
    } else {
    }
    %c1_i256 = arith.constant 1 : i256
    %71 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %52, %71 {alignment = 1 : i64} : i256, !llvm.ptr
    %72 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %73 = llvm.load %72 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %74 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %73, %74 {alignment = 1 : i64} : i64, !llvm.ptr
    %75 = call @dora_fn_create(%arg0, %62, %61, %71, %74) : (!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %76 = llvm.getelementptr %75[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %77 = llvm.load %76 : !llvm.ptr -> i8
    %c0_i8 = arith.constant 0 : i8
    %78 = arith.cmpi ne, %c0_i8, %77 : i8
    %c94_i8 = arith.constant 94 : i8
    cf.cond_br %78, ^bb1(%c94_i8 : i8), ^bb12
  ^bb12:  // pred: ^bb11
    %79 = llvm.load %71 : !llvm.ptr -> i256
    %80 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %81 = llvm.load %80 : !llvm.ptr -> !llvm.ptr
    llvm.store %79, %81 : i256, !llvm.ptr
    %82 = llvm.getelementptr %81[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %82, %80 : !llvm.ptr, !llvm.ptr
    cf.br ^bb13
  ^bb13:  // pred: ^bb12
    %c0_i64_9 = arith.constant 0 : i64
    %c1_i8 = arith.constant 1 : i8
    %83 = call @dora_fn_write_result(%arg0, %c0_i64_9, %c0_i64_9, %arg1, %c1_i8) : (!llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
    return %c1_i8 : i8
  }
}
