---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  llvm.mlir.global internal @dora_global_memory_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_memory_size() {addr_space = 0 : i32} : i64
  func.func private @dora_fn_nop()
  func.func private @dora_fn_tracing(!llvm.ptr, i8, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_fn_is_static(!llvm.ptr) -> i8
  func.func private @dora_fn_exp(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_chainid(!llvm.ptr) -> i64
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gaslimit_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_code_copy(!llvm.ptr, !llvm.ptr, i64, i64)
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_call(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_returndata_copy(!llvm.ptr, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_tload(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_tstore(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func public @main(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr) -> i8 attributes {llvm.emit_c_interface} {
    %c0_i64 = arith.constant 0 : i64
    %0 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %c0_i64, %0 : i64, !llvm.ptr
    cf.br ^bb5
  ^bb1(%1: i8):  // 22 preds: ^bb2, ^bb4, ^bb5, ^bb8, ^bb9, ^bb12, ^bb13, ^bb16, ^bb17, ^bb20, ^bb21, ^bb23, ^bb24, ^bb25, ^bb26, ^bb29, ^bb30, ^bb33, ^bb34, ^bb35, ^bb38, ^bb39
    %c0_i64_0 = arith.constant 0 : i64
    %2 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_0, %c0_i64_0, %2, %1) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %1 : i8
  ^bb2(%3: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %3 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3:  // pred: ^bb4
    %c32_i256 = arith.constant 32 : i256
    %4 = llvm.load %arg3 : !llvm.ptr -> i64
    %5 = llvm.getelementptr %arg2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64 = arith.constant 1 : i64
    %6 = arith.addi %4, %c1_i64 : i64
    llvm.store %6, %arg3 : i64, !llvm.ptr
    llvm.store %c32_i256, %5 : i256, !llvm.ptr
    cf.br ^bb9
  ^bb4:  // pred: ^bb6
    %c1024_i64 = arith.constant 1024 : i64
    %7 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_1 = arith.constant 1 : i64
    %8 = arith.addi %7, %c1_i64_1 : i64
    %9 = arith.cmpi ult, %c1024_i64, %8 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %9, ^bb1(%c92_i8 : i8), ^bb3
  ^bb5:  // pred: ^bb0
    %10 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %11 = arith.cmpi uge, %10, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %11, ^bb6, ^bb1(%c80_i8 : i8)
  ^bb6:  // pred: ^bb5
    %12 = arith.subi %10, %c3_i64 : i64
    llvm.store %12, %arg1 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb7:  // pred: ^bb8
    %c10_i256 = arith.constant 10 : i256
    %13 = llvm.load %arg3 : !llvm.ptr -> i64
    %14 = llvm.getelementptr %arg2[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_2 = arith.constant 1 : i64
    %15 = arith.addi %13, %c1_i64_2 : i64
    llvm.store %15, %arg3 : i64, !llvm.ptr
    llvm.store %c10_i256, %14 : i256, !llvm.ptr
    cf.br ^bb13
  ^bb8:  // pred: ^bb10
    %c1024_i64_3 = arith.constant 1024 : i64
    %16 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_4 = arith.constant 1 : i64
    %17 = arith.addi %16, %c1_i64_4 : i64
    %18 = arith.cmpi ult, %c1024_i64_3, %17 : i64
    %c92_i8_5 = arith.constant 92 : i8
    cf.cond_br %18, ^bb1(%c92_i8_5 : i8), ^bb7
  ^bb9:  // pred: ^bb3
    %19 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_6 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %20 = arith.cmpi uge, %19, %c3_i64_6 : i64
    %c80_i8_7 = arith.constant 80 : i8
    cf.cond_br %20, ^bb10, ^bb1(%c80_i8_7 : i8)
  ^bb10:  // pred: ^bb9
    %21 = arith.subi %19, %c3_i64_6 : i64
    llvm.store %21, %arg1 : i64, !llvm.ptr
    cf.br ^bb8
  ^bb11:  // pred: ^bb12
    %c1_i256 = arith.constant 1 : i256
    %22 = llvm.load %arg3 : !llvm.ptr -> i64
    %23 = llvm.getelementptr %arg2[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_8 = arith.constant 1 : i64
    %24 = arith.addi %22, %c1_i64_8 : i64
    llvm.store %24, %arg3 : i64, !llvm.ptr
    llvm.store %c1_i256, %23 : i256, !llvm.ptr
    cf.br ^bb17
  ^bb12:  // pred: ^bb14
    %c1024_i64_9 = arith.constant 1024 : i64
    %25 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_10 = arith.constant 1 : i64
    %26 = arith.addi %25, %c1_i64_10 : i64
    %27 = arith.cmpi ult, %c1024_i64_9, %26 : i64
    %c92_i8_11 = arith.constant 92 : i8
    cf.cond_br %27, ^bb1(%c92_i8_11 : i8), ^bb11
  ^bb13:  // pred: ^bb7
    %28 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_12 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %29 = arith.cmpi uge, %28, %c3_i64_12 : i64
    %c80_i8_13 = arith.constant 80 : i8
    cf.cond_br %29, ^bb14, ^bb1(%c80_i8_13 : i8)
  ^bb14:  // pred: ^bb13
    %30 = arith.subi %28, %c3_i64_12 : i64
    llvm.store %30, %arg1 : i64, !llvm.ptr
    cf.br ^bb12
  ^bb15:  // pred: ^bb16
    %c2_i256 = arith.constant 2 : i256
    %31 = llvm.load %arg3 : !llvm.ptr -> i64
    %32 = llvm.getelementptr %arg2[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_14 = arith.constant 1 : i64
    %33 = arith.addi %31, %c1_i64_14 : i64
    llvm.store %33, %arg3 : i64, !llvm.ptr
    llvm.store %c2_i256, %32 : i256, !llvm.ptr
    cf.br ^bb21
  ^bb16:  // pred: ^bb18
    %c1024_i64_15 = arith.constant 1024 : i64
    %34 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_16 = arith.constant 1 : i64
    %35 = arith.addi %34, %c1_i64_16 : i64
    %36 = arith.cmpi ult, %c1024_i64_15, %35 : i64
    %c92_i8_17 = arith.constant 92 : i8
    cf.cond_br %36, ^bb1(%c92_i8_17 : i8), ^bb15
  ^bb17:  // pred: ^bb11
    %37 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_18 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %38 = arith.cmpi uge, %37, %c3_i64_18 : i64
    %c80_i8_19 = arith.constant 80 : i8
    cf.cond_br %38, ^bb18, ^bb1(%c80_i8_19 : i8)
  ^bb18:  // pred: ^bb17
    %39 = arith.subi %37, %c3_i64_18 : i64
    llvm.store %39, %arg1 : i64, !llvm.ptr
    cf.br ^bb16
  ^bb19:  // pred: ^bb20
    %c3_i256 = arith.constant 3 : i256
    %40 = llvm.load %arg3 : !llvm.ptr -> i64
    %41 = llvm.getelementptr %arg2[%40] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_20 = arith.constant 1 : i64
    %42 = arith.addi %40, %c1_i64_20 : i64
    llvm.store %42, %arg3 : i64, !llvm.ptr
    llvm.store %c3_i256, %41 : i256, !llvm.ptr
    cf.br ^bb30
  ^bb20:  // pred: ^bb22
    %c1024_i64_21 = arith.constant 1024 : i64
    %43 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_22 = arith.constant 1 : i64
    %44 = arith.addi %43, %c1_i64_22 : i64
    %45 = arith.cmpi ult, %c1024_i64_21, %44 : i64
    %c92_i8_23 = arith.constant 92 : i8
    cf.cond_br %45, ^bb1(%c92_i8_23 : i8), ^bb19
  ^bb21:  // pred: ^bb15
    %46 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_24 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %47 = arith.cmpi uge, %46, %c3_i64_24 : i64
    %c80_i8_25 = arith.constant 80 : i8
    cf.cond_br %47, ^bb22, ^bb1(%c80_i8_25 : i8)
  ^bb22:  // pred: ^bb21
    %48 = arith.subi %46, %c3_i64_24 : i64
    llvm.store %48, %arg1 : i64, !llvm.ptr
    cf.br ^bb20
  ^bb23:  // pred: ^bb29
    %49 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_26 = arith.constant 1 : i64
    %50 = arith.subi %49, %c1_i64_26 : i64
    %51 = llvm.getelementptr %arg2[%50] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %50, %arg3 : i64, !llvm.ptr
    %52 = llvm.load %51 : !llvm.ptr -> i256
    %53 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_27 = arith.constant 1 : i64
    %54 = arith.subi %53, %c1_i64_27 : i64
    %55 = llvm.getelementptr %arg2[%54] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %54, %arg3 : i64, !llvm.ptr
    %56 = llvm.load %55 : !llvm.ptr -> i256
    %57 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_28 = arith.constant 1 : i64
    %58 = arith.subi %57, %c1_i64_28 : i64
    %59 = llvm.getelementptr %arg2[%58] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %58, %arg3 : i64, !llvm.ptr
    %60 = llvm.load %59 : !llvm.ptr -> i256
    %61 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_29 = arith.constant 1 : i64
    %62 = arith.subi %61, %c1_i64_29 : i64
    %63 = llvm.getelementptr %arg2[%62] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %62, %arg3 : i64, !llvm.ptr
    %64 = llvm.load %63 : !llvm.ptr -> i256
    %65 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_30 = arith.constant 1 : i64
    %66 = arith.subi %65, %c1_i64_30 : i64
    %67 = llvm.getelementptr %arg2[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %66, %arg3 : i64, !llvm.ptr
    %68 = llvm.load %67 : !llvm.ptr -> i256
    %69 = call @dora_fn_is_static(%arg0) : (!llvm.ptr) -> i8
    %c0_i8 = arith.constant 0 : i8
    %70 = arith.cmpi ne, %69, %c0_i8 : i8
    %c87_i8 = arith.constant 87 : i8
    cf.cond_br %70, ^bb1(%c87_i8 : i8), ^bb24
  ^bb24:  // pred: ^bb23
    %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256
    %71 = arith.cmpi sgt, %56, %c18446744073709551615_i256 : i256
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %71, ^bb1(%c84_i8 : i8), ^bb25
  ^bb25:  // pred: ^bb24
    %72 = arith.trunci %56 : i256 to i64
    %c0_i64_31 = arith.constant 0 : i64
    %73 = arith.cmpi slt, %72, %c0_i64_31 : i64
    %c84_i8_32 = arith.constant 84 : i8
    cf.cond_br %73, ^bb1(%c84_i8_32 : i8), ^bb26
  ^bb26:  // pred: ^bb25
    %c8_i64 = arith.constant 8 : i64
    %74 = arith.muli %72, %c8_i64 : i64
    %75 = llvm.load %arg1 : !llvm.ptr -> i64
    %76 = arith.cmpi ult, %75, %74 : i64
    scf.if %76 {
    } else {
      %122 = arith.subi %75, %74 : i64
      llvm.store %122, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_33 = arith.constant 80 : i8
    cf.cond_br %76, ^bb1(%c80_i8_33 : i8), ^bb27
  ^bb27:  // pred: ^bb26
    %c0_i64_34 = arith.constant 0 : i64
    %77 = arith.cmpi ne, %72, %c0_i64_34 : i64
    cf.cond_br %77, ^bb33, ^bb28
  ^bb28:  // 2 preds: ^bb27, ^bb37
    %78 = arith.trunci %52 : i256 to i64
    %c1_i256_35 = arith.constant 1 : i256
    %79 = llvm.alloca %c1_i256_35 x i256 : (i256) -> !llvm.ptr
    llvm.store %60, %79 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i256_36 = arith.constant 1 : i256
    %80 = llvm.alloca %c1_i256_36 x i256 : (i256) -> !llvm.ptr
    llvm.store %64, %80 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i256_37 = arith.constant 1 : i256
    %81 = llvm.alloca %c1_i256_37 x i256 : (i256) -> !llvm.ptr
    llvm.store %68, %81 {alignment = 1 : i64} : i256, !llvm.ptr
    call @dora_fn_append_log_with_three_topics(%arg0, %78, %72, %79, %80, %81) : (!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> ()
    cf.br ^bb32
  ^bb29:  // pred: ^bb31
    %c1024_i64_38 = arith.constant 1024 : i64
    %82 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-5_i64 = arith.constant -5 : i64
    %83 = arith.addi %82, %c-5_i64 : i64
    %c5_i64 = arith.constant 5 : i64
    %84 = arith.cmpi ult, %82, %c5_i64 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %84, ^bb1(%c91_i8 : i8), ^bb23
  ^bb30:  // pred: ^bb19
    %85 = llvm.load %arg1 : !llvm.ptr -> i64
    %c1500_i64 = arith.constant 1500 : i64
    call @dora_fn_nop() : () -> ()
    %86 = arith.cmpi uge, %85, %c1500_i64 : i64
    %c80_i8_39 = arith.constant 80 : i8
    cf.cond_br %86, ^bb31, ^bb1(%c80_i8_39 : i8)
  ^bb31:  // pred: ^bb30
    %87 = arith.subi %85, %c1500_i64 : i64
    llvm.store %87, %arg1 : i64, !llvm.ptr
    cf.br ^bb29
  ^bb32:  // pred: ^bb28
    %c0_i64_40 = arith.constant 0 : i64
    %c1_i8 = arith.constant 1 : i8
    %88 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_40, %c0_i64_40, %88, %c1_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c1_i8 : i8
  ^bb33:  // pred: ^bb27
    %c18446744073709551615_i256_41 = arith.constant 18446744073709551615 : i256
    %89 = arith.cmpi sgt, %52, %c18446744073709551615_i256_41 : i256
    %c84_i8_42 = arith.constant 84 : i8
    cf.cond_br %89, ^bb1(%c84_i8_42 : i8), ^bb34
  ^bb34:  // pred: ^bb33
    %90 = arith.trunci %52 : i256 to i64
    %c0_i64_43 = arith.constant 0 : i64
    %91 = arith.cmpi slt, %90, %c0_i64_43 : i64
    %c84_i8_44 = arith.constant 84 : i8
    cf.cond_br %91, ^bb1(%c84_i8_44 : i8), ^bb35
  ^bb35:  // pred: ^bb34
    %92 = arith.addi %90, %72 : i64
    %c0_i64_45 = arith.constant 0 : i64
    %93 = arith.cmpi slt, %92, %c0_i64_45 : i64
    %c84_i8_46 = arith.constant 84 : i8
    cf.cond_br %93, ^bb1(%c84_i8_46 : i8), ^bb36
  ^bb36:  // pred: ^bb35
    %c31_i64 = arith.constant 31 : i64
    %c32_i64 = arith.constant 32 : i64
    %94 = arith.addi %92, %c31_i64 : i64
    %95 = arith.divui %94, %c32_i64 : i64
    %c32_i64_47 = arith.constant 32 : i64
    %96 = arith.muli %95, %c32_i64_47 : i64
    %97 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    %98 = llvm.load %97 : !llvm.ptr -> i64
    %c31_i64_48 = arith.constant 31 : i64
    %c32_i64_49 = arith.constant 32 : i64
    %99 = arith.addi %98, %c31_i64_48 : i64
    %100 = arith.divui %99, %c32_i64_49 : i64
    %101 = arith.muli %100, %c32_i64_47 : i64
    %102 = arith.cmpi ult, %101, %96 : i64
    cf.cond_br %102, ^bb38, ^bb37
  ^bb37:  // 2 preds: ^bb36, ^bb40
    cf.br ^bb28
  ^bb38:  // pred: ^bb36
    %c3_i64_50 = arith.constant 3 : i64
    %c512_i64 = arith.constant 512 : i64
    %103 = arith.muli %100, %100 : i64
    %104 = arith.divui %103, %c512_i64 : i64
    %105 = arith.muli %100, %c3_i64_50 : i64
    %106 = arith.addi %104, %105 : i64
    %c3_i64_51 = arith.constant 3 : i64
    %c512_i64_52 = arith.constant 512 : i64
    %107 = arith.muli %95, %95 : i64
    %108 = arith.divui %107, %c512_i64_52 : i64
    %109 = arith.muli %95, %c3_i64_51 : i64
    %110 = arith.addi %108, %109 : i64
    %111 = arith.subi %110, %106 : i64
    %112 = llvm.load %arg1 : !llvm.ptr -> i64
    %113 = arith.cmpi ult, %112, %111 : i64
    scf.if %113 {
    } else {
      %122 = arith.subi %112, %111 : i64
      llvm.store %122, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_53 = arith.constant 80 : i8
    cf.cond_br %113, ^bb1(%c80_i8_53 : i8), ^bb39
  ^bb39:  // pred: ^bb38
    %114 = call @dora_fn_extend_memory(%arg0, %96) : (!llvm.ptr, i64) -> !llvm.ptr
    %115 = llvm.getelementptr %114[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %116 = llvm.load %115 : !llvm.ptr -> !llvm.ptr
    %117 = llvm.getelementptr %114[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %118 = llvm.load %117 : !llvm.ptr -> i8
    %c0_i8_54 = arith.constant 0 : i8
    %119 = arith.cmpi ne, %118, %c0_i8_54 : i8
    cf.cond_br %119, ^bb1(%118 : i8), ^bb40
  ^bb40:  // pred: ^bb39
    %120 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    llvm.store %116, %120 : !llvm.ptr, !llvm.ptr
    %121 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %96, %121 : i64, !llvm.ptr
    cf.br ^bb37
  }
}
