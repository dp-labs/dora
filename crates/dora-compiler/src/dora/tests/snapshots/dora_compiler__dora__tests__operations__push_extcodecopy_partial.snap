---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  llvm.mlir.global internal @dora_global_memory_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_memory_size() {addr_space = 0 : i32} : i64
  func.func private @dora_fn_nop()
  func.func private @dora_fn_tracing(!llvm.ptr, i8, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_fn_is_static(!llvm.ptr) -> i8
  func.func private @dora_fn_exp(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_chainid(!llvm.ptr) -> i64
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gaslimit_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_code_copy(!llvm.ptr, !llvm.ptr, i64, i64)
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_call(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_returndata_copy(!llvm.ptr, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_tload(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_tstore(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func public @main(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr) -> i8 attributes {llvm.emit_c_interface} {
    %c0_i64 = arith.constant 0 : i64
    %0 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %c0_i64, %0 : i64, !llvm.ptr
    cf.br ^bb5
  ^bb1(%1: i8):  // 20 preds: ^bb2, ^bb4, ^bb5, ^bb8, ^bb9, ^bb12, ^bb13, ^bb16, ^bb17, ^bb19, ^bb20, ^bb21, ^bb23, ^bb25, ^bb26, ^bb29, ^bb30, ^bb31, ^bb34, ^bb35
    %c0_i64_0 = arith.constant 0 : i64
    %2 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_0, %c0_i64_0, %2, %1) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %1 : i8
  ^bb2(%3: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %3 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3:  // pred: ^bb4
    %c0_i256 = arith.constant 0 : i256
    %4 = llvm.load %arg3 : !llvm.ptr -> i64
    %5 = llvm.getelementptr %arg2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64 = arith.constant 1 : i64
    %6 = arith.addi %4, %c1_i64 : i64
    llvm.store %6, %arg3 : i64, !llvm.ptr
    llvm.store %c0_i256, %5 : i256, !llvm.ptr
    cf.br ^bb9
  ^bb4:  // pred: ^bb6
    %c1024_i64 = arith.constant 1024 : i64
    %7 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_1 = arith.constant 1 : i64
    %8 = arith.addi %7, %c1_i64_1 : i64
    %9 = arith.cmpi ult, %c1024_i64, %8 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %9, ^bb1(%c92_i8 : i8), ^bb3
  ^bb5:  // pred: ^bb0
    %10 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %11 = arith.cmpi uge, %10, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %11, ^bb6, ^bb1(%c80_i8 : i8)
  ^bb6:  // pred: ^bb5
    %12 = arith.subi %10, %c3_i64 : i64
    llvm.store %12, %arg1 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb7:  // pred: ^bb8
    %c5_i256 = arith.constant 5 : i256
    %13 = llvm.load %arg3 : !llvm.ptr -> i64
    %14 = llvm.getelementptr %arg2[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_2 = arith.constant 1 : i64
    %15 = arith.addi %13, %c1_i64_2 : i64
    llvm.store %15, %arg3 : i64, !llvm.ptr
    llvm.store %c5_i256, %14 : i256, !llvm.ptr
    cf.br ^bb13
  ^bb8:  // pred: ^bb10
    %c1024_i64_3 = arith.constant 1024 : i64
    %16 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_4 = arith.constant 1 : i64
    %17 = arith.addi %16, %c1_i64_4 : i64
    %18 = arith.cmpi ult, %c1024_i64_3, %17 : i64
    %c92_i8_5 = arith.constant 92 : i8
    cf.cond_br %18, ^bb1(%c92_i8_5 : i8), ^bb7
  ^bb9:  // pred: ^bb3
    %19 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_6 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %20 = arith.cmpi uge, %19, %c3_i64_6 : i64
    %c80_i8_7 = arith.constant 80 : i8
    cf.cond_br %20, ^bb10, ^bb1(%c80_i8_7 : i8)
  ^bb10:  // pred: ^bb9
    %21 = arith.subi %19, %c3_i64_6 : i64
    llvm.store %21, %arg1 : i64, !llvm.ptr
    cf.br ^bb8
  ^bb11:  // pred: ^bb12
    %c3735928559_i256 = arith.constant 3735928559 : i256
    %22 = llvm.load %arg3 : !llvm.ptr -> i64
    %23 = llvm.getelementptr %arg2[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_8 = arith.constant 1 : i64
    %24 = arith.addi %22, %c1_i64_8 : i64
    llvm.store %24, %arg3 : i64, !llvm.ptr
    llvm.store %c3735928559_i256, %23 : i256, !llvm.ptr
    cf.br ^bb17
  ^bb12:  // pred: ^bb14
    %c1024_i64_9 = arith.constant 1024 : i64
    %25 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_10 = arith.constant 1 : i64
    %26 = arith.addi %25, %c1_i64_10 : i64
    %27 = arith.cmpi ult, %c1024_i64_9, %26 : i64
    %c92_i8_11 = arith.constant 92 : i8
    cf.cond_br %27, ^bb1(%c92_i8_11 : i8), ^bb11
  ^bb13:  // pred: ^bb7
    %28 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_12 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %29 = arith.cmpi uge, %28, %c3_i64_12 : i64
    %c80_i8_13 = arith.constant 80 : i8
    cf.cond_br %29, ^bb14, ^bb1(%c80_i8_13 : i8)
  ^bb14:  // pred: ^bb13
    %30 = arith.subi %28, %c3_i64_12 : i64
    llvm.store %30, %arg1 : i64, !llvm.ptr
    cf.br ^bb12
  ^bb15:  // pred: ^bb16
    %c5_i256_14 = arith.constant 5 : i256
    %31 = llvm.load %arg3 : !llvm.ptr -> i64
    %32 = llvm.getelementptr %arg2[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_15 = arith.constant 1 : i64
    %33 = arith.addi %31, %c1_i64_15 : i64
    llvm.store %33, %arg3 : i64, !llvm.ptr
    llvm.store %c5_i256_14, %32 : i256, !llvm.ptr
    cf.br ^bb26
  ^bb16:  // pred: ^bb18
    %c1024_i64_16 = arith.constant 1024 : i64
    %34 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_17 = arith.constant 1 : i64
    %35 = arith.addi %34, %c1_i64_17 : i64
    %36 = arith.cmpi ult, %c1024_i64_16, %35 : i64
    %c92_i8_18 = arith.constant 92 : i8
    cf.cond_br %36, ^bb1(%c92_i8_18 : i8), ^bb15
  ^bb17:  // pred: ^bb11
    %37 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_19 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %38 = arith.cmpi uge, %37, %c3_i64_19 : i64
    %c80_i8_20 = arith.constant 80 : i8
    cf.cond_br %38, ^bb18, ^bb1(%c80_i8_20 : i8)
  ^bb18:  // pred: ^bb17
    %39 = arith.subi %37, %c3_i64_19 : i64
    llvm.store %39, %arg1 : i64, !llvm.ptr
    cf.br ^bb16
  ^bb19:  // pred: ^bb25
    %40 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_21 = arith.constant 1 : i64
    %41 = arith.subi %40, %c1_i64_21 : i64
    %42 = llvm.getelementptr %arg2[%41] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %41, %arg3 : i64, !llvm.ptr
    %43 = llvm.load %42 : !llvm.ptr -> i256
    %44 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_22 = arith.constant 1 : i64
    %45 = arith.subi %44, %c1_i64_22 : i64
    %46 = llvm.getelementptr %arg2[%45] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %45, %arg3 : i64, !llvm.ptr
    %47 = llvm.load %46 : !llvm.ptr -> i256
    %48 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_23 = arith.constant 1 : i64
    %49 = arith.subi %48, %c1_i64_23 : i64
    %50 = llvm.getelementptr %arg2[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %49, %arg3 : i64, !llvm.ptr
    %51 = llvm.load %50 : !llvm.ptr -> i256
    %52 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_24 = arith.constant 1 : i64
    %53 = arith.subi %52, %c1_i64_24 : i64
    %54 = llvm.getelementptr %arg2[%53] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %53, %arg3 : i64, !llvm.ptr
    %55 = llvm.load %54 : !llvm.ptr -> i256
    %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256
    %56 = arith.cmpi sgt, %55, %c18446744073709551615_i256 : i256
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %56, ^bb1(%c84_i8 : i8), ^bb20
  ^bb20:  // pred: ^bb19
    %57 = arith.trunci %55 : i256 to i64
    %c0_i64_25 = arith.constant 0 : i64
    %58 = arith.cmpi slt, %57, %c0_i64_25 : i64
    %c84_i8_26 = arith.constant 84 : i8
    cf.cond_br %58, ^bb1(%c84_i8_26 : i8), ^bb21
  ^bb21:  // pred: ^bb20
    %c31_i64 = arith.constant 31 : i64
    %c32_i64 = arith.constant 32 : i64
    %59 = arith.addi %57, %c31_i64 : i64
    %60 = arith.divui %59, %c32_i64 : i64
    %c3_i64_27 = arith.constant 3 : i64
    %61 = arith.muli %60, %c3_i64_27 : i64
    %62 = llvm.load %arg1 : !llvm.ptr -> i64
    %63 = arith.cmpi ult, %62, %61 : i64
    scf.if %63 {
    } else {
      %113 = arith.subi %62, %61 : i64
      llvm.store %113, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_28 = arith.constant 80 : i8
    cf.cond_br %63, ^bb1(%c80_i8_28 : i8), ^bb22
  ^bb22:  // pred: ^bb21
    %c0_i64_29 = arith.constant 0 : i64
    %64 = arith.cmpi ne, %57, %c0_i64_29 : i64
    cf.cond_br %64, ^bb29, ^bb23
  ^bb23:  // 2 preds: ^bb22, ^bb33
    %65 = arith.trunci %47 : i256 to i64
    %c1_i256 = arith.constant 1 : i256
    %66 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %43, %66 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i256_30 = arith.constant 1 : i256
    %67 = llvm.alloca %c1_i256_30 x i256 : (i256) -> !llvm.ptr
    llvm.store %51, %67 {alignment = 1 : i64} : i256, !llvm.ptr
    %68 = call @dora_fn_ext_code_copy(%arg0, %66, %67, %57, %65) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64) -> !llvm.ptr
    %69 = llvm.getelementptr %68[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %70 = llvm.load %69 : !llvm.ptr -> i64
    %71 = llvm.load %arg1 : !llvm.ptr -> i64
    %72 = arith.cmpi ult, %71, %70 : i64
    scf.if %72 {
    } else {
      %113 = arith.subi %71, %70 : i64
      llvm.store %113, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_31 = arith.constant 80 : i8
    cf.cond_br %72, ^bb1(%c80_i8_31 : i8), ^bb24
  ^bb24:  // pred: ^bb23
    cf.br ^bb28
  ^bb25:  // pred: ^bb27
    %c1024_i64_32 = arith.constant 1024 : i64
    %73 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-4_i64 = arith.constant -4 : i64
    %74 = arith.addi %73, %c-4_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %75 = arith.cmpi ult, %73, %c4_i64 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %75, ^bb1(%c91_i8 : i8), ^bb19
  ^bb26:  // pred: ^bb15
    %76 = llvm.load %arg1 : !llvm.ptr -> i64
    %c0_i64_33 = arith.constant 0 : i64
    call @dora_fn_nop() : () -> ()
    %77 = arith.cmpi uge, %76, %c0_i64_33 : i64
    %c80_i8_34 = arith.constant 80 : i8
    cf.cond_br %77, ^bb27, ^bb1(%c80_i8_34 : i8)
  ^bb27:  // pred: ^bb26
    %78 = arith.subi %76, %c0_i64_33 : i64
    llvm.store %78, %arg1 : i64, !llvm.ptr
    cf.br ^bb25
  ^bb28:  // pred: ^bb24
    %c0_i64_35 = arith.constant 0 : i64
    %c1_i8 = arith.constant 1 : i8
    %79 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_35, %c0_i64_35, %79, %c1_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c1_i8 : i8
  ^bb29:  // pred: ^bb22
    %c18446744073709551615_i256_36 = arith.constant 18446744073709551615 : i256
    %80 = arith.cmpi sgt, %47, %c18446744073709551615_i256_36 : i256
    %c84_i8_37 = arith.constant 84 : i8
    cf.cond_br %80, ^bb1(%c84_i8_37 : i8), ^bb30
  ^bb30:  // pred: ^bb29
    %81 = arith.trunci %47 : i256 to i64
    %c0_i64_38 = arith.constant 0 : i64
    %82 = arith.cmpi slt, %81, %c0_i64_38 : i64
    %c84_i8_39 = arith.constant 84 : i8
    cf.cond_br %82, ^bb1(%c84_i8_39 : i8), ^bb31
  ^bb31:  // pred: ^bb30
    %83 = arith.addi %81, %57 : i64
    %c0_i64_40 = arith.constant 0 : i64
    %84 = arith.cmpi slt, %83, %c0_i64_40 : i64
    %c84_i8_41 = arith.constant 84 : i8
    cf.cond_br %84, ^bb1(%c84_i8_41 : i8), ^bb32
  ^bb32:  // pred: ^bb31
    %c31_i64_42 = arith.constant 31 : i64
    %c32_i64_43 = arith.constant 32 : i64
    %85 = arith.addi %83, %c31_i64_42 : i64
    %86 = arith.divui %85, %c32_i64_43 : i64
    %c32_i64_44 = arith.constant 32 : i64
    %87 = arith.muli %86, %c32_i64_44 : i64
    %88 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    %89 = llvm.load %88 : !llvm.ptr -> i64
    %c31_i64_45 = arith.constant 31 : i64
    %c32_i64_46 = arith.constant 32 : i64
    %90 = arith.addi %89, %c31_i64_45 : i64
    %91 = arith.divui %90, %c32_i64_46 : i64
    %92 = arith.muli %91, %c32_i64_44 : i64
    %93 = arith.cmpi ult, %92, %87 : i64
    cf.cond_br %93, ^bb34, ^bb33
  ^bb33:  // 2 preds: ^bb32, ^bb36
    cf.br ^bb23
  ^bb34:  // pred: ^bb32
    %c3_i64_47 = arith.constant 3 : i64
    %c512_i64 = arith.constant 512 : i64
    %94 = arith.muli %91, %91 : i64
    %95 = arith.divui %94, %c512_i64 : i64
    %96 = arith.muli %91, %c3_i64_47 : i64
    %97 = arith.addi %95, %96 : i64
    %c3_i64_48 = arith.constant 3 : i64
    %c512_i64_49 = arith.constant 512 : i64
    %98 = arith.muli %86, %86 : i64
    %99 = arith.divui %98, %c512_i64_49 : i64
    %100 = arith.muli %86, %c3_i64_48 : i64
    %101 = arith.addi %99, %100 : i64
    %102 = arith.subi %101, %97 : i64
    %103 = llvm.load %arg1 : !llvm.ptr -> i64
    %104 = arith.cmpi ult, %103, %102 : i64
    scf.if %104 {
    } else {
      %113 = arith.subi %103, %102 : i64
      llvm.store %113, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_50 = arith.constant 80 : i8
    cf.cond_br %104, ^bb1(%c80_i8_50 : i8), ^bb35
  ^bb35:  // pred: ^bb34
    %105 = call @dora_fn_extend_memory(%arg0, %87) : (!llvm.ptr, i64) -> !llvm.ptr
    %106 = llvm.getelementptr %105[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %107 = llvm.load %106 : !llvm.ptr -> !llvm.ptr
    %108 = llvm.getelementptr %105[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %109 = llvm.load %108 : !llvm.ptr -> i8
    %c0_i8 = arith.constant 0 : i8
    %110 = arith.cmpi ne, %109, %c0_i8 : i8
    cf.cond_br %110, ^bb1(%109 : i8), ^bb36
  ^bb36:  // pred: ^bb35
    %111 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    llvm.store %107, %111 : !llvm.ptr, !llvm.ptr
    %112 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %87, %112 : i64, !llvm.ptr
    cf.br ^bb33
  }
}
