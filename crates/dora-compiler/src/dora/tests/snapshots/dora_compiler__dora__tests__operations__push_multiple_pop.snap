---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  llvm.mlir.global internal @dora_global_memory_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_memory_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_gas_counter() {addr_space = 0 : i32} : i64
  func.func private @dora_fn_nop()
  func.func private @dora_fn_tracing(!llvm.ptr, i8, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_fn_is_static(!llvm.ptr) -> i8
  func.func private @dora_fn_exp(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_chainid(!llvm.ptr) -> i64
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gaslimit_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_code_copy(!llvm.ptr, !llvm.ptr, i64, i64)
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_call(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_returndata_copy(!llvm.ptr, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_tload(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_tstore(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func public @main(%arg0: !llvm.ptr, %arg1: i64, %arg2: !llvm.ptr, %arg3: !llvm.ptr) -> i8 attributes {llvm.emit_c_interface} {
    %c0_i64 = arith.constant 0 : i64
    %0 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %c0_i64, %0 : i64, !llvm.ptr
    %1 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    llvm.store %arg1, %1 : i64, !llvm.ptr
    cf.br ^bb5
  ^bb1(%2: i8):  // 13 preds: ^bb2, ^bb4, ^bb5, ^bb8, ^bb9, ^bb12, ^bb13, ^bb16, ^bb17, ^bb20, ^bb21, ^bb24, ^bb25
    %c0_i64_0 = arith.constant 0 : i64
    %3 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %4 = llvm.load %3 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_0, %c0_i64_0, %4, %2) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %2 : i8
  ^bb2(%5: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %5 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3:  // pred: ^bb4
    %c1_i256 = arith.constant 1 : i256
    %6 = llvm.load %arg3 : !llvm.ptr -> i64
    %7 = llvm.getelementptr %arg2[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64 = arith.constant 1 : i64
    %8 = arith.addi %6, %c1_i64 : i64
    llvm.store %8, %arg3 : i64, !llvm.ptr
    llvm.store %c1_i256, %7 : i256, !llvm.ptr
    cf.br ^bb9
  ^bb4:  // pred: ^bb6
    %c1024_i64 = arith.constant 1024 : i64
    %9 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_1 = arith.constant 1 : i64
    %10 = arith.addi %9, %c1_i64_1 : i64
    %11 = arith.cmpi ult, %c1024_i64, %10 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %11, ^bb1(%c92_i8 : i8), ^bb3
  ^bb5:  // pred: ^bb0
    %12 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %13 = llvm.load %12 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %14 = arith.cmpi uge, %13, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %14, ^bb6, ^bb1(%c80_i8 : i8)
  ^bb6:  // pred: ^bb5
    %15 = arith.subi %13, %c3_i64 : i64
    llvm.store %15, %12 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb7:  // pred: ^bb8
    %c2_i256 = arith.constant 2 : i256
    %16 = llvm.load %arg3 : !llvm.ptr -> i64
    %17 = llvm.getelementptr %arg2[%16] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_2 = arith.constant 1 : i64
    %18 = arith.addi %16, %c1_i64_2 : i64
    llvm.store %18, %arg3 : i64, !llvm.ptr
    llvm.store %c2_i256, %17 : i256, !llvm.ptr
    cf.br ^bb13
  ^bb8:  // pred: ^bb10
    %c1024_i64_3 = arith.constant 1024 : i64
    %19 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_4 = arith.constant 1 : i64
    %20 = arith.addi %19, %c1_i64_4 : i64
    %21 = arith.cmpi ult, %c1024_i64_3, %20 : i64
    %c92_i8_5 = arith.constant 92 : i8
    cf.cond_br %21, ^bb1(%c92_i8_5 : i8), ^bb7
  ^bb9:  // pred: ^bb3
    %22 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %23 = llvm.load %22 : !llvm.ptr -> i64
    %c3_i64_6 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %24 = arith.cmpi uge, %23, %c3_i64_6 : i64
    %c80_i8_7 = arith.constant 80 : i8
    cf.cond_br %24, ^bb10, ^bb1(%c80_i8_7 : i8)
  ^bb10:  // pred: ^bb9
    %25 = arith.subi %23, %c3_i64_6 : i64
    llvm.store %25, %22 : i64, !llvm.ptr
    cf.br ^bb8
  ^bb11:  // pred: ^bb12
    %c3_i256 = arith.constant 3 : i256
    %26 = llvm.load %arg3 : !llvm.ptr -> i64
    %27 = llvm.getelementptr %arg2[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_8 = arith.constant 1 : i64
    %28 = arith.addi %26, %c1_i64_8 : i64
    llvm.store %28, %arg3 : i64, !llvm.ptr
    llvm.store %c3_i256, %27 : i256, !llvm.ptr
    cf.br ^bb17
  ^bb12:  // pred: ^bb14
    %c1024_i64_9 = arith.constant 1024 : i64
    %29 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_10 = arith.constant 1 : i64
    %30 = arith.addi %29, %c1_i64_10 : i64
    %31 = arith.cmpi ult, %c1024_i64_9, %30 : i64
    %c92_i8_11 = arith.constant 92 : i8
    cf.cond_br %31, ^bb1(%c92_i8_11 : i8), ^bb11
  ^bb13:  // pred: ^bb7
    %32 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %33 = llvm.load %32 : !llvm.ptr -> i64
    %c3_i64_12 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %34 = arith.cmpi uge, %33, %c3_i64_12 : i64
    %c80_i8_13 = arith.constant 80 : i8
    cf.cond_br %34, ^bb14, ^bb1(%c80_i8_13 : i8)
  ^bb14:  // pred: ^bb13
    %35 = arith.subi %33, %c3_i64_12 : i64
    llvm.store %35, %32 : i64, !llvm.ptr
    cf.br ^bb12
  ^bb15:  // pred: ^bb16
    %36 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_14 = arith.constant 1 : i64
    %37 = arith.subi %36, %c1_i64_14 : i64
    %38 = llvm.getelementptr %arg2[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %37, %arg3 : i64, !llvm.ptr
    %39 = llvm.load %38 : !llvm.ptr -> i256
    cf.br ^bb21
  ^bb16:  // pred: ^bb18
    %c1024_i64_15 = arith.constant 1024 : i64
    %40 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-1_i64 = arith.constant -1 : i64
    %41 = arith.addi %40, %c-1_i64 : i64
    %c1_i64_16 = arith.constant 1 : i64
    %42 = arith.cmpi ult, %40, %c1_i64_16 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %42, ^bb1(%c91_i8 : i8), ^bb15
  ^bb17:  // pred: ^bb11
    %43 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %44 = llvm.load %43 : !llvm.ptr -> i64
    %c2_i64 = arith.constant 2 : i64
    call @dora_fn_nop() : () -> ()
    %45 = arith.cmpi uge, %44, %c2_i64 : i64
    %c80_i8_17 = arith.constant 80 : i8
    cf.cond_br %45, ^bb18, ^bb1(%c80_i8_17 : i8)
  ^bb18:  // pred: ^bb17
    %46 = arith.subi %44, %c2_i64 : i64
    llvm.store %46, %43 : i64, !llvm.ptr
    cf.br ^bb16
  ^bb19:  // pred: ^bb20
    %47 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_18 = arith.constant 1 : i64
    %48 = arith.subi %47, %c1_i64_18 : i64
    %49 = llvm.getelementptr %arg2[%48] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %48, %arg3 : i64, !llvm.ptr
    %50 = llvm.load %49 : !llvm.ptr -> i256
    cf.br ^bb25
  ^bb20:  // pred: ^bb22
    %c1024_i64_19 = arith.constant 1024 : i64
    %51 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-1_i64_20 = arith.constant -1 : i64
    %52 = arith.addi %51, %c-1_i64_20 : i64
    %c1_i64_21 = arith.constant 1 : i64
    %53 = arith.cmpi ult, %51, %c1_i64_21 : i64
    %c91_i8_22 = arith.constant 91 : i8
    cf.cond_br %53, ^bb1(%c91_i8_22 : i8), ^bb19
  ^bb21:  // pred: ^bb15
    %54 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %55 = llvm.load %54 : !llvm.ptr -> i64
    %c2_i64_23 = arith.constant 2 : i64
    call @dora_fn_nop() : () -> ()
    %56 = arith.cmpi uge, %55, %c2_i64_23 : i64
    %c80_i8_24 = arith.constant 80 : i8
    cf.cond_br %56, ^bb22, ^bb1(%c80_i8_24 : i8)
  ^bb22:  // pred: ^bb21
    %57 = arith.subi %55, %c2_i64_23 : i64
    llvm.store %57, %54 : i64, !llvm.ptr
    cf.br ^bb20
  ^bb23:  // pred: ^bb24
    %58 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_25 = arith.constant 1 : i64
    %59 = arith.subi %58, %c1_i64_25 : i64
    %60 = llvm.getelementptr %arg2[%59] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %59, %arg3 : i64, !llvm.ptr
    %61 = llvm.load %60 : !llvm.ptr -> i256
    cf.br ^bb27
  ^bb24:  // pred: ^bb26
    %c1024_i64_26 = arith.constant 1024 : i64
    %62 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-1_i64_27 = arith.constant -1 : i64
    %63 = arith.addi %62, %c-1_i64_27 : i64
    %c1_i64_28 = arith.constant 1 : i64
    %64 = arith.cmpi ult, %62, %c1_i64_28 : i64
    %c91_i8_29 = arith.constant 91 : i8
    cf.cond_br %64, ^bb1(%c91_i8_29 : i8), ^bb23
  ^bb25:  // pred: ^bb19
    %65 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %66 = llvm.load %65 : !llvm.ptr -> i64
    %c2_i64_30 = arith.constant 2 : i64
    call @dora_fn_nop() : () -> ()
    %67 = arith.cmpi uge, %66, %c2_i64_30 : i64
    %c80_i8_31 = arith.constant 80 : i8
    cf.cond_br %67, ^bb26, ^bb1(%c80_i8_31 : i8)
  ^bb26:  // pred: ^bb25
    %68 = arith.subi %66, %c2_i64_30 : i64
    llvm.store %68, %65 : i64, !llvm.ptr
    cf.br ^bb24
  ^bb27:  // pred: ^bb23
    %c0_i64_32 = arith.constant 0 : i64
    %c1_i8 = arith.constant 1 : i8
    %69 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %70 = llvm.load %69 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_32, %c0_i64_32, %70, %c1_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c1_i8 : i8
  }
}
