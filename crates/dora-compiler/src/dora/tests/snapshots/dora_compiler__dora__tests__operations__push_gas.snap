---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  func.func private @dora_fn_nop()
  func.func private @dora_fn_tracing(!llvm.ptr, i8, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_fn_is_static(!llvm.ptr) -> i8
  func.func private @dora_fn_exp(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_chainid(!llvm.ptr) -> i64
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gaslimit_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_memory_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_memory_size(!llvm.ptr) -> i64
  func.func private @dora_fn_code_copy(!llvm.ptr, !llvm.ptr, i64, i64)
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_call(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_returndata_copy(!llvm.ptr, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_tload(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_tstore(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func public @main(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr) -> i8 attributes {llvm.emit_c_interface} {
    %c0_i64 = arith.constant 0 : i64
    %0 = llvm.alloca %c0_i64 x !llvm.ptr : (i64) -> !llvm.ptr
    llvm.store %arg2, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb5
  ^bb1(%1: i8):  // 11 preds: ^bb2, ^bb4, ^bb5, ^bb8, ^bb9, ^bb12, ^bb13, ^bb16, ^bb17, ^bb20, ^bb21
    %c0_i64_0 = arith.constant 0 : i64
    %2 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_0, %c0_i64_0, %2, %1) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %1 : i8
  ^bb2(%3: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %3 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3:  // pred: ^bb4
    %4 = llvm.load %arg1 : !llvm.ptr -> i64
    %5 = arith.extui %4 : i64 to i256
    %6 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %5, %6 : i256, !llvm.ptr
    %7 = llvm.getelementptr %6[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %7, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb9
  ^bb4:  // pred: ^bb6
    %c1024_i64 = arith.constant 1024 : i64
    %8 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %9 = arith.addi %8, %c1_i64 : i64
    llvm.store %9, %arg3 : i64, !llvm.ptr
    %10 = arith.cmpi ult, %c1024_i64, %9 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %10, ^bb1(%c92_i8 : i8), ^bb3
  ^bb5:  // pred: ^bb0
    %11 = llvm.load %arg1 : !llvm.ptr -> i64
    %c2_i64 = arith.constant 2 : i64
    call @dora_fn_nop() : () -> ()
    %12 = arith.cmpi uge, %11, %c2_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %12, ^bb6, ^bb1(%c80_i8 : i8)
  ^bb6:  // pred: ^bb5
    %13 = arith.subi %11, %c2_i64 : i64
    llvm.store %13, %arg1 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb7:  // pred: ^bb8
    %c21000_i256 = arith.constant 21000 : i256
    %14 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c21000_i256, %14 : i256, !llvm.ptr
    %15 = llvm.getelementptr %14[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %15, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb13
  ^bb8:  // pred: ^bb10
    %c1024_i64_1 = arith.constant 1024 : i64
    %16 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_2 = arith.constant 1 : i64
    %17 = arith.addi %16, %c1_i64_2 : i64
    llvm.store %17, %arg3 : i64, !llvm.ptr
    %18 = arith.cmpi ult, %c1024_i64_1, %17 : i64
    %c92_i8_3 = arith.constant 92 : i8
    cf.cond_br %18, ^bb1(%c92_i8_3 : i8), ^bb7
  ^bb9:  // pred: ^bb3
    %19 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %20 = arith.cmpi uge, %19, %c3_i64 : i64
    %c80_i8_4 = arith.constant 80 : i8
    cf.cond_br %20, ^bb10, ^bb1(%c80_i8_4 : i8)
  ^bb10:  // pred: ^bb9
    %21 = arith.subi %19, %c3_i64 : i64
    llvm.store %21, %arg1 : i64, !llvm.ptr
    cf.br ^bb8
  ^bb11:  // pred: ^bb12
    %c1_i256 = arith.constant 1 : i256
    %22 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    call @dora_fn_store_in_gaslimit_ptr(%arg0, %22) : (!llvm.ptr, !llvm.ptr) -> ()
    %23 = llvm.load %22 : !llvm.ptr -> i256
    %24 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %23, %24 : i256, !llvm.ptr
    %25 = llvm.getelementptr %24[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %25, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb17
  ^bb12:  // pred: ^bb14
    %c1024_i64_5 = arith.constant 1024 : i64
    %26 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_6 = arith.constant 1 : i64
    %27 = arith.addi %26, %c1_i64_6 : i64
    llvm.store %27, %arg3 : i64, !llvm.ptr
    %28 = arith.cmpi ult, %c1024_i64_5, %27 : i64
    %c92_i8_7 = arith.constant 92 : i8
    cf.cond_br %28, ^bb1(%c92_i8_7 : i8), ^bb11
  ^bb13:  // pred: ^bb7
    %29 = llvm.load %arg1 : !llvm.ptr -> i64
    %c2_i64_8 = arith.constant 2 : i64
    call @dora_fn_nop() : () -> ()
    %30 = arith.cmpi uge, %29, %c2_i64_8 : i64
    %c80_i8_9 = arith.constant 80 : i8
    cf.cond_br %30, ^bb14, ^bb1(%c80_i8_9 : i8)
  ^bb14:  // pred: ^bb13
    %31 = arith.subi %29, %c2_i64_8 : i64
    llvm.store %31, %arg1 : i64, !llvm.ptr
    cf.br ^bb12
  ^bb15:  // pred: ^bb16
    %32 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %33 = llvm.getelementptr %32[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %34 = llvm.load %33 : !llvm.ptr -> i256
    llvm.store %33, %0 : !llvm.ptr, !llvm.ptr
    %35 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %36 = llvm.getelementptr %35[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %37 = llvm.load %36 : !llvm.ptr -> i256
    llvm.store %36, %0 : !llvm.ptr, !llvm.ptr
    %38 = arith.subi %34, %37 : i256
    %39 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %38, %39 : i256, !llvm.ptr
    %40 = llvm.getelementptr %39[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %40, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb21
  ^bb16:  // pred: ^bb18
    %c1024_i64_10 = arith.constant 1024 : i64
    %41 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-1_i64 = arith.constant -1 : i64
    %42 = arith.addi %41, %c-1_i64 : i64
    llvm.store %42, %arg3 : i64, !llvm.ptr
    %c2_i64_11 = arith.constant 2 : i64
    %43 = arith.cmpi ult, %41, %c2_i64_11 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %43, ^bb1(%c91_i8 : i8), ^bb15
  ^bb17:  // pred: ^bb11
    %44 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_12 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %45 = arith.cmpi uge, %44, %c3_i64_12 : i64
    %c80_i8_13 = arith.constant 80 : i8
    cf.cond_br %45, ^bb18, ^bb1(%c80_i8_13 : i8)
  ^bb18:  // pred: ^bb17
    %46 = arith.subi %44, %c3_i64_12 : i64
    llvm.store %46, %arg1 : i64, !llvm.ptr
    cf.br ^bb16
  ^bb19:  // pred: ^bb20
    %47 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %48 = llvm.getelementptr %47[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %49 = llvm.load %48 : !llvm.ptr -> i256
    llvm.store %48, %0 : !llvm.ptr, !llvm.ptr
    %50 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %51 = llvm.getelementptr %50[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %52 = llvm.load %51 : !llvm.ptr -> i256
    llvm.store %51, %0 : !llvm.ptr, !llvm.ptr
    %53 = arith.subi %49, %52 : i256
    %54 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %53, %54 : i256, !llvm.ptr
    %55 = llvm.getelementptr %54[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %55, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb23
  ^bb20:  // pred: ^bb22
    %c1024_i64_14 = arith.constant 1024 : i64
    %56 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-1_i64_15 = arith.constant -1 : i64
    %57 = arith.addi %56, %c-1_i64_15 : i64
    llvm.store %57, %arg3 : i64, !llvm.ptr
    %c2_i64_16 = arith.constant 2 : i64
    %58 = arith.cmpi ult, %56, %c2_i64_16 : i64
    %c91_i8_17 = arith.constant 91 : i8
    cf.cond_br %58, ^bb1(%c91_i8_17 : i8), ^bb19
  ^bb21:  // pred: ^bb15
    %59 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_18 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %60 = arith.cmpi uge, %59, %c3_i64_18 : i64
    %c80_i8_19 = arith.constant 80 : i8
    cf.cond_br %60, ^bb22, ^bb1(%c80_i8_19 : i8)
  ^bb22:  // pred: ^bb21
    %61 = arith.subi %59, %c3_i64_18 : i64
    llvm.store %61, %arg1 : i64, !llvm.ptr
    cf.br ^bb20
  ^bb23:  // pred: ^bb19
    %c0_i64_20 = arith.constant 0 : i64
    %c1_i8 = arith.constant 1 : i8
    %62 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_20, %c0_i64_20, %62, %c1_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c1_i8 : i8
  }
}
