---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  llvm.mlir.global internal @dora_global_memory_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_memory_size() {addr_space = 0 : i32} : i64
  func.func private @dora_fn_nop()
  func.func private @dora_fn_tracing(!llvm.ptr, i8, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_fn_is_static(!llvm.ptr) -> i8
  func.func private @dora_fn_exp(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_chainid(!llvm.ptr) -> i64
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gaslimit_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_code_copy(!llvm.ptr, !llvm.ptr, i64, i64)
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_call(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_returndata_copy(!llvm.ptr, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_tload(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_tstore(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func public @main(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr) -> i8 attributes {llvm.emit_c_interface} {
    %c0_i64 = arith.constant 0 : i64
    %0 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %c0_i64, %0 : i64, !llvm.ptr
    cf.br ^bb5
  ^bb1(%1: i8):  // 11 preds: ^bb2, ^bb4, ^bb5, ^bb8, ^bb9, ^bb12, ^bb13, ^bb16, ^bb17, ^bb20, ^bb21
    %c0_i64_0 = arith.constant 0 : i64
    %2 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_0, %c0_i64_0, %2, %1) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %1 : i8
  ^bb2(%3: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %3 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3:  // pred: ^bb4
    %4 = llvm.load %arg1 : !llvm.ptr -> i64
    %5 = arith.extui %4 : i64 to i256
    %6 = llvm.load %arg3 : !llvm.ptr -> i64
    %7 = llvm.getelementptr %arg2[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64 = arith.constant 1 : i64
    %8 = arith.addi %6, %c1_i64 : i64
    llvm.store %8, %arg3 : i64, !llvm.ptr
    llvm.store %5, %7 : i256, !llvm.ptr
    cf.br ^bb9
  ^bb4:  // pred: ^bb6
    %c1024_i64 = arith.constant 1024 : i64
    %9 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_1 = arith.constant 1 : i64
    %10 = arith.addi %9, %c1_i64_1 : i64
    %11 = arith.cmpi ult, %c1024_i64, %10 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %11, ^bb1(%c92_i8 : i8), ^bb3
  ^bb5:  // pred: ^bb0
    %12 = llvm.load %arg1 : !llvm.ptr -> i64
    %c2_i64 = arith.constant 2 : i64
    call @dora_fn_nop() : () -> ()
    %13 = arith.cmpi uge, %12, %c2_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %13, ^bb6, ^bb1(%c80_i8 : i8)
  ^bb6:  // pred: ^bb5
    %14 = arith.subi %12, %c2_i64 : i64
    llvm.store %14, %arg1 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb7:  // pred: ^bb8
    %c21000_i256 = arith.constant 21000 : i256
    %15 = llvm.load %arg3 : !llvm.ptr -> i64
    %16 = llvm.getelementptr %arg2[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_2 = arith.constant 1 : i64
    %17 = arith.addi %15, %c1_i64_2 : i64
    llvm.store %17, %arg3 : i64, !llvm.ptr
    llvm.store %c21000_i256, %16 : i256, !llvm.ptr
    cf.br ^bb13
  ^bb8:  // pred: ^bb10
    %c1024_i64_3 = arith.constant 1024 : i64
    %18 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_4 = arith.constant 1 : i64
    %19 = arith.addi %18, %c1_i64_4 : i64
    %20 = arith.cmpi ult, %c1024_i64_3, %19 : i64
    %c92_i8_5 = arith.constant 92 : i8
    cf.cond_br %20, ^bb1(%c92_i8_5 : i8), ^bb7
  ^bb9:  // pred: ^bb3
    %21 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %22 = arith.cmpi uge, %21, %c3_i64 : i64
    %c80_i8_6 = arith.constant 80 : i8
    cf.cond_br %22, ^bb10, ^bb1(%c80_i8_6 : i8)
  ^bb10:  // pred: ^bb9
    %23 = arith.subi %21, %c3_i64 : i64
    llvm.store %23, %arg1 : i64, !llvm.ptr
    cf.br ^bb8
  ^bb11:  // pred: ^bb12
    %c1_i256 = arith.constant 1 : i256
    %24 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    call @dora_fn_store_in_gaslimit_ptr(%arg0, %24) : (!llvm.ptr, !llvm.ptr) -> ()
    %25 = llvm.load %24 : !llvm.ptr -> i256
    %26 = llvm.load %arg3 : !llvm.ptr -> i64
    %27 = llvm.getelementptr %arg2[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_7 = arith.constant 1 : i64
    %28 = arith.addi %26, %c1_i64_7 : i64
    llvm.store %28, %arg3 : i64, !llvm.ptr
    llvm.store %25, %27 : i256, !llvm.ptr
    cf.br ^bb17
  ^bb12:  // pred: ^bb14
    %c1024_i64_8 = arith.constant 1024 : i64
    %29 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_9 = arith.constant 1 : i64
    %30 = arith.addi %29, %c1_i64_9 : i64
    %31 = arith.cmpi ult, %c1024_i64_8, %30 : i64
    %c92_i8_10 = arith.constant 92 : i8
    cf.cond_br %31, ^bb1(%c92_i8_10 : i8), ^bb11
  ^bb13:  // pred: ^bb7
    %32 = llvm.load %arg1 : !llvm.ptr -> i64
    %c2_i64_11 = arith.constant 2 : i64
    call @dora_fn_nop() : () -> ()
    %33 = arith.cmpi uge, %32, %c2_i64_11 : i64
    %c80_i8_12 = arith.constant 80 : i8
    cf.cond_br %33, ^bb14, ^bb1(%c80_i8_12 : i8)
  ^bb14:  // pred: ^bb13
    %34 = arith.subi %32, %c2_i64_11 : i64
    llvm.store %34, %arg1 : i64, !llvm.ptr
    cf.br ^bb12
  ^bb15:  // pred: ^bb16
    %35 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_13 = arith.constant 1 : i64
    %36 = arith.subi %35, %c1_i64_13 : i64
    %37 = llvm.getelementptr %arg2[%36] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %36, %arg3 : i64, !llvm.ptr
    %38 = llvm.load %37 : !llvm.ptr -> i256
    %39 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_14 = arith.constant 1 : i64
    %40 = arith.subi %39, %c1_i64_14 : i64
    %41 = llvm.getelementptr %arg2[%40] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %40, %arg3 : i64, !llvm.ptr
    %42 = llvm.load %41 : !llvm.ptr -> i256
    %43 = arith.subi %38, %42 : i256
    %44 = llvm.load %arg3 : !llvm.ptr -> i64
    %45 = llvm.getelementptr %arg2[%44] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_15 = arith.constant 1 : i64
    %46 = arith.addi %44, %c1_i64_15 : i64
    llvm.store %46, %arg3 : i64, !llvm.ptr
    llvm.store %43, %45 : i256, !llvm.ptr
    cf.br ^bb21
  ^bb16:  // pred: ^bb18
    %c1024_i64_16 = arith.constant 1024 : i64
    %47 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-1_i64 = arith.constant -1 : i64
    %48 = arith.addi %47, %c-1_i64 : i64
    %c2_i64_17 = arith.constant 2 : i64
    %49 = arith.cmpi ult, %47, %c2_i64_17 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %49, ^bb1(%c91_i8 : i8), ^bb15
  ^bb17:  // pred: ^bb11
    %50 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_18 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %51 = arith.cmpi uge, %50, %c3_i64_18 : i64
    %c80_i8_19 = arith.constant 80 : i8
    cf.cond_br %51, ^bb18, ^bb1(%c80_i8_19 : i8)
  ^bb18:  // pred: ^bb17
    %52 = arith.subi %50, %c3_i64_18 : i64
    llvm.store %52, %arg1 : i64, !llvm.ptr
    cf.br ^bb16
  ^bb19:  // pred: ^bb20
    %53 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_20 = arith.constant 1 : i64
    %54 = arith.subi %53, %c1_i64_20 : i64
    %55 = llvm.getelementptr %arg2[%54] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %54, %arg3 : i64, !llvm.ptr
    %56 = llvm.load %55 : !llvm.ptr -> i256
    %57 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_21 = arith.constant 1 : i64
    %58 = arith.subi %57, %c1_i64_21 : i64
    %59 = llvm.getelementptr %arg2[%58] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %58, %arg3 : i64, !llvm.ptr
    %60 = llvm.load %59 : !llvm.ptr -> i256
    %61 = arith.subi %56, %60 : i256
    %62 = llvm.load %arg3 : !llvm.ptr -> i64
    %63 = llvm.getelementptr %arg2[%62] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_22 = arith.constant 1 : i64
    %64 = arith.addi %62, %c1_i64_22 : i64
    llvm.store %64, %arg3 : i64, !llvm.ptr
    llvm.store %61, %63 : i256, !llvm.ptr
    cf.br ^bb23
  ^bb20:  // pred: ^bb22
    %c1024_i64_23 = arith.constant 1024 : i64
    %65 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-1_i64_24 = arith.constant -1 : i64
    %66 = arith.addi %65, %c-1_i64_24 : i64
    %c2_i64_25 = arith.constant 2 : i64
    %67 = arith.cmpi ult, %65, %c2_i64_25 : i64
    %c91_i8_26 = arith.constant 91 : i8
    cf.cond_br %67, ^bb1(%c91_i8_26 : i8), ^bb19
  ^bb21:  // pred: ^bb15
    %68 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_27 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %69 = arith.cmpi uge, %68, %c3_i64_27 : i64
    %c80_i8_28 = arith.constant 80 : i8
    cf.cond_br %69, ^bb22, ^bb1(%c80_i8_28 : i8)
  ^bb22:  // pred: ^bb21
    %70 = arith.subi %68, %c3_i64_27 : i64
    llvm.store %70, %arg1 : i64, !llvm.ptr
    cf.br ^bb20
  ^bb23:  // pred: ^bb19
    %c0_i64_29 = arith.constant 0 : i64
    %c1_i8 = arith.constant 1 : i8
    %71 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_29, %c0_i64_29, %71, %c1_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c1_i8 : i8
  }
}
