---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
---
module {
  func.func private @dora_fn_nop()
  func.func private @dora_fn_tracing(!llvm.ptr, i64, i8, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_fn_is_static(!llvm.ptr) -> i8
  func.func private @dora_fn_exp(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_calldata_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_data_load(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_data_section(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_data_section_size(!llvm.ptr) -> i64
  func.func private @dora_fn_data_section_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_chainid(!llvm.ptr) -> i64
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gaslimit_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_memory_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_memory_size(!llvm.ptr) -> i64
  func.func private @dora_fn_code_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_eofcreate(!llvm.ptr, i8, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returncontract(!llvm.ptr, i8, i64, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_call(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_extcall_addr_validate(!llvm.ptr, !llvm.ptr) -> i8
  func.func private @dora_fn_extcall(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_returndata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_returndata_copy(!llvm.ptr, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_tload(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_tstore(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_func_stack_push(!llvm.ptr, i64, i64) -> i8
  func.func private @dora_fn_func_stack_pop(!llvm.ptr) -> i64
  func.func private @dora_fn_func_stack_grow(!llvm.ptr)
  func.func private @dora_fn_set_resume(!llvm.ptr, i32)
  func.func private @dora_fn_get_resume(!llvm.ptr) -> i32
  func.func private @op255(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr, %arg4: !llvm.ptr) -> i8 {
    cf.br ^bb3
  ^bb1(%0: i8):  // 4 preds: ^bb3, ^bb4, ^bb6, ^bb7
    %c0_i64 = arith.constant 0 : i64
    %1 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64, %c0_i64, %1, %0) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %0 : i8
  ^bb2(%2: i8):  // no predecessors
    return %2 : i8
  ^bb3:  // pred: ^bb0
    %3 = llvm.load %arg1 : !llvm.ptr -> i64
    %c0_i64_0 = arith.constant 0 : i64
    call @dora_fn_nop() : () -> ()
    %4 = arith.cmpi uge, %3, %c0_i64_0 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %4, ^bb5, ^bb1(%c80_i8 : i8)
  ^bb4:  // pred: ^bb5
    %c1024_i64 = arith.constant 1024 : i64
    %5 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-1_i64 = arith.constant -1 : i64
    %6 = arith.addi %5, %c-1_i64 : i64
    llvm.store %6, %arg3 : i64, !llvm.ptr
    %c1_i64 = arith.constant 1 : i64
    %7 = arith.cmpi ult, %5, %c1_i64 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %7, ^bb1(%c91_i8 : i8), ^bb6
  ^bb5:  // pred: ^bb3
    %8 = arith.subi %3, %c0_i64_0 : i64
    llvm.store %8, %arg1 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb6:  // pred: ^bb4
    %9 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.getelementptr %9[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %11 = llvm.load %10 : !llvm.ptr -> i256
    llvm.store %10, %arg4 : !llvm.ptr, !llvm.ptr
    %12 = call @dora_fn_is_static(%arg0) : (!llvm.ptr) -> i8
    %c0_i8 = arith.constant 0 : i8
    %13 = arith.cmpi ne, %12, %c0_i8 : i8
    %c87_i8 = arith.constant 87 : i8
    cf.cond_br %13, ^bb1(%c87_i8 : i8), ^bb7
  ^bb7:  // pred: ^bb6
    %c1_i256 = arith.constant 1 : i256
    %14 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %11, %14 {alignment = 1 : i64} : i256, !llvm.ptr
    %15 = call @dora_fn_selfdestruct(%arg0, %14) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %16 = llvm.getelementptr %15[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %16 : !llvm.ptr -> i64
    %18 = llvm.load %arg1 : !llvm.ptr -> i64
    %19 = arith.cmpi ult, %18, %17 : i64
    scf.if %19 {
    } else {
      %21 = arith.subi %18, %17 : i64
      llvm.store %21, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_1 = arith.constant 80 : i8
    cf.cond_br %19, ^bb1(%c80_i8_1 : i8), ^bb8
  ^bb8:  // pred: ^bb7
    %c0_i64_2 = arith.constant 0 : i64
    %c3_i8 = arith.constant 3 : i8
    %20 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_2, %c0_i64_2, %20, %c3_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c3_i8 : i8
  ^bb9:  // no predecessors
    cf.br ^bb10
  ^bb10:  // pred: ^bb9
    %c0_i8_3 = arith.constant 0 : i8
    return %c0_i8_3 : i8
  }
  func.func private @op95(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr, %arg4: !llvm.ptr) -> i8 {
    cf.br ^bb3
  ^bb1(%0: i8):  // 2 preds: ^bb3, ^bb4
    %c0_i64 = arith.constant 0 : i64
    %1 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64, %c0_i64, %1, %0) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %0 : i8
  ^bb2(%2: i8):  // no predecessors
    return %2 : i8
  ^bb3:  // pred: ^bb0
    %3 = llvm.load %arg1 : !llvm.ptr -> i64
    %c2_i64 = arith.constant 2 : i64
    call @dora_fn_nop() : () -> ()
    %4 = arith.cmpi uge, %3, %c2_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %4, ^bb5, ^bb1(%c80_i8 : i8)
  ^bb4:  // pred: ^bb5
    %c1024_i64 = arith.constant 1024 : i64
    %5 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %6 = arith.addi %5, %c1_i64 : i64
    llvm.store %6, %arg3 : i64, !llvm.ptr
    %7 = arith.cmpi ult, %c1024_i64, %6 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %7, ^bb1(%c92_i8 : i8), ^bb6
  ^bb5:  // pred: ^bb3
    %8 = arith.subi %3, %c2_i64 : i64
    llvm.store %8, %arg1 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb6:  // pred: ^bb4
    %c0_i256 = arith.constant 0 : i256
    %9 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256, %9 : i256, !llvm.ptr
    %10 = llvm.getelementptr %9[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %10, %arg4 : !llvm.ptr, !llvm.ptr
    cf.br ^bb7
  ^bb7:  // pred: ^bb6
    %c0_i8 = arith.constant 0 : i8
    return %c0_i8 : i8
  }
  func.func public @call(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr) -> i8 attributes {llvm.emit_c_interface} {
    %c0_i64 = arith.constant 0 : i64
    %0 = llvm.alloca %c0_i64 x !llvm.ptr : (i64) -> !llvm.ptr
    llvm.store %arg2, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb41
  ^bb1(%1: i8):  // 9 preds: ^bb6, ^bb21, ^bb22, ^bb38, ^bb39, ^bb41, ^bb42, ^bb45, ^bb50
    %c0_i64_0 = arith.constant 0 : i64
    %2 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_0, %c0_i64_0, %2, %1) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %1 : i8
  ^bb2(%3: i256):  // no predecessors
    llvm.unreachable
  ^bb3(%4: i8):  // 33 preds: ^bb7, ^bb8, ^bb9, ^bb10, ^bb11, ^bb12, ^bb13, ^bb14, ^bb15, ^bb16, ^bb17, ^bb18, ^bb19, ^bb20, ^bb23, ^bb24, ^bb25, ^bb26, ^bb27, ^bb28, ^bb29, ^bb30, ^bb31, ^bb32, ^bb33, ^bb34, ^bb35, ^bb36, ^bb37, ^bb40, ^bb44, ^bb47, ^bb51
    return %4 : i8
  ^bb4(%5: i32):  // no predecessors
    llvm.unreachable
  ^bb5:  // no predecessors
    llvm.unreachable
  ^bb6:  // pred: ^bb41
    %6 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %7 = arith.cmpi uge, %6, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %7, ^bb43, ^bb1(%c80_i8 : i8)
  ^bb7:  // pred: ^bb44
    %8 = call @op95(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %9 = arith.cmpi ne, %8, %c0_i8_5 : i8
    cf.cond_br %9, ^bb3(%8 : i8), ^bb8
  ^bb8:  // pred: ^bb7
    %10 = call @op95(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %11 = arith.cmpi ne, %10, %c0_i8_5 : i8
    cf.cond_br %11, ^bb3(%10 : i8), ^bb9
  ^bb9:  // pred: ^bb8
    %12 = call @op95(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %13 = arith.cmpi ne, %12, %c0_i8_5 : i8
    cf.cond_br %13, ^bb3(%12 : i8), ^bb10
  ^bb10:  // pred: ^bb9
    %14 = call @op95(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %15 = arith.cmpi ne, %14, %c0_i8_5 : i8
    cf.cond_br %15, ^bb3(%14 : i8), ^bb11
  ^bb11:  // pred: ^bb10
    %16 = call @op95(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %17 = arith.cmpi ne, %16, %c0_i8_5 : i8
    cf.cond_br %17, ^bb3(%16 : i8), ^bb12
  ^bb12:  // pred: ^bb11
    %18 = call @op95(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %19 = arith.cmpi ne, %18, %c0_i8_5 : i8
    cf.cond_br %19, ^bb3(%18 : i8), ^bb13
  ^bb13:  // pred: ^bb12
    %20 = call @op95(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %21 = arith.cmpi ne, %20, %c0_i8_5 : i8
    cf.cond_br %21, ^bb3(%20 : i8), ^bb14
  ^bb14:  // pred: ^bb13
    %22 = call @op95(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %23 = arith.cmpi ne, %22, %c0_i8_5 : i8
    cf.cond_br %23, ^bb3(%22 : i8), ^bb15
  ^bb15:  // pred: ^bb14
    %24 = call @op95(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %25 = arith.cmpi ne, %24, %c0_i8_5 : i8
    cf.cond_br %25, ^bb3(%24 : i8), ^bb16
  ^bb16:  // pred: ^bb15
    %26 = call @op95(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %27 = arith.cmpi ne, %26, %c0_i8_5 : i8
    cf.cond_br %27, ^bb3(%26 : i8), ^bb17
  ^bb17:  // pred: ^bb16
    %28 = call @op95(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %29 = arith.cmpi ne, %28, %c0_i8_5 : i8
    cf.cond_br %29, ^bb3(%28 : i8), ^bb18
  ^bb18:  // pred: ^bb17
    %30 = call @op95(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %31 = arith.cmpi ne, %30, %c0_i8_5 : i8
    cf.cond_br %31, ^bb3(%30 : i8), ^bb19
  ^bb19:  // pred: ^bb18
    %32 = call @op95(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %33 = arith.cmpi ne, %32, %c0_i8_5 : i8
    cf.cond_br %33, ^bb3(%32 : i8), ^bb20
  ^bb20:  // pred: ^bb19
    %34 = call @op95(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %35 = arith.cmpi ne, %34, %c0_i8_5 : i8
    cf.cond_br %35, ^bb3(%34 : i8), ^bb21
  ^bb21:  // pred: ^bb20
    %36 = call @op95(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %37 = arith.cmpi ne, %36, %c0_i8_5 : i8
    cf.cond_br %37, ^bb1(%36 : i8), ^bb22
  ^bb22:  // pred: ^bb21
    %38 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_1 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %39 = arith.cmpi uge, %38, %c3_i64_1 : i64
    %c80_i8_2 = arith.constant 80 : i8
    cf.cond_br %39, ^bb46, ^bb1(%c80_i8_2 : i8)
  ^bb23:  // pred: ^bb47
    %40 = call @op95(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %41 = arith.cmpi ne, %40, %c0_i8_5 : i8
    cf.cond_br %41, ^bb3(%40 : i8), ^bb24
  ^bb24:  // pred: ^bb23
    %42 = call @op95(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %43 = arith.cmpi ne, %42, %c0_i8_5 : i8
    cf.cond_br %43, ^bb3(%42 : i8), ^bb25
  ^bb25:  // pred: ^bb24
    %44 = call @op95(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %45 = arith.cmpi ne, %44, %c0_i8_5 : i8
    cf.cond_br %45, ^bb3(%44 : i8), ^bb26
  ^bb26:  // pred: ^bb25
    %46 = call @op95(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %47 = arith.cmpi ne, %46, %c0_i8_5 : i8
    cf.cond_br %47, ^bb3(%46 : i8), ^bb27
  ^bb27:  // pred: ^bb26
    %48 = call @op95(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %49 = arith.cmpi ne, %48, %c0_i8_5 : i8
    cf.cond_br %49, ^bb3(%48 : i8), ^bb28
  ^bb28:  // pred: ^bb27
    %50 = call @op95(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %51 = arith.cmpi ne, %50, %c0_i8_5 : i8
    cf.cond_br %51, ^bb3(%50 : i8), ^bb29
  ^bb29:  // pred: ^bb28
    %52 = call @op95(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %53 = arith.cmpi ne, %52, %c0_i8_5 : i8
    cf.cond_br %53, ^bb3(%52 : i8), ^bb30
  ^bb30:  // pred: ^bb29
    %54 = call @op95(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %55 = arith.cmpi ne, %54, %c0_i8_5 : i8
    cf.cond_br %55, ^bb3(%54 : i8), ^bb31
  ^bb31:  // pred: ^bb30
    %56 = call @op95(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %57 = arith.cmpi ne, %56, %c0_i8_5 : i8
    cf.cond_br %57, ^bb3(%56 : i8), ^bb32
  ^bb32:  // pred: ^bb31
    %58 = call @op95(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %59 = arith.cmpi ne, %58, %c0_i8_5 : i8
    cf.cond_br %59, ^bb3(%58 : i8), ^bb33
  ^bb33:  // pred: ^bb32
    %60 = call @op95(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %61 = arith.cmpi ne, %60, %c0_i8_5 : i8
    cf.cond_br %61, ^bb3(%60 : i8), ^bb34
  ^bb34:  // pred: ^bb33
    %62 = call @op95(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %63 = arith.cmpi ne, %62, %c0_i8_5 : i8
    cf.cond_br %63, ^bb3(%62 : i8), ^bb35
  ^bb35:  // pred: ^bb34
    %64 = call @op95(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %65 = arith.cmpi ne, %64, %c0_i8_5 : i8
    cf.cond_br %65, ^bb3(%64 : i8), ^bb36
  ^bb36:  // pred: ^bb35
    %66 = call @op95(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %67 = arith.cmpi ne, %66, %c0_i8_5 : i8
    cf.cond_br %67, ^bb3(%66 : i8), ^bb37
  ^bb37:  // pred: ^bb36
    %68 = call @op95(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %69 = arith.cmpi ne, %68, %c0_i8_5 : i8
    cf.cond_br %69, ^bb3(%68 : i8), ^bb38
  ^bb38:  // pred: ^bb37
    %70 = call @op95(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %71 = arith.cmpi ne, %70, %c0_i8_5 : i8
    cf.cond_br %71, ^bb1(%70 : i8), ^bb39
  ^bb39:  // pred: ^bb38
    %72 = llvm.load %arg1 : !llvm.ptr -> i64
    %c0_i64_3 = arith.constant 0 : i64
    call @dora_fn_nop() : () -> ()
    %73 = arith.cmpi uge, %72, %c0_i64_3 : i64
    %c80_i8_4 = arith.constant 80 : i8
    cf.cond_br %73, ^bb49, ^bb1(%c80_i8_4 : i8)
  ^bb40:  // pred: ^bb51
    %74 = call @op255(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %75 = arith.cmpi ne, %74, %c0_i8_5 : i8
    cf.cond_br %75, ^bb3(%74 : i8), ^bb52
  ^bb41:  // pred: ^bb0
    %c0_i8 = arith.constant 0 : i8
    %c0_i8_5 = arith.constant 0 : i8
    %76 = arith.cmpi ne, %c0_i8, %c0_i8_5 : i8
    cf.cond_br %76, ^bb1(%c0_i8 : i8), ^bb6
  ^bb42:  // pred: ^bb43
    %c1024_i64 = arith.constant 1024 : i64
    %77 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %78 = arith.addi %77, %c1_i64 : i64
    llvm.store %78, %arg3 : i64, !llvm.ptr
    %79 = arith.cmpi ult, %c1024_i64, %78 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %79, ^bb1(%c92_i8 : i8), ^bb44
  ^bb43:  // pred: ^bb6
    %80 = arith.subi %6, %c3_i64 : i64
    llvm.store %80, %arg1 : i64, !llvm.ptr
    cf.br ^bb42
  ^bb44:  // pred: ^bb42
    %c1_i256 = arith.constant 1 : i256
    %81 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c1_i256, %81 : i256, !llvm.ptr
    %82 = llvm.getelementptr %81[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %82, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_6 = arith.constant 0 : i8
    %83 = arith.cmpi ne, %c0_i8_6, %c0_i8_5 : i8
    cf.cond_br %83, ^bb3(%c0_i8_6 : i8), ^bb7
  ^bb45:  // pred: ^bb46
    %c1024_i64_7 = arith.constant 1024 : i64
    %84 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_8 = arith.constant 1 : i64
    %85 = arith.addi %84, %c1_i64_8 : i64
    llvm.store %85, %arg3 : i64, !llvm.ptr
    %86 = arith.cmpi ult, %c1024_i64_7, %85 : i64
    %c92_i8_9 = arith.constant 92 : i8
    cf.cond_br %86, ^bb1(%c92_i8_9 : i8), ^bb47
  ^bb46:  // pred: ^bb22
    %87 = arith.subi %38, %c3_i64_1 : i64
    llvm.store %87, %arg1 : i64, !llvm.ptr
    cf.br ^bb45
  ^bb47:  // pred: ^bb45
    %c2_i256 = arith.constant 2 : i256
    %88 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c2_i256, %88 : i256, !llvm.ptr
    %89 = llvm.getelementptr %88[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %89, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_10 = arith.constant 0 : i8
    %90 = arith.cmpi ne, %c0_i8_10, %c0_i8_5 : i8
    cf.cond_br %90, ^bb3(%c0_i8_10 : i8), ^bb23
  ^bb48:  // pred: ^bb49
    %c1024_i64_11 = arith.constant 1024 : i64
    %91 = llvm.load %arg3 : !llvm.ptr -> i64
    %c0_i64_12 = arith.constant 0 : i64
    %92 = arith.addi %91, %c0_i64_12 : i64
    llvm.store %92, %arg3 : i64, !llvm.ptr
    cf.br ^bb50
  ^bb49:  // pred: ^bb39
    %93 = arith.subi %72, %c0_i64_3 : i64
    llvm.store %93, %arg1 : i64, !llvm.ptr
    cf.br ^bb48
  ^bb50:  // pred: ^bb48
    %c88_i8 = arith.constant 88 : i8
    cf.br ^bb1(%c88_i8 : i8)
  ^bb51:  // no predecessors
    %c0_i8_13 = arith.constant 0 : i8
    %94 = arith.cmpi ne, %c0_i8_13, %c0_i8_5 : i8
    cf.cond_br %94, ^bb3(%c0_i8_13 : i8), ^bb40
  ^bb52:  // pred: ^bb40
    %c0_i64_14 = arith.constant 0 : i64
    %c2_i8 = arith.constant 2 : i8
    %95 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_14, %c0_i64_14, %95, %c2_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c2_i8 : i8
  }
}
