---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  func.func private @dora_fn_nop()
  func.func private @dora_fn_tracing(!llvm.ptr, i8, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_fn_is_static(!llvm.ptr) -> i8
  func.func private @dora_fn_exp(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_calldata_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_data_section(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_data_section_size(!llvm.ptr) -> i64
  func.func private @dora_fn_data_section_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_chainid(!llvm.ptr) -> i64
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gaslimit_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_memory_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_memory_size(!llvm.ptr) -> i64
  func.func private @dora_fn_code_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_eofcreate(!llvm.ptr, i8, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returncontract(!llvm.ptr, i8, i64, i64, index, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_call(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_extcall(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_returndata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_returndata_copy(!llvm.ptr, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_tload(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_tstore(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @op91(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr, %arg4: !llvm.ptr) -> i8 {
    cf.br ^bb5
  ^bb1(%0: i8):  // pred: ^bb5
    %c0_i64 = arith.constant 0 : i64
    %1 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64, %c0_i64, %1, %0) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %0 : i8
  ^bb2(%2: i8):  // no predecessors
    return %2 : i8
  ^bb3:  // pred: ^bb4
    cf.br ^bb7
  ^bb4:  // pred: ^bb6
    %c1024_i64 = arith.constant 1024 : i64
    %3 = llvm.load %arg3 : !llvm.ptr -> i64
    %c0_i64_0 = arith.constant 0 : i64
    %4 = arith.addi %3, %c0_i64_0 : i64
    llvm.store %4, %arg3 : i64, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // pred: ^bb0
    %5 = llvm.load %arg1 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    call @dora_fn_nop() : () -> ()
    %6 = arith.cmpi uge, %5, %c1_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %6, ^bb6, ^bb1(%c80_i8 : i8)
  ^bb6:  // pred: ^bb5
    %7 = arith.subi %5, %c1_i64 : i64
    llvm.store %7, %arg1 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb7:  // pred: ^bb3
    %c0_i8 = arith.constant 0 : i8
    return %c0_i8 : i8
  }
  func.func public @main(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr) -> i8 attributes {llvm.emit_c_interface} {
    %c0_i64 = arith.constant 0 : i64
    %0 = llvm.alloca %c0_i64 x !llvm.ptr : (i64) -> !llvm.ptr
    llvm.store %arg2, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8 = arith.constant 0 : i8
    %c0_i8_0 = arith.constant 0 : i8
    %1 = arith.cmpi ne, %c0_i8, %c0_i8_0 : i8
    cf.cond_br %1, ^bb1(%c0_i8 : i8), ^bb6
  ^bb1(%2: i8):  // 16 preds: ^bb0, ^bb2, ^bb4, ^bb5, ^bb6, ^bb9, ^bb10, ^bb12, ^bb13, ^bb14, ^bb15, ^bb17, ^bb18, ^bb19, ^bb22, ^bb23
    %c0_i64_1 = arith.constant 0 : i64
    %3 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_1, %c0_i64_1, %3, %2) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %2 : i8
  ^bb2(%4: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %4 : i256, [
      default: ^bb1(%c89_i8 : i8),
      2: ^bb12
    ]
  ^bb3(%5: i8):  // 2 preds: ^bb8, ^bb21
    return %5 : i8
  ^bb4:  // pred: ^bb5
    %c0_i256 = arith.constant 0 : i256
    %6 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256, %6 : i256, !llvm.ptr
    %7 = llvm.getelementptr %6[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %7, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_2 = arith.constant 0 : i8
    %8 = arith.cmpi ne, %c0_i8_2, %c0_i8_0 : i8
    cf.cond_br %8, ^bb1(%c0_i8_2 : i8), ^bb10
  ^bb5:  // pred: ^bb7
    %c1024_i64 = arith.constant 1024 : i64
    %9 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %10 = arith.addi %9, %c1_i64 : i64
    llvm.store %10, %arg3 : i64, !llvm.ptr
    %11 = arith.cmpi ult, %c1024_i64, %10 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %11, ^bb1(%c92_i8 : i8), ^bb4
  ^bb6:  // pred: ^bb0
    %12 = llvm.load %arg1 : !llvm.ptr -> i64
    %c2_i64 = arith.constant 2 : i64
    call @dora_fn_nop() : () -> ()
    %13 = arith.cmpi uge, %12, %c2_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %13, ^bb7, ^bb1(%c80_i8 : i8)
  ^bb7:  // pred: ^bb6
    %14 = arith.subi %12, %c2_i64 : i64
    llvm.store %14, %arg1 : i64, !llvm.ptr
    cf.br ^bb5
  ^bb8:  // pred: ^bb9
    %c1_i256 = arith.constant 1 : i256
    %15 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c1_i256, %15 : i256, !llvm.ptr
    %16 = llvm.getelementptr %15[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %16, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_3 = arith.constant 0 : i8
    %17 = arith.cmpi ne, %c0_i8_3, %c0_i8_0 : i8
    cf.cond_br %17, ^bb3(%c0_i8_3 : i8), ^bb12
  ^bb9:  // pred: ^bb11
    %c1024_i64_4 = arith.constant 1024 : i64
    %18 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_5 = arith.constant 1 : i64
    %19 = arith.addi %18, %c1_i64_5 : i64
    llvm.store %19, %arg3 : i64, !llvm.ptr
    %20 = arith.cmpi ult, %c1024_i64_4, %19 : i64
    %c92_i8_6 = arith.constant 92 : i8
    cf.cond_br %20, ^bb1(%c92_i8_6 : i8), ^bb8
  ^bb10:  // pred: ^bb4
    %21 = llvm.load %arg1 : !llvm.ptr -> i64
    %c2_i64_7 = arith.constant 2 : i64
    call @dora_fn_nop() : () -> ()
    %22 = arith.cmpi uge, %21, %c2_i64_7 : i64
    %c80_i8_8 = arith.constant 80 : i8
    cf.cond_br %22, ^bb11, ^bb1(%c80_i8_8 : i8)
  ^bb11:  // pred: ^bb10
    %23 = arith.subi %21, %c2_i64_7 : i64
    llvm.store %23, %arg1 : i64, !llvm.ptr
    cf.br ^bb9
  ^bb12:  // 2 preds: ^bb2, ^bb8
    %24 = call @op91(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %25 = arith.cmpi ne, %24, %c0_i8_0 : i8
    cf.cond_br %25, ^bb1(%24 : i8), ^bb15
  ^bb13:  // pred: ^bb14
    %c3_i256 = arith.constant 3 : i256
    %26 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c3_i256, %26 : i256, !llvm.ptr
    %27 = llvm.getelementptr %26[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %27, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_9 = arith.constant 0 : i8
    %28 = arith.cmpi ne, %c0_i8_9, %c0_i8_0 : i8
    cf.cond_br %28, ^bb1(%c0_i8_9 : i8), ^bb19
  ^bb14:  // pred: ^bb16
    %c1024_i64_10 = arith.constant 1024 : i64
    %29 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_11 = arith.constant 1 : i64
    %30 = arith.addi %29, %c1_i64_11 : i64
    llvm.store %30, %arg3 : i64, !llvm.ptr
    %31 = arith.cmpi ult, %c1024_i64_10, %30 : i64
    %c92_i8_12 = arith.constant 92 : i8
    cf.cond_br %31, ^bb1(%c92_i8_12 : i8), ^bb13
  ^bb15:  // pred: ^bb12
    %32 = llvm.load %arg1 : !llvm.ptr -> i64
    %c2_i64_13 = arith.constant 2 : i64
    call @dora_fn_nop() : () -> ()
    %33 = arith.cmpi uge, %32, %c2_i64_13 : i64
    %c80_i8_14 = arith.constant 80 : i8
    cf.cond_br %33, ^bb16, ^bb1(%c80_i8_14 : i8)
  ^bb16:  // pred: ^bb15
    %34 = arith.subi %32, %c2_i64_13 : i64
    llvm.store %34, %arg1 : i64, !llvm.ptr
    cf.br ^bb14
  ^bb17:  // pred: ^bb18
    %c1_i256_15 = arith.constant 1 : i256
    %35 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c1_i256_15, %35 : i256, !llvm.ptr
    %36 = llvm.getelementptr %35[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %36, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_16 = arith.constant 0 : i8
    %37 = arith.cmpi ne, %c0_i8_16, %c0_i8_0 : i8
    cf.cond_br %37, ^bb1(%c0_i8_16 : i8), ^bb23
  ^bb18:  // pred: ^bb20
    %c1024_i64_17 = arith.constant 1024 : i64
    %38 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_18 = arith.constant 1 : i64
    %39 = arith.addi %38, %c1_i64_18 : i64
    llvm.store %39, %arg3 : i64, !llvm.ptr
    %40 = arith.cmpi ult, %c1024_i64_17, %39 : i64
    %c92_i8_19 = arith.constant 92 : i8
    cf.cond_br %40, ^bb1(%c92_i8_19 : i8), ^bb17
  ^bb19:  // pred: ^bb13
    %41 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %42 = arith.cmpi uge, %41, %c3_i64 : i64
    %c80_i8_20 = arith.constant 80 : i8
    cf.cond_br %42, ^bb20, ^bb1(%c80_i8_20 : i8)
  ^bb20:  // pred: ^bb19
    %43 = arith.subi %41, %c3_i64 : i64
    llvm.store %43, %arg1 : i64, !llvm.ptr
    cf.br ^bb18
  ^bb21:  // pred: ^bb22
    %c6_i256 = arith.constant 6 : i256
    %44 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c6_i256, %44 : i256, !llvm.ptr
    %45 = llvm.getelementptr %44[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %45, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_21 = arith.constant 0 : i8
    %46 = arith.cmpi ne, %c0_i8_21, %c0_i8_0 : i8
    cf.cond_br %46, ^bb3(%c0_i8_21 : i8), ^bb25
  ^bb22:  // pred: ^bb24
    %c1024_i64_22 = arith.constant 1024 : i64
    %47 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_23 = arith.constant 1 : i64
    %48 = arith.addi %47, %c1_i64_23 : i64
    llvm.store %48, %arg3 : i64, !llvm.ptr
    %49 = arith.cmpi ult, %c1024_i64_22, %48 : i64
    %c92_i8_24 = arith.constant 92 : i8
    cf.cond_br %49, ^bb1(%c92_i8_24 : i8), ^bb21
  ^bb23:  // pred: ^bb17
    %50 = llvm.load %arg1 : !llvm.ptr -> i64
    %c2_i64_25 = arith.constant 2 : i64
    call @dora_fn_nop() : () -> ()
    %51 = arith.cmpi uge, %50, %c2_i64_25 : i64
    %c80_i8_26 = arith.constant 80 : i8
    cf.cond_br %51, ^bb24, ^bb1(%c80_i8_26 : i8)
  ^bb24:  // pred: ^bb23
    %52 = arith.subi %50, %c2_i64_25 : i64
    llvm.store %52, %arg1 : i64, !llvm.ptr
    cf.br ^bb22
  ^bb25:  // pred: ^bb21
    %c0_i64_27 = arith.constant 0 : i64
    %c2_i8 = arith.constant 2 : i8
    %53 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_27, %c0_i64_27, %53, %c2_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c2_i8 : i8
  }
}
