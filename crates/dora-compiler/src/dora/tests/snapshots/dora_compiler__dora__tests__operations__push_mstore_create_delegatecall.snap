---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  llvm.mlir.global internal @dora_stack_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_stack_length() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_memory_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_memory_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_calldata_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_calldata_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_gas_counter() {addr_space = 0 : i32} : i64
  llvm.mlir.global external @dora_ctx_is_static() {addr_space = 0 : i32} : !llvm.ptr
  func.func private @dora_debug_print(i32)
  func.func private @dora_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_get_calldata_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_get_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_get_chainid(!llvm.ptr) -> i64
  func.func private @dora_store_in_callvalue_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_caller_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_get_gaslimit(!llvm.ptr) -> i64
  func.func private @dora_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_copy_code_to_memory(!llvm.ptr, i64, i64, i64)
  func.func private @dora_read_storage(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_write_storage(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> i64
  func.func private @dora_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_get_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_get_coinbase_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_get_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_get_codesize_from_address(!llvm.ptr, !llvm.ptr) -> i64
  func.func private @dora_get_address_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_get_prevrandao(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_call(!llvm.ptr, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr, i8) -> i8
  func.func private @dora_store_in_balance(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_copy_ext_code_to_memory(!llvm.ptr, !llvm.ptr, i64, i64, i64)
  func.func private @dora_get_blob_hash_at_index(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_get_block_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_get_code_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_create(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr) -> i8
  func.func private @dora_create2(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
  func.func private @dora_get_return_data_size(!llvm.ptr) -> i64
  func.func private @dora_copy_return_data_into_memory(!llvm.ptr, i64, i64, i64)
  func.func private @dora_selfdestruct(!llvm.ptr, !llvm.ptr) -> i64
  func.func private @dora_transient_storage_read(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_transient_storage_write(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func public @main(%arg0: !llvm.ptr, %arg1: i64) -> i8 attributes {llvm.emit_c_interface} {
    %c1024_i256 = arith.constant 1024 : i256
    %0 = llvm.alloca %c1024_i256 x i256 : (i256) -> !llvm.ptr
    %1 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    llvm.store %0, %1 : !llvm.ptr, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %2 = llvm.mlir.addressof @dora_stack_length : !llvm.ptr
    llvm.store %c0_i64, %2 : i64, !llvm.ptr
    %c0_i64_0 = arith.constant 0 : i64
    %3 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    llvm.store %c0_i64_0, %3 : i64, !llvm.ptr
    %4 = call @dora_get_calldata_ptr(%arg0) : (!llvm.ptr) -> !llvm.ptr
    %5 = llvm.mlir.addressof @dora_calldata_ptr : !llvm.ptr
    llvm.store %4, %5 : !llvm.ptr, !llvm.ptr
    %6 = call @dora_get_calldata_size(%arg0) : (!llvm.ptr) -> i64
    %7 = llvm.mlir.addressof @dora_calldata_size : !llvm.ptr
    llvm.store %6, %7 : i64, !llvm.ptr
    %8 = llvm.mlir.addressof @dora_gas_counter : !llvm.ptr
    llvm.store %arg1, %8 : i64, !llvm.ptr
    %9 = llvm.mlir.addressof @dora_stack_length : !llvm.ptr
    %c1024_i64 = arith.constant 1024 : i64
    cf.br ^bb3
  ^bb1:  // 6 preds: ^bb2, ^bb5, ^bb10, ^bb11, ^bb20, ^bb31
    %c0_i64_1 = arith.constant 0 : i64
    %c3_i8 = arith.constant 3 : i8
    call @dora_write_result(%arg0, %c0_i64_1, %c0_i64_1, %c0_i64_1, %c3_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c3_i8 : i8
  ^bb2(%10: i256):  // no predecessors
    cf.switch %10 : i256, [
      default: ^bb1
    ]
  ^bb3:  // pred: ^bb0
    %c35176690763027899028215972788860354566387_i256 = arith.constant 35176690763027899028215972788860354566387 : i256
    %11 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    llvm.store %c35176690763027899028215972788860354566387_i256, %12 : i256, !llvm.ptr
    %13 = llvm.getelementptr %12[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %13, %11 : !llvm.ptr, !llvm.ptr
    cf.br ^bb4
  ^bb4:  // pred: ^bb3
    %c0_i256 = arith.constant 0 : i256
    %14 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %15 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256, %15 : i256, !llvm.ptr
    %16 = llvm.getelementptr %15[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %16, %14 : !llvm.ptr, !llvm.ptr
    cf.br ^bb5
  ^bb5:  // pred: ^bb4
    %17 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %18 = llvm.load %17 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.getelementptr %18[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %20 = llvm.load %19 : !llvm.ptr -> i256
    llvm.store %19, %17 : !llvm.ptr, !llvm.ptr
    %21 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %22 = llvm.load %21 : !llvm.ptr -> !llvm.ptr
    %23 = llvm.getelementptr %22[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %24 = llvm.load %23 : !llvm.ptr -> i256
    llvm.store %23, %21 : !llvm.ptr, !llvm.ptr
    %25 = arith.trunci %20 : i256 to i64
    %c32_i64 = arith.constant 32 : i64
    %26 = arith.addi %25, %c32_i64 : i64
    %c0_i64_2 = arith.constant 0 : i64
    %27 = arith.cmpi slt, %26, %c0_i64_2 : i64
    cf.cond_br %27, ^bb1, ^bb6
  ^bb6:  // pred: ^bb5
    %28 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    %29 = llvm.load %28 : !llvm.ptr -> i64
    %c31_i64 = arith.constant 31 : i64
    %c32_i64_3 = arith.constant 32 : i64
    %30 = arith.addi %26, %c31_i64 : i64
    %31 = arith.divui %30, %c32_i64_3 : i64
    %32 = arith.muli %31, %c32_i64_3 : i64
    %33 = arith.cmpi ult, %29, %32 : i64
    scf.if %33 {
      %243 = func.call @dora_extend_memory(%arg0, %32) : (!llvm.ptr, i64) -> !llvm.ptr
      llvm.store %32, %28 : i64, !llvm.ptr
      %244 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
      llvm.store %243, %244 : !llvm.ptr, !llvm.ptr
    } else {
    }
    %34 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
    %35 = llvm.load %34 : !llvm.ptr -> !llvm.ptr
    %36 = llvm.getelementptr %35[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %37 = llvm.intr.bswap(%24)  : (i256) -> i256
    llvm.store %37, %36 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb7
  ^bb7:  // pred: ^bb6
    %c17_i256 = arith.constant 17 : i256
    %38 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %39 = llvm.load %38 : !llvm.ptr -> !llvm.ptr
    llvm.store %c17_i256, %39 : i256, !llvm.ptr
    %40 = llvm.getelementptr %39[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %40, %38 : !llvm.ptr, !llvm.ptr
    cf.br ^bb8
  ^bb8:  // pred: ^bb7
    %c15_i256 = arith.constant 15 : i256
    %41 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %42 = llvm.load %41 : !llvm.ptr -> !llvm.ptr
    llvm.store %c15_i256, %42 : i256, !llvm.ptr
    %43 = llvm.getelementptr %42[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %43, %41 : !llvm.ptr, !llvm.ptr
    cf.br ^bb9
  ^bb9:  // pred: ^bb8
    %c0_i256_4 = arith.constant 0 : i256
    %44 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %45 = llvm.load %44 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_4, %45 : i256, !llvm.ptr
    %46 = llvm.getelementptr %45[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %46, %44 : !llvm.ptr, !llvm.ptr
    cf.br ^bb10
  ^bb10:  // pred: ^bb9
    %47 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %48 = llvm.load %47 : !llvm.ptr -> !llvm.ptr
    %49 = llvm.getelementptr %48[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %50 = llvm.load %49 : !llvm.ptr -> i256
    llvm.store %49, %47 : !llvm.ptr, !llvm.ptr
    %51 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %52 = llvm.load %51 : !llvm.ptr -> !llvm.ptr
    %53 = llvm.getelementptr %52[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %54 = llvm.load %53 : !llvm.ptr -> i256
    llvm.store %53, %51 : !llvm.ptr, !llvm.ptr
    %55 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %56 = llvm.load %55 : !llvm.ptr -> !llvm.ptr
    %57 = llvm.getelementptr %56[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %58 = llvm.load %57 : !llvm.ptr -> i256
    llvm.store %57, %55 : !llvm.ptr, !llvm.ptr
    %59 = arith.trunci %54 : i256 to i64
    %60 = arith.trunci %58 : i256 to i64
    %61 = arith.addi %59, %60 : i64
    %c0_i64_5 = arith.constant 0 : i64
    %62 = arith.cmpi slt, %61, %c0_i64_5 : i64
    cf.cond_br %62, ^bb1, ^bb11
  ^bb11:  // pred: ^bb10
    %63 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    %64 = llvm.load %63 : !llvm.ptr -> i64
    %c31_i64_6 = arith.constant 31 : i64
    %c32_i64_7 = arith.constant 32 : i64
    %65 = arith.addi %61, %c31_i64_6 : i64
    %66 = arith.divui %65, %c32_i64_7 : i64
    %67 = arith.muli %66, %c32_i64_7 : i64
    %68 = arith.cmpi ult, %64, %67 : i64
    scf.if %68 {
      %243 = func.call @dora_extend_memory(%arg0, %67) : (!llvm.ptr, i64) -> !llvm.ptr
      llvm.store %67, %63 : i64, !llvm.ptr
      %244 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
      llvm.store %243, %244 : !llvm.ptr, !llvm.ptr
    } else {
    }
    %c1_i256 = arith.constant 1 : i256
    %69 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %50, %69 {alignment = 1 : i64} : i256, !llvm.ptr
    %70 = llvm.mlir.addressof @dora_gas_counter : !llvm.ptr
    %71 = llvm.load %70 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %72 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %71, %72 {alignment = 1 : i64} : i64, !llvm.ptr
    %73 = call @dora_create(%arg0, %60, %59, %69, %72) : (!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr) -> i8
    %c0_i8 = arith.constant 0 : i8
    %74 = arith.cmpi ne, %c0_i8, %73 : i8
    %75 = llvm.load %69 : !llvm.ptr -> i256
    cf.cond_br %74, ^bb1, ^bb12
  ^bb12:  // pred: ^bb11
    %76 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %77 = llvm.load %76 : !llvm.ptr -> !llvm.ptr
    llvm.store %75, %77 : i256, !llvm.ptr
    %78 = llvm.getelementptr %77[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %78, %76 : !llvm.ptr, !llvm.ptr
    cf.br ^bb13
  ^bb13:  // pred: ^bb12
    %c0_i256_8 = arith.constant 0 : i256
    %79 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %80 = llvm.load %79 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_8, %80 : i256, !llvm.ptr
    %81 = llvm.getelementptr %80[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %81, %79 : !llvm.ptr, !llvm.ptr
    cf.br ^bb14
  ^bb14:  // pred: ^bb13
    %c0_i256_9 = arith.constant 0 : i256
    %82 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %83 = llvm.load %82 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_9, %83 : i256, !llvm.ptr
    %84 = llvm.getelementptr %83[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %84, %82 : !llvm.ptr, !llvm.ptr
    cf.br ^bb15
  ^bb15:  // pred: ^bb14
    %c0_i256_10 = arith.constant 0 : i256
    %85 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %86 = llvm.load %85 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_10, %86 : i256, !llvm.ptr
    %87 = llvm.getelementptr %86[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %87, %85 : !llvm.ptr, !llvm.ptr
    cf.br ^bb16
  ^bb16:  // pred: ^bb15
    %c0_i256_11 = arith.constant 0 : i256
    %88 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %89 = llvm.load %88 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_11, %89 : i256, !llvm.ptr
    %90 = llvm.getelementptr %89[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %90, %88 : !llvm.ptr, !llvm.ptr
    cf.br ^bb17
  ^bb17:  // pred: ^bb16
    %c0_i256_12 = arith.constant 0 : i256
    %91 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %92 = llvm.load %91 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_12, %92 : i256, !llvm.ptr
    %93 = llvm.getelementptr %92[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %93, %91 : !llvm.ptr, !llvm.ptr
    cf.br ^bb18
  ^bb18:  // pred: ^bb17
    %94 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %95 = llvm.load %94 : !llvm.ptr -> !llvm.ptr
    %96 = llvm.getelementptr %95[-5] : (!llvm.ptr) -> !llvm.ptr, i256
    %97 = llvm.load %96 : !llvm.ptr -> i256
    %98 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %99 = llvm.load %98 : !llvm.ptr -> !llvm.ptr
    llvm.store %97, %99 : i256, !llvm.ptr
    %100 = llvm.getelementptr %99[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %100, %98 : !llvm.ptr, !llvm.ptr
    cf.br ^bb19
  ^bb19:  // pred: ^bb18
    %c65535_i256 = arith.constant 65535 : i256
    %101 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %102 = llvm.load %101 : !llvm.ptr -> !llvm.ptr
    llvm.store %c65535_i256, %102 : i256, !llvm.ptr
    %103 = llvm.getelementptr %102[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %103, %101 : !llvm.ptr, !llvm.ptr
    cf.br ^bb20
  ^bb20:  // pred: ^bb19
    %104 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %105 = llvm.load %104 : !llvm.ptr -> !llvm.ptr
    %106 = llvm.getelementptr %105[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %107 = llvm.load %106 : !llvm.ptr -> i256
    llvm.store %106, %104 : !llvm.ptr, !llvm.ptr
    %108 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %109 = llvm.load %108 : !llvm.ptr -> !llvm.ptr
    %110 = llvm.getelementptr %109[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %111 = llvm.load %110 : !llvm.ptr -> i256
    llvm.store %110, %108 : !llvm.ptr, !llvm.ptr
    %112 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %113 = llvm.load %112 : !llvm.ptr -> !llvm.ptr
    %114 = llvm.getelementptr %113[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %115 = llvm.load %114 : !llvm.ptr -> i256
    llvm.store %114, %112 : !llvm.ptr, !llvm.ptr
    %116 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %117 = llvm.load %116 : !llvm.ptr -> !llvm.ptr
    %118 = llvm.getelementptr %117[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %119 = llvm.load %118 : !llvm.ptr -> i256
    llvm.store %118, %116 : !llvm.ptr, !llvm.ptr
    %120 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %121 = llvm.load %120 : !llvm.ptr -> !llvm.ptr
    %122 = llvm.getelementptr %121[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %123 = llvm.load %122 : !llvm.ptr -> i256
    llvm.store %122, %120 : !llvm.ptr, !llvm.ptr
    %124 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %125 = llvm.load %124 : !llvm.ptr -> !llvm.ptr
    %126 = llvm.getelementptr %125[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %127 = llvm.load %126 : !llvm.ptr -> i256
    llvm.store %126, %124 : !llvm.ptr, !llvm.ptr
    %c0_i256_13 = arith.constant 0 : i256
    %128 = arith.trunci %107 : i256 to i64
    %129 = arith.trunci %115 : i256 to i64
    %130 = arith.trunci %119 : i256 to i64
    %131 = arith.trunci %123 : i256 to i64
    %132 = arith.trunci %127 : i256 to i64
    %133 = arith.addi %129, %130 : i64
    %134 = arith.addi %131, %132 : i64
    %135 = arith.maxui %133, %134 : i64
    %c0_i64_14 = arith.constant 0 : i64
    %136 = arith.cmpi slt, %135, %c0_i64_14 : i64
    cf.cond_br %136, ^bb1, ^bb21
  ^bb21:  // pred: ^bb20
    %137 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    %138 = llvm.load %137 : !llvm.ptr -> i64
    %c31_i64_15 = arith.constant 31 : i64
    %c32_i64_16 = arith.constant 32 : i64
    %139 = arith.addi %135, %c31_i64_15 : i64
    %140 = arith.divui %139, %c32_i64_16 : i64
    %141 = arith.muli %140, %c32_i64_16 : i64
    %142 = arith.cmpi ult, %138, %141 : i64
    scf.if %142 {
      %243 = func.call @dora_extend_memory(%arg0, %141) : (!llvm.ptr, i64) -> !llvm.ptr
      llvm.store %141, %137 : i64, !llvm.ptr
      %244 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
      llvm.store %243, %244 : !llvm.ptr, !llvm.ptr
    } else {
    }
    %143 = llvm.mlir.addressof @dora_gas_counter : !llvm.ptr
    %144 = llvm.load %143 : !llvm.ptr -> i64
    %c1_i256_17 = arith.constant 1 : i256
    %145 = llvm.alloca %c1_i256_17 x i256 : (i256) -> !llvm.ptr
    llvm.store %c0_i256_13, %145 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i256_18 = arith.constant 1 : i256
    %146 = llvm.alloca %c1_i256_18 x i256 : (i256) -> !llvm.ptr
    llvm.store %111, %146 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i64_19 = arith.constant 1 : i64
    %147 = llvm.alloca %c1_i64_19 x i64 : (i64) -> !llvm.ptr
    %c0_i8_20 = arith.constant 0 : i8
    %148 = call @dora_call(%arg0, %128, %146, %145, %129, %130, %131, %132, %144, %147, %c0_i8_20) : (!llvm.ptr, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr, i8) -> i8
    %149 = llvm.load %147 : !llvm.ptr -> i64
    %150 = arith.extui %148 : i8 to i256
    %151 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %152 = llvm.load %151 : !llvm.ptr -> !llvm.ptr
    llvm.store %150, %152 : i256, !llvm.ptr
    %153 = llvm.getelementptr %152[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %153, %151 : !llvm.ptr, !llvm.ptr
    cf.br ^bb22
  ^bb22:  // pred: ^bb21
    %c1_i256_21 = arith.constant 1 : i256
    %154 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %155 = llvm.load %154 : !llvm.ptr -> !llvm.ptr
    llvm.store %c1_i256_21, %155 : i256, !llvm.ptr
    %156 = llvm.getelementptr %155[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %156, %154 : !llvm.ptr, !llvm.ptr
    cf.br ^bb23
  ^bb23:  // pred: ^bb22
    %c0_i256_22 = arith.constant 0 : i256
    %157 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %158 = llvm.load %157 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_22, %158 : i256, !llvm.ptr
    %159 = llvm.getelementptr %158[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %159, %157 : !llvm.ptr, !llvm.ptr
    cf.br ^bb24
  ^bb24:  // pred: ^bb23
    %160 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %161 = llvm.load %160 : !llvm.ptr -> !llvm.ptr
    %162 = llvm.getelementptr %161[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %163 = llvm.load %162 : !llvm.ptr -> i256
    llvm.store %162, %160 : !llvm.ptr, !llvm.ptr
    %164 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %165 = llvm.load %164 : !llvm.ptr -> !llvm.ptr
    %166 = llvm.getelementptr %165[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %167 = llvm.load %166 : !llvm.ptr -> i256
    llvm.store %166, %164 : !llvm.ptr, !llvm.ptr
    %c1_i256_23 = arith.constant 1 : i256
    %168 = llvm.alloca %c1_i256_23 x i256 : (i256) -> !llvm.ptr
    llvm.store %163, %168 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i256_24 = arith.constant 1 : i256
    %169 = llvm.alloca %c1_i256_24 x i256 : (i256) -> !llvm.ptr
    llvm.store %167, %169 {alignment = 1 : i64} : i256, !llvm.ptr
    %170 = call @dora_write_storage(%arg0, %168, %169) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> i64
    cf.br ^bb25
  ^bb25:  // pred: ^bb24
    %c0_i256_25 = arith.constant 0 : i256
    %171 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %172 = llvm.load %171 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_25, %172 : i256, !llvm.ptr
    %173 = llvm.getelementptr %172[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %173, %171 : !llvm.ptr, !llvm.ptr
    cf.br ^bb26
  ^bb26:  // pred: ^bb25
    %c0_i256_26 = arith.constant 0 : i256
    %174 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %175 = llvm.load %174 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_26, %175 : i256, !llvm.ptr
    %176 = llvm.getelementptr %175[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %176, %174 : !llvm.ptr, !llvm.ptr
    cf.br ^bb27
  ^bb27:  // pred: ^bb26
    %c32_i256 = arith.constant 32 : i256
    %177 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %178 = llvm.load %177 : !llvm.ptr -> !llvm.ptr
    llvm.store %c32_i256, %178 : i256, !llvm.ptr
    %179 = llvm.getelementptr %178[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %179, %177 : !llvm.ptr, !llvm.ptr
    cf.br ^bb28
  ^bb28:  // pred: ^bb27
    %c0_i256_27 = arith.constant 0 : i256
    %180 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %181 = llvm.load %180 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_27, %181 : i256, !llvm.ptr
    %182 = llvm.getelementptr %181[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %182, %180 : !llvm.ptr, !llvm.ptr
    cf.br ^bb29
  ^bb29:  // pred: ^bb28
    %183 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %184 = llvm.load %183 : !llvm.ptr -> !llvm.ptr
    %185 = llvm.getelementptr %184[-6] : (!llvm.ptr) -> !llvm.ptr, i256
    %186 = llvm.load %185 : !llvm.ptr -> i256
    %187 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %188 = llvm.load %187 : !llvm.ptr -> !llvm.ptr
    llvm.store %186, %188 : i256, !llvm.ptr
    %189 = llvm.getelementptr %188[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %189, %187 : !llvm.ptr, !llvm.ptr
    cf.br ^bb30
  ^bb30:  // pred: ^bb29
    %c65535_i256_28 = arith.constant 65535 : i256
    %190 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %191 = llvm.load %190 : !llvm.ptr -> !llvm.ptr
    llvm.store %c65535_i256_28, %191 : i256, !llvm.ptr
    %192 = llvm.getelementptr %191[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %192, %190 : !llvm.ptr, !llvm.ptr
    cf.br ^bb31
  ^bb31:  // pred: ^bb30
    %193 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %194 = llvm.load %193 : !llvm.ptr -> !llvm.ptr
    %195 = llvm.getelementptr %194[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %196 = llvm.load %195 : !llvm.ptr -> i256
    llvm.store %195, %193 : !llvm.ptr, !llvm.ptr
    %197 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %198 = llvm.load %197 : !llvm.ptr -> !llvm.ptr
    %199 = llvm.getelementptr %198[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %200 = llvm.load %199 : !llvm.ptr -> i256
    llvm.store %199, %197 : !llvm.ptr, !llvm.ptr
    %201 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %202 = llvm.load %201 : !llvm.ptr -> !llvm.ptr
    %203 = llvm.getelementptr %202[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %204 = llvm.load %203 : !llvm.ptr -> i256
    llvm.store %203, %201 : !llvm.ptr, !llvm.ptr
    %205 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %206 = llvm.load %205 : !llvm.ptr -> !llvm.ptr
    %207 = llvm.getelementptr %206[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %208 = llvm.load %207 : !llvm.ptr -> i256
    llvm.store %207, %205 : !llvm.ptr, !llvm.ptr
    %209 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %210 = llvm.load %209 : !llvm.ptr -> !llvm.ptr
    %211 = llvm.getelementptr %210[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %212 = llvm.load %211 : !llvm.ptr -> i256
    llvm.store %211, %209 : !llvm.ptr, !llvm.ptr
    %213 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %214 = llvm.load %213 : !llvm.ptr -> !llvm.ptr
    %215 = llvm.getelementptr %214[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %216 = llvm.load %215 : !llvm.ptr -> i256
    llvm.store %215, %213 : !llvm.ptr, !llvm.ptr
    %c0_i256_29 = arith.constant 0 : i256
    %217 = arith.trunci %196 : i256 to i64
    %218 = arith.trunci %204 : i256 to i64
    %219 = arith.trunci %208 : i256 to i64
    %220 = arith.trunci %212 : i256 to i64
    %221 = arith.trunci %216 : i256 to i64
    %222 = arith.addi %218, %219 : i64
    %223 = arith.addi %220, %221 : i64
    %224 = arith.maxui %222, %223 : i64
    %c0_i64_30 = arith.constant 0 : i64
    %225 = arith.cmpi slt, %224, %c0_i64_30 : i64
    cf.cond_br %225, ^bb1, ^bb32
  ^bb32:  // pred: ^bb31
    %226 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    %227 = llvm.load %226 : !llvm.ptr -> i64
    %c31_i64_31 = arith.constant 31 : i64
    %c32_i64_32 = arith.constant 32 : i64
    %228 = arith.addi %224, %c31_i64_31 : i64
    %229 = arith.divui %228, %c32_i64_32 : i64
    %230 = arith.muli %229, %c32_i64_32 : i64
    %231 = arith.cmpi ult, %227, %230 : i64
    scf.if %231 {
      %243 = func.call @dora_extend_memory(%arg0, %230) : (!llvm.ptr, i64) -> !llvm.ptr
      llvm.store %230, %226 : i64, !llvm.ptr
      %244 = llvm.mlir.addressof @dora_memory_ptr : !llvm.ptr
      llvm.store %243, %244 : !llvm.ptr, !llvm.ptr
    } else {
    }
    %232 = llvm.mlir.addressof @dora_gas_counter : !llvm.ptr
    %233 = llvm.load %232 : !llvm.ptr -> i64
    %c1_i256_33 = arith.constant 1 : i256
    %234 = llvm.alloca %c1_i256_33 x i256 : (i256) -> !llvm.ptr
    llvm.store %c0_i256_29, %234 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i256_34 = arith.constant 1 : i256
    %235 = llvm.alloca %c1_i256_34 x i256 : (i256) -> !llvm.ptr
    llvm.store %200, %235 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i64_35 = arith.constant 1 : i64
    %236 = llvm.alloca %c1_i64_35 x i64 : (i64) -> !llvm.ptr
    %c0_i8_36 = arith.constant 0 : i8
    %237 = call @dora_call(%arg0, %217, %235, %234, %218, %219, %220, %221, %233, %236, %c0_i8_36) : (!llvm.ptr, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr, i8) -> i8
    %238 = llvm.load %236 : !llvm.ptr -> i64
    %239 = arith.extui %237 : i8 to i256
    %240 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %241 = llvm.load %240 : !llvm.ptr -> !llvm.ptr
    llvm.store %239, %241 : i256, !llvm.ptr
    %242 = llvm.getelementptr %241[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %242, %240 : !llvm.ptr, !llvm.ptr
    cf.br ^bb33
  ^bb33:  // pred: ^bb32
    %c0_i64_37 = arith.constant 0 : i64
    %c1_i8 = arith.constant 1 : i8
    call @dora_write_result(%arg0, %c0_i64_37, %c0_i64_37, %arg1, %c1_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c1_i8 : i8
  }
}
