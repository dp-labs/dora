---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
---
module {
  func.func private @dora_fn_nop()
  func.func private @dora_fn_tracing(!llvm.ptr, i64, i8, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_fn_is_static(!llvm.ptr) -> i8
  func.func private @dora_fn_exp(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_calldata_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_data_load(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_data_section(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_data_section_size(!llvm.ptr) -> i64
  func.func private @dora_fn_data_section_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_chainid(!llvm.ptr) -> i64
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gaslimit_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_memory_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_memory_size(!llvm.ptr) -> i64
  func.func private @dora_fn_code_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_eofcreate(!llvm.ptr, i8, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returncontract(!llvm.ptr, i8, i64, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_call(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_extcall_addr_validate(!llvm.ptr, !llvm.ptr) -> i8
  func.func private @dora_fn_extcall(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_returndata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_returndata_copy(!llvm.ptr, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_tload(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_tstore(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_func_stack_push(!llvm.ptr, i64, i64) -> i8
  func.func private @dora_fn_func_stack_pop(!llvm.ptr) -> i64
  func.func private @dora_fn_func_stack_grow(!llvm.ptr)
  func.func private @dora_fn_set_resume(!llvm.ptr, i32)
  func.func private @dora_fn_get_resume(!llvm.ptr) -> i32
  func.func private @op245(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr, %arg4: !llvm.ptr) -> i8 {
    cf.br ^bb3
  ^bb1(%0: i8):  // 15 preds: ^bb3, ^bb4, ^bb6, ^bb7, ^bb8, ^bb10, ^bb11, ^bb12, ^bb15, ^bb16, ^bb17, ^bb18, ^bb19, ^bb22, ^bb23
    %c0_i64 = arith.constant 0 : i64
    %1 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64, %c0_i64, %1, %0) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %0 : i8
  ^bb2(%2: i8):  // no predecessors
    return %2 : i8
  ^bb3:  // pred: ^bb0
    %3 = llvm.load %arg1 : !llvm.ptr -> i64
    %c0_i64_0 = arith.constant 0 : i64
    call @dora_fn_nop() : () -> ()
    %4 = arith.cmpi uge, %3, %c0_i64_0 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %4, ^bb5, ^bb1(%c80_i8 : i8)
  ^bb4:  // pred: ^bb5
    %c1024_i64 = arith.constant 1024 : i64
    %5 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-3_i64 = arith.constant -3 : i64
    %6 = arith.addi %5, %c-3_i64 : i64
    llvm.store %6, %arg3 : i64, !llvm.ptr
    %c4_i64 = arith.constant 4 : i64
    %7 = arith.cmpi ult, %5, %c4_i64 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %7, ^bb1(%c91_i8 : i8), ^bb6
  ^bb5:  // pred: ^bb3
    %8 = arith.subi %3, %c0_i64_0 : i64
    llvm.store %8, %arg1 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb6:  // pred: ^bb4
    %9 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.getelementptr %9[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %11 = llvm.load %10 : !llvm.ptr -> i256
    llvm.store %10, %arg4 : !llvm.ptr, !llvm.ptr
    %12 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.getelementptr %12[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %14 = llvm.load %13 : !llvm.ptr -> i256
    llvm.store %13, %arg4 : !llvm.ptr, !llvm.ptr
    %15 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %16 = llvm.getelementptr %15[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %17 = llvm.load %16 : !llvm.ptr -> i256
    llvm.store %16, %arg4 : !llvm.ptr, !llvm.ptr
    %18 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.getelementptr %18[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %20 = llvm.load %19 : !llvm.ptr -> i256
    llvm.store %19, %arg4 : !llvm.ptr, !llvm.ptr
    %21 = call @dora_fn_is_static(%arg0) : (!llvm.ptr) -> i8
    %c0_i8 = arith.constant 0 : i8
    %22 = arith.cmpi ne, %21, %c0_i8 : i8
    %c87_i8 = arith.constant 87 : i8
    cf.cond_br %22, ^bb1(%c87_i8 : i8), ^bb7
  ^bb7:  // pred: ^bb6
    %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256
    %23 = arith.cmpi ugt, %17, %c18446744073709551615_i256 : i256
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %23, ^bb1(%c84_i8 : i8), ^bb8
  ^bb8:  // pred: ^bb7
    %24 = arith.trunci %17 : i256 to i64
    %c0_i64_1 = arith.constant 0 : i64
    %25 = arith.cmpi slt, %24, %c0_i64_1 : i64
    %c84_i8_2 = arith.constant 84 : i8
    cf.cond_br %25, ^bb1(%c84_i8_2 : i8), ^bb9
  ^bb9:  // pred: ^bb8
    %c0_i64_3 = arith.constant 0 : i64
    %26 = arith.cmpi ne, %24, %c0_i64_3 : i64
    cf.cond_br %26, ^bb15, ^bb10
  ^bb10:  // 2 preds: ^bb9, ^bb21
    %c32000_i64 = arith.constant 32000 : i64
    %c31_i64 = arith.constant 31 : i64
    %c32_i64 = arith.constant 32 : i64
    %27 = arith.addi %24, %c31_i64 : i64
    %28 = arith.divui %27, %c32_i64 : i64
    %c6_i64 = arith.constant 6 : i64
    %29 = arith.muli %28, %c6_i64 : i64
    %30 = arith.addi %c32000_i64, %29 : i64
    %31 = llvm.load %arg1 : !llvm.ptr -> i64
    %32 = arith.cmpi ult, %31, %30 : i64
    scf.if %32 {
    } else {
      %82 = arith.subi %31, %30 : i64
      llvm.store %82, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_4 = arith.constant 80 : i8
    cf.cond_br %32, ^bb1(%c80_i8_4 : i8), ^bb11
  ^bb11:  // pred: ^bb10
    %c1_i256 = arith.constant 1 : i256
    %33 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %11, %33 {alignment = 1 : i64} : i256, !llvm.ptr
    %34 = llvm.load %arg1 : !llvm.ptr -> i64
    %35 = arith.trunci %14 : i256 to i64
    %c1_i256_5 = arith.constant 1 : i256
    %36 = llvm.alloca %c1_i256_5 x i256 : (i256) -> !llvm.ptr
    llvm.store %20, %36 {alignment = 1 : i64} : i256, !llvm.ptr
    %37 = call @dora_fn_create2(%arg0, %24, %35, %33, %34, %36) : (!llvm.ptr, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
    %38 = llvm.getelementptr %37[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %39 = llvm.load %38 : !llvm.ptr -> i8
    %c0_i8_6 = arith.constant 0 : i8
    %40 = arith.cmpi ne, %39, %c0_i8_6 : i8
    cf.cond_br %40, ^bb1(%39 : i8), ^bb12
  ^bb12:  // pred: ^bb11
    %41 = llvm.getelementptr %37[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %42 = llvm.load %41 : !llvm.ptr -> i64
    %43 = llvm.load %arg1 : !llvm.ptr -> i64
    %44 = arith.cmpi ult, %43, %42 : i64
    scf.if %44 {
    } else {
      %82 = arith.subi %43, %42 : i64
      llvm.store %82, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_7 = arith.constant 80 : i8
    cf.cond_br %44, ^bb1(%c80_i8_7 : i8), ^bb13
  ^bb13:  // pred: ^bb12
    %45 = llvm.load %33 : !llvm.ptr -> i256
    %46 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    llvm.store %45, %46 : i256, !llvm.ptr
    %47 = llvm.getelementptr %46[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %47, %arg4 : !llvm.ptr, !llvm.ptr
    cf.br ^bb14
  ^bb14:  // pred: ^bb13
    %c0_i8_8 = arith.constant 0 : i8
    return %c0_i8_8 : i8
  ^bb15:  // pred: ^bb9
    %c49152_i64 = arith.constant 49152 : i64
    %48 = arith.cmpi ugt, %24, %c49152_i64 : i64
    %c100_i8 = arith.constant 100 : i8
    cf.cond_br %48, ^bb1(%c100_i8 : i8), ^bb16
  ^bb16:  // pred: ^bb15
    %c31_i64_9 = arith.constant 31 : i64
    %c32_i64_10 = arith.constant 32 : i64
    %49 = arith.addi %24, %c31_i64_9 : i64
    %50 = arith.divui %49, %c32_i64_10 : i64
    %c2_i64 = arith.constant 2 : i64
    %51 = arith.muli %50, %c2_i64 : i64
    %52 = llvm.load %arg1 : !llvm.ptr -> i64
    %53 = arith.cmpi ult, %52, %51 : i64
    scf.if %53 {
    } else {
      %82 = arith.subi %52, %51 : i64
      llvm.store %82, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_11 = arith.constant 80 : i8
    cf.cond_br %53, ^bb1(%c80_i8_11 : i8), ^bb17
  ^bb17:  // pred: ^bb16
    %c18446744073709551615_i256_12 = arith.constant 18446744073709551615 : i256
    %54 = arith.cmpi ugt, %14, %c18446744073709551615_i256_12 : i256
    %c84_i8_13 = arith.constant 84 : i8
    cf.cond_br %54, ^bb1(%c84_i8_13 : i8), ^bb18
  ^bb18:  // pred: ^bb17
    %55 = arith.trunci %14 : i256 to i64
    %c0_i64_14 = arith.constant 0 : i64
    %56 = arith.cmpi slt, %55, %c0_i64_14 : i64
    %c84_i8_15 = arith.constant 84 : i8
    cf.cond_br %56, ^bb1(%c84_i8_15 : i8), ^bb19
  ^bb19:  // pred: ^bb18
    %57 = arith.addi %55, %24 : i64
    %c0_i64_16 = arith.constant 0 : i64
    %58 = arith.cmpi slt, %57, %c0_i64_16 : i64
    %c84_i8_17 = arith.constant 84 : i8
    cf.cond_br %58, ^bb1(%c84_i8_17 : i8), ^bb20
  ^bb20:  // pred: ^bb19
    %c31_i64_18 = arith.constant 31 : i64
    %c32_i64_19 = arith.constant 32 : i64
    %59 = arith.addi %57, %c31_i64_18 : i64
    %60 = arith.divui %59, %c32_i64_19 : i64
    %c32_i64_20 = arith.constant 32 : i64
    %61 = arith.muli %60, %c32_i64_20 : i64
    %62 = call @dora_fn_memory_size(%arg0) : (!llvm.ptr) -> i64
    %c31_i64_21 = arith.constant 31 : i64
    %c32_i64_22 = arith.constant 32 : i64
    %63 = arith.addi %62, %c31_i64_21 : i64
    %64 = arith.divui %63, %c32_i64_22 : i64
    %65 = arith.muli %64, %c32_i64_20 : i64
    %66 = arith.cmpi ult, %65, %61 : i64
    cf.cond_br %66, ^bb22, ^bb21
  ^bb21:  // 2 preds: ^bb20, ^bb24
    cf.br ^bb10
  ^bb22:  // pred: ^bb20
    %c3_i64 = arith.constant 3 : i64
    %c512_i64 = arith.constant 512 : i64
    %67 = arith.muli %64, %64 : i64
    %68 = arith.divui %67, %c512_i64 : i64
    %69 = arith.muli %64, %c3_i64 : i64
    %70 = arith.addi %68, %69 : i64
    %c3_i64_23 = arith.constant 3 : i64
    %c512_i64_24 = arith.constant 512 : i64
    %71 = arith.muli %60, %60 : i64
    %72 = arith.divui %71, %c512_i64_24 : i64
    %73 = arith.muli %60, %c3_i64_23 : i64
    %74 = arith.addi %72, %73 : i64
    %75 = arith.subi %74, %70 : i64
    %76 = llvm.load %arg1 : !llvm.ptr -> i64
    %77 = arith.cmpi ult, %76, %75 : i64
    scf.if %77 {
    } else {
      %82 = arith.subi %76, %75 : i64
      llvm.store %82, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_25 = arith.constant 80 : i8
    cf.cond_br %77, ^bb1(%c80_i8_25 : i8), ^bb23
  ^bb23:  // pred: ^bb22
    %78 = call @dora_fn_extend_memory(%arg0, %61) : (!llvm.ptr, i64) -> !llvm.ptr
    %79 = llvm.getelementptr %78[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %80 = llvm.load %79 : !llvm.ptr -> i8
    %c0_i8_26 = arith.constant 0 : i8
    %81 = arith.cmpi ne, %80, %c0_i8_26 : i8
    cf.cond_br %81, ^bb1(%80 : i8), ^bb24
  ^bb24:  // pred: ^bb23
    cf.br ^bb21
  }
  func.func private @op95(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr, %arg4: !llvm.ptr) -> i8 {
    cf.br ^bb3
  ^bb1(%0: i8):  // 2 preds: ^bb3, ^bb4
    %c0_i64 = arith.constant 0 : i64
    %1 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64, %c0_i64, %1, %0) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %0 : i8
  ^bb2(%2: i8):  // no predecessors
    return %2 : i8
  ^bb3:  // pred: ^bb0
    %3 = llvm.load %arg1 : !llvm.ptr -> i64
    %c2_i64 = arith.constant 2 : i64
    call @dora_fn_nop() : () -> ()
    %4 = arith.cmpi uge, %3, %c2_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %4, ^bb5, ^bb1(%c80_i8 : i8)
  ^bb4:  // pred: ^bb5
    %c1024_i64 = arith.constant 1024 : i64
    %5 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %6 = arith.addi %5, %c1_i64 : i64
    llvm.store %6, %arg3 : i64, !llvm.ptr
    %7 = arith.cmpi ult, %c1024_i64, %6 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %7, ^bb1(%c92_i8 : i8), ^bb6
  ^bb5:  // pred: ^bb3
    %8 = arith.subi %3, %c2_i64 : i64
    llvm.store %8, %arg1 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb6:  // pred: ^bb4
    %c0_i256 = arith.constant 0 : i256
    %9 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256, %9 : i256, !llvm.ptr
    %10 = llvm.getelementptr %9[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %10, %arg4 : !llvm.ptr, !llvm.ptr
    cf.br ^bb7
  ^bb7:  // pred: ^bb6
    %c0_i8 = arith.constant 0 : i8
    return %c0_i8 : i8
  }
  func.func public @call(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr) -> i8 attributes {llvm.emit_c_interface} {
    %c0_i64 = arith.constant 0 : i64
    %0 = llvm.alloca %c0_i64 x !llvm.ptr : (i64) -> !llvm.ptr
    llvm.store %arg2, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb11
  ^bb1(%1: i8):  // 9 preds: ^bb6, ^bb7, ^bb8, ^bb9, ^bb11, ^bb12, ^bb15, ^bb17, ^bb18
    %c0_i64_0 = arith.constant 0 : i64
    %2 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_0, %c0_i64_0, %2, %1) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %1 : i8
  ^bb2(%3: i256):  // no predecessors
    llvm.unreachable
  ^bb3(%4: i8):  // 3 preds: ^bb10, ^bb14, ^bb20
    return %4 : i8
  ^bb4(%5: i32):  // no predecessors
    llvm.unreachable
  ^bb5:  // no predecessors
    llvm.unreachable
  ^bb6:  // pred: ^bb11
    %6 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %7 = arith.cmpi uge, %6, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %7, ^bb13, ^bb1(%c80_i8 : i8)
  ^bb7:  // pred: ^bb14
    %8 = call @op95(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %9 = arith.cmpi ne, %8, %c0_i8_5 : i8
    cf.cond_br %9, ^bb1(%8 : i8), ^bb8
  ^bb8:  // pred: ^bb7
    %10 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_1 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %11 = arith.cmpi uge, %10, %c3_i64_1 : i64
    %c80_i8_2 = arith.constant 80 : i8
    cf.cond_br %11, ^bb16, ^bb1(%c80_i8_2 : i8)
  ^bb9:  // pred: ^bb17
    %12 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_3 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %13 = arith.cmpi uge, %12, %c3_i64_3 : i64
    %c80_i8_4 = arith.constant 80 : i8
    cf.cond_br %13, ^bb19, ^bb1(%c80_i8_4 : i8)
  ^bb10:  // pred: ^bb20
    %14 = call @op245(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %15 = arith.cmpi ne, %14, %c0_i8_5 : i8
    cf.cond_br %15, ^bb3(%14 : i8), ^bb21
  ^bb11:  // pred: ^bb0
    %c0_i8 = arith.constant 0 : i8
    %c0_i8_5 = arith.constant 0 : i8
    %16 = arith.cmpi ne, %c0_i8, %c0_i8_5 : i8
    cf.cond_br %16, ^bb1(%c0_i8 : i8), ^bb6
  ^bb12:  // pred: ^bb13
    %c1024_i64 = arith.constant 1024 : i64
    %17 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %18 = arith.addi %17, %c1_i64 : i64
    llvm.store %18, %arg3 : i64, !llvm.ptr
    %19 = arith.cmpi ult, %c1024_i64, %18 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %19, ^bb1(%c92_i8 : i8), ^bb14
  ^bb13:  // pred: ^bb6
    %20 = arith.subi %6, %c3_i64 : i64
    llvm.store %20, %arg1 : i64, !llvm.ptr
    cf.br ^bb12
  ^bb14:  // pred: ^bb12
    %c-1_i256 = arith.constant -1 : i256
    %21 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c-1_i256, %21 : i256, !llvm.ptr
    %22 = llvm.getelementptr %21[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %22, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_6 = arith.constant 0 : i8
    %23 = arith.cmpi ne, %c0_i8_6, %c0_i8_5 : i8
    cf.cond_br %23, ^bb3(%c0_i8_6 : i8), ^bb7
  ^bb15:  // pred: ^bb16
    %c1024_i64_7 = arith.constant 1024 : i64
    %24 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_8 = arith.constant 1 : i64
    %25 = arith.addi %24, %c1_i64_8 : i64
    llvm.store %25, %arg3 : i64, !llvm.ptr
    %26 = arith.cmpi ult, %c1024_i64_7, %25 : i64
    %c92_i8_9 = arith.constant 92 : i8
    cf.cond_br %26, ^bb1(%c92_i8_9 : i8), ^bb17
  ^bb16:  // pred: ^bb8
    %27 = arith.subi %10, %c3_i64_1 : i64
    llvm.store %27, %arg1 : i64, !llvm.ptr
    cf.br ^bb15
  ^bb17:  // pred: ^bb15
    %c64_i256 = arith.constant 64 : i256
    %28 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c64_i256, %28 : i256, !llvm.ptr
    %29 = llvm.getelementptr %28[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %29, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_10 = arith.constant 0 : i8
    %30 = arith.cmpi ne, %c0_i8_10, %c0_i8_5 : i8
    cf.cond_br %30, ^bb1(%c0_i8_10 : i8), ^bb9
  ^bb18:  // pred: ^bb19
    %c1024_i64_11 = arith.constant 1024 : i64
    %31 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_12 = arith.constant 1 : i64
    %32 = arith.addi %31, %c1_i64_12 : i64
    llvm.store %32, %arg3 : i64, !llvm.ptr
    %33 = arith.cmpi ult, %c1024_i64_11, %32 : i64
    %c92_i8_13 = arith.constant 92 : i8
    cf.cond_br %33, ^bb1(%c92_i8_13 : i8), ^bb20
  ^bb19:  // pred: ^bb9
    %34 = arith.subi %12, %c3_i64_3 : i64
    llvm.store %34, %arg1 : i64, !llvm.ptr
    cf.br ^bb18
  ^bb20:  // pred: ^bb18
    %c50_i256 = arith.constant 50 : i256
    %35 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c50_i256, %35 : i256, !llvm.ptr
    %36 = llvm.getelementptr %35[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %36, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_14 = arith.constant 0 : i8
    %37 = arith.cmpi ne, %c0_i8_14, %c0_i8_5 : i8
    cf.cond_br %37, ^bb3(%c0_i8_14 : i8), ^bb10
  ^bb21:  // pred: ^bb10
    %c0_i64_15 = arith.constant 0 : i64
    %c2_i8 = arith.constant 2 : i8
    %38 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_15, %c0_i64_15, %38, %c2_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c2_i8 : i8
  }
}
