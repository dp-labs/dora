---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  llvm.mlir.global internal @dora_global_stack_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_stack_length() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_memory_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_memory_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_calldata_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_calldata_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_gas_counter() {addr_space = 0 : i32} : i64
  llvm.mlir.global external @dora_global_ctx_is_static() {addr_space = 0 : i32} : !llvm.ptr
  func.func private @dora_fn_debug_print(i32)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_chainid(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_gaslimit(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_code_copy(!llvm.ptr, i64, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_call(!llvm.ptr, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, i64, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_size(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_copy(!llvm.ptr, i64, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_transient_storage_read(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_transient_storage_write(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func public @main(%arg0: !llvm.ptr, %arg1: i64) -> i8 attributes {llvm.emit_c_interface} {
    %c1024_i256 = arith.constant 1024 : i256
    %0 = llvm.alloca %c1024_i256 x i256 : (i256) -> !llvm.ptr
    %1 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    llvm.store %0, %1 : !llvm.ptr, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %2 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    llvm.store %c0_i64, %2 : i64, !llvm.ptr
    %c0_i64_0 = arith.constant 0 : i64
    %3 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %c0_i64_0, %3 : i64, !llvm.ptr
    %4 = call @dora_fn_calldata(%arg0) : (!llvm.ptr) -> !llvm.ptr
    %5 = llvm.mlir.addressof @dora_global_calldata_ptr : !llvm.ptr
    llvm.store %4, %5 : !llvm.ptr, !llvm.ptr
    %6 = call @dora_fn_calldata_size(%arg0) : (!llvm.ptr) -> i64
    %7 = llvm.mlir.addressof @dora_global_calldata_size : !llvm.ptr
    llvm.store %6, %7 : i64, !llvm.ptr
    %8 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    llvm.store %arg1, %8 : i64, !llvm.ptr
    cf.br ^bb5
  ^bb1(%9: i8):  // 23 preds: ^bb2, ^bb4, ^bb5, ^bb8, ^bb9, ^bb11, ^bb14, ^bb15, ^bb18, ^bb19, ^bb22, ^bb23, ^bb25, ^bb26, ^bb29, ^bb30, ^bb33, ^bb34, ^bb35, ^bb37, ^bb38, ^bb39, ^bb40
    %c0_i64_1 = arith.constant 0 : i64
    %10 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %11 = llvm.load %10 : !llvm.ptr -> i64
    %12 = call @dora_fn_write_result(%arg0, %c0_i64_1, %c0_i64_1, %11, %9) : (!llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
    return %9 : i8
  ^bb2(%13: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %13 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3:  // pred: ^bb4
    %c1329227995475430863082461991555563520_i256 = arith.constant 1329227995475430863082461991555563520 : i256
    %14 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %15 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    llvm.store %c1329227995475430863082461991555563520_i256, %15 : i256, !llvm.ptr
    %16 = llvm.getelementptr %15[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %16, %14 : !llvm.ptr, !llvm.ptr
    cf.br ^bb9
  ^bb4:  // pred: ^bb6
    %17 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64 = arith.constant 1024 : i64
    %18 = llvm.load %17 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %19 = arith.addi %18, %c1_i64 : i64
    llvm.store %19, %17 : i64, !llvm.ptr
    %20 = arith.cmpi ult, %c1024_i64, %19 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %20, ^bb1(%c92_i8 : i8), ^bb3
  ^bb5:  // pred: ^bb0
    %21 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %22 = llvm.load %21 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    %23 = arith.cmpi uge, %22, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %23, ^bb6, ^bb1(%c80_i8 : i8)
  ^bb6:  // pred: ^bb5
    %24 = arith.subi %22, %c3_i64 : i64
    llvm.store %24, %21 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb7:  // pred: ^bb8
    %c0_i256 = arith.constant 0 : i256
    %25 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %26 = llvm.load %25 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256, %26 : i256, !llvm.ptr
    %27 = llvm.getelementptr %26[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %27, %25 : !llvm.ptr, !llvm.ptr
    cf.br ^bb15
  ^bb8:  // pred: ^bb10
    %28 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_2 = arith.constant 1024 : i64
    %29 = llvm.load %28 : !llvm.ptr -> i64
    %c1_i64_3 = arith.constant 1 : i64
    %30 = arith.addi %29, %c1_i64_3 : i64
    llvm.store %30, %28 : i64, !llvm.ptr
    %31 = arith.cmpi ult, %c1024_i64_2, %30 : i64
    %c92_i8_4 = arith.constant 92 : i8
    cf.cond_br %31, ^bb1(%c92_i8_4 : i8), ^bb7
  ^bb9:  // pred: ^bb3
    %32 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %33 = llvm.load %32 : !llvm.ptr -> i64
    %c3_i64_5 = arith.constant 3 : i64
    %34 = arith.cmpi uge, %33, %c3_i64_5 : i64
    %c80_i8_6 = arith.constant 80 : i8
    cf.cond_br %34, ^bb10, ^bb1(%c80_i8_6 : i8)
  ^bb10:  // pred: ^bb9
    %35 = arith.subi %33, %c3_i64_5 : i64
    llvm.store %35, %32 : i64, !llvm.ptr
    cf.br ^bb8
  ^bb11:  // pred: ^bb14
    %36 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %37 = llvm.load %36 : !llvm.ptr -> !llvm.ptr
    %38 = llvm.getelementptr %37[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %39 = llvm.load %38 : !llvm.ptr -> i256
    llvm.store %38, %36 : !llvm.ptr, !llvm.ptr
    %40 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %41 = llvm.load %40 : !llvm.ptr -> !llvm.ptr
    %42 = llvm.getelementptr %41[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %43 = llvm.load %42 : !llvm.ptr -> i256
    llvm.store %42, %40 : !llvm.ptr, !llvm.ptr
    %44 = arith.trunci %39 : i256 to i64
    %c0_i64_7 = arith.constant 0 : i64
    %45 = arith.cmpi slt, %44, %c0_i64_7 : i64
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %45, ^bb1(%c84_i8 : i8), ^bb12
  ^bb12:  // pred: ^bb11
    %c32_i64 = arith.constant 32 : i64
    %c0_i64_8 = arith.constant 0 : i64
    %46 = arith.cmpi ne, %c32_i64, %c0_i64_8 : i64
    cf.cond_br %46, ^bb33, ^bb13
  ^bb13:  // 2 preds: ^bb12, ^bb36
    %47 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    %48 = llvm.load %47 : !llvm.ptr -> !llvm.ptr
    %49 = llvm.getelementptr %48[%44] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %50 = llvm.intr.bswap(%43)  : (i256) -> i256
    llvm.store %50, %49 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb19
  ^bb14:  // pred: ^bb16
    %51 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_9 = arith.constant 1024 : i64
    %52 = llvm.load %51 : !llvm.ptr -> i64
    %c-2_i64 = arith.constant -2 : i64
    %53 = arith.addi %52, %c-2_i64 : i64
    llvm.store %53, %51 : i64, !llvm.ptr
    %c2_i64 = arith.constant 2 : i64
    %54 = arith.cmpi ult, %52, %c2_i64 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %54, ^bb1(%c91_i8 : i8), ^bb11
  ^bb15:  // pred: ^bb7
    %55 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %56 = llvm.load %55 : !llvm.ptr -> i64
    %c3_i64_10 = arith.constant 3 : i64
    %57 = arith.cmpi uge, %56, %c3_i64_10 : i64
    %c80_i8_11 = arith.constant 80 : i8
    cf.cond_br %57, ^bb16, ^bb1(%c80_i8_11 : i8)
  ^bb16:  // pred: ^bb15
    %58 = arith.subi %56, %c3_i64_10 : i64
    llvm.store %58, %55 : i64, !llvm.ptr
    cf.br ^bb14
  ^bb17:  // pred: ^bb18
    %c4_i256 = arith.constant 4 : i256
    %59 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %60 = llvm.load %59 : !llvm.ptr -> !llvm.ptr
    llvm.store %c4_i256, %60 : i256, !llvm.ptr
    %61 = llvm.getelementptr %60[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %61, %59 : !llvm.ptr, !llvm.ptr
    cf.br ^bb23
  ^bb18:  // pred: ^bb20
    %62 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_12 = arith.constant 1024 : i64
    %63 = llvm.load %62 : !llvm.ptr -> i64
    %c1_i64_13 = arith.constant 1 : i64
    %64 = arith.addi %63, %c1_i64_13 : i64
    llvm.store %64, %62 : i64, !llvm.ptr
    %65 = arith.cmpi ult, %c1024_i64_12, %64 : i64
    %c92_i8_14 = arith.constant 92 : i8
    cf.cond_br %65, ^bb1(%c92_i8_14 : i8), ^bb17
  ^bb19:  // pred: ^bb13
    %66 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %67 = llvm.load %66 : !llvm.ptr -> i64
    %c3_i64_15 = arith.constant 3 : i64
    %68 = arith.cmpi uge, %67, %c3_i64_15 : i64
    %c80_i8_16 = arith.constant 80 : i8
    cf.cond_br %68, ^bb20, ^bb1(%c80_i8_16 : i8)
  ^bb20:  // pred: ^bb19
    %69 = arith.subi %67, %c3_i64_15 : i64
    llvm.store %69, %66 : i64, !llvm.ptr
    cf.br ^bb18
  ^bb21:  // pred: ^bb22
    %c0_i256_17 = arith.constant 0 : i256
    %70 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %71 = llvm.load %70 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_17, %71 : i256, !llvm.ptr
    %72 = llvm.getelementptr %71[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %72, %70 : !llvm.ptr, !llvm.ptr
    cf.br ^bb30
  ^bb22:  // pred: ^bb24
    %73 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_18 = arith.constant 1024 : i64
    %74 = llvm.load %73 : !llvm.ptr -> i64
    %c1_i64_19 = arith.constant 1 : i64
    %75 = arith.addi %74, %c1_i64_19 : i64
    llvm.store %75, %73 : i64, !llvm.ptr
    %76 = arith.cmpi ult, %c1024_i64_18, %75 : i64
    %c92_i8_20 = arith.constant 92 : i8
    cf.cond_br %76, ^bb1(%c92_i8_20 : i8), ^bb21
  ^bb23:  // pred: ^bb17
    %77 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %78 = llvm.load %77 : !llvm.ptr -> i64
    %c3_i64_21 = arith.constant 3 : i64
    %79 = arith.cmpi uge, %78, %c3_i64_21 : i64
    %c80_i8_22 = arith.constant 80 : i8
    cf.cond_br %79, ^bb24, ^bb1(%c80_i8_22 : i8)
  ^bb24:  // pred: ^bb23
    %80 = arith.subi %78, %c3_i64_21 : i64
    llvm.store %80, %77 : i64, !llvm.ptr
    cf.br ^bb22
  ^bb25:  // pred: ^bb29
    %81 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %82 = llvm.load %81 : !llvm.ptr -> !llvm.ptr
    %83 = llvm.getelementptr %82[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %84 = llvm.load %83 : !llvm.ptr -> i256
    llvm.store %83, %81 : !llvm.ptr, !llvm.ptr
    %85 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %86 = llvm.load %85 : !llvm.ptr -> !llvm.ptr
    %87 = llvm.getelementptr %86[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %88 = llvm.load %87 : !llvm.ptr -> i256
    llvm.store %87, %85 : !llvm.ptr, !llvm.ptr
    %89 = arith.trunci %84 : i256 to i64
    %c0_i64_23 = arith.constant 0 : i64
    %90 = arith.cmpi slt, %89, %c0_i64_23 : i64
    %c84_i8_24 = arith.constant 84 : i8
    cf.cond_br %90, ^bb1(%c84_i8_24 : i8), ^bb26
  ^bb26:  // pred: ^bb25
    %91 = arith.trunci %88 : i256 to i64
    %c0_i64_25 = arith.constant 0 : i64
    %92 = arith.cmpi slt, %91, %c0_i64_25 : i64
    %c84_i8_26 = arith.constant 84 : i8
    cf.cond_br %92, ^bb1(%c84_i8_26 : i8), ^bb27
  ^bb27:  // pred: ^bb26
    %c0_i64_27 = arith.constant 0 : i64
    %93 = arith.cmpi ne, %91, %c0_i64_27 : i64
    cf.cond_br %93, ^bb37, ^bb28
  ^bb28:  // 2 preds: ^bb27, ^bb41
    %c1_i256 = arith.constant 1 : i256
    %94 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    call @dora_fn_keccak256_hasher(%arg0, %89, %91, %94) : (!llvm.ptr, i64, i64, !llvm.ptr) -> ()
    %95 = llvm.load %94 : !llvm.ptr -> i256
    %96 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %97 = llvm.load %96 : !llvm.ptr -> !llvm.ptr
    llvm.store %95, %97 : i256, !llvm.ptr
    %98 = llvm.getelementptr %97[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %98, %96 : !llvm.ptr, !llvm.ptr
    cf.br ^bb32
  ^bb29:  // pred: ^bb31
    %99 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_28 = arith.constant 1024 : i64
    %100 = llvm.load %99 : !llvm.ptr -> i64
    %c-1_i64 = arith.constant -1 : i64
    %101 = arith.addi %100, %c-1_i64 : i64
    llvm.store %101, %99 : i64, !llvm.ptr
    %c2_i64_29 = arith.constant 2 : i64
    %102 = arith.cmpi ult, %100, %c2_i64_29 : i64
    %c91_i8_30 = arith.constant 91 : i8
    cf.cond_br %102, ^bb1(%c91_i8_30 : i8), ^bb25
  ^bb30:  // pred: ^bb21
    %103 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %104 = llvm.load %103 : !llvm.ptr -> i64
    %c30_i64 = arith.constant 30 : i64
    %105 = arith.cmpi uge, %104, %c30_i64 : i64
    %c80_i8_31 = arith.constant 80 : i8
    cf.cond_br %105, ^bb31, ^bb1(%c80_i8_31 : i8)
  ^bb31:  // pred: ^bb30
    %106 = arith.subi %104, %c30_i64 : i64
    llvm.store %106, %103 : i64, !llvm.ptr
    cf.br ^bb29
  ^bb32:  // pred: ^bb28
    %c0_i64_32 = arith.constant 0 : i64
    %c1_i8 = arith.constant 1 : i8
    %107 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %108 = llvm.load %107 : !llvm.ptr -> i64
    %109 = call @dora_fn_write_result(%arg0, %c0_i64_32, %c0_i64_32, %108, %c1_i8) : (!llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
    return %c1_i8 : i8
  ^bb33:  // pred: ^bb12
    %110 = arith.addi %44, %c32_i64 : i64
    %c0_i64_33 = arith.constant 0 : i64
    %111 = arith.cmpi slt, %110, %c0_i64_33 : i64
    %c84_i8_34 = arith.constant 84 : i8
    cf.cond_br %111, ^bb1(%c84_i8_34 : i8), ^bb34
  ^bb34:  // pred: ^bb33
    %c31_i64 = arith.constant 31 : i64
    %c32_i64_35 = arith.constant 32 : i64
    %112 = arith.addi %110, %c31_i64 : i64
    %113 = arith.divui %112, %c32_i64_35 : i64
    %c32_i64_36 = arith.constant 32 : i64
    %114 = arith.muli %113, %c32_i64_36 : i64
    %115 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    %116 = llvm.load %115 : !llvm.ptr -> i64
    %c31_i64_37 = arith.constant 31 : i64
    %c32_i64_38 = arith.constant 32 : i64
    %117 = arith.addi %116, %c31_i64_37 : i64
    %118 = arith.divui %117, %c32_i64_38 : i64
    %119 = arith.muli %118, %c32_i64_36 : i64
    %120 = arith.cmpi ult, %119, %114 : i64
    %121 = scf.if %120 -> (i64) {
      %c3_i64_52 = arith.constant 3 : i64
      %c512_i64 = arith.constant 512 : i64
      %162 = arith.muli %118, %118 : i64
      %163 = arith.divui %162, %c512_i64 : i64
      %164 = arith.muli %118, %c3_i64_52 : i64
      %165 = arith.addi %163, %164 : i64
      %c3_i64_53 = arith.constant 3 : i64
      %c512_i64_54 = arith.constant 512 : i64
      %166 = arith.muli %113, %113 : i64
      %167 = arith.divui %166, %c512_i64_54 : i64
      %168 = arith.muli %113, %c3_i64_53 : i64
      %169 = arith.addi %167, %168 : i64
      %170 = arith.subi %169, %165 : i64
      scf.yield %170 : i64
    } else {
      %c0_i64_52 = arith.constant 0 : i64
      scf.yield %c0_i64_52 : i64
    }
    %122 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %123 = llvm.load %122 : !llvm.ptr -> i64
    %124 = arith.cmpi ult, %123, %121 : i64
    scf.if %124 {
    } else {
      %162 = arith.subi %123, %121 : i64
      llvm.store %162, %122 : i64, !llvm.ptr
    }
    %c80_i8_39 = arith.constant 80 : i8
    cf.cond_br %124, ^bb1(%c80_i8_39 : i8), ^bb35
  ^bb35:  // pred: ^bb34
    %125 = call @dora_fn_extend_memory(%arg0, %114) : (!llvm.ptr, i64) -> !llvm.ptr
    %126 = llvm.getelementptr %125[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %127 = llvm.load %126 : !llvm.ptr -> !llvm.ptr
    %128 = llvm.getelementptr %125[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %129 = llvm.load %128 : !llvm.ptr -> i8
    %c0_i8 = arith.constant 0 : i8
    %130 = arith.cmpi ne, %129, %c0_i8 : i8
    cf.cond_br %130, ^bb1(%129 : i8), ^bb36
  ^bb36:  // pred: ^bb35
    %131 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    llvm.store %127, %131 : !llvm.ptr, !llvm.ptr
    %132 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %114, %132 : i64, !llvm.ptr
    cf.br ^bb13
  ^bb37:  // pred: ^bb27
    %c31_i64_40 = arith.constant 31 : i64
    %c32_i64_41 = arith.constant 32 : i64
    %133 = arith.addi %91, %c31_i64_40 : i64
    %134 = arith.divui %133, %c32_i64_41 : i64
    %c6_i64 = arith.constant 6 : i64
    %135 = arith.muli %134, %c6_i64 : i64
    %136 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %137 = llvm.load %136 : !llvm.ptr -> i64
    %138 = arith.cmpi ult, %137, %135 : i64
    scf.if %138 {
    } else {
      %162 = arith.subi %137, %135 : i64
      llvm.store %162, %136 : i64, !llvm.ptr
    }
    %c80_i8_42 = arith.constant 80 : i8
    cf.cond_br %138, ^bb1(%c80_i8_42 : i8), ^bb38
  ^bb38:  // pred: ^bb37
    %139 = arith.addi %89, %91 : i64
    %c0_i64_43 = arith.constant 0 : i64
    %140 = arith.cmpi slt, %139, %c0_i64_43 : i64
    %c84_i8_44 = arith.constant 84 : i8
    cf.cond_br %140, ^bb1(%c84_i8_44 : i8), ^bb39
  ^bb39:  // pred: ^bb38
    %c31_i64_45 = arith.constant 31 : i64
    %c32_i64_46 = arith.constant 32 : i64
    %141 = arith.addi %139, %c31_i64_45 : i64
    %142 = arith.divui %141, %c32_i64_46 : i64
    %c32_i64_47 = arith.constant 32 : i64
    %143 = arith.muli %142, %c32_i64_47 : i64
    %144 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    %145 = llvm.load %144 : !llvm.ptr -> i64
    %c31_i64_48 = arith.constant 31 : i64
    %c32_i64_49 = arith.constant 32 : i64
    %146 = arith.addi %145, %c31_i64_48 : i64
    %147 = arith.divui %146, %c32_i64_49 : i64
    %148 = arith.muli %147, %c32_i64_47 : i64
    %149 = arith.cmpi ult, %148, %143 : i64
    %150 = scf.if %149 -> (i64) {
      %c3_i64_52 = arith.constant 3 : i64
      %c512_i64 = arith.constant 512 : i64
      %162 = arith.muli %147, %147 : i64
      %163 = arith.divui %162, %c512_i64 : i64
      %164 = arith.muli %147, %c3_i64_52 : i64
      %165 = arith.addi %163, %164 : i64
      %c3_i64_53 = arith.constant 3 : i64
      %c512_i64_54 = arith.constant 512 : i64
      %166 = arith.muli %142, %142 : i64
      %167 = arith.divui %166, %c512_i64_54 : i64
      %168 = arith.muli %142, %c3_i64_53 : i64
      %169 = arith.addi %167, %168 : i64
      %170 = arith.subi %169, %165 : i64
      scf.yield %170 : i64
    } else {
      %c0_i64_52 = arith.constant 0 : i64
      scf.yield %c0_i64_52 : i64
    }
    %151 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %152 = llvm.load %151 : !llvm.ptr -> i64
    %153 = arith.cmpi ult, %152, %150 : i64
    scf.if %153 {
    } else {
      %162 = arith.subi %152, %150 : i64
      llvm.store %162, %151 : i64, !llvm.ptr
    }
    %c80_i8_50 = arith.constant 80 : i8
    cf.cond_br %153, ^bb1(%c80_i8_50 : i8), ^bb40
  ^bb40:  // pred: ^bb39
    %154 = call @dora_fn_extend_memory(%arg0, %143) : (!llvm.ptr, i64) -> !llvm.ptr
    %155 = llvm.getelementptr %154[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %156 = llvm.load %155 : !llvm.ptr -> !llvm.ptr
    %157 = llvm.getelementptr %154[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %158 = llvm.load %157 : !llvm.ptr -> i8
    %c0_i8_51 = arith.constant 0 : i8
    %159 = arith.cmpi ne, %158, %c0_i8_51 : i8
    cf.cond_br %159, ^bb1(%158 : i8), ^bb41
  ^bb41:  // pred: ^bb40
    %160 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    llvm.store %156, %160 : !llvm.ptr, !llvm.ptr
    %161 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %143, %161 : i64, !llvm.ptr
    cf.br ^bb28
  }
}
