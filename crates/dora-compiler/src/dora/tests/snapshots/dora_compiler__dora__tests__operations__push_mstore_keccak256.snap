---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  llvm.mlir.global internal @dora_global_stack_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_stack_length() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_memory_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_memory_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_calldata_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_calldata_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_gas_counter() {addr_space = 0 : i32} : i64
  llvm.mlir.global external @dora_global_ctx_is_static() {addr_space = 0 : i32} : !llvm.ptr
  func.func private @dora_fn_debug_print(i32)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_chainid(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_gaslimit(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_code_copy(!llvm.ptr, i64, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_call(!llvm.ptr, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr, i8) -> !llvm.ptr
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, i64, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_return_data_size(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_return_data_copy(!llvm.ptr, i64, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_transient_storage_read(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_transient_storage_write(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func public @main(%arg0: !llvm.ptr, %arg1: i64) -> i8 attributes {llvm.emit_c_interface} {
    %c1024_i256 = arith.constant 1024 : i256
    %0 = llvm.alloca %c1024_i256 x i256 : (i256) -> !llvm.ptr
    %1 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    llvm.store %0, %1 : !llvm.ptr, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %2 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    llvm.store %c0_i64, %2 : i64, !llvm.ptr
    %c0_i64_0 = arith.constant 0 : i64
    %3 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %c0_i64_0, %3 : i64, !llvm.ptr
    %4 = call @dora_fn_calldata(%arg0) : (!llvm.ptr) -> !llvm.ptr
    %5 = llvm.mlir.addressof @dora_global_calldata_ptr : !llvm.ptr
    llvm.store %4, %5 : !llvm.ptr, !llvm.ptr
    %6 = call @dora_fn_calldata_size(%arg0) : (!llvm.ptr) -> i64
    %7 = llvm.mlir.addressof @dora_global_calldata_size : !llvm.ptr
    llvm.store %6, %7 : i64, !llvm.ptr
    %8 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    llvm.store %arg1, %8 : i64, !llvm.ptr
    cf.br ^bb5
  ^bb1(%9: i8):  // 23 preds: ^bb2, ^bb4, ^bb5, ^bb8, ^bb9, ^bb11, ^bb12, ^bb13, ^bb14, ^bb16, ^bb17, ^bb20, ^bb21, ^bb24, ^bb25, ^bb27, ^bb28, ^bb31, ^bb32, ^bb35, ^bb36, ^bb37, ^bb38
    %c0_i64_1 = arith.constant 0 : i64
    %10 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %11 = llvm.load %10 : !llvm.ptr -> i64
    %12 = call @dora_fn_write_result(%arg0, %c0_i64_1, %c0_i64_1, %11, %9) : (!llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
    return %9 : i8
  ^bb2(%13: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %13 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3:  // pred: ^bb4
    %c1329227995475430863082461991555563520_i256 = arith.constant 1329227995475430863082461991555563520 : i256
    %14 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %15 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    llvm.store %c1329227995475430863082461991555563520_i256, %15 : i256, !llvm.ptr
    %16 = llvm.getelementptr %15[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %16, %14 : !llvm.ptr, !llvm.ptr
    cf.br ^bb9
  ^bb4:  // pred: ^bb6
    %17 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64 = arith.constant 1024 : i64
    %18 = llvm.load %17 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %19 = arith.addi %18, %c1_i64 : i64
    llvm.store %19, %17 : i64, !llvm.ptr
    %20 = arith.cmpi ult, %c1024_i64, %19 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %20, ^bb1(%c92_i8 : i8), ^bb3
  ^bb5:  // pred: ^bb0
    %21 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %22 = llvm.load %21 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    %23 = arith.cmpi uge, %22, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %23, ^bb6, ^bb1(%c80_i8 : i8)
  ^bb6:  // pred: ^bb5
    %24 = arith.subi %22, %c3_i64 : i64
    llvm.store %24, %21 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb7:  // pred: ^bb8
    %c0_i256 = arith.constant 0 : i256
    %25 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %26 = llvm.load %25 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256, %26 : i256, !llvm.ptr
    %27 = llvm.getelementptr %26[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %27, %25 : !llvm.ptr, !llvm.ptr
    cf.br ^bb17
  ^bb8:  // pred: ^bb10
    %28 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_2 = arith.constant 1024 : i64
    %29 = llvm.load %28 : !llvm.ptr -> i64
    %c1_i64_3 = arith.constant 1 : i64
    %30 = arith.addi %29, %c1_i64_3 : i64
    llvm.store %30, %28 : i64, !llvm.ptr
    %31 = arith.cmpi ult, %c1024_i64_2, %30 : i64
    %c92_i8_4 = arith.constant 92 : i8
    cf.cond_br %31, ^bb1(%c92_i8_4 : i8), ^bb7
  ^bb9:  // pred: ^bb3
    %32 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %33 = llvm.load %32 : !llvm.ptr -> i64
    %c3_i64_5 = arith.constant 3 : i64
    %34 = arith.cmpi uge, %33, %c3_i64_5 : i64
    %c80_i8_6 = arith.constant 80 : i8
    cf.cond_br %34, ^bb10, ^bb1(%c80_i8_6 : i8)
  ^bb10:  // pred: ^bb9
    %35 = arith.subi %33, %c3_i64_5 : i64
    llvm.store %35, %32 : i64, !llvm.ptr
    cf.br ^bb8
  ^bb11:  // pred: ^bb16
    %36 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %37 = llvm.load %36 : !llvm.ptr -> !llvm.ptr
    %38 = llvm.getelementptr %37[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %39 = llvm.load %38 : !llvm.ptr -> i256
    llvm.store %38, %36 : !llvm.ptr, !llvm.ptr
    %40 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %41 = llvm.load %40 : !llvm.ptr -> !llvm.ptr
    %42 = llvm.getelementptr %41[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %43 = llvm.load %42 : !llvm.ptr -> i256
    llvm.store %42, %40 : !llvm.ptr, !llvm.ptr
    %44 = arith.trunci %39 : i256 to i64
    %c0_i64_7 = arith.constant 0 : i64
    %45 = arith.cmpi slt, %44, %c0_i64_7 : i64
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %45, ^bb1(%c84_i8 : i8), ^bb12
  ^bb12:  // pred: ^bb11
    %c32_i64 = arith.constant 32 : i64
    %46 = arith.addi %44, %c32_i64 : i64
    %c0_i64_8 = arith.constant 0 : i64
    %47 = arith.cmpi slt, %46, %c0_i64_8 : i64
    %c84_i8_9 = arith.constant 84 : i8
    cf.cond_br %47, ^bb1(%c84_i8_9 : i8), ^bb13
  ^bb13:  // pred: ^bb12
    %c31_i64 = arith.constant 31 : i64
    %c32_i64_10 = arith.constant 32 : i64
    %48 = arith.addi %46, %c31_i64 : i64
    %49 = arith.divui %48, %c32_i64_10 : i64
    %c32_i64_11 = arith.constant 32 : i64
    %50 = arith.muli %49, %c32_i64_11 : i64
    %51 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    %52 = llvm.load %51 : !llvm.ptr -> i64
    %c31_i64_12 = arith.constant 31 : i64
    %c32_i64_13 = arith.constant 32 : i64
    %53 = arith.addi %52, %c31_i64_12 : i64
    %54 = arith.divui %53, %c32_i64_13 : i64
    %55 = arith.muli %54, %c32_i64_11 : i64
    %56 = arith.cmpi ult, %55, %50 : i64
    %57 = scf.if %56 -> (i64) {
      %c3_i64_51 = arith.constant 3 : i64
      %c512_i64 = arith.constant 512 : i64
      %161 = arith.muli %54, %54 : i64
      %162 = arith.divui %161, %c512_i64 : i64
      %163 = arith.muli %54, %c3_i64_51 : i64
      %164 = arith.addi %162, %163 : i64
      %c3_i64_52 = arith.constant 3 : i64
      %c512_i64_53 = arith.constant 512 : i64
      %165 = arith.muli %49, %49 : i64
      %166 = arith.divui %165, %c512_i64_53 : i64
      %167 = arith.muli %49, %c3_i64_52 : i64
      %168 = arith.addi %166, %167 : i64
      %169 = arith.subi %168, %164 : i64
      scf.yield %169 : i64
    } else {
      %c0_i64_51 = arith.constant 0 : i64
      scf.yield %c0_i64_51 : i64
    }
    %58 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %59 = llvm.load %58 : !llvm.ptr -> i64
    %60 = arith.cmpi ult, %59, %57 : i64
    scf.if %60 {
    } else {
      %161 = arith.subi %59, %57 : i64
      llvm.store %161, %58 : i64, !llvm.ptr
    }
    %c80_i8_14 = arith.constant 80 : i8
    cf.cond_br %60, ^bb1(%c80_i8_14 : i8), ^bb14
  ^bb14:  // pred: ^bb13
    %61 = call @dora_fn_extend_memory(%arg0, %50) : (!llvm.ptr, i64) -> !llvm.ptr
    %62 = llvm.getelementptr %61[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %63 = llvm.load %62 : !llvm.ptr -> !llvm.ptr
    %64 = llvm.getelementptr %61[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %65 = llvm.load %64 : !llvm.ptr -> i8
    %c0_i8 = arith.constant 0 : i8
    %66 = arith.cmpi ne, %65, %c0_i8 : i8
    cf.cond_br %66, ^bb1(%65 : i8), ^bb15
  ^bb15:  // pred: ^bb14
    %67 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    llvm.store %63, %67 : !llvm.ptr, !llvm.ptr
    %68 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %50, %68 : i64, !llvm.ptr
    %69 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    %70 = llvm.load %69 : !llvm.ptr -> !llvm.ptr
    %71 = llvm.getelementptr %70[%44] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %72 = llvm.intr.bswap(%43)  : (i256) -> i256
    llvm.store %72, %71 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb21
  ^bb16:  // pred: ^bb18
    %73 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_15 = arith.constant 1024 : i64
    %74 = llvm.load %73 : !llvm.ptr -> i64
    %c-2_i64 = arith.constant -2 : i64
    %75 = arith.addi %74, %c-2_i64 : i64
    llvm.store %75, %73 : i64, !llvm.ptr
    %c2_i64 = arith.constant 2 : i64
    %76 = arith.cmpi ult, %74, %c2_i64 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %76, ^bb1(%c91_i8 : i8), ^bb11
  ^bb17:  // pred: ^bb7
    %77 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %78 = llvm.load %77 : !llvm.ptr -> i64
    %c3_i64_16 = arith.constant 3 : i64
    %79 = arith.cmpi uge, %78, %c3_i64_16 : i64
    %c80_i8_17 = arith.constant 80 : i8
    cf.cond_br %79, ^bb18, ^bb1(%c80_i8_17 : i8)
  ^bb18:  // pred: ^bb17
    %80 = arith.subi %78, %c3_i64_16 : i64
    llvm.store %80, %77 : i64, !llvm.ptr
    cf.br ^bb16
  ^bb19:  // pred: ^bb20
    %c4_i256 = arith.constant 4 : i256
    %81 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %82 = llvm.load %81 : !llvm.ptr -> !llvm.ptr
    llvm.store %c4_i256, %82 : i256, !llvm.ptr
    %83 = llvm.getelementptr %82[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %83, %81 : !llvm.ptr, !llvm.ptr
    cf.br ^bb25
  ^bb20:  // pred: ^bb22
    %84 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_18 = arith.constant 1024 : i64
    %85 = llvm.load %84 : !llvm.ptr -> i64
    %c1_i64_19 = arith.constant 1 : i64
    %86 = arith.addi %85, %c1_i64_19 : i64
    llvm.store %86, %84 : i64, !llvm.ptr
    %87 = arith.cmpi ult, %c1024_i64_18, %86 : i64
    %c92_i8_20 = arith.constant 92 : i8
    cf.cond_br %87, ^bb1(%c92_i8_20 : i8), ^bb19
  ^bb21:  // pred: ^bb15
    %88 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %89 = llvm.load %88 : !llvm.ptr -> i64
    %c3_i64_21 = arith.constant 3 : i64
    %90 = arith.cmpi uge, %89, %c3_i64_21 : i64
    %c80_i8_22 = arith.constant 80 : i8
    cf.cond_br %90, ^bb22, ^bb1(%c80_i8_22 : i8)
  ^bb22:  // pred: ^bb21
    %91 = arith.subi %89, %c3_i64_21 : i64
    llvm.store %91, %88 : i64, !llvm.ptr
    cf.br ^bb20
  ^bb23:  // pred: ^bb24
    %c0_i256_23 = arith.constant 0 : i256
    %92 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %93 = llvm.load %92 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_23, %93 : i256, !llvm.ptr
    %94 = llvm.getelementptr %93[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %94, %92 : !llvm.ptr, !llvm.ptr
    cf.br ^bb32
  ^bb24:  // pred: ^bb26
    %95 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_24 = arith.constant 1024 : i64
    %96 = llvm.load %95 : !llvm.ptr -> i64
    %c1_i64_25 = arith.constant 1 : i64
    %97 = arith.addi %96, %c1_i64_25 : i64
    llvm.store %97, %95 : i64, !llvm.ptr
    %98 = arith.cmpi ult, %c1024_i64_24, %97 : i64
    %c92_i8_26 = arith.constant 92 : i8
    cf.cond_br %98, ^bb1(%c92_i8_26 : i8), ^bb23
  ^bb25:  // pred: ^bb19
    %99 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %100 = llvm.load %99 : !llvm.ptr -> i64
    %c3_i64_27 = arith.constant 3 : i64
    %101 = arith.cmpi uge, %100, %c3_i64_27 : i64
    %c80_i8_28 = arith.constant 80 : i8
    cf.cond_br %101, ^bb26, ^bb1(%c80_i8_28 : i8)
  ^bb26:  // pred: ^bb25
    %102 = arith.subi %100, %c3_i64_27 : i64
    llvm.store %102, %99 : i64, !llvm.ptr
    cf.br ^bb24
  ^bb27:  // pred: ^bb31
    %103 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %104 = llvm.load %103 : !llvm.ptr -> !llvm.ptr
    %105 = llvm.getelementptr %104[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %106 = llvm.load %105 : !llvm.ptr -> i256
    llvm.store %105, %103 : !llvm.ptr, !llvm.ptr
    %107 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %108 = llvm.load %107 : !llvm.ptr -> !llvm.ptr
    %109 = llvm.getelementptr %108[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %110 = llvm.load %109 : !llvm.ptr -> i256
    llvm.store %109, %107 : !llvm.ptr, !llvm.ptr
    %111 = arith.trunci %106 : i256 to i64
    %c0_i64_29 = arith.constant 0 : i64
    %112 = arith.cmpi slt, %111, %c0_i64_29 : i64
    %c84_i8_30 = arith.constant 84 : i8
    cf.cond_br %112, ^bb1(%c84_i8_30 : i8), ^bb28
  ^bb28:  // pred: ^bb27
    %113 = arith.trunci %110 : i256 to i64
    %c0_i64_31 = arith.constant 0 : i64
    %114 = arith.cmpi slt, %113, %c0_i64_31 : i64
    %c84_i8_32 = arith.constant 84 : i8
    cf.cond_br %114, ^bb1(%c84_i8_32 : i8), ^bb29
  ^bb29:  // pred: ^bb28
    %c0_i64_33 = arith.constant 0 : i64
    %115 = arith.cmpi ne, %113, %c0_i64_33 : i64
    cf.cond_br %115, ^bb35, ^bb30
  ^bb30:  // 2 preds: ^bb29, ^bb39
    %c1_i256 = arith.constant 1 : i256
    %116 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    call @dora_fn_keccak256_hasher(%arg0, %111, %113, %116) : (!llvm.ptr, i64, i64, !llvm.ptr) -> ()
    %117 = llvm.load %116 : !llvm.ptr -> i256
    %118 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %119 = llvm.load %118 : !llvm.ptr -> !llvm.ptr
    llvm.store %117, %119 : i256, !llvm.ptr
    %120 = llvm.getelementptr %119[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %120, %118 : !llvm.ptr, !llvm.ptr
    cf.br ^bb34
  ^bb31:  // pred: ^bb33
    %121 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_34 = arith.constant 1024 : i64
    %122 = llvm.load %121 : !llvm.ptr -> i64
    %c-1_i64 = arith.constant -1 : i64
    %123 = arith.addi %122, %c-1_i64 : i64
    llvm.store %123, %121 : i64, !llvm.ptr
    %c2_i64_35 = arith.constant 2 : i64
    %124 = arith.cmpi ult, %122, %c2_i64_35 : i64
    %c91_i8_36 = arith.constant 91 : i8
    cf.cond_br %124, ^bb1(%c91_i8_36 : i8), ^bb27
  ^bb32:  // pred: ^bb23
    %125 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %126 = llvm.load %125 : !llvm.ptr -> i64
    %c30_i64 = arith.constant 30 : i64
    %127 = arith.cmpi uge, %126, %c30_i64 : i64
    %c80_i8_37 = arith.constant 80 : i8
    cf.cond_br %127, ^bb33, ^bb1(%c80_i8_37 : i8)
  ^bb33:  // pred: ^bb32
    %128 = arith.subi %126, %c30_i64 : i64
    llvm.store %128, %125 : i64, !llvm.ptr
    cf.br ^bb31
  ^bb34:  // pred: ^bb30
    %c0_i64_38 = arith.constant 0 : i64
    %c1_i8 = arith.constant 1 : i8
    %129 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %130 = llvm.load %129 : !llvm.ptr -> i64
    %131 = call @dora_fn_write_result(%arg0, %c0_i64_38, %c0_i64_38, %130, %c1_i8) : (!llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
    return %c1_i8 : i8
  ^bb35:  // pred: ^bb29
    %c31_i64_39 = arith.constant 31 : i64
    %c32_i64_40 = arith.constant 32 : i64
    %132 = arith.addi %113, %c31_i64_39 : i64
    %133 = arith.divui %132, %c32_i64_40 : i64
    %c6_i64 = arith.constant 6 : i64
    %134 = arith.muli %133, %c6_i64 : i64
    %135 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %136 = llvm.load %135 : !llvm.ptr -> i64
    %137 = arith.cmpi ult, %136, %134 : i64
    scf.if %137 {
    } else {
      %161 = arith.subi %136, %134 : i64
      llvm.store %161, %135 : i64, !llvm.ptr
    }
    %c80_i8_41 = arith.constant 80 : i8
    cf.cond_br %137, ^bb1(%c80_i8_41 : i8), ^bb36
  ^bb36:  // pred: ^bb35
    %138 = arith.addi %111, %113 : i64
    %c0_i64_42 = arith.constant 0 : i64
    %139 = arith.cmpi slt, %138, %c0_i64_42 : i64
    %c84_i8_43 = arith.constant 84 : i8
    cf.cond_br %139, ^bb1(%c84_i8_43 : i8), ^bb37
  ^bb37:  // pred: ^bb36
    %c31_i64_44 = arith.constant 31 : i64
    %c32_i64_45 = arith.constant 32 : i64
    %140 = arith.addi %138, %c31_i64_44 : i64
    %141 = arith.divui %140, %c32_i64_45 : i64
    %c32_i64_46 = arith.constant 32 : i64
    %142 = arith.muli %141, %c32_i64_46 : i64
    %143 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    %144 = llvm.load %143 : !llvm.ptr -> i64
    %c31_i64_47 = arith.constant 31 : i64
    %c32_i64_48 = arith.constant 32 : i64
    %145 = arith.addi %144, %c31_i64_47 : i64
    %146 = arith.divui %145, %c32_i64_48 : i64
    %147 = arith.muli %146, %c32_i64_46 : i64
    %148 = arith.cmpi ult, %147, %142 : i64
    %149 = scf.if %148 -> (i64) {
      %c3_i64_51 = arith.constant 3 : i64
      %c512_i64 = arith.constant 512 : i64
      %161 = arith.muli %146, %146 : i64
      %162 = arith.divui %161, %c512_i64 : i64
      %163 = arith.muli %146, %c3_i64_51 : i64
      %164 = arith.addi %162, %163 : i64
      %c3_i64_52 = arith.constant 3 : i64
      %c512_i64_53 = arith.constant 512 : i64
      %165 = arith.muli %141, %141 : i64
      %166 = arith.divui %165, %c512_i64_53 : i64
      %167 = arith.muli %141, %c3_i64_52 : i64
      %168 = arith.addi %166, %167 : i64
      %169 = arith.subi %168, %164 : i64
      scf.yield %169 : i64
    } else {
      %c0_i64_51 = arith.constant 0 : i64
      scf.yield %c0_i64_51 : i64
    }
    %150 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %151 = llvm.load %150 : !llvm.ptr -> i64
    %152 = arith.cmpi ult, %151, %149 : i64
    scf.if %152 {
    } else {
      %161 = arith.subi %151, %149 : i64
      llvm.store %161, %150 : i64, !llvm.ptr
    }
    %c80_i8_49 = arith.constant 80 : i8
    cf.cond_br %152, ^bb1(%c80_i8_49 : i8), ^bb38
  ^bb38:  // pred: ^bb37
    %153 = call @dora_fn_extend_memory(%arg0, %142) : (!llvm.ptr, i64) -> !llvm.ptr
    %154 = llvm.getelementptr %153[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %155 = llvm.load %154 : !llvm.ptr -> !llvm.ptr
    %156 = llvm.getelementptr %153[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %157 = llvm.load %156 : !llvm.ptr -> i8
    %c0_i8_50 = arith.constant 0 : i8
    %158 = arith.cmpi ne, %157, %c0_i8_50 : i8
    cf.cond_br %158, ^bb1(%157 : i8), ^bb39
  ^bb39:  // pred: ^bb38
    %159 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    llvm.store %155, %159 : !llvm.ptr, !llvm.ptr
    %160 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %142, %160 : i64, !llvm.ptr
    cf.br ^bb30
  }
}
