---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  llvm.mlir.global internal @dora_global_memory_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_memory_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_calldata_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_calldata_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_gas_counter() {addr_space = 0 : i32} : i64
  func.func private @dora_fn_nop()
  func.func private @dora_fn_tracing(!llvm.ptr, i8, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_fn_is_static(!llvm.ptr) -> i8
  func.func private @dora_fn_exp(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_chainid(!llvm.ptr) -> i64
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gaslimit_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_code_copy(!llvm.ptr, !llvm.ptr, i64, i64)
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_call(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_returndata_copy(!llvm.ptr, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_tload(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_tstore(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func public @main(%arg0: !llvm.ptr, %arg1: i64, %arg2: !llvm.ptr, %arg3: !llvm.ptr) -> i8 attributes {llvm.emit_c_interface} {
    %c0_i64 = arith.constant 0 : i64
    %0 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %c0_i64, %0 : i64, !llvm.ptr
    %1 = call @dora_fn_calldata(%arg0) : (!llvm.ptr) -> !llvm.ptr
    %2 = llvm.mlir.addressof @dora_global_calldata_ptr : !llvm.ptr
    llvm.store %1, %2 : !llvm.ptr, !llvm.ptr
    %3 = call @dora_fn_calldata_size(%arg0) : (!llvm.ptr) -> i64
    %4 = llvm.mlir.addressof @dora_global_calldata_size : !llvm.ptr
    llvm.store %3, %4 : i64, !llvm.ptr
    %5 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    llvm.store %arg1, %5 : i64, !llvm.ptr
    cf.br ^bb5
  ^bb1(%6: i8):  // 25 preds: ^bb2, ^bb4, ^bb5, ^bb8, ^bb9, ^bb13, ^bb14, ^bb17, ^bb18, ^bb21, ^bb22, ^bb24, ^bb25, ^bb29, ^bb30, ^bb33, ^bb34, ^bb35, ^bb38, ^bb39, ^bb41, ^bb42, ^bb43, ^bb46, ^bb47
    %c0_i64_0 = arith.constant 0 : i64
    %7 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %8 = llvm.load %7 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_0, %c0_i64_0, %8, %6) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %6 : i8
  ^bb2(%9: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %9 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3:  // pred: ^bb4
    %c26855045751621412909479635801631599578944495011106431764815136423936_i256 = arith.constant 26855045751621412909479635801631599578944495011106431764815136423936 : i256
    %10 = llvm.load %arg3 : !llvm.ptr -> i64
    %11 = llvm.getelementptr %arg2[%10] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64 = arith.constant 1 : i64
    %12 = arith.addi %10, %c1_i64 : i64
    llvm.store %12, %arg3 : i64, !llvm.ptr
    llvm.store %c26855045751621412909479635801631599578944495011106431764815136423936_i256, %11 : i256, !llvm.ptr
    cf.br ^bb9
  ^bb4:  // pred: ^bb6
    %c1024_i64 = arith.constant 1024 : i64
    %13 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_1 = arith.constant 1 : i64
    %14 = arith.addi %13, %c1_i64_1 : i64
    %15 = arith.cmpi ult, %c1024_i64, %14 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %15, ^bb1(%c92_i8 : i8), ^bb3
  ^bb5:  // pred: ^bb0
    %16 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %17 = llvm.load %16 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %18 = arith.cmpi uge, %17, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %18, ^bb6, ^bb1(%c80_i8 : i8)
  ^bb6:  // pred: ^bb5
    %19 = arith.subi %17, %c3_i64 : i64
    llvm.store %19, %16 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb7:  // pred: ^bb8
    %c0_i256 = arith.constant 0 : i256
    %20 = llvm.load %arg3 : !llvm.ptr -> i64
    %21 = llvm.getelementptr %arg2[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_2 = arith.constant 1 : i64
    %22 = arith.addi %20, %c1_i64_2 : i64
    llvm.store %22, %arg3 : i64, !llvm.ptr
    llvm.store %c0_i256, %21 : i256, !llvm.ptr
    cf.br ^bb14
  ^bb8:  // pred: ^bb10
    %c1024_i64_3 = arith.constant 1024 : i64
    %23 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_4 = arith.constant 1 : i64
    %24 = arith.addi %23, %c1_i64_4 : i64
    %25 = arith.cmpi ult, %c1024_i64_3, %24 : i64
    %c92_i8_5 = arith.constant 92 : i8
    cf.cond_br %25, ^bb1(%c92_i8_5 : i8), ^bb7
  ^bb9:  // pred: ^bb3
    %26 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %27 = llvm.load %26 : !llvm.ptr -> i64
    %c3_i64_6 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %28 = arith.cmpi uge, %27, %c3_i64_6 : i64
    %c80_i8_7 = arith.constant 80 : i8
    cf.cond_br %28, ^bb10, ^bb1(%c80_i8_7 : i8)
  ^bb10:  // pred: ^bb9
    %29 = arith.subi %27, %c3_i64_6 : i64
    llvm.store %29, %26 : i64, !llvm.ptr
    cf.br ^bb8
  ^bb11:  // pred: ^bb13
    %30 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_8 = arith.constant 1 : i64
    %31 = arith.subi %30, %c1_i64_8 : i64
    %32 = llvm.getelementptr %arg2[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %31, %arg3 : i64, !llvm.ptr
    %33 = llvm.load %32 : !llvm.ptr -> i256
    %34 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_9 = arith.constant 1 : i64
    %35 = arith.subi %34, %c1_i64_9 : i64
    %36 = llvm.getelementptr %arg2[%35] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %35, %arg3 : i64, !llvm.ptr
    %37 = llvm.load %36 : !llvm.ptr -> i256
    %c32_i64 = arith.constant 32 : i64
    %c0_i64_10 = arith.constant 0 : i64
    %38 = arith.cmpi ne, %c32_i64, %c0_i64_10 : i64
    cf.cond_br %38, ^bb33, ^bb12
  ^bb12:  // 2 preds: ^bb11, ^bb37
    %39 = arith.trunci %33 : i256 to i64
    %40 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    %41 = llvm.load %40 : !llvm.ptr -> !llvm.ptr
    %42 = llvm.getelementptr %41[%39] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %43 = llvm.intr.bswap(%37)  : (i256) -> i256
    llvm.store %43, %42 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb18
  ^bb13:  // pred: ^bb15
    %c1024_i64_11 = arith.constant 1024 : i64
    %44 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-2_i64 = arith.constant -2 : i64
    %45 = arith.addi %44, %c-2_i64 : i64
    %c2_i64 = arith.constant 2 : i64
    %46 = arith.cmpi ult, %44, %c2_i64 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %46, ^bb1(%c91_i8 : i8), ^bb11
  ^bb14:  // pred: ^bb7
    %47 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %48 = llvm.load %47 : !llvm.ptr -> i64
    %c3_i64_12 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %49 = arith.cmpi uge, %48, %c3_i64_12 : i64
    %c80_i8_13 = arith.constant 80 : i8
    cf.cond_br %49, ^bb15, ^bb1(%c80_i8_13 : i8)
  ^bb15:  // pred: ^bb14
    %50 = arith.subi %48, %c3_i64_12 : i64
    llvm.store %50, %47 : i64, !llvm.ptr
    cf.br ^bb13
  ^bb16:  // pred: ^bb17
    %c2_i256 = arith.constant 2 : i256
    %51 = llvm.load %arg3 : !llvm.ptr -> i64
    %52 = llvm.getelementptr %arg2[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_14 = arith.constant 1 : i64
    %53 = arith.addi %51, %c1_i64_14 : i64
    llvm.store %53, %arg3 : i64, !llvm.ptr
    llvm.store %c2_i256, %52 : i256, !llvm.ptr
    cf.br ^bb22
  ^bb17:  // pred: ^bb19
    %c1024_i64_15 = arith.constant 1024 : i64
    %54 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_16 = arith.constant 1 : i64
    %55 = arith.addi %54, %c1_i64_16 : i64
    %56 = arith.cmpi ult, %c1024_i64_15, %55 : i64
    %c92_i8_17 = arith.constant 92 : i8
    cf.cond_br %56, ^bb1(%c92_i8_17 : i8), ^bb16
  ^bb18:  // pred: ^bb12
    %57 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %58 = llvm.load %57 : !llvm.ptr -> i64
    %c3_i64_18 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %59 = arith.cmpi uge, %58, %c3_i64_18 : i64
    %c80_i8_19 = arith.constant 80 : i8
    cf.cond_br %59, ^bb19, ^bb1(%c80_i8_19 : i8)
  ^bb19:  // pred: ^bb18
    %60 = arith.subi %58, %c3_i64_18 : i64
    llvm.store %60, %57 : i64, !llvm.ptr
    cf.br ^bb17
  ^bb20:  // pred: ^bb21
    %c0_i256_20 = arith.constant 0 : i256
    %61 = llvm.load %arg3 : !llvm.ptr -> i64
    %62 = llvm.getelementptr %arg2[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_21 = arith.constant 1 : i64
    %63 = arith.addi %61, %c1_i64_21 : i64
    llvm.store %63, %arg3 : i64, !llvm.ptr
    llvm.store %c0_i256_20, %62 : i256, !llvm.ptr
    cf.br ^bb30
  ^bb21:  // pred: ^bb23
    %c1024_i64_22 = arith.constant 1024 : i64
    %64 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_23 = arith.constant 1 : i64
    %65 = arith.addi %64, %c1_i64_23 : i64
    %66 = arith.cmpi ult, %c1024_i64_22, %65 : i64
    %c92_i8_24 = arith.constant 92 : i8
    cf.cond_br %66, ^bb1(%c92_i8_24 : i8), ^bb20
  ^bb22:  // pred: ^bb16
    %67 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %68 = llvm.load %67 : !llvm.ptr -> i64
    %c3_i64_25 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %69 = arith.cmpi uge, %68, %c3_i64_25 : i64
    %c80_i8_26 = arith.constant 80 : i8
    cf.cond_br %69, ^bb23, ^bb1(%c80_i8_26 : i8)
  ^bb23:  // pred: ^bb22
    %70 = arith.subi %68, %c3_i64_25 : i64
    llvm.store %70, %67 : i64, !llvm.ptr
    cf.br ^bb21
  ^bb24:  // pred: ^bb29
    %71 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_27 = arith.constant 1 : i64
    %72 = arith.subi %71, %c1_i64_27 : i64
    %73 = llvm.getelementptr %arg2[%72] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %72, %arg3 : i64, !llvm.ptr
    %74 = llvm.load %73 : !llvm.ptr -> i256
    %75 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_28 = arith.constant 1 : i64
    %76 = arith.subi %75, %c1_i64_28 : i64
    %77 = llvm.getelementptr %arg2[%76] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %76, %arg3 : i64, !llvm.ptr
    %78 = llvm.load %77 : !llvm.ptr -> i256
    %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256
    %79 = arith.cmpi sgt, %78, %c18446744073709551615_i256 : i256
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %79, ^bb1(%c84_i8 : i8), ^bb25
  ^bb25:  // pred: ^bb24
    %80 = arith.trunci %78 : i256 to i64
    %c0_i64_29 = arith.constant 0 : i64
    %81 = arith.cmpi slt, %80, %c0_i64_29 : i64
    %c84_i8_30 = arith.constant 84 : i8
    cf.cond_br %81, ^bb1(%c84_i8_30 : i8), ^bb26
  ^bb26:  // pred: ^bb25
    %c0_i64_31 = arith.constant 0 : i64
    %82 = arith.cmpi ne, %80, %c0_i64_31 : i64
    cf.cond_br %82, ^bb41, ^bb27
  ^bb27:  // 2 preds: ^bb26, ^bb45
    %c0_i8 = arith.constant 0 : i8
    %83 = arith.trunci %74 : i256 to i64
    %84 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %85 = llvm.load %84 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %83, %80, %85, %c0_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c0_i8 : i8
  ^bb28:  // no predecessors
    cf.br ^bb32
  ^bb29:  // pred: ^bb31
    %c1024_i64_32 = arith.constant 1024 : i64
    %86 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-2_i64_33 = arith.constant -2 : i64
    %87 = arith.addi %86, %c-2_i64_33 : i64
    %c2_i64_34 = arith.constant 2 : i64
    %88 = arith.cmpi ult, %86, %c2_i64_34 : i64
    %c91_i8_35 = arith.constant 91 : i8
    cf.cond_br %88, ^bb1(%c91_i8_35 : i8), ^bb24
  ^bb30:  // pred: ^bb20
    %89 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %90 = llvm.load %89 : !llvm.ptr -> i64
    %c0_i64_36 = arith.constant 0 : i64
    call @dora_fn_nop() : () -> ()
    %91 = arith.cmpi uge, %90, %c0_i64_36 : i64
    %c80_i8_37 = arith.constant 80 : i8
    cf.cond_br %91, ^bb31, ^bb1(%c80_i8_37 : i8)
  ^bb31:  // pred: ^bb30
    %92 = arith.subi %90, %c0_i64_36 : i64
    llvm.store %92, %89 : i64, !llvm.ptr
    cf.br ^bb29
  ^bb32:  // pred: ^bb28
    %c0_i64_38 = arith.constant 0 : i64
    %c1_i8 = arith.constant 1 : i8
    %93 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %94 = llvm.load %93 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_38, %c0_i64_38, %94, %c1_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c1_i8 : i8
  ^bb33:  // pred: ^bb11
    %c18446744073709551615_i256_39 = arith.constant 18446744073709551615 : i256
    %95 = arith.cmpi sgt, %33, %c18446744073709551615_i256_39 : i256
    %c84_i8_40 = arith.constant 84 : i8
    cf.cond_br %95, ^bb1(%c84_i8_40 : i8), ^bb34
  ^bb34:  // pred: ^bb33
    %96 = arith.trunci %33 : i256 to i64
    %c0_i64_41 = arith.constant 0 : i64
    %97 = arith.cmpi slt, %96, %c0_i64_41 : i64
    %c84_i8_42 = arith.constant 84 : i8
    cf.cond_br %97, ^bb1(%c84_i8_42 : i8), ^bb35
  ^bb35:  // pred: ^bb34
    %98 = arith.addi %96, %c32_i64 : i64
    %c0_i64_43 = arith.constant 0 : i64
    %99 = arith.cmpi slt, %98, %c0_i64_43 : i64
    %c84_i8_44 = arith.constant 84 : i8
    cf.cond_br %99, ^bb1(%c84_i8_44 : i8), ^bb36
  ^bb36:  // pred: ^bb35
    %c31_i64 = arith.constant 31 : i64
    %c32_i64_45 = arith.constant 32 : i64
    %100 = arith.addi %98, %c31_i64 : i64
    %101 = arith.divui %100, %c32_i64_45 : i64
    %c32_i64_46 = arith.constant 32 : i64
    %102 = arith.muli %101, %c32_i64_46 : i64
    %103 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    %104 = llvm.load %103 : !llvm.ptr -> i64
    %c31_i64_47 = arith.constant 31 : i64
    %c32_i64_48 = arith.constant 32 : i64
    %105 = arith.addi %104, %c31_i64_47 : i64
    %106 = arith.divui %105, %c32_i64_48 : i64
    %107 = arith.muli %106, %c32_i64_46 : i64
    %108 = arith.cmpi ult, %107, %102 : i64
    cf.cond_br %108, ^bb38, ^bb37
  ^bb37:  // 2 preds: ^bb36, ^bb40
    cf.br ^bb12
  ^bb38:  // pred: ^bb36
    %c3_i64_49 = arith.constant 3 : i64
    %c512_i64 = arith.constant 512 : i64
    %109 = arith.muli %106, %106 : i64
    %110 = arith.divui %109, %c512_i64 : i64
    %111 = arith.muli %106, %c3_i64_49 : i64
    %112 = arith.addi %110, %111 : i64
    %c3_i64_50 = arith.constant 3 : i64
    %c512_i64_51 = arith.constant 512 : i64
    %113 = arith.muli %101, %101 : i64
    %114 = arith.divui %113, %c512_i64_51 : i64
    %115 = arith.muli %101, %c3_i64_50 : i64
    %116 = arith.addi %114, %115 : i64
    %117 = arith.subi %116, %112 : i64
    %118 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %119 = llvm.load %118 : !llvm.ptr -> i64
    %120 = arith.cmpi ult, %119, %117 : i64
    scf.if %120 {
    } else {
      %163 = arith.subi %119, %117 : i64
      llvm.store %163, %118 : i64, !llvm.ptr
    }
    %c80_i8_52 = arith.constant 80 : i8
    cf.cond_br %120, ^bb1(%c80_i8_52 : i8), ^bb39
  ^bb39:  // pred: ^bb38
    %121 = call @dora_fn_extend_memory(%arg0, %102) : (!llvm.ptr, i64) -> !llvm.ptr
    %122 = llvm.getelementptr %121[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %123 = llvm.load %122 : !llvm.ptr -> !llvm.ptr
    %124 = llvm.getelementptr %121[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %125 = llvm.load %124 : !llvm.ptr -> i8
    %c0_i8_53 = arith.constant 0 : i8
    %126 = arith.cmpi ne, %125, %c0_i8_53 : i8
    cf.cond_br %126, ^bb1(%125 : i8), ^bb40
  ^bb40:  // pred: ^bb39
    %127 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    llvm.store %123, %127 : !llvm.ptr, !llvm.ptr
    %128 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %102, %128 : i64, !llvm.ptr
    cf.br ^bb37
  ^bb41:  // pred: ^bb26
    %c18446744073709551615_i256_54 = arith.constant 18446744073709551615 : i256
    %129 = arith.cmpi sgt, %74, %c18446744073709551615_i256_54 : i256
    %c84_i8_55 = arith.constant 84 : i8
    cf.cond_br %129, ^bb1(%c84_i8_55 : i8), ^bb42
  ^bb42:  // pred: ^bb41
    %130 = arith.trunci %74 : i256 to i64
    %c0_i64_56 = arith.constant 0 : i64
    %131 = arith.cmpi slt, %130, %c0_i64_56 : i64
    %c84_i8_57 = arith.constant 84 : i8
    cf.cond_br %131, ^bb1(%c84_i8_57 : i8), ^bb43
  ^bb43:  // pred: ^bb42
    %132 = arith.addi %130, %80 : i64
    %c0_i64_58 = arith.constant 0 : i64
    %133 = arith.cmpi slt, %132, %c0_i64_58 : i64
    %c84_i8_59 = arith.constant 84 : i8
    cf.cond_br %133, ^bb1(%c84_i8_59 : i8), ^bb44
  ^bb44:  // pred: ^bb43
    %c31_i64_60 = arith.constant 31 : i64
    %c32_i64_61 = arith.constant 32 : i64
    %134 = arith.addi %132, %c31_i64_60 : i64
    %135 = arith.divui %134, %c32_i64_61 : i64
    %c32_i64_62 = arith.constant 32 : i64
    %136 = arith.muli %135, %c32_i64_62 : i64
    %137 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    %138 = llvm.load %137 : !llvm.ptr -> i64
    %c31_i64_63 = arith.constant 31 : i64
    %c32_i64_64 = arith.constant 32 : i64
    %139 = arith.addi %138, %c31_i64_63 : i64
    %140 = arith.divui %139, %c32_i64_64 : i64
    %141 = arith.muli %140, %c32_i64_62 : i64
    %142 = arith.cmpi ult, %141, %136 : i64
    cf.cond_br %142, ^bb46, ^bb45
  ^bb45:  // 2 preds: ^bb44, ^bb48
    cf.br ^bb27
  ^bb46:  // pred: ^bb44
    %c3_i64_65 = arith.constant 3 : i64
    %c512_i64_66 = arith.constant 512 : i64
    %143 = arith.muli %140, %140 : i64
    %144 = arith.divui %143, %c512_i64_66 : i64
    %145 = arith.muli %140, %c3_i64_65 : i64
    %146 = arith.addi %144, %145 : i64
    %c3_i64_67 = arith.constant 3 : i64
    %c512_i64_68 = arith.constant 512 : i64
    %147 = arith.muli %135, %135 : i64
    %148 = arith.divui %147, %c512_i64_68 : i64
    %149 = arith.muli %135, %c3_i64_67 : i64
    %150 = arith.addi %148, %149 : i64
    %151 = arith.subi %150, %146 : i64
    %152 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %153 = llvm.load %152 : !llvm.ptr -> i64
    %154 = arith.cmpi ult, %153, %151 : i64
    scf.if %154 {
    } else {
      %163 = arith.subi %153, %151 : i64
      llvm.store %163, %152 : i64, !llvm.ptr
    }
    %c80_i8_69 = arith.constant 80 : i8
    cf.cond_br %154, ^bb1(%c80_i8_69 : i8), ^bb47
  ^bb47:  // pred: ^bb46
    %155 = call @dora_fn_extend_memory(%arg0, %136) : (!llvm.ptr, i64) -> !llvm.ptr
    %156 = llvm.getelementptr %155[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %157 = llvm.load %156 : !llvm.ptr -> !llvm.ptr
    %158 = llvm.getelementptr %155[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %159 = llvm.load %158 : !llvm.ptr -> i8
    %c0_i8_70 = arith.constant 0 : i8
    %160 = arith.cmpi ne, %159, %c0_i8_70 : i8
    cf.cond_br %160, ^bb1(%159 : i8), ^bb48
  ^bb48:  // pred: ^bb47
    %161 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    llvm.store %157, %161 : !llvm.ptr, !llvm.ptr
    %162 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %136, %162 : i64, !llvm.ptr
    cf.br ^bb45
  }
}
