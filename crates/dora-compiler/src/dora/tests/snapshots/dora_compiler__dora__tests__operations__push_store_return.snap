---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  llvm.mlir.global internal @dora_global_memory_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_memory_size() {addr_space = 0 : i32} : i64
  func.func private @dora_fn_nop()
  func.func private @dora_fn_tracing(!llvm.ptr, i8, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_fn_is_static(!llvm.ptr) -> i8
  func.func private @dora_fn_exp(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_chainid(!llvm.ptr) -> i64
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gaslimit_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_code_copy(!llvm.ptr, !llvm.ptr, i64, i64)
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_call(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_returndata_copy(!llvm.ptr, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_tload(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_tstore(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func public @main(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr) -> i8 attributes {llvm.emit_c_interface} {
    %c0_i64 = arith.constant 0 : i64
    %0 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %c0_i64, %0 : i64, !llvm.ptr
    cf.br ^bb5
  ^bb1(%1: i8):  // 25 preds: ^bb2, ^bb4, ^bb5, ^bb8, ^bb9, ^bb13, ^bb14, ^bb17, ^bb18, ^bb21, ^bb22, ^bb24, ^bb25, ^bb29, ^bb30, ^bb33, ^bb34, ^bb35, ^bb38, ^bb39, ^bb41, ^bb42, ^bb43, ^bb46, ^bb47
    %c0_i64_0 = arith.constant 0 : i64
    %2 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_0, %c0_i64_0, %2, %1) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %1 : i8
  ^bb2(%3: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %3 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3:  // pred: ^bb4
    %c26855045751621412909479635801631599578944495011106431764815136423936_i256 = arith.constant 26855045751621412909479635801631599578944495011106431764815136423936 : i256
    %4 = llvm.load %arg3 : !llvm.ptr -> i64
    %5 = llvm.getelementptr %arg2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64 = arith.constant 1 : i64
    %6 = arith.addi %4, %c1_i64 : i64
    llvm.store %6, %arg3 : i64, !llvm.ptr
    llvm.store %c26855045751621412909479635801631599578944495011106431764815136423936_i256, %5 : i256, !llvm.ptr
    cf.br ^bb9
  ^bb4:  // pred: ^bb6
    %c1024_i64 = arith.constant 1024 : i64
    %7 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_1 = arith.constant 1 : i64
    %8 = arith.addi %7, %c1_i64_1 : i64
    %9 = arith.cmpi ult, %c1024_i64, %8 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %9, ^bb1(%c92_i8 : i8), ^bb3
  ^bb5:  // pred: ^bb0
    %10 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %11 = arith.cmpi uge, %10, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %11, ^bb6, ^bb1(%c80_i8 : i8)
  ^bb6:  // pred: ^bb5
    %12 = arith.subi %10, %c3_i64 : i64
    llvm.store %12, %arg1 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb7:  // pred: ^bb8
    %c0_i256 = arith.constant 0 : i256
    %13 = llvm.load %arg3 : !llvm.ptr -> i64
    %14 = llvm.getelementptr %arg2[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_2 = arith.constant 1 : i64
    %15 = arith.addi %13, %c1_i64_2 : i64
    llvm.store %15, %arg3 : i64, !llvm.ptr
    llvm.store %c0_i256, %14 : i256, !llvm.ptr
    cf.br ^bb14
  ^bb8:  // pred: ^bb10
    %c1024_i64_3 = arith.constant 1024 : i64
    %16 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_4 = arith.constant 1 : i64
    %17 = arith.addi %16, %c1_i64_4 : i64
    %18 = arith.cmpi ult, %c1024_i64_3, %17 : i64
    %c92_i8_5 = arith.constant 92 : i8
    cf.cond_br %18, ^bb1(%c92_i8_5 : i8), ^bb7
  ^bb9:  // pred: ^bb3
    %19 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_6 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %20 = arith.cmpi uge, %19, %c3_i64_6 : i64
    %c80_i8_7 = arith.constant 80 : i8
    cf.cond_br %20, ^bb10, ^bb1(%c80_i8_7 : i8)
  ^bb10:  // pred: ^bb9
    %21 = arith.subi %19, %c3_i64_6 : i64
    llvm.store %21, %arg1 : i64, !llvm.ptr
    cf.br ^bb8
  ^bb11:  // pred: ^bb13
    %22 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_8 = arith.constant 1 : i64
    %23 = arith.subi %22, %c1_i64_8 : i64
    %24 = llvm.getelementptr %arg2[%23] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %23, %arg3 : i64, !llvm.ptr
    %25 = llvm.load %24 : !llvm.ptr -> i256
    %26 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_9 = arith.constant 1 : i64
    %27 = arith.subi %26, %c1_i64_9 : i64
    %28 = llvm.getelementptr %arg2[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %27, %arg3 : i64, !llvm.ptr
    %29 = llvm.load %28 : !llvm.ptr -> i256
    %c32_i64 = arith.constant 32 : i64
    %c0_i64_10 = arith.constant 0 : i64
    %30 = arith.cmpi ne, %c32_i64, %c0_i64_10 : i64
    cf.cond_br %30, ^bb33, ^bb12
  ^bb12:  // 2 preds: ^bb11, ^bb37
    %31 = arith.trunci %25 : i256 to i64
    %32 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    %33 = llvm.load %32 : !llvm.ptr -> !llvm.ptr
    %34 = llvm.getelementptr %33[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %35 = llvm.intr.bswap(%29)  : (i256) -> i256
    llvm.store %35, %34 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb18
  ^bb13:  // pred: ^bb15
    %c1024_i64_11 = arith.constant 1024 : i64
    %36 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-2_i64 = arith.constant -2 : i64
    %37 = arith.addi %36, %c-2_i64 : i64
    %c2_i64 = arith.constant 2 : i64
    %38 = arith.cmpi ult, %36, %c2_i64 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %38, ^bb1(%c91_i8 : i8), ^bb11
  ^bb14:  // pred: ^bb7
    %39 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_12 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %40 = arith.cmpi uge, %39, %c3_i64_12 : i64
    %c80_i8_13 = arith.constant 80 : i8
    cf.cond_br %40, ^bb15, ^bb1(%c80_i8_13 : i8)
  ^bb15:  // pred: ^bb14
    %41 = arith.subi %39, %c3_i64_12 : i64
    llvm.store %41, %arg1 : i64, !llvm.ptr
    cf.br ^bb13
  ^bb16:  // pred: ^bb17
    %c2_i256 = arith.constant 2 : i256
    %42 = llvm.load %arg3 : !llvm.ptr -> i64
    %43 = llvm.getelementptr %arg2[%42] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_14 = arith.constant 1 : i64
    %44 = arith.addi %42, %c1_i64_14 : i64
    llvm.store %44, %arg3 : i64, !llvm.ptr
    llvm.store %c2_i256, %43 : i256, !llvm.ptr
    cf.br ^bb22
  ^bb17:  // pred: ^bb19
    %c1024_i64_15 = arith.constant 1024 : i64
    %45 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_16 = arith.constant 1 : i64
    %46 = arith.addi %45, %c1_i64_16 : i64
    %47 = arith.cmpi ult, %c1024_i64_15, %46 : i64
    %c92_i8_17 = arith.constant 92 : i8
    cf.cond_br %47, ^bb1(%c92_i8_17 : i8), ^bb16
  ^bb18:  // pred: ^bb12
    %48 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_18 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %49 = arith.cmpi uge, %48, %c3_i64_18 : i64
    %c80_i8_19 = arith.constant 80 : i8
    cf.cond_br %49, ^bb19, ^bb1(%c80_i8_19 : i8)
  ^bb19:  // pred: ^bb18
    %50 = arith.subi %48, %c3_i64_18 : i64
    llvm.store %50, %arg1 : i64, !llvm.ptr
    cf.br ^bb17
  ^bb20:  // pred: ^bb21
    %c0_i256_20 = arith.constant 0 : i256
    %51 = llvm.load %arg3 : !llvm.ptr -> i64
    %52 = llvm.getelementptr %arg2[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_21 = arith.constant 1 : i64
    %53 = arith.addi %51, %c1_i64_21 : i64
    llvm.store %53, %arg3 : i64, !llvm.ptr
    llvm.store %c0_i256_20, %52 : i256, !llvm.ptr
    cf.br ^bb30
  ^bb21:  // pred: ^bb23
    %c1024_i64_22 = arith.constant 1024 : i64
    %54 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_23 = arith.constant 1 : i64
    %55 = arith.addi %54, %c1_i64_23 : i64
    %56 = arith.cmpi ult, %c1024_i64_22, %55 : i64
    %c92_i8_24 = arith.constant 92 : i8
    cf.cond_br %56, ^bb1(%c92_i8_24 : i8), ^bb20
  ^bb22:  // pred: ^bb16
    %57 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_25 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %58 = arith.cmpi uge, %57, %c3_i64_25 : i64
    %c80_i8_26 = arith.constant 80 : i8
    cf.cond_br %58, ^bb23, ^bb1(%c80_i8_26 : i8)
  ^bb23:  // pred: ^bb22
    %59 = arith.subi %57, %c3_i64_25 : i64
    llvm.store %59, %arg1 : i64, !llvm.ptr
    cf.br ^bb21
  ^bb24:  // pred: ^bb29
    %60 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_27 = arith.constant 1 : i64
    %61 = arith.subi %60, %c1_i64_27 : i64
    %62 = llvm.getelementptr %arg2[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %61, %arg3 : i64, !llvm.ptr
    %63 = llvm.load %62 : !llvm.ptr -> i256
    %64 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_28 = arith.constant 1 : i64
    %65 = arith.subi %64, %c1_i64_28 : i64
    %66 = llvm.getelementptr %arg2[%65] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %65, %arg3 : i64, !llvm.ptr
    %67 = llvm.load %66 : !llvm.ptr -> i256
    %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256
    %68 = arith.cmpi sgt, %67, %c18446744073709551615_i256 : i256
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %68, ^bb1(%c84_i8 : i8), ^bb25
  ^bb25:  // pred: ^bb24
    %69 = arith.trunci %67 : i256 to i64
    %c0_i64_29 = arith.constant 0 : i64
    %70 = arith.cmpi slt, %69, %c0_i64_29 : i64
    %c84_i8_30 = arith.constant 84 : i8
    cf.cond_br %70, ^bb1(%c84_i8_30 : i8), ^bb26
  ^bb26:  // pred: ^bb25
    %c0_i64_31 = arith.constant 0 : i64
    %71 = arith.cmpi ne, %69, %c0_i64_31 : i64
    cf.cond_br %71, ^bb41, ^bb27
  ^bb27:  // 2 preds: ^bb26, ^bb45
    %c0_i8 = arith.constant 0 : i8
    %72 = arith.trunci %63 : i256 to i64
    %73 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %72, %69, %73, %c0_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c0_i8 : i8
  ^bb28:  // no predecessors
    cf.br ^bb32
  ^bb29:  // pred: ^bb31
    %c1024_i64_32 = arith.constant 1024 : i64
    %74 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-2_i64_33 = arith.constant -2 : i64
    %75 = arith.addi %74, %c-2_i64_33 : i64
    %c2_i64_34 = arith.constant 2 : i64
    %76 = arith.cmpi ult, %74, %c2_i64_34 : i64
    %c91_i8_35 = arith.constant 91 : i8
    cf.cond_br %76, ^bb1(%c91_i8_35 : i8), ^bb24
  ^bb30:  // pred: ^bb20
    %77 = llvm.load %arg1 : !llvm.ptr -> i64
    %c0_i64_36 = arith.constant 0 : i64
    call @dora_fn_nop() : () -> ()
    %78 = arith.cmpi uge, %77, %c0_i64_36 : i64
    %c80_i8_37 = arith.constant 80 : i8
    cf.cond_br %78, ^bb31, ^bb1(%c80_i8_37 : i8)
  ^bb31:  // pred: ^bb30
    %79 = arith.subi %77, %c0_i64_36 : i64
    llvm.store %79, %arg1 : i64, !llvm.ptr
    cf.br ^bb29
  ^bb32:  // pred: ^bb28
    %c0_i64_38 = arith.constant 0 : i64
    %c1_i8 = arith.constant 1 : i8
    %80 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_38, %c0_i64_38, %80, %c1_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c1_i8 : i8
  ^bb33:  // pred: ^bb11
    %c18446744073709551615_i256_39 = arith.constant 18446744073709551615 : i256
    %81 = arith.cmpi sgt, %25, %c18446744073709551615_i256_39 : i256
    %c84_i8_40 = arith.constant 84 : i8
    cf.cond_br %81, ^bb1(%c84_i8_40 : i8), ^bb34
  ^bb34:  // pred: ^bb33
    %82 = arith.trunci %25 : i256 to i64
    %c0_i64_41 = arith.constant 0 : i64
    %83 = arith.cmpi slt, %82, %c0_i64_41 : i64
    %c84_i8_42 = arith.constant 84 : i8
    cf.cond_br %83, ^bb1(%c84_i8_42 : i8), ^bb35
  ^bb35:  // pred: ^bb34
    %84 = arith.addi %82, %c32_i64 : i64
    %c0_i64_43 = arith.constant 0 : i64
    %85 = arith.cmpi slt, %84, %c0_i64_43 : i64
    %c84_i8_44 = arith.constant 84 : i8
    cf.cond_br %85, ^bb1(%c84_i8_44 : i8), ^bb36
  ^bb36:  // pred: ^bb35
    %c31_i64 = arith.constant 31 : i64
    %c32_i64_45 = arith.constant 32 : i64
    %86 = arith.addi %84, %c31_i64 : i64
    %87 = arith.divui %86, %c32_i64_45 : i64
    %c32_i64_46 = arith.constant 32 : i64
    %88 = arith.muli %87, %c32_i64_46 : i64
    %89 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    %90 = llvm.load %89 : !llvm.ptr -> i64
    %c31_i64_47 = arith.constant 31 : i64
    %c32_i64_48 = arith.constant 32 : i64
    %91 = arith.addi %90, %c31_i64_47 : i64
    %92 = arith.divui %91, %c32_i64_48 : i64
    %93 = arith.muli %92, %c32_i64_46 : i64
    %94 = arith.cmpi ult, %93, %88 : i64
    cf.cond_br %94, ^bb38, ^bb37
  ^bb37:  // 2 preds: ^bb36, ^bb40
    cf.br ^bb12
  ^bb38:  // pred: ^bb36
    %c3_i64_49 = arith.constant 3 : i64
    %c512_i64 = arith.constant 512 : i64
    %95 = arith.muli %92, %92 : i64
    %96 = arith.divui %95, %c512_i64 : i64
    %97 = arith.muli %92, %c3_i64_49 : i64
    %98 = arith.addi %96, %97 : i64
    %c3_i64_50 = arith.constant 3 : i64
    %c512_i64_51 = arith.constant 512 : i64
    %99 = arith.muli %87, %87 : i64
    %100 = arith.divui %99, %c512_i64_51 : i64
    %101 = arith.muli %87, %c3_i64_50 : i64
    %102 = arith.addi %100, %101 : i64
    %103 = arith.subi %102, %98 : i64
    %104 = llvm.load %arg1 : !llvm.ptr -> i64
    %105 = arith.cmpi ult, %104, %103 : i64
    scf.if %105 {
    } else {
      %147 = arith.subi %104, %103 : i64
      llvm.store %147, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_52 = arith.constant 80 : i8
    cf.cond_br %105, ^bb1(%c80_i8_52 : i8), ^bb39
  ^bb39:  // pred: ^bb38
    %106 = call @dora_fn_extend_memory(%arg0, %88) : (!llvm.ptr, i64) -> !llvm.ptr
    %107 = llvm.getelementptr %106[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %108 = llvm.load %107 : !llvm.ptr -> !llvm.ptr
    %109 = llvm.getelementptr %106[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %110 = llvm.load %109 : !llvm.ptr -> i8
    %c0_i8_53 = arith.constant 0 : i8
    %111 = arith.cmpi ne, %110, %c0_i8_53 : i8
    cf.cond_br %111, ^bb1(%110 : i8), ^bb40
  ^bb40:  // pred: ^bb39
    %112 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    llvm.store %108, %112 : !llvm.ptr, !llvm.ptr
    %113 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %88, %113 : i64, !llvm.ptr
    cf.br ^bb37
  ^bb41:  // pred: ^bb26
    %c18446744073709551615_i256_54 = arith.constant 18446744073709551615 : i256
    %114 = arith.cmpi sgt, %63, %c18446744073709551615_i256_54 : i256
    %c84_i8_55 = arith.constant 84 : i8
    cf.cond_br %114, ^bb1(%c84_i8_55 : i8), ^bb42
  ^bb42:  // pred: ^bb41
    %115 = arith.trunci %63 : i256 to i64
    %c0_i64_56 = arith.constant 0 : i64
    %116 = arith.cmpi slt, %115, %c0_i64_56 : i64
    %c84_i8_57 = arith.constant 84 : i8
    cf.cond_br %116, ^bb1(%c84_i8_57 : i8), ^bb43
  ^bb43:  // pred: ^bb42
    %117 = arith.addi %115, %69 : i64
    %c0_i64_58 = arith.constant 0 : i64
    %118 = arith.cmpi slt, %117, %c0_i64_58 : i64
    %c84_i8_59 = arith.constant 84 : i8
    cf.cond_br %118, ^bb1(%c84_i8_59 : i8), ^bb44
  ^bb44:  // pred: ^bb43
    %c31_i64_60 = arith.constant 31 : i64
    %c32_i64_61 = arith.constant 32 : i64
    %119 = arith.addi %117, %c31_i64_60 : i64
    %120 = arith.divui %119, %c32_i64_61 : i64
    %c32_i64_62 = arith.constant 32 : i64
    %121 = arith.muli %120, %c32_i64_62 : i64
    %122 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    %123 = llvm.load %122 : !llvm.ptr -> i64
    %c31_i64_63 = arith.constant 31 : i64
    %c32_i64_64 = arith.constant 32 : i64
    %124 = arith.addi %123, %c31_i64_63 : i64
    %125 = arith.divui %124, %c32_i64_64 : i64
    %126 = arith.muli %125, %c32_i64_62 : i64
    %127 = arith.cmpi ult, %126, %121 : i64
    cf.cond_br %127, ^bb46, ^bb45
  ^bb45:  // 2 preds: ^bb44, ^bb48
    cf.br ^bb27
  ^bb46:  // pred: ^bb44
    %c3_i64_65 = arith.constant 3 : i64
    %c512_i64_66 = arith.constant 512 : i64
    %128 = arith.muli %125, %125 : i64
    %129 = arith.divui %128, %c512_i64_66 : i64
    %130 = arith.muli %125, %c3_i64_65 : i64
    %131 = arith.addi %129, %130 : i64
    %c3_i64_67 = arith.constant 3 : i64
    %c512_i64_68 = arith.constant 512 : i64
    %132 = arith.muli %120, %120 : i64
    %133 = arith.divui %132, %c512_i64_68 : i64
    %134 = arith.muli %120, %c3_i64_67 : i64
    %135 = arith.addi %133, %134 : i64
    %136 = arith.subi %135, %131 : i64
    %137 = llvm.load %arg1 : !llvm.ptr -> i64
    %138 = arith.cmpi ult, %137, %136 : i64
    scf.if %138 {
    } else {
      %147 = arith.subi %137, %136 : i64
      llvm.store %147, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_69 = arith.constant 80 : i8
    cf.cond_br %138, ^bb1(%c80_i8_69 : i8), ^bb47
  ^bb47:  // pred: ^bb46
    %139 = call @dora_fn_extend_memory(%arg0, %121) : (!llvm.ptr, i64) -> !llvm.ptr
    %140 = llvm.getelementptr %139[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %141 = llvm.load %140 : !llvm.ptr -> !llvm.ptr
    %142 = llvm.getelementptr %139[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %143 = llvm.load %142 : !llvm.ptr -> i8
    %c0_i8_70 = arith.constant 0 : i8
    %144 = arith.cmpi ne, %143, %c0_i8_70 : i8
    cf.cond_br %144, ^bb1(%143 : i8), ^bb48
  ^bb48:  // pred: ^bb47
    %145 = llvm.mlir.addressof @dora_global_memory_ptr : !llvm.ptr
    llvm.store %141, %145 : !llvm.ptr, !llvm.ptr
    %146 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %121, %146 : i64, !llvm.ptr
    cf.br ^bb45
  }
}
