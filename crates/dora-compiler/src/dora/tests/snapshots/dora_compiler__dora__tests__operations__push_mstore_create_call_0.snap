---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  func.func private @dora_fn_nop()
  func.func private @dora_fn_tracing(!llvm.ptr, i8, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_fn_is_static(!llvm.ptr) -> i8
  func.func private @dora_fn_exp(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_chainid(!llvm.ptr) -> i64
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gaslimit_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_memory_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_memory_size(!llvm.ptr) -> i64
  func.func private @dora_fn_code_copy(!llvm.ptr, !llvm.ptr, i64, i64)
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_call(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_returndata_copy(!llvm.ptr, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_tload(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_tstore(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func public @main(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr) -> i8 attributes {llvm.emit_c_interface} {
    %c0_i64 = arith.constant 0 : i64
    %0 = llvm.alloca %c0_i64 x !llvm.ptr : (i64) -> !llvm.ptr
    llvm.store %arg2, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb5
  ^bb1(%1: i8):  // 66 preds: ^bb2, ^bb4, ^bb5, ^bb8, ^bb9, ^bb13, ^bb14, ^bb17, ^bb18, ^bb21, ^bb22, ^bb25, ^bb26, ^bb28, ^bb29, ^bb30, ^bb32, ^bb33, ^bb34, ^bb36, ^bb37, ^bb40, ^bb41, ^bb44, ^bb45, ^bb48, ^bb49, ^bb52, ^bb53, ^bb56, ^bb57, ^bb60, ^bb61, ^bb64, ^bb65, ^bb67, ^bb68, ^bb69, ^bb71, ^bb72, ^bb74, ^bb75, ^bb77, ^bb78, ^bb81, ^bb82, ^bb83, ^bb86, ^bb87, ^bb89, ^bb90, ^bb91, ^bb92, ^bb93, ^bb96, ^bb97, ^bb99, ^bb100, ^bb101, ^bb104, ^bb105, ^bb107, ^bb108, ^bb109, ^bb112, ^bb113
    %c0_i64_0 = arith.constant 0 : i64
    %2 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_0, %c0_i64_0, %2, %1) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %1 : i8
  ^bb2(%3: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %3 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3:  // pred: ^bb4
    %c35176690763027899028215972788860354566387_i256 = arith.constant 35176690763027899028215972788860354566387 : i256
    %4 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c35176690763027899028215972788860354566387_i256, %4 : i256, !llvm.ptr
    %5 = llvm.getelementptr %4[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %5, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb9
  ^bb4:  // pred: ^bb6
    %c1024_i64 = arith.constant 1024 : i64
    %6 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %7 = arith.addi %6, %c1_i64 : i64
    llvm.store %7, %arg3 : i64, !llvm.ptr
    %8 = arith.cmpi ult, %c1024_i64, %7 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %8, ^bb1(%c92_i8 : i8), ^bb3
  ^bb5:  // pred: ^bb0
    %9 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %10 = arith.cmpi uge, %9, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %10, ^bb6, ^bb1(%c80_i8 : i8)
  ^bb6:  // pred: ^bb5
    %11 = arith.subi %9, %c3_i64 : i64
    llvm.store %11, %arg1 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb7:  // pred: ^bb8
    %c0_i256 = arith.constant 0 : i256
    %12 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256, %12 : i256, !llvm.ptr
    %13 = llvm.getelementptr %12[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %13, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb14
  ^bb8:  // pred: ^bb10
    %c1024_i64_1 = arith.constant 1024 : i64
    %14 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_2 = arith.constant 1 : i64
    %15 = arith.addi %14, %c1_i64_2 : i64
    llvm.store %15, %arg3 : i64, !llvm.ptr
    %16 = arith.cmpi ult, %c1024_i64_1, %15 : i64
    %c92_i8_3 = arith.constant 92 : i8
    cf.cond_br %16, ^bb1(%c92_i8_3 : i8), ^bb7
  ^bb9:  // pred: ^bb3
    %17 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_4 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %18 = arith.cmpi uge, %17, %c3_i64_4 : i64
    %c80_i8_5 = arith.constant 80 : i8
    cf.cond_br %18, ^bb10, ^bb1(%c80_i8_5 : i8)
  ^bb10:  // pred: ^bb9
    %19 = arith.subi %17, %c3_i64_4 : i64
    llvm.store %19, %arg1 : i64, !llvm.ptr
    cf.br ^bb8
  ^bb11:  // pred: ^bb13
    %20 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %21 = llvm.getelementptr %20[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %22 = llvm.load %21 : !llvm.ptr -> i256
    llvm.store %21, %0 : !llvm.ptr, !llvm.ptr
    %23 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %24 = llvm.getelementptr %23[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %25 = llvm.load %24 : !llvm.ptr -> i256
    llvm.store %24, %0 : !llvm.ptr, !llvm.ptr
    %c32_i64 = arith.constant 32 : i64
    %c0_i64_6 = arith.constant 0 : i64
    %26 = arith.cmpi ne, %c32_i64, %c0_i64_6 : i64
    cf.cond_br %26, ^bb81, ^bb12
  ^bb12:  // 2 preds: ^bb11, ^bb85
    %27 = arith.trunci %22 : i256 to i64
    %28 = call @dora_fn_memory_ptr(%arg0) : (!llvm.ptr) -> !llvm.ptr
    %29 = llvm.getelementptr %28[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %30 = llvm.intr.bswap(%25)  : (i256) -> i256
    llvm.store %30, %29 {alignment = 1 : i64} : i256, !llvm.ptr
    cf.br ^bb18
  ^bb13:  // pred: ^bb15
    %c1024_i64_7 = arith.constant 1024 : i64
    %31 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-2_i64 = arith.constant -2 : i64
    %32 = arith.addi %31, %c-2_i64 : i64
    llvm.store %32, %arg3 : i64, !llvm.ptr
    %c2_i64 = arith.constant 2 : i64
    %33 = arith.cmpi ult, %31, %c2_i64 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %33, ^bb1(%c91_i8 : i8), ^bb11
  ^bb14:  // pred: ^bb7
    %34 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_8 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %35 = arith.cmpi uge, %34, %c3_i64_8 : i64
    %c80_i8_9 = arith.constant 80 : i8
    cf.cond_br %35, ^bb15, ^bb1(%c80_i8_9 : i8)
  ^bb15:  // pred: ^bb14
    %36 = arith.subi %34, %c3_i64_8 : i64
    llvm.store %36, %arg1 : i64, !llvm.ptr
    cf.br ^bb13
  ^bb16:  // pred: ^bb17
    %c17_i256 = arith.constant 17 : i256
    %37 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c17_i256, %37 : i256, !llvm.ptr
    %38 = llvm.getelementptr %37[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %38, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb22
  ^bb17:  // pred: ^bb19
    %c1024_i64_10 = arith.constant 1024 : i64
    %39 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_11 = arith.constant 1 : i64
    %40 = arith.addi %39, %c1_i64_11 : i64
    llvm.store %40, %arg3 : i64, !llvm.ptr
    %41 = arith.cmpi ult, %c1024_i64_10, %40 : i64
    %c92_i8_12 = arith.constant 92 : i8
    cf.cond_br %41, ^bb1(%c92_i8_12 : i8), ^bb16
  ^bb18:  // pred: ^bb12
    %42 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_13 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %43 = arith.cmpi uge, %42, %c3_i64_13 : i64
    %c80_i8_14 = arith.constant 80 : i8
    cf.cond_br %43, ^bb19, ^bb1(%c80_i8_14 : i8)
  ^bb19:  // pred: ^bb18
    %44 = arith.subi %42, %c3_i64_13 : i64
    llvm.store %44, %arg1 : i64, !llvm.ptr
    cf.br ^bb17
  ^bb20:  // pred: ^bb21
    %c15_i256 = arith.constant 15 : i256
    %45 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c15_i256, %45 : i256, !llvm.ptr
    %46 = llvm.getelementptr %45[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %46, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb26
  ^bb21:  // pred: ^bb23
    %c1024_i64_15 = arith.constant 1024 : i64
    %47 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_16 = arith.constant 1 : i64
    %48 = arith.addi %47, %c1_i64_16 : i64
    llvm.store %48, %arg3 : i64, !llvm.ptr
    %49 = arith.cmpi ult, %c1024_i64_15, %48 : i64
    %c92_i8_17 = arith.constant 92 : i8
    cf.cond_br %49, ^bb1(%c92_i8_17 : i8), ^bb20
  ^bb22:  // pred: ^bb16
    %50 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_18 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %51 = arith.cmpi uge, %50, %c3_i64_18 : i64
    %c80_i8_19 = arith.constant 80 : i8
    cf.cond_br %51, ^bb23, ^bb1(%c80_i8_19 : i8)
  ^bb23:  // pred: ^bb22
    %52 = arith.subi %50, %c3_i64_18 : i64
    llvm.store %52, %arg1 : i64, !llvm.ptr
    cf.br ^bb21
  ^bb24:  // pred: ^bb25
    %c0_i256_20 = arith.constant 0 : i256
    %53 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_20, %53 : i256, !llvm.ptr
    %54 = llvm.getelementptr %53[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %54, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb37
  ^bb25:  // pred: ^bb27
    %c1024_i64_21 = arith.constant 1024 : i64
    %55 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_22 = arith.constant 1 : i64
    %56 = arith.addi %55, %c1_i64_22 : i64
    llvm.store %56, %arg3 : i64, !llvm.ptr
    %57 = arith.cmpi ult, %c1024_i64_21, %56 : i64
    %c92_i8_23 = arith.constant 92 : i8
    cf.cond_br %57, ^bb1(%c92_i8_23 : i8), ^bb24
  ^bb26:  // pred: ^bb20
    %58 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_24 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %59 = arith.cmpi uge, %58, %c3_i64_24 : i64
    %c80_i8_25 = arith.constant 80 : i8
    cf.cond_br %59, ^bb27, ^bb1(%c80_i8_25 : i8)
  ^bb27:  // pred: ^bb26
    %60 = arith.subi %58, %c3_i64_24 : i64
    llvm.store %60, %arg1 : i64, !llvm.ptr
    cf.br ^bb25
  ^bb28:  // pred: ^bb36
    %61 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %62 = llvm.getelementptr %61[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %63 = llvm.load %62 : !llvm.ptr -> i256
    llvm.store %62, %0 : !llvm.ptr, !llvm.ptr
    %64 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %65 = llvm.getelementptr %64[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %66 = llvm.load %65 : !llvm.ptr -> i256
    llvm.store %65, %0 : !llvm.ptr, !llvm.ptr
    %67 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %68 = llvm.getelementptr %67[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %69 = llvm.load %68 : !llvm.ptr -> i256
    llvm.store %68, %0 : !llvm.ptr, !llvm.ptr
    %70 = call @dora_fn_is_static(%arg0) : (!llvm.ptr) -> i8
    %c0_i8 = arith.constant 0 : i8
    %71 = arith.cmpi ne, %70, %c0_i8 : i8
    %c87_i8 = arith.constant 87 : i8
    cf.cond_br %71, ^bb1(%c87_i8 : i8), ^bb29
  ^bb29:  // pred: ^bb28
    %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256
    %72 = arith.cmpi sgt, %69, %c18446744073709551615_i256 : i256
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %72, ^bb1(%c84_i8 : i8), ^bb30
  ^bb30:  // pred: ^bb29
    %73 = arith.trunci %69 : i256 to i64
    %c0_i64_26 = arith.constant 0 : i64
    %74 = arith.cmpi slt, %73, %c0_i64_26 : i64
    %c84_i8_27 = arith.constant 84 : i8
    cf.cond_br %74, ^bb1(%c84_i8_27 : i8), ^bb31
  ^bb31:  // pred: ^bb30
    %c0_i64_28 = arith.constant 0 : i64
    %75 = arith.cmpi ne, %73, %c0_i64_28 : i64
    cf.cond_br %75, ^bb89, ^bb32
  ^bb32:  // 2 preds: ^bb31, ^bb95
    %c32000_i64 = arith.constant 32000 : i64
    %76 = llvm.load %arg1 : !llvm.ptr -> i64
    %77 = arith.cmpi ult, %76, %c32000_i64 : i64
    scf.if %77 {
    } else {
      %336 = arith.subi %76, %c32000_i64 : i64
      llvm.store %336, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_29 = arith.constant 80 : i8
    cf.cond_br %77, ^bb1(%c80_i8_29 : i8), ^bb33
  ^bb33:  // pred: ^bb32
    %c1_i256 = arith.constant 1 : i256
    %78 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %63, %78 {alignment = 1 : i64} : i256, !llvm.ptr
    %79 = llvm.load %arg1 : !llvm.ptr -> i64
    %80 = arith.trunci %66 : i256 to i64
    %81 = call @dora_fn_create(%arg0, %73, %80, %78, %79) : (!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
    %82 = llvm.getelementptr %81[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %83 = llvm.load %82 : !llvm.ptr -> i8
    %c0_i8_30 = arith.constant 0 : i8
    %84 = arith.cmpi ne, %83, %c0_i8_30 : i8
    cf.cond_br %84, ^bb1(%83 : i8), ^bb34
  ^bb34:  // pred: ^bb33
    %85 = llvm.getelementptr %81[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %86 = llvm.load %85 : !llvm.ptr -> i64
    %87 = llvm.load %arg1 : !llvm.ptr -> i64
    %88 = arith.cmpi ult, %87, %86 : i64
    scf.if %88 {
    } else {
      %336 = arith.subi %87, %86 : i64
      llvm.store %336, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_31 = arith.constant 80 : i8
    cf.cond_br %88, ^bb1(%c80_i8_31 : i8), ^bb35
  ^bb35:  // pred: ^bb34
    %89 = llvm.load %78 : !llvm.ptr -> i256
    %90 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %89, %90 : i256, !llvm.ptr
    %91 = llvm.getelementptr %90[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %91, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb41
  ^bb36:  // pred: ^bb38
    %c1024_i64_32 = arith.constant 1024 : i64
    %92 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-2_i64_33 = arith.constant -2 : i64
    %93 = arith.addi %92, %c-2_i64_33 : i64
    llvm.store %93, %arg3 : i64, !llvm.ptr
    %c3_i64_34 = arith.constant 3 : i64
    %94 = arith.cmpi ult, %92, %c3_i64_34 : i64
    %c91_i8_35 = arith.constant 91 : i8
    cf.cond_br %94, ^bb1(%c91_i8_35 : i8), ^bb28
  ^bb37:  // pred: ^bb24
    %95 = llvm.load %arg1 : !llvm.ptr -> i64
    %c0_i64_36 = arith.constant 0 : i64
    call @dora_fn_nop() : () -> ()
    %96 = arith.cmpi uge, %95, %c0_i64_36 : i64
    %c80_i8_37 = arith.constant 80 : i8
    cf.cond_br %96, ^bb38, ^bb1(%c80_i8_37 : i8)
  ^bb38:  // pred: ^bb37
    %97 = arith.subi %95, %c0_i64_36 : i64
    llvm.store %97, %arg1 : i64, !llvm.ptr
    cf.br ^bb36
  ^bb39:  // pred: ^bb40
    %c0_i256_38 = arith.constant 0 : i256
    %98 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_38, %98 : i256, !llvm.ptr
    %99 = llvm.getelementptr %98[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %99, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb45
  ^bb40:  // pred: ^bb42
    %c1024_i64_39 = arith.constant 1024 : i64
    %100 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_40 = arith.constant 1 : i64
    %101 = arith.addi %100, %c1_i64_40 : i64
    llvm.store %101, %arg3 : i64, !llvm.ptr
    %102 = arith.cmpi ult, %c1024_i64_39, %101 : i64
    %c92_i8_41 = arith.constant 92 : i8
    cf.cond_br %102, ^bb1(%c92_i8_41 : i8), ^bb39
  ^bb41:  // pred: ^bb35
    %103 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_42 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %104 = arith.cmpi uge, %103, %c3_i64_42 : i64
    %c80_i8_43 = arith.constant 80 : i8
    cf.cond_br %104, ^bb42, ^bb1(%c80_i8_43 : i8)
  ^bb42:  // pred: ^bb41
    %105 = arith.subi %103, %c3_i64_42 : i64
    llvm.store %105, %arg1 : i64, !llvm.ptr
    cf.br ^bb40
  ^bb43:  // pred: ^bb44
    %c0_i256_44 = arith.constant 0 : i256
    %106 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_44, %106 : i256, !llvm.ptr
    %107 = llvm.getelementptr %106[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %107, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb49
  ^bb44:  // pred: ^bb46
    %c1024_i64_45 = arith.constant 1024 : i64
    %108 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_46 = arith.constant 1 : i64
    %109 = arith.addi %108, %c1_i64_46 : i64
    llvm.store %109, %arg3 : i64, !llvm.ptr
    %110 = arith.cmpi ult, %c1024_i64_45, %109 : i64
    %c92_i8_47 = arith.constant 92 : i8
    cf.cond_br %110, ^bb1(%c92_i8_47 : i8), ^bb43
  ^bb45:  // pred: ^bb39
    %111 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_48 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %112 = arith.cmpi uge, %111, %c3_i64_48 : i64
    %c80_i8_49 = arith.constant 80 : i8
    cf.cond_br %112, ^bb46, ^bb1(%c80_i8_49 : i8)
  ^bb46:  // pred: ^bb45
    %113 = arith.subi %111, %c3_i64_48 : i64
    llvm.store %113, %arg1 : i64, !llvm.ptr
    cf.br ^bb44
  ^bb47:  // pred: ^bb48
    %c0_i256_50 = arith.constant 0 : i256
    %114 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_50, %114 : i256, !llvm.ptr
    %115 = llvm.getelementptr %114[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %115, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb53
  ^bb48:  // pred: ^bb50
    %c1024_i64_51 = arith.constant 1024 : i64
    %116 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_52 = arith.constant 1 : i64
    %117 = arith.addi %116, %c1_i64_52 : i64
    llvm.store %117, %arg3 : i64, !llvm.ptr
    %118 = arith.cmpi ult, %c1024_i64_51, %117 : i64
    %c92_i8_53 = arith.constant 92 : i8
    cf.cond_br %118, ^bb1(%c92_i8_53 : i8), ^bb47
  ^bb49:  // pred: ^bb43
    %119 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_54 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %120 = arith.cmpi uge, %119, %c3_i64_54 : i64
    %c80_i8_55 = arith.constant 80 : i8
    cf.cond_br %120, ^bb50, ^bb1(%c80_i8_55 : i8)
  ^bb50:  // pred: ^bb49
    %121 = arith.subi %119, %c3_i64_54 : i64
    llvm.store %121, %arg1 : i64, !llvm.ptr
    cf.br ^bb48
  ^bb51:  // pred: ^bb52
    %c0_i256_56 = arith.constant 0 : i256
    %122 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_56, %122 : i256, !llvm.ptr
    %123 = llvm.getelementptr %122[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %123, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb57
  ^bb52:  // pred: ^bb54
    %c1024_i64_57 = arith.constant 1024 : i64
    %124 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_58 = arith.constant 1 : i64
    %125 = arith.addi %124, %c1_i64_58 : i64
    llvm.store %125, %arg3 : i64, !llvm.ptr
    %126 = arith.cmpi ult, %c1024_i64_57, %125 : i64
    %c92_i8_59 = arith.constant 92 : i8
    cf.cond_br %126, ^bb1(%c92_i8_59 : i8), ^bb51
  ^bb53:  // pred: ^bb47
    %127 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_60 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %128 = arith.cmpi uge, %127, %c3_i64_60 : i64
    %c80_i8_61 = arith.constant 80 : i8
    cf.cond_br %128, ^bb54, ^bb1(%c80_i8_61 : i8)
  ^bb54:  // pred: ^bb53
    %129 = arith.subi %127, %c3_i64_60 : i64
    llvm.store %129, %arg1 : i64, !llvm.ptr
    cf.br ^bb52
  ^bb55:  // pred: ^bb56
    %c0_i256_62 = arith.constant 0 : i256
    %130 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_62, %130 : i256, !llvm.ptr
    %131 = llvm.getelementptr %130[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %131, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb61
  ^bb56:  // pred: ^bb58
    %c1024_i64_63 = arith.constant 1024 : i64
    %132 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_64 = arith.constant 1 : i64
    %133 = arith.addi %132, %c1_i64_64 : i64
    llvm.store %133, %arg3 : i64, !llvm.ptr
    %134 = arith.cmpi ult, %c1024_i64_63, %133 : i64
    %c92_i8_65 = arith.constant 92 : i8
    cf.cond_br %134, ^bb1(%c92_i8_65 : i8), ^bb55
  ^bb57:  // pred: ^bb51
    %135 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_66 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %136 = arith.cmpi uge, %135, %c3_i64_66 : i64
    %c80_i8_67 = arith.constant 80 : i8
    cf.cond_br %136, ^bb58, ^bb1(%c80_i8_67 : i8)
  ^bb58:  // pred: ^bb57
    %137 = arith.subi %135, %c3_i64_66 : i64
    llvm.store %137, %arg1 : i64, !llvm.ptr
    cf.br ^bb56
  ^bb59:  // pred: ^bb60
    %138 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %139 = llvm.getelementptr %138[-6] : (!llvm.ptr) -> !llvm.ptr, i256
    %140 = llvm.load %139 : !llvm.ptr -> i256
    %141 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %140, %141 : i256, !llvm.ptr
    %142 = llvm.getelementptr %141[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %142, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb65
  ^bb60:  // pred: ^bb62
    %c1024_i64_68 = arith.constant 1024 : i64
    %143 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_69 = arith.constant 1 : i64
    %144 = arith.addi %143, %c1_i64_69 : i64
    llvm.store %144, %arg3 : i64, !llvm.ptr
    %c6_i64 = arith.constant 6 : i64
    %145 = arith.cmpi ult, %143, %c6_i64 : i64
    %146 = arith.cmpi ult, %c1024_i64_68, %144 : i64
    %147 = arith.xori %145, %146 : i1
    %c92_i8_70 = arith.constant 92 : i8
    cf.cond_br %147, ^bb1(%c92_i8_70 : i8), ^bb59
  ^bb61:  // pred: ^bb55
    %148 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_71 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %149 = arith.cmpi uge, %148, %c3_i64_71 : i64
    %c80_i8_72 = arith.constant 80 : i8
    cf.cond_br %149, ^bb62, ^bb1(%c80_i8_72 : i8)
  ^bb62:  // pred: ^bb61
    %150 = arith.subi %148, %c3_i64_71 : i64
    llvm.store %150, %arg1 : i64, !llvm.ptr
    cf.br ^bb60
  ^bb63:  // pred: ^bb64
    %c65535_i256 = arith.constant 65535 : i256
    %151 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c65535_i256, %151 : i256, !llvm.ptr
    %152 = llvm.getelementptr %151[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %152, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb78
  ^bb64:  // pred: ^bb66
    %c1024_i64_73 = arith.constant 1024 : i64
    %153 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_74 = arith.constant 1 : i64
    %154 = arith.addi %153, %c1_i64_74 : i64
    llvm.store %154, %arg3 : i64, !llvm.ptr
    %155 = arith.cmpi ult, %c1024_i64_73, %154 : i64
    %c92_i8_75 = arith.constant 92 : i8
    cf.cond_br %155, ^bb1(%c92_i8_75 : i8), ^bb63
  ^bb65:  // pred: ^bb59
    %156 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_76 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %157 = arith.cmpi uge, %156, %c3_i64_76 : i64
    %c80_i8_77 = arith.constant 80 : i8
    cf.cond_br %157, ^bb66, ^bb1(%c80_i8_77 : i8)
  ^bb66:  // pred: ^bb65
    %158 = arith.subi %156, %c3_i64_76 : i64
    llvm.store %158, %arg1 : i64, !llvm.ptr
    cf.br ^bb64
  ^bb67:  // pred: ^bb77
    %159 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %160 = llvm.getelementptr %159[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %161 = llvm.load %160 : !llvm.ptr -> i256
    llvm.store %160, %0 : !llvm.ptr, !llvm.ptr
    %162 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %163 = llvm.getelementptr %162[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %164 = llvm.load %163 : !llvm.ptr -> i256
    llvm.store %163, %0 : !llvm.ptr, !llvm.ptr
    %165 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %166 = llvm.getelementptr %165[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %167 = llvm.load %166 : !llvm.ptr -> i256
    llvm.store %166, %0 : !llvm.ptr, !llvm.ptr
    %168 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %169 = llvm.getelementptr %168[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %170 = llvm.load %169 : !llvm.ptr -> i256
    llvm.store %169, %0 : !llvm.ptr, !llvm.ptr
    %171 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %172 = llvm.getelementptr %171[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %173 = llvm.load %172 : !llvm.ptr -> i256
    llvm.store %172, %0 : !llvm.ptr, !llvm.ptr
    %174 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %175 = llvm.getelementptr %174[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %176 = llvm.load %175 : !llvm.ptr -> i256
    llvm.store %175, %0 : !llvm.ptr, !llvm.ptr
    %177 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %178 = llvm.getelementptr %177[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %179 = llvm.load %178 : !llvm.ptr -> i256
    llvm.store %178, %0 : !llvm.ptr, !llvm.ptr
    %180 = call @dora_fn_is_static(%arg0) : (!llvm.ptr) -> i8
    %c0_i8_78 = arith.constant 0 : i8
    %181 = arith.cmpi ne, %180, %c0_i8_78 : i8
    %c0_i256_79 = arith.constant 0 : i256
    %182 = arith.cmpi ne, %167, %c0_i256_79 : i256
    %183 = arith.andi %181, %182 : i1
    %c86_i8 = arith.constant 86 : i8
    cf.cond_br %183, ^bb1(%c86_i8 : i8), ^bb68
  ^bb68:  // pred: ^bb67
    %c18446744073709551615_i256_80 = arith.constant 18446744073709551615 : i256
    %184 = arith.cmpi sgt, %173, %c18446744073709551615_i256_80 : i256
    %c84_i8_81 = arith.constant 84 : i8
    cf.cond_br %184, ^bb1(%c84_i8_81 : i8), ^bb69
  ^bb69:  // pred: ^bb68
    %185 = arith.trunci %173 : i256 to i64
    %c0_i64_82 = arith.constant 0 : i64
    %186 = arith.cmpi slt, %185, %c0_i64_82 : i64
    %c84_i8_83 = arith.constant 84 : i8
    cf.cond_br %186, ^bb1(%c84_i8_83 : i8), ^bb70
  ^bb70:  // pred: ^bb69
    %c0_i64_84 = arith.constant 0 : i64
    %187 = arith.cmpi ne, %185, %c0_i64_84 : i64
    cf.cond_br %187, ^bb99, ^bb71
  ^bb71:  // 2 preds: ^bb70, ^bb103
    %c18446744073709551615_i256_85 = arith.constant 18446744073709551615 : i256
    %188 = arith.cmpi sgt, %179, %c18446744073709551615_i256_85 : i256
    %c84_i8_86 = arith.constant 84 : i8
    cf.cond_br %188, ^bb1(%c84_i8_86 : i8), ^bb72
  ^bb72:  // pred: ^bb71
    %189 = arith.trunci %179 : i256 to i64
    %c0_i64_87 = arith.constant 0 : i64
    %190 = arith.cmpi slt, %189, %c0_i64_87 : i64
    %c84_i8_88 = arith.constant 84 : i8
    cf.cond_br %190, ^bb1(%c84_i8_88 : i8), ^bb73
  ^bb73:  // pred: ^bb72
    %c0_i64_89 = arith.constant 0 : i64
    %191 = arith.cmpi ne, %189, %c0_i64_89 : i64
    cf.cond_br %191, ^bb107, ^bb74
  ^bb74:  // 2 preds: ^bb73, ^bb111
    %192 = arith.trunci %170 : i256 to i64
    %193 = arith.trunci %176 : i256 to i64
    %194 = llvm.load %arg1 : !llvm.ptr -> i64
    %c1_i256_90 = arith.constant 1 : i256
    %195 = llvm.alloca %c1_i256_90 x i256 : (i256) -> !llvm.ptr
    llvm.store %167, %195 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i256_91 = arith.constant 1 : i256
    %196 = llvm.alloca %c1_i256_91 x i256 : (i256) -> !llvm.ptr
    llvm.store %161, %196 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i256_92 = arith.constant 1 : i256
    %197 = llvm.alloca %c1_i256_92 x i256 : (i256) -> !llvm.ptr
    llvm.store %164, %197 {alignment = 1 : i64} : i256, !llvm.ptr
    %c0_i8_93 = arith.constant 0 : i8
    %198 = call @dora_fn_call(%arg0, %196, %197, %195, %192, %185, %193, %189, %194, %c0_i8_93) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
    %199 = llvm.getelementptr %198[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %200 = llvm.load %199 : !llvm.ptr -> i8
    %201 = llvm.getelementptr %198[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %202 = llvm.load %201 : !llvm.ptr -> i8
    %c0_i8_94 = arith.constant 0 : i8
    %203 = arith.cmpi ne, %202, %c0_i8_94 : i8
    cf.cond_br %203, ^bb1(%202 : i8), ^bb75
  ^bb75:  // pred: ^bb74
    %204 = llvm.getelementptr %198[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %205 = llvm.load %204 : !llvm.ptr -> i64
    %206 = llvm.load %arg1 : !llvm.ptr -> i64
    %207 = arith.cmpi ult, %206, %205 : i64
    scf.if %207 {
    } else {
      %336 = arith.subi %206, %205 : i64
      llvm.store %336, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_95 = arith.constant 80 : i8
    cf.cond_br %207, ^bb1(%c80_i8_95 : i8), ^bb76
  ^bb76:  // pred: ^bb75
    %208 = arith.extui %200 : i8 to i256
    %209 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %208, %209 : i256, !llvm.ptr
    %210 = llvm.getelementptr %209[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %210, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb80
  ^bb77:  // pred: ^bb79
    %c1024_i64_96 = arith.constant 1024 : i64
    %211 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-6_i64 = arith.constant -6 : i64
    %212 = arith.addi %211, %c-6_i64 : i64
    llvm.store %212, %arg3 : i64, !llvm.ptr
    %c7_i64 = arith.constant 7 : i64
    %213 = arith.cmpi ult, %211, %c7_i64 : i64
    %c91_i8_97 = arith.constant 91 : i8
    cf.cond_br %213, ^bb1(%c91_i8_97 : i8), ^bb67
  ^bb78:  // pred: ^bb63
    %214 = llvm.load %arg1 : !llvm.ptr -> i64
    %c0_i64_98 = arith.constant 0 : i64
    call @dora_fn_nop() : () -> ()
    %215 = arith.cmpi uge, %214, %c0_i64_98 : i64
    %c80_i8_99 = arith.constant 80 : i8
    cf.cond_br %215, ^bb79, ^bb1(%c80_i8_99 : i8)
  ^bb79:  // pred: ^bb78
    %216 = arith.subi %214, %c0_i64_98 : i64
    llvm.store %216, %arg1 : i64, !llvm.ptr
    cf.br ^bb77
  ^bb80:  // pred: ^bb76
    %c0_i64_100 = arith.constant 0 : i64
    %c1_i8 = arith.constant 1 : i8
    %217 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_100, %c0_i64_100, %217, %c1_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c1_i8 : i8
  ^bb81:  // pred: ^bb11
    %c18446744073709551615_i256_101 = arith.constant 18446744073709551615 : i256
    %218 = arith.cmpi sgt, %22, %c18446744073709551615_i256_101 : i256
    %c84_i8_102 = arith.constant 84 : i8
    cf.cond_br %218, ^bb1(%c84_i8_102 : i8), ^bb82
  ^bb82:  // pred: ^bb81
    %219 = arith.trunci %22 : i256 to i64
    %c0_i64_103 = arith.constant 0 : i64
    %220 = arith.cmpi slt, %219, %c0_i64_103 : i64
    %c84_i8_104 = arith.constant 84 : i8
    cf.cond_br %220, ^bb1(%c84_i8_104 : i8), ^bb83
  ^bb83:  // pred: ^bb82
    %221 = arith.addi %219, %c32_i64 : i64
    %c0_i64_105 = arith.constant 0 : i64
    %222 = arith.cmpi slt, %221, %c0_i64_105 : i64
    %c84_i8_106 = arith.constant 84 : i8
    cf.cond_br %222, ^bb1(%c84_i8_106 : i8), ^bb84
  ^bb84:  // pred: ^bb83
    %c31_i64 = arith.constant 31 : i64
    %c32_i64_107 = arith.constant 32 : i64
    %223 = arith.addi %221, %c31_i64 : i64
    %224 = arith.divui %223, %c32_i64_107 : i64
    %c32_i64_108 = arith.constant 32 : i64
    %225 = arith.muli %224, %c32_i64_108 : i64
    %226 = call @dora_fn_memory_size(%arg0) : (!llvm.ptr) -> i64
    %c31_i64_109 = arith.constant 31 : i64
    %c32_i64_110 = arith.constant 32 : i64
    %227 = arith.addi %226, %c31_i64_109 : i64
    %228 = arith.divui %227, %c32_i64_110 : i64
    %229 = arith.muli %228, %c32_i64_108 : i64
    %230 = arith.cmpi ult, %229, %225 : i64
    cf.cond_br %230, ^bb86, ^bb85
  ^bb85:  // 2 preds: ^bb84, ^bb88
    cf.br ^bb12
  ^bb86:  // pred: ^bb84
    %c3_i64_111 = arith.constant 3 : i64
    %c512_i64 = arith.constant 512 : i64
    %231 = arith.muli %228, %228 : i64
    %232 = arith.divui %231, %c512_i64 : i64
    %233 = arith.muli %228, %c3_i64_111 : i64
    %234 = arith.addi %232, %233 : i64
    %c3_i64_112 = arith.constant 3 : i64
    %c512_i64_113 = arith.constant 512 : i64
    %235 = arith.muli %224, %224 : i64
    %236 = arith.divui %235, %c512_i64_113 : i64
    %237 = arith.muli %224, %c3_i64_112 : i64
    %238 = arith.addi %236, %237 : i64
    %239 = arith.subi %238, %234 : i64
    %240 = llvm.load %arg1 : !llvm.ptr -> i64
    %241 = arith.cmpi ult, %240, %239 : i64
    scf.if %241 {
    } else {
      %336 = arith.subi %240, %239 : i64
      llvm.store %336, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_114 = arith.constant 80 : i8
    cf.cond_br %241, ^bb1(%c80_i8_114 : i8), ^bb87
  ^bb87:  // pred: ^bb86
    %242 = call @dora_fn_extend_memory(%arg0, %225) : (!llvm.ptr, i64) -> !llvm.ptr
    %243 = llvm.getelementptr %242[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %244 = llvm.load %243 : !llvm.ptr -> i8
    %c0_i8_115 = arith.constant 0 : i8
    %245 = arith.cmpi ne, %244, %c0_i8_115 : i8
    cf.cond_br %245, ^bb1(%244 : i8), ^bb88
  ^bb88:  // pred: ^bb87
    cf.br ^bb85
  ^bb89:  // pred: ^bb31
    %c49152_i64 = arith.constant 49152 : i64
    %246 = arith.cmpi ugt, %73, %c49152_i64 : i64
    %c100_i8 = arith.constant 100 : i8
    cf.cond_br %246, ^bb1(%c100_i8 : i8), ^bb90
  ^bb90:  // pred: ^bb89
    %c31_i64_116 = arith.constant 31 : i64
    %c32_i64_117 = arith.constant 32 : i64
    %247 = arith.addi %73, %c31_i64_116 : i64
    %248 = arith.divui %247, %c32_i64_117 : i64
    %c2_i64_118 = arith.constant 2 : i64
    %249 = arith.muli %248, %c2_i64_118 : i64
    %250 = llvm.load %arg1 : !llvm.ptr -> i64
    %251 = arith.cmpi ult, %250, %249 : i64
    scf.if %251 {
    } else {
      %336 = arith.subi %250, %249 : i64
      llvm.store %336, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_119 = arith.constant 80 : i8
    cf.cond_br %251, ^bb1(%c80_i8_119 : i8), ^bb91
  ^bb91:  // pred: ^bb90
    %c18446744073709551615_i256_120 = arith.constant 18446744073709551615 : i256
    %252 = arith.cmpi sgt, %66, %c18446744073709551615_i256_120 : i256
    %c84_i8_121 = arith.constant 84 : i8
    cf.cond_br %252, ^bb1(%c84_i8_121 : i8), ^bb92
  ^bb92:  // pred: ^bb91
    %253 = arith.trunci %66 : i256 to i64
    %c0_i64_122 = arith.constant 0 : i64
    %254 = arith.cmpi slt, %253, %c0_i64_122 : i64
    %c84_i8_123 = arith.constant 84 : i8
    cf.cond_br %254, ^bb1(%c84_i8_123 : i8), ^bb93
  ^bb93:  // pred: ^bb92
    %255 = arith.addi %253, %73 : i64
    %c0_i64_124 = arith.constant 0 : i64
    %256 = arith.cmpi slt, %255, %c0_i64_124 : i64
    %c84_i8_125 = arith.constant 84 : i8
    cf.cond_br %256, ^bb1(%c84_i8_125 : i8), ^bb94
  ^bb94:  // pred: ^bb93
    %c31_i64_126 = arith.constant 31 : i64
    %c32_i64_127 = arith.constant 32 : i64
    %257 = arith.addi %255, %c31_i64_126 : i64
    %258 = arith.divui %257, %c32_i64_127 : i64
    %c32_i64_128 = arith.constant 32 : i64
    %259 = arith.muli %258, %c32_i64_128 : i64
    %260 = call @dora_fn_memory_size(%arg0) : (!llvm.ptr) -> i64
    %c31_i64_129 = arith.constant 31 : i64
    %c32_i64_130 = arith.constant 32 : i64
    %261 = arith.addi %260, %c31_i64_129 : i64
    %262 = arith.divui %261, %c32_i64_130 : i64
    %263 = arith.muli %262, %c32_i64_128 : i64
    %264 = arith.cmpi ult, %263, %259 : i64
    cf.cond_br %264, ^bb96, ^bb95
  ^bb95:  // 2 preds: ^bb94, ^bb98
    cf.br ^bb32
  ^bb96:  // pred: ^bb94
    %c3_i64_131 = arith.constant 3 : i64
    %c512_i64_132 = arith.constant 512 : i64
    %265 = arith.muli %262, %262 : i64
    %266 = arith.divui %265, %c512_i64_132 : i64
    %267 = arith.muli %262, %c3_i64_131 : i64
    %268 = arith.addi %266, %267 : i64
    %c3_i64_133 = arith.constant 3 : i64
    %c512_i64_134 = arith.constant 512 : i64
    %269 = arith.muli %258, %258 : i64
    %270 = arith.divui %269, %c512_i64_134 : i64
    %271 = arith.muli %258, %c3_i64_133 : i64
    %272 = arith.addi %270, %271 : i64
    %273 = arith.subi %272, %268 : i64
    %274 = llvm.load %arg1 : !llvm.ptr -> i64
    %275 = arith.cmpi ult, %274, %273 : i64
    scf.if %275 {
    } else {
      %336 = arith.subi %274, %273 : i64
      llvm.store %336, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_135 = arith.constant 80 : i8
    cf.cond_br %275, ^bb1(%c80_i8_135 : i8), ^bb97
  ^bb97:  // pred: ^bb96
    %276 = call @dora_fn_extend_memory(%arg0, %259) : (!llvm.ptr, i64) -> !llvm.ptr
    %277 = llvm.getelementptr %276[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %278 = llvm.load %277 : !llvm.ptr -> i8
    %c0_i8_136 = arith.constant 0 : i8
    %279 = arith.cmpi ne, %278, %c0_i8_136 : i8
    cf.cond_br %279, ^bb1(%278 : i8), ^bb98
  ^bb98:  // pred: ^bb97
    cf.br ^bb95
  ^bb99:  // pred: ^bb70
    %c18446744073709551615_i256_137 = arith.constant 18446744073709551615 : i256
    %280 = arith.cmpi sgt, %170, %c18446744073709551615_i256_137 : i256
    %c84_i8_138 = arith.constant 84 : i8
    cf.cond_br %280, ^bb1(%c84_i8_138 : i8), ^bb100
  ^bb100:  // pred: ^bb99
    %281 = arith.trunci %170 : i256 to i64
    %c0_i64_139 = arith.constant 0 : i64
    %282 = arith.cmpi slt, %281, %c0_i64_139 : i64
    %c84_i8_140 = arith.constant 84 : i8
    cf.cond_br %282, ^bb1(%c84_i8_140 : i8), ^bb101
  ^bb101:  // pred: ^bb100
    %283 = arith.addi %281, %185 : i64
    %c0_i64_141 = arith.constant 0 : i64
    %284 = arith.cmpi slt, %283, %c0_i64_141 : i64
    %c84_i8_142 = arith.constant 84 : i8
    cf.cond_br %284, ^bb1(%c84_i8_142 : i8), ^bb102
  ^bb102:  // pred: ^bb101
    %c31_i64_143 = arith.constant 31 : i64
    %c32_i64_144 = arith.constant 32 : i64
    %285 = arith.addi %283, %c31_i64_143 : i64
    %286 = arith.divui %285, %c32_i64_144 : i64
    %c32_i64_145 = arith.constant 32 : i64
    %287 = arith.muli %286, %c32_i64_145 : i64
    %288 = call @dora_fn_memory_size(%arg0) : (!llvm.ptr) -> i64
    %c31_i64_146 = arith.constant 31 : i64
    %c32_i64_147 = arith.constant 32 : i64
    %289 = arith.addi %288, %c31_i64_146 : i64
    %290 = arith.divui %289, %c32_i64_147 : i64
    %291 = arith.muli %290, %c32_i64_145 : i64
    %292 = arith.cmpi ult, %291, %287 : i64
    cf.cond_br %292, ^bb104, ^bb103
  ^bb103:  // 2 preds: ^bb102, ^bb106
    cf.br ^bb71
  ^bb104:  // pred: ^bb102
    %c3_i64_148 = arith.constant 3 : i64
    %c512_i64_149 = arith.constant 512 : i64
    %293 = arith.muli %290, %290 : i64
    %294 = arith.divui %293, %c512_i64_149 : i64
    %295 = arith.muli %290, %c3_i64_148 : i64
    %296 = arith.addi %294, %295 : i64
    %c3_i64_150 = arith.constant 3 : i64
    %c512_i64_151 = arith.constant 512 : i64
    %297 = arith.muli %286, %286 : i64
    %298 = arith.divui %297, %c512_i64_151 : i64
    %299 = arith.muli %286, %c3_i64_150 : i64
    %300 = arith.addi %298, %299 : i64
    %301 = arith.subi %300, %296 : i64
    %302 = llvm.load %arg1 : !llvm.ptr -> i64
    %303 = arith.cmpi ult, %302, %301 : i64
    scf.if %303 {
    } else {
      %336 = arith.subi %302, %301 : i64
      llvm.store %336, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_152 = arith.constant 80 : i8
    cf.cond_br %303, ^bb1(%c80_i8_152 : i8), ^bb105
  ^bb105:  // pred: ^bb104
    %304 = call @dora_fn_extend_memory(%arg0, %287) : (!llvm.ptr, i64) -> !llvm.ptr
    %305 = llvm.getelementptr %304[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %306 = llvm.load %305 : !llvm.ptr -> i8
    %c0_i8_153 = arith.constant 0 : i8
    %307 = arith.cmpi ne, %306, %c0_i8_153 : i8
    cf.cond_br %307, ^bb1(%306 : i8), ^bb106
  ^bb106:  // pred: ^bb105
    cf.br ^bb103
  ^bb107:  // pred: ^bb73
    %c18446744073709551615_i256_154 = arith.constant 18446744073709551615 : i256
    %308 = arith.cmpi sgt, %176, %c18446744073709551615_i256_154 : i256
    %c84_i8_155 = arith.constant 84 : i8
    cf.cond_br %308, ^bb1(%c84_i8_155 : i8), ^bb108
  ^bb108:  // pred: ^bb107
    %309 = arith.trunci %176 : i256 to i64
    %c0_i64_156 = arith.constant 0 : i64
    %310 = arith.cmpi slt, %309, %c0_i64_156 : i64
    %c84_i8_157 = arith.constant 84 : i8
    cf.cond_br %310, ^bb1(%c84_i8_157 : i8), ^bb109
  ^bb109:  // pred: ^bb108
    %311 = arith.addi %309, %189 : i64
    %c0_i64_158 = arith.constant 0 : i64
    %312 = arith.cmpi slt, %311, %c0_i64_158 : i64
    %c84_i8_159 = arith.constant 84 : i8
    cf.cond_br %312, ^bb1(%c84_i8_159 : i8), ^bb110
  ^bb110:  // pred: ^bb109
    %c31_i64_160 = arith.constant 31 : i64
    %c32_i64_161 = arith.constant 32 : i64
    %313 = arith.addi %311, %c31_i64_160 : i64
    %314 = arith.divui %313, %c32_i64_161 : i64
    %c32_i64_162 = arith.constant 32 : i64
    %315 = arith.muli %314, %c32_i64_162 : i64
    %316 = call @dora_fn_memory_size(%arg0) : (!llvm.ptr) -> i64
    %c31_i64_163 = arith.constant 31 : i64
    %c32_i64_164 = arith.constant 32 : i64
    %317 = arith.addi %316, %c31_i64_163 : i64
    %318 = arith.divui %317, %c32_i64_164 : i64
    %319 = arith.muli %318, %c32_i64_162 : i64
    %320 = arith.cmpi ult, %319, %315 : i64
    cf.cond_br %320, ^bb112, ^bb111
  ^bb111:  // 2 preds: ^bb110, ^bb114
    cf.br ^bb74
  ^bb112:  // pred: ^bb110
    %c3_i64_165 = arith.constant 3 : i64
    %c512_i64_166 = arith.constant 512 : i64
    %321 = arith.muli %318, %318 : i64
    %322 = arith.divui %321, %c512_i64_166 : i64
    %323 = arith.muli %318, %c3_i64_165 : i64
    %324 = arith.addi %322, %323 : i64
    %c3_i64_167 = arith.constant 3 : i64
    %c512_i64_168 = arith.constant 512 : i64
    %325 = arith.muli %314, %314 : i64
    %326 = arith.divui %325, %c512_i64_168 : i64
    %327 = arith.muli %314, %c3_i64_167 : i64
    %328 = arith.addi %326, %327 : i64
    %329 = arith.subi %328, %324 : i64
    %330 = llvm.load %arg1 : !llvm.ptr -> i64
    %331 = arith.cmpi ult, %330, %329 : i64
    scf.if %331 {
    } else {
      %336 = arith.subi %330, %329 : i64
      llvm.store %336, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_169 = arith.constant 80 : i8
    cf.cond_br %331, ^bb1(%c80_i8_169 : i8), ^bb113
  ^bb113:  // pred: ^bb112
    %332 = call @dora_fn_extend_memory(%arg0, %315) : (!llvm.ptr, i64) -> !llvm.ptr
    %333 = llvm.getelementptr %332[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %334 = llvm.load %333 : !llvm.ptr -> i8
    %c0_i8_170 = arith.constant 0 : i8
    %335 = arith.cmpi ne, %334, %c0_i8_170 : i8
    cf.cond_br %335, ^bb1(%334 : i8), ^bb114
  ^bb114:  // pred: ^bb113
    cf.br ^bb111
  }
}
