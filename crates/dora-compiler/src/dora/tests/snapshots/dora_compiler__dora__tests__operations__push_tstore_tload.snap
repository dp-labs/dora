---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  llvm.mlir.global internal @dora_global_memory_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_memory_size() {addr_space = 0 : i32} : i64
  func.func private @dora_fn_nop()
  func.func private @dora_fn_tracing(!llvm.ptr, i8, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_fn_is_static(!llvm.ptr) -> i8
  func.func private @dora_fn_exp(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_chainid(!llvm.ptr) -> i64
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gaslimit_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_code_copy(!llvm.ptr, !llvm.ptr, i64, i64)
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_call(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_returndata_copy(!llvm.ptr, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_tload(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_tstore(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func public @main(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr) -> i8 attributes {llvm.emit_c_interface} {
    %c0_i64 = arith.constant 0 : i64
    %0 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %c0_i64, %0 : i64, !llvm.ptr
    cf.br ^bb5
  ^bb1(%1: i8):  // 12 preds: ^bb2, ^bb4, ^bb5, ^bb8, ^bb9, ^bb11, ^bb13, ^bb14, ^bb17, ^bb18, ^bb21, ^bb22
    %c0_i64_0 = arith.constant 0 : i64
    %2 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_0, %c0_i64_0, %2, %1) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %1 : i8
  ^bb2(%3: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %3 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3:  // pred: ^bb4
    %c46_i256 = arith.constant 46 : i256
    %4 = llvm.load %arg3 : !llvm.ptr -> i64
    %5 = llvm.getelementptr %arg2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64 = arith.constant 1 : i64
    %6 = arith.addi %4, %c1_i64 : i64
    llvm.store %6, %arg3 : i64, !llvm.ptr
    llvm.store %c46_i256, %5 : i256, !llvm.ptr
    cf.br ^bb9
  ^bb4:  // pred: ^bb6
    %c1024_i64 = arith.constant 1024 : i64
    %7 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_1 = arith.constant 1 : i64
    %8 = arith.addi %7, %c1_i64_1 : i64
    %9 = arith.cmpi ult, %c1024_i64, %8 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %9, ^bb1(%c92_i8 : i8), ^bb3
  ^bb5:  // pred: ^bb0
    %10 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %11 = arith.cmpi uge, %10, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %11, ^bb6, ^bb1(%c80_i8 : i8)
  ^bb6:  // pred: ^bb5
    %12 = arith.subi %10, %c3_i64 : i64
    llvm.store %12, %arg1 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb7:  // pred: ^bb8
    %c0_i256 = arith.constant 0 : i256
    %13 = llvm.load %arg3 : !llvm.ptr -> i64
    %14 = llvm.getelementptr %arg2[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_2 = arith.constant 1 : i64
    %15 = arith.addi %13, %c1_i64_2 : i64
    llvm.store %15, %arg3 : i64, !llvm.ptr
    llvm.store %c0_i256, %14 : i256, !llvm.ptr
    cf.br ^bb14
  ^bb8:  // pred: ^bb10
    %c1024_i64_3 = arith.constant 1024 : i64
    %16 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_4 = arith.constant 1 : i64
    %17 = arith.addi %16, %c1_i64_4 : i64
    %18 = arith.cmpi ult, %c1024_i64_3, %17 : i64
    %c92_i8_5 = arith.constant 92 : i8
    cf.cond_br %18, ^bb1(%c92_i8_5 : i8), ^bb7
  ^bb9:  // pred: ^bb3
    %19 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_6 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %20 = arith.cmpi uge, %19, %c3_i64_6 : i64
    %c80_i8_7 = arith.constant 80 : i8
    cf.cond_br %20, ^bb10, ^bb1(%c80_i8_7 : i8)
  ^bb10:  // pred: ^bb9
    %21 = arith.subi %19, %c3_i64_6 : i64
    llvm.store %21, %arg1 : i64, !llvm.ptr
    cf.br ^bb8
  ^bb11:  // pred: ^bb13
    %22 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_8 = arith.constant 1 : i64
    %23 = arith.subi %22, %c1_i64_8 : i64
    %24 = llvm.getelementptr %arg2[%23] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %23, %arg3 : i64, !llvm.ptr
    %25 = llvm.load %24 : !llvm.ptr -> i256
    %26 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_9 = arith.constant 1 : i64
    %27 = arith.subi %26, %c1_i64_9 : i64
    %28 = llvm.getelementptr %arg2[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %27, %arg3 : i64, !llvm.ptr
    %29 = llvm.load %28 : !llvm.ptr -> i256
    %30 = call @dora_fn_is_static(%arg0) : (!llvm.ptr) -> i8
    %c0_i8 = arith.constant 0 : i8
    %31 = arith.cmpi ne, %30, %c0_i8 : i8
    %c87_i8 = arith.constant 87 : i8
    cf.cond_br %31, ^bb1(%c87_i8 : i8), ^bb12
  ^bb12:  // pred: ^bb11
    %c1_i256 = arith.constant 1 : i256
    %32 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %25, %32 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i256_10 = arith.constant 1 : i256
    %33 = llvm.alloca %c1_i256_10 x i256 : (i256) -> !llvm.ptr
    llvm.store %29, %33 {alignment = 1 : i64} : i256, !llvm.ptr
    call @dora_fn_tstore(%arg0, %32, %33) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> ()
    cf.br ^bb18
  ^bb13:  // pred: ^bb15
    %c1024_i64_11 = arith.constant 1024 : i64
    %34 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-2_i64 = arith.constant -2 : i64
    %35 = arith.addi %34, %c-2_i64 : i64
    %c2_i64 = arith.constant 2 : i64
    %36 = arith.cmpi ult, %34, %c2_i64 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %36, ^bb1(%c91_i8 : i8), ^bb11
  ^bb14:  // pred: ^bb7
    %37 = llvm.load %arg1 : !llvm.ptr -> i64
    %c100_i64 = arith.constant 100 : i64
    call @dora_fn_nop() : () -> ()
    %38 = arith.cmpi uge, %37, %c100_i64 : i64
    %c80_i8_12 = arith.constant 80 : i8
    cf.cond_br %38, ^bb15, ^bb1(%c80_i8_12 : i8)
  ^bb15:  // pred: ^bb14
    %39 = arith.subi %37, %c100_i64 : i64
    llvm.store %39, %arg1 : i64, !llvm.ptr
    cf.br ^bb13
  ^bb16:  // pred: ^bb17
    %c0_i256_13 = arith.constant 0 : i256
    %40 = llvm.load %arg3 : !llvm.ptr -> i64
    %41 = llvm.getelementptr %arg2[%40] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_14 = arith.constant 1 : i64
    %42 = arith.addi %40, %c1_i64_14 : i64
    llvm.store %42, %arg3 : i64, !llvm.ptr
    llvm.store %c0_i256_13, %41 : i256, !llvm.ptr
    cf.br ^bb22
  ^bb17:  // pred: ^bb19
    %c1024_i64_15 = arith.constant 1024 : i64
    %43 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_16 = arith.constant 1 : i64
    %44 = arith.addi %43, %c1_i64_16 : i64
    %45 = arith.cmpi ult, %c1024_i64_15, %44 : i64
    %c92_i8_17 = arith.constant 92 : i8
    cf.cond_br %45, ^bb1(%c92_i8_17 : i8), ^bb16
  ^bb18:  // pred: ^bb12
    %46 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_18 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %47 = arith.cmpi uge, %46, %c3_i64_18 : i64
    %c80_i8_19 = arith.constant 80 : i8
    cf.cond_br %47, ^bb19, ^bb1(%c80_i8_19 : i8)
  ^bb19:  // pred: ^bb18
    %48 = arith.subi %46, %c3_i64_18 : i64
    llvm.store %48, %arg1 : i64, !llvm.ptr
    cf.br ^bb17
  ^bb20:  // pred: ^bb21
    %49 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_20 = arith.constant 1 : i64
    %50 = arith.subi %49, %c1_i64_20 : i64
    %51 = llvm.getelementptr %arg2[%50] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    llvm.store %50, %arg3 : i64, !llvm.ptr
    %52 = llvm.load %51 : !llvm.ptr -> i256
    %c1_i256_21 = arith.constant 1 : i256
    %53 = llvm.alloca %c1_i256_21 x i256 : (i256) -> !llvm.ptr
    llvm.store %52, %53 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i256_22 = arith.constant 1 : i256
    %54 = llvm.alloca %c1_i256_22 x i256 : (i256) -> !llvm.ptr
    call @dora_fn_tload(%arg0, %53, %54) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> ()
    %55 = llvm.load %54 : !llvm.ptr -> i256
    %56 = llvm.load %arg3 : !llvm.ptr -> i64
    %57 = llvm.getelementptr %arg2[%56] : (!llvm.ptr, i64) -> !llvm.ptr, i256
    %c1_i64_23 = arith.constant 1 : i64
    %58 = arith.addi %56, %c1_i64_23 : i64
    llvm.store %58, %arg3 : i64, !llvm.ptr
    llvm.store %55, %57 : i256, !llvm.ptr
    cf.br ^bb24
  ^bb21:  // pred: ^bb23
    %c1024_i64_24 = arith.constant 1024 : i64
    %59 = llvm.load %arg3 : !llvm.ptr -> i64
    %c0_i64_25 = arith.constant 0 : i64
    %60 = arith.addi %59, %c0_i64_25 : i64
    %c1_i64_26 = arith.constant 1 : i64
    %61 = arith.cmpi ult, %59, %c1_i64_26 : i64
    %c91_i8_27 = arith.constant 91 : i8
    cf.cond_br %61, ^bb1(%c91_i8_27 : i8), ^bb20
  ^bb22:  // pred: ^bb16
    %62 = llvm.load %arg1 : !llvm.ptr -> i64
    %c100_i64_28 = arith.constant 100 : i64
    call @dora_fn_nop() : () -> ()
    %63 = arith.cmpi uge, %62, %c100_i64_28 : i64
    %c80_i8_29 = arith.constant 80 : i8
    cf.cond_br %63, ^bb23, ^bb1(%c80_i8_29 : i8)
  ^bb23:  // pred: ^bb22
    %64 = arith.subi %62, %c100_i64_28 : i64
    llvm.store %64, %arg1 : i64, !llvm.ptr
    cf.br ^bb21
  ^bb24:  // pred: ^bb20
    %c0_i64_30 = arith.constant 0 : i64
    %c1_i8 = arith.constant 1 : i8
    %65 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_30, %c0_i64_30, %65, %c1_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c1_i8 : i8
  }
}
