---
source: crates/dora-compiler/src/dora/tests/storage.rs
expression: op
snapshot_kind: text
---
module {
  llvm.mlir.global internal @dora_global_stack_ptr() {addr_space = 0 : i32} : !llvm.ptr
  func.func @dora_u256_map_get(%arg0: memref<?x3xi256>, %arg1: i256) -> (i256, i1) {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c1_i256 = arith.constant 1 : i256
    %c0_i256 = arith.constant 0 : i256
    %false = arith.constant false
    %true = arith.constant true
    %dim = memref.dim %arg0, %c0 : memref<?x3xi256>
    %0 = call @dora_u256_map_hash(%arg0, %arg1) : (memref<?x3xi256>, i256) -> index
    %alloc = memref.alloc() : memref<1xindex>
    memref.store %0, %alloc[%c0] : memref<1xindex>
    %alloc_0 = memref.alloc() : memref<1xi256>
    %alloc_1 = memref.alloc() : memref<1xi1>
    memref.store %c0_i256, %alloc_0[%c0] : memref<1xi256>
    memref.store %false, %alloc_1[%c0] : memref<1xi1>
    scf.while : () -> () {
      %3 = memref.load %alloc[%c0] : memref<1xindex>
      %4 = memref.load %arg0[%3, %c2] : memref<?x3xi256>
      %5 = arith.cmpi eq, %4, %c1_i256 : i256
      scf.if %5 {
        %7 = memref.load %arg0[%3, %c0] : memref<?x3xi256>
        %8 = arith.cmpi eq, %7, %arg1 : i256
        scf.if %8 {
          %9 = memref.load %arg0[%3, %c1] : memref<?x3xi256>
          memref.store %9, %alloc_0[%c0] : memref<1xi256>
          memref.store %true, %alloc_1[%c0] : memref<1xi1>
        } else {
          %9 = arith.addi %3, %c1 : index
          %10 = arith.remsi %9, %dim : index
          memref.store %10, %alloc[%c0] : memref<1xindex>
        }
      } else {
      }
      %6 = scf.if %5 -> (i1) {
        %7 = memref.load %arg0[%3, %c0] : memref<?x3xi256>
        %8 = arith.cmpi ne, %7, %arg1 : i256
        scf.yield %8 : i1
      } else {
        %false_2 = arith.constant false
        scf.yield %false_2 : i1
      }
      scf.condition(%6)
    } do {
      scf.yield
    }
    %1 = memref.load %alloc_0[%c0] : memref<1xi256>
    %2 = memref.load %alloc_1[%c0] : memref<1xi1>
    memref.dealloc %alloc : memref<1xindex>
    memref.dealloc %alloc_0 : memref<1xi256>
    memref.dealloc %alloc_1 : memref<1xi1>
    return %1, %2 : i256, i1
  }
  func.func @dora_u256_map_insert(%arg0: memref<?x3xi256>, %arg1: i256, %arg2: i256) -> memref<?x3xi256> {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c1_i256 = arith.constant 1 : i256
    %c0_i256 = arith.constant 0 : i256
    %dim = memref.dim %arg0, %c0 : memref<?x3xi256>
    %0 = call @dora_u256_map_hash(%arg0, %arg1) : (memref<?x3xi256>, i256) -> index
    %alloc = memref.alloc() : memref<1xindex>
    memref.store %0, %alloc[%c0] : memref<1xindex>
    scf.while : () -> () {
      %1 = memref.load %alloc[%c0] : memref<1xindex>
      %2 = memref.load %arg0[%1, %c2] : memref<?x3xi256>
      %3 = arith.cmpi eq, %2, %c1_i256 : i256
      scf.if %3 {
        %4 = memref.load %arg0[%1, %c0] : memref<?x3xi256>
        %5 = arith.cmpi eq, %4, %arg1 : i256
        scf.if %5 {
          memref.store %arg2, %arg0[%1, %c1] : memref<?x3xi256>
        } else {
          %6 = arith.addi %1, %c1 : index
          %7 = arith.remsi %6, %dim : index
          memref.store %7, %alloc[%c0] : memref<1xindex>
        }
      } else {
        memref.store %arg1, %arg0[%1, %c0] : memref<?x3xi256>
        memref.store %arg2, %arg0[%1, %c1] : memref<?x3xi256>
        memref.store %c1_i256, %arg0[%1, %c2] : memref<?x3xi256>
      }
      scf.condition(%3)
    } do {
      scf.yield
    }
    memref.dealloc %alloc : memref<1xindex>
    return %arg0 : memref<?x3xi256>
  }
  func.func @dora_u256_map_hash(%arg0: memref<?x3xi256>, %arg1: i256) -> index {
    %c0 = arith.constant 0 : index
    %c1_i256 = arith.constant 1 : i256
    %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %arg1, %0 : i256, !llvm.ptr
    %dim = memref.dim %arg0, %c0 : memref<?x3xi256>
    %1 = arith.index_cast %dim : index to i64
    %2 = llvm.load %0 : !llvm.ptr -> vector<4xi64>
    %3 = llvm.mlir.constant(dense<0> : vector<4xi64>) : vector<4xi64>
    %4 = llvm.xor %2, %3  : vector<4xi64>
    %5 = "llvm.vector.reduce.xor"(%4) : (vector<4xi64>) -> i64
    %6 = llvm.urem %5, %1  : i64
    %7 = arith.index_cast %6 : i64 to index
    return %7 : index
  }
  func.func @dora_u256_map_simple_hash(%arg0: memref<?x3xi256>, %arg1: i256) -> index {
    %c0 = arith.constant 0 : index
    %dim = memref.dim %arg0, %c0 : memref<?x3xi256>
    %0 = arith.index_cast %dim : index to i256
    %1 = llvm.urem %arg1, %0  : i256
    %2 = arith.index_cast %1 : i256 to index
    return %2 : index
  }
  func.func @dora_u256_map_new(%arg0: index) -> memref<?x3xi256> {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c0_i256 = arith.constant 0 : i256
    %alloc = memref.alloc(%arg0) : memref<?x3xi256>
    scf.for %arg1 = %c0 to %arg0 step %c1 {
      memref.store %c0_i256, %alloc[%arg1, %c0] : memref<?x3xi256>
      memref.store %c0_i256, %alloc[%arg1, %c1] : memref<?x3xi256>
      memref.store %c0_i256, %alloc[%arg1, %c2] : memref<?x3xi256>
    }
    return %alloc : memref<?x3xi256>
  }
  llvm.mlir.global internal @dora_global_stack_length() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_memory_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_memory_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_calldata_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_calldata_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_gas_counter() {addr_space = 0 : i32} : i64
  llvm.mlir.global external @dora_global_ctx_is_static() {addr_space = 0 : i32} : !llvm.ptr
  func.func private @dora_fn_debug_print(i32)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_chainid(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_gaslimit(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_code_copy(!llvm.ptr, i64, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_read_storage(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_write_storage(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_call(!llvm.ptr, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr, i8) -> !llvm.ptr
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, i64, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_return_data_size(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_return_data_copy(!llvm.ptr, i64, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_transient_storage_read(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_transient_storage_write(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func public @main(%arg0: !llvm.ptr, %arg1: i64) -> i8 attributes {llvm.emit_c_interface} {
    %c16 = arith.constant 16 : index
    %0 = call @dora_u256_map_new(%c16) : (index) -> memref<?x3xi256>
    %c1024_i256 = arith.constant 1024 : i256
    %1 = llvm.alloca %c1024_i256 x i256 : (i256) -> !llvm.ptr
    %2 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    llvm.store %1, %2 : !llvm.ptr, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %3 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    llvm.store %c0_i64, %3 : i64, !llvm.ptr
    %c0_i64_0 = arith.constant 0 : i64
    %4 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %c0_i64_0, %4 : i64, !llvm.ptr
    %5 = call @dora_fn_calldata(%arg0) : (!llvm.ptr) -> !llvm.ptr
    %6 = llvm.mlir.addressof @dora_global_calldata_ptr : !llvm.ptr
    llvm.store %5, %6 : !llvm.ptr, !llvm.ptr
    %7 = call @dora_fn_calldata_size(%arg0) : (!llvm.ptr) -> i64
    %8 = llvm.mlir.addressof @dora_global_calldata_size : !llvm.ptr
    llvm.store %7, %8 : i64, !llvm.ptr
    %9 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    llvm.store %arg1, %9 : i64, !llvm.ptr
    %10 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64 = arith.constant 1024 : i64
    %11 = llvm.load %10 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %12 = arith.addi %11, %c1_i64 : i64
    llvm.store %12, %10 : i64, !llvm.ptr
    %13 = arith.cmpi ult, %c1024_i64, %12 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %13, ^bb1(%c92_i8 : i8), ^bb3
  ^bb1(%14: i8):  // 11 preds: ^bb0, ^bb2, ^bb3, ^bb4, ^bb5, ^bb6, ^bb7, ^bb8, ^bb9, ^bb10, ^bb11
    %c0_i64_1 = arith.constant 0 : i64
    %15 = call @dora_fn_write_result(%arg0, %c0_i64_1, %c0_i64_1, %c0_i64_1, %14) : (!llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
    return %14 : i8
  ^bb2(%16: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %16 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3:  // pred: ^bb0
    %c100_i256 = arith.constant 100 : i256
    %17 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %18 = llvm.load %17 : !llvm.ptr -> !llvm.ptr
    llvm.store %c100_i256, %18 : i256, !llvm.ptr
    %19 = llvm.getelementptr %18[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %19, %17 : !llvm.ptr, !llvm.ptr
    %20 = llvm.load %10 : !llvm.ptr -> i64
    %c1_i64_2 = arith.constant 1 : i64
    %21 = arith.addi %20, %c1_i64_2 : i64
    llvm.store %21, %10 : i64, !llvm.ptr
    %22 = arith.cmpi ult, %c1024_i64, %21 : i64
    %c92_i8_3 = arith.constant 92 : i8
    cf.cond_br %22, ^bb1(%c92_i8_3 : i8), ^bb4
  ^bb4:  // pred: ^bb3
    %c0_i256 = arith.constant 0 : i256
    %23 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %24 = llvm.load %23 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256, %24 : i256, !llvm.ptr
    %25 = llvm.getelementptr %24[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %25, %23 : !llvm.ptr, !llvm.ptr
    %26 = llvm.load %10 : !llvm.ptr -> i64
    %c-2_i64 = arith.constant -2 : i64
    %27 = arith.addi %26, %c-2_i64 : i64
    llvm.store %27, %10 : i64, !llvm.ptr
    %c2_i64 = arith.constant 2 : i64
    %28 = arith.cmpi ult, %26, %c2_i64 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %28, ^bb1(%c91_i8 : i8), ^bb5
  ^bb5:  // pred: ^bb4
    %29 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %30 = llvm.load %29 : !llvm.ptr -> !llvm.ptr
    %31 = llvm.getelementptr %30[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %32 = llvm.load %31 : !llvm.ptr -> i256
    llvm.store %31, %29 : !llvm.ptr, !llvm.ptr
    %33 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %34 = llvm.load %33 : !llvm.ptr -> !llvm.ptr
    %35 = llvm.getelementptr %34[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %36 = llvm.load %35 : !llvm.ptr -> i256
    llvm.store %35, %33 : !llvm.ptr, !llvm.ptr
    %37 = call @dora_u256_map_insert(%0, %32, %36) : (memref<?x3xi256>, i256, i256) -> memref<?x3xi256>
    "dora.sstore"(%32, %36) : (i256, i256) -> ()
    %38 = llvm.load %10 : !llvm.ptr -> i64
    %c1_i64_4 = arith.constant 1 : i64
    %39 = arith.addi %38, %c1_i64_4 : i64
    llvm.store %39, %10 : i64, !llvm.ptr
    %40 = arith.cmpi ult, %c1024_i64, %39 : i64
    %c92_i8_5 = arith.constant 92 : i8
    cf.cond_br %40, ^bb1(%c92_i8_5 : i8), ^bb6
  ^bb6:  // pred: ^bb5
    %c0_i256_6 = arith.constant 0 : i256
    %41 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %42 = llvm.load %41 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_6, %42 : i256, !llvm.ptr
    %43 = llvm.getelementptr %42[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %43, %41 : !llvm.ptr, !llvm.ptr
    %44 = llvm.load %10 : !llvm.ptr -> i64
    %c0_i64_7 = arith.constant 0 : i64
    %45 = arith.addi %44, %c0_i64_7 : i64
    llvm.store %45, %10 : i64, !llvm.ptr
    %c1_i64_8 = arith.constant 1 : i64
    %46 = arith.cmpi ult, %44, %c1_i64_8 : i64
    %c91_i8_9 = arith.constant 91 : i8
    cf.cond_br %46, ^bb1(%c91_i8_9 : i8), ^bb7
  ^bb7:  // pred: ^bb6
    %47 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %48 = llvm.load %47 : !llvm.ptr -> !llvm.ptr
    %49 = llvm.getelementptr %48[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %50 = llvm.load %49 : !llvm.ptr -> i256
    llvm.store %49, %47 : !llvm.ptr, !llvm.ptr
    %51:2 = call @dora_u256_map_get(%37, %50) : (memref<?x3xi256>, i256) -> (i256, i1)
    %52 = scf.if %51#1 -> (i256) {
      scf.yield %51#0 : i256
    } else {
      %97 = "dora.sload"(%50) : (i256) -> i256
      scf.yield %97 : i256
    }
    %53 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %54 = llvm.load %53 : !llvm.ptr -> !llvm.ptr
    llvm.store %52, %54 : i256, !llvm.ptr
    %55 = llvm.getelementptr %54[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %55, %53 : !llvm.ptr, !llvm.ptr
    %56 = llvm.load %10 : !llvm.ptr -> i64
    %c1_i64_10 = arith.constant 1 : i64
    %57 = arith.addi %56, %c1_i64_10 : i64
    llvm.store %57, %10 : i64, !llvm.ptr
    %58 = arith.cmpi ult, %c1024_i64, %57 : i64
    %c92_i8_11 = arith.constant 92 : i8
    cf.cond_br %58, ^bb1(%c92_i8_11 : i8), ^bb8
  ^bb8:  // pred: ^bb7
    %c0_i256_12 = arith.constant 0 : i256
    %59 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %60 = llvm.load %59 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_12, %60 : i256, !llvm.ptr
    %61 = llvm.getelementptr %60[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %61, %59 : !llvm.ptr, !llvm.ptr
    %62 = llvm.load %10 : !llvm.ptr -> i64
    %c-2_i64_13 = arith.constant -2 : i64
    %63 = arith.addi %62, %c-2_i64_13 : i64
    llvm.store %63, %10 : i64, !llvm.ptr
    %c2_i64_14 = arith.constant 2 : i64
    %64 = arith.cmpi ult, %62, %c2_i64_14 : i64
    %c91_i8_15 = arith.constant 91 : i8
    cf.cond_br %64, ^bb1(%c91_i8_15 : i8), ^bb9
  ^bb9:  // pred: ^bb8
    %65 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %66 = llvm.load %65 : !llvm.ptr -> !llvm.ptr
    %67 = llvm.getelementptr %66[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %68 = llvm.load %67 : !llvm.ptr -> i256
    llvm.store %67, %65 : !llvm.ptr, !llvm.ptr
    %69 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %70 = llvm.load %69 : !llvm.ptr -> !llvm.ptr
    %71 = llvm.getelementptr %70[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %72 = llvm.load %71 : !llvm.ptr -> i256
    llvm.store %71, %69 : !llvm.ptr, !llvm.ptr
    "dora.mstore"(%68, %72) : (i256, i256) -> ()
    %73 = llvm.load %10 : !llvm.ptr -> i64
    %c1_i64_16 = arith.constant 1 : i64
    %74 = arith.addi %73, %c1_i64_16 : i64
    llvm.store %74, %10 : i64, !llvm.ptr
    %75 = arith.cmpi ult, %c1024_i64, %74 : i64
    %c92_i8_17 = arith.constant 92 : i8
    cf.cond_br %75, ^bb1(%c92_i8_17 : i8), ^bb10
  ^bb10:  // pred: ^bb9
    %c32_i256 = arith.constant 32 : i256
    %76 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %77 = llvm.load %76 : !llvm.ptr -> !llvm.ptr
    llvm.store %c32_i256, %77 : i256, !llvm.ptr
    %78 = llvm.getelementptr %77[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %78, %76 : !llvm.ptr, !llvm.ptr
    %79 = llvm.load %10 : !llvm.ptr -> i64
    %c1_i64_18 = arith.constant 1 : i64
    %80 = arith.addi %79, %c1_i64_18 : i64
    llvm.store %80, %10 : i64, !llvm.ptr
    %81 = arith.cmpi ult, %c1024_i64, %80 : i64
    %c92_i8_19 = arith.constant 92 : i8
    cf.cond_br %81, ^bb1(%c92_i8_19 : i8), ^bb11
  ^bb11:  // pred: ^bb10
    %c0_i256_20 = arith.constant 0 : i256
    %82 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %83 = llvm.load %82 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_20, %83 : i256, !llvm.ptr
    %84 = llvm.getelementptr %83[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %84, %82 : !llvm.ptr, !llvm.ptr
    %85 = llvm.load %10 : !llvm.ptr -> i64
    %c-2_i64_21 = arith.constant -2 : i64
    %86 = arith.addi %85, %c-2_i64_21 : i64
    llvm.store %86, %10 : i64, !llvm.ptr
    %c2_i64_22 = arith.constant 2 : i64
    %87 = arith.cmpi ult, %85, %c2_i64_22 : i64
    %c91_i8_23 = arith.constant 91 : i8
    cf.cond_br %87, ^bb1(%c91_i8_23 : i8), ^bb12
  ^bb12:  // pred: ^bb11
    %88 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %89 = llvm.load %88 : !llvm.ptr -> !llvm.ptr
    %90 = llvm.getelementptr %89[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %91 = llvm.load %90 : !llvm.ptr -> i256
    llvm.store %90, %88 : !llvm.ptr, !llvm.ptr
    %92 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %93 = llvm.load %92 : !llvm.ptr -> !llvm.ptr
    %94 = llvm.getelementptr %93[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %95 = llvm.load %94 : !llvm.ptr -> i256
    llvm.store %94, %92 : !llvm.ptr, !llvm.ptr
    "dora.return"(%91, %95) : (i256, i256) -> ()
  ^bb13:  // no predecessors
    cf.br ^bb14
  ^bb14:  // pred: ^bb13
    %c0_i64_24 = arith.constant 0 : i64
    %c1_i8 = arith.constant 1 : i8
    %96 = call @dora_fn_write_result(%arg0, %c0_i64_24, %c0_i64_24, %arg1, %c1_i8) : (!llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
    return %c1_i8 : i8
  }
}
