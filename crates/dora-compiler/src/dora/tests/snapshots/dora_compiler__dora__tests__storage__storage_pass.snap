---
source: crates/dora-compiler/src/dora/tests/storage.rs
expression: op
snapshot_kind: text
---
module {
  llvm.mlir.global internal @dora_global_stack_ptr() {addr_space = 0 : i32} : !llvm.ptr
  func.func @dora_u256_map_get(%arg0: memref<?x3xi256>, %arg1: i256) -> (i256, i1) {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c1_i256 = arith.constant 1 : i256
    %c0_i256 = arith.constant 0 : i256
    %false = arith.constant false
    %true = arith.constant true
    %dim = memref.dim %arg0, %c0 : memref<?x3xi256>
    %0 = call @dora_u256_map_hash(%arg0, %arg1) : (memref<?x3xi256>, i256) -> index
    %alloc = memref.alloc() : memref<1xindex>
    memref.store %0, %alloc[%c0] : memref<1xindex>
    %alloc_0 = memref.alloc() : memref<1xi256>
    %alloc_1 = memref.alloc() : memref<1xi1>
    memref.store %c0_i256, %alloc_0[%c0] : memref<1xi256>
    memref.store %false, %alloc_1[%c0] : memref<1xi1>
    scf.while : () -> () {
      %3 = memref.load %alloc[%c0] : memref<1xindex>
      %4 = memref.load %arg0[%3, %c2] : memref<?x3xi256>
      %5 = arith.cmpi eq, %4, %c1_i256 : i256
      scf.if %5 {
        %7 = memref.load %arg0[%3, %c0] : memref<?x3xi256>
        %8 = arith.cmpi eq, %7, %arg1 : i256
        scf.if %8 {
          %9 = memref.load %arg0[%3, %c1] : memref<?x3xi256>
          memref.store %9, %alloc_0[%c0] : memref<1xi256>
          memref.store %true, %alloc_1[%c0] : memref<1xi1>
        } else {
          %9 = arith.addi %3, %c1 : index
          %10 = arith.remsi %9, %dim : index
          memref.store %10, %alloc[%c0] : memref<1xindex>
        }
      } else {
      }
      %6 = scf.if %5 -> (i1) {
        %7 = memref.load %arg0[%3, %c0] : memref<?x3xi256>
        %8 = arith.cmpi ne, %7, %arg1 : i256
        scf.yield %8 : i1
      } else {
        %false_2 = arith.constant false
        scf.yield %false_2 : i1
      }
      scf.condition(%6)
    } do {
      scf.yield
    }
    %1 = memref.load %alloc_0[%c0] : memref<1xi256>
    %2 = memref.load %alloc_1[%c0] : memref<1xi1>
    memref.dealloc %alloc : memref<1xindex>
    memref.dealloc %alloc_0 : memref<1xi256>
    memref.dealloc %alloc_1 : memref<1xi1>
    return %1, %2 : i256, i1
  }
  func.func @dora_u256_map_insert(%arg0: memref<?x3xi256>, %arg1: i256, %arg2: i256) -> memref<?x3xi256> {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c1_i256 = arith.constant 1 : i256
    %c0_i256 = arith.constant 0 : i256
    %dim = memref.dim %arg0, %c0 : memref<?x3xi256>
    %0 = call @dora_u256_map_hash(%arg0, %arg1) : (memref<?x3xi256>, i256) -> index
    %alloc = memref.alloc() : memref<1xindex>
    memref.store %0, %alloc[%c0] : memref<1xindex>
    scf.while : () -> () {
      %1 = memref.load %alloc[%c0] : memref<1xindex>
      %2 = memref.load %arg0[%1, %c2] : memref<?x3xi256>
      %3 = arith.cmpi eq, %2, %c1_i256 : i256
      scf.if %3 {
        %4 = memref.load %arg0[%1, %c0] : memref<?x3xi256>
        %5 = arith.cmpi eq, %4, %arg1 : i256
        scf.if %5 {
          memref.store %arg2, %arg0[%1, %c1] : memref<?x3xi256>
        } else {
          %6 = arith.addi %1, %c1 : index
          %7 = arith.remsi %6, %dim : index
          memref.store %7, %alloc[%c0] : memref<1xindex>
        }
      } else {
        memref.store %arg1, %arg0[%1, %c0] : memref<?x3xi256>
        memref.store %arg2, %arg0[%1, %c1] : memref<?x3xi256>
        memref.store %c1_i256, %arg0[%1, %c2] : memref<?x3xi256>
      }
      scf.condition(%3)
    } do {
      scf.yield
    }
    memref.dealloc %alloc : memref<1xindex>
    return %arg0 : memref<?x3xi256>
  }
  func.func @dora_u256_map_hash(%arg0: memref<?x3xi256>, %arg1: i256) -> index {
    %c0 = arith.constant 0 : index
    %c1_i256 = arith.constant 1 : i256
    %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %arg1, %0 : i256, !llvm.ptr
    %dim = memref.dim %arg0, %c0 : memref<?x3xi256>
    %1 = arith.index_cast %dim : index to i64
    %2 = llvm.load %0 : !llvm.ptr -> vector<4xi64>
    %3 = llvm.mlir.constant(dense<0> : vector<4xi64>) : vector<4xi64>
    %4 = llvm.xor %2, %3  : vector<4xi64>
    %5 = "llvm.vector.reduce.xor"(%4) : (vector<4xi64>) -> i64
    %6 = llvm.urem %5, %1  : i64
    %7 = arith.index_cast %6 : i64 to index
    return %7 : index
  }
  func.func @dora_u256_map_simple_hash(%arg0: memref<?x3xi256>, %arg1: i256) -> index {
    %c0 = arith.constant 0 : index
    %dim = memref.dim %arg0, %c0 : memref<?x3xi256>
    %0 = arith.index_cast %dim : index to i256
    %1 = llvm.urem %arg1, %0  : i256
    %2 = arith.index_cast %1 : i256 to index
    return %2 : index
  }
  func.func @dora_u256_map_new(%arg0: index) -> memref<?x3xi256> {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c0_i256 = arith.constant 0 : i256
    %alloc = memref.alloc(%arg0) : memref<?x3xi256>
    scf.for %arg1 = %c0 to %arg0 step %c1 {
      memref.store %c0_i256, %alloc[%arg1, %c0] : memref<?x3xi256>
      memref.store %c0_i256, %alloc[%arg1, %c1] : memref<?x3xi256>
      memref.store %c0_i256, %alloc[%arg1, %c2] : memref<?x3xi256>
    }
    return %alloc : memref<?x3xi256>
  }
  llvm.mlir.global internal @dora_global_stack_length() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_memory_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_memory_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_calldata_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_calldata_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_gas_counter() {addr_space = 0 : i32} : i64
  llvm.mlir.global external @dora_global_ctx_is_static() {addr_space = 0 : i32} : !llvm.ptr
  func.func private @dora_fn_debug_print(i32)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_chainid(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_gaslimit(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_code_copy(!llvm.ptr, i64, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_call(!llvm.ptr, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr, i8) -> !llvm.ptr
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, i64, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_return_data_size(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_return_data_copy(!llvm.ptr, i64, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_transient_storage_read(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_transient_storage_write(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func public @main(%arg0: !llvm.ptr, %arg1: i64) -> i8 attributes {llvm.emit_c_interface} {
    %c16 = arith.constant 16 : index
    %0 = call @dora_u256_map_new(%c16) : (index) -> memref<?x3xi256>
    %c1024_i256 = arith.constant 1024 : i256
    %1 = llvm.alloca %c1024_i256 x i256 : (i256) -> !llvm.ptr
    %2 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    llvm.store %1, %2 : !llvm.ptr, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %3 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    llvm.store %c0_i64, %3 : i64, !llvm.ptr
    %c0_i64_0 = arith.constant 0 : i64
    %4 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %c0_i64_0, %4 : i64, !llvm.ptr
    %5 = call @dora_fn_calldata(%arg0) : (!llvm.ptr) -> !llvm.ptr
    %6 = llvm.mlir.addressof @dora_global_calldata_ptr : !llvm.ptr
    llvm.store %5, %6 : !llvm.ptr, !llvm.ptr
    %7 = call @dora_fn_calldata_size(%arg0) : (!llvm.ptr) -> i64
    %8 = llvm.mlir.addressof @dora_global_calldata_size : !llvm.ptr
    llvm.store %7, %8 : i64, !llvm.ptr
    %9 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    llvm.store %arg1, %9 : i64, !llvm.ptr
    cf.br ^bb5
  ^bb1(%10: i8):  // 21 preds: ^bb2, ^bb4, ^bb5, ^bb8, ^bb9, ^bb12, ^bb13, ^bb16, ^bb17, ^bb20, ^bb21, ^bb24, ^bb25, ^bb28, ^bb29, ^bb32, ^bb33, ^bb36, ^bb37, ^bb41, ^bb42
    %c0_i64_1 = arith.constant 0 : i64
    %11 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %12 = llvm.load %11 : !llvm.ptr -> i64
    %13 = call @dora_fn_write_result(%arg0, %c0_i64_1, %c0_i64_1, %12, %10) : (!llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
    return %10 : i8
  ^bb2(%14: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %14 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3:  // pred: ^bb4
    %c100_i256 = arith.constant 100 : i256
    %15 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %16 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    llvm.store %c100_i256, %16 : i256, !llvm.ptr
    %17 = llvm.getelementptr %16[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %17, %15 : !llvm.ptr, !llvm.ptr
    cf.br ^bb9
  ^bb4:  // pred: ^bb6
    %18 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64 = arith.constant 1024 : i64
    %19 = llvm.load %18 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %20 = arith.addi %19, %c1_i64 : i64
    llvm.store %20, %18 : i64, !llvm.ptr
    %21 = arith.cmpi ult, %c1024_i64, %20 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %21, ^bb1(%c92_i8 : i8), ^bb3
  ^bb5:  // pred: ^bb0
    %22 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %23 = llvm.load %22 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    %24 = arith.cmpi uge, %23, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %24, ^bb6, ^bb1(%c80_i8 : i8)
  ^bb6:  // pred: ^bb5
    %25 = arith.subi %23, %c3_i64 : i64
    llvm.store %25, %22 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb7:  // pred: ^bb8
    %c0_i256 = arith.constant 0 : i256
    %26 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %27 = llvm.load %26 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256, %27 : i256, !llvm.ptr
    %28 = llvm.getelementptr %27[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %28, %26 : !llvm.ptr, !llvm.ptr
    cf.br ^bb13
  ^bb8:  // pred: ^bb10
    %29 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_2 = arith.constant 1024 : i64
    %30 = llvm.load %29 : !llvm.ptr -> i64
    %c1_i64_3 = arith.constant 1 : i64
    %31 = arith.addi %30, %c1_i64_3 : i64
    llvm.store %31, %29 : i64, !llvm.ptr
    %32 = arith.cmpi ult, %c1024_i64_2, %31 : i64
    %c92_i8_4 = arith.constant 92 : i8
    cf.cond_br %32, ^bb1(%c92_i8_4 : i8), ^bb7
  ^bb9:  // pred: ^bb3
    %33 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %34 = llvm.load %33 : !llvm.ptr -> i64
    %c3_i64_5 = arith.constant 3 : i64
    %35 = arith.cmpi uge, %34, %c3_i64_5 : i64
    %c80_i8_6 = arith.constant 80 : i8
    cf.cond_br %35, ^bb10, ^bb1(%c80_i8_6 : i8)
  ^bb10:  // pred: ^bb9
    %36 = arith.subi %34, %c3_i64_5 : i64
    llvm.store %36, %33 : i64, !llvm.ptr
    cf.br ^bb8
  ^bb11:  // pred: ^bb12
    %37 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %38 = llvm.load %37 : !llvm.ptr -> !llvm.ptr
    %39 = llvm.getelementptr %38[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %40 = llvm.load %39 : !llvm.ptr -> i256
    llvm.store %39, %37 : !llvm.ptr, !llvm.ptr
    %41 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %42 = llvm.load %41 : !llvm.ptr -> !llvm.ptr
    %43 = llvm.getelementptr %42[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %44 = llvm.load %43 : !llvm.ptr -> i256
    llvm.store %43, %41 : !llvm.ptr, !llvm.ptr
    %45 = call @dora_u256_map_insert(%0, %40, %44) : (memref<?x3xi256>, i256, i256) -> memref<?x3xi256>
    "dora.sstore"(%40, %44) : (i256, i256) -> ()
    cf.br ^bb17
  ^bb12:  // pred: ^bb14
    %46 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_7 = arith.constant 1024 : i64
    %47 = llvm.load %46 : !llvm.ptr -> i64
    %c-2_i64 = arith.constant -2 : i64
    %48 = arith.addi %47, %c-2_i64 : i64
    llvm.store %48, %46 : i64, !llvm.ptr
    %c2_i64 = arith.constant 2 : i64
    %49 = arith.cmpi ult, %47, %c2_i64 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %49, ^bb1(%c91_i8 : i8), ^bb11
  ^bb13:  // pred: ^bb7
    %50 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %51 = llvm.load %50 : !llvm.ptr -> i64
    %c0_i64_8 = arith.constant 0 : i64
    %52 = arith.cmpi uge, %51, %c0_i64_8 : i64
    %c80_i8_9 = arith.constant 80 : i8
    cf.cond_br %52, ^bb14, ^bb1(%c80_i8_9 : i8)
  ^bb14:  // pred: ^bb13
    %53 = arith.subi %51, %c0_i64_8 : i64
    llvm.store %53, %50 : i64, !llvm.ptr
    cf.br ^bb12
  ^bb15:  // pred: ^bb16
    %c0_i256_10 = arith.constant 0 : i256
    %54 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %55 = llvm.load %54 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_10, %55 : i256, !llvm.ptr
    %56 = llvm.getelementptr %55[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %56, %54 : !llvm.ptr, !llvm.ptr
    cf.br ^bb21
  ^bb16:  // pred: ^bb18
    %57 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_11 = arith.constant 1024 : i64
    %58 = llvm.load %57 : !llvm.ptr -> i64
    %c1_i64_12 = arith.constant 1 : i64
    %59 = arith.addi %58, %c1_i64_12 : i64
    llvm.store %59, %57 : i64, !llvm.ptr
    %60 = arith.cmpi ult, %c1024_i64_11, %59 : i64
    %c92_i8_13 = arith.constant 92 : i8
    cf.cond_br %60, ^bb1(%c92_i8_13 : i8), ^bb15
  ^bb17:  // pred: ^bb11
    %61 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %62 = llvm.load %61 : !llvm.ptr -> i64
    %c3_i64_14 = arith.constant 3 : i64
    %63 = arith.cmpi uge, %62, %c3_i64_14 : i64
    %c80_i8_15 = arith.constant 80 : i8
    cf.cond_br %63, ^bb18, ^bb1(%c80_i8_15 : i8)
  ^bb18:  // pred: ^bb17
    %64 = arith.subi %62, %c3_i64_14 : i64
    llvm.store %64, %61 : i64, !llvm.ptr
    cf.br ^bb16
  ^bb19:  // pred: ^bb20
    %65 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %66 = llvm.load %65 : !llvm.ptr -> !llvm.ptr
    %67 = llvm.getelementptr %66[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %68 = llvm.load %67 : !llvm.ptr -> i256
    llvm.store %67, %65 : !llvm.ptr, !llvm.ptr
    %69:2 = call @dora_u256_map_get(%45, %68) : (memref<?x3xi256>, i256) -> (i256, i1)
    %70 = scf.if %69#1 -> (i256) {
      scf.yield %69#0 : i256
    } else {
      %150 = "dora.sload"(%68) : (i256) -> i256
      scf.yield %150 : i256
    }
    %71 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %72 = llvm.load %71 : !llvm.ptr -> !llvm.ptr
    llvm.store %70, %72 : i256, !llvm.ptr
    %73 = llvm.getelementptr %72[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %73, %71 : !llvm.ptr, !llvm.ptr
    cf.br ^bb25
  ^bb20:  // pred: ^bb22
    %74 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_16 = arith.constant 1024 : i64
    %75 = llvm.load %74 : !llvm.ptr -> i64
    %c0_i64_17 = arith.constant 0 : i64
    %76 = arith.addi %75, %c0_i64_17 : i64
    llvm.store %76, %74 : i64, !llvm.ptr
    %c1_i64_18 = arith.constant 1 : i64
    %77 = arith.cmpi ult, %75, %c1_i64_18 : i64
    %c91_i8_19 = arith.constant 91 : i8
    cf.cond_br %77, ^bb1(%c91_i8_19 : i8), ^bb19
  ^bb21:  // pred: ^bb15
    %78 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %79 = llvm.load %78 : !llvm.ptr -> i64
    %c0_i64_20 = arith.constant 0 : i64
    %80 = arith.cmpi uge, %79, %c0_i64_20 : i64
    %c80_i8_21 = arith.constant 80 : i8
    cf.cond_br %80, ^bb22, ^bb1(%c80_i8_21 : i8)
  ^bb22:  // pred: ^bb21
    %81 = arith.subi %79, %c0_i64_20 : i64
    llvm.store %81, %78 : i64, !llvm.ptr
    cf.br ^bb20
  ^bb23:  // pred: ^bb24
    %c0_i256_22 = arith.constant 0 : i256
    %82 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %83 = llvm.load %82 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_22, %83 : i256, !llvm.ptr
    %84 = llvm.getelementptr %83[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %84, %82 : !llvm.ptr, !llvm.ptr
    cf.br ^bb29
  ^bb24:  // pred: ^bb26
    %85 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_23 = arith.constant 1024 : i64
    %86 = llvm.load %85 : !llvm.ptr -> i64
    %c1_i64_24 = arith.constant 1 : i64
    %87 = arith.addi %86, %c1_i64_24 : i64
    llvm.store %87, %85 : i64, !llvm.ptr
    %88 = arith.cmpi ult, %c1024_i64_23, %87 : i64
    %c92_i8_25 = arith.constant 92 : i8
    cf.cond_br %88, ^bb1(%c92_i8_25 : i8), ^bb23
  ^bb25:  // pred: ^bb19
    %89 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %90 = llvm.load %89 : !llvm.ptr -> i64
    %c2_i64_26 = arith.constant 2 : i64
    %91 = arith.cmpi uge, %90, %c2_i64_26 : i64
    %c80_i8_27 = arith.constant 80 : i8
    cf.cond_br %91, ^bb26, ^bb1(%c80_i8_27 : i8)
  ^bb26:  // pred: ^bb25
    %92 = arith.subi %90, %c2_i64_26 : i64
    llvm.store %92, %89 : i64, !llvm.ptr
    cf.br ^bb24
  ^bb27:  // pred: ^bb28
    %93 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %94 = llvm.load %93 : !llvm.ptr -> !llvm.ptr
    %95 = llvm.getelementptr %94[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %96 = llvm.load %95 : !llvm.ptr -> i256
    llvm.store %95, %93 : !llvm.ptr, !llvm.ptr
    %97 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %98 = llvm.load %97 : !llvm.ptr -> !llvm.ptr
    %99 = llvm.getelementptr %98[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %100 = llvm.load %99 : !llvm.ptr -> i256
    llvm.store %99, %97 : !llvm.ptr, !llvm.ptr
    "dora.mstore"(%96, %100) : (i256, i256) -> ()
    cf.br ^bb33
  ^bb28:  // pred: ^bb30
    %101 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_28 = arith.constant 1024 : i64
    %102 = llvm.load %101 : !llvm.ptr -> i64
    %c-2_i64_29 = arith.constant -2 : i64
    %103 = arith.addi %102, %c-2_i64_29 : i64
    llvm.store %103, %101 : i64, !llvm.ptr
    %c2_i64_30 = arith.constant 2 : i64
    %104 = arith.cmpi ult, %102, %c2_i64_30 : i64
    %c91_i8_31 = arith.constant 91 : i8
    cf.cond_br %104, ^bb1(%c91_i8_31 : i8), ^bb27
  ^bb29:  // pred: ^bb23
    %105 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %106 = llvm.load %105 : !llvm.ptr -> i64
    %c3_i64_32 = arith.constant 3 : i64
    %107 = arith.cmpi uge, %106, %c3_i64_32 : i64
    %c80_i8_33 = arith.constant 80 : i8
    cf.cond_br %107, ^bb30, ^bb1(%c80_i8_33 : i8)
  ^bb30:  // pred: ^bb29
    %108 = arith.subi %106, %c3_i64_32 : i64
    llvm.store %108, %105 : i64, !llvm.ptr
    cf.br ^bb28
  ^bb31:  // pred: ^bb32
    %c32_i256 = arith.constant 32 : i256
    %109 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %110 = llvm.load %109 : !llvm.ptr -> !llvm.ptr
    llvm.store %c32_i256, %110 : i256, !llvm.ptr
    %111 = llvm.getelementptr %110[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %111, %109 : !llvm.ptr, !llvm.ptr
    cf.br ^bb37
  ^bb32:  // pred: ^bb34
    %112 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_34 = arith.constant 1024 : i64
    %113 = llvm.load %112 : !llvm.ptr -> i64
    %c1_i64_35 = arith.constant 1 : i64
    %114 = arith.addi %113, %c1_i64_35 : i64
    llvm.store %114, %112 : i64, !llvm.ptr
    %115 = arith.cmpi ult, %c1024_i64_34, %114 : i64
    %c92_i8_36 = arith.constant 92 : i8
    cf.cond_br %115, ^bb1(%c92_i8_36 : i8), ^bb31
  ^bb33:  // pred: ^bb27
    %116 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %117 = llvm.load %116 : !llvm.ptr -> i64
    %c3_i64_37 = arith.constant 3 : i64
    %118 = arith.cmpi uge, %117, %c3_i64_37 : i64
    %c80_i8_38 = arith.constant 80 : i8
    cf.cond_br %118, ^bb34, ^bb1(%c80_i8_38 : i8)
  ^bb34:  // pred: ^bb33
    %119 = arith.subi %117, %c3_i64_37 : i64
    llvm.store %119, %116 : i64, !llvm.ptr
    cf.br ^bb32
  ^bb35:  // pred: ^bb36
    %c0_i256_39 = arith.constant 0 : i256
    %120 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %121 = llvm.load %120 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_39, %121 : i256, !llvm.ptr
    %122 = llvm.getelementptr %121[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %122, %120 : !llvm.ptr, !llvm.ptr
    cf.br ^bb42
  ^bb36:  // pred: ^bb38
    %123 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_40 = arith.constant 1024 : i64
    %124 = llvm.load %123 : !llvm.ptr -> i64
    %c1_i64_41 = arith.constant 1 : i64
    %125 = arith.addi %124, %c1_i64_41 : i64
    llvm.store %125, %123 : i64, !llvm.ptr
    %126 = arith.cmpi ult, %c1024_i64_40, %125 : i64
    %c92_i8_42 = arith.constant 92 : i8
    cf.cond_br %126, ^bb1(%c92_i8_42 : i8), ^bb35
  ^bb37:  // pred: ^bb31
    %127 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %128 = llvm.load %127 : !llvm.ptr -> i64
    %c2_i64_43 = arith.constant 2 : i64
    %129 = arith.cmpi uge, %128, %c2_i64_43 : i64
    %c80_i8_44 = arith.constant 80 : i8
    cf.cond_br %129, ^bb38, ^bb1(%c80_i8_44 : i8)
  ^bb38:  // pred: ^bb37
    %130 = arith.subi %128, %c2_i64_43 : i64
    llvm.store %130, %127 : i64, !llvm.ptr
    cf.br ^bb36
  ^bb39:  // pred: ^bb41
    %131 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %132 = llvm.load %131 : !llvm.ptr -> !llvm.ptr
    %133 = llvm.getelementptr %132[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %134 = llvm.load %133 : !llvm.ptr -> i256
    llvm.store %133, %131 : !llvm.ptr, !llvm.ptr
    %135 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %136 = llvm.load %135 : !llvm.ptr -> !llvm.ptr
    %137 = llvm.getelementptr %136[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %138 = llvm.load %137 : !llvm.ptr -> i256
    llvm.store %137, %135 : !llvm.ptr, !llvm.ptr
    "dora.return"(%134, %138) : (i256, i256) -> ()
  ^bb40:  // no predecessors
    cf.br ^bb44
  ^bb41:  // pred: ^bb43
    %139 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_45 = arith.constant 1024 : i64
    %140 = llvm.load %139 : !llvm.ptr -> i64
    %c-2_i64_46 = arith.constant -2 : i64
    %141 = arith.addi %140, %c-2_i64_46 : i64
    llvm.store %141, %139 : i64, !llvm.ptr
    %c2_i64_47 = arith.constant 2 : i64
    %142 = arith.cmpi ult, %140, %c2_i64_47 : i64
    %c91_i8_48 = arith.constant 91 : i8
    cf.cond_br %142, ^bb1(%c91_i8_48 : i8), ^bb39
  ^bb42:  // pred: ^bb35
    %143 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %144 = llvm.load %143 : !llvm.ptr -> i64
    %c0_i64_49 = arith.constant 0 : i64
    %145 = arith.cmpi uge, %144, %c0_i64_49 : i64
    %c80_i8_50 = arith.constant 80 : i8
    cf.cond_br %145, ^bb43, ^bb1(%c80_i8_50 : i8)
  ^bb43:  // pred: ^bb42
    %146 = arith.subi %144, %c0_i64_49 : i64
    llvm.store %146, %143 : i64, !llvm.ptr
    cf.br ^bb41
  ^bb44:  // pred: ^bb40
    %c0_i64_51 = arith.constant 0 : i64
    %c1_i8 = arith.constant 1 : i8
    %147 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %148 = llvm.load %147 : !llvm.ptr -> i64
    %149 = call @dora_fn_write_result(%arg0, %c0_i64_51, %c0_i64_51, %148, %c1_i8) : (!llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
    return %c1_i8 : i8
  }
}
