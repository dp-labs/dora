---
source: crates/dora-compiler/src/dora/tests/storage.rs
expression: op
snapshot_kind: text
---
module {
  llvm.mlir.global internal @dora_global_stack_ptr() {addr_space = 0 : i32} : !llvm.ptr
  func.func @dora_u256_map_get(%arg0: memref<?x3xi256>, %arg1: i256) -> (i256, i1) {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c1_i256 = arith.constant 1 : i256
    %c0_i256 = arith.constant 0 : i256
    %false = arith.constant false
    %true = arith.constant true
    %dim = memref.dim %arg0, %c0 : memref<?x3xi256>
    %0 = call @dora_u256_map_hash(%arg0, %arg1) : (memref<?x3xi256>, i256) -> index
    %alloc = memref.alloc() : memref<1xindex>
    memref.store %0, %alloc[%c0] : memref<1xindex>
    %alloc_0 = memref.alloc() : memref<1xi256>
    %alloc_1 = memref.alloc() : memref<1xi1>
    memref.store %c0_i256, %alloc_0[%c0] : memref<1xi256>
    memref.store %false, %alloc_1[%c0] : memref<1xi1>
    scf.while : () -> () {
      %3 = memref.load %alloc[%c0] : memref<1xindex>
      %4 = memref.load %arg0[%3, %c2] : memref<?x3xi256>
      %5 = arith.cmpi eq, %4, %c1_i256 : i256
      scf.if %5 {
        %7 = memref.load %arg0[%3, %c0] : memref<?x3xi256>
        %8 = arith.cmpi eq, %7, %arg1 : i256
        scf.if %8 {
          %9 = memref.load %arg0[%3, %c1] : memref<?x3xi256>
          memref.store %9, %alloc_0[%c0] : memref<1xi256>
          memref.store %true, %alloc_1[%c0] : memref<1xi1>
        } else {
          %9 = arith.addi %3, %c1 : index
          %10 = arith.remsi %9, %dim : index
          memref.store %10, %alloc[%c0] : memref<1xindex>
        }
      } else {
      }
      %6 = scf.if %5 -> (i1) {
        %7 = memref.load %arg0[%3, %c0] : memref<?x3xi256>
        %8 = arith.cmpi ne, %7, %arg1 : i256
        scf.yield %8 : i1
      } else {
        %false_2 = arith.constant false
        scf.yield %false_2 : i1
      }
      scf.condition(%6)
    } do {
      scf.yield
    }
    %1 = memref.load %alloc_0[%c0] : memref<1xi256>
    %2 = memref.load %alloc_1[%c0] : memref<1xi1>
    memref.dealloc %alloc : memref<1xindex>
    memref.dealloc %alloc_0 : memref<1xi256>
    memref.dealloc %alloc_1 : memref<1xi1>
    return %1, %2 : i256, i1
  }
  func.func @dora_u256_map_insert(%arg0: memref<?x3xi256>, %arg1: i256, %arg2: i256) -> memref<?x3xi256> {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c1_i256 = arith.constant 1 : i256
    %c0_i256 = arith.constant 0 : i256
    %dim = memref.dim %arg0, %c0 : memref<?x3xi256>
    %0 = call @dora_u256_map_hash(%arg0, %arg1) : (memref<?x3xi256>, i256) -> index
    %alloc = memref.alloc() : memref<1xindex>
    memref.store %0, %alloc[%c0] : memref<1xindex>
    scf.while : () -> () {
      %1 = memref.load %alloc[%c0] : memref<1xindex>
      %2 = memref.load %arg0[%1, %c2] : memref<?x3xi256>
      %3 = arith.cmpi eq, %2, %c1_i256 : i256
      scf.if %3 {
        %4 = memref.load %arg0[%1, %c0] : memref<?x3xi256>
        %5 = arith.cmpi eq, %4, %arg1 : i256
        scf.if %5 {
          memref.store %arg2, %arg0[%1, %c1] : memref<?x3xi256>
        } else {
          %6 = arith.addi %1, %c1 : index
          %7 = arith.remsi %6, %dim : index
          memref.store %7, %alloc[%c0] : memref<1xindex>
        }
      } else {
        memref.store %arg1, %arg0[%1, %c0] : memref<?x3xi256>
        memref.store %arg2, %arg0[%1, %c1] : memref<?x3xi256>
        memref.store %c1_i256, %arg0[%1, %c2] : memref<?x3xi256>
      }
      scf.condition(%3)
    } do {
      scf.yield
    }
    memref.dealloc %alloc : memref<1xindex>
    return %arg0 : memref<?x3xi256>
  }
  func.func @dora_u256_map_hash(%arg0: memref<?x3xi256>, %arg1: i256) -> index {
    %c0 = arith.constant 0 : index
    %c1_i256 = arith.constant 1 : i256
    %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %arg1, %0 : i256, !llvm.ptr
    %dim = memref.dim %arg0, %c0 : memref<?x3xi256>
    %1 = arith.index_cast %dim : index to i64
    %2 = llvm.load %0 : !llvm.ptr -> vector<4xi64>
    %3 = llvm.mlir.constant(dense<0> : vector<4xi64>) : vector<4xi64>
    %4 = llvm.xor %2, %3  : vector<4xi64>
    %5 = "llvm.vector.reduce.xor"(%4) : (vector<4xi64>) -> i64
    %6 = llvm.urem %5, %1  : i64
    %7 = arith.index_cast %6 : i64 to index
    return %7 : index
  }
  func.func @dora_u256_map_simple_hash(%arg0: memref<?x3xi256>, %arg1: i256) -> index {
    %c0 = arith.constant 0 : index
    %dim = memref.dim %arg0, %c0 : memref<?x3xi256>
    %0 = arith.index_cast %dim : index to i256
    %1 = llvm.urem %arg1, %0  : i256
    %2 = arith.index_cast %1 : i256 to index
    return %2 : index
  }
  func.func @dora_u256_map_new(%arg0: index) -> memref<?x3xi256> {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c0_i256 = arith.constant 0 : i256
    %alloc = memref.alloc(%arg0) : memref<?x3xi256>
    scf.for %arg1 = %c0 to %arg0 step %c1 {
      memref.store %c0_i256, %alloc[%arg1, %c0] : memref<?x3xi256>
      memref.store %c0_i256, %alloc[%arg1, %c1] : memref<?x3xi256>
      memref.store %c0_i256, %alloc[%arg1, %c2] : memref<?x3xi256>
    }
    return %alloc : memref<?x3xi256>
  }
  llvm.mlir.global internal @dora_global_stack_length() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_memory_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_memory_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_calldata_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_global_calldata_size() {addr_space = 0 : i32} : i64
  llvm.mlir.global internal @dora_global_gas_counter() {addr_space = 0 : i32} : i64
  func.func private @dora_fn_nop()
  func.func private @dora_fn_tracing(!llvm.ptr, i8, i64, !llvm.ptr, i64)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_fn_is_static(!llvm.ptr) -> i8
  func.func private @dora_fn_exp(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_chainid(!llvm.ptr) -> i64
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gaslimit_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_code_copy(!llvm.ptr, !llvm.ptr, i64, i64)
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_call(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_returndata_copy(!llvm.ptr, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_tload(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_tstore(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func public @main(%arg0: !llvm.ptr, %arg1: i64) -> i8 attributes {llvm.emit_c_interface} {
    %c16 = arith.constant 16 : index
    %0 = call @dora_u256_map_new(%c16) : (index) -> memref<?x3xi256>
    %c1024_i256 = arith.constant 1024 : i256
    %1 = llvm.alloca %c1024_i256 x i256 : (i256) -> !llvm.ptr
    %2 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    llvm.store %1, %2 : !llvm.ptr, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %3 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    llvm.store %c0_i64, %3 : i64, !llvm.ptr
    %c0_i64_0 = arith.constant 0 : i64
    %4 = llvm.mlir.addressof @dora_global_memory_size : !llvm.ptr
    llvm.store %c0_i64_0, %4 : i64, !llvm.ptr
    %5 = call @dora_fn_calldata(%arg0) : (!llvm.ptr) -> !llvm.ptr
    %6 = llvm.mlir.addressof @dora_global_calldata_ptr : !llvm.ptr
    llvm.store %5, %6 : !llvm.ptr, !llvm.ptr
    %7 = call @dora_fn_calldata_size(%arg0) : (!llvm.ptr) -> i64
    %8 = llvm.mlir.addressof @dora_global_calldata_size : !llvm.ptr
    llvm.store %7, %8 : i64, !llvm.ptr
    %9 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    llvm.store %arg1, %9 : i64, !llvm.ptr
    cf.br ^bb5
  ^bb1(%10: i8):  // 21 preds: ^bb2, ^bb4, ^bb5, ^bb8, ^bb9, ^bb12, ^bb13, ^bb16, ^bb17, ^bb20, ^bb21, ^bb24, ^bb25, ^bb28, ^bb29, ^bb32, ^bb33, ^bb36, ^bb37, ^bb41, ^bb42
    %c0_i64_1 = arith.constant 0 : i64
    %11 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %12 = llvm.load %11 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_1, %c0_i64_1, %12, %10) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %10 : i8
  ^bb2(%13: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %13 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3:  // pred: ^bb4
    %c100_i256 = arith.constant 100 : i256
    %14 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %15 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    llvm.store %c100_i256, %15 : i256, !llvm.ptr
    %16 = llvm.getelementptr %15[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %16, %14 : !llvm.ptr, !llvm.ptr
    cf.br ^bb9
  ^bb4:  // pred: ^bb6
    %17 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64 = arith.constant 1024 : i64
    %18 = llvm.load %17 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %19 = arith.addi %18, %c1_i64 : i64
    llvm.store %19, %17 : i64, !llvm.ptr
    %20 = arith.cmpi ult, %c1024_i64, %19 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %20, ^bb1(%c92_i8 : i8), ^bb3
  ^bb5:  // pred: ^bb0
    %21 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %22 = llvm.load %21 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %23 = arith.cmpi uge, %22, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %23, ^bb6, ^bb1(%c80_i8 : i8)
  ^bb6:  // pred: ^bb5
    %24 = arith.subi %22, %c3_i64 : i64
    llvm.store %24, %21 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb7:  // pred: ^bb8
    %c0_i256 = arith.constant 0 : i256
    %25 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %26 = llvm.load %25 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256, %26 : i256, !llvm.ptr
    %27 = llvm.getelementptr %26[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %27, %25 : !llvm.ptr, !llvm.ptr
    cf.br ^bb13
  ^bb8:  // pred: ^bb10
    %28 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_2 = arith.constant 1024 : i64
    %29 = llvm.load %28 : !llvm.ptr -> i64
    %c1_i64_3 = arith.constant 1 : i64
    %30 = arith.addi %29, %c1_i64_3 : i64
    llvm.store %30, %28 : i64, !llvm.ptr
    %31 = arith.cmpi ult, %c1024_i64_2, %30 : i64
    %c92_i8_4 = arith.constant 92 : i8
    cf.cond_br %31, ^bb1(%c92_i8_4 : i8), ^bb7
  ^bb9:  // pred: ^bb3
    %32 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %33 = llvm.load %32 : !llvm.ptr -> i64
    %c3_i64_5 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %34 = arith.cmpi uge, %33, %c3_i64_5 : i64
    %c80_i8_6 = arith.constant 80 : i8
    cf.cond_br %34, ^bb10, ^bb1(%c80_i8_6 : i8)
  ^bb10:  // pred: ^bb9
    %35 = arith.subi %33, %c3_i64_5 : i64
    llvm.store %35, %32 : i64, !llvm.ptr
    cf.br ^bb8
  ^bb11:  // pred: ^bb12
    %36 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %37 = llvm.load %36 : !llvm.ptr -> !llvm.ptr
    %38 = llvm.getelementptr %37[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %39 = llvm.load %38 : !llvm.ptr -> i256
    llvm.store %38, %36 : !llvm.ptr, !llvm.ptr
    %40 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %41 = llvm.load %40 : !llvm.ptr -> !llvm.ptr
    %42 = llvm.getelementptr %41[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %43 = llvm.load %42 : !llvm.ptr -> i256
    llvm.store %42, %40 : !llvm.ptr, !llvm.ptr
    %44 = call @dora_u256_map_insert(%0, %39, %43) : (memref<?x3xi256>, i256, i256) -> memref<?x3xi256>
    "dora.sstore"(%39, %43) : (i256, i256) -> ()
    cf.br ^bb17
  ^bb12:  // pred: ^bb14
    %45 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_7 = arith.constant 1024 : i64
    %46 = llvm.load %45 : !llvm.ptr -> i64
    %c-2_i64 = arith.constant -2 : i64
    %47 = arith.addi %46, %c-2_i64 : i64
    llvm.store %47, %45 : i64, !llvm.ptr
    %c2_i64 = arith.constant 2 : i64
    %48 = arith.cmpi ult, %46, %c2_i64 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %48, ^bb1(%c91_i8 : i8), ^bb11
  ^bb13:  // pred: ^bb7
    %49 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %50 = llvm.load %49 : !llvm.ptr -> i64
    %c0_i64_8 = arith.constant 0 : i64
    call @dora_fn_nop() : () -> ()
    %51 = arith.cmpi uge, %50, %c0_i64_8 : i64
    %c80_i8_9 = arith.constant 80 : i8
    cf.cond_br %51, ^bb14, ^bb1(%c80_i8_9 : i8)
  ^bb14:  // pred: ^bb13
    %52 = arith.subi %50, %c0_i64_8 : i64
    llvm.store %52, %49 : i64, !llvm.ptr
    cf.br ^bb12
  ^bb15:  // pred: ^bb16
    %c0_i256_10 = arith.constant 0 : i256
    %53 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %54 = llvm.load %53 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_10, %54 : i256, !llvm.ptr
    %55 = llvm.getelementptr %54[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %55, %53 : !llvm.ptr, !llvm.ptr
    cf.br ^bb21
  ^bb16:  // pred: ^bb18
    %56 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_11 = arith.constant 1024 : i64
    %57 = llvm.load %56 : !llvm.ptr -> i64
    %c1_i64_12 = arith.constant 1 : i64
    %58 = arith.addi %57, %c1_i64_12 : i64
    llvm.store %58, %56 : i64, !llvm.ptr
    %59 = arith.cmpi ult, %c1024_i64_11, %58 : i64
    %c92_i8_13 = arith.constant 92 : i8
    cf.cond_br %59, ^bb1(%c92_i8_13 : i8), ^bb15
  ^bb17:  // pred: ^bb11
    %60 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %61 = llvm.load %60 : !llvm.ptr -> i64
    %c3_i64_14 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %62 = arith.cmpi uge, %61, %c3_i64_14 : i64
    %c80_i8_15 = arith.constant 80 : i8
    cf.cond_br %62, ^bb18, ^bb1(%c80_i8_15 : i8)
  ^bb18:  // pred: ^bb17
    %63 = arith.subi %61, %c3_i64_14 : i64
    llvm.store %63, %60 : i64, !llvm.ptr
    cf.br ^bb16
  ^bb19:  // pred: ^bb20
    %64 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %65 = llvm.load %64 : !llvm.ptr -> !llvm.ptr
    %66 = llvm.getelementptr %65[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %67 = llvm.load %66 : !llvm.ptr -> i256
    llvm.store %66, %64 : !llvm.ptr, !llvm.ptr
    %68:2 = call @dora_u256_map_get(%44, %67) : (memref<?x3xi256>, i256) -> (i256, i1)
    %69 = scf.if %68#1 -> (i256) {
      scf.yield %68#0 : i256
    } else {
      %148 = "dora.sload"(%67) : (i256) -> i256
      scf.yield %148 : i256
    }
    %70 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %71 = llvm.load %70 : !llvm.ptr -> !llvm.ptr
    llvm.store %69, %71 : i256, !llvm.ptr
    %72 = llvm.getelementptr %71[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %72, %70 : !llvm.ptr, !llvm.ptr
    cf.br ^bb25
  ^bb20:  // pred: ^bb22
    %73 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_16 = arith.constant 1024 : i64
    %74 = llvm.load %73 : !llvm.ptr -> i64
    %c0_i64_17 = arith.constant 0 : i64
    %75 = arith.addi %74, %c0_i64_17 : i64
    llvm.store %75, %73 : i64, !llvm.ptr
    %c1_i64_18 = arith.constant 1 : i64
    %76 = arith.cmpi ult, %74, %c1_i64_18 : i64
    %c91_i8_19 = arith.constant 91 : i8
    cf.cond_br %76, ^bb1(%c91_i8_19 : i8), ^bb19
  ^bb21:  // pred: ^bb15
    %77 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %78 = llvm.load %77 : !llvm.ptr -> i64
    %c0_i64_20 = arith.constant 0 : i64
    call @dora_fn_nop() : () -> ()
    %79 = arith.cmpi uge, %78, %c0_i64_20 : i64
    %c80_i8_21 = arith.constant 80 : i8
    cf.cond_br %79, ^bb22, ^bb1(%c80_i8_21 : i8)
  ^bb22:  // pred: ^bb21
    %80 = arith.subi %78, %c0_i64_20 : i64
    llvm.store %80, %77 : i64, !llvm.ptr
    cf.br ^bb20
  ^bb23:  // pred: ^bb24
    %c0_i256_22 = arith.constant 0 : i256
    %81 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %82 = llvm.load %81 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_22, %82 : i256, !llvm.ptr
    %83 = llvm.getelementptr %82[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %83, %81 : !llvm.ptr, !llvm.ptr
    cf.br ^bb29
  ^bb24:  // pred: ^bb26
    %84 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_23 = arith.constant 1024 : i64
    %85 = llvm.load %84 : !llvm.ptr -> i64
    %c1_i64_24 = arith.constant 1 : i64
    %86 = arith.addi %85, %c1_i64_24 : i64
    llvm.store %86, %84 : i64, !llvm.ptr
    %87 = arith.cmpi ult, %c1024_i64_23, %86 : i64
    %c92_i8_25 = arith.constant 92 : i8
    cf.cond_br %87, ^bb1(%c92_i8_25 : i8), ^bb23
  ^bb25:  // pred: ^bb19
    %88 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %89 = llvm.load %88 : !llvm.ptr -> i64
    %c2_i64_26 = arith.constant 2 : i64
    call @dora_fn_nop() : () -> ()
    %90 = arith.cmpi uge, %89, %c2_i64_26 : i64
    %c80_i8_27 = arith.constant 80 : i8
    cf.cond_br %90, ^bb26, ^bb1(%c80_i8_27 : i8)
  ^bb26:  // pred: ^bb25
    %91 = arith.subi %89, %c2_i64_26 : i64
    llvm.store %91, %88 : i64, !llvm.ptr
    cf.br ^bb24
  ^bb27:  // pred: ^bb28
    %92 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %93 = llvm.load %92 : !llvm.ptr -> !llvm.ptr
    %94 = llvm.getelementptr %93[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %95 = llvm.load %94 : !llvm.ptr -> i256
    llvm.store %94, %92 : !llvm.ptr, !llvm.ptr
    %96 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %97 = llvm.load %96 : !llvm.ptr -> !llvm.ptr
    %98 = llvm.getelementptr %97[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %99 = llvm.load %98 : !llvm.ptr -> i256
    llvm.store %98, %96 : !llvm.ptr, !llvm.ptr
    "dora.mstore"(%95, %99) : (i256, i256) -> ()
    cf.br ^bb33
  ^bb28:  // pred: ^bb30
    %100 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_28 = arith.constant 1024 : i64
    %101 = llvm.load %100 : !llvm.ptr -> i64
    %c-2_i64_29 = arith.constant -2 : i64
    %102 = arith.addi %101, %c-2_i64_29 : i64
    llvm.store %102, %100 : i64, !llvm.ptr
    %c2_i64_30 = arith.constant 2 : i64
    %103 = arith.cmpi ult, %101, %c2_i64_30 : i64
    %c91_i8_31 = arith.constant 91 : i8
    cf.cond_br %103, ^bb1(%c91_i8_31 : i8), ^bb27
  ^bb29:  // pred: ^bb23
    %104 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %105 = llvm.load %104 : !llvm.ptr -> i64
    %c3_i64_32 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %106 = arith.cmpi uge, %105, %c3_i64_32 : i64
    %c80_i8_33 = arith.constant 80 : i8
    cf.cond_br %106, ^bb30, ^bb1(%c80_i8_33 : i8)
  ^bb30:  // pred: ^bb29
    %107 = arith.subi %105, %c3_i64_32 : i64
    llvm.store %107, %104 : i64, !llvm.ptr
    cf.br ^bb28
  ^bb31:  // pred: ^bb32
    %c32_i256 = arith.constant 32 : i256
    %108 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %109 = llvm.load %108 : !llvm.ptr -> !llvm.ptr
    llvm.store %c32_i256, %109 : i256, !llvm.ptr
    %110 = llvm.getelementptr %109[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %110, %108 : !llvm.ptr, !llvm.ptr
    cf.br ^bb37
  ^bb32:  // pred: ^bb34
    %111 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_34 = arith.constant 1024 : i64
    %112 = llvm.load %111 : !llvm.ptr -> i64
    %c1_i64_35 = arith.constant 1 : i64
    %113 = arith.addi %112, %c1_i64_35 : i64
    llvm.store %113, %111 : i64, !llvm.ptr
    %114 = arith.cmpi ult, %c1024_i64_34, %113 : i64
    %c92_i8_36 = arith.constant 92 : i8
    cf.cond_br %114, ^bb1(%c92_i8_36 : i8), ^bb31
  ^bb33:  // pred: ^bb27
    %115 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %116 = llvm.load %115 : !llvm.ptr -> i64
    %c3_i64_37 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %117 = arith.cmpi uge, %116, %c3_i64_37 : i64
    %c80_i8_38 = arith.constant 80 : i8
    cf.cond_br %117, ^bb34, ^bb1(%c80_i8_38 : i8)
  ^bb34:  // pred: ^bb33
    %118 = arith.subi %116, %c3_i64_37 : i64
    llvm.store %118, %115 : i64, !llvm.ptr
    cf.br ^bb32
  ^bb35:  // pred: ^bb36
    %c0_i256_39 = arith.constant 0 : i256
    %119 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %120 = llvm.load %119 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_39, %120 : i256, !llvm.ptr
    %121 = llvm.getelementptr %120[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %121, %119 : !llvm.ptr, !llvm.ptr
    cf.br ^bb42
  ^bb36:  // pred: ^bb38
    %122 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_40 = arith.constant 1024 : i64
    %123 = llvm.load %122 : !llvm.ptr -> i64
    %c1_i64_41 = arith.constant 1 : i64
    %124 = arith.addi %123, %c1_i64_41 : i64
    llvm.store %124, %122 : i64, !llvm.ptr
    %125 = arith.cmpi ult, %c1024_i64_40, %124 : i64
    %c92_i8_42 = arith.constant 92 : i8
    cf.cond_br %125, ^bb1(%c92_i8_42 : i8), ^bb35
  ^bb37:  // pred: ^bb31
    %126 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %127 = llvm.load %126 : !llvm.ptr -> i64
    %c2_i64_43 = arith.constant 2 : i64
    call @dora_fn_nop() : () -> ()
    %128 = arith.cmpi uge, %127, %c2_i64_43 : i64
    %c80_i8_44 = arith.constant 80 : i8
    cf.cond_br %128, ^bb38, ^bb1(%c80_i8_44 : i8)
  ^bb38:  // pred: ^bb37
    %129 = arith.subi %127, %c2_i64_43 : i64
    llvm.store %129, %126 : i64, !llvm.ptr
    cf.br ^bb36
  ^bb39:  // pred: ^bb41
    %130 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %131 = llvm.load %130 : !llvm.ptr -> !llvm.ptr
    %132 = llvm.getelementptr %131[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %133 = llvm.load %132 : !llvm.ptr -> i256
    llvm.store %132, %130 : !llvm.ptr, !llvm.ptr
    %134 = llvm.mlir.addressof @dora_global_stack_ptr : !llvm.ptr
    %135 = llvm.load %134 : !llvm.ptr -> !llvm.ptr
    %136 = llvm.getelementptr %135[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %137 = llvm.load %136 : !llvm.ptr -> i256
    llvm.store %136, %134 : !llvm.ptr, !llvm.ptr
    "dora.return"(%133, %137) : (i256, i256) -> ()
  ^bb40:  // no predecessors
    cf.br ^bb44
  ^bb41:  // pred: ^bb43
    %138 = llvm.mlir.addressof @dora_global_stack_length : !llvm.ptr
    %c1024_i64_45 = arith.constant 1024 : i64
    %139 = llvm.load %138 : !llvm.ptr -> i64
    %c-2_i64_46 = arith.constant -2 : i64
    %140 = arith.addi %139, %c-2_i64_46 : i64
    llvm.store %140, %138 : i64, !llvm.ptr
    %c2_i64_47 = arith.constant 2 : i64
    %141 = arith.cmpi ult, %139, %c2_i64_47 : i64
    %c91_i8_48 = arith.constant 91 : i8
    cf.cond_br %141, ^bb1(%c91_i8_48 : i8), ^bb39
  ^bb42:  // pred: ^bb35
    %142 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %143 = llvm.load %142 : !llvm.ptr -> i64
    %c0_i64_49 = arith.constant 0 : i64
    call @dora_fn_nop() : () -> ()
    %144 = arith.cmpi uge, %143, %c0_i64_49 : i64
    %c80_i8_50 = arith.constant 80 : i8
    cf.cond_br %144, ^bb43, ^bb1(%c80_i8_50 : i8)
  ^bb43:  // pred: ^bb42
    %145 = arith.subi %143, %c0_i64_49 : i64
    llvm.store %145, %142 : i64, !llvm.ptr
    cf.br ^bb41
  ^bb44:  // pred: ^bb40
    %c0_i64_51 = arith.constant 0 : i64
    %c1_i8 = arith.constant 1 : i8
    %146 = llvm.mlir.addressof @dora_global_gas_counter : !llvm.ptr
    %147 = llvm.load %146 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_51, %c0_i64_51, %147, %c1_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c1_i8 : i8
  }
}
