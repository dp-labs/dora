---
source: crates/dora-compiler/src/dora/tests/storage.rs
expression: op
snapshot_kind: text
---
module {
  func.func private @dora_fn_nop()
  func.func @dora_u256_map_get(%arg0: memref<?x3xi256>, %arg1: i256) -> (i256, i1) {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c1_i256 = arith.constant 1 : i256
    %c0_i256 = arith.constant 0 : i256
    %false = arith.constant false
    %true = arith.constant true
    %dim = memref.dim %arg0, %c0 : memref<?x3xi256>
    %0 = call @dora_u256_map_hash(%arg0, %arg1) : (memref<?x3xi256>, i256) -> index
    %alloc = memref.alloc() : memref<1xindex>
    memref.store %0, %alloc[%c0] : memref<1xindex>
    %alloc_0 = memref.alloc() : memref<1xi256>
    %alloc_1 = memref.alloc() : memref<1xi1>
    memref.store %c0_i256, %alloc_0[%c0] : memref<1xi256>
    memref.store %false, %alloc_1[%c0] : memref<1xi1>
    scf.while : () -> () {
      %3 = memref.load %alloc[%c0] : memref<1xindex>
      %4 = memref.load %arg0[%3, %c2] : memref<?x3xi256>
      %5 = arith.cmpi eq, %4, %c1_i256 : i256
      scf.if %5 {
        %7 = memref.load %arg0[%3, %c0] : memref<?x3xi256>
        %8 = arith.cmpi eq, %7, %arg1 : i256
        scf.if %8 {
          %9 = memref.load %arg0[%3, %c1] : memref<?x3xi256>
          memref.store %9, %alloc_0[%c0] : memref<1xi256>
          memref.store %true, %alloc_1[%c0] : memref<1xi1>
        } else {
          %9 = arith.addi %3, %c1 : index
          %10 = arith.remsi %9, %dim : index
          memref.store %10, %alloc[%c0] : memref<1xindex>
        }
      } else {
      }
      %6 = scf.if %5 -> (i1) {
        %7 = memref.load %arg0[%3, %c0] : memref<?x3xi256>
        %8 = arith.cmpi ne, %7, %arg1 : i256
        scf.yield %8 : i1
      } else {
        %false_2 = arith.constant false
        scf.yield %false_2 : i1
      }
      scf.condition(%6)
    } do {
      scf.yield
    }
    %1 = memref.load %alloc_0[%c0] : memref<1xi256>
    %2 = memref.load %alloc_1[%c0] : memref<1xi1>
    memref.dealloc %alloc : memref<1xindex>
    memref.dealloc %alloc_0 : memref<1xi256>
    memref.dealloc %alloc_1 : memref<1xi1>
    return %1, %2 : i256, i1
  }
  func.func @dora_u256_map_insert(%arg0: memref<?x3xi256>, %arg1: i256, %arg2: i256) -> memref<?x3xi256> {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c1_i256 = arith.constant 1 : i256
    %c0_i256 = arith.constant 0 : i256
    %dim = memref.dim %arg0, %c0 : memref<?x3xi256>
    %0 = call @dora_u256_map_hash(%arg0, %arg1) : (memref<?x3xi256>, i256) -> index
    %alloc = memref.alloc() : memref<1xindex>
    memref.store %0, %alloc[%c0] : memref<1xindex>
    scf.while : () -> () {
      %1 = memref.load %alloc[%c0] : memref<1xindex>
      %2 = memref.load %arg0[%1, %c2] : memref<?x3xi256>
      %3 = arith.cmpi eq, %2, %c1_i256 : i256
      scf.if %3 {
        %4 = memref.load %arg0[%1, %c0] : memref<?x3xi256>
        %5 = arith.cmpi eq, %4, %arg1 : i256
        scf.if %5 {
          memref.store %arg2, %arg0[%1, %c1] : memref<?x3xi256>
        } else {
          %6 = arith.addi %1, %c1 : index
          %7 = arith.remsi %6, %dim : index
          memref.store %7, %alloc[%c0] : memref<1xindex>
        }
      } else {
        memref.store %arg1, %arg0[%1, %c0] : memref<?x3xi256>
        memref.store %arg2, %arg0[%1, %c1] : memref<?x3xi256>
        memref.store %c1_i256, %arg0[%1, %c2] : memref<?x3xi256>
      }
      scf.condition(%3)
    } do {
      scf.yield
    }
    memref.dealloc %alloc : memref<1xindex>
    return %arg0 : memref<?x3xi256>
  }
  func.func @dora_u256_map_hash(%arg0: memref<?x3xi256>, %arg1: i256) -> index {
    %c0 = arith.constant 0 : index
    %c1_i256 = arith.constant 1 : i256
    %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %arg1, %0 : i256, !llvm.ptr
    %dim = memref.dim %arg0, %c0 : memref<?x3xi256>
    %1 = arith.index_cast %dim : index to i64
    %2 = llvm.load %0 : !llvm.ptr -> vector<4xi64>
    %3 = llvm.mlir.constant(dense<0> : vector<4xi64>) : vector<4xi64>
    %4 = llvm.xor %2, %3  : vector<4xi64>
    %5 = "llvm.vector.reduce.xor"(%4) : (vector<4xi64>) -> i64
    %6 = llvm.urem %5, %1  : i64
    %7 = arith.index_cast %6 : i64 to index
    return %7 : index
  }
  func.func @dora_u256_map_simple_hash(%arg0: memref<?x3xi256>, %arg1: i256) -> index {
    %c0 = arith.constant 0 : index
    %dim = memref.dim %arg0, %c0 : memref<?x3xi256>
    %0 = arith.index_cast %dim : index to i256
    %1 = llvm.urem %arg1, %0  : i256
    %2 = arith.index_cast %1 : i256 to index
    return %2 : index
  }
  func.func @dora_u256_map_new(%arg0: index) -> memref<?x3xi256> {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c0_i256 = arith.constant 0 : i256
    %alloc = memref.alloc(%arg0) : memref<?x3xi256>
    scf.for %arg1 = %c0 to %arg0 step %c1 {
      memref.store %c0_i256, %alloc[%arg1, %c0] : memref<?x3xi256>
      memref.store %c0_i256, %alloc[%arg1, %c1] : memref<?x3xi256>
      memref.store %c0_i256, %alloc[%arg1, %c2] : memref<?x3xi256>
    }
    return %alloc : memref<?x3xi256>
  }
  func.func private @dora_fn_tracing(!llvm.ptr, i8, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_fn_is_static(!llvm.ptr) -> i8
  func.func private @dora_fn_exp(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_calldata_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_data_section(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_data_section_size(!llvm.ptr) -> i16
  func.func private @dora_fn_data_section_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_chainid(!llvm.ptr) -> i64
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gaslimit_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_memory_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_memory_size(!llvm.ptr) -> i64
  func.func private @dora_fn_code_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_eofcreate(!llvm.ptr, i8, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returncontract(!llvm.ptr, i8, i64, i64, index, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_call(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_extcall(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_returndata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_returndata_copy(!llvm.ptr, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_tload(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_tstore(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func public @main(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr) -> i8 attributes {llvm.emit_c_interface} {
    %c16 = arith.constant 16 : index
    %0 = call @dora_u256_map_new(%c16) : (index) -> memref<?x3xi256>
    %c0_i64 = arith.constant 0 : i64
    %1 = llvm.alloca %c0_i64 x !llvm.ptr : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : !llvm.ptr, !llvm.ptr
    cf.br ^bb6
  ^bb1(%2: i8):  // 21 preds: ^bb2, ^bb5, ^bb6, ^bb9, ^bb10, ^bb13, ^bb14, ^bb17, ^bb18, ^bb21, ^bb22, ^bb25, ^bb26, ^bb29, ^bb30, ^bb33, ^bb34, ^bb37, ^bb38, ^bb42, ^bb43
    %c0_i64_0 = arith.constant 0 : i64
    %3 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_0, %c0_i64_0, %3, %2) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %2 : i8
  ^bb2(%4: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %4 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3(%5: i8):  // no predecessors
    return %5 : i8
  ^bb4:  // pred: ^bb5
    %c100_i256 = arith.constant 100 : i256
    %6 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    llvm.store %c100_i256, %6 : i256, !llvm.ptr
    %7 = llvm.getelementptr %6[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %7, %1 : !llvm.ptr, !llvm.ptr
    cf.br ^bb10
  ^bb5:  // pred: ^bb7
    %c1024_i64 = arith.constant 1024 : i64
    %8 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %9 = arith.addi %8, %c1_i64 : i64
    llvm.store %9, %arg3 : i64, !llvm.ptr
    %10 = arith.cmpi ult, %c1024_i64, %9 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %10, ^bb1(%c92_i8 : i8), ^bb4
  ^bb6:  // pred: ^bb0
    %11 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %12 = arith.cmpi uge, %11, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %12, ^bb7, ^bb1(%c80_i8 : i8)
  ^bb7:  // pred: ^bb6
    %13 = arith.subi %11, %c3_i64 : i64
    llvm.store %13, %arg1 : i64, !llvm.ptr
    cf.br ^bb5
  ^bb8:  // pred: ^bb9
    %c0_i256 = arith.constant 0 : i256
    %14 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256, %14 : i256, !llvm.ptr
    %15 = llvm.getelementptr %14[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %15, %1 : !llvm.ptr, !llvm.ptr
    cf.br ^bb14
  ^bb9:  // pred: ^bb11
    %c1024_i64_1 = arith.constant 1024 : i64
    %16 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_2 = arith.constant 1 : i64
    %17 = arith.addi %16, %c1_i64_2 : i64
    llvm.store %17, %arg3 : i64, !llvm.ptr
    %18 = arith.cmpi ult, %c1024_i64_1, %17 : i64
    %c92_i8_3 = arith.constant 92 : i8
    cf.cond_br %18, ^bb1(%c92_i8_3 : i8), ^bb8
  ^bb10:  // pred: ^bb4
    %19 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_4 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %20 = arith.cmpi uge, %19, %c3_i64_4 : i64
    %c80_i8_5 = arith.constant 80 : i8
    cf.cond_br %20, ^bb11, ^bb1(%c80_i8_5 : i8)
  ^bb11:  // pred: ^bb10
    %21 = arith.subi %19, %c3_i64_4 : i64
    llvm.store %21, %arg1 : i64, !llvm.ptr
    cf.br ^bb9
  ^bb12:  // pred: ^bb13
    %22 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    %23 = llvm.getelementptr %22[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %24 = llvm.load %23 : !llvm.ptr -> i256
    llvm.store %23, %1 : !llvm.ptr, !llvm.ptr
    %25 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    %26 = llvm.getelementptr %25[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %27 = llvm.load %26 : !llvm.ptr -> i256
    llvm.store %26, %1 : !llvm.ptr, !llvm.ptr
    %28 = call @dora_u256_map_insert(%0, %24, %27) : (memref<?x3xi256>, i256, i256) -> memref<?x3xi256>
    "dora.sstore"(%24, %27) : (i256, i256) -> ()
    cf.br ^bb18
  ^bb13:  // pred: ^bb15
    %c1024_i64_6 = arith.constant 1024 : i64
    %29 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-2_i64 = arith.constant -2 : i64
    %30 = arith.addi %29, %c-2_i64 : i64
    llvm.store %30, %arg3 : i64, !llvm.ptr
    %c2_i64 = arith.constant 2 : i64
    %31 = arith.cmpi ult, %29, %c2_i64 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %31, ^bb1(%c91_i8 : i8), ^bb12
  ^bb14:  // pred: ^bb8
    %32 = llvm.load %arg1 : !llvm.ptr -> i64
    %c0_i64_7 = arith.constant 0 : i64
    call @dora_fn_nop() : () -> ()
    %33 = arith.cmpi uge, %32, %c0_i64_7 : i64
    %c80_i8_8 = arith.constant 80 : i8
    cf.cond_br %33, ^bb15, ^bb1(%c80_i8_8 : i8)
  ^bb15:  // pred: ^bb14
    %34 = arith.subi %32, %c0_i64_7 : i64
    llvm.store %34, %arg1 : i64, !llvm.ptr
    cf.br ^bb13
  ^bb16:  // pred: ^bb17
    %c0_i256_9 = arith.constant 0 : i256
    %35 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_9, %35 : i256, !llvm.ptr
    %36 = llvm.getelementptr %35[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %36, %1 : !llvm.ptr, !llvm.ptr
    cf.br ^bb22
  ^bb17:  // pred: ^bb19
    %c1024_i64_10 = arith.constant 1024 : i64
    %37 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_11 = arith.constant 1 : i64
    %38 = arith.addi %37, %c1_i64_11 : i64
    llvm.store %38, %arg3 : i64, !llvm.ptr
    %39 = arith.cmpi ult, %c1024_i64_10, %38 : i64
    %c92_i8_12 = arith.constant 92 : i8
    cf.cond_br %39, ^bb1(%c92_i8_12 : i8), ^bb16
  ^bb18:  // pred: ^bb12
    %40 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_13 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %41 = arith.cmpi uge, %40, %c3_i64_13 : i64
    %c80_i8_14 = arith.constant 80 : i8
    cf.cond_br %41, ^bb19, ^bb1(%c80_i8_14 : i8)
  ^bb19:  // pred: ^bb18
    %42 = arith.subi %40, %c3_i64_13 : i64
    llvm.store %42, %arg1 : i64, !llvm.ptr
    cf.br ^bb17
  ^bb20:  // pred: ^bb21
    %43 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    %44 = llvm.getelementptr %43[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %45 = llvm.load %44 : !llvm.ptr -> i256
    llvm.store %44, %1 : !llvm.ptr, !llvm.ptr
    %46:2 = call @dora_u256_map_get(%28, %45) : (memref<?x3xi256>, i256) -> (i256, i1)
    %47 = scf.if %46#1 -> (i256) {
      scf.yield %46#0 : i256
    } else {
      %105 = "dora.sload"(%45) : (i256) -> i256
      scf.yield %105 : i256
    }
    %48 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    llvm.store %47, %48 : i256, !llvm.ptr
    %49 = llvm.getelementptr %48[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %49, %1 : !llvm.ptr, !llvm.ptr
    cf.br ^bb26
  ^bb21:  // pred: ^bb23
    %c1024_i64_15 = arith.constant 1024 : i64
    %50 = llvm.load %arg3 : !llvm.ptr -> i64
    %c0_i64_16 = arith.constant 0 : i64
    %51 = arith.addi %50, %c0_i64_16 : i64
    llvm.store %51, %arg3 : i64, !llvm.ptr
    %c1_i64_17 = arith.constant 1 : i64
    %52 = arith.cmpi ult, %50, %c1_i64_17 : i64
    %c91_i8_18 = arith.constant 91 : i8
    cf.cond_br %52, ^bb1(%c91_i8_18 : i8), ^bb20
  ^bb22:  // pred: ^bb16
    %53 = llvm.load %arg1 : !llvm.ptr -> i64
    %c0_i64_19 = arith.constant 0 : i64
    call @dora_fn_nop() : () -> ()
    %54 = arith.cmpi uge, %53, %c0_i64_19 : i64
    %c80_i8_20 = arith.constant 80 : i8
    cf.cond_br %54, ^bb23, ^bb1(%c80_i8_20 : i8)
  ^bb23:  // pred: ^bb22
    %55 = arith.subi %53, %c0_i64_19 : i64
    llvm.store %55, %arg1 : i64, !llvm.ptr
    cf.br ^bb21
  ^bb24:  // pred: ^bb25
    %c0_i256_21 = arith.constant 0 : i256
    %56 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_21, %56 : i256, !llvm.ptr
    %57 = llvm.getelementptr %56[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %57, %1 : !llvm.ptr, !llvm.ptr
    cf.br ^bb30
  ^bb25:  // pred: ^bb27
    %c1024_i64_22 = arith.constant 1024 : i64
    %58 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_23 = arith.constant 1 : i64
    %59 = arith.addi %58, %c1_i64_23 : i64
    llvm.store %59, %arg3 : i64, !llvm.ptr
    %60 = arith.cmpi ult, %c1024_i64_22, %59 : i64
    %c92_i8_24 = arith.constant 92 : i8
    cf.cond_br %60, ^bb1(%c92_i8_24 : i8), ^bb24
  ^bb26:  // pred: ^bb20
    %61 = llvm.load %arg1 : !llvm.ptr -> i64
    %c2_i64_25 = arith.constant 2 : i64
    call @dora_fn_nop() : () -> ()
    %62 = arith.cmpi uge, %61, %c2_i64_25 : i64
    %c80_i8_26 = arith.constant 80 : i8
    cf.cond_br %62, ^bb27, ^bb1(%c80_i8_26 : i8)
  ^bb27:  // pred: ^bb26
    %63 = arith.subi %61, %c2_i64_25 : i64
    llvm.store %63, %arg1 : i64, !llvm.ptr
    cf.br ^bb25
  ^bb28:  // pred: ^bb29
    %64 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    %65 = llvm.getelementptr %64[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %66 = llvm.load %65 : !llvm.ptr -> i256
    llvm.store %65, %1 : !llvm.ptr, !llvm.ptr
    %67 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    %68 = llvm.getelementptr %67[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %69 = llvm.load %68 : !llvm.ptr -> i256
    llvm.store %68, %1 : !llvm.ptr, !llvm.ptr
    "dora.mstore"(%66, %69) : (i256, i256) -> ()
    cf.br ^bb34
  ^bb29:  // pred: ^bb31
    %c1024_i64_27 = arith.constant 1024 : i64
    %70 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-2_i64_28 = arith.constant -2 : i64
    %71 = arith.addi %70, %c-2_i64_28 : i64
    llvm.store %71, %arg3 : i64, !llvm.ptr
    %c2_i64_29 = arith.constant 2 : i64
    %72 = arith.cmpi ult, %70, %c2_i64_29 : i64
    %c91_i8_30 = arith.constant 91 : i8
    cf.cond_br %72, ^bb1(%c91_i8_30 : i8), ^bb28
  ^bb30:  // pred: ^bb24
    %73 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_31 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %74 = arith.cmpi uge, %73, %c3_i64_31 : i64
    %c80_i8_32 = arith.constant 80 : i8
    cf.cond_br %74, ^bb31, ^bb1(%c80_i8_32 : i8)
  ^bb31:  // pred: ^bb30
    %75 = arith.subi %73, %c3_i64_31 : i64
    llvm.store %75, %arg1 : i64, !llvm.ptr
    cf.br ^bb29
  ^bb32:  // pred: ^bb33
    %c32_i256 = arith.constant 32 : i256
    %76 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    llvm.store %c32_i256, %76 : i256, !llvm.ptr
    %77 = llvm.getelementptr %76[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %77, %1 : !llvm.ptr, !llvm.ptr
    cf.br ^bb38
  ^bb33:  // pred: ^bb35
    %c1024_i64_33 = arith.constant 1024 : i64
    %78 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_34 = arith.constant 1 : i64
    %79 = arith.addi %78, %c1_i64_34 : i64
    llvm.store %79, %arg3 : i64, !llvm.ptr
    %80 = arith.cmpi ult, %c1024_i64_33, %79 : i64
    %c92_i8_35 = arith.constant 92 : i8
    cf.cond_br %80, ^bb1(%c92_i8_35 : i8), ^bb32
  ^bb34:  // pred: ^bb28
    %81 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_36 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %82 = arith.cmpi uge, %81, %c3_i64_36 : i64
    %c80_i8_37 = arith.constant 80 : i8
    cf.cond_br %82, ^bb35, ^bb1(%c80_i8_37 : i8)
  ^bb35:  // pred: ^bb34
    %83 = arith.subi %81, %c3_i64_36 : i64
    llvm.store %83, %arg1 : i64, !llvm.ptr
    cf.br ^bb33
  ^bb36:  // pred: ^bb37
    %c0_i256_38 = arith.constant 0 : i256
    %84 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_38, %84 : i256, !llvm.ptr
    %85 = llvm.getelementptr %84[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %85, %1 : !llvm.ptr, !llvm.ptr
    cf.br ^bb43
  ^bb37:  // pred: ^bb39
    %c1024_i64_39 = arith.constant 1024 : i64
    %86 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_40 = arith.constant 1 : i64
    %87 = arith.addi %86, %c1_i64_40 : i64
    llvm.store %87, %arg3 : i64, !llvm.ptr
    %88 = arith.cmpi ult, %c1024_i64_39, %87 : i64
    %c92_i8_41 = arith.constant 92 : i8
    cf.cond_br %88, ^bb1(%c92_i8_41 : i8), ^bb36
  ^bb38:  // pred: ^bb32
    %89 = llvm.load %arg1 : !llvm.ptr -> i64
    %c2_i64_42 = arith.constant 2 : i64
    call @dora_fn_nop() : () -> ()
    %90 = arith.cmpi uge, %89, %c2_i64_42 : i64
    %c80_i8_43 = arith.constant 80 : i8
    cf.cond_br %90, ^bb39, ^bb1(%c80_i8_43 : i8)
  ^bb39:  // pred: ^bb38
    %91 = arith.subi %89, %c2_i64_42 : i64
    llvm.store %91, %arg1 : i64, !llvm.ptr
    cf.br ^bb37
  ^bb40:  // pred: ^bb42
    %92 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    %93 = llvm.getelementptr %92[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %94 = llvm.load %93 : !llvm.ptr -> i256
    llvm.store %93, %1 : !llvm.ptr, !llvm.ptr
    %95 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    %96 = llvm.getelementptr %95[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %97 = llvm.load %96 : !llvm.ptr -> i256
    llvm.store %96, %1 : !llvm.ptr, !llvm.ptr
    "dora.return"(%94, %97) : (i256, i256) -> ()
  ^bb41:  // no predecessors
    cf.br ^bb45
  ^bb42:  // pred: ^bb44
    %c1024_i64_44 = arith.constant 1024 : i64
    %98 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-2_i64_45 = arith.constant -2 : i64
    %99 = arith.addi %98, %c-2_i64_45 : i64
    llvm.store %99, %arg3 : i64, !llvm.ptr
    %c2_i64_46 = arith.constant 2 : i64
    %100 = arith.cmpi ult, %98, %c2_i64_46 : i64
    %c91_i8_47 = arith.constant 91 : i8
    cf.cond_br %100, ^bb1(%c91_i8_47 : i8), ^bb40
  ^bb43:  // pred: ^bb36
    %101 = llvm.load %arg1 : !llvm.ptr -> i64
    %c0_i64_48 = arith.constant 0 : i64
    call @dora_fn_nop() : () -> ()
    %102 = arith.cmpi uge, %101, %c0_i64_48 : i64
    %c80_i8_49 = arith.constant 80 : i8
    cf.cond_br %102, ^bb44, ^bb1(%c80_i8_49 : i8)
  ^bb44:  // pred: ^bb43
    %103 = arith.subi %101, %c0_i64_48 : i64
    llvm.store %103, %arg1 : i64, !llvm.ptr
    cf.br ^bb42
  ^bb45:  // pred: ^bb41
    %c0_i64_50 = arith.constant 0 : i64
    %c2_i8 = arith.constant 2 : i8
    %104 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_50, %c0_i64_50, %104, %c2_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c2_i8 : i8
  }
}
