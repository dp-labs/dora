---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  func.func private @dora_fn_nop()
  func.func private @dora_fn_tracing(!llvm.ptr, i8, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_fn_is_static(!llvm.ptr) -> i8
  func.func private @dora_fn_exp(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_calldata_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_data_section(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_data_section_size(!llvm.ptr) -> i64
  func.func private @dora_fn_data_section_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_chainid(!llvm.ptr) -> i64
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gaslimit_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_memory_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_memory_size(!llvm.ptr) -> i64
  func.func private @dora_fn_code_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_eofcreate(!llvm.ptr, i8, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returncontract(!llvm.ptr, i8, i64, i64, index, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_call(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_extcall(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_returndata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_returndata_copy(!llvm.ptr, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_tload(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_tstore(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @op60(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr, %arg4: !llvm.ptr) -> i8 {
    cf.br ^bb10
  ^bb1(%0: i8):  // 11 preds: ^bb3, ^bb4, ^bb5, ^bb7, ^bb9, ^bb10, ^bb13, ^bb14, ^bb15, ^bb18, ^bb19
    %c0_i64 = arith.constant 0 : i64
    %1 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64, %c0_i64, %1, %0) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %0 : i8
  ^bb2(%2: i8):  // no predecessors
    return %2 : i8
  ^bb3:  // pred: ^bb9
    %3 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %4 = llvm.getelementptr %3[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %5 = llvm.load %4 : !llvm.ptr -> i256
    llvm.store %4, %arg4 : !llvm.ptr, !llvm.ptr
    %6 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %6[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %8 = llvm.load %7 : !llvm.ptr -> i256
    llvm.store %7, %arg4 : !llvm.ptr, !llvm.ptr
    %9 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.getelementptr %9[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %11 = llvm.load %10 : !llvm.ptr -> i256
    llvm.store %10, %arg4 : !llvm.ptr, !llvm.ptr
    %12 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.getelementptr %12[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %14 = llvm.load %13 : !llvm.ptr -> i256
    llvm.store %13, %arg4 : !llvm.ptr, !llvm.ptr
    %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256
    %15 = arith.cmpi sgt, %14, %c18446744073709551615_i256 : i256
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %15, ^bb1(%c84_i8 : i8), ^bb4
  ^bb4:  // pred: ^bb3
    %16 = arith.trunci %14 : i256 to i64
    %c0_i64_0 = arith.constant 0 : i64
    %17 = arith.cmpi slt, %16, %c0_i64_0 : i64
    %c84_i8_1 = arith.constant 84 : i8
    cf.cond_br %17, ^bb1(%c84_i8_1 : i8), ^bb5
  ^bb5:  // pred: ^bb4
    %c31_i64 = arith.constant 31 : i64
    %c32_i64 = arith.constant 32 : i64
    %18 = arith.addi %16, %c31_i64 : i64
    %19 = arith.divui %18, %c32_i64 : i64
    %c3_i64 = arith.constant 3 : i64
    %20 = arith.muli %19, %c3_i64 : i64
    %21 = llvm.load %arg1 : !llvm.ptr -> i64
    %22 = arith.cmpi ult, %21, %20 : i64
    scf.if %22 {
    } else {
      %66 = arith.subi %21, %20 : i64
      llvm.store %66, %arg1 : i64, !llvm.ptr
    }
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %22, ^bb1(%c80_i8 : i8), ^bb6
  ^bb6:  // pred: ^bb5
    %c0_i64_2 = arith.constant 0 : i64
    %23 = arith.cmpi ne, %16, %c0_i64_2 : i64
    cf.cond_br %23, ^bb13, ^bb7
  ^bb7:  // 2 preds: ^bb6, ^bb17
    %24 = arith.trunci %8 : i256 to i64
    %c1_i256 = arith.constant 1 : i256
    %25 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %5, %25 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i256_3 = arith.constant 1 : i256
    %26 = llvm.alloca %c1_i256_3 x i256 : (i256) -> !llvm.ptr
    llvm.store %11, %26 {alignment = 1 : i64} : i256, !llvm.ptr
    %27 = call @dora_fn_ext_code_copy(%arg0, %25, %26, %16, %24) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64) -> !llvm.ptr
    %28 = llvm.getelementptr %27[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %29 = llvm.load %28 : !llvm.ptr -> i64
    %30 = llvm.load %arg1 : !llvm.ptr -> i64
    %31 = arith.cmpi ult, %30, %29 : i64
    scf.if %31 {
    } else {
      %66 = arith.subi %30, %29 : i64
      llvm.store %66, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_4 = arith.constant 80 : i8
    cf.cond_br %31, ^bb1(%c80_i8_4 : i8), ^bb8
  ^bb8:  // pred: ^bb7
    cf.br ^bb12
  ^bb9:  // pred: ^bb11
    %c1024_i64 = arith.constant 1024 : i64
    %32 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-4_i64 = arith.constant -4 : i64
    %33 = arith.addi %32, %c-4_i64 : i64
    llvm.store %33, %arg3 : i64, !llvm.ptr
    %c4_i64 = arith.constant 4 : i64
    %34 = arith.cmpi ult, %32, %c4_i64 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %34, ^bb1(%c91_i8 : i8), ^bb3
  ^bb10:  // pred: ^bb0
    %35 = llvm.load %arg1 : !llvm.ptr -> i64
    %c0_i64_5 = arith.constant 0 : i64
    call @dora_fn_nop() : () -> ()
    %36 = arith.cmpi uge, %35, %c0_i64_5 : i64
    %c80_i8_6 = arith.constant 80 : i8
    cf.cond_br %36, ^bb11, ^bb1(%c80_i8_6 : i8)
  ^bb11:  // pred: ^bb10
    %37 = arith.subi %35, %c0_i64_5 : i64
    llvm.store %37, %arg1 : i64, !llvm.ptr
    cf.br ^bb9
  ^bb12:  // pred: ^bb8
    %c0_i8 = arith.constant 0 : i8
    return %c0_i8 : i8
  ^bb13:  // pred: ^bb6
    %c18446744073709551615_i256_7 = arith.constant 18446744073709551615 : i256
    %38 = arith.cmpi sgt, %8, %c18446744073709551615_i256_7 : i256
    %c84_i8_8 = arith.constant 84 : i8
    cf.cond_br %38, ^bb1(%c84_i8_8 : i8), ^bb14
  ^bb14:  // pred: ^bb13
    %39 = arith.trunci %8 : i256 to i64
    %c0_i64_9 = arith.constant 0 : i64
    %40 = arith.cmpi slt, %39, %c0_i64_9 : i64
    %c84_i8_10 = arith.constant 84 : i8
    cf.cond_br %40, ^bb1(%c84_i8_10 : i8), ^bb15
  ^bb15:  // pred: ^bb14
    %41 = arith.addi %39, %16 : i64
    %c0_i64_11 = arith.constant 0 : i64
    %42 = arith.cmpi slt, %41, %c0_i64_11 : i64
    %c84_i8_12 = arith.constant 84 : i8
    cf.cond_br %42, ^bb1(%c84_i8_12 : i8), ^bb16
  ^bb16:  // pred: ^bb15
    %c31_i64_13 = arith.constant 31 : i64
    %c32_i64_14 = arith.constant 32 : i64
    %43 = arith.addi %41, %c31_i64_13 : i64
    %44 = arith.divui %43, %c32_i64_14 : i64
    %c32_i64_15 = arith.constant 32 : i64
    %45 = arith.muli %44, %c32_i64_15 : i64
    %46 = call @dora_fn_memory_size(%arg0) : (!llvm.ptr) -> i64
    %c31_i64_16 = arith.constant 31 : i64
    %c32_i64_17 = arith.constant 32 : i64
    %47 = arith.addi %46, %c31_i64_16 : i64
    %48 = arith.divui %47, %c32_i64_17 : i64
    %49 = arith.muli %48, %c32_i64_15 : i64
    %50 = arith.cmpi ult, %49, %45 : i64
    cf.cond_br %50, ^bb18, ^bb17
  ^bb17:  // 2 preds: ^bb16, ^bb20
    cf.br ^bb7
  ^bb18:  // pred: ^bb16
    %c3_i64_18 = arith.constant 3 : i64
    %c512_i64 = arith.constant 512 : i64
    %51 = arith.muli %48, %48 : i64
    %52 = arith.divui %51, %c512_i64 : i64
    %53 = arith.muli %48, %c3_i64_18 : i64
    %54 = arith.addi %52, %53 : i64
    %c3_i64_19 = arith.constant 3 : i64
    %c512_i64_20 = arith.constant 512 : i64
    %55 = arith.muli %44, %44 : i64
    %56 = arith.divui %55, %c512_i64_20 : i64
    %57 = arith.muli %44, %c3_i64_19 : i64
    %58 = arith.addi %56, %57 : i64
    %59 = arith.subi %58, %54 : i64
    %60 = llvm.load %arg1 : !llvm.ptr -> i64
    %61 = arith.cmpi ult, %60, %59 : i64
    scf.if %61 {
    } else {
      %66 = arith.subi %60, %59 : i64
      llvm.store %66, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_21 = arith.constant 80 : i8
    cf.cond_br %61, ^bb1(%c80_i8_21 : i8), ^bb19
  ^bb19:  // pred: ^bb18
    %62 = call @dora_fn_extend_memory(%arg0, %45) : (!llvm.ptr, i64) -> !llvm.ptr
    %63 = llvm.getelementptr %62[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %64 = llvm.load %63 : !llvm.ptr -> i8
    %c0_i8_22 = arith.constant 0 : i8
    %65 = arith.cmpi ne, %64, %c0_i8_22 : i8
    cf.cond_br %65, ^bb1(%64 : i8), ^bb20
  ^bb20:  // pred: ^bb19
    cf.br ^bb17
  }
  func.func private @op95(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr, %arg4: !llvm.ptr) -> i8 {
    cf.br ^bb5
  ^bb1(%0: i8):  // 2 preds: ^bb4, ^bb5
    %c0_i64 = arith.constant 0 : i64
    %1 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64, %c0_i64, %1, %0) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %0 : i8
  ^bb2(%2: i8):  // no predecessors
    return %2 : i8
  ^bb3:  // pred: ^bb4
    %c0_i256 = arith.constant 0 : i256
    %3 = llvm.load %arg4 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256, %3 : i256, !llvm.ptr
    %4 = llvm.getelementptr %3[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %4, %arg4 : !llvm.ptr, !llvm.ptr
    cf.br ^bb7
  ^bb4:  // pred: ^bb6
    %c1024_i64 = arith.constant 1024 : i64
    %5 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %6 = arith.addi %5, %c1_i64 : i64
    llvm.store %6, %arg3 : i64, !llvm.ptr
    %7 = arith.cmpi ult, %c1024_i64, %6 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %7, ^bb1(%c92_i8 : i8), ^bb3
  ^bb5:  // pred: ^bb0
    %8 = llvm.load %arg1 : !llvm.ptr -> i64
    %c2_i64 = arith.constant 2 : i64
    call @dora_fn_nop() : () -> ()
    %9 = arith.cmpi uge, %8, %c2_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %9, ^bb6, ^bb1(%c80_i8 : i8)
  ^bb6:  // pred: ^bb5
    %10 = arith.subi %8, %c2_i64 : i64
    llvm.store %10, %arg1 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb7:  // pred: ^bb3
    %c0_i8 = arith.constant 0 : i8
    return %c0_i8 : i8
  }
  func.func public @main(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr) -> i8 attributes {llvm.emit_c_interface} {
    %c0_i64 = arith.constant 0 : i64
    %0 = llvm.alloca %c0_i64 x !llvm.ptr : (i64) -> !llvm.ptr
    llvm.store %arg2, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8 = arith.constant 0 : i8
    %c0_i8_0 = arith.constant 0 : i8
    %1 = arith.cmpi ne, %c0_i8, %c0_i8_0 : i8
    cf.cond_br %1, ^bb3(%c0_i8 : i8), ^bb4
  ^bb1(%2: i8):  // 7 preds: ^bb2, ^bb5, ^bb6, ^bb7, ^bb8, ^bb11, ^bb12
    %c0_i64_1 = arith.constant 0 : i64
    %3 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_1, %c0_i64_1, %3, %2) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %2 : i8
  ^bb2(%4: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %4 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3(%5: i8):  // 4 preds: ^bb0, ^bb4, ^bb10, ^bb14
    return %5 : i8
  ^bb4:  // pred: ^bb0
    %6 = call @op95(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %7 = arith.cmpi ne, %6, %c0_i8_0 : i8
    cf.cond_br %7, ^bb3(%6 : i8), ^bb5
  ^bb5:  // pred: ^bb4
    %8 = call @op95(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %9 = arith.cmpi ne, %8, %c0_i8_0 : i8
    cf.cond_br %9, ^bb1(%8 : i8), ^bb8
  ^bb6:  // pred: ^bb7
    %c3735928559_i256 = arith.constant 3735928559 : i256
    %10 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c3735928559_i256, %10 : i256, !llvm.ptr
    %11 = llvm.getelementptr %10[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %11, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_2 = arith.constant 0 : i8
    %12 = arith.cmpi ne, %c0_i8_2, %c0_i8_0 : i8
    cf.cond_br %12, ^bb1(%c0_i8_2 : i8), ^bb12
  ^bb7:  // pred: ^bb9
    %c1024_i64 = arith.constant 1024 : i64
    %13 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %14 = arith.addi %13, %c1_i64 : i64
    llvm.store %14, %arg3 : i64, !llvm.ptr
    %15 = arith.cmpi ult, %c1024_i64, %14 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %15, ^bb1(%c92_i8 : i8), ^bb6
  ^bb8:  // pred: ^bb5
    %16 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %17 = arith.cmpi uge, %16, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %17, ^bb9, ^bb1(%c80_i8 : i8)
  ^bb9:  // pred: ^bb8
    %18 = arith.subi %16, %c3_i64 : i64
    llvm.store %18, %arg1 : i64, !llvm.ptr
    cf.br ^bb7
  ^bb10:  // pred: ^bb11
    %c10_i256 = arith.constant 10 : i256
    %19 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c10_i256, %19 : i256, !llvm.ptr
    %20 = llvm.getelementptr %19[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %20, %0 : !llvm.ptr, !llvm.ptr
    %c0_i8_3 = arith.constant 0 : i8
    %21 = arith.cmpi ne, %c0_i8_3, %c0_i8_0 : i8
    cf.cond_br %21, ^bb3(%c0_i8_3 : i8), ^bb14
  ^bb11:  // pred: ^bb13
    %c1024_i64_4 = arith.constant 1024 : i64
    %22 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_5 = arith.constant 1 : i64
    %23 = arith.addi %22, %c1_i64_5 : i64
    llvm.store %23, %arg3 : i64, !llvm.ptr
    %24 = arith.cmpi ult, %c1024_i64_4, %23 : i64
    %c92_i8_6 = arith.constant 92 : i8
    cf.cond_br %24, ^bb1(%c92_i8_6 : i8), ^bb10
  ^bb12:  // pred: ^bb6
    %25 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_7 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %26 = arith.cmpi uge, %25, %c3_i64_7 : i64
    %c80_i8_8 = arith.constant 80 : i8
    cf.cond_br %26, ^bb13, ^bb1(%c80_i8_8 : i8)
  ^bb13:  // pred: ^bb12
    %27 = arith.subi %25, %c3_i64_7 : i64
    llvm.store %27, %arg1 : i64, !llvm.ptr
    cf.br ^bb11
  ^bb14:  // pred: ^bb10
    %28 = call @op60(%arg0, %arg1, %arg2, %arg3, %0) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
    %29 = arith.cmpi ne, %28, %c0_i8_0 : i8
    cf.cond_br %29, ^bb3(%28 : i8), ^bb15
  ^bb15:  // pred: ^bb14
    %c0_i64_9 = arith.constant 0 : i64
    %c2_i8 = arith.constant 2 : i8
    %30 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_9, %c0_i64_9, %30, %c2_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c2_i8 : i8
  }
}
