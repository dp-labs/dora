---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
snapshot_kind: text
---
module {
  func.func private @dora_fn_nop()
  func.func private @dora_fn_tracing(!llvm.ptr, i8, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_write_result(!llvm.ptr, i64, i64, i64, i8)
  func.func private @dora_fn_is_static(!llvm.ptr) -> i8
  func.func private @dora_fn_exp(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_keccak256_hasher(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_calldata(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_calldata_copy(!llvm.ptr, i64, !llvm.ptr, i64)
  func.func private @dora_fn_calldata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_chainid(!llvm.ptr) -> i64
  func.func private @dora_fn_callvalue(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_caller(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_gaslimit_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extend_memory(!llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_memory_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_memory_size(!llvm.ptr) -> i64
  func.func private @dora_fn_code_copy(!llvm.ptr, !llvm.ptr, i64, i64)
  func.func private @dora_fn_sload(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_sstore(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_append_log(!llvm.ptr, i64, i64)
  func.func private @dora_fn_append_log_with_one_topic(!llvm.ptr, i64, i64, !llvm.ptr)
  func.func private @dora_fn_append_log_with_two_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_three_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_append_log_with_four_topics(!llvm.ptr, i64, i64, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_coinbase(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_extcodesize(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_address(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_prevrando(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_call(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i8) -> !llvm.ptr
  func.func private @dora_fn_store_in_balance(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_copy(!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64) -> !llvm.ptr
  func.func private @dora_fn_blob_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_block_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_ext_code_hash(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_create(!llvm.ptr, i64, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_create2(!llvm.ptr, i64, i64, !llvm.ptr, i64, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_returndata_size(!llvm.ptr) -> i64
  func.func private @dora_fn_returndata_copy(!llvm.ptr, i64, !llvm.ptr, i64) -> !llvm.ptr
  func.func private @dora_fn_selfdestruct(!llvm.ptr, !llvm.ptr) -> !llvm.ptr
  func.func private @dora_fn_tload(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_fn_tstore(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func public @main(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr) -> i8 attributes {llvm.emit_c_interface} {
    %c0_i64 = arith.constant 0 : i64
    %0 = llvm.alloca %c0_i64 x !llvm.ptr : (i64) -> !llvm.ptr
    llvm.store %arg2, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb5
  ^bb1(%1: i8):  // 20 preds: ^bb2, ^bb4, ^bb5, ^bb8, ^bb9, ^bb12, ^bb13, ^bb16, ^bb17, ^bb19, ^bb20, ^bb21, ^bb23, ^bb25, ^bb26, ^bb29, ^bb30, ^bb31, ^bb34, ^bb35
    %c0_i64_0 = arith.constant 0 : i64
    %2 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_0, %c0_i64_0, %2, %1) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %1 : i8
  ^bb2(%3: i256):  // no predecessors
    %c89_i8 = arith.constant 89 : i8
    cf.switch %3 : i256, [
      default: ^bb1(%c89_i8 : i8)
    ]
  ^bb3:  // pred: ^bb4
    %c0_i256 = arith.constant 0 : i256
    %4 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256, %4 : i256, !llvm.ptr
    %5 = llvm.getelementptr %4[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %5, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb9
  ^bb4:  // pred: ^bb6
    %c1024_i64 = arith.constant 1024 : i64
    %6 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %7 = arith.addi %6, %c1_i64 : i64
    llvm.store %7, %arg3 : i64, !llvm.ptr
    %8 = arith.cmpi ult, %c1024_i64, %7 : i64
    %c92_i8 = arith.constant 92 : i8
    cf.cond_br %8, ^bb1(%c92_i8 : i8), ^bb3
  ^bb5:  // pred: ^bb0
    %9 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %10 = arith.cmpi uge, %9, %c3_i64 : i64
    %c80_i8 = arith.constant 80 : i8
    cf.cond_br %10, ^bb6, ^bb1(%c80_i8 : i8)
  ^bb6:  // pred: ^bb5
    %11 = arith.subi %9, %c3_i64 : i64
    llvm.store %11, %arg1 : i64, !llvm.ptr
    cf.br ^bb4
  ^bb7:  // pred: ^bb8
    %c0_i256_1 = arith.constant 0 : i256
    %12 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_1, %12 : i256, !llvm.ptr
    %13 = llvm.getelementptr %12[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %13, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb13
  ^bb8:  // pred: ^bb10
    %c1024_i64_2 = arith.constant 1024 : i64
    %14 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_3 = arith.constant 1 : i64
    %15 = arith.addi %14, %c1_i64_3 : i64
    llvm.store %15, %arg3 : i64, !llvm.ptr
    %16 = arith.cmpi ult, %c1024_i64_2, %15 : i64
    %c92_i8_4 = arith.constant 92 : i8
    cf.cond_br %16, ^bb1(%c92_i8_4 : i8), ^bb7
  ^bb9:  // pred: ^bb3
    %17 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_5 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %18 = arith.cmpi uge, %17, %c3_i64_5 : i64
    %c80_i8_6 = arith.constant 80 : i8
    cf.cond_br %18, ^bb10, ^bb1(%c80_i8_6 : i8)
  ^bb10:  // pred: ^bb9
    %19 = arith.subi %17, %c3_i64_5 : i64
    llvm.store %19, %arg1 : i64, !llvm.ptr
    cf.br ^bb8
  ^bb11:  // pred: ^bb12
    %c3735928559_i256 = arith.constant 3735928559 : i256
    %20 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c3735928559_i256, %20 : i256, !llvm.ptr
    %21 = llvm.getelementptr %20[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %21, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb17
  ^bb12:  // pred: ^bb14
    %c1024_i64_7 = arith.constant 1024 : i64
    %22 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_8 = arith.constant 1 : i64
    %23 = arith.addi %22, %c1_i64_8 : i64
    llvm.store %23, %arg3 : i64, !llvm.ptr
    %24 = arith.cmpi ult, %c1024_i64_7, %23 : i64
    %c92_i8_9 = arith.constant 92 : i8
    cf.cond_br %24, ^bb1(%c92_i8_9 : i8), ^bb11
  ^bb13:  // pred: ^bb7
    %25 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_10 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %26 = arith.cmpi uge, %25, %c3_i64_10 : i64
    %c80_i8_11 = arith.constant 80 : i8
    cf.cond_br %26, ^bb14, ^bb1(%c80_i8_11 : i8)
  ^bb14:  // pred: ^bb13
    %27 = arith.subi %25, %c3_i64_10 : i64
    llvm.store %27, %arg1 : i64, !llvm.ptr
    cf.br ^bb12
  ^bb15:  // pred: ^bb16
    %c10_i256 = arith.constant 10 : i256
    %28 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c10_i256, %28 : i256, !llvm.ptr
    %29 = llvm.getelementptr %28[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %29, %0 : !llvm.ptr, !llvm.ptr
    cf.br ^bb26
  ^bb16:  // pred: ^bb18
    %c1024_i64_12 = arith.constant 1024 : i64
    %30 = llvm.load %arg3 : !llvm.ptr -> i64
    %c1_i64_13 = arith.constant 1 : i64
    %31 = arith.addi %30, %c1_i64_13 : i64
    llvm.store %31, %arg3 : i64, !llvm.ptr
    %32 = arith.cmpi ult, %c1024_i64_12, %31 : i64
    %c92_i8_14 = arith.constant 92 : i8
    cf.cond_br %32, ^bb1(%c92_i8_14 : i8), ^bb15
  ^bb17:  // pred: ^bb11
    %33 = llvm.load %arg1 : !llvm.ptr -> i64
    %c3_i64_15 = arith.constant 3 : i64
    call @dora_fn_nop() : () -> ()
    %34 = arith.cmpi uge, %33, %c3_i64_15 : i64
    %c80_i8_16 = arith.constant 80 : i8
    cf.cond_br %34, ^bb18, ^bb1(%c80_i8_16 : i8)
  ^bb18:  // pred: ^bb17
    %35 = arith.subi %33, %c3_i64_15 : i64
    llvm.store %35, %arg1 : i64, !llvm.ptr
    cf.br ^bb16
  ^bb19:  // pred: ^bb25
    %36 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %37 = llvm.getelementptr %36[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %38 = llvm.load %37 : !llvm.ptr -> i256
    llvm.store %37, %0 : !llvm.ptr, !llvm.ptr
    %39 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %40 = llvm.getelementptr %39[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %41 = llvm.load %40 : !llvm.ptr -> i256
    llvm.store %40, %0 : !llvm.ptr, !llvm.ptr
    %42 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %43 = llvm.getelementptr %42[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %44 = llvm.load %43 : !llvm.ptr -> i256
    llvm.store %43, %0 : !llvm.ptr, !llvm.ptr
    %45 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %46 = llvm.getelementptr %45[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %47 = llvm.load %46 : !llvm.ptr -> i256
    llvm.store %46, %0 : !llvm.ptr, !llvm.ptr
    %c18446744073709551615_i256 = arith.constant 18446744073709551615 : i256
    %48 = arith.cmpi sgt, %47, %c18446744073709551615_i256 : i256
    %c84_i8 = arith.constant 84 : i8
    cf.cond_br %48, ^bb1(%c84_i8 : i8), ^bb20
  ^bb20:  // pred: ^bb19
    %49 = arith.trunci %47 : i256 to i64
    %c0_i64_17 = arith.constant 0 : i64
    %50 = arith.cmpi slt, %49, %c0_i64_17 : i64
    %c84_i8_18 = arith.constant 84 : i8
    cf.cond_br %50, ^bb1(%c84_i8_18 : i8), ^bb21
  ^bb21:  // pred: ^bb20
    %c31_i64 = arith.constant 31 : i64
    %c32_i64 = arith.constant 32 : i64
    %51 = arith.addi %49, %c31_i64 : i64
    %52 = arith.divui %51, %c32_i64 : i64
    %c3_i64_19 = arith.constant 3 : i64
    %53 = arith.muli %52, %c3_i64_19 : i64
    %54 = llvm.load %arg1 : !llvm.ptr -> i64
    %55 = arith.cmpi ult, %54, %53 : i64
    scf.if %55 {
    } else {
      %100 = arith.subi %54, %53 : i64
      llvm.store %100, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_20 = arith.constant 80 : i8
    cf.cond_br %55, ^bb1(%c80_i8_20 : i8), ^bb22
  ^bb22:  // pred: ^bb21
    %c0_i64_21 = arith.constant 0 : i64
    %56 = arith.cmpi ne, %49, %c0_i64_21 : i64
    cf.cond_br %56, ^bb29, ^bb23
  ^bb23:  // 2 preds: ^bb22, ^bb33
    %57 = arith.trunci %41 : i256 to i64
    %c1_i256 = arith.constant 1 : i256
    %58 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %38, %58 {alignment = 1 : i64} : i256, !llvm.ptr
    %c1_i256_22 = arith.constant 1 : i256
    %59 = llvm.alloca %c1_i256_22 x i256 : (i256) -> !llvm.ptr
    llvm.store %44, %59 {alignment = 1 : i64} : i256, !llvm.ptr
    %60 = call @dora_fn_ext_code_copy(%arg0, %58, %59, %49, %57) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, i64, i64) -> !llvm.ptr
    %61 = llvm.getelementptr %60[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %62 = llvm.load %61 : !llvm.ptr -> i64
    %63 = llvm.load %arg1 : !llvm.ptr -> i64
    %64 = arith.cmpi ult, %63, %62 : i64
    scf.if %64 {
    } else {
      %100 = arith.subi %63, %62 : i64
      llvm.store %100, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_23 = arith.constant 80 : i8
    cf.cond_br %64, ^bb1(%c80_i8_23 : i8), ^bb24
  ^bb24:  // pred: ^bb23
    cf.br ^bb28
  ^bb25:  // pred: ^bb27
    %c1024_i64_24 = arith.constant 1024 : i64
    %65 = llvm.load %arg3 : !llvm.ptr -> i64
    %c-4_i64 = arith.constant -4 : i64
    %66 = arith.addi %65, %c-4_i64 : i64
    llvm.store %66, %arg3 : i64, !llvm.ptr
    %c4_i64 = arith.constant 4 : i64
    %67 = arith.cmpi ult, %65, %c4_i64 : i64
    %c91_i8 = arith.constant 91 : i8
    cf.cond_br %67, ^bb1(%c91_i8 : i8), ^bb19
  ^bb26:  // pred: ^bb15
    %68 = llvm.load %arg1 : !llvm.ptr -> i64
    %c0_i64_25 = arith.constant 0 : i64
    call @dora_fn_nop() : () -> ()
    %69 = arith.cmpi uge, %68, %c0_i64_25 : i64
    %c80_i8_26 = arith.constant 80 : i8
    cf.cond_br %69, ^bb27, ^bb1(%c80_i8_26 : i8)
  ^bb27:  // pred: ^bb26
    %70 = arith.subi %68, %c0_i64_25 : i64
    llvm.store %70, %arg1 : i64, !llvm.ptr
    cf.br ^bb25
  ^bb28:  // pred: ^bb24
    %c0_i64_27 = arith.constant 0 : i64
    %c1_i8 = arith.constant 1 : i8
    %71 = llvm.load %arg1 : !llvm.ptr -> i64
    call @dora_fn_write_result(%arg0, %c0_i64_27, %c0_i64_27, %71, %c1_i8) : (!llvm.ptr, i64, i64, i64, i8) -> ()
    return %c1_i8 : i8
  ^bb29:  // pred: ^bb22
    %c18446744073709551615_i256_28 = arith.constant 18446744073709551615 : i256
    %72 = arith.cmpi sgt, %41, %c18446744073709551615_i256_28 : i256
    %c84_i8_29 = arith.constant 84 : i8
    cf.cond_br %72, ^bb1(%c84_i8_29 : i8), ^bb30
  ^bb30:  // pred: ^bb29
    %73 = arith.trunci %41 : i256 to i64
    %c0_i64_30 = arith.constant 0 : i64
    %74 = arith.cmpi slt, %73, %c0_i64_30 : i64
    %c84_i8_31 = arith.constant 84 : i8
    cf.cond_br %74, ^bb1(%c84_i8_31 : i8), ^bb31
  ^bb31:  // pred: ^bb30
    %75 = arith.addi %73, %49 : i64
    %c0_i64_32 = arith.constant 0 : i64
    %76 = arith.cmpi slt, %75, %c0_i64_32 : i64
    %c84_i8_33 = arith.constant 84 : i8
    cf.cond_br %76, ^bb1(%c84_i8_33 : i8), ^bb32
  ^bb32:  // pred: ^bb31
    %c31_i64_34 = arith.constant 31 : i64
    %c32_i64_35 = arith.constant 32 : i64
    %77 = arith.addi %75, %c31_i64_34 : i64
    %78 = arith.divui %77, %c32_i64_35 : i64
    %c32_i64_36 = arith.constant 32 : i64
    %79 = arith.muli %78, %c32_i64_36 : i64
    %80 = call @dora_fn_memory_size(%arg0) : (!llvm.ptr) -> i64
    %c31_i64_37 = arith.constant 31 : i64
    %c32_i64_38 = arith.constant 32 : i64
    %81 = arith.addi %80, %c31_i64_37 : i64
    %82 = arith.divui %81, %c32_i64_38 : i64
    %83 = arith.muli %82, %c32_i64_36 : i64
    %84 = arith.cmpi ult, %83, %79 : i64
    cf.cond_br %84, ^bb34, ^bb33
  ^bb33:  // 2 preds: ^bb32, ^bb36
    cf.br ^bb23
  ^bb34:  // pred: ^bb32
    %c3_i64_39 = arith.constant 3 : i64
    %c512_i64 = arith.constant 512 : i64
    %85 = arith.muli %82, %82 : i64
    %86 = arith.divui %85, %c512_i64 : i64
    %87 = arith.muli %82, %c3_i64_39 : i64
    %88 = arith.addi %86, %87 : i64
    %c3_i64_40 = arith.constant 3 : i64
    %c512_i64_41 = arith.constant 512 : i64
    %89 = arith.muli %78, %78 : i64
    %90 = arith.divui %89, %c512_i64_41 : i64
    %91 = arith.muli %78, %c3_i64_40 : i64
    %92 = arith.addi %90, %91 : i64
    %93 = arith.subi %92, %88 : i64
    %94 = llvm.load %arg1 : !llvm.ptr -> i64
    %95 = arith.cmpi ult, %94, %93 : i64
    scf.if %95 {
    } else {
      %100 = arith.subi %94, %93 : i64
      llvm.store %100, %arg1 : i64, !llvm.ptr
    }
    %c80_i8_42 = arith.constant 80 : i8
    cf.cond_br %95, ^bb1(%c80_i8_42 : i8), ^bb35
  ^bb35:  // pred: ^bb34
    %96 = call @dora_fn_extend_memory(%arg0, %79) : (!llvm.ptr, i64) -> !llvm.ptr
    %97 = llvm.getelementptr %96[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %98 = llvm.load %97 : !llvm.ptr -> i8
    %c0_i8 = arith.constant 0 : i8
    %99 = arith.cmpi ne, %98, %c0_i8 : i8
    cf.cond_br %99, ^bb1(%98 : i8), ^bb36
  ^bb36:  // pred: ^bb35
    cf.br ^bb33
  }
}
