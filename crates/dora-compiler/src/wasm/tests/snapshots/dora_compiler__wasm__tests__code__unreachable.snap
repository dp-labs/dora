---
source: crates/dora-compiler/src/wasm/tests/code.rs
expression: op
snapshot_kind: text
---
module {
  func.func @dummy(%arg0: !llvm.ptr) {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @dummy3(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func public @"type-i32"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    "wasm.unreachable"() : () -> ()
  ^bb2(%0: i32):  // no predecessors
    return %0 : i32
  }
  func.func public @"type-i64"(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    "wasm.unreachable"() : () -> ()
  ^bb2(%0: i64):  // no predecessors
    return %0 : i64
  }
  func.func public @"type-f32"(%arg0: !llvm.ptr) -> f32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    "wasm.unreachable"() : () -> ()
  ^bb2(%0: f32):  // no predecessors
    return %0 : f32
  }
  func.func public @"type-f64"(%arg0: !llvm.ptr) -> f64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    "wasm.unreachable"() : () -> ()
  ^bb2(%0: f64):  // no predecessors
    return %0 : f64
  }
  func.func public @"as-func-first"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    "wasm.unreachable"() : () -> ()
  ^bb2(%0: i32):  // no predecessors
    return %0 : i32
  }
  func.func public @"as-func-mid"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    "wasm.unreachable"() : () -> ()
  ^bb2(%0: i32):  // no predecessors
    return %0 : i32
  }
  func.func public @"as-func-last"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    "wasm.unreachable"() : () -> ()
  ^bb2:  // no predecessors
    return
  }
  func.func public @"as-func-value"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    "wasm.unreachable"() : () -> ()
  ^bb2(%0: i32):  // no predecessors
    return %0 : i32
  }
  func.func public @"as-block-first"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    "wasm.unreachable"() : () -> ()
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // no predecessors
    cf.br ^bb2(%1 : i32)
  }
  func.func public @"as-block-mid"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    "wasm.unreachable"() : () -> ()
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // no predecessors
    cf.br ^bb2(%1 : i32)
  }
  func.func public @"as-block-last"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    "wasm.unreachable"() : () -> ()
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // no predecessors
    cf.br ^bb2
  }
  func.func public @"as-block-value"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    "wasm.unreachable"() : () -> ()
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // no predecessors
    cf.br ^bb2(%1 : i32)
  }
  func.func public @"as-block-broke"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb3(%c1_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // pred: ^bb1
    cf.br ^bb2(%1 : i32)
  }
  func.func public @"as-loop-first"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb4
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // no predecessors
    cf.br ^bb2(%1 : i32)
  ^bb4:  // pred: ^bb1
    "wasm.unreachable"() : () -> ()
  }
  func.func public @"as-loop-mid"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb4
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // no predecessors
    cf.br ^bb2(%1 : i32)
  ^bb4:  // pred: ^bb1
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    "wasm.unreachable"() : () -> ()
  }
  func.func public @"as-loop-last"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // no predecessors
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    "wasm.unreachable"() : () -> ()
  }
  func.func public @"as-loop-broke"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb5
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // 2 preds: ^bb4, ^bb5
    cf.br ^bb2(%1 : i32)
  ^bb4(%2: i32):  // no predecessors
    cf.br ^bb3(%2 : i32)
  ^bb5:  // pred: ^bb1
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb3(%c1_i32 : i32)
  }
  func.func public @"as-br-value"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    "wasm.unreachable"() : () -> ()
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // no predecessors
    cf.br ^bb2(%1 : i32)
  }
  func.func public @"as-br_if-cond"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    "wasm.unreachable"() : () -> ()
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // no predecessors
    cf.br ^bb2
  }
  func.func public @"as-br_if-value"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    "wasm.unreachable"() : () -> ()
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // no predecessors
    cf.br ^bb2(%1 : i32)
  }
  func.func public @"as-br_if-value-cond"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c6_i32 = arith.constant 6 : i32
    "wasm.unreachable"() : () -> ()
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // no predecessors
    cf.br ^bb2(%1 : i32)
  }
  func.func public @"as-br_table-index"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    "wasm.unreachable"() : () -> ()
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // no predecessors
    cf.br ^bb2
  }
  func.func public @"as-br_table-value"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    "wasm.unreachable"() : () -> ()
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // no predecessors
    cf.br ^bb2(%1 : i32)
  }
  func.func public @"as-br_table-value-2"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    "wasm.unreachable"() : () -> ()
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // pred: ^bb4
    cf.br ^bb2(%1 : i32)
  ^bb4(%2: i32):  // no predecessors
    cf.br ^bb3(%2 : i32)
  }
  func.func public @"as-br_table-value-index"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c6_i32 = arith.constant 6 : i32
    "wasm.unreachable"() : () -> ()
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // no predecessors
    cf.br ^bb2(%1 : i32)
  }
  func.func public @"as-br_table-value-and-index"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    "wasm.unreachable"() : () -> ()
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // no predecessors
    cf.br ^bb2(%1 : i32)
  }
  func.func public @"as-return-value"(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    "wasm.unreachable"() : () -> ()
  ^bb2(%0: i64):  // no predecessors
    return %0 : i64
  }
  func.func public @"as-if-cond"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    "wasm.unreachable"() : () -> ()
  ^bb2(%0: i32):  // no predecessors
    return %0 : i32
  }
  func.func public @"as-if-then"(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %3 = arith.cmpi ne, %2, %c0_i32 : i32
    cf.cond_br %3, ^bb3, ^bb4
  ^bb2(%4: i32):  // pred: ^bb5
    return %4 : i32
  ^bb3:  // pred: ^bb1
    "wasm.unreachable"() : () -> ()
  ^bb4:  // pred: ^bb1
    %5 = llvm.load %1 : !llvm.ptr -> i32
    cf.br ^bb5(%5 : i32)
  ^bb5(%6: i32):  // pred: ^bb4
    cf.br ^bb2(%6 : i32)
  }
  func.func public @"as-if-else"(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %3 = arith.cmpi ne, %2, %c0_i32 : i32
    cf.cond_br %3, ^bb3, ^bb4
  ^bb2(%4: i32):  // pred: ^bb5
    return %4 : i32
  ^bb3:  // pred: ^bb1
    %5 = llvm.load %1 : !llvm.ptr -> i32
    cf.br ^bb5(%5 : i32)
  ^bb4:  // pred: ^bb1
    "wasm.unreachable"() : () -> ()
  ^bb5(%6: i32):  // pred: ^bb3
    cf.br ^bb2(%6 : i32)
  }
  func.func public @"as-if-then-no-else"(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %3 = arith.cmpi ne, %2, %c0_i32 : i32
    cf.cond_br %3, ^bb3, ^bb4
  ^bb2(%4: i32):  // pred: ^bb5
    return %4 : i32
  ^bb3:  // pred: ^bb1
    "wasm.unreachable"() : () -> ()
  ^bb4:  // pred: ^bb1
    cf.br ^bb5
  ^bb5:  // pred: ^bb4
    %5 = llvm.load %1 : !llvm.ptr -> i32
    cf.br ^bb2(%5 : i32)
  }
  func.func public @"as-select-first"(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    "wasm.unreachable"() : () -> ()
  ^bb2(%2: i32):  // no predecessors
    return %2 : i32
  }
  func.func public @"as-select-second"(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    "wasm.unreachable"() : () -> ()
  ^bb2(%3: i32):  // no predecessors
    return %3 : i32
  }
  func.func public @"as-select-cond"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    "wasm.unreachable"() : () -> ()
  ^bb2(%0: i32):  // no predecessors
    return %0 : i32
  }
  func.func public @"as-call-first"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    "wasm.unreachable"() : () -> ()
  ^bb2:  // no predecessors
    return
  }
  func.func public @"as-call-mid"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    "wasm.unreachable"() : () -> ()
  ^bb2:  // no predecessors
    return
  }
  func.func public @"as-call-last"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    "wasm.unreachable"() : () -> ()
  ^bb2:  // no predecessors
    return
  }
  func.func public @"as-local.set-value"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %cst = arith.constant 0.000000e+00 : f32
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f32 : (i64) -> !llvm.ptr
    llvm.store %cst, %0 : f32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    "wasm.unreachable"() : () -> ()
  ^bb2:  // no predecessors
    return
  }
  func.func public @"as-local.tee-value"(%arg0: !llvm.ptr) -> f32 attributes {llvm.emit_c_interface} {
    %cst = arith.constant 0.000000e+00 : f32
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f32 : (i64) -> !llvm.ptr
    llvm.store %cst, %0 : f32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    "wasm.unreachable"() : () -> ()
  ^bb2(%1: f32):  // no predecessors
    return %1 : f32
  }
  func.func public @"as-global.set-value"(%arg0: !llvm.ptr) -> f32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    "wasm.unreachable"() : () -> ()
  ^bb2(%0: f32):  // no predecessors
    return %0 : f32
  }
  func.func public @"as-load-address"(%arg0: !llvm.ptr) -> f32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    "wasm.unreachable"() : () -> ()
  ^bb2(%0: f32):  // no predecessors
    return %0 : f32
  }
  func.func public @"as-loadN-address"(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    "wasm.unreachable"() : () -> ()
  ^bb2(%0: i64):  // no predecessors
    return %0 : i64
  }
  func.func public @"as-store-address"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    "wasm.unreachable"() : () -> ()
  ^bb2:  // no predecessors
    return
  }
  func.func public @"as-store-value"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2_i32 = arith.constant 2 : i32
    "wasm.unreachable"() : () -> ()
  ^bb2:  // no predecessors
    return
  }
  func.func public @"as-storeN-address"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    "wasm.unreachable"() : () -> ()
  ^bb2:  // no predecessors
    return
  }
  func.func public @"as-storeN-value"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2_i32 = arith.constant 2 : i32
    "wasm.unreachable"() : () -> ()
  ^bb2:  // no predecessors
    return
  }
  func.func public @"as-unary-operand"(%arg0: !llvm.ptr) -> f32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    "wasm.unreachable"() : () -> ()
  ^bb2(%0: f32):  // no predecessors
    return %0 : f32
  }
  func.func public @"as-binary-left"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    "wasm.unreachable"() : () -> ()
  ^bb2(%0: i32):  // no predecessors
    return %0 : i32
  }
  func.func public @"as-binary-right"(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c10_i64 = arith.constant 10 : i64
    "wasm.unreachable"() : () -> ()
  ^bb2(%0: i64):  // no predecessors
    return %0 : i64
  }
  func.func public @"as-test-operand"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    "wasm.unreachable"() : () -> ()
  ^bb2(%0: i32):  // no predecessors
    return %0 : i32
  }
  func.func public @"as-compare-left"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    "wasm.unreachable"() : () -> ()
  ^bb2(%0: i32):  // no predecessors
    return %0 : i32
  }
  func.func public @"as-compare-right"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 1.09261619E+9 : f32
    "wasm.unreachable"() : () -> ()
  ^bb2(%0: i32):  // no predecessors
    return %0 : i32
  }
  func.func public @"as-convert-operand"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    "wasm.unreachable"() : () -> ()
  ^bb2(%0: i32):  // no predecessors
    return %0 : i32
  }
  func.func public @"as-memory.grow-size"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    "wasm.unreachable"() : () -> ()
  ^bb2(%0: i32):  // no predecessors
    return %0 : i32
  }
  func.func private @dora_fn_wasm_table_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_fill(!llvm.ptr, i32, i32, !llvm.ptr, i32)
  func.func private @dora_fn_wasm_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_table_set(!llvm.ptr, i32, i32, !llvm.ptr)
  func.func private @dora_fn_wasm_imported_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_imported_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_func_ref(!llvm.ptr, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_data_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_elem_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_raise_trap(i32)
}
