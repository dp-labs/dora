---
source: crates/dora-compiler/src/wasm/tests/code.rs
expression: op
snapshot_kind: text
---
module {
  func.func @f0(%arg0: !llvm.ptr) {
    %c0_i32 = arith.constant 0 : i32
    %c0_i32_0 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %0 = arith.extui %c0_i32 : i32 to i64
    %1 = arith.addi %0, %c0_i64 : i64
    %2 = llvm.getelementptr %arg0[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %4[%1] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    llvm.store %c0_i32_0, %5 : i32, !llvm.ptr
    %c4_i32 = arith.constant 4 : i32
    %c0_i32_1 = arith.constant 0 : i32
    %c0_i64_2 = arith.constant 0 : i64
    %6 = arith.extui %c4_i32 : i32 to i64
    %7 = arith.addi %6, %c0_i64_2 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    llvm.store %c0_i32_1, %8 : i32, !llvm.ptr
    %c8_i32 = arith.constant 8 : i32
    %c0_i32_3 = arith.constant 0 : i32
    %c0_i64_4 = arith.constant 0 : i64
    %9 = arith.extui %c8_i32 : i32 to i64
    %10 = arith.addi %9, %c0_i64_4 : i64
    %11 = llvm.getelementptr %4[%10] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    llvm.store %c0_i32_3, %11 : i32, !llvm.ptr
    %c12_i32 = arith.constant 12 : i32
    %c0_i32_5 = arith.constant 0 : i32
    %c0_i64_6 = arith.constant 0 : i64
    %12 = arith.extui %c12_i32 : i32 to i64
    %13 = arith.addi %12, %c0_i64_6 : i64
    %14 = llvm.getelementptr %4[%13] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    llvm.store %c0_i32_5, %14 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    return
  }
  func.func @f1(%arg0: !llvm.ptr) -> i32 {
    %c8_i32 = arith.constant 8 : i32
    %c0_i32 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %0 = arith.extui %c8_i32 : i32 to i64
    %1 = arith.addi %0, %c0_i64 : i64
    %2 = llvm.getelementptr %arg0[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %4[%1] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c5_i32 = arith.constant 5 : i32
    %cst = arith.constant 2.14748365E+9 : f32
    %c0_i64_0 = arith.constant 0 : i64
    %6 = arith.extui %c5_i32 : i32 to i64
    %7 = arith.addi %6, %c0_i64_0 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    llvm.store %cst, %8 : f32, !llvm.ptr
    %c8_i32_1 = arith.constant 8 : i32
    %c0_i64_2 = arith.constant 0 : i64
    %9 = arith.extui %c8_i32_1 : i32 to i64
    %10 = arith.addi %9, %c0_i64_2 : i64
    %11 = llvm.getelementptr %4[%10] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %12 = llvm.load %11 : !llvm.ptr -> i32
    cf.br ^bb1(%12 : i32)
  ^bb1(%13: i32):  // pred: ^bb0
    return %13 : i32
  }
  func.func @f2(%arg0: !llvm.ptr) -> i32 {
    %c0_i32 = arith.constant 0 : i32
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c8_i32 = arith.constant 8 : i32
    %c0_i64 = arith.constant 0 : i64
    %2 = arith.extui %c8_i32 : i32 to i64
    %3 = arith.addi %2, %c0_i64 : i64
    %4 = llvm.getelementptr %arg0[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %6[%3] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %8 = llvm.load %7 : !llvm.ptr -> i32
    llvm.store %8, %0 : i32, !llvm.ptr
    %c5_i32 = arith.constant 5 : i32
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %c0_i64_1 = arith.constant 0 : i64
    %9 = arith.extui %c5_i32 : i32 to i64
    %10 = arith.addi %9, %c0_i64_1 : i64
    %11 = llvm.getelementptr %6[%10] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    llvm.store %c-2147483648_i32, %11 : i32, !llvm.ptr
    %c8_i32_2 = arith.constant 8 : i32
    %c0_i64_3 = arith.constant 0 : i64
    %12 = arith.extui %c8_i32_2 : i32 to i64
    %13 = arith.addi %12, %c0_i64_3 : i64
    %14 = llvm.getelementptr %6[%13] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %15 = llvm.load %14 : !llvm.ptr -> i32
    llvm.store %15, %1 : i32, !llvm.ptr
    %16 = llvm.load %0 : !llvm.ptr -> i32
    %17 = llvm.load %1 : !llvm.ptr -> i32
    %18 = "wasm.add"(%16, %17) : (i32, i32) -> i32
    cf.br ^bb1(%18 : i32)
  ^bb1(%19: i32):  // pred: ^bb0
    return %19 : i32
  }
  func.func @f3(%arg0: !llvm.ptr) -> f32 {
    %cst = arith.constant 0.000000e+00 : f32
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f32 : (i64) -> !llvm.ptr
    llvm.store %cst, %0 : f32, !llvm.ptr
    %c8_i32 = arith.constant 8 : i32
    %c589505315_i32 = arith.constant 589505315 : i32
    %c0_i64 = arith.constant 0 : i64
    %1 = arith.extui %c8_i32 : i32 to i64
    %2 = arith.addi %1, %c0_i64 : i64
    %3 = llvm.getelementptr %arg0[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %5[%2] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    llvm.store %c589505315_i32, %6 : i32, !llvm.ptr
    %c11_i32 = arith.constant 11 : i32
    %c0_i64_0 = arith.constant 0 : i64
    %7 = arith.extui %c11_i32 : i32 to i64
    %8 = arith.addi %7, %c0_i64_0 : i64
    %9 = llvm.getelementptr %5[%8] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %10 = llvm.load %9 : !llvm.ptr -> f32
    llvm.store %10, %0 : f32, !llvm.ptr
    %c8_i32_1 = arith.constant 8 : i32
    %c0_i32 = arith.constant 0 : i32
    %c0_i64_2 = arith.constant 0 : i64
    %11 = arith.extui %c8_i32_1 : i32 to i64
    %12 = arith.addi %11, %c0_i64_2 : i64
    %13 = llvm.getelementptr %5[%12] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    llvm.store %c0_i32, %13 : i32, !llvm.ptr
    %14 = llvm.load %0 : !llvm.ptr -> f32
    cf.br ^bb1(%14 : f32)
  ^bb1(%15: f32):  // pred: ^bb0
    return %15 : f32
  }
  func.func @malloc(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c16_i32 = arith.constant 16 : i32
    cf.br ^bb1(%c16_i32 : i32)
  ^bb1(%1: i32):  // pred: ^bb0
    return %1 : i32
  }
  func.func @f5(%arg0: !llvm.ptr) -> i32 {
    %c0_i32 = arith.constant 0 : i32
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c4_i32 = arith.constant 4 : i32
    %2 = call @malloc(%arg0, %c4_i32) : (!llvm.ptr, i32) -> i32
    llvm.store %2, %0 : i32, !llvm.ptr
    %c4_i32_1 = arith.constant 4 : i32
    %3 = call @malloc(%arg0, %c4_i32_1) : (!llvm.ptr, i32) -> i32
    llvm.store %3, %1 : i32, !llvm.ptr
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c42_i32 = arith.constant 42 : i32
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %4 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %7 = llvm.getelementptr %arg0[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %7[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.getelementptr %9[%6] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    llvm.store %c42_i32, %10 : i32, !llvm.ptr
    %11 = llvm.load %1 : !llvm.ptr -> i32
    %c43_i32 = arith.constant 43 : i32
    %c0_i64_2 = arith.constant 0 : i64
    %12 = arith.extui %11 : i32 to i64
    %13 = arith.addi %12, %c0_i64_2 : i64
    %14 = llvm.getelementptr %9[%13] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    llvm.store %c43_i32, %14 : i32, !llvm.ptr
    %15 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_3 = arith.constant 0 : i64
    %16 = arith.extui %15 : i32 to i64
    %17 = arith.addi %16, %c0_i64_3 : i64
    %18 = llvm.getelementptr %9[%17] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %19 = llvm.load %18 : !llvm.ptr -> i32
    cf.br ^bb1(%19 : i32)
  ^bb1(%20: i32):  // pred: ^bb0
    return %20 : i32
  }
}
