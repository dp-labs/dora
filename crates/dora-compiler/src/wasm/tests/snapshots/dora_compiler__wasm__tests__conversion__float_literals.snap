---
source: crates/dora-compiler/src/wasm/tests/conversion.rs
expression: op
snapshot_kind: text
---
module {
  func.func public @f32.nan(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2143289344_i32 = arith.constant 2143289344 : i32
    %0 = arith.bitcast %c2143289344_i32 : i32 to f32
    %1 = arith.bitcast %0 : f32 to i32
    cf.br ^bb2(%1 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func public @f32.positive_nan(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2143289344_i32 = arith.constant 2143289344 : i32
    %0 = arith.bitcast %c2143289344_i32 : i32 to f32
    %1 = arith.bitcast %0 : f32 to i32
    cf.br ^bb2(%1 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func public @f32.negative_nan(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c-4194304_i32 = arith.constant -4194304 : i32
    %0 = arith.bitcast %c-4194304_i32 : i32 to f32
    %1 = arith.bitcast %0 : f32 to i32
    cf.br ^bb2(%1 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func public @f32.plain_nan(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2143289344_i32 = arith.constant 2143289344 : i32
    %0 = arith.bitcast %c2143289344_i32 : i32 to f32
    %1 = arith.bitcast %0 : f32 to i32
    cf.br ^bb2(%1 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func public @f32.informally_known_as_plain_snan(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2141192192_i32 = arith.constant 2141192192 : i32
    %0 = arith.bitcast %c2141192192_i32 : i32 to f32
    %1 = arith.bitcast %0 : f32 to i32
    cf.br ^bb2(%1 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func public @f32.all_ones_nan(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c-1_i32 = arith.constant -1 : i32
    %0 = arith.bitcast %c-1_i32 : i32 to f32
    %1 = arith.bitcast %0 : f32 to i32
    cf.br ^bb2(%1 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func public @f32.misc_nan(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2139169605_i32 = arith.constant 2139169605 : i32
    %0 = arith.bitcast %c2139169605_i32 : i32 to f32
    %1 = arith.bitcast %0 : f32 to i32
    cf.br ^bb2(%1 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func public @f32.misc_positive_nan(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2142257232_i32 = arith.constant 2142257232 : i32
    %0 = arith.bitcast %c2142257232_i32 : i32 to f32
    %1 = arith.bitcast %0 : f32 to i32
    cf.br ^bb2(%1 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func public @f32.misc_negative_nan(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c-5587746_i32 = arith.constant -5587746 : i32
    %0 = arith.bitcast %c-5587746_i32 : i32 to f32
    %1 = arith.bitcast %0 : f32 to i32
    cf.br ^bb2(%1 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func public @f32.infinity(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2139095040_i32 = arith.constant 2139095040 : i32
    %0 = arith.bitcast %c2139095040_i32 : i32 to f32
    %1 = arith.bitcast %0 : f32 to i32
    cf.br ^bb2(%1 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func public @f32.positive_infinity(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2139095040_i32 = arith.constant 2139095040 : i32
    %0 = arith.bitcast %c2139095040_i32 : i32 to f32
    %1 = arith.bitcast %0 : f32 to i32
    cf.br ^bb2(%1 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func public @f32.negative_infinity(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c-8388608_i32 = arith.constant -8388608 : i32
    %0 = arith.bitcast %c-8388608_i32 : i32 to f32
    %1 = arith.bitcast %0 : f32 to i32
    cf.br ^bb2(%1 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func public @f32.zero(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %0 = arith.bitcast %c0_i32 : i32 to f32
    %1 = arith.bitcast %0 : f32 to i32
    cf.br ^bb2(%1 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func public @f32.positive_zero(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %0 = arith.bitcast %c0_i32 : i32 to f32
    %1 = arith.bitcast %0 : f32 to i32
    cf.br ^bb2(%1 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func public @f32.negative_zero(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %0 = arith.bitcast %c-2147483648_i32 : i32 to f32
    %1 = arith.bitcast %0 : f32 to i32
    cf.br ^bb2(%1 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func public @f32.misc(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1086918619_i32 = arith.constant 1086918619 : i32
    %0 = arith.bitcast %c1086918619_i32 : i32 to f32
    %1 = arith.bitcast %0 : f32 to i32
    cf.br ^bb2(%1 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func public @f32.min_positive(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %0 = arith.bitcast %c1_i32 : i32 to f32
    %1 = arith.bitcast %0 : f32 to i32
    cf.br ^bb2(%1 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func public @f32.min_normal(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c8388608_i32 = arith.constant 8388608 : i32
    %0 = arith.bitcast %c8388608_i32 : i32 to f32
    %1 = arith.bitcast %0 : f32 to i32
    cf.br ^bb2(%1 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func public @f32.max_finite(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2139095039_i32 = arith.constant 2139095039 : i32
    %0 = arith.bitcast %c2139095039_i32 : i32 to f32
    %1 = arith.bitcast %0 : f32 to i32
    cf.br ^bb2(%1 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func public @f32.max_subnormal(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c8388607_i32 = arith.constant 8388607 : i32
    %0 = arith.bitcast %c8388607_i32 : i32 to f32
    %1 = arith.bitcast %0 : f32 to i32
    cf.br ^bb2(%1 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func public @f32.trailing_dot(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1149239296_i32 = arith.constant 1149239296 : i32
    %0 = arith.bitcast %c1149239296_i32 : i32 to f32
    %1 = arith.bitcast %0 : f32 to i32
    cf.br ^bb2(%1 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func public @f32.misc_int(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1200726656_i32 = arith.constant 1200726656 : i32
    %0 = arith.bitcast %c1200726656_i32 : i32 to f32
    %1 = arith.bitcast %0 : f32 to i32
    cf.br ^bb2(%1 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func public @f32.large_int(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1736441856_i32 = arith.constant 1736441856 : i32
    %0 = arith.bitcast %c1736441856_i32 : i32 to f32
    %1 = arith.bitcast %0 : f32 to i32
    cf.br ^bb2(%1 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func public @f32.min_int32(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c-822083584_i32 = arith.constant -822083584 : i32
    %0 = arith.bitcast %c-822083584_i32 : i32 to f32
    %1 = arith.bitcast %0 : f32 to i32
    cf.br ^bb2(%1 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func public @f32.min_int64(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c-553648128_i32 = arith.constant -553648128 : i32
    %0 = arith.bitcast %c-553648128_i32 : i32 to f32
    %1 = arith.bitcast %0 : f32 to i32
    cf.br ^bb2(%1 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func public @f32_dec.zero(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %0 = arith.bitcast %c0_i32 : i32 to f32
    %1 = arith.bitcast %0 : f32 to i32
    cf.br ^bb2(%1 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func public @f32_dec.positive_zero(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %0 = arith.bitcast %c0_i32 : i32 to f32
    %1 = arith.bitcast %0 : f32 to i32
    cf.br ^bb2(%1 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func public @f32_dec.negative_zero(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %0 = arith.bitcast %c-2147483648_i32 : i32 to f32
    %1 = arith.bitcast %0 : f32 to i32
    cf.br ^bb2(%1 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func public @f32_dec.misc(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1086918619_i32 = arith.constant 1086918619 : i32
    %0 = arith.bitcast %c1086918619_i32 : i32 to f32
    %1 = arith.bitcast %0 : f32 to i32
    cf.br ^bb2(%1 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func public @f32_dec.min_positive(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %0 = arith.bitcast %c1_i32 : i32 to f32
    %1 = arith.bitcast %0 : f32 to i32
    cf.br ^bb2(%1 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func public @f32_dec.min_normal(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c8388608_i32 = arith.constant 8388608 : i32
    %0 = arith.bitcast %c8388608_i32 : i32 to f32
    %1 = arith.bitcast %0 : f32 to i32
    cf.br ^bb2(%1 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func public @f32_dec.max_subnormal(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c8388607_i32 = arith.constant 8388607 : i32
    %0 = arith.bitcast %c8388607_i32 : i32 to f32
    %1 = arith.bitcast %0 : f32 to i32
    cf.br ^bb2(%1 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func public @f32_dec.max_finite(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2139095039_i32 = arith.constant 2139095039 : i32
    %0 = arith.bitcast %c2139095039_i32 : i32 to f32
    %1 = arith.bitcast %0 : f32 to i32
    cf.br ^bb2(%1 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func public @f32_dec.trailing_dot(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1343554297_i32 = arith.constant 1343554297 : i32
    %0 = arith.bitcast %c1343554297_i32 : i32 to f32
    %1 = arith.bitcast %0 : f32 to i32
    cf.br ^bb2(%1 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func public @f32_dec.misc_int(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1178657792_i32 = arith.constant 1178657792 : i32
    %0 = arith.bitcast %c1178657792_i32 : i32 to f32
    %1 = arith.bitcast %0 : f32 to i32
    cf.br ^bb2(%1 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func public @f32_dec.large_int(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1621981420_i32 = arith.constant 1621981420 : i32
    %0 = arith.bitcast %c1621981420_i32 : i32 to f32
    %1 = arith.bitcast %0 : f32 to i32
    cf.br ^bb2(%1 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func public @f32_dec.min_int32(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c-822083584_i32 = arith.constant -822083584 : i32
    %0 = arith.bitcast %c-822083584_i32 : i32 to f32
    %1 = arith.bitcast %0 : f32 to i32
    cf.br ^bb2(%1 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func public @f32_dec.min_int64(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c-553648128_i32 = arith.constant -553648128 : i32
    %0 = arith.bitcast %c-553648128_i32 : i32 to f32
    %1 = arith.bitcast %0 : f32 to i32
    cf.br ^bb2(%1 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func public @f32_dec.root_beer_float(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1065353217_i32 = arith.constant 1065353217 : i32
    %0 = arith.bitcast %c1065353217_i32 : i32 to f32
    %1 = arith.bitcast %0 : f32 to i32
    cf.br ^bb2(%1 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func public @f64.nan(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c9221120237041090560_i64 = arith.constant 9221120237041090560 : i64
    %0 = arith.bitcast %c9221120237041090560_i64 : i64 to f64
    %1 = arith.bitcast %0 : f64 to i64
    cf.br ^bb2(%1 : i64)
  ^bb2(%2: i64):  // pred: ^bb1
    return %2 : i64
  }
  func.func public @f64.positive_nan(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c9221120237041090560_i64 = arith.constant 9221120237041090560 : i64
    %0 = arith.bitcast %c9221120237041090560_i64 : i64 to f64
    %1 = arith.bitcast %0 : f64 to i64
    cf.br ^bb2(%1 : i64)
  ^bb2(%2: i64):  // pred: ^bb1
    return %2 : i64
  }
  func.func public @f64.negative_nan(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c-2251799813685248_i64 = arith.constant -2251799813685248 : i64
    %0 = arith.bitcast %c-2251799813685248_i64 : i64 to f64
    %1 = arith.bitcast %0 : f64 to i64
    cf.br ^bb2(%1 : i64)
  ^bb2(%2: i64):  // pred: ^bb1
    return %2 : i64
  }
  func.func public @f64.plain_nan(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c9221120237041090560_i64 = arith.constant 9221120237041090560 : i64
    %0 = arith.bitcast %c9221120237041090560_i64 : i64 to f64
    %1 = arith.bitcast %0 : f64 to i64
    cf.br ^bb2(%1 : i64)
  ^bb2(%2: i64):  // pred: ^bb1
    return %2 : i64
  }
  func.func public @f64.informally_known_as_plain_snan(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c9219994337134247936_i64 = arith.constant 9219994337134247936 : i64
    %0 = arith.bitcast %c9219994337134247936_i64 : i64 to f64
    %1 = arith.bitcast %0 : f64 to i64
    cf.br ^bb2(%1 : i64)
  ^bb2(%2: i64):  // pred: ^bb1
    return %2 : i64
  }
  func.func public @f64.all_ones_nan(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c-1_i64 = arith.constant -1 : i64
    %0 = arith.bitcast %c-1_i64 : i64 to f64
    %1 = arith.bitcast %0 : f64 to i64
    cf.br ^bb2(%1 : i64)
  ^bb2(%2: i64):  // pred: ^bb1
    return %2 : i64
  }
  func.func public @f64.misc_nan(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c9218888453225749180_i64 = arith.constant 9218888453225749180 : i64
    %0 = arith.bitcast %c9218888453225749180_i64 : i64 to f64
    %1 = arith.bitcast %0 : f64 to i64
    cf.br ^bb2(%1 : i64)
  ^bb2(%2: i64):  // pred: ^bb1
    return %2 : i64
  }
  func.func public @f64.misc_positive_nan(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c9219717281780008969_i64 = arith.constant 9219717281780008969 : i64
    %0 = arith.bitcast %c9219717281780008969_i64 : i64 to f64
    %1 = arith.bitcast %0 : f64 to i64
    cf.br ^bb2(%1 : i64)
  ^bb2(%2: i64):  // pred: ^bb1
    return %2 : i64
  }
  func.func public @f64.misc_negative_nan(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c-3751748707474619_i64 = arith.constant -3751748707474619 : i64
    %0 = arith.bitcast %c-3751748707474619_i64 : i64 to f64
    %1 = arith.bitcast %0 : f64 to i64
    cf.br ^bb2(%1 : i64)
  ^bb2(%2: i64):  // pred: ^bb1
    return %2 : i64
  }
  func.func public @f64.infinity(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c9218868437227405312_i64 = arith.constant 9218868437227405312 : i64
    %0 = arith.bitcast %c9218868437227405312_i64 : i64 to f64
    %1 = arith.bitcast %0 : f64 to i64
    cf.br ^bb2(%1 : i64)
  ^bb2(%2: i64):  // pred: ^bb1
    return %2 : i64
  }
  func.func public @f64.positive_infinity(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c9218868437227405312_i64 = arith.constant 9218868437227405312 : i64
    %0 = arith.bitcast %c9218868437227405312_i64 : i64 to f64
    %1 = arith.bitcast %0 : f64 to i64
    cf.br ^bb2(%1 : i64)
  ^bb2(%2: i64):  // pred: ^bb1
    return %2 : i64
  }
  func.func public @f64.negative_infinity(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c-4503599627370496_i64 = arith.constant -4503599627370496 : i64
    %0 = arith.bitcast %c-4503599627370496_i64 : i64 to f64
    %1 = arith.bitcast %0 : f64 to i64
    cf.br ^bb2(%1 : i64)
  ^bb2(%2: i64):  // pred: ^bb1
    return %2 : i64
  }
  func.func public @f64.zero(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i64 = arith.constant 0 : i64
    %0 = arith.bitcast %c0_i64 : i64 to f64
    %1 = arith.bitcast %0 : f64 to i64
    cf.br ^bb2(%1 : i64)
  ^bb2(%2: i64):  // pred: ^bb1
    return %2 : i64
  }
  func.func public @f64.positive_zero(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i64 = arith.constant 0 : i64
    %0 = arith.bitcast %c0_i64 : i64 to f64
    %1 = arith.bitcast %0 : f64 to i64
    cf.br ^bb2(%1 : i64)
  ^bb2(%2: i64):  // pred: ^bb1
    return %2 : i64
  }
  func.func public @f64.negative_zero(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c-9223372036854775808_i64 = arith.constant -9223372036854775808 : i64
    %0 = arith.bitcast %c-9223372036854775808_i64 : i64 to f64
    %1 = arith.bitcast %0 : f64 to i64
    cf.br ^bb2(%1 : i64)
  ^bb2(%2: i64):  // pred: ^bb1
    return %2 : i64
  }
  func.func public @f64.misc(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c4618760256179416344_i64 = arith.constant 4618760256179416344 : i64
    %0 = arith.bitcast %c4618760256179416344_i64 : i64 to f64
    %1 = arith.bitcast %0 : f64 to i64
    cf.br ^bb2(%1 : i64)
  ^bb2(%2: i64):  // pred: ^bb1
    return %2 : i64
  }
  func.func public @f64.min_positive(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i64 = arith.constant 1 : i64
    %0 = arith.bitcast %c1_i64 : i64 to f64
    %1 = arith.bitcast %0 : f64 to i64
    cf.br ^bb2(%1 : i64)
  ^bb2(%2: i64):  // pred: ^bb1
    return %2 : i64
  }
  func.func public @f64.min_normal(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c4503599627370496_i64 = arith.constant 4503599627370496 : i64
    %0 = arith.bitcast %c4503599627370496_i64 : i64 to f64
    %1 = arith.bitcast %0 : f64 to i64
    cf.br ^bb2(%1 : i64)
  ^bb2(%2: i64):  // pred: ^bb1
    return %2 : i64
  }
  func.func public @f64.max_subnormal(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c4503599627370495_i64 = arith.constant 4503599627370495 : i64
    %0 = arith.bitcast %c4503599627370495_i64 : i64 to f64
    %1 = arith.bitcast %0 : f64 to i64
    cf.br ^bb2(%1 : i64)
  ^bb2(%2: i64):  // pred: ^bb1
    return %2 : i64
  }
  func.func public @f64.max_finite(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c9218868437227405311_i64 = arith.constant 9218868437227405311 : i64
    %0 = arith.bitcast %c9218868437227405311_i64 : i64 to f64
    %1 = arith.bitcast %0 : f64 to i64
    cf.br ^bb2(%1 : i64)
  ^bb2(%2: i64):  // pred: ^bb1
    return %2 : i64
  }
  func.func public @f64.trailing_dot(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c5057542381537067008_i64 = arith.constant 5057542381537067008 : i64
    %0 = arith.bitcast %c5057542381537067008_i64 : i64 to f64
    %1 = arith.bitcast %0 : f64 to i64
    cf.br ^bb2(%1 : i64)
  ^bb2(%2: i64):  // pred: ^bb1
    return %2 : i64
  }
  func.func public @f64.misc_int(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c4679860480993394688_i64 = arith.constant 4679860480993394688 : i64
    %0 = arith.bitcast %c4679860480993394688_i64 : i64 to f64
    %1 = arith.bitcast %0 : f64 to i64
    cf.br ^bb2(%1 : i64)
  ^bb2(%2: i64):  // pred: ^bb1
    return %2 : i64
  }
  func.func public @f64.large_int(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c4967470388989657088_i64 = arith.constant 4967470388989657088 : i64
    %0 = arith.bitcast %c4967470388989657088_i64 : i64 to f64
    %1 = arith.bitcast %0 : f64 to i64
    cf.br ^bb2(%1 : i64)
  ^bb2(%2: i64):  // pred: ^bb1
    return %2 : i64
  }
  func.func public @f64.min_int32(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c-4476578029606273024_i64 = arith.constant -4476578029606273024 : i64
    %0 = arith.bitcast %c-4476578029606273024_i64 : i64 to f64
    %1 = arith.bitcast %0 : f64 to i64
    cf.br ^bb2(%1 : i64)
  ^bb2(%2: i64):  // pred: ^bb1
    return %2 : i64
  }
  func.func public @f64.min_int64(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c-4332462841530417152_i64 = arith.constant -4332462841530417152 : i64
    %0 = arith.bitcast %c-4332462841530417152_i64 : i64 to f64
    %1 = arith.bitcast %0 : f64 to i64
    cf.br ^bb2(%1 : i64)
  ^bb2(%2: i64):  // pred: ^bb1
    return %2 : i64
  }
  func.func public @f64_dec.zero(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i64 = arith.constant 0 : i64
    %0 = arith.bitcast %c0_i64 : i64 to f64
    %1 = arith.bitcast %0 : f64 to i64
    cf.br ^bb2(%1 : i64)
  ^bb2(%2: i64):  // pred: ^bb1
    return %2 : i64
  }
  func.func public @f64_dec.positive_zero(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i64 = arith.constant 0 : i64
    %0 = arith.bitcast %c0_i64 : i64 to f64
    %1 = arith.bitcast %0 : f64 to i64
    cf.br ^bb2(%1 : i64)
  ^bb2(%2: i64):  // pred: ^bb1
    return %2 : i64
  }
  func.func public @f64_dec.negative_zero(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c-9223372036854775808_i64 = arith.constant -9223372036854775808 : i64
    %0 = arith.bitcast %c-9223372036854775808_i64 : i64 to f64
    %1 = arith.bitcast %0 : f64 to i64
    cf.br ^bb2(%1 : i64)
  ^bb2(%2: i64):  // pred: ^bb1
    return %2 : i64
  }
  func.func public @f64_dec.misc(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c4618760256179416344_i64 = arith.constant 4618760256179416344 : i64
    %0 = arith.bitcast %c4618760256179416344_i64 : i64 to f64
    %1 = arith.bitcast %0 : f64 to i64
    cf.br ^bb2(%1 : i64)
  ^bb2(%2: i64):  // pred: ^bb1
    return %2 : i64
  }
  func.func public @f64_dec.min_positive(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i64 = arith.constant 1 : i64
    %0 = arith.bitcast %c1_i64 : i64 to f64
    %1 = arith.bitcast %0 : f64 to i64
    cf.br ^bb2(%1 : i64)
  ^bb2(%2: i64):  // pred: ^bb1
    return %2 : i64
  }
  func.func public @f64_dec.min_normal(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c4503599627370496_i64 = arith.constant 4503599627370496 : i64
    %0 = arith.bitcast %c4503599627370496_i64 : i64 to f64
    %1 = arith.bitcast %0 : f64 to i64
    cf.br ^bb2(%1 : i64)
  ^bb2(%2: i64):  // pred: ^bb1
    return %2 : i64
  }
  func.func public @f64_dec.max_subnormal(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c4503599627370495_i64 = arith.constant 4503599627370495 : i64
    %0 = arith.bitcast %c4503599627370495_i64 : i64 to f64
    %1 = arith.bitcast %0 : f64 to i64
    cf.br ^bb2(%1 : i64)
  ^bb2(%2: i64):  // pred: ^bb1
    return %2 : i64
  }
  func.func public @f64_dec.max_finite(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c9218868437227405311_i64 = arith.constant 9218868437227405311 : i64
    %0 = arith.bitcast %c9218868437227405311_i64 : i64 to f64
    %1 = arith.bitcast %0 : f64 to i64
    cf.br ^bb2(%1 : i64)
  ^bb2(%2: i64):  // pred: ^bb1
    return %2 : i64
  }
  func.func public @f64_dec.trailing_dot(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c6103021453049119613_i64 = arith.constant 6103021453049119613 : i64
    %0 = arith.bitcast %c6103021453049119613_i64 : i64 to f64
    %1 = arith.bitcast %0 : f64 to i64
    cf.br ^bb2(%1 : i64)
  ^bb2(%2: i64):  // pred: ^bb1
    return %2 : i64
  }
  func.func public @f64_dec.misc_int(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c4668012349850910720_i64 = arith.constant 4668012349850910720 : i64
    %0 = arith.bitcast %c4668012349850910720_i64 : i64 to f64
    %1 = arith.bitcast %0 : f64 to i64
    cf.br ^bb2(%1 : i64)
  ^bb2(%2: i64):  // pred: ^bb1
    return %2 : i64
  }
  func.func public @f64_dec.large_int(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c4906019910204099648_i64 = arith.constant 4906019910204099648 : i64
    %0 = arith.bitcast %c4906019910204099648_i64 : i64 to f64
    %1 = arith.bitcast %0 : f64 to i64
    cf.br ^bb2(%1 : i64)
  ^bb2(%2: i64):  // pred: ^bb1
    return %2 : i64
  }
  func.func public @f64_dec.min_int32(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c-4476578029606273024_i64 = arith.constant -4476578029606273024 : i64
    %0 = arith.bitcast %c-4476578029606273024_i64 : i64 to f64
    %1 = arith.bitcast %0 : f64 to i64
    cf.br ^bb2(%1 : i64)
  ^bb2(%2: i64):  // pred: ^bb1
    return %2 : i64
  }
  func.func public @f64_dec.min_int64(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c-4332462841530417152_i64 = arith.constant -4332462841530417152 : i64
    %0 = arith.bitcast %c-4332462841530417152_i64 : i64 to f64
    %1 = arith.bitcast %0 : f64 to i64
    cf.br ^bb2(%1 : i64)
  ^bb2(%2: i64):  // pred: ^bb1
    return %2 : i64
  }
  func.func public @f64_dec.root_beer_float(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c4607182419335945764_i64 = arith.constant 4607182419335945764 : i64
    %0 = arith.bitcast %c4607182419335945764_i64 : i64 to f64
    %1 = arith.bitcast %0 : f64 to i64
    cf.br ^bb2(%1 : i64)
  ^bb2(%2: i64):  // pred: ^bb1
    return %2 : i64
  }
  func.func public @"f32-dec-sep1"(%arg0: !llvm.ptr) -> f32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1232348160_i32 = arith.constant 1232348160 : i32
    %0 = arith.bitcast %c1232348160_i32 : i32 to f32
    cf.br ^bb2(%0 : f32)
  ^bb2(%1: f32):  // pred: ^bb1
    return %1 : f32
  }
  func.func public @"f32-dec-sep2"(%arg0: !llvm.ptr) -> f32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1148846080_i32 = arith.constant 1148846080 : i32
    %0 = arith.bitcast %c1148846080_i32 : i32 to f32
    cf.br ^bb2(%0 : f32)
  ^bb2(%1: f32):  // pred: ^bb1
    return %1 : f32
  }
  func.func public @"f32-dec-sep3"(%arg0: !llvm.ptr) -> f32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1148897552_i32 = arith.constant 1148897552 : i32
    %0 = arith.bitcast %c1148897552_i32 : i32 to f32
    cf.br ^bb2(%0 : f32)
  ^bb2(%1: f32):  // pred: ^bb1
    return %1 : f32
  }
  func.func public @"f32-dec-sep4"(%arg0: !llvm.ptr) -> f32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1482758550_i32 = arith.constant 1482758550 : i32
    %0 = arith.bitcast %c1482758550_i32 : i32 to f32
    cf.br ^bb2(%0 : f32)
  ^bb2(%1: f32):  // pred: ^bb1
    return %1 : f32
  }
  func.func public @"f32-dec-sep5"(%arg0: !llvm.ptr) -> f32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1847438964_i32 = arith.constant 1847438964 : i32
    %0 = arith.bitcast %c1847438964_i32 : i32 to f32
    cf.br ^bb2(%0 : f32)
  ^bb2(%1: f32):  // pred: ^bb1
    return %1 : f32
  }
  func.func public @"f32-hex-sep1"(%arg0: !llvm.ptr) -> f32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1294004234_i32 = arith.constant 1294004234 : i32
    %0 = arith.bitcast %c1294004234_i32 : i32 to f32
    cf.br ^bb2(%0 : f32)
  ^bb2(%1: f32):  // pred: ^bb1
    return %1 : f32
  }
  func.func public @"f32-hex-sep2"(%arg0: !llvm.ptr) -> f32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1205143424_i32 = arith.constant 1205143424 : i32
    %0 = arith.bitcast %c1205143424_i32 : i32 to f32
    cf.br ^bb2(%0 : f32)
  ^bb2(%1: f32):  // pred: ^bb1
    return %1 : f32
  }
  func.func public @"f32-hex-sep3"(%arg0: !llvm.ptr) -> f32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1193345009_i32 = arith.constant 1193345009 : i32
    %0 = arith.bitcast %c1193345009_i32 : i32 to f32
    cf.br ^bb2(%0 : f32)
  ^bb2(%1: f32):  // pred: ^bb1
    return %1 : f32
  }
  func.func public @"f32-hex-sep4"(%arg0: !llvm.ptr) -> f32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1240465408_i32 = arith.constant 1240465408 : i32
    %0 = arith.bitcast %c1240465408_i32 : i32 to f32
    cf.br ^bb2(%0 : f32)
  ^bb2(%1: f32):  // pred: ^bb1
    return %1 : f32
  }
  func.func public @"f32-hex-sep5"(%arg0: !llvm.ptr) -> f32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1437319208_i32 = arith.constant 1437319208 : i32
    %0 = arith.bitcast %c1437319208_i32 : i32 to f32
    cf.br ^bb2(%0 : f32)
  ^bb2(%1: f32):  // pred: ^bb1
    return %1 : f32
  }
  func.func public @"f64-dec-sep1"(%arg0: !llvm.ptr) -> f64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c4696837146684686336_i64 = arith.constant 4696837146684686336 : i64
    %0 = arith.bitcast %c4696837146684686336_i64 : i64 to f64
    cf.br ^bb2(%0 : f64)
  ^bb2(%1: f64):  // pred: ^bb1
    return %1 : f64
  }
  func.func public @"f64-dec-sep2"(%arg0: !llvm.ptr) -> f64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c4652007308841189376_i64 = arith.constant 4652007308841189376 : i64
    %0 = arith.bitcast %c4652007308841189376_i64 : i64 to f64
    cf.br ^bb2(%0 : f64)
  ^bb2(%1: f64):  // pred: ^bb1
    return %1 : f64
  }
  func.func public @"f64-dec-sep3"(%arg0: !llvm.ptr) -> f64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c4652034942576659200_i64 = arith.constant 4652034942576659200 : i64
    %0 = arith.bitcast %c4652034942576659200_i64 : i64 to f64
    cf.br ^bb2(%0 : f64)
  ^bb2(%1: f64):  // pred: ^bb1
    return %1 : f64
  }
  func.func public @"f64-dec-sep4"(%arg0: !llvm.ptr) -> f64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2796837019126844485_i64 = arith.constant 2796837019126844485 : i64
    %0 = arith.bitcast %c2796837019126844485_i64 : i64 to f64
    cf.br ^bb2(%0 : f64)
  ^bb2(%1: f64):  // pred: ^bb1
    return %1 : f64
  }
  func.func public @"f64-dec-sep5"(%arg0: !llvm.ptr) -> f64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c5027061507362119324_i64 = arith.constant 5027061507362119324 : i64
    %0 = arith.bitcast %c5027061507362119324_i64 : i64 to f64
    cf.br ^bb2(%0 : f64)
  ^bb2(%1: f64):  // pred: ^bb1
    return %1 : f64
  }
  func.func public @"f64-hex-sep1"(%arg0: !llvm.ptr) -> f64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c4838519794133185330_i64 = arith.constant 4838519794133185330 : i64
    %0 = arith.bitcast %c4838519794133185330_i64 : i64 to f64
    cf.br ^bb2(%0 : f64)
  ^bb2(%1: f64):  // pred: ^bb1
    return %1 : f64
  }
  func.func public @"f64-hex-sep2"(%arg0: !llvm.ptr) -> f64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c4682231715257647104_i64 = arith.constant 4682231715257647104 : i64
    %0 = arith.bitcast %c4682231715257647104_i64 : i64 to f64
    cf.br ^bb2(%0 : f64)
  ^bb2(%1: f64):  // pred: ^bb1
    return %1 : f64
  }
  func.func public @"f64-hex-sep3"(%arg0: !llvm.ptr) -> f64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c4675897489574114112_i64 = arith.constant 4675897489574114112 : i64
    %0 = arith.bitcast %c4675897489574114112_i64 : i64 to f64
    cf.br ^bb2(%0 : f64)
  ^bb2(%1: f64):  // pred: ^bb1
    return %1 : f64
  }
  func.func public @"f64-hex-sep4"(%arg0: !llvm.ptr) -> f64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c4701195061021376512_i64 = arith.constant 4701195061021376512 : i64
    %0 = arith.bitcast %c4701195061021376512_i64 : i64 to f64
    cf.br ^bb2(%0 : f64)
  ^bb2(%1: f64):  // pred: ^bb1
    return %1 : f64
  }
  func.func public @"f64-hex-sep5"(%arg0: !llvm.ptr) -> f64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c4806880140420149248_i64 = arith.constant 4806880140420149248 : i64
    %0 = arith.bitcast %c4806880140420149248_i64 : i64 to f64
    cf.br ^bb2(%0 : f64)
  ^bb2(%1: f64):  // pred: ^bb1
    return %1 : f64
  }
  func.func private @dora_fn_wasm_table_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_copy(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_fill(!llvm.ptr, i32, i32, !llvm.ptr, i32)
  func.func private @dora_fn_wasm_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_table_set(!llvm.ptr, i32, i32, !llvm.ptr)
  func.func private @dora_fn_wasm_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_imported_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_func_ref(!llvm.ptr, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_data_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_elem_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_raise_trap(i32)
  func.func private @dora_fn_wasm_gas_limit() -> i64
}
