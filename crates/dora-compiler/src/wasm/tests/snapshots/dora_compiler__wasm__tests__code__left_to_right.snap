---
source: crates/dora-compiler/src/wasm/tests/code.rs
expression: op
snapshot_kind: text
---
module {
  func.func @i32_t0(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c-1_i32 = arith.constant -1 : i32
    cf.br ^bb1(%c-1_i32 : i32)
  ^bb1(%2: i32):  // pred: ^bb0
    return %2 : i32
  }
  func.func @i32_t1(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c-2_i32 = arith.constant -2 : i32
    cf.br ^bb1(%c-2_i32 : i32)
  ^bb1(%2: i32):  // pred: ^bb0
    return %2 : i32
  }
  func.func @i64_t0(%arg0: !llvm.ptr, %arg1: i64, %arg2: i64) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i64, !llvm.ptr
    %c-1_i32 = arith.constant -1 : i32
    cf.br ^bb1(%c-1_i32 : i32)
  ^bb1(%2: i32):  // pred: ^bb0
    return %2 : i32
  }
  func.func @i64_t1(%arg0: !llvm.ptr, %arg1: i64, %arg2: i64) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i64, !llvm.ptr
    %c-2_i32 = arith.constant -2 : i32
    cf.br ^bb1(%c-2_i32 : i32)
  ^bb1(%2: i32):  // pred: ^bb0
    return %2 : i32
  }
  func.func @f32_t0(%arg0: !llvm.ptr, %arg1: f32, %arg2: f32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : f32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : f32, !llvm.ptr
    %c-1_i32 = arith.constant -1 : i32
    cf.br ^bb1(%c-1_i32 : i32)
  ^bb1(%2: i32):  // pred: ^bb0
    return %2 : i32
  }
  func.func @f32_t1(%arg0: !llvm.ptr, %arg1: f32, %arg2: f32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : f32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : f32, !llvm.ptr
    %c-2_i32 = arith.constant -2 : i32
    cf.br ^bb1(%c-2_i32 : i32)
  ^bb1(%2: i32):  // pred: ^bb0
    return %2 : i32
  }
  func.func @f64_t0(%arg0: !llvm.ptr, %arg1: f64, %arg2: f64) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : f64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : f64, !llvm.ptr
    %c-1_i32 = arith.constant -1 : i32
    cf.br ^bb1(%c-1_i32 : i32)
  ^bb1(%2: i32):  // pred: ^bb0
    return %2 : i32
  }
  func.func @f64_t1(%arg0: !llvm.ptr, %arg1: f64, %arg2: f64) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : f64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : f64, !llvm.ptr
    %c-2_i32 = arith.constant -2 : i32
    cf.br ^bb1(%c-2_i32 : i32)
  ^bb1(%2: i32):  // pred: ^bb0
    return %2 : i32
  }
  func.func @reset(%arg0: !llvm.ptr) {
    %c8_i32 = arith.constant 8 : i32
    %c0_i32 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %0 = arith.extui %c8_i32 : i32 to i64
    %1 = arith.addi %0, %c0_i64 : i64
    %2 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %4[%1] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    return
  }
  func.func @bump(%arg0: !llvm.ptr) {
    %c11_i32 = arith.constant 11 : i32
    %c10_i32 = arith.constant 10 : i32
    %c0_i64 = arith.constant 0 : i64
    %0 = arith.extui %c10_i32 : i32 to i64
    %1 = arith.addi %0, %c0_i64 : i64
    %2 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %4[%1] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %6 = llvm.load %5 : !llvm.ptr -> i8
    %7 = arith.extui %6 : i8 to i32
    %c0_i64_0 = arith.constant 0 : i64
    %8 = arith.extui %c11_i32 : i32 to i64
    %9 = arith.addi %8, %c0_i64_0 : i64
    %10 = llvm.getelementptr %4[%9] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %11 = arith.trunci %7 : i32 to i8
    llvm.store %11, %10 : i8, !llvm.ptr
    %c10_i32_1 = arith.constant 10 : i32
    %c9_i32 = arith.constant 9 : i32
    %c0_i64_2 = arith.constant 0 : i64
    %12 = arith.extui %c9_i32 : i32 to i64
    %13 = arith.addi %12, %c0_i64_2 : i64
    %14 = llvm.getelementptr %4[%13] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %15 = llvm.load %14 : !llvm.ptr -> i8
    %16 = arith.extui %15 : i8 to i32
    %c0_i64_3 = arith.constant 0 : i64
    %17 = arith.extui %c10_i32_1 : i32 to i64
    %18 = arith.addi %17, %c0_i64_3 : i64
    %19 = llvm.getelementptr %4[%18] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %20 = arith.trunci %16 : i32 to i8
    llvm.store %20, %19 : i8, !llvm.ptr
    %c9_i32_4 = arith.constant 9 : i32
    %c8_i32 = arith.constant 8 : i32
    %c0_i64_5 = arith.constant 0 : i64
    %21 = arith.extui %c8_i32 : i32 to i64
    %22 = arith.addi %21, %c0_i64_5 : i64
    %23 = llvm.getelementptr %4[%22] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %24 = llvm.load %23 : !llvm.ptr -> i8
    %25 = arith.extui %24 : i8 to i32
    %c0_i64_6 = arith.constant 0 : i64
    %26 = arith.extui %c9_i32_4 : i32 to i64
    %27 = arith.addi %26, %c0_i64_6 : i64
    %28 = llvm.getelementptr %4[%27] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %29 = arith.trunci %25 : i32 to i8
    llvm.store %29, %28 : i8, !llvm.ptr
    %c8_i32_7 = arith.constant 8 : i32
    %c-3_i32 = arith.constant -3 : i32
    %c0_i64_8 = arith.constant 0 : i64
    %30 = arith.extui %c8_i32_7 : i32 to i64
    %31 = arith.addi %30, %c0_i64_8 : i64
    %32 = llvm.getelementptr %4[%31] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %33 = arith.trunci %c-3_i32 : i32 to i8
    llvm.store %33, %32 : i8, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    return
  }
  func.func @get(%arg0: !llvm.ptr) -> i32 {
    %c8_i32 = arith.constant 8 : i32
    %c0_i64 = arith.constant 0 : i64
    %0 = arith.extui %c8_i32 : i32 to i64
    %1 = arith.addi %0, %c0_i64 : i64
    %2 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %4[%1] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %6 = llvm.load %5 : !llvm.ptr -> i32
    cf.br ^bb1(%6 : i32)
  ^bb1(%7: i32):  // pred: ^bb0
    return %7 : i32
  }
  func.func @i32_left(%arg0: !llvm.ptr) -> i32 {
    call @bump(%arg0) : (!llvm.ptr) -> ()
    %c8_i32 = arith.constant 8 : i32
    %c1_i32 = arith.constant 1 : i32
    %c0_i64 = arith.constant 0 : i64
    %0 = arith.extui %c8_i32 : i32 to i64
    %1 = arith.addi %0, %c0_i64 : i64
    %2 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %4[%1] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %6 = arith.trunci %c1_i32 : i32 to i8
    llvm.store %6, %5 : i8, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    cf.br ^bb1(%c0_i32 : i32)
  ^bb1(%7: i32):  // pred: ^bb0
    return %7 : i32
  }
  func.func @i32_right(%arg0: !llvm.ptr) -> i32 {
    call @bump(%arg0) : (!llvm.ptr) -> ()
    %c8_i32 = arith.constant 8 : i32
    %c2_i32 = arith.constant 2 : i32
    %c0_i64 = arith.constant 0 : i64
    %0 = arith.extui %c8_i32 : i32 to i64
    %1 = arith.addi %0, %c0_i64 : i64
    %2 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %4[%1] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %6 = arith.trunci %c2_i32 : i32 to i8
    llvm.store %6, %5 : i8, !llvm.ptr
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb1(%c1_i32 : i32)
  ^bb1(%7: i32):  // pred: ^bb0
    return %7 : i32
  }
  func.func @i32_another(%arg0: !llvm.ptr) -> i32 {
    call @bump(%arg0) : (!llvm.ptr) -> ()
    %c8_i32 = arith.constant 8 : i32
    %c3_i32 = arith.constant 3 : i32
    %c0_i64 = arith.constant 0 : i64
    %0 = arith.extui %c8_i32 : i32 to i64
    %1 = arith.addi %0, %c0_i64 : i64
    %2 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %4[%1] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %6 = arith.trunci %c3_i32 : i32 to i8
    llvm.store %6, %5 : i8, !llvm.ptr
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb1(%c1_i32 : i32)
  ^bb1(%7: i32):  // pred: ^bb0
    return %7 : i32
  }
  func.func @i32_callee(%arg0: !llvm.ptr) -> i32 {
    call @bump(%arg0) : (!llvm.ptr) -> ()
    %c8_i32 = arith.constant 8 : i32
    %c4_i32 = arith.constant 4 : i32
    %c0_i64 = arith.constant 0 : i64
    %0 = arith.extui %c8_i32 : i32 to i64
    %1 = arith.addi %0, %c0_i64 : i64
    %2 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %4[%1] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %6 = arith.trunci %c4_i32 : i32 to i8
    llvm.store %6, %5 : i8, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    cf.br ^bb1(%c0_i32 : i32)
  ^bb1(%7: i32):  // pred: ^bb0
    return %7 : i32
  }
  func.func @i32_bool(%arg0: !llvm.ptr) -> i32 {
    call @bump(%arg0) : (!llvm.ptr) -> ()
    %c8_i32 = arith.constant 8 : i32
    %c5_i32 = arith.constant 5 : i32
    %c0_i64 = arith.constant 0 : i64
    %0 = arith.extui %c8_i32 : i32 to i64
    %1 = arith.addi %0, %c0_i64 : i64
    %2 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %4[%1] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %6 = arith.trunci %c5_i32 : i32 to i8
    llvm.store %6, %5 : i8, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    cf.br ^bb1(%c0_i32 : i32)
  ^bb1(%7: i32):  // pred: ^bb0
    return %7 : i32
  }
  func.func @i64_left(%arg0: !llvm.ptr) -> i64 {
    call @bump(%arg0) : (!llvm.ptr) -> ()
    %c8_i32 = arith.constant 8 : i32
    %c1_i32 = arith.constant 1 : i32
    %c0_i64 = arith.constant 0 : i64
    %0 = arith.extui %c8_i32 : i32 to i64
    %1 = arith.addi %0, %c0_i64 : i64
    %2 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %4[%1] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %6 = arith.trunci %c1_i32 : i32 to i8
    llvm.store %6, %5 : i8, !llvm.ptr
    %c0_i64_0 = arith.constant 0 : i64
    cf.br ^bb1(%c0_i64_0 : i64)
  ^bb1(%7: i64):  // pred: ^bb0
    return %7 : i64
  }
  func.func @i64_right(%arg0: !llvm.ptr) -> i64 {
    call @bump(%arg0) : (!llvm.ptr) -> ()
    %c8_i32 = arith.constant 8 : i32
    %c2_i32 = arith.constant 2 : i32
    %c0_i64 = arith.constant 0 : i64
    %0 = arith.extui %c8_i32 : i32 to i64
    %1 = arith.addi %0, %c0_i64 : i64
    %2 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %4[%1] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %6 = arith.trunci %c2_i32 : i32 to i8
    llvm.store %6, %5 : i8, !llvm.ptr
    %c1_i64 = arith.constant 1 : i64
    cf.br ^bb1(%c1_i64 : i64)
  ^bb1(%7: i64):  // pred: ^bb0
    return %7 : i64
  }
  func.func @i64_another(%arg0: !llvm.ptr) -> i64 {
    call @bump(%arg0) : (!llvm.ptr) -> ()
    %c8_i32 = arith.constant 8 : i32
    %c3_i32 = arith.constant 3 : i32
    %c0_i64 = arith.constant 0 : i64
    %0 = arith.extui %c8_i32 : i32 to i64
    %1 = arith.addi %0, %c0_i64 : i64
    %2 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %4[%1] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %6 = arith.trunci %c3_i32 : i32 to i8
    llvm.store %6, %5 : i8, !llvm.ptr
    %c1_i64 = arith.constant 1 : i64
    cf.br ^bb1(%c1_i64 : i64)
  ^bb1(%7: i64):  // pred: ^bb0
    return %7 : i64
  }
  func.func @i64_callee(%arg0: !llvm.ptr) -> i32 {
    call @bump(%arg0) : (!llvm.ptr) -> ()
    %c8_i32 = arith.constant 8 : i32
    %c4_i32 = arith.constant 4 : i32
    %c0_i64 = arith.constant 0 : i64
    %0 = arith.extui %c8_i32 : i32 to i64
    %1 = arith.addi %0, %c0_i64 : i64
    %2 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %4[%1] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %6 = arith.trunci %c4_i32 : i32 to i8
    llvm.store %6, %5 : i8, !llvm.ptr
    %c2_i32 = arith.constant 2 : i32
    cf.br ^bb1(%c2_i32 : i32)
  ^bb1(%7: i32):  // pred: ^bb0
    return %7 : i32
  }
  func.func @i64_bool(%arg0: !llvm.ptr) -> i32 {
    call @bump(%arg0) : (!llvm.ptr) -> ()
    %c8_i32 = arith.constant 8 : i32
    %c5_i32 = arith.constant 5 : i32
    %c0_i64 = arith.constant 0 : i64
    %0 = arith.extui %c8_i32 : i32 to i64
    %1 = arith.addi %0, %c0_i64 : i64
    %2 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %4[%1] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %6 = arith.trunci %c5_i32 : i32 to i8
    llvm.store %6, %5 : i8, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    cf.br ^bb1(%c0_i32 : i32)
  ^bb1(%7: i32):  // pred: ^bb0
    return %7 : i32
  }
  func.func @f32_left(%arg0: !llvm.ptr) -> f32 {
    call @bump(%arg0) : (!llvm.ptr) -> ()
    %c8_i32 = arith.constant 8 : i32
    %c1_i32 = arith.constant 1 : i32
    %c0_i64 = arith.constant 0 : i64
    %0 = arith.extui %c8_i32 : i32 to i64
    %1 = arith.addi %0, %c0_i64 : i64
    %2 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %4[%1] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %6 = arith.trunci %c1_i32 : i32 to i8
    llvm.store %6, %5 : i8, !llvm.ptr
    %cst = arith.constant 0.000000e+00 : f32
    cf.br ^bb1(%cst : f32)
  ^bb1(%7: f32):  // pred: ^bb0
    return %7 : f32
  }
  func.func @f32_right(%arg0: !llvm.ptr) -> f32 {
    call @bump(%arg0) : (!llvm.ptr) -> ()
    %c8_i32 = arith.constant 8 : i32
    %c2_i32 = arith.constant 2 : i32
    %c0_i64 = arith.constant 0 : i64
    %0 = arith.extui %c8_i32 : i32 to i64
    %1 = arith.addi %0, %c0_i64 : i64
    %2 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %4[%1] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %6 = arith.trunci %c2_i32 : i32 to i8
    llvm.store %6, %5 : i8, !llvm.ptr
    %cst = arith.constant 1.06535322E+9 : f32
    cf.br ^bb1(%cst : f32)
  ^bb1(%7: f32):  // pred: ^bb0
    return %7 : f32
  }
  func.func @f32_another(%arg0: !llvm.ptr) -> f32 {
    call @bump(%arg0) : (!llvm.ptr) -> ()
    %c8_i32 = arith.constant 8 : i32
    %c3_i32 = arith.constant 3 : i32
    %c0_i64 = arith.constant 0 : i64
    %0 = arith.extui %c8_i32 : i32 to i64
    %1 = arith.addi %0, %c0_i64 : i64
    %2 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %4[%1] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %6 = arith.trunci %c3_i32 : i32 to i8
    llvm.store %6, %5 : i8, !llvm.ptr
    %cst = arith.constant 1.06535322E+9 : f32
    cf.br ^bb1(%cst : f32)
  ^bb1(%7: f32):  // pred: ^bb0
    return %7 : f32
  }
  func.func @f32_callee(%arg0: !llvm.ptr) -> i32 {
    call @bump(%arg0) : (!llvm.ptr) -> ()
    %c8_i32 = arith.constant 8 : i32
    %c4_i32 = arith.constant 4 : i32
    %c0_i64 = arith.constant 0 : i64
    %0 = arith.extui %c8_i32 : i32 to i64
    %1 = arith.addi %0, %c0_i64 : i64
    %2 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %4[%1] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %6 = arith.trunci %c4_i32 : i32 to i8
    llvm.store %6, %5 : i8, !llvm.ptr
    %c4_i32_0 = arith.constant 4 : i32
    cf.br ^bb1(%c4_i32_0 : i32)
  ^bb1(%7: i32):  // pred: ^bb0
    return %7 : i32
  }
  func.func @f32_bool(%arg0: !llvm.ptr) -> i32 {
    call @bump(%arg0) : (!llvm.ptr) -> ()
    %c8_i32 = arith.constant 8 : i32
    %c5_i32 = arith.constant 5 : i32
    %c0_i64 = arith.constant 0 : i64
    %0 = arith.extui %c8_i32 : i32 to i64
    %1 = arith.addi %0, %c0_i64 : i64
    %2 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %4[%1] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %6 = arith.trunci %c5_i32 : i32 to i8
    llvm.store %6, %5 : i8, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    cf.br ^bb1(%c0_i32 : i32)
  ^bb1(%7: i32):  // pred: ^bb0
    return %7 : i32
  }
  func.func @f64_left(%arg0: !llvm.ptr) -> f64 {
    call @bump(%arg0) : (!llvm.ptr) -> ()
    %c8_i32 = arith.constant 8 : i32
    %c1_i32 = arith.constant 1 : i32
    %c0_i64 = arith.constant 0 : i64
    %0 = arith.extui %c8_i32 : i32 to i64
    %1 = arith.addi %0, %c0_i64 : i64
    %2 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %4[%1] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %6 = arith.trunci %c1_i32 : i32 to i8
    llvm.store %6, %5 : i8, !llvm.ptr
    %cst = arith.constant 0.000000e+00 : f64
    cf.br ^bb1(%cst : f64)
  ^bb1(%7: f64):  // pred: ^bb0
    return %7 : f64
  }
  func.func @f64_right(%arg0: !llvm.ptr) -> f64 {
    call @bump(%arg0) : (!llvm.ptr) -> ()
    %c8_i32 = arith.constant 8 : i32
    %c2_i32 = arith.constant 2 : i32
    %c0_i64 = arith.constant 0 : i64
    %0 = arith.extui %c8_i32 : i32 to i64
    %1 = arith.addi %0, %c0_i64 : i64
    %2 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %4[%1] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %6 = arith.trunci %c2_i32 : i32 to i8
    llvm.store %6, %5 : i8, !llvm.ptr
    %cst = arith.constant 4.6071824188000174E+18 : f64
    cf.br ^bb1(%cst : f64)
  ^bb1(%7: f64):  // pred: ^bb0
    return %7 : f64
  }
  func.func @f64_another(%arg0: !llvm.ptr) -> f64 {
    call @bump(%arg0) : (!llvm.ptr) -> ()
    %c8_i32 = arith.constant 8 : i32
    %c3_i32 = arith.constant 3 : i32
    %c0_i64 = arith.constant 0 : i64
    %0 = arith.extui %c8_i32 : i32 to i64
    %1 = arith.addi %0, %c0_i64 : i64
    %2 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %4[%1] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %6 = arith.trunci %c3_i32 : i32 to i8
    llvm.store %6, %5 : i8, !llvm.ptr
    %cst = arith.constant 4.6071824188000174E+18 : f64
    cf.br ^bb1(%cst : f64)
  ^bb1(%7: f64):  // pred: ^bb0
    return %7 : f64
  }
  func.func @f64_callee(%arg0: !llvm.ptr) -> i32 {
    call @bump(%arg0) : (!llvm.ptr) -> ()
    %c8_i32 = arith.constant 8 : i32
    %c4_i32 = arith.constant 4 : i32
    %c0_i64 = arith.constant 0 : i64
    %0 = arith.extui %c8_i32 : i32 to i64
    %1 = arith.addi %0, %c0_i64 : i64
    %2 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %4[%1] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %6 = arith.trunci %c4_i32 : i32 to i8
    llvm.store %6, %5 : i8, !llvm.ptr
    %c6_i32 = arith.constant 6 : i32
    cf.br ^bb1(%c6_i32 : i32)
  ^bb1(%7: i32):  // pred: ^bb0
    return %7 : i32
  }
  func.func @f64_bool(%arg0: !llvm.ptr) -> i32 {
    call @bump(%arg0) : (!llvm.ptr) -> ()
    %c8_i32 = arith.constant 8 : i32
    %c5_i32 = arith.constant 5 : i32
    %c0_i64 = arith.constant 0 : i64
    %0 = arith.extui %c8_i32 : i32 to i64
    %1 = arith.addi %0, %c0_i64 : i64
    %2 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %4[%1] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %6 = arith.trunci %c5_i32 : i32 to i8
    llvm.store %6, %5 : i8, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    cf.br ^bb1(%c0_i32 : i32)
  ^bb1(%7: i32):  // pred: ^bb0
    return %7 : i32
  }
  func.func @i32_dummy(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    return
  }
  func.func @i64_dummy(%arg0: !llvm.ptr, %arg1: i64, %arg2: i64) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    return
  }
  func.func @f32_dummy(%arg0: !llvm.ptr, %arg1: f32, %arg2: f32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : f32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : f32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    return
  }
  func.func @f64_dummy(%arg0: !llvm.ptr, %arg1: f64, %arg2: f64) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : f64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : f64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    return
  }
  func.func @f35(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    %2 = "wasm.add"(%0, %1) : (i32, i32) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f36(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    %2 = "wasm.sub"(%0, %1) : (i32, i32) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f37(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    %2 = "wasm.mul"(%0, %1) : (i32, i32) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f38(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    %2 = "wasm.divs"(%0, %1) : (i32, i32) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f39(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    %2 = "wasm.divu"(%0, %1) : (i32, i32) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f40(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    %2 = "wasm.rems"(%0, %1) : (i32, i32) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f41(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    %2 = "wasm.remu"(%0, %1) : (i32, i32) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f42(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    %2 = "wasm.and"(%0, %1) : (i32, i32) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f43(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    %2 = "wasm.or"(%0, %1) : (i32, i32) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f44(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    %2 = "wasm.xor"(%0, %1) : (i32, i32) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f45(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    %2 = "wasm.shl"(%0, %1) : (i32, i32) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f46(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    %2 = "wasm.shru"(%0, %1) : (i32, i32) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f47(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    %2 = "wasm.shrs"(%0, %1) : (i32, i32) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f48(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    %2 = "wasm.eq"(%0, %1) : (i32, i32) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f49(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    %2 = "wasm.ne"(%0, %1) : (i32, i32) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f50(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    %2 = "wasm.lts"(%0, %1) : (i32, i32) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f51(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    %2 = "wasm.les"(%0, %1) : (i32, i32) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f52(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    %2 = "wasm.ltu"(%0, %1) : (i32, i32) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f53(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    %2 = "wasm.leu"(%0, %1) : (i32, i32) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f54(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    %2 = "wasm.gts"(%0, %1) : (i32, i32) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f55(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    %2 = "wasm.ges"(%0, %1) : (i32, i32) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f56(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    %2 = "wasm.gtu"(%0, %1) : (i32, i32) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f57(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    %2 = "wasm.geu"(%0, %1) : (i32, i32) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f58(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    %c0_i64 = arith.constant 0 : i64
    %2 = arith.extui %0 : i32 to i64
    %3 = arith.addi %2, %c0_i64 : i64
    %4 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %6[%3] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    llvm.store %1, %7 : i32, !llvm.ptr
    %8 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%8 : i32)
  ^bb1(%9: i32):  // pred: ^bb0
    return %9 : i32
  }
  func.func @f59(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    %c0_i64 = arith.constant 0 : i64
    %2 = arith.extui %0 : i32 to i64
    %3 = arith.addi %2, %c0_i64 : i64
    %4 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %6[%3] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %8 = arith.trunci %1 : i32 to i8
    llvm.store %8, %7 : i8, !llvm.ptr
    %9 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%9 : i32)
  ^bb1(%10: i32):  // pred: ^bb0
    return %10 : i32
  }
  func.func @f60(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    %c0_i64 = arith.constant 0 : i64
    %2 = arith.extui %0 : i32 to i64
    %3 = arith.addi %2, %c0_i64 : i64
    %4 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %6[%3] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %8 = arith.trunci %1 : i32 to i16
    llvm.store %8, %7 : i16, !llvm.ptr
    %9 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%9 : i32)
  ^bb1(%10: i32):  // pred: ^bb0
    return %10 : i32
  }
  func.func @f61(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    call @i32_dummy(%arg0, %0, %1) : (!llvm.ptr, i32, i32) -> ()
    %2 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%2 : i32)
  ^bb1(%3: i32):  // pred: ^bb0
    return %3 : i32
  }
  func.func @f62(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    %2 = call @i32_bool(%arg0) : (!llvm.ptr) -> i32
    %3 = "wasm.select"(%0, %1, %2) : (i32, i32, i32) -> i32
    %4 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%4 : i32)
  ^bb1(%5: i32):  // pred: ^bb0
    return %5 : i32
  }
  func.func @f63(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i64_left(%arg0) : (!llvm.ptr) -> i64
    %1 = call @i64_right(%arg0) : (!llvm.ptr) -> i64
    %2 = "wasm.add"(%0, %1) : (i64, i64) -> i64
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f64(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i64_left(%arg0) : (!llvm.ptr) -> i64
    %1 = call @i64_right(%arg0) : (!llvm.ptr) -> i64
    %2 = "wasm.sub"(%0, %1) : (i64, i64) -> i64
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f65(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i64_left(%arg0) : (!llvm.ptr) -> i64
    %1 = call @i64_right(%arg0) : (!llvm.ptr) -> i64
    %2 = "wasm.mul"(%0, %1) : (i64, i64) -> i64
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f66(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i64_left(%arg0) : (!llvm.ptr) -> i64
    %1 = call @i64_right(%arg0) : (!llvm.ptr) -> i64
    %2 = "wasm.divs"(%0, %1) : (i64, i64) -> i64
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f67(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i64_left(%arg0) : (!llvm.ptr) -> i64
    %1 = call @i64_right(%arg0) : (!llvm.ptr) -> i64
    %2 = "wasm.divu"(%0, %1) : (i64, i64) -> i64
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f68(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i64_left(%arg0) : (!llvm.ptr) -> i64
    %1 = call @i64_right(%arg0) : (!llvm.ptr) -> i64
    %2 = "wasm.rems"(%0, %1) : (i64, i64) -> i64
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f69(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i64_left(%arg0) : (!llvm.ptr) -> i64
    %1 = call @i64_right(%arg0) : (!llvm.ptr) -> i64
    %2 = "wasm.remu"(%0, %1) : (i64, i64) -> i64
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f70(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i64_left(%arg0) : (!llvm.ptr) -> i64
    %1 = call @i64_right(%arg0) : (!llvm.ptr) -> i64
    %2 = "wasm.and"(%0, %1) : (i64, i64) -> i64
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f71(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i64_left(%arg0) : (!llvm.ptr) -> i64
    %1 = call @i64_right(%arg0) : (!llvm.ptr) -> i64
    %2 = "wasm.or"(%0, %1) : (i64, i64) -> i64
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f72(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i64_left(%arg0) : (!llvm.ptr) -> i64
    %1 = call @i64_right(%arg0) : (!llvm.ptr) -> i64
    %2 = "wasm.xor"(%0, %1) : (i64, i64) -> i64
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f73(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i64_left(%arg0) : (!llvm.ptr) -> i64
    %1 = call @i64_right(%arg0) : (!llvm.ptr) -> i64
    %2 = "wasm.shl"(%0, %1) : (i64, i64) -> i64
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f74(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i64_left(%arg0) : (!llvm.ptr) -> i64
    %1 = call @i64_right(%arg0) : (!llvm.ptr) -> i64
    %2 = "wasm.shru"(%0, %1) : (i64, i64) -> i64
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f75(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i64_left(%arg0) : (!llvm.ptr) -> i64
    %1 = call @i64_right(%arg0) : (!llvm.ptr) -> i64
    %2 = "wasm.shrs"(%0, %1) : (i64, i64) -> i64
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f76(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i64_left(%arg0) : (!llvm.ptr) -> i64
    %1 = call @i64_right(%arg0) : (!llvm.ptr) -> i64
    %2 = "wasm.eq"(%0, %1) : (i64, i64) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f77(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i64_left(%arg0) : (!llvm.ptr) -> i64
    %1 = call @i64_right(%arg0) : (!llvm.ptr) -> i64
    %2 = "wasm.ne"(%0, %1) : (i64, i64) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f78(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i64_left(%arg0) : (!llvm.ptr) -> i64
    %1 = call @i64_right(%arg0) : (!llvm.ptr) -> i64
    %2 = "wasm.lts"(%0, %1) : (i64, i64) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f79(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i64_left(%arg0) : (!llvm.ptr) -> i64
    %1 = call @i64_right(%arg0) : (!llvm.ptr) -> i64
    %2 = "wasm.les"(%0, %1) : (i64, i64) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f80(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i64_left(%arg0) : (!llvm.ptr) -> i64
    %1 = call @i64_right(%arg0) : (!llvm.ptr) -> i64
    %2 = "wasm.ltu"(%0, %1) : (i64, i64) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f81(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i64_left(%arg0) : (!llvm.ptr) -> i64
    %1 = call @i64_right(%arg0) : (!llvm.ptr) -> i64
    %2 = "wasm.leu"(%0, %1) : (i64, i64) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f82(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i64_left(%arg0) : (!llvm.ptr) -> i64
    %1 = call @i64_right(%arg0) : (!llvm.ptr) -> i64
    %2 = "wasm.gts"(%0, %1) : (i64, i64) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f83(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i64_left(%arg0) : (!llvm.ptr) -> i64
    %1 = call @i64_right(%arg0) : (!llvm.ptr) -> i64
    %2 = "wasm.ges"(%0, %1) : (i64, i64) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f84(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i64_left(%arg0) : (!llvm.ptr) -> i64
    %1 = call @i64_right(%arg0) : (!llvm.ptr) -> i64
    %2 = "wasm.gtu"(%0, %1) : (i64, i64) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f85(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i64_left(%arg0) : (!llvm.ptr) -> i64
    %1 = call @i64_right(%arg0) : (!llvm.ptr) -> i64
    %2 = "wasm.geu"(%0, %1) : (i64, i64) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f86(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i64_right(%arg0) : (!llvm.ptr) -> i64
    %c0_i64 = arith.constant 0 : i64
    %2 = arith.extui %0 : i32 to i64
    %3 = arith.addi %2, %c0_i64 : i64
    %4 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %6[%3] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    llvm.store %1, %7 : i64, !llvm.ptr
    %8 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%8 : i32)
  ^bb1(%9: i32):  // pred: ^bb0
    return %9 : i32
  }
  func.func @f87(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i64_right(%arg0) : (!llvm.ptr) -> i64
    %c0_i64 = arith.constant 0 : i64
    %2 = arith.extui %0 : i32 to i64
    %3 = arith.addi %2, %c0_i64 : i64
    %4 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %6[%3] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %8 = arith.trunci %1 : i64 to i8
    llvm.store %8, %7 : i8, !llvm.ptr
    %9 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%9 : i32)
  ^bb1(%10: i32):  // pred: ^bb0
    return %10 : i32
  }
  func.func @f88(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i64_right(%arg0) : (!llvm.ptr) -> i64
    %c0_i64 = arith.constant 0 : i64
    %2 = arith.extui %0 : i32 to i64
    %3 = arith.addi %2, %c0_i64 : i64
    %4 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %6[%3] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %8 = arith.trunci %1 : i64 to i16
    llvm.store %8, %7 : i16, !llvm.ptr
    %9 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%9 : i32)
  ^bb1(%10: i32):  // pred: ^bb0
    return %10 : i32
  }
  func.func @f89(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i64_right(%arg0) : (!llvm.ptr) -> i64
    %c0_i64 = arith.constant 0 : i64
    %2 = arith.extui %0 : i32 to i64
    %3 = arith.addi %2, %c0_i64 : i64
    %4 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %6[%3] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %8 = arith.trunci %1 : i64 to i32
    llvm.store %8, %7 : i32, !llvm.ptr
    %9 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%9 : i32)
  ^bb1(%10: i32):  // pred: ^bb0
    return %10 : i32
  }
  func.func @f90(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i64_left(%arg0) : (!llvm.ptr) -> i64
    %1 = call @i64_right(%arg0) : (!llvm.ptr) -> i64
    call @i64_dummy(%arg0, %0, %1) : (!llvm.ptr, i64, i64) -> ()
    %2 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%2 : i32)
  ^bb1(%3: i32):  // pred: ^bb0
    return %3 : i32
  }
  func.func @f91(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i64_left(%arg0) : (!llvm.ptr) -> i64
    %1 = call @i64_right(%arg0) : (!llvm.ptr) -> i64
    %2 = call @i64_bool(%arg0) : (!llvm.ptr) -> i32
    %3 = "wasm.select"(%0, %1, %2) : (i64, i64, i32) -> i64
    %4 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%4 : i32)
  ^bb1(%5: i32):  // pred: ^bb0
    return %5 : i32
  }
  func.func @f92(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f32_left(%arg0) : (!llvm.ptr) -> f32
    %1 = call @f32_right(%arg0) : (!llvm.ptr) -> f32
    %2 = "wasm.add"(%0, %1) : (f32, f32) -> f32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f93(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f32_left(%arg0) : (!llvm.ptr) -> f32
    %1 = call @f32_right(%arg0) : (!llvm.ptr) -> f32
    %2 = "wasm.sub"(%0, %1) : (f32, f32) -> f32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f94(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f32_left(%arg0) : (!llvm.ptr) -> f32
    %1 = call @f32_right(%arg0) : (!llvm.ptr) -> f32
    %2 = "wasm.mul"(%0, %1) : (f32, f32) -> f32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f95(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f32_left(%arg0) : (!llvm.ptr) -> f32
    %1 = call @f32_right(%arg0) : (!llvm.ptr) -> f32
    %2 = "wasm.div"(%0, %1) : (f32, f32) -> f32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f96(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f32_left(%arg0) : (!llvm.ptr) -> f32
    %1 = call @f32_right(%arg0) : (!llvm.ptr) -> f32
    %2 = "wasm.copysign"(%0, %1) : (f32, f32) -> f32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f97(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f32_left(%arg0) : (!llvm.ptr) -> f32
    %1 = call @f32_right(%arg0) : (!llvm.ptr) -> f32
    %2 = "wasm.eq"(%0, %1) : (f32, f32) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f98(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f32_left(%arg0) : (!llvm.ptr) -> f32
    %1 = call @f32_right(%arg0) : (!llvm.ptr) -> f32
    %2 = "wasm.ne"(%0, %1) : (f32, f32) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f99(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f32_left(%arg0) : (!llvm.ptr) -> f32
    %1 = call @f32_right(%arg0) : (!llvm.ptr) -> f32
    %2 = "wasm.lt"(%0, %1) : (f32, f32) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f100(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f32_left(%arg0) : (!llvm.ptr) -> f32
    %1 = call @f32_right(%arg0) : (!llvm.ptr) -> f32
    %2 = "wasm.le"(%0, %1) : (f32, f32) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f101(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f32_left(%arg0) : (!llvm.ptr) -> f32
    %1 = call @f32_right(%arg0) : (!llvm.ptr) -> f32
    %2 = "wasm.gt"(%0, %1) : (f32, f32) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f102(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f32_left(%arg0) : (!llvm.ptr) -> f32
    %1 = call @f32_right(%arg0) : (!llvm.ptr) -> f32
    %2 = "wasm.ge"(%0, %1) : (f32, f32) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f103(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f32_left(%arg0) : (!llvm.ptr) -> f32
    %1 = call @f32_right(%arg0) : (!llvm.ptr) -> f32
    %2 = "wasm.min"(%0, %1) : (f32, f32) -> f32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f104(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f32_left(%arg0) : (!llvm.ptr) -> f32
    %1 = call @f32_right(%arg0) : (!llvm.ptr) -> f32
    %2 = "wasm.max"(%0, %1) : (f32, f32) -> f32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f105(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @f32_right(%arg0) : (!llvm.ptr) -> f32
    %c0_i64 = arith.constant 0 : i64
    %2 = arith.extui %0 : i32 to i64
    %3 = arith.addi %2, %c0_i64 : i64
    %4 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %6[%3] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    llvm.store %1, %7 : f32, !llvm.ptr
    %8 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%8 : i32)
  ^bb1(%9: i32):  // pred: ^bb0
    return %9 : i32
  }
  func.func @f106(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f32_left(%arg0) : (!llvm.ptr) -> f32
    %1 = call @f32_right(%arg0) : (!llvm.ptr) -> f32
    call @f32_dummy(%arg0, %0, %1) : (!llvm.ptr, f32, f32) -> ()
    %2 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%2 : i32)
  ^bb1(%3: i32):  // pred: ^bb0
    return %3 : i32
  }
  func.func @f107(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f32_left(%arg0) : (!llvm.ptr) -> f32
    %1 = call @f32_right(%arg0) : (!llvm.ptr) -> f32
    %2 = call @f32_bool(%arg0) : (!llvm.ptr) -> i32
    %3 = "wasm.select"(%0, %1, %2) : (f32, f32, i32) -> f32
    %4 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%4 : i32)
  ^bb1(%5: i32):  // pred: ^bb0
    return %5 : i32
  }
  func.func @f108(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f64_left(%arg0) : (!llvm.ptr) -> f64
    %1 = call @f64_right(%arg0) : (!llvm.ptr) -> f64
    %2 = "wasm.add"(%0, %1) : (f64, f64) -> f64
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f109(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f64_left(%arg0) : (!llvm.ptr) -> f64
    %1 = call @f64_right(%arg0) : (!llvm.ptr) -> f64
    %2 = "wasm.sub"(%0, %1) : (f64, f64) -> f64
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f110(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f64_left(%arg0) : (!llvm.ptr) -> f64
    %1 = call @f64_right(%arg0) : (!llvm.ptr) -> f64
    %2 = "wasm.mul"(%0, %1) : (f64, f64) -> f64
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f111(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f64_left(%arg0) : (!llvm.ptr) -> f64
    %1 = call @f64_right(%arg0) : (!llvm.ptr) -> f64
    %2 = "wasm.div"(%0, %1) : (f64, f64) -> f64
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f112(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f64_left(%arg0) : (!llvm.ptr) -> f64
    %1 = call @f64_right(%arg0) : (!llvm.ptr) -> f64
    %2 = "wasm.copysign"(%0, %1) : (f64, f64) -> f64
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f113(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f64_left(%arg0) : (!llvm.ptr) -> f64
    %1 = call @f64_right(%arg0) : (!llvm.ptr) -> f64
    %2 = "wasm.eq"(%0, %1) : (f64, f64) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f114(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f64_left(%arg0) : (!llvm.ptr) -> f64
    %1 = call @f64_right(%arg0) : (!llvm.ptr) -> f64
    %2 = "wasm.ne"(%0, %1) : (f64, f64) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f115(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f64_left(%arg0) : (!llvm.ptr) -> f64
    %1 = call @f64_right(%arg0) : (!llvm.ptr) -> f64
    %2 = "wasm.lt"(%0, %1) : (f64, f64) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f116(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f64_left(%arg0) : (!llvm.ptr) -> f64
    %1 = call @f64_right(%arg0) : (!llvm.ptr) -> f64
    %2 = "wasm.le"(%0, %1) : (f64, f64) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f117(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f64_left(%arg0) : (!llvm.ptr) -> f64
    %1 = call @f64_right(%arg0) : (!llvm.ptr) -> f64
    %2 = "wasm.gt"(%0, %1) : (f64, f64) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f118(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f64_left(%arg0) : (!llvm.ptr) -> f64
    %1 = call @f64_right(%arg0) : (!llvm.ptr) -> f64
    %2 = "wasm.ge"(%0, %1) : (f64, f64) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f119(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f64_left(%arg0) : (!llvm.ptr) -> f64
    %1 = call @f64_right(%arg0) : (!llvm.ptr) -> f64
    %2 = "wasm.min"(%0, %1) : (f64, f64) -> f64
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f120(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f64_left(%arg0) : (!llvm.ptr) -> f64
    %1 = call @f64_right(%arg0) : (!llvm.ptr) -> f64
    %2 = "wasm.max"(%0, %1) : (f64, f64) -> f64
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f121(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @f64_right(%arg0) : (!llvm.ptr) -> f64
    %c0_i64 = arith.constant 0 : i64
    %2 = arith.extui %0 : i32 to i64
    %3 = arith.addi %2, %c0_i64 : i64
    %4 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %6[%3] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    llvm.store %1, %7 : f64, !llvm.ptr
    %8 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%8 : i32)
  ^bb1(%9: i32):  // pred: ^bb0
    return %9 : i32
  }
  func.func @f122(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f64_left(%arg0) : (!llvm.ptr) -> f64
    %1 = call @f64_right(%arg0) : (!llvm.ptr) -> f64
    call @f64_dummy(%arg0, %0, %1) : (!llvm.ptr, f64, f64) -> ()
    %2 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%2 : i32)
  ^bb1(%3: i32):  // pred: ^bb0
    return %3 : i32
  }
  func.func @f123(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f64_left(%arg0) : (!llvm.ptr) -> f64
    %1 = call @f64_right(%arg0) : (!llvm.ptr) -> f64
    %2 = call @f64_bool(%arg0) : (!llvm.ptr) -> i32
    %3 = "wasm.select"(%0, %1, %2) : (f64, f64, i32) -> f64
    %4 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%4 : i32)
  ^bb1(%5: i32):  // pred: ^bb0
    return %5 : i32
  }
  func.func @f124(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = "wasm.and"(%1, %c0_i32) : (i32, i32) -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %3 = arith.cmpi ne, %2, %c0_i32_0 : i32
    cf.cond_br %3, ^bb2(%0 : i32), ^bb3(%0 : i32)
  ^bb1(%4: i32):  // pred: ^bb2
    return %4 : i32
  ^bb2(%5: i32):  // 2 preds: ^bb0, ^bb3
    cf.br ^bb1(%5 : i32)
  ^bb3(%6: i32):  // pred: ^bb0
    %7 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%7 : i32)
  }
  func.func @f125(%arg0: !llvm.ptr) -> i32 {
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    %c0_i64 = arith.constant 0 : i64
    cf.switch %1 : i32, [
      default: ^bb3(%0 : i32),
      0: ^bb2(%0 : i32)
    ]
  ^bb1(%2: i32):  // pred: ^bb2
    return %2 : i32
  ^bb2(%3: i32):  // 2 preds: ^bb0, ^bb3
    cf.br ^bb1(%3 : i32)
  ^bb3(%4: i32):  // pred: ^bb0
    %5 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%5 : i32)
  }
}
