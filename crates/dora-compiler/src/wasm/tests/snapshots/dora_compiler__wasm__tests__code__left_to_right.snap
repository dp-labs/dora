---
source: crates/dora-compiler/src/wasm/tests/code.rs
expression: op
snapshot_kind: text
---
module {
  func.func @i32_t0(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c-1_i32 = arith.constant -1 : i32
    cf.br ^bb2(%c-1_i32 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func @i32_t1(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c-2_i32 = arith.constant -2 : i32
    cf.br ^bb2(%c-2_i32 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func @i64_t0(%arg0: !llvm.ptr, %arg1: i64, %arg2: i64) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i64 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c-1_i32 = arith.constant -1 : i32
    cf.br ^bb2(%c-1_i32 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func @i64_t1(%arg0: !llvm.ptr, %arg1: i64, %arg2: i64) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i64 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c-2_i32 = arith.constant -2 : i32
    cf.br ^bb2(%c-2_i32 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func @f32_t0(%arg0: !llvm.ptr, %arg1: f32, %arg2: f32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : f32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x f32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : f32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c-1_i32 = arith.constant -1 : i32
    cf.br ^bb2(%c-1_i32 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func @f32_t1(%arg0: !llvm.ptr, %arg1: f32, %arg2: f32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : f32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x f32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : f32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c-2_i32 = arith.constant -2 : i32
    cf.br ^bb2(%c-2_i32 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func @f64_t0(%arg0: !llvm.ptr, %arg1: f64, %arg2: f64) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f64 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : f64, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x f64 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : f64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c-1_i32 = arith.constant -1 : i32
    cf.br ^bb2(%c-1_i32 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func @f64_t1(%arg0: !llvm.ptr, %arg1: f64, %arg2: f64) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f64 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : f64, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x f64 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : f64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c-2_i32 = arith.constant -2 : i32
    cf.br ^bb2(%c-2_i32 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func @reset(%arg0: !llvm.ptr) {
    %0 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c8_i32 = arith.constant 8 : i32
    %c0_i32 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c8_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %5 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32, %5 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @bump(%arg0: !llvm.ptr) {
    %0 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c11_i32 = arith.constant 11 : i32
    %c10_i32 = arith.constant 10 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c10_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %5 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %6 = llvm.load volatile %5 {alignment = 1 : i64} : !llvm.ptr -> i8
    %7 = arith.extui %6 : i8 to i32
    %c0_i64_0 = arith.constant 0 : i64
    %8 = arith.extui %c11_i32 : i32 to i64
    %9 = arith.addi %8, %c0_i64_0 : i64
    %10 = llvm.getelementptr %2[%9] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %11 = arith.trunci %7 : i32 to i8
    llvm.store volatile %11, %10 {alignment = 1 : i64} : i8, !llvm.ptr
    %c10_i32_1 = arith.constant 10 : i32
    %c9_i32 = arith.constant 9 : i32
    %c0_i64_2 = arith.constant 0 : i64
    %12 = arith.extui %c9_i32 : i32 to i64
    %13 = arith.addi %12, %c0_i64_2 : i64
    %14 = llvm.getelementptr %2[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %15 = llvm.load volatile %14 {alignment = 1 : i64} : !llvm.ptr -> i8
    %16 = arith.extui %15 : i8 to i32
    %c0_i64_3 = arith.constant 0 : i64
    %17 = arith.extui %c10_i32_1 : i32 to i64
    %18 = arith.addi %17, %c0_i64_3 : i64
    %19 = llvm.getelementptr %2[%18] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %20 = arith.trunci %16 : i32 to i8
    llvm.store volatile %20, %19 {alignment = 1 : i64} : i8, !llvm.ptr
    %c9_i32_4 = arith.constant 9 : i32
    %c8_i32 = arith.constant 8 : i32
    %c0_i64_5 = arith.constant 0 : i64
    %21 = arith.extui %c8_i32 : i32 to i64
    %22 = arith.addi %21, %c0_i64_5 : i64
    %23 = llvm.getelementptr %2[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %24 = llvm.load volatile %23 {alignment = 1 : i64} : !llvm.ptr -> i8
    %25 = arith.extui %24 : i8 to i32
    %c0_i64_6 = arith.constant 0 : i64
    %26 = arith.extui %c9_i32_4 : i32 to i64
    %27 = arith.addi %26, %c0_i64_6 : i64
    %28 = llvm.getelementptr %2[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %29 = arith.trunci %25 : i32 to i8
    llvm.store volatile %29, %28 {alignment = 1 : i64} : i8, !llvm.ptr
    %c8_i32_7 = arith.constant 8 : i32
    %c-3_i32 = arith.constant -3 : i32
    %c0_i64_8 = arith.constant 0 : i64
    %30 = arith.extui %c8_i32_7 : i32 to i64
    %31 = arith.addi %30, %c0_i64_8 : i64
    %32 = llvm.getelementptr %2[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %33 = arith.trunci %c-3_i32 : i32 to i8
    llvm.store volatile %33, %32 {alignment = 1 : i64} : i8, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @get(%arg0: !llvm.ptr) -> i32 {
    %0 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c8_i32 = arith.constant 8 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c8_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %5 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %6 = llvm.load volatile %5 {alignment = 1 : i64} : !llvm.ptr -> i32
    cf.br ^bb2(%6 : i32)
  ^bb2(%7: i32):  // pred: ^bb1
    return %7 : i32
  }
  func.func @i32_left(%arg0: !llvm.ptr) -> i32 {
    %0 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @bump(%arg0) : (!llvm.ptr) -> ()
    %c8_i32 = arith.constant 8 : i32
    %c1_i32 = arith.constant 1 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c8_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %5 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %6 = arith.trunci %c1_i32 : i32 to i8
    llvm.store volatile %6, %5 {alignment = 1 : i64} : i8, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32 : i32)
  ^bb2(%7: i32):  // pred: ^bb1
    return %7 : i32
  }
  func.func @i32_right(%arg0: !llvm.ptr) -> i32 {
    %0 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @bump(%arg0) : (!llvm.ptr) -> ()
    %c8_i32 = arith.constant 8 : i32
    %c2_i32 = arith.constant 2 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c8_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %5 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %6 = arith.trunci %c2_i32 : i32 to i8
    llvm.store volatile %6, %5 {alignment = 1 : i64} : i8, !llvm.ptr
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb2(%c1_i32 : i32)
  ^bb2(%7: i32):  // pred: ^bb1
    return %7 : i32
  }
  func.func @i32_another(%arg0: !llvm.ptr) -> i32 {
    %0 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @bump(%arg0) : (!llvm.ptr) -> ()
    %c8_i32 = arith.constant 8 : i32
    %c3_i32 = arith.constant 3 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c8_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %5 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %6 = arith.trunci %c3_i32 : i32 to i8
    llvm.store volatile %6, %5 {alignment = 1 : i64} : i8, !llvm.ptr
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb2(%c1_i32 : i32)
  ^bb2(%7: i32):  // pred: ^bb1
    return %7 : i32
  }
  func.func @i32_callee(%arg0: !llvm.ptr) -> i32 {
    %0 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @bump(%arg0) : (!llvm.ptr) -> ()
    %c8_i32 = arith.constant 8 : i32
    %c4_i32 = arith.constant 4 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c8_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %5 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %6 = arith.trunci %c4_i32 : i32 to i8
    llvm.store volatile %6, %5 {alignment = 1 : i64} : i8, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32 : i32)
  ^bb2(%7: i32):  // pred: ^bb1
    return %7 : i32
  }
  func.func @i32_bool(%arg0: !llvm.ptr) -> i32 {
    %0 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @bump(%arg0) : (!llvm.ptr) -> ()
    %c8_i32 = arith.constant 8 : i32
    %c5_i32 = arith.constant 5 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c8_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %5 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %6 = arith.trunci %c5_i32 : i32 to i8
    llvm.store volatile %6, %5 {alignment = 1 : i64} : i8, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32 : i32)
  ^bb2(%7: i32):  // pred: ^bb1
    return %7 : i32
  }
  func.func @i64_left(%arg0: !llvm.ptr) -> i64 {
    %0 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @bump(%arg0) : (!llvm.ptr) -> ()
    %c8_i32 = arith.constant 8 : i32
    %c1_i32 = arith.constant 1 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c8_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %5 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %6 = arith.trunci %c1_i32 : i32 to i8
    llvm.store volatile %6, %5 {alignment = 1 : i64} : i8, !llvm.ptr
    %c0_i64_0 = arith.constant 0 : i64
    cf.br ^bb2(%c0_i64_0 : i64)
  ^bb2(%7: i64):  // pred: ^bb1
    return %7 : i64
  }
  func.func @i64_right(%arg0: !llvm.ptr) -> i64 {
    %0 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @bump(%arg0) : (!llvm.ptr) -> ()
    %c8_i32 = arith.constant 8 : i32
    %c2_i32 = arith.constant 2 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c8_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %5 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %6 = arith.trunci %c2_i32 : i32 to i8
    llvm.store volatile %6, %5 {alignment = 1 : i64} : i8, !llvm.ptr
    %c1_i64 = arith.constant 1 : i64
    cf.br ^bb2(%c1_i64 : i64)
  ^bb2(%7: i64):  // pred: ^bb1
    return %7 : i64
  }
  func.func @i64_another(%arg0: !llvm.ptr) -> i64 {
    %0 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @bump(%arg0) : (!llvm.ptr) -> ()
    %c8_i32 = arith.constant 8 : i32
    %c3_i32 = arith.constant 3 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c8_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %5 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %6 = arith.trunci %c3_i32 : i32 to i8
    llvm.store volatile %6, %5 {alignment = 1 : i64} : i8, !llvm.ptr
    %c1_i64 = arith.constant 1 : i64
    cf.br ^bb2(%c1_i64 : i64)
  ^bb2(%7: i64):  // pred: ^bb1
    return %7 : i64
  }
  func.func @i64_callee(%arg0: !llvm.ptr) -> i32 {
    %0 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @bump(%arg0) : (!llvm.ptr) -> ()
    %c8_i32 = arith.constant 8 : i32
    %c4_i32 = arith.constant 4 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c8_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %5 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %6 = arith.trunci %c4_i32 : i32 to i8
    llvm.store volatile %6, %5 {alignment = 1 : i64} : i8, !llvm.ptr
    %c2_i32 = arith.constant 2 : i32
    cf.br ^bb2(%c2_i32 : i32)
  ^bb2(%7: i32):  // pred: ^bb1
    return %7 : i32
  }
  func.func @i64_bool(%arg0: !llvm.ptr) -> i32 {
    %0 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @bump(%arg0) : (!llvm.ptr) -> ()
    %c8_i32 = arith.constant 8 : i32
    %c5_i32 = arith.constant 5 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c8_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %5 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %6 = arith.trunci %c5_i32 : i32 to i8
    llvm.store volatile %6, %5 {alignment = 1 : i64} : i8, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32 : i32)
  ^bb2(%7: i32):  // pred: ^bb1
    return %7 : i32
  }
  func.func @f32_left(%arg0: !llvm.ptr) -> f32 {
    %0 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @bump(%arg0) : (!llvm.ptr) -> ()
    %c8_i32 = arith.constant 8 : i32
    %c1_i32 = arith.constant 1 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c8_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %5 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %6 = arith.trunci %c1_i32 : i32 to i8
    llvm.store volatile %6, %5 {alignment = 1 : i64} : i8, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %7 = arith.bitcast %c0_i32 : i32 to f32
    cf.br ^bb2(%7 : f32)
  ^bb2(%8: f32):  // pred: ^bb1
    return %8 : f32
  }
  func.func @f32_right(%arg0: !llvm.ptr) -> f32 {
    %0 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @bump(%arg0) : (!llvm.ptr) -> ()
    %c8_i32 = arith.constant 8 : i32
    %c2_i32 = arith.constant 2 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c8_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %5 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %6 = arith.trunci %c2_i32 : i32 to i8
    llvm.store volatile %6, %5 {alignment = 1 : i64} : i8, !llvm.ptr
    %c1065353216_i32 = arith.constant 1065353216 : i32
    %7 = arith.bitcast %c1065353216_i32 : i32 to f32
    cf.br ^bb2(%7 : f32)
  ^bb2(%8: f32):  // pred: ^bb1
    return %8 : f32
  }
  func.func @f32_another(%arg0: !llvm.ptr) -> f32 {
    %0 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @bump(%arg0) : (!llvm.ptr) -> ()
    %c8_i32 = arith.constant 8 : i32
    %c3_i32 = arith.constant 3 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c8_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %5 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %6 = arith.trunci %c3_i32 : i32 to i8
    llvm.store volatile %6, %5 {alignment = 1 : i64} : i8, !llvm.ptr
    %c1065353216_i32 = arith.constant 1065353216 : i32
    %7 = arith.bitcast %c1065353216_i32 : i32 to f32
    cf.br ^bb2(%7 : f32)
  ^bb2(%8: f32):  // pred: ^bb1
    return %8 : f32
  }
  func.func @f32_callee(%arg0: !llvm.ptr) -> i32 {
    %0 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @bump(%arg0) : (!llvm.ptr) -> ()
    %c8_i32 = arith.constant 8 : i32
    %c4_i32 = arith.constant 4 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c8_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %5 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %6 = arith.trunci %c4_i32 : i32 to i8
    llvm.store volatile %6, %5 {alignment = 1 : i64} : i8, !llvm.ptr
    %c4_i32_0 = arith.constant 4 : i32
    cf.br ^bb2(%c4_i32_0 : i32)
  ^bb2(%7: i32):  // pred: ^bb1
    return %7 : i32
  }
  func.func @f32_bool(%arg0: !llvm.ptr) -> i32 {
    %0 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @bump(%arg0) : (!llvm.ptr) -> ()
    %c8_i32 = arith.constant 8 : i32
    %c5_i32 = arith.constant 5 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c8_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %5 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %6 = arith.trunci %c5_i32 : i32 to i8
    llvm.store volatile %6, %5 {alignment = 1 : i64} : i8, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32 : i32)
  ^bb2(%7: i32):  // pred: ^bb1
    return %7 : i32
  }
  func.func @f64_left(%arg0: !llvm.ptr) -> f64 {
    %0 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @bump(%arg0) : (!llvm.ptr) -> ()
    %c8_i32 = arith.constant 8 : i32
    %c1_i32 = arith.constant 1 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c8_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %5 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %6 = arith.trunci %c1_i32 : i32 to i8
    llvm.store volatile %6, %5 {alignment = 1 : i64} : i8, !llvm.ptr
    %c0_i64_0 = arith.constant 0 : i64
    %7 = arith.bitcast %c0_i64_0 : i64 to f64
    cf.br ^bb2(%7 : f64)
  ^bb2(%8: f64):  // pred: ^bb1
    return %8 : f64
  }
  func.func @f64_right(%arg0: !llvm.ptr) -> f64 {
    %0 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @bump(%arg0) : (!llvm.ptr) -> ()
    %c8_i32 = arith.constant 8 : i32
    %c2_i32 = arith.constant 2 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c8_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %5 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %6 = arith.trunci %c2_i32 : i32 to i8
    llvm.store volatile %6, %5 {alignment = 1 : i64} : i8, !llvm.ptr
    %c4607182418800017408_i64 = arith.constant 4607182418800017408 : i64
    %7 = arith.bitcast %c4607182418800017408_i64 : i64 to f64
    cf.br ^bb2(%7 : f64)
  ^bb2(%8: f64):  // pred: ^bb1
    return %8 : f64
  }
  func.func @f64_another(%arg0: !llvm.ptr) -> f64 {
    %0 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @bump(%arg0) : (!llvm.ptr) -> ()
    %c8_i32 = arith.constant 8 : i32
    %c3_i32 = arith.constant 3 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c8_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %5 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %6 = arith.trunci %c3_i32 : i32 to i8
    llvm.store volatile %6, %5 {alignment = 1 : i64} : i8, !llvm.ptr
    %c4607182418800017408_i64 = arith.constant 4607182418800017408 : i64
    %7 = arith.bitcast %c4607182418800017408_i64 : i64 to f64
    cf.br ^bb2(%7 : f64)
  ^bb2(%8: f64):  // pred: ^bb1
    return %8 : f64
  }
  func.func @f64_callee(%arg0: !llvm.ptr) -> i32 {
    %0 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @bump(%arg0) : (!llvm.ptr) -> ()
    %c8_i32 = arith.constant 8 : i32
    %c4_i32 = arith.constant 4 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c8_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %5 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %6 = arith.trunci %c4_i32 : i32 to i8
    llvm.store volatile %6, %5 {alignment = 1 : i64} : i8, !llvm.ptr
    %c6_i32 = arith.constant 6 : i32
    cf.br ^bb2(%c6_i32 : i32)
  ^bb2(%7: i32):  // pred: ^bb1
    return %7 : i32
  }
  func.func @f64_bool(%arg0: !llvm.ptr) -> i32 {
    %0 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @bump(%arg0) : (!llvm.ptr) -> ()
    %c8_i32 = arith.constant 8 : i32
    %c5_i32 = arith.constant 5 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c8_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %5 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %6 = arith.trunci %c5_i32 : i32 to i8
    llvm.store volatile %6, %5 {alignment = 1 : i64} : i8, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32 : i32)
  ^bb2(%7: i32):  // pred: ^bb1
    return %7 : i32
  }
  func.func @i32_dummy(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @i64_dummy(%arg0: !llvm.ptr, %arg1: i64, %arg2: i64) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i64 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f32_dummy(%arg0: !llvm.ptr, %arg1: f32, %arg2: f32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : f32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x f32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : f32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f64_dummy(%arg0: !llvm.ptr, %arg1: f64, %arg2: f64) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f64 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : f64, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x f64 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : f64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func public @i32_add(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    %2 = "wasm.add"(%0, %1) : (i32, i32) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @i32_sub(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    %2 = "wasm.sub"(%0, %1) : (i32, i32) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @i32_mul(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    %2 = "wasm.mul"(%0, %1) : (i32, i32) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @i32_div_s(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    %2 = "wasm.divs"(%0, %1) : (i32, i32) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @i32_div_u(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    %2 = "wasm.divu"(%0, %1) : (i32, i32) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @i32_rem_s(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    %2 = "wasm.rems"(%0, %1) : (i32, i32) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @i32_rem_u(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    %2 = "wasm.remu"(%0, %1) : (i32, i32) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @i32_and(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    %2 = "wasm.and"(%0, %1) : (i32, i32) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @i32_or(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    %2 = "wasm.or"(%0, %1) : (i32, i32) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @i32_xor(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    %2 = "wasm.xor"(%0, %1) : (i32, i32) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @i32_shl(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    %2 = "wasm.shl"(%0, %1) : (i32, i32) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @i32_shr_u(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    %2 = "wasm.shru"(%0, %1) : (i32, i32) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @i32_shr_s(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    %2 = "wasm.shrs"(%0, %1) : (i32, i32) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @i32_eq(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    %2 = "wasm.eq"(%0, %1) : (i32, i32) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @i32_ne(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    %2 = "wasm.ne"(%0, %1) : (i32, i32) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @i32_lt_s(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    %2 = "wasm.lts"(%0, %1) : (i32, i32) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @i32_le_s(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    %2 = "wasm.les"(%0, %1) : (i32, i32) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @i32_lt_u(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    %2 = "wasm.ltu"(%0, %1) : (i32, i32) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @i32_le_u(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    %2 = "wasm.leu"(%0, %1) : (i32, i32) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @i32_gt_s(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    %2 = "wasm.gts"(%0, %1) : (i32, i32) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @i32_ge_s(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    %2 = "wasm.ges"(%0, %1) : (i32, i32) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @i32_gt_u(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    %2 = "wasm.gtu"(%0, %1) : (i32, i32) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @i32_ge_u(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    %2 = "wasm.geu"(%0, %1) : (i32, i32) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @i32_store(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %3 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %4 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %3 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %7 = llvm.getelementptr %2[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %4, %7 {alignment = 1 : i64} : i32, !llvm.ptr
    %8 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%8 : i32)
  ^bb2(%9: i32):  // pred: ^bb1
    return %9 : i32
  }
  func.func public @i32_store8(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %3 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %4 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %3 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %7 = llvm.getelementptr %2[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %8 = arith.trunci %4 : i32 to i8
    llvm.store volatile %8, %7 {alignment = 1 : i64} : i8, !llvm.ptr
    %9 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%9 : i32)
  ^bb2(%10: i32):  // pred: ^bb1
    return %10 : i32
  }
  func.func public @i32_store16(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %3 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %4 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %3 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %7 = llvm.getelementptr %2[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %8 = arith.trunci %4 : i32 to i16
    llvm.store volatile %8, %7 {alignment = 1 : i64} : i16, !llvm.ptr
    %9 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%9 : i32)
  ^bb2(%10: i32):  // pred: ^bb1
    return %10 : i32
  }
  func.func public @i32_call(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    call @i32_dummy(%arg0, %0, %1) : (!llvm.ptr, i32, i32) -> ()
    %2 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%2 : i32)
  ^bb2(%3: i32):  // pred: ^bb1
    return %3 : i32
  }
  func.func public @i32_call_indirect(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[56] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i64
    %6 = arith.trunci %5 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %7 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %8 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    %9 = call @i32_callee(%arg0) : (!llvm.ptr) -> i32
    %10 = arith.cmpi ult, %9, %6 : i32
    cf.cond_br %10, ^bb3, ^bb4
  ^bb2(%11: i32):  // pred: ^bb9
    return %11 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %12 = llvm.getelementptr inbounds %4[%9] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    %14 = llvm.ptrtoint %13 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %15 = arith.cmpi eq, %14, %c0_i64 : i64
    cf.cond_br %15, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %16 = llvm.getelementptr %13[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.getelementptr %13[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %18 = llvm.getelementptr %13[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %19 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %20 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %21 = llvm.ptrtoint %19 : !llvm.ptr to i64
    %c0_i64_0 = arith.constant 0 : i64
    %22 = arith.cmpi eq, %21, %c0_i64_0 : i64
    cf.cond_br %22, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %23 = llvm.load %17 : !llvm.ptr -> i32
    %24 = arith.cmpi ne, %1, %23 : i32
    cf.cond_br %24, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_1 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_1) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %25 = llvm.call %19(%20, %7, %8) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %26 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%26 : i32)
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func public @i32_select(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    %2 = call @i32_bool(%arg0) : (!llvm.ptr) -> i32
    %3 = "wasm.select"(%0, %1, %2) : (i32, i32, i32) -> i32
    %4 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%4 : i32)
  ^bb2(%5: i32):  // pred: ^bb1
    return %5 : i32
  }
  func.func public @i64_add(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i64_left(%arg0) : (!llvm.ptr) -> i64
    %1 = call @i64_right(%arg0) : (!llvm.ptr) -> i64
    %2 = "wasm.add"(%0, %1) : (i64, i64) -> i64
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @i64_sub(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i64_left(%arg0) : (!llvm.ptr) -> i64
    %1 = call @i64_right(%arg0) : (!llvm.ptr) -> i64
    %2 = "wasm.sub"(%0, %1) : (i64, i64) -> i64
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @i64_mul(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i64_left(%arg0) : (!llvm.ptr) -> i64
    %1 = call @i64_right(%arg0) : (!llvm.ptr) -> i64
    %2 = "wasm.mul"(%0, %1) : (i64, i64) -> i64
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @i64_div_s(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i64_left(%arg0) : (!llvm.ptr) -> i64
    %1 = call @i64_right(%arg0) : (!llvm.ptr) -> i64
    %2 = "wasm.divs"(%0, %1) : (i64, i64) -> i64
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @i64_div_u(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i64_left(%arg0) : (!llvm.ptr) -> i64
    %1 = call @i64_right(%arg0) : (!llvm.ptr) -> i64
    %2 = "wasm.divu"(%0, %1) : (i64, i64) -> i64
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @i64_rem_s(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i64_left(%arg0) : (!llvm.ptr) -> i64
    %1 = call @i64_right(%arg0) : (!llvm.ptr) -> i64
    %2 = "wasm.rems"(%0, %1) : (i64, i64) -> i64
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @i64_rem_u(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i64_left(%arg0) : (!llvm.ptr) -> i64
    %1 = call @i64_right(%arg0) : (!llvm.ptr) -> i64
    %2 = "wasm.remu"(%0, %1) : (i64, i64) -> i64
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @i64_and(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i64_left(%arg0) : (!llvm.ptr) -> i64
    %1 = call @i64_right(%arg0) : (!llvm.ptr) -> i64
    %2 = "wasm.and"(%0, %1) : (i64, i64) -> i64
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @i64_or(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i64_left(%arg0) : (!llvm.ptr) -> i64
    %1 = call @i64_right(%arg0) : (!llvm.ptr) -> i64
    %2 = "wasm.or"(%0, %1) : (i64, i64) -> i64
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @i64_xor(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i64_left(%arg0) : (!llvm.ptr) -> i64
    %1 = call @i64_right(%arg0) : (!llvm.ptr) -> i64
    %2 = "wasm.xor"(%0, %1) : (i64, i64) -> i64
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @i64_shl(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i64_left(%arg0) : (!llvm.ptr) -> i64
    %1 = call @i64_right(%arg0) : (!llvm.ptr) -> i64
    %2 = "wasm.shl"(%0, %1) : (i64, i64) -> i64
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @i64_shr_u(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i64_left(%arg0) : (!llvm.ptr) -> i64
    %1 = call @i64_right(%arg0) : (!llvm.ptr) -> i64
    %2 = "wasm.shru"(%0, %1) : (i64, i64) -> i64
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @i64_shr_s(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i64_left(%arg0) : (!llvm.ptr) -> i64
    %1 = call @i64_right(%arg0) : (!llvm.ptr) -> i64
    %2 = "wasm.shrs"(%0, %1) : (i64, i64) -> i64
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @i64_eq(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i64_left(%arg0) : (!llvm.ptr) -> i64
    %1 = call @i64_right(%arg0) : (!llvm.ptr) -> i64
    %2 = "wasm.eq"(%0, %1) : (i64, i64) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @i64_ne(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i64_left(%arg0) : (!llvm.ptr) -> i64
    %1 = call @i64_right(%arg0) : (!llvm.ptr) -> i64
    %2 = "wasm.ne"(%0, %1) : (i64, i64) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @i64_lt_s(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i64_left(%arg0) : (!llvm.ptr) -> i64
    %1 = call @i64_right(%arg0) : (!llvm.ptr) -> i64
    %2 = "wasm.lts"(%0, %1) : (i64, i64) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @i64_le_s(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i64_left(%arg0) : (!llvm.ptr) -> i64
    %1 = call @i64_right(%arg0) : (!llvm.ptr) -> i64
    %2 = "wasm.les"(%0, %1) : (i64, i64) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @i64_lt_u(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i64_left(%arg0) : (!llvm.ptr) -> i64
    %1 = call @i64_right(%arg0) : (!llvm.ptr) -> i64
    %2 = "wasm.ltu"(%0, %1) : (i64, i64) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @i64_le_u(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i64_left(%arg0) : (!llvm.ptr) -> i64
    %1 = call @i64_right(%arg0) : (!llvm.ptr) -> i64
    %2 = "wasm.leu"(%0, %1) : (i64, i64) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @i64_gt_s(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i64_left(%arg0) : (!llvm.ptr) -> i64
    %1 = call @i64_right(%arg0) : (!llvm.ptr) -> i64
    %2 = "wasm.gts"(%0, %1) : (i64, i64) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @i64_ge_s(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i64_left(%arg0) : (!llvm.ptr) -> i64
    %1 = call @i64_right(%arg0) : (!llvm.ptr) -> i64
    %2 = "wasm.ges"(%0, %1) : (i64, i64) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @i64_gt_u(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i64_left(%arg0) : (!llvm.ptr) -> i64
    %1 = call @i64_right(%arg0) : (!llvm.ptr) -> i64
    %2 = "wasm.gtu"(%0, %1) : (i64, i64) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @i64_ge_u(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i64_left(%arg0) : (!llvm.ptr) -> i64
    %1 = call @i64_right(%arg0) : (!llvm.ptr) -> i64
    %2 = "wasm.geu"(%0, %1) : (i64, i64) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @i64_store(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %3 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %4 = call @i64_right(%arg0) : (!llvm.ptr) -> i64
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %3 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %7 = llvm.getelementptr %2[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %4, %7 {alignment = 1 : i64} : i64, !llvm.ptr
    %8 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%8 : i32)
  ^bb2(%9: i32):  // pred: ^bb1
    return %9 : i32
  }
  func.func public @i64_store8(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %3 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %4 = call @i64_right(%arg0) : (!llvm.ptr) -> i64
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %3 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %7 = llvm.getelementptr %2[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %8 = arith.trunci %4 : i64 to i8
    llvm.store volatile %8, %7 {alignment = 1 : i64} : i8, !llvm.ptr
    %9 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%9 : i32)
  ^bb2(%10: i32):  // pred: ^bb1
    return %10 : i32
  }
  func.func public @i64_store16(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %3 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %4 = call @i64_right(%arg0) : (!llvm.ptr) -> i64
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %3 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %7 = llvm.getelementptr %2[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %8 = arith.trunci %4 : i64 to i16
    llvm.store volatile %8, %7 {alignment = 1 : i64} : i16, !llvm.ptr
    %9 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%9 : i32)
  ^bb2(%10: i32):  // pred: ^bb1
    return %10 : i32
  }
  func.func public @i64_store32(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %3 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %4 = call @i64_right(%arg0) : (!llvm.ptr) -> i64
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %3 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %7 = llvm.getelementptr %2[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %8 = arith.trunci %4 : i64 to i32
    llvm.store volatile %8, %7 {alignment = 1 : i64} : i32, !llvm.ptr
    %9 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%9 : i32)
  ^bb2(%10: i32):  // pred: ^bb1
    return %10 : i32
  }
  func.func public @i64_call(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i64_left(%arg0) : (!llvm.ptr) -> i64
    %1 = call @i64_right(%arg0) : (!llvm.ptr) -> i64
    call @i64_dummy(%arg0, %0, %1) : (!llvm.ptr, i64, i64) -> ()
    %2 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%2 : i32)
  ^bb2(%3: i32):  // pred: ^bb1
    return %3 : i32
  }
  func.func public @i64_call_indirect(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[4] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[56] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i64
    %6 = arith.trunci %5 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %7 = call @i64_left(%arg0) : (!llvm.ptr) -> i64
    %8 = call @i64_right(%arg0) : (!llvm.ptr) -> i64
    %9 = call @i64_callee(%arg0) : (!llvm.ptr) -> i32
    %10 = arith.cmpi ult, %9, %6 : i32
    cf.cond_br %10, ^bb3, ^bb4
  ^bb2(%11: i32):  // pred: ^bb9
    return %11 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %12 = llvm.getelementptr inbounds %4[%9] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    %14 = llvm.ptrtoint %13 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %15 = arith.cmpi eq, %14, %c0_i64 : i64
    cf.cond_br %15, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %16 = llvm.getelementptr %13[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.getelementptr %13[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %18 = llvm.getelementptr %13[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %19 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %20 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %21 = llvm.ptrtoint %19 : !llvm.ptr to i64
    %c0_i64_0 = arith.constant 0 : i64
    %22 = arith.cmpi eq, %21, %c0_i64_0 : i64
    cf.cond_br %22, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %23 = llvm.load %17 : !llvm.ptr -> i32
    %24 = arith.cmpi ne, %1, %23 : i32
    cf.cond_br %24, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_1 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_1) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %25 = llvm.call %19(%20, %7, %8) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i64, i64) -> i32
    %26 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%26 : i32)
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func public @i64_select(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i64_left(%arg0) : (!llvm.ptr) -> i64
    %1 = call @i64_right(%arg0) : (!llvm.ptr) -> i64
    %2 = call @i64_bool(%arg0) : (!llvm.ptr) -> i32
    %3 = "wasm.select"(%0, %1, %2) : (i64, i64, i32) -> i64
    %4 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%4 : i32)
  ^bb2(%5: i32):  // pred: ^bb1
    return %5 : i32
  }
  func.func public @f32_add(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f32_left(%arg0) : (!llvm.ptr) -> f32
    %1 = call @f32_right(%arg0) : (!llvm.ptr) -> f32
    %2 = "wasm.add"(%0, %1) : (f32, f32) -> f32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @f32_sub(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f32_left(%arg0) : (!llvm.ptr) -> f32
    %1 = call @f32_right(%arg0) : (!llvm.ptr) -> f32
    %2 = "wasm.sub"(%0, %1) : (f32, f32) -> f32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @f32_mul(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f32_left(%arg0) : (!llvm.ptr) -> f32
    %1 = call @f32_right(%arg0) : (!llvm.ptr) -> f32
    %2 = "wasm.mul"(%0, %1) : (f32, f32) -> f32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @f32_div(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f32_left(%arg0) : (!llvm.ptr) -> f32
    %1 = call @f32_right(%arg0) : (!llvm.ptr) -> f32
    %2 = "wasm.divs"(%0, %1) : (f32, f32) -> f32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @f32_copysign(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f32_left(%arg0) : (!llvm.ptr) -> f32
    %1 = call @f32_right(%arg0) : (!llvm.ptr) -> f32
    %2 = "wasm.copysign"(%0, %1) : (f32, f32) -> f32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @f32_eq(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f32_left(%arg0) : (!llvm.ptr) -> f32
    %1 = call @f32_right(%arg0) : (!llvm.ptr) -> f32
    %2 = "wasm.eq"(%0, %1) : (f32, f32) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @f32_ne(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f32_left(%arg0) : (!llvm.ptr) -> f32
    %1 = call @f32_right(%arg0) : (!llvm.ptr) -> f32
    %2 = "wasm.ne"(%0, %1) : (f32, f32) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @f32_lt(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f32_left(%arg0) : (!llvm.ptr) -> f32
    %1 = call @f32_right(%arg0) : (!llvm.ptr) -> f32
    %2 = "wasm.flt"(%0, %1) : (f32, f32) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @f32_le(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f32_left(%arg0) : (!llvm.ptr) -> f32
    %1 = call @f32_right(%arg0) : (!llvm.ptr) -> f32
    %2 = "wasm.fle"(%0, %1) : (f32, f32) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @f32_gt(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f32_left(%arg0) : (!llvm.ptr) -> f32
    %1 = call @f32_right(%arg0) : (!llvm.ptr) -> f32
    %2 = "wasm.fgt"(%0, %1) : (f32, f32) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @f32_ge(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f32_left(%arg0) : (!llvm.ptr) -> f32
    %1 = call @f32_right(%arg0) : (!llvm.ptr) -> f32
    %2 = "wasm.fge"(%0, %1) : (f32, f32) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @f32_min(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f32_left(%arg0) : (!llvm.ptr) -> f32
    %1 = call @f32_right(%arg0) : (!llvm.ptr) -> f32
    %2 = "wasm.min"(%0, %1) : (f32, f32) -> f32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @f32_max(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f32_left(%arg0) : (!llvm.ptr) -> f32
    %1 = call @f32_right(%arg0) : (!llvm.ptr) -> f32
    %2 = "wasm.max"(%0, %1) : (f32, f32) -> f32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @f32_store(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %3 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %4 = call @f32_right(%arg0) : (!llvm.ptr) -> f32
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %3 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %7 = llvm.getelementptr %2[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %4, %7 {alignment = 1 : i64} : f32, !llvm.ptr
    %8 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%8 : i32)
  ^bb2(%9: i32):  // pred: ^bb1
    return %9 : i32
  }
  func.func public @f32_call(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f32_left(%arg0) : (!llvm.ptr) -> f32
    %1 = call @f32_right(%arg0) : (!llvm.ptr) -> f32
    call @f32_dummy(%arg0, %0, %1) : (!llvm.ptr, f32, f32) -> ()
    %2 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%2 : i32)
  ^bb2(%3: i32):  // pred: ^bb1
    return %3 : i32
  }
  func.func public @f32_call_indirect(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[56] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i64
    %6 = arith.trunci %5 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %7 = call @f32_left(%arg0) : (!llvm.ptr) -> f32
    %8 = call @f32_right(%arg0) : (!llvm.ptr) -> f32
    %9 = call @f32_callee(%arg0) : (!llvm.ptr) -> i32
    %10 = arith.cmpi ult, %9, %6 : i32
    cf.cond_br %10, ^bb3, ^bb4
  ^bb2(%11: i32):  // pred: ^bb9
    return %11 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %12 = llvm.getelementptr inbounds %4[%9] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    %14 = llvm.ptrtoint %13 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %15 = arith.cmpi eq, %14, %c0_i64 : i64
    cf.cond_br %15, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %16 = llvm.getelementptr %13[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.getelementptr %13[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %18 = llvm.getelementptr %13[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %19 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %20 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %21 = llvm.ptrtoint %19 : !llvm.ptr to i64
    %c0_i64_0 = arith.constant 0 : i64
    %22 = arith.cmpi eq, %21, %c0_i64_0 : i64
    cf.cond_br %22, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %23 = llvm.load %17 : !llvm.ptr -> i32
    %24 = arith.cmpi ne, %1, %23 : i32
    cf.cond_br %24, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_1 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_1) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %25 = llvm.call %19(%20, %7, %8) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, f32, f32) -> i32
    %26 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%26 : i32)
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func public @f32_select(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f32_left(%arg0) : (!llvm.ptr) -> f32
    %1 = call @f32_right(%arg0) : (!llvm.ptr) -> f32
    %2 = call @f32_bool(%arg0) : (!llvm.ptr) -> i32
    %3 = "wasm.select"(%0, %1, %2) : (f32, f32, i32) -> f32
    %4 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%4 : i32)
  ^bb2(%5: i32):  // pred: ^bb1
    return %5 : i32
  }
  func.func public @f64_add(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f64_left(%arg0) : (!llvm.ptr) -> f64
    %1 = call @f64_right(%arg0) : (!llvm.ptr) -> f64
    %2 = "wasm.add"(%0, %1) : (f64, f64) -> f64
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @f64_sub(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f64_left(%arg0) : (!llvm.ptr) -> f64
    %1 = call @f64_right(%arg0) : (!llvm.ptr) -> f64
    %2 = "wasm.sub"(%0, %1) : (f64, f64) -> f64
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @f64_mul(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f64_left(%arg0) : (!llvm.ptr) -> f64
    %1 = call @f64_right(%arg0) : (!llvm.ptr) -> f64
    %2 = "wasm.mul"(%0, %1) : (f64, f64) -> f64
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @f64_div(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f64_left(%arg0) : (!llvm.ptr) -> f64
    %1 = call @f64_right(%arg0) : (!llvm.ptr) -> f64
    %2 = "wasm.divs"(%0, %1) : (f64, f64) -> f64
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @f64_copysign(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f64_left(%arg0) : (!llvm.ptr) -> f64
    %1 = call @f64_right(%arg0) : (!llvm.ptr) -> f64
    %2 = "wasm.copysign"(%0, %1) : (f64, f64) -> f64
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @f64_eq(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f64_left(%arg0) : (!llvm.ptr) -> f64
    %1 = call @f64_right(%arg0) : (!llvm.ptr) -> f64
    %2 = "wasm.eq"(%0, %1) : (f64, f64) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @f64_ne(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f64_left(%arg0) : (!llvm.ptr) -> f64
    %1 = call @f64_right(%arg0) : (!llvm.ptr) -> f64
    %2 = "wasm.ne"(%0, %1) : (f64, f64) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @f64_lt(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f64_left(%arg0) : (!llvm.ptr) -> f64
    %1 = call @f64_right(%arg0) : (!llvm.ptr) -> f64
    %2 = "wasm.flt"(%0, %1) : (f64, f64) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @f64_le(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f64_left(%arg0) : (!llvm.ptr) -> f64
    %1 = call @f64_right(%arg0) : (!llvm.ptr) -> f64
    %2 = "wasm.fle"(%0, %1) : (f64, f64) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @f64_gt(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f64_left(%arg0) : (!llvm.ptr) -> f64
    %1 = call @f64_right(%arg0) : (!llvm.ptr) -> f64
    %2 = "wasm.fgt"(%0, %1) : (f64, f64) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @f64_ge(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f64_left(%arg0) : (!llvm.ptr) -> f64
    %1 = call @f64_right(%arg0) : (!llvm.ptr) -> f64
    %2 = "wasm.fge"(%0, %1) : (f64, f64) -> i32
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @f64_min(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f64_left(%arg0) : (!llvm.ptr) -> f64
    %1 = call @f64_right(%arg0) : (!llvm.ptr) -> f64
    %2 = "wasm.min"(%0, %1) : (f64, f64) -> f64
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @f64_max(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f64_left(%arg0) : (!llvm.ptr) -> f64
    %1 = call @f64_right(%arg0) : (!llvm.ptr) -> f64
    %2 = "wasm.max"(%0, %1) : (f64, f64) -> f64
    %3 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @f64_store(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %3 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %4 = call @f64_right(%arg0) : (!llvm.ptr) -> f64
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %3 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %7 = llvm.getelementptr %2[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %4, %7 {alignment = 1 : i64} : f64, !llvm.ptr
    %8 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%8 : i32)
  ^bb2(%9: i32):  // pred: ^bb1
    return %9 : i32
  }
  func.func public @f64_call(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f64_left(%arg0) : (!llvm.ptr) -> f64
    %1 = call @f64_right(%arg0) : (!llvm.ptr) -> f64
    call @f64_dummy(%arg0, %0, %1) : (!llvm.ptr, f64, f64) -> ()
    %2 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%2 : i32)
  ^bb2(%3: i32):  // pred: ^bb1
    return %3 : i32
  }
  func.func public @f64_call_indirect(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[12] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[56] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i64
    %6 = arith.trunci %5 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %7 = call @f64_left(%arg0) : (!llvm.ptr) -> f64
    %8 = call @f64_right(%arg0) : (!llvm.ptr) -> f64
    %9 = call @f64_callee(%arg0) : (!llvm.ptr) -> i32
    %10 = arith.cmpi ult, %9, %6 : i32
    cf.cond_br %10, ^bb3, ^bb4
  ^bb2(%11: i32):  // pred: ^bb9
    return %11 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %12 = llvm.getelementptr inbounds %4[%9] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    %14 = llvm.ptrtoint %13 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %15 = arith.cmpi eq, %14, %c0_i64 : i64
    cf.cond_br %15, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %16 = llvm.getelementptr %13[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.getelementptr %13[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %18 = llvm.getelementptr %13[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %19 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %20 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %21 = llvm.ptrtoint %19 : !llvm.ptr to i64
    %c0_i64_0 = arith.constant 0 : i64
    %22 = arith.cmpi eq, %21, %c0_i64_0 : i64
    cf.cond_br %22, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %23 = llvm.load %17 : !llvm.ptr -> i32
    %24 = arith.cmpi ne, %1, %23 : i32
    cf.cond_br %24, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_1 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_1) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %25 = llvm.call %19(%20, %7, %8) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, f64, f64) -> i32
    %26 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%26 : i32)
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func public @f64_select(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @f64_left(%arg0) : (!llvm.ptr) -> f64
    %1 = call @f64_right(%arg0) : (!llvm.ptr) -> f64
    %2 = call @f64_bool(%arg0) : (!llvm.ptr) -> i32
    %3 = "wasm.select"(%0, %1, %2) : (f64, f64, i32) -> f64
    %4 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%4 : i32)
  ^bb2(%5: i32):  // pred: ^bb1
    return %5 : i32
  }
  func.func public @br_if(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = "wasm.and"(%1, %c0_i32) : (i32, i32) -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %3 = arith.cmpi ne, %2, %c0_i32_0 : i32
    cf.cond_br %3, ^bb3(%0 : i32), ^bb4(%0 : i32)
  ^bb2(%4: i32):  // pred: ^bb3
    return %4 : i32
  ^bb3(%5: i32):  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2(%5 : i32)
  ^bb4(%6: i32):  // pred: ^bb1
    %7 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb3(%7 : i32)
  }
  func.func public @br_table(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @reset(%arg0) : (!llvm.ptr) -> ()
    %0 = call @i32_left(%arg0) : (!llvm.ptr) -> i32
    %1 = call @i32_right(%arg0) : (!llvm.ptr) -> i32
    cf.switch %1 : i32, [
      default: ^bb4(%0 : i32),
      0: ^bb3(%0 : i32)
    ]
  ^bb2(%2: i32):  // pred: ^bb3
    return %2 : i32
  ^bb3(%3: i32):  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2(%3 : i32)
  ^bb4(%4: i32):  // pred: ^bb1
    %5 = call @get(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb3(%5 : i32)
  }
  func.func private @dora_fn_wasm_table_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_copy(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_fill(!llvm.ptr, i32, i32, !llvm.ptr, i32)
  func.func private @dora_fn_wasm_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_table_set(!llvm.ptr, i32, i32, !llvm.ptr)
  func.func private @dora_fn_wasm_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_imported_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_func_ref(!llvm.ptr, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_data_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_elem_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_raise_trap(i32)
  func.func private @dora_fn_wasm_gas_limit() -> i64
}
