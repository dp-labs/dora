---
source: crates/dora-compiler/src/wasm/tests/conversion.rs
expression: op
snapshot_kind: text
---
module {
  func.func @dummy(%arg0: !llvm.ptr) {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func public @"select-i32"(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_1 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %4 = arith.cmpi ne, %c1_i32_1, %c0_i32 : i32
    %5 = arith.select %4, %2, %3 : i32
    cf.br ^bb2(%5 : i32)
  ^bb2(%6: i32):  // pred: ^bb1
    return %6 : i32
  }
  func.func public @"select-i64"(%arg0: !llvm.ptr, %arg1: i64, %arg2: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i64 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i64
    %3 = llvm.load %1 : !llvm.ptr -> i64
    %c1_i32_1 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %4 = arith.cmpi ne, %c1_i32_1, %c0_i32 : i32
    %5 = arith.select %4, %2, %3 : i64
    cf.br ^bb2(%5 : i64)
  ^bb2(%6: i64):  // pred: ^bb1
    return %6 : i64
  }
  func.func public @"select-f32"(%arg0: !llvm.ptr, %arg1: f32, %arg2: f32) -> f32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : f32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x f32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : f32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> f32
    %3 = llvm.load %1 : !llvm.ptr -> f32
    %c1_i32_1 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %4 = arith.cmpi ne, %c1_i32_1, %c0_i32 : i32
    %5 = arith.select %4, %2, %3 : f32
    cf.br ^bb2(%5 : f32)
  ^bb2(%6: f32):  // pred: ^bb1
    return %6 : f32
  }
  func.func public @"select-f64"(%arg0: !llvm.ptr, %arg1: f64, %arg2: f64) -> f64 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f64 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : f64, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x f64 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : f64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> f64
    %3 = llvm.load %1 : !llvm.ptr -> f64
    %c1_i32_1 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %4 = arith.cmpi ne, %c1_i32_1, %c0_i32 : i32
    %5 = arith.select %4, %2, %3 : f64
    cf.br ^bb2(%5 : f64)
  ^bb2(%6: f64):  // pred: ^bb1
    return %6 : f64
  }
  func.func public @"select-i32-t"(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %3 = llvm.load %0 : !llvm.ptr -> i32
    %4 = llvm.load %1 : !llvm.ptr -> i32
    %5 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %6 = arith.cmpi ne, %5, %c0_i32 : i32
    %7 = arith.select %6, %3, %4 : i32
    cf.br ^bb2(%7 : i32)
  ^bb2(%8: i32):  // pred: ^bb1
    return %8 : i32
  }
  func.func public @"select-i64-t"(%arg0: !llvm.ptr, %arg1: i64, %arg2: i64, %arg3: i32) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i64 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i64, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %3 = llvm.load %0 : !llvm.ptr -> i64
    %4 = llvm.load %1 : !llvm.ptr -> i64
    %5 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %6 = arith.cmpi ne, %5, %c0_i32 : i32
    %7 = arith.select %6, %3, %4 : i64
    cf.br ^bb2(%7 : i64)
  ^bb2(%8: i64):  // pred: ^bb1
    return %8 : i64
  }
  func.func public @"select-f32-t"(%arg0: !llvm.ptr, %arg1: f32, %arg2: f32, %arg3: i32) -> f32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : f32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x f32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : f32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %3 = llvm.load %0 : !llvm.ptr -> f32
    %4 = llvm.load %1 : !llvm.ptr -> f32
    %5 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %6 = arith.cmpi ne, %5, %c0_i32 : i32
    %7 = arith.select %6, %3, %4 : f32
    cf.br ^bb2(%7 : f32)
  ^bb2(%8: f32):  // pred: ^bb1
    return %8 : f32
  }
  func.func public @"select-f64-t"(%arg0: !llvm.ptr, %arg1: f64, %arg2: f64, %arg3: i32) -> f64 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f64 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : f64, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x f64 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : f64, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %3 = llvm.load %0 : !llvm.ptr -> f64
    %4 = llvm.load %1 : !llvm.ptr -> f64
    %5 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %6 = arith.cmpi ne, %5, %c0_i32 : i32
    %7 = arith.select %6, %3, %4 : f64
    cf.br ^bb2(%7 : f64)
  ^bb2(%8: f64):  // pred: ^bb1
    return %8 : f64
  }
  func.func public @"select-funcref"(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: i32) -> !llvm.ptr attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x !llvm.ptr : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : !llvm.ptr, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x !llvm.ptr : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : !llvm.ptr, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %3 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %4 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %6 = arith.cmpi ne, %5, %c0_i32 : i32
    %7 = arith.select %6, %3, %4 : !llvm.ptr
    cf.br ^bb2(%7 : !llvm.ptr)
  ^bb2(%8: !llvm.ptr):  // pred: ^bb1
    return %8 : !llvm.ptr
  }
  func.func public @"select-externref"(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: i32) -> !llvm.ptr attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x !llvm.ptr : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : !llvm.ptr, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x !llvm.ptr : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : !llvm.ptr, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %3 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %4 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %6 = arith.cmpi ne, %5, %c0_i32 : i32
    %7 = arith.select %6, %3, %4 : !llvm.ptr
    cf.br ^bb2(%7 : !llvm.ptr)
  ^bb2(%8: !llvm.ptr):  // pred: ^bb1
    return %8 : !llvm.ptr
  }
  func.func public @"as-select-first"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_1 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32_1 : i32
    %3 = arith.select %2, %c0_i32, %c1_i32_0 : i32
    %c2_i32 = arith.constant 2 : i32
    %c3_i32 = arith.constant 3 : i32
    %c0_i32_2 = arith.constant 0 : i32
    %4 = arith.cmpi ne, %c3_i32, %c0_i32_2 : i32
    %5 = arith.select %4, %3, %c2_i32 : i32
    cf.br ^bb2(%5 : i32)
  ^bb2(%6: i32):  // pred: ^bb1
    return %6 : i32
  }
  func.func public @"as-select-mid"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2_i32 = arith.constant 2 : i32
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_1 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32_1 : i32
    %3 = arith.select %2, %c0_i32, %c1_i32_0 : i32
    %c3_i32 = arith.constant 3 : i32
    %c0_i32_2 = arith.constant 0 : i32
    %4 = arith.cmpi ne, %c3_i32, %c0_i32_2 : i32
    %5 = arith.select %4, %c2_i32, %3 : i32
    cf.br ^bb2(%5 : i32)
  ^bb2(%6: i32):  // pred: ^bb1
    return %6 : i32
  }
  func.func public @"as-select-last"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2_i32 = arith.constant 2 : i32
    %c3_i32 = arith.constant 3 : i32
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_1 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32_1 : i32
    %3 = arith.select %2, %c0_i32, %c1_i32_0 : i32
    %c0_i32_2 = arith.constant 0 : i32
    %4 = arith.cmpi ne, %3, %c0_i32_2 : i32
    %5 = arith.select %4, %c2_i32, %c3_i32 : i32
    cf.br ^bb2(%5 : i32)
  ^bb2(%6: i32):  // pred: ^bb1
    return %6 : i32
  }
  func.func public @"as-loop-first"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb4
  ^bb2(%1: i32):  // pred: ^bb3
    return %1 : i32
  ^bb3(%2: i32):  // pred: ^bb4
    cf.br ^bb2(%2 : i32)
  ^bb4:  // pred: ^bb1
    %c2_i32 = arith.constant 2 : i32
    %c3_i32 = arith.constant 3 : i32
    %3 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %4 = arith.cmpi ne, %3, %c0_i32 : i32
    %5 = arith.select %4, %c2_i32, %c3_i32 : i32
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    cf.br ^bb3(%5 : i32)
  }
  func.func public @"as-loop-mid"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb4
  ^bb2(%1: i32):  // pred: ^bb3
    return %1 : i32
  ^bb3(%2: i32):  // pred: ^bb4
    cf.br ^bb2(%2 : i32)
  ^bb4:  // pred: ^bb1
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c2_i32 = arith.constant 2 : i32
    %c3_i32 = arith.constant 3 : i32
    %3 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %4 = arith.cmpi ne, %3, %c0_i32 : i32
    %5 = arith.select %4, %c2_i32, %c3_i32 : i32
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    cf.br ^bb3(%5 : i32)
  }
  func.func public @"as-loop-last"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb4
  ^bb2(%1: i32):  // pred: ^bb3
    return %1 : i32
  ^bb3(%2: i32):  // pred: ^bb4
    cf.br ^bb2(%2 : i32)
  ^bb4:  // pred: ^bb1
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c2_i32 = arith.constant 2 : i32
    %c3_i32 = arith.constant 3 : i32
    %3 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %4 = arith.cmpi ne, %3, %c0_i32 : i32
    %5 = arith.select %4, %c2_i32, %c3_i32 : i32
    cf.br ^bb3(%5 : i32)
  }
  func.func public @"as-if-condition"(%arg0: !llvm.ptr, %arg1: i32) attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2_i32 = arith.constant 2 : i32
    %c3_i32 = arith.constant 3 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    %3 = arith.select %2, %c2_i32, %c3_i32 : i32
    %c0_i32_0 = arith.constant 0 : i32
    %4 = arith.cmpi ne, %3, %c0_i32_0 : i32
    cf.cond_br %4, ^bb3, ^bb4
  ^bb2:  // pred: ^bb5
    return
  ^bb3:  // pred: ^bb1
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    cf.br ^bb5
  ^bb4:  // pred: ^bb1
    cf.br ^bb5
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cf.br ^bb2
  }
  func.func public @"as-if-then"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32_0 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %1 = arith.cmpi ne, %c1_i32_0, %c0_i32 : i32
    cf.cond_br %1, ^bb3, ^bb4
  ^bb2(%2: i32):  // pred: ^bb5
    return %2 : i32
  ^bb3:  // pred: ^bb1
    %c2_i32 = arith.constant 2 : i32
    %c3_i32 = arith.constant 3 : i32
    %3 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_1 = arith.constant 0 : i32
    %4 = arith.cmpi ne, %3, %c0_i32_1 : i32
    %5 = arith.select %4, %c2_i32, %c3_i32 : i32
    cf.br ^bb5(%5 : i32)
  ^bb4:  // pred: ^bb1
    %c4_i32 = arith.constant 4 : i32
    cf.br ^bb5(%c4_i32 : i32)
  ^bb5(%6: i32):  // 2 preds: ^bb3, ^bb4
    cf.br ^bb2(%6 : i32)
  }
  func.func public @"as-if-else"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c0_i32_0 = arith.constant 0 : i32
    %1 = arith.cmpi ne, %c0_i32, %c0_i32_0 : i32
    cf.cond_br %1, ^bb3, ^bb4
  ^bb2(%2: i32):  // pred: ^bb5
    return %2 : i32
  ^bb3:  // pred: ^bb1
    %c2_i32 = arith.constant 2 : i32
    cf.br ^bb5(%c2_i32 : i32)
  ^bb4:  // pred: ^bb1
    %c2_i32_1 = arith.constant 2 : i32
    %c3_i32 = arith.constant 3 : i32
    %3 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_2 = arith.constant 0 : i32
    %4 = arith.cmpi ne, %3, %c0_i32_2 : i32
    %5 = arith.select %4, %c2_i32_1, %c3_i32 : i32
    cf.br ^bb5(%5 : i32)
  ^bb5(%6: i32):  // 2 preds: ^bb3, ^bb4
    cf.br ^bb2(%6 : i32)
  }
  func.func public @"as-br_if-first"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2_i32 = arith.constant 2 : i32
    %c3_i32 = arith.constant 3 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    %3 = arith.select %2, %c2_i32, %c3_i32 : i32
    %c4_i32 = arith.constant 4 : i32
    %c0_i32_0 = arith.constant 0 : i32
    %4 = arith.cmpi ne, %c4_i32, %c0_i32_0 : i32
    cf.cond_br %4, ^bb3(%3 : i32), ^bb4(%3 : i32)
  ^bb2(%5: i32):  // pred: ^bb3
    return %5 : i32
  ^bb3(%6: i32):  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2(%6 : i32)
  ^bb4(%7: i32):  // pred: ^bb1
    cf.br ^bb3(%3 : i32)
  }
  func.func public @"as-br_if-last"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2_i32 = arith.constant 2 : i32
    %c2_i32_0 = arith.constant 2 : i32
    %c3_i32 = arith.constant 3 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    %3 = arith.select %2, %c2_i32_0, %c3_i32 : i32
    %c0_i32_1 = arith.constant 0 : i32
    %4 = arith.cmpi ne, %3, %c0_i32_1 : i32
    cf.cond_br %4, ^bb3(%c2_i32 : i32), ^bb4(%c2_i32 : i32)
  ^bb2(%5: i32):  // pred: ^bb3
    return %5 : i32
  ^bb3(%6: i32):  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2(%6 : i32)
  ^bb4(%7: i32):  // pred: ^bb1
    cf.br ^bb3(%c2_i32 : i32)
  }
  func.func public @"as-br_table-first"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2_i32 = arith.constant 2 : i32
    %c3_i32 = arith.constant 3 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    %3 = arith.select %2, %c2_i32, %c3_i32 : i32
    %c2_i32_0 = arith.constant 2 : i32
    cf.switch %c2_i32_0 : i32, [
      default: ^bb3(%3 : i32),
      0: ^bb3(%3 : i32)
    ]
  ^bb2(%4: i32):  // pred: ^bb3
    return %4 : i32
  ^bb3(%5: i32):  // 2 preds: ^bb1, ^bb1
    cf.br ^bb2(%5 : i32)
  }
  func.func public @"as-br_table-last"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2_i32 = arith.constant 2 : i32
    %c2_i32_0 = arith.constant 2 : i32
    %c3_i32 = arith.constant 3 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    %3 = arith.select %2, %c2_i32_0, %c3_i32 : i32
    cf.switch %3 : i32, [
      default: ^bb3(%c2_i32 : i32),
      0: ^bb3(%c2_i32 : i32)
    ]
  ^bb2(%4: i32):  // pred: ^bb3
    return %4 : i32
  ^bb3(%5: i32):  // 2 preds: ^bb1, ^bb1
    cf.br ^bb2(%5 : i32)
  }
  func.func @func(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%2 : i32)
  ^bb2(%3: i32):  // pred: ^bb1
    return %3 : i32
  }
  func.func public @"as-call_indirect-first"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.load %4 : !llvm.ptr -> i64
    %7 = arith.trunci %6 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2_i32 = arith.constant 2 : i32
    %c3_i32 = arith.constant 3 : i32
    %8 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %9 = arith.cmpi ne, %8, %c0_i32 : i32
    %10 = arith.select %9, %c2_i32, %c3_i32 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %c0_i32_1 = arith.constant 0 : i32
    %11 = arith.cmpi ult, %c0_i32_1, %7 : i32
    cf.cond_br %11, ^bb4, ^bb5
  ^bb2(%12: i32):  // pred: ^bb3
    return %12 : i32
  ^bb3(%13: i32):  // pred: ^bb10
    cf.br ^bb2(%13 : i32)
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %14 = llvm.getelementptr inbounds %5[%c0_i32_1] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %15 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %16 = llvm.ptrtoint %15 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %17 = arith.cmpi eq, %16, %c0_i64 : i64
    cf.cond_br %17, ^bb7, ^bb6
  ^bb5:  // pred: ^bb1
    %c3_i32_2 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_2) : (i32) -> ()
    cf.br ^bb4
  ^bb6:  // 2 preds: ^bb4, ^bb7
    %18 = llvm.getelementptr %15[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %19 = llvm.getelementptr %15[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %20 = llvm.getelementptr %15[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %21 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %22 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %23 = llvm.ptrtoint %21 : !llvm.ptr to i64
    %c0_i64_3 = arith.constant 0 : i64
    %24 = arith.cmpi eq, %23, %c0_i64_3 : i64
    cf.cond_br %24, ^bb9, ^bb8
  ^bb7:  // pred: ^bb4
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // 2 preds: ^bb6, ^bb9
    %25 = llvm.load %19 : !llvm.ptr -> i32
    %26 = arith.cmpi ne, %2, %25 : i32
    cf.cond_br %26, ^bb11, ^bb10
  ^bb9:  // pred: ^bb6
    %c3_i32_4 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_4) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // 2 preds: ^bb8, ^bb11
    %27 = llvm.call %21(%22, %10, %c1_i32_0) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    cf.br ^bb3(%27 : i32)
  ^bb11:  // pred: ^bb8
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb10
  }
  func.func public @"as-call_indirect-mid"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.load %4 : !llvm.ptr -> i64
    %7 = arith.trunci %6 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32_0 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %c3_i32 = arith.constant 3 : i32
    %8 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %9 = arith.cmpi ne, %8, %c0_i32 : i32
    %10 = arith.select %9, %c2_i32, %c3_i32 : i32
    %c0_i32_1 = arith.constant 0 : i32
    %11 = arith.cmpi ult, %c0_i32_1, %7 : i32
    cf.cond_br %11, ^bb4, ^bb5
  ^bb2(%12: i32):  // pred: ^bb3
    return %12 : i32
  ^bb3(%13: i32):  // pred: ^bb10
    cf.br ^bb2(%13 : i32)
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %14 = llvm.getelementptr inbounds %5[%c0_i32_1] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %15 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %16 = llvm.ptrtoint %15 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %17 = arith.cmpi eq, %16, %c0_i64 : i64
    cf.cond_br %17, ^bb7, ^bb6
  ^bb5:  // pred: ^bb1
    %c3_i32_2 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_2) : (i32) -> ()
    cf.br ^bb4
  ^bb6:  // 2 preds: ^bb4, ^bb7
    %18 = llvm.getelementptr %15[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %19 = llvm.getelementptr %15[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %20 = llvm.getelementptr %15[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %21 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %22 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %23 = llvm.ptrtoint %21 : !llvm.ptr to i64
    %c0_i64_3 = arith.constant 0 : i64
    %24 = arith.cmpi eq, %23, %c0_i64_3 : i64
    cf.cond_br %24, ^bb9, ^bb8
  ^bb7:  // pred: ^bb4
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // 2 preds: ^bb6, ^bb9
    %25 = llvm.load %19 : !llvm.ptr -> i32
    %26 = arith.cmpi ne, %2, %25 : i32
    cf.cond_br %26, ^bb11, ^bb10
  ^bb9:  // pred: ^bb6
    %c3_i32_4 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_4) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // 2 preds: ^bb8, ^bb11
    %27 = llvm.call %21(%22, %c1_i32_0, %10) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    cf.br ^bb3(%27 : i32)
  ^bb11:  // pred: ^bb8
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb10
  }
  func.func public @"as-call_indirect-last"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.load %4 : !llvm.ptr -> i64
    %7 = arith.trunci %6 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32_0 = arith.constant 1 : i32
    %c4_i32 = arith.constant 4 : i32
    %c2_i32 = arith.constant 2 : i32
    %c3_i32 = arith.constant 3 : i32
    %8 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %9 = arith.cmpi ne, %8, %c0_i32 : i32
    %10 = arith.select %9, %c2_i32, %c3_i32 : i32
    %11 = arith.cmpi ult, %10, %7 : i32
    cf.cond_br %11, ^bb4, ^bb5
  ^bb2(%12: i32):  // pred: ^bb3
    return %12 : i32
  ^bb3(%13: i32):  // pred: ^bb10
    cf.br ^bb2(%13 : i32)
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %14 = llvm.getelementptr inbounds %5[%10] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %15 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %16 = llvm.ptrtoint %15 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %17 = arith.cmpi eq, %16, %c0_i64 : i64
    cf.cond_br %17, ^bb7, ^bb6
  ^bb5:  // pred: ^bb1
    %c3_i32_1 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_1) : (i32) -> ()
    cf.br ^bb4
  ^bb6:  // 2 preds: ^bb4, ^bb7
    %18 = llvm.getelementptr %15[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %19 = llvm.getelementptr %15[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %20 = llvm.getelementptr %15[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %21 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %22 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %23 = llvm.ptrtoint %21 : !llvm.ptr to i64
    %c0_i64_2 = arith.constant 0 : i64
    %24 = arith.cmpi eq, %23, %c0_i64_2 : i64
    cf.cond_br %24, ^bb9, ^bb8
  ^bb7:  // pred: ^bb4
    %c4_i32_3 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_3) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // 2 preds: ^bb6, ^bb9
    %25 = llvm.load %19 : !llvm.ptr -> i32
    %26 = arith.cmpi ne, %2, %25 : i32
    cf.cond_br %26, ^bb11, ^bb10
  ^bb9:  // pred: ^bb6
    %c3_i32_4 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_4) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // 2 preds: ^bb8, ^bb11
    %27 = llvm.call %21(%22, %c1_i32_0, %c4_i32) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    cf.br ^bb3(%27 : i32)
  ^bb11:  // pred: ^bb8
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb10
  }
  func.func public @"as-store-first"(%arg0: !llvm.ptr, %arg1: i32) attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[88] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c4_i32 = arith.constant 4 : i32
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %5 = arith.cmpi ne, %4, %c0_i32_0 : i32
    %6 = arith.select %5, %c0_i32, %c4_i32 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %c0_i64 = arith.constant 0 : i64
    %7 = arith.extui %6 : i32 to i64
    %8 = arith.addi %7, %c0_i64 : i64
    %9 = llvm.getelementptr %3[%8] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_1, %9 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func public @"as-store-last"(%arg0: !llvm.ptr, %arg1: i32) attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[88] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c8_i32 = arith.constant 8 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %5 = arith.cmpi ne, %4, %c0_i32 : i32
    %6 = arith.select %5, %c1_i32_0, %c2_i32 : i32
    %c0_i64 = arith.constant 0 : i64
    %7 = arith.extui %c8_i32 : i32 to i64
    %8 = arith.addi %7, %c0_i64 : i64
    %9 = llvm.getelementptr %3[%8] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %6, %9 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func public @"as-memory.grow-value"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32_0 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    %3 = arith.select %2, %c1_i32_0, %c2_i32 : i32
    %c0_i32_1 = arith.constant 0 : i32
    %4 = call @dora_fn_wasm_memory_grow(%arg0, %3, %c0_i32_1) : (!llvm.ptr, i32, i32) -> i32
    cf.br ^bb2(%4 : i32)
  ^bb2(%5: i32):  // pred: ^bb1
    return %5 : i32
  }
  func.func @f(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%1 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func public @"as-call-value"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32_0 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    %3 = arith.select %2, %c1_i32_0, %c2_i32 : i32
    %4 = call @f(%arg0, %3) : (!llvm.ptr, i32) -> i32
    cf.br ^bb2(%4 : i32)
  ^bb2(%5: i32):  // pred: ^bb1
    return %5 : i32
  }
  func.func public @"as-return-value"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32_0 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    %3 = arith.select %2, %c1_i32_0, %c2_i32 : i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @"as-drop-operand"(%arg0: !llvm.ptr, %arg1: i32) attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32_0 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    %3 = arith.select %2, %c1_i32_0, %c2_i32 : i32
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func public @"as-br-value"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32_0 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    %3 = arith.select %2, %c1_i32_0, %c2_i32 : i32
    cf.br ^bb3(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb3
    return %4 : i32
  ^bb3(%5: i32):  // pred: ^bb1
    cf.br ^bb2(%5 : i32)
  }
  func.func public @"as-local.set-value"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32_1 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_2 = arith.constant 0 : i32
    %3 = arith.cmpi ne, %2, %c0_i32_2 : i32
    %4 = arith.select %3, %c1_i32_1, %c2_i32 : i32
    llvm.store %4, %0 : i32, !llvm.ptr
    %5 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%5 : i32)
  ^bb2(%6: i32):  // pred: ^bb1
    return %6 : i32
  }
  func.func public @"as-local.tee-value"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32_0 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    %3 = arith.select %2, %c1_i32_0, %c2_i32 : i32
    llvm.store %3, %0 : i32, !llvm.ptr
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @"as-global.set-value"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32_0 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %3 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %4 = arith.cmpi ne, %3, %c0_i32 : i32
    %5 = arith.select %4, %c1_i32_0, %c2_i32 : i32
    llvm.store %5, %2 : i32, !llvm.ptr
    %6 = llvm.load %2 : !llvm.ptr -> i32
    cf.br ^bb2(%6 : i32)
  ^bb2(%7: i32):  // pred: ^bb1
    return %7 : i32
  }
  func.func public @"as-load-operand"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[88] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c4_i32 = arith.constant 4 : i32
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %5 = arith.cmpi ne, %4, %c0_i32_0 : i32
    %6 = arith.select %5, %c0_i32, %c4_i32 : i32
    %c0_i64 = arith.constant 0 : i64
    %7 = arith.extui %6 : i32 to i64
    %8 = arith.addi %7, %c0_i64 : i64
    %9 = llvm.getelementptr %3[%8] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %10 = llvm.load volatile %9 {alignment = 1 : i64} : !llvm.ptr -> i32
    cf.br ^bb2(%10 : i32)
  ^bb2(%11: i32):  // pred: ^bb1
    return %11 : i32
  }
  func.func public @"as-unary-operand"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_1 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32_1 : i32
    %3 = arith.select %2, %c0_i32, %c1_i32_0 : i32
    %c0_i32_2 = arith.constant 0 : i32
    %4 = arith.cmpi eq, %3, %c0_i32_2 : i32
    %5 = arith.extui %4 : i1 to i32
    cf.br ^bb2(%5 : i32)
  ^bb2(%6: i32):  // pred: ^bb1
    return %6 : i32
  }
  func.func public @"as-binary-operand"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32_0 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    %3 = arith.select %2, %c1_i32_0, %c2_i32 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %c2_i32_2 = arith.constant 2 : i32
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_3 = arith.constant 0 : i32
    %5 = arith.cmpi ne, %4, %c0_i32_3 : i32
    %6 = arith.select %5, %c1_i32_1, %c2_i32_2 : i32
    %7 = arith.muli %3, %6 : i32
    cf.br ^bb2(%7 : i32)
  ^bb2(%8: i32):  // pred: ^bb1
    return %8 : i32
  }
  func.func public @"as-test-operand"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_1 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32_1 : i32
    %3 = arith.select %2, %c0_i32, %c1_i32_0 : i32
    %c0_i32_2 = arith.constant 0 : i32
    %4 = arith.cmpi eq, %3, %c0_i32_2 : i32
    %5 = arith.extui %4 : i1 to i32
    cf.br ^bb3(%5 : i32)
  ^bb2(%6: i32):  // pred: ^bb3
    return %6 : i32
  ^bb3(%7: i32):  // pred: ^bb1
    cf.br ^bb2(%7 : i32)
  }
  func.func public @"as-compare-left"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32_0 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    %3 = arith.select %2, %c1_i32_0, %c2_i32 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %4 = arith.cmpi sle, %3, %c1_i32_1 : i32
    %5 = arith.extui %4 : i1 to i32
    cf.br ^bb3(%5 : i32)
  ^bb2(%6: i32):  // pred: ^bb3
    return %6 : i32
  ^bb3(%7: i32):  // pred: ^bb1
    cf.br ^bb2(%7 : i32)
  }
  func.func public @"as-compare-right"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32_0 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_2 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32_2 : i32
    %3 = arith.select %2, %c0_i32, %c1_i32_1 : i32
    %4 = arith.cmpi eq, %c1_i32_0, %3 : i32
    %5 = arith.extui %4 : i1 to i32
    %c0_i32_3 = arith.constant 0 : i32
    %6 = arith.cmpi eq, %5, %c0_i32_3 : i32
    %7 = arith.extui %6 : i1 to i32
    cf.br ^bb3(%7 : i32)
  ^bb2(%8: i32):  // pred: ^bb3
    return %8 : i32
  ^bb3(%9: i32):  // pred: ^bb1
    cf.br ^bb2(%9 : i32)
  }
  func.func public @"as-convert-operand"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i64 = arith.constant 1 : i64
    %c0_i64 = arith.constant 0 : i64
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    %3 = arith.select %2, %c1_i64, %c0_i64 : i64
    %4 = arith.trunci %3 : i64 to i32
    cf.br ^bb3(%4 : i32)
  ^bb2(%5: i32):  // pred: ^bb3
    return %5 : i32
  ^bb3(%6: i32):  // pred: ^bb1
    cf.br ^bb2(%6 : i32)
  }
  func.func private @dora_fn_wasm_table_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_copy(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_fill(!llvm.ptr, i32, i32, !llvm.ptr, i32)
  func.func private @dora_fn_wasm_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_table_set(!llvm.ptr, i32, i32, !llvm.ptr)
  func.func private @dora_fn_wasm_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_imported_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_func_ref(!llvm.ptr, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_data_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_elem_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_raise_trap(i32)
  func.func private @dora_fn_wasm_gas_limit() -> i64
}
