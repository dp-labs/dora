---
source: crates/dora-compiler/src/wasm/tests/code.rs
expression: op
snapshot_kind: text
---
module {
  func.func @dummy(%arg0: !llvm.ptr) {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func public @"type-i32"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %c0_i32_0 = arith.constant 0 : i32
    %0 = arith.cmpi ne, %c1_i32, %c0_i32_0 : i32
    cf.cond_br %0, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %1 = "wasm.ctz"(%c0_i32) : (i32) -> i32
    cf.br ^bb3
  }
  func.func public @"type-i64"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i64 = arith.constant 0 : i64
    %c1_i32 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %0 = arith.cmpi ne, %c1_i32, %c0_i32 : i32
    cf.cond_br %0, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %1 = "wasm.ctz"(%c0_i64) : (i64) -> i64
    cf.br ^bb3
  }
  func.func public @"type-f32"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 0.000000e+00 : f32
    %c1_i32 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %0 = arith.cmpi ne, %c1_i32, %c0_i32 : i32
    cf.cond_br %0, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %1 = "wasm.neg"(%cst) : (f32) -> f32
    cf.br ^bb3
  }
  func.func public @"type-f64"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 0.000000e+00 : f64
    %c1_i32 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %0 = arith.cmpi ne, %c1_i32, %c0_i32 : i32
    cf.cond_br %0, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %1 = "wasm.neg"(%cst) : (f64) -> f64
    cf.br ^bb3
  }
  func.func public @"type-i32-value"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %0 = arith.cmpi ne, %c1_i32_0, %c0_i32 : i32
    cf.cond_br %0, ^bb3(%c1_i32 : i32), ^bb4(%c1_i32 : i32)
  ^bb2(%1: i32):  // pred: ^bb3
    return %1 : i32
  ^bb3(%2: i32):  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2(%2 : i32)
  ^bb4(%3: i32):  // pred: ^bb1
    %4 = "wasm.ctz"(%c1_i32) : (i32) -> i32
    cf.br ^bb3(%4 : i32)
  }
  func.func public @"type-i64-value"(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2_i64 = arith.constant 2 : i64
    %c1_i32 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %0 = arith.cmpi ne, %c1_i32, %c0_i32 : i32
    cf.cond_br %0, ^bb3(%c2_i64 : i64), ^bb4(%c2_i64 : i64)
  ^bb2(%1: i64):  // pred: ^bb3
    return %1 : i64
  ^bb3(%2: i64):  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2(%2 : i64)
  ^bb4(%3: i64):  // pred: ^bb1
    %4 = "wasm.ctz"(%c2_i64) : (i64) -> i64
    cf.br ^bb3(%4 : i64)
  }
  func.func public @"type-f32-value"(%arg0: !llvm.ptr) -> f32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 1.07793613E+9 : f32
    %c1_i32 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %0 = arith.cmpi ne, %c1_i32, %c0_i32 : i32
    cf.cond_br %0, ^bb3(%cst : f32), ^bb4(%cst : f32)
  ^bb2(%1: f32):  // pred: ^bb3
    return %1 : f32
  ^bb3(%2: f32):  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2(%2 : f32)
  ^bb4(%3: f32):  // pred: ^bb1
    %4 = "wasm.neg"(%cst) : (f32) -> f32
    cf.br ^bb3(%4 : f32)
  }
  func.func public @"type-f64-value"(%arg0: !llvm.ptr) -> f64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 4.6161896180547584E+18 : f64
    %c1_i32 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %0 = arith.cmpi ne, %c1_i32, %c0_i32 : i32
    cf.cond_br %0, ^bb3(%cst : f64), ^bb4(%cst : f64)
  ^bb2(%1: f64):  // pred: ^bb3
    return %1 : f64
  ^bb3(%2: f64):  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2(%2 : f64)
  ^bb4(%3: f64):  // pred: ^bb1
    %4 = "wasm.neg"(%cst) : (f64) -> f64
    cf.br ^bb3(%4 : f64)
  }
  func.func public @"as-block-first"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb3, ^bb4
  ^bb2(%3: i32):  // 2 preds: ^bb3, ^bb4
    return %3 : i32
  ^bb3:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    cf.br ^bb2(%c3_i32 : i32)
  ^bb4:  // pred: ^bb1
    %c2_i32 = arith.constant 2 : i32
    cf.br ^bb2(%c2_i32 : i32)
  }
  func.func public @"as-block-mid"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb3, ^bb4
  ^bb2(%3: i32):  // 2 preds: ^bb3, ^bb4
    return %3 : i32
  ^bb3:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    cf.br ^bb2(%c3_i32 : i32)
  ^bb4:  // pred: ^bb1
    %c2_i32 = arith.constant 2 : i32
    cf.br ^bb2(%c2_i32 : i32)
  }
  func.func public @"as-block-last"(%arg0: !llvm.ptr, %arg1: i32) attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    cf.br ^bb3
  }
  func.func public @"as-block-first-value"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c10_i32 = arith.constant 10 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb3(%c10_i32 : i32), ^bb4(%c10_i32 : i32)
  ^bb2(%3: i32):  // 2 preds: ^bb3, ^bb4
    return %3 : i32
  ^bb3(%4: i32):  // pred: ^bb1
    cf.br ^bb2(%4 : i32)
  ^bb4(%5: i32):  // pred: ^bb1
    %c11_i32 = arith.constant 11 : i32
    cf.br ^bb2(%c11_i32 : i32)
  }
  func.func public @"as-block-mid-value"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c20_i32 = arith.constant 20 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb3(%c20_i32 : i32), ^bb4(%c20_i32 : i32)
  ^bb2(%3: i32):  // 2 preds: ^bb3, ^bb4
    return %3 : i32
  ^bb3(%4: i32):  // pred: ^bb1
    cf.br ^bb2(%4 : i32)
  ^bb4(%5: i32):  // pred: ^bb1
    %c21_i32 = arith.constant 21 : i32
    cf.br ^bb2(%c21_i32 : i32)
  }
  func.func public @"as-block-last-value"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c11_i32 = arith.constant 11 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb3(%c11_i32 : i32), ^bb4(%c11_i32 : i32)
  ^bb2(%3: i32):  // pred: ^bb3
    return %3 : i32
  ^bb3(%4: i32):  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2(%4 : i32)
  ^bb4(%5: i32):  // pred: ^bb1
    cf.br ^bb3(%c11_i32 : i32)
  }
  func.func public @"as-loop-first"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb5
  ^bb2(%1: i32):  // 2 preds: ^bb3, ^bb6
    return %1 : i32
  ^bb3:  // 2 preds: ^bb4, ^bb5
    %c3_i32 = arith.constant 3 : i32
    cf.br ^bb2(%c3_i32 : i32)
  ^bb4:  // no predecessors
    cf.br ^bb3
  ^bb5:  // pred: ^bb1
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %3 = arith.cmpi ne, %2, %c0_i32 : i32
    cf.cond_br %3, ^bb3, ^bb6
  ^bb6:  // pred: ^bb5
    %c2_i32 = arith.constant 2 : i32
    cf.br ^bb2(%c2_i32 : i32)
  }
  func.func public @"as-loop-mid"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb5
  ^bb2(%1: i32):  // 2 preds: ^bb3, ^bb6
    return %1 : i32
  ^bb3:  // 2 preds: ^bb4, ^bb5
    %c4_i32 = arith.constant 4 : i32
    cf.br ^bb2(%c4_i32 : i32)
  ^bb4:  // no predecessors
    cf.br ^bb3
  ^bb5:  // pred: ^bb1
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %3 = arith.cmpi ne, %2, %c0_i32 : i32
    cf.cond_br %3, ^bb3, ^bb6
  ^bb6:  // pred: ^bb5
    %c2_i32 = arith.constant 2 : i32
    cf.br ^bb2(%c2_i32 : i32)
  }
  func.func public @"as-loop-last"(%arg0: !llvm.ptr, %arg1: i32) attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb4
  ^bb2:  // 2 preds: ^bb3, ^bb4
    return
  ^bb3:  // pred: ^bb5
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb2, ^bb5
  ^bb5:  // pred: ^bb4
    cf.br ^bb3
  }
  func.func public @"as-br-value"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %c0_i32 = arith.constant 0 : i32
    %0 = arith.cmpi ne, %c2_i32, %c0_i32 : i32
    cf.cond_br %0, ^bb3(%c1_i32 : i32), ^bb4(%c1_i32 : i32)
  ^bb2(%1: i32):  // pred: ^bb3
    return %1 : i32
  ^bb3(%2: i32):  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2(%2 : i32)
  ^bb4(%3: i32):  // pred: ^bb1
    cf.br ^bb3(%c1_i32 : i32)
  }
  func.func public @"as-br_if-cond"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %0 = arith.cmpi ne, %c1_i32_0, %c0_i32 : i32
    cf.cond_br %0, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 3 preds: ^bb1, ^bb4, ^bb5
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %c0_i32_1 = arith.constant 0 : i32
    %1 = arith.cmpi ne, %c1_i32, %c0_i32_1 : i32
    cf.cond_br %1, ^bb3, ^bb5
  ^bb5:  // pred: ^bb4
    cf.br ^bb3
  }
  func.func public @"as-br_if-value"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %c0_i32 = arith.constant 0 : i32
    %0 = arith.cmpi ne, %c2_i32, %c0_i32 : i32
    cf.cond_br %0, ^bb3(%c1_i32 : i32), ^bb4(%c1_i32 : i32)
  ^bb2(%1: i32):  // pred: ^bb3
    return %1 : i32
  ^bb3(%2: i32):  // 3 preds: ^bb1, ^bb4, ^bb5
    cf.br ^bb2(%2 : i32)
  ^bb4(%3: i32):  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    %c0_i32_0 = arith.constant 0 : i32
    %4 = arith.cmpi ne, %c3_i32, %c0_i32_0 : i32
    cf.cond_br %4, ^bb3(%c1_i32 : i32), ^bb5(%c1_i32 : i32)
  ^bb5(%5: i32):  // pred: ^bb4
    %c4_i32 = arith.constant 4 : i32
    cf.br ^bb3(%c4_i32 : i32)
  }
  func.func public @"as-br_if-value-cond"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2_i32 = arith.constant 2 : i32
    %c1_i32 = arith.constant 1 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb3(%c1_i32 : i32), ^bb4(%c1_i32 : i32)
  ^bb2(%3: i32):  // pred: ^bb3
    return %3 : i32
  ^bb3(%4: i32):  // 3 preds: ^bb1, ^bb4, ^bb5
    cf.br ^bb2(%4 : i32)
  ^bb4(%5: i32):  // pred: ^bb1
    %c0_i32_0 = arith.constant 0 : i32
    %6 = arith.cmpi ne, %c1_i32, %c0_i32_0 : i32
    cf.cond_br %6, ^bb3(%c2_i32 : i32), ^bb5(%c2_i32 : i32)
  ^bb5(%7: i32):  // pred: ^bb4
    %c4_i32 = arith.constant 4 : i32
    cf.br ^bb3(%c4_i32 : i32)
  }
  func.func public @"as-br_table-index"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %c0_i32 = arith.constant 0 : i32
    %0 = arith.cmpi ne, %c2_i32, %c0_i32 : i32
    cf.cond_br %0, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 4 preds: ^bb1, ^bb4, ^bb4, ^bb4
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    cf.switch %c1_i32 : i32, [
      default: ^bb3,
      0: ^bb3,
      1: ^bb3
    ]
  }
  func.func public @"as-br_table-value"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %c0_i32 = arith.constant 0 : i32
    %0 = arith.cmpi ne, %c2_i32, %c0_i32 : i32
    cf.cond_br %0, ^bb3(%c1_i32 : i32), ^bb4(%c1_i32 : i32)
  ^bb2(%1: i32):  // pred: ^bb3
    return %1 : i32
  ^bb3(%2: i32):  // 4 preds: ^bb1, ^bb4, ^bb4, ^bb4
    cf.br ^bb2(%2 : i32)
  ^bb4(%3: i32):  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    cf.switch %c3_i32 : i32, [
      default: ^bb3(%c1_i32 : i32),
      0: ^bb3(%c1_i32 : i32),
      1: ^bb3(%c1_i32 : i32)
    ]
  }
  func.func public @"as-br_table-value-index"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2_i32 = arith.constant 2 : i32
    %c1_i32 = arith.constant 1 : i32
    %c3_i32 = arith.constant 3 : i32
    %c0_i32 = arith.constant 0 : i32
    %0 = arith.cmpi ne, %c3_i32, %c0_i32 : i32
    cf.cond_br %0, ^bb3(%c1_i32 : i32), ^bb4(%c1_i32 : i32)
  ^bb2(%1: i32):  // pred: ^bb3
    return %1 : i32
  ^bb3(%2: i32):  // 3 preds: ^bb1, ^bb4, ^bb4
    cf.br ^bb2(%2 : i32)
  ^bb4(%3: i32):  // pred: ^bb1
    cf.switch %c1_i32 : i32, [
      default: ^bb3(%c2_i32 : i32),
      0: ^bb3(%c2_i32 : i32)
    ]
  }
  func.func public @"as-return-value"(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i64 = arith.constant 1 : i64
    %c2_i32 = arith.constant 2 : i32
    %c0_i32 = arith.constant 0 : i32
    %0 = arith.cmpi ne, %c2_i32, %c0_i32 : i32
    cf.cond_br %0, ^bb3(%c1_i64 : i64), ^bb4(%c1_i64 : i64)
  ^bb2(%1: i64):  // 2 preds: ^bb3, ^bb4
    return %1 : i64
  ^bb3(%2: i64):  // pred: ^bb1
    cf.br ^bb2(%2 : i64)
  ^bb4(%3: i64):  // pred: ^bb1
    cf.br ^bb2(%c1_i64 : i64)
  }
  func.func public @"as-if-cond"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb3(%c1_i32 : i32), ^bb4(%c1_i32 : i32)
  ^bb2(%3: i32):  // pred: ^bb3
    return %3 : i32
  ^bb3(%4: i32):  // 2 preds: ^bb1, ^bb7
    cf.br ^bb2(%4 : i32)
  ^bb4(%5: i32):  // pred: ^bb1
    %c0_i32_0 = arith.constant 0 : i32
    %6 = arith.cmpi ne, %c1_i32, %c0_i32_0 : i32
    cf.cond_br %6, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    %c2_i32 = arith.constant 2 : i32
    cf.br ^bb7(%c2_i32 : i32)
  ^bb6:  // pred: ^bb4
    %c3_i32 = arith.constant 3 : i32
    cf.br ^bb7(%c3_i32 : i32)
  ^bb7(%7: i32):  // 2 preds: ^bb5, ^bb6
    cf.br ^bb3(%7 : i32)
  }
  func.func public @"as-if-then"(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %3 = arith.cmpi ne, %2, %c0_i32 : i32
    cf.cond_br %3, ^bb4, ^bb5
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb4, ^bb6
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %4 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_1 = arith.constant 0 : i32
    %5 = arith.cmpi ne, %4, %c0_i32_1 : i32
    cf.cond_br %5, ^bb3, ^bb7
  ^bb5:  // pred: ^bb1
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    cf.br ^bb6
  ^bb6:  // 2 preds: ^bb5, ^bb7
    cf.br ^bb3
  ^bb7:  // pred: ^bb4
    cf.br ^bb6
  }
  func.func public @"as-if-else"(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %3 = arith.cmpi ne, %2, %c0_i32 : i32
    cf.cond_br %3, ^bb4, ^bb5
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb5, ^bb6
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    cf.br ^bb6
  ^bb5:  // pred: ^bb1
    %4 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_1 = arith.constant 0 : i32
    %5 = arith.cmpi ne, %4, %c0_i32_1 : i32
    cf.cond_br %5, ^bb3, ^bb7
  ^bb6:  // 2 preds: ^bb4, ^bb7
    cf.br ^bb3
  ^bb7:  // pred: ^bb5
    cf.br ^bb6
  }
  func.func public @"as-select-first"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i32 = arith.constant 3 : i32
    %c10_i32 = arith.constant 10 : i32
    %c0_i32 = arith.constant 0 : i32
    %1 = arith.cmpi ne, %c10_i32, %c0_i32 : i32
    cf.cond_br %1, ^bb3(%c3_i32 : i32), ^bb4(%c3_i32 : i32)
  ^bb2(%2: i32):  // pred: ^bb3
    return %2 : i32
  ^bb3(%3: i32):  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2(%3 : i32)
  ^bb4(%4: i32):  // pred: ^bb1
    %c2_i32 = arith.constant 2 : i32
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %6 = "wasm.select"(%c3_i32, %c2_i32, %5) : (i32, i32, i32) -> i32
    cf.br ^bb3(%6 : i32)
  }
  func.func public @"as-select-second"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c3_i32 = arith.constant 3 : i32
    %c10_i32 = arith.constant 10 : i32
    %c0_i32 = arith.constant 0 : i32
    %1 = arith.cmpi ne, %c10_i32, %c0_i32 : i32
    cf.cond_br %1, ^bb3(%c3_i32 : i32), ^bb4(%c3_i32 : i32)
  ^bb2(%2: i32):  // pred: ^bb3
    return %2 : i32
  ^bb3(%3: i32):  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2(%3 : i32)
  ^bb4(%4: i32):  // pred: ^bb1
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %6 = "wasm.select"(%c1_i32, %c3_i32, %5) : (i32, i32, i32) -> i32
    cf.br ^bb3(%6 : i32)
  }
  func.func public @"as-select-cond"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %c3_i32 = arith.constant 3 : i32
    %c10_i32 = arith.constant 10 : i32
    %c0_i32 = arith.constant 0 : i32
    %0 = arith.cmpi ne, %c10_i32, %c0_i32 : i32
    cf.cond_br %0, ^bb3(%c3_i32 : i32), ^bb4(%c3_i32 : i32)
  ^bb2(%1: i32):  // pred: ^bb3
    return %1 : i32
  ^bb3(%2: i32):  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2(%2 : i32)
  ^bb4(%3: i32):  // pred: ^bb1
    %4 = "wasm.select"(%c1_i32, %c2_i32, %c3_i32) : (i32, i32, i32) -> i32
    cf.br ^bb3(%4 : i32)
  }
  func.func @f(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c-1_i32 = arith.constant -1 : i32
    cf.br ^bb2(%c-1_i32 : i32)
  ^bb2(%3: i32):  // pred: ^bb1
    return %3 : i32
  }
  func.func public @"as-call-first"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c12_i32 = arith.constant 12 : i32
    %c1_i32 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %0 = arith.cmpi ne, %c1_i32, %c0_i32 : i32
    cf.cond_br %0, ^bb3(%c12_i32 : i32), ^bb4(%c12_i32 : i32)
  ^bb2(%1: i32):  // pred: ^bb3
    return %1 : i32
  ^bb3(%2: i32):  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2(%2 : i32)
  ^bb4(%3: i32):  // pred: ^bb1
    %c2_i32 = arith.constant 2 : i32
    %c3_i32 = arith.constant 3 : i32
    %4 = call @f(%arg0, %c12_i32, %c2_i32, %c3_i32) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb3(%4 : i32)
  }
  func.func public @"as-call-mid"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c13_i32 = arith.constant 13 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %0 = arith.cmpi ne, %c1_i32_0, %c0_i32 : i32
    cf.cond_br %0, ^bb3(%c13_i32 : i32), ^bb4(%c13_i32 : i32)
  ^bb2(%1: i32):  // pred: ^bb3
    return %1 : i32
  ^bb3(%2: i32):  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2(%2 : i32)
  ^bb4(%3: i32):  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    %4 = call @f(%arg0, %c1_i32, %c13_i32, %c3_i32) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb3(%4 : i32)
  }
  func.func public @"as-call-last"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %c14_i32 = arith.constant 14 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %0 = arith.cmpi ne, %c1_i32_0, %c0_i32 : i32
    cf.cond_br %0, ^bb3(%c14_i32 : i32), ^bb4(%c14_i32 : i32)
  ^bb2(%1: i32):  // pred: ^bb3
    return %1 : i32
  ^bb3(%2: i32):  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2(%2 : i32)
  ^bb4(%3: i32):  // pred: ^bb1
    %4 = call @f(%arg0, %c1_i32, %c2_i32, %c14_i32) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb3(%4 : i32)
  }
  func.func @func(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %3 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @"as-call_indirect-func"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[40] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[48] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c4_i32 = arith.constant 4 : i32
    %c10_i32 = arith.constant 10 : i32
    %c0_i32 = arith.constant 0 : i32
    %6 = arith.cmpi ne, %c10_i32, %c0_i32 : i32
    cf.cond_br %6, ^bb3(%c4_i32 : i32), ^bb4(%c4_i32 : i32)
  ^bb2(%7: i32):  // pred: ^bb3
    return %7 : i32
  ^bb3(%8: i32):  // 2 preds: ^bb1, ^bb9
    cf.br ^bb2(%8 : i32)
  ^bb4(%9: i32):  // pred: ^bb1
    %c1_i32 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %c0_i32_0 = arith.constant 0 : i32
    %10 = arith.cmpi ult, %c0_i32_0, %5 : i32
    cf.cond_br %10, ^bb5, ^bb6
  ^bb5:  // 2 preds: ^bb4, ^bb6
    %11 = llvm.getelementptr %4[%c0_i32_0] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.load %12 : !llvm.ptr -> i32
    %c0_i32_1 = arith.constant 0 : i32
    %14 = arith.cmpi eq, %13, %c0_i32_1 : i32
    cf.cond_br %14, ^bb8, ^bb7
  ^bb6:  // pred: ^bb4
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 3 preds: ^bb5, ^bb8, ^bb10
    %15 = llvm.getelementptr %12[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %12[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.getelementptr %12[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %18 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.load %16 : !llvm.ptr -> i32
    %20 = llvm.load %17 : !llvm.ptr -> !llvm.ptr
    %21 = llvm.load %18 : !llvm.ptr -> i32
    %c0_i32_2 = arith.constant 0 : i32
    %22 = arith.cmpi eq, %21, %c0_i32_2 : i32
    %23 = arith.cmpi ne, %1, %19 : i32
    %24 = arith.ori %22, %23 : i1
    cf.cond_br %24, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c4_i32_3 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_3) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // pred: ^bb7
    %25 = llvm.call %18(%20, %c4_i32, %c1_i32, %c2_i32) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb3(%25 : i32)
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb7
  }
  func.func public @"as-call_indirect-first"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[40] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[48] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c4_i32 = arith.constant 4 : i32
    %c10_i32 = arith.constant 10 : i32
    %c0_i32 = arith.constant 0 : i32
    %6 = arith.cmpi ne, %c10_i32, %c0_i32 : i32
    cf.cond_br %6, ^bb3(%c4_i32 : i32), ^bb4(%c4_i32 : i32)
  ^bb2(%7: i32):  // pred: ^bb3
    return %7 : i32
  ^bb3(%8: i32):  // 2 preds: ^bb1, ^bb9
    cf.br ^bb2(%8 : i32)
  ^bb4(%9: i32):  // pred: ^bb1
    %c2_i32 = arith.constant 2 : i32
    %c0_i32_0 = arith.constant 0 : i32
    %10 = arith.cmpi ult, %c0_i32_0, %5 : i32
    cf.cond_br %10, ^bb5, ^bb6
  ^bb5:  // 2 preds: ^bb4, ^bb6
    %11 = llvm.getelementptr %4[%c0_i32_0] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.load %12 : !llvm.ptr -> i32
    %c0_i32_1 = arith.constant 0 : i32
    %14 = arith.cmpi eq, %13, %c0_i32_1 : i32
    cf.cond_br %14, ^bb8, ^bb7
  ^bb6:  // pred: ^bb4
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 3 preds: ^bb5, ^bb8, ^bb10
    %15 = llvm.getelementptr %12[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %12[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.getelementptr %12[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %18 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.load %16 : !llvm.ptr -> i32
    %20 = llvm.load %17 : !llvm.ptr -> !llvm.ptr
    %21 = llvm.load %18 : !llvm.ptr -> i32
    %c0_i32_2 = arith.constant 0 : i32
    %22 = arith.cmpi eq, %21, %c0_i32_2 : i32
    %23 = arith.cmpi ne, %1, %19 : i32
    %24 = arith.ori %22, %23 : i1
    cf.cond_br %24, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c4_i32_3 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_3) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // pred: ^bb7
    %25 = llvm.call %18(%20, %c1_i32, %c4_i32, %c2_i32) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb3(%25 : i32)
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb7
  }
  func.func public @"as-call_indirect-mid"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[40] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[48] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %c4_i32 = arith.constant 4 : i32
    %c10_i32 = arith.constant 10 : i32
    %c0_i32 = arith.constant 0 : i32
    %6 = arith.cmpi ne, %c10_i32, %c0_i32 : i32
    cf.cond_br %6, ^bb3(%c4_i32 : i32), ^bb4(%c4_i32 : i32)
  ^bb2(%7: i32):  // pred: ^bb3
    return %7 : i32
  ^bb3(%8: i32):  // 2 preds: ^bb1, ^bb9
    cf.br ^bb2(%8 : i32)
  ^bb4(%9: i32):  // pred: ^bb1
    %c0_i32_0 = arith.constant 0 : i32
    %10 = arith.cmpi ult, %c0_i32_0, %5 : i32
    cf.cond_br %10, ^bb5, ^bb6
  ^bb5:  // 2 preds: ^bb4, ^bb6
    %11 = llvm.getelementptr %4[%c0_i32_0] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.load %12 : !llvm.ptr -> i32
    %c0_i32_1 = arith.constant 0 : i32
    %14 = arith.cmpi eq, %13, %c0_i32_1 : i32
    cf.cond_br %14, ^bb8, ^bb7
  ^bb6:  // pred: ^bb4
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 3 preds: ^bb5, ^bb8, ^bb10
    %15 = llvm.getelementptr %12[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %12[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.getelementptr %12[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %18 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.load %16 : !llvm.ptr -> i32
    %20 = llvm.load %17 : !llvm.ptr -> !llvm.ptr
    %21 = llvm.load %18 : !llvm.ptr -> i32
    %c0_i32_2 = arith.constant 0 : i32
    %22 = arith.cmpi eq, %21, %c0_i32_2 : i32
    %23 = arith.cmpi ne, %1, %19 : i32
    %24 = arith.ori %22, %23 : i1
    cf.cond_br %24, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c4_i32_3 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_3) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // pred: ^bb7
    %25 = llvm.call %18(%20, %c1_i32, %c2_i32, %c4_i32) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb3(%25 : i32)
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb7
  }
  func.func public @"as-call_indirect-last"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[40] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[48] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %c3_i32 = arith.constant 3 : i32
    %c4_i32 = arith.constant 4 : i32
    %c10_i32 = arith.constant 10 : i32
    %c0_i32 = arith.constant 0 : i32
    %6 = arith.cmpi ne, %c10_i32, %c0_i32 : i32
    cf.cond_br %6, ^bb3(%c4_i32 : i32), ^bb4(%c4_i32 : i32)
  ^bb2(%7: i32):  // pred: ^bb3
    return %7 : i32
  ^bb3(%8: i32):  // 2 preds: ^bb1, ^bb9
    cf.br ^bb2(%8 : i32)
  ^bb4(%9: i32):  // pred: ^bb1
    %10 = arith.cmpi ult, %c4_i32, %5 : i32
    cf.cond_br %10, ^bb5, ^bb6
  ^bb5:  // 2 preds: ^bb4, ^bb6
    %11 = llvm.getelementptr %4[%c4_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.load %12 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %14 = arith.cmpi eq, %13, %c0_i32_0 : i32
    cf.cond_br %14, ^bb8, ^bb7
  ^bb6:  // pred: ^bb4
    %c3_i32_1 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_1) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 3 preds: ^bb5, ^bb8, ^bb10
    %15 = llvm.getelementptr %12[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %12[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.getelementptr %12[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %18 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.load %16 : !llvm.ptr -> i32
    %20 = llvm.load %17 : !llvm.ptr -> !llvm.ptr
    %21 = llvm.load %18 : !llvm.ptr -> i32
    %c0_i32_2 = arith.constant 0 : i32
    %22 = arith.cmpi eq, %21, %c0_i32_2 : i32
    %23 = arith.cmpi ne, %1, %19 : i32
    %24 = arith.ori %22, %23 : i1
    cf.cond_br %24, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c4_i32_3 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_3) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // pred: ^bb7
    %25 = llvm.call %18(%20, %c1_i32, %c2_i32, %c3_i32) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb3(%25 : i32)
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb7
  }
  func.func public @"as-local.set-value"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c17_i32 = arith.constant 17 : i32
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_1 = arith.constant 0 : i32
    %3 = arith.cmpi ne, %2, %c0_i32_1 : i32
    cf.cond_br %3, ^bb3(%c17_i32 : i32), ^bb4(%c17_i32 : i32)
  ^bb2(%4: i32):  // pred: ^bb3
    return %4 : i32
  ^bb3(%5: i32):  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2(%5 : i32)
  ^bb4(%6: i32):  // pred: ^bb1
    llvm.store %c17_i32, %0 : i32, !llvm.ptr
    %c-1_i32 = arith.constant -1 : i32
    cf.br ^bb3(%c-1_i32 : i32)
  }
  func.func public @"as-local.tee-value"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb3(%c1_i32 : i32), ^bb4(%c1_i32 : i32)
  ^bb2(%3: i32):  // 2 preds: ^bb3, ^bb4
    return %3 : i32
  ^bb3(%4: i32):  // pred: ^bb1
    cf.br ^bb2(%4 : i32)
  ^bb4(%5: i32):  // pred: ^bb1
    llvm.store %c1_i32, %0 : i32, !llvm.ptr
    %c-1_i32 = arith.constant -1 : i32
    cf.br ^bb2(%c-1_i32 : i32)
  }
  func.func public @"as-global.set-value"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %3 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %4 = arith.cmpi ne, %3, %c0_i32 : i32
    cf.cond_br %4, ^bb3(%c1_i32 : i32), ^bb4(%c1_i32 : i32)
  ^bb2(%5: i32):  // 2 preds: ^bb3, ^bb4
    return %5 : i32
  ^bb3(%6: i32):  // pred: ^bb1
    cf.br ^bb2(%6 : i32)
  ^bb4(%7: i32):  // pred: ^bb1
    llvm.store %c1_i32, %2 : i32, !llvm.ptr
    %c-1_i32 = arith.constant -1 : i32
    cf.br ^bb2(%c-1_i32 : i32)
  }
  func.func public @"as-load-address"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[56] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %3 = arith.cmpi ne, %c1_i32_0, %c0_i32 : i32
    cf.cond_br %3, ^bb3(%c1_i32 : i32), ^bb4(%c1_i32 : i32)
  ^bb2(%4: i32):  // pred: ^bb3
    return %4 : i32
  ^bb3(%5: i32):  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2(%5 : i32)
  ^bb4(%6: i32):  // pred: ^bb1
    %c0_i64 = arith.constant 0 : i64
    %7 = arith.extui %c1_i32 : i32 to i64
    %8 = arith.addi %7, %c0_i64 : i64
    %9 = llvm.getelementptr %2[%8] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %10 = llvm.load %9 : !llvm.ptr -> i32
    cf.br ^bb3(%10 : i32)
  }
  func.func public @"as-loadN-address"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[56] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c30_i32 = arith.constant 30 : i32
    %c1_i32 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %3 = arith.cmpi ne, %c1_i32, %c0_i32 : i32
    cf.cond_br %3, ^bb3(%c30_i32 : i32), ^bb4(%c30_i32 : i32)
  ^bb2(%4: i32):  // pred: ^bb3
    return %4 : i32
  ^bb3(%5: i32):  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2(%5 : i32)
  ^bb4(%6: i32):  // pred: ^bb1
    %c0_i64 = arith.constant 0 : i64
    %7 = arith.extui %c30_i32 : i32 to i64
    %8 = arith.addi %7, %c0_i64 : i64
    %9 = llvm.getelementptr %2[%8] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %10 = llvm.load %9 : !llvm.ptr -> i8
    %11 = arith.extui %10 : i8 to i32
    cf.br ^bb3(%11 : i32)
  }
  func.func public @"as-store-address"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[56] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c30_i32 = arith.constant 30 : i32
    %c1_i32 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %3 = arith.cmpi ne, %c1_i32, %c0_i32 : i32
    cf.cond_br %3, ^bb3(%c30_i32 : i32), ^bb4(%c30_i32 : i32)
  ^bb2(%4: i32):  // pred: ^bb3
    return %4 : i32
  ^bb3(%5: i32):  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2(%5 : i32)
  ^bb4(%6: i32):  // pred: ^bb1
    %c7_i32 = arith.constant 7 : i32
    %c0_i64 = arith.constant 0 : i64
    %7 = arith.extui %c30_i32 : i32 to i64
    %8 = arith.addi %7, %c0_i64 : i64
    %9 = llvm.getelementptr %2[%8] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    llvm.store %c7_i32, %9 : i32, !llvm.ptr
    %c-1_i32 = arith.constant -1 : i32
    cf.br ^bb3(%c-1_i32 : i32)
  }
  func.func public @"as-store-value"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[56] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2_i32 = arith.constant 2 : i32
    %c31_i32 = arith.constant 31 : i32
    %c1_i32 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %3 = arith.cmpi ne, %c1_i32, %c0_i32 : i32
    cf.cond_br %3, ^bb3(%c31_i32 : i32), ^bb4(%c31_i32 : i32)
  ^bb2(%4: i32):  // pred: ^bb3
    return %4 : i32
  ^bb3(%5: i32):  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2(%5 : i32)
  ^bb4(%6: i32):  // pred: ^bb1
    %c0_i64 = arith.constant 0 : i64
    %7 = arith.extui %c2_i32 : i32 to i64
    %8 = arith.addi %7, %c0_i64 : i64
    %9 = llvm.getelementptr %2[%8] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    llvm.store %c31_i32, %9 : i32, !llvm.ptr
    %c-1_i32 = arith.constant -1 : i32
    cf.br ^bb3(%c-1_i32 : i32)
  }
  func.func public @"as-storeN-address"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[56] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c32_i32 = arith.constant 32 : i32
    %c1_i32 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %3 = arith.cmpi ne, %c1_i32, %c0_i32 : i32
    cf.cond_br %3, ^bb3(%c32_i32 : i32), ^bb4(%c32_i32 : i32)
  ^bb2(%4: i32):  // pred: ^bb3
    return %4 : i32
  ^bb3(%5: i32):  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2(%5 : i32)
  ^bb4(%6: i32):  // pred: ^bb1
    %c7_i32 = arith.constant 7 : i32
    %c0_i64 = arith.constant 0 : i64
    %7 = arith.extui %c32_i32 : i32 to i64
    %8 = arith.addi %7, %c0_i64 : i64
    %9 = llvm.getelementptr %2[%8] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %10 = arith.trunci %c7_i32 : i32 to i8
    llvm.store %10, %9 : i8, !llvm.ptr
    %c-1_i32 = arith.constant -1 : i32
    cf.br ^bb3(%c-1_i32 : i32)
  }
  func.func public @"as-storeN-value"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[56] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2_i32 = arith.constant 2 : i32
    %c33_i32 = arith.constant 33 : i32
    %c1_i32 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %3 = arith.cmpi ne, %c1_i32, %c0_i32 : i32
    cf.cond_br %3, ^bb3(%c33_i32 : i32), ^bb4(%c33_i32 : i32)
  ^bb2(%4: i32):  // pred: ^bb3
    return %4 : i32
  ^bb3(%5: i32):  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2(%5 : i32)
  ^bb4(%6: i32):  // pred: ^bb1
    %c0_i64 = arith.constant 0 : i64
    %7 = arith.extui %c2_i32 : i32 to i64
    %8 = arith.addi %7, %c0_i64 : i64
    %9 = llvm.getelementptr %2[%8] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %10 = arith.trunci %c33_i32 : i32 to i16
    llvm.store %10, %9 : i16, !llvm.ptr
    %c-1_i32 = arith.constant -1 : i32
    cf.br ^bb3(%c-1_i32 : i32)
  }
  func.func public @"as-unary-operand"(%arg0: !llvm.ptr) -> f64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 4.6071824188000174E+18 : f64
    %c1_i32 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %0 = arith.cmpi ne, %c1_i32, %c0_i32 : i32
    cf.cond_br %0, ^bb3(%cst : f64), ^bb4(%cst : f64)
  ^bb2(%1: f64):  // pred: ^bb3
    return %1 : f64
  ^bb3(%2: f64):  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2(%2 : f64)
  ^bb4(%3: f64):  // pred: ^bb1
    %4 = "wasm.neg"(%cst) : (f64) -> f64
    cf.br ^bb3(%4 : f64)
  }
  func.func public @"as-binary-left"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %0 = arith.cmpi ne, %c1_i32_0, %c0_i32 : i32
    cf.cond_br %0, ^bb3(%c1_i32 : i32), ^bb4(%c1_i32 : i32)
  ^bb2(%1: i32):  // pred: ^bb3
    return %1 : i32
  ^bb3(%2: i32):  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2(%2 : i32)
  ^bb4(%3: i32):  // pred: ^bb1
    %c10_i32 = arith.constant 10 : i32
    %4 = "wasm.add"(%c1_i32, %c10_i32) : (i32, i32) -> i32
    cf.br ^bb3(%4 : i32)
  }
  func.func public @"as-binary-right"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c10_i32 = arith.constant 10 : i32
    %c1_i32 = arith.constant 1 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %0 = arith.cmpi ne, %c1_i32_0, %c0_i32 : i32
    cf.cond_br %0, ^bb3(%c1_i32 : i32), ^bb4(%c1_i32 : i32)
  ^bb2(%1: i32):  // pred: ^bb3
    return %1 : i32
  ^bb3(%2: i32):  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2(%2 : i32)
  ^bb4(%3: i32):  // pred: ^bb1
    %4 = "wasm.sub"(%c10_i32, %c1_i32) : (i32, i32) -> i32
    cf.br ^bb3(%4 : i32)
  }
  func.func public @"as-test-operand"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %c0_i32_0 = arith.constant 0 : i32
    %0 = arith.cmpi ne, %c1_i32, %c0_i32_0 : i32
    cf.cond_br %0, ^bb3(%c0_i32 : i32), ^bb4(%c0_i32 : i32)
  ^bb2(%1: i32):  // pred: ^bb3
    return %1 : i32
  ^bb3(%2: i32):  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2(%2 : i32)
  ^bb4(%3: i32):  // pred: ^bb1
    %4 = "wasm.eqz"(%c0_i32) : (i32) -> i32
    cf.br ^bb3(%4 : i32)
  }
  func.func public @"as-compare-left"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %0 = arith.cmpi ne, %c1_i32_0, %c0_i32 : i32
    cf.cond_br %0, ^bb3(%c1_i32 : i32), ^bb4(%c1_i32 : i32)
  ^bb2(%1: i32):  // pred: ^bb3
    return %1 : i32
  ^bb3(%2: i32):  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2(%2 : i32)
  ^bb4(%3: i32):  // pred: ^bb1
    %c10_i32 = arith.constant 10 : i32
    %4 = "wasm.leu"(%c1_i32, %c10_i32) : (i32, i32) -> i32
    cf.br ^bb3(%4 : i32)
  }
  func.func public @"as-compare-right"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c10_i32 = arith.constant 10 : i32
    %c1_i32 = arith.constant 1 : i32
    %c42_i32 = arith.constant 42 : i32
    %c0_i32 = arith.constant 0 : i32
    %0 = arith.cmpi ne, %c42_i32, %c0_i32 : i32
    cf.cond_br %0, ^bb3(%c1_i32 : i32), ^bb4(%c1_i32 : i32)
  ^bb2(%1: i32):  // pred: ^bb3
    return %1 : i32
  ^bb3(%2: i32):  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2(%2 : i32)
  ^bb4(%3: i32):  // pred: ^bb1
    %4 = "wasm.ne"(%c10_i32, %c1_i32) : (i32, i32) -> i32
    cf.br ^bb3(%4 : i32)
  }
  func.func public @"as-memory.grow-size"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %0 = arith.cmpi ne, %c1_i32_0, %c0_i32 : i32
    cf.cond_br %0, ^bb3(%c1_i32 : i32), ^bb4(%c1_i32 : i32)
  ^bb2(%1: i32):  // pred: ^bb3
    return %1 : i32
  ^bb3(%2: i32):  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2(%2 : i32)
  ^bb4(%3: i32):  // pred: ^bb1
    %c0_i32_1 = arith.constant 0 : i32
    %4 = call @dora_fn_wasm_memory_grow(%arg0, %c1_i32, %c0_i32_1) : (!llvm.ptr, i32, i32) -> i32
    cf.br ^bb3(%4 : i32)
  }
  func.func public @"nested-block-value"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %c4_i32 = arith.constant 4 : i32
    %c8_i32 = arith.constant 8 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb3(%c8_i32 : i32), ^bb5(%c8_i32 : i32)
  ^bb2(%3: i32):  // pred: ^bb3
    return %3 : i32
  ^bb3(%4: i32):  // 2 preds: ^bb1, ^bb4
    %5 = "wasm.add"(%c1_i32, %4) : (i32, i32) -> i32
    cf.br ^bb2(%5 : i32)
  ^bb4(%6: i32):  // pred: ^bb5
    %7 = "wasm.add"(%c4_i32, %6) : (i32, i32) -> i32
    cf.br ^bb3(%7 : i32)
  ^bb5(%8: i32):  // pred: ^bb1
    %c16_i32 = arith.constant 16 : i32
    cf.br ^bb4(%c16_i32 : i32)
  }
  func.func public @"nested-br-value"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %c8_i32 = arith.constant 8 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb3(%c8_i32 : i32), ^bb5(%c8_i32 : i32)
  ^bb2(%3: i32):  // pred: ^bb3
    return %3 : i32
  ^bb3(%4: i32):  // 2 preds: ^bb1, ^bb4
    %5 = "wasm.add"(%c1_i32, %4) : (i32, i32) -> i32
    cf.br ^bb2(%5 : i32)
  ^bb4(%6: i32):  // pred: ^bb5
    cf.br ^bb3(%6 : i32)
  ^bb5(%7: i32):  // pred: ^bb1
    %c4_i32 = arith.constant 4 : i32
    cf.br ^bb4(%c4_i32 : i32)
  }
  func.func public @"nested-br_if-value"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %c8_i32 = arith.constant 8 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb3(%c8_i32 : i32), ^bb5(%c8_i32 : i32)
  ^bb2(%3: i32):  // pred: ^bb3
    return %3 : i32
  ^bb3(%4: i32):  // 3 preds: ^bb1, ^bb4, ^bb6
    %5 = "wasm.add"(%c1_i32, %4) : (i32, i32) -> i32
    cf.br ^bb2(%5 : i32)
  ^bb4(%6: i32):  // pred: ^bb5
    %c1_i32_0 = arith.constant 1 : i32
    %c0_i32_1 = arith.constant 0 : i32
    %7 = arith.cmpi ne, %c1_i32_0, %c0_i32_1 : i32
    cf.cond_br %7, ^bb3(%6 : i32), ^bb6(%6 : i32)
  ^bb5(%8: i32):  // pred: ^bb1
    %c4_i32 = arith.constant 4 : i32
    cf.br ^bb4(%c4_i32 : i32)
  ^bb6(%9: i32):  // pred: ^bb4
    %c16_i32 = arith.constant 16 : i32
    cf.br ^bb3(%c16_i32 : i32)
  }
  func.func public @"nested-br_if-value-cond"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %c4_i32 = arith.constant 4 : i32
    %c8_i32 = arith.constant 8 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb3(%c8_i32 : i32), ^bb5(%c8_i32 : i32)
  ^bb2(%3: i32):  // pred: ^bb3
    return %3 : i32
  ^bb3(%4: i32):  // 3 preds: ^bb1, ^bb4, ^bb6
    %5 = "wasm.add"(%c1_i32, %4) : (i32, i32) -> i32
    cf.br ^bb2(%5 : i32)
  ^bb4(%6: i32):  // pred: ^bb5
    %c0_i32_0 = arith.constant 0 : i32
    %7 = arith.cmpi ne, %6, %c0_i32_0 : i32
    cf.cond_br %7, ^bb3(%c4_i32 : i32), ^bb6(%c4_i32 : i32)
  ^bb5(%8: i32):  // pred: ^bb1
    %c1_i32_1 = arith.constant 1 : i32
    cf.br ^bb4(%c1_i32_1 : i32)
  ^bb6(%9: i32):  // pred: ^bb4
    %c16_i32 = arith.constant 16 : i32
    cf.br ^bb3(%c16_i32 : i32)
  }
  func.func public @"nested-br_table-value"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %c8_i32 = arith.constant 8 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb3(%c8_i32 : i32), ^bb5(%c8_i32 : i32)
  ^bb2(%3: i32):  // pred: ^bb3
    return %3 : i32
  ^bb3(%4: i32):  // 2 preds: ^bb1, ^bb4
    %5 = "wasm.add"(%c1_i32, %4) : (i32, i32) -> i32
    cf.br ^bb2(%5 : i32)
  ^bb4(%6: i32):  // pred: ^bb5
    %c1_i32_0 = arith.constant 1 : i32
    cf.switch %c1_i32_0 : i32, [
      default: ^bb3(%6 : i32)
    ]
  ^bb5(%7: i32):  // pred: ^bb1
    %c4_i32 = arith.constant 4 : i32
    cf.br ^bb4(%c4_i32 : i32)
  }
  func.func public @"nested-br_table-value-index"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %c4_i32 = arith.constant 4 : i32
    %c8_i32 = arith.constant 8 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb3(%c8_i32 : i32), ^bb5(%c8_i32 : i32)
  ^bb2(%3: i32):  // pred: ^bb3
    return %3 : i32
  ^bb3(%4: i32):  // 2 preds: ^bb1, ^bb4
    %5 = "wasm.add"(%c1_i32, %4) : (i32, i32) -> i32
    cf.br ^bb2(%5 : i32)
  ^bb4(%6: i32):  // pred: ^bb5
    cf.switch %6 : i32, [
      default: ^bb3(%c4_i32 : i32)
    ]
  ^bb5(%7: i32):  // pred: ^bb1
    %c1_i32_0 = arith.constant 1 : i32
    cf.br ^bb4(%c1_i32_0 : i32)
  }
  func.func private @dora_fn_wasm_table_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_copy(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_fill(!llvm.ptr, i32, i32, !llvm.ptr, i32)
  func.func private @dora_fn_wasm_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_table_set(!llvm.ptr, i32, i32, !llvm.ptr)
  func.func private @dora_fn_wasm_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_imported_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_func_ref(!llvm.ptr, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_data_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_elem_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_raise_trap(i32)
}
