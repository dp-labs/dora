---
source: crates/dora-compiler/src/wasm/tests/conversion.rs
expression: op
snapshot_kind: text
---
module {
  func.func public @i32.no_fold_cmp_s_offset(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32 = arith.constant 1 : i32
    %3 = arith.addi %2, %c1_i32 : i32
    %4 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_1 = arith.constant 1 : i32
    %5 = arith.addi %4, %c1_i32_1 : i32
    %6 = arith.cmpi slt, %3, %5 : i32
    %7 = arith.extui %6 : i1 to i32
    cf.br ^bb2(%7 : i32)
  ^bb2(%8: i32):  // pred: ^bb1
    return %8 : i32
  }
  func.func public @i32.no_fold_cmp_u_offset(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32 = arith.constant 1 : i32
    %3 = arith.addi %2, %c1_i32 : i32
    %4 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_1 = arith.constant 1 : i32
    %5 = arith.addi %4, %c1_i32_1 : i32
    %6 = arith.cmpi ult, %3, %5 : i32
    %7 = arith.extui %6 : i1 to i32
    cf.br ^bb2(%7 : i32)
  ^bb2(%8: i32):  // pred: ^bb1
    return %8 : i32
  }
  func.func public @i64.no_fold_cmp_s_offset(%arg0: !llvm.ptr, %arg1: i64, %arg2: i64) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i64
    %c1_i64_1 = arith.constant 1 : i64
    %3 = arith.addi %2, %c1_i64_1 : i64
    %4 = llvm.load %1 : !llvm.ptr -> i64
    %c1_i64_2 = arith.constant 1 : i64
    %5 = arith.addi %4, %c1_i64_2 : i64
    %6 = arith.cmpi slt, %3, %5 : i64
    %7 = arith.extui %6 : i1 to i64
    %8 = arith.trunci %7 : i64 to i32
    cf.br ^bb2(%8 : i32)
  ^bb2(%9: i32):  // pred: ^bb1
    return %9 : i32
  }
  func.func public @i64.no_fold_cmp_u_offset(%arg0: !llvm.ptr, %arg1: i64, %arg2: i64) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i64
    %c1_i64_1 = arith.constant 1 : i64
    %3 = arith.addi %2, %c1_i64_1 : i64
    %4 = llvm.load %1 : !llvm.ptr -> i64
    %c1_i64_2 = arith.constant 1 : i64
    %5 = arith.addi %4, %c1_i64_2 : i64
    %6 = arith.cmpi ult, %3, %5 : i64
    %7 = arith.extui %6 : i1 to i64
    %8 = arith.trunci %7 : i64 to i32
    cf.br ^bb2(%8 : i32)
  ^bb2(%9: i32):  // pred: ^bb1
    return %9 : i32
  }
  func.func public @i64.no_fold_wrap_extend_s(%arg0: !llvm.ptr, %arg1: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i64
    %2 = arith.trunci %1 : i64 to i32
    %3 = arith.extsi %2 : i32 to i64
    cf.br ^bb2(%3 : i64)
  ^bb2(%4: i64):  // pred: ^bb1
    return %4 : i64
  }
  func.func public @i64.no_fold_wrap_extend_u(%arg0: !llvm.ptr, %arg1: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i64
    %2 = arith.trunci %1 : i64 to i32
    %3 = arith.extui %2 : i32 to i64
    cf.br ^bb2(%3 : i64)
  ^bb2(%4: i64):  // pred: ^bb1
    return %4 : i64
  }
  func.func public @i32.no_fold_shl_shr_s(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32 = arith.constant 1 : i32
    %c31_i32 = arith.constant 31 : i32
    %2 = arith.cmpi ule, %c1_i32, %c31_i32 : i32
    %3 = scf.if %2 -> (i32) {
      %7 = arith.shli %1, %c1_i32 : i32
      scf.yield %7 : i32
    } else {
      %c0_i32 = arith.constant 0 : i32
      scf.yield %c0_i32 : i32
    }
    %c1_i32_0 = arith.constant 1 : i32
    %c31_i32_1 = arith.constant 31 : i32
    %4 = arith.minui %c1_i32_0, %c31_i32_1 : i32
    %5 = arith.shrsi %3, %4 : i32
    cf.br ^bb2(%5 : i32)
  ^bb2(%6: i32):  // pred: ^bb1
    return %6 : i32
  }
  func.func public @i32.no_fold_shl_shr_u(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32 = arith.constant 1 : i32
    %c31_i32 = arith.constant 31 : i32
    %2 = arith.cmpi ule, %c1_i32, %c31_i32 : i32
    %3 = scf.if %2 -> (i32) {
      %7 = arith.shli %1, %c1_i32 : i32
      scf.yield %7 : i32
    } else {
      %c0_i32 = arith.constant 0 : i32
      scf.yield %c0_i32 : i32
    }
    %c1_i32_0 = arith.constant 1 : i32
    %c31_i32_1 = arith.constant 31 : i32
    %4 = arith.cmpi ule, %c1_i32_0, %c31_i32_1 : i32
    %5 = scf.if %4 -> (i32) {
      %7 = arith.shrui %3, %c1_i32_0 : i32
      scf.yield %7 : i32
    } else {
      %c0_i32 = arith.constant 0 : i32
      scf.yield %c0_i32 : i32
    }
    cf.br ^bb2(%5 : i32)
  ^bb2(%6: i32):  // pred: ^bb1
    return %6 : i32
  }
  func.func public @i64.no_fold_shl_shr_s(%arg0: !llvm.ptr, %arg1: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i64
    %c1_i64_0 = arith.constant 1 : i64
    %c63_i64 = arith.constant 63 : i64
    %2 = arith.cmpi ule, %c1_i64_0, %c63_i64 : i64
    %3 = scf.if %2 -> (i64) {
      %7 = arith.shli %1, %c1_i64_0 : i64
      scf.yield %7 : i64
    } else {
      %c0_i64 = arith.constant 0 : i64
      scf.yield %c0_i64 : i64
    }
    %c1_i64_1 = arith.constant 1 : i64
    %c63_i64_2 = arith.constant 63 : i64
    %4 = arith.minui %c1_i64_1, %c63_i64_2 : i64
    %5 = arith.shrsi %3, %4 : i64
    cf.br ^bb2(%5 : i64)
  ^bb2(%6: i64):  // pred: ^bb1
    return %6 : i64
  }
  func.func public @i64.no_fold_shl_shr_u(%arg0: !llvm.ptr, %arg1: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i64
    %c1_i64_0 = arith.constant 1 : i64
    %c63_i64 = arith.constant 63 : i64
    %2 = arith.cmpi ule, %c1_i64_0, %c63_i64 : i64
    %3 = scf.if %2 -> (i64) {
      %7 = arith.shli %1, %c1_i64_0 : i64
      scf.yield %7 : i64
    } else {
      %c0_i64 = arith.constant 0 : i64
      scf.yield %c0_i64 : i64
    }
    %c1_i64_1 = arith.constant 1 : i64
    %c63_i64_2 = arith.constant 63 : i64
    %4 = arith.cmpi ule, %c1_i64_1, %c63_i64_2 : i64
    %5 = scf.if %4 -> (i64) {
      %7 = arith.shrui %3, %c1_i64_1 : i64
      scf.yield %7 : i64
    } else {
      %c0_i64 = arith.constant 0 : i64
      scf.yield %c0_i64 : i64
    }
    cf.br ^bb2(%5 : i64)
  ^bb2(%6: i64):  // pred: ^bb1
    return %6 : i64
  }
  func.func public @i32.no_fold_div_s_mul(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c6_i32 = arith.constant 6 : i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi eq, %c6_i32, %c0_i32 : i32
    %3 = scf.if %2 -> (i32) {
      scf.yield %c0_i32 : i32
    } else {
      %c-2147483648_i32 = arith.constant -2147483648 : i32
      %6 = arith.cmpi eq, %1, %c-2147483648_i32 : i32
      %c-1_i32 = arith.constant -1 : i32
      %7 = arith.cmpi eq, %c6_i32, %c-1_i32 : i32
      %8 = arith.andi %6, %7 : i1
      %9 = arith.divsi %1, %c6_i32 : i32
      %10 = arith.select %8, %c-2147483648_i32, %9 : i32
      scf.yield %10 : i32
    }
    %c6_i32_0 = arith.constant 6 : i32
    %4 = arith.muli %3, %c6_i32_0 : i32
    cf.br ^bb2(%4 : i32)
  ^bb2(%5: i32):  // pred: ^bb1
    return %5 : i32
  }
  func.func public @i32.no_fold_div_u_mul(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c6_i32 = arith.constant 6 : i32
    %2 = arith.divui %1, %c6_i32 : i32
    %c0_i32 = arith.constant 0 : i32
    %3 = arith.cmpi eq, %c6_i32, %c0_i32 : i32
    %4 = arith.select %3, %c0_i32, %2 : i32
    %c6_i32_0 = arith.constant 6 : i32
    %5 = arith.muli %4, %c6_i32_0 : i32
    cf.br ^bb2(%5 : i32)
  ^bb2(%6: i32):  // pred: ^bb1
    return %6 : i32
  }
  func.func public @i64.no_fold_div_s_mul(%arg0: !llvm.ptr, %arg1: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i64
    %c6_i64 = arith.constant 6 : i64
    %c0_i64 = arith.constant 0 : i64
    %2 = arith.cmpi eq, %c6_i64, %c0_i64 : i64
    %3 = scf.if %2 -> (i64) {
      scf.yield %c0_i64 : i64
    } else {
      %c-9223372036854775808_i64 = arith.constant -9223372036854775808 : i64
      %6 = arith.cmpi eq, %1, %c-9223372036854775808_i64 : i64
      %c-1_i64 = arith.constant -1 : i64
      %7 = arith.cmpi eq, %c6_i64, %c-1_i64 : i64
      %8 = arith.andi %6, %7 : i1
      %9 = arith.divsi %1, %c6_i64 : i64
      %10 = arith.select %8, %c-9223372036854775808_i64, %9 : i64
      scf.yield %10 : i64
    }
    %c6_i64_0 = arith.constant 6 : i64
    %4 = arith.muli %3, %c6_i64_0 : i64
    cf.br ^bb2(%4 : i64)
  ^bb2(%5: i64):  // pred: ^bb1
    return %5 : i64
  }
  func.func public @i64.no_fold_div_u_mul(%arg0: !llvm.ptr, %arg1: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i64
    %c6_i64 = arith.constant 6 : i64
    %2 = arith.divui %1, %c6_i64 : i64
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.cmpi eq, %c6_i64, %c0_i64 : i64
    %4 = arith.select %3, %c0_i64, %2 : i64
    %c6_i64_0 = arith.constant 6 : i64
    %5 = arith.muli %4, %c6_i64_0 : i64
    cf.br ^bb2(%5 : i64)
  ^bb2(%6: i64):  // pred: ^bb1
    return %6 : i64
  }
  func.func public @i32.no_fold_div_s_self(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %3 = arith.cmpi eq, %2, %c0_i32 : i32
    %4 = scf.if %3 -> (i32) {
      scf.yield %c0_i32 : i32
    } else {
      %c-2147483648_i32 = arith.constant -2147483648 : i32
      %6 = arith.cmpi eq, %1, %c-2147483648_i32 : i32
      %c-1_i32 = arith.constant -1 : i32
      %7 = arith.cmpi eq, %2, %c-1_i32 : i32
      %8 = arith.andi %6, %7 : i1
      %9 = arith.divsi %1, %2 : i32
      %10 = arith.select %8, %c-2147483648_i32, %9 : i32
      scf.yield %10 : i32
    }
    cf.br ^bb2(%4 : i32)
  ^bb2(%5: i32):  // pred: ^bb1
    return %5 : i32
  }
  func.func public @i32.no_fold_div_u_self(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = arith.divui %1, %2 : i32
    %c0_i32 = arith.constant 0 : i32
    %4 = arith.cmpi eq, %2, %c0_i32 : i32
    %5 = arith.select %4, %c0_i32, %3 : i32
    cf.br ^bb2(%5 : i32)
  ^bb2(%6: i32):  // pred: ^bb1
    return %6 : i32
  }
  func.func public @i64.no_fold_div_s_self(%arg0: !llvm.ptr, %arg1: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i64
    %2 = llvm.load %0 : !llvm.ptr -> i64
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.cmpi eq, %2, %c0_i64 : i64
    %4 = scf.if %3 -> (i64) {
      scf.yield %c0_i64 : i64
    } else {
      %c-9223372036854775808_i64 = arith.constant -9223372036854775808 : i64
      %6 = arith.cmpi eq, %1, %c-9223372036854775808_i64 : i64
      %c-1_i64 = arith.constant -1 : i64
      %7 = arith.cmpi eq, %2, %c-1_i64 : i64
      %8 = arith.andi %6, %7 : i1
      %9 = arith.divsi %1, %2 : i64
      %10 = arith.select %8, %c-9223372036854775808_i64, %9 : i64
      scf.yield %10 : i64
    }
    cf.br ^bb2(%4 : i64)
  ^bb2(%5: i64):  // pred: ^bb1
    return %5 : i64
  }
  func.func public @i64.no_fold_div_u_self(%arg0: !llvm.ptr, %arg1: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i64
    %2 = llvm.load %0 : !llvm.ptr -> i64
    %3 = arith.divui %1, %2 : i64
    %c0_i64 = arith.constant 0 : i64
    %4 = arith.cmpi eq, %2, %c0_i64 : i64
    %5 = arith.select %4, %c0_i64, %3 : i64
    cf.br ^bb2(%5 : i64)
  ^bb2(%6: i64):  // pred: ^bb1
    return %6 : i64
  }
  func.func public @i32.no_fold_rem_s_self(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %3 = arith.cmpi eq, %2, %c0_i32 : i32
    %4 = scf.if %3 -> (i32) {
      scf.yield %c0_i32 : i32
    } else {
      %6 = arith.remsi %1, %2 : i32
      scf.yield %6 : i32
    }
    cf.br ^bb2(%4 : i32)
  ^bb2(%5: i32):  // pred: ^bb1
    return %5 : i32
  }
  func.func public @i32.no_fold_rem_u_self(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %3 = arith.cmpi eq, %2, %c0_i32 : i32
    %4 = scf.if %3 -> (i32) {
      scf.yield %c0_i32 : i32
    } else {
      %6 = arith.remui %1, %2 : i32
      scf.yield %6 : i32
    }
    cf.br ^bb2(%4 : i32)
  ^bb2(%5: i32):  // pred: ^bb1
    return %5 : i32
  }
  func.func public @i64.no_fold_rem_s_self(%arg0: !llvm.ptr, %arg1: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i64
    %2 = llvm.load %0 : !llvm.ptr -> i64
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.cmpi eq, %2, %c0_i64 : i64
    %4 = scf.if %3 -> (i64) {
      scf.yield %c0_i64 : i64
    } else {
      %6 = arith.remsi %1, %2 : i64
      scf.yield %6 : i64
    }
    cf.br ^bb2(%4 : i64)
  ^bb2(%5: i64):  // pred: ^bb1
    return %5 : i64
  }
  func.func public @i64.no_fold_rem_u_self(%arg0: !llvm.ptr, %arg1: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i64
    %2 = llvm.load %0 : !llvm.ptr -> i64
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.cmpi eq, %2, %c0_i64 : i64
    %4 = scf.if %3 -> (i64) {
      scf.yield %c0_i64 : i64
    } else {
      %6 = arith.remui %1, %2 : i64
      scf.yield %6 : i64
    }
    cf.br ^bb2(%4 : i64)
  ^bb2(%5: i64):  // pred: ^bb1
    return %5 : i64
  }
  func.func public @i32.no_fold_mul_div_s(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c6_i32 = arith.constant 6 : i32
    %2 = arith.muli %1, %c6_i32 : i32
    %c6_i32_0 = arith.constant 6 : i32
    %c0_i32 = arith.constant 0 : i32
    %3 = arith.cmpi eq, %c6_i32_0, %c0_i32 : i32
    %4 = scf.if %3 -> (i32) {
      scf.yield %c0_i32 : i32
    } else {
      %c-2147483648_i32 = arith.constant -2147483648 : i32
      %6 = arith.cmpi eq, %2, %c-2147483648_i32 : i32
      %c-1_i32 = arith.constant -1 : i32
      %7 = arith.cmpi eq, %c6_i32_0, %c-1_i32 : i32
      %8 = arith.andi %6, %7 : i1
      %9 = arith.divsi %2, %c6_i32_0 : i32
      %10 = arith.select %8, %c-2147483648_i32, %9 : i32
      scf.yield %10 : i32
    }
    cf.br ^bb2(%4 : i32)
  ^bb2(%5: i32):  // pred: ^bb1
    return %5 : i32
  }
  func.func public @i32.no_fold_mul_div_u(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c6_i32 = arith.constant 6 : i32
    %2 = arith.muli %1, %c6_i32 : i32
    %c6_i32_0 = arith.constant 6 : i32
    %3 = arith.divui %2, %c6_i32_0 : i32
    %c0_i32 = arith.constant 0 : i32
    %4 = arith.cmpi eq, %c6_i32_0, %c0_i32 : i32
    %5 = arith.select %4, %c0_i32, %3 : i32
    cf.br ^bb2(%5 : i32)
  ^bb2(%6: i32):  // pred: ^bb1
    return %6 : i32
  }
  func.func public @i64.no_fold_mul_div_s(%arg0: !llvm.ptr, %arg1: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i64
    %c6_i64 = arith.constant 6 : i64
    %2 = arith.muli %1, %c6_i64 : i64
    %c6_i64_0 = arith.constant 6 : i64
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.cmpi eq, %c6_i64_0, %c0_i64 : i64
    %4 = scf.if %3 -> (i64) {
      scf.yield %c0_i64 : i64
    } else {
      %c-9223372036854775808_i64 = arith.constant -9223372036854775808 : i64
      %6 = arith.cmpi eq, %2, %c-9223372036854775808_i64 : i64
      %c-1_i64 = arith.constant -1 : i64
      %7 = arith.cmpi eq, %c6_i64_0, %c-1_i64 : i64
      %8 = arith.andi %6, %7 : i1
      %9 = arith.divsi %2, %c6_i64_0 : i64
      %10 = arith.select %8, %c-9223372036854775808_i64, %9 : i64
      scf.yield %10 : i64
    }
    cf.br ^bb2(%4 : i64)
  ^bb2(%5: i64):  // pred: ^bb1
    return %5 : i64
  }
  func.func public @i64.no_fold_mul_div_u(%arg0: !llvm.ptr, %arg1: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i64
    %c6_i64 = arith.constant 6 : i64
    %2 = arith.muli %1, %c6_i64 : i64
    %c6_i64_0 = arith.constant 6 : i64
    %3 = arith.divui %2, %c6_i64_0 : i64
    %c0_i64 = arith.constant 0 : i64
    %4 = arith.cmpi eq, %c6_i64_0, %c0_i64 : i64
    %5 = arith.select %4, %c0_i64, %3 : i64
    cf.br ^bb2(%5 : i64)
  ^bb2(%6: i64):  // pred: ^bb1
    return %6 : i64
  }
  func.func public @i32.no_fold_div_s_2(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi eq, %c2_i32, %c0_i32 : i32
    %3 = scf.if %2 -> (i32) {
      scf.yield %c0_i32 : i32
    } else {
      %c-2147483648_i32 = arith.constant -2147483648 : i32
      %5 = arith.cmpi eq, %1, %c-2147483648_i32 : i32
      %c-1_i32 = arith.constant -1 : i32
      %6 = arith.cmpi eq, %c2_i32, %c-1_i32 : i32
      %7 = arith.andi %5, %6 : i1
      %8 = arith.divsi %1, %c2_i32 : i32
      %9 = arith.select %7, %c-2147483648_i32, %8 : i32
      scf.yield %9 : i32
    }
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @i64.no_fold_div_s_2(%arg0: !llvm.ptr, %arg1: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i64
    %c2_i64 = arith.constant 2 : i64
    %c0_i64 = arith.constant 0 : i64
    %2 = arith.cmpi eq, %c2_i64, %c0_i64 : i64
    %3 = scf.if %2 -> (i64) {
      scf.yield %c0_i64 : i64
    } else {
      %c-9223372036854775808_i64 = arith.constant -9223372036854775808 : i64
      %5 = arith.cmpi eq, %1, %c-9223372036854775808_i64 : i64
      %c-1_i64 = arith.constant -1 : i64
      %6 = arith.cmpi eq, %c2_i64, %c-1_i64 : i64
      %7 = arith.andi %5, %6 : i1
      %8 = arith.divsi %1, %c2_i64 : i64
      %9 = arith.select %7, %c-9223372036854775808_i64, %8 : i64
      scf.yield %9 : i64
    }
    cf.br ^bb2(%3 : i64)
  ^bb2(%4: i64):  // pred: ^bb1
    return %4 : i64
  }
  func.func public @i32.no_fold_rem_s_2(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi eq, %c2_i32, %c0_i32 : i32
    %3 = scf.if %2 -> (i32) {
      scf.yield %c0_i32 : i32
    } else {
      %5 = arith.remsi %1, %c2_i32 : i32
      scf.yield %5 : i32
    }
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @i64.no_fold_rem_s_2(%arg0: !llvm.ptr, %arg1: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i64
    %c2_i64 = arith.constant 2 : i64
    %c0_i64 = arith.constant 0 : i64
    %2 = arith.cmpi eq, %c2_i64, %c0_i64 : i64
    %3 = scf.if %2 -> (i64) {
      scf.yield %c0_i64 : i64
    } else {
      %5 = arith.remsi %1, %c2_i64 : i64
      scf.yield %5 : i64
    }
    cf.br ^bb2(%3 : i64)
  ^bb2(%4: i64):  // pred: ^bb1
    return %4 : i64
  }
  func.func public @i32.div_s_0(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %c0_i32_0 = arith.constant 0 : i32
    %2 = arith.cmpi eq, %c0_i32, %c0_i32_0 : i32
    %3 = scf.if %2 -> (i32) {
      scf.yield %c0_i32_0 : i32
    } else {
      %c-2147483648_i32 = arith.constant -2147483648 : i32
      %5 = arith.cmpi eq, %1, %c-2147483648_i32 : i32
      %c-1_i32 = arith.constant -1 : i32
      %6 = arith.cmpi eq, %c0_i32, %c-1_i32 : i32
      %7 = arith.andi %5, %6 : i1
      %8 = arith.divsi %1, %c0_i32 : i32
      %9 = arith.select %7, %c-2147483648_i32, %8 : i32
      scf.yield %9 : i32
    }
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @i32.div_u_0(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.divui %1, %c0_i32 : i32
    %c0_i32_0 = arith.constant 0 : i32
    %3 = arith.cmpi eq, %c0_i32, %c0_i32_0 : i32
    %4 = arith.select %3, %c0_i32_0, %2 : i32
    cf.br ^bb2(%4 : i32)
  ^bb2(%5: i32):  // pred: ^bb1
    return %5 : i32
  }
  func.func public @i64.div_s_0(%arg0: !llvm.ptr, %arg1: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i64
    %c0_i64 = arith.constant 0 : i64
    %c0_i64_0 = arith.constant 0 : i64
    %2 = arith.cmpi eq, %c0_i64, %c0_i64_0 : i64
    %3 = scf.if %2 -> (i64) {
      scf.yield %c0_i64_0 : i64
    } else {
      %c-9223372036854775808_i64 = arith.constant -9223372036854775808 : i64
      %5 = arith.cmpi eq, %1, %c-9223372036854775808_i64 : i64
      %c-1_i64 = arith.constant -1 : i64
      %6 = arith.cmpi eq, %c0_i64, %c-1_i64 : i64
      %7 = arith.andi %5, %6 : i1
      %8 = arith.divsi %1, %c0_i64 : i64
      %9 = arith.select %7, %c-9223372036854775808_i64, %8 : i64
      scf.yield %9 : i64
    }
    cf.br ^bb2(%3 : i64)
  ^bb2(%4: i64):  // pred: ^bb1
    return %4 : i64
  }
  func.func public @i64.div_u_0(%arg0: !llvm.ptr, %arg1: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i64
    %c0_i64 = arith.constant 0 : i64
    %2 = arith.divui %1, %c0_i64 : i64
    %c0_i64_0 = arith.constant 0 : i64
    %3 = arith.cmpi eq, %c0_i64, %c0_i64_0 : i64
    %4 = arith.select %3, %c0_i64_0, %2 : i64
    cf.br ^bb2(%4 : i64)
  ^bb2(%5: i64):  // pred: ^bb1
    return %5 : i64
  }
  func.func public @i32.div_s_3(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi eq, %c3_i32, %c0_i32 : i32
    %3 = scf.if %2 -> (i32) {
      scf.yield %c0_i32 : i32
    } else {
      %c-2147483648_i32 = arith.constant -2147483648 : i32
      %5 = arith.cmpi eq, %1, %c-2147483648_i32 : i32
      %c-1_i32 = arith.constant -1 : i32
      %6 = arith.cmpi eq, %c3_i32, %c-1_i32 : i32
      %7 = arith.andi %5, %6 : i1
      %8 = arith.divsi %1, %c3_i32 : i32
      %9 = arith.select %7, %c-2147483648_i32, %8 : i32
      scf.yield %9 : i32
    }
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @i32.div_u_3(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %2 = arith.divui %1, %c3_i32 : i32
    %c0_i32 = arith.constant 0 : i32
    %3 = arith.cmpi eq, %c3_i32, %c0_i32 : i32
    %4 = arith.select %3, %c0_i32, %2 : i32
    cf.br ^bb2(%4 : i32)
  ^bb2(%5: i32):  // pred: ^bb1
    return %5 : i32
  }
  func.func public @i64.div_s_3(%arg0: !llvm.ptr, %arg1: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    %c0_i64 = arith.constant 0 : i64
    %2 = arith.cmpi eq, %c3_i64, %c0_i64 : i64
    %3 = scf.if %2 -> (i64) {
      scf.yield %c0_i64 : i64
    } else {
      %c-9223372036854775808_i64 = arith.constant -9223372036854775808 : i64
      %5 = arith.cmpi eq, %1, %c-9223372036854775808_i64 : i64
      %c-1_i64 = arith.constant -1 : i64
      %6 = arith.cmpi eq, %c3_i64, %c-1_i64 : i64
      %7 = arith.andi %5, %6 : i1
      %8 = arith.divsi %1, %c3_i64 : i64
      %9 = arith.select %7, %c-9223372036854775808_i64, %8 : i64
      scf.yield %9 : i64
    }
    cf.br ^bb2(%3 : i64)
  ^bb2(%4: i64):  // pred: ^bb1
    return %4 : i64
  }
  func.func public @i64.div_u_3(%arg0: !llvm.ptr, %arg1: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    %2 = arith.divui %1, %c3_i64 : i64
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.cmpi eq, %c3_i64, %c0_i64 : i64
    %4 = arith.select %3, %c0_i64, %2 : i64
    cf.br ^bb2(%4 : i64)
  ^bb2(%5: i64):  // pred: ^bb1
    return %5 : i64
  }
  func.func public @i32.div_s_5(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c5_i32 = arith.constant 5 : i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi eq, %c5_i32, %c0_i32 : i32
    %3 = scf.if %2 -> (i32) {
      scf.yield %c0_i32 : i32
    } else {
      %c-2147483648_i32 = arith.constant -2147483648 : i32
      %5 = arith.cmpi eq, %1, %c-2147483648_i32 : i32
      %c-1_i32 = arith.constant -1 : i32
      %6 = arith.cmpi eq, %c5_i32, %c-1_i32 : i32
      %7 = arith.andi %5, %6 : i1
      %8 = arith.divsi %1, %c5_i32 : i32
      %9 = arith.select %7, %c-2147483648_i32, %8 : i32
      scf.yield %9 : i32
    }
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @i32.div_u_5(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c5_i32 = arith.constant 5 : i32
    %2 = arith.divui %1, %c5_i32 : i32
    %c0_i32 = arith.constant 0 : i32
    %3 = arith.cmpi eq, %c5_i32, %c0_i32 : i32
    %4 = arith.select %3, %c0_i32, %2 : i32
    cf.br ^bb2(%4 : i32)
  ^bb2(%5: i32):  // pred: ^bb1
    return %5 : i32
  }
  func.func public @i64.div_s_5(%arg0: !llvm.ptr, %arg1: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i64
    %c5_i64 = arith.constant 5 : i64
    %c0_i64 = arith.constant 0 : i64
    %2 = arith.cmpi eq, %c5_i64, %c0_i64 : i64
    %3 = scf.if %2 -> (i64) {
      scf.yield %c0_i64 : i64
    } else {
      %c-9223372036854775808_i64 = arith.constant -9223372036854775808 : i64
      %5 = arith.cmpi eq, %1, %c-9223372036854775808_i64 : i64
      %c-1_i64 = arith.constant -1 : i64
      %6 = arith.cmpi eq, %c5_i64, %c-1_i64 : i64
      %7 = arith.andi %5, %6 : i1
      %8 = arith.divsi %1, %c5_i64 : i64
      %9 = arith.select %7, %c-9223372036854775808_i64, %8 : i64
      scf.yield %9 : i64
    }
    cf.br ^bb2(%3 : i64)
  ^bb2(%4: i64):  // pred: ^bb1
    return %4 : i64
  }
  func.func public @i64.div_u_5(%arg0: !llvm.ptr, %arg1: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i64
    %c5_i64 = arith.constant 5 : i64
    %2 = arith.divui %1, %c5_i64 : i64
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.cmpi eq, %c5_i64, %c0_i64 : i64
    %4 = arith.select %3, %c0_i64, %2 : i64
    cf.br ^bb2(%4 : i64)
  ^bb2(%5: i64):  // pred: ^bb1
    return %5 : i64
  }
  func.func public @i32.div_s_7(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c7_i32 = arith.constant 7 : i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi eq, %c7_i32, %c0_i32 : i32
    %3 = scf.if %2 -> (i32) {
      scf.yield %c0_i32 : i32
    } else {
      %c-2147483648_i32 = arith.constant -2147483648 : i32
      %5 = arith.cmpi eq, %1, %c-2147483648_i32 : i32
      %c-1_i32 = arith.constant -1 : i32
      %6 = arith.cmpi eq, %c7_i32, %c-1_i32 : i32
      %7 = arith.andi %5, %6 : i1
      %8 = arith.divsi %1, %c7_i32 : i32
      %9 = arith.select %7, %c-2147483648_i32, %8 : i32
      scf.yield %9 : i32
    }
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @i32.div_u_7(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c7_i32 = arith.constant 7 : i32
    %2 = arith.divui %1, %c7_i32 : i32
    %c0_i32 = arith.constant 0 : i32
    %3 = arith.cmpi eq, %c7_i32, %c0_i32 : i32
    %4 = arith.select %3, %c0_i32, %2 : i32
    cf.br ^bb2(%4 : i32)
  ^bb2(%5: i32):  // pred: ^bb1
    return %5 : i32
  }
  func.func public @i64.div_s_7(%arg0: !llvm.ptr, %arg1: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i64
    %c7_i64 = arith.constant 7 : i64
    %c0_i64 = arith.constant 0 : i64
    %2 = arith.cmpi eq, %c7_i64, %c0_i64 : i64
    %3 = scf.if %2 -> (i64) {
      scf.yield %c0_i64 : i64
    } else {
      %c-9223372036854775808_i64 = arith.constant -9223372036854775808 : i64
      %5 = arith.cmpi eq, %1, %c-9223372036854775808_i64 : i64
      %c-1_i64 = arith.constant -1 : i64
      %6 = arith.cmpi eq, %c7_i64, %c-1_i64 : i64
      %7 = arith.andi %5, %6 : i1
      %8 = arith.divsi %1, %c7_i64 : i64
      %9 = arith.select %7, %c-9223372036854775808_i64, %8 : i64
      scf.yield %9 : i64
    }
    cf.br ^bb2(%3 : i64)
  ^bb2(%4: i64):  // pred: ^bb1
    return %4 : i64
  }
  func.func public @i64.div_u_7(%arg0: !llvm.ptr, %arg1: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i64
    %c7_i64 = arith.constant 7 : i64
    %2 = arith.divui %1, %c7_i64 : i64
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.cmpi eq, %c7_i64, %c0_i64 : i64
    %4 = arith.select %3, %c0_i64, %2 : i64
    cf.br ^bb2(%4 : i64)
  ^bb2(%5: i64):  // pred: ^bb1
    return %5 : i64
  }
  func.func public @i32.rem_s_3(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi eq, %c3_i32, %c0_i32 : i32
    %3 = scf.if %2 -> (i32) {
      scf.yield %c0_i32 : i32
    } else {
      %5 = arith.remsi %1, %c3_i32 : i32
      scf.yield %5 : i32
    }
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @i32.rem_u_3(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi eq, %c3_i32, %c0_i32 : i32
    %3 = scf.if %2 -> (i32) {
      scf.yield %c0_i32 : i32
    } else {
      %5 = arith.remui %1, %c3_i32 : i32
      scf.yield %5 : i32
    }
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @i64.rem_s_3(%arg0: !llvm.ptr, %arg1: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    %c0_i64 = arith.constant 0 : i64
    %2 = arith.cmpi eq, %c3_i64, %c0_i64 : i64
    %3 = scf.if %2 -> (i64) {
      scf.yield %c0_i64 : i64
    } else {
      %5 = arith.remsi %1, %c3_i64 : i64
      scf.yield %5 : i64
    }
    cf.br ^bb2(%3 : i64)
  ^bb2(%4: i64):  // pred: ^bb1
    return %4 : i64
  }
  func.func public @i64.rem_u_3(%arg0: !llvm.ptr, %arg1: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i64
    %c3_i64 = arith.constant 3 : i64
    %c0_i64 = arith.constant 0 : i64
    %2 = arith.cmpi eq, %c3_i64, %c0_i64 : i64
    %3 = scf.if %2 -> (i64) {
      scf.yield %c0_i64 : i64
    } else {
      %5 = arith.remui %1, %c3_i64 : i64
      scf.yield %5 : i64
    }
    cf.br ^bb2(%3 : i64)
  ^bb2(%4: i64):  // pred: ^bb1
    return %4 : i64
  }
  func.func public @i32.rem_s_5(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c5_i32 = arith.constant 5 : i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi eq, %c5_i32, %c0_i32 : i32
    %3 = scf.if %2 -> (i32) {
      scf.yield %c0_i32 : i32
    } else {
      %5 = arith.remsi %1, %c5_i32 : i32
      scf.yield %5 : i32
    }
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @i32.rem_u_5(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c5_i32 = arith.constant 5 : i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi eq, %c5_i32, %c0_i32 : i32
    %3 = scf.if %2 -> (i32) {
      scf.yield %c0_i32 : i32
    } else {
      %5 = arith.remui %1, %c5_i32 : i32
      scf.yield %5 : i32
    }
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @i64.rem_s_5(%arg0: !llvm.ptr, %arg1: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i64
    %c5_i64 = arith.constant 5 : i64
    %c0_i64 = arith.constant 0 : i64
    %2 = arith.cmpi eq, %c5_i64, %c0_i64 : i64
    %3 = scf.if %2 -> (i64) {
      scf.yield %c0_i64 : i64
    } else {
      %5 = arith.remsi %1, %c5_i64 : i64
      scf.yield %5 : i64
    }
    cf.br ^bb2(%3 : i64)
  ^bb2(%4: i64):  // pred: ^bb1
    return %4 : i64
  }
  func.func public @i64.rem_u_5(%arg0: !llvm.ptr, %arg1: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i64
    %c5_i64 = arith.constant 5 : i64
    %c0_i64 = arith.constant 0 : i64
    %2 = arith.cmpi eq, %c5_i64, %c0_i64 : i64
    %3 = scf.if %2 -> (i64) {
      scf.yield %c0_i64 : i64
    } else {
      %5 = arith.remui %1, %c5_i64 : i64
      scf.yield %5 : i64
    }
    cf.br ^bb2(%3 : i64)
  ^bb2(%4: i64):  // pred: ^bb1
    return %4 : i64
  }
  func.func public @i32.rem_s_7(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c7_i32 = arith.constant 7 : i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi eq, %c7_i32, %c0_i32 : i32
    %3 = scf.if %2 -> (i32) {
      scf.yield %c0_i32 : i32
    } else {
      %5 = arith.remsi %1, %c7_i32 : i32
      scf.yield %5 : i32
    }
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @i32.rem_u_7(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c7_i32 = arith.constant 7 : i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi eq, %c7_i32, %c0_i32 : i32
    %3 = scf.if %2 -> (i32) {
      scf.yield %c0_i32 : i32
    } else {
      %5 = arith.remui %1, %c7_i32 : i32
      scf.yield %5 : i32
    }
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @i64.rem_s_7(%arg0: !llvm.ptr, %arg1: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i64
    %c7_i64 = arith.constant 7 : i64
    %c0_i64 = arith.constant 0 : i64
    %2 = arith.cmpi eq, %c7_i64, %c0_i64 : i64
    %3 = scf.if %2 -> (i64) {
      scf.yield %c0_i64 : i64
    } else {
      %5 = arith.remsi %1, %c7_i64 : i64
      scf.yield %5 : i64
    }
    cf.br ^bb2(%3 : i64)
  ^bb2(%4: i64):  // pred: ^bb1
    return %4 : i64
  }
  func.func public @i64.rem_u_7(%arg0: !llvm.ptr, %arg1: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i64
    %c7_i64 = arith.constant 7 : i64
    %c0_i64 = arith.constant 0 : i64
    %2 = arith.cmpi eq, %c7_i64, %c0_i64 : i64
    %3 = scf.if %2 -> (i64) {
      scf.yield %c0_i64 : i64
    } else {
      %5 = arith.remui %1, %c7_i64 : i64
      scf.yield %5 : i64
    }
    cf.br ^bb2(%3 : i64)
  ^bb2(%4: i64):  // pred: ^bb1
    return %4 : i64
  }
  func.func public @i32.no_fold_div_neg1(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi eq, %c-1_i32, %c0_i32 : i32
    %3 = scf.if %2 -> (i32) {
      scf.yield %c0_i32 : i32
    } else {
      %c-2147483648_i32 = arith.constant -2147483648 : i32
      %5 = arith.cmpi eq, %1, %c-2147483648_i32 : i32
      %c-1_i32_0 = arith.constant -1 : i32
      %6 = arith.cmpi eq, %c-1_i32, %c-1_i32_0 : i32
      %7 = arith.andi %5, %6 : i1
      %8 = arith.divsi %1, %c-1_i32 : i32
      %9 = arith.select %7, %c-2147483648_i32, %8 : i32
      scf.yield %9 : i32
    }
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @i64.no_fold_div_neg1(%arg0: !llvm.ptr, %arg1: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i64
    %c-1_i64 = arith.constant -1 : i64
    %c0_i64 = arith.constant 0 : i64
    %2 = arith.cmpi eq, %c-1_i64, %c0_i64 : i64
    %3 = scf.if %2 -> (i64) {
      scf.yield %c0_i64 : i64
    } else {
      %c-9223372036854775808_i64 = arith.constant -9223372036854775808 : i64
      %5 = arith.cmpi eq, %1, %c-9223372036854775808_i64 : i64
      %c-1_i64_0 = arith.constant -1 : i64
      %6 = arith.cmpi eq, %c-1_i64, %c-1_i64_0 : i64
      %7 = arith.andi %5, %6 : i1
      %8 = arith.divsi %1, %c-1_i64 : i64
      %9 = arith.select %7, %c-9223372036854775808_i64, %8 : i64
      scf.yield %9 : i64
    }
    cf.br ^bb2(%3 : i64)
  ^bb2(%4: i64):  // pred: ^bb1
    return %4 : i64
  }
  func.func private @dora_fn_wasm_table_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_copy(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_fill(!llvm.ptr, i32, i32, !llvm.ptr, i32)
  func.func private @dora_fn_wasm_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_table_set(!llvm.ptr, i32, i32, !llvm.ptr)
  func.func private @dora_fn_wasm_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_imported_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_func_ref(!llvm.ptr, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_data_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_elem_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_raise_trap(i32)
}
