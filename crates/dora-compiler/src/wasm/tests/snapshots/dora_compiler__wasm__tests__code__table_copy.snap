---
source: crates/dora-compiler/src/wasm/tests/code.rs
expression: op
snapshot_kind: text
---
module {
  func.func @f0(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c5_i32 = arith.constant 5 : i32
    cf.br ^bb2(%c5_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func @f1(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c6_i32 = arith.constant 6 : i32
    cf.br ^bb2(%c6_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func @f2(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c7_i32 = arith.constant 7 : i32
    cf.br ^bb2(%c7_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func @f3(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c8_i32 = arith.constant 8 : i32
    cf.br ^bb2(%c8_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func @f4(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c9_i32 = arith.constant 9 : i32
    cf.br ^bb2(%c9_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func public @test(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func public @check_t0(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.getelementptr %arg0[136] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %arg0[144] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.load %4 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %7 = llvm.load %0 : !llvm.ptr -> i32
    %8 = arith.cmpi ult, %7, %6 : i32
    cf.cond_br %8, ^bb3, ^bb4
  ^bb2(%9: i32):  // pred: ^bb9
    return %9 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %10 = llvm.getelementptr %5[%7] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.load %11 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %13 = arith.cmpi eq, %12, %c0_i32 : i32
    cf.cond_br %13, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %14 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %11[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %11[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.load %17 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %20 = arith.cmpi eq, %19, %c0_i32_0 : i32
    cf.cond_br %20, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %21 = llvm.load %15 : !llvm.ptr -> i32
    %22 = arith.cmpi ne, %2, %21 : i32
    cf.cond_br %22, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_1 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_1) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %23 = llvm.call %17(%18) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr) -> i32
    cf.br ^bb2(%23 : i32)
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func public @check_t1(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.getelementptr %arg0[152] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %arg0[160] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.load %4 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %7 = llvm.load %0 : !llvm.ptr -> i32
    %8 = arith.cmpi ult, %7, %6 : i32
    cf.cond_br %8, ^bb3, ^bb4
  ^bb2(%9: i32):  // pred: ^bb9
    return %9 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %10 = llvm.getelementptr %5[%7] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.load %11 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %13 = arith.cmpi eq, %12, %c0_i32 : i32
    cf.cond_br %13, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %14 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %11[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %11[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.load %17 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %20 = arith.cmpi eq, %19, %c0_i32_0 : i32
    cf.cond_br %20, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %21 = llvm.load %15 : !llvm.ptr -> i32
    %22 = arith.cmpi ne, %2, %21 : i32
    cf.cond_br %22, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_1 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_1) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %23 = llvm.call %17(%18) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr) -> i32
    cf.br ^bb2(%23 : i32)
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func private @dora_fn_wasm_table_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_copy(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_fill(!llvm.ptr, i32, i32, !llvm.ptr, i32)
  func.func private @dora_fn_wasm_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_table_set(!llvm.ptr, i32, i32, !llvm.ptr)
  func.func private @dora_fn_wasm_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_imported_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_func_ref(!llvm.ptr, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_data_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_elem_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_raise_trap(i32)
}
