---
source: crates/dora-compiler/src/wasm/tests/static_mem_check.rs
assertion_line: 59
expression: op
---
module {
  func.func @f0(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %4 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %9 = arith.subi %8, %c64_i32 : i32
    llvm.store %9, %2 : i32, !llvm.ptr
    llvm.store %9, %4 : i32, !llvm.ptr
    %10 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %11 = arith.addi %10, %c32_i32 : i32
    %c24_i32 = arith.constant 24 : i32
    %12 = arith.addi %11, %c24_i32 : i32
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i32_2 = arith.constant 24 : i32
    %14 = arith.addi %13, %c24_i32_2 : i32
    %c0_i64 = arith.constant 0 : i64
    %15 = arith.extui %14 : i32 to i64
    %16 = arith.addi %15, %c0_i64 : i64
    %c8_i64 = arith.constant 8 : i64
    %17 = arith.addi %16, %c8_i64 : i64
    %c0_i32_3 = arith.constant 0 : i32
    %18 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_3) : (!llvm.ptr, i32) -> i32
    %19 = arith.extui %18 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %20 = arith.muli %19, %c65536_i64 : i64
    %21 = arith.cmpi ult, %17, %20 : i64
    cf.cond_br %21, ^bb3, ^bb4
  ^bb2(%22: i32):  // pred: ^bb41
    return %22 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %23 = llvm.getelementptr %7[%16] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %24 = llvm.load volatile %23 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_4 = arith.constant 0 : i64
    %25 = arith.extui %12 : i32 to i64
    %26 = arith.addi %25, %c0_i64_4 : i64
    %c8_i64_5 = arith.constant 8 : i64
    %27 = arith.addi %26, %c8_i64_5 : i64
    %c0_i32_6 = arith.constant 0 : i32
    %28 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_6) : (!llvm.ptr, i32) -> i32
    %29 = arith.extui %28 : i32 to i64
    %c65536_i64_7 = arith.constant 65536 : i64
    %30 = arith.muli %29, %c65536_i64_7 : i64
    %31 = arith.cmpi ult, %27, %30 : i64
    cf.cond_br %31, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c1_i32_8 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_8) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %32 = llvm.getelementptr %7[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %24, %32 {alignment = 1 : i64} : i64, !llvm.ptr
    %33 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32_9 = arith.constant 32 : i32
    %34 = arith.addi %33, %c32_i32_9 : i32
    %c16_i32 = arith.constant 16 : i32
    %35 = arith.addi %34, %c16_i32 : i32
    %36 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32_10 = arith.constant 16 : i32
    %37 = arith.addi %36, %c16_i32_10 : i32
    %c0_i64_11 = arith.constant 0 : i64
    %38 = arith.extui %37 : i32 to i64
    %39 = arith.addi %38, %c0_i64_11 : i64
    %c8_i64_12 = arith.constant 8 : i64
    %40 = arith.addi %39, %c8_i64_12 : i64
    %c0_i32_13 = arith.constant 0 : i32
    %41 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_13) : (!llvm.ptr, i32) -> i32
    %42 = arith.extui %41 : i32 to i64
    %c65536_i64_14 = arith.constant 65536 : i64
    %43 = arith.muli %42, %c65536_i64_14 : i64
    %44 = arith.cmpi ult, %40, %43 : i64
    cf.cond_br %44, ^bb7, ^bb8
  ^bb6:  // pred: ^bb3
    %c1_i32_15 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_15) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %45 = llvm.getelementptr %7[%39] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %46 = llvm.load volatile %45 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_16 = arith.constant 0 : i64
    %47 = arith.extui %35 : i32 to i64
    %48 = arith.addi %47, %c0_i64_16 : i64
    %c8_i64_17 = arith.constant 8 : i64
    %49 = arith.addi %48, %c8_i64_17 : i64
    %c0_i32_18 = arith.constant 0 : i32
    %50 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_18) : (!llvm.ptr, i32) -> i32
    %51 = arith.extui %50 : i32 to i64
    %c65536_i64_19 = arith.constant 65536 : i64
    %52 = arith.muli %51, %c65536_i64_19 : i64
    %53 = arith.cmpi ult, %49, %52 : i64
    cf.cond_br %53, ^bb9, ^bb10
  ^bb8:  // pred: ^bb5
    %c1_i32_20 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_20) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %54 = llvm.getelementptr %7[%48] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %46, %54 {alignment = 1 : i64} : i64, !llvm.ptr
    %55 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32_21 = arith.constant 32 : i32
    %56 = arith.addi %55, %c32_i32_21 : i32
    %c8_i32 = arith.constant 8 : i32
    %57 = arith.addi %56, %c8_i32 : i32
    %58 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_22 = arith.constant 8 : i32
    %59 = arith.addi %58, %c8_i32_22 : i32
    %c0_i64_23 = arith.constant 0 : i64
    %60 = arith.extui %59 : i32 to i64
    %61 = arith.addi %60, %c0_i64_23 : i64
    %c8_i64_24 = arith.constant 8 : i64
    %62 = arith.addi %61, %c8_i64_24 : i64
    %c0_i32_25 = arith.constant 0 : i32
    %63 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_25) : (!llvm.ptr, i32) -> i32
    %64 = arith.extui %63 : i32 to i64
    %c65536_i64_26 = arith.constant 65536 : i64
    %65 = arith.muli %64, %c65536_i64_26 : i64
    %66 = arith.cmpi ult, %62, %65 : i64
    cf.cond_br %66, ^bb11, ^bb12
  ^bb10:  // pred: ^bb7
    %c1_i32_27 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_27) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %67 = llvm.getelementptr %7[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %68 = llvm.load volatile %67 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_28 = arith.constant 0 : i64
    %69 = arith.extui %57 : i32 to i64
    %70 = arith.addi %69, %c0_i64_28 : i64
    %c8_i64_29 = arith.constant 8 : i64
    %71 = arith.addi %70, %c8_i64_29 : i64
    %c0_i32_30 = arith.constant 0 : i32
    %72 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_30) : (!llvm.ptr, i32) -> i32
    %73 = arith.extui %72 : i32 to i64
    %c65536_i64_31 = arith.constant 65536 : i64
    %74 = arith.muli %73, %c65536_i64_31 : i64
    %75 = arith.cmpi ult, %71, %74 : i64
    cf.cond_br %75, ^bb13, ^bb14
  ^bb12:  // pred: ^bb9
    %c1_i32_32 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_32) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %76 = llvm.getelementptr %7[%70] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %68, %76 {alignment = 1 : i64} : i64, !llvm.ptr
    %77 = llvm.load %2 : !llvm.ptr -> i32
    %78 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_33 = arith.constant 0 : i64
    %79 = arith.extui %78 : i32 to i64
    %80 = arith.addi %79, %c0_i64_33 : i64
    %c8_i64_34 = arith.constant 8 : i64
    %81 = arith.addi %80, %c8_i64_34 : i64
    %c0_i32_35 = arith.constant 0 : i32
    %82 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_35) : (!llvm.ptr, i32) -> i32
    %83 = arith.extui %82 : i32 to i64
    %c65536_i64_36 = arith.constant 65536 : i64
    %84 = arith.muli %83, %c65536_i64_36 : i64
    %85 = arith.cmpi ult, %81, %84 : i64
    cf.cond_br %85, ^bb15, ^bb16
  ^bb14:  // pred: ^bb11
    %c1_i32_37 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_37) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // 2 preds: ^bb13, ^bb16
    %86 = llvm.getelementptr %7[%80] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %87 = llvm.load volatile %86 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c32_i64 = arith.constant 32 : i64
    %88 = arith.extui %77 : i32 to i64
    %89 = arith.addi %88, %c32_i64 : i64
    %c8_i64_38 = arith.constant 8 : i64
    %90 = arith.addi %89, %c8_i64_38 : i64
    %c0_i32_39 = arith.constant 0 : i32
    %91 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_39) : (!llvm.ptr, i32) -> i32
    %92 = arith.extui %91 : i32 to i64
    %c65536_i64_40 = arith.constant 65536 : i64
    %93 = arith.muli %92, %c65536_i64_40 : i64
    %94 = arith.cmpi ult, %90, %93 : i64
    cf.cond_br %94, ^bb17, ^bb18
  ^bb16:  // pred: ^bb13
    %c1_i32_41 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_41) : (i32) -> ()
    cf.br ^bb15
  ^bb17:  // 2 preds: ^bb15, ^bb18
    %95 = llvm.getelementptr %7[%89] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %87, %95 {alignment = 1 : i64} : i64, !llvm.ptr
    %96 = llvm.load %2 : !llvm.ptr -> i32
    %97 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32_42 = arith.constant 32 : i32
    %98 = arith.addi %97, %c32_i32_42 : i32
    %99 = llvm.load %1 : !llvm.ptr -> i32
    %c72_i64 = arith.constant 72 : i64
    %100 = arith.extui %99 : i32 to i64
    %101 = arith.addi %100, %c72_i64 : i64
    %c1_i64 = arith.constant 1 : i64
    %102 = arith.addi %101, %c1_i64 : i64
    %c0_i32_43 = arith.constant 0 : i32
    %103 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_43) : (!llvm.ptr, i32) -> i32
    %104 = arith.extui %103 : i32 to i64
    %c65536_i64_44 = arith.constant 65536 : i64
    %105 = arith.muli %104, %c65536_i64_44 : i64
    %106 = arith.cmpi ult, %102, %105 : i64
    cf.cond_br %106, ^bb19, ^bb20
  ^bb18:  // pred: ^bb15
    %c1_i32_45 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_45) : (i32) -> ()
    cf.br ^bb17
  ^bb19:  // 2 preds: ^bb17, ^bb20
    %107 = llvm.getelementptr %7[%101] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %108 = llvm.load volatile %107 {alignment = 1 : i64} : !llvm.ptr -> i8
    %109 = arith.extui %108 : i8 to i32
    call @f35(%arg0, %96, %98, %109) : (!llvm.ptr, i32, i32, i32) -> ()
    %110 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_46 = arith.constant 0 : i64
    %111 = arith.extui %110 : i32 to i64
    %112 = arith.addi %111, %c0_i64_46 : i64
    %c4_i64 = arith.constant 4 : i64
    %113 = arith.addi %112, %c4_i64 : i64
    %c0_i32_47 = arith.constant 0 : i32
    %114 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_47) : (!llvm.ptr, i32) -> i32
    %115 = arith.extui %114 : i32 to i64
    %c65536_i64_48 = arith.constant 65536 : i64
    %116 = arith.muli %115, %c65536_i64_48 : i64
    %117 = arith.cmpi ult, %113, %116 : i64
    cf.cond_br %117, ^bb22, ^bb23
  ^bb20:  // pred: ^bb17
    %c1_i32_49 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_49) : (i32) -> ()
    cf.br ^bb19
  ^bb21:  // pred: ^bb22
    %118 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_50 = arith.constant 0 : i32
    %c48_i64 = arith.constant 48 : i64
    %119 = arith.extui %118 : i32 to i64
    %120 = arith.addi %119, %c48_i64 : i64
    %c4_i64_51 = arith.constant 4 : i64
    %121 = arith.addi %120, %c4_i64_51 : i64
    %c0_i32_52 = arith.constant 0 : i32
    %122 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_52) : (!llvm.ptr, i32) -> i32
    %123 = arith.extui %122 : i32 to i64
    %c65536_i64_53 = arith.constant 65536 : i64
    %124 = arith.muli %123, %c65536_i64_53 : i64
    %125 = arith.cmpi ult, %121, %124 : i64
    cf.cond_br %125, ^bb43, ^bb44
  ^bb22:  // 2 preds: ^bb19, ^bb23
    %126 = llvm.getelementptr %7[%112] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %127 = llvm.load volatile %126 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_54 = arith.constant 0 : i32
    %128 = arith.cmpi ne, %127, %c0_i32_54 : i32
    cf.cond_br %128, ^bb21, ^bb24
  ^bb23:  // pred: ^bb19
    %c1_i32_55 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_55) : (i32) -> ()
    cf.br ^bb22
  ^bb24:  // pred: ^bb22
    %129 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_56 = arith.constant 1 : i64
    %c0_i64_57 = arith.constant 0 : i64
    %130 = arith.extui %129 : i32 to i64
    %131 = arith.addi %130, %c0_i64_57 : i64
    %c8_i64_58 = arith.constant 8 : i64
    %132 = arith.addi %131, %c8_i64_58 : i64
    %c0_i32_59 = arith.constant 0 : i32
    %133 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_59) : (!llvm.ptr, i32) -> i32
    %134 = arith.extui %133 : i32 to i64
    %c65536_i64_60 = arith.constant 65536 : i64
    %135 = arith.muli %134, %c65536_i64_60 : i64
    %136 = arith.cmpi ult, %132, %135 : i64
    cf.cond_br %136, ^bb25, ^bb26
  ^bb25:  // 2 preds: ^bb24, ^bb26
    %137 = llvm.getelementptr %7[%131] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_56, %137 {alignment = 1 : i64} : i64, !llvm.ptr
    %138 = llvm.load %0 : !llvm.ptr -> i32
    %139 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_61 = arith.constant 0 : i64
    %140 = arith.extui %139 : i32 to i64
    %141 = arith.addi %140, %c0_i64_61 : i64
    %c8_i64_62 = arith.constant 8 : i64
    %142 = arith.addi %141, %c8_i64_62 : i64
    %c0_i32_63 = arith.constant 0 : i32
    %143 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_63) : (!llvm.ptr, i32) -> i32
    %144 = arith.extui %143 : i32 to i64
    %c65536_i64_64 = arith.constant 65536 : i64
    %145 = arith.muli %144, %c65536_i64_64 : i64
    %146 = arith.cmpi ult, %142, %145 : i64
    cf.cond_br %146, ^bb27, ^bb28
  ^bb26:  // pred: ^bb24
    %c1_i32_65 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_65) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // 2 preds: ^bb25, ^bb28
    %147 = llvm.getelementptr %7[%141] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %148 = llvm.load volatile %147 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c8_i64_66 = arith.constant 8 : i64
    %149 = arith.extui %138 : i32 to i64
    %150 = arith.addi %149, %c8_i64_66 : i64
    %c8_i64_67 = arith.constant 8 : i64
    %151 = arith.addi %150, %c8_i64_67 : i64
    %c0_i32_68 = arith.constant 0 : i32
    %152 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_68) : (!llvm.ptr, i32) -> i32
    %153 = arith.extui %152 : i32 to i64
    %c65536_i64_69 = arith.constant 65536 : i64
    %154 = arith.muli %153, %c65536_i64_69 : i64
    %155 = arith.cmpi ult, %151, %154 : i64
    cf.cond_br %155, ^bb29, ^bb30
  ^bb28:  // pred: ^bb25
    %c1_i32_70 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_70) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // 2 preds: ^bb27, ^bb30
    %156 = llvm.getelementptr %7[%150] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %148, %156 {alignment = 1 : i64} : i64, !llvm.ptr
    %157 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_71 = arith.constant 16 : i32
    %158 = arith.addi %157, %c16_i32_71 : i32
    %159 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_72 = arith.constant 8 : i32
    %160 = arith.addi %159, %c8_i32_72 : i32
    %c0_i64_73 = arith.constant 0 : i64
    %161 = arith.extui %160 : i32 to i64
    %162 = arith.addi %161, %c0_i64_73 : i64
    %c8_i64_74 = arith.constant 8 : i64
    %163 = arith.addi %162, %c8_i64_74 : i64
    %c0_i32_75 = arith.constant 0 : i32
    %164 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_75) : (!llvm.ptr, i32) -> i32
    %165 = arith.extui %164 : i32 to i64
    %c65536_i64_76 = arith.constant 65536 : i64
    %166 = arith.muli %165, %c65536_i64_76 : i64
    %167 = arith.cmpi ult, %163, %166 : i64
    cf.cond_br %167, ^bb31, ^bb32
  ^bb30:  // pred: ^bb27
    %c1_i32_77 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_77) : (i32) -> ()
    cf.br ^bb29
  ^bb31:  // 2 preds: ^bb29, ^bb32
    %168 = llvm.getelementptr %7[%162] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %169 = llvm.load volatile %168 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_78 = arith.constant 0 : i64
    %170 = arith.extui %158 : i32 to i64
    %171 = arith.addi %170, %c0_i64_78 : i64
    %c8_i64_79 = arith.constant 8 : i64
    %172 = arith.addi %171, %c8_i64_79 : i64
    %c0_i32_80 = arith.constant 0 : i32
    %173 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_80) : (!llvm.ptr, i32) -> i32
    %174 = arith.extui %173 : i32 to i64
    %c65536_i64_81 = arith.constant 65536 : i64
    %175 = arith.muli %174, %c65536_i64_81 : i64
    %176 = arith.cmpi ult, %172, %175 : i64
    cf.cond_br %176, ^bb33, ^bb34
  ^bb32:  // pred: ^bb29
    %c1_i32_82 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_82) : (i32) -> ()
    cf.br ^bb31
  ^bb33:  // 2 preds: ^bb31, ^bb34
    %177 = llvm.getelementptr %7[%171] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %169, %177 {alignment = 1 : i64} : i64, !llvm.ptr
    %178 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32_83 = arith.constant 24 : i32
    %179 = arith.addi %178, %c24_i32_83 : i32
    %180 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_84 = arith.constant 16 : i32
    %181 = arith.addi %180, %c16_i32_84 : i32
    %c0_i64_85 = arith.constant 0 : i64
    %182 = arith.extui %181 : i32 to i64
    %183 = arith.addi %182, %c0_i64_85 : i64
    %c8_i64_86 = arith.constant 8 : i64
    %184 = arith.addi %183, %c8_i64_86 : i64
    %c0_i32_87 = arith.constant 0 : i32
    %185 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_87) : (!llvm.ptr, i32) -> i32
    %186 = arith.extui %185 : i32 to i64
    %c65536_i64_88 = arith.constant 65536 : i64
    %187 = arith.muli %186, %c65536_i64_88 : i64
    %188 = arith.cmpi ult, %184, %187 : i64
    cf.cond_br %188, ^bb35, ^bb36
  ^bb34:  // pred: ^bb31
    %c1_i32_89 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_89) : (i32) -> ()
    cf.br ^bb33
  ^bb35:  // 2 preds: ^bb33, ^bb36
    %189 = llvm.getelementptr %7[%183] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %190 = llvm.load volatile %189 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_90 = arith.constant 0 : i64
    %191 = arith.extui %179 : i32 to i64
    %192 = arith.addi %191, %c0_i64_90 : i64
    %c8_i64_91 = arith.constant 8 : i64
    %193 = arith.addi %192, %c8_i64_91 : i64
    %c0_i32_92 = arith.constant 0 : i32
    %194 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_92) : (!llvm.ptr, i32) -> i32
    %195 = arith.extui %194 : i32 to i64
    %c65536_i64_93 = arith.constant 65536 : i64
    %196 = arith.muli %195, %c65536_i64_93 : i64
    %197 = arith.cmpi ult, %193, %196 : i64
    cf.cond_br %197, ^bb37, ^bb38
  ^bb36:  // pred: ^bb33
    %c1_i32_94 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_94) : (i32) -> ()
    cf.br ^bb35
  ^bb37:  // 2 preds: ^bb35, ^bb38
    %198 = llvm.getelementptr %7[%192] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %190, %198 {alignment = 1 : i64} : i64, !llvm.ptr
    %199 = llvm.load %0 : !llvm.ptr -> i32
    %c32_i32_95 = arith.constant 32 : i32
    %200 = arith.addi %199, %c32_i32_95 : i32
    %201 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_96 = arith.constant 24 : i32
    %202 = arith.addi %201, %c24_i32_96 : i32
    %c0_i64_97 = arith.constant 0 : i64
    %203 = arith.extui %202 : i32 to i64
    %204 = arith.addi %203, %c0_i64_97 : i64
    %c8_i64_98 = arith.constant 8 : i64
    %205 = arith.addi %204, %c8_i64_98 : i64
    %c0_i32_99 = arith.constant 0 : i32
    %206 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_99) : (!llvm.ptr, i32) -> i32
    %207 = arith.extui %206 : i32 to i64
    %c65536_i64_100 = arith.constant 65536 : i64
    %208 = arith.muli %207, %c65536_i64_100 : i64
    %209 = arith.cmpi ult, %205, %208 : i64
    cf.cond_br %209, ^bb39, ^bb40
  ^bb38:  // pred: ^bb35
    %c1_i32_101 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_101) : (i32) -> ()
    cf.br ^bb37
  ^bb39:  // 2 preds: ^bb37, ^bb40
    %210 = llvm.getelementptr %7[%204] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %211 = llvm.load volatile %210 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_102 = arith.constant 0 : i64
    %212 = arith.extui %200 : i32 to i64
    %213 = arith.addi %212, %c0_i64_102 : i64
    %c8_i64_103 = arith.constant 8 : i64
    %214 = arith.addi %213, %c8_i64_103 : i64
    %c0_i32_104 = arith.constant 0 : i32
    %215 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_104) : (!llvm.ptr, i32) -> i32
    %216 = arith.extui %215 : i32 to i64
    %c65536_i64_105 = arith.constant 65536 : i64
    %217 = arith.muli %216, %c65536_i64_105 : i64
    %218 = arith.cmpi ult, %214, %217 : i64
    cf.cond_br %218, ^bb41, ^bb42
  ^bb40:  // pred: ^bb37
    %c1_i32_106 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_106) : (i32) -> ()
    cf.br ^bb39
  ^bb41:  // 2 preds: ^bb39, ^bb42
    %219 = llvm.getelementptr %7[%213] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %211, %219 {alignment = 1 : i64} : i64, !llvm.ptr
    %220 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_107 = arith.constant 64 : i32
    %221 = arith.addi %220, %c64_i32_107 : i32
    llvm.store %221, %4 : i32, !llvm.ptr
    %222 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_108 = arith.constant 8 : i32
    %223 = arith.addi %222, %c8_i32_108 : i32
    cf.br ^bb2(%223 : i32)
  ^bb42:  // pred: ^bb39
    %c1_i32_109 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_109) : (i32) -> ()
    cf.br ^bb41
  ^bb43:  // 2 preds: ^bb21, ^bb44
    %224 = llvm.getelementptr %7[%120] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_50, %224 {alignment = 1 : i64} : i32, !llvm.ptr
    %225 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_110 = arith.constant 1 : i32
    %c36_i64 = arith.constant 36 : i64
    %226 = arith.extui %225 : i32 to i64
    %227 = arith.addi %226, %c36_i64 : i64
    %c4_i64_111 = arith.constant 4 : i64
    %228 = arith.addi %227, %c4_i64_111 : i64
    %c0_i32_112 = arith.constant 0 : i32
    %229 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_112) : (!llvm.ptr, i32) -> i32
    %230 = arith.extui %229 : i32 to i64
    %c65536_i64_113 = arith.constant 65536 : i64
    %231 = arith.muli %230, %c65536_i64_113 : i64
    %232 = arith.cmpi ult, %228, %231 : i64
    cf.cond_br %232, ^bb45, ^bb46
  ^bb44:  // pred: ^bb21
    %c1_i32_114 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_114) : (i32) -> ()
    cf.br ^bb43
  ^bb45:  // 2 preds: ^bb43, ^bb46
    %233 = llvm.getelementptr %7[%227] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_110, %233 {alignment = 1 : i64} : i32, !llvm.ptr
    %234 = llvm.load %2 : !llvm.ptr -> i32
    %c1050004_i32 = arith.constant 1050004 : i32
    %c32_i64_115 = arith.constant 32 : i64
    %235 = arith.extui %234 : i32 to i64
    %236 = arith.addi %235, %c32_i64_115 : i64
    %c4_i64_116 = arith.constant 4 : i64
    %237 = arith.addi %236, %c4_i64_116 : i64
    %c0_i32_117 = arith.constant 0 : i32
    %238 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_117) : (!llvm.ptr, i32) -> i32
    %239 = arith.extui %238 : i32 to i64
    %c65536_i64_118 = arith.constant 65536 : i64
    %240 = arith.muli %239, %c65536_i64_118 : i64
    %241 = arith.cmpi ult, %237, %240 : i64
    cf.cond_br %241, ^bb47, ^bb48
  ^bb46:  // pred: ^bb43
    %c1_i32_119 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_119) : (i32) -> ()
    cf.br ^bb45
  ^bb47:  // 2 preds: ^bb45, ^bb48
    %242 = llvm.getelementptr %7[%236] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1050004_i32, %242 {alignment = 1 : i64} : i32, !llvm.ptr
    %243 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_120 = arith.constant 4 : i64
    %c40_i64 = arith.constant 40 : i64
    %244 = arith.extui %243 : i32 to i64
    %245 = arith.addi %244, %c40_i64 : i64
    %c8_i64_121 = arith.constant 8 : i64
    %246 = arith.addi %245, %c8_i64_121 : i64
    %c0_i32_122 = arith.constant 0 : i32
    %247 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_122) : (!llvm.ptr, i32) -> i32
    %248 = arith.extui %247 : i32 to i64
    %c65536_i64_123 = arith.constant 65536 : i64
    %249 = arith.muli %248, %c65536_i64_123 : i64
    %250 = arith.cmpi ult, %246, %249 : i64
    cf.cond_br %250, ^bb49, ^bb50
  ^bb48:  // pred: ^bb45
    %c1_i32_124 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_124) : (i32) -> ()
    cf.br ^bb47
  ^bb49:  // 2 preds: ^bb47, ^bb50
    %251 = llvm.getelementptr %7[%245] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4_i64_120, %251 {alignment = 1 : i64} : i64, !llvm.ptr
    %252 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32_125 = arith.constant 32 : i32
    %253 = arith.addi %252, %c32_i32_125 : i32
    %c1050092_i32 = arith.constant 1050092 : i32
    call @f148(%arg0, %253, %c1050092_i32) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb50:  // pred: ^bb47
    %c1_i32_126 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_126) : (i32) -> ()
    cf.br ^bb49
  }
  func.func @f1(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %6 : i64, !llvm.ptr
    %7 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %12 = llvm.load %8 : !llvm.ptr -> i32
    %c1664_i32 = arith.constant 1664 : i32
    %13 = arith.subi %12, %c1664_i32 : i32
    llvm.store %13, %3 : i32, !llvm.ptr
    llvm.store %13, %8 : i32, !llvm.ptr
    %14 = llvm.load %3 : !llvm.ptr -> i32
    %c1576_i32 = arith.constant 1576 : i32
    %15 = arith.addi %14, %c1576_i32 : i32
    %c0_i64_6 = arith.constant 0 : i64
    %c0_i64_7 = arith.constant 0 : i64
    %16 = arith.extui %15 : i32 to i64
    %17 = arith.addi %16, %c0_i64_7 : i64
    %c8_i64 = arith.constant 8 : i64
    %18 = arith.addi %17, %c8_i64 : i64
    %c0_i32_8 = arith.constant 0 : i32
    %19 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_8) : (!llvm.ptr, i32) -> i32
    %20 = arith.extui %19 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %21 = arith.muli %20, %c65536_i64 : i64
    %22 = arith.cmpi ult, %18, %21 : i64
    cf.cond_br %22, ^bb3, ^bb4
  ^bb2:  // pred: ^bb11
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %23 = llvm.getelementptr %11[%17] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_6, %23 {alignment = 1 : i64} : i64, !llvm.ptr
    %24 = llvm.load %3 : !llvm.ptr -> i32
    %c1568_i32 = arith.constant 1568 : i32
    %25 = arith.addi %24, %c1568_i32 : i32
    %c0_i64_9 = arith.constant 0 : i64
    %c0_i64_10 = arith.constant 0 : i64
    %26 = arith.extui %25 : i32 to i64
    %27 = arith.addi %26, %c0_i64_10 : i64
    %c8_i64_11 = arith.constant 8 : i64
    %28 = arith.addi %27, %c8_i64_11 : i64
    %c0_i32_12 = arith.constant 0 : i32
    %29 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_12) : (!llvm.ptr, i32) -> i32
    %30 = arith.extui %29 : i32 to i64
    %c65536_i64_13 = arith.constant 65536 : i64
    %31 = arith.muli %30, %c65536_i64_13 : i64
    %32 = arith.cmpi ult, %28, %31 : i64
    cf.cond_br %32, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c1_i32_14 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_14) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %33 = llvm.getelementptr %11[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_9, %33 {alignment = 1 : i64} : i64, !llvm.ptr
    %34 = llvm.load %3 : !llvm.ptr -> i32
    %c1560_i32 = arith.constant 1560 : i32
    %35 = arith.addi %34, %c1560_i32 : i32
    %c0_i64_15 = arith.constant 0 : i64
    %c0_i64_16 = arith.constant 0 : i64
    %36 = arith.extui %35 : i32 to i64
    %37 = arith.addi %36, %c0_i64_16 : i64
    %c8_i64_17 = arith.constant 8 : i64
    %38 = arith.addi %37, %c8_i64_17 : i64
    %c0_i32_18 = arith.constant 0 : i32
    %39 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_18) : (!llvm.ptr, i32) -> i32
    %40 = arith.extui %39 : i32 to i64
    %c65536_i64_19 = arith.constant 65536 : i64
    %41 = arith.muli %40, %c65536_i64_19 : i64
    %42 = arith.cmpi ult, %38, %41 : i64
    cf.cond_br %42, ^bb7, ^bb8
  ^bb6:  // pred: ^bb3
    %c1_i32_20 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_20) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %43 = llvm.getelementptr %11[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_15, %43 {alignment = 1 : i64} : i64, !llvm.ptr
    %44 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_21 = arith.constant 0 : i64
    %c1552_i64 = arith.constant 1552 : i64
    %45 = arith.extui %44 : i32 to i64
    %46 = arith.addi %45, %c1552_i64 : i64
    %c8_i64_22 = arith.constant 8 : i64
    %47 = arith.addi %46, %c8_i64_22 : i64
    %c0_i32_23 = arith.constant 0 : i32
    %48 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_23) : (!llvm.ptr, i32) -> i32
    %49 = arith.extui %48 : i32 to i64
    %c65536_i64_24 = arith.constant 65536 : i64
    %50 = arith.muli %49, %c65536_i64_24 : i64
    %51 = arith.cmpi ult, %47, %50 : i64
    cf.cond_br %51, ^bb9, ^bb10
  ^bb8:  // pred: ^bb5
    %c1_i32_25 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_25) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %52 = llvm.getelementptr %11[%46] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_21, %52 {alignment = 1 : i64} : i64, !llvm.ptr
    %53 = llvm.load %3 : !llvm.ptr -> i32
    %54 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32 = arith.constant 1552 : i32
    %55 = arith.addi %54, %c1552_i32 : i32
    %56 = llvm.load %3 : !llvm.ptr -> i32
    call @f2(%arg0, %53, %55, %56) : (!llvm.ptr, i32, i32, i32) -> ()
    %57 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_26 = arith.constant 0 : i32
    %58 = arith.cmpi ne, %57, %c0_i32_26 : i32
    cf.cond_br %58, ^bb13, ^bb14
  ^bb10:  // pred: ^bb7
    %c1_i32_27 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_27) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 3 preds: ^bb25, ^bb869, ^bb881
    %59 = llvm.load %1 : !llvm.ptr -> i32
    call @f112(%arg0, %59) : (!llvm.ptr, i32) -> ()
    %60 = llvm.load %1 : !llvm.ptr -> i32
    call @f113(%arg0, %60) : (!llvm.ptr, i32) -> ()
    %61 = llvm.load %3 : !llvm.ptr -> i32
    %c1664_i32_28 = arith.constant 1664 : i32
    %62 = arith.addi %61, %c1664_i32_28 : i32
    llvm.store %62, %8 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb12:  // 2 preds: ^bb860, ^bb873
    %63 = llvm.load %3 : !llvm.ptr -> i32
    %c144_i32 = arith.constant 144 : i32
    %64 = arith.addi %63, %c144_i32 : i32
    call @f3(%arg0, %64) : (!llvm.ptr, i32) -> ()
    %65 = llvm.load %3 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c1552_i64_29 = arith.constant 1552 : i64
    %66 = arith.extui %65 : i32 to i64
    %67 = arith.addi %66, %c1552_i64_29 : i64
    %c4_i64 = arith.constant 4 : i64
    %68 = arith.addi %67, %c4_i64 : i64
    %c0_i32_30 = arith.constant 0 : i32
    %69 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_30) : (!llvm.ptr, i32) -> i32
    %70 = arith.extui %69 : i32 to i64
    %c65536_i64_31 = arith.constant 65536 : i64
    %71 = arith.muli %70, %c65536_i64_31 : i64
    %72 = arith.cmpi ult, %68, %71 : i64
    cf.cond_br %72, ^bb875, ^bb876
  ^bb13:  // 5 preds: ^bb9, ^bb53, ^bb62, ^bb73, ^bb83
    %73 = llvm.load %3 : !llvm.ptr -> i32
    %c2_i32_32 = arith.constant 2 : i32
    %c520_i64 = arith.constant 520 : i64
    %74 = arith.extui %73 : i32 to i64
    %75 = arith.addi %74, %c520_i64 : i64
    %c4_i64_33 = arith.constant 4 : i64
    %76 = arith.addi %75, %c4_i64_33 : i64
    %c0_i32_34 = arith.constant 0 : i32
    %77 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_34) : (!llvm.ptr, i32) -> i32
    %78 = arith.extui %77 : i32 to i64
    %c65536_i64_35 = arith.constant 65536 : i64
    %79 = arith.muli %78, %c65536_i64_35 : i64
    %80 = arith.cmpi ult, %76, %79 : i64
    cf.cond_br %80, ^bb871, ^bb872
  ^bb14:  // pred: ^bb9
    %81 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64_36 = arith.constant 8 : i64
    %82 = arith.extui %81 : i32 to i64
    %83 = arith.addi %82, %c8_i64_36 : i64
    %c4_i64_37 = arith.constant 4 : i64
    %84 = arith.addi %83, %c4_i64_37 : i64
    %c0_i32_38 = arith.constant 0 : i32
    %85 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_38) : (!llvm.ptr, i32) -> i32
    %86 = arith.extui %85 : i32 to i64
    %c65536_i64_39 = arith.constant 65536 : i64
    %87 = arith.muli %86, %c65536_i64_39 : i64
    %88 = arith.cmpi ult, %84, %87 : i64
    cf.cond_br %88, ^bb16, ^bb17
  ^bb15:  // pred: ^bb16
    %89 = llvm.load %2 : !llvm.ptr -> i32
    %c-4_i32 = arith.constant -4 : i32
    %90 = arith.addi %89, %c-4_i32 : i32
    llvm.store %90, %4 : i32, !llvm.ptr
    %91 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_40 = arith.constant 4 : i64
    %92 = arith.extui %91 : i32 to i64
    %93 = arith.addi %92, %c4_i64_40 : i64
    %c4_i64_41 = arith.constant 4 : i64
    %94 = arith.addi %93, %c4_i64_41 : i64
    %c0_i32_42 = arith.constant 0 : i32
    %95 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_42) : (!llvm.ptr, i32) -> i32
    %96 = arith.extui %95 : i32 to i64
    %c65536_i64_43 = arith.constant 65536 : i64
    %97 = arith.muli %96, %c65536_i64_43 : i64
    %98 = arith.cmpi ult, %94, %97 : i64
    cf.cond_br %98, ^bb27, ^bb28
  ^bb16:  // 2 preds: ^bb14, ^bb17
    %99 = llvm.getelementptr %11[%83] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %100 = llvm.load volatile %99 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %100, %2 : i32, !llvm.ptr
    %c3_i32 = arith.constant 3 : i32
    %101 = arith.cmpi ugt, %100, %c3_i32 : i32
    %102 = arith.extui %101 : i1 to i32
    %c0_i32_44 = arith.constant 0 : i32
    %103 = arith.cmpi ne, %102, %c0_i32_44 : i32
    cf.cond_br %103, ^bb15, ^bb18
  ^bb17:  // pred: ^bb14
    %c1_i32_45 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_45) : (i32) -> ()
    cf.br ^bb16
  ^bb18:  // pred: ^bb16
    %104 = llvm.load %3 : !llvm.ptr -> i32
    %c2_i32_46 = arith.constant 2 : i32
    %c1552_i64_47 = arith.constant 1552 : i64
    %105 = arith.extui %104 : i32 to i64
    %106 = arith.addi %105, %c1552_i64_47 : i64
    %c4_i64_48 = arith.constant 4 : i64
    %107 = arith.addi %106, %c4_i64_48 : i64
    %c0_i32_49 = arith.constant 0 : i32
    %108 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_49) : (!llvm.ptr, i32) -> i32
    %109 = arith.extui %108 : i32 to i64
    %c65536_i64_50 = arith.constant 65536 : i64
    %110 = arith.muli %109, %c65536_i64_50 : i64
    %111 = arith.cmpi ult, %107, %110 : i64
    cf.cond_br %111, ^bb19, ^bb20
  ^bb19:  // 2 preds: ^bb18, ^bb20
    %112 = llvm.getelementptr %11[%106] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i32_46, %112 {alignment = 1 : i64} : i32, !llvm.ptr
    %113 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_51 = arith.constant 1552 : i32
    %114 = arith.addi %113, %c1552_i32_51 : i32
    call @f3(%arg0, %114) : (!llvm.ptr, i32) -> ()
    %115 = llvm.load %3 : !llvm.ptr -> i32
    %c2_i32_52 = arith.constant 2 : i32
    %c656_i64 = arith.constant 656 : i64
    %116 = arith.extui %115 : i32 to i64
    %117 = arith.addi %116, %c656_i64 : i64
    %c4_i64_53 = arith.constant 4 : i64
    %118 = arith.addi %117, %c4_i64_53 : i64
    %c0_i32_54 = arith.constant 0 : i32
    %119 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_54) : (!llvm.ptr, i32) -> i32
    %120 = arith.extui %119 : i32 to i64
    %c65536_i64_55 = arith.constant 65536 : i64
    %121 = arith.muli %120, %c65536_i64_55 : i64
    %122 = arith.cmpi ult, %118, %121 : i64
    cf.cond_br %122, ^bb21, ^bb22
  ^bb20:  // pred: ^bb18
    %c1_i32_56 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_56) : (i32) -> ()
    cf.br ^bb19
  ^bb21:  // 2 preds: ^bb19, ^bb22
    %123 = llvm.getelementptr %11[%117] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i32_52, %123 {alignment = 1 : i64} : i32, !llvm.ptr
    %124 = llvm.load %3 : !llvm.ptr -> i32
    %c656_i32 = arith.constant 656 : i32
    %125 = arith.addi %124, %c656_i32 : i32
    call @f3(%arg0, %125) : (!llvm.ptr, i32) -> ()
    %126 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %c8_i64_57 = arith.constant 8 : i64
    %127 = arith.extui %126 : i32 to i64
    %128 = arith.addi %127, %c8_i64_57 : i64
    %c8_i64_58 = arith.constant 8 : i64
    %129 = arith.addi %128, %c8_i64_58 : i64
    %c0_i32_59 = arith.constant 0 : i32
    %130 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_59) : (!llvm.ptr, i32) -> i32
    %131 = arith.extui %130 : i32 to i64
    %c65536_i64_60 = arith.constant 65536 : i64
    %132 = arith.muli %131, %c65536_i64_60 : i64
    %133 = arith.cmpi ult, %129, %132 : i64
    cf.cond_br %133, ^bb23, ^bb24
  ^bb22:  // pred: ^bb19
    %c1_i32_61 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_61) : (i32) -> ()
    cf.br ^bb21
  ^bb23:  // 2 preds: ^bb21, ^bb24
    %134 = llvm.getelementptr %11[%128] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64, %134 {alignment = 1 : i64} : i64, !llvm.ptr
    %135 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_62 = arith.constant 1 : i64
    %c0_i64_63 = arith.constant 0 : i64
    %136 = arith.extui %135 : i32 to i64
    %137 = arith.addi %136, %c0_i64_63 : i64
    %c8_i64_64 = arith.constant 8 : i64
    %138 = arith.addi %137, %c8_i64_64 : i64
    %c0_i32_65 = arith.constant 0 : i32
    %139 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_65) : (!llvm.ptr, i32) -> i32
    %140 = arith.extui %139 : i32 to i64
    %c65536_i64_66 = arith.constant 65536 : i64
    %141 = arith.muli %140, %c65536_i64_66 : i64
    %142 = arith.cmpi ult, %138, %141 : i64
    cf.cond_br %142, ^bb25, ^bb26
  ^bb24:  // pred: ^bb21
    %c1_i32_67 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_67) : (i32) -> ()
    cf.br ^bb23
  ^bb25:  // 2 preds: ^bb23, ^bb26
    %143 = llvm.getelementptr %11[%137] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_62, %143 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb11
  ^bb26:  // pred: ^bb23
    %c1_i32_68 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_68) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // 2 preds: ^bb15, ^bb28
    %144 = llvm.getelementptr %11[%93] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %145 = llvm.load volatile %144 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %145, %2 : i32, !llvm.ptr
    %c4_i32 = arith.constant 4 : i32
    %146 = arith.addi %145, %c4_i32 : i32
    llvm.store %146, %5 : i32, !llvm.ptr
    %147 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_69 = arith.constant 0 : i64
    %148 = arith.extui %147 : i32 to i64
    %149 = arith.addi %148, %c0_i64_69 : i64
    %c4_i64_70 = arith.constant 4 : i64
    %150 = arith.addi %149, %c4_i64_70 : i64
    %c0_i32_71 = arith.constant 0 : i32
    %151 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_71) : (!llvm.ptr, i32) -> i32
    %152 = arith.extui %151 : i32 to i64
    %c65536_i64_72 = arith.constant 65536 : i64
    %153 = arith.muli %152, %c65536_i64_72 : i64
    %154 = arith.cmpi ult, %150, %153 : i64
    cf.cond_br %154, ^bb35, ^bb36
  ^bb28:  // pred: ^bb15
    %c1_i32_73 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_73) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // 10 preds: ^bb608, ^bb645, ^bb661, ^bb669, ^bb745, ^bb773, ^bb781, ^bb818, ^bb834, ^bb862
    %155 = llvm.load %0 : !llvm.ptr -> i32
    %156 = llvm.load %3 : !llvm.ptr -> i32
    %c144_i64 = arith.constant 144 : i64
    %157 = arith.extui %156 : i32 to i64
    %158 = arith.addi %157, %c144_i64 : i64
    %c8_i64_74 = arith.constant 8 : i64
    %159 = arith.addi %158, %c8_i64_74 : i64
    %c0_i32_75 = arith.constant 0 : i32
    %160 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_75) : (!llvm.ptr, i32) -> i32
    %161 = arith.extui %160 : i32 to i64
    %c65536_i64_76 = arith.constant 65536 : i64
    %162 = arith.muli %161, %c65536_i64_76 : i64
    %163 = arith.cmpi ult, %159, %162 : i64
    cf.cond_br %163, ^bb863, ^bb864
  ^bb30:  // 27 preds: ^bb60, ^bb69, ^bb80, ^bb90, ^bb105, ^bb113, ^bb129, ^bb145, ^bb153, ^bb171, ^bb187, ^bb224, ^bb240, ^bb268, ^bb284, ^bb345, ^bb361, ^bb369, ^bb442, ^bb458, ^bb466, ^bb520, ^bb536, ^bb544, ^bb584, ^bb600, ^bb850
    %164 = llvm.load %3 : !llvm.ptr -> i32
    %c144_i32_77 = arith.constant 144 : i32
    %165 = arith.addi %164, %c144_i32_77 : i32
    %c8_i32 = arith.constant 8 : i32
    %166 = arith.addi %165, %c8_i32 : i32
    %167 = llvm.load %3 : !llvm.ptr -> i32
    %c520_i32 = arith.constant 520 : i32
    %168 = arith.addi %167, %c520_i32 : i32
    %c8_i32_78 = arith.constant 8 : i32
    %169 = arith.addi %168, %c8_i32_78 : i32
    %c0_i64_79 = arith.constant 0 : i64
    %170 = arith.extui %169 : i32 to i64
    %171 = arith.addi %170, %c0_i64_79 : i64
    %c8_i64_80 = arith.constant 8 : i64
    %172 = arith.addi %171, %c8_i64_80 : i64
    %c0_i32_81 = arith.constant 0 : i32
    %173 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_81) : (!llvm.ptr, i32) -> i32
    %174 = arith.extui %173 : i32 to i64
    %c65536_i64_82 = arith.constant 65536 : i64
    %175 = arith.muli %174, %c65536_i64_82 : i64
    %176 = arith.cmpi ult, %172, %175 : i64
    cf.cond_br %176, ^bb852, ^bb853
  ^bb31:  // pred: ^bb94
    %177 = llvm.load %3 : !llvm.ptr -> i32
    %c768_i32 = arith.constant 768 : i32
    %178 = arith.addi %177, %c768_i32 : i32
    %c16_i32 = arith.constant 16 : i32
    %179 = arith.addi %178, %c16_i32 : i32
    %180 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_83 = arith.constant 1552 : i32
    %181 = arith.addi %180, %c1552_i32_83 : i32
    %c16_i32_84 = arith.constant 16 : i32
    %182 = arith.addi %181, %c16_i32_84 : i32
    %c0_i64_85 = arith.constant 0 : i64
    %183 = arith.extui %182 : i32 to i64
    %184 = arith.addi %183, %c0_i64_85 : i64
    %c8_i64_86 = arith.constant 8 : i64
    %185 = arith.addi %184, %c8_i64_86 : i64
    %c0_i32_87 = arith.constant 0 : i32
    %186 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_87) : (!llvm.ptr, i32) -> i32
    %187 = arith.extui %186 : i32 to i64
    %c65536_i64_88 = arith.constant 65536 : i64
    %188 = arith.muli %187, %c65536_i64_88 : i64
    %189 = arith.cmpi ult, %185, %188 : i64
    cf.cond_br %189, ^bb836, ^bb837
  ^bb32:  // pred: ^bb37
    %190 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_89 = arith.constant 1552 : i32
    %191 = arith.addi %190, %c1552_i32_89 : i32
    %192 = llvm.load %3 : !llvm.ptr -> i32
    %c144_i32_90 = arith.constant 144 : i32
    %193 = arith.addi %192, %c144_i32_90 : i32
    call @f72(%arg0, %191, %193) : (!llvm.ptr, i32, i32) -> ()
    %194 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_91 = arith.constant 1552 : i32
    %195 = arith.addi %194, %c1552_i32_91 : i32
    %c1048680_i32 = arith.constant 1048680 : i32
    %196 = call @f101(%arg0, %195, %c1048680_i32) : (!llvm.ptr, i32, i32) -> i32
    %c0_i32_92 = arith.constant 0 : i32
    %197 = arith.cmpi ne, %196, %c0_i32_92 : i32
    cf.cond_br %197, ^bb775, ^bb776
  ^bb33:  // pred: ^bb38
    %198 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_93 = arith.constant 1552 : i32
    %199 = arith.addi %198, %c1552_i32_93 : i32
    %200 = llvm.load %3 : !llvm.ptr -> i32
    %c144_i32_94 = arith.constant 144 : i32
    %201 = arith.addi %200, %c144_i32_94 : i32
    call @f72(%arg0, %199, %201) : (!llvm.ptr, i32, i32) -> ()
    %202 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_95 = arith.constant 1552 : i32
    %203 = arith.addi %202, %c1552_i32_95 : i32
    %c1048680_i32_96 = arith.constant 1048680 : i32
    %204 = call @f101(%arg0, %203, %c1048680_i32_96) : (!llvm.ptr, i32, i32) -> i32
    %c0_i32_97 = arith.constant 0 : i32
    %205 = arith.cmpi ne, %204, %c0_i32_97 : i32
    cf.cond_br %205, ^bb663, ^bb664
  ^bb34:  // pred: ^bb35
    %206 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_98 = arith.constant 1552 : i32
    %207 = arith.addi %206, %c1552_i32_98 : i32
    %208 = llvm.load %3 : !llvm.ptr -> i32
    %c144_i32_99 = arith.constant 144 : i32
    %209 = arith.addi %208, %c144_i32_99 : i32
    call @f72(%arg0, %207, %209) : (!llvm.ptr, i32, i32) -> ()
    %210 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_100 = arith.constant 1552 : i32
    %211 = arith.addi %210, %c1552_i32_100 : i32
    %c1048680_i32_101 = arith.constant 1048680 : i32
    %212 = call @f101(%arg0, %211, %c1048680_i32_101) : (!llvm.ptr, i32, i32) -> i32
    %c0_i32_102 = arith.constant 0 : i32
    %213 = arith.cmpi ne, %212, %c0_i32_102 : i32
    cf.cond_br %213, ^bb602, ^bb603
  ^bb35:  // 2 preds: ^bb27, ^bb36
    %214 = llvm.getelementptr %11[%149] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %215 = llvm.load volatile %214 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %215, %2 : i32, !llvm.ptr
    %c24_i32 = arith.constant 24 : i32
    %c31_i32 = arith.constant 31 : i32
    %216 = arith.cmpi ule, %c24_i32, %c31_i32 : i32
    %217 = scf.if %216 -> (i32) {
      %4447 = arith.shli %215, %c24_i32 : i32
      scf.yield %4447 : i32
    } else {
      %c0_i32_2410 = arith.constant 0 : i32
      scf.yield %c0_i32_2410 : i32
    }
    %218 = llvm.load %2 : !llvm.ptr -> i32
    %c65280_i32 = arith.constant 65280 : i32
    %219 = arith.andi %218, %c65280_i32 : i32
    %c8_i32_103 = arith.constant 8 : i32
    %c31_i32_104 = arith.constant 31 : i32
    %220 = arith.cmpi ule, %c8_i32_103, %c31_i32_104 : i32
    %221 = scf.if %220 -> (i32) {
      %4447 = arith.shli %219, %c8_i32_103 : i32
      scf.yield %4447 : i32
    } else {
      %c0_i32_2410 = arith.constant 0 : i32
      scf.yield %c0_i32_2410 : i32
    }
    %222 = arith.ori %217, %221 : i32
    %223 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_105 = arith.constant 8 : i32
    %c31_i32_106 = arith.constant 31 : i32
    %224 = arith.cmpi ule, %c8_i32_105, %c31_i32_106 : i32
    %225 = scf.if %224 -> (i32) {
      %4447 = arith.shrui %223, %c8_i32_105 : i32
      scf.yield %4447 : i32
    } else {
      %c0_i32_2410 = arith.constant 0 : i32
      scf.yield %c0_i32_2410 : i32
    }
    %c65280_i32_107 = arith.constant 65280 : i32
    %226 = arith.andi %225, %c65280_i32_107 : i32
    %227 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_108 = arith.constant 24 : i32
    %c31_i32_109 = arith.constant 31 : i32
    %228 = arith.cmpi ule, %c24_i32_108, %c31_i32_109 : i32
    %229 = scf.if %228 -> (i32) {
      %4447 = arith.shrui %227, %c24_i32_108 : i32
      scf.yield %4447 : i32
    } else {
      %c0_i32_2410 = arith.constant 0 : i32
      scf.yield %c0_i32_2410 : i32
    }
    %230 = arith.ori %226, %229 : i32
    %231 = arith.ori %222, %230 : i32
    llvm.store %231, %2 : i32, !llvm.ptr
    %c-1603195544_i32 = arith.constant -1603195544 : i32
    %232 = arith.cmpi eq, %231, %c-1603195544_i32 : i32
    %233 = arith.extui %232 : i1 to i32
    %c0_i32_110 = arith.constant 0 : i32
    %234 = arith.cmpi ne, %233, %c0_i32_110 : i32
    cf.cond_br %234, ^bb34, ^bb37
  ^bb36:  // pred: ^bb27
    %c1_i32_111 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_111) : (i32) -> ()
    cf.br ^bb35
  ^bb37:  // pred: ^bb35
    %235 = llvm.load %2 : !llvm.ptr -> i32
    %c1117154408_i32 = arith.constant 1117154408 : i32
    %236 = arith.cmpi eq, %235, %c1117154408_i32 : i32
    %237 = arith.extui %236 : i1 to i32
    %c0_i32_112 = arith.constant 0 : i32
    %238 = arith.cmpi ne, %237, %c0_i32_112 : i32
    cf.cond_br %238, ^bb32, ^bb38
  ^bb38:  // pred: ^bb37
    %239 = llvm.load %2 : !llvm.ptr -> i32
    %c1150964472_i32 = arith.constant 1150964472 : i32
    %240 = arith.cmpi eq, %239, %c1150964472_i32 : i32
    %241 = arith.extui %240 : i1 to i32
    %c0_i32_113 = arith.constant 0 : i32
    %242 = arith.cmpi ne, %241, %c0_i32_113 : i32
    cf.cond_br %242, ^bb33, ^bb39
  ^bb39:  // pred: ^bb38
    %243 = llvm.load %2 : !llvm.ptr -> i32
    %c157198258_i32 = arith.constant 157198258 : i32
    %244 = arith.cmpi sgt, %243, %c157198258_i32 : i32
    %245 = arith.extui %244 : i1 to i32
    %c0_i32_114 = arith.constant 0 : i32
    %246 = arith.cmpi ne, %245, %c0_i32_114 : i32
    cf.cond_br %246, ^bb49, ^bb50
  ^bb40:  // pred: ^bb51
    %247 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_115 = arith.constant 1552 : i32
    %248 = arith.addi %247, %c1552_i32_115 : i32
    %249 = llvm.load %3 : !llvm.ptr -> i32
    %c144_i32_116 = arith.constant 144 : i32
    %250 = arith.addi %249, %c144_i32_116 : i32
    call @f72(%arg0, %248, %250) : (!llvm.ptr, i32, i32) -> ()
    %251 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_117 = arith.constant 1552 : i32
    %252 = arith.addi %251, %c1552_i32_117 : i32
    %c1048680_i32_118 = arith.constant 1048680 : i32
    %253 = call @f101(%arg0, %252, %c1048680_i32_118) : (!llvm.ptr, i32, i32) -> i32
    %c0_i32_119 = arith.constant 0 : i32
    %254 = arith.cmpi ne, %253, %c0_i32_119 : i32
    cf.cond_br %254, ^bb538, ^bb539
  ^bb41:  // pred: ^bb72
    %255 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_120 = arith.constant 1552 : i32
    %256 = arith.addi %255, %c1552_i32_120 : i32
    %257 = llvm.load %3 : !llvm.ptr -> i32
    %c144_i32_121 = arith.constant 144 : i32
    %258 = arith.addi %257, %c144_i32_121 : i32
    call @f72(%arg0, %256, %258) : (!llvm.ptr, i32, i32) -> ()
    %259 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_122 = arith.constant 1552 : i32
    %260 = arith.addi %259, %c1552_i32_122 : i32
    %c1048680_i32_123 = arith.constant 1048680 : i32
    %261 = call @f101(%arg0, %260, %c1048680_i32_123) : (!llvm.ptr, i32, i32) -> i32
    %c0_i32_124 = arith.constant 0 : i32
    %262 = arith.cmpi ne, %261, %c0_i32_124 : i32
    cf.cond_br %262, ^bb460, ^bb461
  ^bb42:  // pred: ^bb71
    %263 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_125 = arith.constant 1552 : i32
    %264 = arith.addi %263, %c1552_i32_125 : i32
    %265 = llvm.load %3 : !llvm.ptr -> i32
    %c144_i32_126 = arith.constant 144 : i32
    %266 = arith.addi %265, %c144_i32_126 : i32
    call @f72(%arg0, %264, %266) : (!llvm.ptr, i32, i32) -> ()
    %267 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_127 = arith.constant 1552 : i32
    %268 = arith.addi %267, %c1552_i32_127 : i32
    %c1048680_i32_128 = arith.constant 1048680 : i32
    %269 = call @f101(%arg0, %268, %c1048680_i32_128) : (!llvm.ptr, i32, i32) -> i32
    %c0_i32_129 = arith.constant 0 : i32
    %270 = arith.cmpi ne, %269, %c0_i32_129 : i32
    cf.cond_br %270, ^bb363, ^bb364
  ^bb43:  // pred: ^bb54
    %271 = llvm.load %3 : !llvm.ptr -> i32
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %c1284_i64 = arith.constant 1284 : i64
    %272 = arith.extui %271 : i32 to i64
    %273 = arith.addi %272, %c1284_i64 : i64
    %c4_i64_130 = arith.constant 4 : i64
    %274 = arith.addi %273, %c4_i64_130 : i64
    %c0_i32_131 = arith.constant 0 : i32
    %275 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_131) : (!llvm.ptr, i32) -> i32
    %276 = arith.extui %275 : i32 to i64
    %c65536_i64_132 = arith.constant 65536 : i64
    %277 = arith.muli %276, %c65536_i64_132 : i64
    %278 = arith.cmpi ult, %274, %277 : i64
    cf.cond_br %278, ^bb286, ^bb287
  ^bb44:  // pred: ^bb84
    %279 = llvm.load %3 : !llvm.ptr -> i32
    %c-2147483648_i32_133 = arith.constant -2147483648 : i32
    %c1284_i64_134 = arith.constant 1284 : i64
    %280 = arith.extui %279 : i32 to i64
    %281 = arith.addi %280, %c1284_i64_134 : i64
    %c4_i64_135 = arith.constant 4 : i64
    %282 = arith.addi %281, %c4_i64_135 : i64
    %c0_i32_136 = arith.constant 0 : i32
    %283 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_136) : (!llvm.ptr, i32) -> i32
    %284 = arith.extui %283 : i32 to i64
    %c65536_i64_137 = arith.constant 65536 : i64
    %285 = arith.muli %284, %c65536_i64_137 : i64
    %286 = arith.cmpi ult, %282, %285 : i64
    cf.cond_br %286, ^bb242, ^bb243
  ^bb45:  // pred: ^bb74
    %287 = llvm.load %3 : !llvm.ptr -> i32
    %c-2147483648_i32_138 = arith.constant -2147483648 : i32
    %c1284_i64_139 = arith.constant 1284 : i64
    %288 = arith.extui %287 : i32 to i64
    %289 = arith.addi %288, %c1284_i64_139 : i64
    %c4_i64_140 = arith.constant 4 : i64
    %290 = arith.addi %289, %c4_i64_140 : i64
    %c0_i32_141 = arith.constant 0 : i32
    %291 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_141) : (!llvm.ptr, i32) -> i32
    %292 = arith.extui %291 : i32 to i64
    %c65536_i64_142 = arith.constant 65536 : i64
    %293 = arith.muli %292, %c65536_i64_142 : i64
    %294 = arith.cmpi ult, %290, %293 : i64
    cf.cond_br %294, ^bb189, ^bb190
  ^bb46:  // pred: ^bb82
    %295 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_143 = arith.constant 1552 : i32
    %296 = arith.addi %295, %c1552_i32_143 : i32
    %297 = llvm.load %3 : !llvm.ptr -> i32
    %c144_i32_144 = arith.constant 144 : i32
    %298 = arith.addi %297, %c144_i32_144 : i32
    call @f72(%arg0, %296, %298) : (!llvm.ptr, i32, i32) -> ()
    %299 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_145 = arith.constant 1552 : i32
    %300 = arith.addi %299, %c1552_i32_145 : i32
    %c1048680_i32_146 = arith.constant 1048680 : i32
    %301 = call @f101(%arg0, %300, %c1048680_i32_146) : (!llvm.ptr, i32, i32) -> i32
    %c0_i32_147 = arith.constant 0 : i32
    %302 = arith.cmpi ne, %301, %c0_i32_147 : i32
    cf.cond_br %302, ^bb147, ^bb148
  ^bb47:  // pred: ^bb52
    %303 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_148 = arith.constant 1552 : i32
    %304 = arith.addi %303, %c1552_i32_148 : i32
    %305 = llvm.load %3 : !llvm.ptr -> i32
    %c144_i32_149 = arith.constant 144 : i32
    %306 = arith.addi %305, %c144_i32_149 : i32
    call @f72(%arg0, %304, %306) : (!llvm.ptr, i32, i32) -> ()
    %307 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_150 = arith.constant 1552 : i32
    %308 = arith.addi %307, %c1552_i32_150 : i32
    %c1048680_i32_151 = arith.constant 1048680 : i32
    %309 = call @f101(%arg0, %308, %c1048680_i32_151) : (!llvm.ptr, i32, i32) -> i32
    %c0_i32_152 = arith.constant 0 : i32
    %310 = arith.cmpi ne, %309, %c0_i32_152 : i32
    cf.cond_br %310, ^bb107, ^bb108
  ^bb48:  // pred: ^bb63
    %311 = llvm.load %3 : !llvm.ptr -> i32
    %c-2147483648_i32_153 = arith.constant -2147483648 : i32
    %c1284_i64_154 = arith.constant 1284 : i64
    %312 = arith.extui %311 : i32 to i64
    %313 = arith.addi %312, %c1284_i64_154 : i64
    %c4_i64_155 = arith.constant 4 : i64
    %314 = arith.addi %313, %c4_i64_155 : i64
    %c0_i32_156 = arith.constant 0 : i32
    %315 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_156) : (!llvm.ptr, i32) -> i32
    %316 = arith.extui %315 : i32 to i64
    %c65536_i64_157 = arith.constant 65536 : i64
    %317 = arith.muli %316, %c65536_i64_157 : i64
    %318 = arith.cmpi ult, %314, %317 : i64
    cf.cond_br %318, ^bb92, ^bb93
  ^bb49:  // pred: ^bb39
    %319 = llvm.load %2 : !llvm.ptr -> i32
    %c599290588_i32 = arith.constant 599290588 : i32
    %320 = arith.cmpi sgt, %319, %c599290588_i32 : i32
    %321 = arith.extui %320 : i1 to i32
    %c0_i32_158 = arith.constant 0 : i32
    %322 = arith.cmpi ne, %321, %c0_i32_158 : i32
    cf.cond_br %322, ^bb71, ^bb72
  ^bb50:  // pred: ^bb39
    %323 = llvm.load %2 : !llvm.ptr -> i32
    %c-580719299_i32 = arith.constant -580719299 : i32
    %324 = arith.cmpi sgt, %323, %c-580719299_i32 : i32
    %325 = arith.extui %324 : i1 to i32
    %c0_i32_159 = arith.constant 0 : i32
    %326 = arith.cmpi ne, %325, %c0_i32_159 : i32
    cf.cond_br %326, ^bb51, ^bb52
  ^bb51:  // pred: ^bb50
    %327 = llvm.load %2 : !llvm.ptr -> i32
    %c-580719298_i32 = arith.constant -580719298 : i32
    %328 = arith.cmpi eq, %327, %c-580719298_i32 : i32
    %329 = arith.extui %328 : i1 to i32
    %c0_i32_160 = arith.constant 0 : i32
    %330 = arith.cmpi ne, %329, %c0_i32_160 : i32
    cf.cond_br %330, ^bb40, ^bb62
  ^bb52:  // pred: ^bb50
    %331 = llvm.load %2 : !llvm.ptr -> i32
    %c-1780966591_i32 = arith.constant -1780966591 : i32
    %332 = arith.cmpi eq, %331, %c-1780966591_i32 : i32
    %333 = arith.extui %332 : i1 to i32
    %c0_i32_161 = arith.constant 0 : i32
    %334 = arith.cmpi ne, %333, %c0_i32_161 : i32
    cf.cond_br %334, ^bb47, ^bb53
  ^bb53:  // pred: ^bb52
    %335 = llvm.load %2 : !llvm.ptr -> i32
    %c-1459249989_i32 = arith.constant -1459249989 : i32
    %336 = arith.cmpi eq, %335, %c-1459249989_i32 : i32
    %337 = arith.extui %336 : i1 to i32
    %c0_i32_162 = arith.constant 0 : i32
    %338 = arith.cmpi eq, %337, %c0_i32_162 : i32
    %339 = arith.extui %338 : i1 to i32
    %c0_i32_163 = arith.constant 0 : i32
    %340 = arith.cmpi ne, %339, %c0_i32_163 : i32
    cf.cond_br %340, ^bb13, ^bb54
  ^bb54:  // pred: ^bb53
    %341 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_164 = arith.constant 1552 : i32
    %342 = arith.addi %341, %c1552_i32_164 : i32
    %343 = llvm.load %3 : !llvm.ptr -> i32
    %c144_i32_165 = arith.constant 144 : i32
    %344 = arith.addi %343, %c144_i32_165 : i32
    call @f72(%arg0, %342, %344) : (!llvm.ptr, i32, i32) -> ()
    %345 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_166 = arith.constant 1552 : i32
    %346 = arith.addi %345, %c1552_i32_166 : i32
    %c1048680_i32_167 = arith.constant 1048680 : i32
    %347 = call @f101(%arg0, %346, %c1048680_i32_167) : (!llvm.ptr, i32, i32) -> i32
    %c0_i32_168 = arith.constant 0 : i32
    %348 = arith.cmpi ne, %347, %c0_i32_168 : i32
    cf.cond_br %348, ^bb43, ^bb55
  ^bb55:  // pred: ^bb54
    %349 = llvm.load %3 : !llvm.ptr -> i32
    %c532_i32 = arith.constant 532 : i32
    %350 = arith.addi %349, %c532_i32 : i32
    %c0_i32_169 = arith.constant 0 : i32
    %c0_i64_170 = arith.constant 0 : i64
    %351 = arith.extui %350 : i32 to i64
    %352 = arith.addi %351, %c0_i64_170 : i64
    %c4_i64_171 = arith.constant 4 : i64
    %353 = arith.addi %352, %c4_i64_171 : i64
    %c0_i32_172 = arith.constant 0 : i32
    %354 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_172) : (!llvm.ptr, i32) -> i32
    %355 = arith.extui %354 : i32 to i64
    %c65536_i64_173 = arith.constant 65536 : i64
    %356 = arith.muli %355, %c65536_i64_173 : i64
    %357 = arith.cmpi ult, %353, %356 : i64
    cf.cond_br %357, ^bb56, ^bb57
  ^bb56:  // 2 preds: ^bb55, ^bb57
    %358 = llvm.getelementptr %11[%352] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_169, %358 {alignment = 1 : i64} : i32, !llvm.ptr
    %359 = llvm.load %3 : !llvm.ptr -> i32
    %c4294967296_i64 = arith.constant 4294967296 : i64
    %c524_i64 = arith.constant 524 : i64
    %360 = arith.extui %359 : i32 to i64
    %361 = arith.addi %360, %c524_i64 : i64
    %c8_i64_174 = arith.constant 8 : i64
    %362 = arith.addi %361, %c8_i64_174 : i64
    %c0_i32_175 = arith.constant 0 : i32
    %363 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_175) : (!llvm.ptr, i32) -> i32
    %364 = arith.extui %363 : i32 to i64
    %c65536_i64_176 = arith.constant 65536 : i64
    %365 = arith.muli %364, %c65536_i64_176 : i64
    %366 = arith.cmpi ult, %362, %365 : i64
    cf.cond_br %366, ^bb58, ^bb59
  ^bb57:  // pred: ^bb55
    %c1_i32_177 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_177) : (i32) -> ()
    cf.br ^bb56
  ^bb58:  // 2 preds: ^bb56, ^bb59
    %367 = llvm.getelementptr %11[%361] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4294967296_i64, %367 {alignment = 1 : i64} : i64, !llvm.ptr
    %368 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_178 = arith.constant 1 : i32
    %c520_i64_179 = arith.constant 520 : i64
    %369 = arith.extui %368 : i32 to i64
    %370 = arith.addi %369, %c520_i64_179 : i64
    %c4_i64_180 = arith.constant 4 : i64
    %371 = arith.addi %370, %c4_i64_180 : i64
    %c0_i32_181 = arith.constant 0 : i32
    %372 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_181) : (!llvm.ptr, i32) -> i32
    %373 = arith.extui %372 : i32 to i64
    %c65536_i64_182 = arith.constant 65536 : i64
    %374 = arith.muli %373, %c65536_i64_182 : i64
    %375 = arith.cmpi ult, %371, %374 : i64
    cf.cond_br %375, ^bb60, ^bb61
  ^bb59:  // pred: ^bb56
    %c1_i32_183 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_183) : (i32) -> ()
    cf.br ^bb58
  ^bb60:  // 2 preds: ^bb58, ^bb61
    %376 = llvm.getelementptr %11[%370] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_178, %376 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb30
  ^bb61:  // pred: ^bb58
    %c1_i32_184 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_184) : (i32) -> ()
    cf.br ^bb60
  ^bb62:  // pred: ^bb51
    %377 = llvm.load %2 : !llvm.ptr -> i32
    %c117300739_i32 = arith.constant 117300739 : i32
    %378 = arith.cmpi eq, %377, %c117300739_i32 : i32
    %379 = arith.extui %378 : i1 to i32
    %c0_i32_185 = arith.constant 0 : i32
    %380 = arith.cmpi eq, %379, %c0_i32_185 : i32
    %381 = arith.extui %380 : i1 to i32
    %c0_i32_186 = arith.constant 0 : i32
    %382 = arith.cmpi ne, %381, %c0_i32_186 : i32
    cf.cond_br %382, ^bb13, ^bb63
  ^bb63:  // pred: ^bb62
    %383 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_187 = arith.constant 1552 : i32
    %384 = arith.addi %383, %c1552_i32_187 : i32
    %385 = llvm.load %3 : !llvm.ptr -> i32
    %c144_i32_188 = arith.constant 144 : i32
    %386 = arith.addi %385, %c144_i32_188 : i32
    call @f72(%arg0, %384, %386) : (!llvm.ptr, i32, i32) -> ()
    %387 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_189 = arith.constant 1552 : i32
    %388 = arith.addi %387, %c1552_i32_189 : i32
    %c1048680_i32_190 = arith.constant 1048680 : i32
    %389 = call @f101(%arg0, %388, %c1048680_i32_190) : (!llvm.ptr, i32, i32) -> i32
    %c0_i32_191 = arith.constant 0 : i32
    %390 = arith.cmpi ne, %389, %c0_i32_191 : i32
    cf.cond_br %390, ^bb48, ^bb64
  ^bb64:  // pred: ^bb63
    %391 = llvm.load %3 : !llvm.ptr -> i32
    %c532_i32_192 = arith.constant 532 : i32
    %392 = arith.addi %391, %c532_i32_192 : i32
    %c0_i32_193 = arith.constant 0 : i32
    %c0_i64_194 = arith.constant 0 : i64
    %393 = arith.extui %392 : i32 to i64
    %394 = arith.addi %393, %c0_i64_194 : i64
    %c4_i64_195 = arith.constant 4 : i64
    %395 = arith.addi %394, %c4_i64_195 : i64
    %c0_i32_196 = arith.constant 0 : i32
    %396 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_196) : (!llvm.ptr, i32) -> i32
    %397 = arith.extui %396 : i32 to i64
    %c65536_i64_197 = arith.constant 65536 : i64
    %398 = arith.muli %397, %c65536_i64_197 : i64
    %399 = arith.cmpi ult, %395, %398 : i64
    cf.cond_br %399, ^bb65, ^bb66
  ^bb65:  // 2 preds: ^bb64, ^bb66
    %400 = llvm.getelementptr %11[%394] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_193, %400 {alignment = 1 : i64} : i32, !llvm.ptr
    %401 = llvm.load %3 : !llvm.ptr -> i32
    %c4294967296_i64_198 = arith.constant 4294967296 : i64
    %c524_i64_199 = arith.constant 524 : i64
    %402 = arith.extui %401 : i32 to i64
    %403 = arith.addi %402, %c524_i64_199 : i64
    %c8_i64_200 = arith.constant 8 : i64
    %404 = arith.addi %403, %c8_i64_200 : i64
    %c0_i32_201 = arith.constant 0 : i32
    %405 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_201) : (!llvm.ptr, i32) -> i32
    %406 = arith.extui %405 : i32 to i64
    %c65536_i64_202 = arith.constant 65536 : i64
    %407 = arith.muli %406, %c65536_i64_202 : i64
    %408 = arith.cmpi ult, %404, %407 : i64
    cf.cond_br %408, ^bb67, ^bb68
  ^bb66:  // pred: ^bb64
    %c1_i32_203 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_203) : (i32) -> ()
    cf.br ^bb65
  ^bb67:  // 2 preds: ^bb65, ^bb68
    %409 = llvm.getelementptr %11[%403] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4294967296_i64_198, %409 {alignment = 1 : i64} : i64, !llvm.ptr
    %410 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_204 = arith.constant 1 : i32
    %c520_i64_205 = arith.constant 520 : i64
    %411 = arith.extui %410 : i32 to i64
    %412 = arith.addi %411, %c520_i64_205 : i64
    %c4_i64_206 = arith.constant 4 : i64
    %413 = arith.addi %412, %c4_i64_206 : i64
    %c0_i32_207 = arith.constant 0 : i32
    %414 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_207) : (!llvm.ptr, i32) -> i32
    %415 = arith.extui %414 : i32 to i64
    %c65536_i64_208 = arith.constant 65536 : i64
    %416 = arith.muli %415, %c65536_i64_208 : i64
    %417 = arith.cmpi ult, %413, %416 : i64
    cf.cond_br %417, ^bb69, ^bb70
  ^bb68:  // pred: ^bb65
    %c1_i32_209 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_209) : (i32) -> ()
    cf.br ^bb67
  ^bb69:  // 2 preds: ^bb67, ^bb70
    %418 = llvm.getelementptr %11[%412] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_204, %418 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb30
  ^bb70:  // pred: ^bb67
    %c1_i32_210 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_210) : (i32) -> ()
    cf.br ^bb69
  ^bb71:  // pred: ^bb49
    %419 = llvm.load %2 : !llvm.ptr -> i32
    %c599290589_i32 = arith.constant 599290589 : i32
    %420 = arith.cmpi eq, %419, %c599290589_i32 : i32
    %421 = arith.extui %420 : i1 to i32
    %c0_i32_211 = arith.constant 0 : i32
    %422 = arith.cmpi ne, %421, %c0_i32_211 : i32
    cf.cond_br %422, ^bb42, ^bb82
  ^bb72:  // pred: ^bb49
    %423 = llvm.load %2 : !llvm.ptr -> i32
    %c157198259_i32 = arith.constant 157198259 : i32
    %424 = arith.cmpi eq, %423, %c157198259_i32 : i32
    %425 = arith.extui %424 : i1 to i32
    %c0_i32_212 = arith.constant 0 : i32
    %426 = arith.cmpi ne, %425, %c0_i32_212 : i32
    cf.cond_br %426, ^bb41, ^bb73
  ^bb73:  // pred: ^bb72
    %427 = llvm.load %2 : !llvm.ptr -> i32
    %c404098525_i32 = arith.constant 404098525 : i32
    %428 = arith.cmpi eq, %427, %c404098525_i32 : i32
    %429 = arith.extui %428 : i1 to i32
    %c0_i32_213 = arith.constant 0 : i32
    %430 = arith.cmpi eq, %429, %c0_i32_213 : i32
    %431 = arith.extui %430 : i1 to i32
    %c0_i32_214 = arith.constant 0 : i32
    %432 = arith.cmpi ne, %431, %c0_i32_214 : i32
    cf.cond_br %432, ^bb13, ^bb74
  ^bb74:  // pred: ^bb73
    %433 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_215 = arith.constant 1552 : i32
    %434 = arith.addi %433, %c1552_i32_215 : i32
    %435 = llvm.load %3 : !llvm.ptr -> i32
    %c144_i32_216 = arith.constant 144 : i32
    %436 = arith.addi %435, %c144_i32_216 : i32
    call @f72(%arg0, %434, %436) : (!llvm.ptr, i32, i32) -> ()
    %437 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_217 = arith.constant 1552 : i32
    %438 = arith.addi %437, %c1552_i32_217 : i32
    %c1048680_i32_218 = arith.constant 1048680 : i32
    %439 = call @f101(%arg0, %438, %c1048680_i32_218) : (!llvm.ptr, i32, i32) -> i32
    %c0_i32_219 = arith.constant 0 : i32
    %440 = arith.cmpi ne, %439, %c0_i32_219 : i32
    cf.cond_br %440, ^bb45, ^bb75
  ^bb75:  // pred: ^bb74
    %441 = llvm.load %3 : !llvm.ptr -> i32
    %c532_i32_220 = arith.constant 532 : i32
    %442 = arith.addi %441, %c532_i32_220 : i32
    %c0_i32_221 = arith.constant 0 : i32
    %c0_i64_222 = arith.constant 0 : i64
    %443 = arith.extui %442 : i32 to i64
    %444 = arith.addi %443, %c0_i64_222 : i64
    %c4_i64_223 = arith.constant 4 : i64
    %445 = arith.addi %444, %c4_i64_223 : i64
    %c0_i32_224 = arith.constant 0 : i32
    %446 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_224) : (!llvm.ptr, i32) -> i32
    %447 = arith.extui %446 : i32 to i64
    %c65536_i64_225 = arith.constant 65536 : i64
    %448 = arith.muli %447, %c65536_i64_225 : i64
    %449 = arith.cmpi ult, %445, %448 : i64
    cf.cond_br %449, ^bb76, ^bb77
  ^bb76:  // 2 preds: ^bb75, ^bb77
    %450 = llvm.getelementptr %11[%444] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_221, %450 {alignment = 1 : i64} : i32, !llvm.ptr
    %451 = llvm.load %3 : !llvm.ptr -> i32
    %c4294967296_i64_226 = arith.constant 4294967296 : i64
    %c524_i64_227 = arith.constant 524 : i64
    %452 = arith.extui %451 : i32 to i64
    %453 = arith.addi %452, %c524_i64_227 : i64
    %c8_i64_228 = arith.constant 8 : i64
    %454 = arith.addi %453, %c8_i64_228 : i64
    %c0_i32_229 = arith.constant 0 : i32
    %455 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_229) : (!llvm.ptr, i32) -> i32
    %456 = arith.extui %455 : i32 to i64
    %c65536_i64_230 = arith.constant 65536 : i64
    %457 = arith.muli %456, %c65536_i64_230 : i64
    %458 = arith.cmpi ult, %454, %457 : i64
    cf.cond_br %458, ^bb78, ^bb79
  ^bb77:  // pred: ^bb75
    %c1_i32_231 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_231) : (i32) -> ()
    cf.br ^bb76
  ^bb78:  // 2 preds: ^bb76, ^bb79
    %459 = llvm.getelementptr %11[%453] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4294967296_i64_226, %459 {alignment = 1 : i64} : i64, !llvm.ptr
    %460 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_232 = arith.constant 1 : i32
    %c520_i64_233 = arith.constant 520 : i64
    %461 = arith.extui %460 : i32 to i64
    %462 = arith.addi %461, %c520_i64_233 : i64
    %c4_i64_234 = arith.constant 4 : i64
    %463 = arith.addi %462, %c4_i64_234 : i64
    %c0_i32_235 = arith.constant 0 : i32
    %464 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_235) : (!llvm.ptr, i32) -> i32
    %465 = arith.extui %464 : i32 to i64
    %c65536_i64_236 = arith.constant 65536 : i64
    %466 = arith.muli %465, %c65536_i64_236 : i64
    %467 = arith.cmpi ult, %463, %466 : i64
    cf.cond_br %467, ^bb80, ^bb81
  ^bb79:  // pred: ^bb76
    %c1_i32_237 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_237) : (i32) -> ()
    cf.br ^bb78
  ^bb80:  // 2 preds: ^bb78, ^bb81
    %468 = llvm.getelementptr %11[%462] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_232, %468 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb30
  ^bb81:  // pred: ^bb78
    %c1_i32_238 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_238) : (i32) -> ()
    cf.br ^bb80
  ^bb82:  // pred: ^bb71
    %469 = llvm.load %2 : !llvm.ptr -> i32
    %c826074471_i32 = arith.constant 826074471 : i32
    %470 = arith.cmpi eq, %469, %c826074471_i32 : i32
    %471 = arith.extui %470 : i1 to i32
    %c0_i32_239 = arith.constant 0 : i32
    %472 = arith.cmpi ne, %471, %c0_i32_239 : i32
    cf.cond_br %472, ^bb46, ^bb83
  ^bb83:  // pred: ^bb82
    %473 = llvm.load %2 : !llvm.ptr -> i32
    %c1889567281_i32 = arith.constant 1889567281 : i32
    %474 = arith.cmpi eq, %473, %c1889567281_i32 : i32
    %475 = arith.extui %474 : i1 to i32
    %c0_i32_240 = arith.constant 0 : i32
    %476 = arith.cmpi eq, %475, %c0_i32_240 : i32
    %477 = arith.extui %476 : i1 to i32
    %c0_i32_241 = arith.constant 0 : i32
    %478 = arith.cmpi ne, %477, %c0_i32_241 : i32
    cf.cond_br %478, ^bb13, ^bb84
  ^bb84:  // pred: ^bb83
    %479 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_242 = arith.constant 1552 : i32
    %480 = arith.addi %479, %c1552_i32_242 : i32
    %481 = llvm.load %3 : !llvm.ptr -> i32
    %c144_i32_243 = arith.constant 144 : i32
    %482 = arith.addi %481, %c144_i32_243 : i32
    call @f72(%arg0, %480, %482) : (!llvm.ptr, i32, i32) -> ()
    %483 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_244 = arith.constant 1552 : i32
    %484 = arith.addi %483, %c1552_i32_244 : i32
    %c1048680_i32_245 = arith.constant 1048680 : i32
    %485 = call @f101(%arg0, %484, %c1048680_i32_245) : (!llvm.ptr, i32, i32) -> i32
    %c0_i32_246 = arith.constant 0 : i32
    %486 = arith.cmpi ne, %485, %c0_i32_246 : i32
    cf.cond_br %486, ^bb44, ^bb85
  ^bb85:  // pred: ^bb84
    %487 = llvm.load %3 : !llvm.ptr -> i32
    %c532_i32_247 = arith.constant 532 : i32
    %488 = arith.addi %487, %c532_i32_247 : i32
    %c0_i32_248 = arith.constant 0 : i32
    %c0_i64_249 = arith.constant 0 : i64
    %489 = arith.extui %488 : i32 to i64
    %490 = arith.addi %489, %c0_i64_249 : i64
    %c4_i64_250 = arith.constant 4 : i64
    %491 = arith.addi %490, %c4_i64_250 : i64
    %c0_i32_251 = arith.constant 0 : i32
    %492 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_251) : (!llvm.ptr, i32) -> i32
    %493 = arith.extui %492 : i32 to i64
    %c65536_i64_252 = arith.constant 65536 : i64
    %494 = arith.muli %493, %c65536_i64_252 : i64
    %495 = arith.cmpi ult, %491, %494 : i64
    cf.cond_br %495, ^bb86, ^bb87
  ^bb86:  // 2 preds: ^bb85, ^bb87
    %496 = llvm.getelementptr %11[%490] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_248, %496 {alignment = 1 : i64} : i32, !llvm.ptr
    %497 = llvm.load %3 : !llvm.ptr -> i32
    %c4294967296_i64_253 = arith.constant 4294967296 : i64
    %c524_i64_254 = arith.constant 524 : i64
    %498 = arith.extui %497 : i32 to i64
    %499 = arith.addi %498, %c524_i64_254 : i64
    %c8_i64_255 = arith.constant 8 : i64
    %500 = arith.addi %499, %c8_i64_255 : i64
    %c0_i32_256 = arith.constant 0 : i32
    %501 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_256) : (!llvm.ptr, i32) -> i32
    %502 = arith.extui %501 : i32 to i64
    %c65536_i64_257 = arith.constant 65536 : i64
    %503 = arith.muli %502, %c65536_i64_257 : i64
    %504 = arith.cmpi ult, %500, %503 : i64
    cf.cond_br %504, ^bb88, ^bb89
  ^bb87:  // pred: ^bb85
    %c1_i32_258 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_258) : (i32) -> ()
    cf.br ^bb86
  ^bb88:  // 2 preds: ^bb86, ^bb89
    %505 = llvm.getelementptr %11[%499] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4294967296_i64_253, %505 {alignment = 1 : i64} : i64, !llvm.ptr
    %506 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_259 = arith.constant 1 : i32
    %c520_i64_260 = arith.constant 520 : i64
    %507 = arith.extui %506 : i32 to i64
    %508 = arith.addi %507, %c520_i64_260 : i64
    %c4_i64_261 = arith.constant 4 : i64
    %509 = arith.addi %508, %c4_i64_261 : i64
    %c0_i32_262 = arith.constant 0 : i32
    %510 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_262) : (!llvm.ptr, i32) -> i32
    %511 = arith.extui %510 : i32 to i64
    %c65536_i64_263 = arith.constant 65536 : i64
    %512 = arith.muli %511, %c65536_i64_263 : i64
    %513 = arith.cmpi ult, %509, %512 : i64
    cf.cond_br %513, ^bb90, ^bb91
  ^bb89:  // pred: ^bb86
    %c1_i32_264 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_264) : (i32) -> ()
    cf.br ^bb88
  ^bb90:  // 2 preds: ^bb88, ^bb91
    %514 = llvm.getelementptr %11[%508] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_259, %514 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb30
  ^bb91:  // pred: ^bb88
    %c1_i32_265 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_265) : (i32) -> ()
    cf.br ^bb90
  ^bb92:  // 2 preds: ^bb48, ^bb93
    %515 = llvm.getelementptr %11[%313] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-2147483648_i32_153, %515 {alignment = 1 : i64} : i32, !llvm.ptr
    %516 = llvm.load %3 : !llvm.ptr -> i32
    %c1284_i32 = arith.constant 1284 : i32
    %517 = arith.addi %516, %c1284_i32 : i32
    call @f4(%arg0, %517) : (!llvm.ptr, i32) -> ()
    %518 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_266 = arith.constant 1552 : i32
    %519 = arith.addi %518, %c1552_i32_266 : i32
    %520 = llvm.load %5 : !llvm.ptr -> i32
    %521 = llvm.load %4 : !llvm.ptr -> i32
    call @f5(%arg0, %519, %520, %521) : (!llvm.ptr, i32, i32, i32) -> ()
    %522 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i64_267 = arith.constant 1552 : i64
    %523 = arith.extui %522 : i32 to i64
    %524 = arith.addi %523, %c1552_i64_267 : i64
    %c4_i64_268 = arith.constant 4 : i64
    %525 = arith.addi %524, %c4_i64_268 : i64
    %c0_i32_269 = arith.constant 0 : i32
    %526 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_269) : (!llvm.ptr, i32) -> i32
    %527 = arith.extui %526 : i32 to i64
    %c65536_i64_270 = arith.constant 65536 : i64
    %528 = arith.muli %527, %c65536_i64_270 : i64
    %529 = arith.cmpi ult, %525, %528 : i64
    cf.cond_br %529, ^bb94, ^bb95
  ^bb93:  // pred: ^bb48
    %c1_i32_271 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_271) : (i32) -> ()
    cf.br ^bb92
  ^bb94:  // 2 preds: ^bb92, ^bb95
    %530 = llvm.getelementptr %11[%524] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %531 = llvm.load volatile %530 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-2147483638_i32 = arith.constant -2147483638 : i32
    %532 = arith.cmpi eq, %531, %c-2147483638_i32 : i32
    %533 = arith.extui %532 : i1 to i32
    %c0_i32_272 = arith.constant 0 : i32
    %534 = arith.cmpi eq, %533, %c0_i32_272 : i32
    %535 = arith.extui %534 : i1 to i32
    %c0_i32_273 = arith.constant 0 : i32
    %536 = arith.cmpi ne, %535, %c0_i32_273 : i32
    cf.cond_br %536, ^bb31, ^bb96
  ^bb95:  // pred: ^bb92
    %c1_i32_274 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_274) : (i32) -> ()
    cf.br ^bb94
  ^bb96:  // pred: ^bb94
    %537 = llvm.load %3 : !llvm.ptr -> i32
    %c796_i32 = arith.constant 796 : i32
    %538 = arith.addi %537, %c796_i32 : i32
    call @f6(%arg0, %538) : (!llvm.ptr, i32) -> ()
    %539 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_275 = arith.constant 1552 : i32
    %540 = arith.addi %539, %c1552_i32_275 : i32
    %541 = llvm.load %3 : !llvm.ptr -> i32
    %c796_i32_276 = arith.constant 796 : i32
    %542 = arith.addi %541, %c796_i32_276 : i32
    call @f7(%arg0, %540, %542) : (!llvm.ptr, i32, i32) -> ()
    %543 = llvm.load %3 : !llvm.ptr -> i32
    %c796_i32_277 = arith.constant 796 : i32
    %544 = arith.addi %543, %c796_i32_277 : i32
    call @f112(%arg0, %544) : (!llvm.ptr, i32) -> ()
    %545 = llvm.load %3 : !llvm.ptr -> i32
    %c796_i32_278 = arith.constant 796 : i32
    %546 = arith.addi %545, %c796_i32_278 : i32
    call @f113(%arg0, %546) : (!llvm.ptr, i32) -> ()
    %547 = llvm.load %3 : !llvm.ptr -> i32
    %c532_i32_279 = arith.constant 532 : i32
    %548 = arith.addi %547, %c532_i32_279 : i32
    %549 = llvm.load %3 : !llvm.ptr -> i32
    %c1560_i32_280 = arith.constant 1560 : i32
    %550 = arith.addi %549, %c1560_i32_280 : i32
    %c0_i64_281 = arith.constant 0 : i64
    %551 = arith.extui %550 : i32 to i64
    %552 = arith.addi %551, %c0_i64_281 : i64
    %c4_i64_282 = arith.constant 4 : i64
    %553 = arith.addi %552, %c4_i64_282 : i64
    %c0_i32_283 = arith.constant 0 : i32
    %554 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_283) : (!llvm.ptr, i32) -> i32
    %555 = arith.extui %554 : i32 to i64
    %c65536_i64_284 = arith.constant 65536 : i64
    %556 = arith.muli %555, %c65536_i64_284 : i64
    %557 = arith.cmpi ult, %553, %556 : i64
    cf.cond_br %557, ^bb97, ^bb98
  ^bb97:  // 2 preds: ^bb96, ^bb98
    %558 = llvm.getelementptr %11[%552] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %559 = llvm.load volatile %558 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_285 = arith.constant 0 : i64
    %560 = arith.extui %548 : i32 to i64
    %561 = arith.addi %560, %c0_i64_285 : i64
    %c4_i64_286 = arith.constant 4 : i64
    %562 = arith.addi %561, %c4_i64_286 : i64
    %c0_i32_287 = arith.constant 0 : i32
    %563 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_287) : (!llvm.ptr, i32) -> i32
    %564 = arith.extui %563 : i32 to i64
    %c65536_i64_288 = arith.constant 65536 : i64
    %565 = arith.muli %564, %c65536_i64_288 : i64
    %566 = arith.cmpi ult, %562, %565 : i64
    cf.cond_br %566, ^bb99, ^bb100
  ^bb98:  // pred: ^bb96
    %c1_i32_289 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_289) : (i32) -> ()
    cf.br ^bb97
  ^bb99:  // 2 preds: ^bb97, ^bb100
    %567 = llvm.getelementptr %11[%561] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %559, %567 {alignment = 1 : i64} : i32, !llvm.ptr
    %568 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_290 = arith.constant 0 : i32
    %c520_i64_291 = arith.constant 520 : i64
    %569 = arith.extui %568 : i32 to i64
    %570 = arith.addi %569, %c520_i64_291 : i64
    %c4_i64_292 = arith.constant 4 : i64
    %571 = arith.addi %570, %c4_i64_292 : i64
    %c0_i32_293 = arith.constant 0 : i32
    %572 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_293) : (!llvm.ptr, i32) -> i32
    %573 = arith.extui %572 : i32 to i64
    %c65536_i64_294 = arith.constant 65536 : i64
    %574 = arith.muli %573, %c65536_i64_294 : i64
    %575 = arith.cmpi ult, %571, %574 : i64
    cf.cond_br %575, ^bb101, ^bb102
  ^bb100:  // pred: ^bb97
    %c1_i32_295 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_295) : (i32) -> ()
    cf.br ^bb99
  ^bb101:  // 2 preds: ^bb99, ^bb102
    %576 = llvm.getelementptr %11[%570] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_290, %576 {alignment = 1 : i64} : i32, !llvm.ptr
    %577 = llvm.load %3 : !llvm.ptr -> i32
    %578 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i64_296 = arith.constant 1552 : i64
    %579 = arith.extui %578 : i32 to i64
    %580 = arith.addi %579, %c1552_i64_296 : i64
    %c8_i64_297 = arith.constant 8 : i64
    %581 = arith.addi %580, %c8_i64_297 : i64
    %c0_i32_298 = arith.constant 0 : i32
    %582 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_298) : (!llvm.ptr, i32) -> i32
    %583 = arith.extui %582 : i32 to i64
    %c65536_i64_299 = arith.constant 65536 : i64
    %584 = arith.muli %583, %c65536_i64_299 : i64
    %585 = arith.cmpi ult, %581, %584 : i64
    cf.cond_br %585, ^bb103, ^bb104
  ^bb102:  // pred: ^bb99
    %c1_i32_300 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_300) : (i32) -> ()
    cf.br ^bb101
  ^bb103:  // 2 preds: ^bb101, ^bb104
    %586 = llvm.getelementptr %11[%580] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %587 = llvm.load volatile %586 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c524_i64_301 = arith.constant 524 : i64
    %588 = arith.extui %577 : i32 to i64
    %589 = arith.addi %588, %c524_i64_301 : i64
    %c8_i64_302 = arith.constant 8 : i64
    %590 = arith.addi %589, %c8_i64_302 : i64
    %c0_i32_303 = arith.constant 0 : i32
    %591 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_303) : (!llvm.ptr, i32) -> i32
    %592 = arith.extui %591 : i32 to i64
    %c65536_i64_304 = arith.constant 65536 : i64
    %593 = arith.muli %592, %c65536_i64_304 : i64
    %594 = arith.cmpi ult, %590, %593 : i64
    cf.cond_br %594, ^bb105, ^bb106
  ^bb104:  // pred: ^bb101
    %c1_i32_305 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_305) : (i32) -> ()
    cf.br ^bb103
  ^bb105:  // 2 preds: ^bb103, ^bb106
    %595 = llvm.getelementptr %11[%589] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %587, %595 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb30
  ^bb106:  // pred: ^bb103
    %c1_i32_306 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_306) : (i32) -> ()
    cf.br ^bb105
  ^bb107:  // pred: ^bb47
    %596 = llvm.load %3 : !llvm.ptr -> i32
    %c-2147483648_i32_307 = arith.constant -2147483648 : i32
    %c1284_i64_308 = arith.constant 1284 : i64
    %597 = arith.extui %596 : i32 to i64
    %598 = arith.addi %597, %c1284_i64_308 : i64
    %c4_i64_309 = arith.constant 4 : i64
    %599 = arith.addi %598, %c4_i64_309 : i64
    %c0_i32_310 = arith.constant 0 : i32
    %600 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_310) : (!llvm.ptr, i32) -> i32
    %601 = arith.extui %600 : i32 to i64
    %c65536_i64_311 = arith.constant 65536 : i64
    %602 = arith.muli %601, %c65536_i64_311 : i64
    %603 = arith.cmpi ult, %599, %602 : i64
    cf.cond_br %603, ^bb115, ^bb116
  ^bb108:  // pred: ^bb47
    %604 = llvm.load %3 : !llvm.ptr -> i32
    %c532_i32_312 = arith.constant 532 : i32
    %605 = arith.addi %604, %c532_i32_312 : i32
    %c0_i32_313 = arith.constant 0 : i32
    %c0_i64_314 = arith.constant 0 : i64
    %606 = arith.extui %605 : i32 to i64
    %607 = arith.addi %606, %c0_i64_314 : i64
    %c4_i64_315 = arith.constant 4 : i64
    %608 = arith.addi %607, %c4_i64_315 : i64
    %c0_i32_316 = arith.constant 0 : i32
    %609 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_316) : (!llvm.ptr, i32) -> i32
    %610 = arith.extui %609 : i32 to i64
    %c65536_i64_317 = arith.constant 65536 : i64
    %611 = arith.muli %610, %c65536_i64_317 : i64
    %612 = arith.cmpi ult, %608, %611 : i64
    cf.cond_br %612, ^bb109, ^bb110
  ^bb109:  // 2 preds: ^bb108, ^bb110
    %613 = llvm.getelementptr %11[%607] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_313, %613 {alignment = 1 : i64} : i32, !llvm.ptr
    %614 = llvm.load %3 : !llvm.ptr -> i32
    %c4294967296_i64_318 = arith.constant 4294967296 : i64
    %c524_i64_319 = arith.constant 524 : i64
    %615 = arith.extui %614 : i32 to i64
    %616 = arith.addi %615, %c524_i64_319 : i64
    %c8_i64_320 = arith.constant 8 : i64
    %617 = arith.addi %616, %c8_i64_320 : i64
    %c0_i32_321 = arith.constant 0 : i32
    %618 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_321) : (!llvm.ptr, i32) -> i32
    %619 = arith.extui %618 : i32 to i64
    %c65536_i64_322 = arith.constant 65536 : i64
    %620 = arith.muli %619, %c65536_i64_322 : i64
    %621 = arith.cmpi ult, %617, %620 : i64
    cf.cond_br %621, ^bb111, ^bb112
  ^bb110:  // pred: ^bb108
    %c1_i32_323 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_323) : (i32) -> ()
    cf.br ^bb109
  ^bb111:  // 2 preds: ^bb109, ^bb112
    %622 = llvm.getelementptr %11[%616] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4294967296_i64_318, %622 {alignment = 1 : i64} : i64, !llvm.ptr
    %623 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_324 = arith.constant 1 : i32
    %c520_i64_325 = arith.constant 520 : i64
    %624 = arith.extui %623 : i32 to i64
    %625 = arith.addi %624, %c520_i64_325 : i64
    %c4_i64_326 = arith.constant 4 : i64
    %626 = arith.addi %625, %c4_i64_326 : i64
    %c0_i32_327 = arith.constant 0 : i32
    %627 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_327) : (!llvm.ptr, i32) -> i32
    %628 = arith.extui %627 : i32 to i64
    %c65536_i64_328 = arith.constant 65536 : i64
    %629 = arith.muli %628, %c65536_i64_328 : i64
    %630 = arith.cmpi ult, %626, %629 : i64
    cf.cond_br %630, ^bb113, ^bb114
  ^bb112:  // pred: ^bb109
    %c1_i32_329 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_329) : (i32) -> ()
    cf.br ^bb111
  ^bb113:  // 2 preds: ^bb111, ^bb114
    %631 = llvm.getelementptr %11[%625] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_324, %631 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb30
  ^bb114:  // pred: ^bb111
    %c1_i32_330 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_330) : (i32) -> ()
    cf.br ^bb113
  ^bb115:  // 2 preds: ^bb107, ^bb116
    %632 = llvm.getelementptr %11[%598] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-2147483648_i32_307, %632 {alignment = 1 : i64} : i32, !llvm.ptr
    %633 = llvm.load %3 : !llvm.ptr -> i32
    %c1284_i32_331 = arith.constant 1284 : i32
    %634 = arith.addi %633, %c1284_i32_331 : i32
    call @f4(%arg0, %634) : (!llvm.ptr, i32) -> ()
    %635 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_332 = arith.constant 1552 : i32
    %636 = arith.addi %635, %c1552_i32_332 : i32
    %637 = llvm.load %5 : !llvm.ptr -> i32
    %638 = llvm.load %4 : !llvm.ptr -> i32
    call @f5(%arg0, %636, %637, %638) : (!llvm.ptr, i32, i32, i32) -> ()
    %639 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i64_333 = arith.constant 1552 : i64
    %640 = arith.extui %639 : i32 to i64
    %641 = arith.addi %640, %c1552_i64_333 : i64
    %c4_i64_334 = arith.constant 4 : i64
    %642 = arith.addi %641, %c4_i64_334 : i64
    %c0_i32_335 = arith.constant 0 : i32
    %643 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_335) : (!llvm.ptr, i32) -> i32
    %644 = arith.extui %643 : i32 to i64
    %c65536_i64_336 = arith.constant 65536 : i64
    %645 = arith.muli %644, %c65536_i64_336 : i64
    %646 = arith.cmpi ult, %642, %645 : i64
    cf.cond_br %646, ^bb118, ^bb119
  ^bb116:  // pred: ^bb107
    %c1_i32_337 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_337) : (i32) -> ()
    cf.br ^bb115
  ^bb117:  // pred: ^bb118
    %647 = llvm.load %3 : !llvm.ptr -> i32
    %c808_i32 = arith.constant 808 : i32
    %648 = arith.addi %647, %c808_i32 : i32
    %c16_i32_338 = arith.constant 16 : i32
    %649 = arith.addi %648, %c16_i32_338 : i32
    %650 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_339 = arith.constant 1552 : i32
    %651 = arith.addi %650, %c1552_i32_339 : i32
    %c16_i32_340 = arith.constant 16 : i32
    %652 = arith.addi %651, %c16_i32_340 : i32
    %c0_i64_341 = arith.constant 0 : i64
    %653 = arith.extui %652 : i32 to i64
    %654 = arith.addi %653, %c0_i64_341 : i64
    %c8_i64_342 = arith.constant 8 : i64
    %655 = arith.addi %654, %c8_i64_342 : i64
    %c0_i32_343 = arith.constant 0 : i32
    %656 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_343) : (!llvm.ptr, i32) -> i32
    %657 = arith.extui %656 : i32 to i64
    %c65536_i64_344 = arith.constant 65536 : i64
    %658 = arith.muli %657, %c65536_i64_344 : i64
    %659 = arith.cmpi ult, %655, %658 : i64
    cf.cond_br %659, ^bb131, ^bb132
  ^bb118:  // 2 preds: ^bb115, ^bb119
    %660 = llvm.getelementptr %11[%641] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %661 = llvm.load volatile %660 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-2147483638_i32_345 = arith.constant -2147483638 : i32
    %662 = arith.cmpi eq, %661, %c-2147483638_i32_345 : i32
    %663 = arith.extui %662 : i1 to i32
    %c0_i32_346 = arith.constant 0 : i32
    %664 = arith.cmpi eq, %663, %c0_i32_346 : i32
    %665 = arith.extui %664 : i1 to i32
    %c0_i32_347 = arith.constant 0 : i32
    %666 = arith.cmpi ne, %665, %c0_i32_347 : i32
    cf.cond_br %666, ^bb117, ^bb120
  ^bb119:  // pred: ^bb115
    %c1_i32_348 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_348) : (i32) -> ()
    cf.br ^bb118
  ^bb120:  // pred: ^bb118
    %667 = llvm.load %3 : !llvm.ptr -> i32
    %c836_i32 = arith.constant 836 : i32
    %668 = arith.addi %667, %c836_i32 : i32
    call @f8(%arg0, %668) : (!llvm.ptr, i32) -> ()
    %669 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_349 = arith.constant 1552 : i32
    %670 = arith.addi %669, %c1552_i32_349 : i32
    %671 = llvm.load %3 : !llvm.ptr -> i32
    %c836_i32_350 = arith.constant 836 : i32
    %672 = arith.addi %671, %c836_i32_350 : i32
    call @f7(%arg0, %670, %672) : (!llvm.ptr, i32, i32) -> ()
    %673 = llvm.load %3 : !llvm.ptr -> i32
    %c836_i32_351 = arith.constant 836 : i32
    %674 = arith.addi %673, %c836_i32_351 : i32
    call @f112(%arg0, %674) : (!llvm.ptr, i32) -> ()
    %675 = llvm.load %3 : !llvm.ptr -> i32
    %c836_i32_352 = arith.constant 836 : i32
    %676 = arith.addi %675, %c836_i32_352 : i32
    call @f113(%arg0, %676) : (!llvm.ptr, i32) -> ()
    %677 = llvm.load %3 : !llvm.ptr -> i32
    %c532_i32_353 = arith.constant 532 : i32
    %678 = arith.addi %677, %c532_i32_353 : i32
    %679 = llvm.load %3 : !llvm.ptr -> i32
    %c1560_i32_354 = arith.constant 1560 : i32
    %680 = arith.addi %679, %c1560_i32_354 : i32
    %c0_i64_355 = arith.constant 0 : i64
    %681 = arith.extui %680 : i32 to i64
    %682 = arith.addi %681, %c0_i64_355 : i64
    %c4_i64_356 = arith.constant 4 : i64
    %683 = arith.addi %682, %c4_i64_356 : i64
    %c0_i32_357 = arith.constant 0 : i32
    %684 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_357) : (!llvm.ptr, i32) -> i32
    %685 = arith.extui %684 : i32 to i64
    %c65536_i64_358 = arith.constant 65536 : i64
    %686 = arith.muli %685, %c65536_i64_358 : i64
    %687 = arith.cmpi ult, %683, %686 : i64
    cf.cond_br %687, ^bb121, ^bb122
  ^bb121:  // 2 preds: ^bb120, ^bb122
    %688 = llvm.getelementptr %11[%682] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %689 = llvm.load volatile %688 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_359 = arith.constant 0 : i64
    %690 = arith.extui %678 : i32 to i64
    %691 = arith.addi %690, %c0_i64_359 : i64
    %c4_i64_360 = arith.constant 4 : i64
    %692 = arith.addi %691, %c4_i64_360 : i64
    %c0_i32_361 = arith.constant 0 : i32
    %693 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_361) : (!llvm.ptr, i32) -> i32
    %694 = arith.extui %693 : i32 to i64
    %c65536_i64_362 = arith.constant 65536 : i64
    %695 = arith.muli %694, %c65536_i64_362 : i64
    %696 = arith.cmpi ult, %692, %695 : i64
    cf.cond_br %696, ^bb123, ^bb124
  ^bb122:  // pred: ^bb120
    %c1_i32_363 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_363) : (i32) -> ()
    cf.br ^bb121
  ^bb123:  // 2 preds: ^bb121, ^bb124
    %697 = llvm.getelementptr %11[%691] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %689, %697 {alignment = 1 : i64} : i32, !llvm.ptr
    %698 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_364 = arith.constant 0 : i32
    %c520_i64_365 = arith.constant 520 : i64
    %699 = arith.extui %698 : i32 to i64
    %700 = arith.addi %699, %c520_i64_365 : i64
    %c4_i64_366 = arith.constant 4 : i64
    %701 = arith.addi %700, %c4_i64_366 : i64
    %c0_i32_367 = arith.constant 0 : i32
    %702 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_367) : (!llvm.ptr, i32) -> i32
    %703 = arith.extui %702 : i32 to i64
    %c65536_i64_368 = arith.constant 65536 : i64
    %704 = arith.muli %703, %c65536_i64_368 : i64
    %705 = arith.cmpi ult, %701, %704 : i64
    cf.cond_br %705, ^bb125, ^bb126
  ^bb124:  // pred: ^bb121
    %c1_i32_369 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_369) : (i32) -> ()
    cf.br ^bb123
  ^bb125:  // 2 preds: ^bb123, ^bb126
    %706 = llvm.getelementptr %11[%700] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_364, %706 {alignment = 1 : i64} : i32, !llvm.ptr
    %707 = llvm.load %3 : !llvm.ptr -> i32
    %708 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i64_370 = arith.constant 1552 : i64
    %709 = arith.extui %708 : i32 to i64
    %710 = arith.addi %709, %c1552_i64_370 : i64
    %c8_i64_371 = arith.constant 8 : i64
    %711 = arith.addi %710, %c8_i64_371 : i64
    %c0_i32_372 = arith.constant 0 : i32
    %712 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_372) : (!llvm.ptr, i32) -> i32
    %713 = arith.extui %712 : i32 to i64
    %c65536_i64_373 = arith.constant 65536 : i64
    %714 = arith.muli %713, %c65536_i64_373 : i64
    %715 = arith.cmpi ult, %711, %714 : i64
    cf.cond_br %715, ^bb127, ^bb128
  ^bb126:  // pred: ^bb123
    %c1_i32_374 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_374) : (i32) -> ()
    cf.br ^bb125
  ^bb127:  // 2 preds: ^bb125, ^bb128
    %716 = llvm.getelementptr %11[%710] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %717 = llvm.load volatile %716 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c524_i64_375 = arith.constant 524 : i64
    %718 = arith.extui %707 : i32 to i64
    %719 = arith.addi %718, %c524_i64_375 : i64
    %c8_i64_376 = arith.constant 8 : i64
    %720 = arith.addi %719, %c8_i64_376 : i64
    %c0_i32_377 = arith.constant 0 : i32
    %721 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_377) : (!llvm.ptr, i32) -> i32
    %722 = arith.extui %721 : i32 to i64
    %c65536_i64_378 = arith.constant 65536 : i64
    %723 = arith.muli %722, %c65536_i64_378 : i64
    %724 = arith.cmpi ult, %720, %723 : i64
    cf.cond_br %724, ^bb129, ^bb130
  ^bb128:  // pred: ^bb125
    %c1_i32_379 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_379) : (i32) -> ()
    cf.br ^bb127
  ^bb129:  // 2 preds: ^bb127, ^bb130
    %725 = llvm.getelementptr %11[%719] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %717, %725 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb30
  ^bb130:  // pred: ^bb127
    %c1_i32_380 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_380) : (i32) -> ()
    cf.br ^bb129
  ^bb131:  // 2 preds: ^bb117, ^bb132
    %726 = llvm.getelementptr %11[%654] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %727 = llvm.load volatile %726 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_381 = arith.constant 0 : i64
    %728 = arith.extui %649 : i32 to i64
    %729 = arith.addi %728, %c0_i64_381 : i64
    %c8_i64_382 = arith.constant 8 : i64
    %730 = arith.addi %729, %c8_i64_382 : i64
    %c0_i32_383 = arith.constant 0 : i32
    %731 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_383) : (!llvm.ptr, i32) -> i32
    %732 = arith.extui %731 : i32 to i64
    %c65536_i64_384 = arith.constant 65536 : i64
    %733 = arith.muli %732, %c65536_i64_384 : i64
    %734 = arith.cmpi ult, %730, %733 : i64
    cf.cond_br %734, ^bb133, ^bb134
  ^bb132:  // pred: ^bb117
    %c1_i32_385 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_385) : (i32) -> ()
    cf.br ^bb131
  ^bb133:  // 2 preds: ^bb131, ^bb134
    %735 = llvm.getelementptr %11[%729] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %727, %735 {alignment = 1 : i64} : i64, !llvm.ptr
    %736 = llvm.load %3 : !llvm.ptr -> i32
    %c808_i32_386 = arith.constant 808 : i32
    %737 = arith.addi %736, %c808_i32_386 : i32
    %c8_i32_387 = arith.constant 8 : i32
    %738 = arith.addi %737, %c8_i32_387 : i32
    %739 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_388 = arith.constant 1552 : i32
    %740 = arith.addi %739, %c1552_i32_388 : i32
    %c8_i32_389 = arith.constant 8 : i32
    %741 = arith.addi %740, %c8_i32_389 : i32
    %c0_i64_390 = arith.constant 0 : i64
    %742 = arith.extui %741 : i32 to i64
    %743 = arith.addi %742, %c0_i64_390 : i64
    %c8_i64_391 = arith.constant 8 : i64
    %744 = arith.addi %743, %c8_i64_391 : i64
    %c0_i32_392 = arith.constant 0 : i32
    %745 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_392) : (!llvm.ptr, i32) -> i32
    %746 = arith.extui %745 : i32 to i64
    %c65536_i64_393 = arith.constant 65536 : i64
    %747 = arith.muli %746, %c65536_i64_393 : i64
    %748 = arith.cmpi ult, %744, %747 : i64
    cf.cond_br %748, ^bb135, ^bb136
  ^bb134:  // pred: ^bb131
    %c1_i32_394 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_394) : (i32) -> ()
    cf.br ^bb133
  ^bb135:  // 2 preds: ^bb133, ^bb136
    %749 = llvm.getelementptr %11[%743] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %750 = llvm.load volatile %749 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_395 = arith.constant 0 : i64
    %751 = arith.extui %738 : i32 to i64
    %752 = arith.addi %751, %c0_i64_395 : i64
    %c8_i64_396 = arith.constant 8 : i64
    %753 = arith.addi %752, %c8_i64_396 : i64
    %c0_i32_397 = arith.constant 0 : i32
    %754 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_397) : (!llvm.ptr, i32) -> i32
    %755 = arith.extui %754 : i32 to i64
    %c65536_i64_398 = arith.constant 65536 : i64
    %756 = arith.muli %755, %c65536_i64_398 : i64
    %757 = arith.cmpi ult, %753, %756 : i64
    cf.cond_br %757, ^bb137, ^bb138
  ^bb136:  // pred: ^bb133
    %c1_i32_399 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_399) : (i32) -> ()
    cf.br ^bb135
  ^bb137:  // 2 preds: ^bb135, ^bb138
    %758 = llvm.getelementptr %11[%752] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %750, %758 {alignment = 1 : i64} : i64, !llvm.ptr
    %759 = llvm.load %3 : !llvm.ptr -> i32
    %760 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i64_400 = arith.constant 1552 : i64
    %761 = arith.extui %760 : i32 to i64
    %762 = arith.addi %761, %c1552_i64_400 : i64
    %c8_i64_401 = arith.constant 8 : i64
    %763 = arith.addi %762, %c8_i64_401 : i64
    %c0_i32_402 = arith.constant 0 : i32
    %764 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_402) : (!llvm.ptr, i32) -> i32
    %765 = arith.extui %764 : i32 to i64
    %c65536_i64_403 = arith.constant 65536 : i64
    %766 = arith.muli %765, %c65536_i64_403 : i64
    %767 = arith.cmpi ult, %763, %766 : i64
    cf.cond_br %767, ^bb139, ^bb140
  ^bb138:  // pred: ^bb135
    %c1_i32_404 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_404) : (i32) -> ()
    cf.br ^bb137
  ^bb139:  // 2 preds: ^bb137, ^bb140
    %768 = llvm.getelementptr %11[%762] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %769 = llvm.load volatile %768 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c808_i64 = arith.constant 808 : i64
    %770 = arith.extui %759 : i32 to i64
    %771 = arith.addi %770, %c808_i64 : i64
    %c8_i64_405 = arith.constant 8 : i64
    %772 = arith.addi %771, %c8_i64_405 : i64
    %c0_i32_406 = arith.constant 0 : i32
    %773 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_406) : (!llvm.ptr, i32) -> i32
    %774 = arith.extui %773 : i32 to i64
    %c65536_i64_407 = arith.constant 65536 : i64
    %775 = arith.muli %774, %c65536_i64_407 : i64
    %776 = arith.cmpi ult, %772, %775 : i64
    cf.cond_br %776, ^bb141, ^bb142
  ^bb140:  // pred: ^bb137
    %c1_i32_408 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_408) : (i32) -> ()
    cf.br ^bb139
  ^bb141:  // 2 preds: ^bb139, ^bb142
    %777 = llvm.getelementptr %11[%771] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %769, %777 {alignment = 1 : i64} : i64, !llvm.ptr
    %778 = llvm.load %3 : !llvm.ptr -> i32
    %c808_i32_409 = arith.constant 808 : i32
    %779 = arith.addi %778, %c808_i32_409 : i32
    call @f63(%arg0, %779) : (!llvm.ptr, i32) -> ()
    %780 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_410 = arith.constant 1 : i64
    %c528_i64 = arith.constant 528 : i64
    %781 = arith.extui %780 : i32 to i64
    %782 = arith.addi %781, %c528_i64 : i64
    %c8_i64_411 = arith.constant 8 : i64
    %783 = arith.addi %782, %c8_i64_411 : i64
    %c0_i32_412 = arith.constant 0 : i32
    %784 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_412) : (!llvm.ptr, i32) -> i32
    %785 = arith.extui %784 : i32 to i64
    %c65536_i64_413 = arith.constant 65536 : i64
    %786 = arith.muli %785, %c65536_i64_413 : i64
    %787 = arith.cmpi ult, %783, %786 : i64
    cf.cond_br %787, ^bb143, ^bb144
  ^bb142:  // pred: ^bb139
    %c1_i32_414 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_414) : (i32) -> ()
    cf.br ^bb141
  ^bb143:  // 2 preds: ^bb141, ^bb144
    %788 = llvm.getelementptr %11[%782] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_410, %788 {alignment = 1 : i64} : i64, !llvm.ptr
    %789 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_415 = arith.constant 1 : i64
    %c520_i64_416 = arith.constant 520 : i64
    %790 = arith.extui %789 : i32 to i64
    %791 = arith.addi %790, %c520_i64_416 : i64
    %c8_i64_417 = arith.constant 8 : i64
    %792 = arith.addi %791, %c8_i64_417 : i64
    %c0_i32_418 = arith.constant 0 : i32
    %793 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_418) : (!llvm.ptr, i32) -> i32
    %794 = arith.extui %793 : i32 to i64
    %c65536_i64_419 = arith.constant 65536 : i64
    %795 = arith.muli %794, %c65536_i64_419 : i64
    %796 = arith.cmpi ult, %792, %795 : i64
    cf.cond_br %796, ^bb145, ^bb146
  ^bb144:  // pred: ^bb141
    %c1_i32_420 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_420) : (i32) -> ()
    cf.br ^bb143
  ^bb145:  // 2 preds: ^bb143, ^bb146
    %797 = llvm.getelementptr %11[%791] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_415, %797 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb30
  ^bb146:  // pred: ^bb143
    %c1_i32_421 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_421) : (i32) -> ()
    cf.br ^bb145
  ^bb147:  // pred: ^bb46
    %798 = llvm.load %3 : !llvm.ptr -> i32
    %c-2147483648_i32_422 = arith.constant -2147483648 : i32
    %c1284_i64_423 = arith.constant 1284 : i64
    %799 = arith.extui %798 : i32 to i64
    %800 = arith.addi %799, %c1284_i64_423 : i64
    %c4_i64_424 = arith.constant 4 : i64
    %801 = arith.addi %800, %c4_i64_424 : i64
    %c0_i32_425 = arith.constant 0 : i32
    %802 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_425) : (!llvm.ptr, i32) -> i32
    %803 = arith.extui %802 : i32 to i64
    %c65536_i64_426 = arith.constant 65536 : i64
    %804 = arith.muli %803, %c65536_i64_426 : i64
    %805 = arith.cmpi ult, %801, %804 : i64
    cf.cond_br %805, ^bb155, ^bb156
  ^bb148:  // pred: ^bb46
    %806 = llvm.load %3 : !llvm.ptr -> i32
    %c532_i32_427 = arith.constant 532 : i32
    %807 = arith.addi %806, %c532_i32_427 : i32
    %c0_i32_428 = arith.constant 0 : i32
    %c0_i64_429 = arith.constant 0 : i64
    %808 = arith.extui %807 : i32 to i64
    %809 = arith.addi %808, %c0_i64_429 : i64
    %c4_i64_430 = arith.constant 4 : i64
    %810 = arith.addi %809, %c4_i64_430 : i64
    %c0_i32_431 = arith.constant 0 : i32
    %811 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_431) : (!llvm.ptr, i32) -> i32
    %812 = arith.extui %811 : i32 to i64
    %c65536_i64_432 = arith.constant 65536 : i64
    %813 = arith.muli %812, %c65536_i64_432 : i64
    %814 = arith.cmpi ult, %810, %813 : i64
    cf.cond_br %814, ^bb149, ^bb150
  ^bb149:  // 2 preds: ^bb148, ^bb150
    %815 = llvm.getelementptr %11[%809] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_428, %815 {alignment = 1 : i64} : i32, !llvm.ptr
    %816 = llvm.load %3 : !llvm.ptr -> i32
    %c4294967296_i64_433 = arith.constant 4294967296 : i64
    %c524_i64_434 = arith.constant 524 : i64
    %817 = arith.extui %816 : i32 to i64
    %818 = arith.addi %817, %c524_i64_434 : i64
    %c8_i64_435 = arith.constant 8 : i64
    %819 = arith.addi %818, %c8_i64_435 : i64
    %c0_i32_436 = arith.constant 0 : i32
    %820 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_436) : (!llvm.ptr, i32) -> i32
    %821 = arith.extui %820 : i32 to i64
    %c65536_i64_437 = arith.constant 65536 : i64
    %822 = arith.muli %821, %c65536_i64_437 : i64
    %823 = arith.cmpi ult, %819, %822 : i64
    cf.cond_br %823, ^bb151, ^bb152
  ^bb150:  // pred: ^bb148
    %c1_i32_438 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_438) : (i32) -> ()
    cf.br ^bb149
  ^bb151:  // 2 preds: ^bb149, ^bb152
    %824 = llvm.getelementptr %11[%818] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4294967296_i64_433, %824 {alignment = 1 : i64} : i64, !llvm.ptr
    %825 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_439 = arith.constant 1 : i32
    %c520_i64_440 = arith.constant 520 : i64
    %826 = arith.extui %825 : i32 to i64
    %827 = arith.addi %826, %c520_i64_440 : i64
    %c4_i64_441 = arith.constant 4 : i64
    %828 = arith.addi %827, %c4_i64_441 : i64
    %c0_i32_442 = arith.constant 0 : i32
    %829 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_442) : (!llvm.ptr, i32) -> i32
    %830 = arith.extui %829 : i32 to i64
    %c65536_i64_443 = arith.constant 65536 : i64
    %831 = arith.muli %830, %c65536_i64_443 : i64
    %832 = arith.cmpi ult, %828, %831 : i64
    cf.cond_br %832, ^bb153, ^bb154
  ^bb152:  // pred: ^bb149
    %c1_i32_444 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_444) : (i32) -> ()
    cf.br ^bb151
  ^bb153:  // 2 preds: ^bb151, ^bb154
    %833 = llvm.getelementptr %11[%827] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_439, %833 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb30
  ^bb154:  // pred: ^bb151
    %c1_i32_445 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_445) : (i32) -> ()
    cf.br ^bb153
  ^bb155:  // 2 preds: ^bb147, ^bb156
    %834 = llvm.getelementptr %11[%800] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-2147483648_i32_422, %834 {alignment = 1 : i64} : i32, !llvm.ptr
    %835 = llvm.load %3 : !llvm.ptr -> i32
    %c1284_i32_446 = arith.constant 1284 : i32
    %836 = arith.addi %835, %c1284_i32_446 : i32
    call @f4(%arg0, %836) : (!llvm.ptr, i32) -> ()
    %837 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_447 = arith.constant 1552 : i32
    %838 = arith.addi %837, %c1552_i32_447 : i32
    %839 = llvm.load %5 : !llvm.ptr -> i32
    %840 = llvm.load %4 : !llvm.ptr -> i32
    call @f5(%arg0, %838, %839, %840) : (!llvm.ptr, i32, i32, i32) -> ()
    %841 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i64_448 = arith.constant 1552 : i64
    %842 = arith.extui %841 : i32 to i64
    %843 = arith.addi %842, %c1552_i64_448 : i64
    %c4_i64_449 = arith.constant 4 : i64
    %844 = arith.addi %843, %c4_i64_449 : i64
    %c0_i32_450 = arith.constant 0 : i32
    %845 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_450) : (!llvm.ptr, i32) -> i32
    %846 = arith.extui %845 : i32 to i64
    %c65536_i64_451 = arith.constant 65536 : i64
    %847 = arith.muli %846, %c65536_i64_451 : i64
    %848 = arith.cmpi ult, %844, %847 : i64
    cf.cond_br %848, ^bb158, ^bb159
  ^bb156:  // pred: ^bb147
    %c1_i32_452 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_452) : (i32) -> ()
    cf.br ^bb155
  ^bb157:  // pred: ^bb158
    %849 = llvm.load %3 : !llvm.ptr -> i32
    %c848_i32 = arith.constant 848 : i32
    %850 = arith.addi %849, %c848_i32 : i32
    %c16_i32_453 = arith.constant 16 : i32
    %851 = arith.addi %850, %c16_i32_453 : i32
    %852 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_454 = arith.constant 1552 : i32
    %853 = arith.addi %852, %c1552_i32_454 : i32
    %c16_i32_455 = arith.constant 16 : i32
    %854 = arith.addi %853, %c16_i32_455 : i32
    %c0_i64_456 = arith.constant 0 : i64
    %855 = arith.extui %854 : i32 to i64
    %856 = arith.addi %855, %c0_i64_456 : i64
    %c8_i64_457 = arith.constant 8 : i64
    %857 = arith.addi %856, %c8_i64_457 : i64
    %c0_i32_458 = arith.constant 0 : i32
    %858 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_458) : (!llvm.ptr, i32) -> i32
    %859 = arith.extui %858 : i32 to i64
    %c65536_i64_459 = arith.constant 65536 : i64
    %860 = arith.muli %859, %c65536_i64_459 : i64
    %861 = arith.cmpi ult, %857, %860 : i64
    cf.cond_br %861, ^bb173, ^bb174
  ^bb158:  // 2 preds: ^bb155, ^bb159
    %862 = llvm.getelementptr %11[%843] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %863 = llvm.load volatile %862 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-2147483638_i32_460 = arith.constant -2147483638 : i32
    %864 = arith.cmpi eq, %863, %c-2147483638_i32_460 : i32
    %865 = arith.extui %864 : i1 to i32
    %c0_i32_461 = arith.constant 0 : i32
    %866 = arith.cmpi eq, %865, %c0_i32_461 : i32
    %867 = arith.extui %866 : i1 to i32
    %c0_i32_462 = arith.constant 0 : i32
    %868 = arith.cmpi ne, %867, %c0_i32_462 : i32
    cf.cond_br %868, ^bb157, ^bb160
  ^bb159:  // pred: ^bb155
    %c1_i32_463 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_463) : (i32) -> ()
    cf.br ^bb158
  ^bb160:  // pred: ^bb158
    %869 = llvm.load %3 : !llvm.ptr -> i32
    %c18_i32 = arith.constant 18 : i32
    %c1284_i64_464 = arith.constant 1284 : i64
    %870 = arith.extui %869 : i32 to i64
    %871 = arith.addi %870, %c1284_i64_464 : i64
    %c1_i64_465 = arith.constant 1 : i64
    %872 = arith.addi %871, %c1_i64_465 : i64
    %c0_i32_466 = arith.constant 0 : i32
    %873 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_466) : (!llvm.ptr, i32) -> i32
    %874 = arith.extui %873 : i32 to i64
    %c65536_i64_467 = arith.constant 65536 : i64
    %875 = arith.muli %874, %c65536_i64_467 : i64
    %876 = arith.cmpi ult, %872, %875 : i64
    cf.cond_br %876, ^bb161, ^bb162
  ^bb161:  // 2 preds: ^bb160, ^bb162
    %877 = llvm.getelementptr %11[%871] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %878 = arith.trunci %c18_i32 : i32 to i8
    llvm.store volatile %878, %877 {alignment = 1 : i64} : i8, !llvm.ptr
    %879 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_468 = arith.constant 1552 : i32
    %880 = arith.addi %879, %c1552_i32_468 : i32
    %881 = llvm.load %3 : !llvm.ptr -> i32
    %c1284_i32_469 = arith.constant 1284 : i32
    %882 = arith.addi %881, %c1284_i32_469 : i32
    call @f9(%arg0, %880, %882) : (!llvm.ptr, i32, i32) -> ()
    %883 = llvm.load %3 : !llvm.ptr -> i32
    %c532_i32_470 = arith.constant 532 : i32
    %884 = arith.addi %883, %c532_i32_470 : i32
    %885 = llvm.load %3 : !llvm.ptr -> i32
    %c1560_i32_471 = arith.constant 1560 : i32
    %886 = arith.addi %885, %c1560_i32_471 : i32
    %c0_i64_472 = arith.constant 0 : i64
    %887 = arith.extui %886 : i32 to i64
    %888 = arith.addi %887, %c0_i64_472 : i64
    %c4_i64_473 = arith.constant 4 : i64
    %889 = arith.addi %888, %c4_i64_473 : i64
    %c0_i32_474 = arith.constant 0 : i32
    %890 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_474) : (!llvm.ptr, i32) -> i32
    %891 = arith.extui %890 : i32 to i64
    %c65536_i64_475 = arith.constant 65536 : i64
    %892 = arith.muli %891, %c65536_i64_475 : i64
    %893 = arith.cmpi ult, %889, %892 : i64
    cf.cond_br %893, ^bb163, ^bb164
  ^bb162:  // pred: ^bb160
    %c1_i32_476 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_476) : (i32) -> ()
    cf.br ^bb161
  ^bb163:  // 2 preds: ^bb161, ^bb164
    %894 = llvm.getelementptr %11[%888] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %895 = llvm.load volatile %894 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_477 = arith.constant 0 : i64
    %896 = arith.extui %884 : i32 to i64
    %897 = arith.addi %896, %c0_i64_477 : i64
    %c4_i64_478 = arith.constant 4 : i64
    %898 = arith.addi %897, %c4_i64_478 : i64
    %c0_i32_479 = arith.constant 0 : i32
    %899 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_479) : (!llvm.ptr, i32) -> i32
    %900 = arith.extui %899 : i32 to i64
    %c65536_i64_480 = arith.constant 65536 : i64
    %901 = arith.muli %900, %c65536_i64_480 : i64
    %902 = arith.cmpi ult, %898, %901 : i64
    cf.cond_br %902, ^bb165, ^bb166
  ^bb164:  // pred: ^bb161
    %c1_i32_481 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_481) : (i32) -> ()
    cf.br ^bb163
  ^bb165:  // 2 preds: ^bb163, ^bb166
    %903 = llvm.getelementptr %11[%897] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %895, %903 {alignment = 1 : i64} : i32, !llvm.ptr
    %904 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_482 = arith.constant 0 : i32
    %c520_i64_483 = arith.constant 520 : i64
    %905 = arith.extui %904 : i32 to i64
    %906 = arith.addi %905, %c520_i64_483 : i64
    %c4_i64_484 = arith.constant 4 : i64
    %907 = arith.addi %906, %c4_i64_484 : i64
    %c0_i32_485 = arith.constant 0 : i32
    %908 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_485) : (!llvm.ptr, i32) -> i32
    %909 = arith.extui %908 : i32 to i64
    %c65536_i64_486 = arith.constant 65536 : i64
    %910 = arith.muli %909, %c65536_i64_486 : i64
    %911 = arith.cmpi ult, %907, %910 : i64
    cf.cond_br %911, ^bb167, ^bb168
  ^bb166:  // pred: ^bb163
    %c1_i32_487 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_487) : (i32) -> ()
    cf.br ^bb165
  ^bb167:  // 2 preds: ^bb165, ^bb168
    %912 = llvm.getelementptr %11[%906] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_482, %912 {alignment = 1 : i64} : i32, !llvm.ptr
    %913 = llvm.load %3 : !llvm.ptr -> i32
    %914 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i64_488 = arith.constant 1552 : i64
    %915 = arith.extui %914 : i32 to i64
    %916 = arith.addi %915, %c1552_i64_488 : i64
    %c8_i64_489 = arith.constant 8 : i64
    %917 = arith.addi %916, %c8_i64_489 : i64
    %c0_i32_490 = arith.constant 0 : i32
    %918 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_490) : (!llvm.ptr, i32) -> i32
    %919 = arith.extui %918 : i32 to i64
    %c65536_i64_491 = arith.constant 65536 : i64
    %920 = arith.muli %919, %c65536_i64_491 : i64
    %921 = arith.cmpi ult, %917, %920 : i64
    cf.cond_br %921, ^bb169, ^bb170
  ^bb168:  // pred: ^bb165
    %c1_i32_492 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_492) : (i32) -> ()
    cf.br ^bb167
  ^bb169:  // 2 preds: ^bb167, ^bb170
    %922 = llvm.getelementptr %11[%916] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %923 = llvm.load volatile %922 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c524_i64_493 = arith.constant 524 : i64
    %924 = arith.extui %913 : i32 to i64
    %925 = arith.addi %924, %c524_i64_493 : i64
    %c8_i64_494 = arith.constant 8 : i64
    %926 = arith.addi %925, %c8_i64_494 : i64
    %c0_i32_495 = arith.constant 0 : i32
    %927 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_495) : (!llvm.ptr, i32) -> i32
    %928 = arith.extui %927 : i32 to i64
    %c65536_i64_496 = arith.constant 65536 : i64
    %929 = arith.muli %928, %c65536_i64_496 : i64
    %930 = arith.cmpi ult, %926, %929 : i64
    cf.cond_br %930, ^bb171, ^bb172
  ^bb170:  // pred: ^bb167
    %c1_i32_497 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_497) : (i32) -> ()
    cf.br ^bb169
  ^bb171:  // 2 preds: ^bb169, ^bb172
    %931 = llvm.getelementptr %11[%925] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %923, %931 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb30
  ^bb172:  // pred: ^bb169
    %c1_i32_498 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_498) : (i32) -> ()
    cf.br ^bb171
  ^bb173:  // 2 preds: ^bb157, ^bb174
    %932 = llvm.getelementptr %11[%856] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %933 = llvm.load volatile %932 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_499 = arith.constant 0 : i64
    %934 = arith.extui %851 : i32 to i64
    %935 = arith.addi %934, %c0_i64_499 : i64
    %c8_i64_500 = arith.constant 8 : i64
    %936 = arith.addi %935, %c8_i64_500 : i64
    %c0_i32_501 = arith.constant 0 : i32
    %937 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_501) : (!llvm.ptr, i32) -> i32
    %938 = arith.extui %937 : i32 to i64
    %c65536_i64_502 = arith.constant 65536 : i64
    %939 = arith.muli %938, %c65536_i64_502 : i64
    %940 = arith.cmpi ult, %936, %939 : i64
    cf.cond_br %940, ^bb175, ^bb176
  ^bb174:  // pred: ^bb157
    %c1_i32_503 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_503) : (i32) -> ()
    cf.br ^bb173
  ^bb175:  // 2 preds: ^bb173, ^bb176
    %941 = llvm.getelementptr %11[%935] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %933, %941 {alignment = 1 : i64} : i64, !llvm.ptr
    %942 = llvm.load %3 : !llvm.ptr -> i32
    %c848_i32_504 = arith.constant 848 : i32
    %943 = arith.addi %942, %c848_i32_504 : i32
    %c8_i32_505 = arith.constant 8 : i32
    %944 = arith.addi %943, %c8_i32_505 : i32
    %945 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_506 = arith.constant 1552 : i32
    %946 = arith.addi %945, %c1552_i32_506 : i32
    %c8_i32_507 = arith.constant 8 : i32
    %947 = arith.addi %946, %c8_i32_507 : i32
    %c0_i64_508 = arith.constant 0 : i64
    %948 = arith.extui %947 : i32 to i64
    %949 = arith.addi %948, %c0_i64_508 : i64
    %c8_i64_509 = arith.constant 8 : i64
    %950 = arith.addi %949, %c8_i64_509 : i64
    %c0_i32_510 = arith.constant 0 : i32
    %951 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_510) : (!llvm.ptr, i32) -> i32
    %952 = arith.extui %951 : i32 to i64
    %c65536_i64_511 = arith.constant 65536 : i64
    %953 = arith.muli %952, %c65536_i64_511 : i64
    %954 = arith.cmpi ult, %950, %953 : i64
    cf.cond_br %954, ^bb177, ^bb178
  ^bb176:  // pred: ^bb173
    %c1_i32_512 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_512) : (i32) -> ()
    cf.br ^bb175
  ^bb177:  // 2 preds: ^bb175, ^bb178
    %955 = llvm.getelementptr %11[%949] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %956 = llvm.load volatile %955 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_513 = arith.constant 0 : i64
    %957 = arith.extui %944 : i32 to i64
    %958 = arith.addi %957, %c0_i64_513 : i64
    %c8_i64_514 = arith.constant 8 : i64
    %959 = arith.addi %958, %c8_i64_514 : i64
    %c0_i32_515 = arith.constant 0 : i32
    %960 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_515) : (!llvm.ptr, i32) -> i32
    %961 = arith.extui %960 : i32 to i64
    %c65536_i64_516 = arith.constant 65536 : i64
    %962 = arith.muli %961, %c65536_i64_516 : i64
    %963 = arith.cmpi ult, %959, %962 : i64
    cf.cond_br %963, ^bb179, ^bb180
  ^bb178:  // pred: ^bb175
    %c1_i32_517 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_517) : (i32) -> ()
    cf.br ^bb177
  ^bb179:  // 2 preds: ^bb177, ^bb180
    %964 = llvm.getelementptr %11[%958] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %956, %964 {alignment = 1 : i64} : i64, !llvm.ptr
    %965 = llvm.load %3 : !llvm.ptr -> i32
    %966 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i64_518 = arith.constant 1552 : i64
    %967 = arith.extui %966 : i32 to i64
    %968 = arith.addi %967, %c1552_i64_518 : i64
    %c8_i64_519 = arith.constant 8 : i64
    %969 = arith.addi %968, %c8_i64_519 : i64
    %c0_i32_520 = arith.constant 0 : i32
    %970 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_520) : (!llvm.ptr, i32) -> i32
    %971 = arith.extui %970 : i32 to i64
    %c65536_i64_521 = arith.constant 65536 : i64
    %972 = arith.muli %971, %c65536_i64_521 : i64
    %973 = arith.cmpi ult, %969, %972 : i64
    cf.cond_br %973, ^bb181, ^bb182
  ^bb180:  // pred: ^bb177
    %c1_i32_522 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_522) : (i32) -> ()
    cf.br ^bb179
  ^bb181:  // 2 preds: ^bb179, ^bb182
    %974 = llvm.getelementptr %11[%968] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %975 = llvm.load volatile %974 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c848_i64 = arith.constant 848 : i64
    %976 = arith.extui %965 : i32 to i64
    %977 = arith.addi %976, %c848_i64 : i64
    %c8_i64_523 = arith.constant 8 : i64
    %978 = arith.addi %977, %c8_i64_523 : i64
    %c0_i32_524 = arith.constant 0 : i32
    %979 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_524) : (!llvm.ptr, i32) -> i32
    %980 = arith.extui %979 : i32 to i64
    %c65536_i64_525 = arith.constant 65536 : i64
    %981 = arith.muli %980, %c65536_i64_525 : i64
    %982 = arith.cmpi ult, %978, %981 : i64
    cf.cond_br %982, ^bb183, ^bb184
  ^bb182:  // pred: ^bb179
    %c1_i32_526 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_526) : (i32) -> ()
    cf.br ^bb181
  ^bb183:  // 2 preds: ^bb181, ^bb184
    %983 = llvm.getelementptr %11[%977] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %975, %983 {alignment = 1 : i64} : i64, !llvm.ptr
    %984 = llvm.load %3 : !llvm.ptr -> i32
    %c848_i32_527 = arith.constant 848 : i32
    %985 = arith.addi %984, %c848_i32_527 : i32
    call @f63(%arg0, %985) : (!llvm.ptr, i32) -> ()
    %986 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_528 = arith.constant 1 : i64
    %c528_i64_529 = arith.constant 528 : i64
    %987 = arith.extui %986 : i32 to i64
    %988 = arith.addi %987, %c528_i64_529 : i64
    %c8_i64_530 = arith.constant 8 : i64
    %989 = arith.addi %988, %c8_i64_530 : i64
    %c0_i32_531 = arith.constant 0 : i32
    %990 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_531) : (!llvm.ptr, i32) -> i32
    %991 = arith.extui %990 : i32 to i64
    %c65536_i64_532 = arith.constant 65536 : i64
    %992 = arith.muli %991, %c65536_i64_532 : i64
    %993 = arith.cmpi ult, %989, %992 : i64
    cf.cond_br %993, ^bb185, ^bb186
  ^bb184:  // pred: ^bb181
    %c1_i32_533 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_533) : (i32) -> ()
    cf.br ^bb183
  ^bb185:  // 2 preds: ^bb183, ^bb186
    %994 = llvm.getelementptr %11[%988] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_528, %994 {alignment = 1 : i64} : i64, !llvm.ptr
    %995 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_534 = arith.constant 1 : i64
    %c520_i64_535 = arith.constant 520 : i64
    %996 = arith.extui %995 : i32 to i64
    %997 = arith.addi %996, %c520_i64_535 : i64
    %c8_i64_536 = arith.constant 8 : i64
    %998 = arith.addi %997, %c8_i64_536 : i64
    %c0_i32_537 = arith.constant 0 : i32
    %999 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_537) : (!llvm.ptr, i32) -> i32
    %1000 = arith.extui %999 : i32 to i64
    %c65536_i64_538 = arith.constant 65536 : i64
    %1001 = arith.muli %1000, %c65536_i64_538 : i64
    %1002 = arith.cmpi ult, %998, %1001 : i64
    cf.cond_br %1002, ^bb187, ^bb188
  ^bb186:  // pred: ^bb183
    %c1_i32_539 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_539) : (i32) -> ()
    cf.br ^bb185
  ^bb187:  // 2 preds: ^bb185, ^bb188
    %1003 = llvm.getelementptr %11[%997] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_534, %1003 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb30
  ^bb188:  // pred: ^bb185
    %c1_i32_540 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_540) : (i32) -> ()
    cf.br ^bb187
  ^bb189:  // 2 preds: ^bb45, ^bb190
    %1004 = llvm.getelementptr %11[%289] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-2147483648_i32_138, %1004 {alignment = 1 : i64} : i32, !llvm.ptr
    %1005 = llvm.load %3 : !llvm.ptr -> i32
    %c1284_i32_541 = arith.constant 1284 : i32
    %1006 = arith.addi %1005, %c1284_i32_541 : i32
    call @f4(%arg0, %1006) : (!llvm.ptr, i32) -> ()
    %1007 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_542 = arith.constant 1552 : i32
    %1008 = arith.addi %1007, %c1552_i32_542 : i32
    %1009 = llvm.load %5 : !llvm.ptr -> i32
    %1010 = llvm.load %4 : !llvm.ptr -> i32
    call @f5(%arg0, %1008, %1009, %1010) : (!llvm.ptr, i32, i32, i32) -> ()
    %1011 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i64_543 = arith.constant 1552 : i64
    %1012 = arith.extui %1011 : i32 to i64
    %1013 = arith.addi %1012, %c1552_i64_543 : i64
    %c4_i64_544 = arith.constant 4 : i64
    %1014 = arith.addi %1013, %c4_i64_544 : i64
    %c0_i32_545 = arith.constant 0 : i32
    %1015 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_545) : (!llvm.ptr, i32) -> i32
    %1016 = arith.extui %1015 : i32 to i64
    %c65536_i64_546 = arith.constant 65536 : i64
    %1017 = arith.muli %1016, %c65536_i64_546 : i64
    %1018 = arith.cmpi ult, %1014, %1017 : i64
    cf.cond_br %1018, ^bb192, ^bb193
  ^bb190:  // pred: ^bb45
    %c1_i32_547 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_547) : (i32) -> ()
    cf.br ^bb189
  ^bb191:  // pred: ^bb192
    %1019 = llvm.load %3 : !llvm.ptr -> i32
    %c872_i32 = arith.constant 872 : i32
    %1020 = arith.addi %1019, %c872_i32 : i32
    %c16_i32_548 = arith.constant 16 : i32
    %1021 = arith.addi %1020, %c16_i32_548 : i32
    %1022 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_549 = arith.constant 1552 : i32
    %1023 = arith.addi %1022, %c1552_i32_549 : i32
    %c16_i32_550 = arith.constant 16 : i32
    %1024 = arith.addi %1023, %c16_i32_550 : i32
    %c0_i64_551 = arith.constant 0 : i64
    %1025 = arith.extui %1024 : i32 to i64
    %1026 = arith.addi %1025, %c0_i64_551 : i64
    %c8_i64_552 = arith.constant 8 : i64
    %1027 = arith.addi %1026, %c8_i64_552 : i64
    %c0_i32_553 = arith.constant 0 : i32
    %1028 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_553) : (!llvm.ptr, i32) -> i32
    %1029 = arith.extui %1028 : i32 to i64
    %c65536_i64_554 = arith.constant 65536 : i64
    %1030 = arith.muli %1029, %c65536_i64_554 : i64
    %1031 = arith.cmpi ult, %1027, %1030 : i64
    cf.cond_br %1031, ^bb226, ^bb227
  ^bb192:  // 2 preds: ^bb189, ^bb193
    %1032 = llvm.getelementptr %11[%1013] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1033 = llvm.load volatile %1032 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-2147483638_i32_555 = arith.constant -2147483638 : i32
    %1034 = arith.cmpi eq, %1033, %c-2147483638_i32_555 : i32
    %1035 = arith.extui %1034 : i1 to i32
    %c0_i32_556 = arith.constant 0 : i32
    %1036 = arith.cmpi eq, %1035, %c0_i32_556 : i32
    %1037 = arith.extui %1036 : i1 to i32
    %c0_i32_557 = arith.constant 0 : i32
    %1038 = arith.cmpi ne, %1037, %c0_i32_557 : i32
    cf.cond_br %1038, ^bb191, ^bb194
  ^bb193:  // pred: ^bb189
    %c1_i32_558 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_558) : (i32) -> ()
    cf.br ^bb192
  ^bb194:  // pred: ^bb192
    %1039 = llvm.load %3 : !llvm.ptr -> i32
    %c96_i64 = arith.constant 96 : i64
    %1040 = arith.extui %1039 : i32 to i64
    %1041 = arith.addi %1040, %c96_i64 : i64
    %c4_i64_559 = arith.constant 4 : i64
    %1042 = arith.addi %1041, %c4_i64_559 : i64
    %c0_i32_560 = arith.constant 0 : i32
    %1043 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_560) : (!llvm.ptr, i32) -> i32
    %1044 = arith.extui %1043 : i32 to i64
    %c65536_i64_561 = arith.constant 65536 : i64
    %1045 = arith.muli %1044, %c65536_i64_561 : i64
    %1046 = arith.cmpi ult, %1042, %1045 : i64
    cf.cond_br %1046, ^bb197, ^bb198
  ^bb195:  // 2 preds: ^bb196, ^bb199
    %1047 = llvm.load %3 : !llvm.ptr -> i32
    %c896_i32 = arith.constant 896 : i32
    %1048 = arith.addi %1047, %c896_i32 : i32
    %c24_i32_562 = arith.constant 24 : i32
    %1049 = arith.addi %1048, %c24_i32_562 : i32
    %1050 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_563 = arith.constant 24 : i32
    %1051 = arith.addi %1050, %c24_i32_563 : i32
    %c0_i64_564 = arith.constant 0 : i64
    %1052 = arith.extui %1051 : i32 to i64
    %1053 = arith.addi %1052, %c0_i64_564 : i64
    %c8_i64_565 = arith.constant 8 : i64
    %1054 = arith.addi %1053, %c8_i64_565 : i64
    %c0_i32_566 = arith.constant 0 : i32
    %1055 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_566) : (!llvm.ptr, i32) -> i32
    %1056 = arith.extui %1055 : i32 to i64
    %c65536_i64_567 = arith.constant 65536 : i64
    %1057 = arith.muli %1056, %c65536_i64_567 : i64
    %1058 = arith.cmpi ult, %1054, %1057 : i64
    cf.cond_br %1058, ^bb200, ^bb201
  ^bb196:  // pred: ^bb197
    %1059 = llvm.load %3 : !llvm.ptr -> i32
    %c104_i32 = arith.constant 104 : i32
    %1060 = arith.addi %1059, %c104_i32 : i32
    llvm.store %1060, %2 : i32, !llvm.ptr
    cf.br ^bb195
  ^bb197:  // 2 preds: ^bb194, ^bb198
    %1061 = llvm.getelementptr %11[%1041] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1062 = llvm.load volatile %1061 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_568 = arith.constant 0 : i32
    %1063 = arith.cmpi ne, %1062, %c0_i32_568 : i32
    cf.cond_br %1063, ^bb196, ^bb199
  ^bb198:  // pred: ^bb194
    %c1_i32_569 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_569) : (i32) -> ()
    cf.br ^bb197
  ^bb199:  // pred: ^bb197
    %1064 = llvm.load %3 : !llvm.ptr -> i32
    %c96_i32 = arith.constant 96 : i32
    %1065 = arith.addi %1064, %c96_i32 : i32
    %1066 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %1067 = arith.addi %1066, %c64_i32 : i32
    %1068 = call @f0(%arg0, %1065, %1067) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %1068, %2 : i32, !llvm.ptr
    cf.br ^bb195
  ^bb200:  // 2 preds: ^bb195, ^bb201
    %1069 = llvm.getelementptr %11[%1053] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1070 = llvm.load volatile %1069 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_570 = arith.constant 0 : i64
    %1071 = arith.extui %1049 : i32 to i64
    %1072 = arith.addi %1071, %c0_i64_570 : i64
    %c8_i64_571 = arith.constant 8 : i64
    %1073 = arith.addi %1072, %c8_i64_571 : i64
    %c0_i32_572 = arith.constant 0 : i32
    %1074 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_572) : (!llvm.ptr, i32) -> i32
    %1075 = arith.extui %1074 : i32 to i64
    %c65536_i64_573 = arith.constant 65536 : i64
    %1076 = arith.muli %1075, %c65536_i64_573 : i64
    %1077 = arith.cmpi ult, %1073, %1076 : i64
    cf.cond_br %1077, ^bb202, ^bb203
  ^bb201:  // pred: ^bb195
    %c1_i32_574 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_574) : (i32) -> ()
    cf.br ^bb200
  ^bb202:  // 2 preds: ^bb200, ^bb203
    %1078 = llvm.getelementptr %11[%1072] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1070, %1078 {alignment = 1 : i64} : i64, !llvm.ptr
    %1079 = llvm.load %3 : !llvm.ptr -> i32
    %c896_i32_575 = arith.constant 896 : i32
    %1080 = arith.addi %1079, %c896_i32_575 : i32
    %c16_i32_576 = arith.constant 16 : i32
    %1081 = arith.addi %1080, %c16_i32_576 : i32
    %1082 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_577 = arith.constant 16 : i32
    %1083 = arith.addi %1082, %c16_i32_577 : i32
    %c0_i64_578 = arith.constant 0 : i64
    %1084 = arith.extui %1083 : i32 to i64
    %1085 = arith.addi %1084, %c0_i64_578 : i64
    %c8_i64_579 = arith.constant 8 : i64
    %1086 = arith.addi %1085, %c8_i64_579 : i64
    %c0_i32_580 = arith.constant 0 : i32
    %1087 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_580) : (!llvm.ptr, i32) -> i32
    %1088 = arith.extui %1087 : i32 to i64
    %c65536_i64_581 = arith.constant 65536 : i64
    %1089 = arith.muli %1088, %c65536_i64_581 : i64
    %1090 = arith.cmpi ult, %1086, %1089 : i64
    cf.cond_br %1090, ^bb204, ^bb205
  ^bb203:  // pred: ^bb200
    %c1_i32_582 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_582) : (i32) -> ()
    cf.br ^bb202
  ^bb204:  // 2 preds: ^bb202, ^bb205
    %1091 = llvm.getelementptr %11[%1085] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1092 = llvm.load volatile %1091 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_583 = arith.constant 0 : i64
    %1093 = arith.extui %1081 : i32 to i64
    %1094 = arith.addi %1093, %c0_i64_583 : i64
    %c8_i64_584 = arith.constant 8 : i64
    %1095 = arith.addi %1094, %c8_i64_584 : i64
    %c0_i32_585 = arith.constant 0 : i32
    %1096 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_585) : (!llvm.ptr, i32) -> i32
    %1097 = arith.extui %1096 : i32 to i64
    %c65536_i64_586 = arith.constant 65536 : i64
    %1098 = arith.muli %1097, %c65536_i64_586 : i64
    %1099 = arith.cmpi ult, %1095, %1098 : i64
    cf.cond_br %1099, ^bb206, ^bb207
  ^bb205:  // pred: ^bb202
    %c1_i32_587 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_587) : (i32) -> ()
    cf.br ^bb204
  ^bb206:  // 2 preds: ^bb204, ^bb207
    %1100 = llvm.getelementptr %11[%1094] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1092, %1100 {alignment = 1 : i64} : i64, !llvm.ptr
    %1101 = llvm.load %3 : !llvm.ptr -> i32
    %c896_i32_588 = arith.constant 896 : i32
    %1102 = arith.addi %1101, %c896_i32_588 : i32
    %c8_i32_589 = arith.constant 8 : i32
    %1103 = arith.addi %1102, %c8_i32_589 : i32
    %1104 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_590 = arith.constant 8 : i32
    %1105 = arith.addi %1104, %c8_i32_590 : i32
    %c0_i64_591 = arith.constant 0 : i64
    %1106 = arith.extui %1105 : i32 to i64
    %1107 = arith.addi %1106, %c0_i64_591 : i64
    %c8_i64_592 = arith.constant 8 : i64
    %1108 = arith.addi %1107, %c8_i64_592 : i64
    %c0_i32_593 = arith.constant 0 : i32
    %1109 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_593) : (!llvm.ptr, i32) -> i32
    %1110 = arith.extui %1109 : i32 to i64
    %c65536_i64_594 = arith.constant 65536 : i64
    %1111 = arith.muli %1110, %c65536_i64_594 : i64
    %1112 = arith.cmpi ult, %1108, %1111 : i64
    cf.cond_br %1112, ^bb208, ^bb209
  ^bb207:  // pred: ^bb204
    %c1_i32_595 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_595) : (i32) -> ()
    cf.br ^bb206
  ^bb208:  // 2 preds: ^bb206, ^bb209
    %1113 = llvm.getelementptr %11[%1107] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1114 = llvm.load volatile %1113 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_596 = arith.constant 0 : i64
    %1115 = arith.extui %1103 : i32 to i64
    %1116 = arith.addi %1115, %c0_i64_596 : i64
    %c8_i64_597 = arith.constant 8 : i64
    %1117 = arith.addi %1116, %c8_i64_597 : i64
    %c0_i32_598 = arith.constant 0 : i32
    %1118 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_598) : (!llvm.ptr, i32) -> i32
    %1119 = arith.extui %1118 : i32 to i64
    %c65536_i64_599 = arith.constant 65536 : i64
    %1120 = arith.muli %1119, %c65536_i64_599 : i64
    %1121 = arith.cmpi ult, %1117, %1120 : i64
    cf.cond_br %1121, ^bb210, ^bb211
  ^bb209:  // pred: ^bb206
    %c1_i32_600 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_600) : (i32) -> ()
    cf.br ^bb208
  ^bb210:  // 2 preds: ^bb208, ^bb211
    %1122 = llvm.getelementptr %11[%1116] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1114, %1122 {alignment = 1 : i64} : i64, !llvm.ptr
    %1123 = llvm.load %3 : !llvm.ptr -> i32
    %1124 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_601 = arith.constant 0 : i64
    %1125 = arith.extui %1124 : i32 to i64
    %1126 = arith.addi %1125, %c0_i64_601 : i64
    %c8_i64_602 = arith.constant 8 : i64
    %1127 = arith.addi %1126, %c8_i64_602 : i64
    %c0_i32_603 = arith.constant 0 : i32
    %1128 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_603) : (!llvm.ptr, i32) -> i32
    %1129 = arith.extui %1128 : i32 to i64
    %c65536_i64_604 = arith.constant 65536 : i64
    %1130 = arith.muli %1129, %c65536_i64_604 : i64
    %1131 = arith.cmpi ult, %1127, %1130 : i64
    cf.cond_br %1131, ^bb212, ^bb213
  ^bb211:  // pred: ^bb208
    %c1_i32_605 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_605) : (i32) -> ()
    cf.br ^bb210
  ^bb212:  // 2 preds: ^bb210, ^bb213
    %1132 = llvm.getelementptr %11[%1126] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1133 = llvm.load volatile %1132 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c896_i64 = arith.constant 896 : i64
    %1134 = arith.extui %1123 : i32 to i64
    %1135 = arith.addi %1134, %c896_i64 : i64
    %c8_i64_606 = arith.constant 8 : i64
    %1136 = arith.addi %1135, %c8_i64_606 : i64
    %c0_i32_607 = arith.constant 0 : i32
    %1137 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_607) : (!llvm.ptr, i32) -> i32
    %1138 = arith.extui %1137 : i32 to i64
    %c65536_i64_608 = arith.constant 65536 : i64
    %1139 = arith.muli %1138, %c65536_i64_608 : i64
    %1140 = arith.cmpi ult, %1136, %1139 : i64
    cf.cond_br %1140, ^bb214, ^bb215
  ^bb213:  // pred: ^bb210
    %c1_i32_609 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_609) : (i32) -> ()
    cf.br ^bb212
  ^bb214:  // 2 preds: ^bb212, ^bb215
    %1141 = llvm.getelementptr %11[%1135] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1133, %1141 {alignment = 1 : i64} : i64, !llvm.ptr
    %1142 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_610 = arith.constant 1552 : i32
    %1143 = arith.addi %1142, %c1552_i32_610 : i32
    %1144 = llvm.load %3 : !llvm.ptr -> i32
    %c896_i32_611 = arith.constant 896 : i32
    %1145 = arith.addi %1144, %c896_i32_611 : i32
    call @f10(%arg0, %1143, %1145) : (!llvm.ptr, i32, i32) -> ()
    %1146 = llvm.load %3 : !llvm.ptr -> i32
    %c532_i32_612 = arith.constant 532 : i32
    %1147 = arith.addi %1146, %c532_i32_612 : i32
    %1148 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_613 = arith.constant 1552 : i32
    %1149 = arith.addi %1148, %c1552_i32_613 : i32
    %c8_i32_614 = arith.constant 8 : i32
    %1150 = arith.addi %1149, %c8_i32_614 : i32
    %c0_i64_615 = arith.constant 0 : i64
    %1151 = arith.extui %1150 : i32 to i64
    %1152 = arith.addi %1151, %c0_i64_615 : i64
    %c4_i64_616 = arith.constant 4 : i64
    %1153 = arith.addi %1152, %c4_i64_616 : i64
    %c0_i32_617 = arith.constant 0 : i32
    %1154 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_617) : (!llvm.ptr, i32) -> i32
    %1155 = arith.extui %1154 : i32 to i64
    %c65536_i64_618 = arith.constant 65536 : i64
    %1156 = arith.muli %1155, %c65536_i64_618 : i64
    %1157 = arith.cmpi ult, %1153, %1156 : i64
    cf.cond_br %1157, ^bb216, ^bb217
  ^bb215:  // pred: ^bb212
    %c1_i32_619 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_619) : (i32) -> ()
    cf.br ^bb214
  ^bb216:  // 2 preds: ^bb214, ^bb217
    %1158 = llvm.getelementptr %11[%1152] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1159 = llvm.load volatile %1158 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_620 = arith.constant 0 : i64
    %1160 = arith.extui %1147 : i32 to i64
    %1161 = arith.addi %1160, %c0_i64_620 : i64
    %c4_i64_621 = arith.constant 4 : i64
    %1162 = arith.addi %1161, %c4_i64_621 : i64
    %c0_i32_622 = arith.constant 0 : i32
    %1163 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_622) : (!llvm.ptr, i32) -> i32
    %1164 = arith.extui %1163 : i32 to i64
    %c65536_i64_623 = arith.constant 65536 : i64
    %1165 = arith.muli %1164, %c65536_i64_623 : i64
    %1166 = arith.cmpi ult, %1162, %1165 : i64
    cf.cond_br %1166, ^bb218, ^bb219
  ^bb217:  // pred: ^bb214
    %c1_i32_624 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_624) : (i32) -> ()
    cf.br ^bb216
  ^bb218:  // 2 preds: ^bb216, ^bb219
    %1167 = llvm.getelementptr %11[%1161] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1159, %1167 {alignment = 1 : i64} : i32, !llvm.ptr
    %1168 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_625 = arith.constant 0 : i32
    %c520_i64_626 = arith.constant 520 : i64
    %1169 = arith.extui %1168 : i32 to i64
    %1170 = arith.addi %1169, %c520_i64_626 : i64
    %c4_i64_627 = arith.constant 4 : i64
    %1171 = arith.addi %1170, %c4_i64_627 : i64
    %c0_i32_628 = arith.constant 0 : i32
    %1172 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_628) : (!llvm.ptr, i32) -> i32
    %1173 = arith.extui %1172 : i32 to i64
    %c65536_i64_629 = arith.constant 65536 : i64
    %1174 = arith.muli %1173, %c65536_i64_629 : i64
    %1175 = arith.cmpi ult, %1171, %1174 : i64
    cf.cond_br %1175, ^bb220, ^bb221
  ^bb219:  // pred: ^bb216
    %c1_i32_630 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_630) : (i32) -> ()
    cf.br ^bb218
  ^bb220:  // 2 preds: ^bb218, ^bb221
    %1176 = llvm.getelementptr %11[%1170] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_625, %1176 {alignment = 1 : i64} : i32, !llvm.ptr
    %1177 = llvm.load %3 : !llvm.ptr -> i32
    %1178 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i64_631 = arith.constant 1552 : i64
    %1179 = arith.extui %1178 : i32 to i64
    %1180 = arith.addi %1179, %c1552_i64_631 : i64
    %c8_i64_632 = arith.constant 8 : i64
    %1181 = arith.addi %1180, %c8_i64_632 : i64
    %c0_i32_633 = arith.constant 0 : i32
    %1182 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_633) : (!llvm.ptr, i32) -> i32
    %1183 = arith.extui %1182 : i32 to i64
    %c65536_i64_634 = arith.constant 65536 : i64
    %1184 = arith.muli %1183, %c65536_i64_634 : i64
    %1185 = arith.cmpi ult, %1181, %1184 : i64
    cf.cond_br %1185, ^bb222, ^bb223
  ^bb221:  // pred: ^bb218
    %c1_i32_635 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_635) : (i32) -> ()
    cf.br ^bb220
  ^bb222:  // 2 preds: ^bb220, ^bb223
    %1186 = llvm.getelementptr %11[%1180] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1187 = llvm.load volatile %1186 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c524_i64_636 = arith.constant 524 : i64
    %1188 = arith.extui %1177 : i32 to i64
    %1189 = arith.addi %1188, %c524_i64_636 : i64
    %c8_i64_637 = arith.constant 8 : i64
    %1190 = arith.addi %1189, %c8_i64_637 : i64
    %c0_i32_638 = arith.constant 0 : i32
    %1191 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_638) : (!llvm.ptr, i32) -> i32
    %1192 = arith.extui %1191 : i32 to i64
    %c65536_i64_639 = arith.constant 65536 : i64
    %1193 = arith.muli %1192, %c65536_i64_639 : i64
    %1194 = arith.cmpi ult, %1190, %1193 : i64
    cf.cond_br %1194, ^bb224, ^bb225
  ^bb223:  // pred: ^bb220
    %c1_i32_640 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_640) : (i32) -> ()
    cf.br ^bb222
  ^bb224:  // 2 preds: ^bb222, ^bb225
    %1195 = llvm.getelementptr %11[%1189] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1187, %1195 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb30
  ^bb225:  // pred: ^bb222
    %c1_i32_641 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_641) : (i32) -> ()
    cf.br ^bb224
  ^bb226:  // 2 preds: ^bb191, ^bb227
    %1196 = llvm.getelementptr %11[%1026] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1197 = llvm.load volatile %1196 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_642 = arith.constant 0 : i64
    %1198 = arith.extui %1021 : i32 to i64
    %1199 = arith.addi %1198, %c0_i64_642 : i64
    %c8_i64_643 = arith.constant 8 : i64
    %1200 = arith.addi %1199, %c8_i64_643 : i64
    %c0_i32_644 = arith.constant 0 : i32
    %1201 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_644) : (!llvm.ptr, i32) -> i32
    %1202 = arith.extui %1201 : i32 to i64
    %c65536_i64_645 = arith.constant 65536 : i64
    %1203 = arith.muli %1202, %c65536_i64_645 : i64
    %1204 = arith.cmpi ult, %1200, %1203 : i64
    cf.cond_br %1204, ^bb228, ^bb229
  ^bb227:  // pred: ^bb191
    %c1_i32_646 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_646) : (i32) -> ()
    cf.br ^bb226
  ^bb228:  // 2 preds: ^bb226, ^bb229
    %1205 = llvm.getelementptr %11[%1199] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1197, %1205 {alignment = 1 : i64} : i64, !llvm.ptr
    %1206 = llvm.load %3 : !llvm.ptr -> i32
    %c872_i32_647 = arith.constant 872 : i32
    %1207 = arith.addi %1206, %c872_i32_647 : i32
    %c8_i32_648 = arith.constant 8 : i32
    %1208 = arith.addi %1207, %c8_i32_648 : i32
    %1209 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_649 = arith.constant 1552 : i32
    %1210 = arith.addi %1209, %c1552_i32_649 : i32
    %c8_i32_650 = arith.constant 8 : i32
    %1211 = arith.addi %1210, %c8_i32_650 : i32
    %c0_i64_651 = arith.constant 0 : i64
    %1212 = arith.extui %1211 : i32 to i64
    %1213 = arith.addi %1212, %c0_i64_651 : i64
    %c8_i64_652 = arith.constant 8 : i64
    %1214 = arith.addi %1213, %c8_i64_652 : i64
    %c0_i32_653 = arith.constant 0 : i32
    %1215 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_653) : (!llvm.ptr, i32) -> i32
    %1216 = arith.extui %1215 : i32 to i64
    %c65536_i64_654 = arith.constant 65536 : i64
    %1217 = arith.muli %1216, %c65536_i64_654 : i64
    %1218 = arith.cmpi ult, %1214, %1217 : i64
    cf.cond_br %1218, ^bb230, ^bb231
  ^bb229:  // pred: ^bb226
    %c1_i32_655 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_655) : (i32) -> ()
    cf.br ^bb228
  ^bb230:  // 2 preds: ^bb228, ^bb231
    %1219 = llvm.getelementptr %11[%1213] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1220 = llvm.load volatile %1219 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_656 = arith.constant 0 : i64
    %1221 = arith.extui %1208 : i32 to i64
    %1222 = arith.addi %1221, %c0_i64_656 : i64
    %c8_i64_657 = arith.constant 8 : i64
    %1223 = arith.addi %1222, %c8_i64_657 : i64
    %c0_i32_658 = arith.constant 0 : i32
    %1224 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_658) : (!llvm.ptr, i32) -> i32
    %1225 = arith.extui %1224 : i32 to i64
    %c65536_i64_659 = arith.constant 65536 : i64
    %1226 = arith.muli %1225, %c65536_i64_659 : i64
    %1227 = arith.cmpi ult, %1223, %1226 : i64
    cf.cond_br %1227, ^bb232, ^bb233
  ^bb231:  // pred: ^bb228
    %c1_i32_660 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_660) : (i32) -> ()
    cf.br ^bb230
  ^bb232:  // 2 preds: ^bb230, ^bb233
    %1228 = llvm.getelementptr %11[%1222] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1220, %1228 {alignment = 1 : i64} : i64, !llvm.ptr
    %1229 = llvm.load %3 : !llvm.ptr -> i32
    %1230 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i64_661 = arith.constant 1552 : i64
    %1231 = arith.extui %1230 : i32 to i64
    %1232 = arith.addi %1231, %c1552_i64_661 : i64
    %c8_i64_662 = arith.constant 8 : i64
    %1233 = arith.addi %1232, %c8_i64_662 : i64
    %c0_i32_663 = arith.constant 0 : i32
    %1234 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_663) : (!llvm.ptr, i32) -> i32
    %1235 = arith.extui %1234 : i32 to i64
    %c65536_i64_664 = arith.constant 65536 : i64
    %1236 = arith.muli %1235, %c65536_i64_664 : i64
    %1237 = arith.cmpi ult, %1233, %1236 : i64
    cf.cond_br %1237, ^bb234, ^bb235
  ^bb233:  // pred: ^bb230
    %c1_i32_665 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_665) : (i32) -> ()
    cf.br ^bb232
  ^bb234:  // 2 preds: ^bb232, ^bb235
    %1238 = llvm.getelementptr %11[%1232] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1239 = llvm.load volatile %1238 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c872_i64 = arith.constant 872 : i64
    %1240 = arith.extui %1229 : i32 to i64
    %1241 = arith.addi %1240, %c872_i64 : i64
    %c8_i64_666 = arith.constant 8 : i64
    %1242 = arith.addi %1241, %c8_i64_666 : i64
    %c0_i32_667 = arith.constant 0 : i32
    %1243 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_667) : (!llvm.ptr, i32) -> i32
    %1244 = arith.extui %1243 : i32 to i64
    %c65536_i64_668 = arith.constant 65536 : i64
    %1245 = arith.muli %1244, %c65536_i64_668 : i64
    %1246 = arith.cmpi ult, %1242, %1245 : i64
    cf.cond_br %1246, ^bb236, ^bb237
  ^bb235:  // pred: ^bb232
    %c1_i32_669 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_669) : (i32) -> ()
    cf.br ^bb234
  ^bb236:  // 2 preds: ^bb234, ^bb237
    %1247 = llvm.getelementptr %11[%1241] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1239, %1247 {alignment = 1 : i64} : i64, !llvm.ptr
    %1248 = llvm.load %3 : !llvm.ptr -> i32
    %c872_i32_670 = arith.constant 872 : i32
    %1249 = arith.addi %1248, %c872_i32_670 : i32
    call @f63(%arg0, %1249) : (!llvm.ptr, i32) -> ()
    %1250 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_671 = arith.constant 1 : i64
    %c528_i64_672 = arith.constant 528 : i64
    %1251 = arith.extui %1250 : i32 to i64
    %1252 = arith.addi %1251, %c528_i64_672 : i64
    %c8_i64_673 = arith.constant 8 : i64
    %1253 = arith.addi %1252, %c8_i64_673 : i64
    %c0_i32_674 = arith.constant 0 : i32
    %1254 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_674) : (!llvm.ptr, i32) -> i32
    %1255 = arith.extui %1254 : i32 to i64
    %c65536_i64_675 = arith.constant 65536 : i64
    %1256 = arith.muli %1255, %c65536_i64_675 : i64
    %1257 = arith.cmpi ult, %1253, %1256 : i64
    cf.cond_br %1257, ^bb238, ^bb239
  ^bb237:  // pred: ^bb234
    %c1_i32_676 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_676) : (i32) -> ()
    cf.br ^bb236
  ^bb238:  // 2 preds: ^bb236, ^bb239
    %1258 = llvm.getelementptr %11[%1252] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_671, %1258 {alignment = 1 : i64} : i64, !llvm.ptr
    %1259 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_677 = arith.constant 1 : i64
    %c520_i64_678 = arith.constant 520 : i64
    %1260 = arith.extui %1259 : i32 to i64
    %1261 = arith.addi %1260, %c520_i64_678 : i64
    %c8_i64_679 = arith.constant 8 : i64
    %1262 = arith.addi %1261, %c8_i64_679 : i64
    %c0_i32_680 = arith.constant 0 : i32
    %1263 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_680) : (!llvm.ptr, i32) -> i32
    %1264 = arith.extui %1263 : i32 to i64
    %c65536_i64_681 = arith.constant 65536 : i64
    %1265 = arith.muli %1264, %c65536_i64_681 : i64
    %1266 = arith.cmpi ult, %1262, %1265 : i64
    cf.cond_br %1266, ^bb240, ^bb241
  ^bb239:  // pred: ^bb236
    %c1_i32_682 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_682) : (i32) -> ()
    cf.br ^bb238
  ^bb240:  // 2 preds: ^bb238, ^bb241
    %1267 = llvm.getelementptr %11[%1261] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_677, %1267 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb30
  ^bb241:  // pred: ^bb238
    %c1_i32_683 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_683) : (i32) -> ()
    cf.br ^bb240
  ^bb242:  // 2 preds: ^bb44, ^bb243
    %1268 = llvm.getelementptr %11[%281] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-2147483648_i32_133, %1268 {alignment = 1 : i64} : i32, !llvm.ptr
    %1269 = llvm.load %3 : !llvm.ptr -> i32
    %c1284_i32_684 = arith.constant 1284 : i32
    %1270 = arith.addi %1269, %c1284_i32_684 : i32
    call @f4(%arg0, %1270) : (!llvm.ptr, i32) -> ()
    %1271 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_685 = arith.constant 1552 : i32
    %1272 = arith.addi %1271, %c1552_i32_685 : i32
    %1273 = llvm.load %5 : !llvm.ptr -> i32
    %1274 = llvm.load %4 : !llvm.ptr -> i32
    call @f11(%arg0, %1272, %1273, %1274) : (!llvm.ptr, i32, i32, i32) -> ()
    %1275 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i64_686 = arith.constant 1552 : i64
    %1276 = arith.extui %1275 : i32 to i64
    %1277 = arith.addi %1276, %c1552_i64_686 : i64
    %c4_i64_687 = arith.constant 4 : i64
    %1278 = arith.addi %1277, %c4_i64_687 : i64
    %c0_i32_688 = arith.constant 0 : i32
    %1279 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_688) : (!llvm.ptr, i32) -> i32
    %1280 = arith.extui %1279 : i32 to i64
    %c65536_i64_689 = arith.constant 65536 : i64
    %1281 = arith.muli %1280, %c65536_i64_689 : i64
    %1282 = arith.cmpi ult, %1278, %1281 : i64
    cf.cond_br %1282, ^bb245, ^bb246
  ^bb243:  // pred: ^bb44
    %c1_i32_690 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_690) : (i32) -> ()
    cf.br ^bb242
  ^bb244:  // pred: ^bb245
    %1283 = llvm.load %3 : !llvm.ptr -> i32
    %c928_i32 = arith.constant 928 : i32
    %1284 = arith.addi %1283, %c928_i32 : i32
    %c16_i32_691 = arith.constant 16 : i32
    %1285 = arith.addi %1284, %c16_i32_691 : i32
    %1286 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_692 = arith.constant 1552 : i32
    %1287 = arith.addi %1286, %c1552_i32_692 : i32
    %c16_i32_693 = arith.constant 16 : i32
    %1288 = arith.addi %1287, %c16_i32_693 : i32
    %c0_i64_694 = arith.constant 0 : i64
    %1289 = arith.extui %1288 : i32 to i64
    %1290 = arith.addi %1289, %c0_i64_694 : i64
    %c8_i64_695 = arith.constant 8 : i64
    %1291 = arith.addi %1290, %c8_i64_695 : i64
    %c0_i32_696 = arith.constant 0 : i32
    %1292 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_696) : (!llvm.ptr, i32) -> i32
    %1293 = arith.extui %1292 : i32 to i64
    %c65536_i64_697 = arith.constant 65536 : i64
    %1294 = arith.muli %1293, %c65536_i64_697 : i64
    %1295 = arith.cmpi ult, %1291, %1294 : i64
    cf.cond_br %1295, ^bb270, ^bb271
  ^bb245:  // 2 preds: ^bb242, ^bb246
    %1296 = llvm.getelementptr %11[%1277] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1297 = llvm.load volatile %1296 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-2147483638_i32_698 = arith.constant -2147483638 : i32
    %1298 = arith.cmpi eq, %1297, %c-2147483638_i32_698 : i32
    %1299 = arith.extui %1298 : i1 to i32
    %c0_i32_699 = arith.constant 0 : i32
    %1300 = arith.cmpi eq, %1299, %c0_i32_699 : i32
    %1301 = arith.extui %1300 : i1 to i32
    %c0_i32_700 = arith.constant 0 : i32
    %1302 = arith.cmpi ne, %1301, %c0_i32_700 : i32
    cf.cond_br %1302, ^bb244, ^bb247
  ^bb246:  // pred: ^bb242
    %c1_i32_701 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_701) : (i32) -> ()
    cf.br ^bb245
  ^bb247:  // pred: ^bb245
    %1303 = llvm.load %3 : !llvm.ptr -> i32
    %c1368_i32 = arith.constant 1368 : i32
    %1304 = arith.addi %1303, %c1368_i32 : i32
    %1305 = llvm.load %3 : !llvm.ptr -> i32
    %c1572_i32 = arith.constant 1572 : i32
    %1306 = arith.addi %1305, %c1572_i32 : i32
    %c0_i64_702 = arith.constant 0 : i64
    %1307 = arith.extui %1306 : i32 to i64
    %1308 = arith.addi %1307, %c0_i64_702 : i64
    %c4_i64_703 = arith.constant 4 : i64
    %1309 = arith.addi %1308, %c4_i64_703 : i64
    %c0_i32_704 = arith.constant 0 : i32
    %1310 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_704) : (!llvm.ptr, i32) -> i32
    %1311 = arith.extui %1310 : i32 to i64
    %c65536_i64_705 = arith.constant 65536 : i64
    %1312 = arith.muli %1311, %c65536_i64_705 : i64
    %1313 = arith.cmpi ult, %1309, %1312 : i64
    cf.cond_br %1313, ^bb248, ^bb249
  ^bb248:  // 2 preds: ^bb247, ^bb249
    %1314 = llvm.getelementptr %11[%1308] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1315 = llvm.load volatile %1314 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_706 = arith.constant 0 : i64
    %1316 = arith.extui %1304 : i32 to i64
    %1317 = arith.addi %1316, %c0_i64_706 : i64
    %c4_i64_707 = arith.constant 4 : i64
    %1318 = arith.addi %1317, %c4_i64_707 : i64
    %c0_i32_708 = arith.constant 0 : i32
    %1319 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_708) : (!llvm.ptr, i32) -> i32
    %1320 = arith.extui %1319 : i32 to i64
    %c65536_i64_709 = arith.constant 65536 : i64
    %1321 = arith.muli %1320, %c65536_i64_709 : i64
    %1322 = arith.cmpi ult, %1318, %1321 : i64
    cf.cond_br %1322, ^bb250, ^bb251
  ^bb249:  // pred: ^bb247
    %c1_i32_710 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_710) : (i32) -> ()
    cf.br ^bb248
  ^bb250:  // 2 preds: ^bb248, ^bb251
    %1323 = llvm.getelementptr %11[%1317] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1315, %1323 {alignment = 1 : i64} : i32, !llvm.ptr
    %1324 = llvm.load %3 : !llvm.ptr -> i32
    %c1352_i32 = arith.constant 1352 : i32
    %1325 = arith.addi %1324, %c1352_i32 : i32
    %c8_i32_711 = arith.constant 8 : i32
    %1326 = arith.addi %1325, %c8_i32_711 : i32
    %1327 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_712 = arith.constant 1552 : i32
    %1328 = arith.addi %1327, %c1552_i32_712 : i32
    %c12_i32 = arith.constant 12 : i32
    %1329 = arith.addi %1328, %c12_i32 : i32
    %c0_i64_713 = arith.constant 0 : i64
    %1330 = arith.extui %1329 : i32 to i64
    %1331 = arith.addi %1330, %c0_i64_713 : i64
    %c8_i64_714 = arith.constant 8 : i64
    %1332 = arith.addi %1331, %c8_i64_714 : i64
    %c0_i32_715 = arith.constant 0 : i32
    %1333 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_715) : (!llvm.ptr, i32) -> i32
    %1334 = arith.extui %1333 : i32 to i64
    %c65536_i64_716 = arith.constant 65536 : i64
    %1335 = arith.muli %1334, %c65536_i64_716 : i64
    %1336 = arith.cmpi ult, %1332, %1335 : i64
    cf.cond_br %1336, ^bb252, ^bb253
  ^bb251:  // pred: ^bb248
    %c1_i32_717 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_717) : (i32) -> ()
    cf.br ^bb250
  ^bb252:  // 2 preds: ^bb250, ^bb253
    %1337 = llvm.getelementptr %11[%1331] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1338 = llvm.load volatile %1337 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_718 = arith.constant 0 : i64
    %1339 = arith.extui %1326 : i32 to i64
    %1340 = arith.addi %1339, %c0_i64_718 : i64
    %c8_i64_719 = arith.constant 8 : i64
    %1341 = arith.addi %1340, %c8_i64_719 : i64
    %c0_i32_720 = arith.constant 0 : i32
    %1342 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_720) : (!llvm.ptr, i32) -> i32
    %1343 = arith.extui %1342 : i32 to i64
    %c65536_i64_721 = arith.constant 65536 : i64
    %1344 = arith.muli %1343, %c65536_i64_721 : i64
    %1345 = arith.cmpi ult, %1341, %1344 : i64
    cf.cond_br %1345, ^bb254, ^bb255
  ^bb253:  // pred: ^bb250
    %c1_i32_722 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_722) : (i32) -> ()
    cf.br ^bb252
  ^bb254:  // 2 preds: ^bb252, ^bb255
    %1346 = llvm.getelementptr %11[%1340] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1338, %1346 {alignment = 1 : i64} : i64, !llvm.ptr
    %1347 = llvm.load %3 : !llvm.ptr -> i32
    %1348 = llvm.load %3 : !llvm.ptr -> i32
    %c1556_i64 = arith.constant 1556 : i64
    %1349 = arith.extui %1348 : i32 to i64
    %1350 = arith.addi %1349, %c1556_i64 : i64
    %c8_i64_723 = arith.constant 8 : i64
    %1351 = arith.addi %1350, %c8_i64_723 : i64
    %c0_i32_724 = arith.constant 0 : i32
    %1352 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_724) : (!llvm.ptr, i32) -> i32
    %1353 = arith.extui %1352 : i32 to i64
    %c65536_i64_725 = arith.constant 65536 : i64
    %1354 = arith.muli %1353, %c65536_i64_725 : i64
    %1355 = arith.cmpi ult, %1351, %1354 : i64
    cf.cond_br %1355, ^bb256, ^bb257
  ^bb255:  // pred: ^bb252
    %c1_i32_726 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_726) : (i32) -> ()
    cf.br ^bb254
  ^bb256:  // 2 preds: ^bb254, ^bb257
    %1356 = llvm.getelementptr %11[%1350] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1357 = llvm.load volatile %1356 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c1352_i64 = arith.constant 1352 : i64
    %1358 = arith.extui %1347 : i32 to i64
    %1359 = arith.addi %1358, %c1352_i64 : i64
    %c8_i64_727 = arith.constant 8 : i64
    %1360 = arith.addi %1359, %c8_i64_727 : i64
    %c0_i32_728 = arith.constant 0 : i32
    %1361 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_728) : (!llvm.ptr, i32) -> i32
    %1362 = arith.extui %1361 : i32 to i64
    %c65536_i64_729 = arith.constant 65536 : i64
    %1363 = arith.muli %1362, %c65536_i64_729 : i64
    %1364 = arith.cmpi ult, %1360, %1363 : i64
    cf.cond_br %1364, ^bb258, ^bb259
  ^bb257:  // pred: ^bb254
    %c1_i32_730 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_730) : (i32) -> ()
    cf.br ^bb256
  ^bb258:  // 2 preds: ^bb256, ^bb259
    %1365 = llvm.getelementptr %11[%1359] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1357, %1365 {alignment = 1 : i64} : i64, !llvm.ptr
    %1366 = llvm.load %3 : !llvm.ptr -> i32
    %c952_i32 = arith.constant 952 : i32
    %1367 = arith.addi %1366, %c952_i32 : i32
    %1368 = llvm.load %3 : !llvm.ptr -> i32
    %1369 = llvm.load %3 : !llvm.ptr -> i32
    %c1352_i32_731 = arith.constant 1352 : i32
    %1370 = arith.addi %1369, %c1352_i32_731 : i32
    call @f12(%arg0, %1367, %1368, %1370) : (!llvm.ptr, i32, i32, i32) -> ()
    %1371 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_732 = arith.constant 1552 : i32
    %1372 = arith.addi %1371, %c1552_i32_732 : i32
    %1373 = llvm.load %3 : !llvm.ptr -> i32
    %c952_i32_733 = arith.constant 952 : i32
    %1374 = arith.addi %1373, %c952_i32_733 : i32
    call @f10(%arg0, %1372, %1374) : (!llvm.ptr, i32, i32) -> ()
    %1375 = llvm.load %3 : !llvm.ptr -> i32
    %c520_i32_734 = arith.constant 520 : i32
    %1376 = arith.addi %1375, %c520_i32_734 : i32
    %c12_i32_735 = arith.constant 12 : i32
    %1377 = arith.addi %1376, %c12_i32_735 : i32
    %1378 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_736 = arith.constant 1552 : i32
    %1379 = arith.addi %1378, %c1552_i32_736 : i32
    %c8_i32_737 = arith.constant 8 : i32
    %1380 = arith.addi %1379, %c8_i32_737 : i32
    %c0_i64_738 = arith.constant 0 : i64
    %1381 = arith.extui %1380 : i32 to i64
    %1382 = arith.addi %1381, %c0_i64_738 : i64
    %c4_i64_739 = arith.constant 4 : i64
    %1383 = arith.addi %1382, %c4_i64_739 : i64
    %c0_i32_740 = arith.constant 0 : i32
    %1384 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_740) : (!llvm.ptr, i32) -> i32
    %1385 = arith.extui %1384 : i32 to i64
    %c65536_i64_741 = arith.constant 65536 : i64
    %1386 = arith.muli %1385, %c65536_i64_741 : i64
    %1387 = arith.cmpi ult, %1383, %1386 : i64
    cf.cond_br %1387, ^bb260, ^bb261
  ^bb259:  // pred: ^bb256
    %c1_i32_742 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_742) : (i32) -> ()
    cf.br ^bb258
  ^bb260:  // 2 preds: ^bb258, ^bb261
    %1388 = llvm.getelementptr %11[%1382] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1389 = llvm.load volatile %1388 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_743 = arith.constant 0 : i64
    %1390 = arith.extui %1377 : i32 to i64
    %1391 = arith.addi %1390, %c0_i64_743 : i64
    %c4_i64_744 = arith.constant 4 : i64
    %1392 = arith.addi %1391, %c4_i64_744 : i64
    %c0_i32_745 = arith.constant 0 : i32
    %1393 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_745) : (!llvm.ptr, i32) -> i32
    %1394 = arith.extui %1393 : i32 to i64
    %c65536_i64_746 = arith.constant 65536 : i64
    %1395 = arith.muli %1394, %c65536_i64_746 : i64
    %1396 = arith.cmpi ult, %1392, %1395 : i64
    cf.cond_br %1396, ^bb262, ^bb263
  ^bb261:  // pred: ^bb258
    %c1_i32_747 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_747) : (i32) -> ()
    cf.br ^bb260
  ^bb262:  // 2 preds: ^bb260, ^bb263
    %1397 = llvm.getelementptr %11[%1391] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1389, %1397 {alignment = 1 : i64} : i32, !llvm.ptr
    %1398 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_748 = arith.constant 0 : i32
    %c520_i64_749 = arith.constant 520 : i64
    %1399 = arith.extui %1398 : i32 to i64
    %1400 = arith.addi %1399, %c520_i64_749 : i64
    %c4_i64_750 = arith.constant 4 : i64
    %1401 = arith.addi %1400, %c4_i64_750 : i64
    %c0_i32_751 = arith.constant 0 : i32
    %1402 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_751) : (!llvm.ptr, i32) -> i32
    %1403 = arith.extui %1402 : i32 to i64
    %c65536_i64_752 = arith.constant 65536 : i64
    %1404 = arith.muli %1403, %c65536_i64_752 : i64
    %1405 = arith.cmpi ult, %1401, %1404 : i64
    cf.cond_br %1405, ^bb264, ^bb265
  ^bb263:  // pred: ^bb260
    %c1_i32_753 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_753) : (i32) -> ()
    cf.br ^bb262
  ^bb264:  // 2 preds: ^bb262, ^bb265
    %1406 = llvm.getelementptr %11[%1400] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_748, %1406 {alignment = 1 : i64} : i32, !llvm.ptr
    %1407 = llvm.load %3 : !llvm.ptr -> i32
    %1408 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i64_754 = arith.constant 1552 : i64
    %1409 = arith.extui %1408 : i32 to i64
    %1410 = arith.addi %1409, %c1552_i64_754 : i64
    %c8_i64_755 = arith.constant 8 : i64
    %1411 = arith.addi %1410, %c8_i64_755 : i64
    %c0_i32_756 = arith.constant 0 : i32
    %1412 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_756) : (!llvm.ptr, i32) -> i32
    %1413 = arith.extui %1412 : i32 to i64
    %c65536_i64_757 = arith.constant 65536 : i64
    %1414 = arith.muli %1413, %c65536_i64_757 : i64
    %1415 = arith.cmpi ult, %1411, %1414 : i64
    cf.cond_br %1415, ^bb266, ^bb267
  ^bb265:  // pred: ^bb262
    %c1_i32_758 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_758) : (i32) -> ()
    cf.br ^bb264
  ^bb266:  // 2 preds: ^bb264, ^bb267
    %1416 = llvm.getelementptr %11[%1410] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1417 = llvm.load volatile %1416 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c524_i64_759 = arith.constant 524 : i64
    %1418 = arith.extui %1407 : i32 to i64
    %1419 = arith.addi %1418, %c524_i64_759 : i64
    %c8_i64_760 = arith.constant 8 : i64
    %1420 = arith.addi %1419, %c8_i64_760 : i64
    %c0_i32_761 = arith.constant 0 : i32
    %1421 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_761) : (!llvm.ptr, i32) -> i32
    %1422 = arith.extui %1421 : i32 to i64
    %c65536_i64_762 = arith.constant 65536 : i64
    %1423 = arith.muli %1422, %c65536_i64_762 : i64
    %1424 = arith.cmpi ult, %1420, %1423 : i64
    cf.cond_br %1424, ^bb268, ^bb269
  ^bb267:  // pred: ^bb264
    %c1_i32_763 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_763) : (i32) -> ()
    cf.br ^bb266
  ^bb268:  // 2 preds: ^bb266, ^bb269
    %1425 = llvm.getelementptr %11[%1419] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1417, %1425 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb30
  ^bb269:  // pred: ^bb266
    %c1_i32_764 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_764) : (i32) -> ()
    cf.br ^bb268
  ^bb270:  // 2 preds: ^bb244, ^bb271
    %1426 = llvm.getelementptr %11[%1290] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1427 = llvm.load volatile %1426 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_765 = arith.constant 0 : i64
    %1428 = arith.extui %1285 : i32 to i64
    %1429 = arith.addi %1428, %c0_i64_765 : i64
    %c8_i64_766 = arith.constant 8 : i64
    %1430 = arith.addi %1429, %c8_i64_766 : i64
    %c0_i32_767 = arith.constant 0 : i32
    %1431 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_767) : (!llvm.ptr, i32) -> i32
    %1432 = arith.extui %1431 : i32 to i64
    %c65536_i64_768 = arith.constant 65536 : i64
    %1433 = arith.muli %1432, %c65536_i64_768 : i64
    %1434 = arith.cmpi ult, %1430, %1433 : i64
    cf.cond_br %1434, ^bb272, ^bb273
  ^bb271:  // pred: ^bb244
    %c1_i32_769 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_769) : (i32) -> ()
    cf.br ^bb270
  ^bb272:  // 2 preds: ^bb270, ^bb273
    %1435 = llvm.getelementptr %11[%1429] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1427, %1435 {alignment = 1 : i64} : i64, !llvm.ptr
    %1436 = llvm.load %3 : !llvm.ptr -> i32
    %c928_i32_770 = arith.constant 928 : i32
    %1437 = arith.addi %1436, %c928_i32_770 : i32
    %c8_i32_771 = arith.constant 8 : i32
    %1438 = arith.addi %1437, %c8_i32_771 : i32
    %1439 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_772 = arith.constant 1552 : i32
    %1440 = arith.addi %1439, %c1552_i32_772 : i32
    %c8_i32_773 = arith.constant 8 : i32
    %1441 = arith.addi %1440, %c8_i32_773 : i32
    %c0_i64_774 = arith.constant 0 : i64
    %1442 = arith.extui %1441 : i32 to i64
    %1443 = arith.addi %1442, %c0_i64_774 : i64
    %c8_i64_775 = arith.constant 8 : i64
    %1444 = arith.addi %1443, %c8_i64_775 : i64
    %c0_i32_776 = arith.constant 0 : i32
    %1445 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_776) : (!llvm.ptr, i32) -> i32
    %1446 = arith.extui %1445 : i32 to i64
    %c65536_i64_777 = arith.constant 65536 : i64
    %1447 = arith.muli %1446, %c65536_i64_777 : i64
    %1448 = arith.cmpi ult, %1444, %1447 : i64
    cf.cond_br %1448, ^bb274, ^bb275
  ^bb273:  // pred: ^bb270
    %c1_i32_778 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_778) : (i32) -> ()
    cf.br ^bb272
  ^bb274:  // 2 preds: ^bb272, ^bb275
    %1449 = llvm.getelementptr %11[%1443] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1450 = llvm.load volatile %1449 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_779 = arith.constant 0 : i64
    %1451 = arith.extui %1438 : i32 to i64
    %1452 = arith.addi %1451, %c0_i64_779 : i64
    %c8_i64_780 = arith.constant 8 : i64
    %1453 = arith.addi %1452, %c8_i64_780 : i64
    %c0_i32_781 = arith.constant 0 : i32
    %1454 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_781) : (!llvm.ptr, i32) -> i32
    %1455 = arith.extui %1454 : i32 to i64
    %c65536_i64_782 = arith.constant 65536 : i64
    %1456 = arith.muli %1455, %c65536_i64_782 : i64
    %1457 = arith.cmpi ult, %1453, %1456 : i64
    cf.cond_br %1457, ^bb276, ^bb277
  ^bb275:  // pred: ^bb272
    %c1_i32_783 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_783) : (i32) -> ()
    cf.br ^bb274
  ^bb276:  // 2 preds: ^bb274, ^bb277
    %1458 = llvm.getelementptr %11[%1452] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1450, %1458 {alignment = 1 : i64} : i64, !llvm.ptr
    %1459 = llvm.load %3 : !llvm.ptr -> i32
    %1460 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i64_784 = arith.constant 1552 : i64
    %1461 = arith.extui %1460 : i32 to i64
    %1462 = arith.addi %1461, %c1552_i64_784 : i64
    %c8_i64_785 = arith.constant 8 : i64
    %1463 = arith.addi %1462, %c8_i64_785 : i64
    %c0_i32_786 = arith.constant 0 : i32
    %1464 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_786) : (!llvm.ptr, i32) -> i32
    %1465 = arith.extui %1464 : i32 to i64
    %c65536_i64_787 = arith.constant 65536 : i64
    %1466 = arith.muli %1465, %c65536_i64_787 : i64
    %1467 = arith.cmpi ult, %1463, %1466 : i64
    cf.cond_br %1467, ^bb278, ^bb279
  ^bb277:  // pred: ^bb274
    %c1_i32_788 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_788) : (i32) -> ()
    cf.br ^bb276
  ^bb278:  // 2 preds: ^bb276, ^bb279
    %1468 = llvm.getelementptr %11[%1462] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1469 = llvm.load volatile %1468 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c928_i64 = arith.constant 928 : i64
    %1470 = arith.extui %1459 : i32 to i64
    %1471 = arith.addi %1470, %c928_i64 : i64
    %c8_i64_789 = arith.constant 8 : i64
    %1472 = arith.addi %1471, %c8_i64_789 : i64
    %c0_i32_790 = arith.constant 0 : i32
    %1473 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_790) : (!llvm.ptr, i32) -> i32
    %1474 = arith.extui %1473 : i32 to i64
    %c65536_i64_791 = arith.constant 65536 : i64
    %1475 = arith.muli %1474, %c65536_i64_791 : i64
    %1476 = arith.cmpi ult, %1472, %1475 : i64
    cf.cond_br %1476, ^bb280, ^bb281
  ^bb279:  // pred: ^bb276
    %c1_i32_792 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_792) : (i32) -> ()
    cf.br ^bb278
  ^bb280:  // 2 preds: ^bb278, ^bb281
    %1477 = llvm.getelementptr %11[%1471] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1469, %1477 {alignment = 1 : i64} : i64, !llvm.ptr
    %1478 = llvm.load %3 : !llvm.ptr -> i32
    %c928_i32_793 = arith.constant 928 : i32
    %1479 = arith.addi %1478, %c928_i32_793 : i32
    call @f63(%arg0, %1479) : (!llvm.ptr, i32) -> ()
    %1480 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_794 = arith.constant 1 : i64
    %c528_i64_795 = arith.constant 528 : i64
    %1481 = arith.extui %1480 : i32 to i64
    %1482 = arith.addi %1481, %c528_i64_795 : i64
    %c8_i64_796 = arith.constant 8 : i64
    %1483 = arith.addi %1482, %c8_i64_796 : i64
    %c0_i32_797 = arith.constant 0 : i32
    %1484 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_797) : (!llvm.ptr, i32) -> i32
    %1485 = arith.extui %1484 : i32 to i64
    %c65536_i64_798 = arith.constant 65536 : i64
    %1486 = arith.muli %1485, %c65536_i64_798 : i64
    %1487 = arith.cmpi ult, %1483, %1486 : i64
    cf.cond_br %1487, ^bb282, ^bb283
  ^bb281:  // pred: ^bb278
    %c1_i32_799 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_799) : (i32) -> ()
    cf.br ^bb280
  ^bb282:  // 2 preds: ^bb280, ^bb283
    %1488 = llvm.getelementptr %11[%1482] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_794, %1488 {alignment = 1 : i64} : i64, !llvm.ptr
    %1489 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_800 = arith.constant 1 : i64
    %c520_i64_801 = arith.constant 520 : i64
    %1490 = arith.extui %1489 : i32 to i64
    %1491 = arith.addi %1490, %c520_i64_801 : i64
    %c8_i64_802 = arith.constant 8 : i64
    %1492 = arith.addi %1491, %c8_i64_802 : i64
    %c0_i32_803 = arith.constant 0 : i32
    %1493 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_803) : (!llvm.ptr, i32) -> i32
    %1494 = arith.extui %1493 : i32 to i64
    %c65536_i64_804 = arith.constant 65536 : i64
    %1495 = arith.muli %1494, %c65536_i64_804 : i64
    %1496 = arith.cmpi ult, %1492, %1495 : i64
    cf.cond_br %1496, ^bb284, ^bb285
  ^bb283:  // pred: ^bb280
    %c1_i32_805 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_805) : (i32) -> ()
    cf.br ^bb282
  ^bb284:  // 2 preds: ^bb282, ^bb285
    %1497 = llvm.getelementptr %11[%1491] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_800, %1497 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb30
  ^bb285:  // pred: ^bb282
    %c1_i32_806 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_806) : (i32) -> ()
    cf.br ^bb284
  ^bb286:  // 2 preds: ^bb43, ^bb287
    %1498 = llvm.getelementptr %11[%273] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-2147483648_i32, %1498 {alignment = 1 : i64} : i32, !llvm.ptr
    %1499 = llvm.load %3 : !llvm.ptr -> i32
    %c1284_i32_807 = arith.constant 1284 : i32
    %1500 = arith.addi %1499, %c1284_i32_807 : i32
    call @f4(%arg0, %1500) : (!llvm.ptr, i32) -> ()
    %1501 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_808 = arith.constant 1552 : i32
    %1502 = arith.addi %1501, %c1552_i32_808 : i32
    %1503 = llvm.load %5 : !llvm.ptr -> i32
    %1504 = llvm.load %4 : !llvm.ptr -> i32
    call @f13(%arg0, %1502, %1503, %1504) : (!llvm.ptr, i32, i32, i32) -> ()
    %1505 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i64_809 = arith.constant 1552 : i64
    %1506 = arith.extui %1505 : i32 to i64
    %1507 = arith.addi %1506, %c1552_i64_809 : i64
    %c4_i64_810 = arith.constant 4 : i64
    %1508 = arith.addi %1507, %c4_i64_810 : i64
    %c0_i32_811 = arith.constant 0 : i32
    %1509 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_811) : (!llvm.ptr, i32) -> i32
    %1510 = arith.extui %1509 : i32 to i64
    %c65536_i64_812 = arith.constant 65536 : i64
    %1511 = arith.muli %1510, %c65536_i64_812 : i64
    %1512 = arith.cmpi ult, %1508, %1511 : i64
    cf.cond_br %1512, ^bb289, ^bb290
  ^bb287:  // pred: ^bb43
    %c1_i32_813 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_813) : (i32) -> ()
    cf.br ^bb286
  ^bb288:  // pred: ^bb289
    %1513 = llvm.load %3 : !llvm.ptr -> i32
    %c1000_i32 = arith.constant 1000 : i32
    %1514 = arith.addi %1513, %c1000_i32 : i32
    %1515 = llvm.load %3 : !llvm.ptr -> i32
    %c1572_i32_814 = arith.constant 1572 : i32
    %1516 = arith.addi %1515, %c1572_i32_814 : i32
    %c0_i64_815 = arith.constant 0 : i64
    %1517 = arith.extui %1516 : i32 to i64
    %1518 = arith.addi %1517, %c0_i64_815 : i64
    %c8_i64_816 = arith.constant 8 : i64
    %1519 = arith.addi %1518, %c8_i64_816 : i64
    %c0_i32_817 = arith.constant 0 : i32
    %1520 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_817) : (!llvm.ptr, i32) -> i32
    %1521 = arith.extui %1520 : i32 to i64
    %c65536_i64_818 = arith.constant 65536 : i64
    %1522 = arith.muli %1521, %c65536_i64_818 : i64
    %1523 = arith.cmpi ult, %1519, %1522 : i64
    cf.cond_br %1523, ^bb347, ^bb348
  ^bb289:  // 2 preds: ^bb286, ^bb290
    %1524 = llvm.getelementptr %11[%1507] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1525 = llvm.load volatile %1524 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_819 = arith.constant 0 : i32
    %1526 = arith.cmpi ne, %1525, %c0_i32_819 : i32
    cf.cond_br %1526, ^bb288, ^bb291
  ^bb290:  // pred: ^bb286
    %c1_i32_820 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_820) : (i32) -> ()
    cf.br ^bb289
  ^bb291:  // pred: ^bb289
    %1527 = llvm.load %3 : !llvm.ptr -> i32
    %c1376_i32 = arith.constant 1376 : i32
    %1528 = arith.addi %1527, %c1376_i32 : i32
    %c16_i32_821 = arith.constant 16 : i32
    %1529 = arith.addi %1528, %c16_i32_821 : i32
    %1530 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_822 = arith.constant 1552 : i32
    %1531 = arith.addi %1530, %c1552_i32_822 : i32
    %c24_i32_823 = arith.constant 24 : i32
    %1532 = arith.addi %1531, %c24_i32_823 : i32
    %c0_i64_824 = arith.constant 0 : i64
    %1533 = arith.extui %1532 : i32 to i64
    %1534 = arith.addi %1533, %c0_i64_824 : i64
    %c4_i64_825 = arith.constant 4 : i64
    %1535 = arith.addi %1534, %c4_i64_825 : i64
    %c0_i32_826 = arith.constant 0 : i32
    %1536 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_826) : (!llvm.ptr, i32) -> i32
    %1537 = arith.extui %1536 : i32 to i64
    %c65536_i64_827 = arith.constant 65536 : i64
    %1538 = arith.muli %1537, %c65536_i64_827 : i64
    %1539 = arith.cmpi ult, %1535, %1538 : i64
    cf.cond_br %1539, ^bb292, ^bb293
  ^bb292:  // 2 preds: ^bb291, ^bb293
    %1540 = llvm.getelementptr %11[%1534] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1541 = llvm.load volatile %1540 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_828 = arith.constant 0 : i64
    %1542 = arith.extui %1529 : i32 to i64
    %1543 = arith.addi %1542, %c0_i64_828 : i64
    %c4_i64_829 = arith.constant 4 : i64
    %1544 = arith.addi %1543, %c4_i64_829 : i64
    %c0_i32_830 = arith.constant 0 : i32
    %1545 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_830) : (!llvm.ptr, i32) -> i32
    %1546 = arith.extui %1545 : i32 to i64
    %c65536_i64_831 = arith.constant 65536 : i64
    %1547 = arith.muli %1546, %c65536_i64_831 : i64
    %1548 = arith.cmpi ult, %1544, %1547 : i64
    cf.cond_br %1548, ^bb294, ^bb295
  ^bb293:  // pred: ^bb291
    %c1_i32_832 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_832) : (i32) -> ()
    cf.br ^bb292
  ^bb294:  // 2 preds: ^bb292, ^bb295
    %1549 = llvm.getelementptr %11[%1543] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1541, %1549 {alignment = 1 : i64} : i32, !llvm.ptr
    %1550 = llvm.load %3 : !llvm.ptr -> i32
    %c1376_i32_833 = arith.constant 1376 : i32
    %1551 = arith.addi %1550, %c1376_i32_833 : i32
    %c8_i32_834 = arith.constant 8 : i32
    %1552 = arith.addi %1551, %c8_i32_834 : i32
    %1553 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_835 = arith.constant 1552 : i32
    %1554 = arith.addi %1553, %c1552_i32_835 : i32
    %c16_i32_836 = arith.constant 16 : i32
    %1555 = arith.addi %1554, %c16_i32_836 : i32
    llvm.store %1555, %2 : i32, !llvm.ptr
    %c0_i64_837 = arith.constant 0 : i64
    %1556 = arith.extui %1555 : i32 to i64
    %1557 = arith.addi %1556, %c0_i64_837 : i64
    %c8_i64_838 = arith.constant 8 : i64
    %1558 = arith.addi %1557, %c8_i64_838 : i64
    %c0_i32_839 = arith.constant 0 : i32
    %1559 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_839) : (!llvm.ptr, i32) -> i32
    %1560 = arith.extui %1559 : i32 to i64
    %c65536_i64_840 = arith.constant 65536 : i64
    %1561 = arith.muli %1560, %c65536_i64_840 : i64
    %1562 = arith.cmpi ult, %1558, %1561 : i64
    cf.cond_br %1562, ^bb296, ^bb297
  ^bb295:  // pred: ^bb292
    %c1_i32_841 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_841) : (i32) -> ()
    cf.br ^bb294
  ^bb296:  // 2 preds: ^bb294, ^bb297
    %1563 = llvm.getelementptr %11[%1557] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1564 = llvm.load volatile %1563 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_842 = arith.constant 0 : i64
    %1565 = arith.extui %1552 : i32 to i64
    %1566 = arith.addi %1565, %c0_i64_842 : i64
    %c8_i64_843 = arith.constant 8 : i64
    %1567 = arith.addi %1566, %c8_i64_843 : i64
    %c0_i32_844 = arith.constant 0 : i32
    %1568 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_844) : (!llvm.ptr, i32) -> i32
    %1569 = arith.extui %1568 : i32 to i64
    %c65536_i64_845 = arith.constant 65536 : i64
    %1570 = arith.muli %1569, %c65536_i64_845 : i64
    %1571 = arith.cmpi ult, %1567, %1570 : i64
    cf.cond_br %1571, ^bb298, ^bb299
  ^bb297:  // pred: ^bb294
    %c1_i32_846 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_846) : (i32) -> ()
    cf.br ^bb296
  ^bb298:  // 2 preds: ^bb296, ^bb299
    %1572 = llvm.getelementptr %11[%1566] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1564, %1572 {alignment = 1 : i64} : i64, !llvm.ptr
    %1573 = llvm.load %3 : !llvm.ptr -> i32
    %c1400_i32 = arith.constant 1400 : i32
    %1574 = arith.addi %1573, %c1400_i32 : i32
    %c8_i32_847 = arith.constant 8 : i32
    %1575 = arith.addi %1574, %c8_i32_847 : i32
    %1576 = llvm.load %3 : !llvm.ptr -> i32
    %c1592_i32 = arith.constant 1592 : i32
    %1577 = arith.addi %1576, %c1592_i32 : i32
    %c0_i64_848 = arith.constant 0 : i64
    %1578 = arith.extui %1577 : i32 to i64
    %1579 = arith.addi %1578, %c0_i64_848 : i64
    %c8_i64_849 = arith.constant 8 : i64
    %1580 = arith.addi %1579, %c8_i64_849 : i64
    %c0_i32_850 = arith.constant 0 : i32
    %1581 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_850) : (!llvm.ptr, i32) -> i32
    %1582 = arith.extui %1581 : i32 to i64
    %c65536_i64_851 = arith.constant 65536 : i64
    %1583 = arith.muli %1582, %c65536_i64_851 : i64
    %1584 = arith.cmpi ult, %1580, %1583 : i64
    cf.cond_br %1584, ^bb300, ^bb301
  ^bb299:  // pred: ^bb296
    %c1_i32_852 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_852) : (i32) -> ()
    cf.br ^bb298
  ^bb300:  // 2 preds: ^bb298, ^bb301
    %1585 = llvm.getelementptr %11[%1579] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1586 = llvm.load volatile %1585 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_853 = arith.constant 0 : i64
    %1587 = arith.extui %1575 : i32 to i64
    %1588 = arith.addi %1587, %c0_i64_853 : i64
    %c8_i64_854 = arith.constant 8 : i64
    %1589 = arith.addi %1588, %c8_i64_854 : i64
    %c0_i32_855 = arith.constant 0 : i32
    %1590 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_855) : (!llvm.ptr, i32) -> i32
    %1591 = arith.extui %1590 : i32 to i64
    %c65536_i64_856 = arith.constant 65536 : i64
    %1592 = arith.muli %1591, %c65536_i64_856 : i64
    %1593 = arith.cmpi ult, %1589, %1592 : i64
    cf.cond_br %1593, ^bb302, ^bb303
  ^bb301:  // pred: ^bb298
    %c1_i32_857 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_857) : (i32) -> ()
    cf.br ^bb300
  ^bb302:  // 2 preds: ^bb300, ^bb303
    %1594 = llvm.getelementptr %11[%1588] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1586, %1594 {alignment = 1 : i64} : i64, !llvm.ptr
    %1595 = llvm.load %3 : !llvm.ptr -> i32
    %c1400_i32_858 = arith.constant 1400 : i32
    %1596 = arith.addi %1595, %c1400_i32_858 : i32
    %c16_i32_859 = arith.constant 16 : i32
    %1597 = arith.addi %1596, %c16_i32_859 : i32
    %1598 = llvm.load %3 : !llvm.ptr -> i32
    %c1600_i32 = arith.constant 1600 : i32
    %1599 = arith.addi %1598, %c1600_i32 : i32
    %c0_i64_860 = arith.constant 0 : i64
    %1600 = arith.extui %1599 : i32 to i64
    %1601 = arith.addi %1600, %c0_i64_860 : i64
    %c8_i64_861 = arith.constant 8 : i64
    %1602 = arith.addi %1601, %c8_i64_861 : i64
    %c0_i32_862 = arith.constant 0 : i32
    %1603 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_862) : (!llvm.ptr, i32) -> i32
    %1604 = arith.extui %1603 : i32 to i64
    %c65536_i64_863 = arith.constant 65536 : i64
    %1605 = arith.muli %1604, %c65536_i64_863 : i64
    %1606 = arith.cmpi ult, %1602, %1605 : i64
    cf.cond_br %1606, ^bb304, ^bb305
  ^bb303:  // pred: ^bb300
    %c1_i32_864 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_864) : (i32) -> ()
    cf.br ^bb302
  ^bb304:  // 2 preds: ^bb302, ^bb305
    %1607 = llvm.getelementptr %11[%1601] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1608 = llvm.load volatile %1607 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_865 = arith.constant 0 : i64
    %1609 = arith.extui %1597 : i32 to i64
    %1610 = arith.addi %1609, %c0_i64_865 : i64
    %c8_i64_866 = arith.constant 8 : i64
    %1611 = arith.addi %1610, %c8_i64_866 : i64
    %c0_i32_867 = arith.constant 0 : i32
    %1612 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_867) : (!llvm.ptr, i32) -> i32
    %1613 = arith.extui %1612 : i32 to i64
    %c65536_i64_868 = arith.constant 65536 : i64
    %1614 = arith.muli %1613, %c65536_i64_868 : i64
    %1615 = arith.cmpi ult, %1611, %1614 : i64
    cf.cond_br %1615, ^bb306, ^bb307
  ^bb305:  // pred: ^bb302
    %c1_i32_869 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_869) : (i32) -> ()
    cf.br ^bb304
  ^bb306:  // 2 preds: ^bb304, ^bb307
    %1616 = llvm.getelementptr %11[%1610] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1608, %1616 {alignment = 1 : i64} : i64, !llvm.ptr
    %1617 = llvm.load %3 : !llvm.ptr -> i32
    %c1400_i32_870 = arith.constant 1400 : i32
    %1618 = arith.addi %1617, %c1400_i32_870 : i32
    %c24_i32_871 = arith.constant 24 : i32
    %1619 = arith.addi %1618, %c24_i32_871 : i32
    %1620 = llvm.load %3 : !llvm.ptr -> i32
    %c1608_i32 = arith.constant 1608 : i32
    %1621 = arith.addi %1620, %c1608_i32 : i32
    %c0_i64_872 = arith.constant 0 : i64
    %1622 = arith.extui %1621 : i32 to i64
    %1623 = arith.addi %1622, %c0_i64_872 : i64
    %c8_i64_873 = arith.constant 8 : i64
    %1624 = arith.addi %1623, %c8_i64_873 : i64
    %c0_i32_874 = arith.constant 0 : i32
    %1625 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_874) : (!llvm.ptr, i32) -> i32
    %1626 = arith.extui %1625 : i32 to i64
    %c65536_i64_875 = arith.constant 65536 : i64
    %1627 = arith.muli %1626, %c65536_i64_875 : i64
    %1628 = arith.cmpi ult, %1624, %1627 : i64
    cf.cond_br %1628, ^bb308, ^bb309
  ^bb307:  // pred: ^bb304
    %c1_i32_876 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_876) : (i32) -> ()
    cf.br ^bb306
  ^bb308:  // 2 preds: ^bb306, ^bb309
    %1629 = llvm.getelementptr %11[%1623] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1630 = llvm.load volatile %1629 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_877 = arith.constant 0 : i64
    %1631 = arith.extui %1619 : i32 to i64
    %1632 = arith.addi %1631, %c0_i64_877 : i64
    %c8_i64_878 = arith.constant 8 : i64
    %1633 = arith.addi %1632, %c8_i64_878 : i64
    %c0_i32_879 = arith.constant 0 : i32
    %1634 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_879) : (!llvm.ptr, i32) -> i32
    %1635 = arith.extui %1634 : i32 to i64
    %c65536_i64_880 = arith.constant 65536 : i64
    %1636 = arith.muli %1635, %c65536_i64_880 : i64
    %1637 = arith.cmpi ult, %1633, %1636 : i64
    cf.cond_br %1637, ^bb310, ^bb311
  ^bb309:  // pred: ^bb306
    %c1_i32_881 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_881) : (i32) -> ()
    cf.br ^bb308
  ^bb310:  // 2 preds: ^bb308, ^bb311
    %1638 = llvm.getelementptr %11[%1632] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1630, %1638 {alignment = 1 : i64} : i64, !llvm.ptr
    %1639 = llvm.load %3 : !llvm.ptr -> i32
    %1640 = llvm.load %3 : !llvm.ptr -> i32
    %c1560_i64 = arith.constant 1560 : i64
    %1641 = arith.extui %1640 : i32 to i64
    %1642 = arith.addi %1641, %c1560_i64 : i64
    %c8_i64_882 = arith.constant 8 : i64
    %1643 = arith.addi %1642, %c8_i64_882 : i64
    %c0_i32_883 = arith.constant 0 : i32
    %1644 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_883) : (!llvm.ptr, i32) -> i32
    %1645 = arith.extui %1644 : i32 to i64
    %c65536_i64_884 = arith.constant 65536 : i64
    %1646 = arith.muli %1645, %c65536_i64_884 : i64
    %1647 = arith.cmpi ult, %1643, %1646 : i64
    cf.cond_br %1647, ^bb312, ^bb313
  ^bb311:  // pred: ^bb308
    %c1_i32_885 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_885) : (i32) -> ()
    cf.br ^bb310
  ^bb312:  // 2 preds: ^bb310, ^bb313
    %1648 = llvm.getelementptr %11[%1642] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1649 = llvm.load volatile %1648 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c1376_i64 = arith.constant 1376 : i64
    %1650 = arith.extui %1639 : i32 to i64
    %1651 = arith.addi %1650, %c1376_i64 : i64
    %c8_i64_886 = arith.constant 8 : i64
    %1652 = arith.addi %1651, %c8_i64_886 : i64
    %c0_i32_887 = arith.constant 0 : i32
    %1653 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_887) : (!llvm.ptr, i32) -> i32
    %1654 = arith.extui %1653 : i32 to i64
    %c65536_i64_888 = arith.constant 65536 : i64
    %1655 = arith.muli %1654, %c65536_i64_888 : i64
    %1656 = arith.cmpi ult, %1652, %1655 : i64
    cf.cond_br %1656, ^bb314, ^bb315
  ^bb313:  // pred: ^bb310
    %c1_i32_889 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_889) : (i32) -> ()
    cf.br ^bb312
  ^bb314:  // 2 preds: ^bb312, ^bb315
    %1657 = llvm.getelementptr %11[%1651] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1649, %1657 {alignment = 1 : i64} : i64, !llvm.ptr
    %1658 = llvm.load %3 : !llvm.ptr -> i32
    %1659 = llvm.load %3 : !llvm.ptr -> i32
    %c1584_i64 = arith.constant 1584 : i64
    %1660 = arith.extui %1659 : i32 to i64
    %1661 = arith.addi %1660, %c1584_i64 : i64
    %c8_i64_890 = arith.constant 8 : i64
    %1662 = arith.addi %1661, %c8_i64_890 : i64
    %c0_i32_891 = arith.constant 0 : i32
    %1663 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_891) : (!llvm.ptr, i32) -> i32
    %1664 = arith.extui %1663 : i32 to i64
    %c65536_i64_892 = arith.constant 65536 : i64
    %1665 = arith.muli %1664, %c65536_i64_892 : i64
    %1666 = arith.cmpi ult, %1662, %1665 : i64
    cf.cond_br %1666, ^bb316, ^bb317
  ^bb315:  // pred: ^bb312
    %c1_i32_893 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_893) : (i32) -> ()
    cf.br ^bb314
  ^bb316:  // 2 preds: ^bb314, ^bb317
    %1667 = llvm.getelementptr %11[%1661] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1668 = llvm.load volatile %1667 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c1400_i64 = arith.constant 1400 : i64
    %1669 = arith.extui %1658 : i32 to i64
    %1670 = arith.addi %1669, %c1400_i64 : i64
    %c8_i64_894 = arith.constant 8 : i64
    %1671 = arith.addi %1670, %c8_i64_894 : i64
    %c0_i32_895 = arith.constant 0 : i32
    %1672 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_895) : (!llvm.ptr, i32) -> i32
    %1673 = arith.extui %1672 : i32 to i64
    %c65536_i64_896 = arith.constant 65536 : i64
    %1674 = arith.muli %1673, %c65536_i64_896 : i64
    %1675 = arith.cmpi ult, %1671, %1674 : i64
    cf.cond_br %1675, ^bb318, ^bb319
  ^bb317:  // pred: ^bb314
    %c1_i32_897 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_897) : (i32) -> ()
    cf.br ^bb316
  ^bb318:  // 2 preds: ^bb316, ^bb319
    %1676 = llvm.getelementptr %11[%1670] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1668, %1676 {alignment = 1 : i64} : i64, !llvm.ptr
    %1677 = llvm.load %3 : !llvm.ptr -> i32
    %c1008_i32 = arith.constant 1008 : i32
    %1678 = arith.addi %1677, %c1008_i32 : i32
    %1679 = llvm.load %3 : !llvm.ptr -> i32
    %1680 = llvm.load %3 : !llvm.ptr -> i32
    %c1376_i32_898 = arith.constant 1376 : i32
    %1681 = arith.addi %1680, %c1376_i32_898 : i32
    %1682 = llvm.load %3 : !llvm.ptr -> i32
    %c1400_i32_899 = arith.constant 1400 : i32
    %1683 = arith.addi %1682, %c1400_i32_899 : i32
    call @f14(%arg0, %1678, %1679, %1681, %1683) : (!llvm.ptr, i32, i32, i32, i32) -> ()
    %1684 = llvm.load %3 : !llvm.ptr -> i32
    %c1008_i64 = arith.constant 1008 : i64
    %1685 = arith.extui %1684 : i32 to i64
    %1686 = arith.addi %1685, %c1008_i64 : i64
    %c8_i64_900 = arith.constant 8 : i64
    %1687 = arith.addi %1686, %c8_i64_900 : i64
    %c0_i32_901 = arith.constant 0 : i32
    %1688 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_901) : (!llvm.ptr, i32) -> i32
    %1689 = arith.extui %1688 : i32 to i64
    %c65536_i64_902 = arith.constant 65536 : i64
    %1690 = arith.muli %1689, %c65536_i64_902 : i64
    %1691 = arith.cmpi ult, %1687, %1690 : i64
    cf.cond_br %1691, ^bb322, ^bb323
  ^bb319:  // pred: ^bb316
    %c1_i32_903 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_903) : (i32) -> ()
    cf.br ^bb318
  ^bb320:  // 2 preds: ^bb321, ^bb335
    %1692 = llvm.load %3 : !llvm.ptr -> i32
    %c532_i32_904 = arith.constant 532 : i32
    %1693 = arith.addi %1692, %c532_i32_904 : i32
    %1694 = llvm.load %3 : !llvm.ptr -> i32
    %c1292_i32 = arith.constant 1292 : i32
    %1695 = arith.addi %1694, %c1292_i32 : i32
    %c0_i64_905 = arith.constant 0 : i64
    %1696 = arith.extui %1695 : i32 to i64
    %1697 = arith.addi %1696, %c0_i64_905 : i64
    %c4_i64_906 = arith.constant 4 : i64
    %1698 = arith.addi %1697, %c4_i64_906 : i64
    %c0_i32_907 = arith.constant 0 : i32
    %1699 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_907) : (!llvm.ptr, i32) -> i32
    %1700 = arith.extui %1699 : i32 to i64
    %c65536_i64_908 = arith.constant 65536 : i64
    %1701 = arith.muli %1700, %c65536_i64_908 : i64
    %1702 = arith.cmpi ult, %1698, %1701 : i64
    cf.cond_br %1702, ^bb337, ^bb338
  ^bb321:  // pred: ^bb322
    %1703 = llvm.load %3 : !llvm.ptr -> i32
    %c1284_i32_909 = arith.constant 1284 : i32
    %1704 = arith.addi %1703, %c1284_i32_909 : i32
    %1705 = llvm.load %3 : !llvm.ptr -> i32
    %c1008_i32_910 = arith.constant 1008 : i32
    %1706 = arith.addi %1705, %c1008_i32_910 : i32
    call @f16(%arg0, %1704, %1706) : (!llvm.ptr, i32, i32) -> ()
    %c1_i32_911 = arith.constant 1 : i32
    llvm.store %c1_i32_911, %2 : i32, !llvm.ptr
    cf.br ^bb320
  ^bb322:  // 2 preds: ^bb318, ^bb323
    %1707 = llvm.getelementptr %11[%1686] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1708 = llvm.load volatile %1707 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c2_i64 = arith.constant 2 : i64
    %1709 = arith.cmpi eq, %1708, %c2_i64 : i64
    %1710 = arith.extui %1709 : i1 to i32
    %c0_i32_912 = arith.constant 0 : i32
    %1711 = arith.cmpi eq, %1710, %c0_i32_912 : i32
    %1712 = arith.extui %1711 : i1 to i32
    %c0_i32_913 = arith.constant 0 : i32
    %1713 = arith.cmpi ne, %1712, %c0_i32_913 : i32
    cf.cond_br %1713, ^bb321, ^bb324
  ^bb323:  // pred: ^bb318
    %c1_i32_914 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_914) : (i32) -> ()
    cf.br ^bb322
  ^bb324:  // pred: ^bb322
    %1714 = llvm.load %3 : !llvm.ptr -> i32
    %c1016_i64 = arith.constant 1016 : i64
    %1715 = arith.extui %1714 : i32 to i64
    %1716 = arith.addi %1715, %c1016_i64 : i64
    %c1_i64_915 = arith.constant 1 : i64
    %1717 = arith.addi %1716, %c1_i64_915 : i64
    %c0_i32_916 = arith.constant 0 : i32
    %1718 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_916) : (!llvm.ptr, i32) -> i32
    %1719 = arith.extui %1718 : i32 to i64
    %c65536_i64_917 = arith.constant 65536 : i64
    %1720 = arith.muli %1719, %c65536_i64_917 : i64
    %1721 = arith.cmpi ult, %1717, %1720 : i64
    cf.cond_br %1721, ^bb325, ^bb326
  ^bb325:  // 2 preds: ^bb324, ^bb326
    %1722 = llvm.getelementptr %11[%1716] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1723 = llvm.load volatile %1722 {alignment = 1 : i64} : !llvm.ptr -> i8
    %1724 = arith.extui %1723 : i8 to i32
    llvm.store %1724, %4 : i32, !llvm.ptr
    %1725 = llvm.load %3 : !llvm.ptr -> i32
    %c1575_i32 = arith.constant 1575 : i32
    %1726 = arith.addi %1725, %c1575_i32 : i32
    %c0_i64_918 = arith.constant 0 : i64
    %c0_i64_919 = arith.constant 0 : i64
    %1727 = arith.extui %1726 : i32 to i64
    %1728 = arith.addi %1727, %c0_i64_919 : i64
    %c8_i64_920 = arith.constant 8 : i64
    %1729 = arith.addi %1728, %c8_i64_920 : i64
    %c0_i32_921 = arith.constant 0 : i32
    %1730 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_921) : (!llvm.ptr, i32) -> i32
    %1731 = arith.extui %1730 : i32 to i64
    %c65536_i64_922 = arith.constant 65536 : i64
    %1732 = arith.muli %1731, %c65536_i64_922 : i64
    %1733 = arith.cmpi ult, %1729, %1732 : i64
    cf.cond_br %1733, ^bb327, ^bb328
  ^bb326:  // pred: ^bb324
    %c1_i32_923 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_923) : (i32) -> ()
    cf.br ^bb325
  ^bb327:  // 2 preds: ^bb325, ^bb328
    %1734 = llvm.getelementptr %11[%1728] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_918, %1734 {alignment = 1 : i64} : i64, !llvm.ptr
    %1735 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_924 = arith.constant 0 : i64
    %c0_i64_925 = arith.constant 0 : i64
    %1736 = arith.extui %1735 : i32 to i64
    %1737 = arith.addi %1736, %c0_i64_925 : i64
    %c8_i64_926 = arith.constant 8 : i64
    %1738 = arith.addi %1737, %c8_i64_926 : i64
    %c0_i32_927 = arith.constant 0 : i32
    %1739 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_927) : (!llvm.ptr, i32) -> i32
    %1740 = arith.extui %1739 : i32 to i64
    %c65536_i64_928 = arith.constant 65536 : i64
    %1741 = arith.muli %1740, %c65536_i64_928 : i64
    %1742 = arith.cmpi ult, %1738, %1741 : i64
    cf.cond_br %1742, ^bb329, ^bb330
  ^bb328:  // pred: ^bb325
    %c1_i32_929 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_929) : (i32) -> ()
    cf.br ^bb327
  ^bb329:  // 2 preds: ^bb327, ^bb330
    %1743 = llvm.getelementptr %11[%1737] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_924, %1743 {alignment = 1 : i64} : i64, !llvm.ptr
    %1744 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_930 = arith.constant 1552 : i32
    %1745 = arith.addi %1744, %c1552_i32_930 : i32
    %c8_i32_931 = arith.constant 8 : i32
    %1746 = arith.addi %1745, %c8_i32_931 : i32
    %c0_i64_932 = arith.constant 0 : i64
    %c0_i64_933 = arith.constant 0 : i64
    %1747 = arith.extui %1746 : i32 to i64
    %1748 = arith.addi %1747, %c0_i64_933 : i64
    %c8_i64_934 = arith.constant 8 : i64
    %1749 = arith.addi %1748, %c8_i64_934 : i64
    %c0_i32_935 = arith.constant 0 : i32
    %1750 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_935) : (!llvm.ptr, i32) -> i32
    %1751 = arith.extui %1750 : i32 to i64
    %c65536_i64_936 = arith.constant 65536 : i64
    %1752 = arith.muli %1751, %c65536_i64_936 : i64
    %1753 = arith.cmpi ult, %1749, %1752 : i64
    cf.cond_br %1753, ^bb331, ^bb332
  ^bb330:  // pred: ^bb327
    %c1_i32_937 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_937) : (i32) -> ()
    cf.br ^bb329
  ^bb331:  // 2 preds: ^bb329, ^bb332
    %1754 = llvm.getelementptr %11[%1748] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_932, %1754 {alignment = 1 : i64} : i64, !llvm.ptr
    %1755 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_938 = arith.constant 0 : i64
    %c1552_i64_939 = arith.constant 1552 : i64
    %1756 = arith.extui %1755 : i32 to i64
    %1757 = arith.addi %1756, %c1552_i64_939 : i64
    %c8_i64_940 = arith.constant 8 : i64
    %1758 = arith.addi %1757, %c8_i64_940 : i64
    %c0_i32_941 = arith.constant 0 : i32
    %1759 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_941) : (!llvm.ptr, i32) -> i32
    %1760 = arith.extui %1759 : i32 to i64
    %c65536_i64_942 = arith.constant 65536 : i64
    %1761 = arith.muli %1760, %c65536_i64_942 : i64
    %1762 = arith.cmpi ult, %1758, %1761 : i64
    cf.cond_br %1762, ^bb333, ^bb334
  ^bb332:  // pred: ^bb329
    %c1_i32_943 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_943) : (i32) -> ()
    cf.br ^bb331
  ^bb333:  // 2 preds: ^bb331, ^bb334
    %1763 = llvm.getelementptr %11[%1757] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_938, %1763 {alignment = 1 : i64} : i64, !llvm.ptr
    %1764 = llvm.load %3 : !llvm.ptr -> i32
    %1765 = llvm.load %4 : !llvm.ptr -> i32
    %c1583_i64 = arith.constant 1583 : i64
    %1766 = arith.extui %1764 : i32 to i64
    %1767 = arith.addi %1766, %c1583_i64 : i64
    %c1_i64_944 = arith.constant 1 : i64
    %1768 = arith.addi %1767, %c1_i64_944 : i64
    %c0_i32_945 = arith.constant 0 : i32
    %1769 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_945) : (!llvm.ptr, i32) -> i32
    %1770 = arith.extui %1769 : i32 to i64
    %c65536_i64_946 = arith.constant 65536 : i64
    %1771 = arith.muli %1770, %c65536_i64_946 : i64
    %1772 = arith.cmpi ult, %1768, %1771 : i64
    cf.cond_br %1772, ^bb335, ^bb336
  ^bb334:  // pred: ^bb331
    %c1_i32_947 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_947) : (i32) -> ()
    cf.br ^bb333
  ^bb335:  // 2 preds: ^bb333, ^bb336
    %1773 = llvm.getelementptr %11[%1767] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1774 = arith.trunci %1765 : i32 to i8
    llvm.store volatile %1774, %1773 {alignment = 1 : i64} : i8, !llvm.ptr
    %1775 = llvm.load %3 : !llvm.ptr -> i32
    %c1284_i32_948 = arith.constant 1284 : i32
    %1776 = arith.addi %1775, %c1284_i32_948 : i32
    %1777 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_949 = arith.constant 1552 : i32
    %1778 = arith.addi %1777, %c1552_i32_949 : i32
    call @f15(%arg0, %1776, %1778) : (!llvm.ptr, i32, i32) -> ()
    %c0_i32_950 = arith.constant 0 : i32
    llvm.store %c0_i32_950, %2 : i32, !llvm.ptr
    cf.br ^bb320
  ^bb336:  // pred: ^bb333
    %c1_i32_951 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_951) : (i32) -> ()
    cf.br ^bb335
  ^bb337:  // 2 preds: ^bb320, ^bb338
    %1779 = llvm.getelementptr %11[%1697] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1780 = llvm.load volatile %1779 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_952 = arith.constant 0 : i64
    %1781 = arith.extui %1693 : i32 to i64
    %1782 = arith.addi %1781, %c0_i64_952 : i64
    %c4_i64_953 = arith.constant 4 : i64
    %1783 = arith.addi %1782, %c4_i64_953 : i64
    %c0_i32_954 = arith.constant 0 : i32
    %1784 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_954) : (!llvm.ptr, i32) -> i32
    %1785 = arith.extui %1784 : i32 to i64
    %c65536_i64_955 = arith.constant 65536 : i64
    %1786 = arith.muli %1785, %c65536_i64_955 : i64
    %1787 = arith.cmpi ult, %1783, %1786 : i64
    cf.cond_br %1787, ^bb339, ^bb340
  ^bb338:  // pred: ^bb320
    %c1_i32_956 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_956) : (i32) -> ()
    cf.br ^bb337
  ^bb339:  // 2 preds: ^bb337, ^bb340
    %1788 = llvm.getelementptr %11[%1782] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1780, %1788 {alignment = 1 : i64} : i32, !llvm.ptr
    %1789 = llvm.load %3 : !llvm.ptr -> i32
    %1790 = llvm.load %2 : !llvm.ptr -> i32
    %c520_i64_957 = arith.constant 520 : i64
    %1791 = arith.extui %1789 : i32 to i64
    %1792 = arith.addi %1791, %c520_i64_957 : i64
    %c4_i64_958 = arith.constant 4 : i64
    %1793 = arith.addi %1792, %c4_i64_958 : i64
    %c0_i32_959 = arith.constant 0 : i32
    %1794 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_959) : (!llvm.ptr, i32) -> i32
    %1795 = arith.extui %1794 : i32 to i64
    %c65536_i64_960 = arith.constant 65536 : i64
    %1796 = arith.muli %1795, %c65536_i64_960 : i64
    %1797 = arith.cmpi ult, %1793, %1796 : i64
    cf.cond_br %1797, ^bb341, ^bb342
  ^bb340:  // pred: ^bb337
    %c1_i32_961 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_961) : (i32) -> ()
    cf.br ^bb339
  ^bb341:  // 2 preds: ^bb339, ^bb342
    %1798 = llvm.getelementptr %11[%1792] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1790, %1798 {alignment = 1 : i64} : i32, !llvm.ptr
    %1799 = llvm.load %3 : !llvm.ptr -> i32
    %1800 = llvm.load %3 : !llvm.ptr -> i32
    %c1284_i64_962 = arith.constant 1284 : i64
    %1801 = arith.extui %1800 : i32 to i64
    %1802 = arith.addi %1801, %c1284_i64_962 : i64
    %c8_i64_963 = arith.constant 8 : i64
    %1803 = arith.addi %1802, %c8_i64_963 : i64
    %c0_i32_964 = arith.constant 0 : i32
    %1804 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_964) : (!llvm.ptr, i32) -> i32
    %1805 = arith.extui %1804 : i32 to i64
    %c65536_i64_965 = arith.constant 65536 : i64
    %1806 = arith.muli %1805, %c65536_i64_965 : i64
    %1807 = arith.cmpi ult, %1803, %1806 : i64
    cf.cond_br %1807, ^bb343, ^bb344
  ^bb342:  // pred: ^bb339
    %c1_i32_966 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_966) : (i32) -> ()
    cf.br ^bb341
  ^bb343:  // 2 preds: ^bb341, ^bb344
    %1808 = llvm.getelementptr %11[%1802] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1809 = llvm.load volatile %1808 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c524_i64_967 = arith.constant 524 : i64
    %1810 = arith.extui %1799 : i32 to i64
    %1811 = arith.addi %1810, %c524_i64_967 : i64
    %c8_i64_968 = arith.constant 8 : i64
    %1812 = arith.addi %1811, %c8_i64_968 : i64
    %c0_i32_969 = arith.constant 0 : i32
    %1813 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_969) : (!llvm.ptr, i32) -> i32
    %1814 = arith.extui %1813 : i32 to i64
    %c65536_i64_970 = arith.constant 65536 : i64
    %1815 = arith.muli %1814, %c65536_i64_970 : i64
    %1816 = arith.cmpi ult, %1812, %1815 : i64
    cf.cond_br %1816, ^bb345, ^bb346
  ^bb344:  // pred: ^bb341
    %c1_i32_971 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_971) : (i32) -> ()
    cf.br ^bb343
  ^bb345:  // 2 preds: ^bb343, ^bb346
    %1817 = llvm.getelementptr %11[%1811] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1809, %1817 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb30
  ^bb346:  // pred: ^bb343
    %c1_i32_972 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_972) : (i32) -> ()
    cf.br ^bb345
  ^bb347:  // 2 preds: ^bb288, ^bb348
    %1818 = llvm.getelementptr %11[%1518] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1819 = llvm.load volatile %1818 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_973 = arith.constant 0 : i64
    %1820 = arith.extui %1514 : i32 to i64
    %1821 = arith.addi %1820, %c0_i64_973 : i64
    %c8_i64_974 = arith.constant 8 : i64
    %1822 = arith.addi %1821, %c8_i64_974 : i64
    %c0_i32_975 = arith.constant 0 : i32
    %1823 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_975) : (!llvm.ptr, i32) -> i32
    %1824 = arith.extui %1823 : i32 to i64
    %c65536_i64_976 = arith.constant 65536 : i64
    %1825 = arith.muli %1824, %c65536_i64_976 : i64
    %1826 = arith.cmpi ult, %1822, %1825 : i64
    cf.cond_br %1826, ^bb349, ^bb350
  ^bb348:  // pred: ^bb288
    %c1_i32_977 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_977) : (i32) -> ()
    cf.br ^bb347
  ^bb349:  // 2 preds: ^bb347, ^bb350
    %1827 = llvm.getelementptr %11[%1821] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1819, %1827 {alignment = 1 : i64} : i64, !llvm.ptr
    %1828 = llvm.load %3 : !llvm.ptr -> i32
    %c992_i32 = arith.constant 992 : i32
    %1829 = arith.addi %1828, %c992_i32 : i32
    %1830 = llvm.load %3 : !llvm.ptr -> i32
    %c1564_i32 = arith.constant 1564 : i32
    %1831 = arith.addi %1830, %c1564_i32 : i32
    %c0_i64_978 = arith.constant 0 : i64
    %1832 = arith.extui %1831 : i32 to i64
    %1833 = arith.addi %1832, %c0_i64_978 : i64
    %c8_i64_979 = arith.constant 8 : i64
    %1834 = arith.addi %1833, %c8_i64_979 : i64
    %c0_i32_980 = arith.constant 0 : i32
    %1835 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_980) : (!llvm.ptr, i32) -> i32
    %1836 = arith.extui %1835 : i32 to i64
    %c65536_i64_981 = arith.constant 65536 : i64
    %1837 = arith.muli %1836, %c65536_i64_981 : i64
    %1838 = arith.cmpi ult, %1834, %1837 : i64
    cf.cond_br %1838, ^bb351, ^bb352
  ^bb350:  // pred: ^bb347
    %c1_i32_982 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_982) : (i32) -> ()
    cf.br ^bb349
  ^bb351:  // 2 preds: ^bb349, ^bb352
    %1839 = llvm.getelementptr %11[%1833] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1840 = llvm.load volatile %1839 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_983 = arith.constant 0 : i64
    %1841 = arith.extui %1829 : i32 to i64
    %1842 = arith.addi %1841, %c0_i64_983 : i64
    %c8_i64_984 = arith.constant 8 : i64
    %1843 = arith.addi %1842, %c8_i64_984 : i64
    %c0_i32_985 = arith.constant 0 : i32
    %1844 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_985) : (!llvm.ptr, i32) -> i32
    %1845 = arith.extui %1844 : i32 to i64
    %c65536_i64_986 = arith.constant 65536 : i64
    %1846 = arith.muli %1845, %c65536_i64_986 : i64
    %1847 = arith.cmpi ult, %1843, %1846 : i64
    cf.cond_br %1847, ^bb353, ^bb354
  ^bb352:  // pred: ^bb349
    %c1_i32_987 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_987) : (i32) -> ()
    cf.br ^bb351
  ^bb353:  // 2 preds: ^bb351, ^bb354
    %1848 = llvm.getelementptr %11[%1842] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1840, %1848 {alignment = 1 : i64} : i64, !llvm.ptr
    %1849 = llvm.load %3 : !llvm.ptr -> i32
    %1850 = llvm.load %3 : !llvm.ptr -> i32
    %c1556_i64_988 = arith.constant 1556 : i64
    %1851 = arith.extui %1850 : i32 to i64
    %1852 = arith.addi %1851, %c1556_i64_988 : i64
    %c8_i64_989 = arith.constant 8 : i64
    %1853 = arith.addi %1852, %c8_i64_989 : i64
    %c0_i32_990 = arith.constant 0 : i32
    %1854 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_990) : (!llvm.ptr, i32) -> i32
    %1855 = arith.extui %1854 : i32 to i64
    %c65536_i64_991 = arith.constant 65536 : i64
    %1856 = arith.muli %1855, %c65536_i64_991 : i64
    %1857 = arith.cmpi ult, %1853, %1856 : i64
    cf.cond_br %1857, ^bb355, ^bb356
  ^bb354:  // pred: ^bb351
    %c1_i32_992 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_992) : (i32) -> ()
    cf.br ^bb353
  ^bb355:  // 2 preds: ^bb353, ^bb356
    %1858 = llvm.getelementptr %11[%1852] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1859 = llvm.load volatile %1858 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c984_i64 = arith.constant 984 : i64
    %1860 = arith.extui %1849 : i32 to i64
    %1861 = arith.addi %1860, %c984_i64 : i64
    %c8_i64_993 = arith.constant 8 : i64
    %1862 = arith.addi %1861, %c8_i64_993 : i64
    %c0_i32_994 = arith.constant 0 : i32
    %1863 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_994) : (!llvm.ptr, i32) -> i32
    %1864 = arith.extui %1863 : i32 to i64
    %c65536_i64_995 = arith.constant 65536 : i64
    %1865 = arith.muli %1864, %c65536_i64_995 : i64
    %1866 = arith.cmpi ult, %1862, %1865 : i64
    cf.cond_br %1866, ^bb357, ^bb358
  ^bb356:  // pred: ^bb353
    %c1_i32_996 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_996) : (i32) -> ()
    cf.br ^bb355
  ^bb357:  // 2 preds: ^bb355, ^bb358
    %1867 = llvm.getelementptr %11[%1861] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1859, %1867 {alignment = 1 : i64} : i64, !llvm.ptr
    %1868 = llvm.load %3 : !llvm.ptr -> i32
    %c984_i32 = arith.constant 984 : i32
    %1869 = arith.addi %1868, %c984_i32 : i32
    call @f63(%arg0, %1869) : (!llvm.ptr, i32) -> ()
    %1870 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_997 = arith.constant 1 : i64
    %c528_i64_998 = arith.constant 528 : i64
    %1871 = arith.extui %1870 : i32 to i64
    %1872 = arith.addi %1871, %c528_i64_998 : i64
    %c8_i64_999 = arith.constant 8 : i64
    %1873 = arith.addi %1872, %c8_i64_999 : i64
    %c0_i32_1000 = arith.constant 0 : i32
    %1874 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1000) : (!llvm.ptr, i32) -> i32
    %1875 = arith.extui %1874 : i32 to i64
    %c65536_i64_1001 = arith.constant 65536 : i64
    %1876 = arith.muli %1875, %c65536_i64_1001 : i64
    %1877 = arith.cmpi ult, %1873, %1876 : i64
    cf.cond_br %1877, ^bb359, ^bb360
  ^bb358:  // pred: ^bb355
    %c1_i32_1002 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1002) : (i32) -> ()
    cf.br ^bb357
  ^bb359:  // 2 preds: ^bb357, ^bb360
    %1878 = llvm.getelementptr %11[%1872] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_997, %1878 {alignment = 1 : i64} : i64, !llvm.ptr
    %1879 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_1003 = arith.constant 1 : i64
    %c520_i64_1004 = arith.constant 520 : i64
    %1880 = arith.extui %1879 : i32 to i64
    %1881 = arith.addi %1880, %c520_i64_1004 : i64
    %c8_i64_1005 = arith.constant 8 : i64
    %1882 = arith.addi %1881, %c8_i64_1005 : i64
    %c0_i32_1006 = arith.constant 0 : i32
    %1883 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1006) : (!llvm.ptr, i32) -> i32
    %1884 = arith.extui %1883 : i32 to i64
    %c65536_i64_1007 = arith.constant 65536 : i64
    %1885 = arith.muli %1884, %c65536_i64_1007 : i64
    %1886 = arith.cmpi ult, %1882, %1885 : i64
    cf.cond_br %1886, ^bb361, ^bb362
  ^bb360:  // pred: ^bb357
    %c1_i32_1008 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1008) : (i32) -> ()
    cf.br ^bb359
  ^bb361:  // 2 preds: ^bb359, ^bb362
    %1887 = llvm.getelementptr %11[%1881] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_1003, %1887 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb30
  ^bb362:  // pred: ^bb359
    %c1_i32_1009 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1009) : (i32) -> ()
    cf.br ^bb361
  ^bb363:  // pred: ^bb42
    %1888 = llvm.load %3 : !llvm.ptr -> i32
    %c-2147483648_i32_1010 = arith.constant -2147483648 : i32
    %c1284_i64_1011 = arith.constant 1284 : i64
    %1889 = arith.extui %1888 : i32 to i64
    %1890 = arith.addi %1889, %c1284_i64_1011 : i64
    %c4_i64_1012 = arith.constant 4 : i64
    %1891 = arith.addi %1890, %c4_i64_1012 : i64
    %c0_i32_1013 = arith.constant 0 : i32
    %1892 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1013) : (!llvm.ptr, i32) -> i32
    %1893 = arith.extui %1892 : i32 to i64
    %c65536_i64_1014 = arith.constant 65536 : i64
    %1894 = arith.muli %1893, %c65536_i64_1014 : i64
    %1895 = arith.cmpi ult, %1891, %1894 : i64
    cf.cond_br %1895, ^bb371, ^bb372
  ^bb364:  // pred: ^bb42
    %1896 = llvm.load %3 : !llvm.ptr -> i32
    %c532_i32_1015 = arith.constant 532 : i32
    %1897 = arith.addi %1896, %c532_i32_1015 : i32
    %c0_i32_1016 = arith.constant 0 : i32
    %c0_i64_1017 = arith.constant 0 : i64
    %1898 = arith.extui %1897 : i32 to i64
    %1899 = arith.addi %1898, %c0_i64_1017 : i64
    %c4_i64_1018 = arith.constant 4 : i64
    %1900 = arith.addi %1899, %c4_i64_1018 : i64
    %c0_i32_1019 = arith.constant 0 : i32
    %1901 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1019) : (!llvm.ptr, i32) -> i32
    %1902 = arith.extui %1901 : i32 to i64
    %c65536_i64_1020 = arith.constant 65536 : i64
    %1903 = arith.muli %1902, %c65536_i64_1020 : i64
    %1904 = arith.cmpi ult, %1900, %1903 : i64
    cf.cond_br %1904, ^bb365, ^bb366
  ^bb365:  // 2 preds: ^bb364, ^bb366
    %1905 = llvm.getelementptr %11[%1899] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_1016, %1905 {alignment = 1 : i64} : i32, !llvm.ptr
    %1906 = llvm.load %3 : !llvm.ptr -> i32
    %c4294967296_i64_1021 = arith.constant 4294967296 : i64
    %c524_i64_1022 = arith.constant 524 : i64
    %1907 = arith.extui %1906 : i32 to i64
    %1908 = arith.addi %1907, %c524_i64_1022 : i64
    %c8_i64_1023 = arith.constant 8 : i64
    %1909 = arith.addi %1908, %c8_i64_1023 : i64
    %c0_i32_1024 = arith.constant 0 : i32
    %1910 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1024) : (!llvm.ptr, i32) -> i32
    %1911 = arith.extui %1910 : i32 to i64
    %c65536_i64_1025 = arith.constant 65536 : i64
    %1912 = arith.muli %1911, %c65536_i64_1025 : i64
    %1913 = arith.cmpi ult, %1909, %1912 : i64
    cf.cond_br %1913, ^bb367, ^bb368
  ^bb366:  // pred: ^bb364
    %c1_i32_1026 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1026) : (i32) -> ()
    cf.br ^bb365
  ^bb367:  // 2 preds: ^bb365, ^bb368
    %1914 = llvm.getelementptr %11[%1908] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4294967296_i64_1021, %1914 {alignment = 1 : i64} : i64, !llvm.ptr
    %1915 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_1027 = arith.constant 1 : i32
    %c520_i64_1028 = arith.constant 520 : i64
    %1916 = arith.extui %1915 : i32 to i64
    %1917 = arith.addi %1916, %c520_i64_1028 : i64
    %c4_i64_1029 = arith.constant 4 : i64
    %1918 = arith.addi %1917, %c4_i64_1029 : i64
    %c0_i32_1030 = arith.constant 0 : i32
    %1919 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1030) : (!llvm.ptr, i32) -> i32
    %1920 = arith.extui %1919 : i32 to i64
    %c65536_i64_1031 = arith.constant 65536 : i64
    %1921 = arith.muli %1920, %c65536_i64_1031 : i64
    %1922 = arith.cmpi ult, %1918, %1921 : i64
    cf.cond_br %1922, ^bb369, ^bb370
  ^bb368:  // pred: ^bb365
    %c1_i32_1032 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1032) : (i32) -> ()
    cf.br ^bb367
  ^bb369:  // 2 preds: ^bb367, ^bb370
    %1923 = llvm.getelementptr %11[%1917] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_1027, %1923 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb30
  ^bb370:  // pred: ^bb367
    %c1_i32_1033 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1033) : (i32) -> ()
    cf.br ^bb369
  ^bb371:  // 2 preds: ^bb363, ^bb372
    %1924 = llvm.getelementptr %11[%1890] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-2147483648_i32_1010, %1924 {alignment = 1 : i64} : i32, !llvm.ptr
    %1925 = llvm.load %3 : !llvm.ptr -> i32
    %c1284_i32_1034 = arith.constant 1284 : i32
    %1926 = arith.addi %1925, %c1284_i32_1034 : i32
    call @f4(%arg0, %1926) : (!llvm.ptr, i32) -> ()
    %1927 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_1035 = arith.constant 1552 : i32
    %1928 = arith.addi %1927, %c1552_i32_1035 : i32
    %1929 = llvm.load %5 : !llvm.ptr -> i32
    %1930 = llvm.load %4 : !llvm.ptr -> i32
    call @f17(%arg0, %1928, %1929, %1930) : (!llvm.ptr, i32, i32, i32) -> ()
    %1931 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i64_1036 = arith.constant 1552 : i64
    %1932 = arith.extui %1931 : i32 to i64
    %1933 = arith.addi %1932, %c1552_i64_1036 : i64
    %c4_i64_1037 = arith.constant 4 : i64
    %1934 = arith.addi %1933, %c4_i64_1037 : i64
    %c0_i32_1038 = arith.constant 0 : i32
    %1935 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1038) : (!llvm.ptr, i32) -> i32
    %1936 = arith.extui %1935 : i32 to i64
    %c65536_i64_1039 = arith.constant 65536 : i64
    %1937 = arith.muli %1936, %c65536_i64_1039 : i64
    %1938 = arith.cmpi ult, %1934, %1937 : i64
    cf.cond_br %1938, ^bb374, ^bb375
  ^bb372:  // pred: ^bb363
    %c1_i32_1040 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1040) : (i32) -> ()
    cf.br ^bb371
  ^bb373:  // pred: ^bb374
    %1939 = llvm.load %3 : !llvm.ptr -> i32
    %c1136_i32 = arith.constant 1136 : i32
    %1940 = arith.addi %1939, %c1136_i32 : i32
    %1941 = llvm.load %3 : !llvm.ptr -> i32
    %c1572_i32_1041 = arith.constant 1572 : i32
    %1942 = arith.addi %1941, %c1572_i32_1041 : i32
    %c0_i64_1042 = arith.constant 0 : i64
    %1943 = arith.extui %1942 : i32 to i64
    %1944 = arith.addi %1943, %c0_i64_1042 : i64
    %c8_i64_1043 = arith.constant 8 : i64
    %1945 = arith.addi %1944, %c8_i64_1043 : i64
    %c0_i32_1044 = arith.constant 0 : i32
    %1946 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1044) : (!llvm.ptr, i32) -> i32
    %1947 = arith.extui %1946 : i32 to i64
    %c65536_i64_1045 = arith.constant 65536 : i64
    %1948 = arith.muli %1947, %c65536_i64_1045 : i64
    %1949 = arith.cmpi ult, %1945, %1948 : i64
    cf.cond_br %1949, ^bb444, ^bb445
  ^bb374:  // 2 preds: ^bb371, ^bb375
    %1950 = llvm.getelementptr %11[%1933] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1951 = llvm.load volatile %1950 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_1046 = arith.constant 0 : i32
    %1952 = arith.cmpi ne, %1951, %c0_i32_1046 : i32
    cf.cond_br %1952, ^bb373, ^bb376
  ^bb375:  // pred: ^bb371
    %c1_i32_1047 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1047) : (i32) -> ()
    cf.br ^bb374
  ^bb376:  // pred: ^bb374
    %1953 = llvm.load %3 : !llvm.ptr -> i32
    %c1432_i32 = arith.constant 1432 : i32
    %1954 = arith.addi %1953, %c1432_i32 : i32
    %c16_i32_1048 = arith.constant 16 : i32
    %1955 = arith.addi %1954, %c16_i32_1048 : i32
    %1956 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_1049 = arith.constant 1552 : i32
    %1957 = arith.addi %1956, %c1552_i32_1049 : i32
    %c24_i32_1050 = arith.constant 24 : i32
    %1958 = arith.addi %1957, %c24_i32_1050 : i32
    %c0_i64_1051 = arith.constant 0 : i64
    %1959 = arith.extui %1958 : i32 to i64
    %1960 = arith.addi %1959, %c0_i64_1051 : i64
    %c4_i64_1052 = arith.constant 4 : i64
    %1961 = arith.addi %1960, %c4_i64_1052 : i64
    %c0_i32_1053 = arith.constant 0 : i32
    %1962 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1053) : (!llvm.ptr, i32) -> i32
    %1963 = arith.extui %1962 : i32 to i64
    %c65536_i64_1054 = arith.constant 65536 : i64
    %1964 = arith.muli %1963, %c65536_i64_1054 : i64
    %1965 = arith.cmpi ult, %1961, %1964 : i64
    cf.cond_br %1965, ^bb377, ^bb378
  ^bb377:  // 2 preds: ^bb376, ^bb378
    %1966 = llvm.getelementptr %11[%1960] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1967 = llvm.load volatile %1966 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_1055 = arith.constant 0 : i64
    %1968 = arith.extui %1955 : i32 to i64
    %1969 = arith.addi %1968, %c0_i64_1055 : i64
    %c4_i64_1056 = arith.constant 4 : i64
    %1970 = arith.addi %1969, %c4_i64_1056 : i64
    %c0_i32_1057 = arith.constant 0 : i32
    %1971 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1057) : (!llvm.ptr, i32) -> i32
    %1972 = arith.extui %1971 : i32 to i64
    %c65536_i64_1058 = arith.constant 65536 : i64
    %1973 = arith.muli %1972, %c65536_i64_1058 : i64
    %1974 = arith.cmpi ult, %1970, %1973 : i64
    cf.cond_br %1974, ^bb379, ^bb380
  ^bb378:  // pred: ^bb376
    %c1_i32_1059 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1059) : (i32) -> ()
    cf.br ^bb377
  ^bb379:  // 2 preds: ^bb377, ^bb380
    %1975 = llvm.getelementptr %11[%1969] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1967, %1975 {alignment = 1 : i64} : i32, !llvm.ptr
    %1976 = llvm.load %3 : !llvm.ptr -> i32
    %c1432_i32_1060 = arith.constant 1432 : i32
    %1977 = arith.addi %1976, %c1432_i32_1060 : i32
    %c8_i32_1061 = arith.constant 8 : i32
    %1978 = arith.addi %1977, %c8_i32_1061 : i32
    %1979 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_1062 = arith.constant 1552 : i32
    %1980 = arith.addi %1979, %c1552_i32_1062 : i32
    %c16_i32_1063 = arith.constant 16 : i32
    %1981 = arith.addi %1980, %c16_i32_1063 : i32
    llvm.store %1981, %2 : i32, !llvm.ptr
    %c0_i64_1064 = arith.constant 0 : i64
    %1982 = arith.extui %1981 : i32 to i64
    %1983 = arith.addi %1982, %c0_i64_1064 : i64
    %c8_i64_1065 = arith.constant 8 : i64
    %1984 = arith.addi %1983, %c8_i64_1065 : i64
    %c0_i32_1066 = arith.constant 0 : i32
    %1985 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1066) : (!llvm.ptr, i32) -> i32
    %1986 = arith.extui %1985 : i32 to i64
    %c65536_i64_1067 = arith.constant 65536 : i64
    %1987 = arith.muli %1986, %c65536_i64_1067 : i64
    %1988 = arith.cmpi ult, %1984, %1987 : i64
    cf.cond_br %1988, ^bb381, ^bb382
  ^bb380:  // pred: ^bb377
    %c1_i32_1068 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1068) : (i32) -> ()
    cf.br ^bb379
  ^bb381:  // 2 preds: ^bb379, ^bb382
    %1989 = llvm.getelementptr %11[%1983] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1990 = llvm.load volatile %1989 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1069 = arith.constant 0 : i64
    %1991 = arith.extui %1978 : i32 to i64
    %1992 = arith.addi %1991, %c0_i64_1069 : i64
    %c8_i64_1070 = arith.constant 8 : i64
    %1993 = arith.addi %1992, %c8_i64_1070 : i64
    %c0_i32_1071 = arith.constant 0 : i32
    %1994 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1071) : (!llvm.ptr, i32) -> i32
    %1995 = arith.extui %1994 : i32 to i64
    %c65536_i64_1072 = arith.constant 65536 : i64
    %1996 = arith.muli %1995, %c65536_i64_1072 : i64
    %1997 = arith.cmpi ult, %1993, %1996 : i64
    cf.cond_br %1997, ^bb383, ^bb384
  ^bb382:  // pred: ^bb379
    %c1_i32_1073 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1073) : (i32) -> ()
    cf.br ^bb381
  ^bb383:  // 2 preds: ^bb381, ^bb384
    %1998 = llvm.getelementptr %11[%1992] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1990, %1998 {alignment = 1 : i64} : i64, !llvm.ptr
    %1999 = llvm.load %3 : !llvm.ptr -> i32
    %c1456_i32 = arith.constant 1456 : i32
    %2000 = arith.addi %1999, %c1456_i32 : i32
    %c8_i32_1074 = arith.constant 8 : i32
    %2001 = arith.addi %2000, %c8_i32_1074 : i32
    %2002 = llvm.load %3 : !llvm.ptr -> i32
    %c1588_i32 = arith.constant 1588 : i32
    %2003 = arith.addi %2002, %c1588_i32 : i32
    %c0_i64_1075 = arith.constant 0 : i64
    %2004 = arith.extui %2003 : i32 to i64
    %2005 = arith.addi %2004, %c0_i64_1075 : i64
    %c8_i64_1076 = arith.constant 8 : i64
    %2006 = arith.addi %2005, %c8_i64_1076 : i64
    %c0_i32_1077 = arith.constant 0 : i32
    %2007 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1077) : (!llvm.ptr, i32) -> i32
    %2008 = arith.extui %2007 : i32 to i64
    %c65536_i64_1078 = arith.constant 65536 : i64
    %2009 = arith.muli %2008, %c65536_i64_1078 : i64
    %2010 = arith.cmpi ult, %2006, %2009 : i64
    cf.cond_br %2010, ^bb385, ^bb386
  ^bb384:  // pred: ^bb381
    %c1_i32_1079 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1079) : (i32) -> ()
    cf.br ^bb383
  ^bb385:  // 2 preds: ^bb383, ^bb386
    %2011 = llvm.getelementptr %11[%2005] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2012 = llvm.load volatile %2011 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1080 = arith.constant 0 : i64
    %2013 = arith.extui %2001 : i32 to i64
    %2014 = arith.addi %2013, %c0_i64_1080 : i64
    %c8_i64_1081 = arith.constant 8 : i64
    %2015 = arith.addi %2014, %c8_i64_1081 : i64
    %c0_i32_1082 = arith.constant 0 : i32
    %2016 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1082) : (!llvm.ptr, i32) -> i32
    %2017 = arith.extui %2016 : i32 to i64
    %c65536_i64_1083 = arith.constant 65536 : i64
    %2018 = arith.muli %2017, %c65536_i64_1083 : i64
    %2019 = arith.cmpi ult, %2015, %2018 : i64
    cf.cond_br %2019, ^bb387, ^bb388
  ^bb386:  // pred: ^bb383
    %c1_i32_1084 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1084) : (i32) -> ()
    cf.br ^bb385
  ^bb387:  // 2 preds: ^bb385, ^bb388
    %2020 = llvm.getelementptr %11[%2014] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2012, %2020 {alignment = 1 : i64} : i64, !llvm.ptr
    %2021 = llvm.load %3 : !llvm.ptr -> i32
    %c1456_i32_1085 = arith.constant 1456 : i32
    %2022 = arith.addi %2021, %c1456_i32_1085 : i32
    %c16_i32_1086 = arith.constant 16 : i32
    %2023 = arith.addi %2022, %c16_i32_1086 : i32
    %2024 = llvm.load %3 : !llvm.ptr -> i32
    %c1596_i32 = arith.constant 1596 : i32
    %2025 = arith.addi %2024, %c1596_i32 : i32
    %c0_i64_1087 = arith.constant 0 : i64
    %2026 = arith.extui %2025 : i32 to i64
    %2027 = arith.addi %2026, %c0_i64_1087 : i64
    %c4_i64_1088 = arith.constant 4 : i64
    %2028 = arith.addi %2027, %c4_i64_1088 : i64
    %c0_i32_1089 = arith.constant 0 : i32
    %2029 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1089) : (!llvm.ptr, i32) -> i32
    %2030 = arith.extui %2029 : i32 to i64
    %c65536_i64_1090 = arith.constant 65536 : i64
    %2031 = arith.muli %2030, %c65536_i64_1090 : i64
    %2032 = arith.cmpi ult, %2028, %2031 : i64
    cf.cond_br %2032, ^bb389, ^bb390
  ^bb388:  // pred: ^bb385
    %c1_i32_1091 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1091) : (i32) -> ()
    cf.br ^bb387
  ^bb389:  // 2 preds: ^bb387, ^bb390
    %2033 = llvm.getelementptr %11[%2027] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2034 = llvm.load volatile %2033 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_1092 = arith.constant 0 : i64
    %2035 = arith.extui %2023 : i32 to i64
    %2036 = arith.addi %2035, %c0_i64_1092 : i64
    %c4_i64_1093 = arith.constant 4 : i64
    %2037 = arith.addi %2036, %c4_i64_1093 : i64
    %c0_i32_1094 = arith.constant 0 : i32
    %2038 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1094) : (!llvm.ptr, i32) -> i32
    %2039 = arith.extui %2038 : i32 to i64
    %c65536_i64_1095 = arith.constant 65536 : i64
    %2040 = arith.muli %2039, %c65536_i64_1095 : i64
    %2041 = arith.cmpi ult, %2037, %2040 : i64
    cf.cond_br %2041, ^bb391, ^bb392
  ^bb390:  // pred: ^bb387
    %c1_i32_1096 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1096) : (i32) -> ()
    cf.br ^bb389
  ^bb391:  // 2 preds: ^bb389, ^bb392
    %2042 = llvm.getelementptr %11[%2036] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2034, %2042 {alignment = 1 : i64} : i32, !llvm.ptr
    %2043 = llvm.load %3 : !llvm.ptr -> i32
    %c296_i32 = arith.constant 296 : i32
    %2044 = arith.addi %2043, %c296_i32 : i32
    %c8_i32_1097 = arith.constant 8 : i32
    %2045 = arith.addi %2044, %c8_i32_1097 : i32
    %2046 = llvm.load %3 : !llvm.ptr -> i32
    %c1608_i32_1098 = arith.constant 1608 : i32
    %2047 = arith.addi %2046, %c1608_i32_1098 : i32
    %c0_i64_1099 = arith.constant 0 : i64
    %2048 = arith.extui %2047 : i32 to i64
    %2049 = arith.addi %2048, %c0_i64_1099 : i64
    %c8_i64_1100 = arith.constant 8 : i64
    %2050 = arith.addi %2049, %c8_i64_1100 : i64
    %c0_i32_1101 = arith.constant 0 : i32
    %2051 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1101) : (!llvm.ptr, i32) -> i32
    %2052 = arith.extui %2051 : i32 to i64
    %c65536_i64_1102 = arith.constant 65536 : i64
    %2053 = arith.muli %2052, %c65536_i64_1102 : i64
    %2054 = arith.cmpi ult, %2050, %2053 : i64
    cf.cond_br %2054, ^bb393, ^bb394
  ^bb392:  // pred: ^bb389
    %c1_i32_1103 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1103) : (i32) -> ()
    cf.br ^bb391
  ^bb393:  // 2 preds: ^bb391, ^bb394
    %2055 = llvm.getelementptr %11[%2049] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2056 = llvm.load volatile %2055 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1104 = arith.constant 0 : i64
    %2057 = arith.extui %2045 : i32 to i64
    %2058 = arith.addi %2057, %c0_i64_1104 : i64
    %c8_i64_1105 = arith.constant 8 : i64
    %2059 = arith.addi %2058, %c8_i64_1105 : i64
    %c0_i32_1106 = arith.constant 0 : i32
    %2060 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1106) : (!llvm.ptr, i32) -> i32
    %2061 = arith.extui %2060 : i32 to i64
    %c65536_i64_1107 = arith.constant 65536 : i64
    %2062 = arith.muli %2061, %c65536_i64_1107 : i64
    %2063 = arith.cmpi ult, %2059, %2062 : i64
    cf.cond_br %2063, ^bb395, ^bb396
  ^bb394:  // pred: ^bb391
    %c1_i32_1108 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1108) : (i32) -> ()
    cf.br ^bb393
  ^bb395:  // 2 preds: ^bb393, ^bb396
    %2064 = llvm.getelementptr %11[%2058] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2056, %2064 {alignment = 1 : i64} : i64, !llvm.ptr
    %2065 = llvm.load %3 : !llvm.ptr -> i32
    %c296_i32_1109 = arith.constant 296 : i32
    %2066 = arith.addi %2065, %c296_i32_1109 : i32
    %c16_i32_1110 = arith.constant 16 : i32
    %2067 = arith.addi %2066, %c16_i32_1110 : i32
    %2068 = llvm.load %3 : !llvm.ptr -> i32
    %c1616_i32 = arith.constant 1616 : i32
    %2069 = arith.addi %2068, %c1616_i32 : i32
    %c0_i64_1111 = arith.constant 0 : i64
    %2070 = arith.extui %2069 : i32 to i64
    %2071 = arith.addi %2070, %c0_i64_1111 : i64
    %c8_i64_1112 = arith.constant 8 : i64
    %2072 = arith.addi %2071, %c8_i64_1112 : i64
    %c0_i32_1113 = arith.constant 0 : i32
    %2073 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1113) : (!llvm.ptr, i32) -> i32
    %2074 = arith.extui %2073 : i32 to i64
    %c65536_i64_1114 = arith.constant 65536 : i64
    %2075 = arith.muli %2074, %c65536_i64_1114 : i64
    %2076 = arith.cmpi ult, %2072, %2075 : i64
    cf.cond_br %2076, ^bb397, ^bb398
  ^bb396:  // pred: ^bb393
    %c1_i32_1115 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1115) : (i32) -> ()
    cf.br ^bb395
  ^bb397:  // 2 preds: ^bb395, ^bb398
    %2077 = llvm.getelementptr %11[%2071] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2078 = llvm.load volatile %2077 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1116 = arith.constant 0 : i64
    %2079 = arith.extui %2067 : i32 to i64
    %2080 = arith.addi %2079, %c0_i64_1116 : i64
    %c8_i64_1117 = arith.constant 8 : i64
    %2081 = arith.addi %2080, %c8_i64_1117 : i64
    %c0_i32_1118 = arith.constant 0 : i32
    %2082 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1118) : (!llvm.ptr, i32) -> i32
    %2083 = arith.extui %2082 : i32 to i64
    %c65536_i64_1119 = arith.constant 65536 : i64
    %2084 = arith.muli %2083, %c65536_i64_1119 : i64
    %2085 = arith.cmpi ult, %2081, %2084 : i64
    cf.cond_br %2085, ^bb399, ^bb400
  ^bb398:  // pred: ^bb395
    %c1_i32_1120 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1120) : (i32) -> ()
    cf.br ^bb397
  ^bb399:  // 2 preds: ^bb397, ^bb400
    %2086 = llvm.getelementptr %11[%2080] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2078, %2086 {alignment = 1 : i64} : i64, !llvm.ptr
    %2087 = llvm.load %3 : !llvm.ptr -> i32
    %c296_i32_1121 = arith.constant 296 : i32
    %2088 = arith.addi %2087, %c296_i32_1121 : i32
    %c24_i32_1122 = arith.constant 24 : i32
    %2089 = arith.addi %2088, %c24_i32_1122 : i32
    %2090 = llvm.load %3 : !llvm.ptr -> i32
    %c1624_i32 = arith.constant 1624 : i32
    %2091 = arith.addi %2090, %c1624_i32 : i32
    %c0_i64_1123 = arith.constant 0 : i64
    %2092 = arith.extui %2091 : i32 to i64
    %2093 = arith.addi %2092, %c0_i64_1123 : i64
    %c8_i64_1124 = arith.constant 8 : i64
    %2094 = arith.addi %2093, %c8_i64_1124 : i64
    %c0_i32_1125 = arith.constant 0 : i32
    %2095 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1125) : (!llvm.ptr, i32) -> i32
    %2096 = arith.extui %2095 : i32 to i64
    %c65536_i64_1126 = arith.constant 65536 : i64
    %2097 = arith.muli %2096, %c65536_i64_1126 : i64
    %2098 = arith.cmpi ult, %2094, %2097 : i64
    cf.cond_br %2098, ^bb401, ^bb402
  ^bb400:  // pred: ^bb397
    %c1_i32_1127 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1127) : (i32) -> ()
    cf.br ^bb399
  ^bb401:  // 2 preds: ^bb399, ^bb402
    %2099 = llvm.getelementptr %11[%2093] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2100 = llvm.load volatile %2099 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1128 = arith.constant 0 : i64
    %2101 = arith.extui %2089 : i32 to i64
    %2102 = arith.addi %2101, %c0_i64_1128 : i64
    %c8_i64_1129 = arith.constant 8 : i64
    %2103 = arith.addi %2102, %c8_i64_1129 : i64
    %c0_i32_1130 = arith.constant 0 : i32
    %2104 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1130) : (!llvm.ptr, i32) -> i32
    %2105 = arith.extui %2104 : i32 to i64
    %c65536_i64_1131 = arith.constant 65536 : i64
    %2106 = arith.muli %2105, %c65536_i64_1131 : i64
    %2107 = arith.cmpi ult, %2103, %2106 : i64
    cf.cond_br %2107, ^bb403, ^bb404
  ^bb402:  // pred: ^bb399
    %c1_i32_1132 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1132) : (i32) -> ()
    cf.br ^bb401
  ^bb403:  // 2 preds: ^bb401, ^bb404
    %2108 = llvm.getelementptr %11[%2102] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2100, %2108 {alignment = 1 : i64} : i64, !llvm.ptr
    %2109 = llvm.load %3 : !llvm.ptr -> i32
    %2110 = llvm.load %3 : !llvm.ptr -> i32
    %c1560_i64_1133 = arith.constant 1560 : i64
    %2111 = arith.extui %2110 : i32 to i64
    %2112 = arith.addi %2111, %c1560_i64_1133 : i64
    %c8_i64_1134 = arith.constant 8 : i64
    %2113 = arith.addi %2112, %c8_i64_1134 : i64
    %c0_i32_1135 = arith.constant 0 : i32
    %2114 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1135) : (!llvm.ptr, i32) -> i32
    %2115 = arith.extui %2114 : i32 to i64
    %c65536_i64_1136 = arith.constant 65536 : i64
    %2116 = arith.muli %2115, %c65536_i64_1136 : i64
    %2117 = arith.cmpi ult, %2113, %2116 : i64
    cf.cond_br %2117, ^bb405, ^bb406
  ^bb404:  // pred: ^bb401
    %c1_i32_1137 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1137) : (i32) -> ()
    cf.br ^bb403
  ^bb405:  // 2 preds: ^bb403, ^bb406
    %2118 = llvm.getelementptr %11[%2112] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2119 = llvm.load volatile %2118 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c1432_i64 = arith.constant 1432 : i64
    %2120 = arith.extui %2109 : i32 to i64
    %2121 = arith.addi %2120, %c1432_i64 : i64
    %c8_i64_1138 = arith.constant 8 : i64
    %2122 = arith.addi %2121, %c8_i64_1138 : i64
    %c0_i32_1139 = arith.constant 0 : i32
    %2123 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1139) : (!llvm.ptr, i32) -> i32
    %2124 = arith.extui %2123 : i32 to i64
    %c65536_i64_1140 = arith.constant 65536 : i64
    %2125 = arith.muli %2124, %c65536_i64_1140 : i64
    %2126 = arith.cmpi ult, %2122, %2125 : i64
    cf.cond_br %2126, ^bb407, ^bb408
  ^bb406:  // pred: ^bb403
    %c1_i32_1141 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1141) : (i32) -> ()
    cf.br ^bb405
  ^bb407:  // 2 preds: ^bb405, ^bb408
    %2127 = llvm.getelementptr %11[%2121] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2119, %2127 {alignment = 1 : i64} : i64, !llvm.ptr
    %2128 = llvm.load %3 : !llvm.ptr -> i32
    %2129 = llvm.load %3 : !llvm.ptr -> i32
    %c1580_i64 = arith.constant 1580 : i64
    %2130 = arith.extui %2129 : i32 to i64
    %2131 = arith.addi %2130, %c1580_i64 : i64
    %c8_i64_1142 = arith.constant 8 : i64
    %2132 = arith.addi %2131, %c8_i64_1142 : i64
    %c0_i32_1143 = arith.constant 0 : i32
    %2133 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1143) : (!llvm.ptr, i32) -> i32
    %2134 = arith.extui %2133 : i32 to i64
    %c65536_i64_1144 = arith.constant 65536 : i64
    %2135 = arith.muli %2134, %c65536_i64_1144 : i64
    %2136 = arith.cmpi ult, %2132, %2135 : i64
    cf.cond_br %2136, ^bb409, ^bb410
  ^bb408:  // pred: ^bb405
    %c1_i32_1145 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1145) : (i32) -> ()
    cf.br ^bb407
  ^bb409:  // 2 preds: ^bb407, ^bb410
    %2137 = llvm.getelementptr %11[%2131] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2138 = llvm.load volatile %2137 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c1456_i64 = arith.constant 1456 : i64
    %2139 = arith.extui %2128 : i32 to i64
    %2140 = arith.addi %2139, %c1456_i64 : i64
    %c8_i64_1146 = arith.constant 8 : i64
    %2141 = arith.addi %2140, %c8_i64_1146 : i64
    %c0_i32_1147 = arith.constant 0 : i32
    %2142 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1147) : (!llvm.ptr, i32) -> i32
    %2143 = arith.extui %2142 : i32 to i64
    %c65536_i64_1148 = arith.constant 65536 : i64
    %2144 = arith.muli %2143, %c65536_i64_1148 : i64
    %2145 = arith.cmpi ult, %2141, %2144 : i64
    cf.cond_br %2145, ^bb411, ^bb412
  ^bb410:  // pred: ^bb407
    %c1_i32_1149 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1149) : (i32) -> ()
    cf.br ^bb409
  ^bb411:  // 2 preds: ^bb409, ^bb412
    %2146 = llvm.getelementptr %11[%2140] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2138, %2146 {alignment = 1 : i64} : i64, !llvm.ptr
    %2147 = llvm.load %3 : !llvm.ptr -> i32
    %2148 = llvm.load %3 : !llvm.ptr -> i32
    %c1600_i64 = arith.constant 1600 : i64
    %2149 = arith.extui %2148 : i32 to i64
    %2150 = arith.addi %2149, %c1600_i64 : i64
    %c8_i64_1150 = arith.constant 8 : i64
    %2151 = arith.addi %2150, %c8_i64_1150 : i64
    %c0_i32_1151 = arith.constant 0 : i32
    %2152 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1151) : (!llvm.ptr, i32) -> i32
    %2153 = arith.extui %2152 : i32 to i64
    %c65536_i64_1152 = arith.constant 65536 : i64
    %2154 = arith.muli %2153, %c65536_i64_1152 : i64
    %2155 = arith.cmpi ult, %2151, %2154 : i64
    cf.cond_br %2155, ^bb413, ^bb414
  ^bb412:  // pred: ^bb409
    %c1_i32_1153 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1153) : (i32) -> ()
    cf.br ^bb411
  ^bb413:  // 2 preds: ^bb411, ^bb414
    %2156 = llvm.getelementptr %11[%2150] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2157 = llvm.load volatile %2156 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c296_i64 = arith.constant 296 : i64
    %2158 = arith.extui %2147 : i32 to i64
    %2159 = arith.addi %2158, %c296_i64 : i64
    %c8_i64_1154 = arith.constant 8 : i64
    %2160 = arith.addi %2159, %c8_i64_1154 : i64
    %c0_i32_1155 = arith.constant 0 : i32
    %2161 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1155) : (!llvm.ptr, i32) -> i32
    %2162 = arith.extui %2161 : i32 to i64
    %c65536_i64_1156 = arith.constant 65536 : i64
    %2163 = arith.muli %2162, %c65536_i64_1156 : i64
    %2164 = arith.cmpi ult, %2160, %2163 : i64
    cf.cond_br %2164, ^bb415, ^bb416
  ^bb414:  // pred: ^bb411
    %c1_i32_1157 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1157) : (i32) -> ()
    cf.br ^bb413
  ^bb415:  // 2 preds: ^bb413, ^bb416
    %2165 = llvm.getelementptr %11[%2159] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2157, %2165 {alignment = 1 : i64} : i64, !llvm.ptr
    %2166 = llvm.load %3 : !llvm.ptr -> i32
    %c1144_i32 = arith.constant 1144 : i32
    %2167 = arith.addi %2166, %c1144_i32 : i32
    %2168 = llvm.load %3 : !llvm.ptr -> i32
    %2169 = llvm.load %3 : !llvm.ptr -> i32
    %c1432_i32_1158 = arith.constant 1432 : i32
    %2170 = arith.addi %2169, %c1432_i32_1158 : i32
    %2171 = llvm.load %3 : !llvm.ptr -> i32
    %c1456_i32_1159 = arith.constant 1456 : i32
    %2172 = arith.addi %2171, %c1456_i32_1159 : i32
    %2173 = llvm.load %3 : !llvm.ptr -> i32
    %c296_i32_1160 = arith.constant 296 : i32
    %2174 = arith.addi %2173, %c296_i32_1160 : i32
    call @f18(%arg0, %2167, %2168, %2170, %2172, %2174) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %2175 = llvm.load %3 : !llvm.ptr -> i32
    %c1144_i64 = arith.constant 1144 : i64
    %2176 = arith.extui %2175 : i32 to i64
    %2177 = arith.addi %2176, %c1144_i64 : i64
    %c8_i64_1161 = arith.constant 8 : i64
    %2178 = arith.addi %2177, %c8_i64_1161 : i64
    %c0_i32_1162 = arith.constant 0 : i32
    %2179 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1162) : (!llvm.ptr, i32) -> i32
    %2180 = arith.extui %2179 : i32 to i64
    %c65536_i64_1163 = arith.constant 65536 : i64
    %2181 = arith.muli %2180, %c65536_i64_1163 : i64
    %2182 = arith.cmpi ult, %2178, %2181 : i64
    cf.cond_br %2182, ^bb419, ^bb420
  ^bb416:  // pred: ^bb413
    %c1_i32_1164 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1164) : (i32) -> ()
    cf.br ^bb415
  ^bb417:  // 2 preds: ^bb418, ^bb432
    %2183 = llvm.load %3 : !llvm.ptr -> i32
    %c532_i32_1165 = arith.constant 532 : i32
    %2184 = arith.addi %2183, %c532_i32_1165 : i32
    %2185 = llvm.load %3 : !llvm.ptr -> i32
    %c1292_i32_1166 = arith.constant 1292 : i32
    %2186 = arith.addi %2185, %c1292_i32_1166 : i32
    %c0_i64_1167 = arith.constant 0 : i64
    %2187 = arith.extui %2186 : i32 to i64
    %2188 = arith.addi %2187, %c0_i64_1167 : i64
    %c4_i64_1168 = arith.constant 4 : i64
    %2189 = arith.addi %2188, %c4_i64_1168 : i64
    %c0_i32_1169 = arith.constant 0 : i32
    %2190 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1169) : (!llvm.ptr, i32) -> i32
    %2191 = arith.extui %2190 : i32 to i64
    %c65536_i64_1170 = arith.constant 65536 : i64
    %2192 = arith.muli %2191, %c65536_i64_1170 : i64
    %2193 = arith.cmpi ult, %2189, %2192 : i64
    cf.cond_br %2193, ^bb434, ^bb435
  ^bb418:  // pred: ^bb419
    %2194 = llvm.load %3 : !llvm.ptr -> i32
    %c1284_i32_1171 = arith.constant 1284 : i32
    %2195 = arith.addi %2194, %c1284_i32_1171 : i32
    %2196 = llvm.load %3 : !llvm.ptr -> i32
    %c1144_i32_1172 = arith.constant 1144 : i32
    %2197 = arith.addi %2196, %c1144_i32_1172 : i32
    call @f16(%arg0, %2195, %2197) : (!llvm.ptr, i32, i32) -> ()
    %c1_i32_1173 = arith.constant 1 : i32
    llvm.store %c1_i32_1173, %2 : i32, !llvm.ptr
    cf.br ^bb417
  ^bb419:  // 2 preds: ^bb415, ^bb420
    %2198 = llvm.getelementptr %11[%2177] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2199 = llvm.load volatile %2198 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c2_i64_1174 = arith.constant 2 : i64
    %2200 = arith.cmpi eq, %2199, %c2_i64_1174 : i64
    %2201 = arith.extui %2200 : i1 to i32
    %c0_i32_1175 = arith.constant 0 : i32
    %2202 = arith.cmpi eq, %2201, %c0_i32_1175 : i32
    %2203 = arith.extui %2202 : i1 to i32
    %c0_i32_1176 = arith.constant 0 : i32
    %2204 = arith.cmpi ne, %2203, %c0_i32_1176 : i32
    cf.cond_br %2204, ^bb418, ^bb421
  ^bb420:  // pred: ^bb415
    %c1_i32_1177 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1177) : (i32) -> ()
    cf.br ^bb419
  ^bb421:  // pred: ^bb419
    %2205 = llvm.load %3 : !llvm.ptr -> i32
    %c1152_i64 = arith.constant 1152 : i64
    %2206 = arith.extui %2205 : i32 to i64
    %2207 = arith.addi %2206, %c1152_i64 : i64
    %c1_i64_1178 = arith.constant 1 : i64
    %2208 = arith.addi %2207, %c1_i64_1178 : i64
    %c0_i32_1179 = arith.constant 0 : i32
    %2209 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1179) : (!llvm.ptr, i32) -> i32
    %2210 = arith.extui %2209 : i32 to i64
    %c65536_i64_1180 = arith.constant 65536 : i64
    %2211 = arith.muli %2210, %c65536_i64_1180 : i64
    %2212 = arith.cmpi ult, %2208, %2211 : i64
    cf.cond_br %2212, ^bb422, ^bb423
  ^bb422:  // 2 preds: ^bb421, ^bb423
    %2213 = llvm.getelementptr %11[%2207] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2214 = llvm.load volatile %2213 {alignment = 1 : i64} : !llvm.ptr -> i8
    %2215 = arith.extui %2214 : i8 to i32
    llvm.store %2215, %4 : i32, !llvm.ptr
    %2216 = llvm.load %3 : !llvm.ptr -> i32
    %c1575_i32_1181 = arith.constant 1575 : i32
    %2217 = arith.addi %2216, %c1575_i32_1181 : i32
    %c0_i64_1182 = arith.constant 0 : i64
    %c0_i64_1183 = arith.constant 0 : i64
    %2218 = arith.extui %2217 : i32 to i64
    %2219 = arith.addi %2218, %c0_i64_1183 : i64
    %c8_i64_1184 = arith.constant 8 : i64
    %2220 = arith.addi %2219, %c8_i64_1184 : i64
    %c0_i32_1185 = arith.constant 0 : i32
    %2221 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1185) : (!llvm.ptr, i32) -> i32
    %2222 = arith.extui %2221 : i32 to i64
    %c65536_i64_1186 = arith.constant 65536 : i64
    %2223 = arith.muli %2222, %c65536_i64_1186 : i64
    %2224 = arith.cmpi ult, %2220, %2223 : i64
    cf.cond_br %2224, ^bb424, ^bb425
  ^bb423:  // pred: ^bb421
    %c1_i32_1187 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1187) : (i32) -> ()
    cf.br ^bb422
  ^bb424:  // 2 preds: ^bb422, ^bb425
    %2225 = llvm.getelementptr %11[%2219] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_1182, %2225 {alignment = 1 : i64} : i64, !llvm.ptr
    %2226 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_1188 = arith.constant 0 : i64
    %c0_i64_1189 = arith.constant 0 : i64
    %2227 = arith.extui %2226 : i32 to i64
    %2228 = arith.addi %2227, %c0_i64_1189 : i64
    %c8_i64_1190 = arith.constant 8 : i64
    %2229 = arith.addi %2228, %c8_i64_1190 : i64
    %c0_i32_1191 = arith.constant 0 : i32
    %2230 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1191) : (!llvm.ptr, i32) -> i32
    %2231 = arith.extui %2230 : i32 to i64
    %c65536_i64_1192 = arith.constant 65536 : i64
    %2232 = arith.muli %2231, %c65536_i64_1192 : i64
    %2233 = arith.cmpi ult, %2229, %2232 : i64
    cf.cond_br %2233, ^bb426, ^bb427
  ^bb425:  // pred: ^bb422
    %c1_i32_1193 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1193) : (i32) -> ()
    cf.br ^bb424
  ^bb426:  // 2 preds: ^bb424, ^bb427
    %2234 = llvm.getelementptr %11[%2228] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_1188, %2234 {alignment = 1 : i64} : i64, !llvm.ptr
    %2235 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_1194 = arith.constant 1552 : i32
    %2236 = arith.addi %2235, %c1552_i32_1194 : i32
    %c8_i32_1195 = arith.constant 8 : i32
    %2237 = arith.addi %2236, %c8_i32_1195 : i32
    %c0_i64_1196 = arith.constant 0 : i64
    %c0_i64_1197 = arith.constant 0 : i64
    %2238 = arith.extui %2237 : i32 to i64
    %2239 = arith.addi %2238, %c0_i64_1197 : i64
    %c8_i64_1198 = arith.constant 8 : i64
    %2240 = arith.addi %2239, %c8_i64_1198 : i64
    %c0_i32_1199 = arith.constant 0 : i32
    %2241 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1199) : (!llvm.ptr, i32) -> i32
    %2242 = arith.extui %2241 : i32 to i64
    %c65536_i64_1200 = arith.constant 65536 : i64
    %2243 = arith.muli %2242, %c65536_i64_1200 : i64
    %2244 = arith.cmpi ult, %2240, %2243 : i64
    cf.cond_br %2244, ^bb428, ^bb429
  ^bb427:  // pred: ^bb424
    %c1_i32_1201 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1201) : (i32) -> ()
    cf.br ^bb426
  ^bb428:  // 2 preds: ^bb426, ^bb429
    %2245 = llvm.getelementptr %11[%2239] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_1196, %2245 {alignment = 1 : i64} : i64, !llvm.ptr
    %2246 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_1202 = arith.constant 0 : i64
    %c1552_i64_1203 = arith.constant 1552 : i64
    %2247 = arith.extui %2246 : i32 to i64
    %2248 = arith.addi %2247, %c1552_i64_1203 : i64
    %c8_i64_1204 = arith.constant 8 : i64
    %2249 = arith.addi %2248, %c8_i64_1204 : i64
    %c0_i32_1205 = arith.constant 0 : i32
    %2250 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1205) : (!llvm.ptr, i32) -> i32
    %2251 = arith.extui %2250 : i32 to i64
    %c65536_i64_1206 = arith.constant 65536 : i64
    %2252 = arith.muli %2251, %c65536_i64_1206 : i64
    %2253 = arith.cmpi ult, %2249, %2252 : i64
    cf.cond_br %2253, ^bb430, ^bb431
  ^bb429:  // pred: ^bb426
    %c1_i32_1207 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1207) : (i32) -> ()
    cf.br ^bb428
  ^bb430:  // 2 preds: ^bb428, ^bb431
    %2254 = llvm.getelementptr %11[%2248] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_1202, %2254 {alignment = 1 : i64} : i64, !llvm.ptr
    %2255 = llvm.load %3 : !llvm.ptr -> i32
    %2256 = llvm.load %4 : !llvm.ptr -> i32
    %c1583_i64_1208 = arith.constant 1583 : i64
    %2257 = arith.extui %2255 : i32 to i64
    %2258 = arith.addi %2257, %c1583_i64_1208 : i64
    %c1_i64_1209 = arith.constant 1 : i64
    %2259 = arith.addi %2258, %c1_i64_1209 : i64
    %c0_i32_1210 = arith.constant 0 : i32
    %2260 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1210) : (!llvm.ptr, i32) -> i32
    %2261 = arith.extui %2260 : i32 to i64
    %c65536_i64_1211 = arith.constant 65536 : i64
    %2262 = arith.muli %2261, %c65536_i64_1211 : i64
    %2263 = arith.cmpi ult, %2259, %2262 : i64
    cf.cond_br %2263, ^bb432, ^bb433
  ^bb431:  // pred: ^bb428
    %c1_i32_1212 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1212) : (i32) -> ()
    cf.br ^bb430
  ^bb432:  // 2 preds: ^bb430, ^bb433
    %2264 = llvm.getelementptr %11[%2258] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2265 = arith.trunci %2256 : i32 to i8
    llvm.store volatile %2265, %2264 {alignment = 1 : i64} : i8, !llvm.ptr
    %2266 = llvm.load %3 : !llvm.ptr -> i32
    %c1284_i32_1213 = arith.constant 1284 : i32
    %2267 = arith.addi %2266, %c1284_i32_1213 : i32
    %2268 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_1214 = arith.constant 1552 : i32
    %2269 = arith.addi %2268, %c1552_i32_1214 : i32
    call @f15(%arg0, %2267, %2269) : (!llvm.ptr, i32, i32) -> ()
    %c0_i32_1215 = arith.constant 0 : i32
    llvm.store %c0_i32_1215, %2 : i32, !llvm.ptr
    cf.br ^bb417
  ^bb433:  // pred: ^bb430
    %c1_i32_1216 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1216) : (i32) -> ()
    cf.br ^bb432
  ^bb434:  // 2 preds: ^bb417, ^bb435
    %2270 = llvm.getelementptr %11[%2188] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2271 = llvm.load volatile %2270 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_1217 = arith.constant 0 : i64
    %2272 = arith.extui %2184 : i32 to i64
    %2273 = arith.addi %2272, %c0_i64_1217 : i64
    %c4_i64_1218 = arith.constant 4 : i64
    %2274 = arith.addi %2273, %c4_i64_1218 : i64
    %c0_i32_1219 = arith.constant 0 : i32
    %2275 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1219) : (!llvm.ptr, i32) -> i32
    %2276 = arith.extui %2275 : i32 to i64
    %c65536_i64_1220 = arith.constant 65536 : i64
    %2277 = arith.muli %2276, %c65536_i64_1220 : i64
    %2278 = arith.cmpi ult, %2274, %2277 : i64
    cf.cond_br %2278, ^bb436, ^bb437
  ^bb435:  // pred: ^bb417
    %c1_i32_1221 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1221) : (i32) -> ()
    cf.br ^bb434
  ^bb436:  // 2 preds: ^bb434, ^bb437
    %2279 = llvm.getelementptr %11[%2273] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2271, %2279 {alignment = 1 : i64} : i32, !llvm.ptr
    %2280 = llvm.load %3 : !llvm.ptr -> i32
    %2281 = llvm.load %2 : !llvm.ptr -> i32
    %c520_i64_1222 = arith.constant 520 : i64
    %2282 = arith.extui %2280 : i32 to i64
    %2283 = arith.addi %2282, %c520_i64_1222 : i64
    %c4_i64_1223 = arith.constant 4 : i64
    %2284 = arith.addi %2283, %c4_i64_1223 : i64
    %c0_i32_1224 = arith.constant 0 : i32
    %2285 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1224) : (!llvm.ptr, i32) -> i32
    %2286 = arith.extui %2285 : i32 to i64
    %c65536_i64_1225 = arith.constant 65536 : i64
    %2287 = arith.muli %2286, %c65536_i64_1225 : i64
    %2288 = arith.cmpi ult, %2284, %2287 : i64
    cf.cond_br %2288, ^bb438, ^bb439
  ^bb437:  // pred: ^bb434
    %c1_i32_1226 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1226) : (i32) -> ()
    cf.br ^bb436
  ^bb438:  // 2 preds: ^bb436, ^bb439
    %2289 = llvm.getelementptr %11[%2283] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2281, %2289 {alignment = 1 : i64} : i32, !llvm.ptr
    %2290 = llvm.load %3 : !llvm.ptr -> i32
    %2291 = llvm.load %3 : !llvm.ptr -> i32
    %c1284_i64_1227 = arith.constant 1284 : i64
    %2292 = arith.extui %2291 : i32 to i64
    %2293 = arith.addi %2292, %c1284_i64_1227 : i64
    %c8_i64_1228 = arith.constant 8 : i64
    %2294 = arith.addi %2293, %c8_i64_1228 : i64
    %c0_i32_1229 = arith.constant 0 : i32
    %2295 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1229) : (!llvm.ptr, i32) -> i32
    %2296 = arith.extui %2295 : i32 to i64
    %c65536_i64_1230 = arith.constant 65536 : i64
    %2297 = arith.muli %2296, %c65536_i64_1230 : i64
    %2298 = arith.cmpi ult, %2294, %2297 : i64
    cf.cond_br %2298, ^bb440, ^bb441
  ^bb439:  // pred: ^bb436
    %c1_i32_1231 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1231) : (i32) -> ()
    cf.br ^bb438
  ^bb440:  // 2 preds: ^bb438, ^bb441
    %2299 = llvm.getelementptr %11[%2293] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2300 = llvm.load volatile %2299 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c524_i64_1232 = arith.constant 524 : i64
    %2301 = arith.extui %2290 : i32 to i64
    %2302 = arith.addi %2301, %c524_i64_1232 : i64
    %c8_i64_1233 = arith.constant 8 : i64
    %2303 = arith.addi %2302, %c8_i64_1233 : i64
    %c0_i32_1234 = arith.constant 0 : i32
    %2304 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1234) : (!llvm.ptr, i32) -> i32
    %2305 = arith.extui %2304 : i32 to i64
    %c65536_i64_1235 = arith.constant 65536 : i64
    %2306 = arith.muli %2305, %c65536_i64_1235 : i64
    %2307 = arith.cmpi ult, %2303, %2306 : i64
    cf.cond_br %2307, ^bb442, ^bb443
  ^bb441:  // pred: ^bb438
    %c1_i32_1236 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1236) : (i32) -> ()
    cf.br ^bb440
  ^bb442:  // 2 preds: ^bb440, ^bb443
    %2308 = llvm.getelementptr %11[%2302] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2300, %2308 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb30
  ^bb443:  // pred: ^bb440
    %c1_i32_1237 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1237) : (i32) -> ()
    cf.br ^bb442
  ^bb444:  // 2 preds: ^bb373, ^bb445
    %2309 = llvm.getelementptr %11[%1944] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2310 = llvm.load volatile %2309 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1238 = arith.constant 0 : i64
    %2311 = arith.extui %1940 : i32 to i64
    %2312 = arith.addi %2311, %c0_i64_1238 : i64
    %c8_i64_1239 = arith.constant 8 : i64
    %2313 = arith.addi %2312, %c8_i64_1239 : i64
    %c0_i32_1240 = arith.constant 0 : i32
    %2314 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1240) : (!llvm.ptr, i32) -> i32
    %2315 = arith.extui %2314 : i32 to i64
    %c65536_i64_1241 = arith.constant 65536 : i64
    %2316 = arith.muli %2315, %c65536_i64_1241 : i64
    %2317 = arith.cmpi ult, %2313, %2316 : i64
    cf.cond_br %2317, ^bb446, ^bb447
  ^bb445:  // pred: ^bb373
    %c1_i32_1242 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1242) : (i32) -> ()
    cf.br ^bb444
  ^bb446:  // 2 preds: ^bb444, ^bb447
    %2318 = llvm.getelementptr %11[%2312] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2310, %2318 {alignment = 1 : i64} : i64, !llvm.ptr
    %2319 = llvm.load %3 : !llvm.ptr -> i32
    %c1128_i32 = arith.constant 1128 : i32
    %2320 = arith.addi %2319, %c1128_i32 : i32
    %2321 = llvm.load %3 : !llvm.ptr -> i32
    %c1564_i32_1243 = arith.constant 1564 : i32
    %2322 = arith.addi %2321, %c1564_i32_1243 : i32
    %c0_i64_1244 = arith.constant 0 : i64
    %2323 = arith.extui %2322 : i32 to i64
    %2324 = arith.addi %2323, %c0_i64_1244 : i64
    %c8_i64_1245 = arith.constant 8 : i64
    %2325 = arith.addi %2324, %c8_i64_1245 : i64
    %c0_i32_1246 = arith.constant 0 : i32
    %2326 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1246) : (!llvm.ptr, i32) -> i32
    %2327 = arith.extui %2326 : i32 to i64
    %c65536_i64_1247 = arith.constant 65536 : i64
    %2328 = arith.muli %2327, %c65536_i64_1247 : i64
    %2329 = arith.cmpi ult, %2325, %2328 : i64
    cf.cond_br %2329, ^bb448, ^bb449
  ^bb447:  // pred: ^bb444
    %c1_i32_1248 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1248) : (i32) -> ()
    cf.br ^bb446
  ^bb448:  // 2 preds: ^bb446, ^bb449
    %2330 = llvm.getelementptr %11[%2324] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2331 = llvm.load volatile %2330 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1249 = arith.constant 0 : i64
    %2332 = arith.extui %2320 : i32 to i64
    %2333 = arith.addi %2332, %c0_i64_1249 : i64
    %c8_i64_1250 = arith.constant 8 : i64
    %2334 = arith.addi %2333, %c8_i64_1250 : i64
    %c0_i32_1251 = arith.constant 0 : i32
    %2335 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1251) : (!llvm.ptr, i32) -> i32
    %2336 = arith.extui %2335 : i32 to i64
    %c65536_i64_1252 = arith.constant 65536 : i64
    %2337 = arith.muli %2336, %c65536_i64_1252 : i64
    %2338 = arith.cmpi ult, %2334, %2337 : i64
    cf.cond_br %2338, ^bb450, ^bb451
  ^bb449:  // pred: ^bb446
    %c1_i32_1253 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1253) : (i32) -> ()
    cf.br ^bb448
  ^bb450:  // 2 preds: ^bb448, ^bb451
    %2339 = llvm.getelementptr %11[%2333] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2331, %2339 {alignment = 1 : i64} : i64, !llvm.ptr
    %2340 = llvm.load %3 : !llvm.ptr -> i32
    %2341 = llvm.load %3 : !llvm.ptr -> i32
    %c1556_i64_1254 = arith.constant 1556 : i64
    %2342 = arith.extui %2341 : i32 to i64
    %2343 = arith.addi %2342, %c1556_i64_1254 : i64
    %c8_i64_1255 = arith.constant 8 : i64
    %2344 = arith.addi %2343, %c8_i64_1255 : i64
    %c0_i32_1256 = arith.constant 0 : i32
    %2345 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1256) : (!llvm.ptr, i32) -> i32
    %2346 = arith.extui %2345 : i32 to i64
    %c65536_i64_1257 = arith.constant 65536 : i64
    %2347 = arith.muli %2346, %c65536_i64_1257 : i64
    %2348 = arith.cmpi ult, %2344, %2347 : i64
    cf.cond_br %2348, ^bb452, ^bb453
  ^bb451:  // pred: ^bb448
    %c1_i32_1258 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1258) : (i32) -> ()
    cf.br ^bb450
  ^bb452:  // 2 preds: ^bb450, ^bb453
    %2349 = llvm.getelementptr %11[%2343] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2350 = llvm.load volatile %2349 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c1120_i64 = arith.constant 1120 : i64
    %2351 = arith.extui %2340 : i32 to i64
    %2352 = arith.addi %2351, %c1120_i64 : i64
    %c8_i64_1259 = arith.constant 8 : i64
    %2353 = arith.addi %2352, %c8_i64_1259 : i64
    %c0_i32_1260 = arith.constant 0 : i32
    %2354 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1260) : (!llvm.ptr, i32) -> i32
    %2355 = arith.extui %2354 : i32 to i64
    %c65536_i64_1261 = arith.constant 65536 : i64
    %2356 = arith.muli %2355, %c65536_i64_1261 : i64
    %2357 = arith.cmpi ult, %2353, %2356 : i64
    cf.cond_br %2357, ^bb454, ^bb455
  ^bb453:  // pred: ^bb450
    %c1_i32_1262 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1262) : (i32) -> ()
    cf.br ^bb452
  ^bb454:  // 2 preds: ^bb452, ^bb455
    %2358 = llvm.getelementptr %11[%2352] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2350, %2358 {alignment = 1 : i64} : i64, !llvm.ptr
    %2359 = llvm.load %3 : !llvm.ptr -> i32
    %c1120_i32 = arith.constant 1120 : i32
    %2360 = arith.addi %2359, %c1120_i32 : i32
    call @f63(%arg0, %2360) : (!llvm.ptr, i32) -> ()
    %2361 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_1263 = arith.constant 1 : i64
    %c528_i64_1264 = arith.constant 528 : i64
    %2362 = arith.extui %2361 : i32 to i64
    %2363 = arith.addi %2362, %c528_i64_1264 : i64
    %c8_i64_1265 = arith.constant 8 : i64
    %2364 = arith.addi %2363, %c8_i64_1265 : i64
    %c0_i32_1266 = arith.constant 0 : i32
    %2365 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1266) : (!llvm.ptr, i32) -> i32
    %2366 = arith.extui %2365 : i32 to i64
    %c65536_i64_1267 = arith.constant 65536 : i64
    %2367 = arith.muli %2366, %c65536_i64_1267 : i64
    %2368 = arith.cmpi ult, %2364, %2367 : i64
    cf.cond_br %2368, ^bb456, ^bb457
  ^bb455:  // pred: ^bb452
    %c1_i32_1268 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1268) : (i32) -> ()
    cf.br ^bb454
  ^bb456:  // 2 preds: ^bb454, ^bb457
    %2369 = llvm.getelementptr %11[%2363] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_1263, %2369 {alignment = 1 : i64} : i64, !llvm.ptr
    %2370 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_1269 = arith.constant 1 : i64
    %c520_i64_1270 = arith.constant 520 : i64
    %2371 = arith.extui %2370 : i32 to i64
    %2372 = arith.addi %2371, %c520_i64_1270 : i64
    %c8_i64_1271 = arith.constant 8 : i64
    %2373 = arith.addi %2372, %c8_i64_1271 : i64
    %c0_i32_1272 = arith.constant 0 : i32
    %2374 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1272) : (!llvm.ptr, i32) -> i32
    %2375 = arith.extui %2374 : i32 to i64
    %c65536_i64_1273 = arith.constant 65536 : i64
    %2376 = arith.muli %2375, %c65536_i64_1273 : i64
    %2377 = arith.cmpi ult, %2373, %2376 : i64
    cf.cond_br %2377, ^bb458, ^bb459
  ^bb457:  // pred: ^bb454
    %c1_i32_1274 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1274) : (i32) -> ()
    cf.br ^bb456
  ^bb458:  // 2 preds: ^bb456, ^bb459
    %2378 = llvm.getelementptr %11[%2372] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_1269, %2378 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb30
  ^bb459:  // pred: ^bb456
    %c1_i32_1275 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1275) : (i32) -> ()
    cf.br ^bb458
  ^bb460:  // pred: ^bb41
    %2379 = llvm.load %3 : !llvm.ptr -> i32
    %c-2147483648_i32_1276 = arith.constant -2147483648 : i32
    %c1284_i64_1277 = arith.constant 1284 : i64
    %2380 = arith.extui %2379 : i32 to i64
    %2381 = arith.addi %2380, %c1284_i64_1277 : i64
    %c4_i64_1278 = arith.constant 4 : i64
    %2382 = arith.addi %2381, %c4_i64_1278 : i64
    %c0_i32_1279 = arith.constant 0 : i32
    %2383 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1279) : (!llvm.ptr, i32) -> i32
    %2384 = arith.extui %2383 : i32 to i64
    %c65536_i64_1280 = arith.constant 65536 : i64
    %2385 = arith.muli %2384, %c65536_i64_1280 : i64
    %2386 = arith.cmpi ult, %2382, %2385 : i64
    cf.cond_br %2386, ^bb468, ^bb469
  ^bb461:  // pred: ^bb41
    %2387 = llvm.load %3 : !llvm.ptr -> i32
    %c532_i32_1281 = arith.constant 532 : i32
    %2388 = arith.addi %2387, %c532_i32_1281 : i32
    %c0_i32_1282 = arith.constant 0 : i32
    %c0_i64_1283 = arith.constant 0 : i64
    %2389 = arith.extui %2388 : i32 to i64
    %2390 = arith.addi %2389, %c0_i64_1283 : i64
    %c4_i64_1284 = arith.constant 4 : i64
    %2391 = arith.addi %2390, %c4_i64_1284 : i64
    %c0_i32_1285 = arith.constant 0 : i32
    %2392 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1285) : (!llvm.ptr, i32) -> i32
    %2393 = arith.extui %2392 : i32 to i64
    %c65536_i64_1286 = arith.constant 65536 : i64
    %2394 = arith.muli %2393, %c65536_i64_1286 : i64
    %2395 = arith.cmpi ult, %2391, %2394 : i64
    cf.cond_br %2395, ^bb462, ^bb463
  ^bb462:  // 2 preds: ^bb461, ^bb463
    %2396 = llvm.getelementptr %11[%2390] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_1282, %2396 {alignment = 1 : i64} : i32, !llvm.ptr
    %2397 = llvm.load %3 : !llvm.ptr -> i32
    %c4294967296_i64_1287 = arith.constant 4294967296 : i64
    %c524_i64_1288 = arith.constant 524 : i64
    %2398 = arith.extui %2397 : i32 to i64
    %2399 = arith.addi %2398, %c524_i64_1288 : i64
    %c8_i64_1289 = arith.constant 8 : i64
    %2400 = arith.addi %2399, %c8_i64_1289 : i64
    %c0_i32_1290 = arith.constant 0 : i32
    %2401 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1290) : (!llvm.ptr, i32) -> i32
    %2402 = arith.extui %2401 : i32 to i64
    %c65536_i64_1291 = arith.constant 65536 : i64
    %2403 = arith.muli %2402, %c65536_i64_1291 : i64
    %2404 = arith.cmpi ult, %2400, %2403 : i64
    cf.cond_br %2404, ^bb464, ^bb465
  ^bb463:  // pred: ^bb461
    %c1_i32_1292 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1292) : (i32) -> ()
    cf.br ^bb462
  ^bb464:  // 2 preds: ^bb462, ^bb465
    %2405 = llvm.getelementptr %11[%2399] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4294967296_i64_1287, %2405 {alignment = 1 : i64} : i64, !llvm.ptr
    %2406 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_1293 = arith.constant 1 : i32
    %c520_i64_1294 = arith.constant 520 : i64
    %2407 = arith.extui %2406 : i32 to i64
    %2408 = arith.addi %2407, %c520_i64_1294 : i64
    %c4_i64_1295 = arith.constant 4 : i64
    %2409 = arith.addi %2408, %c4_i64_1295 : i64
    %c0_i32_1296 = arith.constant 0 : i32
    %2410 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1296) : (!llvm.ptr, i32) -> i32
    %2411 = arith.extui %2410 : i32 to i64
    %c65536_i64_1297 = arith.constant 65536 : i64
    %2412 = arith.muli %2411, %c65536_i64_1297 : i64
    %2413 = arith.cmpi ult, %2409, %2412 : i64
    cf.cond_br %2413, ^bb466, ^bb467
  ^bb465:  // pred: ^bb462
    %c1_i32_1298 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1298) : (i32) -> ()
    cf.br ^bb464
  ^bb466:  // 2 preds: ^bb464, ^bb467
    %2414 = llvm.getelementptr %11[%2408] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_1293, %2414 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb30
  ^bb467:  // pred: ^bb464
    %c1_i32_1299 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1299) : (i32) -> ()
    cf.br ^bb466
  ^bb468:  // 2 preds: ^bb460, ^bb469
    %2415 = llvm.getelementptr %11[%2381] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-2147483648_i32_1276, %2415 {alignment = 1 : i64} : i32, !llvm.ptr
    %2416 = llvm.load %3 : !llvm.ptr -> i32
    %c1284_i32_1300 = arith.constant 1284 : i32
    %2417 = arith.addi %2416, %c1284_i32_1300 : i32
    call @f4(%arg0, %2417) : (!llvm.ptr, i32) -> ()
    %2418 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_1301 = arith.constant 1552 : i32
    %2419 = arith.addi %2418, %c1552_i32_1301 : i32
    %2420 = llvm.load %5 : !llvm.ptr -> i32
    %2421 = llvm.load %4 : !llvm.ptr -> i32
    call @f13(%arg0, %2419, %2420, %2421) : (!llvm.ptr, i32, i32, i32) -> ()
    %2422 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i64_1302 = arith.constant 1552 : i64
    %2423 = arith.extui %2422 : i32 to i64
    %2424 = arith.addi %2423, %c1552_i64_1302 : i64
    %c4_i64_1303 = arith.constant 4 : i64
    %2425 = arith.addi %2424, %c4_i64_1303 : i64
    %c0_i32_1304 = arith.constant 0 : i32
    %2426 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1304) : (!llvm.ptr, i32) -> i32
    %2427 = arith.extui %2426 : i32 to i64
    %c65536_i64_1305 = arith.constant 65536 : i64
    %2428 = arith.muli %2427, %c65536_i64_1305 : i64
    %2429 = arith.cmpi ult, %2425, %2428 : i64
    cf.cond_br %2429, ^bb471, ^bb472
  ^bb469:  // pred: ^bb460
    %c1_i32_1306 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1306) : (i32) -> ()
    cf.br ^bb468
  ^bb470:  // pred: ^bb471
    %2430 = llvm.load %3 : !llvm.ptr -> i32
    %c1272_i32 = arith.constant 1272 : i32
    %2431 = arith.addi %2430, %c1272_i32 : i32
    %2432 = llvm.load %3 : !llvm.ptr -> i32
    %c1572_i32_1307 = arith.constant 1572 : i32
    %2433 = arith.addi %2432, %c1572_i32_1307 : i32
    %c0_i64_1308 = arith.constant 0 : i64
    %2434 = arith.extui %2433 : i32 to i64
    %2435 = arith.addi %2434, %c0_i64_1308 : i64
    %c8_i64_1309 = arith.constant 8 : i64
    %2436 = arith.addi %2435, %c8_i64_1309 : i64
    %c0_i32_1310 = arith.constant 0 : i32
    %2437 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1310) : (!llvm.ptr, i32) -> i32
    %2438 = arith.extui %2437 : i32 to i64
    %c65536_i64_1311 = arith.constant 65536 : i64
    %2439 = arith.muli %2438, %c65536_i64_1311 : i64
    %2440 = arith.cmpi ult, %2436, %2439 : i64
    cf.cond_br %2440, ^bb522, ^bb523
  ^bb471:  // 2 preds: ^bb468, ^bb472
    %2441 = llvm.getelementptr %11[%2424] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2442 = llvm.load volatile %2441 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_1312 = arith.constant 0 : i32
    %2443 = arith.cmpi ne, %2442, %c0_i32_1312 : i32
    cf.cond_br %2443, ^bb470, ^bb473
  ^bb472:  // pred: ^bb468
    %c1_i32_1313 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1313) : (i32) -> ()
    cf.br ^bb471
  ^bb473:  // pred: ^bb471
    %2444 = llvm.load %3 : !llvm.ptr -> i32
    %c1480_i32 = arith.constant 1480 : i32
    %2445 = arith.addi %2444, %c1480_i32 : i32
    %c16_i32_1314 = arith.constant 16 : i32
    %2446 = arith.addi %2445, %c16_i32_1314 : i32
    %2447 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_1315 = arith.constant 1552 : i32
    %2448 = arith.addi %2447, %c1552_i32_1315 : i32
    %c24_i32_1316 = arith.constant 24 : i32
    %2449 = arith.addi %2448, %c24_i32_1316 : i32
    %c0_i64_1317 = arith.constant 0 : i64
    %2450 = arith.extui %2449 : i32 to i64
    %2451 = arith.addi %2450, %c0_i64_1317 : i64
    %c4_i64_1318 = arith.constant 4 : i64
    %2452 = arith.addi %2451, %c4_i64_1318 : i64
    %c0_i32_1319 = arith.constant 0 : i32
    %2453 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1319) : (!llvm.ptr, i32) -> i32
    %2454 = arith.extui %2453 : i32 to i64
    %c65536_i64_1320 = arith.constant 65536 : i64
    %2455 = arith.muli %2454, %c65536_i64_1320 : i64
    %2456 = arith.cmpi ult, %2452, %2455 : i64
    cf.cond_br %2456, ^bb474, ^bb475
  ^bb474:  // 2 preds: ^bb473, ^bb475
    %2457 = llvm.getelementptr %11[%2451] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2458 = llvm.load volatile %2457 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_1321 = arith.constant 0 : i64
    %2459 = arith.extui %2446 : i32 to i64
    %2460 = arith.addi %2459, %c0_i64_1321 : i64
    %c4_i64_1322 = arith.constant 4 : i64
    %2461 = arith.addi %2460, %c4_i64_1322 : i64
    %c0_i32_1323 = arith.constant 0 : i32
    %2462 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1323) : (!llvm.ptr, i32) -> i32
    %2463 = arith.extui %2462 : i32 to i64
    %c65536_i64_1324 = arith.constant 65536 : i64
    %2464 = arith.muli %2463, %c65536_i64_1324 : i64
    %2465 = arith.cmpi ult, %2461, %2464 : i64
    cf.cond_br %2465, ^bb476, ^bb477
  ^bb475:  // pred: ^bb473
    %c1_i32_1325 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1325) : (i32) -> ()
    cf.br ^bb474
  ^bb476:  // 2 preds: ^bb474, ^bb477
    %2466 = llvm.getelementptr %11[%2460] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2458, %2466 {alignment = 1 : i64} : i32, !llvm.ptr
    %2467 = llvm.load %3 : !llvm.ptr -> i32
    %c1480_i32_1326 = arith.constant 1480 : i32
    %2468 = arith.addi %2467, %c1480_i32_1326 : i32
    %c8_i32_1327 = arith.constant 8 : i32
    %2469 = arith.addi %2468, %c8_i32_1327 : i32
    %2470 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_1328 = arith.constant 1552 : i32
    %2471 = arith.addi %2470, %c1552_i32_1328 : i32
    %c16_i32_1329 = arith.constant 16 : i32
    %2472 = arith.addi %2471, %c16_i32_1329 : i32
    llvm.store %2472, %2 : i32, !llvm.ptr
    %c0_i64_1330 = arith.constant 0 : i64
    %2473 = arith.extui %2472 : i32 to i64
    %2474 = arith.addi %2473, %c0_i64_1330 : i64
    %c8_i64_1331 = arith.constant 8 : i64
    %2475 = arith.addi %2474, %c8_i64_1331 : i64
    %c0_i32_1332 = arith.constant 0 : i32
    %2476 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1332) : (!llvm.ptr, i32) -> i32
    %2477 = arith.extui %2476 : i32 to i64
    %c65536_i64_1333 = arith.constant 65536 : i64
    %2478 = arith.muli %2477, %c65536_i64_1333 : i64
    %2479 = arith.cmpi ult, %2475, %2478 : i64
    cf.cond_br %2479, ^bb478, ^bb479
  ^bb477:  // pred: ^bb474
    %c1_i32_1334 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1334) : (i32) -> ()
    cf.br ^bb476
  ^bb478:  // 2 preds: ^bb476, ^bb479
    %2480 = llvm.getelementptr %11[%2474] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2481 = llvm.load volatile %2480 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1335 = arith.constant 0 : i64
    %2482 = arith.extui %2469 : i32 to i64
    %2483 = arith.addi %2482, %c0_i64_1335 : i64
    %c8_i64_1336 = arith.constant 8 : i64
    %2484 = arith.addi %2483, %c8_i64_1336 : i64
    %c0_i32_1337 = arith.constant 0 : i32
    %2485 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1337) : (!llvm.ptr, i32) -> i32
    %2486 = arith.extui %2485 : i32 to i64
    %c65536_i64_1338 = arith.constant 65536 : i64
    %2487 = arith.muli %2486, %c65536_i64_1338 : i64
    %2488 = arith.cmpi ult, %2484, %2487 : i64
    cf.cond_br %2488, ^bb480, ^bb481
  ^bb479:  // pred: ^bb476
    %c1_i32_1339 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1339) : (i32) -> ()
    cf.br ^bb478
  ^bb480:  // 2 preds: ^bb478, ^bb481
    %2489 = llvm.getelementptr %11[%2483] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2481, %2489 {alignment = 1 : i64} : i64, !llvm.ptr
    %2490 = llvm.load %3 : !llvm.ptr -> i32
    %c656_i32_1340 = arith.constant 656 : i32
    %2491 = arith.addi %2490, %c656_i32_1340 : i32
    %c8_i32_1341 = arith.constant 8 : i32
    %2492 = arith.addi %2491, %c8_i32_1341 : i32
    %2493 = llvm.load %3 : !llvm.ptr -> i32
    %c1592_i32_1342 = arith.constant 1592 : i32
    %2494 = arith.addi %2493, %c1592_i32_1342 : i32
    %c0_i64_1343 = arith.constant 0 : i64
    %2495 = arith.extui %2494 : i32 to i64
    %2496 = arith.addi %2495, %c0_i64_1343 : i64
    %c8_i64_1344 = arith.constant 8 : i64
    %2497 = arith.addi %2496, %c8_i64_1344 : i64
    %c0_i32_1345 = arith.constant 0 : i32
    %2498 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1345) : (!llvm.ptr, i32) -> i32
    %2499 = arith.extui %2498 : i32 to i64
    %c65536_i64_1346 = arith.constant 65536 : i64
    %2500 = arith.muli %2499, %c65536_i64_1346 : i64
    %2501 = arith.cmpi ult, %2497, %2500 : i64
    cf.cond_br %2501, ^bb482, ^bb483
  ^bb481:  // pred: ^bb478
    %c1_i32_1347 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1347) : (i32) -> ()
    cf.br ^bb480
  ^bb482:  // 2 preds: ^bb480, ^bb483
    %2502 = llvm.getelementptr %11[%2496] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2503 = llvm.load volatile %2502 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1348 = arith.constant 0 : i64
    %2504 = arith.extui %2492 : i32 to i64
    %2505 = arith.addi %2504, %c0_i64_1348 : i64
    %c8_i64_1349 = arith.constant 8 : i64
    %2506 = arith.addi %2505, %c8_i64_1349 : i64
    %c0_i32_1350 = arith.constant 0 : i32
    %2507 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1350) : (!llvm.ptr, i32) -> i32
    %2508 = arith.extui %2507 : i32 to i64
    %c65536_i64_1351 = arith.constant 65536 : i64
    %2509 = arith.muli %2508, %c65536_i64_1351 : i64
    %2510 = arith.cmpi ult, %2506, %2509 : i64
    cf.cond_br %2510, ^bb484, ^bb485
  ^bb483:  // pred: ^bb480
    %c1_i32_1352 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1352) : (i32) -> ()
    cf.br ^bb482
  ^bb484:  // 2 preds: ^bb482, ^bb485
    %2511 = llvm.getelementptr %11[%2505] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2503, %2511 {alignment = 1 : i64} : i64, !llvm.ptr
    %2512 = llvm.load %3 : !llvm.ptr -> i32
    %c656_i32_1353 = arith.constant 656 : i32
    %2513 = arith.addi %2512, %c656_i32_1353 : i32
    %c16_i32_1354 = arith.constant 16 : i32
    %2514 = arith.addi %2513, %c16_i32_1354 : i32
    %2515 = llvm.load %3 : !llvm.ptr -> i32
    %c1600_i32_1355 = arith.constant 1600 : i32
    %2516 = arith.addi %2515, %c1600_i32_1355 : i32
    %c0_i64_1356 = arith.constant 0 : i64
    %2517 = arith.extui %2516 : i32 to i64
    %2518 = arith.addi %2517, %c0_i64_1356 : i64
    %c8_i64_1357 = arith.constant 8 : i64
    %2519 = arith.addi %2518, %c8_i64_1357 : i64
    %c0_i32_1358 = arith.constant 0 : i32
    %2520 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1358) : (!llvm.ptr, i32) -> i32
    %2521 = arith.extui %2520 : i32 to i64
    %c65536_i64_1359 = arith.constant 65536 : i64
    %2522 = arith.muli %2521, %c65536_i64_1359 : i64
    %2523 = arith.cmpi ult, %2519, %2522 : i64
    cf.cond_br %2523, ^bb486, ^bb487
  ^bb485:  // pred: ^bb482
    %c1_i32_1360 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1360) : (i32) -> ()
    cf.br ^bb484
  ^bb486:  // 2 preds: ^bb484, ^bb487
    %2524 = llvm.getelementptr %11[%2518] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2525 = llvm.load volatile %2524 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1361 = arith.constant 0 : i64
    %2526 = arith.extui %2514 : i32 to i64
    %2527 = arith.addi %2526, %c0_i64_1361 : i64
    %c8_i64_1362 = arith.constant 8 : i64
    %2528 = arith.addi %2527, %c8_i64_1362 : i64
    %c0_i32_1363 = arith.constant 0 : i32
    %2529 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1363) : (!llvm.ptr, i32) -> i32
    %2530 = arith.extui %2529 : i32 to i64
    %c65536_i64_1364 = arith.constant 65536 : i64
    %2531 = arith.muli %2530, %c65536_i64_1364 : i64
    %2532 = arith.cmpi ult, %2528, %2531 : i64
    cf.cond_br %2532, ^bb488, ^bb489
  ^bb487:  // pred: ^bb484
    %c1_i32_1365 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1365) : (i32) -> ()
    cf.br ^bb486
  ^bb488:  // 2 preds: ^bb486, ^bb489
    %2533 = llvm.getelementptr %11[%2527] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2525, %2533 {alignment = 1 : i64} : i64, !llvm.ptr
    %2534 = llvm.load %3 : !llvm.ptr -> i32
    %c656_i32_1366 = arith.constant 656 : i32
    %2535 = arith.addi %2534, %c656_i32_1366 : i32
    %c24_i32_1367 = arith.constant 24 : i32
    %2536 = arith.addi %2535, %c24_i32_1367 : i32
    %2537 = llvm.load %3 : !llvm.ptr -> i32
    %c1608_i32_1368 = arith.constant 1608 : i32
    %2538 = arith.addi %2537, %c1608_i32_1368 : i32
    %c0_i64_1369 = arith.constant 0 : i64
    %2539 = arith.extui %2538 : i32 to i64
    %2540 = arith.addi %2539, %c0_i64_1369 : i64
    %c8_i64_1370 = arith.constant 8 : i64
    %2541 = arith.addi %2540, %c8_i64_1370 : i64
    %c0_i32_1371 = arith.constant 0 : i32
    %2542 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1371) : (!llvm.ptr, i32) -> i32
    %2543 = arith.extui %2542 : i32 to i64
    %c65536_i64_1372 = arith.constant 65536 : i64
    %2544 = arith.muli %2543, %c65536_i64_1372 : i64
    %2545 = arith.cmpi ult, %2541, %2544 : i64
    cf.cond_br %2545, ^bb490, ^bb491
  ^bb489:  // pred: ^bb486
    %c1_i32_1373 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1373) : (i32) -> ()
    cf.br ^bb488
  ^bb490:  // 2 preds: ^bb488, ^bb491
    %2546 = llvm.getelementptr %11[%2540] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2547 = llvm.load volatile %2546 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1374 = arith.constant 0 : i64
    %2548 = arith.extui %2536 : i32 to i64
    %2549 = arith.addi %2548, %c0_i64_1374 : i64
    %c8_i64_1375 = arith.constant 8 : i64
    %2550 = arith.addi %2549, %c8_i64_1375 : i64
    %c0_i32_1376 = arith.constant 0 : i32
    %2551 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1376) : (!llvm.ptr, i32) -> i32
    %2552 = arith.extui %2551 : i32 to i64
    %c65536_i64_1377 = arith.constant 65536 : i64
    %2553 = arith.muli %2552, %c65536_i64_1377 : i64
    %2554 = arith.cmpi ult, %2550, %2553 : i64
    cf.cond_br %2554, ^bb492, ^bb493
  ^bb491:  // pred: ^bb488
    %c1_i32_1378 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1378) : (i32) -> ()
    cf.br ^bb490
  ^bb492:  // 2 preds: ^bb490, ^bb493
    %2555 = llvm.getelementptr %11[%2549] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2547, %2555 {alignment = 1 : i64} : i64, !llvm.ptr
    %2556 = llvm.load %3 : !llvm.ptr -> i32
    %2557 = llvm.load %3 : !llvm.ptr -> i32
    %c1560_i64_1379 = arith.constant 1560 : i64
    %2558 = arith.extui %2557 : i32 to i64
    %2559 = arith.addi %2558, %c1560_i64_1379 : i64
    %c8_i64_1380 = arith.constant 8 : i64
    %2560 = arith.addi %2559, %c8_i64_1380 : i64
    %c0_i32_1381 = arith.constant 0 : i32
    %2561 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1381) : (!llvm.ptr, i32) -> i32
    %2562 = arith.extui %2561 : i32 to i64
    %c65536_i64_1382 = arith.constant 65536 : i64
    %2563 = arith.muli %2562, %c65536_i64_1382 : i64
    %2564 = arith.cmpi ult, %2560, %2563 : i64
    cf.cond_br %2564, ^bb494, ^bb495
  ^bb493:  // pred: ^bb490
    %c1_i32_1383 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1383) : (i32) -> ()
    cf.br ^bb492
  ^bb494:  // 2 preds: ^bb492, ^bb495
    %2565 = llvm.getelementptr %11[%2559] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2566 = llvm.load volatile %2565 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c1480_i64 = arith.constant 1480 : i64
    %2567 = arith.extui %2556 : i32 to i64
    %2568 = arith.addi %2567, %c1480_i64 : i64
    %c8_i64_1384 = arith.constant 8 : i64
    %2569 = arith.addi %2568, %c8_i64_1384 : i64
    %c0_i32_1385 = arith.constant 0 : i32
    %2570 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1385) : (!llvm.ptr, i32) -> i32
    %2571 = arith.extui %2570 : i32 to i64
    %c65536_i64_1386 = arith.constant 65536 : i64
    %2572 = arith.muli %2571, %c65536_i64_1386 : i64
    %2573 = arith.cmpi ult, %2569, %2572 : i64
    cf.cond_br %2573, ^bb496, ^bb497
  ^bb495:  // pred: ^bb492
    %c1_i32_1387 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1387) : (i32) -> ()
    cf.br ^bb494
  ^bb496:  // 2 preds: ^bb494, ^bb497
    %2574 = llvm.getelementptr %11[%2568] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2566, %2574 {alignment = 1 : i64} : i64, !llvm.ptr
    %2575 = llvm.load %3 : !llvm.ptr -> i32
    %2576 = llvm.load %3 : !llvm.ptr -> i32
    %c1584_i64_1388 = arith.constant 1584 : i64
    %2577 = arith.extui %2576 : i32 to i64
    %2578 = arith.addi %2577, %c1584_i64_1388 : i64
    %c8_i64_1389 = arith.constant 8 : i64
    %2579 = arith.addi %2578, %c8_i64_1389 : i64
    %c0_i32_1390 = arith.constant 0 : i32
    %2580 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1390) : (!llvm.ptr, i32) -> i32
    %2581 = arith.extui %2580 : i32 to i64
    %c65536_i64_1391 = arith.constant 65536 : i64
    %2582 = arith.muli %2581, %c65536_i64_1391 : i64
    %2583 = arith.cmpi ult, %2579, %2582 : i64
    cf.cond_br %2583, ^bb498, ^bb499
  ^bb497:  // pred: ^bb494
    %c1_i32_1392 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1392) : (i32) -> ()
    cf.br ^bb496
  ^bb498:  // 2 preds: ^bb496, ^bb499
    %2584 = llvm.getelementptr %11[%2578] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2585 = llvm.load volatile %2584 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c656_i64_1393 = arith.constant 656 : i64
    %2586 = arith.extui %2575 : i32 to i64
    %2587 = arith.addi %2586, %c656_i64_1393 : i64
    %c8_i64_1394 = arith.constant 8 : i64
    %2588 = arith.addi %2587, %c8_i64_1394 : i64
    %c0_i32_1395 = arith.constant 0 : i32
    %2589 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1395) : (!llvm.ptr, i32) -> i32
    %2590 = arith.extui %2589 : i32 to i64
    %c65536_i64_1396 = arith.constant 65536 : i64
    %2591 = arith.muli %2590, %c65536_i64_1396 : i64
    %2592 = arith.cmpi ult, %2588, %2591 : i64
    cf.cond_br %2592, ^bb500, ^bb501
  ^bb499:  // pred: ^bb496
    %c1_i32_1397 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1397) : (i32) -> ()
    cf.br ^bb498
  ^bb500:  // 2 preds: ^bb498, ^bb501
    %2593 = llvm.getelementptr %11[%2587] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2585, %2593 {alignment = 1 : i64} : i64, !llvm.ptr
    %2594 = llvm.load %3 : !llvm.ptr -> i32
    %2595 = llvm.load %3 : !llvm.ptr -> i32
    %c1480_i32_1398 = arith.constant 1480 : i32
    %2596 = arith.addi %2595, %c1480_i32_1398 : i32
    %2597 = llvm.load %3 : !llvm.ptr -> i32
    %c656_i32_1399 = arith.constant 656 : i32
    %2598 = arith.addi %2597, %c656_i32_1399 : i32
    %2599 = call @f19(%arg0, %2594, %2596, %2598) : (!llvm.ptr, i32, i32, i32) -> i32
    %2600 = llvm.load %3 : !llvm.ptr -> i32
    %c1575_i32_1400 = arith.constant 1575 : i32
    %2601 = arith.addi %2600, %c1575_i32_1400 : i32
    %c0_i64_1401 = arith.constant 0 : i64
    %c0_i64_1402 = arith.constant 0 : i64
    %2602 = arith.extui %2601 : i32 to i64
    %2603 = arith.addi %2602, %c0_i64_1402 : i64
    %c8_i64_1403 = arith.constant 8 : i64
    %2604 = arith.addi %2603, %c8_i64_1403 : i64
    %c0_i32_1404 = arith.constant 0 : i32
    %2605 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1404) : (!llvm.ptr, i32) -> i32
    %2606 = arith.extui %2605 : i32 to i64
    %c65536_i64_1405 = arith.constant 65536 : i64
    %2607 = arith.muli %2606, %c65536_i64_1405 : i64
    %2608 = arith.cmpi ult, %2604, %2607 : i64
    cf.cond_br %2608, ^bb502, ^bb503
  ^bb501:  // pred: ^bb498
    %c1_i32_1406 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1406) : (i32) -> ()
    cf.br ^bb500
  ^bb502:  // 2 preds: ^bb500, ^bb503
    %2609 = llvm.getelementptr %11[%2603] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_1401, %2609 {alignment = 1 : i64} : i64, !llvm.ptr
    %2610 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_1407 = arith.constant 0 : i64
    %c0_i64_1408 = arith.constant 0 : i64
    %2611 = arith.extui %2610 : i32 to i64
    %2612 = arith.addi %2611, %c0_i64_1408 : i64
    %c8_i64_1409 = arith.constant 8 : i64
    %2613 = arith.addi %2612, %c8_i64_1409 : i64
    %c0_i32_1410 = arith.constant 0 : i32
    %2614 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1410) : (!llvm.ptr, i32) -> i32
    %2615 = arith.extui %2614 : i32 to i64
    %c65536_i64_1411 = arith.constant 65536 : i64
    %2616 = arith.muli %2615, %c65536_i64_1411 : i64
    %2617 = arith.cmpi ult, %2613, %2616 : i64
    cf.cond_br %2617, ^bb504, ^bb505
  ^bb503:  // pred: ^bb500
    %c1_i32_1412 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1412) : (i32) -> ()
    cf.br ^bb502
  ^bb504:  // 2 preds: ^bb502, ^bb505
    %2618 = llvm.getelementptr %11[%2612] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_1407, %2618 {alignment = 1 : i64} : i64, !llvm.ptr
    %2619 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_1413 = arith.constant 1552 : i32
    %2620 = arith.addi %2619, %c1552_i32_1413 : i32
    %c8_i32_1414 = arith.constant 8 : i32
    %2621 = arith.addi %2620, %c8_i32_1414 : i32
    %c0_i64_1415 = arith.constant 0 : i64
    %c0_i64_1416 = arith.constant 0 : i64
    %2622 = arith.extui %2621 : i32 to i64
    %2623 = arith.addi %2622, %c0_i64_1416 : i64
    %c8_i64_1417 = arith.constant 8 : i64
    %2624 = arith.addi %2623, %c8_i64_1417 : i64
    %c0_i32_1418 = arith.constant 0 : i32
    %2625 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1418) : (!llvm.ptr, i32) -> i32
    %2626 = arith.extui %2625 : i32 to i64
    %c65536_i64_1419 = arith.constant 65536 : i64
    %2627 = arith.muli %2626, %c65536_i64_1419 : i64
    %2628 = arith.cmpi ult, %2624, %2627 : i64
    cf.cond_br %2628, ^bb506, ^bb507
  ^bb505:  // pred: ^bb502
    %c1_i32_1420 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1420) : (i32) -> ()
    cf.br ^bb504
  ^bb506:  // 2 preds: ^bb504, ^bb507
    %2629 = llvm.getelementptr %11[%2623] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_1415, %2629 {alignment = 1 : i64} : i64, !llvm.ptr
    %2630 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_1421 = arith.constant 0 : i64
    %c1552_i64_1422 = arith.constant 1552 : i64
    %2631 = arith.extui %2630 : i32 to i64
    %2632 = arith.addi %2631, %c1552_i64_1422 : i64
    %c8_i64_1423 = arith.constant 8 : i64
    %2633 = arith.addi %2632, %c8_i64_1423 : i64
    %c0_i32_1424 = arith.constant 0 : i32
    %2634 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1424) : (!llvm.ptr, i32) -> i32
    %2635 = arith.extui %2634 : i32 to i64
    %c65536_i64_1425 = arith.constant 65536 : i64
    %2636 = arith.muli %2635, %c65536_i64_1425 : i64
    %2637 = arith.cmpi ult, %2633, %2636 : i64
    cf.cond_br %2637, ^bb508, ^bb509
  ^bb507:  // pred: ^bb504
    %c1_i32_1426 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1426) : (i32) -> ()
    cf.br ^bb506
  ^bb508:  // 2 preds: ^bb506, ^bb509
    %2638 = llvm.getelementptr %11[%2632] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_1421, %2638 {alignment = 1 : i64} : i64, !llvm.ptr
    %2639 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_1427 = arith.constant 1 : i32
    %c1583_i64_1428 = arith.constant 1583 : i64
    %2640 = arith.extui %2639 : i32 to i64
    %2641 = arith.addi %2640, %c1583_i64_1428 : i64
    %c1_i64_1429 = arith.constant 1 : i64
    %2642 = arith.addi %2641, %c1_i64_1429 : i64
    %c0_i32_1430 = arith.constant 0 : i32
    %2643 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1430) : (!llvm.ptr, i32) -> i32
    %2644 = arith.extui %2643 : i32 to i64
    %c65536_i64_1431 = arith.constant 65536 : i64
    %2645 = arith.muli %2644, %c65536_i64_1431 : i64
    %2646 = arith.cmpi ult, %2642, %2645 : i64
    cf.cond_br %2646, ^bb510, ^bb511
  ^bb509:  // pred: ^bb506
    %c1_i32_1432 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1432) : (i32) -> ()
    cf.br ^bb508
  ^bb510:  // 2 preds: ^bb508, ^bb511
    %2647 = llvm.getelementptr %11[%2641] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2648 = arith.trunci %c1_i32_1427 : i32 to i8
    llvm.store volatile %2648, %2647 {alignment = 1 : i64} : i8, !llvm.ptr
    %2649 = llvm.load %3 : !llvm.ptr -> i32
    %c1284_i32_1433 = arith.constant 1284 : i32
    %2650 = arith.addi %2649, %c1284_i32_1433 : i32
    %2651 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_1434 = arith.constant 1552 : i32
    %2652 = arith.addi %2651, %c1552_i32_1434 : i32
    call @f15(%arg0, %2650, %2652) : (!llvm.ptr, i32, i32) -> ()
    %2653 = llvm.load %3 : !llvm.ptr -> i32
    %c532_i32_1435 = arith.constant 532 : i32
    %2654 = arith.addi %2653, %c532_i32_1435 : i32
    %2655 = llvm.load %3 : !llvm.ptr -> i32
    %c1284_i32_1436 = arith.constant 1284 : i32
    %2656 = arith.addi %2655, %c1284_i32_1436 : i32
    %c8_i32_1437 = arith.constant 8 : i32
    %2657 = arith.addi %2656, %c8_i32_1437 : i32
    %c0_i64_1438 = arith.constant 0 : i64
    %2658 = arith.extui %2657 : i32 to i64
    %2659 = arith.addi %2658, %c0_i64_1438 : i64
    %c4_i64_1439 = arith.constant 4 : i64
    %2660 = arith.addi %2659, %c4_i64_1439 : i64
    %c0_i32_1440 = arith.constant 0 : i32
    %2661 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1440) : (!llvm.ptr, i32) -> i32
    %2662 = arith.extui %2661 : i32 to i64
    %c65536_i64_1441 = arith.constant 65536 : i64
    %2663 = arith.muli %2662, %c65536_i64_1441 : i64
    %2664 = arith.cmpi ult, %2660, %2663 : i64
    cf.cond_br %2664, ^bb512, ^bb513
  ^bb511:  // pred: ^bb508
    %c1_i32_1442 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1442) : (i32) -> ()
    cf.br ^bb510
  ^bb512:  // 2 preds: ^bb510, ^bb513
    %2665 = llvm.getelementptr %11[%2659] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2666 = llvm.load volatile %2665 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_1443 = arith.constant 0 : i64
    %2667 = arith.extui %2654 : i32 to i64
    %2668 = arith.addi %2667, %c0_i64_1443 : i64
    %c4_i64_1444 = arith.constant 4 : i64
    %2669 = arith.addi %2668, %c4_i64_1444 : i64
    %c0_i32_1445 = arith.constant 0 : i32
    %2670 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1445) : (!llvm.ptr, i32) -> i32
    %2671 = arith.extui %2670 : i32 to i64
    %c65536_i64_1446 = arith.constant 65536 : i64
    %2672 = arith.muli %2671, %c65536_i64_1446 : i64
    %2673 = arith.cmpi ult, %2669, %2672 : i64
    cf.cond_br %2673, ^bb514, ^bb515
  ^bb513:  // pred: ^bb510
    %c1_i32_1447 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1447) : (i32) -> ()
    cf.br ^bb512
  ^bb514:  // 2 preds: ^bb512, ^bb515
    %2674 = llvm.getelementptr %11[%2668] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2666, %2674 {alignment = 1 : i64} : i32, !llvm.ptr
    %2675 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_1448 = arith.constant 0 : i32
    %c520_i64_1449 = arith.constant 520 : i64
    %2676 = arith.extui %2675 : i32 to i64
    %2677 = arith.addi %2676, %c520_i64_1449 : i64
    %c4_i64_1450 = arith.constant 4 : i64
    %2678 = arith.addi %2677, %c4_i64_1450 : i64
    %c0_i32_1451 = arith.constant 0 : i32
    %2679 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1451) : (!llvm.ptr, i32) -> i32
    %2680 = arith.extui %2679 : i32 to i64
    %c65536_i64_1452 = arith.constant 65536 : i64
    %2681 = arith.muli %2680, %c65536_i64_1452 : i64
    %2682 = arith.cmpi ult, %2678, %2681 : i64
    cf.cond_br %2682, ^bb516, ^bb517
  ^bb515:  // pred: ^bb512
    %c1_i32_1453 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1453) : (i32) -> ()
    cf.br ^bb514
  ^bb516:  // 2 preds: ^bb514, ^bb517
    %2683 = llvm.getelementptr %11[%2677] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_1448, %2683 {alignment = 1 : i64} : i32, !llvm.ptr
    %2684 = llvm.load %3 : !llvm.ptr -> i32
    %2685 = llvm.load %3 : !llvm.ptr -> i32
    %c1284_i64_1454 = arith.constant 1284 : i64
    %2686 = arith.extui %2685 : i32 to i64
    %2687 = arith.addi %2686, %c1284_i64_1454 : i64
    %c8_i64_1455 = arith.constant 8 : i64
    %2688 = arith.addi %2687, %c8_i64_1455 : i64
    %c0_i32_1456 = arith.constant 0 : i32
    %2689 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1456) : (!llvm.ptr, i32) -> i32
    %2690 = arith.extui %2689 : i32 to i64
    %c65536_i64_1457 = arith.constant 65536 : i64
    %2691 = arith.muli %2690, %c65536_i64_1457 : i64
    %2692 = arith.cmpi ult, %2688, %2691 : i64
    cf.cond_br %2692, ^bb518, ^bb519
  ^bb517:  // pred: ^bb514
    %c1_i32_1458 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1458) : (i32) -> ()
    cf.br ^bb516
  ^bb518:  // 2 preds: ^bb516, ^bb519
    %2693 = llvm.getelementptr %11[%2687] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2694 = llvm.load volatile %2693 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c524_i64_1459 = arith.constant 524 : i64
    %2695 = arith.extui %2684 : i32 to i64
    %2696 = arith.addi %2695, %c524_i64_1459 : i64
    %c8_i64_1460 = arith.constant 8 : i64
    %2697 = arith.addi %2696, %c8_i64_1460 : i64
    %c0_i32_1461 = arith.constant 0 : i32
    %2698 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1461) : (!llvm.ptr, i32) -> i32
    %2699 = arith.extui %2698 : i32 to i64
    %c65536_i64_1462 = arith.constant 65536 : i64
    %2700 = arith.muli %2699, %c65536_i64_1462 : i64
    %2701 = arith.cmpi ult, %2697, %2700 : i64
    cf.cond_br %2701, ^bb520, ^bb521
  ^bb519:  // pred: ^bb516
    %c1_i32_1463 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1463) : (i32) -> ()
    cf.br ^bb518
  ^bb520:  // 2 preds: ^bb518, ^bb521
    %2702 = llvm.getelementptr %11[%2696] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2694, %2702 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb30
  ^bb521:  // pred: ^bb518
    %c1_i32_1464 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1464) : (i32) -> ()
    cf.br ^bb520
  ^bb522:  // 2 preds: ^bb470, ^bb523
    %2703 = llvm.getelementptr %11[%2435] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2704 = llvm.load volatile %2703 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1465 = arith.constant 0 : i64
    %2705 = arith.extui %2431 : i32 to i64
    %2706 = arith.addi %2705, %c0_i64_1465 : i64
    %c8_i64_1466 = arith.constant 8 : i64
    %2707 = arith.addi %2706, %c8_i64_1466 : i64
    %c0_i32_1467 = arith.constant 0 : i32
    %2708 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1467) : (!llvm.ptr, i32) -> i32
    %2709 = arith.extui %2708 : i32 to i64
    %c65536_i64_1468 = arith.constant 65536 : i64
    %2710 = arith.muli %2709, %c65536_i64_1468 : i64
    %2711 = arith.cmpi ult, %2707, %2710 : i64
    cf.cond_br %2711, ^bb524, ^bb525
  ^bb523:  // pred: ^bb470
    %c1_i32_1469 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1469) : (i32) -> ()
    cf.br ^bb522
  ^bb524:  // 2 preds: ^bb522, ^bb525
    %2712 = llvm.getelementptr %11[%2706] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2704, %2712 {alignment = 1 : i64} : i64, !llvm.ptr
    %2713 = llvm.load %3 : !llvm.ptr -> i32
    %c1264_i32 = arith.constant 1264 : i32
    %2714 = arith.addi %2713, %c1264_i32 : i32
    %2715 = llvm.load %3 : !llvm.ptr -> i32
    %c1564_i32_1470 = arith.constant 1564 : i32
    %2716 = arith.addi %2715, %c1564_i32_1470 : i32
    %c0_i64_1471 = arith.constant 0 : i64
    %2717 = arith.extui %2716 : i32 to i64
    %2718 = arith.addi %2717, %c0_i64_1471 : i64
    %c8_i64_1472 = arith.constant 8 : i64
    %2719 = arith.addi %2718, %c8_i64_1472 : i64
    %c0_i32_1473 = arith.constant 0 : i32
    %2720 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1473) : (!llvm.ptr, i32) -> i32
    %2721 = arith.extui %2720 : i32 to i64
    %c65536_i64_1474 = arith.constant 65536 : i64
    %2722 = arith.muli %2721, %c65536_i64_1474 : i64
    %2723 = arith.cmpi ult, %2719, %2722 : i64
    cf.cond_br %2723, ^bb526, ^bb527
  ^bb525:  // pred: ^bb522
    %c1_i32_1475 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1475) : (i32) -> ()
    cf.br ^bb524
  ^bb526:  // 2 preds: ^bb524, ^bb527
    %2724 = llvm.getelementptr %11[%2718] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2725 = llvm.load volatile %2724 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1476 = arith.constant 0 : i64
    %2726 = arith.extui %2714 : i32 to i64
    %2727 = arith.addi %2726, %c0_i64_1476 : i64
    %c8_i64_1477 = arith.constant 8 : i64
    %2728 = arith.addi %2727, %c8_i64_1477 : i64
    %c0_i32_1478 = arith.constant 0 : i32
    %2729 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1478) : (!llvm.ptr, i32) -> i32
    %2730 = arith.extui %2729 : i32 to i64
    %c65536_i64_1479 = arith.constant 65536 : i64
    %2731 = arith.muli %2730, %c65536_i64_1479 : i64
    %2732 = arith.cmpi ult, %2728, %2731 : i64
    cf.cond_br %2732, ^bb528, ^bb529
  ^bb527:  // pred: ^bb524
    %c1_i32_1480 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1480) : (i32) -> ()
    cf.br ^bb526
  ^bb528:  // 2 preds: ^bb526, ^bb529
    %2733 = llvm.getelementptr %11[%2727] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2725, %2733 {alignment = 1 : i64} : i64, !llvm.ptr
    %2734 = llvm.load %3 : !llvm.ptr -> i32
    %2735 = llvm.load %3 : !llvm.ptr -> i32
    %c1556_i64_1481 = arith.constant 1556 : i64
    %2736 = arith.extui %2735 : i32 to i64
    %2737 = arith.addi %2736, %c1556_i64_1481 : i64
    %c8_i64_1482 = arith.constant 8 : i64
    %2738 = arith.addi %2737, %c8_i64_1482 : i64
    %c0_i32_1483 = arith.constant 0 : i32
    %2739 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1483) : (!llvm.ptr, i32) -> i32
    %2740 = arith.extui %2739 : i32 to i64
    %c65536_i64_1484 = arith.constant 65536 : i64
    %2741 = arith.muli %2740, %c65536_i64_1484 : i64
    %2742 = arith.cmpi ult, %2738, %2741 : i64
    cf.cond_br %2742, ^bb530, ^bb531
  ^bb529:  // pred: ^bb526
    %c1_i32_1485 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1485) : (i32) -> ()
    cf.br ^bb528
  ^bb530:  // 2 preds: ^bb528, ^bb531
    %2743 = llvm.getelementptr %11[%2737] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2744 = llvm.load volatile %2743 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c1256_i64 = arith.constant 1256 : i64
    %2745 = arith.extui %2734 : i32 to i64
    %2746 = arith.addi %2745, %c1256_i64 : i64
    %c8_i64_1486 = arith.constant 8 : i64
    %2747 = arith.addi %2746, %c8_i64_1486 : i64
    %c0_i32_1487 = arith.constant 0 : i32
    %2748 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1487) : (!llvm.ptr, i32) -> i32
    %2749 = arith.extui %2748 : i32 to i64
    %c65536_i64_1488 = arith.constant 65536 : i64
    %2750 = arith.muli %2749, %c65536_i64_1488 : i64
    %2751 = arith.cmpi ult, %2747, %2750 : i64
    cf.cond_br %2751, ^bb532, ^bb533
  ^bb531:  // pred: ^bb528
    %c1_i32_1489 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1489) : (i32) -> ()
    cf.br ^bb530
  ^bb532:  // 2 preds: ^bb530, ^bb533
    %2752 = llvm.getelementptr %11[%2746] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2744, %2752 {alignment = 1 : i64} : i64, !llvm.ptr
    %2753 = llvm.load %3 : !llvm.ptr -> i32
    %c1256_i32 = arith.constant 1256 : i32
    %2754 = arith.addi %2753, %c1256_i32 : i32
    call @f63(%arg0, %2754) : (!llvm.ptr, i32) -> ()
    %2755 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_1490 = arith.constant 1 : i64
    %c528_i64_1491 = arith.constant 528 : i64
    %2756 = arith.extui %2755 : i32 to i64
    %2757 = arith.addi %2756, %c528_i64_1491 : i64
    %c8_i64_1492 = arith.constant 8 : i64
    %2758 = arith.addi %2757, %c8_i64_1492 : i64
    %c0_i32_1493 = arith.constant 0 : i32
    %2759 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1493) : (!llvm.ptr, i32) -> i32
    %2760 = arith.extui %2759 : i32 to i64
    %c65536_i64_1494 = arith.constant 65536 : i64
    %2761 = arith.muli %2760, %c65536_i64_1494 : i64
    %2762 = arith.cmpi ult, %2758, %2761 : i64
    cf.cond_br %2762, ^bb534, ^bb535
  ^bb533:  // pred: ^bb530
    %c1_i32_1495 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1495) : (i32) -> ()
    cf.br ^bb532
  ^bb534:  // 2 preds: ^bb532, ^bb535
    %2763 = llvm.getelementptr %11[%2757] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_1490, %2763 {alignment = 1 : i64} : i64, !llvm.ptr
    %2764 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_1496 = arith.constant 1 : i64
    %c520_i64_1497 = arith.constant 520 : i64
    %2765 = arith.extui %2764 : i32 to i64
    %2766 = arith.addi %2765, %c520_i64_1497 : i64
    %c8_i64_1498 = arith.constant 8 : i64
    %2767 = arith.addi %2766, %c8_i64_1498 : i64
    %c0_i32_1499 = arith.constant 0 : i32
    %2768 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1499) : (!llvm.ptr, i32) -> i32
    %2769 = arith.extui %2768 : i32 to i64
    %c65536_i64_1500 = arith.constant 65536 : i64
    %2770 = arith.muli %2769, %c65536_i64_1500 : i64
    %2771 = arith.cmpi ult, %2767, %2770 : i64
    cf.cond_br %2771, ^bb536, ^bb537
  ^bb535:  // pred: ^bb532
    %c1_i32_1501 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1501) : (i32) -> ()
    cf.br ^bb534
  ^bb536:  // 2 preds: ^bb534, ^bb537
    %2772 = llvm.getelementptr %11[%2766] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_1496, %2772 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb30
  ^bb537:  // pred: ^bb534
    %c1_i32_1502 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1502) : (i32) -> ()
    cf.br ^bb536
  ^bb538:  // pred: ^bb40
    %2773 = llvm.load %3 : !llvm.ptr -> i32
    %c-2147483648_i32_1503 = arith.constant -2147483648 : i32
    %c1284_i64_1504 = arith.constant 1284 : i64
    %2774 = arith.extui %2773 : i32 to i64
    %2775 = arith.addi %2774, %c1284_i64_1504 : i64
    %c4_i64_1505 = arith.constant 4 : i64
    %2776 = arith.addi %2775, %c4_i64_1505 : i64
    %c0_i32_1506 = arith.constant 0 : i32
    %2777 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1506) : (!llvm.ptr, i32) -> i32
    %2778 = arith.extui %2777 : i32 to i64
    %c65536_i64_1507 = arith.constant 65536 : i64
    %2779 = arith.muli %2778, %c65536_i64_1507 : i64
    %2780 = arith.cmpi ult, %2776, %2779 : i64
    cf.cond_br %2780, ^bb546, ^bb547
  ^bb539:  // pred: ^bb40
    %2781 = llvm.load %3 : !llvm.ptr -> i32
    %c532_i32_1508 = arith.constant 532 : i32
    %2782 = arith.addi %2781, %c532_i32_1508 : i32
    %c0_i32_1509 = arith.constant 0 : i32
    %c0_i64_1510 = arith.constant 0 : i64
    %2783 = arith.extui %2782 : i32 to i64
    %2784 = arith.addi %2783, %c0_i64_1510 : i64
    %c4_i64_1511 = arith.constant 4 : i64
    %2785 = arith.addi %2784, %c4_i64_1511 : i64
    %c0_i32_1512 = arith.constant 0 : i32
    %2786 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1512) : (!llvm.ptr, i32) -> i32
    %2787 = arith.extui %2786 : i32 to i64
    %c65536_i64_1513 = arith.constant 65536 : i64
    %2788 = arith.muli %2787, %c65536_i64_1513 : i64
    %2789 = arith.cmpi ult, %2785, %2788 : i64
    cf.cond_br %2789, ^bb540, ^bb541
  ^bb540:  // 2 preds: ^bb539, ^bb541
    %2790 = llvm.getelementptr %11[%2784] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_1509, %2790 {alignment = 1 : i64} : i32, !llvm.ptr
    %2791 = llvm.load %3 : !llvm.ptr -> i32
    %c4294967296_i64_1514 = arith.constant 4294967296 : i64
    %c524_i64_1515 = arith.constant 524 : i64
    %2792 = arith.extui %2791 : i32 to i64
    %2793 = arith.addi %2792, %c524_i64_1515 : i64
    %c8_i64_1516 = arith.constant 8 : i64
    %2794 = arith.addi %2793, %c8_i64_1516 : i64
    %c0_i32_1517 = arith.constant 0 : i32
    %2795 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1517) : (!llvm.ptr, i32) -> i32
    %2796 = arith.extui %2795 : i32 to i64
    %c65536_i64_1518 = arith.constant 65536 : i64
    %2797 = arith.muli %2796, %c65536_i64_1518 : i64
    %2798 = arith.cmpi ult, %2794, %2797 : i64
    cf.cond_br %2798, ^bb542, ^bb543
  ^bb541:  // pred: ^bb539
    %c1_i32_1519 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1519) : (i32) -> ()
    cf.br ^bb540
  ^bb542:  // 2 preds: ^bb540, ^bb543
    %2799 = llvm.getelementptr %11[%2793] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4294967296_i64_1514, %2799 {alignment = 1 : i64} : i64, !llvm.ptr
    %2800 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_1520 = arith.constant 1 : i32
    %c520_i64_1521 = arith.constant 520 : i64
    %2801 = arith.extui %2800 : i32 to i64
    %2802 = arith.addi %2801, %c520_i64_1521 : i64
    %c4_i64_1522 = arith.constant 4 : i64
    %2803 = arith.addi %2802, %c4_i64_1522 : i64
    %c0_i32_1523 = arith.constant 0 : i32
    %2804 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1523) : (!llvm.ptr, i32) -> i32
    %2805 = arith.extui %2804 : i32 to i64
    %c65536_i64_1524 = arith.constant 65536 : i64
    %2806 = arith.muli %2805, %c65536_i64_1524 : i64
    %2807 = arith.cmpi ult, %2803, %2806 : i64
    cf.cond_br %2807, ^bb544, ^bb545
  ^bb543:  // pred: ^bb540
    %c1_i32_1525 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1525) : (i32) -> ()
    cf.br ^bb542
  ^bb544:  // 2 preds: ^bb542, ^bb545
    %2808 = llvm.getelementptr %11[%2802] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_1520, %2808 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb30
  ^bb545:  // pred: ^bb542
    %c1_i32_1526 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1526) : (i32) -> ()
    cf.br ^bb544
  ^bb546:  // 2 preds: ^bb538, ^bb547
    %2809 = llvm.getelementptr %11[%2775] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-2147483648_i32_1503, %2809 {alignment = 1 : i64} : i32, !llvm.ptr
    %2810 = llvm.load %3 : !llvm.ptr -> i32
    %c1284_i32_1527 = arith.constant 1284 : i32
    %2811 = arith.addi %2810, %c1284_i32_1527 : i32
    call @f4(%arg0, %2811) : (!llvm.ptr, i32) -> ()
    %2812 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_1528 = arith.constant 1552 : i32
    %2813 = arith.addi %2812, %c1552_i32_1528 : i32
    %2814 = llvm.load %5 : !llvm.ptr -> i32
    %2815 = llvm.load %4 : !llvm.ptr -> i32
    call @f20(%arg0, %2813, %2814, %2815) : (!llvm.ptr, i32, i32, i32) -> ()
    %2816 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i64_1529 = arith.constant 1552 : i64
    %2817 = arith.extui %2816 : i32 to i64
    %2818 = arith.addi %2817, %c1552_i64_1529 : i64
    %c1_i64_1530 = arith.constant 1 : i64
    %2819 = arith.addi %2818, %c1_i64_1530 : i64
    %c0_i32_1531 = arith.constant 0 : i32
    %2820 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1531) : (!llvm.ptr, i32) -> i32
    %2821 = arith.extui %2820 : i32 to i64
    %c65536_i64_1532 = arith.constant 65536 : i64
    %2822 = arith.muli %2821, %c65536_i64_1532 : i64
    %2823 = arith.cmpi ult, %2819, %2822 : i64
    cf.cond_br %2823, ^bb549, ^bb550
  ^bb547:  // pred: ^bb538
    %c1_i32_1533 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1533) : (i32) -> ()
    cf.br ^bb546
  ^bb548:  // pred: ^bb549
    %2824 = llvm.load %3 : !llvm.ptr -> i32
    %c1312_i32 = arith.constant 1312 : i32
    %2825 = arith.addi %2824, %c1312_i32 : i32
    %2826 = llvm.load %3 : !llvm.ptr -> i32
    %c1572_i32_1534 = arith.constant 1572 : i32
    %2827 = arith.addi %2826, %c1572_i32_1534 : i32
    %c0_i64_1535 = arith.constant 0 : i64
    %2828 = arith.extui %2827 : i32 to i64
    %2829 = arith.addi %2828, %c0_i64_1535 : i64
    %c8_i64_1536 = arith.constant 8 : i64
    %2830 = arith.addi %2829, %c8_i64_1536 : i64
    %c0_i32_1537 = arith.constant 0 : i32
    %2831 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1537) : (!llvm.ptr, i32) -> i32
    %2832 = arith.extui %2831 : i32 to i64
    %c65536_i64_1538 = arith.constant 65536 : i64
    %2833 = arith.muli %2832, %c65536_i64_1538 : i64
    %2834 = arith.cmpi ult, %2830, %2833 : i64
    cf.cond_br %2834, ^bb586, ^bb587
  ^bb549:  // 2 preds: ^bb546, ^bb550
    %2835 = llvm.getelementptr %11[%2818] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2836 = llvm.load volatile %2835 {alignment = 1 : i64} : !llvm.ptr -> i8
    %2837 = arith.extui %2836 : i8 to i32
    %c0_i32_1539 = arith.constant 0 : i32
    %2838 = arith.cmpi ne, %2837, %c0_i32_1539 : i32
    cf.cond_br %2838, ^bb548, ^bb551
  ^bb550:  // pred: ^bb546
    %c1_i32_1540 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1540) : (i32) -> ()
    cf.br ^bb549
  ^bb551:  // pred: ^bb549
    %2839 = llvm.load %3 : !llvm.ptr -> i32
    %c1504_i32 = arith.constant 1504 : i32
    %2840 = arith.addi %2839, %c1504_i32 : i32
    %c16_i32_1541 = arith.constant 16 : i32
    %2841 = arith.addi %2840, %c16_i32_1541 : i32
    %2842 = llvm.load %3 : !llvm.ptr -> i32
    %c1569_i32 = arith.constant 1569 : i32
    %2843 = arith.addi %2842, %c1569_i32 : i32
    %c0_i64_1542 = arith.constant 0 : i64
    %2844 = arith.extui %2843 : i32 to i64
    %2845 = arith.addi %2844, %c0_i64_1542 : i64
    %c4_i64_1543 = arith.constant 4 : i64
    %2846 = arith.addi %2845, %c4_i64_1543 : i64
    %c0_i32_1544 = arith.constant 0 : i32
    %2847 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1544) : (!llvm.ptr, i32) -> i32
    %2848 = arith.extui %2847 : i32 to i64
    %c65536_i64_1545 = arith.constant 65536 : i64
    %2849 = arith.muli %2848, %c65536_i64_1545 : i64
    %2850 = arith.cmpi ult, %2846, %2849 : i64
    cf.cond_br %2850, ^bb552, ^bb553
  ^bb552:  // 2 preds: ^bb551, ^bb553
    %2851 = llvm.getelementptr %11[%2845] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2852 = llvm.load volatile %2851 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_1546 = arith.constant 0 : i64
    %2853 = arith.extui %2841 : i32 to i64
    %2854 = arith.addi %2853, %c0_i64_1546 : i64
    %c4_i64_1547 = arith.constant 4 : i64
    %2855 = arith.addi %2854, %c4_i64_1547 : i64
    %c0_i32_1548 = arith.constant 0 : i32
    %2856 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1548) : (!llvm.ptr, i32) -> i32
    %2857 = arith.extui %2856 : i32 to i64
    %c65536_i64_1549 = arith.constant 65536 : i64
    %2858 = arith.muli %2857, %c65536_i64_1549 : i64
    %2859 = arith.cmpi ult, %2855, %2858 : i64
    cf.cond_br %2859, ^bb554, ^bb555
  ^bb553:  // pred: ^bb551
    %c1_i32_1550 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1550) : (i32) -> ()
    cf.br ^bb552
  ^bb554:  // 2 preds: ^bb552, ^bb555
    %2860 = llvm.getelementptr %11[%2854] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2852, %2860 {alignment = 1 : i64} : i32, !llvm.ptr
    %2861 = llvm.load %3 : !llvm.ptr -> i32
    %c1504_i32_1551 = arith.constant 1504 : i32
    %2862 = arith.addi %2861, %c1504_i32_1551 : i32
    %c8_i32_1552 = arith.constant 8 : i32
    %2863 = arith.addi %2862, %c8_i32_1552 : i32
    %2864 = llvm.load %3 : !llvm.ptr -> i32
    %c1561_i32 = arith.constant 1561 : i32
    %2865 = arith.addi %2864, %c1561_i32 : i32
    %c0_i64_1553 = arith.constant 0 : i64
    %2866 = arith.extui %2865 : i32 to i64
    %2867 = arith.addi %2866, %c0_i64_1553 : i64
    %c8_i64_1554 = arith.constant 8 : i64
    %2868 = arith.addi %2867, %c8_i64_1554 : i64
    %c0_i32_1555 = arith.constant 0 : i32
    %2869 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1555) : (!llvm.ptr, i32) -> i32
    %2870 = arith.extui %2869 : i32 to i64
    %c65536_i64_1556 = arith.constant 65536 : i64
    %2871 = arith.muli %2870, %c65536_i64_1556 : i64
    %2872 = arith.cmpi ult, %2868, %2871 : i64
    cf.cond_br %2872, ^bb556, ^bb557
  ^bb555:  // pred: ^bb552
    %c1_i32_1557 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1557) : (i32) -> ()
    cf.br ^bb554
  ^bb556:  // 2 preds: ^bb554, ^bb557
    %2873 = llvm.getelementptr %11[%2867] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2874 = llvm.load volatile %2873 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1558 = arith.constant 0 : i64
    %2875 = arith.extui %2863 : i32 to i64
    %2876 = arith.addi %2875, %c0_i64_1558 : i64
    %c8_i64_1559 = arith.constant 8 : i64
    %2877 = arith.addi %2876, %c8_i64_1559 : i64
    %c0_i32_1560 = arith.constant 0 : i32
    %2878 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1560) : (!llvm.ptr, i32) -> i32
    %2879 = arith.extui %2878 : i32 to i64
    %c65536_i64_1561 = arith.constant 65536 : i64
    %2880 = arith.muli %2879, %c65536_i64_1561 : i64
    %2881 = arith.cmpi ult, %2877, %2880 : i64
    cf.cond_br %2881, ^bb558, ^bb559
  ^bb557:  // pred: ^bb554
    %c1_i32_1562 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1562) : (i32) -> ()
    cf.br ^bb556
  ^bb558:  // 2 preds: ^bb556, ^bb559
    %2882 = llvm.getelementptr %11[%2876] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2874, %2882 {alignment = 1 : i64} : i64, !llvm.ptr
    %2883 = llvm.load %3 : !llvm.ptr -> i32
    %c1528_i32 = arith.constant 1528 : i32
    %2884 = arith.addi %2883, %c1528_i32 : i32
    %c8_i32_1563 = arith.constant 8 : i32
    %2885 = arith.addi %2884, %c8_i32_1563 : i32
    %2886 = llvm.load %3 : !llvm.ptr -> i32
    %c1581_i32 = arith.constant 1581 : i32
    %2887 = arith.addi %2886, %c1581_i32 : i32
    %c0_i64_1564 = arith.constant 0 : i64
    %2888 = arith.extui %2887 : i32 to i64
    %2889 = arith.addi %2888, %c0_i64_1564 : i64
    %c8_i64_1565 = arith.constant 8 : i64
    %2890 = arith.addi %2889, %c8_i64_1565 : i64
    %c0_i32_1566 = arith.constant 0 : i32
    %2891 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1566) : (!llvm.ptr, i32) -> i32
    %2892 = arith.extui %2891 : i32 to i64
    %c65536_i64_1567 = arith.constant 65536 : i64
    %2893 = arith.muli %2892, %c65536_i64_1567 : i64
    %2894 = arith.cmpi ult, %2890, %2893 : i64
    cf.cond_br %2894, ^bb560, ^bb561
  ^bb559:  // pred: ^bb556
    %c1_i32_1568 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1568) : (i32) -> ()
    cf.br ^bb558
  ^bb560:  // 2 preds: ^bb558, ^bb561
    %2895 = llvm.getelementptr %11[%2889] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2896 = llvm.load volatile %2895 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1569 = arith.constant 0 : i64
    %2897 = arith.extui %2885 : i32 to i64
    %2898 = arith.addi %2897, %c0_i64_1569 : i64
    %c8_i64_1570 = arith.constant 8 : i64
    %2899 = arith.addi %2898, %c8_i64_1570 : i64
    %c0_i32_1571 = arith.constant 0 : i32
    %2900 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1571) : (!llvm.ptr, i32) -> i32
    %2901 = arith.extui %2900 : i32 to i64
    %c65536_i64_1572 = arith.constant 65536 : i64
    %2902 = arith.muli %2901, %c65536_i64_1572 : i64
    %2903 = arith.cmpi ult, %2899, %2902 : i64
    cf.cond_br %2903, ^bb562, ^bb563
  ^bb561:  // pred: ^bb558
    %c1_i32_1573 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1573) : (i32) -> ()
    cf.br ^bb560
  ^bb562:  // 2 preds: ^bb560, ^bb563
    %2904 = llvm.getelementptr %11[%2898] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2896, %2904 {alignment = 1 : i64} : i64, !llvm.ptr
    %2905 = llvm.load %3 : !llvm.ptr -> i32
    %c1528_i32_1574 = arith.constant 1528 : i32
    %2906 = arith.addi %2905, %c1528_i32_1574 : i32
    %c16_i32_1575 = arith.constant 16 : i32
    %2907 = arith.addi %2906, %c16_i32_1575 : i32
    %2908 = llvm.load %3 : !llvm.ptr -> i32
    %c1589_i32 = arith.constant 1589 : i32
    %2909 = arith.addi %2908, %c1589_i32 : i32
    %c0_i64_1576 = arith.constant 0 : i64
    %2910 = arith.extui %2909 : i32 to i64
    %2911 = arith.addi %2910, %c0_i64_1576 : i64
    %c4_i64_1577 = arith.constant 4 : i64
    %2912 = arith.addi %2911, %c4_i64_1577 : i64
    %c0_i32_1578 = arith.constant 0 : i32
    %2913 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1578) : (!llvm.ptr, i32) -> i32
    %2914 = arith.extui %2913 : i32 to i64
    %c65536_i64_1579 = arith.constant 65536 : i64
    %2915 = arith.muli %2914, %c65536_i64_1579 : i64
    %2916 = arith.cmpi ult, %2912, %2915 : i64
    cf.cond_br %2916, ^bb564, ^bb565
  ^bb563:  // pred: ^bb560
    %c1_i32_1580 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1580) : (i32) -> ()
    cf.br ^bb562
  ^bb564:  // 2 preds: ^bb562, ^bb565
    %2917 = llvm.getelementptr %11[%2911] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2918 = llvm.load volatile %2917 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_1581 = arith.constant 0 : i64
    %2919 = arith.extui %2907 : i32 to i64
    %2920 = arith.addi %2919, %c0_i64_1581 : i64
    %c4_i64_1582 = arith.constant 4 : i64
    %2921 = arith.addi %2920, %c4_i64_1582 : i64
    %c0_i32_1583 = arith.constant 0 : i32
    %2922 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1583) : (!llvm.ptr, i32) -> i32
    %2923 = arith.extui %2922 : i32 to i64
    %c65536_i64_1584 = arith.constant 65536 : i64
    %2924 = arith.muli %2923, %c65536_i64_1584 : i64
    %2925 = arith.cmpi ult, %2921, %2924 : i64
    cf.cond_br %2925, ^bb566, ^bb567
  ^bb565:  // pred: ^bb562
    %c1_i32_1585 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1585) : (i32) -> ()
    cf.br ^bb564
  ^bb566:  // 2 preds: ^bb564, ^bb567
    %2926 = llvm.getelementptr %11[%2920] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2918, %2926 {alignment = 1 : i64} : i32, !llvm.ptr
    %2927 = llvm.load %3 : !llvm.ptr -> i32
    %2928 = llvm.load %3 : !llvm.ptr -> i32
    %c1553_i64 = arith.constant 1553 : i64
    %2929 = arith.extui %2928 : i32 to i64
    %2930 = arith.addi %2929, %c1553_i64 : i64
    %c8_i64_1586 = arith.constant 8 : i64
    %2931 = arith.addi %2930, %c8_i64_1586 : i64
    %c0_i32_1587 = arith.constant 0 : i32
    %2932 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1587) : (!llvm.ptr, i32) -> i32
    %2933 = arith.extui %2932 : i32 to i64
    %c65536_i64_1588 = arith.constant 65536 : i64
    %2934 = arith.muli %2933, %c65536_i64_1588 : i64
    %2935 = arith.cmpi ult, %2931, %2934 : i64
    cf.cond_br %2935, ^bb568, ^bb569
  ^bb567:  // pred: ^bb564
    %c1_i32_1589 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1589) : (i32) -> ()
    cf.br ^bb566
  ^bb568:  // 2 preds: ^bb566, ^bb569
    %2936 = llvm.getelementptr %11[%2930] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2937 = llvm.load volatile %2936 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c1504_i64 = arith.constant 1504 : i64
    %2938 = arith.extui %2927 : i32 to i64
    %2939 = arith.addi %2938, %c1504_i64 : i64
    %c8_i64_1590 = arith.constant 8 : i64
    %2940 = arith.addi %2939, %c8_i64_1590 : i64
    %c0_i32_1591 = arith.constant 0 : i32
    %2941 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1591) : (!llvm.ptr, i32) -> i32
    %2942 = arith.extui %2941 : i32 to i64
    %c65536_i64_1592 = arith.constant 65536 : i64
    %2943 = arith.muli %2942, %c65536_i64_1592 : i64
    %2944 = arith.cmpi ult, %2940, %2943 : i64
    cf.cond_br %2944, ^bb570, ^bb571
  ^bb569:  // pred: ^bb566
    %c1_i32_1593 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1593) : (i32) -> ()
    cf.br ^bb568
  ^bb570:  // 2 preds: ^bb568, ^bb571
    %2945 = llvm.getelementptr %11[%2939] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2937, %2945 {alignment = 1 : i64} : i64, !llvm.ptr
    %2946 = llvm.load %3 : !llvm.ptr -> i32
    %2947 = llvm.load %3 : !llvm.ptr -> i32
    %c1573_i64 = arith.constant 1573 : i64
    %2948 = arith.extui %2947 : i32 to i64
    %2949 = arith.addi %2948, %c1573_i64 : i64
    %c8_i64_1594 = arith.constant 8 : i64
    %2950 = arith.addi %2949, %c8_i64_1594 : i64
    %c0_i32_1595 = arith.constant 0 : i32
    %2951 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1595) : (!llvm.ptr, i32) -> i32
    %2952 = arith.extui %2951 : i32 to i64
    %c65536_i64_1596 = arith.constant 65536 : i64
    %2953 = arith.muli %2952, %c65536_i64_1596 : i64
    %2954 = arith.cmpi ult, %2950, %2953 : i64
    cf.cond_br %2954, ^bb572, ^bb573
  ^bb571:  // pred: ^bb568
    %c1_i32_1597 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1597) : (i32) -> ()
    cf.br ^bb570
  ^bb572:  // 2 preds: ^bb570, ^bb573
    %2955 = llvm.getelementptr %11[%2949] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2956 = llvm.load volatile %2955 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c1528_i64 = arith.constant 1528 : i64
    %2957 = arith.extui %2946 : i32 to i64
    %2958 = arith.addi %2957, %c1528_i64 : i64
    %c8_i64_1598 = arith.constant 8 : i64
    %2959 = arith.addi %2958, %c8_i64_1598 : i64
    %c0_i32_1599 = arith.constant 0 : i32
    %2960 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1599) : (!llvm.ptr, i32) -> i32
    %2961 = arith.extui %2960 : i32 to i64
    %c65536_i64_1600 = arith.constant 65536 : i64
    %2962 = arith.muli %2961, %c65536_i64_1600 : i64
    %2963 = arith.cmpi ult, %2959, %2962 : i64
    cf.cond_br %2963, ^bb574, ^bb575
  ^bb573:  // pred: ^bb570
    %c1_i32_1601 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1601) : (i32) -> ()
    cf.br ^bb572
  ^bb574:  // 2 preds: ^bb572, ^bb575
    %2964 = llvm.getelementptr %11[%2958] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2956, %2964 {alignment = 1 : i64} : i64, !llvm.ptr
    %2965 = llvm.load %3 : !llvm.ptr -> i32
    %c1320_i32 = arith.constant 1320 : i32
    %2966 = arith.addi %2965, %c1320_i32 : i32
    %2967 = llvm.load %3 : !llvm.ptr -> i32
    %2968 = llvm.load %3 : !llvm.ptr -> i32
    %c1504_i32_1602 = arith.constant 1504 : i32
    %2969 = arith.addi %2968, %c1504_i32_1602 : i32
    %2970 = llvm.load %3 : !llvm.ptr -> i32
    %c1528_i32_1603 = arith.constant 1528 : i32
    %2971 = arith.addi %2970, %c1528_i32_1603 : i32
    call @f21(%arg0, %2966, %2967, %2969, %2971) : (!llvm.ptr, i32, i32, i32, i32) -> ()
    %2972 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_1604 = arith.constant 1552 : i32
    %2973 = arith.addi %2972, %c1552_i32_1604 : i32
    %2974 = llvm.load %3 : !llvm.ptr -> i32
    %c1320_i32_1605 = arith.constant 1320 : i32
    %2975 = arith.addi %2974, %c1320_i32_1605 : i32
    call @f10(%arg0, %2973, %2975) : (!llvm.ptr, i32, i32) -> ()
    %2976 = llvm.load %3 : !llvm.ptr -> i32
    %c532_i32_1606 = arith.constant 532 : i32
    %2977 = arith.addi %2976, %c532_i32_1606 : i32
    %2978 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_1607 = arith.constant 1552 : i32
    %2979 = arith.addi %2978, %c1552_i32_1607 : i32
    %c8_i32_1608 = arith.constant 8 : i32
    %2980 = arith.addi %2979, %c8_i32_1608 : i32
    %c0_i64_1609 = arith.constant 0 : i64
    %2981 = arith.extui %2980 : i32 to i64
    %2982 = arith.addi %2981, %c0_i64_1609 : i64
    %c4_i64_1610 = arith.constant 4 : i64
    %2983 = arith.addi %2982, %c4_i64_1610 : i64
    %c0_i32_1611 = arith.constant 0 : i32
    %2984 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1611) : (!llvm.ptr, i32) -> i32
    %2985 = arith.extui %2984 : i32 to i64
    %c65536_i64_1612 = arith.constant 65536 : i64
    %2986 = arith.muli %2985, %c65536_i64_1612 : i64
    %2987 = arith.cmpi ult, %2983, %2986 : i64
    cf.cond_br %2987, ^bb576, ^bb577
  ^bb575:  // pred: ^bb572
    %c1_i32_1613 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1613) : (i32) -> ()
    cf.br ^bb574
  ^bb576:  // 2 preds: ^bb574, ^bb577
    %2988 = llvm.getelementptr %11[%2982] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2989 = llvm.load volatile %2988 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_1614 = arith.constant 0 : i64
    %2990 = arith.extui %2977 : i32 to i64
    %2991 = arith.addi %2990, %c0_i64_1614 : i64
    %c4_i64_1615 = arith.constant 4 : i64
    %2992 = arith.addi %2991, %c4_i64_1615 : i64
    %c0_i32_1616 = arith.constant 0 : i32
    %2993 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1616) : (!llvm.ptr, i32) -> i32
    %2994 = arith.extui %2993 : i32 to i64
    %c65536_i64_1617 = arith.constant 65536 : i64
    %2995 = arith.muli %2994, %c65536_i64_1617 : i64
    %2996 = arith.cmpi ult, %2992, %2995 : i64
    cf.cond_br %2996, ^bb578, ^bb579
  ^bb577:  // pred: ^bb574
    %c1_i32_1618 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1618) : (i32) -> ()
    cf.br ^bb576
  ^bb578:  // 2 preds: ^bb576, ^bb579
    %2997 = llvm.getelementptr %11[%2991] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2989, %2997 {alignment = 1 : i64} : i32, !llvm.ptr
    %2998 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_1619 = arith.constant 0 : i32
    %c520_i64_1620 = arith.constant 520 : i64
    %2999 = arith.extui %2998 : i32 to i64
    %3000 = arith.addi %2999, %c520_i64_1620 : i64
    %c4_i64_1621 = arith.constant 4 : i64
    %3001 = arith.addi %3000, %c4_i64_1621 : i64
    %c0_i32_1622 = arith.constant 0 : i32
    %3002 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1622) : (!llvm.ptr, i32) -> i32
    %3003 = arith.extui %3002 : i32 to i64
    %c65536_i64_1623 = arith.constant 65536 : i64
    %3004 = arith.muli %3003, %c65536_i64_1623 : i64
    %3005 = arith.cmpi ult, %3001, %3004 : i64
    cf.cond_br %3005, ^bb580, ^bb581
  ^bb579:  // pred: ^bb576
    %c1_i32_1624 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1624) : (i32) -> ()
    cf.br ^bb578
  ^bb580:  // 2 preds: ^bb578, ^bb581
    %3006 = llvm.getelementptr %11[%3000] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_1619, %3006 {alignment = 1 : i64} : i32, !llvm.ptr
    %3007 = llvm.load %3 : !llvm.ptr -> i32
    %3008 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i64_1625 = arith.constant 1552 : i64
    %3009 = arith.extui %3008 : i32 to i64
    %3010 = arith.addi %3009, %c1552_i64_1625 : i64
    %c8_i64_1626 = arith.constant 8 : i64
    %3011 = arith.addi %3010, %c8_i64_1626 : i64
    %c0_i32_1627 = arith.constant 0 : i32
    %3012 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1627) : (!llvm.ptr, i32) -> i32
    %3013 = arith.extui %3012 : i32 to i64
    %c65536_i64_1628 = arith.constant 65536 : i64
    %3014 = arith.muli %3013, %c65536_i64_1628 : i64
    %3015 = arith.cmpi ult, %3011, %3014 : i64
    cf.cond_br %3015, ^bb582, ^bb583
  ^bb581:  // pred: ^bb578
    %c1_i32_1629 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1629) : (i32) -> ()
    cf.br ^bb580
  ^bb582:  // 2 preds: ^bb580, ^bb583
    %3016 = llvm.getelementptr %11[%3010] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %3017 = llvm.load volatile %3016 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c524_i64_1630 = arith.constant 524 : i64
    %3018 = arith.extui %3007 : i32 to i64
    %3019 = arith.addi %3018, %c524_i64_1630 : i64
    %c8_i64_1631 = arith.constant 8 : i64
    %3020 = arith.addi %3019, %c8_i64_1631 : i64
    %c0_i32_1632 = arith.constant 0 : i32
    %3021 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1632) : (!llvm.ptr, i32) -> i32
    %3022 = arith.extui %3021 : i32 to i64
    %c65536_i64_1633 = arith.constant 65536 : i64
    %3023 = arith.muli %3022, %c65536_i64_1633 : i64
    %3024 = arith.cmpi ult, %3020, %3023 : i64
    cf.cond_br %3024, ^bb584, ^bb585
  ^bb583:  // pred: ^bb580
    %c1_i32_1634 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1634) : (i32) -> ()
    cf.br ^bb582
  ^bb584:  // 2 preds: ^bb582, ^bb585
    %3025 = llvm.getelementptr %11[%3019] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %3017, %3025 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb30
  ^bb585:  // pred: ^bb582
    %c1_i32_1635 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1635) : (i32) -> ()
    cf.br ^bb584
  ^bb586:  // 2 preds: ^bb548, ^bb587
    %3026 = llvm.getelementptr %11[%2829] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %3027 = llvm.load volatile %3026 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1636 = arith.constant 0 : i64
    %3028 = arith.extui %2825 : i32 to i64
    %3029 = arith.addi %3028, %c0_i64_1636 : i64
    %c8_i64_1637 = arith.constant 8 : i64
    %3030 = arith.addi %3029, %c8_i64_1637 : i64
    %c0_i32_1638 = arith.constant 0 : i32
    %3031 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1638) : (!llvm.ptr, i32) -> i32
    %3032 = arith.extui %3031 : i32 to i64
    %c65536_i64_1639 = arith.constant 65536 : i64
    %3033 = arith.muli %3032, %c65536_i64_1639 : i64
    %3034 = arith.cmpi ult, %3030, %3033 : i64
    cf.cond_br %3034, ^bb588, ^bb589
  ^bb587:  // pred: ^bb548
    %c1_i32_1640 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1640) : (i32) -> ()
    cf.br ^bb586
  ^bb588:  // 2 preds: ^bb586, ^bb589
    %3035 = llvm.getelementptr %11[%3029] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %3027, %3035 {alignment = 1 : i64} : i64, !llvm.ptr
    %3036 = llvm.load %3 : !llvm.ptr -> i32
    %c1304_i32 = arith.constant 1304 : i32
    %3037 = arith.addi %3036, %c1304_i32 : i32
    %3038 = llvm.load %3 : !llvm.ptr -> i32
    %c1564_i32_1641 = arith.constant 1564 : i32
    %3039 = arith.addi %3038, %c1564_i32_1641 : i32
    %c0_i64_1642 = arith.constant 0 : i64
    %3040 = arith.extui %3039 : i32 to i64
    %3041 = arith.addi %3040, %c0_i64_1642 : i64
    %c8_i64_1643 = arith.constant 8 : i64
    %3042 = arith.addi %3041, %c8_i64_1643 : i64
    %c0_i32_1644 = arith.constant 0 : i32
    %3043 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1644) : (!llvm.ptr, i32) -> i32
    %3044 = arith.extui %3043 : i32 to i64
    %c65536_i64_1645 = arith.constant 65536 : i64
    %3045 = arith.muli %3044, %c65536_i64_1645 : i64
    %3046 = arith.cmpi ult, %3042, %3045 : i64
    cf.cond_br %3046, ^bb590, ^bb591
  ^bb589:  // pred: ^bb586
    %c1_i32_1646 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1646) : (i32) -> ()
    cf.br ^bb588
  ^bb590:  // 2 preds: ^bb588, ^bb591
    %3047 = llvm.getelementptr %11[%3041] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %3048 = llvm.load volatile %3047 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1647 = arith.constant 0 : i64
    %3049 = arith.extui %3037 : i32 to i64
    %3050 = arith.addi %3049, %c0_i64_1647 : i64
    %c8_i64_1648 = arith.constant 8 : i64
    %3051 = arith.addi %3050, %c8_i64_1648 : i64
    %c0_i32_1649 = arith.constant 0 : i32
    %3052 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1649) : (!llvm.ptr, i32) -> i32
    %3053 = arith.extui %3052 : i32 to i64
    %c65536_i64_1650 = arith.constant 65536 : i64
    %3054 = arith.muli %3053, %c65536_i64_1650 : i64
    %3055 = arith.cmpi ult, %3051, %3054 : i64
    cf.cond_br %3055, ^bb592, ^bb593
  ^bb591:  // pred: ^bb588
    %c1_i32_1651 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1651) : (i32) -> ()
    cf.br ^bb590
  ^bb592:  // 2 preds: ^bb590, ^bb593
    %3056 = llvm.getelementptr %11[%3050] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %3048, %3056 {alignment = 1 : i64} : i64, !llvm.ptr
    %3057 = llvm.load %3 : !llvm.ptr -> i32
    %3058 = llvm.load %3 : !llvm.ptr -> i32
    %c1556_i64_1652 = arith.constant 1556 : i64
    %3059 = arith.extui %3058 : i32 to i64
    %3060 = arith.addi %3059, %c1556_i64_1652 : i64
    %c8_i64_1653 = arith.constant 8 : i64
    %3061 = arith.addi %3060, %c8_i64_1653 : i64
    %c0_i32_1654 = arith.constant 0 : i32
    %3062 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1654) : (!llvm.ptr, i32) -> i32
    %3063 = arith.extui %3062 : i32 to i64
    %c65536_i64_1655 = arith.constant 65536 : i64
    %3064 = arith.muli %3063, %c65536_i64_1655 : i64
    %3065 = arith.cmpi ult, %3061, %3064 : i64
    cf.cond_br %3065, ^bb594, ^bb595
  ^bb593:  // pred: ^bb590
    %c1_i32_1656 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1656) : (i32) -> ()
    cf.br ^bb592
  ^bb594:  // 2 preds: ^bb592, ^bb595
    %3066 = llvm.getelementptr %11[%3060] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %3067 = llvm.load volatile %3066 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c1296_i64 = arith.constant 1296 : i64
    %3068 = arith.extui %3057 : i32 to i64
    %3069 = arith.addi %3068, %c1296_i64 : i64
    %c8_i64_1657 = arith.constant 8 : i64
    %3070 = arith.addi %3069, %c8_i64_1657 : i64
    %c0_i32_1658 = arith.constant 0 : i32
    %3071 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1658) : (!llvm.ptr, i32) -> i32
    %3072 = arith.extui %3071 : i32 to i64
    %c65536_i64_1659 = arith.constant 65536 : i64
    %3073 = arith.muli %3072, %c65536_i64_1659 : i64
    %3074 = arith.cmpi ult, %3070, %3073 : i64
    cf.cond_br %3074, ^bb596, ^bb597
  ^bb595:  // pred: ^bb592
    %c1_i32_1660 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1660) : (i32) -> ()
    cf.br ^bb594
  ^bb596:  // 2 preds: ^bb594, ^bb597
    %3075 = llvm.getelementptr %11[%3069] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %3067, %3075 {alignment = 1 : i64} : i64, !llvm.ptr
    %3076 = llvm.load %3 : !llvm.ptr -> i32
    %c1296_i32 = arith.constant 1296 : i32
    %3077 = arith.addi %3076, %c1296_i32 : i32
    call @f63(%arg0, %3077) : (!llvm.ptr, i32) -> ()
    %3078 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_1661 = arith.constant 1 : i64
    %c528_i64_1662 = arith.constant 528 : i64
    %3079 = arith.extui %3078 : i32 to i64
    %3080 = arith.addi %3079, %c528_i64_1662 : i64
    %c8_i64_1663 = arith.constant 8 : i64
    %3081 = arith.addi %3080, %c8_i64_1663 : i64
    %c0_i32_1664 = arith.constant 0 : i32
    %3082 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1664) : (!llvm.ptr, i32) -> i32
    %3083 = arith.extui %3082 : i32 to i64
    %c65536_i64_1665 = arith.constant 65536 : i64
    %3084 = arith.muli %3083, %c65536_i64_1665 : i64
    %3085 = arith.cmpi ult, %3081, %3084 : i64
    cf.cond_br %3085, ^bb598, ^bb599
  ^bb597:  // pred: ^bb594
    %c1_i32_1666 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1666) : (i32) -> ()
    cf.br ^bb596
  ^bb598:  // 2 preds: ^bb596, ^bb599
    %3086 = llvm.getelementptr %11[%3080] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_1661, %3086 {alignment = 1 : i64} : i64, !llvm.ptr
    %3087 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_1667 = arith.constant 1 : i64
    %c520_i64_1668 = arith.constant 520 : i64
    %3088 = arith.extui %3087 : i32 to i64
    %3089 = arith.addi %3088, %c520_i64_1668 : i64
    %c8_i64_1669 = arith.constant 8 : i64
    %3090 = arith.addi %3089, %c8_i64_1669 : i64
    %c0_i32_1670 = arith.constant 0 : i32
    %3091 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1670) : (!llvm.ptr, i32) -> i32
    %3092 = arith.extui %3091 : i32 to i64
    %c65536_i64_1671 = arith.constant 65536 : i64
    %3093 = arith.muli %3092, %c65536_i64_1671 : i64
    %3094 = arith.cmpi ult, %3090, %3093 : i64
    cf.cond_br %3094, ^bb600, ^bb601
  ^bb599:  // pred: ^bb596
    %c1_i32_1672 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1672) : (i32) -> ()
    cf.br ^bb598
  ^bb600:  // 2 preds: ^bb598, ^bb601
    %3095 = llvm.getelementptr %11[%3089] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_1667, %3095 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb30
  ^bb601:  // pred: ^bb598
    %c1_i32_1673 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1673) : (i32) -> ()
    cf.br ^bb600
  ^bb602:  // pred: ^bb34
    %3096 = llvm.load %3 : !llvm.ptr -> i32
    %c-2147483648_i32_1674 = arith.constant -2147483648 : i32
    %c656_i64_1675 = arith.constant 656 : i64
    %3097 = arith.extui %3096 : i32 to i64
    %3098 = arith.addi %3097, %c656_i64_1675 : i64
    %c4_i64_1676 = arith.constant 4 : i64
    %3099 = arith.addi %3098, %c4_i64_1676 : i64
    %c0_i32_1677 = arith.constant 0 : i32
    %3100 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1677) : (!llvm.ptr, i32) -> i32
    %3101 = arith.extui %3100 : i32 to i64
    %c65536_i64_1678 = arith.constant 65536 : i64
    %3102 = arith.muli %3101, %c65536_i64_1678 : i64
    %3103 = arith.cmpi ult, %3099, %3102 : i64
    cf.cond_br %3103, ^bb610, ^bb611
  ^bb603:  // pred: ^bb34
    %3104 = llvm.load %3 : !llvm.ptr -> i32
    %c156_i32 = arith.constant 156 : i32
    %3105 = arith.addi %3104, %c156_i32 : i32
    %c0_i32_1679 = arith.constant 0 : i32
    %c0_i64_1680 = arith.constant 0 : i64
    %3106 = arith.extui %3105 : i32 to i64
    %3107 = arith.addi %3106, %c0_i64_1680 : i64
    %c4_i64_1681 = arith.constant 4 : i64
    %3108 = arith.addi %3107, %c4_i64_1681 : i64
    %c0_i32_1682 = arith.constant 0 : i32
    %3109 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1682) : (!llvm.ptr, i32) -> i32
    %3110 = arith.extui %3109 : i32 to i64
    %c65536_i64_1683 = arith.constant 65536 : i64
    %3111 = arith.muli %3110, %c65536_i64_1683 : i64
    %3112 = arith.cmpi ult, %3108, %3111 : i64
    cf.cond_br %3112, ^bb604, ^bb605
  ^bb604:  // 2 preds: ^bb603, ^bb605
    %3113 = llvm.getelementptr %11[%3107] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_1679, %3113 {alignment = 1 : i64} : i32, !llvm.ptr
    %3114 = llvm.load %3 : !llvm.ptr -> i32
    %c4294967296_i64_1684 = arith.constant 4294967296 : i64
    %c148_i64 = arith.constant 148 : i64
    %3115 = arith.extui %3114 : i32 to i64
    %3116 = arith.addi %3115, %c148_i64 : i64
    %c8_i64_1685 = arith.constant 8 : i64
    %3117 = arith.addi %3116, %c8_i64_1685 : i64
    %c0_i32_1686 = arith.constant 0 : i32
    %3118 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1686) : (!llvm.ptr, i32) -> i32
    %3119 = arith.extui %3118 : i32 to i64
    %c65536_i64_1687 = arith.constant 65536 : i64
    %3120 = arith.muli %3119, %c65536_i64_1687 : i64
    %3121 = arith.cmpi ult, %3117, %3120 : i64
    cf.cond_br %3121, ^bb606, ^bb607
  ^bb605:  // pred: ^bb603
    %c1_i32_1688 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1688) : (i32) -> ()
    cf.br ^bb604
  ^bb606:  // 2 preds: ^bb604, ^bb607
    %3122 = llvm.getelementptr %11[%3116] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4294967296_i64_1684, %3122 {alignment = 1 : i64} : i64, !llvm.ptr
    %3123 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_1689 = arith.constant 1 : i32
    %c144_i64_1690 = arith.constant 144 : i64
    %3124 = arith.extui %3123 : i32 to i64
    %3125 = arith.addi %3124, %c144_i64_1690 : i64
    %c4_i64_1691 = arith.constant 4 : i64
    %3126 = arith.addi %3125, %c4_i64_1691 : i64
    %c0_i32_1692 = arith.constant 0 : i32
    %3127 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1692) : (!llvm.ptr, i32) -> i32
    %3128 = arith.extui %3127 : i32 to i64
    %c65536_i64_1693 = arith.constant 65536 : i64
    %3129 = arith.muli %3128, %c65536_i64_1693 : i64
    %3130 = arith.cmpi ult, %3126, %3129 : i64
    cf.cond_br %3130, ^bb608, ^bb609
  ^bb607:  // pred: ^bb604
    %c1_i32_1694 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1694) : (i32) -> ()
    cf.br ^bb606
  ^bb608:  // 2 preds: ^bb606, ^bb609
    %3131 = llvm.getelementptr %11[%3125] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_1689, %3131 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb29
  ^bb609:  // pred: ^bb606
    %c1_i32_1695 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1695) : (i32) -> ()
    cf.br ^bb608
  ^bb610:  // 2 preds: ^bb602, ^bb611
    %3132 = llvm.getelementptr %11[%3098] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-2147483648_i32_1674, %3132 {alignment = 1 : i64} : i32, !llvm.ptr
    %3133 = llvm.load %3 : !llvm.ptr -> i32
    %c656_i32_1696 = arith.constant 656 : i32
    %3134 = arith.addi %3133, %c656_i32_1696 : i32
    call @f4(%arg0, %3134) : (!llvm.ptr, i32) -> ()
    %3135 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_1697 = arith.constant 1552 : i32
    %3136 = arith.addi %3135, %c1552_i32_1697 : i32
    %3137 = llvm.load %5 : !llvm.ptr -> i32
    %3138 = llvm.load %4 : !llvm.ptr -> i32
    call @f22(%arg0, %3136, %3137, %3138) : (!llvm.ptr, i32, i32, i32) -> ()
    %3139 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i64_1698 = arith.constant 1552 : i64
    %3140 = arith.extui %3139 : i32 to i64
    %3141 = arith.addi %3140, %c1552_i64_1698 : i64
    %c4_i64_1699 = arith.constant 4 : i64
    %3142 = arith.addi %3141, %c4_i64_1699 : i64
    %c0_i32_1700 = arith.constant 0 : i32
    %3143 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1700) : (!llvm.ptr, i32) -> i32
    %3144 = arith.extui %3143 : i32 to i64
    %c65536_i64_1701 = arith.constant 65536 : i64
    %3145 = arith.muli %3144, %c65536_i64_1701 : i64
    %3146 = arith.cmpi ult, %3142, %3145 : i64
    cf.cond_br %3146, ^bb613, ^bb614
  ^bb611:  // pred: ^bb602
    %c1_i32_1702 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1702) : (i32) -> ()
    cf.br ^bb610
  ^bb612:  // pred: ^bb613
    %3147 = llvm.load %3 : !llvm.ptr -> i32
    %c176_i32 = arith.constant 176 : i32
    %3148 = arith.addi %3147, %c176_i32 : i32
    %3149 = llvm.load %3 : !llvm.ptr -> i32
    %c1572_i32_1703 = arith.constant 1572 : i32
    %3150 = arith.addi %3149, %c1572_i32_1703 : i32
    %c0_i64_1704 = arith.constant 0 : i64
    %3151 = arith.extui %3150 : i32 to i64
    %3152 = arith.addi %3151, %c0_i64_1704 : i64
    %c8_i64_1705 = arith.constant 8 : i64
    %3153 = arith.addi %3152, %c8_i64_1705 : i64
    %c0_i32_1706 = arith.constant 0 : i32
    %3154 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1706) : (!llvm.ptr, i32) -> i32
    %3155 = arith.extui %3154 : i32 to i64
    %c65536_i64_1707 = arith.constant 65536 : i64
    %3156 = arith.muli %3155, %c65536_i64_1707 : i64
    %3157 = arith.cmpi ult, %3153, %3156 : i64
    cf.cond_br %3157, ^bb647, ^bb648
  ^bb613:  // 2 preds: ^bb610, ^bb614
    %3158 = llvm.getelementptr %11[%3141] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %3159 = llvm.load volatile %3158 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_1708 = arith.constant 0 : i32
    %3160 = arith.cmpi ne, %3159, %c0_i32_1708 : i32
    cf.cond_br %3160, ^bb612, ^bb615
  ^bb614:  // pred: ^bb610
    %c1_i32_1709 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1709) : (i32) -> ()
    cf.br ^bb613
  ^bb615:  // pred: ^bb613
    %3161 = llvm.load %3 : !llvm.ptr -> i32
    %c536_i32 = arith.constant 536 : i32
    %3162 = arith.addi %3161, %c536_i32 : i32
    %c24_i32_1710 = arith.constant 24 : i32
    %3163 = arith.addi %3162, %c24_i32_1710 : i32
    %3164 = llvm.load %3 : !llvm.ptr -> i32
    %c1584_i32 = arith.constant 1584 : i32
    %3165 = arith.addi %3164, %c1584_i32 : i32
    %c0_i64_1711 = arith.constant 0 : i64
    %3166 = arith.extui %3165 : i32 to i64
    %3167 = arith.addi %3166, %c0_i64_1711 : i64
    %c8_i64_1712 = arith.constant 8 : i64
    %3168 = arith.addi %3167, %c8_i64_1712 : i64
    %c0_i32_1713 = arith.constant 0 : i32
    %3169 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1713) : (!llvm.ptr, i32) -> i32
    %3170 = arith.extui %3169 : i32 to i64
    %c65536_i64_1714 = arith.constant 65536 : i64
    %3171 = arith.muli %3170, %c65536_i64_1714 : i64
    %3172 = arith.cmpi ult, %3168, %3171 : i64
    cf.cond_br %3172, ^bb616, ^bb617
  ^bb616:  // 2 preds: ^bb615, ^bb617
    %3173 = llvm.getelementptr %11[%3167] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %3174 = llvm.load volatile %3173 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1715 = arith.constant 0 : i64
    %3175 = arith.extui %3163 : i32 to i64
    %3176 = arith.addi %3175, %c0_i64_1715 : i64
    %c8_i64_1716 = arith.constant 8 : i64
    %3177 = arith.addi %3176, %c8_i64_1716 : i64
    %c0_i32_1717 = arith.constant 0 : i32
    %3178 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1717) : (!llvm.ptr, i32) -> i32
    %3179 = arith.extui %3178 : i32 to i64
    %c65536_i64_1718 = arith.constant 65536 : i64
    %3180 = arith.muli %3179, %c65536_i64_1718 : i64
    %3181 = arith.cmpi ult, %3177, %3180 : i64
    cf.cond_br %3181, ^bb618, ^bb619
  ^bb617:  // pred: ^bb615
    %c1_i32_1719 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1719) : (i32) -> ()
    cf.br ^bb616
  ^bb618:  // 2 preds: ^bb616, ^bb619
    %3182 = llvm.getelementptr %11[%3176] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %3174, %3182 {alignment = 1 : i64} : i64, !llvm.ptr
    %3183 = llvm.load %3 : !llvm.ptr -> i32
    %c536_i32_1720 = arith.constant 536 : i32
    %3184 = arith.addi %3183, %c536_i32_1720 : i32
    %c16_i32_1721 = arith.constant 16 : i32
    %3185 = arith.addi %3184, %c16_i32_1721 : i32
    %3186 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_1722 = arith.constant 1552 : i32
    %3187 = arith.addi %3186, %c1552_i32_1722 : i32
    %c24_i32_1723 = arith.constant 24 : i32
    %3188 = arith.addi %3187, %c24_i32_1723 : i32
    %c0_i64_1724 = arith.constant 0 : i64
    %3189 = arith.extui %3188 : i32 to i64
    %3190 = arith.addi %3189, %c0_i64_1724 : i64
    %c8_i64_1725 = arith.constant 8 : i64
    %3191 = arith.addi %3190, %c8_i64_1725 : i64
    %c0_i32_1726 = arith.constant 0 : i32
    %3192 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1726) : (!llvm.ptr, i32) -> i32
    %3193 = arith.extui %3192 : i32 to i64
    %c65536_i64_1727 = arith.constant 65536 : i64
    %3194 = arith.muli %3193, %c65536_i64_1727 : i64
    %3195 = arith.cmpi ult, %3191, %3194 : i64
    cf.cond_br %3195, ^bb620, ^bb621
  ^bb619:  // pred: ^bb616
    %c1_i32_1728 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1728) : (i32) -> ()
    cf.br ^bb618
  ^bb620:  // 2 preds: ^bb618, ^bb621
    %3196 = llvm.getelementptr %11[%3190] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %3197 = llvm.load volatile %3196 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1729 = arith.constant 0 : i64
    %3198 = arith.extui %3185 : i32 to i64
    %3199 = arith.addi %3198, %c0_i64_1729 : i64
    %c8_i64_1730 = arith.constant 8 : i64
    %3200 = arith.addi %3199, %c8_i64_1730 : i64
    %c0_i32_1731 = arith.constant 0 : i32
    %3201 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1731) : (!llvm.ptr, i32) -> i32
    %3202 = arith.extui %3201 : i32 to i64
    %c65536_i64_1732 = arith.constant 65536 : i64
    %3203 = arith.muli %3202, %c65536_i64_1732 : i64
    %3204 = arith.cmpi ult, %3200, %3203 : i64
    cf.cond_br %3204, ^bb622, ^bb623
  ^bb621:  // pred: ^bb618
    %c1_i32_1733 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1733) : (i32) -> ()
    cf.br ^bb620
  ^bb622:  // 2 preds: ^bb620, ^bb623
    %3205 = llvm.getelementptr %11[%3199] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %3197, %3205 {alignment = 1 : i64} : i64, !llvm.ptr
    %3206 = llvm.load %3 : !llvm.ptr -> i32
    %c544_i32 = arith.constant 544 : i32
    %3207 = arith.addi %3206, %c544_i32 : i32
    %3208 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_1734 = arith.constant 1552 : i32
    %3209 = arith.addi %3208, %c1552_i32_1734 : i32
    %c16_i32_1735 = arith.constant 16 : i32
    %3210 = arith.addi %3209, %c16_i32_1735 : i32
    %c0_i64_1736 = arith.constant 0 : i64
    %3211 = arith.extui %3210 : i32 to i64
    %3212 = arith.addi %3211, %c0_i64_1736 : i64
    %c8_i64_1737 = arith.constant 8 : i64
    %3213 = arith.addi %3212, %c8_i64_1737 : i64
    %c0_i32_1738 = arith.constant 0 : i32
    %3214 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1738) : (!llvm.ptr, i32) -> i32
    %3215 = arith.extui %3214 : i32 to i64
    %c65536_i64_1739 = arith.constant 65536 : i64
    %3216 = arith.muli %3215, %c65536_i64_1739 : i64
    %3217 = arith.cmpi ult, %3213, %3216 : i64
    cf.cond_br %3217, ^bb624, ^bb625
  ^bb623:  // pred: ^bb620
    %c1_i32_1740 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1740) : (i32) -> ()
    cf.br ^bb622
  ^bb624:  // 2 preds: ^bb622, ^bb625
    %3218 = llvm.getelementptr %11[%3212] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %3219 = llvm.load volatile %3218 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1741 = arith.constant 0 : i64
    %3220 = arith.extui %3207 : i32 to i64
    %3221 = arith.addi %3220, %c0_i64_1741 : i64
    %c8_i64_1742 = arith.constant 8 : i64
    %3222 = arith.addi %3221, %c8_i64_1742 : i64
    %c0_i32_1743 = arith.constant 0 : i32
    %3223 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1743) : (!llvm.ptr, i32) -> i32
    %3224 = arith.extui %3223 : i32 to i64
    %c65536_i64_1744 = arith.constant 65536 : i64
    %3225 = arith.muli %3224, %c65536_i64_1744 : i64
    %3226 = arith.cmpi ult, %3222, %3225 : i64
    cf.cond_br %3226, ^bb626, ^bb627
  ^bb625:  // pred: ^bb622
    %c1_i32_1745 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1745) : (i32) -> ()
    cf.br ^bb624
  ^bb626:  // 2 preds: ^bb624, ^bb627
    %3227 = llvm.getelementptr %11[%3221] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %3219, %3227 {alignment = 1 : i64} : i64, !llvm.ptr
    %3228 = llvm.load %3 : !llvm.ptr -> i32
    %3229 = llvm.load %3 : !llvm.ptr -> i32
    %c1560_i64_1746 = arith.constant 1560 : i64
    %3230 = arith.extui %3229 : i32 to i64
    %3231 = arith.addi %3230, %c1560_i64_1746 : i64
    %c8_i64_1747 = arith.constant 8 : i64
    %3232 = arith.addi %3231, %c8_i64_1747 : i64
    %c0_i32_1748 = arith.constant 0 : i32
    %3233 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1748) : (!llvm.ptr, i32) -> i32
    %3234 = arith.extui %3233 : i32 to i64
    %c65536_i64_1749 = arith.constant 65536 : i64
    %3235 = arith.muli %3234, %c65536_i64_1749 : i64
    %3236 = arith.cmpi ult, %3232, %3235 : i64
    cf.cond_br %3236, ^bb628, ^bb629
  ^bb627:  // pred: ^bb624
    %c1_i32_1750 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1750) : (i32) -> ()
    cf.br ^bb626
  ^bb628:  // 2 preds: ^bb626, ^bb629
    %3237 = llvm.getelementptr %11[%3231] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %3238 = llvm.load volatile %3237 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c536_i64 = arith.constant 536 : i64
    %3239 = arith.extui %3228 : i32 to i64
    %3240 = arith.addi %3239, %c536_i64 : i64
    %c8_i64_1751 = arith.constant 8 : i64
    %3241 = arith.addi %3240, %c8_i64_1751 : i64
    %c0_i32_1752 = arith.constant 0 : i32
    %3242 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1752) : (!llvm.ptr, i32) -> i32
    %3243 = arith.extui %3242 : i32 to i64
    %c65536_i64_1753 = arith.constant 65536 : i64
    %3244 = arith.muli %3243, %c65536_i64_1753 : i64
    %3245 = arith.cmpi ult, %3241, %3244 : i64
    cf.cond_br %3245, ^bb630, ^bb631
  ^bb629:  // pred: ^bb626
    %c1_i32_1754 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1754) : (i32) -> ()
    cf.br ^bb628
  ^bb630:  // 2 preds: ^bb628, ^bb631
    %3246 = llvm.getelementptr %11[%3240] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %3238, %3246 {alignment = 1 : i64} : i64, !llvm.ptr
    %3247 = llvm.load %3 : !llvm.ptr -> i32
    %c184_i32 = arith.constant 184 : i32
    %3248 = arith.addi %3247, %c184_i32 : i32
    %3249 = llvm.load %3 : !llvm.ptr -> i32
    %3250 = llvm.load %3 : !llvm.ptr -> i32
    %c536_i32_1755 = arith.constant 536 : i32
    %3251 = arith.addi %3250, %c536_i32_1755 : i32
    call @f23(%arg0, %3248, %3249, %3251) : (!llvm.ptr, i32, i32, i32) -> ()
    %3252 = llvm.load %3 : !llvm.ptr -> i32
    %c184_i64 = arith.constant 184 : i64
    %3253 = arith.extui %3252 : i32 to i64
    %3254 = arith.addi %3253, %c184_i64 : i64
    %c8_i64_1756 = arith.constant 8 : i64
    %3255 = arith.addi %3254, %c8_i64_1756 : i64
    %c0_i32_1757 = arith.constant 0 : i32
    %3256 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1757) : (!llvm.ptr, i32) -> i32
    %3257 = arith.extui %3256 : i32 to i64
    %c65536_i64_1758 = arith.constant 65536 : i64
    %3258 = arith.muli %3257, %c65536_i64_1758 : i64
    %3259 = arith.cmpi ult, %3255, %3258 : i64
    cf.cond_br %3259, ^bb634, ^bb635
  ^bb631:  // pred: ^bb628
    %c1_i32_1759 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1759) : (i32) -> ()
    cf.br ^bb630
  ^bb632:  // 2 preds: ^bb633, ^bb636
    %3260 = llvm.load %3 : !llvm.ptr -> i32
    %c156_i32_1760 = arith.constant 156 : i32
    %3261 = arith.addi %3260, %c156_i32_1760 : i32
    %3262 = llvm.load %3 : !llvm.ptr -> i32
    %c1560_i32_1761 = arith.constant 1560 : i32
    %3263 = arith.addi %3262, %c1560_i32_1761 : i32
    %c0_i64_1762 = arith.constant 0 : i64
    %3264 = arith.extui %3263 : i32 to i64
    %3265 = arith.addi %3264, %c0_i64_1762 : i64
    %c4_i64_1763 = arith.constant 4 : i64
    %3266 = arith.addi %3265, %c4_i64_1763 : i64
    %c0_i32_1764 = arith.constant 0 : i32
    %3267 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1764) : (!llvm.ptr, i32) -> i32
    %3268 = arith.extui %3267 : i32 to i64
    %c65536_i64_1765 = arith.constant 65536 : i64
    %3269 = arith.muli %3268, %c65536_i64_1765 : i64
    %3270 = arith.cmpi ult, %3266, %3269 : i64
    cf.cond_br %3270, ^bb637, ^bb638
  ^bb633:  // pred: ^bb634
    %3271 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_1766 = arith.constant 1552 : i32
    %3272 = arith.addi %3271, %c1552_i32_1766 : i32
    %3273 = llvm.load %3 : !llvm.ptr -> i32
    %c184_i32_1767 = arith.constant 184 : i32
    %3274 = arith.addi %3273, %c184_i32_1767 : i32
    call @f16(%arg0, %3272, %3274) : (!llvm.ptr, i32, i32) -> ()
    %c1_i32_1768 = arith.constant 1 : i32
    llvm.store %c1_i32_1768, %2 : i32, !llvm.ptr
    cf.br ^bb632
  ^bb634:  // 2 preds: ^bb630, ^bb635
    %3275 = llvm.getelementptr %11[%3254] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %3276 = llvm.load volatile %3275 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c2_i64_1769 = arith.constant 2 : i64
    %3277 = arith.cmpi eq, %3276, %c2_i64_1769 : i64
    %3278 = arith.extui %3277 : i1 to i32
    %c0_i32_1770 = arith.constant 0 : i32
    %3279 = arith.cmpi eq, %3278, %c0_i32_1770 : i32
    %3280 = arith.extui %3279 : i1 to i32
    %c0_i32_1771 = arith.constant 0 : i32
    %3281 = arith.cmpi ne, %3280, %c0_i32_1771 : i32
    cf.cond_br %3281, ^bb633, ^bb636
  ^bb635:  // pred: ^bb630
    %c1_i32_1772 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1772) : (i32) -> ()
    cf.br ^bb634
  ^bb636:  // pred: ^bb634
    %3282 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_1773 = arith.constant 1552 : i32
    %3283 = arith.addi %3282, %c1552_i32_1773 : i32
    call @f24(%arg0, %3283) : (!llvm.ptr, i32) -> ()
    %c0_i32_1774 = arith.constant 0 : i32
    llvm.store %c0_i32_1774, %2 : i32, !llvm.ptr
    cf.br ^bb632
  ^bb637:  // 2 preds: ^bb632, ^bb638
    %3284 = llvm.getelementptr %11[%3265] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %3285 = llvm.load volatile %3284 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_1775 = arith.constant 0 : i64
    %3286 = arith.extui %3261 : i32 to i64
    %3287 = arith.addi %3286, %c0_i64_1775 : i64
    %c4_i64_1776 = arith.constant 4 : i64
    %3288 = arith.addi %3287, %c4_i64_1776 : i64
    %c0_i32_1777 = arith.constant 0 : i32
    %3289 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1777) : (!llvm.ptr, i32) -> i32
    %3290 = arith.extui %3289 : i32 to i64
    %c65536_i64_1778 = arith.constant 65536 : i64
    %3291 = arith.muli %3290, %c65536_i64_1778 : i64
    %3292 = arith.cmpi ult, %3288, %3291 : i64
    cf.cond_br %3292, ^bb639, ^bb640
  ^bb638:  // pred: ^bb632
    %c1_i32_1779 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1779) : (i32) -> ()
    cf.br ^bb637
  ^bb639:  // 2 preds: ^bb637, ^bb640
    %3293 = llvm.getelementptr %11[%3287] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %3285, %3293 {alignment = 1 : i64} : i32, !llvm.ptr
    %3294 = llvm.load %3 : !llvm.ptr -> i32
    %3295 = llvm.load %2 : !llvm.ptr -> i32
    %c144_i64_1780 = arith.constant 144 : i64
    %3296 = arith.extui %3294 : i32 to i64
    %3297 = arith.addi %3296, %c144_i64_1780 : i64
    %c4_i64_1781 = arith.constant 4 : i64
    %3298 = arith.addi %3297, %c4_i64_1781 : i64
    %c0_i32_1782 = arith.constant 0 : i32
    %3299 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1782) : (!llvm.ptr, i32) -> i32
    %3300 = arith.extui %3299 : i32 to i64
    %c65536_i64_1783 = arith.constant 65536 : i64
    %3301 = arith.muli %3300, %c65536_i64_1783 : i64
    %3302 = arith.cmpi ult, %3298, %3301 : i64
    cf.cond_br %3302, ^bb641, ^bb642
  ^bb640:  // pred: ^bb637
    %c1_i32_1784 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1784) : (i32) -> ()
    cf.br ^bb639
  ^bb641:  // 2 preds: ^bb639, ^bb642
    %3303 = llvm.getelementptr %11[%3297] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %3295, %3303 {alignment = 1 : i64} : i32, !llvm.ptr
    %3304 = llvm.load %3 : !llvm.ptr -> i32
    %3305 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i64_1785 = arith.constant 1552 : i64
    %3306 = arith.extui %3305 : i32 to i64
    %3307 = arith.addi %3306, %c1552_i64_1785 : i64
    %c8_i64_1786 = arith.constant 8 : i64
    %3308 = arith.addi %3307, %c8_i64_1786 : i64
    %c0_i32_1787 = arith.constant 0 : i32
    %3309 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1787) : (!llvm.ptr, i32) -> i32
    %3310 = arith.extui %3309 : i32 to i64
    %c65536_i64_1788 = arith.constant 65536 : i64
    %3311 = arith.muli %3310, %c65536_i64_1788 : i64
    %3312 = arith.cmpi ult, %3308, %3311 : i64
    cf.cond_br %3312, ^bb643, ^bb644
  ^bb642:  // pred: ^bb639
    %c1_i32_1789 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1789) : (i32) -> ()
    cf.br ^bb641
  ^bb643:  // 2 preds: ^bb641, ^bb644
    %3313 = llvm.getelementptr %11[%3307] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %3314 = llvm.load volatile %3313 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c148_i64_1790 = arith.constant 148 : i64
    %3315 = arith.extui %3304 : i32 to i64
    %3316 = arith.addi %3315, %c148_i64_1790 : i64
    %c8_i64_1791 = arith.constant 8 : i64
    %3317 = arith.addi %3316, %c8_i64_1791 : i64
    %c0_i32_1792 = arith.constant 0 : i32
    %3318 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1792) : (!llvm.ptr, i32) -> i32
    %3319 = arith.extui %3318 : i32 to i64
    %c65536_i64_1793 = arith.constant 65536 : i64
    %3320 = arith.muli %3319, %c65536_i64_1793 : i64
    %3321 = arith.cmpi ult, %3317, %3320 : i64
    cf.cond_br %3321, ^bb645, ^bb646
  ^bb644:  // pred: ^bb641
    %c1_i32_1794 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1794) : (i32) -> ()
    cf.br ^bb643
  ^bb645:  // 2 preds: ^bb643, ^bb646
    %3322 = llvm.getelementptr %11[%3316] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %3314, %3322 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb29
  ^bb646:  // pred: ^bb643
    %c1_i32_1795 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1795) : (i32) -> ()
    cf.br ^bb645
  ^bb647:  // 2 preds: ^bb612, ^bb648
    %3323 = llvm.getelementptr %11[%3152] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %3324 = llvm.load volatile %3323 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1796 = arith.constant 0 : i64
    %3325 = arith.extui %3148 : i32 to i64
    %3326 = arith.addi %3325, %c0_i64_1796 : i64
    %c8_i64_1797 = arith.constant 8 : i64
    %3327 = arith.addi %3326, %c8_i64_1797 : i64
    %c0_i32_1798 = arith.constant 0 : i32
    %3328 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1798) : (!llvm.ptr, i32) -> i32
    %3329 = arith.extui %3328 : i32 to i64
    %c65536_i64_1799 = arith.constant 65536 : i64
    %3330 = arith.muli %3329, %c65536_i64_1799 : i64
    %3331 = arith.cmpi ult, %3327, %3330 : i64
    cf.cond_br %3331, ^bb649, ^bb650
  ^bb648:  // pred: ^bb612
    %c1_i32_1800 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1800) : (i32) -> ()
    cf.br ^bb647
  ^bb649:  // 2 preds: ^bb647, ^bb650
    %3332 = llvm.getelementptr %11[%3326] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %3324, %3332 {alignment = 1 : i64} : i64, !llvm.ptr
    %3333 = llvm.load %3 : !llvm.ptr -> i32
    %c168_i32 = arith.constant 168 : i32
    %3334 = arith.addi %3333, %c168_i32 : i32
    %3335 = llvm.load %3 : !llvm.ptr -> i32
    %c1564_i32_1801 = arith.constant 1564 : i32
    %3336 = arith.addi %3335, %c1564_i32_1801 : i32
    %c0_i64_1802 = arith.constant 0 : i64
    %3337 = arith.extui %3336 : i32 to i64
    %3338 = arith.addi %3337, %c0_i64_1802 : i64
    %c8_i64_1803 = arith.constant 8 : i64
    %3339 = arith.addi %3338, %c8_i64_1803 : i64
    %c0_i32_1804 = arith.constant 0 : i32
    %3340 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1804) : (!llvm.ptr, i32) -> i32
    %3341 = arith.extui %3340 : i32 to i64
    %c65536_i64_1805 = arith.constant 65536 : i64
    %3342 = arith.muli %3341, %c65536_i64_1805 : i64
    %3343 = arith.cmpi ult, %3339, %3342 : i64
    cf.cond_br %3343, ^bb651, ^bb652
  ^bb650:  // pred: ^bb647
    %c1_i32_1806 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1806) : (i32) -> ()
    cf.br ^bb649
  ^bb651:  // 2 preds: ^bb649, ^bb652
    %3344 = llvm.getelementptr %11[%3338] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %3345 = llvm.load volatile %3344 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1807 = arith.constant 0 : i64
    %3346 = arith.extui %3334 : i32 to i64
    %3347 = arith.addi %3346, %c0_i64_1807 : i64
    %c8_i64_1808 = arith.constant 8 : i64
    %3348 = arith.addi %3347, %c8_i64_1808 : i64
    %c0_i32_1809 = arith.constant 0 : i32
    %3349 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1809) : (!llvm.ptr, i32) -> i32
    %3350 = arith.extui %3349 : i32 to i64
    %c65536_i64_1810 = arith.constant 65536 : i64
    %3351 = arith.muli %3350, %c65536_i64_1810 : i64
    %3352 = arith.cmpi ult, %3348, %3351 : i64
    cf.cond_br %3352, ^bb653, ^bb654
  ^bb652:  // pred: ^bb649
    %c1_i32_1811 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1811) : (i32) -> ()
    cf.br ^bb651
  ^bb653:  // 2 preds: ^bb651, ^bb654
    %3353 = llvm.getelementptr %11[%3347] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %3345, %3353 {alignment = 1 : i64} : i64, !llvm.ptr
    %3354 = llvm.load %3 : !llvm.ptr -> i32
    %3355 = llvm.load %3 : !llvm.ptr -> i32
    %c1556_i64_1812 = arith.constant 1556 : i64
    %3356 = arith.extui %3355 : i32 to i64
    %3357 = arith.addi %3356, %c1556_i64_1812 : i64
    %c8_i64_1813 = arith.constant 8 : i64
    %3358 = arith.addi %3357, %c8_i64_1813 : i64
    %c0_i32_1814 = arith.constant 0 : i32
    %3359 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1814) : (!llvm.ptr, i32) -> i32
    %3360 = arith.extui %3359 : i32 to i64
    %c65536_i64_1815 = arith.constant 65536 : i64
    %3361 = arith.muli %3360, %c65536_i64_1815 : i64
    %3362 = arith.cmpi ult, %3358, %3361 : i64
    cf.cond_br %3362, ^bb655, ^bb656
  ^bb654:  // pred: ^bb651
    %c1_i32_1816 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1816) : (i32) -> ()
    cf.br ^bb653
  ^bb655:  // 2 preds: ^bb653, ^bb656
    %3363 = llvm.getelementptr %11[%3357] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %3364 = llvm.load volatile %3363 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c160_i64 = arith.constant 160 : i64
    %3365 = arith.extui %3354 : i32 to i64
    %3366 = arith.addi %3365, %c160_i64 : i64
    %c8_i64_1817 = arith.constant 8 : i64
    %3367 = arith.addi %3366, %c8_i64_1817 : i64
    %c0_i32_1818 = arith.constant 0 : i32
    %3368 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1818) : (!llvm.ptr, i32) -> i32
    %3369 = arith.extui %3368 : i32 to i64
    %c65536_i64_1819 = arith.constant 65536 : i64
    %3370 = arith.muli %3369, %c65536_i64_1819 : i64
    %3371 = arith.cmpi ult, %3367, %3370 : i64
    cf.cond_br %3371, ^bb657, ^bb658
  ^bb656:  // pred: ^bb653
    %c1_i32_1820 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1820) : (i32) -> ()
    cf.br ^bb655
  ^bb657:  // 2 preds: ^bb655, ^bb658
    %3372 = llvm.getelementptr %11[%3366] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %3364, %3372 {alignment = 1 : i64} : i64, !llvm.ptr
    %3373 = llvm.load %3 : !llvm.ptr -> i32
    %c160_i32 = arith.constant 160 : i32
    %3374 = arith.addi %3373, %c160_i32 : i32
    call @f63(%arg0, %3374) : (!llvm.ptr, i32) -> ()
    %3375 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_1821 = arith.constant 1 : i64
    %c152_i64 = arith.constant 152 : i64
    %3376 = arith.extui %3375 : i32 to i64
    %3377 = arith.addi %3376, %c152_i64 : i64
    %c8_i64_1822 = arith.constant 8 : i64
    %3378 = arith.addi %3377, %c8_i64_1822 : i64
    %c0_i32_1823 = arith.constant 0 : i32
    %3379 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1823) : (!llvm.ptr, i32) -> i32
    %3380 = arith.extui %3379 : i32 to i64
    %c65536_i64_1824 = arith.constant 65536 : i64
    %3381 = arith.muli %3380, %c65536_i64_1824 : i64
    %3382 = arith.cmpi ult, %3378, %3381 : i64
    cf.cond_br %3382, ^bb659, ^bb660
  ^bb658:  // pred: ^bb655
    %c1_i32_1825 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1825) : (i32) -> ()
    cf.br ^bb657
  ^bb659:  // 2 preds: ^bb657, ^bb660
    %3383 = llvm.getelementptr %11[%3377] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_1821, %3383 {alignment = 1 : i64} : i64, !llvm.ptr
    %3384 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_1826 = arith.constant 1 : i64
    %c144_i64_1827 = arith.constant 144 : i64
    %3385 = arith.extui %3384 : i32 to i64
    %3386 = arith.addi %3385, %c144_i64_1827 : i64
    %c8_i64_1828 = arith.constant 8 : i64
    %3387 = arith.addi %3386, %c8_i64_1828 : i64
    %c0_i32_1829 = arith.constant 0 : i32
    %3388 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1829) : (!llvm.ptr, i32) -> i32
    %3389 = arith.extui %3388 : i32 to i64
    %c65536_i64_1830 = arith.constant 65536 : i64
    %3390 = arith.muli %3389, %c65536_i64_1830 : i64
    %3391 = arith.cmpi ult, %3387, %3390 : i64
    cf.cond_br %3391, ^bb661, ^bb662
  ^bb660:  // pred: ^bb657
    %c1_i32_1831 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1831) : (i32) -> ()
    cf.br ^bb659
  ^bb661:  // 2 preds: ^bb659, ^bb662
    %3392 = llvm.getelementptr %11[%3386] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_1826, %3392 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb29
  ^bb662:  // pred: ^bb659
    %c1_i32_1832 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1832) : (i32) -> ()
    cf.br ^bb661
  ^bb663:  // pred: ^bb33
    %3393 = llvm.load %3 : !llvm.ptr -> i32
    %c-2147483648_i32_1833 = arith.constant -2147483648 : i32
    %c656_i64_1834 = arith.constant 656 : i64
    %3394 = arith.extui %3393 : i32 to i64
    %3395 = arith.addi %3394, %c656_i64_1834 : i64
    %c4_i64_1835 = arith.constant 4 : i64
    %3396 = arith.addi %3395, %c4_i64_1835 : i64
    %c0_i32_1836 = arith.constant 0 : i32
    %3397 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1836) : (!llvm.ptr, i32) -> i32
    %3398 = arith.extui %3397 : i32 to i64
    %c65536_i64_1837 = arith.constant 65536 : i64
    %3399 = arith.muli %3398, %c65536_i64_1837 : i64
    %3400 = arith.cmpi ult, %3396, %3399 : i64
    cf.cond_br %3400, ^bb671, ^bb672
  ^bb664:  // pred: ^bb33
    %3401 = llvm.load %3 : !llvm.ptr -> i32
    %c156_i32_1838 = arith.constant 156 : i32
    %3402 = arith.addi %3401, %c156_i32_1838 : i32
    %c0_i32_1839 = arith.constant 0 : i32
    %c0_i64_1840 = arith.constant 0 : i64
    %3403 = arith.extui %3402 : i32 to i64
    %3404 = arith.addi %3403, %c0_i64_1840 : i64
    %c4_i64_1841 = arith.constant 4 : i64
    %3405 = arith.addi %3404, %c4_i64_1841 : i64
    %c0_i32_1842 = arith.constant 0 : i32
    %3406 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1842) : (!llvm.ptr, i32) -> i32
    %3407 = arith.extui %3406 : i32 to i64
    %c65536_i64_1843 = arith.constant 65536 : i64
    %3408 = arith.muli %3407, %c65536_i64_1843 : i64
    %3409 = arith.cmpi ult, %3405, %3408 : i64
    cf.cond_br %3409, ^bb665, ^bb666
  ^bb665:  // 2 preds: ^bb664, ^bb666
    %3410 = llvm.getelementptr %11[%3404] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_1839, %3410 {alignment = 1 : i64} : i32, !llvm.ptr
    %3411 = llvm.load %3 : !llvm.ptr -> i32
    %c4294967296_i64_1844 = arith.constant 4294967296 : i64
    %c148_i64_1845 = arith.constant 148 : i64
    %3412 = arith.extui %3411 : i32 to i64
    %3413 = arith.addi %3412, %c148_i64_1845 : i64
    %c8_i64_1846 = arith.constant 8 : i64
    %3414 = arith.addi %3413, %c8_i64_1846 : i64
    %c0_i32_1847 = arith.constant 0 : i32
    %3415 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1847) : (!llvm.ptr, i32) -> i32
    %3416 = arith.extui %3415 : i32 to i64
    %c65536_i64_1848 = arith.constant 65536 : i64
    %3417 = arith.muli %3416, %c65536_i64_1848 : i64
    %3418 = arith.cmpi ult, %3414, %3417 : i64
    cf.cond_br %3418, ^bb667, ^bb668
  ^bb666:  // pred: ^bb664
    %c1_i32_1849 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1849) : (i32) -> ()
    cf.br ^bb665
  ^bb667:  // 2 preds: ^bb665, ^bb668
    %3419 = llvm.getelementptr %11[%3413] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4294967296_i64_1844, %3419 {alignment = 1 : i64} : i64, !llvm.ptr
    %3420 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_1850 = arith.constant 1 : i32
    %c144_i64_1851 = arith.constant 144 : i64
    %3421 = arith.extui %3420 : i32 to i64
    %3422 = arith.addi %3421, %c144_i64_1851 : i64
    %c4_i64_1852 = arith.constant 4 : i64
    %3423 = arith.addi %3422, %c4_i64_1852 : i64
    %c0_i32_1853 = arith.constant 0 : i32
    %3424 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1853) : (!llvm.ptr, i32) -> i32
    %3425 = arith.extui %3424 : i32 to i64
    %c65536_i64_1854 = arith.constant 65536 : i64
    %3426 = arith.muli %3425, %c65536_i64_1854 : i64
    %3427 = arith.cmpi ult, %3423, %3426 : i64
    cf.cond_br %3427, ^bb669, ^bb670
  ^bb668:  // pred: ^bb665
    %c1_i32_1855 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1855) : (i32) -> ()
    cf.br ^bb667
  ^bb669:  // 2 preds: ^bb667, ^bb670
    %3428 = llvm.getelementptr %11[%3422] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_1850, %3428 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb29
  ^bb670:  // pred: ^bb667
    %c1_i32_1856 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1856) : (i32) -> ()
    cf.br ^bb669
  ^bb671:  // 2 preds: ^bb663, ^bb672
    %3429 = llvm.getelementptr %11[%3395] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-2147483648_i32_1833, %3429 {alignment = 1 : i64} : i32, !llvm.ptr
    %3430 = llvm.load %3 : !llvm.ptr -> i32
    %c656_i32_1857 = arith.constant 656 : i32
    %3431 = arith.addi %3430, %c656_i32_1857 : i32
    call @f4(%arg0, %3431) : (!llvm.ptr, i32) -> ()
    %3432 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_1858 = arith.constant 1552 : i32
    %3433 = arith.addi %3432, %c1552_i32_1858 : i32
    %3434 = llvm.load %5 : !llvm.ptr -> i32
    %3435 = llvm.load %4 : !llvm.ptr -> i32
    call @f25(%arg0, %3433, %3434, %3435) : (!llvm.ptr, i32, i32, i32) -> ()
    %3436 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i64_1859 = arith.constant 1552 : i64
    %3437 = arith.extui %3436 : i32 to i64
    %3438 = arith.addi %3437, %c1552_i64_1859 : i64
    %c1_i64_1860 = arith.constant 1 : i64
    %3439 = arith.addi %3438, %c1_i64_1860 : i64
    %c0_i32_1861 = arith.constant 0 : i32
    %3440 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1861) : (!llvm.ptr, i32) -> i32
    %3441 = arith.extui %3440 : i32 to i64
    %c65536_i64_1862 = arith.constant 65536 : i64
    %3442 = arith.muli %3441, %c65536_i64_1862 : i64
    %3443 = arith.cmpi ult, %3439, %3442 : i64
    cf.cond_br %3443, ^bb675, ^bb676
  ^bb672:  // pred: ^bb663
    %c1_i32_1863 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1863) : (i32) -> ()
    cf.br ^bb671
  ^bb673:  // 2 preds: ^bb700, ^bb757
    %3444 = llvm.load %3 : !llvm.ptr -> i32
    %c376_i32 = arith.constant 376 : i32
    %3445 = arith.addi %3444, %c376_i32 : i32
    %3446 = llvm.load %3 : !llvm.ptr -> i32
    %c316_i32 = arith.constant 316 : i32
    %3447 = arith.addi %3446, %c316_i32 : i32
    %c0_i64_1864 = arith.constant 0 : i64
    %3448 = arith.extui %3447 : i32 to i64
    %3449 = arith.addi %3448, %c0_i64_1864 : i64
    %c8_i64_1865 = arith.constant 8 : i64
    %3450 = arith.addi %3449, %c8_i64_1865 : i64
    %c0_i32_1866 = arith.constant 0 : i32
    %3451 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1866) : (!llvm.ptr, i32) -> i32
    %3452 = arith.extui %3451 : i32 to i64
    %c65536_i64_1867 = arith.constant 65536 : i64
    %3453 = arith.muli %3452, %c65536_i64_1867 : i64
    %3454 = arith.cmpi ult, %3450, %3453 : i64
    cf.cond_br %3454, ^bb759, ^bb760
  ^bb674:  // pred: ^bb675
    %3455 = llvm.load %3 : !llvm.ptr -> i32
    %c296_i32_1868 = arith.constant 296 : i32
    %3456 = arith.addi %3455, %c296_i32_1868 : i32
    %c20_i32 = arith.constant 20 : i32
    %3457 = arith.addi %3456, %c20_i32 : i32
    %3458 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_1869 = arith.constant 1552 : i32
    %3459 = arith.addi %3458, %c1552_i32_1869 : i32
    %c20_i32_1870 = arith.constant 20 : i32
    %3460 = arith.addi %3459, %c20_i32_1870 : i32
    %c0_i64_1871 = arith.constant 0 : i64
    %3461 = arith.extui %3460 : i32 to i64
    %3462 = arith.addi %3461, %c0_i64_1871 : i64
    %c8_i64_1872 = arith.constant 8 : i64
    %3463 = arith.addi %3462, %c8_i64_1872 : i64
    %c0_i32_1873 = arith.constant 0 : i32
    %3464 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1873) : (!llvm.ptr, i32) -> i32
    %3465 = arith.extui %3464 : i32 to i64
    %c65536_i64_1874 = arith.constant 65536 : i64
    %3466 = arith.muli %3465, %c65536_i64_1874 : i64
    %3467 = arith.cmpi ult, %3463, %3466 : i64
    cf.cond_br %3467, ^bb747, ^bb748
  ^bb675:  // 2 preds: ^bb671, ^bb676
    %3468 = llvm.getelementptr %11[%3438] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %3469 = llvm.load volatile %3468 {alignment = 1 : i64} : !llvm.ptr -> i8
    %3470 = arith.extui %3469 : i8 to i32
    %c0_i32_1875 = arith.constant 0 : i32
    %3471 = arith.cmpi ne, %3470, %c0_i32_1875 : i32
    cf.cond_br %3471, ^bb674, ^bb677
  ^bb676:  // pred: ^bb671
    %c1_i32_1876 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1876) : (i32) -> ()
    cf.br ^bb675
  ^bb677:  // pred: ^bb675
    %3472 = llvm.load %3 : !llvm.ptr -> i32
    %c656_i32_1877 = arith.constant 656 : i32
    %3473 = arith.addi %3472, %c656_i32_1877 : i32
    %3474 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_1878 = arith.constant 1552 : i32
    %3475 = arith.addi %3474, %c1552_i32_1878 : i32
    %c1_i32_1879 = arith.constant 1 : i32
    %3476 = arith.ori %3475, %c1_i32_1879 : i32
    llvm.store %3476, %5 : i32, !llvm.ptr
    %c64_i32_1880 = arith.constant 64 : i32
    %3477 = call @f161(%arg0, %3473, %3476, %c64_i32_1880) : (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_1881 = arith.constant 0 : i32
    llvm.store %c0_i32_1881, %2 : i32, !llvm.ptr
    cf.br ^bb680
  ^bb678:  // 2 preds: ^bb680, ^bb685
    %3478 = llvm.load %3 : !llvm.ptr -> i32
    %c296_i32_1882 = arith.constant 296 : i32
    %3479 = arith.addi %3478, %c296_i32_1882 : i32
    %c8_i32_1883 = arith.constant 8 : i32
    %3480 = arith.addi %3479, %c8_i32_1883 : i32
    %3481 = llvm.load %5 : !llvm.ptr -> i32
    call @f27(%arg0, %3480, %3481) : (!llvm.ptr, i32, i32) -> ()
    %3482 = llvm.load %3 : !llvm.ptr -> i32
    %c568_i32 = arith.constant 568 : i32
    %3483 = arith.addi %3482, %c568_i32 : i32
    %c8_i32_1884 = arith.constant 8 : i32
    %3484 = arith.addi %3483, %c8_i32_1884 : i32
    %3485 = llvm.load %3 : !llvm.ptr -> i32
    %c296_i32_1885 = arith.constant 296 : i32
    %3486 = arith.addi %3485, %c296_i32_1885 : i32
    %c16_i32_1886 = arith.constant 16 : i32
    %3487 = arith.addi %3486, %c16_i32_1886 : i32
    %c0_i64_1887 = arith.constant 0 : i64
    %3488 = arith.extui %3487 : i32 to i64
    %3489 = arith.addi %3488, %c0_i64_1887 : i64
    %c8_i64_1888 = arith.constant 8 : i64
    %3490 = arith.addi %3489, %c8_i64_1888 : i64
    %c0_i32_1889 = arith.constant 0 : i32
    %3491 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1889) : (!llvm.ptr, i32) -> i32
    %3492 = arith.extui %3491 : i32 to i64
    %c65536_i64_1890 = arith.constant 65536 : i64
    %3493 = arith.muli %3492, %c65536_i64_1890 : i64
    %3494 = arith.cmpi ult, %3490, %3493 : i64
    cf.cond_br %3494, ^bb702, ^bb703
  ^bb679:  // pred: ^bb684
    %3495 = llvm.load %3 : !llvm.ptr -> i32
    %c1400_i32_1891 = arith.constant 1400 : i32
    %3496 = arith.addi %3495, %c1400_i32_1891 : i32
    %3497 = llvm.load %5 : !llvm.ptr -> i32
    call @f26(%arg0, %3496, %3497) : (!llvm.ptr, i32, i32) -> ()
    %3498 = llvm.load %3 : !llvm.ptr -> i32
    %c1400_i64_1892 = arith.constant 1400 : i64
    %3499 = arith.extui %3498 : i32 to i64
    %3500 = arith.addi %3499, %c1400_i64_1892 : i64
    %c4_i64_1893 = arith.constant 4 : i64
    %3501 = arith.addi %3500, %c4_i64_1893 : i64
    %c0_i32_1894 = arith.constant 0 : i32
    %3502 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1894) : (!llvm.ptr, i32) -> i32
    %3503 = arith.extui %3502 : i32 to i64
    %c65536_i64_1895 = arith.constant 65536 : i64
    %3504 = arith.muli %3503, %c65536_i64_1895 : i64
    %3505 = arith.cmpi ult, %3501, %3504 : i64
    cf.cond_br %3505, ^bb685, ^bb686
  ^bb680:  // 2 preds: ^bb677, ^bb682
    %3506 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32_1896 = arith.constant 12 : i32
    %3507 = arith.cmpi eq, %3506, %c12_i32_1896 : i32
    %3508 = arith.extui %3507 : i1 to i32
    %c0_i32_1897 = arith.constant 0 : i32
    %3509 = arith.cmpi ne, %3508, %c0_i32_1897 : i32
    cf.cond_br %3509, ^bb678, ^bb681
  ^bb681:  // pred: ^bb680
    %3510 = llvm.load %3 : !llvm.ptr -> i32
    %c656_i32_1898 = arith.constant 656 : i32
    %3511 = arith.addi %3510, %c656_i32_1898 : i32
    %3512 = llvm.load %2 : !llvm.ptr -> i32
    %3513 = arith.addi %3511, %3512 : i32
    llvm.store %3513, %4 : i32, !llvm.ptr
    %3514 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_1899 = arith.constant 1 : i32
    %3515 = arith.addi %3514, %c1_i32_1899 : i32
    llvm.store %3515, %2 : i32, !llvm.ptr
    %3516 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_1900 = arith.constant 0 : i64
    %3517 = arith.extui %3516 : i32 to i64
    %3518 = arith.addi %3517, %c0_i64_1900 : i64
    %c1_i64_1901 = arith.constant 1 : i64
    %3519 = arith.addi %3518, %c1_i64_1901 : i64
    %c0_i32_1902 = arith.constant 0 : i32
    %3520 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1902) : (!llvm.ptr, i32) -> i32
    %3521 = arith.extui %3520 : i32 to i64
    %c65536_i64_1903 = arith.constant 65536 : i64
    %3522 = arith.muli %3521, %c65536_i64_1903 : i64
    %3523 = arith.cmpi ult, %3519, %3522 : i64
    cf.cond_br %3523, ^bb682, ^bb683
  ^bb682:  // 2 preds: ^bb681, ^bb683
    %3524 = llvm.getelementptr %11[%3518] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %3525 = llvm.load volatile %3524 {alignment = 1 : i64} : !llvm.ptr -> i8
    %3526 = arith.extui %3525 : i8 to i32
    %c0_i32_1904 = arith.constant 0 : i32
    %3527 = arith.cmpi eq, %3526, %c0_i32_1904 : i32
    %3528 = arith.extui %3527 : i1 to i32
    %c0_i32_1905 = arith.constant 0 : i32
    %3529 = arith.cmpi ne, %3528, %c0_i32_1905 : i32
    cf.cond_br %3529, ^bb680, ^bb684
  ^bb683:  // pred: ^bb681
    %c1_i32_1906 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1906) : (i32) -> ()
    cf.br ^bb682
  ^bb684:  // pred: ^bb682
    cf.br ^bb679
  ^bb685:  // 2 preds: ^bb679, ^bb686
    %3530 = llvm.getelementptr %11[%3500] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %3531 = llvm.load volatile %3530 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %3531, %2 : i32, !llvm.ptr
    %c-2147483638_i32_1907 = arith.constant -2147483638 : i32
    %3532 = arith.cmpi eq, %3531, %c-2147483638_i32_1907 : i32
    %3533 = arith.extui %3532 : i1 to i32
    %c0_i32_1908 = arith.constant 0 : i32
    %3534 = arith.cmpi ne, %3533, %c0_i32_1908 : i32
    cf.cond_br %3534, ^bb678, ^bb687
  ^bb686:  // pred: ^bb679
    %c1_i32_1909 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1909) : (i32) -> ()
    cf.br ^bb685
  ^bb687:  // pred: ^bb685
    %3535 = llvm.load %3 : !llvm.ptr -> i32
    %c320_i32 = arith.constant 320 : i32
    %3536 = arith.addi %3535, %c320_i32 : i32
    %3537 = llvm.load %3 : !llvm.ptr -> i32
    %c1420_i32 = arith.constant 1420 : i32
    %3538 = arith.addi %3537, %c1420_i32 : i32
    %c0_i64_1910 = arith.constant 0 : i64
    %3539 = arith.extui %3538 : i32 to i64
    %3540 = arith.addi %3539, %c0_i64_1910 : i64
    %c4_i64_1911 = arith.constant 4 : i64
    %3541 = arith.addi %3540, %c4_i64_1911 : i64
    %c0_i32_1912 = arith.constant 0 : i32
    %3542 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1912) : (!llvm.ptr, i32) -> i32
    %3543 = arith.extui %3542 : i32 to i64
    %c65536_i64_1913 = arith.constant 65536 : i64
    %3544 = arith.muli %3543, %c65536_i64_1913 : i64
    %3545 = arith.cmpi ult, %3541, %3544 : i64
    cf.cond_br %3545, ^bb688, ^bb689
  ^bb688:  // 2 preds: ^bb687, ^bb689
    %3546 = llvm.getelementptr %11[%3540] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %3547 = llvm.load volatile %3546 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_1914 = arith.constant 0 : i64
    %3548 = arith.extui %3536 : i32 to i64
    %3549 = arith.addi %3548, %c0_i64_1914 : i64
    %c4_i64_1915 = arith.constant 4 : i64
    %3550 = arith.addi %3549, %c4_i64_1915 : i64
    %c0_i32_1916 = arith.constant 0 : i32
    %3551 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1916) : (!llvm.ptr, i32) -> i32
    %3552 = arith.extui %3551 : i32 to i64
    %c65536_i64_1917 = arith.constant 65536 : i64
    %3553 = arith.muli %3552, %c65536_i64_1917 : i64
    %3554 = arith.cmpi ult, %3550, %3553 : i64
    cf.cond_br %3554, ^bb690, ^bb691
  ^bb689:  // pred: ^bb687
    %c1_i32_1918 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1918) : (i32) -> ()
    cf.br ^bb688
  ^bb690:  // 2 preds: ^bb688, ^bb691
    %3555 = llvm.getelementptr %11[%3549] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %3547, %3555 {alignment = 1 : i64} : i32, !llvm.ptr
    %3556 = llvm.load %3 : !llvm.ptr -> i32
    %c312_i32 = arith.constant 312 : i32
    %3557 = arith.addi %3556, %c312_i32 : i32
    %3558 = llvm.load %3 : !llvm.ptr -> i32
    %c1412_i32 = arith.constant 1412 : i32
    %3559 = arith.addi %3558, %c1412_i32 : i32
    %c0_i64_1919 = arith.constant 0 : i64
    %3560 = arith.extui %3559 : i32 to i64
    %3561 = arith.addi %3560, %c0_i64_1919 : i64
    %c8_i64_1920 = arith.constant 8 : i64
    %3562 = arith.addi %3561, %c8_i64_1920 : i64
    %c0_i32_1921 = arith.constant 0 : i32
    %3563 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1921) : (!llvm.ptr, i32) -> i32
    %3564 = arith.extui %3563 : i32 to i64
    %c65536_i64_1922 = arith.constant 65536 : i64
    %3565 = arith.muli %3564, %c65536_i64_1922 : i64
    %3566 = arith.cmpi ult, %3562, %3565 : i64
    cf.cond_br %3566, ^bb692, ^bb693
  ^bb691:  // pred: ^bb688
    %c1_i32_1923 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1923) : (i32) -> ()
    cf.br ^bb690
  ^bb692:  // 2 preds: ^bb690, ^bb693
    %3567 = llvm.getelementptr %11[%3561] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %3568 = llvm.load volatile %3567 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1924 = arith.constant 0 : i64
    %3569 = arith.extui %3557 : i32 to i64
    %3570 = arith.addi %3569, %c0_i64_1924 : i64
    %c8_i64_1925 = arith.constant 8 : i64
    %3571 = arith.addi %3570, %c8_i64_1925 : i64
    %c0_i32_1926 = arith.constant 0 : i32
    %3572 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1926) : (!llvm.ptr, i32) -> i32
    %3573 = arith.extui %3572 : i32 to i64
    %c65536_i64_1927 = arith.constant 65536 : i64
    %3574 = arith.muli %3573, %c65536_i64_1927 : i64
    %3575 = arith.cmpi ult, %3571, %3574 : i64
    cf.cond_br %3575, ^bb694, ^bb695
  ^bb693:  // pred: ^bb690
    %c1_i32_1928 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1928) : (i32) -> ()
    cf.br ^bb692
  ^bb694:  // 2 preds: ^bb692, ^bb695
    %3576 = llvm.getelementptr %11[%3570] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %3568, %3576 {alignment = 1 : i64} : i64, !llvm.ptr
    %3577 = llvm.load %3 : !llvm.ptr -> i32
    %3578 = llvm.load %3 : !llvm.ptr -> i32
    %c1404_i64 = arith.constant 1404 : i64
    %3579 = arith.extui %3578 : i32 to i64
    %3580 = arith.addi %3579, %c1404_i64 : i64
    %c8_i64_1929 = arith.constant 8 : i64
    %3581 = arith.addi %3580, %c8_i64_1929 : i64
    %c0_i32_1930 = arith.constant 0 : i32
    %3582 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1930) : (!llvm.ptr, i32) -> i32
    %3583 = arith.extui %3582 : i32 to i64
    %c65536_i64_1931 = arith.constant 65536 : i64
    %3584 = arith.muli %3583, %c65536_i64_1931 : i64
    %3585 = arith.cmpi ult, %3581, %3584 : i64
    cf.cond_br %3585, ^bb696, ^bb697
  ^bb695:  // pred: ^bb692
    %c1_i32_1932 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1932) : (i32) -> ()
    cf.br ^bb694
  ^bb696:  // 2 preds: ^bb694, ^bb697
    %3586 = llvm.getelementptr %11[%3580] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %3587 = llvm.load volatile %3586 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c304_i64 = arith.constant 304 : i64
    %3588 = arith.extui %3577 : i32 to i64
    %3589 = arith.addi %3588, %c304_i64 : i64
    %c8_i64_1933 = arith.constant 8 : i64
    %3590 = arith.addi %3589, %c8_i64_1933 : i64
    %c0_i32_1934 = arith.constant 0 : i32
    %3591 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1934) : (!llvm.ptr, i32) -> i32
    %3592 = arith.extui %3591 : i32 to i64
    %c65536_i64_1935 = arith.constant 65536 : i64
    %3593 = arith.muli %3592, %c65536_i64_1935 : i64
    %3594 = arith.cmpi ult, %3590, %3593 : i64
    cf.cond_br %3594, ^bb698, ^bb699
  ^bb697:  // pred: ^bb694
    %c1_i32_1936 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1936) : (i32) -> ()
    cf.br ^bb696
  ^bb698:  // 2 preds: ^bb696, ^bb699
    %3595 = llvm.getelementptr %11[%3589] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %3587, %3595 {alignment = 1 : i64} : i64, !llvm.ptr
    %3596 = llvm.load %3 : !llvm.ptr -> i32
    %3597 = llvm.load %2 : !llvm.ptr -> i32
    %c300_i64 = arith.constant 300 : i64
    %3598 = arith.extui %3596 : i32 to i64
    %3599 = arith.addi %3598, %c300_i64 : i64
    %c4_i64_1937 = arith.constant 4 : i64
    %3600 = arith.addi %3599, %c4_i64_1937 : i64
    %c0_i32_1938 = arith.constant 0 : i32
    %3601 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1938) : (!llvm.ptr, i32) -> i32
    %3602 = arith.extui %3601 : i32 to i64
    %c65536_i64_1939 = arith.constant 65536 : i64
    %3603 = arith.muli %3602, %c65536_i64_1939 : i64
    %3604 = arith.cmpi ult, %3600, %3603 : i64
    cf.cond_br %3604, ^bb700, ^bb701
  ^bb699:  // pred: ^bb696
    %c1_i32_1940 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1940) : (i32) -> ()
    cf.br ^bb698
  ^bb700:  // 2 preds: ^bb698, ^bb701
    %3605 = llvm.getelementptr %11[%3599] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %3597, %3605 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb673
  ^bb701:  // pred: ^bb698
    %c1_i32_1941 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1941) : (i32) -> ()
    cf.br ^bb700
  ^bb702:  // 2 preds: ^bb678, ^bb703
    %3606 = llvm.getelementptr %11[%3489] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %3607 = llvm.load volatile %3606 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1942 = arith.constant 0 : i64
    %3608 = arith.extui %3484 : i32 to i64
    %3609 = arith.addi %3608, %c0_i64_1942 : i64
    %c8_i64_1943 = arith.constant 8 : i64
    %3610 = arith.addi %3609, %c8_i64_1943 : i64
    %c0_i32_1944 = arith.constant 0 : i32
    %3611 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1944) : (!llvm.ptr, i32) -> i32
    %3612 = arith.extui %3611 : i32 to i64
    %c65536_i64_1945 = arith.constant 65536 : i64
    %3613 = arith.muli %3612, %c65536_i64_1945 : i64
    %3614 = arith.cmpi ult, %3610, %3613 : i64
    cf.cond_br %3614, ^bb704, ^bb705
  ^bb703:  // pred: ^bb678
    %c1_i32_1946 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1946) : (i32) -> ()
    cf.br ^bb702
  ^bb704:  // 2 preds: ^bb702, ^bb705
    %3615 = llvm.getelementptr %11[%3609] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %3607, %3615 {alignment = 1 : i64} : i64, !llvm.ptr
    %3616 = llvm.load %3 : !llvm.ptr -> i32
    %c568_i32_1947 = arith.constant 568 : i32
    %3617 = arith.addi %3616, %c568_i32_1947 : i32
    %c16_i32_1948 = arith.constant 16 : i32
    %3618 = arith.addi %3617, %c16_i32_1948 : i32
    %3619 = llvm.load %3 : !llvm.ptr -> i32
    %c296_i32_1949 = arith.constant 296 : i32
    %3620 = arith.addi %3619, %c296_i32_1949 : i32
    %c24_i32_1950 = arith.constant 24 : i32
    %3621 = arith.addi %3620, %c24_i32_1950 : i32
    %c0_i64_1951 = arith.constant 0 : i64
    %3622 = arith.extui %3621 : i32 to i64
    %3623 = arith.addi %3622, %c0_i64_1951 : i64
    %c4_i64_1952 = arith.constant 4 : i64
    %3624 = arith.addi %3623, %c4_i64_1952 : i64
    %c0_i32_1953 = arith.constant 0 : i32
    %3625 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1953) : (!llvm.ptr, i32) -> i32
    %3626 = arith.extui %3625 : i32 to i64
    %c65536_i64_1954 = arith.constant 65536 : i64
    %3627 = arith.muli %3626, %c65536_i64_1954 : i64
    %3628 = arith.cmpi ult, %3624, %3627 : i64
    cf.cond_br %3628, ^bb706, ^bb707
  ^bb705:  // pred: ^bb702
    %c1_i32_1955 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1955) : (i32) -> ()
    cf.br ^bb704
  ^bb706:  // 2 preds: ^bb704, ^bb707
    %3629 = llvm.getelementptr %11[%3623] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %3630 = llvm.load volatile %3629 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_1956 = arith.constant 0 : i64
    %3631 = arith.extui %3618 : i32 to i64
    %3632 = arith.addi %3631, %c0_i64_1956 : i64
    %c4_i64_1957 = arith.constant 4 : i64
    %3633 = arith.addi %3632, %c4_i64_1957 : i64
    %c0_i32_1958 = arith.constant 0 : i32
    %3634 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1958) : (!llvm.ptr, i32) -> i32
    %3635 = arith.extui %3634 : i32 to i64
    %c65536_i64_1959 = arith.constant 65536 : i64
    %3636 = arith.muli %3635, %c65536_i64_1959 : i64
    %3637 = arith.cmpi ult, %3633, %3636 : i64
    cf.cond_br %3637, ^bb708, ^bb709
  ^bb707:  // pred: ^bb704
    %c1_i32_1960 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1960) : (i32) -> ()
    cf.br ^bb706
  ^bb708:  // 2 preds: ^bb706, ^bb709
    %3638 = llvm.getelementptr %11[%3632] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %3630, %3638 {alignment = 1 : i64} : i32, !llvm.ptr
    %3639 = llvm.load %3 : !llvm.ptr -> i32
    %c592_i32 = arith.constant 592 : i32
    %3640 = arith.addi %3639, %c592_i32 : i32
    %c8_i32_1961 = arith.constant 8 : i32
    %3641 = arith.addi %3640, %c8_i32_1961 : i32
    %3642 = llvm.load %3 : !llvm.ptr -> i32
    %c336_i32 = arith.constant 336 : i32
    %3643 = arith.addi %3642, %c336_i32 : i32
    %c0_i64_1962 = arith.constant 0 : i64
    %3644 = arith.extui %3643 : i32 to i64
    %3645 = arith.addi %3644, %c0_i64_1962 : i64
    %c8_i64_1963 = arith.constant 8 : i64
    %3646 = arith.addi %3645, %c8_i64_1963 : i64
    %c0_i32_1964 = arith.constant 0 : i32
    %3647 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1964) : (!llvm.ptr, i32) -> i32
    %3648 = arith.extui %3647 : i32 to i64
    %c65536_i64_1965 = arith.constant 65536 : i64
    %3649 = arith.muli %3648, %c65536_i64_1965 : i64
    %3650 = arith.cmpi ult, %3646, %3649 : i64
    cf.cond_br %3650, ^bb710, ^bb711
  ^bb709:  // pred: ^bb706
    %c1_i32_1966 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1966) : (i32) -> ()
    cf.br ^bb708
  ^bb710:  // 2 preds: ^bb708, ^bb711
    %3651 = llvm.getelementptr %11[%3645] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %3652 = llvm.load volatile %3651 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1967 = arith.constant 0 : i64
    %3653 = arith.extui %3641 : i32 to i64
    %3654 = arith.addi %3653, %c0_i64_1967 : i64
    %c8_i64_1968 = arith.constant 8 : i64
    %3655 = arith.addi %3654, %c8_i64_1968 : i64
    %c0_i32_1969 = arith.constant 0 : i32
    %3656 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1969) : (!llvm.ptr, i32) -> i32
    %3657 = arith.extui %3656 : i32 to i64
    %c65536_i64_1970 = arith.constant 65536 : i64
    %3658 = arith.muli %3657, %c65536_i64_1970 : i64
    %3659 = arith.cmpi ult, %3655, %3658 : i64
    cf.cond_br %3659, ^bb712, ^bb713
  ^bb711:  // pred: ^bb708
    %c1_i32_1971 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1971) : (i32) -> ()
    cf.br ^bb710
  ^bb712:  // 2 preds: ^bb710, ^bb713
    %3660 = llvm.getelementptr %11[%3654] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %3652, %3660 {alignment = 1 : i64} : i64, !llvm.ptr
    %3661 = llvm.load %3 : !llvm.ptr -> i32
    %c592_i32_1972 = arith.constant 592 : i32
    %3662 = arith.addi %3661, %c592_i32_1972 : i32
    %c16_i32_1973 = arith.constant 16 : i32
    %3663 = arith.addi %3662, %c16_i32_1973 : i32
    %3664 = llvm.load %3 : !llvm.ptr -> i32
    %c344_i32 = arith.constant 344 : i32
    %3665 = arith.addi %3664, %c344_i32 : i32
    %c0_i64_1974 = arith.constant 0 : i64
    %3666 = arith.extui %3665 : i32 to i64
    %3667 = arith.addi %3666, %c0_i64_1974 : i64
    %c8_i64_1975 = arith.constant 8 : i64
    %3668 = arith.addi %3667, %c8_i64_1975 : i64
    %c0_i32_1976 = arith.constant 0 : i32
    %3669 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1976) : (!llvm.ptr, i32) -> i32
    %3670 = arith.extui %3669 : i32 to i64
    %c65536_i64_1977 = arith.constant 65536 : i64
    %3671 = arith.muli %3670, %c65536_i64_1977 : i64
    %3672 = arith.cmpi ult, %3668, %3671 : i64
    cf.cond_br %3672, ^bb714, ^bb715
  ^bb713:  // pred: ^bb710
    %c1_i32_1978 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1978) : (i32) -> ()
    cf.br ^bb712
  ^bb714:  // 2 preds: ^bb712, ^bb715
    %3673 = llvm.getelementptr %11[%3667] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %3674 = llvm.load volatile %3673 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1979 = arith.constant 0 : i64
    %3675 = arith.extui %3663 : i32 to i64
    %3676 = arith.addi %3675, %c0_i64_1979 : i64
    %c8_i64_1980 = arith.constant 8 : i64
    %3677 = arith.addi %3676, %c8_i64_1980 : i64
    %c0_i32_1981 = arith.constant 0 : i32
    %3678 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1981) : (!llvm.ptr, i32) -> i32
    %3679 = arith.extui %3678 : i32 to i64
    %c65536_i64_1982 = arith.constant 65536 : i64
    %3680 = arith.muli %3679, %c65536_i64_1982 : i64
    %3681 = arith.cmpi ult, %3677, %3680 : i64
    cf.cond_br %3681, ^bb716, ^bb717
  ^bb715:  // pred: ^bb712
    %c1_i32_1983 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1983) : (i32) -> ()
    cf.br ^bb714
  ^bb716:  // 2 preds: ^bb714, ^bb717
    %3682 = llvm.getelementptr %11[%3676] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %3674, %3682 {alignment = 1 : i64} : i64, !llvm.ptr
    %3683 = llvm.load %3 : !llvm.ptr -> i32
    %c592_i32_1984 = arith.constant 592 : i32
    %3684 = arith.addi %3683, %c592_i32_1984 : i32
    %c24_i32_1985 = arith.constant 24 : i32
    %3685 = arith.addi %3684, %c24_i32_1985 : i32
    %3686 = llvm.load %3 : !llvm.ptr -> i32
    %c352_i32 = arith.constant 352 : i32
    %3687 = arith.addi %3686, %c352_i32 : i32
    %c0_i64_1986 = arith.constant 0 : i64
    %3688 = arith.extui %3687 : i32 to i64
    %3689 = arith.addi %3688, %c0_i64_1986 : i64
    %c8_i64_1987 = arith.constant 8 : i64
    %3690 = arith.addi %3689, %c8_i64_1987 : i64
    %c0_i32_1988 = arith.constant 0 : i32
    %3691 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1988) : (!llvm.ptr, i32) -> i32
    %3692 = arith.extui %3691 : i32 to i64
    %c65536_i64_1989 = arith.constant 65536 : i64
    %3693 = arith.muli %3692, %c65536_i64_1989 : i64
    %3694 = arith.cmpi ult, %3690, %3693 : i64
    cf.cond_br %3694, ^bb718, ^bb719
  ^bb717:  // pred: ^bb714
    %c1_i32_1990 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1990) : (i32) -> ()
    cf.br ^bb716
  ^bb718:  // 2 preds: ^bb716, ^bb719
    %3695 = llvm.getelementptr %11[%3689] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %3696 = llvm.load volatile %3695 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1991 = arith.constant 0 : i64
    %3697 = arith.extui %3685 : i32 to i64
    %3698 = arith.addi %3697, %c0_i64_1991 : i64
    %c8_i64_1992 = arith.constant 8 : i64
    %3699 = arith.addi %3698, %c8_i64_1992 : i64
    %c0_i32_1993 = arith.constant 0 : i32
    %3700 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1993) : (!llvm.ptr, i32) -> i32
    %3701 = arith.extui %3700 : i32 to i64
    %c65536_i64_1994 = arith.constant 65536 : i64
    %3702 = arith.muli %3701, %c65536_i64_1994 : i64
    %3703 = arith.cmpi ult, %3699, %3702 : i64
    cf.cond_br %3703, ^bb720, ^bb721
  ^bb719:  // pred: ^bb716
    %c1_i32_1995 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1995) : (i32) -> ()
    cf.br ^bb718
  ^bb720:  // 2 preds: ^bb718, ^bb721
    %3704 = llvm.getelementptr %11[%3698] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %3696, %3704 {alignment = 1 : i64} : i64, !llvm.ptr
    %3705 = llvm.load %3 : !llvm.ptr -> i32
    %3706 = llvm.load %3 : !llvm.ptr -> i32
    %c304_i64_1996 = arith.constant 304 : i64
    %3707 = arith.extui %3706 : i32 to i64
    %3708 = arith.addi %3707, %c304_i64_1996 : i64
    %c8_i64_1997 = arith.constant 8 : i64
    %3709 = arith.addi %3708, %c8_i64_1997 : i64
    %c0_i32_1998 = arith.constant 0 : i32
    %3710 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1998) : (!llvm.ptr, i32) -> i32
    %3711 = arith.extui %3710 : i32 to i64
    %c65536_i64_1999 = arith.constant 65536 : i64
    %3712 = arith.muli %3711, %c65536_i64_1999 : i64
    %3713 = arith.cmpi ult, %3709, %3712 : i64
    cf.cond_br %3713, ^bb722, ^bb723
  ^bb721:  // pred: ^bb718
    %c1_i32_2000 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2000) : (i32) -> ()
    cf.br ^bb720
  ^bb722:  // 2 preds: ^bb720, ^bb723
    %3714 = llvm.getelementptr %11[%3708] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %3715 = llvm.load volatile %3714 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c568_i64 = arith.constant 568 : i64
    %3716 = arith.extui %3705 : i32 to i64
    %3717 = arith.addi %3716, %c568_i64 : i64
    %c8_i64_2001 = arith.constant 8 : i64
    %3718 = arith.addi %3717, %c8_i64_2001 : i64
    %c0_i32_2002 = arith.constant 0 : i32
    %3719 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2002) : (!llvm.ptr, i32) -> i32
    %3720 = arith.extui %3719 : i32 to i64
    %c65536_i64_2003 = arith.constant 65536 : i64
    %3721 = arith.muli %3720, %c65536_i64_2003 : i64
    %3722 = arith.cmpi ult, %3718, %3721 : i64
    cf.cond_br %3722, ^bb724, ^bb725
  ^bb723:  // pred: ^bb720
    %c1_i32_2004 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2004) : (i32) -> ()
    cf.br ^bb722
  ^bb724:  // 2 preds: ^bb722, ^bb725
    %3723 = llvm.getelementptr %11[%3717] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %3715, %3723 {alignment = 1 : i64} : i64, !llvm.ptr
    %3724 = llvm.load %3 : !llvm.ptr -> i32
    %3725 = llvm.load %3 : !llvm.ptr -> i32
    %c328_i64 = arith.constant 328 : i64
    %3726 = arith.extui %3725 : i32 to i64
    %3727 = arith.addi %3726, %c328_i64 : i64
    %c8_i64_2005 = arith.constant 8 : i64
    %3728 = arith.addi %3727, %c8_i64_2005 : i64
    %c0_i32_2006 = arith.constant 0 : i32
    %3729 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2006) : (!llvm.ptr, i32) -> i32
    %3730 = arith.extui %3729 : i32 to i64
    %c65536_i64_2007 = arith.constant 65536 : i64
    %3731 = arith.muli %3730, %c65536_i64_2007 : i64
    %3732 = arith.cmpi ult, %3728, %3731 : i64
    cf.cond_br %3732, ^bb726, ^bb727
  ^bb725:  // pred: ^bb722
    %c1_i32_2008 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2008) : (i32) -> ()
    cf.br ^bb724
  ^bb726:  // 2 preds: ^bb724, ^bb727
    %3733 = llvm.getelementptr %11[%3727] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %3734 = llvm.load volatile %3733 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c592_i64 = arith.constant 592 : i64
    %3735 = arith.extui %3724 : i32 to i64
    %3736 = arith.addi %3735, %c592_i64 : i64
    %c8_i64_2009 = arith.constant 8 : i64
    %3737 = arith.addi %3736, %c8_i64_2009 : i64
    %c0_i32_2010 = arith.constant 0 : i32
    %3738 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2010) : (!llvm.ptr, i32) -> i32
    %3739 = arith.extui %3738 : i32 to i64
    %c65536_i64_2011 = arith.constant 65536 : i64
    %3740 = arith.muli %3739, %c65536_i64_2011 : i64
    %3741 = arith.cmpi ult, %3737, %3740 : i64
    cf.cond_br %3741, ^bb728, ^bb729
  ^bb727:  // pred: ^bb724
    %c1_i32_2012 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2012) : (i32) -> ()
    cf.br ^bb726
  ^bb728:  // 2 preds: ^bb726, ^bb729
    %3742 = llvm.getelementptr %11[%3736] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %3734, %3742 {alignment = 1 : i64} : i64, !llvm.ptr
    %3743 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_2013 = arith.constant 1552 : i32
    %3744 = arith.addi %3743, %c1552_i32_2013 : i32
    %3745 = llvm.load %3 : !llvm.ptr -> i32
    %3746 = llvm.load %3 : !llvm.ptr -> i32
    %c568_i32_2014 = arith.constant 568 : i32
    %3747 = arith.addi %3746, %c568_i32_2014 : i32
    %3748 = llvm.load %3 : !llvm.ptr -> i32
    %c592_i32_2015 = arith.constant 592 : i32
    %3749 = arith.addi %3748, %c592_i32_2015 : i32
    call @f28(%arg0, %3744, %3745, %3747, %3749) : (!llvm.ptr, i32, i32, i32, i32) -> ()
    %3750 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i64_2016 = arith.constant 1552 : i64
    %3751 = arith.extui %3750 : i32 to i64
    %3752 = arith.addi %3751, %c1552_i64_2016 : i64
    %c8_i64_2017 = arith.constant 8 : i64
    %3753 = arith.addi %3752, %c8_i64_2017 : i64
    %c0_i32_2018 = arith.constant 0 : i32
    %3754 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2018) : (!llvm.ptr, i32) -> i32
    %3755 = arith.extui %3754 : i32 to i64
    %c65536_i64_2019 = arith.constant 65536 : i64
    %3756 = arith.muli %3755, %c65536_i64_2019 : i64
    %3757 = arith.cmpi ult, %3753, %3756 : i64
    cf.cond_br %3757, ^bb732, ^bb733
  ^bb729:  // pred: ^bb726
    %c1_i32_2020 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2020) : (i32) -> ()
    cf.br ^bb728
  ^bb730:  // 2 preds: ^bb734, ^bb735
    %3758 = llvm.load %3 : !llvm.ptr -> i32
    %c156_i32_2021 = arith.constant 156 : i32
    %3759 = arith.addi %3758, %c156_i32_2021 : i32
    %3760 = llvm.load %3 : !llvm.ptr -> i32
    %c1560_i32_2022 = arith.constant 1560 : i32
    %3761 = arith.addi %3760, %c1560_i32_2022 : i32
    %c0_i64_2023 = arith.constant 0 : i64
    %3762 = arith.extui %3761 : i32 to i64
    %3763 = arith.addi %3762, %c0_i64_2023 : i64
    %c4_i64_2024 = arith.constant 4 : i64
    %3764 = arith.addi %3763, %c4_i64_2024 : i64
    %c0_i32_2025 = arith.constant 0 : i32
    %3765 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2025) : (!llvm.ptr, i32) -> i32
    %3766 = arith.extui %3765 : i32 to i64
    %c65536_i64_2026 = arith.constant 65536 : i64
    %3767 = arith.muli %3766, %c65536_i64_2026 : i64
    %3768 = arith.cmpi ult, %3764, %3767 : i64
    cf.cond_br %3768, ^bb737, ^bb738
  ^bb731:  // pred: ^bb732
    %3769 = llvm.load %3 : !llvm.ptr -> i32
    %c656_i32_2027 = arith.constant 656 : i32
    %3770 = arith.addi %3769, %c656_i32_2027 : i32
    %c8_i32_2028 = arith.constant 8 : i32
    %3771 = arith.addi %3770, %c8_i32_2028 : i32
    %3772 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_2029 = arith.constant 1552 : i32
    %3773 = arith.addi %3772, %c1552_i32_2029 : i32
    %c8_i32_2030 = arith.constant 8 : i32
    %3774 = arith.addi %3773, %c8_i32_2030 : i32
    %c104_i32_2031 = arith.constant 104 : i32
    %3775 = call @f161(%arg0, %3771, %3774, %c104_i32_2031) : (!llvm.ptr, i32, i32, i32) -> i32
    %3776 = llvm.load %3 : !llvm.ptr -> i32
    %3777 = llvm.load %6 : !llvm.ptr -> i64
    %c656_i64_2032 = arith.constant 656 : i64
    %3778 = arith.extui %3776 : i32 to i64
    %3779 = arith.addi %3778, %c656_i64_2032 : i64
    %c8_i64_2033 = arith.constant 8 : i64
    %3780 = arith.addi %3779, %c8_i64_2033 : i64
    %c0_i32_2034 = arith.constant 0 : i32
    %3781 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2034) : (!llvm.ptr, i32) -> i32
    %3782 = arith.extui %3781 : i32 to i64
    %c65536_i64_2035 = arith.constant 65536 : i64
    %3783 = arith.muli %3782, %c65536_i64_2035 : i64
    %3784 = arith.cmpi ult, %3780, %3783 : i64
    cf.cond_br %3784, ^bb735, ^bb736
  ^bb732:  // 2 preds: ^bb728, ^bb733
    %3785 = llvm.getelementptr %11[%3752] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %3786 = llvm.load volatile %3785 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %3786, %6 : i64, !llvm.ptr
    %c2_i64_2036 = arith.constant 2 : i64
    %3787 = arith.cmpi eq, %3786, %c2_i64_2036 : i64
    %3788 = arith.extui %3787 : i1 to i32
    %c0_i32_2037 = arith.constant 0 : i32
    %3789 = arith.cmpi eq, %3788, %c0_i32_2037 : i32
    %3790 = arith.extui %3789 : i1 to i32
    %c0_i32_2038 = arith.constant 0 : i32
    %3791 = arith.cmpi ne, %3790, %c0_i32_2038 : i32
    cf.cond_br %3791, ^bb731, ^bb734
  ^bb733:  // pred: ^bb728
    %c1_i32_2039 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2039) : (i32) -> ()
    cf.br ^bb732
  ^bb734:  // pred: ^bb732
    %3792 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_2040 = arith.constant 1552 : i32
    %3793 = arith.addi %3792, %c1552_i32_2040 : i32
    call @f24(%arg0, %3793) : (!llvm.ptr, i32) -> ()
    %c0_i32_2041 = arith.constant 0 : i32
    llvm.store %c0_i32_2041, %2 : i32, !llvm.ptr
    cf.br ^bb730
  ^bb735:  // 2 preds: ^bb731, ^bb736
    %3794 = llvm.getelementptr %11[%3779] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %3777, %3794 {alignment = 1 : i64} : i64, !llvm.ptr
    %3795 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_2042 = arith.constant 1552 : i32
    %3796 = arith.addi %3795, %c1552_i32_2042 : i32
    %3797 = llvm.load %3 : !llvm.ptr -> i32
    %c656_i32_2043 = arith.constant 656 : i32
    %3798 = arith.addi %3797, %c656_i32_2043 : i32
    call @f16(%arg0, %3796, %3798) : (!llvm.ptr, i32, i32) -> ()
    %c1_i32_2044 = arith.constant 1 : i32
    llvm.store %c1_i32_2044, %2 : i32, !llvm.ptr
    cf.br ^bb730
  ^bb736:  // pred: ^bb731
    %c1_i32_2045 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2045) : (i32) -> ()
    cf.br ^bb735
  ^bb737:  // 2 preds: ^bb730, ^bb738
    %3799 = llvm.getelementptr %11[%3763] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %3800 = llvm.load volatile %3799 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_2046 = arith.constant 0 : i64
    %3801 = arith.extui %3759 : i32 to i64
    %3802 = arith.addi %3801, %c0_i64_2046 : i64
    %c4_i64_2047 = arith.constant 4 : i64
    %3803 = arith.addi %3802, %c4_i64_2047 : i64
    %c0_i32_2048 = arith.constant 0 : i32
    %3804 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2048) : (!llvm.ptr, i32) -> i32
    %3805 = arith.extui %3804 : i32 to i64
    %c65536_i64_2049 = arith.constant 65536 : i64
    %3806 = arith.muli %3805, %c65536_i64_2049 : i64
    %3807 = arith.cmpi ult, %3803, %3806 : i64
    cf.cond_br %3807, ^bb739, ^bb740
  ^bb738:  // pred: ^bb730
    %c1_i32_2050 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2050) : (i32) -> ()
    cf.br ^bb737
  ^bb739:  // 2 preds: ^bb737, ^bb740
    %3808 = llvm.getelementptr %11[%3802] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %3800, %3808 {alignment = 1 : i64} : i32, !llvm.ptr
    %3809 = llvm.load %3 : !llvm.ptr -> i32
    %3810 = llvm.load %2 : !llvm.ptr -> i32
    %c144_i64_2051 = arith.constant 144 : i64
    %3811 = arith.extui %3809 : i32 to i64
    %3812 = arith.addi %3811, %c144_i64_2051 : i64
    %c4_i64_2052 = arith.constant 4 : i64
    %3813 = arith.addi %3812, %c4_i64_2052 : i64
    %c0_i32_2053 = arith.constant 0 : i32
    %3814 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2053) : (!llvm.ptr, i32) -> i32
    %3815 = arith.extui %3814 : i32 to i64
    %c65536_i64_2054 = arith.constant 65536 : i64
    %3816 = arith.muli %3815, %c65536_i64_2054 : i64
    %3817 = arith.cmpi ult, %3813, %3816 : i64
    cf.cond_br %3817, ^bb741, ^bb742
  ^bb740:  // pred: ^bb737
    %c1_i32_2055 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2055) : (i32) -> ()
    cf.br ^bb739
  ^bb741:  // 2 preds: ^bb739, ^bb742
    %3818 = llvm.getelementptr %11[%3812] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %3810, %3818 {alignment = 1 : i64} : i32, !llvm.ptr
    %3819 = llvm.load %3 : !llvm.ptr -> i32
    %3820 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i64_2056 = arith.constant 1552 : i64
    %3821 = arith.extui %3820 : i32 to i64
    %3822 = arith.addi %3821, %c1552_i64_2056 : i64
    %c8_i64_2057 = arith.constant 8 : i64
    %3823 = arith.addi %3822, %c8_i64_2057 : i64
    %c0_i32_2058 = arith.constant 0 : i32
    %3824 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2058) : (!llvm.ptr, i32) -> i32
    %3825 = arith.extui %3824 : i32 to i64
    %c65536_i64_2059 = arith.constant 65536 : i64
    %3826 = arith.muli %3825, %c65536_i64_2059 : i64
    %3827 = arith.cmpi ult, %3823, %3826 : i64
    cf.cond_br %3827, ^bb743, ^bb744
  ^bb742:  // pred: ^bb739
    %c1_i32_2060 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2060) : (i32) -> ()
    cf.br ^bb741
  ^bb743:  // 2 preds: ^bb741, ^bb744
    %3828 = llvm.getelementptr %11[%3822] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %3829 = llvm.load volatile %3828 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c148_i64_2061 = arith.constant 148 : i64
    %3830 = arith.extui %3819 : i32 to i64
    %3831 = arith.addi %3830, %c148_i64_2061 : i64
    %c8_i64_2062 = arith.constant 8 : i64
    %3832 = arith.addi %3831, %c8_i64_2062 : i64
    %c0_i32_2063 = arith.constant 0 : i32
    %3833 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2063) : (!llvm.ptr, i32) -> i32
    %3834 = arith.extui %3833 : i32 to i64
    %c65536_i64_2064 = arith.constant 65536 : i64
    %3835 = arith.muli %3834, %c65536_i64_2064 : i64
    %3836 = arith.cmpi ult, %3832, %3835 : i64
    cf.cond_br %3836, ^bb745, ^bb746
  ^bb744:  // pred: ^bb741
    %c1_i32_2065 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2065) : (i32) -> ()
    cf.br ^bb743
  ^bb745:  // 2 preds: ^bb743, ^bb746
    %3837 = llvm.getelementptr %11[%3831] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %3829, %3837 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb29
  ^bb746:  // pred: ^bb743
    %c1_i32_2066 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2066) : (i32) -> ()
    cf.br ^bb745
  ^bb747:  // 2 preds: ^bb674, ^bb748
    %3838 = llvm.getelementptr %11[%3462] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %3839 = llvm.load volatile %3838 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_2067 = arith.constant 0 : i64
    %3840 = arith.extui %3457 : i32 to i64
    %3841 = arith.addi %3840, %c0_i64_2067 : i64
    %c8_i64_2068 = arith.constant 8 : i64
    %3842 = arith.addi %3841, %c8_i64_2068 : i64
    %c0_i32_2069 = arith.constant 0 : i32
    %3843 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2069) : (!llvm.ptr, i32) -> i32
    %3844 = arith.extui %3843 : i32 to i64
    %c65536_i64_2070 = arith.constant 65536 : i64
    %3845 = arith.muli %3844, %c65536_i64_2070 : i64
    %3846 = arith.cmpi ult, %3842, %3845 : i64
    cf.cond_br %3846, ^bb749, ^bb750
  ^bb748:  // pred: ^bb674
    %c1_i32_2071 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2071) : (i32) -> ()
    cf.br ^bb747
  ^bb749:  // 2 preds: ^bb747, ^bb750
    %3847 = llvm.getelementptr %11[%3841] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %3839, %3847 {alignment = 1 : i64} : i64, !llvm.ptr
    %3848 = llvm.load %3 : !llvm.ptr -> i32
    %c296_i32_2072 = arith.constant 296 : i32
    %3849 = arith.addi %3848, %c296_i32_2072 : i32
    %c12_i32_2073 = arith.constant 12 : i32
    %3850 = arith.addi %3849, %c12_i32_2073 : i32
    %3851 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_2074 = arith.constant 1552 : i32
    %3852 = arith.addi %3851, %c1552_i32_2074 : i32
    %c12_i32_2075 = arith.constant 12 : i32
    %3853 = arith.addi %3852, %c12_i32_2075 : i32
    %c0_i64_2076 = arith.constant 0 : i64
    %3854 = arith.extui %3853 : i32 to i64
    %3855 = arith.addi %3854, %c0_i64_2076 : i64
    %c8_i64_2077 = arith.constant 8 : i64
    %3856 = arith.addi %3855, %c8_i64_2077 : i64
    %c0_i32_2078 = arith.constant 0 : i32
    %3857 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2078) : (!llvm.ptr, i32) -> i32
    %3858 = arith.extui %3857 : i32 to i64
    %c65536_i64_2079 = arith.constant 65536 : i64
    %3859 = arith.muli %3858, %c65536_i64_2079 : i64
    %3860 = arith.cmpi ult, %3856, %3859 : i64
    cf.cond_br %3860, ^bb751, ^bb752
  ^bb750:  // pred: ^bb747
    %c1_i32_2080 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2080) : (i32) -> ()
    cf.br ^bb749
  ^bb751:  // 2 preds: ^bb749, ^bb752
    %3861 = llvm.getelementptr %11[%3855] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %3862 = llvm.load volatile %3861 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_2081 = arith.constant 0 : i64
    %3863 = arith.extui %3850 : i32 to i64
    %3864 = arith.addi %3863, %c0_i64_2081 : i64
    %c8_i64_2082 = arith.constant 8 : i64
    %3865 = arith.addi %3864, %c8_i64_2082 : i64
    %c0_i32_2083 = arith.constant 0 : i32
    %3866 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2083) : (!llvm.ptr, i32) -> i32
    %3867 = arith.extui %3866 : i32 to i64
    %c65536_i64_2084 = arith.constant 65536 : i64
    %3868 = arith.muli %3867, %c65536_i64_2084 : i64
    %3869 = arith.cmpi ult, %3865, %3868 : i64
    cf.cond_br %3869, ^bb753, ^bb754
  ^bb752:  // pred: ^bb749
    %c1_i32_2085 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2085) : (i32) -> ()
    cf.br ^bb751
  ^bb753:  // 2 preds: ^bb751, ^bb754
    %3870 = llvm.getelementptr %11[%3864] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %3862, %3870 {alignment = 1 : i64} : i64, !llvm.ptr
    %3871 = llvm.load %3 : !llvm.ptr -> i32
    %3872 = llvm.load %3 : !llvm.ptr -> i32
    %c1556_i64_2086 = arith.constant 1556 : i64
    %3873 = arith.extui %3872 : i32 to i64
    %3874 = arith.addi %3873, %c1556_i64_2086 : i64
    %c8_i64_2087 = arith.constant 8 : i64
    %3875 = arith.addi %3874, %c8_i64_2087 : i64
    %c0_i32_2088 = arith.constant 0 : i32
    %3876 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2088) : (!llvm.ptr, i32) -> i32
    %3877 = arith.extui %3876 : i32 to i64
    %c65536_i64_2089 = arith.constant 65536 : i64
    %3878 = arith.muli %3877, %c65536_i64_2089 : i64
    %3879 = arith.cmpi ult, %3875, %3878 : i64
    cf.cond_br %3879, ^bb755, ^bb756
  ^bb754:  // pred: ^bb751
    %c1_i32_2090 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2090) : (i32) -> ()
    cf.br ^bb753
  ^bb755:  // 2 preds: ^bb753, ^bb756
    %3880 = llvm.getelementptr %11[%3874] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %3881 = llvm.load volatile %3880 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c300_i64_2091 = arith.constant 300 : i64
    %3882 = arith.extui %3871 : i32 to i64
    %3883 = arith.addi %3882, %c300_i64_2091 : i64
    %c8_i64_2092 = arith.constant 8 : i64
    %3884 = arith.addi %3883, %c8_i64_2092 : i64
    %c0_i32_2093 = arith.constant 0 : i32
    %3885 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2093) : (!llvm.ptr, i32) -> i32
    %3886 = arith.extui %3885 : i32 to i64
    %c65536_i64_2094 = arith.constant 65536 : i64
    %3887 = arith.muli %3886, %c65536_i64_2094 : i64
    %3888 = arith.cmpi ult, %3884, %3887 : i64
    cf.cond_br %3888, ^bb757, ^bb758
  ^bb756:  // pred: ^bb753
    %c1_i32_2095 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2095) : (i32) -> ()
    cf.br ^bb755
  ^bb757:  // 2 preds: ^bb755, ^bb758
    %3889 = llvm.getelementptr %11[%3883] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %3881, %3889 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb673
  ^bb758:  // pred: ^bb755
    %c1_i32_2096 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2096) : (i32) -> ()
    cf.br ^bb757
  ^bb759:  // 2 preds: ^bb673, ^bb760
    %3890 = llvm.getelementptr %11[%3449] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %3891 = llvm.load volatile %3890 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_2097 = arith.constant 0 : i64
    %3892 = arith.extui %3445 : i32 to i64
    %3893 = arith.addi %3892, %c0_i64_2097 : i64
    %c8_i64_2098 = arith.constant 8 : i64
    %3894 = arith.addi %3893, %c8_i64_2098 : i64
    %c0_i32_2099 = arith.constant 0 : i32
    %3895 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2099) : (!llvm.ptr, i32) -> i32
    %3896 = arith.extui %3895 : i32 to i64
    %c65536_i64_2100 = arith.constant 65536 : i64
    %3897 = arith.muli %3896, %c65536_i64_2100 : i64
    %3898 = arith.cmpi ult, %3894, %3897 : i64
    cf.cond_br %3898, ^bb761, ^bb762
  ^bb760:  // pred: ^bb673
    %c1_i32_2101 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2101) : (i32) -> ()
    cf.br ^bb759
  ^bb761:  // 2 preds: ^bb759, ^bb762
    %3899 = llvm.getelementptr %11[%3893] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %3891, %3899 {alignment = 1 : i64} : i64, !llvm.ptr
    %3900 = llvm.load %3 : !llvm.ptr -> i32
    %c368_i32 = arith.constant 368 : i32
    %3901 = arith.addi %3900, %c368_i32 : i32
    %3902 = llvm.load %3 : !llvm.ptr -> i32
    %c308_i32 = arith.constant 308 : i32
    %3903 = arith.addi %3902, %c308_i32 : i32
    %c0_i64_2102 = arith.constant 0 : i64
    %3904 = arith.extui %3903 : i32 to i64
    %3905 = arith.addi %3904, %c0_i64_2102 : i64
    %c8_i64_2103 = arith.constant 8 : i64
    %3906 = arith.addi %3905, %c8_i64_2103 : i64
    %c0_i32_2104 = arith.constant 0 : i32
    %3907 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2104) : (!llvm.ptr, i32) -> i32
    %3908 = arith.extui %3907 : i32 to i64
    %c65536_i64_2105 = arith.constant 65536 : i64
    %3909 = arith.muli %3908, %c65536_i64_2105 : i64
    %3910 = arith.cmpi ult, %3906, %3909 : i64
    cf.cond_br %3910, ^bb763, ^bb764
  ^bb762:  // pred: ^bb759
    %c1_i32_2106 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2106) : (i32) -> ()
    cf.br ^bb761
  ^bb763:  // 2 preds: ^bb761, ^bb764
    %3911 = llvm.getelementptr %11[%3905] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %3912 = llvm.load volatile %3911 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_2107 = arith.constant 0 : i64
    %3913 = arith.extui %3901 : i32 to i64
    %3914 = arith.addi %3913, %c0_i64_2107 : i64
    %c8_i64_2108 = arith.constant 8 : i64
    %3915 = arith.addi %3914, %c8_i64_2108 : i64
    %c0_i32_2109 = arith.constant 0 : i32
    %3916 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2109) : (!llvm.ptr, i32) -> i32
    %3917 = arith.extui %3916 : i32 to i64
    %c65536_i64_2110 = arith.constant 65536 : i64
    %3918 = arith.muli %3917, %c65536_i64_2110 : i64
    %3919 = arith.cmpi ult, %3915, %3918 : i64
    cf.cond_br %3919, ^bb765, ^bb766
  ^bb764:  // pred: ^bb761
    %c1_i32_2111 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2111) : (i32) -> ()
    cf.br ^bb763
  ^bb765:  // 2 preds: ^bb763, ^bb766
    %3920 = llvm.getelementptr %11[%3914] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %3912, %3920 {alignment = 1 : i64} : i64, !llvm.ptr
    %3921 = llvm.load %3 : !llvm.ptr -> i32
    %3922 = llvm.load %3 : !llvm.ptr -> i32
    %c300_i64_2112 = arith.constant 300 : i64
    %3923 = arith.extui %3922 : i32 to i64
    %3924 = arith.addi %3923, %c300_i64_2112 : i64
    %c8_i64_2113 = arith.constant 8 : i64
    %3925 = arith.addi %3924, %c8_i64_2113 : i64
    %c0_i32_2114 = arith.constant 0 : i32
    %3926 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2114) : (!llvm.ptr, i32) -> i32
    %3927 = arith.extui %3926 : i32 to i64
    %c65536_i64_2115 = arith.constant 65536 : i64
    %3928 = arith.muli %3927, %c65536_i64_2115 : i64
    %3929 = arith.cmpi ult, %3925, %3928 : i64
    cf.cond_br %3929, ^bb767, ^bb768
  ^bb766:  // pred: ^bb763
    %c1_i32_2116 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2116) : (i32) -> ()
    cf.br ^bb765
  ^bb767:  // 2 preds: ^bb765, ^bb768
    %3930 = llvm.getelementptr %11[%3924] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %3931 = llvm.load volatile %3930 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c360_i64 = arith.constant 360 : i64
    %3932 = arith.extui %3921 : i32 to i64
    %3933 = arith.addi %3932, %c360_i64 : i64
    %c8_i64_2117 = arith.constant 8 : i64
    %3934 = arith.addi %3933, %c8_i64_2117 : i64
    %c0_i32_2118 = arith.constant 0 : i32
    %3935 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2118) : (!llvm.ptr, i32) -> i32
    %3936 = arith.extui %3935 : i32 to i64
    %c65536_i64_2119 = arith.constant 65536 : i64
    %3937 = arith.muli %3936, %c65536_i64_2119 : i64
    %3938 = arith.cmpi ult, %3934, %3937 : i64
    cf.cond_br %3938, ^bb769, ^bb770
  ^bb768:  // pred: ^bb765
    %c1_i32_2120 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2120) : (i32) -> ()
    cf.br ^bb767
  ^bb769:  // 2 preds: ^bb767, ^bb770
    %3939 = llvm.getelementptr %11[%3933] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %3931, %3939 {alignment = 1 : i64} : i64, !llvm.ptr
    %3940 = llvm.load %3 : !llvm.ptr -> i32
    %c360_i32 = arith.constant 360 : i32
    %3941 = arith.addi %3940, %c360_i32 : i32
    call @f63(%arg0, %3941) : (!llvm.ptr, i32) -> ()
    %3942 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_2121 = arith.constant 1 : i64
    %c152_i64_2122 = arith.constant 152 : i64
    %3943 = arith.extui %3942 : i32 to i64
    %3944 = arith.addi %3943, %c152_i64_2122 : i64
    %c8_i64_2123 = arith.constant 8 : i64
    %3945 = arith.addi %3944, %c8_i64_2123 : i64
    %c0_i32_2124 = arith.constant 0 : i32
    %3946 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2124) : (!llvm.ptr, i32) -> i32
    %3947 = arith.extui %3946 : i32 to i64
    %c65536_i64_2125 = arith.constant 65536 : i64
    %3948 = arith.muli %3947, %c65536_i64_2125 : i64
    %3949 = arith.cmpi ult, %3945, %3948 : i64
    cf.cond_br %3949, ^bb771, ^bb772
  ^bb770:  // pred: ^bb767
    %c1_i32_2126 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2126) : (i32) -> ()
    cf.br ^bb769
  ^bb771:  // 2 preds: ^bb769, ^bb772
    %3950 = llvm.getelementptr %11[%3944] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_2121, %3950 {alignment = 1 : i64} : i64, !llvm.ptr
    %3951 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_2127 = arith.constant 1 : i64
    %c144_i64_2128 = arith.constant 144 : i64
    %3952 = arith.extui %3951 : i32 to i64
    %3953 = arith.addi %3952, %c144_i64_2128 : i64
    %c8_i64_2129 = arith.constant 8 : i64
    %3954 = arith.addi %3953, %c8_i64_2129 : i64
    %c0_i32_2130 = arith.constant 0 : i32
    %3955 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2130) : (!llvm.ptr, i32) -> i32
    %3956 = arith.extui %3955 : i32 to i64
    %c65536_i64_2131 = arith.constant 65536 : i64
    %3957 = arith.muli %3956, %c65536_i64_2131 : i64
    %3958 = arith.cmpi ult, %3954, %3957 : i64
    cf.cond_br %3958, ^bb773, ^bb774
  ^bb772:  // pred: ^bb769
    %c1_i32_2132 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2132) : (i32) -> ()
    cf.br ^bb771
  ^bb773:  // 2 preds: ^bb771, ^bb774
    %3959 = llvm.getelementptr %11[%3953] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_2127, %3959 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb29
  ^bb774:  // pred: ^bb771
    %c1_i32_2133 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2133) : (i32) -> ()
    cf.br ^bb773
  ^bb775:  // pred: ^bb32
    %3960 = llvm.load %3 : !llvm.ptr -> i32
    %c-2147483648_i32_2134 = arith.constant -2147483648 : i32
    %c656_i64_2135 = arith.constant 656 : i64
    %3961 = arith.extui %3960 : i32 to i64
    %3962 = arith.addi %3961, %c656_i64_2135 : i64
    %c4_i64_2136 = arith.constant 4 : i64
    %3963 = arith.addi %3962, %c4_i64_2136 : i64
    %c0_i32_2137 = arith.constant 0 : i32
    %3964 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2137) : (!llvm.ptr, i32) -> i32
    %3965 = arith.extui %3964 : i32 to i64
    %c65536_i64_2138 = arith.constant 65536 : i64
    %3966 = arith.muli %3965, %c65536_i64_2138 : i64
    %3967 = arith.cmpi ult, %3963, %3966 : i64
    cf.cond_br %3967, ^bb783, ^bb784
  ^bb776:  // pred: ^bb32
    %3968 = llvm.load %3 : !llvm.ptr -> i32
    %c156_i32_2139 = arith.constant 156 : i32
    %3969 = arith.addi %3968, %c156_i32_2139 : i32
    %c0_i32_2140 = arith.constant 0 : i32
    %c0_i64_2141 = arith.constant 0 : i64
    %3970 = arith.extui %3969 : i32 to i64
    %3971 = arith.addi %3970, %c0_i64_2141 : i64
    %c4_i64_2142 = arith.constant 4 : i64
    %3972 = arith.addi %3971, %c4_i64_2142 : i64
    %c0_i32_2143 = arith.constant 0 : i32
    %3973 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2143) : (!llvm.ptr, i32) -> i32
    %3974 = arith.extui %3973 : i32 to i64
    %c65536_i64_2144 = arith.constant 65536 : i64
    %3975 = arith.muli %3974, %c65536_i64_2144 : i64
    %3976 = arith.cmpi ult, %3972, %3975 : i64
    cf.cond_br %3976, ^bb777, ^bb778
  ^bb777:  // 2 preds: ^bb776, ^bb778
    %3977 = llvm.getelementptr %11[%3971] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_2140, %3977 {alignment = 1 : i64} : i32, !llvm.ptr
    %3978 = llvm.load %3 : !llvm.ptr -> i32
    %c4294967296_i64_2145 = arith.constant 4294967296 : i64
    %c148_i64_2146 = arith.constant 148 : i64
    %3979 = arith.extui %3978 : i32 to i64
    %3980 = arith.addi %3979, %c148_i64_2146 : i64
    %c8_i64_2147 = arith.constant 8 : i64
    %3981 = arith.addi %3980, %c8_i64_2147 : i64
    %c0_i32_2148 = arith.constant 0 : i32
    %3982 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2148) : (!llvm.ptr, i32) -> i32
    %3983 = arith.extui %3982 : i32 to i64
    %c65536_i64_2149 = arith.constant 65536 : i64
    %3984 = arith.muli %3983, %c65536_i64_2149 : i64
    %3985 = arith.cmpi ult, %3981, %3984 : i64
    cf.cond_br %3985, ^bb779, ^bb780
  ^bb778:  // pred: ^bb776
    %c1_i32_2150 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2150) : (i32) -> ()
    cf.br ^bb777
  ^bb779:  // 2 preds: ^bb777, ^bb780
    %3986 = llvm.getelementptr %11[%3980] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4294967296_i64_2145, %3986 {alignment = 1 : i64} : i64, !llvm.ptr
    %3987 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_2151 = arith.constant 1 : i32
    %c144_i64_2152 = arith.constant 144 : i64
    %3988 = arith.extui %3987 : i32 to i64
    %3989 = arith.addi %3988, %c144_i64_2152 : i64
    %c4_i64_2153 = arith.constant 4 : i64
    %3990 = arith.addi %3989, %c4_i64_2153 : i64
    %c0_i32_2154 = arith.constant 0 : i32
    %3991 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2154) : (!llvm.ptr, i32) -> i32
    %3992 = arith.extui %3991 : i32 to i64
    %c65536_i64_2155 = arith.constant 65536 : i64
    %3993 = arith.muli %3992, %c65536_i64_2155 : i64
    %3994 = arith.cmpi ult, %3990, %3993 : i64
    cf.cond_br %3994, ^bb781, ^bb782
  ^bb780:  // pred: ^bb777
    %c1_i32_2156 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2156) : (i32) -> ()
    cf.br ^bb779
  ^bb781:  // 2 preds: ^bb779, ^bb782
    %3995 = llvm.getelementptr %11[%3989] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_2151, %3995 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb29
  ^bb782:  // pred: ^bb779
    %c1_i32_2157 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2157) : (i32) -> ()
    cf.br ^bb781
  ^bb783:  // 2 preds: ^bb775, ^bb784
    %3996 = llvm.getelementptr %11[%3962] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-2147483648_i32_2134, %3996 {alignment = 1 : i64} : i32, !llvm.ptr
    %3997 = llvm.load %3 : !llvm.ptr -> i32
    %c656_i32_2158 = arith.constant 656 : i32
    %3998 = arith.addi %3997, %c656_i32_2158 : i32
    call @f4(%arg0, %3998) : (!llvm.ptr, i32) -> ()
    %3999 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_2159 = arith.constant 1552 : i32
    %4000 = arith.addi %3999, %c1552_i32_2159 : i32
    %4001 = llvm.load %5 : !llvm.ptr -> i32
    %4002 = llvm.load %4 : !llvm.ptr -> i32
    call @f22(%arg0, %4000, %4001, %4002) : (!llvm.ptr, i32, i32, i32) -> ()
    %4003 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i64_2160 = arith.constant 1552 : i64
    %4004 = arith.extui %4003 : i32 to i64
    %4005 = arith.addi %4004, %c1552_i64_2160 : i64
    %c4_i64_2161 = arith.constant 4 : i64
    %4006 = arith.addi %4005, %c4_i64_2161 : i64
    %c0_i32_2162 = arith.constant 0 : i32
    %4007 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2162) : (!llvm.ptr, i32) -> i32
    %4008 = arith.extui %4007 : i32 to i64
    %c65536_i64_2163 = arith.constant 65536 : i64
    %4009 = arith.muli %4008, %c65536_i64_2163 : i64
    %4010 = arith.cmpi ult, %4006, %4009 : i64
    cf.cond_br %4010, ^bb786, ^bb787
  ^bb784:  // pred: ^bb775
    %c1_i32_2164 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2164) : (i32) -> ()
    cf.br ^bb783
  ^bb785:  // pred: ^bb786
    %4011 = llvm.load %3 : !llvm.ptr -> i32
    %c400_i32 = arith.constant 400 : i32
    %4012 = arith.addi %4011, %c400_i32 : i32
    %4013 = llvm.load %3 : !llvm.ptr -> i32
    %c1572_i32_2165 = arith.constant 1572 : i32
    %4014 = arith.addi %4013, %c1572_i32_2165 : i32
    %c0_i64_2166 = arith.constant 0 : i64
    %4015 = arith.extui %4014 : i32 to i64
    %4016 = arith.addi %4015, %c0_i64_2166 : i64
    %c8_i64_2167 = arith.constant 8 : i64
    %4017 = arith.addi %4016, %c8_i64_2167 : i64
    %c0_i32_2168 = arith.constant 0 : i32
    %4018 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2168) : (!llvm.ptr, i32) -> i32
    %4019 = arith.extui %4018 : i32 to i64
    %c65536_i64_2169 = arith.constant 65536 : i64
    %4020 = arith.muli %4019, %c65536_i64_2169 : i64
    %4021 = arith.cmpi ult, %4017, %4020 : i64
    cf.cond_br %4021, ^bb820, ^bb821
  ^bb786:  // 2 preds: ^bb783, ^bb787
    %4022 = llvm.getelementptr %11[%4005] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %4023 = llvm.load volatile %4022 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_2170 = arith.constant 0 : i32
    %4024 = arith.cmpi ne, %4023, %c0_i32_2170 : i32
    cf.cond_br %4024, ^bb785, ^bb788
  ^bb787:  // pred: ^bb783
    %c1_i32_2171 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2171) : (i32) -> ()
    cf.br ^bb786
  ^bb788:  // pred: ^bb786
    %4025 = llvm.load %3 : !llvm.ptr -> i32
    %c624_i32 = arith.constant 624 : i32
    %4026 = arith.addi %4025, %c624_i32 : i32
    %c24_i32_2172 = arith.constant 24 : i32
    %4027 = arith.addi %4026, %c24_i32_2172 : i32
    %4028 = llvm.load %3 : !llvm.ptr -> i32
    %c1584_i32_2173 = arith.constant 1584 : i32
    %4029 = arith.addi %4028, %c1584_i32_2173 : i32
    %c0_i64_2174 = arith.constant 0 : i64
    %4030 = arith.extui %4029 : i32 to i64
    %4031 = arith.addi %4030, %c0_i64_2174 : i64
    %c8_i64_2175 = arith.constant 8 : i64
    %4032 = arith.addi %4031, %c8_i64_2175 : i64
    %c0_i32_2176 = arith.constant 0 : i32
    %4033 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2176) : (!llvm.ptr, i32) -> i32
    %4034 = arith.extui %4033 : i32 to i64
    %c65536_i64_2177 = arith.constant 65536 : i64
    %4035 = arith.muli %4034, %c65536_i64_2177 : i64
    %4036 = arith.cmpi ult, %4032, %4035 : i64
    cf.cond_br %4036, ^bb789, ^bb790
  ^bb789:  // 2 preds: ^bb788, ^bb790
    %4037 = llvm.getelementptr %11[%4031] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %4038 = llvm.load volatile %4037 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_2178 = arith.constant 0 : i64
    %4039 = arith.extui %4027 : i32 to i64
    %4040 = arith.addi %4039, %c0_i64_2178 : i64
    %c8_i64_2179 = arith.constant 8 : i64
    %4041 = arith.addi %4040, %c8_i64_2179 : i64
    %c0_i32_2180 = arith.constant 0 : i32
    %4042 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2180) : (!llvm.ptr, i32) -> i32
    %4043 = arith.extui %4042 : i32 to i64
    %c65536_i64_2181 = arith.constant 65536 : i64
    %4044 = arith.muli %4043, %c65536_i64_2181 : i64
    %4045 = arith.cmpi ult, %4041, %4044 : i64
    cf.cond_br %4045, ^bb791, ^bb792
  ^bb790:  // pred: ^bb788
    %c1_i32_2182 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2182) : (i32) -> ()
    cf.br ^bb789
  ^bb791:  // 2 preds: ^bb789, ^bb792
    %4046 = llvm.getelementptr %11[%4040] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %4038, %4046 {alignment = 1 : i64} : i64, !llvm.ptr
    %4047 = llvm.load %3 : !llvm.ptr -> i32
    %c624_i32_2183 = arith.constant 624 : i32
    %4048 = arith.addi %4047, %c624_i32_2183 : i32
    %c16_i32_2184 = arith.constant 16 : i32
    %4049 = arith.addi %4048, %c16_i32_2184 : i32
    %4050 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_2185 = arith.constant 1552 : i32
    %4051 = arith.addi %4050, %c1552_i32_2185 : i32
    %c24_i32_2186 = arith.constant 24 : i32
    %4052 = arith.addi %4051, %c24_i32_2186 : i32
    %c0_i64_2187 = arith.constant 0 : i64
    %4053 = arith.extui %4052 : i32 to i64
    %4054 = arith.addi %4053, %c0_i64_2187 : i64
    %c8_i64_2188 = arith.constant 8 : i64
    %4055 = arith.addi %4054, %c8_i64_2188 : i64
    %c0_i32_2189 = arith.constant 0 : i32
    %4056 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2189) : (!llvm.ptr, i32) -> i32
    %4057 = arith.extui %4056 : i32 to i64
    %c65536_i64_2190 = arith.constant 65536 : i64
    %4058 = arith.muli %4057, %c65536_i64_2190 : i64
    %4059 = arith.cmpi ult, %4055, %4058 : i64
    cf.cond_br %4059, ^bb793, ^bb794
  ^bb792:  // pred: ^bb789
    %c1_i32_2191 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2191) : (i32) -> ()
    cf.br ^bb791
  ^bb793:  // 2 preds: ^bb791, ^bb794
    %4060 = llvm.getelementptr %11[%4054] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %4061 = llvm.load volatile %4060 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_2192 = arith.constant 0 : i64
    %4062 = arith.extui %4049 : i32 to i64
    %4063 = arith.addi %4062, %c0_i64_2192 : i64
    %c8_i64_2193 = arith.constant 8 : i64
    %4064 = arith.addi %4063, %c8_i64_2193 : i64
    %c0_i32_2194 = arith.constant 0 : i32
    %4065 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2194) : (!llvm.ptr, i32) -> i32
    %4066 = arith.extui %4065 : i32 to i64
    %c65536_i64_2195 = arith.constant 65536 : i64
    %4067 = arith.muli %4066, %c65536_i64_2195 : i64
    %4068 = arith.cmpi ult, %4064, %4067 : i64
    cf.cond_br %4068, ^bb795, ^bb796
  ^bb794:  // pred: ^bb791
    %c1_i32_2196 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2196) : (i32) -> ()
    cf.br ^bb793
  ^bb795:  // 2 preds: ^bb793, ^bb796
    %4069 = llvm.getelementptr %11[%4063] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %4061, %4069 {alignment = 1 : i64} : i64, !llvm.ptr
    %4070 = llvm.load %3 : !llvm.ptr -> i32
    %c632_i32 = arith.constant 632 : i32
    %4071 = arith.addi %4070, %c632_i32 : i32
    %4072 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_2197 = arith.constant 1552 : i32
    %4073 = arith.addi %4072, %c1552_i32_2197 : i32
    %c16_i32_2198 = arith.constant 16 : i32
    %4074 = arith.addi %4073, %c16_i32_2198 : i32
    %c0_i64_2199 = arith.constant 0 : i64
    %4075 = arith.extui %4074 : i32 to i64
    %4076 = arith.addi %4075, %c0_i64_2199 : i64
    %c8_i64_2200 = arith.constant 8 : i64
    %4077 = arith.addi %4076, %c8_i64_2200 : i64
    %c0_i32_2201 = arith.constant 0 : i32
    %4078 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2201) : (!llvm.ptr, i32) -> i32
    %4079 = arith.extui %4078 : i32 to i64
    %c65536_i64_2202 = arith.constant 65536 : i64
    %4080 = arith.muli %4079, %c65536_i64_2202 : i64
    %4081 = arith.cmpi ult, %4077, %4080 : i64
    cf.cond_br %4081, ^bb797, ^bb798
  ^bb796:  // pred: ^bb793
    %c1_i32_2203 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2203) : (i32) -> ()
    cf.br ^bb795
  ^bb797:  // 2 preds: ^bb795, ^bb798
    %4082 = llvm.getelementptr %11[%4076] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %4083 = llvm.load volatile %4082 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_2204 = arith.constant 0 : i64
    %4084 = arith.extui %4071 : i32 to i64
    %4085 = arith.addi %4084, %c0_i64_2204 : i64
    %c8_i64_2205 = arith.constant 8 : i64
    %4086 = arith.addi %4085, %c8_i64_2205 : i64
    %c0_i32_2206 = arith.constant 0 : i32
    %4087 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2206) : (!llvm.ptr, i32) -> i32
    %4088 = arith.extui %4087 : i32 to i64
    %c65536_i64_2207 = arith.constant 65536 : i64
    %4089 = arith.muli %4088, %c65536_i64_2207 : i64
    %4090 = arith.cmpi ult, %4086, %4089 : i64
    cf.cond_br %4090, ^bb799, ^bb800
  ^bb798:  // pred: ^bb795
    %c1_i32_2208 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2208) : (i32) -> ()
    cf.br ^bb797
  ^bb799:  // 2 preds: ^bb797, ^bb800
    %4091 = llvm.getelementptr %11[%4085] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %4083, %4091 {alignment = 1 : i64} : i64, !llvm.ptr
    %4092 = llvm.load %3 : !llvm.ptr -> i32
    %4093 = llvm.load %3 : !llvm.ptr -> i32
    %c1560_i64_2209 = arith.constant 1560 : i64
    %4094 = arith.extui %4093 : i32 to i64
    %4095 = arith.addi %4094, %c1560_i64_2209 : i64
    %c8_i64_2210 = arith.constant 8 : i64
    %4096 = arith.addi %4095, %c8_i64_2210 : i64
    %c0_i32_2211 = arith.constant 0 : i32
    %4097 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2211) : (!llvm.ptr, i32) -> i32
    %4098 = arith.extui %4097 : i32 to i64
    %c65536_i64_2212 = arith.constant 65536 : i64
    %4099 = arith.muli %4098, %c65536_i64_2212 : i64
    %4100 = arith.cmpi ult, %4096, %4099 : i64
    cf.cond_br %4100, ^bb801, ^bb802
  ^bb800:  // pred: ^bb797
    %c1_i32_2213 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2213) : (i32) -> ()
    cf.br ^bb799
  ^bb801:  // 2 preds: ^bb799, ^bb802
    %4101 = llvm.getelementptr %11[%4095] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %4102 = llvm.load volatile %4101 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c624_i64 = arith.constant 624 : i64
    %4103 = arith.extui %4092 : i32 to i64
    %4104 = arith.addi %4103, %c624_i64 : i64
    %c8_i64_2214 = arith.constant 8 : i64
    %4105 = arith.addi %4104, %c8_i64_2214 : i64
    %c0_i32_2215 = arith.constant 0 : i32
    %4106 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2215) : (!llvm.ptr, i32) -> i32
    %4107 = arith.extui %4106 : i32 to i64
    %c65536_i64_2216 = arith.constant 65536 : i64
    %4108 = arith.muli %4107, %c65536_i64_2216 : i64
    %4109 = arith.cmpi ult, %4105, %4108 : i64
    cf.cond_br %4109, ^bb803, ^bb804
  ^bb802:  // pred: ^bb799
    %c1_i32_2217 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2217) : (i32) -> ()
    cf.br ^bb801
  ^bb803:  // 2 preds: ^bb801, ^bb804
    %4110 = llvm.getelementptr %11[%4104] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %4102, %4110 {alignment = 1 : i64} : i64, !llvm.ptr
    %4111 = llvm.load %3 : !llvm.ptr -> i32
    %c408_i32 = arith.constant 408 : i32
    %4112 = arith.addi %4111, %c408_i32 : i32
    %4113 = llvm.load %3 : !llvm.ptr -> i32
    %4114 = llvm.load %3 : !llvm.ptr -> i32
    %c624_i32_2218 = arith.constant 624 : i32
    %4115 = arith.addi %4114, %c624_i32_2218 : i32
    call @f29(%arg0, %4112, %4113, %4115) : (!llvm.ptr, i32, i32, i32) -> ()
    %4116 = llvm.load %3 : !llvm.ptr -> i32
    %c408_i64 = arith.constant 408 : i64
    %4117 = arith.extui %4116 : i32 to i64
    %4118 = arith.addi %4117, %c408_i64 : i64
    %c8_i64_2219 = arith.constant 8 : i64
    %4119 = arith.addi %4118, %c8_i64_2219 : i64
    %c0_i32_2220 = arith.constant 0 : i32
    %4120 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2220) : (!llvm.ptr, i32) -> i32
    %4121 = arith.extui %4120 : i32 to i64
    %c65536_i64_2221 = arith.constant 65536 : i64
    %4122 = arith.muli %4121, %c65536_i64_2221 : i64
    %4123 = arith.cmpi ult, %4119, %4122 : i64
    cf.cond_br %4123, ^bb807, ^bb808
  ^bb804:  // pred: ^bb801
    %c1_i32_2222 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2222) : (i32) -> ()
    cf.br ^bb803
  ^bb805:  // 2 preds: ^bb806, ^bb809
    %4124 = llvm.load %3 : !llvm.ptr -> i32
    %c156_i32_2223 = arith.constant 156 : i32
    %4125 = arith.addi %4124, %c156_i32_2223 : i32
    %4126 = llvm.load %3 : !llvm.ptr -> i32
    %c1560_i32_2224 = arith.constant 1560 : i32
    %4127 = arith.addi %4126, %c1560_i32_2224 : i32
    %c0_i64_2225 = arith.constant 0 : i64
    %4128 = arith.extui %4127 : i32 to i64
    %4129 = arith.addi %4128, %c0_i64_2225 : i64
    %c4_i64_2226 = arith.constant 4 : i64
    %4130 = arith.addi %4129, %c4_i64_2226 : i64
    %c0_i32_2227 = arith.constant 0 : i32
    %4131 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2227) : (!llvm.ptr, i32) -> i32
    %4132 = arith.extui %4131 : i32 to i64
    %c65536_i64_2228 = arith.constant 65536 : i64
    %4133 = arith.muli %4132, %c65536_i64_2228 : i64
    %4134 = arith.cmpi ult, %4130, %4133 : i64
    cf.cond_br %4134, ^bb810, ^bb811
  ^bb806:  // pred: ^bb807
    %4135 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_2229 = arith.constant 1552 : i32
    %4136 = arith.addi %4135, %c1552_i32_2229 : i32
    %4137 = llvm.load %3 : !llvm.ptr -> i32
    %c408_i32_2230 = arith.constant 408 : i32
    %4138 = arith.addi %4137, %c408_i32_2230 : i32
    call @f16(%arg0, %4136, %4138) : (!llvm.ptr, i32, i32) -> ()
    %c1_i32_2231 = arith.constant 1 : i32
    llvm.store %c1_i32_2231, %2 : i32, !llvm.ptr
    cf.br ^bb805
  ^bb807:  // 2 preds: ^bb803, ^bb808
    %4139 = llvm.getelementptr %11[%4118] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %4140 = llvm.load volatile %4139 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c2_i64_2232 = arith.constant 2 : i64
    %4141 = arith.cmpi eq, %4140, %c2_i64_2232 : i64
    %4142 = arith.extui %4141 : i1 to i32
    %c0_i32_2233 = arith.constant 0 : i32
    %4143 = arith.cmpi eq, %4142, %c0_i32_2233 : i32
    %4144 = arith.extui %4143 : i1 to i32
    %c0_i32_2234 = arith.constant 0 : i32
    %4145 = arith.cmpi ne, %4144, %c0_i32_2234 : i32
    cf.cond_br %4145, ^bb806, ^bb809
  ^bb808:  // pred: ^bb803
    %c1_i32_2235 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2235) : (i32) -> ()
    cf.br ^bb807
  ^bb809:  // pred: ^bb807
    %4146 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_2236 = arith.constant 1552 : i32
    %4147 = arith.addi %4146, %c1552_i32_2236 : i32
    call @f24(%arg0, %4147) : (!llvm.ptr, i32) -> ()
    %c0_i32_2237 = arith.constant 0 : i32
    llvm.store %c0_i32_2237, %2 : i32, !llvm.ptr
    cf.br ^bb805
  ^bb810:  // 2 preds: ^bb805, ^bb811
    %4148 = llvm.getelementptr %11[%4129] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %4149 = llvm.load volatile %4148 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_2238 = arith.constant 0 : i64
    %4150 = arith.extui %4125 : i32 to i64
    %4151 = arith.addi %4150, %c0_i64_2238 : i64
    %c4_i64_2239 = arith.constant 4 : i64
    %4152 = arith.addi %4151, %c4_i64_2239 : i64
    %c0_i32_2240 = arith.constant 0 : i32
    %4153 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2240) : (!llvm.ptr, i32) -> i32
    %4154 = arith.extui %4153 : i32 to i64
    %c65536_i64_2241 = arith.constant 65536 : i64
    %4155 = arith.muli %4154, %c65536_i64_2241 : i64
    %4156 = arith.cmpi ult, %4152, %4155 : i64
    cf.cond_br %4156, ^bb812, ^bb813
  ^bb811:  // pred: ^bb805
    %c1_i32_2242 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2242) : (i32) -> ()
    cf.br ^bb810
  ^bb812:  // 2 preds: ^bb810, ^bb813
    %4157 = llvm.getelementptr %11[%4151] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %4149, %4157 {alignment = 1 : i64} : i32, !llvm.ptr
    %4158 = llvm.load %3 : !llvm.ptr -> i32
    %4159 = llvm.load %2 : !llvm.ptr -> i32
    %c144_i64_2243 = arith.constant 144 : i64
    %4160 = arith.extui %4158 : i32 to i64
    %4161 = arith.addi %4160, %c144_i64_2243 : i64
    %c4_i64_2244 = arith.constant 4 : i64
    %4162 = arith.addi %4161, %c4_i64_2244 : i64
    %c0_i32_2245 = arith.constant 0 : i32
    %4163 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2245) : (!llvm.ptr, i32) -> i32
    %4164 = arith.extui %4163 : i32 to i64
    %c65536_i64_2246 = arith.constant 65536 : i64
    %4165 = arith.muli %4164, %c65536_i64_2246 : i64
    %4166 = arith.cmpi ult, %4162, %4165 : i64
    cf.cond_br %4166, ^bb814, ^bb815
  ^bb813:  // pred: ^bb810
    %c1_i32_2247 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2247) : (i32) -> ()
    cf.br ^bb812
  ^bb814:  // 2 preds: ^bb812, ^bb815
    %4167 = llvm.getelementptr %11[%4161] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %4159, %4167 {alignment = 1 : i64} : i32, !llvm.ptr
    %4168 = llvm.load %3 : !llvm.ptr -> i32
    %4169 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i64_2248 = arith.constant 1552 : i64
    %4170 = arith.extui %4169 : i32 to i64
    %4171 = arith.addi %4170, %c1552_i64_2248 : i64
    %c8_i64_2249 = arith.constant 8 : i64
    %4172 = arith.addi %4171, %c8_i64_2249 : i64
    %c0_i32_2250 = arith.constant 0 : i32
    %4173 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2250) : (!llvm.ptr, i32) -> i32
    %4174 = arith.extui %4173 : i32 to i64
    %c65536_i64_2251 = arith.constant 65536 : i64
    %4175 = arith.muli %4174, %c65536_i64_2251 : i64
    %4176 = arith.cmpi ult, %4172, %4175 : i64
    cf.cond_br %4176, ^bb816, ^bb817
  ^bb815:  // pred: ^bb812
    %c1_i32_2252 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2252) : (i32) -> ()
    cf.br ^bb814
  ^bb816:  // 2 preds: ^bb814, ^bb817
    %4177 = llvm.getelementptr %11[%4171] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %4178 = llvm.load volatile %4177 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c148_i64_2253 = arith.constant 148 : i64
    %4179 = arith.extui %4168 : i32 to i64
    %4180 = arith.addi %4179, %c148_i64_2253 : i64
    %c8_i64_2254 = arith.constant 8 : i64
    %4181 = arith.addi %4180, %c8_i64_2254 : i64
    %c0_i32_2255 = arith.constant 0 : i32
    %4182 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2255) : (!llvm.ptr, i32) -> i32
    %4183 = arith.extui %4182 : i32 to i64
    %c65536_i64_2256 = arith.constant 65536 : i64
    %4184 = arith.muli %4183, %c65536_i64_2256 : i64
    %4185 = arith.cmpi ult, %4181, %4184 : i64
    cf.cond_br %4185, ^bb818, ^bb819
  ^bb817:  // pred: ^bb814
    %c1_i32_2257 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2257) : (i32) -> ()
    cf.br ^bb816
  ^bb818:  // 2 preds: ^bb816, ^bb819
    %4186 = llvm.getelementptr %11[%4180] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %4178, %4186 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb29
  ^bb819:  // pred: ^bb816
    %c1_i32_2258 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2258) : (i32) -> ()
    cf.br ^bb818
  ^bb820:  // 2 preds: ^bb785, ^bb821
    %4187 = llvm.getelementptr %11[%4016] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %4188 = llvm.load volatile %4187 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_2259 = arith.constant 0 : i64
    %4189 = arith.extui %4012 : i32 to i64
    %4190 = arith.addi %4189, %c0_i64_2259 : i64
    %c8_i64_2260 = arith.constant 8 : i64
    %4191 = arith.addi %4190, %c8_i64_2260 : i64
    %c0_i32_2261 = arith.constant 0 : i32
    %4192 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2261) : (!llvm.ptr, i32) -> i32
    %4193 = arith.extui %4192 : i32 to i64
    %c65536_i64_2262 = arith.constant 65536 : i64
    %4194 = arith.muli %4193, %c65536_i64_2262 : i64
    %4195 = arith.cmpi ult, %4191, %4194 : i64
    cf.cond_br %4195, ^bb822, ^bb823
  ^bb821:  // pred: ^bb785
    %c1_i32_2263 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2263) : (i32) -> ()
    cf.br ^bb820
  ^bb822:  // 2 preds: ^bb820, ^bb823
    %4196 = llvm.getelementptr %11[%4190] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %4188, %4196 {alignment = 1 : i64} : i64, !llvm.ptr
    %4197 = llvm.load %3 : !llvm.ptr -> i32
    %c392_i32 = arith.constant 392 : i32
    %4198 = arith.addi %4197, %c392_i32 : i32
    %4199 = llvm.load %3 : !llvm.ptr -> i32
    %c1564_i32_2264 = arith.constant 1564 : i32
    %4200 = arith.addi %4199, %c1564_i32_2264 : i32
    %c0_i64_2265 = arith.constant 0 : i64
    %4201 = arith.extui %4200 : i32 to i64
    %4202 = arith.addi %4201, %c0_i64_2265 : i64
    %c8_i64_2266 = arith.constant 8 : i64
    %4203 = arith.addi %4202, %c8_i64_2266 : i64
    %c0_i32_2267 = arith.constant 0 : i32
    %4204 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2267) : (!llvm.ptr, i32) -> i32
    %4205 = arith.extui %4204 : i32 to i64
    %c65536_i64_2268 = arith.constant 65536 : i64
    %4206 = arith.muli %4205, %c65536_i64_2268 : i64
    %4207 = arith.cmpi ult, %4203, %4206 : i64
    cf.cond_br %4207, ^bb824, ^bb825
  ^bb823:  // pred: ^bb820
    %c1_i32_2269 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2269) : (i32) -> ()
    cf.br ^bb822
  ^bb824:  // 2 preds: ^bb822, ^bb825
    %4208 = llvm.getelementptr %11[%4202] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %4209 = llvm.load volatile %4208 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_2270 = arith.constant 0 : i64
    %4210 = arith.extui %4198 : i32 to i64
    %4211 = arith.addi %4210, %c0_i64_2270 : i64
    %c8_i64_2271 = arith.constant 8 : i64
    %4212 = arith.addi %4211, %c8_i64_2271 : i64
    %c0_i32_2272 = arith.constant 0 : i32
    %4213 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2272) : (!llvm.ptr, i32) -> i32
    %4214 = arith.extui %4213 : i32 to i64
    %c65536_i64_2273 = arith.constant 65536 : i64
    %4215 = arith.muli %4214, %c65536_i64_2273 : i64
    %4216 = arith.cmpi ult, %4212, %4215 : i64
    cf.cond_br %4216, ^bb826, ^bb827
  ^bb825:  // pred: ^bb822
    %c1_i32_2274 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2274) : (i32) -> ()
    cf.br ^bb824
  ^bb826:  // 2 preds: ^bb824, ^bb827
    %4217 = llvm.getelementptr %11[%4211] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %4209, %4217 {alignment = 1 : i64} : i64, !llvm.ptr
    %4218 = llvm.load %3 : !llvm.ptr -> i32
    %4219 = llvm.load %3 : !llvm.ptr -> i32
    %c1556_i64_2275 = arith.constant 1556 : i64
    %4220 = arith.extui %4219 : i32 to i64
    %4221 = arith.addi %4220, %c1556_i64_2275 : i64
    %c8_i64_2276 = arith.constant 8 : i64
    %4222 = arith.addi %4221, %c8_i64_2276 : i64
    %c0_i32_2277 = arith.constant 0 : i32
    %4223 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2277) : (!llvm.ptr, i32) -> i32
    %4224 = arith.extui %4223 : i32 to i64
    %c65536_i64_2278 = arith.constant 65536 : i64
    %4225 = arith.muli %4224, %c65536_i64_2278 : i64
    %4226 = arith.cmpi ult, %4222, %4225 : i64
    cf.cond_br %4226, ^bb828, ^bb829
  ^bb827:  // pred: ^bb824
    %c1_i32_2279 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2279) : (i32) -> ()
    cf.br ^bb826
  ^bb828:  // 2 preds: ^bb826, ^bb829
    %4227 = llvm.getelementptr %11[%4221] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %4228 = llvm.load volatile %4227 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c384_i64 = arith.constant 384 : i64
    %4229 = arith.extui %4218 : i32 to i64
    %4230 = arith.addi %4229, %c384_i64 : i64
    %c8_i64_2280 = arith.constant 8 : i64
    %4231 = arith.addi %4230, %c8_i64_2280 : i64
    %c0_i32_2281 = arith.constant 0 : i32
    %4232 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2281) : (!llvm.ptr, i32) -> i32
    %4233 = arith.extui %4232 : i32 to i64
    %c65536_i64_2282 = arith.constant 65536 : i64
    %4234 = arith.muli %4233, %c65536_i64_2282 : i64
    %4235 = arith.cmpi ult, %4231, %4234 : i64
    cf.cond_br %4235, ^bb830, ^bb831
  ^bb829:  // pred: ^bb826
    %c1_i32_2283 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2283) : (i32) -> ()
    cf.br ^bb828
  ^bb830:  // 2 preds: ^bb828, ^bb831
    %4236 = llvm.getelementptr %11[%4230] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %4228, %4236 {alignment = 1 : i64} : i64, !llvm.ptr
    %4237 = llvm.load %3 : !llvm.ptr -> i32
    %c384_i32 = arith.constant 384 : i32
    %4238 = arith.addi %4237, %c384_i32 : i32
    call @f63(%arg0, %4238) : (!llvm.ptr, i32) -> ()
    %4239 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_2284 = arith.constant 1 : i64
    %c152_i64_2285 = arith.constant 152 : i64
    %4240 = arith.extui %4239 : i32 to i64
    %4241 = arith.addi %4240, %c152_i64_2285 : i64
    %c8_i64_2286 = arith.constant 8 : i64
    %4242 = arith.addi %4241, %c8_i64_2286 : i64
    %c0_i32_2287 = arith.constant 0 : i32
    %4243 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2287) : (!llvm.ptr, i32) -> i32
    %4244 = arith.extui %4243 : i32 to i64
    %c65536_i64_2288 = arith.constant 65536 : i64
    %4245 = arith.muli %4244, %c65536_i64_2288 : i64
    %4246 = arith.cmpi ult, %4242, %4245 : i64
    cf.cond_br %4246, ^bb832, ^bb833
  ^bb831:  // pred: ^bb828
    %c1_i32_2289 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2289) : (i32) -> ()
    cf.br ^bb830
  ^bb832:  // 2 preds: ^bb830, ^bb833
    %4247 = llvm.getelementptr %11[%4241] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_2284, %4247 {alignment = 1 : i64} : i64, !llvm.ptr
    %4248 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_2290 = arith.constant 1 : i64
    %c144_i64_2291 = arith.constant 144 : i64
    %4249 = arith.extui %4248 : i32 to i64
    %4250 = arith.addi %4249, %c144_i64_2291 : i64
    %c8_i64_2292 = arith.constant 8 : i64
    %4251 = arith.addi %4250, %c8_i64_2292 : i64
    %c0_i32_2293 = arith.constant 0 : i32
    %4252 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2293) : (!llvm.ptr, i32) -> i32
    %4253 = arith.extui %4252 : i32 to i64
    %c65536_i64_2294 = arith.constant 65536 : i64
    %4254 = arith.muli %4253, %c65536_i64_2294 : i64
    %4255 = arith.cmpi ult, %4251, %4254 : i64
    cf.cond_br %4255, ^bb834, ^bb835
  ^bb833:  // pred: ^bb830
    %c1_i32_2295 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2295) : (i32) -> ()
    cf.br ^bb832
  ^bb834:  // 2 preds: ^bb832, ^bb835
    %4256 = llvm.getelementptr %11[%4250] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_2290, %4256 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb29
  ^bb835:  // pred: ^bb832
    %c1_i32_2296 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2296) : (i32) -> ()
    cf.br ^bb834
  ^bb836:  // 2 preds: ^bb31, ^bb837
    %4257 = llvm.getelementptr %11[%184] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %4258 = llvm.load volatile %4257 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_2297 = arith.constant 0 : i64
    %4259 = arith.extui %179 : i32 to i64
    %4260 = arith.addi %4259, %c0_i64_2297 : i64
    %c8_i64_2298 = arith.constant 8 : i64
    %4261 = arith.addi %4260, %c8_i64_2298 : i64
    %c0_i32_2299 = arith.constant 0 : i32
    %4262 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2299) : (!llvm.ptr, i32) -> i32
    %4263 = arith.extui %4262 : i32 to i64
    %c65536_i64_2300 = arith.constant 65536 : i64
    %4264 = arith.muli %4263, %c65536_i64_2300 : i64
    %4265 = arith.cmpi ult, %4261, %4264 : i64
    cf.cond_br %4265, ^bb838, ^bb839
  ^bb837:  // pred: ^bb31
    %c1_i32_2301 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2301) : (i32) -> ()
    cf.br ^bb836
  ^bb838:  // 2 preds: ^bb836, ^bb839
    %4266 = llvm.getelementptr %11[%4260] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %4258, %4266 {alignment = 1 : i64} : i64, !llvm.ptr
    %4267 = llvm.load %3 : !llvm.ptr -> i32
    %c768_i32_2302 = arith.constant 768 : i32
    %4268 = arith.addi %4267, %c768_i32_2302 : i32
    %c8_i32_2303 = arith.constant 8 : i32
    %4269 = arith.addi %4268, %c8_i32_2303 : i32
    %4270 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_2304 = arith.constant 1552 : i32
    %4271 = arith.addi %4270, %c1552_i32_2304 : i32
    %c8_i32_2305 = arith.constant 8 : i32
    %4272 = arith.addi %4271, %c8_i32_2305 : i32
    %c0_i64_2306 = arith.constant 0 : i64
    %4273 = arith.extui %4272 : i32 to i64
    %4274 = arith.addi %4273, %c0_i64_2306 : i64
    %c8_i64_2307 = arith.constant 8 : i64
    %4275 = arith.addi %4274, %c8_i64_2307 : i64
    %c0_i32_2308 = arith.constant 0 : i32
    %4276 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2308) : (!llvm.ptr, i32) -> i32
    %4277 = arith.extui %4276 : i32 to i64
    %c65536_i64_2309 = arith.constant 65536 : i64
    %4278 = arith.muli %4277, %c65536_i64_2309 : i64
    %4279 = arith.cmpi ult, %4275, %4278 : i64
    cf.cond_br %4279, ^bb840, ^bb841
  ^bb839:  // pred: ^bb836
    %c1_i32_2310 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2310) : (i32) -> ()
    cf.br ^bb838
  ^bb840:  // 2 preds: ^bb838, ^bb841
    %4280 = llvm.getelementptr %11[%4274] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %4281 = llvm.load volatile %4280 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_2311 = arith.constant 0 : i64
    %4282 = arith.extui %4269 : i32 to i64
    %4283 = arith.addi %4282, %c0_i64_2311 : i64
    %c8_i64_2312 = arith.constant 8 : i64
    %4284 = arith.addi %4283, %c8_i64_2312 : i64
    %c0_i32_2313 = arith.constant 0 : i32
    %4285 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2313) : (!llvm.ptr, i32) -> i32
    %4286 = arith.extui %4285 : i32 to i64
    %c65536_i64_2314 = arith.constant 65536 : i64
    %4287 = arith.muli %4286, %c65536_i64_2314 : i64
    %4288 = arith.cmpi ult, %4284, %4287 : i64
    cf.cond_br %4288, ^bb842, ^bb843
  ^bb841:  // pred: ^bb838
    %c1_i32_2315 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2315) : (i32) -> ()
    cf.br ^bb840
  ^bb842:  // 2 preds: ^bb840, ^bb843
    %4289 = llvm.getelementptr %11[%4283] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %4281, %4289 {alignment = 1 : i64} : i64, !llvm.ptr
    %4290 = llvm.load %3 : !llvm.ptr -> i32
    %4291 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i64_2316 = arith.constant 1552 : i64
    %4292 = arith.extui %4291 : i32 to i64
    %4293 = arith.addi %4292, %c1552_i64_2316 : i64
    %c8_i64_2317 = arith.constant 8 : i64
    %4294 = arith.addi %4293, %c8_i64_2317 : i64
    %c0_i32_2318 = arith.constant 0 : i32
    %4295 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2318) : (!llvm.ptr, i32) -> i32
    %4296 = arith.extui %4295 : i32 to i64
    %c65536_i64_2319 = arith.constant 65536 : i64
    %4297 = arith.muli %4296, %c65536_i64_2319 : i64
    %4298 = arith.cmpi ult, %4294, %4297 : i64
    cf.cond_br %4298, ^bb844, ^bb845
  ^bb843:  // pred: ^bb840
    %c1_i32_2320 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2320) : (i32) -> ()
    cf.br ^bb842
  ^bb844:  // 2 preds: ^bb842, ^bb845
    %4299 = llvm.getelementptr %11[%4293] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %4300 = llvm.load volatile %4299 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c768_i64 = arith.constant 768 : i64
    %4301 = arith.extui %4290 : i32 to i64
    %4302 = arith.addi %4301, %c768_i64 : i64
    %c8_i64_2321 = arith.constant 8 : i64
    %4303 = arith.addi %4302, %c8_i64_2321 : i64
    %c0_i32_2322 = arith.constant 0 : i32
    %4304 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2322) : (!llvm.ptr, i32) -> i32
    %4305 = arith.extui %4304 : i32 to i64
    %c65536_i64_2323 = arith.constant 65536 : i64
    %4306 = arith.muli %4305, %c65536_i64_2323 : i64
    %4307 = arith.cmpi ult, %4303, %4306 : i64
    cf.cond_br %4307, ^bb846, ^bb847
  ^bb845:  // pred: ^bb842
    %c1_i32_2324 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2324) : (i32) -> ()
    cf.br ^bb844
  ^bb846:  // 2 preds: ^bb844, ^bb847
    %4308 = llvm.getelementptr %11[%4302] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %4300, %4308 {alignment = 1 : i64} : i64, !llvm.ptr
    %4309 = llvm.load %3 : !llvm.ptr -> i32
    %c768_i32_2325 = arith.constant 768 : i32
    %4310 = arith.addi %4309, %c768_i32_2325 : i32
    call @f63(%arg0, %4310) : (!llvm.ptr, i32) -> ()
    %4311 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_2326 = arith.constant 1 : i64
    %c528_i64_2327 = arith.constant 528 : i64
    %4312 = arith.extui %4311 : i32 to i64
    %4313 = arith.addi %4312, %c528_i64_2327 : i64
    %c8_i64_2328 = arith.constant 8 : i64
    %4314 = arith.addi %4313, %c8_i64_2328 : i64
    %c0_i32_2329 = arith.constant 0 : i32
    %4315 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2329) : (!llvm.ptr, i32) -> i32
    %4316 = arith.extui %4315 : i32 to i64
    %c65536_i64_2330 = arith.constant 65536 : i64
    %4317 = arith.muli %4316, %c65536_i64_2330 : i64
    %4318 = arith.cmpi ult, %4314, %4317 : i64
    cf.cond_br %4318, ^bb848, ^bb849
  ^bb847:  // pred: ^bb844
    %c1_i32_2331 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2331) : (i32) -> ()
    cf.br ^bb846
  ^bb848:  // 2 preds: ^bb846, ^bb849
    %4319 = llvm.getelementptr %11[%4313] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_2326, %4319 {alignment = 1 : i64} : i64, !llvm.ptr
    %4320 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_2332 = arith.constant 1 : i64
    %c520_i64_2333 = arith.constant 520 : i64
    %4321 = arith.extui %4320 : i32 to i64
    %4322 = arith.addi %4321, %c520_i64_2333 : i64
    %c8_i64_2334 = arith.constant 8 : i64
    %4323 = arith.addi %4322, %c8_i64_2334 : i64
    %c0_i32_2335 = arith.constant 0 : i32
    %4324 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2335) : (!llvm.ptr, i32) -> i32
    %4325 = arith.extui %4324 : i32 to i64
    %c65536_i64_2336 = arith.constant 65536 : i64
    %4326 = arith.muli %4325, %c65536_i64_2336 : i64
    %4327 = arith.cmpi ult, %4323, %4326 : i64
    cf.cond_br %4327, ^bb850, ^bb851
  ^bb849:  // pred: ^bb846
    %c1_i32_2337 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2337) : (i32) -> ()
    cf.br ^bb848
  ^bb850:  // 2 preds: ^bb848, ^bb851
    %4328 = llvm.getelementptr %11[%4322] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_2332, %4328 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb30
  ^bb851:  // pred: ^bb848
    %c1_i32_2338 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2338) : (i32) -> ()
    cf.br ^bb850
  ^bb852:  // 2 preds: ^bb30, ^bb853
    %4329 = llvm.getelementptr %11[%171] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %4330 = llvm.load volatile %4329 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_2339 = arith.constant 0 : i64
    %4331 = arith.extui %166 : i32 to i64
    %4332 = arith.addi %4331, %c0_i64_2339 : i64
    %c8_i64_2340 = arith.constant 8 : i64
    %4333 = arith.addi %4332, %c8_i64_2340 : i64
    %c0_i32_2341 = arith.constant 0 : i32
    %4334 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2341) : (!llvm.ptr, i32) -> i32
    %4335 = arith.extui %4334 : i32 to i64
    %c65536_i64_2342 = arith.constant 65536 : i64
    %4336 = arith.muli %4335, %c65536_i64_2342 : i64
    %4337 = arith.cmpi ult, %4333, %4336 : i64
    cf.cond_br %4337, ^bb854, ^bb855
  ^bb853:  // pred: ^bb30
    %c1_i32_2343 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2343) : (i32) -> ()
    cf.br ^bb852
  ^bb854:  // 2 preds: ^bb852, ^bb855
    %4338 = llvm.getelementptr %11[%4332] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %4330, %4338 {alignment = 1 : i64} : i64, !llvm.ptr
    %4339 = llvm.load %3 : !llvm.ptr -> i32
    %4340 = llvm.load %3 : !llvm.ptr -> i32
    %c520_i64_2344 = arith.constant 520 : i64
    %4341 = arith.extui %4340 : i32 to i64
    %4342 = arith.addi %4341, %c520_i64_2344 : i64
    %c8_i64_2345 = arith.constant 8 : i64
    %4343 = arith.addi %4342, %c8_i64_2345 : i64
    %c0_i32_2346 = arith.constant 0 : i32
    %4344 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2346) : (!llvm.ptr, i32) -> i32
    %4345 = arith.extui %4344 : i32 to i64
    %c65536_i64_2347 = arith.constant 65536 : i64
    %4346 = arith.muli %4345, %c65536_i64_2347 : i64
    %4347 = arith.cmpi ult, %4343, %4346 : i64
    cf.cond_br %4347, ^bb856, ^bb857
  ^bb855:  // pred: ^bb852
    %c1_i32_2348 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2348) : (i32) -> ()
    cf.br ^bb854
  ^bb856:  // 2 preds: ^bb854, ^bb857
    %4348 = llvm.getelementptr %11[%4342] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %4349 = llvm.load volatile %4348 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c144_i64_2349 = arith.constant 144 : i64
    %4350 = arith.extui %4339 : i32 to i64
    %4351 = arith.addi %4350, %c144_i64_2349 : i64
    %c8_i64_2350 = arith.constant 8 : i64
    %4352 = arith.addi %4351, %c8_i64_2350 : i64
    %c0_i32_2351 = arith.constant 0 : i32
    %4353 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2351) : (!llvm.ptr, i32) -> i32
    %4354 = arith.extui %4353 : i32 to i64
    %c65536_i64_2352 = arith.constant 65536 : i64
    %4355 = arith.muli %4354, %c65536_i64_2352 : i64
    %4356 = arith.cmpi ult, %4352, %4355 : i64
    cf.cond_br %4356, ^bb858, ^bb859
  ^bb857:  // pred: ^bb854
    %c1_i32_2353 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2353) : (i32) -> ()
    cf.br ^bb856
  ^bb858:  // 2 preds: ^bb856, ^bb859
    %4357 = llvm.getelementptr %11[%4351] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %4349, %4357 {alignment = 1 : i64} : i64, !llvm.ptr
    %4358 = llvm.load %3 : !llvm.ptr -> i32
    %c144_i64_2354 = arith.constant 144 : i64
    %4359 = arith.extui %4358 : i32 to i64
    %4360 = arith.addi %4359, %c144_i64_2354 : i64
    %c4_i64_2355 = arith.constant 4 : i64
    %4361 = arith.addi %4360, %c4_i64_2355 : i64
    %c0_i32_2356 = arith.constant 0 : i32
    %4362 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2356) : (!llvm.ptr, i32) -> i32
    %4363 = arith.extui %4362 : i32 to i64
    %c65536_i64_2357 = arith.constant 65536 : i64
    %4364 = arith.muli %4363, %c65536_i64_2357 : i64
    %4365 = arith.cmpi ult, %4361, %4364 : i64
    cf.cond_br %4365, ^bb860, ^bb861
  ^bb859:  // pred: ^bb856
    %c1_i32_2358 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2358) : (i32) -> ()
    cf.br ^bb858
  ^bb860:  // 2 preds: ^bb858, ^bb861
    %4366 = llvm.getelementptr %11[%4360] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %4367 = llvm.load volatile %4366 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c2_i32_2359 = arith.constant 2 : i32
    %4368 = arith.cmpi eq, %4367, %c2_i32_2359 : i32
    %4369 = arith.extui %4368 : i1 to i32
    %c0_i32_2360 = arith.constant 0 : i32
    %4370 = arith.cmpi ne, %4369, %c0_i32_2360 : i32
    cf.cond_br %4370, ^bb12, ^bb862
  ^bb861:  // pred: ^bb858
    %c1_i32_2361 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2361) : (i32) -> ()
    cf.br ^bb860
  ^bb862:  // pred: ^bb860
    cf.br ^bb29
  ^bb863:  // 2 preds: ^bb29, ^bb864
    %4371 = llvm.getelementptr %11[%158] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %4372 = llvm.load volatile %4371 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_2362 = arith.constant 0 : i64
    %4373 = arith.extui %155 : i32 to i64
    %4374 = arith.addi %4373, %c0_i64_2362 : i64
    %c8_i64_2363 = arith.constant 8 : i64
    %4375 = arith.addi %4374, %c8_i64_2363 : i64
    %c0_i32_2364 = arith.constant 0 : i32
    %4376 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2364) : (!llvm.ptr, i32) -> i32
    %4377 = arith.extui %4376 : i32 to i64
    %c65536_i64_2365 = arith.constant 65536 : i64
    %4378 = arith.muli %4377, %c65536_i64_2365 : i64
    %4379 = arith.cmpi ult, %4375, %4378 : i64
    cf.cond_br %4379, ^bb865, ^bb866
  ^bb864:  // pred: ^bb29
    %c1_i32_2366 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2366) : (i32) -> ()
    cf.br ^bb863
  ^bb865:  // 2 preds: ^bb863, ^bb866
    %4380 = llvm.getelementptr %11[%4374] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %4372, %4380 {alignment = 1 : i64} : i64, !llvm.ptr
    %4381 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_2367 = arith.constant 8 : i32
    %4382 = arith.addi %4381, %c8_i32_2367 : i32
    %4383 = llvm.load %3 : !llvm.ptr -> i32
    %c144_i32_2368 = arith.constant 144 : i32
    %4384 = arith.addi %4383, %c144_i32_2368 : i32
    %c8_i32_2369 = arith.constant 8 : i32
    %4385 = arith.addi %4384, %c8_i32_2369 : i32
    %c0_i64_2370 = arith.constant 0 : i64
    %4386 = arith.extui %4385 : i32 to i64
    %4387 = arith.addi %4386, %c0_i64_2370 : i64
    %c8_i64_2371 = arith.constant 8 : i64
    %4388 = arith.addi %4387, %c8_i64_2371 : i64
    %c0_i32_2372 = arith.constant 0 : i32
    %4389 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2372) : (!llvm.ptr, i32) -> i32
    %4390 = arith.extui %4389 : i32 to i64
    %c65536_i64_2373 = arith.constant 65536 : i64
    %4391 = arith.muli %4390, %c65536_i64_2373 : i64
    %4392 = arith.cmpi ult, %4388, %4391 : i64
    cf.cond_br %4392, ^bb867, ^bb868
  ^bb866:  // pred: ^bb863
    %c1_i32_2374 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2374) : (i32) -> ()
    cf.br ^bb865
  ^bb867:  // 2 preds: ^bb865, ^bb868
    %4393 = llvm.getelementptr %11[%4387] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %4394 = llvm.load volatile %4393 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_2375 = arith.constant 0 : i64
    %4395 = arith.extui %4382 : i32 to i64
    %4396 = arith.addi %4395, %c0_i64_2375 : i64
    %c8_i64_2376 = arith.constant 8 : i64
    %4397 = arith.addi %4396, %c8_i64_2376 : i64
    %c0_i32_2377 = arith.constant 0 : i32
    %4398 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2377) : (!llvm.ptr, i32) -> i32
    %4399 = arith.extui %4398 : i32 to i64
    %c65536_i64_2378 = arith.constant 65536 : i64
    %4400 = arith.muli %4399, %c65536_i64_2378 : i64
    %4401 = arith.cmpi ult, %4397, %4400 : i64
    cf.cond_br %4401, ^bb869, ^bb870
  ^bb868:  // pred: ^bb865
    %c1_i32_2379 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2379) : (i32) -> ()
    cf.br ^bb867
  ^bb869:  // 2 preds: ^bb867, ^bb870
    %4402 = llvm.getelementptr %11[%4396] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %4394, %4402 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb11
  ^bb870:  // pred: ^bb867
    %c1_i32_2380 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2380) : (i32) -> ()
    cf.br ^bb869
  ^bb871:  // 2 preds: ^bb13, ^bb872
    %4403 = llvm.getelementptr %11[%75] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i32_32, %4403 {alignment = 1 : i64} : i32, !llvm.ptr
    %4404 = llvm.load %3 : !llvm.ptr -> i32
    %c520_i32_2381 = arith.constant 520 : i32
    %4405 = arith.addi %4404, %c520_i32_2381 : i32
    call @f3(%arg0, %4405) : (!llvm.ptr, i32) -> ()
    %4406 = llvm.load %3 : !llvm.ptr -> i32
    %c2_i32_2382 = arith.constant 2 : i32
    %c144_i64_2383 = arith.constant 144 : i64
    %4407 = arith.extui %4406 : i32 to i64
    %4408 = arith.addi %4407, %c144_i64_2383 : i64
    %c4_i64_2384 = arith.constant 4 : i64
    %4409 = arith.addi %4408, %c4_i64_2384 : i64
    %c0_i32_2385 = arith.constant 0 : i32
    %4410 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2385) : (!llvm.ptr, i32) -> i32
    %4411 = arith.extui %4410 : i32 to i64
    %c65536_i64_2386 = arith.constant 65536 : i64
    %4412 = arith.muli %4411, %c65536_i64_2386 : i64
    %4413 = arith.cmpi ult, %4409, %4412 : i64
    cf.cond_br %4413, ^bb873, ^bb874
  ^bb872:  // pred: ^bb13
    %c1_i32_2387 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2387) : (i32) -> ()
    cf.br ^bb871
  ^bb873:  // 2 preds: ^bb871, ^bb874
    %4414 = llvm.getelementptr %11[%4408] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i32_2382, %4414 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb12
  ^bb874:  // pred: ^bb871
    %c1_i32_2388 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2388) : (i32) -> ()
    cf.br ^bb873
  ^bb875:  // 2 preds: ^bb12, ^bb876
    %4415 = llvm.getelementptr %11[%67] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i32, %4415 {alignment = 1 : i64} : i32, !llvm.ptr
    %4416 = llvm.load %3 : !llvm.ptr -> i32
    %c1552_i32_2389 = arith.constant 1552 : i32
    %4417 = arith.addi %4416, %c1552_i32_2389 : i32
    call @f3(%arg0, %4417) : (!llvm.ptr, i32) -> ()
    %4418 = llvm.load %3 : !llvm.ptr -> i32
    %c2_i32_2390 = arith.constant 2 : i32
    %c656_i64_2391 = arith.constant 656 : i64
    %4419 = arith.extui %4418 : i32 to i64
    %4420 = arith.addi %4419, %c656_i64_2391 : i64
    %c4_i64_2392 = arith.constant 4 : i64
    %4421 = arith.addi %4420, %c4_i64_2392 : i64
    %c0_i32_2393 = arith.constant 0 : i32
    %4422 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2393) : (!llvm.ptr, i32) -> i32
    %4423 = arith.extui %4422 : i32 to i64
    %c65536_i64_2394 = arith.constant 65536 : i64
    %4424 = arith.muli %4423, %c65536_i64_2394 : i64
    %4425 = arith.cmpi ult, %4421, %4424 : i64
    cf.cond_br %4425, ^bb877, ^bb878
  ^bb876:  // pred: ^bb12
    %c1_i32_2395 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2395) : (i32) -> ()
    cf.br ^bb875
  ^bb877:  // 2 preds: ^bb875, ^bb878
    %4426 = llvm.getelementptr %11[%4420] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i32_2390, %4426 {alignment = 1 : i64} : i32, !llvm.ptr
    %4427 = llvm.load %3 : !llvm.ptr -> i32
    %c656_i32_2396 = arith.constant 656 : i32
    %4428 = arith.addi %4427, %c656_i32_2396 : i32
    call @f3(%arg0, %4428) : (!llvm.ptr, i32) -> ()
    %4429 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_2397 = arith.constant 1 : i64
    %c8_i64_2398 = arith.constant 8 : i64
    %4430 = arith.extui %4429 : i32 to i64
    %4431 = arith.addi %4430, %c8_i64_2398 : i64
    %c8_i64_2399 = arith.constant 8 : i64
    %4432 = arith.addi %4431, %c8_i64_2399 : i64
    %c0_i32_2400 = arith.constant 0 : i32
    %4433 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2400) : (!llvm.ptr, i32) -> i32
    %4434 = arith.extui %4433 : i32 to i64
    %c65536_i64_2401 = arith.constant 65536 : i64
    %4435 = arith.muli %4434, %c65536_i64_2401 : i64
    %4436 = arith.cmpi ult, %4432, %4435 : i64
    cf.cond_br %4436, ^bb879, ^bb880
  ^bb878:  // pred: ^bb875
    %c1_i32_2402 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2402) : (i32) -> ()
    cf.br ^bb877
  ^bb879:  // 2 preds: ^bb877, ^bb880
    %4437 = llvm.getelementptr %11[%4431] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_2397, %4437 {alignment = 1 : i64} : i64, !llvm.ptr
    %4438 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_2403 = arith.constant 1 : i64
    %c0_i64_2404 = arith.constant 0 : i64
    %4439 = arith.extui %4438 : i32 to i64
    %4440 = arith.addi %4439, %c0_i64_2404 : i64
    %c8_i64_2405 = arith.constant 8 : i64
    %4441 = arith.addi %4440, %c8_i64_2405 : i64
    %c0_i32_2406 = arith.constant 0 : i32
    %4442 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2406) : (!llvm.ptr, i32) -> i32
    %4443 = arith.extui %4442 : i32 to i64
    %c65536_i64_2407 = arith.constant 65536 : i64
    %4444 = arith.muli %4443, %c65536_i64_2407 : i64
    %4445 = arith.cmpi ult, %4441, %4444 : i64
    cf.cond_br %4445, ^bb881, ^bb882
  ^bb880:  // pred: ^bb877
    %c1_i32_2408 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2408) : (i32) -> ()
    cf.br ^bb879
  ^bb881:  // 2 preds: ^bb879, ^bb882
    %4446 = llvm.getelementptr %11[%4440] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_2403, %4446 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb11
  ^bb882:  // pred: ^bb879
    %c1_i32_2409 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2409) : (i32) -> ()
    cf.br ^bb881
  }
  func.func @f2(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %7 : i64, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %8 : i64, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %9 : i64, !llvm.ptr
    %10 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.getelementptr %12[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %15 = llvm.load %11 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %16 = arith.subi %15, %c64_i32 : i32
    llvm.store %16, %3 : i32, !llvm.ptr
    llvm.store %16, %11 : i32, !llvm.ptr
    %17 = llvm.load %3 : !llvm.ptr -> i32
    %c56_i32 = arith.constant 56 : i32
    %18 = arith.addi %17, %c56_i32 : i32
    %c0_i64_9 = arith.constant 0 : i64
    %c0_i64_10 = arith.constant 0 : i64
    %19 = arith.extui %18 : i32 to i64
    %20 = arith.addi %19, %c0_i64_10 : i64
    %c8_i64 = arith.constant 8 : i64
    %21 = arith.addi %20, %c8_i64 : i64
    %c0_i32_11 = arith.constant 0 : i32
    %22 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_11) : (!llvm.ptr, i32) -> i32
    %23 = arith.extui %22 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %24 = arith.muli %23, %c65536_i64 : i64
    %25 = arith.cmpi ult, %21, %24 : i64
    cf.cond_br %25, ^bb3, ^bb4
  ^bb2:  // pred: ^bb34
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %26 = llvm.getelementptr %14[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_9, %26 {alignment = 1 : i64} : i64, !llvm.ptr
    %27 = llvm.load %3 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %28 = arith.addi %27, %c48_i32 : i32
    %c0_i64_12 = arith.constant 0 : i64
    %c0_i64_13 = arith.constant 0 : i64
    %29 = arith.extui %28 : i32 to i64
    %30 = arith.addi %29, %c0_i64_13 : i64
    %c8_i64_14 = arith.constant 8 : i64
    %31 = arith.addi %30, %c8_i64_14 : i64
    %c0_i32_15 = arith.constant 0 : i32
    %32 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_15) : (!llvm.ptr, i32) -> i32
    %33 = arith.extui %32 : i32 to i64
    %c65536_i64_16 = arith.constant 65536 : i64
    %34 = arith.muli %33, %c65536_i64_16 : i64
    %35 = arith.cmpi ult, %31, %34 : i64
    cf.cond_br %35, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c1_i32_17 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_17) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %36 = llvm.getelementptr %14[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_12, %36 {alignment = 1 : i64} : i64, !llvm.ptr
    %37 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %38 = arith.addi %37, %c32_i32 : i32
    %c8_i32 = arith.constant 8 : i32
    %39 = arith.addi %38, %c8_i32 : i32
    %c0_i64_18 = arith.constant 0 : i64
    %c0_i64_19 = arith.constant 0 : i64
    %40 = arith.extui %39 : i32 to i64
    %41 = arith.addi %40, %c0_i64_19 : i64
    %c8_i64_20 = arith.constant 8 : i64
    %42 = arith.addi %41, %c8_i64_20 : i64
    %c0_i32_21 = arith.constant 0 : i32
    %43 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_21) : (!llvm.ptr, i32) -> i32
    %44 = arith.extui %43 : i32 to i64
    %c65536_i64_22 = arith.constant 65536 : i64
    %45 = arith.muli %44, %c65536_i64_22 : i64
    %46 = arith.cmpi ult, %42, %45 : i64
    cf.cond_br %46, ^bb7, ^bb8
  ^bb6:  // pred: ^bb3
    %c1_i32_23 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_23) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %47 = llvm.getelementptr %14[%41] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_18, %47 {alignment = 1 : i64} : i64, !llvm.ptr
    %48 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_24 = arith.constant 0 : i64
    %c32_i64 = arith.constant 32 : i64
    %49 = arith.extui %48 : i32 to i64
    %50 = arith.addi %49, %c32_i64 : i64
    %c8_i64_25 = arith.constant 8 : i64
    %51 = arith.addi %50, %c8_i64_25 : i64
    %c0_i32_26 = arith.constant 0 : i32
    %52 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_26) : (!llvm.ptr, i32) -> i32
    %53 = arith.extui %52 : i32 to i64
    %c65536_i64_27 = arith.constant 65536 : i64
    %54 = arith.muli %53, %c65536_i64_27 : i64
    %55 = arith.cmpi ult, %51, %54 : i64
    cf.cond_br %55, ^bb9, ^bb10
  ^bb8:  // pred: ^bb5
    %c1_i32_28 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_28) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %56 = llvm.getelementptr %14[%50] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_24, %56 {alignment = 1 : i64} : i64, !llvm.ptr
    %c0_i32_29 = arith.constant 0 : i32
    llvm.store %c0_i32_29, %4 : i32, !llvm.ptr
    %c0_i32_30 = arith.constant 0 : i32
    llvm.store %c0_i32_30, %5 : i32, !llvm.ptr
    cf.br ^bb12
  ^bb10:  // pred: ^bb7
    %c1_i32_31 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_31) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // pred: ^bb19
    %57 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %58 = arith.addi %57, %c24_i32 : i32
    %59 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i32_32 = arith.constant 24 : i32
    %60 = arith.addi %59, %c24_i32_32 : i32
    %c0_i64_33 = arith.constant 0 : i64
    %61 = arith.extui %60 : i32 to i64
    %62 = arith.addi %61, %c0_i64_33 : i64
    %c8_i64_34 = arith.constant 8 : i64
    %63 = arith.addi %62, %c8_i64_34 : i64
    %c0_i32_35 = arith.constant 0 : i32
    %64 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_35) : (!llvm.ptr, i32) -> i32
    %65 = arith.extui %64 : i32 to i64
    %c65536_i64_36 = arith.constant 65536 : i64
    %66 = arith.muli %65, %c65536_i64_36 : i64
    %67 = arith.cmpi ult, %63, %66 : i64
    cf.cond_br %67, ^bb20, ^bb21
  ^bb12:  // 2 preds: ^bb9, ^bb17
    %68 = llvm.load %1 : !llvm.ptr -> i32
    %69 = llvm.load %4 : !llvm.ptr -> i32
    %70 = arith.addi %68, %69 : i32
    llvm.store %70, %6 : i32, !llvm.ptr
    %71 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_37 = arith.constant 0 : i64
    %72 = arith.extui %71 : i32 to i64
    %73 = arith.addi %72, %c0_i64_37 : i64
    %c8_i64_38 = arith.constant 8 : i64
    %74 = arith.addi %73, %c8_i64_38 : i64
    %c0_i32_39 = arith.constant 0 : i32
    %75 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_39) : (!llvm.ptr, i32) -> i32
    %76 = arith.extui %75 : i32 to i64
    %c65536_i64_40 = arith.constant 65536 : i64
    %77 = arith.muli %76, %c65536_i64_40 : i64
    %78 = arith.cmpi ult, %74, %77 : i64
    cf.cond_br %78, ^bb13, ^bb14
  ^bb13:  // 2 preds: ^bb12, ^bb14
    %79 = llvm.getelementptr %14[%73] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %80 = llvm.load volatile %79 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %80, %7 : i64, !llvm.ptr
    %81 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_41 = arith.constant 32 : i32
    %82 = arith.addi %81, %c32_i32_41 : i32
    %83 = llvm.load %4 : !llvm.ptr -> i32
    %84 = arith.addi %82, %83 : i32
    %c0_i64_42 = arith.constant 0 : i64
    %85 = arith.extui %84 : i32 to i64
    %86 = arith.addi %85, %c0_i64_42 : i64
    %c8_i64_43 = arith.constant 8 : i64
    %87 = arith.addi %86, %c8_i64_43 : i64
    %c0_i32_44 = arith.constant 0 : i32
    %88 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_44) : (!llvm.ptr, i32) -> i32
    %89 = arith.extui %88 : i32 to i64
    %c65536_i64_45 = arith.constant 65536 : i64
    %90 = arith.muli %89, %c65536_i64_45 : i64
    %91 = arith.cmpi ult, %87, %90 : i64
    cf.cond_br %91, ^bb15, ^bb16
  ^bb14:  // pred: ^bb12
    %c1_i32_46 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_46) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // 2 preds: ^bb13, ^bb16
    %92 = llvm.getelementptr %14[%86] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %93 = llvm.load volatile %92 {alignment = 1 : i64} : !llvm.ptr -> i64
    %94 = arith.addi %80, %93 : i64
    llvm.store %94, %8 : i64, !llvm.ptr
    %95 = llvm.load %5 : !llvm.ptr -> i32
    %96 = arith.extui %95 : i32 to i64
    %c1_i64 = arith.constant 1 : i64
    %97 = arith.andi %96, %c1_i64 : i64
    %98 = arith.addi %94, %97 : i64
    llvm.store %98, %9 : i64, !llvm.ptr
    %c0_i64_47 = arith.constant 0 : i64
    %99 = arith.extui %70 : i32 to i64
    %100 = arith.addi %99, %c0_i64_47 : i64
    %c8_i64_48 = arith.constant 8 : i64
    %101 = arith.addi %100, %c8_i64_48 : i64
    %c0_i32_49 = arith.constant 0 : i32
    %102 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_49) : (!llvm.ptr, i32) -> i32
    %103 = arith.extui %102 : i32 to i64
    %c65536_i64_50 = arith.constant 65536 : i64
    %104 = arith.muli %103, %c65536_i64_50 : i64
    %105 = arith.cmpi ult, %101, %104 : i64
    cf.cond_br %105, ^bb17, ^bb18
  ^bb16:  // pred: ^bb13
    %c1_i32_51 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_51) : (i32) -> ()
    cf.br ^bb15
  ^bb17:  // 2 preds: ^bb15, ^bb18
    %106 = llvm.getelementptr %14[%100] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %98, %106 {alignment = 1 : i64} : i64, !llvm.ptr
    %107 = llvm.load %8 : !llvm.ptr -> i64
    %108 = llvm.load %7 : !llvm.ptr -> i64
    %109 = arith.cmpi ult, %107, %108 : i64
    %110 = arith.extui %109 : i1 to i64
    %111 = arith.trunci %110 : i64 to i32
    %112 = llvm.load %9 : !llvm.ptr -> i64
    %113 = llvm.load %8 : !llvm.ptr -> i64
    %114 = arith.cmpi ult, %112, %113 : i64
    %115 = arith.extui %114 : i1 to i64
    %116 = arith.trunci %115 : i64 to i32
    %117 = arith.ori %111, %116 : i32
    llvm.store %117, %5 : i32, !llvm.ptr
    %118 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i32_52 = arith.constant 8 : i32
    %119 = arith.addi %118, %c8_i32_52 : i32
    llvm.store %119, %4 : i32, !llvm.ptr
    %c32_i32_53 = arith.constant 32 : i32
    %120 = arith.cmpi eq, %119, %c32_i32_53 : i32
    %121 = arith.extui %120 : i1 to i32
    %c0_i32_54 = arith.constant 0 : i32
    %122 = arith.cmpi eq, %121, %c0_i32_54 : i32
    %123 = arith.extui %122 : i1 to i32
    %c0_i32_55 = arith.constant 0 : i32
    %124 = arith.cmpi ne, %123, %c0_i32_55 : i32
    cf.cond_br %124, ^bb12, ^bb19
  ^bb18:  // pred: ^bb15
    %c1_i32_56 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_56) : (i32) -> ()
    cf.br ^bb17
  ^bb19:  // pred: ^bb17
    cf.br ^bb11
  ^bb20:  // 2 preds: ^bb11, ^bb21
    %125 = llvm.getelementptr %14[%62] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %126 = llvm.load volatile %125 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_57 = arith.constant 0 : i64
    %127 = arith.extui %58 : i32 to i64
    %128 = arith.addi %127, %c0_i64_57 : i64
    %c8_i64_58 = arith.constant 8 : i64
    %129 = arith.addi %128, %c8_i64_58 : i64
    %c0_i32_59 = arith.constant 0 : i32
    %130 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_59) : (!llvm.ptr, i32) -> i32
    %131 = arith.extui %130 : i32 to i64
    %c65536_i64_60 = arith.constant 65536 : i64
    %132 = arith.muli %131, %c65536_i64_60 : i64
    %133 = arith.cmpi ult, %129, %132 : i64
    cf.cond_br %133, ^bb22, ^bb23
  ^bb21:  // pred: ^bb11
    %c1_i32_61 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_61) : (i32) -> ()
    cf.br ^bb20
  ^bb22:  // 2 preds: ^bb20, ^bb23
    %134 = llvm.getelementptr %14[%128] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %126, %134 {alignment = 1 : i64} : i64, !llvm.ptr
    %135 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %136 = arith.addi %135, %c16_i32 : i32
    %137 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32_62 = arith.constant 16 : i32
    %138 = arith.addi %137, %c16_i32_62 : i32
    %c0_i64_63 = arith.constant 0 : i64
    %139 = arith.extui %138 : i32 to i64
    %140 = arith.addi %139, %c0_i64_63 : i64
    %c8_i64_64 = arith.constant 8 : i64
    %141 = arith.addi %140, %c8_i64_64 : i64
    %c0_i32_65 = arith.constant 0 : i32
    %142 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_65) : (!llvm.ptr, i32) -> i32
    %143 = arith.extui %142 : i32 to i64
    %c65536_i64_66 = arith.constant 65536 : i64
    %144 = arith.muli %143, %c65536_i64_66 : i64
    %145 = arith.cmpi ult, %141, %144 : i64
    cf.cond_br %145, ^bb24, ^bb25
  ^bb23:  // pred: ^bb20
    %c1_i32_67 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_67) : (i32) -> ()
    cf.br ^bb22
  ^bb24:  // 2 preds: ^bb22, ^bb25
    %146 = llvm.getelementptr %14[%140] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %147 = llvm.load volatile %146 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_68 = arith.constant 0 : i64
    %148 = arith.extui %136 : i32 to i64
    %149 = arith.addi %148, %c0_i64_68 : i64
    %c8_i64_69 = arith.constant 8 : i64
    %150 = arith.addi %149, %c8_i64_69 : i64
    %c0_i32_70 = arith.constant 0 : i32
    %151 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_70) : (!llvm.ptr, i32) -> i32
    %152 = arith.extui %151 : i32 to i64
    %c65536_i64_71 = arith.constant 65536 : i64
    %153 = arith.muli %152, %c65536_i64_71 : i64
    %154 = arith.cmpi ult, %150, %153 : i64
    cf.cond_br %154, ^bb26, ^bb27
  ^bb25:  // pred: ^bb22
    %c1_i32_72 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_72) : (i32) -> ()
    cf.br ^bb24
  ^bb26:  // 2 preds: ^bb24, ^bb27
    %155 = llvm.getelementptr %14[%149] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %147, %155 {alignment = 1 : i64} : i64, !llvm.ptr
    %156 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_73 = arith.constant 8 : i32
    %157 = arith.addi %156, %c8_i32_73 : i32
    %158 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_74 = arith.constant 8 : i32
    %159 = arith.addi %158, %c8_i32_74 : i32
    %c0_i64_75 = arith.constant 0 : i64
    %160 = arith.extui %159 : i32 to i64
    %161 = arith.addi %160, %c0_i64_75 : i64
    %c8_i64_76 = arith.constant 8 : i64
    %162 = arith.addi %161, %c8_i64_76 : i64
    %c0_i32_77 = arith.constant 0 : i32
    %163 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_77) : (!llvm.ptr, i32) -> i32
    %164 = arith.extui %163 : i32 to i64
    %c65536_i64_78 = arith.constant 65536 : i64
    %165 = arith.muli %164, %c65536_i64_78 : i64
    %166 = arith.cmpi ult, %162, %165 : i64
    cf.cond_br %166, ^bb28, ^bb29
  ^bb27:  // pred: ^bb24
    %c1_i32_79 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_79) : (i32) -> ()
    cf.br ^bb26
  ^bb28:  // 2 preds: ^bb26, ^bb29
    %167 = llvm.getelementptr %14[%161] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %168 = llvm.load volatile %167 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_80 = arith.constant 0 : i64
    %169 = arith.extui %157 : i32 to i64
    %170 = arith.addi %169, %c0_i64_80 : i64
    %c8_i64_81 = arith.constant 8 : i64
    %171 = arith.addi %170, %c8_i64_81 : i64
    %c0_i32_82 = arith.constant 0 : i32
    %172 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_82) : (!llvm.ptr, i32) -> i32
    %173 = arith.extui %172 : i32 to i64
    %c65536_i64_83 = arith.constant 65536 : i64
    %174 = arith.muli %173, %c65536_i64_83 : i64
    %175 = arith.cmpi ult, %171, %174 : i64
    cf.cond_br %175, ^bb30, ^bb31
  ^bb29:  // pred: ^bb26
    %c1_i32_84 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_84) : (i32) -> ()
    cf.br ^bb28
  ^bb30:  // 2 preds: ^bb28, ^bb31
    %176 = llvm.getelementptr %14[%170] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %168, %176 {alignment = 1 : i64} : i64, !llvm.ptr
    %177 = llvm.load %3 : !llvm.ptr -> i32
    %178 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_85 = arith.constant 0 : i64
    %179 = arith.extui %178 : i32 to i64
    %180 = arith.addi %179, %c0_i64_85 : i64
    %c8_i64_86 = arith.constant 8 : i64
    %181 = arith.addi %180, %c8_i64_86 : i64
    %c0_i32_87 = arith.constant 0 : i32
    %182 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_87) : (!llvm.ptr, i32) -> i32
    %183 = arith.extui %182 : i32 to i64
    %c65536_i64_88 = arith.constant 65536 : i64
    %184 = arith.muli %183, %c65536_i64_88 : i64
    %185 = arith.cmpi ult, %181, %184 : i64
    cf.cond_br %185, ^bb32, ^bb33
  ^bb31:  // pred: ^bb28
    %c1_i32_89 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_89) : (i32) -> ()
    cf.br ^bb30
  ^bb32:  // 2 preds: ^bb30, ^bb33
    %186 = llvm.getelementptr %14[%180] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %187 = llvm.load volatile %186 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_90 = arith.constant 0 : i64
    %188 = arith.extui %177 : i32 to i64
    %189 = arith.addi %188, %c0_i64_90 : i64
    %c8_i64_91 = arith.constant 8 : i64
    %190 = arith.addi %189, %c8_i64_91 : i64
    %c0_i32_92 = arith.constant 0 : i32
    %191 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_92) : (!llvm.ptr, i32) -> i32
    %192 = arith.extui %191 : i32 to i64
    %c65536_i64_93 = arith.constant 65536 : i64
    %193 = arith.muli %192, %c65536_i64_93 : i64
    %194 = arith.cmpi ult, %190, %193 : i64
    cf.cond_br %194, ^bb34, ^bb35
  ^bb33:  // pred: ^bb30
    %c1_i32_94 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_94) : (i32) -> ()
    cf.br ^bb32
  ^bb34:  // 2 preds: ^bb32, ^bb35
    %195 = llvm.getelementptr %14[%189] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %187, %195 {alignment = 1 : i64} : i64, !llvm.ptr
    %196 = llvm.load %0 : !llvm.ptr -> i32
    %197 = llvm.load %3 : !llvm.ptr -> i32
    %198 = llvm.load %4 : !llvm.ptr -> i32
    call @f50(%arg0, %196, %197, %198) : (!llvm.ptr, i32, i32, i32) -> ()
    %199 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32_95 = arith.constant 64 : i32
    %200 = arith.addi %199, %c64_i32_95 : i32
    llvm.store %200, %11 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb35:  // pred: ^bb32
    %c1_i32_96 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_96) : (i32) -> ()
    cf.br ^bb34
  }
  func.func @f3(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %4 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %7 = arith.addi %6, %c4_i64 : i64
    %c0_i32 = arith.constant 0 : i32
    %8 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32) : (!llvm.ptr, i32) -> i32
    %9 = arith.extui %8 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %10 = arith.muli %9, %c65536_i64 : i64
    %11 = arith.cmpi ult, %7, %10 : i64
    cf.cond_br %11, ^bb4, ^bb5
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb4, ^bb6
    cf.br ^bb2
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %12 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %13 = llvm.load volatile %12 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %14 = arith.cmpi eq, %13, %c2_i32 : i32
    %15 = arith.extui %14 : i1 to i32
    %c0_i32_0 = arith.constant 0 : i32
    %16 = arith.cmpi ne, %15, %c0_i32_0 : i32
    cf.cond_br %16, ^bb3, ^bb6
  ^bb5:  // pred: ^bb1
    %c1_i32_1 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1) : (i32) -> ()
    cf.br ^bb4
  ^bb6:  // pred: ^bb4
    %17 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %18 = arith.addi %17, %c4_i32 : i32
    llvm.store %18, %0 : i32, !llvm.ptr
    call @f112(%arg0, %18) : (!llvm.ptr, i32) -> ()
    %19 = llvm.load %0 : !llvm.ptr -> i32
    call @f113(%arg0, %19) : (!llvm.ptr, i32) -> ()
    cf.br ^bb3
  }
  func.func @f4(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %4 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %7 = arith.addi %6, %c4_i64 : i64
    %c0_i32 = arith.constant 0 : i32
    %8 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32) : (!llvm.ptr, i32) -> i32
    %9 = arith.extui %8 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %10 = arith.muli %9, %c65536_i64 : i64
    %11 = arith.cmpi ult, %7, %10 : i64
    cf.cond_br %11, ^bb4, ^bb5
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb4, ^bb6
    cf.br ^bb2
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %12 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %13 = llvm.load volatile %12 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %14 = arith.cmpi eq, %13, %c-2147483648_i32 : i32
    %15 = arith.extui %14 : i1 to i32
    %c0_i32_0 = arith.constant 0 : i32
    %16 = arith.cmpi ne, %15, %c0_i32_0 : i32
    cf.cond_br %16, ^bb3, ^bb6
  ^bb5:  // pred: ^bb1
    %c1_i32_1 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1) : (i32) -> ()
    cf.br ^bb4
  ^bb6:  // pred: ^bb4
    %17 = llvm.load %0 : !llvm.ptr -> i32
    call @f112(%arg0, %17) : (!llvm.ptr, i32) -> ()
    %18 = llvm.load %0 : !llvm.ptr -> i32
    call @f113(%arg0, %18) : (!llvm.ptr, i32) -> ()
    cf.br ^bb3
  }
  func.func @f5(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %8 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %13 = llvm.load %9 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %14 = arith.subi %13, %c64_i32 : i32
    llvm.store %14, %3 : i32, !llvm.ptr
    llvm.store %14, %9 : i32, !llvm.ptr
    %15 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %16 = arith.addi %15, %c24_i32 : i32
    %c0_i32_7 = arith.constant 0 : i32
    %c0_i32_8 = arith.constant 0 : i32
    %c1_i32_9 = arith.constant 1 : i32
    %c32_i32 = arith.constant 32 : i32
    call @f111(%arg0, %16, %c0_i32_7, %c0_i32_8, %c1_i32_9, %c32_i32) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %17 = llvm.load %3 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %18 = arith.extui %17 : i32 to i64
    %19 = arith.addi %18, %c28_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %20 = arith.addi %19, %c4_i64 : i64
    %c0_i32_10 = arith.constant 0 : i32
    %21 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_10) : (!llvm.ptr, i32) -> i32
    %22 = arith.extui %21 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %23 = arith.muli %22, %c65536_i64 : i64
    %24 = arith.cmpi ult, %20, %23 : i64
    cf.cond_br %24, ^bb3, ^bb4
  ^bb2:  // pred: ^bb41
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %25 = llvm.getelementptr %12[%19] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %26 = llvm.load volatile %25 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %26, %4 : i32, !llvm.ptr
    %27 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %28 = arith.extui %27 : i32 to i64
    %29 = arith.addi %28, %c24_i64 : i64
    %c4_i64_11 = arith.constant 4 : i64
    %30 = arith.addi %29, %c4_i64_11 : i64
    %c0_i32_12 = arith.constant 0 : i32
    %31 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_12) : (!llvm.ptr, i32) -> i32
    %32 = arith.extui %31 : i32 to i64
    %c65536_i64_13 = arith.constant 65536 : i64
    %33 = arith.muli %32, %c65536_i64_13 : i64
    %34 = arith.cmpi ult, %30, %33 : i64
    cf.cond_br %34, ^bb7, ^bb8
  ^bb4:  // pred: ^bb1
    %c1_i32_14 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_14) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // pred: ^bb14
    %35 = llvm.load %6 : !llvm.ptr -> i32
    %36 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i64 = arith.constant 32 : i64
    %37 = arith.extui %36 : i32 to i64
    %38 = arith.addi %37, %c32_i64 : i64
    %c4_i64_15 = arith.constant 4 : i64
    %39 = arith.addi %38, %c4_i64_15 : i64
    %c0_i32_16 = arith.constant 0 : i32
    %40 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_16) : (!llvm.ptr, i32) -> i32
    %41 = arith.extui %40 : i32 to i64
    %c65536_i64_17 = arith.constant 65536 : i64
    %42 = arith.muli %41, %c65536_i64_17 : i64
    %43 = arith.cmpi ult, %39, %42 : i64
    cf.cond_br %43, ^bb45, ^bb46
  ^bb6:  // pred: ^bb7
    %44 = llvm.load %4 : !llvm.ptr -> i32
    %45 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i64_18 = arith.constant 32 : i64
    %46 = arith.extui %45 : i32 to i64
    %47 = arith.addi %46, %c32_i64_18 : i64
    %c4_i64_19 = arith.constant 4 : i64
    %48 = arith.addi %47, %c4_i64_19 : i64
    %c0_i32_20 = arith.constant 0 : i32
    %49 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_20) : (!llvm.ptr, i32) -> i32
    %50 = arith.extui %49 : i32 to i64
    %c65536_i64_21 = arith.constant 65536 : i64
    %51 = arith.muli %50, %c65536_i64_21 : i64
    %52 = arith.cmpi ult, %48, %51 : i64
    cf.cond_br %52, ^bb43, ^bb44
  ^bb7:  // 2 preds: ^bb3, ^bb8
    %53 = llvm.getelementptr %12[%29] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %54 = llvm.load volatile %53 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_22 = arith.constant 1 : i32
    %55 = arith.cmpi eq, %54, %c1_i32_22 : i32
    %56 = arith.extui %55 : i1 to i32
    %c0_i32_23 = arith.constant 0 : i32
    %57 = arith.cmpi ne, %56, %c0_i32_23 : i32
    cf.cond_br %57, ^bb6, ^bb9
  ^bb8:  // pred: ^bb3
    %c1_i32_24 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_24) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // pred: ^bb7
    %58 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i64_25 = arith.constant 32 : i64
    %59 = arith.extui %58 : i32 to i64
    %60 = arith.addi %59, %c32_i64_25 : i64
    %c4_i64_26 = arith.constant 4 : i64
    %61 = arith.addi %60, %c4_i64_26 : i64
    %c0_i32_27 = arith.constant 0 : i32
    %62 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_27) : (!llvm.ptr, i32) -> i32
    %63 = arith.extui %62 : i32 to i64
    %c65536_i64_28 = arith.constant 65536 : i64
    %64 = arith.muli %63, %c65536_i64_28 : i64
    %65 = arith.cmpi ult, %61, %64 : i64
    cf.cond_br %65, ^bb10, ^bb11
  ^bb10:  // 2 preds: ^bb9, ^bb11
    %66 = llvm.getelementptr %12[%60] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %67 = llvm.load volatile %66 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %67, %5 : i32, !llvm.ptr
    %68 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32_29 = arith.constant 24 : i32
    %69 = arith.addi %68, %c24_i32_29 : i32
    %c4_i32 = arith.constant 4 : i32
    %c0_i32_30 = arith.constant 0 : i32
    %c4_i32_31 = arith.constant 4 : i32
    %c4_i32_32 = arith.constant 4 : i32
    call @f111(%arg0, %69, %c4_i32, %c0_i32_30, %c4_i32_31, %c4_i32_32) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %70 = llvm.load %3 : !llvm.ptr -> i32
    %c28_i64_33 = arith.constant 28 : i64
    %71 = arith.extui %70 : i32 to i64
    %72 = arith.addi %71, %c28_i64_33 : i64
    %c4_i64_34 = arith.constant 4 : i64
    %73 = arith.addi %72, %c4_i64_34 : i64
    %c0_i32_35 = arith.constant 0 : i32
    %74 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_35) : (!llvm.ptr, i32) -> i32
    %75 = arith.extui %74 : i32 to i64
    %c65536_i64_36 = arith.constant 65536 : i64
    %76 = arith.muli %75, %c65536_i64_36 : i64
    %77 = arith.cmpi ult, %73, %76 : i64
    cf.cond_br %77, ^bb12, ^bb13
  ^bb11:  // pred: ^bb9
    %c1_i32_37 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_37) : (i32) -> ()
    cf.br ^bb10
  ^bb12:  // 2 preds: ^bb10, ^bb13
    %78 = llvm.getelementptr %12[%72] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %79 = llvm.load volatile %78 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %79, %6 : i32, !llvm.ptr
    %80 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i64_38 = arith.constant 24 : i64
    %81 = arith.extui %80 : i32 to i64
    %82 = arith.addi %81, %c24_i64_38 : i64
    %c4_i64_39 = arith.constant 4 : i64
    %83 = arith.addi %82, %c4_i64_39 : i64
    %c0_i32_40 = arith.constant 0 : i32
    %84 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_40) : (!llvm.ptr, i32) -> i32
    %85 = arith.extui %84 : i32 to i64
    %c65536_i64_41 = arith.constant 65536 : i64
    %86 = arith.muli %85, %c65536_i64_41 : i64
    %87 = arith.cmpi ult, %83, %86 : i64
    cf.cond_br %87, ^bb14, ^bb15
  ^bb13:  // pred: ^bb10
    %c1_i32_42 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_42) : (i32) -> ()
    cf.br ^bb12
  ^bb14:  // 2 preds: ^bb12, ^bb15
    %88 = llvm.getelementptr %12[%82] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %89 = llvm.load volatile %88 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_43 = arith.constant 1 : i32
    %90 = arith.cmpi eq, %89, %c1_i32_43 : i32
    %91 = arith.extui %90 : i1 to i32
    %c0_i32_44 = arith.constant 0 : i32
    %92 = arith.cmpi ne, %91, %c0_i32_44 : i32
    cf.cond_br %92, ^bb5, ^bb16
  ^bb15:  // pred: ^bb12
    %c1_i32_45 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_45) : (i32) -> ()
    cf.br ^bb14
  ^bb16:  // pred: ^bb14
    %93 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i64_46 = arith.constant 32 : i64
    %94 = arith.extui %93 : i32 to i64
    %95 = arith.addi %94, %c32_i64_46 : i64
    %c4_i64_47 = arith.constant 4 : i64
    %96 = arith.addi %95, %c4_i64_47 : i64
    %c0_i32_48 = arith.constant 0 : i32
    %97 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_48) : (!llvm.ptr, i32) -> i32
    %98 = arith.extui %97 : i32 to i64
    %c65536_i64_49 = arith.constant 65536 : i64
    %99 = arith.muli %98, %c65536_i64_49 : i64
    %100 = arith.cmpi ult, %96, %99 : i64
    cf.cond_br %100, ^bb17, ^bb18
  ^bb17:  // 2 preds: ^bb16, ^bb18
    %101 = llvm.getelementptr %12[%95] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %102 = llvm.load volatile %101 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %102, %7 : i32, !llvm.ptr
    %103 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32_50 = arith.constant 24 : i32
    %104 = arith.addi %103, %c24_i32_50 : i32
    %c8_i32 = arith.constant 8 : i32
    %105 = arith.addi %104, %c8_i32 : i32
    %c0_i32_51 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %106 = arith.extui %105 : i32 to i64
    %107 = arith.addi %106, %c0_i64 : i64
    %c4_i64_52 = arith.constant 4 : i64
    %108 = arith.addi %107, %c4_i64_52 : i64
    %c0_i32_53 = arith.constant 0 : i32
    %109 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_53) : (!llvm.ptr, i32) -> i32
    %110 = arith.extui %109 : i32 to i64
    %c65536_i64_54 = arith.constant 65536 : i64
    %111 = arith.muli %110, %c65536_i64_54 : i64
    %112 = arith.cmpi ult, %108, %111 : i64
    cf.cond_br %112, ^bb19, ^bb20
  ^bb18:  // pred: ^bb16
    %c1_i32_55 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_55) : (i32) -> ()
    cf.br ^bb17
  ^bb19:  // 2 preds: ^bb17, ^bb20
    %113 = llvm.getelementptr %12[%107] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_51, %113 {alignment = 1 : i64} : i32, !llvm.ptr
    %114 = llvm.load %3 : !llvm.ptr -> i32
    %115 = llvm.load %5 : !llvm.ptr -> i32
    %c28_i64_56 = arith.constant 28 : i64
    %116 = arith.extui %114 : i32 to i64
    %117 = arith.addi %116, %c28_i64_56 : i64
    %c4_i64_57 = arith.constant 4 : i64
    %118 = arith.addi %117, %c4_i64_57 : i64
    %c0_i32_58 = arith.constant 0 : i32
    %119 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_58) : (!llvm.ptr, i32) -> i32
    %120 = arith.extui %119 : i32 to i64
    %c65536_i64_59 = arith.constant 65536 : i64
    %121 = arith.muli %120, %c65536_i64_59 : i64
    %122 = arith.cmpi ult, %118, %121 : i64
    cf.cond_br %122, ^bb21, ^bb22
  ^bb20:  // pred: ^bb17
    %c1_i32_60 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_60) : (i32) -> ()
    cf.br ^bb19
  ^bb21:  // 2 preds: ^bb19, ^bb22
    %123 = llvm.getelementptr %12[%117] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %115, %123 {alignment = 1 : i64} : i32, !llvm.ptr
    %124 = llvm.load %3 : !llvm.ptr -> i32
    %125 = llvm.load %4 : !llvm.ptr -> i32
    %c24_i64_61 = arith.constant 24 : i64
    %126 = arith.extui %124 : i32 to i64
    %127 = arith.addi %126, %c24_i64_61 : i64
    %c4_i64_62 = arith.constant 4 : i64
    %128 = arith.addi %127, %c4_i64_62 : i64
    %c0_i32_63 = arith.constant 0 : i32
    %129 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_63) : (!llvm.ptr, i32) -> i32
    %130 = arith.extui %129 : i32 to i64
    %c65536_i64_64 = arith.constant 65536 : i64
    %131 = arith.muli %130, %c65536_i64_64 : i64
    %132 = arith.cmpi ult, %128, %131 : i64
    cf.cond_br %132, ^bb23, ^bb24
  ^bb22:  // pred: ^bb19
    %c1_i32_65 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_65) : (i32) -> ()
    cf.br ^bb21
  ^bb23:  // 2 preds: ^bb21, ^bb24
    %133 = llvm.getelementptr %12[%127] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %125, %133 {alignment = 1 : i64} : i32, !llvm.ptr
    %134 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_66 = arith.constant 0 : i32
    %c44_i64 = arith.constant 44 : i64
    %135 = arith.extui %134 : i32 to i64
    %136 = arith.addi %135, %c44_i64 : i64
    %c4_i64_67 = arith.constant 4 : i64
    %137 = arith.addi %136, %c4_i64_67 : i64
    %c0_i32_68 = arith.constant 0 : i32
    %138 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_68) : (!llvm.ptr, i32) -> i32
    %139 = arith.extui %138 : i32 to i64
    %c65536_i64_69 = arith.constant 65536 : i64
    %140 = arith.muli %139, %c65536_i64_69 : i64
    %141 = arith.cmpi ult, %137, %140 : i64
    cf.cond_br %141, ^bb25, ^bb26
  ^bb24:  // pred: ^bb21
    %c1_i32_70 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_70) : (i32) -> ()
    cf.br ^bb23
  ^bb25:  // 2 preds: ^bb23, ^bb26
    %142 = llvm.getelementptr %12[%136] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_66, %142 {alignment = 1 : i64} : i32, !llvm.ptr
    %143 = llvm.load %3 : !llvm.ptr -> i32
    %144 = llvm.load %7 : !llvm.ptr -> i32
    %c40_i64 = arith.constant 40 : i64
    %145 = arith.extui %143 : i32 to i64
    %146 = arith.addi %145, %c40_i64 : i64
    %c4_i64_71 = arith.constant 4 : i64
    %147 = arith.addi %146, %c4_i64_71 : i64
    %c0_i32_72 = arith.constant 0 : i32
    %148 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_72) : (!llvm.ptr, i32) -> i32
    %149 = arith.extui %148 : i32 to i64
    %c65536_i64_73 = arith.constant 65536 : i64
    %150 = arith.muli %149, %c65536_i64_73 : i64
    %151 = arith.cmpi ult, %147, %150 : i64
    cf.cond_br %151, ^bb27, ^bb28
  ^bb26:  // pred: ^bb23
    %c1_i32_74 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_74) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // 2 preds: ^bb25, ^bb28
    %152 = llvm.getelementptr %12[%146] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %144, %152 {alignment = 1 : i64} : i32, !llvm.ptr
    %153 = llvm.load %3 : !llvm.ptr -> i32
    %154 = llvm.load %6 : !llvm.ptr -> i32
    %c36_i64 = arith.constant 36 : i64
    %155 = arith.extui %153 : i32 to i64
    %156 = arith.addi %155, %c36_i64 : i64
    %c4_i64_75 = arith.constant 4 : i64
    %157 = arith.addi %156, %c4_i64_75 : i64
    %c0_i32_76 = arith.constant 0 : i32
    %158 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_76) : (!llvm.ptr, i32) -> i32
    %159 = arith.extui %158 : i32 to i64
    %c65536_i64_77 = arith.constant 65536 : i64
    %160 = arith.muli %159, %c65536_i64_77 : i64
    %161 = arith.cmpi ult, %157, %160 : i64
    cf.cond_br %161, ^bb29, ^bb30
  ^bb28:  // pred: ^bb25
    %c1_i32_78 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_78) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // 2 preds: ^bb27, ^bb30
    %162 = llvm.getelementptr %12[%156] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %154, %162 {alignment = 1 : i64} : i32, !llvm.ptr
    %163 = llvm.load %3 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %164 = arith.addi %163, %c48_i32 : i32
    %c8_i32_79 = arith.constant 8 : i32
    %165 = arith.addi %164, %c8_i32_79 : i32
    %c0_i32_80 = arith.constant 0 : i32
    %c0_i64_81 = arith.constant 0 : i64
    %166 = arith.extui %165 : i32 to i64
    %167 = arith.addi %166, %c0_i64_81 : i64
    %c4_i64_82 = arith.constant 4 : i64
    %168 = arith.addi %167, %c4_i64_82 : i64
    %c0_i32_83 = arith.constant 0 : i32
    %169 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_83) : (!llvm.ptr, i32) -> i32
    %170 = arith.extui %169 : i32 to i64
    %c65536_i64_84 = arith.constant 65536 : i64
    %171 = arith.muli %170, %c65536_i64_84 : i64
    %172 = arith.cmpi ult, %168, %171 : i64
    cf.cond_br %172, ^bb31, ^bb32
  ^bb30:  // pred: ^bb27
    %c1_i32_85 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_85) : (i32) -> ()
    cf.br ^bb29
  ^bb31:  // 2 preds: ^bb29, ^bb32
    %173 = llvm.getelementptr %12[%167] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_80, %173 {alignment = 1 : i64} : i32, !llvm.ptr
    %174 = llvm.load %3 : !llvm.ptr -> i32
    %175 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i64_86 = arith.constant 24 : i64
    %176 = arith.extui %175 : i32 to i64
    %177 = arith.addi %176, %c24_i64_86 : i64
    %c8_i64 = arith.constant 8 : i64
    %178 = arith.addi %177, %c8_i64 : i64
    %c0_i32_87 = arith.constant 0 : i32
    %179 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_87) : (!llvm.ptr, i32) -> i32
    %180 = arith.extui %179 : i32 to i64
    %c65536_i64_88 = arith.constant 65536 : i64
    %181 = arith.muli %180, %c65536_i64_88 : i64
    %182 = arith.cmpi ult, %178, %181 : i64
    cf.cond_br %182, ^bb33, ^bb34
  ^bb32:  // pred: ^bb29
    %c1_i32_89 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_89) : (i32) -> ()
    cf.br ^bb31
  ^bb33:  // 2 preds: ^bb31, ^bb34
    %183 = llvm.getelementptr %12[%177] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %184 = llvm.load volatile %183 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c48_i64 = arith.constant 48 : i64
    %185 = arith.extui %174 : i32 to i64
    %186 = arith.addi %185, %c48_i64 : i64
    %c8_i64_90 = arith.constant 8 : i64
    %187 = arith.addi %186, %c8_i64_90 : i64
    %c0_i32_91 = arith.constant 0 : i32
    %188 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_91) : (!llvm.ptr, i32) -> i32
    %189 = arith.extui %188 : i32 to i64
    %c65536_i64_92 = arith.constant 65536 : i64
    %190 = arith.muli %189, %c65536_i64_92 : i64
    %191 = arith.cmpi ult, %187, %190 : i64
    cf.cond_br %191, ^bb35, ^bb36
  ^bb34:  // pred: ^bb31
    %c1_i32_93 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_93) : (i32) -> ()
    cf.br ^bb33
  ^bb35:  // 2 preds: ^bb33, ^bb36
    %192 = llvm.getelementptr %12[%186] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %184, %192 {alignment = 1 : i64} : i64, !llvm.ptr
    %193 = llvm.load %3 : !llvm.ptr -> i32
    %c36_i32 = arith.constant 36 : i32
    %194 = arith.addi %193, %c36_i32 : i32
    llvm.store %194, %4 : i32, !llvm.ptr
    call @f89(%arg0, %194) : (!llvm.ptr, i32) -> ()
    %195 = llvm.load %4 : !llvm.ptr -> i32
    call @f90(%arg0, %195) : (!llvm.ptr, i32) -> ()
    %196 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %197 = arith.addi %196, %c12_i32 : i32
    %198 = llvm.load %3 : !llvm.ptr -> i32
    %c48_i32_94 = arith.constant 48 : i32
    %199 = arith.addi %198, %c48_i32_94 : i32
    call @f86(%arg0, %197, %199) : (!llvm.ptr, i32, i32) -> ()
    %200 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %201 = arith.extui %200 : i32 to i64
    %202 = arith.addi %201, %c16_i64 : i64
    %c4_i64_95 = arith.constant 4 : i64
    %203 = arith.addi %202, %c4_i64_95 : i64
    %c0_i32_96 = arith.constant 0 : i32
    %204 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_96) : (!llvm.ptr, i32) -> i32
    %205 = arith.extui %204 : i32 to i64
    %c65536_i64_97 = arith.constant 65536 : i64
    %206 = arith.muli %205, %c65536_i64_97 : i64
    %207 = arith.cmpi ult, %203, %206 : i64
    cf.cond_br %207, ^bb37, ^bb38
  ^bb36:  // pred: ^bb33
    %c1_i32_98 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_98) : (i32) -> ()
    cf.br ^bb35
  ^bb37:  // 2 preds: ^bb35, ^bb38
    %208 = llvm.getelementptr %12[%202] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %209 = llvm.load volatile %208 {alignment = 1 : i64} : !llvm.ptr -> i32
    %210 = llvm.load %3 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %211 = arith.extui %210 : i32 to i64
    %212 = arith.addi %211, %c20_i64 : i64
    %c4_i64_99 = arith.constant 4 : i64
    %213 = arith.addi %212, %c4_i64_99 : i64
    %c0_i32_100 = arith.constant 0 : i32
    %214 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_100) : (!llvm.ptr, i32) -> i32
    %215 = arith.extui %214 : i32 to i64
    %c65536_i64_101 = arith.constant 65536 : i64
    %216 = arith.muli %215, %c65536_i64_101 : i64
    %217 = arith.cmpi ult, %213, %216 : i64
    cf.cond_br %217, ^bb39, ^bb40
  ^bb38:  // pred: ^bb35
    %c1_i32_102 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_102) : (i32) -> ()
    cf.br ^bb37
  ^bb39:  // 2 preds: ^bb37, ^bb40
    %218 = llvm.getelementptr %12[%212] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %219 = llvm.load volatile %218 {alignment = 1 : i64} : !llvm.ptr -> i32
    %220 = llvm.load %1 : !llvm.ptr -> i32
    %221 = llvm.load %2 : !llvm.ptr -> i32
    %222 = call @f109(%arg0, %209, %219, %220, %221) : (!llvm.ptr, i32, i32, i32, i32) -> i32
    llvm.store %222, %4 : i32, !llvm.ptr
    %223 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i32_103 = arith.constant 12 : i32
    %224 = arith.addi %223, %c12_i32_103 : i32
    call @f112(%arg0, %224) : (!llvm.ptr, i32) -> ()
    %225 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i32_104 = arith.constant 12 : i32
    %226 = arith.addi %225, %c12_i32_104 : i32
    call @f113(%arg0, %226) : (!llvm.ptr, i32) -> ()
    %227 = llvm.load %0 : !llvm.ptr -> i32
    %c-2147483638_i32 = arith.constant -2147483638 : i32
    %c-2147483645_i32 = arith.constant -2147483645 : i32
    %228 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i32_105 = arith.constant 0 : i32
    %229 = arith.cmpi ne, %228, %c0_i32_105 : i32
    %230 = arith.select %229, %c-2147483638_i32, %c-2147483645_i32 : i32
    %c0_i64_106 = arith.constant 0 : i64
    %231 = arith.extui %227 : i32 to i64
    %232 = arith.addi %231, %c0_i64_106 : i64
    %c4_i64_107 = arith.constant 4 : i64
    %233 = arith.addi %232, %c4_i64_107 : i64
    %c0_i32_108 = arith.constant 0 : i32
    %234 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_108) : (!llvm.ptr, i32) -> i32
    %235 = arith.extui %234 : i32 to i64
    %c65536_i64_109 = arith.constant 65536 : i64
    %236 = arith.muli %235, %c65536_i64_109 : i64
    %237 = arith.cmpi ult, %233, %236 : i64
    cf.cond_br %237, ^bb41, ^bb42
  ^bb40:  // pred: ^bb37
    %c1_i32_110 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_110) : (i32) -> ()
    cf.br ^bb39
  ^bb41:  // 2 preds: ^bb39, ^bb42
    %238 = llvm.getelementptr %12[%232] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %230, %238 {alignment = 1 : i64} : i32, !llvm.ptr
    %239 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32_111 = arith.constant 64 : i32
    %240 = arith.addi %239, %c64_i32_111 : i32
    llvm.store %240, %9 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb42:  // pred: ^bb39
    %c1_i32_112 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_112) : (i32) -> ()
    cf.br ^bb41
  ^bb43:  // 2 preds: ^bb6, ^bb44
    %241 = llvm.getelementptr %12[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %242 = llvm.load volatile %241 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f143(%arg0, %44, %242) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb44:  // pred: ^bb6
    %c1_i32_113 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_113) : (i32) -> ()
    cf.br ^bb43
  ^bb45:  // 2 preds: ^bb5, ^bb46
    %243 = llvm.getelementptr %12[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %244 = llvm.load volatile %243 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f143(%arg0, %35, %244) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb46:  // pred: ^bb5
    %c1_i32_114 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_114) : (i32) -> ()
    cf.br ^bb45
  }
  func.func @f6(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %10 = arith.subi %9, %c16_i32 : i32
    llvm.store %10, %1 : i32, !llvm.ptr
    llvm.store %10, %5 : i32, !llvm.ptr
    %11 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %12 = arith.addi %11, %c4_i32 : i32
    %c15_i32 = arith.constant 15 : i32
    %c0_i32_3 = arith.constant 0 : i32
    %c1_i32_4 = arith.constant 1 : i32
    %c1_i32_5 = arith.constant 1 : i32
    call @f111(%arg0, %12, %c15_i32, %c0_i32_3, %c1_i32_4, %c1_i32_5) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c8_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %16 = arith.addi %15, %c4_i64 : i64
    %c0_i32_6 = arith.constant 0 : i32
    %17 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_6) : (!llvm.ptr, i32) -> i32
    %18 = arith.extui %17 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %19 = arith.muli %18, %c65536_i64 : i64
    %20 = arith.cmpi ult, %16, %19 : i64
    cf.cond_br %20, ^bb3, ^bb4
  ^bb2:  // pred: ^bb25
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %21 = llvm.getelementptr %8[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %22 = llvm.load volatile %21 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %22, %2 : i32, !llvm.ptr
    %23 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_7 = arith.constant 4 : i64
    %24 = arith.extui %23 : i32 to i64
    %25 = arith.addi %24, %c4_i64_7 : i64
    %c4_i64_8 = arith.constant 4 : i64
    %26 = arith.addi %25, %c4_i64_8 : i64
    %c0_i32_9 = arith.constant 0 : i32
    %27 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_9) : (!llvm.ptr, i32) -> i32
    %28 = arith.extui %27 : i32 to i64
    %c65536_i64_10 = arith.constant 65536 : i64
    %29 = arith.muli %28, %c65536_i64_10 : i64
    %30 = arith.cmpi ult, %26, %29 : i64
    cf.cond_br %30, ^bb6, ^bb7
  ^bb4:  // pred: ^bb1
    %c1_i32_11 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_11) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // pred: ^bb6
    %31 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %32 = arith.extui %31 : i32 to i64
    %33 = arith.addi %32, %c12_i64 : i64
    %c4_i64_12 = arith.constant 4 : i64
    %34 = arith.addi %33, %c4_i64_12 : i64
    %c0_i32_13 = arith.constant 0 : i32
    %35 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_13) : (!llvm.ptr, i32) -> i32
    %36 = arith.extui %35 : i32 to i64
    %c65536_i64_14 = arith.constant 65536 : i64
    %37 = arith.muli %36, %c65536_i64_14 : i64
    %38 = arith.cmpi ult, %34, %37 : i64
    cf.cond_br %38, ^bb11, ^bb12
  ^bb6:  // 2 preds: ^bb3, ^bb7
    %39 = llvm.getelementptr %8[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %40 = llvm.load volatile %39 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_15 = arith.constant 1 : i32
    %41 = arith.cmpi eq, %40, %c1_i32_15 : i32
    %42 = arith.extui %41 : i1 to i32
    %c0_i32_16 = arith.constant 0 : i32
    %43 = arith.cmpi eq, %42, %c0_i32_16 : i32
    %44 = arith.extui %43 : i1 to i32
    %c0_i32_17 = arith.constant 0 : i32
    %45 = arith.cmpi ne, %44, %c0_i32_17 : i32
    cf.cond_br %45, ^bb5, ^bb8
  ^bb7:  // pred: ^bb3
    %c1_i32_18 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_18) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // pred: ^bb6
    %46 = llvm.load %2 : !llvm.ptr -> i32
    %47 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64_19 = arith.constant 12 : i64
    %48 = arith.extui %47 : i32 to i64
    %49 = arith.addi %48, %c12_i64_19 : i64
    %c4_i64_20 = arith.constant 4 : i64
    %50 = arith.addi %49, %c4_i64_20 : i64
    %c0_i32_21 = arith.constant 0 : i32
    %51 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_21) : (!llvm.ptr, i32) -> i32
    %52 = arith.extui %51 : i32 to i64
    %c65536_i64_22 = arith.constant 65536 : i64
    %53 = arith.muli %52, %c65536_i64_22 : i64
    %54 = arith.cmpi ult, %50, %53 : i64
    cf.cond_br %54, ^bb9, ^bb10
  ^bb9:  // 2 preds: ^bb8, ^bb10
    %55 = llvm.getelementptr %8[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %56 = llvm.load volatile %55 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f143(%arg0, %46, %56) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb10:  // pred: ^bb8
    %c1_i32_23 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_23) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb5, ^bb12
    %57 = llvm.getelementptr %8[%33] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %58 = llvm.load volatile %57 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %58, %3 : i32, !llvm.ptr
    %c7_i32 = arith.constant 7 : i32
    %59 = arith.addi %58, %c7_i32 : i32
    %c0_i32_24 = arith.constant 0 : i32
    %c1050179_i64 = arith.constant 1050179 : i64
    %60 = arith.extui %c0_i32_24 : i32 to i64
    %61 = arith.addi %60, %c1050179_i64 : i64
    %c8_i64_25 = arith.constant 8 : i64
    %62 = arith.addi %61, %c8_i64_25 : i64
    %c0_i32_26 = arith.constant 0 : i32
    %63 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_26) : (!llvm.ptr, i32) -> i32
    %64 = arith.extui %63 : i32 to i64
    %c65536_i64_27 = arith.constant 65536 : i64
    %65 = arith.muli %64, %c65536_i64_27 : i64
    %66 = arith.cmpi ult, %62, %65 : i64
    cf.cond_br %66, ^bb13, ^bb14
  ^bb12:  // pred: ^bb5
    %c1_i32_28 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_28) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %67 = llvm.getelementptr %8[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %68 = llvm.load volatile %67 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64 = arith.constant 0 : i64
    %69 = arith.extui %59 : i32 to i64
    %70 = arith.addi %69, %c0_i64 : i64
    %c8_i64_29 = arith.constant 8 : i64
    %71 = arith.addi %70, %c8_i64_29 : i64
    %c0_i32_30 = arith.constant 0 : i32
    %72 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_30) : (!llvm.ptr, i32) -> i32
    %73 = arith.extui %72 : i32 to i64
    %c65536_i64_31 = arith.constant 65536 : i64
    %74 = arith.muli %73, %c65536_i64_31 : i64
    %75 = arith.cmpi ult, %71, %74 : i64
    cf.cond_br %75, ^bb15, ^bb16
  ^bb14:  // pred: ^bb11
    %c1_i32_32 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_32) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // 2 preds: ^bb13, ^bb16
    %76 = llvm.getelementptr %8[%70] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %68, %76 {alignment = 1 : i64} : i64, !llvm.ptr
    %77 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_33 = arith.constant 0 : i32
    %c1050172_i64 = arith.constant 1050172 : i64
    %78 = arith.extui %c0_i32_33 : i32 to i64
    %79 = arith.addi %78, %c1050172_i64 : i64
    %c8_i64_34 = arith.constant 8 : i64
    %80 = arith.addi %79, %c8_i64_34 : i64
    %c0_i32_35 = arith.constant 0 : i32
    %81 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_35) : (!llvm.ptr, i32) -> i32
    %82 = arith.extui %81 : i32 to i64
    %c65536_i64_36 = arith.constant 65536 : i64
    %83 = arith.muli %82, %c65536_i64_36 : i64
    %84 = arith.cmpi ult, %80, %83 : i64
    cf.cond_br %84, ^bb17, ^bb18
  ^bb16:  // pred: ^bb13
    %c1_i32_37 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_37) : (i32) -> ()
    cf.br ^bb15
  ^bb17:  // 2 preds: ^bb15, ^bb18
    %85 = llvm.getelementptr %8[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %86 = llvm.load volatile %85 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_38 = arith.constant 0 : i64
    %87 = arith.extui %77 : i32 to i64
    %88 = arith.addi %87, %c0_i64_38 : i64
    %c8_i64_39 = arith.constant 8 : i64
    %89 = arith.addi %88, %c8_i64_39 : i64
    %c0_i32_40 = arith.constant 0 : i32
    %90 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_40) : (!llvm.ptr, i32) -> i32
    %91 = arith.extui %90 : i32 to i64
    %c65536_i64_41 = arith.constant 65536 : i64
    %92 = arith.muli %91, %c65536_i64_41 : i64
    %93 = arith.cmpi ult, %89, %92 : i64
    cf.cond_br %93, ^bb19, ^bb20
  ^bb18:  // pred: ^bb15
    %c1_i32_42 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_42) : (i32) -> ()
    cf.br ^bb17
  ^bb19:  // 2 preds: ^bb17, ^bb20
    %94 = llvm.getelementptr %8[%88] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %86, %94 {alignment = 1 : i64} : i64, !llvm.ptr
    %95 = llvm.load %0 : !llvm.ptr -> i32
    %c15_i32_43 = arith.constant 15 : i32
    %c8_i64_44 = arith.constant 8 : i64
    %96 = arith.extui %95 : i32 to i64
    %97 = arith.addi %96, %c8_i64_44 : i64
    %c4_i64_45 = arith.constant 4 : i64
    %98 = arith.addi %97, %c4_i64_45 : i64
    %c0_i32_46 = arith.constant 0 : i32
    %99 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_46) : (!llvm.ptr, i32) -> i32
    %100 = arith.extui %99 : i32 to i64
    %c65536_i64_47 = arith.constant 65536 : i64
    %101 = arith.muli %100, %c65536_i64_47 : i64
    %102 = arith.cmpi ult, %98, %101 : i64
    cf.cond_br %102, ^bb21, ^bb22
  ^bb20:  // pred: ^bb17
    %c1_i32_48 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_48) : (i32) -> ()
    cf.br ^bb19
  ^bb21:  // 2 preds: ^bb19, ^bb22
    %103 = llvm.getelementptr %8[%97] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c15_i32_43, %103 {alignment = 1 : i64} : i32, !llvm.ptr
    %104 = llvm.load %0 : !llvm.ptr -> i32
    %105 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64_49 = arith.constant 4 : i64
    %106 = arith.extui %104 : i32 to i64
    %107 = arith.addi %106, %c4_i64_49 : i64
    %c4_i64_50 = arith.constant 4 : i64
    %108 = arith.addi %107, %c4_i64_50 : i64
    %c0_i32_51 = arith.constant 0 : i32
    %109 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_51) : (!llvm.ptr, i32) -> i32
    %110 = arith.extui %109 : i32 to i64
    %c65536_i64_52 = arith.constant 65536 : i64
    %111 = arith.muli %110, %c65536_i64_52 : i64
    %112 = arith.cmpi ult, %108, %111 : i64
    cf.cond_br %112, ^bb23, ^bb24
  ^bb22:  // pred: ^bb19
    %c1_i32_53 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_53) : (i32) -> ()
    cf.br ^bb21
  ^bb23:  // 2 preds: ^bb21, ^bb24
    %113 = llvm.getelementptr %8[%107] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %105, %113 {alignment = 1 : i64} : i32, !llvm.ptr
    %114 = llvm.load %0 : !llvm.ptr -> i32
    %115 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_54 = arith.constant 0 : i64
    %116 = arith.extui %114 : i32 to i64
    %117 = arith.addi %116, %c0_i64_54 : i64
    %c4_i64_55 = arith.constant 4 : i64
    %118 = arith.addi %117, %c4_i64_55 : i64
    %c0_i32_56 = arith.constant 0 : i32
    %119 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_56) : (!llvm.ptr, i32) -> i32
    %120 = arith.extui %119 : i32 to i64
    %c65536_i64_57 = arith.constant 65536 : i64
    %121 = arith.muli %120, %c65536_i64_57 : i64
    %122 = arith.cmpi ult, %118, %121 : i64
    cf.cond_br %122, ^bb25, ^bb26
  ^bb24:  // pred: ^bb21
    %c1_i32_58 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_58) : (i32) -> ()
    cf.br ^bb23
  ^bb25:  // 2 preds: ^bb23, ^bb26
    %123 = llvm.getelementptr %8[%117] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %115, %123 {alignment = 1 : i64} : i32, !llvm.ptr
    %124 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32_59 = arith.constant 16 : i32
    %125 = arith.addi %124, %c16_i32_59 : i32
    llvm.store %125, %5 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb26:  // pred: ^bb23
    %c1_i32_60 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_60) : (i32) -> ()
    cf.br ^bb25
  }
  func.func @f7(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %7 : i64, !llvm.ptr
    %8 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %13 = llvm.load %9 : !llvm.ptr -> i32
    %c80_i32 = arith.constant 80 : i32
    %14 = arith.subi %13, %c80_i32 : i32
    llvm.store %14, %2 : i32, !llvm.ptr
    llvm.store %14, %9 : i32, !llvm.ptr
    %15 = llvm.load %2 : !llvm.ptr -> i32
    %16 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %17 = arith.extui %16 : i32 to i64
    %18 = arith.addi %17, %c8_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %19 = arith.addi %18, %c4_i64 : i64
    %c0_i32_7 = arith.constant 0 : i32
    %20 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_7) : (!llvm.ptr, i32) -> i32
    %21 = arith.extui %20 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %22 = arith.muli %21, %c65536_i64 : i64
    %23 = arith.cmpi ult, %19, %22 : i64
    cf.cond_br %23, ^bb3, ^bb4
  ^bb2:  // pred: ^bb55
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %24 = llvm.getelementptr %12[%18] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %25 = llvm.load volatile %24 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %25, %3 : i32, !llvm.ptr
    %c12_i64 = arith.constant 12 : i64
    %26 = arith.extui %15 : i32 to i64
    %27 = arith.addi %26, %c12_i64 : i64
    %c4_i64_8 = arith.constant 4 : i64
    %28 = arith.addi %27, %c4_i64_8 : i64
    %c0_i32_9 = arith.constant 0 : i32
    %29 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_9) : (!llvm.ptr, i32) -> i32
    %30 = arith.extui %29 : i32 to i64
    %c65536_i64_10 = arith.constant 65536 : i64
    %31 = arith.muli %30, %c65536_i64_10 : i64
    %32 = arith.cmpi ult, %28, %31 : i64
    cf.cond_br %32, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c1_i32_11 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_11) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %33 = llvm.getelementptr %12[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %25, %33 {alignment = 1 : i64} : i32, !llvm.ptr
    %34 = llvm.load %2 : !llvm.ptr -> i32
    %35 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_12 = arith.constant 4 : i64
    %36 = arith.extui %35 : i32 to i64
    %37 = arith.addi %36, %c4_i64_12 : i64
    %c4_i64_13 = arith.constant 4 : i64
    %38 = arith.addi %37, %c4_i64_13 : i64
    %c0_i32_14 = arith.constant 0 : i32
    %39 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_14) : (!llvm.ptr, i32) -> i32
    %40 = arith.extui %39 : i32 to i64
    %c65536_i64_15 = arith.constant 65536 : i64
    %41 = arith.muli %40, %c65536_i64_15 : i64
    %42 = arith.cmpi ult, %38, %41 : i64
    cf.cond_br %42, ^bb7, ^bb8
  ^bb6:  // pred: ^bb3
    %c1_i32_16 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_16) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %43 = llvm.getelementptr %12[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %44 = llvm.load volatile %43 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c8_i64_17 = arith.constant 8 : i64
    %45 = arith.extui %34 : i32 to i64
    %46 = arith.addi %45, %c8_i64_17 : i64
    %c4_i64_18 = arith.constant 4 : i64
    %47 = arith.addi %46, %c4_i64_18 : i64
    %c0_i32_19 = arith.constant 0 : i32
    %48 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_19) : (!llvm.ptr, i32) -> i32
    %49 = arith.extui %48 : i32 to i64
    %c65536_i64_20 = arith.constant 65536 : i64
    %50 = arith.muli %49, %c65536_i64_20 : i64
    %51 = arith.cmpi ult, %47, %50 : i64
    cf.cond_br %51, ^bb9, ^bb10
  ^bb8:  // pred: ^bb5
    %c1_i32_21 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_21) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %52 = llvm.getelementptr %12[%46] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %44, %52 {alignment = 1 : i64} : i32, !llvm.ptr
    %53 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32 = arith.constant 40 : i32
    %54 = arith.addi %53, %c40_i32 : i32
    %55 = llvm.load %3 : !llvm.ptr -> i32
    %c31_i32 = arith.constant 31 : i32
    %56 = arith.addi %55, %c31_i32 : i32
    %c5_i32 = arith.constant 5 : i32
    %c31_i32_22 = arith.constant 31 : i32
    %57 = arith.cmpi ule, %c5_i32, %c31_i32_22 : i32
    %58 = scf.if %57 -> (i32) {
      %315 = arith.shrui %56, %c5_i32 : i32
      scf.yield %315 : i32
    } else {
      %c0_i32_154 = arith.constant 0 : i32
      scf.yield %c0_i32_154 : i32
    }
    %c3_i32 = arith.constant 3 : i32
    %59 = arith.addi %58, %c3_i32 : i32
    %c0_i32_23 = arith.constant 0 : i32
    %c1_i32_24 = arith.constant 1 : i32
    %c32_i32 = arith.constant 32 : i32
    call @f111(%arg0, %54, %59, %c0_i32_23, %c1_i32_24, %c32_i32) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %60 = llvm.load %2 : !llvm.ptr -> i32
    %c44_i64 = arith.constant 44 : i64
    %61 = arith.extui %60 : i32 to i64
    %62 = arith.addi %61, %c44_i64 : i64
    %c4_i64_25 = arith.constant 4 : i64
    %63 = arith.addi %62, %c4_i64_25 : i64
    %c0_i32_26 = arith.constant 0 : i32
    %64 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_26) : (!llvm.ptr, i32) -> i32
    %65 = arith.extui %64 : i32 to i64
    %c65536_i64_27 = arith.constant 65536 : i64
    %66 = arith.muli %65, %c65536_i64_27 : i64
    %67 = arith.cmpi ult, %63, %66 : i64
    cf.cond_br %67, ^bb11, ^bb12
  ^bb10:  // pred: ^bb7
    %c1_i32_28 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_28) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %68 = llvm.getelementptr %12[%62] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %69 = llvm.load volatile %68 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %69, %3 : i32, !llvm.ptr
    %70 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i64 = arith.constant 40 : i64
    %71 = arith.extui %70 : i32 to i64
    %72 = arith.addi %71, %c40_i64 : i64
    %c4_i64_29 = arith.constant 4 : i64
    %73 = arith.addi %72, %c4_i64_29 : i64
    %c0_i32_30 = arith.constant 0 : i32
    %74 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_30) : (!llvm.ptr, i32) -> i32
    %75 = arith.extui %74 : i32 to i64
    %c65536_i64_31 = arith.constant 65536 : i64
    %76 = arith.muli %75, %c65536_i64_31 : i64
    %77 = arith.cmpi ult, %73, %76 : i64
    cf.cond_br %77, ^bb15, ^bb16
  ^bb12:  // pred: ^bb9
    %c1_i32_32 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_32) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // pred: ^bb22
    %78 = llvm.load %5 : !llvm.ptr -> i32
    %79 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i64 = arith.constant 48 : i64
    %80 = arith.extui %79 : i32 to i64
    %81 = arith.addi %80, %c48_i64 : i64
    %c4_i64_33 = arith.constant 4 : i64
    %82 = arith.addi %81, %c4_i64_33 : i64
    %c0_i32_34 = arith.constant 0 : i32
    %83 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_34) : (!llvm.ptr, i32) -> i32
    %84 = arith.extui %83 : i32 to i64
    %c65536_i64_35 = arith.constant 65536 : i64
    %85 = arith.muli %84, %c65536_i64_35 : i64
    %86 = arith.cmpi ult, %82, %85 : i64
    cf.cond_br %86, ^bb59, ^bb60
  ^bb14:  // pred: ^bb15
    %87 = llvm.load %3 : !llvm.ptr -> i32
    %88 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i64_36 = arith.constant 48 : i64
    %89 = arith.extui %88 : i32 to i64
    %90 = arith.addi %89, %c48_i64_36 : i64
    %c4_i64_37 = arith.constant 4 : i64
    %91 = arith.addi %90, %c4_i64_37 : i64
    %c0_i32_38 = arith.constant 0 : i32
    %92 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_38) : (!llvm.ptr, i32) -> i32
    %93 = arith.extui %92 : i32 to i64
    %c65536_i64_39 = arith.constant 65536 : i64
    %94 = arith.muli %93, %c65536_i64_39 : i64
    %95 = arith.cmpi ult, %91, %94 : i64
    cf.cond_br %95, ^bb57, ^bb58
  ^bb15:  // 2 preds: ^bb11, ^bb16
    %96 = llvm.getelementptr %12[%72] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %97 = llvm.load volatile %96 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_40 = arith.constant 1 : i32
    %98 = arith.cmpi eq, %97, %c1_i32_40 : i32
    %99 = arith.extui %98 : i1 to i32
    %c0_i32_41 = arith.constant 0 : i32
    %100 = arith.cmpi ne, %99, %c0_i32_41 : i32
    cf.cond_br %100, ^bb14, ^bb17
  ^bb16:  // pred: ^bb11
    %c1_i32_42 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_42) : (i32) -> ()
    cf.br ^bb15
  ^bb17:  // pred: ^bb15
    %101 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i64_43 = arith.constant 48 : i64
    %102 = arith.extui %101 : i32 to i64
    %103 = arith.addi %102, %c48_i64_43 : i64
    %c4_i64_44 = arith.constant 4 : i64
    %104 = arith.addi %103, %c4_i64_44 : i64
    %c0_i32_45 = arith.constant 0 : i32
    %105 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_45) : (!llvm.ptr, i32) -> i32
    %106 = arith.extui %105 : i32 to i64
    %c65536_i64_46 = arith.constant 65536 : i64
    %107 = arith.muli %106, %c65536_i64_46 : i64
    %108 = arith.cmpi ult, %104, %107 : i64
    cf.cond_br %108, ^bb18, ^bb19
  ^bb18:  // 2 preds: ^bb17, ^bb19
    %109 = llvm.getelementptr %12[%103] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %110 = llvm.load volatile %109 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %110, %4 : i32, !llvm.ptr
    %111 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_47 = arith.constant 40 : i32
    %112 = arith.addi %111, %c40_i32_47 : i32
    %c4_i32 = arith.constant 4 : i32
    %c0_i32_48 = arith.constant 0 : i32
    %c4_i32_49 = arith.constant 4 : i32
    %c4_i32_50 = arith.constant 4 : i32
    call @f111(%arg0, %112, %c4_i32, %c0_i32_48, %c4_i32_49, %c4_i32_50) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %113 = llvm.load %2 : !llvm.ptr -> i32
    %c44_i64_51 = arith.constant 44 : i64
    %114 = arith.extui %113 : i32 to i64
    %115 = arith.addi %114, %c44_i64_51 : i64
    %c4_i64_52 = arith.constant 4 : i64
    %116 = arith.addi %115, %c4_i64_52 : i64
    %c0_i32_53 = arith.constant 0 : i32
    %117 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_53) : (!llvm.ptr, i32) -> i32
    %118 = arith.extui %117 : i32 to i64
    %c65536_i64_54 = arith.constant 65536 : i64
    %119 = arith.muli %118, %c65536_i64_54 : i64
    %120 = arith.cmpi ult, %116, %119 : i64
    cf.cond_br %120, ^bb20, ^bb21
  ^bb19:  // pred: ^bb17
    %c1_i32_55 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_55) : (i32) -> ()
    cf.br ^bb18
  ^bb20:  // 2 preds: ^bb18, ^bb21
    %121 = llvm.getelementptr %12[%115] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %122 = llvm.load volatile %121 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %122, %5 : i32, !llvm.ptr
    %123 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i64_56 = arith.constant 40 : i64
    %124 = arith.extui %123 : i32 to i64
    %125 = arith.addi %124, %c40_i64_56 : i64
    %c4_i64_57 = arith.constant 4 : i64
    %126 = arith.addi %125, %c4_i64_57 : i64
    %c0_i32_58 = arith.constant 0 : i32
    %127 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_58) : (!llvm.ptr, i32) -> i32
    %128 = arith.extui %127 : i32 to i64
    %c65536_i64_59 = arith.constant 65536 : i64
    %129 = arith.muli %128, %c65536_i64_59 : i64
    %130 = arith.cmpi ult, %126, %129 : i64
    cf.cond_br %130, ^bb22, ^bb23
  ^bb21:  // pred: ^bb18
    %c1_i32_60 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_60) : (i32) -> ()
    cf.br ^bb20
  ^bb22:  // 2 preds: ^bb20, ^bb23
    %131 = llvm.getelementptr %12[%125] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %132 = llvm.load volatile %131 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_61 = arith.constant 1 : i32
    %133 = arith.cmpi eq, %132, %c1_i32_61 : i32
    %134 = arith.extui %133 : i1 to i32
    %c0_i32_62 = arith.constant 0 : i32
    %135 = arith.cmpi ne, %134, %c0_i32_62 : i32
    cf.cond_br %135, ^bb13, ^bb24
  ^bb23:  // pred: ^bb20
    %c1_i32_63 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_63) : (i32) -> ()
    cf.br ^bb22
  ^bb24:  // pred: ^bb22
    %136 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %137 = arith.addi %136, %c16_i32 : i32
    %c16_i32_64 = arith.constant 16 : i32
    %138 = arith.addi %137, %c16_i32_64 : i32
    llvm.store %138, %6 : i32, !llvm.ptr
    %139 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i64_65 = arith.constant 48 : i64
    %140 = arith.extui %139 : i32 to i64
    %141 = arith.addi %140, %c48_i64_65 : i64
    %c4_i64_66 = arith.constant 4 : i64
    %142 = arith.addi %141, %c4_i64_66 : i64
    %c0_i32_67 = arith.constant 0 : i32
    %143 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_67) : (!llvm.ptr, i32) -> i32
    %144 = arith.extui %143 : i32 to i64
    %c65536_i64_68 = arith.constant 65536 : i64
    %145 = arith.muli %144, %c65536_i64_68 : i64
    %146 = arith.cmpi ult, %142, %145 : i64
    cf.cond_br %146, ^bb25, ^bb26
  ^bb25:  // 2 preds: ^bb24, ^bb26
    %147 = llvm.getelementptr %12[%141] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %148 = llvm.load volatile %147 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_69 = arith.constant 0 : i64
    %149 = arith.extui %138 : i32 to i64
    %150 = arith.addi %149, %c0_i64_69 : i64
    %c4_i64_70 = arith.constant 4 : i64
    %151 = arith.addi %150, %c4_i64_70 : i64
    %c0_i32_71 = arith.constant 0 : i32
    %152 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_71) : (!llvm.ptr, i32) -> i32
    %153 = arith.extui %152 : i32 to i64
    %c65536_i64_72 = arith.constant 65536 : i64
    %154 = arith.muli %153, %c65536_i64_72 : i64
    %155 = arith.cmpi ult, %151, %154 : i64
    cf.cond_br %155, ^bb27, ^bb28
  ^bb26:  // pred: ^bb24
    %c1_i32_73 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_73) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // 2 preds: ^bb25, ^bb28
    %156 = llvm.getelementptr %12[%150] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %148, %156 {alignment = 1 : i64} : i32, !llvm.ptr
    %157 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_74 = arith.constant 16 : i32
    %158 = arith.addi %157, %c16_i32_74 : i32
    %c8_i32 = arith.constant 8 : i32
    %159 = arith.addi %158, %c8_i32 : i32
    llvm.store %159, %1 : i32, !llvm.ptr
    %c0_i32_75 = arith.constant 0 : i32
    %c0_i64_76 = arith.constant 0 : i64
    %160 = arith.extui %159 : i32 to i64
    %161 = arith.addi %160, %c0_i64_76 : i64
    %c4_i64_77 = arith.constant 4 : i64
    %162 = arith.addi %161, %c4_i64_77 : i64
    %c0_i32_78 = arith.constant 0 : i32
    %163 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_78) : (!llvm.ptr, i32) -> i32
    %164 = arith.extui %163 : i32 to i64
    %c65536_i64_79 = arith.constant 65536 : i64
    %165 = arith.muli %164, %c65536_i64_79 : i64
    %166 = arith.cmpi ult, %162, %165 : i64
    cf.cond_br %166, ^bb29, ^bb30
  ^bb28:  // pred: ^bb25
    %c1_i32_80 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_80) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // 2 preds: ^bb27, ^bb30
    %167 = llvm.getelementptr %12[%161] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_75, %167 {alignment = 1 : i64} : i32, !llvm.ptr
    %168 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_81 = arith.constant 0 : i32
    %c36_i64 = arith.constant 36 : i64
    %169 = arith.extui %168 : i32 to i64
    %170 = arith.addi %169, %c36_i64 : i64
    %c4_i64_82 = arith.constant 4 : i64
    %171 = arith.addi %170, %c4_i64_82 : i64
    %c0_i32_83 = arith.constant 0 : i32
    %172 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_83) : (!llvm.ptr, i32) -> i32
    %173 = arith.extui %172 : i32 to i64
    %c65536_i64_84 = arith.constant 65536 : i64
    %174 = arith.muli %173, %c65536_i64_84 : i64
    %175 = arith.cmpi ult, %171, %174 : i64
    cf.cond_br %175, ^bb31, ^bb32
  ^bb30:  // pred: ^bb27
    %c1_i32_85 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_85) : (i32) -> ()
    cf.br ^bb29
  ^bb31:  // 2 preds: ^bb29, ^bb32
    %176 = llvm.getelementptr %12[%170] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_81, %176 {alignment = 1 : i64} : i32, !llvm.ptr
    %177 = llvm.load %2 : !llvm.ptr -> i32
    %178 = llvm.load %5 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %179 = arith.extui %177 : i32 to i64
    %180 = arith.addi %179, %c28_i64 : i64
    %c4_i64_86 = arith.constant 4 : i64
    %181 = arith.addi %180, %c4_i64_86 : i64
    %c0_i32_87 = arith.constant 0 : i32
    %182 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_87) : (!llvm.ptr, i32) -> i32
    %183 = arith.extui %182 : i32 to i64
    %c65536_i64_88 = arith.constant 65536 : i64
    %184 = arith.muli %183, %c65536_i64_88 : i64
    %185 = arith.cmpi ult, %181, %184 : i64
    cf.cond_br %185, ^bb33, ^bb34
  ^bb32:  // pred: ^bb29
    %c1_i32_89 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_89) : (i32) -> ()
    cf.br ^bb31
  ^bb33:  // 2 preds: ^bb31, ^bb34
    %186 = llvm.getelementptr %12[%180] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %178, %186 {alignment = 1 : i64} : i32, !llvm.ptr
    %187 = llvm.load %2 : !llvm.ptr -> i32
    %188 = llvm.load %4 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %189 = arith.extui %187 : i32 to i64
    %190 = arith.addi %189, %c20_i64 : i64
    %c4_i64_90 = arith.constant 4 : i64
    %191 = arith.addi %190, %c4_i64_90 : i64
    %c0_i32_91 = arith.constant 0 : i32
    %192 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_91) : (!llvm.ptr, i32) -> i32
    %193 = arith.extui %192 : i32 to i64
    %c65536_i64_92 = arith.constant 65536 : i64
    %194 = arith.muli %193, %c65536_i64_92 : i64
    %195 = arith.cmpi ult, %191, %194 : i64
    cf.cond_br %195, ^bb35, ^bb36
  ^bb34:  // pred: ^bb31
    %c1_i32_93 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_93) : (i32) -> ()
    cf.br ^bb33
  ^bb35:  // 2 preds: ^bb33, ^bb36
    %196 = llvm.getelementptr %12[%190] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %188, %196 {alignment = 1 : i64} : i32, !llvm.ptr
    %197 = llvm.load %2 : !llvm.ptr -> i32
    %198 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %199 = arith.extui %197 : i32 to i64
    %200 = arith.addi %199, %c16_i64 : i64
    %c4_i64_94 = arith.constant 4 : i64
    %201 = arith.addi %200, %c4_i64_94 : i64
    %c0_i32_95 = arith.constant 0 : i32
    %202 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_95) : (!llvm.ptr, i32) -> i32
    %203 = arith.extui %202 : i32 to i64
    %c65536_i64_96 = arith.constant 65536 : i64
    %204 = arith.muli %203, %c65536_i64_96 : i64
    %205 = arith.cmpi ult, %201, %204 : i64
    cf.cond_br %205, ^bb37, ^bb38
  ^bb36:  // pred: ^bb33
    %c1_i32_97 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_97) : (i32) -> ()
    cf.br ^bb35
  ^bb37:  // 2 preds: ^bb35, ^bb38
    %206 = llvm.getelementptr %12[%200] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %198, %206 {alignment = 1 : i64} : i32, !llvm.ptr
    %207 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_98 = arith.constant 8 : i32
    %208 = arith.addi %207, %c8_i32_98 : i32
    %209 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_99 = arith.constant 16 : i32
    %210 = arith.addi %209, %c16_i32_99 : i32
    call @f96(%arg0, %208, %210) : (!llvm.ptr, i32, i32) -> ()
    %211 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_100 = arith.constant 40 : i32
    %212 = arith.addi %211, %c40_i32_100 : i32
    %c16_i32_101 = arith.constant 16 : i32
    %213 = arith.addi %212, %c16_i32_101 : i32
    %214 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_102 = arith.constant 0 : i64
    %215 = arith.extui %214 : i32 to i64
    %216 = arith.addi %215, %c0_i64_102 : i64
    %c8_i64_103 = arith.constant 8 : i64
    %217 = arith.addi %216, %c8_i64_103 : i64
    %c0_i32_104 = arith.constant 0 : i32
    %218 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_104) : (!llvm.ptr, i32) -> i32
    %219 = arith.extui %218 : i32 to i64
    %c65536_i64_105 = arith.constant 65536 : i64
    %220 = arith.muli %219, %c65536_i64_105 : i64
    %221 = arith.cmpi ult, %217, %220 : i64
    cf.cond_br %221, ^bb39, ^bb40
  ^bb38:  // pred: ^bb35
    %c1_i32_106 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_106) : (i32) -> ()
    cf.br ^bb37
  ^bb39:  // 2 preds: ^bb37, ^bb40
    %222 = llvm.getelementptr %12[%216] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %223 = llvm.load volatile %222 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_107 = arith.constant 0 : i64
    %224 = arith.extui %213 : i32 to i64
    %225 = arith.addi %224, %c0_i64_107 : i64
    %c8_i64_108 = arith.constant 8 : i64
    %226 = arith.addi %225, %c8_i64_108 : i64
    %c0_i32_109 = arith.constant 0 : i32
    %227 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_109) : (!llvm.ptr, i32) -> i32
    %228 = arith.extui %227 : i32 to i64
    %c65536_i64_110 = arith.constant 65536 : i64
    %229 = arith.muli %228, %c65536_i64_110 : i64
    %230 = arith.cmpi ult, %226, %229 : i64
    cf.cond_br %230, ^bb41, ^bb42
  ^bb40:  // pred: ^bb37
    %c1_i32_111 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_111) : (i32) -> ()
    cf.br ^bb39
  ^bb41:  // 2 preds: ^bb39, ^bb42
    %231 = llvm.getelementptr %12[%225] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %223, %231 {alignment = 1 : i64} : i64, !llvm.ptr
    %232 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_112 = arith.constant 40 : i32
    %233 = arith.addi %232, %c40_i32_112 : i32
    %c8_i32_113 = arith.constant 8 : i32
    %234 = arith.addi %233, %c8_i32_113 : i32
    %235 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_114 = arith.constant 0 : i64
    %236 = arith.extui %235 : i32 to i64
    %237 = arith.addi %236, %c0_i64_114 : i64
    %c8_i64_115 = arith.constant 8 : i64
    %238 = arith.addi %237, %c8_i64_115 : i64
    %c0_i32_116 = arith.constant 0 : i32
    %239 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_116) : (!llvm.ptr, i32) -> i32
    %240 = arith.extui %239 : i32 to i64
    %c65536_i64_117 = arith.constant 65536 : i64
    %241 = arith.muli %240, %c65536_i64_117 : i64
    %242 = arith.cmpi ult, %238, %241 : i64
    cf.cond_br %242, ^bb43, ^bb44
  ^bb42:  // pred: ^bb39
    %c1_i32_118 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_118) : (i32) -> ()
    cf.br ^bb41
  ^bb43:  // 2 preds: ^bb41, ^bb44
    %243 = llvm.getelementptr %12[%237] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %244 = llvm.load volatile %243 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_119 = arith.constant 0 : i64
    %245 = arith.extui %234 : i32 to i64
    %246 = arith.addi %245, %c0_i64_119 : i64
    %c8_i64_120 = arith.constant 8 : i64
    %247 = arith.addi %246, %c8_i64_120 : i64
    %c0_i32_121 = arith.constant 0 : i32
    %248 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_121) : (!llvm.ptr, i32) -> i32
    %249 = arith.extui %248 : i32 to i64
    %c65536_i64_122 = arith.constant 65536 : i64
    %250 = arith.muli %249, %c65536_i64_122 : i64
    %251 = arith.cmpi ult, %247, %250 : i64
    cf.cond_br %251, ^bb45, ^bb46
  ^bb44:  // pred: ^bb41
    %c1_i32_123 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_123) : (i32) -> ()
    cf.br ^bb43
  ^bb45:  // 2 preds: ^bb43, ^bb46
    %252 = llvm.getelementptr %12[%246] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %244, %252 {alignment = 1 : i64} : i64, !llvm.ptr
    %253 = llvm.load %2 : !llvm.ptr -> i32
    %254 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i64_124 = arith.constant 16 : i64
    %255 = arith.extui %254 : i32 to i64
    %256 = arith.addi %255, %c16_i64_124 : i64
    %c8_i64_125 = arith.constant 8 : i64
    %257 = arith.addi %256, %c8_i64_125 : i64
    %c0_i32_126 = arith.constant 0 : i32
    %258 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_126) : (!llvm.ptr, i32) -> i32
    %259 = arith.extui %258 : i32 to i64
    %c65536_i64_127 = arith.constant 65536 : i64
    %260 = arith.muli %259, %c65536_i64_127 : i64
    %261 = arith.cmpi ult, %257, %260 : i64
    cf.cond_br %261, ^bb47, ^bb48
  ^bb46:  // pred: ^bb43
    %c1_i32_128 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_128) : (i32) -> ()
    cf.br ^bb45
  ^bb47:  // 2 preds: ^bb45, ^bb48
    %262 = llvm.getelementptr %12[%256] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %263 = llvm.load volatile %262 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %263, %7 : i64, !llvm.ptr
    %c40_i64_129 = arith.constant 40 : i64
    %264 = arith.extui %253 : i32 to i64
    %265 = arith.addi %264, %c40_i64_129 : i64
    %c8_i64_130 = arith.constant 8 : i64
    %266 = arith.addi %265, %c8_i64_130 : i64
    %c0_i32_131 = arith.constant 0 : i32
    %267 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_131) : (!llvm.ptr, i32) -> i32
    %268 = arith.extui %267 : i32 to i64
    %c65536_i64_132 = arith.constant 65536 : i64
    %269 = arith.muli %268, %c65536_i64_132 : i64
    %270 = arith.cmpi ult, %266, %269 : i64
    cf.cond_br %270, ^bb49, ^bb50
  ^bb48:  // pred: ^bb45
    %c1_i32_133 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_133) : (i32) -> ()
    cf.br ^bb47
  ^bb49:  // 2 preds: ^bb47, ^bb50
    %271 = llvm.getelementptr %12[%265] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %263, %271 {alignment = 1 : i64} : i64, !llvm.ptr
    %272 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %273 = arith.addi %272, %c64_i32 : i32
    %c8_i32_134 = arith.constant 8 : i32
    %274 = arith.addi %273, %c8_i32_134 : i32
    %275 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_135 = arith.constant 0 : i64
    %276 = arith.extui %275 : i32 to i64
    %277 = arith.addi %276, %c0_i64_135 : i64
    %c4_i64_136 = arith.constant 4 : i64
    %278 = arith.addi %277, %c4_i64_136 : i64
    %c0_i32_137 = arith.constant 0 : i32
    %279 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_137) : (!llvm.ptr, i32) -> i32
    %280 = arith.extui %279 : i32 to i64
    %c65536_i64_138 = arith.constant 65536 : i64
    %281 = arith.muli %280, %c65536_i64_138 : i64
    %282 = arith.cmpi ult, %278, %281 : i64
    cf.cond_br %282, ^bb51, ^bb52
  ^bb50:  // pred: ^bb47
    %c1_i32_139 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_139) : (i32) -> ()
    cf.br ^bb49
  ^bb51:  // 2 preds: ^bb49, ^bb52
    %283 = llvm.getelementptr %12[%277] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %284 = llvm.load volatile %283 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_140 = arith.constant 0 : i64
    %285 = arith.extui %274 : i32 to i64
    %286 = arith.addi %285, %c0_i64_140 : i64
    %c4_i64_141 = arith.constant 4 : i64
    %287 = arith.addi %286, %c4_i64_141 : i64
    %c0_i32_142 = arith.constant 0 : i32
    %288 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_142) : (!llvm.ptr, i32) -> i32
    %289 = arith.extui %288 : i32 to i64
    %c65536_i64_143 = arith.constant 65536 : i64
    %290 = arith.muli %289, %c65536_i64_143 : i64
    %291 = arith.cmpi ult, %287, %290 : i64
    cf.cond_br %291, ^bb53, ^bb54
  ^bb52:  // pred: ^bb49
    %c1_i32_144 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_144) : (i32) -> ()
    cf.br ^bb51
  ^bb53:  // 2 preds: ^bb51, ^bb54
    %292 = llvm.getelementptr %12[%286] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %284, %292 {alignment = 1 : i64} : i32, !llvm.ptr
    %293 = llvm.load %2 : !llvm.ptr -> i32
    %294 = llvm.load %7 : !llvm.ptr -> i64
    %c64_i64 = arith.constant 64 : i64
    %295 = arith.extui %293 : i32 to i64
    %296 = arith.addi %295, %c64_i64 : i64
    %c8_i64_145 = arith.constant 8 : i64
    %297 = arith.addi %296, %c8_i64_145 : i64
    %c0_i32_146 = arith.constant 0 : i32
    %298 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_146) : (!llvm.ptr, i32) -> i32
    %299 = arith.extui %298 : i32 to i64
    %c65536_i64_147 = arith.constant 65536 : i64
    %300 = arith.muli %299, %c65536_i64_147 : i64
    %301 = arith.cmpi ult, %297, %300 : i64
    cf.cond_br %301, ^bb55, ^bb56
  ^bb54:  // pred: ^bb51
    %c1_i32_148 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_148) : (i32) -> ()
    cf.br ^bb53
  ^bb55:  // 2 preds: ^bb53, ^bb56
    %302 = llvm.getelementptr %12[%296] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %294, %302 {alignment = 1 : i64} : i64, !llvm.ptr
    %303 = llvm.load %2 : !llvm.ptr -> i32
    %c52_i32 = arith.constant 52 : i32
    %304 = arith.addi %303, %c52_i32 : i32
    llvm.store %304, %1 : i32, !llvm.ptr
    call @f89(%arg0, %304) : (!llvm.ptr, i32) -> ()
    %305 = llvm.load %1 : !llvm.ptr -> i32
    call @f90(%arg0, %305) : (!llvm.ptr, i32) -> ()
    %306 = llvm.load %0 : !llvm.ptr -> i32
    %307 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_149 = arith.constant 64 : i32
    %308 = arith.addi %307, %c64_i32_149 : i32
    call @f86(%arg0, %306, %308) : (!llvm.ptr, i32, i32) -> ()
    %309 = llvm.load %2 : !llvm.ptr -> i32
    %c80_i32_150 = arith.constant 80 : i32
    %310 = arith.addi %309, %c80_i32_150 : i32
    llvm.store %310, %9 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb56:  // pred: ^bb53
    %c1_i32_151 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_151) : (i32) -> ()
    cf.br ^bb55
  ^bb57:  // 2 preds: ^bb14, ^bb58
    %311 = llvm.getelementptr %12[%90] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %312 = llvm.load volatile %311 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f143(%arg0, %87, %312) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb58:  // pred: ^bb14
    %c1_i32_152 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_152) : (i32) -> ()
    cf.br ^bb57
  ^bb59:  // 2 preds: ^bb13, ^bb60
    %313 = llvm.getelementptr %12[%81] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %314 = llvm.load volatile %313 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f143(%arg0, %78, %314) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb60:  // pred: ^bb13
    %c1_i32_153 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_153) : (i32) -> ()
    cf.br ^bb59
  }
  func.func @f8(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %10 = arith.subi %9, %c16_i32 : i32
    llvm.store %10, %1 : i32, !llvm.ptr
    llvm.store %10, %5 : i32, !llvm.ptr
    %11 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %12 = arith.addi %11, %c4_i32 : i32
    %c4_i32_3 = arith.constant 4 : i32
    %c0_i32_4 = arith.constant 0 : i32
    %c1_i32_5 = arith.constant 1 : i32
    %c1_i32_6 = arith.constant 1 : i32
    call @f111(%arg0, %12, %c4_i32_3, %c0_i32_4, %c1_i32_5, %c1_i32_6) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c8_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %16 = arith.addi %15, %c4_i64 : i64
    %c0_i32_7 = arith.constant 0 : i32
    %17 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_7) : (!llvm.ptr, i32) -> i32
    %18 = arith.extui %17 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %19 = arith.muli %18, %c65536_i64 : i64
    %20 = arith.cmpi ult, %16, %19 : i64
    cf.cond_br %20, ^bb3, ^bb4
  ^bb2:  // pred: ^bb19
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %21 = llvm.getelementptr %8[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %22 = llvm.load volatile %21 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %22, %2 : i32, !llvm.ptr
    %23 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_8 = arith.constant 4 : i64
    %24 = arith.extui %23 : i32 to i64
    %25 = arith.addi %24, %c4_i64_8 : i64
    %c4_i64_9 = arith.constant 4 : i64
    %26 = arith.addi %25, %c4_i64_9 : i64
    %c0_i32_10 = arith.constant 0 : i32
    %27 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_10) : (!llvm.ptr, i32) -> i32
    %28 = arith.extui %27 : i32 to i64
    %c65536_i64_11 = arith.constant 65536 : i64
    %29 = arith.muli %28, %c65536_i64_11 : i64
    %30 = arith.cmpi ult, %26, %29 : i64
    cf.cond_br %30, ^bb6, ^bb7
  ^bb4:  // pred: ^bb1
    %c1_i32_12 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_12) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // pred: ^bb6
    %31 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %32 = arith.extui %31 : i32 to i64
    %33 = arith.addi %32, %c12_i64 : i64
    %c4_i64_13 = arith.constant 4 : i64
    %34 = arith.addi %33, %c4_i64_13 : i64
    %c0_i32_14 = arith.constant 0 : i32
    %35 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_14) : (!llvm.ptr, i32) -> i32
    %36 = arith.extui %35 : i32 to i64
    %c65536_i64_15 = arith.constant 65536 : i64
    %37 = arith.muli %36, %c65536_i64_15 : i64
    %38 = arith.cmpi ult, %34, %37 : i64
    cf.cond_br %38, ^bb11, ^bb12
  ^bb6:  // 2 preds: ^bb3, ^bb7
    %39 = llvm.getelementptr %8[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %40 = llvm.load volatile %39 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_16 = arith.constant 1 : i32
    %41 = arith.cmpi eq, %40, %c1_i32_16 : i32
    %42 = arith.extui %41 : i1 to i32
    %c0_i32_17 = arith.constant 0 : i32
    %43 = arith.cmpi eq, %42, %c0_i32_17 : i32
    %44 = arith.extui %43 : i1 to i32
    %c0_i32_18 = arith.constant 0 : i32
    %45 = arith.cmpi ne, %44, %c0_i32_18 : i32
    cf.cond_br %45, ^bb5, ^bb8
  ^bb7:  // pred: ^bb3
    %c1_i32_19 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_19) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // pred: ^bb6
    %46 = llvm.load %2 : !llvm.ptr -> i32
    %47 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64_20 = arith.constant 12 : i64
    %48 = arith.extui %47 : i32 to i64
    %49 = arith.addi %48, %c12_i64_20 : i64
    %c4_i64_21 = arith.constant 4 : i64
    %50 = arith.addi %49, %c4_i64_21 : i64
    %c0_i32_22 = arith.constant 0 : i32
    %51 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_22) : (!llvm.ptr, i32) -> i32
    %52 = arith.extui %51 : i32 to i64
    %c65536_i64_23 = arith.constant 65536 : i64
    %53 = arith.muli %52, %c65536_i64_23 : i64
    %54 = arith.cmpi ult, %50, %53 : i64
    cf.cond_br %54, ^bb9, ^bb10
  ^bb9:  // 2 preds: ^bb8, ^bb10
    %55 = llvm.getelementptr %8[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %56 = llvm.load volatile %55 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f143(%arg0, %46, %56) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb10:  // pred: ^bb8
    %c1_i32_24 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_24) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb5, ^bb12
    %57 = llvm.getelementptr %8[%33] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %58 = llvm.load volatile %57 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %58, %3 : i32, !llvm.ptr
    %59 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32_25 = arith.constant 4 : i32
    %c8_i64_26 = arith.constant 8 : i64
    %60 = arith.extui %59 : i32 to i64
    %61 = arith.addi %60, %c8_i64_26 : i64
    %c4_i64_27 = arith.constant 4 : i64
    %62 = arith.addi %61, %c4_i64_27 : i64
    %c0_i32_28 = arith.constant 0 : i32
    %63 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_28) : (!llvm.ptr, i32) -> i32
    %64 = arith.extui %63 : i32 to i64
    %c65536_i64_29 = arith.constant 65536 : i64
    %65 = arith.muli %64, %c65536_i64_29 : i64
    %66 = arith.cmpi ult, %62, %65 : i64
    cf.cond_br %66, ^bb13, ^bb14
  ^bb12:  // pred: ^bb5
    %c1_i32_30 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_30) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %67 = llvm.getelementptr %8[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4_i32_25, %67 {alignment = 1 : i64} : i32, !llvm.ptr
    %68 = llvm.load %0 : !llvm.ptr -> i32
    %69 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64_31 = arith.constant 4 : i64
    %70 = arith.extui %68 : i32 to i64
    %71 = arith.addi %70, %c4_i64_31 : i64
    %c4_i64_32 = arith.constant 4 : i64
    %72 = arith.addi %71, %c4_i64_32 : i64
    %c0_i32_33 = arith.constant 0 : i32
    %73 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_33) : (!llvm.ptr, i32) -> i32
    %74 = arith.extui %73 : i32 to i64
    %c65536_i64_34 = arith.constant 65536 : i64
    %75 = arith.muli %74, %c65536_i64_34 : i64
    %76 = arith.cmpi ult, %72, %75 : i64
    cf.cond_br %76, ^bb15, ^bb16
  ^bb14:  // pred: ^bb11
    %c1_i32_35 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_35) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // 2 preds: ^bb13, ^bb16
    %77 = llvm.getelementptr %8[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %69, %77 {alignment = 1 : i64} : i32, !llvm.ptr
    %78 = llvm.load %0 : !llvm.ptr -> i32
    %79 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %80 = arith.extui %78 : i32 to i64
    %81 = arith.addi %80, %c0_i64 : i64
    %c4_i64_36 = arith.constant 4 : i64
    %82 = arith.addi %81, %c4_i64_36 : i64
    %c0_i32_37 = arith.constant 0 : i32
    %83 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_37) : (!llvm.ptr, i32) -> i32
    %84 = arith.extui %83 : i32 to i64
    %c65536_i64_38 = arith.constant 65536 : i64
    %85 = arith.muli %84, %c65536_i64_38 : i64
    %86 = arith.cmpi ult, %82, %85 : i64
    cf.cond_br %86, ^bb17, ^bb18
  ^bb16:  // pred: ^bb13
    %c1_i32_39 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_39) : (i32) -> ()
    cf.br ^bb15
  ^bb17:  // 2 preds: ^bb15, ^bb18
    %87 = llvm.getelementptr %8[%81] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %79, %87 {alignment = 1 : i64} : i32, !llvm.ptr
    %88 = llvm.load %3 : !llvm.ptr -> i32
    %c1263817811_i32 = arith.constant 1263817811 : i32
    %c0_i64_40 = arith.constant 0 : i64
    %89 = arith.extui %88 : i32 to i64
    %90 = arith.addi %89, %c0_i64_40 : i64
    %c4_i64_41 = arith.constant 4 : i64
    %91 = arith.addi %90, %c4_i64_41 : i64
    %c0_i32_42 = arith.constant 0 : i32
    %92 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_42) : (!llvm.ptr, i32) -> i32
    %93 = arith.extui %92 : i32 to i64
    %c65536_i64_43 = arith.constant 65536 : i64
    %94 = arith.muli %93, %c65536_i64_43 : i64
    %95 = arith.cmpi ult, %91, %94 : i64
    cf.cond_br %95, ^bb19, ^bb20
  ^bb18:  // pred: ^bb15
    %c1_i32_44 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_44) : (i32) -> ()
    cf.br ^bb17
  ^bb19:  // 2 preds: ^bb17, ^bb20
    %96 = llvm.getelementptr %8[%90] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1263817811_i32, %96 {alignment = 1 : i64} : i32, !llvm.ptr
    %97 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32_45 = arith.constant 16 : i32
    %98 = arith.addi %97, %c16_i32_45 : i32
    llvm.store %98, %5 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb20:  // pred: ^bb17
    %c1_i32_46 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_46) : (i32) -> ()
    cf.br ^bb19
  }
  func.func @f9(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %11 = llvm.load %7 : !llvm.ptr -> i32
    %c80_i32 = arith.constant 80 : i32
    %12 = arith.subi %11, %c80_i32 : i32
    llvm.store %12, %2 : i32, !llvm.ptr
    llvm.store %12, %7 : i32, !llvm.ptr
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c0_i64 : i64
    %c1_i64 = arith.constant 1 : i64
    %16 = arith.addi %15, %c1_i64 : i64
    %c0_i32_5 = arith.constant 0 : i32
    %17 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_5) : (!llvm.ptr, i32) -> i32
    %18 = arith.extui %17 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %19 = arith.muli %18, %c65536_i64 : i64
    %20 = arith.cmpi ult, %16, %19 : i64
    cf.cond_br %20, ^bb3, ^bb4
  ^bb2:  // pred: ^bb29
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %21 = llvm.getelementptr %10[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %22 = llvm.load volatile %21 {alignment = 1 : i64} : !llvm.ptr -> i8
    %23 = arith.extui %22 : i8 to i32
    llvm.store %23, %1 : i32, !llvm.ptr
    %24 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32 = arith.constant 40 : i32
    %25 = arith.addi %24, %c40_i32 : i32
    %c24_i32 = arith.constant 24 : i32
    %26 = arith.addi %25, %c24_i32 : i32
    llvm.store %26, %3 : i32, !llvm.ptr
    %c0_i64_6 = arith.constant 0 : i64
    %c0_i64_7 = arith.constant 0 : i64
    %27 = arith.extui %26 : i32 to i64
    %28 = arith.addi %27, %c0_i64_7 : i64
    %c8_i64 = arith.constant 8 : i64
    %29 = arith.addi %28, %c8_i64 : i64
    %c0_i32_8 = arith.constant 0 : i32
    %30 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_8) : (!llvm.ptr, i32) -> i32
    %31 = arith.extui %30 : i32 to i64
    %c65536_i64_9 = arith.constant 65536 : i64
    %32 = arith.muli %31, %c65536_i64_9 : i64
    %33 = arith.cmpi ult, %29, %32 : i64
    cf.cond_br %33, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c1_i32_10 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_10) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %34 = llvm.getelementptr %10[%28] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_6, %34 {alignment = 1 : i64} : i64, !llvm.ptr
    %35 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_11 = arith.constant 40 : i32
    %36 = arith.addi %35, %c40_i32_11 : i32
    %c16_i32 = arith.constant 16 : i32
    %37 = arith.addi %36, %c16_i32 : i32
    llvm.store %37, %4 : i32, !llvm.ptr
    %c0_i64_12 = arith.constant 0 : i64
    %c0_i64_13 = arith.constant 0 : i64
    %38 = arith.extui %37 : i32 to i64
    %39 = arith.addi %38, %c0_i64_13 : i64
    %c8_i64_14 = arith.constant 8 : i64
    %40 = arith.addi %39, %c8_i64_14 : i64
    %c0_i32_15 = arith.constant 0 : i32
    %41 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_15) : (!llvm.ptr, i32) -> i32
    %42 = arith.extui %41 : i32 to i64
    %c65536_i64_16 = arith.constant 65536 : i64
    %43 = arith.muli %42, %c65536_i64_16 : i64
    %44 = arith.cmpi ult, %40, %43 : i64
    cf.cond_br %44, ^bb7, ^bb8
  ^bb6:  // pred: ^bb3
    %c1_i32_17 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_17) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %45 = llvm.getelementptr %10[%39] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_12, %45 {alignment = 1 : i64} : i64, !llvm.ptr
    %46 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_18 = arith.constant 40 : i32
    %47 = arith.addi %46, %c40_i32_18 : i32
    %c8_i32 = arith.constant 8 : i32
    %48 = arith.addi %47, %c8_i32 : i32
    llvm.store %48, %5 : i32, !llvm.ptr
    %c0_i64_19 = arith.constant 0 : i64
    %c0_i64_20 = arith.constant 0 : i64
    %49 = arith.extui %48 : i32 to i64
    %50 = arith.addi %49, %c0_i64_20 : i64
    %c8_i64_21 = arith.constant 8 : i64
    %51 = arith.addi %50, %c8_i64_21 : i64
    %c0_i32_22 = arith.constant 0 : i32
    %52 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_22) : (!llvm.ptr, i32) -> i32
    %53 = arith.extui %52 : i32 to i64
    %c65536_i64_23 = arith.constant 65536 : i64
    %54 = arith.muli %53, %c65536_i64_23 : i64
    %55 = arith.cmpi ult, %51, %54 : i64
    cf.cond_br %55, ^bb9, ^bb10
  ^bb8:  // pred: ^bb5
    %c1_i32_24 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_24) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %56 = llvm.getelementptr %10[%50] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_19, %56 {alignment = 1 : i64} : i64, !llvm.ptr
    %57 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_25 = arith.constant 0 : i64
    %c40_i64 = arith.constant 40 : i64
    %58 = arith.extui %57 : i32 to i64
    %59 = arith.addi %58, %c40_i64 : i64
    %c8_i64_26 = arith.constant 8 : i64
    %60 = arith.addi %59, %c8_i64_26 : i64
    %c0_i32_27 = arith.constant 0 : i32
    %61 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_27) : (!llvm.ptr, i32) -> i32
    %62 = arith.extui %61 : i32 to i64
    %c65536_i64_28 = arith.constant 65536 : i64
    %63 = arith.muli %62, %c65536_i64_28 : i64
    %64 = arith.cmpi ult, %60, %63 : i64
    cf.cond_br %64, ^bb11, ^bb12
  ^bb10:  // pred: ^bb7
    %c1_i32_29 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_29) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %65 = llvm.getelementptr %10[%59] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_25, %65 {alignment = 1 : i64} : i64, !llvm.ptr
    %66 = llvm.load %2 : !llvm.ptr -> i32
    %67 = llvm.load %1 : !llvm.ptr -> i32
    %c79_i64 = arith.constant 79 : i64
    %68 = arith.extui %66 : i32 to i64
    %69 = arith.addi %68, %c79_i64 : i64
    %c1_i64_30 = arith.constant 1 : i64
    %70 = arith.addi %69, %c1_i64_30 : i64
    %c0_i32_31 = arith.constant 0 : i32
    %71 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_31) : (!llvm.ptr, i32) -> i32
    %72 = arith.extui %71 : i32 to i64
    %c65536_i64_32 = arith.constant 65536 : i64
    %73 = arith.muli %72, %c65536_i64_32 : i64
    %74 = arith.cmpi ult, %70, %73 : i64
    cf.cond_br %74, ^bb13, ^bb14
  ^bb12:  // pred: ^bb9
    %c1_i32_33 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_33) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %75 = llvm.getelementptr %10[%69] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %76 = arith.trunci %67 : i32 to i8
    llvm.store volatile %76, %75 {alignment = 1 : i64} : i8, !llvm.ptr
    %77 = llvm.load %2 : !llvm.ptr -> i32
    %c71_i32 = arith.constant 71 : i32
    %78 = arith.addi %77, %c71_i32 : i32
    %c1_i32_34 = arith.constant 1 : i32
    %79 = llvm.load %2 : !llvm.ptr -> i32
    %c79_i32 = arith.constant 79 : i32
    %80 = arith.addi %79, %c79_i32 : i32
    %c1_i32_35 = arith.constant 1 : i32
    %c1048804_i32 = arith.constant 1048804 : i32
    call @f114(%arg0, %78, %c1_i32_34, %80, %c1_i32_35, %c1048804_i32) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %81 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_36 = arith.constant 8 : i32
    %82 = arith.addi %81, %c8_i32_36 : i32
    %c8_i32_37 = arith.constant 8 : i32
    %83 = arith.addi %82, %c8_i32_37 : i32
    %84 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64_38 = arith.constant 0 : i64
    %85 = arith.extui %84 : i32 to i64
    %86 = arith.addi %85, %c0_i64_38 : i64
    %c8_i64_39 = arith.constant 8 : i64
    %87 = arith.addi %86, %c8_i64_39 : i64
    %c0_i32_40 = arith.constant 0 : i32
    %88 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_40) : (!llvm.ptr, i32) -> i32
    %89 = arith.extui %88 : i32 to i64
    %c65536_i64_41 = arith.constant 65536 : i64
    %90 = arith.muli %89, %c65536_i64_41 : i64
    %91 = arith.cmpi ult, %87, %90 : i64
    cf.cond_br %91, ^bb15, ^bb16
  ^bb14:  // pred: ^bb11
    %c1_i32_42 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_42) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // 2 preds: ^bb13, ^bb16
    %92 = llvm.getelementptr %10[%86] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %93 = llvm.load volatile %92 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_43 = arith.constant 0 : i64
    %94 = arith.extui %83 : i32 to i64
    %95 = arith.addi %94, %c0_i64_43 : i64
    %c8_i64_44 = arith.constant 8 : i64
    %96 = arith.addi %95, %c8_i64_44 : i64
    %c0_i32_45 = arith.constant 0 : i32
    %97 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_45) : (!llvm.ptr, i32) -> i32
    %98 = arith.extui %97 : i32 to i64
    %c65536_i64_46 = arith.constant 65536 : i64
    %99 = arith.muli %98, %c65536_i64_46 : i64
    %100 = arith.cmpi ult, %96, %99 : i64
    cf.cond_br %100, ^bb17, ^bb18
  ^bb16:  // pred: ^bb13
    %c1_i32_47 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_47) : (i32) -> ()
    cf.br ^bb15
  ^bb17:  // 2 preds: ^bb15, ^bb18
    %101 = llvm.getelementptr %10[%95] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %93, %101 {alignment = 1 : i64} : i64, !llvm.ptr
    %102 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_48 = arith.constant 8 : i32
    %103 = arith.addi %102, %c8_i32_48 : i32
    %c16_i32_49 = arith.constant 16 : i32
    %104 = arith.addi %103, %c16_i32_49 : i32
    %105 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_50 = arith.constant 0 : i64
    %106 = arith.extui %105 : i32 to i64
    %107 = arith.addi %106, %c0_i64_50 : i64
    %c8_i64_51 = arith.constant 8 : i64
    %108 = arith.addi %107, %c8_i64_51 : i64
    %c0_i32_52 = arith.constant 0 : i32
    %109 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_52) : (!llvm.ptr, i32) -> i32
    %110 = arith.extui %109 : i32 to i64
    %c65536_i64_53 = arith.constant 65536 : i64
    %111 = arith.muli %110, %c65536_i64_53 : i64
    %112 = arith.cmpi ult, %108, %111 : i64
    cf.cond_br %112, ^bb19, ^bb20
  ^bb18:  // pred: ^bb15
    %c1_i32_54 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_54) : (i32) -> ()
    cf.br ^bb17
  ^bb19:  // 2 preds: ^bb17, ^bb20
    %113 = llvm.getelementptr %10[%107] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %114 = llvm.load volatile %113 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_55 = arith.constant 0 : i64
    %115 = arith.extui %104 : i32 to i64
    %116 = arith.addi %115, %c0_i64_55 : i64
    %c8_i64_56 = arith.constant 8 : i64
    %117 = arith.addi %116, %c8_i64_56 : i64
    %c0_i32_57 = arith.constant 0 : i32
    %118 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_57) : (!llvm.ptr, i32) -> i32
    %119 = arith.extui %118 : i32 to i64
    %c65536_i64_58 = arith.constant 65536 : i64
    %120 = arith.muli %119, %c65536_i64_58 : i64
    %121 = arith.cmpi ult, %117, %120 : i64
    cf.cond_br %121, ^bb21, ^bb22
  ^bb20:  // pred: ^bb17
    %c1_i32_59 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_59) : (i32) -> ()
    cf.br ^bb19
  ^bb21:  // 2 preds: ^bb19, ^bb22
    %122 = llvm.getelementptr %10[%116] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %114, %122 {alignment = 1 : i64} : i64, !llvm.ptr
    %123 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_60 = arith.constant 8 : i32
    %124 = arith.addi %123, %c8_i32_60 : i32
    %c24_i32_61 = arith.constant 24 : i32
    %125 = arith.addi %124, %c24_i32_61 : i32
    %126 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_62 = arith.constant 0 : i64
    %127 = arith.extui %126 : i32 to i64
    %128 = arith.addi %127, %c0_i64_62 : i64
    %c8_i64_63 = arith.constant 8 : i64
    %129 = arith.addi %128, %c8_i64_63 : i64
    %c0_i32_64 = arith.constant 0 : i32
    %130 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_64) : (!llvm.ptr, i32) -> i32
    %131 = arith.extui %130 : i32 to i64
    %c65536_i64_65 = arith.constant 65536 : i64
    %132 = arith.muli %131, %c65536_i64_65 : i64
    %133 = arith.cmpi ult, %129, %132 : i64
    cf.cond_br %133, ^bb23, ^bb24
  ^bb22:  // pred: ^bb19
    %c1_i32_66 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_66) : (i32) -> ()
    cf.br ^bb21
  ^bb23:  // 2 preds: ^bb21, ^bb24
    %134 = llvm.getelementptr %10[%128] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %135 = llvm.load volatile %134 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_67 = arith.constant 0 : i64
    %136 = arith.extui %125 : i32 to i64
    %137 = arith.addi %136, %c0_i64_67 : i64
    %c8_i64_68 = arith.constant 8 : i64
    %138 = arith.addi %137, %c8_i64_68 : i64
    %c0_i32_69 = arith.constant 0 : i32
    %139 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_69) : (!llvm.ptr, i32) -> i32
    %140 = arith.extui %139 : i32 to i64
    %c65536_i64_70 = arith.constant 65536 : i64
    %141 = arith.muli %140, %c65536_i64_70 : i64
    %142 = arith.cmpi ult, %138, %141 : i64
    cf.cond_br %142, ^bb25, ^bb26
  ^bb24:  // pred: ^bb21
    %c1_i32_71 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_71) : (i32) -> ()
    cf.br ^bb23
  ^bb25:  // 2 preds: ^bb23, ^bb26
    %143 = llvm.getelementptr %10[%137] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %135, %143 {alignment = 1 : i64} : i64, !llvm.ptr
    %144 = llvm.load %2 : !llvm.ptr -> i32
    %145 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i64_72 = arith.constant 40 : i64
    %146 = arith.extui %145 : i32 to i64
    %147 = arith.addi %146, %c40_i64_72 : i64
    %c8_i64_73 = arith.constant 8 : i64
    %148 = arith.addi %147, %c8_i64_73 : i64
    %c0_i32_74 = arith.constant 0 : i32
    %149 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_74) : (!llvm.ptr, i32) -> i32
    %150 = arith.extui %149 : i32 to i64
    %c65536_i64_75 = arith.constant 65536 : i64
    %151 = arith.muli %150, %c65536_i64_75 : i64
    %152 = arith.cmpi ult, %148, %151 : i64
    cf.cond_br %152, ^bb27, ^bb28
  ^bb26:  // pred: ^bb23
    %c1_i32_76 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_76) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // 2 preds: ^bb25, ^bb28
    %153 = llvm.getelementptr %10[%147] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %154 = llvm.load volatile %153 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c8_i64_77 = arith.constant 8 : i64
    %155 = arith.extui %144 : i32 to i64
    %156 = arith.addi %155, %c8_i64_77 : i64
    %c8_i64_78 = arith.constant 8 : i64
    %157 = arith.addi %156, %c8_i64_78 : i64
    %c0_i32_79 = arith.constant 0 : i32
    %158 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_79) : (!llvm.ptr, i32) -> i32
    %159 = arith.extui %158 : i32 to i64
    %c65536_i64_80 = arith.constant 65536 : i64
    %160 = arith.muli %159, %c65536_i64_80 : i64
    %161 = arith.cmpi ult, %157, %160 : i64
    cf.cond_br %161, ^bb29, ^bb30
  ^bb28:  // pred: ^bb25
    %c1_i32_81 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_81) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // 2 preds: ^bb27, ^bb30
    %162 = llvm.getelementptr %10[%156] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %154, %162 {alignment = 1 : i64} : i64, !llvm.ptr
    %163 = llvm.load %0 : !llvm.ptr -> i32
    %164 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_82 = arith.constant 8 : i32
    %165 = arith.addi %164, %c8_i32_82 : i32
    call @f15(%arg0, %163, %165) : (!llvm.ptr, i32, i32) -> ()
    %166 = llvm.load %2 : !llvm.ptr -> i32
    %c80_i32_83 = arith.constant 80 : i32
    %167 = arith.addi %166, %c80_i32_83 : i32
    llvm.store %167, %7 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb30:  // pred: ^bb27
    %c1_i32_84 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_84) : (i32) -> ()
    cf.br ^bb29
  }
  func.func @f10(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %11 = llvm.load %7 : !llvm.ptr -> i32
    %c96_i32 = arith.constant 96 : i32
    %12 = arith.subi %11, %c96_i32 : i32
    llvm.store %12, %2 : i32, !llvm.ptr
    llvm.store %12, %7 : i32, !llvm.ptr
    %13 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %14 = arith.addi %13, %c24_i32 : i32
    %c0_i64 = arith.constant 0 : i64
    %c0_i64_5 = arith.constant 0 : i64
    %15 = arith.extui %14 : i32 to i64
    %16 = arith.addi %15, %c0_i64_5 : i64
    %c8_i64 = arith.constant 8 : i64
    %17 = arith.addi %16, %c8_i64 : i64
    %c0_i32_6 = arith.constant 0 : i32
    %18 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_6) : (!llvm.ptr, i32) -> i32
    %19 = arith.extui %18 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %20 = arith.muli %19, %c65536_i64 : i64
    %21 = arith.cmpi ult, %17, %20 : i64
    cf.cond_br %21, ^bb3, ^bb4
  ^bb2:  // pred: ^bb68
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %22 = llvm.getelementptr %10[%16] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64, %22 {alignment = 1 : i64} : i64, !llvm.ptr
    %23 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %24 = arith.addi %23, %c16_i32 : i32
    %c0_i64_7 = arith.constant 0 : i64
    %c0_i64_8 = arith.constant 0 : i64
    %25 = arith.extui %24 : i32 to i64
    %26 = arith.addi %25, %c0_i64_8 : i64
    %c8_i64_9 = arith.constant 8 : i64
    %27 = arith.addi %26, %c8_i64_9 : i64
    %c0_i32_10 = arith.constant 0 : i32
    %28 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_10) : (!llvm.ptr, i32) -> i32
    %29 = arith.extui %28 : i32 to i64
    %c65536_i64_11 = arith.constant 65536 : i64
    %30 = arith.muli %29, %c65536_i64_11 : i64
    %31 = arith.cmpi ult, %27, %30 : i64
    cf.cond_br %31, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c1_i32_12 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_12) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %32 = llvm.getelementptr %10[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_7, %32 {alignment = 1 : i64} : i64, !llvm.ptr
    %33 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %34 = arith.addi %33, %c8_i32 : i32
    %c0_i64_13 = arith.constant 0 : i64
    %c0_i64_14 = arith.constant 0 : i64
    %35 = arith.extui %34 : i32 to i64
    %36 = arith.addi %35, %c0_i64_14 : i64
    %c8_i64_15 = arith.constant 8 : i64
    %37 = arith.addi %36, %c8_i64_15 : i64
    %c0_i32_16 = arith.constant 0 : i32
    %38 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_16) : (!llvm.ptr, i32) -> i32
    %39 = arith.extui %38 : i32 to i64
    %c65536_i64_17 = arith.constant 65536 : i64
    %40 = arith.muli %39, %c65536_i64_17 : i64
    %41 = arith.cmpi ult, %37, %40 : i64
    cf.cond_br %41, ^bb7, ^bb8
  ^bb6:  // pred: ^bb3
    %c1_i32_18 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_18) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %42 = llvm.getelementptr %10[%36] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_13, %42 {alignment = 1 : i64} : i64, !llvm.ptr
    %43 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_19 = arith.constant 0 : i64
    %c0_i64_20 = arith.constant 0 : i64
    %44 = arith.extui %43 : i32 to i64
    %45 = arith.addi %44, %c0_i64_20 : i64
    %c8_i64_21 = arith.constant 8 : i64
    %46 = arith.addi %45, %c8_i64_21 : i64
    %c0_i32_22 = arith.constant 0 : i32
    %47 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_22) : (!llvm.ptr, i32) -> i32
    %48 = arith.extui %47 : i32 to i64
    %c65536_i64_23 = arith.constant 65536 : i64
    %49 = arith.muli %48, %c65536_i64_23 : i64
    %50 = arith.cmpi ult, %46, %49 : i64
    cf.cond_br %50, ^bb9, ^bb10
  ^bb8:  // pred: ^bb5
    %c1_i32_24 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_24) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %51 = llvm.getelementptr %10[%45] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_19, %51 {alignment = 1 : i64} : i64, !llvm.ptr
    %52 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %53 = arith.addi %52, %c64_i32 : i32
    %c24_i32_25 = arith.constant 24 : i32
    %54 = arith.addi %53, %c24_i32_25 : i32
    %55 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i32_26 = arith.constant 24 : i32
    %56 = arith.addi %55, %c24_i32_26 : i32
    %c0_i64_27 = arith.constant 0 : i64
    %57 = arith.extui %56 : i32 to i64
    %58 = arith.addi %57, %c0_i64_27 : i64
    %c8_i64_28 = arith.constant 8 : i64
    %59 = arith.addi %58, %c8_i64_28 : i64
    %c0_i32_29 = arith.constant 0 : i32
    %60 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_29) : (!llvm.ptr, i32) -> i32
    %61 = arith.extui %60 : i32 to i64
    %c65536_i64_30 = arith.constant 65536 : i64
    %62 = arith.muli %61, %c65536_i64_30 : i64
    %63 = arith.cmpi ult, %59, %62 : i64
    cf.cond_br %63, ^bb11, ^bb12
  ^bb10:  // pred: ^bb7
    %c1_i32_31 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_31) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %64 = llvm.getelementptr %10[%58] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %65 = llvm.load volatile %64 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_32 = arith.constant 0 : i64
    %66 = arith.extui %54 : i32 to i64
    %67 = arith.addi %66, %c0_i64_32 : i64
    %c8_i64_33 = arith.constant 8 : i64
    %68 = arith.addi %67, %c8_i64_33 : i64
    %c0_i32_34 = arith.constant 0 : i32
    %69 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_34) : (!llvm.ptr, i32) -> i32
    %70 = arith.extui %69 : i32 to i64
    %c65536_i64_35 = arith.constant 65536 : i64
    %71 = arith.muli %70, %c65536_i64_35 : i64
    %72 = arith.cmpi ult, %68, %71 : i64
    cf.cond_br %72, ^bb13, ^bb14
  ^bb12:  // pred: ^bb9
    %c1_i32_36 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_36) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %73 = llvm.getelementptr %10[%67] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %65, %73 {alignment = 1 : i64} : i64, !llvm.ptr
    %74 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_37 = arith.constant 64 : i32
    %75 = arith.addi %74, %c64_i32_37 : i32
    %c16_i32_38 = arith.constant 16 : i32
    %76 = arith.addi %75, %c16_i32_38 : i32
    %77 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32_39 = arith.constant 16 : i32
    %78 = arith.addi %77, %c16_i32_39 : i32
    %c0_i64_40 = arith.constant 0 : i64
    %79 = arith.extui %78 : i32 to i64
    %80 = arith.addi %79, %c0_i64_40 : i64
    %c8_i64_41 = arith.constant 8 : i64
    %81 = arith.addi %80, %c8_i64_41 : i64
    %c0_i32_42 = arith.constant 0 : i32
    %82 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_42) : (!llvm.ptr, i32) -> i32
    %83 = arith.extui %82 : i32 to i64
    %c65536_i64_43 = arith.constant 65536 : i64
    %84 = arith.muli %83, %c65536_i64_43 : i64
    %85 = arith.cmpi ult, %81, %84 : i64
    cf.cond_br %85, ^bb15, ^bb16
  ^bb14:  // pred: ^bb11
    %c1_i32_44 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_44) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // 2 preds: ^bb13, ^bb16
    %86 = llvm.getelementptr %10[%80] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %87 = llvm.load volatile %86 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_45 = arith.constant 0 : i64
    %88 = arith.extui %76 : i32 to i64
    %89 = arith.addi %88, %c0_i64_45 : i64
    %c8_i64_46 = arith.constant 8 : i64
    %90 = arith.addi %89, %c8_i64_46 : i64
    %c0_i32_47 = arith.constant 0 : i32
    %91 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_47) : (!llvm.ptr, i32) -> i32
    %92 = arith.extui %91 : i32 to i64
    %c65536_i64_48 = arith.constant 65536 : i64
    %93 = arith.muli %92, %c65536_i64_48 : i64
    %94 = arith.cmpi ult, %90, %93 : i64
    cf.cond_br %94, ^bb17, ^bb18
  ^bb16:  // pred: ^bb13
    %c1_i32_49 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_49) : (i32) -> ()
    cf.br ^bb15
  ^bb17:  // 2 preds: ^bb15, ^bb18
    %95 = llvm.getelementptr %10[%89] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %87, %95 {alignment = 1 : i64} : i64, !llvm.ptr
    %96 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_50 = arith.constant 64 : i32
    %97 = arith.addi %96, %c64_i32_50 : i32
    %c8_i32_51 = arith.constant 8 : i32
    %98 = arith.addi %97, %c8_i32_51 : i32
    %99 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_52 = arith.constant 8 : i32
    %100 = arith.addi %99, %c8_i32_52 : i32
    %c0_i64_53 = arith.constant 0 : i64
    %101 = arith.extui %100 : i32 to i64
    %102 = arith.addi %101, %c0_i64_53 : i64
    %c8_i64_54 = arith.constant 8 : i64
    %103 = arith.addi %102, %c8_i64_54 : i64
    %c0_i32_55 = arith.constant 0 : i32
    %104 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_55) : (!llvm.ptr, i32) -> i32
    %105 = arith.extui %104 : i32 to i64
    %c65536_i64_56 = arith.constant 65536 : i64
    %106 = arith.muli %105, %c65536_i64_56 : i64
    %107 = arith.cmpi ult, %103, %106 : i64
    cf.cond_br %107, ^bb19, ^bb20
  ^bb18:  // pred: ^bb15
    %c1_i32_57 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_57) : (i32) -> ()
    cf.br ^bb17
  ^bb19:  // 2 preds: ^bb17, ^bb20
    %108 = llvm.getelementptr %10[%102] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %109 = llvm.load volatile %108 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_58 = arith.constant 0 : i64
    %110 = arith.extui %98 : i32 to i64
    %111 = arith.addi %110, %c0_i64_58 : i64
    %c8_i64_59 = arith.constant 8 : i64
    %112 = arith.addi %111, %c8_i64_59 : i64
    %c0_i32_60 = arith.constant 0 : i32
    %113 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_60) : (!llvm.ptr, i32) -> i32
    %114 = arith.extui %113 : i32 to i64
    %c65536_i64_61 = arith.constant 65536 : i64
    %115 = arith.muli %114, %c65536_i64_61 : i64
    %116 = arith.cmpi ult, %112, %115 : i64
    cf.cond_br %116, ^bb21, ^bb22
  ^bb20:  // pred: ^bb17
    %c1_i32_62 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_62) : (i32) -> ()
    cf.br ^bb19
  ^bb21:  // 2 preds: ^bb19, ^bb22
    %117 = llvm.getelementptr %10[%111] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %109, %117 {alignment = 1 : i64} : i64, !llvm.ptr
    %118 = llvm.load %2 : !llvm.ptr -> i32
    %119 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_63 = arith.constant 0 : i64
    %120 = arith.extui %119 : i32 to i64
    %121 = arith.addi %120, %c0_i64_63 : i64
    %c8_i64_64 = arith.constant 8 : i64
    %122 = arith.addi %121, %c8_i64_64 : i64
    %c0_i32_65 = arith.constant 0 : i32
    %123 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_65) : (!llvm.ptr, i32) -> i32
    %124 = arith.extui %123 : i32 to i64
    %c65536_i64_66 = arith.constant 65536 : i64
    %125 = arith.muli %124, %c65536_i64_66 : i64
    %126 = arith.cmpi ult, %122, %125 : i64
    cf.cond_br %126, ^bb23, ^bb24
  ^bb22:  // pred: ^bb19
    %c1_i32_67 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_67) : (i32) -> ()
    cf.br ^bb21
  ^bb23:  // 2 preds: ^bb21, ^bb24
    %127 = llvm.getelementptr %10[%121] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %128 = llvm.load volatile %127 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c64_i64 = arith.constant 64 : i64
    %129 = arith.extui %118 : i32 to i64
    %130 = arith.addi %129, %c64_i64 : i64
    %c8_i64_68 = arith.constant 8 : i64
    %131 = arith.addi %130, %c8_i64_68 : i64
    %c0_i32_69 = arith.constant 0 : i32
    %132 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_69) : (!llvm.ptr, i32) -> i32
    %133 = arith.extui %132 : i32 to i64
    %c65536_i64_70 = arith.constant 65536 : i64
    %134 = arith.muli %133, %c65536_i64_70 : i64
    %135 = arith.cmpi ult, %131, %134 : i64
    cf.cond_br %135, ^bb25, ^bb26
  ^bb24:  // pred: ^bb21
    %c1_i32_71 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_71) : (i32) -> ()
    cf.br ^bb23
  ^bb25:  // 2 preds: ^bb23, ^bb26
    %136 = llvm.getelementptr %10[%130] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %128, %136 {alignment = 1 : i64} : i64, !llvm.ptr
    %137 = llvm.load %2 : !llvm.ptr -> i32
    %c95_i32 = arith.constant 95 : i32
    %138 = arith.addi %137, %c95_i32 : i32
    llvm.store %138, %1 : i32, !llvm.ptr
    %c0_i32_72 = arith.constant 0 : i32
    llvm.store %c0_i32_72, %3 : i32, !llvm.ptr
    cf.br ^bb28
  ^bb26:  // pred: ^bb23
    %c1_i32_73 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_73) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // pred: ^bb37
    %139 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %140 = arith.addi %139, %c32_i32 : i32
    %c24_i32_74 = arith.constant 24 : i32
    %141 = arith.addi %140, %c24_i32_74 : i32
    %142 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_75 = arith.constant 64 : i32
    %143 = arith.addi %142, %c64_i32_75 : i32
    %c24_i32_76 = arith.constant 24 : i32
    %144 = arith.addi %143, %c24_i32_76 : i32
    llvm.store %144, %1 : i32, !llvm.ptr
    %c0_i64_77 = arith.constant 0 : i64
    %145 = arith.extui %144 : i32 to i64
    %146 = arith.addi %145, %c0_i64_77 : i64
    %c8_i64_78 = arith.constant 8 : i64
    %147 = arith.addi %146, %c8_i64_78 : i64
    %c0_i32_79 = arith.constant 0 : i32
    %148 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_79) : (!llvm.ptr, i32) -> i32
    %149 = arith.extui %148 : i32 to i64
    %c65536_i64_80 = arith.constant 65536 : i64
    %150 = arith.muli %149, %c65536_i64_80 : i64
    %151 = arith.cmpi ult, %147, %150 : i64
    cf.cond_br %151, ^bb38, ^bb39
  ^bb28:  // 2 preds: ^bb25, ^bb35
    %152 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_81 = arith.constant 64 : i32
    %153 = arith.addi %152, %c64_i32_81 : i32
    %154 = llvm.load %3 : !llvm.ptr -> i32
    %155 = arith.addi %153, %154 : i32
    llvm.store %155, %4 : i32, !llvm.ptr
    %c0_i64_82 = arith.constant 0 : i64
    %156 = arith.extui %155 : i32 to i64
    %157 = arith.addi %156, %c0_i64_82 : i64
    %c1_i64 = arith.constant 1 : i64
    %158 = arith.addi %157, %c1_i64 : i64
    %c0_i32_83 = arith.constant 0 : i32
    %159 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_83) : (!llvm.ptr, i32) -> i32
    %160 = arith.extui %159 : i32 to i64
    %c65536_i64_84 = arith.constant 65536 : i64
    %161 = arith.muli %160, %c65536_i64_84 : i64
    %162 = arith.cmpi ult, %158, %161 : i64
    cf.cond_br %162, ^bb29, ^bb30
  ^bb29:  // 2 preds: ^bb28, ^bb30
    %163 = llvm.getelementptr %10[%157] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %164 = llvm.load volatile %163 {alignment = 1 : i64} : !llvm.ptr -> i8
    %165 = arith.extui %164 : i8 to i32
    llvm.store %165, %5 : i32, !llvm.ptr
    %166 = llvm.load %4 : !llvm.ptr -> i32
    %167 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_85 = arith.constant 0 : i64
    %168 = arith.extui %167 : i32 to i64
    %169 = arith.addi %168, %c0_i64_85 : i64
    %c1_i64_86 = arith.constant 1 : i64
    %170 = arith.addi %169, %c1_i64_86 : i64
    %c0_i32_87 = arith.constant 0 : i32
    %171 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_87) : (!llvm.ptr, i32) -> i32
    %172 = arith.extui %171 : i32 to i64
    %c65536_i64_88 = arith.constant 65536 : i64
    %173 = arith.muli %172, %c65536_i64_88 : i64
    %174 = arith.cmpi ult, %170, %173 : i64
    cf.cond_br %174, ^bb31, ^bb32
  ^bb30:  // pred: ^bb28
    %c1_i32_89 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_89) : (i32) -> ()
    cf.br ^bb29
  ^bb31:  // 2 preds: ^bb29, ^bb32
    %175 = llvm.getelementptr %10[%169] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %176 = llvm.load volatile %175 {alignment = 1 : i64} : !llvm.ptr -> i8
    %177 = arith.extui %176 : i8 to i32
    %c0_i64_90 = arith.constant 0 : i64
    %178 = arith.extui %166 : i32 to i64
    %179 = arith.addi %178, %c0_i64_90 : i64
    %c1_i64_91 = arith.constant 1 : i64
    %180 = arith.addi %179, %c1_i64_91 : i64
    %c0_i32_92 = arith.constant 0 : i32
    %181 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_92) : (!llvm.ptr, i32) -> i32
    %182 = arith.extui %181 : i32 to i64
    %c65536_i64_93 = arith.constant 65536 : i64
    %183 = arith.muli %182, %c65536_i64_93 : i64
    %184 = arith.cmpi ult, %180, %183 : i64
    cf.cond_br %184, ^bb33, ^bb34
  ^bb32:  // pred: ^bb29
    %c1_i32_94 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_94) : (i32) -> ()
    cf.br ^bb31
  ^bb33:  // 2 preds: ^bb31, ^bb34
    %185 = llvm.getelementptr %10[%179] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %186 = arith.trunci %177 : i32 to i8
    llvm.store volatile %186, %185 {alignment = 1 : i64} : i8, !llvm.ptr
    %187 = llvm.load %1 : !llvm.ptr -> i32
    %188 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64_95 = arith.constant 0 : i64
    %189 = arith.extui %187 : i32 to i64
    %190 = arith.addi %189, %c0_i64_95 : i64
    %c1_i64_96 = arith.constant 1 : i64
    %191 = arith.addi %190, %c1_i64_96 : i64
    %c0_i32_97 = arith.constant 0 : i32
    %192 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_97) : (!llvm.ptr, i32) -> i32
    %193 = arith.extui %192 : i32 to i64
    %c65536_i64_98 = arith.constant 65536 : i64
    %194 = arith.muli %193, %c65536_i64_98 : i64
    %195 = arith.cmpi ult, %191, %194 : i64
    cf.cond_br %195, ^bb35, ^bb36
  ^bb34:  // pred: ^bb31
    %c1_i32_99 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_99) : (i32) -> ()
    cf.br ^bb33
  ^bb35:  // 2 preds: ^bb33, ^bb36
    %196 = llvm.getelementptr %10[%190] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %197 = arith.trunci %188 : i32 to i8
    llvm.store volatile %197, %196 {alignment = 1 : i64} : i8, !llvm.ptr
    %198 = llvm.load %1 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %199 = arith.addi %198, %c-1_i32 : i32
    llvm.store %199, %1 : i32, !llvm.ptr
    %200 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_100 = arith.constant 1 : i32
    %201 = arith.addi %200, %c1_i32_100 : i32
    llvm.store %201, %3 : i32, !llvm.ptr
    %c16_i32_101 = arith.constant 16 : i32
    %202 = arith.cmpi eq, %201, %c16_i32_101 : i32
    %203 = arith.extui %202 : i1 to i32
    %c0_i32_102 = arith.constant 0 : i32
    %204 = arith.cmpi eq, %203, %c0_i32_102 : i32
    %205 = arith.extui %204 : i1 to i32
    %c0_i32_103 = arith.constant 0 : i32
    %206 = arith.cmpi ne, %205, %c0_i32_103 : i32
    cf.cond_br %206, ^bb28, ^bb37
  ^bb36:  // pred: ^bb33
    %c1_i32_104 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_104) : (i32) -> ()
    cf.br ^bb35
  ^bb37:  // pred: ^bb35
    cf.br ^bb27
  ^bb38:  // 2 preds: ^bb27, ^bb39
    %207 = llvm.getelementptr %10[%146] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %208 = llvm.load volatile %207 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_105 = arith.constant 0 : i64
    %209 = arith.extui %141 : i32 to i64
    %210 = arith.addi %209, %c0_i64_105 : i64
    %c8_i64_106 = arith.constant 8 : i64
    %211 = arith.addi %210, %c8_i64_106 : i64
    %c0_i32_107 = arith.constant 0 : i32
    %212 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_107) : (!llvm.ptr, i32) -> i32
    %213 = arith.extui %212 : i32 to i64
    %c65536_i64_108 = arith.constant 65536 : i64
    %214 = arith.muli %213, %c65536_i64_108 : i64
    %215 = arith.cmpi ult, %211, %214 : i64
    cf.cond_br %215, ^bb40, ^bb41
  ^bb39:  // pred: ^bb27
    %c1_i32_109 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_109) : (i32) -> ()
    cf.br ^bb38
  ^bb40:  // 2 preds: ^bb38, ^bb41
    %216 = llvm.getelementptr %10[%210] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %208, %216 {alignment = 1 : i64} : i64, !llvm.ptr
    %217 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32_110 = arith.constant 32 : i32
    %218 = arith.addi %217, %c32_i32_110 : i32
    %c16_i32_111 = arith.constant 16 : i32
    %219 = arith.addi %218, %c16_i32_111 : i32
    %220 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_112 = arith.constant 64 : i32
    %221 = arith.addi %220, %c64_i32_112 : i32
    %c16_i32_113 = arith.constant 16 : i32
    %222 = arith.addi %221, %c16_i32_113 : i32
    llvm.store %222, %3 : i32, !llvm.ptr
    %c0_i64_114 = arith.constant 0 : i64
    %223 = arith.extui %222 : i32 to i64
    %224 = arith.addi %223, %c0_i64_114 : i64
    %c8_i64_115 = arith.constant 8 : i64
    %225 = arith.addi %224, %c8_i64_115 : i64
    %c0_i32_116 = arith.constant 0 : i32
    %226 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_116) : (!llvm.ptr, i32) -> i32
    %227 = arith.extui %226 : i32 to i64
    %c65536_i64_117 = arith.constant 65536 : i64
    %228 = arith.muli %227, %c65536_i64_117 : i64
    %229 = arith.cmpi ult, %225, %228 : i64
    cf.cond_br %229, ^bb42, ^bb43
  ^bb41:  // pred: ^bb38
    %c1_i32_118 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_118) : (i32) -> ()
    cf.br ^bb40
  ^bb42:  // 2 preds: ^bb40, ^bb43
    %230 = llvm.getelementptr %10[%224] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %231 = llvm.load volatile %230 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_119 = arith.constant 0 : i64
    %232 = arith.extui %219 : i32 to i64
    %233 = arith.addi %232, %c0_i64_119 : i64
    %c8_i64_120 = arith.constant 8 : i64
    %234 = arith.addi %233, %c8_i64_120 : i64
    %c0_i32_121 = arith.constant 0 : i32
    %235 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_121) : (!llvm.ptr, i32) -> i32
    %236 = arith.extui %235 : i32 to i64
    %c65536_i64_122 = arith.constant 65536 : i64
    %237 = arith.muli %236, %c65536_i64_122 : i64
    %238 = arith.cmpi ult, %234, %237 : i64
    cf.cond_br %238, ^bb44, ^bb45
  ^bb43:  // pred: ^bb40
    %c1_i32_123 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_123) : (i32) -> ()
    cf.br ^bb42
  ^bb44:  // 2 preds: ^bb42, ^bb45
    %239 = llvm.getelementptr %10[%233] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %231, %239 {alignment = 1 : i64} : i64, !llvm.ptr
    %240 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32_124 = arith.constant 32 : i32
    %241 = arith.addi %240, %c32_i32_124 : i32
    %c8_i32_125 = arith.constant 8 : i32
    %242 = arith.addi %241, %c8_i32_125 : i32
    %243 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_126 = arith.constant 64 : i32
    %244 = arith.addi %243, %c64_i32_126 : i32
    %c8_i32_127 = arith.constant 8 : i32
    %245 = arith.addi %244, %c8_i32_127 : i32
    llvm.store %245, %4 : i32, !llvm.ptr
    %c0_i64_128 = arith.constant 0 : i64
    %246 = arith.extui %245 : i32 to i64
    %247 = arith.addi %246, %c0_i64_128 : i64
    %c8_i64_129 = arith.constant 8 : i64
    %248 = arith.addi %247, %c8_i64_129 : i64
    %c0_i32_130 = arith.constant 0 : i32
    %249 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_130) : (!llvm.ptr, i32) -> i32
    %250 = arith.extui %249 : i32 to i64
    %c65536_i64_131 = arith.constant 65536 : i64
    %251 = arith.muli %250, %c65536_i64_131 : i64
    %252 = arith.cmpi ult, %248, %251 : i64
    cf.cond_br %252, ^bb46, ^bb47
  ^bb45:  // pred: ^bb42
    %c1_i32_132 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_132) : (i32) -> ()
    cf.br ^bb44
  ^bb46:  // 2 preds: ^bb44, ^bb47
    %253 = llvm.getelementptr %10[%247] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %254 = llvm.load volatile %253 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_133 = arith.constant 0 : i64
    %255 = arith.extui %242 : i32 to i64
    %256 = arith.addi %255, %c0_i64_133 : i64
    %c8_i64_134 = arith.constant 8 : i64
    %257 = arith.addi %256, %c8_i64_134 : i64
    %c0_i32_135 = arith.constant 0 : i32
    %258 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_135) : (!llvm.ptr, i32) -> i32
    %259 = arith.extui %258 : i32 to i64
    %c65536_i64_136 = arith.constant 65536 : i64
    %260 = arith.muli %259, %c65536_i64_136 : i64
    %261 = arith.cmpi ult, %257, %260 : i64
    cf.cond_br %261, ^bb48, ^bb49
  ^bb47:  // pred: ^bb44
    %c1_i32_137 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_137) : (i32) -> ()
    cf.br ^bb46
  ^bb48:  // 2 preds: ^bb46, ^bb49
    %262 = llvm.getelementptr %10[%256] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %254, %262 {alignment = 1 : i64} : i64, !llvm.ptr
    %263 = llvm.load %2 : !llvm.ptr -> i32
    %264 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i64_138 = arith.constant 64 : i64
    %265 = arith.extui %264 : i32 to i64
    %266 = arith.addi %265, %c64_i64_138 : i64
    %c8_i64_139 = arith.constant 8 : i64
    %267 = arith.addi %266, %c8_i64_139 : i64
    %c0_i32_140 = arith.constant 0 : i32
    %268 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_140) : (!llvm.ptr, i32) -> i32
    %269 = arith.extui %268 : i32 to i64
    %c65536_i64_141 = arith.constant 65536 : i64
    %270 = arith.muli %269, %c65536_i64_141 : i64
    %271 = arith.cmpi ult, %267, %270 : i64
    cf.cond_br %271, ^bb50, ^bb51
  ^bb49:  // pred: ^bb46
    %c1_i32_142 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_142) : (i32) -> ()
    cf.br ^bb48
  ^bb50:  // 2 preds: ^bb48, ^bb51
    %272 = llvm.getelementptr %10[%266] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %273 = llvm.load volatile %272 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c32_i64 = arith.constant 32 : i64
    %274 = arith.extui %263 : i32 to i64
    %275 = arith.addi %274, %c32_i64 : i64
    %c8_i64_143 = arith.constant 8 : i64
    %276 = arith.addi %275, %c8_i64_143 : i64
    %c0_i32_144 = arith.constant 0 : i32
    %277 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_144) : (!llvm.ptr, i32) -> i32
    %278 = arith.extui %277 : i32 to i64
    %c65536_i64_145 = arith.constant 65536 : i64
    %279 = arith.muli %278, %c65536_i64_145 : i64
    %280 = arith.cmpi ult, %276, %279 : i64
    cf.cond_br %280, ^bb52, ^bb53
  ^bb51:  // pred: ^bb48
    %c1_i32_146 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_146) : (i32) -> ()
    cf.br ^bb50
  ^bb52:  // 2 preds: ^bb50, ^bb53
    %281 = llvm.getelementptr %10[%275] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %273, %281 {alignment = 1 : i64} : i64, !llvm.ptr
    %282 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32_147 = arith.constant 32 : i32
    %283 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32_148 = arith.constant 32 : i32
    %284 = arith.addi %283, %c32_i32_148 : i32
    %c32_i32_149 = arith.constant 32 : i32
    %c1048804_i32 = arith.constant 1048804 : i32
    call @f114(%arg0, %282, %c32_i32_147, %284, %c32_i32_149, %c1048804_i32) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %285 = llvm.load %4 : !llvm.ptr -> i32
    %286 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_150 = arith.constant 8 : i32
    %287 = arith.addi %286, %c8_i32_150 : i32
    %c0_i64_151 = arith.constant 0 : i64
    %288 = arith.extui %287 : i32 to i64
    %289 = arith.addi %288, %c0_i64_151 : i64
    %c8_i64_152 = arith.constant 8 : i64
    %290 = arith.addi %289, %c8_i64_152 : i64
    %c0_i32_153 = arith.constant 0 : i32
    %291 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_153) : (!llvm.ptr, i32) -> i32
    %292 = arith.extui %291 : i32 to i64
    %c65536_i64_154 = arith.constant 65536 : i64
    %293 = arith.muli %292, %c65536_i64_154 : i64
    %294 = arith.cmpi ult, %290, %293 : i64
    cf.cond_br %294, ^bb54, ^bb55
  ^bb53:  // pred: ^bb50
    %c1_i32_155 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_155) : (i32) -> ()
    cf.br ^bb52
  ^bb54:  // 2 preds: ^bb52, ^bb55
    %295 = llvm.getelementptr %10[%289] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %296 = llvm.load volatile %295 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_156 = arith.constant 0 : i64
    %297 = arith.extui %285 : i32 to i64
    %298 = arith.addi %297, %c0_i64_156 : i64
    %c8_i64_157 = arith.constant 8 : i64
    %299 = arith.addi %298, %c8_i64_157 : i64
    %c0_i32_158 = arith.constant 0 : i32
    %300 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_158) : (!llvm.ptr, i32) -> i32
    %301 = arith.extui %300 : i32 to i64
    %c65536_i64_159 = arith.constant 65536 : i64
    %302 = arith.muli %301, %c65536_i64_159 : i64
    %303 = arith.cmpi ult, %299, %302 : i64
    cf.cond_br %303, ^bb56, ^bb57
  ^bb55:  // pred: ^bb52
    %c1_i32_160 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_160) : (i32) -> ()
    cf.br ^bb54
  ^bb56:  // 2 preds: ^bb54, ^bb57
    %304 = llvm.getelementptr %10[%298] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %296, %304 {alignment = 1 : i64} : i64, !llvm.ptr
    %305 = llvm.load %3 : !llvm.ptr -> i32
    %306 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_161 = arith.constant 16 : i32
    %307 = arith.addi %306, %c16_i32_161 : i32
    %c0_i64_162 = arith.constant 0 : i64
    %308 = arith.extui %307 : i32 to i64
    %309 = arith.addi %308, %c0_i64_162 : i64
    %c8_i64_163 = arith.constant 8 : i64
    %310 = arith.addi %309, %c8_i64_163 : i64
    %c0_i32_164 = arith.constant 0 : i32
    %311 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_164) : (!llvm.ptr, i32) -> i32
    %312 = arith.extui %311 : i32 to i64
    %c65536_i64_165 = arith.constant 65536 : i64
    %313 = arith.muli %312, %c65536_i64_165 : i64
    %314 = arith.cmpi ult, %310, %313 : i64
    cf.cond_br %314, ^bb58, ^bb59
  ^bb57:  // pred: ^bb54
    %c1_i32_166 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_166) : (i32) -> ()
    cf.br ^bb56
  ^bb58:  // 2 preds: ^bb56, ^bb59
    %315 = llvm.getelementptr %10[%309] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %316 = llvm.load volatile %315 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_167 = arith.constant 0 : i64
    %317 = arith.extui %305 : i32 to i64
    %318 = arith.addi %317, %c0_i64_167 : i64
    %c8_i64_168 = arith.constant 8 : i64
    %319 = arith.addi %318, %c8_i64_168 : i64
    %c0_i32_169 = arith.constant 0 : i32
    %320 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_169) : (!llvm.ptr, i32) -> i32
    %321 = arith.extui %320 : i32 to i64
    %c65536_i64_170 = arith.constant 65536 : i64
    %322 = arith.muli %321, %c65536_i64_170 : i64
    %323 = arith.cmpi ult, %319, %322 : i64
    cf.cond_br %323, ^bb60, ^bb61
  ^bb59:  // pred: ^bb56
    %c1_i32_171 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_171) : (i32) -> ()
    cf.br ^bb58
  ^bb60:  // 2 preds: ^bb58, ^bb61
    %324 = llvm.getelementptr %10[%318] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %316, %324 {alignment = 1 : i64} : i64, !llvm.ptr
    %325 = llvm.load %1 : !llvm.ptr -> i32
    %326 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_172 = arith.constant 24 : i32
    %327 = arith.addi %326, %c24_i32_172 : i32
    %c0_i64_173 = arith.constant 0 : i64
    %328 = arith.extui %327 : i32 to i64
    %329 = arith.addi %328, %c0_i64_173 : i64
    %c8_i64_174 = arith.constant 8 : i64
    %330 = arith.addi %329, %c8_i64_174 : i64
    %c0_i32_175 = arith.constant 0 : i32
    %331 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_175) : (!llvm.ptr, i32) -> i32
    %332 = arith.extui %331 : i32 to i64
    %c65536_i64_176 = arith.constant 65536 : i64
    %333 = arith.muli %332, %c65536_i64_176 : i64
    %334 = arith.cmpi ult, %330, %333 : i64
    cf.cond_br %334, ^bb62, ^bb63
  ^bb61:  // pred: ^bb58
    %c1_i32_177 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_177) : (i32) -> ()
    cf.br ^bb60
  ^bb62:  // 2 preds: ^bb60, ^bb63
    %335 = llvm.getelementptr %10[%329] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %336 = llvm.load volatile %335 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_178 = arith.constant 0 : i64
    %337 = arith.extui %325 : i32 to i64
    %338 = arith.addi %337, %c0_i64_178 : i64
    %c8_i64_179 = arith.constant 8 : i64
    %339 = arith.addi %338, %c8_i64_179 : i64
    %c0_i32_180 = arith.constant 0 : i32
    %340 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_180) : (!llvm.ptr, i32) -> i32
    %341 = arith.extui %340 : i32 to i64
    %c65536_i64_181 = arith.constant 65536 : i64
    %342 = arith.muli %341, %c65536_i64_181 : i64
    %343 = arith.cmpi ult, %339, %342 : i64
    cf.cond_br %343, ^bb64, ^bb65
  ^bb63:  // pred: ^bb60
    %c1_i32_182 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_182) : (i32) -> ()
    cf.br ^bb62
  ^bb64:  // 2 preds: ^bb62, ^bb65
    %344 = llvm.getelementptr %10[%338] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %336, %344 {alignment = 1 : i64} : i64, !llvm.ptr
    %345 = llvm.load %2 : !llvm.ptr -> i32
    %346 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_183 = arith.constant 0 : i64
    %347 = arith.extui %346 : i32 to i64
    %348 = arith.addi %347, %c0_i64_183 : i64
    %c8_i64_184 = arith.constant 8 : i64
    %349 = arith.addi %348, %c8_i64_184 : i64
    %c0_i32_185 = arith.constant 0 : i32
    %350 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_185) : (!llvm.ptr, i32) -> i32
    %351 = arith.extui %350 : i32 to i64
    %c65536_i64_186 = arith.constant 65536 : i64
    %352 = arith.muli %351, %c65536_i64_186 : i64
    %353 = arith.cmpi ult, %349, %352 : i64
    cf.cond_br %353, ^bb66, ^bb67
  ^bb65:  // pred: ^bb62
    %c1_i32_187 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_187) : (i32) -> ()
    cf.br ^bb64
  ^bb66:  // 2 preds: ^bb64, ^bb67
    %354 = llvm.getelementptr %10[%348] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %355 = llvm.load volatile %354 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c64_i64_188 = arith.constant 64 : i64
    %356 = arith.extui %345 : i32 to i64
    %357 = arith.addi %356, %c64_i64_188 : i64
    %c8_i64_189 = arith.constant 8 : i64
    %358 = arith.addi %357, %c8_i64_189 : i64
    %c0_i32_190 = arith.constant 0 : i32
    %359 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_190) : (!llvm.ptr, i32) -> i32
    %360 = arith.extui %359 : i32 to i64
    %c65536_i64_191 = arith.constant 65536 : i64
    %361 = arith.muli %360, %c65536_i64_191 : i64
    %362 = arith.cmpi ult, %358, %361 : i64
    cf.cond_br %362, ^bb68, ^bb69
  ^bb67:  // pred: ^bb64
    %c1_i32_192 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_192) : (i32) -> ()
    cf.br ^bb66
  ^bb68:  // 2 preds: ^bb66, ^bb69
    %363 = llvm.getelementptr %10[%357] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %355, %363 {alignment = 1 : i64} : i64, !llvm.ptr
    %364 = llvm.load %0 : !llvm.ptr -> i32
    %365 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_193 = arith.constant 64 : i32
    %366 = arith.addi %365, %c64_i32_193 : i32
    call @f15(%arg0, %364, %366) : (!llvm.ptr, i32, i32) -> ()
    %367 = llvm.load %2 : !llvm.ptr -> i32
    %c96_i32_194 = arith.constant 96 : i32
    %368 = arith.addi %367, %c96_i32_194 : i32
    llvm.store %368, %7 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb69:  // pred: ^bb66
    %c1_i32_195 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_195) : (i32) -> ()
    cf.br ^bb68
  }
  func.func @f11(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %6 : i64, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %7 : i64, !llvm.ptr
    %8 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %13 = llvm.load %9 : !llvm.ptr -> i32
    %c96_i32 = arith.constant 96 : i32
    %14 = arith.subi %13, %c96_i32 : i32
    llvm.store %14, %3 : i32, !llvm.ptr
    llvm.store %14, %9 : i32, !llvm.ptr
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    llvm.store %c-2147483648_i32, %4 : i32, !llvm.ptr
    %15 = llvm.load %3 : !llvm.ptr -> i32
    %c-2147483648_i32_7 = arith.constant -2147483648 : i32
    %c64_i64 = arith.constant 64 : i64
    %16 = arith.extui %15 : i32 to i64
    %17 = arith.addi %16, %c64_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %18 = arith.addi %17, %c4_i64 : i64
    %c0_i32_8 = arith.constant 0 : i32
    %19 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_8) : (!llvm.ptr, i32) -> i32
    %20 = arith.extui %19 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %21 = arith.muli %20, %c65536_i64 : i64
    %22 = arith.cmpi ult, %18, %21 : i64
    cf.cond_br %22, ^bb3, ^bb4
  ^bb2:  // pred: ^bb5
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %23 = llvm.getelementptr %12[%17] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-2147483648_i32_7, %23 {alignment = 1 : i64} : i32, !llvm.ptr
    %24 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %25 = arith.cmpi ult, %24, %c32_i32 : i32
    %26 = arith.extui %25 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %27 = arith.cmpi ne, %26, %c0_i32_9 : i32
    cf.cond_br %27, ^bb6, ^bb7
  ^bb4:  // pred: ^bb1
    %c1_i32_10 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_10) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb113, ^bb115
    %28 = llvm.load %3 : !llvm.ptr -> i32
    %c96_i32_11 = arith.constant 96 : i32
    %29 = arith.addi %28, %c96_i32_11 : i32
    llvm.store %29, %9 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb6:  // 2 preds: ^bb3, ^bb38
    %30 = llvm.load %0 : !llvm.ptr -> i32
    %31 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_12 = arith.constant 0 : i64
    %32 = arith.extui %30 : i32 to i64
    %33 = arith.addi %32, %c0_i64_12 : i64
    %c4_i64_13 = arith.constant 4 : i64
    %34 = arith.addi %33, %c4_i64_13 : i64
    %c0_i32_14 = arith.constant 0 : i32
    %35 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_14) : (!llvm.ptr, i32) -> i32
    %36 = arith.extui %35 : i32 to i64
    %c65536_i64_15 = arith.constant 65536 : i64
    %37 = arith.muli %36, %c65536_i64_15 : i64
    %38 = arith.cmpi ult, %34, %37 : i64
    cf.cond_br %38, ^bb115, ^bb116
  ^bb7:  // pred: ^bb3
    %39 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %40 = arith.addi %39, %c64_i32 : i32
    call @f36(%arg0, %40) : (!llvm.ptr, i32) -> ()
    %41 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_16 = arith.constant 32 : i32
    %42 = arith.addi %41, %c32_i32_16 : i32
    %c2_i32 = arith.constant 2 : i32
    %43 = arith.addi %42, %c2_i32 : i32
    llvm.store %43, %5 : i32, !llvm.ptr
    %44 = llvm.load %1 : !llvm.ptr -> i32
    %c2_i32_17 = arith.constant 2 : i32
    %45 = arith.addi %44, %c2_i32_17 : i32
    %c0_i64_18 = arith.constant 0 : i64
    %46 = arith.extui %45 : i32 to i64
    %47 = arith.addi %46, %c0_i64_18 : i64
    %c1_i64 = arith.constant 1 : i64
    %48 = arith.addi %47, %c1_i64 : i64
    %c0_i32_19 = arith.constant 0 : i32
    %49 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_19) : (!llvm.ptr, i32) -> i32
    %50 = arith.extui %49 : i32 to i64
    %c65536_i64_20 = arith.constant 65536 : i64
    %51 = arith.muli %50, %c65536_i64_20 : i64
    %52 = arith.cmpi ult, %48, %51 : i64
    cf.cond_br %52, ^bb8, ^bb9
  ^bb8:  // 2 preds: ^bb7, ^bb9
    %53 = llvm.getelementptr %12[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %54 = llvm.load volatile %53 {alignment = 1 : i64} : !llvm.ptr -> i8
    %55 = arith.extui %54 : i8 to i32
    %c0_i64_21 = arith.constant 0 : i64
    %56 = arith.extui %43 : i32 to i64
    %57 = arith.addi %56, %c0_i64_21 : i64
    %c1_i64_22 = arith.constant 1 : i64
    %58 = arith.addi %57, %c1_i64_22 : i64
    %c0_i32_23 = arith.constant 0 : i32
    %59 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_23) : (!llvm.ptr, i32) -> i32
    %60 = arith.extui %59 : i32 to i64
    %c65536_i64_24 = arith.constant 65536 : i64
    %61 = arith.muli %60, %c65536_i64_24 : i64
    %62 = arith.cmpi ult, %58, %61 : i64
    cf.cond_br %62, ^bb10, ^bb11
  ^bb9:  // pred: ^bb7
    %c1_i32_25 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_25) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // 2 preds: ^bb8, ^bb11
    %63 = llvm.getelementptr %12[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %64 = arith.trunci %55 : i32 to i8
    llvm.store volatile %64, %63 {alignment = 1 : i64} : i8, !llvm.ptr
    %65 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_26 = arith.constant 32 : i32
    %66 = arith.addi %65, %c32_i32_26 : i32
    %c19_i32 = arith.constant 19 : i32
    %67 = arith.addi %66, %c19_i32 : i32
    %68 = llvm.load %1 : !llvm.ptr -> i32
    %c19_i32_27 = arith.constant 19 : i32
    %69 = arith.addi %68, %c19_i32_27 : i32
    %c0_i64_28 = arith.constant 0 : i64
    %70 = arith.extui %69 : i32 to i64
    %71 = arith.addi %70, %c0_i64_28 : i64
    %c8_i64 = arith.constant 8 : i64
    %72 = arith.addi %71, %c8_i64 : i64
    %c0_i32_29 = arith.constant 0 : i32
    %73 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_29) : (!llvm.ptr, i32) -> i32
    %74 = arith.extui %73 : i32 to i64
    %c65536_i64_30 = arith.constant 65536 : i64
    %75 = arith.muli %74, %c65536_i64_30 : i64
    %76 = arith.cmpi ult, %72, %75 : i64
    cf.cond_br %76, ^bb12, ^bb13
  ^bb11:  // pred: ^bb8
    %c1_i32_31 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_31) : (i32) -> ()
    cf.br ^bb10
  ^bb12:  // 2 preds: ^bb10, ^bb13
    %77 = llvm.getelementptr %12[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %78 = llvm.load volatile %77 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_32 = arith.constant 0 : i64
    %79 = arith.extui %67 : i32 to i64
    %80 = arith.addi %79, %c0_i64_32 : i64
    %c8_i64_33 = arith.constant 8 : i64
    %81 = arith.addi %80, %c8_i64_33 : i64
    %c0_i32_34 = arith.constant 0 : i32
    %82 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_34) : (!llvm.ptr, i32) -> i32
    %83 = arith.extui %82 : i32 to i64
    %c65536_i64_35 = arith.constant 65536 : i64
    %84 = arith.muli %83, %c65536_i64_35 : i64
    %85 = arith.cmpi ult, %81, %84 : i64
    cf.cond_br %85, ^bb14, ^bb15
  ^bb13:  // pred: ^bb10
    %c1_i32_36 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_36) : (i32) -> ()
    cf.br ^bb12
  ^bb14:  // 2 preds: ^bb12, ^bb15
    %86 = llvm.getelementptr %12[%80] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %78, %86 {alignment = 1 : i64} : i64, !llvm.ptr
    %87 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_37 = arith.constant 32 : i32
    %88 = arith.addi %87, %c32_i32_37 : i32
    %c31_i32 = arith.constant 31 : i32
    %89 = arith.addi %88, %c31_i32 : i32
    %90 = llvm.load %1 : !llvm.ptr -> i32
    %c31_i32_38 = arith.constant 31 : i32
    %91 = arith.addi %90, %c31_i32_38 : i32
    %c0_i64_39 = arith.constant 0 : i64
    %92 = arith.extui %91 : i32 to i64
    %93 = arith.addi %92, %c0_i64_39 : i64
    %c1_i64_40 = arith.constant 1 : i64
    %94 = arith.addi %93, %c1_i64_40 : i64
    %c0_i32_41 = arith.constant 0 : i32
    %95 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_41) : (!llvm.ptr, i32) -> i32
    %96 = arith.extui %95 : i32 to i64
    %c65536_i64_42 = arith.constant 65536 : i64
    %97 = arith.muli %96, %c65536_i64_42 : i64
    %98 = arith.cmpi ult, %94, %97 : i64
    cf.cond_br %98, ^bb16, ^bb17
  ^bb15:  // pred: ^bb12
    %c1_i32_43 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_43) : (i32) -> ()
    cf.br ^bb14
  ^bb16:  // 2 preds: ^bb14, ^bb17
    %99 = llvm.getelementptr %12[%93] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %100 = llvm.load volatile %99 {alignment = 1 : i64} : !llvm.ptr -> i8
    %101 = arith.extui %100 : i8 to i32
    %c0_i64_44 = arith.constant 0 : i64
    %102 = arith.extui %89 : i32 to i64
    %103 = arith.addi %102, %c0_i64_44 : i64
    %c1_i64_45 = arith.constant 1 : i64
    %104 = arith.addi %103, %c1_i64_45 : i64
    %c0_i32_46 = arith.constant 0 : i32
    %105 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_46) : (!llvm.ptr, i32) -> i32
    %106 = arith.extui %105 : i32 to i64
    %c65536_i64_47 = arith.constant 65536 : i64
    %107 = arith.muli %106, %c65536_i64_47 : i64
    %108 = arith.cmpi ult, %104, %107 : i64
    cf.cond_br %108, ^bb18, ^bb19
  ^bb17:  // pred: ^bb14
    %c1_i32_48 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_48) : (i32) -> ()
    cf.br ^bb16
  ^bb18:  // 2 preds: ^bb16, ^bb19
    %109 = llvm.getelementptr %12[%103] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %110 = arith.trunci %101 : i32 to i8
    llvm.store volatile %110, %109 {alignment = 1 : i64} : i8, !llvm.ptr
    %111 = llvm.load %3 : !llvm.ptr -> i32
    %112 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_49 = arith.constant 0 : i64
    %113 = arith.extui %112 : i32 to i64
    %114 = arith.addi %113, %c0_i64_49 : i64
    %c2_i64 = arith.constant 2 : i64
    %115 = arith.addi %114, %c2_i64 : i64
    %c0_i32_50 = arith.constant 0 : i32
    %116 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_50) : (!llvm.ptr, i32) -> i32
    %117 = arith.extui %116 : i32 to i64
    %c65536_i64_51 = arith.constant 65536 : i64
    %118 = arith.muli %117, %c65536_i64_51 : i64
    %119 = arith.cmpi ult, %115, %118 : i64
    cf.cond_br %119, ^bb20, ^bb21
  ^bb19:  // pred: ^bb16
    %c1_i32_52 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_52) : (i32) -> ()
    cf.br ^bb18
  ^bb20:  // 2 preds: ^bb18, ^bb21
    %120 = llvm.getelementptr %12[%114] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %121 = llvm.load volatile %120 {alignment = 1 : i64} : !llvm.ptr -> i16
    %122 = arith.extui %121 : i16 to i32
    %c32_i64 = arith.constant 32 : i64
    %123 = arith.extui %111 : i32 to i64
    %124 = arith.addi %123, %c32_i64 : i64
    %c2_i64_53 = arith.constant 2 : i64
    %125 = arith.addi %124, %c2_i64_53 : i64
    %c0_i32_54 = arith.constant 0 : i32
    %126 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_54) : (!llvm.ptr, i32) -> i32
    %127 = arith.extui %126 : i32 to i64
    %c65536_i64_55 = arith.constant 65536 : i64
    %128 = arith.muli %127, %c65536_i64_55 : i64
    %129 = arith.cmpi ult, %125, %128 : i64
    cf.cond_br %129, ^bb22, ^bb23
  ^bb21:  // pred: ^bb18
    %c1_i32_56 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_56) : (i32) -> ()
    cf.br ^bb20
  ^bb22:  // 2 preds: ^bb20, ^bb23
    %130 = llvm.getelementptr %12[%124] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %131 = arith.trunci %122 : i32 to i16
    llvm.store volatile %131, %130 {alignment = 1 : i64} : i16, !llvm.ptr
    %132 = llvm.load %3 : !llvm.ptr -> i32
    %133 = llvm.load %1 : !llvm.ptr -> i32
    %c11_i64 = arith.constant 11 : i64
    %134 = arith.extui %133 : i32 to i64
    %135 = arith.addi %134, %c11_i64 : i64
    %c8_i64_57 = arith.constant 8 : i64
    %136 = arith.addi %135, %c8_i64_57 : i64
    %c0_i32_58 = arith.constant 0 : i32
    %137 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_58) : (!llvm.ptr, i32) -> i32
    %138 = arith.extui %137 : i32 to i64
    %c65536_i64_59 = arith.constant 65536 : i64
    %139 = arith.muli %138, %c65536_i64_59 : i64
    %140 = arith.cmpi ult, %136, %139 : i64
    cf.cond_br %140, ^bb24, ^bb25
  ^bb23:  // pred: ^bb20
    %c1_i32_60 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_60) : (i32) -> ()
    cf.br ^bb22
  ^bb24:  // 2 preds: ^bb22, ^bb25
    %141 = llvm.getelementptr %12[%135] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %142 = llvm.load volatile %141 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c43_i64 = arith.constant 43 : i64
    %143 = arith.extui %132 : i32 to i64
    %144 = arith.addi %143, %c43_i64 : i64
    %c8_i64_61 = arith.constant 8 : i64
    %145 = arith.addi %144, %c8_i64_61 : i64
    %c0_i32_62 = arith.constant 0 : i32
    %146 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_62) : (!llvm.ptr, i32) -> i32
    %147 = arith.extui %146 : i32 to i64
    %c65536_i64_63 = arith.constant 65536 : i64
    %148 = arith.muli %147, %c65536_i64_63 : i64
    %149 = arith.cmpi ult, %145, %148 : i64
    cf.cond_br %149, ^bb26, ^bb27
  ^bb25:  // pred: ^bb22
    %c1_i32_64 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_64) : (i32) -> ()
    cf.br ^bb24
  ^bb26:  // 2 preds: ^bb24, ^bb27
    %150 = llvm.getelementptr %12[%144] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %142, %150 {alignment = 1 : i64} : i64, !llvm.ptr
    %151 = llvm.load %3 : !llvm.ptr -> i32
    %152 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64 = arith.constant 3 : i64
    %153 = arith.extui %152 : i32 to i64
    %154 = arith.addi %153, %c3_i64 : i64
    %c8_i64_65 = arith.constant 8 : i64
    %155 = arith.addi %154, %c8_i64_65 : i64
    %c0_i32_66 = arith.constant 0 : i32
    %156 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_66) : (!llvm.ptr, i32) -> i32
    %157 = arith.extui %156 : i32 to i64
    %c65536_i64_67 = arith.constant 65536 : i64
    %158 = arith.muli %157, %c65536_i64_67 : i64
    %159 = arith.cmpi ult, %155, %158 : i64
    cf.cond_br %159, ^bb28, ^bb29
  ^bb27:  // pred: ^bb24
    %c1_i32_68 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_68) : (i32) -> ()
    cf.br ^bb26
  ^bb28:  // 2 preds: ^bb26, ^bb29
    %160 = llvm.getelementptr %12[%154] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %161 = llvm.load volatile %160 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c35_i64 = arith.constant 35 : i64
    %162 = arith.extui %151 : i32 to i64
    %163 = arith.addi %162, %c35_i64 : i64
    %c8_i64_69 = arith.constant 8 : i64
    %164 = arith.addi %163, %c8_i64_69 : i64
    %c0_i32_70 = arith.constant 0 : i32
    %165 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_70) : (!llvm.ptr, i32) -> i32
    %166 = arith.extui %165 : i32 to i64
    %c65536_i64_71 = arith.constant 65536 : i64
    %167 = arith.muli %166, %c65536_i64_71 : i64
    %168 = arith.cmpi ult, %164, %167 : i64
    cf.cond_br %168, ^bb30, ^bb31
  ^bb29:  // pred: ^bb26
    %c1_i32_72 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_72) : (i32) -> ()
    cf.br ^bb28
  ^bb30:  // 2 preds: ^bb28, ^bb31
    %169 = llvm.getelementptr %12[%163] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %161, %169 {alignment = 1 : i64} : i64, !llvm.ptr
    %170 = llvm.load %3 : !llvm.ptr -> i32
    %171 = llvm.load %1 : !llvm.ptr -> i32
    %c27_i64 = arith.constant 27 : i64
    %172 = arith.extui %171 : i32 to i64
    %173 = arith.addi %172, %c27_i64 : i64
    %c4_i64_73 = arith.constant 4 : i64
    %174 = arith.addi %173, %c4_i64_73 : i64
    %c0_i32_74 = arith.constant 0 : i32
    %175 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_74) : (!llvm.ptr, i32) -> i32
    %176 = arith.extui %175 : i32 to i64
    %c65536_i64_75 = arith.constant 65536 : i64
    %177 = arith.muli %176, %c65536_i64_75 : i64
    %178 = arith.cmpi ult, %174, %177 : i64
    cf.cond_br %178, ^bb32, ^bb33
  ^bb31:  // pred: ^bb28
    %c1_i32_76 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_76) : (i32) -> ()
    cf.br ^bb30
  ^bb32:  // 2 preds: ^bb30, ^bb33
    %179 = llvm.getelementptr %12[%173] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %180 = llvm.load volatile %179 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c59_i64 = arith.constant 59 : i64
    %181 = arith.extui %170 : i32 to i64
    %182 = arith.addi %181, %c59_i64 : i64
    %c4_i64_77 = arith.constant 4 : i64
    %183 = arith.addi %182, %c4_i64_77 : i64
    %c0_i32_78 = arith.constant 0 : i32
    %184 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_78) : (!llvm.ptr, i32) -> i32
    %185 = arith.extui %184 : i32 to i64
    %c65536_i64_79 = arith.constant 65536 : i64
    %186 = arith.muli %185, %c65536_i64_79 : i64
    %187 = arith.cmpi ult, %183, %186 : i64
    cf.cond_br %187, ^bb34, ^bb35
  ^bb33:  // pred: ^bb30
    %c1_i32_80 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_80) : (i32) -> ()
    cf.br ^bb32
  ^bb34:  // 2 preds: ^bb32, ^bb35
    %188 = llvm.getelementptr %12[%182] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %180, %188 {alignment = 1 : i64} : i32, !llvm.ptr
    %189 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32_81 = arith.constant 64 : i32
    %190 = arith.addi %189, %c64_i32_81 : i32
    %191 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_82 = arith.constant 32 : i32
    %192 = arith.addi %191, %c32_i32_82 : i32
    call @f15(%arg0, %190, %192) : (!llvm.ptr, i32, i32) -> ()
    %193 = llvm.load %3 : !llvm.ptr -> i32
    %c68_i64 = arith.constant 68 : i64
    %194 = arith.extui %193 : i32 to i64
    %195 = arith.addi %194, %c68_i64 : i64
    %c4_i64_83 = arith.constant 4 : i64
    %196 = arith.addi %195, %c4_i64_83 : i64
    %c0_i32_84 = arith.constant 0 : i32
    %197 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_84) : (!llvm.ptr, i32) -> i32
    %198 = arith.extui %197 : i32 to i64
    %c65536_i64_85 = arith.constant 65536 : i64
    %199 = arith.muli %198, %c65536_i64_85 : i64
    %200 = arith.cmpi ult, %196, %199 : i64
    cf.cond_br %200, ^bb36, ^bb37
  ^bb35:  // pred: ^bb32
    %c1_i32_86 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_86) : (i32) -> ()
    cf.br ^bb34
  ^bb36:  // 2 preds: ^bb34, ^bb37
    %201 = llvm.getelementptr %12[%195] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %202 = llvm.load volatile %201 {alignment = 1 : i64} : !llvm.ptr -> i32
    %203 = llvm.load %3 : !llvm.ptr -> i32
    %c72_i64 = arith.constant 72 : i64
    %204 = arith.extui %203 : i32 to i64
    %205 = arith.addi %204, %c72_i64 : i64
    %c4_i64_87 = arith.constant 4 : i64
    %206 = arith.addi %205, %c4_i64_87 : i64
    %c0_i32_88 = arith.constant 0 : i32
    %207 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_88) : (!llvm.ptr, i32) -> i32
    %208 = arith.extui %207 : i32 to i64
    %c65536_i64_89 = arith.constant 65536 : i64
    %209 = arith.muli %208, %c65536_i64_89 : i64
    %210 = arith.cmpi ult, %206, %209 : i64
    cf.cond_br %210, ^bb38, ^bb39
  ^bb37:  // pred: ^bb34
    %c1_i32_90 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_90) : (i32) -> ()
    cf.br ^bb36
  ^bb38:  // 2 preds: ^bb36, ^bb39
    %211 = llvm.getelementptr %12[%205] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %212 = llvm.load volatile %211 {alignment = 1 : i64} : !llvm.ptr -> i32
    %213 = llvm.load %1 : !llvm.ptr -> i32
    %214 = llvm.load %2 : !llvm.ptr -> i32
    %215 = call @f109(%arg0, %202, %212, %213, %214) : (!llvm.ptr, i32, i32, i32, i32) -> i32
    llvm.store %215, %1 : i32, !llvm.ptr
    %216 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32_91 = arith.constant 64 : i32
    %217 = arith.addi %216, %c64_i32_91 : i32
    call @f112(%arg0, %217) : (!llvm.ptr, i32) -> ()
    %218 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32_92 = arith.constant 64 : i32
    %219 = arith.addi %218, %c64_i32_92 : i32
    call @f113(%arg0, %219) : (!llvm.ptr, i32) -> ()
    %c-2147483645_i32 = arith.constant -2147483645 : i32
    llvm.store %c-2147483645_i32, %4 : i32, !llvm.ptr
    %220 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_93 = arith.constant 0 : i32
    %221 = arith.cmpi eq, %220, %c0_i32_93 : i32
    %222 = arith.extui %221 : i1 to i32
    %c0_i32_94 = arith.constant 0 : i32
    %223 = arith.cmpi ne, %222, %c0_i32_94 : i32
    cf.cond_br %223, ^bb6, ^bb40
  ^bb39:  // pred: ^bb36
    %c1_i32_95 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_95) : (i32) -> ()
    cf.br ^bb38
  ^bb40:  // pred: ^bb38
    %224 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32_96 = arith.constant 64 : i32
    %225 = arith.addi %224, %c64_i32_96 : i32
    %c2_i32_97 = arith.constant 2 : i32
    %226 = arith.addi %225, %c2_i32_97 : i32
    %227 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64_98 = arith.constant 0 : i64
    %228 = arith.extui %227 : i32 to i64
    %229 = arith.addi %228, %c0_i64_98 : i64
    %c1_i64_99 = arith.constant 1 : i64
    %230 = arith.addi %229, %c1_i64_99 : i64
    %c0_i32_100 = arith.constant 0 : i32
    %231 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_100) : (!llvm.ptr, i32) -> i32
    %232 = arith.extui %231 : i32 to i64
    %c65536_i64_101 = arith.constant 65536 : i64
    %233 = arith.muli %232, %c65536_i64_101 : i64
    %234 = arith.cmpi ult, %230, %233 : i64
    cf.cond_br %234, ^bb41, ^bb42
  ^bb41:  // 2 preds: ^bb40, ^bb42
    %235 = llvm.getelementptr %12[%229] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %236 = llvm.load volatile %235 {alignment = 1 : i64} : !llvm.ptr -> i8
    %237 = arith.extui %236 : i8 to i32
    %c0_i64_102 = arith.constant 0 : i64
    %238 = arith.extui %226 : i32 to i64
    %239 = arith.addi %238, %c0_i64_102 : i64
    %c1_i64_103 = arith.constant 1 : i64
    %240 = arith.addi %239, %c1_i64_103 : i64
    %c0_i32_104 = arith.constant 0 : i32
    %241 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_104) : (!llvm.ptr, i32) -> i32
    %242 = arith.extui %241 : i32 to i64
    %c65536_i64_105 = arith.constant 65536 : i64
    %243 = arith.muli %242, %c65536_i64_105 : i64
    %244 = arith.cmpi ult, %240, %243 : i64
    cf.cond_br %244, ^bb43, ^bb44
  ^bb42:  // pred: ^bb40
    %c1_i32_106 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_106) : (i32) -> ()
    cf.br ^bb41
  ^bb43:  // 2 preds: ^bb41, ^bb44
    %245 = llvm.getelementptr %12[%239] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %246 = arith.trunci %237 : i32 to i8
    llvm.store volatile %246, %245 {alignment = 1 : i64} : i8, !llvm.ptr
    %247 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %248 = arith.addi %247, %c8_i32 : i32
    %249 = llvm.load %3 : !llvm.ptr -> i32
    %c39_i32 = arith.constant 39 : i32
    %250 = arith.addi %249, %c39_i32 : i32
    llvm.store %250, %1 : i32, !llvm.ptr
    %c8_i32_107 = arith.constant 8 : i32
    %251 = arith.addi %250, %c8_i32_107 : i32
    %c0_i64_108 = arith.constant 0 : i64
    %252 = arith.extui %251 : i32 to i64
    %253 = arith.addi %252, %c0_i64_108 : i64
    %c8_i64_109 = arith.constant 8 : i64
    %254 = arith.addi %253, %c8_i64_109 : i64
    %c0_i32_110 = arith.constant 0 : i32
    %255 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_110) : (!llvm.ptr, i32) -> i32
    %256 = arith.extui %255 : i32 to i64
    %c65536_i64_111 = arith.constant 65536 : i64
    %257 = arith.muli %256, %c65536_i64_111 : i64
    %258 = arith.cmpi ult, %254, %257 : i64
    cf.cond_br %258, ^bb45, ^bb46
  ^bb44:  // pred: ^bb41
    %c1_i32_112 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_112) : (i32) -> ()
    cf.br ^bb43
  ^bb45:  // 2 preds: ^bb43, ^bb46
    %259 = llvm.getelementptr %12[%253] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %260 = llvm.load volatile %259 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %260, %6 : i64, !llvm.ptr
    %c0_i64_113 = arith.constant 0 : i64
    %261 = arith.extui %248 : i32 to i64
    %262 = arith.addi %261, %c0_i64_113 : i64
    %c8_i64_114 = arith.constant 8 : i64
    %263 = arith.addi %262, %c8_i64_114 : i64
    %c0_i32_115 = arith.constant 0 : i32
    %264 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_115) : (!llvm.ptr, i32) -> i32
    %265 = arith.extui %264 : i32 to i64
    %c65536_i64_116 = arith.constant 65536 : i64
    %266 = arith.muli %265, %c65536_i64_116 : i64
    %267 = arith.cmpi ult, %263, %266 : i64
    cf.cond_br %267, ^bb47, ^bb48
  ^bb46:  // pred: ^bb43
    %c1_i32_117 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_117) : (i32) -> ()
    cf.br ^bb45
  ^bb47:  // 2 preds: ^bb45, ^bb48
    %268 = llvm.getelementptr %12[%262] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %260, %268 {alignment = 1 : i64} : i64, !llvm.ptr
    %269 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %270 = arith.addi %269, %c16_i32 : i32
    %271 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32_118 = arith.constant 16 : i32
    %272 = arith.addi %271, %c16_i32_118 : i32
    %c0_i64_119 = arith.constant 0 : i64
    %273 = arith.extui %272 : i32 to i64
    %274 = arith.addi %273, %c0_i64_119 : i64
    %c8_i64_120 = arith.constant 8 : i64
    %275 = arith.addi %274, %c8_i64_120 : i64
    %c0_i32_121 = arith.constant 0 : i32
    %276 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_121) : (!llvm.ptr, i32) -> i32
    %277 = arith.extui %276 : i32 to i64
    %c65536_i64_122 = arith.constant 65536 : i64
    %278 = arith.muli %277, %c65536_i64_122 : i64
    %279 = arith.cmpi ult, %275, %278 : i64
    cf.cond_br %279, ^bb49, ^bb50
  ^bb48:  // pred: ^bb45
    %c1_i32_123 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_123) : (i32) -> ()
    cf.br ^bb47
  ^bb49:  // 2 preds: ^bb47, ^bb50
    %280 = llvm.getelementptr %12[%274] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %281 = llvm.load volatile %280 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %281, %7 : i64, !llvm.ptr
    %c0_i64_124 = arith.constant 0 : i64
    %282 = arith.extui %270 : i32 to i64
    %283 = arith.addi %282, %c0_i64_124 : i64
    %c8_i64_125 = arith.constant 8 : i64
    %284 = arith.addi %283, %c8_i64_125 : i64
    %c0_i32_126 = arith.constant 0 : i32
    %285 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_126) : (!llvm.ptr, i32) -> i32
    %286 = arith.extui %285 : i32 to i64
    %c65536_i64_127 = arith.constant 65536 : i64
    %287 = arith.muli %286, %c65536_i64_127 : i64
    %288 = arith.cmpi ult, %284, %287 : i64
    cf.cond_br %288, ^bb51, ^bb52
  ^bb50:  // pred: ^bb47
    %c1_i32_128 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_128) : (i32) -> ()
    cf.br ^bb49
  ^bb51:  // 2 preds: ^bb49, ^bb52
    %289 = llvm.getelementptr %12[%283] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %281, %289 {alignment = 1 : i64} : i64, !llvm.ptr
    %290 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %291 = arith.addi %290, %c24_i32 : i32
    %292 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i32_129 = arith.constant 24 : i32
    %293 = arith.addi %292, %c24_i32_129 : i32
    %c0_i64_130 = arith.constant 0 : i64
    %294 = arith.extui %293 : i32 to i64
    %295 = arith.addi %294, %c0_i64_130 : i64
    %c1_i64_131 = arith.constant 1 : i64
    %296 = arith.addi %295, %c1_i64_131 : i64
    %c0_i32_132 = arith.constant 0 : i32
    %297 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_132) : (!llvm.ptr, i32) -> i32
    %298 = arith.extui %297 : i32 to i64
    %c65536_i64_133 = arith.constant 65536 : i64
    %299 = arith.muli %298, %c65536_i64_133 : i64
    %300 = arith.cmpi ult, %296, %299 : i64
    cf.cond_br %300, ^bb53, ^bb54
  ^bb52:  // pred: ^bb49
    %c1_i32_134 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_134) : (i32) -> ()
    cf.br ^bb51
  ^bb53:  // 2 preds: ^bb51, ^bb54
    %301 = llvm.getelementptr %12[%295] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %302 = llvm.load volatile %301 {alignment = 1 : i64} : !llvm.ptr -> i8
    %303 = arith.extui %302 : i8 to i32
    llvm.store %303, %2 : i32, !llvm.ptr
    %c0_i64_135 = arith.constant 0 : i64
    %304 = arith.extui %291 : i32 to i64
    %305 = arith.addi %304, %c0_i64_135 : i64
    %c1_i64_136 = arith.constant 1 : i64
    %306 = arith.addi %305, %c1_i64_136 : i64
    %c0_i32_137 = arith.constant 0 : i32
    %307 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_137) : (!llvm.ptr, i32) -> i32
    %308 = arith.extui %307 : i32 to i64
    %c65536_i64_138 = arith.constant 65536 : i64
    %309 = arith.muli %308, %c65536_i64_138 : i64
    %310 = arith.cmpi ult, %306, %309 : i64
    cf.cond_br %310, ^bb55, ^bb56
  ^bb54:  // pred: ^bb51
    %c1_i32_139 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_139) : (i32) -> ()
    cf.br ^bb53
  ^bb55:  // 2 preds: ^bb53, ^bb56
    %311 = llvm.getelementptr %12[%305] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %312 = arith.trunci %303 : i32 to i8
    llvm.store volatile %312, %311 {alignment = 1 : i64} : i8, !llvm.ptr
    %313 = llvm.load %3 : !llvm.ptr -> i32
    %c79_i32 = arith.constant 79 : i32
    %314 = arith.addi %313, %c79_i32 : i32
    %315 = llvm.load %6 : !llvm.ptr -> i64
    %c0_i64_140 = arith.constant 0 : i64
    %316 = arith.extui %314 : i32 to i64
    %317 = arith.addi %316, %c0_i64_140 : i64
    %c8_i64_141 = arith.constant 8 : i64
    %318 = arith.addi %317, %c8_i64_141 : i64
    %c0_i32_142 = arith.constant 0 : i32
    %319 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_142) : (!llvm.ptr, i32) -> i32
    %320 = arith.extui %319 : i32 to i64
    %c65536_i64_143 = arith.constant 65536 : i64
    %321 = arith.muli %320, %c65536_i64_143 : i64
    %322 = arith.cmpi ult, %318, %321 : i64
    cf.cond_br %322, ^bb57, ^bb58
  ^bb56:  // pred: ^bb53
    %c1_i32_144 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_144) : (i32) -> ()
    cf.br ^bb55
  ^bb57:  // 2 preds: ^bb55, ^bb58
    %323 = llvm.getelementptr %12[%317] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %315, %323 {alignment = 1 : i64} : i64, !llvm.ptr
    %324 = llvm.load %3 : !llvm.ptr -> i32
    %c87_i32 = arith.constant 87 : i32
    %325 = arith.addi %324, %c87_i32 : i32
    %326 = llvm.load %7 : !llvm.ptr -> i64
    %c0_i64_145 = arith.constant 0 : i64
    %327 = arith.extui %325 : i32 to i64
    %328 = arith.addi %327, %c0_i64_145 : i64
    %c8_i64_146 = arith.constant 8 : i64
    %329 = arith.addi %328, %c8_i64_146 : i64
    %c0_i32_147 = arith.constant 0 : i32
    %330 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_147) : (!llvm.ptr, i32) -> i32
    %331 = arith.extui %330 : i32 to i64
    %c65536_i64_148 = arith.constant 65536 : i64
    %332 = arith.muli %331, %c65536_i64_148 : i64
    %333 = arith.cmpi ult, %329, %332 : i64
    cf.cond_br %333, ^bb59, ^bb60
  ^bb58:  // pred: ^bb55
    %c1_i32_149 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_149) : (i32) -> ()
    cf.br ^bb57
  ^bb59:  // 2 preds: ^bb57, ^bb60
    %334 = llvm.getelementptr %12[%328] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %326, %334 {alignment = 1 : i64} : i64, !llvm.ptr
    %335 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32_150 = arith.constant 64 : i32
    %336 = arith.addi %335, %c64_i32_150 : i32
    %c31_i32_151 = arith.constant 31 : i32
    %337 = arith.addi %336, %c31_i32_151 : i32
    %338 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_152 = arith.constant 0 : i64
    %339 = arith.extui %337 : i32 to i64
    %340 = arith.addi %339, %c0_i64_152 : i64
    %c1_i64_153 = arith.constant 1 : i64
    %341 = arith.addi %340, %c1_i64_153 : i64
    %c0_i32_154 = arith.constant 0 : i32
    %342 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_154) : (!llvm.ptr, i32) -> i32
    %343 = arith.extui %342 : i32 to i64
    %c65536_i64_155 = arith.constant 65536 : i64
    %344 = arith.muli %343, %c65536_i64_155 : i64
    %345 = arith.cmpi ult, %341, %344 : i64
    cf.cond_br %345, ^bb61, ^bb62
  ^bb60:  // pred: ^bb57
    %c1_i32_156 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_156) : (i32) -> ()
    cf.br ^bb59
  ^bb61:  // 2 preds: ^bb59, ^bb62
    %346 = llvm.getelementptr %12[%340] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %347 = arith.trunci %338 : i32 to i8
    llvm.store volatile %347, %346 {alignment = 1 : i64} : i8, !llvm.ptr
    %348 = llvm.load %3 : !llvm.ptr -> i32
    %349 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i64_157 = arith.constant 32 : i64
    %350 = arith.extui %349 : i32 to i64
    %351 = arith.addi %350, %c32_i64_157 : i64
    %c2_i64_158 = arith.constant 2 : i64
    %352 = arith.addi %351, %c2_i64_158 : i64
    %c0_i32_159 = arith.constant 0 : i32
    %353 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_159) : (!llvm.ptr, i32) -> i32
    %354 = arith.extui %353 : i32 to i64
    %c65536_i64_160 = arith.constant 65536 : i64
    %355 = arith.muli %354, %c65536_i64_160 : i64
    %356 = arith.cmpi ult, %352, %355 : i64
    cf.cond_br %356, ^bb63, ^bb64
  ^bb62:  // pred: ^bb59
    %c1_i32_161 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_161) : (i32) -> ()
    cf.br ^bb61
  ^bb63:  // 2 preds: ^bb61, ^bb64
    %357 = llvm.getelementptr %12[%351] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %358 = llvm.load volatile %357 {alignment = 1 : i64} : !llvm.ptr -> i16
    %359 = arith.extui %358 : i16 to i32
    %c64_i64_162 = arith.constant 64 : i64
    %360 = arith.extui %348 : i32 to i64
    %361 = arith.addi %360, %c64_i64_162 : i64
    %c2_i64_163 = arith.constant 2 : i64
    %362 = arith.addi %361, %c2_i64_163 : i64
    %c0_i32_164 = arith.constant 0 : i32
    %363 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_164) : (!llvm.ptr, i32) -> i32
    %364 = arith.extui %363 : i32 to i64
    %c65536_i64_165 = arith.constant 65536 : i64
    %365 = arith.muli %364, %c65536_i64_165 : i64
    %366 = arith.cmpi ult, %362, %365 : i64
    cf.cond_br %366, ^bb65, ^bb66
  ^bb64:  // pred: ^bb61
    %c1_i32_166 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_166) : (i32) -> ()
    cf.br ^bb63
  ^bb65:  // 2 preds: ^bb63, ^bb66
    %367 = llvm.getelementptr %12[%361] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %368 = arith.trunci %359 : i32 to i16
    llvm.store volatile %368, %367 {alignment = 1 : i64} : i16, !llvm.ptr
    %369 = llvm.load %3 : !llvm.ptr -> i32
    %370 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_167 = arith.constant 0 : i64
    %371 = arith.extui %370 : i32 to i64
    %372 = arith.addi %371, %c0_i64_167 : i64
    %c8_i64_168 = arith.constant 8 : i64
    %373 = arith.addi %372, %c8_i64_168 : i64
    %c0_i32_169 = arith.constant 0 : i32
    %374 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_169) : (!llvm.ptr, i32) -> i32
    %375 = arith.extui %374 : i32 to i64
    %c65536_i64_170 = arith.constant 65536 : i64
    %376 = arith.muli %375, %c65536_i64_170 : i64
    %377 = arith.cmpi ult, %373, %376 : i64
    cf.cond_br %377, ^bb67, ^bb68
  ^bb66:  // pred: ^bb63
    %c1_i32_171 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_171) : (i32) -> ()
    cf.br ^bb65
  ^bb67:  // 2 preds: ^bb65, ^bb68
    %378 = llvm.getelementptr %12[%372] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %379 = llvm.load volatile %378 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %379, %6 : i64, !llvm.ptr
    %c0_i64_172 = arith.constant 0 : i64
    %380 = arith.extui %369 : i32 to i64
    %381 = arith.addi %380, %c0_i64_172 : i64
    %c8_i64_173 = arith.constant 8 : i64
    %382 = arith.addi %381, %c8_i64_173 : i64
    %c0_i32_174 = arith.constant 0 : i32
    %383 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_174) : (!llvm.ptr, i32) -> i32
    %384 = arith.extui %383 : i32 to i64
    %c65536_i64_175 = arith.constant 65536 : i64
    %385 = arith.muli %384, %c65536_i64_175 : i64
    %386 = arith.cmpi ult, %382, %385 : i64
    cf.cond_br %386, ^bb69, ^bb70
  ^bb68:  // pred: ^bb65
    %c1_i32_176 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_176) : (i32) -> ()
    cf.br ^bb67
  ^bb69:  // 2 preds: ^bb67, ^bb70
    %387 = llvm.getelementptr %12[%381] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %379, %387 {alignment = 1 : i64} : i64, !llvm.ptr
    %388 = llvm.load %3 : !llvm.ptr -> i32
    %389 = llvm.load %3 : !llvm.ptr -> i32
    %c35_i64_177 = arith.constant 35 : i64
    %390 = arith.extui %389 : i32 to i64
    %391 = arith.addi %390, %c35_i64_177 : i64
    %c4_i64_178 = arith.constant 4 : i64
    %392 = arith.addi %391, %c4_i64_178 : i64
    %c0_i32_179 = arith.constant 0 : i32
    %393 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_179) : (!llvm.ptr, i32) -> i32
    %394 = arith.extui %393 : i32 to i64
    %c65536_i64_180 = arith.constant 65536 : i64
    %395 = arith.muli %394, %c65536_i64_180 : i64
    %396 = arith.cmpi ult, %392, %395 : i64
    cf.cond_br %396, ^bb71, ^bb72
  ^bb70:  // pred: ^bb67
    %c1_i32_181 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_181) : (i32) -> ()
    cf.br ^bb69
  ^bb71:  // 2 preds: ^bb69, ^bb72
    %397 = llvm.getelementptr %12[%391] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %398 = llvm.load volatile %397 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c67_i64 = arith.constant 67 : i64
    %399 = arith.extui %388 : i32 to i64
    %400 = arith.addi %399, %c67_i64 : i64
    %c4_i64_182 = arith.constant 4 : i64
    %401 = arith.addi %400, %c4_i64_182 : i64
    %c0_i32_183 = arith.constant 0 : i32
    %402 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_183) : (!llvm.ptr, i32) -> i32
    %403 = arith.extui %402 : i32 to i64
    %c65536_i64_184 = arith.constant 65536 : i64
    %404 = arith.muli %403, %c65536_i64_184 : i64
    %405 = arith.cmpi ult, %401, %404 : i64
    cf.cond_br %405, ^bb73, ^bb74
  ^bb72:  // pred: ^bb69
    %c1_i32_185 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_185) : (i32) -> ()
    cf.br ^bb71
  ^bb73:  // 2 preds: ^bb71, ^bb74
    %406 = llvm.getelementptr %12[%400] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %398, %406 {alignment = 1 : i64} : i32, !llvm.ptr
    %407 = llvm.load %3 : !llvm.ptr -> i32
    %408 = llvm.load %6 : !llvm.ptr -> i64
    %c71_i64 = arith.constant 71 : i64
    %409 = arith.extui %407 : i32 to i64
    %410 = arith.addi %409, %c71_i64 : i64
    %c8_i64_186 = arith.constant 8 : i64
    %411 = arith.addi %410, %c8_i64_186 : i64
    %c0_i32_187 = arith.constant 0 : i32
    %412 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_187) : (!llvm.ptr, i32) -> i32
    %413 = arith.extui %412 : i32 to i64
    %c65536_i64_188 = arith.constant 65536 : i64
    %414 = arith.muli %413, %c65536_i64_188 : i64
    %415 = arith.cmpi ult, %411, %414 : i64
    cf.cond_br %415, ^bb75, ^bb76
  ^bb74:  // pred: ^bb71
    %c1_i32_189 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_189) : (i32) -> ()
    cf.br ^bb73
  ^bb75:  // 2 preds: ^bb73, ^bb76
    %416 = llvm.getelementptr %12[%410] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %408, %416 {alignment = 1 : i64} : i64, !llvm.ptr
    %c0_i32_190 = arith.constant 0 : i32
    llvm.store %c0_i32_190, %1 : i32, !llvm.ptr
    cf.br ^bb81
  ^bb76:  // pred: ^bb73
    %c1_i32_191 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_191) : (i32) -> ()
    cf.br ^bb75
  ^bb77:  // 2 preds: ^bb99, ^bb111
    %417 = llvm.load %0 : !llvm.ptr -> i32
    %418 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_192 = arith.constant 0 : i64
    %419 = arith.extui %417 : i32 to i64
    %420 = arith.addi %419, %c0_i64_192 : i64
    %c4_i64_193 = arith.constant 4 : i64
    %421 = arith.addi %420, %c4_i64_193 : i64
    %c0_i32_194 = arith.constant 0 : i32
    %422 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_194) : (!llvm.ptr, i32) -> i32
    %423 = arith.extui %422 : i32 to i64
    %c65536_i64_195 = arith.constant 65536 : i64
    %424 = arith.muli %423, %c65536_i64_195 : i64
    %425 = arith.cmpi ult, %421, %424 : i64
    cf.cond_br %425, ^bb113, ^bb114
  ^bb78:  // pred: ^bb86
    %426 = llvm.load %0 : !llvm.ptr -> i32
    %427 = llvm.load %3 : !llvm.ptr -> i32
    %c36_i64 = arith.constant 36 : i64
    %428 = arith.extui %427 : i32 to i64
    %429 = arith.addi %428, %c36_i64 : i64
    %c8_i64_196 = arith.constant 8 : i64
    %430 = arith.addi %429, %c8_i64_196 : i64
    %c0_i32_197 = arith.constant 0 : i32
    %431 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_197) : (!llvm.ptr, i32) -> i32
    %432 = arith.extui %431 : i32 to i64
    %c65536_i64_198 = arith.constant 65536 : i64
    %433 = arith.muli %432, %c65536_i64_198 : i64
    %434 = arith.cmpi ult, %430, %433 : i64
    cf.cond_br %434, ^bb101, ^bb102
  ^bb79:  // 2 preds: ^bb81, ^bb88
    %435 = llvm.load %0 : !llvm.ptr -> i32
    %436 = llvm.load %3 : !llvm.ptr -> i32
    %c76_i64 = arith.constant 76 : i64
    %437 = arith.extui %436 : i32 to i64
    %438 = arith.addi %437, %c76_i64 : i64
    %c8_i64_199 = arith.constant 8 : i64
    %439 = arith.addi %438, %c8_i64_199 : i64
    %c0_i32_200 = arith.constant 0 : i32
    %440 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_200) : (!llvm.ptr, i32) -> i32
    %441 = arith.extui %440 : i32 to i64
    %c65536_i64_201 = arith.constant 65536 : i64
    %442 = arith.muli %441, %c65536_i64_201 : i64
    %443 = arith.cmpi ult, %439, %442 : i64
    cf.cond_br %443, ^bb89, ^bb90
  ^bb80:  // pred: ^bb85
    %444 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_202 = arith.constant 32 : i32
    %445 = arith.addi %444, %c32_i32_202 : i32
    %446 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32_203 = arith.constant 64 : i32
    %447 = arith.addi %446, %c64_i32_203 : i32
    call @f44(%arg0, %445, %447) : (!llvm.ptr, i32, i32) -> ()
    %448 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i64_204 = arith.constant 32 : i64
    %449 = arith.extui %448 : i32 to i64
    %450 = arith.addi %449, %c32_i64_204 : i64
    %c4_i64_205 = arith.constant 4 : i64
    %451 = arith.addi %450, %c4_i64_205 : i64
    %c0_i32_206 = arith.constant 0 : i32
    %452 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_206) : (!llvm.ptr, i32) -> i32
    %453 = arith.extui %452 : i32 to i64
    %c65536_i64_207 = arith.constant 65536 : i64
    %454 = arith.muli %453, %c65536_i64_207 : i64
    %455 = arith.cmpi ult, %451, %454 : i64
    cf.cond_br %455, ^bb86, ^bb87
  ^bb81:  // 2 preds: ^bb75, ^bb83
    %456 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %457 = arith.cmpi eq, %456, %c12_i32 : i32
    %458 = arith.extui %457 : i1 to i32
    %c0_i32_208 = arith.constant 0 : i32
    %459 = arith.cmpi ne, %458, %c0_i32_208 : i32
    cf.cond_br %459, ^bb79, ^bb82
  ^bb82:  // pred: ^bb81
    %460 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32_209 = arith.constant 64 : i32
    %461 = arith.addi %460, %c64_i32_209 : i32
    %462 = llvm.load %1 : !llvm.ptr -> i32
    %463 = arith.addi %461, %462 : i32
    llvm.store %463, %2 : i32, !llvm.ptr
    %464 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_210 = arith.constant 1 : i32
    %465 = arith.addi %464, %c1_i32_210 : i32
    llvm.store %465, %1 : i32, !llvm.ptr
    %466 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_211 = arith.constant 0 : i64
    %467 = arith.extui %466 : i32 to i64
    %468 = arith.addi %467, %c0_i64_211 : i64
    %c1_i64_212 = arith.constant 1 : i64
    %469 = arith.addi %468, %c1_i64_212 : i64
    %c0_i32_213 = arith.constant 0 : i32
    %470 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_213) : (!llvm.ptr, i32) -> i32
    %471 = arith.extui %470 : i32 to i64
    %c65536_i64_214 = arith.constant 65536 : i64
    %472 = arith.muli %471, %c65536_i64_214 : i64
    %473 = arith.cmpi ult, %469, %472 : i64
    cf.cond_br %473, ^bb83, ^bb84
  ^bb83:  // 2 preds: ^bb82, ^bb84
    %474 = llvm.getelementptr %12[%468] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %475 = llvm.load volatile %474 {alignment = 1 : i64} : !llvm.ptr -> i8
    %476 = arith.extui %475 : i8 to i32
    %c0_i32_215 = arith.constant 0 : i32
    %477 = arith.cmpi eq, %476, %c0_i32_215 : i32
    %478 = arith.extui %477 : i1 to i32
    %c0_i32_216 = arith.constant 0 : i32
    %479 = arith.cmpi ne, %478, %c0_i32_216 : i32
    cf.cond_br %479, ^bb81, ^bb85
  ^bb84:  // pred: ^bb82
    %c1_i32_217 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_217) : (i32) -> ()
    cf.br ^bb83
  ^bb85:  // pred: ^bb83
    cf.br ^bb80
  ^bb86:  // 2 preds: ^bb80, ^bb87
    %480 = llvm.getelementptr %12[%450] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %481 = llvm.load volatile %480 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %481, %1 : i32, !llvm.ptr
    %c-2147483638_i32 = arith.constant -2147483638 : i32
    %482 = arith.cmpi eq, %481, %c-2147483638_i32 : i32
    %483 = arith.extui %482 : i1 to i32
    %c0_i32_218 = arith.constant 0 : i32
    %484 = arith.cmpi eq, %483, %c0_i32_218 : i32
    %485 = arith.extui %484 : i1 to i32
    %c0_i32_219 = arith.constant 0 : i32
    %486 = arith.cmpi ne, %485, %c0_i32_219 : i32
    cf.cond_br %486, ^bb78, ^bb88
  ^bb87:  // pred: ^bb80
    %c1_i32_220 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_220) : (i32) -> ()
    cf.br ^bb86
  ^bb88:  // pred: ^bb86
    cf.br ^bb79
  ^bb89:  // 2 preds: ^bb79, ^bb90
    %487 = llvm.getelementptr %12[%438] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %488 = llvm.load volatile %487 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c4_i64_221 = arith.constant 4 : i64
    %489 = arith.extui %435 : i32 to i64
    %490 = arith.addi %489, %c4_i64_221 : i64
    %c8_i64_222 = arith.constant 8 : i64
    %491 = arith.addi %490, %c8_i64_222 : i64
    %c0_i32_223 = arith.constant 0 : i32
    %492 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_223) : (!llvm.ptr, i32) -> i32
    %493 = arith.extui %492 : i32 to i64
    %c65536_i64_224 = arith.constant 65536 : i64
    %494 = arith.muli %493, %c65536_i64_224 : i64
    %495 = arith.cmpi ult, %491, %494 : i64
    cf.cond_br %495, ^bb91, ^bb92
  ^bb90:  // pred: ^bb79
    %c1_i32_225 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_225) : (i32) -> ()
    cf.br ^bb89
  ^bb91:  // 2 preds: ^bb89, ^bb92
    %496 = llvm.getelementptr %12[%490] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %488, %496 {alignment = 1 : i64} : i64, !llvm.ptr
    %497 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i32 = arith.constant 20 : i32
    %498 = arith.addi %497, %c20_i32 : i32
    %499 = llvm.load %3 : !llvm.ptr -> i32
    %c92_i32 = arith.constant 92 : i32
    %500 = arith.addi %499, %c92_i32 : i32
    %c0_i64_226 = arith.constant 0 : i64
    %501 = arith.extui %500 : i32 to i64
    %502 = arith.addi %501, %c0_i64_226 : i64
    %c4_i64_227 = arith.constant 4 : i64
    %503 = arith.addi %502, %c4_i64_227 : i64
    %c0_i32_228 = arith.constant 0 : i32
    %504 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_228) : (!llvm.ptr, i32) -> i32
    %505 = arith.extui %504 : i32 to i64
    %c65536_i64_229 = arith.constant 65536 : i64
    %506 = arith.muli %505, %c65536_i64_229 : i64
    %507 = arith.cmpi ult, %503, %506 : i64
    cf.cond_br %507, ^bb93, ^bb94
  ^bb92:  // pred: ^bb89
    %c1_i32_230 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_230) : (i32) -> ()
    cf.br ^bb91
  ^bb93:  // 2 preds: ^bb91, ^bb94
    %508 = llvm.getelementptr %12[%502] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %509 = llvm.load volatile %508 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_231 = arith.constant 0 : i64
    %510 = arith.extui %498 : i32 to i64
    %511 = arith.addi %510, %c0_i64_231 : i64
    %c4_i64_232 = arith.constant 4 : i64
    %512 = arith.addi %511, %c4_i64_232 : i64
    %c0_i32_233 = arith.constant 0 : i32
    %513 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_233) : (!llvm.ptr, i32) -> i32
    %514 = arith.extui %513 : i32 to i64
    %c65536_i64_234 = arith.constant 65536 : i64
    %515 = arith.muli %514, %c65536_i64_234 : i64
    %516 = arith.cmpi ult, %512, %515 : i64
    cf.cond_br %516, ^bb95, ^bb96
  ^bb94:  // pred: ^bb91
    %c1_i32_235 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_235) : (i32) -> ()
    cf.br ^bb93
  ^bb95:  // 2 preds: ^bb93, ^bb96
    %517 = llvm.getelementptr %12[%511] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %509, %517 {alignment = 1 : i64} : i32, !llvm.ptr
    %518 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i32_236 = arith.constant 12 : i32
    %519 = arith.addi %518, %c12_i32_236 : i32
    %520 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32_237 = arith.constant 64 : i32
    %521 = arith.addi %520, %c64_i32_237 : i32
    %c20_i32_238 = arith.constant 20 : i32
    %522 = arith.addi %521, %c20_i32_238 : i32
    %c0_i64_239 = arith.constant 0 : i64
    %523 = arith.extui %522 : i32 to i64
    %524 = arith.addi %523, %c0_i64_239 : i64
    %c8_i64_240 = arith.constant 8 : i64
    %525 = arith.addi %524, %c8_i64_240 : i64
    %c0_i32_241 = arith.constant 0 : i32
    %526 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_241) : (!llvm.ptr, i32) -> i32
    %527 = arith.extui %526 : i32 to i64
    %c65536_i64_242 = arith.constant 65536 : i64
    %528 = arith.muli %527, %c65536_i64_242 : i64
    %529 = arith.cmpi ult, %525, %528 : i64
    cf.cond_br %529, ^bb97, ^bb98
  ^bb96:  // pred: ^bb93
    %c1_i32_243 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_243) : (i32) -> ()
    cf.br ^bb95
  ^bb97:  // 2 preds: ^bb95, ^bb98
    %530 = llvm.getelementptr %12[%524] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %531 = llvm.load volatile %530 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_244 = arith.constant 0 : i64
    %532 = arith.extui %519 : i32 to i64
    %533 = arith.addi %532, %c0_i64_244 : i64
    %c8_i64_245 = arith.constant 8 : i64
    %534 = arith.addi %533, %c8_i64_245 : i64
    %c0_i32_246 = arith.constant 0 : i32
    %535 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_246) : (!llvm.ptr, i32) -> i32
    %536 = arith.extui %535 : i32 to i64
    %c65536_i64_247 = arith.constant 65536 : i64
    %537 = arith.muli %536, %c65536_i64_247 : i64
    %538 = arith.cmpi ult, %534, %537 : i64
    cf.cond_br %538, ^bb99, ^bb100
  ^bb98:  // pred: ^bb95
    %c1_i32_248 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_248) : (i32) -> ()
    cf.br ^bb97
  ^bb99:  // 2 preds: ^bb97, ^bb100
    %539 = llvm.getelementptr %12[%533] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %531, %539 {alignment = 1 : i64} : i64, !llvm.ptr
    %c-2147483638_i32_249 = arith.constant -2147483638 : i32
    llvm.store %c-2147483638_i32_249, %1 : i32, !llvm.ptr
    cf.br ^bb77
  ^bb100:  // pred: ^bb97
    %c1_i32_250 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_250) : (i32) -> ()
    cf.br ^bb99
  ^bb101:  // 2 preds: ^bb78, ^bb102
    %540 = llvm.getelementptr %12[%429] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %541 = llvm.load volatile %540 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c4_i64_251 = arith.constant 4 : i64
    %542 = arith.extui %426 : i32 to i64
    %543 = arith.addi %542, %c4_i64_251 : i64
    %c8_i64_252 = arith.constant 8 : i64
    %544 = arith.addi %543, %c8_i64_252 : i64
    %c0_i32_253 = arith.constant 0 : i32
    %545 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_253) : (!llvm.ptr, i32) -> i32
    %546 = arith.extui %545 : i32 to i64
    %c65536_i64_254 = arith.constant 65536 : i64
    %547 = arith.muli %546, %c65536_i64_254 : i64
    %548 = arith.cmpi ult, %544, %547 : i64
    cf.cond_br %548, ^bb103, ^bb104
  ^bb102:  // pred: ^bb78
    %c1_i32_255 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_255) : (i32) -> ()
    cf.br ^bb101
  ^bb103:  // 2 preds: ^bb101, ^bb104
    %549 = llvm.getelementptr %12[%543] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %541, %549 {alignment = 1 : i64} : i64, !llvm.ptr
    %550 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i32_256 = arith.constant 20 : i32
    %551 = arith.addi %550, %c20_i32_256 : i32
    %552 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_257 = arith.constant 32 : i32
    %553 = arith.addi %552, %c32_i32_257 : i32
    %c20_i32_258 = arith.constant 20 : i32
    %554 = arith.addi %553, %c20_i32_258 : i32
    %c0_i64_259 = arith.constant 0 : i64
    %555 = arith.extui %554 : i32 to i64
    %556 = arith.addi %555, %c0_i64_259 : i64
    %c4_i64_260 = arith.constant 4 : i64
    %557 = arith.addi %556, %c4_i64_260 : i64
    %c0_i32_261 = arith.constant 0 : i32
    %558 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_261) : (!llvm.ptr, i32) -> i32
    %559 = arith.extui %558 : i32 to i64
    %c65536_i64_262 = arith.constant 65536 : i64
    %560 = arith.muli %559, %c65536_i64_262 : i64
    %561 = arith.cmpi ult, %557, %560 : i64
    cf.cond_br %561, ^bb105, ^bb106
  ^bb104:  // pred: ^bb101
    %c1_i32_263 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_263) : (i32) -> ()
    cf.br ^bb103
  ^bb105:  // 2 preds: ^bb103, ^bb106
    %562 = llvm.getelementptr %12[%556] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %563 = llvm.load volatile %562 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_264 = arith.constant 0 : i64
    %564 = arith.extui %551 : i32 to i64
    %565 = arith.addi %564, %c0_i64_264 : i64
    %c4_i64_265 = arith.constant 4 : i64
    %566 = arith.addi %565, %c4_i64_265 : i64
    %c0_i32_266 = arith.constant 0 : i32
    %567 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_266) : (!llvm.ptr, i32) -> i32
    %568 = arith.extui %567 : i32 to i64
    %c65536_i64_267 = arith.constant 65536 : i64
    %569 = arith.muli %568, %c65536_i64_267 : i64
    %570 = arith.cmpi ult, %566, %569 : i64
    cf.cond_br %570, ^bb107, ^bb108
  ^bb106:  // pred: ^bb103
    %c1_i32_268 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_268) : (i32) -> ()
    cf.br ^bb105
  ^bb107:  // 2 preds: ^bb105, ^bb108
    %571 = llvm.getelementptr %12[%565] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %563, %571 {alignment = 1 : i64} : i32, !llvm.ptr
    %572 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i32_269 = arith.constant 12 : i32
    %573 = arith.addi %572, %c12_i32_269 : i32
    %574 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_270 = arith.constant 32 : i32
    %575 = arith.addi %574, %c32_i32_270 : i32
    %c12_i32_271 = arith.constant 12 : i32
    %576 = arith.addi %575, %c12_i32_271 : i32
    %c0_i64_272 = arith.constant 0 : i64
    %577 = arith.extui %576 : i32 to i64
    %578 = arith.addi %577, %c0_i64_272 : i64
    %c8_i64_273 = arith.constant 8 : i64
    %579 = arith.addi %578, %c8_i64_273 : i64
    %c0_i32_274 = arith.constant 0 : i32
    %580 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_274) : (!llvm.ptr, i32) -> i32
    %581 = arith.extui %580 : i32 to i64
    %c65536_i64_275 = arith.constant 65536 : i64
    %582 = arith.muli %581, %c65536_i64_275 : i64
    %583 = arith.cmpi ult, %579, %582 : i64
    cf.cond_br %583, ^bb109, ^bb110
  ^bb108:  // pred: ^bb105
    %c1_i32_276 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_276) : (i32) -> ()
    cf.br ^bb107
  ^bb109:  // 2 preds: ^bb107, ^bb110
    %584 = llvm.getelementptr %12[%578] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %585 = llvm.load volatile %584 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_277 = arith.constant 0 : i64
    %586 = arith.extui %573 : i32 to i64
    %587 = arith.addi %586, %c0_i64_277 : i64
    %c8_i64_278 = arith.constant 8 : i64
    %588 = arith.addi %587, %c8_i64_278 : i64
    %c0_i32_279 = arith.constant 0 : i32
    %589 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_279) : (!llvm.ptr, i32) -> i32
    %590 = arith.extui %589 : i32 to i64
    %c65536_i64_280 = arith.constant 65536 : i64
    %591 = arith.muli %590, %c65536_i64_280 : i64
    %592 = arith.cmpi ult, %588, %591 : i64
    cf.cond_br %592, ^bb111, ^bb112
  ^bb110:  // pred: ^bb107
    %c1_i32_281 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_281) : (i32) -> ()
    cf.br ^bb109
  ^bb111:  // 2 preds: ^bb109, ^bb112
    %593 = llvm.getelementptr %12[%587] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %585, %593 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb77
  ^bb112:  // pred: ^bb109
    %c1_i32_282 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_282) : (i32) -> ()
    cf.br ^bb111
  ^bb113:  // 2 preds: ^bb77, ^bb114
    %594 = llvm.getelementptr %12[%420] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %418, %594 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb5
  ^bb114:  // pred: ^bb77
    %c1_i32_283 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_283) : (i32) -> ()
    cf.br ^bb113
  ^bb115:  // 2 preds: ^bb6, ^bb116
    %595 = llvm.getelementptr %12[%33] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %31, %595 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb5
  ^bb116:  // pred: ^bb6
    %c1_i32_284 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_284) : (i32) -> ()
    cf.br ^bb115
  }
  func.func @f12(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %5 : !llvm.ptr -> i32
    %c80_i32 = arith.constant 80 : i32
    %10 = arith.subi %9, %c80_i32 : i32
    llvm.store %10, %3 : i32, !llvm.ptr
    llvm.store %10, %5 : i32, !llvm.ptr
    %11 = llvm.load %3 : !llvm.ptr -> i32
    %12 = llvm.load %1 : !llvm.ptr -> i32
    %13 = llvm.load %2 : !llvm.ptr -> i32
    call @f33(%arg0, %11, %12, %13) : (!llvm.ptr, i32, i32, i32) -> ()
    %14 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i64 = arith.constant 32 : i64
    %15 = arith.extui %14 : i32 to i64
    %16 = arith.addi %15, %c32_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %17 = arith.addi %16, %c4_i64 : i64
    %c0_i32_3 = arith.constant 0 : i32
    %18 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_3) : (!llvm.ptr, i32) -> i32
    %19 = arith.extui %18 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %20 = arith.muli %19, %c65536_i64 : i64
    %21 = arith.cmpi ult, %17, %20 : i64
    cf.cond_br %21, ^bb5, ^bb6
  ^bb2:  // pred: ^bb22
    return
  ^bb3:  // 2 preds: ^bb4, ^bb7
    %22 = llvm.load %0 : !llvm.ptr -> i32
    %23 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %24 = arith.extui %23 : i32 to i64
    %25 = arith.addi %24, %c0_i64 : i64
    %c8_i64 = arith.constant 8 : i64
    %26 = arith.addi %25, %c8_i64 : i64
    %c0_i32_4 = arith.constant 0 : i32
    %27 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_4) : (!llvm.ptr, i32) -> i32
    %28 = arith.extui %27 : i32 to i64
    %c65536_i64_5 = arith.constant 65536 : i64
    %29 = arith.muli %28, %c65536_i64_5 : i64
    %30 = arith.cmpi ult, %26, %29 : i64
    cf.cond_br %30, ^bb8, ^bb9
  ^bb4:  // pred: ^bb5
    %31 = llvm.load %3 : !llvm.ptr -> i32
    %c40_i32 = arith.constant 40 : i32
    %32 = arith.addi %31, %c40_i32 : i32
    llvm.store %32, %2 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb1, ^bb6
    %33 = llvm.getelementptr %8[%16] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %34 = llvm.load volatile %33 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_6 = arith.constant 0 : i32
    %35 = arith.cmpi ne, %34, %c0_i32_6 : i32
    cf.cond_br %35, ^bb4, ^bb7
  ^bb6:  // pred: ^bb1
    %c1_i32_7 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_7) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // pred: ^bb5
    %36 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %37 = arith.addi %36, %c32_i32 : i32
    %38 = llvm.load %3 : !llvm.ptr -> i32
    %39 = call @f0(%arg0, %37, %38) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %39, %2 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb8:  // 2 preds: ^bb3, ^bb9
    %40 = llvm.getelementptr %8[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %41 = llvm.load volatile %40 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_8 = arith.constant 0 : i64
    %42 = arith.extui %22 : i32 to i64
    %43 = arith.addi %42, %c0_i64_8 : i64
    %c8_i64_9 = arith.constant 8 : i64
    %44 = arith.addi %43, %c8_i64_9 : i64
    %c0_i32_10 = arith.constant 0 : i32
    %45 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_10) : (!llvm.ptr, i32) -> i32
    %46 = arith.extui %45 : i32 to i64
    %c65536_i64_11 = arith.constant 65536 : i64
    %47 = arith.muli %46, %c65536_i64_11 : i64
    %48 = arith.cmpi ult, %44, %47 : i64
    cf.cond_br %48, ^bb10, ^bb11
  ^bb9:  // pred: ^bb3
    %c1_i32_12 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_12) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // 2 preds: ^bb8, ^bb11
    %49 = llvm.getelementptr %8[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %41, %49 {alignment = 1 : i64} : i64, !llvm.ptr
    %50 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %51 = arith.addi %50, %c24_i32 : i32
    %52 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_13 = arith.constant 24 : i32
    %53 = arith.addi %52, %c24_i32_13 : i32
    %c0_i64_14 = arith.constant 0 : i64
    %54 = arith.extui %53 : i32 to i64
    %55 = arith.addi %54, %c0_i64_14 : i64
    %c8_i64_15 = arith.constant 8 : i64
    %56 = arith.addi %55, %c8_i64_15 : i64
    %c0_i32_16 = arith.constant 0 : i32
    %57 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_16) : (!llvm.ptr, i32) -> i32
    %58 = arith.extui %57 : i32 to i64
    %c65536_i64_17 = arith.constant 65536 : i64
    %59 = arith.muli %58, %c65536_i64_17 : i64
    %60 = arith.cmpi ult, %56, %59 : i64
    cf.cond_br %60, ^bb12, ^bb13
  ^bb11:  // pred: ^bb8
    %c1_i32_18 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_18) : (i32) -> ()
    cf.br ^bb10
  ^bb12:  // 2 preds: ^bb10, ^bb13
    %61 = llvm.getelementptr %8[%55] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %62 = llvm.load volatile %61 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_19 = arith.constant 0 : i64
    %63 = arith.extui %51 : i32 to i64
    %64 = arith.addi %63, %c0_i64_19 : i64
    %c8_i64_20 = arith.constant 8 : i64
    %65 = arith.addi %64, %c8_i64_20 : i64
    %c0_i32_21 = arith.constant 0 : i32
    %66 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_21) : (!llvm.ptr, i32) -> i32
    %67 = arith.extui %66 : i32 to i64
    %c65536_i64_22 = arith.constant 65536 : i64
    %68 = arith.muli %67, %c65536_i64_22 : i64
    %69 = arith.cmpi ult, %65, %68 : i64
    cf.cond_br %69, ^bb14, ^bb15
  ^bb13:  // pred: ^bb10
    %c1_i32_23 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_23) : (i32) -> ()
    cf.br ^bb12
  ^bb14:  // 2 preds: ^bb12, ^bb15
    %70 = llvm.getelementptr %8[%64] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %62, %70 {alignment = 1 : i64} : i64, !llvm.ptr
    %71 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %72 = arith.addi %71, %c16_i32 : i32
    %73 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_24 = arith.constant 16 : i32
    %74 = arith.addi %73, %c16_i32_24 : i32
    %c0_i64_25 = arith.constant 0 : i64
    %75 = arith.extui %74 : i32 to i64
    %76 = arith.addi %75, %c0_i64_25 : i64
    %c8_i64_26 = arith.constant 8 : i64
    %77 = arith.addi %76, %c8_i64_26 : i64
    %c0_i32_27 = arith.constant 0 : i32
    %78 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_27) : (!llvm.ptr, i32) -> i32
    %79 = arith.extui %78 : i32 to i64
    %c65536_i64_28 = arith.constant 65536 : i64
    %80 = arith.muli %79, %c65536_i64_28 : i64
    %81 = arith.cmpi ult, %77, %80 : i64
    cf.cond_br %81, ^bb16, ^bb17
  ^bb15:  // pred: ^bb12
    %c1_i32_29 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_29) : (i32) -> ()
    cf.br ^bb14
  ^bb16:  // 2 preds: ^bb14, ^bb17
    %82 = llvm.getelementptr %8[%76] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %83 = llvm.load volatile %82 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_30 = arith.constant 0 : i64
    %84 = arith.extui %72 : i32 to i64
    %85 = arith.addi %84, %c0_i64_30 : i64
    %c8_i64_31 = arith.constant 8 : i64
    %86 = arith.addi %85, %c8_i64_31 : i64
    %c0_i32_32 = arith.constant 0 : i32
    %87 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_32) : (!llvm.ptr, i32) -> i32
    %88 = arith.extui %87 : i32 to i64
    %c65536_i64_33 = arith.constant 65536 : i64
    %89 = arith.muli %88, %c65536_i64_33 : i64
    %90 = arith.cmpi ult, %86, %89 : i64
    cf.cond_br %90, ^bb18, ^bb19
  ^bb17:  // pred: ^bb14
    %c1_i32_34 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_34) : (i32) -> ()
    cf.br ^bb16
  ^bb18:  // 2 preds: ^bb16, ^bb19
    %91 = llvm.getelementptr %8[%85] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %83, %91 {alignment = 1 : i64} : i64, !llvm.ptr
    %92 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %93 = arith.addi %92, %c8_i32 : i32
    %94 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_35 = arith.constant 8 : i32
    %95 = arith.addi %94, %c8_i32_35 : i32
    %c0_i64_36 = arith.constant 0 : i64
    %96 = arith.extui %95 : i32 to i64
    %97 = arith.addi %96, %c0_i64_36 : i64
    %c8_i64_37 = arith.constant 8 : i64
    %98 = arith.addi %97, %c8_i64_37 : i64
    %c0_i32_38 = arith.constant 0 : i32
    %99 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_38) : (!llvm.ptr, i32) -> i32
    %100 = arith.extui %99 : i32 to i64
    %c65536_i64_39 = arith.constant 65536 : i64
    %101 = arith.muli %100, %c65536_i64_39 : i64
    %102 = arith.cmpi ult, %98, %101 : i64
    cf.cond_br %102, ^bb20, ^bb21
  ^bb19:  // pred: ^bb16
    %c1_i32_40 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_40) : (i32) -> ()
    cf.br ^bb18
  ^bb20:  // 2 preds: ^bb18, ^bb21
    %103 = llvm.getelementptr %8[%97] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %104 = llvm.load volatile %103 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_41 = arith.constant 0 : i64
    %105 = arith.extui %93 : i32 to i64
    %106 = arith.addi %105, %c0_i64_41 : i64
    %c8_i64_42 = arith.constant 8 : i64
    %107 = arith.addi %106, %c8_i64_42 : i64
    %c0_i32_43 = arith.constant 0 : i32
    %108 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_43) : (!llvm.ptr, i32) -> i32
    %109 = arith.extui %108 : i32 to i64
    %c65536_i64_44 = arith.constant 65536 : i64
    %110 = arith.muli %109, %c65536_i64_44 : i64
    %111 = arith.cmpi ult, %107, %110 : i64
    cf.cond_br %111, ^bb22, ^bb23
  ^bb21:  // pred: ^bb18
    %c1_i32_45 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_45) : (i32) -> ()
    cf.br ^bb20
  ^bb22:  // 2 preds: ^bb20, ^bb23
    %112 = llvm.getelementptr %8[%106] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %104, %112 {alignment = 1 : i64} : i64, !llvm.ptr
    %113 = llvm.load %3 : !llvm.ptr -> i32
    %c80_i32_46 = arith.constant 80 : i32
    %114 = arith.addi %113, %c80_i32_46 : i32
    llvm.store %114, %5 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb23:  // pred: ^bb20
    %c1_i32_47 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_47) : (i32) -> ()
    cf.br ^bb22
  }
  func.func @f13(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %5 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %7[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %10 = llvm.load %6 : !llvm.ptr -> i32
    %c160_i32 = arith.constant 160 : i32
    %11 = arith.subi %10, %c160_i32 : i32
    llvm.store %11, %3 : i32, !llvm.ptr
    llvm.store %11, %6 : i32, !llvm.ptr
    %12 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %13 = arith.addi %12, %c4_i32 : i32
    %14 = llvm.load %1 : !llvm.ptr -> i32
    %15 = llvm.load %2 : !llvm.ptr -> i32
    call @f25(%arg0, %13, %14, %15) : (!llvm.ptr, i32, i32, i32) -> ()
    %16 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %17 = arith.extui %16 : i32 to i64
    %18 = arith.addi %17, %c4_i64 : i64
    %c1_i64 = arith.constant 1 : i64
    %19 = arith.addi %18, %c1_i64 : i64
    %c0_i32_4 = arith.constant 0 : i32
    %20 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_4) : (!llvm.ptr, i32) -> i32
    %21 = arith.extui %20 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %22 = arith.muli %21, %c65536_i64 : i64
    %23 = arith.cmpi ult, %19, %22 : i64
    cf.cond_br %23, ^bb5, ^bb6
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb34, ^bb48
    %24 = llvm.load %3 : !llvm.ptr -> i32
    %c160_i32_5 = arith.constant 160 : i32
    %25 = arith.addi %24, %c160_i32_5 : i32
    llvm.store %25, %6 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb5
    %26 = llvm.load %0 : !llvm.ptr -> i32
    %27 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %28 = arith.extui %27 : i32 to i64
    %29 = arith.addi %28, %c8_i64 : i64
    %c8_i64_6 = arith.constant 8 : i64
    %30 = arith.addi %29, %c8_i64_6 : i64
    %c0_i32_7 = arith.constant 0 : i32
    %31 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_7) : (!llvm.ptr, i32) -> i32
    %32 = arith.extui %31 : i32 to i64
    %c65536_i64_8 = arith.constant 65536 : i64
    %33 = arith.muli %32, %c65536_i64_8 : i64
    %34 = arith.cmpi ult, %30, %33 : i64
    cf.cond_br %34, ^bb36, ^bb37
  ^bb5:  // 2 preds: ^bb1, ^bb6
    %35 = llvm.getelementptr %9[%18] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %36 = llvm.load volatile %35 {alignment = 1 : i64} : !llvm.ptr -> i8
    %37 = arith.extui %36 : i8 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %38 = arith.cmpi ne, %37, %c0_i32_9 : i32
    cf.cond_br %38, ^bb4, ^bb7
  ^bb6:  // pred: ^bb1
    %c1_i32_10 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_10) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // pred: ^bb5
    %39 = llvm.load %3 : !llvm.ptr -> i32
    %c72_i32 = arith.constant 72 : i32
    %40 = arith.addi %39, %c72_i32 : i32
    %41 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32_11 = arith.constant 4 : i32
    %42 = arith.addi %41, %c4_i32_11 : i32
    %c1_i32_12 = arith.constant 1 : i32
    %43 = arith.ori %42, %c1_i32_12 : i32
    llvm.store %43, %4 : i32, !llvm.ptr
    %c64_i32 = arith.constant 64 : i32
    %44 = call @f161(%arg0, %40, %43, %c64_i32) : (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_13 = arith.constant 0 : i32
    llvm.store %c0_i32_13, %2 : i32, !llvm.ptr
    cf.br ^bb12
  ^bb8:  // 2 preds: ^bb10, ^bb32
    %45 = llvm.load %0 : !llvm.ptr -> i32
    %46 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %47 = arith.extui %45 : i32 to i64
    %48 = arith.addi %47, %c0_i64 : i64
    %c4_i64_14 = arith.constant 4 : i64
    %49 = arith.addi %48, %c4_i64_14 : i64
    %c0_i32_15 = arith.constant 0 : i32
    %50 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_15) : (!llvm.ptr, i32) -> i32
    %51 = arith.extui %50 : i32 to i64
    %c65536_i64_16 = arith.constant 65536 : i64
    %52 = arith.muli %51, %c65536_i64_16 : i64
    %53 = arith.cmpi ult, %49, %52 : i64
    cf.cond_br %53, ^bb34, ^bb35
  ^bb9:  // pred: ^bb17
    %54 = llvm.load %0 : !llvm.ptr -> i32
    %55 = llvm.load %3 : !llvm.ptr -> i32
    %c140_i64 = arith.constant 140 : i64
    %56 = arith.extui %55 : i32 to i64
    %57 = arith.addi %56, %c140_i64 : i64
    %c8_i64_17 = arith.constant 8 : i64
    %58 = arith.addi %57, %c8_i64_17 : i64
    %c0_i32_18 = arith.constant 0 : i32
    %59 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_18) : (!llvm.ptr, i32) -> i32
    %60 = arith.extui %59 : i32 to i64
    %c65536_i64_19 = arith.constant 65536 : i64
    %61 = arith.muli %60, %c65536_i64_19 : i64
    %62 = arith.cmpi ult, %58, %61 : i64
    cf.cond_br %62, ^bb20, ^bb21
  ^bb10:  // 2 preds: ^bb12, ^bb19
    %63 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %64 = arith.addi %63, %c8_i32 : i32
    %65 = llvm.load %4 : !llvm.ptr -> i32
    call @f27(%arg0, %64, %65) : (!llvm.ptr, i32, i32) -> ()
    %c0_i32_20 = arith.constant 0 : i32
    llvm.store %c0_i32_20, %2 : i32, !llvm.ptr
    cf.br ^bb8
  ^bb11:  // pred: ^bb16
    %66 = llvm.load %3 : !llvm.ptr -> i32
    %c136_i32 = arith.constant 136 : i32
    %67 = arith.addi %66, %c136_i32 : i32
    %68 = llvm.load %4 : !llvm.ptr -> i32
    call @f26(%arg0, %67, %68) : (!llvm.ptr, i32, i32) -> ()
    %69 = llvm.load %3 : !llvm.ptr -> i32
    %c136_i64 = arith.constant 136 : i64
    %70 = arith.extui %69 : i32 to i64
    %71 = arith.addi %70, %c136_i64 : i64
    %c4_i64_21 = arith.constant 4 : i64
    %72 = arith.addi %71, %c4_i64_21 : i64
    %c0_i32_22 = arith.constant 0 : i32
    %73 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_22) : (!llvm.ptr, i32) -> i32
    %74 = arith.extui %73 : i32 to i64
    %c65536_i64_23 = arith.constant 65536 : i64
    %75 = arith.muli %74, %c65536_i64_23 : i64
    %76 = arith.cmpi ult, %72, %75 : i64
    cf.cond_br %76, ^bb17, ^bb18
  ^bb12:  // 2 preds: ^bb7, ^bb14
    %77 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %78 = arith.cmpi eq, %77, %c12_i32 : i32
    %79 = arith.extui %78 : i1 to i32
    %c0_i32_24 = arith.constant 0 : i32
    %80 = arith.cmpi ne, %79, %c0_i32_24 : i32
    cf.cond_br %80, ^bb10, ^bb13
  ^bb13:  // pred: ^bb12
    %81 = llvm.load %3 : !llvm.ptr -> i32
    %c72_i32_25 = arith.constant 72 : i32
    %82 = arith.addi %81, %c72_i32_25 : i32
    %83 = llvm.load %2 : !llvm.ptr -> i32
    %84 = arith.addi %82, %83 : i32
    llvm.store %84, %1 : i32, !llvm.ptr
    %85 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_26 = arith.constant 1 : i32
    %86 = arith.addi %85, %c1_i32_26 : i32
    llvm.store %86, %2 : i32, !llvm.ptr
    %87 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_27 = arith.constant 0 : i64
    %88 = arith.extui %87 : i32 to i64
    %89 = arith.addi %88, %c0_i64_27 : i64
    %c1_i64_28 = arith.constant 1 : i64
    %90 = arith.addi %89, %c1_i64_28 : i64
    %c0_i32_29 = arith.constant 0 : i32
    %91 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_29) : (!llvm.ptr, i32) -> i32
    %92 = arith.extui %91 : i32 to i64
    %c65536_i64_30 = arith.constant 65536 : i64
    %93 = arith.muli %92, %c65536_i64_30 : i64
    %94 = arith.cmpi ult, %90, %93 : i64
    cf.cond_br %94, ^bb14, ^bb15
  ^bb14:  // 2 preds: ^bb13, ^bb15
    %95 = llvm.getelementptr %9[%89] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %96 = llvm.load volatile %95 {alignment = 1 : i64} : !llvm.ptr -> i8
    %97 = arith.extui %96 : i8 to i32
    %c0_i32_31 = arith.constant 0 : i32
    %98 = arith.cmpi eq, %97, %c0_i32_31 : i32
    %99 = arith.extui %98 : i1 to i32
    %c0_i32_32 = arith.constant 0 : i32
    %100 = arith.cmpi ne, %99, %c0_i32_32 : i32
    cf.cond_br %100, ^bb12, ^bb16
  ^bb15:  // pred: ^bb13
    %c1_i32_33 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_33) : (i32) -> ()
    cf.br ^bb14
  ^bb16:  // pred: ^bb14
    cf.br ^bb11
  ^bb17:  // 2 preds: ^bb11, ^bb18
    %101 = llvm.getelementptr %9[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %102 = llvm.load volatile %101 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %102, %2 : i32, !llvm.ptr
    %c-2147483638_i32 = arith.constant -2147483638 : i32
    %103 = arith.cmpi eq, %102, %c-2147483638_i32 : i32
    %104 = arith.extui %103 : i1 to i32
    %c0_i32_34 = arith.constant 0 : i32
    %105 = arith.cmpi eq, %104, %c0_i32_34 : i32
    %106 = arith.extui %105 : i1 to i32
    %c0_i32_35 = arith.constant 0 : i32
    %107 = arith.cmpi ne, %106, %c0_i32_35 : i32
    cf.cond_br %107, ^bb9, ^bb19
  ^bb18:  // pred: ^bb11
    %c1_i32_36 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_36) : (i32) -> ()
    cf.br ^bb17
  ^bb19:  // pred: ^bb17
    cf.br ^bb10
  ^bb20:  // 2 preds: ^bb9, ^bb21
    %108 = llvm.getelementptr %9[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %109 = llvm.load volatile %108 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c8_i64_37 = arith.constant 8 : i64
    %110 = arith.extui %54 : i32 to i64
    %111 = arith.addi %110, %c8_i64_37 : i64
    %c8_i64_38 = arith.constant 8 : i64
    %112 = arith.addi %111, %c8_i64_38 : i64
    %c0_i32_39 = arith.constant 0 : i32
    %113 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_39) : (!llvm.ptr, i32) -> i32
    %114 = arith.extui %113 : i32 to i64
    %c65536_i64_40 = arith.constant 65536 : i64
    %115 = arith.muli %114, %c65536_i64_40 : i64
    %116 = arith.cmpi ult, %112, %115 : i64
    cf.cond_br %116, ^bb22, ^bb23
  ^bb21:  // pred: ^bb9
    %c1_i32_41 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_41) : (i32) -> ()
    cf.br ^bb20
  ^bb22:  // 2 preds: ^bb20, ^bb23
    %117 = llvm.getelementptr %9[%111] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %109, %117 {alignment = 1 : i64} : i64, !llvm.ptr
    %118 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %119 = arith.addi %118, %c24_i32 : i32
    %120 = llvm.load %3 : !llvm.ptr -> i32
    %c156_i32 = arith.constant 156 : i32
    %121 = arith.addi %120, %c156_i32 : i32
    %c0_i64_42 = arith.constant 0 : i64
    %122 = arith.extui %121 : i32 to i64
    %123 = arith.addi %122, %c0_i64_42 : i64
    %c4_i64_43 = arith.constant 4 : i64
    %124 = arith.addi %123, %c4_i64_43 : i64
    %c0_i32_44 = arith.constant 0 : i32
    %125 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_44) : (!llvm.ptr, i32) -> i32
    %126 = arith.extui %125 : i32 to i64
    %c65536_i64_45 = arith.constant 65536 : i64
    %127 = arith.muli %126, %c65536_i64_45 : i64
    %128 = arith.cmpi ult, %124, %127 : i64
    cf.cond_br %128, ^bb24, ^bb25
  ^bb23:  // pred: ^bb20
    %c1_i32_46 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_46) : (i32) -> ()
    cf.br ^bb22
  ^bb24:  // 2 preds: ^bb22, ^bb25
    %129 = llvm.getelementptr %9[%123] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %130 = llvm.load volatile %129 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_47 = arith.constant 0 : i64
    %131 = arith.extui %119 : i32 to i64
    %132 = arith.addi %131, %c0_i64_47 : i64
    %c4_i64_48 = arith.constant 4 : i64
    %133 = arith.addi %132, %c4_i64_48 : i64
    %c0_i32_49 = arith.constant 0 : i32
    %134 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_49) : (!llvm.ptr, i32) -> i32
    %135 = arith.extui %134 : i32 to i64
    %c65536_i64_50 = arith.constant 65536 : i64
    %136 = arith.muli %135, %c65536_i64_50 : i64
    %137 = arith.cmpi ult, %133, %136 : i64
    cf.cond_br %137, ^bb26, ^bb27
  ^bb25:  // pred: ^bb22
    %c1_i32_51 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_51) : (i32) -> ()
    cf.br ^bb24
  ^bb26:  // 2 preds: ^bb24, ^bb27
    %138 = llvm.getelementptr %9[%132] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %130, %138 {alignment = 1 : i64} : i32, !llvm.ptr
    %139 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %140 = arith.addi %139, %c16_i32 : i32
    %141 = llvm.load %3 : !llvm.ptr -> i32
    %c148_i32 = arith.constant 148 : i32
    %142 = arith.addi %141, %c148_i32 : i32
    %c0_i64_52 = arith.constant 0 : i64
    %143 = arith.extui %142 : i32 to i64
    %144 = arith.addi %143, %c0_i64_52 : i64
    %c8_i64_53 = arith.constant 8 : i64
    %145 = arith.addi %144, %c8_i64_53 : i64
    %c0_i32_54 = arith.constant 0 : i32
    %146 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_54) : (!llvm.ptr, i32) -> i32
    %147 = arith.extui %146 : i32 to i64
    %c65536_i64_55 = arith.constant 65536 : i64
    %148 = arith.muli %147, %c65536_i64_55 : i64
    %149 = arith.cmpi ult, %145, %148 : i64
    cf.cond_br %149, ^bb28, ^bb29
  ^bb27:  // pred: ^bb24
    %c1_i32_56 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_56) : (i32) -> ()
    cf.br ^bb26
  ^bb28:  // 2 preds: ^bb26, ^bb29
    %150 = llvm.getelementptr %9[%144] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %151 = llvm.load volatile %150 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_57 = arith.constant 0 : i64
    %152 = arith.extui %140 : i32 to i64
    %153 = arith.addi %152, %c0_i64_57 : i64
    %c8_i64_58 = arith.constant 8 : i64
    %154 = arith.addi %153, %c8_i64_58 : i64
    %c0_i32_59 = arith.constant 0 : i32
    %155 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_59) : (!llvm.ptr, i32) -> i32
    %156 = arith.extui %155 : i32 to i64
    %c65536_i64_60 = arith.constant 65536 : i64
    %157 = arith.muli %156, %c65536_i64_60 : i64
    %158 = arith.cmpi ult, %154, %157 : i64
    cf.cond_br %158, ^bb30, ^bb31
  ^bb29:  // pred: ^bb26
    %c1_i32_61 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_61) : (i32) -> ()
    cf.br ^bb28
  ^bb30:  // 2 preds: ^bb28, ^bb31
    %159 = llvm.getelementptr %9[%153] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %151, %159 {alignment = 1 : i64} : i64, !llvm.ptr
    %160 = llvm.load %0 : !llvm.ptr -> i32
    %161 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_62 = arith.constant 4 : i64
    %162 = arith.extui %160 : i32 to i64
    %163 = arith.addi %162, %c4_i64_62 : i64
    %c4_i64_63 = arith.constant 4 : i64
    %164 = arith.addi %163, %c4_i64_63 : i64
    %c0_i32_64 = arith.constant 0 : i32
    %165 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_64) : (!llvm.ptr, i32) -> i32
    %166 = arith.extui %165 : i32 to i64
    %c65536_i64_65 = arith.constant 65536 : i64
    %167 = arith.muli %166, %c65536_i64_65 : i64
    %168 = arith.cmpi ult, %164, %167 : i64
    cf.cond_br %168, ^bb32, ^bb33
  ^bb31:  // pred: ^bb28
    %c1_i32_66 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_66) : (i32) -> ()
    cf.br ^bb30
  ^bb32:  // 2 preds: ^bb30, ^bb33
    %169 = llvm.getelementptr %9[%163] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %161, %169 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i32_67 = arith.constant 1 : i32
    llvm.store %c1_i32_67, %2 : i32, !llvm.ptr
    cf.br ^bb8
  ^bb33:  // pred: ^bb30
    %c1_i32_68 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_68) : (i32) -> ()
    cf.br ^bb32
  ^bb34:  // 2 preds: ^bb8, ^bb35
    %170 = llvm.getelementptr %9[%48] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %46, %170 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb3
  ^bb35:  // pred: ^bb8
    %c1_i32_69 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_69) : (i32) -> ()
    cf.br ^bb34
  ^bb36:  // 2 preds: ^bb4, ^bb37
    %171 = llvm.getelementptr %9[%29] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %172 = llvm.load volatile %171 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c4_i64_70 = arith.constant 4 : i64
    %173 = arith.extui %26 : i32 to i64
    %174 = arith.addi %173, %c4_i64_70 : i64
    %c8_i64_71 = arith.constant 8 : i64
    %175 = arith.addi %174, %c8_i64_71 : i64
    %c0_i32_72 = arith.constant 0 : i32
    %176 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_72) : (!llvm.ptr, i32) -> i32
    %177 = arith.extui %176 : i32 to i64
    %c65536_i64_73 = arith.constant 65536 : i64
    %178 = arith.muli %177, %c65536_i64_73 : i64
    %179 = arith.cmpi ult, %175, %178 : i64
    cf.cond_br %179, ^bb38, ^bb39
  ^bb37:  // pred: ^bb4
    %c1_i32_74 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_74) : (i32) -> ()
    cf.br ^bb36
  ^bb38:  // 2 preds: ^bb36, ^bb39
    %180 = llvm.getelementptr %9[%174] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %172, %180 {alignment = 1 : i64} : i64, !llvm.ptr
    %181 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_75 = arith.constant 1 : i32
    %c0_i64_76 = arith.constant 0 : i64
    %182 = arith.extui %181 : i32 to i64
    %183 = arith.addi %182, %c0_i64_76 : i64
    %c4_i64_77 = arith.constant 4 : i64
    %184 = arith.addi %183, %c4_i64_77 : i64
    %c0_i32_78 = arith.constant 0 : i32
    %185 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_78) : (!llvm.ptr, i32) -> i32
    %186 = arith.extui %185 : i32 to i64
    %c65536_i64_79 = arith.constant 65536 : i64
    %187 = arith.muli %186, %c65536_i64_79 : i64
    %188 = arith.cmpi ult, %184, %187 : i64
    cf.cond_br %188, ^bb40, ^bb41
  ^bb39:  // pred: ^bb36
    %c1_i32_80 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_80) : (i32) -> ()
    cf.br ^bb38
  ^bb40:  // 2 preds: ^bb38, ^bb41
    %189 = llvm.getelementptr %9[%183] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_75, %189 {alignment = 1 : i64} : i32, !llvm.ptr
    %190 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i32 = arith.constant 20 : i32
    %191 = arith.addi %190, %c20_i32 : i32
    %192 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32_81 = arith.constant 4 : i32
    %193 = arith.addi %192, %c4_i32_81 : i32
    %c20_i32_82 = arith.constant 20 : i32
    %194 = arith.addi %193, %c20_i32_82 : i32
    %c0_i64_83 = arith.constant 0 : i64
    %195 = arith.extui %194 : i32 to i64
    %196 = arith.addi %195, %c0_i64_83 : i64
    %c8_i64_84 = arith.constant 8 : i64
    %197 = arith.addi %196, %c8_i64_84 : i64
    %c0_i32_85 = arith.constant 0 : i32
    %198 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_85) : (!llvm.ptr, i32) -> i32
    %199 = arith.extui %198 : i32 to i64
    %c65536_i64_86 = arith.constant 65536 : i64
    %200 = arith.muli %199, %c65536_i64_86 : i64
    %201 = arith.cmpi ult, %197, %200 : i64
    cf.cond_br %201, ^bb42, ^bb43
  ^bb41:  // pred: ^bb38
    %c1_i32_87 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_87) : (i32) -> ()
    cf.br ^bb40
  ^bb42:  // 2 preds: ^bb40, ^bb43
    %202 = llvm.getelementptr %9[%196] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %203 = llvm.load volatile %202 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_88 = arith.constant 0 : i64
    %204 = arith.extui %191 : i32 to i64
    %205 = arith.addi %204, %c0_i64_88 : i64
    %c8_i64_89 = arith.constant 8 : i64
    %206 = arith.addi %205, %c8_i64_89 : i64
    %c0_i32_90 = arith.constant 0 : i32
    %207 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_90) : (!llvm.ptr, i32) -> i32
    %208 = arith.extui %207 : i32 to i64
    %c65536_i64_91 = arith.constant 65536 : i64
    %209 = arith.muli %208, %c65536_i64_91 : i64
    %210 = arith.cmpi ult, %206, %209 : i64
    cf.cond_br %210, ^bb44, ^bb45
  ^bb43:  // pred: ^bb40
    %c1_i32_92 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_92) : (i32) -> ()
    cf.br ^bb42
  ^bb44:  // 2 preds: ^bb42, ^bb45
    %211 = llvm.getelementptr %9[%205] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %203, %211 {alignment = 1 : i64} : i64, !llvm.ptr
    %212 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i32_93 = arith.constant 12 : i32
    %213 = arith.addi %212, %c12_i32_93 : i32
    %214 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32_94 = arith.constant 4 : i32
    %215 = arith.addi %214, %c4_i32_94 : i32
    %c12_i32_95 = arith.constant 12 : i32
    %216 = arith.addi %215, %c12_i32_95 : i32
    %c0_i64_96 = arith.constant 0 : i64
    %217 = arith.extui %216 : i32 to i64
    %218 = arith.addi %217, %c0_i64_96 : i64
    %c8_i64_97 = arith.constant 8 : i64
    %219 = arith.addi %218, %c8_i64_97 : i64
    %c0_i32_98 = arith.constant 0 : i32
    %220 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_98) : (!llvm.ptr, i32) -> i32
    %221 = arith.extui %220 : i32 to i64
    %c65536_i64_99 = arith.constant 65536 : i64
    %222 = arith.muli %221, %c65536_i64_99 : i64
    %223 = arith.cmpi ult, %219, %222 : i64
    cf.cond_br %223, ^bb46, ^bb47
  ^bb45:  // pred: ^bb42
    %c1_i32_100 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_100) : (i32) -> ()
    cf.br ^bb44
  ^bb46:  // 2 preds: ^bb44, ^bb47
    %224 = llvm.getelementptr %9[%218] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %225 = llvm.load volatile %224 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_101 = arith.constant 0 : i64
    %226 = arith.extui %213 : i32 to i64
    %227 = arith.addi %226, %c0_i64_101 : i64
    %c8_i64_102 = arith.constant 8 : i64
    %228 = arith.addi %227, %c8_i64_102 : i64
    %c0_i32_103 = arith.constant 0 : i32
    %229 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_103) : (!llvm.ptr, i32) -> i32
    %230 = arith.extui %229 : i32 to i64
    %c65536_i64_104 = arith.constant 65536 : i64
    %231 = arith.muli %230, %c65536_i64_104 : i64
    %232 = arith.cmpi ult, %228, %231 : i64
    cf.cond_br %232, ^bb48, ^bb49
  ^bb47:  // pred: ^bb44
    %c1_i32_105 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_105) : (i32) -> ()
    cf.br ^bb46
  ^bb48:  // 2 preds: ^bb46, ^bb49
    %233 = llvm.getelementptr %9[%227] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %225, %233 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb3
  ^bb49:  // pred: ^bb46
    %c1_i32_106 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_106) : (i32) -> ()
    cf.br ^bb48
  }
  func.func @f14(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %5 : i64, !llvm.ptr
    %6 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %11 = llvm.load %7 : !llvm.ptr -> i32
    %c144_i32 = arith.constant 144 : i32
    %12 = arith.subi %11, %c144_i32 : i32
    llvm.store %12, %4 : i32, !llvm.ptr
    llvm.store %12, %7 : i32, !llvm.ptr
    %13 = llvm.load %4 : !llvm.ptr -> i32
    %c124_i32 = arith.constant 124 : i32
    %14 = arith.addi %13, %c124_i32 : i32
    call @f81(%arg0, %14) : (!llvm.ptr, i32) -> ()
    %15 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %16 = arith.addi %15, %c8_i32 : i32
    %17 = llvm.load %1 : !llvm.ptr -> i32
    %18 = llvm.load %4 : !llvm.ptr -> i32
    %c124_i32_5 = arith.constant 124 : i32
    %19 = arith.addi %18, %c124_i32_5 : i32
    %20 = llvm.load %2 : !llvm.ptr -> i32
    %21 = llvm.load %3 : !llvm.ptr -> i32
    call @f49(%arg0, %16, %17, %19, %20, %21) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %22 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_6 = arith.constant 8 : i32
    %23 = arith.addi %22, %c8_i32_6 : i32
    llvm.store %23, %3 : i32, !llvm.ptr
    %24 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %25 = arith.extui %24 : i32 to i64
    %26 = arith.addi %25, %c8_i64 : i64
    %c8_i64_7 = arith.constant 8 : i64
    %27 = arith.addi %26, %c8_i64_7 : i64
    %c0_i32_8 = arith.constant 0 : i32
    %28 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_8) : (!llvm.ptr, i32) -> i32
    %29 = arith.extui %28 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %30 = arith.muli %29, %c65536_i64 : i64
    %31 = arith.cmpi ult, %27, %30 : i64
    cf.cond_br %31, ^bb5, ^bb6
  ^bb2:  // pred: ^bb10
    return
  ^bb3:  // 2 preds: ^bb4, ^bb8
    %32 = llvm.load %0 : !llvm.ptr -> i32
    %33 = llvm.load %5 : !llvm.ptr -> i64
    %c0_i64_9 = arith.constant 0 : i64
    %34 = arith.extui %32 : i32 to i64
    %35 = arith.addi %34, %c0_i64_9 : i64
    %c8_i64_10 = arith.constant 8 : i64
    %36 = arith.addi %35, %c8_i64_10 : i64
    %c0_i32_11 = arith.constant 0 : i32
    %37 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_11) : (!llvm.ptr, i32) -> i32
    %38 = arith.extui %37 : i32 to i64
    %c65536_i64_12 = arith.constant 65536 : i64
    %39 = arith.muli %38, %c65536_i64_12 : i64
    %40 = arith.cmpi ult, %36, %39 : i64
    cf.cond_br %40, ^bb10, ^bb11
  ^bb4:  // pred: ^bb5
    %41 = llvm.load %3 : !llvm.ptr -> i32
    %42 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i32_13 = arith.constant 8 : i32
    %43 = arith.addi %42, %c8_i32_13 : i32
    %c8_i32_14 = arith.constant 8 : i32
    %44 = arith.addi %43, %c8_i32_14 : i32
    %c104_i32 = arith.constant 104 : i32
    %45 = call @f161(%arg0, %41, %44, %c104_i32) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb1, ^bb6
    %46 = llvm.getelementptr %10[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %47 = llvm.load volatile %46 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %47, %5 : i64, !llvm.ptr
    %c2_i64 = arith.constant 2 : i64
    %48 = arith.cmpi eq, %47, %c2_i64 : i64
    %49 = arith.extui %48 : i1 to i32
    %c0_i32_15 = arith.constant 0 : i32
    %50 = arith.cmpi eq, %49, %c0_i32_15 : i32
    %51 = arith.extui %50 : i1 to i32
    %c0_i32_16 = arith.constant 0 : i32
    %52 = arith.cmpi ne, %51, %c0_i32_16 : i32
    cf.cond_br %52, ^bb4, ^bb7
  ^bb6:  // pred: ^bb1
    %c1_i32_17 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_17) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // pred: ^bb5
    %53 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_18 = arith.constant 1 : i32
    %c0_i64_19 = arith.constant 0 : i64
    %54 = arith.extui %53 : i32 to i64
    %55 = arith.addi %54, %c0_i64_19 : i64
    %c1_i64 = arith.constant 1 : i64
    %56 = arith.addi %55, %c1_i64 : i64
    %c0_i32_20 = arith.constant 0 : i32
    %57 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_20) : (!llvm.ptr, i32) -> i32
    %58 = arith.extui %57 : i32 to i64
    %c65536_i64_21 = arith.constant 65536 : i64
    %59 = arith.muli %58, %c65536_i64_21 : i64
    %60 = arith.cmpi ult, %56, %59 : i64
    cf.cond_br %60, ^bb8, ^bb9
  ^bb8:  // 2 preds: ^bb7, ^bb9
    %61 = llvm.getelementptr %10[%55] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %62 = arith.trunci %c1_i32_18 : i32 to i8
    llvm.store volatile %62, %61 {alignment = 1 : i64} : i8, !llvm.ptr
    cf.br ^bb3
  ^bb9:  // pred: ^bb7
    %c1_i32_22 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_22) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // 2 preds: ^bb3, ^bb11
    %63 = llvm.getelementptr %10[%35] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %33, %63 {alignment = 1 : i64} : i64, !llvm.ptr
    %64 = llvm.load %4 : !llvm.ptr -> i32
    %c144_i32_23 = arith.constant 144 : i32
    %65 = arith.addi %64, %c144_i32_23 : i32
    llvm.store %65, %7 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb11:  // pred: ^bb3
    %c1_i32_24 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_24) : (i32) -> ()
    cf.br ^bb10
  }
  func.func @f15(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %8 : i64, !llvm.ptr
    %9 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %14 = llvm.load %10 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %15 = arith.subi %14, %c64_i32 : i32
    llvm.store %15, %2 : i32, !llvm.ptr
    llvm.store %15, %10 : i32, !llvm.ptr
    %16 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %17 = arith.addi %16, %c24_i32 : i32
    %c1_i32_8 = arith.constant 1 : i32
    %c0_i32_9 = arith.constant 0 : i32
    %c1_i32_10 = arith.constant 1 : i32
    %c32_i32 = arith.constant 32 : i32
    call @f111(%arg0, %17, %c1_i32_8, %c0_i32_9, %c1_i32_10, %c32_i32) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %18 = llvm.load %2 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %19 = arith.extui %18 : i32 to i64
    %20 = arith.addi %19, %c28_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %21 = arith.addi %20, %c4_i64 : i64
    %c0_i32_11 = arith.constant 0 : i32
    %22 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_11) : (!llvm.ptr, i32) -> i32
    %23 = arith.extui %22 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %24 = arith.muli %23, %c65536_i64 : i64
    %25 = arith.cmpi ult, %21, %24 : i64
    cf.cond_br %25, ^bb3, ^bb4
  ^bb2:  // pred: ^bb47
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %26 = llvm.getelementptr %13[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %27 = llvm.load volatile %26 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %27, %3 : i32, !llvm.ptr
    %28 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %29 = arith.extui %28 : i32 to i64
    %30 = arith.addi %29, %c24_i64 : i64
    %c4_i64_12 = arith.constant 4 : i64
    %31 = arith.addi %30, %c4_i64_12 : i64
    %c0_i32_13 = arith.constant 0 : i32
    %32 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_13) : (!llvm.ptr, i32) -> i32
    %33 = arith.extui %32 : i32 to i64
    %c65536_i64_14 = arith.constant 65536 : i64
    %34 = arith.muli %33, %c65536_i64_14 : i64
    %35 = arith.cmpi ult, %31, %34 : i64
    cf.cond_br %35, ^bb7, ^bb8
  ^bb4:  // pred: ^bb1
    %c1_i32_15 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_15) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // pred: ^bb14
    %36 = llvm.load %5 : !llvm.ptr -> i32
    %37 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i64 = arith.constant 32 : i64
    %38 = arith.extui %37 : i32 to i64
    %39 = arith.addi %38, %c32_i64 : i64
    %c4_i64_16 = arith.constant 4 : i64
    %40 = arith.addi %39, %c4_i64_16 : i64
    %c0_i32_17 = arith.constant 0 : i32
    %41 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_17) : (!llvm.ptr, i32) -> i32
    %42 = arith.extui %41 : i32 to i64
    %c65536_i64_18 = arith.constant 65536 : i64
    %43 = arith.muli %42, %c65536_i64_18 : i64
    %44 = arith.cmpi ult, %40, %43 : i64
    cf.cond_br %44, ^bb51, ^bb52
  ^bb6:  // pred: ^bb7
    %45 = llvm.load %3 : !llvm.ptr -> i32
    %46 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i64_19 = arith.constant 32 : i64
    %47 = arith.extui %46 : i32 to i64
    %48 = arith.addi %47, %c32_i64_19 : i64
    %c4_i64_20 = arith.constant 4 : i64
    %49 = arith.addi %48, %c4_i64_20 : i64
    %c0_i32_21 = arith.constant 0 : i32
    %50 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_21) : (!llvm.ptr, i32) -> i32
    %51 = arith.extui %50 : i32 to i64
    %c65536_i64_22 = arith.constant 65536 : i64
    %52 = arith.muli %51, %c65536_i64_22 : i64
    %53 = arith.cmpi ult, %49, %52 : i64
    cf.cond_br %53, ^bb49, ^bb50
  ^bb7:  // 2 preds: ^bb3, ^bb8
    %54 = llvm.getelementptr %13[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %55 = llvm.load volatile %54 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_23 = arith.constant 1 : i32
    %56 = arith.cmpi eq, %55, %c1_i32_23 : i32
    %57 = arith.extui %56 : i1 to i32
    %c0_i32_24 = arith.constant 0 : i32
    %58 = arith.cmpi ne, %57, %c0_i32_24 : i32
    cf.cond_br %58, ^bb6, ^bb9
  ^bb8:  // pred: ^bb3
    %c1_i32_25 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_25) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // pred: ^bb7
    %59 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i64_26 = arith.constant 32 : i64
    %60 = arith.extui %59 : i32 to i64
    %61 = arith.addi %60, %c32_i64_26 : i64
    %c4_i64_27 = arith.constant 4 : i64
    %62 = arith.addi %61, %c4_i64_27 : i64
    %c0_i32_28 = arith.constant 0 : i32
    %63 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_28) : (!llvm.ptr, i32) -> i32
    %64 = arith.extui %63 : i32 to i64
    %c65536_i64_29 = arith.constant 65536 : i64
    %65 = arith.muli %64, %c65536_i64_29 : i64
    %66 = arith.cmpi ult, %62, %65 : i64
    cf.cond_br %66, ^bb10, ^bb11
  ^bb10:  // 2 preds: ^bb9, ^bb11
    %67 = llvm.getelementptr %13[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %68 = llvm.load volatile %67 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %68, %4 : i32, !llvm.ptr
    %69 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_30 = arith.constant 24 : i32
    %70 = arith.addi %69, %c24_i32_30 : i32
    %c4_i32 = arith.constant 4 : i32
    %c0_i32_31 = arith.constant 0 : i32
    %c4_i32_32 = arith.constant 4 : i32
    %c4_i32_33 = arith.constant 4 : i32
    call @f111(%arg0, %70, %c4_i32, %c0_i32_31, %c4_i32_32, %c4_i32_33) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %71 = llvm.load %2 : !llvm.ptr -> i32
    %c28_i64_34 = arith.constant 28 : i64
    %72 = arith.extui %71 : i32 to i64
    %73 = arith.addi %72, %c28_i64_34 : i64
    %c4_i64_35 = arith.constant 4 : i64
    %74 = arith.addi %73, %c4_i64_35 : i64
    %c0_i32_36 = arith.constant 0 : i32
    %75 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_36) : (!llvm.ptr, i32) -> i32
    %76 = arith.extui %75 : i32 to i64
    %c65536_i64_37 = arith.constant 65536 : i64
    %77 = arith.muli %76, %c65536_i64_37 : i64
    %78 = arith.cmpi ult, %74, %77 : i64
    cf.cond_br %78, ^bb12, ^bb13
  ^bb11:  // pred: ^bb9
    %c1_i32_38 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_38) : (i32) -> ()
    cf.br ^bb10
  ^bb12:  // 2 preds: ^bb10, ^bb13
    %79 = llvm.getelementptr %13[%73] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %80 = llvm.load volatile %79 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %80, %5 : i32, !llvm.ptr
    %81 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i64_39 = arith.constant 24 : i64
    %82 = arith.extui %81 : i32 to i64
    %83 = arith.addi %82, %c24_i64_39 : i64
    %c4_i64_40 = arith.constant 4 : i64
    %84 = arith.addi %83, %c4_i64_40 : i64
    %c0_i32_41 = arith.constant 0 : i32
    %85 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_41) : (!llvm.ptr, i32) -> i32
    %86 = arith.extui %85 : i32 to i64
    %c65536_i64_42 = arith.constant 65536 : i64
    %87 = arith.muli %86, %c65536_i64_42 : i64
    %88 = arith.cmpi ult, %84, %87 : i64
    cf.cond_br %88, ^bb14, ^bb15
  ^bb13:  // pred: ^bb10
    %c1_i32_43 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_43) : (i32) -> ()
    cf.br ^bb12
  ^bb14:  // 2 preds: ^bb12, ^bb15
    %89 = llvm.getelementptr %13[%83] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %90 = llvm.load volatile %89 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_44 = arith.constant 1 : i32
    %91 = arith.cmpi eq, %90, %c1_i32_44 : i32
    %92 = arith.extui %91 : i1 to i32
    %c0_i32_45 = arith.constant 0 : i32
    %93 = arith.cmpi ne, %92, %c0_i32_45 : i32
    cf.cond_br %93, ^bb5, ^bb16
  ^bb15:  // pred: ^bb12
    %c1_i32_46 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_46) : (i32) -> ()
    cf.br ^bb14
  ^bb16:  // pred: ^bb14
    %94 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %95 = arith.addi %94, %c16_i32 : i32
    llvm.store %95, %6 : i32, !llvm.ptr
    %96 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i64_47 = arith.constant 32 : i64
    %97 = arith.extui %96 : i32 to i64
    %98 = arith.addi %97, %c32_i64_47 : i64
    %c4_i64_48 = arith.constant 4 : i64
    %99 = arith.addi %98, %c4_i64_48 : i64
    %c0_i32_49 = arith.constant 0 : i32
    %100 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_49) : (!llvm.ptr, i32) -> i32
    %101 = arith.extui %100 : i32 to i64
    %c65536_i64_50 = arith.constant 65536 : i64
    %102 = arith.muli %101, %c65536_i64_50 : i64
    %103 = arith.cmpi ult, %99, %102 : i64
    cf.cond_br %103, ^bb17, ^bb18
  ^bb17:  // 2 preds: ^bb16, ^bb18
    %104 = llvm.getelementptr %13[%98] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %105 = llvm.load volatile %104 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_51 = arith.constant 0 : i64
    %106 = arith.extui %95 : i32 to i64
    %107 = arith.addi %106, %c0_i64_51 : i64
    %c4_i64_52 = arith.constant 4 : i64
    %108 = arith.addi %107, %c4_i64_52 : i64
    %c0_i32_53 = arith.constant 0 : i32
    %109 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_53) : (!llvm.ptr, i32) -> i32
    %110 = arith.extui %109 : i32 to i64
    %c65536_i64_54 = arith.constant 65536 : i64
    %111 = arith.muli %110, %c65536_i64_54 : i64
    %112 = arith.cmpi ult, %108, %111 : i64
    cf.cond_br %112, ^bb19, ^bb20
  ^bb18:  // pred: ^bb16
    %c1_i32_55 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_55) : (i32) -> ()
    cf.br ^bb17
  ^bb19:  // 2 preds: ^bb17, ^bb20
    %113 = llvm.getelementptr %13[%107] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %105, %113 {alignment = 1 : i64} : i32, !llvm.ptr
    %114 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %115 = arith.addi %114, %c8_i32 : i32
    llvm.store %115, %7 : i32, !llvm.ptr
    %c0_i32_56 = arith.constant 0 : i32
    %c0_i64_57 = arith.constant 0 : i64
    %116 = arith.extui %115 : i32 to i64
    %117 = arith.addi %116, %c0_i64_57 : i64
    %c4_i64_58 = arith.constant 4 : i64
    %118 = arith.addi %117, %c4_i64_58 : i64
    %c0_i32_59 = arith.constant 0 : i32
    %119 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_59) : (!llvm.ptr, i32) -> i32
    %120 = arith.extui %119 : i32 to i64
    %c65536_i64_60 = arith.constant 65536 : i64
    %121 = arith.muli %120, %c65536_i64_60 : i64
    %122 = arith.cmpi ult, %118, %121 : i64
    cf.cond_br %122, ^bb21, ^bb22
  ^bb20:  // pred: ^bb17
    %c1_i32_61 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_61) : (i32) -> ()
    cf.br ^bb19
  ^bb21:  // 2 preds: ^bb19, ^bb22
    %123 = llvm.getelementptr %13[%117] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_56, %123 {alignment = 1 : i64} : i32, !llvm.ptr
    %124 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_62 = arith.constant 0 : i32
    %c20_i64 = arith.constant 20 : i64
    %125 = arith.extui %124 : i32 to i64
    %126 = arith.addi %125, %c20_i64 : i64
    %c4_i64_63 = arith.constant 4 : i64
    %127 = arith.addi %126, %c4_i64_63 : i64
    %c0_i32_64 = arith.constant 0 : i32
    %128 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_64) : (!llvm.ptr, i32) -> i32
    %129 = arith.extui %128 : i32 to i64
    %c65536_i64_65 = arith.constant 65536 : i64
    %130 = arith.muli %129, %c65536_i64_65 : i64
    %131 = arith.cmpi ult, %127, %130 : i64
    cf.cond_br %131, ^bb23, ^bb24
  ^bb22:  // pred: ^bb19
    %c1_i32_66 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_66) : (i32) -> ()
    cf.br ^bb21
  ^bb23:  // 2 preds: ^bb21, ^bb24
    %132 = llvm.getelementptr %13[%126] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_62, %132 {alignment = 1 : i64} : i32, !llvm.ptr
    %133 = llvm.load %2 : !llvm.ptr -> i32
    %134 = llvm.load %5 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %135 = arith.extui %133 : i32 to i64
    %136 = arith.addi %135, %c12_i64 : i64
    %c4_i64_67 = arith.constant 4 : i64
    %137 = arith.addi %136, %c4_i64_67 : i64
    %c0_i32_68 = arith.constant 0 : i32
    %138 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_68) : (!llvm.ptr, i32) -> i32
    %139 = arith.extui %138 : i32 to i64
    %c65536_i64_69 = arith.constant 65536 : i64
    %140 = arith.muli %139, %c65536_i64_69 : i64
    %141 = arith.cmpi ult, %137, %140 : i64
    cf.cond_br %141, ^bb25, ^bb26
  ^bb24:  // pred: ^bb21
    %c1_i32_70 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_70) : (i32) -> ()
    cf.br ^bb23
  ^bb25:  // 2 preds: ^bb23, ^bb26
    %142 = llvm.getelementptr %13[%136] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %134, %142 {alignment = 1 : i64} : i32, !llvm.ptr
    %143 = llvm.load %2 : !llvm.ptr -> i32
    %144 = llvm.load %4 : !llvm.ptr -> i32
    %c4_i64_71 = arith.constant 4 : i64
    %145 = arith.extui %143 : i32 to i64
    %146 = arith.addi %145, %c4_i64_71 : i64
    %c4_i64_72 = arith.constant 4 : i64
    %147 = arith.addi %146, %c4_i64_72 : i64
    %c0_i32_73 = arith.constant 0 : i32
    %148 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_73) : (!llvm.ptr, i32) -> i32
    %149 = arith.extui %148 : i32 to i64
    %c65536_i64_74 = arith.constant 65536 : i64
    %150 = arith.muli %149, %c65536_i64_74 : i64
    %151 = arith.cmpi ult, %147, %150 : i64
    cf.cond_br %151, ^bb27, ^bb28
  ^bb26:  // pred: ^bb23
    %c1_i32_75 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_75) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // 2 preds: ^bb25, ^bb28
    %152 = llvm.getelementptr %13[%146] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %144, %152 {alignment = 1 : i64} : i32, !llvm.ptr
    %153 = llvm.load %2 : !llvm.ptr -> i32
    %154 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_76 = arith.constant 0 : i64
    %155 = arith.extui %153 : i32 to i64
    %156 = arith.addi %155, %c0_i64_76 : i64
    %c4_i64_77 = arith.constant 4 : i64
    %157 = arith.addi %156, %c4_i64_77 : i64
    %c0_i32_78 = arith.constant 0 : i32
    %158 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_78) : (!llvm.ptr, i32) -> i32
    %159 = arith.extui %158 : i32 to i64
    %c65536_i64_79 = arith.constant 65536 : i64
    %160 = arith.muli %159, %c65536_i64_79 : i64
    %161 = arith.cmpi ult, %157, %160 : i64
    cf.cond_br %161, ^bb29, ^bb30
  ^bb28:  // pred: ^bb25
    %c1_i32_80 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_80) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // 2 preds: ^bb27, ^bb30
    %162 = llvm.getelementptr %13[%156] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %154, %162 {alignment = 1 : i64} : i32, !llvm.ptr
    %163 = llvm.load %1 : !llvm.ptr -> i32
    %164 = llvm.load %2 : !llvm.ptr -> i32
    call @f97(%arg0, %163, %164) : (!llvm.ptr, i32, i32) -> ()
    %165 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_81 = arith.constant 24 : i32
    %166 = arith.addi %165, %c24_i32_81 : i32
    %c16_i32_82 = arith.constant 16 : i32
    %167 = arith.addi %166, %c16_i32_82 : i32
    %168 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_83 = arith.constant 0 : i64
    %169 = arith.extui %168 : i32 to i64
    %170 = arith.addi %169, %c0_i64_83 : i64
    %c8_i64 = arith.constant 8 : i64
    %171 = arith.addi %170, %c8_i64 : i64
    %c0_i32_84 = arith.constant 0 : i32
    %172 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_84) : (!llvm.ptr, i32) -> i32
    %173 = arith.extui %172 : i32 to i64
    %c65536_i64_85 = arith.constant 65536 : i64
    %174 = arith.muli %173, %c65536_i64_85 : i64
    %175 = arith.cmpi ult, %171, %174 : i64
    cf.cond_br %175, ^bb31, ^bb32
  ^bb30:  // pred: ^bb27
    %c1_i32_86 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_86) : (i32) -> ()
    cf.br ^bb29
  ^bb31:  // 2 preds: ^bb29, ^bb32
    %176 = llvm.getelementptr %13[%170] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %177 = llvm.load volatile %176 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_87 = arith.constant 0 : i64
    %178 = arith.extui %167 : i32 to i64
    %179 = arith.addi %178, %c0_i64_87 : i64
    %c8_i64_88 = arith.constant 8 : i64
    %180 = arith.addi %179, %c8_i64_88 : i64
    %c0_i32_89 = arith.constant 0 : i32
    %181 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_89) : (!llvm.ptr, i32) -> i32
    %182 = arith.extui %181 : i32 to i64
    %c65536_i64_90 = arith.constant 65536 : i64
    %183 = arith.muli %182, %c65536_i64_90 : i64
    %184 = arith.cmpi ult, %180, %183 : i64
    cf.cond_br %184, ^bb33, ^bb34
  ^bb32:  // pred: ^bb29
    %c1_i32_91 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_91) : (i32) -> ()
    cf.br ^bb31
  ^bb33:  // 2 preds: ^bb31, ^bb34
    %185 = llvm.getelementptr %13[%179] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %177, %185 {alignment = 1 : i64} : i64, !llvm.ptr
    %186 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_92 = arith.constant 24 : i32
    %187 = arith.addi %186, %c24_i32_92 : i32
    %c8_i32_93 = arith.constant 8 : i32
    %188 = arith.addi %187, %c8_i32_93 : i32
    %189 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_94 = arith.constant 0 : i64
    %190 = arith.extui %189 : i32 to i64
    %191 = arith.addi %190, %c0_i64_94 : i64
    %c8_i64_95 = arith.constant 8 : i64
    %192 = arith.addi %191, %c8_i64_95 : i64
    %c0_i32_96 = arith.constant 0 : i32
    %193 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_96) : (!llvm.ptr, i32) -> i32
    %194 = arith.extui %193 : i32 to i64
    %c65536_i64_97 = arith.constant 65536 : i64
    %195 = arith.muli %194, %c65536_i64_97 : i64
    %196 = arith.cmpi ult, %192, %195 : i64
    cf.cond_br %196, ^bb35, ^bb36
  ^bb34:  // pred: ^bb31
    %c1_i32_98 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_98) : (i32) -> ()
    cf.br ^bb33
  ^bb35:  // 2 preds: ^bb33, ^bb36
    %197 = llvm.getelementptr %13[%191] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %198 = llvm.load volatile %197 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_99 = arith.constant 0 : i64
    %199 = arith.extui %188 : i32 to i64
    %200 = arith.addi %199, %c0_i64_99 : i64
    %c8_i64_100 = arith.constant 8 : i64
    %201 = arith.addi %200, %c8_i64_100 : i64
    %c0_i32_101 = arith.constant 0 : i32
    %202 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_101) : (!llvm.ptr, i32) -> i32
    %203 = arith.extui %202 : i32 to i64
    %c65536_i64_102 = arith.constant 65536 : i64
    %204 = arith.muli %203, %c65536_i64_102 : i64
    %205 = arith.cmpi ult, %201, %204 : i64
    cf.cond_br %205, ^bb37, ^bb38
  ^bb36:  // pred: ^bb33
    %c1_i32_103 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_103) : (i32) -> ()
    cf.br ^bb35
  ^bb37:  // 2 preds: ^bb35, ^bb38
    %206 = llvm.getelementptr %13[%200] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %198, %206 {alignment = 1 : i64} : i64, !llvm.ptr
    %207 = llvm.load %2 : !llvm.ptr -> i32
    %208 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_104 = arith.constant 0 : i64
    %209 = arith.extui %208 : i32 to i64
    %210 = arith.addi %209, %c0_i64_104 : i64
    %c8_i64_105 = arith.constant 8 : i64
    %211 = arith.addi %210, %c8_i64_105 : i64
    %c0_i32_106 = arith.constant 0 : i32
    %212 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_106) : (!llvm.ptr, i32) -> i32
    %213 = arith.extui %212 : i32 to i64
    %c65536_i64_107 = arith.constant 65536 : i64
    %214 = arith.muli %213, %c65536_i64_107 : i64
    %215 = arith.cmpi ult, %211, %214 : i64
    cf.cond_br %215, ^bb39, ^bb40
  ^bb38:  // pred: ^bb35
    %c1_i32_108 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_108) : (i32) -> ()
    cf.br ^bb37
  ^bb39:  // 2 preds: ^bb37, ^bb40
    %216 = llvm.getelementptr %13[%210] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %217 = llvm.load volatile %216 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %217, %8 : i64, !llvm.ptr
    %c24_i64_109 = arith.constant 24 : i64
    %218 = arith.extui %207 : i32 to i64
    %219 = arith.addi %218, %c24_i64_109 : i64
    %c8_i64_110 = arith.constant 8 : i64
    %220 = arith.addi %219, %c8_i64_110 : i64
    %c0_i32_111 = arith.constant 0 : i32
    %221 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_111) : (!llvm.ptr, i32) -> i32
    %222 = arith.extui %221 : i32 to i64
    %c65536_i64_112 = arith.constant 65536 : i64
    %223 = arith.muli %222, %c65536_i64_112 : i64
    %224 = arith.cmpi ult, %220, %223 : i64
    cf.cond_br %224, ^bb41, ^bb42
  ^bb40:  // pred: ^bb37
    %c1_i32_113 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_113) : (i32) -> ()
    cf.br ^bb39
  ^bb41:  // 2 preds: ^bb39, ^bb42
    %225 = llvm.getelementptr %13[%219] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %217, %225 {alignment = 1 : i64} : i64, !llvm.ptr
    %226 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %227 = arith.addi %226, %c48_i32 : i32
    %c8_i32_114 = arith.constant 8 : i32
    %228 = arith.addi %227, %c8_i32_114 : i32
    %229 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_115 = arith.constant 0 : i64
    %230 = arith.extui %229 : i32 to i64
    %231 = arith.addi %230, %c0_i64_115 : i64
    %c4_i64_116 = arith.constant 4 : i64
    %232 = arith.addi %231, %c4_i64_116 : i64
    %c0_i32_117 = arith.constant 0 : i32
    %233 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_117) : (!llvm.ptr, i32) -> i32
    %234 = arith.extui %233 : i32 to i64
    %c65536_i64_118 = arith.constant 65536 : i64
    %235 = arith.muli %234, %c65536_i64_118 : i64
    %236 = arith.cmpi ult, %232, %235 : i64
    cf.cond_br %236, ^bb43, ^bb44
  ^bb42:  // pred: ^bb39
    %c1_i32_119 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_119) : (i32) -> ()
    cf.br ^bb41
  ^bb43:  // 2 preds: ^bb41, ^bb44
    %237 = llvm.getelementptr %13[%231] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %238 = llvm.load volatile %237 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_120 = arith.constant 0 : i64
    %239 = arith.extui %228 : i32 to i64
    %240 = arith.addi %239, %c0_i64_120 : i64
    %c4_i64_121 = arith.constant 4 : i64
    %241 = arith.addi %240, %c4_i64_121 : i64
    %c0_i32_122 = arith.constant 0 : i32
    %242 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_122) : (!llvm.ptr, i32) -> i32
    %243 = arith.extui %242 : i32 to i64
    %c65536_i64_123 = arith.constant 65536 : i64
    %244 = arith.muli %243, %c65536_i64_123 : i64
    %245 = arith.cmpi ult, %241, %244 : i64
    cf.cond_br %245, ^bb45, ^bb46
  ^bb44:  // pred: ^bb41
    %c1_i32_124 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_124) : (i32) -> ()
    cf.br ^bb43
  ^bb45:  // 2 preds: ^bb43, ^bb46
    %246 = llvm.getelementptr %13[%240] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %238, %246 {alignment = 1 : i64} : i32, !llvm.ptr
    %247 = llvm.load %2 : !llvm.ptr -> i32
    %248 = llvm.load %8 : !llvm.ptr -> i64
    %c48_i64 = arith.constant 48 : i64
    %249 = arith.extui %247 : i32 to i64
    %250 = arith.addi %249, %c48_i64 : i64
    %c8_i64_125 = arith.constant 8 : i64
    %251 = arith.addi %250, %c8_i64_125 : i64
    %c0_i32_126 = arith.constant 0 : i32
    %252 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_126) : (!llvm.ptr, i32) -> i32
    %253 = arith.extui %252 : i32 to i64
    %c65536_i64_127 = arith.constant 65536 : i64
    %254 = arith.muli %253, %c65536_i64_127 : i64
    %255 = arith.cmpi ult, %251, %254 : i64
    cf.cond_br %255, ^bb47, ^bb48
  ^bb46:  // pred: ^bb43
    %c1_i32_128 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_128) : (i32) -> ()
    cf.br ^bb45
  ^bb47:  // 2 preds: ^bb45, ^bb48
    %256 = llvm.getelementptr %13[%250] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %248, %256 {alignment = 1 : i64} : i64, !llvm.ptr
    %257 = llvm.load %2 : !llvm.ptr -> i32
    %c36_i32 = arith.constant 36 : i32
    %258 = arith.addi %257, %c36_i32 : i32
    llvm.store %258, %7 : i32, !llvm.ptr
    call @f89(%arg0, %258) : (!llvm.ptr, i32) -> ()
    %259 = llvm.load %7 : !llvm.ptr -> i32
    call @f90(%arg0, %259) : (!llvm.ptr, i32) -> ()
    %260 = llvm.load %0 : !llvm.ptr -> i32
    %261 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i32_129 = arith.constant 48 : i32
    %262 = arith.addi %261, %c48_i32_129 : i32
    call @f86(%arg0, %260, %262) : (!llvm.ptr, i32, i32) -> ()
    %263 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_130 = arith.constant 64 : i32
    %264 = arith.addi %263, %c64_i32_130 : i32
    llvm.store %264, %10 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb48:  // pred: ^bb45
    %c1_i32_131 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_131) : (i32) -> ()
    cf.br ^bb47
  ^bb49:  // 2 preds: ^bb6, ^bb50
    %265 = llvm.getelementptr %13[%48] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %266 = llvm.load volatile %265 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f143(%arg0, %45, %266) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb50:  // pred: ^bb6
    %c1_i32_132 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_132) : (i32) -> ()
    cf.br ^bb49
  ^bb51:  // 2 preds: ^bb5, ^bb52
    %267 = llvm.getelementptr %13[%39] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %268 = llvm.load volatile %267 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f143(%arg0, %36, %268) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb52:  // pred: ^bb5
    %c1_i32_133 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_133) : (i32) -> ()
    cf.br ^bb51
  }
  func.func @f16(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %c1_i32_9 = arith.constant 1 : i32
    %10 = llvm.alloca %c1_i32_9 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %10 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_10 = arith.constant 1 : i32
    %11 = llvm.alloca %c1_i32_10 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %11 : i64, !llvm.ptr
    %12 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    %14 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %14[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %17 = llvm.load %13 : !llvm.ptr -> i32
    %c304_i32 = arith.constant 304 : i32
    %18 = arith.subi %17, %c304_i32 : i32
    llvm.store %18, %2 : i32, !llvm.ptr
    llvm.store %18, %13 : i32, !llvm.ptr
    %19 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %20 = arith.addi %19, %c8_i32 : i32
    llvm.store %20, %3 : i32, !llvm.ptr
    %21 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_11 = arith.constant 0 : i64
    %22 = arith.extui %21 : i32 to i64
    %23 = arith.addi %22, %c0_i64_11 : i64
    %c4_i64 = arith.constant 4 : i64
    %24 = arith.addi %23, %c4_i64 : i64
    %c0_i32_12 = arith.constant 0 : i32
    %25 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_12) : (!llvm.ptr, i32) -> i32
    %26 = arith.extui %25 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %27 = arith.muli %26, %c65536_i64 : i64
    %28 = arith.cmpi ult, %24, %27 : i64
    cf.cond_br %28, ^bb9, ^bb10
  ^bb2:  // pred: ^bb7
    return
  ^bb3:  // pred: ^bb525
    %29 = llvm.load %5 : !llvm.ptr -> i32
    %30 = llvm.load %2 : !llvm.ptr -> i32
    %c280_i64 = arith.constant 280 : i64
    %31 = arith.extui %30 : i32 to i64
    %32 = arith.addi %31, %c280_i64 : i64
    %c4_i64_13 = arith.constant 4 : i64
    %33 = arith.addi %32, %c4_i64_13 : i64
    %c0_i32_14 = arith.constant 0 : i32
    %34 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_14) : (!llvm.ptr, i32) -> i32
    %35 = arith.extui %34 : i32 to i64
    %c65536_i64_15 = arith.constant 65536 : i64
    %36 = arith.muli %35, %c65536_i64_15 : i64
    %37 = arith.cmpi ult, %33, %36 : i64
    cf.cond_br %37, ^bb588, ^bb589
  ^bb4:  // pred: ^bb518
    %38 = llvm.load %4 : !llvm.ptr -> i32
    %39 = llvm.load %2 : !llvm.ptr -> i32
    %c280_i64_16 = arith.constant 280 : i64
    %40 = arith.extui %39 : i32 to i64
    %41 = arith.addi %40, %c280_i64_16 : i64
    %c4_i64_17 = arith.constant 4 : i64
    %42 = arith.addi %41, %c4_i64_17 : i64
    %c0_i32_18 = arith.constant 0 : i32
    %43 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_18) : (!llvm.ptr, i32) -> i32
    %44 = arith.extui %43 : i32 to i64
    %c65536_i64_19 = arith.constant 65536 : i64
    %45 = arith.muli %44, %c65536_i64_19 : i64
    %46 = arith.cmpi ult, %42, %45 : i64
    cf.cond_br %46, ^bb586, ^bb587
  ^bb5:  // pred: ^bb251
    %47 = llvm.load %5 : !llvm.ptr -> i32
    %48 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %49 = arith.extui %48 : i32 to i64
    %50 = arith.addi %49, %c24_i64 : i64
    %c4_i64_20 = arith.constant 4 : i64
    %51 = arith.addi %50, %c4_i64_20 : i64
    %c0_i32_21 = arith.constant 0 : i32
    %52 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_21) : (!llvm.ptr, i32) -> i32
    %53 = arith.extui %52 : i32 to i64
    %c65536_i64_22 = arith.constant 65536 : i64
    %54 = arith.muli %53, %c65536_i64_22 : i64
    %55 = arith.cmpi ult, %51, %54 : i64
    cf.cond_br %55, ^bb584, ^bb585
  ^bb6:  // pred: ^bb14
    %56 = llvm.load %5 : !llvm.ptr -> i32
    %57 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i64_23 = arith.constant 24 : i64
    %58 = arith.extui %57 : i32 to i64
    %59 = arith.addi %58, %c24_i64_23 : i64
    %c4_i64_24 = arith.constant 4 : i64
    %60 = arith.addi %59, %c4_i64_24 : i64
    %c0_i32_25 = arith.constant 0 : i32
    %61 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_25) : (!llvm.ptr, i32) -> i32
    %62 = arith.extui %61 : i32 to i64
    %c65536_i64_26 = arith.constant 65536 : i64
    %63 = arith.muli %62, %c65536_i64_26 : i64
    %64 = arith.cmpi ult, %60, %63 : i64
    cf.cond_br %64, ^bb582, ^bb583
  ^bb7:  // 2 preds: ^bb247, ^bb580
    %65 = llvm.load %2 : !llvm.ptr -> i32
    %c304_i32_27 = arith.constant 304 : i32
    %66 = arith.addi %65, %c304_i32_27 : i32
    llvm.store %66, %13 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb8:  // pred: ^bb9
    %c0_i32_28 = arith.constant 0 : i32
    llvm.store %c0_i32_28, %4 : i32, !llvm.ptr
    %67 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %68 = arith.addi %67, %c16_i32 : i32
    %c132_i32 = arith.constant 132 : i32
    %c0_i32_29 = arith.constant 0 : i32
    %c1_i32_30 = arith.constant 1 : i32
    %c1_i32_31 = arith.constant 1 : i32
    call @f111(%arg0, %68, %c132_i32, %c0_i32_29, %c1_i32_30, %c1_i32_31) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %69 = llvm.load %2 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %70 = arith.extui %69 : i32 to i64
    %71 = arith.addi %70, %c20_i64 : i64
    %c4_i64_32 = arith.constant 4 : i64
    %72 = arith.addi %71, %c4_i64_32 : i64
    %c0_i32_33 = arith.constant 0 : i32
    %73 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_33) : (!llvm.ptr, i32) -> i32
    %74 = arith.extui %73 : i32 to i64
    %c65536_i64_34 = arith.constant 65536 : i64
    %75 = arith.muli %74, %c65536_i64_34 : i64
    %76 = arith.cmpi ult, %72, %75 : i64
    cf.cond_br %76, ^bb249, ^bb250
  ^bb9:  // 2 preds: ^bb1, ^bb10
    %77 = llvm.getelementptr %16[%23] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %78 = llvm.load volatile %77 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_35 = arith.constant 0 : i32
    %79 = arith.cmpi ne, %78, %c0_i32_35 : i32
    cf.cond_br %79, ^bb8, ^bb11
  ^bb10:  // pred: ^bb1
    %c1_i32_36 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_36) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // pred: ^bb9
    %c0_i32_37 = arith.constant 0 : i32
    llvm.store %c0_i32_37, %4 : i32, !llvm.ptr
    %80 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_38 = arith.constant 16 : i32
    %81 = arith.addi %80, %c16_i32_38 : i32
    %c100_i32 = arith.constant 100 : i32
    %c0_i32_39 = arith.constant 0 : i32
    %c1_i32_40 = arith.constant 1 : i32
    %c1_i32_41 = arith.constant 1 : i32
    call @f111(%arg0, %81, %c100_i32, %c0_i32_39, %c1_i32_40, %c1_i32_41) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %82 = llvm.load %2 : !llvm.ptr -> i32
    %c20_i64_42 = arith.constant 20 : i64
    %83 = arith.extui %82 : i32 to i64
    %84 = arith.addi %83, %c20_i64_42 : i64
    %c4_i64_43 = arith.constant 4 : i64
    %85 = arith.addi %84, %c4_i64_43 : i64
    %c0_i32_44 = arith.constant 0 : i32
    %86 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_44) : (!llvm.ptr, i32) -> i32
    %87 = arith.extui %86 : i32 to i64
    %c65536_i64_45 = arith.constant 65536 : i64
    %88 = arith.muli %87, %c65536_i64_45 : i64
    %89 = arith.cmpi ult, %85, %88 : i64
    cf.cond_br %89, ^bb12, ^bb13
  ^bb12:  // 2 preds: ^bb11, ^bb13
    %90 = llvm.getelementptr %16[%84] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %91 = llvm.load volatile %90 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %91, %5 : i32, !llvm.ptr
    %92 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %93 = arith.extui %92 : i32 to i64
    %94 = arith.addi %93, %c16_i64 : i64
    %c4_i64_46 = arith.constant 4 : i64
    %95 = arith.addi %94, %c4_i64_46 : i64
    %c0_i32_47 = arith.constant 0 : i32
    %96 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_47) : (!llvm.ptr, i32) -> i32
    %97 = arith.extui %96 : i32 to i64
    %c65536_i64_48 = arith.constant 65536 : i64
    %98 = arith.muli %97, %c65536_i64_48 : i64
    %99 = arith.cmpi ult, %95, %98 : i64
    cf.cond_br %99, ^bb14, ^bb15
  ^bb13:  // pred: ^bb11
    %c1_i32_49 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_49) : (i32) -> ()
    cf.br ^bb12
  ^bb14:  // 2 preds: ^bb12, ^bb15
    %100 = llvm.getelementptr %16[%94] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %101 = llvm.load volatile %100 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_50 = arith.constant 1 : i32
    %102 = arith.cmpi eq, %101, %c1_i32_50 : i32
    %103 = arith.extui %102 : i1 to i32
    %c0_i32_51 = arith.constant 0 : i32
    %104 = arith.cmpi ne, %103, %c0_i32_51 : i32
    cf.cond_br %104, ^bb6, ^bb16
  ^bb15:  // pred: ^bb12
    %c1_i32_52 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_52) : (i32) -> ()
    cf.br ^bb14
  ^bb16:  // pred: ^bb14
    %105 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_53 = arith.constant 0 : i32
    %c152_i64 = arith.constant 152 : i64
    %106 = arith.extui %105 : i32 to i64
    %107 = arith.addi %106, %c152_i64 : i64
    %c4_i64_54 = arith.constant 4 : i64
    %108 = arith.addi %107, %c4_i64_54 : i64
    %c0_i32_55 = arith.constant 0 : i32
    %109 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_55) : (!llvm.ptr, i32) -> i32
    %110 = arith.extui %109 : i32 to i64
    %c65536_i64_56 = arith.constant 65536 : i64
    %111 = arith.muli %110, %c65536_i64_56 : i64
    %112 = arith.cmpi ult, %108, %111 : i64
    cf.cond_br %112, ^bb17, ^bb18
  ^bb17:  // 2 preds: ^bb16, ^bb18
    %113 = llvm.getelementptr %16[%107] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_53, %113 {alignment = 1 : i64} : i32, !llvm.ptr
    %114 = llvm.load %2 : !llvm.ptr -> i32
    %115 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i64_57 = arith.constant 24 : i64
    %116 = arith.extui %115 : i32 to i64
    %117 = arith.addi %116, %c24_i64_57 : i64
    %c4_i64_58 = arith.constant 4 : i64
    %118 = arith.addi %117, %c4_i64_58 : i64
    %c0_i32_59 = arith.constant 0 : i32
    %119 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_59) : (!llvm.ptr, i32) -> i32
    %120 = arith.extui %119 : i32 to i64
    %c65536_i64_60 = arith.constant 65536 : i64
    %121 = arith.muli %120, %c65536_i64_60 : i64
    %122 = arith.cmpi ult, %118, %121 : i64
    cf.cond_br %122, ^bb19, ^bb20
  ^bb18:  // pred: ^bb16
    %c1_i32_61 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_61) : (i32) -> ()
    cf.br ^bb17
  ^bb19:  // 2 preds: ^bb17, ^bb20
    %123 = llvm.getelementptr %16[%117] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %124 = llvm.load volatile %123 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c148_i64 = arith.constant 148 : i64
    %125 = arith.extui %114 : i32 to i64
    %126 = arith.addi %125, %c148_i64 : i64
    %c4_i64_62 = arith.constant 4 : i64
    %127 = arith.addi %126, %c4_i64_62 : i64
    %c0_i32_63 = arith.constant 0 : i32
    %128 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_63) : (!llvm.ptr, i32) -> i32
    %129 = arith.extui %128 : i32 to i64
    %c65536_i64_64 = arith.constant 65536 : i64
    %130 = arith.muli %129, %c65536_i64_64 : i64
    %131 = arith.cmpi ult, %127, %130 : i64
    cf.cond_br %131, ^bb21, ^bb22
  ^bb20:  // pred: ^bb17
    %c1_i32_65 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_65) : (i32) -> ()
    cf.br ^bb19
  ^bb21:  // 2 preds: ^bb19, ^bb22
    %132 = llvm.getelementptr %16[%126] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %124, %132 {alignment = 1 : i64} : i32, !llvm.ptr
    %133 = llvm.load %2 : !llvm.ptr -> i32
    %134 = llvm.load %5 : !llvm.ptr -> i32
    %c144_i64 = arith.constant 144 : i64
    %135 = arith.extui %133 : i32 to i64
    %136 = arith.addi %135, %c144_i64 : i64
    %c4_i64_66 = arith.constant 4 : i64
    %137 = arith.addi %136, %c4_i64_66 : i64
    %c0_i32_67 = arith.constant 0 : i32
    %138 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_67) : (!llvm.ptr, i32) -> i32
    %139 = arith.extui %138 : i32 to i64
    %c65536_i64_68 = arith.constant 65536 : i64
    %140 = arith.muli %139, %c65536_i64_68 : i64
    %141 = arith.cmpi ult, %137, %140 : i64
    cf.cond_br %141, ^bb23, ^bb24
  ^bb22:  // pred: ^bb19
    %c1_i32_69 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_69) : (i32) -> ()
    cf.br ^bb21
  ^bb23:  // 2 preds: ^bb21, ^bb24
    %142 = llvm.getelementptr %16[%136] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %134, %142 {alignment = 1 : i64} : i32, !llvm.ptr
    %143 = llvm.load %2 : !llvm.ptr -> i32
    %c144_i32 = arith.constant 144 : i32
    %144 = arith.addi %143, %c144_i32 : i32
    %c1048820_i32 = arith.constant 1048820 : i32
    call @f84(%arg0, %144, %c1048820_i32) : (!llvm.ptr, i32, i32) -> ()
    %145 = llvm.load %2 : !llvm.ptr -> i32
    %c144_i32_70 = arith.constant 144 : i32
    %146 = arith.addi %145, %c144_i32_70 : i32
    %c96_i32 = arith.constant 96 : i32
    call @f106(%arg0, %146, %c96_i32) : (!llvm.ptr, i32, i32) -> ()
    %147 = llvm.load %2 : !llvm.ptr -> i32
    %c272_i32 = arith.constant 272 : i32
    %148 = arith.addi %147, %c272_i32 : i32
    %c16_i32_71 = arith.constant 16 : i32
    %149 = arith.addi %148, %c16_i32_71 : i32
    %150 = llvm.load %1 : !llvm.ptr -> i32
    %c88_i32 = arith.constant 88 : i32
    %151 = arith.addi %150, %c88_i32 : i32
    %c0_i64_72 = arith.constant 0 : i64
    %152 = arith.extui %151 : i32 to i64
    %153 = arith.addi %152, %c0_i64_72 : i64
    %c4_i64_73 = arith.constant 4 : i64
    %154 = arith.addi %153, %c4_i64_73 : i64
    %c0_i32_74 = arith.constant 0 : i32
    %155 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_74) : (!llvm.ptr, i32) -> i32
    %156 = arith.extui %155 : i32 to i64
    %c65536_i64_75 = arith.constant 65536 : i64
    %157 = arith.muli %156, %c65536_i64_75 : i64
    %158 = arith.cmpi ult, %154, %157 : i64
    cf.cond_br %158, ^bb25, ^bb26
  ^bb24:  // pred: ^bb21
    %c1_i32_76 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_76) : (i32) -> ()
    cf.br ^bb23
  ^bb25:  // 2 preds: ^bb23, ^bb26
    %159 = llvm.getelementptr %16[%153] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %160 = llvm.load volatile %159 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_77 = arith.constant 0 : i64
    %161 = arith.extui %149 : i32 to i64
    %162 = arith.addi %161, %c0_i64_77 : i64
    %c4_i64_78 = arith.constant 4 : i64
    %163 = arith.addi %162, %c4_i64_78 : i64
    %c0_i32_79 = arith.constant 0 : i32
    %164 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_79) : (!llvm.ptr, i32) -> i32
    %165 = arith.extui %164 : i32 to i64
    %c65536_i64_80 = arith.constant 65536 : i64
    %166 = arith.muli %165, %c65536_i64_80 : i64
    %167 = arith.cmpi ult, %163, %166 : i64
    cf.cond_br %167, ^bb27, ^bb28
  ^bb26:  // pred: ^bb23
    %c1_i32_81 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_81) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // 2 preds: ^bb25, ^bb28
    %168 = llvm.getelementptr %16[%162] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %160, %168 {alignment = 1 : i64} : i32, !llvm.ptr
    %169 = llvm.load %2 : !llvm.ptr -> i32
    %c272_i32_82 = arith.constant 272 : i32
    %170 = arith.addi %169, %c272_i32_82 : i32
    %c8_i32_83 = arith.constant 8 : i32
    %171 = arith.addi %170, %c8_i32_83 : i32
    %172 = llvm.load %1 : !llvm.ptr -> i32
    %c80_i32 = arith.constant 80 : i32
    %173 = arith.addi %172, %c80_i32 : i32
    %c0_i64_84 = arith.constant 0 : i64
    %174 = arith.extui %173 : i32 to i64
    %175 = arith.addi %174, %c0_i64_84 : i64
    %c8_i64 = arith.constant 8 : i64
    %176 = arith.addi %175, %c8_i64 : i64
    %c0_i32_85 = arith.constant 0 : i32
    %177 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_85) : (!llvm.ptr, i32) -> i32
    %178 = arith.extui %177 : i32 to i64
    %c65536_i64_86 = arith.constant 65536 : i64
    %179 = arith.muli %178, %c65536_i64_86 : i64
    %180 = arith.cmpi ult, %176, %179 : i64
    cf.cond_br %180, ^bb29, ^bb30
  ^bb28:  // pred: ^bb25
    %c1_i32_87 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_87) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // 2 preds: ^bb27, ^bb30
    %181 = llvm.getelementptr %16[%175] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %182 = llvm.load volatile %181 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_88 = arith.constant 0 : i64
    %183 = arith.extui %171 : i32 to i64
    %184 = arith.addi %183, %c0_i64_88 : i64
    %c8_i64_89 = arith.constant 8 : i64
    %185 = arith.addi %184, %c8_i64_89 : i64
    %c0_i32_90 = arith.constant 0 : i32
    %186 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_90) : (!llvm.ptr, i32) -> i32
    %187 = arith.extui %186 : i32 to i64
    %c65536_i64_91 = arith.constant 65536 : i64
    %188 = arith.muli %187, %c65536_i64_91 : i64
    %189 = arith.cmpi ult, %185, %188 : i64
    cf.cond_br %189, ^bb31, ^bb32
  ^bb30:  // pred: ^bb27
    %c1_i32_92 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_92) : (i32) -> ()
    cf.br ^bb29
  ^bb31:  // 2 preds: ^bb29, ^bb32
    %190 = llvm.getelementptr %16[%184] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %182, %190 {alignment = 1 : i64} : i64, !llvm.ptr
    %191 = llvm.load %2 : !llvm.ptr -> i32
    %192 = llvm.load %1 : !llvm.ptr -> i32
    %c72_i64 = arith.constant 72 : i64
    %193 = arith.extui %192 : i32 to i64
    %194 = arith.addi %193, %c72_i64 : i64
    %c8_i64_93 = arith.constant 8 : i64
    %195 = arith.addi %194, %c8_i64_93 : i64
    %c0_i32_94 = arith.constant 0 : i32
    %196 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_94) : (!llvm.ptr, i32) -> i32
    %197 = arith.extui %196 : i32 to i64
    %c65536_i64_95 = arith.constant 65536 : i64
    %198 = arith.muli %197, %c65536_i64_95 : i64
    %199 = arith.cmpi ult, %195, %198 : i64
    cf.cond_br %199, ^bb33, ^bb34
  ^bb32:  // pred: ^bb29
    %c1_i32_96 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_96) : (i32) -> ()
    cf.br ^bb31
  ^bb33:  // 2 preds: ^bb31, ^bb34
    %200 = llvm.getelementptr %16[%194] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %201 = llvm.load volatile %200 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c272_i64 = arith.constant 272 : i64
    %202 = arith.extui %191 : i32 to i64
    %203 = arith.addi %202, %c272_i64 : i64
    %c8_i64_97 = arith.constant 8 : i64
    %204 = arith.addi %203, %c8_i64_97 : i64
    %c0_i32_98 = arith.constant 0 : i32
    %205 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_98) : (!llvm.ptr, i32) -> i32
    %206 = arith.extui %205 : i32 to i64
    %c65536_i64_99 = arith.constant 65536 : i64
    %207 = arith.muli %206, %c65536_i64_99 : i64
    %208 = arith.cmpi ult, %204, %207 : i64
    cf.cond_br %208, ^bb35, ^bb36
  ^bb34:  // pred: ^bb31
    %c1_i32_100 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_100) : (i32) -> ()
    cf.br ^bb33
  ^bb35:  // 2 preds: ^bb33, ^bb36
    %209 = llvm.getelementptr %16[%203] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %201, %209 {alignment = 1 : i64} : i64, !llvm.ptr
    %210 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_101 = arith.constant 16 : i32
    %211 = arith.addi %210, %c16_i32_101 : i32
    %c24_i32 = arith.constant 24 : i32
    %212 = arith.addi %211, %c24_i32 : i32
    llvm.store %212, %5 : i32, !llvm.ptr
    %c0_i64_102 = arith.constant 0 : i64
    %c0_i64_103 = arith.constant 0 : i64
    %213 = arith.extui %212 : i32 to i64
    %214 = arith.addi %213, %c0_i64_103 : i64
    %c8_i64_104 = arith.constant 8 : i64
    %215 = arith.addi %214, %c8_i64_104 : i64
    %c0_i32_105 = arith.constant 0 : i32
    %216 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_105) : (!llvm.ptr, i32) -> i32
    %217 = arith.extui %216 : i32 to i64
    %c65536_i64_106 = arith.constant 65536 : i64
    %218 = arith.muli %217, %c65536_i64_106 : i64
    %219 = arith.cmpi ult, %215, %218 : i64
    cf.cond_br %219, ^bb37, ^bb38
  ^bb36:  // pred: ^bb33
    %c1_i32_107 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_107) : (i32) -> ()
    cf.br ^bb35
  ^bb37:  // 2 preds: ^bb35, ^bb38
    %220 = llvm.getelementptr %16[%214] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_102, %220 {alignment = 1 : i64} : i64, !llvm.ptr
    %221 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_108 = arith.constant 16 : i32
    %222 = arith.addi %221, %c16_i32_108 : i32
    %c16_i32_109 = arith.constant 16 : i32
    %223 = arith.addi %222, %c16_i32_109 : i32
    llvm.store %223, %6 : i32, !llvm.ptr
    %c0_i64_110 = arith.constant 0 : i64
    %c0_i64_111 = arith.constant 0 : i64
    %224 = arith.extui %223 : i32 to i64
    %225 = arith.addi %224, %c0_i64_111 : i64
    %c8_i64_112 = arith.constant 8 : i64
    %226 = arith.addi %225, %c8_i64_112 : i64
    %c0_i32_113 = arith.constant 0 : i32
    %227 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_113) : (!llvm.ptr, i32) -> i32
    %228 = arith.extui %227 : i32 to i64
    %c65536_i64_114 = arith.constant 65536 : i64
    %229 = arith.muli %228, %c65536_i64_114 : i64
    %230 = arith.cmpi ult, %226, %229 : i64
    cf.cond_br %230, ^bb39, ^bb40
  ^bb38:  // pred: ^bb35
    %c1_i32_115 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_115) : (i32) -> ()
    cf.br ^bb37
  ^bb39:  // 2 preds: ^bb37, ^bb40
    %231 = llvm.getelementptr %16[%225] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_110, %231 {alignment = 1 : i64} : i64, !llvm.ptr
    %232 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_116 = arith.constant 16 : i32
    %233 = arith.addi %232, %c16_i32_116 : i32
    %c8_i32_117 = arith.constant 8 : i32
    %234 = arith.addi %233, %c8_i32_117 : i32
    llvm.store %234, %7 : i32, !llvm.ptr
    %c0_i64_118 = arith.constant 0 : i64
    %c0_i64_119 = arith.constant 0 : i64
    %235 = arith.extui %234 : i32 to i64
    %236 = arith.addi %235, %c0_i64_119 : i64
    %c8_i64_120 = arith.constant 8 : i64
    %237 = arith.addi %236, %c8_i64_120 : i64
    %c0_i32_121 = arith.constant 0 : i32
    %238 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_121) : (!llvm.ptr, i32) -> i32
    %239 = arith.extui %238 : i32 to i64
    %c65536_i64_122 = arith.constant 65536 : i64
    %240 = arith.muli %239, %c65536_i64_122 : i64
    %241 = arith.cmpi ult, %237, %240 : i64
    cf.cond_br %241, ^bb41, ^bb42
  ^bb40:  // pred: ^bb37
    %c1_i32_123 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_123) : (i32) -> ()
    cf.br ^bb39
  ^bb41:  // 2 preds: ^bb39, ^bb42
    %242 = llvm.getelementptr %16[%236] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_118, %242 {alignment = 1 : i64} : i64, !llvm.ptr
    %243 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_124 = arith.constant 0 : i64
    %c16_i64_125 = arith.constant 16 : i64
    %244 = arith.extui %243 : i32 to i64
    %245 = arith.addi %244, %c16_i64_125 : i64
    %c8_i64_126 = arith.constant 8 : i64
    %246 = arith.addi %245, %c8_i64_126 : i64
    %c0_i32_127 = arith.constant 0 : i32
    %247 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_127) : (!llvm.ptr, i32) -> i32
    %248 = arith.extui %247 : i32 to i64
    %c65536_i64_128 = arith.constant 65536 : i64
    %249 = arith.muli %248, %c65536_i64_128 : i64
    %250 = arith.cmpi ult, %246, %249 : i64
    cf.cond_br %250, ^bb43, ^bb44
  ^bb42:  // pred: ^bb39
    %c1_i32_129 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_129) : (i32) -> ()
    cf.br ^bb41
  ^bb43:  // 2 preds: ^bb41, ^bb44
    %251 = llvm.getelementptr %16[%245] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_124, %251 {alignment = 1 : i64} : i64, !llvm.ptr
    %252 = llvm.load %2 : !llvm.ptr -> i32
    %c28_i32 = arith.constant 28 : i32
    %253 = arith.addi %252, %c28_i32 : i32
    %c20_i32 = arith.constant 20 : i32
    %254 = llvm.load %2 : !llvm.ptr -> i32
    %c272_i32_130 = arith.constant 272 : i32
    %255 = arith.addi %254, %c272_i32_130 : i32
    %c20_i32_131 = arith.constant 20 : i32
    %c1049972_i32 = arith.constant 1049972 : i32
    call @f114(%arg0, %253, %c20_i32, %255, %c20_i32_131, %c1049972_i32) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %256 = llvm.load %2 : !llvm.ptr -> i32
    %c176_i32 = arith.constant 176 : i32
    %257 = arith.addi %256, %c176_i32 : i32
    %c24_i32_132 = arith.constant 24 : i32
    %258 = arith.addi %257, %c24_i32_132 : i32
    %259 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64_133 = arith.constant 0 : i64
    %260 = arith.extui %259 : i32 to i64
    %261 = arith.addi %260, %c0_i64_133 : i64
    %c8_i64_134 = arith.constant 8 : i64
    %262 = arith.addi %261, %c8_i64_134 : i64
    %c0_i32_135 = arith.constant 0 : i32
    %263 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_135) : (!llvm.ptr, i32) -> i32
    %264 = arith.extui %263 : i32 to i64
    %c65536_i64_136 = arith.constant 65536 : i64
    %265 = arith.muli %264, %c65536_i64_136 : i64
    %266 = arith.cmpi ult, %262, %265 : i64
    cf.cond_br %266, ^bb45, ^bb46
  ^bb44:  // pred: ^bb41
    %c1_i32_137 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_137) : (i32) -> ()
    cf.br ^bb43
  ^bb45:  // 2 preds: ^bb43, ^bb46
    %267 = llvm.getelementptr %16[%261] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %268 = llvm.load volatile %267 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_138 = arith.constant 0 : i64
    %269 = arith.extui %258 : i32 to i64
    %270 = arith.addi %269, %c0_i64_138 : i64
    %c8_i64_139 = arith.constant 8 : i64
    %271 = arith.addi %270, %c8_i64_139 : i64
    %c0_i32_140 = arith.constant 0 : i32
    %272 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_140) : (!llvm.ptr, i32) -> i32
    %273 = arith.extui %272 : i32 to i64
    %c65536_i64_141 = arith.constant 65536 : i64
    %274 = arith.muli %273, %c65536_i64_141 : i64
    %275 = arith.cmpi ult, %271, %274 : i64
    cf.cond_br %275, ^bb47, ^bb48
  ^bb46:  // pred: ^bb43
    %c1_i32_142 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_142) : (i32) -> ()
    cf.br ^bb45
  ^bb47:  // 2 preds: ^bb45, ^bb48
    %276 = llvm.getelementptr %16[%270] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %268, %276 {alignment = 1 : i64} : i64, !llvm.ptr
    %277 = llvm.load %2 : !llvm.ptr -> i32
    %c176_i32_143 = arith.constant 176 : i32
    %278 = arith.addi %277, %c176_i32_143 : i32
    %c16_i32_144 = arith.constant 16 : i32
    %279 = arith.addi %278, %c16_i32_144 : i32
    %280 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_145 = arith.constant 0 : i64
    %281 = arith.extui %280 : i32 to i64
    %282 = arith.addi %281, %c0_i64_145 : i64
    %c8_i64_146 = arith.constant 8 : i64
    %283 = arith.addi %282, %c8_i64_146 : i64
    %c0_i32_147 = arith.constant 0 : i32
    %284 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_147) : (!llvm.ptr, i32) -> i32
    %285 = arith.extui %284 : i32 to i64
    %c65536_i64_148 = arith.constant 65536 : i64
    %286 = arith.muli %285, %c65536_i64_148 : i64
    %287 = arith.cmpi ult, %283, %286 : i64
    cf.cond_br %287, ^bb49, ^bb50
  ^bb48:  // pred: ^bb45
    %c1_i32_149 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_149) : (i32) -> ()
    cf.br ^bb47
  ^bb49:  // 2 preds: ^bb47, ^bb50
    %288 = llvm.getelementptr %16[%282] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %289 = llvm.load volatile %288 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_150 = arith.constant 0 : i64
    %290 = arith.extui %279 : i32 to i64
    %291 = arith.addi %290, %c0_i64_150 : i64
    %c8_i64_151 = arith.constant 8 : i64
    %292 = arith.addi %291, %c8_i64_151 : i64
    %c0_i32_152 = arith.constant 0 : i32
    %293 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_152) : (!llvm.ptr, i32) -> i32
    %294 = arith.extui %293 : i32 to i64
    %c65536_i64_153 = arith.constant 65536 : i64
    %295 = arith.muli %294, %c65536_i64_153 : i64
    %296 = arith.cmpi ult, %292, %295 : i64
    cf.cond_br %296, ^bb51, ^bb52
  ^bb50:  // pred: ^bb47
    %c1_i32_154 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_154) : (i32) -> ()
    cf.br ^bb49
  ^bb51:  // 2 preds: ^bb49, ^bb52
    %297 = llvm.getelementptr %16[%291] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %289, %297 {alignment = 1 : i64} : i64, !llvm.ptr
    %298 = llvm.load %2 : !llvm.ptr -> i32
    %c176_i32_155 = arith.constant 176 : i32
    %299 = arith.addi %298, %c176_i32_155 : i32
    %c8_i32_156 = arith.constant 8 : i32
    %300 = arith.addi %299, %c8_i32_156 : i32
    %301 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_157 = arith.constant 0 : i64
    %302 = arith.extui %301 : i32 to i64
    %303 = arith.addi %302, %c0_i64_157 : i64
    %c8_i64_158 = arith.constant 8 : i64
    %304 = arith.addi %303, %c8_i64_158 : i64
    %c0_i32_159 = arith.constant 0 : i32
    %305 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_159) : (!llvm.ptr, i32) -> i32
    %306 = arith.extui %305 : i32 to i64
    %c65536_i64_160 = arith.constant 65536 : i64
    %307 = arith.muli %306, %c65536_i64_160 : i64
    %308 = arith.cmpi ult, %304, %307 : i64
    cf.cond_br %308, ^bb53, ^bb54
  ^bb52:  // pred: ^bb49
    %c1_i32_161 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_161) : (i32) -> ()
    cf.br ^bb51
  ^bb53:  // 2 preds: ^bb51, ^bb54
    %309 = llvm.getelementptr %16[%303] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %310 = llvm.load volatile %309 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_162 = arith.constant 0 : i64
    %311 = arith.extui %300 : i32 to i64
    %312 = arith.addi %311, %c0_i64_162 : i64
    %c8_i64_163 = arith.constant 8 : i64
    %313 = arith.addi %312, %c8_i64_163 : i64
    %c0_i32_164 = arith.constant 0 : i32
    %314 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_164) : (!llvm.ptr, i32) -> i32
    %315 = arith.extui %314 : i32 to i64
    %c65536_i64_165 = arith.constant 65536 : i64
    %316 = arith.muli %315, %c65536_i64_165 : i64
    %317 = arith.cmpi ult, %313, %316 : i64
    cf.cond_br %317, ^bb55, ^bb56
  ^bb54:  // pred: ^bb51
    %c1_i32_166 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_166) : (i32) -> ()
    cf.br ^bb53
  ^bb55:  // 2 preds: ^bb53, ^bb56
    %318 = llvm.getelementptr %16[%312] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %310, %318 {alignment = 1 : i64} : i64, !llvm.ptr
    %319 = llvm.load %2 : !llvm.ptr -> i32
    %320 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i64_167 = arith.constant 16 : i64
    %321 = arith.extui %320 : i32 to i64
    %322 = arith.addi %321, %c16_i64_167 : i64
    %c8_i64_168 = arith.constant 8 : i64
    %323 = arith.addi %322, %c8_i64_168 : i64
    %c0_i32_169 = arith.constant 0 : i32
    %324 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_169) : (!llvm.ptr, i32) -> i32
    %325 = arith.extui %324 : i32 to i64
    %c65536_i64_170 = arith.constant 65536 : i64
    %326 = arith.muli %325, %c65536_i64_170 : i64
    %327 = arith.cmpi ult, %323, %326 : i64
    cf.cond_br %327, ^bb57, ^bb58
  ^bb56:  // pred: ^bb53
    %c1_i32_171 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_171) : (i32) -> ()
    cf.br ^bb55
  ^bb57:  // 2 preds: ^bb55, ^bb58
    %328 = llvm.getelementptr %16[%322] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %329 = llvm.load volatile %328 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c176_i64 = arith.constant 176 : i64
    %330 = arith.extui %319 : i32 to i64
    %331 = arith.addi %330, %c176_i64 : i64
    %c8_i64_172 = arith.constant 8 : i64
    %332 = arith.addi %331, %c8_i64_172 : i64
    %c0_i32_173 = arith.constant 0 : i32
    %333 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_173) : (!llvm.ptr, i32) -> i32
    %334 = arith.extui %333 : i32 to i64
    %c65536_i64_174 = arith.constant 65536 : i64
    %335 = arith.muli %334, %c65536_i64_174 : i64
    %336 = arith.cmpi ult, %332, %335 : i64
    cf.cond_br %336, ^bb59, ^bb60
  ^bb58:  // pred: ^bb55
    %c1_i32_175 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_175) : (i32) -> ()
    cf.br ^bb57
  ^bb59:  // 2 preds: ^bb57, ^bb60
    %337 = llvm.getelementptr %16[%331] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %329, %337 {alignment = 1 : i64} : i64, !llvm.ptr
    %338 = llvm.load %2 : !llvm.ptr -> i32
    %c240_i32 = arith.constant 240 : i32
    %339 = arith.addi %338, %c240_i32 : i32
    %c24_i32_176 = arith.constant 24 : i32
    %340 = arith.addi %339, %c24_i32_176 : i32
    %c0_i64_177 = arith.constant 0 : i64
    %c0_i64_178 = arith.constant 0 : i64
    %341 = arith.extui %340 : i32 to i64
    %342 = arith.addi %341, %c0_i64_178 : i64
    %c8_i64_179 = arith.constant 8 : i64
    %343 = arith.addi %342, %c8_i64_179 : i64
    %c0_i32_180 = arith.constant 0 : i32
    %344 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_180) : (!llvm.ptr, i32) -> i32
    %345 = arith.extui %344 : i32 to i64
    %c65536_i64_181 = arith.constant 65536 : i64
    %346 = arith.muli %345, %c65536_i64_181 : i64
    %347 = arith.cmpi ult, %343, %346 : i64
    cf.cond_br %347, ^bb61, ^bb62
  ^bb60:  // pred: ^bb57
    %c1_i32_182 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_182) : (i32) -> ()
    cf.br ^bb59
  ^bb61:  // 2 preds: ^bb59, ^bb62
    %348 = llvm.getelementptr %16[%342] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_177, %348 {alignment = 1 : i64} : i64, !llvm.ptr
    %349 = llvm.load %2 : !llvm.ptr -> i32
    %c240_i32_183 = arith.constant 240 : i32
    %350 = arith.addi %349, %c240_i32_183 : i32
    %c16_i32_184 = arith.constant 16 : i32
    %351 = arith.addi %350, %c16_i32_184 : i32
    %c0_i64_185 = arith.constant 0 : i64
    %c0_i64_186 = arith.constant 0 : i64
    %352 = arith.extui %351 : i32 to i64
    %353 = arith.addi %352, %c0_i64_186 : i64
    %c8_i64_187 = arith.constant 8 : i64
    %354 = arith.addi %353, %c8_i64_187 : i64
    %c0_i32_188 = arith.constant 0 : i32
    %355 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_188) : (!llvm.ptr, i32) -> i32
    %356 = arith.extui %355 : i32 to i64
    %c65536_i64_189 = arith.constant 65536 : i64
    %357 = arith.muli %356, %c65536_i64_189 : i64
    %358 = arith.cmpi ult, %354, %357 : i64
    cf.cond_br %358, ^bb63, ^bb64
  ^bb62:  // pred: ^bb59
    %c1_i32_190 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_190) : (i32) -> ()
    cf.br ^bb61
  ^bb63:  // 2 preds: ^bb61, ^bb64
    %359 = llvm.getelementptr %16[%353] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_185, %359 {alignment = 1 : i64} : i64, !llvm.ptr
    %360 = llvm.load %2 : !llvm.ptr -> i32
    %c240_i32_191 = arith.constant 240 : i32
    %361 = arith.addi %360, %c240_i32_191 : i32
    %c8_i32_192 = arith.constant 8 : i32
    %362 = arith.addi %361, %c8_i32_192 : i32
    %c0_i64_193 = arith.constant 0 : i64
    %c0_i64_194 = arith.constant 0 : i64
    %363 = arith.extui %362 : i32 to i64
    %364 = arith.addi %363, %c0_i64_194 : i64
    %c8_i64_195 = arith.constant 8 : i64
    %365 = arith.addi %364, %c8_i64_195 : i64
    %c0_i32_196 = arith.constant 0 : i32
    %366 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_196) : (!llvm.ptr, i32) -> i32
    %367 = arith.extui %366 : i32 to i64
    %c65536_i64_197 = arith.constant 65536 : i64
    %368 = arith.muli %367, %c65536_i64_197 : i64
    %369 = arith.cmpi ult, %365, %368 : i64
    cf.cond_br %369, ^bb65, ^bb66
  ^bb64:  // pred: ^bb61
    %c1_i32_198 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_198) : (i32) -> ()
    cf.br ^bb63
  ^bb65:  // 2 preds: ^bb63, ^bb66
    %370 = llvm.getelementptr %16[%364] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_193, %370 {alignment = 1 : i64} : i64, !llvm.ptr
    %371 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_199 = arith.constant 0 : i64
    %c240_i64 = arith.constant 240 : i64
    %372 = arith.extui %371 : i32 to i64
    %373 = arith.addi %372, %c240_i64 : i64
    %c8_i64_200 = arith.constant 8 : i64
    %374 = arith.addi %373, %c8_i64_200 : i64
    %c0_i32_201 = arith.constant 0 : i32
    %375 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_201) : (!llvm.ptr, i32) -> i32
    %376 = arith.extui %375 : i32 to i64
    %c65536_i64_202 = arith.constant 65536 : i64
    %377 = arith.muli %376, %c65536_i64_202 : i64
    %378 = arith.cmpi ult, %374, %377 : i64
    cf.cond_br %378, ^bb67, ^bb68
  ^bb66:  // pred: ^bb63
    %c1_i32_203 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_203) : (i32) -> ()
    cf.br ^bb65
  ^bb67:  // 2 preds: ^bb65, ^bb68
    %379 = llvm.getelementptr %16[%373] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_199, %379 {alignment = 1 : i64} : i64, !llvm.ptr
    %380 = llvm.load %5 : !llvm.ptr -> i32
    %381 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32_204 = arith.constant 24 : i32
    %382 = arith.addi %381, %c24_i32_204 : i32
    %c0_i64_205 = arith.constant 0 : i64
    %383 = arith.extui %382 : i32 to i64
    %384 = arith.addi %383, %c0_i64_205 : i64
    %c8_i64_206 = arith.constant 8 : i64
    %385 = arith.addi %384, %c8_i64_206 : i64
    %c0_i32_207 = arith.constant 0 : i32
    %386 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_207) : (!llvm.ptr, i32) -> i32
    %387 = arith.extui %386 : i32 to i64
    %c65536_i64_208 = arith.constant 65536 : i64
    %388 = arith.muli %387, %c65536_i64_208 : i64
    %389 = arith.cmpi ult, %385, %388 : i64
    cf.cond_br %389, ^bb69, ^bb70
  ^bb68:  // pred: ^bb65
    %c1_i32_209 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_209) : (i32) -> ()
    cf.br ^bb67
  ^bb69:  // 2 preds: ^bb67, ^bb70
    %390 = llvm.getelementptr %16[%384] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %391 = llvm.load volatile %390 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_210 = arith.constant 0 : i64
    %392 = arith.extui %380 : i32 to i64
    %393 = arith.addi %392, %c0_i64_210 : i64
    %c8_i64_211 = arith.constant 8 : i64
    %394 = arith.addi %393, %c8_i64_211 : i64
    %c0_i32_212 = arith.constant 0 : i32
    %395 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_212) : (!llvm.ptr, i32) -> i32
    %396 = arith.extui %395 : i32 to i64
    %c65536_i64_213 = arith.constant 65536 : i64
    %397 = arith.muli %396, %c65536_i64_213 : i64
    %398 = arith.cmpi ult, %394, %397 : i64
    cf.cond_br %398, ^bb71, ^bb72
  ^bb70:  // pred: ^bb67
    %c1_i32_214 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_214) : (i32) -> ()
    cf.br ^bb69
  ^bb71:  // 2 preds: ^bb69, ^bb72
    %399 = llvm.getelementptr %16[%393] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %391, %399 {alignment = 1 : i64} : i64, !llvm.ptr
    %400 = llvm.load %6 : !llvm.ptr -> i32
    %401 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_215 = arith.constant 16 : i32
    %402 = arith.addi %401, %c16_i32_215 : i32
    %c0_i64_216 = arith.constant 0 : i64
    %403 = arith.extui %402 : i32 to i64
    %404 = arith.addi %403, %c0_i64_216 : i64
    %c8_i64_217 = arith.constant 8 : i64
    %405 = arith.addi %404, %c8_i64_217 : i64
    %c0_i32_218 = arith.constant 0 : i32
    %406 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_218) : (!llvm.ptr, i32) -> i32
    %407 = arith.extui %406 : i32 to i64
    %c65536_i64_219 = arith.constant 65536 : i64
    %408 = arith.muli %407, %c65536_i64_219 : i64
    %409 = arith.cmpi ult, %405, %408 : i64
    cf.cond_br %409, ^bb73, ^bb74
  ^bb72:  // pred: ^bb69
    %c1_i32_220 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_220) : (i32) -> ()
    cf.br ^bb71
  ^bb73:  // 2 preds: ^bb71, ^bb74
    %410 = llvm.getelementptr %16[%404] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %411 = llvm.load volatile %410 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_221 = arith.constant 0 : i64
    %412 = arith.extui %400 : i32 to i64
    %413 = arith.addi %412, %c0_i64_221 : i64
    %c8_i64_222 = arith.constant 8 : i64
    %414 = arith.addi %413, %c8_i64_222 : i64
    %c0_i32_223 = arith.constant 0 : i32
    %415 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_223) : (!llvm.ptr, i32) -> i32
    %416 = arith.extui %415 : i32 to i64
    %c65536_i64_224 = arith.constant 65536 : i64
    %417 = arith.muli %416, %c65536_i64_224 : i64
    %418 = arith.cmpi ult, %414, %417 : i64
    cf.cond_br %418, ^bb75, ^bb76
  ^bb74:  // pred: ^bb71
    %c1_i32_225 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_225) : (i32) -> ()
    cf.br ^bb73
  ^bb75:  // 2 preds: ^bb73, ^bb76
    %419 = llvm.getelementptr %16[%413] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %411, %419 {alignment = 1 : i64} : i64, !llvm.ptr
    %420 = llvm.load %7 : !llvm.ptr -> i32
    %421 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_226 = arith.constant 8 : i32
    %422 = arith.addi %421, %c8_i32_226 : i32
    %c0_i64_227 = arith.constant 0 : i64
    %423 = arith.extui %422 : i32 to i64
    %424 = arith.addi %423, %c0_i64_227 : i64
    %c8_i64_228 = arith.constant 8 : i64
    %425 = arith.addi %424, %c8_i64_228 : i64
    %c0_i32_229 = arith.constant 0 : i32
    %426 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_229) : (!llvm.ptr, i32) -> i32
    %427 = arith.extui %426 : i32 to i64
    %c65536_i64_230 = arith.constant 65536 : i64
    %428 = arith.muli %427, %c65536_i64_230 : i64
    %429 = arith.cmpi ult, %425, %428 : i64
    cf.cond_br %429, ^bb77, ^bb78
  ^bb76:  // pred: ^bb73
    %c1_i32_231 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_231) : (i32) -> ()
    cf.br ^bb75
  ^bb77:  // 2 preds: ^bb75, ^bb78
    %430 = llvm.getelementptr %16[%424] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %431 = llvm.load volatile %430 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_232 = arith.constant 0 : i64
    %432 = arith.extui %420 : i32 to i64
    %433 = arith.addi %432, %c0_i64_232 : i64
    %c8_i64_233 = arith.constant 8 : i64
    %434 = arith.addi %433, %c8_i64_233 : i64
    %c0_i32_234 = arith.constant 0 : i32
    %435 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_234) : (!llvm.ptr, i32) -> i32
    %436 = arith.extui %435 : i32 to i64
    %c65536_i64_235 = arith.constant 65536 : i64
    %437 = arith.muli %436, %c65536_i64_235 : i64
    %438 = arith.cmpi ult, %434, %437 : i64
    cf.cond_br %438, ^bb79, ^bb80
  ^bb78:  // pred: ^bb75
    %c1_i32_236 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_236) : (i32) -> ()
    cf.br ^bb77
  ^bb79:  // 2 preds: ^bb77, ^bb80
    %439 = llvm.getelementptr %16[%433] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %431, %439 {alignment = 1 : i64} : i64, !llvm.ptr
    %440 = llvm.load %2 : !llvm.ptr -> i32
    %441 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_237 = arith.constant 0 : i64
    %442 = arith.extui %441 : i32 to i64
    %443 = arith.addi %442, %c0_i64_237 : i64
    %c8_i64_238 = arith.constant 8 : i64
    %444 = arith.addi %443, %c8_i64_238 : i64
    %c0_i32_239 = arith.constant 0 : i32
    %445 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_239) : (!llvm.ptr, i32) -> i32
    %446 = arith.extui %445 : i32 to i64
    %c65536_i64_240 = arith.constant 65536 : i64
    %447 = arith.muli %446, %c65536_i64_240 : i64
    %448 = arith.cmpi ult, %444, %447 : i64
    cf.cond_br %448, ^bb81, ^bb82
  ^bb80:  // pred: ^bb77
    %c1_i32_241 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_241) : (i32) -> ()
    cf.br ^bb79
  ^bb81:  // 2 preds: ^bb79, ^bb82
    %449 = llvm.getelementptr %16[%443] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %450 = llvm.load volatile %449 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c16_i64_242 = arith.constant 16 : i64
    %451 = arith.extui %440 : i32 to i64
    %452 = arith.addi %451, %c16_i64_242 : i64
    %c8_i64_243 = arith.constant 8 : i64
    %453 = arith.addi %452, %c8_i64_243 : i64
    %c0_i32_244 = arith.constant 0 : i32
    %454 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_244) : (!llvm.ptr, i32) -> i32
    %455 = arith.extui %454 : i32 to i64
    %c65536_i64_245 = arith.constant 65536 : i64
    %456 = arith.muli %455, %c65536_i64_245 : i64
    %457 = arith.cmpi ult, %453, %456 : i64
    cf.cond_br %457, ^bb83, ^bb84
  ^bb82:  // pred: ^bb79
    %c1_i32_246 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_246) : (i32) -> ()
    cf.br ^bb81
  ^bb83:  // 2 preds: ^bb81, ^bb84
    %458 = llvm.getelementptr %16[%452] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %450, %458 {alignment = 1 : i64} : i64, !llvm.ptr
    %459 = llvm.load %2 : !llvm.ptr -> i32
    %c47_i32 = arith.constant 47 : i32
    %460 = arith.addi %459, %c47_i32 : i32
    llvm.store %460, %3 : i32, !llvm.ptr
    cf.br ^bb86
  ^bb84:  // pred: ^bb81
    %c1_i32_247 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_247) : (i32) -> ()
    cf.br ^bb83
  ^bb85:  // pred: ^bb95
    %461 = llvm.load %2 : !llvm.ptr -> i32
    %c272_i32_248 = arith.constant 272 : i32
    %462 = arith.addi %461, %c272_i32_248 : i32
    %c24_i32_249 = arith.constant 24 : i32
    %463 = arith.addi %462, %c24_i32_249 : i32
    %464 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_250 = arith.constant 16 : i32
    %465 = arith.addi %464, %c16_i32_250 : i32
    %c24_i32_251 = arith.constant 24 : i32
    %466 = arith.addi %465, %c24_i32_251 : i32
    llvm.store %466, %3 : i32, !llvm.ptr
    %c0_i64_252 = arith.constant 0 : i64
    %467 = arith.extui %466 : i32 to i64
    %468 = arith.addi %467, %c0_i64_252 : i64
    %c8_i64_253 = arith.constant 8 : i64
    %469 = arith.addi %468, %c8_i64_253 : i64
    %c0_i32_254 = arith.constant 0 : i32
    %470 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_254) : (!llvm.ptr, i32) -> i32
    %471 = arith.extui %470 : i32 to i64
    %c65536_i64_255 = arith.constant 65536 : i64
    %472 = arith.muli %471, %c65536_i64_255 : i64
    %473 = arith.cmpi ult, %469, %472 : i64
    cf.cond_br %473, ^bb96, ^bb97
  ^bb86:  // 2 preds: ^bb83, ^bb93
    %474 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_256 = arith.constant 16 : i32
    %475 = arith.addi %474, %c16_i32_256 : i32
    %476 = llvm.load %4 : !llvm.ptr -> i32
    %477 = arith.addi %475, %476 : i32
    llvm.store %477, %5 : i32, !llvm.ptr
    %c0_i64_257 = arith.constant 0 : i64
    %478 = arith.extui %477 : i32 to i64
    %479 = arith.addi %478, %c0_i64_257 : i64
    %c1_i64 = arith.constant 1 : i64
    %480 = arith.addi %479, %c1_i64 : i64
    %c0_i32_258 = arith.constant 0 : i32
    %481 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_258) : (!llvm.ptr, i32) -> i32
    %482 = arith.extui %481 : i32 to i64
    %c65536_i64_259 = arith.constant 65536 : i64
    %483 = arith.muli %482, %c65536_i64_259 : i64
    %484 = arith.cmpi ult, %480, %483 : i64
    cf.cond_br %484, ^bb87, ^bb88
  ^bb87:  // 2 preds: ^bb86, ^bb88
    %485 = llvm.getelementptr %16[%479] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %486 = llvm.load volatile %485 {alignment = 1 : i64} : !llvm.ptr -> i8
    %487 = arith.extui %486 : i8 to i32
    llvm.store %487, %6 : i32, !llvm.ptr
    %488 = llvm.load %5 : !llvm.ptr -> i32
    %489 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_260 = arith.constant 0 : i64
    %490 = arith.extui %489 : i32 to i64
    %491 = arith.addi %490, %c0_i64_260 : i64
    %c1_i64_261 = arith.constant 1 : i64
    %492 = arith.addi %491, %c1_i64_261 : i64
    %c0_i32_262 = arith.constant 0 : i32
    %493 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_262) : (!llvm.ptr, i32) -> i32
    %494 = arith.extui %493 : i32 to i64
    %c65536_i64_263 = arith.constant 65536 : i64
    %495 = arith.muli %494, %c65536_i64_263 : i64
    %496 = arith.cmpi ult, %492, %495 : i64
    cf.cond_br %496, ^bb89, ^bb90
  ^bb88:  // pred: ^bb86
    %c1_i32_264 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_264) : (i32) -> ()
    cf.br ^bb87
  ^bb89:  // 2 preds: ^bb87, ^bb90
    %497 = llvm.getelementptr %16[%491] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %498 = llvm.load volatile %497 {alignment = 1 : i64} : !llvm.ptr -> i8
    %499 = arith.extui %498 : i8 to i32
    %c0_i64_265 = arith.constant 0 : i64
    %500 = arith.extui %488 : i32 to i64
    %501 = arith.addi %500, %c0_i64_265 : i64
    %c1_i64_266 = arith.constant 1 : i64
    %502 = arith.addi %501, %c1_i64_266 : i64
    %c0_i32_267 = arith.constant 0 : i32
    %503 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_267) : (!llvm.ptr, i32) -> i32
    %504 = arith.extui %503 : i32 to i64
    %c65536_i64_268 = arith.constant 65536 : i64
    %505 = arith.muli %504, %c65536_i64_268 : i64
    %506 = arith.cmpi ult, %502, %505 : i64
    cf.cond_br %506, ^bb91, ^bb92
  ^bb90:  // pred: ^bb87
    %c1_i32_269 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_269) : (i32) -> ()
    cf.br ^bb89
  ^bb91:  // 2 preds: ^bb89, ^bb92
    %507 = llvm.getelementptr %16[%501] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %508 = arith.trunci %499 : i32 to i8
    llvm.store volatile %508, %507 {alignment = 1 : i64} : i8, !llvm.ptr
    %509 = llvm.load %3 : !llvm.ptr -> i32
    %510 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_270 = arith.constant 0 : i64
    %511 = arith.extui %509 : i32 to i64
    %512 = arith.addi %511, %c0_i64_270 : i64
    %c1_i64_271 = arith.constant 1 : i64
    %513 = arith.addi %512, %c1_i64_271 : i64
    %c0_i32_272 = arith.constant 0 : i32
    %514 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_272) : (!llvm.ptr, i32) -> i32
    %515 = arith.extui %514 : i32 to i64
    %c65536_i64_273 = arith.constant 65536 : i64
    %516 = arith.muli %515, %c65536_i64_273 : i64
    %517 = arith.cmpi ult, %513, %516 : i64
    cf.cond_br %517, ^bb93, ^bb94
  ^bb92:  // pred: ^bb89
    %c1_i32_274 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_274) : (i32) -> ()
    cf.br ^bb91
  ^bb93:  // 2 preds: ^bb91, ^bb94
    %518 = llvm.getelementptr %16[%512] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %519 = arith.trunci %510 : i32 to i8
    llvm.store volatile %519, %518 {alignment = 1 : i64} : i8, !llvm.ptr
    %520 = llvm.load %3 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %521 = arith.addi %520, %c-1_i32 : i32
    llvm.store %521, %3 : i32, !llvm.ptr
    %522 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i32_275 = arith.constant 1 : i32
    %523 = arith.addi %522, %c1_i32_275 : i32
    llvm.store %523, %4 : i32, !llvm.ptr
    %c16_i32_276 = arith.constant 16 : i32
    %524 = arith.cmpi eq, %523, %c16_i32_276 : i32
    %525 = arith.extui %524 : i1 to i32
    %c0_i32_277 = arith.constant 0 : i32
    %526 = arith.cmpi eq, %525, %c0_i32_277 : i32
    %527 = arith.extui %526 : i1 to i32
    %c0_i32_278 = arith.constant 0 : i32
    %528 = arith.cmpi ne, %527, %c0_i32_278 : i32
    cf.cond_br %528, ^bb86, ^bb95
  ^bb94:  // pred: ^bb91
    %c1_i32_279 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_279) : (i32) -> ()
    cf.br ^bb93
  ^bb95:  // pred: ^bb93
    cf.br ^bb85
  ^bb96:  // 2 preds: ^bb85, ^bb97
    %529 = llvm.getelementptr %16[%468] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %530 = llvm.load volatile %529 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_280 = arith.constant 0 : i64
    %531 = arith.extui %463 : i32 to i64
    %532 = arith.addi %531, %c0_i64_280 : i64
    %c8_i64_281 = arith.constant 8 : i64
    %533 = arith.addi %532, %c8_i64_281 : i64
    %c0_i32_282 = arith.constant 0 : i32
    %534 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_282) : (!llvm.ptr, i32) -> i32
    %535 = arith.extui %534 : i32 to i64
    %c65536_i64_283 = arith.constant 65536 : i64
    %536 = arith.muli %535, %c65536_i64_283 : i64
    %537 = arith.cmpi ult, %533, %536 : i64
    cf.cond_br %537, ^bb98, ^bb99
  ^bb97:  // pred: ^bb85
    %c1_i32_284 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_284) : (i32) -> ()
    cf.br ^bb96
  ^bb98:  // 2 preds: ^bb96, ^bb99
    %538 = llvm.getelementptr %16[%532] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %530, %538 {alignment = 1 : i64} : i64, !llvm.ptr
    %539 = llvm.load %2 : !llvm.ptr -> i32
    %c272_i32_285 = arith.constant 272 : i32
    %540 = arith.addi %539, %c272_i32_285 : i32
    %c16_i32_286 = arith.constant 16 : i32
    %541 = arith.addi %540, %c16_i32_286 : i32
    %542 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_287 = arith.constant 16 : i32
    %543 = arith.addi %542, %c16_i32_287 : i32
    %c16_i32_288 = arith.constant 16 : i32
    %544 = arith.addi %543, %c16_i32_288 : i32
    llvm.store %544, %4 : i32, !llvm.ptr
    %c0_i64_289 = arith.constant 0 : i64
    %545 = arith.extui %544 : i32 to i64
    %546 = arith.addi %545, %c0_i64_289 : i64
    %c8_i64_290 = arith.constant 8 : i64
    %547 = arith.addi %546, %c8_i64_290 : i64
    %c0_i32_291 = arith.constant 0 : i32
    %548 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_291) : (!llvm.ptr, i32) -> i32
    %549 = arith.extui %548 : i32 to i64
    %c65536_i64_292 = arith.constant 65536 : i64
    %550 = arith.muli %549, %c65536_i64_292 : i64
    %551 = arith.cmpi ult, %547, %550 : i64
    cf.cond_br %551, ^bb100, ^bb101
  ^bb99:  // pred: ^bb96
    %c1_i32_293 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_293) : (i32) -> ()
    cf.br ^bb98
  ^bb100:  // 2 preds: ^bb98, ^bb101
    %552 = llvm.getelementptr %16[%546] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %553 = llvm.load volatile %552 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_294 = arith.constant 0 : i64
    %554 = arith.extui %541 : i32 to i64
    %555 = arith.addi %554, %c0_i64_294 : i64
    %c8_i64_295 = arith.constant 8 : i64
    %556 = arith.addi %555, %c8_i64_295 : i64
    %c0_i32_296 = arith.constant 0 : i32
    %557 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_296) : (!llvm.ptr, i32) -> i32
    %558 = arith.extui %557 : i32 to i64
    %c65536_i64_297 = arith.constant 65536 : i64
    %559 = arith.muli %558, %c65536_i64_297 : i64
    %560 = arith.cmpi ult, %556, %559 : i64
    cf.cond_br %560, ^bb102, ^bb103
  ^bb101:  // pred: ^bb98
    %c1_i32_298 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_298) : (i32) -> ()
    cf.br ^bb100
  ^bb102:  // 2 preds: ^bb100, ^bb103
    %561 = llvm.getelementptr %16[%555] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %553, %561 {alignment = 1 : i64} : i64, !llvm.ptr
    %562 = llvm.load %2 : !llvm.ptr -> i32
    %c272_i32_299 = arith.constant 272 : i32
    %563 = arith.addi %562, %c272_i32_299 : i32
    %c8_i32_300 = arith.constant 8 : i32
    %564 = arith.addi %563, %c8_i32_300 : i32
    %565 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_301 = arith.constant 16 : i32
    %566 = arith.addi %565, %c16_i32_301 : i32
    %c8_i32_302 = arith.constant 8 : i32
    %567 = arith.addi %566, %c8_i32_302 : i32
    llvm.store %567, %5 : i32, !llvm.ptr
    %c0_i64_303 = arith.constant 0 : i64
    %568 = arith.extui %567 : i32 to i64
    %569 = arith.addi %568, %c0_i64_303 : i64
    %c8_i64_304 = arith.constant 8 : i64
    %570 = arith.addi %569, %c8_i64_304 : i64
    %c0_i32_305 = arith.constant 0 : i32
    %571 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_305) : (!llvm.ptr, i32) -> i32
    %572 = arith.extui %571 : i32 to i64
    %c65536_i64_306 = arith.constant 65536 : i64
    %573 = arith.muli %572, %c65536_i64_306 : i64
    %574 = arith.cmpi ult, %570, %573 : i64
    cf.cond_br %574, ^bb104, ^bb105
  ^bb103:  // pred: ^bb100
    %c1_i32_307 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_307) : (i32) -> ()
    cf.br ^bb102
  ^bb104:  // 2 preds: ^bb102, ^bb105
    %575 = llvm.getelementptr %16[%569] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %576 = llvm.load volatile %575 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_308 = arith.constant 0 : i64
    %577 = arith.extui %564 : i32 to i64
    %578 = arith.addi %577, %c0_i64_308 : i64
    %c8_i64_309 = arith.constant 8 : i64
    %579 = arith.addi %578, %c8_i64_309 : i64
    %c0_i32_310 = arith.constant 0 : i32
    %580 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_310) : (!llvm.ptr, i32) -> i32
    %581 = arith.extui %580 : i32 to i64
    %c65536_i64_311 = arith.constant 65536 : i64
    %582 = arith.muli %581, %c65536_i64_311 : i64
    %583 = arith.cmpi ult, %579, %582 : i64
    cf.cond_br %583, ^bb106, ^bb107
  ^bb105:  // pred: ^bb102
    %c1_i32_312 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_312) : (i32) -> ()
    cf.br ^bb104
  ^bb106:  // 2 preds: ^bb104, ^bb107
    %584 = llvm.getelementptr %16[%578] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %576, %584 {alignment = 1 : i64} : i64, !llvm.ptr
    %585 = llvm.load %2 : !llvm.ptr -> i32
    %586 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i64_313 = arith.constant 16 : i64
    %587 = arith.extui %586 : i32 to i64
    %588 = arith.addi %587, %c16_i64_313 : i64
    %c8_i64_314 = arith.constant 8 : i64
    %589 = arith.addi %588, %c8_i64_314 : i64
    %c0_i32_315 = arith.constant 0 : i32
    %590 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_315) : (!llvm.ptr, i32) -> i32
    %591 = arith.extui %590 : i32 to i64
    %c65536_i64_316 = arith.constant 65536 : i64
    %592 = arith.muli %591, %c65536_i64_316 : i64
    %593 = arith.cmpi ult, %589, %592 : i64
    cf.cond_br %593, ^bb108, ^bb109
  ^bb107:  // pred: ^bb104
    %c1_i32_317 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_317) : (i32) -> ()
    cf.br ^bb106
  ^bb108:  // 2 preds: ^bb106, ^bb109
    %594 = llvm.getelementptr %16[%588] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %595 = llvm.load volatile %594 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c272_i64_318 = arith.constant 272 : i64
    %596 = arith.extui %585 : i32 to i64
    %597 = arith.addi %596, %c272_i64_318 : i64
    %c8_i64_319 = arith.constant 8 : i64
    %598 = arith.addi %597, %c8_i64_319 : i64
    %c0_i32_320 = arith.constant 0 : i32
    %599 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_320) : (!llvm.ptr, i32) -> i32
    %600 = arith.extui %599 : i32 to i64
    %c65536_i64_321 = arith.constant 65536 : i64
    %601 = arith.muli %600, %c65536_i64_321 : i64
    %602 = arith.cmpi ult, %598, %601 : i64
    cf.cond_br %602, ^bb110, ^bb111
  ^bb109:  // pred: ^bb106
    %c1_i32_322 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_322) : (i32) -> ()
    cf.br ^bb108
  ^bb110:  // 2 preds: ^bb108, ^bb111
    %603 = llvm.getelementptr %16[%597] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %595, %603 {alignment = 1 : i64} : i64, !llvm.ptr
    %604 = llvm.load %2 : !llvm.ptr -> i32
    %c240_i32_323 = arith.constant 240 : i32
    %605 = arith.addi %604, %c240_i32_323 : i32
    %c32_i32 = arith.constant 32 : i32
    %606 = llvm.load %2 : !llvm.ptr -> i32
    %c272_i32_324 = arith.constant 272 : i32
    %607 = arith.addi %606, %c272_i32_324 : i32
    %c32_i32_325 = arith.constant 32 : i32
    %c1048804_i32 = arith.constant 1048804 : i32
    call @f114(%arg0, %605, %c32_i32, %607, %c32_i32_325, %c1048804_i32) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %608 = llvm.load %2 : !llvm.ptr -> i32
    %c208_i32 = arith.constant 208 : i32
    %609 = arith.addi %608, %c208_i32 : i32
    %c8_i32_326 = arith.constant 8 : i32
    %610 = arith.addi %609, %c8_i32_326 : i32
    %611 = llvm.load %2 : !llvm.ptr -> i32
    %c240_i32_327 = arith.constant 240 : i32
    %612 = arith.addi %611, %c240_i32_327 : i32
    %c8_i32_328 = arith.constant 8 : i32
    %613 = arith.addi %612, %c8_i32_328 : i32
    llvm.store %613, %6 : i32, !llvm.ptr
    %c0_i64_329 = arith.constant 0 : i64
    %614 = arith.extui %613 : i32 to i64
    %615 = arith.addi %614, %c0_i64_329 : i64
    %c8_i64_330 = arith.constant 8 : i64
    %616 = arith.addi %615, %c8_i64_330 : i64
    %c0_i32_331 = arith.constant 0 : i32
    %617 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_331) : (!llvm.ptr, i32) -> i32
    %618 = arith.extui %617 : i32 to i64
    %c65536_i64_332 = arith.constant 65536 : i64
    %619 = arith.muli %618, %c65536_i64_332 : i64
    %620 = arith.cmpi ult, %616, %619 : i64
    cf.cond_br %620, ^bb112, ^bb113
  ^bb111:  // pred: ^bb108
    %c1_i32_333 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_333) : (i32) -> ()
    cf.br ^bb110
  ^bb112:  // 2 preds: ^bb110, ^bb113
    %621 = llvm.getelementptr %16[%615] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %622 = llvm.load volatile %621 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_334 = arith.constant 0 : i64
    %623 = arith.extui %610 : i32 to i64
    %624 = arith.addi %623, %c0_i64_334 : i64
    %c8_i64_335 = arith.constant 8 : i64
    %625 = arith.addi %624, %c8_i64_335 : i64
    %c0_i32_336 = arith.constant 0 : i32
    %626 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_336) : (!llvm.ptr, i32) -> i32
    %627 = arith.extui %626 : i32 to i64
    %c65536_i64_337 = arith.constant 65536 : i64
    %628 = arith.muli %627, %c65536_i64_337 : i64
    %629 = arith.cmpi ult, %625, %628 : i64
    cf.cond_br %629, ^bb114, ^bb115
  ^bb113:  // pred: ^bb110
    %c1_i32_338 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_338) : (i32) -> ()
    cf.br ^bb112
  ^bb114:  // 2 preds: ^bb112, ^bb115
    %630 = llvm.getelementptr %16[%624] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %622, %630 {alignment = 1 : i64} : i64, !llvm.ptr
    %631 = llvm.load %2 : !llvm.ptr -> i32
    %c208_i32_339 = arith.constant 208 : i32
    %632 = arith.addi %631, %c208_i32_339 : i32
    %c16_i32_340 = arith.constant 16 : i32
    %633 = arith.addi %632, %c16_i32_340 : i32
    %634 = llvm.load %2 : !llvm.ptr -> i32
    %c240_i32_341 = arith.constant 240 : i32
    %635 = arith.addi %634, %c240_i32_341 : i32
    %c16_i32_342 = arith.constant 16 : i32
    %636 = arith.addi %635, %c16_i32_342 : i32
    llvm.store %636, %7 : i32, !llvm.ptr
    %c0_i64_343 = arith.constant 0 : i64
    %637 = arith.extui %636 : i32 to i64
    %638 = arith.addi %637, %c0_i64_343 : i64
    %c8_i64_344 = arith.constant 8 : i64
    %639 = arith.addi %638, %c8_i64_344 : i64
    %c0_i32_345 = arith.constant 0 : i32
    %640 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_345) : (!llvm.ptr, i32) -> i32
    %641 = arith.extui %640 : i32 to i64
    %c65536_i64_346 = arith.constant 65536 : i64
    %642 = arith.muli %641, %c65536_i64_346 : i64
    %643 = arith.cmpi ult, %639, %642 : i64
    cf.cond_br %643, ^bb116, ^bb117
  ^bb115:  // pred: ^bb112
    %c1_i32_347 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_347) : (i32) -> ()
    cf.br ^bb114
  ^bb116:  // 2 preds: ^bb114, ^bb117
    %644 = llvm.getelementptr %16[%638] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %645 = llvm.load volatile %644 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_348 = arith.constant 0 : i64
    %646 = arith.extui %633 : i32 to i64
    %647 = arith.addi %646, %c0_i64_348 : i64
    %c8_i64_349 = arith.constant 8 : i64
    %648 = arith.addi %647, %c8_i64_349 : i64
    %c0_i32_350 = arith.constant 0 : i32
    %649 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_350) : (!llvm.ptr, i32) -> i32
    %650 = arith.extui %649 : i32 to i64
    %c65536_i64_351 = arith.constant 65536 : i64
    %651 = arith.muli %650, %c65536_i64_351 : i64
    %652 = arith.cmpi ult, %648, %651 : i64
    cf.cond_br %652, ^bb118, ^bb119
  ^bb117:  // pred: ^bb114
    %c1_i32_352 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_352) : (i32) -> ()
    cf.br ^bb116
  ^bb118:  // 2 preds: ^bb116, ^bb119
    %653 = llvm.getelementptr %16[%647] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %645, %653 {alignment = 1 : i64} : i64, !llvm.ptr
    %654 = llvm.load %2 : !llvm.ptr -> i32
    %c208_i32_353 = arith.constant 208 : i32
    %655 = arith.addi %654, %c208_i32_353 : i32
    %c24_i32_354 = arith.constant 24 : i32
    %656 = arith.addi %655, %c24_i32_354 : i32
    %657 = llvm.load %2 : !llvm.ptr -> i32
    %c240_i32_355 = arith.constant 240 : i32
    %658 = arith.addi %657, %c240_i32_355 : i32
    %c24_i32_356 = arith.constant 24 : i32
    %659 = arith.addi %658, %c24_i32_356 : i32
    llvm.store %659, %8 : i32, !llvm.ptr
    %c0_i64_357 = arith.constant 0 : i64
    %660 = arith.extui %659 : i32 to i64
    %661 = arith.addi %660, %c0_i64_357 : i64
    %c8_i64_358 = arith.constant 8 : i64
    %662 = arith.addi %661, %c8_i64_358 : i64
    %c0_i32_359 = arith.constant 0 : i32
    %663 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_359) : (!llvm.ptr, i32) -> i32
    %664 = arith.extui %663 : i32 to i64
    %c65536_i64_360 = arith.constant 65536 : i64
    %665 = arith.muli %664, %c65536_i64_360 : i64
    %666 = arith.cmpi ult, %662, %665 : i64
    cf.cond_br %666, ^bb120, ^bb121
  ^bb119:  // pred: ^bb116
    %c1_i32_361 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_361) : (i32) -> ()
    cf.br ^bb118
  ^bb120:  // 2 preds: ^bb118, ^bb121
    %667 = llvm.getelementptr %16[%661] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %668 = llvm.load volatile %667 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_362 = arith.constant 0 : i64
    %669 = arith.extui %656 : i32 to i64
    %670 = arith.addi %669, %c0_i64_362 : i64
    %c8_i64_363 = arith.constant 8 : i64
    %671 = arith.addi %670, %c8_i64_363 : i64
    %c0_i32_364 = arith.constant 0 : i32
    %672 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_364) : (!llvm.ptr, i32) -> i32
    %673 = arith.extui %672 : i32 to i64
    %c65536_i64_365 = arith.constant 65536 : i64
    %674 = arith.muli %673, %c65536_i64_365 : i64
    %675 = arith.cmpi ult, %671, %674 : i64
    cf.cond_br %675, ^bb122, ^bb123
  ^bb121:  // pred: ^bb118
    %c1_i32_366 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_366) : (i32) -> ()
    cf.br ^bb120
  ^bb122:  // 2 preds: ^bb120, ^bb123
    %676 = llvm.getelementptr %16[%670] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %668, %676 {alignment = 1 : i64} : i64, !llvm.ptr
    %677 = llvm.load %2 : !llvm.ptr -> i32
    %678 = llvm.load %2 : !llvm.ptr -> i32
    %c240_i64_367 = arith.constant 240 : i64
    %679 = arith.extui %678 : i32 to i64
    %680 = arith.addi %679, %c240_i64_367 : i64
    %c8_i64_368 = arith.constant 8 : i64
    %681 = arith.addi %680, %c8_i64_368 : i64
    %c0_i32_369 = arith.constant 0 : i32
    %682 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_369) : (!llvm.ptr, i32) -> i32
    %683 = arith.extui %682 : i32 to i64
    %c65536_i64_370 = arith.constant 65536 : i64
    %684 = arith.muli %683, %c65536_i64_370 : i64
    %685 = arith.cmpi ult, %681, %684 : i64
    cf.cond_br %685, ^bb124, ^bb125
  ^bb123:  // pred: ^bb120
    %c1_i32_371 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_371) : (i32) -> ()
    cf.br ^bb122
  ^bb124:  // 2 preds: ^bb122, ^bb125
    %686 = llvm.getelementptr %16[%680] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %687 = llvm.load volatile %686 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c208_i64 = arith.constant 208 : i64
    %688 = arith.extui %677 : i32 to i64
    %689 = arith.addi %688, %c208_i64 : i64
    %c8_i64_372 = arith.constant 8 : i64
    %690 = arith.addi %689, %c8_i64_372 : i64
    %c0_i32_373 = arith.constant 0 : i32
    %691 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_373) : (!llvm.ptr, i32) -> i32
    %692 = arith.extui %691 : i32 to i64
    %c65536_i64_374 = arith.constant 65536 : i64
    %693 = arith.muli %692, %c65536_i64_374 : i64
    %694 = arith.cmpi ult, %690, %693 : i64
    cf.cond_br %694, ^bb126, ^bb127
  ^bb125:  // pred: ^bb122
    %c1_i32_375 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_375) : (i32) -> ()
    cf.br ^bb124
  ^bb126:  // 2 preds: ^bb124, ^bb127
    %695 = llvm.getelementptr %16[%689] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %687, %695 {alignment = 1 : i64} : i64, !llvm.ptr
    %696 = llvm.load %8 : !llvm.ptr -> i32
    %c0_i64_376 = arith.constant 0 : i64
    %c0_i64_377 = arith.constant 0 : i64
    %697 = arith.extui %696 : i32 to i64
    %698 = arith.addi %697, %c0_i64_377 : i64
    %c8_i64_378 = arith.constant 8 : i64
    %699 = arith.addi %698, %c8_i64_378 : i64
    %c0_i32_379 = arith.constant 0 : i32
    %700 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_379) : (!llvm.ptr, i32) -> i32
    %701 = arith.extui %700 : i32 to i64
    %c65536_i64_380 = arith.constant 65536 : i64
    %702 = arith.muli %701, %c65536_i64_380 : i64
    %703 = arith.cmpi ult, %699, %702 : i64
    cf.cond_br %703, ^bb128, ^bb129
  ^bb127:  // pred: ^bb124
    %c1_i32_381 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_381) : (i32) -> ()
    cf.br ^bb126
  ^bb128:  // 2 preds: ^bb126, ^bb129
    %704 = llvm.getelementptr %16[%698] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_376, %704 {alignment = 1 : i64} : i64, !llvm.ptr
    %705 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_382 = arith.constant 0 : i64
    %c0_i64_383 = arith.constant 0 : i64
    %706 = arith.extui %705 : i32 to i64
    %707 = arith.addi %706, %c0_i64_383 : i64
    %c8_i64_384 = arith.constant 8 : i64
    %708 = arith.addi %707, %c8_i64_384 : i64
    %c0_i32_385 = arith.constant 0 : i32
    %709 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_385) : (!llvm.ptr, i32) -> i32
    %710 = arith.extui %709 : i32 to i64
    %c65536_i64_386 = arith.constant 65536 : i64
    %711 = arith.muli %710, %c65536_i64_386 : i64
    %712 = arith.cmpi ult, %708, %711 : i64
    cf.cond_br %712, ^bb130, ^bb131
  ^bb129:  // pred: ^bb126
    %c1_i32_387 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_387) : (i32) -> ()
    cf.br ^bb128
  ^bb130:  // 2 preds: ^bb128, ^bb131
    %713 = llvm.getelementptr %16[%707] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_382, %713 {alignment = 1 : i64} : i64, !llvm.ptr
    %714 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_388 = arith.constant 0 : i64
    %c0_i64_389 = arith.constant 0 : i64
    %715 = arith.extui %714 : i32 to i64
    %716 = arith.addi %715, %c0_i64_389 : i64
    %c8_i64_390 = arith.constant 8 : i64
    %717 = arith.addi %716, %c8_i64_390 : i64
    %c0_i32_391 = arith.constant 0 : i32
    %718 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_391) : (!llvm.ptr, i32) -> i32
    %719 = arith.extui %718 : i32 to i64
    %c65536_i64_392 = arith.constant 65536 : i64
    %720 = arith.muli %719, %c65536_i64_392 : i64
    %721 = arith.cmpi ult, %717, %720 : i64
    cf.cond_br %721, ^bb132, ^bb133
  ^bb131:  // pred: ^bb128
    %c1_i32_393 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_393) : (i32) -> ()
    cf.br ^bb130
  ^bb132:  // 2 preds: ^bb130, ^bb133
    %722 = llvm.getelementptr %16[%716] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_388, %722 {alignment = 1 : i64} : i64, !llvm.ptr
    %723 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_394 = arith.constant 0 : i64
    %c240_i64_395 = arith.constant 240 : i64
    %724 = arith.extui %723 : i32 to i64
    %725 = arith.addi %724, %c240_i64_395 : i64
    %c8_i64_396 = arith.constant 8 : i64
    %726 = arith.addi %725, %c8_i64_396 : i64
    %c0_i32_397 = arith.constant 0 : i32
    %727 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_397) : (!llvm.ptr, i32) -> i32
    %728 = arith.extui %727 : i32 to i64
    %c65536_i64_398 = arith.constant 65536 : i64
    %729 = arith.muli %728, %c65536_i64_398 : i64
    %730 = arith.cmpi ult, %726, %729 : i64
    cf.cond_br %730, ^bb134, ^bb135
  ^bb133:  // pred: ^bb130
    %c1_i32_399 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_399) : (i32) -> ()
    cf.br ^bb132
  ^bb134:  // 2 preds: ^bb132, ^bb135
    %731 = llvm.getelementptr %16[%725] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_394, %731 {alignment = 1 : i64} : i64, !llvm.ptr
    %732 = llvm.load %3 : !llvm.ptr -> i32
    %733 = llvm.load %1 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %734 = arith.addi %733, %c64_i32 : i32
    %c0_i64_400 = arith.constant 0 : i64
    %735 = arith.extui %734 : i32 to i64
    %736 = arith.addi %735, %c0_i64_400 : i64
    %c8_i64_401 = arith.constant 8 : i64
    %737 = arith.addi %736, %c8_i64_401 : i64
    %c0_i32_402 = arith.constant 0 : i32
    %738 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_402) : (!llvm.ptr, i32) -> i32
    %739 = arith.extui %738 : i32 to i64
    %c65536_i64_403 = arith.constant 65536 : i64
    %740 = arith.muli %739, %c65536_i64_403 : i64
    %741 = arith.cmpi ult, %737, %740 : i64
    cf.cond_br %741, ^bb136, ^bb137
  ^bb135:  // pred: ^bb132
    %c1_i32_404 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_404) : (i32) -> ()
    cf.br ^bb134
  ^bb136:  // 2 preds: ^bb134, ^bb137
    %742 = llvm.getelementptr %16[%736] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %743 = llvm.load volatile %742 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_405 = arith.constant 0 : i64
    %744 = arith.extui %732 : i32 to i64
    %745 = arith.addi %744, %c0_i64_405 : i64
    %c8_i64_406 = arith.constant 8 : i64
    %746 = arith.addi %745, %c8_i64_406 : i64
    %c0_i32_407 = arith.constant 0 : i32
    %747 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_407) : (!llvm.ptr, i32) -> i32
    %748 = arith.extui %747 : i32 to i64
    %c65536_i64_408 = arith.constant 65536 : i64
    %749 = arith.muli %748, %c65536_i64_408 : i64
    %750 = arith.cmpi ult, %746, %749 : i64
    cf.cond_br %750, ^bb138, ^bb139
  ^bb137:  // pred: ^bb134
    %c1_i32_409 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_409) : (i32) -> ()
    cf.br ^bb136
  ^bb138:  // 2 preds: ^bb136, ^bb139
    %751 = llvm.getelementptr %16[%745] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %743, %751 {alignment = 1 : i64} : i64, !llvm.ptr
    %752 = llvm.load %4 : !llvm.ptr -> i32
    %753 = llvm.load %1 : !llvm.ptr -> i32
    %c56_i32 = arith.constant 56 : i32
    %754 = arith.addi %753, %c56_i32 : i32
    %c0_i64_410 = arith.constant 0 : i64
    %755 = arith.extui %754 : i32 to i64
    %756 = arith.addi %755, %c0_i64_410 : i64
    %c8_i64_411 = arith.constant 8 : i64
    %757 = arith.addi %756, %c8_i64_411 : i64
    %c0_i32_412 = arith.constant 0 : i32
    %758 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_412) : (!llvm.ptr, i32) -> i32
    %759 = arith.extui %758 : i32 to i64
    %c65536_i64_413 = arith.constant 65536 : i64
    %760 = arith.muli %759, %c65536_i64_413 : i64
    %761 = arith.cmpi ult, %757, %760 : i64
    cf.cond_br %761, ^bb140, ^bb141
  ^bb139:  // pred: ^bb136
    %c1_i32_414 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_414) : (i32) -> ()
    cf.br ^bb138
  ^bb140:  // 2 preds: ^bb138, ^bb141
    %762 = llvm.getelementptr %16[%756] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %763 = llvm.load volatile %762 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_415 = arith.constant 0 : i64
    %764 = arith.extui %752 : i32 to i64
    %765 = arith.addi %764, %c0_i64_415 : i64
    %c8_i64_416 = arith.constant 8 : i64
    %766 = arith.addi %765, %c8_i64_416 : i64
    %c0_i32_417 = arith.constant 0 : i32
    %767 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_417) : (!llvm.ptr, i32) -> i32
    %768 = arith.extui %767 : i32 to i64
    %c65536_i64_418 = arith.constant 65536 : i64
    %769 = arith.muli %768, %c65536_i64_418 : i64
    %770 = arith.cmpi ult, %766, %769 : i64
    cf.cond_br %770, ^bb142, ^bb143
  ^bb141:  // pred: ^bb138
    %c1_i32_419 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_419) : (i32) -> ()
    cf.br ^bb140
  ^bb142:  // 2 preds: ^bb140, ^bb143
    %771 = llvm.getelementptr %16[%765] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %763, %771 {alignment = 1 : i64} : i64, !llvm.ptr
    %772 = llvm.load %5 : !llvm.ptr -> i32
    %773 = llvm.load %1 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %774 = arith.addi %773, %c48_i32 : i32
    %c0_i64_420 = arith.constant 0 : i64
    %775 = arith.extui %774 : i32 to i64
    %776 = arith.addi %775, %c0_i64_420 : i64
    %c8_i64_421 = arith.constant 8 : i64
    %777 = arith.addi %776, %c8_i64_421 : i64
    %c0_i32_422 = arith.constant 0 : i32
    %778 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_422) : (!llvm.ptr, i32) -> i32
    %779 = arith.extui %778 : i32 to i64
    %c65536_i64_423 = arith.constant 65536 : i64
    %780 = arith.muli %779, %c65536_i64_423 : i64
    %781 = arith.cmpi ult, %777, %780 : i64
    cf.cond_br %781, ^bb144, ^bb145
  ^bb143:  // pred: ^bb140
    %c1_i32_424 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_424) : (i32) -> ()
    cf.br ^bb142
  ^bb144:  // 2 preds: ^bb142, ^bb145
    %782 = llvm.getelementptr %16[%776] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %783 = llvm.load volatile %782 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_425 = arith.constant 0 : i64
    %784 = arith.extui %772 : i32 to i64
    %785 = arith.addi %784, %c0_i64_425 : i64
    %c8_i64_426 = arith.constant 8 : i64
    %786 = arith.addi %785, %c8_i64_426 : i64
    %c0_i32_427 = arith.constant 0 : i32
    %787 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_427) : (!llvm.ptr, i32) -> i32
    %788 = arith.extui %787 : i32 to i64
    %c65536_i64_428 = arith.constant 65536 : i64
    %789 = arith.muli %788, %c65536_i64_428 : i64
    %790 = arith.cmpi ult, %786, %789 : i64
    cf.cond_br %790, ^bb146, ^bb147
  ^bb145:  // pred: ^bb142
    %c1_i32_429 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_429) : (i32) -> ()
    cf.br ^bb144
  ^bb146:  // 2 preds: ^bb144, ^bb147
    %791 = llvm.getelementptr %16[%785] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %783, %791 {alignment = 1 : i64} : i64, !llvm.ptr
    %792 = llvm.load %2 : !llvm.ptr -> i32
    %793 = llvm.load %1 : !llvm.ptr -> i32
    %c40_i64 = arith.constant 40 : i64
    %794 = arith.extui %793 : i32 to i64
    %795 = arith.addi %794, %c40_i64 : i64
    %c8_i64_430 = arith.constant 8 : i64
    %796 = arith.addi %795, %c8_i64_430 : i64
    %c0_i32_431 = arith.constant 0 : i32
    %797 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_431) : (!llvm.ptr, i32) -> i32
    %798 = arith.extui %797 : i32 to i64
    %c65536_i64_432 = arith.constant 65536 : i64
    %799 = arith.muli %798, %c65536_i64_432 : i64
    %800 = arith.cmpi ult, %796, %799 : i64
    cf.cond_br %800, ^bb148, ^bb149
  ^bb147:  // pred: ^bb144
    %c1_i32_433 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_433) : (i32) -> ()
    cf.br ^bb146
  ^bb148:  // 2 preds: ^bb146, ^bb149
    %801 = llvm.getelementptr %16[%795] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %802 = llvm.load volatile %801 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c16_i64_434 = arith.constant 16 : i64
    %803 = arith.extui %792 : i32 to i64
    %804 = arith.addi %803, %c16_i64_434 : i64
    %c8_i64_435 = arith.constant 8 : i64
    %805 = arith.addi %804, %c8_i64_435 : i64
    %c0_i32_436 = arith.constant 0 : i32
    %806 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_436) : (!llvm.ptr, i32) -> i32
    %807 = arith.extui %806 : i32 to i64
    %c65536_i64_437 = arith.constant 65536 : i64
    %808 = arith.muli %807, %c65536_i64_437 : i64
    %809 = arith.cmpi ult, %805, %808 : i64
    cf.cond_br %809, ^bb150, ^bb151
  ^bb149:  // pred: ^bb146
    %c1_i32_438 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_438) : (i32) -> ()
    cf.br ^bb148
  ^bb150:  // 2 preds: ^bb148, ^bb151
    %810 = llvm.getelementptr %16[%804] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %802, %810 {alignment = 1 : i64} : i64, !llvm.ptr
    %811 = llvm.load %2 : !llvm.ptr -> i32
    %c47_i32_439 = arith.constant 47 : i32
    %812 = arith.addi %811, %c47_i32_439 : i32
    llvm.store %812, %3 : i32, !llvm.ptr
    %c0_i32_440 = arith.constant 0 : i32
    llvm.store %c0_i32_440, %4 : i32, !llvm.ptr
    cf.br ^bb153
  ^bb151:  // pred: ^bb148
    %c1_i32_441 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_441) : (i32) -> ()
    cf.br ^bb150
  ^bb152:  // pred: ^bb162
    %813 = llvm.load %2 : !llvm.ptr -> i32
    %c272_i32_442 = arith.constant 272 : i32
    %814 = arith.addi %813, %c272_i32_442 : i32
    %c24_i32_443 = arith.constant 24 : i32
    %815 = arith.addi %814, %c24_i32_443 : i32
    %816 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_444 = arith.constant 16 : i32
    %817 = arith.addi %816, %c16_i32_444 : i32
    %c24_i32_445 = arith.constant 24 : i32
    %818 = arith.addi %817, %c24_i32_445 : i32
    llvm.store %818, %3 : i32, !llvm.ptr
    %c0_i64_446 = arith.constant 0 : i64
    %819 = arith.extui %818 : i32 to i64
    %820 = arith.addi %819, %c0_i64_446 : i64
    %c8_i64_447 = arith.constant 8 : i64
    %821 = arith.addi %820, %c8_i64_447 : i64
    %c0_i32_448 = arith.constant 0 : i32
    %822 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_448) : (!llvm.ptr, i32) -> i32
    %823 = arith.extui %822 : i32 to i64
    %c65536_i64_449 = arith.constant 65536 : i64
    %824 = arith.muli %823, %c65536_i64_449 : i64
    %825 = arith.cmpi ult, %821, %824 : i64
    cf.cond_br %825, ^bb163, ^bb164
  ^bb153:  // 2 preds: ^bb150, ^bb160
    %826 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_450 = arith.constant 16 : i32
    %827 = arith.addi %826, %c16_i32_450 : i32
    %828 = llvm.load %4 : !llvm.ptr -> i32
    %829 = arith.addi %827, %828 : i32
    llvm.store %829, %5 : i32, !llvm.ptr
    %c0_i64_451 = arith.constant 0 : i64
    %830 = arith.extui %829 : i32 to i64
    %831 = arith.addi %830, %c0_i64_451 : i64
    %c1_i64_452 = arith.constant 1 : i64
    %832 = arith.addi %831, %c1_i64_452 : i64
    %c0_i32_453 = arith.constant 0 : i32
    %833 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_453) : (!llvm.ptr, i32) -> i32
    %834 = arith.extui %833 : i32 to i64
    %c65536_i64_454 = arith.constant 65536 : i64
    %835 = arith.muli %834, %c65536_i64_454 : i64
    %836 = arith.cmpi ult, %832, %835 : i64
    cf.cond_br %836, ^bb154, ^bb155
  ^bb154:  // 2 preds: ^bb153, ^bb155
    %837 = llvm.getelementptr %16[%831] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %838 = llvm.load volatile %837 {alignment = 1 : i64} : !llvm.ptr -> i8
    %839 = arith.extui %838 : i8 to i32
    llvm.store %839, %6 : i32, !llvm.ptr
    %840 = llvm.load %5 : !llvm.ptr -> i32
    %841 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_455 = arith.constant 0 : i64
    %842 = arith.extui %841 : i32 to i64
    %843 = arith.addi %842, %c0_i64_455 : i64
    %c1_i64_456 = arith.constant 1 : i64
    %844 = arith.addi %843, %c1_i64_456 : i64
    %c0_i32_457 = arith.constant 0 : i32
    %845 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_457) : (!llvm.ptr, i32) -> i32
    %846 = arith.extui %845 : i32 to i64
    %c65536_i64_458 = arith.constant 65536 : i64
    %847 = arith.muli %846, %c65536_i64_458 : i64
    %848 = arith.cmpi ult, %844, %847 : i64
    cf.cond_br %848, ^bb156, ^bb157
  ^bb155:  // pred: ^bb153
    %c1_i32_459 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_459) : (i32) -> ()
    cf.br ^bb154
  ^bb156:  // 2 preds: ^bb154, ^bb157
    %849 = llvm.getelementptr %16[%843] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %850 = llvm.load volatile %849 {alignment = 1 : i64} : !llvm.ptr -> i8
    %851 = arith.extui %850 : i8 to i32
    %c0_i64_460 = arith.constant 0 : i64
    %852 = arith.extui %840 : i32 to i64
    %853 = arith.addi %852, %c0_i64_460 : i64
    %c1_i64_461 = arith.constant 1 : i64
    %854 = arith.addi %853, %c1_i64_461 : i64
    %c0_i32_462 = arith.constant 0 : i32
    %855 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_462) : (!llvm.ptr, i32) -> i32
    %856 = arith.extui %855 : i32 to i64
    %c65536_i64_463 = arith.constant 65536 : i64
    %857 = arith.muli %856, %c65536_i64_463 : i64
    %858 = arith.cmpi ult, %854, %857 : i64
    cf.cond_br %858, ^bb158, ^bb159
  ^bb157:  // pred: ^bb154
    %c1_i32_464 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_464) : (i32) -> ()
    cf.br ^bb156
  ^bb158:  // 2 preds: ^bb156, ^bb159
    %859 = llvm.getelementptr %16[%853] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %860 = arith.trunci %851 : i32 to i8
    llvm.store volatile %860, %859 {alignment = 1 : i64} : i8, !llvm.ptr
    %861 = llvm.load %3 : !llvm.ptr -> i32
    %862 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_465 = arith.constant 0 : i64
    %863 = arith.extui %861 : i32 to i64
    %864 = arith.addi %863, %c0_i64_465 : i64
    %c1_i64_466 = arith.constant 1 : i64
    %865 = arith.addi %864, %c1_i64_466 : i64
    %c0_i32_467 = arith.constant 0 : i32
    %866 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_467) : (!llvm.ptr, i32) -> i32
    %867 = arith.extui %866 : i32 to i64
    %c65536_i64_468 = arith.constant 65536 : i64
    %868 = arith.muli %867, %c65536_i64_468 : i64
    %869 = arith.cmpi ult, %865, %868 : i64
    cf.cond_br %869, ^bb160, ^bb161
  ^bb159:  // pred: ^bb156
    %c1_i32_469 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_469) : (i32) -> ()
    cf.br ^bb158
  ^bb160:  // 2 preds: ^bb158, ^bb161
    %870 = llvm.getelementptr %16[%864] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %871 = arith.trunci %862 : i32 to i8
    llvm.store volatile %871, %870 {alignment = 1 : i64} : i8, !llvm.ptr
    %872 = llvm.load %3 : !llvm.ptr -> i32
    %c-1_i32_470 = arith.constant -1 : i32
    %873 = arith.addi %872, %c-1_i32_470 : i32
    llvm.store %873, %3 : i32, !llvm.ptr
    %874 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i32_471 = arith.constant 1 : i32
    %875 = arith.addi %874, %c1_i32_471 : i32
    llvm.store %875, %4 : i32, !llvm.ptr
    %c16_i32_472 = arith.constant 16 : i32
    %876 = arith.cmpi eq, %875, %c16_i32_472 : i32
    %877 = arith.extui %876 : i1 to i32
    %c0_i32_473 = arith.constant 0 : i32
    %878 = arith.cmpi eq, %877, %c0_i32_473 : i32
    %879 = arith.extui %878 : i1 to i32
    %c0_i32_474 = arith.constant 0 : i32
    %880 = arith.cmpi ne, %879, %c0_i32_474 : i32
    cf.cond_br %880, ^bb153, ^bb162
  ^bb161:  // pred: ^bb158
    %c1_i32_475 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_475) : (i32) -> ()
    cf.br ^bb160
  ^bb162:  // pred: ^bb160
    cf.br ^bb152
  ^bb163:  // 2 preds: ^bb152, ^bb164
    %881 = llvm.getelementptr %16[%820] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %882 = llvm.load volatile %881 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_476 = arith.constant 0 : i64
    %883 = arith.extui %815 : i32 to i64
    %884 = arith.addi %883, %c0_i64_476 : i64
    %c8_i64_477 = arith.constant 8 : i64
    %885 = arith.addi %884, %c8_i64_477 : i64
    %c0_i32_478 = arith.constant 0 : i32
    %886 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_478) : (!llvm.ptr, i32) -> i32
    %887 = arith.extui %886 : i32 to i64
    %c65536_i64_479 = arith.constant 65536 : i64
    %888 = arith.muli %887, %c65536_i64_479 : i64
    %889 = arith.cmpi ult, %885, %888 : i64
    cf.cond_br %889, ^bb165, ^bb166
  ^bb164:  // pred: ^bb152
    %c1_i32_480 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_480) : (i32) -> ()
    cf.br ^bb163
  ^bb165:  // 2 preds: ^bb163, ^bb166
    %890 = llvm.getelementptr %16[%884] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %882, %890 {alignment = 1 : i64} : i64, !llvm.ptr
    %891 = llvm.load %2 : !llvm.ptr -> i32
    %c272_i32_481 = arith.constant 272 : i32
    %892 = arith.addi %891, %c272_i32_481 : i32
    %c16_i32_482 = arith.constant 16 : i32
    %893 = arith.addi %892, %c16_i32_482 : i32
    %894 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_483 = arith.constant 16 : i32
    %895 = arith.addi %894, %c16_i32_483 : i32
    %c16_i32_484 = arith.constant 16 : i32
    %896 = arith.addi %895, %c16_i32_484 : i32
    llvm.store %896, %4 : i32, !llvm.ptr
    %c0_i64_485 = arith.constant 0 : i64
    %897 = arith.extui %896 : i32 to i64
    %898 = arith.addi %897, %c0_i64_485 : i64
    %c8_i64_486 = arith.constant 8 : i64
    %899 = arith.addi %898, %c8_i64_486 : i64
    %c0_i32_487 = arith.constant 0 : i32
    %900 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_487) : (!llvm.ptr, i32) -> i32
    %901 = arith.extui %900 : i32 to i64
    %c65536_i64_488 = arith.constant 65536 : i64
    %902 = arith.muli %901, %c65536_i64_488 : i64
    %903 = arith.cmpi ult, %899, %902 : i64
    cf.cond_br %903, ^bb167, ^bb168
  ^bb166:  // pred: ^bb163
    %c1_i32_489 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_489) : (i32) -> ()
    cf.br ^bb165
  ^bb167:  // 2 preds: ^bb165, ^bb168
    %904 = llvm.getelementptr %16[%898] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %905 = llvm.load volatile %904 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_490 = arith.constant 0 : i64
    %906 = arith.extui %893 : i32 to i64
    %907 = arith.addi %906, %c0_i64_490 : i64
    %c8_i64_491 = arith.constant 8 : i64
    %908 = arith.addi %907, %c8_i64_491 : i64
    %c0_i32_492 = arith.constant 0 : i32
    %909 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_492) : (!llvm.ptr, i32) -> i32
    %910 = arith.extui %909 : i32 to i64
    %c65536_i64_493 = arith.constant 65536 : i64
    %911 = arith.muli %910, %c65536_i64_493 : i64
    %912 = arith.cmpi ult, %908, %911 : i64
    cf.cond_br %912, ^bb169, ^bb170
  ^bb168:  // pred: ^bb165
    %c1_i32_494 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_494) : (i32) -> ()
    cf.br ^bb167
  ^bb169:  // 2 preds: ^bb167, ^bb170
    %913 = llvm.getelementptr %16[%907] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %905, %913 {alignment = 1 : i64} : i64, !llvm.ptr
    %914 = llvm.load %2 : !llvm.ptr -> i32
    %c272_i32_495 = arith.constant 272 : i32
    %915 = arith.addi %914, %c272_i32_495 : i32
    %c8_i32_496 = arith.constant 8 : i32
    %916 = arith.addi %915, %c8_i32_496 : i32
    %917 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_497 = arith.constant 16 : i32
    %918 = arith.addi %917, %c16_i32_497 : i32
    %c8_i32_498 = arith.constant 8 : i32
    %919 = arith.addi %918, %c8_i32_498 : i32
    llvm.store %919, %5 : i32, !llvm.ptr
    %c0_i64_499 = arith.constant 0 : i64
    %920 = arith.extui %919 : i32 to i64
    %921 = arith.addi %920, %c0_i64_499 : i64
    %c8_i64_500 = arith.constant 8 : i64
    %922 = arith.addi %921, %c8_i64_500 : i64
    %c0_i32_501 = arith.constant 0 : i32
    %923 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_501) : (!llvm.ptr, i32) -> i32
    %924 = arith.extui %923 : i32 to i64
    %c65536_i64_502 = arith.constant 65536 : i64
    %925 = arith.muli %924, %c65536_i64_502 : i64
    %926 = arith.cmpi ult, %922, %925 : i64
    cf.cond_br %926, ^bb171, ^bb172
  ^bb170:  // pred: ^bb167
    %c1_i32_503 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_503) : (i32) -> ()
    cf.br ^bb169
  ^bb171:  // 2 preds: ^bb169, ^bb172
    %927 = llvm.getelementptr %16[%921] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %928 = llvm.load volatile %927 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_504 = arith.constant 0 : i64
    %929 = arith.extui %916 : i32 to i64
    %930 = arith.addi %929, %c0_i64_504 : i64
    %c8_i64_505 = arith.constant 8 : i64
    %931 = arith.addi %930, %c8_i64_505 : i64
    %c0_i32_506 = arith.constant 0 : i32
    %932 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_506) : (!llvm.ptr, i32) -> i32
    %933 = arith.extui %932 : i32 to i64
    %c65536_i64_507 = arith.constant 65536 : i64
    %934 = arith.muli %933, %c65536_i64_507 : i64
    %935 = arith.cmpi ult, %931, %934 : i64
    cf.cond_br %935, ^bb173, ^bb174
  ^bb172:  // pred: ^bb169
    %c1_i32_508 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_508) : (i32) -> ()
    cf.br ^bb171
  ^bb173:  // 2 preds: ^bb171, ^bb174
    %936 = llvm.getelementptr %16[%930] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %928, %936 {alignment = 1 : i64} : i64, !llvm.ptr
    %937 = llvm.load %2 : !llvm.ptr -> i32
    %938 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i64_509 = arith.constant 16 : i64
    %939 = arith.extui %938 : i32 to i64
    %940 = arith.addi %939, %c16_i64_509 : i64
    %c8_i64_510 = arith.constant 8 : i64
    %941 = arith.addi %940, %c8_i64_510 : i64
    %c0_i32_511 = arith.constant 0 : i32
    %942 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_511) : (!llvm.ptr, i32) -> i32
    %943 = arith.extui %942 : i32 to i64
    %c65536_i64_512 = arith.constant 65536 : i64
    %944 = arith.muli %943, %c65536_i64_512 : i64
    %945 = arith.cmpi ult, %941, %944 : i64
    cf.cond_br %945, ^bb175, ^bb176
  ^bb174:  // pred: ^bb171
    %c1_i32_513 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_513) : (i32) -> ()
    cf.br ^bb173
  ^bb175:  // 2 preds: ^bb173, ^bb176
    %946 = llvm.getelementptr %16[%940] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %947 = llvm.load volatile %946 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c272_i64_514 = arith.constant 272 : i64
    %948 = arith.extui %937 : i32 to i64
    %949 = arith.addi %948, %c272_i64_514 : i64
    %c8_i64_515 = arith.constant 8 : i64
    %950 = arith.addi %949, %c8_i64_515 : i64
    %c0_i32_516 = arith.constant 0 : i32
    %951 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_516) : (!llvm.ptr, i32) -> i32
    %952 = arith.extui %951 : i32 to i64
    %c65536_i64_517 = arith.constant 65536 : i64
    %953 = arith.muli %952, %c65536_i64_517 : i64
    %954 = arith.cmpi ult, %950, %953 : i64
    cf.cond_br %954, ^bb177, ^bb178
  ^bb176:  // pred: ^bb173
    %c1_i32_518 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_518) : (i32) -> ()
    cf.br ^bb175
  ^bb177:  // 2 preds: ^bb175, ^bb178
    %955 = llvm.getelementptr %16[%949] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %947, %955 {alignment = 1 : i64} : i64, !llvm.ptr
    %956 = llvm.load %2 : !llvm.ptr -> i32
    %c240_i32_519 = arith.constant 240 : i32
    %957 = arith.addi %956, %c240_i32_519 : i32
    %c32_i32_520 = arith.constant 32 : i32
    %958 = llvm.load %2 : !llvm.ptr -> i32
    %c272_i32_521 = arith.constant 272 : i32
    %959 = arith.addi %958, %c272_i32_521 : i32
    %c32_i32_522 = arith.constant 32 : i32
    %c1048804_i32_523 = arith.constant 1048804 : i32
    call @f114(%arg0, %957, %c32_i32_520, %959, %c32_i32_522, %c1048804_i32_523) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %960 = llvm.load %2 : !llvm.ptr -> i32
    %c88_i32_524 = arith.constant 88 : i32
    %961 = arith.addi %960, %c88_i32_524 : i32
    %962 = llvm.load %2 : !llvm.ptr -> i32
    %c240_i32_525 = arith.constant 240 : i32
    %963 = arith.addi %962, %c240_i32_525 : i32
    %c8_i32_526 = arith.constant 8 : i32
    %964 = arith.addi %963, %c8_i32_526 : i32
    %c0_i64_527 = arith.constant 0 : i64
    %965 = arith.extui %964 : i32 to i64
    %966 = arith.addi %965, %c0_i64_527 : i64
    %c8_i64_528 = arith.constant 8 : i64
    %967 = arith.addi %966, %c8_i64_528 : i64
    %c0_i32_529 = arith.constant 0 : i32
    %968 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_529) : (!llvm.ptr, i32) -> i32
    %969 = arith.extui %968 : i32 to i64
    %c65536_i64_530 = arith.constant 65536 : i64
    %970 = arith.muli %969, %c65536_i64_530 : i64
    %971 = arith.cmpi ult, %967, %970 : i64
    cf.cond_br %971, ^bb179, ^bb180
  ^bb178:  // pred: ^bb175
    %c1_i32_531 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_531) : (i32) -> ()
    cf.br ^bb177
  ^bb179:  // 2 preds: ^bb177, ^bb180
    %972 = llvm.getelementptr %16[%966] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %973 = llvm.load volatile %972 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_532 = arith.constant 0 : i64
    %974 = arith.extui %961 : i32 to i64
    %975 = arith.addi %974, %c0_i64_532 : i64
    %c8_i64_533 = arith.constant 8 : i64
    %976 = arith.addi %975, %c8_i64_533 : i64
    %c0_i32_534 = arith.constant 0 : i32
    %977 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_534) : (!llvm.ptr, i32) -> i32
    %978 = arith.extui %977 : i32 to i64
    %c65536_i64_535 = arith.constant 65536 : i64
    %979 = arith.muli %978, %c65536_i64_535 : i64
    %980 = arith.cmpi ult, %976, %979 : i64
    cf.cond_br %980, ^bb181, ^bb182
  ^bb180:  // pred: ^bb177
    %c1_i32_536 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_536) : (i32) -> ()
    cf.br ^bb179
  ^bb181:  // 2 preds: ^bb179, ^bb182
    %981 = llvm.getelementptr %16[%975] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %973, %981 {alignment = 1 : i64} : i64, !llvm.ptr
    %982 = llvm.load %2 : !llvm.ptr -> i32
    %c96_i32_537 = arith.constant 96 : i32
    %983 = arith.addi %982, %c96_i32_537 : i32
    %984 = llvm.load %2 : !llvm.ptr -> i32
    %c240_i32_538 = arith.constant 240 : i32
    %985 = arith.addi %984, %c240_i32_538 : i32
    %c16_i32_539 = arith.constant 16 : i32
    %986 = arith.addi %985, %c16_i32_539 : i32
    %c0_i64_540 = arith.constant 0 : i64
    %987 = arith.extui %986 : i32 to i64
    %988 = arith.addi %987, %c0_i64_540 : i64
    %c8_i64_541 = arith.constant 8 : i64
    %989 = arith.addi %988, %c8_i64_541 : i64
    %c0_i32_542 = arith.constant 0 : i32
    %990 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_542) : (!llvm.ptr, i32) -> i32
    %991 = arith.extui %990 : i32 to i64
    %c65536_i64_543 = arith.constant 65536 : i64
    %992 = arith.muli %991, %c65536_i64_543 : i64
    %993 = arith.cmpi ult, %989, %992 : i64
    cf.cond_br %993, ^bb183, ^bb184
  ^bb182:  // pred: ^bb179
    %c1_i32_544 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_544) : (i32) -> ()
    cf.br ^bb181
  ^bb183:  // 2 preds: ^bb181, ^bb184
    %994 = llvm.getelementptr %16[%988] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %995 = llvm.load volatile %994 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_545 = arith.constant 0 : i64
    %996 = arith.extui %983 : i32 to i64
    %997 = arith.addi %996, %c0_i64_545 : i64
    %c8_i64_546 = arith.constant 8 : i64
    %998 = arith.addi %997, %c8_i64_546 : i64
    %c0_i32_547 = arith.constant 0 : i32
    %999 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_547) : (!llvm.ptr, i32) -> i32
    %1000 = arith.extui %999 : i32 to i64
    %c65536_i64_548 = arith.constant 65536 : i64
    %1001 = arith.muli %1000, %c65536_i64_548 : i64
    %1002 = arith.cmpi ult, %998, %1001 : i64
    cf.cond_br %1002, ^bb185, ^bb186
  ^bb184:  // pred: ^bb181
    %c1_i32_549 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_549) : (i32) -> ()
    cf.br ^bb183
  ^bb185:  // 2 preds: ^bb183, ^bb186
    %1003 = llvm.getelementptr %16[%997] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %995, %1003 {alignment = 1 : i64} : i64, !llvm.ptr
    %1004 = llvm.load %2 : !llvm.ptr -> i32
    %c104_i32 = arith.constant 104 : i32
    %1005 = arith.addi %1004, %c104_i32 : i32
    %1006 = llvm.load %2 : !llvm.ptr -> i32
    %c240_i32_550 = arith.constant 240 : i32
    %1007 = arith.addi %1006, %c240_i32_550 : i32
    %c24_i32_551 = arith.constant 24 : i32
    %1008 = arith.addi %1007, %c24_i32_551 : i32
    %c0_i64_552 = arith.constant 0 : i64
    %1009 = arith.extui %1008 : i32 to i64
    %1010 = arith.addi %1009, %c0_i64_552 : i64
    %c8_i64_553 = arith.constant 8 : i64
    %1011 = arith.addi %1010, %c8_i64_553 : i64
    %c0_i32_554 = arith.constant 0 : i32
    %1012 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_554) : (!llvm.ptr, i32) -> i32
    %1013 = arith.extui %1012 : i32 to i64
    %c65536_i64_555 = arith.constant 65536 : i64
    %1014 = arith.muli %1013, %c65536_i64_555 : i64
    %1015 = arith.cmpi ult, %1011, %1014 : i64
    cf.cond_br %1015, ^bb187, ^bb188
  ^bb186:  // pred: ^bb183
    %c1_i32_556 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_556) : (i32) -> ()
    cf.br ^bb185
  ^bb187:  // 2 preds: ^bb185, ^bb188
    %1016 = llvm.getelementptr %16[%1010] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1017 = llvm.load volatile %1016 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_557 = arith.constant 0 : i64
    %1018 = arith.extui %1005 : i32 to i64
    %1019 = arith.addi %1018, %c0_i64_557 : i64
    %c8_i64_558 = arith.constant 8 : i64
    %1020 = arith.addi %1019, %c8_i64_558 : i64
    %c0_i32_559 = arith.constant 0 : i32
    %1021 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_559) : (!llvm.ptr, i32) -> i32
    %1022 = arith.extui %1021 : i32 to i64
    %c65536_i64_560 = arith.constant 65536 : i64
    %1023 = arith.muli %1022, %c65536_i64_560 : i64
    %1024 = arith.cmpi ult, %1020, %1023 : i64
    cf.cond_br %1024, ^bb189, ^bb190
  ^bb188:  // pred: ^bb185
    %c1_i32_561 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_561) : (i32) -> ()
    cf.br ^bb187
  ^bb189:  // 2 preds: ^bb187, ^bb190
    %1025 = llvm.getelementptr %16[%1019] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1017, %1025 {alignment = 1 : i64} : i64, !llvm.ptr
    %1026 = llvm.load %5 : !llvm.ptr -> i32
    %1027 = llvm.load %2 : !llvm.ptr -> i32
    %c176_i32_562 = arith.constant 176 : i32
    %1028 = arith.addi %1027, %c176_i32_562 : i32
    %c8_i32_563 = arith.constant 8 : i32
    %1029 = arith.addi %1028, %c8_i32_563 : i32
    %c0_i64_564 = arith.constant 0 : i64
    %1030 = arith.extui %1029 : i32 to i64
    %1031 = arith.addi %1030, %c0_i64_564 : i64
    %c8_i64_565 = arith.constant 8 : i64
    %1032 = arith.addi %1031, %c8_i64_565 : i64
    %c0_i32_566 = arith.constant 0 : i32
    %1033 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_566) : (!llvm.ptr, i32) -> i32
    %1034 = arith.extui %1033 : i32 to i64
    %c65536_i64_567 = arith.constant 65536 : i64
    %1035 = arith.muli %1034, %c65536_i64_567 : i64
    %1036 = arith.cmpi ult, %1032, %1035 : i64
    cf.cond_br %1036, ^bb191, ^bb192
  ^bb190:  // pred: ^bb187
    %c1_i32_568 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_568) : (i32) -> ()
    cf.br ^bb189
  ^bb191:  // 2 preds: ^bb189, ^bb192
    %1037 = llvm.getelementptr %16[%1031] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1038 = llvm.load volatile %1037 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_569 = arith.constant 0 : i64
    %1039 = arith.extui %1026 : i32 to i64
    %1040 = arith.addi %1039, %c0_i64_569 : i64
    %c8_i64_570 = arith.constant 8 : i64
    %1041 = arith.addi %1040, %c8_i64_570 : i64
    %c0_i32_571 = arith.constant 0 : i32
    %1042 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_571) : (!llvm.ptr, i32) -> i32
    %1043 = arith.extui %1042 : i32 to i64
    %c65536_i64_572 = arith.constant 65536 : i64
    %1044 = arith.muli %1043, %c65536_i64_572 : i64
    %1045 = arith.cmpi ult, %1041, %1044 : i64
    cf.cond_br %1045, ^bb193, ^bb194
  ^bb192:  // pred: ^bb189
    %c1_i32_573 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_573) : (i32) -> ()
    cf.br ^bb191
  ^bb193:  // 2 preds: ^bb191, ^bb194
    %1046 = llvm.getelementptr %16[%1040] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1038, %1046 {alignment = 1 : i64} : i64, !llvm.ptr
    %1047 = llvm.load %4 : !llvm.ptr -> i32
    %1048 = llvm.load %2 : !llvm.ptr -> i32
    %c176_i32_574 = arith.constant 176 : i32
    %1049 = arith.addi %1048, %c176_i32_574 : i32
    %c16_i32_575 = arith.constant 16 : i32
    %1050 = arith.addi %1049, %c16_i32_575 : i32
    %c0_i64_576 = arith.constant 0 : i64
    %1051 = arith.extui %1050 : i32 to i64
    %1052 = arith.addi %1051, %c0_i64_576 : i64
    %c8_i64_577 = arith.constant 8 : i64
    %1053 = arith.addi %1052, %c8_i64_577 : i64
    %c0_i32_578 = arith.constant 0 : i32
    %1054 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_578) : (!llvm.ptr, i32) -> i32
    %1055 = arith.extui %1054 : i32 to i64
    %c65536_i64_579 = arith.constant 65536 : i64
    %1056 = arith.muli %1055, %c65536_i64_579 : i64
    %1057 = arith.cmpi ult, %1053, %1056 : i64
    cf.cond_br %1057, ^bb195, ^bb196
  ^bb194:  // pred: ^bb191
    %c1_i32_580 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_580) : (i32) -> ()
    cf.br ^bb193
  ^bb195:  // 2 preds: ^bb193, ^bb196
    %1058 = llvm.getelementptr %16[%1052] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1059 = llvm.load volatile %1058 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_581 = arith.constant 0 : i64
    %1060 = arith.extui %1047 : i32 to i64
    %1061 = arith.addi %1060, %c0_i64_581 : i64
    %c8_i64_582 = arith.constant 8 : i64
    %1062 = arith.addi %1061, %c8_i64_582 : i64
    %c0_i32_583 = arith.constant 0 : i32
    %1063 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_583) : (!llvm.ptr, i32) -> i32
    %1064 = arith.extui %1063 : i32 to i64
    %c65536_i64_584 = arith.constant 65536 : i64
    %1065 = arith.muli %1064, %c65536_i64_584 : i64
    %1066 = arith.cmpi ult, %1062, %1065 : i64
    cf.cond_br %1066, ^bb197, ^bb198
  ^bb196:  // pred: ^bb193
    %c1_i32_585 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_585) : (i32) -> ()
    cf.br ^bb195
  ^bb197:  // 2 preds: ^bb195, ^bb198
    %1067 = llvm.getelementptr %16[%1061] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1059, %1067 {alignment = 1 : i64} : i64, !llvm.ptr
    %1068 = llvm.load %3 : !llvm.ptr -> i32
    %1069 = llvm.load %2 : !llvm.ptr -> i32
    %c176_i32_586 = arith.constant 176 : i32
    %1070 = arith.addi %1069, %c176_i32_586 : i32
    %c24_i32_587 = arith.constant 24 : i32
    %1071 = arith.addi %1070, %c24_i32_587 : i32
    %c0_i64_588 = arith.constant 0 : i64
    %1072 = arith.extui %1071 : i32 to i64
    %1073 = arith.addi %1072, %c0_i64_588 : i64
    %c8_i64_589 = arith.constant 8 : i64
    %1074 = arith.addi %1073, %c8_i64_589 : i64
    %c0_i32_590 = arith.constant 0 : i32
    %1075 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_590) : (!llvm.ptr, i32) -> i32
    %1076 = arith.extui %1075 : i32 to i64
    %c65536_i64_591 = arith.constant 65536 : i64
    %1077 = arith.muli %1076, %c65536_i64_591 : i64
    %1078 = arith.cmpi ult, %1074, %1077 : i64
    cf.cond_br %1078, ^bb199, ^bb200
  ^bb198:  // pred: ^bb195
    %c1_i32_592 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_592) : (i32) -> ()
    cf.br ^bb197
  ^bb199:  // 2 preds: ^bb197, ^bb200
    %1079 = llvm.getelementptr %16[%1073] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1080 = llvm.load volatile %1079 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_593 = arith.constant 0 : i64
    %1081 = arith.extui %1068 : i32 to i64
    %1082 = arith.addi %1081, %c0_i64_593 : i64
    %c8_i64_594 = arith.constant 8 : i64
    %1083 = arith.addi %1082, %c8_i64_594 : i64
    %c0_i32_595 = arith.constant 0 : i32
    %1084 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_595) : (!llvm.ptr, i32) -> i32
    %1085 = arith.extui %1084 : i32 to i64
    %c65536_i64_596 = arith.constant 65536 : i64
    %1086 = arith.muli %1085, %c65536_i64_596 : i64
    %1087 = arith.cmpi ult, %1083, %1086 : i64
    cf.cond_br %1087, ^bb201, ^bb202
  ^bb200:  // pred: ^bb197
    %c1_i32_597 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_597) : (i32) -> ()
    cf.br ^bb199
  ^bb201:  // 2 preds: ^bb199, ^bb202
    %1088 = llvm.getelementptr %16[%1082] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1080, %1088 {alignment = 1 : i64} : i64, !llvm.ptr
    %1089 = llvm.load %2 : !llvm.ptr -> i32
    %1090 = llvm.load %2 : !llvm.ptr -> i32
    %c240_i64_598 = arith.constant 240 : i64
    %1091 = arith.extui %1090 : i32 to i64
    %1092 = arith.addi %1091, %c240_i64_598 : i64
    %c8_i64_599 = arith.constant 8 : i64
    %1093 = arith.addi %1092, %c8_i64_599 : i64
    %c0_i32_600 = arith.constant 0 : i32
    %1094 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_600) : (!llvm.ptr, i32) -> i32
    %1095 = arith.extui %1094 : i32 to i64
    %c65536_i64_601 = arith.constant 65536 : i64
    %1096 = arith.muli %1095, %c65536_i64_601 : i64
    %1097 = arith.cmpi ult, %1093, %1096 : i64
    cf.cond_br %1097, ^bb203, ^bb204
  ^bb202:  // pred: ^bb199
    %c1_i32_602 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_602) : (i32) -> ()
    cf.br ^bb201
  ^bb203:  // 2 preds: ^bb201, ^bb204
    %1098 = llvm.getelementptr %16[%1092] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1099 = llvm.load volatile %1098 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c80_i64 = arith.constant 80 : i64
    %1100 = arith.extui %1089 : i32 to i64
    %1101 = arith.addi %1100, %c80_i64 : i64
    %c8_i64_603 = arith.constant 8 : i64
    %1102 = arith.addi %1101, %c8_i64_603 : i64
    %c0_i32_604 = arith.constant 0 : i32
    %1103 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_604) : (!llvm.ptr, i32) -> i32
    %1104 = arith.extui %1103 : i32 to i64
    %c65536_i64_605 = arith.constant 65536 : i64
    %1105 = arith.muli %1104, %c65536_i64_605 : i64
    %1106 = arith.cmpi ult, %1102, %1105 : i64
    cf.cond_br %1106, ^bb205, ^bb206
  ^bb204:  // pred: ^bb201
    %c1_i32_606 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_606) : (i32) -> ()
    cf.br ^bb203
  ^bb205:  // 2 preds: ^bb203, ^bb206
    %1107 = llvm.getelementptr %16[%1101] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1099, %1107 {alignment = 1 : i64} : i64, !llvm.ptr
    %1108 = llvm.load %2 : !llvm.ptr -> i32
    %1109 = llvm.load %2 : !llvm.ptr -> i32
    %c176_i64_607 = arith.constant 176 : i64
    %1110 = arith.extui %1109 : i32 to i64
    %1111 = arith.addi %1110, %c176_i64_607 : i64
    %c8_i64_608 = arith.constant 8 : i64
    %1112 = arith.addi %1111, %c8_i64_608 : i64
    %c0_i32_609 = arith.constant 0 : i32
    %1113 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_609) : (!llvm.ptr, i32) -> i32
    %1114 = arith.extui %1113 : i32 to i64
    %c65536_i64_610 = arith.constant 65536 : i64
    %1115 = arith.muli %1114, %c65536_i64_610 : i64
    %1116 = arith.cmpi ult, %1112, %1115 : i64
    cf.cond_br %1116, ^bb207, ^bb208
  ^bb206:  // pred: ^bb203
    %c1_i32_611 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_611) : (i32) -> ()
    cf.br ^bb205
  ^bb207:  // 2 preds: ^bb205, ^bb208
    %1117 = llvm.getelementptr %16[%1111] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1118 = llvm.load volatile %1117 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c16_i64_612 = arith.constant 16 : i64
    %1119 = arith.extui %1108 : i32 to i64
    %1120 = arith.addi %1119, %c16_i64_612 : i64
    %c8_i64_613 = arith.constant 8 : i64
    %1121 = arith.addi %1120, %c8_i64_613 : i64
    %c0_i32_614 = arith.constant 0 : i32
    %1122 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_614) : (!llvm.ptr, i32) -> i32
    %1123 = arith.extui %1122 : i32 to i64
    %c65536_i64_615 = arith.constant 65536 : i64
    %1124 = arith.muli %1123, %c65536_i64_615 : i64
    %1125 = arith.cmpi ult, %1121, %1124 : i64
    cf.cond_br %1125, ^bb209, ^bb210
  ^bb208:  // pred: ^bb205
    %c1_i32_616 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_616) : (i32) -> ()
    cf.br ^bb207
  ^bb209:  // 2 preds: ^bb207, ^bb210
    %1126 = llvm.getelementptr %16[%1120] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1118, %1126 {alignment = 1 : i64} : i64, !llvm.ptr
    %1127 = llvm.load %2 : !llvm.ptr -> i32
    %c72_i32 = arith.constant 72 : i32
    %1128 = arith.addi %1127, %c72_i32 : i32
    %1129 = llvm.load %2 : !llvm.ptr -> i32
    %c208_i32_617 = arith.constant 208 : i32
    %1130 = arith.addi %1129, %c208_i32_617 : i32
    %c24_i32_618 = arith.constant 24 : i32
    %1131 = arith.addi %1130, %c24_i32_618 : i32
    %c0_i64_619 = arith.constant 0 : i64
    %1132 = arith.extui %1131 : i32 to i64
    %1133 = arith.addi %1132, %c0_i64_619 : i64
    %c8_i64_620 = arith.constant 8 : i64
    %1134 = arith.addi %1133, %c8_i64_620 : i64
    %c0_i32_621 = arith.constant 0 : i32
    %1135 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_621) : (!llvm.ptr, i32) -> i32
    %1136 = arith.extui %1135 : i32 to i64
    %c65536_i64_622 = arith.constant 65536 : i64
    %1137 = arith.muli %1136, %c65536_i64_622 : i64
    %1138 = arith.cmpi ult, %1134, %1137 : i64
    cf.cond_br %1138, ^bb211, ^bb212
  ^bb210:  // pred: ^bb207
    %c1_i32_623 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_623) : (i32) -> ()
    cf.br ^bb209
  ^bb211:  // 2 preds: ^bb209, ^bb212
    %1139 = llvm.getelementptr %16[%1133] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1140 = llvm.load volatile %1139 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_624 = arith.constant 0 : i64
    %1141 = arith.extui %1128 : i32 to i64
    %1142 = arith.addi %1141, %c0_i64_624 : i64
    %c8_i64_625 = arith.constant 8 : i64
    %1143 = arith.addi %1142, %c8_i64_625 : i64
    %c0_i32_626 = arith.constant 0 : i32
    %1144 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_626) : (!llvm.ptr, i32) -> i32
    %1145 = arith.extui %1144 : i32 to i64
    %c65536_i64_627 = arith.constant 65536 : i64
    %1146 = arith.muli %1145, %c65536_i64_627 : i64
    %1147 = arith.cmpi ult, %1143, %1146 : i64
    cf.cond_br %1147, ^bb213, ^bb214
  ^bb212:  // pred: ^bb209
    %c1_i32_628 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_628) : (i32) -> ()
    cf.br ^bb211
  ^bb213:  // 2 preds: ^bb211, ^bb214
    %1148 = llvm.getelementptr %16[%1142] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1140, %1148 {alignment = 1 : i64} : i64, !llvm.ptr
    %1149 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_629 = arith.constant 64 : i32
    %1150 = arith.addi %1149, %c64_i32_629 : i32
    %1151 = llvm.load %2 : !llvm.ptr -> i32
    %c208_i32_630 = arith.constant 208 : i32
    %1152 = arith.addi %1151, %c208_i32_630 : i32
    %c16_i32_631 = arith.constant 16 : i32
    %1153 = arith.addi %1152, %c16_i32_631 : i32
    %c0_i64_632 = arith.constant 0 : i64
    %1154 = arith.extui %1153 : i32 to i64
    %1155 = arith.addi %1154, %c0_i64_632 : i64
    %c8_i64_633 = arith.constant 8 : i64
    %1156 = arith.addi %1155, %c8_i64_633 : i64
    %c0_i32_634 = arith.constant 0 : i32
    %1157 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_634) : (!llvm.ptr, i32) -> i32
    %1158 = arith.extui %1157 : i32 to i64
    %c65536_i64_635 = arith.constant 65536 : i64
    %1159 = arith.muli %1158, %c65536_i64_635 : i64
    %1160 = arith.cmpi ult, %1156, %1159 : i64
    cf.cond_br %1160, ^bb215, ^bb216
  ^bb214:  // pred: ^bb211
    %c1_i32_636 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_636) : (i32) -> ()
    cf.br ^bb213
  ^bb215:  // 2 preds: ^bb213, ^bb216
    %1161 = llvm.getelementptr %16[%1155] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1162 = llvm.load volatile %1161 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_637 = arith.constant 0 : i64
    %1163 = arith.extui %1150 : i32 to i64
    %1164 = arith.addi %1163, %c0_i64_637 : i64
    %c8_i64_638 = arith.constant 8 : i64
    %1165 = arith.addi %1164, %c8_i64_638 : i64
    %c0_i32_639 = arith.constant 0 : i32
    %1166 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_639) : (!llvm.ptr, i32) -> i32
    %1167 = arith.extui %1166 : i32 to i64
    %c65536_i64_640 = arith.constant 65536 : i64
    %1168 = arith.muli %1167, %c65536_i64_640 : i64
    %1169 = arith.cmpi ult, %1165, %1168 : i64
    cf.cond_br %1169, ^bb217, ^bb218
  ^bb216:  // pred: ^bb213
    %c1_i32_641 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_641) : (i32) -> ()
    cf.br ^bb215
  ^bb217:  // 2 preds: ^bb215, ^bb218
    %1170 = llvm.getelementptr %16[%1164] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1162, %1170 {alignment = 1 : i64} : i64, !llvm.ptr
    %1171 = llvm.load %2 : !llvm.ptr -> i32
    %c56_i32_642 = arith.constant 56 : i32
    %1172 = arith.addi %1171, %c56_i32_642 : i32
    %1173 = llvm.load %2 : !llvm.ptr -> i32
    %c208_i32_643 = arith.constant 208 : i32
    %1174 = arith.addi %1173, %c208_i32_643 : i32
    %c8_i32_644 = arith.constant 8 : i32
    %1175 = arith.addi %1174, %c8_i32_644 : i32
    %c0_i64_645 = arith.constant 0 : i64
    %1176 = arith.extui %1175 : i32 to i64
    %1177 = arith.addi %1176, %c0_i64_645 : i64
    %c8_i64_646 = arith.constant 8 : i64
    %1178 = arith.addi %1177, %c8_i64_646 : i64
    %c0_i32_647 = arith.constant 0 : i32
    %1179 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_647) : (!llvm.ptr, i32) -> i32
    %1180 = arith.extui %1179 : i32 to i64
    %c65536_i64_648 = arith.constant 65536 : i64
    %1181 = arith.muli %1180, %c65536_i64_648 : i64
    %1182 = arith.cmpi ult, %1178, %1181 : i64
    cf.cond_br %1182, ^bb219, ^bb220
  ^bb218:  // pred: ^bb215
    %c1_i32_649 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_649) : (i32) -> ()
    cf.br ^bb217
  ^bb219:  // 2 preds: ^bb217, ^bb220
    %1183 = llvm.getelementptr %16[%1177] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1184 = llvm.load volatile %1183 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_650 = arith.constant 0 : i64
    %1185 = arith.extui %1172 : i32 to i64
    %1186 = arith.addi %1185, %c0_i64_650 : i64
    %c8_i64_651 = arith.constant 8 : i64
    %1187 = arith.addi %1186, %c8_i64_651 : i64
    %c0_i32_652 = arith.constant 0 : i32
    %1188 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_652) : (!llvm.ptr, i32) -> i32
    %1189 = arith.extui %1188 : i32 to i64
    %c65536_i64_653 = arith.constant 65536 : i64
    %1190 = arith.muli %1189, %c65536_i64_653 : i64
    %1191 = arith.cmpi ult, %1187, %1190 : i64
    cf.cond_br %1191, ^bb221, ^bb222
  ^bb220:  // pred: ^bb217
    %c1_i32_654 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_654) : (i32) -> ()
    cf.br ^bb219
  ^bb221:  // 2 preds: ^bb219, ^bb222
    %1192 = llvm.getelementptr %16[%1186] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1184, %1192 {alignment = 1 : i64} : i64, !llvm.ptr
    %1193 = llvm.load %2 : !llvm.ptr -> i32
    %1194 = llvm.load %2 : !llvm.ptr -> i32
    %c208_i64_655 = arith.constant 208 : i64
    %1195 = arith.extui %1194 : i32 to i64
    %1196 = arith.addi %1195, %c208_i64_655 : i64
    %c8_i64_656 = arith.constant 8 : i64
    %1197 = arith.addi %1196, %c8_i64_656 : i64
    %c0_i32_657 = arith.constant 0 : i32
    %1198 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_657) : (!llvm.ptr, i32) -> i32
    %1199 = arith.extui %1198 : i32 to i64
    %c65536_i64_658 = arith.constant 65536 : i64
    %1200 = arith.muli %1199, %c65536_i64_658 : i64
    %1201 = arith.cmpi ult, %1197, %1200 : i64
    cf.cond_br %1201, ^bb223, ^bb224
  ^bb222:  // pred: ^bb219
    %c1_i32_659 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_659) : (i32) -> ()
    cf.br ^bb221
  ^bb223:  // 2 preds: ^bb221, ^bb224
    %1202 = llvm.getelementptr %16[%1196] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1203 = llvm.load volatile %1202 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c48_i64 = arith.constant 48 : i64
    %1204 = arith.extui %1193 : i32 to i64
    %1205 = arith.addi %1204, %c48_i64 : i64
    %c8_i64_660 = arith.constant 8 : i64
    %1206 = arith.addi %1205, %c8_i64_660 : i64
    %c0_i32_661 = arith.constant 0 : i32
    %1207 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_661) : (!llvm.ptr, i32) -> i32
    %1208 = arith.extui %1207 : i32 to i64
    %c65536_i64_662 = arith.constant 65536 : i64
    %1209 = arith.muli %1208, %c65536_i64_662 : i64
    %1210 = arith.cmpi ult, %1206, %1209 : i64
    cf.cond_br %1210, ^bb225, ^bb226
  ^bb224:  // pred: ^bb221
    %c1_i32_663 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_663) : (i32) -> ()
    cf.br ^bb223
  ^bb225:  // 2 preds: ^bb223, ^bb226
    %1211 = llvm.getelementptr %16[%1205] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1203, %1211 {alignment = 1 : i64} : i64, !llvm.ptr
    %1212 = llvm.load %2 : !llvm.ptr -> i32
    %c240_i32_664 = arith.constant 240 : i32
    %1213 = arith.addi %1212, %c240_i32_664 : i32
    %1214 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_665 = arith.constant 16 : i32
    %1215 = arith.addi %1214, %c16_i32_665 : i32
    call @f40(%arg0, %1213, %1215) : (!llvm.ptr, i32, i32) -> ()
    %1216 = llvm.load %2 : !llvm.ptr -> i32
    %1217 = llvm.load %2 : !llvm.ptr -> i32
    %c240_i64_666 = arith.constant 240 : i64
    %1218 = arith.extui %1217 : i32 to i64
    %1219 = arith.addi %1218, %c240_i64_666 : i64
    %c4_i64_667 = arith.constant 4 : i64
    %1220 = arith.addi %1219, %c4_i64_667 : i64
    %c0_i32_668 = arith.constant 0 : i32
    %1221 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_668) : (!llvm.ptr, i32) -> i32
    %1222 = arith.extui %1221 : i32 to i64
    %c65536_i64_669 = arith.constant 65536 : i64
    %1223 = arith.muli %1222, %c65536_i64_669 : i64
    %1224 = arith.cmpi ult, %1220, %1223 : i64
    cf.cond_br %1224, ^bb227, ^bb228
  ^bb226:  // pred: ^bb223
    %c1_i32_670 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_670) : (i32) -> ()
    cf.br ^bb225
  ^bb227:  // 2 preds: ^bb225, ^bb228
    %1225 = llvm.getelementptr %16[%1219] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1226 = llvm.load volatile %1225 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c280_i64_671 = arith.constant 280 : i64
    %1227 = arith.extui %1216 : i32 to i64
    %1228 = arith.addi %1227, %c280_i64_671 : i64
    %c4_i64_672 = arith.constant 4 : i64
    %1229 = arith.addi %1228, %c4_i64_672 : i64
    %c0_i32_673 = arith.constant 0 : i32
    %1230 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_673) : (!llvm.ptr, i32) -> i32
    %1231 = arith.extui %1230 : i32 to i64
    %c65536_i64_674 = arith.constant 65536 : i64
    %1232 = arith.muli %1231, %c65536_i64_674 : i64
    %1233 = arith.cmpi ult, %1229, %1232 : i64
    cf.cond_br %1233, ^bb229, ^bb230
  ^bb228:  // pred: ^bb225
    %c1_i32_675 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_675) : (i32) -> ()
    cf.br ^bb227
  ^bb229:  // 2 preds: ^bb227, ^bb230
    %1234 = llvm.getelementptr %16[%1228] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1226, %1234 {alignment = 1 : i64} : i32, !llvm.ptr
    %1235 = llvm.load %2 : !llvm.ptr -> i32
    %1236 = llvm.load %2 : !llvm.ptr -> i32
    %c244_i64 = arith.constant 244 : i64
    %1237 = arith.extui %1236 : i32 to i64
    %1238 = arith.addi %1237, %c244_i64 : i64
    %c4_i64_676 = arith.constant 4 : i64
    %1239 = arith.addi %1238, %c4_i64_676 : i64
    %c0_i32_677 = arith.constant 0 : i32
    %1240 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_677) : (!llvm.ptr, i32) -> i32
    %1241 = arith.extui %1240 : i32 to i64
    %c65536_i64_678 = arith.constant 65536 : i64
    %1242 = arith.muli %1241, %c65536_i64_678 : i64
    %1243 = arith.cmpi ult, %1239, %1242 : i64
    cf.cond_br %1243, ^bb231, ^bb232
  ^bb230:  // pred: ^bb227
    %c1_i32_679 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_679) : (i32) -> ()
    cf.br ^bb229
  ^bb231:  // 2 preds: ^bb229, ^bb232
    %1244 = llvm.getelementptr %16[%1238] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1245 = llvm.load volatile %1244 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1245, %3 : i32, !llvm.ptr
    %c272_i64_680 = arith.constant 272 : i64
    %1246 = arith.extui %1235 : i32 to i64
    %1247 = arith.addi %1246, %c272_i64_680 : i64
    %c4_i64_681 = arith.constant 4 : i64
    %1248 = arith.addi %1247, %c4_i64_681 : i64
    %c0_i32_682 = arith.constant 0 : i32
    %1249 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_682) : (!llvm.ptr, i32) -> i32
    %1250 = arith.extui %1249 : i32 to i64
    %c65536_i64_683 = arith.constant 65536 : i64
    %1251 = arith.muli %1250, %c65536_i64_683 : i64
    %1252 = arith.cmpi ult, %1248, %1251 : i64
    cf.cond_br %1252, ^bb233, ^bb234
  ^bb232:  // pred: ^bb229
    %c1_i32_684 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_684) : (i32) -> ()
    cf.br ^bb231
  ^bb233:  // 2 preds: ^bb231, ^bb234
    %1253 = llvm.getelementptr %16[%1247] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1245, %1253 {alignment = 1 : i64} : i32, !llvm.ptr
    %1254 = llvm.load %2 : !llvm.ptr -> i32
    %1255 = llvm.load %3 : !llvm.ptr -> i32
    %c276_i64 = arith.constant 276 : i64
    %1256 = arith.extui %1254 : i32 to i64
    %1257 = arith.addi %1256, %c276_i64 : i64
    %c4_i64_685 = arith.constant 4 : i64
    %1258 = arith.addi %1257, %c4_i64_685 : i64
    %c0_i32_686 = arith.constant 0 : i32
    %1259 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_686) : (!llvm.ptr, i32) -> i32
    %1260 = arith.extui %1259 : i32 to i64
    %c65536_i64_687 = arith.constant 65536 : i64
    %1261 = arith.muli %1260, %c65536_i64_687 : i64
    %1262 = arith.cmpi ult, %1258, %1261 : i64
    cf.cond_br %1262, ^bb235, ^bb236
  ^bb234:  // pred: ^bb231
    %c1_i32_688 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_688) : (i32) -> ()
    cf.br ^bb233
  ^bb235:  // 2 preds: ^bb233, ^bb236
    %1263 = llvm.getelementptr %16[%1257] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1255, %1263 {alignment = 1 : i64} : i32, !llvm.ptr
    %1264 = llvm.load %2 : !llvm.ptr -> i32
    %1265 = llvm.load %3 : !llvm.ptr -> i32
    %1266 = llvm.load %2 : !llvm.ptr -> i32
    %c248_i64 = arith.constant 248 : i64
    %1267 = arith.extui %1266 : i32 to i64
    %1268 = arith.addi %1267, %c248_i64 : i64
    %c4_i64_689 = arith.constant 4 : i64
    %1269 = arith.addi %1268, %c4_i64_689 : i64
    %c0_i32_690 = arith.constant 0 : i32
    %1270 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_690) : (!llvm.ptr, i32) -> i32
    %1271 = arith.extui %1270 : i32 to i64
    %c65536_i64_691 = arith.constant 65536 : i64
    %1272 = arith.muli %1271, %c65536_i64_691 : i64
    %1273 = arith.cmpi ult, %1269, %1272 : i64
    cf.cond_br %1273, ^bb237, ^bb238
  ^bb236:  // pred: ^bb233
    %c1_i32_692 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_692) : (i32) -> ()
    cf.br ^bb235
  ^bb237:  // 2 preds: ^bb235, ^bb238
    %1274 = llvm.getelementptr %16[%1268] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1275 = llvm.load volatile %1274 {alignment = 1 : i64} : !llvm.ptr -> i32
    %1276 = arith.addi %1265, %1275 : i32
    %c284_i64 = arith.constant 284 : i64
    %1277 = arith.extui %1264 : i32 to i64
    %1278 = arith.addi %1277, %c284_i64 : i64
    %c4_i64_693 = arith.constant 4 : i64
    %1279 = arith.addi %1278, %c4_i64_693 : i64
    %c0_i32_694 = arith.constant 0 : i32
    %1280 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_694) : (!llvm.ptr, i32) -> i32
    %1281 = arith.extui %1280 : i32 to i64
    %c65536_i64_695 = arith.constant 65536 : i64
    %1282 = arith.muli %1281, %c65536_i64_695 : i64
    %1283 = arith.cmpi ult, %1279, %1282 : i64
    cf.cond_br %1283, ^bb239, ^bb240
  ^bb238:  // pred: ^bb235
    %c1_i32_696 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_696) : (i32) -> ()
    cf.br ^bb237
  ^bb239:  // 2 preds: ^bb237, ^bb240
    %1284 = llvm.getelementptr %16[%1278] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1276, %1284 {alignment = 1 : i64} : i32, !llvm.ptr
    %1285 = llvm.load %2 : !llvm.ptr -> i32
    %c144_i32_697 = arith.constant 144 : i32
    %1286 = arith.addi %1285, %c144_i32_697 : i32
    %1287 = llvm.load %2 : !llvm.ptr -> i32
    %c272_i32_698 = arith.constant 272 : i32
    %1288 = arith.addi %1287, %c272_i32_698 : i32
    call @f83(%arg0, %1286, %1288) : (!llvm.ptr, i32, i32) -> ()
    %1289 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_699 = arith.constant 8 : i32
    %1290 = arith.addi %1289, %c8_i32_699 : i32
    %1291 = llvm.load %2 : !llvm.ptr -> i32
    %c144_i32_700 = arith.constant 144 : i32
    %1292 = arith.addi %1291, %c144_i32_700 : i32
    %c8_i32_701 = arith.constant 8 : i32
    %1293 = arith.addi %1292, %c8_i32_701 : i32
    %c0_i64_702 = arith.constant 0 : i64
    %1294 = arith.extui %1293 : i32 to i64
    %1295 = arith.addi %1294, %c0_i64_702 : i64
    %c4_i64_703 = arith.constant 4 : i64
    %1296 = arith.addi %1295, %c4_i64_703 : i64
    %c0_i32_704 = arith.constant 0 : i32
    %1297 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_704) : (!llvm.ptr, i32) -> i32
    %1298 = arith.extui %1297 : i32 to i64
    %c65536_i64_705 = arith.constant 65536 : i64
    %1299 = arith.muli %1298, %c65536_i64_705 : i64
    %1300 = arith.cmpi ult, %1296, %1299 : i64
    cf.cond_br %1300, ^bb241, ^bb242
  ^bb240:  // pred: ^bb237
    %c1_i32_706 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_706) : (i32) -> ()
    cf.br ^bb239
  ^bb241:  // 2 preds: ^bb239, ^bb242
    %1301 = llvm.getelementptr %16[%1295] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1302 = llvm.load volatile %1301 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_707 = arith.constant 0 : i64
    %1303 = arith.extui %1290 : i32 to i64
    %1304 = arith.addi %1303, %c0_i64_707 : i64
    %c4_i64_708 = arith.constant 4 : i64
    %1305 = arith.addi %1304, %c4_i64_708 : i64
    %c0_i32_709 = arith.constant 0 : i32
    %1306 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_709) : (!llvm.ptr, i32) -> i32
    %1307 = arith.extui %1306 : i32 to i64
    %c65536_i64_710 = arith.constant 65536 : i64
    %1308 = arith.muli %1307, %c65536_i64_710 : i64
    %1309 = arith.cmpi ult, %1305, %1308 : i64
    cf.cond_br %1309, ^bb243, ^bb244
  ^bb242:  // pred: ^bb239
    %c1_i32_711 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_711) : (i32) -> ()
    cf.br ^bb241
  ^bb243:  // 2 preds: ^bb241, ^bb244
    %1310 = llvm.getelementptr %16[%1304] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1302, %1310 {alignment = 1 : i64} : i32, !llvm.ptr
    %1311 = llvm.load %0 : !llvm.ptr -> i32
    %1312 = llvm.load %2 : !llvm.ptr -> i32
    %c144_i64_712 = arith.constant 144 : i64
    %1313 = arith.extui %1312 : i32 to i64
    %1314 = arith.addi %1313, %c144_i64_712 : i64
    %c8_i64_713 = arith.constant 8 : i64
    %1315 = arith.addi %1314, %c8_i64_713 : i64
    %c0_i32_714 = arith.constant 0 : i32
    %1316 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_714) : (!llvm.ptr, i32) -> i32
    %1317 = arith.extui %1316 : i32 to i64
    %c65536_i64_715 = arith.constant 65536 : i64
    %1318 = arith.muli %1317, %c65536_i64_715 : i64
    %1319 = arith.cmpi ult, %1315, %1318 : i64
    cf.cond_br %1319, ^bb245, ^bb246
  ^bb244:  // pred: ^bb241
    %c1_i32_716 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_716) : (i32) -> ()
    cf.br ^bb243
  ^bb245:  // 2 preds: ^bb243, ^bb246
    %1320 = llvm.getelementptr %16[%1314] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1321 = llvm.load volatile %1320 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_717 = arith.constant 0 : i64
    %1322 = arith.extui %1311 : i32 to i64
    %1323 = arith.addi %1322, %c0_i64_717 : i64
    %c8_i64_718 = arith.constant 8 : i64
    %1324 = arith.addi %1323, %c8_i64_718 : i64
    %c0_i32_719 = arith.constant 0 : i32
    %1325 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_719) : (!llvm.ptr, i32) -> i32
    %1326 = arith.extui %1325 : i32 to i64
    %c65536_i64_720 = arith.constant 65536 : i64
    %1327 = arith.muli %1326, %c65536_i64_720 : i64
    %1328 = arith.cmpi ult, %1324, %1327 : i64
    cf.cond_br %1328, ^bb247, ^bb248
  ^bb246:  // pred: ^bb243
    %c1_i32_721 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_721) : (i32) -> ()
    cf.br ^bb245
  ^bb247:  // 2 preds: ^bb245, ^bb248
    %1329 = llvm.getelementptr %16[%1323] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1321, %1329 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb7
  ^bb248:  // pred: ^bb245
    %c1_i32_722 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_722) : (i32) -> ()
    cf.br ^bb247
  ^bb249:  // 2 preds: ^bb8, ^bb250
    %1330 = llvm.getelementptr %16[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1331 = llvm.load volatile %1330 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1331, %5 : i32, !llvm.ptr
    %1332 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i64_723 = arith.constant 16 : i64
    %1333 = arith.extui %1332 : i32 to i64
    %1334 = arith.addi %1333, %c16_i64_723 : i64
    %c4_i64_724 = arith.constant 4 : i64
    %1335 = arith.addi %1334, %c4_i64_724 : i64
    %c0_i32_725 = arith.constant 0 : i32
    %1336 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_725) : (!llvm.ptr, i32) -> i32
    %1337 = arith.extui %1336 : i32 to i64
    %c65536_i64_726 = arith.constant 65536 : i64
    %1338 = arith.muli %1337, %c65536_i64_726 : i64
    %1339 = arith.cmpi ult, %1335, %1338 : i64
    cf.cond_br %1339, ^bb251, ^bb252
  ^bb250:  // pred: ^bb8
    %c1_i32_727 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_727) : (i32) -> ()
    cf.br ^bb249
  ^bb251:  // 2 preds: ^bb249, ^bb252
    %1340 = llvm.getelementptr %16[%1334] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1341 = llvm.load volatile %1340 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_728 = arith.constant 1 : i32
    %1342 = arith.cmpi eq, %1341, %c1_i32_728 : i32
    %1343 = arith.extui %1342 : i1 to i32
    %c0_i32_729 = arith.constant 0 : i32
    %1344 = arith.cmpi ne, %1343, %c0_i32_729 : i32
    cf.cond_br %1344, ^bb5, ^bb253
  ^bb252:  // pred: ^bb249
    %c1_i32_730 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_730) : (i32) -> ()
    cf.br ^bb251
  ^bb253:  // pred: ^bb251
    %1345 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_731 = arith.constant 0 : i32
    %c12_i64 = arith.constant 12 : i64
    %1346 = arith.extui %1345 : i32 to i64
    %1347 = arith.addi %1346, %c12_i64 : i64
    %c4_i64_732 = arith.constant 4 : i64
    %1348 = arith.addi %1347, %c4_i64_732 : i64
    %c0_i32_733 = arith.constant 0 : i32
    %1349 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_733) : (!llvm.ptr, i32) -> i32
    %1350 = arith.extui %1349 : i32 to i64
    %c65536_i64_734 = arith.constant 65536 : i64
    %1351 = arith.muli %1350, %c65536_i64_734 : i64
    %1352 = arith.cmpi ult, %1348, %1351 : i64
    cf.cond_br %1352, ^bb254, ^bb255
  ^bb254:  // 2 preds: ^bb253, ^bb255
    %1353 = llvm.getelementptr %16[%1347] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_731, %1353 {alignment = 1 : i64} : i32, !llvm.ptr
    %1354 = llvm.load %2 : !llvm.ptr -> i32
    %1355 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i64_735 = arith.constant 24 : i64
    %1356 = arith.extui %1355 : i32 to i64
    %1357 = arith.addi %1356, %c24_i64_735 : i64
    %c4_i64_736 = arith.constant 4 : i64
    %1358 = arith.addi %1357, %c4_i64_736 : i64
    %c0_i32_737 = arith.constant 0 : i32
    %1359 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_737) : (!llvm.ptr, i32) -> i32
    %1360 = arith.extui %1359 : i32 to i64
    %c65536_i64_738 = arith.constant 65536 : i64
    %1361 = arith.muli %1360, %c65536_i64_738 : i64
    %1362 = arith.cmpi ult, %1358, %1361 : i64
    cf.cond_br %1362, ^bb256, ^bb257
  ^bb255:  // pred: ^bb253
    %c1_i32_739 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_739) : (i32) -> ()
    cf.br ^bb254
  ^bb256:  // 2 preds: ^bb254, ^bb257
    %1363 = llvm.getelementptr %16[%1357] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1364 = llvm.load volatile %1363 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c8_i64_740 = arith.constant 8 : i64
    %1365 = arith.extui %1354 : i32 to i64
    %1366 = arith.addi %1365, %c8_i64_740 : i64
    %c4_i64_741 = arith.constant 4 : i64
    %1367 = arith.addi %1366, %c4_i64_741 : i64
    %c0_i32_742 = arith.constant 0 : i32
    %1368 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_742) : (!llvm.ptr, i32) -> i32
    %1369 = arith.extui %1368 : i32 to i64
    %c65536_i64_743 = arith.constant 65536 : i64
    %1370 = arith.muli %1369, %c65536_i64_743 : i64
    %1371 = arith.cmpi ult, %1367, %1370 : i64
    cf.cond_br %1371, ^bb258, ^bb259
  ^bb257:  // pred: ^bb254
    %c1_i32_744 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_744) : (i32) -> ()
    cf.br ^bb256
  ^bb258:  // 2 preds: ^bb256, ^bb259
    %1372 = llvm.getelementptr %16[%1366] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1364, %1372 {alignment = 1 : i64} : i32, !llvm.ptr
    %1373 = llvm.load %2 : !llvm.ptr -> i32
    %1374 = llvm.load %5 : !llvm.ptr -> i32
    %c4_i64_745 = arith.constant 4 : i64
    %1375 = arith.extui %1373 : i32 to i64
    %1376 = arith.addi %1375, %c4_i64_745 : i64
    %c4_i64_746 = arith.constant 4 : i64
    %1377 = arith.addi %1376, %c4_i64_746 : i64
    %c0_i32_747 = arith.constant 0 : i32
    %1378 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_747) : (!llvm.ptr, i32) -> i32
    %1379 = arith.extui %1378 : i32 to i64
    %c65536_i64_748 = arith.constant 65536 : i64
    %1380 = arith.muli %1379, %c65536_i64_748 : i64
    %1381 = arith.cmpi ult, %1377, %1380 : i64
    cf.cond_br %1381, ^bb260, ^bb261
  ^bb259:  // pred: ^bb256
    %c1_i32_749 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_749) : (i32) -> ()
    cf.br ^bb258
  ^bb260:  // 2 preds: ^bb258, ^bb261
    %1382 = llvm.getelementptr %16[%1376] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1374, %1382 {alignment = 1 : i64} : i32, !llvm.ptr
    %1383 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %1384 = arith.addi %1383, %c4_i32 : i32
    %c1048824_i32 = arith.constant 1048824 : i32
    call @f84(%arg0, %1384, %c1048824_i32) : (!llvm.ptr, i32, i32) -> ()
    %1385 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i32_750 = arith.constant 4 : i32
    %1386 = arith.addi %1385, %c4_i32_750 : i32
    %c128_i32 = arith.constant 128 : i32
    call @f106(%arg0, %1386, %c128_i32) : (!llvm.ptr, i32, i32) -> ()
    %1387 = llvm.load %2 : !llvm.ptr -> i32
    %c272_i32_751 = arith.constant 272 : i32
    %1388 = arith.addi %1387, %c272_i32_751 : i32
    %c16_i32_752 = arith.constant 16 : i32
    %1389 = arith.addi %1388, %c16_i32_752 : i32
    llvm.store %1389, %8 : i32, !llvm.ptr
    %1390 = llvm.load %1 : !llvm.ptr -> i32
    %c88_i32_753 = arith.constant 88 : i32
    %1391 = arith.addi %1390, %c88_i32_753 : i32
    %c0_i64_754 = arith.constant 0 : i64
    %1392 = arith.extui %1391 : i32 to i64
    %1393 = arith.addi %1392, %c0_i64_754 : i64
    %c4_i64_755 = arith.constant 4 : i64
    %1394 = arith.addi %1393, %c4_i64_755 : i64
    %c0_i32_756 = arith.constant 0 : i32
    %1395 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_756) : (!llvm.ptr, i32) -> i32
    %1396 = arith.extui %1395 : i32 to i64
    %c65536_i64_757 = arith.constant 65536 : i64
    %1397 = arith.muli %1396, %c65536_i64_757 : i64
    %1398 = arith.cmpi ult, %1394, %1397 : i64
    cf.cond_br %1398, ^bb262, ^bb263
  ^bb261:  // pred: ^bb258
    %c1_i32_758 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_758) : (i32) -> ()
    cf.br ^bb260
  ^bb262:  // 2 preds: ^bb260, ^bb263
    %1399 = llvm.getelementptr %16[%1393] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1400 = llvm.load volatile %1399 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_759 = arith.constant 0 : i64
    %1401 = arith.extui %1389 : i32 to i64
    %1402 = arith.addi %1401, %c0_i64_759 : i64
    %c4_i64_760 = arith.constant 4 : i64
    %1403 = arith.addi %1402, %c4_i64_760 : i64
    %c0_i32_761 = arith.constant 0 : i32
    %1404 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_761) : (!llvm.ptr, i32) -> i32
    %1405 = arith.extui %1404 : i32 to i64
    %c65536_i64_762 = arith.constant 65536 : i64
    %1406 = arith.muli %1405, %c65536_i64_762 : i64
    %1407 = arith.cmpi ult, %1403, %1406 : i64
    cf.cond_br %1407, ^bb264, ^bb265
  ^bb263:  // pred: ^bb260
    %c1_i32_763 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_763) : (i32) -> ()
    cf.br ^bb262
  ^bb264:  // 2 preds: ^bb262, ^bb265
    %1408 = llvm.getelementptr %16[%1402] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1400, %1408 {alignment = 1 : i64} : i32, !llvm.ptr
    %1409 = llvm.load %2 : !llvm.ptr -> i32
    %c272_i32_764 = arith.constant 272 : i32
    %1410 = arith.addi %1409, %c272_i32_764 : i32
    %c8_i32_765 = arith.constant 8 : i32
    %1411 = arith.addi %1410, %c8_i32_765 : i32
    llvm.store %1411, %9 : i32, !llvm.ptr
    %1412 = llvm.load %1 : !llvm.ptr -> i32
    %c80_i32_766 = arith.constant 80 : i32
    %1413 = arith.addi %1412, %c80_i32_766 : i32
    %c0_i64_767 = arith.constant 0 : i64
    %1414 = arith.extui %1413 : i32 to i64
    %1415 = arith.addi %1414, %c0_i64_767 : i64
    %c8_i64_768 = arith.constant 8 : i64
    %1416 = arith.addi %1415, %c8_i64_768 : i64
    %c0_i32_769 = arith.constant 0 : i32
    %1417 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_769) : (!llvm.ptr, i32) -> i32
    %1418 = arith.extui %1417 : i32 to i64
    %c65536_i64_770 = arith.constant 65536 : i64
    %1419 = arith.muli %1418, %c65536_i64_770 : i64
    %1420 = arith.cmpi ult, %1416, %1419 : i64
    cf.cond_br %1420, ^bb266, ^bb267
  ^bb265:  // pred: ^bb262
    %c1_i32_771 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_771) : (i32) -> ()
    cf.br ^bb264
  ^bb266:  // 2 preds: ^bb264, ^bb267
    %1421 = llvm.getelementptr %16[%1415] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1422 = llvm.load volatile %1421 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_772 = arith.constant 0 : i64
    %1423 = arith.extui %1411 : i32 to i64
    %1424 = arith.addi %1423, %c0_i64_772 : i64
    %c8_i64_773 = arith.constant 8 : i64
    %1425 = arith.addi %1424, %c8_i64_773 : i64
    %c0_i32_774 = arith.constant 0 : i32
    %1426 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_774) : (!llvm.ptr, i32) -> i32
    %1427 = arith.extui %1426 : i32 to i64
    %c65536_i64_775 = arith.constant 65536 : i64
    %1428 = arith.muli %1427, %c65536_i64_775 : i64
    %1429 = arith.cmpi ult, %1425, %1428 : i64
    cf.cond_br %1429, ^bb268, ^bb269
  ^bb267:  // pred: ^bb264
    %c1_i32_776 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_776) : (i32) -> ()
    cf.br ^bb266
  ^bb268:  // 2 preds: ^bb266, ^bb269
    %1430 = llvm.getelementptr %16[%1424] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1422, %1430 {alignment = 1 : i64} : i64, !llvm.ptr
    %1431 = llvm.load %2 : !llvm.ptr -> i32
    %1432 = llvm.load %1 : !llvm.ptr -> i32
    %c72_i64_777 = arith.constant 72 : i64
    %1433 = arith.extui %1432 : i32 to i64
    %1434 = arith.addi %1433, %c72_i64_777 : i64
    %c8_i64_778 = arith.constant 8 : i64
    %1435 = arith.addi %1434, %c8_i64_778 : i64
    %c0_i32_779 = arith.constant 0 : i32
    %1436 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_779) : (!llvm.ptr, i32) -> i32
    %1437 = arith.extui %1436 : i32 to i64
    %c65536_i64_780 = arith.constant 65536 : i64
    %1438 = arith.muli %1437, %c65536_i64_780 : i64
    %1439 = arith.cmpi ult, %1435, %1438 : i64
    cf.cond_br %1439, ^bb270, ^bb271
  ^bb269:  // pred: ^bb266
    %c1_i32_781 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_781) : (i32) -> ()
    cf.br ^bb268
  ^bb270:  // 2 preds: ^bb268, ^bb271
    %1440 = llvm.getelementptr %16[%1434] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1441 = llvm.load volatile %1440 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c272_i64_782 = arith.constant 272 : i64
    %1442 = arith.extui %1431 : i32 to i64
    %1443 = arith.addi %1442, %c272_i64_782 : i64
    %c8_i64_783 = arith.constant 8 : i64
    %1444 = arith.addi %1443, %c8_i64_783 : i64
    %c0_i32_784 = arith.constant 0 : i32
    %1445 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_784) : (!llvm.ptr, i32) -> i32
    %1446 = arith.extui %1445 : i32 to i64
    %c65536_i64_785 = arith.constant 65536 : i64
    %1447 = arith.muli %1446, %c65536_i64_785 : i64
    %1448 = arith.cmpi ult, %1444, %1447 : i64
    cf.cond_br %1448, ^bb272, ^bb273
  ^bb271:  // pred: ^bb268
    %c1_i32_786 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_786) : (i32) -> ()
    cf.br ^bb270
  ^bb272:  // 2 preds: ^bb270, ^bb273
    %1449 = llvm.getelementptr %16[%1443] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1441, %1449 {alignment = 1 : i64} : i64, !llvm.ptr
    %1450 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_787 = arith.constant 16 : i32
    %1451 = arith.addi %1450, %c16_i32_787 : i32
    %c24_i32_788 = arith.constant 24 : i32
    %1452 = arith.addi %1451, %c24_i32_788 : i32
    llvm.store %1452, %5 : i32, !llvm.ptr
    %c0_i64_789 = arith.constant 0 : i64
    %c0_i64_790 = arith.constant 0 : i64
    %1453 = arith.extui %1452 : i32 to i64
    %1454 = arith.addi %1453, %c0_i64_790 : i64
    %c8_i64_791 = arith.constant 8 : i64
    %1455 = arith.addi %1454, %c8_i64_791 : i64
    %c0_i32_792 = arith.constant 0 : i32
    %1456 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_792) : (!llvm.ptr, i32) -> i32
    %1457 = arith.extui %1456 : i32 to i64
    %c65536_i64_793 = arith.constant 65536 : i64
    %1458 = arith.muli %1457, %c65536_i64_793 : i64
    %1459 = arith.cmpi ult, %1455, %1458 : i64
    cf.cond_br %1459, ^bb274, ^bb275
  ^bb273:  // pred: ^bb270
    %c1_i32_794 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_794) : (i32) -> ()
    cf.br ^bb272
  ^bb274:  // 2 preds: ^bb272, ^bb275
    %1460 = llvm.getelementptr %16[%1454] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_789, %1460 {alignment = 1 : i64} : i64, !llvm.ptr
    %1461 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_795 = arith.constant 16 : i32
    %1462 = arith.addi %1461, %c16_i32_795 : i32
    %c16_i32_796 = arith.constant 16 : i32
    %1463 = arith.addi %1462, %c16_i32_796 : i32
    llvm.store %1463, %6 : i32, !llvm.ptr
    %c0_i64_797 = arith.constant 0 : i64
    %c0_i64_798 = arith.constant 0 : i64
    %1464 = arith.extui %1463 : i32 to i64
    %1465 = arith.addi %1464, %c0_i64_798 : i64
    %c8_i64_799 = arith.constant 8 : i64
    %1466 = arith.addi %1465, %c8_i64_799 : i64
    %c0_i32_800 = arith.constant 0 : i32
    %1467 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_800) : (!llvm.ptr, i32) -> i32
    %1468 = arith.extui %1467 : i32 to i64
    %c65536_i64_801 = arith.constant 65536 : i64
    %1469 = arith.muli %1468, %c65536_i64_801 : i64
    %1470 = arith.cmpi ult, %1466, %1469 : i64
    cf.cond_br %1470, ^bb276, ^bb277
  ^bb275:  // pred: ^bb272
    %c1_i32_802 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_802) : (i32) -> ()
    cf.br ^bb274
  ^bb276:  // 2 preds: ^bb274, ^bb277
    %1471 = llvm.getelementptr %16[%1465] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_797, %1471 {alignment = 1 : i64} : i64, !llvm.ptr
    %1472 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_803 = arith.constant 16 : i32
    %1473 = arith.addi %1472, %c16_i32_803 : i32
    %c8_i32_804 = arith.constant 8 : i32
    %1474 = arith.addi %1473, %c8_i32_804 : i32
    llvm.store %1474, %7 : i32, !llvm.ptr
    %c0_i64_805 = arith.constant 0 : i64
    %c0_i64_806 = arith.constant 0 : i64
    %1475 = arith.extui %1474 : i32 to i64
    %1476 = arith.addi %1475, %c0_i64_806 : i64
    %c8_i64_807 = arith.constant 8 : i64
    %1477 = arith.addi %1476, %c8_i64_807 : i64
    %c0_i32_808 = arith.constant 0 : i32
    %1478 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_808) : (!llvm.ptr, i32) -> i32
    %1479 = arith.extui %1478 : i32 to i64
    %c65536_i64_809 = arith.constant 65536 : i64
    %1480 = arith.muli %1479, %c65536_i64_809 : i64
    %1481 = arith.cmpi ult, %1477, %1480 : i64
    cf.cond_br %1481, ^bb278, ^bb279
  ^bb277:  // pred: ^bb274
    %c1_i32_810 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_810) : (i32) -> ()
    cf.br ^bb276
  ^bb278:  // 2 preds: ^bb276, ^bb279
    %1482 = llvm.getelementptr %16[%1476] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_805, %1482 {alignment = 1 : i64} : i64, !llvm.ptr
    %1483 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_811 = arith.constant 0 : i64
    %c16_i64_812 = arith.constant 16 : i64
    %1484 = arith.extui %1483 : i32 to i64
    %1485 = arith.addi %1484, %c16_i64_812 : i64
    %c8_i64_813 = arith.constant 8 : i64
    %1486 = arith.addi %1485, %c8_i64_813 : i64
    %c0_i32_814 = arith.constant 0 : i32
    %1487 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_814) : (!llvm.ptr, i32) -> i32
    %1488 = arith.extui %1487 : i32 to i64
    %c65536_i64_815 = arith.constant 65536 : i64
    %1489 = arith.muli %1488, %c65536_i64_815 : i64
    %1490 = arith.cmpi ult, %1486, %1489 : i64
    cf.cond_br %1490, ^bb280, ^bb281
  ^bb279:  // pred: ^bb276
    %c1_i32_816 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_816) : (i32) -> ()
    cf.br ^bb278
  ^bb280:  // 2 preds: ^bb278, ^bb281
    %1491 = llvm.getelementptr %16[%1485] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_811, %1491 {alignment = 1 : i64} : i64, !llvm.ptr
    %1492 = llvm.load %2 : !llvm.ptr -> i32
    %c28_i32_817 = arith.constant 28 : i32
    %1493 = arith.addi %1492, %c28_i32_817 : i32
    llvm.store %1493, %10 : i32, !llvm.ptr
    %c20_i32_818 = arith.constant 20 : i32
    %1494 = llvm.load %2 : !llvm.ptr -> i32
    %c272_i32_819 = arith.constant 272 : i32
    %1495 = arith.addi %1494, %c272_i32_819 : i32
    %c20_i32_820 = arith.constant 20 : i32
    %c1049972_i32_821 = arith.constant 1049972 : i32
    call @f114(%arg0, %1493, %c20_i32_818, %1495, %c20_i32_820, %c1049972_i32_821) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %1496 = llvm.load %2 : !llvm.ptr -> i32
    %c144_i32_822 = arith.constant 144 : i32
    %1497 = arith.addi %1496, %c144_i32_822 : i32
    %c24_i32_823 = arith.constant 24 : i32
    %1498 = arith.addi %1497, %c24_i32_823 : i32
    %1499 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64_824 = arith.constant 0 : i64
    %1500 = arith.extui %1499 : i32 to i64
    %1501 = arith.addi %1500, %c0_i64_824 : i64
    %c8_i64_825 = arith.constant 8 : i64
    %1502 = arith.addi %1501, %c8_i64_825 : i64
    %c0_i32_826 = arith.constant 0 : i32
    %1503 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_826) : (!llvm.ptr, i32) -> i32
    %1504 = arith.extui %1503 : i32 to i64
    %c65536_i64_827 = arith.constant 65536 : i64
    %1505 = arith.muli %1504, %c65536_i64_827 : i64
    %1506 = arith.cmpi ult, %1502, %1505 : i64
    cf.cond_br %1506, ^bb282, ^bb283
  ^bb281:  // pred: ^bb278
    %c1_i32_828 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_828) : (i32) -> ()
    cf.br ^bb280
  ^bb282:  // 2 preds: ^bb280, ^bb283
    %1507 = llvm.getelementptr %16[%1501] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1508 = llvm.load volatile %1507 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_829 = arith.constant 0 : i64
    %1509 = arith.extui %1498 : i32 to i64
    %1510 = arith.addi %1509, %c0_i64_829 : i64
    %c8_i64_830 = arith.constant 8 : i64
    %1511 = arith.addi %1510, %c8_i64_830 : i64
    %c0_i32_831 = arith.constant 0 : i32
    %1512 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_831) : (!llvm.ptr, i32) -> i32
    %1513 = arith.extui %1512 : i32 to i64
    %c65536_i64_832 = arith.constant 65536 : i64
    %1514 = arith.muli %1513, %c65536_i64_832 : i64
    %1515 = arith.cmpi ult, %1511, %1514 : i64
    cf.cond_br %1515, ^bb284, ^bb285
  ^bb283:  // pred: ^bb280
    %c1_i32_833 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_833) : (i32) -> ()
    cf.br ^bb282
  ^bb284:  // 2 preds: ^bb282, ^bb285
    %1516 = llvm.getelementptr %16[%1510] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1508, %1516 {alignment = 1 : i64} : i64, !llvm.ptr
    %1517 = llvm.load %2 : !llvm.ptr -> i32
    %c144_i32_834 = arith.constant 144 : i32
    %1518 = arith.addi %1517, %c144_i32_834 : i32
    %c16_i32_835 = arith.constant 16 : i32
    %1519 = arith.addi %1518, %c16_i32_835 : i32
    %1520 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_836 = arith.constant 0 : i64
    %1521 = arith.extui %1520 : i32 to i64
    %1522 = arith.addi %1521, %c0_i64_836 : i64
    %c8_i64_837 = arith.constant 8 : i64
    %1523 = arith.addi %1522, %c8_i64_837 : i64
    %c0_i32_838 = arith.constant 0 : i32
    %1524 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_838) : (!llvm.ptr, i32) -> i32
    %1525 = arith.extui %1524 : i32 to i64
    %c65536_i64_839 = arith.constant 65536 : i64
    %1526 = arith.muli %1525, %c65536_i64_839 : i64
    %1527 = arith.cmpi ult, %1523, %1526 : i64
    cf.cond_br %1527, ^bb286, ^bb287
  ^bb285:  // pred: ^bb282
    %c1_i32_840 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_840) : (i32) -> ()
    cf.br ^bb284
  ^bb286:  // 2 preds: ^bb284, ^bb287
    %1528 = llvm.getelementptr %16[%1522] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1529 = llvm.load volatile %1528 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_841 = arith.constant 0 : i64
    %1530 = arith.extui %1519 : i32 to i64
    %1531 = arith.addi %1530, %c0_i64_841 : i64
    %c8_i64_842 = arith.constant 8 : i64
    %1532 = arith.addi %1531, %c8_i64_842 : i64
    %c0_i32_843 = arith.constant 0 : i32
    %1533 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_843) : (!llvm.ptr, i32) -> i32
    %1534 = arith.extui %1533 : i32 to i64
    %c65536_i64_844 = arith.constant 65536 : i64
    %1535 = arith.muli %1534, %c65536_i64_844 : i64
    %1536 = arith.cmpi ult, %1532, %1535 : i64
    cf.cond_br %1536, ^bb288, ^bb289
  ^bb287:  // pred: ^bb284
    %c1_i32_845 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_845) : (i32) -> ()
    cf.br ^bb286
  ^bb288:  // 2 preds: ^bb286, ^bb289
    %1537 = llvm.getelementptr %16[%1531] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1529, %1537 {alignment = 1 : i64} : i64, !llvm.ptr
    %1538 = llvm.load %2 : !llvm.ptr -> i32
    %c144_i32_846 = arith.constant 144 : i32
    %1539 = arith.addi %1538, %c144_i32_846 : i32
    %c8_i32_847 = arith.constant 8 : i32
    %1540 = arith.addi %1539, %c8_i32_847 : i32
    %1541 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_848 = arith.constant 0 : i64
    %1542 = arith.extui %1541 : i32 to i64
    %1543 = arith.addi %1542, %c0_i64_848 : i64
    %c8_i64_849 = arith.constant 8 : i64
    %1544 = arith.addi %1543, %c8_i64_849 : i64
    %c0_i32_850 = arith.constant 0 : i32
    %1545 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_850) : (!llvm.ptr, i32) -> i32
    %1546 = arith.extui %1545 : i32 to i64
    %c65536_i64_851 = arith.constant 65536 : i64
    %1547 = arith.muli %1546, %c65536_i64_851 : i64
    %1548 = arith.cmpi ult, %1544, %1547 : i64
    cf.cond_br %1548, ^bb290, ^bb291
  ^bb289:  // pred: ^bb286
    %c1_i32_852 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_852) : (i32) -> ()
    cf.br ^bb288
  ^bb290:  // 2 preds: ^bb288, ^bb291
    %1549 = llvm.getelementptr %16[%1543] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1550 = llvm.load volatile %1549 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_853 = arith.constant 0 : i64
    %1551 = arith.extui %1540 : i32 to i64
    %1552 = arith.addi %1551, %c0_i64_853 : i64
    %c8_i64_854 = arith.constant 8 : i64
    %1553 = arith.addi %1552, %c8_i64_854 : i64
    %c0_i32_855 = arith.constant 0 : i32
    %1554 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_855) : (!llvm.ptr, i32) -> i32
    %1555 = arith.extui %1554 : i32 to i64
    %c65536_i64_856 = arith.constant 65536 : i64
    %1556 = arith.muli %1555, %c65536_i64_856 : i64
    %1557 = arith.cmpi ult, %1553, %1556 : i64
    cf.cond_br %1557, ^bb292, ^bb293
  ^bb291:  // pred: ^bb288
    %c1_i32_857 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_857) : (i32) -> ()
    cf.br ^bb290
  ^bb292:  // 2 preds: ^bb290, ^bb293
    %1558 = llvm.getelementptr %16[%1552] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1550, %1558 {alignment = 1 : i64} : i64, !llvm.ptr
    %1559 = llvm.load %2 : !llvm.ptr -> i32
    %1560 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i64_858 = arith.constant 16 : i64
    %1561 = arith.extui %1560 : i32 to i64
    %1562 = arith.addi %1561, %c16_i64_858 : i64
    %c8_i64_859 = arith.constant 8 : i64
    %1563 = arith.addi %1562, %c8_i64_859 : i64
    %c0_i32_860 = arith.constant 0 : i32
    %1564 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_860) : (!llvm.ptr, i32) -> i32
    %1565 = arith.extui %1564 : i32 to i64
    %c65536_i64_861 = arith.constant 65536 : i64
    %1566 = arith.muli %1565, %c65536_i64_861 : i64
    %1567 = arith.cmpi ult, %1563, %1566 : i64
    cf.cond_br %1567, ^bb294, ^bb295
  ^bb293:  // pred: ^bb290
    %c1_i32_862 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_862) : (i32) -> ()
    cf.br ^bb292
  ^bb294:  // 2 preds: ^bb292, ^bb295
    %1568 = llvm.getelementptr %16[%1562] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1569 = llvm.load volatile %1568 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c144_i64_863 = arith.constant 144 : i64
    %1570 = arith.extui %1559 : i32 to i64
    %1571 = arith.addi %1570, %c144_i64_863 : i64
    %c8_i64_864 = arith.constant 8 : i64
    %1572 = arith.addi %1571, %c8_i64_864 : i64
    %c0_i32_865 = arith.constant 0 : i32
    %1573 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_865) : (!llvm.ptr, i32) -> i32
    %1574 = arith.extui %1573 : i32 to i64
    %c65536_i64_866 = arith.constant 65536 : i64
    %1575 = arith.muli %1574, %c65536_i64_866 : i64
    %1576 = arith.cmpi ult, %1572, %1575 : i64
    cf.cond_br %1576, ^bb296, ^bb297
  ^bb295:  // pred: ^bb292
    %c1_i32_867 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_867) : (i32) -> ()
    cf.br ^bb294
  ^bb296:  // 2 preds: ^bb294, ^bb297
    %1577 = llvm.getelementptr %16[%1571] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1569, %1577 {alignment = 1 : i64} : i64, !llvm.ptr
    %1578 = llvm.load %8 : !llvm.ptr -> i32
    %1579 = llvm.load %1 : !llvm.ptr -> i32
    %c108_i32 = arith.constant 108 : i32
    %1580 = arith.addi %1579, %c108_i32 : i32
    %c0_i64_868 = arith.constant 0 : i64
    %1581 = arith.extui %1580 : i32 to i64
    %1582 = arith.addi %1581, %c0_i64_868 : i64
    %c4_i64_869 = arith.constant 4 : i64
    %1583 = arith.addi %1582, %c4_i64_869 : i64
    %c0_i32_870 = arith.constant 0 : i32
    %1584 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_870) : (!llvm.ptr, i32) -> i32
    %1585 = arith.extui %1584 : i32 to i64
    %c65536_i64_871 = arith.constant 65536 : i64
    %1586 = arith.muli %1585, %c65536_i64_871 : i64
    %1587 = arith.cmpi ult, %1583, %1586 : i64
    cf.cond_br %1587, ^bb298, ^bb299
  ^bb297:  // pred: ^bb294
    %c1_i32_872 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_872) : (i32) -> ()
    cf.br ^bb296
  ^bb298:  // 2 preds: ^bb296, ^bb299
    %1588 = llvm.getelementptr %16[%1582] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1589 = llvm.load volatile %1588 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_873 = arith.constant 0 : i64
    %1590 = arith.extui %1578 : i32 to i64
    %1591 = arith.addi %1590, %c0_i64_873 : i64
    %c4_i64_874 = arith.constant 4 : i64
    %1592 = arith.addi %1591, %c4_i64_874 : i64
    %c0_i32_875 = arith.constant 0 : i32
    %1593 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_875) : (!llvm.ptr, i32) -> i32
    %1594 = arith.extui %1593 : i32 to i64
    %c65536_i64_876 = arith.constant 65536 : i64
    %1595 = arith.muli %1594, %c65536_i64_876 : i64
    %1596 = arith.cmpi ult, %1592, %1595 : i64
    cf.cond_br %1596, ^bb300, ^bb301
  ^bb299:  // pred: ^bb296
    %c1_i32_877 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_877) : (i32) -> ()
    cf.br ^bb298
  ^bb300:  // 2 preds: ^bb298, ^bb301
    %1597 = llvm.getelementptr %16[%1591] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1589, %1597 {alignment = 1 : i64} : i32, !llvm.ptr
    %1598 = llvm.load %9 : !llvm.ptr -> i32
    %1599 = llvm.load %1 : !llvm.ptr -> i32
    %c100_i32_878 = arith.constant 100 : i32
    %1600 = arith.addi %1599, %c100_i32_878 : i32
    %c0_i64_879 = arith.constant 0 : i64
    %1601 = arith.extui %1600 : i32 to i64
    %1602 = arith.addi %1601, %c0_i64_879 : i64
    %c8_i64_880 = arith.constant 8 : i64
    %1603 = arith.addi %1602, %c8_i64_880 : i64
    %c0_i32_881 = arith.constant 0 : i32
    %1604 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_881) : (!llvm.ptr, i32) -> i32
    %1605 = arith.extui %1604 : i32 to i64
    %c65536_i64_882 = arith.constant 65536 : i64
    %1606 = arith.muli %1605, %c65536_i64_882 : i64
    %1607 = arith.cmpi ult, %1603, %1606 : i64
    cf.cond_br %1607, ^bb302, ^bb303
  ^bb301:  // pred: ^bb298
    %c1_i32_883 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_883) : (i32) -> ()
    cf.br ^bb300
  ^bb302:  // 2 preds: ^bb300, ^bb303
    %1608 = llvm.getelementptr %16[%1602] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1609 = llvm.load volatile %1608 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_884 = arith.constant 0 : i64
    %1610 = arith.extui %1598 : i32 to i64
    %1611 = arith.addi %1610, %c0_i64_884 : i64
    %c8_i64_885 = arith.constant 8 : i64
    %1612 = arith.addi %1611, %c8_i64_885 : i64
    %c0_i32_886 = arith.constant 0 : i32
    %1613 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_886) : (!llvm.ptr, i32) -> i32
    %1614 = arith.extui %1613 : i32 to i64
    %c65536_i64_887 = arith.constant 65536 : i64
    %1615 = arith.muli %1614, %c65536_i64_887 : i64
    %1616 = arith.cmpi ult, %1612, %1615 : i64
    cf.cond_br %1616, ^bb304, ^bb305
  ^bb303:  // pred: ^bb300
    %c1_i32_888 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_888) : (i32) -> ()
    cf.br ^bb302
  ^bb304:  // 2 preds: ^bb302, ^bb305
    %1617 = llvm.getelementptr %16[%1611] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1609, %1617 {alignment = 1 : i64} : i64, !llvm.ptr
    %1618 = llvm.load %2 : !llvm.ptr -> i32
    %1619 = llvm.load %1 : !llvm.ptr -> i32
    %c92_i64 = arith.constant 92 : i64
    %1620 = arith.extui %1619 : i32 to i64
    %1621 = arith.addi %1620, %c92_i64 : i64
    %c8_i64_889 = arith.constant 8 : i64
    %1622 = arith.addi %1621, %c8_i64_889 : i64
    %c0_i32_890 = arith.constant 0 : i32
    %1623 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_890) : (!llvm.ptr, i32) -> i32
    %1624 = arith.extui %1623 : i32 to i64
    %c65536_i64_891 = arith.constant 65536 : i64
    %1625 = arith.muli %1624, %c65536_i64_891 : i64
    %1626 = arith.cmpi ult, %1622, %1625 : i64
    cf.cond_br %1626, ^bb306, ^bb307
  ^bb305:  // pred: ^bb302
    %c1_i32_892 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_892) : (i32) -> ()
    cf.br ^bb304
  ^bb306:  // 2 preds: ^bb304, ^bb307
    %1627 = llvm.getelementptr %16[%1621] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1628 = llvm.load volatile %1627 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c272_i64_893 = arith.constant 272 : i64
    %1629 = arith.extui %1618 : i32 to i64
    %1630 = arith.addi %1629, %c272_i64_893 : i64
    %c8_i64_894 = arith.constant 8 : i64
    %1631 = arith.addi %1630, %c8_i64_894 : i64
    %c0_i32_895 = arith.constant 0 : i32
    %1632 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_895) : (!llvm.ptr, i32) -> i32
    %1633 = arith.extui %1632 : i32 to i64
    %c65536_i64_896 = arith.constant 65536 : i64
    %1634 = arith.muli %1633, %c65536_i64_896 : i64
    %1635 = arith.cmpi ult, %1631, %1634 : i64
    cf.cond_br %1635, ^bb308, ^bb309
  ^bb307:  // pred: ^bb304
    %c1_i32_897 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_897) : (i32) -> ()
    cf.br ^bb306
  ^bb308:  // 2 preds: ^bb306, ^bb309
    %1636 = llvm.getelementptr %16[%1630] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1628, %1636 {alignment = 1 : i64} : i64, !llvm.ptr
    %1637 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64_898 = arith.constant 0 : i64
    %c0_i64_899 = arith.constant 0 : i64
    %1638 = arith.extui %1637 : i32 to i64
    %1639 = arith.addi %1638, %c0_i64_899 : i64
    %c8_i64_900 = arith.constant 8 : i64
    %1640 = arith.addi %1639, %c8_i64_900 : i64
    %c0_i32_901 = arith.constant 0 : i32
    %1641 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_901) : (!llvm.ptr, i32) -> i32
    %1642 = arith.extui %1641 : i32 to i64
    %c65536_i64_902 = arith.constant 65536 : i64
    %1643 = arith.muli %1642, %c65536_i64_902 : i64
    %1644 = arith.cmpi ult, %1640, %1643 : i64
    cf.cond_br %1644, ^bb310, ^bb311
  ^bb309:  // pred: ^bb306
    %c1_i32_903 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_903) : (i32) -> ()
    cf.br ^bb308
  ^bb310:  // 2 preds: ^bb308, ^bb311
    %1645 = llvm.getelementptr %16[%1639] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_898, %1645 {alignment = 1 : i64} : i64, !llvm.ptr
    %1646 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_904 = arith.constant 0 : i64
    %c0_i64_905 = arith.constant 0 : i64
    %1647 = arith.extui %1646 : i32 to i64
    %1648 = arith.addi %1647, %c0_i64_905 : i64
    %c8_i64_906 = arith.constant 8 : i64
    %1649 = arith.addi %1648, %c8_i64_906 : i64
    %c0_i32_907 = arith.constant 0 : i32
    %1650 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_907) : (!llvm.ptr, i32) -> i32
    %1651 = arith.extui %1650 : i32 to i64
    %c65536_i64_908 = arith.constant 65536 : i64
    %1652 = arith.muli %1651, %c65536_i64_908 : i64
    %1653 = arith.cmpi ult, %1649, %1652 : i64
    cf.cond_br %1653, ^bb312, ^bb313
  ^bb311:  // pred: ^bb308
    %c1_i32_909 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_909) : (i32) -> ()
    cf.br ^bb310
  ^bb312:  // 2 preds: ^bb310, ^bb313
    %1654 = llvm.getelementptr %16[%1648] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_904, %1654 {alignment = 1 : i64} : i64, !llvm.ptr
    %1655 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_910 = arith.constant 0 : i64
    %c0_i64_911 = arith.constant 0 : i64
    %1656 = arith.extui %1655 : i32 to i64
    %1657 = arith.addi %1656, %c0_i64_911 : i64
    %c8_i64_912 = arith.constant 8 : i64
    %1658 = arith.addi %1657, %c8_i64_912 : i64
    %c0_i32_913 = arith.constant 0 : i32
    %1659 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_913) : (!llvm.ptr, i32) -> i32
    %1660 = arith.extui %1659 : i32 to i64
    %c65536_i64_914 = arith.constant 65536 : i64
    %1661 = arith.muli %1660, %c65536_i64_914 : i64
    %1662 = arith.cmpi ult, %1658, %1661 : i64
    cf.cond_br %1662, ^bb314, ^bb315
  ^bb313:  // pred: ^bb310
    %c1_i32_915 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_915) : (i32) -> ()
    cf.br ^bb312
  ^bb314:  // 2 preds: ^bb312, ^bb315
    %1663 = llvm.getelementptr %16[%1657] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_910, %1663 {alignment = 1 : i64} : i64, !llvm.ptr
    %1664 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_916 = arith.constant 0 : i64
    %c16_i64_917 = arith.constant 16 : i64
    %1665 = arith.extui %1664 : i32 to i64
    %1666 = arith.addi %1665, %c16_i64_917 : i64
    %c8_i64_918 = arith.constant 8 : i64
    %1667 = arith.addi %1666, %c8_i64_918 : i64
    %c0_i32_919 = arith.constant 0 : i32
    %1668 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_919) : (!llvm.ptr, i32) -> i32
    %1669 = arith.extui %1668 : i32 to i64
    %c65536_i64_920 = arith.constant 65536 : i64
    %1670 = arith.muli %1669, %c65536_i64_920 : i64
    %1671 = arith.cmpi ult, %1667, %1670 : i64
    cf.cond_br %1671, ^bb316, ^bb317
  ^bb315:  // pred: ^bb312
    %c1_i32_921 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_921) : (i32) -> ()
    cf.br ^bb314
  ^bb316:  // 2 preds: ^bb314, ^bb317
    %1672 = llvm.getelementptr %16[%1666] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_916, %1672 {alignment = 1 : i64} : i64, !llvm.ptr
    %1673 = llvm.load %10 : !llvm.ptr -> i32
    %c20_i32_922 = arith.constant 20 : i32
    %1674 = llvm.load %2 : !llvm.ptr -> i32
    %c272_i32_923 = arith.constant 272 : i32
    %1675 = arith.addi %1674, %c272_i32_923 : i32
    %c20_i32_924 = arith.constant 20 : i32
    %c1049972_i32_925 = arith.constant 1049972 : i32
    call @f114(%arg0, %1673, %c20_i32_922, %1675, %c20_i32_924, %c1049972_i32_925) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %1676 = llvm.load %2 : !llvm.ptr -> i32
    %c176_i32_926 = arith.constant 176 : i32
    %1677 = arith.addi %1676, %c176_i32_926 : i32
    %c24_i32_927 = arith.constant 24 : i32
    %1678 = arith.addi %1677, %c24_i32_927 : i32
    %1679 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64_928 = arith.constant 0 : i64
    %1680 = arith.extui %1679 : i32 to i64
    %1681 = arith.addi %1680, %c0_i64_928 : i64
    %c8_i64_929 = arith.constant 8 : i64
    %1682 = arith.addi %1681, %c8_i64_929 : i64
    %c0_i32_930 = arith.constant 0 : i32
    %1683 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_930) : (!llvm.ptr, i32) -> i32
    %1684 = arith.extui %1683 : i32 to i64
    %c65536_i64_931 = arith.constant 65536 : i64
    %1685 = arith.muli %1684, %c65536_i64_931 : i64
    %1686 = arith.cmpi ult, %1682, %1685 : i64
    cf.cond_br %1686, ^bb318, ^bb319
  ^bb317:  // pred: ^bb314
    %c1_i32_932 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_932) : (i32) -> ()
    cf.br ^bb316
  ^bb318:  // 2 preds: ^bb316, ^bb319
    %1687 = llvm.getelementptr %16[%1681] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1688 = llvm.load volatile %1687 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_933 = arith.constant 0 : i64
    %1689 = arith.extui %1678 : i32 to i64
    %1690 = arith.addi %1689, %c0_i64_933 : i64
    %c8_i64_934 = arith.constant 8 : i64
    %1691 = arith.addi %1690, %c8_i64_934 : i64
    %c0_i32_935 = arith.constant 0 : i32
    %1692 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_935) : (!llvm.ptr, i32) -> i32
    %1693 = arith.extui %1692 : i32 to i64
    %c65536_i64_936 = arith.constant 65536 : i64
    %1694 = arith.muli %1693, %c65536_i64_936 : i64
    %1695 = arith.cmpi ult, %1691, %1694 : i64
    cf.cond_br %1695, ^bb320, ^bb321
  ^bb319:  // pred: ^bb316
    %c1_i32_937 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_937) : (i32) -> ()
    cf.br ^bb318
  ^bb320:  // 2 preds: ^bb318, ^bb321
    %1696 = llvm.getelementptr %16[%1690] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1688, %1696 {alignment = 1 : i64} : i64, !llvm.ptr
    %1697 = llvm.load %2 : !llvm.ptr -> i32
    %c176_i32_938 = arith.constant 176 : i32
    %1698 = arith.addi %1697, %c176_i32_938 : i32
    %c16_i32_939 = arith.constant 16 : i32
    %1699 = arith.addi %1698, %c16_i32_939 : i32
    %1700 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_940 = arith.constant 0 : i64
    %1701 = arith.extui %1700 : i32 to i64
    %1702 = arith.addi %1701, %c0_i64_940 : i64
    %c8_i64_941 = arith.constant 8 : i64
    %1703 = arith.addi %1702, %c8_i64_941 : i64
    %c0_i32_942 = arith.constant 0 : i32
    %1704 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_942) : (!llvm.ptr, i32) -> i32
    %1705 = arith.extui %1704 : i32 to i64
    %c65536_i64_943 = arith.constant 65536 : i64
    %1706 = arith.muli %1705, %c65536_i64_943 : i64
    %1707 = arith.cmpi ult, %1703, %1706 : i64
    cf.cond_br %1707, ^bb322, ^bb323
  ^bb321:  // pred: ^bb318
    %c1_i32_944 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_944) : (i32) -> ()
    cf.br ^bb320
  ^bb322:  // 2 preds: ^bb320, ^bb323
    %1708 = llvm.getelementptr %16[%1702] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1709 = llvm.load volatile %1708 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_945 = arith.constant 0 : i64
    %1710 = arith.extui %1699 : i32 to i64
    %1711 = arith.addi %1710, %c0_i64_945 : i64
    %c8_i64_946 = arith.constant 8 : i64
    %1712 = arith.addi %1711, %c8_i64_946 : i64
    %c0_i32_947 = arith.constant 0 : i32
    %1713 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_947) : (!llvm.ptr, i32) -> i32
    %1714 = arith.extui %1713 : i32 to i64
    %c65536_i64_948 = arith.constant 65536 : i64
    %1715 = arith.muli %1714, %c65536_i64_948 : i64
    %1716 = arith.cmpi ult, %1712, %1715 : i64
    cf.cond_br %1716, ^bb324, ^bb325
  ^bb323:  // pred: ^bb320
    %c1_i32_949 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_949) : (i32) -> ()
    cf.br ^bb322
  ^bb324:  // 2 preds: ^bb322, ^bb325
    %1717 = llvm.getelementptr %16[%1711] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1709, %1717 {alignment = 1 : i64} : i64, !llvm.ptr
    %1718 = llvm.load %2 : !llvm.ptr -> i32
    %c176_i32_950 = arith.constant 176 : i32
    %1719 = arith.addi %1718, %c176_i32_950 : i32
    %c8_i32_951 = arith.constant 8 : i32
    %1720 = arith.addi %1719, %c8_i32_951 : i32
    %1721 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_952 = arith.constant 0 : i64
    %1722 = arith.extui %1721 : i32 to i64
    %1723 = arith.addi %1722, %c0_i64_952 : i64
    %c8_i64_953 = arith.constant 8 : i64
    %1724 = arith.addi %1723, %c8_i64_953 : i64
    %c0_i32_954 = arith.constant 0 : i32
    %1725 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_954) : (!llvm.ptr, i32) -> i32
    %1726 = arith.extui %1725 : i32 to i64
    %c65536_i64_955 = arith.constant 65536 : i64
    %1727 = arith.muli %1726, %c65536_i64_955 : i64
    %1728 = arith.cmpi ult, %1724, %1727 : i64
    cf.cond_br %1728, ^bb326, ^bb327
  ^bb325:  // pred: ^bb322
    %c1_i32_956 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_956) : (i32) -> ()
    cf.br ^bb324
  ^bb326:  // 2 preds: ^bb324, ^bb327
    %1729 = llvm.getelementptr %16[%1723] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1730 = llvm.load volatile %1729 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_957 = arith.constant 0 : i64
    %1731 = arith.extui %1720 : i32 to i64
    %1732 = arith.addi %1731, %c0_i64_957 : i64
    %c8_i64_958 = arith.constant 8 : i64
    %1733 = arith.addi %1732, %c8_i64_958 : i64
    %c0_i32_959 = arith.constant 0 : i32
    %1734 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_959) : (!llvm.ptr, i32) -> i32
    %1735 = arith.extui %1734 : i32 to i64
    %c65536_i64_960 = arith.constant 65536 : i64
    %1736 = arith.muli %1735, %c65536_i64_960 : i64
    %1737 = arith.cmpi ult, %1733, %1736 : i64
    cf.cond_br %1737, ^bb328, ^bb329
  ^bb327:  // pred: ^bb324
    %c1_i32_961 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_961) : (i32) -> ()
    cf.br ^bb326
  ^bb328:  // 2 preds: ^bb326, ^bb329
    %1738 = llvm.getelementptr %16[%1732] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1730, %1738 {alignment = 1 : i64} : i64, !llvm.ptr
    %1739 = llvm.load %2 : !llvm.ptr -> i32
    %1740 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i64_962 = arith.constant 16 : i64
    %1741 = arith.extui %1740 : i32 to i64
    %1742 = arith.addi %1741, %c16_i64_962 : i64
    %c8_i64_963 = arith.constant 8 : i64
    %1743 = arith.addi %1742, %c8_i64_963 : i64
    %c0_i32_964 = arith.constant 0 : i32
    %1744 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_964) : (!llvm.ptr, i32) -> i32
    %1745 = arith.extui %1744 : i32 to i64
    %c65536_i64_965 = arith.constant 65536 : i64
    %1746 = arith.muli %1745, %c65536_i64_965 : i64
    %1747 = arith.cmpi ult, %1743, %1746 : i64
    cf.cond_br %1747, ^bb330, ^bb331
  ^bb329:  // pred: ^bb326
    %c1_i32_966 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_966) : (i32) -> ()
    cf.br ^bb328
  ^bb330:  // 2 preds: ^bb328, ^bb331
    %1748 = llvm.getelementptr %16[%1742] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1749 = llvm.load volatile %1748 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c176_i64_967 = arith.constant 176 : i64
    %1750 = arith.extui %1739 : i32 to i64
    %1751 = arith.addi %1750, %c176_i64_967 : i64
    %c8_i64_968 = arith.constant 8 : i64
    %1752 = arith.addi %1751, %c8_i64_968 : i64
    %c0_i32_969 = arith.constant 0 : i32
    %1753 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_969) : (!llvm.ptr, i32) -> i32
    %1754 = arith.extui %1753 : i32 to i64
    %c65536_i64_970 = arith.constant 65536 : i64
    %1755 = arith.muli %1754, %c65536_i64_970 : i64
    %1756 = arith.cmpi ult, %1752, %1755 : i64
    cf.cond_br %1756, ^bb332, ^bb333
  ^bb331:  // pred: ^bb328
    %c1_i32_971 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_971) : (i32) -> ()
    cf.br ^bb330
  ^bb332:  // 2 preds: ^bb330, ^bb333
    %1757 = llvm.getelementptr %16[%1751] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1749, %1757 {alignment = 1 : i64} : i64, !llvm.ptr
    %1758 = llvm.load %2 : !llvm.ptr -> i32
    %c240_i32_972 = arith.constant 240 : i32
    %1759 = arith.addi %1758, %c240_i32_972 : i32
    %c24_i32_973 = arith.constant 24 : i32
    %1760 = arith.addi %1759, %c24_i32_973 : i32
    %c0_i64_974 = arith.constant 0 : i64
    %c0_i64_975 = arith.constant 0 : i64
    %1761 = arith.extui %1760 : i32 to i64
    %1762 = arith.addi %1761, %c0_i64_975 : i64
    %c8_i64_976 = arith.constant 8 : i64
    %1763 = arith.addi %1762, %c8_i64_976 : i64
    %c0_i32_977 = arith.constant 0 : i32
    %1764 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_977) : (!llvm.ptr, i32) -> i32
    %1765 = arith.extui %1764 : i32 to i64
    %c65536_i64_978 = arith.constant 65536 : i64
    %1766 = arith.muli %1765, %c65536_i64_978 : i64
    %1767 = arith.cmpi ult, %1763, %1766 : i64
    cf.cond_br %1767, ^bb334, ^bb335
  ^bb333:  // pred: ^bb330
    %c1_i32_979 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_979) : (i32) -> ()
    cf.br ^bb332
  ^bb334:  // 2 preds: ^bb332, ^bb335
    %1768 = llvm.getelementptr %16[%1762] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_974, %1768 {alignment = 1 : i64} : i64, !llvm.ptr
    %1769 = llvm.load %2 : !llvm.ptr -> i32
    %c240_i32_980 = arith.constant 240 : i32
    %1770 = arith.addi %1769, %c240_i32_980 : i32
    %c16_i32_981 = arith.constant 16 : i32
    %1771 = arith.addi %1770, %c16_i32_981 : i32
    %c0_i64_982 = arith.constant 0 : i64
    %c0_i64_983 = arith.constant 0 : i64
    %1772 = arith.extui %1771 : i32 to i64
    %1773 = arith.addi %1772, %c0_i64_983 : i64
    %c8_i64_984 = arith.constant 8 : i64
    %1774 = arith.addi %1773, %c8_i64_984 : i64
    %c0_i32_985 = arith.constant 0 : i32
    %1775 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_985) : (!llvm.ptr, i32) -> i32
    %1776 = arith.extui %1775 : i32 to i64
    %c65536_i64_986 = arith.constant 65536 : i64
    %1777 = arith.muli %1776, %c65536_i64_986 : i64
    %1778 = arith.cmpi ult, %1774, %1777 : i64
    cf.cond_br %1778, ^bb336, ^bb337
  ^bb335:  // pred: ^bb332
    %c1_i32_987 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_987) : (i32) -> ()
    cf.br ^bb334
  ^bb336:  // 2 preds: ^bb334, ^bb337
    %1779 = llvm.getelementptr %16[%1773] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_982, %1779 {alignment = 1 : i64} : i64, !llvm.ptr
    %1780 = llvm.load %2 : !llvm.ptr -> i32
    %c240_i32_988 = arith.constant 240 : i32
    %1781 = arith.addi %1780, %c240_i32_988 : i32
    %c8_i32_989 = arith.constant 8 : i32
    %1782 = arith.addi %1781, %c8_i32_989 : i32
    %c0_i64_990 = arith.constant 0 : i64
    %c0_i64_991 = arith.constant 0 : i64
    %1783 = arith.extui %1782 : i32 to i64
    %1784 = arith.addi %1783, %c0_i64_991 : i64
    %c8_i64_992 = arith.constant 8 : i64
    %1785 = arith.addi %1784, %c8_i64_992 : i64
    %c0_i32_993 = arith.constant 0 : i32
    %1786 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_993) : (!llvm.ptr, i32) -> i32
    %1787 = arith.extui %1786 : i32 to i64
    %c65536_i64_994 = arith.constant 65536 : i64
    %1788 = arith.muli %1787, %c65536_i64_994 : i64
    %1789 = arith.cmpi ult, %1785, %1788 : i64
    cf.cond_br %1789, ^bb338, ^bb339
  ^bb337:  // pred: ^bb334
    %c1_i32_995 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_995) : (i32) -> ()
    cf.br ^bb336
  ^bb338:  // 2 preds: ^bb336, ^bb339
    %1790 = llvm.getelementptr %16[%1784] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_990, %1790 {alignment = 1 : i64} : i64, !llvm.ptr
    %1791 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_996 = arith.constant 0 : i64
    %c240_i64_997 = arith.constant 240 : i64
    %1792 = arith.extui %1791 : i32 to i64
    %1793 = arith.addi %1792, %c240_i64_997 : i64
    %c8_i64_998 = arith.constant 8 : i64
    %1794 = arith.addi %1793, %c8_i64_998 : i64
    %c0_i32_999 = arith.constant 0 : i32
    %1795 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_999) : (!llvm.ptr, i32) -> i32
    %1796 = arith.extui %1795 : i32 to i64
    %c65536_i64_1000 = arith.constant 65536 : i64
    %1797 = arith.muli %1796, %c65536_i64_1000 : i64
    %1798 = arith.cmpi ult, %1794, %1797 : i64
    cf.cond_br %1798, ^bb340, ^bb341
  ^bb339:  // pred: ^bb336
    %c1_i32_1001 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1001) : (i32) -> ()
    cf.br ^bb338
  ^bb340:  // 2 preds: ^bb338, ^bb341
    %1799 = llvm.getelementptr %16[%1793] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_996, %1799 {alignment = 1 : i64} : i64, !llvm.ptr
    %1800 = llvm.load %5 : !llvm.ptr -> i32
    %1801 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32_1002 = arith.constant 24 : i32
    %1802 = arith.addi %1801, %c24_i32_1002 : i32
    %c0_i64_1003 = arith.constant 0 : i64
    %1803 = arith.extui %1802 : i32 to i64
    %1804 = arith.addi %1803, %c0_i64_1003 : i64
    %c8_i64_1004 = arith.constant 8 : i64
    %1805 = arith.addi %1804, %c8_i64_1004 : i64
    %c0_i32_1005 = arith.constant 0 : i32
    %1806 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1005) : (!llvm.ptr, i32) -> i32
    %1807 = arith.extui %1806 : i32 to i64
    %c65536_i64_1006 = arith.constant 65536 : i64
    %1808 = arith.muli %1807, %c65536_i64_1006 : i64
    %1809 = arith.cmpi ult, %1805, %1808 : i64
    cf.cond_br %1809, ^bb342, ^bb343
  ^bb341:  // pred: ^bb338
    %c1_i32_1007 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1007) : (i32) -> ()
    cf.br ^bb340
  ^bb342:  // 2 preds: ^bb340, ^bb343
    %1810 = llvm.getelementptr %16[%1804] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1811 = llvm.load volatile %1810 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1008 = arith.constant 0 : i64
    %1812 = arith.extui %1800 : i32 to i64
    %1813 = arith.addi %1812, %c0_i64_1008 : i64
    %c8_i64_1009 = arith.constant 8 : i64
    %1814 = arith.addi %1813, %c8_i64_1009 : i64
    %c0_i32_1010 = arith.constant 0 : i32
    %1815 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1010) : (!llvm.ptr, i32) -> i32
    %1816 = arith.extui %1815 : i32 to i64
    %c65536_i64_1011 = arith.constant 65536 : i64
    %1817 = arith.muli %1816, %c65536_i64_1011 : i64
    %1818 = arith.cmpi ult, %1814, %1817 : i64
    cf.cond_br %1818, ^bb344, ^bb345
  ^bb343:  // pred: ^bb340
    %c1_i32_1012 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1012) : (i32) -> ()
    cf.br ^bb342
  ^bb344:  // 2 preds: ^bb342, ^bb345
    %1819 = llvm.getelementptr %16[%1813] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1811, %1819 {alignment = 1 : i64} : i64, !llvm.ptr
    %1820 = llvm.load %6 : !llvm.ptr -> i32
    %1821 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_1013 = arith.constant 16 : i32
    %1822 = arith.addi %1821, %c16_i32_1013 : i32
    %c0_i64_1014 = arith.constant 0 : i64
    %1823 = arith.extui %1822 : i32 to i64
    %1824 = arith.addi %1823, %c0_i64_1014 : i64
    %c8_i64_1015 = arith.constant 8 : i64
    %1825 = arith.addi %1824, %c8_i64_1015 : i64
    %c0_i32_1016 = arith.constant 0 : i32
    %1826 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1016) : (!llvm.ptr, i32) -> i32
    %1827 = arith.extui %1826 : i32 to i64
    %c65536_i64_1017 = arith.constant 65536 : i64
    %1828 = arith.muli %1827, %c65536_i64_1017 : i64
    %1829 = arith.cmpi ult, %1825, %1828 : i64
    cf.cond_br %1829, ^bb346, ^bb347
  ^bb345:  // pred: ^bb342
    %c1_i32_1018 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1018) : (i32) -> ()
    cf.br ^bb344
  ^bb346:  // 2 preds: ^bb344, ^bb347
    %1830 = llvm.getelementptr %16[%1824] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1831 = llvm.load volatile %1830 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1019 = arith.constant 0 : i64
    %1832 = arith.extui %1820 : i32 to i64
    %1833 = arith.addi %1832, %c0_i64_1019 : i64
    %c8_i64_1020 = arith.constant 8 : i64
    %1834 = arith.addi %1833, %c8_i64_1020 : i64
    %c0_i32_1021 = arith.constant 0 : i32
    %1835 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1021) : (!llvm.ptr, i32) -> i32
    %1836 = arith.extui %1835 : i32 to i64
    %c65536_i64_1022 = arith.constant 65536 : i64
    %1837 = arith.muli %1836, %c65536_i64_1022 : i64
    %1838 = arith.cmpi ult, %1834, %1837 : i64
    cf.cond_br %1838, ^bb348, ^bb349
  ^bb347:  // pred: ^bb344
    %c1_i32_1023 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1023) : (i32) -> ()
    cf.br ^bb346
  ^bb348:  // 2 preds: ^bb346, ^bb349
    %1839 = llvm.getelementptr %16[%1833] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1831, %1839 {alignment = 1 : i64} : i64, !llvm.ptr
    %1840 = llvm.load %7 : !llvm.ptr -> i32
    %1841 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_1024 = arith.constant 8 : i32
    %1842 = arith.addi %1841, %c8_i32_1024 : i32
    %c0_i64_1025 = arith.constant 0 : i64
    %1843 = arith.extui %1842 : i32 to i64
    %1844 = arith.addi %1843, %c0_i64_1025 : i64
    %c8_i64_1026 = arith.constant 8 : i64
    %1845 = arith.addi %1844, %c8_i64_1026 : i64
    %c0_i32_1027 = arith.constant 0 : i32
    %1846 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1027) : (!llvm.ptr, i32) -> i32
    %1847 = arith.extui %1846 : i32 to i64
    %c65536_i64_1028 = arith.constant 65536 : i64
    %1848 = arith.muli %1847, %c65536_i64_1028 : i64
    %1849 = arith.cmpi ult, %1845, %1848 : i64
    cf.cond_br %1849, ^bb350, ^bb351
  ^bb349:  // pred: ^bb346
    %c1_i32_1029 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1029) : (i32) -> ()
    cf.br ^bb348
  ^bb350:  // 2 preds: ^bb348, ^bb351
    %1850 = llvm.getelementptr %16[%1844] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1851 = llvm.load volatile %1850 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1030 = arith.constant 0 : i64
    %1852 = arith.extui %1840 : i32 to i64
    %1853 = arith.addi %1852, %c0_i64_1030 : i64
    %c8_i64_1031 = arith.constant 8 : i64
    %1854 = arith.addi %1853, %c8_i64_1031 : i64
    %c0_i32_1032 = arith.constant 0 : i32
    %1855 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1032) : (!llvm.ptr, i32) -> i32
    %1856 = arith.extui %1855 : i32 to i64
    %c65536_i64_1033 = arith.constant 65536 : i64
    %1857 = arith.muli %1856, %c65536_i64_1033 : i64
    %1858 = arith.cmpi ult, %1854, %1857 : i64
    cf.cond_br %1858, ^bb352, ^bb353
  ^bb351:  // pred: ^bb348
    %c1_i32_1034 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1034) : (i32) -> ()
    cf.br ^bb350
  ^bb352:  // 2 preds: ^bb350, ^bb353
    %1859 = llvm.getelementptr %16[%1853] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1851, %1859 {alignment = 1 : i64} : i64, !llvm.ptr
    %1860 = llvm.load %2 : !llvm.ptr -> i32
    %1861 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_1035 = arith.constant 0 : i64
    %1862 = arith.extui %1861 : i32 to i64
    %1863 = arith.addi %1862, %c0_i64_1035 : i64
    %c8_i64_1036 = arith.constant 8 : i64
    %1864 = arith.addi %1863, %c8_i64_1036 : i64
    %c0_i32_1037 = arith.constant 0 : i32
    %1865 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1037) : (!llvm.ptr, i32) -> i32
    %1866 = arith.extui %1865 : i32 to i64
    %c65536_i64_1038 = arith.constant 65536 : i64
    %1867 = arith.muli %1866, %c65536_i64_1038 : i64
    %1868 = arith.cmpi ult, %1864, %1867 : i64
    cf.cond_br %1868, ^bb354, ^bb355
  ^bb353:  // pred: ^bb350
    %c1_i32_1039 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1039) : (i32) -> ()
    cf.br ^bb352
  ^bb354:  // 2 preds: ^bb352, ^bb355
    %1869 = llvm.getelementptr %16[%1863] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1870 = llvm.load volatile %1869 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c16_i64_1040 = arith.constant 16 : i64
    %1871 = arith.extui %1860 : i32 to i64
    %1872 = arith.addi %1871, %c16_i64_1040 : i64
    %c8_i64_1041 = arith.constant 8 : i64
    %1873 = arith.addi %1872, %c8_i64_1041 : i64
    %c0_i32_1042 = arith.constant 0 : i32
    %1874 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1042) : (!llvm.ptr, i32) -> i32
    %1875 = arith.extui %1874 : i32 to i64
    %c65536_i64_1043 = arith.constant 65536 : i64
    %1876 = arith.muli %1875, %c65536_i64_1043 : i64
    %1877 = arith.cmpi ult, %1873, %1876 : i64
    cf.cond_br %1877, ^bb356, ^bb357
  ^bb355:  // pred: ^bb352
    %c1_i32_1044 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1044) : (i32) -> ()
    cf.br ^bb354
  ^bb356:  // 2 preds: ^bb354, ^bb357
    %1878 = llvm.getelementptr %16[%1872] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1870, %1878 {alignment = 1 : i64} : i64, !llvm.ptr
    %1879 = llvm.load %2 : !llvm.ptr -> i32
    %c47_i32_1045 = arith.constant 47 : i32
    %1880 = arith.addi %1879, %c47_i32_1045 : i32
    llvm.store %1880, %3 : i32, !llvm.ptr
    cf.br ^bb359
  ^bb357:  // pred: ^bb354
    %c1_i32_1046 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1046) : (i32) -> ()
    cf.br ^bb356
  ^bb358:  // pred: ^bb368
    %1881 = llvm.load %2 : !llvm.ptr -> i32
    %c272_i32_1047 = arith.constant 272 : i32
    %1882 = arith.addi %1881, %c272_i32_1047 : i32
    %c24_i32_1048 = arith.constant 24 : i32
    %1883 = arith.addi %1882, %c24_i32_1048 : i32
    %1884 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_1049 = arith.constant 16 : i32
    %1885 = arith.addi %1884, %c16_i32_1049 : i32
    %c24_i32_1050 = arith.constant 24 : i32
    %1886 = arith.addi %1885, %c24_i32_1050 : i32
    llvm.store %1886, %3 : i32, !llvm.ptr
    %c0_i64_1051 = arith.constant 0 : i64
    %1887 = arith.extui %1886 : i32 to i64
    %1888 = arith.addi %1887, %c0_i64_1051 : i64
    %c8_i64_1052 = arith.constant 8 : i64
    %1889 = arith.addi %1888, %c8_i64_1052 : i64
    %c0_i32_1053 = arith.constant 0 : i32
    %1890 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1053) : (!llvm.ptr, i32) -> i32
    %1891 = arith.extui %1890 : i32 to i64
    %c65536_i64_1054 = arith.constant 65536 : i64
    %1892 = arith.muli %1891, %c65536_i64_1054 : i64
    %1893 = arith.cmpi ult, %1889, %1892 : i64
    cf.cond_br %1893, ^bb369, ^bb370
  ^bb359:  // 2 preds: ^bb356, ^bb366
    %1894 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_1055 = arith.constant 16 : i32
    %1895 = arith.addi %1894, %c16_i32_1055 : i32
    %1896 = llvm.load %4 : !llvm.ptr -> i32
    %1897 = arith.addi %1895, %1896 : i32
    llvm.store %1897, %5 : i32, !llvm.ptr
    %c0_i64_1056 = arith.constant 0 : i64
    %1898 = arith.extui %1897 : i32 to i64
    %1899 = arith.addi %1898, %c0_i64_1056 : i64
    %c1_i64_1057 = arith.constant 1 : i64
    %1900 = arith.addi %1899, %c1_i64_1057 : i64
    %c0_i32_1058 = arith.constant 0 : i32
    %1901 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1058) : (!llvm.ptr, i32) -> i32
    %1902 = arith.extui %1901 : i32 to i64
    %c65536_i64_1059 = arith.constant 65536 : i64
    %1903 = arith.muli %1902, %c65536_i64_1059 : i64
    %1904 = arith.cmpi ult, %1900, %1903 : i64
    cf.cond_br %1904, ^bb360, ^bb361
  ^bb360:  // 2 preds: ^bb359, ^bb361
    %1905 = llvm.getelementptr %16[%1899] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1906 = llvm.load volatile %1905 {alignment = 1 : i64} : !llvm.ptr -> i8
    %1907 = arith.extui %1906 : i8 to i32
    llvm.store %1907, %6 : i32, !llvm.ptr
    %1908 = llvm.load %5 : !llvm.ptr -> i32
    %1909 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_1060 = arith.constant 0 : i64
    %1910 = arith.extui %1909 : i32 to i64
    %1911 = arith.addi %1910, %c0_i64_1060 : i64
    %c1_i64_1061 = arith.constant 1 : i64
    %1912 = arith.addi %1911, %c1_i64_1061 : i64
    %c0_i32_1062 = arith.constant 0 : i32
    %1913 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1062) : (!llvm.ptr, i32) -> i32
    %1914 = arith.extui %1913 : i32 to i64
    %c65536_i64_1063 = arith.constant 65536 : i64
    %1915 = arith.muli %1914, %c65536_i64_1063 : i64
    %1916 = arith.cmpi ult, %1912, %1915 : i64
    cf.cond_br %1916, ^bb362, ^bb363
  ^bb361:  // pred: ^bb359
    %c1_i32_1064 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1064) : (i32) -> ()
    cf.br ^bb360
  ^bb362:  // 2 preds: ^bb360, ^bb363
    %1917 = llvm.getelementptr %16[%1911] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1918 = llvm.load volatile %1917 {alignment = 1 : i64} : !llvm.ptr -> i8
    %1919 = arith.extui %1918 : i8 to i32
    %c0_i64_1065 = arith.constant 0 : i64
    %1920 = arith.extui %1908 : i32 to i64
    %1921 = arith.addi %1920, %c0_i64_1065 : i64
    %c1_i64_1066 = arith.constant 1 : i64
    %1922 = arith.addi %1921, %c1_i64_1066 : i64
    %c0_i32_1067 = arith.constant 0 : i32
    %1923 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1067) : (!llvm.ptr, i32) -> i32
    %1924 = arith.extui %1923 : i32 to i64
    %c65536_i64_1068 = arith.constant 65536 : i64
    %1925 = arith.muli %1924, %c65536_i64_1068 : i64
    %1926 = arith.cmpi ult, %1922, %1925 : i64
    cf.cond_br %1926, ^bb364, ^bb365
  ^bb363:  // pred: ^bb360
    %c1_i32_1069 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1069) : (i32) -> ()
    cf.br ^bb362
  ^bb364:  // 2 preds: ^bb362, ^bb365
    %1927 = llvm.getelementptr %16[%1921] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1928 = arith.trunci %1919 : i32 to i8
    llvm.store volatile %1928, %1927 {alignment = 1 : i64} : i8, !llvm.ptr
    %1929 = llvm.load %3 : !llvm.ptr -> i32
    %1930 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_1070 = arith.constant 0 : i64
    %1931 = arith.extui %1929 : i32 to i64
    %1932 = arith.addi %1931, %c0_i64_1070 : i64
    %c1_i64_1071 = arith.constant 1 : i64
    %1933 = arith.addi %1932, %c1_i64_1071 : i64
    %c0_i32_1072 = arith.constant 0 : i32
    %1934 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1072) : (!llvm.ptr, i32) -> i32
    %1935 = arith.extui %1934 : i32 to i64
    %c65536_i64_1073 = arith.constant 65536 : i64
    %1936 = arith.muli %1935, %c65536_i64_1073 : i64
    %1937 = arith.cmpi ult, %1933, %1936 : i64
    cf.cond_br %1937, ^bb366, ^bb367
  ^bb365:  // pred: ^bb362
    %c1_i32_1074 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1074) : (i32) -> ()
    cf.br ^bb364
  ^bb366:  // 2 preds: ^bb364, ^bb367
    %1938 = llvm.getelementptr %16[%1932] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1939 = arith.trunci %1930 : i32 to i8
    llvm.store volatile %1939, %1938 {alignment = 1 : i64} : i8, !llvm.ptr
    %1940 = llvm.load %3 : !llvm.ptr -> i32
    %c-1_i32_1075 = arith.constant -1 : i32
    %1941 = arith.addi %1940, %c-1_i32_1075 : i32
    llvm.store %1941, %3 : i32, !llvm.ptr
    %1942 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i32_1076 = arith.constant 1 : i32
    %1943 = arith.addi %1942, %c1_i32_1076 : i32
    llvm.store %1943, %4 : i32, !llvm.ptr
    %c16_i32_1077 = arith.constant 16 : i32
    %1944 = arith.cmpi eq, %1943, %c16_i32_1077 : i32
    %1945 = arith.extui %1944 : i1 to i32
    %c0_i32_1078 = arith.constant 0 : i32
    %1946 = arith.cmpi eq, %1945, %c0_i32_1078 : i32
    %1947 = arith.extui %1946 : i1 to i32
    %c0_i32_1079 = arith.constant 0 : i32
    %1948 = arith.cmpi ne, %1947, %c0_i32_1079 : i32
    cf.cond_br %1948, ^bb359, ^bb368
  ^bb367:  // pred: ^bb364
    %c1_i32_1080 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1080) : (i32) -> ()
    cf.br ^bb366
  ^bb368:  // pred: ^bb366
    cf.br ^bb358
  ^bb369:  // 2 preds: ^bb358, ^bb370
    %1949 = llvm.getelementptr %16[%1888] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1950 = llvm.load volatile %1949 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1081 = arith.constant 0 : i64
    %1951 = arith.extui %1883 : i32 to i64
    %1952 = arith.addi %1951, %c0_i64_1081 : i64
    %c8_i64_1082 = arith.constant 8 : i64
    %1953 = arith.addi %1952, %c8_i64_1082 : i64
    %c0_i32_1083 = arith.constant 0 : i32
    %1954 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1083) : (!llvm.ptr, i32) -> i32
    %1955 = arith.extui %1954 : i32 to i64
    %c65536_i64_1084 = arith.constant 65536 : i64
    %1956 = arith.muli %1955, %c65536_i64_1084 : i64
    %1957 = arith.cmpi ult, %1953, %1956 : i64
    cf.cond_br %1957, ^bb371, ^bb372
  ^bb370:  // pred: ^bb358
    %c1_i32_1085 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1085) : (i32) -> ()
    cf.br ^bb369
  ^bb371:  // 2 preds: ^bb369, ^bb372
    %1958 = llvm.getelementptr %16[%1952] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1950, %1958 {alignment = 1 : i64} : i64, !llvm.ptr
    %1959 = llvm.load %2 : !llvm.ptr -> i32
    %c272_i32_1086 = arith.constant 272 : i32
    %1960 = arith.addi %1959, %c272_i32_1086 : i32
    %c16_i32_1087 = arith.constant 16 : i32
    %1961 = arith.addi %1960, %c16_i32_1087 : i32
    %1962 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_1088 = arith.constant 16 : i32
    %1963 = arith.addi %1962, %c16_i32_1088 : i32
    %c16_i32_1089 = arith.constant 16 : i32
    %1964 = arith.addi %1963, %c16_i32_1089 : i32
    llvm.store %1964, %4 : i32, !llvm.ptr
    %c0_i64_1090 = arith.constant 0 : i64
    %1965 = arith.extui %1964 : i32 to i64
    %1966 = arith.addi %1965, %c0_i64_1090 : i64
    %c8_i64_1091 = arith.constant 8 : i64
    %1967 = arith.addi %1966, %c8_i64_1091 : i64
    %c0_i32_1092 = arith.constant 0 : i32
    %1968 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1092) : (!llvm.ptr, i32) -> i32
    %1969 = arith.extui %1968 : i32 to i64
    %c65536_i64_1093 = arith.constant 65536 : i64
    %1970 = arith.muli %1969, %c65536_i64_1093 : i64
    %1971 = arith.cmpi ult, %1967, %1970 : i64
    cf.cond_br %1971, ^bb373, ^bb374
  ^bb372:  // pred: ^bb369
    %c1_i32_1094 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1094) : (i32) -> ()
    cf.br ^bb371
  ^bb373:  // 2 preds: ^bb371, ^bb374
    %1972 = llvm.getelementptr %16[%1966] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1973 = llvm.load volatile %1972 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1095 = arith.constant 0 : i64
    %1974 = arith.extui %1961 : i32 to i64
    %1975 = arith.addi %1974, %c0_i64_1095 : i64
    %c8_i64_1096 = arith.constant 8 : i64
    %1976 = arith.addi %1975, %c8_i64_1096 : i64
    %c0_i32_1097 = arith.constant 0 : i32
    %1977 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1097) : (!llvm.ptr, i32) -> i32
    %1978 = arith.extui %1977 : i32 to i64
    %c65536_i64_1098 = arith.constant 65536 : i64
    %1979 = arith.muli %1978, %c65536_i64_1098 : i64
    %1980 = arith.cmpi ult, %1976, %1979 : i64
    cf.cond_br %1980, ^bb375, ^bb376
  ^bb374:  // pred: ^bb371
    %c1_i32_1099 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1099) : (i32) -> ()
    cf.br ^bb373
  ^bb375:  // 2 preds: ^bb373, ^bb376
    %1981 = llvm.getelementptr %16[%1975] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1973, %1981 {alignment = 1 : i64} : i64, !llvm.ptr
    %1982 = llvm.load %2 : !llvm.ptr -> i32
    %c272_i32_1100 = arith.constant 272 : i32
    %1983 = arith.addi %1982, %c272_i32_1100 : i32
    %c8_i32_1101 = arith.constant 8 : i32
    %1984 = arith.addi %1983, %c8_i32_1101 : i32
    %1985 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_1102 = arith.constant 16 : i32
    %1986 = arith.addi %1985, %c16_i32_1102 : i32
    %c8_i32_1103 = arith.constant 8 : i32
    %1987 = arith.addi %1986, %c8_i32_1103 : i32
    llvm.store %1987, %5 : i32, !llvm.ptr
    %c0_i64_1104 = arith.constant 0 : i64
    %1988 = arith.extui %1987 : i32 to i64
    %1989 = arith.addi %1988, %c0_i64_1104 : i64
    %c8_i64_1105 = arith.constant 8 : i64
    %1990 = arith.addi %1989, %c8_i64_1105 : i64
    %c0_i32_1106 = arith.constant 0 : i32
    %1991 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1106) : (!llvm.ptr, i32) -> i32
    %1992 = arith.extui %1991 : i32 to i64
    %c65536_i64_1107 = arith.constant 65536 : i64
    %1993 = arith.muli %1992, %c65536_i64_1107 : i64
    %1994 = arith.cmpi ult, %1990, %1993 : i64
    cf.cond_br %1994, ^bb377, ^bb378
  ^bb376:  // pred: ^bb373
    %c1_i32_1108 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1108) : (i32) -> ()
    cf.br ^bb375
  ^bb377:  // 2 preds: ^bb375, ^bb378
    %1995 = llvm.getelementptr %16[%1989] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1996 = llvm.load volatile %1995 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1109 = arith.constant 0 : i64
    %1997 = arith.extui %1984 : i32 to i64
    %1998 = arith.addi %1997, %c0_i64_1109 : i64
    %c8_i64_1110 = arith.constant 8 : i64
    %1999 = arith.addi %1998, %c8_i64_1110 : i64
    %c0_i32_1111 = arith.constant 0 : i32
    %2000 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1111) : (!llvm.ptr, i32) -> i32
    %2001 = arith.extui %2000 : i32 to i64
    %c65536_i64_1112 = arith.constant 65536 : i64
    %2002 = arith.muli %2001, %c65536_i64_1112 : i64
    %2003 = arith.cmpi ult, %1999, %2002 : i64
    cf.cond_br %2003, ^bb379, ^bb380
  ^bb378:  // pred: ^bb375
    %c1_i32_1113 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1113) : (i32) -> ()
    cf.br ^bb377
  ^bb379:  // 2 preds: ^bb377, ^bb380
    %2004 = llvm.getelementptr %16[%1998] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1996, %2004 {alignment = 1 : i64} : i64, !llvm.ptr
    %2005 = llvm.load %2 : !llvm.ptr -> i32
    %2006 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i64_1114 = arith.constant 16 : i64
    %2007 = arith.extui %2006 : i32 to i64
    %2008 = arith.addi %2007, %c16_i64_1114 : i64
    %c8_i64_1115 = arith.constant 8 : i64
    %2009 = arith.addi %2008, %c8_i64_1115 : i64
    %c0_i32_1116 = arith.constant 0 : i32
    %2010 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1116) : (!llvm.ptr, i32) -> i32
    %2011 = arith.extui %2010 : i32 to i64
    %c65536_i64_1117 = arith.constant 65536 : i64
    %2012 = arith.muli %2011, %c65536_i64_1117 : i64
    %2013 = arith.cmpi ult, %2009, %2012 : i64
    cf.cond_br %2013, ^bb381, ^bb382
  ^bb380:  // pred: ^bb377
    %c1_i32_1118 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1118) : (i32) -> ()
    cf.br ^bb379
  ^bb381:  // 2 preds: ^bb379, ^bb382
    %2014 = llvm.getelementptr %16[%2008] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2015 = llvm.load volatile %2014 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c272_i64_1119 = arith.constant 272 : i64
    %2016 = arith.extui %2005 : i32 to i64
    %2017 = arith.addi %2016, %c272_i64_1119 : i64
    %c8_i64_1120 = arith.constant 8 : i64
    %2018 = arith.addi %2017, %c8_i64_1120 : i64
    %c0_i32_1121 = arith.constant 0 : i32
    %2019 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1121) : (!llvm.ptr, i32) -> i32
    %2020 = arith.extui %2019 : i32 to i64
    %c65536_i64_1122 = arith.constant 65536 : i64
    %2021 = arith.muli %2020, %c65536_i64_1122 : i64
    %2022 = arith.cmpi ult, %2018, %2021 : i64
    cf.cond_br %2022, ^bb383, ^bb384
  ^bb382:  // pred: ^bb379
    %c1_i32_1123 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1123) : (i32) -> ()
    cf.br ^bb381
  ^bb383:  // 2 preds: ^bb381, ^bb384
    %2023 = llvm.getelementptr %16[%2017] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2015, %2023 {alignment = 1 : i64} : i64, !llvm.ptr
    %2024 = llvm.load %2 : !llvm.ptr -> i32
    %c240_i32_1124 = arith.constant 240 : i32
    %2025 = arith.addi %2024, %c240_i32_1124 : i32
    %c32_i32_1125 = arith.constant 32 : i32
    %2026 = llvm.load %2 : !llvm.ptr -> i32
    %c272_i32_1126 = arith.constant 272 : i32
    %2027 = arith.addi %2026, %c272_i32_1126 : i32
    %c32_i32_1127 = arith.constant 32 : i32
    %c1048804_i32_1128 = arith.constant 1048804 : i32
    call @f114(%arg0, %2025, %c32_i32_1125, %2027, %c32_i32_1127, %c1048804_i32_1128) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %2028 = llvm.load %2 : !llvm.ptr -> i32
    %c208_i32_1129 = arith.constant 208 : i32
    %2029 = arith.addi %2028, %c208_i32_1129 : i32
    %c8_i32_1130 = arith.constant 8 : i32
    %2030 = arith.addi %2029, %c8_i32_1130 : i32
    %2031 = llvm.load %2 : !llvm.ptr -> i32
    %c240_i32_1131 = arith.constant 240 : i32
    %2032 = arith.addi %2031, %c240_i32_1131 : i32
    %c8_i32_1132 = arith.constant 8 : i32
    %2033 = arith.addi %2032, %c8_i32_1132 : i32
    llvm.store %2033, %6 : i32, !llvm.ptr
    %c0_i64_1133 = arith.constant 0 : i64
    %2034 = arith.extui %2033 : i32 to i64
    %2035 = arith.addi %2034, %c0_i64_1133 : i64
    %c8_i64_1134 = arith.constant 8 : i64
    %2036 = arith.addi %2035, %c8_i64_1134 : i64
    %c0_i32_1135 = arith.constant 0 : i32
    %2037 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1135) : (!llvm.ptr, i32) -> i32
    %2038 = arith.extui %2037 : i32 to i64
    %c65536_i64_1136 = arith.constant 65536 : i64
    %2039 = arith.muli %2038, %c65536_i64_1136 : i64
    %2040 = arith.cmpi ult, %2036, %2039 : i64
    cf.cond_br %2040, ^bb385, ^bb386
  ^bb384:  // pred: ^bb381
    %c1_i32_1137 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1137) : (i32) -> ()
    cf.br ^bb383
  ^bb385:  // 2 preds: ^bb383, ^bb386
    %2041 = llvm.getelementptr %16[%2035] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2042 = llvm.load volatile %2041 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1138 = arith.constant 0 : i64
    %2043 = arith.extui %2030 : i32 to i64
    %2044 = arith.addi %2043, %c0_i64_1138 : i64
    %c8_i64_1139 = arith.constant 8 : i64
    %2045 = arith.addi %2044, %c8_i64_1139 : i64
    %c0_i32_1140 = arith.constant 0 : i32
    %2046 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1140) : (!llvm.ptr, i32) -> i32
    %2047 = arith.extui %2046 : i32 to i64
    %c65536_i64_1141 = arith.constant 65536 : i64
    %2048 = arith.muli %2047, %c65536_i64_1141 : i64
    %2049 = arith.cmpi ult, %2045, %2048 : i64
    cf.cond_br %2049, ^bb387, ^bb388
  ^bb386:  // pred: ^bb383
    %c1_i32_1142 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1142) : (i32) -> ()
    cf.br ^bb385
  ^bb387:  // 2 preds: ^bb385, ^bb388
    %2050 = llvm.getelementptr %16[%2044] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2042, %2050 {alignment = 1 : i64} : i64, !llvm.ptr
    %2051 = llvm.load %2 : !llvm.ptr -> i32
    %c208_i32_1143 = arith.constant 208 : i32
    %2052 = arith.addi %2051, %c208_i32_1143 : i32
    %c16_i32_1144 = arith.constant 16 : i32
    %2053 = arith.addi %2052, %c16_i32_1144 : i32
    %2054 = llvm.load %2 : !llvm.ptr -> i32
    %c240_i32_1145 = arith.constant 240 : i32
    %2055 = arith.addi %2054, %c240_i32_1145 : i32
    %c16_i32_1146 = arith.constant 16 : i32
    %2056 = arith.addi %2055, %c16_i32_1146 : i32
    llvm.store %2056, %7 : i32, !llvm.ptr
    %c0_i64_1147 = arith.constant 0 : i64
    %2057 = arith.extui %2056 : i32 to i64
    %2058 = arith.addi %2057, %c0_i64_1147 : i64
    %c8_i64_1148 = arith.constant 8 : i64
    %2059 = arith.addi %2058, %c8_i64_1148 : i64
    %c0_i32_1149 = arith.constant 0 : i32
    %2060 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1149) : (!llvm.ptr, i32) -> i32
    %2061 = arith.extui %2060 : i32 to i64
    %c65536_i64_1150 = arith.constant 65536 : i64
    %2062 = arith.muli %2061, %c65536_i64_1150 : i64
    %2063 = arith.cmpi ult, %2059, %2062 : i64
    cf.cond_br %2063, ^bb389, ^bb390
  ^bb388:  // pred: ^bb385
    %c1_i32_1151 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1151) : (i32) -> ()
    cf.br ^bb387
  ^bb389:  // 2 preds: ^bb387, ^bb390
    %2064 = llvm.getelementptr %16[%2058] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2065 = llvm.load volatile %2064 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1152 = arith.constant 0 : i64
    %2066 = arith.extui %2053 : i32 to i64
    %2067 = arith.addi %2066, %c0_i64_1152 : i64
    %c8_i64_1153 = arith.constant 8 : i64
    %2068 = arith.addi %2067, %c8_i64_1153 : i64
    %c0_i32_1154 = arith.constant 0 : i32
    %2069 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1154) : (!llvm.ptr, i32) -> i32
    %2070 = arith.extui %2069 : i32 to i64
    %c65536_i64_1155 = arith.constant 65536 : i64
    %2071 = arith.muli %2070, %c65536_i64_1155 : i64
    %2072 = arith.cmpi ult, %2068, %2071 : i64
    cf.cond_br %2072, ^bb391, ^bb392
  ^bb390:  // pred: ^bb387
    %c1_i32_1156 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1156) : (i32) -> ()
    cf.br ^bb389
  ^bb391:  // 2 preds: ^bb389, ^bb392
    %2073 = llvm.getelementptr %16[%2067] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2065, %2073 {alignment = 1 : i64} : i64, !llvm.ptr
    %2074 = llvm.load %2 : !llvm.ptr -> i32
    %c208_i32_1157 = arith.constant 208 : i32
    %2075 = arith.addi %2074, %c208_i32_1157 : i32
    %c24_i32_1158 = arith.constant 24 : i32
    %2076 = arith.addi %2075, %c24_i32_1158 : i32
    %2077 = llvm.load %2 : !llvm.ptr -> i32
    %c240_i32_1159 = arith.constant 240 : i32
    %2078 = arith.addi %2077, %c240_i32_1159 : i32
    %c24_i32_1160 = arith.constant 24 : i32
    %2079 = arith.addi %2078, %c24_i32_1160 : i32
    llvm.store %2079, %8 : i32, !llvm.ptr
    %c0_i64_1161 = arith.constant 0 : i64
    %2080 = arith.extui %2079 : i32 to i64
    %2081 = arith.addi %2080, %c0_i64_1161 : i64
    %c8_i64_1162 = arith.constant 8 : i64
    %2082 = arith.addi %2081, %c8_i64_1162 : i64
    %c0_i32_1163 = arith.constant 0 : i32
    %2083 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1163) : (!llvm.ptr, i32) -> i32
    %2084 = arith.extui %2083 : i32 to i64
    %c65536_i64_1164 = arith.constant 65536 : i64
    %2085 = arith.muli %2084, %c65536_i64_1164 : i64
    %2086 = arith.cmpi ult, %2082, %2085 : i64
    cf.cond_br %2086, ^bb393, ^bb394
  ^bb392:  // pred: ^bb389
    %c1_i32_1165 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1165) : (i32) -> ()
    cf.br ^bb391
  ^bb393:  // 2 preds: ^bb391, ^bb394
    %2087 = llvm.getelementptr %16[%2081] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2088 = llvm.load volatile %2087 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1166 = arith.constant 0 : i64
    %2089 = arith.extui %2076 : i32 to i64
    %2090 = arith.addi %2089, %c0_i64_1166 : i64
    %c8_i64_1167 = arith.constant 8 : i64
    %2091 = arith.addi %2090, %c8_i64_1167 : i64
    %c0_i32_1168 = arith.constant 0 : i32
    %2092 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1168) : (!llvm.ptr, i32) -> i32
    %2093 = arith.extui %2092 : i32 to i64
    %c65536_i64_1169 = arith.constant 65536 : i64
    %2094 = arith.muli %2093, %c65536_i64_1169 : i64
    %2095 = arith.cmpi ult, %2091, %2094 : i64
    cf.cond_br %2095, ^bb395, ^bb396
  ^bb394:  // pred: ^bb391
    %c1_i32_1170 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1170) : (i32) -> ()
    cf.br ^bb393
  ^bb395:  // 2 preds: ^bb393, ^bb396
    %2096 = llvm.getelementptr %16[%2090] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2088, %2096 {alignment = 1 : i64} : i64, !llvm.ptr
    %2097 = llvm.load %2 : !llvm.ptr -> i32
    %2098 = llvm.load %2 : !llvm.ptr -> i32
    %c240_i64_1171 = arith.constant 240 : i64
    %2099 = arith.extui %2098 : i32 to i64
    %2100 = arith.addi %2099, %c240_i64_1171 : i64
    %c8_i64_1172 = arith.constant 8 : i64
    %2101 = arith.addi %2100, %c8_i64_1172 : i64
    %c0_i32_1173 = arith.constant 0 : i32
    %2102 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1173) : (!llvm.ptr, i32) -> i32
    %2103 = arith.extui %2102 : i32 to i64
    %c65536_i64_1174 = arith.constant 65536 : i64
    %2104 = arith.muli %2103, %c65536_i64_1174 : i64
    %2105 = arith.cmpi ult, %2101, %2104 : i64
    cf.cond_br %2105, ^bb397, ^bb398
  ^bb396:  // pred: ^bb393
    %c1_i32_1175 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1175) : (i32) -> ()
    cf.br ^bb395
  ^bb397:  // 2 preds: ^bb395, ^bb398
    %2106 = llvm.getelementptr %16[%2100] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2107 = llvm.load volatile %2106 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c208_i64_1176 = arith.constant 208 : i64
    %2108 = arith.extui %2097 : i32 to i64
    %2109 = arith.addi %2108, %c208_i64_1176 : i64
    %c8_i64_1177 = arith.constant 8 : i64
    %2110 = arith.addi %2109, %c8_i64_1177 : i64
    %c0_i32_1178 = arith.constant 0 : i32
    %2111 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1178) : (!llvm.ptr, i32) -> i32
    %2112 = arith.extui %2111 : i32 to i64
    %c65536_i64_1179 = arith.constant 65536 : i64
    %2113 = arith.muli %2112, %c65536_i64_1179 : i64
    %2114 = arith.cmpi ult, %2110, %2113 : i64
    cf.cond_br %2114, ^bb399, ^bb400
  ^bb398:  // pred: ^bb395
    %c1_i32_1180 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1180) : (i32) -> ()
    cf.br ^bb397
  ^bb399:  // 2 preds: ^bb397, ^bb400
    %2115 = llvm.getelementptr %16[%2109] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2107, %2115 {alignment = 1 : i64} : i64, !llvm.ptr
    %2116 = llvm.load %8 : !llvm.ptr -> i32
    %c0_i64_1181 = arith.constant 0 : i64
    %c0_i64_1182 = arith.constant 0 : i64
    %2117 = arith.extui %2116 : i32 to i64
    %2118 = arith.addi %2117, %c0_i64_1182 : i64
    %c8_i64_1183 = arith.constant 8 : i64
    %2119 = arith.addi %2118, %c8_i64_1183 : i64
    %c0_i32_1184 = arith.constant 0 : i32
    %2120 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1184) : (!llvm.ptr, i32) -> i32
    %2121 = arith.extui %2120 : i32 to i64
    %c65536_i64_1185 = arith.constant 65536 : i64
    %2122 = arith.muli %2121, %c65536_i64_1185 : i64
    %2123 = arith.cmpi ult, %2119, %2122 : i64
    cf.cond_br %2123, ^bb401, ^bb402
  ^bb400:  // pred: ^bb397
    %c1_i32_1186 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1186) : (i32) -> ()
    cf.br ^bb399
  ^bb401:  // 2 preds: ^bb399, ^bb402
    %2124 = llvm.getelementptr %16[%2118] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_1181, %2124 {alignment = 1 : i64} : i64, !llvm.ptr
    %2125 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_1187 = arith.constant 0 : i64
    %c0_i64_1188 = arith.constant 0 : i64
    %2126 = arith.extui %2125 : i32 to i64
    %2127 = arith.addi %2126, %c0_i64_1188 : i64
    %c8_i64_1189 = arith.constant 8 : i64
    %2128 = arith.addi %2127, %c8_i64_1189 : i64
    %c0_i32_1190 = arith.constant 0 : i32
    %2129 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1190) : (!llvm.ptr, i32) -> i32
    %2130 = arith.extui %2129 : i32 to i64
    %c65536_i64_1191 = arith.constant 65536 : i64
    %2131 = arith.muli %2130, %c65536_i64_1191 : i64
    %2132 = arith.cmpi ult, %2128, %2131 : i64
    cf.cond_br %2132, ^bb403, ^bb404
  ^bb402:  // pred: ^bb399
    %c1_i32_1192 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1192) : (i32) -> ()
    cf.br ^bb401
  ^bb403:  // 2 preds: ^bb401, ^bb404
    %2133 = llvm.getelementptr %16[%2127] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_1187, %2133 {alignment = 1 : i64} : i64, !llvm.ptr
    %2134 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_1193 = arith.constant 0 : i64
    %c0_i64_1194 = arith.constant 0 : i64
    %2135 = arith.extui %2134 : i32 to i64
    %2136 = arith.addi %2135, %c0_i64_1194 : i64
    %c8_i64_1195 = arith.constant 8 : i64
    %2137 = arith.addi %2136, %c8_i64_1195 : i64
    %c0_i32_1196 = arith.constant 0 : i32
    %2138 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1196) : (!llvm.ptr, i32) -> i32
    %2139 = arith.extui %2138 : i32 to i64
    %c65536_i64_1197 = arith.constant 65536 : i64
    %2140 = arith.muli %2139, %c65536_i64_1197 : i64
    %2141 = arith.cmpi ult, %2137, %2140 : i64
    cf.cond_br %2141, ^bb405, ^bb406
  ^bb404:  // pred: ^bb401
    %c1_i32_1198 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1198) : (i32) -> ()
    cf.br ^bb403
  ^bb405:  // 2 preds: ^bb403, ^bb406
    %2142 = llvm.getelementptr %16[%2136] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_1193, %2142 {alignment = 1 : i64} : i64, !llvm.ptr
    %2143 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_1199 = arith.constant 0 : i64
    %c240_i64_1200 = arith.constant 240 : i64
    %2144 = arith.extui %2143 : i32 to i64
    %2145 = arith.addi %2144, %c240_i64_1200 : i64
    %c8_i64_1201 = arith.constant 8 : i64
    %2146 = arith.addi %2145, %c8_i64_1201 : i64
    %c0_i32_1202 = arith.constant 0 : i32
    %2147 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1202) : (!llvm.ptr, i32) -> i32
    %2148 = arith.extui %2147 : i32 to i64
    %c65536_i64_1203 = arith.constant 65536 : i64
    %2149 = arith.muli %2148, %c65536_i64_1203 : i64
    %2150 = arith.cmpi ult, %2146, %2149 : i64
    cf.cond_br %2150, ^bb407, ^bb408
  ^bb406:  // pred: ^bb403
    %c1_i32_1204 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1204) : (i32) -> ()
    cf.br ^bb405
  ^bb407:  // 2 preds: ^bb405, ^bb408
    %2151 = llvm.getelementptr %16[%2145] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_1199, %2151 {alignment = 1 : i64} : i64, !llvm.ptr
    %2152 = llvm.load %3 : !llvm.ptr -> i32
    %2153 = llvm.load %1 : !llvm.ptr -> i32
    %c64_i32_1205 = arith.constant 64 : i32
    %2154 = arith.addi %2153, %c64_i32_1205 : i32
    %c0_i64_1206 = arith.constant 0 : i64
    %2155 = arith.extui %2154 : i32 to i64
    %2156 = arith.addi %2155, %c0_i64_1206 : i64
    %c8_i64_1207 = arith.constant 8 : i64
    %2157 = arith.addi %2156, %c8_i64_1207 : i64
    %c0_i32_1208 = arith.constant 0 : i32
    %2158 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1208) : (!llvm.ptr, i32) -> i32
    %2159 = arith.extui %2158 : i32 to i64
    %c65536_i64_1209 = arith.constant 65536 : i64
    %2160 = arith.muli %2159, %c65536_i64_1209 : i64
    %2161 = arith.cmpi ult, %2157, %2160 : i64
    cf.cond_br %2161, ^bb409, ^bb410
  ^bb408:  // pred: ^bb405
    %c1_i32_1210 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1210) : (i32) -> ()
    cf.br ^bb407
  ^bb409:  // 2 preds: ^bb407, ^bb410
    %2162 = llvm.getelementptr %16[%2156] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2163 = llvm.load volatile %2162 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1211 = arith.constant 0 : i64
    %2164 = arith.extui %2152 : i32 to i64
    %2165 = arith.addi %2164, %c0_i64_1211 : i64
    %c8_i64_1212 = arith.constant 8 : i64
    %2166 = arith.addi %2165, %c8_i64_1212 : i64
    %c0_i32_1213 = arith.constant 0 : i32
    %2167 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1213) : (!llvm.ptr, i32) -> i32
    %2168 = arith.extui %2167 : i32 to i64
    %c65536_i64_1214 = arith.constant 65536 : i64
    %2169 = arith.muli %2168, %c65536_i64_1214 : i64
    %2170 = arith.cmpi ult, %2166, %2169 : i64
    cf.cond_br %2170, ^bb411, ^bb412
  ^bb410:  // pred: ^bb407
    %c1_i32_1215 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1215) : (i32) -> ()
    cf.br ^bb409
  ^bb411:  // 2 preds: ^bb409, ^bb412
    %2171 = llvm.getelementptr %16[%2165] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2163, %2171 {alignment = 1 : i64} : i64, !llvm.ptr
    %2172 = llvm.load %4 : !llvm.ptr -> i32
    %2173 = llvm.load %1 : !llvm.ptr -> i32
    %c56_i32_1216 = arith.constant 56 : i32
    %2174 = arith.addi %2173, %c56_i32_1216 : i32
    %c0_i64_1217 = arith.constant 0 : i64
    %2175 = arith.extui %2174 : i32 to i64
    %2176 = arith.addi %2175, %c0_i64_1217 : i64
    %c8_i64_1218 = arith.constant 8 : i64
    %2177 = arith.addi %2176, %c8_i64_1218 : i64
    %c0_i32_1219 = arith.constant 0 : i32
    %2178 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1219) : (!llvm.ptr, i32) -> i32
    %2179 = arith.extui %2178 : i32 to i64
    %c65536_i64_1220 = arith.constant 65536 : i64
    %2180 = arith.muli %2179, %c65536_i64_1220 : i64
    %2181 = arith.cmpi ult, %2177, %2180 : i64
    cf.cond_br %2181, ^bb413, ^bb414
  ^bb412:  // pred: ^bb409
    %c1_i32_1221 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1221) : (i32) -> ()
    cf.br ^bb411
  ^bb413:  // 2 preds: ^bb411, ^bb414
    %2182 = llvm.getelementptr %16[%2176] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2183 = llvm.load volatile %2182 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1222 = arith.constant 0 : i64
    %2184 = arith.extui %2172 : i32 to i64
    %2185 = arith.addi %2184, %c0_i64_1222 : i64
    %c8_i64_1223 = arith.constant 8 : i64
    %2186 = arith.addi %2185, %c8_i64_1223 : i64
    %c0_i32_1224 = arith.constant 0 : i32
    %2187 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1224) : (!llvm.ptr, i32) -> i32
    %2188 = arith.extui %2187 : i32 to i64
    %c65536_i64_1225 = arith.constant 65536 : i64
    %2189 = arith.muli %2188, %c65536_i64_1225 : i64
    %2190 = arith.cmpi ult, %2186, %2189 : i64
    cf.cond_br %2190, ^bb415, ^bb416
  ^bb414:  // pred: ^bb411
    %c1_i32_1226 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1226) : (i32) -> ()
    cf.br ^bb413
  ^bb415:  // 2 preds: ^bb413, ^bb416
    %2191 = llvm.getelementptr %16[%2185] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2183, %2191 {alignment = 1 : i64} : i64, !llvm.ptr
    %2192 = llvm.load %5 : !llvm.ptr -> i32
    %2193 = llvm.load %1 : !llvm.ptr -> i32
    %c48_i32_1227 = arith.constant 48 : i32
    %2194 = arith.addi %2193, %c48_i32_1227 : i32
    %c0_i64_1228 = arith.constant 0 : i64
    %2195 = arith.extui %2194 : i32 to i64
    %2196 = arith.addi %2195, %c0_i64_1228 : i64
    %c8_i64_1229 = arith.constant 8 : i64
    %2197 = arith.addi %2196, %c8_i64_1229 : i64
    %c0_i32_1230 = arith.constant 0 : i32
    %2198 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1230) : (!llvm.ptr, i32) -> i32
    %2199 = arith.extui %2198 : i32 to i64
    %c65536_i64_1231 = arith.constant 65536 : i64
    %2200 = arith.muli %2199, %c65536_i64_1231 : i64
    %2201 = arith.cmpi ult, %2197, %2200 : i64
    cf.cond_br %2201, ^bb417, ^bb418
  ^bb416:  // pred: ^bb413
    %c1_i32_1232 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1232) : (i32) -> ()
    cf.br ^bb415
  ^bb417:  // 2 preds: ^bb415, ^bb418
    %2202 = llvm.getelementptr %16[%2196] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2203 = llvm.load volatile %2202 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1233 = arith.constant 0 : i64
    %2204 = arith.extui %2192 : i32 to i64
    %2205 = arith.addi %2204, %c0_i64_1233 : i64
    %c8_i64_1234 = arith.constant 8 : i64
    %2206 = arith.addi %2205, %c8_i64_1234 : i64
    %c0_i32_1235 = arith.constant 0 : i32
    %2207 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1235) : (!llvm.ptr, i32) -> i32
    %2208 = arith.extui %2207 : i32 to i64
    %c65536_i64_1236 = arith.constant 65536 : i64
    %2209 = arith.muli %2208, %c65536_i64_1236 : i64
    %2210 = arith.cmpi ult, %2206, %2209 : i64
    cf.cond_br %2210, ^bb419, ^bb420
  ^bb418:  // pred: ^bb415
    %c1_i32_1237 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1237) : (i32) -> ()
    cf.br ^bb417
  ^bb419:  // 2 preds: ^bb417, ^bb420
    %2211 = llvm.getelementptr %16[%2205] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2203, %2211 {alignment = 1 : i64} : i64, !llvm.ptr
    %2212 = llvm.load %2 : !llvm.ptr -> i32
    %2213 = llvm.load %1 : !llvm.ptr -> i32
    %c40_i64_1238 = arith.constant 40 : i64
    %2214 = arith.extui %2213 : i32 to i64
    %2215 = arith.addi %2214, %c40_i64_1238 : i64
    %c8_i64_1239 = arith.constant 8 : i64
    %2216 = arith.addi %2215, %c8_i64_1239 : i64
    %c0_i32_1240 = arith.constant 0 : i32
    %2217 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1240) : (!llvm.ptr, i32) -> i32
    %2218 = arith.extui %2217 : i32 to i64
    %c65536_i64_1241 = arith.constant 65536 : i64
    %2219 = arith.muli %2218, %c65536_i64_1241 : i64
    %2220 = arith.cmpi ult, %2216, %2219 : i64
    cf.cond_br %2220, ^bb421, ^bb422
  ^bb420:  // pred: ^bb417
    %c1_i32_1242 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1242) : (i32) -> ()
    cf.br ^bb419
  ^bb421:  // 2 preds: ^bb419, ^bb422
    %2221 = llvm.getelementptr %16[%2215] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2222 = llvm.load volatile %2221 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c16_i64_1243 = arith.constant 16 : i64
    %2223 = arith.extui %2212 : i32 to i64
    %2224 = arith.addi %2223, %c16_i64_1243 : i64
    %c8_i64_1244 = arith.constant 8 : i64
    %2225 = arith.addi %2224, %c8_i64_1244 : i64
    %c0_i32_1245 = arith.constant 0 : i32
    %2226 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1245) : (!llvm.ptr, i32) -> i32
    %2227 = arith.extui %2226 : i32 to i64
    %c65536_i64_1246 = arith.constant 65536 : i64
    %2228 = arith.muli %2227, %c65536_i64_1246 : i64
    %2229 = arith.cmpi ult, %2225, %2228 : i64
    cf.cond_br %2229, ^bb423, ^bb424
  ^bb422:  // pred: ^bb419
    %c1_i32_1247 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1247) : (i32) -> ()
    cf.br ^bb421
  ^bb423:  // 2 preds: ^bb421, ^bb424
    %2230 = llvm.getelementptr %16[%2224] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2222, %2230 {alignment = 1 : i64} : i64, !llvm.ptr
    %2231 = llvm.load %2 : !llvm.ptr -> i32
    %c47_i32_1248 = arith.constant 47 : i32
    %2232 = arith.addi %2231, %c47_i32_1248 : i32
    llvm.store %2232, %3 : i32, !llvm.ptr
    %c0_i32_1249 = arith.constant 0 : i32
    llvm.store %c0_i32_1249, %4 : i32, !llvm.ptr
    cf.br ^bb426
  ^bb424:  // pred: ^bb421
    %c1_i32_1250 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1250) : (i32) -> ()
    cf.br ^bb423
  ^bb425:  // pred: ^bb435
    %2233 = llvm.load %2 : !llvm.ptr -> i32
    %c272_i32_1251 = arith.constant 272 : i32
    %2234 = arith.addi %2233, %c272_i32_1251 : i32
    %c24_i32_1252 = arith.constant 24 : i32
    %2235 = arith.addi %2234, %c24_i32_1252 : i32
    %2236 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_1253 = arith.constant 16 : i32
    %2237 = arith.addi %2236, %c16_i32_1253 : i32
    %c24_i32_1254 = arith.constant 24 : i32
    %2238 = arith.addi %2237, %c24_i32_1254 : i32
    llvm.store %2238, %3 : i32, !llvm.ptr
    %c0_i64_1255 = arith.constant 0 : i64
    %2239 = arith.extui %2238 : i32 to i64
    %2240 = arith.addi %2239, %c0_i64_1255 : i64
    %c8_i64_1256 = arith.constant 8 : i64
    %2241 = arith.addi %2240, %c8_i64_1256 : i64
    %c0_i32_1257 = arith.constant 0 : i32
    %2242 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1257) : (!llvm.ptr, i32) -> i32
    %2243 = arith.extui %2242 : i32 to i64
    %c65536_i64_1258 = arith.constant 65536 : i64
    %2244 = arith.muli %2243, %c65536_i64_1258 : i64
    %2245 = arith.cmpi ult, %2241, %2244 : i64
    cf.cond_br %2245, ^bb436, ^bb437
  ^bb426:  // 2 preds: ^bb423, ^bb433
    %2246 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_1259 = arith.constant 16 : i32
    %2247 = arith.addi %2246, %c16_i32_1259 : i32
    %2248 = llvm.load %4 : !llvm.ptr -> i32
    %2249 = arith.addi %2247, %2248 : i32
    llvm.store %2249, %5 : i32, !llvm.ptr
    %c0_i64_1260 = arith.constant 0 : i64
    %2250 = arith.extui %2249 : i32 to i64
    %2251 = arith.addi %2250, %c0_i64_1260 : i64
    %c1_i64_1261 = arith.constant 1 : i64
    %2252 = arith.addi %2251, %c1_i64_1261 : i64
    %c0_i32_1262 = arith.constant 0 : i32
    %2253 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1262) : (!llvm.ptr, i32) -> i32
    %2254 = arith.extui %2253 : i32 to i64
    %c65536_i64_1263 = arith.constant 65536 : i64
    %2255 = arith.muli %2254, %c65536_i64_1263 : i64
    %2256 = arith.cmpi ult, %2252, %2255 : i64
    cf.cond_br %2256, ^bb427, ^bb428
  ^bb427:  // 2 preds: ^bb426, ^bb428
    %2257 = llvm.getelementptr %16[%2251] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2258 = llvm.load volatile %2257 {alignment = 1 : i64} : !llvm.ptr -> i8
    %2259 = arith.extui %2258 : i8 to i32
    llvm.store %2259, %6 : i32, !llvm.ptr
    %2260 = llvm.load %5 : !llvm.ptr -> i32
    %2261 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_1264 = arith.constant 0 : i64
    %2262 = arith.extui %2261 : i32 to i64
    %2263 = arith.addi %2262, %c0_i64_1264 : i64
    %c1_i64_1265 = arith.constant 1 : i64
    %2264 = arith.addi %2263, %c1_i64_1265 : i64
    %c0_i32_1266 = arith.constant 0 : i32
    %2265 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1266) : (!llvm.ptr, i32) -> i32
    %2266 = arith.extui %2265 : i32 to i64
    %c65536_i64_1267 = arith.constant 65536 : i64
    %2267 = arith.muli %2266, %c65536_i64_1267 : i64
    %2268 = arith.cmpi ult, %2264, %2267 : i64
    cf.cond_br %2268, ^bb429, ^bb430
  ^bb428:  // pred: ^bb426
    %c1_i32_1268 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1268) : (i32) -> ()
    cf.br ^bb427
  ^bb429:  // 2 preds: ^bb427, ^bb430
    %2269 = llvm.getelementptr %16[%2263] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2270 = llvm.load volatile %2269 {alignment = 1 : i64} : !llvm.ptr -> i8
    %2271 = arith.extui %2270 : i8 to i32
    %c0_i64_1269 = arith.constant 0 : i64
    %2272 = arith.extui %2260 : i32 to i64
    %2273 = arith.addi %2272, %c0_i64_1269 : i64
    %c1_i64_1270 = arith.constant 1 : i64
    %2274 = arith.addi %2273, %c1_i64_1270 : i64
    %c0_i32_1271 = arith.constant 0 : i32
    %2275 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1271) : (!llvm.ptr, i32) -> i32
    %2276 = arith.extui %2275 : i32 to i64
    %c65536_i64_1272 = arith.constant 65536 : i64
    %2277 = arith.muli %2276, %c65536_i64_1272 : i64
    %2278 = arith.cmpi ult, %2274, %2277 : i64
    cf.cond_br %2278, ^bb431, ^bb432
  ^bb430:  // pred: ^bb427
    %c1_i32_1273 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1273) : (i32) -> ()
    cf.br ^bb429
  ^bb431:  // 2 preds: ^bb429, ^bb432
    %2279 = llvm.getelementptr %16[%2273] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2280 = arith.trunci %2271 : i32 to i8
    llvm.store volatile %2280, %2279 {alignment = 1 : i64} : i8, !llvm.ptr
    %2281 = llvm.load %3 : !llvm.ptr -> i32
    %2282 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_1274 = arith.constant 0 : i64
    %2283 = arith.extui %2281 : i32 to i64
    %2284 = arith.addi %2283, %c0_i64_1274 : i64
    %c1_i64_1275 = arith.constant 1 : i64
    %2285 = arith.addi %2284, %c1_i64_1275 : i64
    %c0_i32_1276 = arith.constant 0 : i32
    %2286 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1276) : (!llvm.ptr, i32) -> i32
    %2287 = arith.extui %2286 : i32 to i64
    %c65536_i64_1277 = arith.constant 65536 : i64
    %2288 = arith.muli %2287, %c65536_i64_1277 : i64
    %2289 = arith.cmpi ult, %2285, %2288 : i64
    cf.cond_br %2289, ^bb433, ^bb434
  ^bb432:  // pred: ^bb429
    %c1_i32_1278 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1278) : (i32) -> ()
    cf.br ^bb431
  ^bb433:  // 2 preds: ^bb431, ^bb434
    %2290 = llvm.getelementptr %16[%2284] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2291 = arith.trunci %2282 : i32 to i8
    llvm.store volatile %2291, %2290 {alignment = 1 : i64} : i8, !llvm.ptr
    %2292 = llvm.load %3 : !llvm.ptr -> i32
    %c-1_i32_1279 = arith.constant -1 : i32
    %2293 = arith.addi %2292, %c-1_i32_1279 : i32
    llvm.store %2293, %3 : i32, !llvm.ptr
    %2294 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i32_1280 = arith.constant 1 : i32
    %2295 = arith.addi %2294, %c1_i32_1280 : i32
    llvm.store %2295, %4 : i32, !llvm.ptr
    %c16_i32_1281 = arith.constant 16 : i32
    %2296 = arith.cmpi eq, %2295, %c16_i32_1281 : i32
    %2297 = arith.extui %2296 : i1 to i32
    %c0_i32_1282 = arith.constant 0 : i32
    %2298 = arith.cmpi eq, %2297, %c0_i32_1282 : i32
    %2299 = arith.extui %2298 : i1 to i32
    %c0_i32_1283 = arith.constant 0 : i32
    %2300 = arith.cmpi ne, %2299, %c0_i32_1283 : i32
    cf.cond_br %2300, ^bb426, ^bb435
  ^bb434:  // pred: ^bb431
    %c1_i32_1284 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1284) : (i32) -> ()
    cf.br ^bb433
  ^bb435:  // pred: ^bb433
    cf.br ^bb425
  ^bb436:  // 2 preds: ^bb425, ^bb437
    %2301 = llvm.getelementptr %16[%2240] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2302 = llvm.load volatile %2301 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1285 = arith.constant 0 : i64
    %2303 = arith.extui %2235 : i32 to i64
    %2304 = arith.addi %2303, %c0_i64_1285 : i64
    %c8_i64_1286 = arith.constant 8 : i64
    %2305 = arith.addi %2304, %c8_i64_1286 : i64
    %c0_i32_1287 = arith.constant 0 : i32
    %2306 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1287) : (!llvm.ptr, i32) -> i32
    %2307 = arith.extui %2306 : i32 to i64
    %c65536_i64_1288 = arith.constant 65536 : i64
    %2308 = arith.muli %2307, %c65536_i64_1288 : i64
    %2309 = arith.cmpi ult, %2305, %2308 : i64
    cf.cond_br %2309, ^bb438, ^bb439
  ^bb437:  // pred: ^bb425
    %c1_i32_1289 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1289) : (i32) -> ()
    cf.br ^bb436
  ^bb438:  // 2 preds: ^bb436, ^bb439
    %2310 = llvm.getelementptr %16[%2304] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2302, %2310 {alignment = 1 : i64} : i64, !llvm.ptr
    %2311 = llvm.load %2 : !llvm.ptr -> i32
    %c272_i32_1290 = arith.constant 272 : i32
    %2312 = arith.addi %2311, %c272_i32_1290 : i32
    %c16_i32_1291 = arith.constant 16 : i32
    %2313 = arith.addi %2312, %c16_i32_1291 : i32
    %2314 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_1292 = arith.constant 16 : i32
    %2315 = arith.addi %2314, %c16_i32_1292 : i32
    %c16_i32_1293 = arith.constant 16 : i32
    %2316 = arith.addi %2315, %c16_i32_1293 : i32
    llvm.store %2316, %4 : i32, !llvm.ptr
    %c0_i64_1294 = arith.constant 0 : i64
    %2317 = arith.extui %2316 : i32 to i64
    %2318 = arith.addi %2317, %c0_i64_1294 : i64
    %c8_i64_1295 = arith.constant 8 : i64
    %2319 = arith.addi %2318, %c8_i64_1295 : i64
    %c0_i32_1296 = arith.constant 0 : i32
    %2320 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1296) : (!llvm.ptr, i32) -> i32
    %2321 = arith.extui %2320 : i32 to i64
    %c65536_i64_1297 = arith.constant 65536 : i64
    %2322 = arith.muli %2321, %c65536_i64_1297 : i64
    %2323 = arith.cmpi ult, %2319, %2322 : i64
    cf.cond_br %2323, ^bb440, ^bb441
  ^bb439:  // pred: ^bb436
    %c1_i32_1298 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1298) : (i32) -> ()
    cf.br ^bb438
  ^bb440:  // 2 preds: ^bb438, ^bb441
    %2324 = llvm.getelementptr %16[%2318] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2325 = llvm.load volatile %2324 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1299 = arith.constant 0 : i64
    %2326 = arith.extui %2313 : i32 to i64
    %2327 = arith.addi %2326, %c0_i64_1299 : i64
    %c8_i64_1300 = arith.constant 8 : i64
    %2328 = arith.addi %2327, %c8_i64_1300 : i64
    %c0_i32_1301 = arith.constant 0 : i32
    %2329 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1301) : (!llvm.ptr, i32) -> i32
    %2330 = arith.extui %2329 : i32 to i64
    %c65536_i64_1302 = arith.constant 65536 : i64
    %2331 = arith.muli %2330, %c65536_i64_1302 : i64
    %2332 = arith.cmpi ult, %2328, %2331 : i64
    cf.cond_br %2332, ^bb442, ^bb443
  ^bb441:  // pred: ^bb438
    %c1_i32_1303 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1303) : (i32) -> ()
    cf.br ^bb440
  ^bb442:  // 2 preds: ^bb440, ^bb443
    %2333 = llvm.getelementptr %16[%2327] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2325, %2333 {alignment = 1 : i64} : i64, !llvm.ptr
    %2334 = llvm.load %2 : !llvm.ptr -> i32
    %c272_i32_1304 = arith.constant 272 : i32
    %2335 = arith.addi %2334, %c272_i32_1304 : i32
    %c8_i32_1305 = arith.constant 8 : i32
    %2336 = arith.addi %2335, %c8_i32_1305 : i32
    %2337 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_1306 = arith.constant 16 : i32
    %2338 = arith.addi %2337, %c16_i32_1306 : i32
    %c8_i32_1307 = arith.constant 8 : i32
    %2339 = arith.addi %2338, %c8_i32_1307 : i32
    llvm.store %2339, %5 : i32, !llvm.ptr
    %c0_i64_1308 = arith.constant 0 : i64
    %2340 = arith.extui %2339 : i32 to i64
    %2341 = arith.addi %2340, %c0_i64_1308 : i64
    %c8_i64_1309 = arith.constant 8 : i64
    %2342 = arith.addi %2341, %c8_i64_1309 : i64
    %c0_i32_1310 = arith.constant 0 : i32
    %2343 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1310) : (!llvm.ptr, i32) -> i32
    %2344 = arith.extui %2343 : i32 to i64
    %c65536_i64_1311 = arith.constant 65536 : i64
    %2345 = arith.muli %2344, %c65536_i64_1311 : i64
    %2346 = arith.cmpi ult, %2342, %2345 : i64
    cf.cond_br %2346, ^bb444, ^bb445
  ^bb443:  // pred: ^bb440
    %c1_i32_1312 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1312) : (i32) -> ()
    cf.br ^bb442
  ^bb444:  // 2 preds: ^bb442, ^bb445
    %2347 = llvm.getelementptr %16[%2341] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2348 = llvm.load volatile %2347 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1313 = arith.constant 0 : i64
    %2349 = arith.extui %2336 : i32 to i64
    %2350 = arith.addi %2349, %c0_i64_1313 : i64
    %c8_i64_1314 = arith.constant 8 : i64
    %2351 = arith.addi %2350, %c8_i64_1314 : i64
    %c0_i32_1315 = arith.constant 0 : i32
    %2352 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1315) : (!llvm.ptr, i32) -> i32
    %2353 = arith.extui %2352 : i32 to i64
    %c65536_i64_1316 = arith.constant 65536 : i64
    %2354 = arith.muli %2353, %c65536_i64_1316 : i64
    %2355 = arith.cmpi ult, %2351, %2354 : i64
    cf.cond_br %2355, ^bb446, ^bb447
  ^bb445:  // pred: ^bb442
    %c1_i32_1317 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1317) : (i32) -> ()
    cf.br ^bb444
  ^bb446:  // 2 preds: ^bb444, ^bb447
    %2356 = llvm.getelementptr %16[%2350] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2348, %2356 {alignment = 1 : i64} : i64, !llvm.ptr
    %2357 = llvm.load %2 : !llvm.ptr -> i32
    %2358 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i64_1318 = arith.constant 16 : i64
    %2359 = arith.extui %2358 : i32 to i64
    %2360 = arith.addi %2359, %c16_i64_1318 : i64
    %c8_i64_1319 = arith.constant 8 : i64
    %2361 = arith.addi %2360, %c8_i64_1319 : i64
    %c0_i32_1320 = arith.constant 0 : i32
    %2362 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1320) : (!llvm.ptr, i32) -> i32
    %2363 = arith.extui %2362 : i32 to i64
    %c65536_i64_1321 = arith.constant 65536 : i64
    %2364 = arith.muli %2363, %c65536_i64_1321 : i64
    %2365 = arith.cmpi ult, %2361, %2364 : i64
    cf.cond_br %2365, ^bb448, ^bb449
  ^bb447:  // pred: ^bb444
    %c1_i32_1322 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1322) : (i32) -> ()
    cf.br ^bb446
  ^bb448:  // 2 preds: ^bb446, ^bb449
    %2366 = llvm.getelementptr %16[%2360] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2367 = llvm.load volatile %2366 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c272_i64_1323 = arith.constant 272 : i64
    %2368 = arith.extui %2357 : i32 to i64
    %2369 = arith.addi %2368, %c272_i64_1323 : i64
    %c8_i64_1324 = arith.constant 8 : i64
    %2370 = arith.addi %2369, %c8_i64_1324 : i64
    %c0_i32_1325 = arith.constant 0 : i32
    %2371 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1325) : (!llvm.ptr, i32) -> i32
    %2372 = arith.extui %2371 : i32 to i64
    %c65536_i64_1326 = arith.constant 65536 : i64
    %2373 = arith.muli %2372, %c65536_i64_1326 : i64
    %2374 = arith.cmpi ult, %2370, %2373 : i64
    cf.cond_br %2374, ^bb450, ^bb451
  ^bb449:  // pred: ^bb446
    %c1_i32_1327 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1327) : (i32) -> ()
    cf.br ^bb448
  ^bb450:  // 2 preds: ^bb448, ^bb451
    %2375 = llvm.getelementptr %16[%2369] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2367, %2375 {alignment = 1 : i64} : i64, !llvm.ptr
    %2376 = llvm.load %2 : !llvm.ptr -> i32
    %c240_i32_1328 = arith.constant 240 : i32
    %2377 = arith.addi %2376, %c240_i32_1328 : i32
    %c32_i32_1329 = arith.constant 32 : i32
    %2378 = llvm.load %2 : !llvm.ptr -> i32
    %c272_i32_1330 = arith.constant 272 : i32
    %2379 = arith.addi %2378, %c272_i32_1330 : i32
    %c32_i32_1331 = arith.constant 32 : i32
    %c1048804_i32_1332 = arith.constant 1048804 : i32
    call @f114(%arg0, %2377, %c32_i32_1329, %2379, %c32_i32_1331, %c1048804_i32_1332) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %2380 = llvm.load %2 : !llvm.ptr -> i32
    %c120_i32 = arith.constant 120 : i32
    %2381 = arith.addi %2380, %c120_i32 : i32
    %2382 = llvm.load %2 : !llvm.ptr -> i32
    %c240_i32_1333 = arith.constant 240 : i32
    %2383 = arith.addi %2382, %c240_i32_1333 : i32
    %c8_i32_1334 = arith.constant 8 : i32
    %2384 = arith.addi %2383, %c8_i32_1334 : i32
    %c0_i64_1335 = arith.constant 0 : i64
    %2385 = arith.extui %2384 : i32 to i64
    %2386 = arith.addi %2385, %c0_i64_1335 : i64
    %c8_i64_1336 = arith.constant 8 : i64
    %2387 = arith.addi %2386, %c8_i64_1336 : i64
    %c0_i32_1337 = arith.constant 0 : i32
    %2388 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1337) : (!llvm.ptr, i32) -> i32
    %2389 = arith.extui %2388 : i32 to i64
    %c65536_i64_1338 = arith.constant 65536 : i64
    %2390 = arith.muli %2389, %c65536_i64_1338 : i64
    %2391 = arith.cmpi ult, %2387, %2390 : i64
    cf.cond_br %2391, ^bb452, ^bb453
  ^bb451:  // pred: ^bb448
    %c1_i32_1339 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1339) : (i32) -> ()
    cf.br ^bb450
  ^bb452:  // 2 preds: ^bb450, ^bb453
    %2392 = llvm.getelementptr %16[%2386] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2393 = llvm.load volatile %2392 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1340 = arith.constant 0 : i64
    %2394 = arith.extui %2381 : i32 to i64
    %2395 = arith.addi %2394, %c0_i64_1340 : i64
    %c8_i64_1341 = arith.constant 8 : i64
    %2396 = arith.addi %2395, %c8_i64_1341 : i64
    %c0_i32_1342 = arith.constant 0 : i32
    %2397 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1342) : (!llvm.ptr, i32) -> i32
    %2398 = arith.extui %2397 : i32 to i64
    %c65536_i64_1343 = arith.constant 65536 : i64
    %2399 = arith.muli %2398, %c65536_i64_1343 : i64
    %2400 = arith.cmpi ult, %2396, %2399 : i64
    cf.cond_br %2400, ^bb454, ^bb455
  ^bb453:  // pred: ^bb450
    %c1_i32_1344 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1344) : (i32) -> ()
    cf.br ^bb452
  ^bb454:  // 2 preds: ^bb452, ^bb455
    %2401 = llvm.getelementptr %16[%2395] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2393, %2401 {alignment = 1 : i64} : i64, !llvm.ptr
    %2402 = llvm.load %2 : !llvm.ptr -> i32
    %c128_i32_1345 = arith.constant 128 : i32
    %2403 = arith.addi %2402, %c128_i32_1345 : i32
    %2404 = llvm.load %2 : !llvm.ptr -> i32
    %c240_i32_1346 = arith.constant 240 : i32
    %2405 = arith.addi %2404, %c240_i32_1346 : i32
    %c16_i32_1347 = arith.constant 16 : i32
    %2406 = arith.addi %2405, %c16_i32_1347 : i32
    %c0_i64_1348 = arith.constant 0 : i64
    %2407 = arith.extui %2406 : i32 to i64
    %2408 = arith.addi %2407, %c0_i64_1348 : i64
    %c8_i64_1349 = arith.constant 8 : i64
    %2409 = arith.addi %2408, %c8_i64_1349 : i64
    %c0_i32_1350 = arith.constant 0 : i32
    %2410 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1350) : (!llvm.ptr, i32) -> i32
    %2411 = arith.extui %2410 : i32 to i64
    %c65536_i64_1351 = arith.constant 65536 : i64
    %2412 = arith.muli %2411, %c65536_i64_1351 : i64
    %2413 = arith.cmpi ult, %2409, %2412 : i64
    cf.cond_br %2413, ^bb456, ^bb457
  ^bb455:  // pred: ^bb452
    %c1_i32_1352 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1352) : (i32) -> ()
    cf.br ^bb454
  ^bb456:  // 2 preds: ^bb454, ^bb457
    %2414 = llvm.getelementptr %16[%2408] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2415 = llvm.load volatile %2414 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1353 = arith.constant 0 : i64
    %2416 = arith.extui %2403 : i32 to i64
    %2417 = arith.addi %2416, %c0_i64_1353 : i64
    %c8_i64_1354 = arith.constant 8 : i64
    %2418 = arith.addi %2417, %c8_i64_1354 : i64
    %c0_i32_1355 = arith.constant 0 : i32
    %2419 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1355) : (!llvm.ptr, i32) -> i32
    %2420 = arith.extui %2419 : i32 to i64
    %c65536_i64_1356 = arith.constant 65536 : i64
    %2421 = arith.muli %2420, %c65536_i64_1356 : i64
    %2422 = arith.cmpi ult, %2418, %2421 : i64
    cf.cond_br %2422, ^bb458, ^bb459
  ^bb457:  // pred: ^bb454
    %c1_i32_1357 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1357) : (i32) -> ()
    cf.br ^bb456
  ^bb458:  // 2 preds: ^bb456, ^bb459
    %2423 = llvm.getelementptr %16[%2417] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2415, %2423 {alignment = 1 : i64} : i64, !llvm.ptr
    %2424 = llvm.load %2 : !llvm.ptr -> i32
    %c136_i32 = arith.constant 136 : i32
    %2425 = arith.addi %2424, %c136_i32 : i32
    %2426 = llvm.load %2 : !llvm.ptr -> i32
    %c240_i32_1358 = arith.constant 240 : i32
    %2427 = arith.addi %2426, %c240_i32_1358 : i32
    %c24_i32_1359 = arith.constant 24 : i32
    %2428 = arith.addi %2427, %c24_i32_1359 : i32
    %c0_i64_1360 = arith.constant 0 : i64
    %2429 = arith.extui %2428 : i32 to i64
    %2430 = arith.addi %2429, %c0_i64_1360 : i64
    %c8_i64_1361 = arith.constant 8 : i64
    %2431 = arith.addi %2430, %c8_i64_1361 : i64
    %c0_i32_1362 = arith.constant 0 : i32
    %2432 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1362) : (!llvm.ptr, i32) -> i32
    %2433 = arith.extui %2432 : i32 to i64
    %c65536_i64_1363 = arith.constant 65536 : i64
    %2434 = arith.muli %2433, %c65536_i64_1363 : i64
    %2435 = arith.cmpi ult, %2431, %2434 : i64
    cf.cond_br %2435, ^bb460, ^bb461
  ^bb459:  // pred: ^bb456
    %c1_i32_1364 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1364) : (i32) -> ()
    cf.br ^bb458
  ^bb460:  // 2 preds: ^bb458, ^bb461
    %2436 = llvm.getelementptr %16[%2430] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2437 = llvm.load volatile %2436 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1365 = arith.constant 0 : i64
    %2438 = arith.extui %2425 : i32 to i64
    %2439 = arith.addi %2438, %c0_i64_1365 : i64
    %c8_i64_1366 = arith.constant 8 : i64
    %2440 = arith.addi %2439, %c8_i64_1366 : i64
    %c0_i32_1367 = arith.constant 0 : i32
    %2441 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1367) : (!llvm.ptr, i32) -> i32
    %2442 = arith.extui %2441 : i32 to i64
    %c65536_i64_1368 = arith.constant 65536 : i64
    %2443 = arith.muli %2442, %c65536_i64_1368 : i64
    %2444 = arith.cmpi ult, %2440, %2443 : i64
    cf.cond_br %2444, ^bb462, ^bb463
  ^bb461:  // pred: ^bb458
    %c1_i32_1369 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1369) : (i32) -> ()
    cf.br ^bb460
  ^bb462:  // 2 preds: ^bb460, ^bb463
    %2445 = llvm.getelementptr %16[%2439] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2437, %2445 {alignment = 1 : i64} : i64, !llvm.ptr
    %2446 = llvm.load %5 : !llvm.ptr -> i32
    %2447 = llvm.load %2 : !llvm.ptr -> i32
    %c144_i32_1370 = arith.constant 144 : i32
    %2448 = arith.addi %2447, %c144_i32_1370 : i32
    %c8_i32_1371 = arith.constant 8 : i32
    %2449 = arith.addi %2448, %c8_i32_1371 : i32
    %c0_i64_1372 = arith.constant 0 : i64
    %2450 = arith.extui %2449 : i32 to i64
    %2451 = arith.addi %2450, %c0_i64_1372 : i64
    %c8_i64_1373 = arith.constant 8 : i64
    %2452 = arith.addi %2451, %c8_i64_1373 : i64
    %c0_i32_1374 = arith.constant 0 : i32
    %2453 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1374) : (!llvm.ptr, i32) -> i32
    %2454 = arith.extui %2453 : i32 to i64
    %c65536_i64_1375 = arith.constant 65536 : i64
    %2455 = arith.muli %2454, %c65536_i64_1375 : i64
    %2456 = arith.cmpi ult, %2452, %2455 : i64
    cf.cond_br %2456, ^bb464, ^bb465
  ^bb463:  // pred: ^bb460
    %c1_i32_1376 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1376) : (i32) -> ()
    cf.br ^bb462
  ^bb464:  // 2 preds: ^bb462, ^bb465
    %2457 = llvm.getelementptr %16[%2451] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2458 = llvm.load volatile %2457 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1377 = arith.constant 0 : i64
    %2459 = arith.extui %2446 : i32 to i64
    %2460 = arith.addi %2459, %c0_i64_1377 : i64
    %c8_i64_1378 = arith.constant 8 : i64
    %2461 = arith.addi %2460, %c8_i64_1378 : i64
    %c0_i32_1379 = arith.constant 0 : i32
    %2462 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1379) : (!llvm.ptr, i32) -> i32
    %2463 = arith.extui %2462 : i32 to i64
    %c65536_i64_1380 = arith.constant 65536 : i64
    %2464 = arith.muli %2463, %c65536_i64_1380 : i64
    %2465 = arith.cmpi ult, %2461, %2464 : i64
    cf.cond_br %2465, ^bb466, ^bb467
  ^bb465:  // pred: ^bb462
    %c1_i32_1381 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1381) : (i32) -> ()
    cf.br ^bb464
  ^bb466:  // 2 preds: ^bb464, ^bb467
    %2466 = llvm.getelementptr %16[%2460] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2458, %2466 {alignment = 1 : i64} : i64, !llvm.ptr
    %2467 = llvm.load %4 : !llvm.ptr -> i32
    %2468 = llvm.load %2 : !llvm.ptr -> i32
    %c144_i32_1382 = arith.constant 144 : i32
    %2469 = arith.addi %2468, %c144_i32_1382 : i32
    %c16_i32_1383 = arith.constant 16 : i32
    %2470 = arith.addi %2469, %c16_i32_1383 : i32
    %c0_i64_1384 = arith.constant 0 : i64
    %2471 = arith.extui %2470 : i32 to i64
    %2472 = arith.addi %2471, %c0_i64_1384 : i64
    %c8_i64_1385 = arith.constant 8 : i64
    %2473 = arith.addi %2472, %c8_i64_1385 : i64
    %c0_i32_1386 = arith.constant 0 : i32
    %2474 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1386) : (!llvm.ptr, i32) -> i32
    %2475 = arith.extui %2474 : i32 to i64
    %c65536_i64_1387 = arith.constant 65536 : i64
    %2476 = arith.muli %2475, %c65536_i64_1387 : i64
    %2477 = arith.cmpi ult, %2473, %2476 : i64
    cf.cond_br %2477, ^bb468, ^bb469
  ^bb467:  // pred: ^bb464
    %c1_i32_1388 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1388) : (i32) -> ()
    cf.br ^bb466
  ^bb468:  // 2 preds: ^bb466, ^bb469
    %2478 = llvm.getelementptr %16[%2472] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2479 = llvm.load volatile %2478 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1389 = arith.constant 0 : i64
    %2480 = arith.extui %2467 : i32 to i64
    %2481 = arith.addi %2480, %c0_i64_1389 : i64
    %c8_i64_1390 = arith.constant 8 : i64
    %2482 = arith.addi %2481, %c8_i64_1390 : i64
    %c0_i32_1391 = arith.constant 0 : i32
    %2483 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1391) : (!llvm.ptr, i32) -> i32
    %2484 = arith.extui %2483 : i32 to i64
    %c65536_i64_1392 = arith.constant 65536 : i64
    %2485 = arith.muli %2484, %c65536_i64_1392 : i64
    %2486 = arith.cmpi ult, %2482, %2485 : i64
    cf.cond_br %2486, ^bb470, ^bb471
  ^bb469:  // pred: ^bb466
    %c1_i32_1393 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1393) : (i32) -> ()
    cf.br ^bb468
  ^bb470:  // 2 preds: ^bb468, ^bb471
    %2487 = llvm.getelementptr %16[%2481] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2479, %2487 {alignment = 1 : i64} : i64, !llvm.ptr
    %2488 = llvm.load %3 : !llvm.ptr -> i32
    %2489 = llvm.load %2 : !llvm.ptr -> i32
    %c144_i32_1394 = arith.constant 144 : i32
    %2490 = arith.addi %2489, %c144_i32_1394 : i32
    %c24_i32_1395 = arith.constant 24 : i32
    %2491 = arith.addi %2490, %c24_i32_1395 : i32
    %c0_i64_1396 = arith.constant 0 : i64
    %2492 = arith.extui %2491 : i32 to i64
    %2493 = arith.addi %2492, %c0_i64_1396 : i64
    %c8_i64_1397 = arith.constant 8 : i64
    %2494 = arith.addi %2493, %c8_i64_1397 : i64
    %c0_i32_1398 = arith.constant 0 : i32
    %2495 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1398) : (!llvm.ptr, i32) -> i32
    %2496 = arith.extui %2495 : i32 to i64
    %c65536_i64_1399 = arith.constant 65536 : i64
    %2497 = arith.muli %2496, %c65536_i64_1399 : i64
    %2498 = arith.cmpi ult, %2494, %2497 : i64
    cf.cond_br %2498, ^bb472, ^bb473
  ^bb471:  // pred: ^bb468
    %c1_i32_1400 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1400) : (i32) -> ()
    cf.br ^bb470
  ^bb472:  // 2 preds: ^bb470, ^bb473
    %2499 = llvm.getelementptr %16[%2493] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2500 = llvm.load volatile %2499 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1401 = arith.constant 0 : i64
    %2501 = arith.extui %2488 : i32 to i64
    %2502 = arith.addi %2501, %c0_i64_1401 : i64
    %c8_i64_1402 = arith.constant 8 : i64
    %2503 = arith.addi %2502, %c8_i64_1402 : i64
    %c0_i32_1403 = arith.constant 0 : i32
    %2504 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1403) : (!llvm.ptr, i32) -> i32
    %2505 = arith.extui %2504 : i32 to i64
    %c65536_i64_1404 = arith.constant 65536 : i64
    %2506 = arith.muli %2505, %c65536_i64_1404 : i64
    %2507 = arith.cmpi ult, %2503, %2506 : i64
    cf.cond_br %2507, ^bb474, ^bb475
  ^bb473:  // pred: ^bb470
    %c1_i32_1405 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1405) : (i32) -> ()
    cf.br ^bb472
  ^bb474:  // 2 preds: ^bb472, ^bb475
    %2508 = llvm.getelementptr %16[%2502] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2500, %2508 {alignment = 1 : i64} : i64, !llvm.ptr
    %2509 = llvm.load %2 : !llvm.ptr -> i32
    %2510 = llvm.load %2 : !llvm.ptr -> i32
    %c240_i64_1406 = arith.constant 240 : i64
    %2511 = arith.extui %2510 : i32 to i64
    %2512 = arith.addi %2511, %c240_i64_1406 : i64
    %c8_i64_1407 = arith.constant 8 : i64
    %2513 = arith.addi %2512, %c8_i64_1407 : i64
    %c0_i32_1408 = arith.constant 0 : i32
    %2514 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1408) : (!llvm.ptr, i32) -> i32
    %2515 = arith.extui %2514 : i32 to i64
    %c65536_i64_1409 = arith.constant 65536 : i64
    %2516 = arith.muli %2515, %c65536_i64_1409 : i64
    %2517 = arith.cmpi ult, %2513, %2516 : i64
    cf.cond_br %2517, ^bb476, ^bb477
  ^bb475:  // pred: ^bb472
    %c1_i32_1410 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1410) : (i32) -> ()
    cf.br ^bb474
  ^bb476:  // 2 preds: ^bb474, ^bb477
    %2518 = llvm.getelementptr %16[%2512] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2519 = llvm.load volatile %2518 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c112_i64 = arith.constant 112 : i64
    %2520 = arith.extui %2509 : i32 to i64
    %2521 = arith.addi %2520, %c112_i64 : i64
    %c8_i64_1411 = arith.constant 8 : i64
    %2522 = arith.addi %2521, %c8_i64_1411 : i64
    %c0_i32_1412 = arith.constant 0 : i32
    %2523 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1412) : (!llvm.ptr, i32) -> i32
    %2524 = arith.extui %2523 : i32 to i64
    %c65536_i64_1413 = arith.constant 65536 : i64
    %2525 = arith.muli %2524, %c65536_i64_1413 : i64
    %2526 = arith.cmpi ult, %2522, %2525 : i64
    cf.cond_br %2526, ^bb478, ^bb479
  ^bb477:  // pred: ^bb474
    %c1_i32_1414 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1414) : (i32) -> ()
    cf.br ^bb476
  ^bb478:  // 2 preds: ^bb476, ^bb479
    %2527 = llvm.getelementptr %16[%2521] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2519, %2527 {alignment = 1 : i64} : i64, !llvm.ptr
    %2528 = llvm.load %2 : !llvm.ptr -> i32
    %2529 = llvm.load %2 : !llvm.ptr -> i32
    %c144_i64_1415 = arith.constant 144 : i64
    %2530 = arith.extui %2529 : i32 to i64
    %2531 = arith.addi %2530, %c144_i64_1415 : i64
    %c8_i64_1416 = arith.constant 8 : i64
    %2532 = arith.addi %2531, %c8_i64_1416 : i64
    %c0_i32_1417 = arith.constant 0 : i32
    %2533 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1417) : (!llvm.ptr, i32) -> i32
    %2534 = arith.extui %2533 : i32 to i64
    %c65536_i64_1418 = arith.constant 65536 : i64
    %2535 = arith.muli %2534, %c65536_i64_1418 : i64
    %2536 = arith.cmpi ult, %2532, %2535 : i64
    cf.cond_br %2536, ^bb480, ^bb481
  ^bb479:  // pred: ^bb476
    %c1_i32_1419 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1419) : (i32) -> ()
    cf.br ^bb478
  ^bb480:  // 2 preds: ^bb478, ^bb481
    %2537 = llvm.getelementptr %16[%2531] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2538 = llvm.load volatile %2537 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c16_i64_1420 = arith.constant 16 : i64
    %2539 = arith.extui %2528 : i32 to i64
    %2540 = arith.addi %2539, %c16_i64_1420 : i64
    %c8_i64_1421 = arith.constant 8 : i64
    %2541 = arith.addi %2540, %c8_i64_1421 : i64
    %c0_i32_1422 = arith.constant 0 : i32
    %2542 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1422) : (!llvm.ptr, i32) -> i32
    %2543 = arith.extui %2542 : i32 to i64
    %c65536_i64_1423 = arith.constant 65536 : i64
    %2544 = arith.muli %2543, %c65536_i64_1423 : i64
    %2545 = arith.cmpi ult, %2541, %2544 : i64
    cf.cond_br %2545, ^bb482, ^bb483
  ^bb481:  // pred: ^bb478
    %c1_i32_1424 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1424) : (i32) -> ()
    cf.br ^bb480
  ^bb482:  // 2 preds: ^bb480, ^bb483
    %2546 = llvm.getelementptr %16[%2540] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2538, %2546 {alignment = 1 : i64} : i64, !llvm.ptr
    %2547 = llvm.load %2 : !llvm.ptr -> i32
    %c72_i32_1425 = arith.constant 72 : i32
    %2548 = arith.addi %2547, %c72_i32_1425 : i32
    %2549 = llvm.load %2 : !llvm.ptr -> i32
    %c176_i32_1426 = arith.constant 176 : i32
    %2550 = arith.addi %2549, %c176_i32_1426 : i32
    %c24_i32_1427 = arith.constant 24 : i32
    %2551 = arith.addi %2550, %c24_i32_1427 : i32
    %c0_i64_1428 = arith.constant 0 : i64
    %2552 = arith.extui %2551 : i32 to i64
    %2553 = arith.addi %2552, %c0_i64_1428 : i64
    %c8_i64_1429 = arith.constant 8 : i64
    %2554 = arith.addi %2553, %c8_i64_1429 : i64
    %c0_i32_1430 = arith.constant 0 : i32
    %2555 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1430) : (!llvm.ptr, i32) -> i32
    %2556 = arith.extui %2555 : i32 to i64
    %c65536_i64_1431 = arith.constant 65536 : i64
    %2557 = arith.muli %2556, %c65536_i64_1431 : i64
    %2558 = arith.cmpi ult, %2554, %2557 : i64
    cf.cond_br %2558, ^bb484, ^bb485
  ^bb483:  // pred: ^bb480
    %c1_i32_1432 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1432) : (i32) -> ()
    cf.br ^bb482
  ^bb484:  // 2 preds: ^bb482, ^bb485
    %2559 = llvm.getelementptr %16[%2553] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2560 = llvm.load volatile %2559 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1433 = arith.constant 0 : i64
    %2561 = arith.extui %2548 : i32 to i64
    %2562 = arith.addi %2561, %c0_i64_1433 : i64
    %c8_i64_1434 = arith.constant 8 : i64
    %2563 = arith.addi %2562, %c8_i64_1434 : i64
    %c0_i32_1435 = arith.constant 0 : i32
    %2564 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1435) : (!llvm.ptr, i32) -> i32
    %2565 = arith.extui %2564 : i32 to i64
    %c65536_i64_1436 = arith.constant 65536 : i64
    %2566 = arith.muli %2565, %c65536_i64_1436 : i64
    %2567 = arith.cmpi ult, %2563, %2566 : i64
    cf.cond_br %2567, ^bb486, ^bb487
  ^bb485:  // pred: ^bb482
    %c1_i32_1437 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1437) : (i32) -> ()
    cf.br ^bb484
  ^bb486:  // 2 preds: ^bb484, ^bb487
    %2568 = llvm.getelementptr %16[%2562] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2560, %2568 {alignment = 1 : i64} : i64, !llvm.ptr
    %2569 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_1438 = arith.constant 64 : i32
    %2570 = arith.addi %2569, %c64_i32_1438 : i32
    %2571 = llvm.load %2 : !llvm.ptr -> i32
    %c176_i32_1439 = arith.constant 176 : i32
    %2572 = arith.addi %2571, %c176_i32_1439 : i32
    %c16_i32_1440 = arith.constant 16 : i32
    %2573 = arith.addi %2572, %c16_i32_1440 : i32
    %c0_i64_1441 = arith.constant 0 : i64
    %2574 = arith.extui %2573 : i32 to i64
    %2575 = arith.addi %2574, %c0_i64_1441 : i64
    %c8_i64_1442 = arith.constant 8 : i64
    %2576 = arith.addi %2575, %c8_i64_1442 : i64
    %c0_i32_1443 = arith.constant 0 : i32
    %2577 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1443) : (!llvm.ptr, i32) -> i32
    %2578 = arith.extui %2577 : i32 to i64
    %c65536_i64_1444 = arith.constant 65536 : i64
    %2579 = arith.muli %2578, %c65536_i64_1444 : i64
    %2580 = arith.cmpi ult, %2576, %2579 : i64
    cf.cond_br %2580, ^bb488, ^bb489
  ^bb487:  // pred: ^bb484
    %c1_i32_1445 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1445) : (i32) -> ()
    cf.br ^bb486
  ^bb488:  // 2 preds: ^bb486, ^bb489
    %2581 = llvm.getelementptr %16[%2575] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2582 = llvm.load volatile %2581 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1446 = arith.constant 0 : i64
    %2583 = arith.extui %2570 : i32 to i64
    %2584 = arith.addi %2583, %c0_i64_1446 : i64
    %c8_i64_1447 = arith.constant 8 : i64
    %2585 = arith.addi %2584, %c8_i64_1447 : i64
    %c0_i32_1448 = arith.constant 0 : i32
    %2586 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1448) : (!llvm.ptr, i32) -> i32
    %2587 = arith.extui %2586 : i32 to i64
    %c65536_i64_1449 = arith.constant 65536 : i64
    %2588 = arith.muli %2587, %c65536_i64_1449 : i64
    %2589 = arith.cmpi ult, %2585, %2588 : i64
    cf.cond_br %2589, ^bb490, ^bb491
  ^bb489:  // pred: ^bb486
    %c1_i32_1450 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1450) : (i32) -> ()
    cf.br ^bb488
  ^bb490:  // 2 preds: ^bb488, ^bb491
    %2590 = llvm.getelementptr %16[%2584] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2582, %2590 {alignment = 1 : i64} : i64, !llvm.ptr
    %2591 = llvm.load %2 : !llvm.ptr -> i32
    %c56_i32_1451 = arith.constant 56 : i32
    %2592 = arith.addi %2591, %c56_i32_1451 : i32
    %2593 = llvm.load %2 : !llvm.ptr -> i32
    %c176_i32_1452 = arith.constant 176 : i32
    %2594 = arith.addi %2593, %c176_i32_1452 : i32
    %c8_i32_1453 = arith.constant 8 : i32
    %2595 = arith.addi %2594, %c8_i32_1453 : i32
    %c0_i64_1454 = arith.constant 0 : i64
    %2596 = arith.extui %2595 : i32 to i64
    %2597 = arith.addi %2596, %c0_i64_1454 : i64
    %c8_i64_1455 = arith.constant 8 : i64
    %2598 = arith.addi %2597, %c8_i64_1455 : i64
    %c0_i32_1456 = arith.constant 0 : i32
    %2599 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1456) : (!llvm.ptr, i32) -> i32
    %2600 = arith.extui %2599 : i32 to i64
    %c65536_i64_1457 = arith.constant 65536 : i64
    %2601 = arith.muli %2600, %c65536_i64_1457 : i64
    %2602 = arith.cmpi ult, %2598, %2601 : i64
    cf.cond_br %2602, ^bb492, ^bb493
  ^bb491:  // pred: ^bb488
    %c1_i32_1458 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1458) : (i32) -> ()
    cf.br ^bb490
  ^bb492:  // 2 preds: ^bb490, ^bb493
    %2603 = llvm.getelementptr %16[%2597] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2604 = llvm.load volatile %2603 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1459 = arith.constant 0 : i64
    %2605 = arith.extui %2592 : i32 to i64
    %2606 = arith.addi %2605, %c0_i64_1459 : i64
    %c8_i64_1460 = arith.constant 8 : i64
    %2607 = arith.addi %2606, %c8_i64_1460 : i64
    %c0_i32_1461 = arith.constant 0 : i32
    %2608 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1461) : (!llvm.ptr, i32) -> i32
    %2609 = arith.extui %2608 : i32 to i64
    %c65536_i64_1462 = arith.constant 65536 : i64
    %2610 = arith.muli %2609, %c65536_i64_1462 : i64
    %2611 = arith.cmpi ult, %2607, %2610 : i64
    cf.cond_br %2611, ^bb494, ^bb495
  ^bb493:  // pred: ^bb490
    %c1_i32_1463 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1463) : (i32) -> ()
    cf.br ^bb492
  ^bb494:  // 2 preds: ^bb492, ^bb495
    %2612 = llvm.getelementptr %16[%2606] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2604, %2612 {alignment = 1 : i64} : i64, !llvm.ptr
    %2613 = llvm.load %2 : !llvm.ptr -> i32
    %2614 = llvm.load %2 : !llvm.ptr -> i32
    %c176_i64_1464 = arith.constant 176 : i64
    %2615 = arith.extui %2614 : i32 to i64
    %2616 = arith.addi %2615, %c176_i64_1464 : i64
    %c8_i64_1465 = arith.constant 8 : i64
    %2617 = arith.addi %2616, %c8_i64_1465 : i64
    %c0_i32_1466 = arith.constant 0 : i32
    %2618 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1466) : (!llvm.ptr, i32) -> i32
    %2619 = arith.extui %2618 : i32 to i64
    %c65536_i64_1467 = arith.constant 65536 : i64
    %2620 = arith.muli %2619, %c65536_i64_1467 : i64
    %2621 = arith.cmpi ult, %2617, %2620 : i64
    cf.cond_br %2621, ^bb496, ^bb497
  ^bb495:  // pred: ^bb492
    %c1_i32_1468 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1468) : (i32) -> ()
    cf.br ^bb494
  ^bb496:  // 2 preds: ^bb494, ^bb497
    %2622 = llvm.getelementptr %16[%2616] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2623 = llvm.load volatile %2622 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c48_i64_1469 = arith.constant 48 : i64
    %2624 = arith.extui %2613 : i32 to i64
    %2625 = arith.addi %2624, %c48_i64_1469 : i64
    %c8_i64_1470 = arith.constant 8 : i64
    %2626 = arith.addi %2625, %c8_i64_1470 : i64
    %c0_i32_1471 = arith.constant 0 : i32
    %2627 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1471) : (!llvm.ptr, i32) -> i32
    %2628 = arith.extui %2627 : i32 to i64
    %c65536_i64_1472 = arith.constant 65536 : i64
    %2629 = arith.muli %2628, %c65536_i64_1472 : i64
    %2630 = arith.cmpi ult, %2626, %2629 : i64
    cf.cond_br %2630, ^bb498, ^bb499
  ^bb497:  // pred: ^bb494
    %c1_i32_1473 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1473) : (i32) -> ()
    cf.br ^bb496
  ^bb498:  // 2 preds: ^bb496, ^bb499
    %2631 = llvm.getelementptr %16[%2625] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2623, %2631 {alignment = 1 : i64} : i64, !llvm.ptr
    %2632 = llvm.load %2 : !llvm.ptr -> i32
    %c104_i32_1474 = arith.constant 104 : i32
    %2633 = arith.addi %2632, %c104_i32_1474 : i32
    %2634 = llvm.load %2 : !llvm.ptr -> i32
    %c208_i32_1475 = arith.constant 208 : i32
    %2635 = arith.addi %2634, %c208_i32_1475 : i32
    %c24_i32_1476 = arith.constant 24 : i32
    %2636 = arith.addi %2635, %c24_i32_1476 : i32
    %c0_i64_1477 = arith.constant 0 : i64
    %2637 = arith.extui %2636 : i32 to i64
    %2638 = arith.addi %2637, %c0_i64_1477 : i64
    %c8_i64_1478 = arith.constant 8 : i64
    %2639 = arith.addi %2638, %c8_i64_1478 : i64
    %c0_i32_1479 = arith.constant 0 : i32
    %2640 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1479) : (!llvm.ptr, i32) -> i32
    %2641 = arith.extui %2640 : i32 to i64
    %c65536_i64_1480 = arith.constant 65536 : i64
    %2642 = arith.muli %2641, %c65536_i64_1480 : i64
    %2643 = arith.cmpi ult, %2639, %2642 : i64
    cf.cond_br %2643, ^bb500, ^bb501
  ^bb499:  // pred: ^bb496
    %c1_i32_1481 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1481) : (i32) -> ()
    cf.br ^bb498
  ^bb500:  // 2 preds: ^bb498, ^bb501
    %2644 = llvm.getelementptr %16[%2638] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2645 = llvm.load volatile %2644 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1482 = arith.constant 0 : i64
    %2646 = arith.extui %2633 : i32 to i64
    %2647 = arith.addi %2646, %c0_i64_1482 : i64
    %c8_i64_1483 = arith.constant 8 : i64
    %2648 = arith.addi %2647, %c8_i64_1483 : i64
    %c0_i32_1484 = arith.constant 0 : i32
    %2649 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1484) : (!llvm.ptr, i32) -> i32
    %2650 = arith.extui %2649 : i32 to i64
    %c65536_i64_1485 = arith.constant 65536 : i64
    %2651 = arith.muli %2650, %c65536_i64_1485 : i64
    %2652 = arith.cmpi ult, %2648, %2651 : i64
    cf.cond_br %2652, ^bb502, ^bb503
  ^bb501:  // pred: ^bb498
    %c1_i32_1486 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1486) : (i32) -> ()
    cf.br ^bb500
  ^bb502:  // 2 preds: ^bb500, ^bb503
    %2653 = llvm.getelementptr %16[%2647] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2645, %2653 {alignment = 1 : i64} : i64, !llvm.ptr
    %2654 = llvm.load %2 : !llvm.ptr -> i32
    %c96_i32_1487 = arith.constant 96 : i32
    %2655 = arith.addi %2654, %c96_i32_1487 : i32
    %2656 = llvm.load %2 : !llvm.ptr -> i32
    %c208_i32_1488 = arith.constant 208 : i32
    %2657 = arith.addi %2656, %c208_i32_1488 : i32
    %c16_i32_1489 = arith.constant 16 : i32
    %2658 = arith.addi %2657, %c16_i32_1489 : i32
    %c0_i64_1490 = arith.constant 0 : i64
    %2659 = arith.extui %2658 : i32 to i64
    %2660 = arith.addi %2659, %c0_i64_1490 : i64
    %c8_i64_1491 = arith.constant 8 : i64
    %2661 = arith.addi %2660, %c8_i64_1491 : i64
    %c0_i32_1492 = arith.constant 0 : i32
    %2662 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1492) : (!llvm.ptr, i32) -> i32
    %2663 = arith.extui %2662 : i32 to i64
    %c65536_i64_1493 = arith.constant 65536 : i64
    %2664 = arith.muli %2663, %c65536_i64_1493 : i64
    %2665 = arith.cmpi ult, %2661, %2664 : i64
    cf.cond_br %2665, ^bb504, ^bb505
  ^bb503:  // pred: ^bb500
    %c1_i32_1494 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1494) : (i32) -> ()
    cf.br ^bb502
  ^bb504:  // 2 preds: ^bb502, ^bb505
    %2666 = llvm.getelementptr %16[%2660] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2667 = llvm.load volatile %2666 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1495 = arith.constant 0 : i64
    %2668 = arith.extui %2655 : i32 to i64
    %2669 = arith.addi %2668, %c0_i64_1495 : i64
    %c8_i64_1496 = arith.constant 8 : i64
    %2670 = arith.addi %2669, %c8_i64_1496 : i64
    %c0_i32_1497 = arith.constant 0 : i32
    %2671 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1497) : (!llvm.ptr, i32) -> i32
    %2672 = arith.extui %2671 : i32 to i64
    %c65536_i64_1498 = arith.constant 65536 : i64
    %2673 = arith.muli %2672, %c65536_i64_1498 : i64
    %2674 = arith.cmpi ult, %2670, %2673 : i64
    cf.cond_br %2674, ^bb506, ^bb507
  ^bb505:  // pred: ^bb502
    %c1_i32_1499 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1499) : (i32) -> ()
    cf.br ^bb504
  ^bb506:  // 2 preds: ^bb504, ^bb507
    %2675 = llvm.getelementptr %16[%2669] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2667, %2675 {alignment = 1 : i64} : i64, !llvm.ptr
    %2676 = llvm.load %2 : !llvm.ptr -> i32
    %c88_i32_1500 = arith.constant 88 : i32
    %2677 = arith.addi %2676, %c88_i32_1500 : i32
    %2678 = llvm.load %2 : !llvm.ptr -> i32
    %c208_i32_1501 = arith.constant 208 : i32
    %2679 = arith.addi %2678, %c208_i32_1501 : i32
    %c8_i32_1502 = arith.constant 8 : i32
    %2680 = arith.addi %2679, %c8_i32_1502 : i32
    %c0_i64_1503 = arith.constant 0 : i64
    %2681 = arith.extui %2680 : i32 to i64
    %2682 = arith.addi %2681, %c0_i64_1503 : i64
    %c8_i64_1504 = arith.constant 8 : i64
    %2683 = arith.addi %2682, %c8_i64_1504 : i64
    %c0_i32_1505 = arith.constant 0 : i32
    %2684 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1505) : (!llvm.ptr, i32) -> i32
    %2685 = arith.extui %2684 : i32 to i64
    %c65536_i64_1506 = arith.constant 65536 : i64
    %2686 = arith.muli %2685, %c65536_i64_1506 : i64
    %2687 = arith.cmpi ult, %2683, %2686 : i64
    cf.cond_br %2687, ^bb508, ^bb509
  ^bb507:  // pred: ^bb504
    %c1_i32_1507 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1507) : (i32) -> ()
    cf.br ^bb506
  ^bb508:  // 2 preds: ^bb506, ^bb509
    %2688 = llvm.getelementptr %16[%2682] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2689 = llvm.load volatile %2688 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1508 = arith.constant 0 : i64
    %2690 = arith.extui %2677 : i32 to i64
    %2691 = arith.addi %2690, %c0_i64_1508 : i64
    %c8_i64_1509 = arith.constant 8 : i64
    %2692 = arith.addi %2691, %c8_i64_1509 : i64
    %c0_i32_1510 = arith.constant 0 : i32
    %2693 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1510) : (!llvm.ptr, i32) -> i32
    %2694 = arith.extui %2693 : i32 to i64
    %c65536_i64_1511 = arith.constant 65536 : i64
    %2695 = arith.muli %2694, %c65536_i64_1511 : i64
    %2696 = arith.cmpi ult, %2692, %2695 : i64
    cf.cond_br %2696, ^bb510, ^bb511
  ^bb509:  // pred: ^bb506
    %c1_i32_1512 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1512) : (i32) -> ()
    cf.br ^bb508
  ^bb510:  // 2 preds: ^bb508, ^bb511
    %2697 = llvm.getelementptr %16[%2691] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2689, %2697 {alignment = 1 : i64} : i64, !llvm.ptr
    %2698 = llvm.load %2 : !llvm.ptr -> i32
    %2699 = llvm.load %2 : !llvm.ptr -> i32
    %c208_i64_1513 = arith.constant 208 : i64
    %2700 = arith.extui %2699 : i32 to i64
    %2701 = arith.addi %2700, %c208_i64_1513 : i64
    %c8_i64_1514 = arith.constant 8 : i64
    %2702 = arith.addi %2701, %c8_i64_1514 : i64
    %c0_i32_1515 = arith.constant 0 : i32
    %2703 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1515) : (!llvm.ptr, i32) -> i32
    %2704 = arith.extui %2703 : i32 to i64
    %c65536_i64_1516 = arith.constant 65536 : i64
    %2705 = arith.muli %2704, %c65536_i64_1516 : i64
    %2706 = arith.cmpi ult, %2702, %2705 : i64
    cf.cond_br %2706, ^bb512, ^bb513
  ^bb511:  // pred: ^bb508
    %c1_i32_1517 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1517) : (i32) -> ()
    cf.br ^bb510
  ^bb512:  // 2 preds: ^bb510, ^bb513
    %2707 = llvm.getelementptr %16[%2701] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2708 = llvm.load volatile %2707 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c80_i64_1518 = arith.constant 80 : i64
    %2709 = arith.extui %2698 : i32 to i64
    %2710 = arith.addi %2709, %c80_i64_1518 : i64
    %c8_i64_1519 = arith.constant 8 : i64
    %2711 = arith.addi %2710, %c8_i64_1519 : i64
    %c0_i32_1520 = arith.constant 0 : i32
    %2712 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1520) : (!llvm.ptr, i32) -> i32
    %2713 = arith.extui %2712 : i32 to i64
    %c65536_i64_1521 = arith.constant 65536 : i64
    %2714 = arith.muli %2713, %c65536_i64_1521 : i64
    %2715 = arith.cmpi ult, %2711, %2714 : i64
    cf.cond_br %2715, ^bb514, ^bb515
  ^bb513:  // pred: ^bb510
    %c1_i32_1522 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1522) : (i32) -> ()
    cf.br ^bb512
  ^bb514:  // 2 preds: ^bb512, ^bb515
    %2716 = llvm.getelementptr %16[%2710] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2708, %2716 {alignment = 1 : i64} : i64, !llvm.ptr
    %2717 = llvm.load %2 : !llvm.ptr -> i32
    %c272_i32_1523 = arith.constant 272 : i32
    %2718 = arith.addi %2717, %c272_i32_1523 : i32
    %c4_i32_1524 = arith.constant 4 : i32
    %c0_i32_1525 = arith.constant 0 : i32
    %c1_i32_1526 = arith.constant 1 : i32
    %c32_i32_1527 = arith.constant 32 : i32
    call @f111(%arg0, %2718, %c4_i32_1524, %c0_i32_1525, %c1_i32_1526, %c32_i32_1527) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %2719 = llvm.load %2 : !llvm.ptr -> i32
    %c276_i64_1528 = arith.constant 276 : i64
    %2720 = arith.extui %2719 : i32 to i64
    %2721 = arith.addi %2720, %c276_i64_1528 : i64
    %c4_i64_1529 = arith.constant 4 : i64
    %2722 = arith.addi %2721, %c4_i64_1529 : i64
    %c0_i32_1530 = arith.constant 0 : i32
    %2723 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1530) : (!llvm.ptr, i32) -> i32
    %2724 = arith.extui %2723 : i32 to i64
    %c65536_i64_1531 = arith.constant 65536 : i64
    %2725 = arith.muli %2724, %c65536_i64_1531 : i64
    %2726 = arith.cmpi ult, %2722, %2725 : i64
    cf.cond_br %2726, ^bb516, ^bb517
  ^bb515:  // pred: ^bb512
    %c1_i32_1532 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1532) : (i32) -> ()
    cf.br ^bb514
  ^bb516:  // 2 preds: ^bb514, ^bb517
    %2727 = llvm.getelementptr %16[%2721] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2728 = llvm.load volatile %2727 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %2728, %4 : i32, !llvm.ptr
    %2729 = llvm.load %2 : !llvm.ptr -> i32
    %c272_i64_1533 = arith.constant 272 : i64
    %2730 = arith.extui %2729 : i32 to i64
    %2731 = arith.addi %2730, %c272_i64_1533 : i64
    %c4_i64_1534 = arith.constant 4 : i64
    %2732 = arith.addi %2731, %c4_i64_1534 : i64
    %c0_i32_1535 = arith.constant 0 : i32
    %2733 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1535) : (!llvm.ptr, i32) -> i32
    %2734 = arith.extui %2733 : i32 to i64
    %c65536_i64_1536 = arith.constant 65536 : i64
    %2735 = arith.muli %2734, %c65536_i64_1536 : i64
    %2736 = arith.cmpi ult, %2732, %2735 : i64
    cf.cond_br %2736, ^bb518, ^bb519
  ^bb517:  // pred: ^bb514
    %c1_i32_1537 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1537) : (i32) -> ()
    cf.br ^bb516
  ^bb518:  // 2 preds: ^bb516, ^bb519
    %2737 = llvm.getelementptr %16[%2731] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2738 = llvm.load volatile %2737 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_1538 = arith.constant 1 : i32
    %2739 = arith.cmpi eq, %2738, %c1_i32_1538 : i32
    %2740 = arith.extui %2739 : i1 to i32
    %c0_i32_1539 = arith.constant 0 : i32
    %2741 = arith.cmpi ne, %2740, %c0_i32_1539 : i32
    cf.cond_br %2741, ^bb4, ^bb520
  ^bb519:  // pred: ^bb516
    %c1_i32_1540 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1540) : (i32) -> ()
    cf.br ^bb518
  ^bb520:  // pred: ^bb518
    %2742 = llvm.load %2 : !llvm.ptr -> i32
    %c280_i64_1541 = arith.constant 280 : i64
    %2743 = arith.extui %2742 : i32 to i64
    %2744 = arith.addi %2743, %c280_i64_1541 : i64
    %c4_i64_1542 = arith.constant 4 : i64
    %2745 = arith.addi %2744, %c4_i64_1542 : i64
    %c0_i32_1543 = arith.constant 0 : i32
    %2746 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1543) : (!llvm.ptr, i32) -> i32
    %2747 = arith.extui %2746 : i32 to i64
    %c65536_i64_1544 = arith.constant 65536 : i64
    %2748 = arith.muli %2747, %c65536_i64_1544 : i64
    %2749 = arith.cmpi ult, %2745, %2748 : i64
    cf.cond_br %2749, ^bb521, ^bb522
  ^bb521:  // 2 preds: ^bb520, ^bb522
    %2750 = llvm.getelementptr %16[%2744] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2751 = llvm.load volatile %2750 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %2751, %6 : i32, !llvm.ptr
    %2752 = llvm.load %2 : !llvm.ptr -> i32
    %c272_i32_1545 = arith.constant 272 : i32
    %2753 = arith.addi %2752, %c272_i32_1545 : i32
    %c4_i32_1546 = arith.constant 4 : i32
    %c0_i32_1547 = arith.constant 0 : i32
    %c4_i32_1548 = arith.constant 4 : i32
    %c4_i32_1549 = arith.constant 4 : i32
    call @f111(%arg0, %2753, %c4_i32_1546, %c0_i32_1547, %c4_i32_1548, %c4_i32_1549) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %2754 = llvm.load %2 : !llvm.ptr -> i32
    %c276_i64_1550 = arith.constant 276 : i64
    %2755 = arith.extui %2754 : i32 to i64
    %2756 = arith.addi %2755, %c276_i64_1550 : i64
    %c4_i64_1551 = arith.constant 4 : i64
    %2757 = arith.addi %2756, %c4_i64_1551 : i64
    %c0_i32_1552 = arith.constant 0 : i32
    %2758 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1552) : (!llvm.ptr, i32) -> i32
    %2759 = arith.extui %2758 : i32 to i64
    %c65536_i64_1553 = arith.constant 65536 : i64
    %2760 = arith.muli %2759, %c65536_i64_1553 : i64
    %2761 = arith.cmpi ult, %2757, %2760 : i64
    cf.cond_br %2761, ^bb523, ^bb524
  ^bb522:  // pred: ^bb520
    %c1_i32_1554 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1554) : (i32) -> ()
    cf.br ^bb521
  ^bb523:  // 2 preds: ^bb521, ^bb524
    %2762 = llvm.getelementptr %16[%2756] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2763 = llvm.load volatile %2762 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %2763, %5 : i32, !llvm.ptr
    %2764 = llvm.load %2 : !llvm.ptr -> i32
    %c272_i64_1555 = arith.constant 272 : i64
    %2765 = arith.extui %2764 : i32 to i64
    %2766 = arith.addi %2765, %c272_i64_1555 : i64
    %c4_i64_1556 = arith.constant 4 : i64
    %2767 = arith.addi %2766, %c4_i64_1556 : i64
    %c0_i32_1557 = arith.constant 0 : i32
    %2768 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1557) : (!llvm.ptr, i32) -> i32
    %2769 = arith.extui %2768 : i32 to i64
    %c65536_i64_1558 = arith.constant 65536 : i64
    %2770 = arith.muli %2769, %c65536_i64_1558 : i64
    %2771 = arith.cmpi ult, %2767, %2770 : i64
    cf.cond_br %2771, ^bb525, ^bb526
  ^bb524:  // pred: ^bb521
    %c1_i32_1559 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1559) : (i32) -> ()
    cf.br ^bb523
  ^bb525:  // 2 preds: ^bb523, ^bb526
    %2772 = llvm.getelementptr %16[%2766] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2773 = llvm.load volatile %2772 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_1560 = arith.constant 1 : i32
    %2774 = arith.cmpi eq, %2773, %c1_i32_1560 : i32
    %2775 = arith.extui %2774 : i1 to i32
    %c0_i32_1561 = arith.constant 0 : i32
    %2776 = arith.cmpi ne, %2775, %c0_i32_1561 : i32
    cf.cond_br %2776, ^bb3, ^bb527
  ^bb526:  // pred: ^bb523
    %c1_i32_1562 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1562) : (i32) -> ()
    cf.br ^bb525
  ^bb527:  // pred: ^bb525
    %2777 = llvm.load %2 : !llvm.ptr -> i32
    %c240_i32_1563 = arith.constant 240 : i32
    %2778 = arith.addi %2777, %c240_i32_1563 : i32
    %c16_i32_1564 = arith.constant 16 : i32
    %2779 = arith.addi %2778, %c16_i32_1564 : i32
    llvm.store %2779, %1 : i32, !llvm.ptr
    %2780 = llvm.load %2 : !llvm.ptr -> i32
    %c280_i64_1565 = arith.constant 280 : i64
    %2781 = arith.extui %2780 : i32 to i64
    %2782 = arith.addi %2781, %c280_i64_1565 : i64
    %c4_i64_1566 = arith.constant 4 : i64
    %2783 = arith.addi %2782, %c4_i64_1566 : i64
    %c0_i32_1567 = arith.constant 0 : i32
    %2784 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1567) : (!llvm.ptr, i32) -> i32
    %2785 = arith.extui %2784 : i32 to i64
    %c65536_i64_1568 = arith.constant 65536 : i64
    %2786 = arith.muli %2785, %c65536_i64_1568 : i64
    %2787 = arith.cmpi ult, %2783, %2786 : i64
    cf.cond_br %2787, ^bb528, ^bb529
  ^bb528:  // 2 preds: ^bb527, ^bb529
    %2788 = llvm.getelementptr %16[%2782] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2789 = llvm.load volatile %2788 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_1569 = arith.constant 0 : i64
    %2790 = arith.extui %2779 : i32 to i64
    %2791 = arith.addi %2790, %c0_i64_1569 : i64
    %c4_i64_1570 = arith.constant 4 : i64
    %2792 = arith.addi %2791, %c4_i64_1570 : i64
    %c0_i32_1571 = arith.constant 0 : i32
    %2793 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1571) : (!llvm.ptr, i32) -> i32
    %2794 = arith.extui %2793 : i32 to i64
    %c65536_i64_1572 = arith.constant 65536 : i64
    %2795 = arith.muli %2794, %c65536_i64_1572 : i64
    %2796 = arith.cmpi ult, %2792, %2795 : i64
    cf.cond_br %2796, ^bb530, ^bb531
  ^bb529:  // pred: ^bb527
    %c1_i32_1573 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1573) : (i32) -> ()
    cf.br ^bb528
  ^bb530:  // 2 preds: ^bb528, ^bb531
    %2797 = llvm.getelementptr %16[%2791] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2789, %2797 {alignment = 1 : i64} : i32, !llvm.ptr
    %2798 = llvm.load %2 : !llvm.ptr -> i32
    %c240_i32_1574 = arith.constant 240 : i32
    %2799 = arith.addi %2798, %c240_i32_1574 : i32
    %c8_i32_1575 = arith.constant 8 : i32
    %2800 = arith.addi %2799, %c8_i32_1575 : i32
    llvm.store %2800, %3 : i32, !llvm.ptr
    %c0_i32_1576 = arith.constant 0 : i32
    %c0_i64_1577 = arith.constant 0 : i64
    %2801 = arith.extui %2800 : i32 to i64
    %2802 = arith.addi %2801, %c0_i64_1577 : i64
    %c4_i64_1578 = arith.constant 4 : i64
    %2803 = arith.addi %2802, %c4_i64_1578 : i64
    %c0_i32_1579 = arith.constant 0 : i32
    %2804 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1579) : (!llvm.ptr, i32) -> i32
    %2805 = arith.extui %2804 : i32 to i64
    %c65536_i64_1580 = arith.constant 65536 : i64
    %2806 = arith.muli %2805, %c65536_i64_1580 : i64
    %2807 = arith.cmpi ult, %2803, %2806 : i64
    cf.cond_br %2807, ^bb532, ^bb533
  ^bb531:  // pred: ^bb528
    %c1_i32_1581 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1581) : (i32) -> ()
    cf.br ^bb530
  ^bb532:  // 2 preds: ^bb530, ^bb533
    %2808 = llvm.getelementptr %16[%2802] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_1576, %2808 {alignment = 1 : i64} : i32, !llvm.ptr
    %2809 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_1582 = arith.constant 0 : i32
    %c260_i64 = arith.constant 260 : i64
    %2810 = arith.extui %2809 : i32 to i64
    %2811 = arith.addi %2810, %c260_i64 : i64
    %c4_i64_1583 = arith.constant 4 : i64
    %2812 = arith.addi %2811, %c4_i64_1583 : i64
    %c0_i32_1584 = arith.constant 0 : i32
    %2813 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1584) : (!llvm.ptr, i32) -> i32
    %2814 = arith.extui %2813 : i32 to i64
    %c65536_i64_1585 = arith.constant 65536 : i64
    %2815 = arith.muli %2814, %c65536_i64_1585 : i64
    %2816 = arith.cmpi ult, %2812, %2815 : i64
    cf.cond_br %2816, ^bb534, ^bb535
  ^bb533:  // pred: ^bb530
    %c1_i32_1586 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1586) : (i32) -> ()
    cf.br ^bb532
  ^bb534:  // 2 preds: ^bb532, ^bb535
    %2817 = llvm.getelementptr %16[%2811] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_1582, %2817 {alignment = 1 : i64} : i32, !llvm.ptr
    %2818 = llvm.load %2 : !llvm.ptr -> i32
    %2819 = llvm.load %5 : !llvm.ptr -> i32
    %c252_i64 = arith.constant 252 : i64
    %2820 = arith.extui %2818 : i32 to i64
    %2821 = arith.addi %2820, %c252_i64 : i64
    %c4_i64_1587 = arith.constant 4 : i64
    %2822 = arith.addi %2821, %c4_i64_1587 : i64
    %c0_i32_1588 = arith.constant 0 : i32
    %2823 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1588) : (!llvm.ptr, i32) -> i32
    %2824 = arith.extui %2823 : i32 to i64
    %c65536_i64_1589 = arith.constant 65536 : i64
    %2825 = arith.muli %2824, %c65536_i64_1589 : i64
    %2826 = arith.cmpi ult, %2822, %2825 : i64
    cf.cond_br %2826, ^bb536, ^bb537
  ^bb535:  // pred: ^bb532
    %c1_i32_1590 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1590) : (i32) -> ()
    cf.br ^bb534
  ^bb536:  // 2 preds: ^bb534, ^bb537
    %2827 = llvm.getelementptr %16[%2821] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2819, %2827 {alignment = 1 : i64} : i32, !llvm.ptr
    %2828 = llvm.load %2 : !llvm.ptr -> i32
    %2829 = llvm.load %6 : !llvm.ptr -> i32
    %c244_i64_1591 = arith.constant 244 : i64
    %2830 = arith.extui %2828 : i32 to i64
    %2831 = arith.addi %2830, %c244_i64_1591 : i64
    %c4_i64_1592 = arith.constant 4 : i64
    %2832 = arith.addi %2831, %c4_i64_1592 : i64
    %c0_i32_1593 = arith.constant 0 : i32
    %2833 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1593) : (!llvm.ptr, i32) -> i32
    %2834 = arith.extui %2833 : i32 to i64
    %c65536_i64_1594 = arith.constant 65536 : i64
    %2835 = arith.muli %2834, %c65536_i64_1594 : i64
    %2836 = arith.cmpi ult, %2832, %2835 : i64
    cf.cond_br %2836, ^bb538, ^bb539
  ^bb537:  // pred: ^bb534
    %c1_i32_1595 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1595) : (i32) -> ()
    cf.br ^bb536
  ^bb538:  // 2 preds: ^bb536, ^bb539
    %2837 = llvm.getelementptr %16[%2831] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2829, %2837 {alignment = 1 : i64} : i32, !llvm.ptr
    %2838 = llvm.load %2 : !llvm.ptr -> i32
    %2839 = llvm.load %4 : !llvm.ptr -> i32
    %c240_i64_1596 = arith.constant 240 : i64
    %2840 = arith.extui %2838 : i32 to i64
    %2841 = arith.addi %2840, %c240_i64_1596 : i64
    %c4_i64_1597 = arith.constant 4 : i64
    %2842 = arith.addi %2841, %c4_i64_1597 : i64
    %c0_i32_1598 = arith.constant 0 : i32
    %2843 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1598) : (!llvm.ptr, i32) -> i32
    %2844 = arith.extui %2843 : i32 to i64
    %c65536_i64_1599 = arith.constant 65536 : i64
    %2845 = arith.muli %2844, %c65536_i64_1599 : i64
    %2846 = arith.cmpi ult, %2842, %2845 : i64
    cf.cond_br %2846, ^bb540, ^bb541
  ^bb539:  // pred: ^bb536
    %c1_i32_1600 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1600) : (i32) -> ()
    cf.br ^bb538
  ^bb540:  // 2 preds: ^bb538, ^bb541
    %2847 = llvm.getelementptr %16[%2841] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2839, %2847 {alignment = 1 : i64} : i32, !llvm.ptr
    %2848 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_1601 = arith.constant 16 : i32
    %2849 = arith.addi %2848, %c16_i32_1601 : i32
    %2850 = llvm.load %2 : !llvm.ptr -> i32
    %c240_i32_1602 = arith.constant 240 : i32
    %2851 = arith.addi %2850, %c240_i32_1602 : i32
    call @f48(%arg0, %2849, %2851) : (!llvm.ptr, i32, i32) -> ()
    %2852 = llvm.load %2 : !llvm.ptr -> i32
    %c272_i32_1603 = arith.constant 272 : i32
    %2853 = arith.addi %2852, %c272_i32_1603 : i32
    %c16_i32_1604 = arith.constant 16 : i32
    %2854 = arith.addi %2853, %c16_i32_1604 : i32
    %2855 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_1605 = arith.constant 0 : i64
    %2856 = arith.extui %2855 : i32 to i64
    %2857 = arith.addi %2856, %c0_i64_1605 : i64
    %c8_i64_1606 = arith.constant 8 : i64
    %2858 = arith.addi %2857, %c8_i64_1606 : i64
    %c0_i32_1607 = arith.constant 0 : i32
    %2859 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1607) : (!llvm.ptr, i32) -> i32
    %2860 = arith.extui %2859 : i32 to i64
    %c65536_i64_1608 = arith.constant 65536 : i64
    %2861 = arith.muli %2860, %c65536_i64_1608 : i64
    %2862 = arith.cmpi ult, %2858, %2861 : i64
    cf.cond_br %2862, ^bb542, ^bb543
  ^bb541:  // pred: ^bb538
    %c1_i32_1609 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1609) : (i32) -> ()
    cf.br ^bb540
  ^bb542:  // 2 preds: ^bb540, ^bb543
    %2863 = llvm.getelementptr %16[%2857] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2864 = llvm.load volatile %2863 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1610 = arith.constant 0 : i64
    %2865 = arith.extui %2854 : i32 to i64
    %2866 = arith.addi %2865, %c0_i64_1610 : i64
    %c8_i64_1611 = arith.constant 8 : i64
    %2867 = arith.addi %2866, %c8_i64_1611 : i64
    %c0_i32_1612 = arith.constant 0 : i32
    %2868 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1612) : (!llvm.ptr, i32) -> i32
    %2869 = arith.extui %2868 : i32 to i64
    %c65536_i64_1613 = arith.constant 65536 : i64
    %2870 = arith.muli %2869, %c65536_i64_1613 : i64
    %2871 = arith.cmpi ult, %2867, %2870 : i64
    cf.cond_br %2871, ^bb544, ^bb545
  ^bb543:  // pred: ^bb540
    %c1_i32_1614 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1614) : (i32) -> ()
    cf.br ^bb542
  ^bb544:  // 2 preds: ^bb542, ^bb545
    %2872 = llvm.getelementptr %16[%2866] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2864, %2872 {alignment = 1 : i64} : i64, !llvm.ptr
    %2873 = llvm.load %2 : !llvm.ptr -> i32
    %c272_i32_1615 = arith.constant 272 : i32
    %2874 = arith.addi %2873, %c272_i32_1615 : i32
    %c8_i32_1616 = arith.constant 8 : i32
    %2875 = arith.addi %2874, %c8_i32_1616 : i32
    %2876 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_1617 = arith.constant 0 : i64
    %2877 = arith.extui %2876 : i32 to i64
    %2878 = arith.addi %2877, %c0_i64_1617 : i64
    %c8_i64_1618 = arith.constant 8 : i64
    %2879 = arith.addi %2878, %c8_i64_1618 : i64
    %c0_i32_1619 = arith.constant 0 : i32
    %2880 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1619) : (!llvm.ptr, i32) -> i32
    %2881 = arith.extui %2880 : i32 to i64
    %c65536_i64_1620 = arith.constant 65536 : i64
    %2882 = arith.muli %2881, %c65536_i64_1620 : i64
    %2883 = arith.cmpi ult, %2879, %2882 : i64
    cf.cond_br %2883, ^bb546, ^bb547
  ^bb545:  // pred: ^bb542
    %c1_i32_1621 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1621) : (i32) -> ()
    cf.br ^bb544
  ^bb546:  // 2 preds: ^bb544, ^bb547
    %2884 = llvm.getelementptr %16[%2878] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2885 = llvm.load volatile %2884 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1622 = arith.constant 0 : i64
    %2886 = arith.extui %2875 : i32 to i64
    %2887 = arith.addi %2886, %c0_i64_1622 : i64
    %c8_i64_1623 = arith.constant 8 : i64
    %2888 = arith.addi %2887, %c8_i64_1623 : i64
    %c0_i32_1624 = arith.constant 0 : i32
    %2889 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1624) : (!llvm.ptr, i32) -> i32
    %2890 = arith.extui %2889 : i32 to i64
    %c65536_i64_1625 = arith.constant 65536 : i64
    %2891 = arith.muli %2890, %c65536_i64_1625 : i64
    %2892 = arith.cmpi ult, %2888, %2891 : i64
    cf.cond_br %2892, ^bb548, ^bb549
  ^bb547:  // pred: ^bb544
    %c1_i32_1626 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1626) : (i32) -> ()
    cf.br ^bb546
  ^bb548:  // 2 preds: ^bb546, ^bb549
    %2893 = llvm.getelementptr %16[%2887] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2885, %2893 {alignment = 1 : i64} : i64, !llvm.ptr
    %2894 = llvm.load %2 : !llvm.ptr -> i32
    %2895 = llvm.load %2 : !llvm.ptr -> i32
    %c240_i64_1627 = arith.constant 240 : i64
    %2896 = arith.extui %2895 : i32 to i64
    %2897 = arith.addi %2896, %c240_i64_1627 : i64
    %c8_i64_1628 = arith.constant 8 : i64
    %2898 = arith.addi %2897, %c8_i64_1628 : i64
    %c0_i32_1629 = arith.constant 0 : i32
    %2899 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1629) : (!llvm.ptr, i32) -> i32
    %2900 = arith.extui %2899 : i32 to i64
    %c65536_i64_1630 = arith.constant 65536 : i64
    %2901 = arith.muli %2900, %c65536_i64_1630 : i64
    %2902 = arith.cmpi ult, %2898, %2901 : i64
    cf.cond_br %2902, ^bb550, ^bb551
  ^bb549:  // pred: ^bb546
    %c1_i32_1631 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1631) : (i32) -> ()
    cf.br ^bb548
  ^bb550:  // 2 preds: ^bb548, ^bb551
    %2903 = llvm.getelementptr %16[%2897] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2904 = llvm.load volatile %2903 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %2904, %11 : i64, !llvm.ptr
    %c272_i64_1632 = arith.constant 272 : i64
    %2905 = arith.extui %2894 : i32 to i64
    %2906 = arith.addi %2905, %c272_i64_1632 : i64
    %c8_i64_1633 = arith.constant 8 : i64
    %2907 = arith.addi %2906, %c8_i64_1633 : i64
    %c0_i32_1634 = arith.constant 0 : i32
    %2908 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1634) : (!llvm.ptr, i32) -> i32
    %2909 = arith.extui %2908 : i32 to i64
    %c65536_i64_1635 = arith.constant 65536 : i64
    %2910 = arith.muli %2909, %c65536_i64_1635 : i64
    %2911 = arith.cmpi ult, %2907, %2910 : i64
    cf.cond_br %2911, ^bb552, ^bb553
  ^bb551:  // pred: ^bb548
    %c1_i32_1636 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1636) : (i32) -> ()
    cf.br ^bb550
  ^bb552:  // 2 preds: ^bb550, ^bb553
    %2912 = llvm.getelementptr %16[%2906] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2904, %2912 {alignment = 1 : i64} : i64, !llvm.ptr
    %2913 = llvm.load %2 : !llvm.ptr -> i32
    %c208_i32_1637 = arith.constant 208 : i32
    %2914 = arith.addi %2913, %c208_i32_1637 : i32
    %c8_i32_1638 = arith.constant 8 : i32
    %2915 = arith.addi %2914, %c8_i32_1638 : i32
    %2916 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_1639 = arith.constant 0 : i64
    %2917 = arith.extui %2916 : i32 to i64
    %2918 = arith.addi %2917, %c0_i64_1639 : i64
    %c4_i64_1640 = arith.constant 4 : i64
    %2919 = arith.addi %2918, %c4_i64_1640 : i64
    %c0_i32_1641 = arith.constant 0 : i32
    %2920 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1641) : (!llvm.ptr, i32) -> i32
    %2921 = arith.extui %2920 : i32 to i64
    %c65536_i64_1642 = arith.constant 65536 : i64
    %2922 = arith.muli %2921, %c65536_i64_1642 : i64
    %2923 = arith.cmpi ult, %2919, %2922 : i64
    cf.cond_br %2923, ^bb554, ^bb555
  ^bb553:  // pred: ^bb550
    %c1_i32_1643 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1643) : (i32) -> ()
    cf.br ^bb552
  ^bb554:  // 2 preds: ^bb552, ^bb555
    %2924 = llvm.getelementptr %16[%2918] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2925 = llvm.load volatile %2924 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_1644 = arith.constant 0 : i64
    %2926 = arith.extui %2915 : i32 to i64
    %2927 = arith.addi %2926, %c0_i64_1644 : i64
    %c4_i64_1645 = arith.constant 4 : i64
    %2928 = arith.addi %2927, %c4_i64_1645 : i64
    %c0_i32_1646 = arith.constant 0 : i32
    %2929 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1646) : (!llvm.ptr, i32) -> i32
    %2930 = arith.extui %2929 : i32 to i64
    %c65536_i64_1647 = arith.constant 65536 : i64
    %2931 = arith.muli %2930, %c65536_i64_1647 : i64
    %2932 = arith.cmpi ult, %2928, %2931 : i64
    cf.cond_br %2932, ^bb556, ^bb557
  ^bb555:  // pred: ^bb552
    %c1_i32_1648 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1648) : (i32) -> ()
    cf.br ^bb554
  ^bb556:  // 2 preds: ^bb554, ^bb557
    %2933 = llvm.getelementptr %16[%2927] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2925, %2933 {alignment = 1 : i64} : i32, !llvm.ptr
    %2934 = llvm.load %2 : !llvm.ptr -> i32
    %2935 = llvm.load %11 : !llvm.ptr -> i64
    %c208_i64_1649 = arith.constant 208 : i64
    %2936 = arith.extui %2934 : i32 to i64
    %2937 = arith.addi %2936, %c208_i64_1649 : i64
    %c8_i64_1650 = arith.constant 8 : i64
    %2938 = arith.addi %2937, %c8_i64_1650 : i64
    %c0_i32_1651 = arith.constant 0 : i32
    %2939 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1651) : (!llvm.ptr, i32) -> i32
    %2940 = arith.extui %2939 : i32 to i64
    %c65536_i64_1652 = arith.constant 65536 : i64
    %2941 = arith.muli %2940, %c65536_i64_1652 : i64
    %2942 = arith.cmpi ult, %2938, %2941 : i64
    cf.cond_br %2942, ^bb558, ^bb559
  ^bb557:  // pred: ^bb554
    %c1_i32_1653 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1653) : (i32) -> ()
    cf.br ^bb556
  ^bb558:  // 2 preds: ^bb556, ^bb559
    %2943 = llvm.getelementptr %16[%2937] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2935, %2943 {alignment = 1 : i64} : i64, !llvm.ptr
    %2944 = llvm.load %2 : !llvm.ptr -> i32
    %c284_i32 = arith.constant 284 : i32
    %2945 = arith.addi %2944, %c284_i32 : i32
    llvm.store %2945, %3 : i32, !llvm.ptr
    call @f89(%arg0, %2945) : (!llvm.ptr, i32) -> ()
    %2946 = llvm.load %3 : !llvm.ptr -> i32
    call @f90(%arg0, %2946) : (!llvm.ptr, i32) -> ()
    %2947 = llvm.load %2 : !llvm.ptr -> i32
    %c176_i32_1654 = arith.constant 176 : i32
    %2948 = arith.addi %2947, %c176_i32_1654 : i32
    %2949 = llvm.load %2 : !llvm.ptr -> i32
    %c208_i32_1655 = arith.constant 208 : i32
    %2950 = arith.addi %2949, %c208_i32_1655 : i32
    call @f86(%arg0, %2948, %2950) : (!llvm.ptr, i32, i32) -> ()
    %2951 = llvm.load %2 : !llvm.ptr -> i32
    %2952 = llvm.load %2 : !llvm.ptr -> i32
    %c176_i64_1656 = arith.constant 176 : i64
    %2953 = arith.extui %2952 : i32 to i64
    %2954 = arith.addi %2953, %c176_i64_1656 : i64
    %c4_i64_1657 = arith.constant 4 : i64
    %2955 = arith.addi %2954, %c4_i64_1657 : i64
    %c0_i32_1658 = arith.constant 0 : i32
    %2956 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1658) : (!llvm.ptr, i32) -> i32
    %2957 = arith.extui %2956 : i32 to i64
    %c65536_i64_1659 = arith.constant 65536 : i64
    %2958 = arith.muli %2957, %c65536_i64_1659 : i64
    %2959 = arith.cmpi ult, %2955, %2958 : i64
    cf.cond_br %2959, ^bb560, ^bb561
  ^bb559:  // pred: ^bb556
    %c1_i32_1660 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1660) : (i32) -> ()
    cf.br ^bb558
  ^bb560:  // 2 preds: ^bb558, ^bb561
    %2960 = llvm.getelementptr %16[%2954] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2961 = llvm.load volatile %2960 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c280_i64_1661 = arith.constant 280 : i64
    %2962 = arith.extui %2951 : i32 to i64
    %2963 = arith.addi %2962, %c280_i64_1661 : i64
    %c4_i64_1662 = arith.constant 4 : i64
    %2964 = arith.addi %2963, %c4_i64_1662 : i64
    %c0_i32_1663 = arith.constant 0 : i32
    %2965 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1663) : (!llvm.ptr, i32) -> i32
    %2966 = arith.extui %2965 : i32 to i64
    %c65536_i64_1664 = arith.constant 65536 : i64
    %2967 = arith.muli %2966, %c65536_i64_1664 : i64
    %2968 = arith.cmpi ult, %2964, %2967 : i64
    cf.cond_br %2968, ^bb562, ^bb563
  ^bb561:  // pred: ^bb558
    %c1_i32_1665 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1665) : (i32) -> ()
    cf.br ^bb560
  ^bb562:  // 2 preds: ^bb560, ^bb563
    %2969 = llvm.getelementptr %16[%2963] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2961, %2969 {alignment = 1 : i64} : i32, !llvm.ptr
    %2970 = llvm.load %2 : !llvm.ptr -> i32
    %2971 = llvm.load %2 : !llvm.ptr -> i32
    %c180_i64 = arith.constant 180 : i64
    %2972 = arith.extui %2971 : i32 to i64
    %2973 = arith.addi %2972, %c180_i64 : i64
    %c4_i64_1666 = arith.constant 4 : i64
    %2974 = arith.addi %2973, %c4_i64_1666 : i64
    %c0_i32_1667 = arith.constant 0 : i32
    %2975 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1667) : (!llvm.ptr, i32) -> i32
    %2976 = arith.extui %2975 : i32 to i64
    %c65536_i64_1668 = arith.constant 65536 : i64
    %2977 = arith.muli %2976, %c65536_i64_1668 : i64
    %2978 = arith.cmpi ult, %2974, %2977 : i64
    cf.cond_br %2978, ^bb564, ^bb565
  ^bb563:  // pred: ^bb560
    %c1_i32_1669 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1669) : (i32) -> ()
    cf.br ^bb562
  ^bb564:  // 2 preds: ^bb562, ^bb565
    %2979 = llvm.getelementptr %16[%2973] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2980 = llvm.load volatile %2979 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %2980, %3 : i32, !llvm.ptr
    %c272_i64_1670 = arith.constant 272 : i64
    %2981 = arith.extui %2970 : i32 to i64
    %2982 = arith.addi %2981, %c272_i64_1670 : i64
    %c4_i64_1671 = arith.constant 4 : i64
    %2983 = arith.addi %2982, %c4_i64_1671 : i64
    %c0_i32_1672 = arith.constant 0 : i32
    %2984 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1672) : (!llvm.ptr, i32) -> i32
    %2985 = arith.extui %2984 : i32 to i64
    %c65536_i64_1673 = arith.constant 65536 : i64
    %2986 = arith.muli %2985, %c65536_i64_1673 : i64
    %2987 = arith.cmpi ult, %2983, %2986 : i64
    cf.cond_br %2987, ^bb566, ^bb567
  ^bb565:  // pred: ^bb562
    %c1_i32_1674 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1674) : (i32) -> ()
    cf.br ^bb564
  ^bb566:  // 2 preds: ^bb564, ^bb567
    %2988 = llvm.getelementptr %16[%2982] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2980, %2988 {alignment = 1 : i64} : i32, !llvm.ptr
    %2989 = llvm.load %2 : !llvm.ptr -> i32
    %2990 = llvm.load %3 : !llvm.ptr -> i32
    %2991 = llvm.load %2 : !llvm.ptr -> i32
    %c184_i64 = arith.constant 184 : i64
    %2992 = arith.extui %2991 : i32 to i64
    %2993 = arith.addi %2992, %c184_i64 : i64
    %c4_i64_1675 = arith.constant 4 : i64
    %2994 = arith.addi %2993, %c4_i64_1675 : i64
    %c0_i32_1676 = arith.constant 0 : i32
    %2995 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1676) : (!llvm.ptr, i32) -> i32
    %2996 = arith.extui %2995 : i32 to i64
    %c65536_i64_1677 = arith.constant 65536 : i64
    %2997 = arith.muli %2996, %c65536_i64_1677 : i64
    %2998 = arith.cmpi ult, %2994, %2997 : i64
    cf.cond_br %2998, ^bb568, ^bb569
  ^bb567:  // pred: ^bb564
    %c1_i32_1678 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1678) : (i32) -> ()
    cf.br ^bb566
  ^bb568:  // 2 preds: ^bb566, ^bb569
    %2999 = llvm.getelementptr %16[%2993] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %3000 = llvm.load volatile %2999 {alignment = 1 : i64} : !llvm.ptr -> i32
    %3001 = arith.addi %2990, %3000 : i32
    %c284_i64_1679 = arith.constant 284 : i64
    %3002 = arith.extui %2989 : i32 to i64
    %3003 = arith.addi %3002, %c284_i64_1679 : i64
    %c4_i64_1680 = arith.constant 4 : i64
    %3004 = arith.addi %3003, %c4_i64_1680 : i64
    %c0_i32_1681 = arith.constant 0 : i32
    %3005 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1681) : (!llvm.ptr, i32) -> i32
    %3006 = arith.extui %3005 : i32 to i64
    %c65536_i64_1682 = arith.constant 65536 : i64
    %3007 = arith.muli %3006, %c65536_i64_1682 : i64
    %3008 = arith.cmpi ult, %3004, %3007 : i64
    cf.cond_br %3008, ^bb570, ^bb571
  ^bb569:  // pred: ^bb566
    %c1_i32_1683 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1683) : (i32) -> ()
    cf.br ^bb568
  ^bb570:  // 2 preds: ^bb568, ^bb571
    %3009 = llvm.getelementptr %16[%3003] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %3001, %3009 {alignment = 1 : i64} : i32, !llvm.ptr
    %3010 = llvm.load %2 : !llvm.ptr -> i32
    %3011 = llvm.load %3 : !llvm.ptr -> i32
    %c276_i64_1684 = arith.constant 276 : i64
    %3012 = arith.extui %3010 : i32 to i64
    %3013 = arith.addi %3012, %c276_i64_1684 : i64
    %c4_i64_1685 = arith.constant 4 : i64
    %3014 = arith.addi %3013, %c4_i64_1685 : i64
    %c0_i32_1686 = arith.constant 0 : i32
    %3015 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1686) : (!llvm.ptr, i32) -> i32
    %3016 = arith.extui %3015 : i32 to i64
    %c65536_i64_1687 = arith.constant 65536 : i64
    %3017 = arith.muli %3016, %c65536_i64_1687 : i64
    %3018 = arith.cmpi ult, %3014, %3017 : i64
    cf.cond_br %3018, ^bb572, ^bb573
  ^bb571:  // pred: ^bb568
    %c1_i32_1688 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1688) : (i32) -> ()
    cf.br ^bb570
  ^bb572:  // 2 preds: ^bb570, ^bb573
    %3019 = llvm.getelementptr %16[%3013] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %3011, %3019 {alignment = 1 : i64} : i32, !llvm.ptr
    %3020 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i32_1689 = arith.constant 4 : i32
    %3021 = arith.addi %3020, %c4_i32_1689 : i32
    %3022 = llvm.load %2 : !llvm.ptr -> i32
    %c272_i32_1690 = arith.constant 272 : i32
    %3023 = arith.addi %3022, %c272_i32_1690 : i32
    call @f83(%arg0, %3021, %3023) : (!llvm.ptr, i32, i32) -> ()
    %3024 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_1691 = arith.constant 8 : i32
    %3025 = arith.addi %3024, %c8_i32_1691 : i32
    %3026 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i32_1692 = arith.constant 4 : i32
    %3027 = arith.addi %3026, %c4_i32_1692 : i32
    %c8_i32_1693 = arith.constant 8 : i32
    %3028 = arith.addi %3027, %c8_i32_1693 : i32
    %c0_i64_1694 = arith.constant 0 : i64
    %3029 = arith.extui %3028 : i32 to i64
    %3030 = arith.addi %3029, %c0_i64_1694 : i64
    %c4_i64_1695 = arith.constant 4 : i64
    %3031 = arith.addi %3030, %c4_i64_1695 : i64
    %c0_i32_1696 = arith.constant 0 : i32
    %3032 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1696) : (!llvm.ptr, i32) -> i32
    %3033 = arith.extui %3032 : i32 to i64
    %c65536_i64_1697 = arith.constant 65536 : i64
    %3034 = arith.muli %3033, %c65536_i64_1697 : i64
    %3035 = arith.cmpi ult, %3031, %3034 : i64
    cf.cond_br %3035, ^bb574, ^bb575
  ^bb573:  // pred: ^bb570
    %c1_i32_1698 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1698) : (i32) -> ()
    cf.br ^bb572
  ^bb574:  // 2 preds: ^bb572, ^bb575
    %3036 = llvm.getelementptr %16[%3030] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %3037 = llvm.load volatile %3036 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_1699 = arith.constant 0 : i64
    %3038 = arith.extui %3025 : i32 to i64
    %3039 = arith.addi %3038, %c0_i64_1699 : i64
    %c4_i64_1700 = arith.constant 4 : i64
    %3040 = arith.addi %3039, %c4_i64_1700 : i64
    %c0_i32_1701 = arith.constant 0 : i32
    %3041 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1701) : (!llvm.ptr, i32) -> i32
    %3042 = arith.extui %3041 : i32 to i64
    %c65536_i64_1702 = arith.constant 65536 : i64
    %3043 = arith.muli %3042, %c65536_i64_1702 : i64
    %3044 = arith.cmpi ult, %3040, %3043 : i64
    cf.cond_br %3044, ^bb576, ^bb577
  ^bb575:  // pred: ^bb572
    %c1_i32_1703 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1703) : (i32) -> ()
    cf.br ^bb574
  ^bb576:  // 2 preds: ^bb574, ^bb577
    %3045 = llvm.getelementptr %16[%3039] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %3037, %3045 {alignment = 1 : i64} : i32, !llvm.ptr
    %3046 = llvm.load %0 : !llvm.ptr -> i32
    %3047 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_1704 = arith.constant 4 : i64
    %3048 = arith.extui %3047 : i32 to i64
    %3049 = arith.addi %3048, %c4_i64_1704 : i64
    %c8_i64_1705 = arith.constant 8 : i64
    %3050 = arith.addi %3049, %c8_i64_1705 : i64
    %c0_i32_1706 = arith.constant 0 : i32
    %3051 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1706) : (!llvm.ptr, i32) -> i32
    %3052 = arith.extui %3051 : i32 to i64
    %c65536_i64_1707 = arith.constant 65536 : i64
    %3053 = arith.muli %3052, %c65536_i64_1707 : i64
    %3054 = arith.cmpi ult, %3050, %3053 : i64
    cf.cond_br %3054, ^bb578, ^bb579
  ^bb577:  // pred: ^bb574
    %c1_i32_1708 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1708) : (i32) -> ()
    cf.br ^bb576
  ^bb578:  // 2 preds: ^bb576, ^bb579
    %3055 = llvm.getelementptr %16[%3049] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %3056 = llvm.load volatile %3055 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1709 = arith.constant 0 : i64
    %3057 = arith.extui %3046 : i32 to i64
    %3058 = arith.addi %3057, %c0_i64_1709 : i64
    %c8_i64_1710 = arith.constant 8 : i64
    %3059 = arith.addi %3058, %c8_i64_1710 : i64
    %c0_i32_1711 = arith.constant 0 : i32
    %3060 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1711) : (!llvm.ptr, i32) -> i32
    %3061 = arith.extui %3060 : i32 to i64
    %c65536_i64_1712 = arith.constant 65536 : i64
    %3062 = arith.muli %3061, %c65536_i64_1712 : i64
    %3063 = arith.cmpi ult, %3059, %3062 : i64
    cf.cond_br %3063, ^bb580, ^bb581
  ^bb579:  // pred: ^bb576
    %c1_i32_1713 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1713) : (i32) -> ()
    cf.br ^bb578
  ^bb580:  // 2 preds: ^bb578, ^bb581
    %3064 = llvm.getelementptr %16[%3058] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %3056, %3064 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb7
  ^bb581:  // pred: ^bb578
    %c1_i32_1714 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1714) : (i32) -> ()
    cf.br ^bb580
  ^bb582:  // 2 preds: ^bb6, ^bb583
    %3065 = llvm.getelementptr %16[%59] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %3066 = llvm.load volatile %3065 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f143(%arg0, %56, %3066) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb583:  // pred: ^bb6
    %c1_i32_1715 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1715) : (i32) -> ()
    cf.br ^bb582
  ^bb584:  // 2 preds: ^bb5, ^bb585
    %3067 = llvm.getelementptr %16[%50] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %3068 = llvm.load volatile %3067 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f143(%arg0, %47, %3068) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb585:  // pred: ^bb5
    %c1_i32_1716 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1716) : (i32) -> ()
    cf.br ^bb584
  ^bb586:  // 2 preds: ^bb4, ^bb587
    %3069 = llvm.getelementptr %16[%41] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %3070 = llvm.load volatile %3069 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f143(%arg0, %38, %3070) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb587:  // pred: ^bb4
    %c1_i32_1717 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1717) : (i32) -> ()
    cf.br ^bb586
  ^bb588:  // 2 preds: ^bb3, ^bb589
    %3071 = llvm.getelementptr %16[%32] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %3072 = llvm.load volatile %3071 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f143(%arg0, %29, %3072) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb589:  // pred: ^bb3
    %c1_i32_1718 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1718) : (i32) -> ()
    cf.br ^bb588
  }
  func.func @f17(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %9 : i64, !llvm.ptr
    %10 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.getelementptr %12[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %15 = llvm.load %11 : !llvm.ptr -> i32
    %c224_i32 = arith.constant 224 : i32
    %16 = arith.subi %15, %c224_i32 : i32
    llvm.store %16, %3 : i32, !llvm.ptr
    llvm.store %16, %11 : i32, !llvm.ptr
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    llvm.store %c-2147483648_i32, %4 : i32, !llvm.ptr
    %17 = llvm.load %3 : !llvm.ptr -> i32
    %c-2147483648_i32_9 = arith.constant -2147483648 : i32
    %c4_i64 = arith.constant 4 : i64
    %18 = arith.extui %17 : i32 to i64
    %19 = arith.addi %18, %c4_i64 : i64
    %c4_i64_10 = arith.constant 4 : i64
    %20 = arith.addi %19, %c4_i64_10 : i64
    %c0_i32_11 = arith.constant 0 : i32
    %21 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_11) : (!llvm.ptr, i32) -> i32
    %22 = arith.extui %21 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %23 = arith.muli %22, %c65536_i64 : i64
    %24 = arith.cmpi ult, %20, %23 : i64
    cf.cond_br %24, ^bb3, ^bb4
  ^bb2:  // pred: ^bb5
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %25 = llvm.getelementptr %14[%19] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-2147483648_i32_9, %25 {alignment = 1 : i64} : i32, !llvm.ptr
    %26 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %27 = arith.cmpi ult, %26, %c32_i32 : i32
    %28 = arith.extui %27 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %29 = arith.cmpi ne, %28, %c0_i32_12 : i32
    cf.cond_br %29, ^bb6, ^bb7
  ^bb4:  // pred: ^bb1
    %c1_i32_13 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_13) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb148, ^bb164
    %30 = llvm.load %3 : !llvm.ptr -> i32
    %c224_i32_14 = arith.constant 224 : i32
    %31 = arith.addi %30, %c224_i32_14 : i32
    llvm.store %31, %11 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb6:  // 4 preds: ^bb3, ^bb14, ^bb20, ^bb109
    %32 = llvm.load %3 : !llvm.ptr -> i32
    %33 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %34 = arith.extui %32 : i32 to i64
    %35 = arith.addi %34, %c8_i64 : i64
    %c4_i64_15 = arith.constant 4 : i64
    %36 = arith.addi %35, %c4_i64_15 : i64
    %c0_i32_16 = arith.constant 0 : i32
    %37 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_16) : (!llvm.ptr, i32) -> i32
    %38 = arith.extui %37 : i32 to i64
    %c65536_i64_17 = arith.constant 65536 : i64
    %39 = arith.muli %38, %c65536_i64_17 : i64
    %40 = arith.cmpi ult, %36, %39 : i64
    cf.cond_br %40, ^bb150, ^bb151
  ^bb7:  // pred: ^bb3
    %41 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %42 = arith.addi %41, %c4_i32 : i32
    call @f36(%arg0, %42) : (!llvm.ptr, i32) -> ()
    %43 = llvm.load %1 : !llvm.ptr -> i32
    %c7_i64 = arith.constant 7 : i64
    %44 = arith.extui %43 : i32 to i64
    %45 = arith.addi %44, %c7_i64 : i64
    %c4_i64_18 = arith.constant 4 : i64
    %46 = arith.addi %45, %c4_i64_18 : i64
    %c0_i32_19 = arith.constant 0 : i32
    %47 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_19) : (!llvm.ptr, i32) -> i32
    %48 = arith.extui %47 : i32 to i64
    %c65536_i64_20 = arith.constant 65536 : i64
    %49 = arith.muli %48, %c65536_i64_20 : i64
    %50 = arith.cmpi ult, %46, %49 : i64
    cf.cond_br %50, ^bb8, ^bb9
  ^bb8:  // 2 preds: ^bb7, ^bb9
    %51 = llvm.getelementptr %14[%45] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %52 = llvm.load volatile %51 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %52, %5 : i32, !llvm.ptr
    %53 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64 = arith.constant 3 : i64
    %54 = arith.extui %53 : i32 to i64
    %55 = arith.addi %54, %c3_i64 : i64
    %c4_i64_21 = arith.constant 4 : i64
    %56 = arith.addi %55, %c4_i64_21 : i64
    %c0_i32_22 = arith.constant 0 : i32
    %57 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_22) : (!llvm.ptr, i32) -> i32
    %58 = arith.extui %57 : i32 to i64
    %c65536_i64_23 = arith.constant 65536 : i64
    %59 = arith.muli %58, %c65536_i64_23 : i64
    %60 = arith.cmpi ult, %56, %59 : i64
    cf.cond_br %60, ^bb10, ^bb11
  ^bb9:  // pred: ^bb7
    %c1_i32_24 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_24) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // 2 preds: ^bb8, ^bb11
    %61 = llvm.getelementptr %14[%55] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %62 = llvm.load volatile %61 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %62, %6 : i32, !llvm.ptr
    %63 = llvm.load %3 : !llvm.ptr -> i32
    %c-2147483648_i32_25 = arith.constant -2147483648 : i32
    %c4_i64_26 = arith.constant 4 : i64
    %64 = arith.extui %63 : i32 to i64
    %65 = arith.addi %64, %c4_i64_26 : i64
    %c4_i64_27 = arith.constant 4 : i64
    %66 = arith.addi %65, %c4_i64_27 : i64
    %c0_i32_28 = arith.constant 0 : i32
    %67 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_28) : (!llvm.ptr, i32) -> i32
    %68 = arith.extui %67 : i32 to i64
    %c65536_i64_29 = arith.constant 65536 : i64
    %69 = arith.muli %68, %c65536_i64_29 : i64
    %70 = arith.cmpi ult, %66, %69 : i64
    cf.cond_br %70, ^bb12, ^bb13
  ^bb11:  // pred: ^bb8
    %c1_i32_30 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_30) : (i32) -> ()
    cf.br ^bb10
  ^bb12:  // 2 preds: ^bb10, ^bb13
    %71 = llvm.getelementptr %14[%65] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-2147483648_i32_25, %71 {alignment = 1 : i64} : i32, !llvm.ptr
    %72 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %73 = arith.cmpi ult, %72, %c64_i32 : i32
    %74 = arith.extui %73 : i1 to i32
    %c0_i32_31 = arith.constant 0 : i32
    %75 = arith.cmpi ne, %74, %c0_i32_31 : i32
    cf.cond_br %75, ^bb14, ^bb15
  ^bb13:  // pred: ^bb10
    %c1_i32_32 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_32) : (i32) -> ()
    cf.br ^bb12
  ^bb14:  // pred: ^bb12
    %c-2147483648_i32_33 = arith.constant -2147483648 : i32
    llvm.store %c-2147483648_i32_33, %4 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb15:  // pred: ^bb12
    %76 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32_34 = arith.constant 4 : i32
    %77 = arith.addi %76, %c4_i32_34 : i32
    call @f36(%arg0, %77) : (!llvm.ptr, i32) -> ()
    %78 = llvm.load %1 : !llvm.ptr -> i32
    %c39_i64 = arith.constant 39 : i64
    %79 = arith.extui %78 : i32 to i64
    %80 = arith.addi %79, %c39_i64 : i64
    %c4_i64_35 = arith.constant 4 : i64
    %81 = arith.addi %80, %c4_i64_35 : i64
    %c0_i32_36 = arith.constant 0 : i32
    %82 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_36) : (!llvm.ptr, i32) -> i32
    %83 = arith.extui %82 : i32 to i64
    %c65536_i64_37 = arith.constant 65536 : i64
    %84 = arith.muli %83, %c65536_i64_37 : i64
    %85 = arith.cmpi ult, %81, %84 : i64
    cf.cond_br %85, ^bb16, ^bb17
  ^bb16:  // 2 preds: ^bb15, ^bb17
    %86 = llvm.getelementptr %14[%80] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %87 = llvm.load volatile %86 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %87, %7 : i32, !llvm.ptr
    %88 = llvm.load %1 : !llvm.ptr -> i32
    %c35_i64 = arith.constant 35 : i64
    %89 = arith.extui %88 : i32 to i64
    %90 = arith.addi %89, %c35_i64 : i64
    %c4_i64_38 = arith.constant 4 : i64
    %91 = arith.addi %90, %c4_i64_38 : i64
    %c0_i32_39 = arith.constant 0 : i32
    %92 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_39) : (!llvm.ptr, i32) -> i32
    %93 = arith.extui %92 : i32 to i64
    %c65536_i64_40 = arith.constant 65536 : i64
    %94 = arith.muli %93, %c65536_i64_40 : i64
    %95 = arith.cmpi ult, %91, %94 : i64
    cf.cond_br %95, ^bb18, ^bb19
  ^bb17:  // pred: ^bb15
    %c1_i32_41 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_41) : (i32) -> ()
    cf.br ^bb16
  ^bb18:  // 2 preds: ^bb16, ^bb19
    %96 = llvm.getelementptr %14[%90] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %97 = llvm.load volatile %96 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %97, %8 : i32, !llvm.ptr
    %c-2147483648_i32_42 = arith.constant -2147483648 : i32
    llvm.store %c-2147483648_i32_42, %4 : i32, !llvm.ptr
    %98 = llvm.load %3 : !llvm.ptr -> i32
    %c-2147483648_i32_43 = arith.constant -2147483648 : i32
    %c4_i64_44 = arith.constant 4 : i64
    %99 = arith.extui %98 : i32 to i64
    %100 = arith.addi %99, %c4_i64_44 : i64
    %c4_i64_45 = arith.constant 4 : i64
    %101 = arith.addi %100, %c4_i64_45 : i64
    %c0_i32_46 = arith.constant 0 : i32
    %102 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_46) : (!llvm.ptr, i32) -> i32
    %103 = arith.extui %102 : i32 to i64
    %c65536_i64_47 = arith.constant 65536 : i64
    %104 = arith.muli %103, %c65536_i64_47 : i64
    %105 = arith.cmpi ult, %101, %104 : i64
    cf.cond_br %105, ^bb20, ^bb21
  ^bb19:  // pred: ^bb16
    %c1_i32_48 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_48) : (i32) -> ()
    cf.br ^bb18
  ^bb20:  // 2 preds: ^bb18, ^bb21
    %106 = llvm.getelementptr %14[%100] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-2147483648_i32_43, %106 {alignment = 1 : i64} : i32, !llvm.ptr
    %107 = llvm.load %2 : !llvm.ptr -> i32
    %c96_i32 = arith.constant 96 : i32
    %108 = arith.cmpi ult, %107, %c96_i32 : i32
    %109 = arith.extui %108 : i1 to i32
    %c0_i32_49 = arith.constant 0 : i32
    %110 = arith.cmpi ne, %109, %c0_i32_49 : i32
    cf.cond_br %110, ^bb6, ^bb22
  ^bb21:  // pred: ^bb18
    %c1_i32_50 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_50) : (i32) -> ()
    cf.br ^bb20
  ^bb22:  // pred: ^bb20
    %111 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32_51 = arith.constant 4 : i32
    %112 = arith.addi %111, %c4_i32_51 : i32
    call @f36(%arg0, %112) : (!llvm.ptr, i32) -> ()
    %113 = llvm.load %3 : !llvm.ptr -> i32
    %c104_i32 = arith.constant 104 : i32
    %114 = arith.addi %113, %c104_i32 : i32
    %c66_i32 = arith.constant 66 : i32
    %115 = arith.addi %114, %c66_i32 : i32
    %116 = llvm.load %1 : !llvm.ptr -> i32
    %c66_i32_52 = arith.constant 66 : i32
    %117 = arith.addi %116, %c66_i32_52 : i32
    %c0_i64_53 = arith.constant 0 : i64
    %118 = arith.extui %117 : i32 to i64
    %119 = arith.addi %118, %c0_i64_53 : i64
    %c1_i64 = arith.constant 1 : i64
    %120 = arith.addi %119, %c1_i64 : i64
    %c0_i32_54 = arith.constant 0 : i32
    %121 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_54) : (!llvm.ptr, i32) -> i32
    %122 = arith.extui %121 : i32 to i64
    %c65536_i64_55 = arith.constant 65536 : i64
    %123 = arith.muli %122, %c65536_i64_55 : i64
    %124 = arith.cmpi ult, %120, %123 : i64
    cf.cond_br %124, ^bb23, ^bb24
  ^bb23:  // 2 preds: ^bb22, ^bb24
    %125 = llvm.getelementptr %14[%119] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %126 = llvm.load volatile %125 {alignment = 1 : i64} : !llvm.ptr -> i8
    %127 = arith.extui %126 : i8 to i32
    %c0_i64_56 = arith.constant 0 : i64
    %128 = arith.extui %115 : i32 to i64
    %129 = arith.addi %128, %c0_i64_56 : i64
    %c1_i64_57 = arith.constant 1 : i64
    %130 = arith.addi %129, %c1_i64_57 : i64
    %c0_i32_58 = arith.constant 0 : i32
    %131 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_58) : (!llvm.ptr, i32) -> i32
    %132 = arith.extui %131 : i32 to i64
    %c65536_i64_59 = arith.constant 65536 : i64
    %133 = arith.muli %132, %c65536_i64_59 : i64
    %134 = arith.cmpi ult, %130, %133 : i64
    cf.cond_br %134, ^bb25, ^bb26
  ^bb24:  // pred: ^bb22
    %c1_i32_60 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_60) : (i32) -> ()
    cf.br ^bb23
  ^bb25:  // 2 preds: ^bb23, ^bb26
    %135 = llvm.getelementptr %14[%129] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %136 = arith.trunci %127 : i32 to i8
    llvm.store volatile %136, %135 {alignment = 1 : i64} : i8, !llvm.ptr
    %137 = llvm.load %3 : !llvm.ptr -> i32
    %c104_i32_61 = arith.constant 104 : i32
    %138 = arith.addi %137, %c104_i32_61 : i32
    %c2_i32 = arith.constant 2 : i32
    %139 = arith.addi %138, %c2_i32 : i32
    %140 = llvm.load %1 : !llvm.ptr -> i32
    %c2_i32_62 = arith.constant 2 : i32
    %141 = arith.addi %140, %c2_i32_62 : i32
    %c0_i64_63 = arith.constant 0 : i64
    %142 = arith.extui %141 : i32 to i64
    %143 = arith.addi %142, %c0_i64_63 : i64
    %c1_i64_64 = arith.constant 1 : i64
    %144 = arith.addi %143, %c1_i64_64 : i64
    %c0_i32_65 = arith.constant 0 : i32
    %145 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_65) : (!llvm.ptr, i32) -> i32
    %146 = arith.extui %145 : i32 to i64
    %c65536_i64_66 = arith.constant 65536 : i64
    %147 = arith.muli %146, %c65536_i64_66 : i64
    %148 = arith.cmpi ult, %144, %147 : i64
    cf.cond_br %148, ^bb27, ^bb28
  ^bb26:  // pred: ^bb23
    %c1_i32_67 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_67) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // 2 preds: ^bb25, ^bb28
    %149 = llvm.getelementptr %14[%143] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %150 = llvm.load volatile %149 {alignment = 1 : i64} : !llvm.ptr -> i8
    %151 = arith.extui %150 : i8 to i32
    %c0_i64_68 = arith.constant 0 : i64
    %152 = arith.extui %139 : i32 to i64
    %153 = arith.addi %152, %c0_i64_68 : i64
    %c1_i64_69 = arith.constant 1 : i64
    %154 = arith.addi %153, %c1_i64_69 : i64
    %c0_i32_70 = arith.constant 0 : i32
    %155 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_70) : (!llvm.ptr, i32) -> i32
    %156 = arith.extui %155 : i32 to i64
    %c65536_i64_71 = arith.constant 65536 : i64
    %157 = arith.muli %156, %c65536_i64_71 : i64
    %158 = arith.cmpi ult, %154, %157 : i64
    cf.cond_br %158, ^bb29, ^bb30
  ^bb28:  // pred: ^bb25
    %c1_i32_72 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_72) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // 2 preds: ^bb27, ^bb30
    %159 = llvm.getelementptr %14[%153] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %160 = arith.trunci %151 : i32 to i8
    llvm.store volatile %160, %159 {alignment = 1 : i64} : i8, !llvm.ptr
    %161 = llvm.load %3 : !llvm.ptr -> i32
    %c104_i32_73 = arith.constant 104 : i32
    %162 = arith.addi %161, %c104_i32_73 : i32
    %c34_i32 = arith.constant 34 : i32
    %163 = arith.addi %162, %c34_i32 : i32
    %164 = llvm.load %1 : !llvm.ptr -> i32
    %c34_i32_74 = arith.constant 34 : i32
    %165 = arith.addi %164, %c34_i32_74 : i32
    %c0_i64_75 = arith.constant 0 : i64
    %166 = arith.extui %165 : i32 to i64
    %167 = arith.addi %166, %c0_i64_75 : i64
    %c1_i64_76 = arith.constant 1 : i64
    %168 = arith.addi %167, %c1_i64_76 : i64
    %c0_i32_77 = arith.constant 0 : i32
    %169 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_77) : (!llvm.ptr, i32) -> i32
    %170 = arith.extui %169 : i32 to i64
    %c65536_i64_78 = arith.constant 65536 : i64
    %171 = arith.muli %170, %c65536_i64_78 : i64
    %172 = arith.cmpi ult, %168, %171 : i64
    cf.cond_br %172, ^bb31, ^bb32
  ^bb30:  // pred: ^bb27
    %c1_i32_79 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_79) : (i32) -> ()
    cf.br ^bb29
  ^bb31:  // 2 preds: ^bb29, ^bb32
    %173 = llvm.getelementptr %14[%167] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %174 = llvm.load volatile %173 {alignment = 1 : i64} : !llvm.ptr -> i8
    %175 = arith.extui %174 : i8 to i32
    %c0_i64_80 = arith.constant 0 : i64
    %176 = arith.extui %163 : i32 to i64
    %177 = arith.addi %176, %c0_i64_80 : i64
    %c1_i64_81 = arith.constant 1 : i64
    %178 = arith.addi %177, %c1_i64_81 : i64
    %c0_i32_82 = arith.constant 0 : i32
    %179 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_82) : (!llvm.ptr, i32) -> i32
    %180 = arith.extui %179 : i32 to i64
    %c65536_i64_83 = arith.constant 65536 : i64
    %181 = arith.muli %180, %c65536_i64_83 : i64
    %182 = arith.cmpi ult, %178, %181 : i64
    cf.cond_br %182, ^bb33, ^bb34
  ^bb32:  // pred: ^bb29
    %c1_i32_84 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_84) : (i32) -> ()
    cf.br ^bb31
  ^bb33:  // 2 preds: ^bb31, ^bb34
    %183 = llvm.getelementptr %14[%177] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %184 = arith.trunci %175 : i32 to i8
    llvm.store volatile %184, %183 {alignment = 1 : i64} : i8, !llvm.ptr
    %185 = llvm.load %3 : !llvm.ptr -> i32
    %c123_i32 = arith.constant 123 : i32
    %186 = arith.addi %185, %c123_i32 : i32
    %187 = llvm.load %1 : !llvm.ptr -> i32
    %c11_i32 = arith.constant 11 : i32
    %188 = arith.addi %187, %c11_i32 : i32
    llvm.store %188, %4 : i32, !llvm.ptr
    %c8_i32 = arith.constant 8 : i32
    %189 = arith.addi %188, %c8_i32 : i32
    %c0_i64_85 = arith.constant 0 : i64
    %190 = arith.extui %189 : i32 to i64
    %191 = arith.addi %190, %c0_i64_85 : i64
    %c8_i64_86 = arith.constant 8 : i64
    %192 = arith.addi %191, %c8_i64_86 : i64
    %c0_i32_87 = arith.constant 0 : i32
    %193 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_87) : (!llvm.ptr, i32) -> i32
    %194 = arith.extui %193 : i32 to i64
    %c65536_i64_88 = arith.constant 65536 : i64
    %195 = arith.muli %194, %c65536_i64_88 : i64
    %196 = arith.cmpi ult, %192, %195 : i64
    cf.cond_br %196, ^bb35, ^bb36
  ^bb34:  // pred: ^bb31
    %c1_i32_89 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_89) : (i32) -> ()
    cf.br ^bb33
  ^bb35:  // 2 preds: ^bb33, ^bb36
    %197 = llvm.getelementptr %14[%191] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %198 = llvm.load volatile %197 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_90 = arith.constant 0 : i64
    %199 = arith.extui %186 : i32 to i64
    %200 = arith.addi %199, %c0_i64_90 : i64
    %c8_i64_91 = arith.constant 8 : i64
    %201 = arith.addi %200, %c8_i64_91 : i64
    %c0_i32_92 = arith.constant 0 : i32
    %202 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_92) : (!llvm.ptr, i32) -> i32
    %203 = arith.extui %202 : i32 to i64
    %c65536_i64_93 = arith.constant 65536 : i64
    %204 = arith.muli %203, %c65536_i64_93 : i64
    %205 = arith.cmpi ult, %201, %204 : i64
    cf.cond_br %205, ^bb37, ^bb38
  ^bb36:  // pred: ^bb33
    %c1_i32_94 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_94) : (i32) -> ()
    cf.br ^bb35
  ^bb37:  // 2 preds: ^bb35, ^bb38
    %206 = llvm.getelementptr %14[%200] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %198, %206 {alignment = 1 : i64} : i64, !llvm.ptr
    %207 = llvm.load %3 : !llvm.ptr -> i32
    %208 = llvm.load %1 : !llvm.ptr -> i32
    %c64_i64 = arith.constant 64 : i64
    %209 = arith.extui %208 : i32 to i64
    %210 = arith.addi %209, %c64_i64 : i64
    %c2_i64 = arith.constant 2 : i64
    %211 = arith.addi %210, %c2_i64 : i64
    %c0_i32_95 = arith.constant 0 : i32
    %212 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_95) : (!llvm.ptr, i32) -> i32
    %213 = arith.extui %212 : i32 to i64
    %c65536_i64_96 = arith.constant 65536 : i64
    %214 = arith.muli %213, %c65536_i64_96 : i64
    %215 = arith.cmpi ult, %211, %214 : i64
    cf.cond_br %215, ^bb39, ^bb40
  ^bb38:  // pred: ^bb35
    %c1_i32_97 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_97) : (i32) -> ()
    cf.br ^bb37
  ^bb39:  // 2 preds: ^bb37, ^bb40
    %216 = llvm.getelementptr %14[%210] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %217 = llvm.load volatile %216 {alignment = 1 : i64} : !llvm.ptr -> i16
    %218 = arith.extui %217 : i16 to i32
    %c168_i64 = arith.constant 168 : i64
    %219 = arith.extui %207 : i32 to i64
    %220 = arith.addi %219, %c168_i64 : i64
    %c2_i64_98 = arith.constant 2 : i64
    %221 = arith.addi %220, %c2_i64_98 : i64
    %c0_i32_99 = arith.constant 0 : i32
    %222 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_99) : (!llvm.ptr, i32) -> i32
    %223 = arith.extui %222 : i32 to i64
    %c65536_i64_100 = arith.constant 65536 : i64
    %224 = arith.muli %223, %c65536_i64_100 : i64
    %225 = arith.cmpi ult, %221, %224 : i64
    cf.cond_br %225, ^bb41, ^bb42
  ^bb40:  // pred: ^bb37
    %c1_i32_101 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_101) : (i32) -> ()
    cf.br ^bb39
  ^bb41:  // 2 preds: ^bb39, ^bb42
    %226 = llvm.getelementptr %14[%220] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %227 = arith.trunci %218 : i32 to i16
    llvm.store volatile %227, %226 {alignment = 1 : i64} : i16, !llvm.ptr
    %228 = llvm.load %3 : !llvm.ptr -> i32
    %229 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_102 = arith.constant 0 : i64
    %230 = arith.extui %229 : i32 to i64
    %231 = arith.addi %230, %c0_i64_102 : i64
    %c2_i64_103 = arith.constant 2 : i64
    %232 = arith.addi %231, %c2_i64_103 : i64
    %c0_i32_104 = arith.constant 0 : i32
    %233 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_104) : (!llvm.ptr, i32) -> i32
    %234 = arith.extui %233 : i32 to i64
    %c65536_i64_105 = arith.constant 65536 : i64
    %235 = arith.muli %234, %c65536_i64_105 : i64
    %236 = arith.cmpi ult, %232, %235 : i64
    cf.cond_br %236, ^bb43, ^bb44
  ^bb42:  // pred: ^bb39
    %c1_i32_106 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_106) : (i32) -> ()
    cf.br ^bb41
  ^bb43:  // 2 preds: ^bb41, ^bb44
    %237 = llvm.getelementptr %14[%231] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %238 = llvm.load volatile %237 {alignment = 1 : i64} : !llvm.ptr -> i16
    %239 = arith.extui %238 : i16 to i32
    %c104_i64 = arith.constant 104 : i64
    %240 = arith.extui %228 : i32 to i64
    %241 = arith.addi %240, %c104_i64 : i64
    %c2_i64_107 = arith.constant 2 : i64
    %242 = arith.addi %241, %c2_i64_107 : i64
    %c0_i32_108 = arith.constant 0 : i32
    %243 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_108) : (!llvm.ptr, i32) -> i32
    %244 = arith.extui %243 : i32 to i64
    %c65536_i64_109 = arith.constant 65536 : i64
    %245 = arith.muli %244, %c65536_i64_109 : i64
    %246 = arith.cmpi ult, %242, %245 : i64
    cf.cond_br %246, ^bb45, ^bb46
  ^bb44:  // pred: ^bb41
    %c1_i32_110 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_110) : (i32) -> ()
    cf.br ^bb43
  ^bb45:  // 2 preds: ^bb43, ^bb46
    %247 = llvm.getelementptr %14[%241] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %248 = arith.trunci %239 : i32 to i16
    llvm.store volatile %248, %247 {alignment = 1 : i64} : i16, !llvm.ptr
    %249 = llvm.load %3 : !llvm.ptr -> i32
    %250 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i64 = arith.constant 32 : i64
    %251 = arith.extui %250 : i32 to i64
    %252 = arith.addi %251, %c32_i64 : i64
    %c2_i64_111 = arith.constant 2 : i64
    %253 = arith.addi %252, %c2_i64_111 : i64
    %c0_i32_112 = arith.constant 0 : i32
    %254 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_112) : (!llvm.ptr, i32) -> i32
    %255 = arith.extui %254 : i32 to i64
    %c65536_i64_113 = arith.constant 65536 : i64
    %256 = arith.muli %255, %c65536_i64_113 : i64
    %257 = arith.cmpi ult, %253, %256 : i64
    cf.cond_br %257, ^bb47, ^bb48
  ^bb46:  // pred: ^bb43
    %c1_i32_114 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_114) : (i32) -> ()
    cf.br ^bb45
  ^bb47:  // 2 preds: ^bb45, ^bb48
    %258 = llvm.getelementptr %14[%252] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %259 = llvm.load volatile %258 {alignment = 1 : i64} : !llvm.ptr -> i16
    %260 = arith.extui %259 : i16 to i32
    %c136_i64 = arith.constant 136 : i64
    %261 = arith.extui %249 : i32 to i64
    %262 = arith.addi %261, %c136_i64 : i64
    %c2_i64_115 = arith.constant 2 : i64
    %263 = arith.addi %262, %c2_i64_115 : i64
    %c0_i32_116 = arith.constant 0 : i32
    %264 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_116) : (!llvm.ptr, i32) -> i32
    %265 = arith.extui %264 : i32 to i64
    %c65536_i64_117 = arith.constant 65536 : i64
    %266 = arith.muli %265, %c65536_i64_117 : i64
    %267 = arith.cmpi ult, %263, %266 : i64
    cf.cond_br %267, ^bb49, ^bb50
  ^bb48:  // pred: ^bb45
    %c1_i32_118 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_118) : (i32) -> ()
    cf.br ^bb47
  ^bb49:  // 2 preds: ^bb47, ^bb50
    %268 = llvm.getelementptr %14[%262] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %269 = arith.trunci %260 : i32 to i16
    llvm.store volatile %269, %268 {alignment = 1 : i64} : i16, !llvm.ptr
    %270 = llvm.load %3 : !llvm.ptr -> i32
    %271 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_119 = arith.constant 0 : i64
    %272 = arith.extui %271 : i32 to i64
    %273 = arith.addi %272, %c0_i64_119 : i64
    %c8_i64_120 = arith.constant 8 : i64
    %274 = arith.addi %273, %c8_i64_120 : i64
    %c0_i32_121 = arith.constant 0 : i32
    %275 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_121) : (!llvm.ptr, i32) -> i32
    %276 = arith.extui %275 : i32 to i64
    %c65536_i64_122 = arith.constant 65536 : i64
    %277 = arith.muli %276, %c65536_i64_122 : i64
    %278 = arith.cmpi ult, %274, %277 : i64
    cf.cond_br %278, ^bb51, ^bb52
  ^bb50:  // pred: ^bb47
    %c1_i32_123 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_123) : (i32) -> ()
    cf.br ^bb49
  ^bb51:  // 2 preds: ^bb49, ^bb52
    %279 = llvm.getelementptr %14[%273] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %280 = llvm.load volatile %279 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c115_i64 = arith.constant 115 : i64
    %281 = arith.extui %270 : i32 to i64
    %282 = arith.addi %281, %c115_i64 : i64
    %c8_i64_124 = arith.constant 8 : i64
    %283 = arith.addi %282, %c8_i64_124 : i64
    %c0_i32_125 = arith.constant 0 : i32
    %284 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_125) : (!llvm.ptr, i32) -> i32
    %285 = arith.extui %284 : i32 to i64
    %c65536_i64_126 = arith.constant 65536 : i64
    %286 = arith.muli %285, %c65536_i64_126 : i64
    %287 = arith.cmpi ult, %283, %286 : i64
    cf.cond_br %287, ^bb53, ^bb54
  ^bb52:  // pred: ^bb49
    %c1_i32_127 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_127) : (i32) -> ()
    cf.br ^bb51
  ^bb53:  // 2 preds: ^bb51, ^bb54
    %288 = llvm.getelementptr %14[%282] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %280, %288 {alignment = 1 : i64} : i64, !llvm.ptr
    %289 = llvm.load %1 : !llvm.ptr -> i32
    %c67_i64 = arith.constant 67 : i64
    %290 = arith.extui %289 : i32 to i64
    %291 = arith.addi %290, %c67_i64 : i64
    %c8_i64_128 = arith.constant 8 : i64
    %292 = arith.addi %291, %c8_i64_128 : i64
    %c0_i32_129 = arith.constant 0 : i32
    %293 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_129) : (!llvm.ptr, i32) -> i32
    %294 = arith.extui %293 : i32 to i64
    %c65536_i64_130 = arith.constant 65536 : i64
    %295 = arith.muli %294, %c65536_i64_130 : i64
    %296 = arith.cmpi ult, %292, %295 : i64
    cf.cond_br %296, ^bb55, ^bb56
  ^bb54:  // pred: ^bb51
    %c1_i32_131 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_131) : (i32) -> ()
    cf.br ^bb53
  ^bb55:  // 2 preds: ^bb53, ^bb56
    %297 = llvm.getelementptr %14[%291] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %298 = llvm.load volatile %297 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %298, %9 : i64, !llvm.ptr
    %299 = llvm.load %3 : !llvm.ptr -> i32
    %c135_i32 = arith.constant 135 : i32
    %300 = arith.addi %299, %c135_i32 : i32
    %301 = llvm.load %1 : !llvm.ptr -> i32
    %c27_i32 = arith.constant 27 : i32
    %302 = arith.addi %301, %c27_i32 : i32
    llvm.store %302, %4 : i32, !llvm.ptr
    %c4_i32_132 = arith.constant 4 : i32
    %303 = arith.addi %302, %c4_i32_132 : i32
    %c0_i64_133 = arith.constant 0 : i64
    %304 = arith.extui %303 : i32 to i64
    %305 = arith.addi %304, %c0_i64_133 : i64
    %c1_i64_134 = arith.constant 1 : i64
    %306 = arith.addi %305, %c1_i64_134 : i64
    %c0_i32_135 = arith.constant 0 : i32
    %307 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_135) : (!llvm.ptr, i32) -> i32
    %308 = arith.extui %307 : i32 to i64
    %c65536_i64_136 = arith.constant 65536 : i64
    %309 = arith.muli %308, %c65536_i64_136 : i64
    %310 = arith.cmpi ult, %306, %309 : i64
    cf.cond_br %310, ^bb57, ^bb58
  ^bb56:  // pred: ^bb53
    %c1_i32_137 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_137) : (i32) -> ()
    cf.br ^bb55
  ^bb57:  // 2 preds: ^bb55, ^bb58
    %311 = llvm.getelementptr %14[%305] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %312 = llvm.load volatile %311 {alignment = 1 : i64} : !llvm.ptr -> i8
    %313 = arith.extui %312 : i8 to i32
    %c0_i64_138 = arith.constant 0 : i64
    %314 = arith.extui %300 : i32 to i64
    %315 = arith.addi %314, %c0_i64_138 : i64
    %c1_i64_139 = arith.constant 1 : i64
    %316 = arith.addi %315, %c1_i64_139 : i64
    %c0_i32_140 = arith.constant 0 : i32
    %317 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_140) : (!llvm.ptr, i32) -> i32
    %318 = arith.extui %317 : i32 to i64
    %c65536_i64_141 = arith.constant 65536 : i64
    %319 = arith.muli %318, %c65536_i64_141 : i64
    %320 = arith.cmpi ult, %316, %319 : i64
    cf.cond_br %320, ^bb59, ^bb60
  ^bb58:  // pred: ^bb55
    %c1_i32_142 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_142) : (i32) -> ()
    cf.br ^bb57
  ^bb59:  // 2 preds: ^bb57, ^bb60
    %321 = llvm.getelementptr %14[%315] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %322 = arith.trunci %313 : i32 to i8
    llvm.store volatile %322, %321 {alignment = 1 : i64} : i8, !llvm.ptr
    %323 = llvm.load %3 : !llvm.ptr -> i32
    %c104_i32_143 = arith.constant 104 : i32
    %324 = arith.addi %323, %c104_i32_143 : i32
    %c51_i32 = arith.constant 51 : i32
    %325 = arith.addi %324, %c51_i32 : i32
    %326 = llvm.load %1 : !llvm.ptr -> i32
    %c51_i32_144 = arith.constant 51 : i32
    %327 = arith.addi %326, %c51_i32_144 : i32
    %c0_i64_145 = arith.constant 0 : i64
    %328 = arith.extui %327 : i32 to i64
    %329 = arith.addi %328, %c0_i64_145 : i64
    %c8_i64_146 = arith.constant 8 : i64
    %330 = arith.addi %329, %c8_i64_146 : i64
    %c0_i32_147 = arith.constant 0 : i32
    %331 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_147) : (!llvm.ptr, i32) -> i32
    %332 = arith.extui %331 : i32 to i64
    %c65536_i64_148 = arith.constant 65536 : i64
    %333 = arith.muli %332, %c65536_i64_148 : i64
    %334 = arith.cmpi ult, %330, %333 : i64
    cf.cond_br %334, ^bb61, ^bb62
  ^bb60:  // pred: ^bb57
    %c1_i32_149 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_149) : (i32) -> ()
    cf.br ^bb59
  ^bb61:  // 2 preds: ^bb59, ^bb62
    %335 = llvm.getelementptr %14[%329] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %336 = llvm.load volatile %335 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_150 = arith.constant 0 : i64
    %337 = arith.extui %325 : i32 to i64
    %338 = arith.addi %337, %c0_i64_150 : i64
    %c8_i64_151 = arith.constant 8 : i64
    %339 = arith.addi %338, %c8_i64_151 : i64
    %c0_i32_152 = arith.constant 0 : i32
    %340 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_152) : (!llvm.ptr, i32) -> i32
    %341 = arith.extui %340 : i32 to i64
    %c65536_i64_153 = arith.constant 65536 : i64
    %342 = arith.muli %341, %c65536_i64_153 : i64
    %343 = arith.cmpi ult, %339, %342 : i64
    cf.cond_br %343, ^bb63, ^bb64
  ^bb62:  // pred: ^bb59
    %c1_i32_154 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_154) : (i32) -> ()
    cf.br ^bb61
  ^bb63:  // 2 preds: ^bb61, ^bb64
    %344 = llvm.getelementptr %14[%338] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %336, %344 {alignment = 1 : i64} : i64, !llvm.ptr
    %345 = llvm.load %3 : !llvm.ptr -> i32
    %c104_i32_155 = arith.constant 104 : i32
    %346 = arith.addi %345, %c104_i32_155 : i32
    %c63_i32 = arith.constant 63 : i32
    %347 = arith.addi %346, %c63_i32 : i32
    %348 = llvm.load %1 : !llvm.ptr -> i32
    %c63_i32_156 = arith.constant 63 : i32
    %349 = arith.addi %348, %c63_i32_156 : i32
    %c0_i64_157 = arith.constant 0 : i64
    %350 = arith.extui %349 : i32 to i64
    %351 = arith.addi %350, %c0_i64_157 : i64
    %c1_i64_158 = arith.constant 1 : i64
    %352 = arith.addi %351, %c1_i64_158 : i64
    %c0_i32_159 = arith.constant 0 : i32
    %353 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_159) : (!llvm.ptr, i32) -> i32
    %354 = arith.extui %353 : i32 to i64
    %c65536_i64_160 = arith.constant 65536 : i64
    %355 = arith.muli %354, %c65536_i64_160 : i64
    %356 = arith.cmpi ult, %352, %355 : i64
    cf.cond_br %356, ^bb65, ^bb66
  ^bb64:  // pred: ^bb61
    %c1_i32_161 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_161) : (i32) -> ()
    cf.br ^bb63
  ^bb65:  // 2 preds: ^bb63, ^bb66
    %357 = llvm.getelementptr %14[%351] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %358 = llvm.load volatile %357 {alignment = 1 : i64} : !llvm.ptr -> i8
    %359 = arith.extui %358 : i8 to i32
    %c0_i64_162 = arith.constant 0 : i64
    %360 = arith.extui %347 : i32 to i64
    %361 = arith.addi %360, %c0_i64_162 : i64
    %c1_i64_163 = arith.constant 1 : i64
    %362 = arith.addi %361, %c1_i64_163 : i64
    %c0_i32_164 = arith.constant 0 : i32
    %363 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_164) : (!llvm.ptr, i32) -> i32
    %364 = arith.extui %363 : i32 to i64
    %c65536_i64_165 = arith.constant 65536 : i64
    %365 = arith.muli %364, %c65536_i64_165 : i64
    %366 = arith.cmpi ult, %362, %365 : i64
    cf.cond_br %366, ^bb67, ^bb68
  ^bb66:  // pred: ^bb63
    %c1_i32_166 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_166) : (i32) -> ()
    cf.br ^bb65
  ^bb67:  // 2 preds: ^bb65, ^bb68
    %367 = llvm.getelementptr %14[%361] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %368 = arith.trunci %359 : i32 to i8
    llvm.store volatile %368, %367 {alignment = 1 : i64} : i8, !llvm.ptr
    %369 = llvm.load %3 : !llvm.ptr -> i32
    %c104_i32_167 = arith.constant 104 : i32
    %370 = arith.addi %369, %c104_i32_167 : i32
    %c83_i32 = arith.constant 83 : i32
    %371 = arith.addi %370, %c83_i32 : i32
    %372 = llvm.load %1 : !llvm.ptr -> i32
    %c83_i32_168 = arith.constant 83 : i32
    %373 = arith.addi %372, %c83_i32_168 : i32
    %c0_i64_169 = arith.constant 0 : i64
    %374 = arith.extui %373 : i32 to i64
    %375 = arith.addi %374, %c0_i64_169 : i64
    %c8_i64_170 = arith.constant 8 : i64
    %376 = arith.addi %375, %c8_i64_170 : i64
    %c0_i32_171 = arith.constant 0 : i32
    %377 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_171) : (!llvm.ptr, i32) -> i32
    %378 = arith.extui %377 : i32 to i64
    %c65536_i64_172 = arith.constant 65536 : i64
    %379 = arith.muli %378, %c65536_i64_172 : i64
    %380 = arith.cmpi ult, %376, %379 : i64
    cf.cond_br %380, ^bb69, ^bb70
  ^bb68:  // pred: ^bb65
    %c1_i32_173 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_173) : (i32) -> ()
    cf.br ^bb67
  ^bb69:  // 2 preds: ^bb67, ^bb70
    %381 = llvm.getelementptr %14[%375] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %382 = llvm.load volatile %381 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_174 = arith.constant 0 : i64
    %383 = arith.extui %371 : i32 to i64
    %384 = arith.addi %383, %c0_i64_174 : i64
    %c8_i64_175 = arith.constant 8 : i64
    %385 = arith.addi %384, %c8_i64_175 : i64
    %c0_i32_176 = arith.constant 0 : i32
    %386 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_176) : (!llvm.ptr, i32) -> i32
    %387 = arith.extui %386 : i32 to i64
    %c65536_i64_177 = arith.constant 65536 : i64
    %388 = arith.muli %387, %c65536_i64_177 : i64
    %389 = arith.cmpi ult, %385, %388 : i64
    cf.cond_br %389, ^bb71, ^bb72
  ^bb70:  // pred: ^bb67
    %c1_i32_178 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_178) : (i32) -> ()
    cf.br ^bb69
  ^bb71:  // 2 preds: ^bb69, ^bb72
    %390 = llvm.getelementptr %14[%384] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %382, %390 {alignment = 1 : i64} : i64, !llvm.ptr
    %391 = llvm.load %3 : !llvm.ptr -> i32
    %392 = llvm.load %5 : !llvm.ptr -> i32
    %c111_i64 = arith.constant 111 : i64
    %393 = arith.extui %391 : i32 to i64
    %394 = arith.addi %393, %c111_i64 : i64
    %c4_i64_179 = arith.constant 4 : i64
    %395 = arith.addi %394, %c4_i64_179 : i64
    %c0_i32_180 = arith.constant 0 : i32
    %396 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_180) : (!llvm.ptr, i32) -> i32
    %397 = arith.extui %396 : i32 to i64
    %c65536_i64_181 = arith.constant 65536 : i64
    %398 = arith.muli %397, %c65536_i64_181 : i64
    %399 = arith.cmpi ult, %395, %398 : i64
    cf.cond_br %399, ^bb73, ^bb74
  ^bb72:  // pred: ^bb69
    %c1_i32_182 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_182) : (i32) -> ()
    cf.br ^bb71
  ^bb73:  // 2 preds: ^bb71, ^bb74
    %400 = llvm.getelementptr %14[%394] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %392, %400 {alignment = 1 : i64} : i32, !llvm.ptr
    %401 = llvm.load %3 : !llvm.ptr -> i32
    %402 = llvm.load %6 : !llvm.ptr -> i32
    %c107_i64 = arith.constant 107 : i64
    %403 = arith.extui %401 : i32 to i64
    %404 = arith.addi %403, %c107_i64 : i64
    %c4_i64_183 = arith.constant 4 : i64
    %405 = arith.addi %404, %c4_i64_183 : i64
    %c0_i32_184 = arith.constant 0 : i32
    %406 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_184) : (!llvm.ptr, i32) -> i32
    %407 = arith.extui %406 : i32 to i64
    %c65536_i64_185 = arith.constant 65536 : i64
    %408 = arith.muli %407, %c65536_i64_185 : i64
    %409 = arith.cmpi ult, %405, %408 : i64
    cf.cond_br %409, ^bb75, ^bb76
  ^bb74:  // pred: ^bb71
    %c1_i32_186 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_186) : (i32) -> ()
    cf.br ^bb73
  ^bb75:  // 2 preds: ^bb73, ^bb76
    %410 = llvm.getelementptr %14[%404] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %402, %410 {alignment = 1 : i64} : i32, !llvm.ptr
    %411 = llvm.load %3 : !llvm.ptr -> i32
    %412 = llvm.load %8 : !llvm.ptr -> i32
    %c139_i64 = arith.constant 139 : i64
    %413 = arith.extui %411 : i32 to i64
    %414 = arith.addi %413, %c139_i64 : i64
    %c4_i64_187 = arith.constant 4 : i64
    %415 = arith.addi %414, %c4_i64_187 : i64
    %c0_i32_188 = arith.constant 0 : i32
    %416 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_188) : (!llvm.ptr, i32) -> i32
    %417 = arith.extui %416 : i32 to i64
    %c65536_i64_189 = arith.constant 65536 : i64
    %418 = arith.muli %417, %c65536_i64_189 : i64
    %419 = arith.cmpi ult, %415, %418 : i64
    cf.cond_br %419, ^bb77, ^bb78
  ^bb76:  // pred: ^bb73
    %c1_i32_190 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_190) : (i32) -> ()
    cf.br ^bb75
  ^bb77:  // 2 preds: ^bb75, ^bb78
    %420 = llvm.getelementptr %14[%414] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %412, %420 {alignment = 1 : i64} : i32, !llvm.ptr
    %421 = llvm.load %3 : !llvm.ptr -> i32
    %422 = llvm.load %7 : !llvm.ptr -> i32
    %c143_i64 = arith.constant 143 : i64
    %423 = arith.extui %421 : i32 to i64
    %424 = arith.addi %423, %c143_i64 : i64
    %c4_i64_191 = arith.constant 4 : i64
    %425 = arith.addi %424, %c4_i64_191 : i64
    %c0_i32_192 = arith.constant 0 : i32
    %426 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_192) : (!llvm.ptr, i32) -> i32
    %427 = arith.extui %426 : i32 to i64
    %c65536_i64_193 = arith.constant 65536 : i64
    %428 = arith.muli %427, %c65536_i64_193 : i64
    %429 = arith.cmpi ult, %425, %428 : i64
    cf.cond_br %429, ^bb79, ^bb80
  ^bb78:  // pred: ^bb75
    %c1_i32_194 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_194) : (i32) -> ()
    cf.br ^bb77
  ^bb79:  // 2 preds: ^bb77, ^bb80
    %430 = llvm.getelementptr %14[%424] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %422, %430 {alignment = 1 : i64} : i32, !llvm.ptr
    %431 = llvm.load %3 : !llvm.ptr -> i32
    %432 = llvm.load %9 : !llvm.ptr -> i64
    %c171_i64 = arith.constant 171 : i64
    %433 = arith.extui %431 : i32 to i64
    %434 = arith.addi %433, %c171_i64 : i64
    %c8_i64_195 = arith.constant 8 : i64
    %435 = arith.addi %434, %c8_i64_195 : i64
    %c0_i32_196 = arith.constant 0 : i32
    %436 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_196) : (!llvm.ptr, i32) -> i32
    %437 = arith.extui %436 : i32 to i64
    %c65536_i64_197 = arith.constant 65536 : i64
    %438 = arith.muli %437, %c65536_i64_197 : i64
    %439 = arith.cmpi ult, %435, %438 : i64
    cf.cond_br %439, ^bb81, ^bb82
  ^bb80:  // pred: ^bb77
    %c1_i32_198 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_198) : (i32) -> ()
    cf.br ^bb79
  ^bb81:  // 2 preds: ^bb79, ^bb82
    %440 = llvm.getelementptr %14[%434] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %432, %440 {alignment = 1 : i64} : i64, !llvm.ptr
    %441 = llvm.load %3 : !llvm.ptr -> i32
    %442 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_199 = arith.constant 0 : i64
    %443 = arith.extui %442 : i32 to i64
    %444 = arith.addi %443, %c0_i64_199 : i64
    %c4_i64_200 = arith.constant 4 : i64
    %445 = arith.addi %444, %c4_i64_200 : i64
    %c0_i32_201 = arith.constant 0 : i32
    %446 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_201) : (!llvm.ptr, i32) -> i32
    %447 = arith.extui %446 : i32 to i64
    %c65536_i64_202 = arith.constant 65536 : i64
    %448 = arith.muli %447, %c65536_i64_202 : i64
    %449 = arith.cmpi ult, %445, %448 : i64
    cf.cond_br %449, ^bb83, ^bb84
  ^bb82:  // pred: ^bb79
    %c1_i32_203 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_203) : (i32) -> ()
    cf.br ^bb81
  ^bb83:  // 2 preds: ^bb81, ^bb84
    %450 = llvm.getelementptr %14[%444] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %451 = llvm.load volatile %450 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c131_i64 = arith.constant 131 : i64
    %452 = arith.extui %441 : i32 to i64
    %453 = arith.addi %452, %c131_i64 : i64
    %c4_i64_204 = arith.constant 4 : i64
    %454 = arith.addi %453, %c4_i64_204 : i64
    %c0_i32_205 = arith.constant 0 : i32
    %455 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_205) : (!llvm.ptr, i32) -> i32
    %456 = arith.extui %455 : i32 to i64
    %c65536_i64_206 = arith.constant 65536 : i64
    %457 = arith.muli %456, %c65536_i64_206 : i64
    %458 = arith.cmpi ult, %454, %457 : i64
    cf.cond_br %458, ^bb85, ^bb86
  ^bb84:  // pred: ^bb81
    %c1_i32_207 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_207) : (i32) -> ()
    cf.br ^bb83
  ^bb85:  // 2 preds: ^bb83, ^bb86
    %459 = llvm.getelementptr %14[%453] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %451, %459 {alignment = 1 : i64} : i32, !llvm.ptr
    %460 = llvm.load %3 : !llvm.ptr -> i32
    %461 = llvm.load %1 : !llvm.ptr -> i32
    %c43_i64 = arith.constant 43 : i64
    %462 = arith.extui %461 : i32 to i64
    %463 = arith.addi %462, %c43_i64 : i64
    %c8_i64_208 = arith.constant 8 : i64
    %464 = arith.addi %463, %c8_i64_208 : i64
    %c0_i32_209 = arith.constant 0 : i32
    %465 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_209) : (!llvm.ptr, i32) -> i32
    %466 = arith.extui %465 : i32 to i64
    %c65536_i64_210 = arith.constant 65536 : i64
    %467 = arith.muli %466, %c65536_i64_210 : i64
    %468 = arith.cmpi ult, %464, %467 : i64
    cf.cond_br %468, ^bb87, ^bb88
  ^bb86:  // pred: ^bb83
    %c1_i32_211 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_211) : (i32) -> ()
    cf.br ^bb85
  ^bb87:  // 2 preds: ^bb85, ^bb88
    %469 = llvm.getelementptr %14[%463] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %470 = llvm.load volatile %469 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c147_i64 = arith.constant 147 : i64
    %471 = arith.extui %460 : i32 to i64
    %472 = arith.addi %471, %c147_i64 : i64
    %c8_i64_212 = arith.constant 8 : i64
    %473 = arith.addi %472, %c8_i64_212 : i64
    %c0_i32_213 = arith.constant 0 : i32
    %474 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_213) : (!llvm.ptr, i32) -> i32
    %475 = arith.extui %474 : i32 to i64
    %c65536_i64_214 = arith.constant 65536 : i64
    %476 = arith.muli %475, %c65536_i64_214 : i64
    %477 = arith.cmpi ult, %473, %476 : i64
    cf.cond_br %477, ^bb89, ^bb90
  ^bb88:  // pred: ^bb85
    %c1_i32_215 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_215) : (i32) -> ()
    cf.br ^bb87
  ^bb89:  // 2 preds: ^bb87, ^bb90
    %478 = llvm.getelementptr %14[%472] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %470, %478 {alignment = 1 : i64} : i64, !llvm.ptr
    %479 = llvm.load %3 : !llvm.ptr -> i32
    %480 = llvm.load %1 : !llvm.ptr -> i32
    %c59_i64 = arith.constant 59 : i64
    %481 = arith.extui %480 : i32 to i64
    %482 = arith.addi %481, %c59_i64 : i64
    %c4_i64_216 = arith.constant 4 : i64
    %483 = arith.addi %482, %c4_i64_216 : i64
    %c0_i32_217 = arith.constant 0 : i32
    %484 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_217) : (!llvm.ptr, i32) -> i32
    %485 = arith.extui %484 : i32 to i64
    %c65536_i64_218 = arith.constant 65536 : i64
    %486 = arith.muli %485, %c65536_i64_218 : i64
    %487 = arith.cmpi ult, %483, %486 : i64
    cf.cond_br %487, ^bb91, ^bb92
  ^bb90:  // pred: ^bb87
    %c1_i32_219 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_219) : (i32) -> ()
    cf.br ^bb89
  ^bb91:  // 2 preds: ^bb89, ^bb92
    %488 = llvm.getelementptr %14[%482] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %489 = llvm.load volatile %488 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c163_i64 = arith.constant 163 : i64
    %490 = arith.extui %479 : i32 to i64
    %491 = arith.addi %490, %c163_i64 : i64
    %c4_i64_220 = arith.constant 4 : i64
    %492 = arith.addi %491, %c4_i64_220 : i64
    %c0_i32_221 = arith.constant 0 : i32
    %493 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_221) : (!llvm.ptr, i32) -> i32
    %494 = arith.extui %493 : i32 to i64
    %c65536_i64_222 = arith.constant 65536 : i64
    %495 = arith.muli %494, %c65536_i64_222 : i64
    %496 = arith.cmpi ult, %492, %495 : i64
    cf.cond_br %496, ^bb93, ^bb94
  ^bb92:  // pred: ^bb89
    %c1_i32_223 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_223) : (i32) -> ()
    cf.br ^bb91
  ^bb93:  // 2 preds: ^bb91, ^bb94
    %497 = llvm.getelementptr %14[%491] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %489, %497 {alignment = 1 : i64} : i32, !llvm.ptr
    %498 = llvm.load %3 : !llvm.ptr -> i32
    %499 = llvm.load %1 : !llvm.ptr -> i32
    %c75_i64 = arith.constant 75 : i64
    %500 = arith.extui %499 : i32 to i64
    %501 = arith.addi %500, %c75_i64 : i64
    %c8_i64_224 = arith.constant 8 : i64
    %502 = arith.addi %501, %c8_i64_224 : i64
    %c0_i32_225 = arith.constant 0 : i32
    %503 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_225) : (!llvm.ptr, i32) -> i32
    %504 = arith.extui %503 : i32 to i64
    %c65536_i64_226 = arith.constant 65536 : i64
    %505 = arith.muli %504, %c65536_i64_226 : i64
    %506 = arith.cmpi ult, %502, %505 : i64
    cf.cond_br %506, ^bb95, ^bb96
  ^bb94:  // pred: ^bb91
    %c1_i32_227 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_227) : (i32) -> ()
    cf.br ^bb93
  ^bb95:  // 2 preds: ^bb93, ^bb96
    %507 = llvm.getelementptr %14[%501] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %508 = llvm.load volatile %507 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c179_i64 = arith.constant 179 : i64
    %509 = arith.extui %498 : i32 to i64
    %510 = arith.addi %509, %c179_i64 : i64
    %c8_i64_228 = arith.constant 8 : i64
    %511 = arith.addi %510, %c8_i64_228 : i64
    %c0_i32_229 = arith.constant 0 : i32
    %512 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_229) : (!llvm.ptr, i32) -> i32
    %513 = arith.extui %512 : i32 to i64
    %c65536_i64_230 = arith.constant 65536 : i64
    %514 = arith.muli %513, %c65536_i64_230 : i64
    %515 = arith.cmpi ult, %511, %514 : i64
    cf.cond_br %515, ^bb97, ^bb98
  ^bb96:  // pred: ^bb93
    %c1_i32_231 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_231) : (i32) -> ()
    cf.br ^bb95
  ^bb97:  // 2 preds: ^bb95, ^bb98
    %516 = llvm.getelementptr %14[%510] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %508, %516 {alignment = 1 : i64} : i64, !llvm.ptr
    %517 = llvm.load %3 : !llvm.ptr -> i32
    %c104_i32_232 = arith.constant 104 : i32
    %518 = arith.addi %517, %c104_i32_232 : i32
    %c95_i32 = arith.constant 95 : i32
    %519 = arith.addi %518, %c95_i32 : i32
    %520 = llvm.load %1 : !llvm.ptr -> i32
    %c95_i32_233 = arith.constant 95 : i32
    %521 = arith.addi %520, %c95_i32_233 : i32
    %c0_i64_234 = arith.constant 0 : i64
    %522 = arith.extui %521 : i32 to i64
    %523 = arith.addi %522, %c0_i64_234 : i64
    %c1_i64_235 = arith.constant 1 : i64
    %524 = arith.addi %523, %c1_i64_235 : i64
    %c0_i32_236 = arith.constant 0 : i32
    %525 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_236) : (!llvm.ptr, i32) -> i32
    %526 = arith.extui %525 : i32 to i64
    %c65536_i64_237 = arith.constant 65536 : i64
    %527 = arith.muli %526, %c65536_i64_237 : i64
    %528 = arith.cmpi ult, %524, %527 : i64
    cf.cond_br %528, ^bb99, ^bb100
  ^bb98:  // pred: ^bb95
    %c1_i32_238 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_238) : (i32) -> ()
    cf.br ^bb97
  ^bb99:  // 2 preds: ^bb97, ^bb100
    %529 = llvm.getelementptr %14[%523] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %530 = llvm.load volatile %529 {alignment = 1 : i64} : !llvm.ptr -> i8
    %531 = arith.extui %530 : i8 to i32
    %c0_i64_239 = arith.constant 0 : i64
    %532 = arith.extui %519 : i32 to i64
    %533 = arith.addi %532, %c0_i64_239 : i64
    %c1_i64_240 = arith.constant 1 : i64
    %534 = arith.addi %533, %c1_i64_240 : i64
    %c0_i32_241 = arith.constant 0 : i32
    %535 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_241) : (!llvm.ptr, i32) -> i32
    %536 = arith.extui %535 : i32 to i64
    %c65536_i64_242 = arith.constant 65536 : i64
    %537 = arith.muli %536, %c65536_i64_242 : i64
    %538 = arith.cmpi ult, %534, %537 : i64
    cf.cond_br %538, ^bb101, ^bb102
  ^bb100:  // pred: ^bb97
    %c1_i32_243 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_243) : (i32) -> ()
    cf.br ^bb99
  ^bb101:  // 2 preds: ^bb99, ^bb102
    %539 = llvm.getelementptr %14[%533] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %540 = arith.trunci %531 : i32 to i8
    llvm.store volatile %540, %539 {alignment = 1 : i64} : i8, !llvm.ptr
    %541 = llvm.load %3 : !llvm.ptr -> i32
    %542 = llvm.load %1 : !llvm.ptr -> i32
    %c91_i64 = arith.constant 91 : i64
    %543 = arith.extui %542 : i32 to i64
    %544 = arith.addi %543, %c91_i64 : i64
    %c4_i64_244 = arith.constant 4 : i64
    %545 = arith.addi %544, %c4_i64_244 : i64
    %c0_i32_245 = arith.constant 0 : i32
    %546 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_245) : (!llvm.ptr, i32) -> i32
    %547 = arith.extui %546 : i32 to i64
    %c65536_i64_246 = arith.constant 65536 : i64
    %548 = arith.muli %547, %c65536_i64_246 : i64
    %549 = arith.cmpi ult, %545, %548 : i64
    cf.cond_br %549, ^bb103, ^bb104
  ^bb102:  // pred: ^bb99
    %c1_i32_247 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_247) : (i32) -> ()
    cf.br ^bb101
  ^bb103:  // 2 preds: ^bb101, ^bb104
    %550 = llvm.getelementptr %14[%544] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %551 = llvm.load volatile %550 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c195_i64 = arith.constant 195 : i64
    %552 = arith.extui %541 : i32 to i64
    %553 = arith.addi %552, %c195_i64 : i64
    %c4_i64_248 = arith.constant 4 : i64
    %554 = arith.addi %553, %c4_i64_248 : i64
    %c0_i32_249 = arith.constant 0 : i32
    %555 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_249) : (!llvm.ptr, i32) -> i32
    %556 = arith.extui %555 : i32 to i64
    %c65536_i64_250 = arith.constant 65536 : i64
    %557 = arith.muli %556, %c65536_i64_250 : i64
    %558 = arith.cmpi ult, %554, %557 : i64
    cf.cond_br %558, ^bb105, ^bb106
  ^bb104:  // pred: ^bb101
    %c1_i32_251 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_251) : (i32) -> ()
    cf.br ^bb103
  ^bb105:  // 2 preds: ^bb103, ^bb106
    %559 = llvm.getelementptr %14[%553] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %551, %559 {alignment = 1 : i64} : i32, !llvm.ptr
    %560 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32_252 = arith.constant 4 : i32
    %561 = arith.addi %560, %c4_i32_252 : i32
    %562 = llvm.load %3 : !llvm.ptr -> i32
    %c104_i32_253 = arith.constant 104 : i32
    %563 = arith.addi %562, %c104_i32_253 : i32
    call @f40(%arg0, %561, %563) : (!llvm.ptr, i32, i32) -> ()
    %564 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64_254 = arith.constant 8 : i64
    %565 = arith.extui %564 : i32 to i64
    %566 = arith.addi %565, %c8_i64_254 : i64
    %c4_i64_255 = arith.constant 4 : i64
    %567 = arith.addi %566, %c4_i64_255 : i64
    %c0_i32_256 = arith.constant 0 : i32
    %568 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_256) : (!llvm.ptr, i32) -> i32
    %569 = arith.extui %568 : i32 to i64
    %c65536_i64_257 = arith.constant 65536 : i64
    %570 = arith.muli %569, %c65536_i64_257 : i64
    %571 = arith.cmpi ult, %567, %570 : i64
    cf.cond_br %571, ^bb107, ^bb108
  ^bb106:  // pred: ^bb103
    %c1_i32_258 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_258) : (i32) -> ()
    cf.br ^bb105
  ^bb107:  // 2 preds: ^bb105, ^bb108
    %572 = llvm.getelementptr %14[%566] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %573 = llvm.load volatile %572 {alignment = 1 : i64} : !llvm.ptr -> i32
    %574 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %575 = arith.extui %574 : i32 to i64
    %576 = arith.addi %575, %c12_i64 : i64
    %c4_i64_259 = arith.constant 4 : i64
    %577 = arith.addi %576, %c4_i64_259 : i64
    %c0_i32_260 = arith.constant 0 : i32
    %578 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_260) : (!llvm.ptr, i32) -> i32
    %579 = arith.extui %578 : i32 to i64
    %c65536_i64_261 = arith.constant 65536 : i64
    %580 = arith.muli %579, %c65536_i64_261 : i64
    %581 = arith.cmpi ult, %577, %580 : i64
    cf.cond_br %581, ^bb109, ^bb110
  ^bb108:  // pred: ^bb105
    %c1_i32_262 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_262) : (i32) -> ()
    cf.br ^bb107
  ^bb109:  // 2 preds: ^bb107, ^bb110
    %582 = llvm.getelementptr %14[%576] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %583 = llvm.load volatile %582 {alignment = 1 : i64} : !llvm.ptr -> i32
    %584 = llvm.load %1 : !llvm.ptr -> i32
    %585 = llvm.load %2 : !llvm.ptr -> i32
    %586 = call @f109(%arg0, %573, %583, %584, %585) : (!llvm.ptr, i32, i32, i32, i32) -> i32
    llvm.store %586, %1 : i32, !llvm.ptr
    %587 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32_263 = arith.constant 4 : i32
    %588 = arith.addi %587, %c4_i32_263 : i32
    call @f112(%arg0, %588) : (!llvm.ptr, i32) -> ()
    %589 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32_264 = arith.constant 4 : i32
    %590 = arith.addi %589, %c4_i32_264 : i32
    call @f113(%arg0, %590) : (!llvm.ptr, i32) -> ()
    %c-2147483645_i32 = arith.constant -2147483645 : i32
    llvm.store %c-2147483645_i32, %4 : i32, !llvm.ptr
    %591 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_265 = arith.constant 0 : i32
    %592 = arith.cmpi eq, %591, %c0_i32_265 : i32
    %593 = arith.extui %592 : i1 to i32
    %c0_i32_266 = arith.constant 0 : i32
    %594 = arith.cmpi ne, %593, %c0_i32_266 : i32
    cf.cond_br %594, ^bb6, ^bb111
  ^bb110:  // pred: ^bb107
    %c1_i32_267 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_267) : (i32) -> ()
    cf.br ^bb109
  ^bb111:  // pred: ^bb109
    %595 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32_268 = arith.constant 4 : i32
    %596 = arith.addi %595, %c4_i32_268 : i32
    %c1_i32_269 = arith.constant 1 : i32
    %597 = arith.ori %596, %c1_i32_269 : i32
    %598 = llvm.load %3 : !llvm.ptr -> i32
    %c104_i32_270 = arith.constant 104 : i32
    %599 = arith.addi %598, %c104_i32_270 : i32
    %c96_i32_271 = arith.constant 96 : i32
    %600 = call @f161(%arg0, %597, %599, %c96_i32_271) : (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %600, %5 : i32, !llvm.ptr
    %c0_i32_272 = arith.constant 0 : i32
    llvm.store %c0_i32_272, %1 : i32, !llvm.ptr
    %601 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_273 = arith.constant 0 : i32
    %c4_i64_274 = arith.constant 4 : i64
    %602 = arith.extui %601 : i32 to i64
    %603 = arith.addi %602, %c4_i64_274 : i64
    %c1_i64_275 = arith.constant 1 : i64
    %604 = arith.addi %603, %c1_i64_275 : i64
    %c0_i32_276 = arith.constant 0 : i32
    %605 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_276) : (!llvm.ptr, i32) -> i32
    %606 = arith.extui %605 : i32 to i64
    %c65536_i64_277 = arith.constant 65536 : i64
    %607 = arith.muli %606, %c65536_i64_277 : i64
    %608 = arith.cmpi ult, %604, %607 : i64
    cf.cond_br %608, ^bb112, ^bb113
  ^bb112:  // 2 preds: ^bb111, ^bb113
    %609 = llvm.getelementptr %14[%603] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %610 = arith.trunci %c0_i32_273 : i32 to i8
    llvm.store volatile %610, %609 {alignment = 1 : i64} : i8, !llvm.ptr
    %611 = llvm.load %3 : !llvm.ptr -> i32
    %c104_i32_278 = arith.constant 104 : i32
    %612 = arith.addi %611, %c104_i32_278 : i32
    %613 = llvm.load %5 : !llvm.ptr -> i32
    %c96_i32_279 = arith.constant 96 : i32
    %614 = call @f161(%arg0, %612, %613, %c96_i32_279) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb120
  ^bb113:  // pred: ^bb111
    %c1_i32_280 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_280) : (i32) -> ()
    cf.br ^bb112
  ^bb114:  // 2 preds: ^bb116, ^bb146
    %615 = llvm.load %0 : !llvm.ptr -> i32
    %616 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_281 = arith.constant 0 : i64
    %617 = arith.extui %615 : i32 to i64
    %618 = arith.addi %617, %c0_i64_281 : i64
    %c4_i64_282 = arith.constant 4 : i64
    %619 = arith.addi %618, %c4_i64_282 : i64
    %c0_i32_283 = arith.constant 0 : i32
    %620 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_283) : (!llvm.ptr, i32) -> i32
    %621 = arith.extui %620 : i32 to i64
    %c65536_i64_284 = arith.constant 65536 : i64
    %622 = arith.muli %621, %c65536_i64_284 : i64
    %623 = arith.cmpi ult, %619, %622 : i64
    cf.cond_br %623, ^bb148, ^bb149
  ^bb115:  // pred: ^bb131
    %624 = llvm.load %0 : !llvm.ptr -> i32
    %625 = llvm.load %3 : !llvm.ptr -> i32
    %c204_i64 = arith.constant 204 : i64
    %626 = arith.extui %625 : i32 to i64
    %627 = arith.addi %626, %c204_i64 : i64
    %c8_i64_285 = arith.constant 8 : i64
    %628 = arith.addi %627, %c8_i64_285 : i64
    %c0_i32_286 = arith.constant 0 : i32
    %629 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_286) : (!llvm.ptr, i32) -> i32
    %630 = arith.extui %629 : i32 to i64
    %c65536_i64_287 = arith.constant 65536 : i64
    %631 = arith.muli %630, %c65536_i64_287 : i64
    %632 = arith.cmpi ult, %628, %631 : i64
    cf.cond_br %632, ^bb134, ^bb135
  ^bb116:  // 2 preds: ^bb126, ^bb133
    %633 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_288 = arith.constant 8 : i32
    %634 = arith.addi %633, %c8_i32_288 : i32
    %635 = llvm.load %5 : !llvm.ptr -> i32
    call @f43(%arg0, %634, %635) : (!llvm.ptr, i32, i32) -> ()
    %c0_i32_289 = arith.constant 0 : i32
    llvm.store %c0_i32_289, %1 : i32, !llvm.ptr
    cf.br ^bb114
  ^bb117:  // 2 preds: ^bb124, ^bb125
    %636 = llvm.load %3 : !llvm.ptr -> i32
    %c200_i32 = arith.constant 200 : i32
    %637 = arith.addi %636, %c200_i32 : i32
    %638 = llvm.load %5 : !llvm.ptr -> i32
    call @f42(%arg0, %637, %638) : (!llvm.ptr, i32, i32) -> ()
    %639 = llvm.load %3 : !llvm.ptr -> i32
    %c200_i64 = arith.constant 200 : i64
    %640 = arith.extui %639 : i32 to i64
    %641 = arith.addi %640, %c200_i64 : i64
    %c4_i64_290 = arith.constant 4 : i64
    %642 = arith.addi %641, %c4_i64_290 : i64
    %c0_i32_291 = arith.constant 0 : i32
    %643 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_291) : (!llvm.ptr, i32) -> i32
    %644 = arith.extui %643 : i32 to i64
    %c65536_i64_292 = arith.constant 65536 : i64
    %645 = arith.muli %644, %c65536_i64_292 : i64
    %646 = arith.cmpi ult, %642, %645 : i64
    cf.cond_br %646, ^bb131, ^bb132
  ^bb118:  // 2 preds: ^bb119, ^bb120
    %647 = llvm.load %3 : !llvm.ptr -> i32
    %c136_i32 = arith.constant 136 : i32
    %648 = arith.addi %647, %c136_i32 : i32
    llvm.store %648, %4 : i32, !llvm.ptr
    %c0_i32_293 = arith.constant 0 : i32
    llvm.store %c0_i32_293, %1 : i32, !llvm.ptr
    cf.br ^bb126
  ^bb119:  // no predecessors
    cf.br ^bb118
  ^bb120:  // 2 preds: ^bb112, ^bb122
    %649 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %650 = arith.cmpi eq, %649, %c12_i32 : i32
    %651 = arith.extui %650 : i1 to i32
    %c0_i32_294 = arith.constant 0 : i32
    %652 = arith.cmpi ne, %651, %c0_i32_294 : i32
    cf.cond_br %652, ^bb118, ^bb121
  ^bb121:  // pred: ^bb120
    %653 = llvm.load %3 : !llvm.ptr -> i32
    %c104_i32_295 = arith.constant 104 : i32
    %654 = arith.addi %653, %c104_i32_295 : i32
    %655 = llvm.load %1 : !llvm.ptr -> i32
    %656 = arith.addi %654, %655 : i32
    llvm.store %656, %2 : i32, !llvm.ptr
    %657 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_296 = arith.constant 1 : i32
    %658 = arith.addi %657, %c1_i32_296 : i32
    llvm.store %658, %1 : i32, !llvm.ptr
    %659 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_297 = arith.constant 0 : i64
    %660 = arith.extui %659 : i32 to i64
    %661 = arith.addi %660, %c0_i64_297 : i64
    %c1_i64_298 = arith.constant 1 : i64
    %662 = arith.addi %661, %c1_i64_298 : i64
    %c0_i32_299 = arith.constant 0 : i32
    %663 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_299) : (!llvm.ptr, i32) -> i32
    %664 = arith.extui %663 : i32 to i64
    %c65536_i64_300 = arith.constant 65536 : i64
    %665 = arith.muli %664, %c65536_i64_300 : i64
    %666 = arith.cmpi ult, %662, %665 : i64
    cf.cond_br %666, ^bb122, ^bb123
  ^bb122:  // 2 preds: ^bb121, ^bb123
    %667 = llvm.getelementptr %14[%661] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %668 = llvm.load volatile %667 {alignment = 1 : i64} : !llvm.ptr -> i8
    %669 = arith.extui %668 : i8 to i32
    %c0_i32_301 = arith.constant 0 : i32
    %670 = arith.cmpi eq, %669, %c0_i32_301 : i32
    %671 = arith.extui %670 : i1 to i32
    %c0_i32_302 = arith.constant 0 : i32
    %672 = arith.cmpi ne, %671, %c0_i32_302 : i32
    cf.cond_br %672, ^bb120, ^bb124
  ^bb123:  // pred: ^bb121
    %c1_i32_303 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_303) : (i32) -> ()
    cf.br ^bb122
  ^bb124:  // pred: ^bb122
    cf.br ^bb117
  ^bb125:  // pred: ^bb130
    cf.br ^bb117
  ^bb126:  // 2 preds: ^bb118, ^bb128
    %673 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32_304 = arith.constant 12 : i32
    %674 = arith.cmpi eq, %673, %c12_i32_304 : i32
    %675 = arith.extui %674 : i1 to i32
    %c0_i32_305 = arith.constant 0 : i32
    %676 = arith.cmpi ne, %675, %c0_i32_305 : i32
    cf.cond_br %676, ^bb116, ^bb127
  ^bb127:  // pred: ^bb126
    %677 = llvm.load %4 : !llvm.ptr -> i32
    %678 = llvm.load %1 : !llvm.ptr -> i32
    %679 = arith.addi %677, %678 : i32
    llvm.store %679, %2 : i32, !llvm.ptr
    %680 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_306 = arith.constant 1 : i32
    %681 = arith.addi %680, %c1_i32_306 : i32
    llvm.store %681, %1 : i32, !llvm.ptr
    %682 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_307 = arith.constant 0 : i64
    %683 = arith.extui %682 : i32 to i64
    %684 = arith.addi %683, %c0_i64_307 : i64
    %c1_i64_308 = arith.constant 1 : i64
    %685 = arith.addi %684, %c1_i64_308 : i64
    %c0_i32_309 = arith.constant 0 : i32
    %686 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_309) : (!llvm.ptr, i32) -> i32
    %687 = arith.extui %686 : i32 to i64
    %c65536_i64_310 = arith.constant 65536 : i64
    %688 = arith.muli %687, %c65536_i64_310 : i64
    %689 = arith.cmpi ult, %685, %688 : i64
    cf.cond_br %689, ^bb128, ^bb129
  ^bb128:  // 2 preds: ^bb127, ^bb129
    %690 = llvm.getelementptr %14[%684] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %691 = llvm.load volatile %690 {alignment = 1 : i64} : !llvm.ptr -> i8
    %692 = arith.extui %691 : i8 to i32
    %c0_i32_311 = arith.constant 0 : i32
    %693 = arith.cmpi eq, %692, %c0_i32_311 : i32
    %694 = arith.extui %693 : i1 to i32
    %c0_i32_312 = arith.constant 0 : i32
    %695 = arith.cmpi ne, %694, %c0_i32_312 : i32
    cf.cond_br %695, ^bb126, ^bb130
  ^bb129:  // pred: ^bb127
    %c1_i32_313 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_313) : (i32) -> ()
    cf.br ^bb128
  ^bb130:  // pred: ^bb128
    cf.br ^bb125
  ^bb131:  // 2 preds: ^bb117, ^bb132
    %696 = llvm.getelementptr %14[%641] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %697 = llvm.load volatile %696 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %697, %1 : i32, !llvm.ptr
    %c-2147483638_i32 = arith.constant -2147483638 : i32
    %698 = arith.cmpi eq, %697, %c-2147483638_i32 : i32
    %699 = arith.extui %698 : i1 to i32
    %c0_i32_314 = arith.constant 0 : i32
    %700 = arith.cmpi eq, %699, %c0_i32_314 : i32
    %701 = arith.extui %700 : i1 to i32
    %c0_i32_315 = arith.constant 0 : i32
    %702 = arith.cmpi ne, %701, %c0_i32_315 : i32
    cf.cond_br %702, ^bb115, ^bb133
  ^bb132:  // pred: ^bb117
    %c1_i32_316 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_316) : (i32) -> ()
    cf.br ^bb131
  ^bb133:  // pred: ^bb131
    cf.br ^bb116
  ^bb134:  // 2 preds: ^bb115, ^bb135
    %703 = llvm.getelementptr %14[%627] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %704 = llvm.load volatile %703 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c8_i64_317 = arith.constant 8 : i64
    %705 = arith.extui %624 : i32 to i64
    %706 = arith.addi %705, %c8_i64_317 : i64
    %c8_i64_318 = arith.constant 8 : i64
    %707 = arith.addi %706, %c8_i64_318 : i64
    %c0_i32_319 = arith.constant 0 : i32
    %708 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_319) : (!llvm.ptr, i32) -> i32
    %709 = arith.extui %708 : i32 to i64
    %c65536_i64_320 = arith.constant 65536 : i64
    %710 = arith.muli %709, %c65536_i64_320 : i64
    %711 = arith.cmpi ult, %707, %710 : i64
    cf.cond_br %711, ^bb136, ^bb137
  ^bb135:  // pred: ^bb115
    %c1_i32_321 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_321) : (i32) -> ()
    cf.br ^bb134
  ^bb136:  // 2 preds: ^bb134, ^bb137
    %712 = llvm.getelementptr %14[%706] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %704, %712 {alignment = 1 : i64} : i64, !llvm.ptr
    %713 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %714 = arith.addi %713, %c24_i32 : i32
    %715 = llvm.load %3 : !llvm.ptr -> i32
    %c220_i32 = arith.constant 220 : i32
    %716 = arith.addi %715, %c220_i32 : i32
    %c0_i64_322 = arith.constant 0 : i64
    %717 = arith.extui %716 : i32 to i64
    %718 = arith.addi %717, %c0_i64_322 : i64
    %c4_i64_323 = arith.constant 4 : i64
    %719 = arith.addi %718, %c4_i64_323 : i64
    %c0_i32_324 = arith.constant 0 : i32
    %720 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_324) : (!llvm.ptr, i32) -> i32
    %721 = arith.extui %720 : i32 to i64
    %c65536_i64_325 = arith.constant 65536 : i64
    %722 = arith.muli %721, %c65536_i64_325 : i64
    %723 = arith.cmpi ult, %719, %722 : i64
    cf.cond_br %723, ^bb138, ^bb139
  ^bb137:  // pred: ^bb134
    %c1_i32_326 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_326) : (i32) -> ()
    cf.br ^bb136
  ^bb138:  // 2 preds: ^bb136, ^bb139
    %724 = llvm.getelementptr %14[%718] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %725 = llvm.load volatile %724 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_327 = arith.constant 0 : i64
    %726 = arith.extui %714 : i32 to i64
    %727 = arith.addi %726, %c0_i64_327 : i64
    %c4_i64_328 = arith.constant 4 : i64
    %728 = arith.addi %727, %c4_i64_328 : i64
    %c0_i32_329 = arith.constant 0 : i32
    %729 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_329) : (!llvm.ptr, i32) -> i32
    %730 = arith.extui %729 : i32 to i64
    %c65536_i64_330 = arith.constant 65536 : i64
    %731 = arith.muli %730, %c65536_i64_330 : i64
    %732 = arith.cmpi ult, %728, %731 : i64
    cf.cond_br %732, ^bb140, ^bb141
  ^bb139:  // pred: ^bb136
    %c1_i32_331 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_331) : (i32) -> ()
    cf.br ^bb138
  ^bb140:  // 2 preds: ^bb138, ^bb141
    %733 = llvm.getelementptr %14[%727] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %725, %733 {alignment = 1 : i64} : i32, !llvm.ptr
    %734 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %735 = arith.addi %734, %c16_i32 : i32
    %736 = llvm.load %3 : !llvm.ptr -> i32
    %c212_i32 = arith.constant 212 : i32
    %737 = arith.addi %736, %c212_i32 : i32
    %c0_i64_332 = arith.constant 0 : i64
    %738 = arith.extui %737 : i32 to i64
    %739 = arith.addi %738, %c0_i64_332 : i64
    %c8_i64_333 = arith.constant 8 : i64
    %740 = arith.addi %739, %c8_i64_333 : i64
    %c0_i32_334 = arith.constant 0 : i32
    %741 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_334) : (!llvm.ptr, i32) -> i32
    %742 = arith.extui %741 : i32 to i64
    %c65536_i64_335 = arith.constant 65536 : i64
    %743 = arith.muli %742, %c65536_i64_335 : i64
    %744 = arith.cmpi ult, %740, %743 : i64
    cf.cond_br %744, ^bb142, ^bb143
  ^bb141:  // pred: ^bb138
    %c1_i32_336 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_336) : (i32) -> ()
    cf.br ^bb140
  ^bb142:  // 2 preds: ^bb140, ^bb143
    %745 = llvm.getelementptr %14[%739] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %746 = llvm.load volatile %745 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_337 = arith.constant 0 : i64
    %747 = arith.extui %735 : i32 to i64
    %748 = arith.addi %747, %c0_i64_337 : i64
    %c8_i64_338 = arith.constant 8 : i64
    %749 = arith.addi %748, %c8_i64_338 : i64
    %c0_i32_339 = arith.constant 0 : i32
    %750 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_339) : (!llvm.ptr, i32) -> i32
    %751 = arith.extui %750 : i32 to i64
    %c65536_i64_340 = arith.constant 65536 : i64
    %752 = arith.muli %751, %c65536_i64_340 : i64
    %753 = arith.cmpi ult, %749, %752 : i64
    cf.cond_br %753, ^bb144, ^bb145
  ^bb143:  // pred: ^bb140
    %c1_i32_341 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_341) : (i32) -> ()
    cf.br ^bb142
  ^bb144:  // 2 preds: ^bb142, ^bb145
    %754 = llvm.getelementptr %14[%748] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %746, %754 {alignment = 1 : i64} : i64, !llvm.ptr
    %755 = llvm.load %0 : !llvm.ptr -> i32
    %756 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_342 = arith.constant 4 : i64
    %757 = arith.extui %755 : i32 to i64
    %758 = arith.addi %757, %c4_i64_342 : i64
    %c4_i64_343 = arith.constant 4 : i64
    %759 = arith.addi %758, %c4_i64_343 : i64
    %c0_i32_344 = arith.constant 0 : i32
    %760 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_344) : (!llvm.ptr, i32) -> i32
    %761 = arith.extui %760 : i32 to i64
    %c65536_i64_345 = arith.constant 65536 : i64
    %762 = arith.muli %761, %c65536_i64_345 : i64
    %763 = arith.cmpi ult, %759, %762 : i64
    cf.cond_br %763, ^bb146, ^bb147
  ^bb145:  // pred: ^bb142
    %c1_i32_346 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_346) : (i32) -> ()
    cf.br ^bb144
  ^bb146:  // 2 preds: ^bb144, ^bb147
    %764 = llvm.getelementptr %14[%758] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %756, %764 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i32_347 = arith.constant 1 : i32
    llvm.store %c1_i32_347, %1 : i32, !llvm.ptr
    cf.br ^bb114
  ^bb147:  // pred: ^bb144
    %c1_i32_348 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_348) : (i32) -> ()
    cf.br ^bb146
  ^bb148:  // 2 preds: ^bb114, ^bb149
    %765 = llvm.getelementptr %14[%618] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %616, %765 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb5
  ^bb149:  // pred: ^bb114
    %c1_i32_349 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_349) : (i32) -> ()
    cf.br ^bb148
  ^bb150:  // 2 preds: ^bb6, ^bb151
    %766 = llvm.getelementptr %14[%35] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %33, %766 {alignment = 1 : i64} : i32, !llvm.ptr
    %767 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i32 = arith.constant 20 : i32
    %768 = arith.addi %767, %c20_i32 : i32
    %769 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32_350 = arith.constant 4 : i32
    %770 = arith.addi %769, %c4_i32_350 : i32
    %c20_i32_351 = arith.constant 20 : i32
    %771 = arith.addi %770, %c20_i32_351 : i32
    %c0_i64_352 = arith.constant 0 : i64
    %772 = arith.extui %771 : i32 to i64
    %773 = arith.addi %772, %c0_i64_352 : i64
    %c8_i64_353 = arith.constant 8 : i64
    %774 = arith.addi %773, %c8_i64_353 : i64
    %c0_i32_354 = arith.constant 0 : i32
    %775 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_354) : (!llvm.ptr, i32) -> i32
    %776 = arith.extui %775 : i32 to i64
    %c65536_i64_355 = arith.constant 65536 : i64
    %777 = arith.muli %776, %c65536_i64_355 : i64
    %778 = arith.cmpi ult, %774, %777 : i64
    cf.cond_br %778, ^bb152, ^bb153
  ^bb151:  // pred: ^bb6
    %c1_i32_356 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_356) : (i32) -> ()
    cf.br ^bb150
  ^bb152:  // 2 preds: ^bb150, ^bb153
    %779 = llvm.getelementptr %14[%773] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %780 = llvm.load volatile %779 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_357 = arith.constant 0 : i64
    %781 = arith.extui %768 : i32 to i64
    %782 = arith.addi %781, %c0_i64_357 : i64
    %c8_i64_358 = arith.constant 8 : i64
    %783 = arith.addi %782, %c8_i64_358 : i64
    %c0_i32_359 = arith.constant 0 : i32
    %784 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_359) : (!llvm.ptr, i32) -> i32
    %785 = arith.extui %784 : i32 to i64
    %c65536_i64_360 = arith.constant 65536 : i64
    %786 = arith.muli %785, %c65536_i64_360 : i64
    %787 = arith.cmpi ult, %783, %786 : i64
    cf.cond_br %787, ^bb154, ^bb155
  ^bb153:  // pred: ^bb150
    %c1_i32_361 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_361) : (i32) -> ()
    cf.br ^bb152
  ^bb154:  // 2 preds: ^bb152, ^bb155
    %788 = llvm.getelementptr %14[%782] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %780, %788 {alignment = 1 : i64} : i64, !llvm.ptr
    %789 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i32_362 = arith.constant 12 : i32
    %790 = arith.addi %789, %c12_i32_362 : i32
    %791 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32_363 = arith.constant 4 : i32
    %792 = arith.addi %791, %c4_i32_363 : i32
    %c12_i32_364 = arith.constant 12 : i32
    %793 = arith.addi %792, %c12_i32_364 : i32
    %c0_i64_365 = arith.constant 0 : i64
    %794 = arith.extui %793 : i32 to i64
    %795 = arith.addi %794, %c0_i64_365 : i64
    %c8_i64_366 = arith.constant 8 : i64
    %796 = arith.addi %795, %c8_i64_366 : i64
    %c0_i32_367 = arith.constant 0 : i32
    %797 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_367) : (!llvm.ptr, i32) -> i32
    %798 = arith.extui %797 : i32 to i64
    %c65536_i64_368 = arith.constant 65536 : i64
    %799 = arith.muli %798, %c65536_i64_368 : i64
    %800 = arith.cmpi ult, %796, %799 : i64
    cf.cond_br %800, ^bb156, ^bb157
  ^bb155:  // pred: ^bb152
    %c1_i32_369 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_369) : (i32) -> ()
    cf.br ^bb154
  ^bb156:  // 2 preds: ^bb154, ^bb157
    %801 = llvm.getelementptr %14[%795] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %802 = llvm.load volatile %801 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_370 = arith.constant 0 : i64
    %803 = arith.extui %790 : i32 to i64
    %804 = arith.addi %803, %c0_i64_370 : i64
    %c8_i64_371 = arith.constant 8 : i64
    %805 = arith.addi %804, %c8_i64_371 : i64
    %c0_i32_372 = arith.constant 0 : i32
    %806 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_372) : (!llvm.ptr, i32) -> i32
    %807 = arith.extui %806 : i32 to i64
    %c65536_i64_373 = arith.constant 65536 : i64
    %808 = arith.muli %807, %c65536_i64_373 : i64
    %809 = arith.cmpi ult, %805, %808 : i64
    cf.cond_br %809, ^bb158, ^bb159
  ^bb157:  // pred: ^bb154
    %c1_i32_374 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_374) : (i32) -> ()
    cf.br ^bb156
  ^bb158:  // 2 preds: ^bb156, ^bb159
    %810 = llvm.getelementptr %14[%804] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %802, %810 {alignment = 1 : i64} : i64, !llvm.ptr
    %811 = llvm.load %0 : !llvm.ptr -> i32
    %812 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64_375 = arith.constant 8 : i64
    %813 = arith.extui %812 : i32 to i64
    %814 = arith.addi %813, %c8_i64_375 : i64
    %c8_i64_376 = arith.constant 8 : i64
    %815 = arith.addi %814, %c8_i64_376 : i64
    %c0_i32_377 = arith.constant 0 : i32
    %816 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_377) : (!llvm.ptr, i32) -> i32
    %817 = arith.extui %816 : i32 to i64
    %c65536_i64_378 = arith.constant 65536 : i64
    %818 = arith.muli %817, %c65536_i64_378 : i64
    %819 = arith.cmpi ult, %815, %818 : i64
    cf.cond_br %819, ^bb160, ^bb161
  ^bb159:  // pred: ^bb156
    %c1_i32_379 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_379) : (i32) -> ()
    cf.br ^bb158
  ^bb160:  // 2 preds: ^bb158, ^bb161
    %820 = llvm.getelementptr %14[%814] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %821 = llvm.load volatile %820 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c4_i64_380 = arith.constant 4 : i64
    %822 = arith.extui %811 : i32 to i64
    %823 = arith.addi %822, %c4_i64_380 : i64
    %c8_i64_381 = arith.constant 8 : i64
    %824 = arith.addi %823, %c8_i64_381 : i64
    %c0_i32_382 = arith.constant 0 : i32
    %825 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_382) : (!llvm.ptr, i32) -> i32
    %826 = arith.extui %825 : i32 to i64
    %c65536_i64_383 = arith.constant 65536 : i64
    %827 = arith.muli %826, %c65536_i64_383 : i64
    %828 = arith.cmpi ult, %824, %827 : i64
    cf.cond_br %828, ^bb162, ^bb163
  ^bb161:  // pred: ^bb158
    %c1_i32_384 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_384) : (i32) -> ()
    cf.br ^bb160
  ^bb162:  // 2 preds: ^bb160, ^bb163
    %829 = llvm.getelementptr %14[%823] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %821, %829 {alignment = 1 : i64} : i64, !llvm.ptr
    %830 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_385 = arith.constant 1 : i32
    %c0_i64_386 = arith.constant 0 : i64
    %831 = arith.extui %830 : i32 to i64
    %832 = arith.addi %831, %c0_i64_386 : i64
    %c4_i64_387 = arith.constant 4 : i64
    %833 = arith.addi %832, %c4_i64_387 : i64
    %c0_i32_388 = arith.constant 0 : i32
    %834 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_388) : (!llvm.ptr, i32) -> i32
    %835 = arith.extui %834 : i32 to i64
    %c65536_i64_389 = arith.constant 65536 : i64
    %836 = arith.muli %835, %c65536_i64_389 : i64
    %837 = arith.cmpi ult, %833, %836 : i64
    cf.cond_br %837, ^bb164, ^bb165
  ^bb163:  // pred: ^bb160
    %c1_i32_390 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_390) : (i32) -> ()
    cf.br ^bb162
  ^bb164:  // 2 preds: ^bb162, ^bb165
    %838 = llvm.getelementptr %14[%832] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_385, %838 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb5
  ^bb165:  // pred: ^bb162
    %c1_i32_391 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_391) : (i32) -> ()
    cf.br ^bb164
  }
  func.func @f18(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %c1_i32_9 = arith.constant 1 : i32
    %10 = llvm.alloca %c1_i32_9 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %10 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_10 = arith.constant 1 : i32
    %11 = llvm.alloca %c1_i32_10 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %11 : i64, !llvm.ptr
    %c1_i32_11 = arith.constant 1 : i32
    %12 = llvm.alloca %c1_i32_11 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %12 : i64, !llvm.ptr
    %c1_i32_12 = arith.constant 1 : i32
    %13 = llvm.alloca %c1_i32_12 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %13 : i64, !llvm.ptr
    %c1_i32_13 = arith.constant 1 : i32
    %14 = llvm.alloca %c1_i32_13 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %14 : i64, !llvm.ptr
    %15 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %18 = llvm.getelementptr %17[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %19 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %20 = llvm.load %16 : !llvm.ptr -> i32
    %c400_i32 = arith.constant 400 : i32
    %21 = arith.subi %20, %c400_i32 : i32
    llvm.store %21, %5 : i32, !llvm.ptr
    llvm.store %21, %16 : i32, !llvm.ptr
    %22 = llvm.load %5 : !llvm.ptr -> i32
    %c256_i32 = arith.constant 256 : i32
    %23 = arith.addi %22, %c256_i32 : i32
    %c16_i32 = arith.constant 16 : i32
    %24 = arith.addi %23, %c16_i32 : i32
    %25 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_14 = arith.constant 16 : i32
    %26 = arith.addi %25, %c16_i32_14 : i32
    %c0_i64_15 = arith.constant 0 : i64
    %27 = arith.extui %26 : i32 to i64
    %28 = arith.addi %27, %c0_i64_15 : i64
    %c4_i64 = arith.constant 4 : i64
    %29 = arith.addi %28, %c4_i64 : i64
    %c0_i32_16 = arith.constant 0 : i32
    %30 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_16) : (!llvm.ptr, i32) -> i32
    %31 = arith.extui %30 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %32 = arith.muli %31, %c65536_i64 : i64
    %33 = arith.cmpi ult, %29, %32 : i64
    cf.cond_br %33, ^bb3, ^bb4
  ^bb2:  // pred: ^bb36
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %34 = llvm.getelementptr %19[%28] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %35 = llvm.load volatile %34 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_17 = arith.constant 0 : i64
    %36 = arith.extui %24 : i32 to i64
    %37 = arith.addi %36, %c0_i64_17 : i64
    %c4_i64_18 = arith.constant 4 : i64
    %38 = arith.addi %37, %c4_i64_18 : i64
    %c0_i32_19 = arith.constant 0 : i32
    %39 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_19) : (!llvm.ptr, i32) -> i32
    %40 = arith.extui %39 : i32 to i64
    %c65536_i64_20 = arith.constant 65536 : i64
    %41 = arith.muli %40, %c65536_i64_20 : i64
    %42 = arith.cmpi ult, %38, %41 : i64
    cf.cond_br %42, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c1_i32_21 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_21) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %43 = llvm.getelementptr %19[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %35, %43 {alignment = 1 : i64} : i32, !llvm.ptr
    %44 = llvm.load %5 : !llvm.ptr -> i32
    %c256_i32_22 = arith.constant 256 : i32
    %45 = arith.addi %44, %c256_i32_22 : i32
    %c8_i32 = arith.constant 8 : i32
    %46 = arith.addi %45, %c8_i32 : i32
    %47 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_23 = arith.constant 8 : i32
    %48 = arith.addi %47, %c8_i32_23 : i32
    %c0_i64_24 = arith.constant 0 : i64
    %49 = arith.extui %48 : i32 to i64
    %50 = arith.addi %49, %c0_i64_24 : i64
    %c8_i64 = arith.constant 8 : i64
    %51 = arith.addi %50, %c8_i64 : i64
    %c0_i32_25 = arith.constant 0 : i32
    %52 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_25) : (!llvm.ptr, i32) -> i32
    %53 = arith.extui %52 : i32 to i64
    %c65536_i64_26 = arith.constant 65536 : i64
    %54 = arith.muli %53, %c65536_i64_26 : i64
    %55 = arith.cmpi ult, %51, %54 : i64
    cf.cond_br %55, ^bb7, ^bb8
  ^bb6:  // pred: ^bb3
    %c1_i32_27 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_27) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %56 = llvm.getelementptr %19[%50] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %57 = llvm.load volatile %56 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_28 = arith.constant 0 : i64
    %58 = arith.extui %46 : i32 to i64
    %59 = arith.addi %58, %c0_i64_28 : i64
    %c8_i64_29 = arith.constant 8 : i64
    %60 = arith.addi %59, %c8_i64_29 : i64
    %c0_i32_30 = arith.constant 0 : i32
    %61 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_30) : (!llvm.ptr, i32) -> i32
    %62 = arith.extui %61 : i32 to i64
    %c65536_i64_31 = arith.constant 65536 : i64
    %63 = arith.muli %62, %c65536_i64_31 : i64
    %64 = arith.cmpi ult, %60, %63 : i64
    cf.cond_br %64, ^bb9, ^bb10
  ^bb8:  // pred: ^bb5
    %c1_i32_32 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_32) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %65 = llvm.getelementptr %19[%59] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %57, %65 {alignment = 1 : i64} : i64, !llvm.ptr
    %66 = llvm.load %5 : !llvm.ptr -> i32
    %67 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_33 = arith.constant 0 : i64
    %68 = arith.extui %67 : i32 to i64
    %69 = arith.addi %68, %c0_i64_33 : i64
    %c8_i64_34 = arith.constant 8 : i64
    %70 = arith.addi %69, %c8_i64_34 : i64
    %c0_i32_35 = arith.constant 0 : i32
    %71 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_35) : (!llvm.ptr, i32) -> i32
    %72 = arith.extui %71 : i32 to i64
    %c65536_i64_36 = arith.constant 65536 : i64
    %73 = arith.muli %72, %c65536_i64_36 : i64
    %74 = arith.cmpi ult, %70, %73 : i64
    cf.cond_br %74, ^bb11, ^bb12
  ^bb10:  // pred: ^bb7
    %c1_i32_37 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_37) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %75 = llvm.getelementptr %19[%69] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %76 = llvm.load volatile %75 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c256_i64 = arith.constant 256 : i64
    %77 = arith.extui %66 : i32 to i64
    %78 = arith.addi %77, %c256_i64 : i64
    %c8_i64_38 = arith.constant 8 : i64
    %79 = arith.addi %78, %c8_i64_38 : i64
    %c0_i32_39 = arith.constant 0 : i32
    %80 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_39) : (!llvm.ptr, i32) -> i32
    %81 = arith.extui %80 : i32 to i64
    %c65536_i64_40 = arith.constant 65536 : i64
    %82 = arith.muli %81, %c65536_i64_40 : i64
    %83 = arith.cmpi ult, %79, %82 : i64
    cf.cond_br %83, ^bb13, ^bb14
  ^bb12:  // pred: ^bb9
    %c1_i32_41 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_41) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %84 = llvm.getelementptr %19[%78] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %76, %84 {alignment = 1 : i64} : i64, !llvm.ptr
    %85 = llvm.load %5 : !llvm.ptr -> i32
    %c8_i32_42 = arith.constant 8 : i32
    %86 = arith.addi %85, %c8_i32_42 : i32
    %87 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %88 = arith.addi %87, %c32_i32 : i32
    %89 = llvm.load %5 : !llvm.ptr -> i32
    %c256_i32_43 = arith.constant 256 : i32
    %90 = arith.addi %89, %c256_i32_43 : i32
    call @f34(%arg0, %86, %88, %90) : (!llvm.ptr, i32, i32, i32) -> ()
    %91 = llvm.load %5 : !llvm.ptr -> i32
    %c256_i32_44 = arith.constant 256 : i32
    %92 = arith.addi %91, %c256_i32_44 : i32
    call @f81(%arg0, %92) : (!llvm.ptr, i32) -> ()
    %93 = llvm.load %5 : !llvm.ptr -> i32
    %c40_i32 = arith.constant 40 : i32
    %94 = arith.addi %93, %c40_i32 : i32
    %95 = llvm.load %5 : !llvm.ptr -> i32
    %c8_i32_45 = arith.constant 8 : i32
    %96 = arith.addi %95, %c8_i32_45 : i32
    %97 = llvm.load %5 : !llvm.ptr -> i32
    %c256_i32_46 = arith.constant 256 : i32
    %98 = arith.addi %97, %c256_i32_46 : i32
    call @f33(%arg0, %94, %96, %98) : (!llvm.ptr, i32, i32, i32) -> ()
    %99 = llvm.load %5 : !llvm.ptr -> i32
    %c72_i64 = arith.constant 72 : i64
    %100 = arith.extui %99 : i32 to i64
    %101 = arith.addi %100, %c72_i64 : i64
    %c4_i64_47 = arith.constant 4 : i64
    %102 = arith.addi %101, %c4_i64_47 : i64
    %c0_i32_48 = arith.constant 0 : i32
    %103 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_48) : (!llvm.ptr, i32) -> i32
    %104 = arith.extui %103 : i32 to i64
    %c65536_i64_49 = arith.constant 65536 : i64
    %105 = arith.muli %104, %c65536_i64_49 : i64
    %106 = arith.cmpi ult, %102, %105 : i64
    cf.cond_br %106, ^bb17, ^bb18
  ^bb14:  // pred: ^bb11
    %c1_i32_50 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_50) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // 2 preds: ^bb16, ^bb19
    %c24_i32 = arith.constant 24 : i32
    llvm.store %c24_i32, %7 : i32, !llvm.ptr
    %107 = llvm.load %5 : !llvm.ptr -> i32
    %c120_i32 = arith.constant 120 : i32
    %108 = arith.addi %107, %c120_i32 : i32
    %c24_i32_51 = arith.constant 24 : i32
    %109 = arith.addi %108, %c24_i32_51 : i32
    %110 = llvm.load %6 : !llvm.ptr -> i32
    %c24_i32_52 = arith.constant 24 : i32
    %111 = arith.addi %110, %c24_i32_52 : i32
    %c0_i64_53 = arith.constant 0 : i64
    %112 = arith.extui %111 : i32 to i64
    %113 = arith.addi %112, %c0_i64_53 : i64
    %c8_i64_54 = arith.constant 8 : i64
    %114 = arith.addi %113, %c8_i64_54 : i64
    %c0_i32_55 = arith.constant 0 : i32
    %115 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_55) : (!llvm.ptr, i32) -> i32
    %116 = arith.extui %115 : i32 to i64
    %c65536_i64_56 = arith.constant 65536 : i64
    %117 = arith.muli %116, %c65536_i64_56 : i64
    %118 = arith.cmpi ult, %114, %117 : i64
    cf.cond_br %118, ^bb20, ^bb21
  ^bb16:  // pred: ^bb17
    %119 = llvm.load %5 : !llvm.ptr -> i32
    %c80_i32 = arith.constant 80 : i32
    %120 = arith.addi %119, %c80_i32 : i32
    llvm.store %120, %6 : i32, !llvm.ptr
    cf.br ^bb15
  ^bb17:  // 2 preds: ^bb13, ^bb18
    %121 = llvm.getelementptr %19[%101] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %122 = llvm.load volatile %121 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_57 = arith.constant 0 : i32
    %123 = arith.cmpi ne, %122, %c0_i32_57 : i32
    cf.cond_br %123, ^bb16, ^bb19
  ^bb18:  // pred: ^bb13
    %c1_i32_58 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_58) : (i32) -> ()
    cf.br ^bb17
  ^bb19:  // pred: ^bb17
    %124 = llvm.load %5 : !llvm.ptr -> i32
    %c40_i32_59 = arith.constant 40 : i32
    %125 = arith.addi %124, %c40_i32_59 : i32
    %c32_i32_60 = arith.constant 32 : i32
    %126 = arith.addi %125, %c32_i32_60 : i32
    %127 = llvm.load %5 : !llvm.ptr -> i32
    %c40_i32_61 = arith.constant 40 : i32
    %128 = arith.addi %127, %c40_i32_61 : i32
    %129 = call @f0(%arg0, %126, %128) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %129, %6 : i32, !llvm.ptr
    cf.br ^bb15
  ^bb20:  // 2 preds: ^bb15, ^bb21
    %130 = llvm.getelementptr %19[%113] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %131 = llvm.load volatile %130 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_62 = arith.constant 0 : i64
    %132 = arith.extui %109 : i32 to i64
    %133 = arith.addi %132, %c0_i64_62 : i64
    %c8_i64_63 = arith.constant 8 : i64
    %134 = arith.addi %133, %c8_i64_63 : i64
    %c0_i32_64 = arith.constant 0 : i32
    %135 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_64) : (!llvm.ptr, i32) -> i32
    %136 = arith.extui %135 : i32 to i64
    %c65536_i64_65 = arith.constant 65536 : i64
    %137 = arith.muli %136, %c65536_i64_65 : i64
    %138 = arith.cmpi ult, %134, %137 : i64
    cf.cond_br %138, ^bb22, ^bb23
  ^bb21:  // pred: ^bb15
    %c1_i32_66 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_66) : (i32) -> ()
    cf.br ^bb20
  ^bb22:  // 2 preds: ^bb20, ^bb23
    %139 = llvm.getelementptr %19[%133] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %131, %139 {alignment = 1 : i64} : i64, !llvm.ptr
    %140 = llvm.load %5 : !llvm.ptr -> i32
    %c120_i32_67 = arith.constant 120 : i32
    %141 = arith.addi %140, %c120_i32_67 : i32
    %c16_i32_68 = arith.constant 16 : i32
    %142 = arith.addi %141, %c16_i32_68 : i32
    %143 = llvm.load %6 : !llvm.ptr -> i32
    %c16_i32_69 = arith.constant 16 : i32
    %144 = arith.addi %143, %c16_i32_69 : i32
    %c0_i64_70 = arith.constant 0 : i64
    %145 = arith.extui %144 : i32 to i64
    %146 = arith.addi %145, %c0_i64_70 : i64
    %c8_i64_71 = arith.constant 8 : i64
    %147 = arith.addi %146, %c8_i64_71 : i64
    %c0_i32_72 = arith.constant 0 : i32
    %148 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_72) : (!llvm.ptr, i32) -> i32
    %149 = arith.extui %148 : i32 to i64
    %c65536_i64_73 = arith.constant 65536 : i64
    %150 = arith.muli %149, %c65536_i64_73 : i64
    %151 = arith.cmpi ult, %147, %150 : i64
    cf.cond_br %151, ^bb24, ^bb25
  ^bb23:  // pred: ^bb20
    %c1_i32_74 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_74) : (i32) -> ()
    cf.br ^bb22
  ^bb24:  // 2 preds: ^bb22, ^bb25
    %152 = llvm.getelementptr %19[%146] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %153 = llvm.load volatile %152 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_75 = arith.constant 0 : i64
    %154 = arith.extui %142 : i32 to i64
    %155 = arith.addi %154, %c0_i64_75 : i64
    %c8_i64_76 = arith.constant 8 : i64
    %156 = arith.addi %155, %c8_i64_76 : i64
    %c0_i32_77 = arith.constant 0 : i32
    %157 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_77) : (!llvm.ptr, i32) -> i32
    %158 = arith.extui %157 : i32 to i64
    %c65536_i64_78 = arith.constant 65536 : i64
    %159 = arith.muli %158, %c65536_i64_78 : i64
    %160 = arith.cmpi ult, %156, %159 : i64
    cf.cond_br %160, ^bb26, ^bb27
  ^bb25:  // pred: ^bb22
    %c1_i32_79 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_79) : (i32) -> ()
    cf.br ^bb24
  ^bb26:  // 2 preds: ^bb24, ^bb27
    %161 = llvm.getelementptr %19[%155] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %153, %161 {alignment = 1 : i64} : i64, !llvm.ptr
    %162 = llvm.load %5 : !llvm.ptr -> i32
    %c120_i32_80 = arith.constant 120 : i32
    %163 = arith.addi %162, %c120_i32_80 : i32
    %c8_i32_81 = arith.constant 8 : i32
    %164 = arith.addi %163, %c8_i32_81 : i32
    %165 = llvm.load %6 : !llvm.ptr -> i32
    %c8_i32_82 = arith.constant 8 : i32
    %166 = arith.addi %165, %c8_i32_82 : i32
    %c0_i64_83 = arith.constant 0 : i64
    %167 = arith.extui %166 : i32 to i64
    %168 = arith.addi %167, %c0_i64_83 : i64
    %c8_i64_84 = arith.constant 8 : i64
    %169 = arith.addi %168, %c8_i64_84 : i64
    %c0_i32_85 = arith.constant 0 : i32
    %170 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_85) : (!llvm.ptr, i32) -> i32
    %171 = arith.extui %170 : i32 to i64
    %c65536_i64_86 = arith.constant 65536 : i64
    %172 = arith.muli %171, %c65536_i64_86 : i64
    %173 = arith.cmpi ult, %169, %172 : i64
    cf.cond_br %173, ^bb28, ^bb29
  ^bb27:  // pred: ^bb24
    %c1_i32_87 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_87) : (i32) -> ()
    cf.br ^bb26
  ^bb28:  // 2 preds: ^bb26, ^bb29
    %174 = llvm.getelementptr %19[%168] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %175 = llvm.load volatile %174 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_88 = arith.constant 0 : i64
    %176 = arith.extui %164 : i32 to i64
    %177 = arith.addi %176, %c0_i64_88 : i64
    %c8_i64_89 = arith.constant 8 : i64
    %178 = arith.addi %177, %c8_i64_89 : i64
    %c0_i32_90 = arith.constant 0 : i32
    %179 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_90) : (!llvm.ptr, i32) -> i32
    %180 = arith.extui %179 : i32 to i64
    %c65536_i64_91 = arith.constant 65536 : i64
    %181 = arith.muli %180, %c65536_i64_91 : i64
    %182 = arith.cmpi ult, %178, %181 : i64
    cf.cond_br %182, ^bb30, ^bb31
  ^bb29:  // pred: ^bb26
    %c1_i32_92 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_92) : (i32) -> ()
    cf.br ^bb28
  ^bb30:  // 2 preds: ^bb28, ^bb31
    %183 = llvm.getelementptr %19[%177] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %175, %183 {alignment = 1 : i64} : i64, !llvm.ptr
    %184 = llvm.load %5 : !llvm.ptr -> i32
    %185 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_93 = arith.constant 0 : i64
    %186 = arith.extui %185 : i32 to i64
    %187 = arith.addi %186, %c0_i64_93 : i64
    %c8_i64_94 = arith.constant 8 : i64
    %188 = arith.addi %187, %c8_i64_94 : i64
    %c0_i32_95 = arith.constant 0 : i32
    %189 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_95) : (!llvm.ptr, i32) -> i32
    %190 = arith.extui %189 : i32 to i64
    %c65536_i64_96 = arith.constant 65536 : i64
    %191 = arith.muli %190, %c65536_i64_96 : i64
    %192 = arith.cmpi ult, %188, %191 : i64
    cf.cond_br %192, ^bb32, ^bb33
  ^bb31:  // pred: ^bb28
    %c1_i32_97 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_97) : (i32) -> ()
    cf.br ^bb30
  ^bb32:  // 2 preds: ^bb30, ^bb33
    %193 = llvm.getelementptr %19[%187] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %194 = llvm.load volatile %193 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c120_i64 = arith.constant 120 : i64
    %195 = arith.extui %184 : i32 to i64
    %196 = arith.addi %195, %c120_i64 : i64
    %c8_i64_98 = arith.constant 8 : i64
    %197 = arith.addi %196, %c8_i64_98 : i64
    %c0_i32_99 = arith.constant 0 : i32
    %198 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_99) : (!llvm.ptr, i32) -> i32
    %199 = arith.extui %198 : i32 to i64
    %c65536_i64_100 = arith.constant 65536 : i64
    %200 = arith.muli %199, %c65536_i64_100 : i64
    %201 = arith.cmpi ult, %197, %200 : i64
    cf.cond_br %201, ^bb34, ^bb35
  ^bb33:  // pred: ^bb30
    %c1_i32_101 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_101) : (i32) -> ()
    cf.br ^bb32
  ^bb34:  // 2 preds: ^bb32, ^bb35
    %202 = llvm.getelementptr %19[%196] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %194, %202 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb40
  ^bb35:  // pred: ^bb32
    %c1_i32_102 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_102) : (i32) -> ()
    cf.br ^bb34
  ^bb36:  // 3 preds: ^bb113, ^bb115, ^bb161
    %203 = llvm.load %5 : !llvm.ptr -> i32
    %c400_i32_103 = arith.constant 400 : i32
    %204 = arith.addi %203, %c400_i32_103 : i32
    llvm.store %204, %16 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb37:  // pred: ^bb39
    %205 = llvm.load %5 : !llvm.ptr -> i32
    %c236_i32 = arith.constant 236 : i32
    %206 = arith.addi %205, %c236_i32 : i32
    call @f81(%arg0, %206) : (!llvm.ptr, i32) -> ()
    %207 = llvm.load %5 : !llvm.ptr -> i32
    %c232_i32 = arith.constant 232 : i32
    %208 = arith.addi %207, %c232_i32 : i32
    %209 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_104 = arith.constant 16 : i32
    %210 = arith.addi %209, %c16_i32_104 : i32
    %c0_i64_105 = arith.constant 0 : i64
    %211 = arith.extui %210 : i32 to i64
    %212 = arith.addi %211, %c0_i64_105 : i64
    %c4_i64_106 = arith.constant 4 : i64
    %213 = arith.addi %212, %c4_i64_106 : i64
    %c0_i32_107 = arith.constant 0 : i32
    %214 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_107) : (!llvm.ptr, i32) -> i32
    %215 = arith.extui %214 : i32 to i64
    %c65536_i64_108 = arith.constant 65536 : i64
    %216 = arith.muli %215, %c65536_i64_108 : i64
    %217 = arith.cmpi ult, %213, %216 : i64
    cf.cond_br %217, ^bb117, ^bb118
  ^bb38:  // 2 preds: ^bb40, ^bb47
    %218 = llvm.load %5 : !llvm.ptr -> i32
    %c368_i32 = arith.constant 368 : i32
    %219 = arith.addi %218, %c368_i32 : i32
    %c24_i32_109 = arith.constant 24 : i32
    %220 = arith.addi %219, %c24_i32_109 : i32
    %221 = llvm.load %6 : !llvm.ptr -> i32
    %c24_i32_110 = arith.constant 24 : i32
    %222 = arith.addi %221, %c24_i32_110 : i32
    %c0_i64_111 = arith.constant 0 : i64
    %223 = arith.extui %222 : i32 to i64
    %224 = arith.addi %223, %c0_i64_111 : i64
    %c8_i64_112 = arith.constant 8 : i64
    %225 = arith.addi %224, %c8_i64_112 : i64
    %c0_i32_113 = arith.constant 0 : i32
    %226 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_113) : (!llvm.ptr, i32) -> i32
    %227 = arith.extui %226 : i32 to i64
    %c65536_i64_114 = arith.constant 65536 : i64
    %228 = arith.muli %227, %c65536_i64_114 : i64
    %229 = arith.cmpi ult, %225, %228 : i64
    cf.cond_br %229, ^bb48, ^bb49
  ^bb39:  // pred: ^bb46
    %230 = llvm.load %8 : !llvm.ptr -> i32
    %c255_i32 = arith.constant 255 : i32
    %231 = arith.andi %230, %c255_i32 : i32
    %c255_i32_115 = arith.constant 255 : i32
    %232 = arith.cmpi eq, %231, %c255_i32_115 : i32
    %233 = arith.extui %232 : i1 to i32
    %c0_i32_116 = arith.constant 0 : i32
    %234 = arith.cmpi ne, %233, %c0_i32_116 : i32
    cf.cond_br %234, ^bb37, ^bb47
  ^bb40:  // 2 preds: ^bb34, ^bb44
    %235 = llvm.load %7 : !llvm.ptr -> i32
    %c-8_i32 = arith.constant -8 : i32
    %236 = arith.addi %235, %c-8_i32 : i32
    llvm.store %236, %8 : i32, !llvm.ptr
    %c-16_i32 = arith.constant -16 : i32
    %237 = arith.cmpi eq, %236, %c-16_i32 : i32
    %238 = arith.extui %237 : i1 to i32
    %c0_i32_117 = arith.constant 0 : i32
    %239 = arith.cmpi ne, %238, %c0_i32_117 : i32
    cf.cond_br %239, ^bb38, ^bb41
  ^bb41:  // pred: ^bb40
    %240 = llvm.load %4 : !llvm.ptr -> i32
    %241 = llvm.load %7 : !llvm.ptr -> i32
    %242 = arith.addi %240, %241 : i32
    llvm.store %242, %9 : i32, !llvm.ptr
    %243 = llvm.load %5 : !llvm.ptr -> i32
    %c120_i32_118 = arith.constant 120 : i32
    %244 = arith.addi %243, %c120_i32_118 : i32
    %245 = llvm.load %7 : !llvm.ptr -> i32
    %246 = arith.addi %244, %245 : i32
    llvm.store %246, %10 : i32, !llvm.ptr
    %247 = llvm.load %8 : !llvm.ptr -> i32
    llvm.store %247, %7 : i32, !llvm.ptr
    %248 = llvm.load %10 : !llvm.ptr -> i32
    %c0_i64_119 = arith.constant 0 : i64
    %249 = arith.extui %248 : i32 to i64
    %250 = arith.addi %249, %c0_i64_119 : i64
    %c8_i64_120 = arith.constant 8 : i64
    %251 = arith.addi %250, %c8_i64_120 : i64
    %c0_i32_121 = arith.constant 0 : i32
    %252 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_121) : (!llvm.ptr, i32) -> i32
    %253 = arith.extui %252 : i32 to i64
    %c65536_i64_122 = arith.constant 65536 : i64
    %254 = arith.muli %253, %c65536_i64_122 : i64
    %255 = arith.cmpi ult, %251, %254 : i64
    cf.cond_br %255, ^bb42, ^bb43
  ^bb42:  // 2 preds: ^bb41, ^bb43
    %256 = llvm.getelementptr %19[%250] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %257 = llvm.load volatile %256 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %257, %11 : i64, !llvm.ptr
    %258 = llvm.load %9 : !llvm.ptr -> i32
    %c0_i64_123 = arith.constant 0 : i64
    %259 = arith.extui %258 : i32 to i64
    %260 = arith.addi %259, %c0_i64_123 : i64
    %c8_i64_124 = arith.constant 8 : i64
    %261 = arith.addi %260, %c8_i64_124 : i64
    %c0_i32_125 = arith.constant 0 : i32
    %262 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_125) : (!llvm.ptr, i32) -> i32
    %263 = arith.extui %262 : i32 to i64
    %c65536_i64_126 = arith.constant 65536 : i64
    %264 = arith.muli %263, %c65536_i64_126 : i64
    %265 = arith.cmpi ult, %261, %264 : i64
    cf.cond_br %265, ^bb44, ^bb45
  ^bb43:  // pred: ^bb41
    %c1_i32_127 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_127) : (i32) -> ()
    cf.br ^bb42
  ^bb44:  // 2 preds: ^bb42, ^bb45
    %266 = llvm.getelementptr %19[%260] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %267 = llvm.load volatile %266 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %267, %12 : i64, !llvm.ptr
    %268 = arith.cmpi ugt, %257, %267 : i64
    %269 = arith.extui %268 : i1 to i64
    %270 = arith.trunci %269 : i64 to i32
    %271 = llvm.load %11 : !llvm.ptr -> i64
    %272 = llvm.load %12 : !llvm.ptr -> i64
    %273 = arith.cmpi ult, %271, %272 : i64
    %274 = arith.extui %273 : i1 to i64
    %275 = arith.trunci %274 : i64 to i32
    %276 = arith.subi %270, %275 : i32
    llvm.store %276, %8 : i32, !llvm.ptr
    %c0_i32_128 = arith.constant 0 : i32
    %277 = arith.cmpi eq, %276, %c0_i32_128 : i32
    %278 = arith.extui %277 : i1 to i32
    %c0_i32_129 = arith.constant 0 : i32
    %279 = arith.cmpi ne, %278, %c0_i32_129 : i32
    cf.cond_br %279, ^bb40, ^bb46
  ^bb45:  // pred: ^bb42
    %c1_i32_130 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_130) : (i32) -> ()
    cf.br ^bb44
  ^bb46:  // pred: ^bb44
    cf.br ^bb39
  ^bb47:  // pred: ^bb39
    cf.br ^bb38
  ^bb48:  // 2 preds: ^bb38, ^bb49
    %280 = llvm.getelementptr %19[%224] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %281 = llvm.load volatile %280 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_131 = arith.constant 0 : i64
    %282 = arith.extui %220 : i32 to i64
    %283 = arith.addi %282, %c0_i64_131 : i64
    %c8_i64_132 = arith.constant 8 : i64
    %284 = arith.addi %283, %c8_i64_132 : i64
    %c0_i32_133 = arith.constant 0 : i32
    %285 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_133) : (!llvm.ptr, i32) -> i32
    %286 = arith.extui %285 : i32 to i64
    %c65536_i64_134 = arith.constant 65536 : i64
    %287 = arith.muli %286, %c65536_i64_134 : i64
    %288 = arith.cmpi ult, %284, %287 : i64
    cf.cond_br %288, ^bb50, ^bb51
  ^bb49:  // pred: ^bb38
    %c1_i32_135 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_135) : (i32) -> ()
    cf.br ^bb48
  ^bb50:  // 2 preds: ^bb48, ^bb51
    %289 = llvm.getelementptr %19[%283] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %281, %289 {alignment = 1 : i64} : i64, !llvm.ptr
    %290 = llvm.load %5 : !llvm.ptr -> i32
    %c368_i32_136 = arith.constant 368 : i32
    %291 = arith.addi %290, %c368_i32_136 : i32
    %c16_i32_137 = arith.constant 16 : i32
    %292 = arith.addi %291, %c16_i32_137 : i32
    %293 = llvm.load %6 : !llvm.ptr -> i32
    %c16_i32_138 = arith.constant 16 : i32
    %294 = arith.addi %293, %c16_i32_138 : i32
    %c0_i64_139 = arith.constant 0 : i64
    %295 = arith.extui %294 : i32 to i64
    %296 = arith.addi %295, %c0_i64_139 : i64
    %c8_i64_140 = arith.constant 8 : i64
    %297 = arith.addi %296, %c8_i64_140 : i64
    %c0_i32_141 = arith.constant 0 : i32
    %298 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_141) : (!llvm.ptr, i32) -> i32
    %299 = arith.extui %298 : i32 to i64
    %c65536_i64_142 = arith.constant 65536 : i64
    %300 = arith.muli %299, %c65536_i64_142 : i64
    %301 = arith.cmpi ult, %297, %300 : i64
    cf.cond_br %301, ^bb52, ^bb53
  ^bb51:  // pred: ^bb48
    %c1_i32_143 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_143) : (i32) -> ()
    cf.br ^bb50
  ^bb52:  // 2 preds: ^bb50, ^bb53
    %302 = llvm.getelementptr %19[%296] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %303 = llvm.load volatile %302 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_144 = arith.constant 0 : i64
    %304 = arith.extui %292 : i32 to i64
    %305 = arith.addi %304, %c0_i64_144 : i64
    %c8_i64_145 = arith.constant 8 : i64
    %306 = arith.addi %305, %c8_i64_145 : i64
    %c0_i32_146 = arith.constant 0 : i32
    %307 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_146) : (!llvm.ptr, i32) -> i32
    %308 = arith.extui %307 : i32 to i64
    %c65536_i64_147 = arith.constant 65536 : i64
    %309 = arith.muli %308, %c65536_i64_147 : i64
    %310 = arith.cmpi ult, %306, %309 : i64
    cf.cond_br %310, ^bb54, ^bb55
  ^bb53:  // pred: ^bb50
    %c1_i32_148 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_148) : (i32) -> ()
    cf.br ^bb52
  ^bb54:  // 2 preds: ^bb52, ^bb55
    %311 = llvm.getelementptr %19[%305] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %303, %311 {alignment = 1 : i64} : i64, !llvm.ptr
    %312 = llvm.load %5 : !llvm.ptr -> i32
    %c368_i32_149 = arith.constant 368 : i32
    %313 = arith.addi %312, %c368_i32_149 : i32
    %c8_i32_150 = arith.constant 8 : i32
    %314 = arith.addi %313, %c8_i32_150 : i32
    %315 = llvm.load %6 : !llvm.ptr -> i32
    %c8_i32_151 = arith.constant 8 : i32
    %316 = arith.addi %315, %c8_i32_151 : i32
    %c0_i64_152 = arith.constant 0 : i64
    %317 = arith.extui %316 : i32 to i64
    %318 = arith.addi %317, %c0_i64_152 : i64
    %c8_i64_153 = arith.constant 8 : i64
    %319 = arith.addi %318, %c8_i64_153 : i64
    %c0_i32_154 = arith.constant 0 : i32
    %320 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_154) : (!llvm.ptr, i32) -> i32
    %321 = arith.extui %320 : i32 to i64
    %c65536_i64_155 = arith.constant 65536 : i64
    %322 = arith.muli %321, %c65536_i64_155 : i64
    %323 = arith.cmpi ult, %319, %322 : i64
    cf.cond_br %323, ^bb56, ^bb57
  ^bb55:  // pred: ^bb52
    %c1_i32_156 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_156) : (i32) -> ()
    cf.br ^bb54
  ^bb56:  // 2 preds: ^bb54, ^bb57
    %324 = llvm.getelementptr %19[%318] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %325 = llvm.load volatile %324 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_157 = arith.constant 0 : i64
    %326 = arith.extui %314 : i32 to i64
    %327 = arith.addi %326, %c0_i64_157 : i64
    %c8_i64_158 = arith.constant 8 : i64
    %328 = arith.addi %327, %c8_i64_158 : i64
    %c0_i32_159 = arith.constant 0 : i32
    %329 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_159) : (!llvm.ptr, i32) -> i32
    %330 = arith.extui %329 : i32 to i64
    %c65536_i64_160 = arith.constant 65536 : i64
    %331 = arith.muli %330, %c65536_i64_160 : i64
    %332 = arith.cmpi ult, %328, %331 : i64
    cf.cond_br %332, ^bb58, ^bb59
  ^bb57:  // pred: ^bb54
    %c1_i32_161 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_161) : (i32) -> ()
    cf.br ^bb56
  ^bb58:  // 2 preds: ^bb56, ^bb59
    %333 = llvm.getelementptr %19[%327] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %325, %333 {alignment = 1 : i64} : i64, !llvm.ptr
    %334 = llvm.load %5 : !llvm.ptr -> i32
    %335 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_162 = arith.constant 0 : i64
    %336 = arith.extui %335 : i32 to i64
    %337 = arith.addi %336, %c0_i64_162 : i64
    %c8_i64_163 = arith.constant 8 : i64
    %338 = arith.addi %337, %c8_i64_163 : i64
    %c0_i32_164 = arith.constant 0 : i32
    %339 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_164) : (!llvm.ptr, i32) -> i32
    %340 = arith.extui %339 : i32 to i64
    %c65536_i64_165 = arith.constant 65536 : i64
    %341 = arith.muli %340, %c65536_i64_165 : i64
    %342 = arith.cmpi ult, %338, %341 : i64
    cf.cond_br %342, ^bb60, ^bb61
  ^bb59:  // pred: ^bb56
    %c1_i32_166 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_166) : (i32) -> ()
    cf.br ^bb58
  ^bb60:  // 2 preds: ^bb58, ^bb61
    %343 = llvm.getelementptr %19[%337] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %344 = llvm.load volatile %343 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c368_i64 = arith.constant 368 : i64
    %345 = arith.extui %334 : i32 to i64
    %346 = arith.addi %345, %c368_i64 : i64
    %c8_i64_167 = arith.constant 8 : i64
    %347 = arith.addi %346, %c8_i64_167 : i64
    %c0_i32_168 = arith.constant 0 : i32
    %348 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_168) : (!llvm.ptr, i32) -> i32
    %349 = arith.extui %348 : i32 to i64
    %c65536_i64_169 = arith.constant 65536 : i64
    %350 = arith.muli %349, %c65536_i64_169 : i64
    %351 = arith.cmpi ult, %347, %350 : i64
    cf.cond_br %351, ^bb62, ^bb63
  ^bb61:  // pred: ^bb58
    %c1_i32_170 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_170) : (i32) -> ()
    cf.br ^bb60
  ^bb62:  // 2 preds: ^bb60, ^bb63
    %352 = llvm.getelementptr %19[%346] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %344, %352 {alignment = 1 : i64} : i64, !llvm.ptr
    %c0_i32_171 = arith.constant 0 : i32
    llvm.store %c0_i32_171, %7 : i32, !llvm.ptr
    %c0_i32_172 = arith.constant 0 : i32
    llvm.store %c0_i32_172, %8 : i32, !llvm.ptr
    cf.br ^bb65
  ^bb63:  // pred: ^bb60
    %c1_i32_173 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_173) : (i32) -> ()
    cf.br ^bb62
  ^bb64:  // pred: ^bb72
    %353 = llvm.load %5 : !llvm.ptr -> i32
    %c88_i32 = arith.constant 88 : i32
    %354 = arith.addi %353, %c88_i32 : i32
    %355 = llvm.load %5 : !llvm.ptr -> i32
    %c368_i32_174 = arith.constant 368 : i32
    %356 = arith.addi %355, %c368_i32_174 : i32
    %c8_i32_175 = arith.constant 8 : i32
    %357 = arith.addi %356, %c8_i32_175 : i32
    %c0_i64_176 = arith.constant 0 : i64
    %358 = arith.extui %357 : i32 to i64
    %359 = arith.addi %358, %c0_i64_176 : i64
    %c8_i64_177 = arith.constant 8 : i64
    %360 = arith.addi %359, %c8_i64_177 : i64
    %c0_i32_178 = arith.constant 0 : i32
    %361 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_178) : (!llvm.ptr, i32) -> i32
    %362 = arith.extui %361 : i32 to i64
    %c65536_i64_179 = arith.constant 65536 : i64
    %363 = arith.muli %362, %c65536_i64_179 : i64
    %364 = arith.cmpi ult, %360, %363 : i64
    cf.cond_br %364, ^bb73, ^bb74
  ^bb65:  // 2 preds: ^bb62, ^bb70
    %365 = llvm.load %5 : !llvm.ptr -> i32
    %c368_i32_180 = arith.constant 368 : i32
    %366 = arith.addi %365, %c368_i32_180 : i32
    %367 = llvm.load %7 : !llvm.ptr -> i32
    %368 = arith.addi %366, %367 : i32
    llvm.store %368, %9 : i32, !llvm.ptr
    %369 = llvm.load %9 : !llvm.ptr -> i32
    %c0_i64_181 = arith.constant 0 : i64
    %370 = arith.extui %369 : i32 to i64
    %371 = arith.addi %370, %c0_i64_181 : i64
    %c8_i64_182 = arith.constant 8 : i64
    %372 = arith.addi %371, %c8_i64_182 : i64
    %c0_i32_183 = arith.constant 0 : i32
    %373 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_183) : (!llvm.ptr, i32) -> i32
    %374 = arith.extui %373 : i32 to i64
    %c65536_i64_184 = arith.constant 65536 : i64
    %375 = arith.muli %374, %c65536_i64_184 : i64
    %376 = arith.cmpi ult, %372, %375 : i64
    cf.cond_br %376, ^bb66, ^bb67
  ^bb66:  // 2 preds: ^bb65, ^bb67
    %377 = llvm.getelementptr %19[%371] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %378 = llvm.load volatile %377 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %378, %11 : i64, !llvm.ptr
    %379 = llvm.load %4 : !llvm.ptr -> i32
    %380 = llvm.load %7 : !llvm.ptr -> i32
    %381 = arith.addi %379, %380 : i32
    %c0_i64_185 = arith.constant 0 : i64
    %382 = arith.extui %381 : i32 to i64
    %383 = arith.addi %382, %c0_i64_185 : i64
    %c8_i64_186 = arith.constant 8 : i64
    %384 = arith.addi %383, %c8_i64_186 : i64
    %c0_i32_187 = arith.constant 0 : i32
    %385 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_187) : (!llvm.ptr, i32) -> i32
    %386 = arith.extui %385 : i32 to i64
    %c65536_i64_188 = arith.constant 65536 : i64
    %387 = arith.muli %386, %c65536_i64_188 : i64
    %388 = arith.cmpi ult, %384, %387 : i64
    cf.cond_br %388, ^bb68, ^bb69
  ^bb67:  // pred: ^bb65
    %c1_i32_189 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_189) : (i32) -> ()
    cf.br ^bb66
  ^bb68:  // 2 preds: ^bb66, ^bb69
    %389 = llvm.getelementptr %19[%383] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %390 = llvm.load volatile %389 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %390, %12 : i64, !llvm.ptr
    %391 = arith.subi %378, %390 : i64
    llvm.store %391, %13 : i64, !llvm.ptr
    %392 = llvm.load %8 : !llvm.ptr -> i32
    %393 = arith.extui %392 : i32 to i64
    %c1_i64 = arith.constant 1 : i64
    %394 = arith.andi %393, %c1_i64 : i64
    llvm.store %394, %14 : i64, !llvm.ptr
    %395 = arith.subi %391, %394 : i64
    %c0_i64_190 = arith.constant 0 : i64
    %396 = arith.extui %368 : i32 to i64
    %397 = arith.addi %396, %c0_i64_190 : i64
    %c8_i64_191 = arith.constant 8 : i64
    %398 = arith.addi %397, %c8_i64_191 : i64
    %c0_i32_192 = arith.constant 0 : i32
    %399 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_192) : (!llvm.ptr, i32) -> i32
    %400 = arith.extui %399 : i32 to i64
    %c65536_i64_193 = arith.constant 65536 : i64
    %401 = arith.muli %400, %c65536_i64_193 : i64
    %402 = arith.cmpi ult, %398, %401 : i64
    cf.cond_br %402, ^bb70, ^bb71
  ^bb69:  // pred: ^bb66
    %c1_i32_194 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_194) : (i32) -> ()
    cf.br ^bb68
  ^bb70:  // 2 preds: ^bb68, ^bb71
    %403 = llvm.getelementptr %19[%397] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %395, %403 {alignment = 1 : i64} : i64, !llvm.ptr
    %404 = llvm.load %11 : !llvm.ptr -> i64
    %405 = llvm.load %12 : !llvm.ptr -> i64
    %406 = arith.cmpi ult, %404, %405 : i64
    %407 = arith.extui %406 : i1 to i64
    %408 = arith.trunci %407 : i64 to i32
    %409 = llvm.load %13 : !llvm.ptr -> i64
    %410 = llvm.load %14 : !llvm.ptr -> i64
    %411 = arith.cmpi ult, %409, %410 : i64
    %412 = arith.extui %411 : i1 to i64
    %413 = arith.trunci %412 : i64 to i32
    %414 = arith.ori %408, %413 : i32
    llvm.store %414, %8 : i32, !llvm.ptr
    %415 = llvm.load %7 : !llvm.ptr -> i32
    %c8_i32_195 = arith.constant 8 : i32
    %416 = arith.addi %415, %c8_i32_195 : i32
    llvm.store %416, %7 : i32, !llvm.ptr
    %c32_i32_196 = arith.constant 32 : i32
    %417 = arith.cmpi eq, %416, %c32_i32_196 : i32
    %418 = arith.extui %417 : i1 to i32
    %c0_i32_197 = arith.constant 0 : i32
    %419 = arith.cmpi eq, %418, %c0_i32_197 : i32
    %420 = arith.extui %419 : i1 to i32
    %c0_i32_198 = arith.constant 0 : i32
    %421 = arith.cmpi ne, %420, %c0_i32_198 : i32
    cf.cond_br %421, ^bb65, ^bb72
  ^bb71:  // pred: ^bb68
    %c1_i32_199 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_199) : (i32) -> ()
    cf.br ^bb70
  ^bb72:  // pred: ^bb70
    cf.br ^bb64
  ^bb73:  // 2 preds: ^bb64, ^bb74
    %422 = llvm.getelementptr %19[%359] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %423 = llvm.load volatile %422 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_200 = arith.constant 0 : i64
    %424 = arith.extui %354 : i32 to i64
    %425 = arith.addi %424, %c0_i64_200 : i64
    %c8_i64_201 = arith.constant 8 : i64
    %426 = arith.addi %425, %c8_i64_201 : i64
    %c0_i32_202 = arith.constant 0 : i32
    %427 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_202) : (!llvm.ptr, i32) -> i32
    %428 = arith.extui %427 : i32 to i64
    %c65536_i64_203 = arith.constant 65536 : i64
    %429 = arith.muli %428, %c65536_i64_203 : i64
    %430 = arith.cmpi ult, %426, %429 : i64
    cf.cond_br %430, ^bb75, ^bb76
  ^bb74:  // pred: ^bb64
    %c1_i32_204 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_204) : (i32) -> ()
    cf.br ^bb73
  ^bb75:  // 2 preds: ^bb73, ^bb76
    %431 = llvm.getelementptr %19[%425] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %423, %431 {alignment = 1 : i64} : i64, !llvm.ptr
    %432 = llvm.load %5 : !llvm.ptr -> i32
    %c96_i32 = arith.constant 96 : i32
    %433 = arith.addi %432, %c96_i32 : i32
    %434 = llvm.load %5 : !llvm.ptr -> i32
    %c368_i32_205 = arith.constant 368 : i32
    %435 = arith.addi %434, %c368_i32_205 : i32
    %c16_i32_206 = arith.constant 16 : i32
    %436 = arith.addi %435, %c16_i32_206 : i32
    %c0_i64_207 = arith.constant 0 : i64
    %437 = arith.extui %436 : i32 to i64
    %438 = arith.addi %437, %c0_i64_207 : i64
    %c8_i64_208 = arith.constant 8 : i64
    %439 = arith.addi %438, %c8_i64_208 : i64
    %c0_i32_209 = arith.constant 0 : i32
    %440 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_209) : (!llvm.ptr, i32) -> i32
    %441 = arith.extui %440 : i32 to i64
    %c65536_i64_210 = arith.constant 65536 : i64
    %442 = arith.muli %441, %c65536_i64_210 : i64
    %443 = arith.cmpi ult, %439, %442 : i64
    cf.cond_br %443, ^bb77, ^bb78
  ^bb76:  // pred: ^bb73
    %c1_i32_211 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_211) : (i32) -> ()
    cf.br ^bb75
  ^bb77:  // 2 preds: ^bb75, ^bb78
    %444 = llvm.getelementptr %19[%438] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %445 = llvm.load volatile %444 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_212 = arith.constant 0 : i64
    %446 = arith.extui %433 : i32 to i64
    %447 = arith.addi %446, %c0_i64_212 : i64
    %c8_i64_213 = arith.constant 8 : i64
    %448 = arith.addi %447, %c8_i64_213 : i64
    %c0_i32_214 = arith.constant 0 : i32
    %449 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_214) : (!llvm.ptr, i32) -> i32
    %450 = arith.extui %449 : i32 to i64
    %c65536_i64_215 = arith.constant 65536 : i64
    %451 = arith.muli %450, %c65536_i64_215 : i64
    %452 = arith.cmpi ult, %448, %451 : i64
    cf.cond_br %452, ^bb79, ^bb80
  ^bb78:  // pred: ^bb75
    %c1_i32_216 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_216) : (i32) -> ()
    cf.br ^bb77
  ^bb79:  // 2 preds: ^bb77, ^bb80
    %453 = llvm.getelementptr %19[%447] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %445, %453 {alignment = 1 : i64} : i64, !llvm.ptr
    %454 = llvm.load %5 : !llvm.ptr -> i32
    %c104_i32 = arith.constant 104 : i32
    %455 = arith.addi %454, %c104_i32 : i32
    %456 = llvm.load %5 : !llvm.ptr -> i32
    %c368_i32_217 = arith.constant 368 : i32
    %457 = arith.addi %456, %c368_i32_217 : i32
    %c24_i32_218 = arith.constant 24 : i32
    %458 = arith.addi %457, %c24_i32_218 : i32
    %c0_i64_219 = arith.constant 0 : i64
    %459 = arith.extui %458 : i32 to i64
    %460 = arith.addi %459, %c0_i64_219 : i64
    %c8_i64_220 = arith.constant 8 : i64
    %461 = arith.addi %460, %c8_i64_220 : i64
    %c0_i32_221 = arith.constant 0 : i32
    %462 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_221) : (!llvm.ptr, i32) -> i32
    %463 = arith.extui %462 : i32 to i64
    %c65536_i64_222 = arith.constant 65536 : i64
    %464 = arith.muli %463, %c65536_i64_222 : i64
    %465 = arith.cmpi ult, %461, %464 : i64
    cf.cond_br %465, ^bb81, ^bb82
  ^bb80:  // pred: ^bb77
    %c1_i32_223 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_223) : (i32) -> ()
    cf.br ^bb79
  ^bb81:  // 2 preds: ^bb79, ^bb82
    %466 = llvm.getelementptr %19[%460] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %467 = llvm.load volatile %466 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_224 = arith.constant 0 : i64
    %468 = arith.extui %455 : i32 to i64
    %469 = arith.addi %468, %c0_i64_224 : i64
    %c8_i64_225 = arith.constant 8 : i64
    %470 = arith.addi %469, %c8_i64_225 : i64
    %c0_i32_226 = arith.constant 0 : i32
    %471 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_226) : (!llvm.ptr, i32) -> i32
    %472 = arith.extui %471 : i32 to i64
    %c65536_i64_227 = arith.constant 65536 : i64
    %473 = arith.muli %472, %c65536_i64_227 : i64
    %474 = arith.cmpi ult, %470, %473 : i64
    cf.cond_br %474, ^bb83, ^bb84
  ^bb82:  // pred: ^bb79
    %c1_i32_228 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_228) : (i32) -> ()
    cf.br ^bb81
  ^bb83:  // 2 preds: ^bb81, ^bb84
    %475 = llvm.getelementptr %19[%469] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %467, %475 {alignment = 1 : i64} : i64, !llvm.ptr
    %476 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i64_229 = arith.constant 1 : i64
    %c72_i64_230 = arith.constant 72 : i64
    %477 = arith.extui %476 : i32 to i64
    %478 = arith.addi %477, %c72_i64_230 : i64
    %c8_i64_231 = arith.constant 8 : i64
    %479 = arith.addi %478, %c8_i64_231 : i64
    %c0_i32_232 = arith.constant 0 : i32
    %480 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_232) : (!llvm.ptr, i32) -> i32
    %481 = arith.extui %480 : i32 to i64
    %c65536_i64_233 = arith.constant 65536 : i64
    %482 = arith.muli %481, %c65536_i64_233 : i64
    %483 = arith.cmpi ult, %479, %482 : i64
    cf.cond_br %483, ^bb85, ^bb86
  ^bb84:  // pred: ^bb81
    %c1_i32_234 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_234) : (i32) -> ()
    cf.br ^bb83
  ^bb85:  // 2 preds: ^bb83, ^bb86
    %484 = llvm.getelementptr %19[%478] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_229, %484 {alignment = 1 : i64} : i64, !llvm.ptr
    %485 = llvm.load %5 : !llvm.ptr -> i32
    %486 = llvm.load %5 : !llvm.ptr -> i32
    %c368_i64_235 = arith.constant 368 : i64
    %487 = arith.extui %486 : i32 to i64
    %488 = arith.addi %487, %c368_i64_235 : i64
    %c8_i64_236 = arith.constant 8 : i64
    %489 = arith.addi %488, %c8_i64_236 : i64
    %c0_i32_237 = arith.constant 0 : i32
    %490 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_237) : (!llvm.ptr, i32) -> i32
    %491 = arith.extui %490 : i32 to i64
    %c65536_i64_238 = arith.constant 65536 : i64
    %492 = arith.muli %491, %c65536_i64_238 : i64
    %493 = arith.cmpi ult, %489, %492 : i64
    cf.cond_br %493, ^bb87, ^bb88
  ^bb86:  // pred: ^bb83
    %c1_i32_239 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_239) : (i32) -> ()
    cf.br ^bb85
  ^bb87:  // 2 preds: ^bb85, ^bb88
    %494 = llvm.getelementptr %19[%488] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %495 = llvm.load volatile %494 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c80_i64 = arith.constant 80 : i64
    %496 = arith.extui %485 : i32 to i64
    %497 = arith.addi %496, %c80_i64 : i64
    %c8_i64_240 = arith.constant 8 : i64
    %498 = arith.addi %497, %c8_i64_240 : i64
    %c0_i32_241 = arith.constant 0 : i32
    %499 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_241) : (!llvm.ptr, i32) -> i32
    %500 = arith.extui %499 : i32 to i64
    %c65536_i64_242 = arith.constant 65536 : i64
    %501 = arith.muli %500, %c65536_i64_242 : i64
    %502 = arith.cmpi ult, %498, %501 : i64
    cf.cond_br %502, ^bb89, ^bb90
  ^bb88:  // pred: ^bb85
    %c1_i32_243 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_243) : (i32) -> ()
    cf.br ^bb87
  ^bb89:  // 2 preds: ^bb87, ^bb90
    %503 = llvm.getelementptr %19[%497] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %495, %503 {alignment = 1 : i64} : i64, !llvm.ptr
    %504 = llvm.load %5 : !llvm.ptr -> i32
    %c256_i32_244 = arith.constant 256 : i32
    %505 = arith.addi %504, %c256_i32_244 : i32
    %c24_i32_245 = arith.constant 24 : i32
    %506 = arith.addi %505, %c24_i32_245 : i32
    %507 = llvm.load %5 : !llvm.ptr -> i32
    %c40_i32_246 = arith.constant 40 : i32
    %508 = arith.addi %507, %c40_i32_246 : i32
    %c24_i32_247 = arith.constant 24 : i32
    %509 = arith.addi %508, %c24_i32_247 : i32
    %c0_i64_248 = arith.constant 0 : i64
    %510 = arith.extui %509 : i32 to i64
    %511 = arith.addi %510, %c0_i64_248 : i64
    %c8_i64_249 = arith.constant 8 : i64
    %512 = arith.addi %511, %c8_i64_249 : i64
    %c0_i32_250 = arith.constant 0 : i32
    %513 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_250) : (!llvm.ptr, i32) -> i32
    %514 = arith.extui %513 : i32 to i64
    %c65536_i64_251 = arith.constant 65536 : i64
    %515 = arith.muli %514, %c65536_i64_251 : i64
    %516 = arith.cmpi ult, %512, %515 : i64
    cf.cond_br %516, ^bb91, ^bb92
  ^bb90:  // pred: ^bb87
    %c1_i32_252 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_252) : (i32) -> ()
    cf.br ^bb89
  ^bb91:  // 2 preds: ^bb89, ^bb92
    %517 = llvm.getelementptr %19[%511] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %518 = llvm.load volatile %517 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_253 = arith.constant 0 : i64
    %519 = arith.extui %506 : i32 to i64
    %520 = arith.addi %519, %c0_i64_253 : i64
    %c8_i64_254 = arith.constant 8 : i64
    %521 = arith.addi %520, %c8_i64_254 : i64
    %c0_i32_255 = arith.constant 0 : i32
    %522 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_255) : (!llvm.ptr, i32) -> i32
    %523 = arith.extui %522 : i32 to i64
    %c65536_i64_256 = arith.constant 65536 : i64
    %524 = arith.muli %523, %c65536_i64_256 : i64
    %525 = arith.cmpi ult, %521, %524 : i64
    cf.cond_br %525, ^bb93, ^bb94
  ^bb92:  // pred: ^bb89
    %c1_i32_257 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_257) : (i32) -> ()
    cf.br ^bb91
  ^bb93:  // 2 preds: ^bb91, ^bb94
    %526 = llvm.getelementptr %19[%520] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %518, %526 {alignment = 1 : i64} : i64, !llvm.ptr
    %527 = llvm.load %5 : !llvm.ptr -> i32
    %c256_i32_258 = arith.constant 256 : i32
    %528 = arith.addi %527, %c256_i32_258 : i32
    %c16_i32_259 = arith.constant 16 : i32
    %529 = arith.addi %528, %c16_i32_259 : i32
    %530 = llvm.load %5 : !llvm.ptr -> i32
    %c40_i32_260 = arith.constant 40 : i32
    %531 = arith.addi %530, %c40_i32_260 : i32
    %c16_i32_261 = arith.constant 16 : i32
    %532 = arith.addi %531, %c16_i32_261 : i32
    %c0_i64_262 = arith.constant 0 : i64
    %533 = arith.extui %532 : i32 to i64
    %534 = arith.addi %533, %c0_i64_262 : i64
    %c8_i64_263 = arith.constant 8 : i64
    %535 = arith.addi %534, %c8_i64_263 : i64
    %c0_i32_264 = arith.constant 0 : i32
    %536 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_264) : (!llvm.ptr, i32) -> i32
    %537 = arith.extui %536 : i32 to i64
    %c65536_i64_265 = arith.constant 65536 : i64
    %538 = arith.muli %537, %c65536_i64_265 : i64
    %539 = arith.cmpi ult, %535, %538 : i64
    cf.cond_br %539, ^bb95, ^bb96
  ^bb94:  // pred: ^bb91
    %c1_i32_266 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_266) : (i32) -> ()
    cf.br ^bb93
  ^bb95:  // 2 preds: ^bb93, ^bb96
    %540 = llvm.getelementptr %19[%534] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %541 = llvm.load volatile %540 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_267 = arith.constant 0 : i64
    %542 = arith.extui %529 : i32 to i64
    %543 = arith.addi %542, %c0_i64_267 : i64
    %c8_i64_268 = arith.constant 8 : i64
    %544 = arith.addi %543, %c8_i64_268 : i64
    %c0_i32_269 = arith.constant 0 : i32
    %545 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_269) : (!llvm.ptr, i32) -> i32
    %546 = arith.extui %545 : i32 to i64
    %c65536_i64_270 = arith.constant 65536 : i64
    %547 = arith.muli %546, %c65536_i64_270 : i64
    %548 = arith.cmpi ult, %544, %547 : i64
    cf.cond_br %548, ^bb97, ^bb98
  ^bb96:  // pred: ^bb93
    %c1_i32_271 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_271) : (i32) -> ()
    cf.br ^bb95
  ^bb97:  // 2 preds: ^bb95, ^bb98
    %549 = llvm.getelementptr %19[%543] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %541, %549 {alignment = 1 : i64} : i64, !llvm.ptr
    %550 = llvm.load %5 : !llvm.ptr -> i32
    %c256_i32_272 = arith.constant 256 : i32
    %551 = arith.addi %550, %c256_i32_272 : i32
    %c8_i32_273 = arith.constant 8 : i32
    %552 = arith.addi %551, %c8_i32_273 : i32
    llvm.store %552, %7 : i32, !llvm.ptr
    %553 = llvm.load %5 : !llvm.ptr -> i32
    %c40_i32_274 = arith.constant 40 : i32
    %554 = arith.addi %553, %c40_i32_274 : i32
    %c8_i32_275 = arith.constant 8 : i32
    %555 = arith.addi %554, %c8_i32_275 : i32
    %c0_i64_276 = arith.constant 0 : i64
    %556 = arith.extui %555 : i32 to i64
    %557 = arith.addi %556, %c0_i64_276 : i64
    %c8_i64_277 = arith.constant 8 : i64
    %558 = arith.addi %557, %c8_i64_277 : i64
    %c0_i32_278 = arith.constant 0 : i32
    %559 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_278) : (!llvm.ptr, i32) -> i32
    %560 = arith.extui %559 : i32 to i64
    %c65536_i64_279 = arith.constant 65536 : i64
    %561 = arith.muli %560, %c65536_i64_279 : i64
    %562 = arith.cmpi ult, %558, %561 : i64
    cf.cond_br %562, ^bb99, ^bb100
  ^bb98:  // pred: ^bb95
    %c1_i32_280 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_280) : (i32) -> ()
    cf.br ^bb97
  ^bb99:  // 2 preds: ^bb97, ^bb100
    %563 = llvm.getelementptr %19[%557] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %564 = llvm.load volatile %563 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_281 = arith.constant 0 : i64
    %565 = arith.extui %552 : i32 to i64
    %566 = arith.addi %565, %c0_i64_281 : i64
    %c8_i64_282 = arith.constant 8 : i64
    %567 = arith.addi %566, %c8_i64_282 : i64
    %c0_i32_283 = arith.constant 0 : i32
    %568 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_283) : (!llvm.ptr, i32) -> i32
    %569 = arith.extui %568 : i32 to i64
    %c65536_i64_284 = arith.constant 65536 : i64
    %570 = arith.muli %569, %c65536_i64_284 : i64
    %571 = arith.cmpi ult, %567, %570 : i64
    cf.cond_br %571, ^bb101, ^bb102
  ^bb100:  // pred: ^bb97
    %c1_i32_285 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_285) : (i32) -> ()
    cf.br ^bb99
  ^bb101:  // 2 preds: ^bb99, ^bb102
    %572 = llvm.getelementptr %19[%566] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %564, %572 {alignment = 1 : i64} : i64, !llvm.ptr
    %573 = llvm.load %5 : !llvm.ptr -> i32
    %574 = llvm.load %5 : !llvm.ptr -> i32
    %c40_i64 = arith.constant 40 : i64
    %575 = arith.extui %574 : i32 to i64
    %576 = arith.addi %575, %c40_i64 : i64
    %c8_i64_286 = arith.constant 8 : i64
    %577 = arith.addi %576, %c8_i64_286 : i64
    %c0_i32_287 = arith.constant 0 : i32
    %578 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_287) : (!llvm.ptr, i32) -> i32
    %579 = arith.extui %578 : i32 to i64
    %c65536_i64_288 = arith.constant 65536 : i64
    %580 = arith.muli %579, %c65536_i64_288 : i64
    %581 = arith.cmpi ult, %577, %580 : i64
    cf.cond_br %581, ^bb103, ^bb104
  ^bb102:  // pred: ^bb99
    %c1_i32_289 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_289) : (i32) -> ()
    cf.br ^bb101
  ^bb103:  // 2 preds: ^bb101, ^bb104
    %582 = llvm.getelementptr %19[%576] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %583 = llvm.load volatile %582 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c256_i64_290 = arith.constant 256 : i64
    %584 = arith.extui %573 : i32 to i64
    %585 = arith.addi %584, %c256_i64_290 : i64
    %c8_i64_291 = arith.constant 8 : i64
    %586 = arith.addi %585, %c8_i64_291 : i64
    %c0_i32_292 = arith.constant 0 : i32
    %587 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_292) : (!llvm.ptr, i32) -> i32
    %588 = arith.extui %587 : i32 to i64
    %c65536_i64_293 = arith.constant 65536 : i64
    %589 = arith.muli %588, %c65536_i64_293 : i64
    %590 = arith.cmpi ult, %586, %589 : i64
    cf.cond_br %590, ^bb105, ^bb106
  ^bb104:  // pred: ^bb101
    %c1_i32_294 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_294) : (i32) -> ()
    cf.br ^bb103
  ^bb105:  // 2 preds: ^bb103, ^bb106
    %591 = llvm.getelementptr %19[%585] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %583, %591 {alignment = 1 : i64} : i64, !llvm.ptr
    %592 = llvm.load %5 : !llvm.ptr -> i32
    %c256_i32_295 = arith.constant 256 : i32
    %593 = arith.addi %592, %c256_i32_295 : i32
    %594 = llvm.load %7 : !llvm.ptr -> i32
    %595 = llvm.load %5 : !llvm.ptr -> i32
    %c368_i32_296 = arith.constant 368 : i32
    %596 = arith.addi %595, %c368_i32_296 : i32
    call @f32(%arg0, %593, %594, %596) : (!llvm.ptr, i32, i32, i32) -> ()
    %597 = llvm.load %5 : !llvm.ptr -> i32
    %c256_i32_297 = arith.constant 256 : i32
    %598 = arith.addi %597, %c256_i32_297 : i32
    %599 = llvm.load %1 : !llvm.ptr -> i32
    %600 = llvm.load %2 : !llvm.ptr -> i32
    %601 = llvm.load %3 : !llvm.ptr -> i32
    %602 = llvm.load %4 : !llvm.ptr -> i32
    call @f49(%arg0, %598, %599, %600, %601, %602) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %603 = llvm.load %5 : !llvm.ptr -> i32
    %c256_i64_298 = arith.constant 256 : i64
    %604 = arith.extui %603 : i32 to i64
    %605 = arith.addi %604, %c256_i64_298 : i64
    %c8_i64_299 = arith.constant 8 : i64
    %606 = arith.addi %605, %c8_i64_299 : i64
    %c0_i32_300 = arith.constant 0 : i32
    %607 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_300) : (!llvm.ptr, i32) -> i32
    %608 = arith.extui %607 : i32 to i64
    %c65536_i64_301 = arith.constant 65536 : i64
    %609 = arith.muli %608, %c65536_i64_301 : i64
    %610 = arith.cmpi ult, %606, %609 : i64
    cf.cond_br %610, ^bb108, ^bb109
  ^bb106:  // pred: ^bb103
    %c1_i32_302 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_302) : (i32) -> ()
    cf.br ^bb105
  ^bb107:  // pred: ^bb108
    %611 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_303 = arith.constant 8 : i32
    %612 = arith.addi %611, %c8_i32_303 : i32
    %613 = llvm.load %7 : !llvm.ptr -> i32
    %c104_i32_304 = arith.constant 104 : i32
    %614 = call @f161(%arg0, %612, %613, %c104_i32_304) : (!llvm.ptr, i32, i32, i32) -> i32
    %615 = llvm.load %0 : !llvm.ptr -> i32
    %616 = llvm.load %11 : !llvm.ptr -> i64
    %c0_i64_305 = arith.constant 0 : i64
    %617 = arith.extui %615 : i32 to i64
    %618 = arith.addi %617, %c0_i64_305 : i64
    %c8_i64_306 = arith.constant 8 : i64
    %619 = arith.addi %618, %c8_i64_306 : i64
    %c0_i32_307 = arith.constant 0 : i32
    %620 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_307) : (!llvm.ptr, i32) -> i32
    %621 = arith.extui %620 : i32 to i64
    %c65536_i64_308 = arith.constant 65536 : i64
    %622 = arith.muli %621, %c65536_i64_308 : i64
    %623 = arith.cmpi ult, %619, %622 : i64
    cf.cond_br %623, ^bb115, ^bb116
  ^bb108:  // 2 preds: ^bb105, ^bb109
    %624 = llvm.getelementptr %19[%605] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %625 = llvm.load volatile %624 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %625, %11 : i64, !llvm.ptr
    %c2_i64 = arith.constant 2 : i64
    %626 = arith.cmpi eq, %625, %c2_i64 : i64
    %627 = arith.extui %626 : i1 to i32
    %c0_i32_309 = arith.constant 0 : i32
    %628 = arith.cmpi eq, %627, %c0_i32_309 : i32
    %629 = arith.extui %628 : i1 to i32
    %c0_i32_310 = arith.constant 0 : i32
    %630 = arith.cmpi ne, %629, %c0_i32_310 : i32
    cf.cond_br %630, ^bb107, ^bb110
  ^bb109:  // pred: ^bb105
    %c1_i32_311 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_311) : (i32) -> ()
    cf.br ^bb108
  ^bb110:  // pred: ^bb108
    %631 = llvm.load %0 : !llvm.ptr -> i32
    %c2_i64_312 = arith.constant 2 : i64
    %c0_i64_313 = arith.constant 0 : i64
    %632 = arith.extui %631 : i32 to i64
    %633 = arith.addi %632, %c0_i64_313 : i64
    %c8_i64_314 = arith.constant 8 : i64
    %634 = arith.addi %633, %c8_i64_314 : i64
    %c0_i32_315 = arith.constant 0 : i32
    %635 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_315) : (!llvm.ptr, i32) -> i32
    %636 = arith.extui %635 : i32 to i64
    %c65536_i64_316 = arith.constant 65536 : i64
    %637 = arith.muli %636, %c65536_i64_316 : i64
    %638 = arith.cmpi ult, %634, %637 : i64
    cf.cond_br %638, ^bb111, ^bb112
  ^bb111:  // 2 preds: ^bb110, ^bb112
    %639 = llvm.getelementptr %19[%633] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i64_312, %639 {alignment = 1 : i64} : i64, !llvm.ptr
    %640 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_317 = arith.constant 1 : i32
    %c8_i64_318 = arith.constant 8 : i64
    %641 = arith.extui %640 : i32 to i64
    %642 = arith.addi %641, %c8_i64_318 : i64
    %c1_i64_319 = arith.constant 1 : i64
    %643 = arith.addi %642, %c1_i64_319 : i64
    %c0_i32_320 = arith.constant 0 : i32
    %644 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_320) : (!llvm.ptr, i32) -> i32
    %645 = arith.extui %644 : i32 to i64
    %c65536_i64_321 = arith.constant 65536 : i64
    %646 = arith.muli %645, %c65536_i64_321 : i64
    %647 = arith.cmpi ult, %643, %646 : i64
    cf.cond_br %647, ^bb113, ^bb114
  ^bb112:  // pred: ^bb110
    %c1_i32_322 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_322) : (i32) -> ()
    cf.br ^bb111
  ^bb113:  // 2 preds: ^bb111, ^bb114
    %648 = llvm.getelementptr %19[%642] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %649 = arith.trunci %c1_i32_317 : i32 to i8
    llvm.store volatile %649, %648 {alignment = 1 : i64} : i8, !llvm.ptr
    cf.br ^bb36
  ^bb114:  // pred: ^bb111
    %c1_i32_323 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_323) : (i32) -> ()
    cf.br ^bb113
  ^bb115:  // 2 preds: ^bb107, ^bb116
    %650 = llvm.getelementptr %19[%618] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %616, %650 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb36
  ^bb116:  // pred: ^bb107
    %c1_i32_324 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_324) : (i32) -> ()
    cf.br ^bb115
  ^bb117:  // 2 preds: ^bb37, ^bb118
    %651 = llvm.getelementptr %19[%212] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %652 = llvm.load volatile %651 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_325 = arith.constant 0 : i64
    %653 = arith.extui %208 : i32 to i64
    %654 = arith.addi %653, %c0_i64_325 : i64
    %c4_i64_326 = arith.constant 4 : i64
    %655 = arith.addi %654, %c4_i64_326 : i64
    %c0_i32_327 = arith.constant 0 : i32
    %656 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_327) : (!llvm.ptr, i32) -> i32
    %657 = arith.extui %656 : i32 to i64
    %c65536_i64_328 = arith.constant 65536 : i64
    %658 = arith.muli %657, %c65536_i64_328 : i64
    %659 = arith.cmpi ult, %655, %658 : i64
    cf.cond_br %659, ^bb119, ^bb120
  ^bb118:  // pred: ^bb37
    %c1_i32_329 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_329) : (i32) -> ()
    cf.br ^bb117
  ^bb119:  // 2 preds: ^bb117, ^bb120
    %660 = llvm.getelementptr %19[%654] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %652, %660 {alignment = 1 : i64} : i32, !llvm.ptr
    %661 = llvm.load %5 : !llvm.ptr -> i32
    %c224_i32 = arith.constant 224 : i32
    %662 = arith.addi %661, %c224_i32 : i32
    %663 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_330 = arith.constant 8 : i32
    %664 = arith.addi %663, %c8_i32_330 : i32
    %c0_i64_331 = arith.constant 0 : i64
    %665 = arith.extui %664 : i32 to i64
    %666 = arith.addi %665, %c0_i64_331 : i64
    %c8_i64_332 = arith.constant 8 : i64
    %667 = arith.addi %666, %c8_i64_332 : i64
    %c0_i32_333 = arith.constant 0 : i32
    %668 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_333) : (!llvm.ptr, i32) -> i32
    %669 = arith.extui %668 : i32 to i64
    %c65536_i64_334 = arith.constant 65536 : i64
    %670 = arith.muli %669, %c65536_i64_334 : i64
    %671 = arith.cmpi ult, %667, %670 : i64
    cf.cond_br %671, ^bb121, ^bb122
  ^bb120:  // pred: ^bb117
    %c1_i32_335 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_335) : (i32) -> ()
    cf.br ^bb119
  ^bb121:  // 2 preds: ^bb119, ^bb122
    %672 = llvm.getelementptr %19[%666] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %673 = llvm.load volatile %672 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_336 = arith.constant 0 : i64
    %674 = arith.extui %662 : i32 to i64
    %675 = arith.addi %674, %c0_i64_336 : i64
    %c8_i64_337 = arith.constant 8 : i64
    %676 = arith.addi %675, %c8_i64_337 : i64
    %c0_i32_338 = arith.constant 0 : i32
    %677 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_338) : (!llvm.ptr, i32) -> i32
    %678 = arith.extui %677 : i32 to i64
    %c65536_i64_339 = arith.constant 65536 : i64
    %679 = arith.muli %678, %c65536_i64_339 : i64
    %680 = arith.cmpi ult, %676, %679 : i64
    cf.cond_br %680, ^bb123, ^bb124
  ^bb122:  // pred: ^bb119
    %c1_i32_340 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_340) : (i32) -> ()
    cf.br ^bb121
  ^bb123:  // 2 preds: ^bb121, ^bb124
    %681 = llvm.getelementptr %19[%675] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %673, %681 {alignment = 1 : i64} : i64, !llvm.ptr
    %682 = llvm.load %5 : !llvm.ptr -> i32
    %c152_i32 = arith.constant 152 : i32
    %683 = arith.addi %682, %c152_i32 : i32
    %c8_i32_341 = arith.constant 8 : i32
    %684 = arith.addi %683, %c8_i32_341 : i32
    %685 = llvm.load %5 : !llvm.ptr -> i32
    %c120_i32_342 = arith.constant 120 : i32
    %686 = arith.addi %685, %c120_i32_342 : i32
    %c8_i32_343 = arith.constant 8 : i32
    %687 = arith.addi %686, %c8_i32_343 : i32
    %c0_i64_344 = arith.constant 0 : i64
    %688 = arith.extui %687 : i32 to i64
    %689 = arith.addi %688, %c0_i64_344 : i64
    %c8_i64_345 = arith.constant 8 : i64
    %690 = arith.addi %689, %c8_i64_345 : i64
    %c0_i32_346 = arith.constant 0 : i32
    %691 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_346) : (!llvm.ptr, i32) -> i32
    %692 = arith.extui %691 : i32 to i64
    %c65536_i64_347 = arith.constant 65536 : i64
    %693 = arith.muli %692, %c65536_i64_347 : i64
    %694 = arith.cmpi ult, %690, %693 : i64
    cf.cond_br %694, ^bb125, ^bb126
  ^bb124:  // pred: ^bb121
    %c1_i32_348 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_348) : (i32) -> ()
    cf.br ^bb123
  ^bb125:  // 2 preds: ^bb123, ^bb126
    %695 = llvm.getelementptr %19[%689] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %696 = llvm.load volatile %695 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_349 = arith.constant 0 : i64
    %697 = arith.extui %684 : i32 to i64
    %698 = arith.addi %697, %c0_i64_349 : i64
    %c8_i64_350 = arith.constant 8 : i64
    %699 = arith.addi %698, %c8_i64_350 : i64
    %c0_i32_351 = arith.constant 0 : i32
    %700 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_351) : (!llvm.ptr, i32) -> i32
    %701 = arith.extui %700 : i32 to i64
    %c65536_i64_352 = arith.constant 65536 : i64
    %702 = arith.muli %701, %c65536_i64_352 : i64
    %703 = arith.cmpi ult, %699, %702 : i64
    cf.cond_br %703, ^bb127, ^bb128
  ^bb126:  // pred: ^bb123
    %c1_i32_353 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_353) : (i32) -> ()
    cf.br ^bb125
  ^bb127:  // 2 preds: ^bb125, ^bb128
    %704 = llvm.getelementptr %19[%698] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %696, %704 {alignment = 1 : i64} : i64, !llvm.ptr
    %705 = llvm.load %5 : !llvm.ptr -> i32
    %c152_i32_354 = arith.constant 152 : i32
    %706 = arith.addi %705, %c152_i32_354 : i32
    %c16_i32_355 = arith.constant 16 : i32
    %707 = arith.addi %706, %c16_i32_355 : i32
    %708 = llvm.load %5 : !llvm.ptr -> i32
    %c120_i32_356 = arith.constant 120 : i32
    %709 = arith.addi %708, %c120_i32_356 : i32
    %c16_i32_357 = arith.constant 16 : i32
    %710 = arith.addi %709, %c16_i32_357 : i32
    %c0_i64_358 = arith.constant 0 : i64
    %711 = arith.extui %710 : i32 to i64
    %712 = arith.addi %711, %c0_i64_358 : i64
    %c8_i64_359 = arith.constant 8 : i64
    %713 = arith.addi %712, %c8_i64_359 : i64
    %c0_i32_360 = arith.constant 0 : i32
    %714 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_360) : (!llvm.ptr, i32) -> i32
    %715 = arith.extui %714 : i32 to i64
    %c65536_i64_361 = arith.constant 65536 : i64
    %716 = arith.muli %715, %c65536_i64_361 : i64
    %717 = arith.cmpi ult, %713, %716 : i64
    cf.cond_br %717, ^bb129, ^bb130
  ^bb128:  // pred: ^bb125
    %c1_i32_362 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_362) : (i32) -> ()
    cf.br ^bb127
  ^bb129:  // 2 preds: ^bb127, ^bb130
    %718 = llvm.getelementptr %19[%712] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %719 = llvm.load volatile %718 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_363 = arith.constant 0 : i64
    %720 = arith.extui %707 : i32 to i64
    %721 = arith.addi %720, %c0_i64_363 : i64
    %c8_i64_364 = arith.constant 8 : i64
    %722 = arith.addi %721, %c8_i64_364 : i64
    %c0_i32_365 = arith.constant 0 : i32
    %723 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_365) : (!llvm.ptr, i32) -> i32
    %724 = arith.extui %723 : i32 to i64
    %c65536_i64_366 = arith.constant 65536 : i64
    %725 = arith.muli %724, %c65536_i64_366 : i64
    %726 = arith.cmpi ult, %722, %725 : i64
    cf.cond_br %726, ^bb131, ^bb132
  ^bb130:  // pred: ^bb127
    %c1_i32_367 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_367) : (i32) -> ()
    cf.br ^bb129
  ^bb131:  // 2 preds: ^bb129, ^bb132
    %727 = llvm.getelementptr %19[%721] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %719, %727 {alignment = 1 : i64} : i64, !llvm.ptr
    %728 = llvm.load %5 : !llvm.ptr -> i32
    %c152_i32_368 = arith.constant 152 : i32
    %729 = arith.addi %728, %c152_i32_368 : i32
    %c24_i32_369 = arith.constant 24 : i32
    %730 = arith.addi %729, %c24_i32_369 : i32
    %731 = llvm.load %5 : !llvm.ptr -> i32
    %c120_i32_370 = arith.constant 120 : i32
    %732 = arith.addi %731, %c120_i32_370 : i32
    %c24_i32_371 = arith.constant 24 : i32
    %733 = arith.addi %732, %c24_i32_371 : i32
    %c0_i64_372 = arith.constant 0 : i64
    %734 = arith.extui %733 : i32 to i64
    %735 = arith.addi %734, %c0_i64_372 : i64
    %c8_i64_373 = arith.constant 8 : i64
    %736 = arith.addi %735, %c8_i64_373 : i64
    %c0_i32_374 = arith.constant 0 : i32
    %737 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_374) : (!llvm.ptr, i32) -> i32
    %738 = arith.extui %737 : i32 to i64
    %c65536_i64_375 = arith.constant 65536 : i64
    %739 = arith.muli %738, %c65536_i64_375 : i64
    %740 = arith.cmpi ult, %736, %739 : i64
    cf.cond_br %740, ^bb133, ^bb134
  ^bb132:  // pred: ^bb129
    %c1_i32_376 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_376) : (i32) -> ()
    cf.br ^bb131
  ^bb133:  // 2 preds: ^bb131, ^bb134
    %741 = llvm.getelementptr %19[%735] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %742 = llvm.load volatile %741 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_377 = arith.constant 0 : i64
    %743 = arith.extui %730 : i32 to i64
    %744 = arith.addi %743, %c0_i64_377 : i64
    %c8_i64_378 = arith.constant 8 : i64
    %745 = arith.addi %744, %c8_i64_378 : i64
    %c0_i32_379 = arith.constant 0 : i32
    %746 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_379) : (!llvm.ptr, i32) -> i32
    %747 = arith.extui %746 : i32 to i64
    %c65536_i64_380 = arith.constant 65536 : i64
    %748 = arith.muli %747, %c65536_i64_380 : i64
    %749 = arith.cmpi ult, %745, %748 : i64
    cf.cond_br %749, ^bb135, ^bb136
  ^bb134:  // pred: ^bb131
    %c1_i32_381 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_381) : (i32) -> ()
    cf.br ^bb133
  ^bb135:  // 2 preds: ^bb133, ^bb136
    %750 = llvm.getelementptr %19[%744] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %742, %750 {alignment = 1 : i64} : i64, !llvm.ptr
    %751 = llvm.load %5 : !llvm.ptr -> i32
    %c192_i32 = arith.constant 192 : i32
    %752 = arith.addi %751, %c192_i32 : i32
    %753 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i32_382 = arith.constant 8 : i32
    %754 = arith.addi %753, %c8_i32_382 : i32
    %c0_i64_383 = arith.constant 0 : i64
    %755 = arith.extui %754 : i32 to i64
    %756 = arith.addi %755, %c0_i64_383 : i64
    %c8_i64_384 = arith.constant 8 : i64
    %757 = arith.addi %756, %c8_i64_384 : i64
    %c0_i32_385 = arith.constant 0 : i32
    %758 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_385) : (!llvm.ptr, i32) -> i32
    %759 = arith.extui %758 : i32 to i64
    %c65536_i64_386 = arith.constant 65536 : i64
    %760 = arith.muli %759, %c65536_i64_386 : i64
    %761 = arith.cmpi ult, %757, %760 : i64
    cf.cond_br %761, ^bb137, ^bb138
  ^bb136:  // pred: ^bb133
    %c1_i32_387 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_387) : (i32) -> ()
    cf.br ^bb135
  ^bb137:  // 2 preds: ^bb135, ^bb138
    %762 = llvm.getelementptr %19[%756] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %763 = llvm.load volatile %762 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_388 = arith.constant 0 : i64
    %764 = arith.extui %752 : i32 to i64
    %765 = arith.addi %764, %c0_i64_388 : i64
    %c8_i64_389 = arith.constant 8 : i64
    %766 = arith.addi %765, %c8_i64_389 : i64
    %c0_i32_390 = arith.constant 0 : i32
    %767 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_390) : (!llvm.ptr, i32) -> i32
    %768 = arith.extui %767 : i32 to i64
    %c65536_i64_391 = arith.constant 65536 : i64
    %769 = arith.muli %768, %c65536_i64_391 : i64
    %770 = arith.cmpi ult, %766, %769 : i64
    cf.cond_br %770, ^bb139, ^bb140
  ^bb138:  // pred: ^bb135
    %c1_i32_392 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_392) : (i32) -> ()
    cf.br ^bb137
  ^bb139:  // 2 preds: ^bb137, ^bb140
    %771 = llvm.getelementptr %19[%765] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %763, %771 {alignment = 1 : i64} : i64, !llvm.ptr
    %772 = llvm.load %5 : !llvm.ptr -> i32
    %c200_i32 = arith.constant 200 : i32
    %773 = arith.addi %772, %c200_i32 : i32
    %774 = llvm.load %4 : !llvm.ptr -> i32
    %c16_i32_393 = arith.constant 16 : i32
    %775 = arith.addi %774, %c16_i32_393 : i32
    %c0_i64_394 = arith.constant 0 : i64
    %776 = arith.extui %775 : i32 to i64
    %777 = arith.addi %776, %c0_i64_394 : i64
    %c8_i64_395 = arith.constant 8 : i64
    %778 = arith.addi %777, %c8_i64_395 : i64
    %c0_i32_396 = arith.constant 0 : i32
    %779 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_396) : (!llvm.ptr, i32) -> i32
    %780 = arith.extui %779 : i32 to i64
    %c65536_i64_397 = arith.constant 65536 : i64
    %781 = arith.muli %780, %c65536_i64_397 : i64
    %782 = arith.cmpi ult, %778, %781 : i64
    cf.cond_br %782, ^bb141, ^bb142
  ^bb140:  // pred: ^bb137
    %c1_i32_398 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_398) : (i32) -> ()
    cf.br ^bb139
  ^bb141:  // 2 preds: ^bb139, ^bb142
    %783 = llvm.getelementptr %19[%777] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %784 = llvm.load volatile %783 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_399 = arith.constant 0 : i64
    %785 = arith.extui %773 : i32 to i64
    %786 = arith.addi %785, %c0_i64_399 : i64
    %c8_i64_400 = arith.constant 8 : i64
    %787 = arith.addi %786, %c8_i64_400 : i64
    %c0_i32_401 = arith.constant 0 : i32
    %788 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_401) : (!llvm.ptr, i32) -> i32
    %789 = arith.extui %788 : i32 to i64
    %c65536_i64_402 = arith.constant 65536 : i64
    %790 = arith.muli %789, %c65536_i64_402 : i64
    %791 = arith.cmpi ult, %787, %790 : i64
    cf.cond_br %791, ^bb143, ^bb144
  ^bb142:  // pred: ^bb139
    %c1_i32_403 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_403) : (i32) -> ()
    cf.br ^bb141
  ^bb143:  // 2 preds: ^bb141, ^bb144
    %792 = llvm.getelementptr %19[%786] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %784, %792 {alignment = 1 : i64} : i64, !llvm.ptr
    %793 = llvm.load %5 : !llvm.ptr -> i32
    %c208_i32 = arith.constant 208 : i32
    %794 = arith.addi %793, %c208_i32 : i32
    %795 = llvm.load %4 : !llvm.ptr -> i32
    %c24_i32_404 = arith.constant 24 : i32
    %796 = arith.addi %795, %c24_i32_404 : i32
    %c0_i64_405 = arith.constant 0 : i64
    %797 = arith.extui %796 : i32 to i64
    %798 = arith.addi %797, %c0_i64_405 : i64
    %c8_i64_406 = arith.constant 8 : i64
    %799 = arith.addi %798, %c8_i64_406 : i64
    %c0_i32_407 = arith.constant 0 : i32
    %800 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_407) : (!llvm.ptr, i32) -> i32
    %801 = arith.extui %800 : i32 to i64
    %c65536_i64_408 = arith.constant 65536 : i64
    %802 = arith.muli %801, %c65536_i64_408 : i64
    %803 = arith.cmpi ult, %799, %802 : i64
    cf.cond_br %803, ^bb145, ^bb146
  ^bb144:  // pred: ^bb141
    %c1_i32_409 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_409) : (i32) -> ()
    cf.br ^bb143
  ^bb145:  // 2 preds: ^bb143, ^bb146
    %804 = llvm.getelementptr %19[%798] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %805 = llvm.load volatile %804 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_410 = arith.constant 0 : i64
    %806 = arith.extui %794 : i32 to i64
    %807 = arith.addi %806, %c0_i64_410 : i64
    %c8_i64_411 = arith.constant 8 : i64
    %808 = arith.addi %807, %c8_i64_411 : i64
    %c0_i32_412 = arith.constant 0 : i32
    %809 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_412) : (!llvm.ptr, i32) -> i32
    %810 = arith.extui %809 : i32 to i64
    %c65536_i64_413 = arith.constant 65536 : i64
    %811 = arith.muli %810, %c65536_i64_413 : i64
    %812 = arith.cmpi ult, %808, %811 : i64
    cf.cond_br %812, ^bb147, ^bb148
  ^bb146:  // pred: ^bb143
    %c1_i32_414 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_414) : (i32) -> ()
    cf.br ^bb145
  ^bb147:  // 2 preds: ^bb145, ^bb148
    %813 = llvm.getelementptr %19[%807] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %805, %813 {alignment = 1 : i64} : i64, !llvm.ptr
    %814 = llvm.load %5 : !llvm.ptr -> i32
    %815 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_415 = arith.constant 0 : i64
    %816 = arith.extui %815 : i32 to i64
    %817 = arith.addi %816, %c0_i64_415 : i64
    %c8_i64_416 = arith.constant 8 : i64
    %818 = arith.addi %817, %c8_i64_416 : i64
    %c0_i32_417 = arith.constant 0 : i32
    %819 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_417) : (!llvm.ptr, i32) -> i32
    %820 = arith.extui %819 : i32 to i64
    %c65536_i64_418 = arith.constant 65536 : i64
    %821 = arith.muli %820, %c65536_i64_418 : i64
    %822 = arith.cmpi ult, %818, %821 : i64
    cf.cond_br %822, ^bb149, ^bb150
  ^bb148:  // pred: ^bb145
    %c1_i32_419 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_419) : (i32) -> ()
    cf.br ^bb147
  ^bb149:  // 2 preds: ^bb147, ^bb150
    %823 = llvm.getelementptr %19[%817] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %824 = llvm.load volatile %823 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c216_i64 = arith.constant 216 : i64
    %825 = arith.extui %814 : i32 to i64
    %826 = arith.addi %825, %c216_i64 : i64
    %c8_i64_420 = arith.constant 8 : i64
    %827 = arith.addi %826, %c8_i64_420 : i64
    %c0_i32_421 = arith.constant 0 : i32
    %828 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_421) : (!llvm.ptr, i32) -> i32
    %829 = arith.extui %828 : i32 to i64
    %c65536_i64_422 = arith.constant 65536 : i64
    %830 = arith.muli %829, %c65536_i64_422 : i64
    %831 = arith.cmpi ult, %827, %830 : i64
    cf.cond_br %831, ^bb151, ^bb152
  ^bb150:  // pred: ^bb147
    %c1_i32_423 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_423) : (i32) -> ()
    cf.br ^bb149
  ^bb151:  // 2 preds: ^bb149, ^bb152
    %832 = llvm.getelementptr %19[%826] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %824, %832 {alignment = 1 : i64} : i64, !llvm.ptr
    %833 = llvm.load %5 : !llvm.ptr -> i32
    %834 = llvm.load %5 : !llvm.ptr -> i32
    %c120_i64_424 = arith.constant 120 : i64
    %835 = arith.extui %834 : i32 to i64
    %836 = arith.addi %835, %c120_i64_424 : i64
    %c8_i64_425 = arith.constant 8 : i64
    %837 = arith.addi %836, %c8_i64_425 : i64
    %c0_i32_426 = arith.constant 0 : i32
    %838 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_426) : (!llvm.ptr, i32) -> i32
    %839 = arith.extui %838 : i32 to i64
    %c65536_i64_427 = arith.constant 65536 : i64
    %840 = arith.muli %839, %c65536_i64_427 : i64
    %841 = arith.cmpi ult, %837, %840 : i64
    cf.cond_br %841, ^bb153, ^bb154
  ^bb152:  // pred: ^bb149
    %c1_i32_428 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_428) : (i32) -> ()
    cf.br ^bb151
  ^bb153:  // 2 preds: ^bb151, ^bb154
    %842 = llvm.getelementptr %19[%836] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %843 = llvm.load volatile %842 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c152_i64 = arith.constant 152 : i64
    %844 = arith.extui %833 : i32 to i64
    %845 = arith.addi %844, %c152_i64 : i64
    %c8_i64_429 = arith.constant 8 : i64
    %846 = arith.addi %845, %c8_i64_429 : i64
    %c0_i32_430 = arith.constant 0 : i32
    %847 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_430) : (!llvm.ptr, i32) -> i32
    %848 = arith.extui %847 : i32 to i64
    %c65536_i64_431 = arith.constant 65536 : i64
    %849 = arith.muli %848, %c65536_i64_431 : i64
    %850 = arith.cmpi ult, %846, %849 : i64
    cf.cond_br %850, ^bb155, ^bb156
  ^bb154:  // pred: ^bb151
    %c1_i32_432 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_432) : (i32) -> ()
    cf.br ^bb153
  ^bb155:  // 2 preds: ^bb153, ^bb156
    %851 = llvm.getelementptr %19[%845] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %843, %851 {alignment = 1 : i64} : i64, !llvm.ptr
    %852 = llvm.load %5 : !llvm.ptr -> i32
    %853 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_433 = arith.constant 0 : i64
    %854 = arith.extui %853 : i32 to i64
    %855 = arith.addi %854, %c0_i64_433 : i64
    %c8_i64_434 = arith.constant 8 : i64
    %856 = arith.addi %855, %c8_i64_434 : i64
    %c0_i32_435 = arith.constant 0 : i32
    %857 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_435) : (!llvm.ptr, i32) -> i32
    %858 = arith.extui %857 : i32 to i64
    %c65536_i64_436 = arith.constant 65536 : i64
    %859 = arith.muli %858, %c65536_i64_436 : i64
    %860 = arith.cmpi ult, %856, %859 : i64
    cf.cond_br %860, ^bb157, ^bb158
  ^bb156:  // pred: ^bb153
    %c1_i32_437 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_437) : (i32) -> ()
    cf.br ^bb155
  ^bb157:  // 2 preds: ^bb155, ^bb158
    %861 = llvm.getelementptr %19[%855] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %862 = llvm.load volatile %861 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c184_i64 = arith.constant 184 : i64
    %863 = arith.extui %852 : i32 to i64
    %864 = arith.addi %863, %c184_i64 : i64
    %c8_i64_438 = arith.constant 8 : i64
    %865 = arith.addi %864, %c8_i64_438 : i64
    %c0_i32_439 = arith.constant 0 : i32
    %866 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_439) : (!llvm.ptr, i32) -> i32
    %867 = arith.extui %866 : i32 to i64
    %c65536_i64_440 = arith.constant 65536 : i64
    %868 = arith.muli %867, %c65536_i64_440 : i64
    %869 = arith.cmpi ult, %865, %868 : i64
    cf.cond_br %869, ^bb159, ^bb160
  ^bb158:  // pred: ^bb155
    %c1_i32_441 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_441) : (i32) -> ()
    cf.br ^bb157
  ^bb159:  // 2 preds: ^bb157, ^bb160
    %870 = llvm.getelementptr %19[%864] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %862, %870 {alignment = 1 : i64} : i64, !llvm.ptr
    %871 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_442 = arith.constant 1 : i64
    %c0_i64_443 = arith.constant 0 : i64
    %872 = arith.extui %871 : i32 to i64
    %873 = arith.addi %872, %c0_i64_443 : i64
    %c8_i64_444 = arith.constant 8 : i64
    %874 = arith.addi %873, %c8_i64_444 : i64
    %c0_i32_445 = arith.constant 0 : i32
    %875 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_445) : (!llvm.ptr, i32) -> i32
    %876 = arith.extui %875 : i32 to i64
    %c65536_i64_446 = arith.constant 65536 : i64
    %877 = arith.muli %876, %c65536_i64_446 : i64
    %878 = arith.cmpi ult, %874, %877 : i64
    cf.cond_br %878, ^bb161, ^bb162
  ^bb160:  // pred: ^bb157
    %c1_i32_447 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_447) : (i32) -> ()
    cf.br ^bb159
  ^bb161:  // 2 preds: ^bb159, ^bb162
    %879 = llvm.getelementptr %19[%873] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_442, %879 {alignment = 1 : i64} : i64, !llvm.ptr
    %880 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_448 = arith.constant 8 : i32
    %881 = arith.addi %880, %c8_i32_448 : i32
    %882 = llvm.load %5 : !llvm.ptr -> i32
    %c152_i32_449 = arith.constant 152 : i32
    %883 = arith.addi %882, %c152_i32_449 : i32
    %c104_i32_450 = arith.constant 104 : i32
    %884 = call @f161(%arg0, %881, %883, %c104_i32_450) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb36
  ^bb162:  // pred: ^bb159
    %c1_i32_451 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_451) : (i32) -> ()
    cf.br ^bb161
  }
  func.func @f19(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %8 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %13 = llvm.load %9 : !llvm.ptr -> i32
    %c176_i32 = arith.constant 176 : i32
    %14 = arith.subi %13, %c176_i32 : i32
    llvm.store %14, %3 : i32, !llvm.ptr
    llvm.store %14, %9 : i32, !llvm.ptr
    %15 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %16 = arith.addi %15, %c64_i32 : i32
    call @f81(%arg0, %16) : (!llvm.ptr, i32) -> ()
    %17 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %18 = arith.addi %17, %c8_i32 : i32
    %19 = llvm.load %0 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %20 = arith.addi %19, %c32_i32 : i32
    %21 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32_7 = arith.constant 64 : i32
    %22 = arith.addi %21, %c64_i32_7 : i32
    call @f34(%arg0, %18, %20, %22) : (!llvm.ptr, i32, i32, i32) -> ()
    %23 = llvm.load %3 : !llvm.ptr -> i32
    %c40_i32 = arith.constant 40 : i32
    %24 = arith.addi %23, %c40_i32 : i32
    %c16_i32 = arith.constant 16 : i32
    %25 = arith.addi %24, %c16_i32 : i32
    %26 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32_8 = arith.constant 16 : i32
    %27 = arith.addi %26, %c16_i32_8 : i32
    llvm.store %27, %0 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %28 = arith.extui %27 : i32 to i64
    %29 = arith.addi %28, %c0_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %30 = arith.addi %29, %c4_i64 : i64
    %c0_i32_9 = arith.constant 0 : i32
    %31 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_9) : (!llvm.ptr, i32) -> i32
    %32 = arith.extui %31 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %33 = arith.muli %32, %c65536_i64 : i64
    %34 = arith.cmpi ult, %30, %33 : i64
    cf.cond_br %34, ^bb3, ^bb4
  ^bb2(%35: i32):  // pred: ^bb57
    return %35 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %36 = llvm.getelementptr %12[%29] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %37 = llvm.load volatile %36 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_10 = arith.constant 0 : i64
    %38 = arith.extui %25 : i32 to i64
    %39 = arith.addi %38, %c0_i64_10 : i64
    %c4_i64_11 = arith.constant 4 : i64
    %40 = arith.addi %39, %c4_i64_11 : i64
    %c0_i32_12 = arith.constant 0 : i32
    %41 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_12) : (!llvm.ptr, i32) -> i32
    %42 = arith.extui %41 : i32 to i64
    %c65536_i64_13 = arith.constant 65536 : i64
    %43 = arith.muli %42, %c65536_i64_13 : i64
    %44 = arith.cmpi ult, %40, %43 : i64
    cf.cond_br %44, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c1_i32_14 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_14) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %45 = llvm.getelementptr %12[%39] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %37, %45 {alignment = 1 : i64} : i32, !llvm.ptr
    %46 = llvm.load %3 : !llvm.ptr -> i32
    %c40_i32_15 = arith.constant 40 : i32
    %47 = arith.addi %46, %c40_i32_15 : i32
    %c8_i32_16 = arith.constant 8 : i32
    %48 = arith.addi %47, %c8_i32_16 : i32
    %49 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_17 = arith.constant 8 : i32
    %50 = arith.addi %49, %c8_i32_17 : i32
    llvm.store %50, %4 : i32, !llvm.ptr
    %c0_i64_18 = arith.constant 0 : i64
    %51 = arith.extui %50 : i32 to i64
    %52 = arith.addi %51, %c0_i64_18 : i64
    %c8_i64 = arith.constant 8 : i64
    %53 = arith.addi %52, %c8_i64 : i64
    %c0_i32_19 = arith.constant 0 : i32
    %54 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_19) : (!llvm.ptr, i32) -> i32
    %55 = arith.extui %54 : i32 to i64
    %c65536_i64_20 = arith.constant 65536 : i64
    %56 = arith.muli %55, %c65536_i64_20 : i64
    %57 = arith.cmpi ult, %53, %56 : i64
    cf.cond_br %57, ^bb7, ^bb8
  ^bb6:  // pred: ^bb3
    %c1_i32_21 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_21) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %58 = llvm.getelementptr %12[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %59 = llvm.load volatile %58 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_22 = arith.constant 0 : i64
    %60 = arith.extui %48 : i32 to i64
    %61 = arith.addi %60, %c0_i64_22 : i64
    %c8_i64_23 = arith.constant 8 : i64
    %62 = arith.addi %61, %c8_i64_23 : i64
    %c0_i32_24 = arith.constant 0 : i32
    %63 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_24) : (!llvm.ptr, i32) -> i32
    %64 = arith.extui %63 : i32 to i64
    %c65536_i64_25 = arith.constant 65536 : i64
    %65 = arith.muli %64, %c65536_i64_25 : i64
    %66 = arith.cmpi ult, %62, %65 : i64
    cf.cond_br %66, ^bb9, ^bb10
  ^bb8:  // pred: ^bb5
    %c1_i32_26 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_26) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %67 = llvm.getelementptr %12[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %59, %67 {alignment = 1 : i64} : i64, !llvm.ptr
    %68 = llvm.load %3 : !llvm.ptr -> i32
    %69 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_27 = arith.constant 0 : i64
    %70 = arith.extui %69 : i32 to i64
    %71 = arith.addi %70, %c0_i64_27 : i64
    %c8_i64_28 = arith.constant 8 : i64
    %72 = arith.addi %71, %c8_i64_28 : i64
    %c0_i32_29 = arith.constant 0 : i32
    %73 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_29) : (!llvm.ptr, i32) -> i32
    %74 = arith.extui %73 : i32 to i64
    %c65536_i64_30 = arith.constant 65536 : i64
    %75 = arith.muli %74, %c65536_i64_30 : i64
    %76 = arith.cmpi ult, %72, %75 : i64
    cf.cond_br %76, ^bb11, ^bb12
  ^bb10:  // pred: ^bb7
    %c1_i32_31 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_31) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %77 = llvm.getelementptr %12[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %78 = llvm.load volatile %77 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c40_i64 = arith.constant 40 : i64
    %79 = arith.extui %68 : i32 to i64
    %80 = arith.addi %79, %c40_i64 : i64
    %c8_i64_32 = arith.constant 8 : i64
    %81 = arith.addi %80, %c8_i64_32 : i64
    %c0_i32_33 = arith.constant 0 : i32
    %82 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_33) : (!llvm.ptr, i32) -> i32
    %83 = arith.extui %82 : i32 to i64
    %c65536_i64_34 = arith.constant 65536 : i64
    %84 = arith.muli %83, %c65536_i64_34 : i64
    %85 = arith.cmpi ult, %81, %84 : i64
    cf.cond_br %85, ^bb13, ^bb14
  ^bb12:  // pred: ^bb9
    %c1_i32_35 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_35) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %86 = llvm.getelementptr %12[%80] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %78, %86 {alignment = 1 : i64} : i64, !llvm.ptr
    %87 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32_36 = arith.constant 64 : i32
    %88 = arith.addi %87, %c64_i32_36 : i32
    %89 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_37 = arith.constant 8 : i32
    %90 = arith.addi %89, %c8_i32_37 : i32
    %91 = llvm.load %3 : !llvm.ptr -> i32
    %c40_i32_38 = arith.constant 40 : i32
    %92 = arith.addi %91, %c40_i32_38 : i32
    call @f33(%arg0, %88, %90, %92) : (!llvm.ptr, i32, i32, i32) -> ()
    %93 = llvm.load %3 : !llvm.ptr -> i32
    %c144_i32 = arith.constant 144 : i32
    %94 = arith.addi %93, %c144_i32 : i32
    %c24_i32 = arith.constant 24 : i32
    %95 = arith.addi %94, %c24_i32 : i32
    %96 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32_39 = arith.constant 64 : i32
    %97 = arith.addi %96, %c64_i32_39 : i32
    %c24_i32_40 = arith.constant 24 : i32
    %98 = arith.addi %97, %c24_i32_40 : i32
    llvm.store %98, %5 : i32, !llvm.ptr
    %c0_i64_41 = arith.constant 0 : i64
    %99 = arith.extui %98 : i32 to i64
    %100 = arith.addi %99, %c0_i64_41 : i64
    %c8_i64_42 = arith.constant 8 : i64
    %101 = arith.addi %100, %c8_i64_42 : i64
    %c0_i32_43 = arith.constant 0 : i32
    %102 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_43) : (!llvm.ptr, i32) -> i32
    %103 = arith.extui %102 : i32 to i64
    %c65536_i64_44 = arith.constant 65536 : i64
    %104 = arith.muli %103, %c65536_i64_44 : i64
    %105 = arith.cmpi ult, %101, %104 : i64
    cf.cond_br %105, ^bb15, ^bb16
  ^bb14:  // pred: ^bb11
    %c1_i32_45 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_45) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // 2 preds: ^bb13, ^bb16
    %106 = llvm.getelementptr %12[%100] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %107 = llvm.load volatile %106 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_46 = arith.constant 0 : i64
    %108 = arith.extui %95 : i32 to i64
    %109 = arith.addi %108, %c0_i64_46 : i64
    %c8_i64_47 = arith.constant 8 : i64
    %110 = arith.addi %109, %c8_i64_47 : i64
    %c0_i32_48 = arith.constant 0 : i32
    %111 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_48) : (!llvm.ptr, i32) -> i32
    %112 = arith.extui %111 : i32 to i64
    %c65536_i64_49 = arith.constant 65536 : i64
    %113 = arith.muli %112, %c65536_i64_49 : i64
    %114 = arith.cmpi ult, %110, %113 : i64
    cf.cond_br %114, ^bb17, ^bb18
  ^bb16:  // pred: ^bb13
    %c1_i32_50 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_50) : (i32) -> ()
    cf.br ^bb15
  ^bb17:  // 2 preds: ^bb15, ^bb18
    %115 = llvm.getelementptr %12[%109] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %107, %115 {alignment = 1 : i64} : i64, !llvm.ptr
    %116 = llvm.load %3 : !llvm.ptr -> i32
    %c144_i32_51 = arith.constant 144 : i32
    %117 = arith.addi %116, %c144_i32_51 : i32
    %c16_i32_52 = arith.constant 16 : i32
    %118 = arith.addi %117, %c16_i32_52 : i32
    %119 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32_53 = arith.constant 64 : i32
    %120 = arith.addi %119, %c64_i32_53 : i32
    %c16_i32_54 = arith.constant 16 : i32
    %121 = arith.addi %120, %c16_i32_54 : i32
    llvm.store %121, %6 : i32, !llvm.ptr
    %c0_i64_55 = arith.constant 0 : i64
    %122 = arith.extui %121 : i32 to i64
    %123 = arith.addi %122, %c0_i64_55 : i64
    %c8_i64_56 = arith.constant 8 : i64
    %124 = arith.addi %123, %c8_i64_56 : i64
    %c0_i32_57 = arith.constant 0 : i32
    %125 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_57) : (!llvm.ptr, i32) -> i32
    %126 = arith.extui %125 : i32 to i64
    %c65536_i64_58 = arith.constant 65536 : i64
    %127 = arith.muli %126, %c65536_i64_58 : i64
    %128 = arith.cmpi ult, %124, %127 : i64
    cf.cond_br %128, ^bb19, ^bb20
  ^bb18:  // pred: ^bb15
    %c1_i32_59 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_59) : (i32) -> ()
    cf.br ^bb17
  ^bb19:  // 2 preds: ^bb17, ^bb20
    %129 = llvm.getelementptr %12[%123] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %130 = llvm.load volatile %129 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_60 = arith.constant 0 : i64
    %131 = arith.extui %118 : i32 to i64
    %132 = arith.addi %131, %c0_i64_60 : i64
    %c8_i64_61 = arith.constant 8 : i64
    %133 = arith.addi %132, %c8_i64_61 : i64
    %c0_i32_62 = arith.constant 0 : i32
    %134 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_62) : (!llvm.ptr, i32) -> i32
    %135 = arith.extui %134 : i32 to i64
    %c65536_i64_63 = arith.constant 65536 : i64
    %136 = arith.muli %135, %c65536_i64_63 : i64
    %137 = arith.cmpi ult, %133, %136 : i64
    cf.cond_br %137, ^bb21, ^bb22
  ^bb20:  // pred: ^bb17
    %c1_i32_64 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_64) : (i32) -> ()
    cf.br ^bb19
  ^bb21:  // 2 preds: ^bb19, ^bb22
    %138 = llvm.getelementptr %12[%132] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %130, %138 {alignment = 1 : i64} : i64, !llvm.ptr
    %139 = llvm.load %3 : !llvm.ptr -> i32
    %c144_i32_65 = arith.constant 144 : i32
    %140 = arith.addi %139, %c144_i32_65 : i32
    %c8_i32_66 = arith.constant 8 : i32
    %141 = arith.addi %140, %c8_i32_66 : i32
    %142 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32_67 = arith.constant 64 : i32
    %143 = arith.addi %142, %c64_i32_67 : i32
    %c8_i32_68 = arith.constant 8 : i32
    %144 = arith.addi %143, %c8_i32_68 : i32
    llvm.store %144, %7 : i32, !llvm.ptr
    %c0_i64_69 = arith.constant 0 : i64
    %145 = arith.extui %144 : i32 to i64
    %146 = arith.addi %145, %c0_i64_69 : i64
    %c8_i64_70 = arith.constant 8 : i64
    %147 = arith.addi %146, %c8_i64_70 : i64
    %c0_i32_71 = arith.constant 0 : i32
    %148 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_71) : (!llvm.ptr, i32) -> i32
    %149 = arith.extui %148 : i32 to i64
    %c65536_i64_72 = arith.constant 65536 : i64
    %150 = arith.muli %149, %c65536_i64_72 : i64
    %151 = arith.cmpi ult, %147, %150 : i64
    cf.cond_br %151, ^bb23, ^bb24
  ^bb22:  // pred: ^bb19
    %c1_i32_73 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_73) : (i32) -> ()
    cf.br ^bb21
  ^bb23:  // 2 preds: ^bb21, ^bb24
    %152 = llvm.getelementptr %12[%146] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %153 = llvm.load volatile %152 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_74 = arith.constant 0 : i64
    %154 = arith.extui %141 : i32 to i64
    %155 = arith.addi %154, %c0_i64_74 : i64
    %c8_i64_75 = arith.constant 8 : i64
    %156 = arith.addi %155, %c8_i64_75 : i64
    %c0_i32_76 = arith.constant 0 : i32
    %157 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_76) : (!llvm.ptr, i32) -> i32
    %158 = arith.extui %157 : i32 to i64
    %c65536_i64_77 = arith.constant 65536 : i64
    %159 = arith.muli %158, %c65536_i64_77 : i64
    %160 = arith.cmpi ult, %156, %159 : i64
    cf.cond_br %160, ^bb25, ^bb26
  ^bb24:  // pred: ^bb21
    %c1_i32_78 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_78) : (i32) -> ()
    cf.br ^bb23
  ^bb25:  // 2 preds: ^bb23, ^bb26
    %161 = llvm.getelementptr %12[%155] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %153, %161 {alignment = 1 : i64} : i64, !llvm.ptr
    %162 = llvm.load %3 : !llvm.ptr -> i32
    %163 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i64 = arith.constant 64 : i64
    %164 = arith.extui %163 : i32 to i64
    %165 = arith.addi %164, %c64_i64 : i64
    %c8_i64_79 = arith.constant 8 : i64
    %166 = arith.addi %165, %c8_i64_79 : i64
    %c0_i32_80 = arith.constant 0 : i32
    %167 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_80) : (!llvm.ptr, i32) -> i32
    %168 = arith.extui %167 : i32 to i64
    %c65536_i64_81 = arith.constant 65536 : i64
    %169 = arith.muli %168, %c65536_i64_81 : i64
    %170 = arith.cmpi ult, %166, %169 : i64
    cf.cond_br %170, ^bb27, ^bb28
  ^bb26:  // pred: ^bb23
    %c1_i32_82 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_82) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // 2 preds: ^bb25, ^bb28
    %171 = llvm.getelementptr %12[%165] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %172 = llvm.load volatile %171 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c144_i64 = arith.constant 144 : i64
    %173 = arith.extui %162 : i32 to i64
    %174 = arith.addi %173, %c144_i64 : i64
    %c8_i64_83 = arith.constant 8 : i64
    %175 = arith.addi %174, %c8_i64_83 : i64
    %c0_i32_84 = arith.constant 0 : i32
    %176 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_84) : (!llvm.ptr, i32) -> i32
    %177 = arith.extui %176 : i32 to i64
    %c65536_i64_85 = arith.constant 65536 : i64
    %178 = arith.muli %177, %c65536_i64_85 : i64
    %179 = arith.cmpi ult, %175, %178 : i64
    cf.cond_br %179, ^bb29, ^bb30
  ^bb28:  // pred: ^bb25
    %c1_i32_86 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_86) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // 2 preds: ^bb27, ^bb30
    %180 = llvm.getelementptr %12[%174] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %172, %180 {alignment = 1 : i64} : i64, !llvm.ptr
    %181 = llvm.load %3 : !llvm.ptr -> i32
    %c144_i32_87 = arith.constant 144 : i32
    %182 = arith.addi %181, %c144_i32_87 : i32
    %183 = llvm.load %3 : !llvm.ptr -> i32
    %184 = llvm.load %2 : !llvm.ptr -> i32
    call @f32(%arg0, %182, %183, %184) : (!llvm.ptr, i32, i32, i32) -> ()
    %185 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32_88 = arith.constant 64 : i32
    %186 = arith.addi %185, %c64_i32_88 : i32
    %c32_i32_89 = arith.constant 32 : i32
    %187 = arith.addi %186, %c32_i32_89 : i32
    call @f81(%arg0, %187) : (!llvm.ptr, i32) -> ()
    %188 = llvm.load %3 : !llvm.ptr -> i32
    %c132_i32 = arith.constant 132 : i32
    %189 = arith.addi %188, %c132_i32 : i32
    %190 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_90 = arith.constant 0 : i64
    %191 = arith.extui %190 : i32 to i64
    %192 = arith.addi %191, %c0_i64_90 : i64
    %c4_i64_91 = arith.constant 4 : i64
    %193 = arith.addi %192, %c4_i64_91 : i64
    %c0_i32_92 = arith.constant 0 : i32
    %194 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_92) : (!llvm.ptr, i32) -> i32
    %195 = arith.extui %194 : i32 to i64
    %c65536_i64_93 = arith.constant 65536 : i64
    %196 = arith.muli %195, %c65536_i64_93 : i64
    %197 = arith.cmpi ult, %193, %196 : i64
    cf.cond_br %197, ^bb31, ^bb32
  ^bb30:  // pred: ^bb27
    %c1_i32_94 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_94) : (i32) -> ()
    cf.br ^bb29
  ^bb31:  // 2 preds: ^bb29, ^bb32
    %198 = llvm.getelementptr %12[%192] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %199 = llvm.load volatile %198 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_95 = arith.constant 0 : i64
    %200 = arith.extui %189 : i32 to i64
    %201 = arith.addi %200, %c0_i64_95 : i64
    %c4_i64_96 = arith.constant 4 : i64
    %202 = arith.addi %201, %c4_i64_96 : i64
    %c0_i32_97 = arith.constant 0 : i32
    %203 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_97) : (!llvm.ptr, i32) -> i32
    %204 = arith.extui %203 : i32 to i64
    %c65536_i64_98 = arith.constant 65536 : i64
    %205 = arith.muli %204, %c65536_i64_98 : i64
    %206 = arith.cmpi ult, %202, %205 : i64
    cf.cond_br %206, ^bb33, ^bb34
  ^bb32:  // pred: ^bb29
    %c1_i32_99 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_99) : (i32) -> ()
    cf.br ^bb31
  ^bb33:  // 2 preds: ^bb31, ^bb34
    %207 = llvm.getelementptr %12[%201] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %199, %207 {alignment = 1 : i64} : i32, !llvm.ptr
    %208 = llvm.load %3 : !llvm.ptr -> i32
    %c124_i32 = arith.constant 124 : i32
    %209 = arith.addi %208, %c124_i32 : i32
    %210 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_100 = arith.constant 0 : i64
    %211 = arith.extui %210 : i32 to i64
    %212 = arith.addi %211, %c0_i64_100 : i64
    %c8_i64_101 = arith.constant 8 : i64
    %213 = arith.addi %212, %c8_i64_101 : i64
    %c0_i32_102 = arith.constant 0 : i32
    %214 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_102) : (!llvm.ptr, i32) -> i32
    %215 = arith.extui %214 : i32 to i64
    %c65536_i64_103 = arith.constant 65536 : i64
    %216 = arith.muli %215, %c65536_i64_103 : i64
    %217 = arith.cmpi ult, %213, %216 : i64
    cf.cond_br %217, ^bb35, ^bb36
  ^bb34:  // pred: ^bb31
    %c1_i32_104 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_104) : (i32) -> ()
    cf.br ^bb33
  ^bb35:  // 2 preds: ^bb33, ^bb36
    %218 = llvm.getelementptr %12[%212] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %219 = llvm.load volatile %218 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_105 = arith.constant 0 : i64
    %220 = arith.extui %209 : i32 to i64
    %221 = arith.addi %220, %c0_i64_105 : i64
    %c8_i64_106 = arith.constant 8 : i64
    %222 = arith.addi %221, %c8_i64_106 : i64
    %c0_i32_107 = arith.constant 0 : i32
    %223 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_107) : (!llvm.ptr, i32) -> i32
    %224 = arith.extui %223 : i32 to i64
    %c65536_i64_108 = arith.constant 65536 : i64
    %225 = arith.muli %224, %c65536_i64_108 : i64
    %226 = arith.cmpi ult, %222, %225 : i64
    cf.cond_br %226, ^bb37, ^bb38
  ^bb36:  // pred: ^bb33
    %c1_i32_109 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_109) : (i32) -> ()
    cf.br ^bb35
  ^bb37:  // 2 preds: ^bb35, ^bb38
    %227 = llvm.getelementptr %12[%221] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %219, %227 {alignment = 1 : i64} : i64, !llvm.ptr
    %228 = llvm.load %7 : !llvm.ptr -> i32
    %229 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_110 = arith.constant 8 : i32
    %230 = arith.addi %229, %c8_i32_110 : i32
    %c0_i64_111 = arith.constant 0 : i64
    %231 = arith.extui %230 : i32 to i64
    %232 = arith.addi %231, %c0_i64_111 : i64
    %c8_i64_112 = arith.constant 8 : i64
    %233 = arith.addi %232, %c8_i64_112 : i64
    %c0_i32_113 = arith.constant 0 : i32
    %234 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_113) : (!llvm.ptr, i32) -> i32
    %235 = arith.extui %234 : i32 to i64
    %c65536_i64_114 = arith.constant 65536 : i64
    %236 = arith.muli %235, %c65536_i64_114 : i64
    %237 = arith.cmpi ult, %233, %236 : i64
    cf.cond_br %237, ^bb39, ^bb40
  ^bb38:  // pred: ^bb35
    %c1_i32_115 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_115) : (i32) -> ()
    cf.br ^bb37
  ^bb39:  // 2 preds: ^bb37, ^bb40
    %238 = llvm.getelementptr %12[%232] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %239 = llvm.load volatile %238 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_116 = arith.constant 0 : i64
    %240 = arith.extui %228 : i32 to i64
    %241 = arith.addi %240, %c0_i64_116 : i64
    %c8_i64_117 = arith.constant 8 : i64
    %242 = arith.addi %241, %c8_i64_117 : i64
    %c0_i32_118 = arith.constant 0 : i32
    %243 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_118) : (!llvm.ptr, i32) -> i32
    %244 = arith.extui %243 : i32 to i64
    %c65536_i64_119 = arith.constant 65536 : i64
    %245 = arith.muli %244, %c65536_i64_119 : i64
    %246 = arith.cmpi ult, %242, %245 : i64
    cf.cond_br %246, ^bb41, ^bb42
  ^bb40:  // pred: ^bb37
    %c1_i32_120 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_120) : (i32) -> ()
    cf.br ^bb39
  ^bb41:  // 2 preds: ^bb39, ^bb42
    %247 = llvm.getelementptr %12[%241] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %239, %247 {alignment = 1 : i64} : i64, !llvm.ptr
    %248 = llvm.load %6 : !llvm.ptr -> i32
    %249 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_121 = arith.constant 16 : i32
    %250 = arith.addi %249, %c16_i32_121 : i32
    %c0_i64_122 = arith.constant 0 : i64
    %251 = arith.extui %250 : i32 to i64
    %252 = arith.addi %251, %c0_i64_122 : i64
    %c8_i64_123 = arith.constant 8 : i64
    %253 = arith.addi %252, %c8_i64_123 : i64
    %c0_i32_124 = arith.constant 0 : i32
    %254 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_124) : (!llvm.ptr, i32) -> i32
    %255 = arith.extui %254 : i32 to i64
    %c65536_i64_125 = arith.constant 65536 : i64
    %256 = arith.muli %255, %c65536_i64_125 : i64
    %257 = arith.cmpi ult, %253, %256 : i64
    cf.cond_br %257, ^bb43, ^bb44
  ^bb42:  // pred: ^bb39
    %c1_i32_126 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_126) : (i32) -> ()
    cf.br ^bb41
  ^bb43:  // 2 preds: ^bb41, ^bb44
    %258 = llvm.getelementptr %12[%252] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %259 = llvm.load volatile %258 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_127 = arith.constant 0 : i64
    %260 = arith.extui %248 : i32 to i64
    %261 = arith.addi %260, %c0_i64_127 : i64
    %c8_i64_128 = arith.constant 8 : i64
    %262 = arith.addi %261, %c8_i64_128 : i64
    %c0_i32_129 = arith.constant 0 : i32
    %263 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_129) : (!llvm.ptr, i32) -> i32
    %264 = arith.extui %263 : i32 to i64
    %c65536_i64_130 = arith.constant 65536 : i64
    %265 = arith.muli %264, %c65536_i64_130 : i64
    %266 = arith.cmpi ult, %262, %265 : i64
    cf.cond_br %266, ^bb45, ^bb46
  ^bb44:  // pred: ^bb41
    %c1_i32_131 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_131) : (i32) -> ()
    cf.br ^bb43
  ^bb45:  // 2 preds: ^bb43, ^bb46
    %267 = llvm.getelementptr %12[%261] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %259, %267 {alignment = 1 : i64} : i64, !llvm.ptr
    %268 = llvm.load %5 : !llvm.ptr -> i32
    %269 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_132 = arith.constant 24 : i32
    %270 = arith.addi %269, %c24_i32_132 : i32
    %c0_i64_133 = arith.constant 0 : i64
    %271 = arith.extui %270 : i32 to i64
    %272 = arith.addi %271, %c0_i64_133 : i64
    %c8_i64_134 = arith.constant 8 : i64
    %273 = arith.addi %272, %c8_i64_134 : i64
    %c0_i32_135 = arith.constant 0 : i32
    %274 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_135) : (!llvm.ptr, i32) -> i32
    %275 = arith.extui %274 : i32 to i64
    %c65536_i64_136 = arith.constant 65536 : i64
    %276 = arith.muli %275, %c65536_i64_136 : i64
    %277 = arith.cmpi ult, %273, %276 : i64
    cf.cond_br %277, ^bb47, ^bb48
  ^bb46:  // pred: ^bb43
    %c1_i32_137 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_137) : (i32) -> ()
    cf.br ^bb45
  ^bb47:  // 2 preds: ^bb45, ^bb48
    %278 = llvm.getelementptr %12[%272] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %279 = llvm.load volatile %278 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_138 = arith.constant 0 : i64
    %280 = arith.extui %268 : i32 to i64
    %281 = arith.addi %280, %c0_i64_138 : i64
    %c8_i64_139 = arith.constant 8 : i64
    %282 = arith.addi %281, %c8_i64_139 : i64
    %c0_i32_140 = arith.constant 0 : i32
    %283 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_140) : (!llvm.ptr, i32) -> i32
    %284 = arith.extui %283 : i32 to i64
    %c65536_i64_141 = arith.constant 65536 : i64
    %285 = arith.muli %284, %c65536_i64_141 : i64
    %286 = arith.cmpi ult, %282, %285 : i64
    cf.cond_br %286, ^bb49, ^bb50
  ^bb48:  // pred: ^bb45
    %c1_i32_142 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_142) : (i32) -> ()
    cf.br ^bb47
  ^bb49:  // 2 preds: ^bb47, ^bb50
    %287 = llvm.getelementptr %12[%281] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %279, %287 {alignment = 1 : i64} : i64, !llvm.ptr
    %288 = llvm.load %3 : !llvm.ptr -> i32
    %289 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_143 = arith.constant 0 : i64
    %290 = arith.extui %289 : i32 to i64
    %291 = arith.addi %290, %c0_i64_143 : i64
    %c8_i64_144 = arith.constant 8 : i64
    %292 = arith.addi %291, %c8_i64_144 : i64
    %c0_i32_145 = arith.constant 0 : i32
    %293 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_145) : (!llvm.ptr, i32) -> i32
    %294 = arith.extui %293 : i32 to i64
    %c65536_i64_146 = arith.constant 65536 : i64
    %295 = arith.muli %294, %c65536_i64_146 : i64
    %296 = arith.cmpi ult, %292, %295 : i64
    cf.cond_br %296, ^bb51, ^bb52
  ^bb50:  // pred: ^bb47
    %c1_i32_147 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_147) : (i32) -> ()
    cf.br ^bb49
  ^bb51:  // 2 preds: ^bb49, ^bb52
    %297 = llvm.getelementptr %12[%291] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %298 = llvm.load volatile %297 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c116_i64 = arith.constant 116 : i64
    %299 = arith.extui %288 : i32 to i64
    %300 = arith.addi %299, %c116_i64 : i64
    %c8_i64_148 = arith.constant 8 : i64
    %301 = arith.addi %300, %c8_i64_148 : i64
    %c0_i32_149 = arith.constant 0 : i32
    %302 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_149) : (!llvm.ptr, i32) -> i32
    %303 = arith.extui %302 : i32 to i64
    %c65536_i64_150 = arith.constant 65536 : i64
    %304 = arith.muli %303, %c65536_i64_150 : i64
    %305 = arith.cmpi ult, %301, %304 : i64
    cf.cond_br %305, ^bb53, ^bb54
  ^bb52:  // pred: ^bb49
    %c1_i32_151 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_151) : (i32) -> ()
    cf.br ^bb51
  ^bb53:  // 2 preds: ^bb51, ^bb54
    %306 = llvm.getelementptr %12[%300] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %298, %306 {alignment = 1 : i64} : i64, !llvm.ptr
    %307 = llvm.load %3 : !llvm.ptr -> i32
    %308 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_152 = arith.constant 0 : i64
    %309 = arith.extui %308 : i32 to i64
    %310 = arith.addi %309, %c0_i64_152 : i64
    %c8_i64_153 = arith.constant 8 : i64
    %311 = arith.addi %310, %c8_i64_153 : i64
    %c0_i32_154 = arith.constant 0 : i32
    %312 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_154) : (!llvm.ptr, i32) -> i32
    %313 = arith.extui %312 : i32 to i64
    %c65536_i64_155 = arith.constant 65536 : i64
    %314 = arith.muli %313, %c65536_i64_155 : i64
    %315 = arith.cmpi ult, %311, %314 : i64
    cf.cond_br %315, ^bb55, ^bb56
  ^bb54:  // pred: ^bb51
    %c1_i32_156 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_156) : (i32) -> ()
    cf.br ^bb53
  ^bb55:  // 2 preds: ^bb53, ^bb56
    %316 = llvm.getelementptr %12[%310] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %317 = llvm.load volatile %316 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c64_i64_157 = arith.constant 64 : i64
    %318 = arith.extui %307 : i32 to i64
    %319 = arith.addi %318, %c64_i64_157 : i64
    %c8_i64_158 = arith.constant 8 : i64
    %320 = arith.addi %319, %c8_i64_158 : i64
    %c0_i32_159 = arith.constant 0 : i32
    %321 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_159) : (!llvm.ptr, i32) -> i32
    %322 = arith.extui %321 : i32 to i64
    %c65536_i64_160 = arith.constant 65536 : i64
    %323 = arith.muli %322, %c65536_i64_160 : i64
    %324 = arith.cmpi ult, %320, %323 : i64
    cf.cond_br %324, ^bb57, ^bb58
  ^bb56:  // pred: ^bb53
    %c1_i32_161 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_161) : (i32) -> ()
    cf.br ^bb55
  ^bb57:  // 2 preds: ^bb55, ^bb58
    %325 = llvm.getelementptr %12[%319] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %317, %325 {alignment = 1 : i64} : i64, !llvm.ptr
    %326 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32_162 = arith.constant 64 : i32
    %327 = arith.addi %326, %c64_i32_162 : i32
    call @f30(%arg0, %327) : (!llvm.ptr, i32) -> ()
    %328 = llvm.load %3 : !llvm.ptr -> i32
    %c176_i32_163 = arith.constant 176 : i32
    %329 = arith.addi %328, %c176_i32_163 : i32
    llvm.store %329, %9 : i32, !llvm.ptr
    %c1_i32_164 = arith.constant 1 : i32
    cf.br ^bb2(%c1_i32_164 : i32)
  ^bb58:  // pred: ^bb55
    %c1_i32_165 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_165) : (i32) -> ()
    cf.br ^bb57
  }
  func.func @f20(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %11 = llvm.load %7 : !llvm.ptr -> i32
    %c176_i32 = arith.constant 176 : i32
    %12 = arith.subi %11, %c176_i32 : i32
    llvm.store %12, %3 : i32, !llvm.ptr
    llvm.store %12, %7 : i32, !llvm.ptr
    %13 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %14 = arith.addi %13, %c4_i32 : i32
    %15 = llvm.load %1 : !llvm.ptr -> i32
    %16 = llvm.load %2 : !llvm.ptr -> i32
    call @f25(%arg0, %14, %15, %16) : (!llvm.ptr, i32, i32, i32) -> ()
    %17 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %18 = arith.extui %17 : i32 to i64
    %19 = arith.addi %18, %c4_i64 : i64
    %c1_i64 = arith.constant 1 : i64
    %20 = arith.addi %19, %c1_i64 : i64
    %c0_i32_5 = arith.constant 0 : i32
    %21 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_5) : (!llvm.ptr, i32) -> i32
    %22 = arith.extui %21 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %23 = arith.muli %22, %c65536_i64 : i64
    %24 = arith.cmpi ult, %20, %23 : i64
    cf.cond_br %24, ^bb5, ^bb6
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 3 preds: ^bb51, ^bb67, ^bb81
    %25 = llvm.load %3 : !llvm.ptr -> i32
    %c176_i32_6 = arith.constant 176 : i32
    %26 = arith.addi %25, %c176_i32_6 : i32
    llvm.store %26, %7 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb5
    %27 = llvm.load %0 : !llvm.ptr -> i32
    %28 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %29 = arith.extui %28 : i32 to i64
    %30 = arith.addi %29, %c8_i64 : i64
    %c8_i64_7 = arith.constant 8 : i64
    %31 = arith.addi %30, %c8_i64_7 : i64
    %c0_i32_8 = arith.constant 0 : i32
    %32 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_8) : (!llvm.ptr, i32) -> i32
    %33 = arith.extui %32 : i32 to i64
    %c65536_i64_9 = arith.constant 65536 : i64
    %34 = arith.muli %33, %c65536_i64_9 : i64
    %35 = arith.cmpi ult, %31, %34 : i64
    cf.cond_br %35, ^bb69, ^bb70
  ^bb5:  // 2 preds: ^bb1, ^bb6
    %36 = llvm.getelementptr %10[%19] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %37 = llvm.load volatile %36 {alignment = 1 : i64} : !llvm.ptr -> i8
    %38 = arith.extui %37 : i8 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %39 = arith.cmpi ne, %38, %c0_i32_10 : i32
    cf.cond_br %39, ^bb4, ^bb7
  ^bb6:  // pred: ^bb1
    %c1_i32_11 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_11) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // pred: ^bb5
    %40 = llvm.load %3 : !llvm.ptr -> i32
    %c72_i32 = arith.constant 72 : i32
    %41 = arith.addi %40, %c72_i32 : i32
    %42 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32_12 = arith.constant 4 : i32
    %43 = arith.addi %42, %c4_i32_12 : i32
    %c1_i32_13 = arith.constant 1 : i32
    %44 = arith.ori %43, %c1_i32_13 : i32
    llvm.store %44, %4 : i32, !llvm.ptr
    %c64_i32 = arith.constant 64 : i32
    %45 = call @f161(%arg0, %41, %44, %c64_i32) : (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_14 = arith.constant 0 : i32
    llvm.store %c0_i32_14, %2 : i32, !llvm.ptr
    cf.br ^bb13
  ^bb8:  // pred: ^bb24
    %46 = llvm.load %0 : !llvm.ptr -> i32
    %47 = llvm.load %3 : !llvm.ptr -> i32
    %c140_i64 = arith.constant 140 : i64
    %48 = arith.extui %47 : i32 to i64
    %49 = arith.addi %48, %c140_i64 : i64
    %c8_i64_15 = arith.constant 8 : i64
    %50 = arith.addi %49, %c8_i64_15 : i64
    %c0_i32_16 = arith.constant 0 : i32
    %51 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_16) : (!llvm.ptr, i32) -> i32
    %52 = arith.extui %51 : i32 to i64
    %c65536_i64_17 = arith.constant 65536 : i64
    %53 = arith.muli %52, %c65536_i64_17 : i64
    %54 = arith.cmpi ult, %50, %53 : i64
    cf.cond_br %54, ^bb53, ^bb54
  ^bb9:  // 2 preds: ^bb19, ^bb26
    %55 = llvm.load %3 : !llvm.ptr -> i32
    %c152_i32 = arith.constant 152 : i32
    %56 = arith.addi %55, %c152_i32 : i32
    %57 = llvm.load %3 : !llvm.ptr -> i32
    %c33_i32 = arith.constant 33 : i32
    %58 = arith.addi %57, %c33_i32 : i32
    %c0_i64 = arith.constant 0 : i64
    %59 = arith.extui %58 : i32 to i64
    %60 = arith.addi %59, %c0_i64 : i64
    %c4_i64_18 = arith.constant 4 : i64
    %61 = arith.addi %60, %c4_i64_18 : i64
    %c0_i32_19 = arith.constant 0 : i32
    %62 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_19) : (!llvm.ptr, i32) -> i32
    %63 = arith.extui %62 : i32 to i64
    %c65536_i64_20 = arith.constant 65536 : i64
    %64 = arith.muli %63, %c65536_i64_20 : i64
    %65 = arith.cmpi ult, %61, %64 : i64
    cf.cond_br %65, ^bb27, ^bb28
  ^bb10:  // 2 preds: ^bb17, ^bb18
    %66 = llvm.load %3 : !llvm.ptr -> i32
    %c136_i32 = arith.constant 136 : i32
    %67 = arith.addi %66, %c136_i32 : i32
    %68 = llvm.load %4 : !llvm.ptr -> i32
    call @f45(%arg0, %67, %68) : (!llvm.ptr, i32, i32) -> ()
    %69 = llvm.load %3 : !llvm.ptr -> i32
    %c136_i64 = arith.constant 136 : i64
    %70 = arith.extui %69 : i32 to i64
    %71 = arith.addi %70, %c136_i64 : i64
    %c4_i64_21 = arith.constant 4 : i64
    %72 = arith.addi %71, %c4_i64_21 : i64
    %c0_i32_22 = arith.constant 0 : i32
    %73 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_22) : (!llvm.ptr, i32) -> i32
    %74 = arith.extui %73 : i32 to i64
    %c65536_i64_23 = arith.constant 65536 : i64
    %75 = arith.muli %74, %c65536_i64_23 : i64
    %76 = arith.cmpi ult, %72, %75 : i64
    cf.cond_br %76, ^bb24, ^bb25
  ^bb11:  // 2 preds: ^bb12, ^bb13
    %77 = llvm.load %3 : !llvm.ptr -> i32
    %c104_i32 = arith.constant 104 : i32
    %78 = arith.addi %77, %c104_i32 : i32
    llvm.store %78, %5 : i32, !llvm.ptr
    %c0_i32_24 = arith.constant 0 : i32
    llvm.store %c0_i32_24, %2 : i32, !llvm.ptr
    cf.br ^bb19
  ^bb12:  // no predecessors
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb7, ^bb15
    %79 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %80 = arith.cmpi eq, %79, %c12_i32 : i32
    %81 = arith.extui %80 : i1 to i32
    %c0_i32_25 = arith.constant 0 : i32
    %82 = arith.cmpi ne, %81, %c0_i32_25 : i32
    cf.cond_br %82, ^bb11, ^bb14
  ^bb14:  // pred: ^bb13
    %83 = llvm.load %3 : !llvm.ptr -> i32
    %c72_i32_26 = arith.constant 72 : i32
    %84 = arith.addi %83, %c72_i32_26 : i32
    %85 = llvm.load %2 : !llvm.ptr -> i32
    %86 = arith.addi %84, %85 : i32
    llvm.store %86, %1 : i32, !llvm.ptr
    %87 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_27 = arith.constant 1 : i32
    %88 = arith.addi %87, %c1_i32_27 : i32
    llvm.store %88, %2 : i32, !llvm.ptr
    %89 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_28 = arith.constant 0 : i64
    %90 = arith.extui %89 : i32 to i64
    %91 = arith.addi %90, %c0_i64_28 : i64
    %c1_i64_29 = arith.constant 1 : i64
    %92 = arith.addi %91, %c1_i64_29 : i64
    %c0_i32_30 = arith.constant 0 : i32
    %93 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_30) : (!llvm.ptr, i32) -> i32
    %94 = arith.extui %93 : i32 to i64
    %c65536_i64_31 = arith.constant 65536 : i64
    %95 = arith.muli %94, %c65536_i64_31 : i64
    %96 = arith.cmpi ult, %92, %95 : i64
    cf.cond_br %96, ^bb15, ^bb16
  ^bb15:  // 2 preds: ^bb14, ^bb16
    %97 = llvm.getelementptr %10[%91] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %98 = llvm.load volatile %97 {alignment = 1 : i64} : !llvm.ptr -> i8
    %99 = arith.extui %98 : i8 to i32
    %c0_i32_32 = arith.constant 0 : i32
    %100 = arith.cmpi eq, %99, %c0_i32_32 : i32
    %101 = arith.extui %100 : i1 to i32
    %c0_i32_33 = arith.constant 0 : i32
    %102 = arith.cmpi ne, %101, %c0_i32_33 : i32
    cf.cond_br %102, ^bb13, ^bb17
  ^bb16:  // pred: ^bb14
    %c1_i32_34 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_34) : (i32) -> ()
    cf.br ^bb15
  ^bb17:  // pred: ^bb15
    cf.br ^bb10
  ^bb18:  // pred: ^bb23
    cf.br ^bb10
  ^bb19:  // 2 preds: ^bb11, ^bb21
    %103 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32_35 = arith.constant 12 : i32
    %104 = arith.cmpi eq, %103, %c12_i32_35 : i32
    %105 = arith.extui %104 : i1 to i32
    %c0_i32_36 = arith.constant 0 : i32
    %106 = arith.cmpi ne, %105, %c0_i32_36 : i32
    cf.cond_br %106, ^bb9, ^bb20
  ^bb20:  // pred: ^bb19
    %107 = llvm.load %5 : !llvm.ptr -> i32
    %108 = llvm.load %2 : !llvm.ptr -> i32
    %109 = arith.addi %107, %108 : i32
    llvm.store %109, %1 : i32, !llvm.ptr
    %110 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_37 = arith.constant 1 : i32
    %111 = arith.addi %110, %c1_i32_37 : i32
    llvm.store %111, %2 : i32, !llvm.ptr
    %112 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_38 = arith.constant 0 : i64
    %113 = arith.extui %112 : i32 to i64
    %114 = arith.addi %113, %c0_i64_38 : i64
    %c1_i64_39 = arith.constant 1 : i64
    %115 = arith.addi %114, %c1_i64_39 : i64
    %c0_i32_40 = arith.constant 0 : i32
    %116 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_40) : (!llvm.ptr, i32) -> i32
    %117 = arith.extui %116 : i32 to i64
    %c65536_i64_41 = arith.constant 65536 : i64
    %118 = arith.muli %117, %c65536_i64_41 : i64
    %119 = arith.cmpi ult, %115, %118 : i64
    cf.cond_br %119, ^bb21, ^bb22
  ^bb21:  // 2 preds: ^bb20, ^bb22
    %120 = llvm.getelementptr %10[%114] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %121 = llvm.load volatile %120 {alignment = 1 : i64} : !llvm.ptr -> i8
    %122 = arith.extui %121 : i8 to i32
    %c0_i32_42 = arith.constant 0 : i32
    %123 = arith.cmpi eq, %122, %c0_i32_42 : i32
    %124 = arith.extui %123 : i1 to i32
    %c0_i32_43 = arith.constant 0 : i32
    %125 = arith.cmpi ne, %124, %c0_i32_43 : i32
    cf.cond_br %125, ^bb19, ^bb23
  ^bb22:  // pred: ^bb20
    %c1_i32_44 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_44) : (i32) -> ()
    cf.br ^bb21
  ^bb23:  // pred: ^bb21
    cf.br ^bb18
  ^bb24:  // 2 preds: ^bb10, ^bb25
    %126 = llvm.getelementptr %10[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %127 = llvm.load volatile %126 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %127, %2 : i32, !llvm.ptr
    %c-2147483638_i32 = arith.constant -2147483638 : i32
    %128 = arith.cmpi eq, %127, %c-2147483638_i32 : i32
    %129 = arith.extui %128 : i1 to i32
    %c0_i32_45 = arith.constant 0 : i32
    %130 = arith.cmpi eq, %129, %c0_i32_45 : i32
    %131 = arith.extui %130 : i1 to i32
    %c0_i32_46 = arith.constant 0 : i32
    %132 = arith.cmpi ne, %131, %c0_i32_46 : i32
    cf.cond_br %132, ^bb8, ^bb26
  ^bb25:  // pred: ^bb10
    %c1_i32_47 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_47) : (i32) -> ()
    cf.br ^bb24
  ^bb26:  // pred: ^bb24
    cf.br ^bb9
  ^bb27:  // 2 preds: ^bb9, ^bb28
    %133 = llvm.getelementptr %10[%60] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %134 = llvm.load volatile %133 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_48 = arith.constant 0 : i64
    %135 = arith.extui %56 : i32 to i64
    %136 = arith.addi %135, %c0_i64_48 : i64
    %c4_i64_49 = arith.constant 4 : i64
    %137 = arith.addi %136, %c4_i64_49 : i64
    %c0_i32_50 = arith.constant 0 : i32
    %138 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_50) : (!llvm.ptr, i32) -> i32
    %139 = arith.extui %138 : i32 to i64
    %c65536_i64_51 = arith.constant 65536 : i64
    %140 = arith.muli %139, %c65536_i64_51 : i64
    %141 = arith.cmpi ult, %137, %140 : i64
    cf.cond_br %141, ^bb29, ^bb30
  ^bb28:  // pred: ^bb9
    %c1_i32_52 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_52) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // 2 preds: ^bb27, ^bb30
    %142 = llvm.getelementptr %10[%136] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %134, %142 {alignment = 1 : i64} : i32, !llvm.ptr
    %143 = llvm.load %3 : !llvm.ptr -> i32
    %c144_i32 = arith.constant 144 : i32
    %144 = arith.addi %143, %c144_i32 : i32
    %145 = llvm.load %3 : !llvm.ptr -> i32
    %c25_i32 = arith.constant 25 : i32
    %146 = arith.addi %145, %c25_i32 : i32
    %c0_i64_53 = arith.constant 0 : i64
    %147 = arith.extui %146 : i32 to i64
    %148 = arith.addi %147, %c0_i64_53 : i64
    %c8_i64_54 = arith.constant 8 : i64
    %149 = arith.addi %148, %c8_i64_54 : i64
    %c0_i32_55 = arith.constant 0 : i32
    %150 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_55) : (!llvm.ptr, i32) -> i32
    %151 = arith.extui %150 : i32 to i64
    %c65536_i64_56 = arith.constant 65536 : i64
    %152 = arith.muli %151, %c65536_i64_56 : i64
    %153 = arith.cmpi ult, %149, %152 : i64
    cf.cond_br %153, ^bb31, ^bb32
  ^bb30:  // pred: ^bb27
    %c1_i32_57 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_57) : (i32) -> ()
    cf.br ^bb29
  ^bb31:  // 2 preds: ^bb29, ^bb32
    %154 = llvm.getelementptr %10[%148] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %155 = llvm.load volatile %154 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_58 = arith.constant 0 : i64
    %156 = arith.extui %144 : i32 to i64
    %157 = arith.addi %156, %c0_i64_58 : i64
    %c8_i64_59 = arith.constant 8 : i64
    %158 = arith.addi %157, %c8_i64_59 : i64
    %c0_i32_60 = arith.constant 0 : i32
    %159 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_60) : (!llvm.ptr, i32) -> i32
    %160 = arith.extui %159 : i32 to i64
    %c65536_i64_61 = arith.constant 65536 : i64
    %161 = arith.muli %160, %c65536_i64_61 : i64
    %162 = arith.cmpi ult, %158, %161 : i64
    cf.cond_br %162, ^bb33, ^bb34
  ^bb32:  // pred: ^bb29
    %c1_i32_62 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_62) : (i32) -> ()
    cf.br ^bb31
  ^bb33:  // 2 preds: ^bb31, ^bb34
    %163 = llvm.getelementptr %10[%157] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %155, %163 {alignment = 1 : i64} : i64, !llvm.ptr
    %164 = llvm.load %3 : !llvm.ptr -> i32
    %c164_i32 = arith.constant 164 : i32
    %165 = arith.addi %164, %c164_i32 : i32
    %166 = llvm.load %3 : !llvm.ptr -> i32
    %c57_i32 = arith.constant 57 : i32
    %167 = arith.addi %166, %c57_i32 : i32
    %c0_i64_63 = arith.constant 0 : i64
    %168 = arith.extui %167 : i32 to i64
    %169 = arith.addi %168, %c0_i64_63 : i64
    %c8_i64_64 = arith.constant 8 : i64
    %170 = arith.addi %169, %c8_i64_64 : i64
    %c0_i32_65 = arith.constant 0 : i32
    %171 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_65) : (!llvm.ptr, i32) -> i32
    %172 = arith.extui %171 : i32 to i64
    %c65536_i64_66 = arith.constant 65536 : i64
    %173 = arith.muli %172, %c65536_i64_66 : i64
    %174 = arith.cmpi ult, %170, %173 : i64
    cf.cond_br %174, ^bb35, ^bb36
  ^bb34:  // pred: ^bb31
    %c1_i32_67 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_67) : (i32) -> ()
    cf.br ^bb33
  ^bb35:  // 2 preds: ^bb33, ^bb36
    %175 = llvm.getelementptr %10[%169] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %176 = llvm.load volatile %175 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_68 = arith.constant 0 : i64
    %177 = arith.extui %165 : i32 to i64
    %178 = arith.addi %177, %c0_i64_68 : i64
    %c8_i64_69 = arith.constant 8 : i64
    %179 = arith.addi %178, %c8_i64_69 : i64
    %c0_i32_70 = arith.constant 0 : i32
    %180 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_70) : (!llvm.ptr, i32) -> i32
    %181 = arith.extui %180 : i32 to i64
    %c65536_i64_71 = arith.constant 65536 : i64
    %182 = arith.muli %181, %c65536_i64_71 : i64
    %183 = arith.cmpi ult, %179, %182 : i64
    cf.cond_br %183, ^bb37, ^bb38
  ^bb36:  // pred: ^bb33
    %c1_i32_72 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_72) : (i32) -> ()
    cf.br ^bb35
  ^bb37:  // 2 preds: ^bb35, ^bb38
    %184 = llvm.getelementptr %10[%178] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %176, %184 {alignment = 1 : i64} : i64, !llvm.ptr
    %185 = llvm.load %3 : !llvm.ptr -> i32
    %c172_i32 = arith.constant 172 : i32
    %186 = arith.addi %185, %c172_i32 : i32
    %187 = llvm.load %3 : !llvm.ptr -> i32
    %c65_i32 = arith.constant 65 : i32
    %188 = arith.addi %187, %c65_i32 : i32
    %c0_i64_73 = arith.constant 0 : i64
    %189 = arith.extui %188 : i32 to i64
    %190 = arith.addi %189, %c0_i64_73 : i64
    %c4_i64_74 = arith.constant 4 : i64
    %191 = arith.addi %190, %c4_i64_74 : i64
    %c0_i32_75 = arith.constant 0 : i32
    %192 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_75) : (!llvm.ptr, i32) -> i32
    %193 = arith.extui %192 : i32 to i64
    %c65536_i64_76 = arith.constant 65536 : i64
    %194 = arith.muli %193, %c65536_i64_76 : i64
    %195 = arith.cmpi ult, %191, %194 : i64
    cf.cond_br %195, ^bb39, ^bb40
  ^bb38:  // pred: ^bb35
    %c1_i32_77 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_77) : (i32) -> ()
    cf.br ^bb37
  ^bb39:  // 2 preds: ^bb37, ^bb40
    %196 = llvm.getelementptr %10[%190] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %197 = llvm.load volatile %196 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_78 = arith.constant 0 : i64
    %198 = arith.extui %186 : i32 to i64
    %199 = arith.addi %198, %c0_i64_78 : i64
    %c4_i64_79 = arith.constant 4 : i64
    %200 = arith.addi %199, %c4_i64_79 : i64
    %c0_i32_80 = arith.constant 0 : i32
    %201 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_80) : (!llvm.ptr, i32) -> i32
    %202 = arith.extui %201 : i32 to i64
    %c65536_i64_81 = arith.constant 65536 : i64
    %203 = arith.muli %202, %c65536_i64_81 : i64
    %204 = arith.cmpi ult, %200, %203 : i64
    cf.cond_br %204, ^bb41, ^bb42
  ^bb40:  // pred: ^bb37
    %c1_i32_82 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_82) : (i32) -> ()
    cf.br ^bb39
  ^bb41:  // 2 preds: ^bb39, ^bb42
    %205 = llvm.getelementptr %10[%199] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %197, %205 {alignment = 1 : i64} : i32, !llvm.ptr
    %206 = llvm.load %3 : !llvm.ptr -> i32
    %207 = llvm.load %3 : !llvm.ptr -> i32
    %c17_i64 = arith.constant 17 : i64
    %208 = arith.extui %207 : i32 to i64
    %209 = arith.addi %208, %c17_i64 : i64
    %c8_i64_83 = arith.constant 8 : i64
    %210 = arith.addi %209, %c8_i64_83 : i64
    %c0_i32_84 = arith.constant 0 : i32
    %211 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_84) : (!llvm.ptr, i32) -> i32
    %212 = arith.extui %211 : i32 to i64
    %c65536_i64_85 = arith.constant 65536 : i64
    %213 = arith.muli %212, %c65536_i64_85 : i64
    %214 = arith.cmpi ult, %210, %213 : i64
    cf.cond_br %214, ^bb43, ^bb44
  ^bb42:  // pred: ^bb39
    %c1_i32_86 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_86) : (i32) -> ()
    cf.br ^bb41
  ^bb43:  // 2 preds: ^bb41, ^bb44
    %215 = llvm.getelementptr %10[%209] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %216 = llvm.load volatile %215 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c136_i64_87 = arith.constant 136 : i64
    %217 = arith.extui %206 : i32 to i64
    %218 = arith.addi %217, %c136_i64_87 : i64
    %c8_i64_88 = arith.constant 8 : i64
    %219 = arith.addi %218, %c8_i64_88 : i64
    %c0_i32_89 = arith.constant 0 : i32
    %220 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_89) : (!llvm.ptr, i32) -> i32
    %221 = arith.extui %220 : i32 to i64
    %c65536_i64_90 = arith.constant 65536 : i64
    %222 = arith.muli %221, %c65536_i64_90 : i64
    %223 = arith.cmpi ult, %219, %222 : i64
    cf.cond_br %223, ^bb45, ^bb46
  ^bb44:  // pred: ^bb41
    %c1_i32_91 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_91) : (i32) -> ()
    cf.br ^bb43
  ^bb45:  // 2 preds: ^bb43, ^bb46
    %224 = llvm.getelementptr %10[%218] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %216, %224 {alignment = 1 : i64} : i64, !llvm.ptr
    %225 = llvm.load %3 : !llvm.ptr -> i32
    %226 = llvm.load %3 : !llvm.ptr -> i32
    %c49_i64 = arith.constant 49 : i64
    %227 = arith.extui %226 : i32 to i64
    %228 = arith.addi %227, %c49_i64 : i64
    %c8_i64_92 = arith.constant 8 : i64
    %229 = arith.addi %228, %c8_i64_92 : i64
    %c0_i32_93 = arith.constant 0 : i32
    %230 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_93) : (!llvm.ptr, i32) -> i32
    %231 = arith.extui %230 : i32 to i64
    %c65536_i64_94 = arith.constant 65536 : i64
    %232 = arith.muli %231, %c65536_i64_94 : i64
    %233 = arith.cmpi ult, %229, %232 : i64
    cf.cond_br %233, ^bb47, ^bb48
  ^bb46:  // pred: ^bb43
    %c1_i32_95 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_95) : (i32) -> ()
    cf.br ^bb45
  ^bb47:  // 2 preds: ^bb45, ^bb48
    %234 = llvm.getelementptr %10[%228] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %235 = llvm.load volatile %234 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c156_i64 = arith.constant 156 : i64
    %236 = arith.extui %225 : i32 to i64
    %237 = arith.addi %236, %c156_i64 : i64
    %c8_i64_96 = arith.constant 8 : i64
    %238 = arith.addi %237, %c8_i64_96 : i64
    %c0_i32_97 = arith.constant 0 : i32
    %239 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_97) : (!llvm.ptr, i32) -> i32
    %240 = arith.extui %239 : i32 to i64
    %c65536_i64_98 = arith.constant 65536 : i64
    %241 = arith.muli %240, %c65536_i64_98 : i64
    %242 = arith.cmpi ult, %238, %241 : i64
    cf.cond_br %242, ^bb49, ^bb50
  ^bb48:  // pred: ^bb45
    %c1_i32_99 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_99) : (i32) -> ()
    cf.br ^bb47
  ^bb49:  // 2 preds: ^bb47, ^bb50
    %243 = llvm.getelementptr %10[%237] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %235, %243 {alignment = 1 : i64} : i64, !llvm.ptr
    %244 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_100 = arith.constant 1 : i32
    %245 = arith.addi %244, %c1_i32_100 : i32
    %246 = llvm.load %3 : !llvm.ptr -> i32
    %c136_i32_101 = arith.constant 136 : i32
    %247 = arith.addi %246, %c136_i32_101 : i32
    %c40_i32 = arith.constant 40 : i32
    %248 = call @f161(%arg0, %245, %247, %c40_i32) : (!llvm.ptr, i32, i32, i32) -> i32
    %249 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_102 = arith.constant 0 : i32
    %c0_i64_103 = arith.constant 0 : i64
    %250 = arith.extui %249 : i32 to i64
    %251 = arith.addi %250, %c0_i64_103 : i64
    %c1_i64_104 = arith.constant 1 : i64
    %252 = arith.addi %251, %c1_i64_104 : i64
    %c0_i32_105 = arith.constant 0 : i32
    %253 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_105) : (!llvm.ptr, i32) -> i32
    %254 = arith.extui %253 : i32 to i64
    %c65536_i64_106 = arith.constant 65536 : i64
    %255 = arith.muli %254, %c65536_i64_106 : i64
    %256 = arith.cmpi ult, %252, %255 : i64
    cf.cond_br %256, ^bb51, ^bb52
  ^bb50:  // pred: ^bb47
    %c1_i32_107 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_107) : (i32) -> ()
    cf.br ^bb49
  ^bb51:  // 2 preds: ^bb49, ^bb52
    %257 = llvm.getelementptr %10[%251] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %258 = arith.trunci %c0_i32_102 : i32 to i8
    llvm.store volatile %258, %257 {alignment = 1 : i64} : i8, !llvm.ptr
    cf.br ^bb3
  ^bb52:  // pred: ^bb49
    %c1_i32_108 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_108) : (i32) -> ()
    cf.br ^bb51
  ^bb53:  // 2 preds: ^bb8, ^bb54
    %259 = llvm.getelementptr %10[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %260 = llvm.load volatile %259 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c8_i64_109 = arith.constant 8 : i64
    %261 = arith.extui %46 : i32 to i64
    %262 = arith.addi %261, %c8_i64_109 : i64
    %c8_i64_110 = arith.constant 8 : i64
    %263 = arith.addi %262, %c8_i64_110 : i64
    %c0_i32_111 = arith.constant 0 : i32
    %264 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_111) : (!llvm.ptr, i32) -> i32
    %265 = arith.extui %264 : i32 to i64
    %c65536_i64_112 = arith.constant 65536 : i64
    %266 = arith.muli %265, %c65536_i64_112 : i64
    %267 = arith.cmpi ult, %263, %266 : i64
    cf.cond_br %267, ^bb55, ^bb56
  ^bb54:  // pred: ^bb8
    %c1_i32_113 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_113) : (i32) -> ()
    cf.br ^bb53
  ^bb55:  // 2 preds: ^bb53, ^bb56
    %268 = llvm.getelementptr %10[%262] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %260, %268 {alignment = 1 : i64} : i64, !llvm.ptr
    %269 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %270 = arith.addi %269, %c24_i32 : i32
    %271 = llvm.load %3 : !llvm.ptr -> i32
    %c156_i32 = arith.constant 156 : i32
    %272 = arith.addi %271, %c156_i32 : i32
    %c0_i64_114 = arith.constant 0 : i64
    %273 = arith.extui %272 : i32 to i64
    %274 = arith.addi %273, %c0_i64_114 : i64
    %c4_i64_115 = arith.constant 4 : i64
    %275 = arith.addi %274, %c4_i64_115 : i64
    %c0_i32_116 = arith.constant 0 : i32
    %276 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_116) : (!llvm.ptr, i32) -> i32
    %277 = arith.extui %276 : i32 to i64
    %c65536_i64_117 = arith.constant 65536 : i64
    %278 = arith.muli %277, %c65536_i64_117 : i64
    %279 = arith.cmpi ult, %275, %278 : i64
    cf.cond_br %279, ^bb57, ^bb58
  ^bb56:  // pred: ^bb53
    %c1_i32_118 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_118) : (i32) -> ()
    cf.br ^bb55
  ^bb57:  // 2 preds: ^bb55, ^bb58
    %280 = llvm.getelementptr %10[%274] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %281 = llvm.load volatile %280 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_119 = arith.constant 0 : i64
    %282 = arith.extui %270 : i32 to i64
    %283 = arith.addi %282, %c0_i64_119 : i64
    %c4_i64_120 = arith.constant 4 : i64
    %284 = arith.addi %283, %c4_i64_120 : i64
    %c0_i32_121 = arith.constant 0 : i32
    %285 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_121) : (!llvm.ptr, i32) -> i32
    %286 = arith.extui %285 : i32 to i64
    %c65536_i64_122 = arith.constant 65536 : i64
    %287 = arith.muli %286, %c65536_i64_122 : i64
    %288 = arith.cmpi ult, %284, %287 : i64
    cf.cond_br %288, ^bb59, ^bb60
  ^bb58:  // pred: ^bb55
    %c1_i32_123 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_123) : (i32) -> ()
    cf.br ^bb57
  ^bb59:  // 2 preds: ^bb57, ^bb60
    %289 = llvm.getelementptr %10[%283] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %281, %289 {alignment = 1 : i64} : i32, !llvm.ptr
    %290 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %291 = arith.addi %290, %c16_i32 : i32
    %292 = llvm.load %3 : !llvm.ptr -> i32
    %c148_i32 = arith.constant 148 : i32
    %293 = arith.addi %292, %c148_i32 : i32
    %c0_i64_124 = arith.constant 0 : i64
    %294 = arith.extui %293 : i32 to i64
    %295 = arith.addi %294, %c0_i64_124 : i64
    %c8_i64_125 = arith.constant 8 : i64
    %296 = arith.addi %295, %c8_i64_125 : i64
    %c0_i32_126 = arith.constant 0 : i32
    %297 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_126) : (!llvm.ptr, i32) -> i32
    %298 = arith.extui %297 : i32 to i64
    %c65536_i64_127 = arith.constant 65536 : i64
    %299 = arith.muli %298, %c65536_i64_127 : i64
    %300 = arith.cmpi ult, %296, %299 : i64
    cf.cond_br %300, ^bb61, ^bb62
  ^bb60:  // pred: ^bb57
    %c1_i32_128 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_128) : (i32) -> ()
    cf.br ^bb59
  ^bb61:  // 2 preds: ^bb59, ^bb62
    %301 = llvm.getelementptr %10[%295] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %302 = llvm.load volatile %301 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_129 = arith.constant 0 : i64
    %303 = arith.extui %291 : i32 to i64
    %304 = arith.addi %303, %c0_i64_129 : i64
    %c8_i64_130 = arith.constant 8 : i64
    %305 = arith.addi %304, %c8_i64_130 : i64
    %c0_i32_131 = arith.constant 0 : i32
    %306 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_131) : (!llvm.ptr, i32) -> i32
    %307 = arith.extui %306 : i32 to i64
    %c65536_i64_132 = arith.constant 65536 : i64
    %308 = arith.muli %307, %c65536_i64_132 : i64
    %309 = arith.cmpi ult, %305, %308 : i64
    cf.cond_br %309, ^bb63, ^bb64
  ^bb62:  // pred: ^bb59
    %c1_i32_133 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_133) : (i32) -> ()
    cf.br ^bb61
  ^bb63:  // 2 preds: ^bb61, ^bb64
    %310 = llvm.getelementptr %10[%304] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %302, %310 {alignment = 1 : i64} : i64, !llvm.ptr
    %311 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_134 = arith.constant 1 : i32
    %c0_i64_135 = arith.constant 0 : i64
    %312 = arith.extui %311 : i32 to i64
    %313 = arith.addi %312, %c0_i64_135 : i64
    %c1_i64_136 = arith.constant 1 : i64
    %314 = arith.addi %313, %c1_i64_136 : i64
    %c0_i32_137 = arith.constant 0 : i32
    %315 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_137) : (!llvm.ptr, i32) -> i32
    %316 = arith.extui %315 : i32 to i64
    %c65536_i64_138 = arith.constant 65536 : i64
    %317 = arith.muli %316, %c65536_i64_138 : i64
    %318 = arith.cmpi ult, %314, %317 : i64
    cf.cond_br %318, ^bb65, ^bb66
  ^bb64:  // pred: ^bb61
    %c1_i32_139 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_139) : (i32) -> ()
    cf.br ^bb63
  ^bb65:  // 2 preds: ^bb63, ^bb66
    %319 = llvm.getelementptr %10[%313] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %320 = arith.trunci %c1_i32_134 : i32 to i8
    llvm.store volatile %320, %319 {alignment = 1 : i64} : i8, !llvm.ptr
    %321 = llvm.load %0 : !llvm.ptr -> i32
    %322 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_140 = arith.constant 4 : i64
    %323 = arith.extui %321 : i32 to i64
    %324 = arith.addi %323, %c4_i64_140 : i64
    %c4_i64_141 = arith.constant 4 : i64
    %325 = arith.addi %324, %c4_i64_141 : i64
    %c0_i32_142 = arith.constant 0 : i32
    %326 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_142) : (!llvm.ptr, i32) -> i32
    %327 = arith.extui %326 : i32 to i64
    %c65536_i64_143 = arith.constant 65536 : i64
    %328 = arith.muli %327, %c65536_i64_143 : i64
    %329 = arith.cmpi ult, %325, %328 : i64
    cf.cond_br %329, ^bb67, ^bb68
  ^bb66:  // pred: ^bb63
    %c1_i32_144 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_144) : (i32) -> ()
    cf.br ^bb65
  ^bb67:  // 2 preds: ^bb65, ^bb68
    %330 = llvm.getelementptr %10[%324] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %322, %330 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb3
  ^bb68:  // pred: ^bb65
    %c1_i32_145 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_145) : (i32) -> ()
    cf.br ^bb67
  ^bb69:  // 2 preds: ^bb4, ^bb70
    %331 = llvm.getelementptr %10[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %332 = llvm.load volatile %331 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c4_i64_146 = arith.constant 4 : i64
    %333 = arith.extui %27 : i32 to i64
    %334 = arith.addi %333, %c4_i64_146 : i64
    %c8_i64_147 = arith.constant 8 : i64
    %335 = arith.addi %334, %c8_i64_147 : i64
    %c0_i32_148 = arith.constant 0 : i32
    %336 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_148) : (!llvm.ptr, i32) -> i32
    %337 = arith.extui %336 : i32 to i64
    %c65536_i64_149 = arith.constant 65536 : i64
    %338 = arith.muli %337, %c65536_i64_149 : i64
    %339 = arith.cmpi ult, %335, %338 : i64
    cf.cond_br %339, ^bb71, ^bb72
  ^bb70:  // pred: ^bb4
    %c1_i32_150 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_150) : (i32) -> ()
    cf.br ^bb69
  ^bb71:  // 2 preds: ^bb69, ^bb72
    %340 = llvm.getelementptr %10[%334] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %332, %340 {alignment = 1 : i64} : i64, !llvm.ptr
    %341 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_151 = arith.constant 1 : i32
    %c0_i64_152 = arith.constant 0 : i64
    %342 = arith.extui %341 : i32 to i64
    %343 = arith.addi %342, %c0_i64_152 : i64
    %c1_i64_153 = arith.constant 1 : i64
    %344 = arith.addi %343, %c1_i64_153 : i64
    %c0_i32_154 = arith.constant 0 : i32
    %345 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_154) : (!llvm.ptr, i32) -> i32
    %346 = arith.extui %345 : i32 to i64
    %c65536_i64_155 = arith.constant 65536 : i64
    %347 = arith.muli %346, %c65536_i64_155 : i64
    %348 = arith.cmpi ult, %344, %347 : i64
    cf.cond_br %348, ^bb73, ^bb74
  ^bb72:  // pred: ^bb69
    %c1_i32_156 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_156) : (i32) -> ()
    cf.br ^bb71
  ^bb73:  // 2 preds: ^bb71, ^bb74
    %349 = llvm.getelementptr %10[%343] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %350 = arith.trunci %c1_i32_151 : i32 to i8
    llvm.store volatile %350, %349 {alignment = 1 : i64} : i8, !llvm.ptr
    %351 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i32 = arith.constant 20 : i32
    %352 = arith.addi %351, %c20_i32 : i32
    %353 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32_157 = arith.constant 4 : i32
    %354 = arith.addi %353, %c4_i32_157 : i32
    %c20_i32_158 = arith.constant 20 : i32
    %355 = arith.addi %354, %c20_i32_158 : i32
    %c0_i64_159 = arith.constant 0 : i64
    %356 = arith.extui %355 : i32 to i64
    %357 = arith.addi %356, %c0_i64_159 : i64
    %c8_i64_160 = arith.constant 8 : i64
    %358 = arith.addi %357, %c8_i64_160 : i64
    %c0_i32_161 = arith.constant 0 : i32
    %359 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_161) : (!llvm.ptr, i32) -> i32
    %360 = arith.extui %359 : i32 to i64
    %c65536_i64_162 = arith.constant 65536 : i64
    %361 = arith.muli %360, %c65536_i64_162 : i64
    %362 = arith.cmpi ult, %358, %361 : i64
    cf.cond_br %362, ^bb75, ^bb76
  ^bb74:  // pred: ^bb71
    %c1_i32_163 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_163) : (i32) -> ()
    cf.br ^bb73
  ^bb75:  // 2 preds: ^bb73, ^bb76
    %363 = llvm.getelementptr %10[%357] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %364 = llvm.load volatile %363 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_164 = arith.constant 0 : i64
    %365 = arith.extui %352 : i32 to i64
    %366 = arith.addi %365, %c0_i64_164 : i64
    %c8_i64_165 = arith.constant 8 : i64
    %367 = arith.addi %366, %c8_i64_165 : i64
    %c0_i32_166 = arith.constant 0 : i32
    %368 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_166) : (!llvm.ptr, i32) -> i32
    %369 = arith.extui %368 : i32 to i64
    %c65536_i64_167 = arith.constant 65536 : i64
    %370 = arith.muli %369, %c65536_i64_167 : i64
    %371 = arith.cmpi ult, %367, %370 : i64
    cf.cond_br %371, ^bb77, ^bb78
  ^bb76:  // pred: ^bb73
    %c1_i32_168 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_168) : (i32) -> ()
    cf.br ^bb75
  ^bb77:  // 2 preds: ^bb75, ^bb78
    %372 = llvm.getelementptr %10[%366] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %364, %372 {alignment = 1 : i64} : i64, !llvm.ptr
    %373 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i32_169 = arith.constant 12 : i32
    %374 = arith.addi %373, %c12_i32_169 : i32
    %375 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32_170 = arith.constant 4 : i32
    %376 = arith.addi %375, %c4_i32_170 : i32
    %c12_i32_171 = arith.constant 12 : i32
    %377 = arith.addi %376, %c12_i32_171 : i32
    %c0_i64_172 = arith.constant 0 : i64
    %378 = arith.extui %377 : i32 to i64
    %379 = arith.addi %378, %c0_i64_172 : i64
    %c8_i64_173 = arith.constant 8 : i64
    %380 = arith.addi %379, %c8_i64_173 : i64
    %c0_i32_174 = arith.constant 0 : i32
    %381 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_174) : (!llvm.ptr, i32) -> i32
    %382 = arith.extui %381 : i32 to i64
    %c65536_i64_175 = arith.constant 65536 : i64
    %383 = arith.muli %382, %c65536_i64_175 : i64
    %384 = arith.cmpi ult, %380, %383 : i64
    cf.cond_br %384, ^bb79, ^bb80
  ^bb78:  // pred: ^bb75
    %c1_i32_176 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_176) : (i32) -> ()
    cf.br ^bb77
  ^bb79:  // 2 preds: ^bb77, ^bb80
    %385 = llvm.getelementptr %10[%379] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %386 = llvm.load volatile %385 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_177 = arith.constant 0 : i64
    %387 = arith.extui %374 : i32 to i64
    %388 = arith.addi %387, %c0_i64_177 : i64
    %c8_i64_178 = arith.constant 8 : i64
    %389 = arith.addi %388, %c8_i64_178 : i64
    %c0_i32_179 = arith.constant 0 : i32
    %390 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_179) : (!llvm.ptr, i32) -> i32
    %391 = arith.extui %390 : i32 to i64
    %c65536_i64_180 = arith.constant 65536 : i64
    %392 = arith.muli %391, %c65536_i64_180 : i64
    %393 = arith.cmpi ult, %389, %392 : i64
    cf.cond_br %393, ^bb81, ^bb82
  ^bb80:  // pred: ^bb77
    %c1_i32_181 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_181) : (i32) -> ()
    cf.br ^bb79
  ^bb81:  // 2 preds: ^bb79, ^bb82
    %394 = llvm.getelementptr %10[%388] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %386, %394 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb3
  ^bb82:  // pred: ^bb79
    %c1_i32_182 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_182) : (i32) -> ()
    cf.br ^bb81
  }
  func.func @f21(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %5 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %7 = llvm.load %6 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %8 = arith.subi %7, %c32_i32 : i32
    llvm.store %8, %4 : i32, !llvm.ptr
    llvm.store %8, %6 : i32, !llvm.ptr
    %9 = llvm.load %4 : !llvm.ptr -> i32
    %10 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i32_4 = arith.constant 32 : i32
    %11 = arith.addi %10, %c32_i32_4 : i32
    %12 = llvm.load %2 : !llvm.ptr -> i32
    call @f34(%arg0, %9, %11, %12) : (!llvm.ptr, i32, i32, i32) -> ()
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %14 = llvm.load %4 : !llvm.ptr -> i32
    %15 = llvm.load %3 : !llvm.ptr -> i32
    call @f12(%arg0, %13, %14, %15) : (!llvm.ptr, i32, i32, i32) -> ()
    %16 = llvm.load %4 : !llvm.ptr -> i32
    %c32_i32_5 = arith.constant 32 : i32
    %17 = arith.addi %16, %c32_i32_5 : i32
    llvm.store %17, %6 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f22(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %6 : i64, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %7 : i64, !llvm.ptr
    %8 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %13 = llvm.load %9 : !llvm.ptr -> i32
    %c96_i32 = arith.constant 96 : i32
    %14 = arith.subi %13, %c96_i32 : i32
    llvm.store %14, %3 : i32, !llvm.ptr
    llvm.store %14, %9 : i32, !llvm.ptr
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    llvm.store %c-2147483648_i32, %4 : i32, !llvm.ptr
    %15 = llvm.load %3 : !llvm.ptr -> i32
    %c-2147483648_i32_7 = arith.constant -2147483648 : i32
    %c32_i64 = arith.constant 32 : i64
    %16 = arith.extui %15 : i32 to i64
    %17 = arith.addi %16, %c32_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %18 = arith.addi %17, %c4_i64 : i64
    %c0_i32_8 = arith.constant 0 : i32
    %19 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_8) : (!llvm.ptr, i32) -> i32
    %20 = arith.extui %19 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %21 = arith.muli %20, %c65536_i64 : i64
    %22 = arith.cmpi ult, %18, %21 : i64
    cf.cond_br %22, ^bb3, ^bb4
  ^bb2:  // pred: ^bb5
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %23 = llvm.getelementptr %12[%17] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-2147483648_i32_7, %23 {alignment = 1 : i64} : i32, !llvm.ptr
    %24 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %25 = arith.cmpi ult, %24, %c32_i32 : i32
    %26 = arith.extui %25 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %27 = arith.cmpi ne, %26, %c0_i32_9 : i32
    cf.cond_br %27, ^bb6, ^bb7
  ^bb4:  // pred: ^bb1
    %c1_i32_10 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_10) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb114, ^bb118
    %28 = llvm.load %3 : !llvm.ptr -> i32
    %c96_i32_11 = arith.constant 96 : i32
    %29 = arith.addi %28, %c96_i32_11 : i32
    llvm.store %29, %9 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb6:  // 2 preds: ^bb3, ^bb38
    %30 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_12 = arith.constant 1 : i32
    %c0_i64_13 = arith.constant 0 : i64
    %31 = arith.extui %30 : i32 to i64
    %32 = arith.addi %31, %c0_i64_13 : i64
    %c4_i64_14 = arith.constant 4 : i64
    %33 = arith.addi %32, %c4_i64_14 : i64
    %c0_i32_15 = arith.constant 0 : i32
    %34 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_15) : (!llvm.ptr, i32) -> i32
    %35 = arith.extui %34 : i32 to i64
    %c65536_i64_16 = arith.constant 65536 : i64
    %36 = arith.muli %35, %c65536_i64_16 : i64
    %37 = arith.cmpi ult, %33, %36 : i64
    cf.cond_br %37, ^bb116, ^bb117
  ^bb7:  // pred: ^bb3
    %38 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_17 = arith.constant 32 : i32
    %39 = arith.addi %38, %c32_i32_17 : i32
    call @f36(%arg0, %39) : (!llvm.ptr, i32) -> ()
    %40 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %41 = arith.addi %40, %c64_i32 : i32
    %c2_i32 = arith.constant 2 : i32
    %42 = arith.addi %41, %c2_i32 : i32
    llvm.store %42, %5 : i32, !llvm.ptr
    %43 = llvm.load %1 : !llvm.ptr -> i32
    %c2_i32_18 = arith.constant 2 : i32
    %44 = arith.addi %43, %c2_i32_18 : i32
    %c0_i64_19 = arith.constant 0 : i64
    %45 = arith.extui %44 : i32 to i64
    %46 = arith.addi %45, %c0_i64_19 : i64
    %c1_i64 = arith.constant 1 : i64
    %47 = arith.addi %46, %c1_i64 : i64
    %c0_i32_20 = arith.constant 0 : i32
    %48 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_20) : (!llvm.ptr, i32) -> i32
    %49 = arith.extui %48 : i32 to i64
    %c65536_i64_21 = arith.constant 65536 : i64
    %50 = arith.muli %49, %c65536_i64_21 : i64
    %51 = arith.cmpi ult, %47, %50 : i64
    cf.cond_br %51, ^bb8, ^bb9
  ^bb8:  // 2 preds: ^bb7, ^bb9
    %52 = llvm.getelementptr %12[%46] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %53 = llvm.load volatile %52 {alignment = 1 : i64} : !llvm.ptr -> i8
    %54 = arith.extui %53 : i8 to i32
    %c0_i64_22 = arith.constant 0 : i64
    %55 = arith.extui %42 : i32 to i64
    %56 = arith.addi %55, %c0_i64_22 : i64
    %c1_i64_23 = arith.constant 1 : i64
    %57 = arith.addi %56, %c1_i64_23 : i64
    %c0_i32_24 = arith.constant 0 : i32
    %58 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_24) : (!llvm.ptr, i32) -> i32
    %59 = arith.extui %58 : i32 to i64
    %c65536_i64_25 = arith.constant 65536 : i64
    %60 = arith.muli %59, %c65536_i64_25 : i64
    %61 = arith.cmpi ult, %57, %60 : i64
    cf.cond_br %61, ^bb10, ^bb11
  ^bb9:  // pred: ^bb7
    %c1_i32_26 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_26) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // 2 preds: ^bb8, ^bb11
    %62 = llvm.getelementptr %12[%56] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %63 = arith.trunci %54 : i32 to i8
    llvm.store volatile %63, %62 {alignment = 1 : i64} : i8, !llvm.ptr
    %64 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32_27 = arith.constant 64 : i32
    %65 = arith.addi %64, %c64_i32_27 : i32
    %c19_i32 = arith.constant 19 : i32
    %66 = arith.addi %65, %c19_i32 : i32
    %67 = llvm.load %1 : !llvm.ptr -> i32
    %c19_i32_28 = arith.constant 19 : i32
    %68 = arith.addi %67, %c19_i32_28 : i32
    %c0_i64_29 = arith.constant 0 : i64
    %69 = arith.extui %68 : i32 to i64
    %70 = arith.addi %69, %c0_i64_29 : i64
    %c8_i64 = arith.constant 8 : i64
    %71 = arith.addi %70, %c8_i64 : i64
    %c0_i32_30 = arith.constant 0 : i32
    %72 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_30) : (!llvm.ptr, i32) -> i32
    %73 = arith.extui %72 : i32 to i64
    %c65536_i64_31 = arith.constant 65536 : i64
    %74 = arith.muli %73, %c65536_i64_31 : i64
    %75 = arith.cmpi ult, %71, %74 : i64
    cf.cond_br %75, ^bb12, ^bb13
  ^bb11:  // pred: ^bb8
    %c1_i32_32 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_32) : (i32) -> ()
    cf.br ^bb10
  ^bb12:  // 2 preds: ^bb10, ^bb13
    %76 = llvm.getelementptr %12[%70] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %77 = llvm.load volatile %76 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_33 = arith.constant 0 : i64
    %78 = arith.extui %66 : i32 to i64
    %79 = arith.addi %78, %c0_i64_33 : i64
    %c8_i64_34 = arith.constant 8 : i64
    %80 = arith.addi %79, %c8_i64_34 : i64
    %c0_i32_35 = arith.constant 0 : i32
    %81 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_35) : (!llvm.ptr, i32) -> i32
    %82 = arith.extui %81 : i32 to i64
    %c65536_i64_36 = arith.constant 65536 : i64
    %83 = arith.muli %82, %c65536_i64_36 : i64
    %84 = arith.cmpi ult, %80, %83 : i64
    cf.cond_br %84, ^bb14, ^bb15
  ^bb13:  // pred: ^bb10
    %c1_i32_37 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_37) : (i32) -> ()
    cf.br ^bb12
  ^bb14:  // 2 preds: ^bb12, ^bb15
    %85 = llvm.getelementptr %12[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %77, %85 {alignment = 1 : i64} : i64, !llvm.ptr
    %86 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32_38 = arith.constant 64 : i32
    %87 = arith.addi %86, %c64_i32_38 : i32
    %c31_i32 = arith.constant 31 : i32
    %88 = arith.addi %87, %c31_i32 : i32
    %89 = llvm.load %1 : !llvm.ptr -> i32
    %c31_i32_39 = arith.constant 31 : i32
    %90 = arith.addi %89, %c31_i32_39 : i32
    %c0_i64_40 = arith.constant 0 : i64
    %91 = arith.extui %90 : i32 to i64
    %92 = arith.addi %91, %c0_i64_40 : i64
    %c1_i64_41 = arith.constant 1 : i64
    %93 = arith.addi %92, %c1_i64_41 : i64
    %c0_i32_42 = arith.constant 0 : i32
    %94 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_42) : (!llvm.ptr, i32) -> i32
    %95 = arith.extui %94 : i32 to i64
    %c65536_i64_43 = arith.constant 65536 : i64
    %96 = arith.muli %95, %c65536_i64_43 : i64
    %97 = arith.cmpi ult, %93, %96 : i64
    cf.cond_br %97, ^bb16, ^bb17
  ^bb15:  // pred: ^bb12
    %c1_i32_44 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_44) : (i32) -> ()
    cf.br ^bb14
  ^bb16:  // 2 preds: ^bb14, ^bb17
    %98 = llvm.getelementptr %12[%92] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %99 = llvm.load volatile %98 {alignment = 1 : i64} : !llvm.ptr -> i8
    %100 = arith.extui %99 : i8 to i32
    %c0_i64_45 = arith.constant 0 : i64
    %101 = arith.extui %88 : i32 to i64
    %102 = arith.addi %101, %c0_i64_45 : i64
    %c1_i64_46 = arith.constant 1 : i64
    %103 = arith.addi %102, %c1_i64_46 : i64
    %c0_i32_47 = arith.constant 0 : i32
    %104 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_47) : (!llvm.ptr, i32) -> i32
    %105 = arith.extui %104 : i32 to i64
    %c65536_i64_48 = arith.constant 65536 : i64
    %106 = arith.muli %105, %c65536_i64_48 : i64
    %107 = arith.cmpi ult, %103, %106 : i64
    cf.cond_br %107, ^bb18, ^bb19
  ^bb17:  // pred: ^bb14
    %c1_i32_49 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_49) : (i32) -> ()
    cf.br ^bb16
  ^bb18:  // 2 preds: ^bb16, ^bb19
    %108 = llvm.getelementptr %12[%102] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %109 = arith.trunci %100 : i32 to i8
    llvm.store volatile %109, %108 {alignment = 1 : i64} : i8, !llvm.ptr
    %110 = llvm.load %3 : !llvm.ptr -> i32
    %111 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_50 = arith.constant 0 : i64
    %112 = arith.extui %111 : i32 to i64
    %113 = arith.addi %112, %c0_i64_50 : i64
    %c2_i64 = arith.constant 2 : i64
    %114 = arith.addi %113, %c2_i64 : i64
    %c0_i32_51 = arith.constant 0 : i32
    %115 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_51) : (!llvm.ptr, i32) -> i32
    %116 = arith.extui %115 : i32 to i64
    %c65536_i64_52 = arith.constant 65536 : i64
    %117 = arith.muli %116, %c65536_i64_52 : i64
    %118 = arith.cmpi ult, %114, %117 : i64
    cf.cond_br %118, ^bb20, ^bb21
  ^bb19:  // pred: ^bb16
    %c1_i32_53 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_53) : (i32) -> ()
    cf.br ^bb18
  ^bb20:  // 2 preds: ^bb18, ^bb21
    %119 = llvm.getelementptr %12[%113] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %120 = llvm.load volatile %119 {alignment = 1 : i64} : !llvm.ptr -> i16
    %121 = arith.extui %120 : i16 to i32
    %c64_i64 = arith.constant 64 : i64
    %122 = arith.extui %110 : i32 to i64
    %123 = arith.addi %122, %c64_i64 : i64
    %c2_i64_54 = arith.constant 2 : i64
    %124 = arith.addi %123, %c2_i64_54 : i64
    %c0_i32_55 = arith.constant 0 : i32
    %125 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_55) : (!llvm.ptr, i32) -> i32
    %126 = arith.extui %125 : i32 to i64
    %c65536_i64_56 = arith.constant 65536 : i64
    %127 = arith.muli %126, %c65536_i64_56 : i64
    %128 = arith.cmpi ult, %124, %127 : i64
    cf.cond_br %128, ^bb22, ^bb23
  ^bb21:  // pred: ^bb18
    %c1_i32_57 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_57) : (i32) -> ()
    cf.br ^bb20
  ^bb22:  // 2 preds: ^bb20, ^bb23
    %129 = llvm.getelementptr %12[%123] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %130 = arith.trunci %121 : i32 to i16
    llvm.store volatile %130, %129 {alignment = 1 : i64} : i16, !llvm.ptr
    %131 = llvm.load %3 : !llvm.ptr -> i32
    %132 = llvm.load %1 : !llvm.ptr -> i32
    %c11_i64 = arith.constant 11 : i64
    %133 = arith.extui %132 : i32 to i64
    %134 = arith.addi %133, %c11_i64 : i64
    %c8_i64_58 = arith.constant 8 : i64
    %135 = arith.addi %134, %c8_i64_58 : i64
    %c0_i32_59 = arith.constant 0 : i32
    %136 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_59) : (!llvm.ptr, i32) -> i32
    %137 = arith.extui %136 : i32 to i64
    %c65536_i64_60 = arith.constant 65536 : i64
    %138 = arith.muli %137, %c65536_i64_60 : i64
    %139 = arith.cmpi ult, %135, %138 : i64
    cf.cond_br %139, ^bb24, ^bb25
  ^bb23:  // pred: ^bb20
    %c1_i32_61 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_61) : (i32) -> ()
    cf.br ^bb22
  ^bb24:  // 2 preds: ^bb22, ^bb25
    %140 = llvm.getelementptr %12[%134] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %141 = llvm.load volatile %140 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c75_i64 = arith.constant 75 : i64
    %142 = arith.extui %131 : i32 to i64
    %143 = arith.addi %142, %c75_i64 : i64
    %c8_i64_62 = arith.constant 8 : i64
    %144 = arith.addi %143, %c8_i64_62 : i64
    %c0_i32_63 = arith.constant 0 : i32
    %145 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_63) : (!llvm.ptr, i32) -> i32
    %146 = arith.extui %145 : i32 to i64
    %c65536_i64_64 = arith.constant 65536 : i64
    %147 = arith.muli %146, %c65536_i64_64 : i64
    %148 = arith.cmpi ult, %144, %147 : i64
    cf.cond_br %148, ^bb26, ^bb27
  ^bb25:  // pred: ^bb22
    %c1_i32_65 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_65) : (i32) -> ()
    cf.br ^bb24
  ^bb26:  // 2 preds: ^bb24, ^bb27
    %149 = llvm.getelementptr %12[%143] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %141, %149 {alignment = 1 : i64} : i64, !llvm.ptr
    %150 = llvm.load %3 : !llvm.ptr -> i32
    %151 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64 = arith.constant 3 : i64
    %152 = arith.extui %151 : i32 to i64
    %153 = arith.addi %152, %c3_i64 : i64
    %c8_i64_66 = arith.constant 8 : i64
    %154 = arith.addi %153, %c8_i64_66 : i64
    %c0_i32_67 = arith.constant 0 : i32
    %155 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_67) : (!llvm.ptr, i32) -> i32
    %156 = arith.extui %155 : i32 to i64
    %c65536_i64_68 = arith.constant 65536 : i64
    %157 = arith.muli %156, %c65536_i64_68 : i64
    %158 = arith.cmpi ult, %154, %157 : i64
    cf.cond_br %158, ^bb28, ^bb29
  ^bb27:  // pred: ^bb24
    %c1_i32_69 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_69) : (i32) -> ()
    cf.br ^bb26
  ^bb28:  // 2 preds: ^bb26, ^bb29
    %159 = llvm.getelementptr %12[%153] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %160 = llvm.load volatile %159 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c67_i64 = arith.constant 67 : i64
    %161 = arith.extui %150 : i32 to i64
    %162 = arith.addi %161, %c67_i64 : i64
    %c8_i64_70 = arith.constant 8 : i64
    %163 = arith.addi %162, %c8_i64_70 : i64
    %c0_i32_71 = arith.constant 0 : i32
    %164 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_71) : (!llvm.ptr, i32) -> i32
    %165 = arith.extui %164 : i32 to i64
    %c65536_i64_72 = arith.constant 65536 : i64
    %166 = arith.muli %165, %c65536_i64_72 : i64
    %167 = arith.cmpi ult, %163, %166 : i64
    cf.cond_br %167, ^bb30, ^bb31
  ^bb29:  // pred: ^bb26
    %c1_i32_73 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_73) : (i32) -> ()
    cf.br ^bb28
  ^bb30:  // 2 preds: ^bb28, ^bb31
    %168 = llvm.getelementptr %12[%162] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %160, %168 {alignment = 1 : i64} : i64, !llvm.ptr
    %169 = llvm.load %3 : !llvm.ptr -> i32
    %170 = llvm.load %1 : !llvm.ptr -> i32
    %c27_i64 = arith.constant 27 : i64
    %171 = arith.extui %170 : i32 to i64
    %172 = arith.addi %171, %c27_i64 : i64
    %c4_i64_74 = arith.constant 4 : i64
    %173 = arith.addi %172, %c4_i64_74 : i64
    %c0_i32_75 = arith.constant 0 : i32
    %174 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_75) : (!llvm.ptr, i32) -> i32
    %175 = arith.extui %174 : i32 to i64
    %c65536_i64_76 = arith.constant 65536 : i64
    %176 = arith.muli %175, %c65536_i64_76 : i64
    %177 = arith.cmpi ult, %173, %176 : i64
    cf.cond_br %177, ^bb32, ^bb33
  ^bb31:  // pred: ^bb28
    %c1_i32_77 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_77) : (i32) -> ()
    cf.br ^bb30
  ^bb32:  // 2 preds: ^bb30, ^bb33
    %178 = llvm.getelementptr %12[%172] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %179 = llvm.load volatile %178 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c91_i64 = arith.constant 91 : i64
    %180 = arith.extui %169 : i32 to i64
    %181 = arith.addi %180, %c91_i64 : i64
    %c4_i64_78 = arith.constant 4 : i64
    %182 = arith.addi %181, %c4_i64_78 : i64
    %c0_i32_79 = arith.constant 0 : i32
    %183 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_79) : (!llvm.ptr, i32) -> i32
    %184 = arith.extui %183 : i32 to i64
    %c65536_i64_80 = arith.constant 65536 : i64
    %185 = arith.muli %184, %c65536_i64_80 : i64
    %186 = arith.cmpi ult, %182, %185 : i64
    cf.cond_br %186, ^bb34, ^bb35
  ^bb33:  // pred: ^bb30
    %c1_i32_81 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_81) : (i32) -> ()
    cf.br ^bb32
  ^bb34:  // 2 preds: ^bb32, ^bb35
    %187 = llvm.getelementptr %12[%181] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %179, %187 {alignment = 1 : i64} : i32, !llvm.ptr
    %188 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_82 = arith.constant 32 : i32
    %189 = arith.addi %188, %c32_i32_82 : i32
    %190 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32_83 = arith.constant 64 : i32
    %191 = arith.addi %190, %c64_i32_83 : i32
    call @f15(%arg0, %189, %191) : (!llvm.ptr, i32, i32) -> ()
    %192 = llvm.load %3 : !llvm.ptr -> i32
    %c36_i64 = arith.constant 36 : i64
    %193 = arith.extui %192 : i32 to i64
    %194 = arith.addi %193, %c36_i64 : i64
    %c4_i64_84 = arith.constant 4 : i64
    %195 = arith.addi %194, %c4_i64_84 : i64
    %c0_i32_85 = arith.constant 0 : i32
    %196 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_85) : (!llvm.ptr, i32) -> i32
    %197 = arith.extui %196 : i32 to i64
    %c65536_i64_86 = arith.constant 65536 : i64
    %198 = arith.muli %197, %c65536_i64_86 : i64
    %199 = arith.cmpi ult, %195, %198 : i64
    cf.cond_br %199, ^bb36, ^bb37
  ^bb35:  // pred: ^bb32
    %c1_i32_87 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_87) : (i32) -> ()
    cf.br ^bb34
  ^bb36:  // 2 preds: ^bb34, ^bb37
    %200 = llvm.getelementptr %12[%194] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %201 = llvm.load volatile %200 {alignment = 1 : i64} : !llvm.ptr -> i32
    %202 = llvm.load %3 : !llvm.ptr -> i32
    %c40_i64 = arith.constant 40 : i64
    %203 = arith.extui %202 : i32 to i64
    %204 = arith.addi %203, %c40_i64 : i64
    %c4_i64_88 = arith.constant 4 : i64
    %205 = arith.addi %204, %c4_i64_88 : i64
    %c0_i32_89 = arith.constant 0 : i32
    %206 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_89) : (!llvm.ptr, i32) -> i32
    %207 = arith.extui %206 : i32 to i64
    %c65536_i64_90 = arith.constant 65536 : i64
    %208 = arith.muli %207, %c65536_i64_90 : i64
    %209 = arith.cmpi ult, %205, %208 : i64
    cf.cond_br %209, ^bb38, ^bb39
  ^bb37:  // pred: ^bb34
    %c1_i32_91 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_91) : (i32) -> ()
    cf.br ^bb36
  ^bb38:  // 2 preds: ^bb36, ^bb39
    %210 = llvm.getelementptr %12[%204] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %211 = llvm.load volatile %210 {alignment = 1 : i64} : !llvm.ptr -> i32
    %212 = llvm.load %1 : !llvm.ptr -> i32
    %213 = llvm.load %2 : !llvm.ptr -> i32
    %214 = call @f109(%arg0, %201, %211, %212, %213) : (!llvm.ptr, i32, i32, i32, i32) -> i32
    llvm.store %214, %1 : i32, !llvm.ptr
    %215 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_92 = arith.constant 32 : i32
    %216 = arith.addi %215, %c32_i32_92 : i32
    call @f112(%arg0, %216) : (!llvm.ptr, i32) -> ()
    %217 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_93 = arith.constant 32 : i32
    %218 = arith.addi %217, %c32_i32_93 : i32
    call @f113(%arg0, %218) : (!llvm.ptr, i32) -> ()
    %c-2147483645_i32 = arith.constant -2147483645 : i32
    llvm.store %c-2147483645_i32, %4 : i32, !llvm.ptr
    %219 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_94 = arith.constant 0 : i32
    %220 = arith.cmpi eq, %219, %c0_i32_94 : i32
    %221 = arith.extui %220 : i1 to i32
    %c0_i32_95 = arith.constant 0 : i32
    %222 = arith.cmpi ne, %221, %c0_i32_95 : i32
    cf.cond_br %222, ^bb6, ^bb40
  ^bb39:  // pred: ^bb36
    %c1_i32_96 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_96) : (i32) -> ()
    cf.br ^bb38
  ^bb40:  // pred: ^bb38
    %223 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_97 = arith.constant 32 : i32
    %224 = arith.addi %223, %c32_i32_97 : i32
    %c2_i32_98 = arith.constant 2 : i32
    %225 = arith.addi %224, %c2_i32_98 : i32
    %226 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64_99 = arith.constant 0 : i64
    %227 = arith.extui %226 : i32 to i64
    %228 = arith.addi %227, %c0_i64_99 : i64
    %c1_i64_100 = arith.constant 1 : i64
    %229 = arith.addi %228, %c1_i64_100 : i64
    %c0_i32_101 = arith.constant 0 : i32
    %230 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_101) : (!llvm.ptr, i32) -> i32
    %231 = arith.extui %230 : i32 to i64
    %c65536_i64_102 = arith.constant 65536 : i64
    %232 = arith.muli %231, %c65536_i64_102 : i64
    %233 = arith.cmpi ult, %229, %232 : i64
    cf.cond_br %233, ^bb41, ^bb42
  ^bb41:  // 2 preds: ^bb40, ^bb42
    %234 = llvm.getelementptr %12[%228] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %235 = llvm.load volatile %234 {alignment = 1 : i64} : !llvm.ptr -> i8
    %236 = arith.extui %235 : i8 to i32
    %c0_i64_103 = arith.constant 0 : i64
    %237 = arith.extui %225 : i32 to i64
    %238 = arith.addi %237, %c0_i64_103 : i64
    %c1_i64_104 = arith.constant 1 : i64
    %239 = arith.addi %238, %c1_i64_104 : i64
    %c0_i32_105 = arith.constant 0 : i32
    %240 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_105) : (!llvm.ptr, i32) -> i32
    %241 = arith.extui %240 : i32 to i64
    %c65536_i64_106 = arith.constant 65536 : i64
    %242 = arith.muli %241, %c65536_i64_106 : i64
    %243 = arith.cmpi ult, %239, %242 : i64
    cf.cond_br %243, ^bb43, ^bb44
  ^bb42:  // pred: ^bb40
    %c1_i32_107 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_107) : (i32) -> ()
    cf.br ^bb41
  ^bb43:  // 2 preds: ^bb41, ^bb44
    %244 = llvm.getelementptr %12[%238] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %245 = arith.trunci %236 : i32 to i8
    llvm.store volatile %245, %244 {alignment = 1 : i64} : i8, !llvm.ptr
    %246 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %247 = arith.addi %246, %c8_i32 : i32
    %248 = llvm.load %3 : !llvm.ptr -> i32
    %c71_i32 = arith.constant 71 : i32
    %249 = arith.addi %248, %c71_i32 : i32
    llvm.store %249, %1 : i32, !llvm.ptr
    %c8_i32_108 = arith.constant 8 : i32
    %250 = arith.addi %249, %c8_i32_108 : i32
    %c0_i64_109 = arith.constant 0 : i64
    %251 = arith.extui %250 : i32 to i64
    %252 = arith.addi %251, %c0_i64_109 : i64
    %c8_i64_110 = arith.constant 8 : i64
    %253 = arith.addi %252, %c8_i64_110 : i64
    %c0_i32_111 = arith.constant 0 : i32
    %254 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_111) : (!llvm.ptr, i32) -> i32
    %255 = arith.extui %254 : i32 to i64
    %c65536_i64_112 = arith.constant 65536 : i64
    %256 = arith.muli %255, %c65536_i64_112 : i64
    %257 = arith.cmpi ult, %253, %256 : i64
    cf.cond_br %257, ^bb45, ^bb46
  ^bb44:  // pred: ^bb41
    %c1_i32_113 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_113) : (i32) -> ()
    cf.br ^bb43
  ^bb45:  // 2 preds: ^bb43, ^bb46
    %258 = llvm.getelementptr %12[%252] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %259 = llvm.load volatile %258 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %259, %6 : i64, !llvm.ptr
    %c0_i64_114 = arith.constant 0 : i64
    %260 = arith.extui %247 : i32 to i64
    %261 = arith.addi %260, %c0_i64_114 : i64
    %c8_i64_115 = arith.constant 8 : i64
    %262 = arith.addi %261, %c8_i64_115 : i64
    %c0_i32_116 = arith.constant 0 : i32
    %263 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_116) : (!llvm.ptr, i32) -> i32
    %264 = arith.extui %263 : i32 to i64
    %c65536_i64_117 = arith.constant 65536 : i64
    %265 = arith.muli %264, %c65536_i64_117 : i64
    %266 = arith.cmpi ult, %262, %265 : i64
    cf.cond_br %266, ^bb47, ^bb48
  ^bb46:  // pred: ^bb43
    %c1_i32_118 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_118) : (i32) -> ()
    cf.br ^bb45
  ^bb47:  // 2 preds: ^bb45, ^bb48
    %267 = llvm.getelementptr %12[%261] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %259, %267 {alignment = 1 : i64} : i64, !llvm.ptr
    %268 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %269 = arith.addi %268, %c16_i32 : i32
    %270 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32_119 = arith.constant 16 : i32
    %271 = arith.addi %270, %c16_i32_119 : i32
    %c0_i64_120 = arith.constant 0 : i64
    %272 = arith.extui %271 : i32 to i64
    %273 = arith.addi %272, %c0_i64_120 : i64
    %c8_i64_121 = arith.constant 8 : i64
    %274 = arith.addi %273, %c8_i64_121 : i64
    %c0_i32_122 = arith.constant 0 : i32
    %275 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_122) : (!llvm.ptr, i32) -> i32
    %276 = arith.extui %275 : i32 to i64
    %c65536_i64_123 = arith.constant 65536 : i64
    %277 = arith.muli %276, %c65536_i64_123 : i64
    %278 = arith.cmpi ult, %274, %277 : i64
    cf.cond_br %278, ^bb49, ^bb50
  ^bb48:  // pred: ^bb45
    %c1_i32_124 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_124) : (i32) -> ()
    cf.br ^bb47
  ^bb49:  // 2 preds: ^bb47, ^bb50
    %279 = llvm.getelementptr %12[%273] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %280 = llvm.load volatile %279 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %280, %7 : i64, !llvm.ptr
    %c0_i64_125 = arith.constant 0 : i64
    %281 = arith.extui %269 : i32 to i64
    %282 = arith.addi %281, %c0_i64_125 : i64
    %c8_i64_126 = arith.constant 8 : i64
    %283 = arith.addi %282, %c8_i64_126 : i64
    %c0_i32_127 = arith.constant 0 : i32
    %284 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_127) : (!llvm.ptr, i32) -> i32
    %285 = arith.extui %284 : i32 to i64
    %c65536_i64_128 = arith.constant 65536 : i64
    %286 = arith.muli %285, %c65536_i64_128 : i64
    %287 = arith.cmpi ult, %283, %286 : i64
    cf.cond_br %287, ^bb51, ^bb52
  ^bb50:  // pred: ^bb47
    %c1_i32_129 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_129) : (i32) -> ()
    cf.br ^bb49
  ^bb51:  // 2 preds: ^bb49, ^bb52
    %288 = llvm.getelementptr %12[%282] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %280, %288 {alignment = 1 : i64} : i64, !llvm.ptr
    %289 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %290 = arith.addi %289, %c24_i32 : i32
    %291 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i32_130 = arith.constant 24 : i32
    %292 = arith.addi %291, %c24_i32_130 : i32
    %c0_i64_131 = arith.constant 0 : i64
    %293 = arith.extui %292 : i32 to i64
    %294 = arith.addi %293, %c0_i64_131 : i64
    %c1_i64_132 = arith.constant 1 : i64
    %295 = arith.addi %294, %c1_i64_132 : i64
    %c0_i32_133 = arith.constant 0 : i32
    %296 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_133) : (!llvm.ptr, i32) -> i32
    %297 = arith.extui %296 : i32 to i64
    %c65536_i64_134 = arith.constant 65536 : i64
    %298 = arith.muli %297, %c65536_i64_134 : i64
    %299 = arith.cmpi ult, %295, %298 : i64
    cf.cond_br %299, ^bb53, ^bb54
  ^bb52:  // pred: ^bb49
    %c1_i32_135 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_135) : (i32) -> ()
    cf.br ^bb51
  ^bb53:  // 2 preds: ^bb51, ^bb54
    %300 = llvm.getelementptr %12[%294] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %301 = llvm.load volatile %300 {alignment = 1 : i64} : !llvm.ptr -> i8
    %302 = arith.extui %301 : i8 to i32
    llvm.store %302, %2 : i32, !llvm.ptr
    %c0_i64_136 = arith.constant 0 : i64
    %303 = arith.extui %290 : i32 to i64
    %304 = arith.addi %303, %c0_i64_136 : i64
    %c1_i64_137 = arith.constant 1 : i64
    %305 = arith.addi %304, %c1_i64_137 : i64
    %c0_i32_138 = arith.constant 0 : i32
    %306 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_138) : (!llvm.ptr, i32) -> i32
    %307 = arith.extui %306 : i32 to i64
    %c65536_i64_139 = arith.constant 65536 : i64
    %308 = arith.muli %307, %c65536_i64_139 : i64
    %309 = arith.cmpi ult, %305, %308 : i64
    cf.cond_br %309, ^bb55, ^bb56
  ^bb54:  // pred: ^bb51
    %c1_i32_140 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_140) : (i32) -> ()
    cf.br ^bb53
  ^bb55:  // 2 preds: ^bb53, ^bb56
    %310 = llvm.getelementptr %12[%304] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %311 = arith.trunci %302 : i32 to i8
    llvm.store volatile %311, %310 {alignment = 1 : i64} : i8, !llvm.ptr
    %312 = llvm.load %3 : !llvm.ptr -> i32
    %c47_i32 = arith.constant 47 : i32
    %313 = arith.addi %312, %c47_i32 : i32
    %314 = llvm.load %6 : !llvm.ptr -> i64
    %c0_i64_141 = arith.constant 0 : i64
    %315 = arith.extui %313 : i32 to i64
    %316 = arith.addi %315, %c0_i64_141 : i64
    %c8_i64_142 = arith.constant 8 : i64
    %317 = arith.addi %316, %c8_i64_142 : i64
    %c0_i32_143 = arith.constant 0 : i32
    %318 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_143) : (!llvm.ptr, i32) -> i32
    %319 = arith.extui %318 : i32 to i64
    %c65536_i64_144 = arith.constant 65536 : i64
    %320 = arith.muli %319, %c65536_i64_144 : i64
    %321 = arith.cmpi ult, %317, %320 : i64
    cf.cond_br %321, ^bb57, ^bb58
  ^bb56:  // pred: ^bb53
    %c1_i32_145 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_145) : (i32) -> ()
    cf.br ^bb55
  ^bb57:  // 2 preds: ^bb55, ^bb58
    %322 = llvm.getelementptr %12[%316] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %314, %322 {alignment = 1 : i64} : i64, !llvm.ptr
    %323 = llvm.load %3 : !llvm.ptr -> i32
    %c55_i32 = arith.constant 55 : i32
    %324 = arith.addi %323, %c55_i32 : i32
    %325 = llvm.load %7 : !llvm.ptr -> i64
    %c0_i64_146 = arith.constant 0 : i64
    %326 = arith.extui %324 : i32 to i64
    %327 = arith.addi %326, %c0_i64_146 : i64
    %c8_i64_147 = arith.constant 8 : i64
    %328 = arith.addi %327, %c8_i64_147 : i64
    %c0_i32_148 = arith.constant 0 : i32
    %329 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_148) : (!llvm.ptr, i32) -> i32
    %330 = arith.extui %329 : i32 to i64
    %c65536_i64_149 = arith.constant 65536 : i64
    %331 = arith.muli %330, %c65536_i64_149 : i64
    %332 = arith.cmpi ult, %328, %331 : i64
    cf.cond_br %332, ^bb59, ^bb60
  ^bb58:  // pred: ^bb55
    %c1_i32_150 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_150) : (i32) -> ()
    cf.br ^bb57
  ^bb59:  // 2 preds: ^bb57, ^bb60
    %333 = llvm.getelementptr %12[%327] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %325, %333 {alignment = 1 : i64} : i64, !llvm.ptr
    %334 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_151 = arith.constant 32 : i32
    %335 = arith.addi %334, %c32_i32_151 : i32
    %c31_i32_152 = arith.constant 31 : i32
    %336 = arith.addi %335, %c31_i32_152 : i32
    %337 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_153 = arith.constant 0 : i64
    %338 = arith.extui %336 : i32 to i64
    %339 = arith.addi %338, %c0_i64_153 : i64
    %c1_i64_154 = arith.constant 1 : i64
    %340 = arith.addi %339, %c1_i64_154 : i64
    %c0_i32_155 = arith.constant 0 : i32
    %341 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_155) : (!llvm.ptr, i32) -> i32
    %342 = arith.extui %341 : i32 to i64
    %c65536_i64_156 = arith.constant 65536 : i64
    %343 = arith.muli %342, %c65536_i64_156 : i64
    %344 = arith.cmpi ult, %340, %343 : i64
    cf.cond_br %344, ^bb61, ^bb62
  ^bb60:  // pred: ^bb57
    %c1_i32_157 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_157) : (i32) -> ()
    cf.br ^bb59
  ^bb61:  // 2 preds: ^bb59, ^bb62
    %345 = llvm.getelementptr %12[%339] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %346 = arith.trunci %337 : i32 to i8
    llvm.store volatile %346, %345 {alignment = 1 : i64} : i8, !llvm.ptr
    %347 = llvm.load %3 : !llvm.ptr -> i32
    %348 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i64_158 = arith.constant 64 : i64
    %349 = arith.extui %348 : i32 to i64
    %350 = arith.addi %349, %c64_i64_158 : i64
    %c2_i64_159 = arith.constant 2 : i64
    %351 = arith.addi %350, %c2_i64_159 : i64
    %c0_i32_160 = arith.constant 0 : i32
    %352 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_160) : (!llvm.ptr, i32) -> i32
    %353 = arith.extui %352 : i32 to i64
    %c65536_i64_161 = arith.constant 65536 : i64
    %354 = arith.muli %353, %c65536_i64_161 : i64
    %355 = arith.cmpi ult, %351, %354 : i64
    cf.cond_br %355, ^bb63, ^bb64
  ^bb62:  // pred: ^bb59
    %c1_i32_162 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_162) : (i32) -> ()
    cf.br ^bb61
  ^bb63:  // 2 preds: ^bb61, ^bb64
    %356 = llvm.getelementptr %12[%350] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %357 = llvm.load volatile %356 {alignment = 1 : i64} : !llvm.ptr -> i16
    %358 = arith.extui %357 : i16 to i32
    %c32_i64_163 = arith.constant 32 : i64
    %359 = arith.extui %347 : i32 to i64
    %360 = arith.addi %359, %c32_i64_163 : i64
    %c2_i64_164 = arith.constant 2 : i64
    %361 = arith.addi %360, %c2_i64_164 : i64
    %c0_i32_165 = arith.constant 0 : i32
    %362 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_165) : (!llvm.ptr, i32) -> i32
    %363 = arith.extui %362 : i32 to i64
    %c65536_i64_166 = arith.constant 65536 : i64
    %364 = arith.muli %363, %c65536_i64_166 : i64
    %365 = arith.cmpi ult, %361, %364 : i64
    cf.cond_br %365, ^bb65, ^bb66
  ^bb64:  // pred: ^bb61
    %c1_i32_167 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_167) : (i32) -> ()
    cf.br ^bb63
  ^bb65:  // 2 preds: ^bb63, ^bb66
    %366 = llvm.getelementptr %12[%360] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %367 = arith.trunci %358 : i32 to i16
    llvm.store volatile %367, %366 {alignment = 1 : i64} : i16, !llvm.ptr
    %368 = llvm.load %3 : !llvm.ptr -> i32
    %369 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_168 = arith.constant 0 : i64
    %370 = arith.extui %369 : i32 to i64
    %371 = arith.addi %370, %c0_i64_168 : i64
    %c8_i64_169 = arith.constant 8 : i64
    %372 = arith.addi %371, %c8_i64_169 : i64
    %c0_i32_170 = arith.constant 0 : i32
    %373 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_170) : (!llvm.ptr, i32) -> i32
    %374 = arith.extui %373 : i32 to i64
    %c65536_i64_171 = arith.constant 65536 : i64
    %375 = arith.muli %374, %c65536_i64_171 : i64
    %376 = arith.cmpi ult, %372, %375 : i64
    cf.cond_br %376, ^bb67, ^bb68
  ^bb66:  // pred: ^bb63
    %c1_i32_172 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_172) : (i32) -> ()
    cf.br ^bb65
  ^bb67:  // 2 preds: ^bb65, ^bb68
    %377 = llvm.getelementptr %12[%371] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %378 = llvm.load volatile %377 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %378, %6 : i64, !llvm.ptr
    %c0_i64_173 = arith.constant 0 : i64
    %379 = arith.extui %368 : i32 to i64
    %380 = arith.addi %379, %c0_i64_173 : i64
    %c8_i64_174 = arith.constant 8 : i64
    %381 = arith.addi %380, %c8_i64_174 : i64
    %c0_i32_175 = arith.constant 0 : i32
    %382 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_175) : (!llvm.ptr, i32) -> i32
    %383 = arith.extui %382 : i32 to i64
    %c65536_i64_176 = arith.constant 65536 : i64
    %384 = arith.muli %383, %c65536_i64_176 : i64
    %385 = arith.cmpi ult, %381, %384 : i64
    cf.cond_br %385, ^bb69, ^bb70
  ^bb68:  // pred: ^bb65
    %c1_i32_177 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_177) : (i32) -> ()
    cf.br ^bb67
  ^bb69:  // 2 preds: ^bb67, ^bb70
    %386 = llvm.getelementptr %12[%380] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %378, %386 {alignment = 1 : i64} : i64, !llvm.ptr
    %387 = llvm.load %3 : !llvm.ptr -> i32
    %388 = llvm.load %3 : !llvm.ptr -> i32
    %c67_i64_178 = arith.constant 67 : i64
    %389 = arith.extui %388 : i32 to i64
    %390 = arith.addi %389, %c67_i64_178 : i64
    %c4_i64_179 = arith.constant 4 : i64
    %391 = arith.addi %390, %c4_i64_179 : i64
    %c0_i32_180 = arith.constant 0 : i32
    %392 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_180) : (!llvm.ptr, i32) -> i32
    %393 = arith.extui %392 : i32 to i64
    %c65536_i64_181 = arith.constant 65536 : i64
    %394 = arith.muli %393, %c65536_i64_181 : i64
    %395 = arith.cmpi ult, %391, %394 : i64
    cf.cond_br %395, ^bb71, ^bb72
  ^bb70:  // pred: ^bb67
    %c1_i32_182 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_182) : (i32) -> ()
    cf.br ^bb69
  ^bb71:  // 2 preds: ^bb69, ^bb72
    %396 = llvm.getelementptr %12[%390] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %397 = llvm.load volatile %396 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c35_i64 = arith.constant 35 : i64
    %398 = arith.extui %387 : i32 to i64
    %399 = arith.addi %398, %c35_i64 : i64
    %c4_i64_183 = arith.constant 4 : i64
    %400 = arith.addi %399, %c4_i64_183 : i64
    %c0_i32_184 = arith.constant 0 : i32
    %401 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_184) : (!llvm.ptr, i32) -> i32
    %402 = arith.extui %401 : i32 to i64
    %c65536_i64_185 = arith.constant 65536 : i64
    %403 = arith.muli %402, %c65536_i64_185 : i64
    %404 = arith.cmpi ult, %400, %403 : i64
    cf.cond_br %404, ^bb73, ^bb74
  ^bb72:  // pred: ^bb69
    %c1_i32_186 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_186) : (i32) -> ()
    cf.br ^bb71
  ^bb73:  // 2 preds: ^bb71, ^bb74
    %405 = llvm.getelementptr %12[%399] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %397, %405 {alignment = 1 : i64} : i32, !llvm.ptr
    %406 = llvm.load %3 : !llvm.ptr -> i32
    %407 = llvm.load %6 : !llvm.ptr -> i64
    %c39_i64 = arith.constant 39 : i64
    %408 = arith.extui %406 : i32 to i64
    %409 = arith.addi %408, %c39_i64 : i64
    %c8_i64_187 = arith.constant 8 : i64
    %410 = arith.addi %409, %c8_i64_187 : i64
    %c0_i32_188 = arith.constant 0 : i32
    %411 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_188) : (!llvm.ptr, i32) -> i32
    %412 = arith.extui %411 : i32 to i64
    %c65536_i64_189 = arith.constant 65536 : i64
    %413 = arith.muli %412, %c65536_i64_189 : i64
    %414 = arith.cmpi ult, %410, %413 : i64
    cf.cond_br %414, ^bb75, ^bb76
  ^bb74:  // pred: ^bb71
    %c1_i32_190 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_190) : (i32) -> ()
    cf.br ^bb73
  ^bb75:  // 2 preds: ^bb73, ^bb76
    %415 = llvm.getelementptr %12[%409] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %407, %415 {alignment = 1 : i64} : i64, !llvm.ptr
    %416 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_191 = arith.constant 32 : i32
    %417 = arith.addi %416, %c32_i32_191 : i32
    %418 = call @f98(%arg0, %417) : (!llvm.ptr, i32) -> i32
    %c0_i32_192 = arith.constant 0 : i32
    %419 = arith.cmpi ne, %418, %c0_i32_192 : i32
    cf.cond_br %419, ^bb79, ^bb80
  ^bb76:  // pred: ^bb73
    %c1_i32_193 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_193) : (i32) -> ()
    cf.br ^bb75
  ^bb77:  // 2 preds: ^bb98, ^bb112
    %420 = llvm.load %0 : !llvm.ptr -> i32
    %421 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_194 = arith.constant 0 : i64
    %422 = arith.extui %420 : i32 to i64
    %423 = arith.addi %422, %c0_i64_194 : i64
    %c4_i64_195 = arith.constant 4 : i64
    %424 = arith.addi %423, %c4_i64_195 : i64
    %c0_i32_196 = arith.constant 0 : i32
    %425 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_196) : (!llvm.ptr, i32) -> i32
    %426 = arith.extui %425 : i32 to i64
    %c65536_i64_197 = arith.constant 65536 : i64
    %427 = arith.muli %426, %c65536_i64_197 : i64
    %428 = arith.cmpi ult, %424, %427 : i64
    cf.cond_br %428, ^bb114, ^bb115
  ^bb78:  // pred: ^bb81
    %429 = llvm.load %0 : !llvm.ptr -> i32
    %430 = llvm.load %3 : !llvm.ptr -> i32
    %c68_i64 = arith.constant 68 : i64
    %431 = arith.extui %430 : i32 to i64
    %432 = arith.addi %431, %c68_i64 : i64
    %c8_i64_198 = arith.constant 8 : i64
    %433 = arith.addi %432, %c8_i64_198 : i64
    %c0_i32_199 = arith.constant 0 : i32
    %434 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_199) : (!llvm.ptr, i32) -> i32
    %435 = arith.extui %434 : i32 to i64
    %c65536_i64_200 = arith.constant 65536 : i64
    %436 = arith.muli %435, %c65536_i64_200 : i64
    %437 = arith.cmpi ult, %433, %436 : i64
    cf.cond_br %437, ^bb100, ^bb101
  ^bb79:  // 2 preds: ^bb75, ^bb83
    %438 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32_201 = arith.constant 64 : i32
    %439 = arith.addi %438, %c64_i32_201 : i32
    %c24_i32_202 = arith.constant 24 : i32
    %440 = arith.addi %439, %c24_i32_202 : i32
    %441 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_203 = arith.constant 32 : i32
    %442 = arith.addi %441, %c32_i32_203 : i32
    %c24_i32_204 = arith.constant 24 : i32
    %443 = arith.addi %442, %c24_i32_204 : i32
    %c0_i64_205 = arith.constant 0 : i64
    %444 = arith.extui %443 : i32 to i64
    %445 = arith.addi %444, %c0_i64_205 : i64
    %c8_i64_206 = arith.constant 8 : i64
    %446 = arith.addi %445, %c8_i64_206 : i64
    %c0_i32_207 = arith.constant 0 : i32
    %447 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_207) : (!llvm.ptr, i32) -> i32
    %448 = arith.extui %447 : i32 to i64
    %c65536_i64_208 = arith.constant 65536 : i64
    %449 = arith.muli %448, %c65536_i64_208 : i64
    %450 = arith.cmpi ult, %446, %449 : i64
    cf.cond_br %450, ^bb84, ^bb85
  ^bb80:  // pred: ^bb75
    %451 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32_209 = arith.constant 64 : i32
    %452 = arith.addi %451, %c64_i32_209 : i32
    %453 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_210 = arith.constant 32 : i32
    %454 = arith.addi %453, %c32_i32_210 : i32
    call @f93(%arg0, %452, %454) : (!llvm.ptr, i32, i32) -> ()
    %455 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i64_211 = arith.constant 64 : i64
    %456 = arith.extui %455 : i32 to i64
    %457 = arith.addi %456, %c64_i64_211 : i64
    %c4_i64_212 = arith.constant 4 : i64
    %458 = arith.addi %457, %c4_i64_212 : i64
    %c0_i32_213 = arith.constant 0 : i32
    %459 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_213) : (!llvm.ptr, i32) -> i32
    %460 = arith.extui %459 : i32 to i64
    %c65536_i64_214 = arith.constant 65536 : i64
    %461 = arith.muli %460, %c65536_i64_214 : i64
    %462 = arith.cmpi ult, %458, %461 : i64
    cf.cond_br %462, ^bb81, ^bb82
  ^bb81:  // 2 preds: ^bb80, ^bb82
    %463 = llvm.getelementptr %12[%457] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %464 = llvm.load volatile %463 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %464, %1 : i32, !llvm.ptr
    %c-2147483638_i32 = arith.constant -2147483638 : i32
    %465 = arith.cmpi eq, %464, %c-2147483638_i32 : i32
    %466 = arith.extui %465 : i1 to i32
    %c0_i32_215 = arith.constant 0 : i32
    %467 = arith.cmpi eq, %466, %c0_i32_215 : i32
    %468 = arith.extui %467 : i1 to i32
    %c0_i32_216 = arith.constant 0 : i32
    %469 = arith.cmpi ne, %468, %c0_i32_216 : i32
    cf.cond_br %469, ^bb78, ^bb83
  ^bb82:  // pred: ^bb80
    %c1_i32_217 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_217) : (i32) -> ()
    cf.br ^bb81
  ^bb83:  // pred: ^bb81
    cf.br ^bb79
  ^bb84:  // 2 preds: ^bb79, ^bb85
    %470 = llvm.getelementptr %12[%445] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %471 = llvm.load volatile %470 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_218 = arith.constant 0 : i64
    %472 = arith.extui %440 : i32 to i64
    %473 = arith.addi %472, %c0_i64_218 : i64
    %c8_i64_219 = arith.constant 8 : i64
    %474 = arith.addi %473, %c8_i64_219 : i64
    %c0_i32_220 = arith.constant 0 : i32
    %475 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_220) : (!llvm.ptr, i32) -> i32
    %476 = arith.extui %475 : i32 to i64
    %c65536_i64_221 = arith.constant 65536 : i64
    %477 = arith.muli %476, %c65536_i64_221 : i64
    %478 = arith.cmpi ult, %474, %477 : i64
    cf.cond_br %478, ^bb86, ^bb87
  ^bb85:  // pred: ^bb79
    %c1_i32_222 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_222) : (i32) -> ()
    cf.br ^bb84
  ^bb86:  // 2 preds: ^bb84, ^bb87
    %479 = llvm.getelementptr %12[%473] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %471, %479 {alignment = 1 : i64} : i64, !llvm.ptr
    %480 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32_223 = arith.constant 64 : i32
    %481 = arith.addi %480, %c64_i32_223 : i32
    %c16_i32_224 = arith.constant 16 : i32
    %482 = arith.addi %481, %c16_i32_224 : i32
    %483 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_225 = arith.constant 32 : i32
    %484 = arith.addi %483, %c32_i32_225 : i32
    %c16_i32_226 = arith.constant 16 : i32
    %485 = arith.addi %484, %c16_i32_226 : i32
    %c0_i64_227 = arith.constant 0 : i64
    %486 = arith.extui %485 : i32 to i64
    %487 = arith.addi %486, %c0_i64_227 : i64
    %c8_i64_228 = arith.constant 8 : i64
    %488 = arith.addi %487, %c8_i64_228 : i64
    %c0_i32_229 = arith.constant 0 : i32
    %489 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_229) : (!llvm.ptr, i32) -> i32
    %490 = arith.extui %489 : i32 to i64
    %c65536_i64_230 = arith.constant 65536 : i64
    %491 = arith.muli %490, %c65536_i64_230 : i64
    %492 = arith.cmpi ult, %488, %491 : i64
    cf.cond_br %492, ^bb88, ^bb89
  ^bb87:  // pred: ^bb84
    %c1_i32_231 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_231) : (i32) -> ()
    cf.br ^bb86
  ^bb88:  // 2 preds: ^bb86, ^bb89
    %493 = llvm.getelementptr %12[%487] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %494 = llvm.load volatile %493 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_232 = arith.constant 0 : i64
    %495 = arith.extui %482 : i32 to i64
    %496 = arith.addi %495, %c0_i64_232 : i64
    %c8_i64_233 = arith.constant 8 : i64
    %497 = arith.addi %496, %c8_i64_233 : i64
    %c0_i32_234 = arith.constant 0 : i32
    %498 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_234) : (!llvm.ptr, i32) -> i32
    %499 = arith.extui %498 : i32 to i64
    %c65536_i64_235 = arith.constant 65536 : i64
    %500 = arith.muli %499, %c65536_i64_235 : i64
    %501 = arith.cmpi ult, %497, %500 : i64
    cf.cond_br %501, ^bb90, ^bb91
  ^bb89:  // pred: ^bb86
    %c1_i32_236 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_236) : (i32) -> ()
    cf.br ^bb88
  ^bb90:  // 2 preds: ^bb88, ^bb91
    %502 = llvm.getelementptr %12[%496] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %494, %502 {alignment = 1 : i64} : i64, !llvm.ptr
    %503 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32_237 = arith.constant 64 : i32
    %504 = arith.addi %503, %c64_i32_237 : i32
    %c8_i32_238 = arith.constant 8 : i32
    %505 = arith.addi %504, %c8_i32_238 : i32
    %506 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_239 = arith.constant 32 : i32
    %507 = arith.addi %506, %c32_i32_239 : i32
    %c8_i32_240 = arith.constant 8 : i32
    %508 = arith.addi %507, %c8_i32_240 : i32
    %c0_i64_241 = arith.constant 0 : i64
    %509 = arith.extui %508 : i32 to i64
    %510 = arith.addi %509, %c0_i64_241 : i64
    %c8_i64_242 = arith.constant 8 : i64
    %511 = arith.addi %510, %c8_i64_242 : i64
    %c0_i32_243 = arith.constant 0 : i32
    %512 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_243) : (!llvm.ptr, i32) -> i32
    %513 = arith.extui %512 : i32 to i64
    %c65536_i64_244 = arith.constant 65536 : i64
    %514 = arith.muli %513, %c65536_i64_244 : i64
    %515 = arith.cmpi ult, %511, %514 : i64
    cf.cond_br %515, ^bb92, ^bb93
  ^bb91:  // pred: ^bb88
    %c1_i32_245 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_245) : (i32) -> ()
    cf.br ^bb90
  ^bb92:  // 2 preds: ^bb90, ^bb93
    %516 = llvm.getelementptr %12[%510] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %517 = llvm.load volatile %516 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_246 = arith.constant 0 : i64
    %518 = arith.extui %505 : i32 to i64
    %519 = arith.addi %518, %c0_i64_246 : i64
    %c8_i64_247 = arith.constant 8 : i64
    %520 = arith.addi %519, %c8_i64_247 : i64
    %c0_i32_248 = arith.constant 0 : i32
    %521 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_248) : (!llvm.ptr, i32) -> i32
    %522 = arith.extui %521 : i32 to i64
    %c65536_i64_249 = arith.constant 65536 : i64
    %523 = arith.muli %522, %c65536_i64_249 : i64
    %524 = arith.cmpi ult, %520, %523 : i64
    cf.cond_br %524, ^bb94, ^bb95
  ^bb93:  // pred: ^bb90
    %c1_i32_250 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_250) : (i32) -> ()
    cf.br ^bb92
  ^bb94:  // 2 preds: ^bb92, ^bb95
    %525 = llvm.getelementptr %12[%519] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %517, %525 {alignment = 1 : i64} : i64, !llvm.ptr
    %526 = llvm.load %3 : !llvm.ptr -> i32
    %527 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i64_251 = arith.constant 32 : i64
    %528 = arith.extui %527 : i32 to i64
    %529 = arith.addi %528, %c32_i64_251 : i64
    %c8_i64_252 = arith.constant 8 : i64
    %530 = arith.addi %529, %c8_i64_252 : i64
    %c0_i32_253 = arith.constant 0 : i32
    %531 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_253) : (!llvm.ptr, i32) -> i32
    %532 = arith.extui %531 : i32 to i64
    %c65536_i64_254 = arith.constant 65536 : i64
    %533 = arith.muli %532, %c65536_i64_254 : i64
    %534 = arith.cmpi ult, %530, %533 : i64
    cf.cond_br %534, ^bb96, ^bb97
  ^bb95:  // pred: ^bb92
    %c1_i32_255 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_255) : (i32) -> ()
    cf.br ^bb94
  ^bb96:  // 2 preds: ^bb94, ^bb97
    %535 = llvm.getelementptr %12[%529] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %536 = llvm.load volatile %535 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c64_i64_256 = arith.constant 64 : i64
    %537 = arith.extui %526 : i32 to i64
    %538 = arith.addi %537, %c64_i64_256 : i64
    %c8_i64_257 = arith.constant 8 : i64
    %539 = arith.addi %538, %c8_i64_257 : i64
    %c0_i32_258 = arith.constant 0 : i32
    %540 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_258) : (!llvm.ptr, i32) -> i32
    %541 = arith.extui %540 : i32 to i64
    %c65536_i64_259 = arith.constant 65536 : i64
    %542 = arith.muli %541, %c65536_i64_259 : i64
    %543 = arith.cmpi ult, %539, %542 : i64
    cf.cond_br %543, ^bb98, ^bb99
  ^bb97:  // pred: ^bb94
    %c1_i32_260 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_260) : (i32) -> ()
    cf.br ^bb96
  ^bb98:  // 2 preds: ^bb96, ^bb99
    %544 = llvm.getelementptr %12[%538] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %536, %544 {alignment = 1 : i64} : i64, !llvm.ptr
    %545 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_261 = arith.constant 8 : i32
    %546 = arith.addi %545, %c8_i32_261 : i32
    %547 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32_262 = arith.constant 64 : i32
    %548 = arith.addi %547, %c64_i32_262 : i32
    call @f99(%arg0, %546, %548) : (!llvm.ptr, i32, i32) -> ()
    %c0_i32_263 = arith.constant 0 : i32
    llvm.store %c0_i32_263, %1 : i32, !llvm.ptr
    cf.br ^bb77
  ^bb99:  // pred: ^bb96
    %c1_i32_264 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_264) : (i32) -> ()
    cf.br ^bb98
  ^bb100:  // 2 preds: ^bb78, ^bb101
    %549 = llvm.getelementptr %12[%432] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %550 = llvm.load volatile %549 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c8_i64_265 = arith.constant 8 : i64
    %551 = arith.extui %429 : i32 to i64
    %552 = arith.addi %551, %c8_i64_265 : i64
    %c8_i64_266 = arith.constant 8 : i64
    %553 = arith.addi %552, %c8_i64_266 : i64
    %c0_i32_267 = arith.constant 0 : i32
    %554 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_267) : (!llvm.ptr, i32) -> i32
    %555 = arith.extui %554 : i32 to i64
    %c65536_i64_268 = arith.constant 65536 : i64
    %556 = arith.muli %555, %c65536_i64_268 : i64
    %557 = arith.cmpi ult, %553, %556 : i64
    cf.cond_br %557, ^bb102, ^bb103
  ^bb101:  // pred: ^bb78
    %c1_i32_269 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_269) : (i32) -> ()
    cf.br ^bb100
  ^bb102:  // 2 preds: ^bb100, ^bb103
    %558 = llvm.getelementptr %12[%552] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %550, %558 {alignment = 1 : i64} : i64, !llvm.ptr
    %559 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32_270 = arith.constant 24 : i32
    %560 = arith.addi %559, %c24_i32_270 : i32
    %561 = llvm.load %3 : !llvm.ptr -> i32
    %c84_i32 = arith.constant 84 : i32
    %562 = arith.addi %561, %c84_i32 : i32
    %c0_i64_271 = arith.constant 0 : i64
    %563 = arith.extui %562 : i32 to i64
    %564 = arith.addi %563, %c0_i64_271 : i64
    %c4_i64_272 = arith.constant 4 : i64
    %565 = arith.addi %564, %c4_i64_272 : i64
    %c0_i32_273 = arith.constant 0 : i32
    %566 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_273) : (!llvm.ptr, i32) -> i32
    %567 = arith.extui %566 : i32 to i64
    %c65536_i64_274 = arith.constant 65536 : i64
    %568 = arith.muli %567, %c65536_i64_274 : i64
    %569 = arith.cmpi ult, %565, %568 : i64
    cf.cond_br %569, ^bb104, ^bb105
  ^bb103:  // pred: ^bb100
    %c1_i32_275 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_275) : (i32) -> ()
    cf.br ^bb102
  ^bb104:  // 2 preds: ^bb102, ^bb105
    %570 = llvm.getelementptr %12[%564] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %571 = llvm.load volatile %570 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_276 = arith.constant 0 : i64
    %572 = arith.extui %560 : i32 to i64
    %573 = arith.addi %572, %c0_i64_276 : i64
    %c4_i64_277 = arith.constant 4 : i64
    %574 = arith.addi %573, %c4_i64_277 : i64
    %c0_i32_278 = arith.constant 0 : i32
    %575 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_278) : (!llvm.ptr, i32) -> i32
    %576 = arith.extui %575 : i32 to i64
    %c65536_i64_279 = arith.constant 65536 : i64
    %577 = arith.muli %576, %c65536_i64_279 : i64
    %578 = arith.cmpi ult, %574, %577 : i64
    cf.cond_br %578, ^bb106, ^bb107
  ^bb105:  // pred: ^bb102
    %c1_i32_280 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_280) : (i32) -> ()
    cf.br ^bb104
  ^bb106:  // 2 preds: ^bb104, ^bb107
    %579 = llvm.getelementptr %12[%573] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %571, %579 {alignment = 1 : i64} : i32, !llvm.ptr
    %580 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_281 = arith.constant 16 : i32
    %581 = arith.addi %580, %c16_i32_281 : i32
    %582 = llvm.load %3 : !llvm.ptr -> i32
    %c76_i32 = arith.constant 76 : i32
    %583 = arith.addi %582, %c76_i32 : i32
    %c0_i64_282 = arith.constant 0 : i64
    %584 = arith.extui %583 : i32 to i64
    %585 = arith.addi %584, %c0_i64_282 : i64
    %c8_i64_283 = arith.constant 8 : i64
    %586 = arith.addi %585, %c8_i64_283 : i64
    %c0_i32_284 = arith.constant 0 : i32
    %587 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_284) : (!llvm.ptr, i32) -> i32
    %588 = arith.extui %587 : i32 to i64
    %c65536_i64_285 = arith.constant 65536 : i64
    %589 = arith.muli %588, %c65536_i64_285 : i64
    %590 = arith.cmpi ult, %586, %589 : i64
    cf.cond_br %590, ^bb108, ^bb109
  ^bb107:  // pred: ^bb104
    %c1_i32_286 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_286) : (i32) -> ()
    cf.br ^bb106
  ^bb108:  // 2 preds: ^bb106, ^bb109
    %591 = llvm.getelementptr %12[%585] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %592 = llvm.load volatile %591 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_287 = arith.constant 0 : i64
    %593 = arith.extui %581 : i32 to i64
    %594 = arith.addi %593, %c0_i64_287 : i64
    %c8_i64_288 = arith.constant 8 : i64
    %595 = arith.addi %594, %c8_i64_288 : i64
    %c0_i32_289 = arith.constant 0 : i32
    %596 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_289) : (!llvm.ptr, i32) -> i32
    %597 = arith.extui %596 : i32 to i64
    %c65536_i64_290 = arith.constant 65536 : i64
    %598 = arith.muli %597, %c65536_i64_290 : i64
    %599 = arith.cmpi ult, %595, %598 : i64
    cf.cond_br %599, ^bb110, ^bb111
  ^bb109:  // pred: ^bb106
    %c1_i32_291 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_291) : (i32) -> ()
    cf.br ^bb108
  ^bb110:  // 2 preds: ^bb108, ^bb111
    %600 = llvm.getelementptr %12[%594] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %592, %600 {alignment = 1 : i64} : i64, !llvm.ptr
    %601 = llvm.load %0 : !llvm.ptr -> i32
    %602 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_292 = arith.constant 4 : i64
    %603 = arith.extui %601 : i32 to i64
    %604 = arith.addi %603, %c4_i64_292 : i64
    %c4_i64_293 = arith.constant 4 : i64
    %605 = arith.addi %604, %c4_i64_293 : i64
    %c0_i32_294 = arith.constant 0 : i32
    %606 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_294) : (!llvm.ptr, i32) -> i32
    %607 = arith.extui %606 : i32 to i64
    %c65536_i64_295 = arith.constant 65536 : i64
    %608 = arith.muli %607, %c65536_i64_295 : i64
    %609 = arith.cmpi ult, %605, %608 : i64
    cf.cond_br %609, ^bb112, ^bb113
  ^bb111:  // pred: ^bb108
    %c1_i32_296 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_296) : (i32) -> ()
    cf.br ^bb110
  ^bb112:  // 2 preds: ^bb110, ^bb113
    %610 = llvm.getelementptr %12[%604] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %602, %610 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i32_297 = arith.constant 1 : i32
    llvm.store %c1_i32_297, %1 : i32, !llvm.ptr
    cf.br ^bb77
  ^bb113:  // pred: ^bb110
    %c1_i32_298 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_298) : (i32) -> ()
    cf.br ^bb112
  ^bb114:  // 2 preds: ^bb77, ^bb115
    %611 = llvm.getelementptr %12[%423] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %421, %611 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb5
  ^bb115:  // pred: ^bb77
    %c1_i32_299 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_299) : (i32) -> ()
    cf.br ^bb114
  ^bb116:  // 2 preds: ^bb6, ^bb117
    %612 = llvm.getelementptr %12[%32] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_12, %612 {alignment = 1 : i64} : i32, !llvm.ptr
    %613 = llvm.load %0 : !llvm.ptr -> i32
    %614 = llvm.load %4 : !llvm.ptr -> i32
    %c4_i64_300 = arith.constant 4 : i64
    %615 = arith.extui %613 : i32 to i64
    %616 = arith.addi %615, %c4_i64_300 : i64
    %c4_i64_301 = arith.constant 4 : i64
    %617 = arith.addi %616, %c4_i64_301 : i64
    %c0_i32_302 = arith.constant 0 : i32
    %618 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_302) : (!llvm.ptr, i32) -> i32
    %619 = arith.extui %618 : i32 to i64
    %c65536_i64_303 = arith.constant 65536 : i64
    %620 = arith.muli %619, %c65536_i64_303 : i64
    %621 = arith.cmpi ult, %617, %620 : i64
    cf.cond_br %621, ^bb118, ^bb119
  ^bb117:  // pred: ^bb6
    %c1_i32_304 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_304) : (i32) -> ()
    cf.br ^bb116
  ^bb118:  // 2 preds: ^bb116, ^bb119
    %622 = llvm.getelementptr %12[%616] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %614, %622 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb5
  ^bb119:  // pred: ^bb116
    %c1_i32_305 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_305) : (i32) -> ()
    cf.br ^bb118
  }
  func.func @f23(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %4 : i64, !llvm.ptr
    %5 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %7[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %10 = llvm.load %6 : !llvm.ptr -> i32
    %c144_i32 = arith.constant 144 : i32
    %11 = arith.subi %10, %c144_i32 : i32
    llvm.store %11, %3 : i32, !llvm.ptr
    llvm.store %11, %6 : i32, !llvm.ptr
    %12 = llvm.load %3 : !llvm.ptr -> i32
    %c124_i32 = arith.constant 124 : i32
    %13 = arith.addi %12, %c124_i32 : i32
    call @f81(%arg0, %13) : (!llvm.ptr, i32) -> ()
    %14 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %15 = arith.addi %14, %c8_i32 : i32
    %16 = llvm.load %1 : !llvm.ptr -> i32
    %17 = llvm.load %3 : !llvm.ptr -> i32
    %c124_i32_4 = arith.constant 124 : i32
    %18 = arith.addi %17, %c124_i32_4 : i32
    %19 = llvm.load %2 : !llvm.ptr -> i32
    call @f28(%arg0, %15, %16, %18, %19) : (!llvm.ptr, i32, i32, i32, i32) -> ()
    %20 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c8_i64 : i64
    %c8_i64_5 = arith.constant 8 : i64
    %23 = arith.addi %22, %c8_i64_5 : i64
    %c0_i32_6 = arith.constant 0 : i32
    %24 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_6) : (!llvm.ptr, i32) -> i32
    %25 = arith.extui %24 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %26 = arith.muli %25, %c65536_i64 : i64
    %27 = arith.cmpi ult, %23, %26 : i64
    cf.cond_br %27, ^bb4, ^bb5
  ^bb2:  // pred: ^bb7
    return
  ^bb3:  // 2 preds: ^bb4, ^bb6
    %28 = llvm.load %0 : !llvm.ptr -> i32
    %29 = llvm.load %4 : !llvm.ptr -> i64
    %c0_i64_7 = arith.constant 0 : i64
    %30 = arith.extui %28 : i32 to i64
    %31 = arith.addi %30, %c0_i64_7 : i64
    %c8_i64_8 = arith.constant 8 : i64
    %32 = arith.addi %31, %c8_i64_8 : i64
    %c0_i32_9 = arith.constant 0 : i32
    %33 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_9) : (!llvm.ptr, i32) -> i32
    %34 = arith.extui %33 : i32 to i64
    %c65536_i64_10 = arith.constant 65536 : i64
    %35 = arith.muli %34, %c65536_i64_10 : i64
    %36 = arith.cmpi ult, %32, %35 : i64
    cf.cond_br %36, ^bb7, ^bb8
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %37 = llvm.getelementptr %9[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %38 = llvm.load volatile %37 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %38, %4 : i64, !llvm.ptr
    %c2_i64 = arith.constant 2 : i64
    %39 = arith.cmpi eq, %38, %c2_i64 : i64
    %40 = arith.extui %39 : i1 to i32
    %c0_i32_11 = arith.constant 0 : i32
    %41 = arith.cmpi ne, %40, %c0_i32_11 : i32
    cf.cond_br %41, ^bb3, ^bb6
  ^bb5:  // pred: ^bb1
    %c1_i32_12 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_12) : (i32) -> ()
    cf.br ^bb4
  ^bb6:  // pred: ^bb4
    %42 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_13 = arith.constant 8 : i32
    %43 = arith.addi %42, %c8_i32_13 : i32
    %44 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_14 = arith.constant 8 : i32
    %45 = arith.addi %44, %c8_i32_14 : i32
    %c8_i32_15 = arith.constant 8 : i32
    %46 = arith.addi %45, %c8_i32_15 : i32
    %c104_i32 = arith.constant 104 : i32
    %47 = call @f161(%arg0, %43, %46, %c104_i32) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb3
  ^bb7:  // 2 preds: ^bb3, ^bb8
    %48 = llvm.getelementptr %9[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %29, %48 {alignment = 1 : i64} : i64, !llvm.ptr
    %49 = llvm.load %3 : !llvm.ptr -> i32
    %c144_i32_16 = arith.constant 144 : i32
    %50 = arith.addi %49, %c144_i32_16 : i32
    llvm.store %50, %6 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb8:  // pred: ^bb3
    %c1_i32_17 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_17) : (i32) -> ()
    cf.br ^bb7
  }
  func.func @f24(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %11 = llvm.load %7 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %12 = arith.subi %11, %c48_i32 : i32
    llvm.store %12, %1 : i32, !llvm.ptr
    llvm.store %12, %7 : i32, !llvm.ptr
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %14 = arith.addi %13, %c8_i32 : i32
    %c0_i32_5 = arith.constant 0 : i32
    %c0_i32_6 = arith.constant 0 : i32
    %c1_i32_7 = arith.constant 1 : i32
    %c32_i32 = arith.constant 32 : i32
    call @f111(%arg0, %14, %c0_i32_5, %c0_i32_6, %c1_i32_7, %c32_i32) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %15 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %16 = arith.extui %15 : i32 to i64
    %17 = arith.addi %16, %c12_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %18 = arith.addi %17, %c4_i64 : i64
    %c0_i32_8 = arith.constant 0 : i32
    %19 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_8) : (!llvm.ptr, i32) -> i32
    %20 = arith.extui %19 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %21 = arith.muli %20, %c65536_i64 : i64
    %22 = arith.cmpi ult, %18, %21 : i64
    cf.cond_br %22, ^bb3, ^bb4
  ^bb2:  // pred: ^bb37
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %23 = llvm.getelementptr %10[%17] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %24 = llvm.load volatile %23 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %24, %2 : i32, !llvm.ptr
    %25 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %26 = arith.extui %25 : i32 to i64
    %27 = arith.addi %26, %c8_i64 : i64
    %c4_i64_9 = arith.constant 4 : i64
    %28 = arith.addi %27, %c4_i64_9 : i64
    %c0_i32_10 = arith.constant 0 : i32
    %29 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_10) : (!llvm.ptr, i32) -> i32
    %30 = arith.extui %29 : i32 to i64
    %c65536_i64_11 = arith.constant 65536 : i64
    %31 = arith.muli %30, %c65536_i64_11 : i64
    %32 = arith.cmpi ult, %28, %31 : i64
    cf.cond_br %32, ^bb7, ^bb8
  ^bb4:  // pred: ^bb1
    %c1_i32_12 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_12) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // pred: ^bb14
    %33 = llvm.load %4 : !llvm.ptr -> i32
    %34 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %35 = arith.extui %34 : i32 to i64
    %36 = arith.addi %35, %c16_i64 : i64
    %c4_i64_13 = arith.constant 4 : i64
    %37 = arith.addi %36, %c4_i64_13 : i64
    %c0_i32_14 = arith.constant 0 : i32
    %38 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_14) : (!llvm.ptr, i32) -> i32
    %39 = arith.extui %38 : i32 to i64
    %c65536_i64_15 = arith.constant 65536 : i64
    %40 = arith.muli %39, %c65536_i64_15 : i64
    %41 = arith.cmpi ult, %37, %40 : i64
    cf.cond_br %41, ^bb41, ^bb42
  ^bb6:  // pred: ^bb7
    %42 = llvm.load %2 : !llvm.ptr -> i32
    %43 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i64_16 = arith.constant 16 : i64
    %44 = arith.extui %43 : i32 to i64
    %45 = arith.addi %44, %c16_i64_16 : i64
    %c4_i64_17 = arith.constant 4 : i64
    %46 = arith.addi %45, %c4_i64_17 : i64
    %c0_i32_18 = arith.constant 0 : i32
    %47 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_18) : (!llvm.ptr, i32) -> i32
    %48 = arith.extui %47 : i32 to i64
    %c65536_i64_19 = arith.constant 65536 : i64
    %49 = arith.muli %48, %c65536_i64_19 : i64
    %50 = arith.cmpi ult, %46, %49 : i64
    cf.cond_br %50, ^bb39, ^bb40
  ^bb7:  // 2 preds: ^bb3, ^bb8
    %51 = llvm.getelementptr %10[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %52 = llvm.load volatile %51 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_20 = arith.constant 1 : i32
    %53 = arith.cmpi eq, %52, %c1_i32_20 : i32
    %54 = arith.extui %53 : i1 to i32
    %c0_i32_21 = arith.constant 0 : i32
    %55 = arith.cmpi ne, %54, %c0_i32_21 : i32
    cf.cond_br %55, ^bb6, ^bb9
  ^bb8:  // pred: ^bb3
    %c1_i32_22 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_22) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // pred: ^bb7
    %56 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i64_23 = arith.constant 16 : i64
    %57 = arith.extui %56 : i32 to i64
    %58 = arith.addi %57, %c16_i64_23 : i64
    %c4_i64_24 = arith.constant 4 : i64
    %59 = arith.addi %58, %c4_i64_24 : i64
    %c0_i32_25 = arith.constant 0 : i32
    %60 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_25) : (!llvm.ptr, i32) -> i32
    %61 = arith.extui %60 : i32 to i64
    %c65536_i64_26 = arith.constant 65536 : i64
    %62 = arith.muli %61, %c65536_i64_26 : i64
    %63 = arith.cmpi ult, %59, %62 : i64
    cf.cond_br %63, ^bb10, ^bb11
  ^bb10:  // 2 preds: ^bb9, ^bb11
    %64 = llvm.getelementptr %10[%58] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %65 = llvm.load volatile %64 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %65, %3 : i32, !llvm.ptr
    %66 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_27 = arith.constant 8 : i32
    %67 = arith.addi %66, %c8_i32_27 : i32
    %c4_i32 = arith.constant 4 : i32
    %c0_i32_28 = arith.constant 0 : i32
    %c4_i32_29 = arith.constant 4 : i32
    %c4_i32_30 = arith.constant 4 : i32
    call @f111(%arg0, %67, %c4_i32, %c0_i32_28, %c4_i32_29, %c4_i32_30) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %68 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64_31 = arith.constant 12 : i64
    %69 = arith.extui %68 : i32 to i64
    %70 = arith.addi %69, %c12_i64_31 : i64
    %c4_i64_32 = arith.constant 4 : i64
    %71 = arith.addi %70, %c4_i64_32 : i64
    %c0_i32_33 = arith.constant 0 : i32
    %72 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_33) : (!llvm.ptr, i32) -> i32
    %73 = arith.extui %72 : i32 to i64
    %c65536_i64_34 = arith.constant 65536 : i64
    %74 = arith.muli %73, %c65536_i64_34 : i64
    %75 = arith.cmpi ult, %71, %74 : i64
    cf.cond_br %75, ^bb12, ^bb13
  ^bb11:  // pred: ^bb9
    %c1_i32_35 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_35) : (i32) -> ()
    cf.br ^bb10
  ^bb12:  // 2 preds: ^bb10, ^bb13
    %76 = llvm.getelementptr %10[%70] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %77 = llvm.load volatile %76 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %77, %4 : i32, !llvm.ptr
    %78 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64_36 = arith.constant 8 : i64
    %79 = arith.extui %78 : i32 to i64
    %80 = arith.addi %79, %c8_i64_36 : i64
    %c4_i64_37 = arith.constant 4 : i64
    %81 = arith.addi %80, %c4_i64_37 : i64
    %c0_i32_38 = arith.constant 0 : i32
    %82 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_38) : (!llvm.ptr, i32) -> i32
    %83 = arith.extui %82 : i32 to i64
    %c65536_i64_39 = arith.constant 65536 : i64
    %84 = arith.muli %83, %c65536_i64_39 : i64
    %85 = arith.cmpi ult, %81, %84 : i64
    cf.cond_br %85, ^bb14, ^bb15
  ^bb13:  // pred: ^bb10
    %c1_i32_40 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_40) : (i32) -> ()
    cf.br ^bb12
  ^bb14:  // 2 preds: ^bb12, ^bb15
    %86 = llvm.getelementptr %10[%80] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %87 = llvm.load volatile %86 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_41 = arith.constant 1 : i32
    %88 = arith.cmpi eq, %87, %c1_i32_41 : i32
    %89 = arith.extui %88 : i1 to i32
    %c0_i32_42 = arith.constant 0 : i32
    %90 = arith.cmpi ne, %89, %c0_i32_42 : i32
    cf.cond_br %90, ^bb5, ^bb16
  ^bb15:  // pred: ^bb12
    %c1_i32_43 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_43) : (i32) -> ()
    cf.br ^bb14
  ^bb16:  // pred: ^bb14
    %91 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i64_44 = arith.constant 16 : i64
    %92 = arith.extui %91 : i32 to i64
    %93 = arith.addi %92, %c16_i64_44 : i64
    %c4_i64_45 = arith.constant 4 : i64
    %94 = arith.addi %93, %c4_i64_45 : i64
    %c0_i32_46 = arith.constant 0 : i32
    %95 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_46) : (!llvm.ptr, i32) -> i32
    %96 = arith.extui %95 : i32 to i64
    %c65536_i64_47 = arith.constant 65536 : i64
    %97 = arith.muli %96, %c65536_i64_47 : i64
    %98 = arith.cmpi ult, %94, %97 : i64
    cf.cond_br %98, ^bb17, ^bb18
  ^bb17:  // 2 preds: ^bb16, ^bb18
    %99 = llvm.getelementptr %10[%93] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %100 = llvm.load volatile %99 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %100, %5 : i32, !llvm.ptr
    %c0_i32_48 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %101 = arith.extui %100 : i32 to i64
    %102 = arith.addi %101, %c0_i64 : i64
    %c4_i64_49 = arith.constant 4 : i64
    %103 = arith.addi %102, %c4_i64_49 : i64
    %c0_i32_50 = arith.constant 0 : i32
    %104 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_50) : (!llvm.ptr, i32) -> i32
    %105 = arith.extui %104 : i32 to i64
    %c65536_i64_51 = arith.constant 65536 : i64
    %106 = arith.muli %105, %c65536_i64_51 : i64
    %107 = arith.cmpi ult, %103, %106 : i64
    cf.cond_br %107, ^bb19, ^bb20
  ^bb18:  // pred: ^bb16
    %c1_i32_52 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_52) : (i32) -> ()
    cf.br ^bb17
  ^bb19:  // 2 preds: ^bb17, ^bb20
    %108 = llvm.getelementptr %10[%102] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_48, %108 {alignment = 1 : i64} : i32, !llvm.ptr
    %109 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_53 = arith.constant 8 : i32
    %110 = arith.addi %109, %c8_i32_53 : i32
    %c8_i32_54 = arith.constant 8 : i32
    %111 = arith.addi %110, %c8_i32_54 : i32
    %c0_i32_55 = arith.constant 0 : i32
    %c0_i64_56 = arith.constant 0 : i64
    %112 = arith.extui %111 : i32 to i64
    %113 = arith.addi %112, %c0_i64_56 : i64
    %c4_i64_57 = arith.constant 4 : i64
    %114 = arith.addi %113, %c4_i64_57 : i64
    %c0_i32_58 = arith.constant 0 : i32
    %115 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_58) : (!llvm.ptr, i32) -> i32
    %116 = arith.extui %115 : i32 to i64
    %c65536_i64_59 = arith.constant 65536 : i64
    %117 = arith.muli %116, %c65536_i64_59 : i64
    %118 = arith.cmpi ult, %114, %117 : i64
    cf.cond_br %118, ^bb21, ^bb22
  ^bb20:  // pred: ^bb17
    %c1_i32_60 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_60) : (i32) -> ()
    cf.br ^bb19
  ^bb21:  // 2 preds: ^bb19, ^bb22
    %119 = llvm.getelementptr %10[%113] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_55, %119 {alignment = 1 : i64} : i32, !llvm.ptr
    %120 = llvm.load %1 : !llvm.ptr -> i32
    %121 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i64_61 = arith.constant 12 : i64
    %122 = arith.extui %120 : i32 to i64
    %123 = arith.addi %122, %c12_i64_61 : i64
    %c4_i64_62 = arith.constant 4 : i64
    %124 = arith.addi %123, %c4_i64_62 : i64
    %c0_i32_63 = arith.constant 0 : i32
    %125 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_63) : (!llvm.ptr, i32) -> i32
    %126 = arith.extui %125 : i32 to i64
    %c65536_i64_64 = arith.constant 65536 : i64
    %127 = arith.muli %126, %c65536_i64_64 : i64
    %128 = arith.cmpi ult, %124, %127 : i64
    cf.cond_br %128, ^bb23, ^bb24
  ^bb22:  // pred: ^bb19
    %c1_i32_65 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_65) : (i32) -> ()
    cf.br ^bb21
  ^bb23:  // 2 preds: ^bb21, ^bb24
    %129 = llvm.getelementptr %10[%123] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %121, %129 {alignment = 1 : i64} : i32, !llvm.ptr
    %130 = llvm.load %1 : !llvm.ptr -> i32
    %131 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_66 = arith.constant 8 : i64
    %132 = arith.extui %130 : i32 to i64
    %133 = arith.addi %132, %c8_i64_66 : i64
    %c4_i64_67 = arith.constant 4 : i64
    %134 = arith.addi %133, %c4_i64_67 : i64
    %c0_i32_68 = arith.constant 0 : i32
    %135 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_68) : (!llvm.ptr, i32) -> i32
    %136 = arith.extui %135 : i32 to i64
    %c65536_i64_69 = arith.constant 65536 : i64
    %137 = arith.muli %136, %c65536_i64_69 : i64
    %138 = arith.cmpi ult, %134, %137 : i64
    cf.cond_br %138, ^bb25, ^bb26
  ^bb24:  // pred: ^bb21
    %c1_i32_70 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_70) : (i32) -> ()
    cf.br ^bb23
  ^bb25:  // 2 preds: ^bb23, ^bb26
    %139 = llvm.getelementptr %10[%133] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %131, %139 {alignment = 1 : i64} : i32, !llvm.ptr
    %140 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_71 = arith.constant 0 : i32
    %c28_i64 = arith.constant 28 : i64
    %141 = arith.extui %140 : i32 to i64
    %142 = arith.addi %141, %c28_i64 : i64
    %c4_i64_72 = arith.constant 4 : i64
    %143 = arith.addi %142, %c4_i64_72 : i64
    %c0_i32_73 = arith.constant 0 : i32
    %144 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_73) : (!llvm.ptr, i32) -> i32
    %145 = arith.extui %144 : i32 to i64
    %c65536_i64_74 = arith.constant 65536 : i64
    %146 = arith.muli %145, %c65536_i64_74 : i64
    %147 = arith.cmpi ult, %143, %146 : i64
    cf.cond_br %147, ^bb27, ^bb28
  ^bb26:  // pred: ^bb23
    %c1_i32_75 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_75) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // 2 preds: ^bb25, ^bb28
    %148 = llvm.getelementptr %10[%142] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_71, %148 {alignment = 1 : i64} : i32, !llvm.ptr
    %149 = llvm.load %1 : !llvm.ptr -> i32
    %150 = llvm.load %5 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %151 = arith.extui %149 : i32 to i64
    %152 = arith.addi %151, %c24_i64 : i64
    %c4_i64_76 = arith.constant 4 : i64
    %153 = arith.addi %152, %c4_i64_76 : i64
    %c0_i32_77 = arith.constant 0 : i32
    %154 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_77) : (!llvm.ptr, i32) -> i32
    %155 = arith.extui %154 : i32 to i64
    %c65536_i64_78 = arith.constant 65536 : i64
    %156 = arith.muli %155, %c65536_i64_78 : i64
    %157 = arith.cmpi ult, %153, %156 : i64
    cf.cond_br %157, ^bb29, ^bb30
  ^bb28:  // pred: ^bb25
    %c1_i32_79 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_79) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // 2 preds: ^bb27, ^bb30
    %158 = llvm.getelementptr %10[%152] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %150, %158 {alignment = 1 : i64} : i32, !llvm.ptr
    %159 = llvm.load %1 : !llvm.ptr -> i32
    %160 = llvm.load %4 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %161 = arith.extui %159 : i32 to i64
    %162 = arith.addi %161, %c20_i64 : i64
    %c4_i64_80 = arith.constant 4 : i64
    %163 = arith.addi %162, %c4_i64_80 : i64
    %c0_i32_81 = arith.constant 0 : i32
    %164 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_81) : (!llvm.ptr, i32) -> i32
    %165 = arith.extui %164 : i32 to i64
    %c65536_i64_82 = arith.constant 65536 : i64
    %166 = arith.muli %165, %c65536_i64_82 : i64
    %167 = arith.cmpi ult, %163, %166 : i64
    cf.cond_br %167, ^bb31, ^bb32
  ^bb30:  // pred: ^bb27
    %c1_i32_83 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_83) : (i32) -> ()
    cf.br ^bb29
  ^bb31:  // 2 preds: ^bb29, ^bb32
    %168 = llvm.getelementptr %10[%162] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %160, %168 {alignment = 1 : i64} : i32, !llvm.ptr
    %169 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i32_84 = arith.constant 32 : i32
    %170 = arith.addi %169, %c32_i32_84 : i32
    %c8_i32_85 = arith.constant 8 : i32
    %171 = arith.addi %170, %c8_i32_85 : i32
    %c0_i32_86 = arith.constant 0 : i32
    %c0_i64_87 = arith.constant 0 : i64
    %172 = arith.extui %171 : i32 to i64
    %173 = arith.addi %172, %c0_i64_87 : i64
    %c4_i64_88 = arith.constant 4 : i64
    %174 = arith.addi %173, %c4_i64_88 : i64
    %c0_i32_89 = arith.constant 0 : i32
    %175 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_89) : (!llvm.ptr, i32) -> i32
    %176 = arith.extui %175 : i32 to i64
    %c65536_i64_90 = arith.constant 65536 : i64
    %177 = arith.muli %176, %c65536_i64_90 : i64
    %178 = arith.cmpi ult, %174, %177 : i64
    cf.cond_br %178, ^bb33, ^bb34
  ^bb32:  // pred: ^bb29
    %c1_i32_91 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_91) : (i32) -> ()
    cf.br ^bb31
  ^bb33:  // 2 preds: ^bb31, ^bb34
    %179 = llvm.getelementptr %10[%173] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_86, %179 {alignment = 1 : i64} : i32, !llvm.ptr
    %180 = llvm.load %1 : !llvm.ptr -> i32
    %181 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64_92 = arith.constant 8 : i64
    %182 = arith.extui %181 : i32 to i64
    %183 = arith.addi %182, %c8_i64_92 : i64
    %c8_i64_93 = arith.constant 8 : i64
    %184 = arith.addi %183, %c8_i64_93 : i64
    %c0_i32_94 = arith.constant 0 : i32
    %185 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_94) : (!llvm.ptr, i32) -> i32
    %186 = arith.extui %185 : i32 to i64
    %c65536_i64_95 = arith.constant 65536 : i64
    %187 = arith.muli %186, %c65536_i64_95 : i64
    %188 = arith.cmpi ult, %184, %187 : i64
    cf.cond_br %188, ^bb35, ^bb36
  ^bb34:  // pred: ^bb31
    %c1_i32_96 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_96) : (i32) -> ()
    cf.br ^bb33
  ^bb35:  // 2 preds: ^bb33, ^bb36
    %189 = llvm.getelementptr %10[%183] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %190 = llvm.load volatile %189 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c32_i64 = arith.constant 32 : i64
    %191 = arith.extui %180 : i32 to i64
    %192 = arith.addi %191, %c32_i64 : i64
    %c8_i64_97 = arith.constant 8 : i64
    %193 = arith.addi %192, %c8_i64_97 : i64
    %c0_i32_98 = arith.constant 0 : i32
    %194 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_98) : (!llvm.ptr, i32) -> i32
    %195 = arith.extui %194 : i32 to i64
    %c65536_i64_99 = arith.constant 65536 : i64
    %196 = arith.muli %195, %c65536_i64_99 : i64
    %197 = arith.cmpi ult, %193, %196 : i64
    cf.cond_br %197, ^bb37, ^bb38
  ^bb36:  // pred: ^bb33
    %c1_i32_100 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_100) : (i32) -> ()
    cf.br ^bb35
  ^bb37:  // 2 preds: ^bb35, ^bb38
    %198 = llvm.getelementptr %10[%192] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %190, %198 {alignment = 1 : i64} : i64, !llvm.ptr
    %199 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i32 = arith.constant 20 : i32
    %200 = arith.addi %199, %c20_i32 : i32
    llvm.store %200, %2 : i32, !llvm.ptr
    call @f89(%arg0, %200) : (!llvm.ptr, i32) -> ()
    %201 = llvm.load %2 : !llvm.ptr -> i32
    call @f90(%arg0, %201) : (!llvm.ptr, i32) -> ()
    %202 = llvm.load %0 : !llvm.ptr -> i32
    %203 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i32_101 = arith.constant 32 : i32
    %204 = arith.addi %203, %c32_i32_101 : i32
    call @f86(%arg0, %202, %204) : (!llvm.ptr, i32, i32) -> ()
    %205 = llvm.load %1 : !llvm.ptr -> i32
    %c48_i32_102 = arith.constant 48 : i32
    %206 = arith.addi %205, %c48_i32_102 : i32
    llvm.store %206, %7 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb38:  // pred: ^bb35
    %c1_i32_103 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_103) : (i32) -> ()
    cf.br ^bb37
  ^bb39:  // 2 preds: ^bb6, ^bb40
    %207 = llvm.getelementptr %10[%45] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %208 = llvm.load volatile %207 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f143(%arg0, %42, %208) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb40:  // pred: ^bb6
    %c1_i32_104 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_104) : (i32) -> ()
    cf.br ^bb39
  ^bb41:  // 2 preds: ^bb5, ^bb42
    %209 = llvm.getelementptr %10[%36] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %210 = llvm.load volatile %209 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f143(%arg0, %33, %210) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb42:  // pred: ^bb5
    %c1_i32_105 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_105) : (i32) -> ()
    cf.br ^bb41
  }
  func.func @f25(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %6 : i64, !llvm.ptr
    %c0_i32_6 = arith.constant 0 : i32
    %c1_i32_7 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32_6, %7 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_8 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32_6, %8 : i32, !llvm.ptr
    %c1_i32_9 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_9 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32_6, %9 : i32, !llvm.ptr
    %10 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.getelementptr %12[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %15 = llvm.load %11 : !llvm.ptr -> i32
    %c144_i32 = arith.constant 144 : i32
    %16 = arith.subi %15, %c144_i32 : i32
    llvm.store %16, %3 : i32, !llvm.ptr
    llvm.store %16, %11 : i32, !llvm.ptr
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    llvm.store %c-2147483648_i32, %4 : i32, !llvm.ptr
    %17 = llvm.load %3 : !llvm.ptr -> i32
    %c-2147483648_i32_10 = arith.constant -2147483648 : i32
    %c104_i64 = arith.constant 104 : i64
    %18 = arith.extui %17 : i32 to i64
    %19 = arith.addi %18, %c104_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %20 = arith.addi %19, %c4_i64 : i64
    %c0_i32_11 = arith.constant 0 : i32
    %21 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_11) : (!llvm.ptr, i32) -> i32
    %22 = arith.extui %21 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %23 = arith.muli %22, %c65536_i64 : i64
    %24 = arith.cmpi ult, %20, %23 : i64
    cf.cond_br %24, ^bb3, ^bb4
  ^bb2:  // pred: ^bb5
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %25 = llvm.getelementptr %14[%19] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-2147483648_i32_10, %25 {alignment = 1 : i64} : i32, !llvm.ptr
    %26 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %27 = arith.cmpi ult, %26, %c32_i32 : i32
    %28 = arith.extui %27 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %29 = arith.cmpi ne, %28, %c0_i32_12 : i32
    cf.cond_br %29, ^bb6, ^bb7
  ^bb4:  // pred: ^bb1
    %c1_i32_13 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_13) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb123, ^bb131
    %30 = llvm.load %3 : !llvm.ptr -> i32
    %c144_i32_14 = arith.constant 144 : i32
    %31 = arith.addi %30, %c144_i32_14 : i32
    llvm.store %31, %11 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb6:  // 3 preds: ^bb3, ^bb15, ^bb120
    %32 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_15 = arith.constant 1 : i32
    %c0_i64_16 = arith.constant 0 : i64
    %33 = arith.extui %32 : i32 to i64
    %34 = arith.addi %33, %c0_i64_16 : i64
    %c1_i64 = arith.constant 1 : i64
    %35 = arith.addi %34, %c1_i64 : i64
    %c0_i32_17 = arith.constant 0 : i32
    %36 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_17) : (!llvm.ptr, i32) -> i32
    %37 = arith.extui %36 : i32 to i64
    %c65536_i64_18 = arith.constant 65536 : i64
    %38 = arith.muli %37, %c65536_i64_18 : i64
    %39 = arith.cmpi ult, %35, %38 : i64
    cf.cond_br %39, ^bb129, ^bb130
  ^bb7:  // pred: ^bb3
    %40 = llvm.load %3 : !llvm.ptr -> i32
    %c104_i32 = arith.constant 104 : i32
    %41 = arith.addi %40, %c104_i32 : i32
    call @f36(%arg0, %41) : (!llvm.ptr, i32) -> ()
    %42 = llvm.load %1 : !llvm.ptr -> i32
    %c7_i64 = arith.constant 7 : i64
    %43 = arith.extui %42 : i32 to i64
    %44 = arith.addi %43, %c7_i64 : i64
    %c4_i64_19 = arith.constant 4 : i64
    %45 = arith.addi %44, %c4_i64_19 : i64
    %c0_i32_20 = arith.constant 0 : i32
    %46 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_20) : (!llvm.ptr, i32) -> i32
    %47 = arith.extui %46 : i32 to i64
    %c65536_i64_21 = arith.constant 65536 : i64
    %48 = arith.muli %47, %c65536_i64_21 : i64
    %49 = arith.cmpi ult, %45, %48 : i64
    cf.cond_br %49, ^bb8, ^bb9
  ^bb8:  // 2 preds: ^bb7, ^bb9
    %50 = llvm.getelementptr %14[%44] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %51 = llvm.load volatile %50 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %51, %4 : i32, !llvm.ptr
    %52 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64 = arith.constant 3 : i64
    %53 = arith.extui %52 : i32 to i64
    %54 = arith.addi %53, %c3_i64 : i64
    %c4_i64_22 = arith.constant 4 : i64
    %55 = arith.addi %54, %c4_i64_22 : i64
    %c0_i32_23 = arith.constant 0 : i32
    %56 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_23) : (!llvm.ptr, i32) -> i32
    %57 = arith.extui %56 : i32 to i64
    %c65536_i64_24 = arith.constant 65536 : i64
    %58 = arith.muli %57, %c65536_i64_24 : i64
    %59 = arith.cmpi ult, %55, %58 : i64
    cf.cond_br %59, ^bb10, ^bb11
  ^bb9:  // pred: ^bb7
    %c1_i32_25 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_25) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // 2 preds: ^bb8, ^bb11
    %60 = llvm.getelementptr %14[%54] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %61 = llvm.load volatile %60 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %61, %5 : i32, !llvm.ptr
    %62 = llvm.load %3 : !llvm.ptr -> i32
    %c-2147483648_i32_26 = arith.constant -2147483648 : i32
    %c104_i64_27 = arith.constant 104 : i64
    %63 = arith.extui %62 : i32 to i64
    %64 = arith.addi %63, %c104_i64_27 : i64
    %c4_i64_28 = arith.constant 4 : i64
    %65 = arith.addi %64, %c4_i64_28 : i64
    %c0_i32_29 = arith.constant 0 : i32
    %66 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_29) : (!llvm.ptr, i32) -> i32
    %67 = arith.extui %66 : i32 to i64
    %c65536_i64_30 = arith.constant 65536 : i64
    %68 = arith.muli %67, %c65536_i64_30 : i64
    %69 = arith.cmpi ult, %65, %68 : i64
    cf.cond_br %69, ^bb12, ^bb13
  ^bb11:  // pred: ^bb8
    %c1_i32_31 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_31) : (i32) -> ()
    cf.br ^bb10
  ^bb12:  // 2 preds: ^bb10, ^bb13
    %70 = llvm.getelementptr %14[%64] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-2147483648_i32_26, %70 {alignment = 1 : i64} : i32, !llvm.ptr
    %71 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %72 = arith.cmpi uge, %71, %c64_i32 : i32
    %73 = arith.extui %72 : i1 to i32
    %c0_i32_32 = arith.constant 0 : i32
    %74 = arith.cmpi ne, %73, %c0_i32_32 : i32
    cf.cond_br %74, ^bb14, ^bb15
  ^bb13:  // pred: ^bb10
    %c1_i32_33 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_33) : (i32) -> ()
    cf.br ^bb12
  ^bb14:  // pred: ^bb12
    %75 = llvm.load %3 : !llvm.ptr -> i32
    %c104_i32_34 = arith.constant 104 : i32
    %76 = arith.addi %75, %c104_i32_34 : i32
    call @f36(%arg0, %76) : (!llvm.ptr, i32) -> ()
    %77 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %78 = arith.addi %77, %c4_i32 : i32
    %c34_i32 = arith.constant 34 : i32
    %79 = arith.addi %78, %c34_i32 : i32
    %80 = llvm.load %1 : !llvm.ptr -> i32
    %c34_i32_35 = arith.constant 34 : i32
    %81 = arith.addi %80, %c34_i32_35 : i32
    %c0_i64_36 = arith.constant 0 : i64
    %82 = arith.extui %81 : i32 to i64
    %83 = arith.addi %82, %c0_i64_36 : i64
    %c1_i64_37 = arith.constant 1 : i64
    %84 = arith.addi %83, %c1_i64_37 : i64
    %c0_i32_38 = arith.constant 0 : i32
    %85 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_38) : (!llvm.ptr, i32) -> i32
    %86 = arith.extui %85 : i32 to i64
    %c65536_i64_39 = arith.constant 65536 : i64
    %87 = arith.muli %86, %c65536_i64_39 : i64
    %88 = arith.cmpi ult, %84, %87 : i64
    cf.cond_br %88, ^bb16, ^bb17
  ^bb15:  // pred: ^bb12
    %c-2147483648_i32_40 = arith.constant -2147483648 : i32
    llvm.store %c-2147483648_i32_40, %4 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb16:  // 2 preds: ^bb14, ^bb17
    %89 = llvm.getelementptr %14[%83] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %90 = llvm.load volatile %89 {alignment = 1 : i64} : !llvm.ptr -> i8
    %91 = arith.extui %90 : i8 to i32
    %c0_i64_41 = arith.constant 0 : i64
    %92 = arith.extui %79 : i32 to i64
    %93 = arith.addi %92, %c0_i64_41 : i64
    %c1_i64_42 = arith.constant 1 : i64
    %94 = arith.addi %93, %c1_i64_42 : i64
    %c0_i32_43 = arith.constant 0 : i32
    %95 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_43) : (!llvm.ptr, i32) -> i32
    %96 = arith.extui %95 : i32 to i64
    %c65536_i64_44 = arith.constant 65536 : i64
    %97 = arith.muli %96, %c65536_i64_44 : i64
    %98 = arith.cmpi ult, %94, %97 : i64
    cf.cond_br %98, ^bb18, ^bb19
  ^bb17:  // pred: ^bb14
    %c1_i32_45 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_45) : (i32) -> ()
    cf.br ^bb16
  ^bb18:  // 2 preds: ^bb16, ^bb19
    %99 = llvm.getelementptr %14[%93] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %100 = arith.trunci %91 : i32 to i8
    llvm.store volatile %100, %99 {alignment = 1 : i64} : i8, !llvm.ptr
    %101 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32_46 = arith.constant 4 : i32
    %102 = arith.addi %101, %c4_i32_46 : i32
    %c2_i32 = arith.constant 2 : i32
    %103 = arith.addi %102, %c2_i32 : i32
    %104 = llvm.load %1 : !llvm.ptr -> i32
    %c2_i32_47 = arith.constant 2 : i32
    %105 = arith.addi %104, %c2_i32_47 : i32
    %c0_i64_48 = arith.constant 0 : i64
    %106 = arith.extui %105 : i32 to i64
    %107 = arith.addi %106, %c0_i64_48 : i64
    %c1_i64_49 = arith.constant 1 : i64
    %108 = arith.addi %107, %c1_i64_49 : i64
    %c0_i32_50 = arith.constant 0 : i32
    %109 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_50) : (!llvm.ptr, i32) -> i32
    %110 = arith.extui %109 : i32 to i64
    %c65536_i64_51 = arith.constant 65536 : i64
    %111 = arith.muli %110, %c65536_i64_51 : i64
    %112 = arith.cmpi ult, %108, %111 : i64
    cf.cond_br %112, ^bb20, ^bb21
  ^bb19:  // pred: ^bb16
    %c1_i32_52 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_52) : (i32) -> ()
    cf.br ^bb18
  ^bb20:  // 2 preds: ^bb18, ^bb21
    %113 = llvm.getelementptr %14[%107] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %114 = llvm.load volatile %113 {alignment = 1 : i64} : !llvm.ptr -> i8
    %115 = arith.extui %114 : i8 to i32
    %c0_i64_53 = arith.constant 0 : i64
    %116 = arith.extui %103 : i32 to i64
    %117 = arith.addi %116, %c0_i64_53 : i64
    %c1_i64_54 = arith.constant 1 : i64
    %118 = arith.addi %117, %c1_i64_54 : i64
    %c0_i32_55 = arith.constant 0 : i32
    %119 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_55) : (!llvm.ptr, i32) -> i32
    %120 = arith.extui %119 : i32 to i64
    %c65536_i64_56 = arith.constant 65536 : i64
    %121 = arith.muli %120, %c65536_i64_56 : i64
    %122 = arith.cmpi ult, %118, %121 : i64
    cf.cond_br %122, ^bb22, ^bb23
  ^bb21:  // pred: ^bb18
    %c1_i32_57 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_57) : (i32) -> ()
    cf.br ^bb20
  ^bb22:  // 2 preds: ^bb20, ^bb23
    %123 = llvm.getelementptr %14[%117] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %124 = arith.trunci %115 : i32 to i8
    llvm.store volatile %124, %123 {alignment = 1 : i64} : i8, !llvm.ptr
    %125 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32_58 = arith.constant 4 : i32
    %126 = arith.addi %125, %c4_i32_58 : i32
    %c19_i32 = arith.constant 19 : i32
    %127 = arith.addi %126, %c19_i32 : i32
    %128 = llvm.load %1 : !llvm.ptr -> i32
    %c19_i32_59 = arith.constant 19 : i32
    %129 = arith.addi %128, %c19_i32_59 : i32
    %c0_i64_60 = arith.constant 0 : i64
    %130 = arith.extui %129 : i32 to i64
    %131 = arith.addi %130, %c0_i64_60 : i64
    %c8_i64 = arith.constant 8 : i64
    %132 = arith.addi %131, %c8_i64 : i64
    %c0_i32_61 = arith.constant 0 : i32
    %133 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_61) : (!llvm.ptr, i32) -> i32
    %134 = arith.extui %133 : i32 to i64
    %c65536_i64_62 = arith.constant 65536 : i64
    %135 = arith.muli %134, %c65536_i64_62 : i64
    %136 = arith.cmpi ult, %132, %135 : i64
    cf.cond_br %136, ^bb24, ^bb25
  ^bb23:  // pred: ^bb20
    %c1_i32_63 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_63) : (i32) -> ()
    cf.br ^bb22
  ^bb24:  // 2 preds: ^bb22, ^bb25
    %137 = llvm.getelementptr %14[%131] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %138 = llvm.load volatile %137 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_64 = arith.constant 0 : i64
    %139 = arith.extui %127 : i32 to i64
    %140 = arith.addi %139, %c0_i64_64 : i64
    %c8_i64_65 = arith.constant 8 : i64
    %141 = arith.addi %140, %c8_i64_65 : i64
    %c0_i32_66 = arith.constant 0 : i32
    %142 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_66) : (!llvm.ptr, i32) -> i32
    %143 = arith.extui %142 : i32 to i64
    %c65536_i64_67 = arith.constant 65536 : i64
    %144 = arith.muli %143, %c65536_i64_67 : i64
    %145 = arith.cmpi ult, %141, %144 : i64
    cf.cond_br %145, ^bb26, ^bb27
  ^bb25:  // pred: ^bb22
    %c1_i32_68 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_68) : (i32) -> ()
    cf.br ^bb24
  ^bb26:  // 2 preds: ^bb24, ^bb27
    %146 = llvm.getelementptr %14[%140] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %138, %146 {alignment = 1 : i64} : i64, !llvm.ptr
    %147 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32_69 = arith.constant 4 : i32
    %148 = arith.addi %147, %c4_i32_69 : i32
    %c31_i32 = arith.constant 31 : i32
    %149 = arith.addi %148, %c31_i32 : i32
    %150 = llvm.load %1 : !llvm.ptr -> i32
    %c31_i32_70 = arith.constant 31 : i32
    %151 = arith.addi %150, %c31_i32_70 : i32
    %c0_i64_71 = arith.constant 0 : i64
    %152 = arith.extui %151 : i32 to i64
    %153 = arith.addi %152, %c0_i64_71 : i64
    %c1_i64_72 = arith.constant 1 : i64
    %154 = arith.addi %153, %c1_i64_72 : i64
    %c0_i32_73 = arith.constant 0 : i32
    %155 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_73) : (!llvm.ptr, i32) -> i32
    %156 = arith.extui %155 : i32 to i64
    %c65536_i64_74 = arith.constant 65536 : i64
    %157 = arith.muli %156, %c65536_i64_74 : i64
    %158 = arith.cmpi ult, %154, %157 : i64
    cf.cond_br %158, ^bb28, ^bb29
  ^bb27:  // pred: ^bb24
    %c1_i32_75 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_75) : (i32) -> ()
    cf.br ^bb26
  ^bb28:  // 2 preds: ^bb26, ^bb29
    %159 = llvm.getelementptr %14[%153] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %160 = llvm.load volatile %159 {alignment = 1 : i64} : !llvm.ptr -> i8
    %161 = arith.extui %160 : i8 to i32
    %c0_i64_76 = arith.constant 0 : i64
    %162 = arith.extui %149 : i32 to i64
    %163 = arith.addi %162, %c0_i64_76 : i64
    %c1_i64_77 = arith.constant 1 : i64
    %164 = arith.addi %163, %c1_i64_77 : i64
    %c0_i32_78 = arith.constant 0 : i32
    %165 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_78) : (!llvm.ptr, i32) -> i32
    %166 = arith.extui %165 : i32 to i64
    %c65536_i64_79 = arith.constant 65536 : i64
    %167 = arith.muli %166, %c65536_i64_79 : i64
    %168 = arith.cmpi ult, %164, %167 : i64
    cf.cond_br %168, ^bb30, ^bb31
  ^bb29:  // pred: ^bb26
    %c1_i32_80 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_80) : (i32) -> ()
    cf.br ^bb28
  ^bb30:  // 2 preds: ^bb28, ^bb31
    %169 = llvm.getelementptr %14[%163] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %170 = arith.trunci %161 : i32 to i8
    llvm.store volatile %170, %169 {alignment = 1 : i64} : i8, !llvm.ptr
    %171 = llvm.load %3 : !llvm.ptr -> i32
    %172 = llvm.load %4 : !llvm.ptr -> i32
    %c11_i64 = arith.constant 11 : i64
    %173 = arith.extui %171 : i32 to i64
    %174 = arith.addi %173, %c11_i64 : i64
    %c4_i64_81 = arith.constant 4 : i64
    %175 = arith.addi %174, %c4_i64_81 : i64
    %c0_i32_82 = arith.constant 0 : i32
    %176 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_82) : (!llvm.ptr, i32) -> i32
    %177 = arith.extui %176 : i32 to i64
    %c65536_i64_83 = arith.constant 65536 : i64
    %178 = arith.muli %177, %c65536_i64_83 : i64
    %179 = arith.cmpi ult, %175, %178 : i64
    cf.cond_br %179, ^bb32, ^bb33
  ^bb31:  // pred: ^bb28
    %c1_i32_84 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_84) : (i32) -> ()
    cf.br ^bb30
  ^bb32:  // 2 preds: ^bb30, ^bb33
    %180 = llvm.getelementptr %14[%174] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %172, %180 {alignment = 1 : i64} : i32, !llvm.ptr
    %181 = llvm.load %3 : !llvm.ptr -> i32
    %182 = llvm.load %5 : !llvm.ptr -> i32
    %c7_i64_85 = arith.constant 7 : i64
    %183 = arith.extui %181 : i32 to i64
    %184 = arith.addi %183, %c7_i64_85 : i64
    %c4_i64_86 = arith.constant 4 : i64
    %185 = arith.addi %184, %c4_i64_86 : i64
    %c0_i32_87 = arith.constant 0 : i32
    %186 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_87) : (!llvm.ptr, i32) -> i32
    %187 = arith.extui %186 : i32 to i64
    %c65536_i64_88 = arith.constant 65536 : i64
    %188 = arith.muli %187, %c65536_i64_88 : i64
    %189 = arith.cmpi ult, %185, %188 : i64
    cf.cond_br %189, ^bb34, ^bb35
  ^bb33:  // pred: ^bb30
    %c1_i32_89 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_89) : (i32) -> ()
    cf.br ^bb32
  ^bb34:  // 2 preds: ^bb32, ^bb35
    %190 = llvm.getelementptr %14[%184] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %182, %190 {alignment = 1 : i64} : i32, !llvm.ptr
    %191 = llvm.load %3 : !llvm.ptr -> i32
    %192 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i64 = arith.constant 32 : i64
    %193 = arith.extui %192 : i32 to i64
    %194 = arith.addi %193, %c32_i64 : i64
    %c2_i64 = arith.constant 2 : i64
    %195 = arith.addi %194, %c2_i64 : i64
    %c0_i32_90 = arith.constant 0 : i32
    %196 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_90) : (!llvm.ptr, i32) -> i32
    %197 = arith.extui %196 : i32 to i64
    %c65536_i64_91 = arith.constant 65536 : i64
    %198 = arith.muli %197, %c65536_i64_91 : i64
    %199 = arith.cmpi ult, %195, %198 : i64
    cf.cond_br %199, ^bb36, ^bb37
  ^bb35:  // pred: ^bb32
    %c1_i32_92 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_92) : (i32) -> ()
    cf.br ^bb34
  ^bb36:  // 2 preds: ^bb34, ^bb37
    %200 = llvm.getelementptr %14[%194] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %201 = llvm.load volatile %200 {alignment = 1 : i64} : !llvm.ptr -> i16
    %202 = arith.extui %201 : i16 to i32
    %c36_i64 = arith.constant 36 : i64
    %203 = arith.extui %191 : i32 to i64
    %204 = arith.addi %203, %c36_i64 : i64
    %c2_i64_93 = arith.constant 2 : i64
    %205 = arith.addi %204, %c2_i64_93 : i64
    %c0_i32_94 = arith.constant 0 : i32
    %206 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_94) : (!llvm.ptr, i32) -> i32
    %207 = arith.extui %206 : i32 to i64
    %c65536_i64_95 = arith.constant 65536 : i64
    %208 = arith.muli %207, %c65536_i64_95 : i64
    %209 = arith.cmpi ult, %205, %208 : i64
    cf.cond_br %209, ^bb38, ^bb39
  ^bb37:  // pred: ^bb34
    %c1_i32_96 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_96) : (i32) -> ()
    cf.br ^bb36
  ^bb38:  // 2 preds: ^bb36, ^bb39
    %210 = llvm.getelementptr %14[%204] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %211 = arith.trunci %202 : i32 to i16
    llvm.store volatile %211, %210 {alignment = 1 : i64} : i16, !llvm.ptr
    %212 = llvm.load %3 : !llvm.ptr -> i32
    %213 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_97 = arith.constant 0 : i64
    %214 = arith.extui %213 : i32 to i64
    %215 = arith.addi %214, %c0_i64_97 : i64
    %c2_i64_98 = arith.constant 2 : i64
    %216 = arith.addi %215, %c2_i64_98 : i64
    %c0_i32_99 = arith.constant 0 : i32
    %217 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_99) : (!llvm.ptr, i32) -> i32
    %218 = arith.extui %217 : i32 to i64
    %c65536_i64_100 = arith.constant 65536 : i64
    %219 = arith.muli %218, %c65536_i64_100 : i64
    %220 = arith.cmpi ult, %216, %219 : i64
    cf.cond_br %220, ^bb40, ^bb41
  ^bb39:  // pred: ^bb36
    %c1_i32_101 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_101) : (i32) -> ()
    cf.br ^bb38
  ^bb40:  // 2 preds: ^bb38, ^bb41
    %221 = llvm.getelementptr %14[%215] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %222 = llvm.load volatile %221 {alignment = 1 : i64} : !llvm.ptr -> i16
    %223 = arith.extui %222 : i16 to i32
    %c4_i64_102 = arith.constant 4 : i64
    %224 = arith.extui %212 : i32 to i64
    %225 = arith.addi %224, %c4_i64_102 : i64
    %c2_i64_103 = arith.constant 2 : i64
    %226 = arith.addi %225, %c2_i64_103 : i64
    %c0_i32_104 = arith.constant 0 : i32
    %227 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_104) : (!llvm.ptr, i32) -> i32
    %228 = arith.extui %227 : i32 to i64
    %c65536_i64_105 = arith.constant 65536 : i64
    %229 = arith.muli %228, %c65536_i64_105 : i64
    %230 = arith.cmpi ult, %226, %229 : i64
    cf.cond_br %230, ^bb42, ^bb43
  ^bb41:  // pred: ^bb38
    %c1_i32_106 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_106) : (i32) -> ()
    cf.br ^bb40
  ^bb42:  // 2 preds: ^bb40, ^bb43
    %231 = llvm.getelementptr %14[%225] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %232 = arith.trunci %223 : i32 to i16
    llvm.store volatile %232, %231 {alignment = 1 : i64} : i16, !llvm.ptr
    %233 = llvm.load %3 : !llvm.ptr -> i32
    %234 = llvm.load %1 : !llvm.ptr -> i32
    %c11_i64_107 = arith.constant 11 : i64
    %235 = arith.extui %234 : i32 to i64
    %236 = arith.addi %235, %c11_i64_107 : i64
    %c8_i64_108 = arith.constant 8 : i64
    %237 = arith.addi %236, %c8_i64_108 : i64
    %c0_i32_109 = arith.constant 0 : i32
    %238 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_109) : (!llvm.ptr, i32) -> i32
    %239 = arith.extui %238 : i32 to i64
    %c65536_i64_110 = arith.constant 65536 : i64
    %240 = arith.muli %239, %c65536_i64_110 : i64
    %241 = arith.cmpi ult, %237, %240 : i64
    cf.cond_br %241, ^bb44, ^bb45
  ^bb43:  // pred: ^bb40
    %c1_i32_111 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_111) : (i32) -> ()
    cf.br ^bb42
  ^bb44:  // 2 preds: ^bb42, ^bb45
    %242 = llvm.getelementptr %14[%236] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %243 = llvm.load volatile %242 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c15_i64 = arith.constant 15 : i64
    %244 = arith.extui %233 : i32 to i64
    %245 = arith.addi %244, %c15_i64 : i64
    %c8_i64_112 = arith.constant 8 : i64
    %246 = arith.addi %245, %c8_i64_112 : i64
    %c0_i32_113 = arith.constant 0 : i32
    %247 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_113) : (!llvm.ptr, i32) -> i32
    %248 = arith.extui %247 : i32 to i64
    %c65536_i64_114 = arith.constant 65536 : i64
    %249 = arith.muli %248, %c65536_i64_114 : i64
    %250 = arith.cmpi ult, %246, %249 : i64
    cf.cond_br %250, ^bb46, ^bb47
  ^bb45:  // pred: ^bb42
    %c1_i32_115 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_115) : (i32) -> ()
    cf.br ^bb44
  ^bb46:  // 2 preds: ^bb44, ^bb47
    %251 = llvm.getelementptr %14[%245] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %243, %251 {alignment = 1 : i64} : i64, !llvm.ptr
    %252 = llvm.load %3 : !llvm.ptr -> i32
    %253 = llvm.load %1 : !llvm.ptr -> i32
    %c27_i64 = arith.constant 27 : i64
    %254 = arith.extui %253 : i32 to i64
    %255 = arith.addi %254, %c27_i64 : i64
    %c4_i64_116 = arith.constant 4 : i64
    %256 = arith.addi %255, %c4_i64_116 : i64
    %c0_i32_117 = arith.constant 0 : i32
    %257 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_117) : (!llvm.ptr, i32) -> i32
    %258 = arith.extui %257 : i32 to i64
    %c65536_i64_118 = arith.constant 65536 : i64
    %259 = arith.muli %258, %c65536_i64_118 : i64
    %260 = arith.cmpi ult, %256, %259 : i64
    cf.cond_br %260, ^bb48, ^bb49
  ^bb47:  // pred: ^bb44
    %c1_i32_119 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_119) : (i32) -> ()
    cf.br ^bb46
  ^bb48:  // 2 preds: ^bb46, ^bb49
    %261 = llvm.getelementptr %14[%255] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %262 = llvm.load volatile %261 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c31_i64 = arith.constant 31 : i64
    %263 = arith.extui %252 : i32 to i64
    %264 = arith.addi %263, %c31_i64 : i64
    %c4_i64_120 = arith.constant 4 : i64
    %265 = arith.addi %264, %c4_i64_120 : i64
    %c0_i32_121 = arith.constant 0 : i32
    %266 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_121) : (!llvm.ptr, i32) -> i32
    %267 = arith.extui %266 : i32 to i64
    %c65536_i64_122 = arith.constant 65536 : i64
    %268 = arith.muli %267, %c65536_i64_122 : i64
    %269 = arith.cmpi ult, %265, %268 : i64
    cf.cond_br %269, ^bb50, ^bb51
  ^bb49:  // pred: ^bb46
    %c1_i32_123 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_123) : (i32) -> ()
    cf.br ^bb48
  ^bb50:  // 2 preds: ^bb48, ^bb51
    %270 = llvm.getelementptr %14[%264] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %262, %270 {alignment = 1 : i64} : i32, !llvm.ptr
    %271 = llvm.load %1 : !llvm.ptr -> i32
    %c35_i64 = arith.constant 35 : i64
    %272 = arith.extui %271 : i32 to i64
    %273 = arith.addi %272, %c35_i64 : i64
    %c8_i64_124 = arith.constant 8 : i64
    %274 = arith.addi %273, %c8_i64_124 : i64
    %c0_i32_125 = arith.constant 0 : i32
    %275 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_125) : (!llvm.ptr, i32) -> i32
    %276 = arith.extui %275 : i32 to i64
    %c65536_i64_126 = arith.constant 65536 : i64
    %277 = arith.muli %276, %c65536_i64_126 : i64
    %278 = arith.cmpi ult, %274, %277 : i64
    cf.cond_br %278, ^bb52, ^bb53
  ^bb51:  // pred: ^bb48
    %c1_i32_127 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_127) : (i32) -> ()
    cf.br ^bb50
  ^bb52:  // 2 preds: ^bb50, ^bb53
    %279 = llvm.getelementptr %14[%273] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %280 = llvm.load volatile %279 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %280, %6 : i64, !llvm.ptr
    %281 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32_128 = arith.constant 4 : i32
    %282 = arith.addi %281, %c4_i32_128 : i32
    %c51_i32 = arith.constant 51 : i32
    %283 = arith.addi %282, %c51_i32 : i32
    %284 = llvm.load %1 : !llvm.ptr -> i32
    %c51_i32_129 = arith.constant 51 : i32
    %285 = arith.addi %284, %c51_i32_129 : i32
    %c0_i64_130 = arith.constant 0 : i64
    %286 = arith.extui %285 : i32 to i64
    %287 = arith.addi %286, %c0_i64_130 : i64
    %c8_i64_131 = arith.constant 8 : i64
    %288 = arith.addi %287, %c8_i64_131 : i64
    %c0_i32_132 = arith.constant 0 : i32
    %289 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_132) : (!llvm.ptr, i32) -> i32
    %290 = arith.extui %289 : i32 to i64
    %c65536_i64_133 = arith.constant 65536 : i64
    %291 = arith.muli %290, %c65536_i64_133 : i64
    %292 = arith.cmpi ult, %288, %291 : i64
    cf.cond_br %292, ^bb54, ^bb55
  ^bb53:  // pred: ^bb50
    %c1_i32_134 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_134) : (i32) -> ()
    cf.br ^bb52
  ^bb54:  // 2 preds: ^bb52, ^bb55
    %293 = llvm.getelementptr %14[%287] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %294 = llvm.load volatile %293 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_135 = arith.constant 0 : i64
    %295 = arith.extui %283 : i32 to i64
    %296 = arith.addi %295, %c0_i64_135 : i64
    %c8_i64_136 = arith.constant 8 : i64
    %297 = arith.addi %296, %c8_i64_136 : i64
    %c0_i32_137 = arith.constant 0 : i32
    %298 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_137) : (!llvm.ptr, i32) -> i32
    %299 = arith.extui %298 : i32 to i64
    %c65536_i64_138 = arith.constant 65536 : i64
    %300 = arith.muli %299, %c65536_i64_138 : i64
    %301 = arith.cmpi ult, %297, %300 : i64
    cf.cond_br %301, ^bb56, ^bb57
  ^bb55:  // pred: ^bb52
    %c1_i32_139 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_139) : (i32) -> ()
    cf.br ^bb54
  ^bb56:  // 2 preds: ^bb54, ^bb57
    %302 = llvm.getelementptr %14[%296] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %294, %302 {alignment = 1 : i64} : i64, !llvm.ptr
    %303 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32_140 = arith.constant 4 : i32
    %304 = arith.addi %303, %c4_i32_140 : i32
    %c63_i32 = arith.constant 63 : i32
    %305 = arith.addi %304, %c63_i32 : i32
    %306 = llvm.load %1 : !llvm.ptr -> i32
    %c63_i32_141 = arith.constant 63 : i32
    %307 = arith.addi %306, %c63_i32_141 : i32
    %c0_i64_142 = arith.constant 0 : i64
    %308 = arith.extui %307 : i32 to i64
    %309 = arith.addi %308, %c0_i64_142 : i64
    %c1_i64_143 = arith.constant 1 : i64
    %310 = arith.addi %309, %c1_i64_143 : i64
    %c0_i32_144 = arith.constant 0 : i32
    %311 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_144) : (!llvm.ptr, i32) -> i32
    %312 = arith.extui %311 : i32 to i64
    %c65536_i64_145 = arith.constant 65536 : i64
    %313 = arith.muli %312, %c65536_i64_145 : i64
    %314 = arith.cmpi ult, %310, %313 : i64
    cf.cond_br %314, ^bb58, ^bb59
  ^bb57:  // pred: ^bb54
    %c1_i32_146 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_146) : (i32) -> ()
    cf.br ^bb56
  ^bb58:  // 2 preds: ^bb56, ^bb59
    %315 = llvm.getelementptr %14[%309] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %316 = llvm.load volatile %315 {alignment = 1 : i64} : !llvm.ptr -> i8
    %317 = arith.extui %316 : i8 to i32
    %c0_i64_147 = arith.constant 0 : i64
    %318 = arith.extui %305 : i32 to i64
    %319 = arith.addi %318, %c0_i64_147 : i64
    %c1_i64_148 = arith.constant 1 : i64
    %320 = arith.addi %319, %c1_i64_148 : i64
    %c0_i32_149 = arith.constant 0 : i32
    %321 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_149) : (!llvm.ptr, i32) -> i32
    %322 = arith.extui %321 : i32 to i64
    %c65536_i64_150 = arith.constant 65536 : i64
    %323 = arith.muli %322, %c65536_i64_150 : i64
    %324 = arith.cmpi ult, %320, %323 : i64
    cf.cond_br %324, ^bb60, ^bb61
  ^bb59:  // pred: ^bb56
    %c1_i32_151 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_151) : (i32) -> ()
    cf.br ^bb58
  ^bb60:  // 2 preds: ^bb58, ^bb61
    %325 = llvm.getelementptr %14[%319] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %326 = arith.trunci %317 : i32 to i8
    llvm.store volatile %326, %325 {alignment = 1 : i64} : i8, !llvm.ptr
    %327 = llvm.load %3 : !llvm.ptr -> i32
    %328 = llvm.load %6 : !llvm.ptr -> i64
    %c39_i64 = arith.constant 39 : i64
    %329 = arith.extui %327 : i32 to i64
    %330 = arith.addi %329, %c39_i64 : i64
    %c8_i64_152 = arith.constant 8 : i64
    %331 = arith.addi %330, %c8_i64_152 : i64
    %c0_i32_153 = arith.constant 0 : i32
    %332 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_153) : (!llvm.ptr, i32) -> i32
    %333 = arith.extui %332 : i32 to i64
    %c65536_i64_154 = arith.constant 65536 : i64
    %334 = arith.muli %333, %c65536_i64_154 : i64
    %335 = arith.cmpi ult, %331, %334 : i64
    cf.cond_br %335, ^bb62, ^bb63
  ^bb61:  // pred: ^bb58
    %c1_i32_155 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_155) : (i32) -> ()
    cf.br ^bb60
  ^bb62:  // 2 preds: ^bb60, ^bb63
    %336 = llvm.getelementptr %14[%330] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %328, %336 {alignment = 1 : i64} : i64, !llvm.ptr
    %337 = llvm.load %3 : !llvm.ptr -> i32
    %338 = llvm.load %1 : !llvm.ptr -> i32
    %c43_i64 = arith.constant 43 : i64
    %339 = arith.extui %338 : i32 to i64
    %340 = arith.addi %339, %c43_i64 : i64
    %c8_i64_156 = arith.constant 8 : i64
    %341 = arith.addi %340, %c8_i64_156 : i64
    %c0_i32_157 = arith.constant 0 : i32
    %342 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_157) : (!llvm.ptr, i32) -> i32
    %343 = arith.extui %342 : i32 to i64
    %c65536_i64_158 = arith.constant 65536 : i64
    %344 = arith.muli %343, %c65536_i64_158 : i64
    %345 = arith.cmpi ult, %341, %344 : i64
    cf.cond_br %345, ^bb64, ^bb65
  ^bb63:  // pred: ^bb60
    %c1_i32_159 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_159) : (i32) -> ()
    cf.br ^bb62
  ^bb64:  // 2 preds: ^bb62, ^bb65
    %346 = llvm.getelementptr %14[%340] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %347 = llvm.load volatile %346 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c47_i64 = arith.constant 47 : i64
    %348 = arith.extui %337 : i32 to i64
    %349 = arith.addi %348, %c47_i64 : i64
    %c8_i64_160 = arith.constant 8 : i64
    %350 = arith.addi %349, %c8_i64_160 : i64
    %c0_i32_161 = arith.constant 0 : i32
    %351 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_161) : (!llvm.ptr, i32) -> i32
    %352 = arith.extui %351 : i32 to i64
    %c65536_i64_162 = arith.constant 65536 : i64
    %353 = arith.muli %352, %c65536_i64_162 : i64
    %354 = arith.cmpi ult, %350, %353 : i64
    cf.cond_br %354, ^bb66, ^bb67
  ^bb65:  // pred: ^bb62
    %c1_i32_163 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_163) : (i32) -> ()
    cf.br ^bb64
  ^bb66:  // 2 preds: ^bb64, ^bb67
    %355 = llvm.getelementptr %14[%349] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %347, %355 {alignment = 1 : i64} : i64, !llvm.ptr
    %356 = llvm.load %3 : !llvm.ptr -> i32
    %357 = llvm.load %1 : !llvm.ptr -> i32
    %c59_i64 = arith.constant 59 : i64
    %358 = arith.extui %357 : i32 to i64
    %359 = arith.addi %358, %c59_i64 : i64
    %c4_i64_164 = arith.constant 4 : i64
    %360 = arith.addi %359, %c4_i64_164 : i64
    %c0_i32_165 = arith.constant 0 : i32
    %361 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_165) : (!llvm.ptr, i32) -> i32
    %362 = arith.extui %361 : i32 to i64
    %c65536_i64_166 = arith.constant 65536 : i64
    %363 = arith.muli %362, %c65536_i64_166 : i64
    %364 = arith.cmpi ult, %360, %363 : i64
    cf.cond_br %364, ^bb68, ^bb69
  ^bb67:  // pred: ^bb64
    %c1_i32_167 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_167) : (i32) -> ()
    cf.br ^bb66
  ^bb68:  // 2 preds: ^bb66, ^bb69
    %365 = llvm.getelementptr %14[%359] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %366 = llvm.load volatile %365 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c63_i64 = arith.constant 63 : i64
    %367 = arith.extui %356 : i32 to i64
    %368 = arith.addi %367, %c63_i64 : i64
    %c4_i64_168 = arith.constant 4 : i64
    %369 = arith.addi %368, %c4_i64_168 : i64
    %c0_i32_169 = arith.constant 0 : i32
    %370 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_169) : (!llvm.ptr, i32) -> i32
    %371 = arith.extui %370 : i32 to i64
    %c65536_i64_170 = arith.constant 65536 : i64
    %372 = arith.muli %371, %c65536_i64_170 : i64
    %373 = arith.cmpi ult, %369, %372 : i64
    cf.cond_br %373, ^bb70, ^bb71
  ^bb69:  // pred: ^bb66
    %c1_i32_171 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_171) : (i32) -> ()
    cf.br ^bb68
  ^bb70:  // 2 preds: ^bb68, ^bb71
    %374 = llvm.getelementptr %14[%368] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %366, %374 {alignment = 1 : i64} : i32, !llvm.ptr
    %375 = llvm.load %3 : !llvm.ptr -> i32
    %c104_i32_172 = arith.constant 104 : i32
    %376 = arith.addi %375, %c104_i32_172 : i32
    %c2_i32_173 = arith.constant 2 : i32
    %c0_i32_174 = arith.constant 0 : i32
    %c1_i32_175 = arith.constant 1 : i32
    %c32_i32_176 = arith.constant 32 : i32
    call @f111(%arg0, %376, %c2_i32_173, %c0_i32_174, %c1_i32_175, %c32_i32_176) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %377 = llvm.load %3 : !llvm.ptr -> i32
    %c108_i64 = arith.constant 108 : i64
    %378 = arith.extui %377 : i32 to i64
    %379 = arith.addi %378, %c108_i64 : i64
    %c4_i64_177 = arith.constant 4 : i64
    %380 = arith.addi %379, %c4_i64_177 : i64
    %c0_i32_178 = arith.constant 0 : i32
    %381 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_178) : (!llvm.ptr, i32) -> i32
    %382 = arith.extui %381 : i32 to i64
    %c65536_i64_179 = arith.constant 65536 : i64
    %383 = arith.muli %382, %c65536_i64_179 : i64
    %384 = arith.cmpi ult, %380, %383 : i64
    cf.cond_br %384, ^bb72, ^bb73
  ^bb71:  // pred: ^bb68
    %c1_i32_180 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_180) : (i32) -> ()
    cf.br ^bb70
  ^bb72:  // 2 preds: ^bb70, ^bb73
    %385 = llvm.getelementptr %14[%379] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %386 = llvm.load volatile %385 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %386, %5 : i32, !llvm.ptr
    %387 = llvm.load %3 : !llvm.ptr -> i32
    %c104_i64_181 = arith.constant 104 : i64
    %388 = arith.extui %387 : i32 to i64
    %389 = arith.addi %388, %c104_i64_181 : i64
    %c4_i64_182 = arith.constant 4 : i64
    %390 = arith.addi %389, %c4_i64_182 : i64
    %c0_i32_183 = arith.constant 0 : i32
    %391 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_183) : (!llvm.ptr, i32) -> i32
    %392 = arith.extui %391 : i32 to i64
    %c65536_i64_184 = arith.constant 65536 : i64
    %393 = arith.muli %392, %c65536_i64_184 : i64
    %394 = arith.cmpi ult, %390, %393 : i64
    cf.cond_br %394, ^bb76, ^bb77
  ^bb73:  // pred: ^bb70
    %c1_i32_185 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_185) : (i32) -> ()
    cf.br ^bb72
  ^bb74:  // pred: ^bb83
    %395 = llvm.load %8 : !llvm.ptr -> i32
    %396 = llvm.load %3 : !llvm.ptr -> i32
    %c112_i64 = arith.constant 112 : i64
    %397 = arith.extui %396 : i32 to i64
    %398 = arith.addi %397, %c112_i64 : i64
    %c4_i64_186 = arith.constant 4 : i64
    %399 = arith.addi %398, %c4_i64_186 : i64
    %c0_i32_187 = arith.constant 0 : i32
    %400 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_187) : (!llvm.ptr, i32) -> i32
    %401 = arith.extui %400 : i32 to i64
    %c65536_i64_188 = arith.constant 65536 : i64
    %402 = arith.muli %401, %c65536_i64_188 : i64
    %403 = arith.cmpi ult, %399, %402 : i64
    cf.cond_br %403, ^bb127, ^bb128
  ^bb75:  // pred: ^bb76
    %404 = llvm.load %5 : !llvm.ptr -> i32
    %405 = llvm.load %3 : !llvm.ptr -> i32
    %c112_i64_189 = arith.constant 112 : i64
    %406 = arith.extui %405 : i32 to i64
    %407 = arith.addi %406, %c112_i64_189 : i64
    %c4_i64_190 = arith.constant 4 : i64
    %408 = arith.addi %407, %c4_i64_190 : i64
    %c0_i32_191 = arith.constant 0 : i32
    %409 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_191) : (!llvm.ptr, i32) -> i32
    %410 = arith.extui %409 : i32 to i64
    %c65536_i64_192 = arith.constant 65536 : i64
    %411 = arith.muli %410, %c65536_i64_192 : i64
    %412 = arith.cmpi ult, %408, %411 : i64
    cf.cond_br %412, ^bb125, ^bb126
  ^bb76:  // 2 preds: ^bb72, ^bb77
    %413 = llvm.getelementptr %14[%389] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %414 = llvm.load volatile %413 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_193 = arith.constant 1 : i32
    %415 = arith.cmpi eq, %414, %c1_i32_193 : i32
    %416 = arith.extui %415 : i1 to i32
    %c0_i32_194 = arith.constant 0 : i32
    %417 = arith.cmpi ne, %416, %c0_i32_194 : i32
    cf.cond_br %417, ^bb75, ^bb78
  ^bb77:  // pred: ^bb72
    %c1_i32_195 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_195) : (i32) -> ()
    cf.br ^bb76
  ^bb78:  // pred: ^bb76
    %418 = llvm.load %3 : !llvm.ptr -> i32
    %c112_i64_196 = arith.constant 112 : i64
    %419 = arith.extui %418 : i32 to i64
    %420 = arith.addi %419, %c112_i64_196 : i64
    %c4_i64_197 = arith.constant 4 : i64
    %421 = arith.addi %420, %c4_i64_197 : i64
    %c0_i32_198 = arith.constant 0 : i32
    %422 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_198) : (!llvm.ptr, i32) -> i32
    %423 = arith.extui %422 : i32 to i64
    %c65536_i64_199 = arith.constant 65536 : i64
    %424 = arith.muli %423, %c65536_i64_199 : i64
    %425 = arith.cmpi ult, %421, %424 : i64
    cf.cond_br %425, ^bb79, ^bb80
  ^bb79:  // 2 preds: ^bb78, ^bb80
    %426 = llvm.getelementptr %14[%420] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %427 = llvm.load volatile %426 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %427, %7 : i32, !llvm.ptr
    %428 = llvm.load %3 : !llvm.ptr -> i32
    %c104_i32_200 = arith.constant 104 : i32
    %429 = arith.addi %428, %c104_i32_200 : i32
    %c4_i32_201 = arith.constant 4 : i32
    %c0_i32_202 = arith.constant 0 : i32
    %c4_i32_203 = arith.constant 4 : i32
    %c4_i32_204 = arith.constant 4 : i32
    call @f111(%arg0, %429, %c4_i32_201, %c0_i32_202, %c4_i32_203, %c4_i32_204) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %430 = llvm.load %3 : !llvm.ptr -> i32
    %c108_i64_205 = arith.constant 108 : i64
    %431 = arith.extui %430 : i32 to i64
    %432 = arith.addi %431, %c108_i64_205 : i64
    %c4_i64_206 = arith.constant 4 : i64
    %433 = arith.addi %432, %c4_i64_206 : i64
    %c0_i32_207 = arith.constant 0 : i32
    %434 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_207) : (!llvm.ptr, i32) -> i32
    %435 = arith.extui %434 : i32 to i64
    %c65536_i64_208 = arith.constant 65536 : i64
    %436 = arith.muli %435, %c65536_i64_208 : i64
    %437 = arith.cmpi ult, %433, %436 : i64
    cf.cond_br %437, ^bb81, ^bb82
  ^bb80:  // pred: ^bb78
    %c1_i32_209 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_209) : (i32) -> ()
    cf.br ^bb79
  ^bb81:  // 2 preds: ^bb79, ^bb82
    %438 = llvm.getelementptr %14[%432] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %439 = llvm.load volatile %438 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %439, %8 : i32, !llvm.ptr
    %440 = llvm.load %3 : !llvm.ptr -> i32
    %c104_i64_210 = arith.constant 104 : i64
    %441 = arith.extui %440 : i32 to i64
    %442 = arith.addi %441, %c104_i64_210 : i64
    %c4_i64_211 = arith.constant 4 : i64
    %443 = arith.addi %442, %c4_i64_211 : i64
    %c0_i32_212 = arith.constant 0 : i32
    %444 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_212) : (!llvm.ptr, i32) -> i32
    %445 = arith.extui %444 : i32 to i64
    %c65536_i64_213 = arith.constant 65536 : i64
    %446 = arith.muli %445, %c65536_i64_213 : i64
    %447 = arith.cmpi ult, %443, %446 : i64
    cf.cond_br %447, ^bb83, ^bb84
  ^bb82:  // pred: ^bb79
    %c1_i32_214 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_214) : (i32) -> ()
    cf.br ^bb81
  ^bb83:  // 2 preds: ^bb81, ^bb84
    %448 = llvm.getelementptr %14[%442] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %449 = llvm.load volatile %448 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_215 = arith.constant 1 : i32
    %450 = arith.cmpi eq, %449, %c1_i32_215 : i32
    %451 = arith.extui %450 : i1 to i32
    %c0_i32_216 = arith.constant 0 : i32
    %452 = arith.cmpi ne, %451, %c0_i32_216 : i32
    cf.cond_br %452, ^bb74, ^bb85
  ^bb84:  // pred: ^bb81
    %c1_i32_217 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_217) : (i32) -> ()
    cf.br ^bb83
  ^bb85:  // pred: ^bb83
    %453 = llvm.load %3 : !llvm.ptr -> i32
    %c80_i32 = arith.constant 80 : i32
    %454 = arith.addi %453, %c80_i32 : i32
    %c16_i32 = arith.constant 16 : i32
    %455 = arith.addi %454, %c16_i32 : i32
    llvm.store %455, %9 : i32, !llvm.ptr
    %456 = llvm.load %3 : !llvm.ptr -> i32
    %c112_i64_218 = arith.constant 112 : i64
    %457 = arith.extui %456 : i32 to i64
    %458 = arith.addi %457, %c112_i64_218 : i64
    %c4_i64_219 = arith.constant 4 : i64
    %459 = arith.addi %458, %c4_i64_219 : i64
    %c0_i32_220 = arith.constant 0 : i32
    %460 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_220) : (!llvm.ptr, i32) -> i32
    %461 = arith.extui %460 : i32 to i64
    %c65536_i64_221 = arith.constant 65536 : i64
    %462 = arith.muli %461, %c65536_i64_221 : i64
    %463 = arith.cmpi ult, %459, %462 : i64
    cf.cond_br %463, ^bb86, ^bb87
  ^bb86:  // 2 preds: ^bb85, ^bb87
    %464 = llvm.getelementptr %14[%458] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %465 = llvm.load volatile %464 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_222 = arith.constant 0 : i64
    %466 = arith.extui %455 : i32 to i64
    %467 = arith.addi %466, %c0_i64_222 : i64
    %c4_i64_223 = arith.constant 4 : i64
    %468 = arith.addi %467, %c4_i64_223 : i64
    %c0_i32_224 = arith.constant 0 : i32
    %469 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_224) : (!llvm.ptr, i32) -> i32
    %470 = arith.extui %469 : i32 to i64
    %c65536_i64_225 = arith.constant 65536 : i64
    %471 = arith.muli %470, %c65536_i64_225 : i64
    %472 = arith.cmpi ult, %468, %471 : i64
    cf.cond_br %472, ^bb88, ^bb89
  ^bb87:  // pred: ^bb85
    %c1_i32_226 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_226) : (i32) -> ()
    cf.br ^bb86
  ^bb88:  // 2 preds: ^bb86, ^bb89
    %473 = llvm.getelementptr %14[%467] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %465, %473 {alignment = 1 : i64} : i32, !llvm.ptr
    %474 = llvm.load %3 : !llvm.ptr -> i32
    %c80_i32_227 = arith.constant 80 : i32
    %475 = arith.addi %474, %c80_i32_227 : i32
    %c8_i32 = arith.constant 8 : i32
    %476 = arith.addi %475, %c8_i32 : i32
    llvm.store %476, %4 : i32, !llvm.ptr
    %c0_i32_228 = arith.constant 0 : i32
    %c0_i64_229 = arith.constant 0 : i64
    %477 = arith.extui %476 : i32 to i64
    %478 = arith.addi %477, %c0_i64_229 : i64
    %c4_i64_230 = arith.constant 4 : i64
    %479 = arith.addi %478, %c4_i64_230 : i64
    %c0_i32_231 = arith.constant 0 : i32
    %480 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_231) : (!llvm.ptr, i32) -> i32
    %481 = arith.extui %480 : i32 to i64
    %c65536_i64_232 = arith.constant 65536 : i64
    %482 = arith.muli %481, %c65536_i64_232 : i64
    %483 = arith.cmpi ult, %479, %482 : i64
    cf.cond_br %483, ^bb90, ^bb91
  ^bb89:  // pred: ^bb86
    %c1_i32_233 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_233) : (i32) -> ()
    cf.br ^bb88
  ^bb90:  // 2 preds: ^bb88, ^bb91
    %484 = llvm.getelementptr %14[%478] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_228, %484 {alignment = 1 : i64} : i32, !llvm.ptr
    %485 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_234 = arith.constant 0 : i32
    %c100_i64 = arith.constant 100 : i64
    %486 = arith.extui %485 : i32 to i64
    %487 = arith.addi %486, %c100_i64 : i64
    %c4_i64_235 = arith.constant 4 : i64
    %488 = arith.addi %487, %c4_i64_235 : i64
    %c0_i32_236 = arith.constant 0 : i32
    %489 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_236) : (!llvm.ptr, i32) -> i32
    %490 = arith.extui %489 : i32 to i64
    %c65536_i64_237 = arith.constant 65536 : i64
    %491 = arith.muli %490, %c65536_i64_237 : i64
    %492 = arith.cmpi ult, %488, %491 : i64
    cf.cond_br %492, ^bb92, ^bb93
  ^bb91:  // pred: ^bb88
    %c1_i32_238 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_238) : (i32) -> ()
    cf.br ^bb90
  ^bb92:  // 2 preds: ^bb90, ^bb93
    %493 = llvm.getelementptr %14[%487] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_234, %493 {alignment = 1 : i64} : i32, !llvm.ptr
    %494 = llvm.load %3 : !llvm.ptr -> i32
    %495 = llvm.load %8 : !llvm.ptr -> i32
    %c92_i64 = arith.constant 92 : i64
    %496 = arith.extui %494 : i32 to i64
    %497 = arith.addi %496, %c92_i64 : i64
    %c4_i64_239 = arith.constant 4 : i64
    %498 = arith.addi %497, %c4_i64_239 : i64
    %c0_i32_240 = arith.constant 0 : i32
    %499 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_240) : (!llvm.ptr, i32) -> i32
    %500 = arith.extui %499 : i32 to i64
    %c65536_i64_241 = arith.constant 65536 : i64
    %501 = arith.muli %500, %c65536_i64_241 : i64
    %502 = arith.cmpi ult, %498, %501 : i64
    cf.cond_br %502, ^bb94, ^bb95
  ^bb93:  // pred: ^bb90
    %c1_i32_242 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_242) : (i32) -> ()
    cf.br ^bb92
  ^bb94:  // 2 preds: ^bb92, ^bb95
    %503 = llvm.getelementptr %14[%497] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %495, %503 {alignment = 1 : i64} : i32, !llvm.ptr
    %504 = llvm.load %3 : !llvm.ptr -> i32
    %505 = llvm.load %7 : !llvm.ptr -> i32
    %c84_i64 = arith.constant 84 : i64
    %506 = arith.extui %504 : i32 to i64
    %507 = arith.addi %506, %c84_i64 : i64
    %c4_i64_243 = arith.constant 4 : i64
    %508 = arith.addi %507, %c4_i64_243 : i64
    %c0_i32_244 = arith.constant 0 : i32
    %509 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_244) : (!llvm.ptr, i32) -> i32
    %510 = arith.extui %509 : i32 to i64
    %c65536_i64_245 = arith.constant 65536 : i64
    %511 = arith.muli %510, %c65536_i64_245 : i64
    %512 = arith.cmpi ult, %508, %511 : i64
    cf.cond_br %512, ^bb96, ^bb97
  ^bb95:  // pred: ^bb92
    %c1_i32_246 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_246) : (i32) -> ()
    cf.br ^bb94
  ^bb96:  // 2 preds: ^bb94, ^bb97
    %513 = llvm.getelementptr %14[%507] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %505, %513 {alignment = 1 : i64} : i32, !llvm.ptr
    %514 = llvm.load %3 : !llvm.ptr -> i32
    %515 = llvm.load %5 : !llvm.ptr -> i32
    %c80_i64 = arith.constant 80 : i64
    %516 = arith.extui %514 : i32 to i64
    %517 = arith.addi %516, %c80_i64 : i64
    %c4_i64_247 = arith.constant 4 : i64
    %518 = arith.addi %517, %c4_i64_247 : i64
    %c0_i32_248 = arith.constant 0 : i32
    %519 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_248) : (!llvm.ptr, i32) -> i32
    %520 = arith.extui %519 : i32 to i64
    %c65536_i64_249 = arith.constant 65536 : i64
    %521 = arith.muli %520, %c65536_i64_249 : i64
    %522 = arith.cmpi ult, %518, %521 : i64
    cf.cond_br %522, ^bb98, ^bb99
  ^bb97:  // pred: ^bb94
    %c1_i32_250 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_250) : (i32) -> ()
    cf.br ^bb96
  ^bb98:  // 2 preds: ^bb96, ^bb99
    %523 = llvm.getelementptr %14[%517] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %515, %523 {alignment = 1 : i64} : i32, !llvm.ptr
    %524 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32_251 = arith.constant 4 : i32
    %525 = arith.addi %524, %c4_i32_251 : i32
    %526 = llvm.load %3 : !llvm.ptr -> i32
    %c80_i32_252 = arith.constant 80 : i32
    %527 = arith.addi %526, %c80_i32_252 : i32
    call @f37(%arg0, %525, %527) : (!llvm.ptr, i32, i32) -> ()
    %528 = llvm.load %3 : !llvm.ptr -> i32
    %c104_i32_253 = arith.constant 104 : i32
    %529 = arith.addi %528, %c104_i32_253 : i32
    %c16_i32_254 = arith.constant 16 : i32
    %530 = arith.addi %529, %c16_i32_254 : i32
    %531 = llvm.load %9 : !llvm.ptr -> i32
    %c0_i64_255 = arith.constant 0 : i64
    %532 = arith.extui %531 : i32 to i64
    %533 = arith.addi %532, %c0_i64_255 : i64
    %c8_i64_256 = arith.constant 8 : i64
    %534 = arith.addi %533, %c8_i64_256 : i64
    %c0_i32_257 = arith.constant 0 : i32
    %535 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_257) : (!llvm.ptr, i32) -> i32
    %536 = arith.extui %535 : i32 to i64
    %c65536_i64_258 = arith.constant 65536 : i64
    %537 = arith.muli %536, %c65536_i64_258 : i64
    %538 = arith.cmpi ult, %534, %537 : i64
    cf.cond_br %538, ^bb100, ^bb101
  ^bb99:  // pred: ^bb96
    %c1_i32_259 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_259) : (i32) -> ()
    cf.br ^bb98
  ^bb100:  // 2 preds: ^bb98, ^bb101
    %539 = llvm.getelementptr %14[%533] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %540 = llvm.load volatile %539 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_260 = arith.constant 0 : i64
    %541 = arith.extui %530 : i32 to i64
    %542 = arith.addi %541, %c0_i64_260 : i64
    %c8_i64_261 = arith.constant 8 : i64
    %543 = arith.addi %542, %c8_i64_261 : i64
    %c0_i32_262 = arith.constant 0 : i32
    %544 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_262) : (!llvm.ptr, i32) -> i32
    %545 = arith.extui %544 : i32 to i64
    %c65536_i64_263 = arith.constant 65536 : i64
    %546 = arith.muli %545, %c65536_i64_263 : i64
    %547 = arith.cmpi ult, %543, %546 : i64
    cf.cond_br %547, ^bb102, ^bb103
  ^bb101:  // pred: ^bb98
    %c1_i32_264 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_264) : (i32) -> ()
    cf.br ^bb100
  ^bb102:  // 2 preds: ^bb100, ^bb103
    %548 = llvm.getelementptr %14[%542] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %540, %548 {alignment = 1 : i64} : i64, !llvm.ptr
    %549 = llvm.load %3 : !llvm.ptr -> i32
    %c104_i32_265 = arith.constant 104 : i32
    %550 = arith.addi %549, %c104_i32_265 : i32
    %c8_i32_266 = arith.constant 8 : i32
    %551 = arith.addi %550, %c8_i32_266 : i32
    %552 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_267 = arith.constant 0 : i64
    %553 = arith.extui %552 : i32 to i64
    %554 = arith.addi %553, %c0_i64_267 : i64
    %c8_i64_268 = arith.constant 8 : i64
    %555 = arith.addi %554, %c8_i64_268 : i64
    %c0_i32_269 = arith.constant 0 : i32
    %556 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_269) : (!llvm.ptr, i32) -> i32
    %557 = arith.extui %556 : i32 to i64
    %c65536_i64_270 = arith.constant 65536 : i64
    %558 = arith.muli %557, %c65536_i64_270 : i64
    %559 = arith.cmpi ult, %555, %558 : i64
    cf.cond_br %559, ^bb104, ^bb105
  ^bb103:  // pred: ^bb100
    %c1_i32_271 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_271) : (i32) -> ()
    cf.br ^bb102
  ^bb104:  // 2 preds: ^bb102, ^bb105
    %560 = llvm.getelementptr %14[%554] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %561 = llvm.load volatile %560 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_272 = arith.constant 0 : i64
    %562 = arith.extui %551 : i32 to i64
    %563 = arith.addi %562, %c0_i64_272 : i64
    %c8_i64_273 = arith.constant 8 : i64
    %564 = arith.addi %563, %c8_i64_273 : i64
    %c0_i32_274 = arith.constant 0 : i32
    %565 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_274) : (!llvm.ptr, i32) -> i32
    %566 = arith.extui %565 : i32 to i64
    %c65536_i64_275 = arith.constant 65536 : i64
    %567 = arith.muli %566, %c65536_i64_275 : i64
    %568 = arith.cmpi ult, %564, %567 : i64
    cf.cond_br %568, ^bb106, ^bb107
  ^bb105:  // pred: ^bb102
    %c1_i32_276 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_276) : (i32) -> ()
    cf.br ^bb104
  ^bb106:  // 2 preds: ^bb104, ^bb107
    %569 = llvm.getelementptr %14[%563] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %561, %569 {alignment = 1 : i64} : i64, !llvm.ptr
    %570 = llvm.load %3 : !llvm.ptr -> i32
    %571 = llvm.load %3 : !llvm.ptr -> i32
    %c80_i64_277 = arith.constant 80 : i64
    %572 = arith.extui %571 : i32 to i64
    %573 = arith.addi %572, %c80_i64_277 : i64
    %c8_i64_278 = arith.constant 8 : i64
    %574 = arith.addi %573, %c8_i64_278 : i64
    %c0_i32_279 = arith.constant 0 : i32
    %575 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_279) : (!llvm.ptr, i32) -> i32
    %576 = arith.extui %575 : i32 to i64
    %c65536_i64_280 = arith.constant 65536 : i64
    %577 = arith.muli %576, %c65536_i64_280 : i64
    %578 = arith.cmpi ult, %574, %577 : i64
    cf.cond_br %578, ^bb108, ^bb109
  ^bb107:  // pred: ^bb104
    %c1_i32_281 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_281) : (i32) -> ()
    cf.br ^bb106
  ^bb108:  // 2 preds: ^bb106, ^bb109
    %579 = llvm.getelementptr %14[%573] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %580 = llvm.load volatile %579 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %580, %6 : i64, !llvm.ptr
    %c104_i64_282 = arith.constant 104 : i64
    %581 = arith.extui %570 : i32 to i64
    %582 = arith.addi %581, %c104_i64_282 : i64
    %c8_i64_283 = arith.constant 8 : i64
    %583 = arith.addi %582, %c8_i64_283 : i64
    %c0_i32_284 = arith.constant 0 : i32
    %584 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_284) : (!llvm.ptr, i32) -> i32
    %585 = arith.extui %584 : i32 to i64
    %c65536_i64_285 = arith.constant 65536 : i64
    %586 = arith.muli %585, %c65536_i64_285 : i64
    %587 = arith.cmpi ult, %583, %586 : i64
    cf.cond_br %587, ^bb110, ^bb111
  ^bb109:  // pred: ^bb106
    %c1_i32_286 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_286) : (i32) -> ()
    cf.br ^bb108
  ^bb110:  // 2 preds: ^bb108, ^bb111
    %588 = llvm.getelementptr %14[%582] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %580, %588 {alignment = 1 : i64} : i64, !llvm.ptr
    %589 = llvm.load %3 : !llvm.ptr -> i32
    %c128_i32 = arith.constant 128 : i32
    %590 = arith.addi %589, %c128_i32 : i32
    %c8_i32_287 = arith.constant 8 : i32
    %591 = arith.addi %590, %c8_i32_287 : i32
    %592 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_288 = arith.constant 0 : i64
    %593 = arith.extui %592 : i32 to i64
    %594 = arith.addi %593, %c0_i64_288 : i64
    %c4_i64_289 = arith.constant 4 : i64
    %595 = arith.addi %594, %c4_i64_289 : i64
    %c0_i32_290 = arith.constant 0 : i32
    %596 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_290) : (!llvm.ptr, i32) -> i32
    %597 = arith.extui %596 : i32 to i64
    %c65536_i64_291 = arith.constant 65536 : i64
    %598 = arith.muli %597, %c65536_i64_291 : i64
    %599 = arith.cmpi ult, %595, %598 : i64
    cf.cond_br %599, ^bb112, ^bb113
  ^bb111:  // pred: ^bb108
    %c1_i32_292 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_292) : (i32) -> ()
    cf.br ^bb110
  ^bb112:  // 2 preds: ^bb110, ^bb113
    %600 = llvm.getelementptr %14[%594] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %601 = llvm.load volatile %600 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_293 = arith.constant 0 : i64
    %602 = arith.extui %591 : i32 to i64
    %603 = arith.addi %602, %c0_i64_293 : i64
    %c4_i64_294 = arith.constant 4 : i64
    %604 = arith.addi %603, %c4_i64_294 : i64
    %c0_i32_295 = arith.constant 0 : i32
    %605 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_295) : (!llvm.ptr, i32) -> i32
    %606 = arith.extui %605 : i32 to i64
    %c65536_i64_296 = arith.constant 65536 : i64
    %607 = arith.muli %606, %c65536_i64_296 : i64
    %608 = arith.cmpi ult, %604, %607 : i64
    cf.cond_br %608, ^bb114, ^bb115
  ^bb113:  // pred: ^bb110
    %c1_i32_297 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_297) : (i32) -> ()
    cf.br ^bb112
  ^bb114:  // 2 preds: ^bb112, ^bb115
    %609 = llvm.getelementptr %14[%603] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %601, %609 {alignment = 1 : i64} : i32, !llvm.ptr
    %610 = llvm.load %3 : !llvm.ptr -> i32
    %611 = llvm.load %6 : !llvm.ptr -> i64
    %c128_i64 = arith.constant 128 : i64
    %612 = arith.extui %610 : i32 to i64
    %613 = arith.addi %612, %c128_i64 : i64
    %c8_i64_298 = arith.constant 8 : i64
    %614 = arith.addi %613, %c8_i64_298 : i64
    %c0_i32_299 = arith.constant 0 : i32
    %615 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_299) : (!llvm.ptr, i32) -> i32
    %616 = arith.extui %615 : i32 to i64
    %c65536_i64_300 = arith.constant 65536 : i64
    %617 = arith.muli %616, %c65536_i64_300 : i64
    %618 = arith.cmpi ult, %614, %617 : i64
    cf.cond_br %618, ^bb116, ^bb117
  ^bb115:  // pred: ^bb112
    %c1_i32_301 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_301) : (i32) -> ()
    cf.br ^bb114
  ^bb116:  // 2 preds: ^bb114, ^bb117
    %619 = llvm.getelementptr %14[%613] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %611, %619 {alignment = 1 : i64} : i64, !llvm.ptr
    %620 = llvm.load %3 : !llvm.ptr -> i32
    %c116_i32 = arith.constant 116 : i32
    %621 = arith.addi %620, %c116_i32 : i32
    llvm.store %621, %4 : i32, !llvm.ptr
    call @f89(%arg0, %621) : (!llvm.ptr, i32) -> ()
    %622 = llvm.load %4 : !llvm.ptr -> i32
    call @f90(%arg0, %622) : (!llvm.ptr, i32) -> ()
    %623 = llvm.load %3 : !llvm.ptr -> i32
    %c68_i32 = arith.constant 68 : i32
    %624 = arith.addi %623, %c68_i32 : i32
    %625 = llvm.load %3 : !llvm.ptr -> i32
    %c128_i32_302 = arith.constant 128 : i32
    %626 = arith.addi %625, %c128_i32_302 : i32
    call @f86(%arg0, %624, %626) : (!llvm.ptr, i32, i32) -> ()
    %627 = llvm.load %3 : !llvm.ptr -> i32
    %c72_i64 = arith.constant 72 : i64
    %628 = arith.extui %627 : i32 to i64
    %629 = arith.addi %628, %c72_i64 : i64
    %c4_i64_303 = arith.constant 4 : i64
    %630 = arith.addi %629, %c4_i64_303 : i64
    %c0_i32_304 = arith.constant 0 : i32
    %631 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_304) : (!llvm.ptr, i32) -> i32
    %632 = arith.extui %631 : i32 to i64
    %c65536_i64_305 = arith.constant 65536 : i64
    %633 = arith.muli %632, %c65536_i64_305 : i64
    %634 = arith.cmpi ult, %630, %633 : i64
    cf.cond_br %634, ^bb118, ^bb119
  ^bb117:  // pred: ^bb114
    %c1_i32_306 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_306) : (i32) -> ()
    cf.br ^bb116
  ^bb118:  // 2 preds: ^bb116, ^bb119
    %635 = llvm.getelementptr %14[%629] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %636 = llvm.load volatile %635 {alignment = 1 : i64} : !llvm.ptr -> i32
    %637 = llvm.load %3 : !llvm.ptr -> i32
    %c76_i64 = arith.constant 76 : i64
    %638 = arith.extui %637 : i32 to i64
    %639 = arith.addi %638, %c76_i64 : i64
    %c4_i64_307 = arith.constant 4 : i64
    %640 = arith.addi %639, %c4_i64_307 : i64
    %c0_i32_308 = arith.constant 0 : i32
    %641 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_308) : (!llvm.ptr, i32) -> i32
    %642 = arith.extui %641 : i32 to i64
    %c65536_i64_309 = arith.constant 65536 : i64
    %643 = arith.muli %642, %c65536_i64_309 : i64
    %644 = arith.cmpi ult, %640, %643 : i64
    cf.cond_br %644, ^bb120, ^bb121
  ^bb119:  // pred: ^bb116
    %c1_i32_310 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_310) : (i32) -> ()
    cf.br ^bb118
  ^bb120:  // 2 preds: ^bb118, ^bb121
    %645 = llvm.getelementptr %14[%639] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %646 = llvm.load volatile %645 {alignment = 1 : i64} : !llvm.ptr -> i32
    %647 = llvm.load %1 : !llvm.ptr -> i32
    %648 = llvm.load %2 : !llvm.ptr -> i32
    %649 = call @f109(%arg0, %636, %646, %647, %648) : (!llvm.ptr, i32, i32, i32, i32) -> i32
    llvm.store %649, %1 : i32, !llvm.ptr
    %650 = llvm.load %3 : !llvm.ptr -> i32
    %c68_i32_311 = arith.constant 68 : i32
    %651 = arith.addi %650, %c68_i32_311 : i32
    call @f112(%arg0, %651) : (!llvm.ptr, i32) -> ()
    %652 = llvm.load %3 : !llvm.ptr -> i32
    %c68_i32_312 = arith.constant 68 : i32
    %653 = arith.addi %652, %c68_i32_312 : i32
    call @f113(%arg0, %653) : (!llvm.ptr, i32) -> ()
    %c-2147483645_i32 = arith.constant -2147483645 : i32
    llvm.store %c-2147483645_i32, %4 : i32, !llvm.ptr
    %654 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_313 = arith.constant 0 : i32
    %655 = arith.cmpi eq, %654, %c0_i32_313 : i32
    %656 = arith.extui %655 : i1 to i32
    %c0_i32_314 = arith.constant 0 : i32
    %657 = arith.cmpi ne, %656, %c0_i32_314 : i32
    cf.cond_br %657, ^bb6, ^bb122
  ^bb121:  // pred: ^bb118
    %c1_i32_315 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_315) : (i32) -> ()
    cf.br ^bb120
  ^bb122:  // pred: ^bb120
    %658 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_316 = arith.constant 1 : i32
    %659 = arith.addi %658, %c1_i32_316 : i32
    %660 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32_317 = arith.constant 4 : i32
    %661 = arith.addi %660, %c4_i32_317 : i32
    %c64_i32_318 = arith.constant 64 : i32
    %662 = call @f161(%arg0, %659, %661, %c64_i32_318) : (!llvm.ptr, i32, i32, i32) -> i32
    %663 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_319 = arith.constant 0 : i32
    %c0_i64_320 = arith.constant 0 : i64
    %664 = arith.extui %663 : i32 to i64
    %665 = arith.addi %664, %c0_i64_320 : i64
    %c1_i64_321 = arith.constant 1 : i64
    %666 = arith.addi %665, %c1_i64_321 : i64
    %c0_i32_322 = arith.constant 0 : i32
    %667 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_322) : (!llvm.ptr, i32) -> i32
    %668 = arith.extui %667 : i32 to i64
    %c65536_i64_323 = arith.constant 65536 : i64
    %669 = arith.muli %668, %c65536_i64_323 : i64
    %670 = arith.cmpi ult, %666, %669 : i64
    cf.cond_br %670, ^bb123, ^bb124
  ^bb123:  // 2 preds: ^bb122, ^bb124
    %671 = llvm.getelementptr %14[%665] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %672 = arith.trunci %c0_i32_319 : i32 to i8
    llvm.store volatile %672, %671 {alignment = 1 : i64} : i8, !llvm.ptr
    cf.br ^bb5
  ^bb124:  // pred: ^bb122
    %c1_i32_324 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_324) : (i32) -> ()
    cf.br ^bb123
  ^bb125:  // 2 preds: ^bb75, ^bb126
    %673 = llvm.getelementptr %14[%407] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %674 = llvm.load volatile %673 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f143(%arg0, %404, %674) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb126:  // pred: ^bb75
    %c1_i32_325 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_325) : (i32) -> ()
    cf.br ^bb125
  ^bb127:  // 2 preds: ^bb74, ^bb128
    %675 = llvm.getelementptr %14[%398] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %676 = llvm.load volatile %675 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f143(%arg0, %395, %676) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb128:  // pred: ^bb74
    %c1_i32_326 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_326) : (i32) -> ()
    cf.br ^bb127
  ^bb129:  // 2 preds: ^bb6, ^bb130
    %677 = llvm.getelementptr %14[%34] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %678 = arith.trunci %c1_i32_15 : i32 to i8
    llvm.store volatile %678, %677 {alignment = 1 : i64} : i8, !llvm.ptr
    %679 = llvm.load %0 : !llvm.ptr -> i32
    %680 = llvm.load %4 : !llvm.ptr -> i32
    %c4_i64_327 = arith.constant 4 : i64
    %681 = arith.extui %679 : i32 to i64
    %682 = arith.addi %681, %c4_i64_327 : i64
    %c4_i64_328 = arith.constant 4 : i64
    %683 = arith.addi %682, %c4_i64_328 : i64
    %c0_i32_329 = arith.constant 0 : i32
    %684 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_329) : (!llvm.ptr, i32) -> i32
    %685 = arith.extui %684 : i32 to i64
    %c65536_i64_330 = arith.constant 65536 : i64
    %686 = arith.muli %685, %c65536_i64_330 : i64
    %687 = arith.cmpi ult, %683, %686 : i64
    cf.cond_br %687, ^bb131, ^bb132
  ^bb130:  // pred: ^bb6
    %c1_i32_331 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_331) : (i32) -> ()
    cf.br ^bb129
  ^bb131:  // 2 preds: ^bb129, ^bb132
    %688 = llvm.getelementptr %14[%682] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %680, %688 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb5
  ^bb132:  // pred: ^bb129
    %c1_i32_332 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_332) : (i32) -> ()
    cf.br ^bb131
  }
  func.func @f26(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %4 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %9 = arith.subi %8, %c16_i32 : i32
    llvm.store %9, %2 : i32, !llvm.ptr
    llvm.store %9, %4 : i32, !llvm.ptr
    %10 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %11 = arith.addi %10, %c4_i32 : i32
    %12 = llvm.load %1 : !llvm.ptr -> i32
    call @f38(%arg0, %11, %12) : (!llvm.ptr, i32, i32) -> ()
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %14 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %15 = arith.extui %14 : i32 to i64
    %16 = arith.addi %15, %c8_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %17 = arith.addi %16, %c4_i64 : i64
    %c0_i32_2 = arith.constant 0 : i32
    %18 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2) : (!llvm.ptr, i32) -> i32
    %19 = arith.extui %18 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %20 = arith.muli %19, %c65536_i64 : i64
    %21 = arith.cmpi ult, %17, %20 : i64
    cf.cond_br %21, ^bb3, ^bb4
  ^bb2:  // pred: ^bb5
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %22 = llvm.getelementptr %7[%16] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %23 = llvm.load volatile %22 {alignment = 1 : i64} : !llvm.ptr -> i32
    %24 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %25 = arith.extui %24 : i32 to i64
    %26 = arith.addi %25, %c12_i64 : i64
    %c4_i64_3 = arith.constant 4 : i64
    %27 = arith.addi %26, %c4_i64_3 : i64
    %c0_i32_4 = arith.constant 0 : i32
    %28 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_4) : (!llvm.ptr, i32) -> i32
    %29 = arith.extui %28 : i32 to i64
    %c65536_i64_5 = arith.constant 65536 : i64
    %30 = arith.muli %29, %c65536_i64_5 : i64
    %31 = arith.cmpi ult, %27, %30 : i64
    cf.cond_br %31, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c1_i32_6 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_6) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %32 = llvm.getelementptr %7[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %33 = llvm.load volatile %32 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1049608_i32 = arith.constant 1049608 : i32
    %c17_i32 = arith.constant 17 : i32
    call @f95(%arg0, %13, %23, %33, %c1049608_i32, %c17_i32) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %34 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i32_7 = arith.constant 4 : i32
    %35 = arith.addi %34, %c4_i32_7 : i32
    call @f112(%arg0, %35) : (!llvm.ptr, i32) -> ()
    %36 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i32_8 = arith.constant 4 : i32
    %37 = arith.addi %36, %c4_i32_8 : i32
    call @f113(%arg0, %37) : (!llvm.ptr, i32) -> ()
    %38 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_9 = arith.constant 16 : i32
    %39 = arith.addi %38, %c16_i32_9 : i32
    llvm.store %39, %4 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb6:  // pred: ^bb3
    %c1_i32_10 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_10) : (i32) -> ()
    cf.br ^bb5
  }
  func.func @f27(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %7 : i64, !llvm.ptr
    %8 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %13 = llvm.load %9 : !llvm.ptr -> i32
    %c96_i32 = arith.constant 96 : i32
    %14 = arith.subi %13, %c96_i32 : i32
    llvm.store %14, %2 : i32, !llvm.ptr
    llvm.store %14, %9 : i32, !llvm.ptr
    %c24_i32 = arith.constant 24 : i32
    llvm.store %c24_i32, %3 : i32, !llvm.ptr
    %15 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_7 = arith.constant 24 : i32
    %16 = arith.addi %15, %c24_i32_7 : i32
    llvm.store %16, %4 : i32, !llvm.ptr
    %17 = llvm.load %1 : !llvm.ptr -> i32
    %c56_i32 = arith.constant 56 : i32
    %18 = arith.addi %17, %c56_i32 : i32
    %c0_i64_8 = arith.constant 0 : i64
    %19 = arith.extui %18 : i32 to i64
    %20 = arith.addi %19, %c0_i64_8 : i64
    %c8_i64 = arith.constant 8 : i64
    %21 = arith.addi %20, %c8_i64 : i64
    %c0_i32_9 = arith.constant 0 : i32
    %22 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_9) : (!llvm.ptr, i32) -> i32
    %23 = arith.extui %22 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %24 = arith.muli %23, %c65536_i64 : i64
    %25 = arith.cmpi ult, %21, %24 : i64
    cf.cond_br %25, ^bb3, ^bb4
  ^bb2:  // pred: ^bb76
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %26 = llvm.getelementptr %12[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %27 = llvm.load volatile %26 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_10 = arith.constant 0 : i64
    %28 = arith.extui %16 : i32 to i64
    %29 = arith.addi %28, %c0_i64_10 : i64
    %c8_i64_11 = arith.constant 8 : i64
    %30 = arith.addi %29, %c8_i64_11 : i64
    %c0_i32_12 = arith.constant 0 : i32
    %31 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_12) : (!llvm.ptr, i32) -> i32
    %32 = arith.extui %31 : i32 to i64
    %c65536_i64_13 = arith.constant 65536 : i64
    %33 = arith.muli %32, %c65536_i64_13 : i64
    %34 = arith.cmpi ult, %30, %33 : i64
    cf.cond_br %34, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c1_i32_14 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_14) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %35 = llvm.getelementptr %12[%29] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %27, %35 {alignment = 1 : i64} : i64, !llvm.ptr
    %36 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %37 = arith.addi %36, %c16_i32 : i32
    llvm.store %37, %5 : i32, !llvm.ptr
    %38 = llvm.load %1 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %39 = arith.addi %38, %c48_i32 : i32
    %c0_i64_15 = arith.constant 0 : i64
    %40 = arith.extui %39 : i32 to i64
    %41 = arith.addi %40, %c0_i64_15 : i64
    %c8_i64_16 = arith.constant 8 : i64
    %42 = arith.addi %41, %c8_i64_16 : i64
    %c0_i32_17 = arith.constant 0 : i32
    %43 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_17) : (!llvm.ptr, i32) -> i32
    %44 = arith.extui %43 : i32 to i64
    %c65536_i64_18 = arith.constant 65536 : i64
    %45 = arith.muli %44, %c65536_i64_18 : i64
    %46 = arith.cmpi ult, %42, %45 : i64
    cf.cond_br %46, ^bb7, ^bb8
  ^bb6:  // pred: ^bb3
    %c1_i32_19 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_19) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %47 = llvm.getelementptr %12[%41] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %48 = llvm.load volatile %47 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_20 = arith.constant 0 : i64
    %49 = arith.extui %37 : i32 to i64
    %50 = arith.addi %49, %c0_i64_20 : i64
    %c8_i64_21 = arith.constant 8 : i64
    %51 = arith.addi %50, %c8_i64_21 : i64
    %c0_i32_22 = arith.constant 0 : i32
    %52 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_22) : (!llvm.ptr, i32) -> i32
    %53 = arith.extui %52 : i32 to i64
    %c65536_i64_23 = arith.constant 65536 : i64
    %54 = arith.muli %53, %c65536_i64_23 : i64
    %55 = arith.cmpi ult, %51, %54 : i64
    cf.cond_br %55, ^bb9, ^bb10
  ^bb8:  // pred: ^bb5
    %c1_i32_24 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_24) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %56 = llvm.getelementptr %12[%50] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %48, %56 {alignment = 1 : i64} : i64, !llvm.ptr
    %57 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %58 = arith.addi %57, %c8_i32 : i32
    llvm.store %58, %6 : i32, !llvm.ptr
    %59 = llvm.load %1 : !llvm.ptr -> i32
    %c40_i32 = arith.constant 40 : i32
    %60 = arith.addi %59, %c40_i32 : i32
    %c0_i64_25 = arith.constant 0 : i64
    %61 = arith.extui %60 : i32 to i64
    %62 = arith.addi %61, %c0_i64_25 : i64
    %c8_i64_26 = arith.constant 8 : i64
    %63 = arith.addi %62, %c8_i64_26 : i64
    %c0_i32_27 = arith.constant 0 : i32
    %64 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_27) : (!llvm.ptr, i32) -> i32
    %65 = arith.extui %64 : i32 to i64
    %c65536_i64_28 = arith.constant 65536 : i64
    %66 = arith.muli %65, %c65536_i64_28 : i64
    %67 = arith.cmpi ult, %63, %66 : i64
    cf.cond_br %67, ^bb11, ^bb12
  ^bb10:  // pred: ^bb7
    %c1_i32_29 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_29) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %68 = llvm.getelementptr %12[%62] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %69 = llvm.load volatile %68 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_30 = arith.constant 0 : i64
    %70 = arith.extui %58 : i32 to i64
    %71 = arith.addi %70, %c0_i64_30 : i64
    %c8_i64_31 = arith.constant 8 : i64
    %72 = arith.addi %71, %c8_i64_31 : i64
    %c0_i32_32 = arith.constant 0 : i32
    %73 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_32) : (!llvm.ptr, i32) -> i32
    %74 = arith.extui %73 : i32 to i64
    %c65536_i64_33 = arith.constant 65536 : i64
    %75 = arith.muli %74, %c65536_i64_33 : i64
    %76 = arith.cmpi ult, %72, %75 : i64
    cf.cond_br %76, ^bb13, ^bb14
  ^bb12:  // pred: ^bb9
    %c1_i32_34 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_34) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %77 = llvm.getelementptr %12[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %69, %77 {alignment = 1 : i64} : i64, !llvm.ptr
    %78 = llvm.load %2 : !llvm.ptr -> i32
    %79 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i64 = arith.constant 32 : i64
    %80 = arith.extui %79 : i32 to i64
    %81 = arith.addi %80, %c32_i64 : i64
    %c8_i64_35 = arith.constant 8 : i64
    %82 = arith.addi %81, %c8_i64_35 : i64
    %c0_i32_36 = arith.constant 0 : i32
    %83 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_36) : (!llvm.ptr, i32) -> i32
    %84 = arith.extui %83 : i32 to i64
    %c65536_i64_37 = arith.constant 65536 : i64
    %85 = arith.muli %84, %c65536_i64_37 : i64
    %86 = arith.cmpi ult, %82, %85 : i64
    cf.cond_br %86, ^bb15, ^bb16
  ^bb14:  // pred: ^bb11
    %c1_i32_38 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_38) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // 2 preds: ^bb13, ^bb16
    %87 = llvm.getelementptr %12[%81] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %88 = llvm.load volatile %87 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_39 = arith.constant 0 : i64
    %89 = arith.extui %78 : i32 to i64
    %90 = arith.addi %89, %c0_i64_39 : i64
    %c8_i64_40 = arith.constant 8 : i64
    %91 = arith.addi %90, %c8_i64_40 : i64
    %c0_i32_41 = arith.constant 0 : i32
    %92 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_41) : (!llvm.ptr, i32) -> i32
    %93 = arith.extui %92 : i32 to i64
    %c65536_i64_42 = arith.constant 65536 : i64
    %94 = arith.muli %93, %c65536_i64_42 : i64
    %95 = arith.cmpi ult, %91, %94 : i64
    cf.cond_br %95, ^bb17, ^bb18
  ^bb16:  // pred: ^bb13
    %c1_i32_43 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_43) : (i32) -> ()
    cf.br ^bb15
  ^bb17:  // 2 preds: ^bb15, ^bb18
    %96 = llvm.getelementptr %12[%90] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %88, %96 {alignment = 1 : i64} : i64, !llvm.ptr
    %97 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_44 = arith.constant 0 : i32
    %c0_i32_45 = arith.constant 0 : i32
    call @f85(%arg0, %97, %c0_i32_44, %c0_i32_45) : (!llvm.ptr, i32, i32, i32) -> ()
    %98 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %99 = arith.addi %98, %c64_i32 : i32
    %c8_i32_46 = arith.constant 8 : i32
    %100 = arith.addi %99, %c8_i32_46 : i32
    %c0_i64_47 = arith.constant 0 : i64
    %c0_i64_48 = arith.constant 0 : i64
    %101 = arith.extui %100 : i32 to i64
    %102 = arith.addi %101, %c0_i64_48 : i64
    %c8_i64_49 = arith.constant 8 : i64
    %103 = arith.addi %102, %c8_i64_49 : i64
    %c0_i32_50 = arith.constant 0 : i32
    %104 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_50) : (!llvm.ptr, i32) -> i32
    %105 = arith.extui %104 : i32 to i64
    %c65536_i64_51 = arith.constant 65536 : i64
    %106 = arith.muli %105, %c65536_i64_51 : i64
    %107 = arith.cmpi ult, %103, %106 : i64
    cf.cond_br %107, ^bb19, ^bb20
  ^bb18:  // pred: ^bb15
    %c1_i32_52 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_52) : (i32) -> ()
    cf.br ^bb17
  ^bb19:  // 2 preds: ^bb17, ^bb20
    %108 = llvm.getelementptr %12[%102] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_47, %108 {alignment = 1 : i64} : i64, !llvm.ptr
    %109 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_53 = arith.constant 64 : i32
    %110 = arith.addi %109, %c64_i32_53 : i32
    %c16_i32_54 = arith.constant 16 : i32
    %111 = arith.addi %110, %c16_i32_54 : i32
    %c0_i64_55 = arith.constant 0 : i64
    %c0_i64_56 = arith.constant 0 : i64
    %112 = arith.extui %111 : i32 to i64
    %113 = arith.addi %112, %c0_i64_56 : i64
    %c8_i64_57 = arith.constant 8 : i64
    %114 = arith.addi %113, %c8_i64_57 : i64
    %c0_i32_58 = arith.constant 0 : i32
    %115 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_58) : (!llvm.ptr, i32) -> i32
    %116 = arith.extui %115 : i32 to i64
    %c65536_i64_59 = arith.constant 65536 : i64
    %117 = arith.muli %116, %c65536_i64_59 : i64
    %118 = arith.cmpi ult, %114, %117 : i64
    cf.cond_br %118, ^bb21, ^bb22
  ^bb20:  // pred: ^bb17
    %c1_i32_60 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_60) : (i32) -> ()
    cf.br ^bb19
  ^bb21:  // 2 preds: ^bb19, ^bb22
    %119 = llvm.getelementptr %12[%113] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_55, %119 {alignment = 1 : i64} : i64, !llvm.ptr
    %120 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_61 = arith.constant 64 : i32
    %121 = arith.addi %120, %c64_i32_61 : i32
    %c24_i32_62 = arith.constant 24 : i32
    %122 = arith.addi %121, %c24_i32_62 : i32
    %c0_i64_63 = arith.constant 0 : i64
    %c0_i64_64 = arith.constant 0 : i64
    %123 = arith.extui %122 : i32 to i64
    %124 = arith.addi %123, %c0_i64_64 : i64
    %c8_i64_65 = arith.constant 8 : i64
    %125 = arith.addi %124, %c8_i64_65 : i64
    %c0_i32_66 = arith.constant 0 : i32
    %126 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_66) : (!llvm.ptr, i32) -> i32
    %127 = arith.extui %126 : i32 to i64
    %c65536_i64_67 = arith.constant 65536 : i64
    %128 = arith.muli %127, %c65536_i64_67 : i64
    %129 = arith.cmpi ult, %125, %128 : i64
    cf.cond_br %129, ^bb23, ^bb24
  ^bb22:  // pred: ^bb19
    %c1_i32_68 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_68) : (i32) -> ()
    cf.br ^bb21
  ^bb23:  // 2 preds: ^bb21, ^bb24
    %130 = llvm.getelementptr %12[%124] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_63, %130 {alignment = 1 : i64} : i64, !llvm.ptr
    %131 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %132 = arith.addi %131, %c32_i32 : i32
    %c24_i32_69 = arith.constant 24 : i32
    %133 = arith.addi %132, %c24_i32_69 : i32
    %134 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_70 = arith.constant 0 : i64
    %135 = arith.extui %134 : i32 to i64
    %136 = arith.addi %135, %c0_i64_70 : i64
    %c8_i64_71 = arith.constant 8 : i64
    %137 = arith.addi %136, %c8_i64_71 : i64
    %c0_i32_72 = arith.constant 0 : i32
    %138 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_72) : (!llvm.ptr, i32) -> i32
    %139 = arith.extui %138 : i32 to i64
    %c65536_i64_73 = arith.constant 65536 : i64
    %140 = arith.muli %139, %c65536_i64_73 : i64
    %141 = arith.cmpi ult, %137, %140 : i64
    cf.cond_br %141, ^bb25, ^bb26
  ^bb24:  // pred: ^bb21
    %c1_i32_74 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_74) : (i32) -> ()
    cf.br ^bb23
  ^bb25:  // 2 preds: ^bb23, ^bb26
    %142 = llvm.getelementptr %12[%136] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %143 = llvm.load volatile %142 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_75 = arith.constant 0 : i64
    %144 = arith.extui %133 : i32 to i64
    %145 = arith.addi %144, %c0_i64_75 : i64
    %c8_i64_76 = arith.constant 8 : i64
    %146 = arith.addi %145, %c8_i64_76 : i64
    %c0_i32_77 = arith.constant 0 : i32
    %147 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_77) : (!llvm.ptr, i32) -> i32
    %148 = arith.extui %147 : i32 to i64
    %c65536_i64_78 = arith.constant 65536 : i64
    %149 = arith.muli %148, %c65536_i64_78 : i64
    %150 = arith.cmpi ult, %146, %149 : i64
    cf.cond_br %150, ^bb27, ^bb28
  ^bb26:  // pred: ^bb23
    %c1_i32_79 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_79) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // 2 preds: ^bb25, ^bb28
    %151 = llvm.getelementptr %12[%145] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %143, %151 {alignment = 1 : i64} : i64, !llvm.ptr
    %152 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32_80 = arith.constant 32 : i32
    %153 = arith.addi %152, %c32_i32_80 : i32
    %c16_i32_81 = arith.constant 16 : i32
    %154 = arith.addi %153, %c16_i32_81 : i32
    %155 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64_82 = arith.constant 0 : i64
    %156 = arith.extui %155 : i32 to i64
    %157 = arith.addi %156, %c0_i64_82 : i64
    %c8_i64_83 = arith.constant 8 : i64
    %158 = arith.addi %157, %c8_i64_83 : i64
    %c0_i32_84 = arith.constant 0 : i32
    %159 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_84) : (!llvm.ptr, i32) -> i32
    %160 = arith.extui %159 : i32 to i64
    %c65536_i64_85 = arith.constant 65536 : i64
    %161 = arith.muli %160, %c65536_i64_85 : i64
    %162 = arith.cmpi ult, %158, %161 : i64
    cf.cond_br %162, ^bb29, ^bb30
  ^bb28:  // pred: ^bb25
    %c1_i32_86 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_86) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // 2 preds: ^bb27, ^bb30
    %163 = llvm.getelementptr %12[%157] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %164 = llvm.load volatile %163 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_87 = arith.constant 0 : i64
    %165 = arith.extui %154 : i32 to i64
    %166 = arith.addi %165, %c0_i64_87 : i64
    %c8_i64_88 = arith.constant 8 : i64
    %167 = arith.addi %166, %c8_i64_88 : i64
    %c0_i32_89 = arith.constant 0 : i32
    %168 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_89) : (!llvm.ptr, i32) -> i32
    %169 = arith.extui %168 : i32 to i64
    %c65536_i64_90 = arith.constant 65536 : i64
    %170 = arith.muli %169, %c65536_i64_90 : i64
    %171 = arith.cmpi ult, %167, %170 : i64
    cf.cond_br %171, ^bb31, ^bb32
  ^bb30:  // pred: ^bb27
    %c1_i32_91 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_91) : (i32) -> ()
    cf.br ^bb29
  ^bb31:  // 2 preds: ^bb29, ^bb32
    %172 = llvm.getelementptr %12[%166] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %164, %172 {alignment = 1 : i64} : i64, !llvm.ptr
    %173 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32_92 = arith.constant 32 : i32
    %174 = arith.addi %173, %c32_i32_92 : i32
    %c8_i32_93 = arith.constant 8 : i32
    %175 = arith.addi %174, %c8_i32_93 : i32
    %176 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_94 = arith.constant 0 : i64
    %177 = arith.extui %176 : i32 to i64
    %178 = arith.addi %177, %c0_i64_94 : i64
    %c8_i64_95 = arith.constant 8 : i64
    %179 = arith.addi %178, %c8_i64_95 : i64
    %c0_i32_96 = arith.constant 0 : i32
    %180 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_96) : (!llvm.ptr, i32) -> i32
    %181 = arith.extui %180 : i32 to i64
    %c65536_i64_97 = arith.constant 65536 : i64
    %182 = arith.muli %181, %c65536_i64_97 : i64
    %183 = arith.cmpi ult, %179, %182 : i64
    cf.cond_br %183, ^bb33, ^bb34
  ^bb32:  // pred: ^bb29
    %c1_i32_98 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_98) : (i32) -> ()
    cf.br ^bb31
  ^bb33:  // 2 preds: ^bb31, ^bb34
    %184 = llvm.getelementptr %12[%178] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %185 = llvm.load volatile %184 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_99 = arith.constant 0 : i64
    %186 = arith.extui %175 : i32 to i64
    %187 = arith.addi %186, %c0_i64_99 : i64
    %c8_i64_100 = arith.constant 8 : i64
    %188 = arith.addi %187, %c8_i64_100 : i64
    %c0_i32_101 = arith.constant 0 : i32
    %189 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_101) : (!llvm.ptr, i32) -> i32
    %190 = arith.extui %189 : i32 to i64
    %c65536_i64_102 = arith.constant 65536 : i64
    %191 = arith.muli %190, %c65536_i64_102 : i64
    %192 = arith.cmpi ult, %188, %191 : i64
    cf.cond_br %192, ^bb35, ^bb36
  ^bb34:  // pred: ^bb31
    %c1_i32_103 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_103) : (i32) -> ()
    cf.br ^bb33
  ^bb35:  // 2 preds: ^bb33, ^bb36
    %193 = llvm.getelementptr %12[%187] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %185, %193 {alignment = 1 : i64} : i64, !llvm.ptr
    %194 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_104 = arith.constant 0 : i64
    %c64_i64 = arith.constant 64 : i64
    %195 = arith.extui %194 : i32 to i64
    %196 = arith.addi %195, %c64_i64 : i64
    %c8_i64_105 = arith.constant 8 : i64
    %197 = arith.addi %196, %c8_i64_105 : i64
    %c0_i32_106 = arith.constant 0 : i32
    %198 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_106) : (!llvm.ptr, i32) -> i32
    %199 = arith.extui %198 : i32 to i64
    %c65536_i64_107 = arith.constant 65536 : i64
    %200 = arith.muli %199, %c65536_i64_107 : i64
    %201 = arith.cmpi ult, %197, %200 : i64
    cf.cond_br %201, ^bb37, ^bb38
  ^bb36:  // pred: ^bb33
    %c1_i32_108 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_108) : (i32) -> ()
    cf.br ^bb35
  ^bb37:  // 2 preds: ^bb35, ^bb38
    %202 = llvm.getelementptr %12[%196] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_104, %202 {alignment = 1 : i64} : i64, !llvm.ptr
    %203 = llvm.load %2 : !llvm.ptr -> i32
    %204 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_109 = arith.constant 0 : i64
    %205 = arith.extui %204 : i32 to i64
    %206 = arith.addi %205, %c0_i64_109 : i64
    %c8_i64_110 = arith.constant 8 : i64
    %207 = arith.addi %206, %c8_i64_110 : i64
    %c0_i32_111 = arith.constant 0 : i32
    %208 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_111) : (!llvm.ptr, i32) -> i32
    %209 = arith.extui %208 : i32 to i64
    %c65536_i64_112 = arith.constant 65536 : i64
    %210 = arith.muli %209, %c65536_i64_112 : i64
    %211 = arith.cmpi ult, %207, %210 : i64
    cf.cond_br %211, ^bb39, ^bb40
  ^bb38:  // pred: ^bb35
    %c1_i32_113 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_113) : (i32) -> ()
    cf.br ^bb37
  ^bb39:  // 2 preds: ^bb37, ^bb40
    %212 = llvm.getelementptr %12[%206] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %213 = llvm.load volatile %212 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c32_i64_114 = arith.constant 32 : i64
    %214 = arith.extui %203 : i32 to i64
    %215 = arith.addi %214, %c32_i64_114 : i64
    %c8_i64_115 = arith.constant 8 : i64
    %216 = arith.addi %215, %c8_i64_115 : i64
    %c0_i32_116 = arith.constant 0 : i32
    %217 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_116) : (!llvm.ptr, i32) -> i32
    %218 = arith.extui %217 : i32 to i64
    %c65536_i64_117 = arith.constant 65536 : i64
    %219 = arith.muli %218, %c65536_i64_117 : i64
    %220 = arith.cmpi ult, %216, %219 : i64
    cf.cond_br %220, ^bb41, ^bb42
  ^bb40:  // pred: ^bb37
    %c1_i32_118 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_118) : (i32) -> ()
    cf.br ^bb39
  ^bb41:  // 2 preds: ^bb39, ^bb42
    %221 = llvm.getelementptr %12[%215] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %213, %221 {alignment = 1 : i64} : i64, !llvm.ptr
    %222 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_119 = arith.constant 64 : i32
    %223 = arith.addi %222, %c64_i32_119 : i32
    llvm.store %223, %4 : i32, !llvm.ptr
    cf.br ^bb44
  ^bb42:  // pred: ^bb39
    %c1_i32_120 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_120) : (i32) -> ()
    cf.br ^bb41
  ^bb43:  // pred: ^bb49
    %224 = llvm.load %0 : !llvm.ptr -> i32
    %225 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i64_121 = arith.constant 64 : i64
    %226 = arith.extui %225 : i32 to i64
    %227 = arith.addi %226, %c64_i64_121 : i64
    %c8_i64_122 = arith.constant 8 : i64
    %228 = arith.addi %227, %c8_i64_122 : i64
    %c0_i32_123 = arith.constant 0 : i32
    %229 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_123) : (!llvm.ptr, i32) -> i32
    %230 = arith.extui %229 : i32 to i64
    %c65536_i64_124 = arith.constant 65536 : i64
    %231 = arith.muli %230, %c65536_i64_124 : i64
    %232 = arith.cmpi ult, %228, %231 : i64
    cf.cond_br %232, ^bb50, ^bb51
  ^bb44:  // 2 preds: ^bb41, ^bb47
    %233 = llvm.load %4 : !llvm.ptr -> i32
    %234 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32_125 = arith.constant 32 : i32
    %235 = arith.addi %234, %c32_i32_125 : i32
    %236 = llvm.load %3 : !llvm.ptr -> i32
    %237 = arith.addi %235, %236 : i32
    %c0_i64_126 = arith.constant 0 : i64
    %238 = arith.extui %237 : i32 to i64
    %239 = arith.addi %238, %c0_i64_126 : i64
    %c8_i64_127 = arith.constant 8 : i64
    %240 = arith.addi %239, %c8_i64_127 : i64
    %c0_i32_128 = arith.constant 0 : i32
    %241 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_128) : (!llvm.ptr, i32) -> i32
    %242 = arith.extui %241 : i32 to i64
    %c65536_i64_129 = arith.constant 65536 : i64
    %243 = arith.muli %242, %c65536_i64_129 : i64
    %244 = arith.cmpi ult, %240, %243 : i64
    cf.cond_br %244, ^bb45, ^bb46
  ^bb45:  // 2 preds: ^bb44, ^bb46
    %245 = llvm.getelementptr %12[%239] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %246 = llvm.load volatile %245 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %246, %7 : i64, !llvm.ptr
    %c56_i64 = arith.constant 56 : i64
    %c63_i64 = arith.constant 63 : i64
    %247 = arith.cmpi ule, %c56_i64, %c63_i64 : i64
    %248 = scf.if %247 -> (i64) {
      %438 = arith.shli %246, %c56_i64 : i64
      scf.yield %438 : i64
    } else {
      %c0_i64_229 = arith.constant 0 : i64
      scf.yield %c0_i64_229 : i64
    }
    %249 = llvm.load %7 : !llvm.ptr -> i64
    %c65280_i64 = arith.constant 65280 : i64
    %250 = arith.andi %249, %c65280_i64 : i64
    %c40_i64 = arith.constant 40 : i64
    %c63_i64_130 = arith.constant 63 : i64
    %251 = arith.cmpi ule, %c40_i64, %c63_i64_130 : i64
    %252 = scf.if %251 -> (i64) {
      %438 = arith.shli %250, %c40_i64 : i64
      scf.yield %438 : i64
    } else {
      %c0_i64_229 = arith.constant 0 : i64
      scf.yield %c0_i64_229 : i64
    }
    %253 = arith.ori %248, %252 : i64
    %254 = llvm.load %7 : !llvm.ptr -> i64
    %c16711680_i64 = arith.constant 16711680 : i64
    %255 = arith.andi %254, %c16711680_i64 : i64
    %c24_i64 = arith.constant 24 : i64
    %c63_i64_131 = arith.constant 63 : i64
    %256 = arith.cmpi ule, %c24_i64, %c63_i64_131 : i64
    %257 = scf.if %256 -> (i64) {
      %438 = arith.shli %255, %c24_i64 : i64
      scf.yield %438 : i64
    } else {
      %c0_i64_229 = arith.constant 0 : i64
      scf.yield %c0_i64_229 : i64
    }
    %258 = llvm.load %7 : !llvm.ptr -> i64
    %c4278190080_i64 = arith.constant 4278190080 : i64
    %259 = arith.andi %258, %c4278190080_i64 : i64
    %c8_i64_132 = arith.constant 8 : i64
    %c63_i64_133 = arith.constant 63 : i64
    %260 = arith.cmpi ule, %c8_i64_132, %c63_i64_133 : i64
    %261 = scf.if %260 -> (i64) {
      %438 = arith.shli %259, %c8_i64_132 : i64
      scf.yield %438 : i64
    } else {
      %c0_i64_229 = arith.constant 0 : i64
      scf.yield %c0_i64_229 : i64
    }
    %262 = arith.ori %257, %261 : i64
    %263 = arith.ori %253, %262 : i64
    %264 = llvm.load %7 : !llvm.ptr -> i64
    %c8_i64_134 = arith.constant 8 : i64
    %c63_i64_135 = arith.constant 63 : i64
    %265 = arith.cmpi ule, %c8_i64_134, %c63_i64_135 : i64
    %266 = scf.if %265 -> (i64) {
      %438 = arith.shrui %264, %c8_i64_134 : i64
      scf.yield %438 : i64
    } else {
      %c0_i64_229 = arith.constant 0 : i64
      scf.yield %c0_i64_229 : i64
    }
    %c4278190080_i64_136 = arith.constant 4278190080 : i64
    %267 = arith.andi %266, %c4278190080_i64_136 : i64
    %268 = llvm.load %7 : !llvm.ptr -> i64
    %c24_i64_137 = arith.constant 24 : i64
    %c63_i64_138 = arith.constant 63 : i64
    %269 = arith.cmpi ule, %c24_i64_137, %c63_i64_138 : i64
    %270 = scf.if %269 -> (i64) {
      %438 = arith.shrui %268, %c24_i64_137 : i64
      scf.yield %438 : i64
    } else {
      %c0_i64_229 = arith.constant 0 : i64
      scf.yield %c0_i64_229 : i64
    }
    %c16711680_i64_139 = arith.constant 16711680 : i64
    %271 = arith.andi %270, %c16711680_i64_139 : i64
    %272 = arith.ori %267, %271 : i64
    %273 = llvm.load %7 : !llvm.ptr -> i64
    %c40_i64_140 = arith.constant 40 : i64
    %c63_i64_141 = arith.constant 63 : i64
    %274 = arith.cmpi ule, %c40_i64_140, %c63_i64_141 : i64
    %275 = scf.if %274 -> (i64) {
      %438 = arith.shrui %273, %c40_i64_140 : i64
      scf.yield %438 : i64
    } else {
      %c0_i64_229 = arith.constant 0 : i64
      scf.yield %c0_i64_229 : i64
    }
    %c65280_i64_142 = arith.constant 65280 : i64
    %276 = arith.andi %275, %c65280_i64_142 : i64
    %277 = llvm.load %7 : !llvm.ptr -> i64
    %c56_i64_143 = arith.constant 56 : i64
    %c63_i64_144 = arith.constant 63 : i64
    %278 = arith.cmpi ule, %c56_i64_143, %c63_i64_144 : i64
    %279 = scf.if %278 -> (i64) {
      %438 = arith.shrui %277, %c56_i64_143 : i64
      scf.yield %438 : i64
    } else {
      %c0_i64_229 = arith.constant 0 : i64
      scf.yield %c0_i64_229 : i64
    }
    %280 = arith.ori %276, %279 : i64
    %281 = arith.ori %272, %280 : i64
    %282 = arith.ori %263, %281 : i64
    %c0_i64_145 = arith.constant 0 : i64
    %283 = arith.extui %233 : i32 to i64
    %284 = arith.addi %283, %c0_i64_145 : i64
    %c8_i64_146 = arith.constant 8 : i64
    %285 = arith.addi %284, %c8_i64_146 : i64
    %c0_i32_147 = arith.constant 0 : i32
    %286 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_147) : (!llvm.ptr, i32) -> i32
    %287 = arith.extui %286 : i32 to i64
    %c65536_i64_148 = arith.constant 65536 : i64
    %288 = arith.muli %287, %c65536_i64_148 : i64
    %289 = arith.cmpi ult, %285, %288 : i64
    cf.cond_br %289, ^bb47, ^bb48
  ^bb46:  // pred: ^bb44
    %c1_i32_149 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_149) : (i32) -> ()
    cf.br ^bb45
  ^bb47:  // 2 preds: ^bb45, ^bb48
    %290 = llvm.getelementptr %12[%284] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %282, %290 {alignment = 1 : i64} : i64, !llvm.ptr
    %291 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i32_150 = arith.constant 8 : i32
    %292 = arith.addi %291, %c8_i32_150 : i32
    llvm.store %292, %4 : i32, !llvm.ptr
    %293 = llvm.load %3 : !llvm.ptr -> i32
    %c-8_i32 = arith.constant -8 : i32
    %294 = arith.addi %293, %c-8_i32 : i32
    llvm.store %294, %3 : i32, !llvm.ptr
    %c-8_i32_151 = arith.constant -8 : i32
    %295 = arith.cmpi eq, %294, %c-8_i32_151 : i32
    %296 = arith.extui %295 : i1 to i32
    %c0_i32_152 = arith.constant 0 : i32
    %297 = arith.cmpi eq, %296, %c0_i32_152 : i32
    %298 = arith.extui %297 : i1 to i32
    %c0_i32_153 = arith.constant 0 : i32
    %299 = arith.cmpi ne, %298, %c0_i32_153 : i32
    cf.cond_br %299, ^bb44, ^bb49
  ^bb48:  // pred: ^bb45
    %c1_i32_154 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_154) : (i32) -> ()
    cf.br ^bb47
  ^bb49:  // pred: ^bb47
    cf.br ^bb43
  ^bb50:  // 2 preds: ^bb43, ^bb51
    %300 = llvm.getelementptr %12[%227] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %301 = llvm.load volatile %300 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c24_i64_155 = arith.constant 24 : i64
    %302 = arith.extui %224 : i32 to i64
    %303 = arith.addi %302, %c24_i64_155 : i64
    %c8_i64_156 = arith.constant 8 : i64
    %304 = arith.addi %303, %c8_i64_156 : i64
    %c0_i32_157 = arith.constant 0 : i32
    %305 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_157) : (!llvm.ptr, i32) -> i32
    %306 = arith.extui %305 : i32 to i64
    %c65536_i64_158 = arith.constant 65536 : i64
    %307 = arith.muli %306, %c65536_i64_158 : i64
    %308 = arith.cmpi ult, %304, %307 : i64
    cf.cond_br %308, ^bb52, ^bb53
  ^bb51:  // pred: ^bb43
    %c1_i32_159 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_159) : (i32) -> ()
    cf.br ^bb50
  ^bb52:  // 2 preds: ^bb50, ^bb53
    %309 = llvm.getelementptr %12[%303] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %301, %309 {alignment = 1 : i64} : i64, !llvm.ptr
    %310 = llvm.load %0 : !llvm.ptr -> i32
    %311 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %312 = arith.extui %311 : i32 to i64
    %313 = arith.addi %312, %c12_i64 : i64
    %c8_i64_160 = arith.constant 8 : i64
    %314 = arith.addi %313, %c8_i64_160 : i64
    %c0_i32_161 = arith.constant 0 : i32
    %315 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_161) : (!llvm.ptr, i32) -> i32
    %316 = arith.extui %315 : i32 to i64
    %c65536_i64_162 = arith.constant 65536 : i64
    %317 = arith.muli %316, %c65536_i64_162 : i64
    %318 = arith.cmpi ult, %314, %317 : i64
    cf.cond_br %318, ^bb54, ^bb55
  ^bb53:  // pred: ^bb50
    %c1_i32_163 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_163) : (i32) -> ()
    cf.br ^bb52
  ^bb54:  // 2 preds: ^bb52, ^bb55
    %319 = llvm.getelementptr %12[%313] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %320 = llvm.load volatile %319 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_164 = arith.constant 0 : i64
    %321 = arith.extui %310 : i32 to i64
    %322 = arith.addi %321, %c0_i64_164 : i64
    %c8_i64_165 = arith.constant 8 : i64
    %323 = arith.addi %322, %c8_i64_165 : i64
    %c0_i32_166 = arith.constant 0 : i32
    %324 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_166) : (!llvm.ptr, i32) -> i32
    %325 = arith.extui %324 : i32 to i64
    %c65536_i64_167 = arith.constant 65536 : i64
    %326 = arith.muli %325, %c65536_i64_167 : i64
    %327 = arith.cmpi ult, %323, %326 : i64
    cf.cond_br %327, ^bb56, ^bb57
  ^bb55:  // pred: ^bb52
    %c1_i32_168 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_168) : (i32) -> ()
    cf.br ^bb54
  ^bb56:  // 2 preds: ^bb54, ^bb57
    %328 = llvm.getelementptr %12[%322] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %320, %328 {alignment = 1 : i64} : i64, !llvm.ptr
    %329 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_169 = arith.constant 16 : i32
    %330 = arith.addi %329, %c16_i32_169 : i32
    %331 = llvm.load %1 : !llvm.ptr -> i32
    %c28_i32 = arith.constant 28 : i32
    %332 = arith.addi %331, %c28_i32 : i32
    %c0_i64_170 = arith.constant 0 : i64
    %333 = arith.extui %332 : i32 to i64
    %334 = arith.addi %333, %c0_i64_170 : i64
    %c4_i64 = arith.constant 4 : i64
    %335 = arith.addi %334, %c4_i64 : i64
    %c0_i32_171 = arith.constant 0 : i32
    %336 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_171) : (!llvm.ptr, i32) -> i32
    %337 = arith.extui %336 : i32 to i64
    %c65536_i64_172 = arith.constant 65536 : i64
    %338 = arith.muli %337, %c65536_i64_172 : i64
    %339 = arith.cmpi ult, %335, %338 : i64
    cf.cond_br %339, ^bb58, ^bb59
  ^bb57:  // pred: ^bb54
    %c1_i32_173 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_173) : (i32) -> ()
    cf.br ^bb56
  ^bb58:  // 2 preds: ^bb56, ^bb59
    %340 = llvm.getelementptr %12[%334] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %341 = llvm.load volatile %340 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_174 = arith.constant 0 : i64
    %342 = arith.extui %330 : i32 to i64
    %343 = arith.addi %342, %c0_i64_174 : i64
    %c4_i64_175 = arith.constant 4 : i64
    %344 = arith.addi %343, %c4_i64_175 : i64
    %c0_i32_176 = arith.constant 0 : i32
    %345 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_176) : (!llvm.ptr, i32) -> i32
    %346 = arith.extui %345 : i32 to i64
    %c65536_i64_177 = arith.constant 65536 : i64
    %347 = arith.muli %346, %c65536_i64_177 : i64
    %348 = arith.cmpi ult, %344, %347 : i64
    cf.cond_br %348, ^bb60, ^bb61
  ^bb59:  // pred: ^bb56
    %c1_i32_178 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_178) : (i32) -> ()
    cf.br ^bb58
  ^bb60:  // 2 preds: ^bb58, ^bb61
    %349 = llvm.getelementptr %12[%343] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %341, %349 {alignment = 1 : i64} : i32, !llvm.ptr
    %350 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_179 = arith.constant 8 : i32
    %351 = arith.addi %350, %c8_i32_179 : i32
    %352 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i32 = arith.constant 20 : i32
    %353 = arith.addi %352, %c20_i32 : i32
    %c0_i64_180 = arith.constant 0 : i64
    %354 = arith.extui %353 : i32 to i64
    %355 = arith.addi %354, %c0_i64_180 : i64
    %c8_i64_181 = arith.constant 8 : i64
    %356 = arith.addi %355, %c8_i64_181 : i64
    %c0_i32_182 = arith.constant 0 : i32
    %357 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_182) : (!llvm.ptr, i32) -> i32
    %358 = arith.extui %357 : i32 to i64
    %c65536_i64_183 = arith.constant 65536 : i64
    %359 = arith.muli %358, %c65536_i64_183 : i64
    %360 = arith.cmpi ult, %356, %359 : i64
    cf.cond_br %360, ^bb62, ^bb63
  ^bb61:  // pred: ^bb58
    %c1_i32_184 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_184) : (i32) -> ()
    cf.br ^bb60
  ^bb62:  // 2 preds: ^bb60, ^bb63
    %361 = llvm.getelementptr %12[%355] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %362 = llvm.load volatile %361 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_185 = arith.constant 0 : i64
    %363 = arith.extui %351 : i32 to i64
    %364 = arith.addi %363, %c0_i64_185 : i64
    %c8_i64_186 = arith.constant 8 : i64
    %365 = arith.addi %364, %c8_i64_186 : i64
    %c0_i32_187 = arith.constant 0 : i32
    %366 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_187) : (!llvm.ptr, i32) -> i32
    %367 = arith.extui %366 : i32 to i64
    %c65536_i64_188 = arith.constant 65536 : i64
    %368 = arith.muli %367, %c65536_i64_188 : i64
    %369 = arith.cmpi ult, %365, %368 : i64
    cf.cond_br %369, ^bb64, ^bb65
  ^bb63:  // pred: ^bb60
    %c1_i32_189 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_189) : (i32) -> ()
    cf.br ^bb62
  ^bb64:  // 2 preds: ^bb62, ^bb65
    %370 = llvm.getelementptr %12[%364] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %362, %370 {alignment = 1 : i64} : i64, !llvm.ptr
    %371 = llvm.load %0 : !llvm.ptr -> i32
    %c32_i32_190 = arith.constant 32 : i32
    %372 = arith.addi %371, %c32_i32_190 : i32
    %373 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_191 = arith.constant 64 : i32
    %374 = arith.addi %373, %c64_i32_191 : i32
    %c8_i32_192 = arith.constant 8 : i32
    %375 = arith.addi %374, %c8_i32_192 : i32
    %c0_i64_193 = arith.constant 0 : i64
    %376 = arith.extui %375 : i32 to i64
    %377 = arith.addi %376, %c0_i64_193 : i64
    %c8_i64_194 = arith.constant 8 : i64
    %378 = arith.addi %377, %c8_i64_194 : i64
    %c0_i32_195 = arith.constant 0 : i32
    %379 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_195) : (!llvm.ptr, i32) -> i32
    %380 = arith.extui %379 : i32 to i64
    %c65536_i64_196 = arith.constant 65536 : i64
    %381 = arith.muli %380, %c65536_i64_196 : i64
    %382 = arith.cmpi ult, %378, %381 : i64
    cf.cond_br %382, ^bb66, ^bb67
  ^bb65:  // pred: ^bb62
    %c1_i32_197 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_197) : (i32) -> ()
    cf.br ^bb64
  ^bb66:  // 2 preds: ^bb64, ^bb67
    %383 = llvm.getelementptr %12[%377] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %384 = llvm.load volatile %383 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_198 = arith.constant 0 : i64
    %385 = arith.extui %372 : i32 to i64
    %386 = arith.addi %385, %c0_i64_198 : i64
    %c8_i64_199 = arith.constant 8 : i64
    %387 = arith.addi %386, %c8_i64_199 : i64
    %c0_i32_200 = arith.constant 0 : i32
    %388 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_200) : (!llvm.ptr, i32) -> i32
    %389 = arith.extui %388 : i32 to i64
    %c65536_i64_201 = arith.constant 65536 : i64
    %390 = arith.muli %389, %c65536_i64_201 : i64
    %391 = arith.cmpi ult, %387, %390 : i64
    cf.cond_br %391, ^bb68, ^bb69
  ^bb67:  // pred: ^bb64
    %c1_i32_202 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_202) : (i32) -> ()
    cf.br ^bb66
  ^bb68:  // 2 preds: ^bb66, ^bb69
    %392 = llvm.getelementptr %12[%386] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %384, %392 {alignment = 1 : i64} : i64, !llvm.ptr
    %393 = llvm.load %0 : !llvm.ptr -> i32
    %c40_i32_203 = arith.constant 40 : i32
    %394 = arith.addi %393, %c40_i32_203 : i32
    %395 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_204 = arith.constant 64 : i32
    %396 = arith.addi %395, %c64_i32_204 : i32
    %c16_i32_205 = arith.constant 16 : i32
    %397 = arith.addi %396, %c16_i32_205 : i32
    %c0_i64_206 = arith.constant 0 : i64
    %398 = arith.extui %397 : i32 to i64
    %399 = arith.addi %398, %c0_i64_206 : i64
    %c8_i64_207 = arith.constant 8 : i64
    %400 = arith.addi %399, %c8_i64_207 : i64
    %c0_i32_208 = arith.constant 0 : i32
    %401 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_208) : (!llvm.ptr, i32) -> i32
    %402 = arith.extui %401 : i32 to i64
    %c65536_i64_209 = arith.constant 65536 : i64
    %403 = arith.muli %402, %c65536_i64_209 : i64
    %404 = arith.cmpi ult, %400, %403 : i64
    cf.cond_br %404, ^bb70, ^bb71
  ^bb69:  // pred: ^bb66
    %c1_i32_210 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_210) : (i32) -> ()
    cf.br ^bb68
  ^bb70:  // 2 preds: ^bb68, ^bb71
    %405 = llvm.getelementptr %12[%399] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %406 = llvm.load volatile %405 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_211 = arith.constant 0 : i64
    %407 = arith.extui %394 : i32 to i64
    %408 = arith.addi %407, %c0_i64_211 : i64
    %c8_i64_212 = arith.constant 8 : i64
    %409 = arith.addi %408, %c8_i64_212 : i64
    %c0_i32_213 = arith.constant 0 : i32
    %410 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_213) : (!llvm.ptr, i32) -> i32
    %411 = arith.extui %410 : i32 to i64
    %c65536_i64_214 = arith.constant 65536 : i64
    %412 = arith.muli %411, %c65536_i64_214 : i64
    %413 = arith.cmpi ult, %409, %412 : i64
    cf.cond_br %413, ^bb72, ^bb73
  ^bb71:  // pred: ^bb68
    %c1_i32_215 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_215) : (i32) -> ()
    cf.br ^bb70
  ^bb72:  // 2 preds: ^bb70, ^bb73
    %414 = llvm.getelementptr %12[%408] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %406, %414 {alignment = 1 : i64} : i64, !llvm.ptr
    %415 = llvm.load %0 : !llvm.ptr -> i32
    %c48_i32_216 = arith.constant 48 : i32
    %416 = arith.addi %415, %c48_i32_216 : i32
    %417 = llvm.load %2 : !llvm.ptr -> i32
    %c88_i32 = arith.constant 88 : i32
    %418 = arith.addi %417, %c88_i32 : i32
    %c0_i64_217 = arith.constant 0 : i64
    %419 = arith.extui %418 : i32 to i64
    %420 = arith.addi %419, %c0_i64_217 : i64
    %c8_i64_218 = arith.constant 8 : i64
    %421 = arith.addi %420, %c8_i64_218 : i64
    %c0_i32_219 = arith.constant 0 : i32
    %422 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_219) : (!llvm.ptr, i32) -> i32
    %423 = arith.extui %422 : i32 to i64
    %c65536_i64_220 = arith.constant 65536 : i64
    %424 = arith.muli %423, %c65536_i64_220 : i64
    %425 = arith.cmpi ult, %421, %424 : i64
    cf.cond_br %425, ^bb74, ^bb75
  ^bb73:  // pred: ^bb70
    %c1_i32_221 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_221) : (i32) -> ()
    cf.br ^bb72
  ^bb74:  // 2 preds: ^bb72, ^bb75
    %426 = llvm.getelementptr %12[%420] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %427 = llvm.load volatile %426 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_222 = arith.constant 0 : i64
    %428 = arith.extui %416 : i32 to i64
    %429 = arith.addi %428, %c0_i64_222 : i64
    %c8_i64_223 = arith.constant 8 : i64
    %430 = arith.addi %429, %c8_i64_223 : i64
    %c0_i32_224 = arith.constant 0 : i32
    %431 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_224) : (!llvm.ptr, i32) -> i32
    %432 = arith.extui %431 : i32 to i64
    %c65536_i64_225 = arith.constant 65536 : i64
    %433 = arith.muli %432, %c65536_i64_225 : i64
    %434 = arith.cmpi ult, %430, %433 : i64
    cf.cond_br %434, ^bb76, ^bb77
  ^bb75:  // pred: ^bb72
    %c1_i32_226 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_226) : (i32) -> ()
    cf.br ^bb74
  ^bb76:  // 2 preds: ^bb74, ^bb77
    %435 = llvm.getelementptr %12[%429] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %427, %435 {alignment = 1 : i64} : i64, !llvm.ptr
    %436 = llvm.load %2 : !llvm.ptr -> i32
    %c96_i32_227 = arith.constant 96 : i32
    %437 = arith.addi %436, %c96_i32_227 : i32
    llvm.store %437, %9 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb77:  // pred: ^bb74
    %c1_i32_228 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_228) : (i32) -> ()
    cf.br ^bb76
  }
  func.func @f28(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %8 : i64, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %9 : i64, !llvm.ptr
    %c1_i32_9 = arith.constant 1 : i32
    %10 = llvm.alloca %c1_i32_9 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %10 : i64, !llvm.ptr
    %c0_i32_10 = arith.constant 0 : i32
    %c1_i32_11 = arith.constant 1 : i32
    %11 = llvm.alloca %c1_i32_11 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32_10, %11 : i32, !llvm.ptr
    %12 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    %14 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %14[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %17 = llvm.load %13 : !llvm.ptr -> i32
    %c224_i32 = arith.constant 224 : i32
    %18 = arith.subi %17, %c224_i32 : i32
    llvm.store %18, %4 : i32, !llvm.ptr
    llvm.store %18, %13 : i32, !llvm.ptr
    %19 = llvm.load %4 : !llvm.ptr -> i32
    %c152_i32 = arith.constant 152 : i32
    %20 = arith.addi %19, %c152_i32 : i32
    %c16_i32 = arith.constant 16 : i32
    %21 = arith.addi %20, %c16_i32 : i32
    %22 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_12 = arith.constant 16 : i32
    %23 = arith.addi %22, %c16_i32_12 : i32
    %c0_i64_13 = arith.constant 0 : i64
    %24 = arith.extui %23 : i32 to i64
    %25 = arith.addi %24, %c0_i64_13 : i64
    %c4_i64 = arith.constant 4 : i64
    %26 = arith.addi %25, %c4_i64 : i64
    %c0_i32_14 = arith.constant 0 : i32
    %27 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_14) : (!llvm.ptr, i32) -> i32
    %28 = arith.extui %27 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %29 = arith.muli %28, %c65536_i64 : i64
    %30 = arith.cmpi ult, %26, %29 : i64
    cf.cond_br %30, ^bb3, ^bb4
  ^bb2:  // pred: ^bb177
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %31 = llvm.getelementptr %16[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %32 = llvm.load volatile %31 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_15 = arith.constant 0 : i64
    %33 = arith.extui %21 : i32 to i64
    %34 = arith.addi %33, %c0_i64_15 : i64
    %c4_i64_16 = arith.constant 4 : i64
    %35 = arith.addi %34, %c4_i64_16 : i64
    %c0_i32_17 = arith.constant 0 : i32
    %36 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_17) : (!llvm.ptr, i32) -> i32
    %37 = arith.extui %36 : i32 to i64
    %c65536_i64_18 = arith.constant 65536 : i64
    %38 = arith.muli %37, %c65536_i64_18 : i64
    %39 = arith.cmpi ult, %35, %38 : i64
    cf.cond_br %39, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c1_i32_19 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_19) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %40 = llvm.getelementptr %16[%34] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %32, %40 {alignment = 1 : i64} : i32, !llvm.ptr
    %41 = llvm.load %4 : !llvm.ptr -> i32
    %c152_i32_20 = arith.constant 152 : i32
    %42 = arith.addi %41, %c152_i32_20 : i32
    %c8_i32 = arith.constant 8 : i32
    %43 = arith.addi %42, %c8_i32 : i32
    %44 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_21 = arith.constant 8 : i32
    %45 = arith.addi %44, %c8_i32_21 : i32
    %c0_i64_22 = arith.constant 0 : i64
    %46 = arith.extui %45 : i32 to i64
    %47 = arith.addi %46, %c0_i64_22 : i64
    %c8_i64 = arith.constant 8 : i64
    %48 = arith.addi %47, %c8_i64 : i64
    %c0_i32_23 = arith.constant 0 : i32
    %49 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_23) : (!llvm.ptr, i32) -> i32
    %50 = arith.extui %49 : i32 to i64
    %c65536_i64_24 = arith.constant 65536 : i64
    %51 = arith.muli %50, %c65536_i64_24 : i64
    %52 = arith.cmpi ult, %48, %51 : i64
    cf.cond_br %52, ^bb7, ^bb8
  ^bb6:  // pred: ^bb3
    %c1_i32_25 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_25) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %53 = llvm.getelementptr %16[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %54 = llvm.load volatile %53 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_26 = arith.constant 0 : i64
    %55 = arith.extui %43 : i32 to i64
    %56 = arith.addi %55, %c0_i64_26 : i64
    %c8_i64_27 = arith.constant 8 : i64
    %57 = arith.addi %56, %c8_i64_27 : i64
    %c0_i32_28 = arith.constant 0 : i32
    %58 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_28) : (!llvm.ptr, i32) -> i32
    %59 = arith.extui %58 : i32 to i64
    %c65536_i64_29 = arith.constant 65536 : i64
    %60 = arith.muli %59, %c65536_i64_29 : i64
    %61 = arith.cmpi ult, %57, %60 : i64
    cf.cond_br %61, ^bb9, ^bb10
  ^bb8:  // pred: ^bb5
    %c1_i32_30 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_30) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %62 = llvm.getelementptr %16[%56] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %54, %62 {alignment = 1 : i64} : i64, !llvm.ptr
    %63 = llvm.load %4 : !llvm.ptr -> i32
    %64 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_31 = arith.constant 0 : i64
    %65 = arith.extui %64 : i32 to i64
    %66 = arith.addi %65, %c0_i64_31 : i64
    %c8_i64_32 = arith.constant 8 : i64
    %67 = arith.addi %66, %c8_i64_32 : i64
    %c0_i32_33 = arith.constant 0 : i32
    %68 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_33) : (!llvm.ptr, i32) -> i32
    %69 = arith.extui %68 : i32 to i64
    %c65536_i64_34 = arith.constant 65536 : i64
    %70 = arith.muli %69, %c65536_i64_34 : i64
    %71 = arith.cmpi ult, %67, %70 : i64
    cf.cond_br %71, ^bb11, ^bb12
  ^bb10:  // pred: ^bb7
    %c1_i32_35 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_35) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %72 = llvm.getelementptr %16[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %73 = llvm.load volatile %72 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c152_i64 = arith.constant 152 : i64
    %74 = arith.extui %63 : i32 to i64
    %75 = arith.addi %74, %c152_i64 : i64
    %c8_i64_36 = arith.constant 8 : i64
    %76 = arith.addi %75, %c8_i64_36 : i64
    %c0_i32_37 = arith.constant 0 : i32
    %77 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_37) : (!llvm.ptr, i32) -> i32
    %78 = arith.extui %77 : i32 to i64
    %c65536_i64_38 = arith.constant 65536 : i64
    %79 = arith.muli %78, %c65536_i64_38 : i64
    %80 = arith.cmpi ult, %76, %79 : i64
    cf.cond_br %80, ^bb13, ^bb14
  ^bb12:  // pred: ^bb9
    %c1_i32_39 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_39) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %81 = llvm.getelementptr %16[%75] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %73, %81 {alignment = 1 : i64} : i64, !llvm.ptr
    %82 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i32_40 = arith.constant 8 : i32
    %83 = arith.addi %82, %c8_i32_40 : i32
    %84 = llvm.load %1 : !llvm.ptr -> i32
    %85 = llvm.load %4 : !llvm.ptr -> i32
    %c152_i32_41 = arith.constant 152 : i32
    %86 = arith.addi %85, %c152_i32_41 : i32
    call @f33(%arg0, %83, %84, %86) : (!llvm.ptr, i32, i32, i32) -> ()
    %87 = llvm.load %4 : !llvm.ptr -> i32
    %c40_i64 = arith.constant 40 : i64
    %88 = arith.extui %87 : i32 to i64
    %89 = arith.addi %88, %c40_i64 : i64
    %c4_i64_42 = arith.constant 4 : i64
    %90 = arith.addi %89, %c4_i64_42 : i64
    %c0_i32_43 = arith.constant 0 : i32
    %91 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_43) : (!llvm.ptr, i32) -> i32
    %92 = arith.extui %91 : i32 to i64
    %c65536_i64_44 = arith.constant 65536 : i64
    %93 = arith.muli %92, %c65536_i64_44 : i64
    %94 = arith.cmpi ult, %90, %93 : i64
    cf.cond_br %94, ^bb17, ^bb18
  ^bb14:  // pred: ^bb11
    %c1_i32_45 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_45) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // 2 preds: ^bb16, ^bb19
    %95 = llvm.load %4 : !llvm.ptr -> i32
    %c88_i32 = arith.constant 88 : i32
    %96 = arith.addi %95, %c88_i32 : i32
    %c24_i32 = arith.constant 24 : i32
    %97 = arith.addi %96, %c24_i32 : i32
    %98 = llvm.load %5 : !llvm.ptr -> i32
    %c24_i32_46 = arith.constant 24 : i32
    %99 = arith.addi %98, %c24_i32_46 : i32
    %c0_i64_47 = arith.constant 0 : i64
    %100 = arith.extui %99 : i32 to i64
    %101 = arith.addi %100, %c0_i64_47 : i64
    %c8_i64_48 = arith.constant 8 : i64
    %102 = arith.addi %101, %c8_i64_48 : i64
    %c0_i32_49 = arith.constant 0 : i32
    %103 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_49) : (!llvm.ptr, i32) -> i32
    %104 = arith.extui %103 : i32 to i64
    %c65536_i64_50 = arith.constant 65536 : i64
    %105 = arith.muli %104, %c65536_i64_50 : i64
    %106 = arith.cmpi ult, %102, %105 : i64
    cf.cond_br %106, ^bb20, ^bb21
  ^bb16:  // pred: ^bb17
    %107 = llvm.load %4 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %108 = arith.addi %107, %c48_i32 : i32
    llvm.store %108, %5 : i32, !llvm.ptr
    cf.br ^bb15
  ^bb17:  // 2 preds: ^bb13, ^bb18
    %109 = llvm.getelementptr %16[%89] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %110 = llvm.load volatile %109 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_51 = arith.constant 0 : i32
    %111 = arith.cmpi ne, %110, %c0_i32_51 : i32
    cf.cond_br %111, ^bb16, ^bb19
  ^bb18:  // pred: ^bb13
    %c1_i32_52 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_52) : (i32) -> ()
    cf.br ^bb17
  ^bb19:  // pred: ^bb17
    %112 = llvm.load %4 : !llvm.ptr -> i32
    %c40_i32 = arith.constant 40 : i32
    %113 = arith.addi %112, %c40_i32 : i32
    %114 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i32_53 = arith.constant 8 : i32
    %115 = arith.addi %114, %c8_i32_53 : i32
    %116 = call @f0(%arg0, %113, %115) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %116, %5 : i32, !llvm.ptr
    cf.br ^bb15
  ^bb20:  // 2 preds: ^bb15, ^bb21
    %117 = llvm.getelementptr %16[%101] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %118 = llvm.load volatile %117 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_54 = arith.constant 0 : i64
    %119 = arith.extui %97 : i32 to i64
    %120 = arith.addi %119, %c0_i64_54 : i64
    %c8_i64_55 = arith.constant 8 : i64
    %121 = arith.addi %120, %c8_i64_55 : i64
    %c0_i32_56 = arith.constant 0 : i32
    %122 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_56) : (!llvm.ptr, i32) -> i32
    %123 = arith.extui %122 : i32 to i64
    %c65536_i64_57 = arith.constant 65536 : i64
    %124 = arith.muli %123, %c65536_i64_57 : i64
    %125 = arith.cmpi ult, %121, %124 : i64
    cf.cond_br %125, ^bb22, ^bb23
  ^bb21:  // pred: ^bb15
    %c1_i32_58 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_58) : (i32) -> ()
    cf.br ^bb20
  ^bb22:  // 2 preds: ^bb20, ^bb23
    %126 = llvm.getelementptr %16[%120] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %118, %126 {alignment = 1 : i64} : i64, !llvm.ptr
    %127 = llvm.load %4 : !llvm.ptr -> i32
    %c88_i32_59 = arith.constant 88 : i32
    %128 = arith.addi %127, %c88_i32_59 : i32
    %c16_i32_60 = arith.constant 16 : i32
    %129 = arith.addi %128, %c16_i32_60 : i32
    %130 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32_61 = arith.constant 16 : i32
    %131 = arith.addi %130, %c16_i32_61 : i32
    %c0_i64_62 = arith.constant 0 : i64
    %132 = arith.extui %131 : i32 to i64
    %133 = arith.addi %132, %c0_i64_62 : i64
    %c8_i64_63 = arith.constant 8 : i64
    %134 = arith.addi %133, %c8_i64_63 : i64
    %c0_i32_64 = arith.constant 0 : i32
    %135 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_64) : (!llvm.ptr, i32) -> i32
    %136 = arith.extui %135 : i32 to i64
    %c65536_i64_65 = arith.constant 65536 : i64
    %137 = arith.muli %136, %c65536_i64_65 : i64
    %138 = arith.cmpi ult, %134, %137 : i64
    cf.cond_br %138, ^bb24, ^bb25
  ^bb23:  // pred: ^bb20
    %c1_i32_66 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_66) : (i32) -> ()
    cf.br ^bb22
  ^bb24:  // 2 preds: ^bb22, ^bb25
    %139 = llvm.getelementptr %16[%133] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %140 = llvm.load volatile %139 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_67 = arith.constant 0 : i64
    %141 = arith.extui %129 : i32 to i64
    %142 = arith.addi %141, %c0_i64_67 : i64
    %c8_i64_68 = arith.constant 8 : i64
    %143 = arith.addi %142, %c8_i64_68 : i64
    %c0_i32_69 = arith.constant 0 : i32
    %144 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_69) : (!llvm.ptr, i32) -> i32
    %145 = arith.extui %144 : i32 to i64
    %c65536_i64_70 = arith.constant 65536 : i64
    %146 = arith.muli %145, %c65536_i64_70 : i64
    %147 = arith.cmpi ult, %143, %146 : i64
    cf.cond_br %147, ^bb26, ^bb27
  ^bb25:  // pred: ^bb22
    %c1_i32_71 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_71) : (i32) -> ()
    cf.br ^bb24
  ^bb26:  // 2 preds: ^bb24, ^bb27
    %148 = llvm.getelementptr %16[%142] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %140, %148 {alignment = 1 : i64} : i64, !llvm.ptr
    %149 = llvm.load %4 : !llvm.ptr -> i32
    %c88_i32_72 = arith.constant 88 : i32
    %150 = arith.addi %149, %c88_i32_72 : i32
    %c8_i32_73 = arith.constant 8 : i32
    %151 = arith.addi %150, %c8_i32_73 : i32
    %152 = llvm.load %5 : !llvm.ptr -> i32
    %c8_i32_74 = arith.constant 8 : i32
    %153 = arith.addi %152, %c8_i32_74 : i32
    %c0_i64_75 = arith.constant 0 : i64
    %154 = arith.extui %153 : i32 to i64
    %155 = arith.addi %154, %c0_i64_75 : i64
    %c8_i64_76 = arith.constant 8 : i64
    %156 = arith.addi %155, %c8_i64_76 : i64
    %c0_i32_77 = arith.constant 0 : i32
    %157 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_77) : (!llvm.ptr, i32) -> i32
    %158 = arith.extui %157 : i32 to i64
    %c65536_i64_78 = arith.constant 65536 : i64
    %159 = arith.muli %158, %c65536_i64_78 : i64
    %160 = arith.cmpi ult, %156, %159 : i64
    cf.cond_br %160, ^bb28, ^bb29
  ^bb27:  // pred: ^bb24
    %c1_i32_79 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_79) : (i32) -> ()
    cf.br ^bb26
  ^bb28:  // 2 preds: ^bb26, ^bb29
    %161 = llvm.getelementptr %16[%155] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %162 = llvm.load volatile %161 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_80 = arith.constant 0 : i64
    %163 = arith.extui %151 : i32 to i64
    %164 = arith.addi %163, %c0_i64_80 : i64
    %c8_i64_81 = arith.constant 8 : i64
    %165 = arith.addi %164, %c8_i64_81 : i64
    %c0_i32_82 = arith.constant 0 : i32
    %166 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_82) : (!llvm.ptr, i32) -> i32
    %167 = arith.extui %166 : i32 to i64
    %c65536_i64_83 = arith.constant 65536 : i64
    %168 = arith.muli %167, %c65536_i64_83 : i64
    %169 = arith.cmpi ult, %165, %168 : i64
    cf.cond_br %169, ^bb30, ^bb31
  ^bb29:  // pred: ^bb26
    %c1_i32_84 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_84) : (i32) -> ()
    cf.br ^bb28
  ^bb30:  // 2 preds: ^bb28, ^bb31
    %170 = llvm.getelementptr %16[%164] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %162, %170 {alignment = 1 : i64} : i64, !llvm.ptr
    %171 = llvm.load %4 : !llvm.ptr -> i32
    %172 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64_85 = arith.constant 0 : i64
    %173 = arith.extui %172 : i32 to i64
    %174 = arith.addi %173, %c0_i64_85 : i64
    %c8_i64_86 = arith.constant 8 : i64
    %175 = arith.addi %174, %c8_i64_86 : i64
    %c0_i32_87 = arith.constant 0 : i32
    %176 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_87) : (!llvm.ptr, i32) -> i32
    %177 = arith.extui %176 : i32 to i64
    %c65536_i64_88 = arith.constant 65536 : i64
    %178 = arith.muli %177, %c65536_i64_88 : i64
    %179 = arith.cmpi ult, %175, %178 : i64
    cf.cond_br %179, ^bb32, ^bb33
  ^bb31:  // pred: ^bb28
    %c1_i32_89 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_89) : (i32) -> ()
    cf.br ^bb30
  ^bb32:  // 2 preds: ^bb30, ^bb33
    %180 = llvm.getelementptr %16[%174] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %181 = llvm.load volatile %180 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c88_i64 = arith.constant 88 : i64
    %182 = arith.extui %171 : i32 to i64
    %183 = arith.addi %182, %c88_i64 : i64
    %c8_i64_90 = arith.constant 8 : i64
    %184 = arith.addi %183, %c8_i64_90 : i64
    %c0_i32_91 = arith.constant 0 : i32
    %185 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_91) : (!llvm.ptr, i32) -> i32
    %186 = arith.extui %185 : i32 to i64
    %c65536_i64_92 = arith.constant 65536 : i64
    %187 = arith.muli %186, %c65536_i64_92 : i64
    %188 = arith.cmpi ult, %184, %187 : i64
    cf.cond_br %188, ^bb34, ^bb35
  ^bb33:  // pred: ^bb30
    %c1_i32_93 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_93) : (i32) -> ()
    cf.br ^bb32
  ^bb34:  // 2 preds: ^bb32, ^bb35
    %189 = llvm.getelementptr %16[%183] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %181, %189 {alignment = 1 : i64} : i64, !llvm.ptr
    %c0_i32_94 = arith.constant 0 : i32
    llvm.store %c0_i32_94, %5 : i32, !llvm.ptr
    %c0_i32_95 = arith.constant 0 : i32
    llvm.store %c0_i32_95, %6 : i32, !llvm.ptr
    cf.br ^bb37
  ^bb35:  // pred: ^bb32
    %c1_i32_96 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_96) : (i32) -> ()
    cf.br ^bb34
  ^bb36:  // pred: ^bb44
    %190 = llvm.load %4 : !llvm.ptr -> i32
    %c56_i32 = arith.constant 56 : i32
    %191 = arith.addi %190, %c56_i32 : i32
    %192 = llvm.load %4 : !llvm.ptr -> i32
    %c88_i32_97 = arith.constant 88 : i32
    %193 = arith.addi %192, %c88_i32_97 : i32
    %c8_i32_98 = arith.constant 8 : i32
    %194 = arith.addi %193, %c8_i32_98 : i32
    %c0_i64_99 = arith.constant 0 : i64
    %195 = arith.extui %194 : i32 to i64
    %196 = arith.addi %195, %c0_i64_99 : i64
    %c8_i64_100 = arith.constant 8 : i64
    %197 = arith.addi %196, %c8_i64_100 : i64
    %c0_i32_101 = arith.constant 0 : i32
    %198 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_101) : (!llvm.ptr, i32) -> i32
    %199 = arith.extui %198 : i32 to i64
    %c65536_i64_102 = arith.constant 65536 : i64
    %200 = arith.muli %199, %c65536_i64_102 : i64
    %201 = arith.cmpi ult, %197, %200 : i64
    cf.cond_br %201, ^bb45, ^bb46
  ^bb37:  // 2 preds: ^bb34, ^bb42
    %202 = llvm.load %4 : !llvm.ptr -> i32
    %c88_i32_103 = arith.constant 88 : i32
    %203 = arith.addi %202, %c88_i32_103 : i32
    %204 = llvm.load %5 : !llvm.ptr -> i32
    %205 = arith.addi %203, %204 : i32
    llvm.store %205, %7 : i32, !llvm.ptr
    %206 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_104 = arith.constant 0 : i64
    %207 = arith.extui %206 : i32 to i64
    %208 = arith.addi %207, %c0_i64_104 : i64
    %c8_i64_105 = arith.constant 8 : i64
    %209 = arith.addi %208, %c8_i64_105 : i64
    %c0_i32_106 = arith.constant 0 : i32
    %210 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_106) : (!llvm.ptr, i32) -> i32
    %211 = arith.extui %210 : i32 to i64
    %c65536_i64_107 = arith.constant 65536 : i64
    %212 = arith.muli %211, %c65536_i64_107 : i64
    %213 = arith.cmpi ult, %209, %212 : i64
    cf.cond_br %213, ^bb38, ^bb39
  ^bb38:  // 2 preds: ^bb37, ^bb39
    %214 = llvm.getelementptr %16[%208] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %215 = llvm.load volatile %214 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %215, %8 : i64, !llvm.ptr
    %216 = llvm.load %3 : !llvm.ptr -> i32
    %217 = llvm.load %5 : !llvm.ptr -> i32
    %218 = arith.addi %216, %217 : i32
    %c0_i64_108 = arith.constant 0 : i64
    %219 = arith.extui %218 : i32 to i64
    %220 = arith.addi %219, %c0_i64_108 : i64
    %c8_i64_109 = arith.constant 8 : i64
    %221 = arith.addi %220, %c8_i64_109 : i64
    %c0_i32_110 = arith.constant 0 : i32
    %222 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_110) : (!llvm.ptr, i32) -> i32
    %223 = arith.extui %222 : i32 to i64
    %c65536_i64_111 = arith.constant 65536 : i64
    %224 = arith.muli %223, %c65536_i64_111 : i64
    %225 = arith.cmpi ult, %221, %224 : i64
    cf.cond_br %225, ^bb40, ^bb41
  ^bb39:  // pred: ^bb37
    %c1_i32_112 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_112) : (i32) -> ()
    cf.br ^bb38
  ^bb40:  // 2 preds: ^bb38, ^bb41
    %226 = llvm.getelementptr %16[%220] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %227 = llvm.load volatile %226 {alignment = 1 : i64} : !llvm.ptr -> i64
    %228 = arith.addi %215, %227 : i64
    llvm.store %228, %9 : i64, !llvm.ptr
    %229 = llvm.load %6 : !llvm.ptr -> i32
    %230 = arith.extui %229 : i32 to i64
    %c1_i64 = arith.constant 1 : i64
    %231 = arith.andi %230, %c1_i64 : i64
    %232 = arith.addi %228, %231 : i64
    llvm.store %232, %10 : i64, !llvm.ptr
    %c0_i64_113 = arith.constant 0 : i64
    %233 = arith.extui %205 : i32 to i64
    %234 = arith.addi %233, %c0_i64_113 : i64
    %c8_i64_114 = arith.constant 8 : i64
    %235 = arith.addi %234, %c8_i64_114 : i64
    %c0_i32_115 = arith.constant 0 : i32
    %236 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_115) : (!llvm.ptr, i32) -> i32
    %237 = arith.extui %236 : i32 to i64
    %c65536_i64_116 = arith.constant 65536 : i64
    %238 = arith.muli %237, %c65536_i64_116 : i64
    %239 = arith.cmpi ult, %235, %238 : i64
    cf.cond_br %239, ^bb42, ^bb43
  ^bb41:  // pred: ^bb38
    %c1_i32_117 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_117) : (i32) -> ()
    cf.br ^bb40
  ^bb42:  // 2 preds: ^bb40, ^bb43
    %240 = llvm.getelementptr %16[%234] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %232, %240 {alignment = 1 : i64} : i64, !llvm.ptr
    %241 = llvm.load %9 : !llvm.ptr -> i64
    %242 = llvm.load %8 : !llvm.ptr -> i64
    %243 = arith.cmpi ult, %241, %242 : i64
    %244 = arith.extui %243 : i1 to i64
    %245 = arith.trunci %244 : i64 to i32
    %246 = llvm.load %10 : !llvm.ptr -> i64
    %247 = llvm.load %9 : !llvm.ptr -> i64
    %248 = arith.cmpi ult, %246, %247 : i64
    %249 = arith.extui %248 : i1 to i64
    %250 = arith.trunci %249 : i64 to i32
    %251 = arith.ori %245, %250 : i32
    llvm.store %251, %6 : i32, !llvm.ptr
    %252 = llvm.load %5 : !llvm.ptr -> i32
    %c8_i32_118 = arith.constant 8 : i32
    %253 = arith.addi %252, %c8_i32_118 : i32
    llvm.store %253, %5 : i32, !llvm.ptr
    %c32_i32 = arith.constant 32 : i32
    %254 = arith.cmpi eq, %253, %c32_i32 : i32
    %255 = arith.extui %254 : i1 to i32
    %c0_i32_119 = arith.constant 0 : i32
    %256 = arith.cmpi eq, %255, %c0_i32_119 : i32
    %257 = arith.extui %256 : i1 to i32
    %c0_i32_120 = arith.constant 0 : i32
    %258 = arith.cmpi ne, %257, %c0_i32_120 : i32
    cf.cond_br %258, ^bb37, ^bb44
  ^bb43:  // pred: ^bb40
    %c1_i32_121 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_121) : (i32) -> ()
    cf.br ^bb42
  ^bb44:  // pred: ^bb42
    cf.br ^bb36
  ^bb45:  // 2 preds: ^bb36, ^bb46
    %259 = llvm.getelementptr %16[%196] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %260 = llvm.load volatile %259 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_122 = arith.constant 0 : i64
    %261 = arith.extui %191 : i32 to i64
    %262 = arith.addi %261, %c0_i64_122 : i64
    %c8_i64_123 = arith.constant 8 : i64
    %263 = arith.addi %262, %c8_i64_123 : i64
    %c0_i32_124 = arith.constant 0 : i32
    %264 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_124) : (!llvm.ptr, i32) -> i32
    %265 = arith.extui %264 : i32 to i64
    %c65536_i64_125 = arith.constant 65536 : i64
    %266 = arith.muli %265, %c65536_i64_125 : i64
    %267 = arith.cmpi ult, %263, %266 : i64
    cf.cond_br %267, ^bb47, ^bb48
  ^bb46:  // pred: ^bb36
    %c1_i32_126 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_126) : (i32) -> ()
    cf.br ^bb45
  ^bb47:  // 2 preds: ^bb45, ^bb48
    %268 = llvm.getelementptr %16[%262] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %260, %268 {alignment = 1 : i64} : i64, !llvm.ptr
    %269 = llvm.load %4 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %270 = arith.addi %269, %c64_i32 : i32
    %271 = llvm.load %4 : !llvm.ptr -> i32
    %c88_i32_127 = arith.constant 88 : i32
    %272 = arith.addi %271, %c88_i32_127 : i32
    %c16_i32_128 = arith.constant 16 : i32
    %273 = arith.addi %272, %c16_i32_128 : i32
    %c0_i64_129 = arith.constant 0 : i64
    %274 = arith.extui %273 : i32 to i64
    %275 = arith.addi %274, %c0_i64_129 : i64
    %c8_i64_130 = arith.constant 8 : i64
    %276 = arith.addi %275, %c8_i64_130 : i64
    %c0_i32_131 = arith.constant 0 : i32
    %277 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_131) : (!llvm.ptr, i32) -> i32
    %278 = arith.extui %277 : i32 to i64
    %c65536_i64_132 = arith.constant 65536 : i64
    %279 = arith.muli %278, %c65536_i64_132 : i64
    %280 = arith.cmpi ult, %276, %279 : i64
    cf.cond_br %280, ^bb49, ^bb50
  ^bb48:  // pred: ^bb45
    %c1_i32_133 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_133) : (i32) -> ()
    cf.br ^bb47
  ^bb49:  // 2 preds: ^bb47, ^bb50
    %281 = llvm.getelementptr %16[%275] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %282 = llvm.load volatile %281 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_134 = arith.constant 0 : i64
    %283 = arith.extui %270 : i32 to i64
    %284 = arith.addi %283, %c0_i64_134 : i64
    %c8_i64_135 = arith.constant 8 : i64
    %285 = arith.addi %284, %c8_i64_135 : i64
    %c0_i32_136 = arith.constant 0 : i32
    %286 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_136) : (!llvm.ptr, i32) -> i32
    %287 = arith.extui %286 : i32 to i64
    %c65536_i64_137 = arith.constant 65536 : i64
    %288 = arith.muli %287, %c65536_i64_137 : i64
    %289 = arith.cmpi ult, %285, %288 : i64
    cf.cond_br %289, ^bb51, ^bb52
  ^bb50:  // pred: ^bb47
    %c1_i32_138 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_138) : (i32) -> ()
    cf.br ^bb49
  ^bb51:  // 2 preds: ^bb49, ^bb52
    %290 = llvm.getelementptr %16[%284] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %282, %290 {alignment = 1 : i64} : i64, !llvm.ptr
    %291 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i32_139 = arith.constant 8 : i32
    %292 = arith.addi %291, %c8_i32_139 : i32
    %c64_i32_140 = arith.constant 64 : i32
    %293 = arith.addi %292, %c64_i32_140 : i32
    %294 = llvm.load %4 : !llvm.ptr -> i32
    %c88_i32_141 = arith.constant 88 : i32
    %295 = arith.addi %294, %c88_i32_141 : i32
    %c24_i32_142 = arith.constant 24 : i32
    %296 = arith.addi %295, %c24_i32_142 : i32
    %c0_i64_143 = arith.constant 0 : i64
    %297 = arith.extui %296 : i32 to i64
    %298 = arith.addi %297, %c0_i64_143 : i64
    %c8_i64_144 = arith.constant 8 : i64
    %299 = arith.addi %298, %c8_i64_144 : i64
    %c0_i32_145 = arith.constant 0 : i32
    %300 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_145) : (!llvm.ptr, i32) -> i32
    %301 = arith.extui %300 : i32 to i64
    %c65536_i64_146 = arith.constant 65536 : i64
    %302 = arith.muli %301, %c65536_i64_146 : i64
    %303 = arith.cmpi ult, %299, %302 : i64
    cf.cond_br %303, ^bb53, ^bb54
  ^bb52:  // pred: ^bb49
    %c1_i32_147 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_147) : (i32) -> ()
    cf.br ^bb51
  ^bb53:  // 2 preds: ^bb51, ^bb54
    %304 = llvm.getelementptr %16[%298] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %305 = llvm.load volatile %304 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_148 = arith.constant 0 : i64
    %306 = arith.extui %293 : i32 to i64
    %307 = arith.addi %306, %c0_i64_148 : i64
    %c8_i64_149 = arith.constant 8 : i64
    %308 = arith.addi %307, %c8_i64_149 : i64
    %c0_i32_150 = arith.constant 0 : i32
    %309 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_150) : (!llvm.ptr, i32) -> i32
    %310 = arith.extui %309 : i32 to i64
    %c65536_i64_151 = arith.constant 65536 : i64
    %311 = arith.muli %310, %c65536_i64_151 : i64
    %312 = arith.cmpi ult, %308, %311 : i64
    cf.cond_br %312, ^bb55, ^bb56
  ^bb54:  // pred: ^bb51
    %c1_i32_152 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_152) : (i32) -> ()
    cf.br ^bb53
  ^bb55:  // 2 preds: ^bb53, ^bb56
    %313 = llvm.getelementptr %16[%307] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %305, %313 {alignment = 1 : i64} : i64, !llvm.ptr
    %314 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i64_153 = arith.constant 1 : i64
    %c40_i64_154 = arith.constant 40 : i64
    %315 = arith.extui %314 : i32 to i64
    %316 = arith.addi %315, %c40_i64_154 : i64
    %c8_i64_155 = arith.constant 8 : i64
    %317 = arith.addi %316, %c8_i64_155 : i64
    %c0_i32_156 = arith.constant 0 : i32
    %318 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_156) : (!llvm.ptr, i32) -> i32
    %319 = arith.extui %318 : i32 to i64
    %c65536_i64_157 = arith.constant 65536 : i64
    %320 = arith.muli %319, %c65536_i64_157 : i64
    %321 = arith.cmpi ult, %317, %320 : i64
    cf.cond_br %321, ^bb57, ^bb58
  ^bb56:  // pred: ^bb53
    %c1_i32_158 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_158) : (i32) -> ()
    cf.br ^bb55
  ^bb57:  // 2 preds: ^bb55, ^bb58
    %322 = llvm.getelementptr %16[%316] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_153, %322 {alignment = 1 : i64} : i64, !llvm.ptr
    %323 = llvm.load %4 : !llvm.ptr -> i32
    %324 = llvm.load %4 : !llvm.ptr -> i32
    %c88_i64_159 = arith.constant 88 : i64
    %325 = arith.extui %324 : i32 to i64
    %326 = arith.addi %325, %c88_i64_159 : i64
    %c8_i64_160 = arith.constant 8 : i64
    %327 = arith.addi %326, %c8_i64_160 : i64
    %c0_i32_161 = arith.constant 0 : i32
    %328 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_161) : (!llvm.ptr, i32) -> i32
    %329 = arith.extui %328 : i32 to i64
    %c65536_i64_162 = arith.constant 65536 : i64
    %330 = arith.muli %329, %c65536_i64_162 : i64
    %331 = arith.cmpi ult, %327, %330 : i64
    cf.cond_br %331, ^bb59, ^bb60
  ^bb58:  // pred: ^bb55
    %c1_i32_163 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_163) : (i32) -> ()
    cf.br ^bb57
  ^bb59:  // 2 preds: ^bb57, ^bb60
    %332 = llvm.getelementptr %16[%326] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %333 = llvm.load volatile %332 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c48_i64 = arith.constant 48 : i64
    %334 = arith.extui %323 : i32 to i64
    %335 = arith.addi %334, %c48_i64 : i64
    %c8_i64_164 = arith.constant 8 : i64
    %336 = arith.addi %335, %c8_i64_164 : i64
    %c0_i32_165 = arith.constant 0 : i32
    %337 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_165) : (!llvm.ptr, i32) -> i32
    %338 = arith.extui %337 : i32 to i64
    %c65536_i64_166 = arith.constant 65536 : i64
    %339 = arith.muli %338, %c65536_i64_166 : i64
    %340 = arith.cmpi ult, %336, %339 : i64
    cf.cond_br %340, ^bb61, ^bb62
  ^bb60:  // pred: ^bb57
    %c1_i32_167 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_167) : (i32) -> ()
    cf.br ^bb59
  ^bb61:  // 2 preds: ^bb59, ^bb62
    %341 = llvm.getelementptr %16[%335] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %333, %341 {alignment = 1 : i64} : i64, !llvm.ptr
    %342 = llvm.load %4 : !llvm.ptr -> i32
    %c152_i32_168 = arith.constant 152 : i32
    %343 = arith.addi %342, %c152_i32_168 : i32
    %c24_i32_169 = arith.constant 24 : i32
    %344 = arith.addi %343, %c24_i32_169 : i32
    %345 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i32_170 = arith.constant 8 : i32
    %346 = arith.addi %345, %c8_i32_170 : i32
    %c24_i32_171 = arith.constant 24 : i32
    %347 = arith.addi %346, %c24_i32_171 : i32
    %c0_i64_172 = arith.constant 0 : i64
    %348 = arith.extui %347 : i32 to i64
    %349 = arith.addi %348, %c0_i64_172 : i64
    %c8_i64_173 = arith.constant 8 : i64
    %350 = arith.addi %349, %c8_i64_173 : i64
    %c0_i32_174 = arith.constant 0 : i32
    %351 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_174) : (!llvm.ptr, i32) -> i32
    %352 = arith.extui %351 : i32 to i64
    %c65536_i64_175 = arith.constant 65536 : i64
    %353 = arith.muli %352, %c65536_i64_175 : i64
    %354 = arith.cmpi ult, %350, %353 : i64
    cf.cond_br %354, ^bb63, ^bb64
  ^bb62:  // pred: ^bb59
    %c1_i32_176 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_176) : (i32) -> ()
    cf.br ^bb61
  ^bb63:  // 2 preds: ^bb61, ^bb64
    %355 = llvm.getelementptr %16[%349] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %356 = llvm.load volatile %355 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_177 = arith.constant 0 : i64
    %357 = arith.extui %344 : i32 to i64
    %358 = arith.addi %357, %c0_i64_177 : i64
    %c8_i64_178 = arith.constant 8 : i64
    %359 = arith.addi %358, %c8_i64_178 : i64
    %c0_i32_179 = arith.constant 0 : i32
    %360 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_179) : (!llvm.ptr, i32) -> i32
    %361 = arith.extui %360 : i32 to i64
    %c65536_i64_180 = arith.constant 65536 : i64
    %362 = arith.muli %361, %c65536_i64_180 : i64
    %363 = arith.cmpi ult, %359, %362 : i64
    cf.cond_br %363, ^bb65, ^bb66
  ^bb64:  // pred: ^bb61
    %c1_i32_181 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_181) : (i32) -> ()
    cf.br ^bb63
  ^bb65:  // 2 preds: ^bb63, ^bb66
    %364 = llvm.getelementptr %16[%358] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %356, %364 {alignment = 1 : i64} : i64, !llvm.ptr
    %365 = llvm.load %4 : !llvm.ptr -> i32
    %c152_i32_182 = arith.constant 152 : i32
    %366 = arith.addi %365, %c152_i32_182 : i32
    %c16_i32_183 = arith.constant 16 : i32
    %367 = arith.addi %366, %c16_i32_183 : i32
    %368 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i32_184 = arith.constant 8 : i32
    %369 = arith.addi %368, %c8_i32_184 : i32
    %c16_i32_185 = arith.constant 16 : i32
    %370 = arith.addi %369, %c16_i32_185 : i32
    %c0_i64_186 = arith.constant 0 : i64
    %371 = arith.extui %370 : i32 to i64
    %372 = arith.addi %371, %c0_i64_186 : i64
    %c8_i64_187 = arith.constant 8 : i64
    %373 = arith.addi %372, %c8_i64_187 : i64
    %c0_i32_188 = arith.constant 0 : i32
    %374 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_188) : (!llvm.ptr, i32) -> i32
    %375 = arith.extui %374 : i32 to i64
    %c65536_i64_189 = arith.constant 65536 : i64
    %376 = arith.muli %375, %c65536_i64_189 : i64
    %377 = arith.cmpi ult, %373, %376 : i64
    cf.cond_br %377, ^bb67, ^bb68
  ^bb66:  // pred: ^bb63
    %c1_i32_190 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_190) : (i32) -> ()
    cf.br ^bb65
  ^bb67:  // 2 preds: ^bb65, ^bb68
    %378 = llvm.getelementptr %16[%372] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %379 = llvm.load volatile %378 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_191 = arith.constant 0 : i64
    %380 = arith.extui %367 : i32 to i64
    %381 = arith.addi %380, %c0_i64_191 : i64
    %c8_i64_192 = arith.constant 8 : i64
    %382 = arith.addi %381, %c8_i64_192 : i64
    %c0_i32_193 = arith.constant 0 : i32
    %383 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_193) : (!llvm.ptr, i32) -> i32
    %384 = arith.extui %383 : i32 to i64
    %c65536_i64_194 = arith.constant 65536 : i64
    %385 = arith.muli %384, %c65536_i64_194 : i64
    %386 = arith.cmpi ult, %382, %385 : i64
    cf.cond_br %386, ^bb69, ^bb70
  ^bb68:  // pred: ^bb65
    %c1_i32_195 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_195) : (i32) -> ()
    cf.br ^bb67
  ^bb69:  // 2 preds: ^bb67, ^bb70
    %387 = llvm.getelementptr %16[%381] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %379, %387 {alignment = 1 : i64} : i64, !llvm.ptr
    %388 = llvm.load %4 : !llvm.ptr -> i32
    %c152_i32_196 = arith.constant 152 : i32
    %389 = arith.addi %388, %c152_i32_196 : i32
    %c8_i32_197 = arith.constant 8 : i32
    %390 = arith.addi %389, %c8_i32_197 : i32
    %391 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i32_198 = arith.constant 8 : i32
    %392 = arith.addi %391, %c8_i32_198 : i32
    %c8_i32_199 = arith.constant 8 : i32
    %393 = arith.addi %392, %c8_i32_199 : i32
    %c0_i64_200 = arith.constant 0 : i64
    %394 = arith.extui %393 : i32 to i64
    %395 = arith.addi %394, %c0_i64_200 : i64
    %c8_i64_201 = arith.constant 8 : i64
    %396 = arith.addi %395, %c8_i64_201 : i64
    %c0_i32_202 = arith.constant 0 : i32
    %397 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_202) : (!llvm.ptr, i32) -> i32
    %398 = arith.extui %397 : i32 to i64
    %c65536_i64_203 = arith.constant 65536 : i64
    %399 = arith.muli %398, %c65536_i64_203 : i64
    %400 = arith.cmpi ult, %396, %399 : i64
    cf.cond_br %400, ^bb71, ^bb72
  ^bb70:  // pred: ^bb67
    %c1_i32_204 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_204) : (i32) -> ()
    cf.br ^bb69
  ^bb71:  // 2 preds: ^bb69, ^bb72
    %401 = llvm.getelementptr %16[%395] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %402 = llvm.load volatile %401 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_205 = arith.constant 0 : i64
    %403 = arith.extui %390 : i32 to i64
    %404 = arith.addi %403, %c0_i64_205 : i64
    %c8_i64_206 = arith.constant 8 : i64
    %405 = arith.addi %404, %c8_i64_206 : i64
    %c0_i32_207 = arith.constant 0 : i32
    %406 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_207) : (!llvm.ptr, i32) -> i32
    %407 = arith.extui %406 : i32 to i64
    %c65536_i64_208 = arith.constant 65536 : i64
    %408 = arith.muli %407, %c65536_i64_208 : i64
    %409 = arith.cmpi ult, %405, %408 : i64
    cf.cond_br %409, ^bb73, ^bb74
  ^bb72:  // pred: ^bb69
    %c1_i32_209 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_209) : (i32) -> ()
    cf.br ^bb71
  ^bb73:  // 2 preds: ^bb71, ^bb74
    %410 = llvm.getelementptr %16[%404] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %402, %410 {alignment = 1 : i64} : i64, !llvm.ptr
    %411 = llvm.load %4 : !llvm.ptr -> i32
    %412 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i64_210 = arith.constant 8 : i64
    %413 = arith.extui %412 : i32 to i64
    %414 = arith.addi %413, %c8_i64_210 : i64
    %c8_i64_211 = arith.constant 8 : i64
    %415 = arith.addi %414, %c8_i64_211 : i64
    %c0_i32_212 = arith.constant 0 : i32
    %416 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_212) : (!llvm.ptr, i32) -> i32
    %417 = arith.extui %416 : i32 to i64
    %c65536_i64_213 = arith.constant 65536 : i64
    %418 = arith.muli %417, %c65536_i64_213 : i64
    %419 = arith.cmpi ult, %415, %418 : i64
    cf.cond_br %419, ^bb75, ^bb76
  ^bb74:  // pred: ^bb71
    %c1_i32_214 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_214) : (i32) -> ()
    cf.br ^bb73
  ^bb75:  // 2 preds: ^bb73, ^bb76
    %420 = llvm.getelementptr %16[%414] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %421 = llvm.load volatile %420 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c152_i64_215 = arith.constant 152 : i64
    %422 = arith.extui %411 : i32 to i64
    %423 = arith.addi %422, %c152_i64_215 : i64
    %c8_i64_216 = arith.constant 8 : i64
    %424 = arith.addi %423, %c8_i64_216 : i64
    %c0_i32_217 = arith.constant 0 : i32
    %425 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_217) : (!llvm.ptr, i32) -> i32
    %426 = arith.extui %425 : i32 to i64
    %c65536_i64_218 = arith.constant 65536 : i64
    %427 = arith.muli %426, %c65536_i64_218 : i64
    %428 = arith.cmpi ult, %424, %427 : i64
    cf.cond_br %428, ^bb77, ^bb78
  ^bb76:  // pred: ^bb73
    %c1_i32_219 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_219) : (i32) -> ()
    cf.br ^bb75
  ^bb77:  // 2 preds: ^bb75, ^bb78
    %429 = llvm.getelementptr %16[%423] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %421, %429 {alignment = 1 : i64} : i64, !llvm.ptr
    %430 = llvm.load %4 : !llvm.ptr -> i32
    %c152_i32_220 = arith.constant 152 : i32
    %431 = arith.addi %430, %c152_i32_220 : i32
    %432 = llvm.load %5 : !llvm.ptr -> i32
    %433 = llvm.load %4 : !llvm.ptr -> i32
    %c88_i32_221 = arith.constant 88 : i32
    %434 = arith.addi %433, %c88_i32_221 : i32
    call @f32(%arg0, %431, %432, %434) : (!llvm.ptr, i32, i32, i32) -> ()
    %435 = llvm.load %1 : !llvm.ptr -> i32
    %c64_i32_222 = arith.constant 64 : i32
    %436 = arith.addi %435, %c64_i32_222 : i32
    llvm.store %436, %11 : i32, !llvm.ptr
    %437 = llvm.load %1 : !llvm.ptr -> i32
    %c96_i64 = arith.constant 96 : i64
    %438 = arith.extui %437 : i32 to i64
    %439 = arith.addi %438, %c96_i64 : i64
    %c4_i64_223 = arith.constant 4 : i64
    %440 = arith.addi %439, %c4_i64_223 : i64
    %c0_i32_224 = arith.constant 0 : i32
    %441 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_224) : (!llvm.ptr, i32) -> i32
    %442 = arith.extui %441 : i32 to i64
    %c65536_i64_225 = arith.constant 65536 : i64
    %443 = arith.muli %442, %c65536_i64_225 : i64
    %444 = arith.cmpi ult, %440, %443 : i64
    cf.cond_br %444, ^bb81, ^bb82
  ^bb78:  // pred: ^bb75
    %c1_i32_226 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_226) : (i32) -> ()
    cf.br ^bb77
  ^bb79:  // 2 preds: ^bb80, ^bb83
    %445 = llvm.load %4 : !llvm.ptr -> i32
    %c120_i32 = arith.constant 120 : i32
    %446 = arith.addi %445, %c120_i32 : i32
    %c24_i32_227 = arith.constant 24 : i32
    %447 = arith.addi %446, %c24_i32_227 : i32
    %448 = llvm.load %5 : !llvm.ptr -> i32
    %c24_i32_228 = arith.constant 24 : i32
    %449 = arith.addi %448, %c24_i32_228 : i32
    %c0_i64_229 = arith.constant 0 : i64
    %450 = arith.extui %449 : i32 to i64
    %451 = arith.addi %450, %c0_i64_229 : i64
    %c8_i64_230 = arith.constant 8 : i64
    %452 = arith.addi %451, %c8_i64_230 : i64
    %c0_i32_231 = arith.constant 0 : i32
    %453 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_231) : (!llvm.ptr, i32) -> i32
    %454 = arith.extui %453 : i32 to i64
    %c65536_i64_232 = arith.constant 65536 : i64
    %455 = arith.muli %454, %c65536_i64_232 : i64
    %456 = arith.cmpi ult, %452, %455 : i64
    cf.cond_br %456, ^bb84, ^bb85
  ^bb80:  // pred: ^bb81
    %457 = llvm.load %1 : !llvm.ptr -> i32
    %c104_i32 = arith.constant 104 : i32
    %458 = arith.addi %457, %c104_i32 : i32
    llvm.store %458, %5 : i32, !llvm.ptr
    cf.br ^bb79
  ^bb81:  // 2 preds: ^bb77, ^bb82
    %459 = llvm.getelementptr %16[%439] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %460 = llvm.load volatile %459 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_233 = arith.constant 0 : i32
    %461 = arith.cmpi ne, %460, %c0_i32_233 : i32
    cf.cond_br %461, ^bb80, ^bb83
  ^bb82:  // pred: ^bb77
    %c1_i32_234 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_234) : (i32) -> ()
    cf.br ^bb81
  ^bb83:  // pred: ^bb81
    %462 = llvm.load %1 : !llvm.ptr -> i32
    %c96_i32 = arith.constant 96 : i32
    %463 = arith.addi %462, %c96_i32 : i32
    %464 = llvm.load %11 : !llvm.ptr -> i32
    %465 = call @f0(%arg0, %463, %464) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %465, %5 : i32, !llvm.ptr
    cf.br ^bb79
  ^bb84:  // 2 preds: ^bb79, ^bb85
    %466 = llvm.getelementptr %16[%451] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %467 = llvm.load volatile %466 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_235 = arith.constant 0 : i64
    %468 = arith.extui %447 : i32 to i64
    %469 = arith.addi %468, %c0_i64_235 : i64
    %c8_i64_236 = arith.constant 8 : i64
    %470 = arith.addi %469, %c8_i64_236 : i64
    %c0_i32_237 = arith.constant 0 : i32
    %471 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_237) : (!llvm.ptr, i32) -> i32
    %472 = arith.extui %471 : i32 to i64
    %c65536_i64_238 = arith.constant 65536 : i64
    %473 = arith.muli %472, %c65536_i64_238 : i64
    %474 = arith.cmpi ult, %470, %473 : i64
    cf.cond_br %474, ^bb86, ^bb87
  ^bb85:  // pred: ^bb79
    %c1_i32_239 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_239) : (i32) -> ()
    cf.br ^bb84
  ^bb86:  // 2 preds: ^bb84, ^bb87
    %475 = llvm.getelementptr %16[%469] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %467, %475 {alignment = 1 : i64} : i64, !llvm.ptr
    %476 = llvm.load %4 : !llvm.ptr -> i32
    %c120_i32_240 = arith.constant 120 : i32
    %477 = arith.addi %476, %c120_i32_240 : i32
    %c16_i32_241 = arith.constant 16 : i32
    %478 = arith.addi %477, %c16_i32_241 : i32
    %479 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32_242 = arith.constant 16 : i32
    %480 = arith.addi %479, %c16_i32_242 : i32
    %c0_i64_243 = arith.constant 0 : i64
    %481 = arith.extui %480 : i32 to i64
    %482 = arith.addi %481, %c0_i64_243 : i64
    %c8_i64_244 = arith.constant 8 : i64
    %483 = arith.addi %482, %c8_i64_244 : i64
    %c0_i32_245 = arith.constant 0 : i32
    %484 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_245) : (!llvm.ptr, i32) -> i32
    %485 = arith.extui %484 : i32 to i64
    %c65536_i64_246 = arith.constant 65536 : i64
    %486 = arith.muli %485, %c65536_i64_246 : i64
    %487 = arith.cmpi ult, %483, %486 : i64
    cf.cond_br %487, ^bb88, ^bb89
  ^bb87:  // pred: ^bb84
    %c1_i32_247 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_247) : (i32) -> ()
    cf.br ^bb86
  ^bb88:  // 2 preds: ^bb86, ^bb89
    %488 = llvm.getelementptr %16[%482] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %489 = llvm.load volatile %488 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_248 = arith.constant 0 : i64
    %490 = arith.extui %478 : i32 to i64
    %491 = arith.addi %490, %c0_i64_248 : i64
    %c8_i64_249 = arith.constant 8 : i64
    %492 = arith.addi %491, %c8_i64_249 : i64
    %c0_i32_250 = arith.constant 0 : i32
    %493 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_250) : (!llvm.ptr, i32) -> i32
    %494 = arith.extui %493 : i32 to i64
    %c65536_i64_251 = arith.constant 65536 : i64
    %495 = arith.muli %494, %c65536_i64_251 : i64
    %496 = arith.cmpi ult, %492, %495 : i64
    cf.cond_br %496, ^bb90, ^bb91
  ^bb89:  // pred: ^bb86
    %c1_i32_252 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_252) : (i32) -> ()
    cf.br ^bb88
  ^bb90:  // 2 preds: ^bb88, ^bb91
    %497 = llvm.getelementptr %16[%491] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %489, %497 {alignment = 1 : i64} : i64, !llvm.ptr
    %498 = llvm.load %4 : !llvm.ptr -> i32
    %c120_i32_253 = arith.constant 120 : i32
    %499 = arith.addi %498, %c120_i32_253 : i32
    %c8_i32_254 = arith.constant 8 : i32
    %500 = arith.addi %499, %c8_i32_254 : i32
    %501 = llvm.load %5 : !llvm.ptr -> i32
    %c8_i32_255 = arith.constant 8 : i32
    %502 = arith.addi %501, %c8_i32_255 : i32
    %c0_i64_256 = arith.constant 0 : i64
    %503 = arith.extui %502 : i32 to i64
    %504 = arith.addi %503, %c0_i64_256 : i64
    %c8_i64_257 = arith.constant 8 : i64
    %505 = arith.addi %504, %c8_i64_257 : i64
    %c0_i32_258 = arith.constant 0 : i32
    %506 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_258) : (!llvm.ptr, i32) -> i32
    %507 = arith.extui %506 : i32 to i64
    %c65536_i64_259 = arith.constant 65536 : i64
    %508 = arith.muli %507, %c65536_i64_259 : i64
    %509 = arith.cmpi ult, %505, %508 : i64
    cf.cond_br %509, ^bb92, ^bb93
  ^bb91:  // pred: ^bb88
    %c1_i32_260 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_260) : (i32) -> ()
    cf.br ^bb90
  ^bb92:  // 2 preds: ^bb90, ^bb93
    %510 = llvm.getelementptr %16[%504] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %511 = llvm.load volatile %510 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_261 = arith.constant 0 : i64
    %512 = arith.extui %500 : i32 to i64
    %513 = arith.addi %512, %c0_i64_261 : i64
    %c8_i64_262 = arith.constant 8 : i64
    %514 = arith.addi %513, %c8_i64_262 : i64
    %c0_i32_263 = arith.constant 0 : i32
    %515 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_263) : (!llvm.ptr, i32) -> i32
    %516 = arith.extui %515 : i32 to i64
    %c65536_i64_264 = arith.constant 65536 : i64
    %517 = arith.muli %516, %c65536_i64_264 : i64
    %518 = arith.cmpi ult, %514, %517 : i64
    cf.cond_br %518, ^bb94, ^bb95
  ^bb93:  // pred: ^bb90
    %c1_i32_265 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_265) : (i32) -> ()
    cf.br ^bb92
  ^bb94:  // 2 preds: ^bb92, ^bb95
    %519 = llvm.getelementptr %16[%513] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %511, %519 {alignment = 1 : i64} : i64, !llvm.ptr
    %520 = llvm.load %4 : !llvm.ptr -> i32
    %521 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64_266 = arith.constant 0 : i64
    %522 = arith.extui %521 : i32 to i64
    %523 = arith.addi %522, %c0_i64_266 : i64
    %c8_i64_267 = arith.constant 8 : i64
    %524 = arith.addi %523, %c8_i64_267 : i64
    %c0_i32_268 = arith.constant 0 : i32
    %525 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_268) : (!llvm.ptr, i32) -> i32
    %526 = arith.extui %525 : i32 to i64
    %c65536_i64_269 = arith.constant 65536 : i64
    %527 = arith.muli %526, %c65536_i64_269 : i64
    %528 = arith.cmpi ult, %524, %527 : i64
    cf.cond_br %528, ^bb96, ^bb97
  ^bb95:  // pred: ^bb92
    %c1_i32_270 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_270) : (i32) -> ()
    cf.br ^bb94
  ^bb96:  // 2 preds: ^bb94, ^bb97
    %529 = llvm.getelementptr %16[%523] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %530 = llvm.load volatile %529 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c120_i64 = arith.constant 120 : i64
    %531 = arith.extui %520 : i32 to i64
    %532 = arith.addi %531, %c120_i64 : i64
    %c8_i64_271 = arith.constant 8 : i64
    %533 = arith.addi %532, %c8_i64_271 : i64
    %c0_i32_272 = arith.constant 0 : i32
    %534 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_272) : (!llvm.ptr, i32) -> i32
    %535 = arith.extui %534 : i32 to i64
    %c65536_i64_273 = arith.constant 65536 : i64
    %536 = arith.muli %535, %c65536_i64_273 : i64
    %537 = arith.cmpi ult, %533, %536 : i64
    cf.cond_br %537, ^bb98, ^bb99
  ^bb97:  // pred: ^bb94
    %c1_i32_274 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_274) : (i32) -> ()
    cf.br ^bb96
  ^bb98:  // 2 preds: ^bb96, ^bb99
    %538 = llvm.getelementptr %16[%532] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %530, %538 {alignment = 1 : i64} : i64, !llvm.ptr
    %c0_i32_275 = arith.constant 0 : i32
    llvm.store %c0_i32_275, %5 : i32, !llvm.ptr
    %c0_i32_276 = arith.constant 0 : i32
    llvm.store %c0_i32_276, %6 : i32, !llvm.ptr
    cf.br ^bb101
  ^bb99:  // pred: ^bb96
    %c1_i32_277 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_277) : (i32) -> ()
    cf.br ^bb98
  ^bb100:  // pred: ^bb108
    %539 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_278 = arith.constant 1 : i64
    %c96_i64_279 = arith.constant 96 : i64
    %540 = arith.extui %539 : i32 to i64
    %541 = arith.addi %540, %c96_i64_279 : i64
    %c8_i64_280 = arith.constant 8 : i64
    %542 = arith.addi %541, %c8_i64_280 : i64
    %c0_i32_281 = arith.constant 0 : i32
    %543 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_281) : (!llvm.ptr, i32) -> i32
    %544 = arith.extui %543 : i32 to i64
    %c65536_i64_282 = arith.constant 65536 : i64
    %545 = arith.muli %544, %c65536_i64_282 : i64
    %546 = arith.cmpi ult, %542, %545 : i64
    cf.cond_br %546, ^bb109, ^bb110
  ^bb101:  // 2 preds: ^bb98, ^bb106
    %547 = llvm.load %4 : !llvm.ptr -> i32
    %c120_i32_283 = arith.constant 120 : i32
    %548 = arith.addi %547, %c120_i32_283 : i32
    %549 = llvm.load %5 : !llvm.ptr -> i32
    %550 = arith.addi %548, %549 : i32
    llvm.store %550, %7 : i32, !llvm.ptr
    %551 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_284 = arith.constant 0 : i64
    %552 = arith.extui %551 : i32 to i64
    %553 = arith.addi %552, %c0_i64_284 : i64
    %c8_i64_285 = arith.constant 8 : i64
    %554 = arith.addi %553, %c8_i64_285 : i64
    %c0_i32_286 = arith.constant 0 : i32
    %555 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_286) : (!llvm.ptr, i32) -> i32
    %556 = arith.extui %555 : i32 to i64
    %c65536_i64_287 = arith.constant 65536 : i64
    %557 = arith.muli %556, %c65536_i64_287 : i64
    %558 = arith.cmpi ult, %554, %557 : i64
    cf.cond_br %558, ^bb102, ^bb103
  ^bb102:  // 2 preds: ^bb101, ^bb103
    %559 = llvm.getelementptr %16[%553] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %560 = llvm.load volatile %559 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %560, %8 : i64, !llvm.ptr
    %561 = llvm.load %3 : !llvm.ptr -> i32
    %562 = llvm.load %5 : !llvm.ptr -> i32
    %563 = arith.addi %561, %562 : i32
    %c0_i64_288 = arith.constant 0 : i64
    %564 = arith.extui %563 : i32 to i64
    %565 = arith.addi %564, %c0_i64_288 : i64
    %c8_i64_289 = arith.constant 8 : i64
    %566 = arith.addi %565, %c8_i64_289 : i64
    %c0_i32_290 = arith.constant 0 : i32
    %567 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_290) : (!llvm.ptr, i32) -> i32
    %568 = arith.extui %567 : i32 to i64
    %c65536_i64_291 = arith.constant 65536 : i64
    %569 = arith.muli %568, %c65536_i64_291 : i64
    %570 = arith.cmpi ult, %566, %569 : i64
    cf.cond_br %570, ^bb104, ^bb105
  ^bb103:  // pred: ^bb101
    %c1_i32_292 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_292) : (i32) -> ()
    cf.br ^bb102
  ^bb104:  // 2 preds: ^bb102, ^bb105
    %571 = llvm.getelementptr %16[%565] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %572 = llvm.load volatile %571 {alignment = 1 : i64} : !llvm.ptr -> i64
    %573 = arith.addi %560, %572 : i64
    llvm.store %573, %9 : i64, !llvm.ptr
    %574 = llvm.load %6 : !llvm.ptr -> i32
    %575 = arith.extui %574 : i32 to i64
    %c1_i64_293 = arith.constant 1 : i64
    %576 = arith.andi %575, %c1_i64_293 : i64
    %577 = arith.addi %573, %576 : i64
    llvm.store %577, %10 : i64, !llvm.ptr
    %c0_i64_294 = arith.constant 0 : i64
    %578 = arith.extui %550 : i32 to i64
    %579 = arith.addi %578, %c0_i64_294 : i64
    %c8_i64_295 = arith.constant 8 : i64
    %580 = arith.addi %579, %c8_i64_295 : i64
    %c0_i32_296 = arith.constant 0 : i32
    %581 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_296) : (!llvm.ptr, i32) -> i32
    %582 = arith.extui %581 : i32 to i64
    %c65536_i64_297 = arith.constant 65536 : i64
    %583 = arith.muli %582, %c65536_i64_297 : i64
    %584 = arith.cmpi ult, %580, %583 : i64
    cf.cond_br %584, ^bb106, ^bb107
  ^bb105:  // pred: ^bb102
    %c1_i32_298 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_298) : (i32) -> ()
    cf.br ^bb104
  ^bb106:  // 2 preds: ^bb104, ^bb107
    %585 = llvm.getelementptr %16[%579] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %577, %585 {alignment = 1 : i64} : i64, !llvm.ptr
    %586 = llvm.load %9 : !llvm.ptr -> i64
    %587 = llvm.load %8 : !llvm.ptr -> i64
    %588 = arith.cmpi ult, %586, %587 : i64
    %589 = arith.extui %588 : i1 to i64
    %590 = arith.trunci %589 : i64 to i32
    %591 = llvm.load %10 : !llvm.ptr -> i64
    %592 = llvm.load %9 : !llvm.ptr -> i64
    %593 = arith.cmpi ult, %591, %592 : i64
    %594 = arith.extui %593 : i1 to i64
    %595 = arith.trunci %594 : i64 to i32
    %596 = arith.ori %590, %595 : i32
    llvm.store %596, %6 : i32, !llvm.ptr
    %597 = llvm.load %5 : !llvm.ptr -> i32
    %c8_i32_299 = arith.constant 8 : i32
    %598 = arith.addi %597, %c8_i32_299 : i32
    llvm.store %598, %5 : i32, !llvm.ptr
    %c32_i32_300 = arith.constant 32 : i32
    %599 = arith.cmpi eq, %598, %c32_i32_300 : i32
    %600 = arith.extui %599 : i1 to i32
    %c0_i32_301 = arith.constant 0 : i32
    %601 = arith.cmpi eq, %600, %c0_i32_301 : i32
    %602 = arith.extui %601 : i1 to i32
    %c0_i32_302 = arith.constant 0 : i32
    %603 = arith.cmpi ne, %602, %c0_i32_302 : i32
    cf.cond_br %603, ^bb101, ^bb108
  ^bb107:  // pred: ^bb104
    %c1_i32_303 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_303) : (i32) -> ()
    cf.br ^bb106
  ^bb108:  // pred: ^bb106
    cf.br ^bb100
  ^bb109:  // 2 preds: ^bb100, ^bb110
    %604 = llvm.getelementptr %16[%541] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_278, %604 {alignment = 1 : i64} : i64, !llvm.ptr
    %605 = llvm.load %1 : !llvm.ptr -> i32
    %606 = llvm.load %4 : !llvm.ptr -> i32
    %c120_i64_304 = arith.constant 120 : i64
    %607 = arith.extui %606 : i32 to i64
    %608 = arith.addi %607, %c120_i64_304 : i64
    %c8_i64_305 = arith.constant 8 : i64
    %609 = arith.addi %608, %c8_i64_305 : i64
    %c0_i32_306 = arith.constant 0 : i32
    %610 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_306) : (!llvm.ptr, i32) -> i32
    %611 = arith.extui %610 : i32 to i64
    %c65536_i64_307 = arith.constant 65536 : i64
    %612 = arith.muli %611, %c65536_i64_307 : i64
    %613 = arith.cmpi ult, %609, %612 : i64
    cf.cond_br %613, ^bb111, ^bb112
  ^bb110:  // pred: ^bb100
    %c1_i32_308 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_308) : (i32) -> ()
    cf.br ^bb109
  ^bb111:  // 2 preds: ^bb109, ^bb112
    %614 = llvm.getelementptr %16[%608] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %615 = llvm.load volatile %614 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c104_i64 = arith.constant 104 : i64
    %616 = arith.extui %605 : i32 to i64
    %617 = arith.addi %616, %c104_i64 : i64
    %c8_i64_309 = arith.constant 8 : i64
    %618 = arith.addi %617, %c8_i64_309 : i64
    %c0_i32_310 = arith.constant 0 : i32
    %619 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_310) : (!llvm.ptr, i32) -> i32
    %620 = arith.extui %619 : i32 to i64
    %c65536_i64_311 = arith.constant 65536 : i64
    %621 = arith.muli %620, %c65536_i64_311 : i64
    %622 = arith.cmpi ult, %618, %621 : i64
    cf.cond_br %622, ^bb113, ^bb114
  ^bb112:  // pred: ^bb109
    %c1_i32_312 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_312) : (i32) -> ()
    cf.br ^bb111
  ^bb113:  // 2 preds: ^bb111, ^bb114
    %623 = llvm.getelementptr %16[%617] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %615, %623 {alignment = 1 : i64} : i64, !llvm.ptr
    %624 = llvm.load %1 : !llvm.ptr -> i32
    %c112_i32 = arith.constant 112 : i32
    %625 = arith.addi %624, %c112_i32 : i32
    %626 = llvm.load %4 : !llvm.ptr -> i32
    %c120_i32_313 = arith.constant 120 : i32
    %627 = arith.addi %626, %c120_i32_313 : i32
    %c8_i32_314 = arith.constant 8 : i32
    %628 = arith.addi %627, %c8_i32_314 : i32
    %c0_i64_315 = arith.constant 0 : i64
    %629 = arith.extui %628 : i32 to i64
    %630 = arith.addi %629, %c0_i64_315 : i64
    %c8_i64_316 = arith.constant 8 : i64
    %631 = arith.addi %630, %c8_i64_316 : i64
    %c0_i32_317 = arith.constant 0 : i32
    %632 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_317) : (!llvm.ptr, i32) -> i32
    %633 = arith.extui %632 : i32 to i64
    %c65536_i64_318 = arith.constant 65536 : i64
    %634 = arith.muli %633, %c65536_i64_318 : i64
    %635 = arith.cmpi ult, %631, %634 : i64
    cf.cond_br %635, ^bb115, ^bb116
  ^bb114:  // pred: ^bb111
    %c1_i32_319 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_319) : (i32) -> ()
    cf.br ^bb113
  ^bb115:  // 2 preds: ^bb113, ^bb116
    %636 = llvm.getelementptr %16[%630] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %637 = llvm.load volatile %636 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_320 = arith.constant 0 : i64
    %638 = arith.extui %625 : i32 to i64
    %639 = arith.addi %638, %c0_i64_320 : i64
    %c8_i64_321 = arith.constant 8 : i64
    %640 = arith.addi %639, %c8_i64_321 : i64
    %c0_i32_322 = arith.constant 0 : i32
    %641 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_322) : (!llvm.ptr, i32) -> i32
    %642 = arith.extui %641 : i32 to i64
    %c65536_i64_323 = arith.constant 65536 : i64
    %643 = arith.muli %642, %c65536_i64_323 : i64
    %644 = arith.cmpi ult, %640, %643 : i64
    cf.cond_br %644, ^bb117, ^bb118
  ^bb116:  // pred: ^bb113
    %c1_i32_324 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_324) : (i32) -> ()
    cf.br ^bb115
  ^bb117:  // 2 preds: ^bb115, ^bb118
    %645 = llvm.getelementptr %16[%639] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %637, %645 {alignment = 1 : i64} : i64, !llvm.ptr
    %646 = llvm.load %1 : !llvm.ptr -> i32
    %c120_i32_325 = arith.constant 120 : i32
    %647 = arith.addi %646, %c120_i32_325 : i32
    %648 = llvm.load %4 : !llvm.ptr -> i32
    %c120_i32_326 = arith.constant 120 : i32
    %649 = arith.addi %648, %c120_i32_326 : i32
    %c16_i32_327 = arith.constant 16 : i32
    %650 = arith.addi %649, %c16_i32_327 : i32
    %c0_i64_328 = arith.constant 0 : i64
    %651 = arith.extui %650 : i32 to i64
    %652 = arith.addi %651, %c0_i64_328 : i64
    %c8_i64_329 = arith.constant 8 : i64
    %653 = arith.addi %652, %c8_i64_329 : i64
    %c0_i32_330 = arith.constant 0 : i32
    %654 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_330) : (!llvm.ptr, i32) -> i32
    %655 = arith.extui %654 : i32 to i64
    %c65536_i64_331 = arith.constant 65536 : i64
    %656 = arith.muli %655, %c65536_i64_331 : i64
    %657 = arith.cmpi ult, %653, %656 : i64
    cf.cond_br %657, ^bb119, ^bb120
  ^bb118:  // pred: ^bb115
    %c1_i32_332 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_332) : (i32) -> ()
    cf.br ^bb117
  ^bb119:  // 2 preds: ^bb117, ^bb120
    %658 = llvm.getelementptr %16[%652] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %659 = llvm.load volatile %658 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_333 = arith.constant 0 : i64
    %660 = arith.extui %647 : i32 to i64
    %661 = arith.addi %660, %c0_i64_333 : i64
    %c8_i64_334 = arith.constant 8 : i64
    %662 = arith.addi %661, %c8_i64_334 : i64
    %c0_i32_335 = arith.constant 0 : i32
    %663 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_335) : (!llvm.ptr, i32) -> i32
    %664 = arith.extui %663 : i32 to i64
    %c65536_i64_336 = arith.constant 65536 : i64
    %665 = arith.muli %664, %c65536_i64_336 : i64
    %666 = arith.cmpi ult, %662, %665 : i64
    cf.cond_br %666, ^bb121, ^bb122
  ^bb120:  // pred: ^bb117
    %c1_i32_337 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_337) : (i32) -> ()
    cf.br ^bb119
  ^bb121:  // 2 preds: ^bb119, ^bb122
    %667 = llvm.getelementptr %16[%661] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %659, %667 {alignment = 1 : i64} : i64, !llvm.ptr
    %668 = llvm.load %1 : !llvm.ptr -> i32
    %c128_i32 = arith.constant 128 : i32
    %669 = arith.addi %668, %c128_i32 : i32
    %670 = llvm.load %4 : !llvm.ptr -> i32
    %c120_i32_338 = arith.constant 120 : i32
    %671 = arith.addi %670, %c120_i32_338 : i32
    %c24_i32_339 = arith.constant 24 : i32
    %672 = arith.addi %671, %c24_i32_339 : i32
    %c0_i64_340 = arith.constant 0 : i64
    %673 = arith.extui %672 : i32 to i64
    %674 = arith.addi %673, %c0_i64_340 : i64
    %c8_i64_341 = arith.constant 8 : i64
    %675 = arith.addi %674, %c8_i64_341 : i64
    %c0_i32_342 = arith.constant 0 : i32
    %676 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_342) : (!llvm.ptr, i32) -> i32
    %677 = arith.extui %676 : i32 to i64
    %c65536_i64_343 = arith.constant 65536 : i64
    %678 = arith.muli %677, %c65536_i64_343 : i64
    %679 = arith.cmpi ult, %675, %678 : i64
    cf.cond_br %679, ^bb123, ^bb124
  ^bb122:  // pred: ^bb119
    %c1_i32_344 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_344) : (i32) -> ()
    cf.br ^bb121
  ^bb123:  // 2 preds: ^bb121, ^bb124
    %680 = llvm.getelementptr %16[%674] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %681 = llvm.load volatile %680 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_345 = arith.constant 0 : i64
    %682 = arith.extui %669 : i32 to i64
    %683 = arith.addi %682, %c0_i64_345 : i64
    %c8_i64_346 = arith.constant 8 : i64
    %684 = arith.addi %683, %c8_i64_346 : i64
    %c0_i32_347 = arith.constant 0 : i32
    %685 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_347) : (!llvm.ptr, i32) -> i32
    %686 = arith.extui %685 : i32 to i64
    %c65536_i64_348 = arith.constant 65536 : i64
    %687 = arith.muli %686, %c65536_i64_348 : i64
    %688 = arith.cmpi ult, %684, %687 : i64
    cf.cond_br %688, ^bb125, ^bb126
  ^bb124:  // pred: ^bb121
    %c1_i32_349 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_349) : (i32) -> ()
    cf.br ^bb123
  ^bb125:  // 2 preds: ^bb123, ^bb126
    %689 = llvm.getelementptr %16[%683] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %681, %689 {alignment = 1 : i64} : i64, !llvm.ptr
    %690 = llvm.load %4 : !llvm.ptr -> i32
    %c152_i32_350 = arith.constant 152 : i32
    %691 = arith.addi %690, %c152_i32_350 : i32
    %c24_i32_351 = arith.constant 24 : i32
    %692 = arith.addi %691, %c24_i32_351 : i32
    llvm.store %692, %5 : i32, !llvm.ptr
    %693 = llvm.load %11 : !llvm.ptr -> i32
    %c24_i32_352 = arith.constant 24 : i32
    %694 = arith.addi %693, %c24_i32_352 : i32
    %c0_i64_353 = arith.constant 0 : i64
    %695 = arith.extui %694 : i32 to i64
    %696 = arith.addi %695, %c0_i64_353 : i64
    %c8_i64_354 = arith.constant 8 : i64
    %697 = arith.addi %696, %c8_i64_354 : i64
    %c0_i32_355 = arith.constant 0 : i32
    %698 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_355) : (!llvm.ptr, i32) -> i32
    %699 = arith.extui %698 : i32 to i64
    %c65536_i64_356 = arith.constant 65536 : i64
    %700 = arith.muli %699, %c65536_i64_356 : i64
    %701 = arith.cmpi ult, %697, %700 : i64
    cf.cond_br %701, ^bb127, ^bb128
  ^bb126:  // pred: ^bb123
    %c1_i32_357 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_357) : (i32) -> ()
    cf.br ^bb125
  ^bb127:  // 2 preds: ^bb125, ^bb128
    %702 = llvm.getelementptr %16[%696] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %703 = llvm.load volatile %702 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_358 = arith.constant 0 : i64
    %704 = arith.extui %692 : i32 to i64
    %705 = arith.addi %704, %c0_i64_358 : i64
    %c8_i64_359 = arith.constant 8 : i64
    %706 = arith.addi %705, %c8_i64_359 : i64
    %c0_i32_360 = arith.constant 0 : i32
    %707 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_360) : (!llvm.ptr, i32) -> i32
    %708 = arith.extui %707 : i32 to i64
    %c65536_i64_361 = arith.constant 65536 : i64
    %709 = arith.muli %708, %c65536_i64_361 : i64
    %710 = arith.cmpi ult, %706, %709 : i64
    cf.cond_br %710, ^bb129, ^bb130
  ^bb128:  // pred: ^bb125
    %c1_i32_362 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_362) : (i32) -> ()
    cf.br ^bb127
  ^bb129:  // 2 preds: ^bb127, ^bb130
    %711 = llvm.getelementptr %16[%705] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %703, %711 {alignment = 1 : i64} : i64, !llvm.ptr
    %712 = llvm.load %4 : !llvm.ptr -> i32
    %c152_i32_363 = arith.constant 152 : i32
    %713 = arith.addi %712, %c152_i32_363 : i32
    %c16_i32_364 = arith.constant 16 : i32
    %714 = arith.addi %713, %c16_i32_364 : i32
    llvm.store %714, %6 : i32, !llvm.ptr
    %715 = llvm.load %11 : !llvm.ptr -> i32
    %c16_i32_365 = arith.constant 16 : i32
    %716 = arith.addi %715, %c16_i32_365 : i32
    %c0_i64_366 = arith.constant 0 : i64
    %717 = arith.extui %716 : i32 to i64
    %718 = arith.addi %717, %c0_i64_366 : i64
    %c8_i64_367 = arith.constant 8 : i64
    %719 = arith.addi %718, %c8_i64_367 : i64
    %c0_i32_368 = arith.constant 0 : i32
    %720 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_368) : (!llvm.ptr, i32) -> i32
    %721 = arith.extui %720 : i32 to i64
    %c65536_i64_369 = arith.constant 65536 : i64
    %722 = arith.muli %721, %c65536_i64_369 : i64
    %723 = arith.cmpi ult, %719, %722 : i64
    cf.cond_br %723, ^bb131, ^bb132
  ^bb130:  // pred: ^bb127
    %c1_i32_370 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_370) : (i32) -> ()
    cf.br ^bb129
  ^bb131:  // 2 preds: ^bb129, ^bb132
    %724 = llvm.getelementptr %16[%718] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %725 = llvm.load volatile %724 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_371 = arith.constant 0 : i64
    %726 = arith.extui %714 : i32 to i64
    %727 = arith.addi %726, %c0_i64_371 : i64
    %c8_i64_372 = arith.constant 8 : i64
    %728 = arith.addi %727, %c8_i64_372 : i64
    %c0_i32_373 = arith.constant 0 : i32
    %729 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_373) : (!llvm.ptr, i32) -> i32
    %730 = arith.extui %729 : i32 to i64
    %c65536_i64_374 = arith.constant 65536 : i64
    %731 = arith.muli %730, %c65536_i64_374 : i64
    %732 = arith.cmpi ult, %728, %731 : i64
    cf.cond_br %732, ^bb133, ^bb134
  ^bb132:  // pred: ^bb129
    %c1_i32_375 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_375) : (i32) -> ()
    cf.br ^bb131
  ^bb133:  // 2 preds: ^bb131, ^bb134
    %733 = llvm.getelementptr %16[%727] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %725, %733 {alignment = 1 : i64} : i64, !llvm.ptr
    %734 = llvm.load %4 : !llvm.ptr -> i32
    %c152_i32_376 = arith.constant 152 : i32
    %735 = arith.addi %734, %c152_i32_376 : i32
    %c8_i32_377 = arith.constant 8 : i32
    %736 = arith.addi %735, %c8_i32_377 : i32
    llvm.store %736, %7 : i32, !llvm.ptr
    %737 = llvm.load %11 : !llvm.ptr -> i32
    %c8_i32_378 = arith.constant 8 : i32
    %738 = arith.addi %737, %c8_i32_378 : i32
    %c0_i64_379 = arith.constant 0 : i64
    %739 = arith.extui %738 : i32 to i64
    %740 = arith.addi %739, %c0_i64_379 : i64
    %c8_i64_380 = arith.constant 8 : i64
    %741 = arith.addi %740, %c8_i64_380 : i64
    %c0_i32_381 = arith.constant 0 : i32
    %742 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_381) : (!llvm.ptr, i32) -> i32
    %743 = arith.extui %742 : i32 to i64
    %c65536_i64_382 = arith.constant 65536 : i64
    %744 = arith.muli %743, %c65536_i64_382 : i64
    %745 = arith.cmpi ult, %741, %744 : i64
    cf.cond_br %745, ^bb135, ^bb136
  ^bb134:  // pred: ^bb131
    %c1_i32_383 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_383) : (i32) -> ()
    cf.br ^bb133
  ^bb135:  // 2 preds: ^bb133, ^bb136
    %746 = llvm.getelementptr %16[%740] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %747 = llvm.load volatile %746 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_384 = arith.constant 0 : i64
    %748 = arith.extui %736 : i32 to i64
    %749 = arith.addi %748, %c0_i64_384 : i64
    %c8_i64_385 = arith.constant 8 : i64
    %750 = arith.addi %749, %c8_i64_385 : i64
    %c0_i32_386 = arith.constant 0 : i32
    %751 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_386) : (!llvm.ptr, i32) -> i32
    %752 = arith.extui %751 : i32 to i64
    %c65536_i64_387 = arith.constant 65536 : i64
    %753 = arith.muli %752, %c65536_i64_387 : i64
    %754 = arith.cmpi ult, %750, %753 : i64
    cf.cond_br %754, ^bb137, ^bb138
  ^bb136:  // pred: ^bb133
    %c1_i32_388 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_388) : (i32) -> ()
    cf.br ^bb135
  ^bb137:  // 2 preds: ^bb135, ^bb138
    %755 = llvm.getelementptr %16[%749] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %747, %755 {alignment = 1 : i64} : i64, !llvm.ptr
    %756 = llvm.load %4 : !llvm.ptr -> i32
    %757 = llvm.load %11 : !llvm.ptr -> i32
    %c0_i64_389 = arith.constant 0 : i64
    %758 = arith.extui %757 : i32 to i64
    %759 = arith.addi %758, %c0_i64_389 : i64
    %c8_i64_390 = arith.constant 8 : i64
    %760 = arith.addi %759, %c8_i64_390 : i64
    %c0_i32_391 = arith.constant 0 : i32
    %761 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_391) : (!llvm.ptr, i32) -> i32
    %762 = arith.extui %761 : i32 to i64
    %c65536_i64_392 = arith.constant 65536 : i64
    %763 = arith.muli %762, %c65536_i64_392 : i64
    %764 = arith.cmpi ult, %760, %763 : i64
    cf.cond_br %764, ^bb139, ^bb140
  ^bb138:  // pred: ^bb135
    %c1_i32_393 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_393) : (i32) -> ()
    cf.br ^bb137
  ^bb139:  // 2 preds: ^bb137, ^bb140
    %765 = llvm.getelementptr %16[%759] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %766 = llvm.load volatile %765 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c152_i64_394 = arith.constant 152 : i64
    %767 = arith.extui %756 : i32 to i64
    %768 = arith.addi %767, %c152_i64_394 : i64
    %c8_i64_395 = arith.constant 8 : i64
    %769 = arith.addi %768, %c8_i64_395 : i64
    %c0_i32_396 = arith.constant 0 : i32
    %770 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_396) : (!llvm.ptr, i32) -> i32
    %771 = arith.extui %770 : i32 to i64
    %c65536_i64_397 = arith.constant 65536 : i64
    %772 = arith.muli %771, %c65536_i64_397 : i64
    %773 = arith.cmpi ult, %769, %772 : i64
    cf.cond_br %773, ^bb141, ^bb142
  ^bb140:  // pred: ^bb137
    %c1_i32_398 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_398) : (i32) -> ()
    cf.br ^bb139
  ^bb141:  // 2 preds: ^bb139, ^bb142
    %774 = llvm.getelementptr %16[%768] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %766, %774 {alignment = 1 : i64} : i64, !llvm.ptr
    %775 = llvm.load %4 : !llvm.ptr -> i32
    %c152_i32_399 = arith.constant 152 : i32
    %776 = arith.addi %775, %c152_i32_399 : i32
    %777 = llvm.load %5 : !llvm.ptr -> i32
    %778 = llvm.load %4 : !llvm.ptr -> i32
    %c120_i32_400 = arith.constant 120 : i32
    %779 = arith.addi %778, %c120_i32_400 : i32
    call @f32(%arg0, %776, %777, %779) : (!llvm.ptr, i32, i32, i32) -> ()
    %780 = llvm.load %4 : !llvm.ptr -> i32
    %c200_i32 = arith.constant 200 : i32
    %781 = arith.addi %780, %c200_i32 : i32
    %c0_i32_401 = arith.constant 0 : i32
    %c0_i64_402 = arith.constant 0 : i64
    %782 = arith.extui %781 : i32 to i64
    %783 = arith.addi %782, %c0_i64_402 : i64
    %c4_i64_403 = arith.constant 4 : i64
    %784 = arith.addi %783, %c4_i64_403 : i64
    %c0_i32_404 = arith.constant 0 : i32
    %785 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_404) : (!llvm.ptr, i32) -> i32
    %786 = arith.extui %785 : i32 to i64
    %c65536_i64_405 = arith.constant 65536 : i64
    %787 = arith.muli %786, %c65536_i64_405 : i64
    %788 = arith.cmpi ult, %784, %787 : i64
    cf.cond_br %788, ^bb143, ^bb144
  ^bb142:  // pred: ^bb139
    %c1_i32_406 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_406) : (i32) -> ()
    cf.br ^bb141
  ^bb143:  // 2 preds: ^bb141, ^bb144
    %789 = llvm.getelementptr %16[%783] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_401, %789 {alignment = 1 : i64} : i32, !llvm.ptr
    %790 = llvm.load %4 : !llvm.ptr -> i32
    %c192_i32 = arith.constant 192 : i32
    %791 = arith.addi %790, %c192_i32 : i32
    %c0_i64_407 = arith.constant 0 : i64
    %c0_i64_408 = arith.constant 0 : i64
    %792 = arith.extui %791 : i32 to i64
    %793 = arith.addi %792, %c0_i64_408 : i64
    %c8_i64_409 = arith.constant 8 : i64
    %794 = arith.addi %793, %c8_i64_409 : i64
    %c0_i32_410 = arith.constant 0 : i32
    %795 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_410) : (!llvm.ptr, i32) -> i32
    %796 = arith.extui %795 : i32 to i64
    %c65536_i64_411 = arith.constant 65536 : i64
    %797 = arith.muli %796, %c65536_i64_411 : i64
    %798 = arith.cmpi ult, %794, %797 : i64
    cf.cond_br %798, ^bb145, ^bb146
  ^bb144:  // pred: ^bb141
    %c1_i32_412 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_412) : (i32) -> ()
    cf.br ^bb143
  ^bb145:  // 2 preds: ^bb143, ^bb146
    %799 = llvm.getelementptr %16[%793] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_407, %799 {alignment = 1 : i64} : i64, !llvm.ptr
    %800 = llvm.load %4 : !llvm.ptr -> i32
    %c212_i32 = arith.constant 212 : i32
    %801 = arith.addi %800, %c212_i32 : i32
    %802 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_413 = arith.constant 8 : i32
    %803 = arith.addi %802, %c8_i32_413 : i32
    %c0_i64_414 = arith.constant 0 : i64
    %804 = arith.extui %803 : i32 to i64
    %805 = arith.addi %804, %c0_i64_414 : i64
    %c8_i64_415 = arith.constant 8 : i64
    %806 = arith.addi %805, %c8_i64_415 : i64
    %c0_i32_416 = arith.constant 0 : i32
    %807 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_416) : (!llvm.ptr, i32) -> i32
    %808 = arith.extui %807 : i32 to i64
    %c65536_i64_417 = arith.constant 65536 : i64
    %809 = arith.muli %808, %c65536_i64_417 : i64
    %810 = arith.cmpi ult, %806, %809 : i64
    cf.cond_br %810, ^bb147, ^bb148
  ^bb146:  // pred: ^bb143
    %c1_i32_418 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_418) : (i32) -> ()
    cf.br ^bb145
  ^bb147:  // 2 preds: ^bb145, ^bb148
    %811 = llvm.getelementptr %16[%805] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %812 = llvm.load volatile %811 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_419 = arith.constant 0 : i64
    %813 = arith.extui %801 : i32 to i64
    %814 = arith.addi %813, %c0_i64_419 : i64
    %c8_i64_420 = arith.constant 8 : i64
    %815 = arith.addi %814, %c8_i64_420 : i64
    %c0_i32_421 = arith.constant 0 : i32
    %816 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_421) : (!llvm.ptr, i32) -> i32
    %817 = arith.extui %816 : i32 to i64
    %c65536_i64_422 = arith.constant 65536 : i64
    %818 = arith.muli %817, %c65536_i64_422 : i64
    %819 = arith.cmpi ult, %815, %818 : i64
    cf.cond_br %819, ^bb149, ^bb150
  ^bb148:  // pred: ^bb145
    %c1_i32_423 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_423) : (i32) -> ()
    cf.br ^bb147
  ^bb149:  // 2 preds: ^bb147, ^bb150
    %820 = llvm.getelementptr %16[%814] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %812, %820 {alignment = 1 : i64} : i64, !llvm.ptr
    %821 = llvm.load %4 : !llvm.ptr -> i32
    %c220_i32 = arith.constant 220 : i32
    %822 = arith.addi %821, %c220_i32 : i32
    %823 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_424 = arith.constant 16 : i32
    %824 = arith.addi %823, %c16_i32_424 : i32
    %c0_i64_425 = arith.constant 0 : i64
    %825 = arith.extui %824 : i32 to i64
    %826 = arith.addi %825, %c0_i64_425 : i64
    %c4_i64_426 = arith.constant 4 : i64
    %827 = arith.addi %826, %c4_i64_426 : i64
    %c0_i32_427 = arith.constant 0 : i32
    %828 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_427) : (!llvm.ptr, i32) -> i32
    %829 = arith.extui %828 : i32 to i64
    %c65536_i64_428 = arith.constant 65536 : i64
    %830 = arith.muli %829, %c65536_i64_428 : i64
    %831 = arith.cmpi ult, %827, %830 : i64
    cf.cond_br %831, ^bb151, ^bb152
  ^bb150:  // pred: ^bb147
    %c1_i32_429 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_429) : (i32) -> ()
    cf.br ^bb149
  ^bb151:  // 2 preds: ^bb149, ^bb152
    %832 = llvm.getelementptr %16[%826] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %833 = llvm.load volatile %832 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_430 = arith.constant 0 : i64
    %834 = arith.extui %822 : i32 to i64
    %835 = arith.addi %834, %c0_i64_430 : i64
    %c4_i64_431 = arith.constant 4 : i64
    %836 = arith.addi %835, %c4_i64_431 : i64
    %c0_i32_432 = arith.constant 0 : i32
    %837 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_432) : (!llvm.ptr, i32) -> i32
    %838 = arith.extui %837 : i32 to i64
    %c65536_i64_433 = arith.constant 65536 : i64
    %839 = arith.muli %838, %c65536_i64_433 : i64
    %840 = arith.cmpi ult, %836, %839 : i64
    cf.cond_br %840, ^bb153, ^bb154
  ^bb152:  // pred: ^bb149
    %c1_i32_434 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_434) : (i32) -> ()
    cf.br ^bb151
  ^bb153:  // 2 preds: ^bb151, ^bb154
    %841 = llvm.getelementptr %16[%835] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %833, %841 {alignment = 1 : i64} : i32, !llvm.ptr
    %842 = llvm.load %7 : !llvm.ptr -> i32
    %843 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_435 = arith.constant 8 : i32
    %844 = arith.addi %843, %c8_i32_435 : i32
    %c0_i64_436 = arith.constant 0 : i64
    %845 = arith.extui %844 : i32 to i64
    %846 = arith.addi %845, %c0_i64_436 : i64
    %c8_i64_437 = arith.constant 8 : i64
    %847 = arith.addi %846, %c8_i64_437 : i64
    %c0_i32_438 = arith.constant 0 : i32
    %848 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_438) : (!llvm.ptr, i32) -> i32
    %849 = arith.extui %848 : i32 to i64
    %c65536_i64_439 = arith.constant 65536 : i64
    %850 = arith.muli %849, %c65536_i64_439 : i64
    %851 = arith.cmpi ult, %847, %850 : i64
    cf.cond_br %851, ^bb155, ^bb156
  ^bb154:  // pred: ^bb151
    %c1_i32_440 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_440) : (i32) -> ()
    cf.br ^bb153
  ^bb155:  // 2 preds: ^bb153, ^bb156
    %852 = llvm.getelementptr %16[%846] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %853 = llvm.load volatile %852 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_441 = arith.constant 0 : i64
    %854 = arith.extui %842 : i32 to i64
    %855 = arith.addi %854, %c0_i64_441 : i64
    %c8_i64_442 = arith.constant 8 : i64
    %856 = arith.addi %855, %c8_i64_442 : i64
    %c0_i32_443 = arith.constant 0 : i32
    %857 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_443) : (!llvm.ptr, i32) -> i32
    %858 = arith.extui %857 : i32 to i64
    %c65536_i64_444 = arith.constant 65536 : i64
    %859 = arith.muli %858, %c65536_i64_444 : i64
    %860 = arith.cmpi ult, %856, %859 : i64
    cf.cond_br %860, ^bb157, ^bb158
  ^bb156:  // pred: ^bb153
    %c1_i32_445 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_445) : (i32) -> ()
    cf.br ^bb155
  ^bb157:  // 2 preds: ^bb155, ^bb158
    %861 = llvm.getelementptr %16[%855] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %853, %861 {alignment = 1 : i64} : i64, !llvm.ptr
    %862 = llvm.load %6 : !llvm.ptr -> i32
    %863 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_446 = arith.constant 16 : i32
    %864 = arith.addi %863, %c16_i32_446 : i32
    %c0_i64_447 = arith.constant 0 : i64
    %865 = arith.extui %864 : i32 to i64
    %866 = arith.addi %865, %c0_i64_447 : i64
    %c8_i64_448 = arith.constant 8 : i64
    %867 = arith.addi %866, %c8_i64_448 : i64
    %c0_i32_449 = arith.constant 0 : i32
    %868 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_449) : (!llvm.ptr, i32) -> i32
    %869 = arith.extui %868 : i32 to i64
    %c65536_i64_450 = arith.constant 65536 : i64
    %870 = arith.muli %869, %c65536_i64_450 : i64
    %871 = arith.cmpi ult, %867, %870 : i64
    cf.cond_br %871, ^bb159, ^bb160
  ^bb158:  // pred: ^bb155
    %c1_i32_451 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_451) : (i32) -> ()
    cf.br ^bb157
  ^bb159:  // 2 preds: ^bb157, ^bb160
    %872 = llvm.getelementptr %16[%866] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %873 = llvm.load volatile %872 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_452 = arith.constant 0 : i64
    %874 = arith.extui %862 : i32 to i64
    %875 = arith.addi %874, %c0_i64_452 : i64
    %c8_i64_453 = arith.constant 8 : i64
    %876 = arith.addi %875, %c8_i64_453 : i64
    %c0_i32_454 = arith.constant 0 : i32
    %877 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_454) : (!llvm.ptr, i32) -> i32
    %878 = arith.extui %877 : i32 to i64
    %c65536_i64_455 = arith.constant 65536 : i64
    %879 = arith.muli %878, %c65536_i64_455 : i64
    %880 = arith.cmpi ult, %876, %879 : i64
    cf.cond_br %880, ^bb161, ^bb162
  ^bb160:  // pred: ^bb157
    %c1_i32_456 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_456) : (i32) -> ()
    cf.br ^bb159
  ^bb161:  // 2 preds: ^bb159, ^bb162
    %881 = llvm.getelementptr %16[%875] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %873, %881 {alignment = 1 : i64} : i64, !llvm.ptr
    %882 = llvm.load %5 : !llvm.ptr -> i32
    %883 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32_457 = arith.constant 24 : i32
    %884 = arith.addi %883, %c24_i32_457 : i32
    %c0_i64_458 = arith.constant 0 : i64
    %885 = arith.extui %884 : i32 to i64
    %886 = arith.addi %885, %c0_i64_458 : i64
    %c8_i64_459 = arith.constant 8 : i64
    %887 = arith.addi %886, %c8_i64_459 : i64
    %c0_i32_460 = arith.constant 0 : i32
    %888 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_460) : (!llvm.ptr, i32) -> i32
    %889 = arith.extui %888 : i32 to i64
    %c65536_i64_461 = arith.constant 65536 : i64
    %890 = arith.muli %889, %c65536_i64_461 : i64
    %891 = arith.cmpi ult, %887, %890 : i64
    cf.cond_br %891, ^bb163, ^bb164
  ^bb162:  // pred: ^bb159
    %c1_i32_462 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_462) : (i32) -> ()
    cf.br ^bb161
  ^bb163:  // 2 preds: ^bb161, ^bb164
    %892 = llvm.getelementptr %16[%886] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %893 = llvm.load volatile %892 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_463 = arith.constant 0 : i64
    %894 = arith.extui %882 : i32 to i64
    %895 = arith.addi %894, %c0_i64_463 : i64
    %c8_i64_464 = arith.constant 8 : i64
    %896 = arith.addi %895, %c8_i64_464 : i64
    %c0_i32_465 = arith.constant 0 : i32
    %897 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_465) : (!llvm.ptr, i32) -> i32
    %898 = arith.extui %897 : i32 to i64
    %c65536_i64_466 = arith.constant 65536 : i64
    %899 = arith.muli %898, %c65536_i64_466 : i64
    %900 = arith.cmpi ult, %896, %899 : i64
    cf.cond_br %900, ^bb165, ^bb166
  ^bb164:  // pred: ^bb161
    %c1_i32_467 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_467) : (i32) -> ()
    cf.br ^bb163
  ^bb165:  // 2 preds: ^bb163, ^bb166
    %901 = llvm.getelementptr %16[%895] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %893, %901 {alignment = 1 : i64} : i64, !llvm.ptr
    %902 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_468 = arith.constant 0 : i64
    %c184_i64 = arith.constant 184 : i64
    %903 = arith.extui %902 : i32 to i64
    %904 = arith.addi %903, %c184_i64 : i64
    %c8_i64_469 = arith.constant 8 : i64
    %905 = arith.addi %904, %c8_i64_469 : i64
    %c0_i32_470 = arith.constant 0 : i32
    %906 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_470) : (!llvm.ptr, i32) -> i32
    %907 = arith.extui %906 : i32 to i64
    %c65536_i64_471 = arith.constant 65536 : i64
    %908 = arith.muli %907, %c65536_i64_471 : i64
    %909 = arith.cmpi ult, %905, %908 : i64
    cf.cond_br %909, ^bb167, ^bb168
  ^bb166:  // pred: ^bb163
    %c1_i32_472 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_472) : (i32) -> ()
    cf.br ^bb165
  ^bb167:  // 2 preds: ^bb165, ^bb168
    %910 = llvm.getelementptr %16[%904] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_468, %910 {alignment = 1 : i64} : i64, !llvm.ptr
    %911 = llvm.load %4 : !llvm.ptr -> i32
    %912 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_473 = arith.constant 0 : i64
    %913 = arith.extui %912 : i32 to i64
    %914 = arith.addi %913, %c0_i64_473 : i64
    %c8_i64_474 = arith.constant 8 : i64
    %915 = arith.addi %914, %c8_i64_474 : i64
    %c0_i32_475 = arith.constant 0 : i32
    %916 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_475) : (!llvm.ptr, i32) -> i32
    %917 = arith.extui %916 : i32 to i64
    %c65536_i64_476 = arith.constant 65536 : i64
    %918 = arith.muli %917, %c65536_i64_476 : i64
    %919 = arith.cmpi ult, %915, %918 : i64
    cf.cond_br %919, ^bb169, ^bb170
  ^bb168:  // pred: ^bb165
    %c1_i32_477 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_477) : (i32) -> ()
    cf.br ^bb167
  ^bb169:  // 2 preds: ^bb167, ^bb170
    %920 = llvm.getelementptr %16[%914] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %921 = llvm.load volatile %920 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c204_i64 = arith.constant 204 : i64
    %922 = arith.extui %911 : i32 to i64
    %923 = arith.addi %922, %c204_i64 : i64
    %c8_i64_478 = arith.constant 8 : i64
    %924 = arith.addi %923, %c8_i64_478 : i64
    %c0_i32_479 = arith.constant 0 : i32
    %925 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_479) : (!llvm.ptr, i32) -> i32
    %926 = arith.extui %925 : i32 to i64
    %c65536_i64_480 = arith.constant 65536 : i64
    %927 = arith.muli %926, %c65536_i64_480 : i64
    %928 = arith.cmpi ult, %924, %927 : i64
    cf.cond_br %928, ^bb171, ^bb172
  ^bb170:  // pred: ^bb167
    %c1_i32_481 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_481) : (i32) -> ()
    cf.br ^bb169
  ^bb171:  // 2 preds: ^bb169, ^bb172
    %929 = llvm.getelementptr %16[%923] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %921, %929 {alignment = 1 : i64} : i64, !llvm.ptr
    %930 = llvm.load %4 : !llvm.ptr -> i32
    %931 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_482 = arith.constant 0 : i64
    %932 = arith.extui %931 : i32 to i64
    %933 = arith.addi %932, %c0_i64_482 : i64
    %c8_i64_483 = arith.constant 8 : i64
    %934 = arith.addi %933, %c8_i64_483 : i64
    %c0_i32_484 = arith.constant 0 : i32
    %935 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_484) : (!llvm.ptr, i32) -> i32
    %936 = arith.extui %935 : i32 to i64
    %c65536_i64_485 = arith.constant 65536 : i64
    %937 = arith.muli %936, %c65536_i64_485 : i64
    %938 = arith.cmpi ult, %934, %937 : i64
    cf.cond_br %938, ^bb173, ^bb174
  ^bb172:  // pred: ^bb169
    %c1_i32_486 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_486) : (i32) -> ()
    cf.br ^bb171
  ^bb173:  // 2 preds: ^bb171, ^bb174
    %939 = llvm.getelementptr %16[%933] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %940 = llvm.load volatile %939 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c152_i64_487 = arith.constant 152 : i64
    %941 = arith.extui %930 : i32 to i64
    %942 = arith.addi %941, %c152_i64_487 : i64
    %c8_i64_488 = arith.constant 8 : i64
    %943 = arith.addi %942, %c8_i64_488 : i64
    %c0_i32_489 = arith.constant 0 : i32
    %944 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_489) : (!llvm.ptr, i32) -> i32
    %945 = arith.extui %944 : i32 to i64
    %c65536_i64_490 = arith.constant 65536 : i64
    %946 = arith.muli %945, %c65536_i64_490 : i64
    %947 = arith.cmpi ult, %943, %946 : i64
    cf.cond_br %947, ^bb175, ^bb176
  ^bb174:  // pred: ^bb171
    %c1_i32_491 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_491) : (i32) -> ()
    cf.br ^bb173
  ^bb175:  // 2 preds: ^bb173, ^bb176
    %948 = llvm.getelementptr %16[%942] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %940, %948 {alignment = 1 : i64} : i64, !llvm.ptr
    %949 = llvm.load %4 : !llvm.ptr -> i32
    %c152_i32_492 = arith.constant 152 : i32
    %950 = arith.addi %949, %c152_i32_492 : i32
    call @f31(%arg0, %950) : (!llvm.ptr, i32) -> ()
    %951 = llvm.load %0 : !llvm.ptr -> i32
    %c2_i64 = arith.constant 2 : i64
    %c0_i64_493 = arith.constant 0 : i64
    %952 = arith.extui %951 : i32 to i64
    %953 = arith.addi %952, %c0_i64_493 : i64
    %c8_i64_494 = arith.constant 8 : i64
    %954 = arith.addi %953, %c8_i64_494 : i64
    %c0_i32_495 = arith.constant 0 : i32
    %955 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_495) : (!llvm.ptr, i32) -> i32
    %956 = arith.extui %955 : i32 to i64
    %c65536_i64_496 = arith.constant 65536 : i64
    %957 = arith.muli %956, %c65536_i64_496 : i64
    %958 = arith.cmpi ult, %954, %957 : i64
    cf.cond_br %958, ^bb177, ^bb178
  ^bb176:  // pred: ^bb173
    %c1_i32_497 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_497) : (i32) -> ()
    cf.br ^bb175
  ^bb177:  // 2 preds: ^bb175, ^bb178
    %959 = llvm.getelementptr %16[%953] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i64, %959 {alignment = 1 : i64} : i64, !llvm.ptr
    %960 = llvm.load %4 : !llvm.ptr -> i32
    %c224_i32_498 = arith.constant 224 : i32
    %961 = arith.addi %960, %c224_i32_498 : i32
    llvm.store %961, %13 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb178:  // pred: ^bb175
    %c1_i32_499 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_499) : (i32) -> ()
    cf.br ^bb177
  }
  func.func @f29(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %9 : i64, !llvm.ptr
    %c1_i32_9 = arith.constant 1 : i32
    %10 = llvm.alloca %c1_i32_9 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %10 : i64, !llvm.ptr
    %c1_i32_10 = arith.constant 1 : i32
    %11 = llvm.alloca %c1_i32_10 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %11 : i64, !llvm.ptr
    %c1_i32_11 = arith.constant 1 : i32
    %12 = llvm.alloca %c1_i32_11 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %12 : i64, !llvm.ptr
    %13 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %15 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %15[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %18 = llvm.load %14 : !llvm.ptr -> i32
    %c368_i32 = arith.constant 368 : i32
    %19 = arith.subi %18, %c368_i32 : i32
    llvm.store %19, %3 : i32, !llvm.ptr
    llvm.store %19, %14 : i32, !llvm.ptr
    %20 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %21 = arith.addi %20, %c12_i32 : i32
    call @f81(%arg0, %21) : (!llvm.ptr, i32) -> ()
    %22 = llvm.load %3 : !llvm.ptr -> i32
    %c264_i32 = arith.constant 264 : i32
    %23 = arith.addi %22, %c264_i32 : i32
    %c16_i32 = arith.constant 16 : i32
    %24 = arith.addi %23, %c16_i32 : i32
    %25 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i32_12 = arith.constant 12 : i32
    %26 = arith.addi %25, %c12_i32_12 : i32
    %c16_i32_13 = arith.constant 16 : i32
    %27 = arith.addi %26, %c16_i32_13 : i32
    %c0_i64_14 = arith.constant 0 : i64
    %28 = arith.extui %27 : i32 to i64
    %29 = arith.addi %28, %c0_i64_14 : i64
    %c4_i64 = arith.constant 4 : i64
    %30 = arith.addi %29, %c4_i64 : i64
    %c0_i32_15 = arith.constant 0 : i32
    %31 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_15) : (!llvm.ptr, i32) -> i32
    %32 = arith.extui %31 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %33 = arith.muli %32, %c65536_i64 : i64
    %34 = arith.cmpi ult, %30, %33 : i64
    cf.cond_br %34, ^bb3, ^bb4
  ^bb2:  // pred: ^bb249
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %35 = llvm.getelementptr %17[%29] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %36 = llvm.load volatile %35 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_16 = arith.constant 0 : i64
    %37 = arith.extui %24 : i32 to i64
    %38 = arith.addi %37, %c0_i64_16 : i64
    %c4_i64_17 = arith.constant 4 : i64
    %39 = arith.addi %38, %c4_i64_17 : i64
    %c0_i32_18 = arith.constant 0 : i32
    %40 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_18) : (!llvm.ptr, i32) -> i32
    %41 = arith.extui %40 : i32 to i64
    %c65536_i64_19 = arith.constant 65536 : i64
    %42 = arith.muli %41, %c65536_i64_19 : i64
    %43 = arith.cmpi ult, %39, %42 : i64
    cf.cond_br %43, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c1_i32_20 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_20) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %44 = llvm.getelementptr %17[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %36, %44 {alignment = 1 : i64} : i32, !llvm.ptr
    %45 = llvm.load %3 : !llvm.ptr -> i32
    %c264_i32_21 = arith.constant 264 : i32
    %46 = arith.addi %45, %c264_i32_21 : i32
    %c8_i32 = arith.constant 8 : i32
    %47 = arith.addi %46, %c8_i32 : i32
    %48 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i32_22 = arith.constant 12 : i32
    %49 = arith.addi %48, %c12_i32_22 : i32
    %c8_i32_23 = arith.constant 8 : i32
    %50 = arith.addi %49, %c8_i32_23 : i32
    %c0_i64_24 = arith.constant 0 : i64
    %51 = arith.extui %50 : i32 to i64
    %52 = arith.addi %51, %c0_i64_24 : i64
    %c8_i64 = arith.constant 8 : i64
    %53 = arith.addi %52, %c8_i64 : i64
    %c0_i32_25 = arith.constant 0 : i32
    %54 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_25) : (!llvm.ptr, i32) -> i32
    %55 = arith.extui %54 : i32 to i64
    %c65536_i64_26 = arith.constant 65536 : i64
    %56 = arith.muli %55, %c65536_i64_26 : i64
    %57 = arith.cmpi ult, %53, %56 : i64
    cf.cond_br %57, ^bb7, ^bb8
  ^bb6:  // pred: ^bb3
    %c1_i32_27 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_27) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %58 = llvm.getelementptr %17[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %59 = llvm.load volatile %58 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_28 = arith.constant 0 : i64
    %60 = arith.extui %47 : i32 to i64
    %61 = arith.addi %60, %c0_i64_28 : i64
    %c8_i64_29 = arith.constant 8 : i64
    %62 = arith.addi %61, %c8_i64_29 : i64
    %c0_i32_30 = arith.constant 0 : i32
    %63 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_30) : (!llvm.ptr, i32) -> i32
    %64 = arith.extui %63 : i32 to i64
    %c65536_i64_31 = arith.constant 65536 : i64
    %65 = arith.muli %64, %c65536_i64_31 : i64
    %66 = arith.cmpi ult, %62, %65 : i64
    cf.cond_br %66, ^bb9, ^bb10
  ^bb8:  // pred: ^bb5
    %c1_i32_32 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_32) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %67 = llvm.getelementptr %17[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %59, %67 {alignment = 1 : i64} : i64, !llvm.ptr
    %68 = llvm.load %3 : !llvm.ptr -> i32
    %69 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %70 = arith.extui %69 : i32 to i64
    %71 = arith.addi %70, %c12_i64 : i64
    %c8_i64_33 = arith.constant 8 : i64
    %72 = arith.addi %71, %c8_i64_33 : i64
    %c0_i32_34 = arith.constant 0 : i32
    %73 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_34) : (!llvm.ptr, i32) -> i32
    %74 = arith.extui %73 : i32 to i64
    %c65536_i64_35 = arith.constant 65536 : i64
    %75 = arith.muli %74, %c65536_i64_35 : i64
    %76 = arith.cmpi ult, %72, %75 : i64
    cf.cond_br %76, ^bb11, ^bb12
  ^bb10:  // pred: ^bb7
    %c1_i32_36 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_36) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %77 = llvm.getelementptr %17[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %78 = llvm.load volatile %77 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c264_i64 = arith.constant 264 : i64
    %79 = arith.extui %68 : i32 to i64
    %80 = arith.addi %79, %c264_i64 : i64
    %c8_i64_37 = arith.constant 8 : i64
    %81 = arith.addi %80, %c8_i64_37 : i64
    %c0_i32_38 = arith.constant 0 : i32
    %82 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_38) : (!llvm.ptr, i32) -> i32
    %83 = arith.extui %82 : i32 to i64
    %c65536_i64_39 = arith.constant 65536 : i64
    %84 = arith.muli %83, %c65536_i64_39 : i64
    %85 = arith.cmpi ult, %81, %84 : i64
    cf.cond_br %85, ^bb13, ^bb14
  ^bb12:  // pred: ^bb9
    %c1_i32_40 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_40) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %86 = llvm.getelementptr %17[%80] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %78, %86 {alignment = 1 : i64} : i64, !llvm.ptr
    %87 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %88 = arith.addi %87, %c32_i32 : i32
    %89 = llvm.load %1 : !llvm.ptr -> i32
    %90 = llvm.load %3 : !llvm.ptr -> i32
    %c264_i32_41 = arith.constant 264 : i32
    %91 = arith.addi %90, %c264_i32_41 : i32
    call @f33(%arg0, %88, %89, %91) : (!llvm.ptr, i32, i32, i32) -> ()
    %92 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i64 = arith.constant 64 : i64
    %93 = arith.extui %92 : i32 to i64
    %94 = arith.addi %93, %c64_i64 : i64
    %c4_i64_42 = arith.constant 4 : i64
    %95 = arith.addi %94, %c4_i64_42 : i64
    %c0_i32_43 = arith.constant 0 : i32
    %96 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_43) : (!llvm.ptr, i32) -> i32
    %97 = arith.extui %96 : i32 to i64
    %c65536_i64_44 = arith.constant 65536 : i64
    %98 = arith.muli %97, %c65536_i64_44 : i64
    %99 = arith.cmpi ult, %95, %98 : i64
    cf.cond_br %99, ^bb17, ^bb18
  ^bb14:  // pred: ^bb11
    %c1_i32_45 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_45) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // 2 preds: ^bb16, ^bb19
    %c24_i32 = arith.constant 24 : i32
    llvm.store %c24_i32, %5 : i32, !llvm.ptr
    %100 = llvm.load %3 : !llvm.ptr -> i32
    %c112_i32 = arith.constant 112 : i32
    %101 = arith.addi %100, %c112_i32 : i32
    %c24_i32_46 = arith.constant 24 : i32
    %102 = arith.addi %101, %c24_i32_46 : i32
    %103 = llvm.load %4 : !llvm.ptr -> i32
    %c24_i32_47 = arith.constant 24 : i32
    %104 = arith.addi %103, %c24_i32_47 : i32
    %c0_i64_48 = arith.constant 0 : i64
    %105 = arith.extui %104 : i32 to i64
    %106 = arith.addi %105, %c0_i64_48 : i64
    %c8_i64_49 = arith.constant 8 : i64
    %107 = arith.addi %106, %c8_i64_49 : i64
    %c0_i32_50 = arith.constant 0 : i32
    %108 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_50) : (!llvm.ptr, i32) -> i32
    %109 = arith.extui %108 : i32 to i64
    %c65536_i64_51 = arith.constant 65536 : i64
    %110 = arith.muli %109, %c65536_i64_51 : i64
    %111 = arith.cmpi ult, %107, %110 : i64
    cf.cond_br %111, ^bb20, ^bb21
  ^bb16:  // pred: ^bb17
    %112 = llvm.load %3 : !llvm.ptr -> i32
    %c72_i32 = arith.constant 72 : i32
    %113 = arith.addi %112, %c72_i32 : i32
    llvm.store %113, %4 : i32, !llvm.ptr
    cf.br ^bb15
  ^bb17:  // 2 preds: ^bb13, ^bb18
    %114 = llvm.getelementptr %17[%94] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %115 = llvm.load volatile %114 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_52 = arith.constant 0 : i32
    %116 = arith.cmpi ne, %115, %c0_i32_52 : i32
    cf.cond_br %116, ^bb16, ^bb19
  ^bb18:  // pred: ^bb13
    %c1_i32_53 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_53) : (i32) -> ()
    cf.br ^bb17
  ^bb19:  // pred: ^bb17
    %117 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %118 = arith.addi %117, %c64_i32 : i32
    %119 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_54 = arith.constant 32 : i32
    %120 = arith.addi %119, %c32_i32_54 : i32
    %121 = call @f0(%arg0, %118, %120) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %121, %4 : i32, !llvm.ptr
    cf.br ^bb15
  ^bb20:  // 2 preds: ^bb15, ^bb21
    %122 = llvm.getelementptr %17[%106] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %123 = llvm.load volatile %122 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_55 = arith.constant 0 : i64
    %124 = arith.extui %102 : i32 to i64
    %125 = arith.addi %124, %c0_i64_55 : i64
    %c8_i64_56 = arith.constant 8 : i64
    %126 = arith.addi %125, %c8_i64_56 : i64
    %c0_i32_57 = arith.constant 0 : i32
    %127 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_57) : (!llvm.ptr, i32) -> i32
    %128 = arith.extui %127 : i32 to i64
    %c65536_i64_58 = arith.constant 65536 : i64
    %129 = arith.muli %128, %c65536_i64_58 : i64
    %130 = arith.cmpi ult, %126, %129 : i64
    cf.cond_br %130, ^bb22, ^bb23
  ^bb21:  // pred: ^bb15
    %c1_i32_59 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_59) : (i32) -> ()
    cf.br ^bb20
  ^bb22:  // 2 preds: ^bb20, ^bb23
    %131 = llvm.getelementptr %17[%125] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %123, %131 {alignment = 1 : i64} : i64, !llvm.ptr
    %132 = llvm.load %3 : !llvm.ptr -> i32
    %c112_i32_60 = arith.constant 112 : i32
    %133 = arith.addi %132, %c112_i32_60 : i32
    %c16_i32_61 = arith.constant 16 : i32
    %134 = arith.addi %133, %c16_i32_61 : i32
    %135 = llvm.load %4 : !llvm.ptr -> i32
    %c16_i32_62 = arith.constant 16 : i32
    %136 = arith.addi %135, %c16_i32_62 : i32
    %c0_i64_63 = arith.constant 0 : i64
    %137 = arith.extui %136 : i32 to i64
    %138 = arith.addi %137, %c0_i64_63 : i64
    %c8_i64_64 = arith.constant 8 : i64
    %139 = arith.addi %138, %c8_i64_64 : i64
    %c0_i32_65 = arith.constant 0 : i32
    %140 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_65) : (!llvm.ptr, i32) -> i32
    %141 = arith.extui %140 : i32 to i64
    %c65536_i64_66 = arith.constant 65536 : i64
    %142 = arith.muli %141, %c65536_i64_66 : i64
    %143 = arith.cmpi ult, %139, %142 : i64
    cf.cond_br %143, ^bb24, ^bb25
  ^bb23:  // pred: ^bb20
    %c1_i32_67 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_67) : (i32) -> ()
    cf.br ^bb22
  ^bb24:  // 2 preds: ^bb22, ^bb25
    %144 = llvm.getelementptr %17[%138] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %145 = llvm.load volatile %144 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_68 = arith.constant 0 : i64
    %146 = arith.extui %134 : i32 to i64
    %147 = arith.addi %146, %c0_i64_68 : i64
    %c8_i64_69 = arith.constant 8 : i64
    %148 = arith.addi %147, %c8_i64_69 : i64
    %c0_i32_70 = arith.constant 0 : i32
    %149 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_70) : (!llvm.ptr, i32) -> i32
    %150 = arith.extui %149 : i32 to i64
    %c65536_i64_71 = arith.constant 65536 : i64
    %151 = arith.muli %150, %c65536_i64_71 : i64
    %152 = arith.cmpi ult, %148, %151 : i64
    cf.cond_br %152, ^bb26, ^bb27
  ^bb25:  // pred: ^bb22
    %c1_i32_72 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_72) : (i32) -> ()
    cf.br ^bb24
  ^bb26:  // 2 preds: ^bb24, ^bb27
    %153 = llvm.getelementptr %17[%147] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %145, %153 {alignment = 1 : i64} : i64, !llvm.ptr
    %154 = llvm.load %3 : !llvm.ptr -> i32
    %c112_i32_73 = arith.constant 112 : i32
    %155 = arith.addi %154, %c112_i32_73 : i32
    %c8_i32_74 = arith.constant 8 : i32
    %156 = arith.addi %155, %c8_i32_74 : i32
    %157 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i32_75 = arith.constant 8 : i32
    %158 = arith.addi %157, %c8_i32_75 : i32
    %c0_i64_76 = arith.constant 0 : i64
    %159 = arith.extui %158 : i32 to i64
    %160 = arith.addi %159, %c0_i64_76 : i64
    %c8_i64_77 = arith.constant 8 : i64
    %161 = arith.addi %160, %c8_i64_77 : i64
    %c0_i32_78 = arith.constant 0 : i32
    %162 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_78) : (!llvm.ptr, i32) -> i32
    %163 = arith.extui %162 : i32 to i64
    %c65536_i64_79 = arith.constant 65536 : i64
    %164 = arith.muli %163, %c65536_i64_79 : i64
    %165 = arith.cmpi ult, %161, %164 : i64
    cf.cond_br %165, ^bb28, ^bb29
  ^bb27:  // pred: ^bb24
    %c1_i32_80 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_80) : (i32) -> ()
    cf.br ^bb26
  ^bb28:  // 2 preds: ^bb26, ^bb29
    %166 = llvm.getelementptr %17[%160] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %167 = llvm.load volatile %166 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_81 = arith.constant 0 : i64
    %168 = arith.extui %156 : i32 to i64
    %169 = arith.addi %168, %c0_i64_81 : i64
    %c8_i64_82 = arith.constant 8 : i64
    %170 = arith.addi %169, %c8_i64_82 : i64
    %c0_i32_83 = arith.constant 0 : i32
    %171 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_83) : (!llvm.ptr, i32) -> i32
    %172 = arith.extui %171 : i32 to i64
    %c65536_i64_84 = arith.constant 65536 : i64
    %173 = arith.muli %172, %c65536_i64_84 : i64
    %174 = arith.cmpi ult, %170, %173 : i64
    cf.cond_br %174, ^bb30, ^bb31
  ^bb29:  // pred: ^bb26
    %c1_i32_85 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_85) : (i32) -> ()
    cf.br ^bb28
  ^bb30:  // 2 preds: ^bb28, ^bb31
    %175 = llvm.getelementptr %17[%169] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %167, %175 {alignment = 1 : i64} : i64, !llvm.ptr
    %176 = llvm.load %3 : !llvm.ptr -> i32
    %177 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_86 = arith.constant 0 : i64
    %178 = arith.extui %177 : i32 to i64
    %179 = arith.addi %178, %c0_i64_86 : i64
    %c8_i64_87 = arith.constant 8 : i64
    %180 = arith.addi %179, %c8_i64_87 : i64
    %c0_i32_88 = arith.constant 0 : i32
    %181 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_88) : (!llvm.ptr, i32) -> i32
    %182 = arith.extui %181 : i32 to i64
    %c65536_i64_89 = arith.constant 65536 : i64
    %183 = arith.muli %182, %c65536_i64_89 : i64
    %184 = arith.cmpi ult, %180, %183 : i64
    cf.cond_br %184, ^bb32, ^bb33
  ^bb31:  // pred: ^bb28
    %c1_i32_90 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_90) : (i32) -> ()
    cf.br ^bb30
  ^bb32:  // 2 preds: ^bb30, ^bb33
    %185 = llvm.getelementptr %17[%179] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %186 = llvm.load volatile %185 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c112_i64 = arith.constant 112 : i64
    %187 = arith.extui %176 : i32 to i64
    %188 = arith.addi %187, %c112_i64 : i64
    %c8_i64_91 = arith.constant 8 : i64
    %189 = arith.addi %188, %c8_i64_91 : i64
    %c0_i32_92 = arith.constant 0 : i32
    %190 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_92) : (!llvm.ptr, i32) -> i32
    %191 = arith.extui %190 : i32 to i64
    %c65536_i64_93 = arith.constant 65536 : i64
    %192 = arith.muli %191, %c65536_i64_93 : i64
    %193 = arith.cmpi ult, %189, %192 : i64
    cf.cond_br %193, ^bb34, ^bb35
  ^bb33:  // pred: ^bb30
    %c1_i32_94 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_94) : (i32) -> ()
    cf.br ^bb32
  ^bb34:  // 2 preds: ^bb32, ^bb35
    %194 = llvm.getelementptr %17[%188] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %186, %194 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb40
  ^bb35:  // pred: ^bb32
    %c1_i32_95 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_95) : (i32) -> ()
    cf.br ^bb34
  ^bb36:  // 2 preds: ^bb203, ^bb247
    %195 = llvm.load %0 : !llvm.ptr -> i32
    %196 = llvm.load %9 : !llvm.ptr -> i64
    %c0_i64_96 = arith.constant 0 : i64
    %197 = arith.extui %195 : i32 to i64
    %198 = arith.addi %197, %c0_i64_96 : i64
    %c8_i64_97 = arith.constant 8 : i64
    %199 = arith.addi %198, %c8_i64_97 : i64
    %c0_i32_98 = arith.constant 0 : i32
    %200 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_98) : (!llvm.ptr, i32) -> i32
    %201 = arith.extui %200 : i32 to i64
    %c65536_i64_99 = arith.constant 65536 : i64
    %202 = arith.muli %201, %c65536_i64_99 : i64
    %203 = arith.cmpi ult, %199, %202 : i64
    cf.cond_br %203, ^bb249, ^bb250
  ^bb37:  // pred: ^bb39
    %204 = llvm.load %3 : !llvm.ptr -> i32
    %c224_i32 = arith.constant 224 : i32
    %205 = arith.addi %204, %c224_i32 : i32
    %206 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i32_100 = arith.constant 12 : i32
    %207 = arith.addi %206, %c12_i32_100 : i32
    %c16_i32_101 = arith.constant 16 : i32
    %208 = arith.addi %207, %c16_i32_101 : i32
    %c0_i64_102 = arith.constant 0 : i64
    %209 = arith.extui %208 : i32 to i64
    %210 = arith.addi %209, %c0_i64_102 : i64
    %c4_i64_103 = arith.constant 4 : i64
    %211 = arith.addi %210, %c4_i64_103 : i64
    %c0_i32_104 = arith.constant 0 : i32
    %212 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_104) : (!llvm.ptr, i32) -> i32
    %213 = arith.extui %212 : i32 to i64
    %c65536_i64_105 = arith.constant 65536 : i64
    %214 = arith.muli %213, %c65536_i64_105 : i64
    %215 = arith.cmpi ult, %211, %214 : i64
    cf.cond_br %215, ^bb205, ^bb206
  ^bb38:  // 2 preds: ^bb40, ^bb47
    %216 = llvm.load %3 : !llvm.ptr -> i32
    %c336_i32 = arith.constant 336 : i32
    %217 = arith.addi %216, %c336_i32 : i32
    %c24_i32_106 = arith.constant 24 : i32
    %218 = arith.addi %217, %c24_i32_106 : i32
    %219 = llvm.load %4 : !llvm.ptr -> i32
    %c24_i32_107 = arith.constant 24 : i32
    %220 = arith.addi %219, %c24_i32_107 : i32
    %c0_i64_108 = arith.constant 0 : i64
    %221 = arith.extui %220 : i32 to i64
    %222 = arith.addi %221, %c0_i64_108 : i64
    %c8_i64_109 = arith.constant 8 : i64
    %223 = arith.addi %222, %c8_i64_109 : i64
    %c0_i32_110 = arith.constant 0 : i32
    %224 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_110) : (!llvm.ptr, i32) -> i32
    %225 = arith.extui %224 : i32 to i64
    %c65536_i64_111 = arith.constant 65536 : i64
    %226 = arith.muli %225, %c65536_i64_111 : i64
    %227 = arith.cmpi ult, %223, %226 : i64
    cf.cond_br %227, ^bb48, ^bb49
  ^bb39:  // pred: ^bb46
    %228 = llvm.load %6 : !llvm.ptr -> i32
    %c255_i32 = arith.constant 255 : i32
    %229 = arith.andi %228, %c255_i32 : i32
    %c255_i32_112 = arith.constant 255 : i32
    %230 = arith.cmpi eq, %229, %c255_i32_112 : i32
    %231 = arith.extui %230 : i1 to i32
    %c0_i32_113 = arith.constant 0 : i32
    %232 = arith.cmpi ne, %231, %c0_i32_113 : i32
    cf.cond_br %232, ^bb37, ^bb47
  ^bb40:  // 2 preds: ^bb34, ^bb44
    %233 = llvm.load %5 : !llvm.ptr -> i32
    %c-8_i32 = arith.constant -8 : i32
    %234 = arith.addi %233, %c-8_i32 : i32
    llvm.store %234, %6 : i32, !llvm.ptr
    %c-16_i32 = arith.constant -16 : i32
    %235 = arith.cmpi eq, %234, %c-16_i32 : i32
    %236 = arith.extui %235 : i1 to i32
    %c0_i32_114 = arith.constant 0 : i32
    %237 = arith.cmpi ne, %236, %c0_i32_114 : i32
    cf.cond_br %237, ^bb38, ^bb41
  ^bb41:  // pred: ^bb40
    %238 = llvm.load %2 : !llvm.ptr -> i32
    %239 = llvm.load %5 : !llvm.ptr -> i32
    %240 = arith.addi %238, %239 : i32
    llvm.store %240, %7 : i32, !llvm.ptr
    %241 = llvm.load %3 : !llvm.ptr -> i32
    %c112_i32_115 = arith.constant 112 : i32
    %242 = arith.addi %241, %c112_i32_115 : i32
    %243 = llvm.load %5 : !llvm.ptr -> i32
    %244 = arith.addi %242, %243 : i32
    llvm.store %244, %8 : i32, !llvm.ptr
    %245 = llvm.load %6 : !llvm.ptr -> i32
    llvm.store %245, %5 : i32, !llvm.ptr
    %246 = llvm.load %8 : !llvm.ptr -> i32
    %c0_i64_116 = arith.constant 0 : i64
    %247 = arith.extui %246 : i32 to i64
    %248 = arith.addi %247, %c0_i64_116 : i64
    %c8_i64_117 = arith.constant 8 : i64
    %249 = arith.addi %248, %c8_i64_117 : i64
    %c0_i32_118 = arith.constant 0 : i32
    %250 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_118) : (!llvm.ptr, i32) -> i32
    %251 = arith.extui %250 : i32 to i64
    %c65536_i64_119 = arith.constant 65536 : i64
    %252 = arith.muli %251, %c65536_i64_119 : i64
    %253 = arith.cmpi ult, %249, %252 : i64
    cf.cond_br %253, ^bb42, ^bb43
  ^bb42:  // 2 preds: ^bb41, ^bb43
    %254 = llvm.getelementptr %17[%248] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %255 = llvm.load volatile %254 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %255, %9 : i64, !llvm.ptr
    %256 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_120 = arith.constant 0 : i64
    %257 = arith.extui %256 : i32 to i64
    %258 = arith.addi %257, %c0_i64_120 : i64
    %c8_i64_121 = arith.constant 8 : i64
    %259 = arith.addi %258, %c8_i64_121 : i64
    %c0_i32_122 = arith.constant 0 : i32
    %260 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_122) : (!llvm.ptr, i32) -> i32
    %261 = arith.extui %260 : i32 to i64
    %c65536_i64_123 = arith.constant 65536 : i64
    %262 = arith.muli %261, %c65536_i64_123 : i64
    %263 = arith.cmpi ult, %259, %262 : i64
    cf.cond_br %263, ^bb44, ^bb45
  ^bb43:  // pred: ^bb41
    %c1_i32_124 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_124) : (i32) -> ()
    cf.br ^bb42
  ^bb44:  // 2 preds: ^bb42, ^bb45
    %264 = llvm.getelementptr %17[%258] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %265 = llvm.load volatile %264 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %265, %10 : i64, !llvm.ptr
    %266 = arith.cmpi ugt, %255, %265 : i64
    %267 = arith.extui %266 : i1 to i64
    %268 = arith.trunci %267 : i64 to i32
    %269 = llvm.load %9 : !llvm.ptr -> i64
    %270 = llvm.load %10 : !llvm.ptr -> i64
    %271 = arith.cmpi ult, %269, %270 : i64
    %272 = arith.extui %271 : i1 to i64
    %273 = arith.trunci %272 : i64 to i32
    %274 = arith.subi %268, %273 : i32
    llvm.store %274, %6 : i32, !llvm.ptr
    %c0_i32_125 = arith.constant 0 : i32
    %275 = arith.cmpi eq, %274, %c0_i32_125 : i32
    %276 = arith.extui %275 : i1 to i32
    %c0_i32_126 = arith.constant 0 : i32
    %277 = arith.cmpi ne, %276, %c0_i32_126 : i32
    cf.cond_br %277, ^bb40, ^bb46
  ^bb45:  // pred: ^bb42
    %c1_i32_127 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_127) : (i32) -> ()
    cf.br ^bb44
  ^bb46:  // pred: ^bb44
    cf.br ^bb39
  ^bb47:  // pred: ^bb39
    cf.br ^bb38
  ^bb48:  // 2 preds: ^bb38, ^bb49
    %278 = llvm.getelementptr %17[%222] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %279 = llvm.load volatile %278 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_128 = arith.constant 0 : i64
    %280 = arith.extui %218 : i32 to i64
    %281 = arith.addi %280, %c0_i64_128 : i64
    %c8_i64_129 = arith.constant 8 : i64
    %282 = arith.addi %281, %c8_i64_129 : i64
    %c0_i32_130 = arith.constant 0 : i32
    %283 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_130) : (!llvm.ptr, i32) -> i32
    %284 = arith.extui %283 : i32 to i64
    %c65536_i64_131 = arith.constant 65536 : i64
    %285 = arith.muli %284, %c65536_i64_131 : i64
    %286 = arith.cmpi ult, %282, %285 : i64
    cf.cond_br %286, ^bb50, ^bb51
  ^bb49:  // pred: ^bb38
    %c1_i32_132 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_132) : (i32) -> ()
    cf.br ^bb48
  ^bb50:  // 2 preds: ^bb48, ^bb51
    %287 = llvm.getelementptr %17[%281] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %279, %287 {alignment = 1 : i64} : i64, !llvm.ptr
    %288 = llvm.load %3 : !llvm.ptr -> i32
    %c336_i32_133 = arith.constant 336 : i32
    %289 = arith.addi %288, %c336_i32_133 : i32
    %c16_i32_134 = arith.constant 16 : i32
    %290 = arith.addi %289, %c16_i32_134 : i32
    %291 = llvm.load %4 : !llvm.ptr -> i32
    %c16_i32_135 = arith.constant 16 : i32
    %292 = arith.addi %291, %c16_i32_135 : i32
    %c0_i64_136 = arith.constant 0 : i64
    %293 = arith.extui %292 : i32 to i64
    %294 = arith.addi %293, %c0_i64_136 : i64
    %c8_i64_137 = arith.constant 8 : i64
    %295 = arith.addi %294, %c8_i64_137 : i64
    %c0_i32_138 = arith.constant 0 : i32
    %296 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_138) : (!llvm.ptr, i32) -> i32
    %297 = arith.extui %296 : i32 to i64
    %c65536_i64_139 = arith.constant 65536 : i64
    %298 = arith.muli %297, %c65536_i64_139 : i64
    %299 = arith.cmpi ult, %295, %298 : i64
    cf.cond_br %299, ^bb52, ^bb53
  ^bb51:  // pred: ^bb48
    %c1_i32_140 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_140) : (i32) -> ()
    cf.br ^bb50
  ^bb52:  // 2 preds: ^bb50, ^bb53
    %300 = llvm.getelementptr %17[%294] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %301 = llvm.load volatile %300 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_141 = arith.constant 0 : i64
    %302 = arith.extui %290 : i32 to i64
    %303 = arith.addi %302, %c0_i64_141 : i64
    %c8_i64_142 = arith.constant 8 : i64
    %304 = arith.addi %303, %c8_i64_142 : i64
    %c0_i32_143 = arith.constant 0 : i32
    %305 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_143) : (!llvm.ptr, i32) -> i32
    %306 = arith.extui %305 : i32 to i64
    %c65536_i64_144 = arith.constant 65536 : i64
    %307 = arith.muli %306, %c65536_i64_144 : i64
    %308 = arith.cmpi ult, %304, %307 : i64
    cf.cond_br %308, ^bb54, ^bb55
  ^bb53:  // pred: ^bb50
    %c1_i32_145 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_145) : (i32) -> ()
    cf.br ^bb52
  ^bb54:  // 2 preds: ^bb52, ^bb55
    %309 = llvm.getelementptr %17[%303] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %301, %309 {alignment = 1 : i64} : i64, !llvm.ptr
    %310 = llvm.load %3 : !llvm.ptr -> i32
    %c336_i32_146 = arith.constant 336 : i32
    %311 = arith.addi %310, %c336_i32_146 : i32
    %c8_i32_147 = arith.constant 8 : i32
    %312 = arith.addi %311, %c8_i32_147 : i32
    %313 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i32_148 = arith.constant 8 : i32
    %314 = arith.addi %313, %c8_i32_148 : i32
    %c0_i64_149 = arith.constant 0 : i64
    %315 = arith.extui %314 : i32 to i64
    %316 = arith.addi %315, %c0_i64_149 : i64
    %c8_i64_150 = arith.constant 8 : i64
    %317 = arith.addi %316, %c8_i64_150 : i64
    %c0_i32_151 = arith.constant 0 : i32
    %318 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_151) : (!llvm.ptr, i32) -> i32
    %319 = arith.extui %318 : i32 to i64
    %c65536_i64_152 = arith.constant 65536 : i64
    %320 = arith.muli %319, %c65536_i64_152 : i64
    %321 = arith.cmpi ult, %317, %320 : i64
    cf.cond_br %321, ^bb56, ^bb57
  ^bb55:  // pred: ^bb52
    %c1_i32_153 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_153) : (i32) -> ()
    cf.br ^bb54
  ^bb56:  // 2 preds: ^bb54, ^bb57
    %322 = llvm.getelementptr %17[%316] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %323 = llvm.load volatile %322 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_154 = arith.constant 0 : i64
    %324 = arith.extui %312 : i32 to i64
    %325 = arith.addi %324, %c0_i64_154 : i64
    %c8_i64_155 = arith.constant 8 : i64
    %326 = arith.addi %325, %c8_i64_155 : i64
    %c0_i32_156 = arith.constant 0 : i32
    %327 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_156) : (!llvm.ptr, i32) -> i32
    %328 = arith.extui %327 : i32 to i64
    %c65536_i64_157 = arith.constant 65536 : i64
    %329 = arith.muli %328, %c65536_i64_157 : i64
    %330 = arith.cmpi ult, %326, %329 : i64
    cf.cond_br %330, ^bb58, ^bb59
  ^bb57:  // pred: ^bb54
    %c1_i32_158 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_158) : (i32) -> ()
    cf.br ^bb56
  ^bb58:  // 2 preds: ^bb56, ^bb59
    %331 = llvm.getelementptr %17[%325] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %323, %331 {alignment = 1 : i64} : i64, !llvm.ptr
    %332 = llvm.load %3 : !llvm.ptr -> i32
    %333 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_159 = arith.constant 0 : i64
    %334 = arith.extui %333 : i32 to i64
    %335 = arith.addi %334, %c0_i64_159 : i64
    %c8_i64_160 = arith.constant 8 : i64
    %336 = arith.addi %335, %c8_i64_160 : i64
    %c0_i32_161 = arith.constant 0 : i32
    %337 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_161) : (!llvm.ptr, i32) -> i32
    %338 = arith.extui %337 : i32 to i64
    %c65536_i64_162 = arith.constant 65536 : i64
    %339 = arith.muli %338, %c65536_i64_162 : i64
    %340 = arith.cmpi ult, %336, %339 : i64
    cf.cond_br %340, ^bb60, ^bb61
  ^bb59:  // pred: ^bb56
    %c1_i32_163 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_163) : (i32) -> ()
    cf.br ^bb58
  ^bb60:  // 2 preds: ^bb58, ^bb61
    %341 = llvm.getelementptr %17[%335] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %342 = llvm.load volatile %341 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c336_i64 = arith.constant 336 : i64
    %343 = arith.extui %332 : i32 to i64
    %344 = arith.addi %343, %c336_i64 : i64
    %c8_i64_164 = arith.constant 8 : i64
    %345 = arith.addi %344, %c8_i64_164 : i64
    %c0_i32_165 = arith.constant 0 : i32
    %346 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_165) : (!llvm.ptr, i32) -> i32
    %347 = arith.extui %346 : i32 to i64
    %c65536_i64_166 = arith.constant 65536 : i64
    %348 = arith.muli %347, %c65536_i64_166 : i64
    %349 = arith.cmpi ult, %345, %348 : i64
    cf.cond_br %349, ^bb62, ^bb63
  ^bb61:  // pred: ^bb58
    %c1_i32_167 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_167) : (i32) -> ()
    cf.br ^bb60
  ^bb62:  // 2 preds: ^bb60, ^bb63
    %350 = llvm.getelementptr %17[%344] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %342, %350 {alignment = 1 : i64} : i64, !llvm.ptr
    %c0_i32_168 = arith.constant 0 : i32
    llvm.store %c0_i32_168, %5 : i32, !llvm.ptr
    %c0_i32_169 = arith.constant 0 : i32
    llvm.store %c0_i32_169, %6 : i32, !llvm.ptr
    cf.br ^bb65
  ^bb63:  // pred: ^bb60
    %c1_i32_170 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_170) : (i32) -> ()
    cf.br ^bb62
  ^bb64:  // pred: ^bb72
    %351 = llvm.load %3 : !llvm.ptr -> i32
    %c80_i32 = arith.constant 80 : i32
    %352 = arith.addi %351, %c80_i32 : i32
    %353 = llvm.load %3 : !llvm.ptr -> i32
    %c336_i32_171 = arith.constant 336 : i32
    %354 = arith.addi %353, %c336_i32_171 : i32
    %c8_i32_172 = arith.constant 8 : i32
    %355 = arith.addi %354, %c8_i32_172 : i32
    %c0_i64_173 = arith.constant 0 : i64
    %356 = arith.extui %355 : i32 to i64
    %357 = arith.addi %356, %c0_i64_173 : i64
    %c8_i64_174 = arith.constant 8 : i64
    %358 = arith.addi %357, %c8_i64_174 : i64
    %c0_i32_175 = arith.constant 0 : i32
    %359 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_175) : (!llvm.ptr, i32) -> i32
    %360 = arith.extui %359 : i32 to i64
    %c65536_i64_176 = arith.constant 65536 : i64
    %361 = arith.muli %360, %c65536_i64_176 : i64
    %362 = arith.cmpi ult, %358, %361 : i64
    cf.cond_br %362, ^bb73, ^bb74
  ^bb65:  // 2 preds: ^bb62, ^bb70
    %363 = llvm.load %3 : !llvm.ptr -> i32
    %c336_i32_177 = arith.constant 336 : i32
    %364 = arith.addi %363, %c336_i32_177 : i32
    %365 = llvm.load %5 : !llvm.ptr -> i32
    %366 = arith.addi %364, %365 : i32
    llvm.store %366, %7 : i32, !llvm.ptr
    %367 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_178 = arith.constant 0 : i64
    %368 = arith.extui %367 : i32 to i64
    %369 = arith.addi %368, %c0_i64_178 : i64
    %c8_i64_179 = arith.constant 8 : i64
    %370 = arith.addi %369, %c8_i64_179 : i64
    %c0_i32_180 = arith.constant 0 : i32
    %371 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_180) : (!llvm.ptr, i32) -> i32
    %372 = arith.extui %371 : i32 to i64
    %c65536_i64_181 = arith.constant 65536 : i64
    %373 = arith.muli %372, %c65536_i64_181 : i64
    %374 = arith.cmpi ult, %370, %373 : i64
    cf.cond_br %374, ^bb66, ^bb67
  ^bb66:  // 2 preds: ^bb65, ^bb67
    %375 = llvm.getelementptr %17[%369] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %376 = llvm.load volatile %375 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %376, %9 : i64, !llvm.ptr
    %377 = llvm.load %2 : !llvm.ptr -> i32
    %378 = llvm.load %5 : !llvm.ptr -> i32
    %379 = arith.addi %377, %378 : i32
    %c0_i64_182 = arith.constant 0 : i64
    %380 = arith.extui %379 : i32 to i64
    %381 = arith.addi %380, %c0_i64_182 : i64
    %c8_i64_183 = arith.constant 8 : i64
    %382 = arith.addi %381, %c8_i64_183 : i64
    %c0_i32_184 = arith.constant 0 : i32
    %383 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_184) : (!llvm.ptr, i32) -> i32
    %384 = arith.extui %383 : i32 to i64
    %c65536_i64_185 = arith.constant 65536 : i64
    %385 = arith.muli %384, %c65536_i64_185 : i64
    %386 = arith.cmpi ult, %382, %385 : i64
    cf.cond_br %386, ^bb68, ^bb69
  ^bb67:  // pred: ^bb65
    %c1_i32_186 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_186) : (i32) -> ()
    cf.br ^bb66
  ^bb68:  // 2 preds: ^bb66, ^bb69
    %387 = llvm.getelementptr %17[%381] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %388 = llvm.load volatile %387 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %388, %10 : i64, !llvm.ptr
    %389 = arith.subi %376, %388 : i64
    llvm.store %389, %11 : i64, !llvm.ptr
    %390 = llvm.load %6 : !llvm.ptr -> i32
    %391 = arith.extui %390 : i32 to i64
    %c1_i64 = arith.constant 1 : i64
    %392 = arith.andi %391, %c1_i64 : i64
    llvm.store %392, %12 : i64, !llvm.ptr
    %393 = arith.subi %389, %392 : i64
    %c0_i64_187 = arith.constant 0 : i64
    %394 = arith.extui %366 : i32 to i64
    %395 = arith.addi %394, %c0_i64_187 : i64
    %c8_i64_188 = arith.constant 8 : i64
    %396 = arith.addi %395, %c8_i64_188 : i64
    %c0_i32_189 = arith.constant 0 : i32
    %397 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_189) : (!llvm.ptr, i32) -> i32
    %398 = arith.extui %397 : i32 to i64
    %c65536_i64_190 = arith.constant 65536 : i64
    %399 = arith.muli %398, %c65536_i64_190 : i64
    %400 = arith.cmpi ult, %396, %399 : i64
    cf.cond_br %400, ^bb70, ^bb71
  ^bb69:  // pred: ^bb66
    %c1_i32_191 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_191) : (i32) -> ()
    cf.br ^bb68
  ^bb70:  // 2 preds: ^bb68, ^bb71
    %401 = llvm.getelementptr %17[%395] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %393, %401 {alignment = 1 : i64} : i64, !llvm.ptr
    %402 = llvm.load %9 : !llvm.ptr -> i64
    %403 = llvm.load %10 : !llvm.ptr -> i64
    %404 = arith.cmpi ult, %402, %403 : i64
    %405 = arith.extui %404 : i1 to i64
    %406 = arith.trunci %405 : i64 to i32
    %407 = llvm.load %11 : !llvm.ptr -> i64
    %408 = llvm.load %12 : !llvm.ptr -> i64
    %409 = arith.cmpi ult, %407, %408 : i64
    %410 = arith.extui %409 : i1 to i64
    %411 = arith.trunci %410 : i64 to i32
    %412 = arith.ori %406, %411 : i32
    llvm.store %412, %6 : i32, !llvm.ptr
    %413 = llvm.load %5 : !llvm.ptr -> i32
    %c8_i32_192 = arith.constant 8 : i32
    %414 = arith.addi %413, %c8_i32_192 : i32
    llvm.store %414, %5 : i32, !llvm.ptr
    %c32_i32_193 = arith.constant 32 : i32
    %415 = arith.cmpi eq, %414, %c32_i32_193 : i32
    %416 = arith.extui %415 : i1 to i32
    %c0_i32_194 = arith.constant 0 : i32
    %417 = arith.cmpi eq, %416, %c0_i32_194 : i32
    %418 = arith.extui %417 : i1 to i32
    %c0_i32_195 = arith.constant 0 : i32
    %419 = arith.cmpi ne, %418, %c0_i32_195 : i32
    cf.cond_br %419, ^bb65, ^bb72
  ^bb71:  // pred: ^bb68
    %c1_i32_196 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_196) : (i32) -> ()
    cf.br ^bb70
  ^bb72:  // pred: ^bb70
    cf.br ^bb64
  ^bb73:  // 2 preds: ^bb64, ^bb74
    %420 = llvm.getelementptr %17[%357] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %421 = llvm.load volatile %420 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_197 = arith.constant 0 : i64
    %422 = arith.extui %352 : i32 to i64
    %423 = arith.addi %422, %c0_i64_197 : i64
    %c8_i64_198 = arith.constant 8 : i64
    %424 = arith.addi %423, %c8_i64_198 : i64
    %c0_i32_199 = arith.constant 0 : i32
    %425 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_199) : (!llvm.ptr, i32) -> i32
    %426 = arith.extui %425 : i32 to i64
    %c65536_i64_200 = arith.constant 65536 : i64
    %427 = arith.muli %426, %c65536_i64_200 : i64
    %428 = arith.cmpi ult, %424, %427 : i64
    cf.cond_br %428, ^bb75, ^bb76
  ^bb74:  // pred: ^bb64
    %c1_i32_201 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_201) : (i32) -> ()
    cf.br ^bb73
  ^bb75:  // 2 preds: ^bb73, ^bb76
    %429 = llvm.getelementptr %17[%423] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %421, %429 {alignment = 1 : i64} : i64, !llvm.ptr
    %430 = llvm.load %3 : !llvm.ptr -> i32
    %c88_i32 = arith.constant 88 : i32
    %431 = arith.addi %430, %c88_i32 : i32
    %432 = llvm.load %3 : !llvm.ptr -> i32
    %c336_i32_202 = arith.constant 336 : i32
    %433 = arith.addi %432, %c336_i32_202 : i32
    %c16_i32_203 = arith.constant 16 : i32
    %434 = arith.addi %433, %c16_i32_203 : i32
    %c0_i64_204 = arith.constant 0 : i64
    %435 = arith.extui %434 : i32 to i64
    %436 = arith.addi %435, %c0_i64_204 : i64
    %c8_i64_205 = arith.constant 8 : i64
    %437 = arith.addi %436, %c8_i64_205 : i64
    %c0_i32_206 = arith.constant 0 : i32
    %438 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_206) : (!llvm.ptr, i32) -> i32
    %439 = arith.extui %438 : i32 to i64
    %c65536_i64_207 = arith.constant 65536 : i64
    %440 = arith.muli %439, %c65536_i64_207 : i64
    %441 = arith.cmpi ult, %437, %440 : i64
    cf.cond_br %441, ^bb77, ^bb78
  ^bb76:  // pred: ^bb73
    %c1_i32_208 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_208) : (i32) -> ()
    cf.br ^bb75
  ^bb77:  // 2 preds: ^bb75, ^bb78
    %442 = llvm.getelementptr %17[%436] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %443 = llvm.load volatile %442 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_209 = arith.constant 0 : i64
    %444 = arith.extui %431 : i32 to i64
    %445 = arith.addi %444, %c0_i64_209 : i64
    %c8_i64_210 = arith.constant 8 : i64
    %446 = arith.addi %445, %c8_i64_210 : i64
    %c0_i32_211 = arith.constant 0 : i32
    %447 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_211) : (!llvm.ptr, i32) -> i32
    %448 = arith.extui %447 : i32 to i64
    %c65536_i64_212 = arith.constant 65536 : i64
    %449 = arith.muli %448, %c65536_i64_212 : i64
    %450 = arith.cmpi ult, %446, %449 : i64
    cf.cond_br %450, ^bb79, ^bb80
  ^bb78:  // pred: ^bb75
    %c1_i32_213 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_213) : (i32) -> ()
    cf.br ^bb77
  ^bb79:  // 2 preds: ^bb77, ^bb80
    %451 = llvm.getelementptr %17[%445] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %443, %451 {alignment = 1 : i64} : i64, !llvm.ptr
    %452 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_214 = arith.constant 32 : i32
    %453 = arith.addi %452, %c32_i32_214 : i32
    %c64_i32_215 = arith.constant 64 : i32
    %454 = arith.addi %453, %c64_i32_215 : i32
    %455 = llvm.load %3 : !llvm.ptr -> i32
    %c336_i32_216 = arith.constant 336 : i32
    %456 = arith.addi %455, %c336_i32_216 : i32
    %c24_i32_217 = arith.constant 24 : i32
    %457 = arith.addi %456, %c24_i32_217 : i32
    %c0_i64_218 = arith.constant 0 : i64
    %458 = arith.extui %457 : i32 to i64
    %459 = arith.addi %458, %c0_i64_218 : i64
    %c8_i64_219 = arith.constant 8 : i64
    %460 = arith.addi %459, %c8_i64_219 : i64
    %c0_i32_220 = arith.constant 0 : i32
    %461 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_220) : (!llvm.ptr, i32) -> i32
    %462 = arith.extui %461 : i32 to i64
    %c65536_i64_221 = arith.constant 65536 : i64
    %463 = arith.muli %462, %c65536_i64_221 : i64
    %464 = arith.cmpi ult, %460, %463 : i64
    cf.cond_br %464, ^bb81, ^bb82
  ^bb80:  // pred: ^bb77
    %c1_i32_222 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_222) : (i32) -> ()
    cf.br ^bb79
  ^bb81:  // 2 preds: ^bb79, ^bb82
    %465 = llvm.getelementptr %17[%459] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %466 = llvm.load volatile %465 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_223 = arith.constant 0 : i64
    %467 = arith.extui %454 : i32 to i64
    %468 = arith.addi %467, %c0_i64_223 : i64
    %c8_i64_224 = arith.constant 8 : i64
    %469 = arith.addi %468, %c8_i64_224 : i64
    %c0_i32_225 = arith.constant 0 : i32
    %470 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_225) : (!llvm.ptr, i32) -> i32
    %471 = arith.extui %470 : i32 to i64
    %c65536_i64_226 = arith.constant 65536 : i64
    %472 = arith.muli %471, %c65536_i64_226 : i64
    %473 = arith.cmpi ult, %469, %472 : i64
    cf.cond_br %473, ^bb83, ^bb84
  ^bb82:  // pred: ^bb79
    %c1_i32_227 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_227) : (i32) -> ()
    cf.br ^bb81
  ^bb83:  // 2 preds: ^bb81, ^bb84
    %474 = llvm.getelementptr %17[%468] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %466, %474 {alignment = 1 : i64} : i64, !llvm.ptr
    %475 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_228 = arith.constant 1 : i64
    %c64_i64_229 = arith.constant 64 : i64
    %476 = arith.extui %475 : i32 to i64
    %477 = arith.addi %476, %c64_i64_229 : i64
    %c8_i64_230 = arith.constant 8 : i64
    %478 = arith.addi %477, %c8_i64_230 : i64
    %c0_i32_231 = arith.constant 0 : i32
    %479 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_231) : (!llvm.ptr, i32) -> i32
    %480 = arith.extui %479 : i32 to i64
    %c65536_i64_232 = arith.constant 65536 : i64
    %481 = arith.muli %480, %c65536_i64_232 : i64
    %482 = arith.cmpi ult, %478, %481 : i64
    cf.cond_br %482, ^bb85, ^bb86
  ^bb84:  // pred: ^bb81
    %c1_i32_233 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_233) : (i32) -> ()
    cf.br ^bb83
  ^bb85:  // 2 preds: ^bb83, ^bb86
    %483 = llvm.getelementptr %17[%477] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_228, %483 {alignment = 1 : i64} : i64, !llvm.ptr
    %484 = llvm.load %3 : !llvm.ptr -> i32
    %485 = llvm.load %3 : !llvm.ptr -> i32
    %c336_i64_234 = arith.constant 336 : i64
    %486 = arith.extui %485 : i32 to i64
    %487 = arith.addi %486, %c336_i64_234 : i64
    %c8_i64_235 = arith.constant 8 : i64
    %488 = arith.addi %487, %c8_i64_235 : i64
    %c0_i32_236 = arith.constant 0 : i32
    %489 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_236) : (!llvm.ptr, i32) -> i32
    %490 = arith.extui %489 : i32 to i64
    %c65536_i64_237 = arith.constant 65536 : i64
    %491 = arith.muli %490, %c65536_i64_237 : i64
    %492 = arith.cmpi ult, %488, %491 : i64
    cf.cond_br %492, ^bb87, ^bb88
  ^bb86:  // pred: ^bb83
    %c1_i32_238 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_238) : (i32) -> ()
    cf.br ^bb85
  ^bb87:  // 2 preds: ^bb85, ^bb88
    %493 = llvm.getelementptr %17[%487] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %494 = llvm.load volatile %493 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c72_i64 = arith.constant 72 : i64
    %495 = arith.extui %484 : i32 to i64
    %496 = arith.addi %495, %c72_i64 : i64
    %c8_i64_239 = arith.constant 8 : i64
    %497 = arith.addi %496, %c8_i64_239 : i64
    %c0_i32_240 = arith.constant 0 : i32
    %498 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_240) : (!llvm.ptr, i32) -> i32
    %499 = arith.extui %498 : i32 to i64
    %c65536_i64_241 = arith.constant 65536 : i64
    %500 = arith.muli %499, %c65536_i64_241 : i64
    %501 = arith.cmpi ult, %497, %500 : i64
    cf.cond_br %501, ^bb89, ^bb90
  ^bb88:  // pred: ^bb85
    %c1_i32_242 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_242) : (i32) -> ()
    cf.br ^bb87
  ^bb89:  // 2 preds: ^bb87, ^bb90
    %502 = llvm.getelementptr %17[%496] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %494, %502 {alignment = 1 : i64} : i64, !llvm.ptr
    %503 = llvm.load %3 : !llvm.ptr -> i32
    %c264_i32_243 = arith.constant 264 : i32
    %504 = arith.addi %503, %c264_i32_243 : i32
    %c24_i32_244 = arith.constant 24 : i32
    %505 = arith.addi %504, %c24_i32_244 : i32
    %506 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_245 = arith.constant 32 : i32
    %507 = arith.addi %506, %c32_i32_245 : i32
    %c24_i32_246 = arith.constant 24 : i32
    %508 = arith.addi %507, %c24_i32_246 : i32
    %c0_i64_247 = arith.constant 0 : i64
    %509 = arith.extui %508 : i32 to i64
    %510 = arith.addi %509, %c0_i64_247 : i64
    %c8_i64_248 = arith.constant 8 : i64
    %511 = arith.addi %510, %c8_i64_248 : i64
    %c0_i32_249 = arith.constant 0 : i32
    %512 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_249) : (!llvm.ptr, i32) -> i32
    %513 = arith.extui %512 : i32 to i64
    %c65536_i64_250 = arith.constant 65536 : i64
    %514 = arith.muli %513, %c65536_i64_250 : i64
    %515 = arith.cmpi ult, %511, %514 : i64
    cf.cond_br %515, ^bb91, ^bb92
  ^bb90:  // pred: ^bb87
    %c1_i32_251 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_251) : (i32) -> ()
    cf.br ^bb89
  ^bb91:  // 2 preds: ^bb89, ^bb92
    %516 = llvm.getelementptr %17[%510] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %517 = llvm.load volatile %516 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_252 = arith.constant 0 : i64
    %518 = arith.extui %505 : i32 to i64
    %519 = arith.addi %518, %c0_i64_252 : i64
    %c8_i64_253 = arith.constant 8 : i64
    %520 = arith.addi %519, %c8_i64_253 : i64
    %c0_i32_254 = arith.constant 0 : i32
    %521 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_254) : (!llvm.ptr, i32) -> i32
    %522 = arith.extui %521 : i32 to i64
    %c65536_i64_255 = arith.constant 65536 : i64
    %523 = arith.muli %522, %c65536_i64_255 : i64
    %524 = arith.cmpi ult, %520, %523 : i64
    cf.cond_br %524, ^bb93, ^bb94
  ^bb92:  // pred: ^bb89
    %c1_i32_256 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_256) : (i32) -> ()
    cf.br ^bb91
  ^bb93:  // 2 preds: ^bb91, ^bb94
    %525 = llvm.getelementptr %17[%519] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %517, %525 {alignment = 1 : i64} : i64, !llvm.ptr
    %526 = llvm.load %3 : !llvm.ptr -> i32
    %c264_i32_257 = arith.constant 264 : i32
    %527 = arith.addi %526, %c264_i32_257 : i32
    %c16_i32_258 = arith.constant 16 : i32
    %528 = arith.addi %527, %c16_i32_258 : i32
    %529 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_259 = arith.constant 32 : i32
    %530 = arith.addi %529, %c32_i32_259 : i32
    %c16_i32_260 = arith.constant 16 : i32
    %531 = arith.addi %530, %c16_i32_260 : i32
    %c0_i64_261 = arith.constant 0 : i64
    %532 = arith.extui %531 : i32 to i64
    %533 = arith.addi %532, %c0_i64_261 : i64
    %c8_i64_262 = arith.constant 8 : i64
    %534 = arith.addi %533, %c8_i64_262 : i64
    %c0_i32_263 = arith.constant 0 : i32
    %535 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_263) : (!llvm.ptr, i32) -> i32
    %536 = arith.extui %535 : i32 to i64
    %c65536_i64_264 = arith.constant 65536 : i64
    %537 = arith.muli %536, %c65536_i64_264 : i64
    %538 = arith.cmpi ult, %534, %537 : i64
    cf.cond_br %538, ^bb95, ^bb96
  ^bb94:  // pred: ^bb91
    %c1_i32_265 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_265) : (i32) -> ()
    cf.br ^bb93
  ^bb95:  // 2 preds: ^bb93, ^bb96
    %539 = llvm.getelementptr %17[%533] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %540 = llvm.load volatile %539 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_266 = arith.constant 0 : i64
    %541 = arith.extui %528 : i32 to i64
    %542 = arith.addi %541, %c0_i64_266 : i64
    %c8_i64_267 = arith.constant 8 : i64
    %543 = arith.addi %542, %c8_i64_267 : i64
    %c0_i32_268 = arith.constant 0 : i32
    %544 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_268) : (!llvm.ptr, i32) -> i32
    %545 = arith.extui %544 : i32 to i64
    %c65536_i64_269 = arith.constant 65536 : i64
    %546 = arith.muli %545, %c65536_i64_269 : i64
    %547 = arith.cmpi ult, %543, %546 : i64
    cf.cond_br %547, ^bb97, ^bb98
  ^bb96:  // pred: ^bb93
    %c1_i32_270 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_270) : (i32) -> ()
    cf.br ^bb95
  ^bb97:  // 2 preds: ^bb95, ^bb98
    %548 = llvm.getelementptr %17[%542] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %540, %548 {alignment = 1 : i64} : i64, !llvm.ptr
    %549 = llvm.load %3 : !llvm.ptr -> i32
    %c264_i32_271 = arith.constant 264 : i32
    %550 = arith.addi %549, %c264_i32_271 : i32
    %c8_i32_272 = arith.constant 8 : i32
    %551 = arith.addi %550, %c8_i32_272 : i32
    %552 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_273 = arith.constant 32 : i32
    %553 = arith.addi %552, %c32_i32_273 : i32
    %c8_i32_274 = arith.constant 8 : i32
    %554 = arith.addi %553, %c8_i32_274 : i32
    %c0_i64_275 = arith.constant 0 : i64
    %555 = arith.extui %554 : i32 to i64
    %556 = arith.addi %555, %c0_i64_275 : i64
    %c8_i64_276 = arith.constant 8 : i64
    %557 = arith.addi %556, %c8_i64_276 : i64
    %c0_i32_277 = arith.constant 0 : i32
    %558 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_277) : (!llvm.ptr, i32) -> i32
    %559 = arith.extui %558 : i32 to i64
    %c65536_i64_278 = arith.constant 65536 : i64
    %560 = arith.muli %559, %c65536_i64_278 : i64
    %561 = arith.cmpi ult, %557, %560 : i64
    cf.cond_br %561, ^bb99, ^bb100
  ^bb98:  // pred: ^bb95
    %c1_i32_279 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_279) : (i32) -> ()
    cf.br ^bb97
  ^bb99:  // 2 preds: ^bb97, ^bb100
    %562 = llvm.getelementptr %17[%556] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %563 = llvm.load volatile %562 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_280 = arith.constant 0 : i64
    %564 = arith.extui %551 : i32 to i64
    %565 = arith.addi %564, %c0_i64_280 : i64
    %c8_i64_281 = arith.constant 8 : i64
    %566 = arith.addi %565, %c8_i64_281 : i64
    %c0_i32_282 = arith.constant 0 : i32
    %567 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_282) : (!llvm.ptr, i32) -> i32
    %568 = arith.extui %567 : i32 to i64
    %c65536_i64_283 = arith.constant 65536 : i64
    %569 = arith.muli %568, %c65536_i64_283 : i64
    %570 = arith.cmpi ult, %566, %569 : i64
    cf.cond_br %570, ^bb101, ^bb102
  ^bb100:  // pred: ^bb97
    %c1_i32_284 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_284) : (i32) -> ()
    cf.br ^bb99
  ^bb101:  // 2 preds: ^bb99, ^bb102
    %571 = llvm.getelementptr %17[%565] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %563, %571 {alignment = 1 : i64} : i64, !llvm.ptr
    %572 = llvm.load %3 : !llvm.ptr -> i32
    %573 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i64 = arith.constant 32 : i64
    %574 = arith.extui %573 : i32 to i64
    %575 = arith.addi %574, %c32_i64 : i64
    %c8_i64_285 = arith.constant 8 : i64
    %576 = arith.addi %575, %c8_i64_285 : i64
    %c0_i32_286 = arith.constant 0 : i32
    %577 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_286) : (!llvm.ptr, i32) -> i32
    %578 = arith.extui %577 : i32 to i64
    %c65536_i64_287 = arith.constant 65536 : i64
    %579 = arith.muli %578, %c65536_i64_287 : i64
    %580 = arith.cmpi ult, %576, %579 : i64
    cf.cond_br %580, ^bb103, ^bb104
  ^bb102:  // pred: ^bb99
    %c1_i32_288 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_288) : (i32) -> ()
    cf.br ^bb101
  ^bb103:  // 2 preds: ^bb101, ^bb104
    %581 = llvm.getelementptr %17[%575] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %582 = llvm.load volatile %581 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c264_i64_289 = arith.constant 264 : i64
    %583 = arith.extui %572 : i32 to i64
    %584 = arith.addi %583, %c264_i64_289 : i64
    %c8_i64_290 = arith.constant 8 : i64
    %585 = arith.addi %584, %c8_i64_290 : i64
    %c0_i32_291 = arith.constant 0 : i32
    %586 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_291) : (!llvm.ptr, i32) -> i32
    %587 = arith.extui %586 : i32 to i64
    %c65536_i64_292 = arith.constant 65536 : i64
    %588 = arith.muli %587, %c65536_i64_292 : i64
    %589 = arith.cmpi ult, %585, %588 : i64
    cf.cond_br %589, ^bb105, ^bb106
  ^bb104:  // pred: ^bb101
    %c1_i32_293 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_293) : (i32) -> ()
    cf.br ^bb103
  ^bb105:  // 2 preds: ^bb103, ^bb106
    %590 = llvm.getelementptr %17[%584] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %582, %590 {alignment = 1 : i64} : i64, !llvm.ptr
    %591 = llvm.load %3 : !llvm.ptr -> i32
    %c264_i32_294 = arith.constant 264 : i32
    %592 = arith.addi %591, %c264_i32_294 : i32
    %593 = llvm.load %3 : !llvm.ptr -> i32
    %594 = llvm.load %3 : !llvm.ptr -> i32
    %c336_i32_295 = arith.constant 336 : i32
    %595 = arith.addi %594, %c336_i32_295 : i32
    call @f32(%arg0, %592, %593, %595) : (!llvm.ptr, i32, i32, i32) -> ()
    %596 = llvm.load %1 : !llvm.ptr -> i32
    %c64_i32_296 = arith.constant 64 : i32
    %597 = arith.addi %596, %c64_i32_296 : i32
    llvm.store %597, %8 : i32, !llvm.ptr
    %598 = llvm.load %1 : !llvm.ptr -> i32
    %c96_i64 = arith.constant 96 : i64
    %599 = arith.extui %598 : i32 to i64
    %600 = arith.addi %599, %c96_i64 : i64
    %c4_i64_297 = arith.constant 4 : i64
    %601 = arith.addi %600, %c4_i64_297 : i64
    %c0_i32_298 = arith.constant 0 : i32
    %602 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_298) : (!llvm.ptr, i32) -> i32
    %603 = arith.extui %602 : i32 to i64
    %c65536_i64_299 = arith.constant 65536 : i64
    %604 = arith.muli %603, %c65536_i64_299 : i64
    %605 = arith.cmpi ult, %601, %604 : i64
    cf.cond_br %605, ^bb109, ^bb110
  ^bb106:  // pred: ^bb103
    %c1_i32_300 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_300) : (i32) -> ()
    cf.br ^bb105
  ^bb107:  // 2 preds: ^bb108, ^bb111
    %606 = llvm.load %3 : !llvm.ptr -> i32
    %c232_i32 = arith.constant 232 : i32
    %607 = arith.addi %606, %c232_i32 : i32
    %c24_i32_301 = arith.constant 24 : i32
    %608 = arith.addi %607, %c24_i32_301 : i32
    %609 = llvm.load %5 : !llvm.ptr -> i32
    %c24_i32_302 = arith.constant 24 : i32
    %610 = arith.addi %609, %c24_i32_302 : i32
    %c0_i64_303 = arith.constant 0 : i64
    %611 = arith.extui %610 : i32 to i64
    %612 = arith.addi %611, %c0_i64_303 : i64
    %c8_i64_304 = arith.constant 8 : i64
    %613 = arith.addi %612, %c8_i64_304 : i64
    %c0_i32_305 = arith.constant 0 : i32
    %614 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_305) : (!llvm.ptr, i32) -> i32
    %615 = arith.extui %614 : i32 to i64
    %c65536_i64_306 = arith.constant 65536 : i64
    %616 = arith.muli %615, %c65536_i64_306 : i64
    %617 = arith.cmpi ult, %613, %616 : i64
    cf.cond_br %617, ^bb112, ^bb113
  ^bb108:  // pred: ^bb109
    %618 = llvm.load %1 : !llvm.ptr -> i32
    %c104_i32 = arith.constant 104 : i32
    %619 = arith.addi %618, %c104_i32 : i32
    llvm.store %619, %5 : i32, !llvm.ptr
    cf.br ^bb107
  ^bb109:  // 2 preds: ^bb105, ^bb110
    %620 = llvm.getelementptr %17[%600] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %621 = llvm.load volatile %620 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_307 = arith.constant 0 : i32
    %622 = arith.cmpi ne, %621, %c0_i32_307 : i32
    cf.cond_br %622, ^bb108, ^bb111
  ^bb110:  // pred: ^bb105
    %c1_i32_308 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_308) : (i32) -> ()
    cf.br ^bb109
  ^bb111:  // pred: ^bb109
    %623 = llvm.load %1 : !llvm.ptr -> i32
    %c96_i32 = arith.constant 96 : i32
    %624 = arith.addi %623, %c96_i32 : i32
    %625 = llvm.load %8 : !llvm.ptr -> i32
    %626 = call @f0(%arg0, %624, %625) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %626, %5 : i32, !llvm.ptr
    cf.br ^bb107
  ^bb112:  // 2 preds: ^bb107, ^bb113
    %627 = llvm.getelementptr %17[%612] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %628 = llvm.load volatile %627 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_309 = arith.constant 0 : i64
    %629 = arith.extui %608 : i32 to i64
    %630 = arith.addi %629, %c0_i64_309 : i64
    %c8_i64_310 = arith.constant 8 : i64
    %631 = arith.addi %630, %c8_i64_310 : i64
    %c0_i32_311 = arith.constant 0 : i32
    %632 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_311) : (!llvm.ptr, i32) -> i32
    %633 = arith.extui %632 : i32 to i64
    %c65536_i64_312 = arith.constant 65536 : i64
    %634 = arith.muli %633, %c65536_i64_312 : i64
    %635 = arith.cmpi ult, %631, %634 : i64
    cf.cond_br %635, ^bb114, ^bb115
  ^bb113:  // pred: ^bb107
    %c1_i32_313 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_313) : (i32) -> ()
    cf.br ^bb112
  ^bb114:  // 2 preds: ^bb112, ^bb115
    %636 = llvm.getelementptr %17[%630] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %628, %636 {alignment = 1 : i64} : i64, !llvm.ptr
    %637 = llvm.load %3 : !llvm.ptr -> i32
    %c232_i32_314 = arith.constant 232 : i32
    %638 = arith.addi %637, %c232_i32_314 : i32
    %c16_i32_315 = arith.constant 16 : i32
    %639 = arith.addi %638, %c16_i32_315 : i32
    %640 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32_316 = arith.constant 16 : i32
    %641 = arith.addi %640, %c16_i32_316 : i32
    %c0_i64_317 = arith.constant 0 : i64
    %642 = arith.extui %641 : i32 to i64
    %643 = arith.addi %642, %c0_i64_317 : i64
    %c8_i64_318 = arith.constant 8 : i64
    %644 = arith.addi %643, %c8_i64_318 : i64
    %c0_i32_319 = arith.constant 0 : i32
    %645 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_319) : (!llvm.ptr, i32) -> i32
    %646 = arith.extui %645 : i32 to i64
    %c65536_i64_320 = arith.constant 65536 : i64
    %647 = arith.muli %646, %c65536_i64_320 : i64
    %648 = arith.cmpi ult, %644, %647 : i64
    cf.cond_br %648, ^bb116, ^bb117
  ^bb115:  // pred: ^bb112
    %c1_i32_321 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_321) : (i32) -> ()
    cf.br ^bb114
  ^bb116:  // 2 preds: ^bb114, ^bb117
    %649 = llvm.getelementptr %17[%643] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %650 = llvm.load volatile %649 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_322 = arith.constant 0 : i64
    %651 = arith.extui %639 : i32 to i64
    %652 = arith.addi %651, %c0_i64_322 : i64
    %c8_i64_323 = arith.constant 8 : i64
    %653 = arith.addi %652, %c8_i64_323 : i64
    %c0_i32_324 = arith.constant 0 : i32
    %654 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_324) : (!llvm.ptr, i32) -> i32
    %655 = arith.extui %654 : i32 to i64
    %c65536_i64_325 = arith.constant 65536 : i64
    %656 = arith.muli %655, %c65536_i64_325 : i64
    %657 = arith.cmpi ult, %653, %656 : i64
    cf.cond_br %657, ^bb118, ^bb119
  ^bb117:  // pred: ^bb114
    %c1_i32_326 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_326) : (i32) -> ()
    cf.br ^bb116
  ^bb118:  // 2 preds: ^bb116, ^bb119
    %658 = llvm.getelementptr %17[%652] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %650, %658 {alignment = 1 : i64} : i64, !llvm.ptr
    %659 = llvm.load %3 : !llvm.ptr -> i32
    %c232_i32_327 = arith.constant 232 : i32
    %660 = arith.addi %659, %c232_i32_327 : i32
    %c8_i32_328 = arith.constant 8 : i32
    %661 = arith.addi %660, %c8_i32_328 : i32
    %662 = llvm.load %5 : !llvm.ptr -> i32
    %c8_i32_329 = arith.constant 8 : i32
    %663 = arith.addi %662, %c8_i32_329 : i32
    %c0_i64_330 = arith.constant 0 : i64
    %664 = arith.extui %663 : i32 to i64
    %665 = arith.addi %664, %c0_i64_330 : i64
    %c8_i64_331 = arith.constant 8 : i64
    %666 = arith.addi %665, %c8_i64_331 : i64
    %c0_i32_332 = arith.constant 0 : i32
    %667 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_332) : (!llvm.ptr, i32) -> i32
    %668 = arith.extui %667 : i32 to i64
    %c65536_i64_333 = arith.constant 65536 : i64
    %669 = arith.muli %668, %c65536_i64_333 : i64
    %670 = arith.cmpi ult, %666, %669 : i64
    cf.cond_br %670, ^bb120, ^bb121
  ^bb119:  // pred: ^bb116
    %c1_i32_334 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_334) : (i32) -> ()
    cf.br ^bb118
  ^bb120:  // 2 preds: ^bb118, ^bb121
    %671 = llvm.getelementptr %17[%665] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %672 = llvm.load volatile %671 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_335 = arith.constant 0 : i64
    %673 = arith.extui %661 : i32 to i64
    %674 = arith.addi %673, %c0_i64_335 : i64
    %c8_i64_336 = arith.constant 8 : i64
    %675 = arith.addi %674, %c8_i64_336 : i64
    %c0_i32_337 = arith.constant 0 : i32
    %676 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_337) : (!llvm.ptr, i32) -> i32
    %677 = arith.extui %676 : i32 to i64
    %c65536_i64_338 = arith.constant 65536 : i64
    %678 = arith.muli %677, %c65536_i64_338 : i64
    %679 = arith.cmpi ult, %675, %678 : i64
    cf.cond_br %679, ^bb122, ^bb123
  ^bb121:  // pred: ^bb118
    %c1_i32_339 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_339) : (i32) -> ()
    cf.br ^bb120
  ^bb122:  // 2 preds: ^bb120, ^bb123
    %680 = llvm.getelementptr %17[%674] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %672, %680 {alignment = 1 : i64} : i64, !llvm.ptr
    %681 = llvm.load %3 : !llvm.ptr -> i32
    %682 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64_340 = arith.constant 0 : i64
    %683 = arith.extui %682 : i32 to i64
    %684 = arith.addi %683, %c0_i64_340 : i64
    %c8_i64_341 = arith.constant 8 : i64
    %685 = arith.addi %684, %c8_i64_341 : i64
    %c0_i32_342 = arith.constant 0 : i32
    %686 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_342) : (!llvm.ptr, i32) -> i32
    %687 = arith.extui %686 : i32 to i64
    %c65536_i64_343 = arith.constant 65536 : i64
    %688 = arith.muli %687, %c65536_i64_343 : i64
    %689 = arith.cmpi ult, %685, %688 : i64
    cf.cond_br %689, ^bb124, ^bb125
  ^bb123:  // pred: ^bb120
    %c1_i32_344 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_344) : (i32) -> ()
    cf.br ^bb122
  ^bb124:  // 2 preds: ^bb122, ^bb125
    %690 = llvm.getelementptr %17[%684] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %691 = llvm.load volatile %690 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c232_i64 = arith.constant 232 : i64
    %692 = arith.extui %681 : i32 to i64
    %693 = arith.addi %692, %c232_i64 : i64
    %c8_i64_345 = arith.constant 8 : i64
    %694 = arith.addi %693, %c8_i64_345 : i64
    %c0_i32_346 = arith.constant 0 : i32
    %695 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_346) : (!llvm.ptr, i32) -> i32
    %696 = arith.extui %695 : i32 to i64
    %c65536_i64_347 = arith.constant 65536 : i64
    %697 = arith.muli %696, %c65536_i64_347 : i64
    %698 = arith.cmpi ult, %694, %697 : i64
    cf.cond_br %698, ^bb126, ^bb127
  ^bb125:  // pred: ^bb122
    %c1_i32_348 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_348) : (i32) -> ()
    cf.br ^bb124
  ^bb126:  // 2 preds: ^bb124, ^bb127
    %699 = llvm.getelementptr %17[%693] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %691, %699 {alignment = 1 : i64} : i64, !llvm.ptr
    %c0_i32_349 = arith.constant 0 : i32
    llvm.store %c0_i32_349, %5 : i32, !llvm.ptr
    %c0_i32_350 = arith.constant 0 : i32
    llvm.store %c0_i32_350, %6 : i32, !llvm.ptr
    cf.br ^bb129
  ^bb127:  // pred: ^bb124
    %c1_i32_351 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_351) : (i32) -> ()
    cf.br ^bb126
  ^bb128:  // pred: ^bb136
    %700 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_352 = arith.constant 1 : i64
    %c96_i64_353 = arith.constant 96 : i64
    %701 = arith.extui %700 : i32 to i64
    %702 = arith.addi %701, %c96_i64_353 : i64
    %c8_i64_354 = arith.constant 8 : i64
    %703 = arith.addi %702, %c8_i64_354 : i64
    %c0_i32_355 = arith.constant 0 : i32
    %704 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_355) : (!llvm.ptr, i32) -> i32
    %705 = arith.extui %704 : i32 to i64
    %c65536_i64_356 = arith.constant 65536 : i64
    %706 = arith.muli %705, %c65536_i64_356 : i64
    %707 = arith.cmpi ult, %703, %706 : i64
    cf.cond_br %707, ^bb137, ^bb138
  ^bb129:  // 2 preds: ^bb126, ^bb134
    %708 = llvm.load %3 : !llvm.ptr -> i32
    %c232_i32_357 = arith.constant 232 : i32
    %709 = arith.addi %708, %c232_i32_357 : i32
    %710 = llvm.load %5 : !llvm.ptr -> i32
    %711 = arith.addi %709, %710 : i32
    llvm.store %711, %7 : i32, !llvm.ptr
    %712 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_358 = arith.constant 0 : i64
    %713 = arith.extui %712 : i32 to i64
    %714 = arith.addi %713, %c0_i64_358 : i64
    %c8_i64_359 = arith.constant 8 : i64
    %715 = arith.addi %714, %c8_i64_359 : i64
    %c0_i32_360 = arith.constant 0 : i32
    %716 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_360) : (!llvm.ptr, i32) -> i32
    %717 = arith.extui %716 : i32 to i64
    %c65536_i64_361 = arith.constant 65536 : i64
    %718 = arith.muli %717, %c65536_i64_361 : i64
    %719 = arith.cmpi ult, %715, %718 : i64
    cf.cond_br %719, ^bb130, ^bb131
  ^bb130:  // 2 preds: ^bb129, ^bb131
    %720 = llvm.getelementptr %17[%714] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %721 = llvm.load volatile %720 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %721, %9 : i64, !llvm.ptr
    %722 = llvm.load %2 : !llvm.ptr -> i32
    %723 = llvm.load %5 : !llvm.ptr -> i32
    %724 = arith.addi %722, %723 : i32
    %c0_i64_362 = arith.constant 0 : i64
    %725 = arith.extui %724 : i32 to i64
    %726 = arith.addi %725, %c0_i64_362 : i64
    %c8_i64_363 = arith.constant 8 : i64
    %727 = arith.addi %726, %c8_i64_363 : i64
    %c0_i32_364 = arith.constant 0 : i32
    %728 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_364) : (!llvm.ptr, i32) -> i32
    %729 = arith.extui %728 : i32 to i64
    %c65536_i64_365 = arith.constant 65536 : i64
    %730 = arith.muli %729, %c65536_i64_365 : i64
    %731 = arith.cmpi ult, %727, %730 : i64
    cf.cond_br %731, ^bb132, ^bb133
  ^bb131:  // pred: ^bb129
    %c1_i32_366 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_366) : (i32) -> ()
    cf.br ^bb130
  ^bb132:  // 2 preds: ^bb130, ^bb133
    %732 = llvm.getelementptr %17[%726] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %733 = llvm.load volatile %732 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %733, %10 : i64, !llvm.ptr
    %734 = arith.subi %721, %733 : i64
    llvm.store %734, %11 : i64, !llvm.ptr
    %735 = llvm.load %6 : !llvm.ptr -> i32
    %736 = arith.extui %735 : i32 to i64
    %c1_i64_367 = arith.constant 1 : i64
    %737 = arith.andi %736, %c1_i64_367 : i64
    llvm.store %737, %12 : i64, !llvm.ptr
    %738 = arith.subi %734, %737 : i64
    %c0_i64_368 = arith.constant 0 : i64
    %739 = arith.extui %711 : i32 to i64
    %740 = arith.addi %739, %c0_i64_368 : i64
    %c8_i64_369 = arith.constant 8 : i64
    %741 = arith.addi %740, %c8_i64_369 : i64
    %c0_i32_370 = arith.constant 0 : i32
    %742 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_370) : (!llvm.ptr, i32) -> i32
    %743 = arith.extui %742 : i32 to i64
    %c65536_i64_371 = arith.constant 65536 : i64
    %744 = arith.muli %743, %c65536_i64_371 : i64
    %745 = arith.cmpi ult, %741, %744 : i64
    cf.cond_br %745, ^bb134, ^bb135
  ^bb133:  // pred: ^bb130
    %c1_i32_372 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_372) : (i32) -> ()
    cf.br ^bb132
  ^bb134:  // 2 preds: ^bb132, ^bb135
    %746 = llvm.getelementptr %17[%740] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %738, %746 {alignment = 1 : i64} : i64, !llvm.ptr
    %747 = llvm.load %9 : !llvm.ptr -> i64
    %748 = llvm.load %10 : !llvm.ptr -> i64
    %749 = arith.cmpi ult, %747, %748 : i64
    %750 = arith.extui %749 : i1 to i64
    %751 = arith.trunci %750 : i64 to i32
    %752 = llvm.load %11 : !llvm.ptr -> i64
    %753 = llvm.load %12 : !llvm.ptr -> i64
    %754 = arith.cmpi ult, %752, %753 : i64
    %755 = arith.extui %754 : i1 to i64
    %756 = arith.trunci %755 : i64 to i32
    %757 = arith.ori %751, %756 : i32
    llvm.store %757, %6 : i32, !llvm.ptr
    %758 = llvm.load %5 : !llvm.ptr -> i32
    %c8_i32_373 = arith.constant 8 : i32
    %759 = arith.addi %758, %c8_i32_373 : i32
    llvm.store %759, %5 : i32, !llvm.ptr
    %c32_i32_374 = arith.constant 32 : i32
    %760 = arith.cmpi eq, %759, %c32_i32_374 : i32
    %761 = arith.extui %760 : i1 to i32
    %c0_i32_375 = arith.constant 0 : i32
    %762 = arith.cmpi eq, %761, %c0_i32_375 : i32
    %763 = arith.extui %762 : i1 to i32
    %c0_i32_376 = arith.constant 0 : i32
    %764 = arith.cmpi ne, %763, %c0_i32_376 : i32
    cf.cond_br %764, ^bb129, ^bb136
  ^bb135:  // pred: ^bb132
    %c1_i32_377 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_377) : (i32) -> ()
    cf.br ^bb134
  ^bb136:  // pred: ^bb134
    cf.br ^bb128
  ^bb137:  // 2 preds: ^bb128, ^bb138
    %765 = llvm.getelementptr %17[%702] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_352, %765 {alignment = 1 : i64} : i64, !llvm.ptr
    %766 = llvm.load %1 : !llvm.ptr -> i32
    %767 = llvm.load %3 : !llvm.ptr -> i32
    %c232_i64_378 = arith.constant 232 : i64
    %768 = arith.extui %767 : i32 to i64
    %769 = arith.addi %768, %c232_i64_378 : i64
    %c8_i64_379 = arith.constant 8 : i64
    %770 = arith.addi %769, %c8_i64_379 : i64
    %c0_i32_380 = arith.constant 0 : i32
    %771 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_380) : (!llvm.ptr, i32) -> i32
    %772 = arith.extui %771 : i32 to i64
    %c65536_i64_381 = arith.constant 65536 : i64
    %773 = arith.muli %772, %c65536_i64_381 : i64
    %774 = arith.cmpi ult, %770, %773 : i64
    cf.cond_br %774, ^bb139, ^bb140
  ^bb138:  // pred: ^bb128
    %c1_i32_382 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_382) : (i32) -> ()
    cf.br ^bb137
  ^bb139:  // 2 preds: ^bb137, ^bb140
    %775 = llvm.getelementptr %17[%769] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %776 = llvm.load volatile %775 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c104_i64 = arith.constant 104 : i64
    %777 = arith.extui %766 : i32 to i64
    %778 = arith.addi %777, %c104_i64 : i64
    %c8_i64_383 = arith.constant 8 : i64
    %779 = arith.addi %778, %c8_i64_383 : i64
    %c0_i32_384 = arith.constant 0 : i32
    %780 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_384) : (!llvm.ptr, i32) -> i32
    %781 = arith.extui %780 : i32 to i64
    %c65536_i64_385 = arith.constant 65536 : i64
    %782 = arith.muli %781, %c65536_i64_385 : i64
    %783 = arith.cmpi ult, %779, %782 : i64
    cf.cond_br %783, ^bb141, ^bb142
  ^bb140:  // pred: ^bb137
    %c1_i32_386 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_386) : (i32) -> ()
    cf.br ^bb139
  ^bb141:  // 2 preds: ^bb139, ^bb142
    %784 = llvm.getelementptr %17[%778] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %776, %784 {alignment = 1 : i64} : i64, !llvm.ptr
    %785 = llvm.load %1 : !llvm.ptr -> i32
    %c112_i32_387 = arith.constant 112 : i32
    %786 = arith.addi %785, %c112_i32_387 : i32
    %787 = llvm.load %3 : !llvm.ptr -> i32
    %c232_i32_388 = arith.constant 232 : i32
    %788 = arith.addi %787, %c232_i32_388 : i32
    %c8_i32_389 = arith.constant 8 : i32
    %789 = arith.addi %788, %c8_i32_389 : i32
    %c0_i64_390 = arith.constant 0 : i64
    %790 = arith.extui %789 : i32 to i64
    %791 = arith.addi %790, %c0_i64_390 : i64
    %c8_i64_391 = arith.constant 8 : i64
    %792 = arith.addi %791, %c8_i64_391 : i64
    %c0_i32_392 = arith.constant 0 : i32
    %793 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_392) : (!llvm.ptr, i32) -> i32
    %794 = arith.extui %793 : i32 to i64
    %c65536_i64_393 = arith.constant 65536 : i64
    %795 = arith.muli %794, %c65536_i64_393 : i64
    %796 = arith.cmpi ult, %792, %795 : i64
    cf.cond_br %796, ^bb143, ^bb144
  ^bb142:  // pred: ^bb139
    %c1_i32_394 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_394) : (i32) -> ()
    cf.br ^bb141
  ^bb143:  // 2 preds: ^bb141, ^bb144
    %797 = llvm.getelementptr %17[%791] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %798 = llvm.load volatile %797 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_395 = arith.constant 0 : i64
    %799 = arith.extui %786 : i32 to i64
    %800 = arith.addi %799, %c0_i64_395 : i64
    %c8_i64_396 = arith.constant 8 : i64
    %801 = arith.addi %800, %c8_i64_396 : i64
    %c0_i32_397 = arith.constant 0 : i32
    %802 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_397) : (!llvm.ptr, i32) -> i32
    %803 = arith.extui %802 : i32 to i64
    %c65536_i64_398 = arith.constant 65536 : i64
    %804 = arith.muli %803, %c65536_i64_398 : i64
    %805 = arith.cmpi ult, %801, %804 : i64
    cf.cond_br %805, ^bb145, ^bb146
  ^bb144:  // pred: ^bb141
    %c1_i32_399 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_399) : (i32) -> ()
    cf.br ^bb143
  ^bb145:  // 2 preds: ^bb143, ^bb146
    %806 = llvm.getelementptr %17[%800] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %798, %806 {alignment = 1 : i64} : i64, !llvm.ptr
    %807 = llvm.load %1 : !llvm.ptr -> i32
    %c120_i32 = arith.constant 120 : i32
    %808 = arith.addi %807, %c120_i32 : i32
    %809 = llvm.load %3 : !llvm.ptr -> i32
    %c232_i32_400 = arith.constant 232 : i32
    %810 = arith.addi %809, %c232_i32_400 : i32
    %c16_i32_401 = arith.constant 16 : i32
    %811 = arith.addi %810, %c16_i32_401 : i32
    %c0_i64_402 = arith.constant 0 : i64
    %812 = arith.extui %811 : i32 to i64
    %813 = arith.addi %812, %c0_i64_402 : i64
    %c8_i64_403 = arith.constant 8 : i64
    %814 = arith.addi %813, %c8_i64_403 : i64
    %c0_i32_404 = arith.constant 0 : i32
    %815 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_404) : (!llvm.ptr, i32) -> i32
    %816 = arith.extui %815 : i32 to i64
    %c65536_i64_405 = arith.constant 65536 : i64
    %817 = arith.muli %816, %c65536_i64_405 : i64
    %818 = arith.cmpi ult, %814, %817 : i64
    cf.cond_br %818, ^bb147, ^bb148
  ^bb146:  // pred: ^bb143
    %c1_i32_406 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_406) : (i32) -> ()
    cf.br ^bb145
  ^bb147:  // 2 preds: ^bb145, ^bb148
    %819 = llvm.getelementptr %17[%813] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %820 = llvm.load volatile %819 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_407 = arith.constant 0 : i64
    %821 = arith.extui %808 : i32 to i64
    %822 = arith.addi %821, %c0_i64_407 : i64
    %c8_i64_408 = arith.constant 8 : i64
    %823 = arith.addi %822, %c8_i64_408 : i64
    %c0_i32_409 = arith.constant 0 : i32
    %824 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_409) : (!llvm.ptr, i32) -> i32
    %825 = arith.extui %824 : i32 to i64
    %c65536_i64_410 = arith.constant 65536 : i64
    %826 = arith.muli %825, %c65536_i64_410 : i64
    %827 = arith.cmpi ult, %823, %826 : i64
    cf.cond_br %827, ^bb149, ^bb150
  ^bb148:  // pred: ^bb145
    %c1_i32_411 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_411) : (i32) -> ()
    cf.br ^bb147
  ^bb149:  // 2 preds: ^bb147, ^bb150
    %828 = llvm.getelementptr %17[%822] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %820, %828 {alignment = 1 : i64} : i64, !llvm.ptr
    %829 = llvm.load %1 : !llvm.ptr -> i32
    %c128_i32 = arith.constant 128 : i32
    %830 = arith.addi %829, %c128_i32 : i32
    %831 = llvm.load %3 : !llvm.ptr -> i32
    %c232_i32_412 = arith.constant 232 : i32
    %832 = arith.addi %831, %c232_i32_412 : i32
    %c24_i32_413 = arith.constant 24 : i32
    %833 = arith.addi %832, %c24_i32_413 : i32
    %c0_i64_414 = arith.constant 0 : i64
    %834 = arith.extui %833 : i32 to i64
    %835 = arith.addi %834, %c0_i64_414 : i64
    %c8_i64_415 = arith.constant 8 : i64
    %836 = arith.addi %835, %c8_i64_415 : i64
    %c0_i32_416 = arith.constant 0 : i32
    %837 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_416) : (!llvm.ptr, i32) -> i32
    %838 = arith.extui %837 : i32 to i64
    %c65536_i64_417 = arith.constant 65536 : i64
    %839 = arith.muli %838, %c65536_i64_417 : i64
    %840 = arith.cmpi ult, %836, %839 : i64
    cf.cond_br %840, ^bb151, ^bb152
  ^bb150:  // pred: ^bb147
    %c1_i32_418 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_418) : (i32) -> ()
    cf.br ^bb149
  ^bb151:  // 2 preds: ^bb149, ^bb152
    %841 = llvm.getelementptr %17[%835] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %842 = llvm.load volatile %841 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_419 = arith.constant 0 : i64
    %843 = arith.extui %830 : i32 to i64
    %844 = arith.addi %843, %c0_i64_419 : i64
    %c8_i64_420 = arith.constant 8 : i64
    %845 = arith.addi %844, %c8_i64_420 : i64
    %c0_i32_421 = arith.constant 0 : i32
    %846 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_421) : (!llvm.ptr, i32) -> i32
    %847 = arith.extui %846 : i32 to i64
    %c65536_i64_422 = arith.constant 65536 : i64
    %848 = arith.muli %847, %c65536_i64_422 : i64
    %849 = arith.cmpi ult, %845, %848 : i64
    cf.cond_br %849, ^bb153, ^bb154
  ^bb152:  // pred: ^bb149
    %c1_i32_423 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_423) : (i32) -> ()
    cf.br ^bb151
  ^bb153:  // 2 preds: ^bb151, ^bb154
    %850 = llvm.getelementptr %17[%844] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %842, %850 {alignment = 1 : i64} : i64, !llvm.ptr
    %851 = llvm.load %3 : !llvm.ptr -> i32
    %c264_i32_424 = arith.constant 264 : i32
    %852 = arith.addi %851, %c264_i32_424 : i32
    %c24_i32_425 = arith.constant 24 : i32
    %853 = arith.addi %852, %c24_i32_425 : i32
    llvm.store %853, %5 : i32, !llvm.ptr
    %854 = llvm.load %8 : !llvm.ptr -> i32
    %c24_i32_426 = arith.constant 24 : i32
    %855 = arith.addi %854, %c24_i32_426 : i32
    %c0_i64_427 = arith.constant 0 : i64
    %856 = arith.extui %855 : i32 to i64
    %857 = arith.addi %856, %c0_i64_427 : i64
    %c8_i64_428 = arith.constant 8 : i64
    %858 = arith.addi %857, %c8_i64_428 : i64
    %c0_i32_429 = arith.constant 0 : i32
    %859 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_429) : (!llvm.ptr, i32) -> i32
    %860 = arith.extui %859 : i32 to i64
    %c65536_i64_430 = arith.constant 65536 : i64
    %861 = arith.muli %860, %c65536_i64_430 : i64
    %862 = arith.cmpi ult, %858, %861 : i64
    cf.cond_br %862, ^bb155, ^bb156
  ^bb154:  // pred: ^bb151
    %c1_i32_431 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_431) : (i32) -> ()
    cf.br ^bb153
  ^bb155:  // 2 preds: ^bb153, ^bb156
    %863 = llvm.getelementptr %17[%857] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %864 = llvm.load volatile %863 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_432 = arith.constant 0 : i64
    %865 = arith.extui %853 : i32 to i64
    %866 = arith.addi %865, %c0_i64_432 : i64
    %c8_i64_433 = arith.constant 8 : i64
    %867 = arith.addi %866, %c8_i64_433 : i64
    %c0_i32_434 = arith.constant 0 : i32
    %868 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_434) : (!llvm.ptr, i32) -> i32
    %869 = arith.extui %868 : i32 to i64
    %c65536_i64_435 = arith.constant 65536 : i64
    %870 = arith.muli %869, %c65536_i64_435 : i64
    %871 = arith.cmpi ult, %867, %870 : i64
    cf.cond_br %871, ^bb157, ^bb158
  ^bb156:  // pred: ^bb153
    %c1_i32_436 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_436) : (i32) -> ()
    cf.br ^bb155
  ^bb157:  // 2 preds: ^bb155, ^bb158
    %872 = llvm.getelementptr %17[%866] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %864, %872 {alignment = 1 : i64} : i64, !llvm.ptr
    %873 = llvm.load %3 : !llvm.ptr -> i32
    %c264_i32_437 = arith.constant 264 : i32
    %874 = arith.addi %873, %c264_i32_437 : i32
    %c16_i32_438 = arith.constant 16 : i32
    %875 = arith.addi %874, %c16_i32_438 : i32
    llvm.store %875, %6 : i32, !llvm.ptr
    %876 = llvm.load %8 : !llvm.ptr -> i32
    %c16_i32_439 = arith.constant 16 : i32
    %877 = arith.addi %876, %c16_i32_439 : i32
    %c0_i64_440 = arith.constant 0 : i64
    %878 = arith.extui %877 : i32 to i64
    %879 = arith.addi %878, %c0_i64_440 : i64
    %c8_i64_441 = arith.constant 8 : i64
    %880 = arith.addi %879, %c8_i64_441 : i64
    %c0_i32_442 = arith.constant 0 : i32
    %881 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_442) : (!llvm.ptr, i32) -> i32
    %882 = arith.extui %881 : i32 to i64
    %c65536_i64_443 = arith.constant 65536 : i64
    %883 = arith.muli %882, %c65536_i64_443 : i64
    %884 = arith.cmpi ult, %880, %883 : i64
    cf.cond_br %884, ^bb159, ^bb160
  ^bb158:  // pred: ^bb155
    %c1_i32_444 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_444) : (i32) -> ()
    cf.br ^bb157
  ^bb159:  // 2 preds: ^bb157, ^bb160
    %885 = llvm.getelementptr %17[%879] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %886 = llvm.load volatile %885 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_445 = arith.constant 0 : i64
    %887 = arith.extui %875 : i32 to i64
    %888 = arith.addi %887, %c0_i64_445 : i64
    %c8_i64_446 = arith.constant 8 : i64
    %889 = arith.addi %888, %c8_i64_446 : i64
    %c0_i32_447 = arith.constant 0 : i32
    %890 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_447) : (!llvm.ptr, i32) -> i32
    %891 = arith.extui %890 : i32 to i64
    %c65536_i64_448 = arith.constant 65536 : i64
    %892 = arith.muli %891, %c65536_i64_448 : i64
    %893 = arith.cmpi ult, %889, %892 : i64
    cf.cond_br %893, ^bb161, ^bb162
  ^bb160:  // pred: ^bb157
    %c1_i32_449 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_449) : (i32) -> ()
    cf.br ^bb159
  ^bb161:  // 2 preds: ^bb159, ^bb162
    %894 = llvm.getelementptr %17[%888] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %886, %894 {alignment = 1 : i64} : i64, !llvm.ptr
    %895 = llvm.load %3 : !llvm.ptr -> i32
    %c264_i32_450 = arith.constant 264 : i32
    %896 = arith.addi %895, %c264_i32_450 : i32
    %c8_i32_451 = arith.constant 8 : i32
    %897 = arith.addi %896, %c8_i32_451 : i32
    llvm.store %897, %7 : i32, !llvm.ptr
    %898 = llvm.load %8 : !llvm.ptr -> i32
    %c8_i32_452 = arith.constant 8 : i32
    %899 = arith.addi %898, %c8_i32_452 : i32
    %c0_i64_453 = arith.constant 0 : i64
    %900 = arith.extui %899 : i32 to i64
    %901 = arith.addi %900, %c0_i64_453 : i64
    %c8_i64_454 = arith.constant 8 : i64
    %902 = arith.addi %901, %c8_i64_454 : i64
    %c0_i32_455 = arith.constant 0 : i32
    %903 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_455) : (!llvm.ptr, i32) -> i32
    %904 = arith.extui %903 : i32 to i64
    %c65536_i64_456 = arith.constant 65536 : i64
    %905 = arith.muli %904, %c65536_i64_456 : i64
    %906 = arith.cmpi ult, %902, %905 : i64
    cf.cond_br %906, ^bb163, ^bb164
  ^bb162:  // pred: ^bb159
    %c1_i32_457 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_457) : (i32) -> ()
    cf.br ^bb161
  ^bb163:  // 2 preds: ^bb161, ^bb164
    %907 = llvm.getelementptr %17[%901] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %908 = llvm.load volatile %907 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_458 = arith.constant 0 : i64
    %909 = arith.extui %897 : i32 to i64
    %910 = arith.addi %909, %c0_i64_458 : i64
    %c8_i64_459 = arith.constant 8 : i64
    %911 = arith.addi %910, %c8_i64_459 : i64
    %c0_i32_460 = arith.constant 0 : i32
    %912 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_460) : (!llvm.ptr, i32) -> i32
    %913 = arith.extui %912 : i32 to i64
    %c65536_i64_461 = arith.constant 65536 : i64
    %914 = arith.muli %913, %c65536_i64_461 : i64
    %915 = arith.cmpi ult, %911, %914 : i64
    cf.cond_br %915, ^bb165, ^bb166
  ^bb164:  // pred: ^bb161
    %c1_i32_462 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_462) : (i32) -> ()
    cf.br ^bb163
  ^bb165:  // 2 preds: ^bb163, ^bb166
    %916 = llvm.getelementptr %17[%910] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %908, %916 {alignment = 1 : i64} : i64, !llvm.ptr
    %917 = llvm.load %3 : !llvm.ptr -> i32
    %918 = llvm.load %8 : !llvm.ptr -> i32
    %c0_i64_463 = arith.constant 0 : i64
    %919 = arith.extui %918 : i32 to i64
    %920 = arith.addi %919, %c0_i64_463 : i64
    %c8_i64_464 = arith.constant 8 : i64
    %921 = arith.addi %920, %c8_i64_464 : i64
    %c0_i32_465 = arith.constant 0 : i32
    %922 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_465) : (!llvm.ptr, i32) -> i32
    %923 = arith.extui %922 : i32 to i64
    %c65536_i64_466 = arith.constant 65536 : i64
    %924 = arith.muli %923, %c65536_i64_466 : i64
    %925 = arith.cmpi ult, %921, %924 : i64
    cf.cond_br %925, ^bb167, ^bb168
  ^bb166:  // pred: ^bb163
    %c1_i32_467 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_467) : (i32) -> ()
    cf.br ^bb165
  ^bb167:  // 2 preds: ^bb165, ^bb168
    %926 = llvm.getelementptr %17[%920] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %927 = llvm.load volatile %926 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c264_i64_468 = arith.constant 264 : i64
    %928 = arith.extui %917 : i32 to i64
    %929 = arith.addi %928, %c264_i64_468 : i64
    %c8_i64_469 = arith.constant 8 : i64
    %930 = arith.addi %929, %c8_i64_469 : i64
    %c0_i32_470 = arith.constant 0 : i32
    %931 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_470) : (!llvm.ptr, i32) -> i32
    %932 = arith.extui %931 : i32 to i64
    %c65536_i64_471 = arith.constant 65536 : i64
    %933 = arith.muli %932, %c65536_i64_471 : i64
    %934 = arith.cmpi ult, %930, %933 : i64
    cf.cond_br %934, ^bb169, ^bb170
  ^bb168:  // pred: ^bb165
    %c1_i32_472 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_472) : (i32) -> ()
    cf.br ^bb167
  ^bb169:  // 2 preds: ^bb167, ^bb170
    %935 = llvm.getelementptr %17[%929] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %927, %935 {alignment = 1 : i64} : i64, !llvm.ptr
    %936 = llvm.load %3 : !llvm.ptr -> i32
    %c264_i32_473 = arith.constant 264 : i32
    %937 = arith.addi %936, %c264_i32_473 : i32
    %938 = llvm.load %3 : !llvm.ptr -> i32
    %939 = llvm.load %3 : !llvm.ptr -> i32
    %c232_i32_474 = arith.constant 232 : i32
    %940 = arith.addi %939, %c232_i32_474 : i32
    call @f32(%arg0, %937, %938, %940) : (!llvm.ptr, i32, i32, i32) -> ()
    %941 = llvm.load %3 : !llvm.ptr -> i32
    %c312_i32 = arith.constant 312 : i32
    %942 = arith.addi %941, %c312_i32 : i32
    %943 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i32_475 = arith.constant 12 : i32
    %944 = arith.addi %943, %c12_i32_475 : i32
    %c16_i32_476 = arith.constant 16 : i32
    %945 = arith.addi %944, %c16_i32_476 : i32
    %c0_i64_477 = arith.constant 0 : i64
    %946 = arith.extui %945 : i32 to i64
    %947 = arith.addi %946, %c0_i64_477 : i64
    %c4_i64_478 = arith.constant 4 : i64
    %948 = arith.addi %947, %c4_i64_478 : i64
    %c0_i32_479 = arith.constant 0 : i32
    %949 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_479) : (!llvm.ptr, i32) -> i32
    %950 = arith.extui %949 : i32 to i64
    %c65536_i64_480 = arith.constant 65536 : i64
    %951 = arith.muli %950, %c65536_i64_480 : i64
    %952 = arith.cmpi ult, %948, %951 : i64
    cf.cond_br %952, ^bb171, ^bb172
  ^bb170:  // pred: ^bb167
    %c1_i32_481 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_481) : (i32) -> ()
    cf.br ^bb169
  ^bb171:  // 2 preds: ^bb169, ^bb172
    %953 = llvm.getelementptr %17[%947] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %954 = llvm.load volatile %953 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_482 = arith.constant 0 : i64
    %955 = arith.extui %942 : i32 to i64
    %956 = arith.addi %955, %c0_i64_482 : i64
    %c4_i64_483 = arith.constant 4 : i64
    %957 = arith.addi %956, %c4_i64_483 : i64
    %c0_i32_484 = arith.constant 0 : i32
    %958 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_484) : (!llvm.ptr, i32) -> i32
    %959 = arith.extui %958 : i32 to i64
    %c65536_i64_485 = arith.constant 65536 : i64
    %960 = arith.muli %959, %c65536_i64_485 : i64
    %961 = arith.cmpi ult, %957, %960 : i64
    cf.cond_br %961, ^bb173, ^bb174
  ^bb172:  // pred: ^bb169
    %c1_i32_486 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_486) : (i32) -> ()
    cf.br ^bb171
  ^bb173:  // 2 preds: ^bb171, ^bb174
    %962 = llvm.getelementptr %17[%956] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %954, %962 {alignment = 1 : i64} : i32, !llvm.ptr
    %963 = llvm.load %3 : !llvm.ptr -> i32
    %c304_i32 = arith.constant 304 : i32
    %964 = arith.addi %963, %c304_i32 : i32
    %965 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i32_487 = arith.constant 12 : i32
    %966 = arith.addi %965, %c12_i32_487 : i32
    %c8_i32_488 = arith.constant 8 : i32
    %967 = arith.addi %966, %c8_i32_488 : i32
    %c0_i64_489 = arith.constant 0 : i64
    %968 = arith.extui %967 : i32 to i64
    %969 = arith.addi %968, %c0_i64_489 : i64
    %c8_i64_490 = arith.constant 8 : i64
    %970 = arith.addi %969, %c8_i64_490 : i64
    %c0_i32_491 = arith.constant 0 : i32
    %971 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_491) : (!llvm.ptr, i32) -> i32
    %972 = arith.extui %971 : i32 to i64
    %c65536_i64_492 = arith.constant 65536 : i64
    %973 = arith.muli %972, %c65536_i64_492 : i64
    %974 = arith.cmpi ult, %970, %973 : i64
    cf.cond_br %974, ^bb175, ^bb176
  ^bb174:  // pred: ^bb171
    %c1_i32_493 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_493) : (i32) -> ()
    cf.br ^bb173
  ^bb175:  // 2 preds: ^bb173, ^bb176
    %975 = llvm.getelementptr %17[%969] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %976 = llvm.load volatile %975 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_494 = arith.constant 0 : i64
    %977 = arith.extui %964 : i32 to i64
    %978 = arith.addi %977, %c0_i64_494 : i64
    %c8_i64_495 = arith.constant 8 : i64
    %979 = arith.addi %978, %c8_i64_495 : i64
    %c0_i32_496 = arith.constant 0 : i32
    %980 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_496) : (!llvm.ptr, i32) -> i32
    %981 = arith.extui %980 : i32 to i64
    %c65536_i64_497 = arith.constant 65536 : i64
    %982 = arith.muli %981, %c65536_i64_497 : i64
    %983 = arith.cmpi ult, %979, %982 : i64
    cf.cond_br %983, ^bb177, ^bb178
  ^bb176:  // pred: ^bb173
    %c1_i32_498 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_498) : (i32) -> ()
    cf.br ^bb175
  ^bb177:  // 2 preds: ^bb175, ^bb178
    %984 = llvm.getelementptr %17[%978] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %976, %984 {alignment = 1 : i64} : i64, !llvm.ptr
    %985 = llvm.load %3 : !llvm.ptr -> i32
    %c324_i32 = arith.constant 324 : i32
    %986 = arith.addi %985, %c324_i32 : i32
    %c0_i64_499 = arith.constant 0 : i64
    %c0_i64_500 = arith.constant 0 : i64
    %987 = arith.extui %986 : i32 to i64
    %988 = arith.addi %987, %c0_i64_500 : i64
    %c8_i64_501 = arith.constant 8 : i64
    %989 = arith.addi %988, %c8_i64_501 : i64
    %c0_i32_502 = arith.constant 0 : i32
    %990 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_502) : (!llvm.ptr, i32) -> i32
    %991 = arith.extui %990 : i32 to i64
    %c65536_i64_503 = arith.constant 65536 : i64
    %992 = arith.muli %991, %c65536_i64_503 : i64
    %993 = arith.cmpi ult, %989, %992 : i64
    cf.cond_br %993, ^bb179, ^bb180
  ^bb178:  // pred: ^bb175
    %c1_i32_504 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_504) : (i32) -> ()
    cf.br ^bb177
  ^bb179:  // 2 preds: ^bb177, ^bb180
    %994 = llvm.getelementptr %17[%988] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_499, %994 {alignment = 1 : i64} : i64, !llvm.ptr
    %995 = llvm.load %3 : !llvm.ptr -> i32
    %c332_i32 = arith.constant 332 : i32
    %996 = arith.addi %995, %c332_i32 : i32
    %c0_i32_505 = arith.constant 0 : i32
    %c0_i64_506 = arith.constant 0 : i64
    %997 = arith.extui %996 : i32 to i64
    %998 = arith.addi %997, %c0_i64_506 : i64
    %c4_i64_507 = arith.constant 4 : i64
    %999 = arith.addi %998, %c4_i64_507 : i64
    %c0_i32_508 = arith.constant 0 : i32
    %1000 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_508) : (!llvm.ptr, i32) -> i32
    %1001 = arith.extui %1000 : i32 to i64
    %c65536_i64_509 = arith.constant 65536 : i64
    %1002 = arith.muli %1001, %c65536_i64_509 : i64
    %1003 = arith.cmpi ult, %999, %1002 : i64
    cf.cond_br %1003, ^bb181, ^bb182
  ^bb180:  // pred: ^bb177
    %c1_i32_510 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_510) : (i32) -> ()
    cf.br ^bb179
  ^bb181:  // 2 preds: ^bb179, ^bb182
    %1004 = llvm.getelementptr %17[%998] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_505, %1004 {alignment = 1 : i64} : i32, !llvm.ptr
    %1005 = llvm.load %7 : !llvm.ptr -> i32
    %1006 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_511 = arith.constant 8 : i32
    %1007 = arith.addi %1006, %c8_i32_511 : i32
    %c0_i64_512 = arith.constant 0 : i64
    %1008 = arith.extui %1007 : i32 to i64
    %1009 = arith.addi %1008, %c0_i64_512 : i64
    %c8_i64_513 = arith.constant 8 : i64
    %1010 = arith.addi %1009, %c8_i64_513 : i64
    %c0_i32_514 = arith.constant 0 : i32
    %1011 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_514) : (!llvm.ptr, i32) -> i32
    %1012 = arith.extui %1011 : i32 to i64
    %c65536_i64_515 = arith.constant 65536 : i64
    %1013 = arith.muli %1012, %c65536_i64_515 : i64
    %1014 = arith.cmpi ult, %1010, %1013 : i64
    cf.cond_br %1014, ^bb183, ^bb184
  ^bb182:  // pred: ^bb179
    %c1_i32_516 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_516) : (i32) -> ()
    cf.br ^bb181
  ^bb183:  // 2 preds: ^bb181, ^bb184
    %1015 = llvm.getelementptr %17[%1009] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1016 = llvm.load volatile %1015 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_517 = arith.constant 0 : i64
    %1017 = arith.extui %1005 : i32 to i64
    %1018 = arith.addi %1017, %c0_i64_517 : i64
    %c8_i64_518 = arith.constant 8 : i64
    %1019 = arith.addi %1018, %c8_i64_518 : i64
    %c0_i32_519 = arith.constant 0 : i32
    %1020 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_519) : (!llvm.ptr, i32) -> i32
    %1021 = arith.extui %1020 : i32 to i64
    %c65536_i64_520 = arith.constant 65536 : i64
    %1022 = arith.muli %1021, %c65536_i64_520 : i64
    %1023 = arith.cmpi ult, %1019, %1022 : i64
    cf.cond_br %1023, ^bb185, ^bb186
  ^bb184:  // pred: ^bb181
    %c1_i32_521 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_521) : (i32) -> ()
    cf.br ^bb183
  ^bb185:  // 2 preds: ^bb183, ^bb186
    %1024 = llvm.getelementptr %17[%1018] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1016, %1024 {alignment = 1 : i64} : i64, !llvm.ptr
    %1025 = llvm.load %6 : !llvm.ptr -> i32
    %1026 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_522 = arith.constant 16 : i32
    %1027 = arith.addi %1026, %c16_i32_522 : i32
    %c0_i64_523 = arith.constant 0 : i64
    %1028 = arith.extui %1027 : i32 to i64
    %1029 = arith.addi %1028, %c0_i64_523 : i64
    %c8_i64_524 = arith.constant 8 : i64
    %1030 = arith.addi %1029, %c8_i64_524 : i64
    %c0_i32_525 = arith.constant 0 : i32
    %1031 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_525) : (!llvm.ptr, i32) -> i32
    %1032 = arith.extui %1031 : i32 to i64
    %c65536_i64_526 = arith.constant 65536 : i64
    %1033 = arith.muli %1032, %c65536_i64_526 : i64
    %1034 = arith.cmpi ult, %1030, %1033 : i64
    cf.cond_br %1034, ^bb187, ^bb188
  ^bb186:  // pred: ^bb183
    %c1_i32_527 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_527) : (i32) -> ()
    cf.br ^bb185
  ^bb187:  // 2 preds: ^bb185, ^bb188
    %1035 = llvm.getelementptr %17[%1029] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1036 = llvm.load volatile %1035 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_528 = arith.constant 0 : i64
    %1037 = arith.extui %1025 : i32 to i64
    %1038 = arith.addi %1037, %c0_i64_528 : i64
    %c8_i64_529 = arith.constant 8 : i64
    %1039 = arith.addi %1038, %c8_i64_529 : i64
    %c0_i32_530 = arith.constant 0 : i32
    %1040 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_530) : (!llvm.ptr, i32) -> i32
    %1041 = arith.extui %1040 : i32 to i64
    %c65536_i64_531 = arith.constant 65536 : i64
    %1042 = arith.muli %1041, %c65536_i64_531 : i64
    %1043 = arith.cmpi ult, %1039, %1042 : i64
    cf.cond_br %1043, ^bb189, ^bb190
  ^bb188:  // pred: ^bb185
    %c1_i32_532 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_532) : (i32) -> ()
    cf.br ^bb187
  ^bb189:  // 2 preds: ^bb187, ^bb190
    %1044 = llvm.getelementptr %17[%1038] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1036, %1044 {alignment = 1 : i64} : i64, !llvm.ptr
    %1045 = llvm.load %5 : !llvm.ptr -> i32
    %1046 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_533 = arith.constant 24 : i32
    %1047 = arith.addi %1046, %c24_i32_533 : i32
    %c0_i64_534 = arith.constant 0 : i64
    %1048 = arith.extui %1047 : i32 to i64
    %1049 = arith.addi %1048, %c0_i64_534 : i64
    %c8_i64_535 = arith.constant 8 : i64
    %1050 = arith.addi %1049, %c8_i64_535 : i64
    %c0_i32_536 = arith.constant 0 : i32
    %1051 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_536) : (!llvm.ptr, i32) -> i32
    %1052 = arith.extui %1051 : i32 to i64
    %c65536_i64_537 = arith.constant 65536 : i64
    %1053 = arith.muli %1052, %c65536_i64_537 : i64
    %1054 = arith.cmpi ult, %1050, %1053 : i64
    cf.cond_br %1054, ^bb191, ^bb192
  ^bb190:  // pred: ^bb187
    %c1_i32_538 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_538) : (i32) -> ()
    cf.br ^bb189
  ^bb191:  // 2 preds: ^bb189, ^bb192
    %1055 = llvm.getelementptr %17[%1049] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1056 = llvm.load volatile %1055 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_539 = arith.constant 0 : i64
    %1057 = arith.extui %1045 : i32 to i64
    %1058 = arith.addi %1057, %c0_i64_539 : i64
    %c8_i64_540 = arith.constant 8 : i64
    %1059 = arith.addi %1058, %c8_i64_540 : i64
    %c0_i32_541 = arith.constant 0 : i32
    %1060 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_541) : (!llvm.ptr, i32) -> i32
    %1061 = arith.extui %1060 : i32 to i64
    %c65536_i64_542 = arith.constant 65536 : i64
    %1062 = arith.muli %1061, %c65536_i64_542 : i64
    %1063 = arith.cmpi ult, %1059, %1062 : i64
    cf.cond_br %1063, ^bb193, ^bb194
  ^bb192:  // pred: ^bb189
    %c1_i32_543 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_543) : (i32) -> ()
    cf.br ^bb191
  ^bb193:  // 2 preds: ^bb191, ^bb194
    %1064 = llvm.getelementptr %17[%1058] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1056, %1064 {alignment = 1 : i64} : i64, !llvm.ptr
    %1065 = llvm.load %3 : !llvm.ptr -> i32
    %1066 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i64_544 = arith.constant 12 : i64
    %1067 = arith.extui %1066 : i32 to i64
    %1068 = arith.addi %1067, %c12_i64_544 : i64
    %c8_i64_545 = arith.constant 8 : i64
    %1069 = arith.addi %1068, %c8_i64_545 : i64
    %c0_i32_546 = arith.constant 0 : i32
    %1070 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_546) : (!llvm.ptr, i32) -> i32
    %1071 = arith.extui %1070 : i32 to i64
    %c65536_i64_547 = arith.constant 65536 : i64
    %1072 = arith.muli %1071, %c65536_i64_547 : i64
    %1073 = arith.cmpi ult, %1069, %1072 : i64
    cf.cond_br %1073, ^bb195, ^bb196
  ^bb194:  // pred: ^bb191
    %c1_i32_548 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_548) : (i32) -> ()
    cf.br ^bb193
  ^bb195:  // 2 preds: ^bb193, ^bb196
    %1074 = llvm.getelementptr %17[%1068] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1075 = llvm.load volatile %1074 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c296_i64 = arith.constant 296 : i64
    %1076 = arith.extui %1065 : i32 to i64
    %1077 = arith.addi %1076, %c296_i64 : i64
    %c8_i64_549 = arith.constant 8 : i64
    %1078 = arith.addi %1077, %c8_i64_549 : i64
    %c0_i32_550 = arith.constant 0 : i32
    %1079 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_550) : (!llvm.ptr, i32) -> i32
    %1080 = arith.extui %1079 : i32 to i64
    %c65536_i64_551 = arith.constant 65536 : i64
    %1081 = arith.muli %1080, %c65536_i64_551 : i64
    %1082 = arith.cmpi ult, %1078, %1081 : i64
    cf.cond_br %1082, ^bb197, ^bb198
  ^bb196:  // pred: ^bb193
    %c1_i32_552 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_552) : (i32) -> ()
    cf.br ^bb195
  ^bb197:  // 2 preds: ^bb195, ^bb198
    %1083 = llvm.getelementptr %17[%1077] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1075, %1083 {alignment = 1 : i64} : i64, !llvm.ptr
    %1084 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_553 = arith.constant 0 : i64
    %c316_i64 = arith.constant 316 : i64
    %1085 = arith.extui %1084 : i32 to i64
    %1086 = arith.addi %1085, %c316_i64 : i64
    %c8_i64_554 = arith.constant 8 : i64
    %1087 = arith.addi %1086, %c8_i64_554 : i64
    %c0_i32_555 = arith.constant 0 : i32
    %1088 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_555) : (!llvm.ptr, i32) -> i32
    %1089 = arith.extui %1088 : i32 to i64
    %c65536_i64_556 = arith.constant 65536 : i64
    %1090 = arith.muli %1089, %c65536_i64_556 : i64
    %1091 = arith.cmpi ult, %1087, %1090 : i64
    cf.cond_br %1091, ^bb199, ^bb200
  ^bb198:  // pred: ^bb195
    %c1_i32_557 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_557) : (i32) -> ()
    cf.br ^bb197
  ^bb199:  // 2 preds: ^bb197, ^bb200
    %1092 = llvm.getelementptr %17[%1086] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_553, %1092 {alignment = 1 : i64} : i64, !llvm.ptr
    %1093 = llvm.load %3 : !llvm.ptr -> i32
    %1094 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_558 = arith.constant 0 : i64
    %1095 = arith.extui %1094 : i32 to i64
    %1096 = arith.addi %1095, %c0_i64_558 : i64
    %c8_i64_559 = arith.constant 8 : i64
    %1097 = arith.addi %1096, %c8_i64_559 : i64
    %c0_i32_560 = arith.constant 0 : i32
    %1098 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_560) : (!llvm.ptr, i32) -> i32
    %1099 = arith.extui %1098 : i32 to i64
    %c65536_i64_561 = arith.constant 65536 : i64
    %1100 = arith.muli %1099, %c65536_i64_561 : i64
    %1101 = arith.cmpi ult, %1097, %1100 : i64
    cf.cond_br %1101, ^bb201, ^bb202
  ^bb200:  // pred: ^bb197
    %c1_i32_562 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_562) : (i32) -> ()
    cf.br ^bb199
  ^bb201:  // 2 preds: ^bb199, ^bb202
    %1102 = llvm.getelementptr %17[%1096] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1103 = llvm.load volatile %1102 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c264_i64_563 = arith.constant 264 : i64
    %1104 = arith.extui %1093 : i32 to i64
    %1105 = arith.addi %1104, %c264_i64_563 : i64
    %c8_i64_564 = arith.constant 8 : i64
    %1106 = arith.addi %1105, %c8_i64_564 : i64
    %c0_i32_565 = arith.constant 0 : i32
    %1107 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_565) : (!llvm.ptr, i32) -> i32
    %1108 = arith.extui %1107 : i32 to i64
    %c65536_i64_566 = arith.constant 65536 : i64
    %1109 = arith.muli %1108, %c65536_i64_566 : i64
    %1110 = arith.cmpi ult, %1106, %1109 : i64
    cf.cond_br %1110, ^bb203, ^bb204
  ^bb202:  // pred: ^bb199
    %c1_i32_567 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_567) : (i32) -> ()
    cf.br ^bb201
  ^bb203:  // 2 preds: ^bb201, ^bb204
    %1111 = llvm.getelementptr %17[%1105] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1103, %1111 {alignment = 1 : i64} : i64, !llvm.ptr
    %1112 = llvm.load %3 : !llvm.ptr -> i32
    %c264_i32_568 = arith.constant 264 : i32
    %1113 = arith.addi %1112, %c264_i32_568 : i32
    call @f31(%arg0, %1113) : (!llvm.ptr, i32) -> ()
    %c2_i64 = arith.constant 2 : i64
    llvm.store %c2_i64, %9 : i64, !llvm.ptr
    cf.br ^bb36
  ^bb204:  // pred: ^bb201
    %c1_i32_569 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_569) : (i32) -> ()
    cf.br ^bb203
  ^bb205:  // 2 preds: ^bb37, ^bb206
    %1114 = llvm.getelementptr %17[%210] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1115 = llvm.load volatile %1114 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_570 = arith.constant 0 : i64
    %1116 = arith.extui %205 : i32 to i64
    %1117 = arith.addi %1116, %c0_i64_570 : i64
    %c4_i64_571 = arith.constant 4 : i64
    %1118 = arith.addi %1117, %c4_i64_571 : i64
    %c0_i32_572 = arith.constant 0 : i32
    %1119 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_572) : (!llvm.ptr, i32) -> i32
    %1120 = arith.extui %1119 : i32 to i64
    %c65536_i64_573 = arith.constant 65536 : i64
    %1121 = arith.muli %1120, %c65536_i64_573 : i64
    %1122 = arith.cmpi ult, %1118, %1121 : i64
    cf.cond_br %1122, ^bb207, ^bb208
  ^bb206:  // pred: ^bb37
    %c1_i32_574 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_574) : (i32) -> ()
    cf.br ^bb205
  ^bb207:  // 2 preds: ^bb205, ^bb208
    %1123 = llvm.getelementptr %17[%1117] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1115, %1123 {alignment = 1 : i64} : i32, !llvm.ptr
    %1124 = llvm.load %3 : !llvm.ptr -> i32
    %c216_i32 = arith.constant 216 : i32
    %1125 = arith.addi %1124, %c216_i32 : i32
    %1126 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i32_575 = arith.constant 12 : i32
    %1127 = arith.addi %1126, %c12_i32_575 : i32
    %c8_i32_576 = arith.constant 8 : i32
    %1128 = arith.addi %1127, %c8_i32_576 : i32
    %c0_i64_577 = arith.constant 0 : i64
    %1129 = arith.extui %1128 : i32 to i64
    %1130 = arith.addi %1129, %c0_i64_577 : i64
    %c8_i64_578 = arith.constant 8 : i64
    %1131 = arith.addi %1130, %c8_i64_578 : i64
    %c0_i32_579 = arith.constant 0 : i32
    %1132 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_579) : (!llvm.ptr, i32) -> i32
    %1133 = arith.extui %1132 : i32 to i64
    %c65536_i64_580 = arith.constant 65536 : i64
    %1134 = arith.muli %1133, %c65536_i64_580 : i64
    %1135 = arith.cmpi ult, %1131, %1134 : i64
    cf.cond_br %1135, ^bb209, ^bb210
  ^bb208:  // pred: ^bb205
    %c1_i32_581 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_581) : (i32) -> ()
    cf.br ^bb207
  ^bb209:  // 2 preds: ^bb207, ^bb210
    %1136 = llvm.getelementptr %17[%1130] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1137 = llvm.load volatile %1136 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_582 = arith.constant 0 : i64
    %1138 = arith.extui %1125 : i32 to i64
    %1139 = arith.addi %1138, %c0_i64_582 : i64
    %c8_i64_583 = arith.constant 8 : i64
    %1140 = arith.addi %1139, %c8_i64_583 : i64
    %c0_i32_584 = arith.constant 0 : i32
    %1141 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_584) : (!llvm.ptr, i32) -> i32
    %1142 = arith.extui %1141 : i32 to i64
    %c65536_i64_585 = arith.constant 65536 : i64
    %1143 = arith.muli %1142, %c65536_i64_585 : i64
    %1144 = arith.cmpi ult, %1140, %1143 : i64
    cf.cond_br %1144, ^bb211, ^bb212
  ^bb210:  // pred: ^bb207
    %c1_i32_586 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_586) : (i32) -> ()
    cf.br ^bb209
  ^bb211:  // 2 preds: ^bb209, ^bb212
    %1145 = llvm.getelementptr %17[%1139] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1137, %1145 {alignment = 1 : i64} : i64, !llvm.ptr
    %1146 = llvm.load %3 : !llvm.ptr -> i32
    %c144_i32 = arith.constant 144 : i32
    %1147 = arith.addi %1146, %c144_i32 : i32
    %c8_i32_587 = arith.constant 8 : i32
    %1148 = arith.addi %1147, %c8_i32_587 : i32
    %1149 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i32_588 = arith.constant 8 : i32
    %1150 = arith.addi %1149, %c8_i32_588 : i32
    %c0_i64_589 = arith.constant 0 : i64
    %1151 = arith.extui %1150 : i32 to i64
    %1152 = arith.addi %1151, %c0_i64_589 : i64
    %c8_i64_590 = arith.constant 8 : i64
    %1153 = arith.addi %1152, %c8_i64_590 : i64
    %c0_i32_591 = arith.constant 0 : i32
    %1154 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_591) : (!llvm.ptr, i32) -> i32
    %1155 = arith.extui %1154 : i32 to i64
    %c65536_i64_592 = arith.constant 65536 : i64
    %1156 = arith.muli %1155, %c65536_i64_592 : i64
    %1157 = arith.cmpi ult, %1153, %1156 : i64
    cf.cond_br %1157, ^bb213, ^bb214
  ^bb212:  // pred: ^bb209
    %c1_i32_593 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_593) : (i32) -> ()
    cf.br ^bb211
  ^bb213:  // 2 preds: ^bb211, ^bb214
    %1158 = llvm.getelementptr %17[%1152] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1159 = llvm.load volatile %1158 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_594 = arith.constant 0 : i64
    %1160 = arith.extui %1148 : i32 to i64
    %1161 = arith.addi %1160, %c0_i64_594 : i64
    %c8_i64_595 = arith.constant 8 : i64
    %1162 = arith.addi %1161, %c8_i64_595 : i64
    %c0_i32_596 = arith.constant 0 : i32
    %1163 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_596) : (!llvm.ptr, i32) -> i32
    %1164 = arith.extui %1163 : i32 to i64
    %c65536_i64_597 = arith.constant 65536 : i64
    %1165 = arith.muli %1164, %c65536_i64_597 : i64
    %1166 = arith.cmpi ult, %1162, %1165 : i64
    cf.cond_br %1166, ^bb215, ^bb216
  ^bb214:  // pred: ^bb211
    %c1_i32_598 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_598) : (i32) -> ()
    cf.br ^bb213
  ^bb215:  // 2 preds: ^bb213, ^bb216
    %1167 = llvm.getelementptr %17[%1161] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1159, %1167 {alignment = 1 : i64} : i64, !llvm.ptr
    %1168 = llvm.load %3 : !llvm.ptr -> i32
    %c144_i32_599 = arith.constant 144 : i32
    %1169 = arith.addi %1168, %c144_i32_599 : i32
    %c16_i32_600 = arith.constant 16 : i32
    %1170 = arith.addi %1169, %c16_i32_600 : i32
    %1171 = llvm.load %4 : !llvm.ptr -> i32
    %c16_i32_601 = arith.constant 16 : i32
    %1172 = arith.addi %1171, %c16_i32_601 : i32
    %c0_i64_602 = arith.constant 0 : i64
    %1173 = arith.extui %1172 : i32 to i64
    %1174 = arith.addi %1173, %c0_i64_602 : i64
    %c8_i64_603 = arith.constant 8 : i64
    %1175 = arith.addi %1174, %c8_i64_603 : i64
    %c0_i32_604 = arith.constant 0 : i32
    %1176 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_604) : (!llvm.ptr, i32) -> i32
    %1177 = arith.extui %1176 : i32 to i64
    %c65536_i64_605 = arith.constant 65536 : i64
    %1178 = arith.muli %1177, %c65536_i64_605 : i64
    %1179 = arith.cmpi ult, %1175, %1178 : i64
    cf.cond_br %1179, ^bb217, ^bb218
  ^bb216:  // pred: ^bb213
    %c1_i32_606 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_606) : (i32) -> ()
    cf.br ^bb215
  ^bb217:  // 2 preds: ^bb215, ^bb218
    %1180 = llvm.getelementptr %17[%1174] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1181 = llvm.load volatile %1180 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_607 = arith.constant 0 : i64
    %1182 = arith.extui %1170 : i32 to i64
    %1183 = arith.addi %1182, %c0_i64_607 : i64
    %c8_i64_608 = arith.constant 8 : i64
    %1184 = arith.addi %1183, %c8_i64_608 : i64
    %c0_i32_609 = arith.constant 0 : i32
    %1185 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_609) : (!llvm.ptr, i32) -> i32
    %1186 = arith.extui %1185 : i32 to i64
    %c65536_i64_610 = arith.constant 65536 : i64
    %1187 = arith.muli %1186, %c65536_i64_610 : i64
    %1188 = arith.cmpi ult, %1184, %1187 : i64
    cf.cond_br %1188, ^bb219, ^bb220
  ^bb218:  // pred: ^bb215
    %c1_i32_611 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_611) : (i32) -> ()
    cf.br ^bb217
  ^bb219:  // 2 preds: ^bb217, ^bb220
    %1189 = llvm.getelementptr %17[%1183] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1181, %1189 {alignment = 1 : i64} : i64, !llvm.ptr
    %1190 = llvm.load %3 : !llvm.ptr -> i32
    %c144_i32_612 = arith.constant 144 : i32
    %1191 = arith.addi %1190, %c144_i32_612 : i32
    %c24_i32_613 = arith.constant 24 : i32
    %1192 = arith.addi %1191, %c24_i32_613 : i32
    %1193 = llvm.load %4 : !llvm.ptr -> i32
    %c24_i32_614 = arith.constant 24 : i32
    %1194 = arith.addi %1193, %c24_i32_614 : i32
    %c0_i64_615 = arith.constant 0 : i64
    %1195 = arith.extui %1194 : i32 to i64
    %1196 = arith.addi %1195, %c0_i64_615 : i64
    %c8_i64_616 = arith.constant 8 : i64
    %1197 = arith.addi %1196, %c8_i64_616 : i64
    %c0_i32_617 = arith.constant 0 : i32
    %1198 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_617) : (!llvm.ptr, i32) -> i32
    %1199 = arith.extui %1198 : i32 to i64
    %c65536_i64_618 = arith.constant 65536 : i64
    %1200 = arith.muli %1199, %c65536_i64_618 : i64
    %1201 = arith.cmpi ult, %1197, %1200 : i64
    cf.cond_br %1201, ^bb221, ^bb222
  ^bb220:  // pred: ^bb217
    %c1_i32_619 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_619) : (i32) -> ()
    cf.br ^bb219
  ^bb221:  // 2 preds: ^bb219, ^bb222
    %1202 = llvm.getelementptr %17[%1196] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1203 = llvm.load volatile %1202 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_620 = arith.constant 0 : i64
    %1204 = arith.extui %1192 : i32 to i64
    %1205 = arith.addi %1204, %c0_i64_620 : i64
    %c8_i64_621 = arith.constant 8 : i64
    %1206 = arith.addi %1205, %c8_i64_621 : i64
    %c0_i32_622 = arith.constant 0 : i32
    %1207 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_622) : (!llvm.ptr, i32) -> i32
    %1208 = arith.extui %1207 : i32 to i64
    %c65536_i64_623 = arith.constant 65536 : i64
    %1209 = arith.muli %1208, %c65536_i64_623 : i64
    %1210 = arith.cmpi ult, %1206, %1209 : i64
    cf.cond_br %1210, ^bb223, ^bb224
  ^bb222:  // pred: ^bb219
    %c1_i32_624 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_624) : (i32) -> ()
    cf.br ^bb221
  ^bb223:  // 2 preds: ^bb221, ^bb224
    %1211 = llvm.getelementptr %17[%1205] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1203, %1211 {alignment = 1 : i64} : i64, !llvm.ptr
    %1212 = llvm.load %3 : !llvm.ptr -> i32
    %c184_i32 = arith.constant 184 : i32
    %1213 = arith.addi %1212, %c184_i32 : i32
    %1214 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_625 = arith.constant 8 : i32
    %1215 = arith.addi %1214, %c8_i32_625 : i32
    %c0_i64_626 = arith.constant 0 : i64
    %1216 = arith.extui %1215 : i32 to i64
    %1217 = arith.addi %1216, %c0_i64_626 : i64
    %c8_i64_627 = arith.constant 8 : i64
    %1218 = arith.addi %1217, %c8_i64_627 : i64
    %c0_i32_628 = arith.constant 0 : i32
    %1219 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_628) : (!llvm.ptr, i32) -> i32
    %1220 = arith.extui %1219 : i32 to i64
    %c65536_i64_629 = arith.constant 65536 : i64
    %1221 = arith.muli %1220, %c65536_i64_629 : i64
    %1222 = arith.cmpi ult, %1218, %1221 : i64
    cf.cond_br %1222, ^bb225, ^bb226
  ^bb224:  // pred: ^bb221
    %c1_i32_630 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_630) : (i32) -> ()
    cf.br ^bb223
  ^bb225:  // 2 preds: ^bb223, ^bb226
    %1223 = llvm.getelementptr %17[%1217] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1224 = llvm.load volatile %1223 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_631 = arith.constant 0 : i64
    %1225 = arith.extui %1213 : i32 to i64
    %1226 = arith.addi %1225, %c0_i64_631 : i64
    %c8_i64_632 = arith.constant 8 : i64
    %1227 = arith.addi %1226, %c8_i64_632 : i64
    %c0_i32_633 = arith.constant 0 : i32
    %1228 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_633) : (!llvm.ptr, i32) -> i32
    %1229 = arith.extui %1228 : i32 to i64
    %c65536_i64_634 = arith.constant 65536 : i64
    %1230 = arith.muli %1229, %c65536_i64_634 : i64
    %1231 = arith.cmpi ult, %1227, %1230 : i64
    cf.cond_br %1231, ^bb227, ^bb228
  ^bb226:  // pred: ^bb223
    %c1_i32_635 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_635) : (i32) -> ()
    cf.br ^bb225
  ^bb227:  // 2 preds: ^bb225, ^bb228
    %1232 = llvm.getelementptr %17[%1226] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1224, %1232 {alignment = 1 : i64} : i64, !llvm.ptr
    %1233 = llvm.load %3 : !llvm.ptr -> i32
    %c192_i32 = arith.constant 192 : i32
    %1234 = arith.addi %1233, %c192_i32 : i32
    %1235 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_636 = arith.constant 16 : i32
    %1236 = arith.addi %1235, %c16_i32_636 : i32
    %c0_i64_637 = arith.constant 0 : i64
    %1237 = arith.extui %1236 : i32 to i64
    %1238 = arith.addi %1237, %c0_i64_637 : i64
    %c8_i64_638 = arith.constant 8 : i64
    %1239 = arith.addi %1238, %c8_i64_638 : i64
    %c0_i32_639 = arith.constant 0 : i32
    %1240 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_639) : (!llvm.ptr, i32) -> i32
    %1241 = arith.extui %1240 : i32 to i64
    %c65536_i64_640 = arith.constant 65536 : i64
    %1242 = arith.muli %1241, %c65536_i64_640 : i64
    %1243 = arith.cmpi ult, %1239, %1242 : i64
    cf.cond_br %1243, ^bb229, ^bb230
  ^bb228:  // pred: ^bb225
    %c1_i32_641 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_641) : (i32) -> ()
    cf.br ^bb227
  ^bb229:  // 2 preds: ^bb227, ^bb230
    %1244 = llvm.getelementptr %17[%1238] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1245 = llvm.load volatile %1244 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_642 = arith.constant 0 : i64
    %1246 = arith.extui %1234 : i32 to i64
    %1247 = arith.addi %1246, %c0_i64_642 : i64
    %c8_i64_643 = arith.constant 8 : i64
    %1248 = arith.addi %1247, %c8_i64_643 : i64
    %c0_i32_644 = arith.constant 0 : i32
    %1249 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_644) : (!llvm.ptr, i32) -> i32
    %1250 = arith.extui %1249 : i32 to i64
    %c65536_i64_645 = arith.constant 65536 : i64
    %1251 = arith.muli %1250, %c65536_i64_645 : i64
    %1252 = arith.cmpi ult, %1248, %1251 : i64
    cf.cond_br %1252, ^bb231, ^bb232
  ^bb230:  // pred: ^bb227
    %c1_i32_646 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_646) : (i32) -> ()
    cf.br ^bb229
  ^bb231:  // 2 preds: ^bb229, ^bb232
    %1253 = llvm.getelementptr %17[%1247] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1245, %1253 {alignment = 1 : i64} : i64, !llvm.ptr
    %1254 = llvm.load %3 : !llvm.ptr -> i32
    %c200_i32 = arith.constant 200 : i32
    %1255 = arith.addi %1254, %c200_i32 : i32
    %1256 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_647 = arith.constant 24 : i32
    %1257 = arith.addi %1256, %c24_i32_647 : i32
    %c0_i64_648 = arith.constant 0 : i64
    %1258 = arith.extui %1257 : i32 to i64
    %1259 = arith.addi %1258, %c0_i64_648 : i64
    %c8_i64_649 = arith.constant 8 : i64
    %1260 = arith.addi %1259, %c8_i64_649 : i64
    %c0_i32_650 = arith.constant 0 : i32
    %1261 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_650) : (!llvm.ptr, i32) -> i32
    %1262 = arith.extui %1261 : i32 to i64
    %c65536_i64_651 = arith.constant 65536 : i64
    %1263 = arith.muli %1262, %c65536_i64_651 : i64
    %1264 = arith.cmpi ult, %1260, %1263 : i64
    cf.cond_br %1264, ^bb233, ^bb234
  ^bb232:  // pred: ^bb229
    %c1_i32_652 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_652) : (i32) -> ()
    cf.br ^bb231
  ^bb233:  // 2 preds: ^bb231, ^bb234
    %1265 = llvm.getelementptr %17[%1259] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1266 = llvm.load volatile %1265 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_653 = arith.constant 0 : i64
    %1267 = arith.extui %1255 : i32 to i64
    %1268 = arith.addi %1267, %c0_i64_653 : i64
    %c8_i64_654 = arith.constant 8 : i64
    %1269 = arith.addi %1268, %c8_i64_654 : i64
    %c0_i32_655 = arith.constant 0 : i32
    %1270 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_655) : (!llvm.ptr, i32) -> i32
    %1271 = arith.extui %1270 : i32 to i64
    %c65536_i64_656 = arith.constant 65536 : i64
    %1272 = arith.muli %1271, %c65536_i64_656 : i64
    %1273 = arith.cmpi ult, %1269, %1272 : i64
    cf.cond_br %1273, ^bb235, ^bb236
  ^bb234:  // pred: ^bb231
    %c1_i32_657 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_657) : (i32) -> ()
    cf.br ^bb233
  ^bb235:  // 2 preds: ^bb233, ^bb236
    %1274 = llvm.getelementptr %17[%1268] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1266, %1274 {alignment = 1 : i64} : i64, !llvm.ptr
    %1275 = llvm.load %3 : !llvm.ptr -> i32
    %1276 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i64_658 = arith.constant 12 : i64
    %1277 = arith.extui %1276 : i32 to i64
    %1278 = arith.addi %1277, %c12_i64_658 : i64
    %c8_i64_659 = arith.constant 8 : i64
    %1279 = arith.addi %1278, %c8_i64_659 : i64
    %c0_i32_660 = arith.constant 0 : i32
    %1280 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_660) : (!llvm.ptr, i32) -> i32
    %1281 = arith.extui %1280 : i32 to i64
    %c65536_i64_661 = arith.constant 65536 : i64
    %1282 = arith.muli %1281, %c65536_i64_661 : i64
    %1283 = arith.cmpi ult, %1279, %1282 : i64
    cf.cond_br %1283, ^bb237, ^bb238
  ^bb236:  // pred: ^bb233
    %c1_i32_662 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_662) : (i32) -> ()
    cf.br ^bb235
  ^bb237:  // 2 preds: ^bb235, ^bb238
    %1284 = llvm.getelementptr %17[%1278] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1285 = llvm.load volatile %1284 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c208_i64 = arith.constant 208 : i64
    %1286 = arith.extui %1275 : i32 to i64
    %1287 = arith.addi %1286, %c208_i64 : i64
    %c8_i64_663 = arith.constant 8 : i64
    %1288 = arith.addi %1287, %c8_i64_663 : i64
    %c0_i32_664 = arith.constant 0 : i32
    %1289 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_664) : (!llvm.ptr, i32) -> i32
    %1290 = arith.extui %1289 : i32 to i64
    %c65536_i64_665 = arith.constant 65536 : i64
    %1291 = arith.muli %1290, %c65536_i64_665 : i64
    %1292 = arith.cmpi ult, %1288, %1291 : i64
    cf.cond_br %1292, ^bb239, ^bb240
  ^bb238:  // pred: ^bb235
    %c1_i32_666 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_666) : (i32) -> ()
    cf.br ^bb237
  ^bb239:  // 2 preds: ^bb237, ^bb240
    %1293 = llvm.getelementptr %17[%1287] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1285, %1293 {alignment = 1 : i64} : i64, !llvm.ptr
    %1294 = llvm.load %3 : !llvm.ptr -> i32
    %1295 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_667 = arith.constant 0 : i64
    %1296 = arith.extui %1295 : i32 to i64
    %1297 = arith.addi %1296, %c0_i64_667 : i64
    %c8_i64_668 = arith.constant 8 : i64
    %1298 = arith.addi %1297, %c8_i64_668 : i64
    %c0_i32_669 = arith.constant 0 : i32
    %1299 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_669) : (!llvm.ptr, i32) -> i32
    %1300 = arith.extui %1299 : i32 to i64
    %c65536_i64_670 = arith.constant 65536 : i64
    %1301 = arith.muli %1300, %c65536_i64_670 : i64
    %1302 = arith.cmpi ult, %1298, %1301 : i64
    cf.cond_br %1302, ^bb241, ^bb242
  ^bb240:  // pred: ^bb237
    %c1_i32_671 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_671) : (i32) -> ()
    cf.br ^bb239
  ^bb241:  // 2 preds: ^bb239, ^bb242
    %1303 = llvm.getelementptr %17[%1297] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1304 = llvm.load volatile %1303 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c144_i64 = arith.constant 144 : i64
    %1305 = arith.extui %1294 : i32 to i64
    %1306 = arith.addi %1305, %c144_i64 : i64
    %c8_i64_672 = arith.constant 8 : i64
    %1307 = arith.addi %1306, %c8_i64_672 : i64
    %c0_i32_673 = arith.constant 0 : i32
    %1308 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_673) : (!llvm.ptr, i32) -> i32
    %1309 = arith.extui %1308 : i32 to i64
    %c65536_i64_674 = arith.constant 65536 : i64
    %1310 = arith.muli %1309, %c65536_i64_674 : i64
    %1311 = arith.cmpi ult, %1307, %1310 : i64
    cf.cond_br %1311, ^bb243, ^bb244
  ^bb242:  // pred: ^bb239
    %c1_i32_675 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_675) : (i32) -> ()
    cf.br ^bb241
  ^bb243:  // 2 preds: ^bb241, ^bb244
    %1312 = llvm.getelementptr %17[%1306] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1304, %1312 {alignment = 1 : i64} : i64, !llvm.ptr
    %1313 = llvm.load %3 : !llvm.ptr -> i32
    %1314 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_676 = arith.constant 0 : i64
    %1315 = arith.extui %1314 : i32 to i64
    %1316 = arith.addi %1315, %c0_i64_676 : i64
    %c8_i64_677 = arith.constant 8 : i64
    %1317 = arith.addi %1316, %c8_i64_677 : i64
    %c0_i32_678 = arith.constant 0 : i32
    %1318 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_678) : (!llvm.ptr, i32) -> i32
    %1319 = arith.extui %1318 : i32 to i64
    %c65536_i64_679 = arith.constant 65536 : i64
    %1320 = arith.muli %1319, %c65536_i64_679 : i64
    %1321 = arith.cmpi ult, %1317, %1320 : i64
    cf.cond_br %1321, ^bb245, ^bb246
  ^bb244:  // pred: ^bb241
    %c1_i32_680 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_680) : (i32) -> ()
    cf.br ^bb243
  ^bb245:  // 2 preds: ^bb243, ^bb246
    %1322 = llvm.getelementptr %17[%1316] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1323 = llvm.load volatile %1322 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c176_i64 = arith.constant 176 : i64
    %1324 = arith.extui %1313 : i32 to i64
    %1325 = arith.addi %1324, %c176_i64 : i64
    %c8_i64_681 = arith.constant 8 : i64
    %1326 = arith.addi %1325, %c8_i64_681 : i64
    %c0_i32_682 = arith.constant 0 : i32
    %1327 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_682) : (!llvm.ptr, i32) -> i32
    %1328 = arith.extui %1327 : i32 to i64
    %c65536_i64_683 = arith.constant 65536 : i64
    %1329 = arith.muli %1328, %c65536_i64_683 : i64
    %1330 = arith.cmpi ult, %1326, %1329 : i64
    cf.cond_br %1330, ^bb247, ^bb248
  ^bb246:  // pred: ^bb243
    %c1_i32_684 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_684) : (i32) -> ()
    cf.br ^bb245
  ^bb247:  // 2 preds: ^bb245, ^bb248
    %1331 = llvm.getelementptr %17[%1325] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1323, %1331 {alignment = 1 : i64} : i64, !llvm.ptr
    %1332 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_685 = arith.constant 8 : i32
    %1333 = arith.addi %1332, %c8_i32_685 : i32
    %1334 = llvm.load %3 : !llvm.ptr -> i32
    %c144_i32_686 = arith.constant 144 : i32
    %1335 = arith.addi %1334, %c144_i32_686 : i32
    %c88_i32_687 = arith.constant 88 : i32
    %1336 = call @f161(%arg0, %1333, %1335, %c88_i32_687) : (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i64_688 = arith.constant 0 : i64
    llvm.store %c0_i64_688, %9 : i64, !llvm.ptr
    cf.br ^bb36
  ^bb248:  // pred: ^bb245
    %c1_i32_689 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_689) : (i32) -> ()
    cf.br ^bb247
  ^bb249:  // 2 preds: ^bb36, ^bb250
    %1337 = llvm.getelementptr %17[%198] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %196, %1337 {alignment = 1 : i64} : i64, !llvm.ptr
    %1338 = llvm.load %3 : !llvm.ptr -> i32
    %c368_i32_690 = arith.constant 368 : i32
    %1339 = arith.addi %1338, %c368_i32_690 : i32
    llvm.store %1339, %14 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb250:  // pred: ^bb36
    %c1_i32_691 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_691) : (i32) -> ()
    cf.br ^bb249
  }
  func.func @f30(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %9 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %14 = llvm.load %10 : !llvm.ptr -> i32
    %c240_i32 = arith.constant 240 : i32
    %15 = arith.subi %14, %c240_i32 : i32
    llvm.store %15, %1 : i32, !llvm.ptr
    llvm.store %15, %10 : i32, !llvm.ptr
    %c0_i32_8 = arith.constant 0 : i32
    llvm.store %c0_i32_8, %2 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb2:  // pred: ^bb202
    return
  ^bb3:  // pred: ^bb13
    %c0_i32_9 = arith.constant 0 : i32
    llvm.store %c0_i32_9, %3 : i32, !llvm.ptr
    %16 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %17 = arith.addi %16, %c24_i32 : i32
    %c0_i32_10 = arith.constant 0 : i32
    %c1050164_i64 = arith.constant 1050164 : i64
    %18 = arith.extui %c0_i32_10 : i32 to i64
    %19 = arith.addi %18, %c1050164_i64 : i64
    %c8_i64 = arith.constant 8 : i64
    %20 = arith.addi %19, %c8_i64 : i64
    %c0_i32_11 = arith.constant 0 : i32
    %21 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_11) : (!llvm.ptr, i32) -> i32
    %22 = arith.extui %21 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %23 = arith.muli %22, %c65536_i64 : i64
    %24 = arith.cmpi ult, %20, %23 : i64
    cf.cond_br %24, ^bb14, ^bb15
  ^bb4:  // 2 preds: ^bb1, ^bb11
    %25 = llvm.load %1 : !llvm.ptr -> i32
    %26 = llvm.load %2 : !llvm.ptr -> i32
    %27 = arith.addi %25, %26 : i32
    llvm.store %27, %3 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c0_i64_12 = arith.constant 0 : i64
    %28 = arith.extui %27 : i32 to i64
    %29 = arith.addi %28, %c0_i64_12 : i64
    %c8_i64_13 = arith.constant 8 : i64
    %30 = arith.addi %29, %c8_i64_13 : i64
    %c0_i32_14 = arith.constant 0 : i32
    %31 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_14) : (!llvm.ptr, i32) -> i32
    %32 = arith.extui %31 : i32 to i64
    %c65536_i64_15 = arith.constant 65536 : i64
    %33 = arith.muli %32, %c65536_i64_15 : i64
    %34 = arith.cmpi ult, %30, %33 : i64
    cf.cond_br %34, ^bb5, ^bb6
  ^bb5:  // 2 preds: ^bb4, ^bb6
    %35 = llvm.getelementptr %13[%29] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64, %35 {alignment = 1 : i64} : i64, !llvm.ptr
    %36 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32_16 = arith.constant 24 : i32
    %37 = arith.addi %36, %c24_i32_16 : i32
    %c0_i64_17 = arith.constant 0 : i64
    %c0_i64_18 = arith.constant 0 : i64
    %38 = arith.extui %37 : i32 to i64
    %39 = arith.addi %38, %c0_i64_18 : i64
    %c8_i64_19 = arith.constant 8 : i64
    %40 = arith.addi %39, %c8_i64_19 : i64
    %c0_i32_20 = arith.constant 0 : i32
    %41 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_20) : (!llvm.ptr, i32) -> i32
    %42 = arith.extui %41 : i32 to i64
    %c65536_i64_21 = arith.constant 65536 : i64
    %43 = arith.muli %42, %c65536_i64_21 : i64
    %44 = arith.cmpi ult, %40, %43 : i64
    cf.cond_br %44, ^bb7, ^bb8
  ^bb6:  // pred: ^bb4
    %c1_i32_22 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_22) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %45 = llvm.getelementptr %13[%39] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_17, %45 {alignment = 1 : i64} : i64, !llvm.ptr
    %46 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %47 = arith.addi %46, %c16_i32 : i32
    %c0_i64_23 = arith.constant 0 : i64
    %c0_i64_24 = arith.constant 0 : i64
    %48 = arith.extui %47 : i32 to i64
    %49 = arith.addi %48, %c0_i64_24 : i64
    %c8_i64_25 = arith.constant 8 : i64
    %50 = arith.addi %49, %c8_i64_25 : i64
    %c0_i32_26 = arith.constant 0 : i32
    %51 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_26) : (!llvm.ptr, i32) -> i32
    %52 = arith.extui %51 : i32 to i64
    %c65536_i64_27 = arith.constant 65536 : i64
    %53 = arith.muli %52, %c65536_i64_27 : i64
    %54 = arith.cmpi ult, %50, %53 : i64
    cf.cond_br %54, ^bb9, ^bb10
  ^bb8:  // pred: ^bb5
    %c1_i32_28 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_28) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %55 = llvm.getelementptr %13[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_23, %55 {alignment = 1 : i64} : i64, !llvm.ptr
    %56 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %57 = arith.addi %56, %c8_i32 : i32
    %c0_i64_29 = arith.constant 0 : i64
    %c0_i64_30 = arith.constant 0 : i64
    %58 = arith.extui %57 : i32 to i64
    %59 = arith.addi %58, %c0_i64_30 : i64
    %c8_i64_31 = arith.constant 8 : i64
    %60 = arith.addi %59, %c8_i64_31 : i64
    %c0_i32_32 = arith.constant 0 : i32
    %61 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_32) : (!llvm.ptr, i32) -> i32
    %62 = arith.extui %61 : i32 to i64
    %c65536_i64_33 = arith.constant 65536 : i64
    %63 = arith.muli %62, %c65536_i64_33 : i64
    %64 = arith.cmpi ult, %60, %63 : i64
    cf.cond_br %64, ^bb11, ^bb12
  ^bb10:  // pred: ^bb7
    %c1_i32_34 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_34) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %65 = llvm.getelementptr %13[%59] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_29, %65 {alignment = 1 : i64} : i64, !llvm.ptr
    %66 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %67 = arith.addi %66, %c32_i32 : i32
    llvm.store %67, %2 : i32, !llvm.ptr
    %c128_i32 = arith.constant 128 : i32
    %68 = arith.cmpi eq, %67, %c128_i32 : i32
    %69 = arith.extui %68 : i1 to i32
    %c0_i32_35 = arith.constant 0 : i32
    %70 = arith.cmpi eq, %69, %c0_i32_35 : i32
    %71 = arith.extui %70 : i1 to i32
    %c0_i32_36 = arith.constant 0 : i32
    %72 = arith.cmpi ne, %71, %c0_i32_36 : i32
    cf.cond_br %72, ^bb4, ^bb13
  ^bb12:  // pred: ^bb9
    %c1_i32_37 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_37) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // pred: ^bb11
    cf.br ^bb3
  ^bb14:  // 2 preds: ^bb3, ^bb15
    %73 = llvm.getelementptr %13[%19] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %74 = llvm.load volatile %73 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_38 = arith.constant 0 : i64
    %75 = arith.extui %17 : i32 to i64
    %76 = arith.addi %75, %c0_i64_38 : i64
    %c8_i64_39 = arith.constant 8 : i64
    %77 = arith.addi %76, %c8_i64_39 : i64
    %c0_i32_40 = arith.constant 0 : i32
    %78 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_40) : (!llvm.ptr, i32) -> i32
    %79 = arith.extui %78 : i32 to i64
    %c65536_i64_41 = arith.constant 65536 : i64
    %80 = arith.muli %79, %c65536_i64_41 : i64
    %81 = arith.cmpi ult, %77, %80 : i64
    cf.cond_br %81, ^bb16, ^bb17
  ^bb15:  // pred: ^bb3
    %c1_i32_42 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_42) : (i32) -> ()
    cf.br ^bb14
  ^bb16:  // 2 preds: ^bb14, ^bb17
    %82 = llvm.getelementptr %13[%76] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %74, %82 {alignment = 1 : i64} : i64, !llvm.ptr
    %83 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32_43 = arith.constant 16 : i32
    %84 = arith.addi %83, %c16_i32_43 : i32
    %c0_i32_44 = arith.constant 0 : i32
    %c1050156_i64 = arith.constant 1050156 : i64
    %85 = arith.extui %c0_i32_44 : i32 to i64
    %86 = arith.addi %85, %c1050156_i64 : i64
    %c8_i64_45 = arith.constant 8 : i64
    %87 = arith.addi %86, %c8_i64_45 : i64
    %c0_i32_46 = arith.constant 0 : i32
    %88 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_46) : (!llvm.ptr, i32) -> i32
    %89 = arith.extui %88 : i32 to i64
    %c65536_i64_47 = arith.constant 65536 : i64
    %90 = arith.muli %89, %c65536_i64_47 : i64
    %91 = arith.cmpi ult, %87, %90 : i64
    cf.cond_br %91, ^bb18, ^bb19
  ^bb17:  // pred: ^bb14
    %c1_i32_48 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_48) : (i32) -> ()
    cf.br ^bb16
  ^bb18:  // 2 preds: ^bb16, ^bb19
    %92 = llvm.getelementptr %13[%86] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %93 = llvm.load volatile %92 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_49 = arith.constant 0 : i64
    %94 = arith.extui %84 : i32 to i64
    %95 = arith.addi %94, %c0_i64_49 : i64
    %c8_i64_50 = arith.constant 8 : i64
    %96 = arith.addi %95, %c8_i64_50 : i64
    %c0_i32_51 = arith.constant 0 : i32
    %97 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_51) : (!llvm.ptr, i32) -> i32
    %98 = arith.extui %97 : i32 to i64
    %c65536_i64_52 = arith.constant 65536 : i64
    %99 = arith.muli %98, %c65536_i64_52 : i64
    %100 = arith.cmpi ult, %96, %99 : i64
    cf.cond_br %100, ^bb20, ^bb21
  ^bb19:  // pred: ^bb16
    %c1_i32_53 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_53) : (i32) -> ()
    cf.br ^bb18
  ^bb20:  // 2 preds: ^bb18, ^bb21
    %101 = llvm.getelementptr %13[%95] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %93, %101 {alignment = 1 : i64} : i64, !llvm.ptr
    %102 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_54 = arith.constant 8 : i32
    %103 = arith.addi %102, %c8_i32_54 : i32
    %c0_i32_55 = arith.constant 0 : i32
    %c1050148_i64 = arith.constant 1050148 : i64
    %104 = arith.extui %c0_i32_55 : i32 to i64
    %105 = arith.addi %104, %c1050148_i64 : i64
    %c8_i64_56 = arith.constant 8 : i64
    %106 = arith.addi %105, %c8_i64_56 : i64
    %c0_i32_57 = arith.constant 0 : i32
    %107 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_57) : (!llvm.ptr, i32) -> i32
    %108 = arith.extui %107 : i32 to i64
    %c65536_i64_58 = arith.constant 65536 : i64
    %109 = arith.muli %108, %c65536_i64_58 : i64
    %110 = arith.cmpi ult, %106, %109 : i64
    cf.cond_br %110, ^bb22, ^bb23
  ^bb21:  // pred: ^bb18
    %c1_i32_59 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_59) : (i32) -> ()
    cf.br ^bb20
  ^bb22:  // 2 preds: ^bb20, ^bb23
    %111 = llvm.getelementptr %13[%105] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %112 = llvm.load volatile %111 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_60 = arith.constant 0 : i64
    %113 = arith.extui %103 : i32 to i64
    %114 = arith.addi %113, %c0_i64_60 : i64
    %c8_i64_61 = arith.constant 8 : i64
    %115 = arith.addi %114, %c8_i64_61 : i64
    %c0_i32_62 = arith.constant 0 : i32
    %116 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_62) : (!llvm.ptr, i32) -> i32
    %117 = arith.extui %116 : i32 to i64
    %c65536_i64_63 = arith.constant 65536 : i64
    %118 = arith.muli %117, %c65536_i64_63 : i64
    %119 = arith.cmpi ult, %115, %118 : i64
    cf.cond_br %119, ^bb24, ^bb25
  ^bb23:  // pred: ^bb20
    %c1_i32_64 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_64) : (i32) -> ()
    cf.br ^bb22
  ^bb24:  // 2 preds: ^bb22, ^bb25
    %120 = llvm.getelementptr %13[%114] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %112, %120 {alignment = 1 : i64} : i64, !llvm.ptr
    %121 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_65 = arith.constant 0 : i32
    %c1050140_i64 = arith.constant 1050140 : i64
    %122 = arith.extui %c0_i32_65 : i32 to i64
    %123 = arith.addi %122, %c1050140_i64 : i64
    %c8_i64_66 = arith.constant 8 : i64
    %124 = arith.addi %123, %c8_i64_66 : i64
    %c0_i32_67 = arith.constant 0 : i32
    %125 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_67) : (!llvm.ptr, i32) -> i32
    %126 = arith.extui %125 : i32 to i64
    %c65536_i64_68 = arith.constant 65536 : i64
    %127 = arith.muli %126, %c65536_i64_68 : i64
    %128 = arith.cmpi ult, %124, %127 : i64
    cf.cond_br %128, ^bb26, ^bb27
  ^bb25:  // pred: ^bb22
    %c1_i32_69 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_69) : (i32) -> ()
    cf.br ^bb24
  ^bb26:  // 2 preds: ^bb24, ^bb27
    %129 = llvm.getelementptr %13[%123] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %130 = llvm.load volatile %129 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_70 = arith.constant 0 : i64
    %131 = arith.extui %121 : i32 to i64
    %132 = arith.addi %131, %c0_i64_70 : i64
    %c8_i64_71 = arith.constant 8 : i64
    %133 = arith.addi %132, %c8_i64_71 : i64
    %c0_i32_72 = arith.constant 0 : i32
    %134 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_72) : (!llvm.ptr, i32) -> i32
    %135 = arith.extui %134 : i32 to i64
    %c65536_i64_73 = arith.constant 65536 : i64
    %136 = arith.muli %135, %c65536_i64_73 : i64
    %137 = arith.cmpi ult, %133, %136 : i64
    cf.cond_br %137, ^bb28, ^bb29
  ^bb27:  // pred: ^bb24
    %c1_i32_74 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_74) : (i32) -> ()
    cf.br ^bb26
  ^bb28:  // 2 preds: ^bb26, ^bb29
    %138 = llvm.getelementptr %13[%132] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %130, %138 {alignment = 1 : i64} : i64, !llvm.ptr
    %139 = llvm.load %1 : !llvm.ptr -> i32
    %c176_i32 = arith.constant 176 : i32
    %140 = arith.addi %139, %c176_i32 : i32
    %c16_i32_75 = arith.constant 16 : i32
    %141 = arith.addi %140, %c16_i32_75 : i32
    llvm.store %141, %4 : i32, !llvm.ptr
    %142 = llvm.load %0 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %143 = arith.addi %142, %c48_i32 : i32
    %c0_i64_76 = arith.constant 0 : i64
    %144 = arith.extui %143 : i32 to i64
    %145 = arith.addi %144, %c0_i64_76 : i64
    %c4_i64 = arith.constant 4 : i64
    %146 = arith.addi %145, %c4_i64 : i64
    %c0_i32_77 = arith.constant 0 : i32
    %147 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_77) : (!llvm.ptr, i32) -> i32
    %148 = arith.extui %147 : i32 to i64
    %c65536_i64_78 = arith.constant 65536 : i64
    %149 = arith.muli %148, %c65536_i64_78 : i64
    %150 = arith.cmpi ult, %146, %149 : i64
    cf.cond_br %150, ^bb30, ^bb31
  ^bb29:  // pred: ^bb26
    %c1_i32_79 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_79) : (i32) -> ()
    cf.br ^bb28
  ^bb30:  // 2 preds: ^bb28, ^bb31
    %151 = llvm.getelementptr %13[%145] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %152 = llvm.load volatile %151 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_80 = arith.constant 0 : i64
    %153 = arith.extui %141 : i32 to i64
    %154 = arith.addi %153, %c0_i64_80 : i64
    %c4_i64_81 = arith.constant 4 : i64
    %155 = arith.addi %154, %c4_i64_81 : i64
    %c0_i32_82 = arith.constant 0 : i32
    %156 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_82) : (!llvm.ptr, i32) -> i32
    %157 = arith.extui %156 : i32 to i64
    %c65536_i64_83 = arith.constant 65536 : i64
    %158 = arith.muli %157, %c65536_i64_83 : i64
    %159 = arith.cmpi ult, %155, %158 : i64
    cf.cond_br %159, ^bb32, ^bb33
  ^bb31:  // pred: ^bb28
    %c1_i32_84 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_84) : (i32) -> ()
    cf.br ^bb30
  ^bb32:  // 2 preds: ^bb30, ^bb33
    %160 = llvm.getelementptr %13[%154] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %152, %160 {alignment = 1 : i64} : i32, !llvm.ptr
    %161 = llvm.load %1 : !llvm.ptr -> i32
    %c176_i32_85 = arith.constant 176 : i32
    %162 = arith.addi %161, %c176_i32_85 : i32
    %c8_i32_86 = arith.constant 8 : i32
    %163 = arith.addi %162, %c8_i32_86 : i32
    llvm.store %163, %5 : i32, !llvm.ptr
    %164 = llvm.load %0 : !llvm.ptr -> i32
    %c40_i32 = arith.constant 40 : i32
    %165 = arith.addi %164, %c40_i32 : i32
    %c0_i64_87 = arith.constant 0 : i64
    %166 = arith.extui %165 : i32 to i64
    %167 = arith.addi %166, %c0_i64_87 : i64
    %c8_i64_88 = arith.constant 8 : i64
    %168 = arith.addi %167, %c8_i64_88 : i64
    %c0_i32_89 = arith.constant 0 : i32
    %169 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_89) : (!llvm.ptr, i32) -> i32
    %170 = arith.extui %169 : i32 to i64
    %c65536_i64_90 = arith.constant 65536 : i64
    %171 = arith.muli %170, %c65536_i64_90 : i64
    %172 = arith.cmpi ult, %168, %171 : i64
    cf.cond_br %172, ^bb34, ^bb35
  ^bb33:  // pred: ^bb30
    %c1_i32_91 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_91) : (i32) -> ()
    cf.br ^bb32
  ^bb34:  // 2 preds: ^bb32, ^bb35
    %173 = llvm.getelementptr %13[%167] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %174 = llvm.load volatile %173 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_92 = arith.constant 0 : i64
    %175 = arith.extui %163 : i32 to i64
    %176 = arith.addi %175, %c0_i64_92 : i64
    %c8_i64_93 = arith.constant 8 : i64
    %177 = arith.addi %176, %c8_i64_93 : i64
    %c0_i32_94 = arith.constant 0 : i32
    %178 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_94) : (!llvm.ptr, i32) -> i32
    %179 = arith.extui %178 : i32 to i64
    %c65536_i64_95 = arith.constant 65536 : i64
    %180 = arith.muli %179, %c65536_i64_95 : i64
    %181 = arith.cmpi ult, %177, %180 : i64
    cf.cond_br %181, ^bb36, ^bb37
  ^bb35:  // pred: ^bb32
    %c1_i32_96 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_96) : (i32) -> ()
    cf.br ^bb34
  ^bb36:  // 2 preds: ^bb34, ^bb37
    %182 = llvm.getelementptr %13[%176] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %174, %182 {alignment = 1 : i64} : i64, !llvm.ptr
    %183 = llvm.load %1 : !llvm.ptr -> i32
    %184 = llvm.load %0 : !llvm.ptr -> i32
    %c32_i64 = arith.constant 32 : i64
    %185 = arith.extui %184 : i32 to i64
    %186 = arith.addi %185, %c32_i64 : i64
    %c8_i64_97 = arith.constant 8 : i64
    %187 = arith.addi %186, %c8_i64_97 : i64
    %c0_i32_98 = arith.constant 0 : i32
    %188 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_98) : (!llvm.ptr, i32) -> i32
    %189 = arith.extui %188 : i32 to i64
    %c65536_i64_99 = arith.constant 65536 : i64
    %190 = arith.muli %189, %c65536_i64_99 : i64
    %191 = arith.cmpi ult, %187, %190 : i64
    cf.cond_br %191, ^bb38, ^bb39
  ^bb37:  // pred: ^bb34
    %c1_i32_100 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_100) : (i32) -> ()
    cf.br ^bb36
  ^bb38:  // 2 preds: ^bb36, ^bb39
    %192 = llvm.getelementptr %13[%186] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %193 = llvm.load volatile %192 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c176_i64 = arith.constant 176 : i64
    %194 = arith.extui %183 : i32 to i64
    %195 = arith.addi %194, %c176_i64 : i64
    %c8_i64_101 = arith.constant 8 : i64
    %196 = arith.addi %195, %c8_i64_101 : i64
    %c0_i32_102 = arith.constant 0 : i32
    %197 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_102) : (!llvm.ptr, i32) -> i32
    %198 = arith.extui %197 : i32 to i64
    %c65536_i64_103 = arith.constant 65536 : i64
    %199 = arith.muli %198, %c65536_i64_103 : i64
    %200 = arith.cmpi ult, %196, %199 : i64
    cf.cond_br %200, ^bb40, ^bb41
  ^bb39:  // pred: ^bb36
    %c1_i32_104 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_104) : (i32) -> ()
    cf.br ^bb38
  ^bb40:  // 2 preds: ^bb38, ^bb41
    %201 = llvm.getelementptr %13[%195] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %193, %201 {alignment = 1 : i64} : i64, !llvm.ptr
    %202 = llvm.load %1 : !llvm.ptr -> i32
    %c208_i32 = arith.constant 208 : i32
    %203 = arith.addi %202, %c208_i32 : i32
    %c24_i32_105 = arith.constant 24 : i32
    %204 = arith.addi %203, %c24_i32_105 : i32
    llvm.store %204, %2 : i32, !llvm.ptr
    %c0_i64_106 = arith.constant 0 : i64
    %c0_i64_107 = arith.constant 0 : i64
    %205 = arith.extui %204 : i32 to i64
    %206 = arith.addi %205, %c0_i64_107 : i64
    %c8_i64_108 = arith.constant 8 : i64
    %207 = arith.addi %206, %c8_i64_108 : i64
    %c0_i32_109 = arith.constant 0 : i32
    %208 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_109) : (!llvm.ptr, i32) -> i32
    %209 = arith.extui %208 : i32 to i64
    %c65536_i64_110 = arith.constant 65536 : i64
    %210 = arith.muli %209, %c65536_i64_110 : i64
    %211 = arith.cmpi ult, %207, %210 : i64
    cf.cond_br %211, ^bb42, ^bb43
  ^bb41:  // pred: ^bb38
    %c1_i32_111 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_111) : (i32) -> ()
    cf.br ^bb40
  ^bb42:  // 2 preds: ^bb40, ^bb43
    %212 = llvm.getelementptr %13[%206] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_106, %212 {alignment = 1 : i64} : i64, !llvm.ptr
    %213 = llvm.load %1 : !llvm.ptr -> i32
    %c208_i32_112 = arith.constant 208 : i32
    %214 = arith.addi %213, %c208_i32_112 : i32
    %c16_i32_113 = arith.constant 16 : i32
    %215 = arith.addi %214, %c16_i32_113 : i32
    llvm.store %215, %6 : i32, !llvm.ptr
    %c0_i64_114 = arith.constant 0 : i64
    %c0_i64_115 = arith.constant 0 : i64
    %216 = arith.extui %215 : i32 to i64
    %217 = arith.addi %216, %c0_i64_115 : i64
    %c8_i64_116 = arith.constant 8 : i64
    %218 = arith.addi %217, %c8_i64_116 : i64
    %c0_i32_117 = arith.constant 0 : i32
    %219 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_117) : (!llvm.ptr, i32) -> i32
    %220 = arith.extui %219 : i32 to i64
    %c65536_i64_118 = arith.constant 65536 : i64
    %221 = arith.muli %220, %c65536_i64_118 : i64
    %222 = arith.cmpi ult, %218, %221 : i64
    cf.cond_br %222, ^bb44, ^bb45
  ^bb43:  // pred: ^bb40
    %c1_i32_119 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_119) : (i32) -> ()
    cf.br ^bb42
  ^bb44:  // 2 preds: ^bb42, ^bb45
    %223 = llvm.getelementptr %13[%217] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_114, %223 {alignment = 1 : i64} : i64, !llvm.ptr
    %224 = llvm.load %1 : !llvm.ptr -> i32
    %c208_i32_120 = arith.constant 208 : i32
    %225 = arith.addi %224, %c208_i32_120 : i32
    %c8_i32_121 = arith.constant 8 : i32
    %226 = arith.addi %225, %c8_i32_121 : i32
    llvm.store %226, %7 : i32, !llvm.ptr
    %c0_i64_122 = arith.constant 0 : i64
    %c0_i64_123 = arith.constant 0 : i64
    %227 = arith.extui %226 : i32 to i64
    %228 = arith.addi %227, %c0_i64_123 : i64
    %c8_i64_124 = arith.constant 8 : i64
    %229 = arith.addi %228, %c8_i64_124 : i64
    %c0_i32_125 = arith.constant 0 : i32
    %230 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_125) : (!llvm.ptr, i32) -> i32
    %231 = arith.extui %230 : i32 to i64
    %c65536_i64_126 = arith.constant 65536 : i64
    %232 = arith.muli %231, %c65536_i64_126 : i64
    %233 = arith.cmpi ult, %229, %232 : i64
    cf.cond_br %233, ^bb46, ^bb47
  ^bb45:  // pred: ^bb42
    %c1_i32_127 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_127) : (i32) -> ()
    cf.br ^bb44
  ^bb46:  // 2 preds: ^bb44, ^bb47
    %234 = llvm.getelementptr %13[%228] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_122, %234 {alignment = 1 : i64} : i64, !llvm.ptr
    %235 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_128 = arith.constant 0 : i64
    %c208_i64 = arith.constant 208 : i64
    %236 = arith.extui %235 : i32 to i64
    %237 = arith.addi %236, %c208_i64 : i64
    %c8_i64_129 = arith.constant 8 : i64
    %238 = arith.addi %237, %c8_i64_129 : i64
    %c0_i32_130 = arith.constant 0 : i32
    %239 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_130) : (!llvm.ptr, i32) -> i32
    %240 = arith.extui %239 : i32 to i64
    %c65536_i64_131 = arith.constant 65536 : i64
    %241 = arith.muli %240, %c65536_i64_131 : i64
    %242 = arith.cmpi ult, %238, %241 : i64
    cf.cond_br %242, ^bb48, ^bb49
  ^bb47:  // pred: ^bb44
    %c1_i32_132 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_132) : (i32) -> ()
    cf.br ^bb46
  ^bb48:  // 2 preds: ^bb46, ^bb49
    %243 = llvm.getelementptr %13[%237] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_128, %243 {alignment = 1 : i64} : i64, !llvm.ptr
    %244 = llvm.load %1 : !llvm.ptr -> i32
    %c220_i32 = arith.constant 220 : i32
    %245 = arith.addi %244, %c220_i32 : i32
    llvm.store %245, %8 : i32, !llvm.ptr
    %c20_i32 = arith.constant 20 : i32
    %246 = llvm.load %1 : !llvm.ptr -> i32
    %c176_i32_133 = arith.constant 176 : i32
    %247 = arith.addi %246, %c176_i32_133 : i32
    %c20_i32_134 = arith.constant 20 : i32
    %c1049972_i32 = arith.constant 1049972 : i32
    call @f114(%arg0, %245, %c20_i32, %247, %c20_i32_134, %c1049972_i32) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %248 = llvm.load %1 : !llvm.ptr -> i32
    %c56_i32 = arith.constant 56 : i32
    %249 = arith.addi %248, %c56_i32 : i32
    %250 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_135 = arith.constant 0 : i64
    %251 = arith.extui %250 : i32 to i64
    %252 = arith.addi %251, %c0_i64_135 : i64
    %c8_i64_136 = arith.constant 8 : i64
    %253 = arith.addi %252, %c8_i64_136 : i64
    %c0_i32_137 = arith.constant 0 : i32
    %254 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_137) : (!llvm.ptr, i32) -> i32
    %255 = arith.extui %254 : i32 to i64
    %c65536_i64_138 = arith.constant 65536 : i64
    %256 = arith.muli %255, %c65536_i64_138 : i64
    %257 = arith.cmpi ult, %253, %256 : i64
    cf.cond_br %257, ^bb50, ^bb51
  ^bb49:  // pred: ^bb46
    %c1_i32_139 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_139) : (i32) -> ()
    cf.br ^bb48
  ^bb50:  // 2 preds: ^bb48, ^bb51
    %258 = llvm.getelementptr %13[%252] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %259 = llvm.load volatile %258 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_140 = arith.constant 0 : i64
    %260 = arith.extui %249 : i32 to i64
    %261 = arith.addi %260, %c0_i64_140 : i64
    %c8_i64_141 = arith.constant 8 : i64
    %262 = arith.addi %261, %c8_i64_141 : i64
    %c0_i32_142 = arith.constant 0 : i32
    %263 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_142) : (!llvm.ptr, i32) -> i32
    %264 = arith.extui %263 : i32 to i64
    %c65536_i64_143 = arith.constant 65536 : i64
    %265 = arith.muli %264, %c65536_i64_143 : i64
    %266 = arith.cmpi ult, %262, %265 : i64
    cf.cond_br %266, ^bb52, ^bb53
  ^bb51:  // pred: ^bb48
    %c1_i32_144 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_144) : (i32) -> ()
    cf.br ^bb50
  ^bb52:  // 2 preds: ^bb50, ^bb53
    %267 = llvm.getelementptr %13[%261] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %259, %267 {alignment = 1 : i64} : i64, !llvm.ptr
    %268 = llvm.load %1 : !llvm.ptr -> i32
    %c48_i32_145 = arith.constant 48 : i32
    %269 = arith.addi %268, %c48_i32_145 : i32
    %270 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_146 = arith.constant 0 : i64
    %271 = arith.extui %270 : i32 to i64
    %272 = arith.addi %271, %c0_i64_146 : i64
    %c8_i64_147 = arith.constant 8 : i64
    %273 = arith.addi %272, %c8_i64_147 : i64
    %c0_i32_148 = arith.constant 0 : i32
    %274 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_148) : (!llvm.ptr, i32) -> i32
    %275 = arith.extui %274 : i32 to i64
    %c65536_i64_149 = arith.constant 65536 : i64
    %276 = arith.muli %275, %c65536_i64_149 : i64
    %277 = arith.cmpi ult, %273, %276 : i64
    cf.cond_br %277, ^bb54, ^bb55
  ^bb53:  // pred: ^bb50
    %c1_i32_150 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_150) : (i32) -> ()
    cf.br ^bb52
  ^bb54:  // 2 preds: ^bb52, ^bb55
    %278 = llvm.getelementptr %13[%272] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %279 = llvm.load volatile %278 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_151 = arith.constant 0 : i64
    %280 = arith.extui %269 : i32 to i64
    %281 = arith.addi %280, %c0_i64_151 : i64
    %c8_i64_152 = arith.constant 8 : i64
    %282 = arith.addi %281, %c8_i64_152 : i64
    %c0_i32_153 = arith.constant 0 : i32
    %283 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_153) : (!llvm.ptr, i32) -> i32
    %284 = arith.extui %283 : i32 to i64
    %c65536_i64_154 = arith.constant 65536 : i64
    %285 = arith.muli %284, %c65536_i64_154 : i64
    %286 = arith.cmpi ult, %282, %285 : i64
    cf.cond_br %286, ^bb56, ^bb57
  ^bb55:  // pred: ^bb52
    %c1_i32_155 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_155) : (i32) -> ()
    cf.br ^bb54
  ^bb56:  // 2 preds: ^bb54, ^bb57
    %287 = llvm.getelementptr %13[%281] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %279, %287 {alignment = 1 : i64} : i64, !llvm.ptr
    %288 = llvm.load %1 : !llvm.ptr -> i32
    %c40_i32_156 = arith.constant 40 : i32
    %289 = arith.addi %288, %c40_i32_156 : i32
    %290 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_157 = arith.constant 0 : i64
    %291 = arith.extui %290 : i32 to i64
    %292 = arith.addi %291, %c0_i64_157 : i64
    %c8_i64_158 = arith.constant 8 : i64
    %293 = arith.addi %292, %c8_i64_158 : i64
    %c0_i32_159 = arith.constant 0 : i32
    %294 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_159) : (!llvm.ptr, i32) -> i32
    %295 = arith.extui %294 : i32 to i64
    %c65536_i64_160 = arith.constant 65536 : i64
    %296 = arith.muli %295, %c65536_i64_160 : i64
    %297 = arith.cmpi ult, %293, %296 : i64
    cf.cond_br %297, ^bb58, ^bb59
  ^bb57:  // pred: ^bb54
    %c1_i32_161 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_161) : (i32) -> ()
    cf.br ^bb56
  ^bb58:  // 2 preds: ^bb56, ^bb59
    %298 = llvm.getelementptr %13[%292] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %299 = llvm.load volatile %298 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_162 = arith.constant 0 : i64
    %300 = arith.extui %289 : i32 to i64
    %301 = arith.addi %300, %c0_i64_162 : i64
    %c8_i64_163 = arith.constant 8 : i64
    %302 = arith.addi %301, %c8_i64_163 : i64
    %c0_i32_164 = arith.constant 0 : i32
    %303 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_164) : (!llvm.ptr, i32) -> i32
    %304 = arith.extui %303 : i32 to i64
    %c65536_i64_165 = arith.constant 65536 : i64
    %305 = arith.muli %304, %c65536_i64_165 : i64
    %306 = arith.cmpi ult, %302, %305 : i64
    cf.cond_br %306, ^bb60, ^bb61
  ^bb59:  // pred: ^bb56
    %c1_i32_166 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_166) : (i32) -> ()
    cf.br ^bb58
  ^bb60:  // 2 preds: ^bb58, ^bb61
    %307 = llvm.getelementptr %13[%301] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %299, %307 {alignment = 1 : i64} : i64, !llvm.ptr
    %308 = llvm.load %1 : !llvm.ptr -> i32
    %309 = llvm.load %1 : !llvm.ptr -> i32
    %c208_i64_167 = arith.constant 208 : i64
    %310 = arith.extui %309 : i32 to i64
    %311 = arith.addi %310, %c208_i64_167 : i64
    %c8_i64_168 = arith.constant 8 : i64
    %312 = arith.addi %311, %c8_i64_168 : i64
    %c0_i32_169 = arith.constant 0 : i32
    %313 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_169) : (!llvm.ptr, i32) -> i32
    %314 = arith.extui %313 : i32 to i64
    %c65536_i64_170 = arith.constant 65536 : i64
    %315 = arith.muli %314, %c65536_i64_170 : i64
    %316 = arith.cmpi ult, %312, %315 : i64
    cf.cond_br %316, ^bb62, ^bb63
  ^bb61:  // pred: ^bb58
    %c1_i32_171 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_171) : (i32) -> ()
    cf.br ^bb60
  ^bb62:  // 2 preds: ^bb60, ^bb63
    %317 = llvm.getelementptr %13[%311] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %318 = llvm.load volatile %317 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c32_i64_172 = arith.constant 32 : i64
    %319 = arith.extui %308 : i32 to i64
    %320 = arith.addi %319, %c32_i64_172 : i64
    %c8_i64_173 = arith.constant 8 : i64
    %321 = arith.addi %320, %c8_i64_173 : i64
    %c0_i32_174 = arith.constant 0 : i32
    %322 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_174) : (!llvm.ptr, i32) -> i32
    %323 = arith.extui %322 : i32 to i64
    %c65536_i64_175 = arith.constant 65536 : i64
    %324 = arith.muli %323, %c65536_i64_175 : i64
    %325 = arith.cmpi ult, %321, %324 : i64
    cf.cond_br %325, ^bb64, ^bb65
  ^bb63:  // pred: ^bb60
    %c1_i32_176 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_176) : (i32) -> ()
    cf.br ^bb62
  ^bb64:  // 2 preds: ^bb62, ^bb65
    %326 = llvm.getelementptr %13[%320] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %318, %326 {alignment = 1 : i64} : i64, !llvm.ptr
    %327 = llvm.load %4 : !llvm.ptr -> i32
    %328 = llvm.load %0 : !llvm.ptr -> i32
    %c68_i32 = arith.constant 68 : i32
    %329 = arith.addi %328, %c68_i32 : i32
    %c0_i64_177 = arith.constant 0 : i64
    %330 = arith.extui %329 : i32 to i64
    %331 = arith.addi %330, %c0_i64_177 : i64
    %c4_i64_178 = arith.constant 4 : i64
    %332 = arith.addi %331, %c4_i64_178 : i64
    %c0_i32_179 = arith.constant 0 : i32
    %333 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_179) : (!llvm.ptr, i32) -> i32
    %334 = arith.extui %333 : i32 to i64
    %c65536_i64_180 = arith.constant 65536 : i64
    %335 = arith.muli %334, %c65536_i64_180 : i64
    %336 = arith.cmpi ult, %332, %335 : i64
    cf.cond_br %336, ^bb66, ^bb67
  ^bb65:  // pred: ^bb62
    %c1_i32_181 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_181) : (i32) -> ()
    cf.br ^bb64
  ^bb66:  // 2 preds: ^bb64, ^bb67
    %337 = llvm.getelementptr %13[%331] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %338 = llvm.load volatile %337 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_182 = arith.constant 0 : i64
    %339 = arith.extui %327 : i32 to i64
    %340 = arith.addi %339, %c0_i64_182 : i64
    %c4_i64_183 = arith.constant 4 : i64
    %341 = arith.addi %340, %c4_i64_183 : i64
    %c0_i32_184 = arith.constant 0 : i32
    %342 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_184) : (!llvm.ptr, i32) -> i32
    %343 = arith.extui %342 : i32 to i64
    %c65536_i64_185 = arith.constant 65536 : i64
    %344 = arith.muli %343, %c65536_i64_185 : i64
    %345 = arith.cmpi ult, %341, %344 : i64
    cf.cond_br %345, ^bb68, ^bb69
  ^bb67:  // pred: ^bb64
    %c1_i32_186 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_186) : (i32) -> ()
    cf.br ^bb66
  ^bb68:  // 2 preds: ^bb66, ^bb69
    %346 = llvm.getelementptr %13[%340] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %338, %346 {alignment = 1 : i64} : i32, !llvm.ptr
    %347 = llvm.load %5 : !llvm.ptr -> i32
    %348 = llvm.load %0 : !llvm.ptr -> i32
    %c60_i32 = arith.constant 60 : i32
    %349 = arith.addi %348, %c60_i32 : i32
    %c0_i64_187 = arith.constant 0 : i64
    %350 = arith.extui %349 : i32 to i64
    %351 = arith.addi %350, %c0_i64_187 : i64
    %c8_i64_188 = arith.constant 8 : i64
    %352 = arith.addi %351, %c8_i64_188 : i64
    %c0_i32_189 = arith.constant 0 : i32
    %353 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_189) : (!llvm.ptr, i32) -> i32
    %354 = arith.extui %353 : i32 to i64
    %c65536_i64_190 = arith.constant 65536 : i64
    %355 = arith.muli %354, %c65536_i64_190 : i64
    %356 = arith.cmpi ult, %352, %355 : i64
    cf.cond_br %356, ^bb70, ^bb71
  ^bb69:  // pred: ^bb66
    %c1_i32_191 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_191) : (i32) -> ()
    cf.br ^bb68
  ^bb70:  // 2 preds: ^bb68, ^bb71
    %357 = llvm.getelementptr %13[%351] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %358 = llvm.load volatile %357 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_192 = arith.constant 0 : i64
    %359 = arith.extui %347 : i32 to i64
    %360 = arith.addi %359, %c0_i64_192 : i64
    %c8_i64_193 = arith.constant 8 : i64
    %361 = arith.addi %360, %c8_i64_193 : i64
    %c0_i32_194 = arith.constant 0 : i32
    %362 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_194) : (!llvm.ptr, i32) -> i32
    %363 = arith.extui %362 : i32 to i64
    %c65536_i64_195 = arith.constant 65536 : i64
    %364 = arith.muli %363, %c65536_i64_195 : i64
    %365 = arith.cmpi ult, %361, %364 : i64
    cf.cond_br %365, ^bb72, ^bb73
  ^bb71:  // pred: ^bb68
    %c1_i32_196 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_196) : (i32) -> ()
    cf.br ^bb70
  ^bb72:  // 2 preds: ^bb70, ^bb73
    %366 = llvm.getelementptr %13[%360] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %358, %366 {alignment = 1 : i64} : i64, !llvm.ptr
    %367 = llvm.load %1 : !llvm.ptr -> i32
    %368 = llvm.load %0 : !llvm.ptr -> i32
    %c52_i64 = arith.constant 52 : i64
    %369 = arith.extui %368 : i32 to i64
    %370 = arith.addi %369, %c52_i64 : i64
    %c8_i64_197 = arith.constant 8 : i64
    %371 = arith.addi %370, %c8_i64_197 : i64
    %c0_i32_198 = arith.constant 0 : i32
    %372 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_198) : (!llvm.ptr, i32) -> i32
    %373 = arith.extui %372 : i32 to i64
    %c65536_i64_199 = arith.constant 65536 : i64
    %374 = arith.muli %373, %c65536_i64_199 : i64
    %375 = arith.cmpi ult, %371, %374 : i64
    cf.cond_br %375, ^bb74, ^bb75
  ^bb73:  // pred: ^bb70
    %c1_i32_200 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_200) : (i32) -> ()
    cf.br ^bb72
  ^bb74:  // 2 preds: ^bb72, ^bb75
    %376 = llvm.getelementptr %13[%370] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %377 = llvm.load volatile %376 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c176_i64_201 = arith.constant 176 : i64
    %378 = arith.extui %367 : i32 to i64
    %379 = arith.addi %378, %c176_i64_201 : i64
    %c8_i64_202 = arith.constant 8 : i64
    %380 = arith.addi %379, %c8_i64_202 : i64
    %c0_i32_203 = arith.constant 0 : i32
    %381 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_203) : (!llvm.ptr, i32) -> i32
    %382 = arith.extui %381 : i32 to i64
    %c65536_i64_204 = arith.constant 65536 : i64
    %383 = arith.muli %382, %c65536_i64_204 : i64
    %384 = arith.cmpi ult, %380, %383 : i64
    cf.cond_br %384, ^bb76, ^bb77
  ^bb75:  // pred: ^bb72
    %c1_i32_205 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_205) : (i32) -> ()
    cf.br ^bb74
  ^bb76:  // 2 preds: ^bb74, ^bb77
    %385 = llvm.getelementptr %13[%379] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %377, %385 {alignment = 1 : i64} : i64, !llvm.ptr
    %386 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_206 = arith.constant 0 : i64
    %c0_i64_207 = arith.constant 0 : i64
    %387 = arith.extui %386 : i32 to i64
    %388 = arith.addi %387, %c0_i64_207 : i64
    %c8_i64_208 = arith.constant 8 : i64
    %389 = arith.addi %388, %c8_i64_208 : i64
    %c0_i32_209 = arith.constant 0 : i32
    %390 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_209) : (!llvm.ptr, i32) -> i32
    %391 = arith.extui %390 : i32 to i64
    %c65536_i64_210 = arith.constant 65536 : i64
    %392 = arith.muli %391, %c65536_i64_210 : i64
    %393 = arith.cmpi ult, %389, %392 : i64
    cf.cond_br %393, ^bb78, ^bb79
  ^bb77:  // pred: ^bb74
    %c1_i32_211 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_211) : (i32) -> ()
    cf.br ^bb76
  ^bb78:  // 2 preds: ^bb76, ^bb79
    %394 = llvm.getelementptr %13[%388] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_206, %394 {alignment = 1 : i64} : i64, !llvm.ptr
    %395 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_212 = arith.constant 0 : i64
    %c0_i64_213 = arith.constant 0 : i64
    %396 = arith.extui %395 : i32 to i64
    %397 = arith.addi %396, %c0_i64_213 : i64
    %c8_i64_214 = arith.constant 8 : i64
    %398 = arith.addi %397, %c8_i64_214 : i64
    %c0_i32_215 = arith.constant 0 : i32
    %399 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_215) : (!llvm.ptr, i32) -> i32
    %400 = arith.extui %399 : i32 to i64
    %c65536_i64_216 = arith.constant 65536 : i64
    %401 = arith.muli %400, %c65536_i64_216 : i64
    %402 = arith.cmpi ult, %398, %401 : i64
    cf.cond_br %402, ^bb80, ^bb81
  ^bb79:  // pred: ^bb76
    %c1_i32_217 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_217) : (i32) -> ()
    cf.br ^bb78
  ^bb80:  // 2 preds: ^bb78, ^bb81
    %403 = llvm.getelementptr %13[%397] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_212, %403 {alignment = 1 : i64} : i64, !llvm.ptr
    %404 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_218 = arith.constant 0 : i64
    %c0_i64_219 = arith.constant 0 : i64
    %405 = arith.extui %404 : i32 to i64
    %406 = arith.addi %405, %c0_i64_219 : i64
    %c8_i64_220 = arith.constant 8 : i64
    %407 = arith.addi %406, %c8_i64_220 : i64
    %c0_i32_221 = arith.constant 0 : i32
    %408 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_221) : (!llvm.ptr, i32) -> i32
    %409 = arith.extui %408 : i32 to i64
    %c65536_i64_222 = arith.constant 65536 : i64
    %410 = arith.muli %409, %c65536_i64_222 : i64
    %411 = arith.cmpi ult, %407, %410 : i64
    cf.cond_br %411, ^bb82, ^bb83
  ^bb81:  // pred: ^bb78
    %c1_i32_223 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_223) : (i32) -> ()
    cf.br ^bb80
  ^bb82:  // 2 preds: ^bb80, ^bb83
    %412 = llvm.getelementptr %13[%406] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_218, %412 {alignment = 1 : i64} : i64, !llvm.ptr
    %413 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_224 = arith.constant 0 : i64
    %c208_i64_225 = arith.constant 208 : i64
    %414 = arith.extui %413 : i32 to i64
    %415 = arith.addi %414, %c208_i64_225 : i64
    %c8_i64_226 = arith.constant 8 : i64
    %416 = arith.addi %415, %c8_i64_226 : i64
    %c0_i32_227 = arith.constant 0 : i32
    %417 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_227) : (!llvm.ptr, i32) -> i32
    %418 = arith.extui %417 : i32 to i64
    %c65536_i64_228 = arith.constant 65536 : i64
    %419 = arith.muli %418, %c65536_i64_228 : i64
    %420 = arith.cmpi ult, %416, %419 : i64
    cf.cond_br %420, ^bb84, ^bb85
  ^bb83:  // pred: ^bb80
    %c1_i32_229 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_229) : (i32) -> ()
    cf.br ^bb82
  ^bb84:  // 2 preds: ^bb82, ^bb85
    %421 = llvm.getelementptr %13[%415] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_224, %421 {alignment = 1 : i64} : i64, !llvm.ptr
    %422 = llvm.load %8 : !llvm.ptr -> i32
    %c20_i32_230 = arith.constant 20 : i32
    %423 = llvm.load %1 : !llvm.ptr -> i32
    %c176_i32_231 = arith.constant 176 : i32
    %424 = arith.addi %423, %c176_i32_231 : i32
    %c20_i32_232 = arith.constant 20 : i32
    %c1049972_i32_233 = arith.constant 1049972 : i32
    call @f114(%arg0, %422, %c20_i32_230, %424, %c20_i32_232, %c1049972_i32_233) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %425 = llvm.load %1 : !llvm.ptr -> i32
    %c88_i32 = arith.constant 88 : i32
    %426 = arith.addi %425, %c88_i32 : i32
    %427 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_234 = arith.constant 0 : i64
    %428 = arith.extui %427 : i32 to i64
    %429 = arith.addi %428, %c0_i64_234 : i64
    %c8_i64_235 = arith.constant 8 : i64
    %430 = arith.addi %429, %c8_i64_235 : i64
    %c0_i32_236 = arith.constant 0 : i32
    %431 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_236) : (!llvm.ptr, i32) -> i32
    %432 = arith.extui %431 : i32 to i64
    %c65536_i64_237 = arith.constant 65536 : i64
    %433 = arith.muli %432, %c65536_i64_237 : i64
    %434 = arith.cmpi ult, %430, %433 : i64
    cf.cond_br %434, ^bb86, ^bb87
  ^bb85:  // pred: ^bb82
    %c1_i32_238 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_238) : (i32) -> ()
    cf.br ^bb84
  ^bb86:  // 2 preds: ^bb84, ^bb87
    %435 = llvm.getelementptr %13[%429] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %436 = llvm.load volatile %435 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_239 = arith.constant 0 : i64
    %437 = arith.extui %426 : i32 to i64
    %438 = arith.addi %437, %c0_i64_239 : i64
    %c8_i64_240 = arith.constant 8 : i64
    %439 = arith.addi %438, %c8_i64_240 : i64
    %c0_i32_241 = arith.constant 0 : i32
    %440 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_241) : (!llvm.ptr, i32) -> i32
    %441 = arith.extui %440 : i32 to i64
    %c65536_i64_242 = arith.constant 65536 : i64
    %442 = arith.muli %441, %c65536_i64_242 : i64
    %443 = arith.cmpi ult, %439, %442 : i64
    cf.cond_br %443, ^bb88, ^bb89
  ^bb87:  // pred: ^bb84
    %c1_i32_243 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_243) : (i32) -> ()
    cf.br ^bb86
  ^bb88:  // 2 preds: ^bb86, ^bb89
    %444 = llvm.getelementptr %13[%438] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %436, %444 {alignment = 1 : i64} : i64, !llvm.ptr
    %445 = llvm.load %1 : !llvm.ptr -> i32
    %c80_i32 = arith.constant 80 : i32
    %446 = arith.addi %445, %c80_i32 : i32
    %447 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_244 = arith.constant 0 : i64
    %448 = arith.extui %447 : i32 to i64
    %449 = arith.addi %448, %c0_i64_244 : i64
    %c8_i64_245 = arith.constant 8 : i64
    %450 = arith.addi %449, %c8_i64_245 : i64
    %c0_i32_246 = arith.constant 0 : i32
    %451 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_246) : (!llvm.ptr, i32) -> i32
    %452 = arith.extui %451 : i32 to i64
    %c65536_i64_247 = arith.constant 65536 : i64
    %453 = arith.muli %452, %c65536_i64_247 : i64
    %454 = arith.cmpi ult, %450, %453 : i64
    cf.cond_br %454, ^bb90, ^bb91
  ^bb89:  // pred: ^bb86
    %c1_i32_248 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_248) : (i32) -> ()
    cf.br ^bb88
  ^bb90:  // 2 preds: ^bb88, ^bb91
    %455 = llvm.getelementptr %13[%449] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %456 = llvm.load volatile %455 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_249 = arith.constant 0 : i64
    %457 = arith.extui %446 : i32 to i64
    %458 = arith.addi %457, %c0_i64_249 : i64
    %c8_i64_250 = arith.constant 8 : i64
    %459 = arith.addi %458, %c8_i64_250 : i64
    %c0_i32_251 = arith.constant 0 : i32
    %460 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_251) : (!llvm.ptr, i32) -> i32
    %461 = arith.extui %460 : i32 to i64
    %c65536_i64_252 = arith.constant 65536 : i64
    %462 = arith.muli %461, %c65536_i64_252 : i64
    %463 = arith.cmpi ult, %459, %462 : i64
    cf.cond_br %463, ^bb92, ^bb93
  ^bb91:  // pred: ^bb88
    %c1_i32_253 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_253) : (i32) -> ()
    cf.br ^bb90
  ^bb92:  // 2 preds: ^bb90, ^bb93
    %464 = llvm.getelementptr %13[%458] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %456, %464 {alignment = 1 : i64} : i64, !llvm.ptr
    %465 = llvm.load %1 : !llvm.ptr -> i32
    %c72_i32 = arith.constant 72 : i32
    %466 = arith.addi %465, %c72_i32 : i32
    %467 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_254 = arith.constant 0 : i64
    %468 = arith.extui %467 : i32 to i64
    %469 = arith.addi %468, %c0_i64_254 : i64
    %c8_i64_255 = arith.constant 8 : i64
    %470 = arith.addi %469, %c8_i64_255 : i64
    %c0_i32_256 = arith.constant 0 : i32
    %471 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_256) : (!llvm.ptr, i32) -> i32
    %472 = arith.extui %471 : i32 to i64
    %c65536_i64_257 = arith.constant 65536 : i64
    %473 = arith.muli %472, %c65536_i64_257 : i64
    %474 = arith.cmpi ult, %470, %473 : i64
    cf.cond_br %474, ^bb94, ^bb95
  ^bb93:  // pred: ^bb90
    %c1_i32_258 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_258) : (i32) -> ()
    cf.br ^bb92
  ^bb94:  // 2 preds: ^bb92, ^bb95
    %475 = llvm.getelementptr %13[%469] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %476 = llvm.load volatile %475 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_259 = arith.constant 0 : i64
    %477 = arith.extui %466 : i32 to i64
    %478 = arith.addi %477, %c0_i64_259 : i64
    %c8_i64_260 = arith.constant 8 : i64
    %479 = arith.addi %478, %c8_i64_260 : i64
    %c0_i32_261 = arith.constant 0 : i32
    %480 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_261) : (!llvm.ptr, i32) -> i32
    %481 = arith.extui %480 : i32 to i64
    %c65536_i64_262 = arith.constant 65536 : i64
    %482 = arith.muli %481, %c65536_i64_262 : i64
    %483 = arith.cmpi ult, %479, %482 : i64
    cf.cond_br %483, ^bb96, ^bb97
  ^bb95:  // pred: ^bb92
    %c1_i32_263 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_263) : (i32) -> ()
    cf.br ^bb94
  ^bb96:  // 2 preds: ^bb94, ^bb97
    %484 = llvm.getelementptr %13[%478] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %476, %484 {alignment = 1 : i64} : i64, !llvm.ptr
    %485 = llvm.load %1 : !llvm.ptr -> i32
    %486 = llvm.load %1 : !llvm.ptr -> i32
    %c208_i64_264 = arith.constant 208 : i64
    %487 = arith.extui %486 : i32 to i64
    %488 = arith.addi %487, %c208_i64_264 : i64
    %c8_i64_265 = arith.constant 8 : i64
    %489 = arith.addi %488, %c8_i64_265 : i64
    %c0_i32_266 = arith.constant 0 : i32
    %490 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_266) : (!llvm.ptr, i32) -> i32
    %491 = arith.extui %490 : i32 to i64
    %c65536_i64_267 = arith.constant 65536 : i64
    %492 = arith.muli %491, %c65536_i64_267 : i64
    %493 = arith.cmpi ult, %489, %492 : i64
    cf.cond_br %493, ^bb98, ^bb99
  ^bb97:  // pred: ^bb94
    %c1_i32_268 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_268) : (i32) -> ()
    cf.br ^bb96
  ^bb98:  // 2 preds: ^bb96, ^bb99
    %494 = llvm.getelementptr %13[%488] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %495 = llvm.load volatile %494 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c64_i64 = arith.constant 64 : i64
    %496 = arith.extui %485 : i32 to i64
    %497 = arith.addi %496, %c64_i64 : i64
    %c8_i64_269 = arith.constant 8 : i64
    %498 = arith.addi %497, %c8_i64_269 : i64
    %c0_i32_270 = arith.constant 0 : i32
    %499 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_270) : (!llvm.ptr, i32) -> i32
    %500 = arith.extui %499 : i32 to i64
    %c65536_i64_271 = arith.constant 65536 : i64
    %501 = arith.muli %500, %c65536_i64_271 : i64
    %502 = arith.cmpi ult, %498, %501 : i64
    cf.cond_br %502, ^bb100, ^bb101
  ^bb99:  // pred: ^bb96
    %c1_i32_272 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_272) : (i32) -> ()
    cf.br ^bb98
  ^bb100:  // 2 preds: ^bb98, ^bb101
    %503 = llvm.getelementptr %13[%497] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %495, %503 {alignment = 1 : i64} : i64, !llvm.ptr
    %504 = llvm.load %1 : !llvm.ptr -> i32
    %c208_i32_273 = arith.constant 208 : i32
    %505 = arith.addi %504, %c208_i32_273 : i32
    %c96_i32 = arith.constant 96 : i32
    %c0_i32_274 = arith.constant 0 : i32
    %c1_i32_275 = arith.constant 1 : i32
    %c1_i32_276 = arith.constant 1 : i32
    call @f111(%arg0, %505, %c96_i32, %c0_i32_274, %c1_i32_275, %c1_i32_276) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %506 = llvm.load %1 : !llvm.ptr -> i32
    %c212_i64 = arith.constant 212 : i64
    %507 = arith.extui %506 : i32 to i64
    %508 = arith.addi %507, %c212_i64 : i64
    %c4_i64_277 = arith.constant 4 : i64
    %509 = arith.addi %508, %c4_i64_277 : i64
    %c0_i32_278 = arith.constant 0 : i32
    %510 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_278) : (!llvm.ptr, i32) -> i32
    %511 = arith.extui %510 : i32 to i64
    %c65536_i64_279 = arith.constant 65536 : i64
    %512 = arith.muli %511, %c65536_i64_279 : i64
    %513 = arith.cmpi ult, %509, %512 : i64
    cf.cond_br %513, ^bb102, ^bb103
  ^bb101:  // pred: ^bb98
    %c1_i32_280 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_280) : (i32) -> ()
    cf.br ^bb100
  ^bb102:  // 2 preds: ^bb100, ^bb103
    %514 = llvm.getelementptr %13[%508] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %515 = llvm.load volatile %514 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %515, %2 : i32, !llvm.ptr
    %516 = llvm.load %1 : !llvm.ptr -> i32
    %c208_i64_281 = arith.constant 208 : i64
    %517 = arith.extui %516 : i32 to i64
    %518 = arith.addi %517, %c208_i64_281 : i64
    %c4_i64_282 = arith.constant 4 : i64
    %519 = arith.addi %518, %c4_i64_282 : i64
    %c0_i32_283 = arith.constant 0 : i32
    %520 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_283) : (!llvm.ptr, i32) -> i32
    %521 = arith.extui %520 : i32 to i64
    %c65536_i64_284 = arith.constant 65536 : i64
    %522 = arith.muli %521, %c65536_i64_284 : i64
    %523 = arith.cmpi ult, %519, %522 : i64
    cf.cond_br %523, ^bb105, ^bb106
  ^bb103:  // pred: ^bb100
    %c1_i32_285 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_285) : (i32) -> ()
    cf.br ^bb102
  ^bb104:  // pred: ^bb105
    %524 = llvm.load %2 : !llvm.ptr -> i32
    %525 = llvm.load %1 : !llvm.ptr -> i32
    %c216_i64 = arith.constant 216 : i64
    %526 = arith.extui %525 : i32 to i64
    %527 = arith.addi %526, %c216_i64 : i64
    %c4_i64_286 = arith.constant 4 : i64
    %528 = arith.addi %527, %c4_i64_286 : i64
    %c0_i32_287 = arith.constant 0 : i32
    %529 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_287) : (!llvm.ptr, i32) -> i32
    %530 = arith.extui %529 : i32 to i64
    %c65536_i64_288 = arith.constant 65536 : i64
    %531 = arith.muli %530, %c65536_i64_288 : i64
    %532 = arith.cmpi ult, %528, %531 : i64
    cf.cond_br %532, ^bb204, ^bb205
  ^bb105:  // 2 preds: ^bb102, ^bb106
    %533 = llvm.getelementptr %13[%518] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %534 = llvm.load volatile %533 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_289 = arith.constant 1 : i32
    %535 = arith.cmpi eq, %534, %c1_i32_289 : i32
    %536 = arith.extui %535 : i1 to i32
    %c0_i32_290 = arith.constant 0 : i32
    %537 = arith.cmpi ne, %536, %c0_i32_290 : i32
    cf.cond_br %537, ^bb104, ^bb107
  ^bb106:  // pred: ^bb102
    %c1_i32_291 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_291) : (i32) -> ()
    cf.br ^bb105
  ^bb107:  // pred: ^bb105
    %538 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_292 = arith.constant 0 : i32
    %c140_i64 = arith.constant 140 : i64
    %539 = arith.extui %538 : i32 to i64
    %540 = arith.addi %539, %c140_i64 : i64
    %c4_i64_293 = arith.constant 4 : i64
    %541 = arith.addi %540, %c4_i64_293 : i64
    %c0_i32_294 = arith.constant 0 : i32
    %542 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_294) : (!llvm.ptr, i32) -> i32
    %543 = arith.extui %542 : i32 to i64
    %c65536_i64_295 = arith.constant 65536 : i64
    %544 = arith.muli %543, %c65536_i64_295 : i64
    %545 = arith.cmpi ult, %541, %544 : i64
    cf.cond_br %545, ^bb108, ^bb109
  ^bb108:  // 2 preds: ^bb107, ^bb109
    %546 = llvm.getelementptr %13[%540] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_292, %546 {alignment = 1 : i64} : i32, !llvm.ptr
    %547 = llvm.load %1 : !llvm.ptr -> i32
    %548 = llvm.load %1 : !llvm.ptr -> i32
    %c216_i64_296 = arith.constant 216 : i64
    %549 = arith.extui %548 : i32 to i64
    %550 = arith.addi %549, %c216_i64_296 : i64
    %c4_i64_297 = arith.constant 4 : i64
    %551 = arith.addi %550, %c4_i64_297 : i64
    %c0_i32_298 = arith.constant 0 : i32
    %552 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_298) : (!llvm.ptr, i32) -> i32
    %553 = arith.extui %552 : i32 to i64
    %c65536_i64_299 = arith.constant 65536 : i64
    %554 = arith.muli %553, %c65536_i64_299 : i64
    %555 = arith.cmpi ult, %551, %554 : i64
    cf.cond_br %555, ^bb110, ^bb111
  ^bb109:  // pred: ^bb107
    %c1_i32_300 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_300) : (i32) -> ()
    cf.br ^bb108
  ^bb110:  // 2 preds: ^bb108, ^bb111
    %556 = llvm.getelementptr %13[%550] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %557 = llvm.load volatile %556 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c136_i64 = arith.constant 136 : i64
    %558 = arith.extui %547 : i32 to i64
    %559 = arith.addi %558, %c136_i64 : i64
    %c4_i64_301 = arith.constant 4 : i64
    %560 = arith.addi %559, %c4_i64_301 : i64
    %c0_i32_302 = arith.constant 0 : i32
    %561 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_302) : (!llvm.ptr, i32) -> i32
    %562 = arith.extui %561 : i32 to i64
    %c65536_i64_303 = arith.constant 65536 : i64
    %563 = arith.muli %562, %c65536_i64_303 : i64
    %564 = arith.cmpi ult, %560, %563 : i64
    cf.cond_br %564, ^bb112, ^bb113
  ^bb111:  // pred: ^bb108
    %c1_i32_304 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_304) : (i32) -> ()
    cf.br ^bb110
  ^bb112:  // 2 preds: ^bb110, ^bb113
    %565 = llvm.getelementptr %13[%559] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %557, %565 {alignment = 1 : i64} : i32, !llvm.ptr
    %566 = llvm.load %1 : !llvm.ptr -> i32
    %567 = llvm.load %2 : !llvm.ptr -> i32
    %c132_i64 = arith.constant 132 : i64
    %568 = arith.extui %566 : i32 to i64
    %569 = arith.addi %568, %c132_i64 : i64
    %c4_i64_305 = arith.constant 4 : i64
    %570 = arith.addi %569, %c4_i64_305 : i64
    %c0_i32_306 = arith.constant 0 : i32
    %571 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_306) : (!llvm.ptr, i32) -> i32
    %572 = arith.extui %571 : i32 to i64
    %c65536_i64_307 = arith.constant 65536 : i64
    %573 = arith.muli %572, %c65536_i64_307 : i64
    %574 = arith.cmpi ult, %570, %573 : i64
    cf.cond_br %574, ^bb114, ^bb115
  ^bb113:  // pred: ^bb110
    %c1_i32_308 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_308) : (i32) -> ()
    cf.br ^bb112
  ^bb114:  // 2 preds: ^bb112, ^bb115
    %575 = llvm.getelementptr %13[%569] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %567, %575 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb117
  ^bb115:  // pred: ^bb112
    %c1_i32_309 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_309) : (i32) -> ()
    cf.br ^bb114
  ^bb116:  // pred: ^bb118
    %576 = llvm.load %1 : !llvm.ptr -> i32
    %c132_i32 = arith.constant 132 : i32
    %577 = arith.addi %576, %c132_i32 : i32
    %c32_i32_310 = arith.constant 32 : i32
    call @f106(%arg0, %577, %c32_i32_310) : (!llvm.ptr, i32, i32) -> ()
    %578 = llvm.load %1 : !llvm.ptr -> i32
    %c144_i32 = arith.constant 144 : i32
    %579 = arith.addi %578, %c144_i32 : i32
    %c24_i32_311 = arith.constant 24 : i32
    %580 = arith.addi %579, %c24_i32_311 : i32
    %c0_i64_312 = arith.constant 0 : i64
    %c0_i64_313 = arith.constant 0 : i64
    %581 = arith.extui %580 : i32 to i64
    %582 = arith.addi %581, %c0_i64_313 : i64
    %c8_i64_314 = arith.constant 8 : i64
    %583 = arith.addi %582, %c8_i64_314 : i64
    %c0_i32_315 = arith.constant 0 : i32
    %584 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_315) : (!llvm.ptr, i32) -> i32
    %585 = arith.extui %584 : i32 to i64
    %c65536_i64_316 = arith.constant 65536 : i64
    %586 = arith.muli %585, %c65536_i64_316 : i64
    %587 = arith.cmpi ult, %583, %586 : i64
    cf.cond_br %587, ^bb119, ^bb120
  ^bb117:  // 2 preds: ^bb114, ^bb117
    %588 = llvm.load %1 : !llvm.ptr -> i32
    %c132_i32_317 = arith.constant 132 : i32
    %589 = arith.addi %588, %c132_i32_317 : i32
    %590 = llvm.load %1 : !llvm.ptr -> i32
    %591 = llvm.load %3 : !llvm.ptr -> i32
    %592 = arith.addi %590, %591 : i32
    %c32_i32_318 = arith.constant 32 : i32
    call @f105(%arg0, %589, %592, %c32_i32_318) : (!llvm.ptr, i32, i32, i32) -> ()
    %593 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_319 = arith.constant 32 : i32
    %594 = arith.addi %593, %c32_i32_319 : i32
    llvm.store %594, %3 : i32, !llvm.ptr
    %c96_i32_320 = arith.constant 96 : i32
    %595 = arith.cmpi eq, %594, %c96_i32_320 : i32
    %596 = arith.extui %595 : i1 to i32
    %c0_i32_321 = arith.constant 0 : i32
    %597 = arith.cmpi eq, %596, %c0_i32_321 : i32
    %598 = arith.extui %597 : i1 to i32
    %c0_i32_322 = arith.constant 0 : i32
    %599 = arith.cmpi ne, %598, %c0_i32_322 : i32
    cf.cond_br %599, ^bb117, ^bb118
  ^bb118:  // pred: ^bb117
    cf.br ^bb116
  ^bb119:  // 2 preds: ^bb116, ^bb120
    %600 = llvm.getelementptr %13[%582] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_312, %600 {alignment = 1 : i64} : i64, !llvm.ptr
    %601 = llvm.load %1 : !llvm.ptr -> i32
    %c144_i32_323 = arith.constant 144 : i32
    %602 = arith.addi %601, %c144_i32_323 : i32
    %c16_i32_324 = arith.constant 16 : i32
    %603 = arith.addi %602, %c16_i32_324 : i32
    %c0_i64_325 = arith.constant 0 : i64
    %c0_i64_326 = arith.constant 0 : i64
    %604 = arith.extui %603 : i32 to i64
    %605 = arith.addi %604, %c0_i64_326 : i64
    %c8_i64_327 = arith.constant 8 : i64
    %606 = arith.addi %605, %c8_i64_327 : i64
    %c0_i32_328 = arith.constant 0 : i32
    %607 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_328) : (!llvm.ptr, i32) -> i32
    %608 = arith.extui %607 : i32 to i64
    %c65536_i64_329 = arith.constant 65536 : i64
    %609 = arith.muli %608, %c65536_i64_329 : i64
    %610 = arith.cmpi ult, %606, %609 : i64
    cf.cond_br %610, ^bb121, ^bb122
  ^bb120:  // pred: ^bb116
    %c1_i32_330 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_330) : (i32) -> ()
    cf.br ^bb119
  ^bb121:  // 2 preds: ^bb119, ^bb122
    %611 = llvm.getelementptr %13[%605] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_325, %611 {alignment = 1 : i64} : i64, !llvm.ptr
    %612 = llvm.load %1 : !llvm.ptr -> i32
    %c144_i32_331 = arith.constant 144 : i32
    %613 = arith.addi %612, %c144_i32_331 : i32
    %c8_i32_332 = arith.constant 8 : i32
    %614 = arith.addi %613, %c8_i32_332 : i32
    %c0_i64_333 = arith.constant 0 : i64
    %c0_i64_334 = arith.constant 0 : i64
    %615 = arith.extui %614 : i32 to i64
    %616 = arith.addi %615, %c0_i64_334 : i64
    %c8_i64_335 = arith.constant 8 : i64
    %617 = arith.addi %616, %c8_i64_335 : i64
    %c0_i32_336 = arith.constant 0 : i32
    %618 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_336) : (!llvm.ptr, i32) -> i32
    %619 = arith.extui %618 : i32 to i64
    %c65536_i64_337 = arith.constant 65536 : i64
    %620 = arith.muli %619, %c65536_i64_337 : i64
    %621 = arith.cmpi ult, %617, %620 : i64
    cf.cond_br %621, ^bb123, ^bb124
  ^bb122:  // pred: ^bb119
    %c1_i32_338 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_338) : (i32) -> ()
    cf.br ^bb121
  ^bb123:  // 2 preds: ^bb121, ^bb124
    %622 = llvm.getelementptr %13[%616] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_333, %622 {alignment = 1 : i64} : i64, !llvm.ptr
    %623 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_339 = arith.constant 0 : i64
    %c144_i64 = arith.constant 144 : i64
    %624 = arith.extui %623 : i32 to i64
    %625 = arith.addi %624, %c144_i64 : i64
    %c8_i64_340 = arith.constant 8 : i64
    %626 = arith.addi %625, %c8_i64_340 : i64
    %c0_i32_341 = arith.constant 0 : i32
    %627 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_341) : (!llvm.ptr, i32) -> i32
    %628 = arith.extui %627 : i32 to i64
    %c65536_i64_342 = arith.constant 65536 : i64
    %629 = arith.muli %628, %c65536_i64_342 : i64
    %630 = arith.cmpi ult, %626, %629 : i64
    cf.cond_br %630, ^bb125, ^bb126
  ^bb124:  // pred: ^bb121
    %c1_i32_343 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_343) : (i32) -> ()
    cf.br ^bb123
  ^bb125:  // 2 preds: ^bb123, ^bb126
    %631 = llvm.getelementptr %13[%625] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_339, %631 {alignment = 1 : i64} : i64, !llvm.ptr
    %632 = llvm.load %1 : !llvm.ptr -> i32
    %c208_i32_344 = arith.constant 208 : i32
    %633 = arith.addi %632, %c208_i32_344 : i32
    %c24_i32_345 = arith.constant 24 : i32
    %634 = arith.addi %633, %c24_i32_345 : i32
    %635 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32_346 = arith.constant 24 : i32
    %636 = arith.addi %635, %c24_i32_346 : i32
    %c0_i64_347 = arith.constant 0 : i64
    %637 = arith.extui %636 : i32 to i64
    %638 = arith.addi %637, %c0_i64_347 : i64
    %c8_i64_348 = arith.constant 8 : i64
    %639 = arith.addi %638, %c8_i64_348 : i64
    %c0_i32_349 = arith.constant 0 : i32
    %640 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_349) : (!llvm.ptr, i32) -> i32
    %641 = arith.extui %640 : i32 to i64
    %c65536_i64_350 = arith.constant 65536 : i64
    %642 = arith.muli %641, %c65536_i64_350 : i64
    %643 = arith.cmpi ult, %639, %642 : i64
    cf.cond_br %643, ^bb127, ^bb128
  ^bb126:  // pred: ^bb123
    %c1_i32_351 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_351) : (i32) -> ()
    cf.br ^bb125
  ^bb127:  // 2 preds: ^bb125, ^bb128
    %644 = llvm.getelementptr %13[%638] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %645 = llvm.load volatile %644 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_352 = arith.constant 0 : i64
    %646 = arith.extui %634 : i32 to i64
    %647 = arith.addi %646, %c0_i64_352 : i64
    %c8_i64_353 = arith.constant 8 : i64
    %648 = arith.addi %647, %c8_i64_353 : i64
    %c0_i32_354 = arith.constant 0 : i32
    %649 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_354) : (!llvm.ptr, i32) -> i32
    %650 = arith.extui %649 : i32 to i64
    %c65536_i64_355 = arith.constant 65536 : i64
    %651 = arith.muli %650, %c65536_i64_355 : i64
    %652 = arith.cmpi ult, %648, %651 : i64
    cf.cond_br %652, ^bb129, ^bb130
  ^bb128:  // pred: ^bb125
    %c1_i32_356 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_356) : (i32) -> ()
    cf.br ^bb127
  ^bb129:  // 2 preds: ^bb127, ^bb130
    %653 = llvm.getelementptr %13[%647] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %645, %653 {alignment = 1 : i64} : i64, !llvm.ptr
    %654 = llvm.load %1 : !llvm.ptr -> i32
    %c208_i32_357 = arith.constant 208 : i32
    %655 = arith.addi %654, %c208_i32_357 : i32
    %c16_i32_358 = arith.constant 16 : i32
    %656 = arith.addi %655, %c16_i32_358 : i32
    %657 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_359 = arith.constant 16 : i32
    %658 = arith.addi %657, %c16_i32_359 : i32
    %c0_i64_360 = arith.constant 0 : i64
    %659 = arith.extui %658 : i32 to i64
    %660 = arith.addi %659, %c0_i64_360 : i64
    %c8_i64_361 = arith.constant 8 : i64
    %661 = arith.addi %660, %c8_i64_361 : i64
    %c0_i32_362 = arith.constant 0 : i32
    %662 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_362) : (!llvm.ptr, i32) -> i32
    %663 = arith.extui %662 : i32 to i64
    %c65536_i64_363 = arith.constant 65536 : i64
    %664 = arith.muli %663, %c65536_i64_363 : i64
    %665 = arith.cmpi ult, %661, %664 : i64
    cf.cond_br %665, ^bb131, ^bb132
  ^bb130:  // pred: ^bb127
    %c1_i32_364 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_364) : (i32) -> ()
    cf.br ^bb129
  ^bb131:  // 2 preds: ^bb129, ^bb132
    %666 = llvm.getelementptr %13[%660] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %667 = llvm.load volatile %666 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_365 = arith.constant 0 : i64
    %668 = arith.extui %656 : i32 to i64
    %669 = arith.addi %668, %c0_i64_365 : i64
    %c8_i64_366 = arith.constant 8 : i64
    %670 = arith.addi %669, %c8_i64_366 : i64
    %c0_i32_367 = arith.constant 0 : i32
    %671 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_367) : (!llvm.ptr, i32) -> i32
    %672 = arith.extui %671 : i32 to i64
    %c65536_i64_368 = arith.constant 65536 : i64
    %673 = arith.muli %672, %c65536_i64_368 : i64
    %674 = arith.cmpi ult, %670, %673 : i64
    cf.cond_br %674, ^bb133, ^bb134
  ^bb132:  // pred: ^bb129
    %c1_i32_369 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_369) : (i32) -> ()
    cf.br ^bb131
  ^bb133:  // 2 preds: ^bb131, ^bb134
    %675 = llvm.getelementptr %13[%669] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %667, %675 {alignment = 1 : i64} : i64, !llvm.ptr
    %676 = llvm.load %1 : !llvm.ptr -> i32
    %c208_i32_370 = arith.constant 208 : i32
    %677 = arith.addi %676, %c208_i32_370 : i32
    %c8_i32_371 = arith.constant 8 : i32
    %678 = arith.addi %677, %c8_i32_371 : i32
    %679 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_372 = arith.constant 8 : i32
    %680 = arith.addi %679, %c8_i32_372 : i32
    %c0_i64_373 = arith.constant 0 : i64
    %681 = arith.extui %680 : i32 to i64
    %682 = arith.addi %681, %c0_i64_373 : i64
    %c8_i64_374 = arith.constant 8 : i64
    %683 = arith.addi %682, %c8_i64_374 : i64
    %c0_i32_375 = arith.constant 0 : i32
    %684 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_375) : (!llvm.ptr, i32) -> i32
    %685 = arith.extui %684 : i32 to i64
    %c65536_i64_376 = arith.constant 65536 : i64
    %686 = arith.muli %685, %c65536_i64_376 : i64
    %687 = arith.cmpi ult, %683, %686 : i64
    cf.cond_br %687, ^bb135, ^bb136
  ^bb134:  // pred: ^bb131
    %c1_i32_377 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_377) : (i32) -> ()
    cf.br ^bb133
  ^bb135:  // 2 preds: ^bb133, ^bb136
    %688 = llvm.getelementptr %13[%682] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %689 = llvm.load volatile %688 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_378 = arith.constant 0 : i64
    %690 = arith.extui %678 : i32 to i64
    %691 = arith.addi %690, %c0_i64_378 : i64
    %c8_i64_379 = arith.constant 8 : i64
    %692 = arith.addi %691, %c8_i64_379 : i64
    %c0_i32_380 = arith.constant 0 : i32
    %693 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_380) : (!llvm.ptr, i32) -> i32
    %694 = arith.extui %693 : i32 to i64
    %c65536_i64_381 = arith.constant 65536 : i64
    %695 = arith.muli %694, %c65536_i64_381 : i64
    %696 = arith.cmpi ult, %692, %695 : i64
    cf.cond_br %696, ^bb137, ^bb138
  ^bb136:  // pred: ^bb133
    %c1_i32_382 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_382) : (i32) -> ()
    cf.br ^bb135
  ^bb137:  // 2 preds: ^bb135, ^bb138
    %697 = llvm.getelementptr %13[%691] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %689, %697 {alignment = 1 : i64} : i64, !llvm.ptr
    %698 = llvm.load %1 : !llvm.ptr -> i32
    %699 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_383 = arith.constant 0 : i64
    %700 = arith.extui %699 : i32 to i64
    %701 = arith.addi %700, %c0_i64_383 : i64
    %c8_i64_384 = arith.constant 8 : i64
    %702 = arith.addi %701, %c8_i64_384 : i64
    %c0_i32_385 = arith.constant 0 : i32
    %703 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_385) : (!llvm.ptr, i32) -> i32
    %704 = arith.extui %703 : i32 to i64
    %c65536_i64_386 = arith.constant 65536 : i64
    %705 = arith.muli %704, %c65536_i64_386 : i64
    %706 = arith.cmpi ult, %702, %705 : i64
    cf.cond_br %706, ^bb139, ^bb140
  ^bb138:  // pred: ^bb135
    %c1_i32_387 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_387) : (i32) -> ()
    cf.br ^bb137
  ^bb139:  // 2 preds: ^bb137, ^bb140
    %707 = llvm.getelementptr %13[%701] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %708 = llvm.load volatile %707 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c208_i64_388 = arith.constant 208 : i64
    %709 = arith.extui %698 : i32 to i64
    %710 = arith.addi %709, %c208_i64_388 : i64
    %c8_i64_389 = arith.constant 8 : i64
    %711 = arith.addi %710, %c8_i64_389 : i64
    %c0_i32_390 = arith.constant 0 : i32
    %712 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_390) : (!llvm.ptr, i32) -> i32
    %713 = arith.extui %712 : i32 to i64
    %c65536_i64_391 = arith.constant 65536 : i64
    %714 = arith.muli %713, %c65536_i64_391 : i64
    %715 = arith.cmpi ult, %711, %714 : i64
    cf.cond_br %715, ^bb141, ^bb142
  ^bb140:  // pred: ^bb137
    %c1_i32_392 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_392) : (i32) -> ()
    cf.br ^bb139
  ^bb141:  // 2 preds: ^bb139, ^bb142
    %716 = llvm.getelementptr %13[%710] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %708, %716 {alignment = 1 : i64} : i64, !llvm.ptr
    %717 = llvm.load %1 : !llvm.ptr -> i32
    %c239_i32 = arith.constant 239 : i32
    %718 = arith.addi %717, %c239_i32 : i32
    llvm.store %718, %3 : i32, !llvm.ptr
    %c0_i32_393 = arith.constant 0 : i32
    llvm.store %c0_i32_393, %2 : i32, !llvm.ptr
    cf.br ^bb144
  ^bb142:  // pred: ^bb139
    %c1_i32_394 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_394) : (i32) -> ()
    cf.br ^bb141
  ^bb143:  // pred: ^bb153
    %719 = llvm.load %1 : !llvm.ptr -> i32
    %c176_i32_395 = arith.constant 176 : i32
    %720 = arith.addi %719, %c176_i32_395 : i32
    %c24_i32_396 = arith.constant 24 : i32
    %721 = arith.addi %720, %c24_i32_396 : i32
    %722 = llvm.load %1 : !llvm.ptr -> i32
    %c208_i32_397 = arith.constant 208 : i32
    %723 = arith.addi %722, %c208_i32_397 : i32
    %c24_i32_398 = arith.constant 24 : i32
    %724 = arith.addi %723, %c24_i32_398 : i32
    llvm.store %724, %3 : i32, !llvm.ptr
    %c0_i64_399 = arith.constant 0 : i64
    %725 = arith.extui %724 : i32 to i64
    %726 = arith.addi %725, %c0_i64_399 : i64
    %c8_i64_400 = arith.constant 8 : i64
    %727 = arith.addi %726, %c8_i64_400 : i64
    %c0_i32_401 = arith.constant 0 : i32
    %728 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_401) : (!llvm.ptr, i32) -> i32
    %729 = arith.extui %728 : i32 to i64
    %c65536_i64_402 = arith.constant 65536 : i64
    %730 = arith.muli %729, %c65536_i64_402 : i64
    %731 = arith.cmpi ult, %727, %730 : i64
    cf.cond_br %731, ^bb154, ^bb155
  ^bb144:  // 2 preds: ^bb141, ^bb151
    %732 = llvm.load %1 : !llvm.ptr -> i32
    %c208_i32_403 = arith.constant 208 : i32
    %733 = arith.addi %732, %c208_i32_403 : i32
    %734 = llvm.load %2 : !llvm.ptr -> i32
    %735 = arith.addi %733, %734 : i32
    llvm.store %735, %0 : i32, !llvm.ptr
    %c0_i64_404 = arith.constant 0 : i64
    %736 = arith.extui %735 : i32 to i64
    %737 = arith.addi %736, %c0_i64_404 : i64
    %c1_i64 = arith.constant 1 : i64
    %738 = arith.addi %737, %c1_i64 : i64
    %c0_i32_405 = arith.constant 0 : i32
    %739 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_405) : (!llvm.ptr, i32) -> i32
    %740 = arith.extui %739 : i32 to i64
    %c65536_i64_406 = arith.constant 65536 : i64
    %741 = arith.muli %740, %c65536_i64_406 : i64
    %742 = arith.cmpi ult, %738, %741 : i64
    cf.cond_br %742, ^bb145, ^bb146
  ^bb145:  // 2 preds: ^bb144, ^bb146
    %743 = llvm.getelementptr %13[%737] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %744 = llvm.load volatile %743 {alignment = 1 : i64} : !llvm.ptr -> i8
    %745 = arith.extui %744 : i8 to i32
    llvm.store %745, %6 : i32, !llvm.ptr
    %746 = llvm.load %0 : !llvm.ptr -> i32
    %747 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_407 = arith.constant 0 : i64
    %748 = arith.extui %747 : i32 to i64
    %749 = arith.addi %748, %c0_i64_407 : i64
    %c1_i64_408 = arith.constant 1 : i64
    %750 = arith.addi %749, %c1_i64_408 : i64
    %c0_i32_409 = arith.constant 0 : i32
    %751 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_409) : (!llvm.ptr, i32) -> i32
    %752 = arith.extui %751 : i32 to i64
    %c65536_i64_410 = arith.constant 65536 : i64
    %753 = arith.muli %752, %c65536_i64_410 : i64
    %754 = arith.cmpi ult, %750, %753 : i64
    cf.cond_br %754, ^bb147, ^bb148
  ^bb146:  // pred: ^bb144
    %c1_i32_411 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_411) : (i32) -> ()
    cf.br ^bb145
  ^bb147:  // 2 preds: ^bb145, ^bb148
    %755 = llvm.getelementptr %13[%749] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %756 = llvm.load volatile %755 {alignment = 1 : i64} : !llvm.ptr -> i8
    %757 = arith.extui %756 : i8 to i32
    %c0_i64_412 = arith.constant 0 : i64
    %758 = arith.extui %746 : i32 to i64
    %759 = arith.addi %758, %c0_i64_412 : i64
    %c1_i64_413 = arith.constant 1 : i64
    %760 = arith.addi %759, %c1_i64_413 : i64
    %c0_i32_414 = arith.constant 0 : i32
    %761 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_414) : (!llvm.ptr, i32) -> i32
    %762 = arith.extui %761 : i32 to i64
    %c65536_i64_415 = arith.constant 65536 : i64
    %763 = arith.muli %762, %c65536_i64_415 : i64
    %764 = arith.cmpi ult, %760, %763 : i64
    cf.cond_br %764, ^bb149, ^bb150
  ^bb148:  // pred: ^bb145
    %c1_i32_416 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_416) : (i32) -> ()
    cf.br ^bb147
  ^bb149:  // 2 preds: ^bb147, ^bb150
    %765 = llvm.getelementptr %13[%759] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %766 = arith.trunci %757 : i32 to i8
    llvm.store volatile %766, %765 {alignment = 1 : i64} : i8, !llvm.ptr
    %767 = llvm.load %3 : !llvm.ptr -> i32
    %768 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_417 = arith.constant 0 : i64
    %769 = arith.extui %767 : i32 to i64
    %770 = arith.addi %769, %c0_i64_417 : i64
    %c1_i64_418 = arith.constant 1 : i64
    %771 = arith.addi %770, %c1_i64_418 : i64
    %c0_i32_419 = arith.constant 0 : i32
    %772 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_419) : (!llvm.ptr, i32) -> i32
    %773 = arith.extui %772 : i32 to i64
    %c65536_i64_420 = arith.constant 65536 : i64
    %774 = arith.muli %773, %c65536_i64_420 : i64
    %775 = arith.cmpi ult, %771, %774 : i64
    cf.cond_br %775, ^bb151, ^bb152
  ^bb150:  // pred: ^bb147
    %c1_i32_421 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_421) : (i32) -> ()
    cf.br ^bb149
  ^bb151:  // 2 preds: ^bb149, ^bb152
    %776 = llvm.getelementptr %13[%770] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %777 = arith.trunci %768 : i32 to i8
    llvm.store volatile %777, %776 {alignment = 1 : i64} : i8, !llvm.ptr
    %778 = llvm.load %3 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %779 = arith.addi %778, %c-1_i32 : i32
    llvm.store %779, %3 : i32, !llvm.ptr
    %780 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_422 = arith.constant 1 : i32
    %781 = arith.addi %780, %c1_i32_422 : i32
    llvm.store %781, %2 : i32, !llvm.ptr
    %c16_i32_423 = arith.constant 16 : i32
    %782 = arith.cmpi eq, %781, %c16_i32_423 : i32
    %783 = arith.extui %782 : i1 to i32
    %c0_i32_424 = arith.constant 0 : i32
    %784 = arith.cmpi eq, %783, %c0_i32_424 : i32
    %785 = arith.extui %784 : i1 to i32
    %c0_i32_425 = arith.constant 0 : i32
    %786 = arith.cmpi ne, %785, %c0_i32_425 : i32
    cf.cond_br %786, ^bb144, ^bb153
  ^bb152:  // pred: ^bb149
    %c1_i32_426 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_426) : (i32) -> ()
    cf.br ^bb151
  ^bb153:  // pred: ^bb151
    cf.br ^bb143
  ^bb154:  // 2 preds: ^bb143, ^bb155
    %787 = llvm.getelementptr %13[%726] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %788 = llvm.load volatile %787 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_427 = arith.constant 0 : i64
    %789 = arith.extui %721 : i32 to i64
    %790 = arith.addi %789, %c0_i64_427 : i64
    %c8_i64_428 = arith.constant 8 : i64
    %791 = arith.addi %790, %c8_i64_428 : i64
    %c0_i32_429 = arith.constant 0 : i32
    %792 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_429) : (!llvm.ptr, i32) -> i32
    %793 = arith.extui %792 : i32 to i64
    %c65536_i64_430 = arith.constant 65536 : i64
    %794 = arith.muli %793, %c65536_i64_430 : i64
    %795 = arith.cmpi ult, %791, %794 : i64
    cf.cond_br %795, ^bb156, ^bb157
  ^bb155:  // pred: ^bb143
    %c1_i32_431 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_431) : (i32) -> ()
    cf.br ^bb154
  ^bb156:  // 2 preds: ^bb154, ^bb157
    %796 = llvm.getelementptr %13[%790] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %788, %796 {alignment = 1 : i64} : i64, !llvm.ptr
    %797 = llvm.load %1 : !llvm.ptr -> i32
    %c176_i32_432 = arith.constant 176 : i32
    %798 = arith.addi %797, %c176_i32_432 : i32
    %c16_i32_433 = arith.constant 16 : i32
    %799 = arith.addi %798, %c16_i32_433 : i32
    %800 = llvm.load %1 : !llvm.ptr -> i32
    %c208_i32_434 = arith.constant 208 : i32
    %801 = arith.addi %800, %c208_i32_434 : i32
    %c16_i32_435 = arith.constant 16 : i32
    %802 = arith.addi %801, %c16_i32_435 : i32
    llvm.store %802, %2 : i32, !llvm.ptr
    %c0_i64_436 = arith.constant 0 : i64
    %803 = arith.extui %802 : i32 to i64
    %804 = arith.addi %803, %c0_i64_436 : i64
    %c8_i64_437 = arith.constant 8 : i64
    %805 = arith.addi %804, %c8_i64_437 : i64
    %c0_i32_438 = arith.constant 0 : i32
    %806 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_438) : (!llvm.ptr, i32) -> i32
    %807 = arith.extui %806 : i32 to i64
    %c65536_i64_439 = arith.constant 65536 : i64
    %808 = arith.muli %807, %c65536_i64_439 : i64
    %809 = arith.cmpi ult, %805, %808 : i64
    cf.cond_br %809, ^bb158, ^bb159
  ^bb157:  // pred: ^bb154
    %c1_i32_440 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_440) : (i32) -> ()
    cf.br ^bb156
  ^bb158:  // 2 preds: ^bb156, ^bb159
    %810 = llvm.getelementptr %13[%804] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %811 = llvm.load volatile %810 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_441 = arith.constant 0 : i64
    %812 = arith.extui %799 : i32 to i64
    %813 = arith.addi %812, %c0_i64_441 : i64
    %c8_i64_442 = arith.constant 8 : i64
    %814 = arith.addi %813, %c8_i64_442 : i64
    %c0_i32_443 = arith.constant 0 : i32
    %815 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_443) : (!llvm.ptr, i32) -> i32
    %816 = arith.extui %815 : i32 to i64
    %c65536_i64_444 = arith.constant 65536 : i64
    %817 = arith.muli %816, %c65536_i64_444 : i64
    %818 = arith.cmpi ult, %814, %817 : i64
    cf.cond_br %818, ^bb160, ^bb161
  ^bb159:  // pred: ^bb156
    %c1_i32_445 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_445) : (i32) -> ()
    cf.br ^bb158
  ^bb160:  // 2 preds: ^bb158, ^bb161
    %819 = llvm.getelementptr %13[%813] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %811, %819 {alignment = 1 : i64} : i64, !llvm.ptr
    %820 = llvm.load %1 : !llvm.ptr -> i32
    %c176_i32_446 = arith.constant 176 : i32
    %821 = arith.addi %820, %c176_i32_446 : i32
    %c8_i32_447 = arith.constant 8 : i32
    %822 = arith.addi %821, %c8_i32_447 : i32
    %823 = llvm.load %1 : !llvm.ptr -> i32
    %c208_i32_448 = arith.constant 208 : i32
    %824 = arith.addi %823, %c208_i32_448 : i32
    %c8_i32_449 = arith.constant 8 : i32
    %825 = arith.addi %824, %c8_i32_449 : i32
    llvm.store %825, %0 : i32, !llvm.ptr
    %c0_i64_450 = arith.constant 0 : i64
    %826 = arith.extui %825 : i32 to i64
    %827 = arith.addi %826, %c0_i64_450 : i64
    %c8_i64_451 = arith.constant 8 : i64
    %828 = arith.addi %827, %c8_i64_451 : i64
    %c0_i32_452 = arith.constant 0 : i32
    %829 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_452) : (!llvm.ptr, i32) -> i32
    %830 = arith.extui %829 : i32 to i64
    %c65536_i64_453 = arith.constant 65536 : i64
    %831 = arith.muli %830, %c65536_i64_453 : i64
    %832 = arith.cmpi ult, %828, %831 : i64
    cf.cond_br %832, ^bb162, ^bb163
  ^bb161:  // pred: ^bb158
    %c1_i32_454 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_454) : (i32) -> ()
    cf.br ^bb160
  ^bb162:  // 2 preds: ^bb160, ^bb163
    %833 = llvm.getelementptr %13[%827] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %834 = llvm.load volatile %833 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_455 = arith.constant 0 : i64
    %835 = arith.extui %822 : i32 to i64
    %836 = arith.addi %835, %c0_i64_455 : i64
    %c8_i64_456 = arith.constant 8 : i64
    %837 = arith.addi %836, %c8_i64_456 : i64
    %c0_i32_457 = arith.constant 0 : i32
    %838 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_457) : (!llvm.ptr, i32) -> i32
    %839 = arith.extui %838 : i32 to i64
    %c65536_i64_458 = arith.constant 65536 : i64
    %840 = arith.muli %839, %c65536_i64_458 : i64
    %841 = arith.cmpi ult, %837, %840 : i64
    cf.cond_br %841, ^bb164, ^bb165
  ^bb163:  // pred: ^bb160
    %c1_i32_459 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_459) : (i32) -> ()
    cf.br ^bb162
  ^bb164:  // 2 preds: ^bb162, ^bb165
    %842 = llvm.getelementptr %13[%836] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %834, %842 {alignment = 1 : i64} : i64, !llvm.ptr
    %843 = llvm.load %1 : !llvm.ptr -> i32
    %844 = llvm.load %1 : !llvm.ptr -> i32
    %c208_i64_460 = arith.constant 208 : i64
    %845 = arith.extui %844 : i32 to i64
    %846 = arith.addi %845, %c208_i64_460 : i64
    %c8_i64_461 = arith.constant 8 : i64
    %847 = arith.addi %846, %c8_i64_461 : i64
    %c0_i32_462 = arith.constant 0 : i32
    %848 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_462) : (!llvm.ptr, i32) -> i32
    %849 = arith.extui %848 : i32 to i64
    %c65536_i64_463 = arith.constant 65536 : i64
    %850 = arith.muli %849, %c65536_i64_463 : i64
    %851 = arith.cmpi ult, %847, %850 : i64
    cf.cond_br %851, ^bb166, ^bb167
  ^bb165:  // pred: ^bb162
    %c1_i32_464 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_464) : (i32) -> ()
    cf.br ^bb164
  ^bb166:  // 2 preds: ^bb164, ^bb167
    %852 = llvm.getelementptr %13[%846] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %853 = llvm.load volatile %852 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c176_i64_465 = arith.constant 176 : i64
    %854 = arith.extui %843 : i32 to i64
    %855 = arith.addi %854, %c176_i64_465 : i64
    %c8_i64_466 = arith.constant 8 : i64
    %856 = arith.addi %855, %c8_i64_466 : i64
    %c0_i32_467 = arith.constant 0 : i32
    %857 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_467) : (!llvm.ptr, i32) -> i32
    %858 = arith.extui %857 : i32 to i64
    %c65536_i64_468 = arith.constant 65536 : i64
    %859 = arith.muli %858, %c65536_i64_468 : i64
    %860 = arith.cmpi ult, %856, %859 : i64
    cf.cond_br %860, ^bb168, ^bb169
  ^bb167:  // pred: ^bb164
    %c1_i32_469 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_469) : (i32) -> ()
    cf.br ^bb166
  ^bb168:  // 2 preds: ^bb166, ^bb169
    %861 = llvm.getelementptr %13[%855] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %853, %861 {alignment = 1 : i64} : i64, !llvm.ptr
    %862 = llvm.load %1 : !llvm.ptr -> i32
    %c144_i32_470 = arith.constant 144 : i32
    %863 = arith.addi %862, %c144_i32_470 : i32
    %c32_i32_471 = arith.constant 32 : i32
    %864 = llvm.load %1 : !llvm.ptr -> i32
    %c176_i32_472 = arith.constant 176 : i32
    %865 = arith.addi %864, %c176_i32_472 : i32
    %c32_i32_473 = arith.constant 32 : i32
    %c1048804_i32 = arith.constant 1048804 : i32
    call @f114(%arg0, %863, %c32_i32_471, %865, %c32_i32_473, %c1048804_i32) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %866 = llvm.load %0 : !llvm.ptr -> i32
    %867 = llvm.load %1 : !llvm.ptr -> i32
    %c144_i32_474 = arith.constant 144 : i32
    %868 = arith.addi %867, %c144_i32_474 : i32
    %c8_i32_475 = arith.constant 8 : i32
    %869 = arith.addi %868, %c8_i32_475 : i32
    %c0_i64_476 = arith.constant 0 : i64
    %870 = arith.extui %869 : i32 to i64
    %871 = arith.addi %870, %c0_i64_476 : i64
    %c8_i64_477 = arith.constant 8 : i64
    %872 = arith.addi %871, %c8_i64_477 : i64
    %c0_i32_478 = arith.constant 0 : i32
    %873 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_478) : (!llvm.ptr, i32) -> i32
    %874 = arith.extui %873 : i32 to i64
    %c65536_i64_479 = arith.constant 65536 : i64
    %875 = arith.muli %874, %c65536_i64_479 : i64
    %876 = arith.cmpi ult, %872, %875 : i64
    cf.cond_br %876, ^bb170, ^bb171
  ^bb169:  // pred: ^bb166
    %c1_i32_480 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_480) : (i32) -> ()
    cf.br ^bb168
  ^bb170:  // 2 preds: ^bb168, ^bb171
    %877 = llvm.getelementptr %13[%871] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %878 = llvm.load volatile %877 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_481 = arith.constant 0 : i64
    %879 = arith.extui %866 : i32 to i64
    %880 = arith.addi %879, %c0_i64_481 : i64
    %c8_i64_482 = arith.constant 8 : i64
    %881 = arith.addi %880, %c8_i64_482 : i64
    %c0_i32_483 = arith.constant 0 : i32
    %882 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_483) : (!llvm.ptr, i32) -> i32
    %883 = arith.extui %882 : i32 to i64
    %c65536_i64_484 = arith.constant 65536 : i64
    %884 = arith.muli %883, %c65536_i64_484 : i64
    %885 = arith.cmpi ult, %881, %884 : i64
    cf.cond_br %885, ^bb172, ^bb173
  ^bb171:  // pred: ^bb168
    %c1_i32_485 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_485) : (i32) -> ()
    cf.br ^bb170
  ^bb172:  // 2 preds: ^bb170, ^bb173
    %886 = llvm.getelementptr %13[%880] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %878, %886 {alignment = 1 : i64} : i64, !llvm.ptr
    %887 = llvm.load %2 : !llvm.ptr -> i32
    %888 = llvm.load %1 : !llvm.ptr -> i32
    %c144_i32_486 = arith.constant 144 : i32
    %889 = arith.addi %888, %c144_i32_486 : i32
    %c16_i32_487 = arith.constant 16 : i32
    %890 = arith.addi %889, %c16_i32_487 : i32
    %c0_i64_488 = arith.constant 0 : i64
    %891 = arith.extui %890 : i32 to i64
    %892 = arith.addi %891, %c0_i64_488 : i64
    %c8_i64_489 = arith.constant 8 : i64
    %893 = arith.addi %892, %c8_i64_489 : i64
    %c0_i32_490 = arith.constant 0 : i32
    %894 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_490) : (!llvm.ptr, i32) -> i32
    %895 = arith.extui %894 : i32 to i64
    %c65536_i64_491 = arith.constant 65536 : i64
    %896 = arith.muli %895, %c65536_i64_491 : i64
    %897 = arith.cmpi ult, %893, %896 : i64
    cf.cond_br %897, ^bb174, ^bb175
  ^bb173:  // pred: ^bb170
    %c1_i32_492 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_492) : (i32) -> ()
    cf.br ^bb172
  ^bb174:  // 2 preds: ^bb172, ^bb175
    %898 = llvm.getelementptr %13[%892] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %899 = llvm.load volatile %898 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_493 = arith.constant 0 : i64
    %900 = arith.extui %887 : i32 to i64
    %901 = arith.addi %900, %c0_i64_493 : i64
    %c8_i64_494 = arith.constant 8 : i64
    %902 = arith.addi %901, %c8_i64_494 : i64
    %c0_i32_495 = arith.constant 0 : i32
    %903 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_495) : (!llvm.ptr, i32) -> i32
    %904 = arith.extui %903 : i32 to i64
    %c65536_i64_496 = arith.constant 65536 : i64
    %905 = arith.muli %904, %c65536_i64_496 : i64
    %906 = arith.cmpi ult, %902, %905 : i64
    cf.cond_br %906, ^bb176, ^bb177
  ^bb175:  // pred: ^bb172
    %c1_i32_497 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_497) : (i32) -> ()
    cf.br ^bb174
  ^bb176:  // 2 preds: ^bb174, ^bb177
    %907 = llvm.getelementptr %13[%901] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %899, %907 {alignment = 1 : i64} : i64, !llvm.ptr
    %908 = llvm.load %3 : !llvm.ptr -> i32
    %909 = llvm.load %1 : !llvm.ptr -> i32
    %c144_i32_498 = arith.constant 144 : i32
    %910 = arith.addi %909, %c144_i32_498 : i32
    %c24_i32_499 = arith.constant 24 : i32
    %911 = arith.addi %910, %c24_i32_499 : i32
    %c0_i64_500 = arith.constant 0 : i64
    %912 = arith.extui %911 : i32 to i64
    %913 = arith.addi %912, %c0_i64_500 : i64
    %c8_i64_501 = arith.constant 8 : i64
    %914 = arith.addi %913, %c8_i64_501 : i64
    %c0_i32_502 = arith.constant 0 : i32
    %915 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_502) : (!llvm.ptr, i32) -> i32
    %916 = arith.extui %915 : i32 to i64
    %c65536_i64_503 = arith.constant 65536 : i64
    %917 = arith.muli %916, %c65536_i64_503 : i64
    %918 = arith.cmpi ult, %914, %917 : i64
    cf.cond_br %918, ^bb178, ^bb179
  ^bb177:  // pred: ^bb174
    %c1_i32_504 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_504) : (i32) -> ()
    cf.br ^bb176
  ^bb178:  // 2 preds: ^bb176, ^bb179
    %919 = llvm.getelementptr %13[%913] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %920 = llvm.load volatile %919 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_505 = arith.constant 0 : i64
    %921 = arith.extui %908 : i32 to i64
    %922 = arith.addi %921, %c0_i64_505 : i64
    %c8_i64_506 = arith.constant 8 : i64
    %923 = arith.addi %922, %c8_i64_506 : i64
    %c0_i32_507 = arith.constant 0 : i32
    %924 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_507) : (!llvm.ptr, i32) -> i32
    %925 = arith.extui %924 : i32 to i64
    %c65536_i64_508 = arith.constant 65536 : i64
    %926 = arith.muli %925, %c65536_i64_508 : i64
    %927 = arith.cmpi ult, %923, %926 : i64
    cf.cond_br %927, ^bb180, ^bb181
  ^bb179:  // pred: ^bb176
    %c1_i32_509 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_509) : (i32) -> ()
    cf.br ^bb178
  ^bb180:  // 2 preds: ^bb178, ^bb181
    %928 = llvm.getelementptr %13[%922] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %920, %928 {alignment = 1 : i64} : i64, !llvm.ptr
    %929 = llvm.load %1 : !llvm.ptr -> i32
    %930 = llvm.load %1 : !llvm.ptr -> i32
    %c144_i64_510 = arith.constant 144 : i64
    %931 = arith.extui %930 : i32 to i64
    %932 = arith.addi %931, %c144_i64_510 : i64
    %c8_i64_511 = arith.constant 8 : i64
    %933 = arith.addi %932, %c8_i64_511 : i64
    %c0_i32_512 = arith.constant 0 : i32
    %934 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_512) : (!llvm.ptr, i32) -> i32
    %935 = arith.extui %934 : i32 to i64
    %c65536_i64_513 = arith.constant 65536 : i64
    %936 = arith.muli %935, %c65536_i64_513 : i64
    %937 = arith.cmpi ult, %933, %936 : i64
    cf.cond_br %937, ^bb182, ^bb183
  ^bb181:  // pred: ^bb178
    %c1_i32_514 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_514) : (i32) -> ()
    cf.br ^bb180
  ^bb182:  // 2 preds: ^bb180, ^bb183
    %938 = llvm.getelementptr %13[%932] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %939 = llvm.load volatile %938 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c208_i64_515 = arith.constant 208 : i64
    %940 = arith.extui %929 : i32 to i64
    %941 = arith.addi %940, %c208_i64_515 : i64
    %c8_i64_516 = arith.constant 8 : i64
    %942 = arith.addi %941, %c8_i64_516 : i64
    %c0_i32_517 = arith.constant 0 : i32
    %943 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_517) : (!llvm.ptr, i32) -> i32
    %944 = arith.extui %943 : i32 to i64
    %c65536_i64_518 = arith.constant 65536 : i64
    %945 = arith.muli %944, %c65536_i64_518 : i64
    %946 = arith.cmpi ult, %942, %945 : i64
    cf.cond_br %946, ^bb184, ^bb185
  ^bb183:  // pred: ^bb180
    %c1_i32_519 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_519) : (i32) -> ()
    cf.br ^bb182
  ^bb184:  // 2 preds: ^bb182, ^bb185
    %947 = llvm.getelementptr %13[%941] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %939, %947 {alignment = 1 : i64} : i64, !llvm.ptr
    %948 = llvm.load %1 : !llvm.ptr -> i32
    %c144_i32_520 = arith.constant 144 : i32
    %949 = arith.addi %948, %c144_i32_520 : i32
    %950 = llvm.load %1 : !llvm.ptr -> i32
    %c208_i32_521 = arith.constant 208 : i32
    %951 = arith.addi %950, %c208_i32_521 : i32
    call @f15(%arg0, %949, %951) : (!llvm.ptr, i32, i32) -> ()
    %952 = llvm.load %1 : !llvm.ptr -> i32
    %953 = llvm.load %1 : !llvm.ptr -> i32
    %c144_i64_522 = arith.constant 144 : i64
    %954 = arith.extui %953 : i32 to i64
    %955 = arith.addi %954, %c144_i64_522 : i64
    %c4_i64_523 = arith.constant 4 : i64
    %956 = arith.addi %955, %c4_i64_523 : i64
    %c0_i32_524 = arith.constant 0 : i32
    %957 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_524) : (!llvm.ptr, i32) -> i32
    %958 = arith.extui %957 : i32 to i64
    %c65536_i64_525 = arith.constant 65536 : i64
    %959 = arith.muli %958, %c65536_i64_525 : i64
    %960 = arith.cmpi ult, %956, %959 : i64
    cf.cond_br %960, ^bb186, ^bb187
  ^bb185:  // pred: ^bb182
    %c1_i32_526 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_526) : (i32) -> ()
    cf.br ^bb184
  ^bb186:  // 2 preds: ^bb184, ^bb187
    %961 = llvm.getelementptr %13[%955] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %962 = llvm.load volatile %961 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c184_i64 = arith.constant 184 : i64
    %963 = arith.extui %952 : i32 to i64
    %964 = arith.addi %963, %c184_i64 : i64
    %c4_i64_527 = arith.constant 4 : i64
    %965 = arith.addi %964, %c4_i64_527 : i64
    %c0_i32_528 = arith.constant 0 : i32
    %966 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_528) : (!llvm.ptr, i32) -> i32
    %967 = arith.extui %966 : i32 to i64
    %c65536_i64_529 = arith.constant 65536 : i64
    %968 = arith.muli %967, %c65536_i64_529 : i64
    %969 = arith.cmpi ult, %965, %968 : i64
    cf.cond_br %969, ^bb188, ^bb189
  ^bb187:  // pred: ^bb184
    %c1_i32_530 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_530) : (i32) -> ()
    cf.br ^bb186
  ^bb188:  // 2 preds: ^bb186, ^bb189
    %970 = llvm.getelementptr %13[%964] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %962, %970 {alignment = 1 : i64} : i32, !llvm.ptr
    %971 = llvm.load %1 : !llvm.ptr -> i32
    %972 = llvm.load %1 : !llvm.ptr -> i32
    %c148_i64 = arith.constant 148 : i64
    %973 = arith.extui %972 : i32 to i64
    %974 = arith.addi %973, %c148_i64 : i64
    %c4_i64_531 = arith.constant 4 : i64
    %975 = arith.addi %974, %c4_i64_531 : i64
    %c0_i32_532 = arith.constant 0 : i32
    %976 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_532) : (!llvm.ptr, i32) -> i32
    %977 = arith.extui %976 : i32 to i64
    %c65536_i64_533 = arith.constant 65536 : i64
    %978 = arith.muli %977, %c65536_i64_533 : i64
    %979 = arith.cmpi ult, %975, %978 : i64
    cf.cond_br %979, ^bb190, ^bb191
  ^bb189:  // pred: ^bb186
    %c1_i32_534 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_534) : (i32) -> ()
    cf.br ^bb188
  ^bb190:  // 2 preds: ^bb188, ^bb191
    %980 = llvm.getelementptr %13[%974] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %981 = llvm.load volatile %980 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %981, %3 : i32, !llvm.ptr
    %c176_i64_535 = arith.constant 176 : i64
    %982 = arith.extui %971 : i32 to i64
    %983 = arith.addi %982, %c176_i64_535 : i64
    %c4_i64_536 = arith.constant 4 : i64
    %984 = arith.addi %983, %c4_i64_536 : i64
    %c0_i32_537 = arith.constant 0 : i32
    %985 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_537) : (!llvm.ptr, i32) -> i32
    %986 = arith.extui %985 : i32 to i64
    %c65536_i64_538 = arith.constant 65536 : i64
    %987 = arith.muli %986, %c65536_i64_538 : i64
    %988 = arith.cmpi ult, %984, %987 : i64
    cf.cond_br %988, ^bb192, ^bb193
  ^bb191:  // pred: ^bb188
    %c1_i32_539 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_539) : (i32) -> ()
    cf.br ^bb190
  ^bb192:  // 2 preds: ^bb190, ^bb193
    %989 = llvm.getelementptr %13[%983] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %981, %989 {alignment = 1 : i64} : i32, !llvm.ptr
    %990 = llvm.load %1 : !llvm.ptr -> i32
    %991 = llvm.load %3 : !llvm.ptr -> i32
    %c180_i64 = arith.constant 180 : i64
    %992 = arith.extui %990 : i32 to i64
    %993 = arith.addi %992, %c180_i64 : i64
    %c4_i64_540 = arith.constant 4 : i64
    %994 = arith.addi %993, %c4_i64_540 : i64
    %c0_i32_541 = arith.constant 0 : i32
    %995 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_541) : (!llvm.ptr, i32) -> i32
    %996 = arith.extui %995 : i32 to i64
    %c65536_i64_542 = arith.constant 65536 : i64
    %997 = arith.muli %996, %c65536_i64_542 : i64
    %998 = arith.cmpi ult, %994, %997 : i64
    cf.cond_br %998, ^bb194, ^bb195
  ^bb193:  // pred: ^bb190
    %c1_i32_543 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_543) : (i32) -> ()
    cf.br ^bb192
  ^bb194:  // 2 preds: ^bb192, ^bb195
    %999 = llvm.getelementptr %13[%993] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %991, %999 {alignment = 1 : i64} : i32, !llvm.ptr
    %1000 = llvm.load %1 : !llvm.ptr -> i32
    %1001 = llvm.load %3 : !llvm.ptr -> i32
    %1002 = llvm.load %1 : !llvm.ptr -> i32
    %c152_i64 = arith.constant 152 : i64
    %1003 = arith.extui %1002 : i32 to i64
    %1004 = arith.addi %1003, %c152_i64 : i64
    %c4_i64_544 = arith.constant 4 : i64
    %1005 = arith.addi %1004, %c4_i64_544 : i64
    %c0_i32_545 = arith.constant 0 : i32
    %1006 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_545) : (!llvm.ptr, i32) -> i32
    %1007 = arith.extui %1006 : i32 to i64
    %c65536_i64_546 = arith.constant 65536 : i64
    %1008 = arith.muli %1007, %c65536_i64_546 : i64
    %1009 = arith.cmpi ult, %1005, %1008 : i64
    cf.cond_br %1009, ^bb196, ^bb197
  ^bb195:  // pred: ^bb192
    %c1_i32_547 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_547) : (i32) -> ()
    cf.br ^bb194
  ^bb196:  // 2 preds: ^bb194, ^bb197
    %1010 = llvm.getelementptr %13[%1004] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1011 = llvm.load volatile %1010 {alignment = 1 : i64} : !llvm.ptr -> i32
    %1012 = arith.addi %1001, %1011 : i32
    %c188_i64 = arith.constant 188 : i64
    %1013 = arith.extui %1000 : i32 to i64
    %1014 = arith.addi %1013, %c188_i64 : i64
    %c4_i64_548 = arith.constant 4 : i64
    %1015 = arith.addi %1014, %c4_i64_548 : i64
    %c0_i32_549 = arith.constant 0 : i32
    %1016 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_549) : (!llvm.ptr, i32) -> i32
    %1017 = arith.extui %1016 : i32 to i64
    %c65536_i64_550 = arith.constant 65536 : i64
    %1018 = arith.muli %1017, %c65536_i64_550 : i64
    %1019 = arith.cmpi ult, %1015, %1018 : i64
    cf.cond_br %1019, ^bb198, ^bb199
  ^bb197:  // pred: ^bb194
    %c1_i32_551 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_551) : (i32) -> ()
    cf.br ^bb196
  ^bb198:  // 2 preds: ^bb196, ^bb199
    %1020 = llvm.getelementptr %13[%1014] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1012, %1020 {alignment = 1 : i64} : i32, !llvm.ptr
    %1021 = llvm.load %1 : !llvm.ptr -> i32
    %c132_i32_552 = arith.constant 132 : i32
    %1022 = arith.addi %1021, %c132_i32_552 : i32
    %1023 = llvm.load %1 : !llvm.ptr -> i32
    %c176_i32_553 = arith.constant 176 : i32
    %1024 = arith.addi %1023, %c176_i32_553 : i32
    call @f83(%arg0, %1022, %1024) : (!llvm.ptr, i32, i32) -> ()
    %1025 = llvm.load %1 : !llvm.ptr -> i32
    %c136_i64_554 = arith.constant 136 : i64
    %1026 = arith.extui %1025 : i32 to i64
    %1027 = arith.addi %1026, %c136_i64_554 : i64
    %c4_i64_555 = arith.constant 4 : i64
    %1028 = arith.addi %1027, %c4_i64_555 : i64
    %c0_i32_556 = arith.constant 0 : i32
    %1029 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_556) : (!llvm.ptr, i32) -> i32
    %1030 = arith.extui %1029 : i32 to i64
    %c65536_i64_557 = arith.constant 65536 : i64
    %1031 = arith.muli %1030, %c65536_i64_557 : i64
    %1032 = arith.cmpi ult, %1028, %1031 : i64
    cf.cond_br %1032, ^bb200, ^bb201
  ^bb199:  // pred: ^bb196
    %c1_i32_558 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_558) : (i32) -> ()
    cf.br ^bb198
  ^bb200:  // 2 preds: ^bb198, ^bb201
    %1033 = llvm.getelementptr %13[%1027] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1034 = llvm.load volatile %1033 {alignment = 1 : i64} : !llvm.ptr -> i32
    %1035 = llvm.load %1 : !llvm.ptr -> i32
    %c140_i64_559 = arith.constant 140 : i64
    %1036 = arith.extui %1035 : i32 to i64
    %1037 = arith.addi %1036, %c140_i64_559 : i64
    %c4_i64_560 = arith.constant 4 : i64
    %1038 = arith.addi %1037, %c4_i64_560 : i64
    %c0_i32_561 = arith.constant 0 : i32
    %1039 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_561) : (!llvm.ptr, i32) -> i32
    %1040 = arith.extui %1039 : i32 to i64
    %c65536_i64_562 = arith.constant 65536 : i64
    %1041 = arith.muli %1040, %c65536_i64_562 : i64
    %1042 = arith.cmpi ult, %1038, %1041 : i64
    cf.cond_br %1042, ^bb202, ^bb203
  ^bb201:  // pred: ^bb198
    %c1_i32_563 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_563) : (i32) -> ()
    cf.br ^bb200
  ^bb202:  // 2 preds: ^bb200, ^bb203
    %1043 = llvm.getelementptr %13[%1037] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1044 = llvm.load volatile %1043 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    call @f66(%arg0, %1034, %1044, %c3_i32) : (!llvm.ptr, i32, i32, i32) -> ()
    %1045 = llvm.load %1 : !llvm.ptr -> i32
    %c132_i32_564 = arith.constant 132 : i32
    %1046 = arith.addi %1045, %c132_i32_564 : i32
    call @f112(%arg0, %1046) : (!llvm.ptr, i32) -> ()
    %1047 = llvm.load %1 : !llvm.ptr -> i32
    %c132_i32_565 = arith.constant 132 : i32
    %1048 = arith.addi %1047, %c132_i32_565 : i32
    call @f113(%arg0, %1048) : (!llvm.ptr, i32) -> ()
    %1049 = llvm.load %1 : !llvm.ptr -> i32
    %c240_i32_566 = arith.constant 240 : i32
    %1050 = arith.addi %1049, %c240_i32_566 : i32
    llvm.store %1050, %10 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb203:  // pred: ^bb200
    %c1_i32_567 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_567) : (i32) -> ()
    cf.br ^bb202
  ^bb204:  // 2 preds: ^bb104, ^bb205
    %1051 = llvm.getelementptr %13[%527] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1052 = llvm.load volatile %1051 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f143(%arg0, %524, %1052) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb205:  // pred: ^bb104
    %c1_i32_568 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_568) : (i32) -> ()
    cf.br ^bb204
  }
  func.func @f31(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %9 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %14 = llvm.load %10 : !llvm.ptr -> i32
    %c240_i32 = arith.constant 240 : i32
    %15 = arith.subi %14, %c240_i32 : i32
    llvm.store %15, %1 : i32, !llvm.ptr
    llvm.store %15, %10 : i32, !llvm.ptr
    %c0_i32_8 = arith.constant 0 : i32
    llvm.store %c0_i32_8, %2 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb2:  // pred: ^bb202
    return
  ^bb3:  // pred: ^bb13
    %c0_i32_9 = arith.constant 0 : i32
    llvm.store %c0_i32_9, %3 : i32, !llvm.ptr
    %16 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %17 = arith.addi %16, %c24_i32 : i32
    %c0_i32_10 = arith.constant 0 : i32
    %c1050132_i64 = arith.constant 1050132 : i64
    %18 = arith.extui %c0_i32_10 : i32 to i64
    %19 = arith.addi %18, %c1050132_i64 : i64
    %c8_i64 = arith.constant 8 : i64
    %20 = arith.addi %19, %c8_i64 : i64
    %c0_i32_11 = arith.constant 0 : i32
    %21 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_11) : (!llvm.ptr, i32) -> i32
    %22 = arith.extui %21 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %23 = arith.muli %22, %c65536_i64 : i64
    %24 = arith.cmpi ult, %20, %23 : i64
    cf.cond_br %24, ^bb14, ^bb15
  ^bb4:  // 2 preds: ^bb1, ^bb11
    %25 = llvm.load %1 : !llvm.ptr -> i32
    %26 = llvm.load %2 : !llvm.ptr -> i32
    %27 = arith.addi %25, %26 : i32
    llvm.store %27, %3 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c0_i64_12 = arith.constant 0 : i64
    %28 = arith.extui %27 : i32 to i64
    %29 = arith.addi %28, %c0_i64_12 : i64
    %c8_i64_13 = arith.constant 8 : i64
    %30 = arith.addi %29, %c8_i64_13 : i64
    %c0_i32_14 = arith.constant 0 : i32
    %31 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_14) : (!llvm.ptr, i32) -> i32
    %32 = arith.extui %31 : i32 to i64
    %c65536_i64_15 = arith.constant 65536 : i64
    %33 = arith.muli %32, %c65536_i64_15 : i64
    %34 = arith.cmpi ult, %30, %33 : i64
    cf.cond_br %34, ^bb5, ^bb6
  ^bb5:  // 2 preds: ^bb4, ^bb6
    %35 = llvm.getelementptr %13[%29] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64, %35 {alignment = 1 : i64} : i64, !llvm.ptr
    %36 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32_16 = arith.constant 24 : i32
    %37 = arith.addi %36, %c24_i32_16 : i32
    %c0_i64_17 = arith.constant 0 : i64
    %c0_i64_18 = arith.constant 0 : i64
    %38 = arith.extui %37 : i32 to i64
    %39 = arith.addi %38, %c0_i64_18 : i64
    %c8_i64_19 = arith.constant 8 : i64
    %40 = arith.addi %39, %c8_i64_19 : i64
    %c0_i32_20 = arith.constant 0 : i32
    %41 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_20) : (!llvm.ptr, i32) -> i32
    %42 = arith.extui %41 : i32 to i64
    %c65536_i64_21 = arith.constant 65536 : i64
    %43 = arith.muli %42, %c65536_i64_21 : i64
    %44 = arith.cmpi ult, %40, %43 : i64
    cf.cond_br %44, ^bb7, ^bb8
  ^bb6:  // pred: ^bb4
    %c1_i32_22 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_22) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %45 = llvm.getelementptr %13[%39] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_17, %45 {alignment = 1 : i64} : i64, !llvm.ptr
    %46 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %47 = arith.addi %46, %c16_i32 : i32
    %c0_i64_23 = arith.constant 0 : i64
    %c0_i64_24 = arith.constant 0 : i64
    %48 = arith.extui %47 : i32 to i64
    %49 = arith.addi %48, %c0_i64_24 : i64
    %c8_i64_25 = arith.constant 8 : i64
    %50 = arith.addi %49, %c8_i64_25 : i64
    %c0_i32_26 = arith.constant 0 : i32
    %51 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_26) : (!llvm.ptr, i32) -> i32
    %52 = arith.extui %51 : i32 to i64
    %c65536_i64_27 = arith.constant 65536 : i64
    %53 = arith.muli %52, %c65536_i64_27 : i64
    %54 = arith.cmpi ult, %50, %53 : i64
    cf.cond_br %54, ^bb9, ^bb10
  ^bb8:  // pred: ^bb5
    %c1_i32_28 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_28) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %55 = llvm.getelementptr %13[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_23, %55 {alignment = 1 : i64} : i64, !llvm.ptr
    %56 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %57 = arith.addi %56, %c8_i32 : i32
    %c0_i64_29 = arith.constant 0 : i64
    %c0_i64_30 = arith.constant 0 : i64
    %58 = arith.extui %57 : i32 to i64
    %59 = arith.addi %58, %c0_i64_30 : i64
    %c8_i64_31 = arith.constant 8 : i64
    %60 = arith.addi %59, %c8_i64_31 : i64
    %c0_i32_32 = arith.constant 0 : i32
    %61 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_32) : (!llvm.ptr, i32) -> i32
    %62 = arith.extui %61 : i32 to i64
    %c65536_i64_33 = arith.constant 65536 : i64
    %63 = arith.muli %62, %c65536_i64_33 : i64
    %64 = arith.cmpi ult, %60, %63 : i64
    cf.cond_br %64, ^bb11, ^bb12
  ^bb10:  // pred: ^bb7
    %c1_i32_34 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_34) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %65 = llvm.getelementptr %13[%59] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_29, %65 {alignment = 1 : i64} : i64, !llvm.ptr
    %66 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %67 = arith.addi %66, %c32_i32 : i32
    llvm.store %67, %2 : i32, !llvm.ptr
    %c128_i32 = arith.constant 128 : i32
    %68 = arith.cmpi eq, %67, %c128_i32 : i32
    %69 = arith.extui %68 : i1 to i32
    %c0_i32_35 = arith.constant 0 : i32
    %70 = arith.cmpi eq, %69, %c0_i32_35 : i32
    %71 = arith.extui %70 : i1 to i32
    %c0_i32_36 = arith.constant 0 : i32
    %72 = arith.cmpi ne, %71, %c0_i32_36 : i32
    cf.cond_br %72, ^bb4, ^bb13
  ^bb12:  // pred: ^bb9
    %c1_i32_37 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_37) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // pred: ^bb11
    cf.br ^bb3
  ^bb14:  // 2 preds: ^bb3, ^bb15
    %73 = llvm.getelementptr %13[%19] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %74 = llvm.load volatile %73 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_38 = arith.constant 0 : i64
    %75 = arith.extui %17 : i32 to i64
    %76 = arith.addi %75, %c0_i64_38 : i64
    %c8_i64_39 = arith.constant 8 : i64
    %77 = arith.addi %76, %c8_i64_39 : i64
    %c0_i32_40 = arith.constant 0 : i32
    %78 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_40) : (!llvm.ptr, i32) -> i32
    %79 = arith.extui %78 : i32 to i64
    %c65536_i64_41 = arith.constant 65536 : i64
    %80 = arith.muli %79, %c65536_i64_41 : i64
    %81 = arith.cmpi ult, %77, %80 : i64
    cf.cond_br %81, ^bb16, ^bb17
  ^bb15:  // pred: ^bb3
    %c1_i32_42 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_42) : (i32) -> ()
    cf.br ^bb14
  ^bb16:  // 2 preds: ^bb14, ^bb17
    %82 = llvm.getelementptr %13[%76] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %74, %82 {alignment = 1 : i64} : i64, !llvm.ptr
    %83 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32_43 = arith.constant 16 : i32
    %84 = arith.addi %83, %c16_i32_43 : i32
    %c0_i32_44 = arith.constant 0 : i32
    %c1050124_i64 = arith.constant 1050124 : i64
    %85 = arith.extui %c0_i32_44 : i32 to i64
    %86 = arith.addi %85, %c1050124_i64 : i64
    %c8_i64_45 = arith.constant 8 : i64
    %87 = arith.addi %86, %c8_i64_45 : i64
    %c0_i32_46 = arith.constant 0 : i32
    %88 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_46) : (!llvm.ptr, i32) -> i32
    %89 = arith.extui %88 : i32 to i64
    %c65536_i64_47 = arith.constant 65536 : i64
    %90 = arith.muli %89, %c65536_i64_47 : i64
    %91 = arith.cmpi ult, %87, %90 : i64
    cf.cond_br %91, ^bb18, ^bb19
  ^bb17:  // pred: ^bb14
    %c1_i32_48 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_48) : (i32) -> ()
    cf.br ^bb16
  ^bb18:  // 2 preds: ^bb16, ^bb19
    %92 = llvm.getelementptr %13[%86] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %93 = llvm.load volatile %92 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_49 = arith.constant 0 : i64
    %94 = arith.extui %84 : i32 to i64
    %95 = arith.addi %94, %c0_i64_49 : i64
    %c8_i64_50 = arith.constant 8 : i64
    %96 = arith.addi %95, %c8_i64_50 : i64
    %c0_i32_51 = arith.constant 0 : i32
    %97 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_51) : (!llvm.ptr, i32) -> i32
    %98 = arith.extui %97 : i32 to i64
    %c65536_i64_52 = arith.constant 65536 : i64
    %99 = arith.muli %98, %c65536_i64_52 : i64
    %100 = arith.cmpi ult, %96, %99 : i64
    cf.cond_br %100, ^bb20, ^bb21
  ^bb19:  // pred: ^bb16
    %c1_i32_53 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_53) : (i32) -> ()
    cf.br ^bb18
  ^bb20:  // 2 preds: ^bb18, ^bb21
    %101 = llvm.getelementptr %13[%95] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %93, %101 {alignment = 1 : i64} : i64, !llvm.ptr
    %102 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_54 = arith.constant 8 : i32
    %103 = arith.addi %102, %c8_i32_54 : i32
    %c0_i32_55 = arith.constant 0 : i32
    %c1050116_i64 = arith.constant 1050116 : i64
    %104 = arith.extui %c0_i32_55 : i32 to i64
    %105 = arith.addi %104, %c1050116_i64 : i64
    %c8_i64_56 = arith.constant 8 : i64
    %106 = arith.addi %105, %c8_i64_56 : i64
    %c0_i32_57 = arith.constant 0 : i32
    %107 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_57) : (!llvm.ptr, i32) -> i32
    %108 = arith.extui %107 : i32 to i64
    %c65536_i64_58 = arith.constant 65536 : i64
    %109 = arith.muli %108, %c65536_i64_58 : i64
    %110 = arith.cmpi ult, %106, %109 : i64
    cf.cond_br %110, ^bb22, ^bb23
  ^bb21:  // pred: ^bb18
    %c1_i32_59 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_59) : (i32) -> ()
    cf.br ^bb20
  ^bb22:  // 2 preds: ^bb20, ^bb23
    %111 = llvm.getelementptr %13[%105] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %112 = llvm.load volatile %111 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_60 = arith.constant 0 : i64
    %113 = arith.extui %103 : i32 to i64
    %114 = arith.addi %113, %c0_i64_60 : i64
    %c8_i64_61 = arith.constant 8 : i64
    %115 = arith.addi %114, %c8_i64_61 : i64
    %c0_i32_62 = arith.constant 0 : i32
    %116 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_62) : (!llvm.ptr, i32) -> i32
    %117 = arith.extui %116 : i32 to i64
    %c65536_i64_63 = arith.constant 65536 : i64
    %118 = arith.muli %117, %c65536_i64_63 : i64
    %119 = arith.cmpi ult, %115, %118 : i64
    cf.cond_br %119, ^bb24, ^bb25
  ^bb23:  // pred: ^bb20
    %c1_i32_64 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_64) : (i32) -> ()
    cf.br ^bb22
  ^bb24:  // 2 preds: ^bb22, ^bb25
    %120 = llvm.getelementptr %13[%114] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %112, %120 {alignment = 1 : i64} : i64, !llvm.ptr
    %121 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_65 = arith.constant 0 : i32
    %c1050108_i64 = arith.constant 1050108 : i64
    %122 = arith.extui %c0_i32_65 : i32 to i64
    %123 = arith.addi %122, %c1050108_i64 : i64
    %c8_i64_66 = arith.constant 8 : i64
    %124 = arith.addi %123, %c8_i64_66 : i64
    %c0_i32_67 = arith.constant 0 : i32
    %125 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_67) : (!llvm.ptr, i32) -> i32
    %126 = arith.extui %125 : i32 to i64
    %c65536_i64_68 = arith.constant 65536 : i64
    %127 = arith.muli %126, %c65536_i64_68 : i64
    %128 = arith.cmpi ult, %124, %127 : i64
    cf.cond_br %128, ^bb26, ^bb27
  ^bb25:  // pred: ^bb22
    %c1_i32_69 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_69) : (i32) -> ()
    cf.br ^bb24
  ^bb26:  // 2 preds: ^bb24, ^bb27
    %129 = llvm.getelementptr %13[%123] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %130 = llvm.load volatile %129 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_70 = arith.constant 0 : i64
    %131 = arith.extui %121 : i32 to i64
    %132 = arith.addi %131, %c0_i64_70 : i64
    %c8_i64_71 = arith.constant 8 : i64
    %133 = arith.addi %132, %c8_i64_71 : i64
    %c0_i32_72 = arith.constant 0 : i32
    %134 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_72) : (!llvm.ptr, i32) -> i32
    %135 = arith.extui %134 : i32 to i64
    %c65536_i64_73 = arith.constant 65536 : i64
    %136 = arith.muli %135, %c65536_i64_73 : i64
    %137 = arith.cmpi ult, %133, %136 : i64
    cf.cond_br %137, ^bb28, ^bb29
  ^bb27:  // pred: ^bb24
    %c1_i32_74 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_74) : (i32) -> ()
    cf.br ^bb26
  ^bb28:  // 2 preds: ^bb26, ^bb29
    %138 = llvm.getelementptr %13[%132] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %130, %138 {alignment = 1 : i64} : i64, !llvm.ptr
    %139 = llvm.load %1 : !llvm.ptr -> i32
    %c176_i32 = arith.constant 176 : i32
    %140 = arith.addi %139, %c176_i32 : i32
    %c16_i32_75 = arith.constant 16 : i32
    %141 = arith.addi %140, %c16_i32_75 : i32
    llvm.store %141, %4 : i32, !llvm.ptr
    %142 = llvm.load %0 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %143 = arith.addi %142, %c48_i32 : i32
    %c0_i64_76 = arith.constant 0 : i64
    %144 = arith.extui %143 : i32 to i64
    %145 = arith.addi %144, %c0_i64_76 : i64
    %c4_i64 = arith.constant 4 : i64
    %146 = arith.addi %145, %c4_i64 : i64
    %c0_i32_77 = arith.constant 0 : i32
    %147 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_77) : (!llvm.ptr, i32) -> i32
    %148 = arith.extui %147 : i32 to i64
    %c65536_i64_78 = arith.constant 65536 : i64
    %149 = arith.muli %148, %c65536_i64_78 : i64
    %150 = arith.cmpi ult, %146, %149 : i64
    cf.cond_br %150, ^bb30, ^bb31
  ^bb29:  // pred: ^bb26
    %c1_i32_79 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_79) : (i32) -> ()
    cf.br ^bb28
  ^bb30:  // 2 preds: ^bb28, ^bb31
    %151 = llvm.getelementptr %13[%145] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %152 = llvm.load volatile %151 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_80 = arith.constant 0 : i64
    %153 = arith.extui %141 : i32 to i64
    %154 = arith.addi %153, %c0_i64_80 : i64
    %c4_i64_81 = arith.constant 4 : i64
    %155 = arith.addi %154, %c4_i64_81 : i64
    %c0_i32_82 = arith.constant 0 : i32
    %156 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_82) : (!llvm.ptr, i32) -> i32
    %157 = arith.extui %156 : i32 to i64
    %c65536_i64_83 = arith.constant 65536 : i64
    %158 = arith.muli %157, %c65536_i64_83 : i64
    %159 = arith.cmpi ult, %155, %158 : i64
    cf.cond_br %159, ^bb32, ^bb33
  ^bb31:  // pred: ^bb28
    %c1_i32_84 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_84) : (i32) -> ()
    cf.br ^bb30
  ^bb32:  // 2 preds: ^bb30, ^bb33
    %160 = llvm.getelementptr %13[%154] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %152, %160 {alignment = 1 : i64} : i32, !llvm.ptr
    %161 = llvm.load %1 : !llvm.ptr -> i32
    %c176_i32_85 = arith.constant 176 : i32
    %162 = arith.addi %161, %c176_i32_85 : i32
    %c8_i32_86 = arith.constant 8 : i32
    %163 = arith.addi %162, %c8_i32_86 : i32
    llvm.store %163, %5 : i32, !llvm.ptr
    %164 = llvm.load %0 : !llvm.ptr -> i32
    %c40_i32 = arith.constant 40 : i32
    %165 = arith.addi %164, %c40_i32 : i32
    %c0_i64_87 = arith.constant 0 : i64
    %166 = arith.extui %165 : i32 to i64
    %167 = arith.addi %166, %c0_i64_87 : i64
    %c8_i64_88 = arith.constant 8 : i64
    %168 = arith.addi %167, %c8_i64_88 : i64
    %c0_i32_89 = arith.constant 0 : i32
    %169 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_89) : (!llvm.ptr, i32) -> i32
    %170 = arith.extui %169 : i32 to i64
    %c65536_i64_90 = arith.constant 65536 : i64
    %171 = arith.muli %170, %c65536_i64_90 : i64
    %172 = arith.cmpi ult, %168, %171 : i64
    cf.cond_br %172, ^bb34, ^bb35
  ^bb33:  // pred: ^bb30
    %c1_i32_91 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_91) : (i32) -> ()
    cf.br ^bb32
  ^bb34:  // 2 preds: ^bb32, ^bb35
    %173 = llvm.getelementptr %13[%167] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %174 = llvm.load volatile %173 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_92 = arith.constant 0 : i64
    %175 = arith.extui %163 : i32 to i64
    %176 = arith.addi %175, %c0_i64_92 : i64
    %c8_i64_93 = arith.constant 8 : i64
    %177 = arith.addi %176, %c8_i64_93 : i64
    %c0_i32_94 = arith.constant 0 : i32
    %178 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_94) : (!llvm.ptr, i32) -> i32
    %179 = arith.extui %178 : i32 to i64
    %c65536_i64_95 = arith.constant 65536 : i64
    %180 = arith.muli %179, %c65536_i64_95 : i64
    %181 = arith.cmpi ult, %177, %180 : i64
    cf.cond_br %181, ^bb36, ^bb37
  ^bb35:  // pred: ^bb32
    %c1_i32_96 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_96) : (i32) -> ()
    cf.br ^bb34
  ^bb36:  // 2 preds: ^bb34, ^bb37
    %182 = llvm.getelementptr %13[%176] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %174, %182 {alignment = 1 : i64} : i64, !llvm.ptr
    %183 = llvm.load %1 : !llvm.ptr -> i32
    %184 = llvm.load %0 : !llvm.ptr -> i32
    %c32_i64 = arith.constant 32 : i64
    %185 = arith.extui %184 : i32 to i64
    %186 = arith.addi %185, %c32_i64 : i64
    %c8_i64_97 = arith.constant 8 : i64
    %187 = arith.addi %186, %c8_i64_97 : i64
    %c0_i32_98 = arith.constant 0 : i32
    %188 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_98) : (!llvm.ptr, i32) -> i32
    %189 = arith.extui %188 : i32 to i64
    %c65536_i64_99 = arith.constant 65536 : i64
    %190 = arith.muli %189, %c65536_i64_99 : i64
    %191 = arith.cmpi ult, %187, %190 : i64
    cf.cond_br %191, ^bb38, ^bb39
  ^bb37:  // pred: ^bb34
    %c1_i32_100 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_100) : (i32) -> ()
    cf.br ^bb36
  ^bb38:  // 2 preds: ^bb36, ^bb39
    %192 = llvm.getelementptr %13[%186] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %193 = llvm.load volatile %192 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c176_i64 = arith.constant 176 : i64
    %194 = arith.extui %183 : i32 to i64
    %195 = arith.addi %194, %c176_i64 : i64
    %c8_i64_101 = arith.constant 8 : i64
    %196 = arith.addi %195, %c8_i64_101 : i64
    %c0_i32_102 = arith.constant 0 : i32
    %197 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_102) : (!llvm.ptr, i32) -> i32
    %198 = arith.extui %197 : i32 to i64
    %c65536_i64_103 = arith.constant 65536 : i64
    %199 = arith.muli %198, %c65536_i64_103 : i64
    %200 = arith.cmpi ult, %196, %199 : i64
    cf.cond_br %200, ^bb40, ^bb41
  ^bb39:  // pred: ^bb36
    %c1_i32_104 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_104) : (i32) -> ()
    cf.br ^bb38
  ^bb40:  // 2 preds: ^bb38, ^bb41
    %201 = llvm.getelementptr %13[%195] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %193, %201 {alignment = 1 : i64} : i64, !llvm.ptr
    %202 = llvm.load %1 : !llvm.ptr -> i32
    %c208_i32 = arith.constant 208 : i32
    %203 = arith.addi %202, %c208_i32 : i32
    %c24_i32_105 = arith.constant 24 : i32
    %204 = arith.addi %203, %c24_i32_105 : i32
    llvm.store %204, %2 : i32, !llvm.ptr
    %c0_i64_106 = arith.constant 0 : i64
    %c0_i64_107 = arith.constant 0 : i64
    %205 = arith.extui %204 : i32 to i64
    %206 = arith.addi %205, %c0_i64_107 : i64
    %c8_i64_108 = arith.constant 8 : i64
    %207 = arith.addi %206, %c8_i64_108 : i64
    %c0_i32_109 = arith.constant 0 : i32
    %208 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_109) : (!llvm.ptr, i32) -> i32
    %209 = arith.extui %208 : i32 to i64
    %c65536_i64_110 = arith.constant 65536 : i64
    %210 = arith.muli %209, %c65536_i64_110 : i64
    %211 = arith.cmpi ult, %207, %210 : i64
    cf.cond_br %211, ^bb42, ^bb43
  ^bb41:  // pred: ^bb38
    %c1_i32_111 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_111) : (i32) -> ()
    cf.br ^bb40
  ^bb42:  // 2 preds: ^bb40, ^bb43
    %212 = llvm.getelementptr %13[%206] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_106, %212 {alignment = 1 : i64} : i64, !llvm.ptr
    %213 = llvm.load %1 : !llvm.ptr -> i32
    %c208_i32_112 = arith.constant 208 : i32
    %214 = arith.addi %213, %c208_i32_112 : i32
    %c16_i32_113 = arith.constant 16 : i32
    %215 = arith.addi %214, %c16_i32_113 : i32
    llvm.store %215, %6 : i32, !llvm.ptr
    %c0_i64_114 = arith.constant 0 : i64
    %c0_i64_115 = arith.constant 0 : i64
    %216 = arith.extui %215 : i32 to i64
    %217 = arith.addi %216, %c0_i64_115 : i64
    %c8_i64_116 = arith.constant 8 : i64
    %218 = arith.addi %217, %c8_i64_116 : i64
    %c0_i32_117 = arith.constant 0 : i32
    %219 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_117) : (!llvm.ptr, i32) -> i32
    %220 = arith.extui %219 : i32 to i64
    %c65536_i64_118 = arith.constant 65536 : i64
    %221 = arith.muli %220, %c65536_i64_118 : i64
    %222 = arith.cmpi ult, %218, %221 : i64
    cf.cond_br %222, ^bb44, ^bb45
  ^bb43:  // pred: ^bb40
    %c1_i32_119 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_119) : (i32) -> ()
    cf.br ^bb42
  ^bb44:  // 2 preds: ^bb42, ^bb45
    %223 = llvm.getelementptr %13[%217] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_114, %223 {alignment = 1 : i64} : i64, !llvm.ptr
    %224 = llvm.load %1 : !llvm.ptr -> i32
    %c208_i32_120 = arith.constant 208 : i32
    %225 = arith.addi %224, %c208_i32_120 : i32
    %c8_i32_121 = arith.constant 8 : i32
    %226 = arith.addi %225, %c8_i32_121 : i32
    llvm.store %226, %7 : i32, !llvm.ptr
    %c0_i64_122 = arith.constant 0 : i64
    %c0_i64_123 = arith.constant 0 : i64
    %227 = arith.extui %226 : i32 to i64
    %228 = arith.addi %227, %c0_i64_123 : i64
    %c8_i64_124 = arith.constant 8 : i64
    %229 = arith.addi %228, %c8_i64_124 : i64
    %c0_i32_125 = arith.constant 0 : i32
    %230 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_125) : (!llvm.ptr, i32) -> i32
    %231 = arith.extui %230 : i32 to i64
    %c65536_i64_126 = arith.constant 65536 : i64
    %232 = arith.muli %231, %c65536_i64_126 : i64
    %233 = arith.cmpi ult, %229, %232 : i64
    cf.cond_br %233, ^bb46, ^bb47
  ^bb45:  // pred: ^bb42
    %c1_i32_127 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_127) : (i32) -> ()
    cf.br ^bb44
  ^bb46:  // 2 preds: ^bb44, ^bb47
    %234 = llvm.getelementptr %13[%228] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_122, %234 {alignment = 1 : i64} : i64, !llvm.ptr
    %235 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_128 = arith.constant 0 : i64
    %c208_i64 = arith.constant 208 : i64
    %236 = arith.extui %235 : i32 to i64
    %237 = arith.addi %236, %c208_i64 : i64
    %c8_i64_129 = arith.constant 8 : i64
    %238 = arith.addi %237, %c8_i64_129 : i64
    %c0_i32_130 = arith.constant 0 : i32
    %239 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_130) : (!llvm.ptr, i32) -> i32
    %240 = arith.extui %239 : i32 to i64
    %c65536_i64_131 = arith.constant 65536 : i64
    %241 = arith.muli %240, %c65536_i64_131 : i64
    %242 = arith.cmpi ult, %238, %241 : i64
    cf.cond_br %242, ^bb48, ^bb49
  ^bb47:  // pred: ^bb44
    %c1_i32_132 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_132) : (i32) -> ()
    cf.br ^bb46
  ^bb48:  // 2 preds: ^bb46, ^bb49
    %243 = llvm.getelementptr %13[%237] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_128, %243 {alignment = 1 : i64} : i64, !llvm.ptr
    %244 = llvm.load %1 : !llvm.ptr -> i32
    %c220_i32 = arith.constant 220 : i32
    %245 = arith.addi %244, %c220_i32 : i32
    llvm.store %245, %8 : i32, !llvm.ptr
    %c20_i32 = arith.constant 20 : i32
    %246 = llvm.load %1 : !llvm.ptr -> i32
    %c176_i32_133 = arith.constant 176 : i32
    %247 = arith.addi %246, %c176_i32_133 : i32
    %c20_i32_134 = arith.constant 20 : i32
    %c1049972_i32 = arith.constant 1049972 : i32
    call @f114(%arg0, %245, %c20_i32, %247, %c20_i32_134, %c1049972_i32) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %248 = llvm.load %1 : !llvm.ptr -> i32
    %c56_i32 = arith.constant 56 : i32
    %249 = arith.addi %248, %c56_i32 : i32
    %250 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_135 = arith.constant 0 : i64
    %251 = arith.extui %250 : i32 to i64
    %252 = arith.addi %251, %c0_i64_135 : i64
    %c8_i64_136 = arith.constant 8 : i64
    %253 = arith.addi %252, %c8_i64_136 : i64
    %c0_i32_137 = arith.constant 0 : i32
    %254 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_137) : (!llvm.ptr, i32) -> i32
    %255 = arith.extui %254 : i32 to i64
    %c65536_i64_138 = arith.constant 65536 : i64
    %256 = arith.muli %255, %c65536_i64_138 : i64
    %257 = arith.cmpi ult, %253, %256 : i64
    cf.cond_br %257, ^bb50, ^bb51
  ^bb49:  // pred: ^bb46
    %c1_i32_139 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_139) : (i32) -> ()
    cf.br ^bb48
  ^bb50:  // 2 preds: ^bb48, ^bb51
    %258 = llvm.getelementptr %13[%252] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %259 = llvm.load volatile %258 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_140 = arith.constant 0 : i64
    %260 = arith.extui %249 : i32 to i64
    %261 = arith.addi %260, %c0_i64_140 : i64
    %c8_i64_141 = arith.constant 8 : i64
    %262 = arith.addi %261, %c8_i64_141 : i64
    %c0_i32_142 = arith.constant 0 : i32
    %263 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_142) : (!llvm.ptr, i32) -> i32
    %264 = arith.extui %263 : i32 to i64
    %c65536_i64_143 = arith.constant 65536 : i64
    %265 = arith.muli %264, %c65536_i64_143 : i64
    %266 = arith.cmpi ult, %262, %265 : i64
    cf.cond_br %266, ^bb52, ^bb53
  ^bb51:  // pred: ^bb48
    %c1_i32_144 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_144) : (i32) -> ()
    cf.br ^bb50
  ^bb52:  // 2 preds: ^bb50, ^bb53
    %267 = llvm.getelementptr %13[%261] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %259, %267 {alignment = 1 : i64} : i64, !llvm.ptr
    %268 = llvm.load %1 : !llvm.ptr -> i32
    %c48_i32_145 = arith.constant 48 : i32
    %269 = arith.addi %268, %c48_i32_145 : i32
    %270 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_146 = arith.constant 0 : i64
    %271 = arith.extui %270 : i32 to i64
    %272 = arith.addi %271, %c0_i64_146 : i64
    %c8_i64_147 = arith.constant 8 : i64
    %273 = arith.addi %272, %c8_i64_147 : i64
    %c0_i32_148 = arith.constant 0 : i32
    %274 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_148) : (!llvm.ptr, i32) -> i32
    %275 = arith.extui %274 : i32 to i64
    %c65536_i64_149 = arith.constant 65536 : i64
    %276 = arith.muli %275, %c65536_i64_149 : i64
    %277 = arith.cmpi ult, %273, %276 : i64
    cf.cond_br %277, ^bb54, ^bb55
  ^bb53:  // pred: ^bb50
    %c1_i32_150 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_150) : (i32) -> ()
    cf.br ^bb52
  ^bb54:  // 2 preds: ^bb52, ^bb55
    %278 = llvm.getelementptr %13[%272] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %279 = llvm.load volatile %278 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_151 = arith.constant 0 : i64
    %280 = arith.extui %269 : i32 to i64
    %281 = arith.addi %280, %c0_i64_151 : i64
    %c8_i64_152 = arith.constant 8 : i64
    %282 = arith.addi %281, %c8_i64_152 : i64
    %c0_i32_153 = arith.constant 0 : i32
    %283 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_153) : (!llvm.ptr, i32) -> i32
    %284 = arith.extui %283 : i32 to i64
    %c65536_i64_154 = arith.constant 65536 : i64
    %285 = arith.muli %284, %c65536_i64_154 : i64
    %286 = arith.cmpi ult, %282, %285 : i64
    cf.cond_br %286, ^bb56, ^bb57
  ^bb55:  // pred: ^bb52
    %c1_i32_155 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_155) : (i32) -> ()
    cf.br ^bb54
  ^bb56:  // 2 preds: ^bb54, ^bb57
    %287 = llvm.getelementptr %13[%281] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %279, %287 {alignment = 1 : i64} : i64, !llvm.ptr
    %288 = llvm.load %1 : !llvm.ptr -> i32
    %c40_i32_156 = arith.constant 40 : i32
    %289 = arith.addi %288, %c40_i32_156 : i32
    %290 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_157 = arith.constant 0 : i64
    %291 = arith.extui %290 : i32 to i64
    %292 = arith.addi %291, %c0_i64_157 : i64
    %c8_i64_158 = arith.constant 8 : i64
    %293 = arith.addi %292, %c8_i64_158 : i64
    %c0_i32_159 = arith.constant 0 : i32
    %294 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_159) : (!llvm.ptr, i32) -> i32
    %295 = arith.extui %294 : i32 to i64
    %c65536_i64_160 = arith.constant 65536 : i64
    %296 = arith.muli %295, %c65536_i64_160 : i64
    %297 = arith.cmpi ult, %293, %296 : i64
    cf.cond_br %297, ^bb58, ^bb59
  ^bb57:  // pred: ^bb54
    %c1_i32_161 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_161) : (i32) -> ()
    cf.br ^bb56
  ^bb58:  // 2 preds: ^bb56, ^bb59
    %298 = llvm.getelementptr %13[%292] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %299 = llvm.load volatile %298 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_162 = arith.constant 0 : i64
    %300 = arith.extui %289 : i32 to i64
    %301 = arith.addi %300, %c0_i64_162 : i64
    %c8_i64_163 = arith.constant 8 : i64
    %302 = arith.addi %301, %c8_i64_163 : i64
    %c0_i32_164 = arith.constant 0 : i32
    %303 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_164) : (!llvm.ptr, i32) -> i32
    %304 = arith.extui %303 : i32 to i64
    %c65536_i64_165 = arith.constant 65536 : i64
    %305 = arith.muli %304, %c65536_i64_165 : i64
    %306 = arith.cmpi ult, %302, %305 : i64
    cf.cond_br %306, ^bb60, ^bb61
  ^bb59:  // pred: ^bb56
    %c1_i32_166 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_166) : (i32) -> ()
    cf.br ^bb58
  ^bb60:  // 2 preds: ^bb58, ^bb61
    %307 = llvm.getelementptr %13[%301] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %299, %307 {alignment = 1 : i64} : i64, !llvm.ptr
    %308 = llvm.load %1 : !llvm.ptr -> i32
    %309 = llvm.load %1 : !llvm.ptr -> i32
    %c208_i64_167 = arith.constant 208 : i64
    %310 = arith.extui %309 : i32 to i64
    %311 = arith.addi %310, %c208_i64_167 : i64
    %c8_i64_168 = arith.constant 8 : i64
    %312 = arith.addi %311, %c8_i64_168 : i64
    %c0_i32_169 = arith.constant 0 : i32
    %313 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_169) : (!llvm.ptr, i32) -> i32
    %314 = arith.extui %313 : i32 to i64
    %c65536_i64_170 = arith.constant 65536 : i64
    %315 = arith.muli %314, %c65536_i64_170 : i64
    %316 = arith.cmpi ult, %312, %315 : i64
    cf.cond_br %316, ^bb62, ^bb63
  ^bb61:  // pred: ^bb58
    %c1_i32_171 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_171) : (i32) -> ()
    cf.br ^bb60
  ^bb62:  // 2 preds: ^bb60, ^bb63
    %317 = llvm.getelementptr %13[%311] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %318 = llvm.load volatile %317 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c32_i64_172 = arith.constant 32 : i64
    %319 = arith.extui %308 : i32 to i64
    %320 = arith.addi %319, %c32_i64_172 : i64
    %c8_i64_173 = arith.constant 8 : i64
    %321 = arith.addi %320, %c8_i64_173 : i64
    %c0_i32_174 = arith.constant 0 : i32
    %322 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_174) : (!llvm.ptr, i32) -> i32
    %323 = arith.extui %322 : i32 to i64
    %c65536_i64_175 = arith.constant 65536 : i64
    %324 = arith.muli %323, %c65536_i64_175 : i64
    %325 = arith.cmpi ult, %321, %324 : i64
    cf.cond_br %325, ^bb64, ^bb65
  ^bb63:  // pred: ^bb60
    %c1_i32_176 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_176) : (i32) -> ()
    cf.br ^bb62
  ^bb64:  // 2 preds: ^bb62, ^bb65
    %326 = llvm.getelementptr %13[%320] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %318, %326 {alignment = 1 : i64} : i64, !llvm.ptr
    %327 = llvm.load %4 : !llvm.ptr -> i32
    %328 = llvm.load %0 : !llvm.ptr -> i32
    %c68_i32 = arith.constant 68 : i32
    %329 = arith.addi %328, %c68_i32 : i32
    %c0_i64_177 = arith.constant 0 : i64
    %330 = arith.extui %329 : i32 to i64
    %331 = arith.addi %330, %c0_i64_177 : i64
    %c4_i64_178 = arith.constant 4 : i64
    %332 = arith.addi %331, %c4_i64_178 : i64
    %c0_i32_179 = arith.constant 0 : i32
    %333 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_179) : (!llvm.ptr, i32) -> i32
    %334 = arith.extui %333 : i32 to i64
    %c65536_i64_180 = arith.constant 65536 : i64
    %335 = arith.muli %334, %c65536_i64_180 : i64
    %336 = arith.cmpi ult, %332, %335 : i64
    cf.cond_br %336, ^bb66, ^bb67
  ^bb65:  // pred: ^bb62
    %c1_i32_181 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_181) : (i32) -> ()
    cf.br ^bb64
  ^bb66:  // 2 preds: ^bb64, ^bb67
    %337 = llvm.getelementptr %13[%331] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %338 = llvm.load volatile %337 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_182 = arith.constant 0 : i64
    %339 = arith.extui %327 : i32 to i64
    %340 = arith.addi %339, %c0_i64_182 : i64
    %c4_i64_183 = arith.constant 4 : i64
    %341 = arith.addi %340, %c4_i64_183 : i64
    %c0_i32_184 = arith.constant 0 : i32
    %342 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_184) : (!llvm.ptr, i32) -> i32
    %343 = arith.extui %342 : i32 to i64
    %c65536_i64_185 = arith.constant 65536 : i64
    %344 = arith.muli %343, %c65536_i64_185 : i64
    %345 = arith.cmpi ult, %341, %344 : i64
    cf.cond_br %345, ^bb68, ^bb69
  ^bb67:  // pred: ^bb64
    %c1_i32_186 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_186) : (i32) -> ()
    cf.br ^bb66
  ^bb68:  // 2 preds: ^bb66, ^bb69
    %346 = llvm.getelementptr %13[%340] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %338, %346 {alignment = 1 : i64} : i32, !llvm.ptr
    %347 = llvm.load %5 : !llvm.ptr -> i32
    %348 = llvm.load %0 : !llvm.ptr -> i32
    %c60_i32 = arith.constant 60 : i32
    %349 = arith.addi %348, %c60_i32 : i32
    %c0_i64_187 = arith.constant 0 : i64
    %350 = arith.extui %349 : i32 to i64
    %351 = arith.addi %350, %c0_i64_187 : i64
    %c8_i64_188 = arith.constant 8 : i64
    %352 = arith.addi %351, %c8_i64_188 : i64
    %c0_i32_189 = arith.constant 0 : i32
    %353 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_189) : (!llvm.ptr, i32) -> i32
    %354 = arith.extui %353 : i32 to i64
    %c65536_i64_190 = arith.constant 65536 : i64
    %355 = arith.muli %354, %c65536_i64_190 : i64
    %356 = arith.cmpi ult, %352, %355 : i64
    cf.cond_br %356, ^bb70, ^bb71
  ^bb69:  // pred: ^bb66
    %c1_i32_191 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_191) : (i32) -> ()
    cf.br ^bb68
  ^bb70:  // 2 preds: ^bb68, ^bb71
    %357 = llvm.getelementptr %13[%351] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %358 = llvm.load volatile %357 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_192 = arith.constant 0 : i64
    %359 = arith.extui %347 : i32 to i64
    %360 = arith.addi %359, %c0_i64_192 : i64
    %c8_i64_193 = arith.constant 8 : i64
    %361 = arith.addi %360, %c8_i64_193 : i64
    %c0_i32_194 = arith.constant 0 : i32
    %362 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_194) : (!llvm.ptr, i32) -> i32
    %363 = arith.extui %362 : i32 to i64
    %c65536_i64_195 = arith.constant 65536 : i64
    %364 = arith.muli %363, %c65536_i64_195 : i64
    %365 = arith.cmpi ult, %361, %364 : i64
    cf.cond_br %365, ^bb72, ^bb73
  ^bb71:  // pred: ^bb68
    %c1_i32_196 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_196) : (i32) -> ()
    cf.br ^bb70
  ^bb72:  // 2 preds: ^bb70, ^bb73
    %366 = llvm.getelementptr %13[%360] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %358, %366 {alignment = 1 : i64} : i64, !llvm.ptr
    %367 = llvm.load %1 : !llvm.ptr -> i32
    %368 = llvm.load %0 : !llvm.ptr -> i32
    %c52_i64 = arith.constant 52 : i64
    %369 = arith.extui %368 : i32 to i64
    %370 = arith.addi %369, %c52_i64 : i64
    %c8_i64_197 = arith.constant 8 : i64
    %371 = arith.addi %370, %c8_i64_197 : i64
    %c0_i32_198 = arith.constant 0 : i32
    %372 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_198) : (!llvm.ptr, i32) -> i32
    %373 = arith.extui %372 : i32 to i64
    %c65536_i64_199 = arith.constant 65536 : i64
    %374 = arith.muli %373, %c65536_i64_199 : i64
    %375 = arith.cmpi ult, %371, %374 : i64
    cf.cond_br %375, ^bb74, ^bb75
  ^bb73:  // pred: ^bb70
    %c1_i32_200 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_200) : (i32) -> ()
    cf.br ^bb72
  ^bb74:  // 2 preds: ^bb72, ^bb75
    %376 = llvm.getelementptr %13[%370] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %377 = llvm.load volatile %376 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c176_i64_201 = arith.constant 176 : i64
    %378 = arith.extui %367 : i32 to i64
    %379 = arith.addi %378, %c176_i64_201 : i64
    %c8_i64_202 = arith.constant 8 : i64
    %380 = arith.addi %379, %c8_i64_202 : i64
    %c0_i32_203 = arith.constant 0 : i32
    %381 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_203) : (!llvm.ptr, i32) -> i32
    %382 = arith.extui %381 : i32 to i64
    %c65536_i64_204 = arith.constant 65536 : i64
    %383 = arith.muli %382, %c65536_i64_204 : i64
    %384 = arith.cmpi ult, %380, %383 : i64
    cf.cond_br %384, ^bb76, ^bb77
  ^bb75:  // pred: ^bb72
    %c1_i32_205 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_205) : (i32) -> ()
    cf.br ^bb74
  ^bb76:  // 2 preds: ^bb74, ^bb77
    %385 = llvm.getelementptr %13[%379] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %377, %385 {alignment = 1 : i64} : i64, !llvm.ptr
    %386 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_206 = arith.constant 0 : i64
    %c0_i64_207 = arith.constant 0 : i64
    %387 = arith.extui %386 : i32 to i64
    %388 = arith.addi %387, %c0_i64_207 : i64
    %c8_i64_208 = arith.constant 8 : i64
    %389 = arith.addi %388, %c8_i64_208 : i64
    %c0_i32_209 = arith.constant 0 : i32
    %390 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_209) : (!llvm.ptr, i32) -> i32
    %391 = arith.extui %390 : i32 to i64
    %c65536_i64_210 = arith.constant 65536 : i64
    %392 = arith.muli %391, %c65536_i64_210 : i64
    %393 = arith.cmpi ult, %389, %392 : i64
    cf.cond_br %393, ^bb78, ^bb79
  ^bb77:  // pred: ^bb74
    %c1_i32_211 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_211) : (i32) -> ()
    cf.br ^bb76
  ^bb78:  // 2 preds: ^bb76, ^bb79
    %394 = llvm.getelementptr %13[%388] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_206, %394 {alignment = 1 : i64} : i64, !llvm.ptr
    %395 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_212 = arith.constant 0 : i64
    %c0_i64_213 = arith.constant 0 : i64
    %396 = arith.extui %395 : i32 to i64
    %397 = arith.addi %396, %c0_i64_213 : i64
    %c8_i64_214 = arith.constant 8 : i64
    %398 = arith.addi %397, %c8_i64_214 : i64
    %c0_i32_215 = arith.constant 0 : i32
    %399 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_215) : (!llvm.ptr, i32) -> i32
    %400 = arith.extui %399 : i32 to i64
    %c65536_i64_216 = arith.constant 65536 : i64
    %401 = arith.muli %400, %c65536_i64_216 : i64
    %402 = arith.cmpi ult, %398, %401 : i64
    cf.cond_br %402, ^bb80, ^bb81
  ^bb79:  // pred: ^bb76
    %c1_i32_217 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_217) : (i32) -> ()
    cf.br ^bb78
  ^bb80:  // 2 preds: ^bb78, ^bb81
    %403 = llvm.getelementptr %13[%397] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_212, %403 {alignment = 1 : i64} : i64, !llvm.ptr
    %404 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_218 = arith.constant 0 : i64
    %c0_i64_219 = arith.constant 0 : i64
    %405 = arith.extui %404 : i32 to i64
    %406 = arith.addi %405, %c0_i64_219 : i64
    %c8_i64_220 = arith.constant 8 : i64
    %407 = arith.addi %406, %c8_i64_220 : i64
    %c0_i32_221 = arith.constant 0 : i32
    %408 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_221) : (!llvm.ptr, i32) -> i32
    %409 = arith.extui %408 : i32 to i64
    %c65536_i64_222 = arith.constant 65536 : i64
    %410 = arith.muli %409, %c65536_i64_222 : i64
    %411 = arith.cmpi ult, %407, %410 : i64
    cf.cond_br %411, ^bb82, ^bb83
  ^bb81:  // pred: ^bb78
    %c1_i32_223 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_223) : (i32) -> ()
    cf.br ^bb80
  ^bb82:  // 2 preds: ^bb80, ^bb83
    %412 = llvm.getelementptr %13[%406] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_218, %412 {alignment = 1 : i64} : i64, !llvm.ptr
    %413 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_224 = arith.constant 0 : i64
    %c208_i64_225 = arith.constant 208 : i64
    %414 = arith.extui %413 : i32 to i64
    %415 = arith.addi %414, %c208_i64_225 : i64
    %c8_i64_226 = arith.constant 8 : i64
    %416 = arith.addi %415, %c8_i64_226 : i64
    %c0_i32_227 = arith.constant 0 : i32
    %417 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_227) : (!llvm.ptr, i32) -> i32
    %418 = arith.extui %417 : i32 to i64
    %c65536_i64_228 = arith.constant 65536 : i64
    %419 = arith.muli %418, %c65536_i64_228 : i64
    %420 = arith.cmpi ult, %416, %419 : i64
    cf.cond_br %420, ^bb84, ^bb85
  ^bb83:  // pred: ^bb80
    %c1_i32_229 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_229) : (i32) -> ()
    cf.br ^bb82
  ^bb84:  // 2 preds: ^bb82, ^bb85
    %421 = llvm.getelementptr %13[%415] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_224, %421 {alignment = 1 : i64} : i64, !llvm.ptr
    %422 = llvm.load %8 : !llvm.ptr -> i32
    %c20_i32_230 = arith.constant 20 : i32
    %423 = llvm.load %1 : !llvm.ptr -> i32
    %c176_i32_231 = arith.constant 176 : i32
    %424 = arith.addi %423, %c176_i32_231 : i32
    %c20_i32_232 = arith.constant 20 : i32
    %c1049972_i32_233 = arith.constant 1049972 : i32
    call @f114(%arg0, %422, %c20_i32_230, %424, %c20_i32_232, %c1049972_i32_233) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %425 = llvm.load %1 : !llvm.ptr -> i32
    %c88_i32 = arith.constant 88 : i32
    %426 = arith.addi %425, %c88_i32 : i32
    %427 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_234 = arith.constant 0 : i64
    %428 = arith.extui %427 : i32 to i64
    %429 = arith.addi %428, %c0_i64_234 : i64
    %c8_i64_235 = arith.constant 8 : i64
    %430 = arith.addi %429, %c8_i64_235 : i64
    %c0_i32_236 = arith.constant 0 : i32
    %431 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_236) : (!llvm.ptr, i32) -> i32
    %432 = arith.extui %431 : i32 to i64
    %c65536_i64_237 = arith.constant 65536 : i64
    %433 = arith.muli %432, %c65536_i64_237 : i64
    %434 = arith.cmpi ult, %430, %433 : i64
    cf.cond_br %434, ^bb86, ^bb87
  ^bb85:  // pred: ^bb82
    %c1_i32_238 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_238) : (i32) -> ()
    cf.br ^bb84
  ^bb86:  // 2 preds: ^bb84, ^bb87
    %435 = llvm.getelementptr %13[%429] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %436 = llvm.load volatile %435 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_239 = arith.constant 0 : i64
    %437 = arith.extui %426 : i32 to i64
    %438 = arith.addi %437, %c0_i64_239 : i64
    %c8_i64_240 = arith.constant 8 : i64
    %439 = arith.addi %438, %c8_i64_240 : i64
    %c0_i32_241 = arith.constant 0 : i32
    %440 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_241) : (!llvm.ptr, i32) -> i32
    %441 = arith.extui %440 : i32 to i64
    %c65536_i64_242 = arith.constant 65536 : i64
    %442 = arith.muli %441, %c65536_i64_242 : i64
    %443 = arith.cmpi ult, %439, %442 : i64
    cf.cond_br %443, ^bb88, ^bb89
  ^bb87:  // pred: ^bb84
    %c1_i32_243 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_243) : (i32) -> ()
    cf.br ^bb86
  ^bb88:  // 2 preds: ^bb86, ^bb89
    %444 = llvm.getelementptr %13[%438] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %436, %444 {alignment = 1 : i64} : i64, !llvm.ptr
    %445 = llvm.load %1 : !llvm.ptr -> i32
    %c80_i32 = arith.constant 80 : i32
    %446 = arith.addi %445, %c80_i32 : i32
    %447 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_244 = arith.constant 0 : i64
    %448 = arith.extui %447 : i32 to i64
    %449 = arith.addi %448, %c0_i64_244 : i64
    %c8_i64_245 = arith.constant 8 : i64
    %450 = arith.addi %449, %c8_i64_245 : i64
    %c0_i32_246 = arith.constant 0 : i32
    %451 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_246) : (!llvm.ptr, i32) -> i32
    %452 = arith.extui %451 : i32 to i64
    %c65536_i64_247 = arith.constant 65536 : i64
    %453 = arith.muli %452, %c65536_i64_247 : i64
    %454 = arith.cmpi ult, %450, %453 : i64
    cf.cond_br %454, ^bb90, ^bb91
  ^bb89:  // pred: ^bb86
    %c1_i32_248 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_248) : (i32) -> ()
    cf.br ^bb88
  ^bb90:  // 2 preds: ^bb88, ^bb91
    %455 = llvm.getelementptr %13[%449] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %456 = llvm.load volatile %455 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_249 = arith.constant 0 : i64
    %457 = arith.extui %446 : i32 to i64
    %458 = arith.addi %457, %c0_i64_249 : i64
    %c8_i64_250 = arith.constant 8 : i64
    %459 = arith.addi %458, %c8_i64_250 : i64
    %c0_i32_251 = arith.constant 0 : i32
    %460 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_251) : (!llvm.ptr, i32) -> i32
    %461 = arith.extui %460 : i32 to i64
    %c65536_i64_252 = arith.constant 65536 : i64
    %462 = arith.muli %461, %c65536_i64_252 : i64
    %463 = arith.cmpi ult, %459, %462 : i64
    cf.cond_br %463, ^bb92, ^bb93
  ^bb91:  // pred: ^bb88
    %c1_i32_253 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_253) : (i32) -> ()
    cf.br ^bb90
  ^bb92:  // 2 preds: ^bb90, ^bb93
    %464 = llvm.getelementptr %13[%458] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %456, %464 {alignment = 1 : i64} : i64, !llvm.ptr
    %465 = llvm.load %1 : !llvm.ptr -> i32
    %c72_i32 = arith.constant 72 : i32
    %466 = arith.addi %465, %c72_i32 : i32
    %467 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_254 = arith.constant 0 : i64
    %468 = arith.extui %467 : i32 to i64
    %469 = arith.addi %468, %c0_i64_254 : i64
    %c8_i64_255 = arith.constant 8 : i64
    %470 = arith.addi %469, %c8_i64_255 : i64
    %c0_i32_256 = arith.constant 0 : i32
    %471 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_256) : (!llvm.ptr, i32) -> i32
    %472 = arith.extui %471 : i32 to i64
    %c65536_i64_257 = arith.constant 65536 : i64
    %473 = arith.muli %472, %c65536_i64_257 : i64
    %474 = arith.cmpi ult, %470, %473 : i64
    cf.cond_br %474, ^bb94, ^bb95
  ^bb93:  // pred: ^bb90
    %c1_i32_258 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_258) : (i32) -> ()
    cf.br ^bb92
  ^bb94:  // 2 preds: ^bb92, ^bb95
    %475 = llvm.getelementptr %13[%469] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %476 = llvm.load volatile %475 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_259 = arith.constant 0 : i64
    %477 = arith.extui %466 : i32 to i64
    %478 = arith.addi %477, %c0_i64_259 : i64
    %c8_i64_260 = arith.constant 8 : i64
    %479 = arith.addi %478, %c8_i64_260 : i64
    %c0_i32_261 = arith.constant 0 : i32
    %480 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_261) : (!llvm.ptr, i32) -> i32
    %481 = arith.extui %480 : i32 to i64
    %c65536_i64_262 = arith.constant 65536 : i64
    %482 = arith.muli %481, %c65536_i64_262 : i64
    %483 = arith.cmpi ult, %479, %482 : i64
    cf.cond_br %483, ^bb96, ^bb97
  ^bb95:  // pred: ^bb92
    %c1_i32_263 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_263) : (i32) -> ()
    cf.br ^bb94
  ^bb96:  // 2 preds: ^bb94, ^bb97
    %484 = llvm.getelementptr %13[%478] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %476, %484 {alignment = 1 : i64} : i64, !llvm.ptr
    %485 = llvm.load %1 : !llvm.ptr -> i32
    %486 = llvm.load %1 : !llvm.ptr -> i32
    %c208_i64_264 = arith.constant 208 : i64
    %487 = arith.extui %486 : i32 to i64
    %488 = arith.addi %487, %c208_i64_264 : i64
    %c8_i64_265 = arith.constant 8 : i64
    %489 = arith.addi %488, %c8_i64_265 : i64
    %c0_i32_266 = arith.constant 0 : i32
    %490 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_266) : (!llvm.ptr, i32) -> i32
    %491 = arith.extui %490 : i32 to i64
    %c65536_i64_267 = arith.constant 65536 : i64
    %492 = arith.muli %491, %c65536_i64_267 : i64
    %493 = arith.cmpi ult, %489, %492 : i64
    cf.cond_br %493, ^bb98, ^bb99
  ^bb97:  // pred: ^bb94
    %c1_i32_268 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_268) : (i32) -> ()
    cf.br ^bb96
  ^bb98:  // 2 preds: ^bb96, ^bb99
    %494 = llvm.getelementptr %13[%488] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %495 = llvm.load volatile %494 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c64_i64 = arith.constant 64 : i64
    %496 = arith.extui %485 : i32 to i64
    %497 = arith.addi %496, %c64_i64 : i64
    %c8_i64_269 = arith.constant 8 : i64
    %498 = arith.addi %497, %c8_i64_269 : i64
    %c0_i32_270 = arith.constant 0 : i32
    %499 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_270) : (!llvm.ptr, i32) -> i32
    %500 = arith.extui %499 : i32 to i64
    %c65536_i64_271 = arith.constant 65536 : i64
    %501 = arith.muli %500, %c65536_i64_271 : i64
    %502 = arith.cmpi ult, %498, %501 : i64
    cf.cond_br %502, ^bb100, ^bb101
  ^bb99:  // pred: ^bb96
    %c1_i32_272 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_272) : (i32) -> ()
    cf.br ^bb98
  ^bb100:  // 2 preds: ^bb98, ^bb101
    %503 = llvm.getelementptr %13[%497] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %495, %503 {alignment = 1 : i64} : i64, !llvm.ptr
    %504 = llvm.load %1 : !llvm.ptr -> i32
    %c208_i32_273 = arith.constant 208 : i32
    %505 = arith.addi %504, %c208_i32_273 : i32
    %c96_i32 = arith.constant 96 : i32
    %c0_i32_274 = arith.constant 0 : i32
    %c1_i32_275 = arith.constant 1 : i32
    %c1_i32_276 = arith.constant 1 : i32
    call @f111(%arg0, %505, %c96_i32, %c0_i32_274, %c1_i32_275, %c1_i32_276) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %506 = llvm.load %1 : !llvm.ptr -> i32
    %c212_i64 = arith.constant 212 : i64
    %507 = arith.extui %506 : i32 to i64
    %508 = arith.addi %507, %c212_i64 : i64
    %c4_i64_277 = arith.constant 4 : i64
    %509 = arith.addi %508, %c4_i64_277 : i64
    %c0_i32_278 = arith.constant 0 : i32
    %510 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_278) : (!llvm.ptr, i32) -> i32
    %511 = arith.extui %510 : i32 to i64
    %c65536_i64_279 = arith.constant 65536 : i64
    %512 = arith.muli %511, %c65536_i64_279 : i64
    %513 = arith.cmpi ult, %509, %512 : i64
    cf.cond_br %513, ^bb102, ^bb103
  ^bb101:  // pred: ^bb98
    %c1_i32_280 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_280) : (i32) -> ()
    cf.br ^bb100
  ^bb102:  // 2 preds: ^bb100, ^bb103
    %514 = llvm.getelementptr %13[%508] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %515 = llvm.load volatile %514 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %515, %2 : i32, !llvm.ptr
    %516 = llvm.load %1 : !llvm.ptr -> i32
    %c208_i64_281 = arith.constant 208 : i64
    %517 = arith.extui %516 : i32 to i64
    %518 = arith.addi %517, %c208_i64_281 : i64
    %c4_i64_282 = arith.constant 4 : i64
    %519 = arith.addi %518, %c4_i64_282 : i64
    %c0_i32_283 = arith.constant 0 : i32
    %520 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_283) : (!llvm.ptr, i32) -> i32
    %521 = arith.extui %520 : i32 to i64
    %c65536_i64_284 = arith.constant 65536 : i64
    %522 = arith.muli %521, %c65536_i64_284 : i64
    %523 = arith.cmpi ult, %519, %522 : i64
    cf.cond_br %523, ^bb105, ^bb106
  ^bb103:  // pred: ^bb100
    %c1_i32_285 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_285) : (i32) -> ()
    cf.br ^bb102
  ^bb104:  // pred: ^bb105
    %524 = llvm.load %2 : !llvm.ptr -> i32
    %525 = llvm.load %1 : !llvm.ptr -> i32
    %c216_i64 = arith.constant 216 : i64
    %526 = arith.extui %525 : i32 to i64
    %527 = arith.addi %526, %c216_i64 : i64
    %c4_i64_286 = arith.constant 4 : i64
    %528 = arith.addi %527, %c4_i64_286 : i64
    %c0_i32_287 = arith.constant 0 : i32
    %529 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_287) : (!llvm.ptr, i32) -> i32
    %530 = arith.extui %529 : i32 to i64
    %c65536_i64_288 = arith.constant 65536 : i64
    %531 = arith.muli %530, %c65536_i64_288 : i64
    %532 = arith.cmpi ult, %528, %531 : i64
    cf.cond_br %532, ^bb204, ^bb205
  ^bb105:  // 2 preds: ^bb102, ^bb106
    %533 = llvm.getelementptr %13[%518] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %534 = llvm.load volatile %533 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_289 = arith.constant 1 : i32
    %535 = arith.cmpi eq, %534, %c1_i32_289 : i32
    %536 = arith.extui %535 : i1 to i32
    %c0_i32_290 = arith.constant 0 : i32
    %537 = arith.cmpi ne, %536, %c0_i32_290 : i32
    cf.cond_br %537, ^bb104, ^bb107
  ^bb106:  // pred: ^bb102
    %c1_i32_291 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_291) : (i32) -> ()
    cf.br ^bb105
  ^bb107:  // pred: ^bb105
    %538 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_292 = arith.constant 0 : i32
    %c140_i64 = arith.constant 140 : i64
    %539 = arith.extui %538 : i32 to i64
    %540 = arith.addi %539, %c140_i64 : i64
    %c4_i64_293 = arith.constant 4 : i64
    %541 = arith.addi %540, %c4_i64_293 : i64
    %c0_i32_294 = arith.constant 0 : i32
    %542 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_294) : (!llvm.ptr, i32) -> i32
    %543 = arith.extui %542 : i32 to i64
    %c65536_i64_295 = arith.constant 65536 : i64
    %544 = arith.muli %543, %c65536_i64_295 : i64
    %545 = arith.cmpi ult, %541, %544 : i64
    cf.cond_br %545, ^bb108, ^bb109
  ^bb108:  // 2 preds: ^bb107, ^bb109
    %546 = llvm.getelementptr %13[%540] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_292, %546 {alignment = 1 : i64} : i32, !llvm.ptr
    %547 = llvm.load %1 : !llvm.ptr -> i32
    %548 = llvm.load %1 : !llvm.ptr -> i32
    %c216_i64_296 = arith.constant 216 : i64
    %549 = arith.extui %548 : i32 to i64
    %550 = arith.addi %549, %c216_i64_296 : i64
    %c4_i64_297 = arith.constant 4 : i64
    %551 = arith.addi %550, %c4_i64_297 : i64
    %c0_i32_298 = arith.constant 0 : i32
    %552 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_298) : (!llvm.ptr, i32) -> i32
    %553 = arith.extui %552 : i32 to i64
    %c65536_i64_299 = arith.constant 65536 : i64
    %554 = arith.muli %553, %c65536_i64_299 : i64
    %555 = arith.cmpi ult, %551, %554 : i64
    cf.cond_br %555, ^bb110, ^bb111
  ^bb109:  // pred: ^bb107
    %c1_i32_300 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_300) : (i32) -> ()
    cf.br ^bb108
  ^bb110:  // 2 preds: ^bb108, ^bb111
    %556 = llvm.getelementptr %13[%550] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %557 = llvm.load volatile %556 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c136_i64 = arith.constant 136 : i64
    %558 = arith.extui %547 : i32 to i64
    %559 = arith.addi %558, %c136_i64 : i64
    %c4_i64_301 = arith.constant 4 : i64
    %560 = arith.addi %559, %c4_i64_301 : i64
    %c0_i32_302 = arith.constant 0 : i32
    %561 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_302) : (!llvm.ptr, i32) -> i32
    %562 = arith.extui %561 : i32 to i64
    %c65536_i64_303 = arith.constant 65536 : i64
    %563 = arith.muli %562, %c65536_i64_303 : i64
    %564 = arith.cmpi ult, %560, %563 : i64
    cf.cond_br %564, ^bb112, ^bb113
  ^bb111:  // pred: ^bb108
    %c1_i32_304 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_304) : (i32) -> ()
    cf.br ^bb110
  ^bb112:  // 2 preds: ^bb110, ^bb113
    %565 = llvm.getelementptr %13[%559] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %557, %565 {alignment = 1 : i64} : i32, !llvm.ptr
    %566 = llvm.load %1 : !llvm.ptr -> i32
    %567 = llvm.load %2 : !llvm.ptr -> i32
    %c132_i64 = arith.constant 132 : i64
    %568 = arith.extui %566 : i32 to i64
    %569 = arith.addi %568, %c132_i64 : i64
    %c4_i64_305 = arith.constant 4 : i64
    %570 = arith.addi %569, %c4_i64_305 : i64
    %c0_i32_306 = arith.constant 0 : i32
    %571 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_306) : (!llvm.ptr, i32) -> i32
    %572 = arith.extui %571 : i32 to i64
    %c65536_i64_307 = arith.constant 65536 : i64
    %573 = arith.muli %572, %c65536_i64_307 : i64
    %574 = arith.cmpi ult, %570, %573 : i64
    cf.cond_br %574, ^bb114, ^bb115
  ^bb113:  // pred: ^bb110
    %c1_i32_308 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_308) : (i32) -> ()
    cf.br ^bb112
  ^bb114:  // 2 preds: ^bb112, ^bb115
    %575 = llvm.getelementptr %13[%569] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %567, %575 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb117
  ^bb115:  // pred: ^bb112
    %c1_i32_309 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_309) : (i32) -> ()
    cf.br ^bb114
  ^bb116:  // pred: ^bb118
    %576 = llvm.load %1 : !llvm.ptr -> i32
    %c132_i32 = arith.constant 132 : i32
    %577 = arith.addi %576, %c132_i32 : i32
    %c32_i32_310 = arith.constant 32 : i32
    call @f106(%arg0, %577, %c32_i32_310) : (!llvm.ptr, i32, i32) -> ()
    %578 = llvm.load %1 : !llvm.ptr -> i32
    %c144_i32 = arith.constant 144 : i32
    %579 = arith.addi %578, %c144_i32 : i32
    %c24_i32_311 = arith.constant 24 : i32
    %580 = arith.addi %579, %c24_i32_311 : i32
    %c0_i64_312 = arith.constant 0 : i64
    %c0_i64_313 = arith.constant 0 : i64
    %581 = arith.extui %580 : i32 to i64
    %582 = arith.addi %581, %c0_i64_313 : i64
    %c8_i64_314 = arith.constant 8 : i64
    %583 = arith.addi %582, %c8_i64_314 : i64
    %c0_i32_315 = arith.constant 0 : i32
    %584 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_315) : (!llvm.ptr, i32) -> i32
    %585 = arith.extui %584 : i32 to i64
    %c65536_i64_316 = arith.constant 65536 : i64
    %586 = arith.muli %585, %c65536_i64_316 : i64
    %587 = arith.cmpi ult, %583, %586 : i64
    cf.cond_br %587, ^bb119, ^bb120
  ^bb117:  // 2 preds: ^bb114, ^bb117
    %588 = llvm.load %1 : !llvm.ptr -> i32
    %c132_i32_317 = arith.constant 132 : i32
    %589 = arith.addi %588, %c132_i32_317 : i32
    %590 = llvm.load %1 : !llvm.ptr -> i32
    %591 = llvm.load %3 : !llvm.ptr -> i32
    %592 = arith.addi %590, %591 : i32
    %c32_i32_318 = arith.constant 32 : i32
    call @f105(%arg0, %589, %592, %c32_i32_318) : (!llvm.ptr, i32, i32, i32) -> ()
    %593 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_319 = arith.constant 32 : i32
    %594 = arith.addi %593, %c32_i32_319 : i32
    llvm.store %594, %3 : i32, !llvm.ptr
    %c96_i32_320 = arith.constant 96 : i32
    %595 = arith.cmpi eq, %594, %c96_i32_320 : i32
    %596 = arith.extui %595 : i1 to i32
    %c0_i32_321 = arith.constant 0 : i32
    %597 = arith.cmpi eq, %596, %c0_i32_321 : i32
    %598 = arith.extui %597 : i1 to i32
    %c0_i32_322 = arith.constant 0 : i32
    %599 = arith.cmpi ne, %598, %c0_i32_322 : i32
    cf.cond_br %599, ^bb117, ^bb118
  ^bb118:  // pred: ^bb117
    cf.br ^bb116
  ^bb119:  // 2 preds: ^bb116, ^bb120
    %600 = llvm.getelementptr %13[%582] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_312, %600 {alignment = 1 : i64} : i64, !llvm.ptr
    %601 = llvm.load %1 : !llvm.ptr -> i32
    %c144_i32_323 = arith.constant 144 : i32
    %602 = arith.addi %601, %c144_i32_323 : i32
    %c16_i32_324 = arith.constant 16 : i32
    %603 = arith.addi %602, %c16_i32_324 : i32
    %c0_i64_325 = arith.constant 0 : i64
    %c0_i64_326 = arith.constant 0 : i64
    %604 = arith.extui %603 : i32 to i64
    %605 = arith.addi %604, %c0_i64_326 : i64
    %c8_i64_327 = arith.constant 8 : i64
    %606 = arith.addi %605, %c8_i64_327 : i64
    %c0_i32_328 = arith.constant 0 : i32
    %607 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_328) : (!llvm.ptr, i32) -> i32
    %608 = arith.extui %607 : i32 to i64
    %c65536_i64_329 = arith.constant 65536 : i64
    %609 = arith.muli %608, %c65536_i64_329 : i64
    %610 = arith.cmpi ult, %606, %609 : i64
    cf.cond_br %610, ^bb121, ^bb122
  ^bb120:  // pred: ^bb116
    %c1_i32_330 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_330) : (i32) -> ()
    cf.br ^bb119
  ^bb121:  // 2 preds: ^bb119, ^bb122
    %611 = llvm.getelementptr %13[%605] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_325, %611 {alignment = 1 : i64} : i64, !llvm.ptr
    %612 = llvm.load %1 : !llvm.ptr -> i32
    %c144_i32_331 = arith.constant 144 : i32
    %613 = arith.addi %612, %c144_i32_331 : i32
    %c8_i32_332 = arith.constant 8 : i32
    %614 = arith.addi %613, %c8_i32_332 : i32
    %c0_i64_333 = arith.constant 0 : i64
    %c0_i64_334 = arith.constant 0 : i64
    %615 = arith.extui %614 : i32 to i64
    %616 = arith.addi %615, %c0_i64_334 : i64
    %c8_i64_335 = arith.constant 8 : i64
    %617 = arith.addi %616, %c8_i64_335 : i64
    %c0_i32_336 = arith.constant 0 : i32
    %618 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_336) : (!llvm.ptr, i32) -> i32
    %619 = arith.extui %618 : i32 to i64
    %c65536_i64_337 = arith.constant 65536 : i64
    %620 = arith.muli %619, %c65536_i64_337 : i64
    %621 = arith.cmpi ult, %617, %620 : i64
    cf.cond_br %621, ^bb123, ^bb124
  ^bb122:  // pred: ^bb119
    %c1_i32_338 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_338) : (i32) -> ()
    cf.br ^bb121
  ^bb123:  // 2 preds: ^bb121, ^bb124
    %622 = llvm.getelementptr %13[%616] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_333, %622 {alignment = 1 : i64} : i64, !llvm.ptr
    %623 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_339 = arith.constant 0 : i64
    %c144_i64 = arith.constant 144 : i64
    %624 = arith.extui %623 : i32 to i64
    %625 = arith.addi %624, %c144_i64 : i64
    %c8_i64_340 = arith.constant 8 : i64
    %626 = arith.addi %625, %c8_i64_340 : i64
    %c0_i32_341 = arith.constant 0 : i32
    %627 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_341) : (!llvm.ptr, i32) -> i32
    %628 = arith.extui %627 : i32 to i64
    %c65536_i64_342 = arith.constant 65536 : i64
    %629 = arith.muli %628, %c65536_i64_342 : i64
    %630 = arith.cmpi ult, %626, %629 : i64
    cf.cond_br %630, ^bb125, ^bb126
  ^bb124:  // pred: ^bb121
    %c1_i32_343 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_343) : (i32) -> ()
    cf.br ^bb123
  ^bb125:  // 2 preds: ^bb123, ^bb126
    %631 = llvm.getelementptr %13[%625] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_339, %631 {alignment = 1 : i64} : i64, !llvm.ptr
    %632 = llvm.load %1 : !llvm.ptr -> i32
    %c208_i32_344 = arith.constant 208 : i32
    %633 = arith.addi %632, %c208_i32_344 : i32
    %c24_i32_345 = arith.constant 24 : i32
    %634 = arith.addi %633, %c24_i32_345 : i32
    %635 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32_346 = arith.constant 24 : i32
    %636 = arith.addi %635, %c24_i32_346 : i32
    %c0_i64_347 = arith.constant 0 : i64
    %637 = arith.extui %636 : i32 to i64
    %638 = arith.addi %637, %c0_i64_347 : i64
    %c8_i64_348 = arith.constant 8 : i64
    %639 = arith.addi %638, %c8_i64_348 : i64
    %c0_i32_349 = arith.constant 0 : i32
    %640 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_349) : (!llvm.ptr, i32) -> i32
    %641 = arith.extui %640 : i32 to i64
    %c65536_i64_350 = arith.constant 65536 : i64
    %642 = arith.muli %641, %c65536_i64_350 : i64
    %643 = arith.cmpi ult, %639, %642 : i64
    cf.cond_br %643, ^bb127, ^bb128
  ^bb126:  // pred: ^bb123
    %c1_i32_351 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_351) : (i32) -> ()
    cf.br ^bb125
  ^bb127:  // 2 preds: ^bb125, ^bb128
    %644 = llvm.getelementptr %13[%638] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %645 = llvm.load volatile %644 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_352 = arith.constant 0 : i64
    %646 = arith.extui %634 : i32 to i64
    %647 = arith.addi %646, %c0_i64_352 : i64
    %c8_i64_353 = arith.constant 8 : i64
    %648 = arith.addi %647, %c8_i64_353 : i64
    %c0_i32_354 = arith.constant 0 : i32
    %649 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_354) : (!llvm.ptr, i32) -> i32
    %650 = arith.extui %649 : i32 to i64
    %c65536_i64_355 = arith.constant 65536 : i64
    %651 = arith.muli %650, %c65536_i64_355 : i64
    %652 = arith.cmpi ult, %648, %651 : i64
    cf.cond_br %652, ^bb129, ^bb130
  ^bb128:  // pred: ^bb125
    %c1_i32_356 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_356) : (i32) -> ()
    cf.br ^bb127
  ^bb129:  // 2 preds: ^bb127, ^bb130
    %653 = llvm.getelementptr %13[%647] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %645, %653 {alignment = 1 : i64} : i64, !llvm.ptr
    %654 = llvm.load %1 : !llvm.ptr -> i32
    %c208_i32_357 = arith.constant 208 : i32
    %655 = arith.addi %654, %c208_i32_357 : i32
    %c16_i32_358 = arith.constant 16 : i32
    %656 = arith.addi %655, %c16_i32_358 : i32
    %657 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_359 = arith.constant 16 : i32
    %658 = arith.addi %657, %c16_i32_359 : i32
    %c0_i64_360 = arith.constant 0 : i64
    %659 = arith.extui %658 : i32 to i64
    %660 = arith.addi %659, %c0_i64_360 : i64
    %c8_i64_361 = arith.constant 8 : i64
    %661 = arith.addi %660, %c8_i64_361 : i64
    %c0_i32_362 = arith.constant 0 : i32
    %662 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_362) : (!llvm.ptr, i32) -> i32
    %663 = arith.extui %662 : i32 to i64
    %c65536_i64_363 = arith.constant 65536 : i64
    %664 = arith.muli %663, %c65536_i64_363 : i64
    %665 = arith.cmpi ult, %661, %664 : i64
    cf.cond_br %665, ^bb131, ^bb132
  ^bb130:  // pred: ^bb127
    %c1_i32_364 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_364) : (i32) -> ()
    cf.br ^bb129
  ^bb131:  // 2 preds: ^bb129, ^bb132
    %666 = llvm.getelementptr %13[%660] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %667 = llvm.load volatile %666 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_365 = arith.constant 0 : i64
    %668 = arith.extui %656 : i32 to i64
    %669 = arith.addi %668, %c0_i64_365 : i64
    %c8_i64_366 = arith.constant 8 : i64
    %670 = arith.addi %669, %c8_i64_366 : i64
    %c0_i32_367 = arith.constant 0 : i32
    %671 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_367) : (!llvm.ptr, i32) -> i32
    %672 = arith.extui %671 : i32 to i64
    %c65536_i64_368 = arith.constant 65536 : i64
    %673 = arith.muli %672, %c65536_i64_368 : i64
    %674 = arith.cmpi ult, %670, %673 : i64
    cf.cond_br %674, ^bb133, ^bb134
  ^bb132:  // pred: ^bb129
    %c1_i32_369 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_369) : (i32) -> ()
    cf.br ^bb131
  ^bb133:  // 2 preds: ^bb131, ^bb134
    %675 = llvm.getelementptr %13[%669] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %667, %675 {alignment = 1 : i64} : i64, !llvm.ptr
    %676 = llvm.load %1 : !llvm.ptr -> i32
    %c208_i32_370 = arith.constant 208 : i32
    %677 = arith.addi %676, %c208_i32_370 : i32
    %c8_i32_371 = arith.constant 8 : i32
    %678 = arith.addi %677, %c8_i32_371 : i32
    %679 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_372 = arith.constant 8 : i32
    %680 = arith.addi %679, %c8_i32_372 : i32
    %c0_i64_373 = arith.constant 0 : i64
    %681 = arith.extui %680 : i32 to i64
    %682 = arith.addi %681, %c0_i64_373 : i64
    %c8_i64_374 = arith.constant 8 : i64
    %683 = arith.addi %682, %c8_i64_374 : i64
    %c0_i32_375 = arith.constant 0 : i32
    %684 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_375) : (!llvm.ptr, i32) -> i32
    %685 = arith.extui %684 : i32 to i64
    %c65536_i64_376 = arith.constant 65536 : i64
    %686 = arith.muli %685, %c65536_i64_376 : i64
    %687 = arith.cmpi ult, %683, %686 : i64
    cf.cond_br %687, ^bb135, ^bb136
  ^bb134:  // pred: ^bb131
    %c1_i32_377 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_377) : (i32) -> ()
    cf.br ^bb133
  ^bb135:  // 2 preds: ^bb133, ^bb136
    %688 = llvm.getelementptr %13[%682] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %689 = llvm.load volatile %688 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_378 = arith.constant 0 : i64
    %690 = arith.extui %678 : i32 to i64
    %691 = arith.addi %690, %c0_i64_378 : i64
    %c8_i64_379 = arith.constant 8 : i64
    %692 = arith.addi %691, %c8_i64_379 : i64
    %c0_i32_380 = arith.constant 0 : i32
    %693 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_380) : (!llvm.ptr, i32) -> i32
    %694 = arith.extui %693 : i32 to i64
    %c65536_i64_381 = arith.constant 65536 : i64
    %695 = arith.muli %694, %c65536_i64_381 : i64
    %696 = arith.cmpi ult, %692, %695 : i64
    cf.cond_br %696, ^bb137, ^bb138
  ^bb136:  // pred: ^bb133
    %c1_i32_382 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_382) : (i32) -> ()
    cf.br ^bb135
  ^bb137:  // 2 preds: ^bb135, ^bb138
    %697 = llvm.getelementptr %13[%691] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %689, %697 {alignment = 1 : i64} : i64, !llvm.ptr
    %698 = llvm.load %1 : !llvm.ptr -> i32
    %699 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_383 = arith.constant 0 : i64
    %700 = arith.extui %699 : i32 to i64
    %701 = arith.addi %700, %c0_i64_383 : i64
    %c8_i64_384 = arith.constant 8 : i64
    %702 = arith.addi %701, %c8_i64_384 : i64
    %c0_i32_385 = arith.constant 0 : i32
    %703 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_385) : (!llvm.ptr, i32) -> i32
    %704 = arith.extui %703 : i32 to i64
    %c65536_i64_386 = arith.constant 65536 : i64
    %705 = arith.muli %704, %c65536_i64_386 : i64
    %706 = arith.cmpi ult, %702, %705 : i64
    cf.cond_br %706, ^bb139, ^bb140
  ^bb138:  // pred: ^bb135
    %c1_i32_387 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_387) : (i32) -> ()
    cf.br ^bb137
  ^bb139:  // 2 preds: ^bb137, ^bb140
    %707 = llvm.getelementptr %13[%701] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %708 = llvm.load volatile %707 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c208_i64_388 = arith.constant 208 : i64
    %709 = arith.extui %698 : i32 to i64
    %710 = arith.addi %709, %c208_i64_388 : i64
    %c8_i64_389 = arith.constant 8 : i64
    %711 = arith.addi %710, %c8_i64_389 : i64
    %c0_i32_390 = arith.constant 0 : i32
    %712 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_390) : (!llvm.ptr, i32) -> i32
    %713 = arith.extui %712 : i32 to i64
    %c65536_i64_391 = arith.constant 65536 : i64
    %714 = arith.muli %713, %c65536_i64_391 : i64
    %715 = arith.cmpi ult, %711, %714 : i64
    cf.cond_br %715, ^bb141, ^bb142
  ^bb140:  // pred: ^bb137
    %c1_i32_392 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_392) : (i32) -> ()
    cf.br ^bb139
  ^bb141:  // 2 preds: ^bb139, ^bb142
    %716 = llvm.getelementptr %13[%710] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %708, %716 {alignment = 1 : i64} : i64, !llvm.ptr
    %717 = llvm.load %1 : !llvm.ptr -> i32
    %c239_i32 = arith.constant 239 : i32
    %718 = arith.addi %717, %c239_i32 : i32
    llvm.store %718, %3 : i32, !llvm.ptr
    %c0_i32_393 = arith.constant 0 : i32
    llvm.store %c0_i32_393, %2 : i32, !llvm.ptr
    cf.br ^bb144
  ^bb142:  // pred: ^bb139
    %c1_i32_394 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_394) : (i32) -> ()
    cf.br ^bb141
  ^bb143:  // pred: ^bb153
    %719 = llvm.load %1 : !llvm.ptr -> i32
    %c176_i32_395 = arith.constant 176 : i32
    %720 = arith.addi %719, %c176_i32_395 : i32
    %c24_i32_396 = arith.constant 24 : i32
    %721 = arith.addi %720, %c24_i32_396 : i32
    %722 = llvm.load %1 : !llvm.ptr -> i32
    %c208_i32_397 = arith.constant 208 : i32
    %723 = arith.addi %722, %c208_i32_397 : i32
    %c24_i32_398 = arith.constant 24 : i32
    %724 = arith.addi %723, %c24_i32_398 : i32
    llvm.store %724, %3 : i32, !llvm.ptr
    %c0_i64_399 = arith.constant 0 : i64
    %725 = arith.extui %724 : i32 to i64
    %726 = arith.addi %725, %c0_i64_399 : i64
    %c8_i64_400 = arith.constant 8 : i64
    %727 = arith.addi %726, %c8_i64_400 : i64
    %c0_i32_401 = arith.constant 0 : i32
    %728 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_401) : (!llvm.ptr, i32) -> i32
    %729 = arith.extui %728 : i32 to i64
    %c65536_i64_402 = arith.constant 65536 : i64
    %730 = arith.muli %729, %c65536_i64_402 : i64
    %731 = arith.cmpi ult, %727, %730 : i64
    cf.cond_br %731, ^bb154, ^bb155
  ^bb144:  // 2 preds: ^bb141, ^bb151
    %732 = llvm.load %1 : !llvm.ptr -> i32
    %c208_i32_403 = arith.constant 208 : i32
    %733 = arith.addi %732, %c208_i32_403 : i32
    %734 = llvm.load %2 : !llvm.ptr -> i32
    %735 = arith.addi %733, %734 : i32
    llvm.store %735, %0 : i32, !llvm.ptr
    %c0_i64_404 = arith.constant 0 : i64
    %736 = arith.extui %735 : i32 to i64
    %737 = arith.addi %736, %c0_i64_404 : i64
    %c1_i64 = arith.constant 1 : i64
    %738 = arith.addi %737, %c1_i64 : i64
    %c0_i32_405 = arith.constant 0 : i32
    %739 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_405) : (!llvm.ptr, i32) -> i32
    %740 = arith.extui %739 : i32 to i64
    %c65536_i64_406 = arith.constant 65536 : i64
    %741 = arith.muli %740, %c65536_i64_406 : i64
    %742 = arith.cmpi ult, %738, %741 : i64
    cf.cond_br %742, ^bb145, ^bb146
  ^bb145:  // 2 preds: ^bb144, ^bb146
    %743 = llvm.getelementptr %13[%737] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %744 = llvm.load volatile %743 {alignment = 1 : i64} : !llvm.ptr -> i8
    %745 = arith.extui %744 : i8 to i32
    llvm.store %745, %6 : i32, !llvm.ptr
    %746 = llvm.load %0 : !llvm.ptr -> i32
    %747 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_407 = arith.constant 0 : i64
    %748 = arith.extui %747 : i32 to i64
    %749 = arith.addi %748, %c0_i64_407 : i64
    %c1_i64_408 = arith.constant 1 : i64
    %750 = arith.addi %749, %c1_i64_408 : i64
    %c0_i32_409 = arith.constant 0 : i32
    %751 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_409) : (!llvm.ptr, i32) -> i32
    %752 = arith.extui %751 : i32 to i64
    %c65536_i64_410 = arith.constant 65536 : i64
    %753 = arith.muli %752, %c65536_i64_410 : i64
    %754 = arith.cmpi ult, %750, %753 : i64
    cf.cond_br %754, ^bb147, ^bb148
  ^bb146:  // pred: ^bb144
    %c1_i32_411 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_411) : (i32) -> ()
    cf.br ^bb145
  ^bb147:  // 2 preds: ^bb145, ^bb148
    %755 = llvm.getelementptr %13[%749] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %756 = llvm.load volatile %755 {alignment = 1 : i64} : !llvm.ptr -> i8
    %757 = arith.extui %756 : i8 to i32
    %c0_i64_412 = arith.constant 0 : i64
    %758 = arith.extui %746 : i32 to i64
    %759 = arith.addi %758, %c0_i64_412 : i64
    %c1_i64_413 = arith.constant 1 : i64
    %760 = arith.addi %759, %c1_i64_413 : i64
    %c0_i32_414 = arith.constant 0 : i32
    %761 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_414) : (!llvm.ptr, i32) -> i32
    %762 = arith.extui %761 : i32 to i64
    %c65536_i64_415 = arith.constant 65536 : i64
    %763 = arith.muli %762, %c65536_i64_415 : i64
    %764 = arith.cmpi ult, %760, %763 : i64
    cf.cond_br %764, ^bb149, ^bb150
  ^bb148:  // pred: ^bb145
    %c1_i32_416 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_416) : (i32) -> ()
    cf.br ^bb147
  ^bb149:  // 2 preds: ^bb147, ^bb150
    %765 = llvm.getelementptr %13[%759] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %766 = arith.trunci %757 : i32 to i8
    llvm.store volatile %766, %765 {alignment = 1 : i64} : i8, !llvm.ptr
    %767 = llvm.load %3 : !llvm.ptr -> i32
    %768 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_417 = arith.constant 0 : i64
    %769 = arith.extui %767 : i32 to i64
    %770 = arith.addi %769, %c0_i64_417 : i64
    %c1_i64_418 = arith.constant 1 : i64
    %771 = arith.addi %770, %c1_i64_418 : i64
    %c0_i32_419 = arith.constant 0 : i32
    %772 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_419) : (!llvm.ptr, i32) -> i32
    %773 = arith.extui %772 : i32 to i64
    %c65536_i64_420 = arith.constant 65536 : i64
    %774 = arith.muli %773, %c65536_i64_420 : i64
    %775 = arith.cmpi ult, %771, %774 : i64
    cf.cond_br %775, ^bb151, ^bb152
  ^bb150:  // pred: ^bb147
    %c1_i32_421 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_421) : (i32) -> ()
    cf.br ^bb149
  ^bb151:  // 2 preds: ^bb149, ^bb152
    %776 = llvm.getelementptr %13[%770] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %777 = arith.trunci %768 : i32 to i8
    llvm.store volatile %777, %776 {alignment = 1 : i64} : i8, !llvm.ptr
    %778 = llvm.load %3 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %779 = arith.addi %778, %c-1_i32 : i32
    llvm.store %779, %3 : i32, !llvm.ptr
    %780 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_422 = arith.constant 1 : i32
    %781 = arith.addi %780, %c1_i32_422 : i32
    llvm.store %781, %2 : i32, !llvm.ptr
    %c16_i32_423 = arith.constant 16 : i32
    %782 = arith.cmpi eq, %781, %c16_i32_423 : i32
    %783 = arith.extui %782 : i1 to i32
    %c0_i32_424 = arith.constant 0 : i32
    %784 = arith.cmpi eq, %783, %c0_i32_424 : i32
    %785 = arith.extui %784 : i1 to i32
    %c0_i32_425 = arith.constant 0 : i32
    %786 = arith.cmpi ne, %785, %c0_i32_425 : i32
    cf.cond_br %786, ^bb144, ^bb153
  ^bb152:  // pred: ^bb149
    %c1_i32_426 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_426) : (i32) -> ()
    cf.br ^bb151
  ^bb153:  // pred: ^bb151
    cf.br ^bb143
  ^bb154:  // 2 preds: ^bb143, ^bb155
    %787 = llvm.getelementptr %13[%726] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %788 = llvm.load volatile %787 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_427 = arith.constant 0 : i64
    %789 = arith.extui %721 : i32 to i64
    %790 = arith.addi %789, %c0_i64_427 : i64
    %c8_i64_428 = arith.constant 8 : i64
    %791 = arith.addi %790, %c8_i64_428 : i64
    %c0_i32_429 = arith.constant 0 : i32
    %792 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_429) : (!llvm.ptr, i32) -> i32
    %793 = arith.extui %792 : i32 to i64
    %c65536_i64_430 = arith.constant 65536 : i64
    %794 = arith.muli %793, %c65536_i64_430 : i64
    %795 = arith.cmpi ult, %791, %794 : i64
    cf.cond_br %795, ^bb156, ^bb157
  ^bb155:  // pred: ^bb143
    %c1_i32_431 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_431) : (i32) -> ()
    cf.br ^bb154
  ^bb156:  // 2 preds: ^bb154, ^bb157
    %796 = llvm.getelementptr %13[%790] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %788, %796 {alignment = 1 : i64} : i64, !llvm.ptr
    %797 = llvm.load %1 : !llvm.ptr -> i32
    %c176_i32_432 = arith.constant 176 : i32
    %798 = arith.addi %797, %c176_i32_432 : i32
    %c16_i32_433 = arith.constant 16 : i32
    %799 = arith.addi %798, %c16_i32_433 : i32
    %800 = llvm.load %1 : !llvm.ptr -> i32
    %c208_i32_434 = arith.constant 208 : i32
    %801 = arith.addi %800, %c208_i32_434 : i32
    %c16_i32_435 = arith.constant 16 : i32
    %802 = arith.addi %801, %c16_i32_435 : i32
    llvm.store %802, %2 : i32, !llvm.ptr
    %c0_i64_436 = arith.constant 0 : i64
    %803 = arith.extui %802 : i32 to i64
    %804 = arith.addi %803, %c0_i64_436 : i64
    %c8_i64_437 = arith.constant 8 : i64
    %805 = arith.addi %804, %c8_i64_437 : i64
    %c0_i32_438 = arith.constant 0 : i32
    %806 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_438) : (!llvm.ptr, i32) -> i32
    %807 = arith.extui %806 : i32 to i64
    %c65536_i64_439 = arith.constant 65536 : i64
    %808 = arith.muli %807, %c65536_i64_439 : i64
    %809 = arith.cmpi ult, %805, %808 : i64
    cf.cond_br %809, ^bb158, ^bb159
  ^bb157:  // pred: ^bb154
    %c1_i32_440 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_440) : (i32) -> ()
    cf.br ^bb156
  ^bb158:  // 2 preds: ^bb156, ^bb159
    %810 = llvm.getelementptr %13[%804] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %811 = llvm.load volatile %810 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_441 = arith.constant 0 : i64
    %812 = arith.extui %799 : i32 to i64
    %813 = arith.addi %812, %c0_i64_441 : i64
    %c8_i64_442 = arith.constant 8 : i64
    %814 = arith.addi %813, %c8_i64_442 : i64
    %c0_i32_443 = arith.constant 0 : i32
    %815 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_443) : (!llvm.ptr, i32) -> i32
    %816 = arith.extui %815 : i32 to i64
    %c65536_i64_444 = arith.constant 65536 : i64
    %817 = arith.muli %816, %c65536_i64_444 : i64
    %818 = arith.cmpi ult, %814, %817 : i64
    cf.cond_br %818, ^bb160, ^bb161
  ^bb159:  // pred: ^bb156
    %c1_i32_445 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_445) : (i32) -> ()
    cf.br ^bb158
  ^bb160:  // 2 preds: ^bb158, ^bb161
    %819 = llvm.getelementptr %13[%813] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %811, %819 {alignment = 1 : i64} : i64, !llvm.ptr
    %820 = llvm.load %1 : !llvm.ptr -> i32
    %c176_i32_446 = arith.constant 176 : i32
    %821 = arith.addi %820, %c176_i32_446 : i32
    %c8_i32_447 = arith.constant 8 : i32
    %822 = arith.addi %821, %c8_i32_447 : i32
    %823 = llvm.load %1 : !llvm.ptr -> i32
    %c208_i32_448 = arith.constant 208 : i32
    %824 = arith.addi %823, %c208_i32_448 : i32
    %c8_i32_449 = arith.constant 8 : i32
    %825 = arith.addi %824, %c8_i32_449 : i32
    llvm.store %825, %0 : i32, !llvm.ptr
    %c0_i64_450 = arith.constant 0 : i64
    %826 = arith.extui %825 : i32 to i64
    %827 = arith.addi %826, %c0_i64_450 : i64
    %c8_i64_451 = arith.constant 8 : i64
    %828 = arith.addi %827, %c8_i64_451 : i64
    %c0_i32_452 = arith.constant 0 : i32
    %829 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_452) : (!llvm.ptr, i32) -> i32
    %830 = arith.extui %829 : i32 to i64
    %c65536_i64_453 = arith.constant 65536 : i64
    %831 = arith.muli %830, %c65536_i64_453 : i64
    %832 = arith.cmpi ult, %828, %831 : i64
    cf.cond_br %832, ^bb162, ^bb163
  ^bb161:  // pred: ^bb158
    %c1_i32_454 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_454) : (i32) -> ()
    cf.br ^bb160
  ^bb162:  // 2 preds: ^bb160, ^bb163
    %833 = llvm.getelementptr %13[%827] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %834 = llvm.load volatile %833 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_455 = arith.constant 0 : i64
    %835 = arith.extui %822 : i32 to i64
    %836 = arith.addi %835, %c0_i64_455 : i64
    %c8_i64_456 = arith.constant 8 : i64
    %837 = arith.addi %836, %c8_i64_456 : i64
    %c0_i32_457 = arith.constant 0 : i32
    %838 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_457) : (!llvm.ptr, i32) -> i32
    %839 = arith.extui %838 : i32 to i64
    %c65536_i64_458 = arith.constant 65536 : i64
    %840 = arith.muli %839, %c65536_i64_458 : i64
    %841 = arith.cmpi ult, %837, %840 : i64
    cf.cond_br %841, ^bb164, ^bb165
  ^bb163:  // pred: ^bb160
    %c1_i32_459 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_459) : (i32) -> ()
    cf.br ^bb162
  ^bb164:  // 2 preds: ^bb162, ^bb165
    %842 = llvm.getelementptr %13[%836] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %834, %842 {alignment = 1 : i64} : i64, !llvm.ptr
    %843 = llvm.load %1 : !llvm.ptr -> i32
    %844 = llvm.load %1 : !llvm.ptr -> i32
    %c208_i64_460 = arith.constant 208 : i64
    %845 = arith.extui %844 : i32 to i64
    %846 = arith.addi %845, %c208_i64_460 : i64
    %c8_i64_461 = arith.constant 8 : i64
    %847 = arith.addi %846, %c8_i64_461 : i64
    %c0_i32_462 = arith.constant 0 : i32
    %848 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_462) : (!llvm.ptr, i32) -> i32
    %849 = arith.extui %848 : i32 to i64
    %c65536_i64_463 = arith.constant 65536 : i64
    %850 = arith.muli %849, %c65536_i64_463 : i64
    %851 = arith.cmpi ult, %847, %850 : i64
    cf.cond_br %851, ^bb166, ^bb167
  ^bb165:  // pred: ^bb162
    %c1_i32_464 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_464) : (i32) -> ()
    cf.br ^bb164
  ^bb166:  // 2 preds: ^bb164, ^bb167
    %852 = llvm.getelementptr %13[%846] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %853 = llvm.load volatile %852 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c176_i64_465 = arith.constant 176 : i64
    %854 = arith.extui %843 : i32 to i64
    %855 = arith.addi %854, %c176_i64_465 : i64
    %c8_i64_466 = arith.constant 8 : i64
    %856 = arith.addi %855, %c8_i64_466 : i64
    %c0_i32_467 = arith.constant 0 : i32
    %857 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_467) : (!llvm.ptr, i32) -> i32
    %858 = arith.extui %857 : i32 to i64
    %c65536_i64_468 = arith.constant 65536 : i64
    %859 = arith.muli %858, %c65536_i64_468 : i64
    %860 = arith.cmpi ult, %856, %859 : i64
    cf.cond_br %860, ^bb168, ^bb169
  ^bb167:  // pred: ^bb164
    %c1_i32_469 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_469) : (i32) -> ()
    cf.br ^bb166
  ^bb168:  // 2 preds: ^bb166, ^bb169
    %861 = llvm.getelementptr %13[%855] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %853, %861 {alignment = 1 : i64} : i64, !llvm.ptr
    %862 = llvm.load %1 : !llvm.ptr -> i32
    %c144_i32_470 = arith.constant 144 : i32
    %863 = arith.addi %862, %c144_i32_470 : i32
    %c32_i32_471 = arith.constant 32 : i32
    %864 = llvm.load %1 : !llvm.ptr -> i32
    %c176_i32_472 = arith.constant 176 : i32
    %865 = arith.addi %864, %c176_i32_472 : i32
    %c32_i32_473 = arith.constant 32 : i32
    %c1048804_i32 = arith.constant 1048804 : i32
    call @f114(%arg0, %863, %c32_i32_471, %865, %c32_i32_473, %c1048804_i32) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %866 = llvm.load %0 : !llvm.ptr -> i32
    %867 = llvm.load %1 : !llvm.ptr -> i32
    %c144_i32_474 = arith.constant 144 : i32
    %868 = arith.addi %867, %c144_i32_474 : i32
    %c8_i32_475 = arith.constant 8 : i32
    %869 = arith.addi %868, %c8_i32_475 : i32
    %c0_i64_476 = arith.constant 0 : i64
    %870 = arith.extui %869 : i32 to i64
    %871 = arith.addi %870, %c0_i64_476 : i64
    %c8_i64_477 = arith.constant 8 : i64
    %872 = arith.addi %871, %c8_i64_477 : i64
    %c0_i32_478 = arith.constant 0 : i32
    %873 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_478) : (!llvm.ptr, i32) -> i32
    %874 = arith.extui %873 : i32 to i64
    %c65536_i64_479 = arith.constant 65536 : i64
    %875 = arith.muli %874, %c65536_i64_479 : i64
    %876 = arith.cmpi ult, %872, %875 : i64
    cf.cond_br %876, ^bb170, ^bb171
  ^bb169:  // pred: ^bb166
    %c1_i32_480 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_480) : (i32) -> ()
    cf.br ^bb168
  ^bb170:  // 2 preds: ^bb168, ^bb171
    %877 = llvm.getelementptr %13[%871] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %878 = llvm.load volatile %877 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_481 = arith.constant 0 : i64
    %879 = arith.extui %866 : i32 to i64
    %880 = arith.addi %879, %c0_i64_481 : i64
    %c8_i64_482 = arith.constant 8 : i64
    %881 = arith.addi %880, %c8_i64_482 : i64
    %c0_i32_483 = arith.constant 0 : i32
    %882 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_483) : (!llvm.ptr, i32) -> i32
    %883 = arith.extui %882 : i32 to i64
    %c65536_i64_484 = arith.constant 65536 : i64
    %884 = arith.muli %883, %c65536_i64_484 : i64
    %885 = arith.cmpi ult, %881, %884 : i64
    cf.cond_br %885, ^bb172, ^bb173
  ^bb171:  // pred: ^bb168
    %c1_i32_485 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_485) : (i32) -> ()
    cf.br ^bb170
  ^bb172:  // 2 preds: ^bb170, ^bb173
    %886 = llvm.getelementptr %13[%880] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %878, %886 {alignment = 1 : i64} : i64, !llvm.ptr
    %887 = llvm.load %2 : !llvm.ptr -> i32
    %888 = llvm.load %1 : !llvm.ptr -> i32
    %c144_i32_486 = arith.constant 144 : i32
    %889 = arith.addi %888, %c144_i32_486 : i32
    %c16_i32_487 = arith.constant 16 : i32
    %890 = arith.addi %889, %c16_i32_487 : i32
    %c0_i64_488 = arith.constant 0 : i64
    %891 = arith.extui %890 : i32 to i64
    %892 = arith.addi %891, %c0_i64_488 : i64
    %c8_i64_489 = arith.constant 8 : i64
    %893 = arith.addi %892, %c8_i64_489 : i64
    %c0_i32_490 = arith.constant 0 : i32
    %894 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_490) : (!llvm.ptr, i32) -> i32
    %895 = arith.extui %894 : i32 to i64
    %c65536_i64_491 = arith.constant 65536 : i64
    %896 = arith.muli %895, %c65536_i64_491 : i64
    %897 = arith.cmpi ult, %893, %896 : i64
    cf.cond_br %897, ^bb174, ^bb175
  ^bb173:  // pred: ^bb170
    %c1_i32_492 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_492) : (i32) -> ()
    cf.br ^bb172
  ^bb174:  // 2 preds: ^bb172, ^bb175
    %898 = llvm.getelementptr %13[%892] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %899 = llvm.load volatile %898 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_493 = arith.constant 0 : i64
    %900 = arith.extui %887 : i32 to i64
    %901 = arith.addi %900, %c0_i64_493 : i64
    %c8_i64_494 = arith.constant 8 : i64
    %902 = arith.addi %901, %c8_i64_494 : i64
    %c0_i32_495 = arith.constant 0 : i32
    %903 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_495) : (!llvm.ptr, i32) -> i32
    %904 = arith.extui %903 : i32 to i64
    %c65536_i64_496 = arith.constant 65536 : i64
    %905 = arith.muli %904, %c65536_i64_496 : i64
    %906 = arith.cmpi ult, %902, %905 : i64
    cf.cond_br %906, ^bb176, ^bb177
  ^bb175:  // pred: ^bb172
    %c1_i32_497 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_497) : (i32) -> ()
    cf.br ^bb174
  ^bb176:  // 2 preds: ^bb174, ^bb177
    %907 = llvm.getelementptr %13[%901] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %899, %907 {alignment = 1 : i64} : i64, !llvm.ptr
    %908 = llvm.load %3 : !llvm.ptr -> i32
    %909 = llvm.load %1 : !llvm.ptr -> i32
    %c144_i32_498 = arith.constant 144 : i32
    %910 = arith.addi %909, %c144_i32_498 : i32
    %c24_i32_499 = arith.constant 24 : i32
    %911 = arith.addi %910, %c24_i32_499 : i32
    %c0_i64_500 = arith.constant 0 : i64
    %912 = arith.extui %911 : i32 to i64
    %913 = arith.addi %912, %c0_i64_500 : i64
    %c8_i64_501 = arith.constant 8 : i64
    %914 = arith.addi %913, %c8_i64_501 : i64
    %c0_i32_502 = arith.constant 0 : i32
    %915 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_502) : (!llvm.ptr, i32) -> i32
    %916 = arith.extui %915 : i32 to i64
    %c65536_i64_503 = arith.constant 65536 : i64
    %917 = arith.muli %916, %c65536_i64_503 : i64
    %918 = arith.cmpi ult, %914, %917 : i64
    cf.cond_br %918, ^bb178, ^bb179
  ^bb177:  // pred: ^bb174
    %c1_i32_504 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_504) : (i32) -> ()
    cf.br ^bb176
  ^bb178:  // 2 preds: ^bb176, ^bb179
    %919 = llvm.getelementptr %13[%913] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %920 = llvm.load volatile %919 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_505 = arith.constant 0 : i64
    %921 = arith.extui %908 : i32 to i64
    %922 = arith.addi %921, %c0_i64_505 : i64
    %c8_i64_506 = arith.constant 8 : i64
    %923 = arith.addi %922, %c8_i64_506 : i64
    %c0_i32_507 = arith.constant 0 : i32
    %924 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_507) : (!llvm.ptr, i32) -> i32
    %925 = arith.extui %924 : i32 to i64
    %c65536_i64_508 = arith.constant 65536 : i64
    %926 = arith.muli %925, %c65536_i64_508 : i64
    %927 = arith.cmpi ult, %923, %926 : i64
    cf.cond_br %927, ^bb180, ^bb181
  ^bb179:  // pred: ^bb176
    %c1_i32_509 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_509) : (i32) -> ()
    cf.br ^bb178
  ^bb180:  // 2 preds: ^bb178, ^bb181
    %928 = llvm.getelementptr %13[%922] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %920, %928 {alignment = 1 : i64} : i64, !llvm.ptr
    %929 = llvm.load %1 : !llvm.ptr -> i32
    %930 = llvm.load %1 : !llvm.ptr -> i32
    %c144_i64_510 = arith.constant 144 : i64
    %931 = arith.extui %930 : i32 to i64
    %932 = arith.addi %931, %c144_i64_510 : i64
    %c8_i64_511 = arith.constant 8 : i64
    %933 = arith.addi %932, %c8_i64_511 : i64
    %c0_i32_512 = arith.constant 0 : i32
    %934 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_512) : (!llvm.ptr, i32) -> i32
    %935 = arith.extui %934 : i32 to i64
    %c65536_i64_513 = arith.constant 65536 : i64
    %936 = arith.muli %935, %c65536_i64_513 : i64
    %937 = arith.cmpi ult, %933, %936 : i64
    cf.cond_br %937, ^bb182, ^bb183
  ^bb181:  // pred: ^bb178
    %c1_i32_514 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_514) : (i32) -> ()
    cf.br ^bb180
  ^bb182:  // 2 preds: ^bb180, ^bb183
    %938 = llvm.getelementptr %13[%932] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %939 = llvm.load volatile %938 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c208_i64_515 = arith.constant 208 : i64
    %940 = arith.extui %929 : i32 to i64
    %941 = arith.addi %940, %c208_i64_515 : i64
    %c8_i64_516 = arith.constant 8 : i64
    %942 = arith.addi %941, %c8_i64_516 : i64
    %c0_i32_517 = arith.constant 0 : i32
    %943 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_517) : (!llvm.ptr, i32) -> i32
    %944 = arith.extui %943 : i32 to i64
    %c65536_i64_518 = arith.constant 65536 : i64
    %945 = arith.muli %944, %c65536_i64_518 : i64
    %946 = arith.cmpi ult, %942, %945 : i64
    cf.cond_br %946, ^bb184, ^bb185
  ^bb183:  // pred: ^bb180
    %c1_i32_519 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_519) : (i32) -> ()
    cf.br ^bb182
  ^bb184:  // 2 preds: ^bb182, ^bb185
    %947 = llvm.getelementptr %13[%941] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %939, %947 {alignment = 1 : i64} : i64, !llvm.ptr
    %948 = llvm.load %1 : !llvm.ptr -> i32
    %c144_i32_520 = arith.constant 144 : i32
    %949 = arith.addi %948, %c144_i32_520 : i32
    %950 = llvm.load %1 : !llvm.ptr -> i32
    %c208_i32_521 = arith.constant 208 : i32
    %951 = arith.addi %950, %c208_i32_521 : i32
    call @f15(%arg0, %949, %951) : (!llvm.ptr, i32, i32) -> ()
    %952 = llvm.load %1 : !llvm.ptr -> i32
    %953 = llvm.load %1 : !llvm.ptr -> i32
    %c144_i64_522 = arith.constant 144 : i64
    %954 = arith.extui %953 : i32 to i64
    %955 = arith.addi %954, %c144_i64_522 : i64
    %c4_i64_523 = arith.constant 4 : i64
    %956 = arith.addi %955, %c4_i64_523 : i64
    %c0_i32_524 = arith.constant 0 : i32
    %957 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_524) : (!llvm.ptr, i32) -> i32
    %958 = arith.extui %957 : i32 to i64
    %c65536_i64_525 = arith.constant 65536 : i64
    %959 = arith.muli %958, %c65536_i64_525 : i64
    %960 = arith.cmpi ult, %956, %959 : i64
    cf.cond_br %960, ^bb186, ^bb187
  ^bb185:  // pred: ^bb182
    %c1_i32_526 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_526) : (i32) -> ()
    cf.br ^bb184
  ^bb186:  // 2 preds: ^bb184, ^bb187
    %961 = llvm.getelementptr %13[%955] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %962 = llvm.load volatile %961 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c184_i64 = arith.constant 184 : i64
    %963 = arith.extui %952 : i32 to i64
    %964 = arith.addi %963, %c184_i64 : i64
    %c4_i64_527 = arith.constant 4 : i64
    %965 = arith.addi %964, %c4_i64_527 : i64
    %c0_i32_528 = arith.constant 0 : i32
    %966 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_528) : (!llvm.ptr, i32) -> i32
    %967 = arith.extui %966 : i32 to i64
    %c65536_i64_529 = arith.constant 65536 : i64
    %968 = arith.muli %967, %c65536_i64_529 : i64
    %969 = arith.cmpi ult, %965, %968 : i64
    cf.cond_br %969, ^bb188, ^bb189
  ^bb187:  // pred: ^bb184
    %c1_i32_530 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_530) : (i32) -> ()
    cf.br ^bb186
  ^bb188:  // 2 preds: ^bb186, ^bb189
    %970 = llvm.getelementptr %13[%964] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %962, %970 {alignment = 1 : i64} : i32, !llvm.ptr
    %971 = llvm.load %1 : !llvm.ptr -> i32
    %972 = llvm.load %1 : !llvm.ptr -> i32
    %c148_i64 = arith.constant 148 : i64
    %973 = arith.extui %972 : i32 to i64
    %974 = arith.addi %973, %c148_i64 : i64
    %c4_i64_531 = arith.constant 4 : i64
    %975 = arith.addi %974, %c4_i64_531 : i64
    %c0_i32_532 = arith.constant 0 : i32
    %976 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_532) : (!llvm.ptr, i32) -> i32
    %977 = arith.extui %976 : i32 to i64
    %c65536_i64_533 = arith.constant 65536 : i64
    %978 = arith.muli %977, %c65536_i64_533 : i64
    %979 = arith.cmpi ult, %975, %978 : i64
    cf.cond_br %979, ^bb190, ^bb191
  ^bb189:  // pred: ^bb186
    %c1_i32_534 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_534) : (i32) -> ()
    cf.br ^bb188
  ^bb190:  // 2 preds: ^bb188, ^bb191
    %980 = llvm.getelementptr %13[%974] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %981 = llvm.load volatile %980 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %981, %3 : i32, !llvm.ptr
    %c176_i64_535 = arith.constant 176 : i64
    %982 = arith.extui %971 : i32 to i64
    %983 = arith.addi %982, %c176_i64_535 : i64
    %c4_i64_536 = arith.constant 4 : i64
    %984 = arith.addi %983, %c4_i64_536 : i64
    %c0_i32_537 = arith.constant 0 : i32
    %985 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_537) : (!llvm.ptr, i32) -> i32
    %986 = arith.extui %985 : i32 to i64
    %c65536_i64_538 = arith.constant 65536 : i64
    %987 = arith.muli %986, %c65536_i64_538 : i64
    %988 = arith.cmpi ult, %984, %987 : i64
    cf.cond_br %988, ^bb192, ^bb193
  ^bb191:  // pred: ^bb188
    %c1_i32_539 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_539) : (i32) -> ()
    cf.br ^bb190
  ^bb192:  // 2 preds: ^bb190, ^bb193
    %989 = llvm.getelementptr %13[%983] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %981, %989 {alignment = 1 : i64} : i32, !llvm.ptr
    %990 = llvm.load %1 : !llvm.ptr -> i32
    %991 = llvm.load %3 : !llvm.ptr -> i32
    %c180_i64 = arith.constant 180 : i64
    %992 = arith.extui %990 : i32 to i64
    %993 = arith.addi %992, %c180_i64 : i64
    %c4_i64_540 = arith.constant 4 : i64
    %994 = arith.addi %993, %c4_i64_540 : i64
    %c0_i32_541 = arith.constant 0 : i32
    %995 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_541) : (!llvm.ptr, i32) -> i32
    %996 = arith.extui %995 : i32 to i64
    %c65536_i64_542 = arith.constant 65536 : i64
    %997 = arith.muli %996, %c65536_i64_542 : i64
    %998 = arith.cmpi ult, %994, %997 : i64
    cf.cond_br %998, ^bb194, ^bb195
  ^bb193:  // pred: ^bb190
    %c1_i32_543 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_543) : (i32) -> ()
    cf.br ^bb192
  ^bb194:  // 2 preds: ^bb192, ^bb195
    %999 = llvm.getelementptr %13[%993] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %991, %999 {alignment = 1 : i64} : i32, !llvm.ptr
    %1000 = llvm.load %1 : !llvm.ptr -> i32
    %1001 = llvm.load %3 : !llvm.ptr -> i32
    %1002 = llvm.load %1 : !llvm.ptr -> i32
    %c152_i64 = arith.constant 152 : i64
    %1003 = arith.extui %1002 : i32 to i64
    %1004 = arith.addi %1003, %c152_i64 : i64
    %c4_i64_544 = arith.constant 4 : i64
    %1005 = arith.addi %1004, %c4_i64_544 : i64
    %c0_i32_545 = arith.constant 0 : i32
    %1006 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_545) : (!llvm.ptr, i32) -> i32
    %1007 = arith.extui %1006 : i32 to i64
    %c65536_i64_546 = arith.constant 65536 : i64
    %1008 = arith.muli %1007, %c65536_i64_546 : i64
    %1009 = arith.cmpi ult, %1005, %1008 : i64
    cf.cond_br %1009, ^bb196, ^bb197
  ^bb195:  // pred: ^bb192
    %c1_i32_547 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_547) : (i32) -> ()
    cf.br ^bb194
  ^bb196:  // 2 preds: ^bb194, ^bb197
    %1010 = llvm.getelementptr %13[%1004] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1011 = llvm.load volatile %1010 {alignment = 1 : i64} : !llvm.ptr -> i32
    %1012 = arith.addi %1001, %1011 : i32
    %c188_i64 = arith.constant 188 : i64
    %1013 = arith.extui %1000 : i32 to i64
    %1014 = arith.addi %1013, %c188_i64 : i64
    %c4_i64_548 = arith.constant 4 : i64
    %1015 = arith.addi %1014, %c4_i64_548 : i64
    %c0_i32_549 = arith.constant 0 : i32
    %1016 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_549) : (!llvm.ptr, i32) -> i32
    %1017 = arith.extui %1016 : i32 to i64
    %c65536_i64_550 = arith.constant 65536 : i64
    %1018 = arith.muli %1017, %c65536_i64_550 : i64
    %1019 = arith.cmpi ult, %1015, %1018 : i64
    cf.cond_br %1019, ^bb198, ^bb199
  ^bb197:  // pred: ^bb194
    %c1_i32_551 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_551) : (i32) -> ()
    cf.br ^bb196
  ^bb198:  // 2 preds: ^bb196, ^bb199
    %1020 = llvm.getelementptr %13[%1014] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1012, %1020 {alignment = 1 : i64} : i32, !llvm.ptr
    %1021 = llvm.load %1 : !llvm.ptr -> i32
    %c132_i32_552 = arith.constant 132 : i32
    %1022 = arith.addi %1021, %c132_i32_552 : i32
    %1023 = llvm.load %1 : !llvm.ptr -> i32
    %c176_i32_553 = arith.constant 176 : i32
    %1024 = arith.addi %1023, %c176_i32_553 : i32
    call @f83(%arg0, %1022, %1024) : (!llvm.ptr, i32, i32) -> ()
    %1025 = llvm.load %1 : !llvm.ptr -> i32
    %c136_i64_554 = arith.constant 136 : i64
    %1026 = arith.extui %1025 : i32 to i64
    %1027 = arith.addi %1026, %c136_i64_554 : i64
    %c4_i64_555 = arith.constant 4 : i64
    %1028 = arith.addi %1027, %c4_i64_555 : i64
    %c0_i32_556 = arith.constant 0 : i32
    %1029 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_556) : (!llvm.ptr, i32) -> i32
    %1030 = arith.extui %1029 : i32 to i64
    %c65536_i64_557 = arith.constant 65536 : i64
    %1031 = arith.muli %1030, %c65536_i64_557 : i64
    %1032 = arith.cmpi ult, %1028, %1031 : i64
    cf.cond_br %1032, ^bb200, ^bb201
  ^bb199:  // pred: ^bb196
    %c1_i32_558 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_558) : (i32) -> ()
    cf.br ^bb198
  ^bb200:  // 2 preds: ^bb198, ^bb201
    %1033 = llvm.getelementptr %13[%1027] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1034 = llvm.load volatile %1033 {alignment = 1 : i64} : !llvm.ptr -> i32
    %1035 = llvm.load %1 : !llvm.ptr -> i32
    %c140_i64_559 = arith.constant 140 : i64
    %1036 = arith.extui %1035 : i32 to i64
    %1037 = arith.addi %1036, %c140_i64_559 : i64
    %c4_i64_560 = arith.constant 4 : i64
    %1038 = arith.addi %1037, %c4_i64_560 : i64
    %c0_i32_561 = arith.constant 0 : i32
    %1039 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_561) : (!llvm.ptr, i32) -> i32
    %1040 = arith.extui %1039 : i32 to i64
    %c65536_i64_562 = arith.constant 65536 : i64
    %1041 = arith.muli %1040, %c65536_i64_562 : i64
    %1042 = arith.cmpi ult, %1038, %1041 : i64
    cf.cond_br %1042, ^bb202, ^bb203
  ^bb201:  // pred: ^bb198
    %c1_i32_563 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_563) : (i32) -> ()
    cf.br ^bb200
  ^bb202:  // 2 preds: ^bb200, ^bb203
    %1043 = llvm.getelementptr %13[%1037] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1044 = llvm.load volatile %1043 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    call @f66(%arg0, %1034, %1044, %c3_i32) : (!llvm.ptr, i32, i32, i32) -> ()
    %1045 = llvm.load %1 : !llvm.ptr -> i32
    %c132_i32_564 = arith.constant 132 : i32
    %1046 = arith.addi %1045, %c132_i32_564 : i32
    call @f112(%arg0, %1046) : (!llvm.ptr, i32) -> ()
    %1047 = llvm.load %1 : !llvm.ptr -> i32
    %c132_i32_565 = arith.constant 132 : i32
    %1048 = arith.addi %1047, %c132_i32_565 : i32
    call @f113(%arg0, %1048) : (!llvm.ptr, i32) -> ()
    %1049 = llvm.load %1 : !llvm.ptr -> i32
    %c240_i32_566 = arith.constant 240 : i32
    %1050 = arith.addi %1049, %c240_i32_566 : i32
    llvm.store %1050, %10 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb203:  // pred: ^bb200
    %c1_i32_567 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_567) : (i32) -> ()
    cf.br ^bb202
  ^bb204:  // 2 preds: ^bb104, ^bb205
    %1051 = llvm.getelementptr %13[%527] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1052 = llvm.load volatile %1051 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f143(%arg0, %524, %1052) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb205:  // pred: ^bb104
    %c1_i32_568 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_568) : (i32) -> ()
    cf.br ^bb204
  }
  func.func @f32(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %7 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %12 = llvm.load %8 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %13 = arith.subi %12, %c32_i32 : i32
    llvm.store %13, %3 : i32, !llvm.ptr
    llvm.store %13, %8 : i32, !llvm.ptr
    %14 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %15 = arith.addi %14, %c24_i32 : i32
    %16 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_6 = arith.constant 24 : i32
    %17 = arith.addi %16, %c24_i32_6 : i32
    %c0_i64 = arith.constant 0 : i64
    %18 = arith.extui %17 : i32 to i64
    %19 = arith.addi %18, %c0_i64 : i64
    %c8_i64 = arith.constant 8 : i64
    %20 = arith.addi %19, %c8_i64 : i64
    %c0_i32_7 = arith.constant 0 : i32
    %21 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_7) : (!llvm.ptr, i32) -> i32
    %22 = arith.extui %21 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %23 = arith.muli %22, %c65536_i64 : i64
    %24 = arith.cmpi ult, %20, %23 : i64
    cf.cond_br %24, ^bb3, ^bb4
  ^bb2:  // pred: ^bb19
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %25 = llvm.getelementptr %11[%19] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %26 = llvm.load volatile %25 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_8 = arith.constant 0 : i64
    %27 = arith.extui %15 : i32 to i64
    %28 = arith.addi %27, %c0_i64_8 : i64
    %c8_i64_9 = arith.constant 8 : i64
    %29 = arith.addi %28, %c8_i64_9 : i64
    %c0_i32_10 = arith.constant 0 : i32
    %30 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_10) : (!llvm.ptr, i32) -> i32
    %31 = arith.extui %30 : i32 to i64
    %c65536_i64_11 = arith.constant 65536 : i64
    %32 = arith.muli %31, %c65536_i64_11 : i64
    %33 = arith.cmpi ult, %29, %32 : i64
    cf.cond_br %33, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c1_i32_12 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_12) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %34 = llvm.getelementptr %11[%28] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %26, %34 {alignment = 1 : i64} : i64, !llvm.ptr
    %35 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %36 = arith.addi %35, %c16_i32 : i32
    %37 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_13 = arith.constant 16 : i32
    %38 = arith.addi %37, %c16_i32_13 : i32
    %c0_i64_14 = arith.constant 0 : i64
    %39 = arith.extui %38 : i32 to i64
    %40 = arith.addi %39, %c0_i64_14 : i64
    %c8_i64_15 = arith.constant 8 : i64
    %41 = arith.addi %40, %c8_i64_15 : i64
    %c0_i32_16 = arith.constant 0 : i32
    %42 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_16) : (!llvm.ptr, i32) -> i32
    %43 = arith.extui %42 : i32 to i64
    %c65536_i64_17 = arith.constant 65536 : i64
    %44 = arith.muli %43, %c65536_i64_17 : i64
    %45 = arith.cmpi ult, %41, %44 : i64
    cf.cond_br %45, ^bb7, ^bb8
  ^bb6:  // pred: ^bb3
    %c1_i32_18 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_18) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %46 = llvm.getelementptr %11[%40] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %47 = llvm.load volatile %46 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_19 = arith.constant 0 : i64
    %48 = arith.extui %36 : i32 to i64
    %49 = arith.addi %48, %c0_i64_19 : i64
    %c8_i64_20 = arith.constant 8 : i64
    %50 = arith.addi %49, %c8_i64_20 : i64
    %c0_i32_21 = arith.constant 0 : i32
    %51 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_21) : (!llvm.ptr, i32) -> i32
    %52 = arith.extui %51 : i32 to i64
    %c65536_i64_22 = arith.constant 65536 : i64
    %53 = arith.muli %52, %c65536_i64_22 : i64
    %54 = arith.cmpi ult, %50, %53 : i64
    cf.cond_br %54, ^bb9, ^bb10
  ^bb8:  // pred: ^bb5
    %c1_i32_23 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_23) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %55 = llvm.getelementptr %11[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %47, %55 {alignment = 1 : i64} : i64, !llvm.ptr
    %56 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %57 = arith.addi %56, %c8_i32 : i32
    %58 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_24 = arith.constant 8 : i32
    %59 = arith.addi %58, %c8_i32_24 : i32
    %c0_i64_25 = arith.constant 0 : i64
    %60 = arith.extui %59 : i32 to i64
    %61 = arith.addi %60, %c0_i64_25 : i64
    %c8_i64_26 = arith.constant 8 : i64
    %62 = arith.addi %61, %c8_i64_26 : i64
    %c0_i32_27 = arith.constant 0 : i32
    %63 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_27) : (!llvm.ptr, i32) -> i32
    %64 = arith.extui %63 : i32 to i64
    %c65536_i64_28 = arith.constant 65536 : i64
    %65 = arith.muli %64, %c65536_i64_28 : i64
    %66 = arith.cmpi ult, %62, %65 : i64
    cf.cond_br %66, ^bb11, ^bb12
  ^bb10:  // pred: ^bb7
    %c1_i32_29 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_29) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %67 = llvm.getelementptr %11[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %68 = llvm.load volatile %67 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_30 = arith.constant 0 : i64
    %69 = arith.extui %57 : i32 to i64
    %70 = arith.addi %69, %c0_i64_30 : i64
    %c8_i64_31 = arith.constant 8 : i64
    %71 = arith.addi %70, %c8_i64_31 : i64
    %c0_i32_32 = arith.constant 0 : i32
    %72 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_32) : (!llvm.ptr, i32) -> i32
    %73 = arith.extui %72 : i32 to i64
    %c65536_i64_33 = arith.constant 65536 : i64
    %74 = arith.muli %73, %c65536_i64_33 : i64
    %75 = arith.cmpi ult, %71, %74 : i64
    cf.cond_br %75, ^bb13, ^bb14
  ^bb12:  // pred: ^bb9
    %c1_i32_34 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_34) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %76 = llvm.getelementptr %11[%70] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %68, %76 {alignment = 1 : i64} : i64, !llvm.ptr
    %77 = llvm.load %3 : !llvm.ptr -> i32
    %78 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_35 = arith.constant 0 : i64
    %79 = arith.extui %78 : i32 to i64
    %80 = arith.addi %79, %c0_i64_35 : i64
    %c8_i64_36 = arith.constant 8 : i64
    %81 = arith.addi %80, %c8_i64_36 : i64
    %c0_i32_37 = arith.constant 0 : i32
    %82 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_37) : (!llvm.ptr, i32) -> i32
    %83 = arith.extui %82 : i32 to i64
    %c65536_i64_38 = arith.constant 65536 : i64
    %84 = arith.muli %83, %c65536_i64_38 : i64
    %85 = arith.cmpi ult, %81, %84 : i64
    cf.cond_br %85, ^bb15, ^bb16
  ^bb14:  // pred: ^bb11
    %c1_i32_39 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_39) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // 2 preds: ^bb13, ^bb16
    %86 = llvm.getelementptr %11[%80] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %87 = llvm.load volatile %86 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_40 = arith.constant 0 : i64
    %88 = arith.extui %77 : i32 to i64
    %89 = arith.addi %88, %c0_i64_40 : i64
    %c8_i64_41 = arith.constant 8 : i64
    %90 = arith.addi %89, %c8_i64_41 : i64
    %c0_i32_42 = arith.constant 0 : i32
    %91 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_42) : (!llvm.ptr, i32) -> i32
    %92 = arith.extui %91 : i32 to i64
    %c65536_i64_43 = arith.constant 65536 : i64
    %93 = arith.muli %92, %c65536_i64_43 : i64
    %94 = arith.cmpi ult, %90, %93 : i64
    cf.cond_br %94, ^bb17, ^bb18
  ^bb16:  // pred: ^bb13
    %c1_i32_44 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_44) : (i32) -> ()
    cf.br ^bb15
  ^bb17:  // 2 preds: ^bb15, ^bb18
    %95 = llvm.getelementptr %11[%89] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %87, %95 {alignment = 1 : i64} : i64, !llvm.ptr
    %96 = llvm.load %3 : !llvm.ptr -> i32
    %c31_i32 = arith.constant 31 : i32
    %97 = arith.addi %96, %c31_i32 : i32
    llvm.store %97, %2 : i32, !llvm.ptr
    %c0_i32_45 = arith.constant 0 : i32
    llvm.store %c0_i32_45, %4 : i32, !llvm.ptr
    cf.br ^bb20
  ^bb18:  // pred: ^bb15
    %c1_i32_46 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_46) : (i32) -> ()
    cf.br ^bb17
  ^bb19:  // pred: ^bb29
    %98 = llvm.load %0 : !llvm.ptr -> i32
    %99 = llvm.load %3 : !llvm.ptr -> i32
    call @f76(%arg0, %98, %99) : (!llvm.ptr, i32, i32) -> ()
    %100 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_47 = arith.constant 32 : i32
    %101 = arith.addi %100, %c32_i32_47 : i32
    llvm.store %101, %8 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb20:  // 2 preds: ^bb17, ^bb27
    %102 = llvm.load %3 : !llvm.ptr -> i32
    %103 = llvm.load %4 : !llvm.ptr -> i32
    %104 = arith.addi %102, %103 : i32
    llvm.store %104, %5 : i32, !llvm.ptr
    %c0_i64_48 = arith.constant 0 : i64
    %105 = arith.extui %104 : i32 to i64
    %106 = arith.addi %105, %c0_i64_48 : i64
    %c1_i64 = arith.constant 1 : i64
    %107 = arith.addi %106, %c1_i64 : i64
    %c0_i32_49 = arith.constant 0 : i32
    %108 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_49) : (!llvm.ptr, i32) -> i32
    %109 = arith.extui %108 : i32 to i64
    %c65536_i64_50 = arith.constant 65536 : i64
    %110 = arith.muli %109, %c65536_i64_50 : i64
    %111 = arith.cmpi ult, %107, %110 : i64
    cf.cond_br %111, ^bb21, ^bb22
  ^bb21:  // 2 preds: ^bb20, ^bb22
    %112 = llvm.getelementptr %11[%106] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %113 = llvm.load volatile %112 {alignment = 1 : i64} : !llvm.ptr -> i8
    %114 = arith.extui %113 : i8 to i32
    llvm.store %114, %6 : i32, !llvm.ptr
    %115 = llvm.load %5 : !llvm.ptr -> i32
    %116 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_51 = arith.constant 0 : i64
    %117 = arith.extui %116 : i32 to i64
    %118 = arith.addi %117, %c0_i64_51 : i64
    %c1_i64_52 = arith.constant 1 : i64
    %119 = arith.addi %118, %c1_i64_52 : i64
    %c0_i32_53 = arith.constant 0 : i32
    %120 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_53) : (!llvm.ptr, i32) -> i32
    %121 = arith.extui %120 : i32 to i64
    %c65536_i64_54 = arith.constant 65536 : i64
    %122 = arith.muli %121, %c65536_i64_54 : i64
    %123 = arith.cmpi ult, %119, %122 : i64
    cf.cond_br %123, ^bb23, ^bb24
  ^bb22:  // pred: ^bb20
    %c1_i32_55 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_55) : (i32) -> ()
    cf.br ^bb21
  ^bb23:  // 2 preds: ^bb21, ^bb24
    %124 = llvm.getelementptr %11[%118] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %125 = llvm.load volatile %124 {alignment = 1 : i64} : !llvm.ptr -> i8
    %126 = arith.extui %125 : i8 to i32
    %c0_i64_56 = arith.constant 0 : i64
    %127 = arith.extui %115 : i32 to i64
    %128 = arith.addi %127, %c0_i64_56 : i64
    %c1_i64_57 = arith.constant 1 : i64
    %129 = arith.addi %128, %c1_i64_57 : i64
    %c0_i32_58 = arith.constant 0 : i32
    %130 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_58) : (!llvm.ptr, i32) -> i32
    %131 = arith.extui %130 : i32 to i64
    %c65536_i64_59 = arith.constant 65536 : i64
    %132 = arith.muli %131, %c65536_i64_59 : i64
    %133 = arith.cmpi ult, %129, %132 : i64
    cf.cond_br %133, ^bb25, ^bb26
  ^bb24:  // pred: ^bb21
    %c1_i32_60 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_60) : (i32) -> ()
    cf.br ^bb23
  ^bb25:  // 2 preds: ^bb23, ^bb26
    %134 = llvm.getelementptr %11[%128] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %135 = arith.trunci %126 : i32 to i8
    llvm.store volatile %135, %134 {alignment = 1 : i64} : i8, !llvm.ptr
    %136 = llvm.load %2 : !llvm.ptr -> i32
    %137 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_61 = arith.constant 0 : i64
    %138 = arith.extui %136 : i32 to i64
    %139 = arith.addi %138, %c0_i64_61 : i64
    %c1_i64_62 = arith.constant 1 : i64
    %140 = arith.addi %139, %c1_i64_62 : i64
    %c0_i32_63 = arith.constant 0 : i32
    %141 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_63) : (!llvm.ptr, i32) -> i32
    %142 = arith.extui %141 : i32 to i64
    %c65536_i64_64 = arith.constant 65536 : i64
    %143 = arith.muli %142, %c65536_i64_64 : i64
    %144 = arith.cmpi ult, %140, %143 : i64
    cf.cond_br %144, ^bb27, ^bb28
  ^bb26:  // pred: ^bb23
    %c1_i32_65 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_65) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // 2 preds: ^bb25, ^bb28
    %145 = llvm.getelementptr %11[%139] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %146 = arith.trunci %137 : i32 to i8
    llvm.store volatile %146, %145 {alignment = 1 : i64} : i8, !llvm.ptr
    %147 = llvm.load %2 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %148 = arith.addi %147, %c-1_i32 : i32
    llvm.store %148, %2 : i32, !llvm.ptr
    %149 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i32_66 = arith.constant 1 : i32
    %150 = arith.addi %149, %c1_i32_66 : i32
    llvm.store %150, %4 : i32, !llvm.ptr
    %c16_i32_67 = arith.constant 16 : i32
    %151 = arith.cmpi eq, %150, %c16_i32_67 : i32
    %152 = arith.extui %151 : i1 to i32
    %c0_i32_68 = arith.constant 0 : i32
    %153 = arith.cmpi eq, %152, %c0_i32_68 : i32
    %154 = arith.extui %153 : i1 to i32
    %c0_i32_69 = arith.constant 0 : i32
    %155 = arith.cmpi ne, %154, %c0_i32_69 : i32
    cf.cond_br %155, ^bb20, ^bb29
  ^bb28:  // pred: ^bb25
    %c1_i32_70 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_70) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // pred: ^bb27
    cf.br ^bb19
  }
  func.func @f33(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %7 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %12 = llvm.load %8 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %13 = arith.subi %12, %c32_i32 : i32
    llvm.store %13, %3 : i32, !llvm.ptr
    llvm.store %13, %8 : i32, !llvm.ptr
    %14 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %15 = arith.addi %14, %c24_i32 : i32
    %16 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i32_6 = arith.constant 24 : i32
    %17 = arith.addi %16, %c24_i32_6 : i32
    %c0_i64 = arith.constant 0 : i64
    %18 = arith.extui %17 : i32 to i64
    %19 = arith.addi %18, %c0_i64 : i64
    %c8_i64 = arith.constant 8 : i64
    %20 = arith.addi %19, %c8_i64 : i64
    %c0_i32_7 = arith.constant 0 : i32
    %21 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_7) : (!llvm.ptr, i32) -> i32
    %22 = arith.extui %21 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %23 = arith.muli %22, %c65536_i64 : i64
    %24 = arith.cmpi ult, %20, %23 : i64
    cf.cond_br %24, ^bb3, ^bb4
  ^bb2:  // pred: ^bb32
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %25 = llvm.getelementptr %11[%19] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %26 = llvm.load volatile %25 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_8 = arith.constant 0 : i64
    %27 = arith.extui %15 : i32 to i64
    %28 = arith.addi %27, %c0_i64_8 : i64
    %c8_i64_9 = arith.constant 8 : i64
    %29 = arith.addi %28, %c8_i64_9 : i64
    %c0_i32_10 = arith.constant 0 : i32
    %30 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_10) : (!llvm.ptr, i32) -> i32
    %31 = arith.extui %30 : i32 to i64
    %c65536_i64_11 = arith.constant 65536 : i64
    %32 = arith.muli %31, %c65536_i64_11 : i64
    %33 = arith.cmpi ult, %29, %32 : i64
    cf.cond_br %33, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c1_i32_12 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_12) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %34 = llvm.getelementptr %11[%28] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %26, %34 {alignment = 1 : i64} : i64, !llvm.ptr
    %35 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %36 = arith.addi %35, %c16_i32 : i32
    %37 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32_13 = arith.constant 16 : i32
    %38 = arith.addi %37, %c16_i32_13 : i32
    %c0_i64_14 = arith.constant 0 : i64
    %39 = arith.extui %38 : i32 to i64
    %40 = arith.addi %39, %c0_i64_14 : i64
    %c8_i64_15 = arith.constant 8 : i64
    %41 = arith.addi %40, %c8_i64_15 : i64
    %c0_i32_16 = arith.constant 0 : i32
    %42 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_16) : (!llvm.ptr, i32) -> i32
    %43 = arith.extui %42 : i32 to i64
    %c65536_i64_17 = arith.constant 65536 : i64
    %44 = arith.muli %43, %c65536_i64_17 : i64
    %45 = arith.cmpi ult, %41, %44 : i64
    cf.cond_br %45, ^bb7, ^bb8
  ^bb6:  // pred: ^bb3
    %c1_i32_18 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_18) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %46 = llvm.getelementptr %11[%40] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %47 = llvm.load volatile %46 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_19 = arith.constant 0 : i64
    %48 = arith.extui %36 : i32 to i64
    %49 = arith.addi %48, %c0_i64_19 : i64
    %c8_i64_20 = arith.constant 8 : i64
    %50 = arith.addi %49, %c8_i64_20 : i64
    %c0_i32_21 = arith.constant 0 : i32
    %51 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_21) : (!llvm.ptr, i32) -> i32
    %52 = arith.extui %51 : i32 to i64
    %c65536_i64_22 = arith.constant 65536 : i64
    %53 = arith.muli %52, %c65536_i64_22 : i64
    %54 = arith.cmpi ult, %50, %53 : i64
    cf.cond_br %54, ^bb9, ^bb10
  ^bb8:  // pred: ^bb5
    %c1_i32_23 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_23) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %55 = llvm.getelementptr %11[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %47, %55 {alignment = 1 : i64} : i64, !llvm.ptr
    %56 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %57 = arith.addi %56, %c8_i32 : i32
    %58 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_24 = arith.constant 8 : i32
    %59 = arith.addi %58, %c8_i32_24 : i32
    %c0_i64_25 = arith.constant 0 : i64
    %60 = arith.extui %59 : i32 to i64
    %61 = arith.addi %60, %c0_i64_25 : i64
    %c8_i64_26 = arith.constant 8 : i64
    %62 = arith.addi %61, %c8_i64_26 : i64
    %c0_i32_27 = arith.constant 0 : i32
    %63 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_27) : (!llvm.ptr, i32) -> i32
    %64 = arith.extui %63 : i32 to i64
    %c65536_i64_28 = arith.constant 65536 : i64
    %65 = arith.muli %64, %c65536_i64_28 : i64
    %66 = arith.cmpi ult, %62, %65 : i64
    cf.cond_br %66, ^bb11, ^bb12
  ^bb10:  // pred: ^bb7
    %c1_i32_29 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_29) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %67 = llvm.getelementptr %11[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %68 = llvm.load volatile %67 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_30 = arith.constant 0 : i64
    %69 = arith.extui %57 : i32 to i64
    %70 = arith.addi %69, %c0_i64_30 : i64
    %c8_i64_31 = arith.constant 8 : i64
    %71 = arith.addi %70, %c8_i64_31 : i64
    %c0_i32_32 = arith.constant 0 : i32
    %72 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_32) : (!llvm.ptr, i32) -> i32
    %73 = arith.extui %72 : i32 to i64
    %c65536_i64_33 = arith.constant 65536 : i64
    %74 = arith.muli %73, %c65536_i64_33 : i64
    %75 = arith.cmpi ult, %71, %74 : i64
    cf.cond_br %75, ^bb13, ^bb14
  ^bb12:  // pred: ^bb9
    %c1_i32_34 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_34) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %76 = llvm.getelementptr %11[%70] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %68, %76 {alignment = 1 : i64} : i64, !llvm.ptr
    %77 = llvm.load %3 : !llvm.ptr -> i32
    %78 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_35 = arith.constant 0 : i64
    %79 = arith.extui %78 : i32 to i64
    %80 = arith.addi %79, %c0_i64_35 : i64
    %c8_i64_36 = arith.constant 8 : i64
    %81 = arith.addi %80, %c8_i64_36 : i64
    %c0_i32_37 = arith.constant 0 : i32
    %82 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_37) : (!llvm.ptr, i32) -> i32
    %83 = arith.extui %82 : i32 to i64
    %c65536_i64_38 = arith.constant 65536 : i64
    %84 = arith.muli %83, %c65536_i64_38 : i64
    %85 = arith.cmpi ult, %81, %84 : i64
    cf.cond_br %85, ^bb15, ^bb16
  ^bb14:  // pred: ^bb11
    %c1_i32_39 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_39) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // 2 preds: ^bb13, ^bb16
    %86 = llvm.getelementptr %11[%80] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %87 = llvm.load volatile %86 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_40 = arith.constant 0 : i64
    %88 = arith.extui %77 : i32 to i64
    %89 = arith.addi %88, %c0_i64_40 : i64
    %c8_i64_41 = arith.constant 8 : i64
    %90 = arith.addi %89, %c8_i64_41 : i64
    %c0_i32_42 = arith.constant 0 : i32
    %91 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_42) : (!llvm.ptr, i32) -> i32
    %92 = arith.extui %91 : i32 to i64
    %c65536_i64_43 = arith.constant 65536 : i64
    %93 = arith.muli %92, %c65536_i64_43 : i64
    %94 = arith.cmpi ult, %90, %93 : i64
    cf.cond_br %94, ^bb17, ^bb18
  ^bb16:  // pred: ^bb13
    %c1_i32_44 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_44) : (i32) -> ()
    cf.br ^bb15
  ^bb17:  // 2 preds: ^bb15, ^bb18
    %95 = llvm.getelementptr %11[%89] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %87, %95 {alignment = 1 : i64} : i64, !llvm.ptr
    %96 = llvm.load %3 : !llvm.ptr -> i32
    %c31_i32 = arith.constant 31 : i32
    %97 = arith.addi %96, %c31_i32 : i32
    llvm.store %97, %1 : i32, !llvm.ptr
    %c0_i32_45 = arith.constant 0 : i32
    llvm.store %c0_i32_45, %4 : i32, !llvm.ptr
    cf.br ^bb20
  ^bb18:  // pred: ^bb15
    %c1_i32_46 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_46) : (i32) -> ()
    cf.br ^bb17
  ^bb19:  // pred: ^bb29
    %98 = llvm.load %0 : !llvm.ptr -> i32
    %99 = llvm.load %2 : !llvm.ptr -> i32
    %100 = llvm.load %3 : !llvm.ptr -> i32
    call @f74(%arg0, %98, %99, %100) : (!llvm.ptr, i32, i32, i32) -> ()
    %101 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_47 = arith.constant 0 : i32
    %c72_i64 = arith.constant 72 : i64
    %102 = arith.extui %101 : i32 to i64
    %103 = arith.addi %102, %c72_i64 : i64
    %c1_i64 = arith.constant 1 : i64
    %104 = arith.addi %103, %c1_i64 : i64
    %c0_i32_48 = arith.constant 0 : i32
    %105 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_48) : (!llvm.ptr, i32) -> i32
    %106 = arith.extui %105 : i32 to i64
    %c65536_i64_49 = arith.constant 65536 : i64
    %107 = arith.muli %106, %c65536_i64_49 : i64
    %108 = arith.cmpi ult, %104, %107 : i64
    cf.cond_br %108, ^bb30, ^bb31
  ^bb20:  // 2 preds: ^bb17, ^bb27
    %109 = llvm.load %3 : !llvm.ptr -> i32
    %110 = llvm.load %4 : !llvm.ptr -> i32
    %111 = arith.addi %109, %110 : i32
    llvm.store %111, %5 : i32, !llvm.ptr
    %c0_i64_50 = arith.constant 0 : i64
    %112 = arith.extui %111 : i32 to i64
    %113 = arith.addi %112, %c0_i64_50 : i64
    %c1_i64_51 = arith.constant 1 : i64
    %114 = arith.addi %113, %c1_i64_51 : i64
    %c0_i32_52 = arith.constant 0 : i32
    %115 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_52) : (!llvm.ptr, i32) -> i32
    %116 = arith.extui %115 : i32 to i64
    %c65536_i64_53 = arith.constant 65536 : i64
    %117 = arith.muli %116, %c65536_i64_53 : i64
    %118 = arith.cmpi ult, %114, %117 : i64
    cf.cond_br %118, ^bb21, ^bb22
  ^bb21:  // 2 preds: ^bb20, ^bb22
    %119 = llvm.getelementptr %11[%113] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %120 = llvm.load volatile %119 {alignment = 1 : i64} : !llvm.ptr -> i8
    %121 = arith.extui %120 : i8 to i32
    llvm.store %121, %6 : i32, !llvm.ptr
    %122 = llvm.load %5 : !llvm.ptr -> i32
    %123 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_54 = arith.constant 0 : i64
    %124 = arith.extui %123 : i32 to i64
    %125 = arith.addi %124, %c0_i64_54 : i64
    %c1_i64_55 = arith.constant 1 : i64
    %126 = arith.addi %125, %c1_i64_55 : i64
    %c0_i32_56 = arith.constant 0 : i32
    %127 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_56) : (!llvm.ptr, i32) -> i32
    %128 = arith.extui %127 : i32 to i64
    %c65536_i64_57 = arith.constant 65536 : i64
    %129 = arith.muli %128, %c65536_i64_57 : i64
    %130 = arith.cmpi ult, %126, %129 : i64
    cf.cond_br %130, ^bb23, ^bb24
  ^bb22:  // pred: ^bb20
    %c1_i32_58 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_58) : (i32) -> ()
    cf.br ^bb21
  ^bb23:  // 2 preds: ^bb21, ^bb24
    %131 = llvm.getelementptr %11[%125] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %132 = llvm.load volatile %131 {alignment = 1 : i64} : !llvm.ptr -> i8
    %133 = arith.extui %132 : i8 to i32
    %c0_i64_59 = arith.constant 0 : i64
    %134 = arith.extui %122 : i32 to i64
    %135 = arith.addi %134, %c0_i64_59 : i64
    %c1_i64_60 = arith.constant 1 : i64
    %136 = arith.addi %135, %c1_i64_60 : i64
    %c0_i32_61 = arith.constant 0 : i32
    %137 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_61) : (!llvm.ptr, i32) -> i32
    %138 = arith.extui %137 : i32 to i64
    %c65536_i64_62 = arith.constant 65536 : i64
    %139 = arith.muli %138, %c65536_i64_62 : i64
    %140 = arith.cmpi ult, %136, %139 : i64
    cf.cond_br %140, ^bb25, ^bb26
  ^bb24:  // pred: ^bb21
    %c1_i32_63 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_63) : (i32) -> ()
    cf.br ^bb23
  ^bb25:  // 2 preds: ^bb23, ^bb26
    %141 = llvm.getelementptr %11[%135] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %142 = arith.trunci %133 : i32 to i8
    llvm.store volatile %142, %141 {alignment = 1 : i64} : i8, !llvm.ptr
    %143 = llvm.load %1 : !llvm.ptr -> i32
    %144 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_64 = arith.constant 0 : i64
    %145 = arith.extui %143 : i32 to i64
    %146 = arith.addi %145, %c0_i64_64 : i64
    %c1_i64_65 = arith.constant 1 : i64
    %147 = arith.addi %146, %c1_i64_65 : i64
    %c0_i32_66 = arith.constant 0 : i32
    %148 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_66) : (!llvm.ptr, i32) -> i32
    %149 = arith.extui %148 : i32 to i64
    %c65536_i64_67 = arith.constant 65536 : i64
    %150 = arith.muli %149, %c65536_i64_67 : i64
    %151 = arith.cmpi ult, %147, %150 : i64
    cf.cond_br %151, ^bb27, ^bb28
  ^bb26:  // pred: ^bb23
    %c1_i32_68 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_68) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // 2 preds: ^bb25, ^bb28
    %152 = llvm.getelementptr %11[%146] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %153 = arith.trunci %144 : i32 to i8
    llvm.store volatile %153, %152 {alignment = 1 : i64} : i8, !llvm.ptr
    %154 = llvm.load %1 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %155 = arith.addi %154, %c-1_i32 : i32
    llvm.store %155, %1 : i32, !llvm.ptr
    %156 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i32_69 = arith.constant 1 : i32
    %157 = arith.addi %156, %c1_i32_69 : i32
    llvm.store %157, %4 : i32, !llvm.ptr
    %c16_i32_70 = arith.constant 16 : i32
    %158 = arith.cmpi eq, %157, %c16_i32_70 : i32
    %159 = arith.extui %158 : i1 to i32
    %c0_i32_71 = arith.constant 0 : i32
    %160 = arith.cmpi eq, %159, %c0_i32_71 : i32
    %161 = arith.extui %160 : i1 to i32
    %c0_i32_72 = arith.constant 0 : i32
    %162 = arith.cmpi ne, %161, %c0_i32_72 : i32
    cf.cond_br %162, ^bb20, ^bb29
  ^bb28:  // pred: ^bb25
    %c1_i32_73 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_73) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // pred: ^bb27
    cf.br ^bb19
  ^bb30:  // 2 preds: ^bb19, ^bb31
    %163 = llvm.getelementptr %11[%103] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %164 = arith.trunci %c0_i32_47 : i32 to i8
    llvm.store volatile %164, %163 {alignment = 1 : i64} : i8, !llvm.ptr
    %165 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_74 = arith.constant 0 : i64
    %c32_i64 = arith.constant 32 : i64
    %166 = arith.extui %165 : i32 to i64
    %167 = arith.addi %166, %c32_i64 : i64
    %c8_i64_75 = arith.constant 8 : i64
    %168 = arith.addi %167, %c8_i64_75 : i64
    %c0_i32_76 = arith.constant 0 : i32
    %169 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_76) : (!llvm.ptr, i32) -> i32
    %170 = arith.extui %169 : i32 to i64
    %c65536_i64_77 = arith.constant 65536 : i64
    %171 = arith.muli %170, %c65536_i64_77 : i64
    %172 = arith.cmpi ult, %168, %171 : i64
    cf.cond_br %172, ^bb32, ^bb33
  ^bb31:  // pred: ^bb19
    %c1_i32_78 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_78) : (i32) -> ()
    cf.br ^bb30
  ^bb32:  // 2 preds: ^bb30, ^bb33
    %173 = llvm.getelementptr %11[%167] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_74, %173 {alignment = 1 : i64} : i64, !llvm.ptr
    %174 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_79 = arith.constant 32 : i32
    %175 = arith.addi %174, %c32_i32_79 : i32
    llvm.store %175, %8 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb33:  // pred: ^bb30
    %c1_i32_80 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_80) : (i32) -> ()
    cf.br ^bb32
  }
  func.func @f34(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %7 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %12 = llvm.load %8 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %13 = arith.subi %12, %c32_i32 : i32
    llvm.store %13, %3 : i32, !llvm.ptr
    llvm.store %13, %8 : i32, !llvm.ptr
    %14 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %15 = arith.addi %14, %c24_i32 : i32
    %16 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i32_6 = arith.constant 24 : i32
    %17 = arith.addi %16, %c24_i32_6 : i32
    %c0_i64 = arith.constant 0 : i64
    %18 = arith.extui %17 : i32 to i64
    %19 = arith.addi %18, %c0_i64 : i64
    %c8_i64 = arith.constant 8 : i64
    %20 = arith.addi %19, %c8_i64 : i64
    %c0_i32_7 = arith.constant 0 : i32
    %21 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_7) : (!llvm.ptr, i32) -> i32
    %22 = arith.extui %21 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %23 = arith.muli %22, %c65536_i64 : i64
    %24 = arith.cmpi ult, %20, %23 : i64
    cf.cond_br %24, ^bb3, ^bb4
  ^bb2:  // pred: ^bb19
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %25 = llvm.getelementptr %11[%19] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %26 = llvm.load volatile %25 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_8 = arith.constant 0 : i64
    %27 = arith.extui %15 : i32 to i64
    %28 = arith.addi %27, %c0_i64_8 : i64
    %c8_i64_9 = arith.constant 8 : i64
    %29 = arith.addi %28, %c8_i64_9 : i64
    %c0_i32_10 = arith.constant 0 : i32
    %30 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_10) : (!llvm.ptr, i32) -> i32
    %31 = arith.extui %30 : i32 to i64
    %c65536_i64_11 = arith.constant 65536 : i64
    %32 = arith.muli %31, %c65536_i64_11 : i64
    %33 = arith.cmpi ult, %29, %32 : i64
    cf.cond_br %33, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c1_i32_12 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_12) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %34 = llvm.getelementptr %11[%28] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %26, %34 {alignment = 1 : i64} : i64, !llvm.ptr
    %35 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %36 = arith.addi %35, %c16_i32 : i32
    %37 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32_13 = arith.constant 16 : i32
    %38 = arith.addi %37, %c16_i32_13 : i32
    %c0_i64_14 = arith.constant 0 : i64
    %39 = arith.extui %38 : i32 to i64
    %40 = arith.addi %39, %c0_i64_14 : i64
    %c8_i64_15 = arith.constant 8 : i64
    %41 = arith.addi %40, %c8_i64_15 : i64
    %c0_i32_16 = arith.constant 0 : i32
    %42 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_16) : (!llvm.ptr, i32) -> i32
    %43 = arith.extui %42 : i32 to i64
    %c65536_i64_17 = arith.constant 65536 : i64
    %44 = arith.muli %43, %c65536_i64_17 : i64
    %45 = arith.cmpi ult, %41, %44 : i64
    cf.cond_br %45, ^bb7, ^bb8
  ^bb6:  // pred: ^bb3
    %c1_i32_18 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_18) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %46 = llvm.getelementptr %11[%40] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %47 = llvm.load volatile %46 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_19 = arith.constant 0 : i64
    %48 = arith.extui %36 : i32 to i64
    %49 = arith.addi %48, %c0_i64_19 : i64
    %c8_i64_20 = arith.constant 8 : i64
    %50 = arith.addi %49, %c8_i64_20 : i64
    %c0_i32_21 = arith.constant 0 : i32
    %51 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_21) : (!llvm.ptr, i32) -> i32
    %52 = arith.extui %51 : i32 to i64
    %c65536_i64_22 = arith.constant 65536 : i64
    %53 = arith.muli %52, %c65536_i64_22 : i64
    %54 = arith.cmpi ult, %50, %53 : i64
    cf.cond_br %54, ^bb9, ^bb10
  ^bb8:  // pred: ^bb5
    %c1_i32_23 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_23) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %55 = llvm.getelementptr %11[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %47, %55 {alignment = 1 : i64} : i64, !llvm.ptr
    %56 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %57 = arith.addi %56, %c8_i32 : i32
    %58 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_24 = arith.constant 8 : i32
    %59 = arith.addi %58, %c8_i32_24 : i32
    %c0_i64_25 = arith.constant 0 : i64
    %60 = arith.extui %59 : i32 to i64
    %61 = arith.addi %60, %c0_i64_25 : i64
    %c8_i64_26 = arith.constant 8 : i64
    %62 = arith.addi %61, %c8_i64_26 : i64
    %c0_i32_27 = arith.constant 0 : i32
    %63 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_27) : (!llvm.ptr, i32) -> i32
    %64 = arith.extui %63 : i32 to i64
    %c65536_i64_28 = arith.constant 65536 : i64
    %65 = arith.muli %64, %c65536_i64_28 : i64
    %66 = arith.cmpi ult, %62, %65 : i64
    cf.cond_br %66, ^bb11, ^bb12
  ^bb10:  // pred: ^bb7
    %c1_i32_29 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_29) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %67 = llvm.getelementptr %11[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %68 = llvm.load volatile %67 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_30 = arith.constant 0 : i64
    %69 = arith.extui %57 : i32 to i64
    %70 = arith.addi %69, %c0_i64_30 : i64
    %c8_i64_31 = arith.constant 8 : i64
    %71 = arith.addi %70, %c8_i64_31 : i64
    %c0_i32_32 = arith.constant 0 : i32
    %72 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_32) : (!llvm.ptr, i32) -> i32
    %73 = arith.extui %72 : i32 to i64
    %c65536_i64_33 = arith.constant 65536 : i64
    %74 = arith.muli %73, %c65536_i64_33 : i64
    %75 = arith.cmpi ult, %71, %74 : i64
    cf.cond_br %75, ^bb13, ^bb14
  ^bb12:  // pred: ^bb9
    %c1_i32_34 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_34) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %76 = llvm.getelementptr %11[%70] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %68, %76 {alignment = 1 : i64} : i64, !llvm.ptr
    %77 = llvm.load %3 : !llvm.ptr -> i32
    %78 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_35 = arith.constant 0 : i64
    %79 = arith.extui %78 : i32 to i64
    %80 = arith.addi %79, %c0_i64_35 : i64
    %c8_i64_36 = arith.constant 8 : i64
    %81 = arith.addi %80, %c8_i64_36 : i64
    %c0_i32_37 = arith.constant 0 : i32
    %82 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_37) : (!llvm.ptr, i32) -> i32
    %83 = arith.extui %82 : i32 to i64
    %c65536_i64_38 = arith.constant 65536 : i64
    %84 = arith.muli %83, %c65536_i64_38 : i64
    %85 = arith.cmpi ult, %81, %84 : i64
    cf.cond_br %85, ^bb15, ^bb16
  ^bb14:  // pred: ^bb11
    %c1_i32_39 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_39) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // 2 preds: ^bb13, ^bb16
    %86 = llvm.getelementptr %11[%80] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %87 = llvm.load volatile %86 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_40 = arith.constant 0 : i64
    %88 = arith.extui %77 : i32 to i64
    %89 = arith.addi %88, %c0_i64_40 : i64
    %c8_i64_41 = arith.constant 8 : i64
    %90 = arith.addi %89, %c8_i64_41 : i64
    %c0_i32_42 = arith.constant 0 : i32
    %91 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_42) : (!llvm.ptr, i32) -> i32
    %92 = arith.extui %91 : i32 to i64
    %c65536_i64_43 = arith.constant 65536 : i64
    %93 = arith.muli %92, %c65536_i64_43 : i64
    %94 = arith.cmpi ult, %90, %93 : i64
    cf.cond_br %94, ^bb17, ^bb18
  ^bb16:  // pred: ^bb13
    %c1_i32_44 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_44) : (i32) -> ()
    cf.br ^bb15
  ^bb17:  // 2 preds: ^bb15, ^bb18
    %95 = llvm.getelementptr %11[%89] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %87, %95 {alignment = 1 : i64} : i64, !llvm.ptr
    %96 = llvm.load %3 : !llvm.ptr -> i32
    %c31_i32 = arith.constant 31 : i32
    %97 = arith.addi %96, %c31_i32 : i32
    llvm.store %97, %1 : i32, !llvm.ptr
    %c0_i32_45 = arith.constant 0 : i32
    llvm.store %c0_i32_45, %4 : i32, !llvm.ptr
    cf.br ^bb20
  ^bb18:  // pred: ^bb15
    %c1_i32_46 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_46) : (i32) -> ()
    cf.br ^bb17
  ^bb19:  // pred: ^bb29
    %98 = llvm.load %0 : !llvm.ptr -> i32
    %99 = llvm.load %2 : !llvm.ptr -> i32
    %100 = llvm.load %3 : !llvm.ptr -> i32
    call @f74(%arg0, %98, %99, %100) : (!llvm.ptr, i32, i32, i32) -> ()
    %101 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_47 = arith.constant 32 : i32
    %102 = arith.addi %101, %c32_i32_47 : i32
    llvm.store %102, %8 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb20:  // 2 preds: ^bb17, ^bb27
    %103 = llvm.load %3 : !llvm.ptr -> i32
    %104 = llvm.load %4 : !llvm.ptr -> i32
    %105 = arith.addi %103, %104 : i32
    llvm.store %105, %5 : i32, !llvm.ptr
    %c0_i64_48 = arith.constant 0 : i64
    %106 = arith.extui %105 : i32 to i64
    %107 = arith.addi %106, %c0_i64_48 : i64
    %c1_i64 = arith.constant 1 : i64
    %108 = arith.addi %107, %c1_i64 : i64
    %c0_i32_49 = arith.constant 0 : i32
    %109 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_49) : (!llvm.ptr, i32) -> i32
    %110 = arith.extui %109 : i32 to i64
    %c65536_i64_50 = arith.constant 65536 : i64
    %111 = arith.muli %110, %c65536_i64_50 : i64
    %112 = arith.cmpi ult, %108, %111 : i64
    cf.cond_br %112, ^bb21, ^bb22
  ^bb21:  // 2 preds: ^bb20, ^bb22
    %113 = llvm.getelementptr %11[%107] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %114 = llvm.load volatile %113 {alignment = 1 : i64} : !llvm.ptr -> i8
    %115 = arith.extui %114 : i8 to i32
    llvm.store %115, %6 : i32, !llvm.ptr
    %116 = llvm.load %5 : !llvm.ptr -> i32
    %117 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_51 = arith.constant 0 : i64
    %118 = arith.extui %117 : i32 to i64
    %119 = arith.addi %118, %c0_i64_51 : i64
    %c1_i64_52 = arith.constant 1 : i64
    %120 = arith.addi %119, %c1_i64_52 : i64
    %c0_i32_53 = arith.constant 0 : i32
    %121 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_53) : (!llvm.ptr, i32) -> i32
    %122 = arith.extui %121 : i32 to i64
    %c65536_i64_54 = arith.constant 65536 : i64
    %123 = arith.muli %122, %c65536_i64_54 : i64
    %124 = arith.cmpi ult, %120, %123 : i64
    cf.cond_br %124, ^bb23, ^bb24
  ^bb22:  // pred: ^bb20
    %c1_i32_55 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_55) : (i32) -> ()
    cf.br ^bb21
  ^bb23:  // 2 preds: ^bb21, ^bb24
    %125 = llvm.getelementptr %11[%119] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %126 = llvm.load volatile %125 {alignment = 1 : i64} : !llvm.ptr -> i8
    %127 = arith.extui %126 : i8 to i32
    %c0_i64_56 = arith.constant 0 : i64
    %128 = arith.extui %116 : i32 to i64
    %129 = arith.addi %128, %c0_i64_56 : i64
    %c1_i64_57 = arith.constant 1 : i64
    %130 = arith.addi %129, %c1_i64_57 : i64
    %c0_i32_58 = arith.constant 0 : i32
    %131 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_58) : (!llvm.ptr, i32) -> i32
    %132 = arith.extui %131 : i32 to i64
    %c65536_i64_59 = arith.constant 65536 : i64
    %133 = arith.muli %132, %c65536_i64_59 : i64
    %134 = arith.cmpi ult, %130, %133 : i64
    cf.cond_br %134, ^bb25, ^bb26
  ^bb24:  // pred: ^bb21
    %c1_i32_60 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_60) : (i32) -> ()
    cf.br ^bb23
  ^bb25:  // 2 preds: ^bb23, ^bb26
    %135 = llvm.getelementptr %11[%129] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %136 = arith.trunci %127 : i32 to i8
    llvm.store volatile %136, %135 {alignment = 1 : i64} : i8, !llvm.ptr
    %137 = llvm.load %1 : !llvm.ptr -> i32
    %138 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_61 = arith.constant 0 : i64
    %139 = arith.extui %137 : i32 to i64
    %140 = arith.addi %139, %c0_i64_61 : i64
    %c1_i64_62 = arith.constant 1 : i64
    %141 = arith.addi %140, %c1_i64_62 : i64
    %c0_i32_63 = arith.constant 0 : i32
    %142 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_63) : (!llvm.ptr, i32) -> i32
    %143 = arith.extui %142 : i32 to i64
    %c65536_i64_64 = arith.constant 65536 : i64
    %144 = arith.muli %143, %c65536_i64_64 : i64
    %145 = arith.cmpi ult, %141, %144 : i64
    cf.cond_br %145, ^bb27, ^bb28
  ^bb26:  // pred: ^bb23
    %c1_i32_65 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_65) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // 2 preds: ^bb25, ^bb28
    %146 = llvm.getelementptr %11[%140] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %147 = arith.trunci %138 : i32 to i8
    llvm.store volatile %147, %146 {alignment = 1 : i64} : i8, !llvm.ptr
    %148 = llvm.load %1 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %149 = arith.addi %148, %c-1_i32 : i32
    llvm.store %149, %1 : i32, !llvm.ptr
    %150 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i32_66 = arith.constant 1 : i32
    %151 = arith.addi %150, %c1_i32_66 : i32
    llvm.store %151, %4 : i32, !llvm.ptr
    %c16_i32_67 = arith.constant 16 : i32
    %152 = arith.cmpi eq, %151, %c16_i32_67 : i32
    %153 = arith.extui %152 : i1 to i32
    %c0_i32_68 = arith.constant 0 : i32
    %154 = arith.cmpi eq, %153, %c0_i32_68 : i32
    %155 = arith.extui %154 : i1 to i32
    %c0_i32_69 = arith.constant 0 : i32
    %156 = arith.cmpi ne, %155, %c0_i32_69 : i32
    cf.cond_br %156, ^bb20, ^bb29
  ^bb28:  // pred: ^bb25
    %c1_i32_70 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_70) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // pred: ^bb27
    cf.br ^bb19
  }
  func.func @f35(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %4 : i64, !llvm.ptr
    %5 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %7[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %10 = llvm.load %6 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %11 = arith.subi %10, %c64_i32 : i32
    llvm.store %11, %3 : i32, !llvm.ptr
    llvm.store %11, %6 : i32, !llvm.ptr
    %12 = llvm.load %3 : !llvm.ptr -> i32
    %13 = llvm.load %1 : !llvm.ptr -> i32
    call @f75(%arg0, %12, %13) : (!llvm.ptr, i32, i32) -> ()
    %14 = llvm.load %2 : !llvm.ptr -> i32
    %c33_i32 = arith.constant 33 : i32
    %15 = arith.cmpi uge, %14, %c33_i32 : i32
    %16 = arith.extui %15 : i1 to i32
    %c0_i32_4 = arith.constant 0 : i32
    %17 = arith.cmpi ne, %16, %c0_i32_4 : i32
    cf.cond_br %17, ^bb4, ^bb5
  ^bb2:  // pred: ^bb36
    return
  ^bb3:  // pred: ^bb5
    %c32_i32 = arith.constant 32 : i32
    %c32_i32_5 = arith.constant 32 : i32
    %18 = llvm.load %2 : !llvm.ptr -> i32
    %19 = arith.subi %c32_i32_5, %18 : i32
    %c1048788_i32 = arith.constant 1048788 : i32
    call @f146(%arg0, %c32_i32, %19, %c1048788_i32) : (!llvm.ptr, i32, i32, i32) -> ()
    llvm.unreachable
  ^bb4:  // pred: ^bb1
    %20 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32_6 = arith.constant 32 : i32
    %c1048772_i32 = arith.constant 1048772 : i32
    call @f145(%arg0, %20, %c32_i32_6, %c1048772_i32) : (!llvm.ptr, i32, i32, i32) -> ()
    llvm.unreachable
  ^bb5:  // pred: ^bb1
    %21 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_7 = arith.constant 0 : i32
    %22 = arith.cmpi ne, %21, %c0_i32_7 : i32
    cf.cond_br %22, ^bb3, ^bb6
  ^bb6:  // pred: ^bb5
    %c24_i32 = arith.constant 24 : i32
    llvm.store %c24_i32, %2 : i32, !llvm.ptr
    %23 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_8 = arith.constant 32 : i32
    %24 = arith.addi %23, %c32_i32_8 : i32
    %c24_i32_9 = arith.constant 24 : i32
    %25 = arith.addi %24, %c24_i32_9 : i32
    %c0_i64_10 = arith.constant 0 : i64
    %c0_i64_11 = arith.constant 0 : i64
    %26 = arith.extui %25 : i32 to i64
    %27 = arith.addi %26, %c0_i64_11 : i64
    %c8_i64 = arith.constant 8 : i64
    %28 = arith.addi %27, %c8_i64 : i64
    %c0_i32_12 = arith.constant 0 : i32
    %29 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_12) : (!llvm.ptr, i32) -> i32
    %30 = arith.extui %29 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %31 = arith.muli %30, %c65536_i64 : i64
    %32 = arith.cmpi ult, %28, %31 : i64
    cf.cond_br %32, ^bb7, ^bb8
  ^bb7:  // 2 preds: ^bb6, ^bb8
    %33 = llvm.getelementptr %9[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_10, %33 {alignment = 1 : i64} : i64, !llvm.ptr
    %34 = llvm.load %3 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %35 = arith.addi %34, %c48_i32 : i32
    %c0_i64_13 = arith.constant 0 : i64
    %c0_i64_14 = arith.constant 0 : i64
    %36 = arith.extui %35 : i32 to i64
    %37 = arith.addi %36, %c0_i64_14 : i64
    %c8_i64_15 = arith.constant 8 : i64
    %38 = arith.addi %37, %c8_i64_15 : i64
    %c0_i32_16 = arith.constant 0 : i32
    %39 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_16) : (!llvm.ptr, i32) -> i32
    %40 = arith.extui %39 : i32 to i64
    %c65536_i64_17 = arith.constant 65536 : i64
    %41 = arith.muli %40, %c65536_i64_17 : i64
    %42 = arith.cmpi ult, %38, %41 : i64
    cf.cond_br %42, ^bb9, ^bb10
  ^bb8:  // pred: ^bb6
    %c1_i32_18 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_18) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %43 = llvm.getelementptr %9[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_13, %43 {alignment = 1 : i64} : i64, !llvm.ptr
    %44 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_19 = arith.constant 32 : i32
    %45 = arith.addi %44, %c32_i32_19 : i32
    %c8_i32 = arith.constant 8 : i32
    %46 = arith.addi %45, %c8_i32 : i32
    %c0_i64_20 = arith.constant 0 : i64
    %c0_i64_21 = arith.constant 0 : i64
    %47 = arith.extui %46 : i32 to i64
    %48 = arith.addi %47, %c0_i64_21 : i64
    %c8_i64_22 = arith.constant 8 : i64
    %49 = arith.addi %48, %c8_i64_22 : i64
    %c0_i32_23 = arith.constant 0 : i32
    %50 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_23) : (!llvm.ptr, i32) -> i32
    %51 = arith.extui %50 : i32 to i64
    %c65536_i64_24 = arith.constant 65536 : i64
    %52 = arith.muli %51, %c65536_i64_24 : i64
    %53 = arith.cmpi ult, %49, %52 : i64
    cf.cond_br %53, ^bb11, ^bb12
  ^bb10:  // pred: ^bb7
    %c1_i32_25 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_25) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %54 = llvm.getelementptr %9[%48] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_20, %54 {alignment = 1 : i64} : i64, !llvm.ptr
    %55 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_26 = arith.constant 0 : i64
    %c32_i64 = arith.constant 32 : i64
    %56 = arith.extui %55 : i32 to i64
    %57 = arith.addi %56, %c32_i64 : i64
    %c8_i64_27 = arith.constant 8 : i64
    %58 = arith.addi %57, %c8_i64_27 : i64
    %c0_i32_28 = arith.constant 0 : i32
    %59 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_28) : (!llvm.ptr, i32) -> i32
    %60 = arith.extui %59 : i32 to i64
    %c65536_i64_29 = arith.constant 65536 : i64
    %61 = arith.muli %60, %c65536_i64_29 : i64
    %62 = arith.cmpi ult, %58, %61 : i64
    cf.cond_br %62, ^bb13, ^bb14
  ^bb12:  // pred: ^bb9
    %c1_i32_30 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_30) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %63 = llvm.getelementptr %9[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_26, %63 {alignment = 1 : i64} : i64, !llvm.ptr
    %64 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_31 = arith.constant 32 : i32
    %65 = arith.addi %64, %c32_i32_31 : i32
    llvm.store %65, %1 : i32, !llvm.ptr
    cf.br ^bb16
  ^bb14:  // pred: ^bb11
    %c1_i32_32 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_32) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // pred: ^bb21
    %66 = llvm.load %0 : !llvm.ptr -> i32
    %67 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i64_33 = arith.constant 32 : i64
    %68 = arith.extui %67 : i32 to i64
    %69 = arith.addi %68, %c32_i64_33 : i64
    %c8_i64_34 = arith.constant 8 : i64
    %70 = arith.addi %69, %c8_i64_34 : i64
    %c0_i32_35 = arith.constant 0 : i32
    %71 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_35) : (!llvm.ptr, i32) -> i32
    %72 = arith.extui %71 : i32 to i64
    %c65536_i64_36 = arith.constant 65536 : i64
    %73 = arith.muli %72, %c65536_i64_36 : i64
    %74 = arith.cmpi ult, %70, %73 : i64
    cf.cond_br %74, ^bb22, ^bb23
  ^bb16:  // 2 preds: ^bb13, ^bb19
    %75 = llvm.load %1 : !llvm.ptr -> i32
    %76 = llvm.load %3 : !llvm.ptr -> i32
    %77 = llvm.load %2 : !llvm.ptr -> i32
    %78 = arith.addi %76, %77 : i32
    %c0_i64_37 = arith.constant 0 : i64
    %79 = arith.extui %78 : i32 to i64
    %80 = arith.addi %79, %c0_i64_37 : i64
    %c8_i64_38 = arith.constant 8 : i64
    %81 = arith.addi %80, %c8_i64_38 : i64
    %c0_i32_39 = arith.constant 0 : i32
    %82 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_39) : (!llvm.ptr, i32) -> i32
    %83 = arith.extui %82 : i32 to i64
    %c65536_i64_40 = arith.constant 65536 : i64
    %84 = arith.muli %83, %c65536_i64_40 : i64
    %85 = arith.cmpi ult, %81, %84 : i64
    cf.cond_br %85, ^bb17, ^bb18
  ^bb17:  // 2 preds: ^bb16, ^bb18
    %86 = llvm.getelementptr %9[%80] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %87 = llvm.load volatile %86 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %87, %4 : i64, !llvm.ptr
    %c56_i64 = arith.constant 56 : i64
    %c63_i64 = arith.constant 63 : i64
    %88 = arith.cmpi ule, %c56_i64, %c63_i64 : i64
    %89 = scf.if %88 -> (i64) {
      %219 = arith.shli %87, %c56_i64 : i64
      scf.yield %219 : i64
    } else {
      %c0_i64_111 = arith.constant 0 : i64
      scf.yield %c0_i64_111 : i64
    }
    %90 = llvm.load %4 : !llvm.ptr -> i64
    %c65280_i64 = arith.constant 65280 : i64
    %91 = arith.andi %90, %c65280_i64 : i64
    %c40_i64 = arith.constant 40 : i64
    %c63_i64_41 = arith.constant 63 : i64
    %92 = arith.cmpi ule, %c40_i64, %c63_i64_41 : i64
    %93 = scf.if %92 -> (i64) {
      %219 = arith.shli %91, %c40_i64 : i64
      scf.yield %219 : i64
    } else {
      %c0_i64_111 = arith.constant 0 : i64
      scf.yield %c0_i64_111 : i64
    }
    %94 = arith.ori %89, %93 : i64
    %95 = llvm.load %4 : !llvm.ptr -> i64
    %c16711680_i64 = arith.constant 16711680 : i64
    %96 = arith.andi %95, %c16711680_i64 : i64
    %c24_i64 = arith.constant 24 : i64
    %c63_i64_42 = arith.constant 63 : i64
    %97 = arith.cmpi ule, %c24_i64, %c63_i64_42 : i64
    %98 = scf.if %97 -> (i64) {
      %219 = arith.shli %96, %c24_i64 : i64
      scf.yield %219 : i64
    } else {
      %c0_i64_111 = arith.constant 0 : i64
      scf.yield %c0_i64_111 : i64
    }
    %99 = llvm.load %4 : !llvm.ptr -> i64
    %c4278190080_i64 = arith.constant 4278190080 : i64
    %100 = arith.andi %99, %c4278190080_i64 : i64
    %c8_i64_43 = arith.constant 8 : i64
    %c63_i64_44 = arith.constant 63 : i64
    %101 = arith.cmpi ule, %c8_i64_43, %c63_i64_44 : i64
    %102 = scf.if %101 -> (i64) {
      %219 = arith.shli %100, %c8_i64_43 : i64
      scf.yield %219 : i64
    } else {
      %c0_i64_111 = arith.constant 0 : i64
      scf.yield %c0_i64_111 : i64
    }
    %103 = arith.ori %98, %102 : i64
    %104 = arith.ori %94, %103 : i64
    %105 = llvm.load %4 : !llvm.ptr -> i64
    %c8_i64_45 = arith.constant 8 : i64
    %c63_i64_46 = arith.constant 63 : i64
    %106 = arith.cmpi ule, %c8_i64_45, %c63_i64_46 : i64
    %107 = scf.if %106 -> (i64) {
      %219 = arith.shrui %105, %c8_i64_45 : i64
      scf.yield %219 : i64
    } else {
      %c0_i64_111 = arith.constant 0 : i64
      scf.yield %c0_i64_111 : i64
    }
    %c4278190080_i64_47 = arith.constant 4278190080 : i64
    %108 = arith.andi %107, %c4278190080_i64_47 : i64
    %109 = llvm.load %4 : !llvm.ptr -> i64
    %c24_i64_48 = arith.constant 24 : i64
    %c63_i64_49 = arith.constant 63 : i64
    %110 = arith.cmpi ule, %c24_i64_48, %c63_i64_49 : i64
    %111 = scf.if %110 -> (i64) {
      %219 = arith.shrui %109, %c24_i64_48 : i64
      scf.yield %219 : i64
    } else {
      %c0_i64_111 = arith.constant 0 : i64
      scf.yield %c0_i64_111 : i64
    }
    %c16711680_i64_50 = arith.constant 16711680 : i64
    %112 = arith.andi %111, %c16711680_i64_50 : i64
    %113 = arith.ori %108, %112 : i64
    %114 = llvm.load %4 : !llvm.ptr -> i64
    %c40_i64_51 = arith.constant 40 : i64
    %c63_i64_52 = arith.constant 63 : i64
    %115 = arith.cmpi ule, %c40_i64_51, %c63_i64_52 : i64
    %116 = scf.if %115 -> (i64) {
      %219 = arith.shrui %114, %c40_i64_51 : i64
      scf.yield %219 : i64
    } else {
      %c0_i64_111 = arith.constant 0 : i64
      scf.yield %c0_i64_111 : i64
    }
    %c65280_i64_53 = arith.constant 65280 : i64
    %117 = arith.andi %116, %c65280_i64_53 : i64
    %118 = llvm.load %4 : !llvm.ptr -> i64
    %c56_i64_54 = arith.constant 56 : i64
    %c63_i64_55 = arith.constant 63 : i64
    %119 = arith.cmpi ule, %c56_i64_54, %c63_i64_55 : i64
    %120 = scf.if %119 -> (i64) {
      %219 = arith.shrui %118, %c56_i64_54 : i64
      scf.yield %219 : i64
    } else {
      %c0_i64_111 = arith.constant 0 : i64
      scf.yield %c0_i64_111 : i64
    }
    %121 = arith.ori %117, %120 : i64
    %122 = arith.ori %113, %121 : i64
    %123 = arith.ori %104, %122 : i64
    %c0_i64_56 = arith.constant 0 : i64
    %124 = arith.extui %75 : i32 to i64
    %125 = arith.addi %124, %c0_i64_56 : i64
    %c8_i64_57 = arith.constant 8 : i64
    %126 = arith.addi %125, %c8_i64_57 : i64
    %c0_i32_58 = arith.constant 0 : i32
    %127 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_58) : (!llvm.ptr, i32) -> i32
    %128 = arith.extui %127 : i32 to i64
    %c65536_i64_59 = arith.constant 65536 : i64
    %129 = arith.muli %128, %c65536_i64_59 : i64
    %130 = arith.cmpi ult, %126, %129 : i64
    cf.cond_br %130, ^bb19, ^bb20
  ^bb18:  // pred: ^bb16
    %c1_i32_60 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_60) : (i32) -> ()
    cf.br ^bb17
  ^bb19:  // 2 preds: ^bb17, ^bb20
    %131 = llvm.getelementptr %9[%125] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %123, %131 {alignment = 1 : i64} : i64, !llvm.ptr
    %132 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_61 = arith.constant 8 : i32
    %133 = arith.addi %132, %c8_i32_61 : i32
    llvm.store %133, %1 : i32, !llvm.ptr
    %134 = llvm.load %2 : !llvm.ptr -> i32
    %c-8_i32 = arith.constant -8 : i32
    %135 = arith.addi %134, %c-8_i32 : i32
    llvm.store %135, %2 : i32, !llvm.ptr
    %c-8_i32_62 = arith.constant -8 : i32
    %136 = arith.cmpi eq, %135, %c-8_i32_62 : i32
    %137 = arith.extui %136 : i1 to i32
    %c0_i32_63 = arith.constant 0 : i32
    %138 = arith.cmpi eq, %137, %c0_i32_63 : i32
    %139 = arith.extui %138 : i1 to i32
    %c0_i32_64 = arith.constant 0 : i32
    %140 = arith.cmpi ne, %139, %c0_i32_64 : i32
    cf.cond_br %140, ^bb16, ^bb21
  ^bb20:  // pred: ^bb17
    %c1_i32_65 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_65) : (i32) -> ()
    cf.br ^bb19
  ^bb21:  // pred: ^bb19
    cf.br ^bb15
  ^bb22:  // 2 preds: ^bb15, ^bb23
    %141 = llvm.getelementptr %9[%69] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %142 = llvm.load volatile %141 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_66 = arith.constant 0 : i64
    %143 = arith.extui %66 : i32 to i64
    %144 = arith.addi %143, %c0_i64_66 : i64
    %c8_i64_67 = arith.constant 8 : i64
    %145 = arith.addi %144, %c8_i64_67 : i64
    %c0_i32_68 = arith.constant 0 : i32
    %146 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_68) : (!llvm.ptr, i32) -> i32
    %147 = arith.extui %146 : i32 to i64
    %c65536_i64_69 = arith.constant 65536 : i64
    %148 = arith.muli %147, %c65536_i64_69 : i64
    %149 = arith.cmpi ult, %145, %148 : i64
    cf.cond_br %149, ^bb24, ^bb25
  ^bb23:  // pred: ^bb15
    %c1_i32_70 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_70) : (i32) -> ()
    cf.br ^bb22
  ^bb24:  // 2 preds: ^bb22, ^bb25
    %150 = llvm.getelementptr %9[%144] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %142, %150 {alignment = 1 : i64} : i64, !llvm.ptr
    %151 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32_71 = arith.constant 24 : i32
    %152 = arith.addi %151, %c24_i32_71 : i32
    %153 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_72 = arith.constant 32 : i32
    %154 = arith.addi %153, %c32_i32_72 : i32
    %c24_i32_73 = arith.constant 24 : i32
    %155 = arith.addi %154, %c24_i32_73 : i32
    %c0_i64_74 = arith.constant 0 : i64
    %156 = arith.extui %155 : i32 to i64
    %157 = arith.addi %156, %c0_i64_74 : i64
    %c8_i64_75 = arith.constant 8 : i64
    %158 = arith.addi %157, %c8_i64_75 : i64
    %c0_i32_76 = arith.constant 0 : i32
    %159 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_76) : (!llvm.ptr, i32) -> i32
    %160 = arith.extui %159 : i32 to i64
    %c65536_i64_77 = arith.constant 65536 : i64
    %161 = arith.muli %160, %c65536_i64_77 : i64
    %162 = arith.cmpi ult, %158, %161 : i64
    cf.cond_br %162, ^bb26, ^bb27
  ^bb25:  // pred: ^bb22
    %c1_i32_78 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_78) : (i32) -> ()
    cf.br ^bb24
  ^bb26:  // 2 preds: ^bb24, ^bb27
    %163 = llvm.getelementptr %9[%157] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %164 = llvm.load volatile %163 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_79 = arith.constant 0 : i64
    %165 = arith.extui %152 : i32 to i64
    %166 = arith.addi %165, %c0_i64_79 : i64
    %c8_i64_80 = arith.constant 8 : i64
    %167 = arith.addi %166, %c8_i64_80 : i64
    %c0_i32_81 = arith.constant 0 : i32
    %168 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_81) : (!llvm.ptr, i32) -> i32
    %169 = arith.extui %168 : i32 to i64
    %c65536_i64_82 = arith.constant 65536 : i64
    %170 = arith.muli %169, %c65536_i64_82 : i64
    %171 = arith.cmpi ult, %167, %170 : i64
    cf.cond_br %171, ^bb28, ^bb29
  ^bb27:  // pred: ^bb24
    %c1_i32_83 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_83) : (i32) -> ()
    cf.br ^bb26
  ^bb28:  // 2 preds: ^bb26, ^bb29
    %172 = llvm.getelementptr %9[%166] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %164, %172 {alignment = 1 : i64} : i64, !llvm.ptr
    %173 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %174 = arith.addi %173, %c16_i32 : i32
    %175 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_84 = arith.constant 32 : i32
    %176 = arith.addi %175, %c32_i32_84 : i32
    %c16_i32_85 = arith.constant 16 : i32
    %177 = arith.addi %176, %c16_i32_85 : i32
    %c0_i64_86 = arith.constant 0 : i64
    %178 = arith.extui %177 : i32 to i64
    %179 = arith.addi %178, %c0_i64_86 : i64
    %c8_i64_87 = arith.constant 8 : i64
    %180 = arith.addi %179, %c8_i64_87 : i64
    %c0_i32_88 = arith.constant 0 : i32
    %181 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_88) : (!llvm.ptr, i32) -> i32
    %182 = arith.extui %181 : i32 to i64
    %c65536_i64_89 = arith.constant 65536 : i64
    %183 = arith.muli %182, %c65536_i64_89 : i64
    %184 = arith.cmpi ult, %180, %183 : i64
    cf.cond_br %184, ^bb30, ^bb31
  ^bb29:  // pred: ^bb26
    %c1_i32_90 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_90) : (i32) -> ()
    cf.br ^bb28
  ^bb30:  // 2 preds: ^bb28, ^bb31
    %185 = llvm.getelementptr %9[%179] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %186 = llvm.load volatile %185 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_91 = arith.constant 0 : i64
    %187 = arith.extui %174 : i32 to i64
    %188 = arith.addi %187, %c0_i64_91 : i64
    %c8_i64_92 = arith.constant 8 : i64
    %189 = arith.addi %188, %c8_i64_92 : i64
    %c0_i32_93 = arith.constant 0 : i32
    %190 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_93) : (!llvm.ptr, i32) -> i32
    %191 = arith.extui %190 : i32 to i64
    %c65536_i64_94 = arith.constant 65536 : i64
    %192 = arith.muli %191, %c65536_i64_94 : i64
    %193 = arith.cmpi ult, %189, %192 : i64
    cf.cond_br %193, ^bb32, ^bb33
  ^bb31:  // pred: ^bb28
    %c1_i32_95 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_95) : (i32) -> ()
    cf.br ^bb30
  ^bb32:  // 2 preds: ^bb30, ^bb33
    %194 = llvm.getelementptr %9[%188] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %186, %194 {alignment = 1 : i64} : i64, !llvm.ptr
    %195 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_96 = arith.constant 8 : i32
    %196 = arith.addi %195, %c8_i32_96 : i32
    %197 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_97 = arith.constant 32 : i32
    %198 = arith.addi %197, %c32_i32_97 : i32
    %c8_i32_98 = arith.constant 8 : i32
    %199 = arith.addi %198, %c8_i32_98 : i32
    %c0_i64_99 = arith.constant 0 : i64
    %200 = arith.extui %199 : i32 to i64
    %201 = arith.addi %200, %c0_i64_99 : i64
    %c8_i64_100 = arith.constant 8 : i64
    %202 = arith.addi %201, %c8_i64_100 : i64
    %c0_i32_101 = arith.constant 0 : i32
    %203 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_101) : (!llvm.ptr, i32) -> i32
    %204 = arith.extui %203 : i32 to i64
    %c65536_i64_102 = arith.constant 65536 : i64
    %205 = arith.muli %204, %c65536_i64_102 : i64
    %206 = arith.cmpi ult, %202, %205 : i64
    cf.cond_br %206, ^bb34, ^bb35
  ^bb33:  // pred: ^bb30
    %c1_i32_103 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_103) : (i32) -> ()
    cf.br ^bb32
  ^bb34:  // 2 preds: ^bb32, ^bb35
    %207 = llvm.getelementptr %9[%201] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %208 = llvm.load volatile %207 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_104 = arith.constant 0 : i64
    %209 = arith.extui %196 : i32 to i64
    %210 = arith.addi %209, %c0_i64_104 : i64
    %c8_i64_105 = arith.constant 8 : i64
    %211 = arith.addi %210, %c8_i64_105 : i64
    %c0_i32_106 = arith.constant 0 : i32
    %212 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_106) : (!llvm.ptr, i32) -> i32
    %213 = arith.extui %212 : i32 to i64
    %c65536_i64_107 = arith.constant 65536 : i64
    %214 = arith.muli %213, %c65536_i64_107 : i64
    %215 = arith.cmpi ult, %211, %214 : i64
    cf.cond_br %215, ^bb36, ^bb37
  ^bb35:  // pred: ^bb32
    %c1_i32_108 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_108) : (i32) -> ()
    cf.br ^bb34
  ^bb36:  // 2 preds: ^bb34, ^bb37
    %216 = llvm.getelementptr %9[%210] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %208, %216 {alignment = 1 : i64} : i64, !llvm.ptr
    %217 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32_109 = arith.constant 64 : i32
    %218 = arith.addi %217, %c64_i32_109 : i32
    llvm.store %218, %6 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb37:  // pred: ^bb34
    %c1_i32_110 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_110) : (i32) -> ()
    cf.br ^bb36
  }
  func.func @f36(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> i32
    %7 = llvm.getelementptr %arg0[304] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %arg0[312] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.load %8 : !llvm.ptr -> i64
    %11 = arith.trunci %10 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c0_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %15 = arith.addi %14, %c4_i64 : i64
    %c0_i32_1 = arith.constant 0 : i32
    %16 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1) : (!llvm.ptr, i32) -> i32
    %17 = arith.extui %16 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %18 = arith.muli %17, %c65536_i64 : i64
    %19 = arith.cmpi ult, %15, %18 : i64
    cf.cond_br %19, ^bb4, ^bb5
  ^bb2:  // 3 preds: ^bb3, ^bb8, ^bb27
    return
  ^bb3:  // pred: ^bb4
    %20 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %21 = arith.addi %20, %c4_i32 : i32
    call @f47(%arg0, %21) : (!llvm.ptr, i32) -> ()
    cf.br ^bb2
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %22 = llvm.getelementptr %4[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %23 = llvm.load volatile %22 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %23, %1 : i32, !llvm.ptr
    %c-2147483647_i32 = arith.constant -2147483647 : i32
    %24 = arith.addi %23, %c-2147483647_i32 : i32
    %c0_i32_2 = arith.constant 0 : i32
    %25 = llvm.load %1 : !llvm.ptr -> i32
    %c-2147483638_i32 = arith.constant -2147483638 : i32
    %26 = arith.cmpi slt, %25, %c-2147483638_i32 : i32
    %27 = arith.extui %26 : i1 to i32
    %c0_i32_3 = arith.constant 0 : i32
    %28 = arith.cmpi ne, %27, %c0_i32_3 : i32
    %29 = arith.select %28, %24, %c0_i32_2 : i32
    llvm.store %29, %1 : i32, !llvm.ptr
    %c9_i32 = arith.constant 9 : i32
    %30 = arith.cmpi ugt, %29, %c9_i32 : i32
    %31 = arith.extui %30 : i1 to i32
    %c0_i32_4 = arith.constant 0 : i32
    %32 = arith.cmpi ne, %31, %c0_i32_4 : i32
    cf.cond_br %32, ^bb3, ^bb6
  ^bb5:  // pred: ^bb1
    %c1_i32_5 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_5) : (i32) -> ()
    cf.br ^bb4
  ^bb6:  // pred: ^bb4
    %c1_i32_6 = arith.constant 1 : i32
    %33 = llvm.load %1 : !llvm.ptr -> i32
    %c31_i32 = arith.constant 31 : i32
    %34 = arith.cmpi ule, %33, %c31_i32 : i32
    %35 = scf.if %34 -> (i32) {
      %112 = arith.shli %c1_i32_6, %33 : i32
      scf.yield %112 : i32
    } else {
      %c0_i32_36 = arith.constant 0 : i32
      scf.yield %c0_i32_36 : i32
    }
    %c894_i32 = arith.constant 894 : i32
    %36 = arith.andi %35, %c894_i32 : i32
    %c0_i32_7 = arith.constant 0 : i32
    %37 = arith.cmpi ne, %36, %c0_i32_7 : i32
    cf.cond_br %37, ^bb8, ^bb9
  ^bb7:  // pred: ^bb9
    %38 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %39 = arith.extui %38 : i32 to i64
    %40 = arith.addi %39, %c12_i64 : i64
    %c4_i64_8 = arith.constant 4 : i64
    %41 = arith.addi %40, %c4_i64_8 : i64
    %c0_i32_9 = arith.constant 0 : i32
    %42 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_9) : (!llvm.ptr, i32) -> i32
    %43 = arith.extui %42 : i32 to i64
    %c65536_i64_10 = arith.constant 65536 : i64
    %44 = arith.muli %43, %c65536_i64_10 : i64
    %45 = arith.cmpi ult, %41, %44 : i64
    cf.cond_br %45, ^bb11, ^bb12
  ^bb8:  // 2 preds: ^bb6, ^bb10
    cf.br ^bb2
  ^bb9:  // pred: ^bb6
    %46 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_11 = arith.constant 0 : i32
    %47 = arith.cmpi ne, %46, %c0_i32_11 : i32
    cf.cond_br %47, ^bb7, ^bb10
  ^bb10:  // pred: ^bb9
    %48 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %49 = arith.addi %48, %c12_i32 : i32
    call @f47(%arg0, %49) : (!llvm.ptr, i32) -> ()
    %50 = llvm.load %0 : !llvm.ptr -> i32
    call @f112(%arg0, %50) : (!llvm.ptr, i32) -> ()
    %51 = llvm.load %0 : !llvm.ptr -> i32
    call @f113(%arg0, %51) : (!llvm.ptr, i32) -> ()
    cf.br ^bb8
  ^bb11:  // 2 preds: ^bb7, ^bb12
    %52 = llvm.getelementptr %4[%40] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %53 = llvm.load volatile %52 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %53, %0 : i32, !llvm.ptr
    call @f89(%arg0, %53) : (!llvm.ptr, i32) -> ()
    %54 = llvm.load %0 : !llvm.ptr -> i32
    call @f91(%arg0, %54) : (!llvm.ptr, i32) -> ()
    %55 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %56 = arith.addi %55, %c24_i32 : i32
    %57 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %58 = arith.extui %57 : i32 to i64
    %59 = arith.addi %58, %c16_i64 : i64
    %c4_i64_12 = arith.constant 4 : i64
    %60 = arith.addi %59, %c4_i64_12 : i64
    %c0_i32_13 = arith.constant 0 : i32
    %61 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_13) : (!llvm.ptr, i32) -> i32
    %62 = arith.extui %61 : i32 to i64
    %c65536_i64_14 = arith.constant 65536 : i64
    %63 = arith.muli %62, %c65536_i64_14 : i64
    %64 = arith.cmpi ult, %60, %63 : i64
    cf.cond_br %64, ^bb13, ^bb14
  ^bb12:  // pred: ^bb7
    %c1_i32_15 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_15) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %65 = llvm.getelementptr %4[%59] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %66 = llvm.load volatile %65 {alignment = 1 : i64} : !llvm.ptr -> i32
    %67 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %68 = arith.extui %67 : i32 to i64
    %69 = arith.addi %68, %c20_i64 : i64
    %c4_i64_16 = arith.constant 4 : i64
    %70 = arith.addi %69, %c4_i64_16 : i64
    %c0_i32_17 = arith.constant 0 : i32
    %71 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_17) : (!llvm.ptr, i32) -> i32
    %72 = arith.extui %71 : i32 to i64
    %c65536_i64_18 = arith.constant 65536 : i64
    %73 = arith.muli %72, %c65536_i64_18 : i64
    %74 = arith.cmpi ult, %70, %73 : i64
    cf.cond_br %74, ^bb15, ^bb16
  ^bb14:  // pred: ^bb11
    %c1_i32_19 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_19) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // 2 preds: ^bb13, ^bb16
    %75 = llvm.getelementptr %4[%69] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %76 = llvm.load volatile %75 {alignment = 1 : i64} : !llvm.ptr -> i32
    %77 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64_20 = arith.constant 12 : i64
    %78 = arith.extui %77 : i32 to i64
    %79 = arith.addi %78, %c12_i64_20 : i64
    %c4_i64_21 = arith.constant 4 : i64
    %80 = arith.addi %79, %c4_i64_21 : i64
    %c0_i32_22 = arith.constant 0 : i32
    %81 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_22) : (!llvm.ptr, i32) -> i32
    %82 = arith.extui %81 : i32 to i64
    %c65536_i64_23 = arith.constant 65536 : i64
    %83 = arith.muli %82, %c65536_i64_23 : i64
    %84 = arith.cmpi ult, %80, %83 : i64
    cf.cond_br %84, ^bb17, ^bb18
  ^bb16:  // pred: ^bb13
    %c1_i32_24 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_24) : (i32) -> ()
    cf.br ^bb15
  ^bb17:  // 2 preds: ^bb15, ^bb18
    %85 = llvm.getelementptr %4[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %86 = llvm.load volatile %85 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c16_i64_25 = arith.constant 16 : i64
    %87 = arith.extui %86 : i32 to i64
    %88 = arith.addi %87, %c16_i64_25 : i64
    %c4_i64_26 = arith.constant 4 : i64
    %89 = arith.addi %88, %c4_i64_26 : i64
    %c0_i32_27 = arith.constant 0 : i32
    %90 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_27) : (!llvm.ptr, i32) -> i32
    %91 = arith.extui %90 : i32 to i64
    %c65536_i64_28 = arith.constant 65536 : i64
    %92 = arith.muli %91, %c65536_i64_28 : i64
    %93 = arith.cmpi ult, %89, %92 : i64
    cf.cond_br %93, ^bb19, ^bb20
  ^bb18:  // pred: ^bb15
    %c1_i32_29 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_29) : (i32) -> ()
    cf.br ^bb17
  ^bb19:  // 2 preds: ^bb17, ^bb20
    %94 = llvm.getelementptr %4[%88] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %95 = llvm.load volatile %94 {alignment = 1 : i64} : !llvm.ptr -> i32
    %96 = arith.cmpi ult, %95, %11 : i32
    cf.cond_br %96, ^bb21, ^bb22
  ^bb20:  // pred: ^bb17
    %c1_i32_30 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_30) : (i32) -> ()
    cf.br ^bb19
  ^bb21:  // 2 preds: ^bb19, ^bb22
    %97 = llvm.getelementptr inbounds %9[%95] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %98 = llvm.load %97 : !llvm.ptr -> !llvm.ptr
    %99 = llvm.ptrtoint %98 : !llvm.ptr to i64
    %c0_i64_31 = arith.constant 0 : i64
    %100 = arith.cmpi eq, %99, %c0_i64_31 : i64
    cf.cond_br %100, ^bb24, ^bb23
  ^bb22:  // pred: ^bb19
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb21
  ^bb23:  // 2 preds: ^bb21, ^bb24
    %101 = llvm.getelementptr %98[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %102 = llvm.getelementptr %98[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %103 = llvm.getelementptr %98[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %104 = llvm.load %101 : !llvm.ptr -> !llvm.ptr
    %105 = llvm.load %103 : !llvm.ptr -> !llvm.ptr
    %106 = llvm.ptrtoint %104 : !llvm.ptr to i64
    %c0_i64_32 = arith.constant 0 : i64
    %107 = arith.cmpi eq, %106, %c0_i64_32 : i64
    cf.cond_br %107, ^bb26, ^bb25
  ^bb24:  // pred: ^bb21
    %c4_i32_33 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_33) : (i32) -> ()
    cf.br ^bb23
  ^bb25:  // 2 preds: ^bb23, ^bb26
    %108 = llvm.load %102 : !llvm.ptr -> i32
    %109 = arith.cmpi ne, %6, %108 : i32
    cf.cond_br %109, ^bb28, ^bb27
  ^bb26:  // pred: ^bb23
    %c3_i32_34 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_34) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // 2 preds: ^bb25, ^bb28
    %110 = llvm.call %104(%105, %56, %66, %76) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> !llvm.void
    %111 = llvm.load %0 : !llvm.ptr -> i32
    %c28_i32 = arith.constant 28 : i32
    %c4_i32_35 = arith.constant 4 : i32
    call @f78(%arg0, %111, %c28_i32, %c4_i32_35) : (!llvm.ptr, i32, i32, i32) -> ()
    cf.br ^bb2
  ^bb28:  // pred: ^bb25
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb27
  }
  func.func @f37(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %5 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %9 = arith.extui %8 : i32 to i64
    %10 = arith.addi %9, %c20_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %11 = arith.addi %10, %c4_i64 : i64
    %c0_i32_4 = arith.constant 0 : i32
    %12 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_4) : (!llvm.ptr, i32) -> i32
    %13 = arith.extui %12 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %14 = arith.muli %13, %c65536_i64 : i64
    %15 = arith.cmpi ult, %11, %14 : i64
    cf.cond_br %15, ^bb4, ^bb5
  ^bb2:  // pred: ^bb65
    return
  ^bb3:  // 2 preds: ^bb6, ^bb8
    %16 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %17 = arith.extui %16 : i32 to i64
    %18 = arith.addi %17, %c16_i64 : i64
    %c4_i64_5 = arith.constant 4 : i64
    %19 = arith.addi %18, %c4_i64_5 : i64
    %c0_i32_6 = arith.constant 0 : i32
    %20 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_6) : (!llvm.ptr, i32) -> i32
    %21 = arith.extui %20 : i32 to i64
    %c65536_i64_7 = arith.constant 65536 : i64
    %22 = arith.muli %21, %c65536_i64_7 : i64
    %23 = arith.cmpi ult, %19, %22 : i64
    cf.cond_br %23, ^bb9, ^bb10
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %24 = llvm.getelementptr %7[%10] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %25 = llvm.load volatile %24 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %25, %2 : i32, !llvm.ptr
    %26 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %27 = arith.extui %26 : i32 to i64
    %28 = arith.addi %27, %c12_i64 : i64
    %c4_i64_8 = arith.constant 4 : i64
    %29 = arith.addi %28, %c4_i64_8 : i64
    %c0_i32_9 = arith.constant 0 : i32
    %30 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_9) : (!llvm.ptr, i32) -> i32
    %31 = arith.extui %30 : i32 to i64
    %c65536_i64_10 = arith.constant 65536 : i64
    %32 = arith.muli %31, %c65536_i64_10 : i64
    %33 = arith.cmpi ult, %29, %32 : i64
    cf.cond_br %33, ^bb6, ^bb7
  ^bb5:  // pred: ^bb1
    %c1_i32_11 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_11) : (i32) -> ()
    cf.br ^bb4
  ^bb6:  // 2 preds: ^bb4, ^bb7
    %34 = llvm.getelementptr %7[%28] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %35 = llvm.load volatile %34 {alignment = 1 : i64} : !llvm.ptr -> i32
    %36 = arith.cmpi eq, %25, %35 : i32
    %37 = arith.extui %36 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %38 = arith.cmpi eq, %37, %c0_i32_12 : i32
    %39 = arith.extui %38 : i1 to i32
    %c0_i32_13 = arith.constant 0 : i32
    %40 = arith.cmpi ne, %39, %c0_i32_13 : i32
    cf.cond_br %40, ^bb3, ^bb8
  ^bb7:  // pred: ^bb4
    %c1_i32_14 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_14) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // pred: ^bb6
    %41 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %42 = arith.addi %41, %c12_i32 : i32
    call @f87(%arg0, %42) : (!llvm.ptr, i32) -> ()
    cf.br ^bb3
  ^bb9:  // 2 preds: ^bb3, ^bb10
    %43 = llvm.getelementptr %7[%18] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %44 = llvm.load volatile %43 {alignment = 1 : i64} : !llvm.ptr -> i32
    %45 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c31_i32 = arith.constant 31 : i32
    %46 = arith.cmpi ule, %c2_i32, %c31_i32 : i32
    %47 = scf.if %46 -> (i32) {
      %349 = arith.shli %45, %c2_i32 : i32
      scf.yield %349 : i32
    } else {
      %c0_i32_170 = arith.constant 0 : i32
      scf.yield %c0_i32_170 : i32
    }
    %48 = arith.addi %44, %47 : i32
    %c64_i32 = arith.constant 64 : i32
    %c0_i64 = arith.constant 0 : i64
    %49 = arith.extui %48 : i32 to i64
    %50 = arith.addi %49, %c0_i64 : i64
    %c4_i64_15 = arith.constant 4 : i64
    %51 = arith.addi %50, %c4_i64_15 : i64
    %c0_i32_16 = arith.constant 0 : i32
    %52 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_16) : (!llvm.ptr, i32) -> i32
    %53 = arith.extui %52 : i32 to i64
    %c65536_i64_17 = arith.constant 65536 : i64
    %54 = arith.muli %53, %c65536_i64_17 : i64
    %55 = arith.cmpi ult, %51, %54 : i64
    cf.cond_br %55, ^bb11, ^bb12
  ^bb10:  // pred: ^bb3
    %c1_i32_18 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_18) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %56 = llvm.getelementptr %7[%50] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c64_i32, %56 {alignment = 1 : i64} : i32, !llvm.ptr
    %57 = llvm.load %1 : !llvm.ptr -> i32
    %58 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_19 = arith.constant 1 : i32
    %59 = arith.addi %58, %c1_i32_19 : i32
    %c20_i64_20 = arith.constant 20 : i64
    %60 = arith.extui %57 : i32 to i64
    %61 = arith.addi %60, %c20_i64_20 : i64
    %c4_i64_21 = arith.constant 4 : i64
    %62 = arith.addi %61, %c4_i64_21 : i64
    %c0_i32_22 = arith.constant 0 : i32
    %63 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_22) : (!llvm.ptr, i32) -> i32
    %64 = arith.extui %63 : i32 to i64
    %c65536_i64_23 = arith.constant 65536 : i64
    %65 = arith.muli %64, %c65536_i64_23 : i64
    %66 = arith.cmpi ult, %62, %65 : i64
    cf.cond_br %66, ^bb13, ^bb14
  ^bb12:  // pred: ^bb9
    %c1_i32_24 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_24) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %67 = llvm.getelementptr %7[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %59, %67 {alignment = 1 : i64} : i32, !llvm.ptr
    %68 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %69 = arith.extui %68 : i32 to i64
    %70 = arith.addi %69, %c8_i64 : i64
    %c4_i64_25 = arith.constant 4 : i64
    %71 = arith.addi %70, %c4_i64_25 : i64
    %c0_i32_26 = arith.constant 0 : i32
    %72 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_26) : (!llvm.ptr, i32) -> i32
    %73 = arith.extui %72 : i32 to i64
    %c65536_i64_27 = arith.constant 65536 : i64
    %74 = arith.muli %73, %c65536_i64_27 : i64
    %75 = arith.cmpi ult, %71, %74 : i64
    cf.cond_br %75, ^bb16, ^bb17
  ^bb14:  // pred: ^bb11
    %c1_i32_28 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_28) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // 2 preds: ^bb18, ^bb20
    %76 = llvm.load %0 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %77 = arith.addi %76, %c32_i32 : i32
    llvm.store %77, %2 : i32, !llvm.ptr
    %78 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_29 = arith.constant 4 : i64
    %79 = arith.extui %78 : i32 to i64
    %80 = arith.addi %79, %c4_i64_29 : i64
    %c4_i64_30 = arith.constant 4 : i64
    %81 = arith.addi %80, %c4_i64_30 : i64
    %c0_i32_31 = arith.constant 0 : i32
    %82 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_31) : (!llvm.ptr, i32) -> i32
    %83 = arith.extui %82 : i32 to i64
    %c65536_i64_32 = arith.constant 65536 : i64
    %84 = arith.muli %83, %c65536_i64_32 : i64
    %85 = arith.cmpi ult, %81, %84 : i64
    cf.cond_br %85, ^bb21, ^bb22
  ^bb16:  // 2 preds: ^bb13, ^bb17
    %86 = llvm.getelementptr %7[%70] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %87 = llvm.load volatile %86 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %87, %3 : i32, !llvm.ptr
    %88 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_33 = arith.constant 0 : i64
    %89 = arith.extui %88 : i32 to i64
    %90 = arith.addi %89, %c0_i64_33 : i64
    %c4_i64_34 = arith.constant 4 : i64
    %91 = arith.addi %90, %c4_i64_34 : i64
    %c0_i32_35 = arith.constant 0 : i32
    %92 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_35) : (!llvm.ptr, i32) -> i32
    %93 = arith.extui %92 : i32 to i64
    %c65536_i64_36 = arith.constant 65536 : i64
    %94 = arith.muli %93, %c65536_i64_36 : i64
    %95 = arith.cmpi ult, %91, %94 : i64
    cf.cond_br %95, ^bb18, ^bb19
  ^bb17:  // pred: ^bb13
    %c1_i32_37 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_37) : (i32) -> ()
    cf.br ^bb16
  ^bb18:  // 2 preds: ^bb16, ^bb19
    %96 = llvm.getelementptr %7[%90] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %97 = llvm.load volatile %96 {alignment = 1 : i64} : !llvm.ptr -> i32
    %98 = arith.cmpi eq, %87, %97 : i32
    %99 = arith.extui %98 : i1 to i32
    %c0_i32_38 = arith.constant 0 : i32
    %100 = arith.cmpi eq, %99, %c0_i32_38 : i32
    %101 = arith.extui %100 : i1 to i32
    %c0_i32_39 = arith.constant 0 : i32
    %102 = arith.cmpi ne, %101, %c0_i32_39 : i32
    cf.cond_br %102, ^bb15, ^bb20
  ^bb19:  // pred: ^bb16
    %c1_i32_40 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_40) : (i32) -> ()
    cf.br ^bb18
  ^bb20:  // pred: ^bb18
    %103 = llvm.load %1 : !llvm.ptr -> i32
    call @f88(%arg0, %103) : (!llvm.ptr, i32) -> ()
    cf.br ^bb15
  ^bb21:  // 2 preds: ^bb15, ^bb22
    %104 = llvm.getelementptr %7[%80] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %105 = llvm.load volatile %104 {alignment = 1 : i64} : !llvm.ptr -> i32
    %106 = llvm.load %3 : !llvm.ptr -> i32
    %c5_i32 = arith.constant 5 : i32
    %c31_i32_41 = arith.constant 31 : i32
    %107 = arith.cmpi ule, %c5_i32, %c31_i32_41 : i32
    %108 = scf.if %107 -> (i32) {
      %349 = arith.shli %106, %c5_i32 : i32
      scf.yield %349 : i32
    } else {
      %c0_i32_170 = arith.constant 0 : i32
      scf.yield %c0_i32_170 : i32
    }
    %109 = arith.addi %105, %108 : i32
    llvm.store %109, %4 : i32, !llvm.ptr
    %110 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_42 = arith.constant 0 : i64
    %111 = arith.extui %110 : i32 to i64
    %112 = arith.addi %111, %c0_i64_42 : i64
    %c8_i64_43 = arith.constant 8 : i64
    %113 = arith.addi %112, %c8_i64_43 : i64
    %c0_i32_44 = arith.constant 0 : i32
    %114 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_44) : (!llvm.ptr, i32) -> i32
    %115 = arith.extui %114 : i32 to i64
    %c65536_i64_45 = arith.constant 65536 : i64
    %116 = arith.muli %115, %c65536_i64_45 : i64
    %117 = arith.cmpi ult, %113, %116 : i64
    cf.cond_br %117, ^bb23, ^bb24
  ^bb22:  // pred: ^bb15
    %c1_i32_46 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_46) : (i32) -> ()
    cf.br ^bb21
  ^bb23:  // 2 preds: ^bb21, ^bb24
    %118 = llvm.getelementptr %7[%112] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %119 = llvm.load volatile %118 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_47 = arith.constant 0 : i64
    %120 = arith.extui %109 : i32 to i64
    %121 = arith.addi %120, %c0_i64_47 : i64
    %c8_i64_48 = arith.constant 8 : i64
    %122 = arith.addi %121, %c8_i64_48 : i64
    %c0_i32_49 = arith.constant 0 : i32
    %123 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_49) : (!llvm.ptr, i32) -> i32
    %124 = arith.extui %123 : i32 to i64
    %c65536_i64_50 = arith.constant 65536 : i64
    %125 = arith.muli %124, %c65536_i64_50 : i64
    %126 = arith.cmpi ult, %122, %125 : i64
    cf.cond_br %126, ^bb25, ^bb26
  ^bb24:  // pred: ^bb21
    %c1_i32_51 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_51) : (i32) -> ()
    cf.br ^bb23
  ^bb25:  // 2 preds: ^bb23, ^bb26
    %127 = llvm.getelementptr %7[%121] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %119, %127 {alignment = 1 : i64} : i64, !llvm.ptr
    %128 = llvm.load %4 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %129 = arith.addi %128, %c24_i32 : i32
    %130 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32_52 = arith.constant 24 : i32
    %131 = arith.addi %130, %c24_i32_52 : i32
    %c0_i64_53 = arith.constant 0 : i64
    %132 = arith.extui %131 : i32 to i64
    %133 = arith.addi %132, %c0_i64_53 : i64
    %c8_i64_54 = arith.constant 8 : i64
    %134 = arith.addi %133, %c8_i64_54 : i64
    %c0_i32_55 = arith.constant 0 : i32
    %135 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_55) : (!llvm.ptr, i32) -> i32
    %136 = arith.extui %135 : i32 to i64
    %c65536_i64_56 = arith.constant 65536 : i64
    %137 = arith.muli %136, %c65536_i64_56 : i64
    %138 = arith.cmpi ult, %134, %137 : i64
    cf.cond_br %138, ^bb27, ^bb28
  ^bb26:  // pred: ^bb23
    %c1_i32_57 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_57) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // 2 preds: ^bb25, ^bb28
    %139 = llvm.getelementptr %7[%133] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %140 = llvm.load volatile %139 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_58 = arith.constant 0 : i64
    %141 = arith.extui %129 : i32 to i64
    %142 = arith.addi %141, %c0_i64_58 : i64
    %c8_i64_59 = arith.constant 8 : i64
    %143 = arith.addi %142, %c8_i64_59 : i64
    %c0_i32_60 = arith.constant 0 : i32
    %144 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_60) : (!llvm.ptr, i32) -> i32
    %145 = arith.extui %144 : i32 to i64
    %c65536_i64_61 = arith.constant 65536 : i64
    %146 = arith.muli %145, %c65536_i64_61 : i64
    %147 = arith.cmpi ult, %143, %146 : i64
    cf.cond_br %147, ^bb29, ^bb30
  ^bb28:  // pred: ^bb25
    %c1_i32_62 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_62) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // 2 preds: ^bb27, ^bb30
    %148 = llvm.getelementptr %7[%142] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %140, %148 {alignment = 1 : i64} : i64, !llvm.ptr
    %149 = llvm.load %4 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %150 = arith.addi %149, %c16_i32 : i32
    %151 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_63 = arith.constant 16 : i32
    %152 = arith.addi %151, %c16_i32_63 : i32
    %c0_i64_64 = arith.constant 0 : i64
    %153 = arith.extui %152 : i32 to i64
    %154 = arith.addi %153, %c0_i64_64 : i64
    %c8_i64_65 = arith.constant 8 : i64
    %155 = arith.addi %154, %c8_i64_65 : i64
    %c0_i32_66 = arith.constant 0 : i32
    %156 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_66) : (!llvm.ptr, i32) -> i32
    %157 = arith.extui %156 : i32 to i64
    %c65536_i64_67 = arith.constant 65536 : i64
    %158 = arith.muli %157, %c65536_i64_67 : i64
    %159 = arith.cmpi ult, %155, %158 : i64
    cf.cond_br %159, ^bb31, ^bb32
  ^bb30:  // pred: ^bb27
    %c1_i32_68 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_68) : (i32) -> ()
    cf.br ^bb29
  ^bb31:  // 2 preds: ^bb29, ^bb32
    %160 = llvm.getelementptr %7[%154] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %161 = llvm.load volatile %160 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_69 = arith.constant 0 : i64
    %162 = arith.extui %150 : i32 to i64
    %163 = arith.addi %162, %c0_i64_69 : i64
    %c8_i64_70 = arith.constant 8 : i64
    %164 = arith.addi %163, %c8_i64_70 : i64
    %c0_i32_71 = arith.constant 0 : i32
    %165 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_71) : (!llvm.ptr, i32) -> i32
    %166 = arith.extui %165 : i32 to i64
    %c65536_i64_72 = arith.constant 65536 : i64
    %167 = arith.muli %166, %c65536_i64_72 : i64
    %168 = arith.cmpi ult, %164, %167 : i64
    cf.cond_br %168, ^bb33, ^bb34
  ^bb32:  // pred: ^bb29
    %c1_i32_73 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_73) : (i32) -> ()
    cf.br ^bb31
  ^bb33:  // 2 preds: ^bb31, ^bb34
    %169 = llvm.getelementptr %7[%163] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %161, %169 {alignment = 1 : i64} : i64, !llvm.ptr
    %170 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %171 = arith.addi %170, %c8_i32 : i32
    %172 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_74 = arith.constant 8 : i32
    %173 = arith.addi %172, %c8_i32_74 : i32
    %c0_i64_75 = arith.constant 0 : i64
    %174 = arith.extui %173 : i32 to i64
    %175 = arith.addi %174, %c0_i64_75 : i64
    %c8_i64_76 = arith.constant 8 : i64
    %176 = arith.addi %175, %c8_i64_76 : i64
    %c0_i32_77 = arith.constant 0 : i32
    %177 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_77) : (!llvm.ptr, i32) -> i32
    %178 = arith.extui %177 : i32 to i64
    %c65536_i64_78 = arith.constant 65536 : i64
    %179 = arith.muli %178, %c65536_i64_78 : i64
    %180 = arith.cmpi ult, %176, %179 : i64
    cf.cond_br %180, ^bb35, ^bb36
  ^bb34:  // pred: ^bb31
    %c1_i32_79 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_79) : (i32) -> ()
    cf.br ^bb33
  ^bb35:  // 2 preds: ^bb33, ^bb36
    %181 = llvm.getelementptr %7[%175] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %182 = llvm.load volatile %181 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_80 = arith.constant 0 : i64
    %183 = arith.extui %171 : i32 to i64
    %184 = arith.addi %183, %c0_i64_80 : i64
    %c8_i64_81 = arith.constant 8 : i64
    %185 = arith.addi %184, %c8_i64_81 : i64
    %c0_i32_82 = arith.constant 0 : i32
    %186 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_82) : (!llvm.ptr, i32) -> i32
    %187 = arith.extui %186 : i32 to i64
    %c65536_i64_83 = arith.constant 65536 : i64
    %188 = arith.muli %187, %c65536_i64_83 : i64
    %189 = arith.cmpi ult, %185, %188 : i64
    cf.cond_br %189, ^bb37, ^bb38
  ^bb36:  // pred: ^bb33
    %c1_i32_84 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_84) : (i32) -> ()
    cf.br ^bb35
  ^bb37:  // 2 preds: ^bb35, ^bb38
    %190 = llvm.getelementptr %7[%184] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %182, %190 {alignment = 1 : i64} : i64, !llvm.ptr
    %191 = llvm.load %1 : !llvm.ptr -> i32
    %192 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_85 = arith.constant 1 : i32
    %193 = arith.addi %192, %c1_i32_85 : i32
    llvm.store %193, %0 : i32, !llvm.ptr
    %c8_i64_86 = arith.constant 8 : i64
    %194 = arith.extui %191 : i32 to i64
    %195 = arith.addi %194, %c8_i64_86 : i64
    %c4_i64_87 = arith.constant 4 : i64
    %196 = arith.addi %195, %c4_i64_87 : i64
    %c0_i32_88 = arith.constant 0 : i32
    %197 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_88) : (!llvm.ptr, i32) -> i32
    %198 = arith.extui %197 : i32 to i64
    %c65536_i64_89 = arith.constant 65536 : i64
    %199 = arith.muli %198, %c65536_i64_89 : i64
    %200 = arith.cmpi ult, %196, %199 : i64
    cf.cond_br %200, ^bb39, ^bb40
  ^bb38:  // pred: ^bb35
    %c1_i32_90 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_90) : (i32) -> ()
    cf.br ^bb37
  ^bb39:  // 2 preds: ^bb37, ^bb40
    %201 = llvm.getelementptr %7[%195] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %193, %201 {alignment = 1 : i64} : i32, !llvm.ptr
    %202 = llvm.load %0 : !llvm.ptr -> i32
    %203 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_91 = arith.constant 0 : i64
    %204 = arith.extui %203 : i32 to i64
    %205 = arith.addi %204, %c0_i64_91 : i64
    %c4_i64_92 = arith.constant 4 : i64
    %206 = arith.addi %205, %c4_i64_92 : i64
    %c0_i32_93 = arith.constant 0 : i32
    %207 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_93) : (!llvm.ptr, i32) -> i32
    %208 = arith.extui %207 : i32 to i64
    %c65536_i64_94 = arith.constant 65536 : i64
    %209 = arith.muli %208, %c65536_i64_94 : i64
    %210 = arith.cmpi ult, %206, %209 : i64
    cf.cond_br %210, ^bb42, ^bb43
  ^bb40:  // pred: ^bb37
    %c1_i32_95 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_95) : (i32) -> ()
    cf.br ^bb39
  ^bb41:  // 2 preds: ^bb42, ^bb44
    %211 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_96 = arith.constant 4 : i64
    %212 = arith.extui %211 : i32 to i64
    %213 = arith.addi %212, %c4_i64_96 : i64
    %c4_i64_97 = arith.constant 4 : i64
    %214 = arith.addi %213, %c4_i64_97 : i64
    %c0_i32_98 = arith.constant 0 : i32
    %215 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_98) : (!llvm.ptr, i32) -> i32
    %216 = arith.extui %215 : i32 to i64
    %c65536_i64_99 = arith.constant 65536 : i64
    %217 = arith.muli %216, %c65536_i64_99 : i64
    %218 = arith.cmpi ult, %214, %217 : i64
    cf.cond_br %218, ^bb45, ^bb46
  ^bb42:  // 2 preds: ^bb39, ^bb43
    %219 = llvm.getelementptr %7[%205] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %220 = llvm.load volatile %219 {alignment = 1 : i64} : !llvm.ptr -> i32
    %221 = arith.cmpi eq, %202, %220 : i32
    %222 = arith.extui %221 : i1 to i32
    %c0_i32_100 = arith.constant 0 : i32
    %223 = arith.cmpi eq, %222, %c0_i32_100 : i32
    %224 = arith.extui %223 : i1 to i32
    %c0_i32_101 = arith.constant 0 : i32
    %225 = arith.cmpi ne, %224, %c0_i32_101 : i32
    cf.cond_br %225, ^bb41, ^bb44
  ^bb43:  // pred: ^bb39
    %c1_i32_102 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_102) : (i32) -> ()
    cf.br ^bb42
  ^bb44:  // pred: ^bb42
    %226 = llvm.load %1 : !llvm.ptr -> i32
    call @f88(%arg0, %226) : (!llvm.ptr, i32) -> ()
    cf.br ^bb41
  ^bb45:  // 2 preds: ^bb41, ^bb46
    %227 = llvm.getelementptr %7[%213] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %228 = llvm.load volatile %227 {alignment = 1 : i64} : !llvm.ptr -> i32
    %229 = llvm.load %0 : !llvm.ptr -> i32
    %c5_i32_103 = arith.constant 5 : i32
    %c31_i32_104 = arith.constant 31 : i32
    %230 = arith.cmpi ule, %c5_i32_103, %c31_i32_104 : i32
    %231 = scf.if %230 -> (i32) {
      %349 = arith.shli %229, %c5_i32_103 : i32
      scf.yield %349 : i32
    } else {
      %c0_i32_170 = arith.constant 0 : i32
      scf.yield %c0_i32_170 : i32
    }
    %232 = arith.addi %228, %231 : i32
    llvm.store %232, %0 : i32, !llvm.ptr
    %233 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_105 = arith.constant 0 : i64
    %234 = arith.extui %233 : i32 to i64
    %235 = arith.addi %234, %c0_i64_105 : i64
    %c8_i64_106 = arith.constant 8 : i64
    %236 = arith.addi %235, %c8_i64_106 : i64
    %c0_i32_107 = arith.constant 0 : i32
    %237 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_107) : (!llvm.ptr, i32) -> i32
    %238 = arith.extui %237 : i32 to i64
    %c65536_i64_108 = arith.constant 65536 : i64
    %239 = arith.muli %238, %c65536_i64_108 : i64
    %240 = arith.cmpi ult, %236, %239 : i64
    cf.cond_br %240, ^bb47, ^bb48
  ^bb46:  // pred: ^bb41
    %c1_i32_109 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_109) : (i32) -> ()
    cf.br ^bb45
  ^bb47:  // 2 preds: ^bb45, ^bb48
    %241 = llvm.getelementptr %7[%235] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %242 = llvm.load volatile %241 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_110 = arith.constant 0 : i64
    %243 = arith.extui %232 : i32 to i64
    %244 = arith.addi %243, %c0_i64_110 : i64
    %c8_i64_111 = arith.constant 8 : i64
    %245 = arith.addi %244, %c8_i64_111 : i64
    %c0_i32_112 = arith.constant 0 : i32
    %246 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_112) : (!llvm.ptr, i32) -> i32
    %247 = arith.extui %246 : i32 to i64
    %c65536_i64_113 = arith.constant 65536 : i64
    %248 = arith.muli %247, %c65536_i64_113 : i64
    %249 = arith.cmpi ult, %245, %248 : i64
    cf.cond_br %249, ^bb49, ^bb50
  ^bb48:  // pred: ^bb45
    %c1_i32_114 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_114) : (i32) -> ()
    cf.br ^bb47
  ^bb49:  // 2 preds: ^bb47, ^bb50
    %250 = llvm.getelementptr %7[%244] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %242, %250 {alignment = 1 : i64} : i64, !llvm.ptr
    %251 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32_115 = arith.constant 24 : i32
    %252 = arith.addi %251, %c24_i32_115 : i32
    %253 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_116 = arith.constant 24 : i32
    %254 = arith.addi %253, %c24_i32_116 : i32
    %c0_i64_117 = arith.constant 0 : i64
    %255 = arith.extui %254 : i32 to i64
    %256 = arith.addi %255, %c0_i64_117 : i64
    %c8_i64_118 = arith.constant 8 : i64
    %257 = arith.addi %256, %c8_i64_118 : i64
    %c0_i32_119 = arith.constant 0 : i32
    %258 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_119) : (!llvm.ptr, i32) -> i32
    %259 = arith.extui %258 : i32 to i64
    %c65536_i64_120 = arith.constant 65536 : i64
    %260 = arith.muli %259, %c65536_i64_120 : i64
    %261 = arith.cmpi ult, %257, %260 : i64
    cf.cond_br %261, ^bb51, ^bb52
  ^bb50:  // pred: ^bb47
    %c1_i32_121 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_121) : (i32) -> ()
    cf.br ^bb49
  ^bb51:  // 2 preds: ^bb49, ^bb52
    %262 = llvm.getelementptr %7[%256] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %263 = llvm.load volatile %262 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_122 = arith.constant 0 : i64
    %264 = arith.extui %252 : i32 to i64
    %265 = arith.addi %264, %c0_i64_122 : i64
    %c8_i64_123 = arith.constant 8 : i64
    %266 = arith.addi %265, %c8_i64_123 : i64
    %c0_i32_124 = arith.constant 0 : i32
    %267 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_124) : (!llvm.ptr, i32) -> i32
    %268 = arith.extui %267 : i32 to i64
    %c65536_i64_125 = arith.constant 65536 : i64
    %269 = arith.muli %268, %c65536_i64_125 : i64
    %270 = arith.cmpi ult, %266, %269 : i64
    cf.cond_br %270, ^bb53, ^bb54
  ^bb52:  // pred: ^bb49
    %c1_i32_126 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_126) : (i32) -> ()
    cf.br ^bb51
  ^bb53:  // 2 preds: ^bb51, ^bb54
    %271 = llvm.getelementptr %7[%265] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %263, %271 {alignment = 1 : i64} : i64, !llvm.ptr
    %272 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_127 = arith.constant 16 : i32
    %273 = arith.addi %272, %c16_i32_127 : i32
    %274 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_128 = arith.constant 16 : i32
    %275 = arith.addi %274, %c16_i32_128 : i32
    %c0_i64_129 = arith.constant 0 : i64
    %276 = arith.extui %275 : i32 to i64
    %277 = arith.addi %276, %c0_i64_129 : i64
    %c8_i64_130 = arith.constant 8 : i64
    %278 = arith.addi %277, %c8_i64_130 : i64
    %c0_i32_131 = arith.constant 0 : i32
    %279 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_131) : (!llvm.ptr, i32) -> i32
    %280 = arith.extui %279 : i32 to i64
    %c65536_i64_132 = arith.constant 65536 : i64
    %281 = arith.muli %280, %c65536_i64_132 : i64
    %282 = arith.cmpi ult, %278, %281 : i64
    cf.cond_br %282, ^bb55, ^bb56
  ^bb54:  // pred: ^bb51
    %c1_i32_133 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_133) : (i32) -> ()
    cf.br ^bb53
  ^bb55:  // 2 preds: ^bb53, ^bb56
    %283 = llvm.getelementptr %7[%277] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %284 = llvm.load volatile %283 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_134 = arith.constant 0 : i64
    %285 = arith.extui %273 : i32 to i64
    %286 = arith.addi %285, %c0_i64_134 : i64
    %c8_i64_135 = arith.constant 8 : i64
    %287 = arith.addi %286, %c8_i64_135 : i64
    %c0_i32_136 = arith.constant 0 : i32
    %288 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_136) : (!llvm.ptr, i32) -> i32
    %289 = arith.extui %288 : i32 to i64
    %c65536_i64_137 = arith.constant 65536 : i64
    %290 = arith.muli %289, %c65536_i64_137 : i64
    %291 = arith.cmpi ult, %287, %290 : i64
    cf.cond_br %291, ^bb57, ^bb58
  ^bb56:  // pred: ^bb53
    %c1_i32_138 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_138) : (i32) -> ()
    cf.br ^bb55
  ^bb57:  // 2 preds: ^bb55, ^bb58
    %292 = llvm.getelementptr %7[%286] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %284, %292 {alignment = 1 : i64} : i64, !llvm.ptr
    %293 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_139 = arith.constant 8 : i32
    %294 = arith.addi %293, %c8_i32_139 : i32
    %295 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_140 = arith.constant 8 : i32
    %296 = arith.addi %295, %c8_i32_140 : i32
    %c0_i64_141 = arith.constant 0 : i64
    %297 = arith.extui %296 : i32 to i64
    %298 = arith.addi %297, %c0_i64_141 : i64
    %c8_i64_142 = arith.constant 8 : i64
    %299 = arith.addi %298, %c8_i64_142 : i64
    %c0_i32_143 = arith.constant 0 : i32
    %300 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_143) : (!llvm.ptr, i32) -> i32
    %301 = arith.extui %300 : i32 to i64
    %c65536_i64_144 = arith.constant 65536 : i64
    %302 = arith.muli %301, %c65536_i64_144 : i64
    %303 = arith.cmpi ult, %299, %302 : i64
    cf.cond_br %303, ^bb59, ^bb60
  ^bb58:  // pred: ^bb55
    %c1_i32_145 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_145) : (i32) -> ()
    cf.br ^bb57
  ^bb59:  // 2 preds: ^bb57, ^bb60
    %304 = llvm.getelementptr %7[%298] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %305 = llvm.load volatile %304 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_146 = arith.constant 0 : i64
    %306 = arith.extui %294 : i32 to i64
    %307 = arith.addi %306, %c0_i64_146 : i64
    %c8_i64_147 = arith.constant 8 : i64
    %308 = arith.addi %307, %c8_i64_147 : i64
    %c0_i32_148 = arith.constant 0 : i32
    %309 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_148) : (!llvm.ptr, i32) -> i32
    %310 = arith.extui %309 : i32 to i64
    %c65536_i64_149 = arith.constant 65536 : i64
    %311 = arith.muli %310, %c65536_i64_149 : i64
    %312 = arith.cmpi ult, %308, %311 : i64
    cf.cond_br %312, ^bb61, ^bb62
  ^bb60:  // pred: ^bb57
    %c1_i32_150 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_150) : (i32) -> ()
    cf.br ^bb59
  ^bb61:  // 2 preds: ^bb59, ^bb62
    %313 = llvm.getelementptr %7[%307] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %305, %313 {alignment = 1 : i64} : i64, !llvm.ptr
    %314 = llvm.load %1 : !llvm.ptr -> i32
    %315 = llvm.load %3 : !llvm.ptr -> i32
    %c2_i32_151 = arith.constant 2 : i32
    %316 = arith.addi %315, %c2_i32_151 : i32
    %c8_i64_152 = arith.constant 8 : i64
    %317 = arith.extui %314 : i32 to i64
    %318 = arith.addi %317, %c8_i64_152 : i64
    %c4_i64_153 = arith.constant 4 : i64
    %319 = arith.addi %318, %c4_i64_153 : i64
    %c0_i32_154 = arith.constant 0 : i32
    %320 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_154) : (!llvm.ptr, i32) -> i32
    %321 = arith.extui %320 : i32 to i64
    %c65536_i64_155 = arith.constant 65536 : i64
    %322 = arith.muli %321, %c65536_i64_155 : i64
    %323 = arith.cmpi ult, %319, %322 : i64
    cf.cond_br %323, ^bb63, ^bb64
  ^bb62:  // pred: ^bb59
    %c1_i32_156 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_156) : (i32) -> ()
    cf.br ^bb61
  ^bb63:  // 2 preds: ^bb61, ^bb64
    %324 = llvm.getelementptr %7[%318] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %316, %324 {alignment = 1 : i64} : i32, !llvm.ptr
    %325 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64_157 = arith.constant 20 : i64
    %326 = arith.extui %325 : i32 to i64
    %327 = arith.addi %326, %c20_i64_157 : i64
    %c4_i64_158 = arith.constant 4 : i64
    %328 = arith.addi %327, %c4_i64_158 : i64
    %c0_i32_159 = arith.constant 0 : i32
    %329 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_159) : (!llvm.ptr, i32) -> i32
    %330 = arith.extui %329 : i32 to i64
    %c65536_i64_160 = arith.constant 65536 : i64
    %331 = arith.muli %330, %c65536_i64_160 : i64
    %332 = arith.cmpi ult, %328, %331 : i64
    cf.cond_br %332, ^bb66, ^bb67
  ^bb64:  // pred: ^bb61
    %c1_i32_161 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_161) : (i32) -> ()
    cf.br ^bb63
  ^bb65:  // 2 preds: ^bb66, ^bb69
    cf.br ^bb2
  ^bb66:  // 2 preds: ^bb63, ^bb67
    %333 = llvm.getelementptr %7[%327] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %334 = llvm.load volatile %333 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %334, %0 : i32, !llvm.ptr
    %c0_i32_162 = arith.constant 0 : i32
    %335 = arith.cmpi eq, %334, %c0_i32_162 : i32
    %336 = arith.extui %335 : i1 to i32
    %c0_i32_163 = arith.constant 0 : i32
    %337 = arith.cmpi ne, %336, %c0_i32_163 : i32
    cf.cond_br %337, ^bb65, ^bb68
  ^bb67:  // pred: ^bb63
    %c1_i32_164 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_164) : (i32) -> ()
    cf.br ^bb66
  ^bb68:  // pred: ^bb66
    %338 = llvm.load %1 : !llvm.ptr -> i32
    %339 = llvm.load %0 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %340 = arith.addi %339, %c-1_i32 : i32
    %c20_i64_165 = arith.constant 20 : i64
    %341 = arith.extui %338 : i32 to i64
    %342 = arith.addi %341, %c20_i64_165 : i64
    %c4_i64_166 = arith.constant 4 : i64
    %343 = arith.addi %342, %c4_i64_166 : i64
    %c0_i32_167 = arith.constant 0 : i32
    %344 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_167) : (!llvm.ptr, i32) -> i32
    %345 = arith.extui %344 : i32 to i64
    %c65536_i64_168 = arith.constant 65536 : i64
    %346 = arith.muli %345, %c65536_i64_168 : i64
    %347 = arith.cmpi ult, %343, %346 : i64
    cf.cond_br %347, ^bb69, ^bb70
  ^bb69:  // 2 preds: ^bb68, ^bb70
    %348 = llvm.getelementptr %7[%342] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %340, %348 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb65
  ^bb70:  // pred: ^bb68
    %c1_i32_169 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_169) : (i32) -> ()
    cf.br ^bb69
  }
  func.func @f38(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %8 : i64, !llvm.ptr
    %9 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %14 = llvm.load %10 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %15 = arith.subi %14, %c64_i32 : i32
    llvm.store %15, %2 : i32, !llvm.ptr
    llvm.store %15, %10 : i32, !llvm.ptr
    %16 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %17 = arith.addi %16, %c24_i32 : i32
    %c2_i32 = arith.constant 2 : i32
    %c0_i32_8 = arith.constant 0 : i32
    %c1_i32_9 = arith.constant 1 : i32
    %c32_i32 = arith.constant 32 : i32
    call @f111(%arg0, %17, %c2_i32, %c0_i32_8, %c1_i32_9, %c32_i32) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %18 = llvm.load %2 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %19 = arith.extui %18 : i32 to i64
    %20 = arith.addi %19, %c28_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %21 = arith.addi %20, %c4_i64 : i64
    %c0_i32_10 = arith.constant 0 : i32
    %22 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_10) : (!llvm.ptr, i32) -> i32
    %23 = arith.extui %22 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %24 = arith.muli %23, %c65536_i64 : i64
    %25 = arith.cmpi ult, %21, %24 : i64
    cf.cond_br %25, ^bb3, ^bb4
  ^bb2:  // pred: ^bb47
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %26 = llvm.getelementptr %13[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %27 = llvm.load volatile %26 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %27, %3 : i32, !llvm.ptr
    %28 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %29 = arith.extui %28 : i32 to i64
    %30 = arith.addi %29, %c24_i64 : i64
    %c4_i64_11 = arith.constant 4 : i64
    %31 = arith.addi %30, %c4_i64_11 : i64
    %c0_i32_12 = arith.constant 0 : i32
    %32 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_12) : (!llvm.ptr, i32) -> i32
    %33 = arith.extui %32 : i32 to i64
    %c65536_i64_13 = arith.constant 65536 : i64
    %34 = arith.muli %33, %c65536_i64_13 : i64
    %35 = arith.cmpi ult, %31, %34 : i64
    cf.cond_br %35, ^bb7, ^bb8
  ^bb4:  // pred: ^bb1
    %c1_i32_14 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_14) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // pred: ^bb14
    %36 = llvm.load %5 : !llvm.ptr -> i32
    %37 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i64 = arith.constant 32 : i64
    %38 = arith.extui %37 : i32 to i64
    %39 = arith.addi %38, %c32_i64 : i64
    %c4_i64_15 = arith.constant 4 : i64
    %40 = arith.addi %39, %c4_i64_15 : i64
    %c0_i32_16 = arith.constant 0 : i32
    %41 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_16) : (!llvm.ptr, i32) -> i32
    %42 = arith.extui %41 : i32 to i64
    %c65536_i64_17 = arith.constant 65536 : i64
    %43 = arith.muli %42, %c65536_i64_17 : i64
    %44 = arith.cmpi ult, %40, %43 : i64
    cf.cond_br %44, ^bb51, ^bb52
  ^bb6:  // pred: ^bb7
    %45 = llvm.load %3 : !llvm.ptr -> i32
    %46 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i64_18 = arith.constant 32 : i64
    %47 = arith.extui %46 : i32 to i64
    %48 = arith.addi %47, %c32_i64_18 : i64
    %c4_i64_19 = arith.constant 4 : i64
    %49 = arith.addi %48, %c4_i64_19 : i64
    %c0_i32_20 = arith.constant 0 : i32
    %50 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_20) : (!llvm.ptr, i32) -> i32
    %51 = arith.extui %50 : i32 to i64
    %c65536_i64_21 = arith.constant 65536 : i64
    %52 = arith.muli %51, %c65536_i64_21 : i64
    %53 = arith.cmpi ult, %49, %52 : i64
    cf.cond_br %53, ^bb49, ^bb50
  ^bb7:  // 2 preds: ^bb3, ^bb8
    %54 = llvm.getelementptr %13[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %55 = llvm.load volatile %54 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_22 = arith.constant 1 : i32
    %56 = arith.cmpi eq, %55, %c1_i32_22 : i32
    %57 = arith.extui %56 : i1 to i32
    %c0_i32_23 = arith.constant 0 : i32
    %58 = arith.cmpi ne, %57, %c0_i32_23 : i32
    cf.cond_br %58, ^bb6, ^bb9
  ^bb8:  // pred: ^bb3
    %c1_i32_24 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_24) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // pred: ^bb7
    %59 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i64_25 = arith.constant 32 : i64
    %60 = arith.extui %59 : i32 to i64
    %61 = arith.addi %60, %c32_i64_25 : i64
    %c4_i64_26 = arith.constant 4 : i64
    %62 = arith.addi %61, %c4_i64_26 : i64
    %c0_i32_27 = arith.constant 0 : i32
    %63 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_27) : (!llvm.ptr, i32) -> i32
    %64 = arith.extui %63 : i32 to i64
    %c65536_i64_28 = arith.constant 65536 : i64
    %65 = arith.muli %64, %c65536_i64_28 : i64
    %66 = arith.cmpi ult, %62, %65 : i64
    cf.cond_br %66, ^bb10, ^bb11
  ^bb10:  // 2 preds: ^bb9, ^bb11
    %67 = llvm.getelementptr %13[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %68 = llvm.load volatile %67 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %68, %4 : i32, !llvm.ptr
    %69 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_29 = arith.constant 24 : i32
    %70 = arith.addi %69, %c24_i32_29 : i32
    %c4_i32 = arith.constant 4 : i32
    %c0_i32_30 = arith.constant 0 : i32
    %c4_i32_31 = arith.constant 4 : i32
    %c4_i32_32 = arith.constant 4 : i32
    call @f111(%arg0, %70, %c4_i32, %c0_i32_30, %c4_i32_31, %c4_i32_32) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %71 = llvm.load %2 : !llvm.ptr -> i32
    %c28_i64_33 = arith.constant 28 : i64
    %72 = arith.extui %71 : i32 to i64
    %73 = arith.addi %72, %c28_i64_33 : i64
    %c4_i64_34 = arith.constant 4 : i64
    %74 = arith.addi %73, %c4_i64_34 : i64
    %c0_i32_35 = arith.constant 0 : i32
    %75 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_35) : (!llvm.ptr, i32) -> i32
    %76 = arith.extui %75 : i32 to i64
    %c65536_i64_36 = arith.constant 65536 : i64
    %77 = arith.muli %76, %c65536_i64_36 : i64
    %78 = arith.cmpi ult, %74, %77 : i64
    cf.cond_br %78, ^bb12, ^bb13
  ^bb11:  // pred: ^bb9
    %c1_i32_37 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_37) : (i32) -> ()
    cf.br ^bb10
  ^bb12:  // 2 preds: ^bb10, ^bb13
    %79 = llvm.getelementptr %13[%73] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %80 = llvm.load volatile %79 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %80, %5 : i32, !llvm.ptr
    %81 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i64_38 = arith.constant 24 : i64
    %82 = arith.extui %81 : i32 to i64
    %83 = arith.addi %82, %c24_i64_38 : i64
    %c4_i64_39 = arith.constant 4 : i64
    %84 = arith.addi %83, %c4_i64_39 : i64
    %c0_i32_40 = arith.constant 0 : i32
    %85 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_40) : (!llvm.ptr, i32) -> i32
    %86 = arith.extui %85 : i32 to i64
    %c65536_i64_41 = arith.constant 65536 : i64
    %87 = arith.muli %86, %c65536_i64_41 : i64
    %88 = arith.cmpi ult, %84, %87 : i64
    cf.cond_br %88, ^bb14, ^bb15
  ^bb13:  // pred: ^bb10
    %c1_i32_42 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_42) : (i32) -> ()
    cf.br ^bb12
  ^bb14:  // 2 preds: ^bb12, ^bb15
    %89 = llvm.getelementptr %13[%83] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %90 = llvm.load volatile %89 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_43 = arith.constant 1 : i32
    %91 = arith.cmpi eq, %90, %c1_i32_43 : i32
    %92 = arith.extui %91 : i1 to i32
    %c0_i32_44 = arith.constant 0 : i32
    %93 = arith.cmpi ne, %92, %c0_i32_44 : i32
    cf.cond_br %93, ^bb5, ^bb16
  ^bb15:  // pred: ^bb12
    %c1_i32_45 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_45) : (i32) -> ()
    cf.br ^bb14
  ^bb16:  // pred: ^bb14
    %94 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %95 = arith.addi %94, %c16_i32 : i32
    llvm.store %95, %6 : i32, !llvm.ptr
    %96 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i64_46 = arith.constant 32 : i64
    %97 = arith.extui %96 : i32 to i64
    %98 = arith.addi %97, %c32_i64_46 : i64
    %c4_i64_47 = arith.constant 4 : i64
    %99 = arith.addi %98, %c4_i64_47 : i64
    %c0_i32_48 = arith.constant 0 : i32
    %100 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_48) : (!llvm.ptr, i32) -> i32
    %101 = arith.extui %100 : i32 to i64
    %c65536_i64_49 = arith.constant 65536 : i64
    %102 = arith.muli %101, %c65536_i64_49 : i64
    %103 = arith.cmpi ult, %99, %102 : i64
    cf.cond_br %103, ^bb17, ^bb18
  ^bb17:  // 2 preds: ^bb16, ^bb18
    %104 = llvm.getelementptr %13[%98] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %105 = llvm.load volatile %104 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_50 = arith.constant 0 : i64
    %106 = arith.extui %95 : i32 to i64
    %107 = arith.addi %106, %c0_i64_50 : i64
    %c4_i64_51 = arith.constant 4 : i64
    %108 = arith.addi %107, %c4_i64_51 : i64
    %c0_i32_52 = arith.constant 0 : i32
    %109 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_52) : (!llvm.ptr, i32) -> i32
    %110 = arith.extui %109 : i32 to i64
    %c65536_i64_53 = arith.constant 65536 : i64
    %111 = arith.muli %110, %c65536_i64_53 : i64
    %112 = arith.cmpi ult, %108, %111 : i64
    cf.cond_br %112, ^bb19, ^bb20
  ^bb18:  // pred: ^bb16
    %c1_i32_54 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_54) : (i32) -> ()
    cf.br ^bb17
  ^bb19:  // 2 preds: ^bb17, ^bb20
    %113 = llvm.getelementptr %13[%107] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %105, %113 {alignment = 1 : i64} : i32, !llvm.ptr
    %114 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %115 = arith.addi %114, %c8_i32 : i32
    llvm.store %115, %7 : i32, !llvm.ptr
    %c0_i32_55 = arith.constant 0 : i32
    %c0_i64_56 = arith.constant 0 : i64
    %116 = arith.extui %115 : i32 to i64
    %117 = arith.addi %116, %c0_i64_56 : i64
    %c4_i64_57 = arith.constant 4 : i64
    %118 = arith.addi %117, %c4_i64_57 : i64
    %c0_i32_58 = arith.constant 0 : i32
    %119 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_58) : (!llvm.ptr, i32) -> i32
    %120 = arith.extui %119 : i32 to i64
    %c65536_i64_59 = arith.constant 65536 : i64
    %121 = arith.muli %120, %c65536_i64_59 : i64
    %122 = arith.cmpi ult, %118, %121 : i64
    cf.cond_br %122, ^bb21, ^bb22
  ^bb20:  // pred: ^bb17
    %c1_i32_60 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_60) : (i32) -> ()
    cf.br ^bb19
  ^bb21:  // 2 preds: ^bb19, ^bb22
    %123 = llvm.getelementptr %13[%117] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_55, %123 {alignment = 1 : i64} : i32, !llvm.ptr
    %124 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_61 = arith.constant 0 : i32
    %c20_i64 = arith.constant 20 : i64
    %125 = arith.extui %124 : i32 to i64
    %126 = arith.addi %125, %c20_i64 : i64
    %c4_i64_62 = arith.constant 4 : i64
    %127 = arith.addi %126, %c4_i64_62 : i64
    %c0_i32_63 = arith.constant 0 : i32
    %128 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_63) : (!llvm.ptr, i32) -> i32
    %129 = arith.extui %128 : i32 to i64
    %c65536_i64_64 = arith.constant 65536 : i64
    %130 = arith.muli %129, %c65536_i64_64 : i64
    %131 = arith.cmpi ult, %127, %130 : i64
    cf.cond_br %131, ^bb23, ^bb24
  ^bb22:  // pred: ^bb19
    %c1_i32_65 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_65) : (i32) -> ()
    cf.br ^bb21
  ^bb23:  // 2 preds: ^bb21, ^bb24
    %132 = llvm.getelementptr %13[%126] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_61, %132 {alignment = 1 : i64} : i32, !llvm.ptr
    %133 = llvm.load %2 : !llvm.ptr -> i32
    %134 = llvm.load %5 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %135 = arith.extui %133 : i32 to i64
    %136 = arith.addi %135, %c12_i64 : i64
    %c4_i64_66 = arith.constant 4 : i64
    %137 = arith.addi %136, %c4_i64_66 : i64
    %c0_i32_67 = arith.constant 0 : i32
    %138 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_67) : (!llvm.ptr, i32) -> i32
    %139 = arith.extui %138 : i32 to i64
    %c65536_i64_68 = arith.constant 65536 : i64
    %140 = arith.muli %139, %c65536_i64_68 : i64
    %141 = arith.cmpi ult, %137, %140 : i64
    cf.cond_br %141, ^bb25, ^bb26
  ^bb24:  // pred: ^bb21
    %c1_i32_69 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_69) : (i32) -> ()
    cf.br ^bb23
  ^bb25:  // 2 preds: ^bb23, ^bb26
    %142 = llvm.getelementptr %13[%136] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %134, %142 {alignment = 1 : i64} : i32, !llvm.ptr
    %143 = llvm.load %2 : !llvm.ptr -> i32
    %144 = llvm.load %4 : !llvm.ptr -> i32
    %c4_i64_70 = arith.constant 4 : i64
    %145 = arith.extui %143 : i32 to i64
    %146 = arith.addi %145, %c4_i64_70 : i64
    %c4_i64_71 = arith.constant 4 : i64
    %147 = arith.addi %146, %c4_i64_71 : i64
    %c0_i32_72 = arith.constant 0 : i32
    %148 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_72) : (!llvm.ptr, i32) -> i32
    %149 = arith.extui %148 : i32 to i64
    %c65536_i64_73 = arith.constant 65536 : i64
    %150 = arith.muli %149, %c65536_i64_73 : i64
    %151 = arith.cmpi ult, %147, %150 : i64
    cf.cond_br %151, ^bb27, ^bb28
  ^bb26:  // pred: ^bb23
    %c1_i32_74 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_74) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // 2 preds: ^bb25, ^bb28
    %152 = llvm.getelementptr %13[%146] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %144, %152 {alignment = 1 : i64} : i32, !llvm.ptr
    %153 = llvm.load %2 : !llvm.ptr -> i32
    %154 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_75 = arith.constant 0 : i64
    %155 = arith.extui %153 : i32 to i64
    %156 = arith.addi %155, %c0_i64_75 : i64
    %c4_i64_76 = arith.constant 4 : i64
    %157 = arith.addi %156, %c4_i64_76 : i64
    %c0_i32_77 = arith.constant 0 : i32
    %158 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_77) : (!llvm.ptr, i32) -> i32
    %159 = arith.extui %158 : i32 to i64
    %c65536_i64_78 = arith.constant 65536 : i64
    %160 = arith.muli %159, %c65536_i64_78 : i64
    %161 = arith.cmpi ult, %157, %160 : i64
    cf.cond_br %161, ^bb29, ^bb30
  ^bb28:  // pred: ^bb25
    %c1_i32_79 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_79) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // 2 preds: ^bb27, ^bb30
    %162 = llvm.getelementptr %13[%156] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %154, %162 {alignment = 1 : i64} : i32, !llvm.ptr
    %163 = llvm.load %1 : !llvm.ptr -> i32
    %164 = llvm.load %2 : !llvm.ptr -> i32
    call @f39(%arg0, %163, %164) : (!llvm.ptr, i32, i32) -> ()
    %165 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_80 = arith.constant 24 : i32
    %166 = arith.addi %165, %c24_i32_80 : i32
    %c16_i32_81 = arith.constant 16 : i32
    %167 = arith.addi %166, %c16_i32_81 : i32
    %168 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_82 = arith.constant 0 : i64
    %169 = arith.extui %168 : i32 to i64
    %170 = arith.addi %169, %c0_i64_82 : i64
    %c8_i64 = arith.constant 8 : i64
    %171 = arith.addi %170, %c8_i64 : i64
    %c0_i32_83 = arith.constant 0 : i32
    %172 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_83) : (!llvm.ptr, i32) -> i32
    %173 = arith.extui %172 : i32 to i64
    %c65536_i64_84 = arith.constant 65536 : i64
    %174 = arith.muli %173, %c65536_i64_84 : i64
    %175 = arith.cmpi ult, %171, %174 : i64
    cf.cond_br %175, ^bb31, ^bb32
  ^bb30:  // pred: ^bb27
    %c1_i32_85 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_85) : (i32) -> ()
    cf.br ^bb29
  ^bb31:  // 2 preds: ^bb29, ^bb32
    %176 = llvm.getelementptr %13[%170] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %177 = llvm.load volatile %176 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_86 = arith.constant 0 : i64
    %178 = arith.extui %167 : i32 to i64
    %179 = arith.addi %178, %c0_i64_86 : i64
    %c8_i64_87 = arith.constant 8 : i64
    %180 = arith.addi %179, %c8_i64_87 : i64
    %c0_i32_88 = arith.constant 0 : i32
    %181 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_88) : (!llvm.ptr, i32) -> i32
    %182 = arith.extui %181 : i32 to i64
    %c65536_i64_89 = arith.constant 65536 : i64
    %183 = arith.muli %182, %c65536_i64_89 : i64
    %184 = arith.cmpi ult, %180, %183 : i64
    cf.cond_br %184, ^bb33, ^bb34
  ^bb32:  // pred: ^bb29
    %c1_i32_90 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_90) : (i32) -> ()
    cf.br ^bb31
  ^bb33:  // 2 preds: ^bb31, ^bb34
    %185 = llvm.getelementptr %13[%179] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %177, %185 {alignment = 1 : i64} : i64, !llvm.ptr
    %186 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_91 = arith.constant 24 : i32
    %187 = arith.addi %186, %c24_i32_91 : i32
    %c8_i32_92 = arith.constant 8 : i32
    %188 = arith.addi %187, %c8_i32_92 : i32
    %189 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_93 = arith.constant 0 : i64
    %190 = arith.extui %189 : i32 to i64
    %191 = arith.addi %190, %c0_i64_93 : i64
    %c8_i64_94 = arith.constant 8 : i64
    %192 = arith.addi %191, %c8_i64_94 : i64
    %c0_i32_95 = arith.constant 0 : i32
    %193 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_95) : (!llvm.ptr, i32) -> i32
    %194 = arith.extui %193 : i32 to i64
    %c65536_i64_96 = arith.constant 65536 : i64
    %195 = arith.muli %194, %c65536_i64_96 : i64
    %196 = arith.cmpi ult, %192, %195 : i64
    cf.cond_br %196, ^bb35, ^bb36
  ^bb34:  // pred: ^bb31
    %c1_i32_97 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_97) : (i32) -> ()
    cf.br ^bb33
  ^bb35:  // 2 preds: ^bb33, ^bb36
    %197 = llvm.getelementptr %13[%191] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %198 = llvm.load volatile %197 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_98 = arith.constant 0 : i64
    %199 = arith.extui %188 : i32 to i64
    %200 = arith.addi %199, %c0_i64_98 : i64
    %c8_i64_99 = arith.constant 8 : i64
    %201 = arith.addi %200, %c8_i64_99 : i64
    %c0_i32_100 = arith.constant 0 : i32
    %202 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_100) : (!llvm.ptr, i32) -> i32
    %203 = arith.extui %202 : i32 to i64
    %c65536_i64_101 = arith.constant 65536 : i64
    %204 = arith.muli %203, %c65536_i64_101 : i64
    %205 = arith.cmpi ult, %201, %204 : i64
    cf.cond_br %205, ^bb37, ^bb38
  ^bb36:  // pred: ^bb33
    %c1_i32_102 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_102) : (i32) -> ()
    cf.br ^bb35
  ^bb37:  // 2 preds: ^bb35, ^bb38
    %206 = llvm.getelementptr %13[%200] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %198, %206 {alignment = 1 : i64} : i64, !llvm.ptr
    %207 = llvm.load %2 : !llvm.ptr -> i32
    %208 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_103 = arith.constant 0 : i64
    %209 = arith.extui %208 : i32 to i64
    %210 = arith.addi %209, %c0_i64_103 : i64
    %c8_i64_104 = arith.constant 8 : i64
    %211 = arith.addi %210, %c8_i64_104 : i64
    %c0_i32_105 = arith.constant 0 : i32
    %212 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_105) : (!llvm.ptr, i32) -> i32
    %213 = arith.extui %212 : i32 to i64
    %c65536_i64_106 = arith.constant 65536 : i64
    %214 = arith.muli %213, %c65536_i64_106 : i64
    %215 = arith.cmpi ult, %211, %214 : i64
    cf.cond_br %215, ^bb39, ^bb40
  ^bb38:  // pred: ^bb35
    %c1_i32_107 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_107) : (i32) -> ()
    cf.br ^bb37
  ^bb39:  // 2 preds: ^bb37, ^bb40
    %216 = llvm.getelementptr %13[%210] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %217 = llvm.load volatile %216 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %217, %8 : i64, !llvm.ptr
    %c24_i64_108 = arith.constant 24 : i64
    %218 = arith.extui %207 : i32 to i64
    %219 = arith.addi %218, %c24_i64_108 : i64
    %c8_i64_109 = arith.constant 8 : i64
    %220 = arith.addi %219, %c8_i64_109 : i64
    %c0_i32_110 = arith.constant 0 : i32
    %221 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_110) : (!llvm.ptr, i32) -> i32
    %222 = arith.extui %221 : i32 to i64
    %c65536_i64_111 = arith.constant 65536 : i64
    %223 = arith.muli %222, %c65536_i64_111 : i64
    %224 = arith.cmpi ult, %220, %223 : i64
    cf.cond_br %224, ^bb41, ^bb42
  ^bb40:  // pred: ^bb37
    %c1_i32_112 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_112) : (i32) -> ()
    cf.br ^bb39
  ^bb41:  // 2 preds: ^bb39, ^bb42
    %225 = llvm.getelementptr %13[%219] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %217, %225 {alignment = 1 : i64} : i64, !llvm.ptr
    %226 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %227 = arith.addi %226, %c48_i32 : i32
    %c8_i32_113 = arith.constant 8 : i32
    %228 = arith.addi %227, %c8_i32_113 : i32
    %229 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_114 = arith.constant 0 : i64
    %230 = arith.extui %229 : i32 to i64
    %231 = arith.addi %230, %c0_i64_114 : i64
    %c4_i64_115 = arith.constant 4 : i64
    %232 = arith.addi %231, %c4_i64_115 : i64
    %c0_i32_116 = arith.constant 0 : i32
    %233 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_116) : (!llvm.ptr, i32) -> i32
    %234 = arith.extui %233 : i32 to i64
    %c65536_i64_117 = arith.constant 65536 : i64
    %235 = arith.muli %234, %c65536_i64_117 : i64
    %236 = arith.cmpi ult, %232, %235 : i64
    cf.cond_br %236, ^bb43, ^bb44
  ^bb42:  // pred: ^bb39
    %c1_i32_118 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_118) : (i32) -> ()
    cf.br ^bb41
  ^bb43:  // 2 preds: ^bb41, ^bb44
    %237 = llvm.getelementptr %13[%231] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %238 = llvm.load volatile %237 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_119 = arith.constant 0 : i64
    %239 = arith.extui %228 : i32 to i64
    %240 = arith.addi %239, %c0_i64_119 : i64
    %c4_i64_120 = arith.constant 4 : i64
    %241 = arith.addi %240, %c4_i64_120 : i64
    %c0_i32_121 = arith.constant 0 : i32
    %242 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_121) : (!llvm.ptr, i32) -> i32
    %243 = arith.extui %242 : i32 to i64
    %c65536_i64_122 = arith.constant 65536 : i64
    %244 = arith.muli %243, %c65536_i64_122 : i64
    %245 = arith.cmpi ult, %241, %244 : i64
    cf.cond_br %245, ^bb45, ^bb46
  ^bb44:  // pred: ^bb41
    %c1_i32_123 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_123) : (i32) -> ()
    cf.br ^bb43
  ^bb45:  // 2 preds: ^bb43, ^bb46
    %246 = llvm.getelementptr %13[%240] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %238, %246 {alignment = 1 : i64} : i32, !llvm.ptr
    %247 = llvm.load %2 : !llvm.ptr -> i32
    %248 = llvm.load %8 : !llvm.ptr -> i64
    %c48_i64 = arith.constant 48 : i64
    %249 = arith.extui %247 : i32 to i64
    %250 = arith.addi %249, %c48_i64 : i64
    %c8_i64_124 = arith.constant 8 : i64
    %251 = arith.addi %250, %c8_i64_124 : i64
    %c0_i32_125 = arith.constant 0 : i32
    %252 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_125) : (!llvm.ptr, i32) -> i32
    %253 = arith.extui %252 : i32 to i64
    %c65536_i64_126 = arith.constant 65536 : i64
    %254 = arith.muli %253, %c65536_i64_126 : i64
    %255 = arith.cmpi ult, %251, %254 : i64
    cf.cond_br %255, ^bb47, ^bb48
  ^bb46:  // pred: ^bb43
    %c1_i32_127 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_127) : (i32) -> ()
    cf.br ^bb45
  ^bb47:  // 2 preds: ^bb45, ^bb48
    %256 = llvm.getelementptr %13[%250] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %248, %256 {alignment = 1 : i64} : i64, !llvm.ptr
    %257 = llvm.load %2 : !llvm.ptr -> i32
    %c36_i32 = arith.constant 36 : i32
    %258 = arith.addi %257, %c36_i32 : i32
    llvm.store %258, %7 : i32, !llvm.ptr
    call @f89(%arg0, %258) : (!llvm.ptr, i32) -> ()
    %259 = llvm.load %7 : !llvm.ptr -> i32
    call @f90(%arg0, %259) : (!llvm.ptr, i32) -> ()
    %260 = llvm.load %0 : !llvm.ptr -> i32
    %261 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i32_128 = arith.constant 48 : i32
    %262 = arith.addi %261, %c48_i32_128 : i32
    call @f86(%arg0, %260, %262) : (!llvm.ptr, i32, i32) -> ()
    %263 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_129 = arith.constant 64 : i32
    %264 = arith.addi %263, %c64_i32_129 : i32
    llvm.store %264, %10 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb48:  // pred: ^bb45
    %c1_i32_130 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_130) : (i32) -> ()
    cf.br ^bb47
  ^bb49:  // 2 preds: ^bb6, ^bb50
    %265 = llvm.getelementptr %13[%48] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %266 = llvm.load volatile %265 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f143(%arg0, %45, %266) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb50:  // pred: ^bb6
    %c1_i32_131 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_131) : (i32) -> ()
    cf.br ^bb49
  ^bb51:  // 2 preds: ^bb5, ^bb52
    %267 = llvm.getelementptr %13[%39] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %268 = llvm.load volatile %267 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f143(%arg0, %36, %268) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb52:  // pred: ^bb5
    %c1_i32_132 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_132) : (i32) -> ()
    cf.br ^bb51
  }
  func.func @f39(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %7 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %8 = arith.extui %7 : i32 to i64
    %9 = arith.addi %8, %c20_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %10 = arith.addi %9, %c4_i64 : i64
    %c0_i32_3 = arith.constant 0 : i32
    %11 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_3) : (!llvm.ptr, i32) -> i32
    %12 = arith.extui %11 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %13 = arith.muli %12, %c65536_i64 : i64
    %14 = arith.cmpi ult, %10, %13 : i64
    cf.cond_br %14, ^bb4, ^bb5
  ^bb2:  // pred: ^bb65
    return
  ^bb3:  // 2 preds: ^bb6, ^bb8
    %15 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %16 = arith.extui %15 : i32 to i64
    %17 = arith.addi %16, %c16_i64 : i64
    %c4_i64_4 = arith.constant 4 : i64
    %18 = arith.addi %17, %c4_i64_4 : i64
    %c0_i32_5 = arith.constant 0 : i32
    %19 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_5) : (!llvm.ptr, i32) -> i32
    %20 = arith.extui %19 : i32 to i64
    %c65536_i64_6 = arith.constant 65536 : i64
    %21 = arith.muli %20, %c65536_i64_6 : i64
    %22 = arith.cmpi ult, %18, %21 : i64
    cf.cond_br %22, ^bb9, ^bb10
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %23 = llvm.getelementptr %6[%9] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %24 = llvm.load volatile %23 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %24, %2 : i32, !llvm.ptr
    %25 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %26 = arith.extui %25 : i32 to i64
    %27 = arith.addi %26, %c12_i64 : i64
    %c4_i64_7 = arith.constant 4 : i64
    %28 = arith.addi %27, %c4_i64_7 : i64
    %c0_i32_8 = arith.constant 0 : i32
    %29 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_8) : (!llvm.ptr, i32) -> i32
    %30 = arith.extui %29 : i32 to i64
    %c65536_i64_9 = arith.constant 65536 : i64
    %31 = arith.muli %30, %c65536_i64_9 : i64
    %32 = arith.cmpi ult, %28, %31 : i64
    cf.cond_br %32, ^bb6, ^bb7
  ^bb5:  // pred: ^bb1
    %c1_i32_10 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_10) : (i32) -> ()
    cf.br ^bb4
  ^bb6:  // 2 preds: ^bb4, ^bb7
    %33 = llvm.getelementptr %6[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %34 = llvm.load volatile %33 {alignment = 1 : i64} : !llvm.ptr -> i32
    %35 = arith.cmpi eq, %24, %34 : i32
    %36 = arith.extui %35 : i1 to i32
    %c0_i32_11 = arith.constant 0 : i32
    %37 = arith.cmpi eq, %36, %c0_i32_11 : i32
    %38 = arith.extui %37 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %39 = arith.cmpi ne, %38, %c0_i32_12 : i32
    cf.cond_br %39, ^bb3, ^bb8
  ^bb7:  // pred: ^bb4
    %c1_i32_13 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_13) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // pred: ^bb6
    %40 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %41 = arith.addi %40, %c12_i32 : i32
    call @f87(%arg0, %41) : (!llvm.ptr, i32) -> ()
    cf.br ^bb3
  ^bb9:  // 2 preds: ^bb3, ^bb10
    %42 = llvm.getelementptr %6[%17] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %43 = llvm.load volatile %42 {alignment = 1 : i64} : !llvm.ptr -> i32
    %44 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c31_i32 = arith.constant 31 : i32
    %45 = arith.cmpi ule, %c2_i32, %c31_i32 : i32
    %46 = scf.if %45 -> (i32) {
      %346 = arith.shli %44, %c2_i32 : i32
      scf.yield %346 : i32
    } else {
      %c0_i32_165 = arith.constant 0 : i32
      scf.yield %c0_i32_165 : i32
    }
    %47 = arith.addi %43, %46 : i32
    %c64_i32 = arith.constant 64 : i32
    %c0_i64 = arith.constant 0 : i64
    %48 = arith.extui %47 : i32 to i64
    %49 = arith.addi %48, %c0_i64 : i64
    %c4_i64_14 = arith.constant 4 : i64
    %50 = arith.addi %49, %c4_i64_14 : i64
    %c0_i32_15 = arith.constant 0 : i32
    %51 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_15) : (!llvm.ptr, i32) -> i32
    %52 = arith.extui %51 : i32 to i64
    %c65536_i64_16 = arith.constant 65536 : i64
    %53 = arith.muli %52, %c65536_i64_16 : i64
    %54 = arith.cmpi ult, %50, %53 : i64
    cf.cond_br %54, ^bb11, ^bb12
  ^bb10:  // pred: ^bb3
    %c1_i32_17 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_17) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %55 = llvm.getelementptr %6[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c64_i32, %55 {alignment = 1 : i64} : i32, !llvm.ptr
    %56 = llvm.load %1 : !llvm.ptr -> i32
    %57 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_18 = arith.constant 1 : i32
    %58 = arith.addi %57, %c1_i32_18 : i32
    %c20_i64_19 = arith.constant 20 : i64
    %59 = arith.extui %56 : i32 to i64
    %60 = arith.addi %59, %c20_i64_19 : i64
    %c4_i64_20 = arith.constant 4 : i64
    %61 = arith.addi %60, %c4_i64_20 : i64
    %c0_i32_21 = arith.constant 0 : i32
    %62 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_21) : (!llvm.ptr, i32) -> i32
    %63 = arith.extui %62 : i32 to i64
    %c65536_i64_22 = arith.constant 65536 : i64
    %64 = arith.muli %63, %c65536_i64_22 : i64
    %65 = arith.cmpi ult, %61, %64 : i64
    cf.cond_br %65, ^bb13, ^bb14
  ^bb12:  // pred: ^bb9
    %c1_i32_23 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_23) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %66 = llvm.getelementptr %6[%60] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %58, %66 {alignment = 1 : i64} : i32, !llvm.ptr
    %67 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %68 = arith.extui %67 : i32 to i64
    %69 = arith.addi %68, %c8_i64 : i64
    %c4_i64_24 = arith.constant 4 : i64
    %70 = arith.addi %69, %c4_i64_24 : i64
    %c0_i32_25 = arith.constant 0 : i32
    %71 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_25) : (!llvm.ptr, i32) -> i32
    %72 = arith.extui %71 : i32 to i64
    %c65536_i64_26 = arith.constant 65536 : i64
    %73 = arith.muli %72, %c65536_i64_26 : i64
    %74 = arith.cmpi ult, %70, %73 : i64
    cf.cond_br %74, ^bb16, ^bb17
  ^bb14:  // pred: ^bb11
    %c1_i32_27 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_27) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // 2 preds: ^bb18, ^bb20
    %75 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_28 = arith.constant 4 : i64
    %76 = arith.extui %75 : i32 to i64
    %77 = arith.addi %76, %c4_i64_28 : i64
    %c4_i64_29 = arith.constant 4 : i64
    %78 = arith.addi %77, %c4_i64_29 : i64
    %c0_i32_30 = arith.constant 0 : i32
    %79 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_30) : (!llvm.ptr, i32) -> i32
    %80 = arith.extui %79 : i32 to i64
    %c65536_i64_31 = arith.constant 65536 : i64
    %81 = arith.muli %80, %c65536_i64_31 : i64
    %82 = arith.cmpi ult, %78, %81 : i64
    cf.cond_br %82, ^bb21, ^bb22
  ^bb16:  // 2 preds: ^bb13, ^bb17
    %83 = llvm.getelementptr %6[%69] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %84 = llvm.load volatile %83 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %84, %2 : i32, !llvm.ptr
    %85 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_32 = arith.constant 0 : i64
    %86 = arith.extui %85 : i32 to i64
    %87 = arith.addi %86, %c0_i64_32 : i64
    %c4_i64_33 = arith.constant 4 : i64
    %88 = arith.addi %87, %c4_i64_33 : i64
    %c0_i32_34 = arith.constant 0 : i32
    %89 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_34) : (!llvm.ptr, i32) -> i32
    %90 = arith.extui %89 : i32 to i64
    %c65536_i64_35 = arith.constant 65536 : i64
    %91 = arith.muli %90, %c65536_i64_35 : i64
    %92 = arith.cmpi ult, %88, %91 : i64
    cf.cond_br %92, ^bb18, ^bb19
  ^bb17:  // pred: ^bb13
    %c1_i32_36 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_36) : (i32) -> ()
    cf.br ^bb16
  ^bb18:  // 2 preds: ^bb16, ^bb19
    %93 = llvm.getelementptr %6[%87] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %94 = llvm.load volatile %93 {alignment = 1 : i64} : !llvm.ptr -> i32
    %95 = arith.cmpi eq, %84, %94 : i32
    %96 = arith.extui %95 : i1 to i32
    %c0_i32_37 = arith.constant 0 : i32
    %97 = arith.cmpi eq, %96, %c0_i32_37 : i32
    %98 = arith.extui %97 : i1 to i32
    %c0_i32_38 = arith.constant 0 : i32
    %99 = arith.cmpi ne, %98, %c0_i32_38 : i32
    cf.cond_br %99, ^bb15, ^bb20
  ^bb19:  // pred: ^bb16
    %c1_i32_39 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_39) : (i32) -> ()
    cf.br ^bb18
  ^bb20:  // pred: ^bb18
    %100 = llvm.load %1 : !llvm.ptr -> i32
    call @f88(%arg0, %100) : (!llvm.ptr, i32) -> ()
    cf.br ^bb15
  ^bb21:  // 2 preds: ^bb15, ^bb22
    %101 = llvm.getelementptr %6[%77] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %102 = llvm.load volatile %101 {alignment = 1 : i64} : !llvm.ptr -> i32
    %103 = llvm.load %2 : !llvm.ptr -> i32
    %c5_i32 = arith.constant 5 : i32
    %c31_i32_40 = arith.constant 31 : i32
    %104 = arith.cmpi ule, %c5_i32, %c31_i32_40 : i32
    %105 = scf.if %104 -> (i32) {
      %346 = arith.shli %103, %c5_i32 : i32
      scf.yield %346 : i32
    } else {
      %c0_i32_165 = arith.constant 0 : i32
      scf.yield %c0_i32_165 : i32
    }
    %106 = arith.addi %102, %105 : i32
    llvm.store %106, %3 : i32, !llvm.ptr
    %107 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_41 = arith.constant 0 : i64
    %108 = arith.extui %107 : i32 to i64
    %109 = arith.addi %108, %c0_i64_41 : i64
    %c8_i64_42 = arith.constant 8 : i64
    %110 = arith.addi %109, %c8_i64_42 : i64
    %c0_i32_43 = arith.constant 0 : i32
    %111 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_43) : (!llvm.ptr, i32) -> i32
    %112 = arith.extui %111 : i32 to i64
    %c65536_i64_44 = arith.constant 65536 : i64
    %113 = arith.muli %112, %c65536_i64_44 : i64
    %114 = arith.cmpi ult, %110, %113 : i64
    cf.cond_br %114, ^bb23, ^bb24
  ^bb22:  // pred: ^bb15
    %c1_i32_45 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_45) : (i32) -> ()
    cf.br ^bb21
  ^bb23:  // 2 preds: ^bb21, ^bb24
    %115 = llvm.getelementptr %6[%109] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %116 = llvm.load volatile %115 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_46 = arith.constant 0 : i64
    %117 = arith.extui %106 : i32 to i64
    %118 = arith.addi %117, %c0_i64_46 : i64
    %c8_i64_47 = arith.constant 8 : i64
    %119 = arith.addi %118, %c8_i64_47 : i64
    %c0_i32_48 = arith.constant 0 : i32
    %120 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_48) : (!llvm.ptr, i32) -> i32
    %121 = arith.extui %120 : i32 to i64
    %c65536_i64_49 = arith.constant 65536 : i64
    %122 = arith.muli %121, %c65536_i64_49 : i64
    %123 = arith.cmpi ult, %119, %122 : i64
    cf.cond_br %123, ^bb25, ^bb26
  ^bb24:  // pred: ^bb21
    %c1_i32_50 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_50) : (i32) -> ()
    cf.br ^bb23
  ^bb25:  // 2 preds: ^bb23, ^bb26
    %124 = llvm.getelementptr %6[%118] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %116, %124 {alignment = 1 : i64} : i64, !llvm.ptr
    %125 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %126 = arith.addi %125, %c24_i32 : i32
    %127 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32_51 = arith.constant 24 : i32
    %128 = arith.addi %127, %c24_i32_51 : i32
    %c0_i64_52 = arith.constant 0 : i64
    %129 = arith.extui %128 : i32 to i64
    %130 = arith.addi %129, %c0_i64_52 : i64
    %c8_i64_53 = arith.constant 8 : i64
    %131 = arith.addi %130, %c8_i64_53 : i64
    %c0_i32_54 = arith.constant 0 : i32
    %132 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_54) : (!llvm.ptr, i32) -> i32
    %133 = arith.extui %132 : i32 to i64
    %c65536_i64_55 = arith.constant 65536 : i64
    %134 = arith.muli %133, %c65536_i64_55 : i64
    %135 = arith.cmpi ult, %131, %134 : i64
    cf.cond_br %135, ^bb27, ^bb28
  ^bb26:  // pred: ^bb23
    %c1_i32_56 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_56) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // 2 preds: ^bb25, ^bb28
    %136 = llvm.getelementptr %6[%130] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %137 = llvm.load volatile %136 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_57 = arith.constant 0 : i64
    %138 = arith.extui %126 : i32 to i64
    %139 = arith.addi %138, %c0_i64_57 : i64
    %c8_i64_58 = arith.constant 8 : i64
    %140 = arith.addi %139, %c8_i64_58 : i64
    %c0_i32_59 = arith.constant 0 : i32
    %141 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_59) : (!llvm.ptr, i32) -> i32
    %142 = arith.extui %141 : i32 to i64
    %c65536_i64_60 = arith.constant 65536 : i64
    %143 = arith.muli %142, %c65536_i64_60 : i64
    %144 = arith.cmpi ult, %140, %143 : i64
    cf.cond_br %144, ^bb29, ^bb30
  ^bb28:  // pred: ^bb25
    %c1_i32_61 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_61) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // 2 preds: ^bb27, ^bb30
    %145 = llvm.getelementptr %6[%139] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %137, %145 {alignment = 1 : i64} : i64, !llvm.ptr
    %146 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %147 = arith.addi %146, %c16_i32 : i32
    %148 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_62 = arith.constant 16 : i32
    %149 = arith.addi %148, %c16_i32_62 : i32
    %c0_i64_63 = arith.constant 0 : i64
    %150 = arith.extui %149 : i32 to i64
    %151 = arith.addi %150, %c0_i64_63 : i64
    %c8_i64_64 = arith.constant 8 : i64
    %152 = arith.addi %151, %c8_i64_64 : i64
    %c0_i32_65 = arith.constant 0 : i32
    %153 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_65) : (!llvm.ptr, i32) -> i32
    %154 = arith.extui %153 : i32 to i64
    %c65536_i64_66 = arith.constant 65536 : i64
    %155 = arith.muli %154, %c65536_i64_66 : i64
    %156 = arith.cmpi ult, %152, %155 : i64
    cf.cond_br %156, ^bb31, ^bb32
  ^bb30:  // pred: ^bb27
    %c1_i32_67 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_67) : (i32) -> ()
    cf.br ^bb29
  ^bb31:  // 2 preds: ^bb29, ^bb32
    %157 = llvm.getelementptr %6[%151] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %158 = llvm.load volatile %157 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_68 = arith.constant 0 : i64
    %159 = arith.extui %147 : i32 to i64
    %160 = arith.addi %159, %c0_i64_68 : i64
    %c8_i64_69 = arith.constant 8 : i64
    %161 = arith.addi %160, %c8_i64_69 : i64
    %c0_i32_70 = arith.constant 0 : i32
    %162 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_70) : (!llvm.ptr, i32) -> i32
    %163 = arith.extui %162 : i32 to i64
    %c65536_i64_71 = arith.constant 65536 : i64
    %164 = arith.muli %163, %c65536_i64_71 : i64
    %165 = arith.cmpi ult, %161, %164 : i64
    cf.cond_br %165, ^bb33, ^bb34
  ^bb32:  // pred: ^bb29
    %c1_i32_72 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_72) : (i32) -> ()
    cf.br ^bb31
  ^bb33:  // 2 preds: ^bb31, ^bb34
    %166 = llvm.getelementptr %6[%160] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %158, %166 {alignment = 1 : i64} : i64, !llvm.ptr
    %167 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %168 = arith.addi %167, %c8_i32 : i32
    %169 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_73 = arith.constant 8 : i32
    %170 = arith.addi %169, %c8_i32_73 : i32
    %c0_i64_74 = arith.constant 0 : i64
    %171 = arith.extui %170 : i32 to i64
    %172 = arith.addi %171, %c0_i64_74 : i64
    %c8_i64_75 = arith.constant 8 : i64
    %173 = arith.addi %172, %c8_i64_75 : i64
    %c0_i32_76 = arith.constant 0 : i32
    %174 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_76) : (!llvm.ptr, i32) -> i32
    %175 = arith.extui %174 : i32 to i64
    %c65536_i64_77 = arith.constant 65536 : i64
    %176 = arith.muli %175, %c65536_i64_77 : i64
    %177 = arith.cmpi ult, %173, %176 : i64
    cf.cond_br %177, ^bb35, ^bb36
  ^bb34:  // pred: ^bb31
    %c1_i32_78 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_78) : (i32) -> ()
    cf.br ^bb33
  ^bb35:  // 2 preds: ^bb33, ^bb36
    %178 = llvm.getelementptr %6[%172] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %179 = llvm.load volatile %178 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_79 = arith.constant 0 : i64
    %180 = arith.extui %168 : i32 to i64
    %181 = arith.addi %180, %c0_i64_79 : i64
    %c8_i64_80 = arith.constant 8 : i64
    %182 = arith.addi %181, %c8_i64_80 : i64
    %c0_i32_81 = arith.constant 0 : i32
    %183 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_81) : (!llvm.ptr, i32) -> i32
    %184 = arith.extui %183 : i32 to i64
    %c65536_i64_82 = arith.constant 65536 : i64
    %185 = arith.muli %184, %c65536_i64_82 : i64
    %186 = arith.cmpi ult, %182, %185 : i64
    cf.cond_br %186, ^bb37, ^bb38
  ^bb36:  // pred: ^bb33
    %c1_i32_83 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_83) : (i32) -> ()
    cf.br ^bb35
  ^bb37:  // 2 preds: ^bb35, ^bb38
    %187 = llvm.getelementptr %6[%181] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %179, %187 {alignment = 1 : i64} : i64, !llvm.ptr
    %188 = llvm.load %1 : !llvm.ptr -> i32
    %189 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_84 = arith.constant 1 : i32
    %190 = arith.addi %189, %c1_i32_84 : i32
    llvm.store %190, %3 : i32, !llvm.ptr
    %c8_i64_85 = arith.constant 8 : i64
    %191 = arith.extui %188 : i32 to i64
    %192 = arith.addi %191, %c8_i64_85 : i64
    %c4_i64_86 = arith.constant 4 : i64
    %193 = arith.addi %192, %c4_i64_86 : i64
    %c0_i32_87 = arith.constant 0 : i32
    %194 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_87) : (!llvm.ptr, i32) -> i32
    %195 = arith.extui %194 : i32 to i64
    %c65536_i64_88 = arith.constant 65536 : i64
    %196 = arith.muli %195, %c65536_i64_88 : i64
    %197 = arith.cmpi ult, %193, %196 : i64
    cf.cond_br %197, ^bb39, ^bb40
  ^bb38:  // pred: ^bb35
    %c1_i32_89 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_89) : (i32) -> ()
    cf.br ^bb37
  ^bb39:  // 2 preds: ^bb37, ^bb40
    %198 = llvm.getelementptr %6[%192] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %190, %198 {alignment = 1 : i64} : i32, !llvm.ptr
    %199 = llvm.load %3 : !llvm.ptr -> i32
    %200 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_90 = arith.constant 0 : i64
    %201 = arith.extui %200 : i32 to i64
    %202 = arith.addi %201, %c0_i64_90 : i64
    %c4_i64_91 = arith.constant 4 : i64
    %203 = arith.addi %202, %c4_i64_91 : i64
    %c0_i32_92 = arith.constant 0 : i32
    %204 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_92) : (!llvm.ptr, i32) -> i32
    %205 = arith.extui %204 : i32 to i64
    %c65536_i64_93 = arith.constant 65536 : i64
    %206 = arith.muli %205, %c65536_i64_93 : i64
    %207 = arith.cmpi ult, %203, %206 : i64
    cf.cond_br %207, ^bb42, ^bb43
  ^bb40:  // pred: ^bb37
    %c1_i32_94 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_94) : (i32) -> ()
    cf.br ^bb39
  ^bb41:  // 2 preds: ^bb42, ^bb44
    %208 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_95 = arith.constant 4 : i64
    %209 = arith.extui %208 : i32 to i64
    %210 = arith.addi %209, %c4_i64_95 : i64
    %c4_i64_96 = arith.constant 4 : i64
    %211 = arith.addi %210, %c4_i64_96 : i64
    %c0_i32_97 = arith.constant 0 : i32
    %212 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_97) : (!llvm.ptr, i32) -> i32
    %213 = arith.extui %212 : i32 to i64
    %c65536_i64_98 = arith.constant 65536 : i64
    %214 = arith.muli %213, %c65536_i64_98 : i64
    %215 = arith.cmpi ult, %211, %214 : i64
    cf.cond_br %215, ^bb45, ^bb46
  ^bb42:  // 2 preds: ^bb39, ^bb43
    %216 = llvm.getelementptr %6[%202] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %217 = llvm.load volatile %216 {alignment = 1 : i64} : !llvm.ptr -> i32
    %218 = arith.cmpi eq, %199, %217 : i32
    %219 = arith.extui %218 : i1 to i32
    %c0_i32_99 = arith.constant 0 : i32
    %220 = arith.cmpi eq, %219, %c0_i32_99 : i32
    %221 = arith.extui %220 : i1 to i32
    %c0_i32_100 = arith.constant 0 : i32
    %222 = arith.cmpi ne, %221, %c0_i32_100 : i32
    cf.cond_br %222, ^bb41, ^bb44
  ^bb43:  // pred: ^bb39
    %c1_i32_101 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_101) : (i32) -> ()
    cf.br ^bb42
  ^bb44:  // pred: ^bb42
    %223 = llvm.load %1 : !llvm.ptr -> i32
    call @f88(%arg0, %223) : (!llvm.ptr, i32) -> ()
    cf.br ^bb41
  ^bb45:  // 2 preds: ^bb41, ^bb46
    %224 = llvm.getelementptr %6[%210] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %225 = llvm.load volatile %224 {alignment = 1 : i64} : !llvm.ptr -> i32
    %226 = llvm.load %3 : !llvm.ptr -> i32
    %c5_i32_102 = arith.constant 5 : i32
    %c31_i32_103 = arith.constant 31 : i32
    %227 = arith.cmpi ule, %c5_i32_102, %c31_i32_103 : i32
    %228 = scf.if %227 -> (i32) {
      %346 = arith.shli %226, %c5_i32_102 : i32
      scf.yield %346 : i32
    } else {
      %c0_i32_165 = arith.constant 0 : i32
      scf.yield %c0_i32_165 : i32
    }
    %229 = arith.addi %225, %228 : i32
    llvm.store %229, %3 : i32, !llvm.ptr
    %230 = llvm.load %0 : !llvm.ptr -> i32
    %c32_i64 = arith.constant 32 : i64
    %231 = arith.extui %230 : i32 to i64
    %232 = arith.addi %231, %c32_i64 : i64
    %c8_i64_104 = arith.constant 8 : i64
    %233 = arith.addi %232, %c8_i64_104 : i64
    %c0_i32_105 = arith.constant 0 : i32
    %234 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_105) : (!llvm.ptr, i32) -> i32
    %235 = arith.extui %234 : i32 to i64
    %c65536_i64_106 = arith.constant 65536 : i64
    %236 = arith.muli %235, %c65536_i64_106 : i64
    %237 = arith.cmpi ult, %233, %236 : i64
    cf.cond_br %237, ^bb47, ^bb48
  ^bb46:  // pred: ^bb41
    %c1_i32_107 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_107) : (i32) -> ()
    cf.br ^bb45
  ^bb47:  // 2 preds: ^bb45, ^bb48
    %238 = llvm.getelementptr %6[%232] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %239 = llvm.load volatile %238 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_108 = arith.constant 0 : i64
    %240 = arith.extui %229 : i32 to i64
    %241 = arith.addi %240, %c0_i64_108 : i64
    %c8_i64_109 = arith.constant 8 : i64
    %242 = arith.addi %241, %c8_i64_109 : i64
    %c0_i32_110 = arith.constant 0 : i32
    %243 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_110) : (!llvm.ptr, i32) -> i32
    %244 = arith.extui %243 : i32 to i64
    %c65536_i64_111 = arith.constant 65536 : i64
    %245 = arith.muli %244, %c65536_i64_111 : i64
    %246 = arith.cmpi ult, %242, %245 : i64
    cf.cond_br %246, ^bb49, ^bb50
  ^bb48:  // pred: ^bb45
    %c1_i32_112 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_112) : (i32) -> ()
    cf.br ^bb47
  ^bb49:  // 2 preds: ^bb47, ^bb50
    %247 = llvm.getelementptr %6[%241] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %239, %247 {alignment = 1 : i64} : i64, !llvm.ptr
    %248 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32_113 = arith.constant 24 : i32
    %249 = arith.addi %248, %c24_i32_113 : i32
    %250 = llvm.load %0 : !llvm.ptr -> i32
    %c56_i32 = arith.constant 56 : i32
    %251 = arith.addi %250, %c56_i32 : i32
    %c0_i64_114 = arith.constant 0 : i64
    %252 = arith.extui %251 : i32 to i64
    %253 = arith.addi %252, %c0_i64_114 : i64
    %c8_i64_115 = arith.constant 8 : i64
    %254 = arith.addi %253, %c8_i64_115 : i64
    %c0_i32_116 = arith.constant 0 : i32
    %255 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_116) : (!llvm.ptr, i32) -> i32
    %256 = arith.extui %255 : i32 to i64
    %c65536_i64_117 = arith.constant 65536 : i64
    %257 = arith.muli %256, %c65536_i64_117 : i64
    %258 = arith.cmpi ult, %254, %257 : i64
    cf.cond_br %258, ^bb51, ^bb52
  ^bb50:  // pred: ^bb47
    %c1_i32_118 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_118) : (i32) -> ()
    cf.br ^bb49
  ^bb51:  // 2 preds: ^bb49, ^bb52
    %259 = llvm.getelementptr %6[%253] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %260 = llvm.load volatile %259 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_119 = arith.constant 0 : i64
    %261 = arith.extui %249 : i32 to i64
    %262 = arith.addi %261, %c0_i64_119 : i64
    %c8_i64_120 = arith.constant 8 : i64
    %263 = arith.addi %262, %c8_i64_120 : i64
    %c0_i32_121 = arith.constant 0 : i32
    %264 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_121) : (!llvm.ptr, i32) -> i32
    %265 = arith.extui %264 : i32 to i64
    %c65536_i64_122 = arith.constant 65536 : i64
    %266 = arith.muli %265, %c65536_i64_122 : i64
    %267 = arith.cmpi ult, %263, %266 : i64
    cf.cond_br %267, ^bb53, ^bb54
  ^bb52:  // pred: ^bb49
    %c1_i32_123 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_123) : (i32) -> ()
    cf.br ^bb51
  ^bb53:  // 2 preds: ^bb51, ^bb54
    %268 = llvm.getelementptr %6[%262] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %260, %268 {alignment = 1 : i64} : i64, !llvm.ptr
    %269 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_124 = arith.constant 16 : i32
    %270 = arith.addi %269, %c16_i32_124 : i32
    %271 = llvm.load %0 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %272 = arith.addi %271, %c48_i32 : i32
    %c0_i64_125 = arith.constant 0 : i64
    %273 = arith.extui %272 : i32 to i64
    %274 = arith.addi %273, %c0_i64_125 : i64
    %c8_i64_126 = arith.constant 8 : i64
    %275 = arith.addi %274, %c8_i64_126 : i64
    %c0_i32_127 = arith.constant 0 : i32
    %276 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_127) : (!llvm.ptr, i32) -> i32
    %277 = arith.extui %276 : i32 to i64
    %c65536_i64_128 = arith.constant 65536 : i64
    %278 = arith.muli %277, %c65536_i64_128 : i64
    %279 = arith.cmpi ult, %275, %278 : i64
    cf.cond_br %279, ^bb55, ^bb56
  ^bb54:  // pred: ^bb51
    %c1_i32_129 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_129) : (i32) -> ()
    cf.br ^bb53
  ^bb55:  // 2 preds: ^bb53, ^bb56
    %280 = llvm.getelementptr %6[%274] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %281 = llvm.load volatile %280 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_130 = arith.constant 0 : i64
    %282 = arith.extui %270 : i32 to i64
    %283 = arith.addi %282, %c0_i64_130 : i64
    %c8_i64_131 = arith.constant 8 : i64
    %284 = arith.addi %283, %c8_i64_131 : i64
    %c0_i32_132 = arith.constant 0 : i32
    %285 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_132) : (!llvm.ptr, i32) -> i32
    %286 = arith.extui %285 : i32 to i64
    %c65536_i64_133 = arith.constant 65536 : i64
    %287 = arith.muli %286, %c65536_i64_133 : i64
    %288 = arith.cmpi ult, %284, %287 : i64
    cf.cond_br %288, ^bb57, ^bb58
  ^bb56:  // pred: ^bb53
    %c1_i32_134 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_134) : (i32) -> ()
    cf.br ^bb55
  ^bb57:  // 2 preds: ^bb55, ^bb58
    %289 = llvm.getelementptr %6[%283] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %281, %289 {alignment = 1 : i64} : i64, !llvm.ptr
    %290 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_135 = arith.constant 8 : i32
    %291 = arith.addi %290, %c8_i32_135 : i32
    %292 = llvm.load %0 : !llvm.ptr -> i32
    %c40_i32 = arith.constant 40 : i32
    %293 = arith.addi %292, %c40_i32 : i32
    %c0_i64_136 = arith.constant 0 : i64
    %294 = arith.extui %293 : i32 to i64
    %295 = arith.addi %294, %c0_i64_136 : i64
    %c8_i64_137 = arith.constant 8 : i64
    %296 = arith.addi %295, %c8_i64_137 : i64
    %c0_i32_138 = arith.constant 0 : i32
    %297 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_138) : (!llvm.ptr, i32) -> i32
    %298 = arith.extui %297 : i32 to i64
    %c65536_i64_139 = arith.constant 65536 : i64
    %299 = arith.muli %298, %c65536_i64_139 : i64
    %300 = arith.cmpi ult, %296, %299 : i64
    cf.cond_br %300, ^bb59, ^bb60
  ^bb58:  // pred: ^bb55
    %c1_i32_140 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_140) : (i32) -> ()
    cf.br ^bb57
  ^bb59:  // 2 preds: ^bb57, ^bb60
    %301 = llvm.getelementptr %6[%295] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %302 = llvm.load volatile %301 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_141 = arith.constant 0 : i64
    %303 = arith.extui %291 : i32 to i64
    %304 = arith.addi %303, %c0_i64_141 : i64
    %c8_i64_142 = arith.constant 8 : i64
    %305 = arith.addi %304, %c8_i64_142 : i64
    %c0_i32_143 = arith.constant 0 : i32
    %306 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_143) : (!llvm.ptr, i32) -> i32
    %307 = arith.extui %306 : i32 to i64
    %c65536_i64_144 = arith.constant 65536 : i64
    %308 = arith.muli %307, %c65536_i64_144 : i64
    %309 = arith.cmpi ult, %305, %308 : i64
    cf.cond_br %309, ^bb61, ^bb62
  ^bb60:  // pred: ^bb57
    %c1_i32_145 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_145) : (i32) -> ()
    cf.br ^bb59
  ^bb61:  // 2 preds: ^bb59, ^bb62
    %310 = llvm.getelementptr %6[%304] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %302, %310 {alignment = 1 : i64} : i64, !llvm.ptr
    %311 = llvm.load %1 : !llvm.ptr -> i32
    %312 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i32_146 = arith.constant 2 : i32
    %313 = arith.addi %312, %c2_i32_146 : i32
    %c8_i64_147 = arith.constant 8 : i64
    %314 = arith.extui %311 : i32 to i64
    %315 = arith.addi %314, %c8_i64_147 : i64
    %c4_i64_148 = arith.constant 4 : i64
    %316 = arith.addi %315, %c4_i64_148 : i64
    %c0_i32_149 = arith.constant 0 : i32
    %317 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_149) : (!llvm.ptr, i32) -> i32
    %318 = arith.extui %317 : i32 to i64
    %c65536_i64_150 = arith.constant 65536 : i64
    %319 = arith.muli %318, %c65536_i64_150 : i64
    %320 = arith.cmpi ult, %316, %319 : i64
    cf.cond_br %320, ^bb63, ^bb64
  ^bb62:  // pred: ^bb59
    %c1_i32_151 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_151) : (i32) -> ()
    cf.br ^bb61
  ^bb63:  // 2 preds: ^bb61, ^bb64
    %321 = llvm.getelementptr %6[%315] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %313, %321 {alignment = 1 : i64} : i32, !llvm.ptr
    %322 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64_152 = arith.constant 20 : i64
    %323 = arith.extui %322 : i32 to i64
    %324 = arith.addi %323, %c20_i64_152 : i64
    %c4_i64_153 = arith.constant 4 : i64
    %325 = arith.addi %324, %c4_i64_153 : i64
    %c0_i32_154 = arith.constant 0 : i32
    %326 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_154) : (!llvm.ptr, i32) -> i32
    %327 = arith.extui %326 : i32 to i64
    %c65536_i64_155 = arith.constant 65536 : i64
    %328 = arith.muli %327, %c65536_i64_155 : i64
    %329 = arith.cmpi ult, %325, %328 : i64
    cf.cond_br %329, ^bb66, ^bb67
  ^bb64:  // pred: ^bb61
    %c1_i32_156 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_156) : (i32) -> ()
    cf.br ^bb63
  ^bb65:  // 2 preds: ^bb66, ^bb69
    cf.br ^bb2
  ^bb66:  // 2 preds: ^bb63, ^bb67
    %330 = llvm.getelementptr %6[%324] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %331 = llvm.load volatile %330 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %331, %0 : i32, !llvm.ptr
    %c0_i32_157 = arith.constant 0 : i32
    %332 = arith.cmpi eq, %331, %c0_i32_157 : i32
    %333 = arith.extui %332 : i1 to i32
    %c0_i32_158 = arith.constant 0 : i32
    %334 = arith.cmpi ne, %333, %c0_i32_158 : i32
    cf.cond_br %334, ^bb65, ^bb68
  ^bb67:  // pred: ^bb63
    %c1_i32_159 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_159) : (i32) -> ()
    cf.br ^bb66
  ^bb68:  // pred: ^bb66
    %335 = llvm.load %1 : !llvm.ptr -> i32
    %336 = llvm.load %0 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %337 = arith.addi %336, %c-1_i32 : i32
    %c20_i64_160 = arith.constant 20 : i64
    %338 = arith.extui %335 : i32 to i64
    %339 = arith.addi %338, %c20_i64_160 : i64
    %c4_i64_161 = arith.constant 4 : i64
    %340 = arith.addi %339, %c4_i64_161 : i64
    %c0_i32_162 = arith.constant 0 : i32
    %341 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_162) : (!llvm.ptr, i32) -> i32
    %342 = arith.extui %341 : i32 to i64
    %c65536_i64_163 = arith.constant 65536 : i64
    %343 = arith.muli %342, %c65536_i64_163 : i64
    %344 = arith.cmpi ult, %340, %343 : i64
    cf.cond_br %344, ^bb69, ^bb70
  ^bb69:  // 2 preds: ^bb68, ^bb70
    %345 = llvm.getelementptr %6[%339] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %337, %345 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb65
  ^bb70:  // pred: ^bb68
    %c1_i32_164 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_164) : (i32) -> ()
    cf.br ^bb69
  }
  func.func @f40(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %8 : i64, !llvm.ptr
    %9 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %14 = llvm.load %10 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %15 = arith.subi %14, %c64_i32 : i32
    llvm.store %15, %2 : i32, !llvm.ptr
    llvm.store %15, %10 : i32, !llvm.ptr
    %16 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %17 = arith.addi %16, %c24_i32 : i32
    %c3_i32 = arith.constant 3 : i32
    %c0_i32_8 = arith.constant 0 : i32
    %c1_i32_9 = arith.constant 1 : i32
    %c32_i32 = arith.constant 32 : i32
    call @f111(%arg0, %17, %c3_i32, %c0_i32_8, %c1_i32_9, %c32_i32) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %18 = llvm.load %2 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %19 = arith.extui %18 : i32 to i64
    %20 = arith.addi %19, %c28_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %21 = arith.addi %20, %c4_i64 : i64
    %c0_i32_10 = arith.constant 0 : i32
    %22 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_10) : (!llvm.ptr, i32) -> i32
    %23 = arith.extui %22 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %24 = arith.muli %23, %c65536_i64 : i64
    %25 = arith.cmpi ult, %21, %24 : i64
    cf.cond_br %25, ^bb3, ^bb4
  ^bb2:  // pred: ^bb47
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %26 = llvm.getelementptr %13[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %27 = llvm.load volatile %26 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %27, %3 : i32, !llvm.ptr
    %28 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %29 = arith.extui %28 : i32 to i64
    %30 = arith.addi %29, %c24_i64 : i64
    %c4_i64_11 = arith.constant 4 : i64
    %31 = arith.addi %30, %c4_i64_11 : i64
    %c0_i32_12 = arith.constant 0 : i32
    %32 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_12) : (!llvm.ptr, i32) -> i32
    %33 = arith.extui %32 : i32 to i64
    %c65536_i64_13 = arith.constant 65536 : i64
    %34 = arith.muli %33, %c65536_i64_13 : i64
    %35 = arith.cmpi ult, %31, %34 : i64
    cf.cond_br %35, ^bb7, ^bb8
  ^bb4:  // pred: ^bb1
    %c1_i32_14 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_14) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // pred: ^bb14
    %36 = llvm.load %5 : !llvm.ptr -> i32
    %37 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i64 = arith.constant 32 : i64
    %38 = arith.extui %37 : i32 to i64
    %39 = arith.addi %38, %c32_i64 : i64
    %c4_i64_15 = arith.constant 4 : i64
    %40 = arith.addi %39, %c4_i64_15 : i64
    %c0_i32_16 = arith.constant 0 : i32
    %41 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_16) : (!llvm.ptr, i32) -> i32
    %42 = arith.extui %41 : i32 to i64
    %c65536_i64_17 = arith.constant 65536 : i64
    %43 = arith.muli %42, %c65536_i64_17 : i64
    %44 = arith.cmpi ult, %40, %43 : i64
    cf.cond_br %44, ^bb51, ^bb52
  ^bb6:  // pred: ^bb7
    %45 = llvm.load %3 : !llvm.ptr -> i32
    %46 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i64_18 = arith.constant 32 : i64
    %47 = arith.extui %46 : i32 to i64
    %48 = arith.addi %47, %c32_i64_18 : i64
    %c4_i64_19 = arith.constant 4 : i64
    %49 = arith.addi %48, %c4_i64_19 : i64
    %c0_i32_20 = arith.constant 0 : i32
    %50 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_20) : (!llvm.ptr, i32) -> i32
    %51 = arith.extui %50 : i32 to i64
    %c65536_i64_21 = arith.constant 65536 : i64
    %52 = arith.muli %51, %c65536_i64_21 : i64
    %53 = arith.cmpi ult, %49, %52 : i64
    cf.cond_br %53, ^bb49, ^bb50
  ^bb7:  // 2 preds: ^bb3, ^bb8
    %54 = llvm.getelementptr %13[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %55 = llvm.load volatile %54 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_22 = arith.constant 1 : i32
    %56 = arith.cmpi eq, %55, %c1_i32_22 : i32
    %57 = arith.extui %56 : i1 to i32
    %c0_i32_23 = arith.constant 0 : i32
    %58 = arith.cmpi ne, %57, %c0_i32_23 : i32
    cf.cond_br %58, ^bb6, ^bb9
  ^bb8:  // pred: ^bb3
    %c1_i32_24 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_24) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // pred: ^bb7
    %59 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i64_25 = arith.constant 32 : i64
    %60 = arith.extui %59 : i32 to i64
    %61 = arith.addi %60, %c32_i64_25 : i64
    %c4_i64_26 = arith.constant 4 : i64
    %62 = arith.addi %61, %c4_i64_26 : i64
    %c0_i32_27 = arith.constant 0 : i32
    %63 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_27) : (!llvm.ptr, i32) -> i32
    %64 = arith.extui %63 : i32 to i64
    %c65536_i64_28 = arith.constant 65536 : i64
    %65 = arith.muli %64, %c65536_i64_28 : i64
    %66 = arith.cmpi ult, %62, %65 : i64
    cf.cond_br %66, ^bb10, ^bb11
  ^bb10:  // 2 preds: ^bb9, ^bb11
    %67 = llvm.getelementptr %13[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %68 = llvm.load volatile %67 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %68, %4 : i32, !llvm.ptr
    %69 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_29 = arith.constant 24 : i32
    %70 = arith.addi %69, %c24_i32_29 : i32
    %c4_i32 = arith.constant 4 : i32
    %c0_i32_30 = arith.constant 0 : i32
    %c4_i32_31 = arith.constant 4 : i32
    %c4_i32_32 = arith.constant 4 : i32
    call @f111(%arg0, %70, %c4_i32, %c0_i32_30, %c4_i32_31, %c4_i32_32) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %71 = llvm.load %2 : !llvm.ptr -> i32
    %c28_i64_33 = arith.constant 28 : i64
    %72 = arith.extui %71 : i32 to i64
    %73 = arith.addi %72, %c28_i64_33 : i64
    %c4_i64_34 = arith.constant 4 : i64
    %74 = arith.addi %73, %c4_i64_34 : i64
    %c0_i32_35 = arith.constant 0 : i32
    %75 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_35) : (!llvm.ptr, i32) -> i32
    %76 = arith.extui %75 : i32 to i64
    %c65536_i64_36 = arith.constant 65536 : i64
    %77 = arith.muli %76, %c65536_i64_36 : i64
    %78 = arith.cmpi ult, %74, %77 : i64
    cf.cond_br %78, ^bb12, ^bb13
  ^bb11:  // pred: ^bb9
    %c1_i32_37 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_37) : (i32) -> ()
    cf.br ^bb10
  ^bb12:  // 2 preds: ^bb10, ^bb13
    %79 = llvm.getelementptr %13[%73] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %80 = llvm.load volatile %79 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %80, %5 : i32, !llvm.ptr
    %81 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i64_38 = arith.constant 24 : i64
    %82 = arith.extui %81 : i32 to i64
    %83 = arith.addi %82, %c24_i64_38 : i64
    %c4_i64_39 = arith.constant 4 : i64
    %84 = arith.addi %83, %c4_i64_39 : i64
    %c0_i32_40 = arith.constant 0 : i32
    %85 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_40) : (!llvm.ptr, i32) -> i32
    %86 = arith.extui %85 : i32 to i64
    %c65536_i64_41 = arith.constant 65536 : i64
    %87 = arith.muli %86, %c65536_i64_41 : i64
    %88 = arith.cmpi ult, %84, %87 : i64
    cf.cond_br %88, ^bb14, ^bb15
  ^bb13:  // pred: ^bb10
    %c1_i32_42 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_42) : (i32) -> ()
    cf.br ^bb12
  ^bb14:  // 2 preds: ^bb12, ^bb15
    %89 = llvm.getelementptr %13[%83] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %90 = llvm.load volatile %89 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_43 = arith.constant 1 : i32
    %91 = arith.cmpi eq, %90, %c1_i32_43 : i32
    %92 = arith.extui %91 : i1 to i32
    %c0_i32_44 = arith.constant 0 : i32
    %93 = arith.cmpi ne, %92, %c0_i32_44 : i32
    cf.cond_br %93, ^bb5, ^bb16
  ^bb15:  // pred: ^bb12
    %c1_i32_45 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_45) : (i32) -> ()
    cf.br ^bb14
  ^bb16:  // pred: ^bb14
    %94 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %95 = arith.addi %94, %c16_i32 : i32
    llvm.store %95, %6 : i32, !llvm.ptr
    %96 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i64_46 = arith.constant 32 : i64
    %97 = arith.extui %96 : i32 to i64
    %98 = arith.addi %97, %c32_i64_46 : i64
    %c4_i64_47 = arith.constant 4 : i64
    %99 = arith.addi %98, %c4_i64_47 : i64
    %c0_i32_48 = arith.constant 0 : i32
    %100 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_48) : (!llvm.ptr, i32) -> i32
    %101 = arith.extui %100 : i32 to i64
    %c65536_i64_49 = arith.constant 65536 : i64
    %102 = arith.muli %101, %c65536_i64_49 : i64
    %103 = arith.cmpi ult, %99, %102 : i64
    cf.cond_br %103, ^bb17, ^bb18
  ^bb17:  // 2 preds: ^bb16, ^bb18
    %104 = llvm.getelementptr %13[%98] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %105 = llvm.load volatile %104 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_50 = arith.constant 0 : i64
    %106 = arith.extui %95 : i32 to i64
    %107 = arith.addi %106, %c0_i64_50 : i64
    %c4_i64_51 = arith.constant 4 : i64
    %108 = arith.addi %107, %c4_i64_51 : i64
    %c0_i32_52 = arith.constant 0 : i32
    %109 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_52) : (!llvm.ptr, i32) -> i32
    %110 = arith.extui %109 : i32 to i64
    %c65536_i64_53 = arith.constant 65536 : i64
    %111 = arith.muli %110, %c65536_i64_53 : i64
    %112 = arith.cmpi ult, %108, %111 : i64
    cf.cond_br %112, ^bb19, ^bb20
  ^bb18:  // pred: ^bb16
    %c1_i32_54 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_54) : (i32) -> ()
    cf.br ^bb17
  ^bb19:  // 2 preds: ^bb17, ^bb20
    %113 = llvm.getelementptr %13[%107] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %105, %113 {alignment = 1 : i64} : i32, !llvm.ptr
    %114 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %115 = arith.addi %114, %c8_i32 : i32
    llvm.store %115, %7 : i32, !llvm.ptr
    %c0_i32_55 = arith.constant 0 : i32
    %c0_i64_56 = arith.constant 0 : i64
    %116 = arith.extui %115 : i32 to i64
    %117 = arith.addi %116, %c0_i64_56 : i64
    %c4_i64_57 = arith.constant 4 : i64
    %118 = arith.addi %117, %c4_i64_57 : i64
    %c0_i32_58 = arith.constant 0 : i32
    %119 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_58) : (!llvm.ptr, i32) -> i32
    %120 = arith.extui %119 : i32 to i64
    %c65536_i64_59 = arith.constant 65536 : i64
    %121 = arith.muli %120, %c65536_i64_59 : i64
    %122 = arith.cmpi ult, %118, %121 : i64
    cf.cond_br %122, ^bb21, ^bb22
  ^bb20:  // pred: ^bb17
    %c1_i32_60 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_60) : (i32) -> ()
    cf.br ^bb19
  ^bb21:  // 2 preds: ^bb19, ^bb22
    %123 = llvm.getelementptr %13[%117] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_55, %123 {alignment = 1 : i64} : i32, !llvm.ptr
    %124 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_61 = arith.constant 0 : i32
    %c20_i64 = arith.constant 20 : i64
    %125 = arith.extui %124 : i32 to i64
    %126 = arith.addi %125, %c20_i64 : i64
    %c4_i64_62 = arith.constant 4 : i64
    %127 = arith.addi %126, %c4_i64_62 : i64
    %c0_i32_63 = arith.constant 0 : i32
    %128 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_63) : (!llvm.ptr, i32) -> i32
    %129 = arith.extui %128 : i32 to i64
    %c65536_i64_64 = arith.constant 65536 : i64
    %130 = arith.muli %129, %c65536_i64_64 : i64
    %131 = arith.cmpi ult, %127, %130 : i64
    cf.cond_br %131, ^bb23, ^bb24
  ^bb22:  // pred: ^bb19
    %c1_i32_65 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_65) : (i32) -> ()
    cf.br ^bb21
  ^bb23:  // 2 preds: ^bb21, ^bb24
    %132 = llvm.getelementptr %13[%126] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_61, %132 {alignment = 1 : i64} : i32, !llvm.ptr
    %133 = llvm.load %2 : !llvm.ptr -> i32
    %134 = llvm.load %5 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %135 = arith.extui %133 : i32 to i64
    %136 = arith.addi %135, %c12_i64 : i64
    %c4_i64_66 = arith.constant 4 : i64
    %137 = arith.addi %136, %c4_i64_66 : i64
    %c0_i32_67 = arith.constant 0 : i32
    %138 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_67) : (!llvm.ptr, i32) -> i32
    %139 = arith.extui %138 : i32 to i64
    %c65536_i64_68 = arith.constant 65536 : i64
    %140 = arith.muli %139, %c65536_i64_68 : i64
    %141 = arith.cmpi ult, %137, %140 : i64
    cf.cond_br %141, ^bb25, ^bb26
  ^bb24:  // pred: ^bb21
    %c1_i32_69 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_69) : (i32) -> ()
    cf.br ^bb23
  ^bb25:  // 2 preds: ^bb23, ^bb26
    %142 = llvm.getelementptr %13[%136] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %134, %142 {alignment = 1 : i64} : i32, !llvm.ptr
    %143 = llvm.load %2 : !llvm.ptr -> i32
    %144 = llvm.load %4 : !llvm.ptr -> i32
    %c4_i64_70 = arith.constant 4 : i64
    %145 = arith.extui %143 : i32 to i64
    %146 = arith.addi %145, %c4_i64_70 : i64
    %c4_i64_71 = arith.constant 4 : i64
    %147 = arith.addi %146, %c4_i64_71 : i64
    %c0_i32_72 = arith.constant 0 : i32
    %148 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_72) : (!llvm.ptr, i32) -> i32
    %149 = arith.extui %148 : i32 to i64
    %c65536_i64_73 = arith.constant 65536 : i64
    %150 = arith.muli %149, %c65536_i64_73 : i64
    %151 = arith.cmpi ult, %147, %150 : i64
    cf.cond_br %151, ^bb27, ^bb28
  ^bb26:  // pred: ^bb23
    %c1_i32_74 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_74) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // 2 preds: ^bb25, ^bb28
    %152 = llvm.getelementptr %13[%146] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %144, %152 {alignment = 1 : i64} : i32, !llvm.ptr
    %153 = llvm.load %2 : !llvm.ptr -> i32
    %154 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_75 = arith.constant 0 : i64
    %155 = arith.extui %153 : i32 to i64
    %156 = arith.addi %155, %c0_i64_75 : i64
    %c4_i64_76 = arith.constant 4 : i64
    %157 = arith.addi %156, %c4_i64_76 : i64
    %c0_i32_77 = arith.constant 0 : i32
    %158 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_77) : (!llvm.ptr, i32) -> i32
    %159 = arith.extui %158 : i32 to i64
    %c65536_i64_78 = arith.constant 65536 : i64
    %160 = arith.muli %159, %c65536_i64_78 : i64
    %161 = arith.cmpi ult, %157, %160 : i64
    cf.cond_br %161, ^bb29, ^bb30
  ^bb28:  // pred: ^bb25
    %c1_i32_79 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_79) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // 2 preds: ^bb27, ^bb30
    %162 = llvm.getelementptr %13[%156] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %154, %162 {alignment = 1 : i64} : i32, !llvm.ptr
    %163 = llvm.load %1 : !llvm.ptr -> i32
    %164 = llvm.load %2 : !llvm.ptr -> i32
    call @f41(%arg0, %163, %164) : (!llvm.ptr, i32, i32) -> ()
    %165 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_80 = arith.constant 24 : i32
    %166 = arith.addi %165, %c24_i32_80 : i32
    %c16_i32_81 = arith.constant 16 : i32
    %167 = arith.addi %166, %c16_i32_81 : i32
    %168 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_82 = arith.constant 0 : i64
    %169 = arith.extui %168 : i32 to i64
    %170 = arith.addi %169, %c0_i64_82 : i64
    %c8_i64 = arith.constant 8 : i64
    %171 = arith.addi %170, %c8_i64 : i64
    %c0_i32_83 = arith.constant 0 : i32
    %172 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_83) : (!llvm.ptr, i32) -> i32
    %173 = arith.extui %172 : i32 to i64
    %c65536_i64_84 = arith.constant 65536 : i64
    %174 = arith.muli %173, %c65536_i64_84 : i64
    %175 = arith.cmpi ult, %171, %174 : i64
    cf.cond_br %175, ^bb31, ^bb32
  ^bb30:  // pred: ^bb27
    %c1_i32_85 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_85) : (i32) -> ()
    cf.br ^bb29
  ^bb31:  // 2 preds: ^bb29, ^bb32
    %176 = llvm.getelementptr %13[%170] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %177 = llvm.load volatile %176 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_86 = arith.constant 0 : i64
    %178 = arith.extui %167 : i32 to i64
    %179 = arith.addi %178, %c0_i64_86 : i64
    %c8_i64_87 = arith.constant 8 : i64
    %180 = arith.addi %179, %c8_i64_87 : i64
    %c0_i32_88 = arith.constant 0 : i32
    %181 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_88) : (!llvm.ptr, i32) -> i32
    %182 = arith.extui %181 : i32 to i64
    %c65536_i64_89 = arith.constant 65536 : i64
    %183 = arith.muli %182, %c65536_i64_89 : i64
    %184 = arith.cmpi ult, %180, %183 : i64
    cf.cond_br %184, ^bb33, ^bb34
  ^bb32:  // pred: ^bb29
    %c1_i32_90 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_90) : (i32) -> ()
    cf.br ^bb31
  ^bb33:  // 2 preds: ^bb31, ^bb34
    %185 = llvm.getelementptr %13[%179] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %177, %185 {alignment = 1 : i64} : i64, !llvm.ptr
    %186 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_91 = arith.constant 24 : i32
    %187 = arith.addi %186, %c24_i32_91 : i32
    %c8_i32_92 = arith.constant 8 : i32
    %188 = arith.addi %187, %c8_i32_92 : i32
    %189 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_93 = arith.constant 0 : i64
    %190 = arith.extui %189 : i32 to i64
    %191 = arith.addi %190, %c0_i64_93 : i64
    %c8_i64_94 = arith.constant 8 : i64
    %192 = arith.addi %191, %c8_i64_94 : i64
    %c0_i32_95 = arith.constant 0 : i32
    %193 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_95) : (!llvm.ptr, i32) -> i32
    %194 = arith.extui %193 : i32 to i64
    %c65536_i64_96 = arith.constant 65536 : i64
    %195 = arith.muli %194, %c65536_i64_96 : i64
    %196 = arith.cmpi ult, %192, %195 : i64
    cf.cond_br %196, ^bb35, ^bb36
  ^bb34:  // pred: ^bb31
    %c1_i32_97 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_97) : (i32) -> ()
    cf.br ^bb33
  ^bb35:  // 2 preds: ^bb33, ^bb36
    %197 = llvm.getelementptr %13[%191] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %198 = llvm.load volatile %197 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_98 = arith.constant 0 : i64
    %199 = arith.extui %188 : i32 to i64
    %200 = arith.addi %199, %c0_i64_98 : i64
    %c8_i64_99 = arith.constant 8 : i64
    %201 = arith.addi %200, %c8_i64_99 : i64
    %c0_i32_100 = arith.constant 0 : i32
    %202 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_100) : (!llvm.ptr, i32) -> i32
    %203 = arith.extui %202 : i32 to i64
    %c65536_i64_101 = arith.constant 65536 : i64
    %204 = arith.muli %203, %c65536_i64_101 : i64
    %205 = arith.cmpi ult, %201, %204 : i64
    cf.cond_br %205, ^bb37, ^bb38
  ^bb36:  // pred: ^bb33
    %c1_i32_102 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_102) : (i32) -> ()
    cf.br ^bb35
  ^bb37:  // 2 preds: ^bb35, ^bb38
    %206 = llvm.getelementptr %13[%200] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %198, %206 {alignment = 1 : i64} : i64, !llvm.ptr
    %207 = llvm.load %2 : !llvm.ptr -> i32
    %208 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_103 = arith.constant 0 : i64
    %209 = arith.extui %208 : i32 to i64
    %210 = arith.addi %209, %c0_i64_103 : i64
    %c8_i64_104 = arith.constant 8 : i64
    %211 = arith.addi %210, %c8_i64_104 : i64
    %c0_i32_105 = arith.constant 0 : i32
    %212 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_105) : (!llvm.ptr, i32) -> i32
    %213 = arith.extui %212 : i32 to i64
    %c65536_i64_106 = arith.constant 65536 : i64
    %214 = arith.muli %213, %c65536_i64_106 : i64
    %215 = arith.cmpi ult, %211, %214 : i64
    cf.cond_br %215, ^bb39, ^bb40
  ^bb38:  // pred: ^bb35
    %c1_i32_107 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_107) : (i32) -> ()
    cf.br ^bb37
  ^bb39:  // 2 preds: ^bb37, ^bb40
    %216 = llvm.getelementptr %13[%210] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %217 = llvm.load volatile %216 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %217, %8 : i64, !llvm.ptr
    %c24_i64_108 = arith.constant 24 : i64
    %218 = arith.extui %207 : i32 to i64
    %219 = arith.addi %218, %c24_i64_108 : i64
    %c8_i64_109 = arith.constant 8 : i64
    %220 = arith.addi %219, %c8_i64_109 : i64
    %c0_i32_110 = arith.constant 0 : i32
    %221 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_110) : (!llvm.ptr, i32) -> i32
    %222 = arith.extui %221 : i32 to i64
    %c65536_i64_111 = arith.constant 65536 : i64
    %223 = arith.muli %222, %c65536_i64_111 : i64
    %224 = arith.cmpi ult, %220, %223 : i64
    cf.cond_br %224, ^bb41, ^bb42
  ^bb40:  // pred: ^bb37
    %c1_i32_112 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_112) : (i32) -> ()
    cf.br ^bb39
  ^bb41:  // 2 preds: ^bb39, ^bb42
    %225 = llvm.getelementptr %13[%219] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %217, %225 {alignment = 1 : i64} : i64, !llvm.ptr
    %226 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %227 = arith.addi %226, %c48_i32 : i32
    %c8_i32_113 = arith.constant 8 : i32
    %228 = arith.addi %227, %c8_i32_113 : i32
    %229 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_114 = arith.constant 0 : i64
    %230 = arith.extui %229 : i32 to i64
    %231 = arith.addi %230, %c0_i64_114 : i64
    %c4_i64_115 = arith.constant 4 : i64
    %232 = arith.addi %231, %c4_i64_115 : i64
    %c0_i32_116 = arith.constant 0 : i32
    %233 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_116) : (!llvm.ptr, i32) -> i32
    %234 = arith.extui %233 : i32 to i64
    %c65536_i64_117 = arith.constant 65536 : i64
    %235 = arith.muli %234, %c65536_i64_117 : i64
    %236 = arith.cmpi ult, %232, %235 : i64
    cf.cond_br %236, ^bb43, ^bb44
  ^bb42:  // pred: ^bb39
    %c1_i32_118 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_118) : (i32) -> ()
    cf.br ^bb41
  ^bb43:  // 2 preds: ^bb41, ^bb44
    %237 = llvm.getelementptr %13[%231] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %238 = llvm.load volatile %237 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_119 = arith.constant 0 : i64
    %239 = arith.extui %228 : i32 to i64
    %240 = arith.addi %239, %c0_i64_119 : i64
    %c4_i64_120 = arith.constant 4 : i64
    %241 = arith.addi %240, %c4_i64_120 : i64
    %c0_i32_121 = arith.constant 0 : i32
    %242 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_121) : (!llvm.ptr, i32) -> i32
    %243 = arith.extui %242 : i32 to i64
    %c65536_i64_122 = arith.constant 65536 : i64
    %244 = arith.muli %243, %c65536_i64_122 : i64
    %245 = arith.cmpi ult, %241, %244 : i64
    cf.cond_br %245, ^bb45, ^bb46
  ^bb44:  // pred: ^bb41
    %c1_i32_123 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_123) : (i32) -> ()
    cf.br ^bb43
  ^bb45:  // 2 preds: ^bb43, ^bb46
    %246 = llvm.getelementptr %13[%240] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %238, %246 {alignment = 1 : i64} : i32, !llvm.ptr
    %247 = llvm.load %2 : !llvm.ptr -> i32
    %248 = llvm.load %8 : !llvm.ptr -> i64
    %c48_i64 = arith.constant 48 : i64
    %249 = arith.extui %247 : i32 to i64
    %250 = arith.addi %249, %c48_i64 : i64
    %c8_i64_124 = arith.constant 8 : i64
    %251 = arith.addi %250, %c8_i64_124 : i64
    %c0_i32_125 = arith.constant 0 : i32
    %252 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_125) : (!llvm.ptr, i32) -> i32
    %253 = arith.extui %252 : i32 to i64
    %c65536_i64_126 = arith.constant 65536 : i64
    %254 = arith.muli %253, %c65536_i64_126 : i64
    %255 = arith.cmpi ult, %251, %254 : i64
    cf.cond_br %255, ^bb47, ^bb48
  ^bb46:  // pred: ^bb43
    %c1_i32_127 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_127) : (i32) -> ()
    cf.br ^bb45
  ^bb47:  // 2 preds: ^bb45, ^bb48
    %256 = llvm.getelementptr %13[%250] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %248, %256 {alignment = 1 : i64} : i64, !llvm.ptr
    %257 = llvm.load %2 : !llvm.ptr -> i32
    %c36_i32 = arith.constant 36 : i32
    %258 = arith.addi %257, %c36_i32 : i32
    llvm.store %258, %7 : i32, !llvm.ptr
    call @f89(%arg0, %258) : (!llvm.ptr, i32) -> ()
    %259 = llvm.load %7 : !llvm.ptr -> i32
    call @f90(%arg0, %259) : (!llvm.ptr, i32) -> ()
    %260 = llvm.load %0 : !llvm.ptr -> i32
    %261 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i32_128 = arith.constant 48 : i32
    %262 = arith.addi %261, %c48_i32_128 : i32
    call @f86(%arg0, %260, %262) : (!llvm.ptr, i32, i32) -> ()
    %263 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_129 = arith.constant 64 : i32
    %264 = arith.addi %263, %c64_i32_129 : i32
    llvm.store %264, %10 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb48:  // pred: ^bb45
    %c1_i32_130 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_130) : (i32) -> ()
    cf.br ^bb47
  ^bb49:  // 2 preds: ^bb6, ^bb50
    %265 = llvm.getelementptr %13[%48] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %266 = llvm.load volatile %265 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f143(%arg0, %45, %266) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb50:  // pred: ^bb6
    %c1_i32_131 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_131) : (i32) -> ()
    cf.br ^bb49
  ^bb51:  // 2 preds: ^bb5, ^bb52
    %267 = llvm.getelementptr %13[%39] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %268 = llvm.load volatile %267 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f143(%arg0, %36, %268) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb52:  // pred: ^bb5
    %c1_i32_132 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_132) : (i32) -> ()
    cf.br ^bb51
  }
  func.func @f41(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %5 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %9 = arith.extui %8 : i32 to i64
    %10 = arith.addi %9, %c20_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %11 = arith.addi %10, %c4_i64 : i64
    %c0_i32_4 = arith.constant 0 : i32
    %12 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_4) : (!llvm.ptr, i32) -> i32
    %13 = arith.extui %12 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %14 = arith.muli %13, %c65536_i64 : i64
    %15 = arith.cmpi ult, %11, %14 : i64
    cf.cond_br %15, ^bb4, ^bb5
  ^bb2:  // pred: ^bb89
    return
  ^bb3:  // 2 preds: ^bb6, ^bb8
    %16 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %17 = arith.extui %16 : i32 to i64
    %18 = arith.addi %17, %c16_i64 : i64
    %c4_i64_5 = arith.constant 4 : i64
    %19 = arith.addi %18, %c4_i64_5 : i64
    %c0_i32_6 = arith.constant 0 : i32
    %20 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_6) : (!llvm.ptr, i32) -> i32
    %21 = arith.extui %20 : i32 to i64
    %c65536_i64_7 = arith.constant 65536 : i64
    %22 = arith.muli %21, %c65536_i64_7 : i64
    %23 = arith.cmpi ult, %19, %22 : i64
    cf.cond_br %23, ^bb9, ^bb10
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %24 = llvm.getelementptr %7[%10] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %25 = llvm.load volatile %24 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %25, %2 : i32, !llvm.ptr
    %26 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %27 = arith.extui %26 : i32 to i64
    %28 = arith.addi %27, %c12_i64 : i64
    %c4_i64_8 = arith.constant 4 : i64
    %29 = arith.addi %28, %c4_i64_8 : i64
    %c0_i32_9 = arith.constant 0 : i32
    %30 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_9) : (!llvm.ptr, i32) -> i32
    %31 = arith.extui %30 : i32 to i64
    %c65536_i64_10 = arith.constant 65536 : i64
    %32 = arith.muli %31, %c65536_i64_10 : i64
    %33 = arith.cmpi ult, %29, %32 : i64
    cf.cond_br %33, ^bb6, ^bb7
  ^bb5:  // pred: ^bb1
    %c1_i32_11 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_11) : (i32) -> ()
    cf.br ^bb4
  ^bb6:  // 2 preds: ^bb4, ^bb7
    %34 = llvm.getelementptr %7[%28] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %35 = llvm.load volatile %34 {alignment = 1 : i64} : !llvm.ptr -> i32
    %36 = arith.cmpi eq, %25, %35 : i32
    %37 = arith.extui %36 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %38 = arith.cmpi eq, %37, %c0_i32_12 : i32
    %39 = arith.extui %38 : i1 to i32
    %c0_i32_13 = arith.constant 0 : i32
    %40 = arith.cmpi ne, %39, %c0_i32_13 : i32
    cf.cond_br %40, ^bb3, ^bb8
  ^bb7:  // pred: ^bb4
    %c1_i32_14 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_14) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // pred: ^bb6
    %41 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %42 = arith.addi %41, %c12_i32 : i32
    call @f87(%arg0, %42) : (!llvm.ptr, i32) -> ()
    cf.br ^bb3
  ^bb9:  // 2 preds: ^bb3, ^bb10
    %43 = llvm.getelementptr %7[%18] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %44 = llvm.load volatile %43 {alignment = 1 : i64} : !llvm.ptr -> i32
    %45 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c31_i32 = arith.constant 31 : i32
    %46 = arith.cmpi ule, %c2_i32, %c31_i32 : i32
    %47 = scf.if %46 -> (i32) {
      %474 = arith.shli %45, %c2_i32 : i32
      scf.yield %474 : i32
    } else {
      %c0_i32_235 = arith.constant 0 : i32
      scf.yield %c0_i32_235 : i32
    }
    %48 = arith.addi %44, %47 : i32
    %c96_i32 = arith.constant 96 : i32
    %c0_i64 = arith.constant 0 : i64
    %49 = arith.extui %48 : i32 to i64
    %50 = arith.addi %49, %c0_i64 : i64
    %c4_i64_15 = arith.constant 4 : i64
    %51 = arith.addi %50, %c4_i64_15 : i64
    %c0_i32_16 = arith.constant 0 : i32
    %52 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_16) : (!llvm.ptr, i32) -> i32
    %53 = arith.extui %52 : i32 to i64
    %c65536_i64_17 = arith.constant 65536 : i64
    %54 = arith.muli %53, %c65536_i64_17 : i64
    %55 = arith.cmpi ult, %51, %54 : i64
    cf.cond_br %55, ^bb11, ^bb12
  ^bb10:  // pred: ^bb3
    %c1_i32_18 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_18) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %56 = llvm.getelementptr %7[%50] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c96_i32, %56 {alignment = 1 : i64} : i32, !llvm.ptr
    %57 = llvm.load %1 : !llvm.ptr -> i32
    %58 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_19 = arith.constant 1 : i32
    %59 = arith.addi %58, %c1_i32_19 : i32
    %c20_i64_20 = arith.constant 20 : i64
    %60 = arith.extui %57 : i32 to i64
    %61 = arith.addi %60, %c20_i64_20 : i64
    %c4_i64_21 = arith.constant 4 : i64
    %62 = arith.addi %61, %c4_i64_21 : i64
    %c0_i32_22 = arith.constant 0 : i32
    %63 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_22) : (!llvm.ptr, i32) -> i32
    %64 = arith.extui %63 : i32 to i64
    %c65536_i64_23 = arith.constant 65536 : i64
    %65 = arith.muli %64, %c65536_i64_23 : i64
    %66 = arith.cmpi ult, %62, %65 : i64
    cf.cond_br %66, ^bb13, ^bb14
  ^bb12:  // pred: ^bb9
    %c1_i32_24 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_24) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %67 = llvm.getelementptr %7[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %59, %67 {alignment = 1 : i64} : i32, !llvm.ptr
    %68 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %69 = arith.extui %68 : i32 to i64
    %70 = arith.addi %69, %c8_i64 : i64
    %c4_i64_25 = arith.constant 4 : i64
    %71 = arith.addi %70, %c4_i64_25 : i64
    %c0_i32_26 = arith.constant 0 : i32
    %72 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_26) : (!llvm.ptr, i32) -> i32
    %73 = arith.extui %72 : i32 to i64
    %c65536_i64_27 = arith.constant 65536 : i64
    %74 = arith.muli %73, %c65536_i64_27 : i64
    %75 = arith.cmpi ult, %71, %74 : i64
    cf.cond_br %75, ^bb16, ^bb17
  ^bb14:  // pred: ^bb11
    %c1_i32_28 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_28) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // 2 preds: ^bb18, ^bb20
    %76 = llvm.load %0 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %77 = arith.addi %76, %c32_i32 : i32
    llvm.store %77, %3 : i32, !llvm.ptr
    %78 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_29 = arith.constant 4 : i64
    %79 = arith.extui %78 : i32 to i64
    %80 = arith.addi %79, %c4_i64_29 : i64
    %c4_i64_30 = arith.constant 4 : i64
    %81 = arith.addi %80, %c4_i64_30 : i64
    %c0_i32_31 = arith.constant 0 : i32
    %82 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_31) : (!llvm.ptr, i32) -> i32
    %83 = arith.extui %82 : i32 to i64
    %c65536_i64_32 = arith.constant 65536 : i64
    %84 = arith.muli %83, %c65536_i64_32 : i64
    %85 = arith.cmpi ult, %81, %84 : i64
    cf.cond_br %85, ^bb21, ^bb22
  ^bb16:  // 2 preds: ^bb13, ^bb17
    %86 = llvm.getelementptr %7[%70] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %87 = llvm.load volatile %86 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %87, %2 : i32, !llvm.ptr
    %88 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_33 = arith.constant 0 : i64
    %89 = arith.extui %88 : i32 to i64
    %90 = arith.addi %89, %c0_i64_33 : i64
    %c4_i64_34 = arith.constant 4 : i64
    %91 = arith.addi %90, %c4_i64_34 : i64
    %c0_i32_35 = arith.constant 0 : i32
    %92 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_35) : (!llvm.ptr, i32) -> i32
    %93 = arith.extui %92 : i32 to i64
    %c65536_i64_36 = arith.constant 65536 : i64
    %94 = arith.muli %93, %c65536_i64_36 : i64
    %95 = arith.cmpi ult, %91, %94 : i64
    cf.cond_br %95, ^bb18, ^bb19
  ^bb17:  // pred: ^bb13
    %c1_i32_37 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_37) : (i32) -> ()
    cf.br ^bb16
  ^bb18:  // 2 preds: ^bb16, ^bb19
    %96 = llvm.getelementptr %7[%90] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %97 = llvm.load volatile %96 {alignment = 1 : i64} : !llvm.ptr -> i32
    %98 = arith.cmpi eq, %87, %97 : i32
    %99 = arith.extui %98 : i1 to i32
    %c0_i32_38 = arith.constant 0 : i32
    %100 = arith.cmpi eq, %99, %c0_i32_38 : i32
    %101 = arith.extui %100 : i1 to i32
    %c0_i32_39 = arith.constant 0 : i32
    %102 = arith.cmpi ne, %101, %c0_i32_39 : i32
    cf.cond_br %102, ^bb15, ^bb20
  ^bb19:  // pred: ^bb16
    %c1_i32_40 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_40) : (i32) -> ()
    cf.br ^bb18
  ^bb20:  // pred: ^bb18
    %103 = llvm.load %1 : !llvm.ptr -> i32
    call @f88(%arg0, %103) : (!llvm.ptr, i32) -> ()
    cf.br ^bb15
  ^bb21:  // 2 preds: ^bb15, ^bb22
    %104 = llvm.getelementptr %7[%80] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %105 = llvm.load volatile %104 {alignment = 1 : i64} : !llvm.ptr -> i32
    %106 = llvm.load %2 : !llvm.ptr -> i32
    %c5_i32 = arith.constant 5 : i32
    %c31_i32_41 = arith.constant 31 : i32
    %107 = arith.cmpi ule, %c5_i32, %c31_i32_41 : i32
    %108 = scf.if %107 -> (i32) {
      %474 = arith.shli %106, %c5_i32 : i32
      scf.yield %474 : i32
    } else {
      %c0_i32_235 = arith.constant 0 : i32
      scf.yield %c0_i32_235 : i32
    }
    %109 = arith.addi %105, %108 : i32
    llvm.store %109, %4 : i32, !llvm.ptr
    %110 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_42 = arith.constant 0 : i64
    %111 = arith.extui %110 : i32 to i64
    %112 = arith.addi %111, %c0_i64_42 : i64
    %c8_i64_43 = arith.constant 8 : i64
    %113 = arith.addi %112, %c8_i64_43 : i64
    %c0_i32_44 = arith.constant 0 : i32
    %114 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_44) : (!llvm.ptr, i32) -> i32
    %115 = arith.extui %114 : i32 to i64
    %c65536_i64_45 = arith.constant 65536 : i64
    %116 = arith.muli %115, %c65536_i64_45 : i64
    %117 = arith.cmpi ult, %113, %116 : i64
    cf.cond_br %117, ^bb23, ^bb24
  ^bb22:  // pred: ^bb15
    %c1_i32_46 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_46) : (i32) -> ()
    cf.br ^bb21
  ^bb23:  // 2 preds: ^bb21, ^bb24
    %118 = llvm.getelementptr %7[%112] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %119 = llvm.load volatile %118 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_47 = arith.constant 0 : i64
    %120 = arith.extui %109 : i32 to i64
    %121 = arith.addi %120, %c0_i64_47 : i64
    %c8_i64_48 = arith.constant 8 : i64
    %122 = arith.addi %121, %c8_i64_48 : i64
    %c0_i32_49 = arith.constant 0 : i32
    %123 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_49) : (!llvm.ptr, i32) -> i32
    %124 = arith.extui %123 : i32 to i64
    %c65536_i64_50 = arith.constant 65536 : i64
    %125 = arith.muli %124, %c65536_i64_50 : i64
    %126 = arith.cmpi ult, %122, %125 : i64
    cf.cond_br %126, ^bb25, ^bb26
  ^bb24:  // pred: ^bb21
    %c1_i32_51 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_51) : (i32) -> ()
    cf.br ^bb23
  ^bb25:  // 2 preds: ^bb23, ^bb26
    %127 = llvm.getelementptr %7[%121] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %119, %127 {alignment = 1 : i64} : i64, !llvm.ptr
    %128 = llvm.load %4 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %129 = arith.addi %128, %c24_i32 : i32
    %130 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32_52 = arith.constant 24 : i32
    %131 = arith.addi %130, %c24_i32_52 : i32
    %c0_i64_53 = arith.constant 0 : i64
    %132 = arith.extui %131 : i32 to i64
    %133 = arith.addi %132, %c0_i64_53 : i64
    %c8_i64_54 = arith.constant 8 : i64
    %134 = arith.addi %133, %c8_i64_54 : i64
    %c0_i32_55 = arith.constant 0 : i32
    %135 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_55) : (!llvm.ptr, i32) -> i32
    %136 = arith.extui %135 : i32 to i64
    %c65536_i64_56 = arith.constant 65536 : i64
    %137 = arith.muli %136, %c65536_i64_56 : i64
    %138 = arith.cmpi ult, %134, %137 : i64
    cf.cond_br %138, ^bb27, ^bb28
  ^bb26:  // pred: ^bb23
    %c1_i32_57 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_57) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // 2 preds: ^bb25, ^bb28
    %139 = llvm.getelementptr %7[%133] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %140 = llvm.load volatile %139 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_58 = arith.constant 0 : i64
    %141 = arith.extui %129 : i32 to i64
    %142 = arith.addi %141, %c0_i64_58 : i64
    %c8_i64_59 = arith.constant 8 : i64
    %143 = arith.addi %142, %c8_i64_59 : i64
    %c0_i32_60 = arith.constant 0 : i32
    %144 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_60) : (!llvm.ptr, i32) -> i32
    %145 = arith.extui %144 : i32 to i64
    %c65536_i64_61 = arith.constant 65536 : i64
    %146 = arith.muli %145, %c65536_i64_61 : i64
    %147 = arith.cmpi ult, %143, %146 : i64
    cf.cond_br %147, ^bb29, ^bb30
  ^bb28:  // pred: ^bb25
    %c1_i32_62 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_62) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // 2 preds: ^bb27, ^bb30
    %148 = llvm.getelementptr %7[%142] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %140, %148 {alignment = 1 : i64} : i64, !llvm.ptr
    %149 = llvm.load %4 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %150 = arith.addi %149, %c16_i32 : i32
    %151 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_63 = arith.constant 16 : i32
    %152 = arith.addi %151, %c16_i32_63 : i32
    %c0_i64_64 = arith.constant 0 : i64
    %153 = arith.extui %152 : i32 to i64
    %154 = arith.addi %153, %c0_i64_64 : i64
    %c8_i64_65 = arith.constant 8 : i64
    %155 = arith.addi %154, %c8_i64_65 : i64
    %c0_i32_66 = arith.constant 0 : i32
    %156 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_66) : (!llvm.ptr, i32) -> i32
    %157 = arith.extui %156 : i32 to i64
    %c65536_i64_67 = arith.constant 65536 : i64
    %158 = arith.muli %157, %c65536_i64_67 : i64
    %159 = arith.cmpi ult, %155, %158 : i64
    cf.cond_br %159, ^bb31, ^bb32
  ^bb30:  // pred: ^bb27
    %c1_i32_68 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_68) : (i32) -> ()
    cf.br ^bb29
  ^bb31:  // 2 preds: ^bb29, ^bb32
    %160 = llvm.getelementptr %7[%154] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %161 = llvm.load volatile %160 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_69 = arith.constant 0 : i64
    %162 = arith.extui %150 : i32 to i64
    %163 = arith.addi %162, %c0_i64_69 : i64
    %c8_i64_70 = arith.constant 8 : i64
    %164 = arith.addi %163, %c8_i64_70 : i64
    %c0_i32_71 = arith.constant 0 : i32
    %165 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_71) : (!llvm.ptr, i32) -> i32
    %166 = arith.extui %165 : i32 to i64
    %c65536_i64_72 = arith.constant 65536 : i64
    %167 = arith.muli %166, %c65536_i64_72 : i64
    %168 = arith.cmpi ult, %164, %167 : i64
    cf.cond_br %168, ^bb33, ^bb34
  ^bb32:  // pred: ^bb29
    %c1_i32_73 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_73) : (i32) -> ()
    cf.br ^bb31
  ^bb33:  // 2 preds: ^bb31, ^bb34
    %169 = llvm.getelementptr %7[%163] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %161, %169 {alignment = 1 : i64} : i64, !llvm.ptr
    %170 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %171 = arith.addi %170, %c8_i32 : i32
    %172 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_74 = arith.constant 8 : i32
    %173 = arith.addi %172, %c8_i32_74 : i32
    %c0_i64_75 = arith.constant 0 : i64
    %174 = arith.extui %173 : i32 to i64
    %175 = arith.addi %174, %c0_i64_75 : i64
    %c8_i64_76 = arith.constant 8 : i64
    %176 = arith.addi %175, %c8_i64_76 : i64
    %c0_i32_77 = arith.constant 0 : i32
    %177 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_77) : (!llvm.ptr, i32) -> i32
    %178 = arith.extui %177 : i32 to i64
    %c65536_i64_78 = arith.constant 65536 : i64
    %179 = arith.muli %178, %c65536_i64_78 : i64
    %180 = arith.cmpi ult, %176, %179 : i64
    cf.cond_br %180, ^bb35, ^bb36
  ^bb34:  // pred: ^bb31
    %c1_i32_79 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_79) : (i32) -> ()
    cf.br ^bb33
  ^bb35:  // 2 preds: ^bb33, ^bb36
    %181 = llvm.getelementptr %7[%175] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %182 = llvm.load volatile %181 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_80 = arith.constant 0 : i64
    %183 = arith.extui %171 : i32 to i64
    %184 = arith.addi %183, %c0_i64_80 : i64
    %c8_i64_81 = arith.constant 8 : i64
    %185 = arith.addi %184, %c8_i64_81 : i64
    %c0_i32_82 = arith.constant 0 : i32
    %186 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_82) : (!llvm.ptr, i32) -> i32
    %187 = arith.extui %186 : i32 to i64
    %c65536_i64_83 = arith.constant 65536 : i64
    %188 = arith.muli %187, %c65536_i64_83 : i64
    %189 = arith.cmpi ult, %185, %188 : i64
    cf.cond_br %189, ^bb37, ^bb38
  ^bb36:  // pred: ^bb33
    %c1_i32_84 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_84) : (i32) -> ()
    cf.br ^bb35
  ^bb37:  // 2 preds: ^bb35, ^bb38
    %190 = llvm.getelementptr %7[%184] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %182, %190 {alignment = 1 : i64} : i64, !llvm.ptr
    %191 = llvm.load %1 : !llvm.ptr -> i32
    %192 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_85 = arith.constant 1 : i32
    %193 = arith.addi %192, %c1_i32_85 : i32
    llvm.store %193, %4 : i32, !llvm.ptr
    %c8_i64_86 = arith.constant 8 : i64
    %194 = arith.extui %191 : i32 to i64
    %195 = arith.addi %194, %c8_i64_86 : i64
    %c4_i64_87 = arith.constant 4 : i64
    %196 = arith.addi %195, %c4_i64_87 : i64
    %c0_i32_88 = arith.constant 0 : i32
    %197 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_88) : (!llvm.ptr, i32) -> i32
    %198 = arith.extui %197 : i32 to i64
    %c65536_i64_89 = arith.constant 65536 : i64
    %199 = arith.muli %198, %c65536_i64_89 : i64
    %200 = arith.cmpi ult, %196, %199 : i64
    cf.cond_br %200, ^bb39, ^bb40
  ^bb38:  // pred: ^bb35
    %c1_i32_90 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_90) : (i32) -> ()
    cf.br ^bb37
  ^bb39:  // 2 preds: ^bb37, ^bb40
    %201 = llvm.getelementptr %7[%195] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %193, %201 {alignment = 1 : i64} : i32, !llvm.ptr
    %202 = llvm.load %4 : !llvm.ptr -> i32
    %203 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_91 = arith.constant 0 : i64
    %204 = arith.extui %203 : i32 to i64
    %205 = arith.addi %204, %c0_i64_91 : i64
    %c4_i64_92 = arith.constant 4 : i64
    %206 = arith.addi %205, %c4_i64_92 : i64
    %c0_i32_93 = arith.constant 0 : i32
    %207 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_93) : (!llvm.ptr, i32) -> i32
    %208 = arith.extui %207 : i32 to i64
    %c65536_i64_94 = arith.constant 65536 : i64
    %209 = arith.muli %208, %c65536_i64_94 : i64
    %210 = arith.cmpi ult, %206, %209 : i64
    cf.cond_br %210, ^bb42, ^bb43
  ^bb40:  // pred: ^bb37
    %c1_i32_95 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_95) : (i32) -> ()
    cf.br ^bb39
  ^bb41:  // 2 preds: ^bb42, ^bb44
    %211 = llvm.load %0 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %212 = arith.addi %211, %c64_i32 : i32
    llvm.store %212, %0 : i32, !llvm.ptr
    %213 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_96 = arith.constant 4 : i64
    %214 = arith.extui %213 : i32 to i64
    %215 = arith.addi %214, %c4_i64_96 : i64
    %c4_i64_97 = arith.constant 4 : i64
    %216 = arith.addi %215, %c4_i64_97 : i64
    %c0_i32_98 = arith.constant 0 : i32
    %217 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_98) : (!llvm.ptr, i32) -> i32
    %218 = arith.extui %217 : i32 to i64
    %c65536_i64_99 = arith.constant 65536 : i64
    %219 = arith.muli %218, %c65536_i64_99 : i64
    %220 = arith.cmpi ult, %216, %219 : i64
    cf.cond_br %220, ^bb45, ^bb46
  ^bb42:  // 2 preds: ^bb39, ^bb43
    %221 = llvm.getelementptr %7[%205] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %222 = llvm.load volatile %221 {alignment = 1 : i64} : !llvm.ptr -> i32
    %223 = arith.cmpi eq, %202, %222 : i32
    %224 = arith.extui %223 : i1 to i32
    %c0_i32_100 = arith.constant 0 : i32
    %225 = arith.cmpi eq, %224, %c0_i32_100 : i32
    %226 = arith.extui %225 : i1 to i32
    %c0_i32_101 = arith.constant 0 : i32
    %227 = arith.cmpi ne, %226, %c0_i32_101 : i32
    cf.cond_br %227, ^bb41, ^bb44
  ^bb43:  // pred: ^bb39
    %c1_i32_102 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_102) : (i32) -> ()
    cf.br ^bb42
  ^bb44:  // pred: ^bb42
    %228 = llvm.load %1 : !llvm.ptr -> i32
    call @f88(%arg0, %228) : (!llvm.ptr, i32) -> ()
    cf.br ^bb41
  ^bb45:  // 2 preds: ^bb41, ^bb46
    %229 = llvm.getelementptr %7[%215] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %230 = llvm.load volatile %229 {alignment = 1 : i64} : !llvm.ptr -> i32
    %231 = llvm.load %4 : !llvm.ptr -> i32
    %c5_i32_103 = arith.constant 5 : i32
    %c31_i32_104 = arith.constant 31 : i32
    %232 = arith.cmpi ule, %c5_i32_103, %c31_i32_104 : i32
    %233 = scf.if %232 -> (i32) {
      %474 = arith.shli %231, %c5_i32_103 : i32
      scf.yield %474 : i32
    } else {
      %c0_i32_235 = arith.constant 0 : i32
      scf.yield %c0_i32_235 : i32
    }
    %234 = arith.addi %230, %233 : i32
    llvm.store %234, %4 : i32, !llvm.ptr
    %235 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_105 = arith.constant 0 : i64
    %236 = arith.extui %235 : i32 to i64
    %237 = arith.addi %236, %c0_i64_105 : i64
    %c8_i64_106 = arith.constant 8 : i64
    %238 = arith.addi %237, %c8_i64_106 : i64
    %c0_i32_107 = arith.constant 0 : i32
    %239 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_107) : (!llvm.ptr, i32) -> i32
    %240 = arith.extui %239 : i32 to i64
    %c65536_i64_108 = arith.constant 65536 : i64
    %241 = arith.muli %240, %c65536_i64_108 : i64
    %242 = arith.cmpi ult, %238, %241 : i64
    cf.cond_br %242, ^bb47, ^bb48
  ^bb46:  // pred: ^bb41
    %c1_i32_109 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_109) : (i32) -> ()
    cf.br ^bb45
  ^bb47:  // 2 preds: ^bb45, ^bb48
    %243 = llvm.getelementptr %7[%237] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %244 = llvm.load volatile %243 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_110 = arith.constant 0 : i64
    %245 = arith.extui %234 : i32 to i64
    %246 = arith.addi %245, %c0_i64_110 : i64
    %c8_i64_111 = arith.constant 8 : i64
    %247 = arith.addi %246, %c8_i64_111 : i64
    %c0_i32_112 = arith.constant 0 : i32
    %248 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_112) : (!llvm.ptr, i32) -> i32
    %249 = arith.extui %248 : i32 to i64
    %c65536_i64_113 = arith.constant 65536 : i64
    %250 = arith.muli %249, %c65536_i64_113 : i64
    %251 = arith.cmpi ult, %247, %250 : i64
    cf.cond_br %251, ^bb49, ^bb50
  ^bb48:  // pred: ^bb45
    %c1_i32_114 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_114) : (i32) -> ()
    cf.br ^bb47
  ^bb49:  // 2 preds: ^bb47, ^bb50
    %252 = llvm.getelementptr %7[%246] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %244, %252 {alignment = 1 : i64} : i64, !llvm.ptr
    %253 = llvm.load %4 : !llvm.ptr -> i32
    %c24_i32_115 = arith.constant 24 : i32
    %254 = arith.addi %253, %c24_i32_115 : i32
    %255 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32_116 = arith.constant 24 : i32
    %256 = arith.addi %255, %c24_i32_116 : i32
    %c0_i64_117 = arith.constant 0 : i64
    %257 = arith.extui %256 : i32 to i64
    %258 = arith.addi %257, %c0_i64_117 : i64
    %c8_i64_118 = arith.constant 8 : i64
    %259 = arith.addi %258, %c8_i64_118 : i64
    %c0_i32_119 = arith.constant 0 : i32
    %260 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_119) : (!llvm.ptr, i32) -> i32
    %261 = arith.extui %260 : i32 to i64
    %c65536_i64_120 = arith.constant 65536 : i64
    %262 = arith.muli %261, %c65536_i64_120 : i64
    %263 = arith.cmpi ult, %259, %262 : i64
    cf.cond_br %263, ^bb51, ^bb52
  ^bb50:  // pred: ^bb47
    %c1_i32_121 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_121) : (i32) -> ()
    cf.br ^bb49
  ^bb51:  // 2 preds: ^bb49, ^bb52
    %264 = llvm.getelementptr %7[%258] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %265 = llvm.load volatile %264 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_122 = arith.constant 0 : i64
    %266 = arith.extui %254 : i32 to i64
    %267 = arith.addi %266, %c0_i64_122 : i64
    %c8_i64_123 = arith.constant 8 : i64
    %268 = arith.addi %267, %c8_i64_123 : i64
    %c0_i32_124 = arith.constant 0 : i32
    %269 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_124) : (!llvm.ptr, i32) -> i32
    %270 = arith.extui %269 : i32 to i64
    %c65536_i64_125 = arith.constant 65536 : i64
    %271 = arith.muli %270, %c65536_i64_125 : i64
    %272 = arith.cmpi ult, %268, %271 : i64
    cf.cond_br %272, ^bb53, ^bb54
  ^bb52:  // pred: ^bb49
    %c1_i32_126 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_126) : (i32) -> ()
    cf.br ^bb51
  ^bb53:  // 2 preds: ^bb51, ^bb54
    %273 = llvm.getelementptr %7[%267] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %265, %273 {alignment = 1 : i64} : i64, !llvm.ptr
    %274 = llvm.load %4 : !llvm.ptr -> i32
    %c16_i32_127 = arith.constant 16 : i32
    %275 = arith.addi %274, %c16_i32_127 : i32
    %276 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_128 = arith.constant 16 : i32
    %277 = arith.addi %276, %c16_i32_128 : i32
    %c0_i64_129 = arith.constant 0 : i64
    %278 = arith.extui %277 : i32 to i64
    %279 = arith.addi %278, %c0_i64_129 : i64
    %c8_i64_130 = arith.constant 8 : i64
    %280 = arith.addi %279, %c8_i64_130 : i64
    %c0_i32_131 = arith.constant 0 : i32
    %281 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_131) : (!llvm.ptr, i32) -> i32
    %282 = arith.extui %281 : i32 to i64
    %c65536_i64_132 = arith.constant 65536 : i64
    %283 = arith.muli %282, %c65536_i64_132 : i64
    %284 = arith.cmpi ult, %280, %283 : i64
    cf.cond_br %284, ^bb55, ^bb56
  ^bb54:  // pred: ^bb51
    %c1_i32_133 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_133) : (i32) -> ()
    cf.br ^bb53
  ^bb55:  // 2 preds: ^bb53, ^bb56
    %285 = llvm.getelementptr %7[%279] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %286 = llvm.load volatile %285 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_134 = arith.constant 0 : i64
    %287 = arith.extui %275 : i32 to i64
    %288 = arith.addi %287, %c0_i64_134 : i64
    %c8_i64_135 = arith.constant 8 : i64
    %289 = arith.addi %288, %c8_i64_135 : i64
    %c0_i32_136 = arith.constant 0 : i32
    %290 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_136) : (!llvm.ptr, i32) -> i32
    %291 = arith.extui %290 : i32 to i64
    %c65536_i64_137 = arith.constant 65536 : i64
    %292 = arith.muli %291, %c65536_i64_137 : i64
    %293 = arith.cmpi ult, %289, %292 : i64
    cf.cond_br %293, ^bb57, ^bb58
  ^bb56:  // pred: ^bb53
    %c1_i32_138 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_138) : (i32) -> ()
    cf.br ^bb55
  ^bb57:  // 2 preds: ^bb55, ^bb58
    %294 = llvm.getelementptr %7[%288] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %286, %294 {alignment = 1 : i64} : i64, !llvm.ptr
    %295 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i32_139 = arith.constant 8 : i32
    %296 = arith.addi %295, %c8_i32_139 : i32
    %297 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_140 = arith.constant 8 : i32
    %298 = arith.addi %297, %c8_i32_140 : i32
    %c0_i64_141 = arith.constant 0 : i64
    %299 = arith.extui %298 : i32 to i64
    %300 = arith.addi %299, %c0_i64_141 : i64
    %c8_i64_142 = arith.constant 8 : i64
    %301 = arith.addi %300, %c8_i64_142 : i64
    %c0_i32_143 = arith.constant 0 : i32
    %302 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_143) : (!llvm.ptr, i32) -> i32
    %303 = arith.extui %302 : i32 to i64
    %c65536_i64_144 = arith.constant 65536 : i64
    %304 = arith.muli %303, %c65536_i64_144 : i64
    %305 = arith.cmpi ult, %301, %304 : i64
    cf.cond_br %305, ^bb59, ^bb60
  ^bb58:  // pred: ^bb55
    %c1_i32_145 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_145) : (i32) -> ()
    cf.br ^bb57
  ^bb59:  // 2 preds: ^bb57, ^bb60
    %306 = llvm.getelementptr %7[%300] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %307 = llvm.load volatile %306 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_146 = arith.constant 0 : i64
    %308 = arith.extui %296 : i32 to i64
    %309 = arith.addi %308, %c0_i64_146 : i64
    %c8_i64_147 = arith.constant 8 : i64
    %310 = arith.addi %309, %c8_i64_147 : i64
    %c0_i32_148 = arith.constant 0 : i32
    %311 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_148) : (!llvm.ptr, i32) -> i32
    %312 = arith.extui %311 : i32 to i64
    %c65536_i64_149 = arith.constant 65536 : i64
    %313 = arith.muli %312, %c65536_i64_149 : i64
    %314 = arith.cmpi ult, %310, %313 : i64
    cf.cond_br %314, ^bb61, ^bb62
  ^bb60:  // pred: ^bb57
    %c1_i32_150 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_150) : (i32) -> ()
    cf.br ^bb59
  ^bb61:  // 2 preds: ^bb59, ^bb62
    %315 = llvm.getelementptr %7[%309] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %307, %315 {alignment = 1 : i64} : i64, !llvm.ptr
    %316 = llvm.load %1 : !llvm.ptr -> i32
    %317 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i32_151 = arith.constant 2 : i32
    %318 = arith.addi %317, %c2_i32_151 : i32
    llvm.store %318, %3 : i32, !llvm.ptr
    %c8_i64_152 = arith.constant 8 : i64
    %319 = arith.extui %316 : i32 to i64
    %320 = arith.addi %319, %c8_i64_152 : i64
    %c4_i64_153 = arith.constant 4 : i64
    %321 = arith.addi %320, %c4_i64_153 : i64
    %c0_i32_154 = arith.constant 0 : i32
    %322 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_154) : (!llvm.ptr, i32) -> i32
    %323 = arith.extui %322 : i32 to i64
    %c65536_i64_155 = arith.constant 65536 : i64
    %324 = arith.muli %323, %c65536_i64_155 : i64
    %325 = arith.cmpi ult, %321, %324 : i64
    cf.cond_br %325, ^bb63, ^bb64
  ^bb62:  // pred: ^bb59
    %c1_i32_156 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_156) : (i32) -> ()
    cf.br ^bb61
  ^bb63:  // 2 preds: ^bb61, ^bb64
    %326 = llvm.getelementptr %7[%320] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %318, %326 {alignment = 1 : i64} : i32, !llvm.ptr
    %327 = llvm.load %3 : !llvm.ptr -> i32
    %328 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_157 = arith.constant 0 : i64
    %329 = arith.extui %328 : i32 to i64
    %330 = arith.addi %329, %c0_i64_157 : i64
    %c4_i64_158 = arith.constant 4 : i64
    %331 = arith.addi %330, %c4_i64_158 : i64
    %c0_i32_159 = arith.constant 0 : i32
    %332 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_159) : (!llvm.ptr, i32) -> i32
    %333 = arith.extui %332 : i32 to i64
    %c65536_i64_160 = arith.constant 65536 : i64
    %334 = arith.muli %333, %c65536_i64_160 : i64
    %335 = arith.cmpi ult, %331, %334 : i64
    cf.cond_br %335, ^bb66, ^bb67
  ^bb64:  // pred: ^bb61
    %c1_i32_161 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_161) : (i32) -> ()
    cf.br ^bb63
  ^bb65:  // 2 preds: ^bb66, ^bb68
    %336 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_162 = arith.constant 4 : i64
    %337 = arith.extui %336 : i32 to i64
    %338 = arith.addi %337, %c4_i64_162 : i64
    %c4_i64_163 = arith.constant 4 : i64
    %339 = arith.addi %338, %c4_i64_163 : i64
    %c0_i32_164 = arith.constant 0 : i32
    %340 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_164) : (!llvm.ptr, i32) -> i32
    %341 = arith.extui %340 : i32 to i64
    %c65536_i64_165 = arith.constant 65536 : i64
    %342 = arith.muli %341, %c65536_i64_165 : i64
    %343 = arith.cmpi ult, %339, %342 : i64
    cf.cond_br %343, ^bb69, ^bb70
  ^bb66:  // 2 preds: ^bb63, ^bb67
    %344 = llvm.getelementptr %7[%330] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %345 = llvm.load volatile %344 {alignment = 1 : i64} : !llvm.ptr -> i32
    %346 = arith.cmpi eq, %327, %345 : i32
    %347 = arith.extui %346 : i1 to i32
    %c0_i32_166 = arith.constant 0 : i32
    %348 = arith.cmpi eq, %347, %c0_i32_166 : i32
    %349 = arith.extui %348 : i1 to i32
    %c0_i32_167 = arith.constant 0 : i32
    %350 = arith.cmpi ne, %349, %c0_i32_167 : i32
    cf.cond_br %350, ^bb65, ^bb68
  ^bb67:  // pred: ^bb63
    %c1_i32_168 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_168) : (i32) -> ()
    cf.br ^bb66
  ^bb68:  // pred: ^bb66
    %351 = llvm.load %1 : !llvm.ptr -> i32
    call @f88(%arg0, %351) : (!llvm.ptr, i32) -> ()
    cf.br ^bb65
  ^bb69:  // 2 preds: ^bb65, ^bb70
    %352 = llvm.getelementptr %7[%338] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %353 = llvm.load volatile %352 {alignment = 1 : i64} : !llvm.ptr -> i32
    %354 = llvm.load %3 : !llvm.ptr -> i32
    %c5_i32_169 = arith.constant 5 : i32
    %c31_i32_170 = arith.constant 31 : i32
    %355 = arith.cmpi ule, %c5_i32_169, %c31_i32_170 : i32
    %356 = scf.if %355 -> (i32) {
      %474 = arith.shli %354, %c5_i32_169 : i32
      scf.yield %474 : i32
    } else {
      %c0_i32_235 = arith.constant 0 : i32
      scf.yield %c0_i32_235 : i32
    }
    %357 = arith.addi %353, %356 : i32
    llvm.store %357, %3 : i32, !llvm.ptr
    %358 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_171 = arith.constant 0 : i64
    %359 = arith.extui %358 : i32 to i64
    %360 = arith.addi %359, %c0_i64_171 : i64
    %c8_i64_172 = arith.constant 8 : i64
    %361 = arith.addi %360, %c8_i64_172 : i64
    %c0_i32_173 = arith.constant 0 : i32
    %362 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_173) : (!llvm.ptr, i32) -> i32
    %363 = arith.extui %362 : i32 to i64
    %c65536_i64_174 = arith.constant 65536 : i64
    %364 = arith.muli %363, %c65536_i64_174 : i64
    %365 = arith.cmpi ult, %361, %364 : i64
    cf.cond_br %365, ^bb71, ^bb72
  ^bb70:  // pred: ^bb65
    %c1_i32_175 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_175) : (i32) -> ()
    cf.br ^bb69
  ^bb71:  // 2 preds: ^bb69, ^bb72
    %366 = llvm.getelementptr %7[%360] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %367 = llvm.load volatile %366 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_176 = arith.constant 0 : i64
    %368 = arith.extui %357 : i32 to i64
    %369 = arith.addi %368, %c0_i64_176 : i64
    %c8_i64_177 = arith.constant 8 : i64
    %370 = arith.addi %369, %c8_i64_177 : i64
    %c0_i32_178 = arith.constant 0 : i32
    %371 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_178) : (!llvm.ptr, i32) -> i32
    %372 = arith.extui %371 : i32 to i64
    %c65536_i64_179 = arith.constant 65536 : i64
    %373 = arith.muli %372, %c65536_i64_179 : i64
    %374 = arith.cmpi ult, %370, %373 : i64
    cf.cond_br %374, ^bb73, ^bb74
  ^bb72:  // pred: ^bb69
    %c1_i32_180 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_180) : (i32) -> ()
    cf.br ^bb71
  ^bb73:  // 2 preds: ^bb71, ^bb74
    %375 = llvm.getelementptr %7[%369] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %367, %375 {alignment = 1 : i64} : i64, !llvm.ptr
    %376 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32_181 = arith.constant 24 : i32
    %377 = arith.addi %376, %c24_i32_181 : i32
    %378 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32_182 = arith.constant 24 : i32
    %379 = arith.addi %378, %c24_i32_182 : i32
    %c0_i64_183 = arith.constant 0 : i64
    %380 = arith.extui %379 : i32 to i64
    %381 = arith.addi %380, %c0_i64_183 : i64
    %c8_i64_184 = arith.constant 8 : i64
    %382 = arith.addi %381, %c8_i64_184 : i64
    %c0_i32_185 = arith.constant 0 : i32
    %383 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_185) : (!llvm.ptr, i32) -> i32
    %384 = arith.extui %383 : i32 to i64
    %c65536_i64_186 = arith.constant 65536 : i64
    %385 = arith.muli %384, %c65536_i64_186 : i64
    %386 = arith.cmpi ult, %382, %385 : i64
    cf.cond_br %386, ^bb75, ^bb76
  ^bb74:  // pred: ^bb71
    %c1_i32_187 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_187) : (i32) -> ()
    cf.br ^bb73
  ^bb75:  // 2 preds: ^bb73, ^bb76
    %387 = llvm.getelementptr %7[%381] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %388 = llvm.load volatile %387 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_188 = arith.constant 0 : i64
    %389 = arith.extui %377 : i32 to i64
    %390 = arith.addi %389, %c0_i64_188 : i64
    %c8_i64_189 = arith.constant 8 : i64
    %391 = arith.addi %390, %c8_i64_189 : i64
    %c0_i32_190 = arith.constant 0 : i32
    %392 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_190) : (!llvm.ptr, i32) -> i32
    %393 = arith.extui %392 : i32 to i64
    %c65536_i64_191 = arith.constant 65536 : i64
    %394 = arith.muli %393, %c65536_i64_191 : i64
    %395 = arith.cmpi ult, %391, %394 : i64
    cf.cond_br %395, ^bb77, ^bb78
  ^bb76:  // pred: ^bb73
    %c1_i32_192 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_192) : (i32) -> ()
    cf.br ^bb75
  ^bb77:  // 2 preds: ^bb75, ^bb78
    %396 = llvm.getelementptr %7[%390] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %388, %396 {alignment = 1 : i64} : i64, !llvm.ptr
    %397 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_193 = arith.constant 16 : i32
    %398 = arith.addi %397, %c16_i32_193 : i32
    %399 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_194 = arith.constant 16 : i32
    %400 = arith.addi %399, %c16_i32_194 : i32
    %c0_i64_195 = arith.constant 0 : i64
    %401 = arith.extui %400 : i32 to i64
    %402 = arith.addi %401, %c0_i64_195 : i64
    %c8_i64_196 = arith.constant 8 : i64
    %403 = arith.addi %402, %c8_i64_196 : i64
    %c0_i32_197 = arith.constant 0 : i32
    %404 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_197) : (!llvm.ptr, i32) -> i32
    %405 = arith.extui %404 : i32 to i64
    %c65536_i64_198 = arith.constant 65536 : i64
    %406 = arith.muli %405, %c65536_i64_198 : i64
    %407 = arith.cmpi ult, %403, %406 : i64
    cf.cond_br %407, ^bb79, ^bb80
  ^bb78:  // pred: ^bb75
    %c1_i32_199 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_199) : (i32) -> ()
    cf.br ^bb77
  ^bb79:  // 2 preds: ^bb77, ^bb80
    %408 = llvm.getelementptr %7[%402] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %409 = llvm.load volatile %408 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_200 = arith.constant 0 : i64
    %410 = arith.extui %398 : i32 to i64
    %411 = arith.addi %410, %c0_i64_200 : i64
    %c8_i64_201 = arith.constant 8 : i64
    %412 = arith.addi %411, %c8_i64_201 : i64
    %c0_i32_202 = arith.constant 0 : i32
    %413 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_202) : (!llvm.ptr, i32) -> i32
    %414 = arith.extui %413 : i32 to i64
    %c65536_i64_203 = arith.constant 65536 : i64
    %415 = arith.muli %414, %c65536_i64_203 : i64
    %416 = arith.cmpi ult, %412, %415 : i64
    cf.cond_br %416, ^bb81, ^bb82
  ^bb80:  // pred: ^bb77
    %c1_i32_204 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_204) : (i32) -> ()
    cf.br ^bb79
  ^bb81:  // 2 preds: ^bb79, ^bb82
    %417 = llvm.getelementptr %7[%411] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %409, %417 {alignment = 1 : i64} : i64, !llvm.ptr
    %418 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_205 = arith.constant 8 : i32
    %419 = arith.addi %418, %c8_i32_205 : i32
    %420 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_206 = arith.constant 8 : i32
    %421 = arith.addi %420, %c8_i32_206 : i32
    %c0_i64_207 = arith.constant 0 : i64
    %422 = arith.extui %421 : i32 to i64
    %423 = arith.addi %422, %c0_i64_207 : i64
    %c8_i64_208 = arith.constant 8 : i64
    %424 = arith.addi %423, %c8_i64_208 : i64
    %c0_i32_209 = arith.constant 0 : i32
    %425 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_209) : (!llvm.ptr, i32) -> i32
    %426 = arith.extui %425 : i32 to i64
    %c65536_i64_210 = arith.constant 65536 : i64
    %427 = arith.muli %426, %c65536_i64_210 : i64
    %428 = arith.cmpi ult, %424, %427 : i64
    cf.cond_br %428, ^bb83, ^bb84
  ^bb82:  // pred: ^bb79
    %c1_i32_211 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_211) : (i32) -> ()
    cf.br ^bb81
  ^bb83:  // 2 preds: ^bb81, ^bb84
    %429 = llvm.getelementptr %7[%423] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %430 = llvm.load volatile %429 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_212 = arith.constant 0 : i64
    %431 = arith.extui %419 : i32 to i64
    %432 = arith.addi %431, %c0_i64_212 : i64
    %c8_i64_213 = arith.constant 8 : i64
    %433 = arith.addi %432, %c8_i64_213 : i64
    %c0_i32_214 = arith.constant 0 : i32
    %434 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_214) : (!llvm.ptr, i32) -> i32
    %435 = arith.extui %434 : i32 to i64
    %c65536_i64_215 = arith.constant 65536 : i64
    %436 = arith.muli %435, %c65536_i64_215 : i64
    %437 = arith.cmpi ult, %433, %436 : i64
    cf.cond_br %437, ^bb85, ^bb86
  ^bb84:  // pred: ^bb81
    %c1_i32_216 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_216) : (i32) -> ()
    cf.br ^bb83
  ^bb85:  // 2 preds: ^bb83, ^bb86
    %438 = llvm.getelementptr %7[%432] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %430, %438 {alignment = 1 : i64} : i64, !llvm.ptr
    %439 = llvm.load %1 : !llvm.ptr -> i32
    %440 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %441 = arith.addi %440, %c3_i32 : i32
    %c8_i64_217 = arith.constant 8 : i64
    %442 = arith.extui %439 : i32 to i64
    %443 = arith.addi %442, %c8_i64_217 : i64
    %c4_i64_218 = arith.constant 4 : i64
    %444 = arith.addi %443, %c4_i64_218 : i64
    %c0_i32_219 = arith.constant 0 : i32
    %445 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_219) : (!llvm.ptr, i32) -> i32
    %446 = arith.extui %445 : i32 to i64
    %c65536_i64_220 = arith.constant 65536 : i64
    %447 = arith.muli %446, %c65536_i64_220 : i64
    %448 = arith.cmpi ult, %444, %447 : i64
    cf.cond_br %448, ^bb87, ^bb88
  ^bb86:  // pred: ^bb83
    %c1_i32_221 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_221) : (i32) -> ()
    cf.br ^bb85
  ^bb87:  // 2 preds: ^bb85, ^bb88
    %449 = llvm.getelementptr %7[%443] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %441, %449 {alignment = 1 : i64} : i32, !llvm.ptr
    %450 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64_222 = arith.constant 20 : i64
    %451 = arith.extui %450 : i32 to i64
    %452 = arith.addi %451, %c20_i64_222 : i64
    %c4_i64_223 = arith.constant 4 : i64
    %453 = arith.addi %452, %c4_i64_223 : i64
    %c0_i32_224 = arith.constant 0 : i32
    %454 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_224) : (!llvm.ptr, i32) -> i32
    %455 = arith.extui %454 : i32 to i64
    %c65536_i64_225 = arith.constant 65536 : i64
    %456 = arith.muli %455, %c65536_i64_225 : i64
    %457 = arith.cmpi ult, %453, %456 : i64
    cf.cond_br %457, ^bb90, ^bb91
  ^bb88:  // pred: ^bb85
    %c1_i32_226 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_226) : (i32) -> ()
    cf.br ^bb87
  ^bb89:  // 2 preds: ^bb90, ^bb93
    cf.br ^bb2
  ^bb90:  // 2 preds: ^bb87, ^bb91
    %458 = llvm.getelementptr %7[%452] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %459 = llvm.load volatile %458 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %459, %0 : i32, !llvm.ptr
    %c0_i32_227 = arith.constant 0 : i32
    %460 = arith.cmpi eq, %459, %c0_i32_227 : i32
    %461 = arith.extui %460 : i1 to i32
    %c0_i32_228 = arith.constant 0 : i32
    %462 = arith.cmpi ne, %461, %c0_i32_228 : i32
    cf.cond_br %462, ^bb89, ^bb92
  ^bb91:  // pred: ^bb87
    %c1_i32_229 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_229) : (i32) -> ()
    cf.br ^bb90
  ^bb92:  // pred: ^bb90
    %463 = llvm.load %1 : !llvm.ptr -> i32
    %464 = llvm.load %0 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %465 = arith.addi %464, %c-1_i32 : i32
    %c20_i64_230 = arith.constant 20 : i64
    %466 = arith.extui %463 : i32 to i64
    %467 = arith.addi %466, %c20_i64_230 : i64
    %c4_i64_231 = arith.constant 4 : i64
    %468 = arith.addi %467, %c4_i64_231 : i64
    %c0_i32_232 = arith.constant 0 : i32
    %469 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_232) : (!llvm.ptr, i32) -> i32
    %470 = arith.extui %469 : i32 to i64
    %c65536_i64_233 = arith.constant 65536 : i64
    %471 = arith.muli %470, %c65536_i64_233 : i64
    %472 = arith.cmpi ult, %468, %471 : i64
    cf.cond_br %472, ^bb93, ^bb94
  ^bb93:  // 2 preds: ^bb92, ^bb94
    %473 = llvm.getelementptr %7[%467] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %465, %473 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb89
  ^bb94:  // pred: ^bb92
    %c1_i32_234 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_234) : (i32) -> ()
    cf.br ^bb93
  }
  func.func @f42(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %8 : i64, !llvm.ptr
    %9 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %14 = llvm.load %10 : !llvm.ptr -> i32
    %c80_i32 = arith.constant 80 : i32
    %15 = arith.subi %14, %c80_i32 : i32
    llvm.store %15, %2 : i32, !llvm.ptr
    llvm.store %15, %10 : i32, !llvm.ptr
    %16 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32 = arith.constant 40 : i32
    %17 = arith.addi %16, %c40_i32 : i32
    %c3_i32 = arith.constant 3 : i32
    %c0_i32_8 = arith.constant 0 : i32
    %c1_i32_9 = arith.constant 1 : i32
    %c32_i32 = arith.constant 32 : i32
    call @f111(%arg0, %17, %c3_i32, %c0_i32_8, %c1_i32_9, %c32_i32) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %18 = llvm.load %2 : !llvm.ptr -> i32
    %c44_i64 = arith.constant 44 : i64
    %19 = arith.extui %18 : i32 to i64
    %20 = arith.addi %19, %c44_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %21 = arith.addi %20, %c4_i64 : i64
    %c0_i32_10 = arith.constant 0 : i32
    %22 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_10) : (!llvm.ptr, i32) -> i32
    %23 = arith.extui %22 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %24 = arith.muli %23, %c65536_i64 : i64
    %25 = arith.cmpi ult, %21, %24 : i64
    cf.cond_br %25, ^bb3, ^bb4
  ^bb2:  // pred: ^bb51
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %26 = llvm.getelementptr %13[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %27 = llvm.load volatile %26 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %27, %3 : i32, !llvm.ptr
    %28 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i64 = arith.constant 40 : i64
    %29 = arith.extui %28 : i32 to i64
    %30 = arith.addi %29, %c40_i64 : i64
    %c4_i64_11 = arith.constant 4 : i64
    %31 = arith.addi %30, %c4_i64_11 : i64
    %c0_i32_12 = arith.constant 0 : i32
    %32 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_12) : (!llvm.ptr, i32) -> i32
    %33 = arith.extui %32 : i32 to i64
    %c65536_i64_13 = arith.constant 65536 : i64
    %34 = arith.muli %33, %c65536_i64_13 : i64
    %35 = arith.cmpi ult, %31, %34 : i64
    cf.cond_br %35, ^bb7, ^bb8
  ^bb4:  // pred: ^bb1
    %c1_i32_14 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_14) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // pred: ^bb14
    %36 = llvm.load %5 : !llvm.ptr -> i32
    %37 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i64 = arith.constant 48 : i64
    %38 = arith.extui %37 : i32 to i64
    %39 = arith.addi %38, %c48_i64 : i64
    %c4_i64_15 = arith.constant 4 : i64
    %40 = arith.addi %39, %c4_i64_15 : i64
    %c0_i32_16 = arith.constant 0 : i32
    %41 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_16) : (!llvm.ptr, i32) -> i32
    %42 = arith.extui %41 : i32 to i64
    %c65536_i64_17 = arith.constant 65536 : i64
    %43 = arith.muli %42, %c65536_i64_17 : i64
    %44 = arith.cmpi ult, %40, %43 : i64
    cf.cond_br %44, ^bb55, ^bb56
  ^bb6:  // pred: ^bb7
    %45 = llvm.load %3 : !llvm.ptr -> i32
    %46 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i64_18 = arith.constant 48 : i64
    %47 = arith.extui %46 : i32 to i64
    %48 = arith.addi %47, %c48_i64_18 : i64
    %c4_i64_19 = arith.constant 4 : i64
    %49 = arith.addi %48, %c4_i64_19 : i64
    %c0_i32_20 = arith.constant 0 : i32
    %50 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_20) : (!llvm.ptr, i32) -> i32
    %51 = arith.extui %50 : i32 to i64
    %c65536_i64_21 = arith.constant 65536 : i64
    %52 = arith.muli %51, %c65536_i64_21 : i64
    %53 = arith.cmpi ult, %49, %52 : i64
    cf.cond_br %53, ^bb53, ^bb54
  ^bb7:  // 2 preds: ^bb3, ^bb8
    %54 = llvm.getelementptr %13[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %55 = llvm.load volatile %54 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_22 = arith.constant 1 : i32
    %56 = arith.cmpi eq, %55, %c1_i32_22 : i32
    %57 = arith.extui %56 : i1 to i32
    %c0_i32_23 = arith.constant 0 : i32
    %58 = arith.cmpi ne, %57, %c0_i32_23 : i32
    cf.cond_br %58, ^bb6, ^bb9
  ^bb8:  // pred: ^bb3
    %c1_i32_24 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_24) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // pred: ^bb7
    %59 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i64_25 = arith.constant 48 : i64
    %60 = arith.extui %59 : i32 to i64
    %61 = arith.addi %60, %c48_i64_25 : i64
    %c4_i64_26 = arith.constant 4 : i64
    %62 = arith.addi %61, %c4_i64_26 : i64
    %c0_i32_27 = arith.constant 0 : i32
    %63 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_27) : (!llvm.ptr, i32) -> i32
    %64 = arith.extui %63 : i32 to i64
    %c65536_i64_28 = arith.constant 65536 : i64
    %65 = arith.muli %64, %c65536_i64_28 : i64
    %66 = arith.cmpi ult, %62, %65 : i64
    cf.cond_br %66, ^bb10, ^bb11
  ^bb10:  // 2 preds: ^bb9, ^bb11
    %67 = llvm.getelementptr %13[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %68 = llvm.load volatile %67 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %68, %4 : i32, !llvm.ptr
    %69 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_29 = arith.constant 40 : i32
    %70 = arith.addi %69, %c40_i32_29 : i32
    %c4_i32 = arith.constant 4 : i32
    %c0_i32_30 = arith.constant 0 : i32
    %c4_i32_31 = arith.constant 4 : i32
    %c4_i32_32 = arith.constant 4 : i32
    call @f111(%arg0, %70, %c4_i32, %c0_i32_30, %c4_i32_31, %c4_i32_32) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %71 = llvm.load %2 : !llvm.ptr -> i32
    %c44_i64_33 = arith.constant 44 : i64
    %72 = arith.extui %71 : i32 to i64
    %73 = arith.addi %72, %c44_i64_33 : i64
    %c4_i64_34 = arith.constant 4 : i64
    %74 = arith.addi %73, %c4_i64_34 : i64
    %c0_i32_35 = arith.constant 0 : i32
    %75 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_35) : (!llvm.ptr, i32) -> i32
    %76 = arith.extui %75 : i32 to i64
    %c65536_i64_36 = arith.constant 65536 : i64
    %77 = arith.muli %76, %c65536_i64_36 : i64
    %78 = arith.cmpi ult, %74, %77 : i64
    cf.cond_br %78, ^bb12, ^bb13
  ^bb11:  // pred: ^bb9
    %c1_i32_37 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_37) : (i32) -> ()
    cf.br ^bb10
  ^bb12:  // 2 preds: ^bb10, ^bb13
    %79 = llvm.getelementptr %13[%73] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %80 = llvm.load volatile %79 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %80, %5 : i32, !llvm.ptr
    %81 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i64_38 = arith.constant 40 : i64
    %82 = arith.extui %81 : i32 to i64
    %83 = arith.addi %82, %c40_i64_38 : i64
    %c4_i64_39 = arith.constant 4 : i64
    %84 = arith.addi %83, %c4_i64_39 : i64
    %c0_i32_40 = arith.constant 0 : i32
    %85 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_40) : (!llvm.ptr, i32) -> i32
    %86 = arith.extui %85 : i32 to i64
    %c65536_i64_41 = arith.constant 65536 : i64
    %87 = arith.muli %86, %c65536_i64_41 : i64
    %88 = arith.cmpi ult, %84, %87 : i64
    cf.cond_br %88, ^bb14, ^bb15
  ^bb13:  // pred: ^bb10
    %c1_i32_42 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_42) : (i32) -> ()
    cf.br ^bb12
  ^bb14:  // 2 preds: ^bb12, ^bb15
    %89 = llvm.getelementptr %13[%83] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %90 = llvm.load volatile %89 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_43 = arith.constant 1 : i32
    %91 = arith.cmpi eq, %90, %c1_i32_43 : i32
    %92 = arith.extui %91 : i1 to i32
    %c0_i32_44 = arith.constant 0 : i32
    %93 = arith.cmpi ne, %92, %c0_i32_44 : i32
    cf.cond_br %93, ^bb5, ^bb16
  ^bb15:  // pred: ^bb12
    %c1_i32_45 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_45) : (i32) -> ()
    cf.br ^bb14
  ^bb16:  // pred: ^bb14
    %94 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %95 = arith.addi %94, %c16_i32 : i32
    %c16_i32_46 = arith.constant 16 : i32
    %96 = arith.addi %95, %c16_i32_46 : i32
    llvm.store %96, %6 : i32, !llvm.ptr
    %97 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i64_47 = arith.constant 48 : i64
    %98 = arith.extui %97 : i32 to i64
    %99 = arith.addi %98, %c48_i64_47 : i64
    %c4_i64_48 = arith.constant 4 : i64
    %100 = arith.addi %99, %c4_i64_48 : i64
    %c0_i32_49 = arith.constant 0 : i32
    %101 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_49) : (!llvm.ptr, i32) -> i32
    %102 = arith.extui %101 : i32 to i64
    %c65536_i64_50 = arith.constant 65536 : i64
    %103 = arith.muli %102, %c65536_i64_50 : i64
    %104 = arith.cmpi ult, %100, %103 : i64
    cf.cond_br %104, ^bb17, ^bb18
  ^bb17:  // 2 preds: ^bb16, ^bb18
    %105 = llvm.getelementptr %13[%99] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %106 = llvm.load volatile %105 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_51 = arith.constant 0 : i64
    %107 = arith.extui %96 : i32 to i64
    %108 = arith.addi %107, %c0_i64_51 : i64
    %c4_i64_52 = arith.constant 4 : i64
    %109 = arith.addi %108, %c4_i64_52 : i64
    %c0_i32_53 = arith.constant 0 : i32
    %110 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_53) : (!llvm.ptr, i32) -> i32
    %111 = arith.extui %110 : i32 to i64
    %c65536_i64_54 = arith.constant 65536 : i64
    %112 = arith.muli %111, %c65536_i64_54 : i64
    %113 = arith.cmpi ult, %109, %112 : i64
    cf.cond_br %113, ^bb19, ^bb20
  ^bb18:  // pred: ^bb16
    %c1_i32_55 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_55) : (i32) -> ()
    cf.br ^bb17
  ^bb19:  // 2 preds: ^bb17, ^bb20
    %114 = llvm.getelementptr %13[%108] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %106, %114 {alignment = 1 : i64} : i32, !llvm.ptr
    %115 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_56 = arith.constant 16 : i32
    %116 = arith.addi %115, %c16_i32_56 : i32
    %c8_i32 = arith.constant 8 : i32
    %117 = arith.addi %116, %c8_i32 : i32
    llvm.store %117, %7 : i32, !llvm.ptr
    %c0_i32_57 = arith.constant 0 : i32
    %c0_i64_58 = arith.constant 0 : i64
    %118 = arith.extui %117 : i32 to i64
    %119 = arith.addi %118, %c0_i64_58 : i64
    %c4_i64_59 = arith.constant 4 : i64
    %120 = arith.addi %119, %c4_i64_59 : i64
    %c0_i32_60 = arith.constant 0 : i32
    %121 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_60) : (!llvm.ptr, i32) -> i32
    %122 = arith.extui %121 : i32 to i64
    %c65536_i64_61 = arith.constant 65536 : i64
    %123 = arith.muli %122, %c65536_i64_61 : i64
    %124 = arith.cmpi ult, %120, %123 : i64
    cf.cond_br %124, ^bb21, ^bb22
  ^bb20:  // pred: ^bb17
    %c1_i32_62 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_62) : (i32) -> ()
    cf.br ^bb19
  ^bb21:  // 2 preds: ^bb19, ^bb22
    %125 = llvm.getelementptr %13[%119] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_57, %125 {alignment = 1 : i64} : i32, !llvm.ptr
    %126 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_63 = arith.constant 0 : i32
    %c36_i64 = arith.constant 36 : i64
    %127 = arith.extui %126 : i32 to i64
    %128 = arith.addi %127, %c36_i64 : i64
    %c4_i64_64 = arith.constant 4 : i64
    %129 = arith.addi %128, %c4_i64_64 : i64
    %c0_i32_65 = arith.constant 0 : i32
    %130 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_65) : (!llvm.ptr, i32) -> i32
    %131 = arith.extui %130 : i32 to i64
    %c65536_i64_66 = arith.constant 65536 : i64
    %132 = arith.muli %131, %c65536_i64_66 : i64
    %133 = arith.cmpi ult, %129, %132 : i64
    cf.cond_br %133, ^bb23, ^bb24
  ^bb22:  // pred: ^bb19
    %c1_i32_67 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_67) : (i32) -> ()
    cf.br ^bb21
  ^bb23:  // 2 preds: ^bb21, ^bb24
    %134 = llvm.getelementptr %13[%128] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_63, %134 {alignment = 1 : i64} : i32, !llvm.ptr
    %135 = llvm.load %2 : !llvm.ptr -> i32
    %136 = llvm.load %5 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %137 = arith.extui %135 : i32 to i64
    %138 = arith.addi %137, %c28_i64 : i64
    %c4_i64_68 = arith.constant 4 : i64
    %139 = arith.addi %138, %c4_i64_68 : i64
    %c0_i32_69 = arith.constant 0 : i32
    %140 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_69) : (!llvm.ptr, i32) -> i32
    %141 = arith.extui %140 : i32 to i64
    %c65536_i64_70 = arith.constant 65536 : i64
    %142 = arith.muli %141, %c65536_i64_70 : i64
    %143 = arith.cmpi ult, %139, %142 : i64
    cf.cond_br %143, ^bb25, ^bb26
  ^bb24:  // pred: ^bb21
    %c1_i32_71 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_71) : (i32) -> ()
    cf.br ^bb23
  ^bb25:  // 2 preds: ^bb23, ^bb26
    %144 = llvm.getelementptr %13[%138] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %136, %144 {alignment = 1 : i64} : i32, !llvm.ptr
    %145 = llvm.load %2 : !llvm.ptr -> i32
    %146 = llvm.load %4 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %147 = arith.extui %145 : i32 to i64
    %148 = arith.addi %147, %c20_i64 : i64
    %c4_i64_72 = arith.constant 4 : i64
    %149 = arith.addi %148, %c4_i64_72 : i64
    %c0_i32_73 = arith.constant 0 : i32
    %150 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_73) : (!llvm.ptr, i32) -> i32
    %151 = arith.extui %150 : i32 to i64
    %c65536_i64_74 = arith.constant 65536 : i64
    %152 = arith.muli %151, %c65536_i64_74 : i64
    %153 = arith.cmpi ult, %149, %152 : i64
    cf.cond_br %153, ^bb27, ^bb28
  ^bb26:  // pred: ^bb23
    %c1_i32_75 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_75) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // 2 preds: ^bb25, ^bb28
    %154 = llvm.getelementptr %13[%148] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %146, %154 {alignment = 1 : i64} : i32, !llvm.ptr
    %155 = llvm.load %2 : !llvm.ptr -> i32
    %156 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %157 = arith.extui %155 : i32 to i64
    %158 = arith.addi %157, %c16_i64 : i64
    %c4_i64_76 = arith.constant 4 : i64
    %159 = arith.addi %158, %c4_i64_76 : i64
    %c0_i32_77 = arith.constant 0 : i32
    %160 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_77) : (!llvm.ptr, i32) -> i32
    %161 = arith.extui %160 : i32 to i64
    %c65536_i64_78 = arith.constant 65536 : i64
    %162 = arith.muli %161, %c65536_i64_78 : i64
    %163 = arith.cmpi ult, %159, %162 : i64
    cf.cond_br %163, ^bb29, ^bb30
  ^bb28:  // pred: ^bb25
    %c1_i32_79 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_79) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // 2 preds: ^bb27, ^bb30
    %164 = llvm.getelementptr %13[%158] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %156, %164 {alignment = 1 : i64} : i32, !llvm.ptr
    %165 = llvm.load %1 : !llvm.ptr -> i32
    %166 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_80 = arith.constant 16 : i32
    %167 = arith.addi %166, %c16_i32_80 : i32
    call @f46(%arg0, %165, %167) : (!llvm.ptr, i32, i32) -> ()
    %168 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_81 = arith.constant 40 : i32
    %169 = arith.addi %168, %c40_i32_81 : i32
    %c16_i32_82 = arith.constant 16 : i32
    %170 = arith.addi %169, %c16_i32_82 : i32
    %171 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_83 = arith.constant 0 : i64
    %172 = arith.extui %171 : i32 to i64
    %173 = arith.addi %172, %c0_i64_83 : i64
    %c8_i64 = arith.constant 8 : i64
    %174 = arith.addi %173, %c8_i64 : i64
    %c0_i32_84 = arith.constant 0 : i32
    %175 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_84) : (!llvm.ptr, i32) -> i32
    %176 = arith.extui %175 : i32 to i64
    %c65536_i64_85 = arith.constant 65536 : i64
    %177 = arith.muli %176, %c65536_i64_85 : i64
    %178 = arith.cmpi ult, %174, %177 : i64
    cf.cond_br %178, ^bb31, ^bb32
  ^bb30:  // pred: ^bb27
    %c1_i32_86 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_86) : (i32) -> ()
    cf.br ^bb29
  ^bb31:  // 2 preds: ^bb29, ^bb32
    %179 = llvm.getelementptr %13[%173] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %180 = llvm.load volatile %179 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_87 = arith.constant 0 : i64
    %181 = arith.extui %170 : i32 to i64
    %182 = arith.addi %181, %c0_i64_87 : i64
    %c8_i64_88 = arith.constant 8 : i64
    %183 = arith.addi %182, %c8_i64_88 : i64
    %c0_i32_89 = arith.constant 0 : i32
    %184 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_89) : (!llvm.ptr, i32) -> i32
    %185 = arith.extui %184 : i32 to i64
    %c65536_i64_90 = arith.constant 65536 : i64
    %186 = arith.muli %185, %c65536_i64_90 : i64
    %187 = arith.cmpi ult, %183, %186 : i64
    cf.cond_br %187, ^bb33, ^bb34
  ^bb32:  // pred: ^bb29
    %c1_i32_91 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_91) : (i32) -> ()
    cf.br ^bb31
  ^bb33:  // 2 preds: ^bb31, ^bb34
    %188 = llvm.getelementptr %13[%182] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %180, %188 {alignment = 1 : i64} : i64, !llvm.ptr
    %189 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_92 = arith.constant 40 : i32
    %190 = arith.addi %189, %c40_i32_92 : i32
    %c8_i32_93 = arith.constant 8 : i32
    %191 = arith.addi %190, %c8_i32_93 : i32
    %192 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_94 = arith.constant 0 : i64
    %193 = arith.extui %192 : i32 to i64
    %194 = arith.addi %193, %c0_i64_94 : i64
    %c8_i64_95 = arith.constant 8 : i64
    %195 = arith.addi %194, %c8_i64_95 : i64
    %c0_i32_96 = arith.constant 0 : i32
    %196 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_96) : (!llvm.ptr, i32) -> i32
    %197 = arith.extui %196 : i32 to i64
    %c65536_i64_97 = arith.constant 65536 : i64
    %198 = arith.muli %197, %c65536_i64_97 : i64
    %199 = arith.cmpi ult, %195, %198 : i64
    cf.cond_br %199, ^bb35, ^bb36
  ^bb34:  // pred: ^bb31
    %c1_i32_98 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_98) : (i32) -> ()
    cf.br ^bb33
  ^bb35:  // 2 preds: ^bb33, ^bb36
    %200 = llvm.getelementptr %13[%194] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %201 = llvm.load volatile %200 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_99 = arith.constant 0 : i64
    %202 = arith.extui %191 : i32 to i64
    %203 = arith.addi %202, %c0_i64_99 : i64
    %c8_i64_100 = arith.constant 8 : i64
    %204 = arith.addi %203, %c8_i64_100 : i64
    %c0_i32_101 = arith.constant 0 : i32
    %205 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_101) : (!llvm.ptr, i32) -> i32
    %206 = arith.extui %205 : i32 to i64
    %c65536_i64_102 = arith.constant 65536 : i64
    %207 = arith.muli %206, %c65536_i64_102 : i64
    %208 = arith.cmpi ult, %204, %207 : i64
    cf.cond_br %208, ^bb37, ^bb38
  ^bb36:  // pred: ^bb33
    %c1_i32_103 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_103) : (i32) -> ()
    cf.br ^bb35
  ^bb37:  // 2 preds: ^bb35, ^bb38
    %209 = llvm.getelementptr %13[%203] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %201, %209 {alignment = 1 : i64} : i64, !llvm.ptr
    %210 = llvm.load %2 : !llvm.ptr -> i32
    %211 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i64_104 = arith.constant 16 : i64
    %212 = arith.extui %211 : i32 to i64
    %213 = arith.addi %212, %c16_i64_104 : i64
    %c8_i64_105 = arith.constant 8 : i64
    %214 = arith.addi %213, %c8_i64_105 : i64
    %c0_i32_106 = arith.constant 0 : i32
    %215 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_106) : (!llvm.ptr, i32) -> i32
    %216 = arith.extui %215 : i32 to i64
    %c65536_i64_107 = arith.constant 65536 : i64
    %217 = arith.muli %216, %c65536_i64_107 : i64
    %218 = arith.cmpi ult, %214, %217 : i64
    cf.cond_br %218, ^bb39, ^bb40
  ^bb38:  // pred: ^bb35
    %c1_i32_108 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_108) : (i32) -> ()
    cf.br ^bb37
  ^bb39:  // 2 preds: ^bb37, ^bb40
    %219 = llvm.getelementptr %13[%213] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %220 = llvm.load volatile %219 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %220, %8 : i64, !llvm.ptr
    %c40_i64_109 = arith.constant 40 : i64
    %221 = arith.extui %210 : i32 to i64
    %222 = arith.addi %221, %c40_i64_109 : i64
    %c8_i64_110 = arith.constant 8 : i64
    %223 = arith.addi %222, %c8_i64_110 : i64
    %c0_i32_111 = arith.constant 0 : i32
    %224 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_111) : (!llvm.ptr, i32) -> i32
    %225 = arith.extui %224 : i32 to i64
    %c65536_i64_112 = arith.constant 65536 : i64
    %226 = arith.muli %225, %c65536_i64_112 : i64
    %227 = arith.cmpi ult, %223, %226 : i64
    cf.cond_br %227, ^bb41, ^bb42
  ^bb40:  // pred: ^bb37
    %c1_i32_113 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_113) : (i32) -> ()
    cf.br ^bb39
  ^bb41:  // 2 preds: ^bb39, ^bb42
    %228 = llvm.getelementptr %13[%222] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %220, %228 {alignment = 1 : i64} : i64, !llvm.ptr
    %229 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %230 = arith.addi %229, %c64_i32 : i32
    %c8_i32_114 = arith.constant 8 : i32
    %231 = arith.addi %230, %c8_i32_114 : i32
    %232 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_115 = arith.constant 0 : i64
    %233 = arith.extui %232 : i32 to i64
    %234 = arith.addi %233, %c0_i64_115 : i64
    %c4_i64_116 = arith.constant 4 : i64
    %235 = arith.addi %234, %c4_i64_116 : i64
    %c0_i32_117 = arith.constant 0 : i32
    %236 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_117) : (!llvm.ptr, i32) -> i32
    %237 = arith.extui %236 : i32 to i64
    %c65536_i64_118 = arith.constant 65536 : i64
    %238 = arith.muli %237, %c65536_i64_118 : i64
    %239 = arith.cmpi ult, %235, %238 : i64
    cf.cond_br %239, ^bb43, ^bb44
  ^bb42:  // pred: ^bb39
    %c1_i32_119 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_119) : (i32) -> ()
    cf.br ^bb41
  ^bb43:  // 2 preds: ^bb41, ^bb44
    %240 = llvm.getelementptr %13[%234] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %241 = llvm.load volatile %240 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_120 = arith.constant 0 : i64
    %242 = arith.extui %231 : i32 to i64
    %243 = arith.addi %242, %c0_i64_120 : i64
    %c4_i64_121 = arith.constant 4 : i64
    %244 = arith.addi %243, %c4_i64_121 : i64
    %c0_i32_122 = arith.constant 0 : i32
    %245 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_122) : (!llvm.ptr, i32) -> i32
    %246 = arith.extui %245 : i32 to i64
    %c65536_i64_123 = arith.constant 65536 : i64
    %247 = arith.muli %246, %c65536_i64_123 : i64
    %248 = arith.cmpi ult, %244, %247 : i64
    cf.cond_br %248, ^bb45, ^bb46
  ^bb44:  // pred: ^bb41
    %c1_i32_124 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_124) : (i32) -> ()
    cf.br ^bb43
  ^bb45:  // 2 preds: ^bb43, ^bb46
    %249 = llvm.getelementptr %13[%243] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %241, %249 {alignment = 1 : i64} : i32, !llvm.ptr
    %250 = llvm.load %2 : !llvm.ptr -> i32
    %251 = llvm.load %8 : !llvm.ptr -> i64
    %c64_i64 = arith.constant 64 : i64
    %252 = arith.extui %250 : i32 to i64
    %253 = arith.addi %252, %c64_i64 : i64
    %c8_i64_125 = arith.constant 8 : i64
    %254 = arith.addi %253, %c8_i64_125 : i64
    %c0_i32_126 = arith.constant 0 : i32
    %255 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_126) : (!llvm.ptr, i32) -> i32
    %256 = arith.extui %255 : i32 to i64
    %c65536_i64_127 = arith.constant 65536 : i64
    %257 = arith.muli %256, %c65536_i64_127 : i64
    %258 = arith.cmpi ult, %254, %257 : i64
    cf.cond_br %258, ^bb47, ^bb48
  ^bb46:  // pred: ^bb43
    %c1_i32_128 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_128) : (i32) -> ()
    cf.br ^bb45
  ^bb47:  // 2 preds: ^bb45, ^bb48
    %259 = llvm.getelementptr %13[%253] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %251, %259 {alignment = 1 : i64} : i64, !llvm.ptr
    %260 = llvm.load %2 : !llvm.ptr -> i32
    %c52_i32 = arith.constant 52 : i32
    %261 = arith.addi %260, %c52_i32 : i32
    llvm.store %261, %7 : i32, !llvm.ptr
    call @f89(%arg0, %261) : (!llvm.ptr, i32) -> ()
    %262 = llvm.load %7 : !llvm.ptr -> i32
    call @f90(%arg0, %262) : (!llvm.ptr, i32) -> ()
    %263 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i32_129 = arith.constant 4 : i32
    %264 = arith.addi %263, %c4_i32_129 : i32
    %265 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_130 = arith.constant 64 : i32
    %266 = arith.addi %265, %c64_i32_130 : i32
    call @f86(%arg0, %264, %266) : (!llvm.ptr, i32, i32) -> ()
    %267 = llvm.load %0 : !llvm.ptr -> i32
    %268 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_131 = arith.constant 8 : i64
    %269 = arith.extui %268 : i32 to i64
    %270 = arith.addi %269, %c8_i64_131 : i64
    %c4_i64_132 = arith.constant 4 : i64
    %271 = arith.addi %270, %c4_i64_132 : i64
    %c0_i32_133 = arith.constant 0 : i32
    %272 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_133) : (!llvm.ptr, i32) -> i32
    %273 = arith.extui %272 : i32 to i64
    %c65536_i64_134 = arith.constant 65536 : i64
    %274 = arith.muli %273, %c65536_i64_134 : i64
    %275 = arith.cmpi ult, %271, %274 : i64
    cf.cond_br %275, ^bb49, ^bb50
  ^bb48:  // pred: ^bb45
    %c1_i32_135 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_135) : (i32) -> ()
    cf.br ^bb47
  ^bb49:  // 2 preds: ^bb47, ^bb50
    %276 = llvm.getelementptr %13[%270] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %277 = llvm.load volatile %276 {alignment = 1 : i64} : !llvm.ptr -> i32
    %278 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %279 = arith.extui %278 : i32 to i64
    %280 = arith.addi %279, %c12_i64 : i64
    %c4_i64_136 = arith.constant 4 : i64
    %281 = arith.addi %280, %c4_i64_136 : i64
    %c0_i32_137 = arith.constant 0 : i32
    %282 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_137) : (!llvm.ptr, i32) -> i32
    %283 = arith.extui %282 : i32 to i64
    %c65536_i64_138 = arith.constant 65536 : i64
    %284 = arith.muli %283, %c65536_i64_138 : i64
    %285 = arith.cmpi ult, %281, %284 : i64
    cf.cond_br %285, ^bb51, ^bb52
  ^bb50:  // pred: ^bb47
    %c1_i32_139 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_139) : (i32) -> ()
    cf.br ^bb49
  ^bb51:  // 2 preds: ^bb49, ^bb52
    %286 = llvm.getelementptr %13[%280] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %287 = llvm.load volatile %286 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1048828_i32 = arith.constant 1048828 : i32
    %c25_i32 = arith.constant 25 : i32
    call @f95(%arg0, %267, %277, %287, %c1048828_i32, %c25_i32) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %288 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i32_140 = arith.constant 4 : i32
    %289 = arith.addi %288, %c4_i32_140 : i32
    call @f112(%arg0, %289) : (!llvm.ptr, i32) -> ()
    %290 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i32_141 = arith.constant 4 : i32
    %291 = arith.addi %290, %c4_i32_141 : i32
    call @f113(%arg0, %291) : (!llvm.ptr, i32) -> ()
    %292 = llvm.load %2 : !llvm.ptr -> i32
    %c80_i32_142 = arith.constant 80 : i32
    %293 = arith.addi %292, %c80_i32_142 : i32
    llvm.store %293, %10 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb52:  // pred: ^bb49
    %c1_i32_143 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_143) : (i32) -> ()
    cf.br ^bb51
  ^bb53:  // 2 preds: ^bb6, ^bb54
    %294 = llvm.getelementptr %13[%48] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %295 = llvm.load volatile %294 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f143(%arg0, %45, %295) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb54:  // pred: ^bb6
    %c1_i32_144 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_144) : (i32) -> ()
    cf.br ^bb53
  ^bb55:  // 2 preds: ^bb5, ^bb56
    %296 = llvm.getelementptr %13[%39] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %297 = llvm.load volatile %296 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f143(%arg0, %36, %297) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb56:  // pred: ^bb5
    %c1_i32_145 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_145) : (i32) -> ()
    cf.br ^bb55
  }
  func.func @f43(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %7 : i64, !llvm.ptr
    %8 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %13 = llvm.load %9 : !llvm.ptr -> i32
    %c96_i32 = arith.constant 96 : i32
    %14 = arith.subi %13, %c96_i32 : i32
    llvm.store %14, %2 : i32, !llvm.ptr
    llvm.store %14, %9 : i32, !llvm.ptr
    %c24_i32 = arith.constant 24 : i32
    llvm.store %c24_i32, %3 : i32, !llvm.ptr
    %15 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_7 = arith.constant 24 : i32
    %16 = arith.addi %15, %c24_i32_7 : i32
    llvm.store %16, %4 : i32, !llvm.ptr
    %17 = llvm.load %1 : !llvm.ptr -> i32
    %c88_i32 = arith.constant 88 : i32
    %18 = arith.addi %17, %c88_i32 : i32
    %c0_i64_8 = arith.constant 0 : i64
    %19 = arith.extui %18 : i32 to i64
    %20 = arith.addi %19, %c0_i64_8 : i64
    %c8_i64 = arith.constant 8 : i64
    %21 = arith.addi %20, %c8_i64 : i64
    %c0_i32_9 = arith.constant 0 : i32
    %22 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_9) : (!llvm.ptr, i32) -> i32
    %23 = arith.extui %22 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %24 = arith.muli %23, %c65536_i64 : i64
    %25 = arith.cmpi ult, %21, %24 : i64
    cf.cond_br %25, ^bb3, ^bb4
  ^bb2:  // pred: ^bb88
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %26 = llvm.getelementptr %12[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %27 = llvm.load volatile %26 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_10 = arith.constant 0 : i64
    %28 = arith.extui %16 : i32 to i64
    %29 = arith.addi %28, %c0_i64_10 : i64
    %c8_i64_11 = arith.constant 8 : i64
    %30 = arith.addi %29, %c8_i64_11 : i64
    %c0_i32_12 = arith.constant 0 : i32
    %31 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_12) : (!llvm.ptr, i32) -> i32
    %32 = arith.extui %31 : i32 to i64
    %c65536_i64_13 = arith.constant 65536 : i64
    %33 = arith.muli %32, %c65536_i64_13 : i64
    %34 = arith.cmpi ult, %30, %33 : i64
    cf.cond_br %34, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c1_i32_14 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_14) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %35 = llvm.getelementptr %12[%29] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %27, %35 {alignment = 1 : i64} : i64, !llvm.ptr
    %36 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %37 = arith.addi %36, %c16_i32 : i32
    llvm.store %37, %5 : i32, !llvm.ptr
    %38 = llvm.load %1 : !llvm.ptr -> i32
    %c80_i32 = arith.constant 80 : i32
    %39 = arith.addi %38, %c80_i32 : i32
    %c0_i64_15 = arith.constant 0 : i64
    %40 = arith.extui %39 : i32 to i64
    %41 = arith.addi %40, %c0_i64_15 : i64
    %c8_i64_16 = arith.constant 8 : i64
    %42 = arith.addi %41, %c8_i64_16 : i64
    %c0_i32_17 = arith.constant 0 : i32
    %43 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_17) : (!llvm.ptr, i32) -> i32
    %44 = arith.extui %43 : i32 to i64
    %c65536_i64_18 = arith.constant 65536 : i64
    %45 = arith.muli %44, %c65536_i64_18 : i64
    %46 = arith.cmpi ult, %42, %45 : i64
    cf.cond_br %46, ^bb7, ^bb8
  ^bb6:  // pred: ^bb3
    %c1_i32_19 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_19) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %47 = llvm.getelementptr %12[%41] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %48 = llvm.load volatile %47 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_20 = arith.constant 0 : i64
    %49 = arith.extui %37 : i32 to i64
    %50 = arith.addi %49, %c0_i64_20 : i64
    %c8_i64_21 = arith.constant 8 : i64
    %51 = arith.addi %50, %c8_i64_21 : i64
    %c0_i32_22 = arith.constant 0 : i32
    %52 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_22) : (!llvm.ptr, i32) -> i32
    %53 = arith.extui %52 : i32 to i64
    %c65536_i64_23 = arith.constant 65536 : i64
    %54 = arith.muli %53, %c65536_i64_23 : i64
    %55 = arith.cmpi ult, %51, %54 : i64
    cf.cond_br %55, ^bb9, ^bb10
  ^bb8:  // pred: ^bb5
    %c1_i32_24 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_24) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %56 = llvm.getelementptr %12[%50] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %48, %56 {alignment = 1 : i64} : i64, !llvm.ptr
    %57 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %58 = arith.addi %57, %c8_i32 : i32
    llvm.store %58, %6 : i32, !llvm.ptr
    %59 = llvm.load %1 : !llvm.ptr -> i32
    %c72_i32 = arith.constant 72 : i32
    %60 = arith.addi %59, %c72_i32 : i32
    %c0_i64_25 = arith.constant 0 : i64
    %61 = arith.extui %60 : i32 to i64
    %62 = arith.addi %61, %c0_i64_25 : i64
    %c8_i64_26 = arith.constant 8 : i64
    %63 = arith.addi %62, %c8_i64_26 : i64
    %c0_i32_27 = arith.constant 0 : i32
    %64 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_27) : (!llvm.ptr, i32) -> i32
    %65 = arith.extui %64 : i32 to i64
    %c65536_i64_28 = arith.constant 65536 : i64
    %66 = arith.muli %65, %c65536_i64_28 : i64
    %67 = arith.cmpi ult, %63, %66 : i64
    cf.cond_br %67, ^bb11, ^bb12
  ^bb10:  // pred: ^bb7
    %c1_i32_29 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_29) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %68 = llvm.getelementptr %12[%62] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %69 = llvm.load volatile %68 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_30 = arith.constant 0 : i64
    %70 = arith.extui %58 : i32 to i64
    %71 = arith.addi %70, %c0_i64_30 : i64
    %c8_i64_31 = arith.constant 8 : i64
    %72 = arith.addi %71, %c8_i64_31 : i64
    %c0_i32_32 = arith.constant 0 : i32
    %73 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_32) : (!llvm.ptr, i32) -> i32
    %74 = arith.extui %73 : i32 to i64
    %c65536_i64_33 = arith.constant 65536 : i64
    %75 = arith.muli %74, %c65536_i64_33 : i64
    %76 = arith.cmpi ult, %72, %75 : i64
    cf.cond_br %76, ^bb13, ^bb14
  ^bb12:  // pred: ^bb9
    %c1_i32_34 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_34) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %77 = llvm.getelementptr %12[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %69, %77 {alignment = 1 : i64} : i64, !llvm.ptr
    %78 = llvm.load %2 : !llvm.ptr -> i32
    %79 = llvm.load %1 : !llvm.ptr -> i32
    %c64_i64 = arith.constant 64 : i64
    %80 = arith.extui %79 : i32 to i64
    %81 = arith.addi %80, %c64_i64 : i64
    %c8_i64_35 = arith.constant 8 : i64
    %82 = arith.addi %81, %c8_i64_35 : i64
    %c0_i32_36 = arith.constant 0 : i32
    %83 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_36) : (!llvm.ptr, i32) -> i32
    %84 = arith.extui %83 : i32 to i64
    %c65536_i64_37 = arith.constant 65536 : i64
    %85 = arith.muli %84, %c65536_i64_37 : i64
    %86 = arith.cmpi ult, %82, %85 : i64
    cf.cond_br %86, ^bb15, ^bb16
  ^bb14:  // pred: ^bb11
    %c1_i32_38 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_38) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // 2 preds: ^bb13, ^bb16
    %87 = llvm.getelementptr %12[%81] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %88 = llvm.load volatile %87 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_39 = arith.constant 0 : i64
    %89 = arith.extui %78 : i32 to i64
    %90 = arith.addi %89, %c0_i64_39 : i64
    %c8_i64_40 = arith.constant 8 : i64
    %91 = arith.addi %90, %c8_i64_40 : i64
    %c0_i32_41 = arith.constant 0 : i32
    %92 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_41) : (!llvm.ptr, i32) -> i32
    %93 = arith.extui %92 : i32 to i64
    %c65536_i64_42 = arith.constant 65536 : i64
    %94 = arith.muli %93, %c65536_i64_42 : i64
    %95 = arith.cmpi ult, %91, %94 : i64
    cf.cond_br %95, ^bb17, ^bb18
  ^bb16:  // pred: ^bb13
    %c1_i32_43 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_43) : (i32) -> ()
    cf.br ^bb15
  ^bb17:  // 2 preds: ^bb15, ^bb18
    %96 = llvm.getelementptr %12[%90] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %88, %96 {alignment = 1 : i64} : i64, !llvm.ptr
    %97 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_44 = arith.constant 0 : i32
    %c0_i32_45 = arith.constant 0 : i32
    call @f85(%arg0, %97, %c0_i32_44, %c0_i32_45) : (!llvm.ptr, i32, i32, i32) -> ()
    %98 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %99 = arith.addi %98, %c64_i32 : i32
    %c8_i32_46 = arith.constant 8 : i32
    %100 = arith.addi %99, %c8_i32_46 : i32
    %c0_i64_47 = arith.constant 0 : i64
    %c0_i64_48 = arith.constant 0 : i64
    %101 = arith.extui %100 : i32 to i64
    %102 = arith.addi %101, %c0_i64_48 : i64
    %c8_i64_49 = arith.constant 8 : i64
    %103 = arith.addi %102, %c8_i64_49 : i64
    %c0_i32_50 = arith.constant 0 : i32
    %104 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_50) : (!llvm.ptr, i32) -> i32
    %105 = arith.extui %104 : i32 to i64
    %c65536_i64_51 = arith.constant 65536 : i64
    %106 = arith.muli %105, %c65536_i64_51 : i64
    %107 = arith.cmpi ult, %103, %106 : i64
    cf.cond_br %107, ^bb19, ^bb20
  ^bb18:  // pred: ^bb15
    %c1_i32_52 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_52) : (i32) -> ()
    cf.br ^bb17
  ^bb19:  // 2 preds: ^bb17, ^bb20
    %108 = llvm.getelementptr %12[%102] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_47, %108 {alignment = 1 : i64} : i64, !llvm.ptr
    %109 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_53 = arith.constant 64 : i32
    %110 = arith.addi %109, %c64_i32_53 : i32
    %c16_i32_54 = arith.constant 16 : i32
    %111 = arith.addi %110, %c16_i32_54 : i32
    %c0_i64_55 = arith.constant 0 : i64
    %c0_i64_56 = arith.constant 0 : i64
    %112 = arith.extui %111 : i32 to i64
    %113 = arith.addi %112, %c0_i64_56 : i64
    %c8_i64_57 = arith.constant 8 : i64
    %114 = arith.addi %113, %c8_i64_57 : i64
    %c0_i32_58 = arith.constant 0 : i32
    %115 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_58) : (!llvm.ptr, i32) -> i32
    %116 = arith.extui %115 : i32 to i64
    %c65536_i64_59 = arith.constant 65536 : i64
    %117 = arith.muli %116, %c65536_i64_59 : i64
    %118 = arith.cmpi ult, %114, %117 : i64
    cf.cond_br %118, ^bb21, ^bb22
  ^bb20:  // pred: ^bb17
    %c1_i32_60 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_60) : (i32) -> ()
    cf.br ^bb19
  ^bb21:  // 2 preds: ^bb19, ^bb22
    %119 = llvm.getelementptr %12[%113] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_55, %119 {alignment = 1 : i64} : i64, !llvm.ptr
    %120 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_61 = arith.constant 64 : i32
    %121 = arith.addi %120, %c64_i32_61 : i32
    %c24_i32_62 = arith.constant 24 : i32
    %122 = arith.addi %121, %c24_i32_62 : i32
    %c0_i64_63 = arith.constant 0 : i64
    %c0_i64_64 = arith.constant 0 : i64
    %123 = arith.extui %122 : i32 to i64
    %124 = arith.addi %123, %c0_i64_64 : i64
    %c8_i64_65 = arith.constant 8 : i64
    %125 = arith.addi %124, %c8_i64_65 : i64
    %c0_i32_66 = arith.constant 0 : i32
    %126 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_66) : (!llvm.ptr, i32) -> i32
    %127 = arith.extui %126 : i32 to i64
    %c65536_i64_67 = arith.constant 65536 : i64
    %128 = arith.muli %127, %c65536_i64_67 : i64
    %129 = arith.cmpi ult, %125, %128 : i64
    cf.cond_br %129, ^bb23, ^bb24
  ^bb22:  // pred: ^bb19
    %c1_i32_68 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_68) : (i32) -> ()
    cf.br ^bb21
  ^bb23:  // 2 preds: ^bb21, ^bb24
    %130 = llvm.getelementptr %12[%124] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_63, %130 {alignment = 1 : i64} : i64, !llvm.ptr
    %131 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %132 = arith.addi %131, %c32_i32 : i32
    %c24_i32_69 = arith.constant 24 : i32
    %133 = arith.addi %132, %c24_i32_69 : i32
    %134 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_70 = arith.constant 0 : i64
    %135 = arith.extui %134 : i32 to i64
    %136 = arith.addi %135, %c0_i64_70 : i64
    %c8_i64_71 = arith.constant 8 : i64
    %137 = arith.addi %136, %c8_i64_71 : i64
    %c0_i32_72 = arith.constant 0 : i32
    %138 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_72) : (!llvm.ptr, i32) -> i32
    %139 = arith.extui %138 : i32 to i64
    %c65536_i64_73 = arith.constant 65536 : i64
    %140 = arith.muli %139, %c65536_i64_73 : i64
    %141 = arith.cmpi ult, %137, %140 : i64
    cf.cond_br %141, ^bb25, ^bb26
  ^bb24:  // pred: ^bb21
    %c1_i32_74 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_74) : (i32) -> ()
    cf.br ^bb23
  ^bb25:  // 2 preds: ^bb23, ^bb26
    %142 = llvm.getelementptr %12[%136] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %143 = llvm.load volatile %142 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_75 = arith.constant 0 : i64
    %144 = arith.extui %133 : i32 to i64
    %145 = arith.addi %144, %c0_i64_75 : i64
    %c8_i64_76 = arith.constant 8 : i64
    %146 = arith.addi %145, %c8_i64_76 : i64
    %c0_i32_77 = arith.constant 0 : i32
    %147 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_77) : (!llvm.ptr, i32) -> i32
    %148 = arith.extui %147 : i32 to i64
    %c65536_i64_78 = arith.constant 65536 : i64
    %149 = arith.muli %148, %c65536_i64_78 : i64
    %150 = arith.cmpi ult, %146, %149 : i64
    cf.cond_br %150, ^bb27, ^bb28
  ^bb26:  // pred: ^bb23
    %c1_i32_79 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_79) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // 2 preds: ^bb25, ^bb28
    %151 = llvm.getelementptr %12[%145] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %143, %151 {alignment = 1 : i64} : i64, !llvm.ptr
    %152 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32_80 = arith.constant 32 : i32
    %153 = arith.addi %152, %c32_i32_80 : i32
    %c16_i32_81 = arith.constant 16 : i32
    %154 = arith.addi %153, %c16_i32_81 : i32
    %155 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64_82 = arith.constant 0 : i64
    %156 = arith.extui %155 : i32 to i64
    %157 = arith.addi %156, %c0_i64_82 : i64
    %c8_i64_83 = arith.constant 8 : i64
    %158 = arith.addi %157, %c8_i64_83 : i64
    %c0_i32_84 = arith.constant 0 : i32
    %159 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_84) : (!llvm.ptr, i32) -> i32
    %160 = arith.extui %159 : i32 to i64
    %c65536_i64_85 = arith.constant 65536 : i64
    %161 = arith.muli %160, %c65536_i64_85 : i64
    %162 = arith.cmpi ult, %158, %161 : i64
    cf.cond_br %162, ^bb29, ^bb30
  ^bb28:  // pred: ^bb25
    %c1_i32_86 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_86) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // 2 preds: ^bb27, ^bb30
    %163 = llvm.getelementptr %12[%157] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %164 = llvm.load volatile %163 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_87 = arith.constant 0 : i64
    %165 = arith.extui %154 : i32 to i64
    %166 = arith.addi %165, %c0_i64_87 : i64
    %c8_i64_88 = arith.constant 8 : i64
    %167 = arith.addi %166, %c8_i64_88 : i64
    %c0_i32_89 = arith.constant 0 : i32
    %168 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_89) : (!llvm.ptr, i32) -> i32
    %169 = arith.extui %168 : i32 to i64
    %c65536_i64_90 = arith.constant 65536 : i64
    %170 = arith.muli %169, %c65536_i64_90 : i64
    %171 = arith.cmpi ult, %167, %170 : i64
    cf.cond_br %171, ^bb31, ^bb32
  ^bb30:  // pred: ^bb27
    %c1_i32_91 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_91) : (i32) -> ()
    cf.br ^bb29
  ^bb31:  // 2 preds: ^bb29, ^bb32
    %172 = llvm.getelementptr %12[%166] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %164, %172 {alignment = 1 : i64} : i64, !llvm.ptr
    %173 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32_92 = arith.constant 32 : i32
    %174 = arith.addi %173, %c32_i32_92 : i32
    %c8_i32_93 = arith.constant 8 : i32
    %175 = arith.addi %174, %c8_i32_93 : i32
    %176 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_94 = arith.constant 0 : i64
    %177 = arith.extui %176 : i32 to i64
    %178 = arith.addi %177, %c0_i64_94 : i64
    %c8_i64_95 = arith.constant 8 : i64
    %179 = arith.addi %178, %c8_i64_95 : i64
    %c0_i32_96 = arith.constant 0 : i32
    %180 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_96) : (!llvm.ptr, i32) -> i32
    %181 = arith.extui %180 : i32 to i64
    %c65536_i64_97 = arith.constant 65536 : i64
    %182 = arith.muli %181, %c65536_i64_97 : i64
    %183 = arith.cmpi ult, %179, %182 : i64
    cf.cond_br %183, ^bb33, ^bb34
  ^bb32:  // pred: ^bb29
    %c1_i32_98 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_98) : (i32) -> ()
    cf.br ^bb31
  ^bb33:  // 2 preds: ^bb31, ^bb34
    %184 = llvm.getelementptr %12[%178] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %185 = llvm.load volatile %184 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_99 = arith.constant 0 : i64
    %186 = arith.extui %175 : i32 to i64
    %187 = arith.addi %186, %c0_i64_99 : i64
    %c8_i64_100 = arith.constant 8 : i64
    %188 = arith.addi %187, %c8_i64_100 : i64
    %c0_i32_101 = arith.constant 0 : i32
    %189 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_101) : (!llvm.ptr, i32) -> i32
    %190 = arith.extui %189 : i32 to i64
    %c65536_i64_102 = arith.constant 65536 : i64
    %191 = arith.muli %190, %c65536_i64_102 : i64
    %192 = arith.cmpi ult, %188, %191 : i64
    cf.cond_br %192, ^bb35, ^bb36
  ^bb34:  // pred: ^bb31
    %c1_i32_103 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_103) : (i32) -> ()
    cf.br ^bb33
  ^bb35:  // 2 preds: ^bb33, ^bb36
    %193 = llvm.getelementptr %12[%187] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %185, %193 {alignment = 1 : i64} : i64, !llvm.ptr
    %194 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_104 = arith.constant 0 : i64
    %c64_i64_105 = arith.constant 64 : i64
    %195 = arith.extui %194 : i32 to i64
    %196 = arith.addi %195, %c64_i64_105 : i64
    %c8_i64_106 = arith.constant 8 : i64
    %197 = arith.addi %196, %c8_i64_106 : i64
    %c0_i32_107 = arith.constant 0 : i32
    %198 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_107) : (!llvm.ptr, i32) -> i32
    %199 = arith.extui %198 : i32 to i64
    %c65536_i64_108 = arith.constant 65536 : i64
    %200 = arith.muli %199, %c65536_i64_108 : i64
    %201 = arith.cmpi ult, %197, %200 : i64
    cf.cond_br %201, ^bb37, ^bb38
  ^bb36:  // pred: ^bb33
    %c1_i32_109 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_109) : (i32) -> ()
    cf.br ^bb35
  ^bb37:  // 2 preds: ^bb35, ^bb38
    %202 = llvm.getelementptr %12[%196] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_104, %202 {alignment = 1 : i64} : i64, !llvm.ptr
    %203 = llvm.load %2 : !llvm.ptr -> i32
    %204 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_110 = arith.constant 0 : i64
    %205 = arith.extui %204 : i32 to i64
    %206 = arith.addi %205, %c0_i64_110 : i64
    %c8_i64_111 = arith.constant 8 : i64
    %207 = arith.addi %206, %c8_i64_111 : i64
    %c0_i32_112 = arith.constant 0 : i32
    %208 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_112) : (!llvm.ptr, i32) -> i32
    %209 = arith.extui %208 : i32 to i64
    %c65536_i64_113 = arith.constant 65536 : i64
    %210 = arith.muli %209, %c65536_i64_113 : i64
    %211 = arith.cmpi ult, %207, %210 : i64
    cf.cond_br %211, ^bb39, ^bb40
  ^bb38:  // pred: ^bb35
    %c1_i32_114 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_114) : (i32) -> ()
    cf.br ^bb37
  ^bb39:  // 2 preds: ^bb37, ^bb40
    %212 = llvm.getelementptr %12[%206] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %213 = llvm.load volatile %212 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c32_i64 = arith.constant 32 : i64
    %214 = arith.extui %203 : i32 to i64
    %215 = arith.addi %214, %c32_i64 : i64
    %c8_i64_115 = arith.constant 8 : i64
    %216 = arith.addi %215, %c8_i64_115 : i64
    %c0_i32_116 = arith.constant 0 : i32
    %217 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_116) : (!llvm.ptr, i32) -> i32
    %218 = arith.extui %217 : i32 to i64
    %c65536_i64_117 = arith.constant 65536 : i64
    %219 = arith.muli %218, %c65536_i64_117 : i64
    %220 = arith.cmpi ult, %216, %219 : i64
    cf.cond_br %220, ^bb41, ^bb42
  ^bb40:  // pred: ^bb37
    %c1_i32_118 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_118) : (i32) -> ()
    cf.br ^bb39
  ^bb41:  // 2 preds: ^bb39, ^bb42
    %221 = llvm.getelementptr %12[%215] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %213, %221 {alignment = 1 : i64} : i64, !llvm.ptr
    %222 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_119 = arith.constant 64 : i32
    %223 = arith.addi %222, %c64_i32_119 : i32
    llvm.store %223, %4 : i32, !llvm.ptr
    cf.br ^bb44
  ^bb42:  // pred: ^bb39
    %c1_i32_120 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_120) : (i32) -> ()
    cf.br ^bb41
  ^bb43:  // pred: ^bb49
    %224 = llvm.load %0 : !llvm.ptr -> i32
    %225 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i64_121 = arith.constant 64 : i64
    %226 = arith.extui %225 : i32 to i64
    %227 = arith.addi %226, %c64_i64_121 : i64
    %c8_i64_122 = arith.constant 8 : i64
    %228 = arith.addi %227, %c8_i64_122 : i64
    %c0_i32_123 = arith.constant 0 : i32
    %229 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_123) : (!llvm.ptr, i32) -> i32
    %230 = arith.extui %229 : i32 to i64
    %c65536_i64_124 = arith.constant 65536 : i64
    %231 = arith.muli %230, %c65536_i64_124 : i64
    %232 = arith.cmpi ult, %228, %231 : i64
    cf.cond_br %232, ^bb50, ^bb51
  ^bb44:  // 2 preds: ^bb41, ^bb47
    %233 = llvm.load %4 : !llvm.ptr -> i32
    %234 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32_125 = arith.constant 32 : i32
    %235 = arith.addi %234, %c32_i32_125 : i32
    %236 = llvm.load %3 : !llvm.ptr -> i32
    %237 = arith.addi %235, %236 : i32
    %c0_i64_126 = arith.constant 0 : i64
    %238 = arith.extui %237 : i32 to i64
    %239 = arith.addi %238, %c0_i64_126 : i64
    %c8_i64_127 = arith.constant 8 : i64
    %240 = arith.addi %239, %c8_i64_127 : i64
    %c0_i32_128 = arith.constant 0 : i32
    %241 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_128) : (!llvm.ptr, i32) -> i32
    %242 = arith.extui %241 : i32 to i64
    %c65536_i64_129 = arith.constant 65536 : i64
    %243 = arith.muli %242, %c65536_i64_129 : i64
    %244 = arith.cmpi ult, %240, %243 : i64
    cf.cond_br %244, ^bb45, ^bb46
  ^bb45:  // 2 preds: ^bb44, ^bb46
    %245 = llvm.getelementptr %12[%239] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %246 = llvm.load volatile %245 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %246, %7 : i64, !llvm.ptr
    %c56_i64 = arith.constant 56 : i64
    %c63_i64 = arith.constant 63 : i64
    %247 = arith.cmpi ule, %c56_i64, %c63_i64 : i64
    %248 = scf.if %247 -> (i64) {
      %499 = arith.shli %246, %c56_i64 : i64
      scf.yield %499 : i64
    } else {
      %c0_i64_257 = arith.constant 0 : i64
      scf.yield %c0_i64_257 : i64
    }
    %249 = llvm.load %7 : !llvm.ptr -> i64
    %c65280_i64 = arith.constant 65280 : i64
    %250 = arith.andi %249, %c65280_i64 : i64
    %c40_i64 = arith.constant 40 : i64
    %c63_i64_130 = arith.constant 63 : i64
    %251 = arith.cmpi ule, %c40_i64, %c63_i64_130 : i64
    %252 = scf.if %251 -> (i64) {
      %499 = arith.shli %250, %c40_i64 : i64
      scf.yield %499 : i64
    } else {
      %c0_i64_257 = arith.constant 0 : i64
      scf.yield %c0_i64_257 : i64
    }
    %253 = arith.ori %248, %252 : i64
    %254 = llvm.load %7 : !llvm.ptr -> i64
    %c16711680_i64 = arith.constant 16711680 : i64
    %255 = arith.andi %254, %c16711680_i64 : i64
    %c24_i64 = arith.constant 24 : i64
    %c63_i64_131 = arith.constant 63 : i64
    %256 = arith.cmpi ule, %c24_i64, %c63_i64_131 : i64
    %257 = scf.if %256 -> (i64) {
      %499 = arith.shli %255, %c24_i64 : i64
      scf.yield %499 : i64
    } else {
      %c0_i64_257 = arith.constant 0 : i64
      scf.yield %c0_i64_257 : i64
    }
    %258 = llvm.load %7 : !llvm.ptr -> i64
    %c4278190080_i64 = arith.constant 4278190080 : i64
    %259 = arith.andi %258, %c4278190080_i64 : i64
    %c8_i64_132 = arith.constant 8 : i64
    %c63_i64_133 = arith.constant 63 : i64
    %260 = arith.cmpi ule, %c8_i64_132, %c63_i64_133 : i64
    %261 = scf.if %260 -> (i64) {
      %499 = arith.shli %259, %c8_i64_132 : i64
      scf.yield %499 : i64
    } else {
      %c0_i64_257 = arith.constant 0 : i64
      scf.yield %c0_i64_257 : i64
    }
    %262 = arith.ori %257, %261 : i64
    %263 = arith.ori %253, %262 : i64
    %264 = llvm.load %7 : !llvm.ptr -> i64
    %c8_i64_134 = arith.constant 8 : i64
    %c63_i64_135 = arith.constant 63 : i64
    %265 = arith.cmpi ule, %c8_i64_134, %c63_i64_135 : i64
    %266 = scf.if %265 -> (i64) {
      %499 = arith.shrui %264, %c8_i64_134 : i64
      scf.yield %499 : i64
    } else {
      %c0_i64_257 = arith.constant 0 : i64
      scf.yield %c0_i64_257 : i64
    }
    %c4278190080_i64_136 = arith.constant 4278190080 : i64
    %267 = arith.andi %266, %c4278190080_i64_136 : i64
    %268 = llvm.load %7 : !llvm.ptr -> i64
    %c24_i64_137 = arith.constant 24 : i64
    %c63_i64_138 = arith.constant 63 : i64
    %269 = arith.cmpi ule, %c24_i64_137, %c63_i64_138 : i64
    %270 = scf.if %269 -> (i64) {
      %499 = arith.shrui %268, %c24_i64_137 : i64
      scf.yield %499 : i64
    } else {
      %c0_i64_257 = arith.constant 0 : i64
      scf.yield %c0_i64_257 : i64
    }
    %c16711680_i64_139 = arith.constant 16711680 : i64
    %271 = arith.andi %270, %c16711680_i64_139 : i64
    %272 = arith.ori %267, %271 : i64
    %273 = llvm.load %7 : !llvm.ptr -> i64
    %c40_i64_140 = arith.constant 40 : i64
    %c63_i64_141 = arith.constant 63 : i64
    %274 = arith.cmpi ule, %c40_i64_140, %c63_i64_141 : i64
    %275 = scf.if %274 -> (i64) {
      %499 = arith.shrui %273, %c40_i64_140 : i64
      scf.yield %499 : i64
    } else {
      %c0_i64_257 = arith.constant 0 : i64
      scf.yield %c0_i64_257 : i64
    }
    %c65280_i64_142 = arith.constant 65280 : i64
    %276 = arith.andi %275, %c65280_i64_142 : i64
    %277 = llvm.load %7 : !llvm.ptr -> i64
    %c56_i64_143 = arith.constant 56 : i64
    %c63_i64_144 = arith.constant 63 : i64
    %278 = arith.cmpi ule, %c56_i64_143, %c63_i64_144 : i64
    %279 = scf.if %278 -> (i64) {
      %499 = arith.shrui %277, %c56_i64_143 : i64
      scf.yield %499 : i64
    } else {
      %c0_i64_257 = arith.constant 0 : i64
      scf.yield %c0_i64_257 : i64
    }
    %280 = arith.ori %276, %279 : i64
    %281 = arith.ori %272, %280 : i64
    %282 = arith.ori %263, %281 : i64
    %c0_i64_145 = arith.constant 0 : i64
    %283 = arith.extui %233 : i32 to i64
    %284 = arith.addi %283, %c0_i64_145 : i64
    %c8_i64_146 = arith.constant 8 : i64
    %285 = arith.addi %284, %c8_i64_146 : i64
    %c0_i32_147 = arith.constant 0 : i32
    %286 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_147) : (!llvm.ptr, i32) -> i32
    %287 = arith.extui %286 : i32 to i64
    %c65536_i64_148 = arith.constant 65536 : i64
    %288 = arith.muli %287, %c65536_i64_148 : i64
    %289 = arith.cmpi ult, %285, %288 : i64
    cf.cond_br %289, ^bb47, ^bb48
  ^bb46:  // pred: ^bb44
    %c1_i32_149 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_149) : (i32) -> ()
    cf.br ^bb45
  ^bb47:  // 2 preds: ^bb45, ^bb48
    %290 = llvm.getelementptr %12[%284] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %282, %290 {alignment = 1 : i64} : i64, !llvm.ptr
    %291 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i32_150 = arith.constant 8 : i32
    %292 = arith.addi %291, %c8_i32_150 : i32
    llvm.store %292, %4 : i32, !llvm.ptr
    %293 = llvm.load %3 : !llvm.ptr -> i32
    %c-8_i32 = arith.constant -8 : i32
    %294 = arith.addi %293, %c-8_i32 : i32
    llvm.store %294, %3 : i32, !llvm.ptr
    %c-8_i32_151 = arith.constant -8 : i32
    %295 = arith.cmpi eq, %294, %c-8_i32_151 : i32
    %296 = arith.extui %295 : i1 to i32
    %c0_i32_152 = arith.constant 0 : i32
    %297 = arith.cmpi eq, %296, %c0_i32_152 : i32
    %298 = arith.extui %297 : i1 to i32
    %c0_i32_153 = arith.constant 0 : i32
    %299 = arith.cmpi ne, %298, %c0_i32_153 : i32
    cf.cond_br %299, ^bb44, ^bb49
  ^bb48:  // pred: ^bb45
    %c1_i32_154 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_154) : (i32) -> ()
    cf.br ^bb47
  ^bb49:  // pred: ^bb47
    cf.br ^bb43
  ^bb50:  // 2 preds: ^bb43, ^bb51
    %300 = llvm.getelementptr %12[%227] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %301 = llvm.load volatile %300 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c40_i64_155 = arith.constant 40 : i64
    %302 = arith.extui %224 : i32 to i64
    %303 = arith.addi %302, %c40_i64_155 : i64
    %c8_i64_156 = arith.constant 8 : i64
    %304 = arith.addi %303, %c8_i64_156 : i64
    %c0_i32_157 = arith.constant 0 : i32
    %305 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_157) : (!llvm.ptr, i32) -> i32
    %306 = arith.extui %305 : i32 to i64
    %c65536_i64_158 = arith.constant 65536 : i64
    %307 = arith.muli %306, %c65536_i64_158 : i64
    %308 = arith.cmpi ult, %304, %307 : i64
    cf.cond_br %308, ^bb52, ^bb53
  ^bb51:  // pred: ^bb43
    %c1_i32_159 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_159) : (i32) -> ()
    cf.br ^bb50
  ^bb52:  // 2 preds: ^bb50, ^bb53
    %309 = llvm.getelementptr %12[%303] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %301, %309 {alignment = 1 : i64} : i64, !llvm.ptr
    %310 = llvm.load %0 : !llvm.ptr -> i32
    %311 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %312 = arith.extui %311 : i32 to i64
    %313 = arith.addi %312, %c12_i64 : i64
    %c8_i64_160 = arith.constant 8 : i64
    %314 = arith.addi %313, %c8_i64_160 : i64
    %c0_i32_161 = arith.constant 0 : i32
    %315 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_161) : (!llvm.ptr, i32) -> i32
    %316 = arith.extui %315 : i32 to i64
    %c65536_i64_162 = arith.constant 65536 : i64
    %317 = arith.muli %316, %c65536_i64_162 : i64
    %318 = arith.cmpi ult, %314, %317 : i64
    cf.cond_br %318, ^bb54, ^bb55
  ^bb53:  // pred: ^bb50
    %c1_i32_163 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_163) : (i32) -> ()
    cf.br ^bb52
  ^bb54:  // 2 preds: ^bb52, ^bb55
    %319 = llvm.getelementptr %12[%313] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %320 = llvm.load volatile %319 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_164 = arith.constant 0 : i64
    %321 = arith.extui %310 : i32 to i64
    %322 = arith.addi %321, %c0_i64_164 : i64
    %c8_i64_165 = arith.constant 8 : i64
    %323 = arith.addi %322, %c8_i64_165 : i64
    %c0_i32_166 = arith.constant 0 : i32
    %324 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_166) : (!llvm.ptr, i32) -> i32
    %325 = arith.extui %324 : i32 to i64
    %c65536_i64_167 = arith.constant 65536 : i64
    %326 = arith.muli %325, %c65536_i64_167 : i64
    %327 = arith.cmpi ult, %323, %326 : i64
    cf.cond_br %327, ^bb56, ^bb57
  ^bb55:  // pred: ^bb52
    %c1_i32_168 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_168) : (i32) -> ()
    cf.br ^bb54
  ^bb56:  // 2 preds: ^bb54, ^bb57
    %328 = llvm.getelementptr %12[%322] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %320, %328 {alignment = 1 : i64} : i64, !llvm.ptr
    %329 = llvm.load %0 : !llvm.ptr -> i32
    %330 = llvm.load %1 : !llvm.ptr -> i32
    %c44_i64 = arith.constant 44 : i64
    %331 = arith.extui %330 : i32 to i64
    %332 = arith.addi %331, %c44_i64 : i64
    %c8_i64_169 = arith.constant 8 : i64
    %333 = arith.addi %332, %c8_i64_169 : i64
    %c0_i32_170 = arith.constant 0 : i32
    %334 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_170) : (!llvm.ptr, i32) -> i32
    %335 = arith.extui %334 : i32 to i64
    %c65536_i64_171 = arith.constant 65536 : i64
    %336 = arith.muli %335, %c65536_i64_171 : i64
    %337 = arith.cmpi ult, %333, %336 : i64
    cf.cond_br %337, ^bb58, ^bb59
  ^bb57:  // pred: ^bb54
    %c1_i32_172 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_172) : (i32) -> ()
    cf.br ^bb56
  ^bb58:  // 2 preds: ^bb56, ^bb59
    %338 = llvm.getelementptr %12[%332] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %339 = llvm.load volatile %338 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c20_i64 = arith.constant 20 : i64
    %340 = arith.extui %329 : i32 to i64
    %341 = arith.addi %340, %c20_i64 : i64
    %c8_i64_173 = arith.constant 8 : i64
    %342 = arith.addi %341, %c8_i64_173 : i64
    %c0_i32_174 = arith.constant 0 : i32
    %343 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_174) : (!llvm.ptr, i32) -> i32
    %344 = arith.extui %343 : i32 to i64
    %c65536_i64_175 = arith.constant 65536 : i64
    %345 = arith.muli %344, %c65536_i64_175 : i64
    %346 = arith.cmpi ult, %342, %345 : i64
    cf.cond_br %346, ^bb60, ^bb61
  ^bb59:  // pred: ^bb56
    %c1_i32_176 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_176) : (i32) -> ()
    cf.br ^bb58
  ^bb60:  // 2 preds: ^bb58, ^bb61
    %347 = llvm.getelementptr %12[%341] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %339, %347 {alignment = 1 : i64} : i64, !llvm.ptr
    %348 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_177 = arith.constant 16 : i32
    %349 = arith.addi %348, %c16_i32_177 : i32
    %350 = llvm.load %1 : !llvm.ptr -> i32
    %c28_i32 = arith.constant 28 : i32
    %351 = arith.addi %350, %c28_i32 : i32
    %c0_i64_178 = arith.constant 0 : i64
    %352 = arith.extui %351 : i32 to i64
    %353 = arith.addi %352, %c0_i64_178 : i64
    %c4_i64 = arith.constant 4 : i64
    %354 = arith.addi %353, %c4_i64 : i64
    %c0_i32_179 = arith.constant 0 : i32
    %355 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_179) : (!llvm.ptr, i32) -> i32
    %356 = arith.extui %355 : i32 to i64
    %c65536_i64_180 = arith.constant 65536 : i64
    %357 = arith.muli %356, %c65536_i64_180 : i64
    %358 = arith.cmpi ult, %354, %357 : i64
    cf.cond_br %358, ^bb62, ^bb63
  ^bb61:  // pred: ^bb58
    %c1_i32_181 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_181) : (i32) -> ()
    cf.br ^bb60
  ^bb62:  // 2 preds: ^bb60, ^bb63
    %359 = llvm.getelementptr %12[%353] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %360 = llvm.load volatile %359 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_182 = arith.constant 0 : i64
    %361 = arith.extui %349 : i32 to i64
    %362 = arith.addi %361, %c0_i64_182 : i64
    %c4_i64_183 = arith.constant 4 : i64
    %363 = arith.addi %362, %c4_i64_183 : i64
    %c0_i32_184 = arith.constant 0 : i32
    %364 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_184) : (!llvm.ptr, i32) -> i32
    %365 = arith.extui %364 : i32 to i64
    %c65536_i64_185 = arith.constant 65536 : i64
    %366 = arith.muli %365, %c65536_i64_185 : i64
    %367 = arith.cmpi ult, %363, %366 : i64
    cf.cond_br %367, ^bb64, ^bb65
  ^bb63:  // pred: ^bb60
    %c1_i32_186 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_186) : (i32) -> ()
    cf.br ^bb62
  ^bb64:  // 2 preds: ^bb62, ^bb65
    %368 = llvm.getelementptr %12[%362] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %360, %368 {alignment = 1 : i64} : i32, !llvm.ptr
    %369 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_187 = arith.constant 8 : i32
    %370 = arith.addi %369, %c8_i32_187 : i32
    %371 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i32 = arith.constant 20 : i32
    %372 = arith.addi %371, %c20_i32 : i32
    %c0_i64_188 = arith.constant 0 : i64
    %373 = arith.extui %372 : i32 to i64
    %374 = arith.addi %373, %c0_i64_188 : i64
    %c8_i64_189 = arith.constant 8 : i64
    %375 = arith.addi %374, %c8_i64_189 : i64
    %c0_i32_190 = arith.constant 0 : i32
    %376 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_190) : (!llvm.ptr, i32) -> i32
    %377 = arith.extui %376 : i32 to i64
    %c65536_i64_191 = arith.constant 65536 : i64
    %378 = arith.muli %377, %c65536_i64_191 : i64
    %379 = arith.cmpi ult, %375, %378 : i64
    cf.cond_br %379, ^bb66, ^bb67
  ^bb65:  // pred: ^bb62
    %c1_i32_192 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_192) : (i32) -> ()
    cf.br ^bb64
  ^bb66:  // 2 preds: ^bb64, ^bb67
    %380 = llvm.getelementptr %12[%374] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %381 = llvm.load volatile %380 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_193 = arith.constant 0 : i64
    %382 = arith.extui %370 : i32 to i64
    %383 = arith.addi %382, %c0_i64_193 : i64
    %c8_i64_194 = arith.constant 8 : i64
    %384 = arith.addi %383, %c8_i64_194 : i64
    %c0_i32_195 = arith.constant 0 : i32
    %385 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_195) : (!llvm.ptr, i32) -> i32
    %386 = arith.extui %385 : i32 to i64
    %c65536_i64_196 = arith.constant 65536 : i64
    %387 = arith.muli %386, %c65536_i64_196 : i64
    %388 = arith.cmpi ult, %384, %387 : i64
    cf.cond_br %388, ^bb68, ^bb69
  ^bb67:  // pred: ^bb64
    %c1_i32_197 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_197) : (i32) -> ()
    cf.br ^bb66
  ^bb68:  // 2 preds: ^bb66, ^bb69
    %389 = llvm.getelementptr %12[%383] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %381, %389 {alignment = 1 : i64} : i64, !llvm.ptr
    %390 = llvm.load %0 : !llvm.ptr -> i32
    %c28_i32_198 = arith.constant 28 : i32
    %391 = arith.addi %390, %c28_i32_198 : i32
    %392 = llvm.load %1 : !llvm.ptr -> i32
    %c52_i32 = arith.constant 52 : i32
    %393 = arith.addi %392, %c52_i32 : i32
    %c0_i64_199 = arith.constant 0 : i64
    %394 = arith.extui %393 : i32 to i64
    %395 = arith.addi %394, %c0_i64_199 : i64
    %c8_i64_200 = arith.constant 8 : i64
    %396 = arith.addi %395, %c8_i64_200 : i64
    %c0_i32_201 = arith.constant 0 : i32
    %397 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_201) : (!llvm.ptr, i32) -> i32
    %398 = arith.extui %397 : i32 to i64
    %c65536_i64_202 = arith.constant 65536 : i64
    %399 = arith.muli %398, %c65536_i64_202 : i64
    %400 = arith.cmpi ult, %396, %399 : i64
    cf.cond_br %400, ^bb70, ^bb71
  ^bb69:  // pred: ^bb66
    %c1_i32_203 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_203) : (i32) -> ()
    cf.br ^bb68
  ^bb70:  // 2 preds: ^bb68, ^bb71
    %401 = llvm.getelementptr %12[%395] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %402 = llvm.load volatile %401 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_204 = arith.constant 0 : i64
    %403 = arith.extui %391 : i32 to i64
    %404 = arith.addi %403, %c0_i64_204 : i64
    %c8_i64_205 = arith.constant 8 : i64
    %405 = arith.addi %404, %c8_i64_205 : i64
    %c0_i32_206 = arith.constant 0 : i32
    %406 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_206) : (!llvm.ptr, i32) -> i32
    %407 = arith.extui %406 : i32 to i64
    %c65536_i64_207 = arith.constant 65536 : i64
    %408 = arith.muli %407, %c65536_i64_207 : i64
    %409 = arith.cmpi ult, %405, %408 : i64
    cf.cond_br %409, ^bb72, ^bb73
  ^bb71:  // pred: ^bb68
    %c1_i32_208 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_208) : (i32) -> ()
    cf.br ^bb70
  ^bb72:  // 2 preds: ^bb70, ^bb73
    %410 = llvm.getelementptr %12[%404] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %402, %410 {alignment = 1 : i64} : i64, !llvm.ptr
    %411 = llvm.load %0 : !llvm.ptr -> i32
    %c36_i32 = arith.constant 36 : i32
    %412 = arith.addi %411, %c36_i32 : i32
    %413 = llvm.load %1 : !llvm.ptr -> i32
    %c60_i32 = arith.constant 60 : i32
    %414 = arith.addi %413, %c60_i32 : i32
    %c0_i64_209 = arith.constant 0 : i64
    %415 = arith.extui %414 : i32 to i64
    %416 = arith.addi %415, %c0_i64_209 : i64
    %c4_i64_210 = arith.constant 4 : i64
    %417 = arith.addi %416, %c4_i64_210 : i64
    %c0_i32_211 = arith.constant 0 : i32
    %418 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_211) : (!llvm.ptr, i32) -> i32
    %419 = arith.extui %418 : i32 to i64
    %c65536_i64_212 = arith.constant 65536 : i64
    %420 = arith.muli %419, %c65536_i64_212 : i64
    %421 = arith.cmpi ult, %417, %420 : i64
    cf.cond_br %421, ^bb74, ^bb75
  ^bb73:  // pred: ^bb70
    %c1_i32_213 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_213) : (i32) -> ()
    cf.br ^bb72
  ^bb74:  // 2 preds: ^bb72, ^bb75
    %422 = llvm.getelementptr %12[%416] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %423 = llvm.load volatile %422 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_214 = arith.constant 0 : i64
    %424 = arith.extui %412 : i32 to i64
    %425 = arith.addi %424, %c0_i64_214 : i64
    %c4_i64_215 = arith.constant 4 : i64
    %426 = arith.addi %425, %c4_i64_215 : i64
    %c0_i32_216 = arith.constant 0 : i32
    %427 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_216) : (!llvm.ptr, i32) -> i32
    %428 = arith.extui %427 : i32 to i64
    %c65536_i64_217 = arith.constant 65536 : i64
    %429 = arith.muli %428, %c65536_i64_217 : i64
    %430 = arith.cmpi ult, %426, %429 : i64
    cf.cond_br %430, ^bb76, ^bb77
  ^bb75:  // pred: ^bb72
    %c1_i32_218 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_218) : (i32) -> ()
    cf.br ^bb74
  ^bb76:  // 2 preds: ^bb74, ^bb77
    %431 = llvm.getelementptr %12[%425] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %423, %431 {alignment = 1 : i64} : i32, !llvm.ptr
    %432 = llvm.load %0 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %433 = arith.addi %432, %c48_i32 : i32
    %434 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_219 = arith.constant 64 : i32
    %435 = arith.addi %434, %c64_i32_219 : i32
    %c8_i32_220 = arith.constant 8 : i32
    %436 = arith.addi %435, %c8_i32_220 : i32
    %c0_i64_221 = arith.constant 0 : i64
    %437 = arith.extui %436 : i32 to i64
    %438 = arith.addi %437, %c0_i64_221 : i64
    %c8_i64_222 = arith.constant 8 : i64
    %439 = arith.addi %438, %c8_i64_222 : i64
    %c0_i32_223 = arith.constant 0 : i32
    %440 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_223) : (!llvm.ptr, i32) -> i32
    %441 = arith.extui %440 : i32 to i64
    %c65536_i64_224 = arith.constant 65536 : i64
    %442 = arith.muli %441, %c65536_i64_224 : i64
    %443 = arith.cmpi ult, %439, %442 : i64
    cf.cond_br %443, ^bb78, ^bb79
  ^bb77:  // pred: ^bb74
    %c1_i32_225 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_225) : (i32) -> ()
    cf.br ^bb76
  ^bb78:  // 2 preds: ^bb76, ^bb79
    %444 = llvm.getelementptr %12[%438] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %445 = llvm.load volatile %444 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_226 = arith.constant 0 : i64
    %446 = arith.extui %433 : i32 to i64
    %447 = arith.addi %446, %c0_i64_226 : i64
    %c8_i64_227 = arith.constant 8 : i64
    %448 = arith.addi %447, %c8_i64_227 : i64
    %c0_i32_228 = arith.constant 0 : i32
    %449 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_228) : (!llvm.ptr, i32) -> i32
    %450 = arith.extui %449 : i32 to i64
    %c65536_i64_229 = arith.constant 65536 : i64
    %451 = arith.muli %450, %c65536_i64_229 : i64
    %452 = arith.cmpi ult, %448, %451 : i64
    cf.cond_br %452, ^bb80, ^bb81
  ^bb79:  // pred: ^bb76
    %c1_i32_230 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_230) : (i32) -> ()
    cf.br ^bb78
  ^bb80:  // 2 preds: ^bb78, ^bb81
    %453 = llvm.getelementptr %12[%447] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %445, %453 {alignment = 1 : i64} : i64, !llvm.ptr
    %454 = llvm.load %0 : !llvm.ptr -> i32
    %c56_i32 = arith.constant 56 : i32
    %455 = arith.addi %454, %c56_i32 : i32
    %456 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_231 = arith.constant 64 : i32
    %457 = arith.addi %456, %c64_i32_231 : i32
    %c16_i32_232 = arith.constant 16 : i32
    %458 = arith.addi %457, %c16_i32_232 : i32
    %c0_i64_233 = arith.constant 0 : i64
    %459 = arith.extui %458 : i32 to i64
    %460 = arith.addi %459, %c0_i64_233 : i64
    %c8_i64_234 = arith.constant 8 : i64
    %461 = arith.addi %460, %c8_i64_234 : i64
    %c0_i32_235 = arith.constant 0 : i32
    %462 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_235) : (!llvm.ptr, i32) -> i32
    %463 = arith.extui %462 : i32 to i64
    %c65536_i64_236 = arith.constant 65536 : i64
    %464 = arith.muli %463, %c65536_i64_236 : i64
    %465 = arith.cmpi ult, %461, %464 : i64
    cf.cond_br %465, ^bb82, ^bb83
  ^bb81:  // pred: ^bb78
    %c1_i32_237 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_237) : (i32) -> ()
    cf.br ^bb80
  ^bb82:  // 2 preds: ^bb80, ^bb83
    %466 = llvm.getelementptr %12[%460] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %467 = llvm.load volatile %466 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_238 = arith.constant 0 : i64
    %468 = arith.extui %455 : i32 to i64
    %469 = arith.addi %468, %c0_i64_238 : i64
    %c8_i64_239 = arith.constant 8 : i64
    %470 = arith.addi %469, %c8_i64_239 : i64
    %c0_i32_240 = arith.constant 0 : i32
    %471 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_240) : (!llvm.ptr, i32) -> i32
    %472 = arith.extui %471 : i32 to i64
    %c65536_i64_241 = arith.constant 65536 : i64
    %473 = arith.muli %472, %c65536_i64_241 : i64
    %474 = arith.cmpi ult, %470, %473 : i64
    cf.cond_br %474, ^bb84, ^bb85
  ^bb83:  // pred: ^bb80
    %c1_i32_242 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_242) : (i32) -> ()
    cf.br ^bb82
  ^bb84:  // 2 preds: ^bb82, ^bb85
    %475 = llvm.getelementptr %12[%469] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %467, %475 {alignment = 1 : i64} : i64, !llvm.ptr
    %476 = llvm.load %0 : !llvm.ptr -> i32
    %c64_i32_243 = arith.constant 64 : i32
    %477 = arith.addi %476, %c64_i32_243 : i32
    %478 = llvm.load %2 : !llvm.ptr -> i32
    %c88_i32_244 = arith.constant 88 : i32
    %479 = arith.addi %478, %c88_i32_244 : i32
    %c0_i64_245 = arith.constant 0 : i64
    %480 = arith.extui %479 : i32 to i64
    %481 = arith.addi %480, %c0_i64_245 : i64
    %c8_i64_246 = arith.constant 8 : i64
    %482 = arith.addi %481, %c8_i64_246 : i64
    %c0_i32_247 = arith.constant 0 : i32
    %483 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_247) : (!llvm.ptr, i32) -> i32
    %484 = arith.extui %483 : i32 to i64
    %c65536_i64_248 = arith.constant 65536 : i64
    %485 = arith.muli %484, %c65536_i64_248 : i64
    %486 = arith.cmpi ult, %482, %485 : i64
    cf.cond_br %486, ^bb86, ^bb87
  ^bb85:  // pred: ^bb82
    %c1_i32_249 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_249) : (i32) -> ()
    cf.br ^bb84
  ^bb86:  // 2 preds: ^bb84, ^bb87
    %487 = llvm.getelementptr %12[%481] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %488 = llvm.load volatile %487 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_250 = arith.constant 0 : i64
    %489 = arith.extui %477 : i32 to i64
    %490 = arith.addi %489, %c0_i64_250 : i64
    %c8_i64_251 = arith.constant 8 : i64
    %491 = arith.addi %490, %c8_i64_251 : i64
    %c0_i32_252 = arith.constant 0 : i32
    %492 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_252) : (!llvm.ptr, i32) -> i32
    %493 = arith.extui %492 : i32 to i64
    %c65536_i64_253 = arith.constant 65536 : i64
    %494 = arith.muli %493, %c65536_i64_253 : i64
    %495 = arith.cmpi ult, %491, %494 : i64
    cf.cond_br %495, ^bb88, ^bb89
  ^bb87:  // pred: ^bb84
    %c1_i32_254 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_254) : (i32) -> ()
    cf.br ^bb86
  ^bb88:  // 2 preds: ^bb86, ^bb89
    %496 = llvm.getelementptr %12[%490] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %488, %496 {alignment = 1 : i64} : i64, !llvm.ptr
    %497 = llvm.load %2 : !llvm.ptr -> i32
    %c96_i32_255 = arith.constant 96 : i32
    %498 = arith.addi %497, %c96_i32_255 : i32
    llvm.store %498, %9 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb89:  // pred: ^bb86
    %c1_i32_256 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_256) : (i32) -> ()
    cf.br ^bb88
  }
  func.func @f44(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %8 : i64, !llvm.ptr
    %9 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %14 = llvm.load %10 : !llvm.ptr -> i32
    %c80_i32 = arith.constant 80 : i32
    %15 = arith.subi %14, %c80_i32 : i32
    llvm.store %15, %2 : i32, !llvm.ptr
    llvm.store %15, %10 : i32, !llvm.ptr
    %16 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32 = arith.constant 40 : i32
    %17 = arith.addi %16, %c40_i32 : i32
    %c1_i32_8 = arith.constant 1 : i32
    %c0_i32_9 = arith.constant 0 : i32
    %c1_i32_10 = arith.constant 1 : i32
    %c32_i32 = arith.constant 32 : i32
    call @f111(%arg0, %17, %c1_i32_8, %c0_i32_9, %c1_i32_10, %c32_i32) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %18 = llvm.load %2 : !llvm.ptr -> i32
    %c44_i64 = arith.constant 44 : i64
    %19 = arith.extui %18 : i32 to i64
    %20 = arith.addi %19, %c44_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %21 = arith.addi %20, %c4_i64 : i64
    %c0_i32_11 = arith.constant 0 : i32
    %22 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_11) : (!llvm.ptr, i32) -> i32
    %23 = arith.extui %22 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %24 = arith.muli %23, %c65536_i64 : i64
    %25 = arith.cmpi ult, %21, %24 : i64
    cf.cond_br %25, ^bb3, ^bb4
  ^bb2:  // pred: ^bb51
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %26 = llvm.getelementptr %13[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %27 = llvm.load volatile %26 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %27, %3 : i32, !llvm.ptr
    %28 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i64 = arith.constant 40 : i64
    %29 = arith.extui %28 : i32 to i64
    %30 = arith.addi %29, %c40_i64 : i64
    %c4_i64_12 = arith.constant 4 : i64
    %31 = arith.addi %30, %c4_i64_12 : i64
    %c0_i32_13 = arith.constant 0 : i32
    %32 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_13) : (!llvm.ptr, i32) -> i32
    %33 = arith.extui %32 : i32 to i64
    %c65536_i64_14 = arith.constant 65536 : i64
    %34 = arith.muli %33, %c65536_i64_14 : i64
    %35 = arith.cmpi ult, %31, %34 : i64
    cf.cond_br %35, ^bb7, ^bb8
  ^bb4:  // pred: ^bb1
    %c1_i32_15 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_15) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // pred: ^bb14
    %36 = llvm.load %5 : !llvm.ptr -> i32
    %37 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i64 = arith.constant 48 : i64
    %38 = arith.extui %37 : i32 to i64
    %39 = arith.addi %38, %c48_i64 : i64
    %c4_i64_16 = arith.constant 4 : i64
    %40 = arith.addi %39, %c4_i64_16 : i64
    %c0_i32_17 = arith.constant 0 : i32
    %41 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_17) : (!llvm.ptr, i32) -> i32
    %42 = arith.extui %41 : i32 to i64
    %c65536_i64_18 = arith.constant 65536 : i64
    %43 = arith.muli %42, %c65536_i64_18 : i64
    %44 = arith.cmpi ult, %40, %43 : i64
    cf.cond_br %44, ^bb55, ^bb56
  ^bb6:  // pred: ^bb7
    %45 = llvm.load %3 : !llvm.ptr -> i32
    %46 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i64_19 = arith.constant 48 : i64
    %47 = arith.extui %46 : i32 to i64
    %48 = arith.addi %47, %c48_i64_19 : i64
    %c4_i64_20 = arith.constant 4 : i64
    %49 = arith.addi %48, %c4_i64_20 : i64
    %c0_i32_21 = arith.constant 0 : i32
    %50 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_21) : (!llvm.ptr, i32) -> i32
    %51 = arith.extui %50 : i32 to i64
    %c65536_i64_22 = arith.constant 65536 : i64
    %52 = arith.muli %51, %c65536_i64_22 : i64
    %53 = arith.cmpi ult, %49, %52 : i64
    cf.cond_br %53, ^bb53, ^bb54
  ^bb7:  // 2 preds: ^bb3, ^bb8
    %54 = llvm.getelementptr %13[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %55 = llvm.load volatile %54 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_23 = arith.constant 1 : i32
    %56 = arith.cmpi eq, %55, %c1_i32_23 : i32
    %57 = arith.extui %56 : i1 to i32
    %c0_i32_24 = arith.constant 0 : i32
    %58 = arith.cmpi ne, %57, %c0_i32_24 : i32
    cf.cond_br %58, ^bb6, ^bb9
  ^bb8:  // pred: ^bb3
    %c1_i32_25 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_25) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // pred: ^bb7
    %59 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i64_26 = arith.constant 48 : i64
    %60 = arith.extui %59 : i32 to i64
    %61 = arith.addi %60, %c48_i64_26 : i64
    %c4_i64_27 = arith.constant 4 : i64
    %62 = arith.addi %61, %c4_i64_27 : i64
    %c0_i32_28 = arith.constant 0 : i32
    %63 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_28) : (!llvm.ptr, i32) -> i32
    %64 = arith.extui %63 : i32 to i64
    %c65536_i64_29 = arith.constant 65536 : i64
    %65 = arith.muli %64, %c65536_i64_29 : i64
    %66 = arith.cmpi ult, %62, %65 : i64
    cf.cond_br %66, ^bb10, ^bb11
  ^bb10:  // 2 preds: ^bb9, ^bb11
    %67 = llvm.getelementptr %13[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %68 = llvm.load volatile %67 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %68, %4 : i32, !llvm.ptr
    %69 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_30 = arith.constant 40 : i32
    %70 = arith.addi %69, %c40_i32_30 : i32
    %c4_i32 = arith.constant 4 : i32
    %c0_i32_31 = arith.constant 0 : i32
    %c4_i32_32 = arith.constant 4 : i32
    %c4_i32_33 = arith.constant 4 : i32
    call @f111(%arg0, %70, %c4_i32, %c0_i32_31, %c4_i32_32, %c4_i32_33) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %71 = llvm.load %2 : !llvm.ptr -> i32
    %c44_i64_34 = arith.constant 44 : i64
    %72 = arith.extui %71 : i32 to i64
    %73 = arith.addi %72, %c44_i64_34 : i64
    %c4_i64_35 = arith.constant 4 : i64
    %74 = arith.addi %73, %c4_i64_35 : i64
    %c0_i32_36 = arith.constant 0 : i32
    %75 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_36) : (!llvm.ptr, i32) -> i32
    %76 = arith.extui %75 : i32 to i64
    %c65536_i64_37 = arith.constant 65536 : i64
    %77 = arith.muli %76, %c65536_i64_37 : i64
    %78 = arith.cmpi ult, %74, %77 : i64
    cf.cond_br %78, ^bb12, ^bb13
  ^bb11:  // pred: ^bb9
    %c1_i32_38 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_38) : (i32) -> ()
    cf.br ^bb10
  ^bb12:  // 2 preds: ^bb10, ^bb13
    %79 = llvm.getelementptr %13[%73] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %80 = llvm.load volatile %79 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %80, %5 : i32, !llvm.ptr
    %81 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i64_39 = arith.constant 40 : i64
    %82 = arith.extui %81 : i32 to i64
    %83 = arith.addi %82, %c40_i64_39 : i64
    %c4_i64_40 = arith.constant 4 : i64
    %84 = arith.addi %83, %c4_i64_40 : i64
    %c0_i32_41 = arith.constant 0 : i32
    %85 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_41) : (!llvm.ptr, i32) -> i32
    %86 = arith.extui %85 : i32 to i64
    %c65536_i64_42 = arith.constant 65536 : i64
    %87 = arith.muli %86, %c65536_i64_42 : i64
    %88 = arith.cmpi ult, %84, %87 : i64
    cf.cond_br %88, ^bb14, ^bb15
  ^bb13:  // pred: ^bb10
    %c1_i32_43 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_43) : (i32) -> ()
    cf.br ^bb12
  ^bb14:  // 2 preds: ^bb12, ^bb15
    %89 = llvm.getelementptr %13[%83] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %90 = llvm.load volatile %89 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_44 = arith.constant 1 : i32
    %91 = arith.cmpi eq, %90, %c1_i32_44 : i32
    %92 = arith.extui %91 : i1 to i32
    %c0_i32_45 = arith.constant 0 : i32
    %93 = arith.cmpi ne, %92, %c0_i32_45 : i32
    cf.cond_br %93, ^bb5, ^bb16
  ^bb15:  // pred: ^bb12
    %c1_i32_46 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_46) : (i32) -> ()
    cf.br ^bb14
  ^bb16:  // pred: ^bb14
    %94 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %95 = arith.addi %94, %c16_i32 : i32
    %c16_i32_47 = arith.constant 16 : i32
    %96 = arith.addi %95, %c16_i32_47 : i32
    llvm.store %96, %6 : i32, !llvm.ptr
    %97 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i64_48 = arith.constant 48 : i64
    %98 = arith.extui %97 : i32 to i64
    %99 = arith.addi %98, %c48_i64_48 : i64
    %c4_i64_49 = arith.constant 4 : i64
    %100 = arith.addi %99, %c4_i64_49 : i64
    %c0_i32_50 = arith.constant 0 : i32
    %101 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_50) : (!llvm.ptr, i32) -> i32
    %102 = arith.extui %101 : i32 to i64
    %c65536_i64_51 = arith.constant 65536 : i64
    %103 = arith.muli %102, %c65536_i64_51 : i64
    %104 = arith.cmpi ult, %100, %103 : i64
    cf.cond_br %104, ^bb17, ^bb18
  ^bb17:  // 2 preds: ^bb16, ^bb18
    %105 = llvm.getelementptr %13[%99] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %106 = llvm.load volatile %105 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_52 = arith.constant 0 : i64
    %107 = arith.extui %96 : i32 to i64
    %108 = arith.addi %107, %c0_i64_52 : i64
    %c4_i64_53 = arith.constant 4 : i64
    %109 = arith.addi %108, %c4_i64_53 : i64
    %c0_i32_54 = arith.constant 0 : i32
    %110 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_54) : (!llvm.ptr, i32) -> i32
    %111 = arith.extui %110 : i32 to i64
    %c65536_i64_55 = arith.constant 65536 : i64
    %112 = arith.muli %111, %c65536_i64_55 : i64
    %113 = arith.cmpi ult, %109, %112 : i64
    cf.cond_br %113, ^bb19, ^bb20
  ^bb18:  // pred: ^bb16
    %c1_i32_56 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_56) : (i32) -> ()
    cf.br ^bb17
  ^bb19:  // 2 preds: ^bb17, ^bb20
    %114 = llvm.getelementptr %13[%108] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %106, %114 {alignment = 1 : i64} : i32, !llvm.ptr
    %115 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_57 = arith.constant 16 : i32
    %116 = arith.addi %115, %c16_i32_57 : i32
    %c8_i32 = arith.constant 8 : i32
    %117 = arith.addi %116, %c8_i32 : i32
    llvm.store %117, %7 : i32, !llvm.ptr
    %c0_i32_58 = arith.constant 0 : i32
    %c0_i64_59 = arith.constant 0 : i64
    %118 = arith.extui %117 : i32 to i64
    %119 = arith.addi %118, %c0_i64_59 : i64
    %c4_i64_60 = arith.constant 4 : i64
    %120 = arith.addi %119, %c4_i64_60 : i64
    %c0_i32_61 = arith.constant 0 : i32
    %121 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_61) : (!llvm.ptr, i32) -> i32
    %122 = arith.extui %121 : i32 to i64
    %c65536_i64_62 = arith.constant 65536 : i64
    %123 = arith.muli %122, %c65536_i64_62 : i64
    %124 = arith.cmpi ult, %120, %123 : i64
    cf.cond_br %124, ^bb21, ^bb22
  ^bb20:  // pred: ^bb17
    %c1_i32_63 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_63) : (i32) -> ()
    cf.br ^bb19
  ^bb21:  // 2 preds: ^bb19, ^bb22
    %125 = llvm.getelementptr %13[%119] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_58, %125 {alignment = 1 : i64} : i32, !llvm.ptr
    %126 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_64 = arith.constant 0 : i32
    %c36_i64 = arith.constant 36 : i64
    %127 = arith.extui %126 : i32 to i64
    %128 = arith.addi %127, %c36_i64 : i64
    %c4_i64_65 = arith.constant 4 : i64
    %129 = arith.addi %128, %c4_i64_65 : i64
    %c0_i32_66 = arith.constant 0 : i32
    %130 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_66) : (!llvm.ptr, i32) -> i32
    %131 = arith.extui %130 : i32 to i64
    %c65536_i64_67 = arith.constant 65536 : i64
    %132 = arith.muli %131, %c65536_i64_67 : i64
    %133 = arith.cmpi ult, %129, %132 : i64
    cf.cond_br %133, ^bb23, ^bb24
  ^bb22:  // pred: ^bb19
    %c1_i32_68 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_68) : (i32) -> ()
    cf.br ^bb21
  ^bb23:  // 2 preds: ^bb21, ^bb24
    %134 = llvm.getelementptr %13[%128] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_64, %134 {alignment = 1 : i64} : i32, !llvm.ptr
    %135 = llvm.load %2 : !llvm.ptr -> i32
    %136 = llvm.load %5 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %137 = arith.extui %135 : i32 to i64
    %138 = arith.addi %137, %c28_i64 : i64
    %c4_i64_69 = arith.constant 4 : i64
    %139 = arith.addi %138, %c4_i64_69 : i64
    %c0_i32_70 = arith.constant 0 : i32
    %140 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_70) : (!llvm.ptr, i32) -> i32
    %141 = arith.extui %140 : i32 to i64
    %c65536_i64_71 = arith.constant 65536 : i64
    %142 = arith.muli %141, %c65536_i64_71 : i64
    %143 = arith.cmpi ult, %139, %142 : i64
    cf.cond_br %143, ^bb25, ^bb26
  ^bb24:  // pred: ^bb21
    %c1_i32_72 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_72) : (i32) -> ()
    cf.br ^bb23
  ^bb25:  // 2 preds: ^bb23, ^bb26
    %144 = llvm.getelementptr %13[%138] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %136, %144 {alignment = 1 : i64} : i32, !llvm.ptr
    %145 = llvm.load %2 : !llvm.ptr -> i32
    %146 = llvm.load %4 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %147 = arith.extui %145 : i32 to i64
    %148 = arith.addi %147, %c20_i64 : i64
    %c4_i64_73 = arith.constant 4 : i64
    %149 = arith.addi %148, %c4_i64_73 : i64
    %c0_i32_74 = arith.constant 0 : i32
    %150 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_74) : (!llvm.ptr, i32) -> i32
    %151 = arith.extui %150 : i32 to i64
    %c65536_i64_75 = arith.constant 65536 : i64
    %152 = arith.muli %151, %c65536_i64_75 : i64
    %153 = arith.cmpi ult, %149, %152 : i64
    cf.cond_br %153, ^bb27, ^bb28
  ^bb26:  // pred: ^bb23
    %c1_i32_76 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_76) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // 2 preds: ^bb25, ^bb28
    %154 = llvm.getelementptr %13[%148] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %146, %154 {alignment = 1 : i64} : i32, !llvm.ptr
    %155 = llvm.load %2 : !llvm.ptr -> i32
    %156 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %157 = arith.extui %155 : i32 to i64
    %158 = arith.addi %157, %c16_i64 : i64
    %c4_i64_77 = arith.constant 4 : i64
    %159 = arith.addi %158, %c4_i64_77 : i64
    %c0_i32_78 = arith.constant 0 : i32
    %160 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_78) : (!llvm.ptr, i32) -> i32
    %161 = arith.extui %160 : i32 to i64
    %c65536_i64_79 = arith.constant 65536 : i64
    %162 = arith.muli %161, %c65536_i64_79 : i64
    %163 = arith.cmpi ult, %159, %162 : i64
    cf.cond_br %163, ^bb29, ^bb30
  ^bb28:  // pred: ^bb25
    %c1_i32_80 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_80) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // 2 preds: ^bb27, ^bb30
    %164 = llvm.getelementptr %13[%158] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %156, %164 {alignment = 1 : i64} : i32, !llvm.ptr
    %165 = llvm.load %1 : !llvm.ptr -> i32
    %166 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_81 = arith.constant 16 : i32
    %167 = arith.addi %166, %c16_i32_81 : i32
    call @f94(%arg0, %165, %167) : (!llvm.ptr, i32, i32) -> ()
    %168 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_82 = arith.constant 40 : i32
    %169 = arith.addi %168, %c40_i32_82 : i32
    %c16_i32_83 = arith.constant 16 : i32
    %170 = arith.addi %169, %c16_i32_83 : i32
    %171 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_84 = arith.constant 0 : i64
    %172 = arith.extui %171 : i32 to i64
    %173 = arith.addi %172, %c0_i64_84 : i64
    %c8_i64 = arith.constant 8 : i64
    %174 = arith.addi %173, %c8_i64 : i64
    %c0_i32_85 = arith.constant 0 : i32
    %175 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_85) : (!llvm.ptr, i32) -> i32
    %176 = arith.extui %175 : i32 to i64
    %c65536_i64_86 = arith.constant 65536 : i64
    %177 = arith.muli %176, %c65536_i64_86 : i64
    %178 = arith.cmpi ult, %174, %177 : i64
    cf.cond_br %178, ^bb31, ^bb32
  ^bb30:  // pred: ^bb27
    %c1_i32_87 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_87) : (i32) -> ()
    cf.br ^bb29
  ^bb31:  // 2 preds: ^bb29, ^bb32
    %179 = llvm.getelementptr %13[%173] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %180 = llvm.load volatile %179 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_88 = arith.constant 0 : i64
    %181 = arith.extui %170 : i32 to i64
    %182 = arith.addi %181, %c0_i64_88 : i64
    %c8_i64_89 = arith.constant 8 : i64
    %183 = arith.addi %182, %c8_i64_89 : i64
    %c0_i32_90 = arith.constant 0 : i32
    %184 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_90) : (!llvm.ptr, i32) -> i32
    %185 = arith.extui %184 : i32 to i64
    %c65536_i64_91 = arith.constant 65536 : i64
    %186 = arith.muli %185, %c65536_i64_91 : i64
    %187 = arith.cmpi ult, %183, %186 : i64
    cf.cond_br %187, ^bb33, ^bb34
  ^bb32:  // pred: ^bb29
    %c1_i32_92 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_92) : (i32) -> ()
    cf.br ^bb31
  ^bb33:  // 2 preds: ^bb31, ^bb34
    %188 = llvm.getelementptr %13[%182] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %180, %188 {alignment = 1 : i64} : i64, !llvm.ptr
    %189 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_93 = arith.constant 40 : i32
    %190 = arith.addi %189, %c40_i32_93 : i32
    %c8_i32_94 = arith.constant 8 : i32
    %191 = arith.addi %190, %c8_i32_94 : i32
    %192 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_95 = arith.constant 0 : i64
    %193 = arith.extui %192 : i32 to i64
    %194 = arith.addi %193, %c0_i64_95 : i64
    %c8_i64_96 = arith.constant 8 : i64
    %195 = arith.addi %194, %c8_i64_96 : i64
    %c0_i32_97 = arith.constant 0 : i32
    %196 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_97) : (!llvm.ptr, i32) -> i32
    %197 = arith.extui %196 : i32 to i64
    %c65536_i64_98 = arith.constant 65536 : i64
    %198 = arith.muli %197, %c65536_i64_98 : i64
    %199 = arith.cmpi ult, %195, %198 : i64
    cf.cond_br %199, ^bb35, ^bb36
  ^bb34:  // pred: ^bb31
    %c1_i32_99 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_99) : (i32) -> ()
    cf.br ^bb33
  ^bb35:  // 2 preds: ^bb33, ^bb36
    %200 = llvm.getelementptr %13[%194] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %201 = llvm.load volatile %200 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_100 = arith.constant 0 : i64
    %202 = arith.extui %191 : i32 to i64
    %203 = arith.addi %202, %c0_i64_100 : i64
    %c8_i64_101 = arith.constant 8 : i64
    %204 = arith.addi %203, %c8_i64_101 : i64
    %c0_i32_102 = arith.constant 0 : i32
    %205 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_102) : (!llvm.ptr, i32) -> i32
    %206 = arith.extui %205 : i32 to i64
    %c65536_i64_103 = arith.constant 65536 : i64
    %207 = arith.muli %206, %c65536_i64_103 : i64
    %208 = arith.cmpi ult, %204, %207 : i64
    cf.cond_br %208, ^bb37, ^bb38
  ^bb36:  // pred: ^bb33
    %c1_i32_104 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_104) : (i32) -> ()
    cf.br ^bb35
  ^bb37:  // 2 preds: ^bb35, ^bb38
    %209 = llvm.getelementptr %13[%203] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %201, %209 {alignment = 1 : i64} : i64, !llvm.ptr
    %210 = llvm.load %2 : !llvm.ptr -> i32
    %211 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i64_105 = arith.constant 16 : i64
    %212 = arith.extui %211 : i32 to i64
    %213 = arith.addi %212, %c16_i64_105 : i64
    %c8_i64_106 = arith.constant 8 : i64
    %214 = arith.addi %213, %c8_i64_106 : i64
    %c0_i32_107 = arith.constant 0 : i32
    %215 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_107) : (!llvm.ptr, i32) -> i32
    %216 = arith.extui %215 : i32 to i64
    %c65536_i64_108 = arith.constant 65536 : i64
    %217 = arith.muli %216, %c65536_i64_108 : i64
    %218 = arith.cmpi ult, %214, %217 : i64
    cf.cond_br %218, ^bb39, ^bb40
  ^bb38:  // pred: ^bb35
    %c1_i32_109 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_109) : (i32) -> ()
    cf.br ^bb37
  ^bb39:  // 2 preds: ^bb37, ^bb40
    %219 = llvm.getelementptr %13[%213] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %220 = llvm.load volatile %219 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %220, %8 : i64, !llvm.ptr
    %c40_i64_110 = arith.constant 40 : i64
    %221 = arith.extui %210 : i32 to i64
    %222 = arith.addi %221, %c40_i64_110 : i64
    %c8_i64_111 = arith.constant 8 : i64
    %223 = arith.addi %222, %c8_i64_111 : i64
    %c0_i32_112 = arith.constant 0 : i32
    %224 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_112) : (!llvm.ptr, i32) -> i32
    %225 = arith.extui %224 : i32 to i64
    %c65536_i64_113 = arith.constant 65536 : i64
    %226 = arith.muli %225, %c65536_i64_113 : i64
    %227 = arith.cmpi ult, %223, %226 : i64
    cf.cond_br %227, ^bb41, ^bb42
  ^bb40:  // pred: ^bb37
    %c1_i32_114 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_114) : (i32) -> ()
    cf.br ^bb39
  ^bb41:  // 2 preds: ^bb39, ^bb42
    %228 = llvm.getelementptr %13[%222] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %220, %228 {alignment = 1 : i64} : i64, !llvm.ptr
    %229 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %230 = arith.addi %229, %c64_i32 : i32
    %c8_i32_115 = arith.constant 8 : i32
    %231 = arith.addi %230, %c8_i32_115 : i32
    %232 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_116 = arith.constant 0 : i64
    %233 = arith.extui %232 : i32 to i64
    %234 = arith.addi %233, %c0_i64_116 : i64
    %c4_i64_117 = arith.constant 4 : i64
    %235 = arith.addi %234, %c4_i64_117 : i64
    %c0_i32_118 = arith.constant 0 : i32
    %236 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_118) : (!llvm.ptr, i32) -> i32
    %237 = arith.extui %236 : i32 to i64
    %c65536_i64_119 = arith.constant 65536 : i64
    %238 = arith.muli %237, %c65536_i64_119 : i64
    %239 = arith.cmpi ult, %235, %238 : i64
    cf.cond_br %239, ^bb43, ^bb44
  ^bb42:  // pred: ^bb39
    %c1_i32_120 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_120) : (i32) -> ()
    cf.br ^bb41
  ^bb43:  // 2 preds: ^bb41, ^bb44
    %240 = llvm.getelementptr %13[%234] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %241 = llvm.load volatile %240 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_121 = arith.constant 0 : i64
    %242 = arith.extui %231 : i32 to i64
    %243 = arith.addi %242, %c0_i64_121 : i64
    %c4_i64_122 = arith.constant 4 : i64
    %244 = arith.addi %243, %c4_i64_122 : i64
    %c0_i32_123 = arith.constant 0 : i32
    %245 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_123) : (!llvm.ptr, i32) -> i32
    %246 = arith.extui %245 : i32 to i64
    %c65536_i64_124 = arith.constant 65536 : i64
    %247 = arith.muli %246, %c65536_i64_124 : i64
    %248 = arith.cmpi ult, %244, %247 : i64
    cf.cond_br %248, ^bb45, ^bb46
  ^bb44:  // pred: ^bb41
    %c1_i32_125 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_125) : (i32) -> ()
    cf.br ^bb43
  ^bb45:  // 2 preds: ^bb43, ^bb46
    %249 = llvm.getelementptr %13[%243] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %241, %249 {alignment = 1 : i64} : i32, !llvm.ptr
    %250 = llvm.load %2 : !llvm.ptr -> i32
    %251 = llvm.load %8 : !llvm.ptr -> i64
    %c64_i64 = arith.constant 64 : i64
    %252 = arith.extui %250 : i32 to i64
    %253 = arith.addi %252, %c64_i64 : i64
    %c8_i64_126 = arith.constant 8 : i64
    %254 = arith.addi %253, %c8_i64_126 : i64
    %c0_i32_127 = arith.constant 0 : i32
    %255 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_127) : (!llvm.ptr, i32) -> i32
    %256 = arith.extui %255 : i32 to i64
    %c65536_i64_128 = arith.constant 65536 : i64
    %257 = arith.muli %256, %c65536_i64_128 : i64
    %258 = arith.cmpi ult, %254, %257 : i64
    cf.cond_br %258, ^bb47, ^bb48
  ^bb46:  // pred: ^bb43
    %c1_i32_129 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_129) : (i32) -> ()
    cf.br ^bb45
  ^bb47:  // 2 preds: ^bb45, ^bb48
    %259 = llvm.getelementptr %13[%253] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %251, %259 {alignment = 1 : i64} : i64, !llvm.ptr
    %260 = llvm.load %2 : !llvm.ptr -> i32
    %c52_i32 = arith.constant 52 : i32
    %261 = arith.addi %260, %c52_i32 : i32
    llvm.store %261, %7 : i32, !llvm.ptr
    call @f89(%arg0, %261) : (!llvm.ptr, i32) -> ()
    %262 = llvm.load %7 : !llvm.ptr -> i32
    call @f90(%arg0, %262) : (!llvm.ptr, i32) -> ()
    %263 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i32_130 = arith.constant 4 : i32
    %264 = arith.addi %263, %c4_i32_130 : i32
    %265 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_131 = arith.constant 64 : i32
    %266 = arith.addi %265, %c64_i32_131 : i32
    call @f86(%arg0, %264, %266) : (!llvm.ptr, i32, i32) -> ()
    %267 = llvm.load %0 : !llvm.ptr -> i32
    %268 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_132 = arith.constant 8 : i64
    %269 = arith.extui %268 : i32 to i64
    %270 = arith.addi %269, %c8_i64_132 : i64
    %c4_i64_133 = arith.constant 4 : i64
    %271 = arith.addi %270, %c4_i64_133 : i64
    %c0_i32_134 = arith.constant 0 : i32
    %272 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_134) : (!llvm.ptr, i32) -> i32
    %273 = arith.extui %272 : i32 to i64
    %c65536_i64_135 = arith.constant 65536 : i64
    %274 = arith.muli %273, %c65536_i64_135 : i64
    %275 = arith.cmpi ult, %271, %274 : i64
    cf.cond_br %275, ^bb49, ^bb50
  ^bb48:  // pred: ^bb45
    %c1_i32_136 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_136) : (i32) -> ()
    cf.br ^bb47
  ^bb49:  // 2 preds: ^bb47, ^bb50
    %276 = llvm.getelementptr %13[%270] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %277 = llvm.load volatile %276 {alignment = 1 : i64} : !llvm.ptr -> i32
    %278 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %279 = arith.extui %278 : i32 to i64
    %280 = arith.addi %279, %c12_i64 : i64
    %c4_i64_137 = arith.constant 4 : i64
    %281 = arith.addi %280, %c4_i64_137 : i64
    %c0_i32_138 = arith.constant 0 : i32
    %282 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_138) : (!llvm.ptr, i32) -> i32
    %283 = arith.extui %282 : i32 to i64
    %c65536_i64_139 = arith.constant 65536 : i64
    %284 = arith.muli %283, %c65536_i64_139 : i64
    %285 = arith.cmpi ult, %281, %284 : i64
    cf.cond_br %285, ^bb51, ^bb52
  ^bb50:  // pred: ^bb47
    %c1_i32_140 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_140) : (i32) -> ()
    cf.br ^bb49
  ^bb51:  // 2 preds: ^bb49, ^bb52
    %286 = llvm.getelementptr %13[%280] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %287 = llvm.load volatile %286 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1049348_i32 = arith.constant 1049348 : i32
    %c9_i32 = arith.constant 9 : i32
    call @f95(%arg0, %267, %277, %287, %c1049348_i32, %c9_i32) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %288 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i32_141 = arith.constant 4 : i32
    %289 = arith.addi %288, %c4_i32_141 : i32
    call @f112(%arg0, %289) : (!llvm.ptr, i32) -> ()
    %290 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i32_142 = arith.constant 4 : i32
    %291 = arith.addi %290, %c4_i32_142 : i32
    call @f113(%arg0, %291) : (!llvm.ptr, i32) -> ()
    %292 = llvm.load %2 : !llvm.ptr -> i32
    %c80_i32_143 = arith.constant 80 : i32
    %293 = arith.addi %292, %c80_i32_143 : i32
    llvm.store %293, %10 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb52:  // pred: ^bb49
    %c1_i32_144 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_144) : (i32) -> ()
    cf.br ^bb51
  ^bb53:  // 2 preds: ^bb6, ^bb54
    %294 = llvm.getelementptr %13[%48] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %295 = llvm.load volatile %294 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f143(%arg0, %45, %295) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb54:  // pred: ^bb6
    %c1_i32_145 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_145) : (i32) -> ()
    cf.br ^bb53
  ^bb55:  // 2 preds: ^bb5, ^bb56
    %296 = llvm.getelementptr %13[%39] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %297 = llvm.load volatile %296 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f143(%arg0, %36, %297) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb56:  // pred: ^bb5
    %c1_i32_146 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_146) : (i32) -> ()
    cf.br ^bb55
  }
  func.func @f45(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %4 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %9 = arith.subi %8, %c16_i32 : i32
    llvm.store %9, %2 : i32, !llvm.ptr
    llvm.store %9, %4 : i32, !llvm.ptr
    %10 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %11 = arith.addi %10, %c4_i32 : i32
    %12 = llvm.load %1 : !llvm.ptr -> i32
    call @f38(%arg0, %11, %12) : (!llvm.ptr, i32, i32) -> ()
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %14 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %15 = arith.extui %14 : i32 to i64
    %16 = arith.addi %15, %c8_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %17 = arith.addi %16, %c4_i64 : i64
    %c0_i32_2 = arith.constant 0 : i32
    %18 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2) : (!llvm.ptr, i32) -> i32
    %19 = arith.extui %18 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %20 = arith.muli %19, %c65536_i64 : i64
    %21 = arith.cmpi ult, %17, %20 : i64
    cf.cond_br %21, ^bb3, ^bb4
  ^bb2:  // pred: ^bb5
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %22 = llvm.getelementptr %7[%16] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %23 = llvm.load volatile %22 {alignment = 1 : i64} : !llvm.ptr -> i32
    %24 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %25 = arith.extui %24 : i32 to i64
    %26 = arith.addi %25, %c12_i64 : i64
    %c4_i64_3 = arith.constant 4 : i64
    %27 = arith.addi %26, %c4_i64_3 : i64
    %c0_i32_4 = arith.constant 0 : i32
    %28 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_4) : (!llvm.ptr, i32) -> i32
    %29 = arith.extui %28 : i32 to i64
    %c65536_i64_5 = arith.constant 65536 : i64
    %30 = arith.muli %29, %c65536_i64_5 : i64
    %31 = arith.cmpi ult, %27, %30 : i64
    cf.cond_br %31, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c1_i32_6 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_6) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %32 = llvm.getelementptr %7[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %33 = llvm.load volatile %32 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1049088_i32 = arith.constant 1049088 : i32
    %c17_i32 = arith.constant 17 : i32
    call @f95(%arg0, %13, %23, %33, %c1049088_i32, %c17_i32) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %34 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i32_7 = arith.constant 4 : i32
    %35 = arith.addi %34, %c4_i32_7 : i32
    call @f112(%arg0, %35) : (!llvm.ptr, i32) -> ()
    %36 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i32_8 = arith.constant 4 : i32
    %37 = arith.addi %36, %c4_i32_8 : i32
    call @f113(%arg0, %37) : (!llvm.ptr, i32) -> ()
    %38 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_9 = arith.constant 16 : i32
    %39 = arith.addi %38, %c16_i32_9 : i32
    llvm.store %39, %4 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb6:  // pred: ^bb3
    %c1_i32_10 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_10) : (i32) -> ()
    cf.br ^bb5
  }
  func.func @f46(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %5 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %9 = arith.extui %8 : i32 to i64
    %10 = arith.addi %9, %c20_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %11 = arith.addi %10, %c4_i64 : i64
    %c0_i32_4 = arith.constant 0 : i32
    %12 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_4) : (!llvm.ptr, i32) -> i32
    %13 = arith.extui %12 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %14 = arith.muli %13, %c65536_i64 : i64
    %15 = arith.cmpi ult, %11, %14 : i64
    cf.cond_br %15, ^bb4, ^bb5
  ^bb2:  // pred: ^bb89
    return
  ^bb3:  // 2 preds: ^bb6, ^bb8
    %16 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %17 = arith.extui %16 : i32 to i64
    %18 = arith.addi %17, %c16_i64 : i64
    %c4_i64_5 = arith.constant 4 : i64
    %19 = arith.addi %18, %c4_i64_5 : i64
    %c0_i32_6 = arith.constant 0 : i32
    %20 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_6) : (!llvm.ptr, i32) -> i32
    %21 = arith.extui %20 : i32 to i64
    %c65536_i64_7 = arith.constant 65536 : i64
    %22 = arith.muli %21, %c65536_i64_7 : i64
    %23 = arith.cmpi ult, %19, %22 : i64
    cf.cond_br %23, ^bb9, ^bb10
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %24 = llvm.getelementptr %7[%10] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %25 = llvm.load volatile %24 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %25, %2 : i32, !llvm.ptr
    %26 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %27 = arith.extui %26 : i32 to i64
    %28 = arith.addi %27, %c12_i64 : i64
    %c4_i64_8 = arith.constant 4 : i64
    %29 = arith.addi %28, %c4_i64_8 : i64
    %c0_i32_9 = arith.constant 0 : i32
    %30 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_9) : (!llvm.ptr, i32) -> i32
    %31 = arith.extui %30 : i32 to i64
    %c65536_i64_10 = arith.constant 65536 : i64
    %32 = arith.muli %31, %c65536_i64_10 : i64
    %33 = arith.cmpi ult, %29, %32 : i64
    cf.cond_br %33, ^bb6, ^bb7
  ^bb5:  // pred: ^bb1
    %c1_i32_11 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_11) : (i32) -> ()
    cf.br ^bb4
  ^bb6:  // 2 preds: ^bb4, ^bb7
    %34 = llvm.getelementptr %7[%28] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %35 = llvm.load volatile %34 {alignment = 1 : i64} : !llvm.ptr -> i32
    %36 = arith.cmpi eq, %25, %35 : i32
    %37 = arith.extui %36 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %38 = arith.cmpi eq, %37, %c0_i32_12 : i32
    %39 = arith.extui %38 : i1 to i32
    %c0_i32_13 = arith.constant 0 : i32
    %40 = arith.cmpi ne, %39, %c0_i32_13 : i32
    cf.cond_br %40, ^bb3, ^bb8
  ^bb7:  // pred: ^bb4
    %c1_i32_14 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_14) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // pred: ^bb6
    %41 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %42 = arith.addi %41, %c12_i32 : i32
    call @f87(%arg0, %42) : (!llvm.ptr, i32) -> ()
    cf.br ^bb3
  ^bb9:  // 2 preds: ^bb3, ^bb10
    %43 = llvm.getelementptr %7[%18] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %44 = llvm.load volatile %43 {alignment = 1 : i64} : !llvm.ptr -> i32
    %45 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c31_i32 = arith.constant 31 : i32
    %46 = arith.cmpi ule, %c2_i32, %c31_i32 : i32
    %47 = scf.if %46 -> (i32) {
      %472 = arith.shli %45, %c2_i32 : i32
      scf.yield %472 : i32
    } else {
      %c0_i32_231 = arith.constant 0 : i32
      scf.yield %c0_i32_231 : i32
    }
    %48 = arith.addi %44, %47 : i32
    %c96_i32 = arith.constant 96 : i32
    %c0_i64 = arith.constant 0 : i64
    %49 = arith.extui %48 : i32 to i64
    %50 = arith.addi %49, %c0_i64 : i64
    %c4_i64_15 = arith.constant 4 : i64
    %51 = arith.addi %50, %c4_i64_15 : i64
    %c0_i32_16 = arith.constant 0 : i32
    %52 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_16) : (!llvm.ptr, i32) -> i32
    %53 = arith.extui %52 : i32 to i64
    %c65536_i64_17 = arith.constant 65536 : i64
    %54 = arith.muli %53, %c65536_i64_17 : i64
    %55 = arith.cmpi ult, %51, %54 : i64
    cf.cond_br %55, ^bb11, ^bb12
  ^bb10:  // pred: ^bb3
    %c1_i32_18 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_18) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %56 = llvm.getelementptr %7[%50] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c96_i32, %56 {alignment = 1 : i64} : i32, !llvm.ptr
    %57 = llvm.load %1 : !llvm.ptr -> i32
    %58 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_19 = arith.constant 1 : i32
    %59 = arith.addi %58, %c1_i32_19 : i32
    %c20_i64_20 = arith.constant 20 : i64
    %60 = arith.extui %57 : i32 to i64
    %61 = arith.addi %60, %c20_i64_20 : i64
    %c4_i64_21 = arith.constant 4 : i64
    %62 = arith.addi %61, %c4_i64_21 : i64
    %c0_i32_22 = arith.constant 0 : i32
    %63 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_22) : (!llvm.ptr, i32) -> i32
    %64 = arith.extui %63 : i32 to i64
    %c65536_i64_23 = arith.constant 65536 : i64
    %65 = arith.muli %64, %c65536_i64_23 : i64
    %66 = arith.cmpi ult, %62, %65 : i64
    cf.cond_br %66, ^bb13, ^bb14
  ^bb12:  // pred: ^bb9
    %c1_i32_24 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_24) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %67 = llvm.getelementptr %7[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %59, %67 {alignment = 1 : i64} : i32, !llvm.ptr
    %68 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %69 = arith.extui %68 : i32 to i64
    %70 = arith.addi %69, %c8_i64 : i64
    %c4_i64_25 = arith.constant 4 : i64
    %71 = arith.addi %70, %c4_i64_25 : i64
    %c0_i32_26 = arith.constant 0 : i32
    %72 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_26) : (!llvm.ptr, i32) -> i32
    %73 = arith.extui %72 : i32 to i64
    %c65536_i64_27 = arith.constant 65536 : i64
    %74 = arith.muli %73, %c65536_i64_27 : i64
    %75 = arith.cmpi ult, %71, %74 : i64
    cf.cond_br %75, ^bb16, ^bb17
  ^bb14:  // pred: ^bb11
    %c1_i32_28 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_28) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // 2 preds: ^bb18, ^bb20
    %76 = llvm.load %0 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %77 = arith.addi %76, %c32_i32 : i32
    llvm.store %77, %3 : i32, !llvm.ptr
    %78 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_29 = arith.constant 4 : i64
    %79 = arith.extui %78 : i32 to i64
    %80 = arith.addi %79, %c4_i64_29 : i64
    %c4_i64_30 = arith.constant 4 : i64
    %81 = arith.addi %80, %c4_i64_30 : i64
    %c0_i32_31 = arith.constant 0 : i32
    %82 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_31) : (!llvm.ptr, i32) -> i32
    %83 = arith.extui %82 : i32 to i64
    %c65536_i64_32 = arith.constant 65536 : i64
    %84 = arith.muli %83, %c65536_i64_32 : i64
    %85 = arith.cmpi ult, %81, %84 : i64
    cf.cond_br %85, ^bb21, ^bb22
  ^bb16:  // 2 preds: ^bb13, ^bb17
    %86 = llvm.getelementptr %7[%70] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %87 = llvm.load volatile %86 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %87, %2 : i32, !llvm.ptr
    %88 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_33 = arith.constant 0 : i64
    %89 = arith.extui %88 : i32 to i64
    %90 = arith.addi %89, %c0_i64_33 : i64
    %c4_i64_34 = arith.constant 4 : i64
    %91 = arith.addi %90, %c4_i64_34 : i64
    %c0_i32_35 = arith.constant 0 : i32
    %92 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_35) : (!llvm.ptr, i32) -> i32
    %93 = arith.extui %92 : i32 to i64
    %c65536_i64_36 = arith.constant 65536 : i64
    %94 = arith.muli %93, %c65536_i64_36 : i64
    %95 = arith.cmpi ult, %91, %94 : i64
    cf.cond_br %95, ^bb18, ^bb19
  ^bb17:  // pred: ^bb13
    %c1_i32_37 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_37) : (i32) -> ()
    cf.br ^bb16
  ^bb18:  // 2 preds: ^bb16, ^bb19
    %96 = llvm.getelementptr %7[%90] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %97 = llvm.load volatile %96 {alignment = 1 : i64} : !llvm.ptr -> i32
    %98 = arith.cmpi eq, %87, %97 : i32
    %99 = arith.extui %98 : i1 to i32
    %c0_i32_38 = arith.constant 0 : i32
    %100 = arith.cmpi eq, %99, %c0_i32_38 : i32
    %101 = arith.extui %100 : i1 to i32
    %c0_i32_39 = arith.constant 0 : i32
    %102 = arith.cmpi ne, %101, %c0_i32_39 : i32
    cf.cond_br %102, ^bb15, ^bb20
  ^bb19:  // pred: ^bb16
    %c1_i32_40 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_40) : (i32) -> ()
    cf.br ^bb18
  ^bb20:  // pred: ^bb18
    %103 = llvm.load %1 : !llvm.ptr -> i32
    call @f88(%arg0, %103) : (!llvm.ptr, i32) -> ()
    cf.br ^bb15
  ^bb21:  // 2 preds: ^bb15, ^bb22
    %104 = llvm.getelementptr %7[%80] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %105 = llvm.load volatile %104 {alignment = 1 : i64} : !llvm.ptr -> i32
    %106 = llvm.load %2 : !llvm.ptr -> i32
    %c5_i32 = arith.constant 5 : i32
    %c31_i32_41 = arith.constant 31 : i32
    %107 = arith.cmpi ule, %c5_i32, %c31_i32_41 : i32
    %108 = scf.if %107 -> (i32) {
      %472 = arith.shli %106, %c5_i32 : i32
      scf.yield %472 : i32
    } else {
      %c0_i32_231 = arith.constant 0 : i32
      scf.yield %c0_i32_231 : i32
    }
    %109 = arith.addi %105, %108 : i32
    llvm.store %109, %4 : i32, !llvm.ptr
    %110 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_42 = arith.constant 0 : i64
    %111 = arith.extui %110 : i32 to i64
    %112 = arith.addi %111, %c0_i64_42 : i64
    %c8_i64_43 = arith.constant 8 : i64
    %113 = arith.addi %112, %c8_i64_43 : i64
    %c0_i32_44 = arith.constant 0 : i32
    %114 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_44) : (!llvm.ptr, i32) -> i32
    %115 = arith.extui %114 : i32 to i64
    %c65536_i64_45 = arith.constant 65536 : i64
    %116 = arith.muli %115, %c65536_i64_45 : i64
    %117 = arith.cmpi ult, %113, %116 : i64
    cf.cond_br %117, ^bb23, ^bb24
  ^bb22:  // pred: ^bb15
    %c1_i32_46 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_46) : (i32) -> ()
    cf.br ^bb21
  ^bb23:  // 2 preds: ^bb21, ^bb24
    %118 = llvm.getelementptr %7[%112] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %119 = llvm.load volatile %118 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_47 = arith.constant 0 : i64
    %120 = arith.extui %109 : i32 to i64
    %121 = arith.addi %120, %c0_i64_47 : i64
    %c8_i64_48 = arith.constant 8 : i64
    %122 = arith.addi %121, %c8_i64_48 : i64
    %c0_i32_49 = arith.constant 0 : i32
    %123 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_49) : (!llvm.ptr, i32) -> i32
    %124 = arith.extui %123 : i32 to i64
    %c65536_i64_50 = arith.constant 65536 : i64
    %125 = arith.muli %124, %c65536_i64_50 : i64
    %126 = arith.cmpi ult, %122, %125 : i64
    cf.cond_br %126, ^bb25, ^bb26
  ^bb24:  // pred: ^bb21
    %c1_i32_51 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_51) : (i32) -> ()
    cf.br ^bb23
  ^bb25:  // 2 preds: ^bb23, ^bb26
    %127 = llvm.getelementptr %7[%121] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %119, %127 {alignment = 1 : i64} : i64, !llvm.ptr
    %128 = llvm.load %4 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %129 = arith.addi %128, %c24_i32 : i32
    %130 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32_52 = arith.constant 24 : i32
    %131 = arith.addi %130, %c24_i32_52 : i32
    %c0_i64_53 = arith.constant 0 : i64
    %132 = arith.extui %131 : i32 to i64
    %133 = arith.addi %132, %c0_i64_53 : i64
    %c8_i64_54 = arith.constant 8 : i64
    %134 = arith.addi %133, %c8_i64_54 : i64
    %c0_i32_55 = arith.constant 0 : i32
    %135 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_55) : (!llvm.ptr, i32) -> i32
    %136 = arith.extui %135 : i32 to i64
    %c65536_i64_56 = arith.constant 65536 : i64
    %137 = arith.muli %136, %c65536_i64_56 : i64
    %138 = arith.cmpi ult, %134, %137 : i64
    cf.cond_br %138, ^bb27, ^bb28
  ^bb26:  // pred: ^bb23
    %c1_i32_57 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_57) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // 2 preds: ^bb25, ^bb28
    %139 = llvm.getelementptr %7[%133] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %140 = llvm.load volatile %139 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_58 = arith.constant 0 : i64
    %141 = arith.extui %129 : i32 to i64
    %142 = arith.addi %141, %c0_i64_58 : i64
    %c8_i64_59 = arith.constant 8 : i64
    %143 = arith.addi %142, %c8_i64_59 : i64
    %c0_i32_60 = arith.constant 0 : i32
    %144 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_60) : (!llvm.ptr, i32) -> i32
    %145 = arith.extui %144 : i32 to i64
    %c65536_i64_61 = arith.constant 65536 : i64
    %146 = arith.muli %145, %c65536_i64_61 : i64
    %147 = arith.cmpi ult, %143, %146 : i64
    cf.cond_br %147, ^bb29, ^bb30
  ^bb28:  // pred: ^bb25
    %c1_i32_62 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_62) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // 2 preds: ^bb27, ^bb30
    %148 = llvm.getelementptr %7[%142] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %140, %148 {alignment = 1 : i64} : i64, !llvm.ptr
    %149 = llvm.load %4 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %150 = arith.addi %149, %c16_i32 : i32
    %151 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_63 = arith.constant 16 : i32
    %152 = arith.addi %151, %c16_i32_63 : i32
    %c0_i64_64 = arith.constant 0 : i64
    %153 = arith.extui %152 : i32 to i64
    %154 = arith.addi %153, %c0_i64_64 : i64
    %c8_i64_65 = arith.constant 8 : i64
    %155 = arith.addi %154, %c8_i64_65 : i64
    %c0_i32_66 = arith.constant 0 : i32
    %156 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_66) : (!llvm.ptr, i32) -> i32
    %157 = arith.extui %156 : i32 to i64
    %c65536_i64_67 = arith.constant 65536 : i64
    %158 = arith.muli %157, %c65536_i64_67 : i64
    %159 = arith.cmpi ult, %155, %158 : i64
    cf.cond_br %159, ^bb31, ^bb32
  ^bb30:  // pred: ^bb27
    %c1_i32_68 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_68) : (i32) -> ()
    cf.br ^bb29
  ^bb31:  // 2 preds: ^bb29, ^bb32
    %160 = llvm.getelementptr %7[%154] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %161 = llvm.load volatile %160 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_69 = arith.constant 0 : i64
    %162 = arith.extui %150 : i32 to i64
    %163 = arith.addi %162, %c0_i64_69 : i64
    %c8_i64_70 = arith.constant 8 : i64
    %164 = arith.addi %163, %c8_i64_70 : i64
    %c0_i32_71 = arith.constant 0 : i32
    %165 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_71) : (!llvm.ptr, i32) -> i32
    %166 = arith.extui %165 : i32 to i64
    %c65536_i64_72 = arith.constant 65536 : i64
    %167 = arith.muli %166, %c65536_i64_72 : i64
    %168 = arith.cmpi ult, %164, %167 : i64
    cf.cond_br %168, ^bb33, ^bb34
  ^bb32:  // pred: ^bb29
    %c1_i32_73 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_73) : (i32) -> ()
    cf.br ^bb31
  ^bb33:  // 2 preds: ^bb31, ^bb34
    %169 = llvm.getelementptr %7[%163] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %161, %169 {alignment = 1 : i64} : i64, !llvm.ptr
    %170 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %171 = arith.addi %170, %c8_i32 : i32
    %172 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_74 = arith.constant 8 : i32
    %173 = arith.addi %172, %c8_i32_74 : i32
    %c0_i64_75 = arith.constant 0 : i64
    %174 = arith.extui %173 : i32 to i64
    %175 = arith.addi %174, %c0_i64_75 : i64
    %c8_i64_76 = arith.constant 8 : i64
    %176 = arith.addi %175, %c8_i64_76 : i64
    %c0_i32_77 = arith.constant 0 : i32
    %177 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_77) : (!llvm.ptr, i32) -> i32
    %178 = arith.extui %177 : i32 to i64
    %c65536_i64_78 = arith.constant 65536 : i64
    %179 = arith.muli %178, %c65536_i64_78 : i64
    %180 = arith.cmpi ult, %176, %179 : i64
    cf.cond_br %180, ^bb35, ^bb36
  ^bb34:  // pred: ^bb31
    %c1_i32_79 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_79) : (i32) -> ()
    cf.br ^bb33
  ^bb35:  // 2 preds: ^bb33, ^bb36
    %181 = llvm.getelementptr %7[%175] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %182 = llvm.load volatile %181 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_80 = arith.constant 0 : i64
    %183 = arith.extui %171 : i32 to i64
    %184 = arith.addi %183, %c0_i64_80 : i64
    %c8_i64_81 = arith.constant 8 : i64
    %185 = arith.addi %184, %c8_i64_81 : i64
    %c0_i32_82 = arith.constant 0 : i32
    %186 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_82) : (!llvm.ptr, i32) -> i32
    %187 = arith.extui %186 : i32 to i64
    %c65536_i64_83 = arith.constant 65536 : i64
    %188 = arith.muli %187, %c65536_i64_83 : i64
    %189 = arith.cmpi ult, %185, %188 : i64
    cf.cond_br %189, ^bb37, ^bb38
  ^bb36:  // pred: ^bb33
    %c1_i32_84 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_84) : (i32) -> ()
    cf.br ^bb35
  ^bb37:  // 2 preds: ^bb35, ^bb38
    %190 = llvm.getelementptr %7[%184] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %182, %190 {alignment = 1 : i64} : i64, !llvm.ptr
    %191 = llvm.load %1 : !llvm.ptr -> i32
    %192 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_85 = arith.constant 1 : i32
    %193 = arith.addi %192, %c1_i32_85 : i32
    llvm.store %193, %4 : i32, !llvm.ptr
    %c8_i64_86 = arith.constant 8 : i64
    %194 = arith.extui %191 : i32 to i64
    %195 = arith.addi %194, %c8_i64_86 : i64
    %c4_i64_87 = arith.constant 4 : i64
    %196 = arith.addi %195, %c4_i64_87 : i64
    %c0_i32_88 = arith.constant 0 : i32
    %197 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_88) : (!llvm.ptr, i32) -> i32
    %198 = arith.extui %197 : i32 to i64
    %c65536_i64_89 = arith.constant 65536 : i64
    %199 = arith.muli %198, %c65536_i64_89 : i64
    %200 = arith.cmpi ult, %196, %199 : i64
    cf.cond_br %200, ^bb39, ^bb40
  ^bb38:  // pred: ^bb35
    %c1_i32_90 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_90) : (i32) -> ()
    cf.br ^bb37
  ^bb39:  // 2 preds: ^bb37, ^bb40
    %201 = llvm.getelementptr %7[%195] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %193, %201 {alignment = 1 : i64} : i32, !llvm.ptr
    %202 = llvm.load %4 : !llvm.ptr -> i32
    %203 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_91 = arith.constant 0 : i64
    %204 = arith.extui %203 : i32 to i64
    %205 = arith.addi %204, %c0_i64_91 : i64
    %c4_i64_92 = arith.constant 4 : i64
    %206 = arith.addi %205, %c4_i64_92 : i64
    %c0_i32_93 = arith.constant 0 : i32
    %207 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_93) : (!llvm.ptr, i32) -> i32
    %208 = arith.extui %207 : i32 to i64
    %c65536_i64_94 = arith.constant 65536 : i64
    %209 = arith.muli %208, %c65536_i64_94 : i64
    %210 = arith.cmpi ult, %206, %209 : i64
    cf.cond_br %210, ^bb42, ^bb43
  ^bb40:  // pred: ^bb37
    %c1_i32_95 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_95) : (i32) -> ()
    cf.br ^bb39
  ^bb41:  // 2 preds: ^bb42, ^bb44
    %211 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_96 = arith.constant 4 : i64
    %212 = arith.extui %211 : i32 to i64
    %213 = arith.addi %212, %c4_i64_96 : i64
    %c4_i64_97 = arith.constant 4 : i64
    %214 = arith.addi %213, %c4_i64_97 : i64
    %c0_i32_98 = arith.constant 0 : i32
    %215 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_98) : (!llvm.ptr, i32) -> i32
    %216 = arith.extui %215 : i32 to i64
    %c65536_i64_99 = arith.constant 65536 : i64
    %217 = arith.muli %216, %c65536_i64_99 : i64
    %218 = arith.cmpi ult, %214, %217 : i64
    cf.cond_br %218, ^bb45, ^bb46
  ^bb42:  // 2 preds: ^bb39, ^bb43
    %219 = llvm.getelementptr %7[%205] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %220 = llvm.load volatile %219 {alignment = 1 : i64} : !llvm.ptr -> i32
    %221 = arith.cmpi eq, %202, %220 : i32
    %222 = arith.extui %221 : i1 to i32
    %c0_i32_100 = arith.constant 0 : i32
    %223 = arith.cmpi eq, %222, %c0_i32_100 : i32
    %224 = arith.extui %223 : i1 to i32
    %c0_i32_101 = arith.constant 0 : i32
    %225 = arith.cmpi ne, %224, %c0_i32_101 : i32
    cf.cond_br %225, ^bb41, ^bb44
  ^bb43:  // pred: ^bb39
    %c1_i32_102 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_102) : (i32) -> ()
    cf.br ^bb42
  ^bb44:  // pred: ^bb42
    %226 = llvm.load %1 : !llvm.ptr -> i32
    call @f88(%arg0, %226) : (!llvm.ptr, i32) -> ()
    cf.br ^bb41
  ^bb45:  // 2 preds: ^bb41, ^bb46
    %227 = llvm.getelementptr %7[%213] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %228 = llvm.load volatile %227 {alignment = 1 : i64} : !llvm.ptr -> i32
    %229 = llvm.load %4 : !llvm.ptr -> i32
    %c5_i32_103 = arith.constant 5 : i32
    %c31_i32_104 = arith.constant 31 : i32
    %230 = arith.cmpi ule, %c5_i32_103, %c31_i32_104 : i32
    %231 = scf.if %230 -> (i32) {
      %472 = arith.shli %229, %c5_i32_103 : i32
      scf.yield %472 : i32
    } else {
      %c0_i32_231 = arith.constant 0 : i32
      scf.yield %c0_i32_231 : i32
    }
    %232 = arith.addi %228, %231 : i32
    llvm.store %232, %4 : i32, !llvm.ptr
    %233 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_105 = arith.constant 0 : i64
    %234 = arith.extui %233 : i32 to i64
    %235 = arith.addi %234, %c0_i64_105 : i64
    %c8_i64_106 = arith.constant 8 : i64
    %236 = arith.addi %235, %c8_i64_106 : i64
    %c0_i32_107 = arith.constant 0 : i32
    %237 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_107) : (!llvm.ptr, i32) -> i32
    %238 = arith.extui %237 : i32 to i64
    %c65536_i64_108 = arith.constant 65536 : i64
    %239 = arith.muli %238, %c65536_i64_108 : i64
    %240 = arith.cmpi ult, %236, %239 : i64
    cf.cond_br %240, ^bb47, ^bb48
  ^bb46:  // pred: ^bb41
    %c1_i32_109 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_109) : (i32) -> ()
    cf.br ^bb45
  ^bb47:  // 2 preds: ^bb45, ^bb48
    %241 = llvm.getelementptr %7[%235] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %242 = llvm.load volatile %241 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_110 = arith.constant 0 : i64
    %243 = arith.extui %232 : i32 to i64
    %244 = arith.addi %243, %c0_i64_110 : i64
    %c8_i64_111 = arith.constant 8 : i64
    %245 = arith.addi %244, %c8_i64_111 : i64
    %c0_i32_112 = arith.constant 0 : i32
    %246 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_112) : (!llvm.ptr, i32) -> i32
    %247 = arith.extui %246 : i32 to i64
    %c65536_i64_113 = arith.constant 65536 : i64
    %248 = arith.muli %247, %c65536_i64_113 : i64
    %249 = arith.cmpi ult, %245, %248 : i64
    cf.cond_br %249, ^bb49, ^bb50
  ^bb48:  // pred: ^bb45
    %c1_i32_114 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_114) : (i32) -> ()
    cf.br ^bb47
  ^bb49:  // 2 preds: ^bb47, ^bb50
    %250 = llvm.getelementptr %7[%244] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %242, %250 {alignment = 1 : i64} : i64, !llvm.ptr
    %251 = llvm.load %4 : !llvm.ptr -> i32
    %c24_i32_115 = arith.constant 24 : i32
    %252 = arith.addi %251, %c24_i32_115 : i32
    %253 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32_116 = arith.constant 24 : i32
    %254 = arith.addi %253, %c24_i32_116 : i32
    %c0_i64_117 = arith.constant 0 : i64
    %255 = arith.extui %254 : i32 to i64
    %256 = arith.addi %255, %c0_i64_117 : i64
    %c8_i64_118 = arith.constant 8 : i64
    %257 = arith.addi %256, %c8_i64_118 : i64
    %c0_i32_119 = arith.constant 0 : i32
    %258 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_119) : (!llvm.ptr, i32) -> i32
    %259 = arith.extui %258 : i32 to i64
    %c65536_i64_120 = arith.constant 65536 : i64
    %260 = arith.muli %259, %c65536_i64_120 : i64
    %261 = arith.cmpi ult, %257, %260 : i64
    cf.cond_br %261, ^bb51, ^bb52
  ^bb50:  // pred: ^bb47
    %c1_i32_121 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_121) : (i32) -> ()
    cf.br ^bb49
  ^bb51:  // 2 preds: ^bb49, ^bb52
    %262 = llvm.getelementptr %7[%256] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %263 = llvm.load volatile %262 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_122 = arith.constant 0 : i64
    %264 = arith.extui %252 : i32 to i64
    %265 = arith.addi %264, %c0_i64_122 : i64
    %c8_i64_123 = arith.constant 8 : i64
    %266 = arith.addi %265, %c8_i64_123 : i64
    %c0_i32_124 = arith.constant 0 : i32
    %267 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_124) : (!llvm.ptr, i32) -> i32
    %268 = arith.extui %267 : i32 to i64
    %c65536_i64_125 = arith.constant 65536 : i64
    %269 = arith.muli %268, %c65536_i64_125 : i64
    %270 = arith.cmpi ult, %266, %269 : i64
    cf.cond_br %270, ^bb53, ^bb54
  ^bb52:  // pred: ^bb49
    %c1_i32_126 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_126) : (i32) -> ()
    cf.br ^bb51
  ^bb53:  // 2 preds: ^bb51, ^bb54
    %271 = llvm.getelementptr %7[%265] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %263, %271 {alignment = 1 : i64} : i64, !llvm.ptr
    %272 = llvm.load %4 : !llvm.ptr -> i32
    %c16_i32_127 = arith.constant 16 : i32
    %273 = arith.addi %272, %c16_i32_127 : i32
    %274 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_128 = arith.constant 16 : i32
    %275 = arith.addi %274, %c16_i32_128 : i32
    %c0_i64_129 = arith.constant 0 : i64
    %276 = arith.extui %275 : i32 to i64
    %277 = arith.addi %276, %c0_i64_129 : i64
    %c8_i64_130 = arith.constant 8 : i64
    %278 = arith.addi %277, %c8_i64_130 : i64
    %c0_i32_131 = arith.constant 0 : i32
    %279 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_131) : (!llvm.ptr, i32) -> i32
    %280 = arith.extui %279 : i32 to i64
    %c65536_i64_132 = arith.constant 65536 : i64
    %281 = arith.muli %280, %c65536_i64_132 : i64
    %282 = arith.cmpi ult, %278, %281 : i64
    cf.cond_br %282, ^bb55, ^bb56
  ^bb54:  // pred: ^bb51
    %c1_i32_133 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_133) : (i32) -> ()
    cf.br ^bb53
  ^bb55:  // 2 preds: ^bb53, ^bb56
    %283 = llvm.getelementptr %7[%277] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %284 = llvm.load volatile %283 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_134 = arith.constant 0 : i64
    %285 = arith.extui %273 : i32 to i64
    %286 = arith.addi %285, %c0_i64_134 : i64
    %c8_i64_135 = arith.constant 8 : i64
    %287 = arith.addi %286, %c8_i64_135 : i64
    %c0_i32_136 = arith.constant 0 : i32
    %288 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_136) : (!llvm.ptr, i32) -> i32
    %289 = arith.extui %288 : i32 to i64
    %c65536_i64_137 = arith.constant 65536 : i64
    %290 = arith.muli %289, %c65536_i64_137 : i64
    %291 = arith.cmpi ult, %287, %290 : i64
    cf.cond_br %291, ^bb57, ^bb58
  ^bb56:  // pred: ^bb53
    %c1_i32_138 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_138) : (i32) -> ()
    cf.br ^bb55
  ^bb57:  // 2 preds: ^bb55, ^bb58
    %292 = llvm.getelementptr %7[%286] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %284, %292 {alignment = 1 : i64} : i64, !llvm.ptr
    %293 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i32_139 = arith.constant 8 : i32
    %294 = arith.addi %293, %c8_i32_139 : i32
    %295 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_140 = arith.constant 8 : i32
    %296 = arith.addi %295, %c8_i32_140 : i32
    %c0_i64_141 = arith.constant 0 : i64
    %297 = arith.extui %296 : i32 to i64
    %298 = arith.addi %297, %c0_i64_141 : i64
    %c8_i64_142 = arith.constant 8 : i64
    %299 = arith.addi %298, %c8_i64_142 : i64
    %c0_i32_143 = arith.constant 0 : i32
    %300 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_143) : (!llvm.ptr, i32) -> i32
    %301 = arith.extui %300 : i32 to i64
    %c65536_i64_144 = arith.constant 65536 : i64
    %302 = arith.muli %301, %c65536_i64_144 : i64
    %303 = arith.cmpi ult, %299, %302 : i64
    cf.cond_br %303, ^bb59, ^bb60
  ^bb58:  // pred: ^bb55
    %c1_i32_145 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_145) : (i32) -> ()
    cf.br ^bb57
  ^bb59:  // 2 preds: ^bb57, ^bb60
    %304 = llvm.getelementptr %7[%298] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %305 = llvm.load volatile %304 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_146 = arith.constant 0 : i64
    %306 = arith.extui %294 : i32 to i64
    %307 = arith.addi %306, %c0_i64_146 : i64
    %c8_i64_147 = arith.constant 8 : i64
    %308 = arith.addi %307, %c8_i64_147 : i64
    %c0_i32_148 = arith.constant 0 : i32
    %309 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_148) : (!llvm.ptr, i32) -> i32
    %310 = arith.extui %309 : i32 to i64
    %c65536_i64_149 = arith.constant 65536 : i64
    %311 = arith.muli %310, %c65536_i64_149 : i64
    %312 = arith.cmpi ult, %308, %311 : i64
    cf.cond_br %312, ^bb61, ^bb62
  ^bb60:  // pred: ^bb57
    %c1_i32_150 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_150) : (i32) -> ()
    cf.br ^bb59
  ^bb61:  // 2 preds: ^bb59, ^bb62
    %313 = llvm.getelementptr %7[%307] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %305, %313 {alignment = 1 : i64} : i64, !llvm.ptr
    %314 = llvm.load %1 : !llvm.ptr -> i32
    %315 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i32_151 = arith.constant 2 : i32
    %316 = arith.addi %315, %c2_i32_151 : i32
    llvm.store %316, %3 : i32, !llvm.ptr
    %c8_i64_152 = arith.constant 8 : i64
    %317 = arith.extui %314 : i32 to i64
    %318 = arith.addi %317, %c8_i64_152 : i64
    %c4_i64_153 = arith.constant 4 : i64
    %319 = arith.addi %318, %c4_i64_153 : i64
    %c0_i32_154 = arith.constant 0 : i32
    %320 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_154) : (!llvm.ptr, i32) -> i32
    %321 = arith.extui %320 : i32 to i64
    %c65536_i64_155 = arith.constant 65536 : i64
    %322 = arith.muli %321, %c65536_i64_155 : i64
    %323 = arith.cmpi ult, %319, %322 : i64
    cf.cond_br %323, ^bb63, ^bb64
  ^bb62:  // pred: ^bb59
    %c1_i32_156 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_156) : (i32) -> ()
    cf.br ^bb61
  ^bb63:  // 2 preds: ^bb61, ^bb64
    %324 = llvm.getelementptr %7[%318] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %316, %324 {alignment = 1 : i64} : i32, !llvm.ptr
    %325 = llvm.load %3 : !llvm.ptr -> i32
    %326 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_157 = arith.constant 0 : i64
    %327 = arith.extui %326 : i32 to i64
    %328 = arith.addi %327, %c0_i64_157 : i64
    %c4_i64_158 = arith.constant 4 : i64
    %329 = arith.addi %328, %c4_i64_158 : i64
    %c0_i32_159 = arith.constant 0 : i32
    %330 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_159) : (!llvm.ptr, i32) -> i32
    %331 = arith.extui %330 : i32 to i64
    %c65536_i64_160 = arith.constant 65536 : i64
    %332 = arith.muli %331, %c65536_i64_160 : i64
    %333 = arith.cmpi ult, %329, %332 : i64
    cf.cond_br %333, ^bb66, ^bb67
  ^bb64:  // pred: ^bb61
    %c1_i32_161 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_161) : (i32) -> ()
    cf.br ^bb63
  ^bb65:  // 2 preds: ^bb66, ^bb68
    %334 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_162 = arith.constant 4 : i64
    %335 = arith.extui %334 : i32 to i64
    %336 = arith.addi %335, %c4_i64_162 : i64
    %c4_i64_163 = arith.constant 4 : i64
    %337 = arith.addi %336, %c4_i64_163 : i64
    %c0_i32_164 = arith.constant 0 : i32
    %338 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_164) : (!llvm.ptr, i32) -> i32
    %339 = arith.extui %338 : i32 to i64
    %c65536_i64_165 = arith.constant 65536 : i64
    %340 = arith.muli %339, %c65536_i64_165 : i64
    %341 = arith.cmpi ult, %337, %340 : i64
    cf.cond_br %341, ^bb69, ^bb70
  ^bb66:  // 2 preds: ^bb63, ^bb67
    %342 = llvm.getelementptr %7[%328] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %343 = llvm.load volatile %342 {alignment = 1 : i64} : !llvm.ptr -> i32
    %344 = arith.cmpi eq, %325, %343 : i32
    %345 = arith.extui %344 : i1 to i32
    %c0_i32_166 = arith.constant 0 : i32
    %346 = arith.cmpi eq, %345, %c0_i32_166 : i32
    %347 = arith.extui %346 : i1 to i32
    %c0_i32_167 = arith.constant 0 : i32
    %348 = arith.cmpi ne, %347, %c0_i32_167 : i32
    cf.cond_br %348, ^bb65, ^bb68
  ^bb67:  // pred: ^bb63
    %c1_i32_168 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_168) : (i32) -> ()
    cf.br ^bb66
  ^bb68:  // pred: ^bb66
    %349 = llvm.load %1 : !llvm.ptr -> i32
    call @f88(%arg0, %349) : (!llvm.ptr, i32) -> ()
    cf.br ^bb65
  ^bb69:  // 2 preds: ^bb65, ^bb70
    %350 = llvm.getelementptr %7[%336] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %351 = llvm.load volatile %350 {alignment = 1 : i64} : !llvm.ptr -> i32
    %352 = llvm.load %3 : !llvm.ptr -> i32
    %c5_i32_169 = arith.constant 5 : i32
    %c31_i32_170 = arith.constant 31 : i32
    %353 = arith.cmpi ule, %c5_i32_169, %c31_i32_170 : i32
    %354 = scf.if %353 -> (i32) {
      %472 = arith.shli %352, %c5_i32_169 : i32
      scf.yield %472 : i32
    } else {
      %c0_i32_231 = arith.constant 0 : i32
      scf.yield %c0_i32_231 : i32
    }
    %355 = arith.addi %351, %354 : i32
    llvm.store %355, %3 : i32, !llvm.ptr
    %356 = llvm.load %0 : !llvm.ptr -> i32
    %c64_i64 = arith.constant 64 : i64
    %357 = arith.extui %356 : i32 to i64
    %358 = arith.addi %357, %c64_i64 : i64
    %c8_i64_171 = arith.constant 8 : i64
    %359 = arith.addi %358, %c8_i64_171 : i64
    %c0_i32_172 = arith.constant 0 : i32
    %360 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_172) : (!llvm.ptr, i32) -> i32
    %361 = arith.extui %360 : i32 to i64
    %c65536_i64_173 = arith.constant 65536 : i64
    %362 = arith.muli %361, %c65536_i64_173 : i64
    %363 = arith.cmpi ult, %359, %362 : i64
    cf.cond_br %363, ^bb71, ^bb72
  ^bb70:  // pred: ^bb65
    %c1_i32_174 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_174) : (i32) -> ()
    cf.br ^bb69
  ^bb71:  // 2 preds: ^bb69, ^bb72
    %364 = llvm.getelementptr %7[%358] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %365 = llvm.load volatile %364 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_175 = arith.constant 0 : i64
    %366 = arith.extui %355 : i32 to i64
    %367 = arith.addi %366, %c0_i64_175 : i64
    %c8_i64_176 = arith.constant 8 : i64
    %368 = arith.addi %367, %c8_i64_176 : i64
    %c0_i32_177 = arith.constant 0 : i32
    %369 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_177) : (!llvm.ptr, i32) -> i32
    %370 = arith.extui %369 : i32 to i64
    %c65536_i64_178 = arith.constant 65536 : i64
    %371 = arith.muli %370, %c65536_i64_178 : i64
    %372 = arith.cmpi ult, %368, %371 : i64
    cf.cond_br %372, ^bb73, ^bb74
  ^bb72:  // pred: ^bb69
    %c1_i32_179 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_179) : (i32) -> ()
    cf.br ^bb71
  ^bb73:  // 2 preds: ^bb71, ^bb74
    %373 = llvm.getelementptr %7[%367] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %365, %373 {alignment = 1 : i64} : i64, !llvm.ptr
    %374 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32_180 = arith.constant 24 : i32
    %375 = arith.addi %374, %c24_i32_180 : i32
    %376 = llvm.load %0 : !llvm.ptr -> i32
    %c88_i32 = arith.constant 88 : i32
    %377 = arith.addi %376, %c88_i32 : i32
    %c0_i64_181 = arith.constant 0 : i64
    %378 = arith.extui %377 : i32 to i64
    %379 = arith.addi %378, %c0_i64_181 : i64
    %c8_i64_182 = arith.constant 8 : i64
    %380 = arith.addi %379, %c8_i64_182 : i64
    %c0_i32_183 = arith.constant 0 : i32
    %381 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_183) : (!llvm.ptr, i32) -> i32
    %382 = arith.extui %381 : i32 to i64
    %c65536_i64_184 = arith.constant 65536 : i64
    %383 = arith.muli %382, %c65536_i64_184 : i64
    %384 = arith.cmpi ult, %380, %383 : i64
    cf.cond_br %384, ^bb75, ^bb76
  ^bb74:  // pred: ^bb71
    %c1_i32_185 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_185) : (i32) -> ()
    cf.br ^bb73
  ^bb75:  // 2 preds: ^bb73, ^bb76
    %385 = llvm.getelementptr %7[%379] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %386 = llvm.load volatile %385 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_186 = arith.constant 0 : i64
    %387 = arith.extui %375 : i32 to i64
    %388 = arith.addi %387, %c0_i64_186 : i64
    %c8_i64_187 = arith.constant 8 : i64
    %389 = arith.addi %388, %c8_i64_187 : i64
    %c0_i32_188 = arith.constant 0 : i32
    %390 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_188) : (!llvm.ptr, i32) -> i32
    %391 = arith.extui %390 : i32 to i64
    %c65536_i64_189 = arith.constant 65536 : i64
    %392 = arith.muli %391, %c65536_i64_189 : i64
    %393 = arith.cmpi ult, %389, %392 : i64
    cf.cond_br %393, ^bb77, ^bb78
  ^bb76:  // pred: ^bb73
    %c1_i32_190 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_190) : (i32) -> ()
    cf.br ^bb75
  ^bb77:  // 2 preds: ^bb75, ^bb78
    %394 = llvm.getelementptr %7[%388] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %386, %394 {alignment = 1 : i64} : i64, !llvm.ptr
    %395 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_191 = arith.constant 16 : i32
    %396 = arith.addi %395, %c16_i32_191 : i32
    %397 = llvm.load %0 : !llvm.ptr -> i32
    %c80_i32 = arith.constant 80 : i32
    %398 = arith.addi %397, %c80_i32 : i32
    %c0_i64_192 = arith.constant 0 : i64
    %399 = arith.extui %398 : i32 to i64
    %400 = arith.addi %399, %c0_i64_192 : i64
    %c8_i64_193 = arith.constant 8 : i64
    %401 = arith.addi %400, %c8_i64_193 : i64
    %c0_i32_194 = arith.constant 0 : i32
    %402 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_194) : (!llvm.ptr, i32) -> i32
    %403 = arith.extui %402 : i32 to i64
    %c65536_i64_195 = arith.constant 65536 : i64
    %404 = arith.muli %403, %c65536_i64_195 : i64
    %405 = arith.cmpi ult, %401, %404 : i64
    cf.cond_br %405, ^bb79, ^bb80
  ^bb78:  // pred: ^bb75
    %c1_i32_196 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_196) : (i32) -> ()
    cf.br ^bb77
  ^bb79:  // 2 preds: ^bb77, ^bb80
    %406 = llvm.getelementptr %7[%400] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %407 = llvm.load volatile %406 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_197 = arith.constant 0 : i64
    %408 = arith.extui %396 : i32 to i64
    %409 = arith.addi %408, %c0_i64_197 : i64
    %c8_i64_198 = arith.constant 8 : i64
    %410 = arith.addi %409, %c8_i64_198 : i64
    %c0_i32_199 = arith.constant 0 : i32
    %411 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_199) : (!llvm.ptr, i32) -> i32
    %412 = arith.extui %411 : i32 to i64
    %c65536_i64_200 = arith.constant 65536 : i64
    %413 = arith.muli %412, %c65536_i64_200 : i64
    %414 = arith.cmpi ult, %410, %413 : i64
    cf.cond_br %414, ^bb81, ^bb82
  ^bb80:  // pred: ^bb77
    %c1_i32_201 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_201) : (i32) -> ()
    cf.br ^bb79
  ^bb81:  // 2 preds: ^bb79, ^bb82
    %415 = llvm.getelementptr %7[%409] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %407, %415 {alignment = 1 : i64} : i64, !llvm.ptr
    %416 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_202 = arith.constant 8 : i32
    %417 = arith.addi %416, %c8_i32_202 : i32
    %418 = llvm.load %0 : !llvm.ptr -> i32
    %c72_i32 = arith.constant 72 : i32
    %419 = arith.addi %418, %c72_i32 : i32
    %c0_i64_203 = arith.constant 0 : i64
    %420 = arith.extui %419 : i32 to i64
    %421 = arith.addi %420, %c0_i64_203 : i64
    %c8_i64_204 = arith.constant 8 : i64
    %422 = arith.addi %421, %c8_i64_204 : i64
    %c0_i32_205 = arith.constant 0 : i32
    %423 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_205) : (!llvm.ptr, i32) -> i32
    %424 = arith.extui %423 : i32 to i64
    %c65536_i64_206 = arith.constant 65536 : i64
    %425 = arith.muli %424, %c65536_i64_206 : i64
    %426 = arith.cmpi ult, %422, %425 : i64
    cf.cond_br %426, ^bb83, ^bb84
  ^bb82:  // pred: ^bb79
    %c1_i32_207 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_207) : (i32) -> ()
    cf.br ^bb81
  ^bb83:  // 2 preds: ^bb81, ^bb84
    %427 = llvm.getelementptr %7[%421] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %428 = llvm.load volatile %427 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_208 = arith.constant 0 : i64
    %429 = arith.extui %417 : i32 to i64
    %430 = arith.addi %429, %c0_i64_208 : i64
    %c8_i64_209 = arith.constant 8 : i64
    %431 = arith.addi %430, %c8_i64_209 : i64
    %c0_i32_210 = arith.constant 0 : i32
    %432 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_210) : (!llvm.ptr, i32) -> i32
    %433 = arith.extui %432 : i32 to i64
    %c65536_i64_211 = arith.constant 65536 : i64
    %434 = arith.muli %433, %c65536_i64_211 : i64
    %435 = arith.cmpi ult, %431, %434 : i64
    cf.cond_br %435, ^bb85, ^bb86
  ^bb84:  // pred: ^bb81
    %c1_i32_212 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_212) : (i32) -> ()
    cf.br ^bb83
  ^bb85:  // 2 preds: ^bb83, ^bb86
    %436 = llvm.getelementptr %7[%430] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %428, %436 {alignment = 1 : i64} : i64, !llvm.ptr
    %437 = llvm.load %1 : !llvm.ptr -> i32
    %438 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %439 = arith.addi %438, %c3_i32 : i32
    %c8_i64_213 = arith.constant 8 : i64
    %440 = arith.extui %437 : i32 to i64
    %441 = arith.addi %440, %c8_i64_213 : i64
    %c4_i64_214 = arith.constant 4 : i64
    %442 = arith.addi %441, %c4_i64_214 : i64
    %c0_i32_215 = arith.constant 0 : i32
    %443 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_215) : (!llvm.ptr, i32) -> i32
    %444 = arith.extui %443 : i32 to i64
    %c65536_i64_216 = arith.constant 65536 : i64
    %445 = arith.muli %444, %c65536_i64_216 : i64
    %446 = arith.cmpi ult, %442, %445 : i64
    cf.cond_br %446, ^bb87, ^bb88
  ^bb86:  // pred: ^bb83
    %c1_i32_217 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_217) : (i32) -> ()
    cf.br ^bb85
  ^bb87:  // 2 preds: ^bb85, ^bb88
    %447 = llvm.getelementptr %7[%441] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %439, %447 {alignment = 1 : i64} : i32, !llvm.ptr
    %448 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64_218 = arith.constant 20 : i64
    %449 = arith.extui %448 : i32 to i64
    %450 = arith.addi %449, %c20_i64_218 : i64
    %c4_i64_219 = arith.constant 4 : i64
    %451 = arith.addi %450, %c4_i64_219 : i64
    %c0_i32_220 = arith.constant 0 : i32
    %452 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_220) : (!llvm.ptr, i32) -> i32
    %453 = arith.extui %452 : i32 to i64
    %c65536_i64_221 = arith.constant 65536 : i64
    %454 = arith.muli %453, %c65536_i64_221 : i64
    %455 = arith.cmpi ult, %451, %454 : i64
    cf.cond_br %455, ^bb90, ^bb91
  ^bb88:  // pred: ^bb85
    %c1_i32_222 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_222) : (i32) -> ()
    cf.br ^bb87
  ^bb89:  // 2 preds: ^bb90, ^bb93
    cf.br ^bb2
  ^bb90:  // 2 preds: ^bb87, ^bb91
    %456 = llvm.getelementptr %7[%450] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %457 = llvm.load volatile %456 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %457, %0 : i32, !llvm.ptr
    %c0_i32_223 = arith.constant 0 : i32
    %458 = arith.cmpi eq, %457, %c0_i32_223 : i32
    %459 = arith.extui %458 : i1 to i32
    %c0_i32_224 = arith.constant 0 : i32
    %460 = arith.cmpi ne, %459, %c0_i32_224 : i32
    cf.cond_br %460, ^bb89, ^bb92
  ^bb91:  // pred: ^bb87
    %c1_i32_225 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_225) : (i32) -> ()
    cf.br ^bb90
  ^bb92:  // pred: ^bb90
    %461 = llvm.load %1 : !llvm.ptr -> i32
    %462 = llvm.load %0 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %463 = arith.addi %462, %c-1_i32 : i32
    %c20_i64_226 = arith.constant 20 : i64
    %464 = arith.extui %461 : i32 to i64
    %465 = arith.addi %464, %c20_i64_226 : i64
    %c4_i64_227 = arith.constant 4 : i64
    %466 = arith.addi %465, %c4_i64_227 : i64
    %c0_i32_228 = arith.constant 0 : i32
    %467 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_228) : (!llvm.ptr, i32) -> i32
    %468 = arith.extui %467 : i32 to i64
    %c65536_i64_229 = arith.constant 65536 : i64
    %469 = arith.muli %468, %c65536_i64_229 : i64
    %470 = arith.cmpi ult, %466, %469 : i64
    cf.cond_br %470, ^bb93, ^bb94
  ^bb93:  // 2 preds: ^bb92, ^bb94
    %471 = llvm.getelementptr %7[%465] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %463, %471 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb89
  ^bb94:  // pred: ^bb92
    %c1_i32_230 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_230) : (i32) -> ()
    cf.br ^bb93
  }
  func.func @f47(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %4 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %7 = arith.addi %6, %c4_i64 : i64
    %c0_i32 = arith.constant 0 : i32
    %8 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32) : (!llvm.ptr, i32) -> i32
    %9 = arith.extui %8 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %10 = arith.muli %9, %c65536_i64 : i64
    %11 = arith.cmpi ult, %7, %10 : i64
    cf.cond_br %11, ^bb4, ^bb5
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb4, ^bb6
    cf.br ^bb2
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %12 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %13 = llvm.load volatile %12 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %14 = arith.cmpi eq, %13, %c-2147483648_i32 : i32
    %15 = arith.extui %14 : i1 to i32
    %c0_i32_0 = arith.constant 0 : i32
    %16 = arith.cmpi ne, %15, %c0_i32_0 : i32
    cf.cond_br %16, ^bb3, ^bb6
  ^bb5:  // pred: ^bb1
    %c1_i32_1 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1) : (i32) -> ()
    cf.br ^bb4
  ^bb6:  // pred: ^bb4
    %17 = llvm.load %0 : !llvm.ptr -> i32
    call @f112(%arg0, %17) : (!llvm.ptr, i32) -> ()
    %18 = llvm.load %0 : !llvm.ptr -> i32
    call @f113(%arg0, %18) : (!llvm.ptr, i32) -> ()
    cf.br ^bb3
  }
  func.func @f48(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %10 = arith.extui %9 : i32 to i64
    %11 = arith.addi %10, %c20_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %12 = arith.addi %11, %c4_i64 : i64
    %c0_i32_5 = arith.constant 0 : i32
    %13 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_5) : (!llvm.ptr, i32) -> i32
    %14 = arith.extui %13 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %15 = arith.muli %14, %c65536_i64 : i64
    %16 = arith.cmpi ult, %12, %15 : i64
    cf.cond_br %16, ^bb4, ^bb5
  ^bb2:  // pred: ^bb113
    return
  ^bb3:  // 2 preds: ^bb6, ^bb8
    %17 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %18 = arith.extui %17 : i32 to i64
    %19 = arith.addi %18, %c16_i64 : i64
    %c4_i64_6 = arith.constant 4 : i64
    %20 = arith.addi %19, %c4_i64_6 : i64
    %c0_i32_7 = arith.constant 0 : i32
    %21 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_7) : (!llvm.ptr, i32) -> i32
    %22 = arith.extui %21 : i32 to i64
    %c65536_i64_8 = arith.constant 65536 : i64
    %23 = arith.muli %22, %c65536_i64_8 : i64
    %24 = arith.cmpi ult, %20, %23 : i64
    cf.cond_br %24, ^bb9, ^bb10
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %25 = llvm.getelementptr %8[%11] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %26 = llvm.load volatile %25 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %26, %2 : i32, !llvm.ptr
    %27 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %28 = arith.extui %27 : i32 to i64
    %29 = arith.addi %28, %c12_i64 : i64
    %c4_i64_9 = arith.constant 4 : i64
    %30 = arith.addi %29, %c4_i64_9 : i64
    %c0_i32_10 = arith.constant 0 : i32
    %31 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_10) : (!llvm.ptr, i32) -> i32
    %32 = arith.extui %31 : i32 to i64
    %c65536_i64_11 = arith.constant 65536 : i64
    %33 = arith.muli %32, %c65536_i64_11 : i64
    %34 = arith.cmpi ult, %30, %33 : i64
    cf.cond_br %34, ^bb6, ^bb7
  ^bb5:  // pred: ^bb1
    %c1_i32_12 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_12) : (i32) -> ()
    cf.br ^bb4
  ^bb6:  // 2 preds: ^bb4, ^bb7
    %35 = llvm.getelementptr %8[%29] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %36 = llvm.load volatile %35 {alignment = 1 : i64} : !llvm.ptr -> i32
    %37 = arith.cmpi eq, %26, %36 : i32
    %38 = arith.extui %37 : i1 to i32
    %c0_i32_13 = arith.constant 0 : i32
    %39 = arith.cmpi eq, %38, %c0_i32_13 : i32
    %40 = arith.extui %39 : i1 to i32
    %c0_i32_14 = arith.constant 0 : i32
    %41 = arith.cmpi ne, %40, %c0_i32_14 : i32
    cf.cond_br %41, ^bb3, ^bb8
  ^bb7:  // pred: ^bb4
    %c1_i32_15 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_15) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // pred: ^bb6
    %42 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %43 = arith.addi %42, %c12_i32 : i32
    call @f87(%arg0, %43) : (!llvm.ptr, i32) -> ()
    cf.br ^bb3
  ^bb9:  // 2 preds: ^bb3, ^bb10
    %44 = llvm.getelementptr %8[%19] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %45 = llvm.load volatile %44 {alignment = 1 : i64} : !llvm.ptr -> i32
    %46 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c31_i32 = arith.constant 31 : i32
    %47 = arith.cmpi ule, %c2_i32, %c31_i32 : i32
    %48 = scf.if %47 -> (i32) {
      %600 = arith.shli %46, %c2_i32 : i32
      scf.yield %600 : i32
    } else {
      %c0_i32_301 = arith.constant 0 : i32
      scf.yield %c0_i32_301 : i32
    }
    %49 = arith.addi %45, %48 : i32
    %c128_i32 = arith.constant 128 : i32
    %c0_i64 = arith.constant 0 : i64
    %50 = arith.extui %49 : i32 to i64
    %51 = arith.addi %50, %c0_i64 : i64
    %c4_i64_16 = arith.constant 4 : i64
    %52 = arith.addi %51, %c4_i64_16 : i64
    %c0_i32_17 = arith.constant 0 : i32
    %53 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_17) : (!llvm.ptr, i32) -> i32
    %54 = arith.extui %53 : i32 to i64
    %c65536_i64_18 = arith.constant 65536 : i64
    %55 = arith.muli %54, %c65536_i64_18 : i64
    %56 = arith.cmpi ult, %52, %55 : i64
    cf.cond_br %56, ^bb11, ^bb12
  ^bb10:  // pred: ^bb3
    %c1_i32_19 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_19) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %57 = llvm.getelementptr %8[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c128_i32, %57 {alignment = 1 : i64} : i32, !llvm.ptr
    %58 = llvm.load %1 : !llvm.ptr -> i32
    %59 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_20 = arith.constant 1 : i32
    %60 = arith.addi %59, %c1_i32_20 : i32
    %c20_i64_21 = arith.constant 20 : i64
    %61 = arith.extui %58 : i32 to i64
    %62 = arith.addi %61, %c20_i64_21 : i64
    %c4_i64_22 = arith.constant 4 : i64
    %63 = arith.addi %62, %c4_i64_22 : i64
    %c0_i32_23 = arith.constant 0 : i32
    %64 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_23) : (!llvm.ptr, i32) -> i32
    %65 = arith.extui %64 : i32 to i64
    %c65536_i64_24 = arith.constant 65536 : i64
    %66 = arith.muli %65, %c65536_i64_24 : i64
    %67 = arith.cmpi ult, %63, %66 : i64
    cf.cond_br %67, ^bb13, ^bb14
  ^bb12:  // pred: ^bb9
    %c1_i32_25 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_25) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %68 = llvm.getelementptr %8[%62] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %60, %68 {alignment = 1 : i64} : i32, !llvm.ptr
    %69 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %70 = arith.extui %69 : i32 to i64
    %71 = arith.addi %70, %c8_i64 : i64
    %c4_i64_26 = arith.constant 4 : i64
    %72 = arith.addi %71, %c4_i64_26 : i64
    %c0_i32_27 = arith.constant 0 : i32
    %73 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_27) : (!llvm.ptr, i32) -> i32
    %74 = arith.extui %73 : i32 to i64
    %c65536_i64_28 = arith.constant 65536 : i64
    %75 = arith.muli %74, %c65536_i64_28 : i64
    %76 = arith.cmpi ult, %72, %75 : i64
    cf.cond_br %76, ^bb16, ^bb17
  ^bb14:  // pred: ^bb11
    %c1_i32_29 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_29) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // 2 preds: ^bb18, ^bb20
    %77 = llvm.load %0 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %78 = arith.addi %77, %c32_i32 : i32
    llvm.store %78, %3 : i32, !llvm.ptr
    %79 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_30 = arith.constant 4 : i64
    %80 = arith.extui %79 : i32 to i64
    %81 = arith.addi %80, %c4_i64_30 : i64
    %c4_i64_31 = arith.constant 4 : i64
    %82 = arith.addi %81, %c4_i64_31 : i64
    %c0_i32_32 = arith.constant 0 : i32
    %83 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_32) : (!llvm.ptr, i32) -> i32
    %84 = arith.extui %83 : i32 to i64
    %c65536_i64_33 = arith.constant 65536 : i64
    %85 = arith.muli %84, %c65536_i64_33 : i64
    %86 = arith.cmpi ult, %82, %85 : i64
    cf.cond_br %86, ^bb21, ^bb22
  ^bb16:  // 2 preds: ^bb13, ^bb17
    %87 = llvm.getelementptr %8[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %88 = llvm.load volatile %87 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %88, %2 : i32, !llvm.ptr
    %89 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_34 = arith.constant 0 : i64
    %90 = arith.extui %89 : i32 to i64
    %91 = arith.addi %90, %c0_i64_34 : i64
    %c4_i64_35 = arith.constant 4 : i64
    %92 = arith.addi %91, %c4_i64_35 : i64
    %c0_i32_36 = arith.constant 0 : i32
    %93 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_36) : (!llvm.ptr, i32) -> i32
    %94 = arith.extui %93 : i32 to i64
    %c65536_i64_37 = arith.constant 65536 : i64
    %95 = arith.muli %94, %c65536_i64_37 : i64
    %96 = arith.cmpi ult, %92, %95 : i64
    cf.cond_br %96, ^bb18, ^bb19
  ^bb17:  // pred: ^bb13
    %c1_i32_38 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_38) : (i32) -> ()
    cf.br ^bb16
  ^bb18:  // 2 preds: ^bb16, ^bb19
    %97 = llvm.getelementptr %8[%91] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %98 = llvm.load volatile %97 {alignment = 1 : i64} : !llvm.ptr -> i32
    %99 = arith.cmpi eq, %88, %98 : i32
    %100 = arith.extui %99 : i1 to i32
    %c0_i32_39 = arith.constant 0 : i32
    %101 = arith.cmpi eq, %100, %c0_i32_39 : i32
    %102 = arith.extui %101 : i1 to i32
    %c0_i32_40 = arith.constant 0 : i32
    %103 = arith.cmpi ne, %102, %c0_i32_40 : i32
    cf.cond_br %103, ^bb15, ^bb20
  ^bb19:  // pred: ^bb16
    %c1_i32_41 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_41) : (i32) -> ()
    cf.br ^bb18
  ^bb20:  // pred: ^bb18
    %104 = llvm.load %1 : !llvm.ptr -> i32
    call @f88(%arg0, %104) : (!llvm.ptr, i32) -> ()
    cf.br ^bb15
  ^bb21:  // 2 preds: ^bb15, ^bb22
    %105 = llvm.getelementptr %8[%81] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %106 = llvm.load volatile %105 {alignment = 1 : i64} : !llvm.ptr -> i32
    %107 = llvm.load %2 : !llvm.ptr -> i32
    %c5_i32 = arith.constant 5 : i32
    %c31_i32_42 = arith.constant 31 : i32
    %108 = arith.cmpi ule, %c5_i32, %c31_i32_42 : i32
    %109 = scf.if %108 -> (i32) {
      %600 = arith.shli %107, %c5_i32 : i32
      scf.yield %600 : i32
    } else {
      %c0_i32_301 = arith.constant 0 : i32
      scf.yield %c0_i32_301 : i32
    }
    %110 = arith.addi %106, %109 : i32
    llvm.store %110, %4 : i32, !llvm.ptr
    %111 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_43 = arith.constant 0 : i64
    %112 = arith.extui %111 : i32 to i64
    %113 = arith.addi %112, %c0_i64_43 : i64
    %c8_i64_44 = arith.constant 8 : i64
    %114 = arith.addi %113, %c8_i64_44 : i64
    %c0_i32_45 = arith.constant 0 : i32
    %115 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_45) : (!llvm.ptr, i32) -> i32
    %116 = arith.extui %115 : i32 to i64
    %c65536_i64_46 = arith.constant 65536 : i64
    %117 = arith.muli %116, %c65536_i64_46 : i64
    %118 = arith.cmpi ult, %114, %117 : i64
    cf.cond_br %118, ^bb23, ^bb24
  ^bb22:  // pred: ^bb15
    %c1_i32_47 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_47) : (i32) -> ()
    cf.br ^bb21
  ^bb23:  // 2 preds: ^bb21, ^bb24
    %119 = llvm.getelementptr %8[%113] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %120 = llvm.load volatile %119 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_48 = arith.constant 0 : i64
    %121 = arith.extui %110 : i32 to i64
    %122 = arith.addi %121, %c0_i64_48 : i64
    %c8_i64_49 = arith.constant 8 : i64
    %123 = arith.addi %122, %c8_i64_49 : i64
    %c0_i32_50 = arith.constant 0 : i32
    %124 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_50) : (!llvm.ptr, i32) -> i32
    %125 = arith.extui %124 : i32 to i64
    %c65536_i64_51 = arith.constant 65536 : i64
    %126 = arith.muli %125, %c65536_i64_51 : i64
    %127 = arith.cmpi ult, %123, %126 : i64
    cf.cond_br %127, ^bb25, ^bb26
  ^bb24:  // pred: ^bb21
    %c1_i32_52 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_52) : (i32) -> ()
    cf.br ^bb23
  ^bb25:  // 2 preds: ^bb23, ^bb26
    %128 = llvm.getelementptr %8[%122] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %120, %128 {alignment = 1 : i64} : i64, !llvm.ptr
    %129 = llvm.load %4 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %130 = arith.addi %129, %c24_i32 : i32
    %131 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32_53 = arith.constant 24 : i32
    %132 = arith.addi %131, %c24_i32_53 : i32
    %c0_i64_54 = arith.constant 0 : i64
    %133 = arith.extui %132 : i32 to i64
    %134 = arith.addi %133, %c0_i64_54 : i64
    %c8_i64_55 = arith.constant 8 : i64
    %135 = arith.addi %134, %c8_i64_55 : i64
    %c0_i32_56 = arith.constant 0 : i32
    %136 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_56) : (!llvm.ptr, i32) -> i32
    %137 = arith.extui %136 : i32 to i64
    %c65536_i64_57 = arith.constant 65536 : i64
    %138 = arith.muli %137, %c65536_i64_57 : i64
    %139 = arith.cmpi ult, %135, %138 : i64
    cf.cond_br %139, ^bb27, ^bb28
  ^bb26:  // pred: ^bb23
    %c1_i32_58 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_58) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // 2 preds: ^bb25, ^bb28
    %140 = llvm.getelementptr %8[%134] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %141 = llvm.load volatile %140 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_59 = arith.constant 0 : i64
    %142 = arith.extui %130 : i32 to i64
    %143 = arith.addi %142, %c0_i64_59 : i64
    %c8_i64_60 = arith.constant 8 : i64
    %144 = arith.addi %143, %c8_i64_60 : i64
    %c0_i32_61 = arith.constant 0 : i32
    %145 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_61) : (!llvm.ptr, i32) -> i32
    %146 = arith.extui %145 : i32 to i64
    %c65536_i64_62 = arith.constant 65536 : i64
    %147 = arith.muli %146, %c65536_i64_62 : i64
    %148 = arith.cmpi ult, %144, %147 : i64
    cf.cond_br %148, ^bb29, ^bb30
  ^bb28:  // pred: ^bb25
    %c1_i32_63 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_63) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // 2 preds: ^bb27, ^bb30
    %149 = llvm.getelementptr %8[%143] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %141, %149 {alignment = 1 : i64} : i64, !llvm.ptr
    %150 = llvm.load %4 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %151 = arith.addi %150, %c16_i32 : i32
    %152 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_64 = arith.constant 16 : i32
    %153 = arith.addi %152, %c16_i32_64 : i32
    %c0_i64_65 = arith.constant 0 : i64
    %154 = arith.extui %153 : i32 to i64
    %155 = arith.addi %154, %c0_i64_65 : i64
    %c8_i64_66 = arith.constant 8 : i64
    %156 = arith.addi %155, %c8_i64_66 : i64
    %c0_i32_67 = arith.constant 0 : i32
    %157 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_67) : (!llvm.ptr, i32) -> i32
    %158 = arith.extui %157 : i32 to i64
    %c65536_i64_68 = arith.constant 65536 : i64
    %159 = arith.muli %158, %c65536_i64_68 : i64
    %160 = arith.cmpi ult, %156, %159 : i64
    cf.cond_br %160, ^bb31, ^bb32
  ^bb30:  // pred: ^bb27
    %c1_i32_69 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_69) : (i32) -> ()
    cf.br ^bb29
  ^bb31:  // 2 preds: ^bb29, ^bb32
    %161 = llvm.getelementptr %8[%155] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %162 = llvm.load volatile %161 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_70 = arith.constant 0 : i64
    %163 = arith.extui %151 : i32 to i64
    %164 = arith.addi %163, %c0_i64_70 : i64
    %c8_i64_71 = arith.constant 8 : i64
    %165 = arith.addi %164, %c8_i64_71 : i64
    %c0_i32_72 = arith.constant 0 : i32
    %166 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_72) : (!llvm.ptr, i32) -> i32
    %167 = arith.extui %166 : i32 to i64
    %c65536_i64_73 = arith.constant 65536 : i64
    %168 = arith.muli %167, %c65536_i64_73 : i64
    %169 = arith.cmpi ult, %165, %168 : i64
    cf.cond_br %169, ^bb33, ^bb34
  ^bb32:  // pred: ^bb29
    %c1_i32_74 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_74) : (i32) -> ()
    cf.br ^bb31
  ^bb33:  // 2 preds: ^bb31, ^bb34
    %170 = llvm.getelementptr %8[%164] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %162, %170 {alignment = 1 : i64} : i64, !llvm.ptr
    %171 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %172 = arith.addi %171, %c8_i32 : i32
    %173 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_75 = arith.constant 8 : i32
    %174 = arith.addi %173, %c8_i32_75 : i32
    %c0_i64_76 = arith.constant 0 : i64
    %175 = arith.extui %174 : i32 to i64
    %176 = arith.addi %175, %c0_i64_76 : i64
    %c8_i64_77 = arith.constant 8 : i64
    %177 = arith.addi %176, %c8_i64_77 : i64
    %c0_i32_78 = arith.constant 0 : i32
    %178 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_78) : (!llvm.ptr, i32) -> i32
    %179 = arith.extui %178 : i32 to i64
    %c65536_i64_79 = arith.constant 65536 : i64
    %180 = arith.muli %179, %c65536_i64_79 : i64
    %181 = arith.cmpi ult, %177, %180 : i64
    cf.cond_br %181, ^bb35, ^bb36
  ^bb34:  // pred: ^bb31
    %c1_i32_80 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_80) : (i32) -> ()
    cf.br ^bb33
  ^bb35:  // 2 preds: ^bb33, ^bb36
    %182 = llvm.getelementptr %8[%176] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %183 = llvm.load volatile %182 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_81 = arith.constant 0 : i64
    %184 = arith.extui %172 : i32 to i64
    %185 = arith.addi %184, %c0_i64_81 : i64
    %c8_i64_82 = arith.constant 8 : i64
    %186 = arith.addi %185, %c8_i64_82 : i64
    %c0_i32_83 = arith.constant 0 : i32
    %187 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_83) : (!llvm.ptr, i32) -> i32
    %188 = arith.extui %187 : i32 to i64
    %c65536_i64_84 = arith.constant 65536 : i64
    %189 = arith.muli %188, %c65536_i64_84 : i64
    %190 = arith.cmpi ult, %186, %189 : i64
    cf.cond_br %190, ^bb37, ^bb38
  ^bb36:  // pred: ^bb33
    %c1_i32_85 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_85) : (i32) -> ()
    cf.br ^bb35
  ^bb37:  // 2 preds: ^bb35, ^bb38
    %191 = llvm.getelementptr %8[%185] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %183, %191 {alignment = 1 : i64} : i64, !llvm.ptr
    %192 = llvm.load %1 : !llvm.ptr -> i32
    %193 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_86 = arith.constant 1 : i32
    %194 = arith.addi %193, %c1_i32_86 : i32
    llvm.store %194, %5 : i32, !llvm.ptr
    %c8_i64_87 = arith.constant 8 : i64
    %195 = arith.extui %192 : i32 to i64
    %196 = arith.addi %195, %c8_i64_87 : i64
    %c4_i64_88 = arith.constant 4 : i64
    %197 = arith.addi %196, %c4_i64_88 : i64
    %c0_i32_89 = arith.constant 0 : i32
    %198 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_89) : (!llvm.ptr, i32) -> i32
    %199 = arith.extui %198 : i32 to i64
    %c65536_i64_90 = arith.constant 65536 : i64
    %200 = arith.muli %199, %c65536_i64_90 : i64
    %201 = arith.cmpi ult, %197, %200 : i64
    cf.cond_br %201, ^bb39, ^bb40
  ^bb38:  // pred: ^bb35
    %c1_i32_91 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_91) : (i32) -> ()
    cf.br ^bb37
  ^bb39:  // 2 preds: ^bb37, ^bb40
    %202 = llvm.getelementptr %8[%196] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %194, %202 {alignment = 1 : i64} : i32, !llvm.ptr
    %203 = llvm.load %5 : !llvm.ptr -> i32
    %204 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_92 = arith.constant 0 : i64
    %205 = arith.extui %204 : i32 to i64
    %206 = arith.addi %205, %c0_i64_92 : i64
    %c4_i64_93 = arith.constant 4 : i64
    %207 = arith.addi %206, %c4_i64_93 : i64
    %c0_i32_94 = arith.constant 0 : i32
    %208 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_94) : (!llvm.ptr, i32) -> i32
    %209 = arith.extui %208 : i32 to i64
    %c65536_i64_95 = arith.constant 65536 : i64
    %210 = arith.muli %209, %c65536_i64_95 : i64
    %211 = arith.cmpi ult, %207, %210 : i64
    cf.cond_br %211, ^bb42, ^bb43
  ^bb40:  // pred: ^bb37
    %c1_i32_96 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_96) : (i32) -> ()
    cf.br ^bb39
  ^bb41:  // 2 preds: ^bb42, ^bb44
    %212 = llvm.load %0 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %213 = arith.addi %212, %c64_i32 : i32
    llvm.store %213, %4 : i32, !llvm.ptr
    %214 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_97 = arith.constant 4 : i64
    %215 = arith.extui %214 : i32 to i64
    %216 = arith.addi %215, %c4_i64_97 : i64
    %c4_i64_98 = arith.constant 4 : i64
    %217 = arith.addi %216, %c4_i64_98 : i64
    %c0_i32_99 = arith.constant 0 : i32
    %218 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_99) : (!llvm.ptr, i32) -> i32
    %219 = arith.extui %218 : i32 to i64
    %c65536_i64_100 = arith.constant 65536 : i64
    %220 = arith.muli %219, %c65536_i64_100 : i64
    %221 = arith.cmpi ult, %217, %220 : i64
    cf.cond_br %221, ^bb45, ^bb46
  ^bb42:  // 2 preds: ^bb39, ^bb43
    %222 = llvm.getelementptr %8[%206] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %223 = llvm.load volatile %222 {alignment = 1 : i64} : !llvm.ptr -> i32
    %224 = arith.cmpi eq, %203, %223 : i32
    %225 = arith.extui %224 : i1 to i32
    %c0_i32_101 = arith.constant 0 : i32
    %226 = arith.cmpi eq, %225, %c0_i32_101 : i32
    %227 = arith.extui %226 : i1 to i32
    %c0_i32_102 = arith.constant 0 : i32
    %228 = arith.cmpi ne, %227, %c0_i32_102 : i32
    cf.cond_br %228, ^bb41, ^bb44
  ^bb43:  // pred: ^bb39
    %c1_i32_103 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_103) : (i32) -> ()
    cf.br ^bb42
  ^bb44:  // pred: ^bb42
    %229 = llvm.load %1 : !llvm.ptr -> i32
    call @f88(%arg0, %229) : (!llvm.ptr, i32) -> ()
    cf.br ^bb41
  ^bb45:  // 2 preds: ^bb41, ^bb46
    %230 = llvm.getelementptr %8[%216] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %231 = llvm.load volatile %230 {alignment = 1 : i64} : !llvm.ptr -> i32
    %232 = llvm.load %5 : !llvm.ptr -> i32
    %c5_i32_104 = arith.constant 5 : i32
    %c31_i32_105 = arith.constant 31 : i32
    %233 = arith.cmpi ule, %c5_i32_104, %c31_i32_105 : i32
    %234 = scf.if %233 -> (i32) {
      %600 = arith.shli %232, %c5_i32_104 : i32
      scf.yield %600 : i32
    } else {
      %c0_i32_301 = arith.constant 0 : i32
      scf.yield %c0_i32_301 : i32
    }
    %235 = arith.addi %231, %234 : i32
    llvm.store %235, %5 : i32, !llvm.ptr
    %236 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_106 = arith.constant 0 : i64
    %237 = arith.extui %236 : i32 to i64
    %238 = arith.addi %237, %c0_i64_106 : i64
    %c8_i64_107 = arith.constant 8 : i64
    %239 = arith.addi %238, %c8_i64_107 : i64
    %c0_i32_108 = arith.constant 0 : i32
    %240 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_108) : (!llvm.ptr, i32) -> i32
    %241 = arith.extui %240 : i32 to i64
    %c65536_i64_109 = arith.constant 65536 : i64
    %242 = arith.muli %241, %c65536_i64_109 : i64
    %243 = arith.cmpi ult, %239, %242 : i64
    cf.cond_br %243, ^bb47, ^bb48
  ^bb46:  // pred: ^bb41
    %c1_i32_110 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_110) : (i32) -> ()
    cf.br ^bb45
  ^bb47:  // 2 preds: ^bb45, ^bb48
    %244 = llvm.getelementptr %8[%238] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %245 = llvm.load volatile %244 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_111 = arith.constant 0 : i64
    %246 = arith.extui %235 : i32 to i64
    %247 = arith.addi %246, %c0_i64_111 : i64
    %c8_i64_112 = arith.constant 8 : i64
    %248 = arith.addi %247, %c8_i64_112 : i64
    %c0_i32_113 = arith.constant 0 : i32
    %249 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_113) : (!llvm.ptr, i32) -> i32
    %250 = arith.extui %249 : i32 to i64
    %c65536_i64_114 = arith.constant 65536 : i64
    %251 = arith.muli %250, %c65536_i64_114 : i64
    %252 = arith.cmpi ult, %248, %251 : i64
    cf.cond_br %252, ^bb49, ^bb50
  ^bb48:  // pred: ^bb45
    %c1_i32_115 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_115) : (i32) -> ()
    cf.br ^bb47
  ^bb49:  // 2 preds: ^bb47, ^bb50
    %253 = llvm.getelementptr %8[%247] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %245, %253 {alignment = 1 : i64} : i64, !llvm.ptr
    %254 = llvm.load %5 : !llvm.ptr -> i32
    %c24_i32_116 = arith.constant 24 : i32
    %255 = arith.addi %254, %c24_i32_116 : i32
    %256 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32_117 = arith.constant 24 : i32
    %257 = arith.addi %256, %c24_i32_117 : i32
    %c0_i64_118 = arith.constant 0 : i64
    %258 = arith.extui %257 : i32 to i64
    %259 = arith.addi %258, %c0_i64_118 : i64
    %c8_i64_119 = arith.constant 8 : i64
    %260 = arith.addi %259, %c8_i64_119 : i64
    %c0_i32_120 = arith.constant 0 : i32
    %261 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_120) : (!llvm.ptr, i32) -> i32
    %262 = arith.extui %261 : i32 to i64
    %c65536_i64_121 = arith.constant 65536 : i64
    %263 = arith.muli %262, %c65536_i64_121 : i64
    %264 = arith.cmpi ult, %260, %263 : i64
    cf.cond_br %264, ^bb51, ^bb52
  ^bb50:  // pred: ^bb47
    %c1_i32_122 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_122) : (i32) -> ()
    cf.br ^bb49
  ^bb51:  // 2 preds: ^bb49, ^bb52
    %265 = llvm.getelementptr %8[%259] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %266 = llvm.load volatile %265 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_123 = arith.constant 0 : i64
    %267 = arith.extui %255 : i32 to i64
    %268 = arith.addi %267, %c0_i64_123 : i64
    %c8_i64_124 = arith.constant 8 : i64
    %269 = arith.addi %268, %c8_i64_124 : i64
    %c0_i32_125 = arith.constant 0 : i32
    %270 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_125) : (!llvm.ptr, i32) -> i32
    %271 = arith.extui %270 : i32 to i64
    %c65536_i64_126 = arith.constant 65536 : i64
    %272 = arith.muli %271, %c65536_i64_126 : i64
    %273 = arith.cmpi ult, %269, %272 : i64
    cf.cond_br %273, ^bb53, ^bb54
  ^bb52:  // pred: ^bb49
    %c1_i32_127 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_127) : (i32) -> ()
    cf.br ^bb51
  ^bb53:  // 2 preds: ^bb51, ^bb54
    %274 = llvm.getelementptr %8[%268] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %266, %274 {alignment = 1 : i64} : i64, !llvm.ptr
    %275 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32_128 = arith.constant 16 : i32
    %276 = arith.addi %275, %c16_i32_128 : i32
    %277 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_129 = arith.constant 16 : i32
    %278 = arith.addi %277, %c16_i32_129 : i32
    %c0_i64_130 = arith.constant 0 : i64
    %279 = arith.extui %278 : i32 to i64
    %280 = arith.addi %279, %c0_i64_130 : i64
    %c8_i64_131 = arith.constant 8 : i64
    %281 = arith.addi %280, %c8_i64_131 : i64
    %c0_i32_132 = arith.constant 0 : i32
    %282 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_132) : (!llvm.ptr, i32) -> i32
    %283 = arith.extui %282 : i32 to i64
    %c65536_i64_133 = arith.constant 65536 : i64
    %284 = arith.muli %283, %c65536_i64_133 : i64
    %285 = arith.cmpi ult, %281, %284 : i64
    cf.cond_br %285, ^bb55, ^bb56
  ^bb54:  // pred: ^bb51
    %c1_i32_134 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_134) : (i32) -> ()
    cf.br ^bb53
  ^bb55:  // 2 preds: ^bb53, ^bb56
    %286 = llvm.getelementptr %8[%280] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %287 = llvm.load volatile %286 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_135 = arith.constant 0 : i64
    %288 = arith.extui %276 : i32 to i64
    %289 = arith.addi %288, %c0_i64_135 : i64
    %c8_i64_136 = arith.constant 8 : i64
    %290 = arith.addi %289, %c8_i64_136 : i64
    %c0_i32_137 = arith.constant 0 : i32
    %291 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_137) : (!llvm.ptr, i32) -> i32
    %292 = arith.extui %291 : i32 to i64
    %c65536_i64_138 = arith.constant 65536 : i64
    %293 = arith.muli %292, %c65536_i64_138 : i64
    %294 = arith.cmpi ult, %290, %293 : i64
    cf.cond_br %294, ^bb57, ^bb58
  ^bb56:  // pred: ^bb53
    %c1_i32_139 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_139) : (i32) -> ()
    cf.br ^bb55
  ^bb57:  // 2 preds: ^bb55, ^bb58
    %295 = llvm.getelementptr %8[%289] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %287, %295 {alignment = 1 : i64} : i64, !llvm.ptr
    %296 = llvm.load %5 : !llvm.ptr -> i32
    %c8_i32_140 = arith.constant 8 : i32
    %297 = arith.addi %296, %c8_i32_140 : i32
    %298 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_141 = arith.constant 8 : i32
    %299 = arith.addi %298, %c8_i32_141 : i32
    %c0_i64_142 = arith.constant 0 : i64
    %300 = arith.extui %299 : i32 to i64
    %301 = arith.addi %300, %c0_i64_142 : i64
    %c8_i64_143 = arith.constant 8 : i64
    %302 = arith.addi %301, %c8_i64_143 : i64
    %c0_i32_144 = arith.constant 0 : i32
    %303 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_144) : (!llvm.ptr, i32) -> i32
    %304 = arith.extui %303 : i32 to i64
    %c65536_i64_145 = arith.constant 65536 : i64
    %305 = arith.muli %304, %c65536_i64_145 : i64
    %306 = arith.cmpi ult, %302, %305 : i64
    cf.cond_br %306, ^bb59, ^bb60
  ^bb58:  // pred: ^bb55
    %c1_i32_146 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_146) : (i32) -> ()
    cf.br ^bb57
  ^bb59:  // 2 preds: ^bb57, ^bb60
    %307 = llvm.getelementptr %8[%301] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %308 = llvm.load volatile %307 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_147 = arith.constant 0 : i64
    %309 = arith.extui %297 : i32 to i64
    %310 = arith.addi %309, %c0_i64_147 : i64
    %c8_i64_148 = arith.constant 8 : i64
    %311 = arith.addi %310, %c8_i64_148 : i64
    %c0_i32_149 = arith.constant 0 : i32
    %312 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_149) : (!llvm.ptr, i32) -> i32
    %313 = arith.extui %312 : i32 to i64
    %c65536_i64_150 = arith.constant 65536 : i64
    %314 = arith.muli %313, %c65536_i64_150 : i64
    %315 = arith.cmpi ult, %311, %314 : i64
    cf.cond_br %315, ^bb61, ^bb62
  ^bb60:  // pred: ^bb57
    %c1_i32_151 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_151) : (i32) -> ()
    cf.br ^bb59
  ^bb61:  // 2 preds: ^bb59, ^bb62
    %316 = llvm.getelementptr %8[%310] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %308, %316 {alignment = 1 : i64} : i64, !llvm.ptr
    %317 = llvm.load %1 : !llvm.ptr -> i32
    %318 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i32_152 = arith.constant 2 : i32
    %319 = arith.addi %318, %c2_i32_152 : i32
    llvm.store %319, %3 : i32, !llvm.ptr
    %c8_i64_153 = arith.constant 8 : i64
    %320 = arith.extui %317 : i32 to i64
    %321 = arith.addi %320, %c8_i64_153 : i64
    %c4_i64_154 = arith.constant 4 : i64
    %322 = arith.addi %321, %c4_i64_154 : i64
    %c0_i32_155 = arith.constant 0 : i32
    %323 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_155) : (!llvm.ptr, i32) -> i32
    %324 = arith.extui %323 : i32 to i64
    %c65536_i64_156 = arith.constant 65536 : i64
    %325 = arith.muli %324, %c65536_i64_156 : i64
    %326 = arith.cmpi ult, %322, %325 : i64
    cf.cond_br %326, ^bb63, ^bb64
  ^bb62:  // pred: ^bb59
    %c1_i32_157 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_157) : (i32) -> ()
    cf.br ^bb61
  ^bb63:  // 2 preds: ^bb61, ^bb64
    %327 = llvm.getelementptr %8[%321] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %319, %327 {alignment = 1 : i64} : i32, !llvm.ptr
    %328 = llvm.load %3 : !llvm.ptr -> i32
    %329 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_158 = arith.constant 0 : i64
    %330 = arith.extui %329 : i32 to i64
    %331 = arith.addi %330, %c0_i64_158 : i64
    %c4_i64_159 = arith.constant 4 : i64
    %332 = arith.addi %331, %c4_i64_159 : i64
    %c0_i32_160 = arith.constant 0 : i32
    %333 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_160) : (!llvm.ptr, i32) -> i32
    %334 = arith.extui %333 : i32 to i64
    %c65536_i64_161 = arith.constant 65536 : i64
    %335 = arith.muli %334, %c65536_i64_161 : i64
    %336 = arith.cmpi ult, %332, %335 : i64
    cf.cond_br %336, ^bb66, ^bb67
  ^bb64:  // pred: ^bb61
    %c1_i32_162 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_162) : (i32) -> ()
    cf.br ^bb63
  ^bb65:  // 2 preds: ^bb66, ^bb68
    %337 = llvm.load %0 : !llvm.ptr -> i32
    %c96_i32 = arith.constant 96 : i32
    %338 = arith.addi %337, %c96_i32 : i32
    llvm.store %338, %0 : i32, !llvm.ptr
    %339 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_163 = arith.constant 4 : i64
    %340 = arith.extui %339 : i32 to i64
    %341 = arith.addi %340, %c4_i64_163 : i64
    %c4_i64_164 = arith.constant 4 : i64
    %342 = arith.addi %341, %c4_i64_164 : i64
    %c0_i32_165 = arith.constant 0 : i32
    %343 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_165) : (!llvm.ptr, i32) -> i32
    %344 = arith.extui %343 : i32 to i64
    %c65536_i64_166 = arith.constant 65536 : i64
    %345 = arith.muli %344, %c65536_i64_166 : i64
    %346 = arith.cmpi ult, %342, %345 : i64
    cf.cond_br %346, ^bb69, ^bb70
  ^bb66:  // 2 preds: ^bb63, ^bb67
    %347 = llvm.getelementptr %8[%331] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %348 = llvm.load volatile %347 {alignment = 1 : i64} : !llvm.ptr -> i32
    %349 = arith.cmpi eq, %328, %348 : i32
    %350 = arith.extui %349 : i1 to i32
    %c0_i32_167 = arith.constant 0 : i32
    %351 = arith.cmpi eq, %350, %c0_i32_167 : i32
    %352 = arith.extui %351 : i1 to i32
    %c0_i32_168 = arith.constant 0 : i32
    %353 = arith.cmpi ne, %352, %c0_i32_168 : i32
    cf.cond_br %353, ^bb65, ^bb68
  ^bb67:  // pred: ^bb63
    %c1_i32_169 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_169) : (i32) -> ()
    cf.br ^bb66
  ^bb68:  // pred: ^bb66
    %354 = llvm.load %1 : !llvm.ptr -> i32
    call @f88(%arg0, %354) : (!llvm.ptr, i32) -> ()
    cf.br ^bb65
  ^bb69:  // 2 preds: ^bb65, ^bb70
    %355 = llvm.getelementptr %8[%341] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %356 = llvm.load volatile %355 {alignment = 1 : i64} : !llvm.ptr -> i32
    %357 = llvm.load %3 : !llvm.ptr -> i32
    %c5_i32_170 = arith.constant 5 : i32
    %c31_i32_171 = arith.constant 31 : i32
    %358 = arith.cmpi ule, %c5_i32_170, %c31_i32_171 : i32
    %359 = scf.if %358 -> (i32) {
      %600 = arith.shli %357, %c5_i32_170 : i32
      scf.yield %600 : i32
    } else {
      %c0_i32_301 = arith.constant 0 : i32
      scf.yield %c0_i32_301 : i32
    }
    %360 = arith.addi %356, %359 : i32
    llvm.store %360, %3 : i32, !llvm.ptr
    %361 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_172 = arith.constant 0 : i64
    %362 = arith.extui %361 : i32 to i64
    %363 = arith.addi %362, %c0_i64_172 : i64
    %c8_i64_173 = arith.constant 8 : i64
    %364 = arith.addi %363, %c8_i64_173 : i64
    %c0_i32_174 = arith.constant 0 : i32
    %365 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_174) : (!llvm.ptr, i32) -> i32
    %366 = arith.extui %365 : i32 to i64
    %c65536_i64_175 = arith.constant 65536 : i64
    %367 = arith.muli %366, %c65536_i64_175 : i64
    %368 = arith.cmpi ult, %364, %367 : i64
    cf.cond_br %368, ^bb71, ^bb72
  ^bb70:  // pred: ^bb65
    %c1_i32_176 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_176) : (i32) -> ()
    cf.br ^bb69
  ^bb71:  // 2 preds: ^bb69, ^bb72
    %369 = llvm.getelementptr %8[%363] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %370 = llvm.load volatile %369 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_177 = arith.constant 0 : i64
    %371 = arith.extui %360 : i32 to i64
    %372 = arith.addi %371, %c0_i64_177 : i64
    %c8_i64_178 = arith.constant 8 : i64
    %373 = arith.addi %372, %c8_i64_178 : i64
    %c0_i32_179 = arith.constant 0 : i32
    %374 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_179) : (!llvm.ptr, i32) -> i32
    %375 = arith.extui %374 : i32 to i64
    %c65536_i64_180 = arith.constant 65536 : i64
    %376 = arith.muli %375, %c65536_i64_180 : i64
    %377 = arith.cmpi ult, %373, %376 : i64
    cf.cond_br %377, ^bb73, ^bb74
  ^bb72:  // pred: ^bb69
    %c1_i32_181 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_181) : (i32) -> ()
    cf.br ^bb71
  ^bb73:  // 2 preds: ^bb71, ^bb74
    %378 = llvm.getelementptr %8[%372] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %370, %378 {alignment = 1 : i64} : i64, !llvm.ptr
    %379 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32_182 = arith.constant 24 : i32
    %380 = arith.addi %379, %c24_i32_182 : i32
    %381 = llvm.load %4 : !llvm.ptr -> i32
    %c24_i32_183 = arith.constant 24 : i32
    %382 = arith.addi %381, %c24_i32_183 : i32
    %c0_i64_184 = arith.constant 0 : i64
    %383 = arith.extui %382 : i32 to i64
    %384 = arith.addi %383, %c0_i64_184 : i64
    %c8_i64_185 = arith.constant 8 : i64
    %385 = arith.addi %384, %c8_i64_185 : i64
    %c0_i32_186 = arith.constant 0 : i32
    %386 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_186) : (!llvm.ptr, i32) -> i32
    %387 = arith.extui %386 : i32 to i64
    %c65536_i64_187 = arith.constant 65536 : i64
    %388 = arith.muli %387, %c65536_i64_187 : i64
    %389 = arith.cmpi ult, %385, %388 : i64
    cf.cond_br %389, ^bb75, ^bb76
  ^bb74:  // pred: ^bb71
    %c1_i32_188 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_188) : (i32) -> ()
    cf.br ^bb73
  ^bb75:  // 2 preds: ^bb73, ^bb76
    %390 = llvm.getelementptr %8[%384] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %391 = llvm.load volatile %390 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_189 = arith.constant 0 : i64
    %392 = arith.extui %380 : i32 to i64
    %393 = arith.addi %392, %c0_i64_189 : i64
    %c8_i64_190 = arith.constant 8 : i64
    %394 = arith.addi %393, %c8_i64_190 : i64
    %c0_i32_191 = arith.constant 0 : i32
    %395 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_191) : (!llvm.ptr, i32) -> i32
    %396 = arith.extui %395 : i32 to i64
    %c65536_i64_192 = arith.constant 65536 : i64
    %397 = arith.muli %396, %c65536_i64_192 : i64
    %398 = arith.cmpi ult, %394, %397 : i64
    cf.cond_br %398, ^bb77, ^bb78
  ^bb76:  // pred: ^bb73
    %c1_i32_193 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_193) : (i32) -> ()
    cf.br ^bb75
  ^bb77:  // 2 preds: ^bb75, ^bb78
    %399 = llvm.getelementptr %8[%393] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %391, %399 {alignment = 1 : i64} : i64, !llvm.ptr
    %400 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_194 = arith.constant 16 : i32
    %401 = arith.addi %400, %c16_i32_194 : i32
    %402 = llvm.load %4 : !llvm.ptr -> i32
    %c16_i32_195 = arith.constant 16 : i32
    %403 = arith.addi %402, %c16_i32_195 : i32
    %c0_i64_196 = arith.constant 0 : i64
    %404 = arith.extui %403 : i32 to i64
    %405 = arith.addi %404, %c0_i64_196 : i64
    %c8_i64_197 = arith.constant 8 : i64
    %406 = arith.addi %405, %c8_i64_197 : i64
    %c0_i32_198 = arith.constant 0 : i32
    %407 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_198) : (!llvm.ptr, i32) -> i32
    %408 = arith.extui %407 : i32 to i64
    %c65536_i64_199 = arith.constant 65536 : i64
    %409 = arith.muli %408, %c65536_i64_199 : i64
    %410 = arith.cmpi ult, %406, %409 : i64
    cf.cond_br %410, ^bb79, ^bb80
  ^bb78:  // pred: ^bb75
    %c1_i32_200 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_200) : (i32) -> ()
    cf.br ^bb77
  ^bb79:  // 2 preds: ^bb77, ^bb80
    %411 = llvm.getelementptr %8[%405] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %412 = llvm.load volatile %411 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_201 = arith.constant 0 : i64
    %413 = arith.extui %401 : i32 to i64
    %414 = arith.addi %413, %c0_i64_201 : i64
    %c8_i64_202 = arith.constant 8 : i64
    %415 = arith.addi %414, %c8_i64_202 : i64
    %c0_i32_203 = arith.constant 0 : i32
    %416 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_203) : (!llvm.ptr, i32) -> i32
    %417 = arith.extui %416 : i32 to i64
    %c65536_i64_204 = arith.constant 65536 : i64
    %418 = arith.muli %417, %c65536_i64_204 : i64
    %419 = arith.cmpi ult, %415, %418 : i64
    cf.cond_br %419, ^bb81, ^bb82
  ^bb80:  // pred: ^bb77
    %c1_i32_205 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_205) : (i32) -> ()
    cf.br ^bb79
  ^bb81:  // 2 preds: ^bb79, ^bb82
    %420 = llvm.getelementptr %8[%414] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %412, %420 {alignment = 1 : i64} : i64, !llvm.ptr
    %421 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_206 = arith.constant 8 : i32
    %422 = arith.addi %421, %c8_i32_206 : i32
    %423 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i32_207 = arith.constant 8 : i32
    %424 = arith.addi %423, %c8_i32_207 : i32
    %c0_i64_208 = arith.constant 0 : i64
    %425 = arith.extui %424 : i32 to i64
    %426 = arith.addi %425, %c0_i64_208 : i64
    %c8_i64_209 = arith.constant 8 : i64
    %427 = arith.addi %426, %c8_i64_209 : i64
    %c0_i32_210 = arith.constant 0 : i32
    %428 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_210) : (!llvm.ptr, i32) -> i32
    %429 = arith.extui %428 : i32 to i64
    %c65536_i64_211 = arith.constant 65536 : i64
    %430 = arith.muli %429, %c65536_i64_211 : i64
    %431 = arith.cmpi ult, %427, %430 : i64
    cf.cond_br %431, ^bb83, ^bb84
  ^bb82:  // pred: ^bb79
    %c1_i32_212 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_212) : (i32) -> ()
    cf.br ^bb81
  ^bb83:  // 2 preds: ^bb81, ^bb84
    %432 = llvm.getelementptr %8[%426] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %433 = llvm.load volatile %432 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_213 = arith.constant 0 : i64
    %434 = arith.extui %422 : i32 to i64
    %435 = arith.addi %434, %c0_i64_213 : i64
    %c8_i64_214 = arith.constant 8 : i64
    %436 = arith.addi %435, %c8_i64_214 : i64
    %c0_i32_215 = arith.constant 0 : i32
    %437 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_215) : (!llvm.ptr, i32) -> i32
    %438 = arith.extui %437 : i32 to i64
    %c65536_i64_216 = arith.constant 65536 : i64
    %439 = arith.muli %438, %c65536_i64_216 : i64
    %440 = arith.cmpi ult, %436, %439 : i64
    cf.cond_br %440, ^bb85, ^bb86
  ^bb84:  // pred: ^bb81
    %c1_i32_217 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_217) : (i32) -> ()
    cf.br ^bb83
  ^bb85:  // 2 preds: ^bb83, ^bb86
    %441 = llvm.getelementptr %8[%435] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %433, %441 {alignment = 1 : i64} : i64, !llvm.ptr
    %442 = llvm.load %1 : !llvm.ptr -> i32
    %443 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %444 = arith.addi %443, %c3_i32 : i32
    llvm.store %444, %3 : i32, !llvm.ptr
    %c8_i64_218 = arith.constant 8 : i64
    %445 = arith.extui %442 : i32 to i64
    %446 = arith.addi %445, %c8_i64_218 : i64
    %c4_i64_219 = arith.constant 4 : i64
    %447 = arith.addi %446, %c4_i64_219 : i64
    %c0_i32_220 = arith.constant 0 : i32
    %448 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_220) : (!llvm.ptr, i32) -> i32
    %449 = arith.extui %448 : i32 to i64
    %c65536_i64_221 = arith.constant 65536 : i64
    %450 = arith.muli %449, %c65536_i64_221 : i64
    %451 = arith.cmpi ult, %447, %450 : i64
    cf.cond_br %451, ^bb87, ^bb88
  ^bb86:  // pred: ^bb83
    %c1_i32_222 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_222) : (i32) -> ()
    cf.br ^bb85
  ^bb87:  // 2 preds: ^bb85, ^bb88
    %452 = llvm.getelementptr %8[%446] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %444, %452 {alignment = 1 : i64} : i32, !llvm.ptr
    %453 = llvm.load %3 : !llvm.ptr -> i32
    %454 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_223 = arith.constant 0 : i64
    %455 = arith.extui %454 : i32 to i64
    %456 = arith.addi %455, %c0_i64_223 : i64
    %c4_i64_224 = arith.constant 4 : i64
    %457 = arith.addi %456, %c4_i64_224 : i64
    %c0_i32_225 = arith.constant 0 : i32
    %458 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_225) : (!llvm.ptr, i32) -> i32
    %459 = arith.extui %458 : i32 to i64
    %c65536_i64_226 = arith.constant 65536 : i64
    %460 = arith.muli %459, %c65536_i64_226 : i64
    %461 = arith.cmpi ult, %457, %460 : i64
    cf.cond_br %461, ^bb90, ^bb91
  ^bb88:  // pred: ^bb85
    %c1_i32_227 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_227) : (i32) -> ()
    cf.br ^bb87
  ^bb89:  // 2 preds: ^bb90, ^bb92
    %462 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_228 = arith.constant 4 : i64
    %463 = arith.extui %462 : i32 to i64
    %464 = arith.addi %463, %c4_i64_228 : i64
    %c4_i64_229 = arith.constant 4 : i64
    %465 = arith.addi %464, %c4_i64_229 : i64
    %c0_i32_230 = arith.constant 0 : i32
    %466 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_230) : (!llvm.ptr, i32) -> i32
    %467 = arith.extui %466 : i32 to i64
    %c65536_i64_231 = arith.constant 65536 : i64
    %468 = arith.muli %467, %c65536_i64_231 : i64
    %469 = arith.cmpi ult, %465, %468 : i64
    cf.cond_br %469, ^bb93, ^bb94
  ^bb90:  // 2 preds: ^bb87, ^bb91
    %470 = llvm.getelementptr %8[%456] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %471 = llvm.load volatile %470 {alignment = 1 : i64} : !llvm.ptr -> i32
    %472 = arith.cmpi eq, %453, %471 : i32
    %473 = arith.extui %472 : i1 to i32
    %c0_i32_232 = arith.constant 0 : i32
    %474 = arith.cmpi eq, %473, %c0_i32_232 : i32
    %475 = arith.extui %474 : i1 to i32
    %c0_i32_233 = arith.constant 0 : i32
    %476 = arith.cmpi ne, %475, %c0_i32_233 : i32
    cf.cond_br %476, ^bb89, ^bb92
  ^bb91:  // pred: ^bb87
    %c1_i32_234 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_234) : (i32) -> ()
    cf.br ^bb90
  ^bb92:  // pred: ^bb90
    %477 = llvm.load %1 : !llvm.ptr -> i32
    call @f88(%arg0, %477) : (!llvm.ptr, i32) -> ()
    cf.br ^bb89
  ^bb93:  // 2 preds: ^bb89, ^bb94
    %478 = llvm.getelementptr %8[%464] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %479 = llvm.load volatile %478 {alignment = 1 : i64} : !llvm.ptr -> i32
    %480 = llvm.load %3 : !llvm.ptr -> i32
    %c5_i32_235 = arith.constant 5 : i32
    %c31_i32_236 = arith.constant 31 : i32
    %481 = arith.cmpi ule, %c5_i32_235, %c31_i32_236 : i32
    %482 = scf.if %481 -> (i32) {
      %600 = arith.shli %480, %c5_i32_235 : i32
      scf.yield %600 : i32
    } else {
      %c0_i32_301 = arith.constant 0 : i32
      scf.yield %c0_i32_301 : i32
    }
    %483 = arith.addi %479, %482 : i32
    llvm.store %483, %3 : i32, !llvm.ptr
    %484 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_237 = arith.constant 0 : i64
    %485 = arith.extui %484 : i32 to i64
    %486 = arith.addi %485, %c0_i64_237 : i64
    %c8_i64_238 = arith.constant 8 : i64
    %487 = arith.addi %486, %c8_i64_238 : i64
    %c0_i32_239 = arith.constant 0 : i32
    %488 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_239) : (!llvm.ptr, i32) -> i32
    %489 = arith.extui %488 : i32 to i64
    %c65536_i64_240 = arith.constant 65536 : i64
    %490 = arith.muli %489, %c65536_i64_240 : i64
    %491 = arith.cmpi ult, %487, %490 : i64
    cf.cond_br %491, ^bb95, ^bb96
  ^bb94:  // pred: ^bb89
    %c1_i32_241 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_241) : (i32) -> ()
    cf.br ^bb93
  ^bb95:  // 2 preds: ^bb93, ^bb96
    %492 = llvm.getelementptr %8[%486] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %493 = llvm.load volatile %492 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_242 = arith.constant 0 : i64
    %494 = arith.extui %483 : i32 to i64
    %495 = arith.addi %494, %c0_i64_242 : i64
    %c8_i64_243 = arith.constant 8 : i64
    %496 = arith.addi %495, %c8_i64_243 : i64
    %c0_i32_244 = arith.constant 0 : i32
    %497 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_244) : (!llvm.ptr, i32) -> i32
    %498 = arith.extui %497 : i32 to i64
    %c65536_i64_245 = arith.constant 65536 : i64
    %499 = arith.muli %498, %c65536_i64_245 : i64
    %500 = arith.cmpi ult, %496, %499 : i64
    cf.cond_br %500, ^bb97, ^bb98
  ^bb96:  // pred: ^bb93
    %c1_i32_246 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_246) : (i32) -> ()
    cf.br ^bb95
  ^bb97:  // 2 preds: ^bb95, ^bb98
    %501 = llvm.getelementptr %8[%495] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %493, %501 {alignment = 1 : i64} : i64, !llvm.ptr
    %502 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32_247 = arith.constant 24 : i32
    %503 = arith.addi %502, %c24_i32_247 : i32
    %504 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32_248 = arith.constant 24 : i32
    %505 = arith.addi %504, %c24_i32_248 : i32
    %c0_i64_249 = arith.constant 0 : i64
    %506 = arith.extui %505 : i32 to i64
    %507 = arith.addi %506, %c0_i64_249 : i64
    %c8_i64_250 = arith.constant 8 : i64
    %508 = arith.addi %507, %c8_i64_250 : i64
    %c0_i32_251 = arith.constant 0 : i32
    %509 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_251) : (!llvm.ptr, i32) -> i32
    %510 = arith.extui %509 : i32 to i64
    %c65536_i64_252 = arith.constant 65536 : i64
    %511 = arith.muli %510, %c65536_i64_252 : i64
    %512 = arith.cmpi ult, %508, %511 : i64
    cf.cond_br %512, ^bb99, ^bb100
  ^bb98:  // pred: ^bb95
    %c1_i32_253 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_253) : (i32) -> ()
    cf.br ^bb97
  ^bb99:  // 2 preds: ^bb97, ^bb100
    %513 = llvm.getelementptr %8[%507] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %514 = llvm.load volatile %513 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_254 = arith.constant 0 : i64
    %515 = arith.extui %503 : i32 to i64
    %516 = arith.addi %515, %c0_i64_254 : i64
    %c8_i64_255 = arith.constant 8 : i64
    %517 = arith.addi %516, %c8_i64_255 : i64
    %c0_i32_256 = arith.constant 0 : i32
    %518 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_256) : (!llvm.ptr, i32) -> i32
    %519 = arith.extui %518 : i32 to i64
    %c65536_i64_257 = arith.constant 65536 : i64
    %520 = arith.muli %519, %c65536_i64_257 : i64
    %521 = arith.cmpi ult, %517, %520 : i64
    cf.cond_br %521, ^bb101, ^bb102
  ^bb100:  // pred: ^bb97
    %c1_i32_258 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_258) : (i32) -> ()
    cf.br ^bb99
  ^bb101:  // 2 preds: ^bb99, ^bb102
    %522 = llvm.getelementptr %8[%516] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %514, %522 {alignment = 1 : i64} : i64, !llvm.ptr
    %523 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_259 = arith.constant 16 : i32
    %524 = arith.addi %523, %c16_i32_259 : i32
    %525 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_260 = arith.constant 16 : i32
    %526 = arith.addi %525, %c16_i32_260 : i32
    %c0_i64_261 = arith.constant 0 : i64
    %527 = arith.extui %526 : i32 to i64
    %528 = arith.addi %527, %c0_i64_261 : i64
    %c8_i64_262 = arith.constant 8 : i64
    %529 = arith.addi %528, %c8_i64_262 : i64
    %c0_i32_263 = arith.constant 0 : i32
    %530 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_263) : (!llvm.ptr, i32) -> i32
    %531 = arith.extui %530 : i32 to i64
    %c65536_i64_264 = arith.constant 65536 : i64
    %532 = arith.muli %531, %c65536_i64_264 : i64
    %533 = arith.cmpi ult, %529, %532 : i64
    cf.cond_br %533, ^bb103, ^bb104
  ^bb102:  // pred: ^bb99
    %c1_i32_265 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_265) : (i32) -> ()
    cf.br ^bb101
  ^bb103:  // 2 preds: ^bb101, ^bb104
    %534 = llvm.getelementptr %8[%528] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %535 = llvm.load volatile %534 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_266 = arith.constant 0 : i64
    %536 = arith.extui %524 : i32 to i64
    %537 = arith.addi %536, %c0_i64_266 : i64
    %c8_i64_267 = arith.constant 8 : i64
    %538 = arith.addi %537, %c8_i64_267 : i64
    %c0_i32_268 = arith.constant 0 : i32
    %539 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_268) : (!llvm.ptr, i32) -> i32
    %540 = arith.extui %539 : i32 to i64
    %c65536_i64_269 = arith.constant 65536 : i64
    %541 = arith.muli %540, %c65536_i64_269 : i64
    %542 = arith.cmpi ult, %538, %541 : i64
    cf.cond_br %542, ^bb105, ^bb106
  ^bb104:  // pred: ^bb101
    %c1_i32_270 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_270) : (i32) -> ()
    cf.br ^bb103
  ^bb105:  // 2 preds: ^bb103, ^bb106
    %543 = llvm.getelementptr %8[%537] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %535, %543 {alignment = 1 : i64} : i64, !llvm.ptr
    %544 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_271 = arith.constant 8 : i32
    %545 = arith.addi %544, %c8_i32_271 : i32
    %546 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_272 = arith.constant 8 : i32
    %547 = arith.addi %546, %c8_i32_272 : i32
    %c0_i64_273 = arith.constant 0 : i64
    %548 = arith.extui %547 : i32 to i64
    %549 = arith.addi %548, %c0_i64_273 : i64
    %c8_i64_274 = arith.constant 8 : i64
    %550 = arith.addi %549, %c8_i64_274 : i64
    %c0_i32_275 = arith.constant 0 : i32
    %551 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_275) : (!llvm.ptr, i32) -> i32
    %552 = arith.extui %551 : i32 to i64
    %c65536_i64_276 = arith.constant 65536 : i64
    %553 = arith.muli %552, %c65536_i64_276 : i64
    %554 = arith.cmpi ult, %550, %553 : i64
    cf.cond_br %554, ^bb107, ^bb108
  ^bb106:  // pred: ^bb103
    %c1_i32_277 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_277) : (i32) -> ()
    cf.br ^bb105
  ^bb107:  // 2 preds: ^bb105, ^bb108
    %555 = llvm.getelementptr %8[%549] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %556 = llvm.load volatile %555 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_278 = arith.constant 0 : i64
    %557 = arith.extui %545 : i32 to i64
    %558 = arith.addi %557, %c0_i64_278 : i64
    %c8_i64_279 = arith.constant 8 : i64
    %559 = arith.addi %558, %c8_i64_279 : i64
    %c0_i32_280 = arith.constant 0 : i32
    %560 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_280) : (!llvm.ptr, i32) -> i32
    %561 = arith.extui %560 : i32 to i64
    %c65536_i64_281 = arith.constant 65536 : i64
    %562 = arith.muli %561, %c65536_i64_281 : i64
    %563 = arith.cmpi ult, %559, %562 : i64
    cf.cond_br %563, ^bb109, ^bb110
  ^bb108:  // pred: ^bb105
    %c1_i32_282 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_282) : (i32) -> ()
    cf.br ^bb107
  ^bb109:  // 2 preds: ^bb107, ^bb110
    %564 = llvm.getelementptr %8[%558] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %556, %564 {alignment = 1 : i64} : i64, !llvm.ptr
    %565 = llvm.load %1 : !llvm.ptr -> i32
    %566 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %567 = arith.addi %566, %c4_i32 : i32
    %c8_i64_283 = arith.constant 8 : i64
    %568 = arith.extui %565 : i32 to i64
    %569 = arith.addi %568, %c8_i64_283 : i64
    %c4_i64_284 = arith.constant 4 : i64
    %570 = arith.addi %569, %c4_i64_284 : i64
    %c0_i32_285 = arith.constant 0 : i32
    %571 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_285) : (!llvm.ptr, i32) -> i32
    %572 = arith.extui %571 : i32 to i64
    %c65536_i64_286 = arith.constant 65536 : i64
    %573 = arith.muli %572, %c65536_i64_286 : i64
    %574 = arith.cmpi ult, %570, %573 : i64
    cf.cond_br %574, ^bb111, ^bb112
  ^bb110:  // pred: ^bb107
    %c1_i32_287 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_287) : (i32) -> ()
    cf.br ^bb109
  ^bb111:  // 2 preds: ^bb109, ^bb112
    %575 = llvm.getelementptr %8[%569] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %567, %575 {alignment = 1 : i64} : i32, !llvm.ptr
    %576 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64_288 = arith.constant 20 : i64
    %577 = arith.extui %576 : i32 to i64
    %578 = arith.addi %577, %c20_i64_288 : i64
    %c4_i64_289 = arith.constant 4 : i64
    %579 = arith.addi %578, %c4_i64_289 : i64
    %c0_i32_290 = arith.constant 0 : i32
    %580 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_290) : (!llvm.ptr, i32) -> i32
    %581 = arith.extui %580 : i32 to i64
    %c65536_i64_291 = arith.constant 65536 : i64
    %582 = arith.muli %581, %c65536_i64_291 : i64
    %583 = arith.cmpi ult, %579, %582 : i64
    cf.cond_br %583, ^bb114, ^bb115
  ^bb112:  // pred: ^bb109
    %c1_i32_292 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_292) : (i32) -> ()
    cf.br ^bb111
  ^bb113:  // 2 preds: ^bb114, ^bb117
    cf.br ^bb2
  ^bb114:  // 2 preds: ^bb111, ^bb115
    %584 = llvm.getelementptr %8[%578] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %585 = llvm.load volatile %584 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %585, %0 : i32, !llvm.ptr
    %c0_i32_293 = arith.constant 0 : i32
    %586 = arith.cmpi eq, %585, %c0_i32_293 : i32
    %587 = arith.extui %586 : i1 to i32
    %c0_i32_294 = arith.constant 0 : i32
    %588 = arith.cmpi ne, %587, %c0_i32_294 : i32
    cf.cond_br %588, ^bb113, ^bb116
  ^bb115:  // pred: ^bb111
    %c1_i32_295 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_295) : (i32) -> ()
    cf.br ^bb114
  ^bb116:  // pred: ^bb114
    %589 = llvm.load %1 : !llvm.ptr -> i32
    %590 = llvm.load %0 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %591 = arith.addi %590, %c-1_i32 : i32
    %c20_i64_296 = arith.constant 20 : i64
    %592 = arith.extui %589 : i32 to i64
    %593 = arith.addi %592, %c20_i64_296 : i64
    %c4_i64_297 = arith.constant 4 : i64
    %594 = arith.addi %593, %c4_i64_297 : i64
    %c0_i32_298 = arith.constant 0 : i32
    %595 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_298) : (!llvm.ptr, i32) -> i32
    %596 = arith.extui %595 : i32 to i64
    %c65536_i64_299 = arith.constant 65536 : i64
    %597 = arith.muli %596, %c65536_i64_299 : i64
    %598 = arith.cmpi ult, %594, %597 : i64
    cf.cond_br %598, ^bb117, ^bb118
  ^bb117:  // 2 preds: ^bb116, ^bb118
    %599 = llvm.getelementptr %8[%593] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %591, %599 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb113
  ^bb118:  // pred: ^bb116
    %c1_i32_300 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_300) : (i32) -> ()
    cf.br ^bb117
  }
  func.func @f49(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %c1_i32_9 = arith.constant 1 : i32
    %10 = llvm.alloca %c1_i32_9 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %10 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_10 = arith.constant 1 : i32
    %11 = llvm.alloca %c1_i32_10 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %11 : i64, !llvm.ptr
    %c1_i32_11 = arith.constant 1 : i32
    %12 = llvm.alloca %c1_i32_11 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %12 : i64, !llvm.ptr
    %c1_i32_12 = arith.constant 1 : i32
    %13 = llvm.alloca %c1_i32_12 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %13 : i64, !llvm.ptr
    %c1_i32_13 = arith.constant 1 : i32
    %14 = llvm.alloca %c1_i32_13 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %14 : i64, !llvm.ptr
    %15 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %18 = llvm.getelementptr %17[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %19 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %20 = llvm.load %16 : !llvm.ptr -> i32
    %c416_i32 = arith.constant 416 : i32
    %21 = arith.subi %20, %c416_i32 : i32
    llvm.store %21, %5 : i32, !llvm.ptr
    llvm.store %21, %16 : i32, !llvm.ptr
    %22 = llvm.load %5 : !llvm.ptr -> i32
    %c200_i32 = arith.constant 200 : i32
    %23 = arith.addi %22, %c200_i32 : i32
    %c16_i32 = arith.constant 16 : i32
    %24 = arith.addi %23, %c16_i32 : i32
    %25 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_14 = arith.constant 16 : i32
    %26 = arith.addi %25, %c16_i32_14 : i32
    %c0_i64_15 = arith.constant 0 : i64
    %27 = arith.extui %26 : i32 to i64
    %28 = arith.addi %27, %c0_i64_15 : i64
    %c4_i64 = arith.constant 4 : i64
    %29 = arith.addi %28, %c4_i64 : i64
    %c0_i32_16 = arith.constant 0 : i32
    %30 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_16) : (!llvm.ptr, i32) -> i32
    %31 = arith.extui %30 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %32 = arith.muli %31, %c65536_i64 : i64
    %33 = arith.cmpi ult, %29, %32 : i64
    cf.cond_br %33, ^bb3, ^bb4
  ^bb2:  // pred: ^bb36
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %34 = llvm.getelementptr %19[%28] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %35 = llvm.load volatile %34 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_17 = arith.constant 0 : i64
    %36 = arith.extui %24 : i32 to i64
    %37 = arith.addi %36, %c0_i64_17 : i64
    %c4_i64_18 = arith.constant 4 : i64
    %38 = arith.addi %37, %c4_i64_18 : i64
    %c0_i32_19 = arith.constant 0 : i32
    %39 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_19) : (!llvm.ptr, i32) -> i32
    %40 = arith.extui %39 : i32 to i64
    %c65536_i64_20 = arith.constant 65536 : i64
    %41 = arith.muli %40, %c65536_i64_20 : i64
    %42 = arith.cmpi ult, %38, %41 : i64
    cf.cond_br %42, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c1_i32_21 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_21) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %43 = llvm.getelementptr %19[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %35, %43 {alignment = 1 : i64} : i32, !llvm.ptr
    %44 = llvm.load %5 : !llvm.ptr -> i32
    %c200_i32_22 = arith.constant 200 : i32
    %45 = arith.addi %44, %c200_i32_22 : i32
    %c8_i32 = arith.constant 8 : i32
    %46 = arith.addi %45, %c8_i32 : i32
    %47 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_23 = arith.constant 8 : i32
    %48 = arith.addi %47, %c8_i32_23 : i32
    %c0_i64_24 = arith.constant 0 : i64
    %49 = arith.extui %48 : i32 to i64
    %50 = arith.addi %49, %c0_i64_24 : i64
    %c8_i64 = arith.constant 8 : i64
    %51 = arith.addi %50, %c8_i64 : i64
    %c0_i32_25 = arith.constant 0 : i32
    %52 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_25) : (!llvm.ptr, i32) -> i32
    %53 = arith.extui %52 : i32 to i64
    %c65536_i64_26 = arith.constant 65536 : i64
    %54 = arith.muli %53, %c65536_i64_26 : i64
    %55 = arith.cmpi ult, %51, %54 : i64
    cf.cond_br %55, ^bb7, ^bb8
  ^bb6:  // pred: ^bb3
    %c1_i32_27 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_27) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %56 = llvm.getelementptr %19[%50] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %57 = llvm.load volatile %56 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_28 = arith.constant 0 : i64
    %58 = arith.extui %46 : i32 to i64
    %59 = arith.addi %58, %c0_i64_28 : i64
    %c8_i64_29 = arith.constant 8 : i64
    %60 = arith.addi %59, %c8_i64_29 : i64
    %c0_i32_30 = arith.constant 0 : i32
    %61 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_30) : (!llvm.ptr, i32) -> i32
    %62 = arith.extui %61 : i32 to i64
    %c65536_i64_31 = arith.constant 65536 : i64
    %63 = arith.muli %62, %c65536_i64_31 : i64
    %64 = arith.cmpi ult, %60, %63 : i64
    cf.cond_br %64, ^bb9, ^bb10
  ^bb8:  // pred: ^bb5
    %c1_i32_32 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_32) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %65 = llvm.getelementptr %19[%59] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %57, %65 {alignment = 1 : i64} : i64, !llvm.ptr
    %66 = llvm.load %5 : !llvm.ptr -> i32
    %67 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_33 = arith.constant 0 : i64
    %68 = arith.extui %67 : i32 to i64
    %69 = arith.addi %68, %c0_i64_33 : i64
    %c8_i64_34 = arith.constant 8 : i64
    %70 = arith.addi %69, %c8_i64_34 : i64
    %c0_i32_35 = arith.constant 0 : i32
    %71 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_35) : (!llvm.ptr, i32) -> i32
    %72 = arith.extui %71 : i32 to i64
    %c65536_i64_36 = arith.constant 65536 : i64
    %73 = arith.muli %72, %c65536_i64_36 : i64
    %74 = arith.cmpi ult, %70, %73 : i64
    cf.cond_br %74, ^bb11, ^bb12
  ^bb10:  // pred: ^bb7
    %c1_i32_37 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_37) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %75 = llvm.getelementptr %19[%69] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %76 = llvm.load volatile %75 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c200_i64 = arith.constant 200 : i64
    %77 = arith.extui %66 : i32 to i64
    %78 = arith.addi %77, %c200_i64 : i64
    %c8_i64_38 = arith.constant 8 : i64
    %79 = arith.addi %78, %c8_i64_38 : i64
    %c0_i32_39 = arith.constant 0 : i32
    %80 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_39) : (!llvm.ptr, i32) -> i32
    %81 = arith.extui %80 : i32 to i64
    %c65536_i64_40 = arith.constant 65536 : i64
    %82 = arith.muli %81, %c65536_i64_40 : i64
    %83 = arith.cmpi ult, %79, %82 : i64
    cf.cond_br %83, ^bb13, ^bb14
  ^bb12:  // pred: ^bb9
    %c1_i32_41 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_41) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %84 = llvm.getelementptr %19[%78] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %76, %84 {alignment = 1 : i64} : i64, !llvm.ptr
    %85 = llvm.load %5 : !llvm.ptr -> i32
    %86 = llvm.load %1 : !llvm.ptr -> i32
    %87 = llvm.load %5 : !llvm.ptr -> i32
    %c200_i32_42 = arith.constant 200 : i32
    %88 = arith.addi %87, %c200_i32_42 : i32
    call @f33(%arg0, %85, %86, %88) : (!llvm.ptr, i32, i32, i32) -> ()
    %89 = llvm.load %5 : !llvm.ptr -> i32
    %c32_i64 = arith.constant 32 : i64
    %90 = arith.extui %89 : i32 to i64
    %91 = arith.addi %90, %c32_i64 : i64
    %c4_i64_43 = arith.constant 4 : i64
    %92 = arith.addi %91, %c4_i64_43 : i64
    %c0_i32_44 = arith.constant 0 : i32
    %93 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_44) : (!llvm.ptr, i32) -> i32
    %94 = arith.extui %93 : i32 to i64
    %c65536_i64_45 = arith.constant 65536 : i64
    %95 = arith.muli %94, %c65536_i64_45 : i64
    %96 = arith.cmpi ult, %92, %95 : i64
    cf.cond_br %96, ^bb17, ^bb18
  ^bb14:  // pred: ^bb11
    %c1_i32_46 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_46) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // 2 preds: ^bb16, ^bb19
    %c24_i32 = arith.constant 24 : i32
    llvm.store %c24_i32, %7 : i32, !llvm.ptr
    %97 = llvm.load %5 : !llvm.ptr -> i32
    %c80_i32 = arith.constant 80 : i32
    %98 = arith.addi %97, %c80_i32 : i32
    %c24_i32_47 = arith.constant 24 : i32
    %99 = arith.addi %98, %c24_i32_47 : i32
    %100 = llvm.load %6 : !llvm.ptr -> i32
    %c24_i32_48 = arith.constant 24 : i32
    %101 = arith.addi %100, %c24_i32_48 : i32
    %c0_i64_49 = arith.constant 0 : i64
    %102 = arith.extui %101 : i32 to i64
    %103 = arith.addi %102, %c0_i64_49 : i64
    %c8_i64_50 = arith.constant 8 : i64
    %104 = arith.addi %103, %c8_i64_50 : i64
    %c0_i32_51 = arith.constant 0 : i32
    %105 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_51) : (!llvm.ptr, i32) -> i32
    %106 = arith.extui %105 : i32 to i64
    %c65536_i64_52 = arith.constant 65536 : i64
    %107 = arith.muli %106, %c65536_i64_52 : i64
    %108 = arith.cmpi ult, %104, %107 : i64
    cf.cond_br %108, ^bb20, ^bb21
  ^bb16:  // pred: ^bb17
    %109 = llvm.load %5 : !llvm.ptr -> i32
    %c40_i32 = arith.constant 40 : i32
    %110 = arith.addi %109, %c40_i32 : i32
    llvm.store %110, %6 : i32, !llvm.ptr
    cf.br ^bb15
  ^bb17:  // 2 preds: ^bb13, ^bb18
    %111 = llvm.getelementptr %19[%91] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %112 = llvm.load volatile %111 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_53 = arith.constant 0 : i32
    %113 = arith.cmpi ne, %112, %c0_i32_53 : i32
    cf.cond_br %113, ^bb16, ^bb19
  ^bb18:  // pred: ^bb13
    %c1_i32_54 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_54) : (i32) -> ()
    cf.br ^bb17
  ^bb19:  // pred: ^bb17
    %114 = llvm.load %5 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %115 = arith.addi %114, %c32_i32 : i32
    %116 = llvm.load %5 : !llvm.ptr -> i32
    %117 = call @f0(%arg0, %115, %116) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %117, %6 : i32, !llvm.ptr
    cf.br ^bb15
  ^bb20:  // 2 preds: ^bb15, ^bb21
    %118 = llvm.getelementptr %19[%103] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %119 = llvm.load volatile %118 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_55 = arith.constant 0 : i64
    %120 = arith.extui %99 : i32 to i64
    %121 = arith.addi %120, %c0_i64_55 : i64
    %c8_i64_56 = arith.constant 8 : i64
    %122 = arith.addi %121, %c8_i64_56 : i64
    %c0_i32_57 = arith.constant 0 : i32
    %123 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_57) : (!llvm.ptr, i32) -> i32
    %124 = arith.extui %123 : i32 to i64
    %c65536_i64_58 = arith.constant 65536 : i64
    %125 = arith.muli %124, %c65536_i64_58 : i64
    %126 = arith.cmpi ult, %122, %125 : i64
    cf.cond_br %126, ^bb22, ^bb23
  ^bb21:  // pred: ^bb15
    %c1_i32_59 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_59) : (i32) -> ()
    cf.br ^bb20
  ^bb22:  // 2 preds: ^bb20, ^bb23
    %127 = llvm.getelementptr %19[%121] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %119, %127 {alignment = 1 : i64} : i64, !llvm.ptr
    %128 = llvm.load %5 : !llvm.ptr -> i32
    %c80_i32_60 = arith.constant 80 : i32
    %129 = arith.addi %128, %c80_i32_60 : i32
    %c16_i32_61 = arith.constant 16 : i32
    %130 = arith.addi %129, %c16_i32_61 : i32
    %131 = llvm.load %6 : !llvm.ptr -> i32
    %c16_i32_62 = arith.constant 16 : i32
    %132 = arith.addi %131, %c16_i32_62 : i32
    %c0_i64_63 = arith.constant 0 : i64
    %133 = arith.extui %132 : i32 to i64
    %134 = arith.addi %133, %c0_i64_63 : i64
    %c8_i64_64 = arith.constant 8 : i64
    %135 = arith.addi %134, %c8_i64_64 : i64
    %c0_i32_65 = arith.constant 0 : i32
    %136 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_65) : (!llvm.ptr, i32) -> i32
    %137 = arith.extui %136 : i32 to i64
    %c65536_i64_66 = arith.constant 65536 : i64
    %138 = arith.muli %137, %c65536_i64_66 : i64
    %139 = arith.cmpi ult, %135, %138 : i64
    cf.cond_br %139, ^bb24, ^bb25
  ^bb23:  // pred: ^bb20
    %c1_i32_67 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_67) : (i32) -> ()
    cf.br ^bb22
  ^bb24:  // 2 preds: ^bb22, ^bb25
    %140 = llvm.getelementptr %19[%134] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %141 = llvm.load volatile %140 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_68 = arith.constant 0 : i64
    %142 = arith.extui %130 : i32 to i64
    %143 = arith.addi %142, %c0_i64_68 : i64
    %c8_i64_69 = arith.constant 8 : i64
    %144 = arith.addi %143, %c8_i64_69 : i64
    %c0_i32_70 = arith.constant 0 : i32
    %145 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_70) : (!llvm.ptr, i32) -> i32
    %146 = arith.extui %145 : i32 to i64
    %c65536_i64_71 = arith.constant 65536 : i64
    %147 = arith.muli %146, %c65536_i64_71 : i64
    %148 = arith.cmpi ult, %144, %147 : i64
    cf.cond_br %148, ^bb26, ^bb27
  ^bb25:  // pred: ^bb22
    %c1_i32_72 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_72) : (i32) -> ()
    cf.br ^bb24
  ^bb26:  // 2 preds: ^bb24, ^bb27
    %149 = llvm.getelementptr %19[%143] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %141, %149 {alignment = 1 : i64} : i64, !llvm.ptr
    %150 = llvm.load %5 : !llvm.ptr -> i32
    %c80_i32_73 = arith.constant 80 : i32
    %151 = arith.addi %150, %c80_i32_73 : i32
    %c8_i32_74 = arith.constant 8 : i32
    %152 = arith.addi %151, %c8_i32_74 : i32
    %153 = llvm.load %6 : !llvm.ptr -> i32
    %c8_i32_75 = arith.constant 8 : i32
    %154 = arith.addi %153, %c8_i32_75 : i32
    %c0_i64_76 = arith.constant 0 : i64
    %155 = arith.extui %154 : i32 to i64
    %156 = arith.addi %155, %c0_i64_76 : i64
    %c8_i64_77 = arith.constant 8 : i64
    %157 = arith.addi %156, %c8_i64_77 : i64
    %c0_i32_78 = arith.constant 0 : i32
    %158 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_78) : (!llvm.ptr, i32) -> i32
    %159 = arith.extui %158 : i32 to i64
    %c65536_i64_79 = arith.constant 65536 : i64
    %160 = arith.muli %159, %c65536_i64_79 : i64
    %161 = arith.cmpi ult, %157, %160 : i64
    cf.cond_br %161, ^bb28, ^bb29
  ^bb27:  // pred: ^bb24
    %c1_i32_80 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_80) : (i32) -> ()
    cf.br ^bb26
  ^bb28:  // 2 preds: ^bb26, ^bb29
    %162 = llvm.getelementptr %19[%156] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %163 = llvm.load volatile %162 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_81 = arith.constant 0 : i64
    %164 = arith.extui %152 : i32 to i64
    %165 = arith.addi %164, %c0_i64_81 : i64
    %c8_i64_82 = arith.constant 8 : i64
    %166 = arith.addi %165, %c8_i64_82 : i64
    %c0_i32_83 = arith.constant 0 : i32
    %167 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_83) : (!llvm.ptr, i32) -> i32
    %168 = arith.extui %167 : i32 to i64
    %c65536_i64_84 = arith.constant 65536 : i64
    %169 = arith.muli %168, %c65536_i64_84 : i64
    %170 = arith.cmpi ult, %166, %169 : i64
    cf.cond_br %170, ^bb30, ^bb31
  ^bb29:  // pred: ^bb26
    %c1_i32_85 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_85) : (i32) -> ()
    cf.br ^bb28
  ^bb30:  // 2 preds: ^bb28, ^bb31
    %171 = llvm.getelementptr %19[%165] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %163, %171 {alignment = 1 : i64} : i64, !llvm.ptr
    %172 = llvm.load %5 : !llvm.ptr -> i32
    %173 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_86 = arith.constant 0 : i64
    %174 = arith.extui %173 : i32 to i64
    %175 = arith.addi %174, %c0_i64_86 : i64
    %c8_i64_87 = arith.constant 8 : i64
    %176 = arith.addi %175, %c8_i64_87 : i64
    %c0_i32_88 = arith.constant 0 : i32
    %177 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_88) : (!llvm.ptr, i32) -> i32
    %178 = arith.extui %177 : i32 to i64
    %c65536_i64_89 = arith.constant 65536 : i64
    %179 = arith.muli %178, %c65536_i64_89 : i64
    %180 = arith.cmpi ult, %176, %179 : i64
    cf.cond_br %180, ^bb32, ^bb33
  ^bb31:  // pred: ^bb28
    %c1_i32_90 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_90) : (i32) -> ()
    cf.br ^bb30
  ^bb32:  // 2 preds: ^bb30, ^bb33
    %181 = llvm.getelementptr %19[%175] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %182 = llvm.load volatile %181 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c80_i64 = arith.constant 80 : i64
    %183 = arith.extui %172 : i32 to i64
    %184 = arith.addi %183, %c80_i64 : i64
    %c8_i64_91 = arith.constant 8 : i64
    %185 = arith.addi %184, %c8_i64_91 : i64
    %c0_i32_92 = arith.constant 0 : i32
    %186 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_92) : (!llvm.ptr, i32) -> i32
    %187 = arith.extui %186 : i32 to i64
    %c65536_i64_93 = arith.constant 65536 : i64
    %188 = arith.muli %187, %c65536_i64_93 : i64
    %189 = arith.cmpi ult, %185, %188 : i64
    cf.cond_br %189, ^bb34, ^bb35
  ^bb33:  // pred: ^bb30
    %c1_i32_94 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_94) : (i32) -> ()
    cf.br ^bb32
  ^bb34:  // 2 preds: ^bb32, ^bb35
    %190 = llvm.getelementptr %19[%184] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %182, %190 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb40
  ^bb35:  // pred: ^bb32
    %c1_i32_95 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_95) : (i32) -> ()
    cf.br ^bb34
  ^bb36:  // 2 preds: ^bb223, ^bb269
    %191 = llvm.load %5 : !llvm.ptr -> i32
    %c416_i32_96 = arith.constant 416 : i32
    %192 = arith.addi %191, %c416_i32_96 : i32
    llvm.store %192, %16 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb37:  // pred: ^bb39
    %193 = llvm.load %5 : !llvm.ptr -> i32
    %c192_i32 = arith.constant 192 : i32
    %194 = arith.addi %193, %c192_i32 : i32
    %195 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_97 = arith.constant 16 : i32
    %196 = arith.addi %195, %c16_i32_97 : i32
    %c0_i64_98 = arith.constant 0 : i64
    %197 = arith.extui %196 : i32 to i64
    %198 = arith.addi %197, %c0_i64_98 : i64
    %c4_i64_99 = arith.constant 4 : i64
    %199 = arith.addi %198, %c4_i64_99 : i64
    %c0_i32_100 = arith.constant 0 : i32
    %200 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_100) : (!llvm.ptr, i32) -> i32
    %201 = arith.extui %200 : i32 to i64
    %c65536_i64_101 = arith.constant 65536 : i64
    %202 = arith.muli %201, %c65536_i64_101 : i64
    %203 = arith.cmpi ult, %199, %202 : i64
    cf.cond_br %203, ^bb225, ^bb226
  ^bb38:  // 2 preds: ^bb40, ^bb47
    %204 = llvm.load %5 : !llvm.ptr -> i32
    %c384_i32 = arith.constant 384 : i32
    %205 = arith.addi %204, %c384_i32 : i32
    %c24_i32_102 = arith.constant 24 : i32
    %206 = arith.addi %205, %c24_i32_102 : i32
    %207 = llvm.load %6 : !llvm.ptr -> i32
    %c24_i32_103 = arith.constant 24 : i32
    %208 = arith.addi %207, %c24_i32_103 : i32
    %c0_i64_104 = arith.constant 0 : i64
    %209 = arith.extui %208 : i32 to i64
    %210 = arith.addi %209, %c0_i64_104 : i64
    %c8_i64_105 = arith.constant 8 : i64
    %211 = arith.addi %210, %c8_i64_105 : i64
    %c0_i32_106 = arith.constant 0 : i32
    %212 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_106) : (!llvm.ptr, i32) -> i32
    %213 = arith.extui %212 : i32 to i64
    %c65536_i64_107 = arith.constant 65536 : i64
    %214 = arith.muli %213, %c65536_i64_107 : i64
    %215 = arith.cmpi ult, %211, %214 : i64
    cf.cond_br %215, ^bb48, ^bb49
  ^bb39:  // pred: ^bb46
    %216 = llvm.load %8 : !llvm.ptr -> i32
    %c255_i32 = arith.constant 255 : i32
    %217 = arith.andi %216, %c255_i32 : i32
    %c255_i32_108 = arith.constant 255 : i32
    %218 = arith.cmpi eq, %217, %c255_i32_108 : i32
    %219 = arith.extui %218 : i1 to i32
    %c0_i32_109 = arith.constant 0 : i32
    %220 = arith.cmpi ne, %219, %c0_i32_109 : i32
    cf.cond_br %220, ^bb37, ^bb47
  ^bb40:  // 2 preds: ^bb34, ^bb44
    %221 = llvm.load %7 : !llvm.ptr -> i32
    %c-8_i32 = arith.constant -8 : i32
    %222 = arith.addi %221, %c-8_i32 : i32
    llvm.store %222, %8 : i32, !llvm.ptr
    %c-16_i32 = arith.constant -16 : i32
    %223 = arith.cmpi eq, %222, %c-16_i32 : i32
    %224 = arith.extui %223 : i1 to i32
    %c0_i32_110 = arith.constant 0 : i32
    %225 = arith.cmpi ne, %224, %c0_i32_110 : i32
    cf.cond_br %225, ^bb38, ^bb41
  ^bb41:  // pred: ^bb40
    %226 = llvm.load %4 : !llvm.ptr -> i32
    %227 = llvm.load %7 : !llvm.ptr -> i32
    %228 = arith.addi %226, %227 : i32
    llvm.store %228, %9 : i32, !llvm.ptr
    %229 = llvm.load %5 : !llvm.ptr -> i32
    %c80_i32_111 = arith.constant 80 : i32
    %230 = arith.addi %229, %c80_i32_111 : i32
    %231 = llvm.load %7 : !llvm.ptr -> i32
    %232 = arith.addi %230, %231 : i32
    llvm.store %232, %10 : i32, !llvm.ptr
    %233 = llvm.load %8 : !llvm.ptr -> i32
    llvm.store %233, %7 : i32, !llvm.ptr
    %234 = llvm.load %10 : !llvm.ptr -> i32
    %c0_i64_112 = arith.constant 0 : i64
    %235 = arith.extui %234 : i32 to i64
    %236 = arith.addi %235, %c0_i64_112 : i64
    %c8_i64_113 = arith.constant 8 : i64
    %237 = arith.addi %236, %c8_i64_113 : i64
    %c0_i32_114 = arith.constant 0 : i32
    %238 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_114) : (!llvm.ptr, i32) -> i32
    %239 = arith.extui %238 : i32 to i64
    %c65536_i64_115 = arith.constant 65536 : i64
    %240 = arith.muli %239, %c65536_i64_115 : i64
    %241 = arith.cmpi ult, %237, %240 : i64
    cf.cond_br %241, ^bb42, ^bb43
  ^bb42:  // 2 preds: ^bb41, ^bb43
    %242 = llvm.getelementptr %19[%236] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %243 = llvm.load volatile %242 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %243, %11 : i64, !llvm.ptr
    %244 = llvm.load %9 : !llvm.ptr -> i32
    %c0_i64_116 = arith.constant 0 : i64
    %245 = arith.extui %244 : i32 to i64
    %246 = arith.addi %245, %c0_i64_116 : i64
    %c8_i64_117 = arith.constant 8 : i64
    %247 = arith.addi %246, %c8_i64_117 : i64
    %c0_i32_118 = arith.constant 0 : i32
    %248 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_118) : (!llvm.ptr, i32) -> i32
    %249 = arith.extui %248 : i32 to i64
    %c65536_i64_119 = arith.constant 65536 : i64
    %250 = arith.muli %249, %c65536_i64_119 : i64
    %251 = arith.cmpi ult, %247, %250 : i64
    cf.cond_br %251, ^bb44, ^bb45
  ^bb43:  // pred: ^bb41
    %c1_i32_120 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_120) : (i32) -> ()
    cf.br ^bb42
  ^bb44:  // 2 preds: ^bb42, ^bb45
    %252 = llvm.getelementptr %19[%246] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %253 = llvm.load volatile %252 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %253, %12 : i64, !llvm.ptr
    %254 = arith.cmpi ugt, %243, %253 : i64
    %255 = arith.extui %254 : i1 to i64
    %256 = arith.trunci %255 : i64 to i32
    %257 = llvm.load %11 : !llvm.ptr -> i64
    %258 = llvm.load %12 : !llvm.ptr -> i64
    %259 = arith.cmpi ult, %257, %258 : i64
    %260 = arith.extui %259 : i1 to i64
    %261 = arith.trunci %260 : i64 to i32
    %262 = arith.subi %256, %261 : i32
    llvm.store %262, %8 : i32, !llvm.ptr
    %c0_i32_121 = arith.constant 0 : i32
    %263 = arith.cmpi eq, %262, %c0_i32_121 : i32
    %264 = arith.extui %263 : i1 to i32
    %c0_i32_122 = arith.constant 0 : i32
    %265 = arith.cmpi ne, %264, %c0_i32_122 : i32
    cf.cond_br %265, ^bb40, ^bb46
  ^bb45:  // pred: ^bb42
    %c1_i32_123 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_123) : (i32) -> ()
    cf.br ^bb44
  ^bb46:  // pred: ^bb44
    cf.br ^bb39
  ^bb47:  // pred: ^bb39
    cf.br ^bb38
  ^bb48:  // 2 preds: ^bb38, ^bb49
    %266 = llvm.getelementptr %19[%210] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %267 = llvm.load volatile %266 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_124 = arith.constant 0 : i64
    %268 = arith.extui %206 : i32 to i64
    %269 = arith.addi %268, %c0_i64_124 : i64
    %c8_i64_125 = arith.constant 8 : i64
    %270 = arith.addi %269, %c8_i64_125 : i64
    %c0_i32_126 = arith.constant 0 : i32
    %271 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_126) : (!llvm.ptr, i32) -> i32
    %272 = arith.extui %271 : i32 to i64
    %c65536_i64_127 = arith.constant 65536 : i64
    %273 = arith.muli %272, %c65536_i64_127 : i64
    %274 = arith.cmpi ult, %270, %273 : i64
    cf.cond_br %274, ^bb50, ^bb51
  ^bb49:  // pred: ^bb38
    %c1_i32_128 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_128) : (i32) -> ()
    cf.br ^bb48
  ^bb50:  // 2 preds: ^bb48, ^bb51
    %275 = llvm.getelementptr %19[%269] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %267, %275 {alignment = 1 : i64} : i64, !llvm.ptr
    %276 = llvm.load %5 : !llvm.ptr -> i32
    %c384_i32_129 = arith.constant 384 : i32
    %277 = arith.addi %276, %c384_i32_129 : i32
    %c16_i32_130 = arith.constant 16 : i32
    %278 = arith.addi %277, %c16_i32_130 : i32
    %279 = llvm.load %6 : !llvm.ptr -> i32
    %c16_i32_131 = arith.constant 16 : i32
    %280 = arith.addi %279, %c16_i32_131 : i32
    %c0_i64_132 = arith.constant 0 : i64
    %281 = arith.extui %280 : i32 to i64
    %282 = arith.addi %281, %c0_i64_132 : i64
    %c8_i64_133 = arith.constant 8 : i64
    %283 = arith.addi %282, %c8_i64_133 : i64
    %c0_i32_134 = arith.constant 0 : i32
    %284 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_134) : (!llvm.ptr, i32) -> i32
    %285 = arith.extui %284 : i32 to i64
    %c65536_i64_135 = arith.constant 65536 : i64
    %286 = arith.muli %285, %c65536_i64_135 : i64
    %287 = arith.cmpi ult, %283, %286 : i64
    cf.cond_br %287, ^bb52, ^bb53
  ^bb51:  // pred: ^bb48
    %c1_i32_136 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_136) : (i32) -> ()
    cf.br ^bb50
  ^bb52:  // 2 preds: ^bb50, ^bb53
    %288 = llvm.getelementptr %19[%282] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %289 = llvm.load volatile %288 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_137 = arith.constant 0 : i64
    %290 = arith.extui %278 : i32 to i64
    %291 = arith.addi %290, %c0_i64_137 : i64
    %c8_i64_138 = arith.constant 8 : i64
    %292 = arith.addi %291, %c8_i64_138 : i64
    %c0_i32_139 = arith.constant 0 : i32
    %293 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_139) : (!llvm.ptr, i32) -> i32
    %294 = arith.extui %293 : i32 to i64
    %c65536_i64_140 = arith.constant 65536 : i64
    %295 = arith.muli %294, %c65536_i64_140 : i64
    %296 = arith.cmpi ult, %292, %295 : i64
    cf.cond_br %296, ^bb54, ^bb55
  ^bb53:  // pred: ^bb50
    %c1_i32_141 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_141) : (i32) -> ()
    cf.br ^bb52
  ^bb54:  // 2 preds: ^bb52, ^bb55
    %297 = llvm.getelementptr %19[%291] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %289, %297 {alignment = 1 : i64} : i64, !llvm.ptr
    %298 = llvm.load %5 : !llvm.ptr -> i32
    %c384_i32_142 = arith.constant 384 : i32
    %299 = arith.addi %298, %c384_i32_142 : i32
    %c8_i32_143 = arith.constant 8 : i32
    %300 = arith.addi %299, %c8_i32_143 : i32
    %301 = llvm.load %6 : !llvm.ptr -> i32
    %c8_i32_144 = arith.constant 8 : i32
    %302 = arith.addi %301, %c8_i32_144 : i32
    %c0_i64_145 = arith.constant 0 : i64
    %303 = arith.extui %302 : i32 to i64
    %304 = arith.addi %303, %c0_i64_145 : i64
    %c8_i64_146 = arith.constant 8 : i64
    %305 = arith.addi %304, %c8_i64_146 : i64
    %c0_i32_147 = arith.constant 0 : i32
    %306 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_147) : (!llvm.ptr, i32) -> i32
    %307 = arith.extui %306 : i32 to i64
    %c65536_i64_148 = arith.constant 65536 : i64
    %308 = arith.muli %307, %c65536_i64_148 : i64
    %309 = arith.cmpi ult, %305, %308 : i64
    cf.cond_br %309, ^bb56, ^bb57
  ^bb55:  // pred: ^bb52
    %c1_i32_149 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_149) : (i32) -> ()
    cf.br ^bb54
  ^bb56:  // 2 preds: ^bb54, ^bb57
    %310 = llvm.getelementptr %19[%304] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %311 = llvm.load volatile %310 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_150 = arith.constant 0 : i64
    %312 = arith.extui %300 : i32 to i64
    %313 = arith.addi %312, %c0_i64_150 : i64
    %c8_i64_151 = arith.constant 8 : i64
    %314 = arith.addi %313, %c8_i64_151 : i64
    %c0_i32_152 = arith.constant 0 : i32
    %315 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_152) : (!llvm.ptr, i32) -> i32
    %316 = arith.extui %315 : i32 to i64
    %c65536_i64_153 = arith.constant 65536 : i64
    %317 = arith.muli %316, %c65536_i64_153 : i64
    %318 = arith.cmpi ult, %314, %317 : i64
    cf.cond_br %318, ^bb58, ^bb59
  ^bb57:  // pred: ^bb54
    %c1_i32_154 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_154) : (i32) -> ()
    cf.br ^bb56
  ^bb58:  // 2 preds: ^bb56, ^bb59
    %319 = llvm.getelementptr %19[%313] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %311, %319 {alignment = 1 : i64} : i64, !llvm.ptr
    %320 = llvm.load %5 : !llvm.ptr -> i32
    %321 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_155 = arith.constant 0 : i64
    %322 = arith.extui %321 : i32 to i64
    %323 = arith.addi %322, %c0_i64_155 : i64
    %c8_i64_156 = arith.constant 8 : i64
    %324 = arith.addi %323, %c8_i64_156 : i64
    %c0_i32_157 = arith.constant 0 : i32
    %325 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_157) : (!llvm.ptr, i32) -> i32
    %326 = arith.extui %325 : i32 to i64
    %c65536_i64_158 = arith.constant 65536 : i64
    %327 = arith.muli %326, %c65536_i64_158 : i64
    %328 = arith.cmpi ult, %324, %327 : i64
    cf.cond_br %328, ^bb60, ^bb61
  ^bb59:  // pred: ^bb56
    %c1_i32_159 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_159) : (i32) -> ()
    cf.br ^bb58
  ^bb60:  // 2 preds: ^bb58, ^bb61
    %329 = llvm.getelementptr %19[%323] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %330 = llvm.load volatile %329 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c384_i64 = arith.constant 384 : i64
    %331 = arith.extui %320 : i32 to i64
    %332 = arith.addi %331, %c384_i64 : i64
    %c8_i64_160 = arith.constant 8 : i64
    %333 = arith.addi %332, %c8_i64_160 : i64
    %c0_i32_161 = arith.constant 0 : i32
    %334 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_161) : (!llvm.ptr, i32) -> i32
    %335 = arith.extui %334 : i32 to i64
    %c65536_i64_162 = arith.constant 65536 : i64
    %336 = arith.muli %335, %c65536_i64_162 : i64
    %337 = arith.cmpi ult, %333, %336 : i64
    cf.cond_br %337, ^bb62, ^bb63
  ^bb61:  // pred: ^bb58
    %c1_i32_163 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_163) : (i32) -> ()
    cf.br ^bb60
  ^bb62:  // 2 preds: ^bb60, ^bb63
    %338 = llvm.getelementptr %19[%332] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %330, %338 {alignment = 1 : i64} : i64, !llvm.ptr
    %c0_i32_164 = arith.constant 0 : i32
    llvm.store %c0_i32_164, %7 : i32, !llvm.ptr
    %c0_i32_165 = arith.constant 0 : i32
    llvm.store %c0_i32_165, %8 : i32, !llvm.ptr
    cf.br ^bb65
  ^bb63:  // pred: ^bb60
    %c1_i32_166 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_166) : (i32) -> ()
    cf.br ^bb62
  ^bb64:  // pred: ^bb72
    %339 = llvm.load %5 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %340 = arith.addi %339, %c48_i32 : i32
    %341 = llvm.load %5 : !llvm.ptr -> i32
    %c384_i32_167 = arith.constant 384 : i32
    %342 = arith.addi %341, %c384_i32_167 : i32
    %c8_i32_168 = arith.constant 8 : i32
    %343 = arith.addi %342, %c8_i32_168 : i32
    %c0_i64_169 = arith.constant 0 : i64
    %344 = arith.extui %343 : i32 to i64
    %345 = arith.addi %344, %c0_i64_169 : i64
    %c8_i64_170 = arith.constant 8 : i64
    %346 = arith.addi %345, %c8_i64_170 : i64
    %c0_i32_171 = arith.constant 0 : i32
    %347 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_171) : (!llvm.ptr, i32) -> i32
    %348 = arith.extui %347 : i32 to i64
    %c65536_i64_172 = arith.constant 65536 : i64
    %349 = arith.muli %348, %c65536_i64_172 : i64
    %350 = arith.cmpi ult, %346, %349 : i64
    cf.cond_br %350, ^bb73, ^bb74
  ^bb65:  // 2 preds: ^bb62, ^bb70
    %351 = llvm.load %5 : !llvm.ptr -> i32
    %c384_i32_173 = arith.constant 384 : i32
    %352 = arith.addi %351, %c384_i32_173 : i32
    %353 = llvm.load %7 : !llvm.ptr -> i32
    %354 = arith.addi %352, %353 : i32
    llvm.store %354, %9 : i32, !llvm.ptr
    %355 = llvm.load %9 : !llvm.ptr -> i32
    %c0_i64_174 = arith.constant 0 : i64
    %356 = arith.extui %355 : i32 to i64
    %357 = arith.addi %356, %c0_i64_174 : i64
    %c8_i64_175 = arith.constant 8 : i64
    %358 = arith.addi %357, %c8_i64_175 : i64
    %c0_i32_176 = arith.constant 0 : i32
    %359 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_176) : (!llvm.ptr, i32) -> i32
    %360 = arith.extui %359 : i32 to i64
    %c65536_i64_177 = arith.constant 65536 : i64
    %361 = arith.muli %360, %c65536_i64_177 : i64
    %362 = arith.cmpi ult, %358, %361 : i64
    cf.cond_br %362, ^bb66, ^bb67
  ^bb66:  // 2 preds: ^bb65, ^bb67
    %363 = llvm.getelementptr %19[%357] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %364 = llvm.load volatile %363 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %364, %11 : i64, !llvm.ptr
    %365 = llvm.load %4 : !llvm.ptr -> i32
    %366 = llvm.load %7 : !llvm.ptr -> i32
    %367 = arith.addi %365, %366 : i32
    %c0_i64_178 = arith.constant 0 : i64
    %368 = arith.extui %367 : i32 to i64
    %369 = arith.addi %368, %c0_i64_178 : i64
    %c8_i64_179 = arith.constant 8 : i64
    %370 = arith.addi %369, %c8_i64_179 : i64
    %c0_i32_180 = arith.constant 0 : i32
    %371 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_180) : (!llvm.ptr, i32) -> i32
    %372 = arith.extui %371 : i32 to i64
    %c65536_i64_181 = arith.constant 65536 : i64
    %373 = arith.muli %372, %c65536_i64_181 : i64
    %374 = arith.cmpi ult, %370, %373 : i64
    cf.cond_br %374, ^bb68, ^bb69
  ^bb67:  // pred: ^bb65
    %c1_i32_182 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_182) : (i32) -> ()
    cf.br ^bb66
  ^bb68:  // 2 preds: ^bb66, ^bb69
    %375 = llvm.getelementptr %19[%369] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %376 = llvm.load volatile %375 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %376, %12 : i64, !llvm.ptr
    %377 = arith.subi %364, %376 : i64
    llvm.store %377, %13 : i64, !llvm.ptr
    %378 = llvm.load %8 : !llvm.ptr -> i32
    %379 = arith.extui %378 : i32 to i64
    %c1_i64 = arith.constant 1 : i64
    %380 = arith.andi %379, %c1_i64 : i64
    llvm.store %380, %14 : i64, !llvm.ptr
    %381 = arith.subi %377, %380 : i64
    %c0_i64_183 = arith.constant 0 : i64
    %382 = arith.extui %354 : i32 to i64
    %383 = arith.addi %382, %c0_i64_183 : i64
    %c8_i64_184 = arith.constant 8 : i64
    %384 = arith.addi %383, %c8_i64_184 : i64
    %c0_i32_185 = arith.constant 0 : i32
    %385 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_185) : (!llvm.ptr, i32) -> i32
    %386 = arith.extui %385 : i32 to i64
    %c65536_i64_186 = arith.constant 65536 : i64
    %387 = arith.muli %386, %c65536_i64_186 : i64
    %388 = arith.cmpi ult, %384, %387 : i64
    cf.cond_br %388, ^bb70, ^bb71
  ^bb69:  // pred: ^bb66
    %c1_i32_187 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_187) : (i32) -> ()
    cf.br ^bb68
  ^bb70:  // 2 preds: ^bb68, ^bb71
    %389 = llvm.getelementptr %19[%383] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %381, %389 {alignment = 1 : i64} : i64, !llvm.ptr
    %390 = llvm.load %11 : !llvm.ptr -> i64
    %391 = llvm.load %12 : !llvm.ptr -> i64
    %392 = arith.cmpi ult, %390, %391 : i64
    %393 = arith.extui %392 : i1 to i64
    %394 = arith.trunci %393 : i64 to i32
    %395 = llvm.load %13 : !llvm.ptr -> i64
    %396 = llvm.load %14 : !llvm.ptr -> i64
    %397 = arith.cmpi ult, %395, %396 : i64
    %398 = arith.extui %397 : i1 to i64
    %399 = arith.trunci %398 : i64 to i32
    %400 = arith.ori %394, %399 : i32
    llvm.store %400, %8 : i32, !llvm.ptr
    %401 = llvm.load %7 : !llvm.ptr -> i32
    %c8_i32_188 = arith.constant 8 : i32
    %402 = arith.addi %401, %c8_i32_188 : i32
    llvm.store %402, %7 : i32, !llvm.ptr
    %c32_i32_189 = arith.constant 32 : i32
    %403 = arith.cmpi eq, %402, %c32_i32_189 : i32
    %404 = arith.extui %403 : i1 to i32
    %c0_i32_190 = arith.constant 0 : i32
    %405 = arith.cmpi eq, %404, %c0_i32_190 : i32
    %406 = arith.extui %405 : i1 to i32
    %c0_i32_191 = arith.constant 0 : i32
    %407 = arith.cmpi ne, %406, %c0_i32_191 : i32
    cf.cond_br %407, ^bb65, ^bb72
  ^bb71:  // pred: ^bb68
    %c1_i32_192 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_192) : (i32) -> ()
    cf.br ^bb70
  ^bb72:  // pred: ^bb70
    cf.br ^bb64
  ^bb73:  // 2 preds: ^bb64, ^bb74
    %408 = llvm.getelementptr %19[%345] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %409 = llvm.load volatile %408 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_193 = arith.constant 0 : i64
    %410 = arith.extui %340 : i32 to i64
    %411 = arith.addi %410, %c0_i64_193 : i64
    %c8_i64_194 = arith.constant 8 : i64
    %412 = arith.addi %411, %c8_i64_194 : i64
    %c0_i32_195 = arith.constant 0 : i32
    %413 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_195) : (!llvm.ptr, i32) -> i32
    %414 = arith.extui %413 : i32 to i64
    %c65536_i64_196 = arith.constant 65536 : i64
    %415 = arith.muli %414, %c65536_i64_196 : i64
    %416 = arith.cmpi ult, %412, %415 : i64
    cf.cond_br %416, ^bb75, ^bb76
  ^bb74:  // pred: ^bb64
    %c1_i32_197 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_197) : (i32) -> ()
    cf.br ^bb73
  ^bb75:  // 2 preds: ^bb73, ^bb76
    %417 = llvm.getelementptr %19[%411] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %409, %417 {alignment = 1 : i64} : i64, !llvm.ptr
    %418 = llvm.load %5 : !llvm.ptr -> i32
    %c56_i32 = arith.constant 56 : i32
    %419 = arith.addi %418, %c56_i32 : i32
    %420 = llvm.load %5 : !llvm.ptr -> i32
    %c384_i32_198 = arith.constant 384 : i32
    %421 = arith.addi %420, %c384_i32_198 : i32
    %c16_i32_199 = arith.constant 16 : i32
    %422 = arith.addi %421, %c16_i32_199 : i32
    %c0_i64_200 = arith.constant 0 : i64
    %423 = arith.extui %422 : i32 to i64
    %424 = arith.addi %423, %c0_i64_200 : i64
    %c8_i64_201 = arith.constant 8 : i64
    %425 = arith.addi %424, %c8_i64_201 : i64
    %c0_i32_202 = arith.constant 0 : i32
    %426 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_202) : (!llvm.ptr, i32) -> i32
    %427 = arith.extui %426 : i32 to i64
    %c65536_i64_203 = arith.constant 65536 : i64
    %428 = arith.muli %427, %c65536_i64_203 : i64
    %429 = arith.cmpi ult, %425, %428 : i64
    cf.cond_br %429, ^bb77, ^bb78
  ^bb76:  // pred: ^bb73
    %c1_i32_204 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_204) : (i32) -> ()
    cf.br ^bb75
  ^bb77:  // 2 preds: ^bb75, ^bb78
    %430 = llvm.getelementptr %19[%424] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %431 = llvm.load volatile %430 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_205 = arith.constant 0 : i64
    %432 = arith.extui %419 : i32 to i64
    %433 = arith.addi %432, %c0_i64_205 : i64
    %c8_i64_206 = arith.constant 8 : i64
    %434 = arith.addi %433, %c8_i64_206 : i64
    %c0_i32_207 = arith.constant 0 : i32
    %435 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_207) : (!llvm.ptr, i32) -> i32
    %436 = arith.extui %435 : i32 to i64
    %c65536_i64_208 = arith.constant 65536 : i64
    %437 = arith.muli %436, %c65536_i64_208 : i64
    %438 = arith.cmpi ult, %434, %437 : i64
    cf.cond_br %438, ^bb79, ^bb80
  ^bb78:  // pred: ^bb75
    %c1_i32_209 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_209) : (i32) -> ()
    cf.br ^bb77
  ^bb79:  // 2 preds: ^bb77, ^bb80
    %439 = llvm.getelementptr %19[%433] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %431, %439 {alignment = 1 : i64} : i64, !llvm.ptr
    %440 = llvm.load %5 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %441 = arith.addi %440, %c64_i32 : i32
    %442 = llvm.load %5 : !llvm.ptr -> i32
    %c384_i32_210 = arith.constant 384 : i32
    %443 = arith.addi %442, %c384_i32_210 : i32
    %c24_i32_211 = arith.constant 24 : i32
    %444 = arith.addi %443, %c24_i32_211 : i32
    %c0_i64_212 = arith.constant 0 : i64
    %445 = arith.extui %444 : i32 to i64
    %446 = arith.addi %445, %c0_i64_212 : i64
    %c8_i64_213 = arith.constant 8 : i64
    %447 = arith.addi %446, %c8_i64_213 : i64
    %c0_i32_214 = arith.constant 0 : i32
    %448 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_214) : (!llvm.ptr, i32) -> i32
    %449 = arith.extui %448 : i32 to i64
    %c65536_i64_215 = arith.constant 65536 : i64
    %450 = arith.muli %449, %c65536_i64_215 : i64
    %451 = arith.cmpi ult, %447, %450 : i64
    cf.cond_br %451, ^bb81, ^bb82
  ^bb80:  // pred: ^bb77
    %c1_i32_216 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_216) : (i32) -> ()
    cf.br ^bb79
  ^bb81:  // 2 preds: ^bb79, ^bb82
    %452 = llvm.getelementptr %19[%446] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %453 = llvm.load volatile %452 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_217 = arith.constant 0 : i64
    %454 = arith.extui %441 : i32 to i64
    %455 = arith.addi %454, %c0_i64_217 : i64
    %c8_i64_218 = arith.constant 8 : i64
    %456 = arith.addi %455, %c8_i64_218 : i64
    %c0_i32_219 = arith.constant 0 : i32
    %457 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_219) : (!llvm.ptr, i32) -> i32
    %458 = arith.extui %457 : i32 to i64
    %c65536_i64_220 = arith.constant 65536 : i64
    %459 = arith.muli %458, %c65536_i64_220 : i64
    %460 = arith.cmpi ult, %456, %459 : i64
    cf.cond_br %460, ^bb83, ^bb84
  ^bb82:  // pred: ^bb79
    %c1_i32_221 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_221) : (i32) -> ()
    cf.br ^bb81
  ^bb83:  // 2 preds: ^bb81, ^bb84
    %461 = llvm.getelementptr %19[%455] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %453, %461 {alignment = 1 : i64} : i64, !llvm.ptr
    %462 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i64_222 = arith.constant 1 : i64
    %c32_i64_223 = arith.constant 32 : i64
    %463 = arith.extui %462 : i32 to i64
    %464 = arith.addi %463, %c32_i64_223 : i64
    %c8_i64_224 = arith.constant 8 : i64
    %465 = arith.addi %464, %c8_i64_224 : i64
    %c0_i32_225 = arith.constant 0 : i32
    %466 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_225) : (!llvm.ptr, i32) -> i32
    %467 = arith.extui %466 : i32 to i64
    %c65536_i64_226 = arith.constant 65536 : i64
    %468 = arith.muli %467, %c65536_i64_226 : i64
    %469 = arith.cmpi ult, %465, %468 : i64
    cf.cond_br %469, ^bb85, ^bb86
  ^bb84:  // pred: ^bb81
    %c1_i32_227 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_227) : (i32) -> ()
    cf.br ^bb83
  ^bb85:  // 2 preds: ^bb83, ^bb86
    %470 = llvm.getelementptr %19[%464] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_222, %470 {alignment = 1 : i64} : i64, !llvm.ptr
    %471 = llvm.load %5 : !llvm.ptr -> i32
    %472 = llvm.load %5 : !llvm.ptr -> i32
    %c384_i64_228 = arith.constant 384 : i64
    %473 = arith.extui %472 : i32 to i64
    %474 = arith.addi %473, %c384_i64_228 : i64
    %c8_i64_229 = arith.constant 8 : i64
    %475 = arith.addi %474, %c8_i64_229 : i64
    %c0_i32_230 = arith.constant 0 : i32
    %476 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_230) : (!llvm.ptr, i32) -> i32
    %477 = arith.extui %476 : i32 to i64
    %c65536_i64_231 = arith.constant 65536 : i64
    %478 = arith.muli %477, %c65536_i64_231 : i64
    %479 = arith.cmpi ult, %475, %478 : i64
    cf.cond_br %479, ^bb87, ^bb88
  ^bb86:  // pred: ^bb83
    %c1_i32_232 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_232) : (i32) -> ()
    cf.br ^bb85
  ^bb87:  // 2 preds: ^bb85, ^bb88
    %480 = llvm.getelementptr %19[%474] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %481 = llvm.load volatile %480 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c40_i64 = arith.constant 40 : i64
    %482 = arith.extui %471 : i32 to i64
    %483 = arith.addi %482, %c40_i64 : i64
    %c8_i64_233 = arith.constant 8 : i64
    %484 = arith.addi %483, %c8_i64_233 : i64
    %c0_i32_234 = arith.constant 0 : i32
    %485 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_234) : (!llvm.ptr, i32) -> i32
    %486 = arith.extui %485 : i32 to i64
    %c65536_i64_235 = arith.constant 65536 : i64
    %487 = arith.muli %486, %c65536_i64_235 : i64
    %488 = arith.cmpi ult, %484, %487 : i64
    cf.cond_br %488, ^bb89, ^bb90
  ^bb88:  // pred: ^bb85
    %c1_i32_236 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_236) : (i32) -> ()
    cf.br ^bb87
  ^bb89:  // 2 preds: ^bb87, ^bb90
    %489 = llvm.getelementptr %19[%483] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %481, %489 {alignment = 1 : i64} : i64, !llvm.ptr
    %490 = llvm.load %5 : !llvm.ptr -> i32
    %c200_i32_237 = arith.constant 200 : i32
    %491 = arith.addi %490, %c200_i32_237 : i32
    %c24_i32_238 = arith.constant 24 : i32
    %492 = arith.addi %491, %c24_i32_238 : i32
    %493 = llvm.load %5 : !llvm.ptr -> i32
    %c24_i32_239 = arith.constant 24 : i32
    %494 = arith.addi %493, %c24_i32_239 : i32
    %c0_i64_240 = arith.constant 0 : i64
    %495 = arith.extui %494 : i32 to i64
    %496 = arith.addi %495, %c0_i64_240 : i64
    %c8_i64_241 = arith.constant 8 : i64
    %497 = arith.addi %496, %c8_i64_241 : i64
    %c0_i32_242 = arith.constant 0 : i32
    %498 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_242) : (!llvm.ptr, i32) -> i32
    %499 = arith.extui %498 : i32 to i64
    %c65536_i64_243 = arith.constant 65536 : i64
    %500 = arith.muli %499, %c65536_i64_243 : i64
    %501 = arith.cmpi ult, %497, %500 : i64
    cf.cond_br %501, ^bb91, ^bb92
  ^bb90:  // pred: ^bb87
    %c1_i32_244 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_244) : (i32) -> ()
    cf.br ^bb89
  ^bb91:  // 2 preds: ^bb89, ^bb92
    %502 = llvm.getelementptr %19[%496] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %503 = llvm.load volatile %502 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_245 = arith.constant 0 : i64
    %504 = arith.extui %492 : i32 to i64
    %505 = arith.addi %504, %c0_i64_245 : i64
    %c8_i64_246 = arith.constant 8 : i64
    %506 = arith.addi %505, %c8_i64_246 : i64
    %c0_i32_247 = arith.constant 0 : i32
    %507 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_247) : (!llvm.ptr, i32) -> i32
    %508 = arith.extui %507 : i32 to i64
    %c65536_i64_248 = arith.constant 65536 : i64
    %509 = arith.muli %508, %c65536_i64_248 : i64
    %510 = arith.cmpi ult, %506, %509 : i64
    cf.cond_br %510, ^bb93, ^bb94
  ^bb92:  // pred: ^bb89
    %c1_i32_249 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_249) : (i32) -> ()
    cf.br ^bb91
  ^bb93:  // 2 preds: ^bb91, ^bb94
    %511 = llvm.getelementptr %19[%505] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %503, %511 {alignment = 1 : i64} : i64, !llvm.ptr
    %512 = llvm.load %5 : !llvm.ptr -> i32
    %c200_i32_250 = arith.constant 200 : i32
    %513 = arith.addi %512, %c200_i32_250 : i32
    %c16_i32_251 = arith.constant 16 : i32
    %514 = arith.addi %513, %c16_i32_251 : i32
    %515 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32_252 = arith.constant 16 : i32
    %516 = arith.addi %515, %c16_i32_252 : i32
    %c0_i64_253 = arith.constant 0 : i64
    %517 = arith.extui %516 : i32 to i64
    %518 = arith.addi %517, %c0_i64_253 : i64
    %c8_i64_254 = arith.constant 8 : i64
    %519 = arith.addi %518, %c8_i64_254 : i64
    %c0_i32_255 = arith.constant 0 : i32
    %520 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_255) : (!llvm.ptr, i32) -> i32
    %521 = arith.extui %520 : i32 to i64
    %c65536_i64_256 = arith.constant 65536 : i64
    %522 = arith.muli %521, %c65536_i64_256 : i64
    %523 = arith.cmpi ult, %519, %522 : i64
    cf.cond_br %523, ^bb95, ^bb96
  ^bb94:  // pred: ^bb91
    %c1_i32_257 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_257) : (i32) -> ()
    cf.br ^bb93
  ^bb95:  // 2 preds: ^bb93, ^bb96
    %524 = llvm.getelementptr %19[%518] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %525 = llvm.load volatile %524 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_258 = arith.constant 0 : i64
    %526 = arith.extui %514 : i32 to i64
    %527 = arith.addi %526, %c0_i64_258 : i64
    %c8_i64_259 = arith.constant 8 : i64
    %528 = arith.addi %527, %c8_i64_259 : i64
    %c0_i32_260 = arith.constant 0 : i32
    %529 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_260) : (!llvm.ptr, i32) -> i32
    %530 = arith.extui %529 : i32 to i64
    %c65536_i64_261 = arith.constant 65536 : i64
    %531 = arith.muli %530, %c65536_i64_261 : i64
    %532 = arith.cmpi ult, %528, %531 : i64
    cf.cond_br %532, ^bb97, ^bb98
  ^bb96:  // pred: ^bb93
    %c1_i32_262 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_262) : (i32) -> ()
    cf.br ^bb95
  ^bb97:  // 2 preds: ^bb95, ^bb98
    %533 = llvm.getelementptr %19[%527] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %525, %533 {alignment = 1 : i64} : i64, !llvm.ptr
    %534 = llvm.load %5 : !llvm.ptr -> i32
    %c200_i32_263 = arith.constant 200 : i32
    %535 = arith.addi %534, %c200_i32_263 : i32
    %c8_i32_264 = arith.constant 8 : i32
    %536 = arith.addi %535, %c8_i32_264 : i32
    %537 = llvm.load %5 : !llvm.ptr -> i32
    %c8_i32_265 = arith.constant 8 : i32
    %538 = arith.addi %537, %c8_i32_265 : i32
    %c0_i64_266 = arith.constant 0 : i64
    %539 = arith.extui %538 : i32 to i64
    %540 = arith.addi %539, %c0_i64_266 : i64
    %c8_i64_267 = arith.constant 8 : i64
    %541 = arith.addi %540, %c8_i64_267 : i64
    %c0_i32_268 = arith.constant 0 : i32
    %542 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_268) : (!llvm.ptr, i32) -> i32
    %543 = arith.extui %542 : i32 to i64
    %c65536_i64_269 = arith.constant 65536 : i64
    %544 = arith.muli %543, %c65536_i64_269 : i64
    %545 = arith.cmpi ult, %541, %544 : i64
    cf.cond_br %545, ^bb99, ^bb100
  ^bb98:  // pred: ^bb95
    %c1_i32_270 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_270) : (i32) -> ()
    cf.br ^bb97
  ^bb99:  // 2 preds: ^bb97, ^bb100
    %546 = llvm.getelementptr %19[%540] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %547 = llvm.load volatile %546 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_271 = arith.constant 0 : i64
    %548 = arith.extui %536 : i32 to i64
    %549 = arith.addi %548, %c0_i64_271 : i64
    %c8_i64_272 = arith.constant 8 : i64
    %550 = arith.addi %549, %c8_i64_272 : i64
    %c0_i32_273 = arith.constant 0 : i32
    %551 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_273) : (!llvm.ptr, i32) -> i32
    %552 = arith.extui %551 : i32 to i64
    %c65536_i64_274 = arith.constant 65536 : i64
    %553 = arith.muli %552, %c65536_i64_274 : i64
    %554 = arith.cmpi ult, %550, %553 : i64
    cf.cond_br %554, ^bb101, ^bb102
  ^bb100:  // pred: ^bb97
    %c1_i32_275 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_275) : (i32) -> ()
    cf.br ^bb99
  ^bb101:  // 2 preds: ^bb99, ^bb102
    %555 = llvm.getelementptr %19[%549] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %547, %555 {alignment = 1 : i64} : i64, !llvm.ptr
    %556 = llvm.load %5 : !llvm.ptr -> i32
    %557 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64_276 = arith.constant 0 : i64
    %558 = arith.extui %557 : i32 to i64
    %559 = arith.addi %558, %c0_i64_276 : i64
    %c8_i64_277 = arith.constant 8 : i64
    %560 = arith.addi %559, %c8_i64_277 : i64
    %c0_i32_278 = arith.constant 0 : i32
    %561 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_278) : (!llvm.ptr, i32) -> i32
    %562 = arith.extui %561 : i32 to i64
    %c65536_i64_279 = arith.constant 65536 : i64
    %563 = arith.muli %562, %c65536_i64_279 : i64
    %564 = arith.cmpi ult, %560, %563 : i64
    cf.cond_br %564, ^bb103, ^bb104
  ^bb102:  // pred: ^bb99
    %c1_i32_280 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_280) : (i32) -> ()
    cf.br ^bb101
  ^bb103:  // 2 preds: ^bb101, ^bb104
    %565 = llvm.getelementptr %19[%559] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %566 = llvm.load volatile %565 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c200_i64_281 = arith.constant 200 : i64
    %567 = arith.extui %556 : i32 to i64
    %568 = arith.addi %567, %c200_i64_281 : i64
    %c8_i64_282 = arith.constant 8 : i64
    %569 = arith.addi %568, %c8_i64_282 : i64
    %c0_i32_283 = arith.constant 0 : i32
    %570 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_283) : (!llvm.ptr, i32) -> i32
    %571 = arith.extui %570 : i32 to i64
    %c65536_i64_284 = arith.constant 65536 : i64
    %572 = arith.muli %571, %c65536_i64_284 : i64
    %573 = arith.cmpi ult, %569, %572 : i64
    cf.cond_br %573, ^bb105, ^bb106
  ^bb104:  // pred: ^bb101
    %c1_i32_285 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_285) : (i32) -> ()
    cf.br ^bb103
  ^bb105:  // 2 preds: ^bb103, ^bb106
    %574 = llvm.getelementptr %19[%568] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %566, %574 {alignment = 1 : i64} : i64, !llvm.ptr
    %575 = llvm.load %5 : !llvm.ptr -> i32
    %c200_i32_286 = arith.constant 200 : i32
    %576 = arith.addi %575, %c200_i32_286 : i32
    %577 = llvm.load %5 : !llvm.ptr -> i32
    %578 = llvm.load %5 : !llvm.ptr -> i32
    %c384_i32_287 = arith.constant 384 : i32
    %579 = arith.addi %578, %c384_i32_287 : i32
    call @f32(%arg0, %576, %577, %579) : (!llvm.ptr, i32, i32, i32) -> ()
    %580 = llvm.load %5 : !llvm.ptr -> i32
    %c312_i32 = arith.constant 312 : i32
    %581 = arith.addi %580, %c312_i32 : i32
    %c16_i32_288 = arith.constant 16 : i32
    %582 = arith.addi %581, %c16_i32_288 : i32
    %583 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_289 = arith.constant 16 : i32
    %584 = arith.addi %583, %c16_i32_289 : i32
    %c0_i64_290 = arith.constant 0 : i64
    %585 = arith.extui %584 : i32 to i64
    %586 = arith.addi %585, %c0_i64_290 : i64
    %c4_i64_291 = arith.constant 4 : i64
    %587 = arith.addi %586, %c4_i64_291 : i64
    %c0_i32_292 = arith.constant 0 : i32
    %588 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_292) : (!llvm.ptr, i32) -> i32
    %589 = arith.extui %588 : i32 to i64
    %c65536_i64_293 = arith.constant 65536 : i64
    %590 = arith.muli %589, %c65536_i64_293 : i64
    %591 = arith.cmpi ult, %587, %590 : i64
    cf.cond_br %591, ^bb107, ^bb108
  ^bb106:  // pred: ^bb103
    %c1_i32_294 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_294) : (i32) -> ()
    cf.br ^bb105
  ^bb107:  // 2 preds: ^bb105, ^bb108
    %592 = llvm.getelementptr %19[%586] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %593 = llvm.load volatile %592 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_295 = arith.constant 0 : i64
    %594 = arith.extui %582 : i32 to i64
    %595 = arith.addi %594, %c0_i64_295 : i64
    %c4_i64_296 = arith.constant 4 : i64
    %596 = arith.addi %595, %c4_i64_296 : i64
    %c0_i32_297 = arith.constant 0 : i32
    %597 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_297) : (!llvm.ptr, i32) -> i32
    %598 = arith.extui %597 : i32 to i64
    %c65536_i64_298 = arith.constant 65536 : i64
    %599 = arith.muli %598, %c65536_i64_298 : i64
    %600 = arith.cmpi ult, %596, %599 : i64
    cf.cond_br %600, ^bb109, ^bb110
  ^bb108:  // pred: ^bb105
    %c1_i32_299 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_299) : (i32) -> ()
    cf.br ^bb107
  ^bb109:  // 2 preds: ^bb107, ^bb110
    %601 = llvm.getelementptr %19[%595] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %593, %601 {alignment = 1 : i64} : i32, !llvm.ptr
    %602 = llvm.load %5 : !llvm.ptr -> i32
    %c312_i32_300 = arith.constant 312 : i32
    %603 = arith.addi %602, %c312_i32_300 : i32
    %c8_i32_301 = arith.constant 8 : i32
    %604 = arith.addi %603, %c8_i32_301 : i32
    %605 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_302 = arith.constant 8 : i32
    %606 = arith.addi %605, %c8_i32_302 : i32
    %c0_i64_303 = arith.constant 0 : i64
    %607 = arith.extui %606 : i32 to i64
    %608 = arith.addi %607, %c0_i64_303 : i64
    %c8_i64_304 = arith.constant 8 : i64
    %609 = arith.addi %608, %c8_i64_304 : i64
    %c0_i32_305 = arith.constant 0 : i32
    %610 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_305) : (!llvm.ptr, i32) -> i32
    %611 = arith.extui %610 : i32 to i64
    %c65536_i64_306 = arith.constant 65536 : i64
    %612 = arith.muli %611, %c65536_i64_306 : i64
    %613 = arith.cmpi ult, %609, %612 : i64
    cf.cond_br %613, ^bb111, ^bb112
  ^bb110:  // pred: ^bb107
    %c1_i32_307 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_307) : (i32) -> ()
    cf.br ^bb109
  ^bb111:  // 2 preds: ^bb109, ^bb112
    %614 = llvm.getelementptr %19[%608] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %615 = llvm.load volatile %614 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_308 = arith.constant 0 : i64
    %616 = arith.extui %604 : i32 to i64
    %617 = arith.addi %616, %c0_i64_308 : i64
    %c8_i64_309 = arith.constant 8 : i64
    %618 = arith.addi %617, %c8_i64_309 : i64
    %c0_i32_310 = arith.constant 0 : i32
    %619 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_310) : (!llvm.ptr, i32) -> i32
    %620 = arith.extui %619 : i32 to i64
    %c65536_i64_311 = arith.constant 65536 : i64
    %621 = arith.muli %620, %c65536_i64_311 : i64
    %622 = arith.cmpi ult, %618, %621 : i64
    cf.cond_br %622, ^bb113, ^bb114
  ^bb112:  // pred: ^bb109
    %c1_i32_312 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_312) : (i32) -> ()
    cf.br ^bb111
  ^bb113:  // 2 preds: ^bb111, ^bb114
    %623 = llvm.getelementptr %19[%617] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %615, %623 {alignment = 1 : i64} : i64, !llvm.ptr
    %624 = llvm.load %5 : !llvm.ptr -> i32
    %625 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_313 = arith.constant 0 : i64
    %626 = arith.extui %625 : i32 to i64
    %627 = arith.addi %626, %c0_i64_313 : i64
    %c8_i64_314 = arith.constant 8 : i64
    %628 = arith.addi %627, %c8_i64_314 : i64
    %c0_i32_315 = arith.constant 0 : i32
    %629 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_315) : (!llvm.ptr, i32) -> i32
    %630 = arith.extui %629 : i32 to i64
    %c65536_i64_316 = arith.constant 65536 : i64
    %631 = arith.muli %630, %c65536_i64_316 : i64
    %632 = arith.cmpi ult, %628, %631 : i64
    cf.cond_br %632, ^bb115, ^bb116
  ^bb114:  // pred: ^bb111
    %c1_i32_317 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_317) : (i32) -> ()
    cf.br ^bb113
  ^bb115:  // 2 preds: ^bb113, ^bb116
    %633 = llvm.getelementptr %19[%627] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %634 = llvm.load volatile %633 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c312_i64 = arith.constant 312 : i64
    %635 = arith.extui %624 : i32 to i64
    %636 = arith.addi %635, %c312_i64 : i64
    %c8_i64_318 = arith.constant 8 : i64
    %637 = arith.addi %636, %c8_i64_318 : i64
    %c0_i32_319 = arith.constant 0 : i32
    %638 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_319) : (!llvm.ptr, i32) -> i32
    %639 = arith.extui %638 : i32 to i64
    %c65536_i64_320 = arith.constant 65536 : i64
    %640 = arith.muli %639, %c65536_i64_320 : i64
    %641 = arith.cmpi ult, %637, %640 : i64
    cf.cond_br %641, ^bb117, ^bb118
  ^bb116:  // pred: ^bb113
    %c1_i32_321 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_321) : (i32) -> ()
    cf.br ^bb115
  ^bb117:  // 2 preds: ^bb115, ^bb118
    %642 = llvm.getelementptr %19[%636] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %634, %642 {alignment = 1 : i64} : i64, !llvm.ptr
    %643 = llvm.load %5 : !llvm.ptr -> i32
    %c200_i32_322 = arith.constant 200 : i32
    %644 = arith.addi %643, %c200_i32_322 : i32
    %645 = llvm.load %1 : !llvm.ptr -> i32
    %646 = llvm.load %5 : !llvm.ptr -> i32
    %c312_i32_323 = arith.constant 312 : i32
    %647 = arith.addi %646, %c312_i32_323 : i32
    call @f33(%arg0, %644, %645, %647) : (!llvm.ptr, i32, i32, i32) -> ()
    %648 = llvm.load %5 : !llvm.ptr -> i32
    %c232_i64 = arith.constant 232 : i64
    %649 = arith.extui %648 : i32 to i64
    %650 = arith.addi %649, %c232_i64 : i64
    %c4_i64_324 = arith.constant 4 : i64
    %651 = arith.addi %650, %c4_i64_324 : i64
    %c0_i32_325 = arith.constant 0 : i32
    %652 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_325) : (!llvm.ptr, i32) -> i32
    %653 = arith.extui %652 : i32 to i64
    %c65536_i64_326 = arith.constant 65536 : i64
    %654 = arith.muli %653, %c65536_i64_326 : i64
    %655 = arith.cmpi ult, %651, %654 : i64
    cf.cond_br %655, ^bb121, ^bb122
  ^bb118:  // pred: ^bb115
    %c1_i32_327 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_327) : (i32) -> ()
    cf.br ^bb117
  ^bb119:  // 2 preds: ^bb120, ^bb123
    %656 = llvm.load %5 : !llvm.ptr -> i32
    %c280_i32 = arith.constant 280 : i32
    %657 = arith.addi %656, %c280_i32 : i32
    %c24_i32_328 = arith.constant 24 : i32
    %658 = arith.addi %657, %c24_i32_328 : i32
    %659 = llvm.load %7 : !llvm.ptr -> i32
    %c24_i32_329 = arith.constant 24 : i32
    %660 = arith.addi %659, %c24_i32_329 : i32
    %c0_i64_330 = arith.constant 0 : i64
    %661 = arith.extui %660 : i32 to i64
    %662 = arith.addi %661, %c0_i64_330 : i64
    %c8_i64_331 = arith.constant 8 : i64
    %663 = arith.addi %662, %c8_i64_331 : i64
    %c0_i32_332 = arith.constant 0 : i32
    %664 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_332) : (!llvm.ptr, i32) -> i32
    %665 = arith.extui %664 : i32 to i64
    %c65536_i64_333 = arith.constant 65536 : i64
    %666 = arith.muli %665, %c65536_i64_333 : i64
    %667 = arith.cmpi ult, %663, %666 : i64
    cf.cond_br %667, ^bb124, ^bb125
  ^bb120:  // pred: ^bb121
    %668 = llvm.load %5 : !llvm.ptr -> i32
    %c240_i32 = arith.constant 240 : i32
    %669 = arith.addi %668, %c240_i32 : i32
    llvm.store %669, %7 : i32, !llvm.ptr
    cf.br ^bb119
  ^bb121:  // 2 preds: ^bb117, ^bb122
    %670 = llvm.getelementptr %19[%650] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %671 = llvm.load volatile %670 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_334 = arith.constant 0 : i32
    %672 = arith.cmpi ne, %671, %c0_i32_334 : i32
    cf.cond_br %672, ^bb120, ^bb123
  ^bb122:  // pred: ^bb117
    %c1_i32_335 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_335) : (i32) -> ()
    cf.br ^bb121
  ^bb123:  // pred: ^bb121
    %673 = llvm.load %5 : !llvm.ptr -> i32
    %c232_i32 = arith.constant 232 : i32
    %674 = arith.addi %673, %c232_i32 : i32
    %675 = llvm.load %5 : !llvm.ptr -> i32
    %c200_i32_336 = arith.constant 200 : i32
    %676 = arith.addi %675, %c200_i32_336 : i32
    %677 = call @f0(%arg0, %674, %676) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %677, %7 : i32, !llvm.ptr
    cf.br ^bb119
  ^bb124:  // 2 preds: ^bb119, ^bb125
    %678 = llvm.getelementptr %19[%662] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %679 = llvm.load volatile %678 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_337 = arith.constant 0 : i64
    %680 = arith.extui %658 : i32 to i64
    %681 = arith.addi %680, %c0_i64_337 : i64
    %c8_i64_338 = arith.constant 8 : i64
    %682 = arith.addi %681, %c8_i64_338 : i64
    %c0_i32_339 = arith.constant 0 : i32
    %683 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_339) : (!llvm.ptr, i32) -> i32
    %684 = arith.extui %683 : i32 to i64
    %c65536_i64_340 = arith.constant 65536 : i64
    %685 = arith.muli %684, %c65536_i64_340 : i64
    %686 = arith.cmpi ult, %682, %685 : i64
    cf.cond_br %686, ^bb126, ^bb127
  ^bb125:  // pred: ^bb119
    %c1_i32_341 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_341) : (i32) -> ()
    cf.br ^bb124
  ^bb126:  // 2 preds: ^bb124, ^bb127
    %687 = llvm.getelementptr %19[%681] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %679, %687 {alignment = 1 : i64} : i64, !llvm.ptr
    %688 = llvm.load %5 : !llvm.ptr -> i32
    %c280_i32_342 = arith.constant 280 : i32
    %689 = arith.addi %688, %c280_i32_342 : i32
    %c16_i32_343 = arith.constant 16 : i32
    %690 = arith.addi %689, %c16_i32_343 : i32
    %691 = llvm.load %7 : !llvm.ptr -> i32
    %c16_i32_344 = arith.constant 16 : i32
    %692 = arith.addi %691, %c16_i32_344 : i32
    %c0_i64_345 = arith.constant 0 : i64
    %693 = arith.extui %692 : i32 to i64
    %694 = arith.addi %693, %c0_i64_345 : i64
    %c8_i64_346 = arith.constant 8 : i64
    %695 = arith.addi %694, %c8_i64_346 : i64
    %c0_i32_347 = arith.constant 0 : i32
    %696 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_347) : (!llvm.ptr, i32) -> i32
    %697 = arith.extui %696 : i32 to i64
    %c65536_i64_348 = arith.constant 65536 : i64
    %698 = arith.muli %697, %c65536_i64_348 : i64
    %699 = arith.cmpi ult, %695, %698 : i64
    cf.cond_br %699, ^bb128, ^bb129
  ^bb127:  // pred: ^bb124
    %c1_i32_349 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_349) : (i32) -> ()
    cf.br ^bb126
  ^bb128:  // 2 preds: ^bb126, ^bb129
    %700 = llvm.getelementptr %19[%694] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %701 = llvm.load volatile %700 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_350 = arith.constant 0 : i64
    %702 = arith.extui %690 : i32 to i64
    %703 = arith.addi %702, %c0_i64_350 : i64
    %c8_i64_351 = arith.constant 8 : i64
    %704 = arith.addi %703, %c8_i64_351 : i64
    %c0_i32_352 = arith.constant 0 : i32
    %705 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_352) : (!llvm.ptr, i32) -> i32
    %706 = arith.extui %705 : i32 to i64
    %c65536_i64_353 = arith.constant 65536 : i64
    %707 = arith.muli %706, %c65536_i64_353 : i64
    %708 = arith.cmpi ult, %704, %707 : i64
    cf.cond_br %708, ^bb130, ^bb131
  ^bb129:  // pred: ^bb126
    %c1_i32_354 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_354) : (i32) -> ()
    cf.br ^bb128
  ^bb130:  // 2 preds: ^bb128, ^bb131
    %709 = llvm.getelementptr %19[%703] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %701, %709 {alignment = 1 : i64} : i64, !llvm.ptr
    %710 = llvm.load %5 : !llvm.ptr -> i32
    %c280_i32_355 = arith.constant 280 : i32
    %711 = arith.addi %710, %c280_i32_355 : i32
    %c8_i32_356 = arith.constant 8 : i32
    %712 = arith.addi %711, %c8_i32_356 : i32
    %713 = llvm.load %7 : !llvm.ptr -> i32
    %c8_i32_357 = arith.constant 8 : i32
    %714 = arith.addi %713, %c8_i32_357 : i32
    %c0_i64_358 = arith.constant 0 : i64
    %715 = arith.extui %714 : i32 to i64
    %716 = arith.addi %715, %c0_i64_358 : i64
    %c8_i64_359 = arith.constant 8 : i64
    %717 = arith.addi %716, %c8_i64_359 : i64
    %c0_i32_360 = arith.constant 0 : i32
    %718 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_360) : (!llvm.ptr, i32) -> i32
    %719 = arith.extui %718 : i32 to i64
    %c65536_i64_361 = arith.constant 65536 : i64
    %720 = arith.muli %719, %c65536_i64_361 : i64
    %721 = arith.cmpi ult, %717, %720 : i64
    cf.cond_br %721, ^bb132, ^bb133
  ^bb131:  // pred: ^bb128
    %c1_i32_362 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_362) : (i32) -> ()
    cf.br ^bb130
  ^bb132:  // 2 preds: ^bb130, ^bb133
    %722 = llvm.getelementptr %19[%716] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %723 = llvm.load volatile %722 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_363 = arith.constant 0 : i64
    %724 = arith.extui %712 : i32 to i64
    %725 = arith.addi %724, %c0_i64_363 : i64
    %c8_i64_364 = arith.constant 8 : i64
    %726 = arith.addi %725, %c8_i64_364 : i64
    %c0_i32_365 = arith.constant 0 : i32
    %727 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_365) : (!llvm.ptr, i32) -> i32
    %728 = arith.extui %727 : i32 to i64
    %c65536_i64_366 = arith.constant 65536 : i64
    %729 = arith.muli %728, %c65536_i64_366 : i64
    %730 = arith.cmpi ult, %726, %729 : i64
    cf.cond_br %730, ^bb134, ^bb135
  ^bb133:  // pred: ^bb130
    %c1_i32_367 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_367) : (i32) -> ()
    cf.br ^bb132
  ^bb134:  // 2 preds: ^bb132, ^bb135
    %731 = llvm.getelementptr %19[%725] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %723, %731 {alignment = 1 : i64} : i64, !llvm.ptr
    %732 = llvm.load %5 : !llvm.ptr -> i32
    %733 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_368 = arith.constant 0 : i64
    %734 = arith.extui %733 : i32 to i64
    %735 = arith.addi %734, %c0_i64_368 : i64
    %c8_i64_369 = arith.constant 8 : i64
    %736 = arith.addi %735, %c8_i64_369 : i64
    %c0_i32_370 = arith.constant 0 : i32
    %737 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_370) : (!llvm.ptr, i32) -> i32
    %738 = arith.extui %737 : i32 to i64
    %c65536_i64_371 = arith.constant 65536 : i64
    %739 = arith.muli %738, %c65536_i64_371 : i64
    %740 = arith.cmpi ult, %736, %739 : i64
    cf.cond_br %740, ^bb136, ^bb137
  ^bb135:  // pred: ^bb132
    %c1_i32_372 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_372) : (i32) -> ()
    cf.br ^bb134
  ^bb136:  // 2 preds: ^bb134, ^bb137
    %741 = llvm.getelementptr %19[%735] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %742 = llvm.load volatile %741 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c280_i64 = arith.constant 280 : i64
    %743 = arith.extui %732 : i32 to i64
    %744 = arith.addi %743, %c280_i64 : i64
    %c8_i64_373 = arith.constant 8 : i64
    %745 = arith.addi %744, %c8_i64_373 : i64
    %c0_i32_374 = arith.constant 0 : i32
    %746 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_374) : (!llvm.ptr, i32) -> i32
    %747 = arith.extui %746 : i32 to i64
    %c65536_i64_375 = arith.constant 65536 : i64
    %748 = arith.muli %747, %c65536_i64_375 : i64
    %749 = arith.cmpi ult, %745, %748 : i64
    cf.cond_br %749, ^bb138, ^bb139
  ^bb137:  // pred: ^bb134
    %c1_i32_376 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_376) : (i32) -> ()
    cf.br ^bb136
  ^bb138:  // 2 preds: ^bb136, ^bb139
    %750 = llvm.getelementptr %19[%744] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %742, %750 {alignment = 1 : i64} : i64, !llvm.ptr
    %c0_i32_377 = arith.constant 0 : i32
    llvm.store %c0_i32_377, %7 : i32, !llvm.ptr
    %c0_i32_378 = arith.constant 0 : i32
    llvm.store %c0_i32_378, %8 : i32, !llvm.ptr
    cf.br ^bb141
  ^bb139:  // pred: ^bb136
    %c1_i32_379 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_379) : (i32) -> ()
    cf.br ^bb138
  ^bb140:  // pred: ^bb148
    %751 = llvm.load %5 : !llvm.ptr -> i32
    %c200_i32_380 = arith.constant 200 : i32
    %752 = arith.addi %751, %c200_i32_380 : i32
    %c48_i32_381 = arith.constant 48 : i32
    %753 = arith.addi %752, %c48_i32_381 : i32
    %754 = llvm.load %5 : !llvm.ptr -> i32
    %c280_i32_382 = arith.constant 280 : i32
    %755 = arith.addi %754, %c280_i32_382 : i32
    %c8_i32_383 = arith.constant 8 : i32
    %756 = arith.addi %755, %c8_i32_383 : i32
    %c0_i64_384 = arith.constant 0 : i64
    %757 = arith.extui %756 : i32 to i64
    %758 = arith.addi %757, %c0_i64_384 : i64
    %c8_i64_385 = arith.constant 8 : i64
    %759 = arith.addi %758, %c8_i64_385 : i64
    %c0_i32_386 = arith.constant 0 : i32
    %760 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_386) : (!llvm.ptr, i32) -> i32
    %761 = arith.extui %760 : i32 to i64
    %c65536_i64_387 = arith.constant 65536 : i64
    %762 = arith.muli %761, %c65536_i64_387 : i64
    %763 = arith.cmpi ult, %759, %762 : i64
    cf.cond_br %763, ^bb149, ^bb150
  ^bb141:  // 2 preds: ^bb138, ^bb146
    %764 = llvm.load %5 : !llvm.ptr -> i32
    %c280_i32_388 = arith.constant 280 : i32
    %765 = arith.addi %764, %c280_i32_388 : i32
    %766 = llvm.load %7 : !llvm.ptr -> i32
    %767 = arith.addi %765, %766 : i32
    llvm.store %767, %9 : i32, !llvm.ptr
    %768 = llvm.load %9 : !llvm.ptr -> i32
    %c0_i64_389 = arith.constant 0 : i64
    %769 = arith.extui %768 : i32 to i64
    %770 = arith.addi %769, %c0_i64_389 : i64
    %c8_i64_390 = arith.constant 8 : i64
    %771 = arith.addi %770, %c8_i64_390 : i64
    %c0_i32_391 = arith.constant 0 : i32
    %772 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_391) : (!llvm.ptr, i32) -> i32
    %773 = arith.extui %772 : i32 to i64
    %c65536_i64_392 = arith.constant 65536 : i64
    %774 = arith.muli %773, %c65536_i64_392 : i64
    %775 = arith.cmpi ult, %771, %774 : i64
    cf.cond_br %775, ^bb142, ^bb143
  ^bb142:  // 2 preds: ^bb141, ^bb143
    %776 = llvm.getelementptr %19[%770] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %777 = llvm.load volatile %776 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %777, %12 : i64, !llvm.ptr
    %778 = llvm.load %4 : !llvm.ptr -> i32
    %779 = llvm.load %7 : !llvm.ptr -> i32
    %780 = arith.addi %778, %779 : i32
    %c0_i64_393 = arith.constant 0 : i64
    %781 = arith.extui %780 : i32 to i64
    %782 = arith.addi %781, %c0_i64_393 : i64
    %c8_i64_394 = arith.constant 8 : i64
    %783 = arith.addi %782, %c8_i64_394 : i64
    %c0_i32_395 = arith.constant 0 : i32
    %784 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_395) : (!llvm.ptr, i32) -> i32
    %785 = arith.extui %784 : i32 to i64
    %c65536_i64_396 = arith.constant 65536 : i64
    %786 = arith.muli %785, %c65536_i64_396 : i64
    %787 = arith.cmpi ult, %783, %786 : i64
    cf.cond_br %787, ^bb144, ^bb145
  ^bb143:  // pred: ^bb141
    %c1_i32_397 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_397) : (i32) -> ()
    cf.br ^bb142
  ^bb144:  // 2 preds: ^bb142, ^bb145
    %788 = llvm.getelementptr %19[%782] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %789 = llvm.load volatile %788 {alignment = 1 : i64} : !llvm.ptr -> i64
    %790 = arith.addi %777, %789 : i64
    llvm.store %790, %11 : i64, !llvm.ptr
    %791 = llvm.load %8 : !llvm.ptr -> i32
    %792 = arith.extui %791 : i32 to i64
    %c1_i64_398 = arith.constant 1 : i64
    %793 = arith.andi %792, %c1_i64_398 : i64
    %794 = arith.addi %790, %793 : i64
    llvm.store %794, %13 : i64, !llvm.ptr
    %c0_i64_399 = arith.constant 0 : i64
    %795 = arith.extui %767 : i32 to i64
    %796 = arith.addi %795, %c0_i64_399 : i64
    %c8_i64_400 = arith.constant 8 : i64
    %797 = arith.addi %796, %c8_i64_400 : i64
    %c0_i32_401 = arith.constant 0 : i32
    %798 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_401) : (!llvm.ptr, i32) -> i32
    %799 = arith.extui %798 : i32 to i64
    %c65536_i64_402 = arith.constant 65536 : i64
    %800 = arith.muli %799, %c65536_i64_402 : i64
    %801 = arith.cmpi ult, %797, %800 : i64
    cf.cond_br %801, ^bb146, ^bb147
  ^bb145:  // pred: ^bb142
    %c1_i32_403 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_403) : (i32) -> ()
    cf.br ^bb144
  ^bb146:  // 2 preds: ^bb144, ^bb147
    %802 = llvm.getelementptr %19[%796] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %794, %802 {alignment = 1 : i64} : i64, !llvm.ptr
    %803 = llvm.load %11 : !llvm.ptr -> i64
    %804 = llvm.load %12 : !llvm.ptr -> i64
    %805 = arith.cmpi ult, %803, %804 : i64
    %806 = arith.extui %805 : i1 to i64
    %807 = arith.trunci %806 : i64 to i32
    %808 = llvm.load %13 : !llvm.ptr -> i64
    %809 = llvm.load %11 : !llvm.ptr -> i64
    %810 = arith.cmpi ult, %808, %809 : i64
    %811 = arith.extui %810 : i1 to i64
    %812 = arith.trunci %811 : i64 to i32
    %813 = arith.ori %807, %812 : i32
    llvm.store %813, %8 : i32, !llvm.ptr
    %814 = llvm.load %7 : !llvm.ptr -> i32
    %c8_i32_404 = arith.constant 8 : i32
    %815 = arith.addi %814, %c8_i32_404 : i32
    llvm.store %815, %7 : i32, !llvm.ptr
    %c32_i32_405 = arith.constant 32 : i32
    %816 = arith.cmpi eq, %815, %c32_i32_405 : i32
    %817 = arith.extui %816 : i1 to i32
    %c0_i32_406 = arith.constant 0 : i32
    %818 = arith.cmpi eq, %817, %c0_i32_406 : i32
    %819 = arith.extui %818 : i1 to i32
    %c0_i32_407 = arith.constant 0 : i32
    %820 = arith.cmpi ne, %819, %c0_i32_407 : i32
    cf.cond_br %820, ^bb141, ^bb148
  ^bb147:  // pred: ^bb144
    %c1_i32_408 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_408) : (i32) -> ()
    cf.br ^bb146
  ^bb148:  // pred: ^bb146
    cf.br ^bb140
  ^bb149:  // 2 preds: ^bb140, ^bb150
    %821 = llvm.getelementptr %19[%758] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %822 = llvm.load volatile %821 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_409 = arith.constant 0 : i64
    %823 = arith.extui %753 : i32 to i64
    %824 = arith.addi %823, %c0_i64_409 : i64
    %c8_i64_410 = arith.constant 8 : i64
    %825 = arith.addi %824, %c8_i64_410 : i64
    %c0_i32_411 = arith.constant 0 : i32
    %826 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_411) : (!llvm.ptr, i32) -> i32
    %827 = arith.extui %826 : i32 to i64
    %c65536_i64_412 = arith.constant 65536 : i64
    %828 = arith.muli %827, %c65536_i64_412 : i64
    %829 = arith.cmpi ult, %825, %828 : i64
    cf.cond_br %829, ^bb151, ^bb152
  ^bb150:  // pred: ^bb140
    %c1_i32_413 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_413) : (i32) -> ()
    cf.br ^bb149
  ^bb151:  // 2 preds: ^bb149, ^bb152
    %830 = llvm.getelementptr %19[%824] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %822, %830 {alignment = 1 : i64} : i64, !llvm.ptr
    %831 = llvm.load %5 : !llvm.ptr -> i32
    %c256_i32 = arith.constant 256 : i32
    %832 = arith.addi %831, %c256_i32 : i32
    %833 = llvm.load %5 : !llvm.ptr -> i32
    %c280_i32_414 = arith.constant 280 : i32
    %834 = arith.addi %833, %c280_i32_414 : i32
    %c16_i32_415 = arith.constant 16 : i32
    %835 = arith.addi %834, %c16_i32_415 : i32
    %c0_i64_416 = arith.constant 0 : i64
    %836 = arith.extui %835 : i32 to i64
    %837 = arith.addi %836, %c0_i64_416 : i64
    %c8_i64_417 = arith.constant 8 : i64
    %838 = arith.addi %837, %c8_i64_417 : i64
    %c0_i32_418 = arith.constant 0 : i32
    %839 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_418) : (!llvm.ptr, i32) -> i32
    %840 = arith.extui %839 : i32 to i64
    %c65536_i64_419 = arith.constant 65536 : i64
    %841 = arith.muli %840, %c65536_i64_419 : i64
    %842 = arith.cmpi ult, %838, %841 : i64
    cf.cond_br %842, ^bb153, ^bb154
  ^bb152:  // pred: ^bb149
    %c1_i32_420 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_420) : (i32) -> ()
    cf.br ^bb151
  ^bb153:  // 2 preds: ^bb151, ^bb154
    %843 = llvm.getelementptr %19[%837] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %844 = llvm.load volatile %843 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_421 = arith.constant 0 : i64
    %845 = arith.extui %832 : i32 to i64
    %846 = arith.addi %845, %c0_i64_421 : i64
    %c8_i64_422 = arith.constant 8 : i64
    %847 = arith.addi %846, %c8_i64_422 : i64
    %c0_i32_423 = arith.constant 0 : i32
    %848 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_423) : (!llvm.ptr, i32) -> i32
    %849 = arith.extui %848 : i32 to i64
    %c65536_i64_424 = arith.constant 65536 : i64
    %850 = arith.muli %849, %c65536_i64_424 : i64
    %851 = arith.cmpi ult, %847, %850 : i64
    cf.cond_br %851, ^bb155, ^bb156
  ^bb154:  // pred: ^bb151
    %c1_i32_425 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_425) : (i32) -> ()
    cf.br ^bb153
  ^bb155:  // 2 preds: ^bb153, ^bb156
    %852 = llvm.getelementptr %19[%846] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %844, %852 {alignment = 1 : i64} : i64, !llvm.ptr
    %853 = llvm.load %5 : !llvm.ptr -> i32
    %c264_i32 = arith.constant 264 : i32
    %854 = arith.addi %853, %c264_i32 : i32
    %855 = llvm.load %5 : !llvm.ptr -> i32
    %c280_i32_426 = arith.constant 280 : i32
    %856 = arith.addi %855, %c280_i32_426 : i32
    %c24_i32_427 = arith.constant 24 : i32
    %857 = arith.addi %856, %c24_i32_427 : i32
    %c0_i64_428 = arith.constant 0 : i64
    %858 = arith.extui %857 : i32 to i64
    %859 = arith.addi %858, %c0_i64_428 : i64
    %c8_i64_429 = arith.constant 8 : i64
    %860 = arith.addi %859, %c8_i64_429 : i64
    %c0_i32_430 = arith.constant 0 : i32
    %861 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_430) : (!llvm.ptr, i32) -> i32
    %862 = arith.extui %861 : i32 to i64
    %c65536_i64_431 = arith.constant 65536 : i64
    %863 = arith.muli %862, %c65536_i64_431 : i64
    %864 = arith.cmpi ult, %860, %863 : i64
    cf.cond_br %864, ^bb157, ^bb158
  ^bb156:  // pred: ^bb153
    %c1_i32_432 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_432) : (i32) -> ()
    cf.br ^bb155
  ^bb157:  // 2 preds: ^bb155, ^bb158
    %865 = llvm.getelementptr %19[%859] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %866 = llvm.load volatile %865 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_433 = arith.constant 0 : i64
    %867 = arith.extui %854 : i32 to i64
    %868 = arith.addi %867, %c0_i64_433 : i64
    %c8_i64_434 = arith.constant 8 : i64
    %869 = arith.addi %868, %c8_i64_434 : i64
    %c0_i32_435 = arith.constant 0 : i32
    %870 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_435) : (!llvm.ptr, i32) -> i32
    %871 = arith.extui %870 : i32 to i64
    %c65536_i64_436 = arith.constant 65536 : i64
    %872 = arith.muli %871, %c65536_i64_436 : i64
    %873 = arith.cmpi ult, %869, %872 : i64
    cf.cond_br %873, ^bb159, ^bb160
  ^bb158:  // pred: ^bb155
    %c1_i32_437 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_437) : (i32) -> ()
    cf.br ^bb157
  ^bb159:  // 2 preds: ^bb157, ^bb160
    %874 = llvm.getelementptr %19[%868] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %866, %874 {alignment = 1 : i64} : i64, !llvm.ptr
    %875 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i64_438 = arith.constant 1 : i64
    %c232_i64_439 = arith.constant 232 : i64
    %876 = arith.extui %875 : i32 to i64
    %877 = arith.addi %876, %c232_i64_439 : i64
    %c8_i64_440 = arith.constant 8 : i64
    %878 = arith.addi %877, %c8_i64_440 : i64
    %c0_i32_441 = arith.constant 0 : i32
    %879 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_441) : (!llvm.ptr, i32) -> i32
    %880 = arith.extui %879 : i32 to i64
    %c65536_i64_442 = arith.constant 65536 : i64
    %881 = arith.muli %880, %c65536_i64_442 : i64
    %882 = arith.cmpi ult, %878, %881 : i64
    cf.cond_br %882, ^bb161, ^bb162
  ^bb160:  // pred: ^bb157
    %c1_i32_443 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_443) : (i32) -> ()
    cf.br ^bb159
  ^bb161:  // 2 preds: ^bb159, ^bb162
    %883 = llvm.getelementptr %19[%877] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_438, %883 {alignment = 1 : i64} : i64, !llvm.ptr
    %884 = llvm.load %5 : !llvm.ptr -> i32
    %885 = llvm.load %5 : !llvm.ptr -> i32
    %c280_i64_444 = arith.constant 280 : i64
    %886 = arith.extui %885 : i32 to i64
    %887 = arith.addi %886, %c280_i64_444 : i64
    %c8_i64_445 = arith.constant 8 : i64
    %888 = arith.addi %887, %c8_i64_445 : i64
    %c0_i32_446 = arith.constant 0 : i32
    %889 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_446) : (!llvm.ptr, i32) -> i32
    %890 = arith.extui %889 : i32 to i64
    %c65536_i64_447 = arith.constant 65536 : i64
    %891 = arith.muli %890, %c65536_i64_447 : i64
    %892 = arith.cmpi ult, %888, %891 : i64
    cf.cond_br %892, ^bb163, ^bb164
  ^bb162:  // pred: ^bb159
    %c1_i32_448 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_448) : (i32) -> ()
    cf.br ^bb161
  ^bb163:  // 2 preds: ^bb161, ^bb164
    %893 = llvm.getelementptr %19[%887] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %894 = llvm.load volatile %893 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c240_i64 = arith.constant 240 : i64
    %895 = arith.extui %884 : i32 to i64
    %896 = arith.addi %895, %c240_i64 : i64
    %c8_i64_449 = arith.constant 8 : i64
    %897 = arith.addi %896, %c8_i64_449 : i64
    %c0_i32_450 = arith.constant 0 : i32
    %898 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_450) : (!llvm.ptr, i32) -> i32
    %899 = arith.extui %898 : i32 to i64
    %c65536_i64_451 = arith.constant 65536 : i64
    %900 = arith.muli %899, %c65536_i64_451 : i64
    %901 = arith.cmpi ult, %897, %900 : i64
    cf.cond_br %901, ^bb165, ^bb166
  ^bb164:  // pred: ^bb161
    %c1_i32_452 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_452) : (i32) -> ()
    cf.br ^bb163
  ^bb165:  // 2 preds: ^bb163, ^bb166
    %902 = llvm.getelementptr %19[%896] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %894, %902 {alignment = 1 : i64} : i64, !llvm.ptr
    %903 = llvm.load %5 : !llvm.ptr -> i32
    %c312_i32_453 = arith.constant 312 : i32
    %904 = arith.addi %903, %c312_i32_453 : i32
    %c24_i32_454 = arith.constant 24 : i32
    %905 = arith.addi %904, %c24_i32_454 : i32
    llvm.store %905, %7 : i32, !llvm.ptr
    %906 = llvm.load %5 : !llvm.ptr -> i32
    %c200_i32_455 = arith.constant 200 : i32
    %907 = arith.addi %906, %c200_i32_455 : i32
    %c24_i32_456 = arith.constant 24 : i32
    %908 = arith.addi %907, %c24_i32_456 : i32
    %c0_i64_457 = arith.constant 0 : i64
    %909 = arith.extui %908 : i32 to i64
    %910 = arith.addi %909, %c0_i64_457 : i64
    %c8_i64_458 = arith.constant 8 : i64
    %911 = arith.addi %910, %c8_i64_458 : i64
    %c0_i32_459 = arith.constant 0 : i32
    %912 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_459) : (!llvm.ptr, i32) -> i32
    %913 = arith.extui %912 : i32 to i64
    %c65536_i64_460 = arith.constant 65536 : i64
    %914 = arith.muli %913, %c65536_i64_460 : i64
    %915 = arith.cmpi ult, %911, %914 : i64
    cf.cond_br %915, ^bb167, ^bb168
  ^bb166:  // pred: ^bb163
    %c1_i32_461 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_461) : (i32) -> ()
    cf.br ^bb165
  ^bb167:  // 2 preds: ^bb165, ^bb168
    %916 = llvm.getelementptr %19[%910] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %917 = llvm.load volatile %916 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_462 = arith.constant 0 : i64
    %918 = arith.extui %905 : i32 to i64
    %919 = arith.addi %918, %c0_i64_462 : i64
    %c8_i64_463 = arith.constant 8 : i64
    %920 = arith.addi %919, %c8_i64_463 : i64
    %c0_i32_464 = arith.constant 0 : i32
    %921 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_464) : (!llvm.ptr, i32) -> i32
    %922 = arith.extui %921 : i32 to i64
    %c65536_i64_465 = arith.constant 65536 : i64
    %923 = arith.muli %922, %c65536_i64_465 : i64
    %924 = arith.cmpi ult, %920, %923 : i64
    cf.cond_br %924, ^bb169, ^bb170
  ^bb168:  // pred: ^bb165
    %c1_i32_466 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_466) : (i32) -> ()
    cf.br ^bb167
  ^bb169:  // 2 preds: ^bb167, ^bb170
    %925 = llvm.getelementptr %19[%919] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %917, %925 {alignment = 1 : i64} : i64, !llvm.ptr
    %926 = llvm.load %5 : !llvm.ptr -> i32
    %c312_i32_467 = arith.constant 312 : i32
    %927 = arith.addi %926, %c312_i32_467 : i32
    %c16_i32_468 = arith.constant 16 : i32
    %928 = arith.addi %927, %c16_i32_468 : i32
    llvm.store %928, %8 : i32, !llvm.ptr
    %929 = llvm.load %5 : !llvm.ptr -> i32
    %c200_i32_469 = arith.constant 200 : i32
    %930 = arith.addi %929, %c200_i32_469 : i32
    %c16_i32_470 = arith.constant 16 : i32
    %931 = arith.addi %930, %c16_i32_470 : i32
    %c0_i64_471 = arith.constant 0 : i64
    %932 = arith.extui %931 : i32 to i64
    %933 = arith.addi %932, %c0_i64_471 : i64
    %c8_i64_472 = arith.constant 8 : i64
    %934 = arith.addi %933, %c8_i64_472 : i64
    %c0_i32_473 = arith.constant 0 : i32
    %935 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_473) : (!llvm.ptr, i32) -> i32
    %936 = arith.extui %935 : i32 to i64
    %c65536_i64_474 = arith.constant 65536 : i64
    %937 = arith.muli %936, %c65536_i64_474 : i64
    %938 = arith.cmpi ult, %934, %937 : i64
    cf.cond_br %938, ^bb171, ^bb172
  ^bb170:  // pred: ^bb167
    %c1_i32_475 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_475) : (i32) -> ()
    cf.br ^bb169
  ^bb171:  // 2 preds: ^bb169, ^bb172
    %939 = llvm.getelementptr %19[%933] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %940 = llvm.load volatile %939 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_476 = arith.constant 0 : i64
    %941 = arith.extui %928 : i32 to i64
    %942 = arith.addi %941, %c0_i64_476 : i64
    %c8_i64_477 = arith.constant 8 : i64
    %943 = arith.addi %942, %c8_i64_477 : i64
    %c0_i32_478 = arith.constant 0 : i32
    %944 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_478) : (!llvm.ptr, i32) -> i32
    %945 = arith.extui %944 : i32 to i64
    %c65536_i64_479 = arith.constant 65536 : i64
    %946 = arith.muli %945, %c65536_i64_479 : i64
    %947 = arith.cmpi ult, %943, %946 : i64
    cf.cond_br %947, ^bb173, ^bb174
  ^bb172:  // pred: ^bb169
    %c1_i32_480 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_480) : (i32) -> ()
    cf.br ^bb171
  ^bb173:  // 2 preds: ^bb171, ^bb174
    %948 = llvm.getelementptr %19[%942] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %940, %948 {alignment = 1 : i64} : i64, !llvm.ptr
    %949 = llvm.load %5 : !llvm.ptr -> i32
    %c312_i32_481 = arith.constant 312 : i32
    %950 = arith.addi %949, %c312_i32_481 : i32
    %c8_i32_482 = arith.constant 8 : i32
    %951 = arith.addi %950, %c8_i32_482 : i32
    llvm.store %951, %9 : i32, !llvm.ptr
    %952 = llvm.load %5 : !llvm.ptr -> i32
    %c200_i32_483 = arith.constant 200 : i32
    %953 = arith.addi %952, %c200_i32_483 : i32
    %c8_i32_484 = arith.constant 8 : i32
    %954 = arith.addi %953, %c8_i32_484 : i32
    %c0_i64_485 = arith.constant 0 : i64
    %955 = arith.extui %954 : i32 to i64
    %956 = arith.addi %955, %c0_i64_485 : i64
    %c8_i64_486 = arith.constant 8 : i64
    %957 = arith.addi %956, %c8_i64_486 : i64
    %c0_i32_487 = arith.constant 0 : i32
    %958 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_487) : (!llvm.ptr, i32) -> i32
    %959 = arith.extui %958 : i32 to i64
    %c65536_i64_488 = arith.constant 65536 : i64
    %960 = arith.muli %959, %c65536_i64_488 : i64
    %961 = arith.cmpi ult, %957, %960 : i64
    cf.cond_br %961, ^bb175, ^bb176
  ^bb174:  // pred: ^bb171
    %c1_i32_489 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_489) : (i32) -> ()
    cf.br ^bb173
  ^bb175:  // 2 preds: ^bb173, ^bb176
    %962 = llvm.getelementptr %19[%956] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %963 = llvm.load volatile %962 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_490 = arith.constant 0 : i64
    %964 = arith.extui %951 : i32 to i64
    %965 = arith.addi %964, %c0_i64_490 : i64
    %c8_i64_491 = arith.constant 8 : i64
    %966 = arith.addi %965, %c8_i64_491 : i64
    %c0_i32_492 = arith.constant 0 : i32
    %967 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_492) : (!llvm.ptr, i32) -> i32
    %968 = arith.extui %967 : i32 to i64
    %c65536_i64_493 = arith.constant 65536 : i64
    %969 = arith.muli %968, %c65536_i64_493 : i64
    %970 = arith.cmpi ult, %966, %969 : i64
    cf.cond_br %970, ^bb177, ^bb178
  ^bb176:  // pred: ^bb173
    %c1_i32_494 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_494) : (i32) -> ()
    cf.br ^bb175
  ^bb177:  // 2 preds: ^bb175, ^bb178
    %971 = llvm.getelementptr %19[%965] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %963, %971 {alignment = 1 : i64} : i64, !llvm.ptr
    %972 = llvm.load %5 : !llvm.ptr -> i32
    %973 = llvm.load %5 : !llvm.ptr -> i32
    %c200_i64_495 = arith.constant 200 : i64
    %974 = arith.extui %973 : i32 to i64
    %975 = arith.addi %974, %c200_i64_495 : i64
    %c8_i64_496 = arith.constant 8 : i64
    %976 = arith.addi %975, %c8_i64_496 : i64
    %c0_i32_497 = arith.constant 0 : i32
    %977 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_497) : (!llvm.ptr, i32) -> i32
    %978 = arith.extui %977 : i32 to i64
    %c65536_i64_498 = arith.constant 65536 : i64
    %979 = arith.muli %978, %c65536_i64_498 : i64
    %980 = arith.cmpi ult, %976, %979 : i64
    cf.cond_br %980, ^bb179, ^bb180
  ^bb178:  // pred: ^bb175
    %c1_i32_499 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_499) : (i32) -> ()
    cf.br ^bb177
  ^bb179:  // 2 preds: ^bb177, ^bb180
    %981 = llvm.getelementptr %19[%975] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %982 = llvm.load volatile %981 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c312_i64_500 = arith.constant 312 : i64
    %983 = arith.extui %972 : i32 to i64
    %984 = arith.addi %983, %c312_i64_500 : i64
    %c8_i64_501 = arith.constant 8 : i64
    %985 = arith.addi %984, %c8_i64_501 : i64
    %c0_i32_502 = arith.constant 0 : i32
    %986 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_502) : (!llvm.ptr, i32) -> i32
    %987 = arith.extui %986 : i32 to i64
    %c65536_i64_503 = arith.constant 65536 : i64
    %988 = arith.muli %987, %c65536_i64_503 : i64
    %989 = arith.cmpi ult, %985, %988 : i64
    cf.cond_br %989, ^bb181, ^bb182
  ^bb180:  // pred: ^bb177
    %c1_i32_504 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_504) : (i32) -> ()
    cf.br ^bb179
  ^bb181:  // 2 preds: ^bb179, ^bb182
    %990 = llvm.getelementptr %19[%984] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %982, %990 {alignment = 1 : i64} : i64, !llvm.ptr
    %991 = llvm.load %5 : !llvm.ptr -> i32
    %c312_i32_505 = arith.constant 312 : i32
    %992 = arith.addi %991, %c312_i32_505 : i32
    %993 = llvm.load %5 : !llvm.ptr -> i32
    %994 = llvm.load %5 : !llvm.ptr -> i32
    %c280_i32_506 = arith.constant 280 : i32
    %995 = arith.addi %994, %c280_i32_506 : i32
    call @f32(%arg0, %992, %993, %995) : (!llvm.ptr, i32, i32, i32) -> ()
    %996 = llvm.load %5 : !llvm.ptr -> i32
    %c312_i32_507 = arith.constant 312 : i32
    %997 = arith.addi %996, %c312_i32_507 : i32
    %c48_i32_508 = arith.constant 48 : i32
    %998 = arith.addi %997, %c48_i32_508 : i32
    %999 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_509 = arith.constant 16 : i32
    %1000 = arith.addi %999, %c16_i32_509 : i32
    %c0_i64_510 = arith.constant 0 : i64
    %1001 = arith.extui %1000 : i32 to i64
    %1002 = arith.addi %1001, %c0_i64_510 : i64
    %c4_i64_511 = arith.constant 4 : i64
    %1003 = arith.addi %1002, %c4_i64_511 : i64
    %c0_i32_512 = arith.constant 0 : i32
    %1004 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_512) : (!llvm.ptr, i32) -> i32
    %1005 = arith.extui %1004 : i32 to i64
    %c65536_i64_513 = arith.constant 65536 : i64
    %1006 = arith.muli %1005, %c65536_i64_513 : i64
    %1007 = arith.cmpi ult, %1003, %1006 : i64
    cf.cond_br %1007, ^bb183, ^bb184
  ^bb182:  // pred: ^bb179
    %c1_i32_514 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_514) : (i32) -> ()
    cf.br ^bb181
  ^bb183:  // 2 preds: ^bb181, ^bb184
    %1008 = llvm.getelementptr %19[%1002] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1009 = llvm.load volatile %1008 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_515 = arith.constant 0 : i64
    %1010 = arith.extui %998 : i32 to i64
    %1011 = arith.addi %1010, %c0_i64_515 : i64
    %c4_i64_516 = arith.constant 4 : i64
    %1012 = arith.addi %1011, %c4_i64_516 : i64
    %c0_i32_517 = arith.constant 0 : i32
    %1013 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_517) : (!llvm.ptr, i32) -> i32
    %1014 = arith.extui %1013 : i32 to i64
    %c65536_i64_518 = arith.constant 65536 : i64
    %1015 = arith.muli %1014, %c65536_i64_518 : i64
    %1016 = arith.cmpi ult, %1012, %1015 : i64
    cf.cond_br %1016, ^bb185, ^bb186
  ^bb184:  // pred: ^bb181
    %c1_i32_519 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_519) : (i32) -> ()
    cf.br ^bb183
  ^bb185:  // 2 preds: ^bb183, ^bb186
    %1017 = llvm.getelementptr %19[%1011] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1009, %1017 {alignment = 1 : i64} : i32, !llvm.ptr
    %1018 = llvm.load %5 : !llvm.ptr -> i32
    %c352_i32 = arith.constant 352 : i32
    %1019 = arith.addi %1018, %c352_i32 : i32
    %1020 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_520 = arith.constant 8 : i32
    %1021 = arith.addi %1020, %c8_i32_520 : i32
    %c0_i64_521 = arith.constant 0 : i64
    %1022 = arith.extui %1021 : i32 to i64
    %1023 = arith.addi %1022, %c0_i64_521 : i64
    %c8_i64_522 = arith.constant 8 : i64
    %1024 = arith.addi %1023, %c8_i64_522 : i64
    %c0_i32_523 = arith.constant 0 : i32
    %1025 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_523) : (!llvm.ptr, i32) -> i32
    %1026 = arith.extui %1025 : i32 to i64
    %c65536_i64_524 = arith.constant 65536 : i64
    %1027 = arith.muli %1026, %c65536_i64_524 : i64
    %1028 = arith.cmpi ult, %1024, %1027 : i64
    cf.cond_br %1028, ^bb187, ^bb188
  ^bb186:  // pred: ^bb183
    %c1_i32_525 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_525) : (i32) -> ()
    cf.br ^bb185
  ^bb187:  // 2 preds: ^bb185, ^bb188
    %1029 = llvm.getelementptr %19[%1023] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1030 = llvm.load volatile %1029 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_526 = arith.constant 0 : i64
    %1031 = arith.extui %1019 : i32 to i64
    %1032 = arith.addi %1031, %c0_i64_526 : i64
    %c8_i64_527 = arith.constant 8 : i64
    %1033 = arith.addi %1032, %c8_i64_527 : i64
    %c0_i32_528 = arith.constant 0 : i32
    %1034 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_528) : (!llvm.ptr, i32) -> i32
    %1035 = arith.extui %1034 : i32 to i64
    %c65536_i64_529 = arith.constant 65536 : i64
    %1036 = arith.muli %1035, %c65536_i64_529 : i64
    %1037 = arith.cmpi ult, %1033, %1036 : i64
    cf.cond_br %1037, ^bb189, ^bb190
  ^bb188:  // pred: ^bb185
    %c1_i32_530 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_530) : (i32) -> ()
    cf.br ^bb187
  ^bb189:  // 2 preds: ^bb187, ^bb190
    %1038 = llvm.getelementptr %19[%1032] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1030, %1038 {alignment = 1 : i64} : i64, !llvm.ptr
    %1039 = llvm.load %5 : !llvm.ptr -> i32
    %c372_i32 = arith.constant 372 : i32
    %1040 = arith.addi %1039, %c372_i32 : i32
    %1041 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_531 = arith.constant 8 : i32
    %1042 = arith.addi %1041, %c8_i32_531 : i32
    %c0_i64_532 = arith.constant 0 : i64
    %1043 = arith.extui %1042 : i32 to i64
    %1044 = arith.addi %1043, %c0_i64_532 : i64
    %c8_i64_533 = arith.constant 8 : i64
    %1045 = arith.addi %1044, %c8_i64_533 : i64
    %c0_i32_534 = arith.constant 0 : i32
    %1046 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_534) : (!llvm.ptr, i32) -> i32
    %1047 = arith.extui %1046 : i32 to i64
    %c65536_i64_535 = arith.constant 65536 : i64
    %1048 = arith.muli %1047, %c65536_i64_535 : i64
    %1049 = arith.cmpi ult, %1045, %1048 : i64
    cf.cond_br %1049, ^bb191, ^bb192
  ^bb190:  // pred: ^bb187
    %c1_i32_536 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_536) : (i32) -> ()
    cf.br ^bb189
  ^bb191:  // 2 preds: ^bb189, ^bb192
    %1050 = llvm.getelementptr %19[%1044] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1051 = llvm.load volatile %1050 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_537 = arith.constant 0 : i64
    %1052 = arith.extui %1040 : i32 to i64
    %1053 = arith.addi %1052, %c0_i64_537 : i64
    %c8_i64_538 = arith.constant 8 : i64
    %1054 = arith.addi %1053, %c8_i64_538 : i64
    %c0_i32_539 = arith.constant 0 : i32
    %1055 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_539) : (!llvm.ptr, i32) -> i32
    %1056 = arith.extui %1055 : i32 to i64
    %c65536_i64_540 = arith.constant 65536 : i64
    %1057 = arith.muli %1056, %c65536_i64_540 : i64
    %1058 = arith.cmpi ult, %1054, %1057 : i64
    cf.cond_br %1058, ^bb193, ^bb194
  ^bb192:  // pred: ^bb189
    %c1_i32_541 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_541) : (i32) -> ()
    cf.br ^bb191
  ^bb193:  // 2 preds: ^bb191, ^bb194
    %1059 = llvm.getelementptr %19[%1053] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1051, %1059 {alignment = 1 : i64} : i64, !llvm.ptr
    %1060 = llvm.load %5 : !llvm.ptr -> i32
    %c380_i32 = arith.constant 380 : i32
    %1061 = arith.addi %1060, %c380_i32 : i32
    %1062 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_542 = arith.constant 16 : i32
    %1063 = arith.addi %1062, %c16_i32_542 : i32
    %c0_i64_543 = arith.constant 0 : i64
    %1064 = arith.extui %1063 : i32 to i64
    %1065 = arith.addi %1064, %c0_i64_543 : i64
    %c4_i64_544 = arith.constant 4 : i64
    %1066 = arith.addi %1065, %c4_i64_544 : i64
    %c0_i32_545 = arith.constant 0 : i32
    %1067 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_545) : (!llvm.ptr, i32) -> i32
    %1068 = arith.extui %1067 : i32 to i64
    %c65536_i64_546 = arith.constant 65536 : i64
    %1069 = arith.muli %1068, %c65536_i64_546 : i64
    %1070 = arith.cmpi ult, %1066, %1069 : i64
    cf.cond_br %1070, ^bb195, ^bb196
  ^bb194:  // pred: ^bb191
    %c1_i32_547 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_547) : (i32) -> ()
    cf.br ^bb193
  ^bb195:  // 2 preds: ^bb193, ^bb196
    %1071 = llvm.getelementptr %19[%1065] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1072 = llvm.load volatile %1071 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_548 = arith.constant 0 : i64
    %1073 = arith.extui %1061 : i32 to i64
    %1074 = arith.addi %1073, %c0_i64_548 : i64
    %c4_i64_549 = arith.constant 4 : i64
    %1075 = arith.addi %1074, %c4_i64_549 : i64
    %c0_i32_550 = arith.constant 0 : i32
    %1076 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_550) : (!llvm.ptr, i32) -> i32
    %1077 = arith.extui %1076 : i32 to i64
    %c65536_i64_551 = arith.constant 65536 : i64
    %1078 = arith.muli %1077, %c65536_i64_551 : i64
    %1079 = arith.cmpi ult, %1075, %1078 : i64
    cf.cond_br %1079, ^bb197, ^bb198
  ^bb196:  // pred: ^bb193
    %c1_i32_552 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_552) : (i32) -> ()
    cf.br ^bb195
  ^bb197:  // 2 preds: ^bb195, ^bb198
    %1080 = llvm.getelementptr %19[%1074] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1072, %1080 {alignment = 1 : i64} : i32, !llvm.ptr
    %1081 = llvm.load %9 : !llvm.ptr -> i32
    %1082 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i32_553 = arith.constant 8 : i32
    %1083 = arith.addi %1082, %c8_i32_553 : i32
    %c0_i64_554 = arith.constant 0 : i64
    %1084 = arith.extui %1083 : i32 to i64
    %1085 = arith.addi %1084, %c0_i64_554 : i64
    %c8_i64_555 = arith.constant 8 : i64
    %1086 = arith.addi %1085, %c8_i64_555 : i64
    %c0_i32_556 = arith.constant 0 : i32
    %1087 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_556) : (!llvm.ptr, i32) -> i32
    %1088 = arith.extui %1087 : i32 to i64
    %c65536_i64_557 = arith.constant 65536 : i64
    %1089 = arith.muli %1088, %c65536_i64_557 : i64
    %1090 = arith.cmpi ult, %1086, %1089 : i64
    cf.cond_br %1090, ^bb199, ^bb200
  ^bb198:  // pred: ^bb195
    %c1_i32_558 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_558) : (i32) -> ()
    cf.br ^bb197
  ^bb199:  // 2 preds: ^bb197, ^bb200
    %1091 = llvm.getelementptr %19[%1085] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1092 = llvm.load volatile %1091 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_559 = arith.constant 0 : i64
    %1093 = arith.extui %1081 : i32 to i64
    %1094 = arith.addi %1093, %c0_i64_559 : i64
    %c8_i64_560 = arith.constant 8 : i64
    %1095 = arith.addi %1094, %c8_i64_560 : i64
    %c0_i32_561 = arith.constant 0 : i32
    %1096 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_561) : (!llvm.ptr, i32) -> i32
    %1097 = arith.extui %1096 : i32 to i64
    %c65536_i64_562 = arith.constant 65536 : i64
    %1098 = arith.muli %1097, %c65536_i64_562 : i64
    %1099 = arith.cmpi ult, %1095, %1098 : i64
    cf.cond_br %1099, ^bb201, ^bb202
  ^bb200:  // pred: ^bb197
    %c1_i32_563 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_563) : (i32) -> ()
    cf.br ^bb199
  ^bb201:  // 2 preds: ^bb199, ^bb202
    %1100 = llvm.getelementptr %19[%1094] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1092, %1100 {alignment = 1 : i64} : i64, !llvm.ptr
    %1101 = llvm.load %8 : !llvm.ptr -> i32
    %1102 = llvm.load %4 : !llvm.ptr -> i32
    %c16_i32_564 = arith.constant 16 : i32
    %1103 = arith.addi %1102, %c16_i32_564 : i32
    %c0_i64_565 = arith.constant 0 : i64
    %1104 = arith.extui %1103 : i32 to i64
    %1105 = arith.addi %1104, %c0_i64_565 : i64
    %c8_i64_566 = arith.constant 8 : i64
    %1106 = arith.addi %1105, %c8_i64_566 : i64
    %c0_i32_567 = arith.constant 0 : i32
    %1107 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_567) : (!llvm.ptr, i32) -> i32
    %1108 = arith.extui %1107 : i32 to i64
    %c65536_i64_568 = arith.constant 65536 : i64
    %1109 = arith.muli %1108, %c65536_i64_568 : i64
    %1110 = arith.cmpi ult, %1106, %1109 : i64
    cf.cond_br %1110, ^bb203, ^bb204
  ^bb202:  // pred: ^bb199
    %c1_i32_569 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_569) : (i32) -> ()
    cf.br ^bb201
  ^bb203:  // 2 preds: ^bb201, ^bb204
    %1111 = llvm.getelementptr %19[%1105] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1112 = llvm.load volatile %1111 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_570 = arith.constant 0 : i64
    %1113 = arith.extui %1101 : i32 to i64
    %1114 = arith.addi %1113, %c0_i64_570 : i64
    %c8_i64_571 = arith.constant 8 : i64
    %1115 = arith.addi %1114, %c8_i64_571 : i64
    %c0_i32_572 = arith.constant 0 : i32
    %1116 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_572) : (!llvm.ptr, i32) -> i32
    %1117 = arith.extui %1116 : i32 to i64
    %c65536_i64_573 = arith.constant 65536 : i64
    %1118 = arith.muli %1117, %c65536_i64_573 : i64
    %1119 = arith.cmpi ult, %1115, %1118 : i64
    cf.cond_br %1119, ^bb205, ^bb206
  ^bb204:  // pred: ^bb201
    %c1_i32_574 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_574) : (i32) -> ()
    cf.br ^bb203
  ^bb205:  // 2 preds: ^bb203, ^bb206
    %1120 = llvm.getelementptr %19[%1114] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1112, %1120 {alignment = 1 : i64} : i64, !llvm.ptr
    %1121 = llvm.load %7 : !llvm.ptr -> i32
    %1122 = llvm.load %4 : !llvm.ptr -> i32
    %c24_i32_575 = arith.constant 24 : i32
    %1123 = arith.addi %1122, %c24_i32_575 : i32
    %c0_i64_576 = arith.constant 0 : i64
    %1124 = arith.extui %1123 : i32 to i64
    %1125 = arith.addi %1124, %c0_i64_576 : i64
    %c8_i64_577 = arith.constant 8 : i64
    %1126 = arith.addi %1125, %c8_i64_577 : i64
    %c0_i32_578 = arith.constant 0 : i32
    %1127 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_578) : (!llvm.ptr, i32) -> i32
    %1128 = arith.extui %1127 : i32 to i64
    %c65536_i64_579 = arith.constant 65536 : i64
    %1129 = arith.muli %1128, %c65536_i64_579 : i64
    %1130 = arith.cmpi ult, %1126, %1129 : i64
    cf.cond_br %1130, ^bb207, ^bb208
  ^bb206:  // pred: ^bb203
    %c1_i32_580 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_580) : (i32) -> ()
    cf.br ^bb205
  ^bb207:  // 2 preds: ^bb205, ^bb208
    %1131 = llvm.getelementptr %19[%1125] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1132 = llvm.load volatile %1131 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_581 = arith.constant 0 : i64
    %1133 = arith.extui %1121 : i32 to i64
    %1134 = arith.addi %1133, %c0_i64_581 : i64
    %c8_i64_582 = arith.constant 8 : i64
    %1135 = arith.addi %1134, %c8_i64_582 : i64
    %c0_i32_583 = arith.constant 0 : i32
    %1136 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_583) : (!llvm.ptr, i32) -> i32
    %1137 = arith.extui %1136 : i32 to i64
    %c65536_i64_584 = arith.constant 65536 : i64
    %1138 = arith.muli %1137, %c65536_i64_584 : i64
    %1139 = arith.cmpi ult, %1135, %1138 : i64
    cf.cond_br %1139, ^bb209, ^bb210
  ^bb208:  // pred: ^bb205
    %c1_i32_585 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_585) : (i32) -> ()
    cf.br ^bb207
  ^bb209:  // 2 preds: ^bb207, ^bb210
    %1140 = llvm.getelementptr %19[%1134] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1132, %1140 {alignment = 1 : i64} : i64, !llvm.ptr
    %1141 = llvm.load %5 : !llvm.ptr -> i32
    %1142 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_586 = arith.constant 0 : i64
    %1143 = arith.extui %1142 : i32 to i64
    %1144 = arith.addi %1143, %c0_i64_586 : i64
    %c8_i64_587 = arith.constant 8 : i64
    %1145 = arith.addi %1144, %c8_i64_587 : i64
    %c0_i32_588 = arith.constant 0 : i32
    %1146 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_588) : (!llvm.ptr, i32) -> i32
    %1147 = arith.extui %1146 : i32 to i64
    %c65536_i64_589 = arith.constant 65536 : i64
    %1148 = arith.muli %1147, %c65536_i64_589 : i64
    %1149 = arith.cmpi ult, %1145, %1148 : i64
    cf.cond_br %1149, ^bb211, ^bb212
  ^bb210:  // pred: ^bb207
    %c1_i32_590 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_590) : (i32) -> ()
    cf.br ^bb209
  ^bb211:  // 2 preds: ^bb209, ^bb212
    %1150 = llvm.getelementptr %19[%1144] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1151 = llvm.load volatile %1150 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c344_i64 = arith.constant 344 : i64
    %1152 = arith.extui %1141 : i32 to i64
    %1153 = arith.addi %1152, %c344_i64 : i64
    %c8_i64_591 = arith.constant 8 : i64
    %1154 = arith.addi %1153, %c8_i64_591 : i64
    %c0_i32_592 = arith.constant 0 : i32
    %1155 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_592) : (!llvm.ptr, i32) -> i32
    %1156 = arith.extui %1155 : i32 to i64
    %c65536_i64_593 = arith.constant 65536 : i64
    %1157 = arith.muli %1156, %c65536_i64_593 : i64
    %1158 = arith.cmpi ult, %1154, %1157 : i64
    cf.cond_br %1158, ^bb213, ^bb214
  ^bb212:  // pred: ^bb209
    %c1_i32_594 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_594) : (i32) -> ()
    cf.br ^bb211
  ^bb213:  // 2 preds: ^bb211, ^bb214
    %1159 = llvm.getelementptr %19[%1153] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1151, %1159 {alignment = 1 : i64} : i64, !llvm.ptr
    %1160 = llvm.load %5 : !llvm.ptr -> i32
    %1161 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_595 = arith.constant 0 : i64
    %1162 = arith.extui %1161 : i32 to i64
    %1163 = arith.addi %1162, %c0_i64_595 : i64
    %c8_i64_596 = arith.constant 8 : i64
    %1164 = arith.addi %1163, %c8_i64_596 : i64
    %c0_i32_597 = arith.constant 0 : i32
    %1165 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_597) : (!llvm.ptr, i32) -> i32
    %1166 = arith.extui %1165 : i32 to i64
    %c65536_i64_598 = arith.constant 65536 : i64
    %1167 = arith.muli %1166, %c65536_i64_598 : i64
    %1168 = arith.cmpi ult, %1164, %1167 : i64
    cf.cond_br %1168, ^bb215, ^bb216
  ^bb214:  // pred: ^bb211
    %c1_i32_599 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_599) : (i32) -> ()
    cf.br ^bb213
  ^bb215:  // 2 preds: ^bb213, ^bb216
    %1169 = llvm.getelementptr %19[%1163] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1170 = llvm.load volatile %1169 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c364_i64 = arith.constant 364 : i64
    %1171 = arith.extui %1160 : i32 to i64
    %1172 = arith.addi %1171, %c364_i64 : i64
    %c8_i64_600 = arith.constant 8 : i64
    %1173 = arith.addi %1172, %c8_i64_600 : i64
    %c0_i32_601 = arith.constant 0 : i32
    %1174 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_601) : (!llvm.ptr, i32) -> i32
    %1175 = arith.extui %1174 : i32 to i64
    %c65536_i64_602 = arith.constant 65536 : i64
    %1176 = arith.muli %1175, %c65536_i64_602 : i64
    %1177 = arith.cmpi ult, %1173, %1176 : i64
    cf.cond_br %1177, ^bb217, ^bb218
  ^bb216:  // pred: ^bb213
    %c1_i32_603 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_603) : (i32) -> ()
    cf.br ^bb215
  ^bb217:  // 2 preds: ^bb215, ^bb218
    %1178 = llvm.getelementptr %19[%1172] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1170, %1178 {alignment = 1 : i64} : i64, !llvm.ptr
    %1179 = llvm.load %5 : !llvm.ptr -> i32
    %1180 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_604 = arith.constant 0 : i64
    %1181 = arith.extui %1180 : i32 to i64
    %1182 = arith.addi %1181, %c0_i64_604 : i64
    %c8_i64_605 = arith.constant 8 : i64
    %1183 = arith.addi %1182, %c8_i64_605 : i64
    %c0_i32_606 = arith.constant 0 : i32
    %1184 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_606) : (!llvm.ptr, i32) -> i32
    %1185 = arith.extui %1184 : i32 to i64
    %c65536_i64_607 = arith.constant 65536 : i64
    %1186 = arith.muli %1185, %c65536_i64_607 : i64
    %1187 = arith.cmpi ult, %1183, %1186 : i64
    cf.cond_br %1187, ^bb219, ^bb220
  ^bb218:  // pred: ^bb215
    %c1_i32_608 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_608) : (i32) -> ()
    cf.br ^bb217
  ^bb219:  // 2 preds: ^bb217, ^bb220
    %1188 = llvm.getelementptr %19[%1182] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1189 = llvm.load volatile %1188 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c312_i64_609 = arith.constant 312 : i64
    %1190 = arith.extui %1179 : i32 to i64
    %1191 = arith.addi %1190, %c312_i64_609 : i64
    %c8_i64_610 = arith.constant 8 : i64
    %1192 = arith.addi %1191, %c8_i64_610 : i64
    %c0_i32_611 = arith.constant 0 : i32
    %1193 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_611) : (!llvm.ptr, i32) -> i32
    %1194 = arith.extui %1193 : i32 to i64
    %c65536_i64_612 = arith.constant 65536 : i64
    %1195 = arith.muli %1194, %c65536_i64_612 : i64
    %1196 = arith.cmpi ult, %1192, %1195 : i64
    cf.cond_br %1196, ^bb221, ^bb222
  ^bb220:  // pred: ^bb217
    %c1_i32_613 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_613) : (i32) -> ()
    cf.br ^bb219
  ^bb221:  // 2 preds: ^bb219, ^bb222
    %1197 = llvm.getelementptr %19[%1191] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1189, %1197 {alignment = 1 : i64} : i64, !llvm.ptr
    %1198 = llvm.load %5 : !llvm.ptr -> i32
    %c312_i32_614 = arith.constant 312 : i32
    %1199 = arith.addi %1198, %c312_i32_614 : i32
    call @f31(%arg0, %1199) : (!llvm.ptr, i32) -> ()
    %1200 = llvm.load %0 : !llvm.ptr -> i32
    %c2_i64 = arith.constant 2 : i64
    %c0_i64_615 = arith.constant 0 : i64
    %1201 = arith.extui %1200 : i32 to i64
    %1202 = arith.addi %1201, %c0_i64_615 : i64
    %c8_i64_616 = arith.constant 8 : i64
    %1203 = arith.addi %1202, %c8_i64_616 : i64
    %c0_i32_617 = arith.constant 0 : i32
    %1204 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_617) : (!llvm.ptr, i32) -> i32
    %1205 = arith.extui %1204 : i32 to i64
    %c65536_i64_618 = arith.constant 65536 : i64
    %1206 = arith.muli %1205, %c65536_i64_618 : i64
    %1207 = arith.cmpi ult, %1203, %1206 : i64
    cf.cond_br %1207, ^bb223, ^bb224
  ^bb222:  // pred: ^bb219
    %c1_i32_619 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_619) : (i32) -> ()
    cf.br ^bb221
  ^bb223:  // 2 preds: ^bb221, ^bb224
    %1208 = llvm.getelementptr %19[%1202] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i64, %1208 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb36
  ^bb224:  // pred: ^bb221
    %c1_i32_620 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_620) : (i32) -> ()
    cf.br ^bb223
  ^bb225:  // 2 preds: ^bb37, ^bb226
    %1209 = llvm.getelementptr %19[%198] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1210 = llvm.load volatile %1209 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_621 = arith.constant 0 : i64
    %1211 = arith.extui %194 : i32 to i64
    %1212 = arith.addi %1211, %c0_i64_621 : i64
    %c4_i64_622 = arith.constant 4 : i64
    %1213 = arith.addi %1212, %c4_i64_622 : i64
    %c0_i32_623 = arith.constant 0 : i32
    %1214 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_623) : (!llvm.ptr, i32) -> i32
    %1215 = arith.extui %1214 : i32 to i64
    %c65536_i64_624 = arith.constant 65536 : i64
    %1216 = arith.muli %1215, %c65536_i64_624 : i64
    %1217 = arith.cmpi ult, %1213, %1216 : i64
    cf.cond_br %1217, ^bb227, ^bb228
  ^bb226:  // pred: ^bb37
    %c1_i32_625 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_625) : (i32) -> ()
    cf.br ^bb225
  ^bb227:  // 2 preds: ^bb225, ^bb228
    %1218 = llvm.getelementptr %19[%1212] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1210, %1218 {alignment = 1 : i64} : i32, !llvm.ptr
    %1219 = llvm.load %5 : !llvm.ptr -> i32
    %c184_i32 = arith.constant 184 : i32
    %1220 = arith.addi %1219, %c184_i32 : i32
    %1221 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_626 = arith.constant 8 : i32
    %1222 = arith.addi %1221, %c8_i32_626 : i32
    %c0_i64_627 = arith.constant 0 : i64
    %1223 = arith.extui %1222 : i32 to i64
    %1224 = arith.addi %1223, %c0_i64_627 : i64
    %c8_i64_628 = arith.constant 8 : i64
    %1225 = arith.addi %1224, %c8_i64_628 : i64
    %c0_i32_629 = arith.constant 0 : i32
    %1226 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_629) : (!llvm.ptr, i32) -> i32
    %1227 = arith.extui %1226 : i32 to i64
    %c65536_i64_630 = arith.constant 65536 : i64
    %1228 = arith.muli %1227, %c65536_i64_630 : i64
    %1229 = arith.cmpi ult, %1225, %1228 : i64
    cf.cond_br %1229, ^bb229, ^bb230
  ^bb228:  // pred: ^bb225
    %c1_i32_631 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_631) : (i32) -> ()
    cf.br ^bb227
  ^bb229:  // 2 preds: ^bb227, ^bb230
    %1230 = llvm.getelementptr %19[%1224] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1231 = llvm.load volatile %1230 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_632 = arith.constant 0 : i64
    %1232 = arith.extui %1220 : i32 to i64
    %1233 = arith.addi %1232, %c0_i64_632 : i64
    %c8_i64_633 = arith.constant 8 : i64
    %1234 = arith.addi %1233, %c8_i64_633 : i64
    %c0_i32_634 = arith.constant 0 : i32
    %1235 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_634) : (!llvm.ptr, i32) -> i32
    %1236 = arith.extui %1235 : i32 to i64
    %c65536_i64_635 = arith.constant 65536 : i64
    %1237 = arith.muli %1236, %c65536_i64_635 : i64
    %1238 = arith.cmpi ult, %1234, %1237 : i64
    cf.cond_br %1238, ^bb231, ^bb232
  ^bb230:  // pred: ^bb227
    %c1_i32_636 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_636) : (i32) -> ()
    cf.br ^bb229
  ^bb231:  // 2 preds: ^bb229, ^bb232
    %1239 = llvm.getelementptr %19[%1233] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1231, %1239 {alignment = 1 : i64} : i64, !llvm.ptr
    %1240 = llvm.load %5 : !llvm.ptr -> i32
    %c112_i32 = arith.constant 112 : i32
    %1241 = arith.addi %1240, %c112_i32 : i32
    %c8_i32_637 = arith.constant 8 : i32
    %1242 = arith.addi %1241, %c8_i32_637 : i32
    %1243 = llvm.load %6 : !llvm.ptr -> i32
    %c8_i32_638 = arith.constant 8 : i32
    %1244 = arith.addi %1243, %c8_i32_638 : i32
    %c0_i64_639 = arith.constant 0 : i64
    %1245 = arith.extui %1244 : i32 to i64
    %1246 = arith.addi %1245, %c0_i64_639 : i64
    %c8_i64_640 = arith.constant 8 : i64
    %1247 = arith.addi %1246, %c8_i64_640 : i64
    %c0_i32_641 = arith.constant 0 : i32
    %1248 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_641) : (!llvm.ptr, i32) -> i32
    %1249 = arith.extui %1248 : i32 to i64
    %c65536_i64_642 = arith.constant 65536 : i64
    %1250 = arith.muli %1249, %c65536_i64_642 : i64
    %1251 = arith.cmpi ult, %1247, %1250 : i64
    cf.cond_br %1251, ^bb233, ^bb234
  ^bb232:  // pred: ^bb229
    %c1_i32_643 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_643) : (i32) -> ()
    cf.br ^bb231
  ^bb233:  // 2 preds: ^bb231, ^bb234
    %1252 = llvm.getelementptr %19[%1246] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1253 = llvm.load volatile %1252 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_644 = arith.constant 0 : i64
    %1254 = arith.extui %1242 : i32 to i64
    %1255 = arith.addi %1254, %c0_i64_644 : i64
    %c8_i64_645 = arith.constant 8 : i64
    %1256 = arith.addi %1255, %c8_i64_645 : i64
    %c0_i32_646 = arith.constant 0 : i32
    %1257 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_646) : (!llvm.ptr, i32) -> i32
    %1258 = arith.extui %1257 : i32 to i64
    %c65536_i64_647 = arith.constant 65536 : i64
    %1259 = arith.muli %1258, %c65536_i64_647 : i64
    %1260 = arith.cmpi ult, %1256, %1259 : i64
    cf.cond_br %1260, ^bb235, ^bb236
  ^bb234:  // pred: ^bb231
    %c1_i32_648 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_648) : (i32) -> ()
    cf.br ^bb233
  ^bb235:  // 2 preds: ^bb233, ^bb236
    %1261 = llvm.getelementptr %19[%1255] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1253, %1261 {alignment = 1 : i64} : i64, !llvm.ptr
    %1262 = llvm.load %5 : !llvm.ptr -> i32
    %c112_i32_649 = arith.constant 112 : i32
    %1263 = arith.addi %1262, %c112_i32_649 : i32
    %c16_i32_650 = arith.constant 16 : i32
    %1264 = arith.addi %1263, %c16_i32_650 : i32
    %1265 = llvm.load %6 : !llvm.ptr -> i32
    %c16_i32_651 = arith.constant 16 : i32
    %1266 = arith.addi %1265, %c16_i32_651 : i32
    %c0_i64_652 = arith.constant 0 : i64
    %1267 = arith.extui %1266 : i32 to i64
    %1268 = arith.addi %1267, %c0_i64_652 : i64
    %c8_i64_653 = arith.constant 8 : i64
    %1269 = arith.addi %1268, %c8_i64_653 : i64
    %c0_i32_654 = arith.constant 0 : i32
    %1270 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_654) : (!llvm.ptr, i32) -> i32
    %1271 = arith.extui %1270 : i32 to i64
    %c65536_i64_655 = arith.constant 65536 : i64
    %1272 = arith.muli %1271, %c65536_i64_655 : i64
    %1273 = arith.cmpi ult, %1269, %1272 : i64
    cf.cond_br %1273, ^bb237, ^bb238
  ^bb236:  // pred: ^bb233
    %c1_i32_656 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_656) : (i32) -> ()
    cf.br ^bb235
  ^bb237:  // 2 preds: ^bb235, ^bb238
    %1274 = llvm.getelementptr %19[%1268] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1275 = llvm.load volatile %1274 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_657 = arith.constant 0 : i64
    %1276 = arith.extui %1264 : i32 to i64
    %1277 = arith.addi %1276, %c0_i64_657 : i64
    %c8_i64_658 = arith.constant 8 : i64
    %1278 = arith.addi %1277, %c8_i64_658 : i64
    %c0_i32_659 = arith.constant 0 : i32
    %1279 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_659) : (!llvm.ptr, i32) -> i32
    %1280 = arith.extui %1279 : i32 to i64
    %c65536_i64_660 = arith.constant 65536 : i64
    %1281 = arith.muli %1280, %c65536_i64_660 : i64
    %1282 = arith.cmpi ult, %1278, %1281 : i64
    cf.cond_br %1282, ^bb239, ^bb240
  ^bb238:  // pred: ^bb235
    %c1_i32_661 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_661) : (i32) -> ()
    cf.br ^bb237
  ^bb239:  // 2 preds: ^bb237, ^bb240
    %1283 = llvm.getelementptr %19[%1277] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1275, %1283 {alignment = 1 : i64} : i64, !llvm.ptr
    %1284 = llvm.load %5 : !llvm.ptr -> i32
    %c112_i32_662 = arith.constant 112 : i32
    %1285 = arith.addi %1284, %c112_i32_662 : i32
    %c24_i32_663 = arith.constant 24 : i32
    %1286 = arith.addi %1285, %c24_i32_663 : i32
    %1287 = llvm.load %6 : !llvm.ptr -> i32
    %c24_i32_664 = arith.constant 24 : i32
    %1288 = arith.addi %1287, %c24_i32_664 : i32
    %c0_i64_665 = arith.constant 0 : i64
    %1289 = arith.extui %1288 : i32 to i64
    %1290 = arith.addi %1289, %c0_i64_665 : i64
    %c8_i64_666 = arith.constant 8 : i64
    %1291 = arith.addi %1290, %c8_i64_666 : i64
    %c0_i32_667 = arith.constant 0 : i32
    %1292 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_667) : (!llvm.ptr, i32) -> i32
    %1293 = arith.extui %1292 : i32 to i64
    %c65536_i64_668 = arith.constant 65536 : i64
    %1294 = arith.muli %1293, %c65536_i64_668 : i64
    %1295 = arith.cmpi ult, %1291, %1294 : i64
    cf.cond_br %1295, ^bb241, ^bb242
  ^bb240:  // pred: ^bb237
    %c1_i32_669 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_669) : (i32) -> ()
    cf.br ^bb239
  ^bb241:  // 2 preds: ^bb239, ^bb242
    %1296 = llvm.getelementptr %19[%1290] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1297 = llvm.load volatile %1296 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_670 = arith.constant 0 : i64
    %1298 = arith.extui %1286 : i32 to i64
    %1299 = arith.addi %1298, %c0_i64_670 : i64
    %c8_i64_671 = arith.constant 8 : i64
    %1300 = arith.addi %1299, %c8_i64_671 : i64
    %c0_i32_672 = arith.constant 0 : i32
    %1301 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_672) : (!llvm.ptr, i32) -> i32
    %1302 = arith.extui %1301 : i32 to i64
    %c65536_i64_673 = arith.constant 65536 : i64
    %1303 = arith.muli %1302, %c65536_i64_673 : i64
    %1304 = arith.cmpi ult, %1300, %1303 : i64
    cf.cond_br %1304, ^bb243, ^bb244
  ^bb242:  // pred: ^bb239
    %c1_i32_674 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_674) : (i32) -> ()
    cf.br ^bb241
  ^bb243:  // 2 preds: ^bb241, ^bb244
    %1305 = llvm.getelementptr %19[%1299] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1297, %1305 {alignment = 1 : i64} : i64, !llvm.ptr
    %1306 = llvm.load %5 : !llvm.ptr -> i32
    %c152_i32 = arith.constant 152 : i32
    %1307 = arith.addi %1306, %c152_i32 : i32
    %1308 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i32_675 = arith.constant 8 : i32
    %1309 = arith.addi %1308, %c8_i32_675 : i32
    %c0_i64_676 = arith.constant 0 : i64
    %1310 = arith.extui %1309 : i32 to i64
    %1311 = arith.addi %1310, %c0_i64_676 : i64
    %c8_i64_677 = arith.constant 8 : i64
    %1312 = arith.addi %1311, %c8_i64_677 : i64
    %c0_i32_678 = arith.constant 0 : i32
    %1313 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_678) : (!llvm.ptr, i32) -> i32
    %1314 = arith.extui %1313 : i32 to i64
    %c65536_i64_679 = arith.constant 65536 : i64
    %1315 = arith.muli %1314, %c65536_i64_679 : i64
    %1316 = arith.cmpi ult, %1312, %1315 : i64
    cf.cond_br %1316, ^bb245, ^bb246
  ^bb244:  // pred: ^bb241
    %c1_i32_680 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_680) : (i32) -> ()
    cf.br ^bb243
  ^bb245:  // 2 preds: ^bb243, ^bb246
    %1317 = llvm.getelementptr %19[%1311] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1318 = llvm.load volatile %1317 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_681 = arith.constant 0 : i64
    %1319 = arith.extui %1307 : i32 to i64
    %1320 = arith.addi %1319, %c0_i64_681 : i64
    %c8_i64_682 = arith.constant 8 : i64
    %1321 = arith.addi %1320, %c8_i64_682 : i64
    %c0_i32_683 = arith.constant 0 : i32
    %1322 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_683) : (!llvm.ptr, i32) -> i32
    %1323 = arith.extui %1322 : i32 to i64
    %c65536_i64_684 = arith.constant 65536 : i64
    %1324 = arith.muli %1323, %c65536_i64_684 : i64
    %1325 = arith.cmpi ult, %1321, %1324 : i64
    cf.cond_br %1325, ^bb247, ^bb248
  ^bb246:  // pred: ^bb243
    %c1_i32_685 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_685) : (i32) -> ()
    cf.br ^bb245
  ^bb247:  // 2 preds: ^bb245, ^bb248
    %1326 = llvm.getelementptr %19[%1320] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1318, %1326 {alignment = 1 : i64} : i64, !llvm.ptr
    %1327 = llvm.load %5 : !llvm.ptr -> i32
    %c160_i32 = arith.constant 160 : i32
    %1328 = arith.addi %1327, %c160_i32 : i32
    %1329 = llvm.load %4 : !llvm.ptr -> i32
    %c16_i32_686 = arith.constant 16 : i32
    %1330 = arith.addi %1329, %c16_i32_686 : i32
    %c0_i64_687 = arith.constant 0 : i64
    %1331 = arith.extui %1330 : i32 to i64
    %1332 = arith.addi %1331, %c0_i64_687 : i64
    %c8_i64_688 = arith.constant 8 : i64
    %1333 = arith.addi %1332, %c8_i64_688 : i64
    %c0_i32_689 = arith.constant 0 : i32
    %1334 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_689) : (!llvm.ptr, i32) -> i32
    %1335 = arith.extui %1334 : i32 to i64
    %c65536_i64_690 = arith.constant 65536 : i64
    %1336 = arith.muli %1335, %c65536_i64_690 : i64
    %1337 = arith.cmpi ult, %1333, %1336 : i64
    cf.cond_br %1337, ^bb249, ^bb250
  ^bb248:  // pred: ^bb245
    %c1_i32_691 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_691) : (i32) -> ()
    cf.br ^bb247
  ^bb249:  // 2 preds: ^bb247, ^bb250
    %1338 = llvm.getelementptr %19[%1332] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1339 = llvm.load volatile %1338 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_692 = arith.constant 0 : i64
    %1340 = arith.extui %1328 : i32 to i64
    %1341 = arith.addi %1340, %c0_i64_692 : i64
    %c8_i64_693 = arith.constant 8 : i64
    %1342 = arith.addi %1341, %c8_i64_693 : i64
    %c0_i32_694 = arith.constant 0 : i32
    %1343 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_694) : (!llvm.ptr, i32) -> i32
    %1344 = arith.extui %1343 : i32 to i64
    %c65536_i64_695 = arith.constant 65536 : i64
    %1345 = arith.muli %1344, %c65536_i64_695 : i64
    %1346 = arith.cmpi ult, %1342, %1345 : i64
    cf.cond_br %1346, ^bb251, ^bb252
  ^bb250:  // pred: ^bb247
    %c1_i32_696 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_696) : (i32) -> ()
    cf.br ^bb249
  ^bb251:  // 2 preds: ^bb249, ^bb252
    %1347 = llvm.getelementptr %19[%1341] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1339, %1347 {alignment = 1 : i64} : i64, !llvm.ptr
    %1348 = llvm.load %5 : !llvm.ptr -> i32
    %c168_i32 = arith.constant 168 : i32
    %1349 = arith.addi %1348, %c168_i32 : i32
    %1350 = llvm.load %4 : !llvm.ptr -> i32
    %c24_i32_697 = arith.constant 24 : i32
    %1351 = arith.addi %1350, %c24_i32_697 : i32
    %c0_i64_698 = arith.constant 0 : i64
    %1352 = arith.extui %1351 : i32 to i64
    %1353 = arith.addi %1352, %c0_i64_698 : i64
    %c8_i64_699 = arith.constant 8 : i64
    %1354 = arith.addi %1353, %c8_i64_699 : i64
    %c0_i32_700 = arith.constant 0 : i32
    %1355 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_700) : (!llvm.ptr, i32) -> i32
    %1356 = arith.extui %1355 : i32 to i64
    %c65536_i64_701 = arith.constant 65536 : i64
    %1357 = arith.muli %1356, %c65536_i64_701 : i64
    %1358 = arith.cmpi ult, %1354, %1357 : i64
    cf.cond_br %1358, ^bb253, ^bb254
  ^bb252:  // pred: ^bb249
    %c1_i32_702 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_702) : (i32) -> ()
    cf.br ^bb251
  ^bb253:  // 2 preds: ^bb251, ^bb254
    %1359 = llvm.getelementptr %19[%1353] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1360 = llvm.load volatile %1359 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_703 = arith.constant 0 : i64
    %1361 = arith.extui %1349 : i32 to i64
    %1362 = arith.addi %1361, %c0_i64_703 : i64
    %c8_i64_704 = arith.constant 8 : i64
    %1363 = arith.addi %1362, %c8_i64_704 : i64
    %c0_i32_705 = arith.constant 0 : i32
    %1364 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_705) : (!llvm.ptr, i32) -> i32
    %1365 = arith.extui %1364 : i32 to i64
    %c65536_i64_706 = arith.constant 65536 : i64
    %1366 = arith.muli %1365, %c65536_i64_706 : i64
    %1367 = arith.cmpi ult, %1363, %1366 : i64
    cf.cond_br %1367, ^bb255, ^bb256
  ^bb254:  // pred: ^bb251
    %c1_i32_707 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_707) : (i32) -> ()
    cf.br ^bb253
  ^bb255:  // 2 preds: ^bb253, ^bb256
    %1368 = llvm.getelementptr %19[%1362] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1360, %1368 {alignment = 1 : i64} : i64, !llvm.ptr
    %1369 = llvm.load %5 : !llvm.ptr -> i32
    %1370 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_708 = arith.constant 0 : i64
    %1371 = arith.extui %1370 : i32 to i64
    %1372 = arith.addi %1371, %c0_i64_708 : i64
    %c8_i64_709 = arith.constant 8 : i64
    %1373 = arith.addi %1372, %c8_i64_709 : i64
    %c0_i32_710 = arith.constant 0 : i32
    %1374 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_710) : (!llvm.ptr, i32) -> i32
    %1375 = arith.extui %1374 : i32 to i64
    %c65536_i64_711 = arith.constant 65536 : i64
    %1376 = arith.muli %1375, %c65536_i64_711 : i64
    %1377 = arith.cmpi ult, %1373, %1376 : i64
    cf.cond_br %1377, ^bb257, ^bb258
  ^bb256:  // pred: ^bb253
    %c1_i32_712 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_712) : (i32) -> ()
    cf.br ^bb255
  ^bb257:  // 2 preds: ^bb255, ^bb258
    %1378 = llvm.getelementptr %19[%1372] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1379 = llvm.load volatile %1378 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c176_i64 = arith.constant 176 : i64
    %1380 = arith.extui %1369 : i32 to i64
    %1381 = arith.addi %1380, %c176_i64 : i64
    %c8_i64_713 = arith.constant 8 : i64
    %1382 = arith.addi %1381, %c8_i64_713 : i64
    %c0_i32_714 = arith.constant 0 : i32
    %1383 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_714) : (!llvm.ptr, i32) -> i32
    %1384 = arith.extui %1383 : i32 to i64
    %c65536_i64_715 = arith.constant 65536 : i64
    %1385 = arith.muli %1384, %c65536_i64_715 : i64
    %1386 = arith.cmpi ult, %1382, %1385 : i64
    cf.cond_br %1386, ^bb259, ^bb260
  ^bb258:  // pred: ^bb255
    %c1_i32_716 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_716) : (i32) -> ()
    cf.br ^bb257
  ^bb259:  // 2 preds: ^bb257, ^bb260
    %1387 = llvm.getelementptr %19[%1381] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1379, %1387 {alignment = 1 : i64} : i64, !llvm.ptr
    %1388 = llvm.load %5 : !llvm.ptr -> i32
    %1389 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_717 = arith.constant 0 : i64
    %1390 = arith.extui %1389 : i32 to i64
    %1391 = arith.addi %1390, %c0_i64_717 : i64
    %c8_i64_718 = arith.constant 8 : i64
    %1392 = arith.addi %1391, %c8_i64_718 : i64
    %c0_i32_719 = arith.constant 0 : i32
    %1393 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_719) : (!llvm.ptr, i32) -> i32
    %1394 = arith.extui %1393 : i32 to i64
    %c65536_i64_720 = arith.constant 65536 : i64
    %1395 = arith.muli %1394, %c65536_i64_720 : i64
    %1396 = arith.cmpi ult, %1392, %1395 : i64
    cf.cond_br %1396, ^bb261, ^bb262
  ^bb260:  // pred: ^bb257
    %c1_i32_721 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_721) : (i32) -> ()
    cf.br ^bb259
  ^bb261:  // 2 preds: ^bb259, ^bb262
    %1397 = llvm.getelementptr %19[%1391] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1398 = llvm.load volatile %1397 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c112_i64 = arith.constant 112 : i64
    %1399 = arith.extui %1388 : i32 to i64
    %1400 = arith.addi %1399, %c112_i64 : i64
    %c8_i64_722 = arith.constant 8 : i64
    %1401 = arith.addi %1400, %c8_i64_722 : i64
    %c0_i32_723 = arith.constant 0 : i32
    %1402 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_723) : (!llvm.ptr, i32) -> i32
    %1403 = arith.extui %1402 : i32 to i64
    %c65536_i64_724 = arith.constant 65536 : i64
    %1404 = arith.muli %1403, %c65536_i64_724 : i64
    %1405 = arith.cmpi ult, %1401, %1404 : i64
    cf.cond_br %1405, ^bb263, ^bb264
  ^bb262:  // pred: ^bb259
    %c1_i32_725 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_725) : (i32) -> ()
    cf.br ^bb261
  ^bb263:  // 2 preds: ^bb261, ^bb264
    %1406 = llvm.getelementptr %19[%1400] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1398, %1406 {alignment = 1 : i64} : i64, !llvm.ptr
    %1407 = llvm.load %5 : !llvm.ptr -> i32
    %1408 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_726 = arith.constant 0 : i64
    %1409 = arith.extui %1408 : i32 to i64
    %1410 = arith.addi %1409, %c0_i64_726 : i64
    %c8_i64_727 = arith.constant 8 : i64
    %1411 = arith.addi %1410, %c8_i64_727 : i64
    %c0_i32_728 = arith.constant 0 : i32
    %1412 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_728) : (!llvm.ptr, i32) -> i32
    %1413 = arith.extui %1412 : i32 to i64
    %c65536_i64_729 = arith.constant 65536 : i64
    %1414 = arith.muli %1413, %c65536_i64_729 : i64
    %1415 = arith.cmpi ult, %1411, %1414 : i64
    cf.cond_br %1415, ^bb265, ^bb266
  ^bb264:  // pred: ^bb261
    %c1_i32_730 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_730) : (i32) -> ()
    cf.br ^bb263
  ^bb265:  // 2 preds: ^bb263, ^bb266
    %1416 = llvm.getelementptr %19[%1410] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1417 = llvm.load volatile %1416 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c144_i64 = arith.constant 144 : i64
    %1418 = arith.extui %1407 : i32 to i64
    %1419 = arith.addi %1418, %c144_i64 : i64
    %c8_i64_731 = arith.constant 8 : i64
    %1420 = arith.addi %1419, %c8_i64_731 : i64
    %c0_i32_732 = arith.constant 0 : i32
    %1421 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_732) : (!llvm.ptr, i32) -> i32
    %1422 = arith.extui %1421 : i32 to i64
    %c65536_i64_733 = arith.constant 65536 : i64
    %1423 = arith.muli %1422, %c65536_i64_733 : i64
    %1424 = arith.cmpi ult, %1420, %1423 : i64
    cf.cond_br %1424, ^bb267, ^bb268
  ^bb266:  // pred: ^bb263
    %c1_i32_734 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_734) : (i32) -> ()
    cf.br ^bb265
  ^bb267:  // 2 preds: ^bb265, ^bb268
    %1425 = llvm.getelementptr %19[%1419] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1417, %1425 {alignment = 1 : i64} : i64, !llvm.ptr
    %1426 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_735 = arith.constant 0 : i64
    %c0_i64_736 = arith.constant 0 : i64
    %1427 = arith.extui %1426 : i32 to i64
    %1428 = arith.addi %1427, %c0_i64_736 : i64
    %c8_i64_737 = arith.constant 8 : i64
    %1429 = arith.addi %1428, %c8_i64_737 : i64
    %c0_i32_738 = arith.constant 0 : i32
    %1430 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_738) : (!llvm.ptr, i32) -> i32
    %1431 = arith.extui %1430 : i32 to i64
    %c65536_i64_739 = arith.constant 65536 : i64
    %1432 = arith.muli %1431, %c65536_i64_739 : i64
    %1433 = arith.cmpi ult, %1429, %1432 : i64
    cf.cond_br %1433, ^bb269, ^bb270
  ^bb268:  // pred: ^bb265
    %c1_i32_740 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_740) : (i32) -> ()
    cf.br ^bb267
  ^bb269:  // 2 preds: ^bb267, ^bb270
    %1434 = llvm.getelementptr %19[%1428] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_735, %1434 {alignment = 1 : i64} : i64, !llvm.ptr
    %1435 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_741 = arith.constant 8 : i32
    %1436 = arith.addi %1435, %c8_i32_741 : i32
    %1437 = llvm.load %5 : !llvm.ptr -> i32
    %c112_i32_742 = arith.constant 112 : i32
    %1438 = arith.addi %1437, %c112_i32_742 : i32
    %c88_i32 = arith.constant 88 : i32
    %1439 = call @f161(%arg0, %1436, %1438, %c88_i32) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb36
  ^bb270:  // pred: ^bb267
    %c1_i32_743 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_743) : (i32) -> ()
    cf.br ^bb269
  }
  func.func @f50(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %7 : i64, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %8 : i64, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %9 : i64, !llvm.ptr
    %10 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.getelementptr %12[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %15 = llvm.load %11 : !llvm.ptr -> i32
    %c128_i32 = arith.constant 128 : i32
    %16 = arith.subi %15, %c128_i32 : i32
    llvm.store %16, %3 : i32, !llvm.ptr
    %c24_i32 = arith.constant 24 : i32
    %17 = arith.addi %16, %c24_i32 : i32
    %c0_i64_9 = arith.constant 0 : i64
    %c0_i64_10 = arith.constant 0 : i64
    %18 = arith.extui %17 : i32 to i64
    %19 = arith.addi %18, %c0_i64_10 : i64
    %c8_i64 = arith.constant 8 : i64
    %20 = arith.addi %19, %c8_i64 : i64
    %c0_i32_11 = arith.constant 0 : i32
    %21 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_11) : (!llvm.ptr, i32) -> i32
    %22 = arith.extui %21 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %23 = arith.muli %22, %c65536_i64 : i64
    %24 = arith.cmpi ult, %20, %23 : i64
    cf.cond_br %24, ^bb3, ^bb4
  ^bb2:  // pred: ^bb169
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %25 = llvm.getelementptr %14[%19] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_9, %25 {alignment = 1 : i64} : i64, !llvm.ptr
    %26 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %27 = arith.addi %26, %c16_i32 : i32
    %c0_i64_12 = arith.constant 0 : i64
    %c0_i64_13 = arith.constant 0 : i64
    %28 = arith.extui %27 : i32 to i64
    %29 = arith.addi %28, %c0_i64_13 : i64
    %c8_i64_14 = arith.constant 8 : i64
    %30 = arith.addi %29, %c8_i64_14 : i64
    %c0_i32_15 = arith.constant 0 : i32
    %31 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_15) : (!llvm.ptr, i32) -> i32
    %32 = arith.extui %31 : i32 to i64
    %c65536_i64_16 = arith.constant 65536 : i64
    %33 = arith.muli %32, %c65536_i64_16 : i64
    %34 = arith.cmpi ult, %30, %33 : i64
    cf.cond_br %34, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c1_i32_17 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_17) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %35 = llvm.getelementptr %14[%29] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_12, %35 {alignment = 1 : i64} : i64, !llvm.ptr
    %36 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %37 = arith.addi %36, %c8_i32 : i32
    %c0_i64_18 = arith.constant 0 : i64
    %c0_i64_19 = arith.constant 0 : i64
    %38 = arith.extui %37 : i32 to i64
    %39 = arith.addi %38, %c0_i64_19 : i64
    %c8_i64_20 = arith.constant 8 : i64
    %40 = arith.addi %39, %c8_i64_20 : i64
    %c0_i32_21 = arith.constant 0 : i32
    %41 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_21) : (!llvm.ptr, i32) -> i32
    %42 = arith.extui %41 : i32 to i64
    %c65536_i64_22 = arith.constant 65536 : i64
    %43 = arith.muli %42, %c65536_i64_22 : i64
    %44 = arith.cmpi ult, %40, %43 : i64
    cf.cond_br %44, ^bb7, ^bb8
  ^bb6:  // pred: ^bb3
    %c1_i32_23 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_23) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %45 = llvm.getelementptr %14[%39] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_18, %45 {alignment = 1 : i64} : i64, !llvm.ptr
    %46 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %47 = arith.addi %46, %c32_i32 : i32
    %c8_i32_24 = arith.constant 8 : i32
    %48 = arith.addi %47, %c8_i32_24 : i32
    %49 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_25 = arith.constant 8 : i32
    %50 = arith.addi %49, %c8_i32_25 : i32
    %c0_i64_26 = arith.constant 0 : i64
    %51 = arith.extui %50 : i32 to i64
    %52 = arith.addi %51, %c0_i64_26 : i64
    %c8_i64_27 = arith.constant 8 : i64
    %53 = arith.addi %52, %c8_i64_27 : i64
    %c0_i32_28 = arith.constant 0 : i32
    %54 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_28) : (!llvm.ptr, i32) -> i32
    %55 = arith.extui %54 : i32 to i64
    %c65536_i64_29 = arith.constant 65536 : i64
    %56 = arith.muli %55, %c65536_i64_29 : i64
    %57 = arith.cmpi ult, %53, %56 : i64
    cf.cond_br %57, ^bb9, ^bb10
  ^bb8:  // pred: ^bb5
    %c1_i32_30 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_30) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %58 = llvm.getelementptr %14[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %59 = llvm.load volatile %58 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_31 = arith.constant 0 : i64
    %60 = arith.extui %48 : i32 to i64
    %61 = arith.addi %60, %c0_i64_31 : i64
    %c8_i64_32 = arith.constant 8 : i64
    %62 = arith.addi %61, %c8_i64_32 : i64
    %c0_i32_33 = arith.constant 0 : i32
    %63 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_33) : (!llvm.ptr, i32) -> i32
    %64 = arith.extui %63 : i32 to i64
    %c65536_i64_34 = arith.constant 65536 : i64
    %65 = arith.muli %64, %c65536_i64_34 : i64
    %66 = arith.cmpi ult, %62, %65 : i64
    cf.cond_br %66, ^bb11, ^bb12
  ^bb10:  // pred: ^bb7
    %c1_i32_35 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_35) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %67 = llvm.getelementptr %14[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %59, %67 {alignment = 1 : i64} : i64, !llvm.ptr
    %68 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_36 = arith.constant 32 : i32
    %69 = arith.addi %68, %c32_i32_36 : i32
    %c16_i32_37 = arith.constant 16 : i32
    %70 = arith.addi %69, %c16_i32_37 : i32
    %71 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32_38 = arith.constant 16 : i32
    %72 = arith.addi %71, %c16_i32_38 : i32
    %c0_i64_39 = arith.constant 0 : i64
    %73 = arith.extui %72 : i32 to i64
    %74 = arith.addi %73, %c0_i64_39 : i64
    %c8_i64_40 = arith.constant 8 : i64
    %75 = arith.addi %74, %c8_i64_40 : i64
    %c0_i32_41 = arith.constant 0 : i32
    %76 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_41) : (!llvm.ptr, i32) -> i32
    %77 = arith.extui %76 : i32 to i64
    %c65536_i64_42 = arith.constant 65536 : i64
    %78 = arith.muli %77, %c65536_i64_42 : i64
    %79 = arith.cmpi ult, %75, %78 : i64
    cf.cond_br %79, ^bb13, ^bb14
  ^bb12:  // pred: ^bb9
    %c1_i32_43 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_43) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %80 = llvm.getelementptr %14[%74] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %81 = llvm.load volatile %80 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_44 = arith.constant 0 : i64
    %82 = arith.extui %70 : i32 to i64
    %83 = arith.addi %82, %c0_i64_44 : i64
    %c8_i64_45 = arith.constant 8 : i64
    %84 = arith.addi %83, %c8_i64_45 : i64
    %c0_i32_46 = arith.constant 0 : i32
    %85 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_46) : (!llvm.ptr, i32) -> i32
    %86 = arith.extui %85 : i32 to i64
    %c65536_i64_47 = arith.constant 65536 : i64
    %87 = arith.muli %86, %c65536_i64_47 : i64
    %88 = arith.cmpi ult, %84, %87 : i64
    cf.cond_br %88, ^bb15, ^bb16
  ^bb14:  // pred: ^bb11
    %c1_i32_48 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_48) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // 2 preds: ^bb13, ^bb16
    %89 = llvm.getelementptr %14[%83] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %81, %89 {alignment = 1 : i64} : i64, !llvm.ptr
    %90 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_49 = arith.constant 32 : i32
    %91 = arith.addi %90, %c32_i32_49 : i32
    %c24_i32_50 = arith.constant 24 : i32
    %92 = arith.addi %91, %c24_i32_50 : i32
    %93 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i32_51 = arith.constant 24 : i32
    %94 = arith.addi %93, %c24_i32_51 : i32
    %c0_i64_52 = arith.constant 0 : i64
    %95 = arith.extui %94 : i32 to i64
    %96 = arith.addi %95, %c0_i64_52 : i64
    %c8_i64_53 = arith.constant 8 : i64
    %97 = arith.addi %96, %c8_i64_53 : i64
    %c0_i32_54 = arith.constant 0 : i32
    %98 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_54) : (!llvm.ptr, i32) -> i32
    %99 = arith.extui %98 : i32 to i64
    %c65536_i64_55 = arith.constant 65536 : i64
    %100 = arith.muli %99, %c65536_i64_55 : i64
    %101 = arith.cmpi ult, %97, %100 : i64
    cf.cond_br %101, ^bb17, ^bb18
  ^bb16:  // pred: ^bb13
    %c1_i32_56 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_56) : (i32) -> ()
    cf.br ^bb15
  ^bb17:  // 2 preds: ^bb15, ^bb18
    %102 = llvm.getelementptr %14[%96] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %103 = llvm.load volatile %102 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_57 = arith.constant 0 : i64
    %104 = arith.extui %92 : i32 to i64
    %105 = arith.addi %104, %c0_i64_57 : i64
    %c8_i64_58 = arith.constant 8 : i64
    %106 = arith.addi %105, %c8_i64_58 : i64
    %c0_i32_59 = arith.constant 0 : i32
    %107 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_59) : (!llvm.ptr, i32) -> i32
    %108 = arith.extui %107 : i32 to i64
    %c65536_i64_60 = arith.constant 65536 : i64
    %109 = arith.muli %108, %c65536_i64_60 : i64
    %110 = arith.cmpi ult, %106, %109 : i64
    cf.cond_br %110, ^bb19, ^bb20
  ^bb18:  // pred: ^bb15
    %c1_i32_61 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_61) : (i32) -> ()
    cf.br ^bb17
  ^bb19:  // 2 preds: ^bb17, ^bb20
    %111 = llvm.getelementptr %14[%105] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %103, %111 {alignment = 1 : i64} : i64, !llvm.ptr
    %112 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_62 = arith.constant 0 : i64
    %c0_i64_63 = arith.constant 0 : i64
    %113 = arith.extui %112 : i32 to i64
    %114 = arith.addi %113, %c0_i64_63 : i64
    %c8_i64_64 = arith.constant 8 : i64
    %115 = arith.addi %114, %c8_i64_64 : i64
    %c0_i32_65 = arith.constant 0 : i32
    %116 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_65) : (!llvm.ptr, i32) -> i32
    %117 = arith.extui %116 : i32 to i64
    %c65536_i64_66 = arith.constant 65536 : i64
    %118 = arith.muli %117, %c65536_i64_66 : i64
    %119 = arith.cmpi ult, %115, %118 : i64
    cf.cond_br %119, ^bb21, ^bb22
  ^bb20:  // pred: ^bb17
    %c1_i32_67 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_67) : (i32) -> ()
    cf.br ^bb19
  ^bb21:  // 2 preds: ^bb19, ^bb22
    %120 = llvm.getelementptr %14[%114] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_62, %120 {alignment = 1 : i64} : i64, !llvm.ptr
    %121 = llvm.load %3 : !llvm.ptr -> i32
    %122 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_68 = arith.constant 0 : i64
    %123 = arith.extui %122 : i32 to i64
    %124 = arith.addi %123, %c0_i64_68 : i64
    %c8_i64_69 = arith.constant 8 : i64
    %125 = arith.addi %124, %c8_i64_69 : i64
    %c0_i32_70 = arith.constant 0 : i32
    %126 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_70) : (!llvm.ptr, i32) -> i32
    %127 = arith.extui %126 : i32 to i64
    %c65536_i64_71 = arith.constant 65536 : i64
    %128 = arith.muli %127, %c65536_i64_71 : i64
    %129 = arith.cmpi ult, %125, %128 : i64
    cf.cond_br %129, ^bb23, ^bb24
  ^bb22:  // pred: ^bb19
    %c1_i32_72 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_72) : (i32) -> ()
    cf.br ^bb21
  ^bb23:  // 2 preds: ^bb21, ^bb24
    %130 = llvm.getelementptr %14[%124] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %131 = llvm.load volatile %130 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c32_i64 = arith.constant 32 : i64
    %132 = arith.extui %121 : i32 to i64
    %133 = arith.addi %132, %c32_i64 : i64
    %c8_i64_73 = arith.constant 8 : i64
    %134 = arith.addi %133, %c8_i64_73 : i64
    %c0_i32_74 = arith.constant 0 : i32
    %135 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_74) : (!llvm.ptr, i32) -> i32
    %136 = arith.extui %135 : i32 to i64
    %c65536_i64_75 = arith.constant 65536 : i64
    %137 = arith.muli %136, %c65536_i64_75 : i64
    %138 = arith.cmpi ult, %134, %137 : i64
    cf.cond_br %138, ^bb25, ^bb26
  ^bb24:  // pred: ^bb21
    %c1_i32_76 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_76) : (i32) -> ()
    cf.br ^bb23
  ^bb25:  // 2 preds: ^bb23, ^bb26
    %139 = llvm.getelementptr %14[%133] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %131, %139 {alignment = 1 : i64} : i64, !llvm.ptr
    %c0_i32_77 = arith.constant 0 : i32
    llvm.store %c0_i32_77, %4 : i32, !llvm.ptr
    %c0_i32_78 = arith.constant 0 : i32
    llvm.store %c0_i32_78, %5 : i32, !llvm.ptr
    cf.br ^bb28
  ^bb26:  // pred: ^bb23
    %c1_i32_79 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_79) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // pred: ^bb35
    %140 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32_80 = arith.constant 24 : i32
    %141 = arith.addi %140, %c24_i32_80 : i32
    %c0_i64_81 = arith.constant 0 : i64
    %c0_i64_82 = arith.constant 0 : i64
    %142 = arith.extui %141 : i32 to i64
    %143 = arith.addi %142, %c0_i64_82 : i64
    %c8_i64_83 = arith.constant 8 : i64
    %144 = arith.addi %143, %c8_i64_83 : i64
    %c0_i32_84 = arith.constant 0 : i32
    %145 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_84) : (!llvm.ptr, i32) -> i32
    %146 = arith.extui %145 : i32 to i64
    %c65536_i64_85 = arith.constant 65536 : i64
    %147 = arith.muli %146, %c65536_i64_85 : i64
    %148 = arith.cmpi ult, %144, %147 : i64
    cf.cond_br %148, ^bb36, ^bb37
  ^bb28:  // 2 preds: ^bb25, ^bb33
    %149 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_86 = arith.constant 32 : i32
    %150 = arith.addi %149, %c32_i32_86 : i32
    %151 = llvm.load %4 : !llvm.ptr -> i32
    %152 = arith.addi %150, %151 : i32
    llvm.store %152, %6 : i32, !llvm.ptr
    %153 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_87 = arith.constant 0 : i64
    %154 = arith.extui %153 : i32 to i64
    %155 = arith.addi %154, %c0_i64_87 : i64
    %c8_i64_88 = arith.constant 8 : i64
    %156 = arith.addi %155, %c8_i64_88 : i64
    %c0_i32_89 = arith.constant 0 : i32
    %157 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_89) : (!llvm.ptr, i32) -> i32
    %158 = arith.extui %157 : i32 to i64
    %c65536_i64_90 = arith.constant 65536 : i64
    %159 = arith.muli %158, %c65536_i64_90 : i64
    %160 = arith.cmpi ult, %156, %159 : i64
    cf.cond_br %160, ^bb29, ^bb30
  ^bb29:  // 2 preds: ^bb28, ^bb30
    %161 = llvm.getelementptr %14[%155] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %162 = llvm.load volatile %161 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %162, %7 : i64, !llvm.ptr
    %163 = llvm.load %3 : !llvm.ptr -> i32
    %164 = llvm.load %4 : !llvm.ptr -> i32
    %165 = arith.addi %163, %164 : i32
    %c0_i64_91 = arith.constant 0 : i64
    %166 = arith.extui %165 : i32 to i64
    %167 = arith.addi %166, %c0_i64_91 : i64
    %c8_i64_92 = arith.constant 8 : i64
    %168 = arith.addi %167, %c8_i64_92 : i64
    %c0_i32_93 = arith.constant 0 : i32
    %169 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_93) : (!llvm.ptr, i32) -> i32
    %170 = arith.extui %169 : i32 to i64
    %c65536_i64_94 = arith.constant 65536 : i64
    %171 = arith.muli %170, %c65536_i64_94 : i64
    %172 = arith.cmpi ult, %168, %171 : i64
    cf.cond_br %172, ^bb31, ^bb32
  ^bb30:  // pred: ^bb28
    %c1_i32_95 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_95) : (i32) -> ()
    cf.br ^bb29
  ^bb31:  // 2 preds: ^bb29, ^bb32
    %173 = llvm.getelementptr %14[%167] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %174 = llvm.load volatile %173 {alignment = 1 : i64} : !llvm.ptr -> i64
    %175 = arith.addi %162, %174 : i64
    llvm.store %175, %8 : i64, !llvm.ptr
    %176 = llvm.load %5 : !llvm.ptr -> i32
    %177 = arith.extui %176 : i32 to i64
    %c1_i64 = arith.constant 1 : i64
    %178 = arith.andi %177, %c1_i64 : i64
    %179 = arith.addi %175, %178 : i64
    llvm.store %179, %9 : i64, !llvm.ptr
    %c0_i64_96 = arith.constant 0 : i64
    %180 = arith.extui %152 : i32 to i64
    %181 = arith.addi %180, %c0_i64_96 : i64
    %c8_i64_97 = arith.constant 8 : i64
    %182 = arith.addi %181, %c8_i64_97 : i64
    %c0_i32_98 = arith.constant 0 : i32
    %183 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_98) : (!llvm.ptr, i32) -> i32
    %184 = arith.extui %183 : i32 to i64
    %c65536_i64_99 = arith.constant 65536 : i64
    %185 = arith.muli %184, %c65536_i64_99 : i64
    %186 = arith.cmpi ult, %182, %185 : i64
    cf.cond_br %186, ^bb33, ^bb34
  ^bb32:  // pred: ^bb29
    %c1_i32_100 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_100) : (i32) -> ()
    cf.br ^bb31
  ^bb33:  // 2 preds: ^bb31, ^bb34
    %187 = llvm.getelementptr %14[%181] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %179, %187 {alignment = 1 : i64} : i64, !llvm.ptr
    %188 = llvm.load %8 : !llvm.ptr -> i64
    %189 = llvm.load %7 : !llvm.ptr -> i64
    %190 = arith.cmpi ult, %188, %189 : i64
    %191 = arith.extui %190 : i1 to i64
    %192 = arith.trunci %191 : i64 to i32
    %193 = llvm.load %9 : !llvm.ptr -> i64
    %194 = llvm.load %8 : !llvm.ptr -> i64
    %195 = arith.cmpi ult, %193, %194 : i64
    %196 = arith.extui %195 : i1 to i64
    %197 = arith.trunci %196 : i64 to i32
    %198 = arith.ori %192, %197 : i32
    llvm.store %198, %5 : i32, !llvm.ptr
    %199 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i32_101 = arith.constant 8 : i32
    %200 = arith.addi %199, %c8_i32_101 : i32
    llvm.store %200, %4 : i32, !llvm.ptr
    %c32_i32_102 = arith.constant 32 : i32
    %201 = arith.cmpi eq, %200, %c32_i32_102 : i32
    %202 = arith.extui %201 : i1 to i32
    %c0_i32_103 = arith.constant 0 : i32
    %203 = arith.cmpi eq, %202, %c0_i32_103 : i32
    %204 = arith.extui %203 : i1 to i32
    %c0_i32_104 = arith.constant 0 : i32
    %205 = arith.cmpi ne, %204, %c0_i32_104 : i32
    cf.cond_br %205, ^bb28, ^bb35
  ^bb34:  // pred: ^bb31
    %c1_i32_105 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_105) : (i32) -> ()
    cf.br ^bb33
  ^bb35:  // pred: ^bb33
    cf.br ^bb27
  ^bb36:  // 2 preds: ^bb27, ^bb37
    %206 = llvm.getelementptr %14[%143] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_81, %206 {alignment = 1 : i64} : i64, !llvm.ptr
    %207 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_106 = arith.constant 16 : i32
    %208 = arith.addi %207, %c16_i32_106 : i32
    %c0_i64_107 = arith.constant 0 : i64
    %c0_i64_108 = arith.constant 0 : i64
    %209 = arith.extui %208 : i32 to i64
    %210 = arith.addi %209, %c0_i64_108 : i64
    %c8_i64_109 = arith.constant 8 : i64
    %211 = arith.addi %210, %c8_i64_109 : i64
    %c0_i32_110 = arith.constant 0 : i32
    %212 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_110) : (!llvm.ptr, i32) -> i32
    %213 = arith.extui %212 : i32 to i64
    %c65536_i64_111 = arith.constant 65536 : i64
    %214 = arith.muli %213, %c65536_i64_111 : i64
    %215 = arith.cmpi ult, %211, %214 : i64
    cf.cond_br %215, ^bb38, ^bb39
  ^bb37:  // pred: ^bb27
    %c1_i32_112 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_112) : (i32) -> ()
    cf.br ^bb36
  ^bb38:  // 2 preds: ^bb36, ^bb39
    %216 = llvm.getelementptr %14[%210] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_107, %216 {alignment = 1 : i64} : i64, !llvm.ptr
    %217 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %218 = arith.addi %217, %c64_i32 : i32
    %c8_i32_113 = arith.constant 8 : i32
    %219 = arith.addi %218, %c8_i32_113 : i32
    %220 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_114 = arith.constant 8 : i32
    %221 = arith.addi %220, %c8_i32_114 : i32
    %c0_i64_115 = arith.constant 0 : i64
    %222 = arith.extui %221 : i32 to i64
    %223 = arith.addi %222, %c0_i64_115 : i64
    %c8_i64_116 = arith.constant 8 : i64
    %224 = arith.addi %223, %c8_i64_116 : i64
    %c0_i32_117 = arith.constant 0 : i32
    %225 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_117) : (!llvm.ptr, i32) -> i32
    %226 = arith.extui %225 : i32 to i64
    %c65536_i64_118 = arith.constant 65536 : i64
    %227 = arith.muli %226, %c65536_i64_118 : i64
    %228 = arith.cmpi ult, %224, %227 : i64
    cf.cond_br %228, ^bb40, ^bb41
  ^bb39:  // pred: ^bb36
    %c1_i32_119 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_119) : (i32) -> ()
    cf.br ^bb38
  ^bb40:  // 2 preds: ^bb38, ^bb41
    %229 = llvm.getelementptr %14[%223] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %230 = llvm.load volatile %229 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_120 = arith.constant 0 : i64
    %231 = arith.extui %219 : i32 to i64
    %232 = arith.addi %231, %c0_i64_120 : i64
    %c8_i64_121 = arith.constant 8 : i64
    %233 = arith.addi %232, %c8_i64_121 : i64
    %c0_i32_122 = arith.constant 0 : i32
    %234 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_122) : (!llvm.ptr, i32) -> i32
    %235 = arith.extui %234 : i32 to i64
    %c65536_i64_123 = arith.constant 65536 : i64
    %236 = arith.muli %235, %c65536_i64_123 : i64
    %237 = arith.cmpi ult, %233, %236 : i64
    cf.cond_br %237, ^bb42, ^bb43
  ^bb41:  // pred: ^bb38
    %c1_i32_124 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_124) : (i32) -> ()
    cf.br ^bb40
  ^bb42:  // 2 preds: ^bb40, ^bb43
    %238 = llvm.getelementptr %14[%232] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %230, %238 {alignment = 1 : i64} : i64, !llvm.ptr
    %239 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32_125 = arith.constant 64 : i32
    %240 = arith.addi %239, %c64_i32_125 : i32
    %c16_i32_126 = arith.constant 16 : i32
    %241 = arith.addi %240, %c16_i32_126 : i32
    %242 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32_127 = arith.constant 16 : i32
    %243 = arith.addi %242, %c16_i32_127 : i32
    %c0_i64_128 = arith.constant 0 : i64
    %244 = arith.extui %243 : i32 to i64
    %245 = arith.addi %244, %c0_i64_128 : i64
    %c8_i64_129 = arith.constant 8 : i64
    %246 = arith.addi %245, %c8_i64_129 : i64
    %c0_i32_130 = arith.constant 0 : i32
    %247 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_130) : (!llvm.ptr, i32) -> i32
    %248 = arith.extui %247 : i32 to i64
    %c65536_i64_131 = arith.constant 65536 : i64
    %249 = arith.muli %248, %c65536_i64_131 : i64
    %250 = arith.cmpi ult, %246, %249 : i64
    cf.cond_br %250, ^bb44, ^bb45
  ^bb43:  // pred: ^bb40
    %c1_i32_132 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_132) : (i32) -> ()
    cf.br ^bb42
  ^bb44:  // 2 preds: ^bb42, ^bb45
    %251 = llvm.getelementptr %14[%245] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %252 = llvm.load volatile %251 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_133 = arith.constant 0 : i64
    %253 = arith.extui %241 : i32 to i64
    %254 = arith.addi %253, %c0_i64_133 : i64
    %c8_i64_134 = arith.constant 8 : i64
    %255 = arith.addi %254, %c8_i64_134 : i64
    %c0_i32_135 = arith.constant 0 : i32
    %256 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_135) : (!llvm.ptr, i32) -> i32
    %257 = arith.extui %256 : i32 to i64
    %c65536_i64_136 = arith.constant 65536 : i64
    %258 = arith.muli %257, %c65536_i64_136 : i64
    %259 = arith.cmpi ult, %255, %258 : i64
    cf.cond_br %259, ^bb46, ^bb47
  ^bb45:  // pred: ^bb42
    %c1_i32_137 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_137) : (i32) -> ()
    cf.br ^bb44
  ^bb46:  // 2 preds: ^bb44, ^bb47
    %260 = llvm.getelementptr %14[%254] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %252, %260 {alignment = 1 : i64} : i64, !llvm.ptr
    %261 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32_138 = arith.constant 64 : i32
    %262 = arith.addi %261, %c64_i32_138 : i32
    %c24_i32_139 = arith.constant 24 : i32
    %263 = arith.addi %262, %c24_i32_139 : i32
    %264 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i32_140 = arith.constant 24 : i32
    %265 = arith.addi %264, %c24_i32_140 : i32
    %c0_i64_141 = arith.constant 0 : i64
    %266 = arith.extui %265 : i32 to i64
    %267 = arith.addi %266, %c0_i64_141 : i64
    %c8_i64_142 = arith.constant 8 : i64
    %268 = arith.addi %267, %c8_i64_142 : i64
    %c0_i32_143 = arith.constant 0 : i32
    %269 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_143) : (!llvm.ptr, i32) -> i32
    %270 = arith.extui %269 : i32 to i64
    %c65536_i64_144 = arith.constant 65536 : i64
    %271 = arith.muli %270, %c65536_i64_144 : i64
    %272 = arith.cmpi ult, %268, %271 : i64
    cf.cond_br %272, ^bb48, ^bb49
  ^bb47:  // pred: ^bb44
    %c1_i32_145 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_145) : (i32) -> ()
    cf.br ^bb46
  ^bb48:  // 2 preds: ^bb46, ^bb49
    %273 = llvm.getelementptr %14[%267] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %274 = llvm.load volatile %273 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_146 = arith.constant 0 : i64
    %275 = arith.extui %263 : i32 to i64
    %276 = arith.addi %275, %c0_i64_146 : i64
    %c8_i64_147 = arith.constant 8 : i64
    %277 = arith.addi %276, %c8_i64_147 : i64
    %c0_i32_148 = arith.constant 0 : i32
    %278 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_148) : (!llvm.ptr, i32) -> i32
    %279 = arith.extui %278 : i32 to i64
    %c65536_i64_149 = arith.constant 65536 : i64
    %280 = arith.muli %279, %c65536_i64_149 : i64
    %281 = arith.cmpi ult, %277, %280 : i64
    cf.cond_br %281, ^bb50, ^bb51
  ^bb49:  // pred: ^bb46
    %c1_i32_150 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_150) : (i32) -> ()
    cf.br ^bb48
  ^bb50:  // 2 preds: ^bb48, ^bb51
    %282 = llvm.getelementptr %14[%276] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %274, %282 {alignment = 1 : i64} : i64, !llvm.ptr
    %283 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_151 = arith.constant 0 : i64
    %c8_i64_152 = arith.constant 8 : i64
    %284 = arith.extui %283 : i32 to i64
    %285 = arith.addi %284, %c8_i64_152 : i64
    %c8_i64_153 = arith.constant 8 : i64
    %286 = arith.addi %285, %c8_i64_153 : i64
    %c0_i32_154 = arith.constant 0 : i32
    %287 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_154) : (!llvm.ptr, i32) -> i32
    %288 = arith.extui %287 : i32 to i64
    %c65536_i64_155 = arith.constant 65536 : i64
    %289 = arith.muli %288, %c65536_i64_155 : i64
    %290 = arith.cmpi ult, %286, %289 : i64
    cf.cond_br %290, ^bb52, ^bb53
  ^bb51:  // pred: ^bb48
    %c1_i32_156 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_156) : (i32) -> ()
    cf.br ^bb50
  ^bb52:  // 2 preds: ^bb50, ^bb53
    %291 = llvm.getelementptr %14[%285] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_151, %291 {alignment = 1 : i64} : i64, !llvm.ptr
    %292 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_157 = arith.constant 1 : i64
    %c0_i64_158 = arith.constant 0 : i64
    %293 = arith.extui %292 : i32 to i64
    %294 = arith.addi %293, %c0_i64_158 : i64
    %c8_i64_159 = arith.constant 8 : i64
    %295 = arith.addi %294, %c8_i64_159 : i64
    %c0_i32_160 = arith.constant 0 : i32
    %296 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_160) : (!llvm.ptr, i32) -> i32
    %297 = arith.extui %296 : i32 to i64
    %c65536_i64_161 = arith.constant 65536 : i64
    %298 = arith.muli %297, %c65536_i64_161 : i64
    %299 = arith.cmpi ult, %295, %298 : i64
    cf.cond_br %299, ^bb54, ^bb55
  ^bb53:  // pred: ^bb50
    %c1_i32_162 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_162) : (i32) -> ()
    cf.br ^bb52
  ^bb54:  // 2 preds: ^bb52, ^bb55
    %300 = llvm.getelementptr %14[%294] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_157, %300 {alignment = 1 : i64} : i64, !llvm.ptr
    %301 = llvm.load %3 : !llvm.ptr -> i32
    %302 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_163 = arith.constant 0 : i64
    %303 = arith.extui %302 : i32 to i64
    %304 = arith.addi %303, %c0_i64_163 : i64
    %c8_i64_164 = arith.constant 8 : i64
    %305 = arith.addi %304, %c8_i64_164 : i64
    %c0_i32_165 = arith.constant 0 : i32
    %306 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_165) : (!llvm.ptr, i32) -> i32
    %307 = arith.extui %306 : i32 to i64
    %c65536_i64_166 = arith.constant 65536 : i64
    %308 = arith.muli %307, %c65536_i64_166 : i64
    %309 = arith.cmpi ult, %305, %308 : i64
    cf.cond_br %309, ^bb56, ^bb57
  ^bb55:  // pred: ^bb52
    %c1_i32_167 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_167) : (i32) -> ()
    cf.br ^bb54
  ^bb56:  // 2 preds: ^bb54, ^bb57
    %310 = llvm.getelementptr %14[%304] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %311 = llvm.load volatile %310 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c64_i64 = arith.constant 64 : i64
    %312 = arith.extui %301 : i32 to i64
    %313 = arith.addi %312, %c64_i64 : i64
    %c8_i64_168 = arith.constant 8 : i64
    %314 = arith.addi %313, %c8_i64_168 : i64
    %c0_i32_169 = arith.constant 0 : i32
    %315 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_169) : (!llvm.ptr, i32) -> i32
    %316 = arith.extui %315 : i32 to i64
    %c65536_i64_170 = arith.constant 65536 : i64
    %317 = arith.muli %316, %c65536_i64_170 : i64
    %318 = arith.cmpi ult, %314, %317 : i64
    cf.cond_br %318, ^bb58, ^bb59
  ^bb57:  // pred: ^bb54
    %c1_i32_171 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_171) : (i32) -> ()
    cf.br ^bb56
  ^bb58:  // 2 preds: ^bb56, ^bb59
    %319 = llvm.getelementptr %14[%313] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %311, %319 {alignment = 1 : i64} : i64, !llvm.ptr
    %c0_i32_172 = arith.constant 0 : i32
    llvm.store %c0_i32_172, %4 : i32, !llvm.ptr
    %c0_i32_173 = arith.constant 0 : i32
    llvm.store %c0_i32_173, %5 : i32, !llvm.ptr
    cf.br ^bb61
  ^bb59:  // pred: ^bb56
    %c1_i32_174 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_174) : (i32) -> ()
    cf.br ^bb58
  ^bb60:  // pred: ^bb68
    %320 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32_175 = arith.constant 24 : i32
    %321 = arith.addi %320, %c24_i32_175 : i32
    %c0_i64_176 = arith.constant 0 : i64
    %c0_i64_177 = arith.constant 0 : i64
    %322 = arith.extui %321 : i32 to i64
    %323 = arith.addi %322, %c0_i64_177 : i64
    %c8_i64_178 = arith.constant 8 : i64
    %324 = arith.addi %323, %c8_i64_178 : i64
    %c0_i32_179 = arith.constant 0 : i32
    %325 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_179) : (!llvm.ptr, i32) -> i32
    %326 = arith.extui %325 : i32 to i64
    %c65536_i64_180 = arith.constant 65536 : i64
    %327 = arith.muli %326, %c65536_i64_180 : i64
    %328 = arith.cmpi ult, %324, %327 : i64
    cf.cond_br %328, ^bb69, ^bb70
  ^bb61:  // 2 preds: ^bb58, ^bb66
    %329 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32_181 = arith.constant 64 : i32
    %330 = arith.addi %329, %c64_i32_181 : i32
    %331 = llvm.load %4 : !llvm.ptr -> i32
    %332 = arith.addi %330, %331 : i32
    llvm.store %332, %6 : i32, !llvm.ptr
    %333 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_182 = arith.constant 0 : i64
    %334 = arith.extui %333 : i32 to i64
    %335 = arith.addi %334, %c0_i64_182 : i64
    %c8_i64_183 = arith.constant 8 : i64
    %336 = arith.addi %335, %c8_i64_183 : i64
    %c0_i32_184 = arith.constant 0 : i32
    %337 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_184) : (!llvm.ptr, i32) -> i32
    %338 = arith.extui %337 : i32 to i64
    %c65536_i64_185 = arith.constant 65536 : i64
    %339 = arith.muli %338, %c65536_i64_185 : i64
    %340 = arith.cmpi ult, %336, %339 : i64
    cf.cond_br %340, ^bb62, ^bb63
  ^bb62:  // 2 preds: ^bb61, ^bb63
    %341 = llvm.getelementptr %14[%335] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %342 = llvm.load volatile %341 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %342, %7 : i64, !llvm.ptr
    %343 = llvm.load %3 : !llvm.ptr -> i32
    %344 = llvm.load %4 : !llvm.ptr -> i32
    %345 = arith.addi %343, %344 : i32
    %c0_i64_186 = arith.constant 0 : i64
    %346 = arith.extui %345 : i32 to i64
    %347 = arith.addi %346, %c0_i64_186 : i64
    %c8_i64_187 = arith.constant 8 : i64
    %348 = arith.addi %347, %c8_i64_187 : i64
    %c0_i32_188 = arith.constant 0 : i32
    %349 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_188) : (!llvm.ptr, i32) -> i32
    %350 = arith.extui %349 : i32 to i64
    %c65536_i64_189 = arith.constant 65536 : i64
    %351 = arith.muli %350, %c65536_i64_189 : i64
    %352 = arith.cmpi ult, %348, %351 : i64
    cf.cond_br %352, ^bb64, ^bb65
  ^bb63:  // pred: ^bb61
    %c1_i32_190 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_190) : (i32) -> ()
    cf.br ^bb62
  ^bb64:  // 2 preds: ^bb62, ^bb65
    %353 = llvm.getelementptr %14[%347] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %354 = llvm.load volatile %353 {alignment = 1 : i64} : !llvm.ptr -> i64
    %355 = arith.addi %342, %354 : i64
    llvm.store %355, %8 : i64, !llvm.ptr
    %356 = llvm.load %5 : !llvm.ptr -> i32
    %357 = arith.extui %356 : i32 to i64
    %c1_i64_191 = arith.constant 1 : i64
    %358 = arith.andi %357, %c1_i64_191 : i64
    %359 = arith.addi %355, %358 : i64
    llvm.store %359, %9 : i64, !llvm.ptr
    %c0_i64_192 = arith.constant 0 : i64
    %360 = arith.extui %332 : i32 to i64
    %361 = arith.addi %360, %c0_i64_192 : i64
    %c8_i64_193 = arith.constant 8 : i64
    %362 = arith.addi %361, %c8_i64_193 : i64
    %c0_i32_194 = arith.constant 0 : i32
    %363 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_194) : (!llvm.ptr, i32) -> i32
    %364 = arith.extui %363 : i32 to i64
    %c65536_i64_195 = arith.constant 65536 : i64
    %365 = arith.muli %364, %c65536_i64_195 : i64
    %366 = arith.cmpi ult, %362, %365 : i64
    cf.cond_br %366, ^bb66, ^bb67
  ^bb65:  // pred: ^bb62
    %c1_i32_196 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_196) : (i32) -> ()
    cf.br ^bb64
  ^bb66:  // 2 preds: ^bb64, ^bb67
    %367 = llvm.getelementptr %14[%361] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %359, %367 {alignment = 1 : i64} : i64, !llvm.ptr
    %368 = llvm.load %8 : !llvm.ptr -> i64
    %369 = llvm.load %7 : !llvm.ptr -> i64
    %370 = arith.cmpi ult, %368, %369 : i64
    %371 = arith.extui %370 : i1 to i64
    %372 = arith.trunci %371 : i64 to i32
    %373 = llvm.load %9 : !llvm.ptr -> i64
    %374 = llvm.load %8 : !llvm.ptr -> i64
    %375 = arith.cmpi ult, %373, %374 : i64
    %376 = arith.extui %375 : i1 to i64
    %377 = arith.trunci %376 : i64 to i32
    %378 = arith.ori %372, %377 : i32
    llvm.store %378, %5 : i32, !llvm.ptr
    %379 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i32_197 = arith.constant 8 : i32
    %380 = arith.addi %379, %c8_i32_197 : i32
    llvm.store %380, %4 : i32, !llvm.ptr
    %c32_i32_198 = arith.constant 32 : i32
    %381 = arith.cmpi eq, %380, %c32_i32_198 : i32
    %382 = arith.extui %381 : i1 to i32
    %c0_i32_199 = arith.constant 0 : i32
    %383 = arith.cmpi eq, %382, %c0_i32_199 : i32
    %384 = arith.extui %383 : i1 to i32
    %c0_i32_200 = arith.constant 0 : i32
    %385 = arith.cmpi ne, %384, %c0_i32_200 : i32
    cf.cond_br %385, ^bb61, ^bb68
  ^bb67:  // pred: ^bb64
    %c1_i32_201 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_201) : (i32) -> ()
    cf.br ^bb66
  ^bb68:  // pred: ^bb66
    cf.br ^bb60
  ^bb69:  // 2 preds: ^bb60, ^bb70
    %386 = llvm.getelementptr %14[%323] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_176, %386 {alignment = 1 : i64} : i64, !llvm.ptr
    %387 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_202 = arith.constant 16 : i32
    %388 = arith.addi %387, %c16_i32_202 : i32
    %c0_i64_203 = arith.constant 0 : i64
    %c0_i64_204 = arith.constant 0 : i64
    %389 = arith.extui %388 : i32 to i64
    %390 = arith.addi %389, %c0_i64_204 : i64
    %c8_i64_205 = arith.constant 8 : i64
    %391 = arith.addi %390, %c8_i64_205 : i64
    %c0_i32_206 = arith.constant 0 : i32
    %392 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_206) : (!llvm.ptr, i32) -> i32
    %393 = arith.extui %392 : i32 to i64
    %c65536_i64_207 = arith.constant 65536 : i64
    %394 = arith.muli %393, %c65536_i64_207 : i64
    %395 = arith.cmpi ult, %391, %394 : i64
    cf.cond_br %395, ^bb71, ^bb72
  ^bb70:  // pred: ^bb60
    %c1_i32_208 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_208) : (i32) -> ()
    cf.br ^bb69
  ^bb71:  // 2 preds: ^bb69, ^bb72
    %396 = llvm.getelementptr %14[%390] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_203, %396 {alignment = 1 : i64} : i64, !llvm.ptr
    %397 = llvm.load %3 : !llvm.ptr -> i32
    %c96_i32 = arith.constant 96 : i32
    %398 = arith.addi %397, %c96_i32 : i32
    %c8_i32_209 = arith.constant 8 : i32
    %399 = arith.addi %398, %c8_i32_209 : i32
    %400 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_210 = arith.constant 8 : i32
    %401 = arith.addi %400, %c8_i32_210 : i32
    %c0_i64_211 = arith.constant 0 : i64
    %402 = arith.extui %401 : i32 to i64
    %403 = arith.addi %402, %c0_i64_211 : i64
    %c8_i64_212 = arith.constant 8 : i64
    %404 = arith.addi %403, %c8_i64_212 : i64
    %c0_i32_213 = arith.constant 0 : i32
    %405 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_213) : (!llvm.ptr, i32) -> i32
    %406 = arith.extui %405 : i32 to i64
    %c65536_i64_214 = arith.constant 65536 : i64
    %407 = arith.muli %406, %c65536_i64_214 : i64
    %408 = arith.cmpi ult, %404, %407 : i64
    cf.cond_br %408, ^bb73, ^bb74
  ^bb72:  // pred: ^bb69
    %c1_i32_215 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_215) : (i32) -> ()
    cf.br ^bb71
  ^bb73:  // 2 preds: ^bb71, ^bb74
    %409 = llvm.getelementptr %14[%403] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %410 = llvm.load volatile %409 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_216 = arith.constant 0 : i64
    %411 = arith.extui %399 : i32 to i64
    %412 = arith.addi %411, %c0_i64_216 : i64
    %c8_i64_217 = arith.constant 8 : i64
    %413 = arith.addi %412, %c8_i64_217 : i64
    %c0_i32_218 = arith.constant 0 : i32
    %414 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_218) : (!llvm.ptr, i32) -> i32
    %415 = arith.extui %414 : i32 to i64
    %c65536_i64_219 = arith.constant 65536 : i64
    %416 = arith.muli %415, %c65536_i64_219 : i64
    %417 = arith.cmpi ult, %413, %416 : i64
    cf.cond_br %417, ^bb75, ^bb76
  ^bb74:  // pred: ^bb71
    %c1_i32_220 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_220) : (i32) -> ()
    cf.br ^bb73
  ^bb75:  // 2 preds: ^bb73, ^bb76
    %418 = llvm.getelementptr %14[%412] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %410, %418 {alignment = 1 : i64} : i64, !llvm.ptr
    %419 = llvm.load %3 : !llvm.ptr -> i32
    %c96_i32_221 = arith.constant 96 : i32
    %420 = arith.addi %419, %c96_i32_221 : i32
    %c16_i32_222 = arith.constant 16 : i32
    %421 = arith.addi %420, %c16_i32_222 : i32
    %422 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32_223 = arith.constant 16 : i32
    %423 = arith.addi %422, %c16_i32_223 : i32
    %c0_i64_224 = arith.constant 0 : i64
    %424 = arith.extui %423 : i32 to i64
    %425 = arith.addi %424, %c0_i64_224 : i64
    %c8_i64_225 = arith.constant 8 : i64
    %426 = arith.addi %425, %c8_i64_225 : i64
    %c0_i32_226 = arith.constant 0 : i32
    %427 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_226) : (!llvm.ptr, i32) -> i32
    %428 = arith.extui %427 : i32 to i64
    %c65536_i64_227 = arith.constant 65536 : i64
    %429 = arith.muli %428, %c65536_i64_227 : i64
    %430 = arith.cmpi ult, %426, %429 : i64
    cf.cond_br %430, ^bb77, ^bb78
  ^bb76:  // pred: ^bb73
    %c1_i32_228 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_228) : (i32) -> ()
    cf.br ^bb75
  ^bb77:  // 2 preds: ^bb75, ^bb78
    %431 = llvm.getelementptr %14[%425] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %432 = llvm.load volatile %431 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_229 = arith.constant 0 : i64
    %433 = arith.extui %421 : i32 to i64
    %434 = arith.addi %433, %c0_i64_229 : i64
    %c8_i64_230 = arith.constant 8 : i64
    %435 = arith.addi %434, %c8_i64_230 : i64
    %c0_i32_231 = arith.constant 0 : i32
    %436 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_231) : (!llvm.ptr, i32) -> i32
    %437 = arith.extui %436 : i32 to i64
    %c65536_i64_232 = arith.constant 65536 : i64
    %438 = arith.muli %437, %c65536_i64_232 : i64
    %439 = arith.cmpi ult, %435, %438 : i64
    cf.cond_br %439, ^bb79, ^bb80
  ^bb78:  // pred: ^bb75
    %c1_i32_233 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_233) : (i32) -> ()
    cf.br ^bb77
  ^bb79:  // 2 preds: ^bb77, ^bb80
    %440 = llvm.getelementptr %14[%434] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %432, %440 {alignment = 1 : i64} : i64, !llvm.ptr
    %441 = llvm.load %3 : !llvm.ptr -> i32
    %c96_i32_234 = arith.constant 96 : i32
    %442 = arith.addi %441, %c96_i32_234 : i32
    %c24_i32_235 = arith.constant 24 : i32
    %443 = arith.addi %442, %c24_i32_235 : i32
    %444 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i32_236 = arith.constant 24 : i32
    %445 = arith.addi %444, %c24_i32_236 : i32
    %c0_i64_237 = arith.constant 0 : i64
    %446 = arith.extui %445 : i32 to i64
    %447 = arith.addi %446, %c0_i64_237 : i64
    %c8_i64_238 = arith.constant 8 : i64
    %448 = arith.addi %447, %c8_i64_238 : i64
    %c0_i32_239 = arith.constant 0 : i32
    %449 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_239) : (!llvm.ptr, i32) -> i32
    %450 = arith.extui %449 : i32 to i64
    %c65536_i64_240 = arith.constant 65536 : i64
    %451 = arith.muli %450, %c65536_i64_240 : i64
    %452 = arith.cmpi ult, %448, %451 : i64
    cf.cond_br %452, ^bb81, ^bb82
  ^bb80:  // pred: ^bb77
    %c1_i32_241 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_241) : (i32) -> ()
    cf.br ^bb79
  ^bb81:  // 2 preds: ^bb79, ^bb82
    %453 = llvm.getelementptr %14[%447] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %454 = llvm.load volatile %453 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_242 = arith.constant 0 : i64
    %455 = arith.extui %443 : i32 to i64
    %456 = arith.addi %455, %c0_i64_242 : i64
    %c8_i64_243 = arith.constant 8 : i64
    %457 = arith.addi %456, %c8_i64_243 : i64
    %c0_i32_244 = arith.constant 0 : i32
    %458 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_244) : (!llvm.ptr, i32) -> i32
    %459 = arith.extui %458 : i32 to i64
    %c65536_i64_245 = arith.constant 65536 : i64
    %460 = arith.muli %459, %c65536_i64_245 : i64
    %461 = arith.cmpi ult, %457, %460 : i64
    cf.cond_br %461, ^bb83, ^bb84
  ^bb82:  // pred: ^bb79
    %c1_i32_246 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_246) : (i32) -> ()
    cf.br ^bb81
  ^bb83:  // 2 preds: ^bb81, ^bb84
    %462 = llvm.getelementptr %14[%456] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %454, %462 {alignment = 1 : i64} : i64, !llvm.ptr
    %463 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_247 = arith.constant 0 : i64
    %c8_i64_248 = arith.constant 8 : i64
    %464 = arith.extui %463 : i32 to i64
    %465 = arith.addi %464, %c8_i64_248 : i64
    %c8_i64_249 = arith.constant 8 : i64
    %466 = arith.addi %465, %c8_i64_249 : i64
    %c0_i32_250 = arith.constant 0 : i32
    %467 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_250) : (!llvm.ptr, i32) -> i32
    %468 = arith.extui %467 : i32 to i64
    %c65536_i64_251 = arith.constant 65536 : i64
    %469 = arith.muli %468, %c65536_i64_251 : i64
    %470 = arith.cmpi ult, %466, %469 : i64
    cf.cond_br %470, ^bb85, ^bb86
  ^bb84:  // pred: ^bb81
    %c1_i32_252 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_252) : (i32) -> ()
    cf.br ^bb83
  ^bb85:  // 2 preds: ^bb83, ^bb86
    %471 = llvm.getelementptr %14[%465] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_247, %471 {alignment = 1 : i64} : i64, !llvm.ptr
    %472 = llvm.load %3 : !llvm.ptr -> i32
    %c2_i64 = arith.constant 2 : i64
    %c0_i64_253 = arith.constant 0 : i64
    %473 = arith.extui %472 : i32 to i64
    %474 = arith.addi %473, %c0_i64_253 : i64
    %c8_i64_254 = arith.constant 8 : i64
    %475 = arith.addi %474, %c8_i64_254 : i64
    %c0_i32_255 = arith.constant 0 : i32
    %476 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_255) : (!llvm.ptr, i32) -> i32
    %477 = arith.extui %476 : i32 to i64
    %c65536_i64_256 = arith.constant 65536 : i64
    %478 = arith.muli %477, %c65536_i64_256 : i64
    %479 = arith.cmpi ult, %475, %478 : i64
    cf.cond_br %479, ^bb87, ^bb88
  ^bb86:  // pred: ^bb83
    %c1_i32_257 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_257) : (i32) -> ()
    cf.br ^bb85
  ^bb87:  // 2 preds: ^bb85, ^bb88
    %480 = llvm.getelementptr %14[%474] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i64, %480 {alignment = 1 : i64} : i64, !llvm.ptr
    %481 = llvm.load %3 : !llvm.ptr -> i32
    %482 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_258 = arith.constant 0 : i64
    %483 = arith.extui %482 : i32 to i64
    %484 = arith.addi %483, %c0_i64_258 : i64
    %c8_i64_259 = arith.constant 8 : i64
    %485 = arith.addi %484, %c8_i64_259 : i64
    %c0_i32_260 = arith.constant 0 : i32
    %486 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_260) : (!llvm.ptr, i32) -> i32
    %487 = arith.extui %486 : i32 to i64
    %c65536_i64_261 = arith.constant 65536 : i64
    %488 = arith.muli %487, %c65536_i64_261 : i64
    %489 = arith.cmpi ult, %485, %488 : i64
    cf.cond_br %489, ^bb89, ^bb90
  ^bb88:  // pred: ^bb85
    %c1_i32_262 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_262) : (i32) -> ()
    cf.br ^bb87
  ^bb89:  // 2 preds: ^bb87, ^bb90
    %490 = llvm.getelementptr %14[%484] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %491 = llvm.load volatile %490 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c96_i64 = arith.constant 96 : i64
    %492 = arith.extui %481 : i32 to i64
    %493 = arith.addi %492, %c96_i64 : i64
    %c8_i64_263 = arith.constant 8 : i64
    %494 = arith.addi %493, %c8_i64_263 : i64
    %c0_i32_264 = arith.constant 0 : i32
    %495 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_264) : (!llvm.ptr, i32) -> i32
    %496 = arith.extui %495 : i32 to i64
    %c65536_i64_265 = arith.constant 65536 : i64
    %497 = arith.muli %496, %c65536_i64_265 : i64
    %498 = arith.cmpi ult, %494, %497 : i64
    cf.cond_br %498, ^bb91, ^bb92
  ^bb90:  // pred: ^bb87
    %c1_i32_266 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_266) : (i32) -> ()
    cf.br ^bb89
  ^bb91:  // 2 preds: ^bb89, ^bb92
    %499 = llvm.getelementptr %14[%493] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %491, %499 {alignment = 1 : i64} : i64, !llvm.ptr
    %c0_i32_267 = arith.constant 0 : i32
    llvm.store %c0_i32_267, %4 : i32, !llvm.ptr
    %c0_i32_268 = arith.constant 0 : i32
    llvm.store %c0_i32_268, %5 : i32, !llvm.ptr
    cf.br ^bb94
  ^bb92:  // pred: ^bb89
    %c1_i32_269 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_269) : (i32) -> ()
    cf.br ^bb91
  ^bb93:  // pred: ^bb101
    %500 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32_270 = arith.constant 24 : i32
    %501 = arith.addi %500, %c24_i32_270 : i32
    %c0_i64_271 = arith.constant 0 : i64
    %c0_i64_272 = arith.constant 0 : i64
    %502 = arith.extui %501 : i32 to i64
    %503 = arith.addi %502, %c0_i64_272 : i64
    %c8_i64_273 = arith.constant 8 : i64
    %504 = arith.addi %503, %c8_i64_273 : i64
    %c0_i32_274 = arith.constant 0 : i32
    %505 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_274) : (!llvm.ptr, i32) -> i32
    %506 = arith.extui %505 : i32 to i64
    %c65536_i64_275 = arith.constant 65536 : i64
    %507 = arith.muli %506, %c65536_i64_275 : i64
    %508 = arith.cmpi ult, %504, %507 : i64
    cf.cond_br %508, ^bb102, ^bb103
  ^bb94:  // 2 preds: ^bb91, ^bb99
    %509 = llvm.load %3 : !llvm.ptr -> i32
    %c96_i32_276 = arith.constant 96 : i32
    %510 = arith.addi %509, %c96_i32_276 : i32
    %511 = llvm.load %4 : !llvm.ptr -> i32
    %512 = arith.addi %510, %511 : i32
    llvm.store %512, %6 : i32, !llvm.ptr
    %513 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_277 = arith.constant 0 : i64
    %514 = arith.extui %513 : i32 to i64
    %515 = arith.addi %514, %c0_i64_277 : i64
    %c8_i64_278 = arith.constant 8 : i64
    %516 = arith.addi %515, %c8_i64_278 : i64
    %c0_i32_279 = arith.constant 0 : i32
    %517 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_279) : (!llvm.ptr, i32) -> i32
    %518 = arith.extui %517 : i32 to i64
    %c65536_i64_280 = arith.constant 65536 : i64
    %519 = arith.muli %518, %c65536_i64_280 : i64
    %520 = arith.cmpi ult, %516, %519 : i64
    cf.cond_br %520, ^bb95, ^bb96
  ^bb95:  // 2 preds: ^bb94, ^bb96
    %521 = llvm.getelementptr %14[%515] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %522 = llvm.load volatile %521 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %522, %7 : i64, !llvm.ptr
    %523 = llvm.load %3 : !llvm.ptr -> i32
    %524 = llvm.load %4 : !llvm.ptr -> i32
    %525 = arith.addi %523, %524 : i32
    %c0_i64_281 = arith.constant 0 : i64
    %526 = arith.extui %525 : i32 to i64
    %527 = arith.addi %526, %c0_i64_281 : i64
    %c8_i64_282 = arith.constant 8 : i64
    %528 = arith.addi %527, %c8_i64_282 : i64
    %c0_i32_283 = arith.constant 0 : i32
    %529 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_283) : (!llvm.ptr, i32) -> i32
    %530 = arith.extui %529 : i32 to i64
    %c65536_i64_284 = arith.constant 65536 : i64
    %531 = arith.muli %530, %c65536_i64_284 : i64
    %532 = arith.cmpi ult, %528, %531 : i64
    cf.cond_br %532, ^bb97, ^bb98
  ^bb96:  // pred: ^bb94
    %c1_i32_285 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_285) : (i32) -> ()
    cf.br ^bb95
  ^bb97:  // 2 preds: ^bb95, ^bb98
    %533 = llvm.getelementptr %14[%527] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %534 = llvm.load volatile %533 {alignment = 1 : i64} : !llvm.ptr -> i64
    %535 = arith.addi %522, %534 : i64
    llvm.store %535, %8 : i64, !llvm.ptr
    %536 = llvm.load %5 : !llvm.ptr -> i32
    %537 = arith.extui %536 : i32 to i64
    %c1_i64_286 = arith.constant 1 : i64
    %538 = arith.andi %537, %c1_i64_286 : i64
    %539 = arith.addi %535, %538 : i64
    llvm.store %539, %9 : i64, !llvm.ptr
    %c0_i64_287 = arith.constant 0 : i64
    %540 = arith.extui %512 : i32 to i64
    %541 = arith.addi %540, %c0_i64_287 : i64
    %c8_i64_288 = arith.constant 8 : i64
    %542 = arith.addi %541, %c8_i64_288 : i64
    %c0_i32_289 = arith.constant 0 : i32
    %543 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_289) : (!llvm.ptr, i32) -> i32
    %544 = arith.extui %543 : i32 to i64
    %c65536_i64_290 = arith.constant 65536 : i64
    %545 = arith.muli %544, %c65536_i64_290 : i64
    %546 = arith.cmpi ult, %542, %545 : i64
    cf.cond_br %546, ^bb99, ^bb100
  ^bb98:  // pred: ^bb95
    %c1_i32_291 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_291) : (i32) -> ()
    cf.br ^bb97
  ^bb99:  // 2 preds: ^bb97, ^bb100
    %547 = llvm.getelementptr %14[%541] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %539, %547 {alignment = 1 : i64} : i64, !llvm.ptr
    %548 = llvm.load %8 : !llvm.ptr -> i64
    %549 = llvm.load %7 : !llvm.ptr -> i64
    %550 = arith.cmpi ult, %548, %549 : i64
    %551 = arith.extui %550 : i1 to i64
    %552 = arith.trunci %551 : i64 to i32
    %553 = llvm.load %9 : !llvm.ptr -> i64
    %554 = llvm.load %8 : !llvm.ptr -> i64
    %555 = arith.cmpi ult, %553, %554 : i64
    %556 = arith.extui %555 : i1 to i64
    %557 = arith.trunci %556 : i64 to i32
    %558 = arith.ori %552, %557 : i32
    llvm.store %558, %5 : i32, !llvm.ptr
    %559 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i32_292 = arith.constant 8 : i32
    %560 = arith.addi %559, %c8_i32_292 : i32
    llvm.store %560, %4 : i32, !llvm.ptr
    %c32_i32_293 = arith.constant 32 : i32
    %561 = arith.cmpi eq, %560, %c32_i32_293 : i32
    %562 = arith.extui %561 : i1 to i32
    %c0_i32_294 = arith.constant 0 : i32
    %563 = arith.cmpi eq, %562, %c0_i32_294 : i32
    %564 = arith.extui %563 : i1 to i32
    %c0_i32_295 = arith.constant 0 : i32
    %565 = arith.cmpi ne, %564, %c0_i32_295 : i32
    cf.cond_br %565, ^bb94, ^bb101
  ^bb100:  // pred: ^bb97
    %c1_i32_296 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_296) : (i32) -> ()
    cf.br ^bb99
  ^bb101:  // pred: ^bb99
    cf.br ^bb93
  ^bb102:  // 2 preds: ^bb93, ^bb103
    %566 = llvm.getelementptr %14[%503] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_271, %566 {alignment = 1 : i64} : i64, !llvm.ptr
    %567 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_297 = arith.constant 16 : i32
    %568 = arith.addi %567, %c16_i32_297 : i32
    %c0_i64_298 = arith.constant 0 : i64
    %c0_i64_299 = arith.constant 0 : i64
    %569 = arith.extui %568 : i32 to i64
    %570 = arith.addi %569, %c0_i64_299 : i64
    %c8_i64_300 = arith.constant 8 : i64
    %571 = arith.addi %570, %c8_i64_300 : i64
    %c0_i32_301 = arith.constant 0 : i32
    %572 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_301) : (!llvm.ptr, i32) -> i32
    %573 = arith.extui %572 : i32 to i64
    %c65536_i64_302 = arith.constant 65536 : i64
    %574 = arith.muli %573, %c65536_i64_302 : i64
    %575 = arith.cmpi ult, %571, %574 : i64
    cf.cond_br %575, ^bb104, ^bb105
  ^bb103:  // pred: ^bb93
    %c1_i32_303 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_303) : (i32) -> ()
    cf.br ^bb102
  ^bb104:  // 2 preds: ^bb102, ^bb105
    %576 = llvm.getelementptr %14[%570] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_298, %576 {alignment = 1 : i64} : i64, !llvm.ptr
    %577 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_304 = arith.constant 0 : i64
    %c8_i64_305 = arith.constant 8 : i64
    %578 = arith.extui %577 : i32 to i64
    %579 = arith.addi %578, %c8_i64_305 : i64
    %c8_i64_306 = arith.constant 8 : i64
    %580 = arith.addi %579, %c8_i64_306 : i64
    %c0_i32_307 = arith.constant 0 : i32
    %581 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_307) : (!llvm.ptr, i32) -> i32
    %582 = arith.extui %581 : i32 to i64
    %c65536_i64_308 = arith.constant 65536 : i64
    %583 = arith.muli %582, %c65536_i64_308 : i64
    %584 = arith.cmpi ult, %580, %583 : i64
    cf.cond_br %584, ^bb106, ^bb107
  ^bb105:  // pred: ^bb102
    %c1_i32_309 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_309) : (i32) -> ()
    cf.br ^bb104
  ^bb106:  // 2 preds: ^bb104, ^bb107
    %585 = llvm.getelementptr %14[%579] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_304, %585 {alignment = 1 : i64} : i64, !llvm.ptr
    %586 = llvm.load %3 : !llvm.ptr -> i32
    %c2_i64_310 = arith.constant 2 : i64
    %c0_i64_311 = arith.constant 0 : i64
    %587 = arith.extui %586 : i32 to i64
    %588 = arith.addi %587, %c0_i64_311 : i64
    %c8_i64_312 = arith.constant 8 : i64
    %589 = arith.addi %588, %c8_i64_312 : i64
    %c0_i32_313 = arith.constant 0 : i32
    %590 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_313) : (!llvm.ptr, i32) -> i32
    %591 = arith.extui %590 : i32 to i64
    %c65536_i64_314 = arith.constant 65536 : i64
    %592 = arith.muli %591, %c65536_i64_314 : i64
    %593 = arith.cmpi ult, %589, %592 : i64
    cf.cond_br %593, ^bb108, ^bb109
  ^bb107:  // pred: ^bb104
    %c1_i32_315 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_315) : (i32) -> ()
    cf.br ^bb106
  ^bb108:  // 2 preds: ^bb106, ^bb109
    %594 = llvm.getelementptr %14[%588] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i64_310, %594 {alignment = 1 : i64} : i64, !llvm.ptr
    %c0_i32_316 = arith.constant 0 : i32
    llvm.store %c0_i32_316, %4 : i32, !llvm.ptr
    %c0_i32_317 = arith.constant 0 : i32
    llvm.store %c0_i32_317, %5 : i32, !llvm.ptr
    cf.br ^bb111
  ^bb109:  // pred: ^bb106
    %c1_i32_318 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_318) : (i32) -> ()
    cf.br ^bb108
  ^bb110:  // pred: ^bb118
    %595 = llvm.load %0 : !llvm.ptr -> i32
    %596 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i64_319 = arith.constant 32 : i64
    %597 = arith.extui %596 : i32 to i64
    %598 = arith.addi %597, %c32_i64_319 : i64
    %c8_i64_320 = arith.constant 8 : i64
    %599 = arith.addi %598, %c8_i64_320 : i64
    %c0_i32_321 = arith.constant 0 : i32
    %600 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_321) : (!llvm.ptr, i32) -> i32
    %601 = arith.extui %600 : i32 to i64
    %c65536_i64_322 = arith.constant 65536 : i64
    %602 = arith.muli %601, %c65536_i64_322 : i64
    %603 = arith.cmpi ult, %599, %602 : i64
    cf.cond_br %603, ^bb119, ^bb120
  ^bb111:  // 2 preds: ^bb108, ^bb116
    %604 = llvm.load %1 : !llvm.ptr -> i32
    %605 = llvm.load %4 : !llvm.ptr -> i32
    %606 = arith.addi %604, %605 : i32
    llvm.store %606, %6 : i32, !llvm.ptr
    %607 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_323 = arith.constant 0 : i64
    %608 = arith.extui %607 : i32 to i64
    %609 = arith.addi %608, %c0_i64_323 : i64
    %c8_i64_324 = arith.constant 8 : i64
    %610 = arith.addi %609, %c8_i64_324 : i64
    %c0_i32_325 = arith.constant 0 : i32
    %611 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_325) : (!llvm.ptr, i32) -> i32
    %612 = arith.extui %611 : i32 to i64
    %c65536_i64_326 = arith.constant 65536 : i64
    %613 = arith.muli %612, %c65536_i64_326 : i64
    %614 = arith.cmpi ult, %610, %613 : i64
    cf.cond_br %614, ^bb112, ^bb113
  ^bb112:  // 2 preds: ^bb111, ^bb113
    %615 = llvm.getelementptr %14[%609] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %616 = llvm.load volatile %615 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %616, %7 : i64, !llvm.ptr
    %617 = llvm.load %3 : !llvm.ptr -> i32
    %618 = llvm.load %4 : !llvm.ptr -> i32
    %619 = arith.addi %617, %618 : i32
    %c0_i64_327 = arith.constant 0 : i64
    %620 = arith.extui %619 : i32 to i64
    %621 = arith.addi %620, %c0_i64_327 : i64
    %c8_i64_328 = arith.constant 8 : i64
    %622 = arith.addi %621, %c8_i64_328 : i64
    %c0_i32_329 = arith.constant 0 : i32
    %623 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_329) : (!llvm.ptr, i32) -> i32
    %624 = arith.extui %623 : i32 to i64
    %c65536_i64_330 = arith.constant 65536 : i64
    %625 = arith.muli %624, %c65536_i64_330 : i64
    %626 = arith.cmpi ult, %622, %625 : i64
    cf.cond_br %626, ^bb114, ^bb115
  ^bb113:  // pred: ^bb111
    %c1_i32_331 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_331) : (i32) -> ()
    cf.br ^bb112
  ^bb114:  // 2 preds: ^bb112, ^bb115
    %627 = llvm.getelementptr %14[%621] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %628 = llvm.load volatile %627 {alignment = 1 : i64} : !llvm.ptr -> i64
    %629 = arith.addi %616, %628 : i64
    llvm.store %629, %8 : i64, !llvm.ptr
    %630 = llvm.load %5 : !llvm.ptr -> i32
    %631 = arith.extui %630 : i32 to i64
    %c1_i64_332 = arith.constant 1 : i64
    %632 = arith.andi %631, %c1_i64_332 : i64
    %633 = arith.addi %629, %632 : i64
    llvm.store %633, %9 : i64, !llvm.ptr
    %c0_i64_333 = arith.constant 0 : i64
    %634 = arith.extui %606 : i32 to i64
    %635 = arith.addi %634, %c0_i64_333 : i64
    %c8_i64_334 = arith.constant 8 : i64
    %636 = arith.addi %635, %c8_i64_334 : i64
    %c0_i32_335 = arith.constant 0 : i32
    %637 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_335) : (!llvm.ptr, i32) -> i32
    %638 = arith.extui %637 : i32 to i64
    %c65536_i64_336 = arith.constant 65536 : i64
    %639 = arith.muli %638, %c65536_i64_336 : i64
    %640 = arith.cmpi ult, %636, %639 : i64
    cf.cond_br %640, ^bb116, ^bb117
  ^bb115:  // pred: ^bb112
    %c1_i32_337 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_337) : (i32) -> ()
    cf.br ^bb114
  ^bb116:  // 2 preds: ^bb114, ^bb117
    %641 = llvm.getelementptr %14[%635] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %633, %641 {alignment = 1 : i64} : i64, !llvm.ptr
    %642 = llvm.load %8 : !llvm.ptr -> i64
    %643 = llvm.load %7 : !llvm.ptr -> i64
    %644 = arith.cmpi ult, %642, %643 : i64
    %645 = arith.extui %644 : i1 to i64
    %646 = arith.trunci %645 : i64 to i32
    %647 = llvm.load %9 : !llvm.ptr -> i64
    %648 = llvm.load %8 : !llvm.ptr -> i64
    %649 = arith.cmpi ult, %647, %648 : i64
    %650 = arith.extui %649 : i1 to i64
    %651 = arith.trunci %650 : i64 to i32
    %652 = arith.ori %646, %651 : i32
    llvm.store %652, %5 : i32, !llvm.ptr
    %653 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i32_338 = arith.constant 8 : i32
    %654 = arith.addi %653, %c8_i32_338 : i32
    llvm.store %654, %4 : i32, !llvm.ptr
    %c32_i32_339 = arith.constant 32 : i32
    %655 = arith.cmpi eq, %654, %c32_i32_339 : i32
    %656 = arith.extui %655 : i1 to i32
    %c0_i32_340 = arith.constant 0 : i32
    %657 = arith.cmpi eq, %656, %c0_i32_340 : i32
    %658 = arith.extui %657 : i1 to i32
    %c0_i32_341 = arith.constant 0 : i32
    %659 = arith.cmpi ne, %658, %c0_i32_341 : i32
    cf.cond_br %659, ^bb111, ^bb118
  ^bb117:  // pred: ^bb114
    %c1_i32_342 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_342) : (i32) -> ()
    cf.br ^bb116
  ^bb118:  // pred: ^bb116
    cf.br ^bb110
  ^bb119:  // 2 preds: ^bb110, ^bb120
    %660 = llvm.getelementptr %14[%598] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %661 = llvm.load volatile %660 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_343 = arith.constant 0 : i64
    %662 = arith.extui %595 : i32 to i64
    %663 = arith.addi %662, %c0_i64_343 : i64
    %c8_i64_344 = arith.constant 8 : i64
    %664 = arith.addi %663, %c8_i64_344 : i64
    %c0_i32_345 = arith.constant 0 : i32
    %665 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_345) : (!llvm.ptr, i32) -> i32
    %666 = arith.extui %665 : i32 to i64
    %c65536_i64_346 = arith.constant 65536 : i64
    %667 = arith.muli %666, %c65536_i64_346 : i64
    %668 = arith.cmpi ult, %664, %667 : i64
    cf.cond_br %668, ^bb121, ^bb122
  ^bb120:  // pred: ^bb110
    %c1_i32_347 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_347) : (i32) -> ()
    cf.br ^bb119
  ^bb121:  // 2 preds: ^bb119, ^bb122
    %669 = llvm.getelementptr %14[%663] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %661, %669 {alignment = 1 : i64} : i64, !llvm.ptr
    %670 = llvm.load %0 : !llvm.ptr -> i32
    %671 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i64_348 = arith.constant 64 : i64
    %672 = arith.extui %671 : i32 to i64
    %673 = arith.addi %672, %c64_i64_348 : i64
    %c8_i64_349 = arith.constant 8 : i64
    %674 = arith.addi %673, %c8_i64_349 : i64
    %c0_i32_350 = arith.constant 0 : i32
    %675 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_350) : (!llvm.ptr, i32) -> i32
    %676 = arith.extui %675 : i32 to i64
    %c65536_i64_351 = arith.constant 65536 : i64
    %677 = arith.muli %676, %c65536_i64_351 : i64
    %678 = arith.cmpi ult, %674, %677 : i64
    cf.cond_br %678, ^bb123, ^bb124
  ^bb122:  // pred: ^bb119
    %c1_i32_352 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_352) : (i32) -> ()
    cf.br ^bb121
  ^bb123:  // 2 preds: ^bb121, ^bb124
    %679 = llvm.getelementptr %14[%673] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %680 = llvm.load volatile %679 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c32_i64_353 = arith.constant 32 : i64
    %681 = arith.extui %670 : i32 to i64
    %682 = arith.addi %681, %c32_i64_353 : i64
    %c8_i64_354 = arith.constant 8 : i64
    %683 = arith.addi %682, %c8_i64_354 : i64
    %c0_i32_355 = arith.constant 0 : i32
    %684 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_355) : (!llvm.ptr, i32) -> i32
    %685 = arith.extui %684 : i32 to i64
    %c65536_i64_356 = arith.constant 65536 : i64
    %686 = arith.muli %685, %c65536_i64_356 : i64
    %687 = arith.cmpi ult, %683, %686 : i64
    cf.cond_br %687, ^bb125, ^bb126
  ^bb124:  // pred: ^bb121
    %c1_i32_357 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_357) : (i32) -> ()
    cf.br ^bb123
  ^bb125:  // 2 preds: ^bb123, ^bb126
    %688 = llvm.getelementptr %14[%682] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %680, %688 {alignment = 1 : i64} : i64, !llvm.ptr
    %689 = llvm.load %0 : !llvm.ptr -> i32
    %690 = llvm.load %3 : !llvm.ptr -> i32
    %c96_i64_358 = arith.constant 96 : i64
    %691 = arith.extui %690 : i32 to i64
    %692 = arith.addi %691, %c96_i64_358 : i64
    %c8_i64_359 = arith.constant 8 : i64
    %693 = arith.addi %692, %c8_i64_359 : i64
    %c0_i32_360 = arith.constant 0 : i32
    %694 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_360) : (!llvm.ptr, i32) -> i32
    %695 = arith.extui %694 : i32 to i64
    %c65536_i64_361 = arith.constant 65536 : i64
    %696 = arith.muli %695, %c65536_i64_361 : i64
    %697 = arith.cmpi ult, %693, %696 : i64
    cf.cond_br %697, ^bb127, ^bb128
  ^bb126:  // pred: ^bb123
    %c1_i32_362 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_362) : (i32) -> ()
    cf.br ^bb125
  ^bb127:  // 2 preds: ^bb125, ^bb128
    %698 = llvm.getelementptr %14[%692] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %699 = llvm.load volatile %698 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c64_i64_363 = arith.constant 64 : i64
    %700 = arith.extui %689 : i32 to i64
    %701 = arith.addi %700, %c64_i64_363 : i64
    %c8_i64_364 = arith.constant 8 : i64
    %702 = arith.addi %701, %c8_i64_364 : i64
    %c0_i32_365 = arith.constant 0 : i32
    %703 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_365) : (!llvm.ptr, i32) -> i32
    %704 = arith.extui %703 : i32 to i64
    %c65536_i64_366 = arith.constant 65536 : i64
    %705 = arith.muli %704, %c65536_i64_366 : i64
    %706 = arith.cmpi ult, %702, %705 : i64
    cf.cond_br %706, ^bb129, ^bb130
  ^bb128:  // pred: ^bb125
    %c1_i32_367 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_367) : (i32) -> ()
    cf.br ^bb127
  ^bb129:  // 2 preds: ^bb127, ^bb130
    %707 = llvm.getelementptr %14[%701] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %699, %707 {alignment = 1 : i64} : i64, !llvm.ptr
    %708 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32_368 = arith.constant 24 : i32
    %709 = arith.addi %708, %c24_i32_368 : i32
    %710 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_369 = arith.constant 32 : i32
    %711 = arith.addi %710, %c32_i32_369 : i32
    %c24_i32_370 = arith.constant 24 : i32
    %712 = arith.addi %711, %c24_i32_370 : i32
    %c0_i64_371 = arith.constant 0 : i64
    %713 = arith.extui %712 : i32 to i64
    %714 = arith.addi %713, %c0_i64_371 : i64
    %c8_i64_372 = arith.constant 8 : i64
    %715 = arith.addi %714, %c8_i64_372 : i64
    %c0_i32_373 = arith.constant 0 : i32
    %716 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_373) : (!llvm.ptr, i32) -> i32
    %717 = arith.extui %716 : i32 to i64
    %c65536_i64_374 = arith.constant 65536 : i64
    %718 = arith.muli %717, %c65536_i64_374 : i64
    %719 = arith.cmpi ult, %715, %718 : i64
    cf.cond_br %719, ^bb131, ^bb132
  ^bb130:  // pred: ^bb127
    %c1_i32_375 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_375) : (i32) -> ()
    cf.br ^bb129
  ^bb131:  // 2 preds: ^bb129, ^bb132
    %720 = llvm.getelementptr %14[%714] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %721 = llvm.load volatile %720 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_376 = arith.constant 0 : i64
    %722 = arith.extui %709 : i32 to i64
    %723 = arith.addi %722, %c0_i64_376 : i64
    %c8_i64_377 = arith.constant 8 : i64
    %724 = arith.addi %723, %c8_i64_377 : i64
    %c0_i32_378 = arith.constant 0 : i32
    %725 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_378) : (!llvm.ptr, i32) -> i32
    %726 = arith.extui %725 : i32 to i64
    %c65536_i64_379 = arith.constant 65536 : i64
    %727 = arith.muli %726, %c65536_i64_379 : i64
    %728 = arith.cmpi ult, %724, %727 : i64
    cf.cond_br %728, ^bb133, ^bb134
  ^bb132:  // pred: ^bb129
    %c1_i32_380 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_380) : (i32) -> ()
    cf.br ^bb131
  ^bb133:  // 2 preds: ^bb131, ^bb134
    %729 = llvm.getelementptr %14[%723] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %721, %729 {alignment = 1 : i64} : i64, !llvm.ptr
    %730 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_381 = arith.constant 16 : i32
    %731 = arith.addi %730, %c16_i32_381 : i32
    %732 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_382 = arith.constant 32 : i32
    %733 = arith.addi %732, %c32_i32_382 : i32
    %c16_i32_383 = arith.constant 16 : i32
    %734 = arith.addi %733, %c16_i32_383 : i32
    %c0_i64_384 = arith.constant 0 : i64
    %735 = arith.extui %734 : i32 to i64
    %736 = arith.addi %735, %c0_i64_384 : i64
    %c8_i64_385 = arith.constant 8 : i64
    %737 = arith.addi %736, %c8_i64_385 : i64
    %c0_i32_386 = arith.constant 0 : i32
    %738 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_386) : (!llvm.ptr, i32) -> i32
    %739 = arith.extui %738 : i32 to i64
    %c65536_i64_387 = arith.constant 65536 : i64
    %740 = arith.muli %739, %c65536_i64_387 : i64
    %741 = arith.cmpi ult, %737, %740 : i64
    cf.cond_br %741, ^bb135, ^bb136
  ^bb134:  // pred: ^bb131
    %c1_i32_388 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_388) : (i32) -> ()
    cf.br ^bb133
  ^bb135:  // 2 preds: ^bb133, ^bb136
    %742 = llvm.getelementptr %14[%736] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %743 = llvm.load volatile %742 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_389 = arith.constant 0 : i64
    %744 = arith.extui %731 : i32 to i64
    %745 = arith.addi %744, %c0_i64_389 : i64
    %c8_i64_390 = arith.constant 8 : i64
    %746 = arith.addi %745, %c8_i64_390 : i64
    %c0_i32_391 = arith.constant 0 : i32
    %747 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_391) : (!llvm.ptr, i32) -> i32
    %748 = arith.extui %747 : i32 to i64
    %c65536_i64_392 = arith.constant 65536 : i64
    %749 = arith.muli %748, %c65536_i64_392 : i64
    %750 = arith.cmpi ult, %746, %749 : i64
    cf.cond_br %750, ^bb137, ^bb138
  ^bb136:  // pred: ^bb133
    %c1_i32_393 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_393) : (i32) -> ()
    cf.br ^bb135
  ^bb137:  // 2 preds: ^bb135, ^bb138
    %751 = llvm.getelementptr %14[%745] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %743, %751 {alignment = 1 : i64} : i64, !llvm.ptr
    %752 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_394 = arith.constant 8 : i32
    %753 = arith.addi %752, %c8_i32_394 : i32
    %754 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_395 = arith.constant 32 : i32
    %755 = arith.addi %754, %c32_i32_395 : i32
    %c8_i32_396 = arith.constant 8 : i32
    %756 = arith.addi %755, %c8_i32_396 : i32
    %c0_i64_397 = arith.constant 0 : i64
    %757 = arith.extui %756 : i32 to i64
    %758 = arith.addi %757, %c0_i64_397 : i64
    %c8_i64_398 = arith.constant 8 : i64
    %759 = arith.addi %758, %c8_i64_398 : i64
    %c0_i32_399 = arith.constant 0 : i32
    %760 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_399) : (!llvm.ptr, i32) -> i32
    %761 = arith.extui %760 : i32 to i64
    %c65536_i64_400 = arith.constant 65536 : i64
    %762 = arith.muli %761, %c65536_i64_400 : i64
    %763 = arith.cmpi ult, %759, %762 : i64
    cf.cond_br %763, ^bb139, ^bb140
  ^bb138:  // pred: ^bb135
    %c1_i32_401 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_401) : (i32) -> ()
    cf.br ^bb137
  ^bb139:  // 2 preds: ^bb137, ^bb140
    %764 = llvm.getelementptr %14[%758] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %765 = llvm.load volatile %764 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_402 = arith.constant 0 : i64
    %766 = arith.extui %753 : i32 to i64
    %767 = arith.addi %766, %c0_i64_402 : i64
    %c8_i64_403 = arith.constant 8 : i64
    %768 = arith.addi %767, %c8_i64_403 : i64
    %c0_i32_404 = arith.constant 0 : i32
    %769 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_404) : (!llvm.ptr, i32) -> i32
    %770 = arith.extui %769 : i32 to i64
    %c65536_i64_405 = arith.constant 65536 : i64
    %771 = arith.muli %770, %c65536_i64_405 : i64
    %772 = arith.cmpi ult, %768, %771 : i64
    cf.cond_br %772, ^bb141, ^bb142
  ^bb140:  // pred: ^bb137
    %c1_i32_406 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_406) : (i32) -> ()
    cf.br ^bb139
  ^bb141:  // 2 preds: ^bb139, ^bb142
    %773 = llvm.getelementptr %14[%767] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %765, %773 {alignment = 1 : i64} : i64, !llvm.ptr
    %774 = llvm.load %0 : !llvm.ptr -> i32
    %c40_i32 = arith.constant 40 : i32
    %775 = arith.addi %774, %c40_i32 : i32
    %776 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32_407 = arith.constant 64 : i32
    %777 = arith.addi %776, %c64_i32_407 : i32
    %c8_i32_408 = arith.constant 8 : i32
    %778 = arith.addi %777, %c8_i32_408 : i32
    %c0_i64_409 = arith.constant 0 : i64
    %779 = arith.extui %778 : i32 to i64
    %780 = arith.addi %779, %c0_i64_409 : i64
    %c8_i64_410 = arith.constant 8 : i64
    %781 = arith.addi %780, %c8_i64_410 : i64
    %c0_i32_411 = arith.constant 0 : i32
    %782 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_411) : (!llvm.ptr, i32) -> i32
    %783 = arith.extui %782 : i32 to i64
    %c65536_i64_412 = arith.constant 65536 : i64
    %784 = arith.muli %783, %c65536_i64_412 : i64
    %785 = arith.cmpi ult, %781, %784 : i64
    cf.cond_br %785, ^bb143, ^bb144
  ^bb142:  // pred: ^bb139
    %c1_i32_413 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_413) : (i32) -> ()
    cf.br ^bb141
  ^bb143:  // 2 preds: ^bb141, ^bb144
    %786 = llvm.getelementptr %14[%780] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %787 = llvm.load volatile %786 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_414 = arith.constant 0 : i64
    %788 = arith.extui %775 : i32 to i64
    %789 = arith.addi %788, %c0_i64_414 : i64
    %c8_i64_415 = arith.constant 8 : i64
    %790 = arith.addi %789, %c8_i64_415 : i64
    %c0_i32_416 = arith.constant 0 : i32
    %791 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_416) : (!llvm.ptr, i32) -> i32
    %792 = arith.extui %791 : i32 to i64
    %c65536_i64_417 = arith.constant 65536 : i64
    %793 = arith.muli %792, %c65536_i64_417 : i64
    %794 = arith.cmpi ult, %790, %793 : i64
    cf.cond_br %794, ^bb145, ^bb146
  ^bb144:  // pred: ^bb141
    %c1_i32_418 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_418) : (i32) -> ()
    cf.br ^bb143
  ^bb145:  // 2 preds: ^bb143, ^bb146
    %795 = llvm.getelementptr %14[%789] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %787, %795 {alignment = 1 : i64} : i64, !llvm.ptr
    %796 = llvm.load %0 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %797 = arith.addi %796, %c48_i32 : i32
    %798 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32_419 = arith.constant 64 : i32
    %799 = arith.addi %798, %c64_i32_419 : i32
    %c16_i32_420 = arith.constant 16 : i32
    %800 = arith.addi %799, %c16_i32_420 : i32
    %c0_i64_421 = arith.constant 0 : i64
    %801 = arith.extui %800 : i32 to i64
    %802 = arith.addi %801, %c0_i64_421 : i64
    %c8_i64_422 = arith.constant 8 : i64
    %803 = arith.addi %802, %c8_i64_422 : i64
    %c0_i32_423 = arith.constant 0 : i32
    %804 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_423) : (!llvm.ptr, i32) -> i32
    %805 = arith.extui %804 : i32 to i64
    %c65536_i64_424 = arith.constant 65536 : i64
    %806 = arith.muli %805, %c65536_i64_424 : i64
    %807 = arith.cmpi ult, %803, %806 : i64
    cf.cond_br %807, ^bb147, ^bb148
  ^bb146:  // pred: ^bb143
    %c1_i32_425 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_425) : (i32) -> ()
    cf.br ^bb145
  ^bb147:  // 2 preds: ^bb145, ^bb148
    %808 = llvm.getelementptr %14[%802] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %809 = llvm.load volatile %808 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_426 = arith.constant 0 : i64
    %810 = arith.extui %797 : i32 to i64
    %811 = arith.addi %810, %c0_i64_426 : i64
    %c8_i64_427 = arith.constant 8 : i64
    %812 = arith.addi %811, %c8_i64_427 : i64
    %c0_i32_428 = arith.constant 0 : i32
    %813 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_428) : (!llvm.ptr, i32) -> i32
    %814 = arith.extui %813 : i32 to i64
    %c65536_i64_429 = arith.constant 65536 : i64
    %815 = arith.muli %814, %c65536_i64_429 : i64
    %816 = arith.cmpi ult, %812, %815 : i64
    cf.cond_br %816, ^bb149, ^bb150
  ^bb148:  // pred: ^bb145
    %c1_i32_430 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_430) : (i32) -> ()
    cf.br ^bb147
  ^bb149:  // 2 preds: ^bb147, ^bb150
    %817 = llvm.getelementptr %14[%811] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %809, %817 {alignment = 1 : i64} : i64, !llvm.ptr
    %818 = llvm.load %0 : !llvm.ptr -> i32
    %c56_i32 = arith.constant 56 : i32
    %819 = arith.addi %818, %c56_i32 : i32
    %820 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32_431 = arith.constant 64 : i32
    %821 = arith.addi %820, %c64_i32_431 : i32
    %c24_i32_432 = arith.constant 24 : i32
    %822 = arith.addi %821, %c24_i32_432 : i32
    %c0_i64_433 = arith.constant 0 : i64
    %823 = arith.extui %822 : i32 to i64
    %824 = arith.addi %823, %c0_i64_433 : i64
    %c8_i64_434 = arith.constant 8 : i64
    %825 = arith.addi %824, %c8_i64_434 : i64
    %c0_i32_435 = arith.constant 0 : i32
    %826 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_435) : (!llvm.ptr, i32) -> i32
    %827 = arith.extui %826 : i32 to i64
    %c65536_i64_436 = arith.constant 65536 : i64
    %828 = arith.muli %827, %c65536_i64_436 : i64
    %829 = arith.cmpi ult, %825, %828 : i64
    cf.cond_br %829, ^bb151, ^bb152
  ^bb150:  // pred: ^bb147
    %c1_i32_437 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_437) : (i32) -> ()
    cf.br ^bb149
  ^bb151:  // 2 preds: ^bb149, ^bb152
    %830 = llvm.getelementptr %14[%824] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %831 = llvm.load volatile %830 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_438 = arith.constant 0 : i64
    %832 = arith.extui %819 : i32 to i64
    %833 = arith.addi %832, %c0_i64_438 : i64
    %c8_i64_439 = arith.constant 8 : i64
    %834 = arith.addi %833, %c8_i64_439 : i64
    %c0_i32_440 = arith.constant 0 : i32
    %835 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_440) : (!llvm.ptr, i32) -> i32
    %836 = arith.extui %835 : i32 to i64
    %c65536_i64_441 = arith.constant 65536 : i64
    %837 = arith.muli %836, %c65536_i64_441 : i64
    %838 = arith.cmpi ult, %834, %837 : i64
    cf.cond_br %838, ^bb153, ^bb154
  ^bb152:  // pred: ^bb149
    %c1_i32_442 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_442) : (i32) -> ()
    cf.br ^bb151
  ^bb153:  // 2 preds: ^bb151, ^bb154
    %839 = llvm.getelementptr %14[%833] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %831, %839 {alignment = 1 : i64} : i64, !llvm.ptr
    %840 = llvm.load %0 : !llvm.ptr -> i32
    %c72_i32 = arith.constant 72 : i32
    %841 = arith.addi %840, %c72_i32 : i32
    %842 = llvm.load %3 : !llvm.ptr -> i32
    %c96_i32_443 = arith.constant 96 : i32
    %843 = arith.addi %842, %c96_i32_443 : i32
    %c8_i32_444 = arith.constant 8 : i32
    %844 = arith.addi %843, %c8_i32_444 : i32
    %c0_i64_445 = arith.constant 0 : i64
    %845 = arith.extui %844 : i32 to i64
    %846 = arith.addi %845, %c0_i64_445 : i64
    %c8_i64_446 = arith.constant 8 : i64
    %847 = arith.addi %846, %c8_i64_446 : i64
    %c0_i32_447 = arith.constant 0 : i32
    %848 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_447) : (!llvm.ptr, i32) -> i32
    %849 = arith.extui %848 : i32 to i64
    %c65536_i64_448 = arith.constant 65536 : i64
    %850 = arith.muli %849, %c65536_i64_448 : i64
    %851 = arith.cmpi ult, %847, %850 : i64
    cf.cond_br %851, ^bb155, ^bb156
  ^bb154:  // pred: ^bb151
    %c1_i32_449 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_449) : (i32) -> ()
    cf.br ^bb153
  ^bb155:  // 2 preds: ^bb153, ^bb156
    %852 = llvm.getelementptr %14[%846] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %853 = llvm.load volatile %852 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_450 = arith.constant 0 : i64
    %854 = arith.extui %841 : i32 to i64
    %855 = arith.addi %854, %c0_i64_450 : i64
    %c8_i64_451 = arith.constant 8 : i64
    %856 = arith.addi %855, %c8_i64_451 : i64
    %c0_i32_452 = arith.constant 0 : i32
    %857 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_452) : (!llvm.ptr, i32) -> i32
    %858 = arith.extui %857 : i32 to i64
    %c65536_i64_453 = arith.constant 65536 : i64
    %859 = arith.muli %858, %c65536_i64_453 : i64
    %860 = arith.cmpi ult, %856, %859 : i64
    cf.cond_br %860, ^bb157, ^bb158
  ^bb156:  // pred: ^bb153
    %c1_i32_454 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_454) : (i32) -> ()
    cf.br ^bb155
  ^bb157:  // 2 preds: ^bb155, ^bb158
    %861 = llvm.getelementptr %14[%855] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %853, %861 {alignment = 1 : i64} : i64, !llvm.ptr
    %862 = llvm.load %0 : !llvm.ptr -> i32
    %c80_i32 = arith.constant 80 : i32
    %863 = arith.addi %862, %c80_i32 : i32
    %864 = llvm.load %3 : !llvm.ptr -> i32
    %c96_i32_455 = arith.constant 96 : i32
    %865 = arith.addi %864, %c96_i32_455 : i32
    %c16_i32_456 = arith.constant 16 : i32
    %866 = arith.addi %865, %c16_i32_456 : i32
    %c0_i64_457 = arith.constant 0 : i64
    %867 = arith.extui %866 : i32 to i64
    %868 = arith.addi %867, %c0_i64_457 : i64
    %c8_i64_458 = arith.constant 8 : i64
    %869 = arith.addi %868, %c8_i64_458 : i64
    %c0_i32_459 = arith.constant 0 : i32
    %870 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_459) : (!llvm.ptr, i32) -> i32
    %871 = arith.extui %870 : i32 to i64
    %c65536_i64_460 = arith.constant 65536 : i64
    %872 = arith.muli %871, %c65536_i64_460 : i64
    %873 = arith.cmpi ult, %869, %872 : i64
    cf.cond_br %873, ^bb159, ^bb160
  ^bb158:  // pred: ^bb155
    %c1_i32_461 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_461) : (i32) -> ()
    cf.br ^bb157
  ^bb159:  // 2 preds: ^bb157, ^bb160
    %874 = llvm.getelementptr %14[%868] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %875 = llvm.load volatile %874 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_462 = arith.constant 0 : i64
    %876 = arith.extui %863 : i32 to i64
    %877 = arith.addi %876, %c0_i64_462 : i64
    %c8_i64_463 = arith.constant 8 : i64
    %878 = arith.addi %877, %c8_i64_463 : i64
    %c0_i32_464 = arith.constant 0 : i32
    %879 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_464) : (!llvm.ptr, i32) -> i32
    %880 = arith.extui %879 : i32 to i64
    %c65536_i64_465 = arith.constant 65536 : i64
    %881 = arith.muli %880, %c65536_i64_465 : i64
    %882 = arith.cmpi ult, %878, %881 : i64
    cf.cond_br %882, ^bb161, ^bb162
  ^bb160:  // pred: ^bb157
    %c1_i32_466 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_466) : (i32) -> ()
    cf.br ^bb159
  ^bb161:  // 2 preds: ^bb159, ^bb162
    %883 = llvm.getelementptr %14[%877] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %875, %883 {alignment = 1 : i64} : i64, !llvm.ptr
    %884 = llvm.load %0 : !llvm.ptr -> i32
    %c88_i32 = arith.constant 88 : i32
    %885 = arith.addi %884, %c88_i32 : i32
    %886 = llvm.load %3 : !llvm.ptr -> i32
    %c96_i32_467 = arith.constant 96 : i32
    %887 = arith.addi %886, %c96_i32_467 : i32
    %c24_i32_468 = arith.constant 24 : i32
    %888 = arith.addi %887, %c24_i32_468 : i32
    %c0_i64_469 = arith.constant 0 : i64
    %889 = arith.extui %888 : i32 to i64
    %890 = arith.addi %889, %c0_i64_469 : i64
    %c8_i64_470 = arith.constant 8 : i64
    %891 = arith.addi %890, %c8_i64_470 : i64
    %c0_i32_471 = arith.constant 0 : i32
    %892 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_471) : (!llvm.ptr, i32) -> i32
    %893 = arith.extui %892 : i32 to i64
    %c65536_i64_472 = arith.constant 65536 : i64
    %894 = arith.muli %893, %c65536_i64_472 : i64
    %895 = arith.cmpi ult, %891, %894 : i64
    cf.cond_br %895, ^bb163, ^bb164
  ^bb162:  // pred: ^bb159
    %c1_i32_473 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_473) : (i32) -> ()
    cf.br ^bb161
  ^bb163:  // 2 preds: ^bb161, ^bb164
    %896 = llvm.getelementptr %14[%890] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %897 = llvm.load volatile %896 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_474 = arith.constant 0 : i64
    %898 = arith.extui %885 : i32 to i64
    %899 = arith.addi %898, %c0_i64_474 : i64
    %c8_i64_475 = arith.constant 8 : i64
    %900 = arith.addi %899, %c8_i64_475 : i64
    %c0_i32_476 = arith.constant 0 : i32
    %901 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_476) : (!llvm.ptr, i32) -> i32
    %902 = arith.extui %901 : i32 to i64
    %c65536_i64_477 = arith.constant 65536 : i64
    %903 = arith.muli %902, %c65536_i64_477 : i64
    %904 = arith.cmpi ult, %900, %903 : i64
    cf.cond_br %904, ^bb165, ^bb166
  ^bb164:  // pred: ^bb161
    %c1_i32_478 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_478) : (i32) -> ()
    cf.br ^bb163
  ^bb165:  // 2 preds: ^bb163, ^bb166
    %905 = llvm.getelementptr %14[%899] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %897, %905 {alignment = 1 : i64} : i64, !llvm.ptr
    %906 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_479 = arith.constant 0 : i32
    %c136_i64 = arith.constant 136 : i64
    %907 = arith.extui %906 : i32 to i64
    %908 = arith.addi %907, %c136_i64 : i64
    %c1_i64_480 = arith.constant 1 : i64
    %909 = arith.addi %908, %c1_i64_480 : i64
    %c0_i32_481 = arith.constant 0 : i32
    %910 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_481) : (!llvm.ptr, i32) -> i32
    %911 = arith.extui %910 : i32 to i64
    %c65536_i64_482 = arith.constant 65536 : i64
    %912 = arith.muli %911, %c65536_i64_482 : i64
    %913 = arith.cmpi ult, %909, %912 : i64
    cf.cond_br %913, ^bb167, ^bb168
  ^bb166:  // pred: ^bb163
    %c1_i32_483 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_483) : (i32) -> ()
    cf.br ^bb165
  ^bb167:  // 2 preds: ^bb165, ^bb168
    %914 = llvm.getelementptr %14[%908] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %915 = arith.trunci %c0_i32_479 : i32 to i8
    llvm.store volatile %915, %914 {alignment = 1 : i64} : i8, !llvm.ptr
    %916 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_484 = arith.constant 0 : i64
    %c96_i64_485 = arith.constant 96 : i64
    %917 = arith.extui %916 : i32 to i64
    %918 = arith.addi %917, %c96_i64_485 : i64
    %c8_i64_486 = arith.constant 8 : i64
    %919 = arith.addi %918, %c8_i64_486 : i64
    %c0_i32_487 = arith.constant 0 : i32
    %920 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_487) : (!llvm.ptr, i32) -> i32
    %921 = arith.extui %920 : i32 to i64
    %c65536_i64_488 = arith.constant 65536 : i64
    %922 = arith.muli %921, %c65536_i64_488 : i64
    %923 = arith.cmpi ult, %919, %922 : i64
    cf.cond_br %923, ^bb169, ^bb170
  ^bb168:  // pred: ^bb165
    %c1_i32_489 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_489) : (i32) -> ()
    cf.br ^bb167
  ^bb169:  // 2 preds: ^bb167, ^bb170
    %924 = llvm.getelementptr %14[%918] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_484, %924 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb2
  ^bb170:  // pred: ^bb167
    %c1_i32_490 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_490) : (i32) -> ()
    cf.br ^bb169
  }
  func.func public @mark_used(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @f52(%arg0) : (!llvm.ptr) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f52(%arg0: !llvm.ptr) {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1050200_i32 = arith.constant 1050200 : i32
    call @f152(%arg0, %c1050200_i32) : (!llvm.ptr, i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func public @user_entrypoint(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %11 = llvm.load %7 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %12 = arith.subi %11, %c48_i32 : i32
    llvm.store %12, %1 : i32, !llvm.ptr
    llvm.store %12, %7 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    llvm.store %c1_i32_5, %2 : i32, !llvm.ptr
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %c47_i32 = arith.constant 47 : i32
    %14 = arith.addi %13, %c47_i32 : i32
    %15 = call @f71(%arg0, %14) : (!llvm.ptr, i32) -> i32
    %c0_i32_6 = arith.constant 0 : i32
    %16 = arith.cmpi ne, %15, %c0_i32_6 : i32
    cf.cond_br %16, ^bb3, ^bb4
  ^bb2(%17: i32):  // pred: ^bb3
    return %17 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb19
    %18 = llvm.load %1 : !llvm.ptr -> i32
    %c48_i32_7 = arith.constant 48 : i32
    %19 = arith.addi %18, %c48_i32_7 : i32
    llvm.store %19, %7 : i32, !llvm.ptr
    %20 = llvm.load %2 : !llvm.ptr -> i32
    cf.br ^bb2(%20 : i32)
  ^bb4:  // pred: ^bb1
    %21 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %22 = arith.addi %21, %c4_i32 : i32
    %23 = llvm.load %1 : !llvm.ptr -> i32
    %c47_i32_8 = arith.constant 47 : i32
    %24 = arith.addi %23, %c47_i32_8 : i32
    %25 = llvm.load %1 : !llvm.ptr -> i32
    %c47_i32_9 = arith.constant 47 : i32
    %26 = arith.addi %25, %c47_i32_9 : i32
    %27 = call @f80(%arg0, %26) : (!llvm.ptr, i32) -> i32
    call @f68(%arg0, %22, %24, %27) : (!llvm.ptr, i32, i32, i32) -> ()
    %c0_i32_10 = arith.constant 0 : i32
    llvm.store %c0_i32_10, %2 : i32, !llvm.ptr
    %28 = llvm.load %1 : !llvm.ptr -> i32
    %c28_i32 = arith.constant 28 : i32
    %29 = arith.addi %28, %c28_i32 : i32
    %30 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32_11 = arith.constant 4 : i32
    %31 = arith.addi %30, %c4_i32_11 : i32
    %c0_i32_12 = arith.constant 0 : i32
    call @f1(%arg0, %29, %31, %c0_i32_12) : (!llvm.ptr, i32, i32, i32) -> ()
    %32 = llvm.load %1 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %33 = arith.extui %32 : i32 to i64
    %34 = arith.addi %33, %c28_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %35 = arith.addi %34, %c4_i64 : i64
    %c0_i32_13 = arith.constant 0 : i32
    %36 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_13) : (!llvm.ptr, i32) -> i32
    %37 = arith.extui %36 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %38 = arith.muli %37, %c65536_i64 : i64
    %39 = arith.cmpi ult, %35, %38 : i64
    cf.cond_br %39, ^bb5, ^bb6
  ^bb5:  // 2 preds: ^bb4, ^bb6
    %40 = llvm.getelementptr %10[%34] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %41 = llvm.load volatile %40 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %41, %3 : i32, !llvm.ptr
    %42 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %43 = arith.addi %42, %c24_i32 : i32
    llvm.store %43, %4 : i32, !llvm.ptr
    %44 = llvm.load %1 : !llvm.ptr -> i32
    %c40_i32 = arith.constant 40 : i32
    %45 = arith.addi %44, %c40_i32 : i32
    %c0_i64 = arith.constant 0 : i64
    %46 = arith.extui %45 : i32 to i64
    %47 = arith.addi %46, %c0_i64 : i64
    %c4_i64_14 = arith.constant 4 : i64
    %48 = arith.addi %47, %c4_i64_14 : i64
    %c0_i32_15 = arith.constant 0 : i32
    %49 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_15) : (!llvm.ptr, i32) -> i32
    %50 = arith.extui %49 : i32 to i64
    %c65536_i64_16 = arith.constant 65536 : i64
    %51 = arith.muli %50, %c65536_i64_16 : i64
    %52 = arith.cmpi ult, %48, %51 : i64
    cf.cond_br %52, ^bb7, ^bb8
  ^bb6:  // pred: ^bb4
    %c1_i32_17 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_17) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %53 = llvm.getelementptr %10[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %54 = llvm.load volatile %53 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_18 = arith.constant 0 : i64
    %55 = arith.extui %43 : i32 to i64
    %56 = arith.addi %55, %c0_i64_18 : i64
    %c4_i64_19 = arith.constant 4 : i64
    %57 = arith.addi %56, %c4_i64_19 : i64
    %c0_i32_20 = arith.constant 0 : i32
    %58 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_20) : (!llvm.ptr, i32) -> i32
    %59 = arith.extui %58 : i32 to i64
    %c65536_i64_21 = arith.constant 65536 : i64
    %60 = arith.muli %59, %c65536_i64_21 : i64
    %61 = arith.cmpi ult, %57, %60 : i64
    cf.cond_br %61, ^bb9, ^bb10
  ^bb8:  // pred: ^bb5
    %c1_i32_22 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_22) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %62 = llvm.getelementptr %10[%56] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %54, %62 {alignment = 1 : i64} : i32, !llvm.ptr
    %63 = llvm.load %1 : !llvm.ptr -> i32
    %64 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i64 = arith.constant 32 : i64
    %65 = arith.extui %64 : i32 to i64
    %66 = arith.addi %65, %c32_i64 : i64
    %c8_i64 = arith.constant 8 : i64
    %67 = arith.addi %66, %c8_i64 : i64
    %c0_i32_23 = arith.constant 0 : i32
    %68 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_23) : (!llvm.ptr, i32) -> i32
    %69 = arith.extui %68 : i32 to i64
    %c65536_i64_24 = arith.constant 65536 : i64
    %70 = arith.muli %69, %c65536_i64_24 : i64
    %71 = arith.cmpi ult, %67, %70 : i64
    cf.cond_br %71, ^bb11, ^bb12
  ^bb10:  // pred: ^bb7
    %c1_i32_25 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_25) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %72 = llvm.getelementptr %10[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %73 = llvm.load volatile %72 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c16_i64 = arith.constant 16 : i64
    %74 = arith.extui %63 : i32 to i64
    %75 = arith.addi %74, %c16_i64 : i64
    %c8_i64_26 = arith.constant 8 : i64
    %76 = arith.addi %75, %c8_i64_26 : i64
    %c0_i32_27 = arith.constant 0 : i32
    %77 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_27) : (!llvm.ptr, i32) -> i32
    %78 = arith.extui %77 : i32 to i64
    %c65536_i64_28 = arith.constant 65536 : i64
    %79 = arith.muli %78, %c65536_i64_28 : i64
    %80 = arith.cmpi ult, %76, %79 : i64
    cf.cond_br %80, ^bb13, ^bb14
  ^bb12:  // pred: ^bb9
    %c1_i32_29 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_29) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %81 = llvm.getelementptr %10[%75] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %73, %81 {alignment = 1 : i64} : i64, !llvm.ptr
    %82 = llvm.load %1 : !llvm.ptr -> i32
    %c47_i32_30 = arith.constant 47 : i32
    %83 = arith.addi %82, %c47_i32_30 : i32
    %c0_i32_31 = arith.constant 0 : i32
    call @f70(%arg0, %83, %c0_i32_31) : (!llvm.ptr, i32, i32) -> ()
    %84 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_32 = arith.constant 0 : i64
    %85 = arith.extui %84 : i32 to i64
    %86 = arith.addi %85, %c0_i64_32 : i64
    %c4_i64_33 = arith.constant 4 : i64
    %87 = arith.addi %86, %c4_i64_33 : i64
    %c0_i32_34 = arith.constant 0 : i32
    %88 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_34) : (!llvm.ptr, i32) -> i32
    %89 = arith.extui %88 : i32 to i64
    %c65536_i64_35 = arith.constant 65536 : i64
    %90 = arith.muli %89, %c65536_i64_35 : i64
    %91 = arith.cmpi ult, %87, %90 : i64
    cf.cond_br %91, ^bb15, ^bb16
  ^bb14:  // pred: ^bb11
    %c1_i32_36 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_36) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // 2 preds: ^bb13, ^bb16
    %92 = llvm.getelementptr %10[%86] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %93 = llvm.load volatile %92 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %93, %4 : i32, !llvm.ptr
    %94 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %95 = arith.extui %94 : i32 to i64
    %96 = arith.addi %95, %c20_i64 : i64
    %c4_i64_37 = arith.constant 4 : i64
    %97 = arith.addi %96, %c4_i64_37 : i64
    %c0_i32_38 = arith.constant 0 : i32
    %98 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_38) : (!llvm.ptr, i32) -> i32
    %99 = arith.extui %98 : i32 to i64
    %c65536_i64_39 = arith.constant 65536 : i64
    %100 = arith.muli %99, %c65536_i64_39 : i64
    %101 = arith.cmpi ult, %97, %100 : i64
    cf.cond_br %101, ^bb17, ^bb18
  ^bb16:  // pred: ^bb13
    %c1_i32_40 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_40) : (i32) -> ()
    cf.br ^bb15
  ^bb17:  // 2 preds: ^bb15, ^bb18
    %102 = llvm.getelementptr %10[%96] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %103 = llvm.load volatile %102 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %103, %5 : i32, !llvm.ptr
    %104 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_41 = arith.constant 0 : i32
    %105 = arith.cmpi ne, %104, %c0_i32_41 : i32
    cf.cond_br %105, ^bb20, ^bb21
  ^bb18:  // pred: ^bb15
    %c1_i32_42 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_42) : (i32) -> ()
    cf.br ^bb17
  ^bb19:  // 2 preds: ^bb20, ^bb21
    %106 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %107 = arith.addi %106, %c16_i32 : i32
    call @f112(%arg0, %107) : (!llvm.ptr, i32) -> ()
    %108 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32_43 = arith.constant 16 : i32
    %109 = arith.addi %108, %c16_i32_43 : i32
    call @f113(%arg0, %109) : (!llvm.ptr, i32) -> ()
    cf.br ^bb3
  ^bb20:  // pred: ^bb17
    %110 = llvm.load %5 : !llvm.ptr -> i32
    %111 = llvm.load %4 : !llvm.ptr -> i32
    call @f65(%arg0, %110, %111) : (!llvm.ptr, i32, i32) -> ()
    %c1_i32_44 = arith.constant 1 : i32
    llvm.store %c1_i32_44, %2 : i32, !llvm.ptr
    cf.br ^bb19
  ^bb21:  // pred: ^bb17
    %112 = llvm.load %5 : !llvm.ptr -> i32
    %113 = llvm.load %4 : !llvm.ptr -> i32
    call @f64(%arg0, %112, %113) : (!llvm.ptr, i32, i32) -> ()
    cf.br ^bb19
  }
  func.func public @call(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %0 = call @user_entrypoint(%arg0, %c0_i32) : (!llvm.ptr, i32) -> i32
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func public @deploy(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f56(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = llvm.load %1 : !llvm.ptr -> i32
    call @f140(%arg0, %2, %3) : (!llvm.ptr, i32, i32) -> ()
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f57(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.getelementptr %9[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %14 = llvm.load %5 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %15 = arith.subi %14, %c32_i32 : i32
    llvm.store %15, %1 : i32, !llvm.ptr
    llvm.store %15, %5 : i32, !llvm.ptr
    %16 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %17 = arith.addi %16, %c8_i32 : i32
    %c16_i32 = arith.constant 16 : i32
    %18 = arith.addi %17, %c16_i32 : i32
    llvm.store %18, %2 : i32, !llvm.ptr
    %c0_i32_3 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %19 = arith.extui %18 : i32 to i64
    %20 = arith.addi %19, %c0_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %21 = arith.addi %20, %c4_i64 : i64
    %c0_i32_4 = arith.constant 0 : i32
    %22 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_4) : (!llvm.ptr, i32) -> i32
    %23 = arith.extui %22 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %24 = arith.muli %23, %c65536_i64 : i64
    %25 = arith.cmpi ult, %21, %24 : i64
    cf.cond_br %25, ^bb3, ^bb4
  ^bb2:  // pred: ^bb19
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %26 = llvm.getelementptr %8[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_3, %26 {alignment = 1 : i64} : i32, !llvm.ptr
    %27 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_5 = arith.constant 8 : i32
    %28 = arith.addi %27, %c8_i32_5 : i32
    %c8_i32_6 = arith.constant 8 : i32
    %29 = arith.addi %28, %c8_i32_6 : i32
    llvm.store %29, %3 : i32, !llvm.ptr
    %c0_i64_7 = arith.constant 0 : i64
    %c0_i64_8 = arith.constant 0 : i64
    %30 = arith.extui %29 : i32 to i64
    %31 = arith.addi %30, %c0_i64_8 : i64
    %c8_i64 = arith.constant 8 : i64
    %32 = arith.addi %31, %c8_i64 : i64
    %c0_i32_9 = arith.constant 0 : i32
    %33 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_9) : (!llvm.ptr, i32) -> i32
    %34 = arith.extui %33 : i32 to i64
    %c65536_i64_10 = arith.constant 65536 : i64
    %35 = arith.muli %34, %c65536_i64_10 : i64
    %36 = arith.cmpi ult, %32, %35 : i64
    cf.cond_br %36, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c1_i32_11 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_11) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %37 = llvm.getelementptr %8[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_7, %37 {alignment = 1 : i64} : i64, !llvm.ptr
    %38 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_12 = arith.constant 0 : i64
    %c8_i64_13 = arith.constant 8 : i64
    %39 = arith.extui %38 : i32 to i64
    %40 = arith.addi %39, %c8_i64_13 : i64
    %c8_i64_14 = arith.constant 8 : i64
    %41 = arith.addi %40, %c8_i64_14 : i64
    %c0_i32_15 = arith.constant 0 : i32
    %42 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_15) : (!llvm.ptr, i32) -> i32
    %43 = arith.extui %42 : i32 to i64
    %c65536_i64_16 = arith.constant 65536 : i64
    %44 = arith.muli %43, %c65536_i64_16 : i64
    %45 = arith.cmpi ult, %41, %44 : i64
    cf.cond_br %45, ^bb7, ^bb8
  ^bb6:  // pred: ^bb3
    %c1_i32_17 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_17) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %46 = llvm.getelementptr %8[%40] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_12, %46 {alignment = 1 : i64} : i64, !llvm.ptr
    %47 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_18 = arith.constant 8 : i32
    %48 = arith.addi %47, %c8_i32_18 : i32
    %49 = llvm.call %11(%13, %48) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> !llvm.void
    %50 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_19 = arith.constant 16 : i32
    %51 = arith.addi %50, %c16_i32_19 : i32
    %52 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_20 = arith.constant 0 : i64
    %53 = arith.extui %52 : i32 to i64
    %54 = arith.addi %53, %c0_i64_20 : i64
    %c4_i64_21 = arith.constant 4 : i64
    %55 = arith.addi %54, %c4_i64_21 : i64
    %c0_i32_22 = arith.constant 0 : i32
    %56 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_22) : (!llvm.ptr, i32) -> i32
    %57 = arith.extui %56 : i32 to i64
    %c65536_i64_23 = arith.constant 65536 : i64
    %58 = arith.muli %57, %c65536_i64_23 : i64
    %59 = arith.cmpi ult, %55, %58 : i64
    cf.cond_br %59, ^bb9, ^bb10
  ^bb8:  // pred: ^bb5
    %c1_i32_24 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_24) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %60 = llvm.getelementptr %8[%54] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %61 = llvm.load volatile %60 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_25 = arith.constant 0 : i64
    %62 = arith.extui %51 : i32 to i64
    %63 = arith.addi %62, %c0_i64_25 : i64
    %c4_i64_26 = arith.constant 4 : i64
    %64 = arith.addi %63, %c4_i64_26 : i64
    %c0_i32_27 = arith.constant 0 : i32
    %65 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_27) : (!llvm.ptr, i32) -> i32
    %66 = arith.extui %65 : i32 to i64
    %c65536_i64_28 = arith.constant 65536 : i64
    %67 = arith.muli %66, %c65536_i64_28 : i64
    %68 = arith.cmpi ult, %64, %67 : i64
    cf.cond_br %68, ^bb11, ^bb12
  ^bb10:  // pred: ^bb7
    %c1_i32_29 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_29) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %69 = llvm.getelementptr %8[%63] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %61, %69 {alignment = 1 : i64} : i32, !llvm.ptr
    %70 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_30 = arith.constant 8 : i32
    %71 = arith.addi %70, %c8_i32_30 : i32
    %72 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_31 = arith.constant 0 : i64
    %73 = arith.extui %72 : i32 to i64
    %74 = arith.addi %73, %c0_i64_31 : i64
    %c8_i64_32 = arith.constant 8 : i64
    %75 = arith.addi %74, %c8_i64_32 : i64
    %c0_i32_33 = arith.constant 0 : i32
    %76 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_33) : (!llvm.ptr, i32) -> i32
    %77 = arith.extui %76 : i32 to i64
    %c65536_i64_34 = arith.constant 65536 : i64
    %78 = arith.muli %77, %c65536_i64_34 : i64
    %79 = arith.cmpi ult, %75, %78 : i64
    cf.cond_br %79, ^bb13, ^bb14
  ^bb12:  // pred: ^bb9
    %c1_i32_35 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_35) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %80 = llvm.getelementptr %8[%74] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %81 = llvm.load volatile %80 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_36 = arith.constant 0 : i64
    %82 = arith.extui %71 : i32 to i64
    %83 = arith.addi %82, %c0_i64_36 : i64
    %c8_i64_37 = arith.constant 8 : i64
    %84 = arith.addi %83, %c8_i64_37 : i64
    %c0_i32_38 = arith.constant 0 : i32
    %85 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_38) : (!llvm.ptr, i32) -> i32
    %86 = arith.extui %85 : i32 to i64
    %c65536_i64_39 = arith.constant 65536 : i64
    %87 = arith.muli %86, %c65536_i64_39 : i64
    %88 = arith.cmpi ult, %84, %87 : i64
    cf.cond_br %88, ^bb15, ^bb16
  ^bb14:  // pred: ^bb11
    %c1_i32_40 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_40) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // 2 preds: ^bb13, ^bb16
    %89 = llvm.getelementptr %8[%83] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %81, %89 {alignment = 1 : i64} : i64, !llvm.ptr
    %90 = llvm.load %0 : !llvm.ptr -> i32
    %91 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64_41 = arith.constant 8 : i64
    %92 = arith.extui %91 : i32 to i64
    %93 = arith.addi %92, %c8_i64_41 : i64
    %c8_i64_42 = arith.constant 8 : i64
    %94 = arith.addi %93, %c8_i64_42 : i64
    %c0_i32_43 = arith.constant 0 : i32
    %95 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_43) : (!llvm.ptr, i32) -> i32
    %96 = arith.extui %95 : i32 to i64
    %c65536_i64_44 = arith.constant 65536 : i64
    %97 = arith.muli %96, %c65536_i64_44 : i64
    %98 = arith.cmpi ult, %94, %97 : i64
    cf.cond_br %98, ^bb17, ^bb18
  ^bb16:  // pred: ^bb13
    %c1_i32_45 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_45) : (i32) -> ()
    cf.br ^bb15
  ^bb17:  // 2 preds: ^bb15, ^bb18
    %99 = llvm.getelementptr %8[%93] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %100 = llvm.load volatile %99 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_46 = arith.constant 0 : i64
    %101 = arith.extui %90 : i32 to i64
    %102 = arith.addi %101, %c0_i64_46 : i64
    %c8_i64_47 = arith.constant 8 : i64
    %103 = arith.addi %102, %c8_i64_47 : i64
    %c0_i32_48 = arith.constant 0 : i32
    %104 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_48) : (!llvm.ptr, i32) -> i32
    %105 = arith.extui %104 : i32 to i64
    %c65536_i64_49 = arith.constant 65536 : i64
    %106 = arith.muli %105, %c65536_i64_49 : i64
    %107 = arith.cmpi ult, %103, %106 : i64
    cf.cond_br %107, ^bb19, ^bb20
  ^bb18:  // pred: ^bb15
    %c1_i32_50 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_50) : (i32) -> ()
    cf.br ^bb17
  ^bb19:  // 2 preds: ^bb17, ^bb20
    %108 = llvm.getelementptr %8[%102] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %100, %108 {alignment = 1 : i64} : i64, !llvm.ptr
    %109 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i32_51 = arith.constant 32 : i32
    %110 = arith.addi %109, %c32_i32_51 : i32
    llvm.store %110, %5 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb20:  // pred: ^bb17
    %c1_i32_52 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_52) : (i32) -> ()
    cf.br ^bb19
  }
  func.func @f58(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %6 : i64, !llvm.ptr
    %7 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.getelementptr %arg0[88] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.getelementptr %12[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %15 = llvm.getelementptr %12[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %17 = llvm.load %8 : !llvm.ptr -> i32
    %c96_i32 = arith.constant 96 : i32
    %18 = arith.subi %17, %c96_i32 : i32
    llvm.store %18, %1 : i32, !llvm.ptr
    llvm.store %18, %8 : i32, !llvm.ptr
    %c24_i32 = arith.constant 24 : i32
    llvm.store %c24_i32, %2 : i32, !llvm.ptr
    %19 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i32_6 = arith.constant 24 : i32
    %20 = arith.addi %19, %c24_i32_6 : i32
    llvm.store %20, %3 : i32, !llvm.ptr
    %c0_i64_7 = arith.constant 0 : i64
    %c0_i64_8 = arith.constant 0 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c0_i64_8 : i64
    %c8_i64 = arith.constant 8 : i64
    %23 = arith.addi %22, %c8_i64 : i64
    %c0_i32_9 = arith.constant 0 : i32
    %24 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_9) : (!llvm.ptr, i32) -> i32
    %25 = arith.extui %24 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %26 = arith.muli %25, %c65536_i64 : i64
    %27 = arith.cmpi ult, %23, %26 : i64
    cf.cond_br %27, ^bb3, ^bb4
  ^bb2:  // pred: ^bb56
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %28 = llvm.getelementptr %11[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_7, %28 {alignment = 1 : i64} : i64, !llvm.ptr
    %29 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %30 = arith.addi %29, %c16_i32 : i32
    llvm.store %30, %4 : i32, !llvm.ptr
    %c0_i64_10 = arith.constant 0 : i64
    %c0_i64_11 = arith.constant 0 : i64
    %31 = arith.extui %30 : i32 to i64
    %32 = arith.addi %31, %c0_i64_11 : i64
    %c8_i64_12 = arith.constant 8 : i64
    %33 = arith.addi %32, %c8_i64_12 : i64
    %c0_i32_13 = arith.constant 0 : i32
    %34 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_13) : (!llvm.ptr, i32) -> i32
    %35 = arith.extui %34 : i32 to i64
    %c65536_i64_14 = arith.constant 65536 : i64
    %36 = arith.muli %35, %c65536_i64_14 : i64
    %37 = arith.cmpi ult, %33, %36 : i64
    cf.cond_br %37, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c1_i32_15 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_15) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %38 = llvm.getelementptr %11[%32] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_10, %38 {alignment = 1 : i64} : i64, !llvm.ptr
    %39 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %40 = arith.addi %39, %c8_i32 : i32
    llvm.store %40, %5 : i32, !llvm.ptr
    %c0_i64_16 = arith.constant 0 : i64
    %c0_i64_17 = arith.constant 0 : i64
    %41 = arith.extui %40 : i32 to i64
    %42 = arith.addi %41, %c0_i64_17 : i64
    %c8_i64_18 = arith.constant 8 : i64
    %43 = arith.addi %42, %c8_i64_18 : i64
    %c0_i32_19 = arith.constant 0 : i32
    %44 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_19) : (!llvm.ptr, i32) -> i32
    %45 = arith.extui %44 : i32 to i64
    %c65536_i64_20 = arith.constant 65536 : i64
    %46 = arith.muli %45, %c65536_i64_20 : i64
    %47 = arith.cmpi ult, %43, %46 : i64
    cf.cond_br %47, ^bb7, ^bb8
  ^bb6:  // pred: ^bb3
    %c1_i32_21 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_21) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %48 = llvm.getelementptr %11[%42] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_16, %48 {alignment = 1 : i64} : i64, !llvm.ptr
    %49 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_22 = arith.constant 0 : i64
    %c0_i64_23 = arith.constant 0 : i64
    %50 = arith.extui %49 : i32 to i64
    %51 = arith.addi %50, %c0_i64_23 : i64
    %c8_i64_24 = arith.constant 8 : i64
    %52 = arith.addi %51, %c8_i64_24 : i64
    %c0_i32_25 = arith.constant 0 : i32
    %53 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_25) : (!llvm.ptr, i32) -> i32
    %54 = arith.extui %53 : i32 to i64
    %c65536_i64_26 = arith.constant 65536 : i64
    %55 = arith.muli %54, %c65536_i64_26 : i64
    %56 = arith.cmpi ult, %52, %55 : i64
    cf.cond_br %56, ^bb9, ^bb10
  ^bb8:  // pred: ^bb5
    %c1_i32_27 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_27) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %57 = llvm.getelementptr %11[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_22, %57 {alignment = 1 : i64} : i64, !llvm.ptr
    %58 = llvm.load %1 : !llvm.ptr -> i32
    %59 = llvm.call %14(%16, %58) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> !llvm.void
    %60 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %61 = arith.addi %60, %c32_i32 : i32
    %c24_i32_28 = arith.constant 24 : i32
    %62 = arith.addi %61, %c24_i32_28 : i32
    %63 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_29 = arith.constant 0 : i64
    %64 = arith.extui %63 : i32 to i64
    %65 = arith.addi %64, %c0_i64_29 : i64
    %c8_i64_30 = arith.constant 8 : i64
    %66 = arith.addi %65, %c8_i64_30 : i64
    %c0_i32_31 = arith.constant 0 : i32
    %67 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_31) : (!llvm.ptr, i32) -> i32
    %68 = arith.extui %67 : i32 to i64
    %c65536_i64_32 = arith.constant 65536 : i64
    %69 = arith.muli %68, %c65536_i64_32 : i64
    %70 = arith.cmpi ult, %66, %69 : i64
    cf.cond_br %70, ^bb11, ^bb12
  ^bb10:  // pred: ^bb7
    %c1_i32_33 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_33) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %71 = llvm.getelementptr %11[%65] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %72 = llvm.load volatile %71 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_34 = arith.constant 0 : i64
    %73 = arith.extui %62 : i32 to i64
    %74 = arith.addi %73, %c0_i64_34 : i64
    %c8_i64_35 = arith.constant 8 : i64
    %75 = arith.addi %74, %c8_i64_35 : i64
    %c0_i32_36 = arith.constant 0 : i32
    %76 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_36) : (!llvm.ptr, i32) -> i32
    %77 = arith.extui %76 : i32 to i64
    %c65536_i64_37 = arith.constant 65536 : i64
    %78 = arith.muli %77, %c65536_i64_37 : i64
    %79 = arith.cmpi ult, %75, %78 : i64
    cf.cond_br %79, ^bb13, ^bb14
  ^bb12:  // pred: ^bb9
    %c1_i32_38 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_38) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %80 = llvm.getelementptr %11[%74] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %72, %80 {alignment = 1 : i64} : i64, !llvm.ptr
    %81 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i32_39 = arith.constant 32 : i32
    %82 = arith.addi %81, %c32_i32_39 : i32
    %c16_i32_40 = arith.constant 16 : i32
    %83 = arith.addi %82, %c16_i32_40 : i32
    %84 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_41 = arith.constant 0 : i64
    %85 = arith.extui %84 : i32 to i64
    %86 = arith.addi %85, %c0_i64_41 : i64
    %c8_i64_42 = arith.constant 8 : i64
    %87 = arith.addi %86, %c8_i64_42 : i64
    %c0_i32_43 = arith.constant 0 : i32
    %88 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_43) : (!llvm.ptr, i32) -> i32
    %89 = arith.extui %88 : i32 to i64
    %c65536_i64_44 = arith.constant 65536 : i64
    %90 = arith.muli %89, %c65536_i64_44 : i64
    %91 = arith.cmpi ult, %87, %90 : i64
    cf.cond_br %91, ^bb15, ^bb16
  ^bb14:  // pred: ^bb11
    %c1_i32_45 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_45) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // 2 preds: ^bb13, ^bb16
    %92 = llvm.getelementptr %11[%86] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %93 = llvm.load volatile %92 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_46 = arith.constant 0 : i64
    %94 = arith.extui %83 : i32 to i64
    %95 = arith.addi %94, %c0_i64_46 : i64
    %c8_i64_47 = arith.constant 8 : i64
    %96 = arith.addi %95, %c8_i64_47 : i64
    %c0_i32_48 = arith.constant 0 : i32
    %97 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_48) : (!llvm.ptr, i32) -> i32
    %98 = arith.extui %97 : i32 to i64
    %c65536_i64_49 = arith.constant 65536 : i64
    %99 = arith.muli %98, %c65536_i64_49 : i64
    %100 = arith.cmpi ult, %96, %99 : i64
    cf.cond_br %100, ^bb17, ^bb18
  ^bb16:  // pred: ^bb13
    %c1_i32_50 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_50) : (i32) -> ()
    cf.br ^bb15
  ^bb17:  // 2 preds: ^bb15, ^bb18
    %101 = llvm.getelementptr %11[%95] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %93, %101 {alignment = 1 : i64} : i64, !llvm.ptr
    %102 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i32_51 = arith.constant 32 : i32
    %103 = arith.addi %102, %c32_i32_51 : i32
    %c8_i32_52 = arith.constant 8 : i32
    %104 = arith.addi %103, %c8_i32_52 : i32
    %105 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64_53 = arith.constant 0 : i64
    %106 = arith.extui %105 : i32 to i64
    %107 = arith.addi %106, %c0_i64_53 : i64
    %c8_i64_54 = arith.constant 8 : i64
    %108 = arith.addi %107, %c8_i64_54 : i64
    %c0_i32_55 = arith.constant 0 : i32
    %109 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_55) : (!llvm.ptr, i32) -> i32
    %110 = arith.extui %109 : i32 to i64
    %c65536_i64_56 = arith.constant 65536 : i64
    %111 = arith.muli %110, %c65536_i64_56 : i64
    %112 = arith.cmpi ult, %108, %111 : i64
    cf.cond_br %112, ^bb19, ^bb20
  ^bb18:  // pred: ^bb15
    %c1_i32_57 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_57) : (i32) -> ()
    cf.br ^bb17
  ^bb19:  // 2 preds: ^bb17, ^bb20
    %113 = llvm.getelementptr %11[%107] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %114 = llvm.load volatile %113 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_58 = arith.constant 0 : i64
    %115 = arith.extui %104 : i32 to i64
    %116 = arith.addi %115, %c0_i64_58 : i64
    %c8_i64_59 = arith.constant 8 : i64
    %117 = arith.addi %116, %c8_i64_59 : i64
    %c0_i32_60 = arith.constant 0 : i32
    %118 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_60) : (!llvm.ptr, i32) -> i32
    %119 = arith.extui %118 : i32 to i64
    %c65536_i64_61 = arith.constant 65536 : i64
    %120 = arith.muli %119, %c65536_i64_61 : i64
    %121 = arith.cmpi ult, %117, %120 : i64
    cf.cond_br %121, ^bb21, ^bb22
  ^bb20:  // pred: ^bb17
    %c1_i32_62 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_62) : (i32) -> ()
    cf.br ^bb19
  ^bb21:  // 2 preds: ^bb19, ^bb22
    %122 = llvm.getelementptr %11[%116] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %114, %122 {alignment = 1 : i64} : i64, !llvm.ptr
    %123 = llvm.load %1 : !llvm.ptr -> i32
    %124 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_63 = arith.constant 0 : i64
    %125 = arith.extui %124 : i32 to i64
    %126 = arith.addi %125, %c0_i64_63 : i64
    %c8_i64_64 = arith.constant 8 : i64
    %127 = arith.addi %126, %c8_i64_64 : i64
    %c0_i32_65 = arith.constant 0 : i32
    %128 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_65) : (!llvm.ptr, i32) -> i32
    %129 = arith.extui %128 : i32 to i64
    %c65536_i64_66 = arith.constant 65536 : i64
    %130 = arith.muli %129, %c65536_i64_66 : i64
    %131 = arith.cmpi ult, %127, %130 : i64
    cf.cond_br %131, ^bb23, ^bb24
  ^bb22:  // pred: ^bb19
    %c1_i32_67 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_67) : (i32) -> ()
    cf.br ^bb21
  ^bb23:  // 2 preds: ^bb21, ^bb24
    %132 = llvm.getelementptr %11[%126] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %133 = llvm.load volatile %132 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c32_i64 = arith.constant 32 : i64
    %134 = arith.extui %123 : i32 to i64
    %135 = arith.addi %134, %c32_i64 : i64
    %c8_i64_68 = arith.constant 8 : i64
    %136 = arith.addi %135, %c8_i64_68 : i64
    %c0_i32_69 = arith.constant 0 : i32
    %137 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_69) : (!llvm.ptr, i32) -> i32
    %138 = arith.extui %137 : i32 to i64
    %c65536_i64_70 = arith.constant 65536 : i64
    %139 = arith.muli %138, %c65536_i64_70 : i64
    %140 = arith.cmpi ult, %136, %139 : i64
    cf.cond_br %140, ^bb25, ^bb26
  ^bb24:  // pred: ^bb21
    %c1_i32_71 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_71) : (i32) -> ()
    cf.br ^bb23
  ^bb25:  // 2 preds: ^bb23, ^bb26
    %141 = llvm.getelementptr %11[%135] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %133, %141 {alignment = 1 : i64} : i64, !llvm.ptr
    %142 = llvm.load %1 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %143 = arith.addi %142, %c64_i32 : i32
    %c24_i32_72 = arith.constant 24 : i32
    %144 = arith.addi %143, %c24_i32_72 : i32
    %c0_i64_73 = arith.constant 0 : i64
    %c0_i64_74 = arith.constant 0 : i64
    %145 = arith.extui %144 : i32 to i64
    %146 = arith.addi %145, %c0_i64_74 : i64
    %c8_i64_75 = arith.constant 8 : i64
    %147 = arith.addi %146, %c8_i64_75 : i64
    %c0_i32_76 = arith.constant 0 : i32
    %148 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_76) : (!llvm.ptr, i32) -> i32
    %149 = arith.extui %148 : i32 to i64
    %c65536_i64_77 = arith.constant 65536 : i64
    %150 = arith.muli %149, %c65536_i64_77 : i64
    %151 = arith.cmpi ult, %147, %150 : i64
    cf.cond_br %151, ^bb27, ^bb28
  ^bb26:  // pred: ^bb23
    %c1_i32_78 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_78) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // 2 preds: ^bb25, ^bb28
    %152 = llvm.getelementptr %11[%146] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_73, %152 {alignment = 1 : i64} : i64, !llvm.ptr
    %153 = llvm.load %1 : !llvm.ptr -> i32
    %c64_i32_79 = arith.constant 64 : i32
    %154 = arith.addi %153, %c64_i32_79 : i32
    %c16_i32_80 = arith.constant 16 : i32
    %155 = arith.addi %154, %c16_i32_80 : i32
    %c0_i64_81 = arith.constant 0 : i64
    %c0_i64_82 = arith.constant 0 : i64
    %156 = arith.extui %155 : i32 to i64
    %157 = arith.addi %156, %c0_i64_82 : i64
    %c8_i64_83 = arith.constant 8 : i64
    %158 = arith.addi %157, %c8_i64_83 : i64
    %c0_i32_84 = arith.constant 0 : i32
    %159 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_84) : (!llvm.ptr, i32) -> i32
    %160 = arith.extui %159 : i32 to i64
    %c65536_i64_85 = arith.constant 65536 : i64
    %161 = arith.muli %160, %c65536_i64_85 : i64
    %162 = arith.cmpi ult, %158, %161 : i64
    cf.cond_br %162, ^bb29, ^bb30
  ^bb28:  // pred: ^bb25
    %c1_i32_86 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_86) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // 2 preds: ^bb27, ^bb30
    %163 = llvm.getelementptr %11[%157] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_81, %163 {alignment = 1 : i64} : i64, !llvm.ptr
    %164 = llvm.load %1 : !llvm.ptr -> i32
    %c64_i32_87 = arith.constant 64 : i32
    %165 = arith.addi %164, %c64_i32_87 : i32
    %c8_i32_88 = arith.constant 8 : i32
    %166 = arith.addi %165, %c8_i32_88 : i32
    %c0_i64_89 = arith.constant 0 : i64
    %c0_i64_90 = arith.constant 0 : i64
    %167 = arith.extui %166 : i32 to i64
    %168 = arith.addi %167, %c0_i64_90 : i64
    %c8_i64_91 = arith.constant 8 : i64
    %169 = arith.addi %168, %c8_i64_91 : i64
    %c0_i32_92 = arith.constant 0 : i32
    %170 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_92) : (!llvm.ptr, i32) -> i32
    %171 = arith.extui %170 : i32 to i64
    %c65536_i64_93 = arith.constant 65536 : i64
    %172 = arith.muli %171, %c65536_i64_93 : i64
    %173 = arith.cmpi ult, %169, %172 : i64
    cf.cond_br %173, ^bb31, ^bb32
  ^bb30:  // pred: ^bb27
    %c1_i32_94 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_94) : (i32) -> ()
    cf.br ^bb29
  ^bb31:  // 2 preds: ^bb29, ^bb32
    %174 = llvm.getelementptr %11[%168] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_89, %174 {alignment = 1 : i64} : i64, !llvm.ptr
    %175 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_95 = arith.constant 0 : i64
    %c64_i64 = arith.constant 64 : i64
    %176 = arith.extui %175 : i32 to i64
    %177 = arith.addi %176, %c64_i64 : i64
    %c8_i64_96 = arith.constant 8 : i64
    %178 = arith.addi %177, %c8_i64_96 : i64
    %c0_i32_97 = arith.constant 0 : i32
    %179 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_97) : (!llvm.ptr, i32) -> i32
    %180 = arith.extui %179 : i32 to i64
    %c65536_i64_98 = arith.constant 65536 : i64
    %181 = arith.muli %180, %c65536_i64_98 : i64
    %182 = arith.cmpi ult, %178, %181 : i64
    cf.cond_br %182, ^bb33, ^bb34
  ^bb32:  // pred: ^bb29
    %c1_i32_99 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_99) : (i32) -> ()
    cf.br ^bb31
  ^bb33:  // 2 preds: ^bb31, ^bb34
    %183 = llvm.getelementptr %11[%177] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_95, %183 {alignment = 1 : i64} : i64, !llvm.ptr
    %184 = llvm.load %1 : !llvm.ptr -> i32
    %c64_i32_100 = arith.constant 64 : i32
    %185 = arith.addi %184, %c64_i32_100 : i32
    llvm.store %185, %3 : i32, !llvm.ptr
    cf.br ^bb36
  ^bb34:  // pred: ^bb31
    %c1_i32_101 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_101) : (i32) -> ()
    cf.br ^bb33
  ^bb35:  // pred: ^bb41
    %186 = llvm.load %0 : !llvm.ptr -> i32
    %187 = llvm.load %1 : !llvm.ptr -> i32
    %c64_i64_102 = arith.constant 64 : i64
    %188 = arith.extui %187 : i32 to i64
    %189 = arith.addi %188, %c64_i64_102 : i64
    %c8_i64_103 = arith.constant 8 : i64
    %190 = arith.addi %189, %c8_i64_103 : i64
    %c0_i32_104 = arith.constant 0 : i32
    %191 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_104) : (!llvm.ptr, i32) -> i32
    %192 = arith.extui %191 : i32 to i64
    %c65536_i64_105 = arith.constant 65536 : i64
    %193 = arith.muli %192, %c65536_i64_105 : i64
    %194 = arith.cmpi ult, %190, %193 : i64
    cf.cond_br %194, ^bb42, ^bb43
  ^bb36:  // 2 preds: ^bb33, ^bb39
    %195 = llvm.load %3 : !llvm.ptr -> i32
    %196 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i32_106 = arith.constant 32 : i32
    %197 = arith.addi %196, %c32_i32_106 : i32
    %198 = llvm.load %2 : !llvm.ptr -> i32
    %199 = arith.addi %197, %198 : i32
    %c0_i64_107 = arith.constant 0 : i64
    %200 = arith.extui %199 : i32 to i64
    %201 = arith.addi %200, %c0_i64_107 : i64
    %c8_i64_108 = arith.constant 8 : i64
    %202 = arith.addi %201, %c8_i64_108 : i64
    %c0_i32_109 = arith.constant 0 : i32
    %203 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_109) : (!llvm.ptr, i32) -> i32
    %204 = arith.extui %203 : i32 to i64
    %c65536_i64_110 = arith.constant 65536 : i64
    %205 = arith.muli %204, %c65536_i64_110 : i64
    %206 = arith.cmpi ult, %202, %205 : i64
    cf.cond_br %206, ^bb37, ^bb38
  ^bb37:  // 2 preds: ^bb36, ^bb38
    %207 = llvm.getelementptr %11[%201] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %208 = llvm.load volatile %207 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %208, %6 : i64, !llvm.ptr
    %c56_i64 = arith.constant 56 : i64
    %c63_i64 = arith.constant 63 : i64
    %209 = arith.cmpi ule, %c56_i64, %c63_i64 : i64
    %210 = scf.if %209 -> (i64) {
      %340 = arith.shli %208, %c56_i64 : i64
      scf.yield %340 : i64
    } else {
      %c0_i64_182 = arith.constant 0 : i64
      scf.yield %c0_i64_182 : i64
    }
    %211 = llvm.load %6 : !llvm.ptr -> i64
    %c65280_i64 = arith.constant 65280 : i64
    %212 = arith.andi %211, %c65280_i64 : i64
    %c40_i64 = arith.constant 40 : i64
    %c63_i64_111 = arith.constant 63 : i64
    %213 = arith.cmpi ule, %c40_i64, %c63_i64_111 : i64
    %214 = scf.if %213 -> (i64) {
      %340 = arith.shli %212, %c40_i64 : i64
      scf.yield %340 : i64
    } else {
      %c0_i64_182 = arith.constant 0 : i64
      scf.yield %c0_i64_182 : i64
    }
    %215 = arith.ori %210, %214 : i64
    %216 = llvm.load %6 : !llvm.ptr -> i64
    %c16711680_i64 = arith.constant 16711680 : i64
    %217 = arith.andi %216, %c16711680_i64 : i64
    %c24_i64 = arith.constant 24 : i64
    %c63_i64_112 = arith.constant 63 : i64
    %218 = arith.cmpi ule, %c24_i64, %c63_i64_112 : i64
    %219 = scf.if %218 -> (i64) {
      %340 = arith.shli %217, %c24_i64 : i64
      scf.yield %340 : i64
    } else {
      %c0_i64_182 = arith.constant 0 : i64
      scf.yield %c0_i64_182 : i64
    }
    %220 = llvm.load %6 : !llvm.ptr -> i64
    %c4278190080_i64 = arith.constant 4278190080 : i64
    %221 = arith.andi %220, %c4278190080_i64 : i64
    %c8_i64_113 = arith.constant 8 : i64
    %c63_i64_114 = arith.constant 63 : i64
    %222 = arith.cmpi ule, %c8_i64_113, %c63_i64_114 : i64
    %223 = scf.if %222 -> (i64) {
      %340 = arith.shli %221, %c8_i64_113 : i64
      scf.yield %340 : i64
    } else {
      %c0_i64_182 = arith.constant 0 : i64
      scf.yield %c0_i64_182 : i64
    }
    %224 = arith.ori %219, %223 : i64
    %225 = arith.ori %215, %224 : i64
    %226 = llvm.load %6 : !llvm.ptr -> i64
    %c8_i64_115 = arith.constant 8 : i64
    %c63_i64_116 = arith.constant 63 : i64
    %227 = arith.cmpi ule, %c8_i64_115, %c63_i64_116 : i64
    %228 = scf.if %227 -> (i64) {
      %340 = arith.shrui %226, %c8_i64_115 : i64
      scf.yield %340 : i64
    } else {
      %c0_i64_182 = arith.constant 0 : i64
      scf.yield %c0_i64_182 : i64
    }
    %c4278190080_i64_117 = arith.constant 4278190080 : i64
    %229 = arith.andi %228, %c4278190080_i64_117 : i64
    %230 = llvm.load %6 : !llvm.ptr -> i64
    %c24_i64_118 = arith.constant 24 : i64
    %c63_i64_119 = arith.constant 63 : i64
    %231 = arith.cmpi ule, %c24_i64_118, %c63_i64_119 : i64
    %232 = scf.if %231 -> (i64) {
      %340 = arith.shrui %230, %c24_i64_118 : i64
      scf.yield %340 : i64
    } else {
      %c0_i64_182 = arith.constant 0 : i64
      scf.yield %c0_i64_182 : i64
    }
    %c16711680_i64_120 = arith.constant 16711680 : i64
    %233 = arith.andi %232, %c16711680_i64_120 : i64
    %234 = arith.ori %229, %233 : i64
    %235 = llvm.load %6 : !llvm.ptr -> i64
    %c40_i64_121 = arith.constant 40 : i64
    %c63_i64_122 = arith.constant 63 : i64
    %236 = arith.cmpi ule, %c40_i64_121, %c63_i64_122 : i64
    %237 = scf.if %236 -> (i64) {
      %340 = arith.shrui %235, %c40_i64_121 : i64
      scf.yield %340 : i64
    } else {
      %c0_i64_182 = arith.constant 0 : i64
      scf.yield %c0_i64_182 : i64
    }
    %c65280_i64_123 = arith.constant 65280 : i64
    %238 = arith.andi %237, %c65280_i64_123 : i64
    %239 = llvm.load %6 : !llvm.ptr -> i64
    %c56_i64_124 = arith.constant 56 : i64
    %c63_i64_125 = arith.constant 63 : i64
    %240 = arith.cmpi ule, %c56_i64_124, %c63_i64_125 : i64
    %241 = scf.if %240 -> (i64) {
      %340 = arith.shrui %239, %c56_i64_124 : i64
      scf.yield %340 : i64
    } else {
      %c0_i64_182 = arith.constant 0 : i64
      scf.yield %c0_i64_182 : i64
    }
    %242 = arith.ori %238, %241 : i64
    %243 = arith.ori %234, %242 : i64
    %244 = arith.ori %225, %243 : i64
    %c0_i64_126 = arith.constant 0 : i64
    %245 = arith.extui %195 : i32 to i64
    %246 = arith.addi %245, %c0_i64_126 : i64
    %c8_i64_127 = arith.constant 8 : i64
    %247 = arith.addi %246, %c8_i64_127 : i64
    %c0_i32_128 = arith.constant 0 : i32
    %248 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_128) : (!llvm.ptr, i32) -> i32
    %249 = arith.extui %248 : i32 to i64
    %c65536_i64_129 = arith.constant 65536 : i64
    %250 = arith.muli %249, %c65536_i64_129 : i64
    %251 = arith.cmpi ult, %247, %250 : i64
    cf.cond_br %251, ^bb39, ^bb40
  ^bb38:  // pred: ^bb36
    %c1_i32_130 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_130) : (i32) -> ()
    cf.br ^bb37
  ^bb39:  // 2 preds: ^bb37, ^bb40
    %252 = llvm.getelementptr %11[%246] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %244, %252 {alignment = 1 : i64} : i64, !llvm.ptr
    %253 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_131 = arith.constant 8 : i32
    %254 = arith.addi %253, %c8_i32_131 : i32
    llvm.store %254, %3 : i32, !llvm.ptr
    %255 = llvm.load %2 : !llvm.ptr -> i32
    %c-8_i32 = arith.constant -8 : i32
    %256 = arith.addi %255, %c-8_i32 : i32
    llvm.store %256, %2 : i32, !llvm.ptr
    %c-8_i32_132 = arith.constant -8 : i32
    %257 = arith.cmpi eq, %256, %c-8_i32_132 : i32
    %258 = arith.extui %257 : i1 to i32
    %c0_i32_133 = arith.constant 0 : i32
    %259 = arith.cmpi eq, %258, %c0_i32_133 : i32
    %260 = arith.extui %259 : i1 to i32
    %c0_i32_134 = arith.constant 0 : i32
    %261 = arith.cmpi ne, %260, %c0_i32_134 : i32
    cf.cond_br %261, ^bb36, ^bb41
  ^bb40:  // pred: ^bb37
    %c1_i32_135 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_135) : (i32) -> ()
    cf.br ^bb39
  ^bb41:  // pred: ^bb39
    cf.br ^bb35
  ^bb42:  // 2 preds: ^bb35, ^bb43
    %262 = llvm.getelementptr %11[%189] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %263 = llvm.load volatile %262 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_136 = arith.constant 0 : i64
    %264 = arith.extui %186 : i32 to i64
    %265 = arith.addi %264, %c0_i64_136 : i64
    %c8_i64_137 = arith.constant 8 : i64
    %266 = arith.addi %265, %c8_i64_137 : i64
    %c0_i32_138 = arith.constant 0 : i32
    %267 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_138) : (!llvm.ptr, i32) -> i32
    %268 = arith.extui %267 : i32 to i64
    %c65536_i64_139 = arith.constant 65536 : i64
    %269 = arith.muli %268, %c65536_i64_139 : i64
    %270 = arith.cmpi ult, %266, %269 : i64
    cf.cond_br %270, ^bb44, ^bb45
  ^bb43:  // pred: ^bb35
    %c1_i32_140 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_140) : (i32) -> ()
    cf.br ^bb42
  ^bb44:  // 2 preds: ^bb42, ^bb45
    %271 = llvm.getelementptr %11[%265] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %263, %271 {alignment = 1 : i64} : i64, !llvm.ptr
    %272 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32_141 = arith.constant 24 : i32
    %273 = arith.addi %272, %c24_i32_141 : i32
    %274 = llvm.load %1 : !llvm.ptr -> i32
    %c64_i32_142 = arith.constant 64 : i32
    %275 = arith.addi %274, %c64_i32_142 : i32
    %c24_i32_143 = arith.constant 24 : i32
    %276 = arith.addi %275, %c24_i32_143 : i32
    %c0_i64_144 = arith.constant 0 : i64
    %277 = arith.extui %276 : i32 to i64
    %278 = arith.addi %277, %c0_i64_144 : i64
    %c8_i64_145 = arith.constant 8 : i64
    %279 = arith.addi %278, %c8_i64_145 : i64
    %c0_i32_146 = arith.constant 0 : i32
    %280 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_146) : (!llvm.ptr, i32) -> i32
    %281 = arith.extui %280 : i32 to i64
    %c65536_i64_147 = arith.constant 65536 : i64
    %282 = arith.muli %281, %c65536_i64_147 : i64
    %283 = arith.cmpi ult, %279, %282 : i64
    cf.cond_br %283, ^bb46, ^bb47
  ^bb45:  // pred: ^bb42
    %c1_i32_148 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_148) : (i32) -> ()
    cf.br ^bb44
  ^bb46:  // 2 preds: ^bb44, ^bb47
    %284 = llvm.getelementptr %11[%278] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %285 = llvm.load volatile %284 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_149 = arith.constant 0 : i64
    %286 = arith.extui %273 : i32 to i64
    %287 = arith.addi %286, %c0_i64_149 : i64
    %c8_i64_150 = arith.constant 8 : i64
    %288 = arith.addi %287, %c8_i64_150 : i64
    %c0_i32_151 = arith.constant 0 : i32
    %289 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_151) : (!llvm.ptr, i32) -> i32
    %290 = arith.extui %289 : i32 to i64
    %c65536_i64_152 = arith.constant 65536 : i64
    %291 = arith.muli %290, %c65536_i64_152 : i64
    %292 = arith.cmpi ult, %288, %291 : i64
    cf.cond_br %292, ^bb48, ^bb49
  ^bb47:  // pred: ^bb44
    %c1_i32_153 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_153) : (i32) -> ()
    cf.br ^bb46
  ^bb48:  // 2 preds: ^bb46, ^bb49
    %293 = llvm.getelementptr %11[%287] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %285, %293 {alignment = 1 : i64} : i64, !llvm.ptr
    %294 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_154 = arith.constant 16 : i32
    %295 = arith.addi %294, %c16_i32_154 : i32
    %296 = llvm.load %1 : !llvm.ptr -> i32
    %c64_i32_155 = arith.constant 64 : i32
    %297 = arith.addi %296, %c64_i32_155 : i32
    %c16_i32_156 = arith.constant 16 : i32
    %298 = arith.addi %297, %c16_i32_156 : i32
    %c0_i64_157 = arith.constant 0 : i64
    %299 = arith.extui %298 : i32 to i64
    %300 = arith.addi %299, %c0_i64_157 : i64
    %c8_i64_158 = arith.constant 8 : i64
    %301 = arith.addi %300, %c8_i64_158 : i64
    %c0_i32_159 = arith.constant 0 : i32
    %302 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_159) : (!llvm.ptr, i32) -> i32
    %303 = arith.extui %302 : i32 to i64
    %c65536_i64_160 = arith.constant 65536 : i64
    %304 = arith.muli %303, %c65536_i64_160 : i64
    %305 = arith.cmpi ult, %301, %304 : i64
    cf.cond_br %305, ^bb50, ^bb51
  ^bb49:  // pred: ^bb46
    %c1_i32_161 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_161) : (i32) -> ()
    cf.br ^bb48
  ^bb50:  // 2 preds: ^bb48, ^bb51
    %306 = llvm.getelementptr %11[%300] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %307 = llvm.load volatile %306 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_162 = arith.constant 0 : i64
    %308 = arith.extui %295 : i32 to i64
    %309 = arith.addi %308, %c0_i64_162 : i64
    %c8_i64_163 = arith.constant 8 : i64
    %310 = arith.addi %309, %c8_i64_163 : i64
    %c0_i32_164 = arith.constant 0 : i32
    %311 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_164) : (!llvm.ptr, i32) -> i32
    %312 = arith.extui %311 : i32 to i64
    %c65536_i64_165 = arith.constant 65536 : i64
    %313 = arith.muli %312, %c65536_i64_165 : i64
    %314 = arith.cmpi ult, %310, %313 : i64
    cf.cond_br %314, ^bb52, ^bb53
  ^bb51:  // pred: ^bb48
    %c1_i32_166 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_166) : (i32) -> ()
    cf.br ^bb50
  ^bb52:  // 2 preds: ^bb50, ^bb53
    %315 = llvm.getelementptr %11[%309] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %307, %315 {alignment = 1 : i64} : i64, !llvm.ptr
    %316 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_167 = arith.constant 8 : i32
    %317 = arith.addi %316, %c8_i32_167 : i32
    %318 = llvm.load %1 : !llvm.ptr -> i32
    %c64_i32_168 = arith.constant 64 : i32
    %319 = arith.addi %318, %c64_i32_168 : i32
    %c8_i32_169 = arith.constant 8 : i32
    %320 = arith.addi %319, %c8_i32_169 : i32
    %c0_i64_170 = arith.constant 0 : i64
    %321 = arith.extui %320 : i32 to i64
    %322 = arith.addi %321, %c0_i64_170 : i64
    %c8_i64_171 = arith.constant 8 : i64
    %323 = arith.addi %322, %c8_i64_171 : i64
    %c0_i32_172 = arith.constant 0 : i32
    %324 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_172) : (!llvm.ptr, i32) -> i32
    %325 = arith.extui %324 : i32 to i64
    %c65536_i64_173 = arith.constant 65536 : i64
    %326 = arith.muli %325, %c65536_i64_173 : i64
    %327 = arith.cmpi ult, %323, %326 : i64
    cf.cond_br %327, ^bb54, ^bb55
  ^bb53:  // pred: ^bb50
    %c1_i32_174 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_174) : (i32) -> ()
    cf.br ^bb52
  ^bb54:  // 2 preds: ^bb52, ^bb55
    %328 = llvm.getelementptr %11[%322] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %329 = llvm.load volatile %328 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_175 = arith.constant 0 : i64
    %330 = arith.extui %317 : i32 to i64
    %331 = arith.addi %330, %c0_i64_175 : i64
    %c8_i64_176 = arith.constant 8 : i64
    %332 = arith.addi %331, %c8_i64_176 : i64
    %c0_i32_177 = arith.constant 0 : i32
    %333 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_177) : (!llvm.ptr, i32) -> i32
    %334 = arith.extui %333 : i32 to i64
    %c65536_i64_178 = arith.constant 65536 : i64
    %335 = arith.muli %334, %c65536_i64_178 : i64
    %336 = arith.cmpi ult, %332, %335 : i64
    cf.cond_br %336, ^bb56, ^bb57
  ^bb55:  // pred: ^bb52
    %c1_i32_179 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_179) : (i32) -> ()
    cf.br ^bb54
  ^bb56:  // 2 preds: ^bb54, ^bb57
    %337 = llvm.getelementptr %11[%331] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %329, %337 {alignment = 1 : i64} : i64, !llvm.ptr
    %338 = llvm.load %1 : !llvm.ptr -> i32
    %c96_i32_180 = arith.constant 96 : i32
    %339 = arith.addi %338, %c96_i32_180 : i32
    llvm.store %339, %8 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb57:  // pred: ^bb54
    %c1_i32_181 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_181) : (i32) -> ()
    cf.br ^bb56
  }
  func.func @f59(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func @f60(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %4 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %7 = arith.addi %6, %c4_i64 : i64
    %c0_i32 = arith.constant 0 : i32
    %8 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32) : (!llvm.ptr, i32) -> i32
    %9 = arith.extui %8 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %10 = arith.muli %9, %c65536_i64 : i64
    %11 = arith.cmpi ult, %7, %10 : i64
    cf.cond_br %11, ^bb4, ^bb5
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb4, ^bb6
    cf.br ^bb2
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %12 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %13 = llvm.load volatile %12 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %14 = arith.cmpi eq, %13, %c-2147483648_i32 : i32
    %15 = arith.extui %14 : i1 to i32
    %c0_i32_0 = arith.constant 0 : i32
    %16 = arith.cmpi ne, %15, %c0_i32_0 : i32
    cf.cond_br %16, ^bb3, ^bb6
  ^bb5:  // pred: ^bb1
    %c1_i32_1 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1) : (i32) -> ()
    cf.br ^bb4
  ^bb6:  // pred: ^bb4
    %17 = llvm.load %0 : !llvm.ptr -> i32
    call @f112(%arg0, %17) : (!llvm.ptr, i32) -> ()
    %18 = llvm.load %0 : !llvm.ptr -> i32
    call @f113(%arg0, %18) : (!llvm.ptr, i32) -> ()
    cf.br ^bb3
  }
  func.func @f61(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> i32
    %7 = llvm.getelementptr %arg0[304] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %arg0[312] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.load %8 : !llvm.ptr -> i64
    %11 = arith.trunci %10 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c0_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %15 = arith.addi %14, %c4_i64 : i64
    %c0_i32_1 = arith.constant 0 : i32
    %16 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1) : (!llvm.ptr, i32) -> i32
    %17 = arith.extui %16 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %18 = arith.muli %17, %c65536_i64 : i64
    %19 = arith.cmpi ult, %15, %18 : i64
    cf.cond_br %19, ^bb4, ^bb5
  ^bb2:  // 3 preds: ^bb3, ^bb8, ^bb27
    return
  ^bb3:  // pred: ^bb4
    %20 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %21 = arith.addi %20, %c4_i32 : i32
    call @f60(%arg0, %21) : (!llvm.ptr, i32) -> ()
    cf.br ^bb2
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %22 = llvm.getelementptr %4[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %23 = llvm.load volatile %22 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %23, %1 : i32, !llvm.ptr
    %c-2147483647_i32 = arith.constant -2147483647 : i32
    %24 = arith.addi %23, %c-2147483647_i32 : i32
    %c0_i32_2 = arith.constant 0 : i32
    %25 = llvm.load %1 : !llvm.ptr -> i32
    %c-2147483638_i32 = arith.constant -2147483638 : i32
    %26 = arith.cmpi slt, %25, %c-2147483638_i32 : i32
    %27 = arith.extui %26 : i1 to i32
    %c0_i32_3 = arith.constant 0 : i32
    %28 = arith.cmpi ne, %27, %c0_i32_3 : i32
    %29 = arith.select %28, %24, %c0_i32_2 : i32
    llvm.store %29, %1 : i32, !llvm.ptr
    %c9_i32 = arith.constant 9 : i32
    %30 = arith.cmpi ugt, %29, %c9_i32 : i32
    %31 = arith.extui %30 : i1 to i32
    %c0_i32_4 = arith.constant 0 : i32
    %32 = arith.cmpi ne, %31, %c0_i32_4 : i32
    cf.cond_br %32, ^bb3, ^bb6
  ^bb5:  // pred: ^bb1
    %c1_i32_5 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_5) : (i32) -> ()
    cf.br ^bb4
  ^bb6:  // pred: ^bb4
    %c1_i32_6 = arith.constant 1 : i32
    %33 = llvm.load %1 : !llvm.ptr -> i32
    %c31_i32 = arith.constant 31 : i32
    %34 = arith.cmpi ule, %33, %c31_i32 : i32
    %35 = scf.if %34 -> (i32) {
      %111 = arith.shli %c1_i32_6, %33 : i32
      scf.yield %111 : i32
    } else {
      %c0_i32_35 = arith.constant 0 : i32
      scf.yield %c0_i32_35 : i32
    }
    %c894_i32 = arith.constant 894 : i32
    %36 = arith.andi %35, %c894_i32 : i32
    %c0_i32_7 = arith.constant 0 : i32
    %37 = arith.cmpi ne, %36, %c0_i32_7 : i32
    cf.cond_br %37, ^bb8, ^bb9
  ^bb7:  // pred: ^bb9
    %38 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %39 = arith.extui %38 : i32 to i64
    %40 = arith.addi %39, %c12_i64 : i64
    %c4_i64_8 = arith.constant 4 : i64
    %41 = arith.addi %40, %c4_i64_8 : i64
    %c0_i32_9 = arith.constant 0 : i32
    %42 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_9) : (!llvm.ptr, i32) -> i32
    %43 = arith.extui %42 : i32 to i64
    %c65536_i64_10 = arith.constant 65536 : i64
    %44 = arith.muli %43, %c65536_i64_10 : i64
    %45 = arith.cmpi ult, %41, %44 : i64
    cf.cond_br %45, ^bb11, ^bb12
  ^bb8:  // 2 preds: ^bb6, ^bb10
    cf.br ^bb2
  ^bb9:  // pred: ^bb6
    %46 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_11 = arith.constant 0 : i32
    %47 = arith.cmpi ne, %46, %c0_i32_11 : i32
    cf.cond_br %47, ^bb7, ^bb10
  ^bb10:  // pred: ^bb9
    %48 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %49 = arith.addi %48, %c12_i32 : i32
    call @f60(%arg0, %49) : (!llvm.ptr, i32) -> ()
    %50 = llvm.load %0 : !llvm.ptr -> i32
    call @f112(%arg0, %50) : (!llvm.ptr, i32) -> ()
    %51 = llvm.load %0 : !llvm.ptr -> i32
    call @f113(%arg0, %51) : (!llvm.ptr, i32) -> ()
    cf.br ^bb8
  ^bb11:  // 2 preds: ^bb7, ^bb12
    %52 = llvm.getelementptr %4[%40] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %53 = llvm.load volatile %52 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %53, %0 : i32, !llvm.ptr
    call @f89(%arg0, %53) : (!llvm.ptr, i32) -> ()
    %54 = llvm.load %0 : !llvm.ptr -> i32
    call @f91(%arg0, %54) : (!llvm.ptr, i32) -> ()
    %55 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %56 = arith.addi %55, %c24_i32 : i32
    %57 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %58 = arith.extui %57 : i32 to i64
    %59 = arith.addi %58, %c16_i64 : i64
    %c4_i64_12 = arith.constant 4 : i64
    %60 = arith.addi %59, %c4_i64_12 : i64
    %c0_i32_13 = arith.constant 0 : i32
    %61 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_13) : (!llvm.ptr, i32) -> i32
    %62 = arith.extui %61 : i32 to i64
    %c65536_i64_14 = arith.constant 65536 : i64
    %63 = arith.muli %62, %c65536_i64_14 : i64
    %64 = arith.cmpi ult, %60, %63 : i64
    cf.cond_br %64, ^bb13, ^bb14
  ^bb12:  // pred: ^bb7
    %c1_i32_15 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_15) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %65 = llvm.getelementptr %4[%59] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %66 = llvm.load volatile %65 {alignment = 1 : i64} : !llvm.ptr -> i32
    %67 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %68 = arith.extui %67 : i32 to i64
    %69 = arith.addi %68, %c20_i64 : i64
    %c4_i64_16 = arith.constant 4 : i64
    %70 = arith.addi %69, %c4_i64_16 : i64
    %c0_i32_17 = arith.constant 0 : i32
    %71 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_17) : (!llvm.ptr, i32) -> i32
    %72 = arith.extui %71 : i32 to i64
    %c65536_i64_18 = arith.constant 65536 : i64
    %73 = arith.muli %72, %c65536_i64_18 : i64
    %74 = arith.cmpi ult, %70, %73 : i64
    cf.cond_br %74, ^bb15, ^bb16
  ^bb14:  // pred: ^bb11
    %c1_i32_19 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_19) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // 2 preds: ^bb13, ^bb16
    %75 = llvm.getelementptr %4[%69] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %76 = llvm.load volatile %75 {alignment = 1 : i64} : !llvm.ptr -> i32
    %77 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64_20 = arith.constant 12 : i64
    %78 = arith.extui %77 : i32 to i64
    %79 = arith.addi %78, %c12_i64_20 : i64
    %c4_i64_21 = arith.constant 4 : i64
    %80 = arith.addi %79, %c4_i64_21 : i64
    %c0_i32_22 = arith.constant 0 : i32
    %81 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_22) : (!llvm.ptr, i32) -> i32
    %82 = arith.extui %81 : i32 to i64
    %c65536_i64_23 = arith.constant 65536 : i64
    %83 = arith.muli %82, %c65536_i64_23 : i64
    %84 = arith.cmpi ult, %80, %83 : i64
    cf.cond_br %84, ^bb17, ^bb18
  ^bb16:  // pred: ^bb13
    %c1_i32_24 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_24) : (i32) -> ()
    cf.br ^bb15
  ^bb17:  // 2 preds: ^bb15, ^bb18
    %85 = llvm.getelementptr %4[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %86 = llvm.load volatile %85 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c16_i64_25 = arith.constant 16 : i64
    %87 = arith.extui %86 : i32 to i64
    %88 = arith.addi %87, %c16_i64_25 : i64
    %c4_i64_26 = arith.constant 4 : i64
    %89 = arith.addi %88, %c4_i64_26 : i64
    %c0_i32_27 = arith.constant 0 : i32
    %90 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_27) : (!llvm.ptr, i32) -> i32
    %91 = arith.extui %90 : i32 to i64
    %c65536_i64_28 = arith.constant 65536 : i64
    %92 = arith.muli %91, %c65536_i64_28 : i64
    %93 = arith.cmpi ult, %89, %92 : i64
    cf.cond_br %93, ^bb19, ^bb20
  ^bb18:  // pred: ^bb15
    %c1_i32_29 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_29) : (i32) -> ()
    cf.br ^bb17
  ^bb19:  // 2 preds: ^bb17, ^bb20
    %94 = llvm.getelementptr %4[%88] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %95 = llvm.load volatile %94 {alignment = 1 : i64} : !llvm.ptr -> i32
    %96 = arith.cmpi ult, %95, %11 : i32
    cf.cond_br %96, ^bb21, ^bb22
  ^bb20:  // pred: ^bb17
    %c1_i32_30 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_30) : (i32) -> ()
    cf.br ^bb19
  ^bb21:  // 2 preds: ^bb19, ^bb22
    %97 = llvm.getelementptr inbounds %9[%95] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %98 = llvm.load %97 : !llvm.ptr -> !llvm.ptr
    %99 = llvm.ptrtoint %98 : !llvm.ptr to i64
    %c0_i64_31 = arith.constant 0 : i64
    %100 = arith.cmpi eq, %99, %c0_i64_31 : i64
    cf.cond_br %100, ^bb24, ^bb23
  ^bb22:  // pred: ^bb19
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb21
  ^bb23:  // 2 preds: ^bb21, ^bb24
    %101 = llvm.getelementptr %98[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %102 = llvm.getelementptr %98[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %103 = llvm.getelementptr %98[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %104 = llvm.load %101 : !llvm.ptr -> !llvm.ptr
    %105 = llvm.load %103 : !llvm.ptr -> !llvm.ptr
    %106 = llvm.ptrtoint %104 : !llvm.ptr to i64
    %c0_i64_32 = arith.constant 0 : i64
    %107 = arith.cmpi eq, %106, %c0_i64_32 : i64
    cf.cond_br %107, ^bb26, ^bb25
  ^bb24:  // pred: ^bb21
    %c4_i32_33 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_33) : (i32) -> ()
    cf.br ^bb23
  ^bb25:  // 2 preds: ^bb23, ^bb26
    %108 = llvm.load %102 : !llvm.ptr -> i32
    %109 = arith.cmpi ne, %6, %108 : i32
    cf.cond_br %109, ^bb28, ^bb27
  ^bb26:  // pred: ^bb23
    %c3_i32_34 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_34) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // 2 preds: ^bb25, ^bb28
    %110 = llvm.call %104(%105, %56, %66, %76) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> !llvm.void
    cf.br ^bb2
  ^bb28:  // pred: ^bb25
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb27
  }
  func.func @f62(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %7 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.getelementptr %arg0[256] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.getelementptr %12[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %15 = llvm.getelementptr %12[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %17 = llvm.load %8 : !llvm.ptr -> i32
    %c96_i32 = arith.constant 96 : i32
    %18 = arith.subi %17, %c96_i32 : i32
    llvm.store %18, %3 : i32, !llvm.ptr
    llvm.store %18, %8 : i32, !llvm.ptr
    %19 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %20 = arith.addi %19, %c24_i32 : i32
    %c0_i64 = arith.constant 0 : i64
    %c0_i64_6 = arith.constant 0 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c0_i64_6 : i64
    %c8_i64 = arith.constant 8 : i64
    %23 = arith.addi %22, %c8_i64 : i64
    %c0_i32_7 = arith.constant 0 : i32
    %24 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_7) : (!llvm.ptr, i32) -> i32
    %25 = arith.extui %24 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %26 = arith.muli %25, %c65536_i64 : i64
    %27 = arith.cmpi ult, %23, %26 : i64
    cf.cond_br %27, ^bb3, ^bb4
  ^bb2:  // pred: ^bb68
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %28 = llvm.getelementptr %11[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64, %28 {alignment = 1 : i64} : i64, !llvm.ptr
    %29 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %30 = arith.addi %29, %c16_i32 : i32
    %c0_i64_8 = arith.constant 0 : i64
    %c0_i64_9 = arith.constant 0 : i64
    %31 = arith.extui %30 : i32 to i64
    %32 = arith.addi %31, %c0_i64_9 : i64
    %c8_i64_10 = arith.constant 8 : i64
    %33 = arith.addi %32, %c8_i64_10 : i64
    %c0_i32_11 = arith.constant 0 : i32
    %34 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_11) : (!llvm.ptr, i32) -> i32
    %35 = arith.extui %34 : i32 to i64
    %c65536_i64_12 = arith.constant 65536 : i64
    %36 = arith.muli %35, %c65536_i64_12 : i64
    %37 = arith.cmpi ult, %33, %36 : i64
    cf.cond_br %37, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c1_i32_13 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_13) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %38 = llvm.getelementptr %11[%32] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_8, %38 {alignment = 1 : i64} : i64, !llvm.ptr
    %39 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %40 = arith.addi %39, %c8_i32 : i32
    %c0_i64_14 = arith.constant 0 : i64
    %c0_i64_15 = arith.constant 0 : i64
    %41 = arith.extui %40 : i32 to i64
    %42 = arith.addi %41, %c0_i64_15 : i64
    %c8_i64_16 = arith.constant 8 : i64
    %43 = arith.addi %42, %c8_i64_16 : i64
    %c0_i32_17 = arith.constant 0 : i32
    %44 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_17) : (!llvm.ptr, i32) -> i32
    %45 = arith.extui %44 : i32 to i64
    %c65536_i64_18 = arith.constant 65536 : i64
    %46 = arith.muli %45, %c65536_i64_18 : i64
    %47 = arith.cmpi ult, %43, %46 : i64
    cf.cond_br %47, ^bb7, ^bb8
  ^bb6:  // pred: ^bb3
    %c1_i32_19 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_19) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %48 = llvm.getelementptr %11[%42] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_14, %48 {alignment = 1 : i64} : i64, !llvm.ptr
    %49 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_20 = arith.constant 0 : i64
    %c0_i64_21 = arith.constant 0 : i64
    %50 = arith.extui %49 : i32 to i64
    %51 = arith.addi %50, %c0_i64_21 : i64
    %c8_i64_22 = arith.constant 8 : i64
    %52 = arith.addi %51, %c8_i64_22 : i64
    %c0_i32_23 = arith.constant 0 : i32
    %53 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_23) : (!llvm.ptr, i32) -> i32
    %54 = arith.extui %53 : i32 to i64
    %c65536_i64_24 = arith.constant 65536 : i64
    %55 = arith.muli %54, %c65536_i64_24 : i64
    %56 = arith.cmpi ult, %52, %55 : i64
    cf.cond_br %56, ^bb9, ^bb10
  ^bb8:  // pred: ^bb5
    %c1_i32_25 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_25) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %57 = llvm.getelementptr %11[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_20, %57 {alignment = 1 : i64} : i64, !llvm.ptr
    %58 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %59 = arith.addi %58, %c64_i32 : i32
    %c24_i32_26 = arith.constant 24 : i32
    %60 = arith.addi %59, %c24_i32_26 : i32
    %61 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_27 = arith.constant 24 : i32
    %62 = arith.addi %61, %c24_i32_27 : i32
    %c0_i64_28 = arith.constant 0 : i64
    %63 = arith.extui %62 : i32 to i64
    %64 = arith.addi %63, %c0_i64_28 : i64
    %c8_i64_29 = arith.constant 8 : i64
    %65 = arith.addi %64, %c8_i64_29 : i64
    %c0_i32_30 = arith.constant 0 : i32
    %66 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_30) : (!llvm.ptr, i32) -> i32
    %67 = arith.extui %66 : i32 to i64
    %c65536_i64_31 = arith.constant 65536 : i64
    %68 = arith.muli %67, %c65536_i64_31 : i64
    %69 = arith.cmpi ult, %65, %68 : i64
    cf.cond_br %69, ^bb11, ^bb12
  ^bb10:  // pred: ^bb7
    %c1_i32_32 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_32) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %70 = llvm.getelementptr %11[%64] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %71 = llvm.load volatile %70 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_33 = arith.constant 0 : i64
    %72 = arith.extui %60 : i32 to i64
    %73 = arith.addi %72, %c0_i64_33 : i64
    %c8_i64_34 = arith.constant 8 : i64
    %74 = arith.addi %73, %c8_i64_34 : i64
    %c0_i32_35 = arith.constant 0 : i32
    %75 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_35) : (!llvm.ptr, i32) -> i32
    %76 = arith.extui %75 : i32 to i64
    %c65536_i64_36 = arith.constant 65536 : i64
    %77 = arith.muli %76, %c65536_i64_36 : i64
    %78 = arith.cmpi ult, %74, %77 : i64
    cf.cond_br %78, ^bb13, ^bb14
  ^bb12:  // pred: ^bb9
    %c1_i32_37 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_37) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %79 = llvm.getelementptr %11[%73] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %71, %79 {alignment = 1 : i64} : i64, !llvm.ptr
    %80 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32_38 = arith.constant 64 : i32
    %81 = arith.addi %80, %c64_i32_38 : i32
    %c16_i32_39 = arith.constant 16 : i32
    %82 = arith.addi %81, %c16_i32_39 : i32
    %83 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_40 = arith.constant 16 : i32
    %84 = arith.addi %83, %c16_i32_40 : i32
    %c0_i64_41 = arith.constant 0 : i64
    %85 = arith.extui %84 : i32 to i64
    %86 = arith.addi %85, %c0_i64_41 : i64
    %c8_i64_42 = arith.constant 8 : i64
    %87 = arith.addi %86, %c8_i64_42 : i64
    %c0_i32_43 = arith.constant 0 : i32
    %88 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_43) : (!llvm.ptr, i32) -> i32
    %89 = arith.extui %88 : i32 to i64
    %c65536_i64_44 = arith.constant 65536 : i64
    %90 = arith.muli %89, %c65536_i64_44 : i64
    %91 = arith.cmpi ult, %87, %90 : i64
    cf.cond_br %91, ^bb15, ^bb16
  ^bb14:  // pred: ^bb11
    %c1_i32_45 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_45) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // 2 preds: ^bb13, ^bb16
    %92 = llvm.getelementptr %11[%86] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %93 = llvm.load volatile %92 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_46 = arith.constant 0 : i64
    %94 = arith.extui %82 : i32 to i64
    %95 = arith.addi %94, %c0_i64_46 : i64
    %c8_i64_47 = arith.constant 8 : i64
    %96 = arith.addi %95, %c8_i64_47 : i64
    %c0_i32_48 = arith.constant 0 : i32
    %97 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_48) : (!llvm.ptr, i32) -> i32
    %98 = arith.extui %97 : i32 to i64
    %c65536_i64_49 = arith.constant 65536 : i64
    %99 = arith.muli %98, %c65536_i64_49 : i64
    %100 = arith.cmpi ult, %96, %99 : i64
    cf.cond_br %100, ^bb17, ^bb18
  ^bb16:  // pred: ^bb13
    %c1_i32_50 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_50) : (i32) -> ()
    cf.br ^bb15
  ^bb17:  // 2 preds: ^bb15, ^bb18
    %101 = llvm.getelementptr %11[%95] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %93, %101 {alignment = 1 : i64} : i64, !llvm.ptr
    %102 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32_51 = arith.constant 64 : i32
    %103 = arith.addi %102, %c64_i32_51 : i32
    %c8_i32_52 = arith.constant 8 : i32
    %104 = arith.addi %103, %c8_i32_52 : i32
    %105 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_53 = arith.constant 8 : i32
    %106 = arith.addi %105, %c8_i32_53 : i32
    %c0_i64_54 = arith.constant 0 : i64
    %107 = arith.extui %106 : i32 to i64
    %108 = arith.addi %107, %c0_i64_54 : i64
    %c8_i64_55 = arith.constant 8 : i64
    %109 = arith.addi %108, %c8_i64_55 : i64
    %c0_i32_56 = arith.constant 0 : i32
    %110 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_56) : (!llvm.ptr, i32) -> i32
    %111 = arith.extui %110 : i32 to i64
    %c65536_i64_57 = arith.constant 65536 : i64
    %112 = arith.muli %111, %c65536_i64_57 : i64
    %113 = arith.cmpi ult, %109, %112 : i64
    cf.cond_br %113, ^bb19, ^bb20
  ^bb18:  // pred: ^bb15
    %c1_i32_58 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_58) : (i32) -> ()
    cf.br ^bb17
  ^bb19:  // 2 preds: ^bb17, ^bb20
    %114 = llvm.getelementptr %11[%108] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %115 = llvm.load volatile %114 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_59 = arith.constant 0 : i64
    %116 = arith.extui %104 : i32 to i64
    %117 = arith.addi %116, %c0_i64_59 : i64
    %c8_i64_60 = arith.constant 8 : i64
    %118 = arith.addi %117, %c8_i64_60 : i64
    %c0_i32_61 = arith.constant 0 : i32
    %119 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_61) : (!llvm.ptr, i32) -> i32
    %120 = arith.extui %119 : i32 to i64
    %c65536_i64_62 = arith.constant 65536 : i64
    %121 = arith.muli %120, %c65536_i64_62 : i64
    %122 = arith.cmpi ult, %118, %121 : i64
    cf.cond_br %122, ^bb21, ^bb22
  ^bb20:  // pred: ^bb17
    %c1_i32_63 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_63) : (i32) -> ()
    cf.br ^bb19
  ^bb21:  // 2 preds: ^bb19, ^bb22
    %123 = llvm.getelementptr %11[%117] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %115, %123 {alignment = 1 : i64} : i64, !llvm.ptr
    %124 = llvm.load %3 : !llvm.ptr -> i32
    %125 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_64 = arith.constant 0 : i64
    %126 = arith.extui %125 : i32 to i64
    %127 = arith.addi %126, %c0_i64_64 : i64
    %c8_i64_65 = arith.constant 8 : i64
    %128 = arith.addi %127, %c8_i64_65 : i64
    %c0_i32_66 = arith.constant 0 : i32
    %129 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_66) : (!llvm.ptr, i32) -> i32
    %130 = arith.extui %129 : i32 to i64
    %c65536_i64_67 = arith.constant 65536 : i64
    %131 = arith.muli %130, %c65536_i64_67 : i64
    %132 = arith.cmpi ult, %128, %131 : i64
    cf.cond_br %132, ^bb23, ^bb24
  ^bb22:  // pred: ^bb19
    %c1_i32_68 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_68) : (i32) -> ()
    cf.br ^bb21
  ^bb23:  // 2 preds: ^bb21, ^bb24
    %133 = llvm.getelementptr %11[%127] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %134 = llvm.load volatile %133 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c64_i64 = arith.constant 64 : i64
    %135 = arith.extui %124 : i32 to i64
    %136 = arith.addi %135, %c64_i64 : i64
    %c8_i64_69 = arith.constant 8 : i64
    %137 = arith.addi %136, %c8_i64_69 : i64
    %c0_i32_70 = arith.constant 0 : i32
    %138 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_70) : (!llvm.ptr, i32) -> i32
    %139 = arith.extui %138 : i32 to i64
    %c65536_i64_71 = arith.constant 65536 : i64
    %140 = arith.muli %139, %c65536_i64_71 : i64
    %141 = arith.cmpi ult, %137, %140 : i64
    cf.cond_br %141, ^bb25, ^bb26
  ^bb24:  // pred: ^bb21
    %c1_i32_72 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_72) : (i32) -> ()
    cf.br ^bb23
  ^bb25:  // 2 preds: ^bb23, ^bb26
    %142 = llvm.getelementptr %11[%136] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %134, %142 {alignment = 1 : i64} : i64, !llvm.ptr
    %143 = llvm.load %3 : !llvm.ptr -> i32
    %c95_i32 = arith.constant 95 : i32
    %144 = arith.addi %143, %c95_i32 : i32
    llvm.store %144, %2 : i32, !llvm.ptr
    %c0_i32_73 = arith.constant 0 : i32
    llvm.store %c0_i32_73, %4 : i32, !llvm.ptr
    cf.br ^bb28
  ^bb26:  // pred: ^bb23
    %c1_i32_74 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_74) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // pred: ^bb37
    %145 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %146 = arith.addi %145, %c32_i32 : i32
    %c24_i32_75 = arith.constant 24 : i32
    %147 = arith.addi %146, %c24_i32_75 : i32
    %148 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32_76 = arith.constant 64 : i32
    %149 = arith.addi %148, %c64_i32_76 : i32
    %c24_i32_77 = arith.constant 24 : i32
    %150 = arith.addi %149, %c24_i32_77 : i32
    %c0_i64_78 = arith.constant 0 : i64
    %151 = arith.extui %150 : i32 to i64
    %152 = arith.addi %151, %c0_i64_78 : i64
    %c8_i64_79 = arith.constant 8 : i64
    %153 = arith.addi %152, %c8_i64_79 : i64
    %c0_i32_80 = arith.constant 0 : i32
    %154 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_80) : (!llvm.ptr, i32) -> i32
    %155 = arith.extui %154 : i32 to i64
    %c65536_i64_81 = arith.constant 65536 : i64
    %156 = arith.muli %155, %c65536_i64_81 : i64
    %157 = arith.cmpi ult, %153, %156 : i64
    cf.cond_br %157, ^bb38, ^bb39
  ^bb28:  // 2 preds: ^bb25, ^bb35
    %158 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32_82 = arith.constant 64 : i32
    %159 = arith.addi %158, %c64_i32_82 : i32
    %160 = llvm.load %4 : !llvm.ptr -> i32
    %161 = arith.addi %159, %160 : i32
    llvm.store %161, %5 : i32, !llvm.ptr
    %c0_i64_83 = arith.constant 0 : i64
    %162 = arith.extui %161 : i32 to i64
    %163 = arith.addi %162, %c0_i64_83 : i64
    %c1_i64 = arith.constant 1 : i64
    %164 = arith.addi %163, %c1_i64 : i64
    %c0_i32_84 = arith.constant 0 : i32
    %165 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_84) : (!llvm.ptr, i32) -> i32
    %166 = arith.extui %165 : i32 to i64
    %c65536_i64_85 = arith.constant 65536 : i64
    %167 = arith.muli %166, %c65536_i64_85 : i64
    %168 = arith.cmpi ult, %164, %167 : i64
    cf.cond_br %168, ^bb29, ^bb30
  ^bb29:  // 2 preds: ^bb28, ^bb30
    %169 = llvm.getelementptr %11[%163] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %170 = llvm.load volatile %169 {alignment = 1 : i64} : !llvm.ptr -> i8
    %171 = arith.extui %170 : i8 to i32
    llvm.store %171, %6 : i32, !llvm.ptr
    %172 = llvm.load %5 : !llvm.ptr -> i32
    %173 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_86 = arith.constant 0 : i64
    %174 = arith.extui %173 : i32 to i64
    %175 = arith.addi %174, %c0_i64_86 : i64
    %c1_i64_87 = arith.constant 1 : i64
    %176 = arith.addi %175, %c1_i64_87 : i64
    %c0_i32_88 = arith.constant 0 : i32
    %177 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_88) : (!llvm.ptr, i32) -> i32
    %178 = arith.extui %177 : i32 to i64
    %c65536_i64_89 = arith.constant 65536 : i64
    %179 = arith.muli %178, %c65536_i64_89 : i64
    %180 = arith.cmpi ult, %176, %179 : i64
    cf.cond_br %180, ^bb31, ^bb32
  ^bb30:  // pred: ^bb28
    %c1_i32_90 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_90) : (i32) -> ()
    cf.br ^bb29
  ^bb31:  // 2 preds: ^bb29, ^bb32
    %181 = llvm.getelementptr %11[%175] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %182 = llvm.load volatile %181 {alignment = 1 : i64} : !llvm.ptr -> i8
    %183 = arith.extui %182 : i8 to i32
    %c0_i64_91 = arith.constant 0 : i64
    %184 = arith.extui %172 : i32 to i64
    %185 = arith.addi %184, %c0_i64_91 : i64
    %c1_i64_92 = arith.constant 1 : i64
    %186 = arith.addi %185, %c1_i64_92 : i64
    %c0_i32_93 = arith.constant 0 : i32
    %187 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_93) : (!llvm.ptr, i32) -> i32
    %188 = arith.extui %187 : i32 to i64
    %c65536_i64_94 = arith.constant 65536 : i64
    %189 = arith.muli %188, %c65536_i64_94 : i64
    %190 = arith.cmpi ult, %186, %189 : i64
    cf.cond_br %190, ^bb33, ^bb34
  ^bb32:  // pred: ^bb29
    %c1_i32_95 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_95) : (i32) -> ()
    cf.br ^bb31
  ^bb33:  // 2 preds: ^bb31, ^bb34
    %191 = llvm.getelementptr %11[%185] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %192 = arith.trunci %183 : i32 to i8
    llvm.store volatile %192, %191 {alignment = 1 : i64} : i8, !llvm.ptr
    %193 = llvm.load %2 : !llvm.ptr -> i32
    %194 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_96 = arith.constant 0 : i64
    %195 = arith.extui %193 : i32 to i64
    %196 = arith.addi %195, %c0_i64_96 : i64
    %c1_i64_97 = arith.constant 1 : i64
    %197 = arith.addi %196, %c1_i64_97 : i64
    %c0_i32_98 = arith.constant 0 : i32
    %198 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_98) : (!llvm.ptr, i32) -> i32
    %199 = arith.extui %198 : i32 to i64
    %c65536_i64_99 = arith.constant 65536 : i64
    %200 = arith.muli %199, %c65536_i64_99 : i64
    %201 = arith.cmpi ult, %197, %200 : i64
    cf.cond_br %201, ^bb35, ^bb36
  ^bb34:  // pred: ^bb31
    %c1_i32_100 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_100) : (i32) -> ()
    cf.br ^bb33
  ^bb35:  // 2 preds: ^bb33, ^bb36
    %202 = llvm.getelementptr %11[%196] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %203 = arith.trunci %194 : i32 to i8
    llvm.store volatile %203, %202 {alignment = 1 : i64} : i8, !llvm.ptr
    %204 = llvm.load %2 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %205 = arith.addi %204, %c-1_i32 : i32
    llvm.store %205, %2 : i32, !llvm.ptr
    %206 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i32_101 = arith.constant 1 : i32
    %207 = arith.addi %206, %c1_i32_101 : i32
    llvm.store %207, %4 : i32, !llvm.ptr
    %c16_i32_102 = arith.constant 16 : i32
    %208 = arith.cmpi eq, %207, %c16_i32_102 : i32
    %209 = arith.extui %208 : i1 to i32
    %c0_i32_103 = arith.constant 0 : i32
    %210 = arith.cmpi eq, %209, %c0_i32_103 : i32
    %211 = arith.extui %210 : i1 to i32
    %c0_i32_104 = arith.constant 0 : i32
    %212 = arith.cmpi ne, %211, %c0_i32_104 : i32
    cf.cond_br %212, ^bb28, ^bb37
  ^bb36:  // pred: ^bb33
    %c1_i32_105 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_105) : (i32) -> ()
    cf.br ^bb35
  ^bb37:  // pred: ^bb35
    cf.br ^bb27
  ^bb38:  // 2 preds: ^bb27, ^bb39
    %213 = llvm.getelementptr %11[%152] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %214 = llvm.load volatile %213 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_106 = arith.constant 0 : i64
    %215 = arith.extui %147 : i32 to i64
    %216 = arith.addi %215, %c0_i64_106 : i64
    %c8_i64_107 = arith.constant 8 : i64
    %217 = arith.addi %216, %c8_i64_107 : i64
    %c0_i32_108 = arith.constant 0 : i32
    %218 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_108) : (!llvm.ptr, i32) -> i32
    %219 = arith.extui %218 : i32 to i64
    %c65536_i64_109 = arith.constant 65536 : i64
    %220 = arith.muli %219, %c65536_i64_109 : i64
    %221 = arith.cmpi ult, %217, %220 : i64
    cf.cond_br %221, ^bb40, ^bb41
  ^bb39:  // pred: ^bb27
    %c1_i32_110 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_110) : (i32) -> ()
    cf.br ^bb38
  ^bb40:  // 2 preds: ^bb38, ^bb41
    %222 = llvm.getelementptr %11[%216] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %214, %222 {alignment = 1 : i64} : i64, !llvm.ptr
    %223 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_111 = arith.constant 32 : i32
    %224 = arith.addi %223, %c32_i32_111 : i32
    %c16_i32_112 = arith.constant 16 : i32
    %225 = arith.addi %224, %c16_i32_112 : i32
    %226 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32_113 = arith.constant 64 : i32
    %227 = arith.addi %226, %c64_i32_113 : i32
    %c16_i32_114 = arith.constant 16 : i32
    %228 = arith.addi %227, %c16_i32_114 : i32
    %c0_i64_115 = arith.constant 0 : i64
    %229 = arith.extui %228 : i32 to i64
    %230 = arith.addi %229, %c0_i64_115 : i64
    %c8_i64_116 = arith.constant 8 : i64
    %231 = arith.addi %230, %c8_i64_116 : i64
    %c0_i32_117 = arith.constant 0 : i32
    %232 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_117) : (!llvm.ptr, i32) -> i32
    %233 = arith.extui %232 : i32 to i64
    %c65536_i64_118 = arith.constant 65536 : i64
    %234 = arith.muli %233, %c65536_i64_118 : i64
    %235 = arith.cmpi ult, %231, %234 : i64
    cf.cond_br %235, ^bb42, ^bb43
  ^bb41:  // pred: ^bb38
    %c1_i32_119 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_119) : (i32) -> ()
    cf.br ^bb40
  ^bb42:  // 2 preds: ^bb40, ^bb43
    %236 = llvm.getelementptr %11[%230] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %237 = llvm.load volatile %236 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_120 = arith.constant 0 : i64
    %238 = arith.extui %225 : i32 to i64
    %239 = arith.addi %238, %c0_i64_120 : i64
    %c8_i64_121 = arith.constant 8 : i64
    %240 = arith.addi %239, %c8_i64_121 : i64
    %c0_i32_122 = arith.constant 0 : i32
    %241 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_122) : (!llvm.ptr, i32) -> i32
    %242 = arith.extui %241 : i32 to i64
    %c65536_i64_123 = arith.constant 65536 : i64
    %243 = arith.muli %242, %c65536_i64_123 : i64
    %244 = arith.cmpi ult, %240, %243 : i64
    cf.cond_br %244, ^bb44, ^bb45
  ^bb43:  // pred: ^bb40
    %c1_i32_124 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_124) : (i32) -> ()
    cf.br ^bb42
  ^bb44:  // 2 preds: ^bb42, ^bb45
    %245 = llvm.getelementptr %11[%239] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %237, %245 {alignment = 1 : i64} : i64, !llvm.ptr
    %246 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_125 = arith.constant 32 : i32
    %247 = arith.addi %246, %c32_i32_125 : i32
    %c8_i32_126 = arith.constant 8 : i32
    %248 = arith.addi %247, %c8_i32_126 : i32
    %249 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32_127 = arith.constant 64 : i32
    %250 = arith.addi %249, %c64_i32_127 : i32
    %c8_i32_128 = arith.constant 8 : i32
    %251 = arith.addi %250, %c8_i32_128 : i32
    %c0_i64_129 = arith.constant 0 : i64
    %252 = arith.extui %251 : i32 to i64
    %253 = arith.addi %252, %c0_i64_129 : i64
    %c8_i64_130 = arith.constant 8 : i64
    %254 = arith.addi %253, %c8_i64_130 : i64
    %c0_i32_131 = arith.constant 0 : i32
    %255 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_131) : (!llvm.ptr, i32) -> i32
    %256 = arith.extui %255 : i32 to i64
    %c65536_i64_132 = arith.constant 65536 : i64
    %257 = arith.muli %256, %c65536_i64_132 : i64
    %258 = arith.cmpi ult, %254, %257 : i64
    cf.cond_br %258, ^bb46, ^bb47
  ^bb45:  // pred: ^bb42
    %c1_i32_133 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_133) : (i32) -> ()
    cf.br ^bb44
  ^bb46:  // 2 preds: ^bb44, ^bb47
    %259 = llvm.getelementptr %11[%253] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %260 = llvm.load volatile %259 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_134 = arith.constant 0 : i64
    %261 = arith.extui %248 : i32 to i64
    %262 = arith.addi %261, %c0_i64_134 : i64
    %c8_i64_135 = arith.constant 8 : i64
    %263 = arith.addi %262, %c8_i64_135 : i64
    %c0_i32_136 = arith.constant 0 : i32
    %264 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_136) : (!llvm.ptr, i32) -> i32
    %265 = arith.extui %264 : i32 to i64
    %c65536_i64_137 = arith.constant 65536 : i64
    %266 = arith.muli %265, %c65536_i64_137 : i64
    %267 = arith.cmpi ult, %263, %266 : i64
    cf.cond_br %267, ^bb48, ^bb49
  ^bb47:  // pred: ^bb44
    %c1_i32_138 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_138) : (i32) -> ()
    cf.br ^bb46
  ^bb48:  // 2 preds: ^bb46, ^bb49
    %268 = llvm.getelementptr %11[%262] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %260, %268 {alignment = 1 : i64} : i64, !llvm.ptr
    %269 = llvm.load %3 : !llvm.ptr -> i32
    %270 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i64_139 = arith.constant 64 : i64
    %271 = arith.extui %270 : i32 to i64
    %272 = arith.addi %271, %c64_i64_139 : i64
    %c8_i64_140 = arith.constant 8 : i64
    %273 = arith.addi %272, %c8_i64_140 : i64
    %c0_i32_141 = arith.constant 0 : i32
    %274 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_141) : (!llvm.ptr, i32) -> i32
    %275 = arith.extui %274 : i32 to i64
    %c65536_i64_142 = arith.constant 65536 : i64
    %276 = arith.muli %275, %c65536_i64_142 : i64
    %277 = arith.cmpi ult, %273, %276 : i64
    cf.cond_br %277, ^bb50, ^bb51
  ^bb49:  // pred: ^bb46
    %c1_i32_143 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_143) : (i32) -> ()
    cf.br ^bb48
  ^bb50:  // 2 preds: ^bb48, ^bb51
    %278 = llvm.getelementptr %11[%272] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %279 = llvm.load volatile %278 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c32_i64 = arith.constant 32 : i64
    %280 = arith.extui %269 : i32 to i64
    %281 = arith.addi %280, %c32_i64 : i64
    %c8_i64_144 = arith.constant 8 : i64
    %282 = arith.addi %281, %c8_i64_144 : i64
    %c0_i32_145 = arith.constant 0 : i32
    %283 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_145) : (!llvm.ptr, i32) -> i32
    %284 = arith.extui %283 : i32 to i64
    %c65536_i64_146 = arith.constant 65536 : i64
    %285 = arith.muli %284, %c65536_i64_146 : i64
    %286 = arith.cmpi ult, %282, %285 : i64
    cf.cond_br %286, ^bb52, ^bb53
  ^bb51:  // pred: ^bb48
    %c1_i32_147 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_147) : (i32) -> ()
    cf.br ^bb50
  ^bb52:  // 2 preds: ^bb50, ^bb53
    %287 = llvm.getelementptr %11[%281] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %279, %287 {alignment = 1 : i64} : i64, !llvm.ptr
    %288 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_148 = arith.constant 32 : i32
    %289 = arith.addi %288, %c32_i32_148 : i32
    %290 = llvm.load %3 : !llvm.ptr -> i32
    %291 = llvm.call %14(%16, %289, %290) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> !llvm.void
    %292 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32_149 = arith.constant 24 : i32
    %293 = arith.addi %292, %c24_i32_149 : i32
    %294 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32_150 = arith.constant 24 : i32
    %295 = arith.addi %294, %c24_i32_150 : i32
    %c0_i64_151 = arith.constant 0 : i64
    %296 = arith.extui %295 : i32 to i64
    %297 = arith.addi %296, %c0_i64_151 : i64
    %c8_i64_152 = arith.constant 8 : i64
    %298 = arith.addi %297, %c8_i64_152 : i64
    %c0_i32_153 = arith.constant 0 : i32
    %299 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_153) : (!llvm.ptr, i32) -> i32
    %300 = arith.extui %299 : i32 to i64
    %c65536_i64_154 = arith.constant 65536 : i64
    %301 = arith.muli %300, %c65536_i64_154 : i64
    %302 = arith.cmpi ult, %298, %301 : i64
    cf.cond_br %302, ^bb54, ^bb55
  ^bb53:  // pred: ^bb50
    %c1_i32_155 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_155) : (i32) -> ()
    cf.br ^bb52
  ^bb54:  // 2 preds: ^bb52, ^bb55
    %303 = llvm.getelementptr %11[%297] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %304 = llvm.load volatile %303 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_156 = arith.constant 0 : i64
    %305 = arith.extui %293 : i32 to i64
    %306 = arith.addi %305, %c0_i64_156 : i64
    %c8_i64_157 = arith.constant 8 : i64
    %307 = arith.addi %306, %c8_i64_157 : i64
    %c0_i32_158 = arith.constant 0 : i32
    %308 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_158) : (!llvm.ptr, i32) -> i32
    %309 = arith.extui %308 : i32 to i64
    %c65536_i64_159 = arith.constant 65536 : i64
    %310 = arith.muli %309, %c65536_i64_159 : i64
    %311 = arith.cmpi ult, %307, %310 : i64
    cf.cond_br %311, ^bb56, ^bb57
  ^bb55:  // pred: ^bb52
    %c1_i32_160 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_160) : (i32) -> ()
    cf.br ^bb54
  ^bb56:  // 2 preds: ^bb54, ^bb57
    %312 = llvm.getelementptr %11[%306] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %304, %312 {alignment = 1 : i64} : i64, !llvm.ptr
    %313 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_161 = arith.constant 16 : i32
    %314 = arith.addi %313, %c16_i32_161 : i32
    %315 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_162 = arith.constant 16 : i32
    %316 = arith.addi %315, %c16_i32_162 : i32
    %c0_i64_163 = arith.constant 0 : i64
    %317 = arith.extui %316 : i32 to i64
    %318 = arith.addi %317, %c0_i64_163 : i64
    %c8_i64_164 = arith.constant 8 : i64
    %319 = arith.addi %318, %c8_i64_164 : i64
    %c0_i32_165 = arith.constant 0 : i32
    %320 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_165) : (!llvm.ptr, i32) -> i32
    %321 = arith.extui %320 : i32 to i64
    %c65536_i64_166 = arith.constant 65536 : i64
    %322 = arith.muli %321, %c65536_i64_166 : i64
    %323 = arith.cmpi ult, %319, %322 : i64
    cf.cond_br %323, ^bb58, ^bb59
  ^bb57:  // pred: ^bb54
    %c1_i32_167 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_167) : (i32) -> ()
    cf.br ^bb56
  ^bb58:  // 2 preds: ^bb56, ^bb59
    %324 = llvm.getelementptr %11[%318] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %325 = llvm.load volatile %324 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_168 = arith.constant 0 : i64
    %326 = arith.extui %314 : i32 to i64
    %327 = arith.addi %326, %c0_i64_168 : i64
    %c8_i64_169 = arith.constant 8 : i64
    %328 = arith.addi %327, %c8_i64_169 : i64
    %c0_i32_170 = arith.constant 0 : i32
    %329 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_170) : (!llvm.ptr, i32) -> i32
    %330 = arith.extui %329 : i32 to i64
    %c65536_i64_171 = arith.constant 65536 : i64
    %331 = arith.muli %330, %c65536_i64_171 : i64
    %332 = arith.cmpi ult, %328, %331 : i64
    cf.cond_br %332, ^bb60, ^bb61
  ^bb59:  // pred: ^bb56
    %c1_i32_172 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_172) : (i32) -> ()
    cf.br ^bb58
  ^bb60:  // 2 preds: ^bb58, ^bb61
    %333 = llvm.getelementptr %11[%327] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %325, %333 {alignment = 1 : i64} : i64, !llvm.ptr
    %334 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_173 = arith.constant 8 : i32
    %335 = arith.addi %334, %c8_i32_173 : i32
    %336 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_174 = arith.constant 8 : i32
    %337 = arith.addi %336, %c8_i32_174 : i32
    %c0_i64_175 = arith.constant 0 : i64
    %338 = arith.extui %337 : i32 to i64
    %339 = arith.addi %338, %c0_i64_175 : i64
    %c8_i64_176 = arith.constant 8 : i64
    %340 = arith.addi %339, %c8_i64_176 : i64
    %c0_i32_177 = arith.constant 0 : i32
    %341 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_177) : (!llvm.ptr, i32) -> i32
    %342 = arith.extui %341 : i32 to i64
    %c65536_i64_178 = arith.constant 65536 : i64
    %343 = arith.muli %342, %c65536_i64_178 : i64
    %344 = arith.cmpi ult, %340, %343 : i64
    cf.cond_br %344, ^bb62, ^bb63
  ^bb61:  // pred: ^bb58
    %c1_i32_179 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_179) : (i32) -> ()
    cf.br ^bb60
  ^bb62:  // 2 preds: ^bb60, ^bb63
    %345 = llvm.getelementptr %11[%339] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %346 = llvm.load volatile %345 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_180 = arith.constant 0 : i64
    %347 = arith.extui %335 : i32 to i64
    %348 = arith.addi %347, %c0_i64_180 : i64
    %c8_i64_181 = arith.constant 8 : i64
    %349 = arith.addi %348, %c8_i64_181 : i64
    %c0_i32_182 = arith.constant 0 : i32
    %350 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_182) : (!llvm.ptr, i32) -> i32
    %351 = arith.extui %350 : i32 to i64
    %c65536_i64_183 = arith.constant 65536 : i64
    %352 = arith.muli %351, %c65536_i64_183 : i64
    %353 = arith.cmpi ult, %349, %352 : i64
    cf.cond_br %353, ^bb64, ^bb65
  ^bb63:  // pred: ^bb60
    %c1_i32_184 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_184) : (i32) -> ()
    cf.br ^bb62
  ^bb64:  // 2 preds: ^bb62, ^bb65
    %354 = llvm.getelementptr %11[%348] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %346, %354 {alignment = 1 : i64} : i64, !llvm.ptr
    %355 = llvm.load %0 : !llvm.ptr -> i32
    %356 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_185 = arith.constant 0 : i64
    %357 = arith.extui %356 : i32 to i64
    %358 = arith.addi %357, %c0_i64_185 : i64
    %c8_i64_186 = arith.constant 8 : i64
    %359 = arith.addi %358, %c8_i64_186 : i64
    %c0_i32_187 = arith.constant 0 : i32
    %360 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_187) : (!llvm.ptr, i32) -> i32
    %361 = arith.extui %360 : i32 to i64
    %c65536_i64_188 = arith.constant 65536 : i64
    %362 = arith.muli %361, %c65536_i64_188 : i64
    %363 = arith.cmpi ult, %359, %362 : i64
    cf.cond_br %363, ^bb66, ^bb67
  ^bb65:  // pred: ^bb62
    %c1_i32_189 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_189) : (i32) -> ()
    cf.br ^bb64
  ^bb66:  // 2 preds: ^bb64, ^bb67
    %364 = llvm.getelementptr %11[%358] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %365 = llvm.load volatile %364 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_190 = arith.constant 0 : i64
    %366 = arith.extui %355 : i32 to i64
    %367 = arith.addi %366, %c0_i64_190 : i64
    %c8_i64_191 = arith.constant 8 : i64
    %368 = arith.addi %367, %c8_i64_191 : i64
    %c0_i32_192 = arith.constant 0 : i32
    %369 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_192) : (!llvm.ptr, i32) -> i32
    %370 = arith.extui %369 : i32 to i64
    %c65536_i64_193 = arith.constant 65536 : i64
    %371 = arith.muli %370, %c65536_i64_193 : i64
    %372 = arith.cmpi ult, %368, %371 : i64
    cf.cond_br %372, ^bb68, ^bb69
  ^bb67:  // pred: ^bb64
    %c1_i32_194 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_194) : (i32) -> ()
    cf.br ^bb66
  ^bb68:  // 2 preds: ^bb66, ^bb69
    %373 = llvm.getelementptr %11[%367] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %365, %373 {alignment = 1 : i64} : i64, !llvm.ptr
    %374 = llvm.load %3 : !llvm.ptr -> i32
    %c96_i32_195 = arith.constant 96 : i32
    %375 = arith.addi %374, %c96_i32_195 : i32
    llvm.store %375, %8 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb69:  // pred: ^bb66
    %c1_i32_196 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_196) : (i32) -> ()
    cf.br ^bb68
  }
  func.func @f63(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    call @f61(%arg0, %1) : (!llvm.ptr, i32) -> ()
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f64(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[184] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %2[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %7 = llvm.load %0 : !llvm.ptr -> i32
    %8 = llvm.load %1 : !llvm.ptr -> i32
    %9 = llvm.call %4(%6, %7, %8) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> !llvm.void
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f65(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[208] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %2[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %7 = llvm.load %0 : !llvm.ptr -> i32
    %8 = llvm.load %1 : !llvm.ptr -> i32
    %9 = llvm.call %4(%6, %7, %8) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> !llvm.void
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f66(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %3 = llvm.load %0 : !llvm.ptr -> i32
    %4 = llvm.load %1 : !llvm.ptr -> i32
    %5 = llvm.load %2 : !llvm.ptr -> i32
    call @f67(%arg0, %3, %4, %5) : (!llvm.ptr, i32, i32, i32) -> ()
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f67(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %10 = llvm.getelementptr %arg0[280] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.getelementptr %10[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32_9 = arith.constant 0 : i32
    llvm.store %c0_i32_9, %3 : i32, !llvm.ptr
    %15 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_10 = arith.constant 0 : i32
    %16 = arith.cmpi ne, %15, %c0_i32_10 : i32
    cf.cond_br %16, ^bb4, ^bb5
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 4 preds: ^bb5, ^bb7, ^bb8, ^bb9
    %17 = llvm.load %6 : !llvm.ptr -> i32
    %18 = llvm.load %1 : !llvm.ptr -> i32
    %19 = llvm.load %2 : !llvm.ptr -> i32
    %c5_i32 = arith.constant 5 : i32
    %c31_i32 = arith.constant 31 : i32
    %20 = arith.cmpi ule, %c5_i32, %c31_i32 : i32
    %21 = scf.if %20 -> (i32) {
      %65 = arith.shli %19, %c5_i32 : i32
      scf.yield %65 : i32
    } else {
      %c0_i32_25 = arith.constant 0 : i32
      scf.yield %c0_i32_25 : i32
    }
    %22 = arith.subi %18, %21 : i32
    %23 = llvm.load %2 : !llvm.ptr -> i32
    %24 = llvm.load %4 : !llvm.ptr -> i32
    %25 = llvm.load %5 : !llvm.ptr -> i32
    %26 = llvm.load %3 : !llvm.ptr -> i32
    %27 = llvm.load %7 : !llvm.ptr -> i32
    %28 = llvm.call %12(%14, %17, %22, %23, %24, %25, %26, %27) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32, i32, i32, i32, i32) -> !llvm.void
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %29 = llvm.load %0 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %30 = arith.addi %29, %c32_i32 : i32
    llvm.store %30, %8 : i32, !llvm.ptr
    %31 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_11 = arith.constant 1 : i32
    %32 = arith.cmpi eq, %31, %c1_i32_11 : i32
    %33 = arith.extui %32 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %34 = arith.cmpi eq, %33, %c0_i32_12 : i32
    %35 = arith.extui %34 : i1 to i32
    %c0_i32_13 = arith.constant 0 : i32
    %36 = arith.cmpi ne, %35, %c0_i32_13 : i32
    cf.cond_br %36, ^bb6, ^bb7
  ^bb5:  // pred: ^bb1
    %c0_i32_14 = arith.constant 0 : i32
    llvm.store %c0_i32_14, %4 : i32, !llvm.ptr
    %c0_i32_15 = arith.constant 0 : i32
    llvm.store %c0_i32_15, %5 : i32, !llvm.ptr
    %37 = llvm.load %0 : !llvm.ptr -> i32
    llvm.store %37, %6 : i32, !llvm.ptr
    %c0_i32_16 = arith.constant 0 : i32
    llvm.store %c0_i32_16, %7 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb6:  // pred: ^bb4
    %38 = llvm.load %0 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %39 = arith.addi %38, %c64_i32 : i32
    llvm.store %39, %9 : i32, !llvm.ptr
    %40 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %41 = arith.cmpi uge, %40, %c3_i32 : i32
    %42 = arith.extui %41 : i1 to i32
    %c0_i32_17 = arith.constant 0 : i32
    %43 = arith.cmpi ne, %42, %c0_i32_17 : i32
    cf.cond_br %43, ^bb8, ^bb9
  ^bb7:  // pred: ^bb4
    %44 = llvm.load %0 : !llvm.ptr -> i32
    llvm.store %44, %4 : i32, !llvm.ptr
    %c0_i32_18 = arith.constant 0 : i32
    llvm.store %c0_i32_18, %5 : i32, !llvm.ptr
    %45 = llvm.load %8 : !llvm.ptr -> i32
    llvm.store %45, %6 : i32, !llvm.ptr
    %c0_i32_19 = arith.constant 0 : i32
    llvm.store %c0_i32_19, %7 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb8:  // pred: ^bb6
    %46 = llvm.load %0 : !llvm.ptr -> i32
    %c96_i32 = arith.constant 96 : i32
    %47 = arith.addi %46, %c96_i32 : i32
    llvm.store %47, %3 : i32, !llvm.ptr
    %48 = llvm.load %0 : !llvm.ptr -> i32
    %c128_i32 = arith.constant 128 : i32
    %49 = arith.addi %48, %c128_i32 : i32
    %50 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i32_20 = arith.constant 3 : i32
    %51 = arith.cmpi eq, %50, %c3_i32_20 : i32
    %52 = arith.extui %51 : i1 to i32
    llvm.store %52, %4 : i32, !llvm.ptr
    %c0_i32_21 = arith.constant 0 : i32
    %53 = arith.cmpi ne, %52, %c0_i32_21 : i32
    %54 = arith.select %53, %47, %49 : i32
    llvm.store %54, %6 : i32, !llvm.ptr
    %c0_i32_22 = arith.constant 0 : i32
    %55 = llvm.load %3 : !llvm.ptr -> i32
    %56 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i32_23 = arith.constant 0 : i32
    %57 = arith.cmpi ne, %56, %c0_i32_23 : i32
    %58 = arith.select %57, %c0_i32_22, %55 : i32
    llvm.store %58, %7 : i32, !llvm.ptr
    %59 = llvm.load %9 : !llvm.ptr -> i32
    llvm.store %59, %3 : i32, !llvm.ptr
    %60 = llvm.load %0 : !llvm.ptr -> i32
    llvm.store %60, %4 : i32, !llvm.ptr
    %61 = llvm.load %8 : !llvm.ptr -> i32
    llvm.store %61, %5 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb9:  // pred: ^bb6
    %62 = llvm.load %0 : !llvm.ptr -> i32
    llvm.store %62, %4 : i32, !llvm.ptr
    %63 = llvm.load %8 : !llvm.ptr -> i32
    llvm.store %63, %5 : i32, !llvm.ptr
    %64 = llvm.load %9 : !llvm.ptr -> i32
    llvm.store %64, %6 : i32, !llvm.ptr
    %c0_i32_24 = arith.constant 0 : i32
    llvm.store %c0_i32_24, %7 : i32, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f68(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.getelementptr %arg0[136] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    %14 = llvm.getelementptr %11[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %16 = llvm.load %7 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %17 = arith.subi %16, %c16_i32 : i32
    llvm.store %17, %3 : i32, !llvm.ptr
    llvm.store %17, %7 : i32, !llvm.ptr
    %18 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %19 = arith.addi %18, %c4_i32 : i32
    %20 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_5 = arith.constant 0 : i32
    %c1_i32_6 = arith.constant 1 : i32
    %c1_i32_7 = arith.constant 1 : i32
    call @f111(%arg0, %19, %20, %c0_i32_5, %c1_i32_6, %c1_i32_7) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %21 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %22 = arith.extui %21 : i32 to i64
    %23 = arith.addi %22, %c8_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %24 = arith.addi %23, %c4_i64 : i64
    %c0_i32_8 = arith.constant 0 : i32
    %25 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_8) : (!llvm.ptr, i32) -> i32
    %26 = arith.extui %25 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %27 = arith.muli %26, %c65536_i64 : i64
    %28 = arith.cmpi ult, %24, %27 : i64
    cf.cond_br %28, ^bb3, ^bb4
  ^bb2:  // pred: ^bb17
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %29 = llvm.getelementptr %10[%23] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %30 = llvm.load volatile %29 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %30, %4 : i32, !llvm.ptr
    %31 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64_9 = arith.constant 4 : i64
    %32 = arith.extui %31 : i32 to i64
    %33 = arith.addi %32, %c4_i64_9 : i64
    %c4_i64_10 = arith.constant 4 : i64
    %34 = arith.addi %33, %c4_i64_10 : i64
    %c0_i32_11 = arith.constant 0 : i32
    %35 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_11) : (!llvm.ptr, i32) -> i32
    %36 = arith.extui %35 : i32 to i64
    %c65536_i64_12 = arith.constant 65536 : i64
    %37 = arith.muli %36, %c65536_i64_12 : i64
    %38 = arith.cmpi ult, %34, %37 : i64
    cf.cond_br %38, ^bb6, ^bb7
  ^bb4:  // pred: ^bb1
    %c1_i32_13 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_13) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // pred: ^bb6
    %39 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %40 = arith.extui %39 : i32 to i64
    %41 = arith.addi %40, %c12_i64 : i64
    %c4_i64_14 = arith.constant 4 : i64
    %42 = arith.addi %41, %c4_i64_14 : i64
    %c0_i32_15 = arith.constant 0 : i32
    %43 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_15) : (!llvm.ptr, i32) -> i32
    %44 = arith.extui %43 : i32 to i64
    %c65536_i64_16 = arith.constant 65536 : i64
    %45 = arith.muli %44, %c65536_i64_16 : i64
    %46 = arith.cmpi ult, %42, %45 : i64
    cf.cond_br %46, ^bb11, ^bb12
  ^bb6:  // 2 preds: ^bb3, ^bb7
    %47 = llvm.getelementptr %10[%33] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %48 = llvm.load volatile %47 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_17 = arith.constant 1 : i32
    %49 = arith.cmpi eq, %48, %c1_i32_17 : i32
    %50 = arith.extui %49 : i1 to i32
    %c0_i32_18 = arith.constant 0 : i32
    %51 = arith.cmpi eq, %50, %c0_i32_18 : i32
    %52 = arith.extui %51 : i1 to i32
    %c0_i32_19 = arith.constant 0 : i32
    %53 = arith.cmpi ne, %52, %c0_i32_19 : i32
    cf.cond_br %53, ^bb5, ^bb8
  ^bb7:  // pred: ^bb3
    %c1_i32_20 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_20) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // pred: ^bb6
    %54 = llvm.load %4 : !llvm.ptr -> i32
    %55 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i64_21 = arith.constant 12 : i64
    %56 = arith.extui %55 : i32 to i64
    %57 = arith.addi %56, %c12_i64_21 : i64
    %c4_i64_22 = arith.constant 4 : i64
    %58 = arith.addi %57, %c4_i64_22 : i64
    %c0_i32_23 = arith.constant 0 : i32
    %59 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_23) : (!llvm.ptr, i32) -> i32
    %60 = arith.extui %59 : i32 to i64
    %c65536_i64_24 = arith.constant 65536 : i64
    %61 = arith.muli %60, %c65536_i64_24 : i64
    %62 = arith.cmpi ult, %58, %61 : i64
    cf.cond_br %62, ^bb9, ^bb10
  ^bb9:  // 2 preds: ^bb8, ^bb10
    %63 = llvm.getelementptr %10[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %64 = llvm.load volatile %63 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f143(%arg0, %54, %64) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb10:  // pred: ^bb8
    %c1_i32_25 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_25) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb5, ^bb12
    %65 = llvm.getelementptr %10[%41] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %66 = llvm.load volatile %65 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %66, %5 : i32, !llvm.ptr
    %c0_i32_26 = arith.constant 0 : i32
    %67 = llvm.load %2 : !llvm.ptr -> i32
    %68 = llvm.call %13(%15, %66, %c0_i32_26, %67) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> !llvm.void
    %69 = llvm.load %0 : !llvm.ptr -> i32
    %70 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_27 = arith.constant 8 : i64
    %71 = arith.extui %69 : i32 to i64
    %72 = arith.addi %71, %c8_i64_27 : i64
    %c4_i64_28 = arith.constant 4 : i64
    %73 = arith.addi %72, %c4_i64_28 : i64
    %c0_i32_29 = arith.constant 0 : i32
    %74 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_29) : (!llvm.ptr, i32) -> i32
    %75 = arith.extui %74 : i32 to i64
    %c65536_i64_30 = arith.constant 65536 : i64
    %76 = arith.muli %75, %c65536_i64_30 : i64
    %77 = arith.cmpi ult, %73, %76 : i64
    cf.cond_br %77, ^bb13, ^bb14
  ^bb12:  // pred: ^bb5
    %c1_i32_31 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_31) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %78 = llvm.getelementptr %10[%72] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %70, %78 {alignment = 1 : i64} : i32, !llvm.ptr
    %79 = llvm.load %0 : !llvm.ptr -> i32
    %80 = llvm.load %5 : !llvm.ptr -> i32
    %c4_i64_32 = arith.constant 4 : i64
    %81 = arith.extui %79 : i32 to i64
    %82 = arith.addi %81, %c4_i64_32 : i64
    %c4_i64_33 = arith.constant 4 : i64
    %83 = arith.addi %82, %c4_i64_33 : i64
    %c0_i32_34 = arith.constant 0 : i32
    %84 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_34) : (!llvm.ptr, i32) -> i32
    %85 = arith.extui %84 : i32 to i64
    %c65536_i64_35 = arith.constant 65536 : i64
    %86 = arith.muli %85, %c65536_i64_35 : i64
    %87 = arith.cmpi ult, %83, %86 : i64
    cf.cond_br %87, ^bb15, ^bb16
  ^bb14:  // pred: ^bb11
    %c1_i32_36 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_36) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // 2 preds: ^bb13, ^bb16
    %88 = llvm.getelementptr %10[%82] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %80, %88 {alignment = 1 : i64} : i32, !llvm.ptr
    %89 = llvm.load %0 : !llvm.ptr -> i32
    %90 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %91 = arith.extui %89 : i32 to i64
    %92 = arith.addi %91, %c0_i64 : i64
    %c4_i64_37 = arith.constant 4 : i64
    %93 = arith.addi %92, %c4_i64_37 : i64
    %c0_i32_38 = arith.constant 0 : i32
    %94 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_38) : (!llvm.ptr, i32) -> i32
    %95 = arith.extui %94 : i32 to i64
    %c65536_i64_39 = arith.constant 65536 : i64
    %96 = arith.muli %95, %c65536_i64_39 : i64
    %97 = arith.cmpi ult, %93, %96 : i64
    cf.cond_br %97, ^bb17, ^bb18
  ^bb16:  // pred: ^bb13
    %c1_i32_40 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_40) : (i32) -> ()
    cf.br ^bb15
  ^bb17:  // 2 preds: ^bb15, ^bb18
    %98 = llvm.getelementptr %10[%92] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %90, %98 {alignment = 1 : i64} : i32, !llvm.ptr
    %99 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_41 = arith.constant 16 : i32
    %100 = arith.addi %99, %c16_i32_41 : i32
    llvm.store %100, %7 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb18:  // pred: ^bb15
    %c1_i32_42 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_42) : (i32) -> ()
    cf.br ^bb17
  }
  func.func @f69(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %7 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.getelementptr %arg0[232] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.getelementptr %12[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %15 = llvm.getelementptr %12[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %17 = llvm.load %8 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %18 = arith.subi %17, %c64_i32 : i32
    llvm.store %18, %3 : i32, !llvm.ptr
    llvm.store %18, %8 : i32, !llvm.ptr
    %19 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %20 = arith.addi %19, %c32_i32 : i32
    %c24_i32 = arith.constant 24 : i32
    %21 = arith.addi %20, %c24_i32 : i32
    %22 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i32_6 = arith.constant 24 : i32
    %23 = arith.addi %22, %c24_i32_6 : i32
    %c0_i64 = arith.constant 0 : i64
    %24 = arith.extui %23 : i32 to i64
    %25 = arith.addi %24, %c0_i64 : i64
    %c8_i64 = arith.constant 8 : i64
    %26 = arith.addi %25, %c8_i64 : i64
    %c0_i32_7 = arith.constant 0 : i32
    %27 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_7) : (!llvm.ptr, i32) -> i32
    %28 = arith.extui %27 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %29 = arith.muli %28, %c65536_i64 : i64
    %30 = arith.cmpi ult, %26, %29 : i64
    cf.cond_br %30, ^bb3, ^bb4
  ^bb2:  // pred: ^bb44
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %31 = llvm.getelementptr %11[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %32 = llvm.load volatile %31 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_8 = arith.constant 0 : i64
    %33 = arith.extui %21 : i32 to i64
    %34 = arith.addi %33, %c0_i64_8 : i64
    %c8_i64_9 = arith.constant 8 : i64
    %35 = arith.addi %34, %c8_i64_9 : i64
    %c0_i32_10 = arith.constant 0 : i32
    %36 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_10) : (!llvm.ptr, i32) -> i32
    %37 = arith.extui %36 : i32 to i64
    %c65536_i64_11 = arith.constant 65536 : i64
    %38 = arith.muli %37, %c65536_i64_11 : i64
    %39 = arith.cmpi ult, %35, %38 : i64
    cf.cond_br %39, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c1_i32_12 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_12) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %40 = llvm.getelementptr %11[%34] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %32, %40 {alignment = 1 : i64} : i64, !llvm.ptr
    %41 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_13 = arith.constant 32 : i32
    %42 = arith.addi %41, %c32_i32_13 : i32
    %c16_i32 = arith.constant 16 : i32
    %43 = arith.addi %42, %c16_i32 : i32
    %44 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32_14 = arith.constant 16 : i32
    %45 = arith.addi %44, %c16_i32_14 : i32
    %c0_i64_15 = arith.constant 0 : i64
    %46 = arith.extui %45 : i32 to i64
    %47 = arith.addi %46, %c0_i64_15 : i64
    %c8_i64_16 = arith.constant 8 : i64
    %48 = arith.addi %47, %c8_i64_16 : i64
    %c0_i32_17 = arith.constant 0 : i32
    %49 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_17) : (!llvm.ptr, i32) -> i32
    %50 = arith.extui %49 : i32 to i64
    %c65536_i64_18 = arith.constant 65536 : i64
    %51 = arith.muli %50, %c65536_i64_18 : i64
    %52 = arith.cmpi ult, %48, %51 : i64
    cf.cond_br %52, ^bb7, ^bb8
  ^bb6:  // pred: ^bb3
    %c1_i32_19 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_19) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %53 = llvm.getelementptr %11[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %54 = llvm.load volatile %53 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_20 = arith.constant 0 : i64
    %55 = arith.extui %43 : i32 to i64
    %56 = arith.addi %55, %c0_i64_20 : i64
    %c8_i64_21 = arith.constant 8 : i64
    %57 = arith.addi %56, %c8_i64_21 : i64
    %c0_i32_22 = arith.constant 0 : i32
    %58 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_22) : (!llvm.ptr, i32) -> i32
    %59 = arith.extui %58 : i32 to i64
    %c65536_i64_23 = arith.constant 65536 : i64
    %60 = arith.muli %59, %c65536_i64_23 : i64
    %61 = arith.cmpi ult, %57, %60 : i64
    cf.cond_br %61, ^bb9, ^bb10
  ^bb8:  // pred: ^bb5
    %c1_i32_24 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_24) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %62 = llvm.getelementptr %11[%56] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %54, %62 {alignment = 1 : i64} : i64, !llvm.ptr
    %63 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_25 = arith.constant 32 : i32
    %64 = arith.addi %63, %c32_i32_25 : i32
    %c8_i32 = arith.constant 8 : i32
    %65 = arith.addi %64, %c8_i32 : i32
    %66 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_26 = arith.constant 8 : i32
    %67 = arith.addi %66, %c8_i32_26 : i32
    %c0_i64_27 = arith.constant 0 : i64
    %68 = arith.extui %67 : i32 to i64
    %69 = arith.addi %68, %c0_i64_27 : i64
    %c8_i64_28 = arith.constant 8 : i64
    %70 = arith.addi %69, %c8_i64_28 : i64
    %c0_i32_29 = arith.constant 0 : i32
    %71 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_29) : (!llvm.ptr, i32) -> i32
    %72 = arith.extui %71 : i32 to i64
    %c65536_i64_30 = arith.constant 65536 : i64
    %73 = arith.muli %72, %c65536_i64_30 : i64
    %74 = arith.cmpi ult, %70, %73 : i64
    cf.cond_br %74, ^bb11, ^bb12
  ^bb10:  // pred: ^bb7
    %c1_i32_31 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_31) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %75 = llvm.getelementptr %11[%69] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %76 = llvm.load volatile %75 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_32 = arith.constant 0 : i64
    %77 = arith.extui %65 : i32 to i64
    %78 = arith.addi %77, %c0_i64_32 : i64
    %c8_i64_33 = arith.constant 8 : i64
    %79 = arith.addi %78, %c8_i64_33 : i64
    %c0_i32_34 = arith.constant 0 : i32
    %80 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_34) : (!llvm.ptr, i32) -> i32
    %81 = arith.extui %80 : i32 to i64
    %c65536_i64_35 = arith.constant 65536 : i64
    %82 = arith.muli %81, %c65536_i64_35 : i64
    %83 = arith.cmpi ult, %79, %82 : i64
    cf.cond_br %83, ^bb13, ^bb14
  ^bb12:  // pred: ^bb9
    %c1_i32_36 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_36) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %84 = llvm.getelementptr %11[%78] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %76, %84 {alignment = 1 : i64} : i64, !llvm.ptr
    %85 = llvm.load %3 : !llvm.ptr -> i32
    %86 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_37 = arith.constant 0 : i64
    %87 = arith.extui %86 : i32 to i64
    %88 = arith.addi %87, %c0_i64_37 : i64
    %c8_i64_38 = arith.constant 8 : i64
    %89 = arith.addi %88, %c8_i64_38 : i64
    %c0_i32_39 = arith.constant 0 : i32
    %90 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_39) : (!llvm.ptr, i32) -> i32
    %91 = arith.extui %90 : i32 to i64
    %c65536_i64_40 = arith.constant 65536 : i64
    %92 = arith.muli %91, %c65536_i64_40 : i64
    %93 = arith.cmpi ult, %89, %92 : i64
    cf.cond_br %93, ^bb15, ^bb16
  ^bb14:  // pred: ^bb11
    %c1_i32_41 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_41) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // 2 preds: ^bb13, ^bb16
    %94 = llvm.getelementptr %11[%88] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %95 = llvm.load volatile %94 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c32_i64 = arith.constant 32 : i64
    %96 = arith.extui %85 : i32 to i64
    %97 = arith.addi %96, %c32_i64 : i64
    %c8_i64_42 = arith.constant 8 : i64
    %98 = arith.addi %97, %c8_i64_42 : i64
    %c0_i32_43 = arith.constant 0 : i32
    %99 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_43) : (!llvm.ptr, i32) -> i32
    %100 = arith.extui %99 : i32 to i64
    %c65536_i64_44 = arith.constant 65536 : i64
    %101 = arith.muli %100, %c65536_i64_44 : i64
    %102 = arith.cmpi ult, %98, %101 : i64
    cf.cond_br %102, ^bb17, ^bb18
  ^bb16:  // pred: ^bb13
    %c1_i32_45 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_45) : (i32) -> ()
    cf.br ^bb15
  ^bb17:  // 2 preds: ^bb15, ^bb18
    %103 = llvm.getelementptr %11[%97] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %95, %103 {alignment = 1 : i64} : i64, !llvm.ptr
    %104 = llvm.load %3 : !llvm.ptr -> i32
    %c63_i32 = arith.constant 63 : i32
    %105 = arith.addi %104, %c63_i32 : i32
    llvm.store %105, %1 : i32, !llvm.ptr
    %c0_i32_46 = arith.constant 0 : i32
    llvm.store %c0_i32_46, %4 : i32, !llvm.ptr
    cf.br ^bb20
  ^bb18:  // pred: ^bb15
    %c1_i32_47 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_47) : (i32) -> ()
    cf.br ^bb17
  ^bb19:  // pred: ^bb29
    %106 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32_48 = arith.constant 24 : i32
    %107 = arith.addi %106, %c24_i32_48 : i32
    %108 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_49 = arith.constant 32 : i32
    %109 = arith.addi %108, %c32_i32_49 : i32
    %c24_i32_50 = arith.constant 24 : i32
    %110 = arith.addi %109, %c24_i32_50 : i32
    %c0_i64_51 = arith.constant 0 : i64
    %111 = arith.extui %110 : i32 to i64
    %112 = arith.addi %111, %c0_i64_51 : i64
    %c8_i64_52 = arith.constant 8 : i64
    %113 = arith.addi %112, %c8_i64_52 : i64
    %c0_i32_53 = arith.constant 0 : i32
    %114 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_53) : (!llvm.ptr, i32) -> i32
    %115 = arith.extui %114 : i32 to i64
    %c65536_i64_54 = arith.constant 65536 : i64
    %116 = arith.muli %115, %c65536_i64_54 : i64
    %117 = arith.cmpi ult, %113, %116 : i64
    cf.cond_br %117, ^bb30, ^bb31
  ^bb20:  // 2 preds: ^bb17, ^bb27
    %118 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_55 = arith.constant 32 : i32
    %119 = arith.addi %118, %c32_i32_55 : i32
    %120 = llvm.load %4 : !llvm.ptr -> i32
    %121 = arith.addi %119, %120 : i32
    llvm.store %121, %5 : i32, !llvm.ptr
    %c0_i64_56 = arith.constant 0 : i64
    %122 = arith.extui %121 : i32 to i64
    %123 = arith.addi %122, %c0_i64_56 : i64
    %c1_i64 = arith.constant 1 : i64
    %124 = arith.addi %123, %c1_i64 : i64
    %c0_i32_57 = arith.constant 0 : i32
    %125 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_57) : (!llvm.ptr, i32) -> i32
    %126 = arith.extui %125 : i32 to i64
    %c65536_i64_58 = arith.constant 65536 : i64
    %127 = arith.muli %126, %c65536_i64_58 : i64
    %128 = arith.cmpi ult, %124, %127 : i64
    cf.cond_br %128, ^bb21, ^bb22
  ^bb21:  // 2 preds: ^bb20, ^bb22
    %129 = llvm.getelementptr %11[%123] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %130 = llvm.load volatile %129 {alignment = 1 : i64} : !llvm.ptr -> i8
    %131 = arith.extui %130 : i8 to i32
    llvm.store %131, %6 : i32, !llvm.ptr
    %132 = llvm.load %5 : !llvm.ptr -> i32
    %133 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_59 = arith.constant 0 : i64
    %134 = arith.extui %133 : i32 to i64
    %135 = arith.addi %134, %c0_i64_59 : i64
    %c1_i64_60 = arith.constant 1 : i64
    %136 = arith.addi %135, %c1_i64_60 : i64
    %c0_i32_61 = arith.constant 0 : i32
    %137 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_61) : (!llvm.ptr, i32) -> i32
    %138 = arith.extui %137 : i32 to i64
    %c65536_i64_62 = arith.constant 65536 : i64
    %139 = arith.muli %138, %c65536_i64_62 : i64
    %140 = arith.cmpi ult, %136, %139 : i64
    cf.cond_br %140, ^bb23, ^bb24
  ^bb22:  // pred: ^bb20
    %c1_i32_63 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_63) : (i32) -> ()
    cf.br ^bb21
  ^bb23:  // 2 preds: ^bb21, ^bb24
    %141 = llvm.getelementptr %11[%135] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %142 = llvm.load volatile %141 {alignment = 1 : i64} : !llvm.ptr -> i8
    %143 = arith.extui %142 : i8 to i32
    %c0_i64_64 = arith.constant 0 : i64
    %144 = arith.extui %132 : i32 to i64
    %145 = arith.addi %144, %c0_i64_64 : i64
    %c1_i64_65 = arith.constant 1 : i64
    %146 = arith.addi %145, %c1_i64_65 : i64
    %c0_i32_66 = arith.constant 0 : i32
    %147 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_66) : (!llvm.ptr, i32) -> i32
    %148 = arith.extui %147 : i32 to i64
    %c65536_i64_67 = arith.constant 65536 : i64
    %149 = arith.muli %148, %c65536_i64_67 : i64
    %150 = arith.cmpi ult, %146, %149 : i64
    cf.cond_br %150, ^bb25, ^bb26
  ^bb24:  // pred: ^bb21
    %c1_i32_68 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_68) : (i32) -> ()
    cf.br ^bb23
  ^bb25:  // 2 preds: ^bb23, ^bb26
    %151 = llvm.getelementptr %11[%145] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %152 = arith.trunci %143 : i32 to i8
    llvm.store volatile %152, %151 {alignment = 1 : i64} : i8, !llvm.ptr
    %153 = llvm.load %1 : !llvm.ptr -> i32
    %154 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_69 = arith.constant 0 : i64
    %155 = arith.extui %153 : i32 to i64
    %156 = arith.addi %155, %c0_i64_69 : i64
    %c1_i64_70 = arith.constant 1 : i64
    %157 = arith.addi %156, %c1_i64_70 : i64
    %c0_i32_71 = arith.constant 0 : i32
    %158 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_71) : (!llvm.ptr, i32) -> i32
    %159 = arith.extui %158 : i32 to i64
    %c65536_i64_72 = arith.constant 65536 : i64
    %160 = arith.muli %159, %c65536_i64_72 : i64
    %161 = arith.cmpi ult, %157, %160 : i64
    cf.cond_br %161, ^bb27, ^bb28
  ^bb26:  // pred: ^bb23
    %c1_i32_73 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_73) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // 2 preds: ^bb25, ^bb28
    %162 = llvm.getelementptr %11[%156] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %163 = arith.trunci %154 : i32 to i8
    llvm.store volatile %163, %162 {alignment = 1 : i64} : i8, !llvm.ptr
    %164 = llvm.load %1 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %165 = arith.addi %164, %c-1_i32 : i32
    llvm.store %165, %1 : i32, !llvm.ptr
    %166 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i32_74 = arith.constant 1 : i32
    %167 = arith.addi %166, %c1_i32_74 : i32
    llvm.store %167, %4 : i32, !llvm.ptr
    %c16_i32_75 = arith.constant 16 : i32
    %168 = arith.cmpi eq, %167, %c16_i32_75 : i32
    %169 = arith.extui %168 : i1 to i32
    %c0_i32_76 = arith.constant 0 : i32
    %170 = arith.cmpi eq, %169, %c0_i32_76 : i32
    %171 = arith.extui %170 : i1 to i32
    %c0_i32_77 = arith.constant 0 : i32
    %172 = arith.cmpi ne, %171, %c0_i32_77 : i32
    cf.cond_br %172, ^bb20, ^bb29
  ^bb28:  // pred: ^bb25
    %c1_i32_78 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_78) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // pred: ^bb27
    cf.br ^bb19
  ^bb30:  // 2 preds: ^bb19, ^bb31
    %173 = llvm.getelementptr %11[%112] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %174 = llvm.load volatile %173 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_79 = arith.constant 0 : i64
    %175 = arith.extui %107 : i32 to i64
    %176 = arith.addi %175, %c0_i64_79 : i64
    %c8_i64_80 = arith.constant 8 : i64
    %177 = arith.addi %176, %c8_i64_80 : i64
    %c0_i32_81 = arith.constant 0 : i32
    %178 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_81) : (!llvm.ptr, i32) -> i32
    %179 = arith.extui %178 : i32 to i64
    %c65536_i64_82 = arith.constant 65536 : i64
    %180 = arith.muli %179, %c65536_i64_82 : i64
    %181 = arith.cmpi ult, %177, %180 : i64
    cf.cond_br %181, ^bb32, ^bb33
  ^bb31:  // pred: ^bb19
    %c1_i32_83 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_83) : (i32) -> ()
    cf.br ^bb30
  ^bb32:  // 2 preds: ^bb30, ^bb33
    %182 = llvm.getelementptr %11[%176] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %174, %182 {alignment = 1 : i64} : i64, !llvm.ptr
    %183 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_84 = arith.constant 16 : i32
    %184 = arith.addi %183, %c16_i32_84 : i32
    %185 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_85 = arith.constant 32 : i32
    %186 = arith.addi %185, %c32_i32_85 : i32
    %c16_i32_86 = arith.constant 16 : i32
    %187 = arith.addi %186, %c16_i32_86 : i32
    %c0_i64_87 = arith.constant 0 : i64
    %188 = arith.extui %187 : i32 to i64
    %189 = arith.addi %188, %c0_i64_87 : i64
    %c8_i64_88 = arith.constant 8 : i64
    %190 = arith.addi %189, %c8_i64_88 : i64
    %c0_i32_89 = arith.constant 0 : i32
    %191 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_89) : (!llvm.ptr, i32) -> i32
    %192 = arith.extui %191 : i32 to i64
    %c65536_i64_90 = arith.constant 65536 : i64
    %193 = arith.muli %192, %c65536_i64_90 : i64
    %194 = arith.cmpi ult, %190, %193 : i64
    cf.cond_br %194, ^bb34, ^bb35
  ^bb33:  // pred: ^bb30
    %c1_i32_91 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_91) : (i32) -> ()
    cf.br ^bb32
  ^bb34:  // 2 preds: ^bb32, ^bb35
    %195 = llvm.getelementptr %11[%189] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %196 = llvm.load volatile %195 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_92 = arith.constant 0 : i64
    %197 = arith.extui %184 : i32 to i64
    %198 = arith.addi %197, %c0_i64_92 : i64
    %c8_i64_93 = arith.constant 8 : i64
    %199 = arith.addi %198, %c8_i64_93 : i64
    %c0_i32_94 = arith.constant 0 : i32
    %200 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_94) : (!llvm.ptr, i32) -> i32
    %201 = arith.extui %200 : i32 to i64
    %c65536_i64_95 = arith.constant 65536 : i64
    %202 = arith.muli %201, %c65536_i64_95 : i64
    %203 = arith.cmpi ult, %199, %202 : i64
    cf.cond_br %203, ^bb36, ^bb37
  ^bb35:  // pred: ^bb32
    %c1_i32_96 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_96) : (i32) -> ()
    cf.br ^bb34
  ^bb36:  // 2 preds: ^bb34, ^bb37
    %204 = llvm.getelementptr %11[%198] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %196, %204 {alignment = 1 : i64} : i64, !llvm.ptr
    %205 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_97 = arith.constant 8 : i32
    %206 = arith.addi %205, %c8_i32_97 : i32
    %207 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_98 = arith.constant 32 : i32
    %208 = arith.addi %207, %c32_i32_98 : i32
    %c8_i32_99 = arith.constant 8 : i32
    %209 = arith.addi %208, %c8_i32_99 : i32
    %c0_i64_100 = arith.constant 0 : i64
    %210 = arith.extui %209 : i32 to i64
    %211 = arith.addi %210, %c0_i64_100 : i64
    %c8_i64_101 = arith.constant 8 : i64
    %212 = arith.addi %211, %c8_i64_101 : i64
    %c0_i32_102 = arith.constant 0 : i32
    %213 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_102) : (!llvm.ptr, i32) -> i32
    %214 = arith.extui %213 : i32 to i64
    %c65536_i64_103 = arith.constant 65536 : i64
    %215 = arith.muli %214, %c65536_i64_103 : i64
    %216 = arith.cmpi ult, %212, %215 : i64
    cf.cond_br %216, ^bb38, ^bb39
  ^bb37:  // pred: ^bb34
    %c1_i32_104 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_104) : (i32) -> ()
    cf.br ^bb36
  ^bb38:  // 2 preds: ^bb36, ^bb39
    %217 = llvm.getelementptr %11[%211] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %218 = llvm.load volatile %217 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_105 = arith.constant 0 : i64
    %219 = arith.extui %206 : i32 to i64
    %220 = arith.addi %219, %c0_i64_105 : i64
    %c8_i64_106 = arith.constant 8 : i64
    %221 = arith.addi %220, %c8_i64_106 : i64
    %c0_i32_107 = arith.constant 0 : i32
    %222 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_107) : (!llvm.ptr, i32) -> i32
    %223 = arith.extui %222 : i32 to i64
    %c65536_i64_108 = arith.constant 65536 : i64
    %224 = arith.muli %223, %c65536_i64_108 : i64
    %225 = arith.cmpi ult, %221, %224 : i64
    cf.cond_br %225, ^bb40, ^bb41
  ^bb39:  // pred: ^bb36
    %c1_i32_109 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_109) : (i32) -> ()
    cf.br ^bb38
  ^bb40:  // 2 preds: ^bb38, ^bb41
    %226 = llvm.getelementptr %11[%220] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %218, %226 {alignment = 1 : i64} : i64, !llvm.ptr
    %227 = llvm.load %3 : !llvm.ptr -> i32
    %228 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i64_110 = arith.constant 32 : i64
    %229 = arith.extui %228 : i32 to i64
    %230 = arith.addi %229, %c32_i64_110 : i64
    %c8_i64_111 = arith.constant 8 : i64
    %231 = arith.addi %230, %c8_i64_111 : i64
    %c0_i32_112 = arith.constant 0 : i32
    %232 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_112) : (!llvm.ptr, i32) -> i32
    %233 = arith.extui %232 : i32 to i64
    %c65536_i64_113 = arith.constant 65536 : i64
    %234 = arith.muli %233, %c65536_i64_113 : i64
    %235 = arith.cmpi ult, %231, %234 : i64
    cf.cond_br %235, ^bb42, ^bb43
  ^bb41:  // pred: ^bb38
    %c1_i32_114 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_114) : (i32) -> ()
    cf.br ^bb40
  ^bb42:  // 2 preds: ^bb40, ^bb43
    %236 = llvm.getelementptr %11[%230] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %237 = llvm.load volatile %236 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_115 = arith.constant 0 : i64
    %238 = arith.extui %227 : i32 to i64
    %239 = arith.addi %238, %c0_i64_115 : i64
    %c8_i64_116 = arith.constant 8 : i64
    %240 = arith.addi %239, %c8_i64_116 : i64
    %c0_i32_117 = arith.constant 0 : i32
    %241 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_117) : (!llvm.ptr, i32) -> i32
    %242 = arith.extui %241 : i32 to i64
    %c65536_i64_118 = arith.constant 65536 : i64
    %243 = arith.muli %242, %c65536_i64_118 : i64
    %244 = arith.cmpi ult, %240, %243 : i64
    cf.cond_br %244, ^bb44, ^bb45
  ^bb43:  // pred: ^bb40
    %c1_i32_119 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_119) : (i32) -> ()
    cf.br ^bb42
  ^bb44:  // 2 preds: ^bb42, ^bb45
    %245 = llvm.getelementptr %11[%239] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %237, %245 {alignment = 1 : i64} : i64, !llvm.ptr
    %246 = llvm.load %3 : !llvm.ptr -> i32
    %247 = llvm.load %2 : !llvm.ptr -> i32
    %248 = llvm.call %14(%16, %246, %247) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> !llvm.void
    %249 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32_120 = arith.constant 64 : i32
    %250 = arith.addi %249, %c64_i32_120 : i32
    llvm.store %250, %8 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb45:  // pred: ^bb42
    %c1_i32_121 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_121) : (i32) -> ()
    cf.br ^bb44
  }
  func.func @f70(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f71(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32_1 = arith.constant 0 : i32
    %c1051616_i64 = arith.constant 1051616 : i64
    %5 = arith.extui %c0_i32_1 : i32 to i64
    %6 = arith.addi %5, %c1051616_i64 : i64
    %c1_i64 = arith.constant 1 : i64
    %7 = arith.addi %6, %c1_i64 : i64
    %c0_i32_2 = arith.constant 0 : i32
    %8 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2) : (!llvm.ptr, i32) -> i32
    %9 = arith.extui %8 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %10 = arith.muli %9, %c65536_i64 : i64
    %11 = arith.cmpi ult, %7, %10 : i64
    cf.cond_br %11, ^bb5, ^bb6
  ^bb2(%12: i32):  // pred: ^bb3
    return %12 : i32
  ^bb3:  // 2 preds: ^bb10, ^bb12
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_3 = arith.constant 1 : i32
    %14 = arith.andi %13, %c1_i32_3 : i32
    cf.br ^bb2(%14 : i32)
  ^bb4:  // pred: ^bb5
    %c0_i32_4 = arith.constant 0 : i32
    %c1051612_i64 = arith.constant 1051612 : i64
    %15 = arith.extui %c0_i32_4 : i32 to i64
    %16 = arith.addi %15, %c1051612_i64 : i64
    %c1_i64_5 = arith.constant 1 : i64
    %17 = arith.addi %16, %c1_i64_5 : i64
    %c0_i32_6 = arith.constant 0 : i32
    %18 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_6) : (!llvm.ptr, i32) -> i32
    %19 = arith.extui %18 : i32 to i64
    %c65536_i64_7 = arith.constant 65536 : i64
    %20 = arith.muli %19, %c65536_i64_7 : i64
    %21 = arith.cmpi ult, %17, %20 : i64
    cf.cond_br %21, ^bb12, ^bb13
  ^bb5:  // 2 preds: ^bb1, ^bb6
    %22 = llvm.getelementptr %4[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %23 = llvm.load volatile %22 {alignment = 1 : i64} : !llvm.ptr -> i8
    %24 = arith.extui %23 : i8 to i32
    %c0_i32_8 = arith.constant 0 : i32
    %25 = arith.cmpi ne, %24, %c0_i32_8 : i32
    cf.cond_br %25, ^bb4, ^bb7
  ^bb6:  // pred: ^bb1
    %c1_i32_9 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_9) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // pred: ^bb5
    %c0_i32_10 = arith.constant 0 : i32
    %c1_i32_11 = arith.constant 1 : i32
    %c1051616_i64_12 = arith.constant 1051616 : i64
    %26 = arith.extui %c0_i32_10 : i32 to i64
    %27 = arith.addi %26, %c1051616_i64_12 : i64
    %c1_i64_13 = arith.constant 1 : i64
    %28 = arith.addi %27, %c1_i64_13 : i64
    %c0_i32_14 = arith.constant 0 : i32
    %29 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_14) : (!llvm.ptr, i32) -> i32
    %30 = arith.extui %29 : i32 to i64
    %c65536_i64_15 = arith.constant 65536 : i64
    %31 = arith.muli %30, %c65536_i64_15 : i64
    %32 = arith.cmpi ult, %28, %31 : i64
    cf.cond_br %32, ^bb8, ^bb9
  ^bb8:  // 2 preds: ^bb7, ^bb9
    %33 = llvm.getelementptr %4[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %34 = arith.trunci %c1_i32_11 : i32 to i8
    llvm.store volatile %34, %33 {alignment = 1 : i64} : i8, !llvm.ptr
    %c0_i32_16 = arith.constant 0 : i32
    %35 = call @f59(%arg0) : (!llvm.ptr) -> i32
    llvm.store %35, %1 : i32, !llvm.ptr
    %c1051612_i64_17 = arith.constant 1051612 : i64
    %36 = arith.extui %c0_i32_16 : i32 to i64
    %37 = arith.addi %36, %c1051612_i64_17 : i64
    %c1_i64_18 = arith.constant 1 : i64
    %38 = arith.addi %37, %c1_i64_18 : i64
    %c0_i32_19 = arith.constant 0 : i32
    %39 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_19) : (!llvm.ptr, i32) -> i32
    %40 = arith.extui %39 : i32 to i64
    %c65536_i64_20 = arith.constant 65536 : i64
    %41 = arith.muli %40, %c65536_i64_20 : i64
    %42 = arith.cmpi ult, %38, %41 : i64
    cf.cond_br %42, ^bb10, ^bb11
  ^bb9:  // pred: ^bb7
    %c1_i32_21 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_21) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // 2 preds: ^bb8, ^bb11
    %43 = llvm.getelementptr %4[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %44 = arith.trunci %35 : i32 to i8
    llvm.store volatile %44, %43 {alignment = 1 : i64} : i8, !llvm.ptr
    cf.br ^bb3
  ^bb11:  // pred: ^bb8
    %c1_i32_22 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_22) : (i32) -> ()
    cf.br ^bb10
  ^bb12:  // 2 preds: ^bb4, ^bb13
    %45 = llvm.getelementptr %4[%16] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %46 = llvm.load volatile %45 {alignment = 1 : i64} : !llvm.ptr -> i8
    %47 = arith.extui %46 : i8 to i32
    llvm.store %47, %1 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb13:  // pred: ^bb4
    %c1_i32_23 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_23) : (i32) -> ()
    cf.br ^bb12
  }
  func.func @f72(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %3 : i64, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %4 : i64, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %5 : i64, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %6 : i64, !llvm.ptr
    %7 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.getelementptr %arg0[4] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> i32
    %14 = llvm.getelementptr %arg0[304] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %arg0[312] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.load %15 : !llvm.ptr -> i64
    %18 = arith.trunci %17 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %19 = llvm.load %8 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %20 = arith.subi %19, %c32_i32 : i32
    llvm.store %20, %2 : i32, !llvm.ptr
    llvm.store %20, %8 : i32, !llvm.ptr
    %c0_i32_6 = arith.constant 0 : i32
    %c1051604_i64 = arith.constant 1051604 : i64
    %21 = arith.extui %c0_i32_6 : i32 to i64
    %22 = arith.addi %21, %c1051604_i64 : i64
    %c1_i64 = arith.constant 1 : i64
    %23 = arith.addi %22, %c1_i64 : i64
    %c0_i32_7 = arith.constant 0 : i32
    %24 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_7) : (!llvm.ptr, i32) -> i32
    %25 = arith.extui %24 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %26 = arith.muli %25, %c65536_i64 : i64
    %27 = arith.cmpi ult, %23, %26 : i64
    cf.cond_br %27, ^bb5, ^bb6
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb42, ^bb58
    %28 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32_8 = arith.constant 32 : i32
    %29 = arith.addi %28, %c32_i32_8 : i32
    llvm.store %29, %8 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb5
    %30 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %31 = arith.addi %30, %c24_i32 : i32
    %c0_i32_9 = arith.constant 0 : i32
    %c1051592_i64 = arith.constant 1051592 : i64
    %32 = arith.extui %c0_i32_9 : i32 to i64
    %33 = arith.addi %32, %c1051592_i64 : i64
    %c8_i64 = arith.constant 8 : i64
    %34 = arith.addi %33, %c8_i64 : i64
    %c0_i32_10 = arith.constant 0 : i32
    %35 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_10) : (!llvm.ptr, i32) -> i32
    %36 = arith.extui %35 : i32 to i64
    %c65536_i64_11 = arith.constant 65536 : i64
    %37 = arith.muli %36, %c65536_i64_11 : i64
    %38 = arith.cmpi ult, %34, %37 : i64
    cf.cond_br %38, ^bb44, ^bb45
  ^bb5:  // 2 preds: ^bb1, ^bb6
    %39 = llvm.getelementptr %11[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %40 = llvm.load volatile %39 {alignment = 1 : i64} : !llvm.ptr -> i8
    %41 = arith.extui %40 : i8 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %42 = arith.cmpi ne, %41, %c0_i32_12 : i32
    cf.cond_br %42, ^bb4, ^bb7
  ^bb6:  // pred: ^bb1
    %c1_i32_13 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_13) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // pred: ^bb5
    %43 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_14 = arith.constant 0 : i32
    %c1051600_i64 = arith.constant 1051600 : i64
    %44 = arith.extui %c0_i32_14 : i32 to i64
    %45 = arith.addi %44, %c1051600_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %46 = arith.addi %45, %c4_i64 : i64
    %c0_i32_15 = arith.constant 0 : i32
    %47 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_15) : (!llvm.ptr, i32) -> i32
    %48 = arith.extui %47 : i32 to i64
    %c65536_i64_16 = arith.constant 65536 : i64
    %49 = arith.muli %48, %c65536_i64_16 : i64
    %50 = arith.cmpi ult, %46, %49 : i64
    cf.cond_br %50, ^bb8, ^bb9
  ^bb8:  // 2 preds: ^bb7, ^bb9
    %51 = llvm.getelementptr %11[%45] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %52 = llvm.load volatile %51 {alignment = 1 : i64} : !llvm.ptr -> i32
    %53 = arith.cmpi ult, %52, %18 : i32
    cf.cond_br %53, ^bb10, ^bb11
  ^bb9:  // pred: ^bb7
    %c1_i32_17 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_17) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // 2 preds: ^bb8, ^bb11
    %54 = llvm.getelementptr inbounds %16[%52] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %55 = llvm.load %54 : !llvm.ptr -> !llvm.ptr
    %56 = llvm.ptrtoint %55 : !llvm.ptr to i64
    %c0_i64_18 = arith.constant 0 : i64
    %57 = arith.cmpi eq, %56, %c0_i64_18 : i64
    cf.cond_br %57, ^bb13, ^bb12
  ^bb11:  // pred: ^bb8
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb10
  ^bb12:  // 2 preds: ^bb10, ^bb13
    %58 = llvm.getelementptr %55[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %59 = llvm.getelementptr %55[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %60 = llvm.getelementptr %55[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %61 = llvm.load %58 : !llvm.ptr -> !llvm.ptr
    %62 = llvm.load %60 : !llvm.ptr -> !llvm.ptr
    %63 = llvm.ptrtoint %61 : !llvm.ptr to i64
    %c0_i64_19 = arith.constant 0 : i64
    %64 = arith.cmpi eq, %63, %c0_i64_19 : i64
    cf.cond_br %64, ^bb15, ^bb14
  ^bb13:  // pred: ^bb10
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb12
  ^bb14:  // 2 preds: ^bb12, ^bb15
    %65 = llvm.load %59 : !llvm.ptr -> i32
    %66 = arith.cmpi ne, %13, %65 : i32
    cf.cond_br %66, ^bb17, ^bb16
  ^bb15:  // pred: ^bb12
    %c3_i32_20 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_20) : (i32) -> ()
    cf.br ^bb14
  ^bb16:  // 2 preds: ^bb14, ^bb17
    %67 = llvm.call %61(%62, %43) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> !llvm.void
    %c0_i32_21 = arith.constant 0 : i32
    %c1_i32_22 = arith.constant 1 : i32
    %c1051604_i64_23 = arith.constant 1051604 : i64
    %68 = arith.extui %c0_i32_21 : i32 to i64
    %69 = arith.addi %68, %c1051604_i64_23 : i64
    %c1_i64_24 = arith.constant 1 : i64
    %70 = arith.addi %69, %c1_i64_24 : i64
    %c0_i32_25 = arith.constant 0 : i32
    %71 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_25) : (!llvm.ptr, i32) -> i32
    %72 = arith.extui %71 : i32 to i64
    %c65536_i64_26 = arith.constant 65536 : i64
    %73 = arith.muli %72, %c65536_i64_26 : i64
    %74 = arith.cmpi ult, %70, %73 : i64
    cf.cond_br %74, ^bb18, ^bb19
  ^bb17:  // pred: ^bb14
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb16
  ^bb18:  // 2 preds: ^bb16, ^bb19
    %75 = llvm.getelementptr %11[%69] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %76 = arith.trunci %c1_i32_22 : i32 to i8
    llvm.store volatile %76, %75 {alignment = 1 : i64} : i8, !llvm.ptr
    %c0_i32_27 = arith.constant 0 : i32
    %77 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_28 = arith.constant 24 : i32
    %78 = arith.addi %77, %c24_i32_28 : i32
    %c0_i64_29 = arith.constant 0 : i64
    %79 = arith.extui %78 : i32 to i64
    %80 = arith.addi %79, %c0_i64_29 : i64
    %c8_i64_30 = arith.constant 8 : i64
    %81 = arith.addi %80, %c8_i64_30 : i64
    %c0_i32_31 = arith.constant 0 : i32
    %82 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_31) : (!llvm.ptr, i32) -> i32
    %83 = arith.extui %82 : i32 to i64
    %c65536_i64_32 = arith.constant 65536 : i64
    %84 = arith.muli %83, %c65536_i64_32 : i64
    %85 = arith.cmpi ult, %81, %84 : i64
    cf.cond_br %85, ^bb20, ^bb21
  ^bb19:  // pred: ^bb16
    %c1_i32_33 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_33) : (i32) -> ()
    cf.br ^bb18
  ^bb20:  // 2 preds: ^bb18, ^bb21
    %86 = llvm.getelementptr %11[%80] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %87 = llvm.load volatile %86 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %87, %3 : i64, !llvm.ptr
    %c1051592_i64_34 = arith.constant 1051592 : i64
    %88 = arith.extui %c0_i32_27 : i32 to i64
    %89 = arith.addi %88, %c1051592_i64_34 : i64
    %c8_i64_35 = arith.constant 8 : i64
    %90 = arith.addi %89, %c8_i64_35 : i64
    %c0_i32_36 = arith.constant 0 : i32
    %91 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_36) : (!llvm.ptr, i32) -> i32
    %92 = arith.extui %91 : i32 to i64
    %c65536_i64_37 = arith.constant 65536 : i64
    %93 = arith.muli %92, %c65536_i64_37 : i64
    %94 = arith.cmpi ult, %90, %93 : i64
    cf.cond_br %94, ^bb22, ^bb23
  ^bb21:  // pred: ^bb18
    %c1_i32_38 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_38) : (i32) -> ()
    cf.br ^bb20
  ^bb22:  // 2 preds: ^bb20, ^bb23
    %95 = llvm.getelementptr %11[%89] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %87, %95 {alignment = 1 : i64} : i64, !llvm.ptr
    %c0_i32_39 = arith.constant 0 : i32
    %96 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %97 = arith.addi %96, %c16_i32 : i32
    %c0_i64_40 = arith.constant 0 : i64
    %98 = arith.extui %97 : i32 to i64
    %99 = arith.addi %98, %c0_i64_40 : i64
    %c8_i64_41 = arith.constant 8 : i64
    %100 = arith.addi %99, %c8_i64_41 : i64
    %c0_i32_42 = arith.constant 0 : i32
    %101 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_42) : (!llvm.ptr, i32) -> i32
    %102 = arith.extui %101 : i32 to i64
    %c65536_i64_43 = arith.constant 65536 : i64
    %103 = arith.muli %102, %c65536_i64_43 : i64
    %104 = arith.cmpi ult, %100, %103 : i64
    cf.cond_br %104, ^bb24, ^bb25
  ^bb23:  // pred: ^bb20
    %c1_i32_44 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_44) : (i32) -> ()
    cf.br ^bb22
  ^bb24:  // 2 preds: ^bb22, ^bb25
    %105 = llvm.getelementptr %11[%99] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %106 = llvm.load volatile %105 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %106, %4 : i64, !llvm.ptr
    %c1051584_i64 = arith.constant 1051584 : i64
    %107 = arith.extui %c0_i32_39 : i32 to i64
    %108 = arith.addi %107, %c1051584_i64 : i64
    %c8_i64_45 = arith.constant 8 : i64
    %109 = arith.addi %108, %c8_i64_45 : i64
    %c0_i32_46 = arith.constant 0 : i32
    %110 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_46) : (!llvm.ptr, i32) -> i32
    %111 = arith.extui %110 : i32 to i64
    %c65536_i64_47 = arith.constant 65536 : i64
    %112 = arith.muli %111, %c65536_i64_47 : i64
    %113 = arith.cmpi ult, %109, %112 : i64
    cf.cond_br %113, ^bb26, ^bb27
  ^bb25:  // pred: ^bb22
    %c1_i32_48 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_48) : (i32) -> ()
    cf.br ^bb24
  ^bb26:  // 2 preds: ^bb24, ^bb27
    %114 = llvm.getelementptr %11[%108] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %106, %114 {alignment = 1 : i64} : i64, !llvm.ptr
    %c0_i32_49 = arith.constant 0 : i32
    %115 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %116 = arith.addi %115, %c8_i32 : i32
    %c0_i64_50 = arith.constant 0 : i64
    %117 = arith.extui %116 : i32 to i64
    %118 = arith.addi %117, %c0_i64_50 : i64
    %c8_i64_51 = arith.constant 8 : i64
    %119 = arith.addi %118, %c8_i64_51 : i64
    %c0_i32_52 = arith.constant 0 : i32
    %120 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_52) : (!llvm.ptr, i32) -> i32
    %121 = arith.extui %120 : i32 to i64
    %c65536_i64_53 = arith.constant 65536 : i64
    %122 = arith.muli %121, %c65536_i64_53 : i64
    %123 = arith.cmpi ult, %119, %122 : i64
    cf.cond_br %123, ^bb28, ^bb29
  ^bb27:  // pred: ^bb24
    %c1_i32_54 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_54) : (i32) -> ()
    cf.br ^bb26
  ^bb28:  // 2 preds: ^bb26, ^bb29
    %124 = llvm.getelementptr %11[%118] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %125 = llvm.load volatile %124 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %125, %5 : i64, !llvm.ptr
    %c1051576_i64 = arith.constant 1051576 : i64
    %126 = arith.extui %c0_i32_49 : i32 to i64
    %127 = arith.addi %126, %c1051576_i64 : i64
    %c8_i64_55 = arith.constant 8 : i64
    %128 = arith.addi %127, %c8_i64_55 : i64
    %c0_i32_56 = arith.constant 0 : i32
    %129 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_56) : (!llvm.ptr, i32) -> i32
    %130 = arith.extui %129 : i32 to i64
    %c65536_i64_57 = arith.constant 65536 : i64
    %131 = arith.muli %130, %c65536_i64_57 : i64
    %132 = arith.cmpi ult, %128, %131 : i64
    cf.cond_br %132, ^bb30, ^bb31
  ^bb29:  // pred: ^bb26
    %c1_i32_58 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_58) : (i32) -> ()
    cf.br ^bb28
  ^bb30:  // 2 preds: ^bb28, ^bb31
    %133 = llvm.getelementptr %11[%127] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %125, %133 {alignment = 1 : i64} : i64, !llvm.ptr
    %c0_i32_59 = arith.constant 0 : i32
    %134 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_60 = arith.constant 0 : i64
    %135 = arith.extui %134 : i32 to i64
    %136 = arith.addi %135, %c0_i64_60 : i64
    %c8_i64_61 = arith.constant 8 : i64
    %137 = arith.addi %136, %c8_i64_61 : i64
    %c0_i32_62 = arith.constant 0 : i32
    %138 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_62) : (!llvm.ptr, i32) -> i32
    %139 = arith.extui %138 : i32 to i64
    %c65536_i64_63 = arith.constant 65536 : i64
    %140 = arith.muli %139, %c65536_i64_63 : i64
    %141 = arith.cmpi ult, %137, %140 : i64
    cf.cond_br %141, ^bb32, ^bb33
  ^bb31:  // pred: ^bb28
    %c1_i32_64 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_64) : (i32) -> ()
    cf.br ^bb30
  ^bb32:  // 2 preds: ^bb30, ^bb33
    %142 = llvm.getelementptr %11[%136] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %143 = llvm.load volatile %142 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %143, %6 : i64, !llvm.ptr
    %c1051568_i64 = arith.constant 1051568 : i64
    %144 = arith.extui %c0_i32_59 : i32 to i64
    %145 = arith.addi %144, %c1051568_i64 : i64
    %c8_i64_65 = arith.constant 8 : i64
    %146 = arith.addi %145, %c8_i64_65 : i64
    %c0_i32_66 = arith.constant 0 : i32
    %147 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_66) : (!llvm.ptr, i32) -> i32
    %148 = arith.extui %147 : i32 to i64
    %c65536_i64_67 = arith.constant 65536 : i64
    %149 = arith.muli %148, %c65536_i64_67 : i64
    %150 = arith.cmpi ult, %146, %149 : i64
    cf.cond_br %150, ^bb34, ^bb35
  ^bb33:  // pred: ^bb30
    %c1_i32_68 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_68) : (i32) -> ()
    cf.br ^bb32
  ^bb34:  // 2 preds: ^bb32, ^bb35
    %151 = llvm.getelementptr %11[%145] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %143, %151 {alignment = 1 : i64} : i64, !llvm.ptr
    %152 = llvm.load %0 : !llvm.ptr -> i32
    %153 = llvm.load %6 : !llvm.ptr -> i64
    %c0_i64_69 = arith.constant 0 : i64
    %154 = arith.extui %152 : i32 to i64
    %155 = arith.addi %154, %c0_i64_69 : i64
    %c8_i64_70 = arith.constant 8 : i64
    %156 = arith.addi %155, %c8_i64_70 : i64
    %c0_i32_71 = arith.constant 0 : i32
    %157 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_71) : (!llvm.ptr, i32) -> i32
    %158 = arith.extui %157 : i32 to i64
    %c65536_i64_72 = arith.constant 65536 : i64
    %159 = arith.muli %158, %c65536_i64_72 : i64
    %160 = arith.cmpi ult, %156, %159 : i64
    cf.cond_br %160, ^bb36, ^bb37
  ^bb35:  // pred: ^bb32
    %c1_i32_73 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_73) : (i32) -> ()
    cf.br ^bb34
  ^bb36:  // 2 preds: ^bb34, ^bb37
    %161 = llvm.getelementptr %11[%155] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %153, %161 {alignment = 1 : i64} : i64, !llvm.ptr
    %162 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_74 = arith.constant 8 : i32
    %163 = arith.addi %162, %c8_i32_74 : i32
    %164 = llvm.load %5 : !llvm.ptr -> i64
    %c0_i64_75 = arith.constant 0 : i64
    %165 = arith.extui %163 : i32 to i64
    %166 = arith.addi %165, %c0_i64_75 : i64
    %c8_i64_76 = arith.constant 8 : i64
    %167 = arith.addi %166, %c8_i64_76 : i64
    %c0_i32_77 = arith.constant 0 : i32
    %168 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_77) : (!llvm.ptr, i32) -> i32
    %169 = arith.extui %168 : i32 to i64
    %c65536_i64_78 = arith.constant 65536 : i64
    %170 = arith.muli %169, %c65536_i64_78 : i64
    %171 = arith.cmpi ult, %167, %170 : i64
    cf.cond_br %171, ^bb38, ^bb39
  ^bb37:  // pred: ^bb34
    %c1_i32_79 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_79) : (i32) -> ()
    cf.br ^bb36
  ^bb38:  // 2 preds: ^bb36, ^bb39
    %172 = llvm.getelementptr %11[%166] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %164, %172 {alignment = 1 : i64} : i64, !llvm.ptr
    %173 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_80 = arith.constant 16 : i32
    %174 = arith.addi %173, %c16_i32_80 : i32
    %175 = llvm.load %4 : !llvm.ptr -> i64
    %c0_i64_81 = arith.constant 0 : i64
    %176 = arith.extui %174 : i32 to i64
    %177 = arith.addi %176, %c0_i64_81 : i64
    %c8_i64_82 = arith.constant 8 : i64
    %178 = arith.addi %177, %c8_i64_82 : i64
    %c0_i32_83 = arith.constant 0 : i32
    %179 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_83) : (!llvm.ptr, i32) -> i32
    %180 = arith.extui %179 : i32 to i64
    %c65536_i64_84 = arith.constant 65536 : i64
    %181 = arith.muli %180, %c65536_i64_84 : i64
    %182 = arith.cmpi ult, %178, %181 : i64
    cf.cond_br %182, ^bb40, ^bb41
  ^bb39:  // pred: ^bb36
    %c1_i32_85 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_85) : (i32) -> ()
    cf.br ^bb38
  ^bb40:  // 2 preds: ^bb38, ^bb41
    %183 = llvm.getelementptr %11[%177] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %175, %183 {alignment = 1 : i64} : i64, !llvm.ptr
    %184 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32_86 = arith.constant 24 : i32
    %185 = arith.addi %184, %c24_i32_86 : i32
    %186 = llvm.load %3 : !llvm.ptr -> i64
    %c0_i64_87 = arith.constant 0 : i64
    %187 = arith.extui %185 : i32 to i64
    %188 = arith.addi %187, %c0_i64_87 : i64
    %c8_i64_88 = arith.constant 8 : i64
    %189 = arith.addi %188, %c8_i64_88 : i64
    %c0_i32_89 = arith.constant 0 : i32
    %190 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_89) : (!llvm.ptr, i32) -> i32
    %191 = arith.extui %190 : i32 to i64
    %c65536_i64_90 = arith.constant 65536 : i64
    %192 = arith.muli %191, %c65536_i64_90 : i64
    %193 = arith.cmpi ult, %189, %192 : i64
    cf.cond_br %193, ^bb42, ^bb43
  ^bb41:  // pred: ^bb38
    %c1_i32_91 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_91) : (i32) -> ()
    cf.br ^bb40
  ^bb42:  // 2 preds: ^bb40, ^bb43
    %194 = llvm.getelementptr %11[%188] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %186, %194 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb3
  ^bb43:  // pred: ^bb40
    %c1_i32_92 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_92) : (i32) -> ()
    cf.br ^bb42
  ^bb44:  // 2 preds: ^bb4, ^bb45
    %195 = llvm.getelementptr %11[%33] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %196 = llvm.load volatile %195 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_93 = arith.constant 0 : i64
    %197 = arith.extui %31 : i32 to i64
    %198 = arith.addi %197, %c0_i64_93 : i64
    %c8_i64_94 = arith.constant 8 : i64
    %199 = arith.addi %198, %c8_i64_94 : i64
    %c0_i32_95 = arith.constant 0 : i32
    %200 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_95) : (!llvm.ptr, i32) -> i32
    %201 = arith.extui %200 : i32 to i64
    %c65536_i64_96 = arith.constant 65536 : i64
    %202 = arith.muli %201, %c65536_i64_96 : i64
    %203 = arith.cmpi ult, %199, %202 : i64
    cf.cond_br %203, ^bb46, ^bb47
  ^bb45:  // pred: ^bb4
    %c1_i32_97 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_97) : (i32) -> ()
    cf.br ^bb44
  ^bb46:  // 2 preds: ^bb44, ^bb47
    %204 = llvm.getelementptr %11[%198] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %196, %204 {alignment = 1 : i64} : i64, !llvm.ptr
    %205 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_98 = arith.constant 16 : i32
    %206 = arith.addi %205, %c16_i32_98 : i32
    %c0_i32_99 = arith.constant 0 : i32
    %c1051584_i64_100 = arith.constant 1051584 : i64
    %207 = arith.extui %c0_i32_99 : i32 to i64
    %208 = arith.addi %207, %c1051584_i64_100 : i64
    %c8_i64_101 = arith.constant 8 : i64
    %209 = arith.addi %208, %c8_i64_101 : i64
    %c0_i32_102 = arith.constant 0 : i32
    %210 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_102) : (!llvm.ptr, i32) -> i32
    %211 = arith.extui %210 : i32 to i64
    %c65536_i64_103 = arith.constant 65536 : i64
    %212 = arith.muli %211, %c65536_i64_103 : i64
    %213 = arith.cmpi ult, %209, %212 : i64
    cf.cond_br %213, ^bb48, ^bb49
  ^bb47:  // pred: ^bb44
    %c1_i32_104 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_104) : (i32) -> ()
    cf.br ^bb46
  ^bb48:  // 2 preds: ^bb46, ^bb49
    %214 = llvm.getelementptr %11[%208] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %215 = llvm.load volatile %214 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_105 = arith.constant 0 : i64
    %216 = arith.extui %206 : i32 to i64
    %217 = arith.addi %216, %c0_i64_105 : i64
    %c8_i64_106 = arith.constant 8 : i64
    %218 = arith.addi %217, %c8_i64_106 : i64
    %c0_i32_107 = arith.constant 0 : i32
    %219 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_107) : (!llvm.ptr, i32) -> i32
    %220 = arith.extui %219 : i32 to i64
    %c65536_i64_108 = arith.constant 65536 : i64
    %221 = arith.muli %220, %c65536_i64_108 : i64
    %222 = arith.cmpi ult, %218, %221 : i64
    cf.cond_br %222, ^bb50, ^bb51
  ^bb49:  // pred: ^bb46
    %c1_i32_109 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_109) : (i32) -> ()
    cf.br ^bb48
  ^bb50:  // 2 preds: ^bb48, ^bb51
    %223 = llvm.getelementptr %11[%217] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %215, %223 {alignment = 1 : i64} : i64, !llvm.ptr
    %224 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_110 = arith.constant 8 : i32
    %225 = arith.addi %224, %c8_i32_110 : i32
    %c0_i32_111 = arith.constant 0 : i32
    %c1051576_i64_112 = arith.constant 1051576 : i64
    %226 = arith.extui %c0_i32_111 : i32 to i64
    %227 = arith.addi %226, %c1051576_i64_112 : i64
    %c8_i64_113 = arith.constant 8 : i64
    %228 = arith.addi %227, %c8_i64_113 : i64
    %c0_i32_114 = arith.constant 0 : i32
    %229 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_114) : (!llvm.ptr, i32) -> i32
    %230 = arith.extui %229 : i32 to i64
    %c65536_i64_115 = arith.constant 65536 : i64
    %231 = arith.muli %230, %c65536_i64_115 : i64
    %232 = arith.cmpi ult, %228, %231 : i64
    cf.cond_br %232, ^bb52, ^bb53
  ^bb51:  // pred: ^bb48
    %c1_i32_116 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_116) : (i32) -> ()
    cf.br ^bb50
  ^bb52:  // 2 preds: ^bb50, ^bb53
    %233 = llvm.getelementptr %11[%227] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %234 = llvm.load volatile %233 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_117 = arith.constant 0 : i64
    %235 = arith.extui %225 : i32 to i64
    %236 = arith.addi %235, %c0_i64_117 : i64
    %c8_i64_118 = arith.constant 8 : i64
    %237 = arith.addi %236, %c8_i64_118 : i64
    %c0_i32_119 = arith.constant 0 : i32
    %238 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_119) : (!llvm.ptr, i32) -> i32
    %239 = arith.extui %238 : i32 to i64
    %c65536_i64_120 = arith.constant 65536 : i64
    %240 = arith.muli %239, %c65536_i64_120 : i64
    %241 = arith.cmpi ult, %237, %240 : i64
    cf.cond_br %241, ^bb54, ^bb55
  ^bb53:  // pred: ^bb50
    %c1_i32_121 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_121) : (i32) -> ()
    cf.br ^bb52
  ^bb54:  // 2 preds: ^bb52, ^bb55
    %242 = llvm.getelementptr %11[%236] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %234, %242 {alignment = 1 : i64} : i64, !llvm.ptr
    %243 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_122 = arith.constant 0 : i32
    %c1051568_i64_123 = arith.constant 1051568 : i64
    %244 = arith.extui %c0_i32_122 : i32 to i64
    %245 = arith.addi %244, %c1051568_i64_123 : i64
    %c8_i64_124 = arith.constant 8 : i64
    %246 = arith.addi %245, %c8_i64_124 : i64
    %c0_i32_125 = arith.constant 0 : i32
    %247 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_125) : (!llvm.ptr, i32) -> i32
    %248 = arith.extui %247 : i32 to i64
    %c65536_i64_126 = arith.constant 65536 : i64
    %249 = arith.muli %248, %c65536_i64_126 : i64
    %250 = arith.cmpi ult, %246, %249 : i64
    cf.cond_br %250, ^bb56, ^bb57
  ^bb55:  // pred: ^bb52
    %c1_i32_127 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_127) : (i32) -> ()
    cf.br ^bb54
  ^bb56:  // 2 preds: ^bb54, ^bb57
    %251 = llvm.getelementptr %11[%245] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %252 = llvm.load volatile %251 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_128 = arith.constant 0 : i64
    %253 = arith.extui %243 : i32 to i64
    %254 = arith.addi %253, %c0_i64_128 : i64
    %c8_i64_129 = arith.constant 8 : i64
    %255 = arith.addi %254, %c8_i64_129 : i64
    %c0_i32_130 = arith.constant 0 : i32
    %256 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_130) : (!llvm.ptr, i32) -> i32
    %257 = arith.extui %256 : i32 to i64
    %c65536_i64_131 = arith.constant 65536 : i64
    %258 = arith.muli %257, %c65536_i64_131 : i64
    %259 = arith.cmpi ult, %255, %258 : i64
    cf.cond_br %259, ^bb58, ^bb59
  ^bb57:  // pred: ^bb54
    %c1_i32_132 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_132) : (i32) -> ()
    cf.br ^bb56
  ^bb58:  // 2 preds: ^bb56, ^bb59
    %260 = llvm.getelementptr %11[%254] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %252, %260 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb3
  ^bb59:  // pred: ^bb56
    %c1_i32_133 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_133) : (i32) -> ()
    cf.br ^bb58
  }
  func.func @f73(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %6 : i64, !llvm.ptr
    %c0_i32_6 = arith.constant 0 : i32
    %c1_i32_7 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32_6, %7 : i32, !llvm.ptr
    %8 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %13[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %16 = llvm.getelementptr %13[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %18 = llvm.load %9 : !llvm.ptr -> i32
    %c224_i32 = arith.constant 224 : i32
    %19 = arith.subi %18, %c224_i32 : i32
    llvm.store %19, %3 : i32, !llvm.ptr
    llvm.store %19, %9 : i32, !llvm.ptr
    %20 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %21 = arith.addi %20, %c8_i32 : i32
    %c16_i32 = arith.constant 16 : i32
    %22 = arith.addi %21, %c16_i32 : i32
    %23 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32_8 = arith.constant 16 : i32
    %24 = arith.addi %23, %c16_i32_8 : i32
    %c0_i64_9 = arith.constant 0 : i64
    %25 = arith.extui %24 : i32 to i64
    %26 = arith.addi %25, %c0_i64_9 : i64
    %c8_i64 = arith.constant 8 : i64
    %27 = arith.addi %26, %c8_i64 : i64
    %c0_i32_10 = arith.constant 0 : i32
    %28 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_10) : (!llvm.ptr, i32) -> i32
    %29 = arith.extui %28 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %30 = arith.muli %29, %c65536_i64 : i64
    %31 = arith.cmpi ult, %27, %30 : i64
    cf.cond_br %31, ^bb3, ^bb4
  ^bb2:  // pred: ^bb114
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %32 = llvm.getelementptr %12[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %33 = llvm.load volatile %32 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_11 = arith.constant 0 : i64
    %34 = arith.extui %22 : i32 to i64
    %35 = arith.addi %34, %c0_i64_11 : i64
    %c8_i64_12 = arith.constant 8 : i64
    %36 = arith.addi %35, %c8_i64_12 : i64
    %c0_i32_13 = arith.constant 0 : i32
    %37 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_13) : (!llvm.ptr, i32) -> i32
    %38 = arith.extui %37 : i32 to i64
    %c65536_i64_14 = arith.constant 65536 : i64
    %39 = arith.muli %38, %c65536_i64_14 : i64
    %40 = arith.cmpi ult, %36, %39 : i64
    cf.cond_br %40, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c1_i32_15 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_15) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %41 = llvm.getelementptr %12[%35] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %33, %41 {alignment = 1 : i64} : i64, !llvm.ptr
    %42 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_16 = arith.constant 8 : i32
    %43 = arith.addi %42, %c8_i32_16 : i32
    %c8_i32_17 = arith.constant 8 : i32
    %44 = arith.addi %43, %c8_i32_17 : i32
    %45 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_18 = arith.constant 8 : i32
    %46 = arith.addi %45, %c8_i32_18 : i32
    %c0_i64_19 = arith.constant 0 : i64
    %47 = arith.extui %46 : i32 to i64
    %48 = arith.addi %47, %c0_i64_19 : i64
    %c8_i64_20 = arith.constant 8 : i64
    %49 = arith.addi %48, %c8_i64_20 : i64
    %c0_i32_21 = arith.constant 0 : i32
    %50 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_21) : (!llvm.ptr, i32) -> i32
    %51 = arith.extui %50 : i32 to i64
    %c65536_i64_22 = arith.constant 65536 : i64
    %52 = arith.muli %51, %c65536_i64_22 : i64
    %53 = arith.cmpi ult, %49, %52 : i64
    cf.cond_br %53, ^bb7, ^bb8
  ^bb6:  // pred: ^bb3
    %c1_i32_23 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_23) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %54 = llvm.getelementptr %12[%48] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %55 = llvm.load volatile %54 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_24 = arith.constant 0 : i64
    %56 = arith.extui %44 : i32 to i64
    %57 = arith.addi %56, %c0_i64_24 : i64
    %c8_i64_25 = arith.constant 8 : i64
    %58 = arith.addi %57, %c8_i64_25 : i64
    %c0_i32_26 = arith.constant 0 : i32
    %59 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_26) : (!llvm.ptr, i32) -> i32
    %60 = arith.extui %59 : i32 to i64
    %c65536_i64_27 = arith.constant 65536 : i64
    %61 = arith.muli %60, %c65536_i64_27 : i64
    %62 = arith.cmpi ult, %58, %61 : i64
    cf.cond_br %62, ^bb9, ^bb10
  ^bb8:  // pred: ^bb5
    %c1_i32_28 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_28) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %63 = llvm.getelementptr %12[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %55, %63 {alignment = 1 : i64} : i64, !llvm.ptr
    %64 = llvm.load %3 : !llvm.ptr -> i32
    %65 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_29 = arith.constant 0 : i64
    %66 = arith.extui %65 : i32 to i64
    %67 = arith.addi %66, %c0_i64_29 : i64
    %c8_i64_30 = arith.constant 8 : i64
    %68 = arith.addi %67, %c8_i64_30 : i64
    %c0_i32_31 = arith.constant 0 : i32
    %69 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_31) : (!llvm.ptr, i32) -> i32
    %70 = arith.extui %69 : i32 to i64
    %c65536_i64_32 = arith.constant 65536 : i64
    %71 = arith.muli %70, %c65536_i64_32 : i64
    %72 = arith.cmpi ult, %68, %71 : i64
    cf.cond_br %72, ^bb11, ^bb12
  ^bb10:  // pred: ^bb7
    %c1_i32_33 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_33) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %73 = llvm.getelementptr %12[%67] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %74 = llvm.load volatile %73 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c8_i64_34 = arith.constant 8 : i64
    %75 = arith.extui %64 : i32 to i64
    %76 = arith.addi %75, %c8_i64_34 : i64
    %c8_i64_35 = arith.constant 8 : i64
    %77 = arith.addi %76, %c8_i64_35 : i64
    %c0_i32_36 = arith.constant 0 : i32
    %78 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_36) : (!llvm.ptr, i32) -> i32
    %79 = arith.extui %78 : i32 to i64
    %c65536_i64_37 = arith.constant 65536 : i64
    %80 = arith.muli %79, %c65536_i64_37 : i64
    %81 = arith.cmpi ult, %77, %80 : i64
    cf.cond_br %81, ^bb13, ^bb14
  ^bb12:  // pred: ^bb9
    %c1_i32_38 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_38) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %82 = llvm.getelementptr %12[%76] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %74, %82 {alignment = 1 : i64} : i64, !llvm.ptr
    %83 = llvm.load %3 : !llvm.ptr -> i32
    %c96_i32 = arith.constant 96 : i32
    %84 = arith.addi %83, %c96_i32 : i32
    %c24_i32 = arith.constant 24 : i32
    %85 = arith.addi %84, %c24_i32 : i32
    llvm.store %85, %1 : i32, !llvm.ptr
    %c0_i64_39 = arith.constant 0 : i64
    %c0_i64_40 = arith.constant 0 : i64
    %86 = arith.extui %85 : i32 to i64
    %87 = arith.addi %86, %c0_i64_40 : i64
    %c8_i64_41 = arith.constant 8 : i64
    %88 = arith.addi %87, %c8_i64_41 : i64
    %c0_i32_42 = arith.constant 0 : i32
    %89 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_42) : (!llvm.ptr, i32) -> i32
    %90 = arith.extui %89 : i32 to i64
    %c65536_i64_43 = arith.constant 65536 : i64
    %91 = arith.muli %90, %c65536_i64_43 : i64
    %92 = arith.cmpi ult, %88, %91 : i64
    cf.cond_br %92, ^bb15, ^bb16
  ^bb14:  // pred: ^bb11
    %c1_i32_44 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_44) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // 2 preds: ^bb13, ^bb16
    %93 = llvm.getelementptr %12[%87] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_39, %93 {alignment = 1 : i64} : i64, !llvm.ptr
    %94 = llvm.load %3 : !llvm.ptr -> i32
    %c96_i32_45 = arith.constant 96 : i32
    %95 = arith.addi %94, %c96_i32_45 : i32
    %c16_i32_46 = arith.constant 16 : i32
    %96 = arith.addi %95, %c16_i32_46 : i32
    llvm.store %96, %4 : i32, !llvm.ptr
    %c0_i64_47 = arith.constant 0 : i64
    %c0_i64_48 = arith.constant 0 : i64
    %97 = arith.extui %96 : i32 to i64
    %98 = arith.addi %97, %c0_i64_48 : i64
    %c8_i64_49 = arith.constant 8 : i64
    %99 = arith.addi %98, %c8_i64_49 : i64
    %c0_i32_50 = arith.constant 0 : i32
    %100 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_50) : (!llvm.ptr, i32) -> i32
    %101 = arith.extui %100 : i32 to i64
    %c65536_i64_51 = arith.constant 65536 : i64
    %102 = arith.muli %101, %c65536_i64_51 : i64
    %103 = arith.cmpi ult, %99, %102 : i64
    cf.cond_br %103, ^bb17, ^bb18
  ^bb16:  // pred: ^bb13
    %c1_i32_52 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_52) : (i32) -> ()
    cf.br ^bb15
  ^bb17:  // 2 preds: ^bb15, ^bb18
    %104 = llvm.getelementptr %12[%98] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_47, %104 {alignment = 1 : i64} : i64, !llvm.ptr
    %105 = llvm.load %3 : !llvm.ptr -> i32
    %c96_i32_53 = arith.constant 96 : i32
    %106 = arith.addi %105, %c96_i32_53 : i32
    %c8_i32_54 = arith.constant 8 : i32
    %107 = arith.addi %106, %c8_i32_54 : i32
    llvm.store %107, %5 : i32, !llvm.ptr
    %c0_i64_55 = arith.constant 0 : i64
    %c0_i64_56 = arith.constant 0 : i64
    %108 = arith.extui %107 : i32 to i64
    %109 = arith.addi %108, %c0_i64_56 : i64
    %c8_i64_57 = arith.constant 8 : i64
    %110 = arith.addi %109, %c8_i64_57 : i64
    %c0_i32_58 = arith.constant 0 : i32
    %111 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_58) : (!llvm.ptr, i32) -> i32
    %112 = arith.extui %111 : i32 to i64
    %c65536_i64_59 = arith.constant 65536 : i64
    %113 = arith.muli %112, %c65536_i64_59 : i64
    %114 = arith.cmpi ult, %110, %113 : i64
    cf.cond_br %114, ^bb19, ^bb20
  ^bb18:  // pred: ^bb15
    %c1_i32_60 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_60) : (i32) -> ()
    cf.br ^bb17
  ^bb19:  // 2 preds: ^bb17, ^bb20
    %115 = llvm.getelementptr %12[%109] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_55, %115 {alignment = 1 : i64} : i64, !llvm.ptr
    %116 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_61 = arith.constant 0 : i64
    %c96_i64 = arith.constant 96 : i64
    %117 = arith.extui %116 : i32 to i64
    %118 = arith.addi %117, %c96_i64 : i64
    %c8_i64_62 = arith.constant 8 : i64
    %119 = arith.addi %118, %c8_i64_62 : i64
    %c0_i32_63 = arith.constant 0 : i32
    %120 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_63) : (!llvm.ptr, i32) -> i32
    %121 = arith.extui %120 : i32 to i64
    %c65536_i64_64 = arith.constant 65536 : i64
    %122 = arith.muli %121, %c65536_i64_64 : i64
    %123 = arith.cmpi ult, %119, %122 : i64
    cf.cond_br %123, ^bb21, ^bb22
  ^bb20:  // pred: ^bb17
    %c1_i32_65 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_65) : (i32) -> ()
    cf.br ^bb19
  ^bb21:  // 2 preds: ^bb19, ^bb22
    %124 = llvm.getelementptr %12[%118] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_61, %124 {alignment = 1 : i64} : i64, !llvm.ptr
    %125 = llvm.load %3 : !llvm.ptr -> i32
    %c96_i32_66 = arith.constant 96 : i32
    %126 = arith.addi %125, %c96_i32_66 : i32
    %c3_i32 = arith.constant 3 : i32
    %127 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_67 = arith.constant 8 : i32
    %128 = arith.addi %127, %c8_i32_67 : i32
    %c3_i32_68 = arith.constant 3 : i32
    %c1050416_i32 = arith.constant 1050416 : i32
    call @f100(%arg0, %126, %c3_i32, %128, %c3_i32_68, %c1050416_i32) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %129 = llvm.load %3 : !llvm.ptr -> i32
    %c188_i32 = arith.constant 188 : i32
    %130 = arith.addi %129, %c188_i32 : i32
    %131 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_69 = arith.constant 0 : i64
    %132 = arith.extui %131 : i32 to i64
    %133 = arith.addi %132, %c0_i64_69 : i64
    %c8_i64_70 = arith.constant 8 : i64
    %134 = arith.addi %133, %c8_i64_70 : i64
    %c0_i32_71 = arith.constant 0 : i32
    %135 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_71) : (!llvm.ptr, i32) -> i32
    %136 = arith.extui %135 : i32 to i64
    %c65536_i64_72 = arith.constant 65536 : i64
    %137 = arith.muli %136, %c65536_i64_72 : i64
    %138 = arith.cmpi ult, %134, %137 : i64
    cf.cond_br %138, ^bb23, ^bb24
  ^bb22:  // pred: ^bb19
    %c1_i32_73 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_73) : (i32) -> ()
    cf.br ^bb21
  ^bb23:  // 2 preds: ^bb21, ^bb24
    %139 = llvm.getelementptr %12[%133] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %140 = llvm.load volatile %139 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %140, %6 : i64, !llvm.ptr
    %c0_i64_74 = arith.constant 0 : i64
    %141 = arith.extui %130 : i32 to i64
    %142 = arith.addi %141, %c0_i64_74 : i64
    %c8_i64_75 = arith.constant 8 : i64
    %143 = arith.addi %142, %c8_i64_75 : i64
    %c0_i32_76 = arith.constant 0 : i32
    %144 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_76) : (!llvm.ptr, i32) -> i32
    %145 = arith.extui %144 : i32 to i64
    %c65536_i64_77 = arith.constant 65536 : i64
    %146 = arith.muli %145, %c65536_i64_77 : i64
    %147 = arith.cmpi ult, %143, %146 : i64
    cf.cond_br %147, ^bb25, ^bb26
  ^bb24:  // pred: ^bb21
    %c1_i32_78 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_78) : (i32) -> ()
    cf.br ^bb23
  ^bb25:  // 2 preds: ^bb23, ^bb26
    %148 = llvm.getelementptr %12[%142] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %140, %148 {alignment = 1 : i64} : i64, !llvm.ptr
    %149 = llvm.load %3 : !llvm.ptr -> i32
    %c128_i32 = arith.constant 128 : i32
    %150 = arith.addi %149, %c128_i32 : i32
    %c8_i32_79 = arith.constant 8 : i32
    %151 = arith.addi %150, %c8_i32_79 : i32
    %152 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64_80 = arith.constant 0 : i64
    %153 = arith.extui %152 : i32 to i64
    %154 = arith.addi %153, %c0_i64_80 : i64
    %c8_i64_81 = arith.constant 8 : i64
    %155 = arith.addi %154, %c8_i64_81 : i64
    %c0_i32_82 = arith.constant 0 : i32
    %156 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_82) : (!llvm.ptr, i32) -> i32
    %157 = arith.extui %156 : i32 to i64
    %c65536_i64_83 = arith.constant 65536 : i64
    %158 = arith.muli %157, %c65536_i64_83 : i64
    %159 = arith.cmpi ult, %155, %158 : i64
    cf.cond_br %159, ^bb27, ^bb28
  ^bb26:  // pred: ^bb23
    %c1_i32_84 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_84) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // 2 preds: ^bb25, ^bb28
    %160 = llvm.getelementptr %12[%154] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %161 = llvm.load volatile %160 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_85 = arith.constant 0 : i64
    %162 = arith.extui %151 : i32 to i64
    %163 = arith.addi %162, %c0_i64_85 : i64
    %c8_i64_86 = arith.constant 8 : i64
    %164 = arith.addi %163, %c8_i64_86 : i64
    %c0_i32_87 = arith.constant 0 : i32
    %165 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_87) : (!llvm.ptr, i32) -> i32
    %166 = arith.extui %165 : i32 to i64
    %c65536_i64_88 = arith.constant 65536 : i64
    %167 = arith.muli %166, %c65536_i64_88 : i64
    %168 = arith.cmpi ult, %164, %167 : i64
    cf.cond_br %168, ^bb29, ^bb30
  ^bb28:  // pred: ^bb25
    %c1_i32_89 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_89) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // 2 preds: ^bb27, ^bb30
    %169 = llvm.getelementptr %12[%163] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %161, %169 {alignment = 1 : i64} : i64, !llvm.ptr
    %170 = llvm.load %3 : !llvm.ptr -> i32
    %c128_i32_90 = arith.constant 128 : i32
    %171 = arith.addi %170, %c128_i32_90 : i32
    %c16_i32_91 = arith.constant 16 : i32
    %172 = arith.addi %171, %c16_i32_91 : i32
    %173 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_92 = arith.constant 0 : i64
    %174 = arith.extui %173 : i32 to i64
    %175 = arith.addi %174, %c0_i64_92 : i64
    %c8_i64_93 = arith.constant 8 : i64
    %176 = arith.addi %175, %c8_i64_93 : i64
    %c0_i32_94 = arith.constant 0 : i32
    %177 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_94) : (!llvm.ptr, i32) -> i32
    %178 = arith.extui %177 : i32 to i64
    %c65536_i64_95 = arith.constant 65536 : i64
    %179 = arith.muli %178, %c65536_i64_95 : i64
    %180 = arith.cmpi ult, %176, %179 : i64
    cf.cond_br %180, ^bb31, ^bb32
  ^bb30:  // pred: ^bb27
    %c1_i32_96 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_96) : (i32) -> ()
    cf.br ^bb29
  ^bb31:  // 2 preds: ^bb29, ^bb32
    %181 = llvm.getelementptr %12[%175] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %182 = llvm.load volatile %181 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_97 = arith.constant 0 : i64
    %183 = arith.extui %172 : i32 to i64
    %184 = arith.addi %183, %c0_i64_97 : i64
    %c8_i64_98 = arith.constant 8 : i64
    %185 = arith.addi %184, %c8_i64_98 : i64
    %c0_i32_99 = arith.constant 0 : i32
    %186 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_99) : (!llvm.ptr, i32) -> i32
    %187 = arith.extui %186 : i32 to i64
    %c65536_i64_100 = arith.constant 65536 : i64
    %188 = arith.muli %187, %c65536_i64_100 : i64
    %189 = arith.cmpi ult, %185, %188 : i64
    cf.cond_br %189, ^bb33, ^bb34
  ^bb32:  // pred: ^bb29
    %c1_i32_101 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_101) : (i32) -> ()
    cf.br ^bb31
  ^bb33:  // 2 preds: ^bb31, ^bb34
    %190 = llvm.getelementptr %12[%184] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %182, %190 {alignment = 1 : i64} : i64, !llvm.ptr
    %191 = llvm.load %3 : !llvm.ptr -> i32
    %c128_i32_102 = arith.constant 128 : i32
    %192 = arith.addi %191, %c128_i32_102 : i32
    %c24_i32_103 = arith.constant 24 : i32
    %193 = arith.addi %192, %c24_i32_103 : i32
    %194 = llvm.load %6 : !llvm.ptr -> i64
    %c0_i64_104 = arith.constant 0 : i64
    %195 = arith.extui %193 : i32 to i64
    %196 = arith.addi %195, %c0_i64_104 : i64
    %c8_i64_105 = arith.constant 8 : i64
    %197 = arith.addi %196, %c8_i64_105 : i64
    %c0_i32_106 = arith.constant 0 : i32
    %198 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_106) : (!llvm.ptr, i32) -> i32
    %199 = arith.extui %198 : i32 to i64
    %c65536_i64_107 = arith.constant 65536 : i64
    %200 = arith.muli %199, %c65536_i64_107 : i64
    %201 = arith.cmpi ult, %197, %200 : i64
    cf.cond_br %201, ^bb35, ^bb36
  ^bb34:  // pred: ^bb31
    %c1_i32_108 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_108) : (i32) -> ()
    cf.br ^bb33
  ^bb35:  // 2 preds: ^bb33, ^bb36
    %202 = llvm.getelementptr %12[%196] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %194, %202 {alignment = 1 : i64} : i64, !llvm.ptr
    %203 = llvm.load %3 : !llvm.ptr -> i32
    %204 = llvm.load %3 : !llvm.ptr -> i32
    %c96_i64_109 = arith.constant 96 : i64
    %205 = arith.extui %204 : i32 to i64
    %206 = arith.addi %205, %c96_i64_109 : i64
    %c8_i64_110 = arith.constant 8 : i64
    %207 = arith.addi %206, %c8_i64_110 : i64
    %c0_i32_111 = arith.constant 0 : i32
    %208 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_111) : (!llvm.ptr, i32) -> i32
    %209 = arith.extui %208 : i32 to i64
    %c65536_i64_112 = arith.constant 65536 : i64
    %210 = arith.muli %209, %c65536_i64_112 : i64
    %211 = arith.cmpi ult, %207, %210 : i64
    cf.cond_br %211, ^bb37, ^bb38
  ^bb36:  // pred: ^bb33
    %c1_i32_113 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_113) : (i32) -> ()
    cf.br ^bb35
  ^bb37:  // 2 preds: ^bb35, ^bb38
    %212 = llvm.getelementptr %12[%206] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %213 = llvm.load volatile %212 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %213, %6 : i64, !llvm.ptr
    %c164_i64 = arith.constant 164 : i64
    %214 = arith.extui %203 : i32 to i64
    %215 = arith.addi %214, %c164_i64 : i64
    %c8_i64_114 = arith.constant 8 : i64
    %216 = arith.addi %215, %c8_i64_114 : i64
    %c0_i32_115 = arith.constant 0 : i32
    %217 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_115) : (!llvm.ptr, i32) -> i32
    %218 = arith.extui %217 : i32 to i64
    %c65536_i64_116 = arith.constant 65536 : i64
    %219 = arith.muli %218, %c65536_i64_116 : i64
    %220 = arith.cmpi ult, %216, %219 : i64
    cf.cond_br %220, ^bb39, ^bb40
  ^bb38:  // pred: ^bb35
    %c1_i32_117 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_117) : (i32) -> ()
    cf.br ^bb37
  ^bb39:  // 2 preds: ^bb37, ^bb40
    %221 = llvm.getelementptr %12[%215] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %213, %221 {alignment = 1 : i64} : i64, !llvm.ptr
    %222 = llvm.load %3 : !llvm.ptr -> i32
    %223 = llvm.load %6 : !llvm.ptr -> i64
    %c128_i64 = arith.constant 128 : i64
    %224 = arith.extui %222 : i32 to i64
    %225 = arith.addi %224, %c128_i64 : i64
    %c8_i64_118 = arith.constant 8 : i64
    %226 = arith.addi %225, %c8_i64_118 : i64
    %c0_i32_119 = arith.constant 0 : i32
    %227 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_119) : (!llvm.ptr, i32) -> i32
    %228 = arith.extui %227 : i32 to i64
    %c65536_i64_120 = arith.constant 65536 : i64
    %229 = arith.muli %228, %c65536_i64_120 : i64
    %230 = arith.cmpi ult, %226, %229 : i64
    cf.cond_br %230, ^bb41, ^bb42
  ^bb40:  // pred: ^bb37
    %c1_i32_121 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_121) : (i32) -> ()
    cf.br ^bb39
  ^bb41:  // 2 preds: ^bb39, ^bb42
    %231 = llvm.getelementptr %12[%225] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %223, %231 {alignment = 1 : i64} : i64, !llvm.ptr
    %232 = llvm.load %3 : !llvm.ptr -> i32
    %c159_i32 = arith.constant 159 : i32
    %233 = arith.addi %232, %c159_i32 : i32
    llvm.store %233, %1 : i32, !llvm.ptr
    %c0_i32_122 = arith.constant 0 : i32
    llvm.store %c0_i32_122, %4 : i32, !llvm.ptr
    cf.br ^bb44
  ^bb42:  // pred: ^bb39
    %c1_i32_123 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_123) : (i32) -> ()
    cf.br ^bb41
  ^bb43:  // pred: ^bb53
    %c0_i32_124 = arith.constant 0 : i32
    llvm.store %c0_i32_124, %1 : i32, !llvm.ptr
    %234 = llvm.load %3 : !llvm.ptr -> i32
    %c160_i32 = arith.constant 160 : i32
    %235 = arith.addi %234, %c160_i32 : i32
    %c0_i32_125 = arith.constant 0 : i32
    %c64_i32 = arith.constant 64 : i32
    %236 = call @f160(%arg0, %235, %c0_i32_125, %c64_i32) : (!llvm.ptr, i32, i32, i32) -> i32
    %237 = llvm.load %2 : !llvm.ptr -> i32
    %c-32_i32 = arith.constant -32 : i32
    %238 = arith.addi %237, %c-32_i32 : i32
    llvm.store %238, %4 : i32, !llvm.ptr
    cf.br ^bb55
  ^bb44:  // 2 preds: ^bb41, ^bb51
    %239 = llvm.load %3 : !llvm.ptr -> i32
    %c128_i32_126 = arith.constant 128 : i32
    %240 = arith.addi %239, %c128_i32_126 : i32
    %241 = llvm.load %4 : !llvm.ptr -> i32
    %242 = arith.addi %240, %241 : i32
    llvm.store %242, %5 : i32, !llvm.ptr
    %c0_i64_127 = arith.constant 0 : i64
    %243 = arith.extui %242 : i32 to i64
    %244 = arith.addi %243, %c0_i64_127 : i64
    %c1_i64 = arith.constant 1 : i64
    %245 = arith.addi %244, %c1_i64 : i64
    %c0_i32_128 = arith.constant 0 : i32
    %246 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_128) : (!llvm.ptr, i32) -> i32
    %247 = arith.extui %246 : i32 to i64
    %c65536_i64_129 = arith.constant 65536 : i64
    %248 = arith.muli %247, %c65536_i64_129 : i64
    %249 = arith.cmpi ult, %245, %248 : i64
    cf.cond_br %249, ^bb45, ^bb46
  ^bb45:  // 2 preds: ^bb44, ^bb46
    %250 = llvm.getelementptr %12[%244] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %251 = llvm.load volatile %250 {alignment = 1 : i64} : !llvm.ptr -> i8
    %252 = arith.extui %251 : i8 to i32
    llvm.store %252, %7 : i32, !llvm.ptr
    %253 = llvm.load %5 : !llvm.ptr -> i32
    %254 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_130 = arith.constant 0 : i64
    %255 = arith.extui %254 : i32 to i64
    %256 = arith.addi %255, %c0_i64_130 : i64
    %c1_i64_131 = arith.constant 1 : i64
    %257 = arith.addi %256, %c1_i64_131 : i64
    %c0_i32_132 = arith.constant 0 : i32
    %258 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_132) : (!llvm.ptr, i32) -> i32
    %259 = arith.extui %258 : i32 to i64
    %c65536_i64_133 = arith.constant 65536 : i64
    %260 = arith.muli %259, %c65536_i64_133 : i64
    %261 = arith.cmpi ult, %257, %260 : i64
    cf.cond_br %261, ^bb47, ^bb48
  ^bb46:  // pred: ^bb44
    %c1_i32_134 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_134) : (i32) -> ()
    cf.br ^bb45
  ^bb47:  // 2 preds: ^bb45, ^bb48
    %262 = llvm.getelementptr %12[%256] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %263 = llvm.load volatile %262 {alignment = 1 : i64} : !llvm.ptr -> i8
    %264 = arith.extui %263 : i8 to i32
    %c0_i64_135 = arith.constant 0 : i64
    %265 = arith.extui %253 : i32 to i64
    %266 = arith.addi %265, %c0_i64_135 : i64
    %c1_i64_136 = arith.constant 1 : i64
    %267 = arith.addi %266, %c1_i64_136 : i64
    %c0_i32_137 = arith.constant 0 : i32
    %268 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_137) : (!llvm.ptr, i32) -> i32
    %269 = arith.extui %268 : i32 to i64
    %c65536_i64_138 = arith.constant 65536 : i64
    %270 = arith.muli %269, %c65536_i64_138 : i64
    %271 = arith.cmpi ult, %267, %270 : i64
    cf.cond_br %271, ^bb49, ^bb50
  ^bb48:  // pred: ^bb45
    %c1_i32_139 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_139) : (i32) -> ()
    cf.br ^bb47
  ^bb49:  // 2 preds: ^bb47, ^bb50
    %272 = llvm.getelementptr %12[%266] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %273 = arith.trunci %264 : i32 to i8
    llvm.store volatile %273, %272 {alignment = 1 : i64} : i8, !llvm.ptr
    %274 = llvm.load %1 : !llvm.ptr -> i32
    %275 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_140 = arith.constant 0 : i64
    %276 = arith.extui %274 : i32 to i64
    %277 = arith.addi %276, %c0_i64_140 : i64
    %c1_i64_141 = arith.constant 1 : i64
    %278 = arith.addi %277, %c1_i64_141 : i64
    %c0_i32_142 = arith.constant 0 : i32
    %279 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_142) : (!llvm.ptr, i32) -> i32
    %280 = arith.extui %279 : i32 to i64
    %c65536_i64_143 = arith.constant 65536 : i64
    %281 = arith.muli %280, %c65536_i64_143 : i64
    %282 = arith.cmpi ult, %278, %281 : i64
    cf.cond_br %282, ^bb51, ^bb52
  ^bb50:  // pred: ^bb47
    %c1_i32_144 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_144) : (i32) -> ()
    cf.br ^bb49
  ^bb51:  // 2 preds: ^bb49, ^bb52
    %283 = llvm.getelementptr %12[%277] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %284 = arith.trunci %275 : i32 to i8
    llvm.store volatile %284, %283 {alignment = 1 : i64} : i8, !llvm.ptr
    %285 = llvm.load %1 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %286 = arith.addi %285, %c-1_i32 : i32
    llvm.store %286, %1 : i32, !llvm.ptr
    %287 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i32_145 = arith.constant 1 : i32
    %288 = arith.addi %287, %c1_i32_145 : i32
    llvm.store %288, %4 : i32, !llvm.ptr
    %c16_i32_146 = arith.constant 16 : i32
    %289 = arith.cmpi eq, %288, %c16_i32_146 : i32
    %290 = arith.extui %289 : i1 to i32
    %c0_i32_147 = arith.constant 0 : i32
    %291 = arith.cmpi eq, %290, %c0_i32_147 : i32
    %292 = arith.extui %291 : i1 to i32
    %c0_i32_148 = arith.constant 0 : i32
    %293 = arith.cmpi ne, %292, %c0_i32_148 : i32
    cf.cond_br %293, ^bb44, ^bb53
  ^bb52:  // pred: ^bb49
    %c1_i32_149 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_149) : (i32) -> ()
    cf.br ^bb51
  ^bb53:  // pred: ^bb51
    cf.br ^bb43
  ^bb54:  // pred: ^bb60
    %294 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %295 = arith.addi %294, %c32_i32 : i32
    %296 = llvm.load %3 : !llvm.ptr -> i32
    %c160_i32_150 = arith.constant 160 : i32
    %297 = arith.addi %296, %c160_i32_150 : i32
    %c64_i32_151 = arith.constant 64 : i32
    %298 = call @f161(%arg0, %295, %297, %c64_i32_151) : (!llvm.ptr, i32, i32, i32) -> i32
    %c24_i32_152 = arith.constant 24 : i32
    llvm.store %c24_i32_152, %1 : i32, !llvm.ptr
    %299 = llvm.load %3 : !llvm.ptr -> i32
    %c160_i32_153 = arith.constant 160 : i32
    %300 = arith.addi %299, %c160_i32_153 : i32
    %c24_i32_154 = arith.constant 24 : i32
    %301 = arith.addi %300, %c24_i32_154 : i32
    llvm.store %301, %4 : i32, !llvm.ptr
    %c0_i64_155 = arith.constant 0 : i64
    %c0_i64_156 = arith.constant 0 : i64
    %302 = arith.extui %301 : i32 to i64
    %303 = arith.addi %302, %c0_i64_156 : i64
    %c8_i64_157 = arith.constant 8 : i64
    %304 = arith.addi %303, %c8_i64_157 : i64
    %c0_i32_158 = arith.constant 0 : i32
    %305 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_158) : (!llvm.ptr, i32) -> i32
    %306 = arith.extui %305 : i32 to i64
    %c65536_i64_159 = arith.constant 65536 : i64
    %307 = arith.muli %306, %c65536_i64_159 : i64
    %308 = arith.cmpi ult, %304, %307 : i64
    cf.cond_br %308, ^bb61, ^bb62
  ^bb55:  // 2 preds: ^bb43, ^bb58
    %309 = llvm.load %3 : !llvm.ptr -> i32
    %c160_i32_160 = arith.constant 160 : i32
    %310 = arith.addi %309, %c160_i32_160 : i32
    %311 = llvm.load %1 : !llvm.ptr -> i32
    %312 = arith.addi %310, %311 : i32
    %313 = llvm.load %4 : !llvm.ptr -> i32
    %314 = llvm.load %3 : !llvm.ptr -> i32
    %c128_i32_161 = arith.constant 128 : i32
    %315 = arith.addi %314, %c128_i32_161 : i32
    %316 = llvm.load %1 : !llvm.ptr -> i32
    %c31_i32 = arith.constant 31 : i32
    %317 = arith.cmpi ugt, %316, %c31_i32 : i32
    %318 = arith.extui %317 : i1 to i32
    %c0_i32_162 = arith.constant 0 : i32
    %319 = arith.cmpi ne, %318, %c0_i32_162 : i32
    %320 = arith.select %319, %313, %315 : i32
    %321 = llvm.load %1 : !llvm.ptr -> i32
    %322 = arith.addi %320, %321 : i32
    %c0_i64_163 = arith.constant 0 : i64
    %323 = arith.extui %322 : i32 to i64
    %324 = arith.addi %323, %c0_i64_163 : i64
    %c1_i64_164 = arith.constant 1 : i64
    %325 = arith.addi %324, %c1_i64_164 : i64
    %c0_i32_165 = arith.constant 0 : i32
    %326 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_165) : (!llvm.ptr, i32) -> i32
    %327 = arith.extui %326 : i32 to i64
    %c65536_i64_166 = arith.constant 65536 : i64
    %328 = arith.muli %327, %c65536_i64_166 : i64
    %329 = arith.cmpi ult, %325, %328 : i64
    cf.cond_br %329, ^bb56, ^bb57
  ^bb56:  // 2 preds: ^bb55, ^bb57
    %330 = llvm.getelementptr %12[%324] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %331 = llvm.load volatile %330 {alignment = 1 : i64} : !llvm.ptr -> i8
    %332 = arith.extui %331 : i8 to i32
    %c0_i64_167 = arith.constant 0 : i64
    %333 = arith.extui %312 : i32 to i64
    %334 = arith.addi %333, %c0_i64_167 : i64
    %c1_i64_168 = arith.constant 1 : i64
    %335 = arith.addi %334, %c1_i64_168 : i64
    %c0_i32_169 = arith.constant 0 : i32
    %336 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_169) : (!llvm.ptr, i32) -> i32
    %337 = arith.extui %336 : i32 to i64
    %c65536_i64_170 = arith.constant 65536 : i64
    %338 = arith.muli %337, %c65536_i64_170 : i64
    %339 = arith.cmpi ult, %335, %338 : i64
    cf.cond_br %339, ^bb58, ^bb59
  ^bb57:  // pred: ^bb55
    %c1_i32_171 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_171) : (i32) -> ()
    cf.br ^bb56
  ^bb58:  // 2 preds: ^bb56, ^bb59
    %340 = llvm.getelementptr %12[%334] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %341 = arith.trunci %332 : i32 to i8
    llvm.store volatile %341, %340 {alignment = 1 : i64} : i8, !llvm.ptr
    %342 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_172 = arith.constant 1 : i32
    %343 = arith.addi %342, %c1_i32_172 : i32
    llvm.store %343, %1 : i32, !llvm.ptr
    %c64_i32_173 = arith.constant 64 : i32
    %344 = arith.cmpi eq, %343, %c64_i32_173 : i32
    %345 = arith.extui %344 : i1 to i32
    %c0_i32_174 = arith.constant 0 : i32
    %346 = arith.cmpi eq, %345, %c0_i32_174 : i32
    %347 = arith.extui %346 : i1 to i32
    %c0_i32_175 = arith.constant 0 : i32
    %348 = arith.cmpi ne, %347, %c0_i32_175 : i32
    cf.cond_br %348, ^bb55, ^bb60
  ^bb59:  // pred: ^bb56
    %c1_i32_176 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_176) : (i32) -> ()
    cf.br ^bb58
  ^bb60:  // pred: ^bb58
    cf.br ^bb54
  ^bb61:  // 2 preds: ^bb54, ^bb62
    %349 = llvm.getelementptr %12[%303] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_155, %349 {alignment = 1 : i64} : i64, !llvm.ptr
    %350 = llvm.load %3 : !llvm.ptr -> i32
    %c160_i32_177 = arith.constant 160 : i32
    %351 = arith.addi %350, %c160_i32_177 : i32
    %c16_i32_178 = arith.constant 16 : i32
    %352 = arith.addi %351, %c16_i32_178 : i32
    llvm.store %352, %5 : i32, !llvm.ptr
    %c0_i64_179 = arith.constant 0 : i64
    %c0_i64_180 = arith.constant 0 : i64
    %353 = arith.extui %352 : i32 to i64
    %354 = arith.addi %353, %c0_i64_180 : i64
    %c8_i64_181 = arith.constant 8 : i64
    %355 = arith.addi %354, %c8_i64_181 : i64
    %c0_i32_182 = arith.constant 0 : i32
    %356 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_182) : (!llvm.ptr, i32) -> i32
    %357 = arith.extui %356 : i32 to i64
    %c65536_i64_183 = arith.constant 65536 : i64
    %358 = arith.muli %357, %c65536_i64_183 : i64
    %359 = arith.cmpi ult, %355, %358 : i64
    cf.cond_br %359, ^bb63, ^bb64
  ^bb62:  // pred: ^bb54
    %c1_i32_184 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_184) : (i32) -> ()
    cf.br ^bb61
  ^bb63:  // 2 preds: ^bb61, ^bb64
    %360 = llvm.getelementptr %12[%354] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_179, %360 {alignment = 1 : i64} : i64, !llvm.ptr
    %361 = llvm.load %3 : !llvm.ptr -> i32
    %c160_i32_185 = arith.constant 160 : i32
    %362 = arith.addi %361, %c160_i32_185 : i32
    %c8_i32_186 = arith.constant 8 : i32
    %363 = arith.addi %362, %c8_i32_186 : i32
    llvm.store %363, %7 : i32, !llvm.ptr
    %c0_i64_187 = arith.constant 0 : i64
    %c0_i64_188 = arith.constant 0 : i64
    %364 = arith.extui %363 : i32 to i64
    %365 = arith.addi %364, %c0_i64_188 : i64
    %c8_i64_189 = arith.constant 8 : i64
    %366 = arith.addi %365, %c8_i64_189 : i64
    %c0_i32_190 = arith.constant 0 : i32
    %367 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_190) : (!llvm.ptr, i32) -> i32
    %368 = arith.extui %367 : i32 to i64
    %c65536_i64_191 = arith.constant 65536 : i64
    %369 = arith.muli %368, %c65536_i64_191 : i64
    %370 = arith.cmpi ult, %366, %369 : i64
    cf.cond_br %370, ^bb65, ^bb66
  ^bb64:  // pred: ^bb61
    %c1_i32_192 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_192) : (i32) -> ()
    cf.br ^bb63
  ^bb65:  // 2 preds: ^bb63, ^bb66
    %371 = llvm.getelementptr %12[%365] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_187, %371 {alignment = 1 : i64} : i64, !llvm.ptr
    %372 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_193 = arith.constant 0 : i64
    %c160_i64 = arith.constant 160 : i64
    %373 = arith.extui %372 : i32 to i64
    %374 = arith.addi %373, %c160_i64 : i64
    %c8_i64_194 = arith.constant 8 : i64
    %375 = arith.addi %374, %c8_i64_194 : i64
    %c0_i32_195 = arith.constant 0 : i32
    %376 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_195) : (!llvm.ptr, i32) -> i32
    %377 = arith.extui %376 : i32 to i64
    %c65536_i64_196 = arith.constant 65536 : i64
    %378 = arith.muli %377, %c65536_i64_196 : i64
    %379 = arith.cmpi ult, %375, %378 : i64
    cf.cond_br %379, ^bb67, ^bb68
  ^bb66:  // pred: ^bb63
    %c1_i32_197 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_197) : (i32) -> ()
    cf.br ^bb65
  ^bb67:  // 2 preds: ^bb65, ^bb68
    %380 = llvm.getelementptr %12[%374] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_193, %380 {alignment = 1 : i64} : i64, !llvm.ptr
    %381 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_198 = arith.constant 32 : i32
    %382 = arith.addi %381, %c32_i32_198 : i32
    %c64_i32_199 = arith.constant 64 : i32
    %383 = llvm.load %3 : !llvm.ptr -> i32
    %c160_i32_200 = arith.constant 160 : i32
    %384 = arith.addi %383, %c160_i32_200 : i32
    %385 = llvm.call %15(%17, %382, %c64_i32_199, %384) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> !llvm.void
    %386 = llvm.load %3 : !llvm.ptr -> i32
    %c96_i32_201 = arith.constant 96 : i32
    %387 = arith.addi %386, %c96_i32_201 : i32
    %c24_i32_202 = arith.constant 24 : i32
    %388 = arith.addi %387, %c24_i32_202 : i32
    %389 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_203 = arith.constant 0 : i64
    %390 = arith.extui %389 : i32 to i64
    %391 = arith.addi %390, %c0_i64_203 : i64
    %c8_i64_204 = arith.constant 8 : i64
    %392 = arith.addi %391, %c8_i64_204 : i64
    %c0_i32_205 = arith.constant 0 : i32
    %393 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_205) : (!llvm.ptr, i32) -> i32
    %394 = arith.extui %393 : i32 to i64
    %c65536_i64_206 = arith.constant 65536 : i64
    %395 = arith.muli %394, %c65536_i64_206 : i64
    %396 = arith.cmpi ult, %392, %395 : i64
    cf.cond_br %396, ^bb69, ^bb70
  ^bb68:  // pred: ^bb65
    %c1_i32_207 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_207) : (i32) -> ()
    cf.br ^bb67
  ^bb69:  // 2 preds: ^bb67, ^bb70
    %397 = llvm.getelementptr %12[%391] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %398 = llvm.load volatile %397 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_208 = arith.constant 0 : i64
    %399 = arith.extui %388 : i32 to i64
    %400 = arith.addi %399, %c0_i64_208 : i64
    %c8_i64_209 = arith.constant 8 : i64
    %401 = arith.addi %400, %c8_i64_209 : i64
    %c0_i32_210 = arith.constant 0 : i32
    %402 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_210) : (!llvm.ptr, i32) -> i32
    %403 = arith.extui %402 : i32 to i64
    %c65536_i64_211 = arith.constant 65536 : i64
    %404 = arith.muli %403, %c65536_i64_211 : i64
    %405 = arith.cmpi ult, %401, %404 : i64
    cf.cond_br %405, ^bb71, ^bb72
  ^bb70:  // pred: ^bb67
    %c1_i32_212 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_212) : (i32) -> ()
    cf.br ^bb69
  ^bb71:  // 2 preds: ^bb69, ^bb72
    %406 = llvm.getelementptr %12[%400] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %398, %406 {alignment = 1 : i64} : i64, !llvm.ptr
    %407 = llvm.load %3 : !llvm.ptr -> i32
    %c96_i32_213 = arith.constant 96 : i32
    %408 = arith.addi %407, %c96_i32_213 : i32
    %c16_i32_214 = arith.constant 16 : i32
    %409 = arith.addi %408, %c16_i32_214 : i32
    %410 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64_215 = arith.constant 0 : i64
    %411 = arith.extui %410 : i32 to i64
    %412 = arith.addi %411, %c0_i64_215 : i64
    %c8_i64_216 = arith.constant 8 : i64
    %413 = arith.addi %412, %c8_i64_216 : i64
    %c0_i32_217 = arith.constant 0 : i32
    %414 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_217) : (!llvm.ptr, i32) -> i32
    %415 = arith.extui %414 : i32 to i64
    %c65536_i64_218 = arith.constant 65536 : i64
    %416 = arith.muli %415, %c65536_i64_218 : i64
    %417 = arith.cmpi ult, %413, %416 : i64
    cf.cond_br %417, ^bb73, ^bb74
  ^bb72:  // pred: ^bb69
    %c1_i32_219 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_219) : (i32) -> ()
    cf.br ^bb71
  ^bb73:  // 2 preds: ^bb71, ^bb74
    %418 = llvm.getelementptr %12[%412] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %419 = llvm.load volatile %418 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_220 = arith.constant 0 : i64
    %420 = arith.extui %409 : i32 to i64
    %421 = arith.addi %420, %c0_i64_220 : i64
    %c8_i64_221 = arith.constant 8 : i64
    %422 = arith.addi %421, %c8_i64_221 : i64
    %c0_i32_222 = arith.constant 0 : i32
    %423 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_222) : (!llvm.ptr, i32) -> i32
    %424 = arith.extui %423 : i32 to i64
    %c65536_i64_223 = arith.constant 65536 : i64
    %425 = arith.muli %424, %c65536_i64_223 : i64
    %426 = arith.cmpi ult, %422, %425 : i64
    cf.cond_br %426, ^bb75, ^bb76
  ^bb74:  // pred: ^bb71
    %c1_i32_224 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_224) : (i32) -> ()
    cf.br ^bb73
  ^bb75:  // 2 preds: ^bb73, ^bb76
    %427 = llvm.getelementptr %12[%421] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %419, %427 {alignment = 1 : i64} : i64, !llvm.ptr
    %428 = llvm.load %3 : !llvm.ptr -> i32
    %c96_i32_225 = arith.constant 96 : i32
    %429 = arith.addi %428, %c96_i32_225 : i32
    %c8_i32_226 = arith.constant 8 : i32
    %430 = arith.addi %429, %c8_i32_226 : i32
    %431 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_227 = arith.constant 0 : i64
    %432 = arith.extui %431 : i32 to i64
    %433 = arith.addi %432, %c0_i64_227 : i64
    %c8_i64_228 = arith.constant 8 : i64
    %434 = arith.addi %433, %c8_i64_228 : i64
    %c0_i32_229 = arith.constant 0 : i32
    %435 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_229) : (!llvm.ptr, i32) -> i32
    %436 = arith.extui %435 : i32 to i64
    %c65536_i64_230 = arith.constant 65536 : i64
    %437 = arith.muli %436, %c65536_i64_230 : i64
    %438 = arith.cmpi ult, %434, %437 : i64
    cf.cond_br %438, ^bb77, ^bb78
  ^bb76:  // pred: ^bb73
    %c1_i32_231 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_231) : (i32) -> ()
    cf.br ^bb75
  ^bb77:  // 2 preds: ^bb75, ^bb78
    %439 = llvm.getelementptr %12[%433] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %440 = llvm.load volatile %439 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_232 = arith.constant 0 : i64
    %441 = arith.extui %430 : i32 to i64
    %442 = arith.addi %441, %c0_i64_232 : i64
    %c8_i64_233 = arith.constant 8 : i64
    %443 = arith.addi %442, %c8_i64_233 : i64
    %c0_i32_234 = arith.constant 0 : i32
    %444 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_234) : (!llvm.ptr, i32) -> i32
    %445 = arith.extui %444 : i32 to i64
    %c65536_i64_235 = arith.constant 65536 : i64
    %446 = arith.muli %445, %c65536_i64_235 : i64
    %447 = arith.cmpi ult, %443, %446 : i64
    cf.cond_br %447, ^bb79, ^bb80
  ^bb78:  // pred: ^bb75
    %c1_i32_236 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_236) : (i32) -> ()
    cf.br ^bb77
  ^bb79:  // 2 preds: ^bb77, ^bb80
    %448 = llvm.getelementptr %12[%442] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %440, %448 {alignment = 1 : i64} : i64, !llvm.ptr
    %449 = llvm.load %3 : !llvm.ptr -> i32
    %450 = llvm.load %3 : !llvm.ptr -> i32
    %c160_i64_237 = arith.constant 160 : i64
    %451 = arith.extui %450 : i32 to i64
    %452 = arith.addi %451, %c160_i64_237 : i64
    %c8_i64_238 = arith.constant 8 : i64
    %453 = arith.addi %452, %c8_i64_238 : i64
    %c0_i32_239 = arith.constant 0 : i32
    %454 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_239) : (!llvm.ptr, i32) -> i32
    %455 = arith.extui %454 : i32 to i64
    %c65536_i64_240 = arith.constant 65536 : i64
    %456 = arith.muli %455, %c65536_i64_240 : i64
    %457 = arith.cmpi ult, %453, %456 : i64
    cf.cond_br %457, ^bb81, ^bb82
  ^bb80:  // pred: ^bb77
    %c1_i32_241 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_241) : (i32) -> ()
    cf.br ^bb79
  ^bb81:  // 2 preds: ^bb79, ^bb82
    %458 = llvm.getelementptr %12[%452] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %459 = llvm.load volatile %458 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c96_i64_242 = arith.constant 96 : i64
    %460 = arith.extui %449 : i32 to i64
    %461 = arith.addi %460, %c96_i64_242 : i64
    %c8_i64_243 = arith.constant 8 : i64
    %462 = arith.addi %461, %c8_i64_243 : i64
    %c0_i32_244 = arith.constant 0 : i32
    %463 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_244) : (!llvm.ptr, i32) -> i32
    %464 = arith.extui %463 : i32 to i64
    %c65536_i64_245 = arith.constant 65536 : i64
    %465 = arith.muli %464, %c65536_i64_245 : i64
    %466 = arith.cmpi ult, %462, %465 : i64
    cf.cond_br %466, ^bb83, ^bb84
  ^bb82:  // pred: ^bb79
    %c1_i32_246 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_246) : (i32) -> ()
    cf.br ^bb81
  ^bb83:  // 2 preds: ^bb81, ^bb84
    %467 = llvm.getelementptr %12[%461] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %459, %467 {alignment = 1 : i64} : i64, !llvm.ptr
    %468 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_247 = arith.constant 0 : i64
    %c0_i64_248 = arith.constant 0 : i64
    %469 = arith.extui %468 : i32 to i64
    %470 = arith.addi %469, %c0_i64_248 : i64
    %c8_i64_249 = arith.constant 8 : i64
    %471 = arith.addi %470, %c8_i64_249 : i64
    %c0_i32_250 = arith.constant 0 : i32
    %472 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_250) : (!llvm.ptr, i32) -> i32
    %473 = arith.extui %472 : i32 to i64
    %c65536_i64_251 = arith.constant 65536 : i64
    %474 = arith.muli %473, %c65536_i64_251 : i64
    %475 = arith.cmpi ult, %471, %474 : i64
    cf.cond_br %475, ^bb85, ^bb86
  ^bb84:  // pred: ^bb81
    %c1_i32_252 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_252) : (i32) -> ()
    cf.br ^bb83
  ^bb85:  // 2 preds: ^bb83, ^bb86
    %476 = llvm.getelementptr %12[%470] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_247, %476 {alignment = 1 : i64} : i64, !llvm.ptr
    %477 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64_253 = arith.constant 0 : i64
    %c0_i64_254 = arith.constant 0 : i64
    %478 = arith.extui %477 : i32 to i64
    %479 = arith.addi %478, %c0_i64_254 : i64
    %c8_i64_255 = arith.constant 8 : i64
    %480 = arith.addi %479, %c8_i64_255 : i64
    %c0_i32_256 = arith.constant 0 : i32
    %481 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_256) : (!llvm.ptr, i32) -> i32
    %482 = arith.extui %481 : i32 to i64
    %c65536_i64_257 = arith.constant 65536 : i64
    %483 = arith.muli %482, %c65536_i64_257 : i64
    %484 = arith.cmpi ult, %480, %483 : i64
    cf.cond_br %484, ^bb87, ^bb88
  ^bb86:  // pred: ^bb83
    %c1_i32_258 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_258) : (i32) -> ()
    cf.br ^bb85
  ^bb87:  // 2 preds: ^bb85, ^bb88
    %485 = llvm.getelementptr %12[%479] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_253, %485 {alignment = 1 : i64} : i64, !llvm.ptr
    %486 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_259 = arith.constant 0 : i64
    %c0_i64_260 = arith.constant 0 : i64
    %487 = arith.extui %486 : i32 to i64
    %488 = arith.addi %487, %c0_i64_260 : i64
    %c8_i64_261 = arith.constant 8 : i64
    %489 = arith.addi %488, %c8_i64_261 : i64
    %c0_i32_262 = arith.constant 0 : i32
    %490 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_262) : (!llvm.ptr, i32) -> i32
    %491 = arith.extui %490 : i32 to i64
    %c65536_i64_263 = arith.constant 65536 : i64
    %492 = arith.muli %491, %c65536_i64_263 : i64
    %493 = arith.cmpi ult, %489, %492 : i64
    cf.cond_br %493, ^bb89, ^bb90
  ^bb88:  // pred: ^bb85
    %c1_i32_264 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_264) : (i32) -> ()
    cf.br ^bb87
  ^bb89:  // 2 preds: ^bb87, ^bb90
    %494 = llvm.getelementptr %12[%488] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_259, %494 {alignment = 1 : i64} : i64, !llvm.ptr
    %495 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_265 = arith.constant 0 : i64
    %c160_i64_266 = arith.constant 160 : i64
    %496 = arith.extui %495 : i32 to i64
    %497 = arith.addi %496, %c160_i64_266 : i64
    %c8_i64_267 = arith.constant 8 : i64
    %498 = arith.addi %497, %c8_i64_267 : i64
    %c0_i32_268 = arith.constant 0 : i32
    %499 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_268) : (!llvm.ptr, i32) -> i32
    %500 = arith.extui %499 : i32 to i64
    %c65536_i64_269 = arith.constant 65536 : i64
    %501 = arith.muli %500, %c65536_i64_269 : i64
    %502 = arith.cmpi ult, %498, %501 : i64
    cf.cond_br %502, ^bb91, ^bb92
  ^bb90:  // pred: ^bb87
    %c1_i32_270 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_270) : (i32) -> ()
    cf.br ^bb89
  ^bb91:  // 2 preds: ^bb89, ^bb92
    %503 = llvm.getelementptr %12[%497] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_265, %503 {alignment = 1 : i64} : i64, !llvm.ptr
    %504 = llvm.load %3 : !llvm.ptr -> i32
    %c160_i32_271 = arith.constant 160 : i32
    %505 = arith.addi %504, %c160_i32_271 : i32
    llvm.store %505, %4 : i32, !llvm.ptr
    cf.br ^bb94
  ^bb92:  // pred: ^bb89
    %c1_i32_272 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_272) : (i32) -> ()
    cf.br ^bb91
  ^bb93:  // pred: ^bb99
    %506 = llvm.load %0 : !llvm.ptr -> i32
    %507 = llvm.load %3 : !llvm.ptr -> i32
    %c160_i64_273 = arith.constant 160 : i64
    %508 = arith.extui %507 : i32 to i64
    %509 = arith.addi %508, %c160_i64_273 : i64
    %c8_i64_274 = arith.constant 8 : i64
    %510 = arith.addi %509, %c8_i64_274 : i64
    %c0_i32_275 = arith.constant 0 : i32
    %511 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_275) : (!llvm.ptr, i32) -> i32
    %512 = arith.extui %511 : i32 to i64
    %c65536_i64_276 = arith.constant 65536 : i64
    %513 = arith.muli %512, %c65536_i64_276 : i64
    %514 = arith.cmpi ult, %510, %513 : i64
    cf.cond_br %514, ^bb100, ^bb101
  ^bb94:  // 2 preds: ^bb91, ^bb97
    %515 = llvm.load %4 : !llvm.ptr -> i32
    %516 = llvm.load %3 : !llvm.ptr -> i32
    %c96_i32_277 = arith.constant 96 : i32
    %517 = arith.addi %516, %c96_i32_277 : i32
    %518 = llvm.load %1 : !llvm.ptr -> i32
    %519 = arith.addi %517, %518 : i32
    %c0_i64_278 = arith.constant 0 : i64
    %520 = arith.extui %519 : i32 to i64
    %521 = arith.addi %520, %c0_i64_278 : i64
    %c8_i64_279 = arith.constant 8 : i64
    %522 = arith.addi %521, %c8_i64_279 : i64
    %c0_i32_280 = arith.constant 0 : i32
    %523 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_280) : (!llvm.ptr, i32) -> i32
    %524 = arith.extui %523 : i32 to i64
    %c65536_i64_281 = arith.constant 65536 : i64
    %525 = arith.muli %524, %c65536_i64_281 : i64
    %526 = arith.cmpi ult, %522, %525 : i64
    cf.cond_br %526, ^bb95, ^bb96
  ^bb95:  // 2 preds: ^bb94, ^bb96
    %527 = llvm.getelementptr %12[%521] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %528 = llvm.load volatile %527 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %528, %6 : i64, !llvm.ptr
    %c56_i64 = arith.constant 56 : i64
    %c63_i64 = arith.constant 63 : i64
    %529 = arith.cmpi ule, %c56_i64, %c63_i64 : i64
    %530 = scf.if %529 -> (i64) {
      %660 = arith.shli %528, %c56_i64 : i64
      scf.yield %660 : i64
    } else {
      %c0_i64_353 = arith.constant 0 : i64
      scf.yield %c0_i64_353 : i64
    }
    %531 = llvm.load %6 : !llvm.ptr -> i64
    %c65280_i64 = arith.constant 65280 : i64
    %532 = arith.andi %531, %c65280_i64 : i64
    %c40_i64 = arith.constant 40 : i64
    %c63_i64_282 = arith.constant 63 : i64
    %533 = arith.cmpi ule, %c40_i64, %c63_i64_282 : i64
    %534 = scf.if %533 -> (i64) {
      %660 = arith.shli %532, %c40_i64 : i64
      scf.yield %660 : i64
    } else {
      %c0_i64_353 = arith.constant 0 : i64
      scf.yield %c0_i64_353 : i64
    }
    %535 = arith.ori %530, %534 : i64
    %536 = llvm.load %6 : !llvm.ptr -> i64
    %c16711680_i64 = arith.constant 16711680 : i64
    %537 = arith.andi %536, %c16711680_i64 : i64
    %c24_i64 = arith.constant 24 : i64
    %c63_i64_283 = arith.constant 63 : i64
    %538 = arith.cmpi ule, %c24_i64, %c63_i64_283 : i64
    %539 = scf.if %538 -> (i64) {
      %660 = arith.shli %537, %c24_i64 : i64
      scf.yield %660 : i64
    } else {
      %c0_i64_353 = arith.constant 0 : i64
      scf.yield %c0_i64_353 : i64
    }
    %540 = llvm.load %6 : !llvm.ptr -> i64
    %c4278190080_i64 = arith.constant 4278190080 : i64
    %541 = arith.andi %540, %c4278190080_i64 : i64
    %c8_i64_284 = arith.constant 8 : i64
    %c63_i64_285 = arith.constant 63 : i64
    %542 = arith.cmpi ule, %c8_i64_284, %c63_i64_285 : i64
    %543 = scf.if %542 -> (i64) {
      %660 = arith.shli %541, %c8_i64_284 : i64
      scf.yield %660 : i64
    } else {
      %c0_i64_353 = arith.constant 0 : i64
      scf.yield %c0_i64_353 : i64
    }
    %544 = arith.ori %539, %543 : i64
    %545 = arith.ori %535, %544 : i64
    %546 = llvm.load %6 : !llvm.ptr -> i64
    %c8_i64_286 = arith.constant 8 : i64
    %c63_i64_287 = arith.constant 63 : i64
    %547 = arith.cmpi ule, %c8_i64_286, %c63_i64_287 : i64
    %548 = scf.if %547 -> (i64) {
      %660 = arith.shrui %546, %c8_i64_286 : i64
      scf.yield %660 : i64
    } else {
      %c0_i64_353 = arith.constant 0 : i64
      scf.yield %c0_i64_353 : i64
    }
    %c4278190080_i64_288 = arith.constant 4278190080 : i64
    %549 = arith.andi %548, %c4278190080_i64_288 : i64
    %550 = llvm.load %6 : !llvm.ptr -> i64
    %c24_i64_289 = arith.constant 24 : i64
    %c63_i64_290 = arith.constant 63 : i64
    %551 = arith.cmpi ule, %c24_i64_289, %c63_i64_290 : i64
    %552 = scf.if %551 -> (i64) {
      %660 = arith.shrui %550, %c24_i64_289 : i64
      scf.yield %660 : i64
    } else {
      %c0_i64_353 = arith.constant 0 : i64
      scf.yield %c0_i64_353 : i64
    }
    %c16711680_i64_291 = arith.constant 16711680 : i64
    %553 = arith.andi %552, %c16711680_i64_291 : i64
    %554 = arith.ori %549, %553 : i64
    %555 = llvm.load %6 : !llvm.ptr -> i64
    %c40_i64_292 = arith.constant 40 : i64
    %c63_i64_293 = arith.constant 63 : i64
    %556 = arith.cmpi ule, %c40_i64_292, %c63_i64_293 : i64
    %557 = scf.if %556 -> (i64) {
      %660 = arith.shrui %555, %c40_i64_292 : i64
      scf.yield %660 : i64
    } else {
      %c0_i64_353 = arith.constant 0 : i64
      scf.yield %c0_i64_353 : i64
    }
    %c65280_i64_294 = arith.constant 65280 : i64
    %558 = arith.andi %557, %c65280_i64_294 : i64
    %559 = llvm.load %6 : !llvm.ptr -> i64
    %c56_i64_295 = arith.constant 56 : i64
    %c63_i64_296 = arith.constant 63 : i64
    %560 = arith.cmpi ule, %c56_i64_295, %c63_i64_296 : i64
    %561 = scf.if %560 -> (i64) {
      %660 = arith.shrui %559, %c56_i64_295 : i64
      scf.yield %660 : i64
    } else {
      %c0_i64_353 = arith.constant 0 : i64
      scf.yield %c0_i64_353 : i64
    }
    %562 = arith.ori %558, %561 : i64
    %563 = arith.ori %554, %562 : i64
    %564 = arith.ori %545, %563 : i64
    %c0_i64_297 = arith.constant 0 : i64
    %565 = arith.extui %515 : i32 to i64
    %566 = arith.addi %565, %c0_i64_297 : i64
    %c8_i64_298 = arith.constant 8 : i64
    %567 = arith.addi %566, %c8_i64_298 : i64
    %c0_i32_299 = arith.constant 0 : i32
    %568 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_299) : (!llvm.ptr, i32) -> i32
    %569 = arith.extui %568 : i32 to i64
    %c65536_i64_300 = arith.constant 65536 : i64
    %570 = arith.muli %569, %c65536_i64_300 : i64
    %571 = arith.cmpi ult, %567, %570 : i64
    cf.cond_br %571, ^bb97, ^bb98
  ^bb96:  // pred: ^bb94
    %c1_i32_301 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_301) : (i32) -> ()
    cf.br ^bb95
  ^bb97:  // 2 preds: ^bb95, ^bb98
    %572 = llvm.getelementptr %12[%566] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %564, %572 {alignment = 1 : i64} : i64, !llvm.ptr
    %573 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i32_302 = arith.constant 8 : i32
    %574 = arith.addi %573, %c8_i32_302 : i32
    llvm.store %574, %4 : i32, !llvm.ptr
    %575 = llvm.load %1 : !llvm.ptr -> i32
    %c-8_i32 = arith.constant -8 : i32
    %576 = arith.addi %575, %c-8_i32 : i32
    llvm.store %576, %1 : i32, !llvm.ptr
    %c-8_i32_303 = arith.constant -8 : i32
    %577 = arith.cmpi eq, %576, %c-8_i32_303 : i32
    %578 = arith.extui %577 : i1 to i32
    %c0_i32_304 = arith.constant 0 : i32
    %579 = arith.cmpi eq, %578, %c0_i32_304 : i32
    %580 = arith.extui %579 : i1 to i32
    %c0_i32_305 = arith.constant 0 : i32
    %581 = arith.cmpi ne, %580, %c0_i32_305 : i32
    cf.cond_br %581, ^bb94, ^bb99
  ^bb98:  // pred: ^bb95
    %c1_i32_306 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_306) : (i32) -> ()
    cf.br ^bb97
  ^bb99:  // pred: ^bb97
    cf.br ^bb93
  ^bb100:  // 2 preds: ^bb93, ^bb101
    %582 = llvm.getelementptr %12[%509] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %583 = llvm.load volatile %582 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_307 = arith.constant 0 : i64
    %584 = arith.extui %506 : i32 to i64
    %585 = arith.addi %584, %c0_i64_307 : i64
    %c8_i64_308 = arith.constant 8 : i64
    %586 = arith.addi %585, %c8_i64_308 : i64
    %c0_i32_309 = arith.constant 0 : i32
    %587 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_309) : (!llvm.ptr, i32) -> i32
    %588 = arith.extui %587 : i32 to i64
    %c65536_i64_310 = arith.constant 65536 : i64
    %589 = arith.muli %588, %c65536_i64_310 : i64
    %590 = arith.cmpi ult, %586, %589 : i64
    cf.cond_br %590, ^bb102, ^bb103
  ^bb101:  // pred: ^bb93
    %c1_i32_311 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_311) : (i32) -> ()
    cf.br ^bb100
  ^bb102:  // 2 preds: ^bb100, ^bb103
    %591 = llvm.getelementptr %12[%585] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %583, %591 {alignment = 1 : i64} : i64, !llvm.ptr
    %592 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32_312 = arith.constant 24 : i32
    %593 = arith.addi %592, %c24_i32_312 : i32
    %594 = llvm.load %3 : !llvm.ptr -> i32
    %c160_i32_313 = arith.constant 160 : i32
    %595 = arith.addi %594, %c160_i32_313 : i32
    %c24_i32_314 = arith.constant 24 : i32
    %596 = arith.addi %595, %c24_i32_314 : i32
    %c0_i64_315 = arith.constant 0 : i64
    %597 = arith.extui %596 : i32 to i64
    %598 = arith.addi %597, %c0_i64_315 : i64
    %c8_i64_316 = arith.constant 8 : i64
    %599 = arith.addi %598, %c8_i64_316 : i64
    %c0_i32_317 = arith.constant 0 : i32
    %600 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_317) : (!llvm.ptr, i32) -> i32
    %601 = arith.extui %600 : i32 to i64
    %c65536_i64_318 = arith.constant 65536 : i64
    %602 = arith.muli %601, %c65536_i64_318 : i64
    %603 = arith.cmpi ult, %599, %602 : i64
    cf.cond_br %603, ^bb104, ^bb105
  ^bb103:  // pred: ^bb100
    %c1_i32_319 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_319) : (i32) -> ()
    cf.br ^bb102
  ^bb104:  // 2 preds: ^bb102, ^bb105
    %604 = llvm.getelementptr %12[%598] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %605 = llvm.load volatile %604 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_320 = arith.constant 0 : i64
    %606 = arith.extui %593 : i32 to i64
    %607 = arith.addi %606, %c0_i64_320 : i64
    %c8_i64_321 = arith.constant 8 : i64
    %608 = arith.addi %607, %c8_i64_321 : i64
    %c0_i32_322 = arith.constant 0 : i32
    %609 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_322) : (!llvm.ptr, i32) -> i32
    %610 = arith.extui %609 : i32 to i64
    %c65536_i64_323 = arith.constant 65536 : i64
    %611 = arith.muli %610, %c65536_i64_323 : i64
    %612 = arith.cmpi ult, %608, %611 : i64
    cf.cond_br %612, ^bb106, ^bb107
  ^bb105:  // pred: ^bb102
    %c1_i32_324 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_324) : (i32) -> ()
    cf.br ^bb104
  ^bb106:  // 2 preds: ^bb104, ^bb107
    %613 = llvm.getelementptr %12[%607] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %605, %613 {alignment = 1 : i64} : i64, !llvm.ptr
    %614 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_325 = arith.constant 16 : i32
    %615 = arith.addi %614, %c16_i32_325 : i32
    %616 = llvm.load %3 : !llvm.ptr -> i32
    %c160_i32_326 = arith.constant 160 : i32
    %617 = arith.addi %616, %c160_i32_326 : i32
    %c16_i32_327 = arith.constant 16 : i32
    %618 = arith.addi %617, %c16_i32_327 : i32
    %c0_i64_328 = arith.constant 0 : i64
    %619 = arith.extui %618 : i32 to i64
    %620 = arith.addi %619, %c0_i64_328 : i64
    %c8_i64_329 = arith.constant 8 : i64
    %621 = arith.addi %620, %c8_i64_329 : i64
    %c0_i32_330 = arith.constant 0 : i32
    %622 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_330) : (!llvm.ptr, i32) -> i32
    %623 = arith.extui %622 : i32 to i64
    %c65536_i64_331 = arith.constant 65536 : i64
    %624 = arith.muli %623, %c65536_i64_331 : i64
    %625 = arith.cmpi ult, %621, %624 : i64
    cf.cond_br %625, ^bb108, ^bb109
  ^bb107:  // pred: ^bb104
    %c1_i32_332 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_332) : (i32) -> ()
    cf.br ^bb106
  ^bb108:  // 2 preds: ^bb106, ^bb109
    %626 = llvm.getelementptr %12[%620] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %627 = llvm.load volatile %626 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_333 = arith.constant 0 : i64
    %628 = arith.extui %615 : i32 to i64
    %629 = arith.addi %628, %c0_i64_333 : i64
    %c8_i64_334 = arith.constant 8 : i64
    %630 = arith.addi %629, %c8_i64_334 : i64
    %c0_i32_335 = arith.constant 0 : i32
    %631 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_335) : (!llvm.ptr, i32) -> i32
    %632 = arith.extui %631 : i32 to i64
    %c65536_i64_336 = arith.constant 65536 : i64
    %633 = arith.muli %632, %c65536_i64_336 : i64
    %634 = arith.cmpi ult, %630, %633 : i64
    cf.cond_br %634, ^bb110, ^bb111
  ^bb109:  // pred: ^bb106
    %c1_i32_337 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_337) : (i32) -> ()
    cf.br ^bb108
  ^bb110:  // 2 preds: ^bb108, ^bb111
    %635 = llvm.getelementptr %12[%629] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %627, %635 {alignment = 1 : i64} : i64, !llvm.ptr
    %636 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_338 = arith.constant 8 : i32
    %637 = arith.addi %636, %c8_i32_338 : i32
    %638 = llvm.load %3 : !llvm.ptr -> i32
    %c160_i32_339 = arith.constant 160 : i32
    %639 = arith.addi %638, %c160_i32_339 : i32
    %c8_i32_340 = arith.constant 8 : i32
    %640 = arith.addi %639, %c8_i32_340 : i32
    %c0_i64_341 = arith.constant 0 : i64
    %641 = arith.extui %640 : i32 to i64
    %642 = arith.addi %641, %c0_i64_341 : i64
    %c8_i64_342 = arith.constant 8 : i64
    %643 = arith.addi %642, %c8_i64_342 : i64
    %c0_i32_343 = arith.constant 0 : i32
    %644 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_343) : (!llvm.ptr, i32) -> i32
    %645 = arith.extui %644 : i32 to i64
    %c65536_i64_344 = arith.constant 65536 : i64
    %646 = arith.muli %645, %c65536_i64_344 : i64
    %647 = arith.cmpi ult, %643, %646 : i64
    cf.cond_br %647, ^bb112, ^bb113
  ^bb111:  // pred: ^bb108
    %c1_i32_345 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_345) : (i32) -> ()
    cf.br ^bb110
  ^bb112:  // 2 preds: ^bb110, ^bb113
    %648 = llvm.getelementptr %12[%642] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %649 = llvm.load volatile %648 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_346 = arith.constant 0 : i64
    %650 = arith.extui %637 : i32 to i64
    %651 = arith.addi %650, %c0_i64_346 : i64
    %c8_i64_347 = arith.constant 8 : i64
    %652 = arith.addi %651, %c8_i64_347 : i64
    %c0_i32_348 = arith.constant 0 : i32
    %653 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_348) : (!llvm.ptr, i32) -> i32
    %654 = arith.extui %653 : i32 to i64
    %c65536_i64_349 = arith.constant 65536 : i64
    %655 = arith.muli %654, %c65536_i64_349 : i64
    %656 = arith.cmpi ult, %652, %655 : i64
    cf.cond_br %656, ^bb114, ^bb115
  ^bb113:  // pred: ^bb110
    %c1_i32_350 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_350) : (i32) -> ()
    cf.br ^bb112
  ^bb114:  // 2 preds: ^bb112, ^bb115
    %657 = llvm.getelementptr %12[%651] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %649, %657 {alignment = 1 : i64} : i64, !llvm.ptr
    %658 = llvm.load %3 : !llvm.ptr -> i32
    %c224_i32_351 = arith.constant 224 : i32
    %659 = arith.addi %658, %c224_i32_351 : i32
    llvm.store %659, %9 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb115:  // pred: ^bb112
    %c1_i32_352 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_352) : (i32) -> ()
    cf.br ^bb114
  }
  func.func @f74(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %7 : i64, !llvm.ptr
    %8 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %13 = llvm.load %9 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %14 = arith.subi %13, %c48_i32 : i32
    llvm.store %14, %3 : i32, !llvm.ptr
    llvm.store %14, %9 : i32, !llvm.ptr
    %15 = llvm.load %3 : !llvm.ptr -> i32
    %c40_i32 = arith.constant 40 : i32
    %16 = arith.addi %15, %c40_i32 : i32
    %c0_i64_7 = arith.constant 0 : i64
    %c0_i64_8 = arith.constant 0 : i64
    %17 = arith.extui %16 : i32 to i64
    %18 = arith.addi %17, %c0_i64_8 : i64
    %c8_i64 = arith.constant 8 : i64
    %19 = arith.addi %18, %c8_i64 : i64
    %c0_i32_9 = arith.constant 0 : i32
    %20 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_9) : (!llvm.ptr, i32) -> i32
    %21 = arith.extui %20 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %22 = arith.muli %21, %c65536_i64 : i64
    %23 = arith.cmpi ult, %19, %22 : i64
    cf.cond_br %23, ^bb3, ^bb4
  ^bb2:  // pred: ^bb38
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %24 = llvm.getelementptr %12[%18] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_7, %24 {alignment = 1 : i64} : i64, !llvm.ptr
    %25 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %26 = arith.addi %25, %c24_i32 : i32
    %c8_i32 = arith.constant 8 : i32
    %27 = arith.addi %26, %c8_i32 : i32
    %c0_i64_10 = arith.constant 0 : i64
    %c0_i64_11 = arith.constant 0 : i64
    %28 = arith.extui %27 : i32 to i64
    %29 = arith.addi %28, %c0_i64_11 : i64
    %c8_i64_12 = arith.constant 8 : i64
    %30 = arith.addi %29, %c8_i64_12 : i64
    %c0_i32_13 = arith.constant 0 : i32
    %31 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_13) : (!llvm.ptr, i32) -> i32
    %32 = arith.extui %31 : i32 to i64
    %c65536_i64_14 = arith.constant 65536 : i64
    %33 = arith.muli %32, %c65536_i64_14 : i64
    %34 = arith.cmpi ult, %30, %33 : i64
    cf.cond_br %34, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c1_i32_15 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_15) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %35 = llvm.getelementptr %12[%29] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_10, %35 {alignment = 1 : i64} : i64, !llvm.ptr
    %36 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_16 = arith.constant 0 : i64
    %c24_i64 = arith.constant 24 : i64
    %37 = arith.extui %36 : i32 to i64
    %38 = arith.addi %37, %c24_i64 : i64
    %c8_i64_17 = arith.constant 8 : i64
    %39 = arith.addi %38, %c8_i64_17 : i64
    %c0_i32_18 = arith.constant 0 : i32
    %40 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_18) : (!llvm.ptr, i32) -> i32
    %41 = arith.extui %40 : i32 to i64
    %c65536_i64_19 = arith.constant 65536 : i64
    %42 = arith.muli %41, %c65536_i64_19 : i64
    %43 = arith.cmpi ult, %39, %42 : i64
    cf.cond_br %43, ^bb7, ^bb8
  ^bb6:  // pred: ^bb3
    %c1_i32_20 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_20) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %44 = llvm.getelementptr %12[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_16, %44 {alignment = 1 : i64} : i64, !llvm.ptr
    %45 = llvm.load %1 : !llvm.ptr -> i32
    %c19_i32 = arith.constant 19 : i32
    %46 = arith.addi %45, %c19_i32 : i32
    llvm.store %46, %1 : i32, !llvm.ptr
    %c0_i32_21 = arith.constant 0 : i32
    llvm.store %c0_i32_21, %4 : i32, !llvm.ptr
    %c0_i32_22 = arith.constant 0 : i32
    llvm.store %c0_i32_22, %5 : i32, !llvm.ptr
    cf.br ^bb10
  ^bb8:  // pred: ^bb5
    %c1_i32_23 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_23) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // pred: ^bb17
    %47 = llvm.load %3 : !llvm.ptr -> i32
    %c40_i64 = arith.constant 40 : i64
    %48 = arith.extui %47 : i32 to i64
    %49 = arith.addi %48, %c40_i64 : i64
    %c8_i64_24 = arith.constant 8 : i64
    %50 = arith.addi %49, %c8_i64_24 : i64
    %c0_i32_25 = arith.constant 0 : i32
    %51 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_25) : (!llvm.ptr, i32) -> i32
    %52 = arith.extui %51 : i32 to i64
    %c65536_i64_26 = arith.constant 65536 : i64
    %53 = arith.muli %52, %c65536_i64_26 : i64
    %54 = arith.cmpi ult, %50, %53 : i64
    cf.cond_br %54, ^bb19, ^bb20
  ^bb10:  // 2 preds: ^bb7, ^bb15
    %55 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32_27 = arith.constant 24 : i32
    %56 = arith.addi %55, %c24_i32_27 : i32
    %57 = llvm.load %5 : !llvm.ptr -> i32
    %c-8_i32 = arith.constant -8 : i32
    %58 = arith.andi %57, %c-8_i32 : i32
    %59 = arith.addi %56, %58 : i32
    llvm.store %59, %6 : i32, !llvm.ptr
    %60 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_28 = arith.constant 0 : i64
    %61 = arith.extui %60 : i32 to i64
    %62 = arith.addi %61, %c0_i64_28 : i64
    %c1_i64 = arith.constant 1 : i64
    %63 = arith.addi %62, %c1_i64 : i64
    %c0_i32_29 = arith.constant 0 : i32
    %64 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_29) : (!llvm.ptr, i32) -> i32
    %65 = arith.extui %64 : i32 to i64
    %c65536_i64_30 = arith.constant 65536 : i64
    %66 = arith.muli %65, %c65536_i64_30 : i64
    %67 = arith.cmpi ult, %63, %66 : i64
    cf.cond_br %67, ^bb11, ^bb12
  ^bb11:  // 2 preds: ^bb10, ^bb12
    %68 = llvm.getelementptr %12[%62] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %69 = llvm.load volatile %68 {alignment = 1 : i64} : !llvm.ptr -> i8
    %70 = arith.extui %69 : i8 to i64
    %71 = llvm.load %4 : !llvm.ptr -> i32
    %c56_i32 = arith.constant 56 : i32
    %72 = arith.andi %71, %c56_i32 : i32
    %73 = arith.extui %72 : i32 to i64
    %c63_i64 = arith.constant 63 : i64
    %74 = arith.cmpi ule, %73, %c63_i64 : i64
    %75 = scf.if %74 -> (i64) {
      %206 = arith.shli %70, %73 : i64
      scf.yield %206 : i64
    } else {
      %c0_i64_97 = arith.constant 0 : i64
      scf.yield %c0_i64_97 : i64
    }
    %76 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_31 = arith.constant 0 : i64
    %77 = arith.extui %76 : i32 to i64
    %78 = arith.addi %77, %c0_i64_31 : i64
    %c8_i64_32 = arith.constant 8 : i64
    %79 = arith.addi %78, %c8_i64_32 : i64
    %c0_i32_33 = arith.constant 0 : i32
    %80 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_33) : (!llvm.ptr, i32) -> i32
    %81 = arith.extui %80 : i32 to i64
    %c65536_i64_34 = arith.constant 65536 : i64
    %82 = arith.muli %81, %c65536_i64_34 : i64
    %83 = arith.cmpi ult, %79, %82 : i64
    cf.cond_br %83, ^bb13, ^bb14
  ^bb12:  // pred: ^bb10
    %c1_i32_35 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_35) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %84 = llvm.getelementptr %12[%78] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %85 = llvm.load volatile %84 {alignment = 1 : i64} : !llvm.ptr -> i64
    %86 = arith.addi %75, %85 : i64
    %c0_i64_36 = arith.constant 0 : i64
    %87 = arith.extui %59 : i32 to i64
    %88 = arith.addi %87, %c0_i64_36 : i64
    %c8_i64_37 = arith.constant 8 : i64
    %89 = arith.addi %88, %c8_i64_37 : i64
    %c0_i32_38 = arith.constant 0 : i32
    %90 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_38) : (!llvm.ptr, i32) -> i32
    %91 = arith.extui %90 : i32 to i64
    %c65536_i64_39 = arith.constant 65536 : i64
    %92 = arith.muli %91, %c65536_i64_39 : i64
    %93 = arith.cmpi ult, %89, %92 : i64
    cf.cond_br %93, ^bb15, ^bb16
  ^bb14:  // pred: ^bb11
    %c1_i32_40 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_40) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // 2 preds: ^bb13, ^bb16
    %94 = llvm.getelementptr %12[%88] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %86, %94 {alignment = 1 : i64} : i64, !llvm.ptr
    %95 = llvm.load %1 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %96 = arith.addi %95, %c-1_i32 : i32
    llvm.store %96, %1 : i32, !llvm.ptr
    %97 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i32_41 = arith.constant 8 : i32
    %98 = arith.addi %97, %c8_i32_41 : i32
    llvm.store %98, %4 : i32, !llvm.ptr
    %99 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i32_42 = arith.constant 1 : i32
    %100 = arith.addi %99, %c1_i32_42 : i32
    llvm.store %100, %5 : i32, !llvm.ptr
    %c20_i32 = arith.constant 20 : i32
    %101 = arith.cmpi eq, %100, %c20_i32 : i32
    %102 = arith.extui %101 : i1 to i32
    %c0_i32_43 = arith.constant 0 : i32
    %103 = arith.cmpi eq, %102, %c0_i32_43 : i32
    %104 = arith.extui %103 : i1 to i32
    %c0_i32_44 = arith.constant 0 : i32
    %105 = arith.cmpi ne, %104, %c0_i32_44 : i32
    cf.cond_br %105, ^bb10, ^bb17
  ^bb16:  // pred: ^bb13
    %c1_i32_45 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_45) : (i32) -> ()
    cf.br ^bb15
  ^bb17:  // pred: ^bb15
    cf.br ^bb9
  ^bb18:  // pred: ^bb19
    %106 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_46 = arith.constant 8 : i32
    %107 = arith.addi %106, %c8_i32_46 : i32
    %108 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32_47 = arith.constant 24 : i32
    %109 = arith.addi %108, %c24_i32_47 : i32
    %c8_i32_48 = arith.constant 8 : i32
    %110 = arith.addi %109, %c8_i32_48 : i32
    %c0_i64_49 = arith.constant 0 : i64
    %111 = arith.extui %110 : i32 to i64
    %112 = arith.addi %111, %c0_i64_49 : i64
    %c8_i64_50 = arith.constant 8 : i64
    %113 = arith.addi %112, %c8_i64_50 : i64
    %c0_i32_51 = arith.constant 0 : i32
    %114 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_51) : (!llvm.ptr, i32) -> i32
    %115 = arith.extui %114 : i32 to i64
    %c65536_i64_52 = arith.constant 65536 : i64
    %116 = arith.muli %115, %c65536_i64_52 : i64
    %117 = arith.cmpi ult, %113, %116 : i64
    cf.cond_br %117, ^bb30, ^bb31
  ^bb19:  // 2 preds: ^bb9, ^bb20
    %118 = llvm.getelementptr %12[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %119 = llvm.load volatile %118 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %119, %7 : i64, !llvm.ptr
    %c4294967295_i64 = arith.constant 4294967295 : i64
    %120 = arith.cmpi ule, %119, %c4294967295_i64 : i64
    %121 = arith.extui %120 : i1 to i64
    %122 = arith.trunci %121 : i64 to i32
    %c0_i32_53 = arith.constant 0 : i32
    %123 = arith.cmpi ne, %122, %c0_i32_53 : i32
    cf.cond_br %123, ^bb18, ^bb21
  ^bb20:  // pred: ^bb9
    %c1_i32_54 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_54) : (i32) -> ()
    cf.br ^bb19
  ^bb21:  // pred: ^bb19
    %124 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_55 = arith.constant 0 : i32
    %c40_i64_56 = arith.constant 40 : i64
    %125 = arith.extui %124 : i32 to i64
    %126 = arith.addi %125, %c40_i64_56 : i64
    %c4_i64 = arith.constant 4 : i64
    %127 = arith.addi %126, %c4_i64 : i64
    %c0_i32_57 = arith.constant 0 : i32
    %128 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_57) : (!llvm.ptr, i32) -> i32
    %129 = arith.extui %128 : i32 to i64
    %c65536_i64_58 = arith.constant 65536 : i64
    %130 = arith.muli %129, %c65536_i64_58 : i64
    %131 = arith.cmpi ult, %127, %130 : i64
    cf.cond_br %131, ^bb22, ^bb23
  ^bb22:  // 2 preds: ^bb21, ^bb23
    %132 = llvm.getelementptr %12[%126] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_55, %132 {alignment = 1 : i64} : i32, !llvm.ptr
    %133 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_59 = arith.constant 1 : i32
    %c28_i64 = arith.constant 28 : i64
    %134 = arith.extui %133 : i32 to i64
    %135 = arith.addi %134, %c28_i64 : i64
    %c4_i64_60 = arith.constant 4 : i64
    %136 = arith.addi %135, %c4_i64_60 : i64
    %c0_i32_61 = arith.constant 0 : i32
    %137 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_61) : (!llvm.ptr, i32) -> i32
    %138 = arith.extui %137 : i32 to i64
    %c65536_i64_62 = arith.constant 65536 : i64
    %139 = arith.muli %138, %c65536_i64_62 : i64
    %140 = arith.cmpi ult, %136, %139 : i64
    cf.cond_br %140, ^bb24, ^bb25
  ^bb23:  // pred: ^bb21
    %c1_i32_63 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_63) : (i32) -> ()
    cf.br ^bb22
  ^bb24:  // 2 preds: ^bb22, ^bb25
    %141 = llvm.getelementptr %12[%135] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_59, %141 {alignment = 1 : i64} : i32, !llvm.ptr
    %142 = llvm.load %3 : !llvm.ptr -> i32
    %c1050456_i32 = arith.constant 1050456 : i32
    %c24_i64_64 = arith.constant 24 : i64
    %143 = arith.extui %142 : i32 to i64
    %144 = arith.addi %143, %c24_i64_64 : i64
    %c4_i64_65 = arith.constant 4 : i64
    %145 = arith.addi %144, %c4_i64_65 : i64
    %c0_i32_66 = arith.constant 0 : i32
    %146 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_66) : (!llvm.ptr, i32) -> i32
    %147 = arith.extui %146 : i32 to i64
    %c65536_i64_67 = arith.constant 65536 : i64
    %148 = arith.muli %147, %c65536_i64_67 : i64
    %149 = arith.cmpi ult, %145, %148 : i64
    cf.cond_br %149, ^bb26, ^bb27
  ^bb25:  // pred: ^bb22
    %c1_i32_68 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_68) : (i32) -> ()
    cf.br ^bb24
  ^bb26:  // 2 preds: ^bb24, ^bb27
    %150 = llvm.getelementptr %12[%144] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1050456_i32, %150 {alignment = 1 : i64} : i32, !llvm.ptr
    %151 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64_69 = arith.constant 4 : i64
    %c32_i64 = arith.constant 32 : i64
    %152 = arith.extui %151 : i32 to i64
    %153 = arith.addi %152, %c32_i64 : i64
    %c8_i64_70 = arith.constant 8 : i64
    %154 = arith.addi %153, %c8_i64_70 : i64
    %c0_i32_71 = arith.constant 0 : i32
    %155 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_71) : (!llvm.ptr, i32) -> i32
    %156 = arith.extui %155 : i32 to i64
    %c65536_i64_72 = arith.constant 65536 : i64
    %157 = arith.muli %156, %c65536_i64_72 : i64
    %158 = arith.cmpi ult, %154, %157 : i64
    cf.cond_br %158, ^bb28, ^bb29
  ^bb27:  // pred: ^bb24
    %c1_i32_73 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_73) : (i32) -> ()
    cf.br ^bb26
  ^bb28:  // 2 preds: ^bb26, ^bb29
    %159 = llvm.getelementptr %12[%153] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4_i64_69, %159 {alignment = 1 : i64} : i64, !llvm.ptr
    %160 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32_74 = arith.constant 24 : i32
    %161 = arith.addi %160, %c24_i32_74 : i32
    %c1050316_i32 = arith.constant 1050316 : i32
    call @f148(%arg0, %161, %c1050316_i32) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb29:  // pred: ^bb26
    %c1_i32_75 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_75) : (i32) -> ()
    cf.br ^bb28
  ^bb30:  // 2 preds: ^bb18, ^bb31
    %162 = llvm.getelementptr %12[%112] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %163 = llvm.load volatile %162 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_76 = arith.constant 0 : i64
    %164 = arith.extui %107 : i32 to i64
    %165 = arith.addi %164, %c0_i64_76 : i64
    %c8_i64_77 = arith.constant 8 : i64
    %166 = arith.addi %165, %c8_i64_77 : i64
    %c0_i32_78 = arith.constant 0 : i32
    %167 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_78) : (!llvm.ptr, i32) -> i32
    %168 = arith.extui %167 : i32 to i64
    %c65536_i64_79 = arith.constant 65536 : i64
    %169 = arith.muli %168, %c65536_i64_79 : i64
    %170 = arith.cmpi ult, %166, %169 : i64
    cf.cond_br %170, ^bb32, ^bb33
  ^bb31:  // pred: ^bb18
    %c1_i32_80 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_80) : (i32) -> ()
    cf.br ^bb30
  ^bb32:  // 2 preds: ^bb30, ^bb33
    %171 = llvm.getelementptr %12[%165] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %163, %171 {alignment = 1 : i64} : i64, !llvm.ptr
    %172 = llvm.load %3 : !llvm.ptr -> i32
    %173 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i64_81 = arith.constant 24 : i64
    %174 = arith.extui %173 : i32 to i64
    %175 = arith.addi %174, %c24_i64_81 : i64
    %c8_i64_82 = arith.constant 8 : i64
    %176 = arith.addi %175, %c8_i64_82 : i64
    %c0_i32_83 = arith.constant 0 : i32
    %177 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_83) : (!llvm.ptr, i32) -> i32
    %178 = arith.extui %177 : i32 to i64
    %c65536_i64_84 = arith.constant 65536 : i64
    %179 = arith.muli %178, %c65536_i64_84 : i64
    %180 = arith.cmpi ult, %176, %179 : i64
    cf.cond_br %180, ^bb34, ^bb35
  ^bb33:  // pred: ^bb30
    %c1_i32_85 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_85) : (i32) -> ()
    cf.br ^bb32
  ^bb34:  // 2 preds: ^bb32, ^bb35
    %181 = llvm.getelementptr %12[%175] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %182 = llvm.load volatile %181 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_86 = arith.constant 0 : i64
    %183 = arith.extui %172 : i32 to i64
    %184 = arith.addi %183, %c0_i64_86 : i64
    %c8_i64_87 = arith.constant 8 : i64
    %185 = arith.addi %184, %c8_i64_87 : i64
    %c0_i32_88 = arith.constant 0 : i32
    %186 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_88) : (!llvm.ptr, i32) -> i32
    %187 = arith.extui %186 : i32 to i64
    %c65536_i64_89 = arith.constant 65536 : i64
    %188 = arith.muli %187, %c65536_i64_89 : i64
    %189 = arith.cmpi ult, %185, %188 : i64
    cf.cond_br %189, ^bb36, ^bb37
  ^bb35:  // pred: ^bb32
    %c1_i32_90 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_90) : (i32) -> ()
    cf.br ^bb34
  ^bb36:  // 2 preds: ^bb34, ^bb37
    %190 = llvm.getelementptr %12[%184] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %182, %190 {alignment = 1 : i64} : i64, !llvm.ptr
    %191 = llvm.load %3 : !llvm.ptr -> i32
    %192 = llvm.load %7 : !llvm.ptr -> i64
    %c16_i64 = arith.constant 16 : i64
    %193 = arith.extui %191 : i32 to i64
    %194 = arith.addi %193, %c16_i64 : i64
    %c8_i64_91 = arith.constant 8 : i64
    %195 = arith.addi %194, %c8_i64_91 : i64
    %c0_i32_92 = arith.constant 0 : i32
    %196 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_92) : (!llvm.ptr, i32) -> i32
    %197 = arith.extui %196 : i32 to i64
    %c65536_i64_93 = arith.constant 65536 : i64
    %198 = arith.muli %197, %c65536_i64_93 : i64
    %199 = arith.cmpi ult, %195, %198 : i64
    cf.cond_br %199, ^bb38, ^bb39
  ^bb37:  // pred: ^bb34
    %c1_i32_94 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_94) : (i32) -> ()
    cf.br ^bb36
  ^bb38:  // 2 preds: ^bb36, ^bb39
    %200 = llvm.getelementptr %12[%194] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %192, %200 {alignment = 1 : i64} : i64, !llvm.ptr
    %201 = llvm.load %0 : !llvm.ptr -> i32
    %202 = llvm.load %3 : !llvm.ptr -> i32
    %203 = llvm.load %2 : !llvm.ptr -> i32
    call @f73(%arg0, %201, %202, %203) : (!llvm.ptr, i32, i32, i32) -> ()
    %204 = llvm.load %3 : !llvm.ptr -> i32
    %c48_i32_95 = arith.constant 48 : i32
    %205 = arith.addi %204, %c48_i32_95 : i32
    llvm.store %205, %9 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb39:  // pred: ^bb36
    %c1_i32_96 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_96) : (i32) -> ()
    cf.br ^bb38
  }
  func.func @f75(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = llvm.load %1 : !llvm.ptr -> i32
    %4 = llvm.load %1 : !llvm.ptr -> i32
    call @f62(%arg0, %2, %3, %4) : (!llvm.ptr, i32, i32, i32) -> ()
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f76(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.load %0 : !llvm.ptr -> i32
    %4 = llvm.load %1 : !llvm.ptr -> i32
    call @f69(%arg0, %2, %3, %4) : (!llvm.ptr, i32, i32, i32) -> ()
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f77(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1050464_i32 = arith.constant 1050464 : i32
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.load %0 : !llvm.ptr -> i32
    %4 = call @f82(%arg0, %c1050464_i32, %2, %3) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%4 : i32)
  ^bb2(%5: i32):  // pred: ^bb1
    return %5 : i32
  }
  func.func @f78(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f79(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1050464_i32 = arith.constant 1050464 : i32
    %4 = llvm.load %2 : !llvm.ptr -> i32
    %5 = llvm.load %3 : !llvm.ptr -> i32
    %6 = call @f82(%arg0, %c1050464_i32, %4, %5) : (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %6, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %7 = arith.cmpi eq, %6, %c0_i32 : i32
    %8 = arith.extui %7 : i1 to i32
    %c0_i32_3 = arith.constant 0 : i32
    %9 = arith.cmpi ne, %8, %c0_i32_3 : i32
    cf.cond_br %9, ^bb3, ^bb4
  ^bb2(%10: i32):  // pred: ^bb3
    return %10 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %11 = llvm.load %2 : !llvm.ptr -> i32
    cf.br ^bb2(%11 : i32)
  ^bb4:  // pred: ^bb1
    %12 = llvm.load %2 : !llvm.ptr -> i32
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %14 = llvm.load %1 : !llvm.ptr -> i32
    %15 = llvm.load %3 : !llvm.ptr -> i32
    %16 = llvm.load %1 : !llvm.ptr -> i32
    %17 = llvm.load %3 : !llvm.ptr -> i32
    %18 = arith.cmpi ult, %16, %17 : i32
    %19 = arith.extui %18 : i1 to i32
    %c0_i32_4 = arith.constant 0 : i32
    %20 = arith.cmpi ne, %19, %c0_i32_4 : i32
    %21 = arith.select %20, %14, %15 : i32
    %22 = call @f161(%arg0, %12, %13, %21) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb3
  }
  func.func @f80(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[160] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %4 = llvm.getelementptr %1[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %6 = llvm.call %3(%5) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr) -> i32
    cf.br ^bb2(%6 : i32)
  ^bb2(%7: i32):  // pred: ^bb1
    return %7 : i32
  }
  func.func @f81(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %3 : i64, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %4 : i64, !llvm.ptr
    %5 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %7[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.getelementptr %arg0[4] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> i32
    %12 = llvm.getelementptr %arg0[304] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.getelementptr %arg0[312] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    %15 = llvm.load %13 : !llvm.ptr -> i64
    %16 = arith.trunci %15 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %17 = llvm.load %6 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %18 = arith.subi %17, %c32_i32 : i32
    llvm.store %18, %1 : i32, !llvm.ptr
    llvm.store %18, %6 : i32, !llvm.ptr
    %c0_i32_4 = arith.constant 0 : i32
    %c1051560_i64 = arith.constant 1051560 : i64
    %19 = arith.extui %c0_i32_4 : i32 to i64
    %20 = arith.addi %19, %c1051560_i64 : i64
    %c1_i64 = arith.constant 1 : i64
    %21 = arith.addi %20, %c1_i64 : i64
    %c0_i32_5 = arith.constant 0 : i32
    %22 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_5) : (!llvm.ptr, i32) -> i32
    %23 = arith.extui %22 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %24 = arith.muli %23, %c65536_i64 : i64
    %25 = arith.cmpi ult, %21, %24 : i64
    cf.cond_br %25, ^bb5, ^bb6
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb36, ^bb48
    %26 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i32_6 = arith.constant 32 : i32
    %27 = arith.addi %26, %c32_i32_6 : i32
    llvm.store %27, %6 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb5
    %28 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %29 = arith.addi %28, %c16_i32 : i32
    %c0_i32_7 = arith.constant 0 : i32
    %c1051556_i64 = arith.constant 1051556 : i64
    %30 = arith.extui %c0_i32_7 : i32 to i64
    %31 = arith.addi %30, %c1051556_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %32 = arith.addi %31, %c4_i64 : i64
    %c0_i32_8 = arith.constant 0 : i32
    %33 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_8) : (!llvm.ptr, i32) -> i32
    %34 = arith.extui %33 : i32 to i64
    %c65536_i64_9 = arith.constant 65536 : i64
    %35 = arith.muli %34, %c65536_i64_9 : i64
    %36 = arith.cmpi ult, %32, %35 : i64
    cf.cond_br %36, ^bb38, ^bb39
  ^bb5:  // 2 preds: ^bb1, ^bb6
    %37 = llvm.getelementptr %9[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %38 = llvm.load volatile %37 {alignment = 1 : i64} : !llvm.ptr -> i8
    %39 = arith.extui %38 : i8 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %40 = arith.cmpi ne, %39, %c0_i32_10 : i32
    cf.cond_br %40, ^bb4, ^bb7
  ^bb6:  // pred: ^bb1
    %c1_i32_11 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_11) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // pred: ^bb5
    %41 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %42 = arith.addi %41, %c12_i32 : i32
    %c0_i32_12 = arith.constant 0 : i32
    %c1051536_i64 = arith.constant 1051536 : i64
    %43 = arith.extui %c0_i32_12 : i32 to i64
    %44 = arith.addi %43, %c1051536_i64 : i64
    %c4_i64_13 = arith.constant 4 : i64
    %45 = arith.addi %44, %c4_i64_13 : i64
    %c0_i32_14 = arith.constant 0 : i32
    %46 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_14) : (!llvm.ptr, i32) -> i32
    %47 = arith.extui %46 : i32 to i64
    %c65536_i64_15 = arith.constant 65536 : i64
    %48 = arith.muli %47, %c65536_i64_15 : i64
    %49 = arith.cmpi ult, %45, %48 : i64
    cf.cond_br %49, ^bb8, ^bb9
  ^bb8:  // 2 preds: ^bb7, ^bb9
    %50 = llvm.getelementptr %9[%44] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %51 = llvm.load volatile %50 {alignment = 1 : i64} : !llvm.ptr -> i32
    %52 = arith.cmpi ult, %51, %16 : i32
    cf.cond_br %52, ^bb10, ^bb11
  ^bb9:  // pred: ^bb7
    %c1_i32_16 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_16) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // 2 preds: ^bb8, ^bb11
    %53 = llvm.getelementptr inbounds %14[%51] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %54 = llvm.load %53 : !llvm.ptr -> !llvm.ptr
    %55 = llvm.ptrtoint %54 : !llvm.ptr to i64
    %c0_i64_17 = arith.constant 0 : i64
    %56 = arith.cmpi eq, %55, %c0_i64_17 : i64
    cf.cond_br %56, ^bb13, ^bb12
  ^bb11:  // pred: ^bb8
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb10
  ^bb12:  // 2 preds: ^bb10, ^bb13
    %57 = llvm.getelementptr %54[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %58 = llvm.getelementptr %54[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %59 = llvm.getelementptr %54[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %60 = llvm.load %57 : !llvm.ptr -> !llvm.ptr
    %61 = llvm.load %59 : !llvm.ptr -> !llvm.ptr
    %62 = llvm.ptrtoint %60 : !llvm.ptr to i64
    %c0_i64_18 = arith.constant 0 : i64
    %63 = arith.cmpi eq, %62, %c0_i64_18 : i64
    cf.cond_br %63, ^bb15, ^bb14
  ^bb13:  // pred: ^bb10
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb12
  ^bb14:  // 2 preds: ^bb12, ^bb15
    %64 = llvm.load %58 : !llvm.ptr -> i32
    %65 = arith.cmpi ne, %11, %64 : i32
    cf.cond_br %65, ^bb17, ^bb16
  ^bb15:  // pred: ^bb12
    %c3_i32_19 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_19) : (i32) -> ()
    cf.br ^bb14
  ^bb16:  // 2 preds: ^bb14, ^bb17
    %66 = llvm.call %60(%61, %42) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> !llvm.void
    %c0_i32_20 = arith.constant 0 : i32
    %c1_i32_21 = arith.constant 1 : i32
    %c1051560_i64_22 = arith.constant 1051560 : i64
    %67 = arith.extui %c0_i32_20 : i32 to i64
    %68 = arith.addi %67, %c1051560_i64_22 : i64
    %c1_i64_23 = arith.constant 1 : i64
    %69 = arith.addi %68, %c1_i64_23 : i64
    %c0_i32_24 = arith.constant 0 : i32
    %70 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_24) : (!llvm.ptr, i32) -> i32
    %71 = arith.extui %70 : i32 to i64
    %c65536_i64_25 = arith.constant 65536 : i64
    %72 = arith.muli %71, %c65536_i64_25 : i64
    %73 = arith.cmpi ult, %69, %72 : i64
    cf.cond_br %73, ^bb18, ^bb19
  ^bb17:  // pred: ^bb14
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb16
  ^bb18:  // 2 preds: ^bb16, ^bb19
    %74 = llvm.getelementptr %9[%68] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %75 = arith.trunci %c1_i32_21 : i32 to i8
    llvm.store volatile %75, %74 {alignment = 1 : i64} : i8, !llvm.ptr
    %c0_i32_26 = arith.constant 0 : i32
    %76 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32_27 = arith.constant 12 : i32
    %77 = arith.addi %76, %c12_i32_27 : i32
    %c16_i32_28 = arith.constant 16 : i32
    %78 = arith.addi %77, %c16_i32_28 : i32
    %c0_i64_29 = arith.constant 0 : i64
    %79 = arith.extui %78 : i32 to i64
    %80 = arith.addi %79, %c0_i64_29 : i64
    %c4_i64_30 = arith.constant 4 : i64
    %81 = arith.addi %80, %c4_i64_30 : i64
    %c0_i32_31 = arith.constant 0 : i32
    %82 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_31) : (!llvm.ptr, i32) -> i32
    %83 = arith.extui %82 : i32 to i64
    %c65536_i64_32 = arith.constant 65536 : i64
    %84 = arith.muli %83, %c65536_i64_32 : i64
    %85 = arith.cmpi ult, %81, %84 : i64
    cf.cond_br %85, ^bb20, ^bb21
  ^bb19:  // pred: ^bb16
    %c1_i32_33 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_33) : (i32) -> ()
    cf.br ^bb18
  ^bb20:  // 2 preds: ^bb18, ^bb21
    %86 = llvm.getelementptr %9[%80] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %87 = llvm.load volatile %86 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %87, %2 : i32, !llvm.ptr
    %c1051556_i64_34 = arith.constant 1051556 : i64
    %88 = arith.extui %c0_i32_26 : i32 to i64
    %89 = arith.addi %88, %c1051556_i64_34 : i64
    %c4_i64_35 = arith.constant 4 : i64
    %90 = arith.addi %89, %c4_i64_35 : i64
    %c0_i32_36 = arith.constant 0 : i32
    %91 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_36) : (!llvm.ptr, i32) -> i32
    %92 = arith.extui %91 : i32 to i64
    %c65536_i64_37 = arith.constant 65536 : i64
    %93 = arith.muli %92, %c65536_i64_37 : i64
    %94 = arith.cmpi ult, %90, %93 : i64
    cf.cond_br %94, ^bb22, ^bb23
  ^bb21:  // pred: ^bb18
    %c1_i32_38 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_38) : (i32) -> ()
    cf.br ^bb20
  ^bb22:  // 2 preds: ^bb20, ^bb23
    %95 = llvm.getelementptr %9[%89] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %87, %95 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_39 = arith.constant 0 : i32
    %96 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32_40 = arith.constant 12 : i32
    %97 = arith.addi %96, %c12_i32_40 : i32
    %c8_i32 = arith.constant 8 : i32
    %98 = arith.addi %97, %c8_i32 : i32
    %c0_i64_41 = arith.constant 0 : i64
    %99 = arith.extui %98 : i32 to i64
    %100 = arith.addi %99, %c0_i64_41 : i64
    %c8_i64 = arith.constant 8 : i64
    %101 = arith.addi %100, %c8_i64 : i64
    %c0_i32_42 = arith.constant 0 : i32
    %102 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_42) : (!llvm.ptr, i32) -> i32
    %103 = arith.extui %102 : i32 to i64
    %c65536_i64_43 = arith.constant 65536 : i64
    %104 = arith.muli %103, %c65536_i64_43 : i64
    %105 = arith.cmpi ult, %101, %104 : i64
    cf.cond_br %105, ^bb24, ^bb25
  ^bb23:  // pred: ^bb20
    %c1_i32_44 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_44) : (i32) -> ()
    cf.br ^bb22
  ^bb24:  // 2 preds: ^bb22, ^bb25
    %106 = llvm.getelementptr %9[%100] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %107 = llvm.load volatile %106 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %107, %3 : i64, !llvm.ptr
    %c1051548_i64 = arith.constant 1051548 : i64
    %108 = arith.extui %c0_i32_39 : i32 to i64
    %109 = arith.addi %108, %c1051548_i64 : i64
    %c8_i64_45 = arith.constant 8 : i64
    %110 = arith.addi %109, %c8_i64_45 : i64
    %c0_i32_46 = arith.constant 0 : i32
    %111 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_46) : (!llvm.ptr, i32) -> i32
    %112 = arith.extui %111 : i32 to i64
    %c65536_i64_47 = arith.constant 65536 : i64
    %113 = arith.muli %112, %c65536_i64_47 : i64
    %114 = arith.cmpi ult, %110, %113 : i64
    cf.cond_br %114, ^bb26, ^bb27
  ^bb25:  // pred: ^bb22
    %c1_i32_48 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_48) : (i32) -> ()
    cf.br ^bb24
  ^bb26:  // 2 preds: ^bb24, ^bb27
    %115 = llvm.getelementptr %9[%109] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %107, %115 {alignment = 1 : i64} : i64, !llvm.ptr
    %c0_i32_49 = arith.constant 0 : i32
    %116 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %117 = arith.extui %116 : i32 to i64
    %118 = arith.addi %117, %c12_i64 : i64
    %c8_i64_50 = arith.constant 8 : i64
    %119 = arith.addi %118, %c8_i64_50 : i64
    %c0_i32_51 = arith.constant 0 : i32
    %120 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_51) : (!llvm.ptr, i32) -> i32
    %121 = arith.extui %120 : i32 to i64
    %c65536_i64_52 = arith.constant 65536 : i64
    %122 = arith.muli %121, %c65536_i64_52 : i64
    %123 = arith.cmpi ult, %119, %122 : i64
    cf.cond_br %123, ^bb28, ^bb29
  ^bb27:  // pred: ^bb24
    %c1_i32_53 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_53) : (i32) -> ()
    cf.br ^bb26
  ^bb28:  // 2 preds: ^bb26, ^bb29
    %124 = llvm.getelementptr %9[%118] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %125 = llvm.load volatile %124 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %125, %4 : i64, !llvm.ptr
    %c1051540_i64 = arith.constant 1051540 : i64
    %126 = arith.extui %c0_i32_49 : i32 to i64
    %127 = arith.addi %126, %c1051540_i64 : i64
    %c8_i64_54 = arith.constant 8 : i64
    %128 = arith.addi %127, %c8_i64_54 : i64
    %c0_i32_55 = arith.constant 0 : i32
    %129 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_55) : (!llvm.ptr, i32) -> i32
    %130 = arith.extui %129 : i32 to i64
    %c65536_i64_56 = arith.constant 65536 : i64
    %131 = arith.muli %130, %c65536_i64_56 : i64
    %132 = arith.cmpi ult, %128, %131 : i64
    cf.cond_br %132, ^bb30, ^bb31
  ^bb29:  // pred: ^bb26
    %c1_i32_57 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_57) : (i32) -> ()
    cf.br ^bb28
  ^bb30:  // 2 preds: ^bb28, ^bb31
    %133 = llvm.getelementptr %9[%127] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %125, %133 {alignment = 1 : i64} : i64, !llvm.ptr
    %134 = llvm.load %0 : !llvm.ptr -> i32
    %135 = llvm.load %4 : !llvm.ptr -> i64
    %c0_i64_58 = arith.constant 0 : i64
    %136 = arith.extui %134 : i32 to i64
    %137 = arith.addi %136, %c0_i64_58 : i64
    %c8_i64_59 = arith.constant 8 : i64
    %138 = arith.addi %137, %c8_i64_59 : i64
    %c0_i32_60 = arith.constant 0 : i32
    %139 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_60) : (!llvm.ptr, i32) -> i32
    %140 = arith.extui %139 : i32 to i64
    %c65536_i64_61 = arith.constant 65536 : i64
    %141 = arith.muli %140, %c65536_i64_61 : i64
    %142 = arith.cmpi ult, %138, %141 : i64
    cf.cond_br %142, ^bb32, ^bb33
  ^bb31:  // pred: ^bb28
    %c1_i32_62 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_62) : (i32) -> ()
    cf.br ^bb30
  ^bb32:  // 2 preds: ^bb30, ^bb33
    %143 = llvm.getelementptr %9[%137] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %135, %143 {alignment = 1 : i64} : i64, !llvm.ptr
    %144 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_63 = arith.constant 8 : i32
    %145 = arith.addi %144, %c8_i32_63 : i32
    %146 = llvm.load %3 : !llvm.ptr -> i64
    %c0_i64_64 = arith.constant 0 : i64
    %147 = arith.extui %145 : i32 to i64
    %148 = arith.addi %147, %c0_i64_64 : i64
    %c8_i64_65 = arith.constant 8 : i64
    %149 = arith.addi %148, %c8_i64_65 : i64
    %c0_i32_66 = arith.constant 0 : i32
    %150 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_66) : (!llvm.ptr, i32) -> i32
    %151 = arith.extui %150 : i32 to i64
    %c65536_i64_67 = arith.constant 65536 : i64
    %152 = arith.muli %151, %c65536_i64_67 : i64
    %153 = arith.cmpi ult, %149, %152 : i64
    cf.cond_br %153, ^bb34, ^bb35
  ^bb33:  // pred: ^bb30
    %c1_i32_68 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_68) : (i32) -> ()
    cf.br ^bb32
  ^bb34:  // 2 preds: ^bb32, ^bb35
    %154 = llvm.getelementptr %9[%148] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %146, %154 {alignment = 1 : i64} : i64, !llvm.ptr
    %155 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_69 = arith.constant 16 : i32
    %156 = arith.addi %155, %c16_i32_69 : i32
    %157 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_70 = arith.constant 0 : i64
    %158 = arith.extui %156 : i32 to i64
    %159 = arith.addi %158, %c0_i64_70 : i64
    %c4_i64_71 = arith.constant 4 : i64
    %160 = arith.addi %159, %c4_i64_71 : i64
    %c0_i32_72 = arith.constant 0 : i32
    %161 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_72) : (!llvm.ptr, i32) -> i32
    %162 = arith.extui %161 : i32 to i64
    %c65536_i64_73 = arith.constant 65536 : i64
    %163 = arith.muli %162, %c65536_i64_73 : i64
    %164 = arith.cmpi ult, %160, %163 : i64
    cf.cond_br %164, ^bb36, ^bb37
  ^bb35:  // pred: ^bb32
    %c1_i32_74 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_74) : (i32) -> ()
    cf.br ^bb34
  ^bb36:  // 2 preds: ^bb34, ^bb37
    %165 = llvm.getelementptr %9[%159] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %157, %165 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb3
  ^bb37:  // pred: ^bb34
    %c1_i32_75 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_75) : (i32) -> ()
    cf.br ^bb36
  ^bb38:  // 2 preds: ^bb4, ^bb39
    %166 = llvm.getelementptr %9[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %167 = llvm.load volatile %166 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_76 = arith.constant 0 : i64
    %168 = arith.extui %29 : i32 to i64
    %169 = arith.addi %168, %c0_i64_76 : i64
    %c4_i64_77 = arith.constant 4 : i64
    %170 = arith.addi %169, %c4_i64_77 : i64
    %c0_i32_78 = arith.constant 0 : i32
    %171 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_78) : (!llvm.ptr, i32) -> i32
    %172 = arith.extui %171 : i32 to i64
    %c65536_i64_79 = arith.constant 65536 : i64
    %173 = arith.muli %172, %c65536_i64_79 : i64
    %174 = arith.cmpi ult, %170, %173 : i64
    cf.cond_br %174, ^bb40, ^bb41
  ^bb39:  // pred: ^bb4
    %c1_i32_80 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_80) : (i32) -> ()
    cf.br ^bb38
  ^bb40:  // 2 preds: ^bb38, ^bb41
    %175 = llvm.getelementptr %9[%169] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %167, %175 {alignment = 1 : i64} : i32, !llvm.ptr
    %176 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_81 = arith.constant 8 : i32
    %177 = arith.addi %176, %c8_i32_81 : i32
    %c0_i32_82 = arith.constant 0 : i32
    %c1051548_i64_83 = arith.constant 1051548 : i64
    %178 = arith.extui %c0_i32_82 : i32 to i64
    %179 = arith.addi %178, %c1051548_i64_83 : i64
    %c8_i64_84 = arith.constant 8 : i64
    %180 = arith.addi %179, %c8_i64_84 : i64
    %c0_i32_85 = arith.constant 0 : i32
    %181 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_85) : (!llvm.ptr, i32) -> i32
    %182 = arith.extui %181 : i32 to i64
    %c65536_i64_86 = arith.constant 65536 : i64
    %183 = arith.muli %182, %c65536_i64_86 : i64
    %184 = arith.cmpi ult, %180, %183 : i64
    cf.cond_br %184, ^bb42, ^bb43
  ^bb41:  // pred: ^bb38
    %c1_i32_87 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_87) : (i32) -> ()
    cf.br ^bb40
  ^bb42:  // 2 preds: ^bb40, ^bb43
    %185 = llvm.getelementptr %9[%179] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %186 = llvm.load volatile %185 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_88 = arith.constant 0 : i64
    %187 = arith.extui %177 : i32 to i64
    %188 = arith.addi %187, %c0_i64_88 : i64
    %c8_i64_89 = arith.constant 8 : i64
    %189 = arith.addi %188, %c8_i64_89 : i64
    %c0_i32_90 = arith.constant 0 : i32
    %190 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_90) : (!llvm.ptr, i32) -> i32
    %191 = arith.extui %190 : i32 to i64
    %c65536_i64_91 = arith.constant 65536 : i64
    %192 = arith.muli %191, %c65536_i64_91 : i64
    %193 = arith.cmpi ult, %189, %192 : i64
    cf.cond_br %193, ^bb44, ^bb45
  ^bb43:  // pred: ^bb40
    %c1_i32_92 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_92) : (i32) -> ()
    cf.br ^bb42
  ^bb44:  // 2 preds: ^bb42, ^bb45
    %194 = llvm.getelementptr %9[%188] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %186, %194 {alignment = 1 : i64} : i64, !llvm.ptr
    %195 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_93 = arith.constant 0 : i32
    %c1051540_i64_94 = arith.constant 1051540 : i64
    %196 = arith.extui %c0_i32_93 : i32 to i64
    %197 = arith.addi %196, %c1051540_i64_94 : i64
    %c8_i64_95 = arith.constant 8 : i64
    %198 = arith.addi %197, %c8_i64_95 : i64
    %c0_i32_96 = arith.constant 0 : i32
    %199 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_96) : (!llvm.ptr, i32) -> i32
    %200 = arith.extui %199 : i32 to i64
    %c65536_i64_97 = arith.constant 65536 : i64
    %201 = arith.muli %200, %c65536_i64_97 : i64
    %202 = arith.cmpi ult, %198, %201 : i64
    cf.cond_br %202, ^bb46, ^bb47
  ^bb45:  // pred: ^bb42
    %c1_i32_98 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_98) : (i32) -> ()
    cf.br ^bb44
  ^bb46:  // 2 preds: ^bb44, ^bb47
    %203 = llvm.getelementptr %9[%197] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %204 = llvm.load volatile %203 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_99 = arith.constant 0 : i64
    %205 = arith.extui %195 : i32 to i64
    %206 = arith.addi %205, %c0_i64_99 : i64
    %c8_i64_100 = arith.constant 8 : i64
    %207 = arith.addi %206, %c8_i64_100 : i64
    %c0_i32_101 = arith.constant 0 : i32
    %208 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_101) : (!llvm.ptr, i32) -> i32
    %209 = arith.extui %208 : i32 to i64
    %c65536_i64_102 = arith.constant 65536 : i64
    %210 = arith.muli %209, %c65536_i64_102 : i64
    %211 = arith.cmpi ult, %207, %210 : i64
    cf.cond_br %211, ^bb48, ^bb49
  ^bb47:  // pred: ^bb44
    %c1_i32_103 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_103) : (i32) -> ()
    cf.br ^bb46
  ^bb48:  // 2 preds: ^bb46, ^bb49
    %212 = llvm.getelementptr %9[%206] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %204, %212 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb3
  ^bb49:  // pred: ^bb46
    %c1_i32_104 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_104) : (i32) -> ()
    cf.br ^bb48
  }
  func.func @f82(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32_5 = arith.constant 0 : i32
    llvm.store %c0_i32_5, %3 : i32, !llvm.ptr
    %c0_i32_6 = arith.constant 0 : i32
    %c1051620_i64 = arith.constant 1051620 : i64
    %9 = arith.extui %c0_i32_6 : i32 to i64
    %10 = arith.addi %9, %c1051620_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %11 = arith.addi %10, %c4_i64 : i64
    %c0_i32_7 = arith.constant 0 : i32
    %12 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_7) : (!llvm.ptr, i32) -> i32
    %13 = arith.extui %12 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %14 = arith.muli %13, %c65536_i64 : i64
    %15 = arith.cmpi ult, %11, %14 : i64
    cf.cond_br %15, ^bb4, ^bb5
  ^bb2(%16: i32):  // pred: ^bb11
    return %16 : i32
  ^bb3:  // 2 preds: ^bb4, ^bb9
    %17 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i32_8 = arith.constant 0 : i32
    %18 = llvm.load %1 : !llvm.ptr -> i32
    %19 = arith.subi %c0_i32_8, %18 : i32
    %20 = arith.andi %17, %19 : i32
    llvm.store %20, %4 : i32, !llvm.ptr
    %21 = llvm.load %2 : !llvm.ptr -> i32
    %22 = arith.cmpi ult, %20, %21 : i32
    %23 = arith.extui %22 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %24 = arith.cmpi ne, %23, %c0_i32_9 : i32
    cf.cond_br %24, ^bb11, ^bb12
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %25 = llvm.getelementptr %8[%10] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %26 = llvm.load volatile %25 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %26, %4 : i32, !llvm.ptr
    %c0_i32_10 = arith.constant 0 : i32
    %27 = arith.cmpi ne, %26, %c0_i32_10 : i32
    cf.cond_br %27, ^bb3, ^bb6
  ^bb5:  // pred: ^bb1
    %c1_i32_11 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_11) : (i32) -> ()
    cf.br ^bb4
  ^bb6:  // pred: ^bb4
    %c0_i32_12 = arith.constant 0 : i32
    %28 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_12) : (!llvm.ptr, i32) -> i32
    llvm.store %28, %5 : i32, !llvm.ptr
    %c0_i32_13 = arith.constant 0 : i32
    %c0_i32_14 = arith.constant 0 : i32
    %c1051664_i32 = arith.constant 1051664 : i32
    %29 = arith.subi %c0_i32_14, %c1051664_i32 : i32
    llvm.store %29, %4 : i32, !llvm.ptr
    %c1051620_i64_15 = arith.constant 1051620 : i64
    %30 = arith.extui %c0_i32_13 : i32 to i64
    %31 = arith.addi %30, %c1051620_i64_15 : i64
    %c4_i64_16 = arith.constant 4 : i64
    %32 = arith.addi %31, %c4_i64_16 : i64
    %c0_i32_17 = arith.constant 0 : i32
    %33 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_17) : (!llvm.ptr, i32) -> i32
    %34 = arith.extui %33 : i32 to i64
    %c65536_i64_18 = arith.constant 65536 : i64
    %35 = arith.muli %34, %c65536_i64_18 : i64
    %36 = arith.cmpi ult, %32, %35 : i64
    cf.cond_br %36, ^bb7, ^bb8
  ^bb7:  // 2 preds: ^bb6, ^bb8
    %37 = llvm.getelementptr %8[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %29, %37 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_19 = arith.constant 0 : i32
    %c1_i32_20 = arith.constant 1 : i32
    %38 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %c31_i32 = arith.constant 31 : i32
    %39 = arith.cmpi ule, %c16_i32, %c31_i32 : i32
    %40 = scf.if %39 -> (i32) {
      %116 = arith.shli %38, %c16_i32 : i32
      scf.yield %116 : i32
    } else {
      %c0_i32_64 = arith.constant 0 : i32
      scf.yield %c0_i32_64 : i32
    }
    %41 = arith.subi %c1_i32_20, %40 : i32
    %c1051624_i64 = arith.constant 1051624 : i64
    %42 = arith.extui %c0_i32_19 : i32 to i64
    %43 = arith.addi %42, %c1051624_i64 : i64
    %c4_i64_21 = arith.constant 4 : i64
    %44 = arith.addi %43, %c4_i64_21 : i64
    %c0_i32_22 = arith.constant 0 : i32
    %45 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_22) : (!llvm.ptr, i32) -> i32
    %46 = arith.extui %45 : i32 to i64
    %c65536_i64_23 = arith.constant 65536 : i64
    %47 = arith.muli %46, %c65536_i64_23 : i64
    %48 = arith.cmpi ult, %44, %47 : i64
    cf.cond_br %48, ^bb9, ^bb10
  ^bb8:  // pred: ^bb6
    %c1_i32_24 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_24) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %49 = llvm.getelementptr %8[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %41, %49 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb3
  ^bb10:  // pred: ^bb7
    %c1_i32_25 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_25) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 3 preds: ^bb3, ^bb16, ^bb22
    %50 = llvm.load %3 : !llvm.ptr -> i32
    cf.br ^bb2(%50 : i32)
  ^bb12:  // pred: ^bb3
    %c0_i32_26 = arith.constant 0 : i32
    llvm.store %c0_i32_26, %3 : i32, !llvm.ptr
    %c0_i32_27 = arith.constant 0 : i32
    %c1051624_i64_28 = arith.constant 1051624 : i64
    %51 = arith.extui %c0_i32_27 : i32 to i64
    %52 = arith.addi %51, %c1051624_i64_28 : i64
    %c4_i64_29 = arith.constant 4 : i64
    %53 = arith.addi %52, %c4_i64_29 : i64
    %c0_i32_30 = arith.constant 0 : i32
    %54 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_30) : (!llvm.ptr, i32) -> i32
    %55 = arith.extui %54 : i32 to i64
    %c65536_i64_31 = arith.constant 65536 : i64
    %56 = arith.muli %55, %c65536_i64_31 : i64
    %57 = arith.cmpi ult, %53, %56 : i64
    cf.cond_br %57, ^bb14, ^bb15
  ^bb13:  // 2 preds: ^bb14, ^bb20
    %c0_i32_32 = arith.constant 0 : i32
    %58 = llvm.load %2 : !llvm.ptr -> i32
    %c1051620_i64_33 = arith.constant 1051620 : i64
    %59 = arith.extui %c0_i32_32 : i32 to i64
    %60 = arith.addi %59, %c1051620_i64_33 : i64
    %c4_i64_34 = arith.constant 4 : i64
    %61 = arith.addi %60, %c4_i64_34 : i64
    %c0_i32_35 = arith.constant 0 : i32
    %62 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_35) : (!llvm.ptr, i32) -> i32
    %63 = arith.extui %62 : i32 to i64
    %c65536_i64_36 = arith.constant 65536 : i64
    %64 = arith.muli %63, %c65536_i64_36 : i64
    %65 = arith.cmpi ult, %61, %64 : i64
    cf.cond_br %65, ^bb22, ^bb23
  ^bb14:  // 2 preds: ^bb12, ^bb15
    %66 = llvm.getelementptr %8[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %67 = llvm.load volatile %66 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %67, %1 : i32, !llvm.ptr
    %68 = llvm.load %4 : !llvm.ptr -> i32
    %69 = llvm.load %2 : !llvm.ptr -> i32
    %70 = arith.subi %68, %69 : i32
    llvm.store %70, %2 : i32, !llvm.ptr
    %c1_i32_37 = arith.constant 1 : i32
    %71 = arith.addi %70, %c1_i32_37 : i32
    llvm.store %71, %5 : i32, !llvm.ptr
    %72 = arith.cmpi ule, %67, %71 : i32
    %73 = arith.extui %72 : i1 to i32
    %c0_i32_38 = arith.constant 0 : i32
    %74 = arith.cmpi ne, %73, %c0_i32_38 : i32
    cf.cond_br %74, ^bb13, ^bb16
  ^bb15:  // pred: ^bb12
    %c1_i32_39 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_39) : (i32) -> ()
    cf.br ^bb14
  ^bb16:  // pred: ^bb14
    %c0_i32_40 = arith.constant 0 : i32
    %75 = llvm.load %1 : !llvm.ptr -> i32
    %76 = llvm.load %5 : !llvm.ptr -> i32
    %77 = arith.subi %75, %76 : i32
    llvm.store %77, %5 : i32, !llvm.ptr
    %78 = llvm.load %5 : !llvm.ptr -> i32
    %79 = llvm.load %1 : !llvm.ptr -> i32
    %80 = arith.cmpi ugt, %78, %79 : i32
    %81 = arith.extui %80 : i1 to i32
    %c0_i32_41 = arith.constant 0 : i32
    %82 = arith.cmpi ne, %81, %c0_i32_41 : i32
    %83 = arith.select %82, %c0_i32_40, %77 : i32
    %c-1_i32 = arith.constant -1 : i32
    %84 = arith.addi %83, %c-1_i32 : i32
    %c16_i32_42 = arith.constant 16 : i32
    %c31_i32_43 = arith.constant 31 : i32
    %85 = arith.cmpi ule, %c16_i32_42, %c31_i32_43 : i32
    %86 = scf.if %85 -> (i32) {
      %116 = arith.shrui %84, %c16_i32_42 : i32
      scf.yield %116 : i32
    } else {
      %c0_i32_64 = arith.constant 0 : i32
      scf.yield %c0_i32_64 : i32
    }
    %c1_i32_44 = arith.constant 1 : i32
    %87 = arith.addi %86, %c1_i32_44 : i32
    llvm.store %87, %1 : i32, !llvm.ptr
    %c0_i32_45 = arith.constant 0 : i32
    %88 = call @dora_fn_wasm_memory_grow(%arg0, %87, %c0_i32_45) : (!llvm.ptr, i32, i32) -> i32
    %c-1_i32_46 = arith.constant -1 : i32
    %89 = arith.cmpi eq, %88, %c-1_i32_46 : i32
    %90 = arith.extui %89 : i1 to i32
    %c0_i32_47 = arith.constant 0 : i32
    %91 = arith.cmpi ne, %90, %c0_i32_47 : i32
    cf.cond_br %91, ^bb11, ^bb17
  ^bb17:  // pred: ^bb16
    %c0_i32_48 = arith.constant 0 : i32
    %c0_i32_49 = arith.constant 0 : i32
    %c1051624_i64_50 = arith.constant 1051624 : i64
    %92 = arith.extui %c0_i32_49 : i32 to i64
    %93 = arith.addi %92, %c1051624_i64_50 : i64
    %c4_i64_51 = arith.constant 4 : i64
    %94 = arith.addi %93, %c4_i64_51 : i64
    %c0_i32_52 = arith.constant 0 : i32
    %95 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_52) : (!llvm.ptr, i32) -> i32
    %96 = arith.extui %95 : i32 to i64
    %c65536_i64_53 = arith.constant 65536 : i64
    %97 = arith.muli %96, %c65536_i64_53 : i64
    %98 = arith.cmpi ult, %94, %97 : i64
    cf.cond_br %98, ^bb18, ^bb19
  ^bb18:  // 2 preds: ^bb17, ^bb19
    %99 = llvm.getelementptr %8[%93] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %100 = llvm.load volatile %99 {alignment = 1 : i64} : !llvm.ptr -> i32
    %101 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32_54 = arith.constant 16 : i32
    %c31_i32_55 = arith.constant 31 : i32
    %102 = arith.cmpi ule, %c16_i32_54, %c31_i32_55 : i32
    %103 = scf.if %102 -> (i32) {
      %116 = arith.shli %101, %c16_i32_54 : i32
      scf.yield %116 : i32
    } else {
      %c0_i32_64 = arith.constant 0 : i32
      scf.yield %c0_i32_64 : i32
    }
    %104 = arith.subi %100, %103 : i32
    %c1051624_i64_56 = arith.constant 1051624 : i64
    %105 = arith.extui %c0_i32_48 : i32 to i64
    %106 = arith.addi %105, %c1051624_i64_56 : i64
    %c4_i64_57 = arith.constant 4 : i64
    %107 = arith.addi %106, %c4_i64_57 : i64
    %c0_i32_58 = arith.constant 0 : i32
    %108 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_58) : (!llvm.ptr, i32) -> i32
    %109 = arith.extui %108 : i32 to i64
    %c65536_i64_59 = arith.constant 65536 : i64
    %110 = arith.muli %109, %c65536_i64_59 : i64
    %111 = arith.cmpi ult, %107, %110 : i64
    cf.cond_br %111, ^bb20, ^bb21
  ^bb19:  // pred: ^bb17
    %c1_i32_60 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_60) : (i32) -> ()
    cf.br ^bb18
  ^bb20:  // 2 preds: ^bb18, ^bb21
    %112 = llvm.getelementptr %8[%106] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %104, %112 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb13
  ^bb21:  // pred: ^bb18
    %c1_i32_61 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_61) : (i32) -> ()
    cf.br ^bb20
  ^bb22:  // 2 preds: ^bb13, ^bb23
    %113 = llvm.getelementptr %8[%60] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %58, %113 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_62 = arith.constant 0 : i32
    %114 = llvm.load %4 : !llvm.ptr -> i32
    %115 = arith.subi %c0_i32_62, %114 : i32
    llvm.store %115, %3 : i32, !llvm.ptr
    cf.br ^bb11
  ^bb23:  // pred: ^bb13
    %c1_i32_63 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_63) : (i32) -> ()
    cf.br ^bb22
  }
  func.func @f83(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %5 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %7[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %10 = llvm.load %6 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %11 = arith.subi %10, %c16_i32 : i32
    llvm.store %11, %2 : i32, !llvm.ptr
    llvm.store %11, %6 : i32, !llvm.ptr
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c12_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %16 = arith.addi %15, %c4_i64 : i64
    %c0_i32_4 = arith.constant 0 : i32
    %17 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_4) : (!llvm.ptr, i32) -> i32
    %18 = arith.extui %17 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %19 = arith.muli %18, %c65536_i64 : i64
    %20 = arith.cmpi ult, %16, %19 : i64
    cf.cond_br %20, ^bb3, ^bb4
  ^bb2:  // pred: ^bb23
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %21 = llvm.getelementptr %9[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %22 = llvm.load volatile %21 {alignment = 1 : i64} : !llvm.ptr -> i32
    %23 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_5 = arith.constant 4 : i64
    %24 = arith.extui %23 : i32 to i64
    %25 = arith.addi %24, %c4_i64_5 : i64
    %c4_i64_6 = arith.constant 4 : i64
    %26 = arith.addi %25, %c4_i64_6 : i64
    %c0_i32_7 = arith.constant 0 : i32
    %27 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_7) : (!llvm.ptr, i32) -> i32
    %28 = arith.extui %27 : i32 to i64
    %c65536_i64_8 = arith.constant 65536 : i64
    %29 = arith.muli %28, %c65536_i64_8 : i64
    %30 = arith.cmpi ult, %26, %29 : i64
    cf.cond_br %30, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c1_i32_9 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_9) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %31 = llvm.getelementptr %9[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %32 = llvm.load volatile %31 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %32, %3 : i32, !llvm.ptr
    %33 = arith.subi %22, %32 : i32
    llvm.store %33, %4 : i32, !llvm.ptr
    call @f106(%arg0, %12, %33) : (!llvm.ptr, i32, i32) -> ()
    %34 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_10 = arith.constant 4 : i64
    %35 = arith.extui %34 : i32 to i64
    %36 = arith.addi %35, %c4_i64_10 : i64
    %c4_i64_11 = arith.constant 4 : i64
    %37 = arith.addi %36, %c4_i64_11 : i64
    %c0_i32_12 = arith.constant 0 : i32
    %38 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_12) : (!llvm.ptr, i32) -> i32
    %39 = arith.extui %38 : i32 to i64
    %c65536_i64_13 = arith.constant 65536 : i64
    %40 = arith.muli %39, %c65536_i64_13 : i64
    %41 = arith.cmpi ult, %37, %40 : i64
    cf.cond_br %41, ^bb7, ^bb8
  ^bb6:  // pred: ^bb3
    %c1_i32_14 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_14) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %42 = llvm.getelementptr %9[%36] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %43 = llvm.load volatile %42 {alignment = 1 : i64} : !llvm.ptr -> i32
    %44 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %45 = arith.extui %44 : i32 to i64
    %46 = arith.addi %45, %c8_i64 : i64
    %c4_i64_15 = arith.constant 4 : i64
    %47 = arith.addi %46, %c4_i64_15 : i64
    %c0_i32_16 = arith.constant 0 : i32
    %48 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_16) : (!llvm.ptr, i32) -> i32
    %49 = arith.extui %48 : i32 to i64
    %c65536_i64_17 = arith.constant 65536 : i64
    %50 = arith.muli %49, %c65536_i64_17 : i64
    %51 = arith.cmpi ult, %47, %50 : i64
    cf.cond_br %51, ^bb9, ^bb10
  ^bb8:  // pred: ^bb5
    %c1_i32_18 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_18) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %52 = llvm.getelementptr %9[%46] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %53 = llvm.load volatile %52 {alignment = 1 : i64} : !llvm.ptr -> i32
    %54 = arith.addi %43, %53 : i32
    %55 = llvm.load %3 : !llvm.ptr -> i32
    %56 = llvm.load %4 : !llvm.ptr -> i32
    %57 = call @f161(%arg0, %54, %55, %56) : (!llvm.ptr, i32, i32, i32) -> i32
    %58 = llvm.load %1 : !llvm.ptr -> i32
    %59 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i64_19 = arith.constant 12 : i64
    %60 = arith.extui %58 : i32 to i64
    %61 = arith.addi %60, %c12_i64_19 : i64
    %c4_i64_20 = arith.constant 4 : i64
    %62 = arith.addi %61, %c4_i64_20 : i64
    %c0_i32_21 = arith.constant 0 : i32
    %63 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_21) : (!llvm.ptr, i32) -> i32
    %64 = arith.extui %63 : i32 to i64
    %c65536_i64_22 = arith.constant 65536 : i64
    %65 = arith.muli %64, %c65536_i64_22 : i64
    %66 = arith.cmpi ult, %62, %65 : i64
    cf.cond_br %66, ^bb11, ^bb12
  ^bb10:  // pred: ^bb7
    %c1_i32_23 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_23) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %67 = llvm.getelementptr %9[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %59, %67 {alignment = 1 : i64} : i32, !llvm.ptr
    %68 = llvm.load %0 : !llvm.ptr -> i32
    %69 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_24 = arith.constant 8 : i64
    %70 = arith.extui %69 : i32 to i64
    %71 = arith.addi %70, %c8_i64_24 : i64
    %c4_i64_25 = arith.constant 4 : i64
    %72 = arith.addi %71, %c4_i64_25 : i64
    %c0_i32_26 = arith.constant 0 : i32
    %73 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_26) : (!llvm.ptr, i32) -> i32
    %74 = arith.extui %73 : i32 to i64
    %c65536_i64_27 = arith.constant 65536 : i64
    %75 = arith.muli %74, %c65536_i64_27 : i64
    %76 = arith.cmpi ult, %72, %75 : i64
    cf.cond_br %76, ^bb13, ^bb14
  ^bb12:  // pred: ^bb9
    %c1_i32_28 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_28) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %77 = llvm.getelementptr %9[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %78 = llvm.load volatile %77 {alignment = 1 : i64} : !llvm.ptr -> i32
    %79 = llvm.load %4 : !llvm.ptr -> i32
    %80 = arith.addi %78, %79 : i32
    %c8_i64_29 = arith.constant 8 : i64
    %81 = arith.extui %68 : i32 to i64
    %82 = arith.addi %81, %c8_i64_29 : i64
    %c4_i64_30 = arith.constant 4 : i64
    %83 = arith.addi %82, %c4_i64_30 : i64
    %c0_i32_31 = arith.constant 0 : i32
    %84 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_31) : (!llvm.ptr, i32) -> i32
    %85 = arith.extui %84 : i32 to i64
    %c65536_i64_32 = arith.constant 65536 : i64
    %86 = arith.muli %85, %c65536_i64_32 : i64
    %87 = arith.cmpi ult, %83, %86 : i64
    cf.cond_br %87, ^bb15, ^bb16
  ^bb14:  // pred: ^bb11
    %c1_i32_33 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_33) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // 2 preds: ^bb13, ^bb16
    %88 = llvm.getelementptr %9[%82] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %80, %88 {alignment = 1 : i64} : i32, !llvm.ptr
    %89 = llvm.load %2 : !llvm.ptr -> i32
    %90 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %91 = arith.extui %90 : i32 to i64
    %92 = arith.addi %91, %c0_i64 : i64
    %c4_i64_34 = arith.constant 4 : i64
    %93 = arith.addi %92, %c4_i64_34 : i64
    %c0_i32_35 = arith.constant 0 : i32
    %94 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_35) : (!llvm.ptr, i32) -> i32
    %95 = arith.extui %94 : i32 to i64
    %c65536_i64_36 = arith.constant 65536 : i64
    %96 = arith.muli %95, %c65536_i64_36 : i64
    %97 = arith.cmpi ult, %93, %96 : i64
    cf.cond_br %97, ^bb17, ^bb18
  ^bb16:  // pred: ^bb13
    %c1_i32_37 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_37) : (i32) -> ()
    cf.br ^bb15
  ^bb17:  // 2 preds: ^bb15, ^bb18
    %98 = llvm.getelementptr %9[%92] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %99 = llvm.load volatile %98 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_38 = arith.constant 12 : i64
    %100 = arith.extui %89 : i32 to i64
    %101 = arith.addi %100, %c12_i64_38 : i64
    %c4_i64_39 = arith.constant 4 : i64
    %102 = arith.addi %101, %c4_i64_39 : i64
    %c0_i32_40 = arith.constant 0 : i32
    %103 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_40) : (!llvm.ptr, i32) -> i32
    %104 = arith.extui %103 : i32 to i64
    %c65536_i64_41 = arith.constant 65536 : i64
    %105 = arith.muli %104, %c65536_i64_41 : i64
    %106 = arith.cmpi ult, %102, %105 : i64
    cf.cond_br %106, ^bb19, ^bb20
  ^bb18:  // pred: ^bb15
    %c1_i32_42 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_42) : (i32) -> ()
    cf.br ^bb17
  ^bb19:  // 2 preds: ^bb17, ^bb20
    %107 = llvm.getelementptr %9[%101] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %99, %107 {alignment = 1 : i64} : i32, !llvm.ptr
    %108 = llvm.load %2 : !llvm.ptr -> i32
    %109 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64_43 = arith.constant 8 : i64
    %110 = arith.extui %109 : i32 to i64
    %111 = arith.addi %110, %c8_i64_43 : i64
    %c4_i64_44 = arith.constant 4 : i64
    %112 = arith.addi %111, %c4_i64_44 : i64
    %c0_i32_45 = arith.constant 0 : i32
    %113 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_45) : (!llvm.ptr, i32) -> i32
    %114 = arith.extui %113 : i32 to i64
    %c65536_i64_46 = arith.constant 65536 : i64
    %115 = arith.muli %114, %c65536_i64_46 : i64
    %116 = arith.cmpi ult, %112, %115 : i64
    cf.cond_br %116, ^bb21, ^bb22
  ^bb20:  // pred: ^bb17
    %c1_i32_47 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_47) : (i32) -> ()
    cf.br ^bb19
  ^bb21:  // 2 preds: ^bb19, ^bb22
    %117 = llvm.getelementptr %9[%111] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %118 = llvm.load volatile %117 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c8_i64_48 = arith.constant 8 : i64
    %119 = arith.extui %108 : i32 to i64
    %120 = arith.addi %119, %c8_i64_48 : i64
    %c4_i64_49 = arith.constant 4 : i64
    %121 = arith.addi %120, %c4_i64_49 : i64
    %c0_i32_50 = arith.constant 0 : i32
    %122 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_50) : (!llvm.ptr, i32) -> i32
    %123 = arith.extui %122 : i32 to i64
    %c65536_i64_51 = arith.constant 65536 : i64
    %124 = arith.muli %123, %c65536_i64_51 : i64
    %125 = arith.cmpi ult, %121, %124 : i64
    cf.cond_br %125, ^bb23, ^bb24
  ^bb22:  // pred: ^bb19
    %c1_i32_52 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_52) : (i32) -> ()
    cf.br ^bb21
  ^bb23:  // 2 preds: ^bb21, ^bb24
    %126 = llvm.getelementptr %9[%120] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %118, %126 {alignment = 1 : i64} : i32, !llvm.ptr
    %127 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %128 = arith.addi %127, %c8_i32 : i32
    call @f113(%arg0, %128) : (!llvm.ptr, i32) -> ()
    %129 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_53 = arith.constant 16 : i32
    %130 = arith.addi %129, %c16_i32_53 : i32
    llvm.store %130, %6 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb24:  // pred: ^bb21
    %c1_i32_54 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_54) : (i32) -> ()
    cf.br ^bb23
  }
  func.func @f84(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = llvm.load %1 : !llvm.ptr -> i32
    %4 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %5 = arith.addi %4, %c4_i32 : i32
    call @f103(%arg0, %2, %3, %5) : (!llvm.ptr, i32, i32, i32) -> ()
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f85(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %3 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %4 = arith.cmpi eq, %3, %c0_i32 : i32
    %5 = arith.extui %4 : i1 to i32
    %c0_i32_2 = arith.constant 0 : i32
    %6 = arith.cmpi ne, %5, %c0_i32_2 : i32
    cf.cond_br %6, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %7 = llvm.load %0 : !llvm.ptr -> i32
    %8 = llvm.load %2 : !llvm.ptr -> i32
    %9 = llvm.load %1 : !llvm.ptr -> i32
    %10 = call @f160(%arg0, %7, %8, %9) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb3
  }
  func.func @f86(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %6 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %7 = arith.extui %6 : i32 to i64
    %8 = arith.addi %7, %c4_i64 : i64
    %c4_i64_1 = arith.constant 4 : i64
    %9 = arith.addi %8, %c4_i64_1 : i64
    %c0_i32 = arith.constant 0 : i32
    %10 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32) : (!llvm.ptr, i32) -> i32
    %11 = arith.extui %10 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %12 = arith.muli %11, %c65536_i64 : i64
    %13 = arith.cmpi ult, %9, %12 : i64
    cf.cond_br %13, ^bb3, ^bb4
  ^bb2:  // pred: ^bb13
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %14 = llvm.getelementptr %4[%8] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %15 = llvm.load volatile %14 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c4_i64_2 = arith.constant 4 : i64
    %16 = arith.extui %5 : i32 to i64
    %17 = arith.addi %16, %c4_i64_2 : i64
    %c4_i64_3 = arith.constant 4 : i64
    %18 = arith.addi %17, %c4_i64_3 : i64
    %c0_i32_4 = arith.constant 0 : i32
    %19 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_4) : (!llvm.ptr, i32) -> i32
    %20 = arith.extui %19 : i32 to i64
    %c65536_i64_5 = arith.constant 65536 : i64
    %21 = arith.muli %20, %c65536_i64_5 : i64
    %22 = arith.cmpi ult, %18, %21 : i64
    cf.cond_br %22, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c1_i32_6 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_6) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %23 = llvm.getelementptr %4[%17] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %15, %23 {alignment = 1 : i64} : i32, !llvm.ptr
    %24 = llvm.load %0 : !llvm.ptr -> i32
    %25 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %26 = arith.extui %25 : i32 to i64
    %27 = arith.addi %26, %c8_i64 : i64
    %c4_i64_7 = arith.constant 4 : i64
    %28 = arith.addi %27, %c4_i64_7 : i64
    %c0_i32_8 = arith.constant 0 : i32
    %29 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_8) : (!llvm.ptr, i32) -> i32
    %30 = arith.extui %29 : i32 to i64
    %c65536_i64_9 = arith.constant 65536 : i64
    %31 = arith.muli %30, %c65536_i64_9 : i64
    %32 = arith.cmpi ult, %28, %31 : i64
    cf.cond_br %32, ^bb7, ^bb8
  ^bb6:  // pred: ^bb3
    %c1_i32_10 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_10) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %33 = llvm.getelementptr %4[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %34 = llvm.load volatile %33 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c5_i32 = arith.constant 5 : i32
    %c31_i32 = arith.constant 31 : i32
    %35 = arith.cmpi ule, %c5_i32, %c31_i32 : i32
    %36 = scf.if %35 -> (i32) {
      %66 = arith.shli %34, %c5_i32 : i32
      scf.yield %66 : i32
    } else {
      %c0_i32_28 = arith.constant 0 : i32
      scf.yield %c0_i32_28 : i32
    }
    %c8_i64_11 = arith.constant 8 : i64
    %37 = arith.extui %24 : i32 to i64
    %38 = arith.addi %37, %c8_i64_11 : i64
    %c4_i64_12 = arith.constant 4 : i64
    %39 = arith.addi %38, %c4_i64_12 : i64
    %c0_i32_13 = arith.constant 0 : i32
    %40 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_13) : (!llvm.ptr, i32) -> i32
    %41 = arith.extui %40 : i32 to i64
    %c65536_i64_14 = arith.constant 65536 : i64
    %42 = arith.muli %41, %c65536_i64_14 : i64
    %43 = arith.cmpi ult, %39, %42 : i64
    cf.cond_br %43, ^bb9, ^bb10
  ^bb8:  // pred: ^bb5
    %c1_i32_15 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_15) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %44 = llvm.getelementptr %4[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %36, %44 {alignment = 1 : i64} : i32, !llvm.ptr
    %45 = llvm.load %0 : !llvm.ptr -> i32
    %46 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %47 = arith.extui %46 : i32 to i64
    %48 = arith.addi %47, %c0_i64 : i64
    %c4_i64_16 = arith.constant 4 : i64
    %49 = arith.addi %48, %c4_i64_16 : i64
    %c0_i32_17 = arith.constant 0 : i32
    %50 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_17) : (!llvm.ptr, i32) -> i32
    %51 = arith.extui %50 : i32 to i64
    %c65536_i64_18 = arith.constant 65536 : i64
    %52 = arith.muli %51, %c65536_i64_18 : i64
    %53 = arith.cmpi ult, %49, %52 : i64
    cf.cond_br %53, ^bb11, ^bb12
  ^bb10:  // pred: ^bb7
    %c1_i32_19 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_19) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %54 = llvm.getelementptr %4[%48] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %55 = llvm.load volatile %54 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c5_i32_20 = arith.constant 5 : i32
    %c31_i32_21 = arith.constant 31 : i32
    %56 = arith.cmpi ule, %c5_i32_20, %c31_i32_21 : i32
    %57 = scf.if %56 -> (i32) {
      %66 = arith.shli %55, %c5_i32_20 : i32
      scf.yield %66 : i32
    } else {
      %c0_i32_28 = arith.constant 0 : i32
      scf.yield %c0_i32_28 : i32
    }
    %c0_i64_22 = arith.constant 0 : i64
    %58 = arith.extui %45 : i32 to i64
    %59 = arith.addi %58, %c0_i64_22 : i64
    %c4_i64_23 = arith.constant 4 : i64
    %60 = arith.addi %59, %c4_i64_23 : i64
    %c0_i32_24 = arith.constant 0 : i32
    %61 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_24) : (!llvm.ptr, i32) -> i32
    %62 = arith.extui %61 : i32 to i64
    %c65536_i64_25 = arith.constant 65536 : i64
    %63 = arith.muli %62, %c65536_i64_25 : i64
    %64 = arith.cmpi ult, %60, %63 : i64
    cf.cond_br %64, ^bb13, ^bb14
  ^bb12:  // pred: ^bb9
    %c1_i32_26 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_26) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %65 = llvm.getelementptr %4[%59] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %57, %65 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb14:  // pred: ^bb11
    %c1_i32_27 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_27) : (i32) -> ()
    cf.br ^bb13
  }
  func.func @f87(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %4 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %7 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %8 = arith.subi %7, %c16_i32 : i32
    llvm.store %8, %1 : i32, !llvm.ptr
    llvm.store %8, %3 : i32, !llvm.ptr
    %9 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %10 = arith.addi %9, %c8_i32 : i32
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c0_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %15 = arith.addi %14, %c4_i64 : i64
    %c0_i32_1 = arith.constant 0 : i32
    %16 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1) : (!llvm.ptr, i32) -> i32
    %17 = arith.extui %16 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %18 = arith.muli %17, %c65536_i64 : i64
    %19 = arith.cmpi ult, %15, %18 : i64
    cf.cond_br %19, ^bb3, ^bb4
  ^bb2:  // pred: ^bb5
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %20 = llvm.getelementptr %6[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %21 = llvm.load volatile %20 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_2 = arith.constant 1 : i32
    %c4_i32 = arith.constant 4 : i32
    %c4_i32_3 = arith.constant 4 : i32
    call @f108(%arg0, %10, %11, %21, %c1_i32_2, %c4_i32, %c4_i32_3) : (!llvm.ptr, i32, i32, i32, i32, i32, i32) -> ()
    %22 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %23 = arith.extui %22 : i32 to i64
    %24 = arith.addi %23, %c8_i64 : i64
    %c4_i64_4 = arith.constant 4 : i64
    %25 = arith.addi %24, %c4_i64_4 : i64
    %c0_i32_5 = arith.constant 0 : i32
    %26 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_5) : (!llvm.ptr, i32) -> i32
    %27 = arith.extui %26 : i32 to i64
    %c65536_i64_6 = arith.constant 65536 : i64
    %28 = arith.muli %27, %c65536_i64_6 : i64
    %29 = arith.cmpi ult, %25, %28 : i64
    cf.cond_br %29, ^bb6, ^bb7
  ^bb4:  // pred: ^bb1
    %c1_i32_7 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_7) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // pred: ^bb6
    %30 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32_8 = arith.constant 16 : i32
    %31 = arith.addi %30, %c16_i32_8 : i32
    llvm.store %31, %3 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb6:  // 2 preds: ^bb3, ^bb7
    %32 = llvm.getelementptr %6[%24] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %33 = llvm.load volatile %32 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %33, %0 : i32, !llvm.ptr
    %c-2147483647_i32 = arith.constant -2147483647 : i32
    %34 = arith.cmpi eq, %33, %c-2147483647_i32 : i32
    %35 = arith.extui %34 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %36 = arith.cmpi ne, %35, %c0_i32_9 : i32
    cf.cond_br %36, ^bb5, ^bb8
  ^bb7:  // pred: ^bb3
    %c1_i32_10 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_10) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // pred: ^bb6
    %37 = llvm.load %0 : !llvm.ptr -> i32
    %38 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %39 = arith.extui %38 : i32 to i64
    %40 = arith.addi %39, %c12_i64 : i64
    %c4_i64_11 = arith.constant 4 : i64
    %41 = arith.addi %40, %c4_i64_11 : i64
    %c0_i32_12 = arith.constant 0 : i32
    %42 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_12) : (!llvm.ptr, i32) -> i32
    %43 = arith.extui %42 : i32 to i64
    %c65536_i64_13 = arith.constant 65536 : i64
    %44 = arith.muli %43, %c65536_i64_13 : i64
    %45 = arith.cmpi ult, %41, %44 : i64
    cf.cond_br %45, ^bb9, ^bb10
  ^bb9:  // 2 preds: ^bb8, ^bb10
    %46 = llvm.getelementptr %6[%40] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %47 = llvm.load volatile %46 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f143(%arg0, %37, %47) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb10:  // pred: ^bb8
    %c1_i32_14 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_14) : (i32) -> ()
    cf.br ^bb9
  }
  func.func @f88(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %4 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %7 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %8 = arith.subi %7, %c16_i32 : i32
    llvm.store %8, %1 : i32, !llvm.ptr
    llvm.store %8, %3 : i32, !llvm.ptr
    %9 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %10 = arith.addi %9, %c8_i32 : i32
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c0_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %15 = arith.addi %14, %c4_i64 : i64
    %c0_i32_1 = arith.constant 0 : i32
    %16 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1) : (!llvm.ptr, i32) -> i32
    %17 = arith.extui %16 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %18 = arith.muli %17, %c65536_i64 : i64
    %19 = arith.cmpi ult, %15, %18 : i64
    cf.cond_br %19, ^bb3, ^bb4
  ^bb2:  // pred: ^bb5
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %20 = llvm.getelementptr %6[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %21 = llvm.load volatile %20 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_2 = arith.constant 1 : i32
    %c1_i32_3 = arith.constant 1 : i32
    %c32_i32 = arith.constant 32 : i32
    call @f108(%arg0, %10, %11, %21, %c1_i32_2, %c1_i32_3, %c32_i32) : (!llvm.ptr, i32, i32, i32, i32, i32, i32) -> ()
    %22 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %23 = arith.extui %22 : i32 to i64
    %24 = arith.addi %23, %c8_i64 : i64
    %c4_i64_4 = arith.constant 4 : i64
    %25 = arith.addi %24, %c4_i64_4 : i64
    %c0_i32_5 = arith.constant 0 : i32
    %26 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_5) : (!llvm.ptr, i32) -> i32
    %27 = arith.extui %26 : i32 to i64
    %c65536_i64_6 = arith.constant 65536 : i64
    %28 = arith.muli %27, %c65536_i64_6 : i64
    %29 = arith.cmpi ult, %25, %28 : i64
    cf.cond_br %29, ^bb6, ^bb7
  ^bb4:  // pred: ^bb1
    %c1_i32_7 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_7) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // pred: ^bb6
    %30 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32_8 = arith.constant 16 : i32
    %31 = arith.addi %30, %c16_i32_8 : i32
    llvm.store %31, %3 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb6:  // 2 preds: ^bb3, ^bb7
    %32 = llvm.getelementptr %6[%24] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %33 = llvm.load volatile %32 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %33, %0 : i32, !llvm.ptr
    %c-2147483647_i32 = arith.constant -2147483647 : i32
    %34 = arith.cmpi eq, %33, %c-2147483647_i32 : i32
    %35 = arith.extui %34 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %36 = arith.cmpi ne, %35, %c0_i32_9 : i32
    cf.cond_br %36, ^bb5, ^bb8
  ^bb7:  // pred: ^bb3
    %c1_i32_10 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_10) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // pred: ^bb6
    %37 = llvm.load %0 : !llvm.ptr -> i32
    %38 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %39 = arith.extui %38 : i32 to i64
    %40 = arith.addi %39, %c12_i64 : i64
    %c4_i64_11 = arith.constant 4 : i64
    %41 = arith.addi %40, %c4_i64_11 : i64
    %c0_i32_12 = arith.constant 0 : i32
    %42 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_12) : (!llvm.ptr, i32) -> i32
    %43 = arith.extui %42 : i32 to i64
    %c65536_i64_13 = arith.constant 65536 : i64
    %44 = arith.muli %43, %c65536_i64_13 : i64
    %45 = arith.cmpi ult, %41, %44 : i64
    cf.cond_br %45, ^bb9, ^bb10
  ^bb9:  // 2 preds: ^bb8, ^bb10
    %46 = llvm.getelementptr %6[%40] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %47 = llvm.load volatile %46 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f143(%arg0, %37, %47) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb10:  // pred: ^bb8
    %c1_i32_14 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_14) : (i32) -> ()
    cf.br ^bb9
  }
  func.func @f89(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f90(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %c4_i32_0 = arith.constant 4 : i32
    call @f110(%arg0, %1, %c4_i32, %c4_i32_0) : (!llvm.ptr, i32, i32, i32) -> ()
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f91(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_0 = arith.constant 1 : i32
    %c32_i32 = arith.constant 32 : i32
    call @f110(%arg0, %1, %c1_i32_0, %c32_i32) : (!llvm.ptr, i32, i32, i32) -> ()
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f92(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %7 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %12 = llvm.load %8 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %13 = arith.subi %12, %c16_i32 : i32
    llvm.store %13, %3 : i32, !llvm.ptr
    llvm.store %13, %8 : i32, !llvm.ptr
    %14 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %15 = arith.addi %14, %c4_i32 : i32
    %16 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_6 = arith.constant 1 : i32
    %c31_i32 = arith.constant 31 : i32
    %17 = arith.cmpi ule, %c1_i32_6, %c31_i32 : i32
    %18 = scf.if %17 -> (i32) {
      %99 = arith.shli %16, %c1_i32_6 : i32
      scf.yield %99 : i32
    } else {
      %c0_i32_44 = arith.constant 0 : i32
      scf.yield %c0_i32_44 : i32
    }
    llvm.store %18, %4 : i32, !llvm.ptr
    %c0_i32_7 = arith.constant 0 : i32
    %c1_i32_8 = arith.constant 1 : i32
    %c1_i32_9 = arith.constant 1 : i32
    call @f111(%arg0, %15, %18, %c0_i32_7, %c1_i32_8, %c1_i32_9) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %19 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %20 = arith.extui %19 : i32 to i64
    %21 = arith.addi %20, %c8_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %22 = arith.addi %21, %c4_i64 : i64
    %c0_i32_10 = arith.constant 0 : i32
    %23 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_10) : (!llvm.ptr, i32) -> i32
    %24 = arith.extui %23 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %25 = arith.muli %24, %c65536_i64 : i64
    %26 = arith.cmpi ult, %22, %25 : i64
    cf.cond_br %26, ^bb3, ^bb4
  ^bb2:  // pred: ^bb17
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %27 = llvm.getelementptr %11[%21] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %28 = llvm.load volatile %27 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %28, %5 : i32, !llvm.ptr
    %29 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64_11 = arith.constant 4 : i64
    %30 = arith.extui %29 : i32 to i64
    %31 = arith.addi %30, %c4_i64_11 : i64
    %c4_i64_12 = arith.constant 4 : i64
    %32 = arith.addi %31, %c4_i64_12 : i64
    %c0_i32_13 = arith.constant 0 : i32
    %33 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_13) : (!llvm.ptr, i32) -> i32
    %34 = arith.extui %33 : i32 to i64
    %c65536_i64_14 = arith.constant 65536 : i64
    %35 = arith.muli %34, %c65536_i64_14 : i64
    %36 = arith.cmpi ult, %32, %35 : i64
    cf.cond_br %36, ^bb6, ^bb7
  ^bb4:  // pred: ^bb1
    %c1_i32_15 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_15) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // pred: ^bb6
    %37 = llvm.load %1 : !llvm.ptr -> i32
    %38 = llvm.load %2 : !llvm.ptr -> i32
    %39 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %40 = arith.extui %39 : i32 to i64
    %41 = arith.addi %40, %c12_i64 : i64
    %c4_i64_16 = arith.constant 4 : i64
    %42 = arith.addi %41, %c4_i64_16 : i64
    %c0_i32_17 = arith.constant 0 : i32
    %43 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_17) : (!llvm.ptr, i32) -> i32
    %44 = arith.extui %43 : i32 to i64
    %c65536_i64_18 = arith.constant 65536 : i64
    %45 = arith.muli %44, %c65536_i64_18 : i64
    %46 = arith.cmpi ult, %42, %45 : i64
    cf.cond_br %46, ^bb11, ^bb12
  ^bb6:  // 2 preds: ^bb3, ^bb7
    %47 = llvm.getelementptr %11[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %48 = llvm.load volatile %47 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_19 = arith.constant 1 : i32
    %49 = arith.cmpi eq, %48, %c1_i32_19 : i32
    %50 = arith.extui %49 : i1 to i32
    %c0_i32_20 = arith.constant 0 : i32
    %51 = arith.cmpi eq, %50, %c0_i32_20 : i32
    %52 = arith.extui %51 : i1 to i32
    %c0_i32_21 = arith.constant 0 : i32
    %53 = arith.cmpi ne, %52, %c0_i32_21 : i32
    cf.cond_br %53, ^bb5, ^bb8
  ^bb7:  // pred: ^bb3
    %c1_i32_22 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_22) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // pred: ^bb6
    %54 = llvm.load %5 : !llvm.ptr -> i32
    %55 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i64_23 = arith.constant 12 : i64
    %56 = arith.extui %55 : i32 to i64
    %57 = arith.addi %56, %c12_i64_23 : i64
    %c4_i64_24 = arith.constant 4 : i64
    %58 = arith.addi %57, %c4_i64_24 : i64
    %c0_i32_25 = arith.constant 0 : i32
    %59 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_25) : (!llvm.ptr, i32) -> i32
    %60 = arith.extui %59 : i32 to i64
    %c65536_i64_26 = arith.constant 65536 : i64
    %61 = arith.muli %60, %c65536_i64_26 : i64
    %62 = arith.cmpi ult, %58, %61 : i64
    cf.cond_br %62, ^bb9, ^bb10
  ^bb9:  // 2 preds: ^bb8, ^bb10
    %63 = llvm.getelementptr %11[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %64 = llvm.load volatile %63 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f143(%arg0, %54, %64) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb10:  // pred: ^bb8
    %c1_i32_27 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_27) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb5, ^bb12
    %65 = llvm.getelementptr %11[%41] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %66 = llvm.load volatile %65 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %66, %6 : i32, !llvm.ptr
    call @f102(%arg0, %37, %38, %66) : (!llvm.ptr, i32, i32, i32) -> ()
    %67 = llvm.load %0 : !llvm.ptr -> i32
    %68 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i64_28 = arith.constant 8 : i64
    %69 = arith.extui %67 : i32 to i64
    %70 = arith.addi %69, %c8_i64_28 : i64
    %c4_i64_29 = arith.constant 4 : i64
    %71 = arith.addi %70, %c4_i64_29 : i64
    %c0_i32_30 = arith.constant 0 : i32
    %72 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_30) : (!llvm.ptr, i32) -> i32
    %73 = arith.extui %72 : i32 to i64
    %c65536_i64_31 = arith.constant 65536 : i64
    %74 = arith.muli %73, %c65536_i64_31 : i64
    %75 = arith.cmpi ult, %71, %74 : i64
    cf.cond_br %75, ^bb13, ^bb14
  ^bb12:  // pred: ^bb5
    %c1_i32_32 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_32) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %76 = llvm.getelementptr %11[%70] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %68, %76 {alignment = 1 : i64} : i32, !llvm.ptr
    %77 = llvm.load %0 : !llvm.ptr -> i32
    %78 = llvm.load %6 : !llvm.ptr -> i32
    %c4_i64_33 = arith.constant 4 : i64
    %79 = arith.extui %77 : i32 to i64
    %80 = arith.addi %79, %c4_i64_33 : i64
    %c4_i64_34 = arith.constant 4 : i64
    %81 = arith.addi %80, %c4_i64_34 : i64
    %c0_i32_35 = arith.constant 0 : i32
    %82 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_35) : (!llvm.ptr, i32) -> i32
    %83 = arith.extui %82 : i32 to i64
    %c65536_i64_36 = arith.constant 65536 : i64
    %84 = arith.muli %83, %c65536_i64_36 : i64
    %85 = arith.cmpi ult, %81, %84 : i64
    cf.cond_br %85, ^bb15, ^bb16
  ^bb14:  // pred: ^bb11
    %c1_i32_37 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_37) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // 2 preds: ^bb13, ^bb16
    %86 = llvm.getelementptr %11[%80] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %78, %86 {alignment = 1 : i64} : i32, !llvm.ptr
    %87 = llvm.load %0 : !llvm.ptr -> i32
    %88 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %89 = arith.extui %87 : i32 to i64
    %90 = arith.addi %89, %c0_i64 : i64
    %c4_i64_38 = arith.constant 4 : i64
    %91 = arith.addi %90, %c4_i64_38 : i64
    %c0_i32_39 = arith.constant 0 : i32
    %92 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_39) : (!llvm.ptr, i32) -> i32
    %93 = arith.extui %92 : i32 to i64
    %c65536_i64_40 = arith.constant 65536 : i64
    %94 = arith.muli %93, %c65536_i64_40 : i64
    %95 = arith.cmpi ult, %91, %94 : i64
    cf.cond_br %95, ^bb17, ^bb18
  ^bb16:  // pred: ^bb13
    %c1_i32_41 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_41) : (i32) -> ()
    cf.br ^bb15
  ^bb17:  // 2 preds: ^bb15, ^bb18
    %96 = llvm.getelementptr %11[%90] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %88, %96 {alignment = 1 : i64} : i32, !llvm.ptr
    %97 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_42 = arith.constant 16 : i32
    %98 = arith.addi %97, %c16_i32_42 : i32
    llvm.store %98, %8 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb18:  // pred: ^bb15
    %c1_i32_43 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_43) : (i32) -> ()
    cf.br ^bb17
  }
  func.func @f93(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %8 : i64, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %9 : i64, !llvm.ptr
    %10 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.getelementptr %12[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %15 = llvm.load %11 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %16 = arith.subi %15, %c64_i32 : i32
    llvm.store %16, %2 : i32, !llvm.ptr
    llvm.store %16, %11 : i32, !llvm.ptr
    %17 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32 = arith.constant 40 : i32
    %18 = arith.addi %17, %c40_i32 : i32
    %c1_i32_9 = arith.constant 1 : i32
    %c0_i32_10 = arith.constant 0 : i32
    %c1_i32_11 = arith.constant 1 : i32
    %c32_i32 = arith.constant 32 : i32
    call @f111(%arg0, %18, %c1_i32_9, %c0_i32_10, %c1_i32_11, %c32_i32) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %19 = llvm.load %2 : !llvm.ptr -> i32
    %c44_i64 = arith.constant 44 : i64
    %20 = arith.extui %19 : i32 to i64
    %21 = arith.addi %20, %c44_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %22 = arith.addi %21, %c4_i64 : i64
    %c0_i32_12 = arith.constant 0 : i32
    %23 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_12) : (!llvm.ptr, i32) -> i32
    %24 = arith.extui %23 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %25 = arith.muli %24, %c65536_i64 : i64
    %26 = arith.cmpi ult, %22, %25 : i64
    cf.cond_br %26, ^bb3, ^bb4
  ^bb2:  // pred: ^bb55
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %27 = llvm.getelementptr %14[%21] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %28 = llvm.load volatile %27 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %28, %3 : i32, !llvm.ptr
    %29 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i64 = arith.constant 40 : i64
    %30 = arith.extui %29 : i32 to i64
    %31 = arith.addi %30, %c40_i64 : i64
    %c4_i64_13 = arith.constant 4 : i64
    %32 = arith.addi %31, %c4_i64_13 : i64
    %c0_i32_14 = arith.constant 0 : i32
    %33 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_14) : (!llvm.ptr, i32) -> i32
    %34 = arith.extui %33 : i32 to i64
    %c65536_i64_15 = arith.constant 65536 : i64
    %35 = arith.muli %34, %c65536_i64_15 : i64
    %36 = arith.cmpi ult, %32, %35 : i64
    cf.cond_br %36, ^bb7, ^bb8
  ^bb4:  // pred: ^bb1
    %c1_i32_16 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_16) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // pred: ^bb14
    %37 = llvm.load %5 : !llvm.ptr -> i32
    %38 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i64 = arith.constant 48 : i64
    %39 = arith.extui %38 : i32 to i64
    %40 = arith.addi %39, %c48_i64 : i64
    %c4_i64_17 = arith.constant 4 : i64
    %41 = arith.addi %40, %c4_i64_17 : i64
    %c0_i32_18 = arith.constant 0 : i32
    %42 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_18) : (!llvm.ptr, i32) -> i32
    %43 = arith.extui %42 : i32 to i64
    %c65536_i64_19 = arith.constant 65536 : i64
    %44 = arith.muli %43, %c65536_i64_19 : i64
    %45 = arith.cmpi ult, %41, %44 : i64
    cf.cond_br %45, ^bb59, ^bb60
  ^bb6:  // pred: ^bb7
    %46 = llvm.load %3 : !llvm.ptr -> i32
    %47 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i64_20 = arith.constant 48 : i64
    %48 = arith.extui %47 : i32 to i64
    %49 = arith.addi %48, %c48_i64_20 : i64
    %c4_i64_21 = arith.constant 4 : i64
    %50 = arith.addi %49, %c4_i64_21 : i64
    %c0_i32_22 = arith.constant 0 : i32
    %51 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_22) : (!llvm.ptr, i32) -> i32
    %52 = arith.extui %51 : i32 to i64
    %c65536_i64_23 = arith.constant 65536 : i64
    %53 = arith.muli %52, %c65536_i64_23 : i64
    %54 = arith.cmpi ult, %50, %53 : i64
    cf.cond_br %54, ^bb57, ^bb58
  ^bb7:  // 2 preds: ^bb3, ^bb8
    %55 = llvm.getelementptr %14[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %56 = llvm.load volatile %55 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_24 = arith.constant 1 : i32
    %57 = arith.cmpi eq, %56, %c1_i32_24 : i32
    %58 = arith.extui %57 : i1 to i32
    %c0_i32_25 = arith.constant 0 : i32
    %59 = arith.cmpi ne, %58, %c0_i32_25 : i32
    cf.cond_br %59, ^bb6, ^bb9
  ^bb8:  // pred: ^bb3
    %c1_i32_26 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_26) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // pred: ^bb7
    %60 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i64_27 = arith.constant 48 : i64
    %61 = arith.extui %60 : i32 to i64
    %62 = arith.addi %61, %c48_i64_27 : i64
    %c4_i64_28 = arith.constant 4 : i64
    %63 = arith.addi %62, %c4_i64_28 : i64
    %c0_i32_29 = arith.constant 0 : i32
    %64 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_29) : (!llvm.ptr, i32) -> i32
    %65 = arith.extui %64 : i32 to i64
    %c65536_i64_30 = arith.constant 65536 : i64
    %66 = arith.muli %65, %c65536_i64_30 : i64
    %67 = arith.cmpi ult, %63, %66 : i64
    cf.cond_br %67, ^bb10, ^bb11
  ^bb10:  // 2 preds: ^bb9, ^bb11
    %68 = llvm.getelementptr %14[%62] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %69 = llvm.load volatile %68 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %69, %4 : i32, !llvm.ptr
    %70 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_31 = arith.constant 40 : i32
    %71 = arith.addi %70, %c40_i32_31 : i32
    %c4_i32 = arith.constant 4 : i32
    %c0_i32_32 = arith.constant 0 : i32
    %c4_i32_33 = arith.constant 4 : i32
    %c4_i32_34 = arith.constant 4 : i32
    call @f111(%arg0, %71, %c4_i32, %c0_i32_32, %c4_i32_33, %c4_i32_34) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %72 = llvm.load %2 : !llvm.ptr -> i32
    %c44_i64_35 = arith.constant 44 : i64
    %73 = arith.extui %72 : i32 to i64
    %74 = arith.addi %73, %c44_i64_35 : i64
    %c4_i64_36 = arith.constant 4 : i64
    %75 = arith.addi %74, %c4_i64_36 : i64
    %c0_i32_37 = arith.constant 0 : i32
    %76 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_37) : (!llvm.ptr, i32) -> i32
    %77 = arith.extui %76 : i32 to i64
    %c65536_i64_38 = arith.constant 65536 : i64
    %78 = arith.muli %77, %c65536_i64_38 : i64
    %79 = arith.cmpi ult, %75, %78 : i64
    cf.cond_br %79, ^bb12, ^bb13
  ^bb11:  // pred: ^bb9
    %c1_i32_39 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_39) : (i32) -> ()
    cf.br ^bb10
  ^bb12:  // 2 preds: ^bb10, ^bb13
    %80 = llvm.getelementptr %14[%74] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %81 = llvm.load volatile %80 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %81, %5 : i32, !llvm.ptr
    %82 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i64_40 = arith.constant 40 : i64
    %83 = arith.extui %82 : i32 to i64
    %84 = arith.addi %83, %c40_i64_40 : i64
    %c4_i64_41 = arith.constant 4 : i64
    %85 = arith.addi %84, %c4_i64_41 : i64
    %c0_i32_42 = arith.constant 0 : i32
    %86 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_42) : (!llvm.ptr, i32) -> i32
    %87 = arith.extui %86 : i32 to i64
    %c65536_i64_43 = arith.constant 65536 : i64
    %88 = arith.muli %87, %c65536_i64_43 : i64
    %89 = arith.cmpi ult, %85, %88 : i64
    cf.cond_br %89, ^bb14, ^bb15
  ^bb13:  // pred: ^bb10
    %c1_i32_44 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_44) : (i32) -> ()
    cf.br ^bb12
  ^bb14:  // 2 preds: ^bb12, ^bb15
    %90 = llvm.getelementptr %14[%84] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %91 = llvm.load volatile %90 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_45 = arith.constant 1 : i32
    %92 = arith.cmpi eq, %91, %c1_i32_45 : i32
    %93 = arith.extui %92 : i1 to i32
    %c0_i32_46 = arith.constant 0 : i32
    %94 = arith.cmpi ne, %93, %c0_i32_46 : i32
    cf.cond_br %94, ^bb5, ^bb16
  ^bb15:  // pred: ^bb12
    %c1_i32_47 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_47) : (i32) -> ()
    cf.br ^bb14
  ^bb16:  // pred: ^bb14
    %95 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %96 = arith.addi %95, %c16_i32 : i32
    %c16_i32_48 = arith.constant 16 : i32
    %97 = arith.addi %96, %c16_i32_48 : i32
    llvm.store %97, %6 : i32, !llvm.ptr
    %98 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i64_49 = arith.constant 48 : i64
    %99 = arith.extui %98 : i32 to i64
    %100 = arith.addi %99, %c48_i64_49 : i64
    %c4_i64_50 = arith.constant 4 : i64
    %101 = arith.addi %100, %c4_i64_50 : i64
    %c0_i32_51 = arith.constant 0 : i32
    %102 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_51) : (!llvm.ptr, i32) -> i32
    %103 = arith.extui %102 : i32 to i64
    %c65536_i64_52 = arith.constant 65536 : i64
    %104 = arith.muli %103, %c65536_i64_52 : i64
    %105 = arith.cmpi ult, %101, %104 : i64
    cf.cond_br %105, ^bb17, ^bb18
  ^bb17:  // 2 preds: ^bb16, ^bb18
    %106 = llvm.getelementptr %14[%100] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %107 = llvm.load volatile %106 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_53 = arith.constant 0 : i64
    %108 = arith.extui %97 : i32 to i64
    %109 = arith.addi %108, %c0_i64_53 : i64
    %c4_i64_54 = arith.constant 4 : i64
    %110 = arith.addi %109, %c4_i64_54 : i64
    %c0_i32_55 = arith.constant 0 : i32
    %111 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_55) : (!llvm.ptr, i32) -> i32
    %112 = arith.extui %111 : i32 to i64
    %c65536_i64_56 = arith.constant 65536 : i64
    %113 = arith.muli %112, %c65536_i64_56 : i64
    %114 = arith.cmpi ult, %110, %113 : i64
    cf.cond_br %114, ^bb19, ^bb20
  ^bb18:  // pred: ^bb16
    %c1_i32_57 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_57) : (i32) -> ()
    cf.br ^bb17
  ^bb19:  // 2 preds: ^bb17, ^bb20
    %115 = llvm.getelementptr %14[%109] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %107, %115 {alignment = 1 : i64} : i32, !llvm.ptr
    %116 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_58 = arith.constant 16 : i32
    %117 = arith.addi %116, %c16_i32_58 : i32
    %c8_i32 = arith.constant 8 : i32
    %118 = arith.addi %117, %c8_i32 : i32
    llvm.store %118, %7 : i32, !llvm.ptr
    %c0_i32_59 = arith.constant 0 : i32
    %c0_i64_60 = arith.constant 0 : i64
    %119 = arith.extui %118 : i32 to i64
    %120 = arith.addi %119, %c0_i64_60 : i64
    %c4_i64_61 = arith.constant 4 : i64
    %121 = arith.addi %120, %c4_i64_61 : i64
    %c0_i32_62 = arith.constant 0 : i32
    %122 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_62) : (!llvm.ptr, i32) -> i32
    %123 = arith.extui %122 : i32 to i64
    %c65536_i64_63 = arith.constant 65536 : i64
    %124 = arith.muli %123, %c65536_i64_63 : i64
    %125 = arith.cmpi ult, %121, %124 : i64
    cf.cond_br %125, ^bb21, ^bb22
  ^bb20:  // pred: ^bb17
    %c1_i32_64 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_64) : (i32) -> ()
    cf.br ^bb19
  ^bb21:  // 2 preds: ^bb19, ^bb22
    %126 = llvm.getelementptr %14[%120] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_59, %126 {alignment = 1 : i64} : i32, !llvm.ptr
    %127 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_65 = arith.constant 0 : i32
    %c36_i64 = arith.constant 36 : i64
    %128 = arith.extui %127 : i32 to i64
    %129 = arith.addi %128, %c36_i64 : i64
    %c4_i64_66 = arith.constant 4 : i64
    %130 = arith.addi %129, %c4_i64_66 : i64
    %c0_i32_67 = arith.constant 0 : i32
    %131 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_67) : (!llvm.ptr, i32) -> i32
    %132 = arith.extui %131 : i32 to i64
    %c65536_i64_68 = arith.constant 65536 : i64
    %133 = arith.muli %132, %c65536_i64_68 : i64
    %134 = arith.cmpi ult, %130, %133 : i64
    cf.cond_br %134, ^bb23, ^bb24
  ^bb22:  // pred: ^bb19
    %c1_i32_69 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_69) : (i32) -> ()
    cf.br ^bb21
  ^bb23:  // 2 preds: ^bb21, ^bb24
    %135 = llvm.getelementptr %14[%129] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_65, %135 {alignment = 1 : i64} : i32, !llvm.ptr
    %136 = llvm.load %2 : !llvm.ptr -> i32
    %137 = llvm.load %5 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %138 = arith.extui %136 : i32 to i64
    %139 = arith.addi %138, %c28_i64 : i64
    %c4_i64_70 = arith.constant 4 : i64
    %140 = arith.addi %139, %c4_i64_70 : i64
    %c0_i32_71 = arith.constant 0 : i32
    %141 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_71) : (!llvm.ptr, i32) -> i32
    %142 = arith.extui %141 : i32 to i64
    %c65536_i64_72 = arith.constant 65536 : i64
    %143 = arith.muli %142, %c65536_i64_72 : i64
    %144 = arith.cmpi ult, %140, %143 : i64
    cf.cond_br %144, ^bb25, ^bb26
  ^bb24:  // pred: ^bb21
    %c1_i32_73 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_73) : (i32) -> ()
    cf.br ^bb23
  ^bb25:  // 2 preds: ^bb23, ^bb26
    %145 = llvm.getelementptr %14[%139] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %137, %145 {alignment = 1 : i64} : i32, !llvm.ptr
    %146 = llvm.load %2 : !llvm.ptr -> i32
    %147 = llvm.load %4 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %148 = arith.extui %146 : i32 to i64
    %149 = arith.addi %148, %c20_i64 : i64
    %c4_i64_74 = arith.constant 4 : i64
    %150 = arith.addi %149, %c4_i64_74 : i64
    %c0_i32_75 = arith.constant 0 : i32
    %151 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_75) : (!llvm.ptr, i32) -> i32
    %152 = arith.extui %151 : i32 to i64
    %c65536_i64_76 = arith.constant 65536 : i64
    %153 = arith.muli %152, %c65536_i64_76 : i64
    %154 = arith.cmpi ult, %150, %153 : i64
    cf.cond_br %154, ^bb27, ^bb28
  ^bb26:  // pred: ^bb23
    %c1_i32_77 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_77) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // 2 preds: ^bb25, ^bb28
    %155 = llvm.getelementptr %14[%149] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %147, %155 {alignment = 1 : i64} : i32, !llvm.ptr
    %156 = llvm.load %2 : !llvm.ptr -> i32
    %157 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %158 = arith.extui %156 : i32 to i64
    %159 = arith.addi %158, %c16_i64 : i64
    %c4_i64_78 = arith.constant 4 : i64
    %160 = arith.addi %159, %c4_i64_78 : i64
    %c0_i32_79 = arith.constant 0 : i32
    %161 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_79) : (!llvm.ptr, i32) -> i32
    %162 = arith.extui %161 : i32 to i64
    %c65536_i64_80 = arith.constant 65536 : i64
    %163 = arith.muli %162, %c65536_i64_80 : i64
    %164 = arith.cmpi ult, %160, %163 : i64
    cf.cond_br %164, ^bb29, ^bb30
  ^bb28:  // pred: ^bb25
    %c1_i32_81 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_81) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // 2 preds: ^bb27, ^bb30
    %165 = llvm.getelementptr %14[%159] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %157, %165 {alignment = 1 : i64} : i32, !llvm.ptr
    %166 = llvm.load %1 : !llvm.ptr -> i32
    %167 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_82 = arith.constant 16 : i32
    %168 = arith.addi %167, %c16_i32_82 : i32
    call @f94(%arg0, %166, %168) : (!llvm.ptr, i32, i32) -> ()
    %169 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_83 = arith.constant 40 : i32
    %170 = arith.addi %169, %c40_i32_83 : i32
    %c16_i32_84 = arith.constant 16 : i32
    %171 = arith.addi %170, %c16_i32_84 : i32
    %172 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_85 = arith.constant 0 : i64
    %173 = arith.extui %172 : i32 to i64
    %174 = arith.addi %173, %c0_i64_85 : i64
    %c8_i64 = arith.constant 8 : i64
    %175 = arith.addi %174, %c8_i64 : i64
    %c0_i32_86 = arith.constant 0 : i32
    %176 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_86) : (!llvm.ptr, i32) -> i32
    %177 = arith.extui %176 : i32 to i64
    %c65536_i64_87 = arith.constant 65536 : i64
    %178 = arith.muli %177, %c65536_i64_87 : i64
    %179 = arith.cmpi ult, %175, %178 : i64
    cf.cond_br %179, ^bb31, ^bb32
  ^bb30:  // pred: ^bb27
    %c1_i32_88 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_88) : (i32) -> ()
    cf.br ^bb29
  ^bb31:  // 2 preds: ^bb29, ^bb32
    %180 = llvm.getelementptr %14[%174] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %181 = llvm.load volatile %180 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_89 = arith.constant 0 : i64
    %182 = arith.extui %171 : i32 to i64
    %183 = arith.addi %182, %c0_i64_89 : i64
    %c8_i64_90 = arith.constant 8 : i64
    %184 = arith.addi %183, %c8_i64_90 : i64
    %c0_i32_91 = arith.constant 0 : i32
    %185 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_91) : (!llvm.ptr, i32) -> i32
    %186 = arith.extui %185 : i32 to i64
    %c65536_i64_92 = arith.constant 65536 : i64
    %187 = arith.muli %186, %c65536_i64_92 : i64
    %188 = arith.cmpi ult, %184, %187 : i64
    cf.cond_br %188, ^bb33, ^bb34
  ^bb32:  // pred: ^bb29
    %c1_i32_93 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_93) : (i32) -> ()
    cf.br ^bb31
  ^bb33:  // 2 preds: ^bb31, ^bb34
    %189 = llvm.getelementptr %14[%183] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %181, %189 {alignment = 1 : i64} : i64, !llvm.ptr
    %190 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_94 = arith.constant 40 : i32
    %191 = arith.addi %190, %c40_i32_94 : i32
    %c8_i32_95 = arith.constant 8 : i32
    %192 = arith.addi %191, %c8_i32_95 : i32
    %193 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_96 = arith.constant 0 : i64
    %194 = arith.extui %193 : i32 to i64
    %195 = arith.addi %194, %c0_i64_96 : i64
    %c8_i64_97 = arith.constant 8 : i64
    %196 = arith.addi %195, %c8_i64_97 : i64
    %c0_i32_98 = arith.constant 0 : i32
    %197 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_98) : (!llvm.ptr, i32) -> i32
    %198 = arith.extui %197 : i32 to i64
    %c65536_i64_99 = arith.constant 65536 : i64
    %199 = arith.muli %198, %c65536_i64_99 : i64
    %200 = arith.cmpi ult, %196, %199 : i64
    cf.cond_br %200, ^bb35, ^bb36
  ^bb34:  // pred: ^bb31
    %c1_i32_100 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_100) : (i32) -> ()
    cf.br ^bb33
  ^bb35:  // 2 preds: ^bb33, ^bb36
    %201 = llvm.getelementptr %14[%195] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %202 = llvm.load volatile %201 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %202, %8 : i64, !llvm.ptr
    %c0_i64_101 = arith.constant 0 : i64
    %203 = arith.extui %192 : i32 to i64
    %204 = arith.addi %203, %c0_i64_101 : i64
    %c8_i64_102 = arith.constant 8 : i64
    %205 = arith.addi %204, %c8_i64_102 : i64
    %c0_i32_103 = arith.constant 0 : i32
    %206 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_103) : (!llvm.ptr, i32) -> i32
    %207 = arith.extui %206 : i32 to i64
    %c65536_i64_104 = arith.constant 65536 : i64
    %208 = arith.muli %207, %c65536_i64_104 : i64
    %209 = arith.cmpi ult, %205, %208 : i64
    cf.cond_br %209, ^bb37, ^bb38
  ^bb36:  // pred: ^bb33
    %c1_i32_105 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_105) : (i32) -> ()
    cf.br ^bb35
  ^bb37:  // 2 preds: ^bb35, ^bb38
    %210 = llvm.getelementptr %14[%204] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %202, %210 {alignment = 1 : i64} : i64, !llvm.ptr
    %211 = llvm.load %2 : !llvm.ptr -> i32
    %212 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i64_106 = arith.constant 16 : i64
    %213 = arith.extui %212 : i32 to i64
    %214 = arith.addi %213, %c16_i64_106 : i64
    %c8_i64_107 = arith.constant 8 : i64
    %215 = arith.addi %214, %c8_i64_107 : i64
    %c0_i32_108 = arith.constant 0 : i32
    %216 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_108) : (!llvm.ptr, i32) -> i32
    %217 = arith.extui %216 : i32 to i64
    %c65536_i64_109 = arith.constant 65536 : i64
    %218 = arith.muli %217, %c65536_i64_109 : i64
    %219 = arith.cmpi ult, %215, %218 : i64
    cf.cond_br %219, ^bb39, ^bb40
  ^bb38:  // pred: ^bb35
    %c1_i32_110 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_110) : (i32) -> ()
    cf.br ^bb37
  ^bb39:  // 2 preds: ^bb37, ^bb40
    %220 = llvm.getelementptr %14[%214] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %221 = llvm.load volatile %220 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %221, %9 : i64, !llvm.ptr
    %c40_i64_111 = arith.constant 40 : i64
    %222 = arith.extui %211 : i32 to i64
    %223 = arith.addi %222, %c40_i64_111 : i64
    %c8_i64_112 = arith.constant 8 : i64
    %224 = arith.addi %223, %c8_i64_112 : i64
    %c0_i32_113 = arith.constant 0 : i32
    %225 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_113) : (!llvm.ptr, i32) -> i32
    %226 = arith.extui %225 : i32 to i64
    %c65536_i64_114 = arith.constant 65536 : i64
    %227 = arith.muli %226, %c65536_i64_114 : i64
    %228 = arith.cmpi ult, %224, %227 : i64
    cf.cond_br %228, ^bb41, ^bb42
  ^bb40:  // pred: ^bb37
    %c1_i32_115 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_115) : (i32) -> ()
    cf.br ^bb39
  ^bb41:  // 2 preds: ^bb39, ^bb42
    %229 = llvm.getelementptr %14[%223] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %221, %229 {alignment = 1 : i64} : i64, !llvm.ptr
    %230 = llvm.load %2 : !llvm.ptr -> i32
    %c44_i64_116 = arith.constant 44 : i64
    %231 = arith.extui %230 : i32 to i64
    %232 = arith.addi %231, %c44_i64_116 : i64
    %c4_i64_117 = arith.constant 4 : i64
    %233 = arith.addi %232, %c4_i64_117 : i64
    %c0_i32_118 = arith.constant 0 : i32
    %234 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_118) : (!llvm.ptr, i32) -> i32
    %235 = arith.extui %234 : i32 to i64
    %c65536_i64_119 = arith.constant 65536 : i64
    %236 = arith.muli %235, %c65536_i64_119 : i64
    %237 = arith.cmpi ult, %233, %236 : i64
    cf.cond_br %237, ^bb43, ^bb44
  ^bb42:  // pred: ^bb39
    %c1_i32_120 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_120) : (i32) -> ()
    cf.br ^bb41
  ^bb43:  // 2 preds: ^bb41, ^bb44
    %238 = llvm.getelementptr %14[%232] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %239 = llvm.load volatile %238 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %239, %3 : i32, !llvm.ptr
    %240 = llvm.load %2 : !llvm.ptr -> i32
    %c52_i32 = arith.constant 52 : i32
    %241 = arith.addi %240, %c52_i32 : i32
    %c4_i32_121 = arith.constant 4 : i32
    %c4_i32_122 = arith.constant 4 : i32
    call @f110(%arg0, %241, %c4_i32_121, %c4_i32_122) : (!llvm.ptr, i32, i32, i32) -> ()
    %242 = llvm.load %2 : !llvm.ptr -> i32
    %243 = llvm.load %8 : !llvm.ptr -> i64
    %244 = arith.trunci %243 : i64 to i32
    %c5_i32 = arith.constant 5 : i32
    %c31_i32 = arith.constant 31 : i32
    %245 = arith.cmpi ule, %c5_i32, %c31_i32 : i32
    %246 = scf.if %245 -> (i32) {
      %318 = arith.shli %244, %c5_i32 : i32
      scf.yield %318 : i32
    } else {
      %c0_i32_160 = arith.constant 0 : i32
      scf.yield %c0_i32_160 : i32
    }
    llvm.store %246, %1 : i32, !llvm.ptr
    %c12_i64 = arith.constant 12 : i64
    %247 = arith.extui %242 : i32 to i64
    %248 = arith.addi %247, %c12_i64 : i64
    %c4_i64_123 = arith.constant 4 : i64
    %249 = arith.addi %248, %c4_i64_123 : i64
    %c0_i32_124 = arith.constant 0 : i32
    %250 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_124) : (!llvm.ptr, i32) -> i32
    %251 = arith.extui %250 : i32 to i64
    %c65536_i64_125 = arith.constant 65536 : i64
    %252 = arith.muli %251, %c65536_i64_125 : i64
    %253 = arith.cmpi ult, %249, %252 : i64
    cf.cond_br %253, ^bb45, ^bb46
  ^bb44:  // pred: ^bb41
    %c1_i32_126 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_126) : (i32) -> ()
    cf.br ^bb43
  ^bb45:  // 2 preds: ^bb43, ^bb46
    %254 = llvm.getelementptr %14[%248] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %246, %254 {alignment = 1 : i64} : i32, !llvm.ptr
    %255 = llvm.load %2 : !llvm.ptr -> i32
    %256 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64_127 = arith.constant 8 : i64
    %257 = arith.extui %255 : i32 to i64
    %258 = arith.addi %257, %c8_i64_127 : i64
    %c4_i64_128 = arith.constant 4 : i64
    %259 = arith.addi %258, %c4_i64_128 : i64
    %c0_i32_129 = arith.constant 0 : i32
    %260 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_129) : (!llvm.ptr, i32) -> i32
    %261 = arith.extui %260 : i32 to i64
    %c65536_i64_130 = arith.constant 65536 : i64
    %262 = arith.muli %261, %c65536_i64_130 : i64
    %263 = arith.cmpi ult, %259, %262 : i64
    cf.cond_br %263, ^bb47, ^bb48
  ^bb46:  // pred: ^bb43
    %c1_i32_131 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_131) : (i32) -> ()
    cf.br ^bb45
  ^bb47:  // 2 preds: ^bb45, ^bb48
    %264 = llvm.getelementptr %14[%258] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %256, %264 {alignment = 1 : i64} : i32, !llvm.ptr
    %265 = llvm.load %2 : !llvm.ptr -> i32
    %266 = llvm.load %9 : !llvm.ptr -> i64
    %267 = arith.trunci %266 : i64 to i32
    %c5_i32_132 = arith.constant 5 : i32
    %c31_i32_133 = arith.constant 31 : i32
    %268 = arith.cmpi ule, %c5_i32_132, %c31_i32_133 : i32
    %269 = scf.if %268 -> (i32) {
      %318 = arith.shli %267, %c5_i32_132 : i32
      scf.yield %318 : i32
    } else {
      %c0_i32_160 = arith.constant 0 : i32
      scf.yield %c0_i32_160 : i32
    }
    %c4_i64_134 = arith.constant 4 : i64
    %270 = arith.extui %265 : i32 to i64
    %271 = arith.addi %270, %c4_i64_134 : i64
    %c4_i64_135 = arith.constant 4 : i64
    %272 = arith.addi %271, %c4_i64_135 : i64
    %c0_i32_136 = arith.constant 0 : i32
    %273 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_136) : (!llvm.ptr, i32) -> i32
    %274 = arith.extui %273 : i32 to i64
    %c65536_i64_137 = arith.constant 65536 : i64
    %275 = arith.muli %274, %c65536_i64_137 : i64
    %276 = arith.cmpi ult, %272, %275 : i64
    cf.cond_br %276, ^bb49, ^bb50
  ^bb48:  // pred: ^bb45
    %c1_i32_138 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_138) : (i32) -> ()
    cf.br ^bb47
  ^bb49:  // 2 preds: ^bb47, ^bb50
    %277 = llvm.getelementptr %14[%271] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %269, %277 {alignment = 1 : i64} : i32, !llvm.ptr
    %278 = llvm.load %0 : !llvm.ptr -> i32
    %279 = llvm.load %3 : !llvm.ptr -> i32
    %280 = llvm.load %1 : !llvm.ptr -> i32
    call @f92(%arg0, %278, %279, %280) : (!llvm.ptr, i32, i32, i32) -> ()
    %281 = llvm.load %0 : !llvm.ptr -> i32
    %c9_i32 = arith.constant 9 : i32
    %c20_i64_139 = arith.constant 20 : i64
    %282 = arith.extui %281 : i32 to i64
    %283 = arith.addi %282, %c20_i64_139 : i64
    %c4_i64_140 = arith.constant 4 : i64
    %284 = arith.addi %283, %c4_i64_140 : i64
    %c0_i32_141 = arith.constant 0 : i32
    %285 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_141) : (!llvm.ptr, i32) -> i32
    %286 = arith.extui %285 : i32 to i64
    %c65536_i64_142 = arith.constant 65536 : i64
    %287 = arith.muli %286, %c65536_i64_142 : i64
    %288 = arith.cmpi ult, %284, %287 : i64
    cf.cond_br %288, ^bb51, ^bb52
  ^bb50:  // pred: ^bb47
    %c1_i32_143 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_143) : (i32) -> ()
    cf.br ^bb49
  ^bb51:  // 2 preds: ^bb49, ^bb52
    %289 = llvm.getelementptr %14[%283] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c9_i32, %289 {alignment = 1 : i64} : i32, !llvm.ptr
    %290 = llvm.load %0 : !llvm.ptr -> i32
    %c1050464_i32 = arith.constant 1050464 : i32
    %c16_i64_144 = arith.constant 16 : i64
    %291 = arith.extui %290 : i32 to i64
    %292 = arith.addi %291, %c16_i64_144 : i64
    %c4_i64_145 = arith.constant 4 : i64
    %293 = arith.addi %292, %c4_i64_145 : i64
    %c0_i32_146 = arith.constant 0 : i32
    %294 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_146) : (!llvm.ptr, i32) -> i32
    %295 = arith.extui %294 : i32 to i64
    %c65536_i64_147 = arith.constant 65536 : i64
    %296 = arith.muli %295, %c65536_i64_147 : i64
    %297 = arith.cmpi ult, %293, %296 : i64
    cf.cond_br %297, ^bb53, ^bb54
  ^bb52:  // pred: ^bb49
    %c1_i32_148 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_148) : (i32) -> ()
    cf.br ^bb51
  ^bb53:  // 2 preds: ^bb51, ^bb54
    %298 = llvm.getelementptr %14[%292] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1050464_i32, %298 {alignment = 1 : i64} : i32, !llvm.ptr
    %299 = llvm.load %0 : !llvm.ptr -> i32
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %c12_i64_149 = arith.constant 12 : i64
    %300 = arith.extui %299 : i32 to i64
    %301 = arith.addi %300, %c12_i64_149 : i64
    %c4_i64_150 = arith.constant 4 : i64
    %302 = arith.addi %301, %c4_i64_150 : i64
    %c0_i32_151 = arith.constant 0 : i32
    %303 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_151) : (!llvm.ptr, i32) -> i32
    %304 = arith.extui %303 : i32 to i64
    %c65536_i64_152 = arith.constant 65536 : i64
    %305 = arith.muli %304, %c65536_i64_152 : i64
    %306 = arith.cmpi ult, %302, %305 : i64
    cf.cond_br %306, ^bb55, ^bb56
  ^bb54:  // pred: ^bb51
    %c1_i32_153 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_153) : (i32) -> ()
    cf.br ^bb53
  ^bb55:  // 2 preds: ^bb53, ^bb56
    %307 = llvm.getelementptr %14[%301] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-2147483648_i32, %307 {alignment = 1 : i64} : i32, !llvm.ptr
    %308 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i32_154 = arith.constant 4 : i32
    %309 = arith.addi %308, %c4_i32_154 : i32
    call @f112(%arg0, %309) : (!llvm.ptr, i32) -> ()
    %310 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i32_155 = arith.constant 4 : i32
    %311 = arith.addi %310, %c4_i32_155 : i32
    call @f113(%arg0, %311) : (!llvm.ptr, i32) -> ()
    %312 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_156 = arith.constant 64 : i32
    %313 = arith.addi %312, %c64_i32_156 : i32
    llvm.store %313, %11 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb56:  // pred: ^bb53
    %c1_i32_157 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_157) : (i32) -> ()
    cf.br ^bb55
  ^bb57:  // 2 preds: ^bb6, ^bb58
    %314 = llvm.getelementptr %14[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %315 = llvm.load volatile %314 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f143(%arg0, %46, %315) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb58:  // pred: ^bb6
    %c1_i32_158 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_158) : (i32) -> ()
    cf.br ^bb57
  ^bb59:  // 2 preds: ^bb5, ^bb60
    %316 = llvm.getelementptr %14[%40] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %317 = llvm.load volatile %316 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f143(%arg0, %37, %317) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb60:  // pred: ^bb5
    %c1_i32_159 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_159) : (i32) -> ()
    cf.br ^bb59
  }
  func.func @f94(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %7 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %8 = arith.extui %7 : i32 to i64
    %9 = arith.addi %8, %c20_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %10 = arith.addi %9, %c4_i64 : i64
    %c0_i32_3 = arith.constant 0 : i32
    %11 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_3) : (!llvm.ptr, i32) -> i32
    %12 = arith.extui %11 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %13 = arith.muli %12, %c65536_i64 : i64
    %14 = arith.cmpi ult, %10, %13 : i64
    cf.cond_br %14, ^bb4, ^bb5
  ^bb2:  // pred: ^bb41
    return
  ^bb3:  // 2 preds: ^bb6, ^bb8
    %15 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %16 = arith.extui %15 : i32 to i64
    %17 = arith.addi %16, %c16_i64 : i64
    %c4_i64_4 = arith.constant 4 : i64
    %18 = arith.addi %17, %c4_i64_4 : i64
    %c0_i32_5 = arith.constant 0 : i32
    %19 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_5) : (!llvm.ptr, i32) -> i32
    %20 = arith.extui %19 : i32 to i64
    %c65536_i64_6 = arith.constant 65536 : i64
    %21 = arith.muli %20, %c65536_i64_6 : i64
    %22 = arith.cmpi ult, %18, %21 : i64
    cf.cond_br %22, ^bb9, ^bb10
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %23 = llvm.getelementptr %6[%9] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %24 = llvm.load volatile %23 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %24, %2 : i32, !llvm.ptr
    %25 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %26 = arith.extui %25 : i32 to i64
    %27 = arith.addi %26, %c12_i64 : i64
    %c4_i64_7 = arith.constant 4 : i64
    %28 = arith.addi %27, %c4_i64_7 : i64
    %c0_i32_8 = arith.constant 0 : i32
    %29 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_8) : (!llvm.ptr, i32) -> i32
    %30 = arith.extui %29 : i32 to i64
    %c65536_i64_9 = arith.constant 65536 : i64
    %31 = arith.muli %30, %c65536_i64_9 : i64
    %32 = arith.cmpi ult, %28, %31 : i64
    cf.cond_br %32, ^bb6, ^bb7
  ^bb5:  // pred: ^bb1
    %c1_i32_10 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_10) : (i32) -> ()
    cf.br ^bb4
  ^bb6:  // 2 preds: ^bb4, ^bb7
    %33 = llvm.getelementptr %6[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %34 = llvm.load volatile %33 {alignment = 1 : i64} : !llvm.ptr -> i32
    %35 = arith.cmpi eq, %24, %34 : i32
    %36 = arith.extui %35 : i1 to i32
    %c0_i32_11 = arith.constant 0 : i32
    %37 = arith.cmpi eq, %36, %c0_i32_11 : i32
    %38 = arith.extui %37 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %39 = arith.cmpi ne, %38, %c0_i32_12 : i32
    cf.cond_br %39, ^bb3, ^bb8
  ^bb7:  // pred: ^bb4
    %c1_i32_13 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_13) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // pred: ^bb6
    %40 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %41 = arith.addi %40, %c12_i32 : i32
    call @f87(%arg0, %41) : (!llvm.ptr, i32) -> ()
    cf.br ^bb3
  ^bb9:  // 2 preds: ^bb3, ^bb10
    %42 = llvm.getelementptr %6[%17] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %43 = llvm.load volatile %42 {alignment = 1 : i64} : !llvm.ptr -> i32
    %44 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c31_i32 = arith.constant 31 : i32
    %45 = arith.cmpi ule, %c2_i32, %c31_i32 : i32
    %46 = scf.if %45 -> (i32) {
      %223 = arith.shli %44, %c2_i32 : i32
      scf.yield %223 : i32
    } else {
      %c0_i32_103 = arith.constant 0 : i32
      scf.yield %c0_i32_103 : i32
    }
    %47 = arith.addi %43, %46 : i32
    %c32_i32 = arith.constant 32 : i32
    %c0_i64 = arith.constant 0 : i64
    %48 = arith.extui %47 : i32 to i64
    %49 = arith.addi %48, %c0_i64 : i64
    %c4_i64_14 = arith.constant 4 : i64
    %50 = arith.addi %49, %c4_i64_14 : i64
    %c0_i32_15 = arith.constant 0 : i32
    %51 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_15) : (!llvm.ptr, i32) -> i32
    %52 = arith.extui %51 : i32 to i64
    %c65536_i64_16 = arith.constant 65536 : i64
    %53 = arith.muli %52, %c65536_i64_16 : i64
    %54 = arith.cmpi ult, %50, %53 : i64
    cf.cond_br %54, ^bb11, ^bb12
  ^bb10:  // pred: ^bb3
    %c1_i32_17 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_17) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %55 = llvm.getelementptr %6[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c32_i32, %55 {alignment = 1 : i64} : i32, !llvm.ptr
    %56 = llvm.load %1 : !llvm.ptr -> i32
    %57 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_18 = arith.constant 1 : i32
    %58 = arith.addi %57, %c1_i32_18 : i32
    %c20_i64_19 = arith.constant 20 : i64
    %59 = arith.extui %56 : i32 to i64
    %60 = arith.addi %59, %c20_i64_19 : i64
    %c4_i64_20 = arith.constant 4 : i64
    %61 = arith.addi %60, %c4_i64_20 : i64
    %c0_i32_21 = arith.constant 0 : i32
    %62 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_21) : (!llvm.ptr, i32) -> i32
    %63 = arith.extui %62 : i32 to i64
    %c65536_i64_22 = arith.constant 65536 : i64
    %64 = arith.muli %63, %c65536_i64_22 : i64
    %65 = arith.cmpi ult, %61, %64 : i64
    cf.cond_br %65, ^bb13, ^bb14
  ^bb12:  // pred: ^bb9
    %c1_i32_23 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_23) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %66 = llvm.getelementptr %6[%60] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %58, %66 {alignment = 1 : i64} : i32, !llvm.ptr
    %67 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %68 = arith.extui %67 : i32 to i64
    %69 = arith.addi %68, %c8_i64 : i64
    %c4_i64_24 = arith.constant 4 : i64
    %70 = arith.addi %69, %c4_i64_24 : i64
    %c0_i32_25 = arith.constant 0 : i32
    %71 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_25) : (!llvm.ptr, i32) -> i32
    %72 = arith.extui %71 : i32 to i64
    %c65536_i64_26 = arith.constant 65536 : i64
    %73 = arith.muli %72, %c65536_i64_26 : i64
    %74 = arith.cmpi ult, %70, %73 : i64
    cf.cond_br %74, ^bb16, ^bb17
  ^bb14:  // pred: ^bb11
    %c1_i32_27 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_27) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // 2 preds: ^bb18, ^bb20
    %75 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_28 = arith.constant 4 : i64
    %76 = arith.extui %75 : i32 to i64
    %77 = arith.addi %76, %c4_i64_28 : i64
    %c4_i64_29 = arith.constant 4 : i64
    %78 = arith.addi %77, %c4_i64_29 : i64
    %c0_i32_30 = arith.constant 0 : i32
    %79 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_30) : (!llvm.ptr, i32) -> i32
    %80 = arith.extui %79 : i32 to i64
    %c65536_i64_31 = arith.constant 65536 : i64
    %81 = arith.muli %80, %c65536_i64_31 : i64
    %82 = arith.cmpi ult, %78, %81 : i64
    cf.cond_br %82, ^bb21, ^bb22
  ^bb16:  // 2 preds: ^bb13, ^bb17
    %83 = llvm.getelementptr %6[%69] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %84 = llvm.load volatile %83 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %84, %3 : i32, !llvm.ptr
    %85 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_32 = arith.constant 0 : i64
    %86 = arith.extui %85 : i32 to i64
    %87 = arith.addi %86, %c0_i64_32 : i64
    %c4_i64_33 = arith.constant 4 : i64
    %88 = arith.addi %87, %c4_i64_33 : i64
    %c0_i32_34 = arith.constant 0 : i32
    %89 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_34) : (!llvm.ptr, i32) -> i32
    %90 = arith.extui %89 : i32 to i64
    %c65536_i64_35 = arith.constant 65536 : i64
    %91 = arith.muli %90, %c65536_i64_35 : i64
    %92 = arith.cmpi ult, %88, %91 : i64
    cf.cond_br %92, ^bb18, ^bb19
  ^bb17:  // pred: ^bb13
    %c1_i32_36 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_36) : (i32) -> ()
    cf.br ^bb16
  ^bb18:  // 2 preds: ^bb16, ^bb19
    %93 = llvm.getelementptr %6[%87] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %94 = llvm.load volatile %93 {alignment = 1 : i64} : !llvm.ptr -> i32
    %95 = arith.cmpi eq, %84, %94 : i32
    %96 = arith.extui %95 : i1 to i32
    %c0_i32_37 = arith.constant 0 : i32
    %97 = arith.cmpi eq, %96, %c0_i32_37 : i32
    %98 = arith.extui %97 : i1 to i32
    %c0_i32_38 = arith.constant 0 : i32
    %99 = arith.cmpi ne, %98, %c0_i32_38 : i32
    cf.cond_br %99, ^bb15, ^bb20
  ^bb19:  // pred: ^bb16
    %c1_i32_39 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_39) : (i32) -> ()
    cf.br ^bb18
  ^bb20:  // pred: ^bb18
    %100 = llvm.load %1 : !llvm.ptr -> i32
    call @f88(%arg0, %100) : (!llvm.ptr, i32) -> ()
    cf.br ^bb15
  ^bb21:  // 2 preds: ^bb15, ^bb22
    %101 = llvm.getelementptr %6[%77] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %102 = llvm.load volatile %101 {alignment = 1 : i64} : !llvm.ptr -> i32
    %103 = llvm.load %3 : !llvm.ptr -> i32
    %c5_i32 = arith.constant 5 : i32
    %c31_i32_40 = arith.constant 31 : i32
    %104 = arith.cmpi ule, %c5_i32, %c31_i32_40 : i32
    %105 = scf.if %104 -> (i32) {
      %223 = arith.shli %103, %c5_i32 : i32
      scf.yield %223 : i32
    } else {
      %c0_i32_103 = arith.constant 0 : i32
      scf.yield %c0_i32_103 : i32
    }
    %106 = arith.addi %102, %105 : i32
    llvm.store %106, %2 : i32, !llvm.ptr
    %107 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_41 = arith.constant 0 : i64
    %108 = arith.extui %107 : i32 to i64
    %109 = arith.addi %108, %c0_i64_41 : i64
    %c8_i64_42 = arith.constant 8 : i64
    %110 = arith.addi %109, %c8_i64_42 : i64
    %c0_i32_43 = arith.constant 0 : i32
    %111 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_43) : (!llvm.ptr, i32) -> i32
    %112 = arith.extui %111 : i32 to i64
    %c65536_i64_44 = arith.constant 65536 : i64
    %113 = arith.muli %112, %c65536_i64_44 : i64
    %114 = arith.cmpi ult, %110, %113 : i64
    cf.cond_br %114, ^bb23, ^bb24
  ^bb22:  // pred: ^bb15
    %c1_i32_45 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_45) : (i32) -> ()
    cf.br ^bb21
  ^bb23:  // 2 preds: ^bb21, ^bb24
    %115 = llvm.getelementptr %6[%109] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %116 = llvm.load volatile %115 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_46 = arith.constant 0 : i64
    %117 = arith.extui %106 : i32 to i64
    %118 = arith.addi %117, %c0_i64_46 : i64
    %c8_i64_47 = arith.constant 8 : i64
    %119 = arith.addi %118, %c8_i64_47 : i64
    %c0_i32_48 = arith.constant 0 : i32
    %120 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_48) : (!llvm.ptr, i32) -> i32
    %121 = arith.extui %120 : i32 to i64
    %c65536_i64_49 = arith.constant 65536 : i64
    %122 = arith.muli %121, %c65536_i64_49 : i64
    %123 = arith.cmpi ult, %119, %122 : i64
    cf.cond_br %123, ^bb25, ^bb26
  ^bb24:  // pred: ^bb21
    %c1_i32_50 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_50) : (i32) -> ()
    cf.br ^bb23
  ^bb25:  // 2 preds: ^bb23, ^bb26
    %124 = llvm.getelementptr %6[%118] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %116, %124 {alignment = 1 : i64} : i64, !llvm.ptr
    %125 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %126 = arith.addi %125, %c24_i32 : i32
    %127 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32_51 = arith.constant 24 : i32
    %128 = arith.addi %127, %c24_i32_51 : i32
    %c0_i64_52 = arith.constant 0 : i64
    %129 = arith.extui %128 : i32 to i64
    %130 = arith.addi %129, %c0_i64_52 : i64
    %c8_i64_53 = arith.constant 8 : i64
    %131 = arith.addi %130, %c8_i64_53 : i64
    %c0_i32_54 = arith.constant 0 : i32
    %132 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_54) : (!llvm.ptr, i32) -> i32
    %133 = arith.extui %132 : i32 to i64
    %c65536_i64_55 = arith.constant 65536 : i64
    %134 = arith.muli %133, %c65536_i64_55 : i64
    %135 = arith.cmpi ult, %131, %134 : i64
    cf.cond_br %135, ^bb27, ^bb28
  ^bb26:  // pred: ^bb23
    %c1_i32_56 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_56) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // 2 preds: ^bb25, ^bb28
    %136 = llvm.getelementptr %6[%130] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %137 = llvm.load volatile %136 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_57 = arith.constant 0 : i64
    %138 = arith.extui %126 : i32 to i64
    %139 = arith.addi %138, %c0_i64_57 : i64
    %c8_i64_58 = arith.constant 8 : i64
    %140 = arith.addi %139, %c8_i64_58 : i64
    %c0_i32_59 = arith.constant 0 : i32
    %141 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_59) : (!llvm.ptr, i32) -> i32
    %142 = arith.extui %141 : i32 to i64
    %c65536_i64_60 = arith.constant 65536 : i64
    %143 = arith.muli %142, %c65536_i64_60 : i64
    %144 = arith.cmpi ult, %140, %143 : i64
    cf.cond_br %144, ^bb29, ^bb30
  ^bb28:  // pred: ^bb25
    %c1_i32_61 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_61) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // 2 preds: ^bb27, ^bb30
    %145 = llvm.getelementptr %6[%139] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %137, %145 {alignment = 1 : i64} : i64, !llvm.ptr
    %146 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %147 = arith.addi %146, %c16_i32 : i32
    %148 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_62 = arith.constant 16 : i32
    %149 = arith.addi %148, %c16_i32_62 : i32
    %c0_i64_63 = arith.constant 0 : i64
    %150 = arith.extui %149 : i32 to i64
    %151 = arith.addi %150, %c0_i64_63 : i64
    %c8_i64_64 = arith.constant 8 : i64
    %152 = arith.addi %151, %c8_i64_64 : i64
    %c0_i32_65 = arith.constant 0 : i32
    %153 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_65) : (!llvm.ptr, i32) -> i32
    %154 = arith.extui %153 : i32 to i64
    %c65536_i64_66 = arith.constant 65536 : i64
    %155 = arith.muli %154, %c65536_i64_66 : i64
    %156 = arith.cmpi ult, %152, %155 : i64
    cf.cond_br %156, ^bb31, ^bb32
  ^bb30:  // pred: ^bb27
    %c1_i32_67 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_67) : (i32) -> ()
    cf.br ^bb29
  ^bb31:  // 2 preds: ^bb29, ^bb32
    %157 = llvm.getelementptr %6[%151] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %158 = llvm.load volatile %157 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_68 = arith.constant 0 : i64
    %159 = arith.extui %147 : i32 to i64
    %160 = arith.addi %159, %c0_i64_68 : i64
    %c8_i64_69 = arith.constant 8 : i64
    %161 = arith.addi %160, %c8_i64_69 : i64
    %c0_i32_70 = arith.constant 0 : i32
    %162 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_70) : (!llvm.ptr, i32) -> i32
    %163 = arith.extui %162 : i32 to i64
    %c65536_i64_71 = arith.constant 65536 : i64
    %164 = arith.muli %163, %c65536_i64_71 : i64
    %165 = arith.cmpi ult, %161, %164 : i64
    cf.cond_br %165, ^bb33, ^bb34
  ^bb32:  // pred: ^bb29
    %c1_i32_72 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_72) : (i32) -> ()
    cf.br ^bb31
  ^bb33:  // 2 preds: ^bb31, ^bb34
    %166 = llvm.getelementptr %6[%160] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %158, %166 {alignment = 1 : i64} : i64, !llvm.ptr
    %167 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %168 = arith.addi %167, %c8_i32 : i32
    %169 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_73 = arith.constant 8 : i32
    %170 = arith.addi %169, %c8_i32_73 : i32
    %c0_i64_74 = arith.constant 0 : i64
    %171 = arith.extui %170 : i32 to i64
    %172 = arith.addi %171, %c0_i64_74 : i64
    %c8_i64_75 = arith.constant 8 : i64
    %173 = arith.addi %172, %c8_i64_75 : i64
    %c0_i32_76 = arith.constant 0 : i32
    %174 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_76) : (!llvm.ptr, i32) -> i32
    %175 = arith.extui %174 : i32 to i64
    %c65536_i64_77 = arith.constant 65536 : i64
    %176 = arith.muli %175, %c65536_i64_77 : i64
    %177 = arith.cmpi ult, %173, %176 : i64
    cf.cond_br %177, ^bb35, ^bb36
  ^bb34:  // pred: ^bb31
    %c1_i32_78 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_78) : (i32) -> ()
    cf.br ^bb33
  ^bb35:  // 2 preds: ^bb33, ^bb36
    %178 = llvm.getelementptr %6[%172] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %179 = llvm.load volatile %178 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_79 = arith.constant 0 : i64
    %180 = arith.extui %168 : i32 to i64
    %181 = arith.addi %180, %c0_i64_79 : i64
    %c8_i64_80 = arith.constant 8 : i64
    %182 = arith.addi %181, %c8_i64_80 : i64
    %c0_i32_81 = arith.constant 0 : i32
    %183 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_81) : (!llvm.ptr, i32) -> i32
    %184 = arith.extui %183 : i32 to i64
    %c65536_i64_82 = arith.constant 65536 : i64
    %185 = arith.muli %184, %c65536_i64_82 : i64
    %186 = arith.cmpi ult, %182, %185 : i64
    cf.cond_br %186, ^bb37, ^bb38
  ^bb36:  // pred: ^bb33
    %c1_i32_83 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_83) : (i32) -> ()
    cf.br ^bb35
  ^bb37:  // 2 preds: ^bb35, ^bb38
    %187 = llvm.getelementptr %6[%181] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %179, %187 {alignment = 1 : i64} : i64, !llvm.ptr
    %188 = llvm.load %1 : !llvm.ptr -> i32
    %189 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_84 = arith.constant 1 : i32
    %190 = arith.addi %189, %c1_i32_84 : i32
    %c8_i64_85 = arith.constant 8 : i64
    %191 = arith.extui %188 : i32 to i64
    %192 = arith.addi %191, %c8_i64_85 : i64
    %c4_i64_86 = arith.constant 4 : i64
    %193 = arith.addi %192, %c4_i64_86 : i64
    %c0_i32_87 = arith.constant 0 : i32
    %194 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_87) : (!llvm.ptr, i32) -> i32
    %195 = arith.extui %194 : i32 to i64
    %c65536_i64_88 = arith.constant 65536 : i64
    %196 = arith.muli %195, %c65536_i64_88 : i64
    %197 = arith.cmpi ult, %193, %196 : i64
    cf.cond_br %197, ^bb39, ^bb40
  ^bb38:  // pred: ^bb35
    %c1_i32_89 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_89) : (i32) -> ()
    cf.br ^bb37
  ^bb39:  // 2 preds: ^bb37, ^bb40
    %198 = llvm.getelementptr %6[%192] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %190, %198 {alignment = 1 : i64} : i32, !llvm.ptr
    %199 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64_90 = arith.constant 20 : i64
    %200 = arith.extui %199 : i32 to i64
    %201 = arith.addi %200, %c20_i64_90 : i64
    %c4_i64_91 = arith.constant 4 : i64
    %202 = arith.addi %201, %c4_i64_91 : i64
    %c0_i32_92 = arith.constant 0 : i32
    %203 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_92) : (!llvm.ptr, i32) -> i32
    %204 = arith.extui %203 : i32 to i64
    %c65536_i64_93 = arith.constant 65536 : i64
    %205 = arith.muli %204, %c65536_i64_93 : i64
    %206 = arith.cmpi ult, %202, %205 : i64
    cf.cond_br %206, ^bb42, ^bb43
  ^bb40:  // pred: ^bb37
    %c1_i32_94 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_94) : (i32) -> ()
    cf.br ^bb39
  ^bb41:  // 2 preds: ^bb42, ^bb45
    cf.br ^bb2
  ^bb42:  // 2 preds: ^bb39, ^bb43
    %207 = llvm.getelementptr %6[%201] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %208 = llvm.load volatile %207 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %208, %0 : i32, !llvm.ptr
    %c0_i32_95 = arith.constant 0 : i32
    %209 = arith.cmpi eq, %208, %c0_i32_95 : i32
    %210 = arith.extui %209 : i1 to i32
    %c0_i32_96 = arith.constant 0 : i32
    %211 = arith.cmpi ne, %210, %c0_i32_96 : i32
    cf.cond_br %211, ^bb41, ^bb44
  ^bb43:  // pred: ^bb39
    %c1_i32_97 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_97) : (i32) -> ()
    cf.br ^bb42
  ^bb44:  // pred: ^bb42
    %212 = llvm.load %1 : !llvm.ptr -> i32
    %213 = llvm.load %0 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %214 = arith.addi %213, %c-1_i32 : i32
    %c20_i64_98 = arith.constant 20 : i64
    %215 = arith.extui %212 : i32 to i64
    %216 = arith.addi %215, %c20_i64_98 : i64
    %c4_i64_99 = arith.constant 4 : i64
    %217 = arith.addi %216, %c4_i64_99 : i64
    %c0_i32_100 = arith.constant 0 : i32
    %218 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_100) : (!llvm.ptr, i32) -> i32
    %219 = arith.extui %218 : i32 to i64
    %c65536_i64_101 = arith.constant 65536 : i64
    %220 = arith.muli %219, %c65536_i64_101 : i64
    %221 = arith.cmpi ult, %217, %220 : i64
    cf.cond_br %221, ^bb45, ^bb46
  ^bb45:  // 2 preds: ^bb44, ^bb46
    %222 = llvm.getelementptr %6[%216] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %214, %222 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb41
  ^bb46:  // pred: ^bb44
    %c1_i32_102 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_102) : (i32) -> ()
    cf.br ^bb45
  }
  func.func @f95(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %5 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %0 : !llvm.ptr -> i32
    %9 = llvm.load %1 : !llvm.ptr -> i32
    %10 = llvm.load %2 : !llvm.ptr -> i32
    call @f92(%arg0, %8, %9, %10) : (!llvm.ptr, i32, i32, i32) -> ()
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %12 = llvm.load %4 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %13 = arith.extui %11 : i32 to i64
    %14 = arith.addi %13, %c20_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %15 = arith.addi %14, %c4_i64 : i64
    %c0_i32 = arith.constant 0 : i32
    %16 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32) : (!llvm.ptr, i32) -> i32
    %17 = arith.extui %16 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %18 = arith.muli %17, %c65536_i64 : i64
    %19 = arith.cmpi ult, %15, %18 : i64
    cf.cond_br %19, ^bb3, ^bb4
  ^bb2:  // pred: ^bb7
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %20 = llvm.getelementptr %7[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %12, %20 {alignment = 1 : i64} : i32, !llvm.ptr
    %21 = llvm.load %0 : !llvm.ptr -> i32
    %22 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %23 = arith.extui %21 : i32 to i64
    %24 = arith.addi %23, %c16_i64 : i64
    %c4_i64_4 = arith.constant 4 : i64
    %25 = arith.addi %24, %c4_i64_4 : i64
    %c0_i32_5 = arith.constant 0 : i32
    %26 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_5) : (!llvm.ptr, i32) -> i32
    %27 = arith.extui %26 : i32 to i64
    %c65536_i64_6 = arith.constant 65536 : i64
    %28 = arith.muli %27, %c65536_i64_6 : i64
    %29 = arith.cmpi ult, %25, %28 : i64
    cf.cond_br %29, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c1_i32_7 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_7) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %30 = llvm.getelementptr %7[%24] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %22, %30 {alignment = 1 : i64} : i32, !llvm.ptr
    %31 = llvm.load %0 : !llvm.ptr -> i32
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %c12_i64 = arith.constant 12 : i64
    %32 = arith.extui %31 : i32 to i64
    %33 = arith.addi %32, %c12_i64 : i64
    %c4_i64_8 = arith.constant 4 : i64
    %34 = arith.addi %33, %c4_i64_8 : i64
    %c0_i32_9 = arith.constant 0 : i32
    %35 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_9) : (!llvm.ptr, i32) -> i32
    %36 = arith.extui %35 : i32 to i64
    %c65536_i64_10 = arith.constant 65536 : i64
    %37 = arith.muli %36, %c65536_i64_10 : i64
    %38 = arith.cmpi ult, %34, %37 : i64
    cf.cond_br %38, ^bb7, ^bb8
  ^bb6:  // pred: ^bb3
    %c1_i32_11 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_11) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %39 = llvm.getelementptr %7[%33] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-2147483648_i32, %39 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb8:  // pred: ^bb5
    %c1_i32_12 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_12) : (i32) -> ()
    cf.br ^bb7
  }
  func.func @f96(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %10 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.getelementptr %12[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %15 = llvm.load %11 : !llvm.ptr -> i32
    %c80_i32 = arith.constant 80 : i32
    %16 = arith.subi %15, %c80_i32 : i32
    llvm.store %16, %2 : i32, !llvm.ptr
    llvm.store %16, %11 : i32, !llvm.ptr
    %17 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %18 = arith.extui %17 : i32 to i64
    %19 = arith.addi %18, %c20_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %20 = arith.addi %19, %c4_i64 : i64
    %c0_i32_9 = arith.constant 0 : i32
    %21 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_9) : (!llvm.ptr, i32) -> i32
    %22 = arith.extui %21 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %23 = arith.muli %22, %c65536_i64 : i64
    %24 = arith.cmpi ult, %20, %23 : i64
    cf.cond_br %24, ^bb4, ^bb5
  ^bb2:  // pred: ^bb150
    return
  ^bb3:  // 2 preds: ^bb6, ^bb8
    %25 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %26 = arith.extui %25 : i32 to i64
    %27 = arith.addi %26, %c16_i64 : i64
    %c4_i64_10 = arith.constant 4 : i64
    %28 = arith.addi %27, %c4_i64_10 : i64
    %c0_i32_11 = arith.constant 0 : i32
    %29 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_11) : (!llvm.ptr, i32) -> i32
    %30 = arith.extui %29 : i32 to i64
    %c65536_i64_12 = arith.constant 65536 : i64
    %31 = arith.muli %30, %c65536_i64_12 : i64
    %32 = arith.cmpi ult, %28, %31 : i64
    cf.cond_br %32, ^bb9, ^bb10
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %33 = llvm.getelementptr %14[%19] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %34 = llvm.load volatile %33 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %34, %3 : i32, !llvm.ptr
    %35 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %36 = arith.extui %35 : i32 to i64
    %37 = arith.addi %36, %c12_i64 : i64
    %c4_i64_13 = arith.constant 4 : i64
    %38 = arith.addi %37, %c4_i64_13 : i64
    %c0_i32_14 = arith.constant 0 : i32
    %39 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_14) : (!llvm.ptr, i32) -> i32
    %40 = arith.extui %39 : i32 to i64
    %c65536_i64_15 = arith.constant 65536 : i64
    %41 = arith.muli %40, %c65536_i64_15 : i64
    %42 = arith.cmpi ult, %38, %41 : i64
    cf.cond_br %42, ^bb6, ^bb7
  ^bb5:  // pred: ^bb1
    %c1_i32_16 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_16) : (i32) -> ()
    cf.br ^bb4
  ^bb6:  // 2 preds: ^bb4, ^bb7
    %43 = llvm.getelementptr %14[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %44 = llvm.load volatile %43 {alignment = 1 : i64} : !llvm.ptr -> i32
    %45 = arith.cmpi eq, %34, %44 : i32
    %46 = arith.extui %45 : i1 to i32
    %c0_i32_17 = arith.constant 0 : i32
    %47 = arith.cmpi eq, %46, %c0_i32_17 : i32
    %48 = arith.extui %47 : i1 to i32
    %c0_i32_18 = arith.constant 0 : i32
    %49 = arith.cmpi ne, %48, %c0_i32_18 : i32
    cf.cond_br %49, ^bb3, ^bb8
  ^bb7:  // pred: ^bb4
    %c1_i32_19 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_19) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // pred: ^bb6
    %50 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %51 = arith.addi %50, %c12_i32 : i32
    call @f87(%arg0, %51) : (!llvm.ptr, i32) -> ()
    cf.br ^bb3
  ^bb9:  // 2 preds: ^bb3, ^bb10
    %52 = llvm.getelementptr %14[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %53 = llvm.load volatile %52 {alignment = 1 : i64} : !llvm.ptr -> i32
    %54 = llvm.load %3 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c31_i32 = arith.constant 31 : i32
    %55 = arith.cmpi ule, %c2_i32, %c31_i32 : i32
    %56 = scf.if %55 -> (i32) {
      %837 = arith.shli %54, %c2_i32 : i32
      scf.yield %837 : i32
    } else {
      %c0_i32_439 = arith.constant 0 : i32
      scf.yield %c0_i32_439 : i32
    }
    llvm.store %56, %4 : i32, !llvm.ptr
    %57 = arith.addi %53, %56 : i32
    %c32_i32 = arith.constant 32 : i32
    %c0_i64 = arith.constant 0 : i64
    %58 = arith.extui %57 : i32 to i64
    %59 = arith.addi %58, %c0_i64 : i64
    %c4_i64_20 = arith.constant 4 : i64
    %60 = arith.addi %59, %c4_i64_20 : i64
    %c0_i32_21 = arith.constant 0 : i32
    %61 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_21) : (!llvm.ptr, i32) -> i32
    %62 = arith.extui %61 : i32 to i64
    %c65536_i64_22 = arith.constant 65536 : i64
    %63 = arith.muli %62, %c65536_i64_22 : i64
    %64 = arith.cmpi ult, %60, %63 : i64
    cf.cond_br %64, ^bb11, ^bb12
  ^bb10:  // pred: ^bb3
    %c1_i32_23 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_23) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %65 = llvm.getelementptr %14[%59] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c32_i32, %65 {alignment = 1 : i64} : i32, !llvm.ptr
    %66 = llvm.load %1 : !llvm.ptr -> i32
    %67 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_24 = arith.constant 1 : i32
    %68 = arith.addi %67, %c1_i32_24 : i32
    %c20_i64_25 = arith.constant 20 : i64
    %69 = arith.extui %66 : i32 to i64
    %70 = arith.addi %69, %c20_i64_25 : i64
    %c4_i64_26 = arith.constant 4 : i64
    %71 = arith.addi %70, %c4_i64_26 : i64
    %c0_i32_27 = arith.constant 0 : i32
    %72 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_27) : (!llvm.ptr, i32) -> i32
    %73 = arith.extui %72 : i32 to i64
    %c65536_i64_28 = arith.constant 65536 : i64
    %74 = arith.muli %73, %c65536_i64_28 : i64
    %75 = arith.cmpi ult, %71, %74 : i64
    cf.cond_br %75, ^bb13, ^bb14
  ^bb12:  // pred: ^bb9
    %c1_i32_29 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_29) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %76 = llvm.getelementptr %14[%70] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %68, %76 {alignment = 1 : i64} : i32, !llvm.ptr
    %77 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i64_30 = arith.constant 16 : i64
    %78 = arith.extui %77 : i32 to i64
    %79 = arith.addi %78, %c16_i64_30 : i64
    %c4_i64_31 = arith.constant 4 : i64
    %80 = arith.addi %79, %c4_i64_31 : i64
    %c0_i32_32 = arith.constant 0 : i32
    %81 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_32) : (!llvm.ptr, i32) -> i32
    %82 = arith.extui %81 : i32 to i64
    %c65536_i64_33 = arith.constant 65536 : i64
    %83 = arith.muli %82, %c65536_i64_33 : i64
    %84 = arith.cmpi ult, %80, %83 : i64
    cf.cond_br %84, ^bb15, ^bb16
  ^bb14:  // pred: ^bb11
    %c1_i32_34 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_34) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // 2 preds: ^bb13, ^bb16
    %85 = llvm.getelementptr %14[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %86 = llvm.load volatile %85 {alignment = 1 : i64} : !llvm.ptr -> i32
    %87 = llvm.load %4 : !llvm.ptr -> i32
    %88 = arith.addi %86, %87 : i32
    %c0_i64_35 = arith.constant 0 : i64
    %89 = arith.extui %88 : i32 to i64
    %90 = arith.addi %89, %c0_i64_35 : i64
    %c4_i64_36 = arith.constant 4 : i64
    %91 = arith.addi %90, %c4_i64_36 : i64
    %c0_i32_37 = arith.constant 0 : i32
    %92 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_37) : (!llvm.ptr, i32) -> i32
    %93 = arith.extui %92 : i32 to i64
    %c65536_i64_38 = arith.constant 65536 : i64
    %94 = arith.muli %93, %c65536_i64_38 : i64
    %95 = arith.cmpi ult, %91, %94 : i64
    cf.cond_br %95, ^bb17, ^bb18
  ^bb16:  // pred: ^bb13
    %c1_i32_39 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_39) : (i32) -> ()
    cf.br ^bb15
  ^bb17:  // 2 preds: ^bb15, ^bb18
    %96 = llvm.getelementptr %14[%90] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %97 = llvm.load volatile %96 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %97, %3 : i32, !llvm.ptr
    %98 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32 = arith.constant 40 : i32
    %99 = arith.addi %98, %c40_i32 : i32
    %c24_i32 = arith.constant 24 : i32
    %100 = arith.addi %99, %c24_i32 : i32
    llvm.store %100, %4 : i32, !llvm.ptr
    %c0_i64_40 = arith.constant 0 : i64
    %c0_i64_41 = arith.constant 0 : i64
    %101 = arith.extui %100 : i32 to i64
    %102 = arith.addi %101, %c0_i64_41 : i64
    %c8_i64 = arith.constant 8 : i64
    %103 = arith.addi %102, %c8_i64 : i64
    %c0_i32_42 = arith.constant 0 : i32
    %104 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_42) : (!llvm.ptr, i32) -> i32
    %105 = arith.extui %104 : i32 to i64
    %c65536_i64_43 = arith.constant 65536 : i64
    %106 = arith.muli %105, %c65536_i64_43 : i64
    %107 = arith.cmpi ult, %103, %106 : i64
    cf.cond_br %107, ^bb19, ^bb20
  ^bb18:  // pred: ^bb15
    %c1_i32_44 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_44) : (i32) -> ()
    cf.br ^bb17
  ^bb19:  // 2 preds: ^bb17, ^bb20
    %108 = llvm.getelementptr %14[%102] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_40, %108 {alignment = 1 : i64} : i64, !llvm.ptr
    %109 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_45 = arith.constant 40 : i32
    %110 = arith.addi %109, %c40_i32_45 : i32
    %c16_i32 = arith.constant 16 : i32
    %111 = arith.addi %110, %c16_i32 : i32
    llvm.store %111, %5 : i32, !llvm.ptr
    %c0_i64_46 = arith.constant 0 : i64
    %c0_i64_47 = arith.constant 0 : i64
    %112 = arith.extui %111 : i32 to i64
    %113 = arith.addi %112, %c0_i64_47 : i64
    %c8_i64_48 = arith.constant 8 : i64
    %114 = arith.addi %113, %c8_i64_48 : i64
    %c0_i32_49 = arith.constant 0 : i32
    %115 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_49) : (!llvm.ptr, i32) -> i32
    %116 = arith.extui %115 : i32 to i64
    %c65536_i64_50 = arith.constant 65536 : i64
    %117 = arith.muli %116, %c65536_i64_50 : i64
    %118 = arith.cmpi ult, %114, %117 : i64
    cf.cond_br %118, ^bb21, ^bb22
  ^bb20:  // pred: ^bb17
    %c1_i32_51 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_51) : (i32) -> ()
    cf.br ^bb19
  ^bb21:  // 2 preds: ^bb19, ^bb22
    %119 = llvm.getelementptr %14[%113] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_46, %119 {alignment = 1 : i64} : i64, !llvm.ptr
    %120 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_52 = arith.constant 40 : i32
    %121 = arith.addi %120, %c40_i32_52 : i32
    %c8_i32 = arith.constant 8 : i32
    %122 = arith.addi %121, %c8_i32 : i32
    llvm.store %122, %6 : i32, !llvm.ptr
    %c0_i64_53 = arith.constant 0 : i64
    %c0_i64_54 = arith.constant 0 : i64
    %123 = arith.extui %122 : i32 to i64
    %124 = arith.addi %123, %c0_i64_54 : i64
    %c8_i64_55 = arith.constant 8 : i64
    %125 = arith.addi %124, %c8_i64_55 : i64
    %c0_i32_56 = arith.constant 0 : i32
    %126 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_56) : (!llvm.ptr, i32) -> i32
    %127 = arith.extui %126 : i32 to i64
    %c65536_i64_57 = arith.constant 65536 : i64
    %128 = arith.muli %127, %c65536_i64_57 : i64
    %129 = arith.cmpi ult, %125, %128 : i64
    cf.cond_br %129, ^bb23, ^bb24
  ^bb22:  // pred: ^bb19
    %c1_i32_58 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_58) : (i32) -> ()
    cf.br ^bb21
  ^bb23:  // 2 preds: ^bb21, ^bb24
    %130 = llvm.getelementptr %14[%124] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_53, %130 {alignment = 1 : i64} : i64, !llvm.ptr
    %131 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_59 = arith.constant 0 : i64
    %c40_i64 = arith.constant 40 : i64
    %132 = arith.extui %131 : i32 to i64
    %133 = arith.addi %132, %c40_i64 : i64
    %c8_i64_60 = arith.constant 8 : i64
    %134 = arith.addi %133, %c8_i64_60 : i64
    %c0_i32_61 = arith.constant 0 : i32
    %135 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_61) : (!llvm.ptr, i32) -> i32
    %136 = arith.extui %135 : i32 to i64
    %c65536_i64_62 = arith.constant 65536 : i64
    %137 = arith.muli %136, %c65536_i64_62 : i64
    %138 = arith.cmpi ult, %134, %137 : i64
    cf.cond_br %138, ^bb25, ^bb26
  ^bb24:  // pred: ^bb21
    %c1_i32_63 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_63) : (i32) -> ()
    cf.br ^bb23
  ^bb25:  // 2 preds: ^bb23, ^bb26
    %139 = llvm.getelementptr %14[%133] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_59, %139 {alignment = 1 : i64} : i64, !llvm.ptr
    %140 = llvm.load %2 : !llvm.ptr -> i32
    %141 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32_64 = arith.constant 24 : i32
    %c31_i32_65 = arith.constant 31 : i32
    %142 = arith.cmpi ule, %c24_i32_64, %c31_i32_65 : i32
    %143 = scf.if %142 -> (i32) {
      %837 = arith.shli %141, %c24_i32_64 : i32
      scf.yield %837 : i32
    } else {
      %c0_i32_439 = arith.constant 0 : i32
      scf.yield %c0_i32_439 : i32
    }
    %144 = llvm.load %3 : !llvm.ptr -> i32
    %c65280_i32 = arith.constant 65280 : i32
    %145 = arith.andi %144, %c65280_i32 : i32
    %c8_i32_66 = arith.constant 8 : i32
    %c31_i32_67 = arith.constant 31 : i32
    %146 = arith.cmpi ule, %c8_i32_66, %c31_i32_67 : i32
    %147 = scf.if %146 -> (i32) {
      %837 = arith.shli %145, %c8_i32_66 : i32
      scf.yield %837 : i32
    } else {
      %c0_i32_439 = arith.constant 0 : i32
      scf.yield %c0_i32_439 : i32
    }
    %148 = arith.ori %143, %147 : i32
    %149 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_68 = arith.constant 8 : i32
    %c31_i32_69 = arith.constant 31 : i32
    %150 = arith.cmpi ule, %c8_i32_68, %c31_i32_69 : i32
    %151 = scf.if %150 -> (i32) {
      %837 = arith.shrui %149, %c8_i32_68 : i32
      scf.yield %837 : i32
    } else {
      %c0_i32_439 = arith.constant 0 : i32
      scf.yield %c0_i32_439 : i32
    }
    %c65280_i32_70 = arith.constant 65280 : i32
    %152 = arith.andi %151, %c65280_i32_70 : i32
    %153 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32_71 = arith.constant 24 : i32
    %c31_i32_72 = arith.constant 31 : i32
    %154 = arith.cmpi ule, %c24_i32_71, %c31_i32_72 : i32
    %155 = scf.if %154 -> (i32) {
      %837 = arith.shrui %153, %c24_i32_71 : i32
      scf.yield %837 : i32
    } else {
      %c0_i32_439 = arith.constant 0 : i32
      scf.yield %c0_i32_439 : i32
    }
    %156 = arith.ori %152, %155 : i32
    %157 = arith.ori %148, %156 : i32
    %c76_i64 = arith.constant 76 : i64
    %158 = arith.extui %140 : i32 to i64
    %159 = arith.addi %158, %c76_i64 : i64
    %c4_i64_73 = arith.constant 4 : i64
    %160 = arith.addi %159, %c4_i64_73 : i64
    %c0_i32_74 = arith.constant 0 : i32
    %161 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_74) : (!llvm.ptr, i32) -> i32
    %162 = arith.extui %161 : i32 to i64
    %c65536_i64_75 = arith.constant 65536 : i64
    %163 = arith.muli %162, %c65536_i64_75 : i64
    %164 = arith.cmpi ult, %160, %163 : i64
    cf.cond_br %164, ^bb27, ^bb28
  ^bb26:  // pred: ^bb23
    %c1_i32_76 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_76) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // 2 preds: ^bb25, ^bb28
    %165 = llvm.getelementptr %14[%159] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %157, %165 {alignment = 1 : i64} : i32, !llvm.ptr
    %166 = llvm.load %2 : !llvm.ptr -> i32
    %c68_i32 = arith.constant 68 : i32
    %167 = arith.addi %166, %c68_i32 : i32
    %c4_i32 = arith.constant 4 : i32
    %168 = llvm.load %2 : !llvm.ptr -> i32
    %c76_i32 = arith.constant 76 : i32
    %169 = arith.addi %168, %c76_i32 : i32
    %c4_i32_77 = arith.constant 4 : i32
    %c1050820_i32 = arith.constant 1050820 : i32
    call @f114(%arg0, %167, %c4_i32, %169, %c4_i32_77, %c1050820_i32) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %170 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_78 = arith.constant 8 : i32
    %171 = arith.addi %170, %c8_i32_78 : i32
    %c8_i32_79 = arith.constant 8 : i32
    %172 = arith.addi %171, %c8_i32_79 : i32
    llvm.store %172, %7 : i32, !llvm.ptr
    %173 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_80 = arith.constant 0 : i64
    %174 = arith.extui %173 : i32 to i64
    %175 = arith.addi %174, %c0_i64_80 : i64
    %c8_i64_81 = arith.constant 8 : i64
    %176 = arith.addi %175, %c8_i64_81 : i64
    %c0_i32_82 = arith.constant 0 : i32
    %177 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_82) : (!llvm.ptr, i32) -> i32
    %178 = arith.extui %177 : i32 to i64
    %c65536_i64_83 = arith.constant 65536 : i64
    %179 = arith.muli %178, %c65536_i64_83 : i64
    %180 = arith.cmpi ult, %176, %179 : i64
    cf.cond_br %180, ^bb29, ^bb30
  ^bb28:  // pred: ^bb25
    %c1_i32_84 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_84) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // 2 preds: ^bb27, ^bb30
    %181 = llvm.getelementptr %14[%175] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %182 = llvm.load volatile %181 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_85 = arith.constant 0 : i64
    %183 = arith.extui %172 : i32 to i64
    %184 = arith.addi %183, %c0_i64_85 : i64
    %c8_i64_86 = arith.constant 8 : i64
    %185 = arith.addi %184, %c8_i64_86 : i64
    %c0_i32_87 = arith.constant 0 : i32
    %186 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_87) : (!llvm.ptr, i32) -> i32
    %187 = arith.extui %186 : i32 to i64
    %c65536_i64_88 = arith.constant 65536 : i64
    %188 = arith.muli %187, %c65536_i64_88 : i64
    %189 = arith.cmpi ult, %185, %188 : i64
    cf.cond_br %189, ^bb31, ^bb32
  ^bb30:  // pred: ^bb27
    %c1_i32_89 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_89) : (i32) -> ()
    cf.br ^bb29
  ^bb31:  // 2 preds: ^bb29, ^bb32
    %190 = llvm.getelementptr %14[%184] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %182, %190 {alignment = 1 : i64} : i64, !llvm.ptr
    %191 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_90 = arith.constant 8 : i32
    %192 = arith.addi %191, %c8_i32_90 : i32
    %c16_i32_91 = arith.constant 16 : i32
    %193 = arith.addi %192, %c16_i32_91 : i32
    llvm.store %193, %6 : i32, !llvm.ptr
    %194 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64_92 = arith.constant 0 : i64
    %195 = arith.extui %194 : i32 to i64
    %196 = arith.addi %195, %c0_i64_92 : i64
    %c8_i64_93 = arith.constant 8 : i64
    %197 = arith.addi %196, %c8_i64_93 : i64
    %c0_i32_94 = arith.constant 0 : i32
    %198 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_94) : (!llvm.ptr, i32) -> i32
    %199 = arith.extui %198 : i32 to i64
    %c65536_i64_95 = arith.constant 65536 : i64
    %200 = arith.muli %199, %c65536_i64_95 : i64
    %201 = arith.cmpi ult, %197, %200 : i64
    cf.cond_br %201, ^bb33, ^bb34
  ^bb32:  // pred: ^bb29
    %c1_i32_96 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_96) : (i32) -> ()
    cf.br ^bb31
  ^bb33:  // 2 preds: ^bb31, ^bb34
    %202 = llvm.getelementptr %14[%196] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %203 = llvm.load volatile %202 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_97 = arith.constant 0 : i64
    %204 = arith.extui %193 : i32 to i64
    %205 = arith.addi %204, %c0_i64_97 : i64
    %c8_i64_98 = arith.constant 8 : i64
    %206 = arith.addi %205, %c8_i64_98 : i64
    %c0_i32_99 = arith.constant 0 : i32
    %207 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_99) : (!llvm.ptr, i32) -> i32
    %208 = arith.extui %207 : i32 to i64
    %c65536_i64_100 = arith.constant 65536 : i64
    %209 = arith.muli %208, %c65536_i64_100 : i64
    %210 = arith.cmpi ult, %206, %209 : i64
    cf.cond_br %210, ^bb35, ^bb36
  ^bb34:  // pred: ^bb31
    %c1_i32_101 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_101) : (i32) -> ()
    cf.br ^bb33
  ^bb35:  // 2 preds: ^bb33, ^bb36
    %211 = llvm.getelementptr %14[%205] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %203, %211 {alignment = 1 : i64} : i64, !llvm.ptr
    %212 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_102 = arith.constant 8 : i32
    %213 = arith.addi %212, %c8_i32_102 : i32
    %c24_i32_103 = arith.constant 24 : i32
    %214 = arith.addi %213, %c24_i32_103 : i32
    llvm.store %214, %5 : i32, !llvm.ptr
    %215 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_104 = arith.constant 0 : i64
    %216 = arith.extui %215 : i32 to i64
    %217 = arith.addi %216, %c0_i64_104 : i64
    %c8_i64_105 = arith.constant 8 : i64
    %218 = arith.addi %217, %c8_i64_105 : i64
    %c0_i32_106 = arith.constant 0 : i32
    %219 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_106) : (!llvm.ptr, i32) -> i32
    %220 = arith.extui %219 : i32 to i64
    %c65536_i64_107 = arith.constant 65536 : i64
    %221 = arith.muli %220, %c65536_i64_107 : i64
    %222 = arith.cmpi ult, %218, %221 : i64
    cf.cond_br %222, ^bb37, ^bb38
  ^bb36:  // pred: ^bb33
    %c1_i32_108 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_108) : (i32) -> ()
    cf.br ^bb35
  ^bb37:  // 2 preds: ^bb35, ^bb38
    %223 = llvm.getelementptr %14[%217] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %224 = llvm.load volatile %223 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_109 = arith.constant 0 : i64
    %225 = arith.extui %214 : i32 to i64
    %226 = arith.addi %225, %c0_i64_109 : i64
    %c8_i64_110 = arith.constant 8 : i64
    %227 = arith.addi %226, %c8_i64_110 : i64
    %c0_i32_111 = arith.constant 0 : i32
    %228 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_111) : (!llvm.ptr, i32) -> i32
    %229 = arith.extui %228 : i32 to i64
    %c65536_i64_112 = arith.constant 65536 : i64
    %230 = arith.muli %229, %c65536_i64_112 : i64
    %231 = arith.cmpi ult, %227, %230 : i64
    cf.cond_br %231, ^bb39, ^bb40
  ^bb38:  // pred: ^bb35
    %c1_i32_113 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_113) : (i32) -> ()
    cf.br ^bb37
  ^bb39:  // 2 preds: ^bb37, ^bb40
    %232 = llvm.getelementptr %14[%226] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %224, %232 {alignment = 1 : i64} : i64, !llvm.ptr
    %233 = llvm.load %2 : !llvm.ptr -> i32
    %234 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i64_114 = arith.constant 40 : i64
    %235 = arith.extui %234 : i32 to i64
    %236 = arith.addi %235, %c40_i64_114 : i64
    %c8_i64_115 = arith.constant 8 : i64
    %237 = arith.addi %236, %c8_i64_115 : i64
    %c0_i32_116 = arith.constant 0 : i32
    %238 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_116) : (!llvm.ptr, i32) -> i32
    %239 = arith.extui %238 : i32 to i64
    %c65536_i64_117 = arith.constant 65536 : i64
    %240 = arith.muli %239, %c65536_i64_117 : i64
    %241 = arith.cmpi ult, %237, %240 : i64
    cf.cond_br %241, ^bb41, ^bb42
  ^bb40:  // pred: ^bb37
    %c1_i32_118 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_118) : (i32) -> ()
    cf.br ^bb39
  ^bb41:  // 2 preds: ^bb39, ^bb42
    %242 = llvm.getelementptr %14[%236] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %243 = llvm.load volatile %242 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c8_i64_119 = arith.constant 8 : i64
    %244 = arith.extui %233 : i32 to i64
    %245 = arith.addi %244, %c8_i64_119 : i64
    %c8_i64_120 = arith.constant 8 : i64
    %246 = arith.addi %245, %c8_i64_120 : i64
    %c0_i32_121 = arith.constant 0 : i32
    %247 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_121) : (!llvm.ptr, i32) -> i32
    %248 = arith.extui %247 : i32 to i64
    %c65536_i64_122 = arith.constant 65536 : i64
    %249 = arith.muli %248, %c65536_i64_122 : i64
    %250 = arith.cmpi ult, %246, %249 : i64
    cf.cond_br %250, ^bb43, ^bb44
  ^bb42:  // pred: ^bb39
    %c1_i32_123 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_123) : (i32) -> ()
    cf.br ^bb41
  ^bb43:  // 2 preds: ^bb41, ^bb44
    %251 = llvm.getelementptr %14[%245] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %243, %251 {alignment = 1 : i64} : i64, !llvm.ptr
    %252 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64_124 = arith.constant 8 : i64
    %253 = arith.extui %252 : i32 to i64
    %254 = arith.addi %253, %c8_i64_124 : i64
    %c4_i64_125 = arith.constant 4 : i64
    %255 = arith.addi %254, %c4_i64_125 : i64
    %c0_i32_126 = arith.constant 0 : i32
    %256 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_126) : (!llvm.ptr, i32) -> i32
    %257 = arith.extui %256 : i32 to i64
    %c65536_i64_127 = arith.constant 65536 : i64
    %258 = arith.muli %257, %c65536_i64_127 : i64
    %259 = arith.cmpi ult, %255, %258 : i64
    cf.cond_br %259, ^bb46, ^bb47
  ^bb44:  // pred: ^bb41
    %c1_i32_128 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_128) : (i32) -> ()
    cf.br ^bb43
  ^bb45:  // 2 preds: ^bb48, ^bb50
    %260 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_129 = arith.constant 4 : i64
    %261 = arith.extui %260 : i32 to i64
    %262 = arith.addi %261, %c4_i64_129 : i64
    %c4_i64_130 = arith.constant 4 : i64
    %263 = arith.addi %262, %c4_i64_130 : i64
    %c0_i32_131 = arith.constant 0 : i32
    %264 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_131) : (!llvm.ptr, i32) -> i32
    %265 = arith.extui %264 : i32 to i64
    %c65536_i64_132 = arith.constant 65536 : i64
    %266 = arith.muli %265, %c65536_i64_132 : i64
    %267 = arith.cmpi ult, %263, %266 : i64
    cf.cond_br %267, ^bb51, ^bb52
  ^bb46:  // 2 preds: ^bb43, ^bb47
    %268 = llvm.getelementptr %14[%254] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %269 = llvm.load volatile %268 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %269, %4 : i32, !llvm.ptr
    %270 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_133 = arith.constant 0 : i64
    %271 = arith.extui %270 : i32 to i64
    %272 = arith.addi %271, %c0_i64_133 : i64
    %c4_i64_134 = arith.constant 4 : i64
    %273 = arith.addi %272, %c4_i64_134 : i64
    %c0_i32_135 = arith.constant 0 : i32
    %274 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_135) : (!llvm.ptr, i32) -> i32
    %275 = arith.extui %274 : i32 to i64
    %c65536_i64_136 = arith.constant 65536 : i64
    %276 = arith.muli %275, %c65536_i64_136 : i64
    %277 = arith.cmpi ult, %273, %276 : i64
    cf.cond_br %277, ^bb48, ^bb49
  ^bb47:  // pred: ^bb43
    %c1_i32_137 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_137) : (i32) -> ()
    cf.br ^bb46
  ^bb48:  // 2 preds: ^bb46, ^bb49
    %278 = llvm.getelementptr %14[%272] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %279 = llvm.load volatile %278 {alignment = 1 : i64} : !llvm.ptr -> i32
    %280 = arith.cmpi eq, %269, %279 : i32
    %281 = arith.extui %280 : i1 to i32
    %c0_i32_138 = arith.constant 0 : i32
    %282 = arith.cmpi eq, %281, %c0_i32_138 : i32
    %283 = arith.extui %282 : i1 to i32
    %c0_i32_139 = arith.constant 0 : i32
    %284 = arith.cmpi ne, %283, %c0_i32_139 : i32
    cf.cond_br %284, ^bb45, ^bb50
  ^bb49:  // pred: ^bb46
    %c1_i32_140 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_140) : (i32) -> ()
    cf.br ^bb48
  ^bb50:  // pred: ^bb48
    %285 = llvm.load %1 : !llvm.ptr -> i32
    call @f88(%arg0, %285) : (!llvm.ptr, i32) -> ()
    cf.br ^bb45
  ^bb51:  // 2 preds: ^bb45, ^bb52
    %286 = llvm.getelementptr %14[%262] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %287 = llvm.load volatile %286 {alignment = 1 : i64} : !llvm.ptr -> i32
    %288 = llvm.load %4 : !llvm.ptr -> i32
    %c5_i32 = arith.constant 5 : i32
    %c31_i32_141 = arith.constant 31 : i32
    %289 = arith.cmpi ule, %c5_i32, %c31_i32_141 : i32
    %290 = scf.if %289 -> (i32) {
      %837 = arith.shli %288, %c5_i32 : i32
      scf.yield %837 : i32
    } else {
      %c0_i32_439 = arith.constant 0 : i32
      scf.yield %c0_i32_439 : i32
    }
    %291 = arith.addi %287, %290 : i32
    llvm.store %291, %3 : i32, !llvm.ptr
    %292 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_142 = arith.constant 8 : i64
    %293 = arith.extui %292 : i32 to i64
    %294 = arith.addi %293, %c8_i64_142 : i64
    %c8_i64_143 = arith.constant 8 : i64
    %295 = arith.addi %294, %c8_i64_143 : i64
    %c0_i32_144 = arith.constant 0 : i32
    %296 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_144) : (!llvm.ptr, i32) -> i32
    %297 = arith.extui %296 : i32 to i64
    %c65536_i64_145 = arith.constant 65536 : i64
    %298 = arith.muli %297, %c65536_i64_145 : i64
    %299 = arith.cmpi ult, %295, %298 : i64
    cf.cond_br %299, ^bb53, ^bb54
  ^bb52:  // pred: ^bb45
    %c1_i32_146 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_146) : (i32) -> ()
    cf.br ^bb51
  ^bb53:  // 2 preds: ^bb51, ^bb54
    %300 = llvm.getelementptr %14[%294] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %301 = llvm.load volatile %300 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_147 = arith.constant 0 : i64
    %302 = arith.extui %291 : i32 to i64
    %303 = arith.addi %302, %c0_i64_147 : i64
    %c8_i64_148 = arith.constant 8 : i64
    %304 = arith.addi %303, %c8_i64_148 : i64
    %c0_i32_149 = arith.constant 0 : i32
    %305 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_149) : (!llvm.ptr, i32) -> i32
    %306 = arith.extui %305 : i32 to i64
    %c65536_i64_150 = arith.constant 65536 : i64
    %307 = arith.muli %306, %c65536_i64_150 : i64
    %308 = arith.cmpi ult, %304, %307 : i64
    cf.cond_br %308, ^bb55, ^bb56
  ^bb54:  // pred: ^bb51
    %c1_i32_151 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_151) : (i32) -> ()
    cf.br ^bb53
  ^bb55:  // 2 preds: ^bb53, ^bb56
    %309 = llvm.getelementptr %14[%303] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %301, %309 {alignment = 1 : i64} : i64, !llvm.ptr
    %310 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32_152 = arith.constant 24 : i32
    %311 = arith.addi %310, %c24_i32_152 : i32
    %312 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64_153 = arith.constant 0 : i64
    %313 = arith.extui %312 : i32 to i64
    %314 = arith.addi %313, %c0_i64_153 : i64
    %c8_i64_154 = arith.constant 8 : i64
    %315 = arith.addi %314, %c8_i64_154 : i64
    %c0_i32_155 = arith.constant 0 : i32
    %316 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_155) : (!llvm.ptr, i32) -> i32
    %317 = arith.extui %316 : i32 to i64
    %c65536_i64_156 = arith.constant 65536 : i64
    %318 = arith.muli %317, %c65536_i64_156 : i64
    %319 = arith.cmpi ult, %315, %318 : i64
    cf.cond_br %319, ^bb57, ^bb58
  ^bb56:  // pred: ^bb53
    %c1_i32_157 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_157) : (i32) -> ()
    cf.br ^bb55
  ^bb57:  // 2 preds: ^bb55, ^bb58
    %320 = llvm.getelementptr %14[%314] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %321 = llvm.load volatile %320 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_158 = arith.constant 0 : i64
    %322 = arith.extui %311 : i32 to i64
    %323 = arith.addi %322, %c0_i64_158 : i64
    %c8_i64_159 = arith.constant 8 : i64
    %324 = arith.addi %323, %c8_i64_159 : i64
    %c0_i32_160 = arith.constant 0 : i32
    %325 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_160) : (!llvm.ptr, i32) -> i32
    %326 = arith.extui %325 : i32 to i64
    %c65536_i64_161 = arith.constant 65536 : i64
    %327 = arith.muli %326, %c65536_i64_161 : i64
    %328 = arith.cmpi ult, %324, %327 : i64
    cf.cond_br %328, ^bb59, ^bb60
  ^bb58:  // pred: ^bb55
    %c1_i32_162 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_162) : (i32) -> ()
    cf.br ^bb57
  ^bb59:  // 2 preds: ^bb57, ^bb60
    %329 = llvm.getelementptr %14[%323] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %321, %329 {alignment = 1 : i64} : i64, !llvm.ptr
    %330 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_163 = arith.constant 16 : i32
    %331 = arith.addi %330, %c16_i32_163 : i32
    %332 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_164 = arith.constant 0 : i64
    %333 = arith.extui %332 : i32 to i64
    %334 = arith.addi %333, %c0_i64_164 : i64
    %c8_i64_165 = arith.constant 8 : i64
    %335 = arith.addi %334, %c8_i64_165 : i64
    %c0_i32_166 = arith.constant 0 : i32
    %336 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_166) : (!llvm.ptr, i32) -> i32
    %337 = arith.extui %336 : i32 to i64
    %c65536_i64_167 = arith.constant 65536 : i64
    %338 = arith.muli %337, %c65536_i64_167 : i64
    %339 = arith.cmpi ult, %335, %338 : i64
    cf.cond_br %339, ^bb61, ^bb62
  ^bb60:  // pred: ^bb57
    %c1_i32_168 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_168) : (i32) -> ()
    cf.br ^bb59
  ^bb61:  // 2 preds: ^bb59, ^bb62
    %340 = llvm.getelementptr %14[%334] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %341 = llvm.load volatile %340 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_169 = arith.constant 0 : i64
    %342 = arith.extui %331 : i32 to i64
    %343 = arith.addi %342, %c0_i64_169 : i64
    %c8_i64_170 = arith.constant 8 : i64
    %344 = arith.addi %343, %c8_i64_170 : i64
    %c0_i32_171 = arith.constant 0 : i32
    %345 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_171) : (!llvm.ptr, i32) -> i32
    %346 = arith.extui %345 : i32 to i64
    %c65536_i64_172 = arith.constant 65536 : i64
    %347 = arith.muli %346, %c65536_i64_172 : i64
    %348 = arith.cmpi ult, %344, %347 : i64
    cf.cond_br %348, ^bb63, ^bb64
  ^bb62:  // pred: ^bb59
    %c1_i32_173 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_173) : (i32) -> ()
    cf.br ^bb61
  ^bb63:  // 2 preds: ^bb61, ^bb64
    %349 = llvm.getelementptr %14[%343] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %341, %349 {alignment = 1 : i64} : i64, !llvm.ptr
    %350 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_174 = arith.constant 8 : i32
    %351 = arith.addi %350, %c8_i32_174 : i32
    %352 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_175 = arith.constant 0 : i64
    %353 = arith.extui %352 : i32 to i64
    %354 = arith.addi %353, %c0_i64_175 : i64
    %c8_i64_176 = arith.constant 8 : i64
    %355 = arith.addi %354, %c8_i64_176 : i64
    %c0_i32_177 = arith.constant 0 : i32
    %356 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_177) : (!llvm.ptr, i32) -> i32
    %357 = arith.extui %356 : i32 to i64
    %c65536_i64_178 = arith.constant 65536 : i64
    %358 = arith.muli %357, %c65536_i64_178 : i64
    %359 = arith.cmpi ult, %355, %358 : i64
    cf.cond_br %359, ^bb65, ^bb66
  ^bb64:  // pred: ^bb61
    %c1_i32_179 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_179) : (i32) -> ()
    cf.br ^bb63
  ^bb65:  // 2 preds: ^bb63, ^bb66
    %360 = llvm.getelementptr %14[%354] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %361 = llvm.load volatile %360 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_180 = arith.constant 0 : i64
    %362 = arith.extui %351 : i32 to i64
    %363 = arith.addi %362, %c0_i64_180 : i64
    %c8_i64_181 = arith.constant 8 : i64
    %364 = arith.addi %363, %c8_i64_181 : i64
    %c0_i32_182 = arith.constant 0 : i32
    %365 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_182) : (!llvm.ptr, i32) -> i32
    %366 = arith.extui %365 : i32 to i64
    %c65536_i64_183 = arith.constant 65536 : i64
    %367 = arith.muli %366, %c65536_i64_183 : i64
    %368 = arith.cmpi ult, %364, %367 : i64
    cf.cond_br %368, ^bb67, ^bb68
  ^bb66:  // pred: ^bb63
    %c1_i32_184 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_184) : (i32) -> ()
    cf.br ^bb65
  ^bb67:  // 2 preds: ^bb65, ^bb68
    %369 = llvm.getelementptr %14[%363] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %361, %369 {alignment = 1 : i64} : i64, !llvm.ptr
    %370 = llvm.load %1 : !llvm.ptr -> i32
    %371 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i32_185 = arith.constant 1 : i32
    %372 = arith.addi %371, %c1_i32_185 : i32
    llvm.store %372, %4 : i32, !llvm.ptr
    %c8_i64_186 = arith.constant 8 : i64
    %373 = arith.extui %370 : i32 to i64
    %374 = arith.addi %373, %c8_i64_186 : i64
    %c4_i64_187 = arith.constant 4 : i64
    %375 = arith.addi %374, %c4_i64_187 : i64
    %c0_i32_188 = arith.constant 0 : i32
    %376 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_188) : (!llvm.ptr, i32) -> i32
    %377 = arith.extui %376 : i32 to i64
    %c65536_i64_189 = arith.constant 65536 : i64
    %378 = arith.muli %377, %c65536_i64_189 : i64
    %379 = arith.cmpi ult, %375, %378 : i64
    cf.cond_br %379, ^bb69, ^bb70
  ^bb68:  // pred: ^bb65
    %c1_i32_190 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_190) : (i32) -> ()
    cf.br ^bb67
  ^bb69:  // 2 preds: ^bb67, ^bb70
    %380 = llvm.getelementptr %14[%374] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %372, %380 {alignment = 1 : i64} : i32, !llvm.ptr
    %381 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_191 = arith.constant 4 : i64
    %382 = arith.extui %381 : i32 to i64
    %383 = arith.addi %382, %c4_i64_191 : i64
    %c4_i64_192 = arith.constant 4 : i64
    %384 = arith.addi %383, %c4_i64_192 : i64
    %c0_i32_193 = arith.constant 0 : i32
    %385 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_193) : (!llvm.ptr, i32) -> i32
    %386 = arith.extui %385 : i32 to i64
    %c65536_i64_194 = arith.constant 65536 : i64
    %387 = arith.muli %386, %c65536_i64_194 : i64
    %388 = arith.cmpi ult, %384, %387 : i64
    cf.cond_br %388, ^bb71, ^bb72
  ^bb70:  // pred: ^bb67
    %c1_i32_195 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_195) : (i32) -> ()
    cf.br ^bb69
  ^bb71:  // 2 preds: ^bb69, ^bb72
    %389 = llvm.getelementptr %14[%383] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %390 = llvm.load volatile %389 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %390, %3 : i32, !llvm.ptr
    %c31_i32_196 = arith.constant 31 : i32
    %391 = arith.addi %390, %c31_i32_196 : i32
    llvm.store %391, %5 : i32, !llvm.ptr
    %392 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64_197 = arith.constant 20 : i64
    %393 = arith.extui %392 : i32 to i64
    %394 = arith.addi %393, %c20_i64_197 : i64
    %c4_i64_198 = arith.constant 4 : i64
    %395 = arith.addi %394, %c4_i64_198 : i64
    %c0_i32_199 = arith.constant 0 : i32
    %396 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_199) : (!llvm.ptr, i32) -> i32
    %397 = arith.extui %396 : i32 to i64
    %c65536_i64_200 = arith.constant 65536 : i64
    %398 = arith.muli %397, %c65536_i64_200 : i64
    %399 = arith.cmpi ult, %395, %398 : i64
    cf.cond_br %399, ^bb74, ^bb75
  ^bb72:  // pred: ^bb69
    %c1_i32_201 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_201) : (i32) -> ()
    cf.br ^bb71
  ^bb73:  // 2 preds: ^bb74, ^bb83
    %400 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_202 = arith.constant 0 : i64
    %401 = arith.extui %400 : i32 to i64
    %402 = arith.addi %401, %c0_i64_202 : i64
    %c4_i64_203 = arith.constant 4 : i64
    %403 = arith.addi %402, %c4_i64_203 : i64
    %c0_i32_204 = arith.constant 0 : i32
    %404 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_204) : (!llvm.ptr, i32) -> i32
    %405 = arith.extui %404 : i32 to i64
    %c65536_i64_205 = arith.constant 65536 : i64
    %406 = arith.muli %405, %c65536_i64_205 : i64
    %407 = arith.cmpi ult, %403, %406 : i64
    cf.cond_br %407, ^bb85, ^bb86
  ^bb74:  // 2 preds: ^bb71, ^bb75
    %408 = llvm.getelementptr %14[%394] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %409 = llvm.load volatile %408 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %409, %6 : i32, !llvm.ptr
    %c0_i32_206 = arith.constant 0 : i32
    %410 = arith.cmpi eq, %409, %c0_i32_206 : i32
    %411 = arith.extui %410 : i1 to i32
    %c0_i32_207 = arith.constant 0 : i32
    %412 = arith.cmpi ne, %411, %c0_i32_207 : i32
    cf.cond_br %412, ^bb73, ^bb76
  ^bb75:  // pred: ^bb71
    %c1_i32_208 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_208) : (i32) -> ()
    cf.br ^bb74
  ^bb76:  // pred: ^bb74
    %413 = llvm.load %6 : !llvm.ptr -> i32
    %c2_i32_209 = arith.constant 2 : i32
    %c31_i32_210 = arith.constant 31 : i32
    %414 = arith.cmpi ule, %c2_i32_209, %c31_i32_210 : i32
    %415 = scf.if %414 -> (i32) {
      %837 = arith.shli %413, %c2_i32_209 : i32
      scf.yield %837 : i32
    } else {
      %c0_i32_439 = arith.constant 0 : i32
      scf.yield %c0_i32_439 : i32
    }
    %416 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i64_211 = arith.constant 16 : i64
    %417 = arith.extui %416 : i32 to i64
    %418 = arith.addi %417, %c16_i64_211 : i64
    %c4_i64_212 = arith.constant 4 : i64
    %419 = arith.addi %418, %c4_i64_212 : i64
    %c0_i32_213 = arith.constant 0 : i32
    %420 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_213) : (!llvm.ptr, i32) -> i32
    %421 = arith.extui %420 : i32 to i64
    %c65536_i64_214 = arith.constant 65536 : i64
    %422 = arith.muli %421, %c65536_i64_214 : i64
    %423 = arith.cmpi ult, %419, %422 : i64
    cf.cond_br %423, ^bb77, ^bb78
  ^bb77:  // 2 preds: ^bb76, ^bb78
    %424 = llvm.getelementptr %14[%418] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %425 = llvm.load volatile %424 {alignment = 1 : i64} : !llvm.ptr -> i32
    %426 = arith.addi %415, %425 : i32
    %c-4_i32 = arith.constant -4 : i32
    %427 = arith.addi %426, %c-4_i32 : i32
    llvm.store %427, %4 : i32, !llvm.ptr
    %428 = llvm.load %5 : !llvm.ptr -> i32
    %c-32_i32 = arith.constant -32 : i32
    %429 = arith.andi %428, %c-32_i32 : i32
    %430 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_215 = arith.constant 0 : i64
    %431 = arith.extui %430 : i32 to i64
    %432 = arith.addi %431, %c0_i64_215 : i64
    %c4_i64_216 = arith.constant 4 : i64
    %433 = arith.addi %432, %c4_i64_216 : i64
    %c0_i32_217 = arith.constant 0 : i32
    %434 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_217) : (!llvm.ptr, i32) -> i32
    %435 = arith.extui %434 : i32 to i64
    %c65536_i64_218 = arith.constant 65536 : i64
    %436 = arith.muli %435, %c65536_i64_218 : i64
    %437 = arith.cmpi ult, %433, %436 : i64
    cf.cond_br %437, ^bb79, ^bb80
  ^bb78:  // pred: ^bb76
    %c1_i32_219 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_219) : (i32) -> ()
    cf.br ^bb77
  ^bb79:  // 2 preds: ^bb77, ^bb80
    %438 = llvm.getelementptr %14[%432] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %439 = llvm.load volatile %438 {alignment = 1 : i64} : !llvm.ptr -> i32
    %440 = arith.addi %429, %439 : i32
    %c32_i32_220 = arith.constant 32 : i32
    %441 = arith.addi %440, %c32_i32_220 : i32
    %c0_i64_221 = arith.constant 0 : i64
    %442 = arith.extui %427 : i32 to i64
    %443 = arith.addi %442, %c0_i64_221 : i64
    %c4_i64_222 = arith.constant 4 : i64
    %444 = arith.addi %443, %c4_i64_222 : i64
    %c0_i32_223 = arith.constant 0 : i32
    %445 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_223) : (!llvm.ptr, i32) -> i32
    %446 = arith.extui %445 : i32 to i64
    %c65536_i64_224 = arith.constant 65536 : i64
    %447 = arith.muli %446, %c65536_i64_224 : i64
    %448 = arith.cmpi ult, %444, %447 : i64
    cf.cond_br %448, ^bb81, ^bb82
  ^bb80:  // pred: ^bb77
    %c1_i32_225 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_225) : (i32) -> ()
    cf.br ^bb79
  ^bb81:  // 2 preds: ^bb79, ^bb82
    %449 = llvm.getelementptr %14[%443] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %441, %449 {alignment = 1 : i64} : i32, !llvm.ptr
    %450 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64_226 = arith.constant 8 : i64
    %451 = arith.extui %450 : i32 to i64
    %452 = arith.addi %451, %c8_i64_226 : i64
    %c4_i64_227 = arith.constant 4 : i64
    %453 = arith.addi %452, %c4_i64_227 : i64
    %c0_i32_228 = arith.constant 0 : i32
    %454 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_228) : (!llvm.ptr, i32) -> i32
    %455 = arith.extui %454 : i32 to i64
    %c65536_i64_229 = arith.constant 65536 : i64
    %456 = arith.muli %455, %c65536_i64_229 : i64
    %457 = arith.cmpi ult, %453, %456 : i64
    cf.cond_br %457, ^bb83, ^bb84
  ^bb82:  // pred: ^bb79
    %c1_i32_230 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_230) : (i32) -> ()
    cf.br ^bb81
  ^bb83:  // 2 preds: ^bb81, ^bb84
    %458 = llvm.getelementptr %14[%452] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %459 = llvm.load volatile %458 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %459, %4 : i32, !llvm.ptr
    cf.br ^bb73
  ^bb84:  // pred: ^bb81
    %c1_i32_231 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_231) : (i32) -> ()
    cf.br ^bb83
  ^bb85:  // 2 preds: ^bb73, ^bb86
    %460 = llvm.getelementptr %14[%402] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %461 = llvm.load volatile %460 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %461, %8 : i32, !llvm.ptr
    %462 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_232 = arith.constant 40 : i32
    %463 = arith.addi %462, %c40_i32_232 : i32
    %c24_i32_233 = arith.constant 24 : i32
    %464 = arith.addi %463, %c24_i32_233 : i32
    llvm.store %464, %0 : i32, !llvm.ptr
    %c0_i64_234 = arith.constant 0 : i64
    %c0_i64_235 = arith.constant 0 : i64
    %465 = arith.extui %464 : i32 to i64
    %466 = arith.addi %465, %c0_i64_235 : i64
    %c8_i64_236 = arith.constant 8 : i64
    %467 = arith.addi %466, %c8_i64_236 : i64
    %c0_i32_237 = arith.constant 0 : i32
    %468 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_237) : (!llvm.ptr, i32) -> i32
    %469 = arith.extui %468 : i32 to i64
    %c65536_i64_238 = arith.constant 65536 : i64
    %470 = arith.muli %469, %c65536_i64_238 : i64
    %471 = arith.cmpi ult, %467, %470 : i64
    cf.cond_br %471, ^bb87, ^bb88
  ^bb86:  // pred: ^bb73
    %c1_i32_239 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_239) : (i32) -> ()
    cf.br ^bb85
  ^bb87:  // 2 preds: ^bb85, ^bb88
    %472 = llvm.getelementptr %14[%466] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_234, %472 {alignment = 1 : i64} : i64, !llvm.ptr
    %473 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_240 = arith.constant 40 : i32
    %474 = arith.addi %473, %c40_i32_240 : i32
    %c16_i32_241 = arith.constant 16 : i32
    %475 = arith.addi %474, %c16_i32_241 : i32
    llvm.store %475, %6 : i32, !llvm.ptr
    %c0_i64_242 = arith.constant 0 : i64
    %c0_i64_243 = arith.constant 0 : i64
    %476 = arith.extui %475 : i32 to i64
    %477 = arith.addi %476, %c0_i64_243 : i64
    %c8_i64_244 = arith.constant 8 : i64
    %478 = arith.addi %477, %c8_i64_244 : i64
    %c0_i32_245 = arith.constant 0 : i32
    %479 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_245) : (!llvm.ptr, i32) -> i32
    %480 = arith.extui %479 : i32 to i64
    %c65536_i64_246 = arith.constant 65536 : i64
    %481 = arith.muli %480, %c65536_i64_246 : i64
    %482 = arith.cmpi ult, %478, %481 : i64
    cf.cond_br %482, ^bb89, ^bb90
  ^bb88:  // pred: ^bb85
    %c1_i32_247 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_247) : (i32) -> ()
    cf.br ^bb87
  ^bb89:  // 2 preds: ^bb87, ^bb90
    %483 = llvm.getelementptr %14[%477] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_242, %483 {alignment = 1 : i64} : i64, !llvm.ptr
    %484 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_248 = arith.constant 40 : i32
    %485 = arith.addi %484, %c40_i32_248 : i32
    %c8_i32_249 = arith.constant 8 : i32
    %486 = arith.addi %485, %c8_i32_249 : i32
    llvm.store %486, %7 : i32, !llvm.ptr
    %c0_i64_250 = arith.constant 0 : i64
    %c0_i64_251 = arith.constant 0 : i64
    %487 = arith.extui %486 : i32 to i64
    %488 = arith.addi %487, %c0_i64_251 : i64
    %c8_i64_252 = arith.constant 8 : i64
    %489 = arith.addi %488, %c8_i64_252 : i64
    %c0_i32_253 = arith.constant 0 : i32
    %490 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_253) : (!llvm.ptr, i32) -> i32
    %491 = arith.extui %490 : i32 to i64
    %c65536_i64_254 = arith.constant 65536 : i64
    %492 = arith.muli %491, %c65536_i64_254 : i64
    %493 = arith.cmpi ult, %489, %492 : i64
    cf.cond_br %493, ^bb91, ^bb92
  ^bb90:  // pred: ^bb87
    %c1_i32_255 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_255) : (i32) -> ()
    cf.br ^bb89
  ^bb91:  // 2 preds: ^bb89, ^bb92
    %494 = llvm.getelementptr %14[%488] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_250, %494 {alignment = 1 : i64} : i64, !llvm.ptr
    %495 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_256 = arith.constant 0 : i64
    %c40_i64_257 = arith.constant 40 : i64
    %496 = arith.extui %495 : i32 to i64
    %497 = arith.addi %496, %c40_i64_257 : i64
    %c8_i64_258 = arith.constant 8 : i64
    %498 = arith.addi %497, %c8_i64_258 : i64
    %c0_i32_259 = arith.constant 0 : i32
    %499 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_259) : (!llvm.ptr, i32) -> i32
    %500 = arith.extui %499 : i32 to i64
    %c65536_i64_260 = arith.constant 65536 : i64
    %501 = arith.muli %500, %c65536_i64_260 : i64
    %502 = arith.cmpi ult, %498, %501 : i64
    cf.cond_br %502, ^bb93, ^bb94
  ^bb92:  // pred: ^bb89
    %c1_i32_261 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_261) : (i32) -> ()
    cf.br ^bb91
  ^bb93:  // 2 preds: ^bb91, ^bb94
    %503 = llvm.getelementptr %14[%497] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_256, %503 {alignment = 1 : i64} : i64, !llvm.ptr
    %504 = llvm.load %2 : !llvm.ptr -> i32
    %505 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32_262 = arith.constant 24 : i32
    %c31_i32_263 = arith.constant 31 : i32
    %506 = arith.cmpi ule, %c24_i32_262, %c31_i32_263 : i32
    %507 = scf.if %506 -> (i32) {
      %837 = arith.shli %505, %c24_i32_262 : i32
      scf.yield %837 : i32
    } else {
      %c0_i32_439 = arith.constant 0 : i32
      scf.yield %c0_i32_439 : i32
    }
    %508 = llvm.load %3 : !llvm.ptr -> i32
    %c65280_i32_264 = arith.constant 65280 : i32
    %509 = arith.andi %508, %c65280_i32_264 : i32
    %c8_i32_265 = arith.constant 8 : i32
    %c31_i32_266 = arith.constant 31 : i32
    %510 = arith.cmpi ule, %c8_i32_265, %c31_i32_266 : i32
    %511 = scf.if %510 -> (i32) {
      %837 = arith.shli %509, %c8_i32_265 : i32
      scf.yield %837 : i32
    } else {
      %c0_i32_439 = arith.constant 0 : i32
      scf.yield %c0_i32_439 : i32
    }
    %512 = arith.ori %507, %511 : i32
    %513 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_267 = arith.constant 8 : i32
    %c31_i32_268 = arith.constant 31 : i32
    %514 = arith.cmpi ule, %c8_i32_267, %c31_i32_268 : i32
    %515 = scf.if %514 -> (i32) {
      %837 = arith.shrui %513, %c8_i32_267 : i32
      scf.yield %837 : i32
    } else {
      %c0_i32_439 = arith.constant 0 : i32
      scf.yield %c0_i32_439 : i32
    }
    %c65280_i32_269 = arith.constant 65280 : i32
    %516 = arith.andi %515, %c65280_i32_269 : i32
    %517 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32_270 = arith.constant 24 : i32
    %c31_i32_271 = arith.constant 31 : i32
    %518 = arith.cmpi ule, %c24_i32_270, %c31_i32_271 : i32
    %519 = scf.if %518 -> (i32) {
      %837 = arith.shrui %517, %c24_i32_270 : i32
      scf.yield %837 : i32
    } else {
      %c0_i32_439 = arith.constant 0 : i32
      scf.yield %c0_i32_439 : i32
    }
    %520 = arith.ori %516, %519 : i32
    %521 = arith.ori %512, %520 : i32
    %c76_i64_272 = arith.constant 76 : i64
    %522 = arith.extui %504 : i32 to i64
    %523 = arith.addi %522, %c76_i64_272 : i64
    %c4_i64_273 = arith.constant 4 : i64
    %524 = arith.addi %523, %c4_i64_273 : i64
    %c0_i32_274 = arith.constant 0 : i32
    %525 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_274) : (!llvm.ptr, i32) -> i32
    %526 = arith.extui %525 : i32 to i64
    %c65536_i64_275 = arith.constant 65536 : i64
    %527 = arith.muli %526, %c65536_i64_275 : i64
    %528 = arith.cmpi ult, %524, %527 : i64
    cf.cond_br %528, ^bb95, ^bb96
  ^bb94:  // pred: ^bb91
    %c1_i32_276 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_276) : (i32) -> ()
    cf.br ^bb93
  ^bb95:  // 2 preds: ^bb93, ^bb96
    %529 = llvm.getelementptr %14[%523] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %521, %529 {alignment = 1 : i64} : i32, !llvm.ptr
    %530 = llvm.load %2 : !llvm.ptr -> i32
    %c68_i32_277 = arith.constant 68 : i32
    %531 = arith.addi %530, %c68_i32_277 : i32
    %c4_i32_278 = arith.constant 4 : i32
    %532 = llvm.load %2 : !llvm.ptr -> i32
    %c76_i32_279 = arith.constant 76 : i32
    %533 = arith.addi %532, %c76_i32_279 : i32
    %c4_i32_280 = arith.constant 4 : i32
    %c1050820_i32_281 = arith.constant 1050820 : i32
    call @f114(%arg0, %531, %c4_i32_278, %533, %c4_i32_280, %c1050820_i32_281) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %534 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_282 = arith.constant 8 : i32
    %535 = arith.addi %534, %c8_i32_282 : i32
    %c8_i32_283 = arith.constant 8 : i32
    %536 = arith.addi %535, %c8_i32_283 : i32
    llvm.store %536, %9 : i32, !llvm.ptr
    %537 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_284 = arith.constant 0 : i64
    %538 = arith.extui %537 : i32 to i64
    %539 = arith.addi %538, %c0_i64_284 : i64
    %c8_i64_285 = arith.constant 8 : i64
    %540 = arith.addi %539, %c8_i64_285 : i64
    %c0_i32_286 = arith.constant 0 : i32
    %541 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_286) : (!llvm.ptr, i32) -> i32
    %542 = arith.extui %541 : i32 to i64
    %c65536_i64_287 = arith.constant 65536 : i64
    %543 = arith.muli %542, %c65536_i64_287 : i64
    %544 = arith.cmpi ult, %540, %543 : i64
    cf.cond_br %544, ^bb97, ^bb98
  ^bb96:  // pred: ^bb93
    %c1_i32_288 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_288) : (i32) -> ()
    cf.br ^bb95
  ^bb97:  // 2 preds: ^bb95, ^bb98
    %545 = llvm.getelementptr %14[%539] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %546 = llvm.load volatile %545 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_289 = arith.constant 0 : i64
    %547 = arith.extui %536 : i32 to i64
    %548 = arith.addi %547, %c0_i64_289 : i64
    %c8_i64_290 = arith.constant 8 : i64
    %549 = arith.addi %548, %c8_i64_290 : i64
    %c0_i32_291 = arith.constant 0 : i32
    %550 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_291) : (!llvm.ptr, i32) -> i32
    %551 = arith.extui %550 : i32 to i64
    %c65536_i64_292 = arith.constant 65536 : i64
    %552 = arith.muli %551, %c65536_i64_292 : i64
    %553 = arith.cmpi ult, %549, %552 : i64
    cf.cond_br %553, ^bb99, ^bb100
  ^bb98:  // pred: ^bb95
    %c1_i32_293 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_293) : (i32) -> ()
    cf.br ^bb97
  ^bb99:  // 2 preds: ^bb97, ^bb100
    %554 = llvm.getelementptr %14[%548] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %546, %554 {alignment = 1 : i64} : i64, !llvm.ptr
    %555 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_294 = arith.constant 8 : i32
    %556 = arith.addi %555, %c8_i32_294 : i32
    %c16_i32_295 = arith.constant 16 : i32
    %557 = arith.addi %556, %c16_i32_295 : i32
    llvm.store %557, %7 : i32, !llvm.ptr
    %558 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_296 = arith.constant 0 : i64
    %559 = arith.extui %558 : i32 to i64
    %560 = arith.addi %559, %c0_i64_296 : i64
    %c8_i64_297 = arith.constant 8 : i64
    %561 = arith.addi %560, %c8_i64_297 : i64
    %c0_i32_298 = arith.constant 0 : i32
    %562 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_298) : (!llvm.ptr, i32) -> i32
    %563 = arith.extui %562 : i32 to i64
    %c65536_i64_299 = arith.constant 65536 : i64
    %564 = arith.muli %563, %c65536_i64_299 : i64
    %565 = arith.cmpi ult, %561, %564 : i64
    cf.cond_br %565, ^bb101, ^bb102
  ^bb100:  // pred: ^bb97
    %c1_i32_300 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_300) : (i32) -> ()
    cf.br ^bb99
  ^bb101:  // 2 preds: ^bb99, ^bb102
    %566 = llvm.getelementptr %14[%560] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %567 = llvm.load volatile %566 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_301 = arith.constant 0 : i64
    %568 = arith.extui %557 : i32 to i64
    %569 = arith.addi %568, %c0_i64_301 : i64
    %c8_i64_302 = arith.constant 8 : i64
    %570 = arith.addi %569, %c8_i64_302 : i64
    %c0_i32_303 = arith.constant 0 : i32
    %571 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_303) : (!llvm.ptr, i32) -> i32
    %572 = arith.extui %571 : i32 to i64
    %c65536_i64_304 = arith.constant 65536 : i64
    %573 = arith.muli %572, %c65536_i64_304 : i64
    %574 = arith.cmpi ult, %570, %573 : i64
    cf.cond_br %574, ^bb103, ^bb104
  ^bb102:  // pred: ^bb99
    %c1_i32_305 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_305) : (i32) -> ()
    cf.br ^bb101
  ^bb103:  // 2 preds: ^bb101, ^bb104
    %575 = llvm.getelementptr %14[%569] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %567, %575 {alignment = 1 : i64} : i64, !llvm.ptr
    %576 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_306 = arith.constant 8 : i32
    %577 = arith.addi %576, %c8_i32_306 : i32
    %c24_i32_307 = arith.constant 24 : i32
    %578 = arith.addi %577, %c24_i32_307 : i32
    llvm.store %578, %6 : i32, !llvm.ptr
    %579 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_308 = arith.constant 0 : i64
    %580 = arith.extui %579 : i32 to i64
    %581 = arith.addi %580, %c0_i64_308 : i64
    %c8_i64_309 = arith.constant 8 : i64
    %582 = arith.addi %581, %c8_i64_309 : i64
    %c0_i32_310 = arith.constant 0 : i32
    %583 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_310) : (!llvm.ptr, i32) -> i32
    %584 = arith.extui %583 : i32 to i64
    %c65536_i64_311 = arith.constant 65536 : i64
    %585 = arith.muli %584, %c65536_i64_311 : i64
    %586 = arith.cmpi ult, %582, %585 : i64
    cf.cond_br %586, ^bb105, ^bb106
  ^bb104:  // pred: ^bb101
    %c1_i32_312 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_312) : (i32) -> ()
    cf.br ^bb103
  ^bb105:  // 2 preds: ^bb103, ^bb106
    %587 = llvm.getelementptr %14[%581] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %588 = llvm.load volatile %587 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_313 = arith.constant 0 : i64
    %589 = arith.extui %578 : i32 to i64
    %590 = arith.addi %589, %c0_i64_313 : i64
    %c8_i64_314 = arith.constant 8 : i64
    %591 = arith.addi %590, %c8_i64_314 : i64
    %c0_i32_315 = arith.constant 0 : i32
    %592 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_315) : (!llvm.ptr, i32) -> i32
    %593 = arith.extui %592 : i32 to i64
    %c65536_i64_316 = arith.constant 65536 : i64
    %594 = arith.muli %593, %c65536_i64_316 : i64
    %595 = arith.cmpi ult, %591, %594 : i64
    cf.cond_br %595, ^bb107, ^bb108
  ^bb106:  // pred: ^bb103
    %c1_i32_317 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_317) : (i32) -> ()
    cf.br ^bb105
  ^bb107:  // 2 preds: ^bb105, ^bb108
    %596 = llvm.getelementptr %14[%590] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %588, %596 {alignment = 1 : i64} : i64, !llvm.ptr
    %597 = llvm.load %2 : !llvm.ptr -> i32
    %598 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i64_318 = arith.constant 40 : i64
    %599 = arith.extui %598 : i32 to i64
    %600 = arith.addi %599, %c40_i64_318 : i64
    %c8_i64_319 = arith.constant 8 : i64
    %601 = arith.addi %600, %c8_i64_319 : i64
    %c0_i32_320 = arith.constant 0 : i32
    %602 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_320) : (!llvm.ptr, i32) -> i32
    %603 = arith.extui %602 : i32 to i64
    %c65536_i64_321 = arith.constant 65536 : i64
    %604 = arith.muli %603, %c65536_i64_321 : i64
    %605 = arith.cmpi ult, %601, %604 : i64
    cf.cond_br %605, ^bb109, ^bb110
  ^bb108:  // pred: ^bb105
    %c1_i32_322 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_322) : (i32) -> ()
    cf.br ^bb107
  ^bb109:  // 2 preds: ^bb107, ^bb110
    %606 = llvm.getelementptr %14[%600] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %607 = llvm.load volatile %606 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c8_i64_323 = arith.constant 8 : i64
    %608 = arith.extui %597 : i32 to i64
    %609 = arith.addi %608, %c8_i64_323 : i64
    %c8_i64_324 = arith.constant 8 : i64
    %610 = arith.addi %609, %c8_i64_324 : i64
    %c0_i32_325 = arith.constant 0 : i32
    %611 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_325) : (!llvm.ptr, i32) -> i32
    %612 = arith.extui %611 : i32 to i64
    %c65536_i64_326 = arith.constant 65536 : i64
    %613 = arith.muli %612, %c65536_i64_326 : i64
    %614 = arith.cmpi ult, %610, %613 : i64
    cf.cond_br %614, ^bb111, ^bb112
  ^bb110:  // pred: ^bb107
    %c1_i32_327 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_327) : (i32) -> ()
    cf.br ^bb109
  ^bb111:  // 2 preds: ^bb109, ^bb112
    %615 = llvm.getelementptr %14[%609] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %607, %615 {alignment = 1 : i64} : i64, !llvm.ptr
    %616 = llvm.load %4 : !llvm.ptr -> i32
    %617 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_328 = arith.constant 0 : i64
    %618 = arith.extui %617 : i32 to i64
    %619 = arith.addi %618, %c0_i64_328 : i64
    %c4_i64_329 = arith.constant 4 : i64
    %620 = arith.addi %619, %c4_i64_329 : i64
    %c0_i32_330 = arith.constant 0 : i32
    %621 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_330) : (!llvm.ptr, i32) -> i32
    %622 = arith.extui %621 : i32 to i64
    %c65536_i64_331 = arith.constant 65536 : i64
    %623 = arith.muli %622, %c65536_i64_331 : i64
    %624 = arith.cmpi ult, %620, %623 : i64
    cf.cond_br %624, ^bb114, ^bb115
  ^bb112:  // pred: ^bb109
    %c1_i32_332 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_332) : (i32) -> ()
    cf.br ^bb111
  ^bb113:  // 2 preds: ^bb114, ^bb116
    %625 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_333 = arith.constant 4 : i64
    %626 = arith.extui %625 : i32 to i64
    %627 = arith.addi %626, %c4_i64_333 : i64
    %c4_i64_334 = arith.constant 4 : i64
    %628 = arith.addi %627, %c4_i64_334 : i64
    %c0_i32_335 = arith.constant 0 : i32
    %629 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_335) : (!llvm.ptr, i32) -> i32
    %630 = arith.extui %629 : i32 to i64
    %c65536_i64_336 = arith.constant 65536 : i64
    %631 = arith.muli %630, %c65536_i64_336 : i64
    %632 = arith.cmpi ult, %628, %631 : i64
    cf.cond_br %632, ^bb117, ^bb118
  ^bb114:  // 2 preds: ^bb111, ^bb115
    %633 = llvm.getelementptr %14[%619] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %634 = llvm.load volatile %633 {alignment = 1 : i64} : !llvm.ptr -> i32
    %635 = arith.cmpi eq, %616, %634 : i32
    %636 = arith.extui %635 : i1 to i32
    %c0_i32_337 = arith.constant 0 : i32
    %637 = arith.cmpi eq, %636, %c0_i32_337 : i32
    %638 = arith.extui %637 : i1 to i32
    %c0_i32_338 = arith.constant 0 : i32
    %639 = arith.cmpi ne, %638, %c0_i32_338 : i32
    cf.cond_br %639, ^bb113, ^bb116
  ^bb115:  // pred: ^bb111
    %c1_i32_339 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_339) : (i32) -> ()
    cf.br ^bb114
  ^bb116:  // pred: ^bb114
    %640 = llvm.load %1 : !llvm.ptr -> i32
    call @f88(%arg0, %640) : (!llvm.ptr, i32) -> ()
    cf.br ^bb113
  ^bb117:  // 2 preds: ^bb113, ^bb118
    %641 = llvm.getelementptr %14[%627] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %642 = llvm.load volatile %641 {alignment = 1 : i64} : !llvm.ptr -> i32
    %643 = llvm.load %4 : !llvm.ptr -> i32
    %c5_i32_340 = arith.constant 5 : i32
    %c31_i32_341 = arith.constant 31 : i32
    %644 = arith.cmpi ule, %c5_i32_340, %c31_i32_341 : i32
    %645 = scf.if %644 -> (i32) {
      %837 = arith.shli %643, %c5_i32_340 : i32
      scf.yield %837 : i32
    } else {
      %c0_i32_439 = arith.constant 0 : i32
      scf.yield %c0_i32_439 : i32
    }
    %646 = arith.addi %642, %645 : i32
    llvm.store %646, %0 : i32, !llvm.ptr
    %647 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_342 = arith.constant 8 : i64
    %648 = arith.extui %647 : i32 to i64
    %649 = arith.addi %648, %c8_i64_342 : i64
    %c8_i64_343 = arith.constant 8 : i64
    %650 = arith.addi %649, %c8_i64_343 : i64
    %c0_i32_344 = arith.constant 0 : i32
    %651 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_344) : (!llvm.ptr, i32) -> i32
    %652 = arith.extui %651 : i32 to i64
    %c65536_i64_345 = arith.constant 65536 : i64
    %653 = arith.muli %652, %c65536_i64_345 : i64
    %654 = arith.cmpi ult, %650, %653 : i64
    cf.cond_br %654, ^bb119, ^bb120
  ^bb118:  // pred: ^bb113
    %c1_i32_346 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_346) : (i32) -> ()
    cf.br ^bb117
  ^bb119:  // 2 preds: ^bb117, ^bb120
    %655 = llvm.getelementptr %14[%649] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %656 = llvm.load volatile %655 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_347 = arith.constant 0 : i64
    %657 = arith.extui %646 : i32 to i64
    %658 = arith.addi %657, %c0_i64_347 : i64
    %c8_i64_348 = arith.constant 8 : i64
    %659 = arith.addi %658, %c8_i64_348 : i64
    %c0_i32_349 = arith.constant 0 : i32
    %660 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_349) : (!llvm.ptr, i32) -> i32
    %661 = arith.extui %660 : i32 to i64
    %c65536_i64_350 = arith.constant 65536 : i64
    %662 = arith.muli %661, %c65536_i64_350 : i64
    %663 = arith.cmpi ult, %659, %662 : i64
    cf.cond_br %663, ^bb121, ^bb122
  ^bb120:  // pred: ^bb117
    %c1_i32_351 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_351) : (i32) -> ()
    cf.br ^bb119
  ^bb121:  // 2 preds: ^bb119, ^bb122
    %664 = llvm.getelementptr %14[%658] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %656, %664 {alignment = 1 : i64} : i64, !llvm.ptr
    %665 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32_352 = arith.constant 24 : i32
    %666 = arith.addi %665, %c24_i32_352 : i32
    %667 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_353 = arith.constant 0 : i64
    %668 = arith.extui %667 : i32 to i64
    %669 = arith.addi %668, %c0_i64_353 : i64
    %c8_i64_354 = arith.constant 8 : i64
    %670 = arith.addi %669, %c8_i64_354 : i64
    %c0_i32_355 = arith.constant 0 : i32
    %671 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_355) : (!llvm.ptr, i32) -> i32
    %672 = arith.extui %671 : i32 to i64
    %c65536_i64_356 = arith.constant 65536 : i64
    %673 = arith.muli %672, %c65536_i64_356 : i64
    %674 = arith.cmpi ult, %670, %673 : i64
    cf.cond_br %674, ^bb123, ^bb124
  ^bb122:  // pred: ^bb119
    %c1_i32_357 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_357) : (i32) -> ()
    cf.br ^bb121
  ^bb123:  // 2 preds: ^bb121, ^bb124
    %675 = llvm.getelementptr %14[%669] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %676 = llvm.load volatile %675 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_358 = arith.constant 0 : i64
    %677 = arith.extui %666 : i32 to i64
    %678 = arith.addi %677, %c0_i64_358 : i64
    %c8_i64_359 = arith.constant 8 : i64
    %679 = arith.addi %678, %c8_i64_359 : i64
    %c0_i32_360 = arith.constant 0 : i32
    %680 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_360) : (!llvm.ptr, i32) -> i32
    %681 = arith.extui %680 : i32 to i64
    %c65536_i64_361 = arith.constant 65536 : i64
    %682 = arith.muli %681, %c65536_i64_361 : i64
    %683 = arith.cmpi ult, %679, %682 : i64
    cf.cond_br %683, ^bb125, ^bb126
  ^bb124:  // pred: ^bb121
    %c1_i32_362 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_362) : (i32) -> ()
    cf.br ^bb123
  ^bb125:  // 2 preds: ^bb123, ^bb126
    %684 = llvm.getelementptr %14[%678] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %676, %684 {alignment = 1 : i64} : i64, !llvm.ptr
    %685 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_363 = arith.constant 16 : i32
    %686 = arith.addi %685, %c16_i32_363 : i32
    %687 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_364 = arith.constant 0 : i64
    %688 = arith.extui %687 : i32 to i64
    %689 = arith.addi %688, %c0_i64_364 : i64
    %c8_i64_365 = arith.constant 8 : i64
    %690 = arith.addi %689, %c8_i64_365 : i64
    %c0_i32_366 = arith.constant 0 : i32
    %691 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_366) : (!llvm.ptr, i32) -> i32
    %692 = arith.extui %691 : i32 to i64
    %c65536_i64_367 = arith.constant 65536 : i64
    %693 = arith.muli %692, %c65536_i64_367 : i64
    %694 = arith.cmpi ult, %690, %693 : i64
    cf.cond_br %694, ^bb127, ^bb128
  ^bb126:  // pred: ^bb123
    %c1_i32_368 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_368) : (i32) -> ()
    cf.br ^bb125
  ^bb127:  // 2 preds: ^bb125, ^bb128
    %695 = llvm.getelementptr %14[%689] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %696 = llvm.load volatile %695 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_369 = arith.constant 0 : i64
    %697 = arith.extui %686 : i32 to i64
    %698 = arith.addi %697, %c0_i64_369 : i64
    %c8_i64_370 = arith.constant 8 : i64
    %699 = arith.addi %698, %c8_i64_370 : i64
    %c0_i32_371 = arith.constant 0 : i32
    %700 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_371) : (!llvm.ptr, i32) -> i32
    %701 = arith.extui %700 : i32 to i64
    %c65536_i64_372 = arith.constant 65536 : i64
    %702 = arith.muli %701, %c65536_i64_372 : i64
    %703 = arith.cmpi ult, %699, %702 : i64
    cf.cond_br %703, ^bb129, ^bb130
  ^bb128:  // pred: ^bb125
    %c1_i32_373 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_373) : (i32) -> ()
    cf.br ^bb127
  ^bb129:  // 2 preds: ^bb127, ^bb130
    %704 = llvm.getelementptr %14[%698] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %696, %704 {alignment = 1 : i64} : i64, !llvm.ptr
    %705 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_374 = arith.constant 8 : i32
    %706 = arith.addi %705, %c8_i32_374 : i32
    %707 = llvm.load %9 : !llvm.ptr -> i32
    %c0_i64_375 = arith.constant 0 : i64
    %708 = arith.extui %707 : i32 to i64
    %709 = arith.addi %708, %c0_i64_375 : i64
    %c8_i64_376 = arith.constant 8 : i64
    %710 = arith.addi %709, %c8_i64_376 : i64
    %c0_i32_377 = arith.constant 0 : i32
    %711 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_377) : (!llvm.ptr, i32) -> i32
    %712 = arith.extui %711 : i32 to i64
    %c65536_i64_378 = arith.constant 65536 : i64
    %713 = arith.muli %712, %c65536_i64_378 : i64
    %714 = arith.cmpi ult, %710, %713 : i64
    cf.cond_br %714, ^bb131, ^bb132
  ^bb130:  // pred: ^bb127
    %c1_i32_379 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_379) : (i32) -> ()
    cf.br ^bb129
  ^bb131:  // 2 preds: ^bb129, ^bb132
    %715 = llvm.getelementptr %14[%709] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %716 = llvm.load volatile %715 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_380 = arith.constant 0 : i64
    %717 = arith.extui %706 : i32 to i64
    %718 = arith.addi %717, %c0_i64_380 : i64
    %c8_i64_381 = arith.constant 8 : i64
    %719 = arith.addi %718, %c8_i64_381 : i64
    %c0_i32_382 = arith.constant 0 : i32
    %720 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_382) : (!llvm.ptr, i32) -> i32
    %721 = arith.extui %720 : i32 to i64
    %c65536_i64_383 = arith.constant 65536 : i64
    %722 = arith.muli %721, %c65536_i64_383 : i64
    %723 = arith.cmpi ult, %719, %722 : i64
    cf.cond_br %723, ^bb133, ^bb134
  ^bb132:  // pred: ^bb129
    %c1_i32_384 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_384) : (i32) -> ()
    cf.br ^bb131
  ^bb133:  // 2 preds: ^bb131, ^bb134
    %724 = llvm.getelementptr %14[%718] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %716, %724 {alignment = 1 : i64} : i64, !llvm.ptr
    %725 = llvm.load %1 : !llvm.ptr -> i32
    %726 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i32_385 = arith.constant 1 : i32
    %727 = arith.addi %726, %c1_i32_385 : i32
    llvm.store %727, %4 : i32, !llvm.ptr
    %c8_i64_386 = arith.constant 8 : i64
    %728 = arith.extui %725 : i32 to i64
    %729 = arith.addi %728, %c8_i64_386 : i64
    %c4_i64_387 = arith.constant 4 : i64
    %730 = arith.addi %729, %c4_i64_387 : i64
    %c0_i32_388 = arith.constant 0 : i32
    %731 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_388) : (!llvm.ptr, i32) -> i32
    %732 = arith.extui %731 : i32 to i64
    %c65536_i64_389 = arith.constant 65536 : i64
    %733 = arith.muli %732, %c65536_i64_389 : i64
    %734 = arith.cmpi ult, %730, %733 : i64
    cf.cond_br %734, ^bb135, ^bb136
  ^bb134:  // pred: ^bb131
    %c1_i32_390 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_390) : (i32) -> ()
    cf.br ^bb133
  ^bb135:  // 2 preds: ^bb133, ^bb136
    %735 = llvm.getelementptr %14[%729] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %727, %735 {alignment = 1 : i64} : i32, !llvm.ptr
    %736 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_391 = arith.constant 0 : i32
    %737 = arith.cmpi eq, %736, %c0_i32_391 : i32
    %738 = arith.extui %737 : i1 to i32
    %c0_i32_392 = arith.constant 0 : i32
    %739 = arith.cmpi ne, %738, %c0_i32_392 : i32
    cf.cond_br %739, ^bb137, ^bb138
  ^bb136:  // pred: ^bb133
    %c1_i32_393 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_393) : (i32) -> ()
    cf.br ^bb135
  ^bb137:  // 3 preds: ^bb135, ^bb147, ^bb149
    %740 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64_394 = arith.constant 20 : i64
    %741 = arith.extui %740 : i32 to i64
    %742 = arith.addi %741, %c20_i64_394 : i64
    %c4_i64_395 = arith.constant 4 : i64
    %743 = arith.addi %742, %c4_i64_395 : i64
    %c0_i32_396 = arith.constant 0 : i32
    %744 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_396) : (!llvm.ptr, i32) -> i32
    %745 = arith.extui %744 : i32 to i64
    %c65536_i64_397 = arith.constant 65536 : i64
    %746 = arith.muli %745, %c65536_i64_397 : i64
    %747 = arith.cmpi ult, %743, %746 : i64
    cf.cond_br %747, ^bb151, ^bb152
  ^bb138:  // pred: ^bb135
    %748 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_398 = arith.constant 0 : i64
    %749 = arith.extui %748 : i32 to i64
    %750 = arith.addi %749, %c0_i64_398 : i64
    %c4_i64_399 = arith.constant 4 : i64
    %751 = arith.addi %750, %c4_i64_399 : i64
    %c0_i32_400 = arith.constant 0 : i32
    %752 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_400) : (!llvm.ptr, i32) -> i32
    %753 = arith.extui %752 : i32 to i64
    %c65536_i64_401 = arith.constant 65536 : i64
    %754 = arith.muli %753, %c65536_i64_401 : i64
    %755 = arith.cmpi ult, %751, %754 : i64
    cf.cond_br %755, ^bb140, ^bb141
  ^bb139:  // 2 preds: ^bb140, ^bb143
    %756 = llvm.load %1 : !llvm.ptr -> i32
    %757 = llvm.load %4 : !llvm.ptr -> i32
    %758 = llvm.load %0 : !llvm.ptr -> i32
    %759 = arith.addi %757, %758 : i32
    %c8_i64_402 = arith.constant 8 : i64
    %760 = arith.extui %756 : i32 to i64
    %761 = arith.addi %760, %c8_i64_402 : i64
    %c4_i64_403 = arith.constant 4 : i64
    %762 = arith.addi %761, %c4_i64_403 : i64
    %c0_i32_404 = arith.constant 0 : i32
    %763 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_404) : (!llvm.ptr, i32) -> i32
    %764 = arith.extui %763 : i32 to i64
    %c65536_i64_405 = arith.constant 65536 : i64
    %765 = arith.muli %764, %c65536_i64_405 : i64
    %766 = arith.cmpi ult, %762, %765 : i64
    cf.cond_br %766, ^bb145, ^bb146
  ^bb140:  // 2 preds: ^bb138, ^bb141
    %767 = llvm.getelementptr %14[%750] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %768 = llvm.load volatile %767 {alignment = 1 : i64} : !llvm.ptr -> i32
    %769 = llvm.load %4 : !llvm.ptr -> i32
    %770 = arith.subi %768, %769 : i32
    %771 = llvm.load %5 : !llvm.ptr -> i32
    %c5_i32_406 = arith.constant 5 : i32
    %c31_i32_407 = arith.constant 31 : i32
    %772 = arith.cmpi ule, %c5_i32_406, %c31_i32_407 : i32
    %773 = scf.if %772 -> (i32) {
      %837 = arith.shrui %771, %c5_i32_406 : i32
      scf.yield %837 : i32
    } else {
      %c0_i32_439 = arith.constant 0 : i32
      scf.yield %c0_i32_439 : i32
    }
    llvm.store %773, %0 : i32, !llvm.ptr
    %774 = arith.cmpi uge, %770, %773 : i32
    %775 = arith.extui %774 : i1 to i32
    %c0_i32_408 = arith.constant 0 : i32
    %776 = arith.cmpi ne, %775, %c0_i32_408 : i32
    cf.cond_br %776, ^bb139, ^bb142
  ^bb141:  // pred: ^bb138
    %c1_i32_409 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_409) : (i32) -> ()
    cf.br ^bb140
  ^bb142:  // pred: ^bb140
    %777 = llvm.load %1 : !llvm.ptr -> i32
    %778 = llvm.load %4 : !llvm.ptr -> i32
    %779 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_410 = arith.constant 1 : i32
    %c32_i32_411 = arith.constant 32 : i32
    call @f104(%arg0, %777, %778, %779, %c1_i32_410, %c32_i32_411) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %780 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64_412 = arith.constant 8 : i64
    %781 = arith.extui %780 : i32 to i64
    %782 = arith.addi %781, %c8_i64_412 : i64
    %c4_i64_413 = arith.constant 4 : i64
    %783 = arith.addi %782, %c4_i64_413 : i64
    %c0_i32_414 = arith.constant 0 : i32
    %784 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_414) : (!llvm.ptr, i32) -> i32
    %785 = arith.extui %784 : i32 to i64
    %c65536_i64_415 = arith.constant 65536 : i64
    %786 = arith.muli %785, %c65536_i64_415 : i64
    %787 = arith.cmpi ult, %783, %786 : i64
    cf.cond_br %787, ^bb143, ^bb144
  ^bb143:  // 2 preds: ^bb142, ^bb144
    %788 = llvm.getelementptr %14[%782] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %789 = llvm.load volatile %788 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %789, %4 : i32, !llvm.ptr
    cf.br ^bb139
  ^bb144:  // pred: ^bb142
    %c1_i32_416 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_416) : (i32) -> ()
    cf.br ^bb143
  ^bb145:  // 2 preds: ^bb139, ^bb146
    %790 = llvm.getelementptr %14[%761] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %759, %790 {alignment = 1 : i64} : i32, !llvm.ptr
    %791 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_417 = arith.constant 4 : i64
    %792 = arith.extui %791 : i32 to i64
    %793 = arith.addi %792, %c4_i64_417 : i64
    %c4_i64_418 = arith.constant 4 : i64
    %794 = arith.addi %793, %c4_i64_418 : i64
    %c0_i32_419 = arith.constant 0 : i32
    %795 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_419) : (!llvm.ptr, i32) -> i32
    %796 = arith.extui %795 : i32 to i64
    %c65536_i64_420 = arith.constant 65536 : i64
    %797 = arith.muli %796, %c65536_i64_420 : i64
    %798 = arith.cmpi ult, %794, %797 : i64
    cf.cond_br %798, ^bb147, ^bb148
  ^bb146:  // pred: ^bb139
    %c1_i32_421 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_421) : (i32) -> ()
    cf.br ^bb145
  ^bb147:  // 2 preds: ^bb145, ^bb148
    %799 = llvm.getelementptr %14[%793] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %800 = llvm.load volatile %799 {alignment = 1 : i64} : !llvm.ptr -> i32
    %801 = llvm.load %4 : !llvm.ptr -> i32
    %c5_i32_422 = arith.constant 5 : i32
    %c31_i32_423 = arith.constant 31 : i32
    %802 = arith.cmpi ule, %c5_i32_422, %c31_i32_423 : i32
    %803 = scf.if %802 -> (i32) {
      %837 = arith.shli %801, %c5_i32_422 : i32
      scf.yield %837 : i32
    } else {
      %c0_i32_439 = arith.constant 0 : i32
      scf.yield %c0_i32_439 : i32
    }
    %804 = arith.addi %800, %803 : i32
    %805 = llvm.load %8 : !llvm.ptr -> i32
    %806 = llvm.load %3 : !llvm.ptr -> i32
    %807 = call @f161(%arg0, %804, %805, %806) : (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %807, %4 : i32, !llvm.ptr
    %808 = llvm.load %3 : !llvm.ptr -> i32
    %c31_i32_424 = arith.constant 31 : i32
    %809 = arith.andi %808, %c31_i32_424 : i32
    llvm.store %809, %0 : i32, !llvm.ptr
    %c0_i32_425 = arith.constant 0 : i32
    %810 = arith.cmpi eq, %809, %c0_i32_425 : i32
    %811 = arith.extui %810 : i1 to i32
    %c0_i32_426 = arith.constant 0 : i32
    %812 = arith.cmpi ne, %811, %c0_i32_426 : i32
    cf.cond_br %812, ^bb137, ^bb149
  ^bb148:  // pred: ^bb145
    %c1_i32_427 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_427) : (i32) -> ()
    cf.br ^bb147
  ^bb149:  // pred: ^bb147
    %813 = llvm.load %4 : !llvm.ptr -> i32
    %814 = llvm.load %3 : !llvm.ptr -> i32
    %815 = arith.addi %813, %814 : i32
    %c0_i32_428 = arith.constant 0 : i32
    %c32_i32_429 = arith.constant 32 : i32
    %816 = llvm.load %0 : !llvm.ptr -> i32
    %817 = arith.subi %c32_i32_429, %816 : i32
    %818 = call @f160(%arg0, %815, %c0_i32_428, %817) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb137
  ^bb150:  // 2 preds: ^bb151, ^bb154
    %819 = llvm.load %2 : !llvm.ptr -> i32
    %c80_i32_430 = arith.constant 80 : i32
    %820 = arith.addi %819, %c80_i32_430 : i32
    llvm.store %820, %11 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb151:  // 2 preds: ^bb137, ^bb152
    %821 = llvm.getelementptr %14[%742] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %822 = llvm.load volatile %821 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %822, %3 : i32, !llvm.ptr
    %c0_i32_431 = arith.constant 0 : i32
    %823 = arith.cmpi eq, %822, %c0_i32_431 : i32
    %824 = arith.extui %823 : i1 to i32
    %c0_i32_432 = arith.constant 0 : i32
    %825 = arith.cmpi ne, %824, %c0_i32_432 : i32
    cf.cond_br %825, ^bb150, ^bb153
  ^bb152:  // pred: ^bb137
    %c1_i32_433 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_433) : (i32) -> ()
    cf.br ^bb151
  ^bb153:  // pred: ^bb151
    %826 = llvm.load %1 : !llvm.ptr -> i32
    %827 = llvm.load %3 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %828 = arith.addi %827, %c-1_i32 : i32
    %c20_i64_434 = arith.constant 20 : i64
    %829 = arith.extui %826 : i32 to i64
    %830 = arith.addi %829, %c20_i64_434 : i64
    %c4_i64_435 = arith.constant 4 : i64
    %831 = arith.addi %830, %c4_i64_435 : i64
    %c0_i32_436 = arith.constant 0 : i32
    %832 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_436) : (!llvm.ptr, i32) -> i32
    %833 = arith.extui %832 : i32 to i64
    %c65536_i64_437 = arith.constant 65536 : i64
    %834 = arith.muli %833, %c65536_i64_437 : i64
    %835 = arith.cmpi ult, %831, %834 : i64
    cf.cond_br %835, ^bb154, ^bb155
  ^bb154:  // 2 preds: ^bb153, ^bb155
    %836 = llvm.getelementptr %14[%830] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %828, %836 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb150
  ^bb155:  // pred: ^bb153
    %c1_i32_438 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_438) : (i32) -> ()
    cf.br ^bb154
  }
  func.func @f97(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %7 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %8 = arith.extui %7 : i32 to i64
    %9 = arith.addi %8, %c20_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %10 = arith.addi %9, %c4_i64 : i64
    %c0_i32_3 = arith.constant 0 : i32
    %11 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_3) : (!llvm.ptr, i32) -> i32
    %12 = arith.extui %11 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %13 = arith.muli %12, %c65536_i64 : i64
    %14 = arith.cmpi ult, %10, %13 : i64
    cf.cond_br %14, ^bb4, ^bb5
  ^bb2:  // pred: ^bb41
    return
  ^bb3:  // 2 preds: ^bb6, ^bb8
    %15 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %16 = arith.extui %15 : i32 to i64
    %17 = arith.addi %16, %c16_i64 : i64
    %c4_i64_4 = arith.constant 4 : i64
    %18 = arith.addi %17, %c4_i64_4 : i64
    %c0_i32_5 = arith.constant 0 : i32
    %19 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_5) : (!llvm.ptr, i32) -> i32
    %20 = arith.extui %19 : i32 to i64
    %c65536_i64_6 = arith.constant 65536 : i64
    %21 = arith.muli %20, %c65536_i64_6 : i64
    %22 = arith.cmpi ult, %18, %21 : i64
    cf.cond_br %22, ^bb9, ^bb10
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %23 = llvm.getelementptr %6[%9] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %24 = llvm.load volatile %23 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %24, %2 : i32, !llvm.ptr
    %25 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %26 = arith.extui %25 : i32 to i64
    %27 = arith.addi %26, %c12_i64 : i64
    %c4_i64_7 = arith.constant 4 : i64
    %28 = arith.addi %27, %c4_i64_7 : i64
    %c0_i32_8 = arith.constant 0 : i32
    %29 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_8) : (!llvm.ptr, i32) -> i32
    %30 = arith.extui %29 : i32 to i64
    %c65536_i64_9 = arith.constant 65536 : i64
    %31 = arith.muli %30, %c65536_i64_9 : i64
    %32 = arith.cmpi ult, %28, %31 : i64
    cf.cond_br %32, ^bb6, ^bb7
  ^bb5:  // pred: ^bb1
    %c1_i32_10 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_10) : (i32) -> ()
    cf.br ^bb4
  ^bb6:  // 2 preds: ^bb4, ^bb7
    %33 = llvm.getelementptr %6[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %34 = llvm.load volatile %33 {alignment = 1 : i64} : !llvm.ptr -> i32
    %35 = arith.cmpi eq, %24, %34 : i32
    %36 = arith.extui %35 : i1 to i32
    %c0_i32_11 = arith.constant 0 : i32
    %37 = arith.cmpi eq, %36, %c0_i32_11 : i32
    %38 = arith.extui %37 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %39 = arith.cmpi ne, %38, %c0_i32_12 : i32
    cf.cond_br %39, ^bb3, ^bb8
  ^bb7:  // pred: ^bb4
    %c1_i32_13 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_13) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // pred: ^bb6
    %40 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %41 = arith.addi %40, %c12_i32 : i32
    call @f87(%arg0, %41) : (!llvm.ptr, i32) -> ()
    cf.br ^bb3
  ^bb9:  // 2 preds: ^bb3, ^bb10
    %42 = llvm.getelementptr %6[%17] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %43 = llvm.load volatile %42 {alignment = 1 : i64} : !llvm.ptr -> i32
    %44 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c31_i32 = arith.constant 31 : i32
    %45 = arith.cmpi ule, %c2_i32, %c31_i32 : i32
    %46 = scf.if %45 -> (i32) {
      %223 = arith.shli %44, %c2_i32 : i32
      scf.yield %223 : i32
    } else {
      %c0_i32_103 = arith.constant 0 : i32
      scf.yield %c0_i32_103 : i32
    }
    %47 = arith.addi %43, %46 : i32
    %c32_i32 = arith.constant 32 : i32
    %c0_i64 = arith.constant 0 : i64
    %48 = arith.extui %47 : i32 to i64
    %49 = arith.addi %48, %c0_i64 : i64
    %c4_i64_14 = arith.constant 4 : i64
    %50 = arith.addi %49, %c4_i64_14 : i64
    %c0_i32_15 = arith.constant 0 : i32
    %51 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_15) : (!llvm.ptr, i32) -> i32
    %52 = arith.extui %51 : i32 to i64
    %c65536_i64_16 = arith.constant 65536 : i64
    %53 = arith.muli %52, %c65536_i64_16 : i64
    %54 = arith.cmpi ult, %50, %53 : i64
    cf.cond_br %54, ^bb11, ^bb12
  ^bb10:  // pred: ^bb3
    %c1_i32_17 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_17) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %55 = llvm.getelementptr %6[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c32_i32, %55 {alignment = 1 : i64} : i32, !llvm.ptr
    %56 = llvm.load %1 : !llvm.ptr -> i32
    %57 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_18 = arith.constant 1 : i32
    %58 = arith.addi %57, %c1_i32_18 : i32
    %c20_i64_19 = arith.constant 20 : i64
    %59 = arith.extui %56 : i32 to i64
    %60 = arith.addi %59, %c20_i64_19 : i64
    %c4_i64_20 = arith.constant 4 : i64
    %61 = arith.addi %60, %c4_i64_20 : i64
    %c0_i32_21 = arith.constant 0 : i32
    %62 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_21) : (!llvm.ptr, i32) -> i32
    %63 = arith.extui %62 : i32 to i64
    %c65536_i64_22 = arith.constant 65536 : i64
    %64 = arith.muli %63, %c65536_i64_22 : i64
    %65 = arith.cmpi ult, %61, %64 : i64
    cf.cond_br %65, ^bb13, ^bb14
  ^bb12:  // pred: ^bb9
    %c1_i32_23 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_23) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %66 = llvm.getelementptr %6[%60] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %58, %66 {alignment = 1 : i64} : i32, !llvm.ptr
    %67 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %68 = arith.extui %67 : i32 to i64
    %69 = arith.addi %68, %c8_i64 : i64
    %c4_i64_24 = arith.constant 4 : i64
    %70 = arith.addi %69, %c4_i64_24 : i64
    %c0_i32_25 = arith.constant 0 : i32
    %71 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_25) : (!llvm.ptr, i32) -> i32
    %72 = arith.extui %71 : i32 to i64
    %c65536_i64_26 = arith.constant 65536 : i64
    %73 = arith.muli %72, %c65536_i64_26 : i64
    %74 = arith.cmpi ult, %70, %73 : i64
    cf.cond_br %74, ^bb16, ^bb17
  ^bb14:  // pred: ^bb11
    %c1_i32_27 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_27) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // 2 preds: ^bb18, ^bb20
    %75 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_28 = arith.constant 4 : i64
    %76 = arith.extui %75 : i32 to i64
    %77 = arith.addi %76, %c4_i64_28 : i64
    %c4_i64_29 = arith.constant 4 : i64
    %78 = arith.addi %77, %c4_i64_29 : i64
    %c0_i32_30 = arith.constant 0 : i32
    %79 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_30) : (!llvm.ptr, i32) -> i32
    %80 = arith.extui %79 : i32 to i64
    %c65536_i64_31 = arith.constant 65536 : i64
    %81 = arith.muli %80, %c65536_i64_31 : i64
    %82 = arith.cmpi ult, %78, %81 : i64
    cf.cond_br %82, ^bb21, ^bb22
  ^bb16:  // 2 preds: ^bb13, ^bb17
    %83 = llvm.getelementptr %6[%69] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %84 = llvm.load volatile %83 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %84, %3 : i32, !llvm.ptr
    %85 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_32 = arith.constant 0 : i64
    %86 = arith.extui %85 : i32 to i64
    %87 = arith.addi %86, %c0_i64_32 : i64
    %c4_i64_33 = arith.constant 4 : i64
    %88 = arith.addi %87, %c4_i64_33 : i64
    %c0_i32_34 = arith.constant 0 : i32
    %89 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_34) : (!llvm.ptr, i32) -> i32
    %90 = arith.extui %89 : i32 to i64
    %c65536_i64_35 = arith.constant 65536 : i64
    %91 = arith.muli %90, %c65536_i64_35 : i64
    %92 = arith.cmpi ult, %88, %91 : i64
    cf.cond_br %92, ^bb18, ^bb19
  ^bb17:  // pred: ^bb13
    %c1_i32_36 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_36) : (i32) -> ()
    cf.br ^bb16
  ^bb18:  // 2 preds: ^bb16, ^bb19
    %93 = llvm.getelementptr %6[%87] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %94 = llvm.load volatile %93 {alignment = 1 : i64} : !llvm.ptr -> i32
    %95 = arith.cmpi eq, %84, %94 : i32
    %96 = arith.extui %95 : i1 to i32
    %c0_i32_37 = arith.constant 0 : i32
    %97 = arith.cmpi eq, %96, %c0_i32_37 : i32
    %98 = arith.extui %97 : i1 to i32
    %c0_i32_38 = arith.constant 0 : i32
    %99 = arith.cmpi ne, %98, %c0_i32_38 : i32
    cf.cond_br %99, ^bb15, ^bb20
  ^bb19:  // pred: ^bb16
    %c1_i32_39 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_39) : (i32) -> ()
    cf.br ^bb18
  ^bb20:  // pred: ^bb18
    %100 = llvm.load %1 : !llvm.ptr -> i32
    call @f88(%arg0, %100) : (!llvm.ptr, i32) -> ()
    cf.br ^bb15
  ^bb21:  // 2 preds: ^bb15, ^bb22
    %101 = llvm.getelementptr %6[%77] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %102 = llvm.load volatile %101 {alignment = 1 : i64} : !llvm.ptr -> i32
    %103 = llvm.load %3 : !llvm.ptr -> i32
    %c5_i32 = arith.constant 5 : i32
    %c31_i32_40 = arith.constant 31 : i32
    %104 = arith.cmpi ule, %c5_i32, %c31_i32_40 : i32
    %105 = scf.if %104 -> (i32) {
      %223 = arith.shli %103, %c5_i32 : i32
      scf.yield %223 : i32
    } else {
      %c0_i32_103 = arith.constant 0 : i32
      scf.yield %c0_i32_103 : i32
    }
    %106 = arith.addi %102, %105 : i32
    llvm.store %106, %2 : i32, !llvm.ptr
    %107 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_41 = arith.constant 0 : i64
    %108 = arith.extui %107 : i32 to i64
    %109 = arith.addi %108, %c0_i64_41 : i64
    %c8_i64_42 = arith.constant 8 : i64
    %110 = arith.addi %109, %c8_i64_42 : i64
    %c0_i32_43 = arith.constant 0 : i32
    %111 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_43) : (!llvm.ptr, i32) -> i32
    %112 = arith.extui %111 : i32 to i64
    %c65536_i64_44 = arith.constant 65536 : i64
    %113 = arith.muli %112, %c65536_i64_44 : i64
    %114 = arith.cmpi ult, %110, %113 : i64
    cf.cond_br %114, ^bb23, ^bb24
  ^bb22:  // pred: ^bb15
    %c1_i32_45 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_45) : (i32) -> ()
    cf.br ^bb21
  ^bb23:  // 2 preds: ^bb21, ^bb24
    %115 = llvm.getelementptr %6[%109] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %116 = llvm.load volatile %115 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_46 = arith.constant 0 : i64
    %117 = arith.extui %106 : i32 to i64
    %118 = arith.addi %117, %c0_i64_46 : i64
    %c8_i64_47 = arith.constant 8 : i64
    %119 = arith.addi %118, %c8_i64_47 : i64
    %c0_i32_48 = arith.constant 0 : i32
    %120 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_48) : (!llvm.ptr, i32) -> i32
    %121 = arith.extui %120 : i32 to i64
    %c65536_i64_49 = arith.constant 65536 : i64
    %122 = arith.muli %121, %c65536_i64_49 : i64
    %123 = arith.cmpi ult, %119, %122 : i64
    cf.cond_br %123, ^bb25, ^bb26
  ^bb24:  // pred: ^bb21
    %c1_i32_50 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_50) : (i32) -> ()
    cf.br ^bb23
  ^bb25:  // 2 preds: ^bb23, ^bb26
    %124 = llvm.getelementptr %6[%118] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %116, %124 {alignment = 1 : i64} : i64, !llvm.ptr
    %125 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %126 = arith.addi %125, %c24_i32 : i32
    %127 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32_51 = arith.constant 24 : i32
    %128 = arith.addi %127, %c24_i32_51 : i32
    %c0_i64_52 = arith.constant 0 : i64
    %129 = arith.extui %128 : i32 to i64
    %130 = arith.addi %129, %c0_i64_52 : i64
    %c8_i64_53 = arith.constant 8 : i64
    %131 = arith.addi %130, %c8_i64_53 : i64
    %c0_i32_54 = arith.constant 0 : i32
    %132 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_54) : (!llvm.ptr, i32) -> i32
    %133 = arith.extui %132 : i32 to i64
    %c65536_i64_55 = arith.constant 65536 : i64
    %134 = arith.muli %133, %c65536_i64_55 : i64
    %135 = arith.cmpi ult, %131, %134 : i64
    cf.cond_br %135, ^bb27, ^bb28
  ^bb26:  // pred: ^bb23
    %c1_i32_56 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_56) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // 2 preds: ^bb25, ^bb28
    %136 = llvm.getelementptr %6[%130] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %137 = llvm.load volatile %136 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_57 = arith.constant 0 : i64
    %138 = arith.extui %126 : i32 to i64
    %139 = arith.addi %138, %c0_i64_57 : i64
    %c8_i64_58 = arith.constant 8 : i64
    %140 = arith.addi %139, %c8_i64_58 : i64
    %c0_i32_59 = arith.constant 0 : i32
    %141 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_59) : (!llvm.ptr, i32) -> i32
    %142 = arith.extui %141 : i32 to i64
    %c65536_i64_60 = arith.constant 65536 : i64
    %143 = arith.muli %142, %c65536_i64_60 : i64
    %144 = arith.cmpi ult, %140, %143 : i64
    cf.cond_br %144, ^bb29, ^bb30
  ^bb28:  // pred: ^bb25
    %c1_i32_61 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_61) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // 2 preds: ^bb27, ^bb30
    %145 = llvm.getelementptr %6[%139] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %137, %145 {alignment = 1 : i64} : i64, !llvm.ptr
    %146 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %147 = arith.addi %146, %c16_i32 : i32
    %148 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_62 = arith.constant 16 : i32
    %149 = arith.addi %148, %c16_i32_62 : i32
    %c0_i64_63 = arith.constant 0 : i64
    %150 = arith.extui %149 : i32 to i64
    %151 = arith.addi %150, %c0_i64_63 : i64
    %c8_i64_64 = arith.constant 8 : i64
    %152 = arith.addi %151, %c8_i64_64 : i64
    %c0_i32_65 = arith.constant 0 : i32
    %153 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_65) : (!llvm.ptr, i32) -> i32
    %154 = arith.extui %153 : i32 to i64
    %c65536_i64_66 = arith.constant 65536 : i64
    %155 = arith.muli %154, %c65536_i64_66 : i64
    %156 = arith.cmpi ult, %152, %155 : i64
    cf.cond_br %156, ^bb31, ^bb32
  ^bb30:  // pred: ^bb27
    %c1_i32_67 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_67) : (i32) -> ()
    cf.br ^bb29
  ^bb31:  // 2 preds: ^bb29, ^bb32
    %157 = llvm.getelementptr %6[%151] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %158 = llvm.load volatile %157 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_68 = arith.constant 0 : i64
    %159 = arith.extui %147 : i32 to i64
    %160 = arith.addi %159, %c0_i64_68 : i64
    %c8_i64_69 = arith.constant 8 : i64
    %161 = arith.addi %160, %c8_i64_69 : i64
    %c0_i32_70 = arith.constant 0 : i32
    %162 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_70) : (!llvm.ptr, i32) -> i32
    %163 = arith.extui %162 : i32 to i64
    %c65536_i64_71 = arith.constant 65536 : i64
    %164 = arith.muli %163, %c65536_i64_71 : i64
    %165 = arith.cmpi ult, %161, %164 : i64
    cf.cond_br %165, ^bb33, ^bb34
  ^bb32:  // pred: ^bb29
    %c1_i32_72 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_72) : (i32) -> ()
    cf.br ^bb31
  ^bb33:  // 2 preds: ^bb31, ^bb34
    %166 = llvm.getelementptr %6[%160] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %158, %166 {alignment = 1 : i64} : i64, !llvm.ptr
    %167 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %168 = arith.addi %167, %c8_i32 : i32
    %169 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_73 = arith.constant 8 : i32
    %170 = arith.addi %169, %c8_i32_73 : i32
    %c0_i64_74 = arith.constant 0 : i64
    %171 = arith.extui %170 : i32 to i64
    %172 = arith.addi %171, %c0_i64_74 : i64
    %c8_i64_75 = arith.constant 8 : i64
    %173 = arith.addi %172, %c8_i64_75 : i64
    %c0_i32_76 = arith.constant 0 : i32
    %174 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_76) : (!llvm.ptr, i32) -> i32
    %175 = arith.extui %174 : i32 to i64
    %c65536_i64_77 = arith.constant 65536 : i64
    %176 = arith.muli %175, %c65536_i64_77 : i64
    %177 = arith.cmpi ult, %173, %176 : i64
    cf.cond_br %177, ^bb35, ^bb36
  ^bb34:  // pred: ^bb31
    %c1_i32_78 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_78) : (i32) -> ()
    cf.br ^bb33
  ^bb35:  // 2 preds: ^bb33, ^bb36
    %178 = llvm.getelementptr %6[%172] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %179 = llvm.load volatile %178 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_79 = arith.constant 0 : i64
    %180 = arith.extui %168 : i32 to i64
    %181 = arith.addi %180, %c0_i64_79 : i64
    %c8_i64_80 = arith.constant 8 : i64
    %182 = arith.addi %181, %c8_i64_80 : i64
    %c0_i32_81 = arith.constant 0 : i32
    %183 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_81) : (!llvm.ptr, i32) -> i32
    %184 = arith.extui %183 : i32 to i64
    %c65536_i64_82 = arith.constant 65536 : i64
    %185 = arith.muli %184, %c65536_i64_82 : i64
    %186 = arith.cmpi ult, %182, %185 : i64
    cf.cond_br %186, ^bb37, ^bb38
  ^bb36:  // pred: ^bb33
    %c1_i32_83 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_83) : (i32) -> ()
    cf.br ^bb35
  ^bb37:  // 2 preds: ^bb35, ^bb38
    %187 = llvm.getelementptr %6[%181] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %179, %187 {alignment = 1 : i64} : i64, !llvm.ptr
    %188 = llvm.load %1 : !llvm.ptr -> i32
    %189 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_84 = arith.constant 1 : i32
    %190 = arith.addi %189, %c1_i32_84 : i32
    %c8_i64_85 = arith.constant 8 : i64
    %191 = arith.extui %188 : i32 to i64
    %192 = arith.addi %191, %c8_i64_85 : i64
    %c4_i64_86 = arith.constant 4 : i64
    %193 = arith.addi %192, %c4_i64_86 : i64
    %c0_i32_87 = arith.constant 0 : i32
    %194 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_87) : (!llvm.ptr, i32) -> i32
    %195 = arith.extui %194 : i32 to i64
    %c65536_i64_88 = arith.constant 65536 : i64
    %196 = arith.muli %195, %c65536_i64_88 : i64
    %197 = arith.cmpi ult, %193, %196 : i64
    cf.cond_br %197, ^bb39, ^bb40
  ^bb38:  // pred: ^bb35
    %c1_i32_89 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_89) : (i32) -> ()
    cf.br ^bb37
  ^bb39:  // 2 preds: ^bb37, ^bb40
    %198 = llvm.getelementptr %6[%192] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %190, %198 {alignment = 1 : i64} : i32, !llvm.ptr
    %199 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64_90 = arith.constant 20 : i64
    %200 = arith.extui %199 : i32 to i64
    %201 = arith.addi %200, %c20_i64_90 : i64
    %c4_i64_91 = arith.constant 4 : i64
    %202 = arith.addi %201, %c4_i64_91 : i64
    %c0_i32_92 = arith.constant 0 : i32
    %203 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_92) : (!llvm.ptr, i32) -> i32
    %204 = arith.extui %203 : i32 to i64
    %c65536_i64_93 = arith.constant 65536 : i64
    %205 = arith.muli %204, %c65536_i64_93 : i64
    %206 = arith.cmpi ult, %202, %205 : i64
    cf.cond_br %206, ^bb42, ^bb43
  ^bb40:  // pred: ^bb37
    %c1_i32_94 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_94) : (i32) -> ()
    cf.br ^bb39
  ^bb41:  // 2 preds: ^bb42, ^bb45
    cf.br ^bb2
  ^bb42:  // 2 preds: ^bb39, ^bb43
    %207 = llvm.getelementptr %6[%201] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %208 = llvm.load volatile %207 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %208, %0 : i32, !llvm.ptr
    %c0_i32_95 = arith.constant 0 : i32
    %209 = arith.cmpi eq, %208, %c0_i32_95 : i32
    %210 = arith.extui %209 : i1 to i32
    %c0_i32_96 = arith.constant 0 : i32
    %211 = arith.cmpi ne, %210, %c0_i32_96 : i32
    cf.cond_br %211, ^bb41, ^bb44
  ^bb43:  // pred: ^bb39
    %c1_i32_97 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_97) : (i32) -> ()
    cf.br ^bb42
  ^bb44:  // pred: ^bb42
    %212 = llvm.load %1 : !llvm.ptr -> i32
    %213 = llvm.load %0 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %214 = arith.addi %213, %c-1_i32 : i32
    %c20_i64_98 = arith.constant 20 : i64
    %215 = arith.extui %212 : i32 to i64
    %216 = arith.addi %215, %c20_i64_98 : i64
    %c4_i64_99 = arith.constant 4 : i64
    %217 = arith.addi %216, %c4_i64_99 : i64
    %c0_i32_100 = arith.constant 0 : i32
    %218 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_100) : (!llvm.ptr, i32) -> i32
    %219 = arith.extui %218 : i32 to i64
    %c65536_i64_101 = arith.constant 65536 : i64
    %220 = arith.muli %219, %c65536_i64_101 : i64
    %221 = arith.cmpi ult, %217, %220 : i64
    cf.cond_br %221, ^bb45, ^bb46
  ^bb45:  // 2 preds: ^bb44, ^bb46
    %222 = llvm.getelementptr %6[%216] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %214, %222 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb41
  ^bb46:  // pred: ^bb44
    %c1_i32_102 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_102) : (i32) -> ()
    cf.br ^bb45
  }
  func.func @f98(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32_0 = arith.constant 1 : i32
    cf.br ^bb2(%c1_i32_0 : i32)
  ^bb2(%1: i32):  // pred: ^bb1
    return %1 : i32
  }
  func.func @f99(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %4 : i64, !llvm.ptr
    %5 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %7[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %10 = llvm.load %6 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %11 = arith.subi %10, %c32_i32 : i32
    llvm.store %11, %2 : i32, !llvm.ptr
    %c24_i32 = arith.constant 24 : i32
    %12 = arith.addi %11, %c24_i32 : i32
    %c0_i64_4 = arith.constant 0 : i64
    %c0_i64_5 = arith.constant 0 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c0_i64_5 : i64
    %c8_i64 = arith.constant 8 : i64
    %15 = arith.addi %14, %c8_i64 : i64
    %c0_i32_6 = arith.constant 0 : i32
    %16 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_6) : (!llvm.ptr, i32) -> i32
    %17 = arith.extui %16 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %18 = arith.muli %17, %c65536_i64 : i64
    %19 = arith.cmpi ult, %15, %18 : i64
    cf.cond_br %19, ^bb3, ^bb4
  ^bb2:  // pred: ^bb32
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %20 = llvm.getelementptr %9[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_4, %20 {alignment = 1 : i64} : i64, !llvm.ptr
    %21 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %22 = arith.addi %21, %c16_i32 : i32
    %c0_i64_7 = arith.constant 0 : i64
    %c0_i64_8 = arith.constant 0 : i64
    %23 = arith.extui %22 : i32 to i64
    %24 = arith.addi %23, %c0_i64_8 : i64
    %c8_i64_9 = arith.constant 8 : i64
    %25 = arith.addi %24, %c8_i64_9 : i64
    %c0_i32_10 = arith.constant 0 : i32
    %26 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_10) : (!llvm.ptr, i32) -> i32
    %27 = arith.extui %26 : i32 to i64
    %c65536_i64_11 = arith.constant 65536 : i64
    %28 = arith.muli %27, %c65536_i64_11 : i64
    %29 = arith.cmpi ult, %25, %28 : i64
    cf.cond_br %29, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c1_i32_12 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_12) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %30 = llvm.getelementptr %9[%24] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_7, %30 {alignment = 1 : i64} : i64, !llvm.ptr
    %31 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %32 = arith.addi %31, %c8_i32 : i32
    %c0_i64_13 = arith.constant 0 : i64
    %c0_i64_14 = arith.constant 0 : i64
    %33 = arith.extui %32 : i32 to i64
    %34 = arith.addi %33, %c0_i64_14 : i64
    %c8_i64_15 = arith.constant 8 : i64
    %35 = arith.addi %34, %c8_i64_15 : i64
    %c0_i32_16 = arith.constant 0 : i32
    %36 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_16) : (!llvm.ptr, i32) -> i32
    %37 = arith.extui %36 : i32 to i64
    %c65536_i64_17 = arith.constant 65536 : i64
    %38 = arith.muli %37, %c65536_i64_17 : i64
    %39 = arith.cmpi ult, %35, %38 : i64
    cf.cond_br %39, ^bb7, ^bb8
  ^bb6:  // pred: ^bb3
    %c1_i32_18 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_18) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %40 = llvm.getelementptr %9[%34] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_13, %40 {alignment = 1 : i64} : i64, !llvm.ptr
    %41 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_19 = arith.constant 0 : i64
    %c0_i64_20 = arith.constant 0 : i64
    %42 = arith.extui %41 : i32 to i64
    %43 = arith.addi %42, %c0_i64_20 : i64
    %c8_i64_21 = arith.constant 8 : i64
    %44 = arith.addi %43, %c8_i64_21 : i64
    %c0_i32_22 = arith.constant 0 : i32
    %45 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_22) : (!llvm.ptr, i32) -> i32
    %46 = arith.extui %45 : i32 to i64
    %c65536_i64_23 = arith.constant 65536 : i64
    %47 = arith.muli %46, %c65536_i64_23 : i64
    %48 = arith.cmpi ult, %44, %47 : i64
    cf.cond_br %48, ^bb9, ^bb10
  ^bb8:  // pred: ^bb5
    %c1_i32_24 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_24) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %49 = llvm.getelementptr %9[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_19, %49 {alignment = 1 : i64} : i64, !llvm.ptr
    %50 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i32_25 = arith.constant 24 : i32
    %51 = arith.addi %50, %c24_i32_25 : i32
    llvm.store %51, %1 : i32, !llvm.ptr
    %c0_i32_26 = arith.constant 0 : i32
    llvm.store %c0_i32_26, %3 : i32, !llvm.ptr
    cf.br ^bb12
  ^bb10:  // pred: ^bb7
    %c1_i32_27 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_27) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // pred: ^bb17
    %52 = llvm.load %0 : !llvm.ptr -> i32
    %53 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_28 = arith.constant 0 : i64
    %54 = arith.extui %53 : i32 to i64
    %55 = arith.addi %54, %c0_i64_28 : i64
    %c8_i64_29 = arith.constant 8 : i64
    %56 = arith.addi %55, %c8_i64_29 : i64
    %c0_i32_30 = arith.constant 0 : i32
    %57 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_30) : (!llvm.ptr, i32) -> i32
    %58 = arith.extui %57 : i32 to i64
    %c65536_i64_31 = arith.constant 65536 : i64
    %59 = arith.muli %58, %c65536_i64_31 : i64
    %60 = arith.cmpi ult, %56, %59 : i64
    cf.cond_br %60, ^bb18, ^bb19
  ^bb12:  // 2 preds: ^bb9, ^bb15
    %61 = llvm.load %2 : !llvm.ptr -> i32
    %62 = llvm.load %3 : !llvm.ptr -> i32
    %63 = arith.addi %61, %62 : i32
    %64 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_32 = arith.constant 0 : i64
    %65 = arith.extui %64 : i32 to i64
    %66 = arith.addi %65, %c0_i64_32 : i64
    %c8_i64_33 = arith.constant 8 : i64
    %67 = arith.addi %66, %c8_i64_33 : i64
    %c0_i32_34 = arith.constant 0 : i32
    %68 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_34) : (!llvm.ptr, i32) -> i32
    %69 = arith.extui %68 : i32 to i64
    %c65536_i64_35 = arith.constant 65536 : i64
    %70 = arith.muli %69, %c65536_i64_35 : i64
    %71 = arith.cmpi ult, %67, %70 : i64
    cf.cond_br %71, ^bb13, ^bb14
  ^bb13:  // 2 preds: ^bb12, ^bb14
    %72 = llvm.getelementptr %9[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %73 = llvm.load volatile %72 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %73, %4 : i64, !llvm.ptr
    %c56_i64 = arith.constant 56 : i64
    %c63_i64 = arith.constant 63 : i64
    %74 = arith.cmpi ule, %c56_i64, %c63_i64 : i64
    %75 = scf.if %74 -> (i64) {
      %200 = arith.shli %73, %c56_i64 : i64
      scf.yield %200 : i64
    } else {
      %c0_i64_103 = arith.constant 0 : i64
      scf.yield %c0_i64_103 : i64
    }
    %76 = llvm.load %4 : !llvm.ptr -> i64
    %c65280_i64 = arith.constant 65280 : i64
    %77 = arith.andi %76, %c65280_i64 : i64
    %c40_i64 = arith.constant 40 : i64
    %c63_i64_36 = arith.constant 63 : i64
    %78 = arith.cmpi ule, %c40_i64, %c63_i64_36 : i64
    %79 = scf.if %78 -> (i64) {
      %200 = arith.shli %77, %c40_i64 : i64
      scf.yield %200 : i64
    } else {
      %c0_i64_103 = arith.constant 0 : i64
      scf.yield %c0_i64_103 : i64
    }
    %80 = arith.ori %75, %79 : i64
    %81 = llvm.load %4 : !llvm.ptr -> i64
    %c16711680_i64 = arith.constant 16711680 : i64
    %82 = arith.andi %81, %c16711680_i64 : i64
    %c24_i64 = arith.constant 24 : i64
    %c63_i64_37 = arith.constant 63 : i64
    %83 = arith.cmpi ule, %c24_i64, %c63_i64_37 : i64
    %84 = scf.if %83 -> (i64) {
      %200 = arith.shli %82, %c24_i64 : i64
      scf.yield %200 : i64
    } else {
      %c0_i64_103 = arith.constant 0 : i64
      scf.yield %c0_i64_103 : i64
    }
    %85 = llvm.load %4 : !llvm.ptr -> i64
    %c4278190080_i64 = arith.constant 4278190080 : i64
    %86 = arith.andi %85, %c4278190080_i64 : i64
    %c8_i64_38 = arith.constant 8 : i64
    %c63_i64_39 = arith.constant 63 : i64
    %87 = arith.cmpi ule, %c8_i64_38, %c63_i64_39 : i64
    %88 = scf.if %87 -> (i64) {
      %200 = arith.shli %86, %c8_i64_38 : i64
      scf.yield %200 : i64
    } else {
      %c0_i64_103 = arith.constant 0 : i64
      scf.yield %c0_i64_103 : i64
    }
    %89 = arith.ori %84, %88 : i64
    %90 = arith.ori %80, %89 : i64
    %91 = llvm.load %4 : !llvm.ptr -> i64
    %c8_i64_40 = arith.constant 8 : i64
    %c63_i64_41 = arith.constant 63 : i64
    %92 = arith.cmpi ule, %c8_i64_40, %c63_i64_41 : i64
    %93 = scf.if %92 -> (i64) {
      %200 = arith.shrui %91, %c8_i64_40 : i64
      scf.yield %200 : i64
    } else {
      %c0_i64_103 = arith.constant 0 : i64
      scf.yield %c0_i64_103 : i64
    }
    %c4278190080_i64_42 = arith.constant 4278190080 : i64
    %94 = arith.andi %93, %c4278190080_i64_42 : i64
    %95 = llvm.load %4 : !llvm.ptr -> i64
    %c24_i64_43 = arith.constant 24 : i64
    %c63_i64_44 = arith.constant 63 : i64
    %96 = arith.cmpi ule, %c24_i64_43, %c63_i64_44 : i64
    %97 = scf.if %96 -> (i64) {
      %200 = arith.shrui %95, %c24_i64_43 : i64
      scf.yield %200 : i64
    } else {
      %c0_i64_103 = arith.constant 0 : i64
      scf.yield %c0_i64_103 : i64
    }
    %c16711680_i64_45 = arith.constant 16711680 : i64
    %98 = arith.andi %97, %c16711680_i64_45 : i64
    %99 = arith.ori %94, %98 : i64
    %100 = llvm.load %4 : !llvm.ptr -> i64
    %c40_i64_46 = arith.constant 40 : i64
    %c63_i64_47 = arith.constant 63 : i64
    %101 = arith.cmpi ule, %c40_i64_46, %c63_i64_47 : i64
    %102 = scf.if %101 -> (i64) {
      %200 = arith.shrui %100, %c40_i64_46 : i64
      scf.yield %200 : i64
    } else {
      %c0_i64_103 = arith.constant 0 : i64
      scf.yield %c0_i64_103 : i64
    }
    %c65280_i64_48 = arith.constant 65280 : i64
    %103 = arith.andi %102, %c65280_i64_48 : i64
    %104 = llvm.load %4 : !llvm.ptr -> i64
    %c56_i64_49 = arith.constant 56 : i64
    %c63_i64_50 = arith.constant 63 : i64
    %105 = arith.cmpi ule, %c56_i64_49, %c63_i64_50 : i64
    %106 = scf.if %105 -> (i64) {
      %200 = arith.shrui %104, %c56_i64_49 : i64
      scf.yield %200 : i64
    } else {
      %c0_i64_103 = arith.constant 0 : i64
      scf.yield %c0_i64_103 : i64
    }
    %107 = arith.ori %103, %106 : i64
    %108 = arith.ori %99, %107 : i64
    %109 = arith.ori %90, %108 : i64
    %c0_i64_51 = arith.constant 0 : i64
    %110 = arith.extui %63 : i32 to i64
    %111 = arith.addi %110, %c0_i64_51 : i64
    %c8_i64_52 = arith.constant 8 : i64
    %112 = arith.addi %111, %c8_i64_52 : i64
    %c0_i32_53 = arith.constant 0 : i32
    %113 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_53) : (!llvm.ptr, i32) -> i32
    %114 = arith.extui %113 : i32 to i64
    %c65536_i64_54 = arith.constant 65536 : i64
    %115 = arith.muli %114, %c65536_i64_54 : i64
    %116 = arith.cmpi ult, %112, %115 : i64
    cf.cond_br %116, ^bb15, ^bb16
  ^bb14:  // pred: ^bb12
    %c1_i32_55 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_55) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // 2 preds: ^bb13, ^bb16
    %117 = llvm.getelementptr %9[%111] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %109, %117 {alignment = 1 : i64} : i64, !llvm.ptr
    %118 = llvm.load %1 : !llvm.ptr -> i32
    %c-8_i32 = arith.constant -8 : i32
    %119 = arith.addi %118, %c-8_i32 : i32
    llvm.store %119, %1 : i32, !llvm.ptr
    %120 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_56 = arith.constant 8 : i32
    %121 = arith.addi %120, %c8_i32_56 : i32
    llvm.store %121, %3 : i32, !llvm.ptr
    %c32_i32_57 = arith.constant 32 : i32
    %122 = arith.cmpi eq, %121, %c32_i32_57 : i32
    %123 = arith.extui %122 : i1 to i32
    %c0_i32_58 = arith.constant 0 : i32
    %124 = arith.cmpi eq, %123, %c0_i32_58 : i32
    %125 = arith.extui %124 : i1 to i32
    %c0_i32_59 = arith.constant 0 : i32
    %126 = arith.cmpi ne, %125, %c0_i32_59 : i32
    cf.cond_br %126, ^bb12, ^bb17
  ^bb16:  // pred: ^bb13
    %c1_i32_60 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_60) : (i32) -> ()
    cf.br ^bb15
  ^bb17:  // pred: ^bb15
    cf.br ^bb11
  ^bb18:  // 2 preds: ^bb11, ^bb19
    %127 = llvm.getelementptr %9[%55] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %128 = llvm.load volatile %127 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_61 = arith.constant 0 : i64
    %129 = arith.extui %52 : i32 to i64
    %130 = arith.addi %129, %c0_i64_61 : i64
    %c8_i64_62 = arith.constant 8 : i64
    %131 = arith.addi %130, %c8_i64_62 : i64
    %c0_i32_63 = arith.constant 0 : i32
    %132 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_63) : (!llvm.ptr, i32) -> i32
    %133 = arith.extui %132 : i32 to i64
    %c65536_i64_64 = arith.constant 65536 : i64
    %134 = arith.muli %133, %c65536_i64_64 : i64
    %135 = arith.cmpi ult, %131, %134 : i64
    cf.cond_br %135, ^bb20, ^bb21
  ^bb19:  // pred: ^bb11
    %c1_i32_65 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_65) : (i32) -> ()
    cf.br ^bb18
  ^bb20:  // 2 preds: ^bb18, ^bb21
    %136 = llvm.getelementptr %9[%130] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %128, %136 {alignment = 1 : i64} : i64, !llvm.ptr
    %137 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32_66 = arith.constant 24 : i32
    %138 = arith.addi %137, %c24_i32_66 : i32
    %139 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_67 = arith.constant 24 : i32
    %140 = arith.addi %139, %c24_i32_67 : i32
    %c0_i64_68 = arith.constant 0 : i64
    %141 = arith.extui %140 : i32 to i64
    %142 = arith.addi %141, %c0_i64_68 : i64
    %c8_i64_69 = arith.constant 8 : i64
    %143 = arith.addi %142, %c8_i64_69 : i64
    %c0_i32_70 = arith.constant 0 : i32
    %144 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_70) : (!llvm.ptr, i32) -> i32
    %145 = arith.extui %144 : i32 to i64
    %c65536_i64_71 = arith.constant 65536 : i64
    %146 = arith.muli %145, %c65536_i64_71 : i64
    %147 = arith.cmpi ult, %143, %146 : i64
    cf.cond_br %147, ^bb22, ^bb23
  ^bb21:  // pred: ^bb18
    %c1_i32_72 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_72) : (i32) -> ()
    cf.br ^bb20
  ^bb22:  // 2 preds: ^bb20, ^bb23
    %148 = llvm.getelementptr %9[%142] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %149 = llvm.load volatile %148 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_73 = arith.constant 0 : i64
    %150 = arith.extui %138 : i32 to i64
    %151 = arith.addi %150, %c0_i64_73 : i64
    %c8_i64_74 = arith.constant 8 : i64
    %152 = arith.addi %151, %c8_i64_74 : i64
    %c0_i32_75 = arith.constant 0 : i32
    %153 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_75) : (!llvm.ptr, i32) -> i32
    %154 = arith.extui %153 : i32 to i64
    %c65536_i64_76 = arith.constant 65536 : i64
    %155 = arith.muli %154, %c65536_i64_76 : i64
    %156 = arith.cmpi ult, %152, %155 : i64
    cf.cond_br %156, ^bb24, ^bb25
  ^bb23:  // pred: ^bb20
    %c1_i32_77 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_77) : (i32) -> ()
    cf.br ^bb22
  ^bb24:  // 2 preds: ^bb22, ^bb25
    %157 = llvm.getelementptr %9[%151] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %149, %157 {alignment = 1 : i64} : i64, !llvm.ptr
    %158 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_78 = arith.constant 16 : i32
    %159 = arith.addi %158, %c16_i32_78 : i32
    %160 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_79 = arith.constant 16 : i32
    %161 = arith.addi %160, %c16_i32_79 : i32
    %c0_i64_80 = arith.constant 0 : i64
    %162 = arith.extui %161 : i32 to i64
    %163 = arith.addi %162, %c0_i64_80 : i64
    %c8_i64_81 = arith.constant 8 : i64
    %164 = arith.addi %163, %c8_i64_81 : i64
    %c0_i32_82 = arith.constant 0 : i32
    %165 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_82) : (!llvm.ptr, i32) -> i32
    %166 = arith.extui %165 : i32 to i64
    %c65536_i64_83 = arith.constant 65536 : i64
    %167 = arith.muli %166, %c65536_i64_83 : i64
    %168 = arith.cmpi ult, %164, %167 : i64
    cf.cond_br %168, ^bb26, ^bb27
  ^bb25:  // pred: ^bb22
    %c1_i32_84 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_84) : (i32) -> ()
    cf.br ^bb24
  ^bb26:  // 2 preds: ^bb24, ^bb27
    %169 = llvm.getelementptr %9[%163] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %170 = llvm.load volatile %169 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_85 = arith.constant 0 : i64
    %171 = arith.extui %159 : i32 to i64
    %172 = arith.addi %171, %c0_i64_85 : i64
    %c8_i64_86 = arith.constant 8 : i64
    %173 = arith.addi %172, %c8_i64_86 : i64
    %c0_i32_87 = arith.constant 0 : i32
    %174 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_87) : (!llvm.ptr, i32) -> i32
    %175 = arith.extui %174 : i32 to i64
    %c65536_i64_88 = arith.constant 65536 : i64
    %176 = arith.muli %175, %c65536_i64_88 : i64
    %177 = arith.cmpi ult, %173, %176 : i64
    cf.cond_br %177, ^bb28, ^bb29
  ^bb27:  // pred: ^bb24
    %c1_i32_89 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_89) : (i32) -> ()
    cf.br ^bb26
  ^bb28:  // 2 preds: ^bb26, ^bb29
    %178 = llvm.getelementptr %9[%172] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %170, %178 {alignment = 1 : i64} : i64, !llvm.ptr
    %179 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_90 = arith.constant 8 : i32
    %180 = arith.addi %179, %c8_i32_90 : i32
    %181 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_91 = arith.constant 8 : i32
    %182 = arith.addi %181, %c8_i32_91 : i32
    %c0_i64_92 = arith.constant 0 : i64
    %183 = arith.extui %182 : i32 to i64
    %184 = arith.addi %183, %c0_i64_92 : i64
    %c8_i64_93 = arith.constant 8 : i64
    %185 = arith.addi %184, %c8_i64_93 : i64
    %c0_i32_94 = arith.constant 0 : i32
    %186 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_94) : (!llvm.ptr, i32) -> i32
    %187 = arith.extui %186 : i32 to i64
    %c65536_i64_95 = arith.constant 65536 : i64
    %188 = arith.muli %187, %c65536_i64_95 : i64
    %189 = arith.cmpi ult, %185, %188 : i64
    cf.cond_br %189, ^bb30, ^bb31
  ^bb29:  // pred: ^bb26
    %c1_i32_96 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_96) : (i32) -> ()
    cf.br ^bb28
  ^bb30:  // 2 preds: ^bb28, ^bb31
    %190 = llvm.getelementptr %9[%184] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %191 = llvm.load volatile %190 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_97 = arith.constant 0 : i64
    %192 = arith.extui %180 : i32 to i64
    %193 = arith.addi %192, %c0_i64_97 : i64
    %c8_i64_98 = arith.constant 8 : i64
    %194 = arith.addi %193, %c8_i64_98 : i64
    %c0_i32_99 = arith.constant 0 : i32
    %195 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_99) : (!llvm.ptr, i32) -> i32
    %196 = arith.extui %195 : i32 to i64
    %c65536_i64_100 = arith.constant 65536 : i64
    %197 = arith.muli %196, %c65536_i64_100 : i64
    %198 = arith.cmpi ult, %194, %197 : i64
    cf.cond_br %198, ^bb32, ^bb33
  ^bb31:  // pred: ^bb28
    %c1_i32_101 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_101) : (i32) -> ()
    cf.br ^bb30
  ^bb32:  // 2 preds: ^bb30, ^bb33
    %199 = llvm.getelementptr %9[%193] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %191, %199 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb2
  ^bb33:  // pred: ^bb30
    %c1_i32_102 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_102) : (i32) -> ()
    cf.br ^bb32
  }
  func.func @f100(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %1 : !llvm.ptr -> i32
    %6 = llvm.load %3 : !llvm.ptr -> i32
    %7 = arith.cmpi eq, %5, %6 : i32
    %8 = arith.extui %7 : i1 to i32
    %c0_i32 = arith.constant 0 : i32
    %9 = arith.cmpi ne, %8, %c0_i32 : i32
    cf.cond_br %9, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // pred: ^bb1
    %10 = llvm.load %0 : !llvm.ptr -> i32
    %11 = llvm.load %2 : !llvm.ptr -> i32
    %12 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %c31_i32 = arith.constant 31 : i32
    %13 = arith.cmpi ule, %c3_i32, %c31_i32 : i32
    %14 = scf.if %13 -> (i32) {
      %19 = arith.shli %12, %c3_i32 : i32
      scf.yield %19 : i32
    } else {
      %c0_i32_4 = arith.constant 0 : i32
      scf.yield %c0_i32_4 : i32
    }
    %15 = call @f161(%arg0, %10, %11, %14) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %16 = llvm.load %1 : !llvm.ptr -> i32
    %17 = llvm.load %3 : !llvm.ptr -> i32
    %18 = llvm.load %4 : !llvm.ptr -> i32
    call @f157(%arg0, %16, %17, %18) : (!llvm.ptr, i32, i32, i32) -> ()
    llvm.unreachable
  }
  func.func @f101(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %4 = call @f159(%arg0, %2, %3, %c32_i32) : (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32 = arith.constant 0 : i32
    %5 = arith.cmpi eq, %4, %c0_i32 : i32
    %6 = arith.extui %5 : i1 to i32
    cf.br ^bb2(%6 : i32)
  ^bb2(%7: i32):  // pred: ^bb1
    return %7 : i32
  }
  func.func @f102(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %7 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_3 = arith.constant 0 : i32
    %8 = arith.cmpi eq, %7, %c0_i32_3 : i32
    %9 = arith.extui %8 : i1 to i32
    %c0_i32_4 = arith.constant 0 : i32
    %10 = arith.cmpi ne, %9, %c0_i32_4 : i32
    cf.cond_br %10, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb5
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    cf.br ^bb6
  ^bb5:  // pred: ^bb17
    cf.br ^bb3
  ^bb6:  // 2 preds: ^bb4, ^bb15
    %11 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_5 = arith.constant 1 : i32
    %12 = arith.addi %11, %c1_i32_5 : i32
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c0_i64 : i64
    %c1_i64 = arith.constant 1 : i64
    %16 = arith.addi %15, %c1_i64 : i64
    %c0_i32_6 = arith.constant 0 : i32
    %17 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_6) : (!llvm.ptr, i32) -> i32
    %18 = arith.extui %17 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %19 = arith.muli %18, %c65536_i64 : i64
    %20 = arith.cmpi ult, %16, %19 : i64
    cf.cond_br %20, ^bb7, ^bb8
  ^bb7:  // 2 preds: ^bb6, ^bb8
    %21 = llvm.getelementptr %6[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %22 = llvm.load volatile %21 {alignment = 1 : i64} : !llvm.ptr -> i8
    %23 = arith.extui %22 : i8 to i32
    llvm.store %23, %3 : i32, !llvm.ptr
    %c15_i32 = arith.constant 15 : i32
    %24 = arith.andi %23, %c15_i32 : i32
    %c1050836_i32 = arith.constant 1050836 : i32
    %25 = arith.addi %24, %c1050836_i32 : i32
    %c0_i64_7 = arith.constant 0 : i64
    %26 = arith.extui %25 : i32 to i64
    %27 = arith.addi %26, %c0_i64_7 : i64
    %c1_i64_8 = arith.constant 1 : i64
    %28 = arith.addi %27, %c1_i64_8 : i64
    %c0_i32_9 = arith.constant 0 : i32
    %29 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_9) : (!llvm.ptr, i32) -> i32
    %30 = arith.extui %29 : i32 to i64
    %c65536_i64_10 = arith.constant 65536 : i64
    %31 = arith.muli %30, %c65536_i64_10 : i64
    %32 = arith.cmpi ult, %28, %31 : i64
    cf.cond_br %32, ^bb9, ^bb10
  ^bb8:  // pred: ^bb6
    %c1_i32_11 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_11) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %33 = llvm.getelementptr %6[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %34 = llvm.load volatile %33 {alignment = 1 : i64} : !llvm.ptr -> i8
    %35 = arith.extui %34 : i8 to i32
    %c0_i64_12 = arith.constant 0 : i64
    %36 = arith.extui %12 : i32 to i64
    %37 = arith.addi %36, %c0_i64_12 : i64
    %c1_i64_13 = arith.constant 1 : i64
    %38 = arith.addi %37, %c1_i64_13 : i64
    %c0_i32_14 = arith.constant 0 : i32
    %39 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_14) : (!llvm.ptr, i32) -> i32
    %40 = arith.extui %39 : i32 to i64
    %c65536_i64_15 = arith.constant 65536 : i64
    %41 = arith.muli %40, %c65536_i64_15 : i64
    %42 = arith.cmpi ult, %38, %41 : i64
    cf.cond_br %42, ^bb11, ^bb12
  ^bb10:  // pred: ^bb7
    %c1_i32_16 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_16) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %43 = llvm.getelementptr %6[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %44 = arith.trunci %35 : i32 to i8
    llvm.store volatile %44, %43 {alignment = 1 : i64} : i8, !llvm.ptr
    %45 = llvm.load %2 : !llvm.ptr -> i32
    %46 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %c31_i32 = arith.constant 31 : i32
    %47 = arith.cmpi ule, %c4_i32, %c31_i32 : i32
    %48 = scf.if %47 -> (i32) {
      %76 = arith.shrui %46, %c4_i32 : i32
      scf.yield %76 : i32
    } else {
      %c0_i32_31 = arith.constant 0 : i32
      scf.yield %c0_i32_31 : i32
    }
    %c1050836_i32_17 = arith.constant 1050836 : i32
    %49 = arith.addi %48, %c1050836_i32_17 : i32
    %c0_i64_18 = arith.constant 0 : i64
    %50 = arith.extui %49 : i32 to i64
    %51 = arith.addi %50, %c0_i64_18 : i64
    %c1_i64_19 = arith.constant 1 : i64
    %52 = arith.addi %51, %c1_i64_19 : i64
    %c0_i32_20 = arith.constant 0 : i32
    %53 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_20) : (!llvm.ptr, i32) -> i32
    %54 = arith.extui %53 : i32 to i64
    %c65536_i64_21 = arith.constant 65536 : i64
    %55 = arith.muli %54, %c65536_i64_21 : i64
    %56 = arith.cmpi ult, %52, %55 : i64
    cf.cond_br %56, ^bb13, ^bb14
  ^bb12:  // pred: ^bb9
    %c1_i32_22 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_22) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %57 = llvm.getelementptr %6[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %58 = llvm.load volatile %57 {alignment = 1 : i64} : !llvm.ptr -> i8
    %59 = arith.extui %58 : i8 to i32
    %c0_i64_23 = arith.constant 0 : i64
    %60 = arith.extui %45 : i32 to i64
    %61 = arith.addi %60, %c0_i64_23 : i64
    %c1_i64_24 = arith.constant 1 : i64
    %62 = arith.addi %61, %c1_i64_24 : i64
    %c0_i32_25 = arith.constant 0 : i32
    %63 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_25) : (!llvm.ptr, i32) -> i32
    %64 = arith.extui %63 : i32 to i64
    %c65536_i64_26 = arith.constant 65536 : i64
    %65 = arith.muli %64, %c65536_i64_26 : i64
    %66 = arith.cmpi ult, %62, %65 : i64
    cf.cond_br %66, ^bb15, ^bb16
  ^bb14:  // pred: ^bb11
    %c1_i32_27 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_27) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // 2 preds: ^bb13, ^bb16
    %67 = llvm.getelementptr %6[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %68 = arith.trunci %59 : i32 to i8
    llvm.store volatile %68, %67 {alignment = 1 : i64} : i8, !llvm.ptr
    %69 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %70 = arith.addi %69, %c2_i32 : i32
    llvm.store %70, %2 : i32, !llvm.ptr
    %71 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_28 = arith.constant 1 : i32
    %72 = arith.addi %71, %c1_i32_28 : i32
    llvm.store %72, %0 : i32, !llvm.ptr
    %73 = llvm.load %1 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %74 = arith.addi %73, %c-1_i32 : i32
    llvm.store %74, %1 : i32, !llvm.ptr
    %c0_i32_29 = arith.constant 0 : i32
    %75 = arith.cmpi ne, %74, %c0_i32_29 : i32
    cf.cond_br %75, ^bb6, ^bb17
  ^bb16:  // pred: ^bb13
    %c1_i32_30 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_30) : (i32) -> ()
    cf.br ^bb15
  ^bb17:  // pred: ^bb15
    cf.br ^bb5
  }
  func.func @f103(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %7 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %8 = arith.extui %7 : i32 to i64
    %9 = arith.addi %8, %c0_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %10 = arith.addi %9, %c4_i64 : i64
    %c0_i32_3 = arith.constant 0 : i32
    %11 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_3) : (!llvm.ptr, i32) -> i32
    %12 = arith.extui %11 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %13 = arith.muli %12, %c65536_i64 : i64
    %14 = arith.cmpi ult, %10, %13 : i64
    cf.cond_br %14, ^bb4, ^bb5
  ^bb2:  // pred: ^bb13
    return
  ^bb3:  // 2 preds: ^bb6, ^bb9
    %15 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_4 = arith.constant 4 : i64
    %16 = arith.extui %15 : i32 to i64
    %17 = arith.addi %16, %c4_i64_4 : i64
    %c4_i64_5 = arith.constant 4 : i64
    %18 = arith.addi %17, %c4_i64_5 : i64
    %c0_i32_6 = arith.constant 0 : i32
    %19 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_6) : (!llvm.ptr, i32) -> i32
    %20 = arith.extui %19 : i32 to i64
    %c65536_i64_7 = arith.constant 65536 : i64
    %21 = arith.muli %20, %c65536_i64_7 : i64
    %22 = arith.cmpi ult, %18, %21 : i64
    cf.cond_br %22, ^bb11, ^bb12
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %23 = llvm.getelementptr %6[%9] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %24 = llvm.load volatile %23 {alignment = 1 : i64} : !llvm.ptr -> i32
    %25 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %26 = arith.extui %25 : i32 to i64
    %27 = arith.addi %26, %c8_i64 : i64
    %c4_i64_8 = arith.constant 4 : i64
    %28 = arith.addi %27, %c4_i64_8 : i64
    %c0_i32_9 = arith.constant 0 : i32
    %29 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_9) : (!llvm.ptr, i32) -> i32
    %30 = arith.extui %29 : i32 to i64
    %c65536_i64_10 = arith.constant 65536 : i64
    %31 = arith.muli %30, %c65536_i64_10 : i64
    %32 = arith.cmpi ult, %28, %31 : i64
    cf.cond_br %32, ^bb6, ^bb7
  ^bb5:  // pred: ^bb1
    %c1_i32_11 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_11) : (i32) -> ()
    cf.br ^bb4
  ^bb6:  // 2 preds: ^bb4, ^bb7
    %33 = llvm.getelementptr %6[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %34 = llvm.load volatile %33 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %34, %3 : i32, !llvm.ptr
    %35 = arith.subi %24, %34 : i32
    %36 = llvm.load %2 : !llvm.ptr -> i32
    %37 = llvm.load %1 : !llvm.ptr -> i32
    %38 = arith.subi %36, %37 : i32
    llvm.store %38, %2 : i32, !llvm.ptr
    %39 = arith.cmpi uge, %35, %38 : i32
    %40 = arith.extui %39 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %41 = arith.cmpi ne, %40, %c0_i32_12 : i32
    cf.cond_br %41, ^bb3, ^bb8
  ^bb7:  // pred: ^bb4
    %c1_i32_13 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_13) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // pred: ^bb6
    %42 = llvm.load %0 : !llvm.ptr -> i32
    %43 = llvm.load %3 : !llvm.ptr -> i32
    %44 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_14 = arith.constant 1 : i32
    %c1_i32_15 = arith.constant 1 : i32
    call @f104(%arg0, %42, %43, %44, %c1_i32_14, %c1_i32_15) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %45 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_16 = arith.constant 8 : i64
    %46 = arith.extui %45 : i32 to i64
    %47 = arith.addi %46, %c8_i64_16 : i64
    %c4_i64_17 = arith.constant 4 : i64
    %48 = arith.addi %47, %c4_i64_17 : i64
    %c0_i32_18 = arith.constant 0 : i32
    %49 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_18) : (!llvm.ptr, i32) -> i32
    %50 = arith.extui %49 : i32 to i64
    %c65536_i64_19 = arith.constant 65536 : i64
    %51 = arith.muli %50, %c65536_i64_19 : i64
    %52 = arith.cmpi ult, %48, %51 : i64
    cf.cond_br %52, ^bb9, ^bb10
  ^bb9:  // 2 preds: ^bb8, ^bb10
    %53 = llvm.getelementptr %6[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %54 = llvm.load volatile %53 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %54, %3 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb10:  // pred: ^bb8
    %c1_i32_20 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_20) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb3, ^bb12
    %55 = llvm.getelementptr %6[%17] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %56 = llvm.load volatile %55 {alignment = 1 : i64} : !llvm.ptr -> i32
    %57 = llvm.load %3 : !llvm.ptr -> i32
    %58 = arith.addi %56, %57 : i32
    %59 = llvm.load %1 : !llvm.ptr -> i32
    %60 = llvm.load %2 : !llvm.ptr -> i32
    %61 = call @f161(%arg0, %58, %59, %60) : (!llvm.ptr, i32, i32, i32) -> i32
    %62 = llvm.load %0 : !llvm.ptr -> i32
    %63 = llvm.load %3 : !llvm.ptr -> i32
    %64 = llvm.load %2 : !llvm.ptr -> i32
    %65 = arith.addi %63, %64 : i32
    %c8_i64_21 = arith.constant 8 : i64
    %66 = arith.extui %62 : i32 to i64
    %67 = arith.addi %66, %c8_i64_21 : i64
    %c4_i64_22 = arith.constant 4 : i64
    %68 = arith.addi %67, %c4_i64_22 : i64
    %c0_i32_23 = arith.constant 0 : i32
    %69 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_23) : (!llvm.ptr, i32) -> i32
    %70 = arith.extui %69 : i32 to i64
    %c65536_i64_24 = arith.constant 65536 : i64
    %71 = arith.muli %70, %c65536_i64_24 : i64
    %72 = arith.cmpi ult, %68, %71 : i64
    cf.cond_br %72, ^bb13, ^bb14
  ^bb12:  // pred: ^bb3
    %c1_i32_25 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_25) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %73 = llvm.getelementptr %6[%67] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %65, %73 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb14:  // pred: ^bb11
    %c1_i32_26 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_26) : (i32) -> ()
    cf.br ^bb13
  }
  func.func @f104(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %11 = llvm.load %7 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %12 = arith.subi %11, %c16_i32 : i32
    llvm.store %12, %5 : i32, !llvm.ptr
    llvm.store %12, %7 : i32, !llvm.ptr
    %13 = llvm.load %5 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %14 = arith.addi %13, %c8_i32 : i32
    %15 = llvm.load %0 : !llvm.ptr -> i32
    %16 = llvm.load %1 : !llvm.ptr -> i32
    %17 = llvm.load %2 : !llvm.ptr -> i32
    %18 = llvm.load %3 : !llvm.ptr -> i32
    %19 = llvm.load %4 : !llvm.ptr -> i32
    call @f108(%arg0, %14, %15, %16, %17, %18, %19) : (!llvm.ptr, i32, i32, i32, i32, i32, i32) -> ()
    %20 = llvm.load %5 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c8_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %23 = arith.addi %22, %c4_i64 : i64
    %c0_i32_5 = arith.constant 0 : i32
    %24 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_5) : (!llvm.ptr, i32) -> i32
    %25 = arith.extui %24 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %26 = arith.muli %25, %c65536_i64 : i64
    %27 = arith.cmpi ult, %23, %26 : i64
    cf.cond_br %27, ^bb4, ^bb5
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // pred: ^bb4
    %28 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32_6 = arith.constant 16 : i32
    %29 = arith.addi %28, %c16_i32_6 : i32
    llvm.store %29, %7 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %30 = llvm.getelementptr %10[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %31 = llvm.load volatile %30 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %31, %4 : i32, !llvm.ptr
    %c-2147483647_i32 = arith.constant -2147483647 : i32
    %32 = arith.cmpi eq, %31, %c-2147483647_i32 : i32
    %33 = arith.extui %32 : i1 to i32
    %c0_i32_7 = arith.constant 0 : i32
    %34 = arith.cmpi ne, %33, %c0_i32_7 : i32
    cf.cond_br %34, ^bb3, ^bb6
  ^bb5:  // pred: ^bb1
    %c1_i32_8 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_8) : (i32) -> ()
    cf.br ^bb4
  ^bb6:  // pred: ^bb4
    %35 = llvm.load %4 : !llvm.ptr -> i32
    %36 = llvm.load %5 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %37 = arith.extui %36 : i32 to i64
    %38 = arith.addi %37, %c12_i64 : i64
    %c4_i64_9 = arith.constant 4 : i64
    %39 = arith.addi %38, %c4_i64_9 : i64
    %c0_i32_10 = arith.constant 0 : i32
    %40 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_10) : (!llvm.ptr, i32) -> i32
    %41 = arith.extui %40 : i32 to i64
    %c65536_i64_11 = arith.constant 65536 : i64
    %42 = arith.muli %41, %c65536_i64_11 : i64
    %43 = arith.cmpi ult, %39, %42 : i64
    cf.cond_br %43, ^bb7, ^bb8
  ^bb7:  // 2 preds: ^bb6, ^bb8
    %44 = llvm.getelementptr %10[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %45 = llvm.load volatile %44 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f143(%arg0, %35, %45) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb8:  // pred: ^bb6
    %c1_i32_12 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_12) : (i32) -> ()
    cf.br ^bb7
  }
  func.func @f105(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %3 = llvm.load %0 : !llvm.ptr -> i32
    %4 = llvm.load %1 : !llvm.ptr -> i32
    %5 = llvm.load %1 : !llvm.ptr -> i32
    %6 = llvm.load %2 : !llvm.ptr -> i32
    %7 = arith.addi %5, %6 : i32
    call @f103(%arg0, %3, %4, %7) : (!llvm.ptr, i32, i32, i32) -> ()
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f106(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %6 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %7 = arith.extui %6 : i32 to i64
    %8 = arith.addi %7, %c0_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %9 = arith.addi %8, %c4_i64 : i64
    %c0_i32_2 = arith.constant 0 : i32
    %10 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2) : (!llvm.ptr, i32) -> i32
    %11 = arith.extui %10 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %12 = arith.muli %11, %c65536_i64 : i64
    %13 = arith.cmpi ult, %9, %12 : i64
    cf.cond_br %13, ^bb4, ^bb5
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb6, ^bb8
    cf.br ^bb2
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %14 = llvm.getelementptr %5[%8] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %15 = llvm.load volatile %14 {alignment = 1 : i64} : !llvm.ptr -> i32
    %16 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %17 = arith.extui %16 : i32 to i64
    %18 = arith.addi %17, %c8_i64 : i64
    %c4_i64_3 = arith.constant 4 : i64
    %19 = arith.addi %18, %c4_i64_3 : i64
    %c0_i32_4 = arith.constant 0 : i32
    %20 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_4) : (!llvm.ptr, i32) -> i32
    %21 = arith.extui %20 : i32 to i64
    %c65536_i64_5 = arith.constant 65536 : i64
    %22 = arith.muli %21, %c65536_i64_5 : i64
    %23 = arith.cmpi ult, %19, %22 : i64
    cf.cond_br %23, ^bb6, ^bb7
  ^bb5:  // pred: ^bb1
    %c1_i32_6 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_6) : (i32) -> ()
    cf.br ^bb4
  ^bb6:  // 2 preds: ^bb4, ^bb7
    %24 = llvm.getelementptr %5[%18] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %25 = llvm.load volatile %24 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %25, %2 : i32, !llvm.ptr
    %26 = arith.subi %15, %25 : i32
    %27 = llvm.load %1 : !llvm.ptr -> i32
    %28 = arith.cmpi uge, %26, %27 : i32
    %29 = arith.extui %28 : i1 to i32
    %c0_i32_7 = arith.constant 0 : i32
    %30 = arith.cmpi ne, %29, %c0_i32_7 : i32
    cf.cond_br %30, ^bb3, ^bb8
  ^bb7:  // pred: ^bb4
    %c1_i32_8 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_8) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // pred: ^bb6
    %31 = llvm.load %0 : !llvm.ptr -> i32
    %32 = llvm.load %2 : !llvm.ptr -> i32
    %33 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_9 = arith.constant 1 : i32
    %c1_i32_10 = arith.constant 1 : i32
    call @f104(%arg0, %31, %32, %33, %c1_i32_9, %c1_i32_10) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    cf.br ^bb3
  }
  func.func @f107(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_5 = arith.constant 0 : i32
    %10 = arith.cmpi slt, %9, %c0_i32_5 : i32
    %11 = arith.extui %10 : i1 to i32
    %c0_i32_6 = arith.constant 0 : i32
    %12 = arith.cmpi ne, %11, %c0_i32_6 : i32
    cf.cond_br %12, ^bb7, ^bb8
  ^bb2:  // pred: ^bb38
    return
  ^bb3:  // 2 preds: ^bb4, ^bb32
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %14 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %15 = arith.extui %13 : i32 to i64
    %16 = arith.addi %15, %c0_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %17 = arith.addi %16, %c4_i64 : i64
    %c0_i32_7 = arith.constant 0 : i32
    %18 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_7) : (!llvm.ptr, i32) -> i32
    %19 = arith.extui %18 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %20 = arith.muli %19, %c65536_i64 : i64
    %21 = arith.cmpi ult, %17, %20 : i64
    cf.cond_br %21, ^bb38, ^bb39
  ^bb4:  // 2 preds: ^bb26, ^bb36
    %c1_i32_8 = arith.constant 1 : i32
    llvm.store %c1_i32_8, %2 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // 3 preds: ^bb6, ^bb9, ^bb21
    %22 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_9 = arith.constant 0 : i32
    %23 = arith.cmpi eq, %22, %c0_i32_9 : i32
    %24 = arith.extui %23 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %25 = arith.cmpi ne, %24, %c0_i32_10 : i32
    cf.cond_br %25, ^bb28, ^bb29
  ^bb6:  // 2 preds: ^bb10, ^bb17
    %26 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %26, %3 : i32, !llvm.ptr
    cf.br ^bb5
  ^bb7:  // pred: ^bb1
    %27 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_11 = arith.constant 0 : i32
    %c4_i64_12 = arith.constant 4 : i64
    %28 = arith.extui %27 : i32 to i64
    %29 = arith.addi %28, %c4_i64_12 : i64
    %c4_i64_13 = arith.constant 4 : i64
    %30 = arith.addi %29, %c4_i64_13 : i64
    %c0_i32_14 = arith.constant 0 : i32
    %31 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_14) : (!llvm.ptr, i32) -> i32
    %32 = arith.extui %31 : i32 to i64
    %c65536_i64_15 = arith.constant 65536 : i64
    %33 = arith.muli %32, %c65536_i64_15 : i64
    %34 = arith.cmpi ult, %30, %33 : i64
    cf.cond_br %34, ^bb26, ^bb27
  ^bb8:  // pred: ^bb1
    %35 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64_16 = arith.constant 4 : i64
    %36 = arith.extui %35 : i32 to i64
    %37 = arith.addi %36, %c4_i64_16 : i64
    %c4_i64_17 = arith.constant 4 : i64
    %38 = arith.addi %37, %c4_i64_17 : i64
    %c0_i32_18 = arith.constant 0 : i32
    %39 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_18) : (!llvm.ptr, i32) -> i32
    %40 = arith.extui %39 : i32 to i64
    %c65536_i64_19 = arith.constant 65536 : i64
    %41 = arith.muli %40, %c65536_i64_19 : i64
    %42 = arith.cmpi ult, %38, %41 : i64
    cf.cond_br %42, ^bb11, ^bb12
  ^bb9:  // 2 preds: ^bb19, ^bb24
    %43 = llvm.load %2 : !llvm.ptr -> i32
    %44 = llvm.load %1 : !llvm.ptr -> i32
    %45 = call @f77(%arg0, %43, %44) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %45, %3 : i32, !llvm.ptr
    cf.br ^bb5
  ^bb10:  // pred: ^bb11
    %46 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_20 = arith.constant 0 : i32
    %47 = arith.cmpi eq, %46, %c0_i32_20 : i32
    %48 = arith.extui %47 : i1 to i32
    %c0_i32_21 = arith.constant 0 : i32
    %49 = arith.cmpi ne, %48, %c0_i32_21 : i32
    cf.cond_br %49, ^bb6, ^bb23
  ^bb11:  // 2 preds: ^bb8, ^bb12
    %50 = llvm.getelementptr %8[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %51 = llvm.load volatile %50 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_22 = arith.constant 0 : i32
    %52 = arith.cmpi eq, %51, %c0_i32_22 : i32
    %53 = arith.extui %52 : i1 to i32
    %c0_i32_23 = arith.constant 0 : i32
    %54 = arith.cmpi ne, %53, %c0_i32_23 : i32
    cf.cond_br %54, ^bb10, ^bb13
  ^bb12:  // pred: ^bb8
    %c1_i32_24 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_24) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // pred: ^bb11
    %55 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %56 = arith.extui %55 : i32 to i64
    %57 = arith.addi %56, %c8_i64 : i64
    %c4_i64_25 = arith.constant 4 : i64
    %58 = arith.addi %57, %c4_i64_25 : i64
    %c0_i32_26 = arith.constant 0 : i32
    %59 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_26) : (!llvm.ptr, i32) -> i32
    %60 = arith.extui %59 : i32 to i64
    %c65536_i64_27 = arith.constant 65536 : i64
    %61 = arith.muli %60, %c65536_i64_27 : i64
    %62 = arith.cmpi ult, %58, %61 : i64
    cf.cond_br %62, ^bb15, ^bb16
  ^bb14:  // pred: ^bb15
    %63 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_28 = arith.constant 0 : i64
    %64 = arith.extui %63 : i32 to i64
    %65 = arith.addi %64, %c0_i64_28 : i64
    %c4_i64_29 = arith.constant 4 : i64
    %66 = arith.addi %65, %c4_i64_29 : i64
    %c0_i32_30 = arith.constant 0 : i32
    %67 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_30) : (!llvm.ptr, i32) -> i32
    %68 = arith.extui %67 : i32 to i64
    %c65536_i64_31 = arith.constant 65536 : i64
    %69 = arith.muli %68, %c65536_i64_31 : i64
    %70 = arith.cmpi ult, %66, %69 : i64
    cf.cond_br %70, ^bb21, ^bb22
  ^bb15:  // 2 preds: ^bb13, ^bb16
    %71 = llvm.getelementptr %8[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %72 = llvm.load volatile %71 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %72, %5 : i32, !llvm.ptr
    %c0_i32_32 = arith.constant 0 : i32
    %73 = arith.cmpi ne, %72, %c0_i32_32 : i32
    cf.cond_br %73, ^bb14, ^bb17
  ^bb16:  // pred: ^bb13
    %c1_i32_33 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_33) : (i32) -> ()
    cf.br ^bb15
  ^bb17:  // pred: ^bb15
    %74 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_34 = arith.constant 0 : i32
    %75 = arith.cmpi eq, %74, %c0_i32_34 : i32
    %76 = arith.extui %75 : i1 to i32
    %c0_i32_35 = arith.constant 0 : i32
    %77 = arith.cmpi ne, %76, %c0_i32_35 : i32
    cf.cond_br %77, ^bb6, ^bb18
  ^bb18:  // pred: ^bb17
    %c0_i32_36 = arith.constant 0 : i32
    %c1051609_i64 = arith.constant 1051609 : i64
    %78 = arith.extui %c0_i32_36 : i32 to i64
    %79 = arith.addi %78, %c1051609_i64 : i64
    %c1_i64 = arith.constant 1 : i64
    %80 = arith.addi %79, %c1_i64 : i64
    %c0_i32_37 = arith.constant 0 : i32
    %81 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_37) : (!llvm.ptr, i32) -> i32
    %82 = arith.extui %81 : i32 to i64
    %c65536_i64_38 = arith.constant 65536 : i64
    %83 = arith.muli %82, %c65536_i64_38 : i64
    %84 = arith.cmpi ult, %80, %83 : i64
    cf.cond_br %84, ^bb19, ^bb20
  ^bb19:  // 2 preds: ^bb18, ^bb20
    %85 = llvm.getelementptr %8[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %86 = llvm.load volatile %85 {alignment = 1 : i64} : !llvm.ptr -> i8
    %87 = arith.extui %86 : i8 to i32
    cf.br ^bb9
  ^bb20:  // pred: ^bb18
    %c1_i32_39 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_39) : (i32) -> ()
    cf.br ^bb19
  ^bb21:  // 2 preds: ^bb14, ^bb22
    %88 = llvm.getelementptr %8[%65] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %89 = llvm.load volatile %88 {alignment = 1 : i64} : !llvm.ptr -> i32
    %90 = llvm.load %5 : !llvm.ptr -> i32
    %91 = llvm.load %1 : !llvm.ptr -> i32
    %92 = llvm.load %2 : !llvm.ptr -> i32
    %93 = call @f79(%arg0, %89, %90, %91, %92) : (!llvm.ptr, i32, i32, i32, i32) -> i32
    llvm.store %93, %3 : i32, !llvm.ptr
    cf.br ^bb5
  ^bb22:  // pred: ^bb14
    %c1_i32_40 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_40) : (i32) -> ()
    cf.br ^bb21
  ^bb23:  // pred: ^bb10
    %c0_i32_41 = arith.constant 0 : i32
    %c1051609_i64_42 = arith.constant 1051609 : i64
    %94 = arith.extui %c0_i32_41 : i32 to i64
    %95 = arith.addi %94, %c1051609_i64_42 : i64
    %c1_i64_43 = arith.constant 1 : i64
    %96 = arith.addi %95, %c1_i64_43 : i64
    %c0_i32_44 = arith.constant 0 : i32
    %97 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_44) : (!llvm.ptr, i32) -> i32
    %98 = arith.extui %97 : i32 to i64
    %c65536_i64_45 = arith.constant 65536 : i64
    %99 = arith.muli %98, %c65536_i64_45 : i64
    %100 = arith.cmpi ult, %96, %99 : i64
    cf.cond_br %100, ^bb24, ^bb25
  ^bb24:  // 2 preds: ^bb23, ^bb25
    %101 = llvm.getelementptr %8[%95] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %102 = llvm.load volatile %101 {alignment = 1 : i64} : !llvm.ptr -> i8
    %103 = arith.extui %102 : i8 to i32
    cf.br ^bb9
  ^bb25:  // pred: ^bb23
    %c1_i32_46 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_46) : (i32) -> ()
    cf.br ^bb24
  ^bb26:  // 2 preds: ^bb7, ^bb27
    %104 = llvm.getelementptr %8[%29] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_11, %104 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb4
  ^bb27:  // pred: ^bb7
    %c1_i32_47 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_47) : (i32) -> ()
    cf.br ^bb26
  ^bb28:  // pred: ^bb5
    %105 = llvm.load %0 : !llvm.ptr -> i32
    %106 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_48 = arith.constant 8 : i64
    %107 = arith.extui %105 : i32 to i64
    %108 = arith.addi %107, %c8_i64_48 : i64
    %c4_i64_49 = arith.constant 4 : i64
    %109 = arith.addi %108, %c4_i64_49 : i64
    %c0_i32_50 = arith.constant 0 : i32
    %110 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_50) : (!llvm.ptr, i32) -> i32
    %111 = arith.extui %110 : i32 to i64
    %c65536_i64_51 = arith.constant 65536 : i64
    %112 = arith.muli %111, %c65536_i64_51 : i64
    %113 = arith.cmpi ult, %109, %112 : i64
    cf.cond_br %113, ^bb34, ^bb35
  ^bb29:  // pred: ^bb5
    %114 = llvm.load %0 : !llvm.ptr -> i32
    %115 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_52 = arith.constant 8 : i64
    %116 = arith.extui %114 : i32 to i64
    %117 = arith.addi %116, %c8_i64_52 : i64
    %c4_i64_53 = arith.constant 4 : i64
    %118 = arith.addi %117, %c4_i64_53 : i64
    %c0_i32_54 = arith.constant 0 : i32
    %119 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_54) : (!llvm.ptr, i32) -> i32
    %120 = arith.extui %119 : i32 to i64
    %c65536_i64_55 = arith.constant 65536 : i64
    %121 = arith.muli %120, %c65536_i64_55 : i64
    %122 = arith.cmpi ult, %118, %121 : i64
    cf.cond_br %122, ^bb30, ^bb31
  ^bb30:  // 2 preds: ^bb29, ^bb31
    %123 = llvm.getelementptr %8[%117] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %115, %123 {alignment = 1 : i64} : i32, !llvm.ptr
    %124 = llvm.load %0 : !llvm.ptr -> i32
    %125 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64_56 = arith.constant 4 : i64
    %126 = arith.extui %124 : i32 to i64
    %127 = arith.addi %126, %c4_i64_56 : i64
    %c4_i64_57 = arith.constant 4 : i64
    %128 = arith.addi %127, %c4_i64_57 : i64
    %c0_i32_58 = arith.constant 0 : i32
    %129 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_58) : (!llvm.ptr, i32) -> i32
    %130 = arith.extui %129 : i32 to i64
    %c65536_i64_59 = arith.constant 65536 : i64
    %131 = arith.muli %130, %c65536_i64_59 : i64
    %132 = arith.cmpi ult, %128, %131 : i64
    cf.cond_br %132, ^bb32, ^bb33
  ^bb31:  // pred: ^bb29
    %c1_i32_60 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_60) : (i32) -> ()
    cf.br ^bb30
  ^bb32:  // 2 preds: ^bb30, ^bb33
    %133 = llvm.getelementptr %8[%127] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %125, %133 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_61 = arith.constant 0 : i32
    llvm.store %c0_i32_61, %2 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb33:  // pred: ^bb30
    %c1_i32_62 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_62) : (i32) -> ()
    cf.br ^bb32
  ^bb34:  // 2 preds: ^bb28, ^bb35
    %134 = llvm.getelementptr %8[%108] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %106, %134 {alignment = 1 : i64} : i32, !llvm.ptr
    %135 = llvm.load %0 : !llvm.ptr -> i32
    %136 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_63 = arith.constant 4 : i64
    %137 = arith.extui %135 : i32 to i64
    %138 = arith.addi %137, %c4_i64_63 : i64
    %c4_i64_64 = arith.constant 4 : i64
    %139 = arith.addi %138, %c4_i64_64 : i64
    %c0_i32_65 = arith.constant 0 : i32
    %140 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_65) : (!llvm.ptr, i32) -> i32
    %141 = arith.extui %140 : i32 to i64
    %c65536_i64_66 = arith.constant 65536 : i64
    %142 = arith.muli %141, %c65536_i64_66 : i64
    %143 = arith.cmpi ult, %139, %142 : i64
    cf.cond_br %143, ^bb36, ^bb37
  ^bb35:  // pred: ^bb28
    %c1_i32_67 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_67) : (i32) -> ()
    cf.br ^bb34
  ^bb36:  // 2 preds: ^bb34, ^bb37
    %144 = llvm.getelementptr %8[%138] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %136, %144 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb4
  ^bb37:  // pred: ^bb34
    %c1_i32_68 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_68) : (i32) -> ()
    cf.br ^bb36
  ^bb38:  // 2 preds: ^bb3, ^bb39
    %145 = llvm.getelementptr %8[%16] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %14, %145 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb39:  // pred: ^bb3
    %c1_i32_69 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_69) : (i32) -> ()
    cf.br ^bb38
  }
  func.func @f108(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg6, %5 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_9 = arith.constant 1 : i32
    %10 = llvm.alloca %c1_i32_9 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %10 : i64, !llvm.ptr
    %11 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %13[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %16 = llvm.load %12 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %17 = arith.subi %16, %c32_i32 : i32
    llvm.store %17, %6 : i32, !llvm.ptr
    llvm.store %17, %12 : i32, !llvm.ptr
    %c0_i32_10 = arith.constant 0 : i32
    llvm.store %c0_i32_10, %7 : i32, !llvm.ptr
    %18 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i32_11 = arith.constant 0 : i32
    %19 = arith.cmpi eq, %18, %c0_i32_11 : i32
    %20 = arith.extui %19 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %21 = arith.cmpi ne, %20, %c0_i32_12 : i32
    cf.cond_br %21, ^bb4, ^bb5
  ^bb2:  // pred: ^bb38
    return
  ^bb3:  // 5 preds: ^bb4, ^bb5, ^bb9, ^bb30, ^bb34
    %22 = llvm.load %0 : !llvm.ptr -> i32
    %23 = llvm.load %8 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %24 = arith.extui %22 : i32 to i64
    %25 = arith.addi %24, %c4_i64 : i64
    %c4_i64_13 = arith.constant 4 : i64
    %26 = arith.addi %25, %c4_i64_13 : i64
    %c0_i32_14 = arith.constant 0 : i32
    %27 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_14) : (!llvm.ptr, i32) -> i32
    %28 = arith.extui %27 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %29 = arith.muli %28, %c65536_i64 : i64
    %30 = arith.cmpi ult, %26, %29 : i64
    cf.cond_br %30, ^bb36, ^bb37
  ^bb4:  // 2 preds: ^bb1, ^bb7
    cf.br ^bb3
  ^bb5:  // pred: ^bb1
    %31 = llvm.load %2 : !llvm.ptr -> i32
    %32 = llvm.load %3 : !llvm.ptr -> i32
    %33 = arith.addi %31, %32 : i32
    llvm.store %33, %3 : i32, !llvm.ptr
    %34 = llvm.load %2 : !llvm.ptr -> i32
    %35 = arith.cmpi ult, %33, %34 : i32
    %36 = arith.extui %35 : i1 to i32
    %c0_i32_15 = arith.constant 0 : i32
    %37 = arith.cmpi ne, %36, %c0_i32_15 : i32
    cf.cond_br %37, ^bb3, ^bb6
  ^bb6:  // pred: ^bb5
    %c0_i32_16 = arith.constant 0 : i32
    llvm.store %c0_i32_16, %7 : i32, !llvm.ptr
    %38 = llvm.load %4 : !llvm.ptr -> i32
    %39 = llvm.load %5 : !llvm.ptr -> i32
    %40 = arith.addi %38, %39 : i32
    %c-1_i32 = arith.constant -1 : i32
    %41 = arith.addi %40, %c-1_i32 : i32
    %c0_i32_17 = arith.constant 0 : i32
    %42 = llvm.load %4 : !llvm.ptr -> i32
    %43 = arith.subi %c0_i32_17, %42 : i32
    %44 = arith.andi %41, %43 : i32
    %45 = arith.extui %44 : i32 to i64
    %c8_i32 = arith.constant 8 : i32
    %c4_i32 = arith.constant 4 : i32
    %c1_i32_18 = arith.constant 1 : i32
    %46 = llvm.load %5 : !llvm.ptr -> i32
    %c1025_i32 = arith.constant 1025 : i32
    %47 = arith.cmpi ult, %46, %c1025_i32 : i32
    %48 = arith.extui %47 : i1 to i32
    %c0_i32_19 = arith.constant 0 : i32
    %49 = arith.cmpi ne, %48, %c0_i32_19 : i32
    %50 = arith.select %49, %c4_i32, %c1_i32_18 : i32
    %51 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i32_20 = arith.constant 1 : i32
    %52 = arith.cmpi eq, %51, %c1_i32_20 : i32
    %53 = arith.extui %52 : i1 to i32
    %c0_i32_21 = arith.constant 0 : i32
    %54 = arith.cmpi ne, %53, %c0_i32_21 : i32
    %55 = arith.select %54, %c8_i32, %50 : i32
    llvm.store %55, %8 : i32, !llvm.ptr
    %56 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_22 = arith.constant 0 : i64
    %57 = arith.extui %56 : i32 to i64
    %58 = arith.addi %57, %c0_i64_22 : i64
    %c4_i64_23 = arith.constant 4 : i64
    %59 = arith.addi %58, %c4_i64_23 : i64
    %c0_i32_24 = arith.constant 0 : i32
    %60 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_24) : (!llvm.ptr, i32) -> i32
    %61 = arith.extui %60 : i32 to i64
    %c65536_i64_25 = arith.constant 65536 : i64
    %62 = arith.muli %61, %c65536_i64_25 : i64
    %63 = arith.cmpi ult, %59, %62 : i64
    cf.cond_br %63, ^bb7, ^bb8
  ^bb7:  // 2 preds: ^bb6, ^bb8
    %64 = llvm.getelementptr %15[%58] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %65 = llvm.load volatile %64 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %65, %9 : i32, !llvm.ptr
    %c1_i32_26 = arith.constant 1 : i32
    %c31_i32 = arith.constant 31 : i32
    %66 = arith.cmpi ule, %c1_i32_26, %c31_i32 : i32
    %67 = scf.if %66 -> (i32) {
      %219 = arith.shli %65, %c1_i32_26 : i32
      scf.yield %219 : i32
    } else {
      %c0_i32_87 = arith.constant 0 : i32
      scf.yield %c0_i32_87 : i32
    }
    llvm.store %67, %2 : i32, !llvm.ptr
    %68 = llvm.load %3 : !llvm.ptr -> i32
    %69 = llvm.load %2 : !llvm.ptr -> i32
    %70 = llvm.load %3 : !llvm.ptr -> i32
    %71 = arith.cmpi ugt, %69, %70 : i32
    %72 = arith.extui %71 : i1 to i32
    %c0_i32_27 = arith.constant 0 : i32
    %73 = arith.cmpi ne, %72, %c0_i32_27 : i32
    %74 = arith.select %73, %67, %68 : i32
    llvm.store %74, %2 : i32, !llvm.ptr
    %75 = llvm.load %8 : !llvm.ptr -> i32
    %76 = llvm.load %2 : !llvm.ptr -> i32
    %77 = arith.cmpi ugt, %75, %76 : i32
    %78 = arith.extui %77 : i1 to i32
    %c0_i32_28 = arith.constant 0 : i32
    %79 = arith.cmpi ne, %78, %c0_i32_28 : i32
    %80 = arith.select %79, %55, %74 : i32
    llvm.store %80, %2 : i32, !llvm.ptr
    %81 = arith.extui %80 : i32 to i64
    %82 = arith.muli %45, %81 : i64
    llvm.store %82, %10 : i64, !llvm.ptr
    %c32_i64 = arith.constant 32 : i64
    %c63_i64 = arith.constant 63 : i64
    %83 = arith.cmpi ule, %c32_i64, %c63_i64 : i64
    %84 = scf.if %83 -> (i64) {
      %219 = arith.shrui %82, %c32_i64 : i64
      scf.yield %219 : i64
    } else {
      %c0_i64_87 = arith.constant 0 : i64
      scf.yield %c0_i64_87 : i64
    }
    %85 = arith.trunci %84 : i64 to i32
    %c0_i32_29 = arith.constant 0 : i32
    %86 = arith.cmpi ne, %85, %c0_i32_29 : i32
    cf.cond_br %86, ^bb4, ^bb9
  ^bb8:  // pred: ^bb6
    %c1_i32_30 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_30) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // pred: ^bb7
    %87 = llvm.load %10 : !llvm.ptr -> i64
    %88 = arith.trunci %87 : i64 to i32
    llvm.store %88, %3 : i32, !llvm.ptr
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %89 = llvm.load %4 : !llvm.ptr -> i32
    %90 = arith.subi %c-2147483648_i32, %89 : i32
    %91 = arith.cmpi ugt, %88, %90 : i32
    %92 = arith.extui %91 : i1 to i32
    %c0_i32_31 = arith.constant 0 : i32
    %93 = arith.cmpi ne, %92, %c0_i32_31 : i32
    cf.cond_br %93, ^bb3, ^bb10
  ^bb10:  // pred: ^bb9
    %94 = llvm.load %9 : !llvm.ptr -> i32
    %c0_i32_32 = arith.constant 0 : i32
    %95 = arith.cmpi ne, %94, %c0_i32_32 : i32
    cf.cond_br %95, ^bb12, ^bb13
  ^bb11:  // 2 preds: ^bb13, ^bb18
    %96 = llvm.load %6 : !llvm.ptr -> i32
    %97 = llvm.load %5 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %98 = arith.extui %96 : i32 to i64
    %99 = arith.addi %98, %c24_i64 : i64
    %c4_i64_33 = arith.constant 4 : i64
    %100 = arith.addi %99, %c4_i64_33 : i64
    %c0_i32_34 = arith.constant 0 : i32
    %101 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_34) : (!llvm.ptr, i32) -> i32
    %102 = arith.extui %101 : i32 to i64
    %c65536_i64_35 = arith.constant 65536 : i64
    %103 = arith.muli %102, %c65536_i64_35 : i64
    %104 = arith.cmpi ult, %100, %103 : i64
    cf.cond_br %104, ^bb20, ^bb21
  ^bb12:  // pred: ^bb10
    %105 = llvm.load %6 : !llvm.ptr -> i32
    %106 = llvm.load %9 : !llvm.ptr -> i32
    %107 = llvm.load %5 : !llvm.ptr -> i32
    %108 = arith.muli %106, %107 : i32
    %c28_i64 = arith.constant 28 : i64
    %109 = arith.extui %105 : i32 to i64
    %110 = arith.addi %109, %c28_i64 : i64
    %c4_i64_36 = arith.constant 4 : i64
    %111 = arith.addi %110, %c4_i64_36 : i64
    %c0_i32_37 = arith.constant 0 : i32
    %112 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_37) : (!llvm.ptr, i32) -> i32
    %113 = arith.extui %112 : i32 to i64
    %c65536_i64_38 = arith.constant 65536 : i64
    %114 = arith.muli %113, %c65536_i64_38 : i64
    %115 = arith.cmpi ult, %111, %114 : i64
    cf.cond_br %115, ^bb14, ^bb15
  ^bb13:  // pred: ^bb10
    %c0_i32_39 = arith.constant 0 : i32
    llvm.store %c0_i32_39, %5 : i32, !llvm.ptr
    cf.br ^bb11
  ^bb14:  // 2 preds: ^bb12, ^bb15
    %116 = llvm.getelementptr %15[%110] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %108, %116 {alignment = 1 : i64} : i32, !llvm.ptr
    %117 = llvm.load %6 : !llvm.ptr -> i32
    %118 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_40 = arith.constant 4 : i64
    %119 = arith.extui %118 : i32 to i64
    %120 = arith.addi %119, %c4_i64_40 : i64
    %c4_i64_41 = arith.constant 4 : i64
    %121 = arith.addi %120, %c4_i64_41 : i64
    %c0_i32_42 = arith.constant 0 : i32
    %122 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_42) : (!llvm.ptr, i32) -> i32
    %123 = arith.extui %122 : i32 to i64
    %c65536_i64_43 = arith.constant 65536 : i64
    %124 = arith.muli %123, %c65536_i64_43 : i64
    %125 = arith.cmpi ult, %121, %124 : i64
    cf.cond_br %125, ^bb16, ^bb17
  ^bb15:  // pred: ^bb12
    %c1_i32_44 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_44) : (i32) -> ()
    cf.br ^bb14
  ^bb16:  // 2 preds: ^bb14, ^bb17
    %126 = llvm.getelementptr %15[%120] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %127 = llvm.load volatile %126 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %128 = arith.extui %117 : i32 to i64
    %129 = arith.addi %128, %c20_i64 : i64
    %c4_i64_45 = arith.constant 4 : i64
    %130 = arith.addi %129, %c4_i64_45 : i64
    %c0_i32_46 = arith.constant 0 : i32
    %131 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_46) : (!llvm.ptr, i32) -> i32
    %132 = arith.extui %131 : i32 to i64
    %c65536_i64_47 = arith.constant 65536 : i64
    %133 = arith.muli %132, %c65536_i64_47 : i64
    %134 = arith.cmpi ult, %130, %133 : i64
    cf.cond_br %134, ^bb18, ^bb19
  ^bb17:  // pred: ^bb14
    %c1_i32_48 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_48) : (i32) -> ()
    cf.br ^bb16
  ^bb18:  // 2 preds: ^bb16, ^bb19
    %135 = llvm.getelementptr %15[%129] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %127, %135 {alignment = 1 : i64} : i32, !llvm.ptr
    %136 = llvm.load %4 : !llvm.ptr -> i32
    llvm.store %136, %5 : i32, !llvm.ptr
    cf.br ^bb11
  ^bb19:  // pred: ^bb16
    %c1_i32_49 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_49) : (i32) -> ()
    cf.br ^bb18
  ^bb20:  // 2 preds: ^bb11, ^bb21
    %137 = llvm.getelementptr %15[%99] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %97, %137 {alignment = 1 : i64} : i32, !llvm.ptr
    %138 = llvm.load %6 : !llvm.ptr -> i32
    %c8_i32_50 = arith.constant 8 : i32
    %139 = arith.addi %138, %c8_i32_50 : i32
    %140 = llvm.load %4 : !llvm.ptr -> i32
    %141 = llvm.load %3 : !llvm.ptr -> i32
    %142 = llvm.load %6 : !llvm.ptr -> i32
    %c20_i32 = arith.constant 20 : i32
    %143 = arith.addi %142, %c20_i32 : i32
    %144 = llvm.load %6 : !llvm.ptr -> i32
    call @f107(%arg0, %139, %140, %141, %143, %144) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %145 = llvm.load %6 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %146 = arith.extui %145 : i32 to i64
    %147 = arith.addi %146, %c8_i64 : i64
    %c4_i64_51 = arith.constant 4 : i64
    %148 = arith.addi %147, %c4_i64_51 : i64
    %c0_i32_52 = arith.constant 0 : i32
    %149 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_52) : (!llvm.ptr, i32) -> i32
    %150 = arith.extui %149 : i32 to i64
    %c65536_i64_53 = arith.constant 65536 : i64
    %151 = arith.muli %150, %c65536_i64_53 : i64
    %152 = arith.cmpi ult, %148, %151 : i64
    cf.cond_br %152, ^bb23, ^bb24
  ^bb21:  // pred: ^bb11
    %c1_i32_54 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_54) : (i32) -> ()
    cf.br ^bb20
  ^bb22:  // pred: ^bb23
    %153 = llvm.load %6 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %154 = arith.extui %153 : i32 to i64
    %155 = arith.addi %154, %c16_i64 : i64
    %c4_i64_55 = arith.constant 4 : i64
    %156 = arith.addi %155, %c4_i64_55 : i64
    %c0_i32_56 = arith.constant 0 : i32
    %157 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_56) : (!llvm.ptr, i32) -> i32
    %158 = arith.extui %157 : i32 to i64
    %c65536_i64_57 = arith.constant 65536 : i64
    %159 = arith.muli %158, %c65536_i64_57 : i64
    %160 = arith.cmpi ult, %156, %159 : i64
    cf.cond_br %160, ^bb32, ^bb33
  ^bb23:  // 2 preds: ^bb20, ^bb24
    %161 = llvm.getelementptr %15[%147] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %162 = llvm.load volatile %161 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_58 = arith.constant 0 : i32
    %163 = arith.cmpi ne, %162, %c0_i32_58 : i32
    cf.cond_br %163, ^bb22, ^bb25
  ^bb24:  // pred: ^bb20
    %c1_i32_59 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_59) : (i32) -> ()
    cf.br ^bb23
  ^bb25:  // pred: ^bb23
    %164 = llvm.load %6 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %165 = arith.extui %164 : i32 to i64
    %166 = arith.addi %165, %c12_i64 : i64
    %c4_i64_60 = arith.constant 4 : i64
    %167 = arith.addi %166, %c4_i64_60 : i64
    %c0_i32_61 = arith.constant 0 : i32
    %168 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_61) : (!llvm.ptr, i32) -> i32
    %169 = arith.extui %168 : i32 to i64
    %c65536_i64_62 = arith.constant 65536 : i64
    %170 = arith.muli %169, %c65536_i64_62 : i64
    %171 = arith.cmpi ult, %167, %170 : i64
    cf.cond_br %171, ^bb26, ^bb27
  ^bb26:  // 2 preds: ^bb25, ^bb27
    %172 = llvm.getelementptr %15[%166] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %173 = llvm.load volatile %172 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %173, %5 : i32, !llvm.ptr
    %174 = llvm.load %1 : !llvm.ptr -> i32
    %175 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_63 = arith.constant 0 : i64
    %176 = arith.extui %174 : i32 to i64
    %177 = arith.addi %176, %c0_i64_63 : i64
    %c4_i64_64 = arith.constant 4 : i64
    %178 = arith.addi %177, %c4_i64_64 : i64
    %c0_i32_65 = arith.constant 0 : i32
    %179 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_65) : (!llvm.ptr, i32) -> i32
    %180 = arith.extui %179 : i32 to i64
    %c65536_i64_66 = arith.constant 65536 : i64
    %181 = arith.muli %180, %c65536_i64_66 : i64
    %182 = arith.cmpi ult, %178, %181 : i64
    cf.cond_br %182, ^bb28, ^bb29
  ^bb27:  // pred: ^bb25
    %c1_i32_67 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_67) : (i32) -> ()
    cf.br ^bb26
  ^bb28:  // 2 preds: ^bb26, ^bb29
    %183 = llvm.getelementptr %15[%177] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %175, %183 {alignment = 1 : i64} : i32, !llvm.ptr
    %184 = llvm.load %1 : !llvm.ptr -> i32
    %185 = llvm.load %5 : !llvm.ptr -> i32
    %c4_i64_68 = arith.constant 4 : i64
    %186 = arith.extui %184 : i32 to i64
    %187 = arith.addi %186, %c4_i64_68 : i64
    %c4_i64_69 = arith.constant 4 : i64
    %188 = arith.addi %187, %c4_i64_69 : i64
    %c0_i32_70 = arith.constant 0 : i32
    %189 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_70) : (!llvm.ptr, i32) -> i32
    %190 = arith.extui %189 : i32 to i64
    %c65536_i64_71 = arith.constant 65536 : i64
    %191 = arith.muli %190, %c65536_i64_71 : i64
    %192 = arith.cmpi ult, %188, %191 : i64
    cf.cond_br %192, ^bb30, ^bb31
  ^bb29:  // pred: ^bb26
    %c1_i32_72 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_72) : (i32) -> ()
    cf.br ^bb28
  ^bb30:  // 2 preds: ^bb28, ^bb31
    %193 = llvm.getelementptr %15[%187] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %185, %193 {alignment = 1 : i64} : i32, !llvm.ptr
    %c-2147483647_i32 = arith.constant -2147483647 : i32
    llvm.store %c-2147483647_i32, %7 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb31:  // pred: ^bb28
    %c1_i32_73 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_73) : (i32) -> ()
    cf.br ^bb30
  ^bb32:  // 2 preds: ^bb22, ^bb33
    %194 = llvm.getelementptr %15[%155] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %195 = llvm.load volatile %194 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %195, %8 : i32, !llvm.ptr
    %196 = llvm.load %6 : !llvm.ptr -> i32
    %c12_i64_74 = arith.constant 12 : i64
    %197 = arith.extui %196 : i32 to i64
    %198 = arith.addi %197, %c12_i64_74 : i64
    %c4_i64_75 = arith.constant 4 : i64
    %199 = arith.addi %198, %c4_i64_75 : i64
    %c0_i32_76 = arith.constant 0 : i32
    %200 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_76) : (!llvm.ptr, i32) -> i32
    %201 = arith.extui %200 : i32 to i64
    %c65536_i64_77 = arith.constant 65536 : i64
    %202 = arith.muli %201, %c65536_i64_77 : i64
    %203 = arith.cmpi ult, %199, %202 : i64
    cf.cond_br %203, ^bb34, ^bb35
  ^bb33:  // pred: ^bb22
    %c1_i32_78 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_78) : (i32) -> ()
    cf.br ^bb32
  ^bb34:  // 2 preds: ^bb32, ^bb35
    %204 = llvm.getelementptr %15[%198] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %205 = llvm.load volatile %204 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %205, %7 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb35:  // pred: ^bb32
    %c1_i32_79 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_79) : (i32) -> ()
    cf.br ^bb34
  ^bb36:  // 2 preds: ^bb3, ^bb37
    %206 = llvm.getelementptr %15[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %23, %206 {alignment = 1 : i64} : i32, !llvm.ptr
    %207 = llvm.load %0 : !llvm.ptr -> i32
    %208 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_80 = arith.constant 0 : i64
    %209 = arith.extui %207 : i32 to i64
    %210 = arith.addi %209, %c0_i64_80 : i64
    %c4_i64_81 = arith.constant 4 : i64
    %211 = arith.addi %210, %c4_i64_81 : i64
    %c0_i32_82 = arith.constant 0 : i32
    %212 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_82) : (!llvm.ptr, i32) -> i32
    %213 = arith.extui %212 : i32 to i64
    %c65536_i64_83 = arith.constant 65536 : i64
    %214 = arith.muli %213, %c65536_i64_83 : i64
    %215 = arith.cmpi ult, %211, %214 : i64
    cf.cond_br %215, ^bb38, ^bb39
  ^bb37:  // pred: ^bb3
    %c1_i32_84 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_84) : (i32) -> ()
    cf.br ^bb36
  ^bb38:  // 2 preds: ^bb36, ^bb39
    %216 = llvm.getelementptr %15[%210] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %208, %216 {alignment = 1 : i64} : i32, !llvm.ptr
    %217 = llvm.load %6 : !llvm.ptr -> i32
    %c32_i32_85 = arith.constant 32 : i32
    %218 = arith.addi %217, %c32_i32_85 : i32
    llvm.store %218, %12 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb39:  // pred: ^bb36
    %c1_i32_86 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_86) : (i32) -> ()
    cf.br ^bb38
  }
  func.func @f109(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32_4 = arith.constant 0 : i32
    llvm.store %c0_i32_4, %4 : i32, !llvm.ptr
    %5 = llvm.load %1 : !llvm.ptr -> i32
    %6 = llvm.load %3 : !llvm.ptr -> i32
    %7 = arith.cmpi eq, %5, %6 : i32
    %8 = arith.extui %7 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %9 = arith.cmpi eq, %8, %c0_i32_5 : i32
    %10 = arith.extui %9 : i1 to i32
    %c0_i32_6 = arith.constant 0 : i32
    %11 = arith.cmpi ne, %10, %c0_i32_6 : i32
    cf.cond_br %11, ^bb3, ^bb4
  ^bb2(%12: i32):  // pred: ^bb3
    return %12 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %13 = llvm.load %4 : !llvm.ptr -> i32
    cf.br ^bb2(%13 : i32)
  ^bb4:  // pred: ^bb1
    %14 = llvm.load %0 : !llvm.ptr -> i32
    %15 = llvm.load %2 : !llvm.ptr -> i32
    %16 = llvm.load %1 : !llvm.ptr -> i32
    %17 = call @f159(%arg0, %14, %15, %16) : (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_7 = arith.constant 0 : i32
    %18 = arith.cmpi eq, %17, %c0_i32_7 : i32
    %19 = arith.extui %18 : i1 to i32
    llvm.store %19, %4 : i32, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f110(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %7 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_3 = arith.constant 0 : i32
    %8 = arith.cmpi eq, %7, %c0_i32_3 : i32
    %9 = arith.extui %8 : i1 to i32
    %c0_i32_4 = arith.constant 0 : i32
    %10 = arith.cmpi ne, %9, %c0_i32_4 : i32
    cf.cond_br %10, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 3 preds: ^bb1, ^bb5, ^bb8
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %12 = arith.extui %11 : i32 to i64
    %13 = arith.addi %12, %c0_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %14 = arith.addi %13, %c4_i64 : i64
    %c0_i32_5 = arith.constant 0 : i32
    %15 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_5) : (!llvm.ptr, i32) -> i32
    %16 = arith.extui %15 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %17 = arith.muli %16, %c65536_i64 : i64
    %18 = arith.cmpi ult, %14, %17 : i64
    cf.cond_br %18, ^bb5, ^bb6
  ^bb5:  // 2 preds: ^bb4, ^bb6
    %19 = llvm.getelementptr %6[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %20 = llvm.load volatile %19 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %20, %3 : i32, !llvm.ptr
    %c0_i32_6 = arith.constant 0 : i32
    %21 = arith.cmpi eq, %20, %c0_i32_6 : i32
    %22 = arith.extui %21 : i1 to i32
    %c0_i32_7 = arith.constant 0 : i32
    %23 = arith.cmpi ne, %22, %c0_i32_7 : i32
    cf.cond_br %23, ^bb3, ^bb7
  ^bb6:  // pred: ^bb4
    %c1_i32_8 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_8) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // pred: ^bb5
    %24 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_9 = arith.constant 4 : i64
    %25 = arith.extui %24 : i32 to i64
    %26 = arith.addi %25, %c4_i64_9 : i64
    %c4_i64_10 = arith.constant 4 : i64
    %27 = arith.addi %26, %c4_i64_10 : i64
    %c0_i32_11 = arith.constant 0 : i32
    %28 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_11) : (!llvm.ptr, i32) -> i32
    %29 = arith.extui %28 : i32 to i64
    %c65536_i64_12 = arith.constant 65536 : i64
    %30 = arith.muli %29, %c65536_i64_12 : i64
    %31 = arith.cmpi ult, %27, %30 : i64
    cf.cond_br %31, ^bb8, ^bb9
  ^bb8:  // 2 preds: ^bb7, ^bb9
    %32 = llvm.getelementptr %6[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %33 = llvm.load volatile %32 {alignment = 1 : i64} : !llvm.ptr -> i32
    %34 = llvm.load %3 : !llvm.ptr -> i32
    %35 = llvm.load %2 : !llvm.ptr -> i32
    %36 = arith.muli %34, %35 : i32
    %37 = llvm.load %1 : !llvm.ptr -> i32
    call @f78(%arg0, %33, %36, %37) : (!llvm.ptr, i32, i32, i32) -> ()
    cf.br ^bb3
  ^bb9:  // pred: ^bb7
    %c1_i32_13 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_13) : (i32) -> ()
    cf.br ^bb8
  }
  func.func @f111(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %5 : i64, !llvm.ptr
    %6 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %3 : !llvm.ptr -> i32
    %10 = llvm.load %4 : !llvm.ptr -> i32
    %11 = arith.addi %9, %10 : i32
    %c-1_i32 = arith.constant -1 : i32
    %12 = arith.addi %11, %c-1_i32 : i32
    %c0_i32 = arith.constant 0 : i32
    %13 = llvm.load %3 : !llvm.ptr -> i32
    %14 = arith.subi %c0_i32, %13 : i32
    %15 = arith.andi %12, %14 : i32
    %16 = arith.extui %15 : i32 to i64
    %17 = llvm.load %1 : !llvm.ptr -> i32
    %18 = arith.extui %17 : i32 to i64
    %19 = arith.muli %16, %18 : i64
    llvm.store %19, %5 : i64, !llvm.ptr
    %c32_i64 = arith.constant 32 : i64
    %c63_i64 = arith.constant 63 : i64
    %20 = arith.cmpi ule, %c32_i64, %c63_i64 : i64
    %21 = scf.if %20 -> (i64) {
      %133 = arith.shrui %19, %c32_i64 : i64
      scf.yield %133 : i64
    } else {
      %c0_i64_58 = arith.constant 0 : i64
      scf.yield %c0_i64_58 : i64
    }
    %22 = arith.trunci %21 : i64 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %23 = arith.cmpi ne, %22, %c0_i32_5 : i32
    cf.cond_br %23, ^bb4, ^bb5
  ^bb2:  // pred: ^bb30
    return
  ^bb3:  // 4 preds: ^bb11, ^bb22, ^bb26, ^bb28
    %24 = llvm.load %0 : !llvm.ptr -> i32
    %25 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_6 = arith.constant 0 : i64
    %26 = arith.extui %24 : i32 to i64
    %27 = arith.addi %26, %c0_i64_6 : i64
    %c4_i64 = arith.constant 4 : i64
    %28 = arith.addi %27, %c4_i64 : i64
    %c0_i32_7 = arith.constant 0 : i32
    %29 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_7) : (!llvm.ptr, i32) -> i32
    %30 = arith.extui %29 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %31 = arith.muli %30, %c65536_i64 : i64
    %32 = arith.cmpi ult, %28, %31 : i64
    cf.cond_br %32, ^bb30, ^bb31
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %33 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_8 = arith.constant 0 : i32
    %c4_i64_9 = arith.constant 4 : i64
    %34 = arith.extui %33 : i32 to i64
    %35 = arith.addi %34, %c4_i64_9 : i64
    %c4_i64_10 = arith.constant 4 : i64
    %36 = arith.addi %35, %c4_i64_10 : i64
    %c0_i32_11 = arith.constant 0 : i32
    %37 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_11) : (!llvm.ptr, i32) -> i32
    %38 = arith.extui %37 : i32 to i64
    %c65536_i64_12 = arith.constant 65536 : i64
    %39 = arith.muli %38, %c65536_i64_12 : i64
    %40 = arith.cmpi ult, %36, %39 : i64
    cf.cond_br %40, ^bb28, ^bb29
  ^bb5:  // pred: ^bb1
    %41 = llvm.load %5 : !llvm.ptr -> i64
    %42 = arith.trunci %41 : i64 to i32
    llvm.store %42, %4 : i32, !llvm.ptr
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %43 = llvm.load %3 : !llvm.ptr -> i32
    %44 = arith.subi %c-2147483648_i32, %43 : i32
    %45 = arith.cmpi ugt, %42, %44 : i32
    %46 = arith.extui %45 : i1 to i32
    %c0_i32_13 = arith.constant 0 : i32
    %47 = arith.cmpi ne, %46, %c0_i32_13 : i32
    cf.cond_br %47, ^bb4, ^bb6
  ^bb6:  // pred: ^bb5
    %48 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i32_14 = arith.constant 0 : i32
    %49 = arith.cmpi ne, %48, %c0_i32_14 : i32
    cf.cond_br %49, ^bb7, ^bb8
  ^bb7:  // pred: ^bb6
    %c0_i32_15 = arith.constant 0 : i32
    %c1051609_i64 = arith.constant 1051609 : i64
    %50 = arith.extui %c0_i32_15 : i32 to i64
    %51 = arith.addi %50, %c1051609_i64 : i64
    %c1_i64 = arith.constant 1 : i64
    %52 = arith.addi %51, %c1_i64 : i64
    %c0_i32_16 = arith.constant 0 : i32
    %53 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_16) : (!llvm.ptr, i32) -> i32
    %54 = arith.extui %53 : i32 to i64
    %c65536_i64_17 = arith.constant 65536 : i64
    %55 = arith.muli %54, %c65536_i64_17 : i64
    %56 = arith.cmpi ult, %52, %55 : i64
    cf.cond_br %56, ^bb13, ^bb14
  ^bb8:  // pred: ^bb6
    %57 = llvm.load %0 : !llvm.ptr -> i32
    %58 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %59 = arith.extui %57 : i32 to i64
    %60 = arith.addi %59, %c8_i64 : i64
    %c4_i64_18 = arith.constant 4 : i64
    %61 = arith.addi %60, %c4_i64_18 : i64
    %c0_i32_19 = arith.constant 0 : i32
    %62 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_19) : (!llvm.ptr, i32) -> i32
    %63 = arith.extui %62 : i32 to i64
    %c65536_i64_20 = arith.constant 65536 : i64
    %64 = arith.muli %63, %c65536_i64_20 : i64
    %65 = arith.cmpi ult, %61, %64 : i64
    cf.cond_br %65, ^bb9, ^bb10
  ^bb9:  // 2 preds: ^bb8, ^bb10
    %66 = llvm.getelementptr %8[%60] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %58, %66 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_21 = arith.constant 0 : i32
    llvm.store %c0_i32_21, %3 : i32, !llvm.ptr
    %67 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_22 = arith.constant 0 : i32
    %c4_i64_23 = arith.constant 4 : i64
    %68 = arith.extui %67 : i32 to i64
    %69 = arith.addi %68, %c4_i64_23 : i64
    %c4_i64_24 = arith.constant 4 : i64
    %70 = arith.addi %69, %c4_i64_24 : i64
    %c0_i32_25 = arith.constant 0 : i32
    %71 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_25) : (!llvm.ptr, i32) -> i32
    %72 = arith.extui %71 : i32 to i64
    %c65536_i64_26 = arith.constant 65536 : i64
    %73 = arith.muli %72, %c65536_i64_26 : i64
    %74 = arith.cmpi ult, %70, %73 : i64
    cf.cond_br %74, ^bb11, ^bb12
  ^bb10:  // pred: ^bb8
    %c1_i32_27 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_27) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %75 = llvm.getelementptr %8[%69] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_22, %75 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb3
  ^bb12:  // pred: ^bb9
    %c1_i32_28 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_28) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb7, ^bb14
    %76 = llvm.getelementptr %8[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %77 = llvm.load volatile %76 {alignment = 1 : i64} : !llvm.ptr -> i8
    %78 = arith.extui %77 : i8 to i32
    %79 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_29 = arith.constant 0 : i32
    %80 = arith.cmpi ne, %79, %c0_i32_29 : i32
    cf.cond_br %80, ^bb16, ^bb17
  ^bb14:  // pred: ^bb7
    %c1_i32_30 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_30) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // 2 preds: ^bb16, ^bb17
    %81 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_31 = arith.constant 0 : i32
    %82 = arith.cmpi eq, %81, %c0_i32_31 : i32
    %83 = arith.extui %82 : i1 to i32
    %c0_i32_32 = arith.constant 0 : i32
    %84 = arith.cmpi ne, %83, %c0_i32_32 : i32
    cf.cond_br %84, ^bb18, ^bb19
  ^bb16:  // pred: ^bb13
    %85 = llvm.load %4 : !llvm.ptr -> i32
    %86 = llvm.load %3 : !llvm.ptr -> i32
    %87 = call @f77(%arg0, %85, %86) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %87, %2 : i32, !llvm.ptr
    cf.br ^bb15
  ^bb17:  // pred: ^bb13
    %88 = llvm.load %4 : !llvm.ptr -> i32
    %89 = llvm.load %3 : !llvm.ptr -> i32
    %90 = call @f77(%arg0, %88, %89) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %90, %2 : i32, !llvm.ptr
    cf.br ^bb15
  ^bb18:  // pred: ^bb15
    %91 = llvm.load %0 : !llvm.ptr -> i32
    %92 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i64_33 = arith.constant 8 : i64
    %93 = arith.extui %91 : i32 to i64
    %94 = arith.addi %93, %c8_i64_33 : i64
    %c4_i64_34 = arith.constant 4 : i64
    %95 = arith.addi %94, %c4_i64_34 : i64
    %c0_i32_35 = arith.constant 0 : i32
    %96 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_35) : (!llvm.ptr, i32) -> i32
    %97 = arith.extui %96 : i32 to i64
    %c65536_i64_36 = arith.constant 65536 : i64
    %98 = arith.muli %97, %c65536_i64_36 : i64
    %99 = arith.cmpi ult, %95, %98 : i64
    cf.cond_br %99, ^bb24, ^bb25
  ^bb19:  // pred: ^bb15
    %100 = llvm.load %0 : !llvm.ptr -> i32
    %101 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_37 = arith.constant 8 : i64
    %102 = arith.extui %100 : i32 to i64
    %103 = arith.addi %102, %c8_i64_37 : i64
    %c4_i64_38 = arith.constant 4 : i64
    %104 = arith.addi %103, %c4_i64_38 : i64
    %c0_i32_39 = arith.constant 0 : i32
    %105 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_39) : (!llvm.ptr, i32) -> i32
    %106 = arith.extui %105 : i32 to i64
    %c65536_i64_40 = arith.constant 65536 : i64
    %107 = arith.muli %106, %c65536_i64_40 : i64
    %108 = arith.cmpi ult, %104, %107 : i64
    cf.cond_br %108, ^bb20, ^bb21
  ^bb20:  // 2 preds: ^bb19, ^bb21
    %109 = llvm.getelementptr %8[%103] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %101, %109 {alignment = 1 : i64} : i32, !llvm.ptr
    %110 = llvm.load %0 : !llvm.ptr -> i32
    %111 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_41 = arith.constant 4 : i64
    %112 = arith.extui %110 : i32 to i64
    %113 = arith.addi %112, %c4_i64_41 : i64
    %c4_i64_42 = arith.constant 4 : i64
    %114 = arith.addi %113, %c4_i64_42 : i64
    %c0_i32_43 = arith.constant 0 : i32
    %115 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_43) : (!llvm.ptr, i32) -> i32
    %116 = arith.extui %115 : i32 to i64
    %c65536_i64_44 = arith.constant 65536 : i64
    %117 = arith.muli %116, %c65536_i64_44 : i64
    %118 = arith.cmpi ult, %114, %117 : i64
    cf.cond_br %118, ^bb22, ^bb23
  ^bb21:  // pred: ^bb19
    %c1_i32_45 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_45) : (i32) -> ()
    cf.br ^bb20
  ^bb22:  // 2 preds: ^bb20, ^bb23
    %119 = llvm.getelementptr %8[%113] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %111, %119 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_46 = arith.constant 0 : i32
    llvm.store %c0_i32_46, %3 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb23:  // pred: ^bb20
    %c1_i32_47 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_47) : (i32) -> ()
    cf.br ^bb22
  ^bb24:  // 2 preds: ^bb18, ^bb25
    %120 = llvm.getelementptr %8[%94] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %92, %120 {alignment = 1 : i64} : i32, !llvm.ptr
    %121 = llvm.load %0 : !llvm.ptr -> i32
    %122 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64_48 = arith.constant 4 : i64
    %123 = arith.extui %121 : i32 to i64
    %124 = arith.addi %123, %c4_i64_48 : i64
    %c4_i64_49 = arith.constant 4 : i64
    %125 = arith.addi %124, %c4_i64_49 : i64
    %c0_i32_50 = arith.constant 0 : i32
    %126 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_50) : (!llvm.ptr, i32) -> i32
    %127 = arith.extui %126 : i32 to i64
    %c65536_i64_51 = arith.constant 65536 : i64
    %128 = arith.muli %127, %c65536_i64_51 : i64
    %129 = arith.cmpi ult, %125, %128 : i64
    cf.cond_br %129, ^bb26, ^bb27
  ^bb25:  // pred: ^bb18
    %c1_i32_52 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_52) : (i32) -> ()
    cf.br ^bb24
  ^bb26:  // 2 preds: ^bb24, ^bb27
    %130 = llvm.getelementptr %8[%124] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %122, %130 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i32_53 = arith.constant 1 : i32
    llvm.store %c1_i32_53, %3 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb27:  // pred: ^bb24
    %c1_i32_54 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_54) : (i32) -> ()
    cf.br ^bb26
  ^bb28:  // 2 preds: ^bb4, ^bb29
    %131 = llvm.getelementptr %8[%35] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_8, %131 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i32_55 = arith.constant 1 : i32
    llvm.store %c1_i32_55, %3 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb29:  // pred: ^bb4
    %c1_i32_56 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_56) : (i32) -> ()
    cf.br ^bb28
  ^bb30:  // 2 preds: ^bb3, ^bb31
    %132 = llvm.getelementptr %8[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %25, %132 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb31:  // pred: ^bb3
    %c1_i32_57 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_57) : (i32) -> ()
    cf.br ^bb30
  }
  func.func @f112(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f113(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %8 = arith.addi %7, %c4_i64 : i64
    %c0_i32_1 = arith.constant 0 : i32
    %9 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1) : (!llvm.ptr, i32) -> i32
    %10 = arith.extui %9 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %11 = arith.muli %10, %c65536_i64 : i64
    %12 = arith.cmpi ult, %8, %11 : i64
    cf.cond_br %12, ^bb4, ^bb5
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb4, ^bb7
    cf.br ^bb2
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %13 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %14 = llvm.load volatile %13 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %14, %1 : i32, !llvm.ptr
    %c0_i32_2 = arith.constant 0 : i32
    %15 = arith.cmpi eq, %14, %c0_i32_2 : i32
    %16 = arith.extui %15 : i1 to i32
    %c0_i32_3 = arith.constant 0 : i32
    %17 = arith.cmpi ne, %16, %c0_i32_3 : i32
    cf.cond_br %17, ^bb3, ^bb6
  ^bb5:  // pred: ^bb1
    %c1_i32_4 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_4) : (i32) -> ()
    cf.br ^bb4
  ^bb6:  // pred: ^bb4
    %18 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_5 = arith.constant 4 : i64
    %19 = arith.extui %18 : i32 to i64
    %20 = arith.addi %19, %c4_i64_5 : i64
    %c4_i64_6 = arith.constant 4 : i64
    %21 = arith.addi %20, %c4_i64_6 : i64
    %c0_i32_7 = arith.constant 0 : i32
    %22 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_7) : (!llvm.ptr, i32) -> i32
    %23 = arith.extui %22 : i32 to i64
    %c65536_i64_8 = arith.constant 65536 : i64
    %24 = arith.muli %23, %c65536_i64_8 : i64
    %25 = arith.cmpi ult, %21, %24 : i64
    cf.cond_br %25, ^bb7, ^bb8
  ^bb7:  // 2 preds: ^bb6, ^bb8
    %26 = llvm.getelementptr %4[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %27 = llvm.load volatile %26 {alignment = 1 : i64} : !llvm.ptr -> i32
    %28 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_9 = arith.constant 1 : i32
    call @f78(%arg0, %27, %28, %c1_i32_9) : (!llvm.ptr, i32, i32, i32) -> ()
    cf.br ^bb3
  ^bb8:  // pred: ^bb6
    %c1_i32_10 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_10) : (i32) -> ()
    cf.br ^bb7
  }
  func.func @f114(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %1 : !llvm.ptr -> i32
    %6 = llvm.load %3 : !llvm.ptr -> i32
    %7 = arith.cmpi eq, %5, %6 : i32
    %8 = arith.extui %7 : i1 to i32
    %c0_i32 = arith.constant 0 : i32
    %9 = arith.cmpi ne, %8, %c0_i32 : i32
    cf.cond_br %9, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // pred: ^bb1
    %10 = llvm.load %0 : !llvm.ptr -> i32
    %11 = llvm.load %2 : !llvm.ptr -> i32
    %12 = llvm.load %1 : !llvm.ptr -> i32
    %13 = call @f161(%arg0, %10, %11, %12) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %14 = llvm.load %1 : !llvm.ptr -> i32
    %15 = llvm.load %3 : !llvm.ptr -> i32
    %16 = llvm.load %4 : !llvm.ptr -> i32
    call @f157(%arg0, %14, %15, %16) : (!llvm.ptr, i32, i32, i32) -> ()
    llvm.unreachable
  }
  func.func @f115(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c7199936582794304877_i64 = arith.constant 7199936582794304877 : i64
    %c8_i64 = arith.constant 8 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c8_i64 : i64
    %c8_i64_1 = arith.constant 8 : i64
    %8 = arith.addi %7, %c8_i64_1 : i64
    %c0_i32 = arith.constant 0 : i32
    %9 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32) : (!llvm.ptr, i32) -> i32
    %10 = arith.extui %9 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %11 = arith.muli %10, %c65536_i64 : i64
    %12 = arith.cmpi ult, %8, %11 : i64
    cf.cond_br %12, ^bb3, ^bb4
  ^bb2:  // pred: ^bb5
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %13 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c7199936582794304877_i64, %13 {alignment = 1 : i64} : i64, !llvm.ptr
    %14 = llvm.load %0 : !llvm.ptr -> i32
    %c-5076933981314334344_i64 = arith.constant -5076933981314334344 : i64
    %c0_i64 = arith.constant 0 : i64
    %15 = arith.extui %14 : i32 to i64
    %16 = arith.addi %15, %c0_i64 : i64
    %c8_i64_2 = arith.constant 8 : i64
    %17 = arith.addi %16, %c8_i64_2 : i64
    %c0_i32_3 = arith.constant 0 : i32
    %18 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_3) : (!llvm.ptr, i32) -> i32
    %19 = arith.extui %18 : i32 to i64
    %c65536_i64_4 = arith.constant 65536 : i64
    %20 = arith.muli %19, %c65536_i64_4 : i64
    %21 = arith.cmpi ult, %17, %20 : i64
    cf.cond_br %21, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c1_i32_5 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_5) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %22 = llvm.getelementptr %4[%16] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-5076933981314334344_i64, %22 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb2
  ^bb6:  // pred: ^bb3
    %c1_i32_6 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_6) : (i32) -> ()
    cf.br ^bb5
  }
  func.func @f116(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c-235516408301547304_i64 = arith.constant -235516408301547304 : i64
    %c8_i64 = arith.constant 8 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c8_i64 : i64
    %c8_i64_1 = arith.constant 8 : i64
    %8 = arith.addi %7, %c8_i64_1 : i64
    %c0_i32 = arith.constant 0 : i32
    %9 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32) : (!llvm.ptr, i32) -> i32
    %10 = arith.extui %9 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %11 = arith.muli %10, %c65536_i64 : i64
    %12 = arith.cmpi ult, %8, %11 : i64
    cf.cond_br %12, ^bb3, ^bb4
  ^bb2:  // pred: ^bb5
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %13 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-235516408301547304_i64, %13 {alignment = 1 : i64} : i64, !llvm.ptr
    %14 = llvm.load %0 : !llvm.ptr -> i32
    %c799433722634398613_i64 = arith.constant 799433722634398613 : i64
    %c0_i64 = arith.constant 0 : i64
    %15 = arith.extui %14 : i32 to i64
    %16 = arith.addi %15, %c0_i64 : i64
    %c8_i64_2 = arith.constant 8 : i64
    %17 = arith.addi %16, %c8_i64_2 : i64
    %c0_i32_3 = arith.constant 0 : i32
    %18 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_3) : (!llvm.ptr, i32) -> i32
    %19 = arith.extui %18 : i32 to i64
    %c65536_i64_4 = arith.constant 65536 : i64
    %20 = arith.muli %19, %c65536_i64_4 : i64
    %21 = arith.cmpi ult, %17, %20 : i64
    cf.cond_br %21, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c1_i32_5 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_5) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %22 = llvm.getelementptr %4[%16] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c799433722634398613_i64, %22 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb2
  ^bb6:  // pred: ^bb3
    %c1_i32_6 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_6) : (i32) -> ()
    cf.br ^bb5
  }
  func.func @f117(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %9 : i64, !llvm.ptr
    %10 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.getelementptr %12[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %15 = llvm.load %11 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %16 = arith.subi %15, %c32_i32 : i32
    llvm.store %16, %5 : i32, !llvm.ptr
    llvm.store %16, %11 : i32, !llvm.ptr
    %17 = llvm.load %1 : !llvm.ptr -> i32
    %18 = llvm.load %2 : !llvm.ptr -> i32
    %19 = arith.addi %17, %18 : i32
    llvm.store %19, %2 : i32, !llvm.ptr
    %20 = llvm.load %1 : !llvm.ptr -> i32
    %21 = arith.cmpi uge, %19, %20 : i32
    %22 = arith.extui %21 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %23 = arith.cmpi ne, %22, %c0_i32_9 : i32
    cf.cond_br %23, ^bb3, ^bb4
  ^bb2:  // pred: ^bb34
    return
  ^bb3:  // pred: ^bb1
    %c0_i32_10 = arith.constant 0 : i32
    llvm.store %c0_i32_10, %6 : i32, !llvm.ptr
    %24 = llvm.load %3 : !llvm.ptr -> i32
    %25 = llvm.load %4 : !llvm.ptr -> i32
    %26 = arith.addi %24, %25 : i32
    %c-1_i32 = arith.constant -1 : i32
    %27 = arith.addi %26, %c-1_i32 : i32
    %c0_i32_11 = arith.constant 0 : i32
    %28 = llvm.load %3 : !llvm.ptr -> i32
    %29 = arith.subi %c0_i32_11, %28 : i32
    %30 = arith.andi %27, %29 : i32
    %31 = arith.extui %30 : i32 to i64
    %c8_i32 = arith.constant 8 : i32
    %c4_i32 = arith.constant 4 : i32
    %32 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i32_12 = arith.constant 1 : i32
    %33 = arith.cmpi eq, %32, %c1_i32_12 : i32
    %34 = arith.extui %33 : i1 to i32
    %c0_i32_13 = arith.constant 0 : i32
    %35 = arith.cmpi ne, %34, %c0_i32_13 : i32
    %36 = arith.select %35, %c8_i32, %c4_i32 : i32
    llvm.store %36, %7 : i32, !llvm.ptr
    %37 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_14 = arith.constant 0 : i64
    %38 = arith.extui %37 : i32 to i64
    %39 = arith.addi %38, %c0_i64_14 : i64
    %c4_i64 = arith.constant 4 : i64
    %40 = arith.addi %39, %c4_i64 : i64
    %c0_i32_15 = arith.constant 0 : i32
    %41 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_15) : (!llvm.ptr, i32) -> i32
    %42 = arith.extui %41 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %43 = arith.muli %42, %c65536_i64 : i64
    %44 = arith.cmpi ult, %40, %43 : i64
    cf.cond_br %44, ^bb6, ^bb7
  ^bb4:  // pred: ^bb1
    %c0_i32_16 = arith.constant 0 : i32
    %c0_i32_17 = arith.constant 0 : i32
    call @f143(%arg0, %c0_i32_16, %c0_i32_17) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb5:  // pred: ^bb6
    %45 = llvm.load %9 : !llvm.ptr -> i64
    %46 = arith.trunci %45 : i64 to i32
    llvm.store %46, %2 : i32, !llvm.ptr
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %47 = llvm.load %3 : !llvm.ptr -> i32
    %48 = arith.subi %c-2147483648_i32, %47 : i32
    %49 = arith.cmpi ugt, %46, %48 : i32
    %50 = arith.extui %49 : i1 to i32
    %c0_i32_18 = arith.constant 0 : i32
    %51 = arith.cmpi ne, %50, %c0_i32_18 : i32
    cf.cond_br %51, ^bb10, ^bb11
  ^bb6:  // 2 preds: ^bb3, ^bb7
    %52 = llvm.getelementptr %14[%39] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %53 = llvm.load volatile %52 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %53, %1 : i32, !llvm.ptr
    %c1_i32_19 = arith.constant 1 : i32
    %c31_i32 = arith.constant 31 : i32
    %54 = arith.cmpi ule, %c1_i32_19, %c31_i32 : i32
    %55 = scf.if %54 -> (i32) {
      %196 = arith.shli %53, %c1_i32_19 : i32
      scf.yield %196 : i32
    } else {
      %c0_i32_78 = arith.constant 0 : i32
      scf.yield %c0_i32_78 : i32
    }
    llvm.store %55, %8 : i32, !llvm.ptr
    %56 = llvm.load %2 : !llvm.ptr -> i32
    %57 = llvm.load %8 : !llvm.ptr -> i32
    %58 = llvm.load %2 : !llvm.ptr -> i32
    %59 = arith.cmpi ugt, %57, %58 : i32
    %60 = arith.extui %59 : i1 to i32
    %c0_i32_20 = arith.constant 0 : i32
    %61 = arith.cmpi ne, %60, %c0_i32_20 : i32
    %62 = arith.select %61, %55, %56 : i32
    llvm.store %62, %2 : i32, !llvm.ptr
    %63 = llvm.load %7 : !llvm.ptr -> i32
    %64 = llvm.load %2 : !llvm.ptr -> i32
    %65 = arith.cmpi ugt, %63, %64 : i32
    %66 = arith.extui %65 : i1 to i32
    %c0_i32_21 = arith.constant 0 : i32
    %67 = arith.cmpi ne, %66, %c0_i32_21 : i32
    %68 = arith.select %67, %36, %62 : i32
    llvm.store %68, %7 : i32, !llvm.ptr
    %69 = arith.extui %68 : i32 to i64
    %70 = arith.muli %31, %69 : i64
    llvm.store %70, %9 : i64, !llvm.ptr
    %c32_i64 = arith.constant 32 : i64
    %c63_i64 = arith.constant 63 : i64
    %71 = arith.cmpi ule, %c32_i64, %c63_i64 : i64
    %72 = scf.if %71 -> (i64) {
      %196 = arith.shrui %70, %c32_i64 : i64
      scf.yield %196 : i64
    } else {
      %c0_i64_78 = arith.constant 0 : i64
      scf.yield %c0_i64_78 : i64
    }
    %73 = arith.trunci %72 : i64 to i32
    %c0_i32_22 = arith.constant 0 : i32
    %74 = arith.cmpi eq, %73, %c0_i32_22 : i32
    %75 = arith.extui %74 : i1 to i32
    %c0_i32_23 = arith.constant 0 : i32
    %76 = arith.cmpi ne, %75, %c0_i32_23 : i32
    cf.cond_br %76, ^bb5, ^bb8
  ^bb7:  // pred: ^bb3
    %c1_i32_24 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_24) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // pred: ^bb6
    %c0_i32_25 = arith.constant 0 : i32
    %c0_i32_26 = arith.constant 0 : i32
    call @f143(%arg0, %c0_i32_25, %c0_i32_26) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb9:  // pred: ^bb23
    %77 = llvm.load %5 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %78 = arith.extui %77 : i32 to i64
    %79 = arith.addi %78, %c12_i64 : i64
    %c4_i64_27 = arith.constant 4 : i64
    %80 = arith.addi %79, %c4_i64_27 : i64
    %c0_i32_28 = arith.constant 0 : i32
    %81 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_28) : (!llvm.ptr, i32) -> i32
    %82 = arith.extui %81 : i32 to i64
    %c65536_i64_29 = arith.constant 65536 : i64
    %83 = arith.muli %82, %c65536_i64_29 : i64
    %84 = arith.cmpi ult, %80, %83 : i64
    cf.cond_br %84, ^bb30, ^bb31
  ^bb10:  // 2 preds: ^bb5, ^bb28
    %85 = llvm.load %6 : !llvm.ptr -> i32
    %86 = llvm.load %8 : !llvm.ptr -> i32
    call @f143(%arg0, %85, %86) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb11:  // pred: ^bb5
    %87 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_30 = arith.constant 0 : i32
    %88 = arith.cmpi ne, %87, %c0_i32_30 : i32
    cf.cond_br %88, ^bb13, ^bb14
  ^bb12:  // 2 preds: ^bb14, ^bb19
    %89 = llvm.load %5 : !llvm.ptr -> i32
    %90 = llvm.load %4 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %91 = arith.extui %89 : i32 to i64
    %92 = arith.addi %91, %c24_i64 : i64
    %c4_i64_31 = arith.constant 4 : i64
    %93 = arith.addi %92, %c4_i64_31 : i64
    %c0_i32_32 = arith.constant 0 : i32
    %94 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_32) : (!llvm.ptr, i32) -> i32
    %95 = arith.extui %94 : i32 to i64
    %c65536_i64_33 = arith.constant 65536 : i64
    %96 = arith.muli %95, %c65536_i64_33 : i64
    %97 = arith.cmpi ult, %93, %96 : i64
    cf.cond_br %97, ^bb21, ^bb22
  ^bb13:  // pred: ^bb11
    %98 = llvm.load %5 : !llvm.ptr -> i32
    %99 = llvm.load %1 : !llvm.ptr -> i32
    %100 = llvm.load %4 : !llvm.ptr -> i32
    %101 = arith.muli %99, %100 : i32
    %c28_i64 = arith.constant 28 : i64
    %102 = arith.extui %98 : i32 to i64
    %103 = arith.addi %102, %c28_i64 : i64
    %c4_i64_34 = arith.constant 4 : i64
    %104 = arith.addi %103, %c4_i64_34 : i64
    %c0_i32_35 = arith.constant 0 : i32
    %105 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_35) : (!llvm.ptr, i32) -> i32
    %106 = arith.extui %105 : i32 to i64
    %c65536_i64_36 = arith.constant 65536 : i64
    %107 = arith.muli %106, %c65536_i64_36 : i64
    %108 = arith.cmpi ult, %104, %107 : i64
    cf.cond_br %108, ^bb15, ^bb16
  ^bb14:  // pred: ^bb11
    %c0_i32_37 = arith.constant 0 : i32
    llvm.store %c0_i32_37, %4 : i32, !llvm.ptr
    cf.br ^bb12
  ^bb15:  // 2 preds: ^bb13, ^bb16
    %109 = llvm.getelementptr %14[%103] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %101, %109 {alignment = 1 : i64} : i32, !llvm.ptr
    %110 = llvm.load %5 : !llvm.ptr -> i32
    %111 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_38 = arith.constant 4 : i64
    %112 = arith.extui %111 : i32 to i64
    %113 = arith.addi %112, %c4_i64_38 : i64
    %c4_i64_39 = arith.constant 4 : i64
    %114 = arith.addi %113, %c4_i64_39 : i64
    %c0_i32_40 = arith.constant 0 : i32
    %115 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_40) : (!llvm.ptr, i32) -> i32
    %116 = arith.extui %115 : i32 to i64
    %c65536_i64_41 = arith.constant 65536 : i64
    %117 = arith.muli %116, %c65536_i64_41 : i64
    %118 = arith.cmpi ult, %114, %117 : i64
    cf.cond_br %118, ^bb17, ^bb18
  ^bb16:  // pred: ^bb13
    %c1_i32_42 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_42) : (i32) -> ()
    cf.br ^bb15
  ^bb17:  // 2 preds: ^bb15, ^bb18
    %119 = llvm.getelementptr %14[%113] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %120 = llvm.load volatile %119 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %121 = arith.extui %110 : i32 to i64
    %122 = arith.addi %121, %c20_i64 : i64
    %c4_i64_43 = arith.constant 4 : i64
    %123 = arith.addi %122, %c4_i64_43 : i64
    %c0_i32_44 = arith.constant 0 : i32
    %124 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_44) : (!llvm.ptr, i32) -> i32
    %125 = arith.extui %124 : i32 to i64
    %c65536_i64_45 = arith.constant 65536 : i64
    %126 = arith.muli %125, %c65536_i64_45 : i64
    %127 = arith.cmpi ult, %123, %126 : i64
    cf.cond_br %127, ^bb19, ^bb20
  ^bb18:  // pred: ^bb15
    %c1_i32_46 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_46) : (i32) -> ()
    cf.br ^bb17
  ^bb19:  // 2 preds: ^bb17, ^bb20
    %128 = llvm.getelementptr %14[%122] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %120, %128 {alignment = 1 : i64} : i32, !llvm.ptr
    %129 = llvm.load %3 : !llvm.ptr -> i32
    llvm.store %129, %4 : i32, !llvm.ptr
    cf.br ^bb12
  ^bb20:  // pred: ^bb17
    %c1_i32_47 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_47) : (i32) -> ()
    cf.br ^bb19
  ^bb21:  // 2 preds: ^bb12, ^bb22
    %130 = llvm.getelementptr %14[%92] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %90, %130 {alignment = 1 : i64} : i32, !llvm.ptr
    %131 = llvm.load %5 : !llvm.ptr -> i32
    %c8_i32_48 = arith.constant 8 : i32
    %132 = arith.addi %131, %c8_i32_48 : i32
    %133 = llvm.load %3 : !llvm.ptr -> i32
    %134 = llvm.load %2 : !llvm.ptr -> i32
    %135 = llvm.load %5 : !llvm.ptr -> i32
    %c20_i32 = arith.constant 20 : i32
    %136 = arith.addi %135, %c20_i32 : i32
    call @f125(%arg0, %132, %133, %134, %136) : (!llvm.ptr, i32, i32, i32, i32) -> ()
    %137 = llvm.load %5 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %138 = arith.extui %137 : i32 to i64
    %139 = arith.addi %138, %c8_i64 : i64
    %c4_i64_49 = arith.constant 4 : i64
    %140 = arith.addi %139, %c4_i64_49 : i64
    %c0_i32_50 = arith.constant 0 : i32
    %141 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_50) : (!llvm.ptr, i32) -> i32
    %142 = arith.extui %141 : i32 to i64
    %c65536_i64_51 = arith.constant 65536 : i64
    %143 = arith.muli %142, %c65536_i64_51 : i64
    %144 = arith.cmpi ult, %140, %143 : i64
    cf.cond_br %144, ^bb23, ^bb24
  ^bb22:  // pred: ^bb12
    %c1_i32_52 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_52) : (i32) -> ()
    cf.br ^bb21
  ^bb23:  // 2 preds: ^bb21, ^bb24
    %145 = llvm.getelementptr %14[%139] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %146 = llvm.load volatile %145 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_53 = arith.constant 1 : i32
    %147 = arith.cmpi eq, %146, %c1_i32_53 : i32
    %148 = arith.extui %147 : i1 to i32
    %c0_i32_54 = arith.constant 0 : i32
    %149 = arith.cmpi eq, %148, %c0_i32_54 : i32
    %150 = arith.extui %149 : i1 to i32
    %c0_i32_55 = arith.constant 0 : i32
    %151 = arith.cmpi ne, %150, %c0_i32_55 : i32
    cf.cond_br %151, ^bb9, ^bb25
  ^bb24:  // pred: ^bb21
    %c1_i32_56 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_56) : (i32) -> ()
    cf.br ^bb23
  ^bb25:  // pred: ^bb23
    %152 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %153 = arith.extui %152 : i32 to i64
    %154 = arith.addi %153, %c16_i64 : i64
    %c4_i64_57 = arith.constant 4 : i64
    %155 = arith.addi %154, %c4_i64_57 : i64
    %c0_i32_58 = arith.constant 0 : i32
    %156 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_58) : (!llvm.ptr, i32) -> i32
    %157 = arith.extui %156 : i32 to i64
    %c65536_i64_59 = arith.constant 65536 : i64
    %158 = arith.muli %157, %c65536_i64_59 : i64
    %159 = arith.cmpi ult, %155, %158 : i64
    cf.cond_br %159, ^bb26, ^bb27
  ^bb26:  // 2 preds: ^bb25, ^bb27
    %160 = llvm.getelementptr %14[%154] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %161 = llvm.load volatile %160 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %161, %8 : i32, !llvm.ptr
    %162 = llvm.load %5 : !llvm.ptr -> i32
    %c12_i64_60 = arith.constant 12 : i64
    %163 = arith.extui %162 : i32 to i64
    %164 = arith.addi %163, %c12_i64_60 : i64
    %c4_i64_61 = arith.constant 4 : i64
    %165 = arith.addi %164, %c4_i64_61 : i64
    %c0_i32_62 = arith.constant 0 : i32
    %166 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_62) : (!llvm.ptr, i32) -> i32
    %167 = arith.extui %166 : i32 to i64
    %c65536_i64_63 = arith.constant 65536 : i64
    %168 = arith.muli %167, %c65536_i64_63 : i64
    %169 = arith.cmpi ult, %165, %168 : i64
    cf.cond_br %169, ^bb28, ^bb29
  ^bb27:  // pred: ^bb25
    %c1_i32_64 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_64) : (i32) -> ()
    cf.br ^bb26
  ^bb28:  // 2 preds: ^bb26, ^bb29
    %170 = llvm.getelementptr %14[%164] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %171 = llvm.load volatile %170 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %171, %6 : i32, !llvm.ptr
    cf.br ^bb10
  ^bb29:  // pred: ^bb26
    %c1_i32_65 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_65) : (i32) -> ()
    cf.br ^bb28
  ^bb30:  // 2 preds: ^bb9, ^bb31
    %172 = llvm.getelementptr %14[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %173 = llvm.load volatile %172 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %173, %3 : i32, !llvm.ptr
    %174 = llvm.load %0 : !llvm.ptr -> i32
    %175 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_66 = arith.constant 0 : i64
    %176 = arith.extui %174 : i32 to i64
    %177 = arith.addi %176, %c0_i64_66 : i64
    %c4_i64_67 = arith.constant 4 : i64
    %178 = arith.addi %177, %c4_i64_67 : i64
    %c0_i32_68 = arith.constant 0 : i32
    %179 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_68) : (!llvm.ptr, i32) -> i32
    %180 = arith.extui %179 : i32 to i64
    %c65536_i64_69 = arith.constant 65536 : i64
    %181 = arith.muli %180, %c65536_i64_69 : i64
    %182 = arith.cmpi ult, %178, %181 : i64
    cf.cond_br %182, ^bb32, ^bb33
  ^bb31:  // pred: ^bb9
    %c1_i32_70 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_70) : (i32) -> ()
    cf.br ^bb30
  ^bb32:  // 2 preds: ^bb30, ^bb33
    %183 = llvm.getelementptr %14[%177] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %175, %183 {alignment = 1 : i64} : i32, !llvm.ptr
    %184 = llvm.load %0 : !llvm.ptr -> i32
    %185 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64_71 = arith.constant 4 : i64
    %186 = arith.extui %184 : i32 to i64
    %187 = arith.addi %186, %c4_i64_71 : i64
    %c4_i64_72 = arith.constant 4 : i64
    %188 = arith.addi %187, %c4_i64_72 : i64
    %c0_i32_73 = arith.constant 0 : i32
    %189 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_73) : (!llvm.ptr, i32) -> i32
    %190 = arith.extui %189 : i32 to i64
    %c65536_i64_74 = arith.constant 65536 : i64
    %191 = arith.muli %190, %c65536_i64_74 : i64
    %192 = arith.cmpi ult, %188, %191 : i64
    cf.cond_br %192, ^bb34, ^bb35
  ^bb33:  // pred: ^bb30
    %c1_i32_75 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_75) : (i32) -> ()
    cf.br ^bb32
  ^bb34:  // 2 preds: ^bb32, ^bb35
    %193 = llvm.getelementptr %14[%187] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %185, %193 {alignment = 1 : i64} : i32, !llvm.ptr
    %194 = llvm.load %5 : !llvm.ptr -> i32
    %c32_i32_76 = arith.constant 32 : i32
    %195 = arith.addi %194, %c32_i32_76 : i32
    llvm.store %195, %11 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb35:  // pred: ^bb32
    %c1_i32_77 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_77) : (i32) -> ()
    cf.br ^bb34
  }
  func.func @f118(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %c1050852_i32 = arith.constant 1050852 : i32
    %3 = llvm.load %1 : !llvm.ptr -> i32
    %4 = call @f150(%arg0, %2, %c1050852_i32, %3) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%4 : i32)
  ^bb2(%5: i32):  // pred: ^bb1
    return %5 : i32
  }
  func.func @f119(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %8 = arith.addi %7, %c4_i64 : i64
    %c0_i32_1 = arith.constant 0 : i32
    %9 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1) : (!llvm.ptr, i32) -> i32
    %10 = arith.extui %9 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %11 = arith.muli %10, %c65536_i64 : i64
    %12 = arith.cmpi ult, %8, %11 : i64
    cf.cond_br %12, ^bb4, ^bb5
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb4, ^bb7
    cf.br ^bb2
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %13 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %14 = llvm.load volatile %13 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %14, %1 : i32, !llvm.ptr
    %c0_i32_2 = arith.constant 0 : i32
    %15 = arith.cmpi eq, %14, %c0_i32_2 : i32
    %16 = arith.extui %15 : i1 to i32
    %c0_i32_3 = arith.constant 0 : i32
    %17 = arith.cmpi ne, %16, %c0_i32_3 : i32
    cf.cond_br %17, ^bb3, ^bb6
  ^bb5:  // pred: ^bb1
    %c1_i32_4 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_4) : (i32) -> ()
    cf.br ^bb4
  ^bb6:  // pred: ^bb4
    %18 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_5 = arith.constant 4 : i64
    %19 = arith.extui %18 : i32 to i64
    %20 = arith.addi %19, %c4_i64_5 : i64
    %c4_i64_6 = arith.constant 4 : i64
    %21 = arith.addi %20, %c4_i64_6 : i64
    %c0_i32_7 = arith.constant 0 : i32
    %22 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_7) : (!llvm.ptr, i32) -> i32
    %23 = arith.extui %22 : i32 to i64
    %c65536_i64_8 = arith.constant 65536 : i64
    %24 = arith.muli %23, %c65536_i64_8 : i64
    %25 = arith.cmpi ult, %21, %24 : i64
    cf.cond_br %25, ^bb7, ^bb8
  ^bb7:  // 2 preds: ^bb6, ^bb8
    %26 = llvm.getelementptr %4[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %27 = llvm.load volatile %26 {alignment = 1 : i64} : !llvm.ptr -> i32
    %28 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_9 = arith.constant 1 : i32
    call @f78(%arg0, %27, %28, %c1_i32_9) : (!llvm.ptr, i32, i32, i32) -> ()
    cf.br ^bb3
  ^bb8:  // pred: ^bb6
    %c1_i32_10 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_10) : (i32) -> ()
    cf.br ^bb7
  }
  func.func @f120(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %8 = arith.addi %7, %c4_i64 : i64
    %c0_i32_1 = arith.constant 0 : i32
    %9 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1) : (!llvm.ptr, i32) -> i32
    %10 = arith.extui %9 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %11 = arith.muli %10, %c65536_i64 : i64
    %12 = arith.cmpi ult, %8, %11 : i64
    cf.cond_br %12, ^bb4, ^bb5
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb4, ^bb7
    cf.br ^bb2
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %13 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %14 = llvm.load volatile %13 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %14, %1 : i32, !llvm.ptr
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %15 = arith.ori %14, %c-2147483648_i32 : i32
    %c-2147483648_i32_2 = arith.constant -2147483648 : i32
    %16 = arith.cmpi eq, %15, %c-2147483648_i32_2 : i32
    %17 = arith.extui %16 : i1 to i32
    %c0_i32_3 = arith.constant 0 : i32
    %18 = arith.cmpi ne, %17, %c0_i32_3 : i32
    cf.cond_br %18, ^bb3, ^bb6
  ^bb5:  // pred: ^bb1
    %c1_i32_4 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_4) : (i32) -> ()
    cf.br ^bb4
  ^bb6:  // pred: ^bb4
    %19 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_5 = arith.constant 4 : i64
    %20 = arith.extui %19 : i32 to i64
    %21 = arith.addi %20, %c4_i64_5 : i64
    %c4_i64_6 = arith.constant 4 : i64
    %22 = arith.addi %21, %c4_i64_6 : i64
    %c0_i32_7 = arith.constant 0 : i32
    %23 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_7) : (!llvm.ptr, i32) -> i32
    %24 = arith.extui %23 : i32 to i64
    %c65536_i64_8 = arith.constant 65536 : i64
    %25 = arith.muli %24, %c65536_i64_8 : i64
    %26 = arith.cmpi ult, %22, %25 : i64
    cf.cond_br %26, ^bb7, ^bb8
  ^bb7:  // 2 preds: ^bb6, ^bb8
    %27 = llvm.getelementptr %4[%21] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %28 = llvm.load volatile %27 {alignment = 1 : i64} : !llvm.ptr -> i32
    %29 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_9 = arith.constant 1 : i32
    call @f78(%arg0, %28, %29, %c1_i32_9) : (!llvm.ptr, i32, i32, i32) -> ()
    cf.br ^bb3
  ^bb8:  // pred: ^bb6
    %c1_i32_10 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_10) : (i32) -> ()
    cf.br ^bb7
  }
  func.func @f121(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %8 = arith.addi %7, %c4_i64 : i64
    %c0_i32_1 = arith.constant 0 : i32
    %9 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1) : (!llvm.ptr, i32) -> i32
    %10 = arith.extui %9 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %11 = arith.muli %10, %c65536_i64 : i64
    %12 = arith.cmpi ult, %8, %11 : i64
    cf.cond_br %12, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %13 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32, %13 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %c1_i32_2 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2) : (i32) -> ()
    cf.br ^bb3
  }
  func.func @f122(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %10 = arith.subi %9, %c16_i32 : i32
    llvm.store %10, %2 : i32, !llvm.ptr
    llvm.store %10, %5 : i32, !llvm.ptr
    %11 = llvm.load %1 : !llvm.ptr -> i32
    %c128_i32 = arith.constant 128 : i32
    %12 = arith.cmpi ult, %11, %c128_i32 : i32
    %13 = arith.extui %12 : i1 to i32
    %c0_i32_3 = arith.constant 0 : i32
    %14 = arith.cmpi ne, %13, %c0_i32_3 : i32
    cf.cond_br %14, ^bb4, ^bb5
  ^bb2(%15: i32):  // pred: ^bb3
    return %15 : i32
  ^bb3:  // 2 preds: ^bb41, ^bb53
    %16 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_4 = arith.constant 16 : i32
    %17 = arith.addi %16, %c16_i32_4 : i32
    llvm.store %17, %5 : i32, !llvm.ptr
    %c0_i32_5 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32_5 : i32)
  ^bb4:  // pred: ^bb1
    %18 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %19 = arith.extui %18 : i32 to i64
    %20 = arith.addi %19, %c8_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %21 = arith.addi %20, %c4_i64 : i64
    %c0_i32_6 = arith.constant 0 : i32
    %22 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_6) : (!llvm.ptr, i32) -> i32
    %23 = arith.extui %22 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %24 = arith.muli %23, %c65536_i64 : i64
    %25 = arith.cmpi ult, %21, %24 : i64
    cf.cond_br %25, ^bb44, ^bb45
  ^bb5:  // pred: ^bb1
    %26 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_7 = arith.constant 0 : i32
    %c12_i64 = arith.constant 12 : i64
    %27 = arith.extui %26 : i32 to i64
    %28 = arith.addi %27, %c12_i64 : i64
    %c4_i64_8 = arith.constant 4 : i64
    %29 = arith.addi %28, %c4_i64_8 : i64
    %c0_i32_9 = arith.constant 0 : i32
    %30 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_9) : (!llvm.ptr, i32) -> i32
    %31 = arith.extui %30 : i32 to i64
    %c65536_i64_10 = arith.constant 65536 : i64
    %32 = arith.muli %31, %c65536_i64_10 : i64
    %33 = arith.cmpi ult, %29, %32 : i64
    cf.cond_br %33, ^bb6, ^bb7
  ^bb6:  // 2 preds: ^bb5, ^bb7
    %34 = llvm.getelementptr %8[%28] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_7, %34 {alignment = 1 : i64} : i32, !llvm.ptr
    %35 = llvm.load %1 : !llvm.ptr -> i32
    %c2048_i32 = arith.constant 2048 : i32
    %36 = arith.cmpi ult, %35, %c2048_i32 : i32
    %37 = arith.extui %36 : i1 to i32
    %c0_i32_11 = arith.constant 0 : i32
    %38 = arith.cmpi ne, %37, %c0_i32_11 : i32
    cf.cond_br %38, ^bb9, ^bb10
  ^bb7:  // pred: ^bb5
    %c1_i32_12 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_12) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // 3 preds: ^bb19, ^bb25, ^bb29
    %39 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %40 = arith.extui %39 : i32 to i64
    %41 = arith.addi %40, %c0_i64 : i64
    %c4_i64_13 = arith.constant 4 : i64
    %42 = arith.addi %41, %c4_i64_13 : i64
    %c0_i32_14 = arith.constant 0 : i32
    %43 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_14) : (!llvm.ptr, i32) -> i32
    %44 = arith.extui %43 : i32 to i64
    %c65536_i64_15 = arith.constant 65536 : i64
    %45 = arith.muli %44, %c65536_i64_15 : i64
    %46 = arith.cmpi ult, %42, %45 : i64
    cf.cond_br %46, ^bb32, ^bb33
  ^bb9:  // pred: ^bb6
    %47 = llvm.load %2 : !llvm.ptr -> i32
    %48 = llvm.load %1 : !llvm.ptr -> i32
    %c63_i32 = arith.constant 63 : i32
    %49 = arith.andi %48, %c63_i32 : i32
    %c128_i32_16 = arith.constant 128 : i32
    %50 = arith.ori %49, %c128_i32_16 : i32
    %c13_i64 = arith.constant 13 : i64
    %51 = arith.extui %47 : i32 to i64
    %52 = arith.addi %51, %c13_i64 : i64
    %c1_i64 = arith.constant 1 : i64
    %53 = arith.addi %52, %c1_i64 : i64
    %c0_i32_17 = arith.constant 0 : i32
    %54 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_17) : (!llvm.ptr, i32) -> i32
    %55 = arith.extui %54 : i32 to i64
    %c65536_i64_18 = arith.constant 65536 : i64
    %56 = arith.muli %55, %c65536_i64_18 : i64
    %57 = arith.cmpi ult, %53, %56 : i64
    cf.cond_br %57, ^bb27, ^bb28
  ^bb10:  // pred: ^bb6
    %58 = llvm.load %1 : !llvm.ptr -> i32
    %c65536_i32 = arith.constant 65536 : i32
    %59 = arith.cmpi ult, %58, %c65536_i32 : i32
    %60 = arith.extui %59 : i1 to i32
    %c0_i32_19 = arith.constant 0 : i32
    %61 = arith.cmpi ne, %60, %c0_i32_19 : i32
    cf.cond_br %61, ^bb11, ^bb12
  ^bb11:  // pred: ^bb10
    %62 = llvm.load %2 : !llvm.ptr -> i32
    %63 = llvm.load %1 : !llvm.ptr -> i32
    %c63_i32_20 = arith.constant 63 : i32
    %64 = arith.andi %63, %c63_i32_20 : i32
    %c128_i32_21 = arith.constant 128 : i32
    %65 = arith.ori %64, %c128_i32_21 : i32
    %c14_i64 = arith.constant 14 : i64
    %66 = arith.extui %62 : i32 to i64
    %67 = arith.addi %66, %c14_i64 : i64
    %c1_i64_22 = arith.constant 1 : i64
    %68 = arith.addi %67, %c1_i64_22 : i64
    %c0_i32_23 = arith.constant 0 : i32
    %69 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_23) : (!llvm.ptr, i32) -> i32
    %70 = arith.extui %69 : i32 to i64
    %c65536_i64_24 = arith.constant 65536 : i64
    %71 = arith.muli %70, %c65536_i64_24 : i64
    %72 = arith.cmpi ult, %68, %71 : i64
    cf.cond_br %72, ^bb21, ^bb22
  ^bb12:  // pred: ^bb10
    %73 = llvm.load %2 : !llvm.ptr -> i32
    %74 = llvm.load %1 : !llvm.ptr -> i32
    %c63_i32_25 = arith.constant 63 : i32
    %75 = arith.andi %74, %c63_i32_25 : i32
    %c128_i32_26 = arith.constant 128 : i32
    %76 = arith.ori %75, %c128_i32_26 : i32
    %c15_i64 = arith.constant 15 : i64
    %77 = arith.extui %73 : i32 to i64
    %78 = arith.addi %77, %c15_i64 : i64
    %c1_i64_27 = arith.constant 1 : i64
    %79 = arith.addi %78, %c1_i64_27 : i64
    %c0_i32_28 = arith.constant 0 : i32
    %80 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_28) : (!llvm.ptr, i32) -> i32
    %81 = arith.extui %80 : i32 to i64
    %c65536_i64_29 = arith.constant 65536 : i64
    %82 = arith.muli %81, %c65536_i64_29 : i64
    %83 = arith.cmpi ult, %79, %82 : i64
    cf.cond_br %83, ^bb13, ^bb14
  ^bb13:  // 2 preds: ^bb12, ^bb14
    %84 = llvm.getelementptr %8[%78] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %85 = arith.trunci %76 : i32 to i8
    llvm.store volatile %85, %84 {alignment = 1 : i64} : i8, !llvm.ptr
    %86 = llvm.load %2 : !llvm.ptr -> i32
    %87 = llvm.load %1 : !llvm.ptr -> i32
    %c18_i32 = arith.constant 18 : i32
    %c31_i32 = arith.constant 31 : i32
    %88 = arith.cmpi ule, %c18_i32, %c31_i32 : i32
    %89 = scf.if %88 -> (i32) {
      %286 = arith.shrui %87, %c18_i32 : i32
      scf.yield %286 : i32
    } else {
      %c0_i32_126 = arith.constant 0 : i32
      scf.yield %c0_i32_126 : i32
    }
    %c240_i32 = arith.constant 240 : i32
    %90 = arith.ori %89, %c240_i32 : i32
    %c12_i64_30 = arith.constant 12 : i64
    %91 = arith.extui %86 : i32 to i64
    %92 = arith.addi %91, %c12_i64_30 : i64
    %c1_i64_31 = arith.constant 1 : i64
    %93 = arith.addi %92, %c1_i64_31 : i64
    %c0_i32_32 = arith.constant 0 : i32
    %94 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_32) : (!llvm.ptr, i32) -> i32
    %95 = arith.extui %94 : i32 to i64
    %c65536_i64_33 = arith.constant 65536 : i64
    %96 = arith.muli %95, %c65536_i64_33 : i64
    %97 = arith.cmpi ult, %93, %96 : i64
    cf.cond_br %97, ^bb15, ^bb16
  ^bb14:  // pred: ^bb12
    %c1_i32_34 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_34) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // 2 preds: ^bb13, ^bb16
    %98 = llvm.getelementptr %8[%92] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %99 = arith.trunci %90 : i32 to i8
    llvm.store volatile %99, %98 {alignment = 1 : i64} : i8, !llvm.ptr
    %100 = llvm.load %2 : !llvm.ptr -> i32
    %101 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i32 = arith.constant 6 : i32
    %c31_i32_35 = arith.constant 31 : i32
    %102 = arith.cmpi ule, %c6_i32, %c31_i32_35 : i32
    %103 = scf.if %102 -> (i32) {
      %286 = arith.shrui %101, %c6_i32 : i32
      scf.yield %286 : i32
    } else {
      %c0_i32_126 = arith.constant 0 : i32
      scf.yield %c0_i32_126 : i32
    }
    %c63_i32_36 = arith.constant 63 : i32
    %104 = arith.andi %103, %c63_i32_36 : i32
    %c128_i32_37 = arith.constant 128 : i32
    %105 = arith.ori %104, %c128_i32_37 : i32
    %c14_i64_38 = arith.constant 14 : i64
    %106 = arith.extui %100 : i32 to i64
    %107 = arith.addi %106, %c14_i64_38 : i64
    %c1_i64_39 = arith.constant 1 : i64
    %108 = arith.addi %107, %c1_i64_39 : i64
    %c0_i32_40 = arith.constant 0 : i32
    %109 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_40) : (!llvm.ptr, i32) -> i32
    %110 = arith.extui %109 : i32 to i64
    %c65536_i64_41 = arith.constant 65536 : i64
    %111 = arith.muli %110, %c65536_i64_41 : i64
    %112 = arith.cmpi ult, %108, %111 : i64
    cf.cond_br %112, ^bb17, ^bb18
  ^bb16:  // pred: ^bb13
    %c1_i32_42 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_42) : (i32) -> ()
    cf.br ^bb15
  ^bb17:  // 2 preds: ^bb15, ^bb18
    %113 = llvm.getelementptr %8[%107] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %114 = arith.trunci %105 : i32 to i8
    llvm.store volatile %114, %113 {alignment = 1 : i64} : i8, !llvm.ptr
    %115 = llvm.load %2 : !llvm.ptr -> i32
    %116 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %c31_i32_43 = arith.constant 31 : i32
    %117 = arith.cmpi ule, %c12_i32, %c31_i32_43 : i32
    %118 = scf.if %117 -> (i32) {
      %286 = arith.shrui %116, %c12_i32 : i32
      scf.yield %286 : i32
    } else {
      %c0_i32_126 = arith.constant 0 : i32
      scf.yield %c0_i32_126 : i32
    }
    %c63_i32_44 = arith.constant 63 : i32
    %119 = arith.andi %118, %c63_i32_44 : i32
    %c128_i32_45 = arith.constant 128 : i32
    %120 = arith.ori %119, %c128_i32_45 : i32
    %c13_i64_46 = arith.constant 13 : i64
    %121 = arith.extui %115 : i32 to i64
    %122 = arith.addi %121, %c13_i64_46 : i64
    %c1_i64_47 = arith.constant 1 : i64
    %123 = arith.addi %122, %c1_i64_47 : i64
    %c0_i32_48 = arith.constant 0 : i32
    %124 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_48) : (!llvm.ptr, i32) -> i32
    %125 = arith.extui %124 : i32 to i64
    %c65536_i64_49 = arith.constant 65536 : i64
    %126 = arith.muli %125, %c65536_i64_49 : i64
    %127 = arith.cmpi ult, %123, %126 : i64
    cf.cond_br %127, ^bb19, ^bb20
  ^bb18:  // pred: ^bb15
    %c1_i32_50 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_50) : (i32) -> ()
    cf.br ^bb17
  ^bb19:  // 2 preds: ^bb17, ^bb20
    %128 = llvm.getelementptr %8[%122] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %129 = arith.trunci %120 : i32 to i8
    llvm.store volatile %129, %128 {alignment = 1 : i64} : i8, !llvm.ptr
    %c4_i32 = arith.constant 4 : i32
    llvm.store %c4_i32, %1 : i32, !llvm.ptr
    cf.br ^bb8
  ^bb20:  // pred: ^bb17
    %c1_i32_51 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_51) : (i32) -> ()
    cf.br ^bb19
  ^bb21:  // 2 preds: ^bb11, ^bb22
    %130 = llvm.getelementptr %8[%67] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %131 = arith.trunci %65 : i32 to i8
    llvm.store volatile %131, %130 {alignment = 1 : i64} : i8, !llvm.ptr
    %132 = llvm.load %2 : !llvm.ptr -> i32
    %133 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32_52 = arith.constant 12 : i32
    %c31_i32_53 = arith.constant 31 : i32
    %134 = arith.cmpi ule, %c12_i32_52, %c31_i32_53 : i32
    %135 = scf.if %134 -> (i32) {
      %286 = arith.shrui %133, %c12_i32_52 : i32
      scf.yield %286 : i32
    } else {
      %c0_i32_126 = arith.constant 0 : i32
      scf.yield %c0_i32_126 : i32
    }
    %c224_i32 = arith.constant 224 : i32
    %136 = arith.ori %135, %c224_i32 : i32
    %c12_i64_54 = arith.constant 12 : i64
    %137 = arith.extui %132 : i32 to i64
    %138 = arith.addi %137, %c12_i64_54 : i64
    %c1_i64_55 = arith.constant 1 : i64
    %139 = arith.addi %138, %c1_i64_55 : i64
    %c0_i32_56 = arith.constant 0 : i32
    %140 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_56) : (!llvm.ptr, i32) -> i32
    %141 = arith.extui %140 : i32 to i64
    %c65536_i64_57 = arith.constant 65536 : i64
    %142 = arith.muli %141, %c65536_i64_57 : i64
    %143 = arith.cmpi ult, %139, %142 : i64
    cf.cond_br %143, ^bb23, ^bb24
  ^bb22:  // pred: ^bb11
    %c1_i32_58 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_58) : (i32) -> ()
    cf.br ^bb21
  ^bb23:  // 2 preds: ^bb21, ^bb24
    %144 = llvm.getelementptr %8[%138] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %145 = arith.trunci %136 : i32 to i8
    llvm.store volatile %145, %144 {alignment = 1 : i64} : i8, !llvm.ptr
    %146 = llvm.load %2 : !llvm.ptr -> i32
    %147 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i32_59 = arith.constant 6 : i32
    %c31_i32_60 = arith.constant 31 : i32
    %148 = arith.cmpi ule, %c6_i32_59, %c31_i32_60 : i32
    %149 = scf.if %148 -> (i32) {
      %286 = arith.shrui %147, %c6_i32_59 : i32
      scf.yield %286 : i32
    } else {
      %c0_i32_126 = arith.constant 0 : i32
      scf.yield %c0_i32_126 : i32
    }
    %c63_i32_61 = arith.constant 63 : i32
    %150 = arith.andi %149, %c63_i32_61 : i32
    %c128_i32_62 = arith.constant 128 : i32
    %151 = arith.ori %150, %c128_i32_62 : i32
    %c13_i64_63 = arith.constant 13 : i64
    %152 = arith.extui %146 : i32 to i64
    %153 = arith.addi %152, %c13_i64_63 : i64
    %c1_i64_64 = arith.constant 1 : i64
    %154 = arith.addi %153, %c1_i64_64 : i64
    %c0_i32_65 = arith.constant 0 : i32
    %155 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_65) : (!llvm.ptr, i32) -> i32
    %156 = arith.extui %155 : i32 to i64
    %c65536_i64_66 = arith.constant 65536 : i64
    %157 = arith.muli %156, %c65536_i64_66 : i64
    %158 = arith.cmpi ult, %154, %157 : i64
    cf.cond_br %158, ^bb25, ^bb26
  ^bb24:  // pred: ^bb21
    %c1_i32_67 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_67) : (i32) -> ()
    cf.br ^bb23
  ^bb25:  // 2 preds: ^bb23, ^bb26
    %159 = llvm.getelementptr %8[%153] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %160 = arith.trunci %151 : i32 to i8
    llvm.store volatile %160, %159 {alignment = 1 : i64} : i8, !llvm.ptr
    %c3_i32 = arith.constant 3 : i32
    llvm.store %c3_i32, %1 : i32, !llvm.ptr
    cf.br ^bb8
  ^bb26:  // pred: ^bb23
    %c1_i32_68 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_68) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // 2 preds: ^bb9, ^bb28
    %161 = llvm.getelementptr %8[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %162 = arith.trunci %50 : i32 to i8
    llvm.store volatile %162, %161 {alignment = 1 : i64} : i8, !llvm.ptr
    %163 = llvm.load %2 : !llvm.ptr -> i32
    %164 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i32_69 = arith.constant 6 : i32
    %c31_i32_70 = arith.constant 31 : i32
    %165 = arith.cmpi ule, %c6_i32_69, %c31_i32_70 : i32
    %166 = scf.if %165 -> (i32) {
      %286 = arith.shrui %164, %c6_i32_69 : i32
      scf.yield %286 : i32
    } else {
      %c0_i32_126 = arith.constant 0 : i32
      scf.yield %c0_i32_126 : i32
    }
    %c192_i32 = arith.constant 192 : i32
    %167 = arith.ori %166, %c192_i32 : i32
    %c12_i64_71 = arith.constant 12 : i64
    %168 = arith.extui %163 : i32 to i64
    %169 = arith.addi %168, %c12_i64_71 : i64
    %c1_i64_72 = arith.constant 1 : i64
    %170 = arith.addi %169, %c1_i64_72 : i64
    %c0_i32_73 = arith.constant 0 : i32
    %171 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_73) : (!llvm.ptr, i32) -> i32
    %172 = arith.extui %171 : i32 to i64
    %c65536_i64_74 = arith.constant 65536 : i64
    %173 = arith.muli %172, %c65536_i64_74 : i64
    %174 = arith.cmpi ult, %170, %173 : i64
    cf.cond_br %174, ^bb29, ^bb30
  ^bb28:  // pred: ^bb9
    %c1_i32_75 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_75) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // 2 preds: ^bb27, ^bb30
    %175 = llvm.getelementptr %8[%169] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %176 = arith.trunci %167 : i32 to i8
    llvm.store volatile %176, %175 {alignment = 1 : i64} : i8, !llvm.ptr
    %c2_i32 = arith.constant 2 : i32
    llvm.store %c2_i32, %1 : i32, !llvm.ptr
    cf.br ^bb8
  ^bb30:  // pred: ^bb27
    %c1_i32_76 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_76) : (i32) -> ()
    cf.br ^bb29
  ^bb31:  // 2 preds: ^bb34, ^bb37
    %177 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_77 = arith.constant 4 : i64
    %178 = arith.extui %177 : i32 to i64
    %179 = arith.addi %178, %c4_i64_77 : i64
    %c4_i64_78 = arith.constant 4 : i64
    %180 = arith.addi %179, %c4_i64_78 : i64
    %c0_i32_79 = arith.constant 0 : i32
    %181 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_79) : (!llvm.ptr, i32) -> i32
    %182 = arith.extui %181 : i32 to i64
    %c65536_i64_80 = arith.constant 65536 : i64
    %183 = arith.muli %182, %c65536_i64_80 : i64
    %184 = arith.cmpi ult, %180, %183 : i64
    cf.cond_br %184, ^bb39, ^bb40
  ^bb32:  // 2 preds: ^bb8, ^bb33
    %185 = llvm.getelementptr %8[%41] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %186 = llvm.load volatile %185 {alignment = 1 : i64} : !llvm.ptr -> i32
    %187 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_81 = arith.constant 8 : i64
    %188 = arith.extui %187 : i32 to i64
    %189 = arith.addi %188, %c8_i64_81 : i64
    %c4_i64_82 = arith.constant 4 : i64
    %190 = arith.addi %189, %c4_i64_82 : i64
    %c0_i32_83 = arith.constant 0 : i32
    %191 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_83) : (!llvm.ptr, i32) -> i32
    %192 = arith.extui %191 : i32 to i64
    %c65536_i64_84 = arith.constant 65536 : i64
    %193 = arith.muli %192, %c65536_i64_84 : i64
    %194 = arith.cmpi ult, %190, %193 : i64
    cf.cond_br %194, ^bb34, ^bb35
  ^bb33:  // pred: ^bb8
    %c1_i32_85 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_85) : (i32) -> ()
    cf.br ^bb32
  ^bb34:  // 2 preds: ^bb32, ^bb35
    %195 = llvm.getelementptr %8[%189] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %196 = llvm.load volatile %195 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %196, %3 : i32, !llvm.ptr
    %197 = arith.subi %186, %196 : i32
    %198 = llvm.load %1 : !llvm.ptr -> i32
    %199 = arith.cmpi uge, %197, %198 : i32
    %200 = arith.extui %199 : i1 to i32
    %c0_i32_86 = arith.constant 0 : i32
    %201 = arith.cmpi ne, %200, %c0_i32_86 : i32
    cf.cond_br %201, ^bb31, ^bb36
  ^bb35:  // pred: ^bb32
    %c1_i32_87 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_87) : (i32) -> ()
    cf.br ^bb34
  ^bb36:  // pred: ^bb34
    %202 = llvm.load %0 : !llvm.ptr -> i32
    %203 = llvm.load %3 : !llvm.ptr -> i32
    %204 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_88 = arith.constant 1 : i32
    %c1_i32_89 = arith.constant 1 : i32
    call @f117(%arg0, %202, %203, %204, %c1_i32_88, %c1_i32_89) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %205 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_90 = arith.constant 8 : i64
    %206 = arith.extui %205 : i32 to i64
    %207 = arith.addi %206, %c8_i64_90 : i64
    %c4_i64_91 = arith.constant 4 : i64
    %208 = arith.addi %207, %c4_i64_91 : i64
    %c0_i32_92 = arith.constant 0 : i32
    %209 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_92) : (!llvm.ptr, i32) -> i32
    %210 = arith.extui %209 : i32 to i64
    %c65536_i64_93 = arith.constant 65536 : i64
    %211 = arith.muli %210, %c65536_i64_93 : i64
    %212 = arith.cmpi ult, %208, %211 : i64
    cf.cond_br %212, ^bb37, ^bb38
  ^bb37:  // 2 preds: ^bb36, ^bb38
    %213 = llvm.getelementptr %8[%207] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %214 = llvm.load volatile %213 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %214, %3 : i32, !llvm.ptr
    cf.br ^bb31
  ^bb38:  // pred: ^bb36
    %c1_i32_94 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_94) : (i32) -> ()
    cf.br ^bb37
  ^bb39:  // 2 preds: ^bb31, ^bb40
    %215 = llvm.getelementptr %8[%179] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %216 = llvm.load volatile %215 {alignment = 1 : i64} : !llvm.ptr -> i32
    %217 = llvm.load %3 : !llvm.ptr -> i32
    %218 = arith.addi %216, %217 : i32
    %219 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32_95 = arith.constant 12 : i32
    %220 = arith.addi %219, %c12_i32_95 : i32
    %221 = llvm.load %1 : !llvm.ptr -> i32
    %222 = call @f161(%arg0, %218, %220, %221) : (!llvm.ptr, i32, i32, i32) -> i32
    %223 = llvm.load %0 : !llvm.ptr -> i32
    %224 = llvm.load %3 : !llvm.ptr -> i32
    %225 = llvm.load %1 : !llvm.ptr -> i32
    %226 = arith.addi %224, %225 : i32
    %c8_i64_96 = arith.constant 8 : i64
    %227 = arith.extui %223 : i32 to i64
    %228 = arith.addi %227, %c8_i64_96 : i64
    %c4_i64_97 = arith.constant 4 : i64
    %229 = arith.addi %228, %c4_i64_97 : i64
    %c0_i32_98 = arith.constant 0 : i32
    %230 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_98) : (!llvm.ptr, i32) -> i32
    %231 = arith.extui %230 : i32 to i64
    %c65536_i64_99 = arith.constant 65536 : i64
    %232 = arith.muli %231, %c65536_i64_99 : i64
    %233 = arith.cmpi ult, %229, %232 : i64
    cf.cond_br %233, ^bb41, ^bb42
  ^bb40:  // pred: ^bb31
    %c1_i32_100 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_100) : (i32) -> ()
    cf.br ^bb39
  ^bb41:  // 2 preds: ^bb39, ^bb42
    %234 = llvm.getelementptr %8[%228] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %226, %234 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb3
  ^bb42:  // pred: ^bb39
    %c1_i32_101 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_101) : (i32) -> ()
    cf.br ^bb41
  ^bb43:  // 2 preds: ^bb46, ^bb48
    %235 = llvm.load %0 : !llvm.ptr -> i32
    %236 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_102 = arith.constant 1 : i32
    %237 = arith.addi %236, %c1_i32_102 : i32
    %c8_i64_103 = arith.constant 8 : i64
    %238 = arith.extui %235 : i32 to i64
    %239 = arith.addi %238, %c8_i64_103 : i64
    %c4_i64_104 = arith.constant 4 : i64
    %240 = arith.addi %239, %c4_i64_104 : i64
    %c0_i32_105 = arith.constant 0 : i32
    %241 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_105) : (!llvm.ptr, i32) -> i32
    %242 = arith.extui %241 : i32 to i64
    %c65536_i64_106 = arith.constant 65536 : i64
    %243 = arith.muli %242, %c65536_i64_106 : i64
    %244 = arith.cmpi ult, %240, %243 : i64
    cf.cond_br %244, ^bb49, ^bb50
  ^bb44:  // 2 preds: ^bb4, ^bb45
    %245 = llvm.getelementptr %8[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %246 = llvm.load volatile %245 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %246, %3 : i32, !llvm.ptr
    %247 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_107 = arith.constant 0 : i64
    %248 = arith.extui %247 : i32 to i64
    %249 = arith.addi %248, %c0_i64_107 : i64
    %c4_i64_108 = arith.constant 4 : i64
    %250 = arith.addi %249, %c4_i64_108 : i64
    %c0_i32_109 = arith.constant 0 : i32
    %251 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_109) : (!llvm.ptr, i32) -> i32
    %252 = arith.extui %251 : i32 to i64
    %c65536_i64_110 = arith.constant 65536 : i64
    %253 = arith.muli %252, %c65536_i64_110 : i64
    %254 = arith.cmpi ult, %250, %253 : i64
    cf.cond_br %254, ^bb46, ^bb47
  ^bb45:  // pred: ^bb4
    %c1_i32_111 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_111) : (i32) -> ()
    cf.br ^bb44
  ^bb46:  // 2 preds: ^bb44, ^bb47
    %255 = llvm.getelementptr %8[%249] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %256 = llvm.load volatile %255 {alignment = 1 : i64} : !llvm.ptr -> i32
    %257 = arith.cmpi eq, %246, %256 : i32
    %258 = arith.extui %257 : i1 to i32
    %c0_i32_112 = arith.constant 0 : i32
    %259 = arith.cmpi eq, %258, %c0_i32_112 : i32
    %260 = arith.extui %259 : i1 to i32
    %c0_i32_113 = arith.constant 0 : i32
    %261 = arith.cmpi ne, %260, %c0_i32_113 : i32
    cf.cond_br %261, ^bb43, ^bb48
  ^bb47:  // pred: ^bb44
    %c1_i32_114 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_114) : (i32) -> ()
    cf.br ^bb46
  ^bb48:  // pred: ^bb46
    %262 = llvm.load %0 : !llvm.ptr -> i32
    call @f123(%arg0, %262) : (!llvm.ptr, i32) -> ()
    cf.br ^bb43
  ^bb49:  // 2 preds: ^bb43, ^bb50
    %263 = llvm.getelementptr %8[%239] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %237, %263 {alignment = 1 : i64} : i32, !llvm.ptr
    %264 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_115 = arith.constant 4 : i64
    %265 = arith.extui %264 : i32 to i64
    %266 = arith.addi %265, %c4_i64_115 : i64
    %c4_i64_116 = arith.constant 4 : i64
    %267 = arith.addi %266, %c4_i64_116 : i64
    %c0_i32_117 = arith.constant 0 : i32
    %268 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_117) : (!llvm.ptr, i32) -> i32
    %269 = arith.extui %268 : i32 to i64
    %c65536_i64_118 = arith.constant 65536 : i64
    %270 = arith.muli %269, %c65536_i64_118 : i64
    %271 = arith.cmpi ult, %267, %270 : i64
    cf.cond_br %271, ^bb51, ^bb52
  ^bb50:  // pred: ^bb43
    %c1_i32_119 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_119) : (i32) -> ()
    cf.br ^bb49
  ^bb51:  // 2 preds: ^bb49, ^bb52
    %272 = llvm.getelementptr %8[%266] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %273 = llvm.load volatile %272 {alignment = 1 : i64} : !llvm.ptr -> i32
    %274 = llvm.load %3 : !llvm.ptr -> i32
    %275 = arith.addi %273, %274 : i32
    %276 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_120 = arith.constant 0 : i64
    %277 = arith.extui %275 : i32 to i64
    %278 = arith.addi %277, %c0_i64_120 : i64
    %c1_i64_121 = arith.constant 1 : i64
    %279 = arith.addi %278, %c1_i64_121 : i64
    %c0_i32_122 = arith.constant 0 : i32
    %280 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_122) : (!llvm.ptr, i32) -> i32
    %281 = arith.extui %280 : i32 to i64
    %c65536_i64_123 = arith.constant 65536 : i64
    %282 = arith.muli %281, %c65536_i64_123 : i64
    %283 = arith.cmpi ult, %279, %282 : i64
    cf.cond_br %283, ^bb53, ^bb54
  ^bb52:  // pred: ^bb49
    %c1_i32_124 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_124) : (i32) -> ()
    cf.br ^bb51
  ^bb53:  // 2 preds: ^bb51, ^bb54
    %284 = llvm.getelementptr %8[%278] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %285 = arith.trunci %276 : i32 to i8
    llvm.store volatile %285, %284 {alignment = 1 : i64} : i8, !llvm.ptr
    cf.br ^bb3
  ^bb54:  // pred: ^bb51
    %c1_i32_125 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_125) : (i32) -> ()
    cf.br ^bb53
  }
  func.func @f123(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %5 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %7[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %10 = llvm.load %6 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %11 = arith.subi %10, %c32_i32 : i32
    llvm.store %11, %1 : i32, !llvm.ptr
    llvm.store %11, %6 : i32, !llvm.ptr
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c0_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %15 = arith.addi %14, %c4_i64 : i64
    %c0_i32_4 = arith.constant 0 : i32
    %16 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_4) : (!llvm.ptr, i32) -> i32
    %17 = arith.extui %16 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %18 = arith.muli %17, %c65536_i64 : i64
    %19 = arith.cmpi ult, %15, %18 : i64
    cf.cond_br %19, ^bb4, ^bb5
  ^bb2:  // pred: ^bb32
    return
  ^bb3:  // pred: ^bb4
    %20 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_5 = arith.constant 1 : i32
    %c31_i32 = arith.constant 31 : i32
    %21 = arith.cmpi ule, %c1_i32_5, %c31_i32 : i32
    %22 = scf.if %21 -> (i32) {
      %159 = arith.shli %20, %c1_i32_5 : i32
      scf.yield %159 : i32
    } else {
      %c0_i32_72 = arith.constant 0 : i32
      scf.yield %c0_i32_72 : i32
    }
    llvm.store %22, %3 : i32, !llvm.ptr
    %23 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_6 = arith.constant 1 : i32
    %24 = arith.addi %23, %c1_i32_6 : i32
    llvm.store %24, %4 : i32, !llvm.ptr
    %25 = llvm.load %3 : !llvm.ptr -> i32
    %26 = llvm.load %4 : !llvm.ptr -> i32
    %27 = arith.cmpi ugt, %25, %26 : i32
    %28 = arith.extui %27 : i1 to i32
    %c0_i32_7 = arith.constant 0 : i32
    %29 = arith.cmpi ne, %28, %c0_i32_7 : i32
    %30 = arith.select %29, %22, %24 : i32
    llvm.store %30, %3 : i32, !llvm.ptr
    %c8_i32 = arith.constant 8 : i32
    %31 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_8 = arith.constant 8 : i32
    %32 = arith.cmpi ugt, %31, %c8_i32_8 : i32
    %33 = arith.extui %32 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %34 = arith.cmpi ne, %33, %c0_i32_9 : i32
    %35 = arith.select %34, %30, %c8_i32 : i32
    llvm.store %35, %3 : i32, !llvm.ptr
    %c0_i32_10 = arith.constant 0 : i32
    %36 = arith.cmpi sge, %35, %c0_i32_10 : i32
    %37 = arith.extui %36 : i1 to i32
    %c0_i32_11 = arith.constant 0 : i32
    %38 = arith.cmpi ne, %37, %c0_i32_11 : i32
    cf.cond_br %38, ^bb7, ^bb8
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %39 = llvm.getelementptr %9[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %40 = llvm.load volatile %39 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %40, %2 : i32, !llvm.ptr
    %c-1_i32 = arith.constant -1 : i32
    %41 = arith.cmpi eq, %40, %c-1_i32 : i32
    %42 = arith.extui %41 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %43 = arith.cmpi eq, %42, %c0_i32_12 : i32
    %44 = arith.extui %43 : i1 to i32
    %c0_i32_13 = arith.constant 0 : i32
    %45 = arith.cmpi ne, %44, %c0_i32_13 : i32
    cf.cond_br %45, ^bb3, ^bb6
  ^bb5:  // pred: ^bb1
    %c1_i32_14 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_14) : (i32) -> ()
    cf.br ^bb4
  ^bb6:  // pred: ^bb4
    %c0_i32_15 = arith.constant 0 : i32
    %c0_i32_16 = arith.constant 0 : i32
    call @f143(%arg0, %c0_i32_15, %c0_i32_16) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb7:  // pred: ^bb3
    %46 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_17 = arith.constant 0 : i32
    %47 = arith.cmpi ne, %46, %c0_i32_17 : i32
    cf.cond_br %47, ^bb10, ^bb11
  ^bb8:  // pred: ^bb3
    %c0_i32_18 = arith.constant 0 : i32
    %c0_i32_19 = arith.constant 0 : i32
    call @f143(%arg0, %c0_i32_18, %c0_i32_19) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb9:  // 2 preds: ^bb11, ^bb16
    %48 = llvm.load %1 : !llvm.ptr -> i32
    %49 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %50 = arith.extui %48 : i32 to i64
    %51 = arith.addi %50, %c24_i64 : i64
    %c4_i64_20 = arith.constant 4 : i64
    %52 = arith.addi %51, %c4_i64_20 : i64
    %c0_i32_21 = arith.constant 0 : i32
    %53 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_21) : (!llvm.ptr, i32) -> i32
    %54 = arith.extui %53 : i32 to i64
    %c65536_i64_22 = arith.constant 65536 : i64
    %55 = arith.muli %54, %c65536_i64_22 : i64
    %56 = arith.cmpi ult, %52, %55 : i64
    cf.cond_br %56, ^bb18, ^bb19
  ^bb10:  // pred: ^bb7
    %57 = llvm.load %1 : !llvm.ptr -> i32
    %58 = llvm.load %2 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %59 = arith.extui %57 : i32 to i64
    %60 = arith.addi %59, %c28_i64 : i64
    %c4_i64_23 = arith.constant 4 : i64
    %61 = arith.addi %60, %c4_i64_23 : i64
    %c0_i32_24 = arith.constant 0 : i32
    %62 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_24) : (!llvm.ptr, i32) -> i32
    %63 = arith.extui %62 : i32 to i64
    %c65536_i64_25 = arith.constant 65536 : i64
    %64 = arith.muli %63, %c65536_i64_25 : i64
    %65 = arith.cmpi ult, %61, %64 : i64
    cf.cond_br %65, ^bb12, ^bb13
  ^bb11:  // pred: ^bb7
    %c0_i32_26 = arith.constant 0 : i32
    llvm.store %c0_i32_26, %2 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb12:  // 2 preds: ^bb10, ^bb13
    %66 = llvm.getelementptr %9[%60] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %58, %66 {alignment = 1 : i64} : i32, !llvm.ptr
    %67 = llvm.load %1 : !llvm.ptr -> i32
    %68 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_27 = arith.constant 4 : i64
    %69 = arith.extui %68 : i32 to i64
    %70 = arith.addi %69, %c4_i64_27 : i64
    %c4_i64_28 = arith.constant 4 : i64
    %71 = arith.addi %70, %c4_i64_28 : i64
    %c0_i32_29 = arith.constant 0 : i32
    %72 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_29) : (!llvm.ptr, i32) -> i32
    %73 = arith.extui %72 : i32 to i64
    %c65536_i64_30 = arith.constant 65536 : i64
    %74 = arith.muli %73, %c65536_i64_30 : i64
    %75 = arith.cmpi ult, %71, %74 : i64
    cf.cond_br %75, ^bb14, ^bb15
  ^bb13:  // pred: ^bb10
    %c1_i32_31 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_31) : (i32) -> ()
    cf.br ^bb12
  ^bb14:  // 2 preds: ^bb12, ^bb15
    %76 = llvm.getelementptr %9[%70] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %77 = llvm.load volatile %76 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %78 = arith.extui %67 : i32 to i64
    %79 = arith.addi %78, %c20_i64 : i64
    %c4_i64_32 = arith.constant 4 : i64
    %80 = arith.addi %79, %c4_i64_32 : i64
    %c0_i32_33 = arith.constant 0 : i32
    %81 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_33) : (!llvm.ptr, i32) -> i32
    %82 = arith.extui %81 : i32 to i64
    %c65536_i64_34 = arith.constant 65536 : i64
    %83 = arith.muli %82, %c65536_i64_34 : i64
    %84 = arith.cmpi ult, %80, %83 : i64
    cf.cond_br %84, ^bb16, ^bb17
  ^bb15:  // pred: ^bb12
    %c1_i32_35 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_35) : (i32) -> ()
    cf.br ^bb14
  ^bb16:  // 2 preds: ^bb14, ^bb17
    %85 = llvm.getelementptr %9[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %77, %85 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i32_36 = arith.constant 1 : i32
    llvm.store %c1_i32_36, %2 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb17:  // pred: ^bb14
    %c1_i32_37 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_37) : (i32) -> ()
    cf.br ^bb16
  ^bb18:  // 2 preds: ^bb9, ^bb19
    %86 = llvm.getelementptr %9[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %49, %86 {alignment = 1 : i64} : i32, !llvm.ptr
    %87 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_38 = arith.constant 8 : i32
    %88 = arith.addi %87, %c8_i32_38 : i32
    %c1_i32_39 = arith.constant 1 : i32
    %89 = llvm.load %3 : !llvm.ptr -> i32
    %90 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i32 = arith.constant 20 : i32
    %91 = arith.addi %90, %c20_i32 : i32
    call @f125(%arg0, %88, %c1_i32_39, %89, %91) : (!llvm.ptr, i32, i32, i32, i32) -> ()
    %92 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %93 = arith.extui %92 : i32 to i64
    %94 = arith.addi %93, %c8_i64 : i64
    %c4_i64_40 = arith.constant 4 : i64
    %95 = arith.addi %94, %c4_i64_40 : i64
    %c0_i32_41 = arith.constant 0 : i32
    %96 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_41) : (!llvm.ptr, i32) -> i32
    %97 = arith.extui %96 : i32 to i64
    %c65536_i64_42 = arith.constant 65536 : i64
    %98 = arith.muli %97, %c65536_i64_42 : i64
    %99 = arith.cmpi ult, %95, %98 : i64
    cf.cond_br %99, ^bb21, ^bb22
  ^bb19:  // pred: ^bb9
    %c1_i32_43 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_43) : (i32) -> ()
    cf.br ^bb18
  ^bb20:  // pred: ^bb21
    %100 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %101 = arith.extui %100 : i32 to i64
    %102 = arith.addi %101, %c12_i64 : i64
    %c4_i64_44 = arith.constant 4 : i64
    %103 = arith.addi %102, %c4_i64_44 : i64
    %c0_i32_45 = arith.constant 0 : i32
    %104 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_45) : (!llvm.ptr, i32) -> i32
    %105 = arith.extui %104 : i32 to i64
    %c65536_i64_46 = arith.constant 65536 : i64
    %106 = arith.muli %105, %c65536_i64_46 : i64
    %107 = arith.cmpi ult, %103, %106 : i64
    cf.cond_br %107, ^bb28, ^bb29
  ^bb21:  // 2 preds: ^bb18, ^bb22
    %108 = llvm.getelementptr %9[%94] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %109 = llvm.load volatile %108 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_47 = arith.constant 1 : i32
    %110 = arith.cmpi eq, %109, %c1_i32_47 : i32
    %111 = arith.extui %110 : i1 to i32
    %c0_i32_48 = arith.constant 0 : i32
    %112 = arith.cmpi eq, %111, %c0_i32_48 : i32
    %113 = arith.extui %112 : i1 to i32
    %c0_i32_49 = arith.constant 0 : i32
    %114 = arith.cmpi ne, %113, %c0_i32_49 : i32
    cf.cond_br %114, ^bb20, ^bb23
  ^bb22:  // pred: ^bb18
    %c1_i32_50 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_50) : (i32) -> ()
    cf.br ^bb21
  ^bb23:  // pred: ^bb21
    %115 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64_51 = arith.constant 12 : i64
    %116 = arith.extui %115 : i32 to i64
    %117 = arith.addi %116, %c12_i64_51 : i64
    %c4_i64_52 = arith.constant 4 : i64
    %118 = arith.addi %117, %c4_i64_52 : i64
    %c0_i32_53 = arith.constant 0 : i32
    %119 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_53) : (!llvm.ptr, i32) -> i32
    %120 = arith.extui %119 : i32 to i64
    %c65536_i64_54 = arith.constant 65536 : i64
    %121 = arith.muli %120, %c65536_i64_54 : i64
    %122 = arith.cmpi ult, %118, %121 : i64
    cf.cond_br %122, ^bb24, ^bb25
  ^bb24:  // 2 preds: ^bb23, ^bb25
    %123 = llvm.getelementptr %9[%117] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %124 = llvm.load volatile %123 {alignment = 1 : i64} : !llvm.ptr -> i32
    %125 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %126 = arith.extui %125 : i32 to i64
    %127 = arith.addi %126, %c16_i64 : i64
    %c4_i64_55 = arith.constant 4 : i64
    %128 = arith.addi %127, %c4_i64_55 : i64
    %c0_i32_56 = arith.constant 0 : i32
    %129 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_56) : (!llvm.ptr, i32) -> i32
    %130 = arith.extui %129 : i32 to i64
    %c65536_i64_57 = arith.constant 65536 : i64
    %131 = arith.muli %130, %c65536_i64_57 : i64
    %132 = arith.cmpi ult, %128, %131 : i64
    cf.cond_br %132, ^bb26, ^bb27
  ^bb25:  // pred: ^bb23
    %c1_i32_58 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_58) : (i32) -> ()
    cf.br ^bb24
  ^bb26:  // 2 preds: ^bb24, ^bb27
    %133 = llvm.getelementptr %9[%127] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %134 = llvm.load volatile %133 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f143(%arg0, %124, %134) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb27:  // pred: ^bb24
    %c1_i32_59 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_59) : (i32) -> ()
    cf.br ^bb26
  ^bb28:  // 2 preds: ^bb20, ^bb29
    %135 = llvm.getelementptr %9[%102] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %136 = llvm.load volatile %135 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %136, %2 : i32, !llvm.ptr
    %137 = llvm.load %0 : !llvm.ptr -> i32
    %138 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_60 = arith.constant 0 : i64
    %139 = arith.extui %137 : i32 to i64
    %140 = arith.addi %139, %c0_i64_60 : i64
    %c4_i64_61 = arith.constant 4 : i64
    %141 = arith.addi %140, %c4_i64_61 : i64
    %c0_i32_62 = arith.constant 0 : i32
    %142 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_62) : (!llvm.ptr, i32) -> i32
    %143 = arith.extui %142 : i32 to i64
    %c65536_i64_63 = arith.constant 65536 : i64
    %144 = arith.muli %143, %c65536_i64_63 : i64
    %145 = arith.cmpi ult, %141, %144 : i64
    cf.cond_br %145, ^bb30, ^bb31
  ^bb29:  // pred: ^bb20
    %c1_i32_64 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_64) : (i32) -> ()
    cf.br ^bb28
  ^bb30:  // 2 preds: ^bb28, ^bb31
    %146 = llvm.getelementptr %9[%140] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %138, %146 {alignment = 1 : i64} : i32, !llvm.ptr
    %147 = llvm.load %0 : !llvm.ptr -> i32
    %148 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_65 = arith.constant 4 : i64
    %149 = arith.extui %147 : i32 to i64
    %150 = arith.addi %149, %c4_i64_65 : i64
    %c4_i64_66 = arith.constant 4 : i64
    %151 = arith.addi %150, %c4_i64_66 : i64
    %c0_i32_67 = arith.constant 0 : i32
    %152 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_67) : (!llvm.ptr, i32) -> i32
    %153 = arith.extui %152 : i32 to i64
    %c65536_i64_68 = arith.constant 65536 : i64
    %154 = arith.muli %153, %c65536_i64_68 : i64
    %155 = arith.cmpi ult, %151, %154 : i64
    cf.cond_br %155, ^bb32, ^bb33
  ^bb31:  // pred: ^bb28
    %c1_i32_69 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_69) : (i32) -> ()
    cf.br ^bb30
  ^bb32:  // 2 preds: ^bb30, ^bb33
    %156 = llvm.getelementptr %9[%150] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %148, %156 {alignment = 1 : i64} : i32, !llvm.ptr
    %157 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i32_70 = arith.constant 32 : i32
    %158 = arith.addi %157, %c32_i32_70 : i32
    llvm.store %158, %6 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb33:  // pred: ^bb30
    %c1_i32_71 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_71) : (i32) -> ()
    cf.br ^bb32
  }
  func.func @f124(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %7 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %8 = arith.extui %7 : i32 to i64
    %9 = arith.addi %8, %c0_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %10 = arith.addi %9, %c4_i64 : i64
    %c0_i32_3 = arith.constant 0 : i32
    %11 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_3) : (!llvm.ptr, i32) -> i32
    %12 = arith.extui %11 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %13 = arith.muli %12, %c65536_i64 : i64
    %14 = arith.cmpi ult, %10, %13 : i64
    cf.cond_br %14, ^bb4, ^bb5
  ^bb2(%15: i32):  // pred: ^bb13
    return %15 : i32
  ^bb3:  // 2 preds: ^bb6, ^bb9
    %16 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_4 = arith.constant 4 : i64
    %17 = arith.extui %16 : i32 to i64
    %18 = arith.addi %17, %c4_i64_4 : i64
    %c4_i64_5 = arith.constant 4 : i64
    %19 = arith.addi %18, %c4_i64_5 : i64
    %c0_i32_6 = arith.constant 0 : i32
    %20 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_6) : (!llvm.ptr, i32) -> i32
    %21 = arith.extui %20 : i32 to i64
    %c65536_i64_7 = arith.constant 65536 : i64
    %22 = arith.muli %21, %c65536_i64_7 : i64
    %23 = arith.cmpi ult, %19, %22 : i64
    cf.cond_br %23, ^bb11, ^bb12
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %24 = llvm.getelementptr %6[%9] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %25 = llvm.load volatile %24 {alignment = 1 : i64} : !llvm.ptr -> i32
    %26 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %27 = arith.extui %26 : i32 to i64
    %28 = arith.addi %27, %c8_i64 : i64
    %c4_i64_8 = arith.constant 4 : i64
    %29 = arith.addi %28, %c4_i64_8 : i64
    %c0_i32_9 = arith.constant 0 : i32
    %30 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_9) : (!llvm.ptr, i32) -> i32
    %31 = arith.extui %30 : i32 to i64
    %c65536_i64_10 = arith.constant 65536 : i64
    %32 = arith.muli %31, %c65536_i64_10 : i64
    %33 = arith.cmpi ult, %29, %32 : i64
    cf.cond_br %33, ^bb6, ^bb7
  ^bb5:  // pred: ^bb1
    %c1_i32_11 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_11) : (i32) -> ()
    cf.br ^bb4
  ^bb6:  // 2 preds: ^bb4, ^bb7
    %34 = llvm.getelementptr %6[%28] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %35 = llvm.load volatile %34 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %35, %3 : i32, !llvm.ptr
    %36 = arith.subi %25, %35 : i32
    %37 = llvm.load %2 : !llvm.ptr -> i32
    %38 = arith.cmpi uge, %36, %37 : i32
    %39 = arith.extui %38 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %40 = arith.cmpi ne, %39, %c0_i32_12 : i32
    cf.cond_br %40, ^bb3, ^bb8
  ^bb7:  // pred: ^bb4
    %c1_i32_13 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_13) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // pred: ^bb6
    %41 = llvm.load %0 : !llvm.ptr -> i32
    %42 = llvm.load %3 : !llvm.ptr -> i32
    %43 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_14 = arith.constant 1 : i32
    %c1_i32_15 = arith.constant 1 : i32
    call @f117(%arg0, %41, %42, %43, %c1_i32_14, %c1_i32_15) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %44 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_16 = arith.constant 8 : i64
    %45 = arith.extui %44 : i32 to i64
    %46 = arith.addi %45, %c8_i64_16 : i64
    %c4_i64_17 = arith.constant 4 : i64
    %47 = arith.addi %46, %c4_i64_17 : i64
    %c0_i32_18 = arith.constant 0 : i32
    %48 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_18) : (!llvm.ptr, i32) -> i32
    %49 = arith.extui %48 : i32 to i64
    %c65536_i64_19 = arith.constant 65536 : i64
    %50 = arith.muli %49, %c65536_i64_19 : i64
    %51 = arith.cmpi ult, %47, %50 : i64
    cf.cond_br %51, ^bb9, ^bb10
  ^bb9:  // 2 preds: ^bb8, ^bb10
    %52 = llvm.getelementptr %6[%46] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %53 = llvm.load volatile %52 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %53, %3 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb10:  // pred: ^bb8
    %c1_i32_20 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_20) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb3, ^bb12
    %54 = llvm.getelementptr %6[%18] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %55 = llvm.load volatile %54 {alignment = 1 : i64} : !llvm.ptr -> i32
    %56 = llvm.load %3 : !llvm.ptr -> i32
    %57 = arith.addi %55, %56 : i32
    %58 = llvm.load %1 : !llvm.ptr -> i32
    %59 = llvm.load %2 : !llvm.ptr -> i32
    %60 = call @f161(%arg0, %57, %58, %59) : (!llvm.ptr, i32, i32, i32) -> i32
    %61 = llvm.load %0 : !llvm.ptr -> i32
    %62 = llvm.load %3 : !llvm.ptr -> i32
    %63 = llvm.load %2 : !llvm.ptr -> i32
    %64 = arith.addi %62, %63 : i32
    %c8_i64_21 = arith.constant 8 : i64
    %65 = arith.extui %61 : i32 to i64
    %66 = arith.addi %65, %c8_i64_21 : i64
    %c4_i64_22 = arith.constant 4 : i64
    %67 = arith.addi %66, %c4_i64_22 : i64
    %c0_i32_23 = arith.constant 0 : i32
    %68 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_23) : (!llvm.ptr, i32) -> i32
    %69 = arith.extui %68 : i32 to i64
    %c65536_i64_24 = arith.constant 65536 : i64
    %70 = arith.muli %69, %c65536_i64_24 : i64
    %71 = arith.cmpi ult, %67, %70 : i64
    cf.cond_br %71, ^bb13, ^bb14
  ^bb12:  // pred: ^bb3
    %c1_i32_25 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_25) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %72 = llvm.getelementptr %6[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %64, %72 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_26 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32_26 : i32)
  ^bb14:  // pred: ^bb11
    %c1_i32_27 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_27) : (i32) -> ()
    cf.br ^bb13
  }
  func.func @f125(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %5 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_4 = arith.constant 0 : i32
    %9 = arith.cmpi slt, %8, %c0_i32_4 : i32
    %10 = arith.extui %9 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %11 = arith.cmpi ne, %10, %c0_i32_5 : i32
    cf.cond_br %11, ^bb4, ^bb5
  ^bb2:  // 2 preds: ^bb32, ^bb40
    return
  ^bb3:  // 2 preds: ^bb36, ^bb38
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_6 = arith.constant 1 : i32
    %c0_i64 = arith.constant 0 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c0_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %15 = arith.addi %14, %c4_i64 : i64
    %c0_i32_7 = arith.constant 0 : i32
    %16 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_7) : (!llvm.ptr, i32) -> i32
    %17 = arith.extui %16 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %18 = arith.muli %17, %c65536_i64 : i64
    %19 = arith.cmpi ult, %15, %18 : i64
    cf.cond_br %19, ^bb40, ^bb41
  ^bb4:  // pred: ^bb1
    %20 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_8 = arith.constant 0 : i32
    %c4_i64_9 = arith.constant 4 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c4_i64_9 : i64
    %c4_i64_10 = arith.constant 4 : i64
    %23 = arith.addi %22, %c4_i64_10 : i64
    %c0_i32_11 = arith.constant 0 : i32
    %24 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_11) : (!llvm.ptr, i32) -> i32
    %25 = arith.extui %24 : i32 to i64
    %c65536_i64_12 = arith.constant 65536 : i64
    %26 = arith.muli %25, %c65536_i64_12 : i64
    %27 = arith.cmpi ult, %23, %26 : i64
    cf.cond_br %27, ^bb38, ^bb39
  ^bb5:  // pred: ^bb1
    %28 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64_13 = arith.constant 4 : i64
    %29 = arith.extui %28 : i32 to i64
    %30 = arith.addi %29, %c4_i64_13 : i64
    %c4_i64_14 = arith.constant 4 : i64
    %31 = arith.addi %30, %c4_i64_14 : i64
    %c0_i32_15 = arith.constant 0 : i32
    %32 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_15) : (!llvm.ptr, i32) -> i32
    %33 = arith.extui %32 : i32 to i64
    %c65536_i64_16 = arith.constant 65536 : i64
    %34 = arith.muli %33, %c65536_i64_16 : i64
    %35 = arith.cmpi ult, %31, %34 : i64
    cf.cond_br %35, ^bb9, ^bb10
  ^bb6:  // 4 preds: ^bb7, ^bb17, ^bb20, ^bb23
    %36 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_17 = arith.constant 0 : i32
    %37 = arith.cmpi eq, %36, %c0_i32_17 : i32
    %38 = arith.extui %37 : i1 to i32
    %c0_i32_18 = arith.constant 0 : i32
    %39 = arith.cmpi ne, %38, %c0_i32_18 : i32
    cf.cond_br %39, ^bb26, ^bb27
  ^bb7:  // 2 preds: ^bb18, ^bb24
    %40 = llvm.load %2 : !llvm.ptr -> i32
    %41 = llvm.load %1 : !llvm.ptr -> i32
    %42 = call @f77(%arg0, %40, %41) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %42, %3 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb8:  // pred: ^bb9
    %43 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_19 = arith.constant 0 : i32
    %44 = arith.cmpi ne, %43, %c0_i32_19 : i32
    cf.cond_br %44, ^bb22, ^bb23
  ^bb9:  // 2 preds: ^bb5, ^bb10
    %45 = llvm.getelementptr %7[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %46 = llvm.load volatile %45 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_20 = arith.constant 0 : i32
    %47 = arith.cmpi eq, %46, %c0_i32_20 : i32
    %48 = arith.extui %47 : i1 to i32
    %c0_i32_21 = arith.constant 0 : i32
    %49 = arith.cmpi ne, %48, %c0_i32_21 : i32
    cf.cond_br %49, ^bb8, ^bb11
  ^bb10:  // pred: ^bb5
    %c1_i32_22 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_22) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // pred: ^bb9
    %50 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %51 = arith.extui %50 : i32 to i64
    %52 = arith.addi %51, %c8_i64 : i64
    %c4_i64_23 = arith.constant 4 : i64
    %53 = arith.addi %52, %c4_i64_23 : i64
    %c0_i32_24 = arith.constant 0 : i32
    %54 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_24) : (!llvm.ptr, i32) -> i32
    %55 = arith.extui %54 : i32 to i64
    %c65536_i64_25 = arith.constant 65536 : i64
    %56 = arith.muli %55, %c65536_i64_25 : i64
    %57 = arith.cmpi ult, %53, %56 : i64
    cf.cond_br %57, ^bb13, ^bb14
  ^bb12:  // pred: ^bb13
    %58 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_26 = arith.constant 0 : i64
    %59 = arith.extui %58 : i32 to i64
    %60 = arith.addi %59, %c0_i64_26 : i64
    %c4_i64_27 = arith.constant 4 : i64
    %61 = arith.addi %60, %c4_i64_27 : i64
    %c0_i32_28 = arith.constant 0 : i32
    %62 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_28) : (!llvm.ptr, i32) -> i32
    %63 = arith.extui %62 : i32 to i64
    %c65536_i64_29 = arith.constant 65536 : i64
    %64 = arith.muli %63, %c65536_i64_29 : i64
    %65 = arith.cmpi ult, %61, %64 : i64
    cf.cond_br %65, ^bb20, ^bb21
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %66 = llvm.getelementptr %7[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %67 = llvm.load volatile %66 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %67, %4 : i32, !llvm.ptr
    %c0_i32_30 = arith.constant 0 : i32
    %68 = arith.cmpi ne, %67, %c0_i32_30 : i32
    cf.cond_br %68, ^bb12, ^bb15
  ^bb14:  // pred: ^bb11
    %c1_i32_31 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_31) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // pred: ^bb13
    %69 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_32 = arith.constant 0 : i32
    %70 = arith.cmpi ne, %69, %c0_i32_32 : i32
    cf.cond_br %70, ^bb16, ^bb17
  ^bb16:  // pred: ^bb15
    %c0_i32_33 = arith.constant 0 : i32
    %c1051609_i64 = arith.constant 1051609 : i64
    %71 = arith.extui %c0_i32_33 : i32 to i64
    %72 = arith.addi %71, %c1051609_i64 : i64
    %c1_i64 = arith.constant 1 : i64
    %73 = arith.addi %72, %c1_i64 : i64
    %c0_i32_34 = arith.constant 0 : i32
    %74 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_34) : (!llvm.ptr, i32) -> i32
    %75 = arith.extui %74 : i32 to i64
    %c65536_i64_35 = arith.constant 65536 : i64
    %76 = arith.muli %75, %c65536_i64_35 : i64
    %77 = arith.cmpi ult, %73, %76 : i64
    cf.cond_br %77, ^bb18, ^bb19
  ^bb17:  // pred: ^bb15
    %78 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %78, %3 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb18:  // 2 preds: ^bb16, ^bb19
    %79 = llvm.getelementptr %7[%72] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %80 = llvm.load volatile %79 {alignment = 1 : i64} : !llvm.ptr -> i8
    %81 = arith.extui %80 : i8 to i32
    cf.br ^bb7
  ^bb19:  // pred: ^bb16
    %c1_i32_36 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_36) : (i32) -> ()
    cf.br ^bb18
  ^bb20:  // 2 preds: ^bb12, ^bb21
    %82 = llvm.getelementptr %7[%60] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %83 = llvm.load volatile %82 {alignment = 1 : i64} : !llvm.ptr -> i32
    %84 = llvm.load %4 : !llvm.ptr -> i32
    %85 = llvm.load %1 : !llvm.ptr -> i32
    %86 = llvm.load %2 : !llvm.ptr -> i32
    %87 = call @f79(%arg0, %83, %84, %85, %86) : (!llvm.ptr, i32, i32, i32, i32) -> i32
    llvm.store %87, %3 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb21:  // pred: ^bb12
    %c1_i32_37 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_37) : (i32) -> ()
    cf.br ^bb20
  ^bb22:  // pred: ^bb8
    %c0_i32_38 = arith.constant 0 : i32
    %c1051609_i64_39 = arith.constant 1051609 : i64
    %88 = arith.extui %c0_i32_38 : i32 to i64
    %89 = arith.addi %88, %c1051609_i64_39 : i64
    %c1_i64_40 = arith.constant 1 : i64
    %90 = arith.addi %89, %c1_i64_40 : i64
    %c0_i32_41 = arith.constant 0 : i32
    %91 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_41) : (!llvm.ptr, i32) -> i32
    %92 = arith.extui %91 : i32 to i64
    %c65536_i64_42 = arith.constant 65536 : i64
    %93 = arith.muli %92, %c65536_i64_42 : i64
    %94 = arith.cmpi ult, %90, %93 : i64
    cf.cond_br %94, ^bb24, ^bb25
  ^bb23:  // pred: ^bb8
    %95 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %95, %3 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb24:  // 2 preds: ^bb22, ^bb25
    %96 = llvm.getelementptr %7[%89] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %97 = llvm.load volatile %96 {alignment = 1 : i64} : !llvm.ptr -> i8
    %98 = arith.extui %97 : i8 to i32
    cf.br ^bb7
  ^bb25:  // pred: ^bb22
    %c1_i32_43 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_43) : (i32) -> ()
    cf.br ^bb24
  ^bb26:  // pred: ^bb6
    %99 = llvm.load %0 : !llvm.ptr -> i32
    %100 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_44 = arith.constant 8 : i64
    %101 = arith.extui %99 : i32 to i64
    %102 = arith.addi %101, %c8_i64_44 : i64
    %c4_i64_45 = arith.constant 4 : i64
    %103 = arith.addi %102, %c4_i64_45 : i64
    %c0_i32_46 = arith.constant 0 : i32
    %104 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_46) : (!llvm.ptr, i32) -> i32
    %105 = arith.extui %104 : i32 to i64
    %c65536_i64_47 = arith.constant 65536 : i64
    %106 = arith.muli %105, %c65536_i64_47 : i64
    %107 = arith.cmpi ult, %103, %106 : i64
    cf.cond_br %107, ^bb34, ^bb35
  ^bb27:  // pred: ^bb6
    %108 = llvm.load %0 : !llvm.ptr -> i32
    %109 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_48 = arith.constant 8 : i64
    %110 = arith.extui %108 : i32 to i64
    %111 = arith.addi %110, %c8_i64_48 : i64
    %c4_i64_49 = arith.constant 4 : i64
    %112 = arith.addi %111, %c4_i64_49 : i64
    %c0_i32_50 = arith.constant 0 : i32
    %113 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_50) : (!llvm.ptr, i32) -> i32
    %114 = arith.extui %113 : i32 to i64
    %c65536_i64_51 = arith.constant 65536 : i64
    %115 = arith.muli %114, %c65536_i64_51 : i64
    %116 = arith.cmpi ult, %112, %115 : i64
    cf.cond_br %116, ^bb28, ^bb29
  ^bb28:  // 2 preds: ^bb27, ^bb29
    %117 = llvm.getelementptr %7[%111] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %109, %117 {alignment = 1 : i64} : i32, !llvm.ptr
    %118 = llvm.load %0 : !llvm.ptr -> i32
    %119 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64_52 = arith.constant 4 : i64
    %120 = arith.extui %118 : i32 to i64
    %121 = arith.addi %120, %c4_i64_52 : i64
    %c4_i64_53 = arith.constant 4 : i64
    %122 = arith.addi %121, %c4_i64_53 : i64
    %c0_i32_54 = arith.constant 0 : i32
    %123 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_54) : (!llvm.ptr, i32) -> i32
    %124 = arith.extui %123 : i32 to i64
    %c65536_i64_55 = arith.constant 65536 : i64
    %125 = arith.muli %124, %c65536_i64_55 : i64
    %126 = arith.cmpi ult, %122, %125 : i64
    cf.cond_br %126, ^bb30, ^bb31
  ^bb29:  // pred: ^bb27
    %c1_i32_56 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_56) : (i32) -> ()
    cf.br ^bb28
  ^bb30:  // 2 preds: ^bb28, ^bb31
    %127 = llvm.getelementptr %7[%121] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %119, %127 {alignment = 1 : i64} : i32, !llvm.ptr
    %128 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_57 = arith.constant 0 : i32
    %c0_i64_58 = arith.constant 0 : i64
    %129 = arith.extui %128 : i32 to i64
    %130 = arith.addi %129, %c0_i64_58 : i64
    %c4_i64_59 = arith.constant 4 : i64
    %131 = arith.addi %130, %c4_i64_59 : i64
    %c0_i32_60 = arith.constant 0 : i32
    %132 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_60) : (!llvm.ptr, i32) -> i32
    %133 = arith.extui %132 : i32 to i64
    %c65536_i64_61 = arith.constant 65536 : i64
    %134 = arith.muli %133, %c65536_i64_61 : i64
    %135 = arith.cmpi ult, %131, %134 : i64
    cf.cond_br %135, ^bb32, ^bb33
  ^bb31:  // pred: ^bb28
    %c1_i32_62 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_62) : (i32) -> ()
    cf.br ^bb30
  ^bb32:  // 2 preds: ^bb30, ^bb33
    %136 = llvm.getelementptr %7[%130] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_57, %136 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb33:  // pred: ^bb30
    %c1_i32_63 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_63) : (i32) -> ()
    cf.br ^bb32
  ^bb34:  // 2 preds: ^bb26, ^bb35
    %137 = llvm.getelementptr %7[%102] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %100, %137 {alignment = 1 : i64} : i32, !llvm.ptr
    %138 = llvm.load %0 : !llvm.ptr -> i32
    %139 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_64 = arith.constant 4 : i64
    %140 = arith.extui %138 : i32 to i64
    %141 = arith.addi %140, %c4_i64_64 : i64
    %c4_i64_65 = arith.constant 4 : i64
    %142 = arith.addi %141, %c4_i64_65 : i64
    %c0_i32_66 = arith.constant 0 : i32
    %143 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_66) : (!llvm.ptr, i32) -> i32
    %144 = arith.extui %143 : i32 to i64
    %c65536_i64_67 = arith.constant 65536 : i64
    %145 = arith.muli %144, %c65536_i64_67 : i64
    %146 = arith.cmpi ult, %142, %145 : i64
    cf.cond_br %146, ^bb36, ^bb37
  ^bb35:  // pred: ^bb26
    %c1_i32_68 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_68) : (i32) -> ()
    cf.br ^bb34
  ^bb36:  // 2 preds: ^bb34, ^bb37
    %147 = llvm.getelementptr %7[%141] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %139, %147 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb3
  ^bb37:  // pred: ^bb34
    %c1_i32_69 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_69) : (i32) -> ()
    cf.br ^bb36
  ^bb38:  // 2 preds: ^bb4, ^bb39
    %148 = llvm.getelementptr %7[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_8, %148 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb3
  ^bb39:  // pred: ^bb4
    %c1_i32_70 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_70) : (i32) -> ()
    cf.br ^bb38
  ^bb40:  // 2 preds: ^bb3, ^bb41
    %149 = llvm.getelementptr %7[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_6, %149 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb41:  // pred: ^bb3
    %c1_i32_71 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_71) : (i32) -> ()
    cf.br ^bb40
  }
  func.func @f126(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    call @f127(%arg0, %1) : (!llvm.ptr, i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f127(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %10 = arith.subi %9, %c16_i32 : i32
    llvm.store %10, %1 : i32, !llvm.ptr
    llvm.store %10, %5 : i32, !llvm.ptr
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %12 = arith.extui %11 : i32 to i64
    %13 = arith.addi %12, %c0_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %14 = arith.addi %13, %c4_i64 : i64
    %c0_i32_3 = arith.constant 0 : i32
    %15 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_3) : (!llvm.ptr, i32) -> i32
    %16 = arith.extui %15 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %17 = arith.muli %16, %c65536_i64 : i64
    %18 = arith.cmpi ult, %14, %17 : i64
    cf.cond_br %18, ^bb3, ^bb4
  ^bb2:  // no predecessors
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %19 = llvm.getelementptr %8[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %20 = llvm.load volatile %19 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %20, %2 : i32, !llvm.ptr
    %c12_i64 = arith.constant 12 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c12_i64 : i64
    %c4_i64_4 = arith.constant 4 : i64
    %23 = arith.addi %22, %c4_i64_4 : i64
    %c0_i32_5 = arith.constant 0 : i32
    %24 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_5) : (!llvm.ptr, i32) -> i32
    %25 = arith.extui %24 : i32 to i64
    %c65536_i64_6 = arith.constant 65536 : i64
    %26 = arith.muli %25, %c65536_i64_6 : i64
    %27 = arith.cmpi ult, %23, %26 : i64
    cf.cond_br %27, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c1_i32_7 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_7) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %28 = llvm.getelementptr %8[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %29 = llvm.load volatile %28 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %29, %3 : i32, !llvm.ptr
    %30 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_8 = arith.constant 4 : i64
    %31 = arith.extui %30 : i32 to i64
    %32 = arith.addi %31, %c4_i64_8 : i64
    %c4_i64_9 = arith.constant 4 : i64
    %33 = arith.addi %32, %c4_i64_9 : i64
    %c0_i32_10 = arith.constant 0 : i32
    %34 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_10) : (!llvm.ptr, i32) -> i32
    %35 = arith.extui %34 : i32 to i64
    %c65536_i64_11 = arith.constant 65536 : i64
    %36 = arith.muli %35, %c65536_i64_11 : i64
    %37 = arith.cmpi ult, %33, %36 : i64
    cf.cond_br %37, ^bb11, ^bb12
  ^bb6:  // pred: ^bb3
    %c1_i32_12 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_12) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb13, ^bb19
    %38 = llvm.load %1 : !llvm.ptr -> i32
    %39 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64_13 = arith.constant 4 : i64
    %40 = arith.extui %38 : i32 to i64
    %41 = arith.addi %40, %c4_i64_13 : i64
    %c4_i64_14 = arith.constant 4 : i64
    %42 = arith.addi %41, %c4_i64_14 : i64
    %c0_i32_15 = arith.constant 0 : i32
    %43 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_15) : (!llvm.ptr, i32) -> i32
    %44 = arith.extui %43 : i32 to i64
    %c65536_i64_16 = arith.constant 65536 : i64
    %45 = arith.muli %44, %c65536_i64_16 : i64
    %46 = arith.cmpi ult, %42, %45 : i64
    cf.cond_br %46, ^bb33, ^bb34
  ^bb8:  // 3 preds: ^bb9, ^bb10, ^bb11
    %47 = llvm.load %1 : !llvm.ptr -> i32
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %c0_i64_17 = arith.constant 0 : i64
    %48 = arith.extui %47 : i32 to i64
    %49 = arith.addi %48, %c0_i64_17 : i64
    %c4_i64_18 = arith.constant 4 : i64
    %50 = arith.addi %49, %c4_i64_18 : i64
    %c0_i32_19 = arith.constant 0 : i32
    %51 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_19) : (!llvm.ptr, i32) -> i32
    %52 = arith.extui %51 : i32 to i64
    %c65536_i64_20 = arith.constant 65536 : i64
    %53 = arith.muli %52, %c65536_i64_20 : i64
    %54 = arith.cmpi ult, %50, %53 : i64
    cf.cond_br %54, ^bb21, ^bb22
  ^bb9:  // pred: ^bb11
    %55 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_21 = arith.constant 0 : i32
    %56 = arith.cmpi ne, %55, %c0_i32_21 : i32
    cf.cond_br %56, ^bb8, ^bb14
  ^bb10:  // pred: ^bb11
    %57 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_22 = arith.constant 0 : i32
    %58 = arith.cmpi ne, %57, %c0_i32_22 : i32
    cf.cond_br %58, ^bb8, ^bb13
  ^bb11:  // 2 preds: ^bb5, ^bb12
    %59 = llvm.getelementptr %8[%32] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %60 = llvm.load volatile %59 {alignment = 1 : i64} : !llvm.ptr -> i32
    cf.switch %60 : i32, [
      default: ^bb8,
      0: ^bb10,
      1: ^bb9
    ]
  ^bb12:  // pred: ^bb5
    %c1_i32_23 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_23) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // pred: ^bb10
    %c1_i32_24 = arith.constant 1 : i32
    llvm.store %c1_i32_24, %2 : i32, !llvm.ptr
    %c0_i32_25 = arith.constant 0 : i32
    llvm.store %c0_i32_25, %3 : i32, !llvm.ptr
    cf.br ^bb7
  ^bb14:  // pred: ^bb9
    %61 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_26 = arith.constant 0 : i64
    %62 = arith.extui %61 : i32 to i64
    %63 = arith.addi %62, %c0_i64_26 : i64
    %c4_i64_27 = arith.constant 4 : i64
    %64 = arith.addi %63, %c4_i64_27 : i64
    %c0_i32_28 = arith.constant 0 : i32
    %65 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_28) : (!llvm.ptr, i32) -> i32
    %66 = arith.extui %65 : i32 to i64
    %c65536_i64_29 = arith.constant 65536 : i64
    %67 = arith.muli %66, %c65536_i64_29 : i64
    %68 = arith.cmpi ult, %64, %67 : i64
    cf.cond_br %68, ^bb15, ^bb16
  ^bb15:  // 2 preds: ^bb14, ^bb16
    %69 = llvm.getelementptr %8[%63] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %70 = llvm.load volatile %69 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %70, %2 : i32, !llvm.ptr
    %c4_i64_30 = arith.constant 4 : i64
    %71 = arith.extui %70 : i32 to i64
    %72 = arith.addi %71, %c4_i64_30 : i64
    %c4_i64_31 = arith.constant 4 : i64
    %73 = arith.addi %72, %c4_i64_31 : i64
    %c0_i32_32 = arith.constant 0 : i32
    %74 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_32) : (!llvm.ptr, i32) -> i32
    %75 = arith.extui %74 : i32 to i64
    %c65536_i64_33 = arith.constant 65536 : i64
    %76 = arith.muli %75, %c65536_i64_33 : i64
    %77 = arith.cmpi ult, %73, %76 : i64
    cf.cond_br %77, ^bb17, ^bb18
  ^bb16:  // pred: ^bb14
    %c1_i32_34 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_34) : (i32) -> ()
    cf.br ^bb15
  ^bb17:  // 2 preds: ^bb15, ^bb18
    %78 = llvm.getelementptr %8[%72] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %79 = llvm.load volatile %78 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %79, %3 : i32, !llvm.ptr
    %80 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_35 = arith.constant 0 : i64
    %81 = arith.extui %80 : i32 to i64
    %82 = arith.addi %81, %c0_i64_35 : i64
    %c4_i64_36 = arith.constant 4 : i64
    %83 = arith.addi %82, %c4_i64_36 : i64
    %c0_i32_37 = arith.constant 0 : i32
    %84 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_37) : (!llvm.ptr, i32) -> i32
    %85 = arith.extui %84 : i32 to i64
    %c65536_i64_38 = arith.constant 65536 : i64
    %86 = arith.muli %85, %c65536_i64_38 : i64
    %87 = arith.cmpi ult, %83, %86 : i64
    cf.cond_br %87, ^bb19, ^bb20
  ^bb18:  // pred: ^bb15
    %c1_i32_39 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_39) : (i32) -> ()
    cf.br ^bb17
  ^bb19:  // 2 preds: ^bb17, ^bb20
    %88 = llvm.getelementptr %8[%82] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %89 = llvm.load volatile %88 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %89, %2 : i32, !llvm.ptr
    cf.br ^bb7
  ^bb20:  // pred: ^bb17
    %c1_i32_40 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_40) : (i32) -> ()
    cf.br ^bb19
  ^bb21:  // 2 preds: ^bb8, ^bb22
    %90 = llvm.getelementptr %8[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-2147483648_i32, %90 {alignment = 1 : i64} : i32, !llvm.ptr
    %91 = llvm.load %1 : !llvm.ptr -> i32
    %92 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64_41 = arith.constant 12 : i64
    %93 = arith.extui %91 : i32 to i64
    %94 = arith.addi %93, %c12_i64_41 : i64
    %c4_i64_42 = arith.constant 4 : i64
    %95 = arith.addi %94, %c4_i64_42 : i64
    %c0_i32_43 = arith.constant 0 : i32
    %96 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_43) : (!llvm.ptr, i32) -> i32
    %97 = arith.extui %96 : i32 to i64
    %c65536_i64_44 = arith.constant 65536 : i64
    %98 = arith.muli %97, %c65536_i64_44 : i64
    %99 = arith.cmpi ult, %95, %98 : i64
    cf.cond_br %99, ^bb23, ^bb24
  ^bb22:  // pred: ^bb8
    %c1_i32_45 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_45) : (i32) -> ()
    cf.br ^bb21
  ^bb23:  // 2 preds: ^bb21, ^bb24
    %100 = llvm.getelementptr %8[%94] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %92, %100 {alignment = 1 : i64} : i32, !llvm.ptr
    %101 = llvm.load %1 : !llvm.ptr -> i32
    %c1051020_i32 = arith.constant 1051020 : i32
    %102 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_46 = arith.constant 4 : i64
    %103 = arith.extui %102 : i32 to i64
    %104 = arith.addi %103, %c4_i64_46 : i64
    %c4_i64_47 = arith.constant 4 : i64
    %105 = arith.addi %104, %c4_i64_47 : i64
    %c0_i32_48 = arith.constant 0 : i32
    %106 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_48) : (!llvm.ptr, i32) -> i32
    %107 = arith.extui %106 : i32 to i64
    %c65536_i64_49 = arith.constant 65536 : i64
    %108 = arith.muli %107, %c65536_i64_49 : i64
    %109 = arith.cmpi ult, %105, %108 : i64
    cf.cond_br %109, ^bb25, ^bb26
  ^bb24:  // pred: ^bb21
    %c1_i32_50 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_50) : (i32) -> ()
    cf.br ^bb23
  ^bb25:  // 2 preds: ^bb23, ^bb26
    %110 = llvm.getelementptr %8[%104] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %111 = llvm.load volatile %110 {alignment = 1 : i64} : !llvm.ptr -> i32
    %112 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %113 = arith.extui %112 : i32 to i64
    %114 = arith.addi %113, %c8_i64 : i64
    %c4_i64_51 = arith.constant 4 : i64
    %115 = arith.addi %114, %c4_i64_51 : i64
    %c0_i32_52 = arith.constant 0 : i32
    %116 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_52) : (!llvm.ptr, i32) -> i32
    %117 = arith.extui %116 : i32 to i64
    %c65536_i64_53 = arith.constant 65536 : i64
    %118 = arith.muli %117, %c65536_i64_53 : i64
    %119 = arith.cmpi ult, %115, %118 : i64
    cf.cond_br %119, ^bb27, ^bb28
  ^bb26:  // pred: ^bb23
    %c1_i32_54 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_54) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // 2 preds: ^bb25, ^bb28
    %120 = llvm.getelementptr %8[%114] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %121 = llvm.load volatile %120 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %121, %0 : i32, !llvm.ptr
    %c8_i64_55 = arith.constant 8 : i64
    %122 = arith.extui %121 : i32 to i64
    %123 = arith.addi %122, %c8_i64_55 : i64
    %c1_i64 = arith.constant 1 : i64
    %124 = arith.addi %123, %c1_i64 : i64
    %c0_i32_56 = arith.constant 0 : i32
    %125 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_56) : (!llvm.ptr, i32) -> i32
    %126 = arith.extui %125 : i32 to i64
    %c65536_i64_57 = arith.constant 65536 : i64
    %127 = arith.muli %126, %c65536_i64_57 : i64
    %128 = arith.cmpi ult, %124, %127 : i64
    cf.cond_br %128, ^bb29, ^bb30
  ^bb28:  // pred: ^bb25
    %c1_i32_58 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_58) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // 2 preds: ^bb27, ^bb30
    %129 = llvm.getelementptr %8[%123] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %130 = llvm.load volatile %129 {alignment = 1 : i64} : !llvm.ptr -> i8
    %131 = arith.extui %130 : i8 to i32
    %132 = llvm.load %0 : !llvm.ptr -> i32
    %c9_i64 = arith.constant 9 : i64
    %133 = arith.extui %132 : i32 to i64
    %134 = arith.addi %133, %c9_i64 : i64
    %c1_i64_59 = arith.constant 1 : i64
    %135 = arith.addi %134, %c1_i64_59 : i64
    %c0_i32_60 = arith.constant 0 : i32
    %136 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_60) : (!llvm.ptr, i32) -> i32
    %137 = arith.extui %136 : i32 to i64
    %c65536_i64_61 = arith.constant 65536 : i64
    %138 = arith.muli %137, %c65536_i64_61 : i64
    %139 = arith.cmpi ult, %135, %138 : i64
    cf.cond_br %139, ^bb31, ^bb32
  ^bb30:  // pred: ^bb27
    %c1_i32_62 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_62) : (i32) -> ()
    cf.br ^bb29
  ^bb31:  // 2 preds: ^bb29, ^bb32
    %140 = llvm.getelementptr %8[%134] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %141 = llvm.load volatile %140 {alignment = 1 : i64} : !llvm.ptr -> i8
    %142 = arith.extui %141 : i8 to i32
    call @f138(%arg0, %101, %c1051020_i32, %111, %131, %142) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    llvm.unreachable
  ^bb32:  // pred: ^bb29
    %c1_i32_63 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_63) : (i32) -> ()
    cf.br ^bb31
  ^bb33:  // 2 preds: ^bb7, ^bb34
    %143 = llvm.getelementptr %8[%41] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %39, %143 {alignment = 1 : i64} : i32, !llvm.ptr
    %144 = llvm.load %1 : !llvm.ptr -> i32
    %145 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_64 = arith.constant 0 : i64
    %146 = arith.extui %144 : i32 to i64
    %147 = arith.addi %146, %c0_i64_64 : i64
    %c4_i64_65 = arith.constant 4 : i64
    %148 = arith.addi %147, %c4_i64_65 : i64
    %c0_i32_66 = arith.constant 0 : i32
    %149 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_66) : (!llvm.ptr, i32) -> i32
    %150 = arith.extui %149 : i32 to i64
    %c65536_i64_67 = arith.constant 65536 : i64
    %151 = arith.muli %150, %c65536_i64_67 : i64
    %152 = arith.cmpi ult, %148, %151 : i64
    cf.cond_br %152, ^bb35, ^bb36
  ^bb34:  // pred: ^bb7
    %c1_i32_68 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_68) : (i32) -> ()
    cf.br ^bb33
  ^bb35:  // 2 preds: ^bb33, ^bb36
    %153 = llvm.getelementptr %8[%147] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %145, %153 {alignment = 1 : i64} : i32, !llvm.ptr
    %154 = llvm.load %1 : !llvm.ptr -> i32
    %c1050992_i32 = arith.constant 1050992 : i32
    %155 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_69 = arith.constant 4 : i64
    %156 = arith.extui %155 : i32 to i64
    %157 = arith.addi %156, %c4_i64_69 : i64
    %c4_i64_70 = arith.constant 4 : i64
    %158 = arith.addi %157, %c4_i64_70 : i64
    %c0_i32_71 = arith.constant 0 : i32
    %159 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_71) : (!llvm.ptr, i32) -> i32
    %160 = arith.extui %159 : i32 to i64
    %c65536_i64_72 = arith.constant 65536 : i64
    %161 = arith.muli %160, %c65536_i64_72 : i64
    %162 = arith.cmpi ult, %158, %161 : i64
    cf.cond_br %162, ^bb37, ^bb38
  ^bb36:  // pred: ^bb33
    %c1_i32_73 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_73) : (i32) -> ()
    cf.br ^bb35
  ^bb37:  // 2 preds: ^bb35, ^bb38
    %163 = llvm.getelementptr %8[%157] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %164 = llvm.load volatile %163 {alignment = 1 : i64} : !llvm.ptr -> i32
    %165 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_74 = arith.constant 8 : i64
    %166 = arith.extui %165 : i32 to i64
    %167 = arith.addi %166, %c8_i64_74 : i64
    %c4_i64_75 = arith.constant 4 : i64
    %168 = arith.addi %167, %c4_i64_75 : i64
    %c0_i32_76 = arith.constant 0 : i32
    %169 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_76) : (!llvm.ptr, i32) -> i32
    %170 = arith.extui %169 : i32 to i64
    %c65536_i64_77 = arith.constant 65536 : i64
    %171 = arith.muli %170, %c65536_i64_77 : i64
    %172 = arith.cmpi ult, %168, %171 : i64
    cf.cond_br %172, ^bb39, ^bb40
  ^bb38:  // pred: ^bb35
    %c1_i32_78 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_78) : (i32) -> ()
    cf.br ^bb37
  ^bb39:  // 2 preds: ^bb37, ^bb40
    %173 = llvm.getelementptr %8[%167] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %174 = llvm.load volatile %173 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %174, %0 : i32, !llvm.ptr
    %c8_i64_79 = arith.constant 8 : i64
    %175 = arith.extui %174 : i32 to i64
    %176 = arith.addi %175, %c8_i64_79 : i64
    %c1_i64_80 = arith.constant 1 : i64
    %177 = arith.addi %176, %c1_i64_80 : i64
    %c0_i32_81 = arith.constant 0 : i32
    %178 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_81) : (!llvm.ptr, i32) -> i32
    %179 = arith.extui %178 : i32 to i64
    %c65536_i64_82 = arith.constant 65536 : i64
    %180 = arith.muli %179, %c65536_i64_82 : i64
    %181 = arith.cmpi ult, %177, %180 : i64
    cf.cond_br %181, ^bb41, ^bb42
  ^bb40:  // pred: ^bb37
    %c1_i32_83 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_83) : (i32) -> ()
    cf.br ^bb39
  ^bb41:  // 2 preds: ^bb39, ^bb42
    %182 = llvm.getelementptr %8[%176] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %183 = llvm.load volatile %182 {alignment = 1 : i64} : !llvm.ptr -> i8
    %184 = arith.extui %183 : i8 to i32
    %185 = llvm.load %0 : !llvm.ptr -> i32
    %c9_i64_84 = arith.constant 9 : i64
    %186 = arith.extui %185 : i32 to i64
    %187 = arith.addi %186, %c9_i64_84 : i64
    %c1_i64_85 = arith.constant 1 : i64
    %188 = arith.addi %187, %c1_i64_85 : i64
    %c0_i32_86 = arith.constant 0 : i32
    %189 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_86) : (!llvm.ptr, i32) -> i32
    %190 = arith.extui %189 : i32 to i64
    %c65536_i64_87 = arith.constant 65536 : i64
    %191 = arith.muli %190, %c65536_i64_87 : i64
    %192 = arith.cmpi ult, %188, %191 : i64
    cf.cond_br %192, ^bb43, ^bb44
  ^bb42:  // pred: ^bb39
    %c1_i32_88 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_88) : (i32) -> ()
    cf.br ^bb41
  ^bb43:  // 2 preds: ^bb41, ^bb44
    %193 = llvm.getelementptr %8[%187] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %194 = llvm.load volatile %193 {alignment = 1 : i64} : !llvm.ptr -> i8
    %195 = arith.extui %194 : i8 to i32
    call @f138(%arg0, %154, %c1050992_i32, %164, %184, %195) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    llvm.unreachable
  ^bb44:  // pred: ^bb41
    %c1_i32_89 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_89) : (i32) -> ()
    cf.br ^bb43
  }
  func.func @f128(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %4 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %9 = arith.subi %8, %c48_i32 : i32
    llvm.store %9, %2 : i32, !llvm.ptr
    llvm.store %9, %4 : i32, !llvm.ptr
    %c0_i32_2 = arith.constant 0 : i32
    %c1051608_i64 = arith.constant 1051608 : i64
    %10 = arith.extui %c0_i32_2 : i32 to i64
    %11 = arith.addi %10, %c1051608_i64 : i64
    %c1_i64 = arith.constant 1 : i64
    %12 = arith.addi %11, %c1_i64 : i64
    %c0_i32_3 = arith.constant 0 : i32
    %13 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_3) : (!llvm.ptr, i32) -> i32
    %14 = arith.extui %13 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %15 = arith.muli %14, %c65536_i64 : i64
    %16 = arith.cmpi ult, %12, %15 : i64
    cf.cond_br %16, ^bb4, ^bb5
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // pred: ^bb4
    %17 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i32_4 = arith.constant 48 : i32
    %18 = arith.addi %17, %c48_i32_4 : i32
    llvm.store %18, %4 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %19 = llvm.getelementptr %7[%11] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %20 = llvm.load volatile %19 {alignment = 1 : i64} : !llvm.ptr -> i8
    %21 = arith.extui %20 : i8 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %22 = arith.cmpi eq, %21, %c0_i32_5 : i32
    %23 = arith.extui %22 : i1 to i32
    %c0_i32_6 = arith.constant 0 : i32
    %24 = arith.cmpi ne, %23, %c0_i32_6 : i32
    cf.cond_br %24, ^bb3, ^bb6
  ^bb5:  // pred: ^bb1
    %c1_i32_7 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_7) : (i32) -> ()
    cf.br ^bb4
  ^bb6:  // pred: ^bb4
    %25 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c12_i64 = arith.constant 12 : i64
    %26 = arith.extui %25 : i32 to i64
    %27 = arith.addi %26, %c12_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %28 = arith.addi %27, %c4_i64 : i64
    %c0_i32_8 = arith.constant 0 : i32
    %29 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_8) : (!llvm.ptr, i32) -> i32
    %30 = arith.extui %29 : i32 to i64
    %c65536_i64_9 = arith.constant 65536 : i64
    %31 = arith.muli %30, %c65536_i64_9 : i64
    %32 = arith.cmpi ult, %28, %31 : i64
    cf.cond_br %32, ^bb7, ^bb8
  ^bb7:  // 2 preds: ^bb6, ^bb8
    %33 = llvm.getelementptr %7[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i32, %33 {alignment = 1 : i64} : i32, !llvm.ptr
    %34 = llvm.load %2 : !llvm.ptr -> i32
    %c1050912_i32 = arith.constant 1050912 : i32
    %c8_i64 = arith.constant 8 : i64
    %35 = arith.extui %34 : i32 to i64
    %36 = arith.addi %35, %c8_i64 : i64
    %c4_i64_10 = arith.constant 4 : i64
    %37 = arith.addi %36, %c4_i64_10 : i64
    %c0_i32_11 = arith.constant 0 : i32
    %38 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_11) : (!llvm.ptr, i32) -> i32
    %39 = arith.extui %38 : i32 to i64
    %c65536_i64_12 = arith.constant 65536 : i64
    %40 = arith.muli %39, %c65536_i64_12 : i64
    %41 = arith.cmpi ult, %37, %40 : i64
    cf.cond_br %41, ^bb9, ^bb10
  ^bb8:  // pred: ^bb6
    %c1_i32_13 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_13) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %42 = llvm.getelementptr %7[%36] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1050912_i32, %42 {alignment = 1 : i64} : i32, !llvm.ptr
    %43 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_14 = arith.constant 1 : i64
    %c20_i64 = arith.constant 20 : i64
    %44 = arith.extui %43 : i32 to i64
    %45 = arith.addi %44, %c20_i64 : i64
    %c8_i64_15 = arith.constant 8 : i64
    %46 = arith.addi %45, %c8_i64_15 : i64
    %c0_i32_16 = arith.constant 0 : i32
    %47 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_16) : (!llvm.ptr, i32) -> i32
    %48 = arith.extui %47 : i32 to i64
    %c65536_i64_17 = arith.constant 65536 : i64
    %49 = arith.muli %48, %c65536_i64_17 : i64
    %50 = arith.cmpi ult, %46, %49 : i64
    cf.cond_br %50, ^bb11, ^bb12
  ^bb10:  // pred: ^bb7
    %c1_i32_18 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_18) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %51 = llvm.getelementptr %7[%45] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_14, %51 {alignment = 1 : i64} : i64, !llvm.ptr
    %52 = llvm.load %2 : !llvm.ptr -> i32
    %53 = llvm.load %1 : !llvm.ptr -> i32
    %c44_i64 = arith.constant 44 : i64
    %54 = arith.extui %52 : i32 to i64
    %55 = arith.addi %54, %c44_i64 : i64
    %c4_i64_19 = arith.constant 4 : i64
    %56 = arith.addi %55, %c4_i64_19 : i64
    %c0_i32_20 = arith.constant 0 : i32
    %57 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_20) : (!llvm.ptr, i32) -> i32
    %58 = arith.extui %57 : i32 to i64
    %c65536_i64_21 = arith.constant 65536 : i64
    %59 = arith.muli %58, %c65536_i64_21 : i64
    %60 = arith.cmpi ult, %56, %59 : i64
    cf.cond_br %60, ^bb13, ^bb14
  ^bb12:  // pred: ^bb9
    %c1_i32_22 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_22) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %61 = llvm.getelementptr %7[%55] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %53, %61 {alignment = 1 : i64} : i32, !llvm.ptr
    %62 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %63 = arith.extui %c3_i32 : i32 to i64
    %c32_i64 = arith.constant 32 : i64
    %c63_i64 = arith.constant 63 : i64
    %64 = arith.cmpi ule, %c32_i64, %c63_i64 : i64
    %65 = scf.if %64 -> (i64) {
      %91 = arith.shli %63, %c32_i64 : i64
      scf.yield %91 : i64
    } else {
      %c0_i64 = arith.constant 0 : i64
      scf.yield %c0_i64 : i64
    }
    %66 = llvm.load %2 : !llvm.ptr -> i32
    %c44_i32 = arith.constant 44 : i32
    %67 = arith.addi %66, %c44_i32 : i32
    %68 = arith.extui %67 : i32 to i64
    %69 = arith.ori %65, %68 : i64
    %c32_i64_23 = arith.constant 32 : i64
    %70 = arith.extui %62 : i32 to i64
    %71 = arith.addi %70, %c32_i64_23 : i64
    %c8_i64_24 = arith.constant 8 : i64
    %72 = arith.addi %71, %c8_i64_24 : i64
    %c0_i32_25 = arith.constant 0 : i32
    %73 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_25) : (!llvm.ptr, i32) -> i32
    %74 = arith.extui %73 : i32 to i64
    %c65536_i64_26 = arith.constant 65536 : i64
    %75 = arith.muli %74, %c65536_i64_26 : i64
    %76 = arith.cmpi ult, %72, %75 : i64
    cf.cond_br %76, ^bb15, ^bb16
  ^bb14:  // pred: ^bb11
    %c1_i32_27 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_27) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // 2 preds: ^bb13, ^bb16
    %77 = llvm.getelementptr %7[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %69, %77 {alignment = 1 : i64} : i64, !llvm.ptr
    %78 = llvm.load %2 : !llvm.ptr -> i32
    %79 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %80 = arith.addi %79, %c32_i32 : i32
    %c16_i64 = arith.constant 16 : i64
    %81 = arith.extui %78 : i32 to i64
    %82 = arith.addi %81, %c16_i64 : i64
    %c4_i64_28 = arith.constant 4 : i64
    %83 = arith.addi %82, %c4_i64_28 : i64
    %c0_i32_29 = arith.constant 0 : i32
    %84 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_29) : (!llvm.ptr, i32) -> i32
    %85 = arith.extui %84 : i32 to i64
    %c65536_i64_30 = arith.constant 65536 : i64
    %86 = arith.muli %85, %c65536_i64_30 : i64
    %87 = arith.cmpi ult, %83, %86 : i64
    cf.cond_br %87, ^bb17, ^bb18
  ^bb16:  // pred: ^bb13
    %c1_i32_31 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_31) : (i32) -> ()
    cf.br ^bb15
  ^bb17:  // 2 preds: ^bb15, ^bb18
    %88 = llvm.getelementptr %7[%82] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %80, %88 {alignment = 1 : i64} : i32, !llvm.ptr
    %89 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %90 = arith.addi %89, %c8_i32 : i32
    %c1050944_i32 = arith.constant 1050944 : i32
    call @f148(%arg0, %90, %c1050944_i32) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb18:  // pred: ^bb15
    %c1_i32_32 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_32) : (i32) -> ()
    cf.br ^bb17
  }
  func.func @f129(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32_2 = arith.constant 0 : i32
    llvm.store %c0_i32_2, %1 : i32, !llvm.ptr
    %c0_i32_3 = arith.constant 0 : i32
    %c0_i32_4 = arith.constant 0 : i32
    %c1051644_i64 = arith.constant 1051644 : i64
    %6 = arith.extui %c0_i32_4 : i32 to i64
    %7 = arith.addi %6, %c1051644_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %8 = arith.addi %7, %c4_i64 : i64
    %c0_i32_5 = arith.constant 0 : i32
    %9 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_5) : (!llvm.ptr, i32) -> i32
    %10 = arith.extui %9 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %11 = arith.muli %10, %c65536_i64 : i64
    %12 = arith.cmpi ult, %8, %11 : i64
    cf.cond_br %12, ^bb3, ^bb4
  ^bb2(%13: i32):  // pred: ^bb7
    return %13 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %14 = llvm.getelementptr %5[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %15 = llvm.load volatile %14 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %15, %2 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %16 = arith.addi %15, %c1_i32_6 : i32
    %c1051644_i64_7 = arith.constant 1051644 : i64
    %17 = arith.extui %c0_i32_3 : i32 to i64
    %18 = arith.addi %17, %c1051644_i64_7 : i64
    %c4_i64_8 = arith.constant 4 : i64
    %19 = arith.addi %18, %c4_i64_8 : i64
    %c0_i32_9 = arith.constant 0 : i32
    %20 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_9) : (!llvm.ptr, i32) -> i32
    %21 = arith.extui %20 : i32 to i64
    %c65536_i64_10 = arith.constant 65536 : i64
    %22 = arith.muli %21, %c65536_i64_10 : i64
    %23 = arith.cmpi ult, %19, %22 : i64
    cf.cond_br %23, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c1_i32_11 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_11) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %24 = llvm.getelementptr %5[%18] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %16, %24 {alignment = 1 : i64} : i32, !llvm.ptr
    %25 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_12 = arith.constant 0 : i32
    %26 = arith.cmpi slt, %25, %c0_i32_12 : i32
    %27 = arith.extui %26 : i1 to i32
    %c0_i32_13 = arith.constant 0 : i32
    %28 = arith.cmpi ne, %27, %c0_i32_13 : i32
    cf.cond_br %28, ^bb7, ^bb8
  ^bb6:  // pred: ^bb3
    %c1_i32_14 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_14) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 3 preds: ^bb5, ^bb9, ^bb16
    %29 = llvm.load %1 : !llvm.ptr -> i32
    cf.br ^bb2(%29 : i32)
  ^bb8:  // pred: ^bb5
    %c1_i32_15 = arith.constant 1 : i32
    llvm.store %c1_i32_15, %1 : i32, !llvm.ptr
    %c0_i32_16 = arith.constant 0 : i32
    %c1051652_i64 = arith.constant 1051652 : i64
    %30 = arith.extui %c0_i32_16 : i32 to i64
    %31 = arith.addi %30, %c1051652_i64 : i64
    %c1_i64 = arith.constant 1 : i64
    %32 = arith.addi %31, %c1_i64 : i64
    %c0_i32_17 = arith.constant 0 : i32
    %33 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_17) : (!llvm.ptr, i32) -> i32
    %34 = arith.extui %33 : i32 to i64
    %c65536_i64_18 = arith.constant 65536 : i64
    %35 = arith.muli %34, %c65536_i64_18 : i64
    %36 = arith.cmpi ult, %32, %35 : i64
    cf.cond_br %36, ^bb9, ^bb10
  ^bb9:  // 2 preds: ^bb8, ^bb10
    %37 = llvm.getelementptr %5[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %38 = llvm.load volatile %37 {alignment = 1 : i64} : !llvm.ptr -> i8
    %39 = arith.extui %38 : i8 to i32
    %c0_i32_19 = arith.constant 0 : i32
    %40 = arith.cmpi ne, %39, %c0_i32_19 : i32
    cf.cond_br %40, ^bb7, ^bb11
  ^bb10:  // pred: ^bb8
    %c1_i32_20 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_20) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // pred: ^bb9
    %c0_i32_21 = arith.constant 0 : i32
    %41 = llvm.load %0 : !llvm.ptr -> i32
    %c1051652_i64_22 = arith.constant 1051652 : i64
    %42 = arith.extui %c0_i32_21 : i32 to i64
    %43 = arith.addi %42, %c1051652_i64_22 : i64
    %c1_i64_23 = arith.constant 1 : i64
    %44 = arith.addi %43, %c1_i64_23 : i64
    %c0_i32_24 = arith.constant 0 : i32
    %45 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_24) : (!llvm.ptr, i32) -> i32
    %46 = arith.extui %45 : i32 to i64
    %c65536_i64_25 = arith.constant 65536 : i64
    %47 = arith.muli %46, %c65536_i64_25 : i64
    %48 = arith.cmpi ult, %44, %47 : i64
    cf.cond_br %48, ^bb12, ^bb13
  ^bb12:  // 2 preds: ^bb11, ^bb13
    %49 = llvm.getelementptr %5[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %50 = arith.trunci %41 : i32 to i8
    llvm.store volatile %50, %49 {alignment = 1 : i64} : i8, !llvm.ptr
    %c0_i32_26 = arith.constant 0 : i32
    %c0_i32_27 = arith.constant 0 : i32
    %c1051648_i64 = arith.constant 1051648 : i64
    %51 = arith.extui %c0_i32_27 : i32 to i64
    %52 = arith.addi %51, %c1051648_i64 : i64
    %c4_i64_28 = arith.constant 4 : i64
    %53 = arith.addi %52, %c4_i64_28 : i64
    %c0_i32_29 = arith.constant 0 : i32
    %54 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_29) : (!llvm.ptr, i32) -> i32
    %55 = arith.extui %54 : i32 to i64
    %c65536_i64_30 = arith.constant 65536 : i64
    %56 = arith.muli %55, %c65536_i64_30 : i64
    %57 = arith.cmpi ult, %53, %56 : i64
    cf.cond_br %57, ^bb14, ^bb15
  ^bb13:  // pred: ^bb11
    %c1_i32_31 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_31) : (i32) -> ()
    cf.br ^bb12
  ^bb14:  // 2 preds: ^bb12, ^bb15
    %58 = llvm.getelementptr %5[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %59 = llvm.load volatile %58 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_32 = arith.constant 1 : i32
    %60 = arith.addi %59, %c1_i32_32 : i32
    %c1051648_i64_33 = arith.constant 1051648 : i64
    %61 = arith.extui %c0_i32_26 : i32 to i64
    %62 = arith.addi %61, %c1051648_i64_33 : i64
    %c4_i64_34 = arith.constant 4 : i64
    %63 = arith.addi %62, %c4_i64_34 : i64
    %c0_i32_35 = arith.constant 0 : i32
    %64 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_35) : (!llvm.ptr, i32) -> i32
    %65 = arith.extui %64 : i32 to i64
    %c65536_i64_36 = arith.constant 65536 : i64
    %66 = arith.muli %65, %c65536_i64_36 : i64
    %67 = arith.cmpi ult, %63, %66 : i64
    cf.cond_br %67, ^bb16, ^bb17
  ^bb15:  // pred: ^bb12
    %c1_i32_37 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_37) : (i32) -> ()
    cf.br ^bb14
  ^bb16:  // 2 preds: ^bb14, ^bb17
    %68 = llvm.getelementptr %5[%62] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %60, %68 {alignment = 1 : i64} : i32, !llvm.ptr
    %c2_i32 = arith.constant 2 : i32
    llvm.store %c2_i32, %1 : i32, !llvm.ptr
    cf.br ^bb7
  ^bb17:  // pred: ^bb14
    %c1_i32_38 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_38) : (i32) -> ()
    cf.br ^bb16
  }
  func.func @f130(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %2 : i64, !llvm.ptr
    %3 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %4 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %9 = arith.subi %8, %c16_i32 : i32
    llvm.store %9, %1 : i32, !llvm.ptr
    llvm.store %9, %4 : i32, !llvm.ptr
    %10 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_2 = arith.constant 0 : i64
    %11 = arith.extui %10 : i32 to i64
    %12 = arith.addi %11, %c0_i64_2 : i64
    %c8_i64 = arith.constant 8 : i64
    %13 = arith.addi %12, %c8_i64 : i64
    %c0_i32_3 = arith.constant 0 : i32
    %14 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_3) : (!llvm.ptr, i32) -> i32
    %15 = arith.extui %14 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %16 = arith.muli %15, %c65536_i64 : i64
    %17 = arith.cmpi ult, %13, %16 : i64
    cf.cond_br %17, ^bb3, ^bb4
  ^bb2:  // no predecessors
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %18 = llvm.getelementptr %7[%12] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %19 = llvm.load volatile %18 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %19, %2 : i64, !llvm.ptr
    %20 = llvm.load %1 : !llvm.ptr -> i32
    %21 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %22 = arith.extui %20 : i32 to i64
    %23 = arith.addi %22, %c12_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %24 = arith.addi %23, %c4_i64 : i64
    %c0_i32_4 = arith.constant 0 : i32
    %25 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_4) : (!llvm.ptr, i32) -> i32
    %26 = arith.extui %25 : i32 to i64
    %c65536_i64_5 = arith.constant 65536 : i64
    %27 = arith.muli %26, %c65536_i64_5 : i64
    %28 = arith.cmpi ult, %24, %27 : i64
    cf.cond_br %28, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c1_i32_6 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_6) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %29 = llvm.getelementptr %7[%23] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %21, %29 {alignment = 1 : i64} : i32, !llvm.ptr
    %30 = llvm.load %1 : !llvm.ptr -> i32
    %31 = llvm.load %2 : !llvm.ptr -> i64
    %c4_i64_7 = arith.constant 4 : i64
    %32 = arith.extui %30 : i32 to i64
    %33 = arith.addi %32, %c4_i64_7 : i64
    %c8_i64_8 = arith.constant 8 : i64
    %34 = arith.addi %33, %c8_i64_8 : i64
    %c0_i32_9 = arith.constant 0 : i32
    %35 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_9) : (!llvm.ptr, i32) -> i32
    %36 = arith.extui %35 : i32 to i64
    %c65536_i64_10 = arith.constant 65536 : i64
    %37 = arith.muli %36, %c65536_i64_10 : i64
    %38 = arith.cmpi ult, %34, %37 : i64
    cf.cond_br %38, ^bb7, ^bb8
  ^bb6:  // pred: ^bb3
    %c1_i32_11 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_11) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %39 = llvm.getelementptr %7[%33] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %31, %39 {alignment = 1 : i64} : i64, !llvm.ptr
    %40 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %41 = arith.addi %40, %c4_i32 : i32
    call @f126(%arg0, %41) : (!llvm.ptr, i32) -> ()
    llvm.unreachable
  ^bb8:  // pred: ^bb5
    %c1_i32_12 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_12) : (i32) -> ()
    cf.br ^bb7
  }
  func.func @f131(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %5 : i64, !llvm.ptr
    %6 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %11 = llvm.load %7 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %12 = arith.subi %11, %c64_i32 : i32
    llvm.store %12, %2 : i32, !llvm.ptr
    llvm.store %12, %7 : i32, !llvm.ptr
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_5 = arith.constant 0 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c0_i64_5 : i64
    %c4_i64 = arith.constant 4 : i64
    %16 = arith.addi %15, %c4_i64 : i64
    %c0_i32_6 = arith.constant 0 : i32
    %17 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_6) : (!llvm.ptr, i32) -> i32
    %18 = arith.extui %17 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %19 = arith.muli %18, %c65536_i64 : i64
    %20 = arith.cmpi ult, %16, %19 : i64
    cf.cond_br %20, ^bb4, ^bb5
  ^bb2:  // pred: ^bb65
    return
  ^bb3:  // 2 preds: ^bb4, ^bb37
    %21 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_7 = arith.constant 0 : i64
    %22 = arith.extui %21 : i32 to i64
    %23 = arith.addi %22, %c0_i64_7 : i64
    %c8_i64 = arith.constant 8 : i64
    %24 = arith.addi %23, %c8_i64 : i64
    %c0_i32_8 = arith.constant 0 : i32
    %25 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_8) : (!llvm.ptr, i32) -> i32
    %26 = arith.extui %25 : i32 to i64
    %c65536_i64_9 = arith.constant 65536 : i64
    %27 = arith.muli %26, %c65536_i64_9 : i64
    %28 = arith.cmpi ult, %24, %27 : i64
    cf.cond_br %28, ^bb39, ^bb40
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %29 = llvm.getelementptr %10[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %30 = llvm.load volatile %29 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %31 = arith.cmpi eq, %30, %c-2147483648_i32 : i32
    %32 = arith.extui %31 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %33 = arith.cmpi eq, %32, %c0_i32_10 : i32
    %34 = arith.extui %33 : i1 to i32
    %c0_i32_11 = arith.constant 0 : i32
    %35 = arith.cmpi ne, %34, %c0_i32_11 : i32
    cf.cond_br %35, ^bb3, ^bb6
  ^bb5:  // pred: ^bb1
    %c1_i32_12 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_12) : (i32) -> ()
    cf.br ^bb4
  ^bb6:  // pred: ^bb4
    %36 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %37 = arith.extui %36 : i32 to i64
    %38 = arith.addi %37, %c12_i64 : i64
    %c4_i64_13 = arith.constant 4 : i64
    %39 = arith.addi %38, %c4_i64_13 : i64
    %c0_i32_14 = arith.constant 0 : i32
    %40 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_14) : (!llvm.ptr, i32) -> i32
    %41 = arith.extui %40 : i32 to i64
    %c65536_i64_15 = arith.constant 65536 : i64
    %42 = arith.muli %41, %c65536_i64_15 : i64
    %43 = arith.cmpi ult, %39, %42 : i64
    cf.cond_br %43, ^bb7, ^bb8
  ^bb7:  // 2 preds: ^bb6, ^bb8
    %44 = llvm.getelementptr %10[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %45 = llvm.load volatile %44 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %45, %3 : i32, !llvm.ptr
    %46 = llvm.load %2 : !llvm.ptr -> i32
    %c28_i32 = arith.constant 28 : i32
    %47 = arith.addi %46, %c28_i32 : i32
    %c8_i32 = arith.constant 8 : i32
    %48 = arith.addi %47, %c8_i32 : i32
    llvm.store %48, %4 : i32, !llvm.ptr
    %c0_i32_16 = arith.constant 0 : i32
    %c0_i64_17 = arith.constant 0 : i64
    %49 = arith.extui %48 : i32 to i64
    %50 = arith.addi %49, %c0_i64_17 : i64
    %c4_i64_18 = arith.constant 4 : i64
    %51 = arith.addi %50, %c4_i64_18 : i64
    %c0_i32_19 = arith.constant 0 : i32
    %52 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_19) : (!llvm.ptr, i32) -> i32
    %53 = arith.extui %52 : i32 to i64
    %c65536_i64_20 = arith.constant 65536 : i64
    %54 = arith.muli %53, %c65536_i64_20 : i64
    %55 = arith.cmpi ult, %51, %54 : i64
    cf.cond_br %55, ^bb9, ^bb10
  ^bb8:  // pred: ^bb6
    %c1_i32_21 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_21) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %56 = llvm.getelementptr %10[%50] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_16, %56 {alignment = 1 : i64} : i32, !llvm.ptr
    %57 = llvm.load %2 : !llvm.ptr -> i32
    %c4294967296_i64 = arith.constant 4294967296 : i64
    %c28_i64 = arith.constant 28 : i64
    %58 = arith.extui %57 : i32 to i64
    %59 = arith.addi %58, %c28_i64 : i64
    %c8_i64_22 = arith.constant 8 : i64
    %60 = arith.addi %59, %c8_i64_22 : i64
    %c0_i32_23 = arith.constant 0 : i32
    %61 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_23) : (!llvm.ptr, i32) -> i32
    %62 = arith.extui %61 : i32 to i64
    %c65536_i64_24 = arith.constant 65536 : i64
    %63 = arith.muli %62, %c65536_i64_24 : i64
    %64 = arith.cmpi ult, %60, %63 : i64
    cf.cond_br %64, ^bb11, ^bb12
  ^bb10:  // pred: ^bb7
    %c1_i32_25 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_25) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %65 = llvm.getelementptr %10[%59] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4294967296_i64, %65 {alignment = 1 : i64} : i64, !llvm.ptr
    %66 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32 = arith.constant 40 : i32
    %67 = arith.addi %66, %c40_i32 : i32
    %c8_i32_26 = arith.constant 8 : i32
    %68 = arith.addi %67, %c8_i32_26 : i32
    %69 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_27 = arith.constant 0 : i64
    %70 = arith.extui %69 : i32 to i64
    %71 = arith.addi %70, %c0_i64_27 : i64
    %c4_i64_28 = arith.constant 4 : i64
    %72 = arith.addi %71, %c4_i64_28 : i64
    %c0_i32_29 = arith.constant 0 : i32
    %73 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_29) : (!llvm.ptr, i32) -> i32
    %74 = arith.extui %73 : i32 to i64
    %c65536_i64_30 = arith.constant 65536 : i64
    %75 = arith.muli %74, %c65536_i64_30 : i64
    %76 = arith.cmpi ult, %72, %75 : i64
    cf.cond_br %76, ^bb13, ^bb14
  ^bb12:  // pred: ^bb9
    %c1_i32_31 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_31) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %77 = llvm.getelementptr %10[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %78 = llvm.load volatile %77 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %78, %3 : i32, !llvm.ptr
    %c8_i32_32 = arith.constant 8 : i32
    %79 = arith.addi %78, %c8_i32_32 : i32
    %c0_i64_33 = arith.constant 0 : i64
    %80 = arith.extui %79 : i32 to i64
    %81 = arith.addi %80, %c0_i64_33 : i64
    %c8_i64_34 = arith.constant 8 : i64
    %82 = arith.addi %81, %c8_i64_34 : i64
    %c0_i32_35 = arith.constant 0 : i32
    %83 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_35) : (!llvm.ptr, i32) -> i32
    %84 = arith.extui %83 : i32 to i64
    %c65536_i64_36 = arith.constant 65536 : i64
    %85 = arith.muli %84, %c65536_i64_36 : i64
    %86 = arith.cmpi ult, %82, %85 : i64
    cf.cond_br %86, ^bb15, ^bb16
  ^bb14:  // pred: ^bb11
    %c1_i32_37 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_37) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // 2 preds: ^bb13, ^bb16
    %87 = llvm.getelementptr %10[%81] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %88 = llvm.load volatile %87 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_38 = arith.constant 0 : i64
    %89 = arith.extui %68 : i32 to i64
    %90 = arith.addi %89, %c0_i64_38 : i64
    %c8_i64_39 = arith.constant 8 : i64
    %91 = arith.addi %90, %c8_i64_39 : i64
    %c0_i32_40 = arith.constant 0 : i32
    %92 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_40) : (!llvm.ptr, i32) -> i32
    %93 = arith.extui %92 : i32 to i64
    %c65536_i64_41 = arith.constant 65536 : i64
    %94 = arith.muli %93, %c65536_i64_41 : i64
    %95 = arith.cmpi ult, %91, %94 : i64
    cf.cond_br %95, ^bb17, ^bb18
  ^bb16:  // pred: ^bb13
    %c1_i32_42 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_42) : (i32) -> ()
    cf.br ^bb15
  ^bb17:  // 2 preds: ^bb15, ^bb18
    %96 = llvm.getelementptr %10[%90] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %88, %96 {alignment = 1 : i64} : i64, !llvm.ptr
    %97 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_43 = arith.constant 40 : i32
    %98 = arith.addi %97, %c40_i32_43 : i32
    %c16_i32 = arith.constant 16 : i32
    %99 = arith.addi %98, %c16_i32 : i32
    %100 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_44 = arith.constant 16 : i32
    %101 = arith.addi %100, %c16_i32_44 : i32
    %c0_i64_45 = arith.constant 0 : i64
    %102 = arith.extui %101 : i32 to i64
    %103 = arith.addi %102, %c0_i64_45 : i64
    %c8_i64_46 = arith.constant 8 : i64
    %104 = arith.addi %103, %c8_i64_46 : i64
    %c0_i32_47 = arith.constant 0 : i32
    %105 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_47) : (!llvm.ptr, i32) -> i32
    %106 = arith.extui %105 : i32 to i64
    %c65536_i64_48 = arith.constant 65536 : i64
    %107 = arith.muli %106, %c65536_i64_48 : i64
    %108 = arith.cmpi ult, %104, %107 : i64
    cf.cond_br %108, ^bb19, ^bb20
  ^bb18:  // pred: ^bb15
    %c1_i32_49 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_49) : (i32) -> ()
    cf.br ^bb17
  ^bb19:  // 2 preds: ^bb17, ^bb20
    %109 = llvm.getelementptr %10[%103] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %110 = llvm.load volatile %109 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_50 = arith.constant 0 : i64
    %111 = arith.extui %99 : i32 to i64
    %112 = arith.addi %111, %c0_i64_50 : i64
    %c8_i64_51 = arith.constant 8 : i64
    %113 = arith.addi %112, %c8_i64_51 : i64
    %c0_i32_52 = arith.constant 0 : i32
    %114 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_52) : (!llvm.ptr, i32) -> i32
    %115 = arith.extui %114 : i32 to i64
    %c65536_i64_53 = arith.constant 65536 : i64
    %116 = arith.muli %115, %c65536_i64_53 : i64
    %117 = arith.cmpi ult, %113, %116 : i64
    cf.cond_br %117, ^bb21, ^bb22
  ^bb20:  // pred: ^bb17
    %c1_i32_54 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_54) : (i32) -> ()
    cf.br ^bb19
  ^bb21:  // 2 preds: ^bb19, ^bb22
    %118 = llvm.getelementptr %10[%112] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %110, %118 {alignment = 1 : i64} : i64, !llvm.ptr
    %119 = llvm.load %2 : !llvm.ptr -> i32
    %120 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_55 = arith.constant 0 : i64
    %121 = arith.extui %120 : i32 to i64
    %122 = arith.addi %121, %c0_i64_55 : i64
    %c8_i64_56 = arith.constant 8 : i64
    %123 = arith.addi %122, %c8_i64_56 : i64
    %c0_i32_57 = arith.constant 0 : i32
    %124 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_57) : (!llvm.ptr, i32) -> i32
    %125 = arith.extui %124 : i32 to i64
    %c65536_i64_58 = arith.constant 65536 : i64
    %126 = arith.muli %125, %c65536_i64_58 : i64
    %127 = arith.cmpi ult, %123, %126 : i64
    cf.cond_br %127, ^bb23, ^bb24
  ^bb22:  // pred: ^bb19
    %c1_i32_59 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_59) : (i32) -> ()
    cf.br ^bb21
  ^bb23:  // 2 preds: ^bb21, ^bb24
    %128 = llvm.getelementptr %10[%122] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %129 = llvm.load volatile %128 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c40_i64 = arith.constant 40 : i64
    %130 = arith.extui %119 : i32 to i64
    %131 = arith.addi %130, %c40_i64 : i64
    %c8_i64_60 = arith.constant 8 : i64
    %132 = arith.addi %131, %c8_i64_60 : i64
    %c0_i32_61 = arith.constant 0 : i32
    %133 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_61) : (!llvm.ptr, i32) -> i32
    %134 = arith.extui %133 : i32 to i64
    %c65536_i64_62 = arith.constant 65536 : i64
    %135 = arith.muli %134, %c65536_i64_62 : i64
    %136 = arith.cmpi ult, %132, %135 : i64
    cf.cond_br %136, ^bb25, ^bb26
  ^bb24:  // pred: ^bb21
    %c1_i32_63 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_63) : (i32) -> ()
    cf.br ^bb23
  ^bb25:  // 2 preds: ^bb23, ^bb26
    %137 = llvm.getelementptr %10[%131] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %129, %137 {alignment = 1 : i64} : i64, !llvm.ptr
    %138 = llvm.load %2 : !llvm.ptr -> i32
    %c28_i32_64 = arith.constant 28 : i32
    %139 = arith.addi %138, %c28_i32_64 : i32
    %c1050852_i32 = arith.constant 1050852 : i32
    %140 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_65 = arith.constant 40 : i32
    %141 = arith.addi %140, %c40_i32_65 : i32
    %142 = call @f150(%arg0, %139, %c1050852_i32, %141) : (!llvm.ptr, i32, i32, i32) -> i32
    %143 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_66 = arith.constant 16 : i32
    %144 = arith.addi %143, %c16_i32_66 : i32
    %c8_i32_67 = arith.constant 8 : i32
    %145 = arith.addi %144, %c8_i32_67 : i32
    %146 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_68 = arith.constant 0 : i64
    %147 = arith.extui %146 : i32 to i64
    %148 = arith.addi %147, %c0_i64_68 : i64
    %c4_i64_69 = arith.constant 4 : i64
    %149 = arith.addi %148, %c4_i64_69 : i64
    %c0_i32_70 = arith.constant 0 : i32
    %150 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_70) : (!llvm.ptr, i32) -> i32
    %151 = arith.extui %150 : i32 to i64
    %c65536_i64_71 = arith.constant 65536 : i64
    %152 = arith.muli %151, %c65536_i64_71 : i64
    %153 = arith.cmpi ult, %149, %152 : i64
    cf.cond_br %153, ^bb27, ^bb28
  ^bb26:  // pred: ^bb23
    %c1_i32_72 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_72) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // 2 preds: ^bb25, ^bb28
    %154 = llvm.getelementptr %10[%148] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %155 = llvm.load volatile %154 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %155, %3 : i32, !llvm.ptr
    %c0_i64_73 = arith.constant 0 : i64
    %156 = arith.extui %145 : i32 to i64
    %157 = arith.addi %156, %c0_i64_73 : i64
    %c4_i64_74 = arith.constant 4 : i64
    %158 = arith.addi %157, %c4_i64_74 : i64
    %c0_i32_75 = arith.constant 0 : i32
    %159 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_75) : (!llvm.ptr, i32) -> i32
    %160 = arith.extui %159 : i32 to i64
    %c65536_i64_76 = arith.constant 65536 : i64
    %161 = arith.muli %160, %c65536_i64_76 : i64
    %162 = arith.cmpi ult, %158, %161 : i64
    cf.cond_br %162, ^bb29, ^bb30
  ^bb28:  // pred: ^bb25
    %c1_i32_77 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_77) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // 2 preds: ^bb27, ^bb30
    %163 = llvm.getelementptr %10[%157] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %155, %163 {alignment = 1 : i64} : i32, !llvm.ptr
    %164 = llvm.load %2 : !llvm.ptr -> i32
    %165 = llvm.load %2 : !llvm.ptr -> i32
    %c28_i64_78 = arith.constant 28 : i64
    %166 = arith.extui %165 : i32 to i64
    %167 = arith.addi %166, %c28_i64_78 : i64
    %c8_i64_79 = arith.constant 8 : i64
    %168 = arith.addi %167, %c8_i64_79 : i64
    %c0_i32_80 = arith.constant 0 : i32
    %169 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_80) : (!llvm.ptr, i32) -> i32
    %170 = arith.extui %169 : i32 to i64
    %c65536_i64_81 = arith.constant 65536 : i64
    %171 = arith.muli %170, %c65536_i64_81 : i64
    %172 = arith.cmpi ult, %168, %171 : i64
    cf.cond_br %172, ^bb31, ^bb32
  ^bb30:  // pred: ^bb27
    %c1_i32_82 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_82) : (i32) -> ()
    cf.br ^bb29
  ^bb31:  // 2 preds: ^bb29, ^bb32
    %173 = llvm.getelementptr %10[%167] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %174 = llvm.load volatile %173 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %174, %5 : i64, !llvm.ptr
    %c16_i64 = arith.constant 16 : i64
    %175 = arith.extui %164 : i32 to i64
    %176 = arith.addi %175, %c16_i64 : i64
    %c8_i64_83 = arith.constant 8 : i64
    %177 = arith.addi %176, %c8_i64_83 : i64
    %c0_i32_84 = arith.constant 0 : i32
    %178 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_84) : (!llvm.ptr, i32) -> i32
    %179 = arith.extui %178 : i32 to i64
    %c65536_i64_85 = arith.constant 65536 : i64
    %180 = arith.muli %179, %c65536_i64_85 : i64
    %181 = arith.cmpi ult, %177, %180 : i64
    cf.cond_br %181, ^bb33, ^bb34
  ^bb32:  // pred: ^bb29
    %c1_i32_86 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_86) : (i32) -> ()
    cf.br ^bb31
  ^bb33:  // 2 preds: ^bb31, ^bb34
    %182 = llvm.getelementptr %10[%176] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %174, %182 {alignment = 1 : i64} : i64, !llvm.ptr
    %183 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_87 = arith.constant 8 : i32
    %184 = arith.addi %183, %c8_i32_87 : i32
    %185 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_88 = arith.constant 0 : i64
    %186 = arith.extui %184 : i32 to i64
    %187 = arith.addi %186, %c0_i64_88 : i64
    %c4_i64_89 = arith.constant 4 : i64
    %188 = arith.addi %187, %c4_i64_89 : i64
    %c0_i32_90 = arith.constant 0 : i32
    %189 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_90) : (!llvm.ptr, i32) -> i32
    %190 = arith.extui %189 : i32 to i64
    %c65536_i64_91 = arith.constant 65536 : i64
    %191 = arith.muli %190, %c65536_i64_91 : i64
    %192 = arith.cmpi ult, %188, %191 : i64
    cf.cond_br %192, ^bb35, ^bb36
  ^bb34:  // pred: ^bb31
    %c1_i32_92 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_92) : (i32) -> ()
    cf.br ^bb33
  ^bb35:  // 2 preds: ^bb33, ^bb36
    %193 = llvm.getelementptr %10[%187] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %185, %193 {alignment = 1 : i64} : i32, !llvm.ptr
    %194 = llvm.load %1 : !llvm.ptr -> i32
    %195 = llvm.load %5 : !llvm.ptr -> i64
    %c0_i64_93 = arith.constant 0 : i64
    %196 = arith.extui %194 : i32 to i64
    %197 = arith.addi %196, %c0_i64_93 : i64
    %c8_i64_94 = arith.constant 8 : i64
    %198 = arith.addi %197, %c8_i64_94 : i64
    %c0_i32_95 = arith.constant 0 : i32
    %199 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_95) : (!llvm.ptr, i32) -> i32
    %200 = arith.extui %199 : i32 to i64
    %c65536_i64_96 = arith.constant 65536 : i64
    %201 = arith.muli %200, %c65536_i64_96 : i64
    %202 = arith.cmpi ult, %198, %201 : i64
    cf.cond_br %202, ^bb37, ^bb38
  ^bb36:  // pred: ^bb33
    %c1_i32_97 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_97) : (i32) -> ()
    cf.br ^bb35
  ^bb37:  // 2 preds: ^bb35, ^bb38
    %203 = llvm.getelementptr %10[%197] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %195, %203 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb3
  ^bb38:  // pred: ^bb35
    %c1_i32_98 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_98) : (i32) -> ()
    cf.br ^bb37
  ^bb39:  // 2 preds: ^bb3, ^bb40
    %204 = llvm.getelementptr %10[%23] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %205 = llvm.load volatile %204 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %205, %5 : i64, !llvm.ptr
    %206 = llvm.load %1 : !llvm.ptr -> i32
    %c4294967296_i64_99 = arith.constant 4294967296 : i64
    %c0_i64_100 = arith.constant 0 : i64
    %207 = arith.extui %206 : i32 to i64
    %208 = arith.addi %207, %c0_i64_100 : i64
    %c8_i64_101 = arith.constant 8 : i64
    %209 = arith.addi %208, %c8_i64_101 : i64
    %c0_i32_102 = arith.constant 0 : i32
    %210 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_102) : (!llvm.ptr, i32) -> i32
    %211 = arith.extui %210 : i32 to i64
    %c65536_i64_103 = arith.constant 65536 : i64
    %212 = arith.muli %211, %c65536_i64_103 : i64
    %213 = arith.cmpi ult, %209, %212 : i64
    cf.cond_br %213, ^bb41, ^bb42
  ^bb40:  // pred: ^bb3
    %c1_i32_104 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_104) : (i32) -> ()
    cf.br ^bb39
  ^bb41:  // 2 preds: ^bb39, ^bb42
    %214 = llvm.getelementptr %10[%208] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4294967296_i64_99, %214 {alignment = 1 : i64} : i64, !llvm.ptr
    %215 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_105 = arith.constant 8 : i32
    %216 = arith.addi %215, %c8_i32_105 : i32
    llvm.store %216, %3 : i32, !llvm.ptr
    %217 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_106 = arith.constant 8 : i32
    %218 = arith.addi %217, %c8_i32_106 : i32
    llvm.store %218, %1 : i32, !llvm.ptr
    %c0_i64_107 = arith.constant 0 : i64
    %219 = arith.extui %218 : i32 to i64
    %220 = arith.addi %219, %c0_i64_107 : i64
    %c4_i64_108 = arith.constant 4 : i64
    %221 = arith.addi %220, %c4_i64_108 : i64
    %c0_i32_109 = arith.constant 0 : i32
    %222 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_109) : (!llvm.ptr, i32) -> i32
    %223 = arith.extui %222 : i32 to i64
    %c65536_i64_110 = arith.constant 65536 : i64
    %224 = arith.muli %223, %c65536_i64_110 : i64
    %225 = arith.cmpi ult, %221, %224 : i64
    cf.cond_br %225, ^bb43, ^bb44
  ^bb42:  // pred: ^bb39
    %c1_i32_111 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_111) : (i32) -> ()
    cf.br ^bb41
  ^bb43:  // 2 preds: ^bb41, ^bb44
    %226 = llvm.getelementptr %10[%220] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %227 = llvm.load volatile %226 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_112 = arith.constant 0 : i64
    %228 = arith.extui %216 : i32 to i64
    %229 = arith.addi %228, %c0_i64_112 : i64
    %c4_i64_113 = arith.constant 4 : i64
    %230 = arith.addi %229, %c4_i64_113 : i64
    %c0_i32_114 = arith.constant 0 : i32
    %231 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_114) : (!llvm.ptr, i32) -> i32
    %232 = arith.extui %231 : i32 to i64
    %c65536_i64_115 = arith.constant 65536 : i64
    %233 = arith.muli %232, %c65536_i64_115 : i64
    %234 = arith.cmpi ult, %230, %233 : i64
    cf.cond_br %234, ^bb45, ^bb46
  ^bb44:  // pred: ^bb41
    %c1_i32_116 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_116) : (i32) -> ()
    cf.br ^bb43
  ^bb45:  // 2 preds: ^bb43, ^bb46
    %235 = llvm.getelementptr %10[%229] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %227, %235 {alignment = 1 : i64} : i32, !llvm.ptr
    %236 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_117 = arith.constant 0 : i32
    %c0_i64_118 = arith.constant 0 : i64
    %237 = arith.extui %236 : i32 to i64
    %238 = arith.addi %237, %c0_i64_118 : i64
    %c4_i64_119 = arith.constant 4 : i64
    %239 = arith.addi %238, %c4_i64_119 : i64
    %c0_i32_120 = arith.constant 0 : i32
    %240 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_120) : (!llvm.ptr, i32) -> i32
    %241 = arith.extui %240 : i32 to i64
    %c65536_i64_121 = arith.constant 65536 : i64
    %242 = arith.muli %241, %c65536_i64_121 : i64
    %243 = arith.cmpi ult, %239, %242 : i64
    cf.cond_br %243, ^bb47, ^bb48
  ^bb46:  // pred: ^bb43
    %c1_i32_122 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_122) : (i32) -> ()
    cf.br ^bb45
  ^bb47:  // 2 preds: ^bb45, ^bb48
    %244 = llvm.getelementptr %10[%238] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_117, %244 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_123 = arith.constant 0 : i32
    %c1051609_i64 = arith.constant 1051609 : i64
    %245 = arith.extui %c0_i32_123 : i32 to i64
    %246 = arith.addi %245, %c1051609_i64 : i64
    %c1_i64 = arith.constant 1 : i64
    %247 = arith.addi %246, %c1_i64 : i64
    %c0_i32_124 = arith.constant 0 : i32
    %248 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_124) : (!llvm.ptr, i32) -> i32
    %249 = arith.extui %248 : i32 to i64
    %c65536_i64_125 = arith.constant 65536 : i64
    %250 = arith.muli %249, %c65536_i64_125 : i64
    %251 = arith.cmpi ult, %247, %250 : i64
    cf.cond_br %251, ^bb49, ^bb50
  ^bb48:  // pred: ^bb45
    %c1_i32_126 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_126) : (i32) -> ()
    cf.br ^bb47
  ^bb49:  // 2 preds: ^bb47, ^bb50
    %252 = llvm.getelementptr %10[%246] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %253 = llvm.load volatile %252 {alignment = 1 : i64} : !llvm.ptr -> i8
    %254 = arith.extui %253 : i8 to i32
    %255 = llvm.load %2 : !llvm.ptr -> i32
    %256 = llvm.load %5 : !llvm.ptr -> i64
    %c0_i64_127 = arith.constant 0 : i64
    %257 = arith.extui %255 : i32 to i64
    %258 = arith.addi %257, %c0_i64_127 : i64
    %c8_i64_128 = arith.constant 8 : i64
    %259 = arith.addi %258, %c8_i64_128 : i64
    %c0_i32_129 = arith.constant 0 : i32
    %260 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_129) : (!llvm.ptr, i32) -> i32
    %261 = arith.extui %260 : i32 to i64
    %c65536_i64_130 = arith.constant 65536 : i64
    %262 = arith.muli %261, %c65536_i64_130 : i64
    %263 = arith.cmpi ult, %259, %262 : i64
    cf.cond_br %263, ^bb51, ^bb52
  ^bb50:  // pred: ^bb47
    %c1_i32_131 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_131) : (i32) -> ()
    cf.br ^bb49
  ^bb51:  // 2 preds: ^bb49, ^bb52
    %264 = llvm.getelementptr %10[%258] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %256, %264 {alignment = 1 : i64} : i64, !llvm.ptr
    %c12_i32 = arith.constant 12 : i32
    %c4_i32 = arith.constant 4 : i32
    %265 = call @f77(%arg0, %c12_i32, %c4_i32) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %265, %1 : i32, !llvm.ptr
    %c0_i32_132 = arith.constant 0 : i32
    %266 = arith.cmpi ne, %265, %c0_i32_132 : i32
    cf.cond_br %266, ^bb53, ^bb54
  ^bb52:  // pred: ^bb49
    %c1_i32_133 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_133) : (i32) -> ()
    cf.br ^bb51
  ^bb53:  // pred: ^bb51
    %267 = llvm.load %1 : !llvm.ptr -> i32
    %268 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_134 = arith.constant 0 : i64
    %269 = arith.extui %268 : i32 to i64
    %270 = arith.addi %269, %c0_i64_134 : i64
    %c8_i64_135 = arith.constant 8 : i64
    %271 = arith.addi %270, %c8_i64_135 : i64
    %c0_i32_136 = arith.constant 0 : i32
    %272 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_136) : (!llvm.ptr, i32) -> i32
    %273 = arith.extui %272 : i32 to i64
    %c65536_i64_137 = arith.constant 65536 : i64
    %274 = arith.muli %273, %c65536_i64_137 : i64
    %275 = arith.cmpi ult, %271, %274 : i64
    cf.cond_br %275, ^bb55, ^bb56
  ^bb54:  // pred: ^bb51
    %c4_i32_138 = arith.constant 4 : i32
    %c12_i32_139 = arith.constant 12 : i32
    call @f144(%arg0, %c4_i32_138, %c12_i32_139) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb55:  // 2 preds: ^bb53, ^bb56
    %276 = llvm.getelementptr %10[%270] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %277 = llvm.load volatile %276 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_140 = arith.constant 0 : i64
    %278 = arith.extui %267 : i32 to i64
    %279 = arith.addi %278, %c0_i64_140 : i64
    %c8_i64_141 = arith.constant 8 : i64
    %280 = arith.addi %279, %c8_i64_141 : i64
    %c0_i32_142 = arith.constant 0 : i32
    %281 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_142) : (!llvm.ptr, i32) -> i32
    %282 = arith.extui %281 : i32 to i64
    %c65536_i64_143 = arith.constant 65536 : i64
    %283 = arith.muli %282, %c65536_i64_143 : i64
    %284 = arith.cmpi ult, %280, %283 : i64
    cf.cond_br %284, ^bb57, ^bb58
  ^bb56:  // pred: ^bb53
    %c1_i32_144 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_144) : (i32) -> ()
    cf.br ^bb55
  ^bb57:  // 2 preds: ^bb55, ^bb58
    %285 = llvm.getelementptr %10[%279] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %277, %285 {alignment = 1 : i64} : i64, !llvm.ptr
    %286 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_145 = arith.constant 8 : i32
    %287 = arith.addi %286, %c8_i32_145 : i32
    %288 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_146 = arith.constant 0 : i64
    %289 = arith.extui %288 : i32 to i64
    %290 = arith.addi %289, %c0_i64_146 : i64
    %c4_i64_147 = arith.constant 4 : i64
    %291 = arith.addi %290, %c4_i64_147 : i64
    %c0_i32_148 = arith.constant 0 : i32
    %292 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_148) : (!llvm.ptr, i32) -> i32
    %293 = arith.extui %292 : i32 to i64
    %c65536_i64_149 = arith.constant 65536 : i64
    %294 = arith.muli %293, %c65536_i64_149 : i64
    %295 = arith.cmpi ult, %291, %294 : i64
    cf.cond_br %295, ^bb59, ^bb60
  ^bb58:  // pred: ^bb55
    %c1_i32_150 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_150) : (i32) -> ()
    cf.br ^bb57
  ^bb59:  // 2 preds: ^bb57, ^bb60
    %296 = llvm.getelementptr %10[%290] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %297 = llvm.load volatile %296 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_151 = arith.constant 0 : i64
    %298 = arith.extui %287 : i32 to i64
    %299 = arith.addi %298, %c0_i64_151 : i64
    %c4_i64_152 = arith.constant 4 : i64
    %300 = arith.addi %299, %c4_i64_152 : i64
    %c0_i32_153 = arith.constant 0 : i32
    %301 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_153) : (!llvm.ptr, i32) -> i32
    %302 = arith.extui %301 : i32 to i64
    %c65536_i64_154 = arith.constant 65536 : i64
    %303 = arith.muli %302, %c65536_i64_154 : i64
    %304 = arith.cmpi ult, %300, %303 : i64
    cf.cond_br %304, ^bb61, ^bb62
  ^bb60:  // pred: ^bb57
    %c1_i32_155 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_155) : (i32) -> ()
    cf.br ^bb59
  ^bb61:  // 2 preds: ^bb59, ^bb62
    %305 = llvm.getelementptr %10[%299] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %297, %305 {alignment = 1 : i64} : i32, !llvm.ptr
    %306 = llvm.load %0 : !llvm.ptr -> i32
    %c1050960_i32 = arith.constant 1050960 : i32
    %c4_i64_156 = arith.constant 4 : i64
    %307 = arith.extui %306 : i32 to i64
    %308 = arith.addi %307, %c4_i64_156 : i64
    %c4_i64_157 = arith.constant 4 : i64
    %309 = arith.addi %308, %c4_i64_157 : i64
    %c0_i32_158 = arith.constant 0 : i32
    %310 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_158) : (!llvm.ptr, i32) -> i32
    %311 = arith.extui %310 : i32 to i64
    %c65536_i64_159 = arith.constant 65536 : i64
    %312 = arith.muli %311, %c65536_i64_159 : i64
    %313 = arith.cmpi ult, %309, %312 : i64
    cf.cond_br %313, ^bb63, ^bb64
  ^bb62:  // pred: ^bb59
    %c1_i32_160 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_160) : (i32) -> ()
    cf.br ^bb61
  ^bb63:  // 2 preds: ^bb61, ^bb64
    %314 = llvm.getelementptr %10[%308] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1050960_i32, %314 {alignment = 1 : i64} : i32, !llvm.ptr
    %315 = llvm.load %0 : !llvm.ptr -> i32
    %316 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_161 = arith.constant 0 : i64
    %317 = arith.extui %315 : i32 to i64
    %318 = arith.addi %317, %c0_i64_161 : i64
    %c4_i64_162 = arith.constant 4 : i64
    %319 = arith.addi %318, %c4_i64_162 : i64
    %c0_i32_163 = arith.constant 0 : i32
    %320 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_163) : (!llvm.ptr, i32) -> i32
    %321 = arith.extui %320 : i32 to i64
    %c65536_i64_164 = arith.constant 65536 : i64
    %322 = arith.muli %321, %c65536_i64_164 : i64
    %323 = arith.cmpi ult, %319, %322 : i64
    cf.cond_br %323, ^bb65, ^bb66
  ^bb64:  // pred: ^bb61
    %c1_i32_165 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_165) : (i32) -> ()
    cf.br ^bb63
  ^bb65:  // 2 preds: ^bb63, ^bb66
    %324 = llvm.getelementptr %10[%318] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %316, %324 {alignment = 1 : i64} : i32, !llvm.ptr
    %325 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_166 = arith.constant 64 : i32
    %326 = arith.addi %325, %c64_i32_166 : i32
    llvm.store %326, %7 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb66:  // pred: ^bb63
    %c1_i32_167 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_167) : (i32) -> ()
    cf.br ^bb65
  }
  func.func @f132(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %5 : i64, !llvm.ptr
    %6 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %11 = llvm.load %7 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %12 = arith.subi %11, %c48_i32 : i32
    llvm.store %12, %2 : i32, !llvm.ptr
    llvm.store %12, %7 : i32, !llvm.ptr
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_5 = arith.constant 0 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c0_i64_5 : i64
    %c4_i64 = arith.constant 4 : i64
    %16 = arith.addi %15, %c4_i64 : i64
    %c0_i32_6 = arith.constant 0 : i32
    %17 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_6) : (!llvm.ptr, i32) -> i32
    %18 = arith.extui %17 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %19 = arith.muli %18, %c65536_i64 : i64
    %20 = arith.cmpi ult, %16, %19 : i64
    cf.cond_br %20, ^bb4, ^bb5
  ^bb2:  // pred: ^bb41
    return
  ^bb3:  // 2 preds: ^bb4, ^bb37
    %21 = llvm.load %0 : !llvm.ptr -> i32
    %c1050960_i32 = arith.constant 1050960 : i32
    %c4_i64_7 = arith.constant 4 : i64
    %22 = arith.extui %21 : i32 to i64
    %23 = arith.addi %22, %c4_i64_7 : i64
    %c4_i64_8 = arith.constant 4 : i64
    %24 = arith.addi %23, %c4_i64_8 : i64
    %c0_i32_9 = arith.constant 0 : i32
    %25 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_9) : (!llvm.ptr, i32) -> i32
    %26 = arith.extui %25 : i32 to i64
    %c65536_i64_10 = arith.constant 65536 : i64
    %27 = arith.muli %26, %c65536_i64_10 : i64
    %28 = arith.cmpi ult, %24, %27 : i64
    cf.cond_br %28, ^bb39, ^bb40
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %29 = llvm.getelementptr %10[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %30 = llvm.load volatile %29 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %31 = arith.cmpi eq, %30, %c-2147483648_i32 : i32
    %32 = arith.extui %31 : i1 to i32
    %c0_i32_11 = arith.constant 0 : i32
    %33 = arith.cmpi eq, %32, %c0_i32_11 : i32
    %34 = arith.extui %33 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %35 = arith.cmpi ne, %34, %c0_i32_12 : i32
    cf.cond_br %35, ^bb3, ^bb6
  ^bb5:  // pred: ^bb1
    %c1_i32_13 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_13) : (i32) -> ()
    cf.br ^bb4
  ^bb6:  // pred: ^bb4
    %36 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %37 = arith.extui %36 : i32 to i64
    %38 = arith.addi %37, %c12_i64 : i64
    %c4_i64_14 = arith.constant 4 : i64
    %39 = arith.addi %38, %c4_i64_14 : i64
    %c0_i32_15 = arith.constant 0 : i32
    %40 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_15) : (!llvm.ptr, i32) -> i32
    %41 = arith.extui %40 : i32 to i64
    %c65536_i64_16 = arith.constant 65536 : i64
    %42 = arith.muli %41, %c65536_i64_16 : i64
    %43 = arith.cmpi ult, %39, %42 : i64
    cf.cond_br %43, ^bb7, ^bb8
  ^bb7:  // 2 preds: ^bb6, ^bb8
    %44 = llvm.getelementptr %10[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %45 = llvm.load volatile %44 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %45, %3 : i32, !llvm.ptr
    %46 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %47 = arith.addi %46, %c12_i32 : i32
    %c8_i32 = arith.constant 8 : i32
    %48 = arith.addi %47, %c8_i32 : i32
    llvm.store %48, %4 : i32, !llvm.ptr
    %c0_i32_17 = arith.constant 0 : i32
    %c0_i64_18 = arith.constant 0 : i64
    %49 = arith.extui %48 : i32 to i64
    %50 = arith.addi %49, %c0_i64_18 : i64
    %c4_i64_19 = arith.constant 4 : i64
    %51 = arith.addi %50, %c4_i64_19 : i64
    %c0_i32_20 = arith.constant 0 : i32
    %52 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_20) : (!llvm.ptr, i32) -> i32
    %53 = arith.extui %52 : i32 to i64
    %c65536_i64_21 = arith.constant 65536 : i64
    %54 = arith.muli %53, %c65536_i64_21 : i64
    %55 = arith.cmpi ult, %51, %54 : i64
    cf.cond_br %55, ^bb9, ^bb10
  ^bb8:  // pred: ^bb6
    %c1_i32_22 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_22) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %56 = llvm.getelementptr %10[%50] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_17, %56 {alignment = 1 : i64} : i32, !llvm.ptr
    %57 = llvm.load %2 : !llvm.ptr -> i32
    %c4294967296_i64 = arith.constant 4294967296 : i64
    %c12_i64_23 = arith.constant 12 : i64
    %58 = arith.extui %57 : i32 to i64
    %59 = arith.addi %58, %c12_i64_23 : i64
    %c8_i64 = arith.constant 8 : i64
    %60 = arith.addi %59, %c8_i64 : i64
    %c0_i32_24 = arith.constant 0 : i32
    %61 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_24) : (!llvm.ptr, i32) -> i32
    %62 = arith.extui %61 : i32 to i64
    %c65536_i64_25 = arith.constant 65536 : i64
    %63 = arith.muli %62, %c65536_i64_25 : i64
    %64 = arith.cmpi ult, %60, %63 : i64
    cf.cond_br %64, ^bb11, ^bb12
  ^bb10:  // pred: ^bb7
    %c1_i32_26 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_26) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %65 = llvm.getelementptr %10[%59] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4294967296_i64, %65 {alignment = 1 : i64} : i64, !llvm.ptr
    %66 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %67 = arith.addi %66, %c24_i32 : i32
    %c8_i32_27 = arith.constant 8 : i32
    %68 = arith.addi %67, %c8_i32_27 : i32
    %69 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_28 = arith.constant 0 : i64
    %70 = arith.extui %69 : i32 to i64
    %71 = arith.addi %70, %c0_i64_28 : i64
    %c4_i64_29 = arith.constant 4 : i64
    %72 = arith.addi %71, %c4_i64_29 : i64
    %c0_i32_30 = arith.constant 0 : i32
    %73 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_30) : (!llvm.ptr, i32) -> i32
    %74 = arith.extui %73 : i32 to i64
    %c65536_i64_31 = arith.constant 65536 : i64
    %75 = arith.muli %74, %c65536_i64_31 : i64
    %76 = arith.cmpi ult, %72, %75 : i64
    cf.cond_br %76, ^bb13, ^bb14
  ^bb12:  // pred: ^bb9
    %c1_i32_32 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_32) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %77 = llvm.getelementptr %10[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %78 = llvm.load volatile %77 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %78, %3 : i32, !llvm.ptr
    %c8_i32_33 = arith.constant 8 : i32
    %79 = arith.addi %78, %c8_i32_33 : i32
    %c0_i64_34 = arith.constant 0 : i64
    %80 = arith.extui %79 : i32 to i64
    %81 = arith.addi %80, %c0_i64_34 : i64
    %c8_i64_35 = arith.constant 8 : i64
    %82 = arith.addi %81, %c8_i64_35 : i64
    %c0_i32_36 = arith.constant 0 : i32
    %83 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_36) : (!llvm.ptr, i32) -> i32
    %84 = arith.extui %83 : i32 to i64
    %c65536_i64_37 = arith.constant 65536 : i64
    %85 = arith.muli %84, %c65536_i64_37 : i64
    %86 = arith.cmpi ult, %82, %85 : i64
    cf.cond_br %86, ^bb15, ^bb16
  ^bb14:  // pred: ^bb11
    %c1_i32_38 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_38) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // 2 preds: ^bb13, ^bb16
    %87 = llvm.getelementptr %10[%81] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %88 = llvm.load volatile %87 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_39 = arith.constant 0 : i64
    %89 = arith.extui %68 : i32 to i64
    %90 = arith.addi %89, %c0_i64_39 : i64
    %c8_i64_40 = arith.constant 8 : i64
    %91 = arith.addi %90, %c8_i64_40 : i64
    %c0_i32_41 = arith.constant 0 : i32
    %92 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_41) : (!llvm.ptr, i32) -> i32
    %93 = arith.extui %92 : i32 to i64
    %c65536_i64_42 = arith.constant 65536 : i64
    %94 = arith.muli %93, %c65536_i64_42 : i64
    %95 = arith.cmpi ult, %91, %94 : i64
    cf.cond_br %95, ^bb17, ^bb18
  ^bb16:  // pred: ^bb13
    %c1_i32_43 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_43) : (i32) -> ()
    cf.br ^bb15
  ^bb17:  // 2 preds: ^bb15, ^bb18
    %96 = llvm.getelementptr %10[%90] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %88, %96 {alignment = 1 : i64} : i64, !llvm.ptr
    %97 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_44 = arith.constant 24 : i32
    %98 = arith.addi %97, %c24_i32_44 : i32
    %c16_i32 = arith.constant 16 : i32
    %99 = arith.addi %98, %c16_i32 : i32
    %100 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_45 = arith.constant 16 : i32
    %101 = arith.addi %100, %c16_i32_45 : i32
    %c0_i64_46 = arith.constant 0 : i64
    %102 = arith.extui %101 : i32 to i64
    %103 = arith.addi %102, %c0_i64_46 : i64
    %c8_i64_47 = arith.constant 8 : i64
    %104 = arith.addi %103, %c8_i64_47 : i64
    %c0_i32_48 = arith.constant 0 : i32
    %105 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_48) : (!llvm.ptr, i32) -> i32
    %106 = arith.extui %105 : i32 to i64
    %c65536_i64_49 = arith.constant 65536 : i64
    %107 = arith.muli %106, %c65536_i64_49 : i64
    %108 = arith.cmpi ult, %104, %107 : i64
    cf.cond_br %108, ^bb19, ^bb20
  ^bb18:  // pred: ^bb15
    %c1_i32_50 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_50) : (i32) -> ()
    cf.br ^bb17
  ^bb19:  // 2 preds: ^bb17, ^bb20
    %109 = llvm.getelementptr %10[%103] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %110 = llvm.load volatile %109 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_51 = arith.constant 0 : i64
    %111 = arith.extui %99 : i32 to i64
    %112 = arith.addi %111, %c0_i64_51 : i64
    %c8_i64_52 = arith.constant 8 : i64
    %113 = arith.addi %112, %c8_i64_52 : i64
    %c0_i32_53 = arith.constant 0 : i32
    %114 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_53) : (!llvm.ptr, i32) -> i32
    %115 = arith.extui %114 : i32 to i64
    %c65536_i64_54 = arith.constant 65536 : i64
    %116 = arith.muli %115, %c65536_i64_54 : i64
    %117 = arith.cmpi ult, %113, %116 : i64
    cf.cond_br %117, ^bb21, ^bb22
  ^bb20:  // pred: ^bb17
    %c1_i32_55 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_55) : (i32) -> ()
    cf.br ^bb19
  ^bb21:  // 2 preds: ^bb19, ^bb22
    %118 = llvm.getelementptr %10[%112] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %110, %118 {alignment = 1 : i64} : i64, !llvm.ptr
    %119 = llvm.load %2 : !llvm.ptr -> i32
    %120 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_56 = arith.constant 0 : i64
    %121 = arith.extui %120 : i32 to i64
    %122 = arith.addi %121, %c0_i64_56 : i64
    %c8_i64_57 = arith.constant 8 : i64
    %123 = arith.addi %122, %c8_i64_57 : i64
    %c0_i32_58 = arith.constant 0 : i32
    %124 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_58) : (!llvm.ptr, i32) -> i32
    %125 = arith.extui %124 : i32 to i64
    %c65536_i64_59 = arith.constant 65536 : i64
    %126 = arith.muli %125, %c65536_i64_59 : i64
    %127 = arith.cmpi ult, %123, %126 : i64
    cf.cond_br %127, ^bb23, ^bb24
  ^bb22:  // pred: ^bb19
    %c1_i32_60 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_60) : (i32) -> ()
    cf.br ^bb21
  ^bb23:  // 2 preds: ^bb21, ^bb24
    %128 = llvm.getelementptr %10[%122] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %129 = llvm.load volatile %128 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c24_i64 = arith.constant 24 : i64
    %130 = arith.extui %119 : i32 to i64
    %131 = arith.addi %130, %c24_i64 : i64
    %c8_i64_61 = arith.constant 8 : i64
    %132 = arith.addi %131, %c8_i64_61 : i64
    %c0_i32_62 = arith.constant 0 : i32
    %133 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_62) : (!llvm.ptr, i32) -> i32
    %134 = arith.extui %133 : i32 to i64
    %c65536_i64_63 = arith.constant 65536 : i64
    %135 = arith.muli %134, %c65536_i64_63 : i64
    %136 = arith.cmpi ult, %132, %135 : i64
    cf.cond_br %136, ^bb25, ^bb26
  ^bb24:  // pred: ^bb21
    %c1_i32_64 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_64) : (i32) -> ()
    cf.br ^bb23
  ^bb25:  // 2 preds: ^bb23, ^bb26
    %137 = llvm.getelementptr %10[%131] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %129, %137 {alignment = 1 : i64} : i64, !llvm.ptr
    %138 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32_65 = arith.constant 12 : i32
    %139 = arith.addi %138, %c12_i32_65 : i32
    %c1050852_i32 = arith.constant 1050852 : i32
    %140 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_66 = arith.constant 24 : i32
    %141 = arith.addi %140, %c24_i32_66 : i32
    %142 = call @f150(%arg0, %139, %c1050852_i32, %141) : (!llvm.ptr, i32, i32, i32) -> i32
    %143 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_67 = arith.constant 8 : i32
    %144 = arith.addi %143, %c8_i32_67 : i32
    %145 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_68 = arith.constant 0 : i64
    %146 = arith.extui %145 : i32 to i64
    %147 = arith.addi %146, %c0_i64_68 : i64
    %c4_i64_69 = arith.constant 4 : i64
    %148 = arith.addi %147, %c4_i64_69 : i64
    %c0_i32_70 = arith.constant 0 : i32
    %149 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_70) : (!llvm.ptr, i32) -> i32
    %150 = arith.extui %149 : i32 to i64
    %c65536_i64_71 = arith.constant 65536 : i64
    %151 = arith.muli %150, %c65536_i64_71 : i64
    %152 = arith.cmpi ult, %148, %151 : i64
    cf.cond_br %152, ^bb27, ^bb28
  ^bb26:  // pred: ^bb23
    %c1_i32_72 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_72) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // 2 preds: ^bb25, ^bb28
    %153 = llvm.getelementptr %10[%147] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %154 = llvm.load volatile %153 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %154, %3 : i32, !llvm.ptr
    %c0_i64_73 = arith.constant 0 : i64
    %155 = arith.extui %144 : i32 to i64
    %156 = arith.addi %155, %c0_i64_73 : i64
    %c4_i64_74 = arith.constant 4 : i64
    %157 = arith.addi %156, %c4_i64_74 : i64
    %c0_i32_75 = arith.constant 0 : i32
    %158 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_75) : (!llvm.ptr, i32) -> i32
    %159 = arith.extui %158 : i32 to i64
    %c65536_i64_76 = arith.constant 65536 : i64
    %160 = arith.muli %159, %c65536_i64_76 : i64
    %161 = arith.cmpi ult, %157, %160 : i64
    cf.cond_br %161, ^bb29, ^bb30
  ^bb28:  // pred: ^bb25
    %c1_i32_77 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_77) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // 2 preds: ^bb27, ^bb30
    %162 = llvm.getelementptr %10[%156] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %154, %162 {alignment = 1 : i64} : i32, !llvm.ptr
    %163 = llvm.load %2 : !llvm.ptr -> i32
    %164 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64_78 = arith.constant 12 : i64
    %165 = arith.extui %164 : i32 to i64
    %166 = arith.addi %165, %c12_i64_78 : i64
    %c8_i64_79 = arith.constant 8 : i64
    %167 = arith.addi %166, %c8_i64_79 : i64
    %c0_i32_80 = arith.constant 0 : i32
    %168 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_80) : (!llvm.ptr, i32) -> i32
    %169 = arith.extui %168 : i32 to i64
    %c65536_i64_81 = arith.constant 65536 : i64
    %170 = arith.muli %169, %c65536_i64_81 : i64
    %171 = arith.cmpi ult, %167, %170 : i64
    cf.cond_br %171, ^bb31, ^bb32
  ^bb30:  // pred: ^bb27
    %c1_i32_82 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_82) : (i32) -> ()
    cf.br ^bb29
  ^bb31:  // 2 preds: ^bb29, ^bb32
    %172 = llvm.getelementptr %10[%166] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %173 = llvm.load volatile %172 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %173, %5 : i64, !llvm.ptr
    %c0_i64_83 = arith.constant 0 : i64
    %174 = arith.extui %163 : i32 to i64
    %175 = arith.addi %174, %c0_i64_83 : i64
    %c8_i64_84 = arith.constant 8 : i64
    %176 = arith.addi %175, %c8_i64_84 : i64
    %c0_i32_85 = arith.constant 0 : i32
    %177 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_85) : (!llvm.ptr, i32) -> i32
    %178 = arith.extui %177 : i32 to i64
    %c65536_i64_86 = arith.constant 65536 : i64
    %179 = arith.muli %178, %c65536_i64_86 : i64
    %180 = arith.cmpi ult, %176, %179 : i64
    cf.cond_br %180, ^bb33, ^bb34
  ^bb32:  // pred: ^bb29
    %c1_i32_87 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_87) : (i32) -> ()
    cf.br ^bb31
  ^bb33:  // 2 preds: ^bb31, ^bb34
    %181 = llvm.getelementptr %10[%175] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %173, %181 {alignment = 1 : i64} : i64, !llvm.ptr
    %182 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_88 = arith.constant 8 : i32
    %183 = arith.addi %182, %c8_i32_88 : i32
    %184 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_89 = arith.constant 0 : i64
    %185 = arith.extui %183 : i32 to i64
    %186 = arith.addi %185, %c0_i64_89 : i64
    %c4_i64_90 = arith.constant 4 : i64
    %187 = arith.addi %186, %c4_i64_90 : i64
    %c0_i32_91 = arith.constant 0 : i32
    %188 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_91) : (!llvm.ptr, i32) -> i32
    %189 = arith.extui %188 : i32 to i64
    %c65536_i64_92 = arith.constant 65536 : i64
    %190 = arith.muli %189, %c65536_i64_92 : i64
    %191 = arith.cmpi ult, %187, %190 : i64
    cf.cond_br %191, ^bb35, ^bb36
  ^bb34:  // pred: ^bb31
    %c1_i32_93 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_93) : (i32) -> ()
    cf.br ^bb33
  ^bb35:  // 2 preds: ^bb33, ^bb36
    %192 = llvm.getelementptr %10[%186] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %184, %192 {alignment = 1 : i64} : i32, !llvm.ptr
    %193 = llvm.load %1 : !llvm.ptr -> i32
    %194 = llvm.load %5 : !llvm.ptr -> i64
    %c0_i64_94 = arith.constant 0 : i64
    %195 = arith.extui %193 : i32 to i64
    %196 = arith.addi %195, %c0_i64_94 : i64
    %c8_i64_95 = arith.constant 8 : i64
    %197 = arith.addi %196, %c8_i64_95 : i64
    %c0_i32_96 = arith.constant 0 : i32
    %198 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_96) : (!llvm.ptr, i32) -> i32
    %199 = arith.extui %198 : i32 to i64
    %c65536_i64_97 = arith.constant 65536 : i64
    %200 = arith.muli %199, %c65536_i64_97 : i64
    %201 = arith.cmpi ult, %197, %200 : i64
    cf.cond_br %201, ^bb37, ^bb38
  ^bb36:  // pred: ^bb33
    %c1_i32_98 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_98) : (i32) -> ()
    cf.br ^bb35
  ^bb37:  // 2 preds: ^bb35, ^bb38
    %202 = llvm.getelementptr %10[%196] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %194, %202 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb3
  ^bb38:  // pred: ^bb35
    %c1_i32_99 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_99) : (i32) -> ()
    cf.br ^bb37
  ^bb39:  // 2 preds: ^bb3, ^bb40
    %203 = llvm.getelementptr %10[%23] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1050960_i32, %203 {alignment = 1 : i64} : i32, !llvm.ptr
    %204 = llvm.load %0 : !llvm.ptr -> i32
    %205 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_100 = arith.constant 0 : i64
    %206 = arith.extui %204 : i32 to i64
    %207 = arith.addi %206, %c0_i64_100 : i64
    %c4_i64_101 = arith.constant 4 : i64
    %208 = arith.addi %207, %c4_i64_101 : i64
    %c0_i32_102 = arith.constant 0 : i32
    %209 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_102) : (!llvm.ptr, i32) -> i32
    %210 = arith.extui %209 : i32 to i64
    %c65536_i64_103 = arith.constant 65536 : i64
    %211 = arith.muli %210, %c65536_i64_103 : i64
    %212 = arith.cmpi ult, %208, %211 : i64
    cf.cond_br %212, ^bb41, ^bb42
  ^bb40:  // pred: ^bb3
    %c1_i32_104 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_104) : (i32) -> ()
    cf.br ^bb39
  ^bb41:  // 2 preds: ^bb39, ^bb42
    %213 = llvm.getelementptr %10[%207] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %205, %213 {alignment = 1 : i64} : i32, !llvm.ptr
    %214 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i32_105 = arith.constant 48 : i32
    %215 = arith.addi %214, %c48_i32_105 : i32
    llvm.store %215, %7 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb42:  // pred: ^bb39
    %c1_i32_106 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_106) : (i32) -> ()
    cf.br ^bb41
  }
  func.func @f133(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %4 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %9 = arith.subi %8, %c32_i32 : i32
    llvm.store %9, %2 : i32, !llvm.ptr
    llvm.store %9, %4 : i32, !llvm.ptr
    %10 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %11 = arith.extui %10 : i32 to i64
    %12 = arith.addi %11, %c0_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %13 = arith.addi %12, %c4_i64 : i64
    %c0_i32_2 = arith.constant 0 : i32
    %14 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_2) : (!llvm.ptr, i32) -> i32
    %15 = arith.extui %14 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %16 = arith.muli %15, %c65536_i64 : i64
    %17 = arith.cmpi ult, %13, %16 : i64
    cf.cond_br %17, ^bb5, ^bb6
  ^bb2(%18: i32):  // pred: ^bb3
    return %18 : i32
  ^bb3:  // 2 preds: ^bb10, ^bb30
    %19 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32_3 = arith.constant 32 : i32
    %20 = arith.addi %19, %c32_i32_3 : i32
    llvm.store %20, %4 : i32, !llvm.ptr
    %21 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%21 : i32)
  ^bb4:  // pred: ^bb5
    %22 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %23 = arith.addi %22, %c8_i32 : i32
    %c8_i32_4 = arith.constant 8 : i32
    %24 = arith.addi %23, %c8_i32_4 : i32
    %25 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %26 = arith.extui %25 : i32 to i64
    %27 = arith.addi %26, %c12_i64 : i64
    %c4_i64_5 = arith.constant 4 : i64
    %28 = arith.addi %27, %c4_i64_5 : i64
    %c0_i32_6 = arith.constant 0 : i32
    %29 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_6) : (!llvm.ptr, i32) -> i32
    %30 = arith.extui %29 : i32 to i64
    %c65536_i64_7 = arith.constant 65536 : i64
    %31 = arith.muli %30, %c65536_i64_7 : i64
    %32 = arith.cmpi ult, %28, %31 : i64
    cf.cond_br %32, ^bb12, ^bb13
  ^bb5:  // 2 preds: ^bb1, ^bb6
    %33 = llvm.getelementptr %7[%12] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %34 = llvm.load volatile %33 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %35 = arith.cmpi eq, %34, %c-2147483648_i32 : i32
    %36 = arith.extui %35 : i1 to i32
    %c0_i32_8 = arith.constant 0 : i32
    %37 = arith.cmpi ne, %36, %c0_i32_8 : i32
    cf.cond_br %37, ^bb4, ^bb7
  ^bb6:  // pred: ^bb1
    %c1_i32_9 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_9) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // pred: ^bb5
    %38 = llvm.load %1 : !llvm.ptr -> i32
    %39 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_10 = arith.constant 4 : i64
    %40 = arith.extui %39 : i32 to i64
    %41 = arith.addi %40, %c4_i64_10 : i64
    %c4_i64_11 = arith.constant 4 : i64
    %42 = arith.addi %41, %c4_i64_11 : i64
    %c0_i32_12 = arith.constant 0 : i32
    %43 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_12) : (!llvm.ptr, i32) -> i32
    %44 = arith.extui %43 : i32 to i64
    %c65536_i64_13 = arith.constant 65536 : i64
    %45 = arith.muli %44, %c65536_i64_13 : i64
    %46 = arith.cmpi ult, %42, %45 : i64
    cf.cond_br %46, ^bb8, ^bb9
  ^bb8:  // 2 preds: ^bb7, ^bb9
    %47 = llvm.getelementptr %7[%41] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %48 = llvm.load volatile %47 {alignment = 1 : i64} : !llvm.ptr -> i32
    %49 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %50 = arith.extui %49 : i32 to i64
    %51 = arith.addi %50, %c8_i64 : i64
    %c4_i64_14 = arith.constant 4 : i64
    %52 = arith.addi %51, %c4_i64_14 : i64
    %c0_i32_15 = arith.constant 0 : i32
    %53 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_15) : (!llvm.ptr, i32) -> i32
    %54 = arith.extui %53 : i32 to i64
    %c65536_i64_16 = arith.constant 65536 : i64
    %55 = arith.muli %54, %c65536_i64_16 : i64
    %56 = arith.cmpi ult, %52, %55 : i64
    cf.cond_br %56, ^bb10, ^bb11
  ^bb9:  // pred: ^bb7
    %c1_i32_17 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_17) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // 2 preds: ^bb8, ^bb11
    %57 = llvm.getelementptr %7[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %58 = llvm.load volatile %57 {alignment = 1 : i64} : !llvm.ptr -> i32
    %59 = call @f156(%arg0, %38, %48, %58) : (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %59, %0 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb11:  // pred: ^bb8
    %c1_i32_18 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_18) : (i32) -> ()
    cf.br ^bb10
  ^bb12:  // 2 preds: ^bb4, ^bb13
    %60 = llvm.getelementptr %7[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %61 = llvm.load volatile %60 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_19 = arith.constant 0 : i64
    %62 = arith.extui %61 : i32 to i64
    %63 = arith.addi %62, %c0_i64_19 : i64
    %c4_i64_20 = arith.constant 4 : i64
    %64 = arith.addi %63, %c4_i64_20 : i64
    %c0_i32_21 = arith.constant 0 : i32
    %65 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_21) : (!llvm.ptr, i32) -> i32
    %66 = arith.extui %65 : i32 to i64
    %c65536_i64_22 = arith.constant 65536 : i64
    %67 = arith.muli %66, %c65536_i64_22 : i64
    %68 = arith.cmpi ult, %64, %67 : i64
    cf.cond_br %68, ^bb14, ^bb15
  ^bb13:  // pred: ^bb4
    %c1_i32_23 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_23) : (i32) -> ()
    cf.br ^bb12
  ^bb14:  // 2 preds: ^bb12, ^bb15
    %69 = llvm.getelementptr %7[%63] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %70 = llvm.load volatile %69 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %70, %0 : i32, !llvm.ptr
    %c8_i32_24 = arith.constant 8 : i32
    %71 = arith.addi %70, %c8_i32_24 : i32
    %c0_i64_25 = arith.constant 0 : i64
    %72 = arith.extui %71 : i32 to i64
    %73 = arith.addi %72, %c0_i64_25 : i64
    %c8_i64_26 = arith.constant 8 : i64
    %74 = arith.addi %73, %c8_i64_26 : i64
    %c0_i32_27 = arith.constant 0 : i32
    %75 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_27) : (!llvm.ptr, i32) -> i32
    %76 = arith.extui %75 : i32 to i64
    %c65536_i64_28 = arith.constant 65536 : i64
    %77 = arith.muli %76, %c65536_i64_28 : i64
    %78 = arith.cmpi ult, %74, %77 : i64
    cf.cond_br %78, ^bb16, ^bb17
  ^bb15:  // pred: ^bb12
    %c1_i32_29 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_29) : (i32) -> ()
    cf.br ^bb14
  ^bb16:  // 2 preds: ^bb14, ^bb17
    %79 = llvm.getelementptr %7[%73] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %80 = llvm.load volatile %79 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_30 = arith.constant 0 : i64
    %81 = arith.extui %24 : i32 to i64
    %82 = arith.addi %81, %c0_i64_30 : i64
    %c8_i64_31 = arith.constant 8 : i64
    %83 = arith.addi %82, %c8_i64_31 : i64
    %c0_i32_32 = arith.constant 0 : i32
    %84 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_32) : (!llvm.ptr, i32) -> i32
    %85 = arith.extui %84 : i32 to i64
    %c65536_i64_33 = arith.constant 65536 : i64
    %86 = arith.muli %85, %c65536_i64_33 : i64
    %87 = arith.cmpi ult, %83, %86 : i64
    cf.cond_br %87, ^bb18, ^bb19
  ^bb17:  // pred: ^bb14
    %c1_i32_34 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_34) : (i32) -> ()
    cf.br ^bb16
  ^bb18:  // 2 preds: ^bb16, ^bb19
    %88 = llvm.getelementptr %7[%82] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %80, %88 {alignment = 1 : i64} : i64, !llvm.ptr
    %89 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_35 = arith.constant 8 : i32
    %90 = arith.addi %89, %c8_i32_35 : i32
    %c16_i32 = arith.constant 16 : i32
    %91 = arith.addi %90, %c16_i32 : i32
    %92 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_36 = arith.constant 16 : i32
    %93 = arith.addi %92, %c16_i32_36 : i32
    %c0_i64_37 = arith.constant 0 : i64
    %94 = arith.extui %93 : i32 to i64
    %95 = arith.addi %94, %c0_i64_37 : i64
    %c8_i64_38 = arith.constant 8 : i64
    %96 = arith.addi %95, %c8_i64_38 : i64
    %c0_i32_39 = arith.constant 0 : i32
    %97 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_39) : (!llvm.ptr, i32) -> i32
    %98 = arith.extui %97 : i32 to i64
    %c65536_i64_40 = arith.constant 65536 : i64
    %99 = arith.muli %98, %c65536_i64_40 : i64
    %100 = arith.cmpi ult, %96, %99 : i64
    cf.cond_br %100, ^bb20, ^bb21
  ^bb19:  // pred: ^bb16
    %c1_i32_41 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_41) : (i32) -> ()
    cf.br ^bb18
  ^bb20:  // 2 preds: ^bb18, ^bb21
    %101 = llvm.getelementptr %7[%95] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %102 = llvm.load volatile %101 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_42 = arith.constant 0 : i64
    %103 = arith.extui %91 : i32 to i64
    %104 = arith.addi %103, %c0_i64_42 : i64
    %c8_i64_43 = arith.constant 8 : i64
    %105 = arith.addi %104, %c8_i64_43 : i64
    %c0_i32_44 = arith.constant 0 : i32
    %106 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_44) : (!llvm.ptr, i32) -> i32
    %107 = arith.extui %106 : i32 to i64
    %c65536_i64_45 = arith.constant 65536 : i64
    %108 = arith.muli %107, %c65536_i64_45 : i64
    %109 = arith.cmpi ult, %105, %108 : i64
    cf.cond_br %109, ^bb22, ^bb23
  ^bb21:  // pred: ^bb18
    %c1_i32_46 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_46) : (i32) -> ()
    cf.br ^bb20
  ^bb22:  // 2 preds: ^bb20, ^bb23
    %110 = llvm.getelementptr %7[%104] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %102, %110 {alignment = 1 : i64} : i64, !llvm.ptr
    %111 = llvm.load %2 : !llvm.ptr -> i32
    %112 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_47 = arith.constant 0 : i64
    %113 = arith.extui %112 : i32 to i64
    %114 = arith.addi %113, %c0_i64_47 : i64
    %c8_i64_48 = arith.constant 8 : i64
    %115 = arith.addi %114, %c8_i64_48 : i64
    %c0_i32_49 = arith.constant 0 : i32
    %116 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_49) : (!llvm.ptr, i32) -> i32
    %117 = arith.extui %116 : i32 to i64
    %c65536_i64_50 = arith.constant 65536 : i64
    %118 = arith.muli %117, %c65536_i64_50 : i64
    %119 = arith.cmpi ult, %115, %118 : i64
    cf.cond_br %119, ^bb24, ^bb25
  ^bb23:  // pred: ^bb20
    %c1_i32_51 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_51) : (i32) -> ()
    cf.br ^bb22
  ^bb24:  // 2 preds: ^bb22, ^bb25
    %120 = llvm.getelementptr %7[%114] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %121 = llvm.load volatile %120 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c8_i64_52 = arith.constant 8 : i64
    %122 = arith.extui %111 : i32 to i64
    %123 = arith.addi %122, %c8_i64_52 : i64
    %c8_i64_53 = arith.constant 8 : i64
    %124 = arith.addi %123, %c8_i64_53 : i64
    %c0_i32_54 = arith.constant 0 : i32
    %125 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_54) : (!llvm.ptr, i32) -> i32
    %126 = arith.extui %125 : i32 to i64
    %c65536_i64_55 = arith.constant 65536 : i64
    %127 = arith.muli %126, %c65536_i64_55 : i64
    %128 = arith.cmpi ult, %124, %127 : i64
    cf.cond_br %128, ^bb26, ^bb27
  ^bb25:  // pred: ^bb22
    %c1_i32_56 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_56) : (i32) -> ()
    cf.br ^bb24
  ^bb26:  // 2 preds: ^bb24, ^bb27
    %129 = llvm.getelementptr %7[%123] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %121, %129 {alignment = 1 : i64} : i64, !llvm.ptr
    %130 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %131 = arith.extui %130 : i32 to i64
    %132 = arith.addi %131, %c20_i64 : i64
    %c4_i64_57 = arith.constant 4 : i64
    %133 = arith.addi %132, %c4_i64_57 : i64
    %c0_i32_58 = arith.constant 0 : i32
    %134 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_58) : (!llvm.ptr, i32) -> i32
    %135 = arith.extui %134 : i32 to i64
    %c65536_i64_59 = arith.constant 65536 : i64
    %136 = arith.muli %135, %c65536_i64_59 : i64
    %137 = arith.cmpi ult, %133, %136 : i64
    cf.cond_br %137, ^bb28, ^bb29
  ^bb27:  // pred: ^bb24
    %c1_i32_60 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_60) : (i32) -> ()
    cf.br ^bb26
  ^bb28:  // 2 preds: ^bb26, ^bb29
    %138 = llvm.getelementptr %7[%132] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %139 = llvm.load volatile %138 {alignment = 1 : i64} : !llvm.ptr -> i32
    %140 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %141 = arith.extui %140 : i32 to i64
    %142 = arith.addi %141, %c24_i64 : i64
    %c4_i64_61 = arith.constant 4 : i64
    %143 = arith.addi %142, %c4_i64_61 : i64
    %c0_i32_62 = arith.constant 0 : i32
    %144 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_62) : (!llvm.ptr, i32) -> i32
    %145 = arith.extui %144 : i32 to i64
    %c65536_i64_63 = arith.constant 65536 : i64
    %146 = arith.muli %145, %c65536_i64_63 : i64
    %147 = arith.cmpi ult, %143, %146 : i64
    cf.cond_br %147, ^bb30, ^bb31
  ^bb29:  // pred: ^bb26
    %c1_i32_64 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_64) : (i32) -> ()
    cf.br ^bb28
  ^bb30:  // 2 preds: ^bb28, ^bb31
    %148 = llvm.getelementptr %7[%142] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %149 = llvm.load volatile %148 {alignment = 1 : i64} : !llvm.ptr -> i32
    %150 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_65 = arith.constant 8 : i32
    %151 = arith.addi %150, %c8_i32_65 : i32
    %152 = call @f150(%arg0, %139, %149, %151) : (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %152, %0 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb31:  // pred: ^bb28
    %c1_i32_66 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_66) : (i32) -> ()
    cf.br ^bb30
  }
  func.func @f134(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32_3 = arith.constant 0 : i32
    %c1051609_i64 = arith.constant 1051609 : i64
    %7 = arith.extui %c0_i32_3 : i32 to i64
    %8 = arith.addi %7, %c1051609_i64 : i64
    %c1_i64 = arith.constant 1 : i64
    %9 = arith.addi %8, %c1_i64 : i64
    %c0_i32_4 = arith.constant 0 : i32
    %10 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_4) : (!llvm.ptr, i32) -> i32
    %11 = arith.extui %10 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %12 = arith.muli %11, %c65536_i64 : i64
    %13 = arith.cmpi ult, %9, %12 : i64
    cf.cond_br %13, ^bb3, ^bb4
  ^bb2:  // pred: ^bb17
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %14 = llvm.getelementptr %6[%8] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %15 = llvm.load volatile %14 {alignment = 1 : i64} : !llvm.ptr -> i8
    %16 = arith.extui %15 : i8 to i32
    %17 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %18 = arith.extui %17 : i32 to i64
    %19 = arith.addi %18, %c4_i64 : i64
    %c4_i64_5 = arith.constant 4 : i64
    %20 = arith.addi %19, %c4_i64_5 : i64
    %c0_i32_6 = arith.constant 0 : i32
    %21 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_6) : (!llvm.ptr, i32) -> i32
    %22 = arith.extui %21 : i32 to i64
    %c65536_i64_7 = arith.constant 65536 : i64
    %23 = arith.muli %22, %c65536_i64_7 : i64
    %24 = arith.cmpi ult, %20, %23 : i64
    cf.cond_br %24, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c1_i32_8 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_8) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %25 = llvm.getelementptr %6[%19] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %26 = llvm.load volatile %25 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %26, %2 : i32, !llvm.ptr
    %27 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %28 = arith.extui %27 : i32 to i64
    %29 = arith.addi %28, %c0_i64 : i64
    %c4_i64_9 = arith.constant 4 : i64
    %30 = arith.addi %29, %c4_i64_9 : i64
    %c0_i32_10 = arith.constant 0 : i32
    %31 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_10) : (!llvm.ptr, i32) -> i32
    %32 = arith.extui %31 : i32 to i64
    %c65536_i64_11 = arith.constant 65536 : i64
    %33 = arith.muli %32, %c65536_i64_11 : i64
    %34 = arith.cmpi ult, %30, %33 : i64
    cf.cond_br %34, ^bb7, ^bb8
  ^bb6:  // pred: ^bb3
    %c1_i32_12 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_12) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %35 = llvm.getelementptr %6[%29] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %36 = llvm.load volatile %35 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %36, %3 : i32, !llvm.ptr
    %c8_i32 = arith.constant 8 : i32
    %c4_i32 = arith.constant 4 : i32
    %37 = call @f77(%arg0, %c8_i32, %c4_i32) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %37, %1 : i32, !llvm.ptr
    %c0_i32_13 = arith.constant 0 : i32
    %38 = arith.cmpi ne, %37, %c0_i32_13 : i32
    cf.cond_br %38, ^bb9, ^bb10
  ^bb8:  // pred: ^bb5
    %c1_i32_14 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_14) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // pred: ^bb7
    %39 = llvm.load %1 : !llvm.ptr -> i32
    %40 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_15 = arith.constant 4 : i64
    %41 = arith.extui %39 : i32 to i64
    %42 = arith.addi %41, %c4_i64_15 : i64
    %c4_i64_16 = arith.constant 4 : i64
    %43 = arith.addi %42, %c4_i64_16 : i64
    %c0_i32_17 = arith.constant 0 : i32
    %44 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_17) : (!llvm.ptr, i32) -> i32
    %45 = arith.extui %44 : i32 to i64
    %c65536_i64_18 = arith.constant 65536 : i64
    %46 = arith.muli %45, %c65536_i64_18 : i64
    %47 = arith.cmpi ult, %43, %46 : i64
    cf.cond_br %47, ^bb11, ^bb12
  ^bb10:  // pred: ^bb7
    %c4_i32_19 = arith.constant 4 : i32
    %c8_i32_20 = arith.constant 8 : i32
    call @f144(%arg0, %c4_i32_19, %c8_i32_20) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %48 = llvm.getelementptr %6[%42] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %40, %48 {alignment = 1 : i64} : i32, !llvm.ptr
    %49 = llvm.load %1 : !llvm.ptr -> i32
    %50 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_21 = arith.constant 0 : i64
    %51 = arith.extui %49 : i32 to i64
    %52 = arith.addi %51, %c0_i64_21 : i64
    %c4_i64_22 = arith.constant 4 : i64
    %53 = arith.addi %52, %c4_i64_22 : i64
    %c0_i32_23 = arith.constant 0 : i32
    %54 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_23) : (!llvm.ptr, i32) -> i32
    %55 = arith.extui %54 : i32 to i64
    %c65536_i64_24 = arith.constant 65536 : i64
    %56 = arith.muli %55, %c65536_i64_24 : i64
    %57 = arith.cmpi ult, %53, %56 : i64
    cf.cond_br %57, ^bb13, ^bb14
  ^bb12:  // pred: ^bb9
    %c1_i32_25 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_25) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %58 = llvm.getelementptr %6[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %50, %58 {alignment = 1 : i64} : i32, !llvm.ptr
    %59 = llvm.load %0 : !llvm.ptr -> i32
    %c1050976_i32 = arith.constant 1050976 : i32
    %c4_i64_26 = arith.constant 4 : i64
    %60 = arith.extui %59 : i32 to i64
    %61 = arith.addi %60, %c4_i64_26 : i64
    %c4_i64_27 = arith.constant 4 : i64
    %62 = arith.addi %61, %c4_i64_27 : i64
    %c0_i32_28 = arith.constant 0 : i32
    %63 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_28) : (!llvm.ptr, i32) -> i32
    %64 = arith.extui %63 : i32 to i64
    %c65536_i64_29 = arith.constant 65536 : i64
    %65 = arith.muli %64, %c65536_i64_29 : i64
    %66 = arith.cmpi ult, %62, %65 : i64
    cf.cond_br %66, ^bb15, ^bb16
  ^bb14:  // pred: ^bb11
    %c1_i32_30 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_30) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // 2 preds: ^bb13, ^bb16
    %67 = llvm.getelementptr %6[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1050976_i32, %67 {alignment = 1 : i64} : i32, !llvm.ptr
    %68 = llvm.load %0 : !llvm.ptr -> i32
    %69 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_31 = arith.constant 0 : i64
    %70 = arith.extui %68 : i32 to i64
    %71 = arith.addi %70, %c0_i64_31 : i64
    %c4_i64_32 = arith.constant 4 : i64
    %72 = arith.addi %71, %c4_i64_32 : i64
    %c0_i32_33 = arith.constant 0 : i32
    %73 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_33) : (!llvm.ptr, i32) -> i32
    %74 = arith.extui %73 : i32 to i64
    %c65536_i64_34 = arith.constant 65536 : i64
    %75 = arith.muli %74, %c65536_i64_34 : i64
    %76 = arith.cmpi ult, %72, %75 : i64
    cf.cond_br %76, ^bb17, ^bb18
  ^bb16:  // pred: ^bb13
    %c1_i32_35 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_35) : (i32) -> ()
    cf.br ^bb15
  ^bb17:  // 2 preds: ^bb15, ^bb18
    %77 = llvm.getelementptr %6[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %69, %77 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb18:  // pred: ^bb15
    %c1_i32_36 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_36) : (i32) -> ()
    cf.br ^bb17
  }
  func.func @f135(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c1050976_i32 = arith.constant 1050976 : i32
    %c4_i64 = arith.constant 4 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c4_i64 : i64
    %c4_i64_1 = arith.constant 4 : i64
    %8 = arith.addi %7, %c4_i64_1 : i64
    %c0_i32 = arith.constant 0 : i32
    %9 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32) : (!llvm.ptr, i32) -> i32
    %10 = arith.extui %9 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %11 = arith.muli %10, %c65536_i64 : i64
    %12 = arith.cmpi ult, %8, %11 : i64
    cf.cond_br %12, ^bb3, ^bb4
  ^bb2:  // pred: ^bb5
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %13 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1050976_i32, %13 {alignment = 1 : i64} : i32, !llvm.ptr
    %14 = llvm.load %0 : !llvm.ptr -> i32
    %15 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %16 = arith.extui %14 : i32 to i64
    %17 = arith.addi %16, %c0_i64 : i64
    %c4_i64_2 = arith.constant 4 : i64
    %18 = arith.addi %17, %c4_i64_2 : i64
    %c0_i32_3 = arith.constant 0 : i32
    %19 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_3) : (!llvm.ptr, i32) -> i32
    %20 = arith.extui %19 : i32 to i64
    %c65536_i64_4 = arith.constant 65536 : i64
    %21 = arith.muli %20, %c65536_i64_4 : i64
    %22 = arith.cmpi ult, %18, %21 : i64
    cf.cond_br %22, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c1_i32_5 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_5) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %23 = llvm.getelementptr %4[%17] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %15, %23 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb6:  // pred: ^bb3
    %c1_i32_6 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_6) : (i32) -> ()
    cf.br ^bb5
  }
  func.func @f136(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %6 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %7 = arith.extui %6 : i32 to i64
    %8 = arith.addi %7, %c0_i64 : i64
    %c8_i64 = arith.constant 8 : i64
    %9 = arith.addi %8, %c8_i64 : i64
    %c0_i32 = arith.constant 0 : i32
    %10 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32) : (!llvm.ptr, i32) -> i32
    %11 = arith.extui %10 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %12 = arith.muli %11, %c65536_i64 : i64
    %13 = arith.cmpi ult, %9, %12 : i64
    cf.cond_br %13, ^bb3, ^bb4
  ^bb2:  // pred: ^bb5
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %14 = llvm.getelementptr %4[%8] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %15 = llvm.load volatile %14 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1 = arith.constant 0 : i64
    %16 = arith.extui %5 : i32 to i64
    %17 = arith.addi %16, %c0_i64_1 : i64
    %c8_i64_2 = arith.constant 8 : i64
    %18 = arith.addi %17, %c8_i64_2 : i64
    %c0_i32_3 = arith.constant 0 : i32
    %19 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_3) : (!llvm.ptr, i32) -> i32
    %20 = arith.extui %19 : i32 to i64
    %c65536_i64_4 = arith.constant 65536 : i64
    %21 = arith.muli %20, %c65536_i64_4 : i64
    %22 = arith.cmpi ult, %18, %21 : i64
    cf.cond_br %22, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c1_i32_5 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_5) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %23 = llvm.getelementptr %4[%17] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %15, %23 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb2
  ^bb6:  // pred: ^bb3
    %c1_i32_6 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_6) : (i32) -> ()
    cf.br ^bb5
  }
  func.func @f137(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %1 : !llvm.ptr -> i32
    %6 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %7 = arith.extui %6 : i32 to i64
    %8 = arith.addi %7, %c0_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %9 = arith.addi %8, %c4_i64 : i64
    %c0_i32 = arith.constant 0 : i32
    %10 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32) : (!llvm.ptr, i32) -> i32
    %11 = arith.extui %10 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %12 = arith.muli %11, %c65536_i64 : i64
    %13 = arith.cmpi ult, %9, %12 : i64
    cf.cond_br %13, ^bb3, ^bb4
  ^bb2(%14: i32):  // pred: ^bb5
    return %14 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %15 = llvm.getelementptr %4[%8] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %16 = llvm.load volatile %15 {alignment = 1 : i64} : !llvm.ptr -> i32
    %17 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_1 = arith.constant 4 : i64
    %18 = arith.extui %17 : i32 to i64
    %19 = arith.addi %18, %c4_i64_1 : i64
    %c4_i64_2 = arith.constant 4 : i64
    %20 = arith.addi %19, %c4_i64_2 : i64
    %c0_i32_3 = arith.constant 0 : i32
    %21 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_3) : (!llvm.ptr, i32) -> i32
    %22 = arith.extui %21 : i32 to i64
    %c65536_i64_4 = arith.constant 65536 : i64
    %23 = arith.muli %22, %c65536_i64_4 : i64
    %24 = arith.cmpi ult, %20, %23 : i64
    cf.cond_br %24, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c1_i32_5 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_5) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %25 = llvm.getelementptr %4[%19] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %26 = llvm.load volatile %25 {alignment = 1 : i64} : !llvm.ptr -> i32
    %27 = call @f156(%arg0, %5, %16, %26) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%27 : i32)
  ^bb6:  // pred: ^bb3
    %c1_i32_6 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_6) : (i32) -> ()
    cf.br ^bb5
  }
  func.func @f138(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %7 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> i32
    %14 = llvm.getelementptr %arg0[304] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %arg0[312] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.load %15 : !llvm.ptr -> i64
    %18 = arith.trunci %17 : i64 to i32
    %19 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %20 = llvm.load %15 : !llvm.ptr -> i64
    %21 = arith.trunci %20 : i64 to i32
    %22 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %23 = llvm.load %15 : !llvm.ptr -> i64
    %24 = arith.trunci %23 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %25 = llvm.load %8 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %26 = arith.subi %25, %c32_i32 : i32
    llvm.store %26, %5 : i32, !llvm.ptr
    llvm.store %26, %8 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %27 = call @f129(%arg0, %c1_i32_6) : (!llvm.ptr, i32) -> i32
    %c255_i32 = arith.constant 255 : i32
    %28 = arith.andi %27, %c255_i32 : i32
    llvm.store %28, %6 : i32, !llvm.ptr
    %c2_i32 = arith.constant 2 : i32
    %29 = arith.cmpi eq, %28, %c2_i32 : i32
    %30 = arith.extui %29 : i1 to i32
    %c0_i32_7 = arith.constant 0 : i32
    %31 = arith.cmpi ne, %30, %c0_i32_7 : i32
    cf.cond_br %31, ^bb4, ^bb5
  ^bb2:  // no predecessors
    return
  ^bb3:  // 4 preds: ^bb5, ^bb17, ^bb64, ^bb66
    llvm.unreachable
  ^bb4:  // pred: ^bb1
    %c0_i32_8 = arith.constant 0 : i32
    %c1051632_i64 = arith.constant 1051632 : i64
    %32 = arith.extui %c0_i32_8 : i32 to i64
    %33 = arith.addi %32, %c1051632_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %34 = arith.addi %33, %c4_i64 : i64
    %c0_i32_9 = arith.constant 0 : i32
    %35 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_9) : (!llvm.ptr, i32) -> i32
    %36 = arith.extui %35 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %37 = arith.muli %36, %c65536_i64 : i64
    %38 = arith.cmpi ult, %34, %37 : i64
    cf.cond_br %38, ^bb17, ^bb18
  ^bb5:  // pred: ^bb1
    %39 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i32_10 = arith.constant 1 : i32
    %40 = arith.andi %39, %c1_i32_10 : i32
    %c0_i32_11 = arith.constant 0 : i32
    %41 = arith.cmpi eq, %40, %c0_i32_11 : i32
    %42 = arith.extui %41 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %43 = arith.cmpi ne, %42, %c0_i32_12 : i32
    cf.cond_br %43, ^bb3, ^bb6
  ^bb6:  // pred: ^bb5
    %44 = llvm.load %5 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %45 = arith.addi %44, %c8_i32 : i32
    %46 = llvm.load %0 : !llvm.ptr -> i32
    %47 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %48 = arith.extui %47 : i32 to i64
    %49 = arith.addi %48, %c24_i64 : i64
    %c4_i64_13 = arith.constant 4 : i64
    %50 = arith.addi %49, %c4_i64_13 : i64
    %c0_i32_14 = arith.constant 0 : i32
    %51 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_14) : (!llvm.ptr, i32) -> i32
    %52 = arith.extui %51 : i32 to i64
    %c65536_i64_15 = arith.constant 65536 : i64
    %53 = arith.muli %52, %c65536_i64_15 : i64
    %54 = arith.cmpi ult, %50, %53 : i64
    cf.cond_br %54, ^bb7, ^bb8
  ^bb7:  // 2 preds: ^bb6, ^bb8
    %55 = llvm.getelementptr %11[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %56 = llvm.load volatile %55 {alignment = 1 : i64} : !llvm.ptr -> i32
    %57 = arith.cmpi ult, %56, %18 : i32
    cf.cond_br %57, ^bb9, ^bb10
  ^bb8:  // pred: ^bb6
    %c1_i32_16 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_16) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %58 = llvm.getelementptr inbounds %16[%56] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %59 = llvm.load %58 : !llvm.ptr -> !llvm.ptr
    %60 = llvm.ptrtoint %59 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %61 = arith.cmpi eq, %60, %c0_i64 : i64
    cf.cond_br %61, ^bb12, ^bb11
  ^bb10:  // pred: ^bb7
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %62 = llvm.getelementptr %59[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %63 = llvm.getelementptr %59[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %64 = llvm.getelementptr %59[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %65 = llvm.load %62 : !llvm.ptr -> !llvm.ptr
    %66 = llvm.load %64 : !llvm.ptr -> !llvm.ptr
    %67 = llvm.ptrtoint %65 : !llvm.ptr to i64
    %c0_i64_17 = arith.constant 0 : i64
    %68 = arith.cmpi eq, %67, %c0_i64_17 : i64
    cf.cond_br %68, ^bb14, ^bb13
  ^bb12:  // pred: ^bb9
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %69 = llvm.load %63 : !llvm.ptr -> i32
    %70 = arith.cmpi ne, %13, %69 : i32
    cf.cond_br %70, ^bb16, ^bb15
  ^bb14:  // pred: ^bb11
    %c3_i32_18 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_18) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // 2 preds: ^bb13, ^bb16
    %71 = llvm.call %65(%66, %45, %46) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> !llvm.void
    llvm.unreachable
  ^bb16:  // pred: ^bb13
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb15
  ^bb17:  // 2 preds: ^bb4, ^bb18
    %72 = llvm.getelementptr %11[%33] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %73 = llvm.load volatile %72 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %73, %6 : i32, !llvm.ptr
    %c-1_i32 = arith.constant -1 : i32
    %74 = arith.cmpi sle, %73, %c-1_i32 : i32
    %75 = arith.extui %74 : i1 to i32
    %c0_i32_19 = arith.constant 0 : i32
    %76 = arith.cmpi ne, %75, %c0_i32_19 : i32
    cf.cond_br %76, ^bb3, ^bb19
  ^bb18:  // pred: ^bb4
    %c1_i32_20 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_20) : (i32) -> ()
    cf.br ^bb17
  ^bb19:  // pred: ^bb17
    %c0_i32_21 = arith.constant 0 : i32
    %77 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i32_22 = arith.constant 1 : i32
    %78 = arith.addi %77, %c1_i32_22 : i32
    %c1051632_i64_23 = arith.constant 1051632 : i64
    %79 = arith.extui %c0_i32_21 : i32 to i64
    %80 = arith.addi %79, %c1051632_i64_23 : i64
    %c4_i64_24 = arith.constant 4 : i64
    %81 = arith.addi %80, %c4_i64_24 : i64
    %c0_i32_25 = arith.constant 0 : i32
    %82 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_25) : (!llvm.ptr, i32) -> i32
    %83 = arith.extui %82 : i32 to i64
    %c65536_i64_26 = arith.constant 65536 : i64
    %84 = arith.muli %83, %c65536_i64_26 : i64
    %85 = arith.cmpi ult, %81, %84 : i64
    cf.cond_br %85, ^bb20, ^bb21
  ^bb20:  // 2 preds: ^bb19, ^bb21
    %86 = llvm.getelementptr %11[%80] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %78, %86 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_27 = arith.constant 0 : i32
    %c1051636_i64 = arith.constant 1051636 : i64
    %87 = arith.extui %c0_i32_27 : i32 to i64
    %88 = arith.addi %87, %c1051636_i64 : i64
    %c4_i64_28 = arith.constant 4 : i64
    %89 = arith.addi %88, %c4_i64_28 : i64
    %c0_i32_29 = arith.constant 0 : i32
    %90 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_29) : (!llvm.ptr, i32) -> i32
    %91 = arith.extui %90 : i32 to i64
    %c65536_i64_30 = arith.constant 65536 : i64
    %92 = arith.muli %91, %c65536_i64_30 : i64
    %93 = arith.cmpi ult, %89, %92 : i64
    cf.cond_br %93, ^bb23, ^bb24
  ^bb21:  // pred: ^bb19
    %c1_i32_31 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_31) : (i32) -> ()
    cf.br ^bb20
  ^bb22:  // 2 preds: ^bb23, ^bb60
    %c0_i32_32 = arith.constant 0 : i32
    %94 = llvm.load %6 : !llvm.ptr -> i32
    %c1051632_i64_33 = arith.constant 1051632 : i64
    %95 = arith.extui %c0_i32_32 : i32 to i64
    %96 = arith.addi %95, %c1051632_i64_33 : i64
    %c4_i64_34 = arith.constant 4 : i64
    %97 = arith.addi %96, %c4_i64_34 : i64
    %c0_i32_35 = arith.constant 0 : i32
    %98 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_35) : (!llvm.ptr, i32) -> i32
    %99 = arith.extui %98 : i32 to i64
    %c65536_i64_36 = arith.constant 65536 : i64
    %100 = arith.muli %99, %c65536_i64_36 : i64
    %101 = arith.cmpi ult, %97, %100 : i64
    cf.cond_br %101, ^bb62, ^bb63
  ^bb23:  // 2 preds: ^bb20, ^bb24
    %102 = llvm.getelementptr %11[%88] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %103 = llvm.load volatile %102 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_37 = arith.constant 0 : i32
    %104 = arith.cmpi eq, %103, %c0_i32_37 : i32
    %105 = arith.extui %104 : i1 to i32
    %c0_i32_38 = arith.constant 0 : i32
    %106 = arith.cmpi ne, %105, %c0_i32_38 : i32
    cf.cond_br %106, ^bb22, ^bb25
  ^bb24:  // pred: ^bb20
    %c1_i32_39 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_39) : (i32) -> ()
    cf.br ^bb23
  ^bb25:  // pred: ^bb23
    %107 = llvm.load %5 : !llvm.ptr -> i32
    %108 = llvm.load %0 : !llvm.ptr -> i32
    %109 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %110 = arith.extui %109 : i32 to i64
    %111 = arith.addi %110, %c20_i64 : i64
    %c4_i64_40 = arith.constant 4 : i64
    %112 = arith.addi %111, %c4_i64_40 : i64
    %c0_i32_41 = arith.constant 0 : i32
    %113 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_41) : (!llvm.ptr, i32) -> i32
    %114 = arith.extui %113 : i32 to i64
    %c65536_i64_42 = arith.constant 65536 : i64
    %115 = arith.muli %114, %c65536_i64_42 : i64
    %116 = arith.cmpi ult, %112, %115 : i64
    cf.cond_br %116, ^bb26, ^bb27
  ^bb26:  // 2 preds: ^bb25, ^bb27
    %117 = llvm.getelementptr %11[%111] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %118 = llvm.load volatile %117 {alignment = 1 : i64} : !llvm.ptr -> i32
    %119 = arith.cmpi ult, %118, %21 : i32
    cf.cond_br %119, ^bb28, ^bb29
  ^bb27:  // pred: ^bb25
    %c1_i32_43 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_43) : (i32) -> ()
    cf.br ^bb26
  ^bb28:  // 2 preds: ^bb26, ^bb29
    %120 = llvm.getelementptr inbounds %19[%118] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %121 = llvm.load %120 : !llvm.ptr -> !llvm.ptr
    %122 = llvm.ptrtoint %121 : !llvm.ptr to i64
    %c0_i64_44 = arith.constant 0 : i64
    %123 = arith.cmpi eq, %122, %c0_i64_44 : i64
    cf.cond_br %123, ^bb31, ^bb30
  ^bb29:  // pred: ^bb26
    %c3_i32_45 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_45) : (i32) -> ()
    cf.br ^bb28
  ^bb30:  // 2 preds: ^bb28, ^bb31
    %124 = llvm.getelementptr %121[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %125 = llvm.getelementptr %121[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %126 = llvm.getelementptr %121[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %127 = llvm.load %124 : !llvm.ptr -> !llvm.ptr
    %128 = llvm.load %126 : !llvm.ptr -> !llvm.ptr
    %129 = llvm.ptrtoint %127 : !llvm.ptr to i64
    %c0_i64_46 = arith.constant 0 : i64
    %130 = arith.cmpi eq, %129, %c0_i64_46 : i64
    cf.cond_br %130, ^bb33, ^bb32
  ^bb31:  // pred: ^bb28
    %c4_i32_47 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_47) : (i32) -> ()
    cf.br ^bb30
  ^bb32:  // 2 preds: ^bb30, ^bb33
    %131 = llvm.load %125 : !llvm.ptr -> i32
    %132 = arith.cmpi ne, %13, %131 : i32
    cf.cond_br %132, ^bb35, ^bb34
  ^bb33:  // pred: ^bb30
    %c3_i32_48 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_48) : (i32) -> ()
    cf.br ^bb32
  ^bb34:  // 2 preds: ^bb32, ^bb35
    %133 = llvm.call %127(%128, %107, %108) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> !llvm.void
    %134 = llvm.load %5 : !llvm.ptr -> i32
    %135 = llvm.load %4 : !llvm.ptr -> i32
    %c29_i64 = arith.constant 29 : i64
    %136 = arith.extui %134 : i32 to i64
    %137 = arith.addi %136, %c29_i64 : i64
    %c1_i64 = arith.constant 1 : i64
    %138 = arith.addi %137, %c1_i64 : i64
    %c0_i32_49 = arith.constant 0 : i32
    %139 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_49) : (!llvm.ptr, i32) -> i32
    %140 = arith.extui %139 : i32 to i64
    %c65536_i64_50 = arith.constant 65536 : i64
    %141 = arith.muli %140, %c65536_i64_50 : i64
    %142 = arith.cmpi ult, %138, %141 : i64
    cf.cond_br %142, ^bb36, ^bb37
  ^bb35:  // pred: ^bb32
    %c5_i32_51 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_51) : (i32) -> ()
    cf.br ^bb34
  ^bb36:  // 2 preds: ^bb34, ^bb37
    %143 = llvm.getelementptr %11[%137] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %144 = arith.trunci %135 : i32 to i8
    llvm.store volatile %144, %143 {alignment = 1 : i64} : i8, !llvm.ptr
    %145 = llvm.load %5 : !llvm.ptr -> i32
    %146 = llvm.load %3 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %147 = arith.extui %145 : i32 to i64
    %148 = arith.addi %147, %c28_i64 : i64
    %c1_i64_52 = arith.constant 1 : i64
    %149 = arith.addi %148, %c1_i64_52 : i64
    %c0_i32_53 = arith.constant 0 : i32
    %150 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_53) : (!llvm.ptr, i32) -> i32
    %151 = arith.extui %150 : i32 to i64
    %c65536_i64_54 = arith.constant 65536 : i64
    %152 = arith.muli %151, %c65536_i64_54 : i64
    %153 = arith.cmpi ult, %149, %152 : i64
    cf.cond_br %153, ^bb38, ^bb39
  ^bb37:  // pred: ^bb34
    %c1_i32_55 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_55) : (i32) -> ()
    cf.br ^bb36
  ^bb38:  // 2 preds: ^bb36, ^bb39
    %154 = llvm.getelementptr %11[%148] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %155 = arith.trunci %146 : i32 to i8
    llvm.store volatile %155, %154 {alignment = 1 : i64} : i8, !llvm.ptr
    %156 = llvm.load %5 : !llvm.ptr -> i32
    %157 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i64_56 = arith.constant 24 : i64
    %158 = arith.extui %156 : i32 to i64
    %159 = arith.addi %158, %c24_i64_56 : i64
    %c4_i64_57 = arith.constant 4 : i64
    %160 = arith.addi %159, %c4_i64_57 : i64
    %c0_i32_58 = arith.constant 0 : i32
    %161 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_58) : (!llvm.ptr, i32) -> i32
    %162 = arith.extui %161 : i32 to i64
    %c65536_i64_59 = arith.constant 65536 : i64
    %163 = arith.muli %162, %c65536_i64_59 : i64
    %164 = arith.cmpi ult, %160, %163 : i64
    cf.cond_br %164, ^bb40, ^bb41
  ^bb39:  // pred: ^bb36
    %c1_i32_60 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_60) : (i32) -> ()
    cf.br ^bb38
  ^bb40:  // 2 preds: ^bb38, ^bb41
    %165 = llvm.getelementptr %11[%159] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %157, %165 {alignment = 1 : i64} : i32, !llvm.ptr
    %166 = llvm.load %5 : !llvm.ptr -> i32
    %167 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64_61 = arith.constant 0 : i64
    %168 = arith.extui %167 : i32 to i64
    %169 = arith.addi %168, %c0_i64_61 : i64
    %c8_i64 = arith.constant 8 : i64
    %170 = arith.addi %169, %c8_i64 : i64
    %c0_i32_62 = arith.constant 0 : i32
    %171 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_62) : (!llvm.ptr, i32) -> i32
    %172 = arith.extui %171 : i32 to i64
    %c65536_i64_63 = arith.constant 65536 : i64
    %173 = arith.muli %172, %c65536_i64_63 : i64
    %174 = arith.cmpi ult, %170, %173 : i64
    cf.cond_br %174, ^bb42, ^bb43
  ^bb41:  // pred: ^bb38
    %c1_i32_64 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_64) : (i32) -> ()
    cf.br ^bb40
  ^bb42:  // 2 preds: ^bb40, ^bb43
    %175 = llvm.getelementptr %11[%169] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %176 = llvm.load volatile %175 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c16_i64 = arith.constant 16 : i64
    %177 = arith.extui %166 : i32 to i64
    %178 = arith.addi %177, %c16_i64 : i64
    %c8_i64_65 = arith.constant 8 : i64
    %179 = arith.addi %178, %c8_i64_65 : i64
    %c0_i32_66 = arith.constant 0 : i32
    %180 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_66) : (!llvm.ptr, i32) -> i32
    %181 = arith.extui %180 : i32 to i64
    %c65536_i64_67 = arith.constant 65536 : i64
    %182 = arith.muli %181, %c65536_i64_67 : i64
    %183 = arith.cmpi ult, %179, %182 : i64
    cf.cond_br %183, ^bb44, ^bb45
  ^bb43:  // pred: ^bb40
    %c1_i32_68 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_68) : (i32) -> ()
    cf.br ^bb42
  ^bb44:  // 2 preds: ^bb42, ^bb45
    %184 = llvm.getelementptr %11[%178] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %176, %184 {alignment = 1 : i64} : i64, !llvm.ptr
    %c0_i32_69 = arith.constant 0 : i32
    %c1051636_i64_70 = arith.constant 1051636 : i64
    %185 = arith.extui %c0_i32_69 : i32 to i64
    %186 = arith.addi %185, %c1051636_i64_70 : i64
    %c4_i64_71 = arith.constant 4 : i64
    %187 = arith.addi %186, %c4_i64_71 : i64
    %c0_i32_72 = arith.constant 0 : i32
    %188 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_72) : (!llvm.ptr, i32) -> i32
    %189 = arith.extui %188 : i32 to i64
    %c65536_i64_73 = arith.constant 65536 : i64
    %190 = arith.muli %189, %c65536_i64_73 : i64
    %191 = arith.cmpi ult, %187, %190 : i64
    cf.cond_br %191, ^bb46, ^bb47
  ^bb45:  // pred: ^bb42
    %c1_i32_74 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_74) : (i32) -> ()
    cf.br ^bb44
  ^bb46:  // 2 preds: ^bb44, ^bb47
    %192 = llvm.getelementptr %11[%186] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %193 = llvm.load volatile %192 {alignment = 1 : i64} : !llvm.ptr -> i32
    %194 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %195 = arith.addi %194, %c16_i32 : i32
    %c0_i32_75 = arith.constant 0 : i32
    %c1051640_i64 = arith.constant 1051640 : i64
    %196 = arith.extui %c0_i32_75 : i32 to i64
    %197 = arith.addi %196, %c1051640_i64 : i64
    %c4_i64_76 = arith.constant 4 : i64
    %198 = arith.addi %197, %c4_i64_76 : i64
    %c0_i32_77 = arith.constant 0 : i32
    %199 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_77) : (!llvm.ptr, i32) -> i32
    %200 = arith.extui %199 : i32 to i64
    %c65536_i64_78 = arith.constant 65536 : i64
    %201 = arith.muli %200, %c65536_i64_78 : i64
    %202 = arith.cmpi ult, %198, %201 : i64
    cf.cond_br %202, ^bb48, ^bb49
  ^bb47:  // pred: ^bb44
    %c1_i32_79 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_79) : (i32) -> ()
    cf.br ^bb46
  ^bb48:  // 2 preds: ^bb46, ^bb49
    %203 = llvm.getelementptr %11[%197] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %204 = llvm.load volatile %203 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c20_i64_80 = arith.constant 20 : i64
    %205 = arith.extui %204 : i32 to i64
    %206 = arith.addi %205, %c20_i64_80 : i64
    %c4_i64_81 = arith.constant 4 : i64
    %207 = arith.addi %206, %c4_i64_81 : i64
    %c0_i32_82 = arith.constant 0 : i32
    %208 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_82) : (!llvm.ptr, i32) -> i32
    %209 = arith.extui %208 : i32 to i64
    %c65536_i64_83 = arith.constant 65536 : i64
    %210 = arith.muli %209, %c65536_i64_83 : i64
    %211 = arith.cmpi ult, %207, %210 : i64
    cf.cond_br %211, ^bb50, ^bb51
  ^bb49:  // pred: ^bb46
    %c1_i32_84 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_84) : (i32) -> ()
    cf.br ^bb48
  ^bb50:  // 2 preds: ^bb48, ^bb51
    %212 = llvm.getelementptr %11[%206] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %213 = llvm.load volatile %212 {alignment = 1 : i64} : !llvm.ptr -> i32
    %214 = arith.cmpi ult, %213, %24 : i32
    cf.cond_br %214, ^bb52, ^bb53
  ^bb51:  // pred: ^bb48
    %c1_i32_85 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_85) : (i32) -> ()
    cf.br ^bb50
  ^bb52:  // 2 preds: ^bb50, ^bb53
    %215 = llvm.getelementptr inbounds %22[%213] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %216 = llvm.load %215 : !llvm.ptr -> !llvm.ptr
    %217 = llvm.ptrtoint %216 : !llvm.ptr to i64
    %c0_i64_86 = arith.constant 0 : i64
    %218 = arith.cmpi eq, %217, %c0_i64_86 : i64
    cf.cond_br %218, ^bb55, ^bb54
  ^bb53:  // pred: ^bb50
    %c3_i32_87 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_87) : (i32) -> ()
    cf.br ^bb52
  ^bb54:  // 2 preds: ^bb52, ^bb55
    %219 = llvm.getelementptr %216[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %220 = llvm.getelementptr %216[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %221 = llvm.getelementptr %216[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %222 = llvm.load %219 : !llvm.ptr -> !llvm.ptr
    %223 = llvm.load %221 : !llvm.ptr -> !llvm.ptr
    %224 = llvm.ptrtoint %222 : !llvm.ptr to i64
    %c0_i64_88 = arith.constant 0 : i64
    %225 = arith.cmpi eq, %224, %c0_i64_88 : i64
    cf.cond_br %225, ^bb57, ^bb56
  ^bb55:  // pred: ^bb52
    %c4_i32_89 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_89) : (i32) -> ()
    cf.br ^bb54
  ^bb56:  // 2 preds: ^bb54, ^bb57
    %226 = llvm.load %220 : !llvm.ptr -> i32
    %227 = arith.cmpi ne, %13, %226 : i32
    cf.cond_br %227, ^bb59, ^bb58
  ^bb57:  // pred: ^bb54
    %c3_i32_90 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_90) : (i32) -> ()
    cf.br ^bb56
  ^bb58:  // 2 preds: ^bb56, ^bb59
    %228 = llvm.call %222(%223, %193, %195) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> !llvm.void
    %c0_i32_91 = arith.constant 0 : i32
    %c1051632_i64_92 = arith.constant 1051632 : i64
    %229 = arith.extui %c0_i32_91 : i32 to i64
    %230 = arith.addi %229, %c1051632_i64_92 : i64
    %c4_i64_93 = arith.constant 4 : i64
    %231 = arith.addi %230, %c4_i64_93 : i64
    %c0_i32_94 = arith.constant 0 : i32
    %232 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_94) : (!llvm.ptr, i32) -> i32
    %233 = arith.extui %232 : i32 to i64
    %c65536_i64_95 = arith.constant 65536 : i64
    %234 = arith.muli %233, %c65536_i64_95 : i64
    %235 = arith.cmpi ult, %231, %234 : i64
    cf.cond_br %235, ^bb60, ^bb61
  ^bb59:  // pred: ^bb56
    %c5_i32_96 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_96) : (i32) -> ()
    cf.br ^bb58
  ^bb60:  // 2 preds: ^bb58, ^bb61
    %236 = llvm.getelementptr %11[%230] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %237 = llvm.load volatile %236 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-1_i32_97 = arith.constant -1 : i32
    %238 = arith.addi %237, %c-1_i32_97 : i32
    llvm.store %238, %6 : i32, !llvm.ptr
    cf.br ^bb22
  ^bb61:  // pred: ^bb58
    %c1_i32_98 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_98) : (i32) -> ()
    cf.br ^bb60
  ^bb62:  // 2 preds: ^bb22, ^bb63
    %239 = llvm.getelementptr %11[%96] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %94, %239 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_99 = arith.constant 0 : i32
    %c0_i32_100 = arith.constant 0 : i32
    %c1051652_i64 = arith.constant 1051652 : i64
    %240 = arith.extui %c0_i32_99 : i32 to i64
    %241 = arith.addi %240, %c1051652_i64 : i64
    %c1_i64_101 = arith.constant 1 : i64
    %242 = arith.addi %241, %c1_i64_101 : i64
    %c0_i32_102 = arith.constant 0 : i32
    %243 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_102) : (!llvm.ptr, i32) -> i32
    %244 = arith.extui %243 : i32 to i64
    %c65536_i64_103 = arith.constant 65536 : i64
    %245 = arith.muli %244, %c65536_i64_103 : i64
    %246 = arith.cmpi ult, %242, %245 : i64
    cf.cond_br %246, ^bb64, ^bb65
  ^bb63:  // pred: ^bb22
    %c1_i32_104 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_104) : (i32) -> ()
    cf.br ^bb62
  ^bb64:  // 2 preds: ^bb62, ^bb65
    %247 = llvm.getelementptr %11[%241] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %248 = arith.trunci %c0_i32_100 : i32 to i8
    llvm.store volatile %248, %247 {alignment = 1 : i64} : i8, !llvm.ptr
    %249 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_105 = arith.constant 0 : i32
    %250 = arith.cmpi eq, %249, %c0_i32_105 : i32
    %251 = arith.extui %250 : i1 to i32
    %c0_i32_106 = arith.constant 0 : i32
    %252 = arith.cmpi ne, %251, %c0_i32_106 : i32
    cf.cond_br %252, ^bb3, ^bb66
  ^bb65:  // pred: ^bb62
    %c1_i32_107 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_107) : (i32) -> ()
    cf.br ^bb64
  ^bb66:  // pred: ^bb64
    %253 = llvm.load %0 : !llvm.ptr -> i32
    %254 = llvm.load %1 : !llvm.ptr -> i32
    call @f139(%arg0, %253, %254) : (!llvm.ptr, i32, i32) -> ()
    cf.br ^bb3
  }
  func.func @f139(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = llvm.load %1 : !llvm.ptr -> i32
    %4 = call @f141(%arg0, %2, %3) : (!llvm.ptr, i32, i32) -> i32
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f140(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> i32
    %8 = llvm.getelementptr %arg0[304] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %arg0[312] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.load %9 : !llvm.ptr -> i64
    %12 = arith.trunci %11 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %14 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_2 = arith.constant 0 : i32
    %c1051628_i64 = arith.constant 1051628 : i64
    %15 = arith.extui %c0_i32_2 : i32 to i64
    %16 = arith.addi %15, %c1051628_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %17 = arith.addi %16, %c4_i64 : i64
    %c0_i32_3 = arith.constant 0 : i32
    %18 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_3) : (!llvm.ptr, i32) -> i32
    %19 = arith.extui %18 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %20 = arith.muli %19, %c65536_i64 : i64
    %21 = arith.cmpi ult, %17, %20 : i64
    cf.cond_br %21, ^bb3, ^bb4
  ^bb2:  // no predecessors
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %22 = llvm.getelementptr %5[%16] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %23 = llvm.load volatile %22 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %23, %2 : i32, !llvm.ptr
    %c4_i32 = arith.constant 4 : i32
    %24 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_4 = arith.constant 0 : i32
    %25 = arith.cmpi ne, %24, %c0_i32_4 : i32
    %26 = arith.select %25, %23, %c4_i32 : i32
    %27 = arith.cmpi ult, %26, %12 : i32
    cf.cond_br %27, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c1_i32_5 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_5) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %28 = llvm.getelementptr inbounds %10[%26] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %29 = llvm.load %28 : !llvm.ptr -> !llvm.ptr
    %30 = llvm.ptrtoint %29 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %31 = arith.cmpi eq, %30, %c0_i64 : i64
    cf.cond_br %31, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %32 = llvm.getelementptr %29[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %33 = llvm.getelementptr %29[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %34 = llvm.getelementptr %29[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %35 = llvm.load %32 : !llvm.ptr -> !llvm.ptr
    %36 = llvm.load %34 : !llvm.ptr -> !llvm.ptr
    %37 = llvm.ptrtoint %35 : !llvm.ptr to i64
    %c0_i64_6 = arith.constant 0 : i64
    %38 = arith.cmpi eq, %37, %c0_i64_6 : i64
    cf.cond_br %38, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c4_i32_7 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_7) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %39 = llvm.load %33 : !llvm.ptr -> i32
    %40 = arith.cmpi ne, %7, %39 : i32
    cf.cond_br %40, ^bb12, ^bb11
  ^bb10:  // pred: ^bb7
    %c3_i32_8 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_8) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %41 = llvm.call %35(%36, %13, %14) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> !llvm.void
    llvm.unreachable
  ^bb12:  // pred: ^bb9
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb11
  }
  func.func @f141(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    llvm.unreachable
  ^bb2(%2: i32):  // no predecessors
    return %2 : i32
  }
  func.func @f142(%arg0: !llvm.ptr) {
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    %3 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %6 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %7 = arith.subi %6, %c32_i32 : i32
    llvm.store %7, %0 : i32, !llvm.ptr
    llvm.store %7, %2 : i32, !llvm.ptr
    %8 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %c24_i64 = arith.constant 24 : i64
    %9 = arith.extui %8 : i32 to i64
    %10 = arith.addi %9, %c24_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %11 = arith.addi %10, %c4_i64 : i64
    %c0_i32_1 = arith.constant 0 : i32
    %12 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1) : (!llvm.ptr, i32) -> i32
    %13 = arith.extui %12 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %14 = arith.muli %13, %c65536_i64 : i64
    %15 = arith.cmpi ult, %11, %14 : i64
    cf.cond_br %15, ^bb3, ^bb4
  ^bb2:  // no predecessors
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %16 = llvm.getelementptr %5[%10] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_0, %16 {alignment = 1 : i64} : i32, !llvm.ptr
    %17 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_2 = arith.constant 1 : i32
    %c12_i64 = arith.constant 12 : i64
    %18 = arith.extui %17 : i32 to i64
    %19 = arith.addi %18, %c12_i64 : i64
    %c4_i64_3 = arith.constant 4 : i64
    %20 = arith.addi %19, %c4_i64_3 : i64
    %c0_i32_4 = arith.constant 0 : i32
    %21 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_4) : (!llvm.ptr, i32) -> i32
    %22 = arith.extui %21 : i32 to i64
    %c65536_i64_5 = arith.constant 65536 : i64
    %23 = arith.muli %22, %c65536_i64_5 : i64
    %24 = arith.cmpi ult, %20, %23 : i64
    cf.cond_br %24, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c1_i32_6 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_6) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %25 = llvm.getelementptr %5[%19] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_2, %25 {alignment = 1 : i64} : i32, !llvm.ptr
    %26 = llvm.load %0 : !llvm.ptr -> i32
    %c1051068_i32 = arith.constant 1051068 : i32
    %c8_i64 = arith.constant 8 : i64
    %27 = arith.extui %26 : i32 to i64
    %28 = arith.addi %27, %c8_i64 : i64
    %c4_i64_7 = arith.constant 4 : i64
    %29 = arith.addi %28, %c4_i64_7 : i64
    %c0_i32_8 = arith.constant 0 : i32
    %30 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_8) : (!llvm.ptr, i32) -> i32
    %31 = arith.extui %30 : i32 to i64
    %c65536_i64_9 = arith.constant 65536 : i64
    %32 = arith.muli %31, %c65536_i64_9 : i64
    %33 = arith.cmpi ult, %29, %32 : i64
    cf.cond_br %33, ^bb7, ^bb8
  ^bb6:  // pred: ^bb3
    %c1_i32_10 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_10) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %34 = llvm.getelementptr %5[%28] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1051068_i32, %34 {alignment = 1 : i64} : i32, !llvm.ptr
    %35 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_11 = arith.constant 4 : i64
    %c16_i64 = arith.constant 16 : i64
    %36 = arith.extui %35 : i32 to i64
    %37 = arith.addi %36, %c16_i64 : i64
    %c8_i64_12 = arith.constant 8 : i64
    %38 = arith.addi %37, %c8_i64_12 : i64
    %c0_i32_13 = arith.constant 0 : i32
    %39 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_13) : (!llvm.ptr, i32) -> i32
    %40 = arith.extui %39 : i32 to i64
    %c65536_i64_14 = arith.constant 65536 : i64
    %41 = arith.muli %40, %c65536_i64_14 : i64
    %42 = arith.cmpi ult, %38, %41 : i64
    cf.cond_br %42, ^bb9, ^bb10
  ^bb8:  // pred: ^bb5
    %c1_i32_15 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_15) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %43 = llvm.getelementptr %5[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4_i64_11, %43 {alignment = 1 : i64} : i64, !llvm.ptr
    %44 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %45 = arith.addi %44, %c8_i32 : i32
    %c1051096_i32 = arith.constant 1051096 : i32
    call @f148(%arg0, %45, %c1051096_i32) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb10:  // pred: ^bb7
    %c1_i32_16 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_16) : (i32) -> ()
    cf.br ^bb9
  }
  func.func @f143(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %3 = arith.cmpi ne, %2, %c0_i32 : i32
    cf.cond_br %3, ^bb3, ^bb4
  ^bb2:  // no predecessors
    return
  ^bb3:  // pred: ^bb1
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %5 = llvm.load %1 : !llvm.ptr -> i32
    call @f144(%arg0, %4, %5) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb4:  // pred: ^bb1
    call @f142(%arg0) : (!llvm.ptr) -> ()
    llvm.unreachable
  }
  func.func @f144(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.load %0 : !llvm.ptr -> i32
    call @f56(%arg0, %2, %3) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f145(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %4 : i64, !llvm.ptr
    %5 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %7[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %10 = llvm.load %6 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %11 = arith.subi %10, %c48_i32 : i32
    llvm.store %11, %3 : i32, !llvm.ptr
    llvm.store %11, %6 : i32, !llvm.ptr
    %12 = llvm.load %3 : !llvm.ptr -> i32
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_4 = arith.constant 0 : i64
    %14 = arith.extui %12 : i32 to i64
    %15 = arith.addi %14, %c0_i64_4 : i64
    %c4_i64 = arith.constant 4 : i64
    %16 = arith.addi %15, %c4_i64 : i64
    %c0_i32_5 = arith.constant 0 : i32
    %17 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_5) : (!llvm.ptr, i32) -> i32
    %18 = arith.extui %17 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %19 = arith.muli %18, %c65536_i64 : i64
    %20 = arith.cmpi ult, %16, %19 : i64
    cf.cond_br %20, ^bb3, ^bb4
  ^bb2:  // no predecessors
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %21 = llvm.getelementptr %9[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %13, %21 {alignment = 1 : i64} : i32, !llvm.ptr
    %22 = llvm.load %3 : !llvm.ptr -> i32
    %23 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_6 = arith.constant 4 : i64
    %24 = arith.extui %22 : i32 to i64
    %25 = arith.addi %24, %c4_i64_6 : i64
    %c4_i64_7 = arith.constant 4 : i64
    %26 = arith.addi %25, %c4_i64_7 : i64
    %c0_i32_8 = arith.constant 0 : i32
    %27 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_8) : (!llvm.ptr, i32) -> i32
    %28 = arith.extui %27 : i32 to i64
    %c65536_i64_9 = arith.constant 65536 : i64
    %29 = arith.muli %28, %c65536_i64_9 : i64
    %30 = arith.cmpi ult, %26, %29 : i64
    cf.cond_br %30, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c1_i32_10 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_10) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %31 = llvm.getelementptr %9[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %23, %31 {alignment = 1 : i64} : i32, !llvm.ptr
    %32 = llvm.load %3 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c12_i64 = arith.constant 12 : i64
    %33 = arith.extui %32 : i32 to i64
    %34 = arith.addi %33, %c12_i64 : i64
    %c4_i64_11 = arith.constant 4 : i64
    %35 = arith.addi %34, %c4_i64_11 : i64
    %c0_i32_12 = arith.constant 0 : i32
    %36 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_12) : (!llvm.ptr, i32) -> i32
    %37 = arith.extui %36 : i32 to i64
    %c65536_i64_13 = arith.constant 65536 : i64
    %38 = arith.muli %37, %c65536_i64_13 : i64
    %39 = arith.cmpi ult, %35, %38 : i64
    cf.cond_br %39, ^bb7, ^bb8
  ^bb6:  // pred: ^bb3
    %c1_i32_14 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_14) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %40 = llvm.getelementptr %9[%34] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i32, %40 {alignment = 1 : i64} : i32, !llvm.ptr
    %41 = llvm.load %3 : !llvm.ptr -> i32
    %c1051400_i32 = arith.constant 1051400 : i32
    %c8_i64 = arith.constant 8 : i64
    %42 = arith.extui %41 : i32 to i64
    %43 = arith.addi %42, %c8_i64 : i64
    %c4_i64_15 = arith.constant 4 : i64
    %44 = arith.addi %43, %c4_i64_15 : i64
    %c0_i32_16 = arith.constant 0 : i32
    %45 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_16) : (!llvm.ptr, i32) -> i32
    %46 = arith.extui %45 : i32 to i64
    %c65536_i64_17 = arith.constant 65536 : i64
    %47 = arith.muli %46, %c65536_i64_17 : i64
    %48 = arith.cmpi ult, %44, %47 : i64
    cf.cond_br %48, ^bb9, ^bb10
  ^bb8:  // pred: ^bb5
    %c1_i32_18 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_18) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %49 = llvm.getelementptr %9[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1051400_i32, %49 {alignment = 1 : i64} : i32, !llvm.ptr
    %50 = llvm.load %3 : !llvm.ptr -> i32
    %c2_i64 = arith.constant 2 : i64
    %c20_i64 = arith.constant 20 : i64
    %51 = arith.extui %50 : i32 to i64
    %52 = arith.addi %51, %c20_i64 : i64
    %c8_i64_19 = arith.constant 8 : i64
    %53 = arith.addi %52, %c8_i64_19 : i64
    %c0_i32_20 = arith.constant 0 : i32
    %54 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_20) : (!llvm.ptr, i32) -> i32
    %55 = arith.extui %54 : i32 to i64
    %c65536_i64_21 = arith.constant 65536 : i64
    %56 = arith.muli %55, %c65536_i64_21 : i64
    %57 = arith.cmpi ult, %53, %56 : i64
    cf.cond_br %57, ^bb11, ^bb12
  ^bb10:  // pred: ^bb7
    %c1_i32_22 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_22) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %58 = llvm.getelementptr %9[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i64, %58 {alignment = 1 : i64} : i64, !llvm.ptr
    %59 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %60 = arith.extui %c3_i32 : i32 to i64
    %c32_i64 = arith.constant 32 : i64
    %c63_i64 = arith.constant 63 : i64
    %61 = arith.cmpi ule, %c32_i64, %c63_i64 : i64
    %62 = scf.if %61 -> (i64) {
      %102 = arith.shli %60, %c32_i64 : i64
      scf.yield %102 : i64
    } else {
      %c0_i64_37 = arith.constant 0 : i64
      scf.yield %c0_i64_37 : i64
    }
    llvm.store %62, %4 : i64, !llvm.ptr
    %63 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %64 = arith.addi %63, %c4_i32 : i32
    %65 = arith.extui %64 : i32 to i64
    %66 = arith.ori %62, %65 : i64
    %c40_i64 = arith.constant 40 : i64
    %67 = arith.extui %59 : i32 to i64
    %68 = arith.addi %67, %c40_i64 : i64
    %c8_i64_23 = arith.constant 8 : i64
    %69 = arith.addi %68, %c8_i64_23 : i64
    %c0_i32_24 = arith.constant 0 : i32
    %70 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_24) : (!llvm.ptr, i32) -> i32
    %71 = arith.extui %70 : i32 to i64
    %c65536_i64_25 = arith.constant 65536 : i64
    %72 = arith.muli %71, %c65536_i64_25 : i64
    %73 = arith.cmpi ult, %69, %72 : i64
    cf.cond_br %73, ^bb13, ^bb14
  ^bb12:  // pred: ^bb9
    %c1_i32_26 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_26) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %74 = llvm.getelementptr %9[%68] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %66, %74 {alignment = 1 : i64} : i64, !llvm.ptr
    %75 = llvm.load %3 : !llvm.ptr -> i32
    %76 = llvm.load %4 : !llvm.ptr -> i64
    %77 = llvm.load %3 : !llvm.ptr -> i32
    %78 = arith.extui %77 : i32 to i64
    %79 = arith.ori %76, %78 : i64
    %c32_i64_27 = arith.constant 32 : i64
    %80 = arith.extui %75 : i32 to i64
    %81 = arith.addi %80, %c32_i64_27 : i64
    %c8_i64_28 = arith.constant 8 : i64
    %82 = arith.addi %81, %c8_i64_28 : i64
    %c0_i32_29 = arith.constant 0 : i32
    %83 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_29) : (!llvm.ptr, i32) -> i32
    %84 = arith.extui %83 : i32 to i64
    %c65536_i64_30 = arith.constant 65536 : i64
    %85 = arith.muli %84, %c65536_i64_30 : i64
    %86 = arith.cmpi ult, %82, %85 : i64
    cf.cond_br %86, ^bb15, ^bb16
  ^bb14:  // pred: ^bb11
    %c1_i32_31 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_31) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // 2 preds: ^bb13, ^bb16
    %87 = llvm.getelementptr %9[%81] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %79, %87 {alignment = 1 : i64} : i64, !llvm.ptr
    %88 = llvm.load %3 : !llvm.ptr -> i32
    %89 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %90 = arith.addi %89, %c32_i32 : i32
    %c16_i64 = arith.constant 16 : i64
    %91 = arith.extui %88 : i32 to i64
    %92 = arith.addi %91, %c16_i64 : i64
    %c4_i64_32 = arith.constant 4 : i64
    %93 = arith.addi %92, %c4_i64_32 : i64
    %c0_i32_33 = arith.constant 0 : i32
    %94 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_33) : (!llvm.ptr, i32) -> i32
    %95 = arith.extui %94 : i32 to i64
    %c65536_i64_34 = arith.constant 65536 : i64
    %96 = arith.muli %95, %c65536_i64_34 : i64
    %97 = arith.cmpi ult, %93, %96 : i64
    cf.cond_br %97, ^bb17, ^bb18
  ^bb16:  // pred: ^bb13
    %c1_i32_35 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_35) : (i32) -> ()
    cf.br ^bb15
  ^bb17:  // 2 preds: ^bb15, ^bb18
    %98 = llvm.getelementptr %9[%92] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %90, %98 {alignment = 1 : i64} : i32, !llvm.ptr
    %99 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %100 = arith.addi %99, %c8_i32 : i32
    %101 = llvm.load %2 : !llvm.ptr -> i32
    call @f148(%arg0, %100, %101) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb18:  // pred: ^bb15
    %c1_i32_36 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_36) : (i32) -> ()
    cf.br ^bb17
  }
  func.func @f146(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %4 : i64, !llvm.ptr
    %5 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %7[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %10 = llvm.load %6 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %11 = arith.subi %10, %c48_i32 : i32
    llvm.store %11, %3 : i32, !llvm.ptr
    llvm.store %11, %6 : i32, !llvm.ptr
    %12 = llvm.load %3 : !llvm.ptr -> i32
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_4 = arith.constant 0 : i64
    %14 = arith.extui %12 : i32 to i64
    %15 = arith.addi %14, %c0_i64_4 : i64
    %c4_i64 = arith.constant 4 : i64
    %16 = arith.addi %15, %c4_i64 : i64
    %c0_i32_5 = arith.constant 0 : i32
    %17 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_5) : (!llvm.ptr, i32) -> i32
    %18 = arith.extui %17 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %19 = arith.muli %18, %c65536_i64 : i64
    %20 = arith.cmpi ult, %16, %19 : i64
    cf.cond_br %20, ^bb3, ^bb4
  ^bb2:  // no predecessors
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %21 = llvm.getelementptr %9[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %13, %21 {alignment = 1 : i64} : i32, !llvm.ptr
    %22 = llvm.load %3 : !llvm.ptr -> i32
    %23 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_6 = arith.constant 4 : i64
    %24 = arith.extui %22 : i32 to i64
    %25 = arith.addi %24, %c4_i64_6 : i64
    %c4_i64_7 = arith.constant 4 : i64
    %26 = arith.addi %25, %c4_i64_7 : i64
    %c0_i32_8 = arith.constant 0 : i32
    %27 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_8) : (!llvm.ptr, i32) -> i32
    %28 = arith.extui %27 : i32 to i64
    %c65536_i64_9 = arith.constant 65536 : i64
    %29 = arith.muli %28, %c65536_i64_9 : i64
    %30 = arith.cmpi ult, %26, %29 : i64
    cf.cond_br %30, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c1_i32_10 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_10) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %31 = llvm.getelementptr %9[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %23, %31 {alignment = 1 : i64} : i32, !llvm.ptr
    %32 = llvm.load %3 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c12_i64 = arith.constant 12 : i64
    %33 = arith.extui %32 : i32 to i64
    %34 = arith.addi %33, %c12_i64 : i64
    %c4_i64_11 = arith.constant 4 : i64
    %35 = arith.addi %34, %c4_i64_11 : i64
    %c0_i32_12 = arith.constant 0 : i32
    %36 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_12) : (!llvm.ptr, i32) -> i32
    %37 = arith.extui %36 : i32 to i64
    %c65536_i64_13 = arith.constant 65536 : i64
    %38 = arith.muli %37, %c65536_i64_13 : i64
    %39 = arith.cmpi ult, %35, %38 : i64
    cf.cond_br %39, ^bb7, ^bb8
  ^bb6:  // pred: ^bb3
    %c1_i32_14 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_14) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %40 = llvm.getelementptr %9[%34] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i32, %40 {alignment = 1 : i64} : i32, !llvm.ptr
    %41 = llvm.load %3 : !llvm.ptr -> i32
    %c1051432_i32 = arith.constant 1051432 : i32
    %c8_i64 = arith.constant 8 : i64
    %42 = arith.extui %41 : i32 to i64
    %43 = arith.addi %42, %c8_i64 : i64
    %c4_i64_15 = arith.constant 4 : i64
    %44 = arith.addi %43, %c4_i64_15 : i64
    %c0_i32_16 = arith.constant 0 : i32
    %45 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_16) : (!llvm.ptr, i32) -> i32
    %46 = arith.extui %45 : i32 to i64
    %c65536_i64_17 = arith.constant 65536 : i64
    %47 = arith.muli %46, %c65536_i64_17 : i64
    %48 = arith.cmpi ult, %44, %47 : i64
    cf.cond_br %48, ^bb9, ^bb10
  ^bb8:  // pred: ^bb5
    %c1_i32_18 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_18) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %49 = llvm.getelementptr %9[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1051432_i32, %49 {alignment = 1 : i64} : i32, !llvm.ptr
    %50 = llvm.load %3 : !llvm.ptr -> i32
    %c2_i64 = arith.constant 2 : i64
    %c20_i64 = arith.constant 20 : i64
    %51 = arith.extui %50 : i32 to i64
    %52 = arith.addi %51, %c20_i64 : i64
    %c8_i64_19 = arith.constant 8 : i64
    %53 = arith.addi %52, %c8_i64_19 : i64
    %c0_i32_20 = arith.constant 0 : i32
    %54 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_20) : (!llvm.ptr, i32) -> i32
    %55 = arith.extui %54 : i32 to i64
    %c65536_i64_21 = arith.constant 65536 : i64
    %56 = arith.muli %55, %c65536_i64_21 : i64
    %57 = arith.cmpi ult, %53, %56 : i64
    cf.cond_br %57, ^bb11, ^bb12
  ^bb10:  // pred: ^bb7
    %c1_i32_22 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_22) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %58 = llvm.getelementptr %9[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i64, %58 {alignment = 1 : i64} : i64, !llvm.ptr
    %59 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %60 = arith.extui %c3_i32 : i32 to i64
    %c32_i64 = arith.constant 32 : i64
    %c63_i64 = arith.constant 63 : i64
    %61 = arith.cmpi ule, %c32_i64, %c63_i64 : i64
    %62 = scf.if %61 -> (i64) {
      %102 = arith.shli %60, %c32_i64 : i64
      scf.yield %102 : i64
    } else {
      %c0_i64_37 = arith.constant 0 : i64
      scf.yield %c0_i64_37 : i64
    }
    llvm.store %62, %4 : i64, !llvm.ptr
    %63 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %64 = arith.addi %63, %c4_i32 : i32
    %65 = arith.extui %64 : i32 to i64
    %66 = arith.ori %62, %65 : i64
    %c40_i64 = arith.constant 40 : i64
    %67 = arith.extui %59 : i32 to i64
    %68 = arith.addi %67, %c40_i64 : i64
    %c8_i64_23 = arith.constant 8 : i64
    %69 = arith.addi %68, %c8_i64_23 : i64
    %c0_i32_24 = arith.constant 0 : i32
    %70 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_24) : (!llvm.ptr, i32) -> i32
    %71 = arith.extui %70 : i32 to i64
    %c65536_i64_25 = arith.constant 65536 : i64
    %72 = arith.muli %71, %c65536_i64_25 : i64
    %73 = arith.cmpi ult, %69, %72 : i64
    cf.cond_br %73, ^bb13, ^bb14
  ^bb12:  // pred: ^bb9
    %c1_i32_26 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_26) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %74 = llvm.getelementptr %9[%68] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %66, %74 {alignment = 1 : i64} : i64, !llvm.ptr
    %75 = llvm.load %3 : !llvm.ptr -> i32
    %76 = llvm.load %4 : !llvm.ptr -> i64
    %77 = llvm.load %3 : !llvm.ptr -> i32
    %78 = arith.extui %77 : i32 to i64
    %79 = arith.ori %76, %78 : i64
    %c32_i64_27 = arith.constant 32 : i64
    %80 = arith.extui %75 : i32 to i64
    %81 = arith.addi %80, %c32_i64_27 : i64
    %c8_i64_28 = arith.constant 8 : i64
    %82 = arith.addi %81, %c8_i64_28 : i64
    %c0_i32_29 = arith.constant 0 : i32
    %83 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_29) : (!llvm.ptr, i32) -> i32
    %84 = arith.extui %83 : i32 to i64
    %c65536_i64_30 = arith.constant 65536 : i64
    %85 = arith.muli %84, %c65536_i64_30 : i64
    %86 = arith.cmpi ult, %82, %85 : i64
    cf.cond_br %86, ^bb15, ^bb16
  ^bb14:  // pred: ^bb11
    %c1_i32_31 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_31) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // 2 preds: ^bb13, ^bb16
    %87 = llvm.getelementptr %9[%81] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %79, %87 {alignment = 1 : i64} : i64, !llvm.ptr
    %88 = llvm.load %3 : !llvm.ptr -> i32
    %89 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %90 = arith.addi %89, %c32_i32 : i32
    %c16_i64 = arith.constant 16 : i64
    %91 = arith.extui %88 : i32 to i64
    %92 = arith.addi %91, %c16_i64 : i64
    %c4_i64_32 = arith.constant 4 : i64
    %93 = arith.addi %92, %c4_i64_32 : i64
    %c0_i32_33 = arith.constant 0 : i32
    %94 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_33) : (!llvm.ptr, i32) -> i32
    %95 = arith.extui %94 : i32 to i64
    %c65536_i64_34 = arith.constant 65536 : i64
    %96 = arith.muli %95, %c65536_i64_34 : i64
    %97 = arith.cmpi ult, %93, %96 : i64
    cf.cond_br %97, ^bb17, ^bb18
  ^bb16:  // pred: ^bb13
    %c1_i32_35 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_35) : (i32) -> ()
    cf.br ^bb15
  ^bb17:  // 2 preds: ^bb15, ^bb18
    %98 = llvm.getelementptr %9[%92] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %90, %98 {alignment = 1 : i64} : i32, !llvm.ptr
    %99 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %100 = arith.addi %99, %c8_i32 : i32
    %101 = llvm.load %2 : !llvm.ptr -> i32
    call @f148(%arg0, %100, %101) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb18:  // pred: ^bb15
    %c1_i32_36 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_36) : (i32) -> ()
    cf.br ^bb17
  }
  func.func @f147(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %9 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.getelementptr %arg0[12] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> i32
    %14 = llvm.getelementptr %arg0[304] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %arg0[312] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.load %15 : !llvm.ptr -> i64
    %18 = arith.trunci %17 : i64 to i32
    %19 = llvm.getelementptr %arg0[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %20 = llvm.load %19 : !llvm.ptr -> i32
    %21 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %22 = llvm.load %15 : !llvm.ptr -> i64
    %23 = arith.trunci %22 : i64 to i32
    %24 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %25 = llvm.load %15 : !llvm.ptr -> i64
    %26 = arith.trunci %25 : i64 to i32
    %27 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %28 = llvm.load %15 : !llvm.ptr -> i64
    %29 = arith.trunci %28 : i64 to i32
    %30 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %31 = llvm.load %15 : !llvm.ptr -> i64
    %32 = arith.trunci %31 : i64 to i32
    %33 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %34 = llvm.load %15 : !llvm.ptr -> i64
    %35 = arith.trunci %34 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %36 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %37 = arith.extui %36 : i32 to i64
    %38 = arith.addi %37, %c8_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %39 = arith.addi %38, %c4_i64 : i64
    %c0_i32_8 = arith.constant 0 : i32
    %40 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_8) : (!llvm.ptr, i32) -> i32
    %41 = arith.extui %40 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %42 = arith.muli %41, %c65536_i64 : i64
    %43 = arith.cmpi ult, %39, %42 : i64
    cf.cond_br %43, ^bb3, ^bb4
  ^bb2(%44: i32):  // 7 preds: ^bb59, ^bb102, ^bb128, ^bb141, ^bb142, ^bb145, ^bb169
    return %44 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %45 = llvm.getelementptr %11[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %46 = llvm.load volatile %45 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %46, %3 : i32, !llvm.ptr
    %47 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %48 = arith.extui %47 : i32 to i64
    %49 = arith.addi %48, %c0_i64 : i64
    %c4_i64_9 = arith.constant 4 : i64
    %50 = arith.addi %49, %c4_i64_9 : i64
    %c0_i32_10 = arith.constant 0 : i32
    %51 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_10) : (!llvm.ptr, i32) -> i32
    %52 = arith.extui %51 : i32 to i64
    %c65536_i64_11 = arith.constant 65536 : i64
    %53 = arith.muli %52, %c65536_i64_11 : i64
    %54 = arith.cmpi ult, %50, %53 : i64
    cf.cond_br %54, ^bb7, ^bb8
  ^bb4:  // pred: ^bb1
    %c1_i32_12 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_12) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // pred: ^bb9
    %55 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %56 = arith.extui %55 : i32 to i64
    %57 = arith.addi %56, %c20_i64 : i64
    %c4_i64_13 = arith.constant 4 : i64
    %58 = arith.addi %57, %c4_i64_13 : i64
    %c0_i32_14 = arith.constant 0 : i32
    %59 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_14) : (!llvm.ptr, i32) -> i32
    %60 = arith.extui %59 : i32 to i64
    %c65536_i64_15 = arith.constant 65536 : i64
    %61 = arith.muli %60, %c65536_i64_15 : i64
    %62 = arith.cmpi ult, %58, %61 : i64
    cf.cond_br %62, ^bb157, ^bb158
  ^bb6:  // 2 preds: ^bb7, ^bb10
    %63 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_16 = arith.constant 1 : i32
    %64 = arith.andi %63, %c1_i32_16 : i32
    %c0_i32_17 = arith.constant 0 : i32
    %65 = arith.cmpi eq, %64, %c0_i32_17 : i32
    %66 = arith.extui %65 : i1 to i32
    %c0_i32_18 = arith.constant 0 : i32
    %67 = arith.cmpi ne, %66, %c0_i32_18 : i32
    cf.cond_br %67, ^bb11, ^bb12
  ^bb7:  // 2 preds: ^bb3, ^bb8
    %68 = llvm.getelementptr %11[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %69 = llvm.load volatile %68 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %69, %4 : i32, !llvm.ptr
    %c0_i32_19 = arith.constant 0 : i32
    %70 = arith.cmpi ne, %69, %c0_i32_19 : i32
    cf.cond_br %70, ^bb6, ^bb9
  ^bb8:  // pred: ^bb3
    %c1_i32_20 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_20) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // pred: ^bb7
    %71 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_21 = arith.constant 1 : i32
    %72 = arith.andi %71, %c1_i32_21 : i32
    %c0_i32_22 = arith.constant 0 : i32
    %73 = arith.cmpi eq, %72, %c0_i32_22 : i32
    %74 = arith.extui %73 : i1 to i32
    %c0_i32_23 = arith.constant 0 : i32
    %75 = arith.cmpi ne, %74, %c0_i32_23 : i32
    cf.cond_br %75, ^bb5, ^bb10
  ^bb10:  // pred: ^bb9
    cf.br ^bb6
  ^bb11:  // 4 preds: ^bb6, ^bb13, ^bb19, ^bb36
    %76 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i32_24 = arith.constant 0 : i32
    %77 = arith.cmpi ne, %76, %c0_i32_24 : i32
    cf.cond_br %77, ^bb45, ^bb46
  ^bb12:  // pred: ^bb6
    %78 = llvm.load %1 : !llvm.ptr -> i32
    %79 = llvm.load %2 : !llvm.ptr -> i32
    %80 = arith.addi %78, %79 : i32
    llvm.store %80, %5 : i32, !llvm.ptr
    %81 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %82 = arith.extui %81 : i32 to i64
    %83 = arith.addi %82, %c12_i64 : i64
    %c4_i64_25 = arith.constant 4 : i64
    %84 = arith.addi %83, %c4_i64_25 : i64
    %c0_i32_26 = arith.constant 0 : i32
    %85 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_26) : (!llvm.ptr, i32) -> i32
    %86 = arith.extui %85 : i32 to i64
    %c65536_i64_27 = arith.constant 65536 : i64
    %87 = arith.muli %86, %c65536_i64_27 : i64
    %88 = arith.cmpi ult, %84, %87 : i64
    cf.cond_br %88, ^bb15, ^bb16
  ^bb13:  // 2 preds: ^bb17, ^bb18
    %89 = llvm.load %8 : !llvm.ptr -> i32
    %90 = llvm.load %5 : !llvm.ptr -> i32
    %91 = arith.cmpi eq, %89, %90 : i32
    %92 = arith.extui %91 : i1 to i32
    %c0_i32_28 = arith.constant 0 : i32
    %93 = arith.cmpi ne, %92, %c0_i32_28 : i32
    cf.cond_br %93, ^bb11, ^bb31
  ^bb14:  // pred: ^bb15
    %c0_i32_29 = arith.constant 0 : i32
    llvm.store %c0_i32_29, %7 : i32, !llvm.ptr
    %94 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %94, %8 : i32, !llvm.ptr
    cf.br ^bb19
  ^bb15:  // 2 preds: ^bb12, ^bb16
    %95 = llvm.getelementptr %11[%83] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %96 = llvm.load volatile %95 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %96, %6 : i32, !llvm.ptr
    %c0_i32_30 = arith.constant 0 : i32
    %97 = arith.cmpi ne, %96, %c0_i32_30 : i32
    cf.cond_br %97, ^bb14, ^bb17
  ^bb16:  // pred: ^bb12
    %c1_i32_31 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_31) : (i32) -> ()
    cf.br ^bb15
  ^bb17:  // pred: ^bb15
    %c0_i32_32 = arith.constant 0 : i32
    llvm.store %c0_i32_32, %7 : i32, !llvm.ptr
    %98 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %98, %8 : i32, !llvm.ptr
    cf.br ^bb13
  ^bb18:  // pred: ^bb30
    cf.br ^bb13
  ^bb19:  // 2 preds: ^bb14, ^bb21
    %99 = llvm.load %8 : !llvm.ptr -> i32
    llvm.store %99, %3 : i32, !llvm.ptr
    %100 = llvm.load %5 : !llvm.ptr -> i32
    %101 = arith.cmpi eq, %99, %100 : i32
    %102 = arith.extui %101 : i1 to i32
    %c0_i32_33 = arith.constant 0 : i32
    %103 = arith.cmpi ne, %102, %c0_i32_33 : i32
    cf.cond_br %103, ^bb11, ^bb20
  ^bb20:  // pred: ^bb19
    %104 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_34 = arith.constant 0 : i64
    %105 = arith.extui %104 : i32 to i64
    %106 = arith.addi %105, %c0_i64_34 : i64
    %c1_i64 = arith.constant 1 : i64
    %107 = arith.addi %106, %c1_i64 : i64
    %c0_i32_35 = arith.constant 0 : i32
    %108 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_35) : (!llvm.ptr, i32) -> i32
    %109 = arith.extui %108 : i32 to i64
    %c65536_i64_36 = arith.constant 65536 : i64
    %110 = arith.muli %109, %c65536_i64_36 : i64
    %111 = arith.cmpi ult, %107, %110 : i64
    cf.cond_br %111, ^bb23, ^bb24
  ^bb21:  // 4 preds: ^bb25, ^bb27, ^bb28, ^bb29
    %112 = llvm.load %8 : !llvm.ptr -> i32
    %113 = llvm.load %3 : !llvm.ptr -> i32
    %114 = arith.subi %112, %113 : i32
    %115 = llvm.load %7 : !llvm.ptr -> i32
    %116 = arith.addi %114, %115 : i32
    llvm.store %116, %7 : i32, !llvm.ptr
    %117 = llvm.load %6 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %118 = arith.addi %117, %c-1_i32 : i32
    llvm.store %118, %6 : i32, !llvm.ptr
    %c0_i32_37 = arith.constant 0 : i32
    %119 = arith.cmpi ne, %118, %c0_i32_37 : i32
    cf.cond_br %119, ^bb19, ^bb30
  ^bb22:  // pred: ^bb23
    %120 = llvm.load %8 : !llvm.ptr -> i32
    %c-32_i32 = arith.constant -32 : i32
    %121 = arith.cmpi uge, %120, %c-32_i32 : i32
    %122 = arith.extui %121 : i1 to i32
    %c0_i32_38 = arith.constant 0 : i32
    %123 = arith.cmpi ne, %122, %c0_i32_38 : i32
    cf.cond_br %123, ^bb26, ^bb27
  ^bb23:  // 2 preds: ^bb20, ^bb24
    %124 = llvm.getelementptr %11[%106] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %125 = llvm.load volatile %124 {alignment = 1 : i64} : !llvm.ptr -> i8
    %126 = arith.extsi %125 : i8 to i32
    llvm.store %126, %8 : i32, !llvm.ptr
    %c-1_i32_39 = arith.constant -1 : i32
    %127 = arith.cmpi sle, %126, %c-1_i32_39 : i32
    %128 = arith.extui %127 : i1 to i32
    %c0_i32_40 = arith.constant 0 : i32
    %129 = arith.cmpi ne, %128, %c0_i32_40 : i32
    cf.cond_br %129, ^bb22, ^bb25
  ^bb24:  // pred: ^bb20
    %c1_i32_41 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_41) : (i32) -> ()
    cf.br ^bb23
  ^bb25:  // pred: ^bb23
    %130 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_42 = arith.constant 1 : i32
    %131 = arith.addi %130, %c1_i32_42 : i32
    llvm.store %131, %8 : i32, !llvm.ptr
    cf.br ^bb21
  ^bb26:  // pred: ^bb22
    %132 = llvm.load %8 : !llvm.ptr -> i32
    %c-16_i32 = arith.constant -16 : i32
    %133 = arith.cmpi uge, %132, %c-16_i32 : i32
    %134 = arith.extui %133 : i1 to i32
    %c0_i32_43 = arith.constant 0 : i32
    %135 = arith.cmpi ne, %134, %c0_i32_43 : i32
    cf.cond_br %135, ^bb28, ^bb29
  ^bb27:  // pred: ^bb22
    %136 = llvm.load %3 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %137 = arith.addi %136, %c2_i32 : i32
    llvm.store %137, %8 : i32, !llvm.ptr
    cf.br ^bb21
  ^bb28:  // pred: ^bb26
    %138 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %139 = arith.addi %138, %c4_i32 : i32
    llvm.store %139, %8 : i32, !llvm.ptr
    cf.br ^bb21
  ^bb29:  // pred: ^bb26
    %140 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %141 = arith.addi %140, %c3_i32 : i32
    llvm.store %141, %8 : i32, !llvm.ptr
    cf.br ^bb21
  ^bb30:  // pred: ^bb21
    cf.br ^bb18
  ^bb31:  // pred: ^bb13
    %142 = llvm.load %8 : !llvm.ptr -> i32
    %c0_i64_44 = arith.constant 0 : i64
    %143 = arith.extui %142 : i32 to i64
    %144 = arith.addi %143, %c0_i64_44 : i64
    %c1_i64_45 = arith.constant 1 : i64
    %145 = arith.addi %144, %c1_i64_45 : i64
    %c0_i32_46 = arith.constant 0 : i32
    %146 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_46) : (!llvm.ptr, i32) -> i32
    %147 = arith.extui %146 : i32 to i64
    %c65536_i64_47 = arith.constant 65536 : i64
    %148 = arith.muli %147, %c65536_i64_47 : i64
    %149 = arith.cmpi ult, %145, %148 : i64
    cf.cond_br %149, ^bb33, ^bb34
  ^bb32:  // 2 preds: ^bb33, ^bb35
    %150 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i32_48 = arith.constant 0 : i32
    %151 = arith.cmpi eq, %150, %c0_i32_48 : i32
    %152 = arith.extui %151 : i1 to i32
    %c0_i32_49 = arith.constant 0 : i32
    %153 = arith.cmpi ne, %152, %c0_i32_49 : i32
    cf.cond_br %153, ^bb37, ^bb38
  ^bb33:  // 2 preds: ^bb31, ^bb34
    %154 = llvm.getelementptr %11[%144] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %155 = llvm.load volatile %154 {alignment = 1 : i64} : !llvm.ptr -> i8
    %156 = arith.extsi %155 : i8 to i32
    llvm.store %156, %3 : i32, !llvm.ptr
    %c-1_i32_50 = arith.constant -1 : i32
    %157 = arith.cmpi sgt, %156, %c-1_i32_50 : i32
    %158 = arith.extui %157 : i1 to i32
    %c0_i32_51 = arith.constant 0 : i32
    %159 = arith.cmpi ne, %158, %c0_i32_51 : i32
    cf.cond_br %159, ^bb32, ^bb35
  ^bb34:  // pred: ^bb31
    %c1_i32_52 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_52) : (i32) -> ()
    cf.br ^bb33
  ^bb35:  // pred: ^bb33
    %160 = llvm.load %3 : !llvm.ptr -> i32
    %c-32_i32_53 = arith.constant -32 : i32
    %161 = arith.cmpi ult, %160, %c-32_i32_53 : i32
    %162 = arith.extui %161 : i1 to i32
    cf.br ^bb32
  ^bb36:  // 3 preds: ^bb37, ^bb43, ^bb44
    %163 = llvm.load %7 : !llvm.ptr -> i32
    %164 = llvm.load %2 : !llvm.ptr -> i32
    %165 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_54 = arith.constant 0 : i32
    %166 = arith.cmpi ne, %165, %c0_i32_54 : i32
    %167 = arith.select %166, %163, %164 : i32
    llvm.store %167, %2 : i32, !llvm.ptr
    %168 = llvm.load %3 : !llvm.ptr -> i32
    %169 = llvm.load %1 : !llvm.ptr -> i32
    %170 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_55 = arith.constant 0 : i32
    %171 = arith.cmpi ne, %170, %c0_i32_55 : i32
    %172 = arith.select %171, %168, %169 : i32
    llvm.store %172, %1 : i32, !llvm.ptr
    cf.br ^bb11
  ^bb37:  // 3 preds: ^bb32, ^bb39, ^bb41
    %173 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %173, %3 : i32, !llvm.ptr
    cf.br ^bb36
  ^bb38:  // pred: ^bb32
    %174 = llvm.load %7 : !llvm.ptr -> i32
    %175 = llvm.load %2 : !llvm.ptr -> i32
    %176 = arith.cmpi uge, %174, %175 : i32
    %177 = arith.extui %176 : i1 to i32
    %c0_i32_56 = arith.constant 0 : i32
    %178 = arith.cmpi ne, %177, %c0_i32_56 : i32
    cf.cond_br %178, ^bb39, ^bb40
  ^bb39:  // pred: ^bb38
    %179 = llvm.load %7 : !llvm.ptr -> i32
    %180 = llvm.load %2 : !llvm.ptr -> i32
    %181 = arith.cmpi eq, %179, %180 : i32
    %182 = arith.extui %181 : i1 to i32
    %c0_i32_57 = arith.constant 0 : i32
    %183 = arith.cmpi ne, %182, %c0_i32_57 : i32
    cf.cond_br %183, ^bb37, ^bb44
  ^bb40:  // pred: ^bb38
    %184 = llvm.load %1 : !llvm.ptr -> i32
    %185 = llvm.load %7 : !llvm.ptr -> i32
    %186 = arith.addi %184, %185 : i32
    %c0_i64_58 = arith.constant 0 : i64
    %187 = arith.extui %186 : i32 to i64
    %188 = arith.addi %187, %c0_i64_58 : i64
    %c1_i64_59 = arith.constant 1 : i64
    %189 = arith.addi %188, %c1_i64_59 : i64
    %c0_i32_60 = arith.constant 0 : i32
    %190 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_60) : (!llvm.ptr, i32) -> i32
    %191 = arith.extui %190 : i32 to i64
    %c65536_i64_61 = arith.constant 65536 : i64
    %192 = arith.muli %191, %c65536_i64_61 : i64
    %193 = arith.cmpi ult, %189, %192 : i64
    cf.cond_br %193, ^bb41, ^bb42
  ^bb41:  // 2 preds: ^bb40, ^bb42
    %194 = llvm.getelementptr %11[%188] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %195 = llvm.load volatile %194 {alignment = 1 : i64} : !llvm.ptr -> i8
    %196 = arith.extsi %195 : i8 to i32
    %c-65_i32 = arith.constant -65 : i32
    %197 = arith.cmpi sgt, %196, %c-65_i32 : i32
    %198 = arith.extui %197 : i1 to i32
    %c0_i32_62 = arith.constant 0 : i32
    %199 = arith.cmpi ne, %198, %c0_i32_62 : i32
    cf.cond_br %199, ^bb37, ^bb43
  ^bb42:  // pred: ^bb40
    %c1_i32_63 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_63) : (i32) -> ()
    cf.br ^bb41
  ^bb43:  // pred: ^bb41
    %c0_i32_64 = arith.constant 0 : i32
    llvm.store %c0_i32_64, %3 : i32, !llvm.ptr
    cf.br ^bb36
  ^bb44:  // pred: ^bb39
    %c0_i32_65 = arith.constant 0 : i32
    llvm.store %c0_i32_65, %3 : i32, !llvm.ptr
    cf.br ^bb36
  ^bb45:  // pred: ^bb11
    %200 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_66 = arith.constant 4 : i64
    %201 = arith.extui %200 : i32 to i64
    %202 = arith.addi %201, %c4_i64_66 : i64
    %c4_i64_67 = arith.constant 4 : i64
    %203 = arith.addi %202, %c4_i64_67 : i64
    %c0_i32_68 = arith.constant 0 : i32
    %204 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_68) : (!llvm.ptr, i32) -> i32
    %205 = arith.extui %204 : i32 to i64
    %c65536_i64_69 = arith.constant 65536 : i64
    %206 = arith.muli %205, %c65536_i64_69 : i64
    %207 = arith.cmpi ult, %203, %206 : i64
    cf.cond_br %207, ^bb61, ^bb62
  ^bb46:  // pred: ^bb11
    %208 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64_70 = arith.constant 20 : i64
    %209 = arith.extui %208 : i32 to i64
    %210 = arith.addi %209, %c20_i64_70 : i64
    %c4_i64_71 = arith.constant 4 : i64
    %211 = arith.addi %210, %c4_i64_71 : i64
    %c0_i32_72 = arith.constant 0 : i32
    %212 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_72) : (!llvm.ptr, i32) -> i32
    %213 = arith.extui %212 : i32 to i64
    %c65536_i64_73 = arith.constant 65536 : i64
    %214 = arith.muli %213, %c65536_i64_73 : i64
    %215 = arith.cmpi ult, %211, %214 : i64
    cf.cond_br %215, ^bb47, ^bb48
  ^bb47:  // 2 preds: ^bb46, ^bb48
    %216 = llvm.getelementptr %11[%210] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %217 = llvm.load volatile %216 {alignment = 1 : i64} : !llvm.ptr -> i32
    %218 = llvm.load %1 : !llvm.ptr -> i32
    %219 = llvm.load %2 : !llvm.ptr -> i32
    %220 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %221 = arith.extui %220 : i32 to i64
    %222 = arith.addi %221, %c24_i64 : i64
    %c4_i64_74 = arith.constant 4 : i64
    %223 = arith.addi %222, %c4_i64_74 : i64
    %c0_i32_75 = arith.constant 0 : i32
    %224 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_75) : (!llvm.ptr, i32) -> i32
    %225 = arith.extui %224 : i32 to i64
    %c65536_i64_76 = arith.constant 65536 : i64
    %226 = arith.muli %225, %c65536_i64_76 : i64
    %227 = arith.cmpi ult, %223, %226 : i64
    cf.cond_br %227, ^bb49, ^bb50
  ^bb48:  // pred: ^bb46
    %c1_i32_77 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_77) : (i32) -> ()
    cf.br ^bb47
  ^bb49:  // 2 preds: ^bb47, ^bb50
    %228 = llvm.getelementptr %11[%222] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %229 = llvm.load volatile %228 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_78 = arith.constant 12 : i64
    %230 = arith.extui %229 : i32 to i64
    %231 = arith.addi %230, %c12_i64_78 : i64
    %c4_i64_79 = arith.constant 4 : i64
    %232 = arith.addi %231, %c4_i64_79 : i64
    %c0_i32_80 = arith.constant 0 : i32
    %233 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_80) : (!llvm.ptr, i32) -> i32
    %234 = arith.extui %233 : i32 to i64
    %c65536_i64_81 = arith.constant 65536 : i64
    %235 = arith.muli %234, %c65536_i64_81 : i64
    %236 = arith.cmpi ult, %232, %235 : i64
    cf.cond_br %236, ^bb51, ^bb52
  ^bb50:  // pred: ^bb47
    %c1_i32_82 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_82) : (i32) -> ()
    cf.br ^bb49
  ^bb51:  // 2 preds: ^bb49, ^bb52
    %237 = llvm.getelementptr %11[%231] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %238 = llvm.load volatile %237 {alignment = 1 : i64} : !llvm.ptr -> i32
    %239 = arith.cmpi ult, %238, %18 : i32
    cf.cond_br %239, ^bb53, ^bb54
  ^bb52:  // pred: ^bb49
    %c1_i32_83 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_83) : (i32) -> ()
    cf.br ^bb51
  ^bb53:  // 2 preds: ^bb51, ^bb54
    %240 = llvm.getelementptr inbounds %16[%238] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %241 = llvm.load %240 : !llvm.ptr -> !llvm.ptr
    %242 = llvm.ptrtoint %241 : !llvm.ptr to i64
    %c0_i64_84 = arith.constant 0 : i64
    %243 = arith.cmpi eq, %242, %c0_i64_84 : i64
    cf.cond_br %243, ^bb56, ^bb55
  ^bb54:  // pred: ^bb51
    %c3_i32_85 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_85) : (i32) -> ()
    cf.br ^bb53
  ^bb55:  // 2 preds: ^bb53, ^bb56
    %244 = llvm.getelementptr %241[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %245 = llvm.getelementptr %241[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %246 = llvm.getelementptr %241[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %247 = llvm.load %244 : !llvm.ptr -> !llvm.ptr
    %248 = llvm.load %246 : !llvm.ptr -> !llvm.ptr
    %249 = llvm.ptrtoint %247 : !llvm.ptr to i64
    %c0_i64_86 = arith.constant 0 : i64
    %250 = arith.cmpi eq, %249, %c0_i64_86 : i64
    cf.cond_br %250, ^bb58, ^bb57
  ^bb56:  // pred: ^bb53
    %c4_i32_87 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_87) : (i32) -> ()
    cf.br ^bb55
  ^bb57:  // 2 preds: ^bb55, ^bb58
    %251 = llvm.load %245 : !llvm.ptr -> i32
    %252 = arith.cmpi ne, %13, %251 : i32
    cf.cond_br %252, ^bb60, ^bb59
  ^bb58:  // pred: ^bb55
    %c3_i32_88 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_88) : (i32) -> ()
    cf.br ^bb57
  ^bb59:  // 2 preds: ^bb57, ^bb60
    %253 = llvm.call %247(%248, %217, %218, %219) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%253 : i32)
  ^bb60:  // pred: ^bb57
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb59
  ^bb61:  // 2 preds: ^bb45, ^bb62
    %254 = llvm.getelementptr %11[%202] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %255 = llvm.load volatile %254 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %255, %4 : i32, !llvm.ptr
    %256 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %257 = arith.cmpi ult, %256, %c16_i32 : i32
    %258 = arith.extui %257 : i1 to i32
    %c0_i32_89 = arith.constant 0 : i32
    %259 = arith.cmpi ne, %258, %c0_i32_89 : i32
    cf.cond_br %259, ^bb64, ^bb65
  ^bb62:  // pred: ^bb45
    %c1_i32_90 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_90) : (i32) -> ()
    cf.br ^bb61
  ^bb63:  // 4 preds: ^bb65, ^bb67, ^bb68, ^bb83
    %260 = llvm.load %4 : !llvm.ptr -> i32
    %261 = llvm.load %3 : !llvm.ptr -> i32
    %262 = arith.cmpi ule, %260, %261 : i32
    %263 = arith.extui %262 : i1 to i32
    %c0_i32_91 = arith.constant 0 : i32
    %264 = arith.cmpi ne, %263, %c0_i32_91 : i32
    cf.cond_br %264, ^bb89, ^bb90
  ^bb64:  // pred: ^bb61
    %265 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_92 = arith.constant 0 : i32
    %266 = arith.cmpi ne, %265, %c0_i32_92 : i32
    cf.cond_br %266, ^bb66, ^bb67
  ^bb65:  // pred: ^bb61
    %267 = llvm.load %1 : !llvm.ptr -> i32
    %268 = llvm.load %2 : !llvm.ptr -> i32
    %269 = call @f154(%arg0, %267, %268) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %269, %3 : i32, !llvm.ptr
    cf.br ^bb63
  ^bb66:  // pred: ^bb64
    %270 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i32_93 = arith.constant 3 : i32
    %271 = arith.andi %270, %c3_i32_93 : i32
    llvm.store %271, %6 : i32, !llvm.ptr
    %272 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i32_94 = arith.constant 4 : i32
    %273 = arith.cmpi uge, %272, %c4_i32_94 : i32
    %274 = arith.extui %273 : i1 to i32
    %c0_i32_95 = arith.constant 0 : i32
    %275 = arith.cmpi ne, %274, %c0_i32_95 : i32
    cf.cond_br %275, ^bb69, ^bb70
  ^bb67:  // pred: ^bb64
    %c0_i32_96 = arith.constant 0 : i32
    llvm.store %c0_i32_96, %3 : i32, !llvm.ptr
    cf.br ^bb63
  ^bb68:  // 2 preds: ^bb70, ^bb71
    %276 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i32_97 = arith.constant 0 : i32
    %277 = arith.cmpi eq, %276, %c0_i32_97 : i32
    %278 = arith.extui %277 : i1 to i32
    %c0_i32_98 = arith.constant 0 : i32
    %279 = arith.cmpi ne, %278, %c0_i32_98 : i32
    cf.cond_br %279, ^bb63, ^bb82
  ^bb69:  // pred: ^bb66
    %280 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %281 = arith.andi %280, %c12_i32 : i32
    llvm.store %281, %5 : i32, !llvm.ptr
    %c0_i32_99 = arith.constant 0 : i32
    llvm.store %c0_i32_99, %3 : i32, !llvm.ptr
    %c0_i32_100 = arith.constant 0 : i32
    llvm.store %c0_i32_100, %7 : i32, !llvm.ptr
    cf.br ^bb72
  ^bb70:  // pred: ^bb66
    %c0_i32_101 = arith.constant 0 : i32
    llvm.store %c0_i32_101, %3 : i32, !llvm.ptr
    %c0_i32_102 = arith.constant 0 : i32
    llvm.store %c0_i32_102, %7 : i32, !llvm.ptr
    cf.br ^bb68
  ^bb71:  // pred: ^bb81
    cf.br ^bb68
  ^bb72:  // 2 preds: ^bb69, ^bb79
    %282 = llvm.load %3 : !llvm.ptr -> i32
    %283 = llvm.load %1 : !llvm.ptr -> i32
    %284 = llvm.load %7 : !llvm.ptr -> i32
    %285 = arith.addi %283, %284 : i32
    llvm.store %285, %8 : i32, !llvm.ptr
    %c0_i64_103 = arith.constant 0 : i64
    %286 = arith.extui %285 : i32 to i64
    %287 = arith.addi %286, %c0_i64_103 : i64
    %c1_i64_104 = arith.constant 1 : i64
    %288 = arith.addi %287, %c1_i64_104 : i64
    %c0_i32_105 = arith.constant 0 : i32
    %289 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_105) : (!llvm.ptr, i32) -> i32
    %290 = arith.extui %289 : i32 to i64
    %c65536_i64_106 = arith.constant 65536 : i64
    %291 = arith.muli %290, %c65536_i64_106 : i64
    %292 = arith.cmpi ult, %288, %291 : i64
    cf.cond_br %292, ^bb73, ^bb74
  ^bb73:  // 2 preds: ^bb72, ^bb74
    %293 = llvm.getelementptr %11[%287] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %294 = llvm.load volatile %293 {alignment = 1 : i64} : !llvm.ptr -> i8
    %295 = arith.extsi %294 : i8 to i32
    %c-65_i32_107 = arith.constant -65 : i32
    %296 = arith.cmpi sgt, %295, %c-65_i32_107 : i32
    %297 = arith.extui %296 : i1 to i32
    %298 = arith.addi %282, %297 : i32
    %299 = llvm.load %8 : !llvm.ptr -> i32
    %c1_i32_108 = arith.constant 1 : i32
    %300 = arith.addi %299, %c1_i32_108 : i32
    %c0_i64_109 = arith.constant 0 : i64
    %301 = arith.extui %300 : i32 to i64
    %302 = arith.addi %301, %c0_i64_109 : i64
    %c1_i64_110 = arith.constant 1 : i64
    %303 = arith.addi %302, %c1_i64_110 : i64
    %c0_i32_111 = arith.constant 0 : i32
    %304 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_111) : (!llvm.ptr, i32) -> i32
    %305 = arith.extui %304 : i32 to i64
    %c65536_i64_112 = arith.constant 65536 : i64
    %306 = arith.muli %305, %c65536_i64_112 : i64
    %307 = arith.cmpi ult, %303, %306 : i64
    cf.cond_br %307, ^bb75, ^bb76
  ^bb74:  // pred: ^bb72
    %c1_i32_113 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_113) : (i32) -> ()
    cf.br ^bb73
  ^bb75:  // 2 preds: ^bb73, ^bb76
    %308 = llvm.getelementptr %11[%302] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %309 = llvm.load volatile %308 {alignment = 1 : i64} : !llvm.ptr -> i8
    %310 = arith.extsi %309 : i8 to i32
    %c-65_i32_114 = arith.constant -65 : i32
    %311 = arith.cmpi sgt, %310, %c-65_i32_114 : i32
    %312 = arith.extui %311 : i1 to i32
    %313 = arith.addi %298, %312 : i32
    %314 = llvm.load %8 : !llvm.ptr -> i32
    %c2_i32_115 = arith.constant 2 : i32
    %315 = arith.addi %314, %c2_i32_115 : i32
    %c0_i64_116 = arith.constant 0 : i64
    %316 = arith.extui %315 : i32 to i64
    %317 = arith.addi %316, %c0_i64_116 : i64
    %c1_i64_117 = arith.constant 1 : i64
    %318 = arith.addi %317, %c1_i64_117 : i64
    %c0_i32_118 = arith.constant 0 : i32
    %319 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_118) : (!llvm.ptr, i32) -> i32
    %320 = arith.extui %319 : i32 to i64
    %c65536_i64_119 = arith.constant 65536 : i64
    %321 = arith.muli %320, %c65536_i64_119 : i64
    %322 = arith.cmpi ult, %318, %321 : i64
    cf.cond_br %322, ^bb77, ^bb78
  ^bb76:  // pred: ^bb73
    %c1_i32_120 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_120) : (i32) -> ()
    cf.br ^bb75
  ^bb77:  // 2 preds: ^bb75, ^bb78
    %323 = llvm.getelementptr %11[%317] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %324 = llvm.load volatile %323 {alignment = 1 : i64} : !llvm.ptr -> i8
    %325 = arith.extsi %324 : i8 to i32
    %c-65_i32_121 = arith.constant -65 : i32
    %326 = arith.cmpi sgt, %325, %c-65_i32_121 : i32
    %327 = arith.extui %326 : i1 to i32
    %328 = arith.addi %313, %327 : i32
    %329 = llvm.load %8 : !llvm.ptr -> i32
    %c3_i32_122 = arith.constant 3 : i32
    %330 = arith.addi %329, %c3_i32_122 : i32
    %c0_i64_123 = arith.constant 0 : i64
    %331 = arith.extui %330 : i32 to i64
    %332 = arith.addi %331, %c0_i64_123 : i64
    %c1_i64_124 = arith.constant 1 : i64
    %333 = arith.addi %332, %c1_i64_124 : i64
    %c0_i32_125 = arith.constant 0 : i32
    %334 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_125) : (!llvm.ptr, i32) -> i32
    %335 = arith.extui %334 : i32 to i64
    %c65536_i64_126 = arith.constant 65536 : i64
    %336 = arith.muli %335, %c65536_i64_126 : i64
    %337 = arith.cmpi ult, %333, %336 : i64
    cf.cond_br %337, ^bb79, ^bb80
  ^bb78:  // pred: ^bb75
    %c1_i32_127 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_127) : (i32) -> ()
    cf.br ^bb77
  ^bb79:  // 2 preds: ^bb77, ^bb80
    %338 = llvm.getelementptr %11[%332] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %339 = llvm.load volatile %338 {alignment = 1 : i64} : !llvm.ptr -> i8
    %340 = arith.extsi %339 : i8 to i32
    %c-65_i32_128 = arith.constant -65 : i32
    %341 = arith.cmpi sgt, %340, %c-65_i32_128 : i32
    %342 = arith.extui %341 : i1 to i32
    %343 = arith.addi %328, %342 : i32
    llvm.store %343, %3 : i32, !llvm.ptr
    %344 = llvm.load %5 : !llvm.ptr -> i32
    %345 = llvm.load %7 : !llvm.ptr -> i32
    %c4_i32_129 = arith.constant 4 : i32
    %346 = arith.addi %345, %c4_i32_129 : i32
    llvm.store %346, %7 : i32, !llvm.ptr
    %347 = arith.cmpi eq, %344, %346 : i32
    %348 = arith.extui %347 : i1 to i32
    %c0_i32_130 = arith.constant 0 : i32
    %349 = arith.cmpi eq, %348, %c0_i32_130 : i32
    %350 = arith.extui %349 : i1 to i32
    %c0_i32_131 = arith.constant 0 : i32
    %351 = arith.cmpi ne, %350, %c0_i32_131 : i32
    cf.cond_br %351, ^bb72, ^bb81
  ^bb80:  // pred: ^bb77
    %c1_i32_132 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_132) : (i32) -> ()
    cf.br ^bb79
  ^bb81:  // pred: ^bb79
    cf.br ^bb71
  ^bb82:  // pred: ^bb68
    %352 = llvm.load %1 : !llvm.ptr -> i32
    %353 = llvm.load %7 : !llvm.ptr -> i32
    %354 = arith.addi %352, %353 : i32
    llvm.store %354, %8 : i32, !llvm.ptr
    cf.br ^bb84
  ^bb83:  // pred: ^bb87
    cf.br ^bb63
  ^bb84:  // 2 preds: ^bb82, ^bb85
    %355 = llvm.load %3 : !llvm.ptr -> i32
    %356 = llvm.load %8 : !llvm.ptr -> i32
    %c0_i64_133 = arith.constant 0 : i64
    %357 = arith.extui %356 : i32 to i64
    %358 = arith.addi %357, %c0_i64_133 : i64
    %c1_i64_134 = arith.constant 1 : i64
    %359 = arith.addi %358, %c1_i64_134 : i64
    %c0_i32_135 = arith.constant 0 : i32
    %360 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_135) : (!llvm.ptr, i32) -> i32
    %361 = arith.extui %360 : i32 to i64
    %c65536_i64_136 = arith.constant 65536 : i64
    %362 = arith.muli %361, %c65536_i64_136 : i64
    %363 = arith.cmpi ult, %359, %362 : i64
    cf.cond_br %363, ^bb85, ^bb86
  ^bb85:  // 2 preds: ^bb84, ^bb86
    %364 = llvm.getelementptr %11[%358] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %365 = llvm.load volatile %364 {alignment = 1 : i64} : !llvm.ptr -> i8
    %366 = arith.extsi %365 : i8 to i32
    %c-65_i32_137 = arith.constant -65 : i32
    %367 = arith.cmpi sgt, %366, %c-65_i32_137 : i32
    %368 = arith.extui %367 : i1 to i32
    %369 = arith.addi %355, %368 : i32
    llvm.store %369, %3 : i32, !llvm.ptr
    %370 = llvm.load %8 : !llvm.ptr -> i32
    %c1_i32_138 = arith.constant 1 : i32
    %371 = arith.addi %370, %c1_i32_138 : i32
    llvm.store %371, %8 : i32, !llvm.ptr
    %372 = llvm.load %6 : !llvm.ptr -> i32
    %c-1_i32_139 = arith.constant -1 : i32
    %373 = arith.addi %372, %c-1_i32_139 : i32
    llvm.store %373, %6 : i32, !llvm.ptr
    %c0_i32_140 = arith.constant 0 : i32
    %374 = arith.cmpi ne, %373, %c0_i32_140 : i32
    cf.cond_br %374, ^bb84, ^bb87
  ^bb86:  // pred: ^bb84
    %c1_i32_141 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_141) : (i32) -> ()
    cf.br ^bb85
  ^bb87:  // pred: ^bb85
    cf.br ^bb83
  ^bb88:  // pred: ^bb103
    %375 = llvm.load %7 : !llvm.ptr -> i32
    %376 = llvm.load %1 : !llvm.ptr -> i32
    %377 = llvm.load %2 : !llvm.ptr -> i32
    %378 = llvm.load %8 : !llvm.ptr -> i32
    %c12_i64_142 = arith.constant 12 : i64
    %379 = arith.extui %378 : i32 to i64
    %380 = arith.addi %379, %c12_i64_142 : i64
    %c4_i64_143 = arith.constant 4 : i64
    %381 = arith.addi %380, %c4_i64_143 : i64
    %c0_i32_144 = arith.constant 0 : i32
    %382 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_144) : (!llvm.ptr, i32) -> i32
    %383 = arith.extui %382 : i32 to i64
    %c65536_i64_145 = arith.constant 65536 : i64
    %384 = arith.muli %383, %c65536_i64_145 : i64
    %385 = arith.cmpi ult, %381, %384 : i64
    cf.cond_br %385, ^bb131, ^bb132
  ^bb89:  // pred: ^bb63
    %386 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64_146 = arith.constant 20 : i64
    %387 = arith.extui %386 : i32 to i64
    %388 = arith.addi %387, %c20_i64_146 : i64
    %c4_i64_147 = arith.constant 4 : i64
    %389 = arith.addi %388, %c4_i64_147 : i64
    %c0_i32_148 = arith.constant 0 : i32
    %390 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_148) : (!llvm.ptr, i32) -> i32
    %391 = arith.extui %390 : i32 to i64
    %c65536_i64_149 = arith.constant 65536 : i64
    %392 = arith.muli %391, %c65536_i64_149 : i64
    %393 = arith.cmpi ult, %389, %392 : i64
    cf.cond_br %393, ^bb116, ^bb117
  ^bb90:  // pred: ^bb63
    %394 = llvm.load %4 : !llvm.ptr -> i32
    %395 = llvm.load %3 : !llvm.ptr -> i32
    %396 = arith.subi %394, %395 : i32
    llvm.store %396, %5 : i32, !llvm.ptr
    %c0_i32_150 = arith.constant 0 : i32
    llvm.store %c0_i32_150, %3 : i32, !llvm.ptr
    %397 = llvm.load %0 : !llvm.ptr -> i32
    %c32_i64 = arith.constant 32 : i64
    %398 = arith.extui %397 : i32 to i64
    %399 = arith.addi %398, %c32_i64 : i64
    %c1_i64_151 = arith.constant 1 : i64
    %400 = arith.addi %399, %c1_i64_151 : i64
    %c0_i32_152 = arith.constant 0 : i32
    %401 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_152) : (!llvm.ptr, i32) -> i32
    %402 = arith.extui %401 : i32 to i64
    %c65536_i64_153 = arith.constant 65536 : i64
    %403 = arith.muli %402, %c65536_i64_153 : i64
    %404 = arith.cmpi ult, %400, %403 : i64
    cf.cond_br %404, ^bb94, ^bb95
  ^bb91:  // 5 preds: ^bb92, ^bb93, ^bb94, ^bb94, ^bb94
    %405 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_154 = arith.constant 1 : i32
    %406 = arith.addi %405, %c1_i32_154 : i32
    llvm.store %406, %3 : i32, !llvm.ptr
    %407 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %408 = arith.extui %407 : i32 to i64
    %409 = arith.addi %408, %c16_i64 : i64
    %c4_i64_155 = arith.constant 4 : i64
    %410 = arith.addi %409, %c4_i64_155 : i64
    %c0_i32_156 = arith.constant 0 : i32
    %411 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_156) : (!llvm.ptr, i32) -> i32
    %412 = arith.extui %411 : i32 to i64
    %c65536_i64_157 = arith.constant 65536 : i64
    %413 = arith.muli %412, %c65536_i64_157 : i64
    %414 = arith.cmpi ult, %410, %413 : i64
    cf.cond_br %414, ^bb96, ^bb97
  ^bb92:  // pred: ^bb94
    %415 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i32_158 = arith.constant 1 : i32
    %c31_i32 = arith.constant 31 : i32
    %416 = arith.cmpi ule, %c1_i32_158, %c31_i32 : i32
    %417 = scf.if %416 -> (i32) {
      %627 = arith.shrui %415, %c1_i32_158 : i32
      scf.yield %627 : i32
    } else {
      %c0_i32_254 = arith.constant 0 : i32
      scf.yield %c0_i32_254 : i32
    }
    llvm.store %417, %3 : i32, !llvm.ptr
    %418 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i32_159 = arith.constant 1 : i32
    %419 = arith.addi %418, %c1_i32_159 : i32
    %c1_i32_160 = arith.constant 1 : i32
    %c31_i32_161 = arith.constant 31 : i32
    %420 = arith.cmpi ule, %c1_i32_160, %c31_i32_161 : i32
    %421 = scf.if %420 -> (i32) {
      %627 = arith.shrui %419, %c1_i32_160 : i32
      scf.yield %627 : i32
    } else {
      %c0_i32_254 = arith.constant 0 : i32
      scf.yield %c0_i32_254 : i32
    }
    llvm.store %421, %5 : i32, !llvm.ptr
    cf.br ^bb91
  ^bb93:  // pred: ^bb94
    %422 = llvm.load %5 : !llvm.ptr -> i32
    llvm.store %422, %3 : i32, !llvm.ptr
    %c0_i32_162 = arith.constant 0 : i32
    llvm.store %c0_i32_162, %5 : i32, !llvm.ptr
    cf.br ^bb91
  ^bb94:  // 2 preds: ^bb90, ^bb95
    %423 = llvm.getelementptr %11[%399] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %424 = llvm.load volatile %423 {alignment = 1 : i64} : !llvm.ptr -> i8
    %425 = arith.extui %424 : i8 to i32
    cf.switch %425 : i32, [
      default: ^bb91,
      0: ^bb91,
      1: ^bb93,
      2: ^bb92,
      3: ^bb91
    ]
  ^bb95:  // pred: ^bb90
    %c1_i32_163 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_163) : (i32) -> ()
    cf.br ^bb94
  ^bb96:  // 2 preds: ^bb91, ^bb97
    %426 = llvm.getelementptr %11[%409] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %427 = llvm.load volatile %426 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %427, %6 : i32, !llvm.ptr
    %428 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64_164 = arith.constant 24 : i64
    %429 = arith.extui %428 : i32 to i64
    %430 = arith.addi %429, %c24_i64_164 : i64
    %c4_i64_165 = arith.constant 4 : i64
    %431 = arith.addi %430, %c4_i64_165 : i64
    %c0_i32_166 = arith.constant 0 : i32
    %432 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_166) : (!llvm.ptr, i32) -> i32
    %433 = arith.extui %432 : i32 to i64
    %c65536_i64_167 = arith.constant 65536 : i64
    %434 = arith.muli %433, %c65536_i64_167 : i64
    %435 = arith.cmpi ult, %431, %434 : i64
    cf.cond_br %435, ^bb98, ^bb99
  ^bb97:  // pred: ^bb91
    %c1_i32_168 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_168) : (i32) -> ()
    cf.br ^bb96
  ^bb98:  // 2 preds: ^bb96, ^bb99
    %436 = llvm.getelementptr %11[%430] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %437 = llvm.load volatile %436 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %437, %8 : i32, !llvm.ptr
    %438 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64_169 = arith.constant 20 : i64
    %439 = arith.extui %438 : i32 to i64
    %440 = arith.addi %439, %c20_i64_169 : i64
    %c4_i64_170 = arith.constant 4 : i64
    %441 = arith.addi %440, %c4_i64_170 : i64
    %c0_i32_171 = arith.constant 0 : i32
    %442 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_171) : (!llvm.ptr, i32) -> i32
    %443 = arith.extui %442 : i32 to i64
    %c65536_i64_172 = arith.constant 65536 : i64
    %444 = arith.muli %443, %c65536_i64_172 : i64
    %445 = arith.cmpi ult, %441, %444 : i64
    cf.cond_br %445, ^bb100, ^bb101
  ^bb99:  // pred: ^bb96
    %c1_i32_173 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_173) : (i32) -> ()
    cf.br ^bb98
  ^bb100:  // 2 preds: ^bb98, ^bb101
    %446 = llvm.getelementptr %11[%440] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %447 = llvm.load volatile %446 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %447, %7 : i32, !llvm.ptr
    cf.br ^bb103
  ^bb101:  // pred: ^bb98
    %c1_i32_174 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_174) : (i32) -> ()
    cf.br ^bb100
  ^bb102:  // pred: ^bb115
    %c1_i32_175 = arith.constant 1 : i32
    cf.br ^bb2(%c1_i32_175 : i32)
  ^bb103:  // 2 preds: ^bb100, ^bb113
    %448 = llvm.load %3 : !llvm.ptr -> i32
    %c-1_i32_176 = arith.constant -1 : i32
    %449 = arith.addi %448, %c-1_i32_176 : i32
    llvm.store %449, %3 : i32, !llvm.ptr
    %c0_i32_177 = arith.constant 0 : i32
    %450 = arith.cmpi eq, %449, %c0_i32_177 : i32
    %451 = arith.extui %450 : i1 to i32
    %c0_i32_178 = arith.constant 0 : i32
    %452 = arith.cmpi ne, %451, %c0_i32_178 : i32
    cf.cond_br %452, ^bb88, ^bb104
  ^bb104:  // pred: ^bb103
    %453 = llvm.load %7 : !llvm.ptr -> i32
    %454 = llvm.load %6 : !llvm.ptr -> i32
    %455 = llvm.load %8 : !llvm.ptr -> i32
    %c16_i64_179 = arith.constant 16 : i64
    %456 = arith.extui %455 : i32 to i64
    %457 = arith.addi %456, %c16_i64_179 : i64
    %c4_i64_180 = arith.constant 4 : i64
    %458 = arith.addi %457, %c4_i64_180 : i64
    %c0_i32_181 = arith.constant 0 : i32
    %459 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_181) : (!llvm.ptr, i32) -> i32
    %460 = arith.extui %459 : i32 to i64
    %c65536_i64_182 = arith.constant 65536 : i64
    %461 = arith.muli %460, %c65536_i64_182 : i64
    %462 = arith.cmpi ult, %458, %461 : i64
    cf.cond_br %462, ^bb105, ^bb106
  ^bb105:  // 2 preds: ^bb104, ^bb106
    %463 = llvm.getelementptr %11[%457] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %464 = llvm.load volatile %463 {alignment = 1 : i64} : !llvm.ptr -> i32
    %465 = arith.cmpi ult, %464, %23 : i32
    cf.cond_br %465, ^bb107, ^bb108
  ^bb106:  // pred: ^bb104
    %c1_i32_183 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_183) : (i32) -> ()
    cf.br ^bb105
  ^bb107:  // 2 preds: ^bb105, ^bb108
    %466 = llvm.getelementptr inbounds %21[%464] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %467 = llvm.load %466 : !llvm.ptr -> !llvm.ptr
    %468 = llvm.ptrtoint %467 : !llvm.ptr to i64
    %c0_i64_184 = arith.constant 0 : i64
    %469 = arith.cmpi eq, %468, %c0_i64_184 : i64
    cf.cond_br %469, ^bb110, ^bb109
  ^bb108:  // pred: ^bb105
    %c3_i32_185 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_185) : (i32) -> ()
    cf.br ^bb107
  ^bb109:  // 2 preds: ^bb107, ^bb110
    %470 = llvm.getelementptr %467[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %471 = llvm.getelementptr %467[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %472 = llvm.getelementptr %467[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %473 = llvm.load %470 : !llvm.ptr -> !llvm.ptr
    %474 = llvm.load %472 : !llvm.ptr -> !llvm.ptr
    %475 = llvm.ptrtoint %473 : !llvm.ptr to i64
    %c0_i64_186 = arith.constant 0 : i64
    %476 = arith.cmpi eq, %475, %c0_i64_186 : i64
    cf.cond_br %476, ^bb112, ^bb111
  ^bb110:  // pred: ^bb107
    %c4_i32_187 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_187) : (i32) -> ()
    cf.br ^bb109
  ^bb111:  // 2 preds: ^bb109, ^bb112
    %477 = llvm.load %471 : !llvm.ptr -> i32
    %478 = arith.cmpi ne, %20, %477 : i32
    cf.cond_br %478, ^bb114, ^bb113
  ^bb112:  // pred: ^bb109
    %c3_i32_188 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_188) : (i32) -> ()
    cf.br ^bb111
  ^bb113:  // 2 preds: ^bb111, ^bb114
    %479 = llvm.call %473(%474, %453, %454) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_189 = arith.constant 0 : i32
    %480 = arith.cmpi eq, %479, %c0_i32_189 : i32
    %481 = arith.extui %480 : i1 to i32
    %c0_i32_190 = arith.constant 0 : i32
    %482 = arith.cmpi ne, %481, %c0_i32_190 : i32
    cf.cond_br %482, ^bb103, ^bb115
  ^bb114:  // pred: ^bb111
    %c5_i32_191 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_191) : (i32) -> ()
    cf.br ^bb113
  ^bb115:  // pred: ^bb113
    cf.br ^bb102
  ^bb116:  // 2 preds: ^bb89, ^bb117
    %483 = llvm.getelementptr %11[%388] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %484 = llvm.load volatile %483 {alignment = 1 : i64} : !llvm.ptr -> i32
    %485 = llvm.load %1 : !llvm.ptr -> i32
    %486 = llvm.load %2 : !llvm.ptr -> i32
    %487 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64_192 = arith.constant 24 : i64
    %488 = arith.extui %487 : i32 to i64
    %489 = arith.addi %488, %c24_i64_192 : i64
    %c4_i64_193 = arith.constant 4 : i64
    %490 = arith.addi %489, %c4_i64_193 : i64
    %c0_i32_194 = arith.constant 0 : i32
    %491 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_194) : (!llvm.ptr, i32) -> i32
    %492 = arith.extui %491 : i32 to i64
    %c65536_i64_195 = arith.constant 65536 : i64
    %493 = arith.muli %492, %c65536_i64_195 : i64
    %494 = arith.cmpi ult, %490, %493 : i64
    cf.cond_br %494, ^bb118, ^bb119
  ^bb117:  // pred: ^bb89
    %c1_i32_196 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_196) : (i32) -> ()
    cf.br ^bb116
  ^bb118:  // 2 preds: ^bb116, ^bb119
    %495 = llvm.getelementptr %11[%489] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %496 = llvm.load volatile %495 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_197 = arith.constant 12 : i64
    %497 = arith.extui %496 : i32 to i64
    %498 = arith.addi %497, %c12_i64_197 : i64
    %c4_i64_198 = arith.constant 4 : i64
    %499 = arith.addi %498, %c4_i64_198 : i64
    %c0_i32_199 = arith.constant 0 : i32
    %500 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_199) : (!llvm.ptr, i32) -> i32
    %501 = arith.extui %500 : i32 to i64
    %c65536_i64_200 = arith.constant 65536 : i64
    %502 = arith.muli %501, %c65536_i64_200 : i64
    %503 = arith.cmpi ult, %499, %502 : i64
    cf.cond_br %503, ^bb120, ^bb121
  ^bb119:  // pred: ^bb116
    %c1_i32_201 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_201) : (i32) -> ()
    cf.br ^bb118
  ^bb120:  // 2 preds: ^bb118, ^bb121
    %504 = llvm.getelementptr %11[%498] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %505 = llvm.load volatile %504 {alignment = 1 : i64} : !llvm.ptr -> i32
    %506 = arith.cmpi ult, %505, %26 : i32
    cf.cond_br %506, ^bb122, ^bb123
  ^bb121:  // pred: ^bb118
    %c1_i32_202 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_202) : (i32) -> ()
    cf.br ^bb120
  ^bb122:  // 2 preds: ^bb120, ^bb123
    %507 = llvm.getelementptr inbounds %24[%505] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %508 = llvm.load %507 : !llvm.ptr -> !llvm.ptr
    %509 = llvm.ptrtoint %508 : !llvm.ptr to i64
    %c0_i64_203 = arith.constant 0 : i64
    %510 = arith.cmpi eq, %509, %c0_i64_203 : i64
    cf.cond_br %510, ^bb125, ^bb124
  ^bb123:  // pred: ^bb120
    %c3_i32_204 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_204) : (i32) -> ()
    cf.br ^bb122
  ^bb124:  // 2 preds: ^bb122, ^bb125
    %511 = llvm.getelementptr %508[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %512 = llvm.getelementptr %508[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %513 = llvm.getelementptr %508[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %514 = llvm.load %511 : !llvm.ptr -> !llvm.ptr
    %515 = llvm.load %513 : !llvm.ptr -> !llvm.ptr
    %516 = llvm.ptrtoint %514 : !llvm.ptr to i64
    %c0_i64_205 = arith.constant 0 : i64
    %517 = arith.cmpi eq, %516, %c0_i64_205 : i64
    cf.cond_br %517, ^bb127, ^bb126
  ^bb125:  // pred: ^bb122
    %c4_i32_206 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_206) : (i32) -> ()
    cf.br ^bb124
  ^bb126:  // 2 preds: ^bb124, ^bb127
    %518 = llvm.load %512 : !llvm.ptr -> i32
    %519 = arith.cmpi ne, %13, %518 : i32
    cf.cond_br %519, ^bb129, ^bb128
  ^bb127:  // pred: ^bb124
    %c3_i32_207 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_207) : (i32) -> ()
    cf.br ^bb126
  ^bb128:  // 2 preds: ^bb126, ^bb129
    %520 = llvm.call %514(%515, %484, %485, %486) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%520 : i32)
  ^bb129:  // pred: ^bb126
    %c5_i32_208 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_208) : (i32) -> ()
    cf.br ^bb128
  ^bb130:  // pred: ^bb139
    %c0_i32_209 = arith.constant 0 : i32
    llvm.store %c0_i32_209, %3 : i32, !llvm.ptr
    cf.br ^bb143
  ^bb131:  // 2 preds: ^bb88, ^bb132
    %521 = llvm.getelementptr %11[%380] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %522 = llvm.load volatile %521 {alignment = 1 : i64} : !llvm.ptr -> i32
    %523 = arith.cmpi ult, %522, %29 : i32
    cf.cond_br %523, ^bb133, ^bb134
  ^bb132:  // pred: ^bb88
    %c1_i32_210 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_210) : (i32) -> ()
    cf.br ^bb131
  ^bb133:  // 2 preds: ^bb131, ^bb134
    %524 = llvm.getelementptr inbounds %27[%522] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %525 = llvm.load %524 : !llvm.ptr -> !llvm.ptr
    %526 = llvm.ptrtoint %525 : !llvm.ptr to i64
    %c0_i64_211 = arith.constant 0 : i64
    %527 = arith.cmpi eq, %526, %c0_i64_211 : i64
    cf.cond_br %527, ^bb136, ^bb135
  ^bb134:  // pred: ^bb131
    %c3_i32_212 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_212) : (i32) -> ()
    cf.br ^bb133
  ^bb135:  // 2 preds: ^bb133, ^bb136
    %528 = llvm.getelementptr %525[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %529 = llvm.getelementptr %525[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %530 = llvm.getelementptr %525[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %531 = llvm.load %528 : !llvm.ptr -> !llvm.ptr
    %532 = llvm.load %530 : !llvm.ptr -> !llvm.ptr
    %533 = llvm.ptrtoint %531 : !llvm.ptr to i64
    %c0_i64_213 = arith.constant 0 : i64
    %534 = arith.cmpi eq, %533, %c0_i64_213 : i64
    cf.cond_br %534, ^bb138, ^bb137
  ^bb136:  // pred: ^bb133
    %c4_i32_214 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_214) : (i32) -> ()
    cf.br ^bb135
  ^bb137:  // 2 preds: ^bb135, ^bb138
    %535 = llvm.load %529 : !llvm.ptr -> i32
    %536 = arith.cmpi ne, %13, %535 : i32
    cf.cond_br %536, ^bb140, ^bb139
  ^bb138:  // pred: ^bb135
    %c3_i32_215 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_215) : (i32) -> ()
    cf.br ^bb137
  ^bb139:  // 2 preds: ^bb137, ^bb140
    %537 = llvm.call %531(%532, %375, %376, %377) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_216 = arith.constant 0 : i32
    %538 = arith.cmpi eq, %537, %c0_i32_216 : i32
    %539 = arith.extui %538 : i1 to i32
    %c0_i32_217 = arith.constant 0 : i32
    %540 = arith.cmpi ne, %539, %c0_i32_217 : i32
    cf.cond_br %540, ^bb130, ^bb141
  ^bb140:  // pred: ^bb137
    %c5_i32_218 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_218) : (i32) -> ()
    cf.br ^bb139
  ^bb141:  // pred: ^bb139
    %c1_i32_219 = arith.constant 1 : i32
    cf.br ^bb2(%c1_i32_219 : i32)
  ^bb142:  // pred: ^bb156
    %541 = llvm.load %3 : !llvm.ptr -> i32
    %c-1_i32_220 = arith.constant -1 : i32
    %542 = arith.addi %541, %c-1_i32_220 : i32
    %543 = llvm.load %5 : !llvm.ptr -> i32
    %544 = arith.cmpi ult, %542, %543 : i32
    %545 = arith.extui %544 : i1 to i32
    cf.br ^bb2(%545 : i32)
  ^bb143:  // 2 preds: ^bb130, ^bb154
    %546 = llvm.load %5 : !llvm.ptr -> i32
    %547 = llvm.load %3 : !llvm.ptr -> i32
    %548 = arith.cmpi eq, %546, %547 : i32
    %549 = arith.extui %548 : i1 to i32
    %c0_i32_221 = arith.constant 0 : i32
    %550 = arith.cmpi eq, %549, %c0_i32_221 : i32
    %551 = arith.extui %550 : i1 to i32
    %c0_i32_222 = arith.constant 0 : i32
    %552 = arith.cmpi ne, %551, %c0_i32_222 : i32
    cf.cond_br %552, ^bb144, ^bb145
  ^bb144:  // pred: ^bb143
    %553 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_223 = arith.constant 1 : i32
    %554 = arith.addi %553, %c1_i32_223 : i32
    llvm.store %554, %3 : i32, !llvm.ptr
    %555 = llvm.load %7 : !llvm.ptr -> i32
    %556 = llvm.load %6 : !llvm.ptr -> i32
    %557 = llvm.load %8 : !llvm.ptr -> i32
    %c16_i64_224 = arith.constant 16 : i64
    %558 = arith.extui %557 : i32 to i64
    %559 = arith.addi %558, %c16_i64_224 : i64
    %c4_i64_225 = arith.constant 4 : i64
    %560 = arith.addi %559, %c4_i64_225 : i64
    %c0_i32_226 = arith.constant 0 : i32
    %561 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_226) : (!llvm.ptr, i32) -> i32
    %562 = arith.extui %561 : i32 to i64
    %c65536_i64_227 = arith.constant 65536 : i64
    %563 = arith.muli %562, %c65536_i64_227 : i64
    %564 = arith.cmpi ult, %560, %563 : i64
    cf.cond_br %564, ^bb146, ^bb147
  ^bb145:  // pred: ^bb143
    %565 = llvm.load %5 : !llvm.ptr -> i32
    %566 = llvm.load %5 : !llvm.ptr -> i32
    %567 = arith.cmpi ult, %565, %566 : i32
    %568 = arith.extui %567 : i1 to i32
    cf.br ^bb2(%568 : i32)
  ^bb146:  // 2 preds: ^bb144, ^bb147
    %569 = llvm.getelementptr %11[%559] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %570 = llvm.load volatile %569 {alignment = 1 : i64} : !llvm.ptr -> i32
    %571 = arith.cmpi ult, %570, %32 : i32
    cf.cond_br %571, ^bb148, ^bb149
  ^bb147:  // pred: ^bb144
    %c1_i32_228 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_228) : (i32) -> ()
    cf.br ^bb146
  ^bb148:  // 2 preds: ^bb146, ^bb149
    %572 = llvm.getelementptr inbounds %30[%570] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %573 = llvm.load %572 : !llvm.ptr -> !llvm.ptr
    %574 = llvm.ptrtoint %573 : !llvm.ptr to i64
    %c0_i64_229 = arith.constant 0 : i64
    %575 = arith.cmpi eq, %574, %c0_i64_229 : i64
    cf.cond_br %575, ^bb151, ^bb150
  ^bb149:  // pred: ^bb146
    %c3_i32_230 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_230) : (i32) -> ()
    cf.br ^bb148
  ^bb150:  // 2 preds: ^bb148, ^bb151
    %576 = llvm.getelementptr %573[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %577 = llvm.getelementptr %573[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %578 = llvm.getelementptr %573[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %579 = llvm.load %576 : !llvm.ptr -> !llvm.ptr
    %580 = llvm.load %578 : !llvm.ptr -> !llvm.ptr
    %581 = llvm.ptrtoint %579 : !llvm.ptr to i64
    %c0_i64_231 = arith.constant 0 : i64
    %582 = arith.cmpi eq, %581, %c0_i64_231 : i64
    cf.cond_br %582, ^bb153, ^bb152
  ^bb151:  // pred: ^bb148
    %c4_i32_232 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_232) : (i32) -> ()
    cf.br ^bb150
  ^bb152:  // 2 preds: ^bb150, ^bb153
    %583 = llvm.load %577 : !llvm.ptr -> i32
    %584 = arith.cmpi ne, %20, %583 : i32
    cf.cond_br %584, ^bb155, ^bb154
  ^bb153:  // pred: ^bb150
    %c3_i32_233 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_233) : (i32) -> ()
    cf.br ^bb152
  ^bb154:  // 2 preds: ^bb152, ^bb155
    %585 = llvm.call %579(%580, %555, %556) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_234 = arith.constant 0 : i32
    %586 = arith.cmpi eq, %585, %c0_i32_234 : i32
    %587 = arith.extui %586 : i1 to i32
    %c0_i32_235 = arith.constant 0 : i32
    %588 = arith.cmpi ne, %587, %c0_i32_235 : i32
    cf.cond_br %588, ^bb143, ^bb156
  ^bb155:  // pred: ^bb152
    %c5_i32_236 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_236) : (i32) -> ()
    cf.br ^bb154
  ^bb156:  // pred: ^bb154
    cf.br ^bb142
  ^bb157:  // 2 preds: ^bb5, ^bb158
    %589 = llvm.getelementptr %11[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %590 = llvm.load volatile %589 {alignment = 1 : i64} : !llvm.ptr -> i32
    %591 = llvm.load %1 : !llvm.ptr -> i32
    %592 = llvm.load %2 : !llvm.ptr -> i32
    %593 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64_237 = arith.constant 24 : i64
    %594 = arith.extui %593 : i32 to i64
    %595 = arith.addi %594, %c24_i64_237 : i64
    %c4_i64_238 = arith.constant 4 : i64
    %596 = arith.addi %595, %c4_i64_238 : i64
    %c0_i32_239 = arith.constant 0 : i32
    %597 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_239) : (!llvm.ptr, i32) -> i32
    %598 = arith.extui %597 : i32 to i64
    %c65536_i64_240 = arith.constant 65536 : i64
    %599 = arith.muli %598, %c65536_i64_240 : i64
    %600 = arith.cmpi ult, %596, %599 : i64
    cf.cond_br %600, ^bb159, ^bb160
  ^bb158:  // pred: ^bb5
    %c1_i32_241 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_241) : (i32) -> ()
    cf.br ^bb157
  ^bb159:  // 2 preds: ^bb157, ^bb160
    %601 = llvm.getelementptr %11[%595] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %602 = llvm.load volatile %601 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_242 = arith.constant 12 : i64
    %603 = arith.extui %602 : i32 to i64
    %604 = arith.addi %603, %c12_i64_242 : i64
    %c4_i64_243 = arith.constant 4 : i64
    %605 = arith.addi %604, %c4_i64_243 : i64
    %c0_i32_244 = arith.constant 0 : i32
    %606 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_244) : (!llvm.ptr, i32) -> i32
    %607 = arith.extui %606 : i32 to i64
    %c65536_i64_245 = arith.constant 65536 : i64
    %608 = arith.muli %607, %c65536_i64_245 : i64
    %609 = arith.cmpi ult, %605, %608 : i64
    cf.cond_br %609, ^bb161, ^bb162
  ^bb160:  // pred: ^bb157
    %c1_i32_246 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_246) : (i32) -> ()
    cf.br ^bb159
  ^bb161:  // 2 preds: ^bb159, ^bb162
    %610 = llvm.getelementptr %11[%604] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %611 = llvm.load volatile %610 {alignment = 1 : i64} : !llvm.ptr -> i32
    %612 = arith.cmpi ult, %611, %35 : i32
    cf.cond_br %612, ^bb163, ^bb164
  ^bb162:  // pred: ^bb159
    %c1_i32_247 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_247) : (i32) -> ()
    cf.br ^bb161
  ^bb163:  // 2 preds: ^bb161, ^bb164
    %613 = llvm.getelementptr inbounds %33[%611] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %614 = llvm.load %613 : !llvm.ptr -> !llvm.ptr
    %615 = llvm.ptrtoint %614 : !llvm.ptr to i64
    %c0_i64_248 = arith.constant 0 : i64
    %616 = arith.cmpi eq, %615, %c0_i64_248 : i64
    cf.cond_br %616, ^bb166, ^bb165
  ^bb164:  // pred: ^bb161
    %c3_i32_249 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_249) : (i32) -> ()
    cf.br ^bb163
  ^bb165:  // 2 preds: ^bb163, ^bb166
    %617 = llvm.getelementptr %614[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %618 = llvm.getelementptr %614[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %619 = llvm.getelementptr %614[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %620 = llvm.load %617 : !llvm.ptr -> !llvm.ptr
    %621 = llvm.load %619 : !llvm.ptr -> !llvm.ptr
    %622 = llvm.ptrtoint %620 : !llvm.ptr to i64
    %c0_i64_250 = arith.constant 0 : i64
    %623 = arith.cmpi eq, %622, %c0_i64_250 : i64
    cf.cond_br %623, ^bb168, ^bb167
  ^bb166:  // pred: ^bb163
    %c4_i32_251 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_251) : (i32) -> ()
    cf.br ^bb165
  ^bb167:  // 2 preds: ^bb165, ^bb168
    %624 = llvm.load %618 : !llvm.ptr -> i32
    %625 = arith.cmpi ne, %13, %624 : i32
    cf.cond_br %625, ^bb170, ^bb169
  ^bb168:  // pred: ^bb165
    %c3_i32_252 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_252) : (i32) -> ()
    cf.br ^bb167
  ^bb169:  // 2 preds: ^bb167, ^bb170
    %626 = llvm.call %620(%621, %590, %591, %592) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%626 : i32)
  ^bb170:  // pred: ^bb167
    %c5_i32_253 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_253) : (i32) -> ()
    cf.br ^bb169
  }
  func.func @f148(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %4 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %9 = arith.subi %8, %c16_i32 : i32
    llvm.store %9, %2 : i32, !llvm.ptr
    llvm.store %9, %4 : i32, !llvm.ptr
    %10 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_2 = arith.constant 1 : i32
    %c12_i64 = arith.constant 12 : i64
    %11 = arith.extui %10 : i32 to i64
    %12 = arith.addi %11, %c12_i64 : i64
    %c2_i64 = arith.constant 2 : i64
    %13 = arith.addi %12, %c2_i64 : i64
    %c0_i32_3 = arith.constant 0 : i32
    %14 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_3) : (!llvm.ptr, i32) -> i32
    %15 = arith.extui %14 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %16 = arith.muli %15, %c65536_i64 : i64
    %17 = arith.cmpi ult, %13, %16 : i64
    cf.cond_br %17, ^bb3, ^bb4
  ^bb2:  // no predecessors
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %18 = llvm.getelementptr %7[%12] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %19 = arith.trunci %c1_i32_2 : i32 to i16
    llvm.store volatile %19, %18 {alignment = 1 : i64} : i16, !llvm.ptr
    %20 = llvm.load %2 : !llvm.ptr -> i32
    %21 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %22 = arith.extui %20 : i32 to i64
    %23 = arith.addi %22, %c8_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %24 = arith.addi %23, %c4_i64 : i64
    %c0_i32_4 = arith.constant 0 : i32
    %25 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_4) : (!llvm.ptr, i32) -> i32
    %26 = arith.extui %25 : i32 to i64
    %c65536_i64_5 = arith.constant 65536 : i64
    %27 = arith.muli %26, %c65536_i64_5 : i64
    %28 = arith.cmpi ult, %24, %27 : i64
    cf.cond_br %28, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c1_i32_6 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_6) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %29 = llvm.getelementptr %7[%23] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %21, %29 {alignment = 1 : i64} : i32, !llvm.ptr
    %30 = llvm.load %2 : !llvm.ptr -> i32
    %31 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_7 = arith.constant 4 : i64
    %32 = arith.extui %30 : i32 to i64
    %33 = arith.addi %32, %c4_i64_7 : i64
    %c4_i64_8 = arith.constant 4 : i64
    %34 = arith.addi %33, %c4_i64_8 : i64
    %c0_i32_9 = arith.constant 0 : i32
    %35 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_9) : (!llvm.ptr, i32) -> i32
    %36 = arith.extui %35 : i32 to i64
    %c65536_i64_10 = arith.constant 65536 : i64
    %37 = arith.muli %36, %c65536_i64_10 : i64
    %38 = arith.cmpi ult, %34, %37 : i64
    cf.cond_br %38, ^bb7, ^bb8
  ^bb6:  // pred: ^bb3
    %c1_i32_11 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_11) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %39 = llvm.getelementptr %7[%33] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %31, %39 {alignment = 1 : i64} : i32, !llvm.ptr
    %40 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %41 = arith.addi %40, %c4_i32 : i32
    call @f130(%arg0, %41) : (!llvm.ptr, i32) -> ()
    llvm.unreachable
  ^bb8:  // pred: ^bb5
    %c1_i32_12 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_12) : (i32) -> ()
    cf.br ^bb7
  }
  func.func @f149(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %8 = arith.addi %7, %c4_i64 : i64
    %c0_i32 = arith.constant 0 : i32
    %9 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32) : (!llvm.ptr, i32) -> i32
    %10 = arith.extui %9 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %11 = arith.muli %10, %c65536_i64 : i64
    %12 = arith.cmpi ult, %8, %11 : i64
    cf.cond_br %12, ^bb3, ^bb4
  ^bb2(%13: i32):  // pred: ^bb3
    return %13 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %14 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %15 = llvm.load volatile %14 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_1 = arith.constant 1 : i32
    %16 = llvm.load %1 : !llvm.ptr -> i32
    %17 = call @f158(%arg0, %15, %c1_i32_1, %16) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%17 : i32)
  ^bb4:  // pred: ^bb1
    %c1_i32_2 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_2) : (i32) -> ()
    cf.br ^bb3
  }
  func.func @f150(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %c1_i32_9 = arith.constant 1 : i32
    %10 = llvm.alloca %c1_i32_9 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %10 : i32, !llvm.ptr
    %c1_i32_10 = arith.constant 1 : i32
    %11 = llvm.alloca %c1_i32_10 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %11 : i32, !llvm.ptr
    %c1_i32_11 = arith.constant 1 : i32
    %12 = llvm.alloca %c1_i32_11 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %12 : i32, !llvm.ptr
    %13 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %15 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %15[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.getelementptr %arg0[12] : (!llvm.ptr) -> !llvm.ptr, i8
    %19 = llvm.load %18 : !llvm.ptr -> i32
    %20 = llvm.getelementptr %arg0[304] : (!llvm.ptr) -> !llvm.ptr, i8
    %21 = llvm.getelementptr %arg0[312] : (!llvm.ptr) -> !llvm.ptr, i8
    %22 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %23 = llvm.load %21 : !llvm.ptr -> i64
    %24 = arith.trunci %23 : i64 to i32
    %25 = llvm.getelementptr %arg0[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %26 = llvm.load %25 : !llvm.ptr -> i32
    %27 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %28 = llvm.load %21 : !llvm.ptr -> i64
    %29 = arith.trunci %28 : i64 to i32
    %30 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %31 = llvm.load %21 : !llvm.ptr -> i64
    %32 = arith.trunci %31 : i64 to i32
    %33 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %34 = llvm.load %21 : !llvm.ptr -> i64
    %35 = arith.trunci %34 : i64 to i32
    %36 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %37 = llvm.load %21 : !llvm.ptr -> i64
    %38 = arith.trunci %37 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %39 = llvm.load %14 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %40 = arith.subi %39, %c48_i32 : i32
    llvm.store %40, %3 : i32, !llvm.ptr
    llvm.store %40, %14 : i32, !llvm.ptr
    %41 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %c44_i64 = arith.constant 44 : i64
    %42 = arith.extui %41 : i32 to i64
    %43 = arith.addi %42, %c44_i64 : i64
    %c1_i64 = arith.constant 1 : i64
    %44 = arith.addi %43, %c1_i64 : i64
    %c0_i32_12 = arith.constant 0 : i32
    %45 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_12) : (!llvm.ptr, i32) -> i32
    %46 = arith.extui %45 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %47 = arith.muli %46, %c65536_i64 : i64
    %48 = arith.cmpi ult, %44, %47 : i64
    cf.cond_br %48, ^bb3, ^bb4
  ^bb2(%49: i32):  // pred: ^bb17
    return %49 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %50 = llvm.getelementptr %17[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %51 = arith.trunci %c3_i32 : i32 to i8
    llvm.store volatile %51, %50 {alignment = 1 : i64} : i8, !llvm.ptr
    %52 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %c28_i64 = arith.constant 28 : i64
    %53 = arith.extui %52 : i32 to i64
    %54 = arith.addi %53, %c28_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %55 = arith.addi %54, %c4_i64 : i64
    %c0_i32_13 = arith.constant 0 : i32
    %56 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_13) : (!llvm.ptr, i32) -> i32
    %57 = arith.extui %56 : i32 to i64
    %c65536_i64_14 = arith.constant 65536 : i64
    %58 = arith.muli %57, %c65536_i64_14 : i64
    %59 = arith.cmpi ult, %55, %58 : i64
    cf.cond_br %59, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c1_i32_15 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_15) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %60 = llvm.getelementptr %17[%54] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c32_i32, %60 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_16 = arith.constant 0 : i32
    llvm.store %c0_i32_16, %4 : i32, !llvm.ptr
    %61 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_17 = arith.constant 0 : i32
    %c40_i64 = arith.constant 40 : i64
    %62 = arith.extui %61 : i32 to i64
    %63 = arith.addi %62, %c40_i64 : i64
    %c4_i64_18 = arith.constant 4 : i64
    %64 = arith.addi %63, %c4_i64_18 : i64
    %c0_i32_19 = arith.constant 0 : i32
    %65 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_19) : (!llvm.ptr, i32) -> i32
    %66 = arith.extui %65 : i32 to i64
    %c65536_i64_20 = arith.constant 65536 : i64
    %67 = arith.muli %66, %c65536_i64_20 : i64
    %68 = arith.cmpi ult, %64, %67 : i64
    cf.cond_br %68, ^bb7, ^bb8
  ^bb6:  // pred: ^bb3
    %c1_i32_21 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_21) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %69 = llvm.getelementptr %17[%63] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_17, %69 {alignment = 1 : i64} : i32, !llvm.ptr
    %70 = llvm.load %3 : !llvm.ptr -> i32
    %71 = llvm.load %1 : !llvm.ptr -> i32
    %c36_i64 = arith.constant 36 : i64
    %72 = arith.extui %70 : i32 to i64
    %73 = arith.addi %72, %c36_i64 : i64
    %c4_i64_22 = arith.constant 4 : i64
    %74 = arith.addi %73, %c4_i64_22 : i64
    %c0_i32_23 = arith.constant 0 : i32
    %75 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_23) : (!llvm.ptr, i32) -> i32
    %76 = arith.extui %75 : i32 to i64
    %c65536_i64_24 = arith.constant 65536 : i64
    %77 = arith.muli %76, %c65536_i64_24 : i64
    %78 = arith.cmpi ult, %74, %77 : i64
    cf.cond_br %78, ^bb9, ^bb10
  ^bb8:  // pred: ^bb5
    %c1_i32_25 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_25) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %79 = llvm.getelementptr %17[%73] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %71, %79 {alignment = 1 : i64} : i32, !llvm.ptr
    %80 = llvm.load %3 : !llvm.ptr -> i32
    %81 = llvm.load %0 : !llvm.ptr -> i32
    %c32_i64 = arith.constant 32 : i64
    %82 = arith.extui %80 : i32 to i64
    %83 = arith.addi %82, %c32_i64 : i64
    %c4_i64_26 = arith.constant 4 : i64
    %84 = arith.addi %83, %c4_i64_26 : i64
    %c0_i32_27 = arith.constant 0 : i32
    %85 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_27) : (!llvm.ptr, i32) -> i32
    %86 = arith.extui %85 : i32 to i64
    %c65536_i64_28 = arith.constant 65536 : i64
    %87 = arith.muli %86, %c65536_i64_28 : i64
    %88 = arith.cmpi ult, %84, %87 : i64
    cf.cond_br %88, ^bb11, ^bb12
  ^bb10:  // pred: ^bb7
    %c1_i32_29 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_29) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %89 = llvm.getelementptr %17[%83] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %81, %89 {alignment = 1 : i64} : i32, !llvm.ptr
    %90 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_30 = arith.constant 0 : i32
    %c20_i64 = arith.constant 20 : i64
    %91 = arith.extui %90 : i32 to i64
    %92 = arith.addi %91, %c20_i64 : i64
    %c4_i64_31 = arith.constant 4 : i64
    %93 = arith.addi %92, %c4_i64_31 : i64
    %c0_i32_32 = arith.constant 0 : i32
    %94 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_32) : (!llvm.ptr, i32) -> i32
    %95 = arith.extui %94 : i32 to i64
    %c65536_i64_33 = arith.constant 65536 : i64
    %96 = arith.muli %95, %c65536_i64_33 : i64
    %97 = arith.cmpi ult, %93, %96 : i64
    cf.cond_br %97, ^bb13, ^bb14
  ^bb12:  // pred: ^bb9
    %c1_i32_34 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_34) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %98 = llvm.getelementptr %17[%92] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_30, %98 {alignment = 1 : i64} : i32, !llvm.ptr
    %99 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_35 = arith.constant 0 : i32
    %c12_i64 = arith.constant 12 : i64
    %100 = arith.extui %99 : i32 to i64
    %101 = arith.addi %100, %c12_i64 : i64
    %c4_i64_36 = arith.constant 4 : i64
    %102 = arith.addi %101, %c4_i64_36 : i64
    %c0_i32_37 = arith.constant 0 : i32
    %103 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_37) : (!llvm.ptr, i32) -> i32
    %104 = arith.extui %103 : i32 to i64
    %c65536_i64_38 = arith.constant 65536 : i64
    %105 = arith.muli %104, %c65536_i64_38 : i64
    %106 = arith.cmpi ult, %102, %105 : i64
    cf.cond_br %106, ^bb15, ^bb16
  ^bb14:  // pred: ^bb11
    %c1_i32_39 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_39) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // 2 preds: ^bb13, ^bb16
    %107 = llvm.getelementptr %17[%101] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_35, %107 {alignment = 1 : i64} : i32, !llvm.ptr
    %108 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %109 = arith.extui %108 : i32 to i64
    %110 = arith.addi %109, %c16_i64 : i64
    %c4_i64_40 = arith.constant 4 : i64
    %111 = arith.addi %110, %c4_i64_40 : i64
    %c0_i32_41 = arith.constant 0 : i32
    %112 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_41) : (!llvm.ptr, i32) -> i32
    %113 = arith.extui %112 : i32 to i64
    %c65536_i64_42 = arith.constant 65536 : i64
    %114 = arith.muli %113, %c65536_i64_42 : i64
    %115 = arith.cmpi ult, %111, %114 : i64
    cf.cond_br %115, ^bb22, ^bb23
  ^bb16:  // pred: ^bb13
    %c1_i32_43 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_43) : (i32) -> ()
    cf.br ^bb15
  ^bb17:  // 2 preds: ^bb18, ^bb19
    %116 = llvm.load %3 : !llvm.ptr -> i32
    %c48_i32_44 = arith.constant 48 : i32
    %117 = arith.addi %116, %c48_i32_44 : i32
    llvm.store %117, %14 : i32, !llvm.ptr
    %118 = llvm.load %1 : !llvm.ptr -> i32
    cf.br ^bb2(%118 : i32)
  ^bb18:  // 2 preds: ^bb159, ^bb180
    %c0_i32_45 = arith.constant 0 : i32
    llvm.store %c0_i32_45, %1 : i32, !llvm.ptr
    cf.br ^bb17
  ^bb19:  // 5 preds: ^bb52, ^bb65, ^bb96, ^bb155, ^bb182
    %c1_i32_46 = arith.constant 1 : i32
    llvm.store %c1_i32_46, %1 : i32, !llvm.ptr
    cf.br ^bb17
  ^bb20:  // 4 preds: ^bb25, ^bb68, ^bb69, ^bb76
    %119 = llvm.load %4 : !llvm.ptr -> i32
    %120 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_47 = arith.constant 4 : i64
    %121 = arith.extui %120 : i32 to i64
    %122 = arith.addi %121, %c4_i64_47 : i64
    %c4_i64_48 = arith.constant 4 : i64
    %123 = arith.addi %122, %c4_i64_48 : i64
    %c0_i32_49 = arith.constant 0 : i32
    %124 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_49) : (!llvm.ptr, i32) -> i32
    %125 = arith.extui %124 : i32 to i64
    %c65536_i64_50 = arith.constant 65536 : i64
    %126 = arith.muli %125, %c65536_i64_50 : i64
    %127 = arith.cmpi ult, %123, %126 : i64
    cf.cond_br %127, ^bb159, ^bb160
  ^bb21:  // 2 preds: ^bb22, ^bb32
    %128 = llvm.load %2 : !llvm.ptr -> i32
    %c20_i64_51 = arith.constant 20 : i64
    %129 = arith.extui %128 : i32 to i64
    %130 = arith.addi %129, %c20_i64_51 : i64
    %c4_i64_52 = arith.constant 4 : i64
    %131 = arith.addi %130, %c4_i64_52 : i64
    %c0_i32_53 = arith.constant 0 : i32
    %132 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_53) : (!llvm.ptr, i32) -> i32
    %133 = arith.extui %132 : i32 to i64
    %c65536_i64_54 = arith.constant 65536 : i64
    %134 = arith.muli %133, %c65536_i64_54 : i64
    %135 = arith.cmpi ult, %131, %134 : i64
    cf.cond_br %135, ^bb69, ^bb70
  ^bb22:  // 2 preds: ^bb15, ^bb23
    %136 = llvm.getelementptr %17[%110] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %137 = llvm.load volatile %136 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %137, %5 : i32, !llvm.ptr
    %c0_i32_55 = arith.constant 0 : i32
    %138 = arith.cmpi ne, %137, %c0_i32_55 : i32
    cf.cond_br %138, ^bb21, ^bb24
  ^bb23:  // pred: ^bb15
    %c1_i32_56 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_56) : (i32) -> ()
    cf.br ^bb22
  ^bb24:  // pred: ^bb22
    %139 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64_57 = arith.constant 12 : i64
    %140 = arith.extui %139 : i32 to i64
    %141 = arith.addi %140, %c12_i64_57 : i64
    %c4_i64_58 = arith.constant 4 : i64
    %142 = arith.addi %141, %c4_i64_58 : i64
    %c0_i32_59 = arith.constant 0 : i32
    %143 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_59) : (!llvm.ptr, i32) -> i32
    %144 = arith.extui %143 : i32 to i64
    %c65536_i64_60 = arith.constant 65536 : i64
    %145 = arith.muli %144, %c65536_i64_60 : i64
    %146 = arith.cmpi ult, %142, %145 : i64
    cf.cond_br %146, ^bb25, ^bb26
  ^bb25:  // 2 preds: ^bb24, ^bb26
    %147 = llvm.getelementptr %17[%141] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %148 = llvm.load volatile %147 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %148, %0 : i32, !llvm.ptr
    %c0_i32_61 = arith.constant 0 : i32
    %149 = arith.cmpi eq, %148, %c0_i32_61 : i32
    %150 = arith.extui %149 : i1 to i32
    %c0_i32_62 = arith.constant 0 : i32
    %151 = arith.cmpi ne, %150, %c0_i32_62 : i32
    cf.cond_br %151, ^bb20, ^bb27
  ^bb26:  // pred: ^bb24
    %c1_i32_63 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_63) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // pred: ^bb25
    %152 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %153 = arith.extui %152 : i32 to i64
    %154 = arith.addi %153, %c8_i64 : i64
    %c4_i64_64 = arith.constant 4 : i64
    %155 = arith.addi %154, %c4_i64_64 : i64
    %c0_i32_65 = arith.constant 0 : i32
    %156 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_65) : (!llvm.ptr, i32) -> i32
    %157 = arith.extui %156 : i32 to i64
    %c65536_i64_66 = arith.constant 65536 : i64
    %158 = arith.muli %157, %c65536_i64_66 : i64
    %159 = arith.cmpi ult, %155, %158 : i64
    cf.cond_br %159, ^bb28, ^bb29
  ^bb28:  // 2 preds: ^bb27, ^bb29
    %160 = llvm.getelementptr %17[%154] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %161 = llvm.load volatile %160 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %161, %1 : i32, !llvm.ptr
    %162 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i32_67 = arith.constant 3 : i32
    %c31_i32 = arith.constant 31 : i32
    %163 = arith.cmpi ule, %c3_i32_67, %c31_i32 : i32
    %164 = scf.if %163 -> (i32) {
      %746 = arith.shli %162, %c3_i32_67 : i32
      scf.yield %746 : i32
    } else {
      %c0_i32_354 = arith.constant 0 : i32
      scf.yield %c0_i32_354 : i32
    }
    %165 = arith.addi %161, %164 : i32
    llvm.store %165, %6 : i32, !llvm.ptr
    %166 = llvm.load %0 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %167 = arith.addi %166, %c-1_i32 : i32
    %c536870911_i32 = arith.constant 536870911 : i32
    %168 = arith.andi %167, %c536870911_i32 : i32
    %c1_i32_68 = arith.constant 1 : i32
    %169 = arith.addi %168, %c1_i32_68 : i32
    llvm.store %169, %4 : i32, !llvm.ptr
    %170 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %171 = arith.extui %170 : i32 to i64
    %172 = arith.addi %171, %c0_i64 : i64
    %c4_i64_69 = arith.constant 4 : i64
    %173 = arith.addi %172, %c4_i64_69 : i64
    %c0_i32_70 = arith.constant 0 : i32
    %174 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_70) : (!llvm.ptr, i32) -> i32
    %175 = arith.extui %174 : i32 to i64
    %c65536_i64_71 = arith.constant 65536 : i64
    %176 = arith.muli %175, %c65536_i64_71 : i64
    %177 = arith.cmpi ult, %173, %176 : i64
    cf.cond_br %177, ^bb30, ^bb31
  ^bb29:  // pred: ^bb27
    %c1_i32_72 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_72) : (i32) -> ()
    cf.br ^bb28
  ^bb30:  // 2 preds: ^bb28, ^bb31
    %178 = llvm.getelementptr %17[%172] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %179 = llvm.load volatile %178 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %179, %0 : i32, !llvm.ptr
    cf.br ^bb33
  ^bb31:  // pred: ^bb28
    %c1_i32_73 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_73) : (i32) -> ()
    cf.br ^bb30
  ^bb32:  // no predecessors
    cf.br ^bb21
  ^bb33:  // 2 preds: ^bb30, ^bb67
    %180 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %181 = arith.addi %180, %c4_i32 : i32
    %c0_i64_74 = arith.constant 0 : i64
    %182 = arith.extui %181 : i32 to i64
    %183 = arith.addi %182, %c0_i64_74 : i64
    %c4_i64_75 = arith.constant 4 : i64
    %184 = arith.addi %183, %c4_i64_75 : i64
    %c0_i32_76 = arith.constant 0 : i32
    %185 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_76) : (!llvm.ptr, i32) -> i32
    %186 = arith.extui %185 : i32 to i64
    %c65536_i64_77 = arith.constant 65536 : i64
    %187 = arith.muli %186, %c65536_i64_77 : i64
    %188 = arith.cmpi ult, %184, %187 : i64
    cf.cond_br %188, ^bb35, ^bb36
  ^bb34:  // 2 preds: ^bb35, ^bb54
    %189 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_78 = arith.constant 0 : i64
    %190 = arith.extui %189 : i32 to i64
    %191 = arith.addi %190, %c0_i64_78 : i64
    %c4_i64_79 = arith.constant 4 : i64
    %192 = arith.addi %191, %c4_i64_79 : i64
    %c0_i32_80 = arith.constant 0 : i32
    %193 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_80) : (!llvm.ptr, i32) -> i32
    %194 = arith.extui %193 : i32 to i64
    %c65536_i64_81 = arith.constant 65536 : i64
    %195 = arith.muli %194, %c65536_i64_81 : i64
    %196 = arith.cmpi ult, %192, %195 : i64
    cf.cond_br %196, ^bb55, ^bb56
  ^bb35:  // 2 preds: ^bb33, ^bb36
    %197 = llvm.getelementptr %17[%183] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %198 = llvm.load volatile %197 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %198, %7 : i32, !llvm.ptr
    %c0_i32_82 = arith.constant 0 : i32
    %199 = arith.cmpi eq, %198, %c0_i32_82 : i32
    %200 = arith.extui %199 : i1 to i32
    %c0_i32_83 = arith.constant 0 : i32
    %201 = arith.cmpi ne, %200, %c0_i32_83 : i32
    cf.cond_br %201, ^bb34, ^bb37
  ^bb36:  // pred: ^bb33
    %c1_i32_84 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_84) : (i32) -> ()
    cf.br ^bb35
  ^bb37:  // pred: ^bb35
    %202 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i64_85 = arith.constant 32 : i64
    %203 = arith.extui %202 : i32 to i64
    %204 = arith.addi %203, %c32_i64_85 : i64
    %c4_i64_86 = arith.constant 4 : i64
    %205 = arith.addi %204, %c4_i64_86 : i64
    %c0_i32_87 = arith.constant 0 : i32
    %206 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_87) : (!llvm.ptr, i32) -> i32
    %207 = arith.extui %206 : i32 to i64
    %c65536_i64_88 = arith.constant 65536 : i64
    %208 = arith.muli %207, %c65536_i64_88 : i64
    %209 = arith.cmpi ult, %205, %208 : i64
    cf.cond_br %209, ^bb38, ^bb39
  ^bb38:  // 2 preds: ^bb37, ^bb39
    %210 = llvm.getelementptr %17[%204] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %211 = llvm.load volatile %210 {alignment = 1 : i64} : !llvm.ptr -> i32
    %212 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_89 = arith.constant 0 : i64
    %213 = arith.extui %212 : i32 to i64
    %214 = arith.addi %213, %c0_i64_89 : i64
    %c4_i64_90 = arith.constant 4 : i64
    %215 = arith.addi %214, %c4_i64_90 : i64
    %c0_i32_91 = arith.constant 0 : i32
    %216 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_91) : (!llvm.ptr, i32) -> i32
    %217 = arith.extui %216 : i32 to i64
    %c65536_i64_92 = arith.constant 65536 : i64
    %218 = arith.muli %217, %c65536_i64_92 : i64
    %219 = arith.cmpi ult, %215, %218 : i64
    cf.cond_br %219, ^bb40, ^bb41
  ^bb39:  // pred: ^bb37
    %c1_i32_93 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_93) : (i32) -> ()
    cf.br ^bb38
  ^bb40:  // 2 preds: ^bb38, ^bb41
    %220 = llvm.getelementptr %17[%214] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %221 = llvm.load volatile %220 {alignment = 1 : i64} : !llvm.ptr -> i32
    %222 = llvm.load %7 : !llvm.ptr -> i32
    %223 = llvm.load %3 : !llvm.ptr -> i32
    %c36_i64_94 = arith.constant 36 : i64
    %224 = arith.extui %223 : i32 to i64
    %225 = arith.addi %224, %c36_i64_94 : i64
    %c4_i64_95 = arith.constant 4 : i64
    %226 = arith.addi %225, %c4_i64_95 : i64
    %c0_i32_96 = arith.constant 0 : i32
    %227 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_96) : (!llvm.ptr, i32) -> i32
    %228 = arith.extui %227 : i32 to i64
    %c65536_i64_97 = arith.constant 65536 : i64
    %229 = arith.muli %228, %c65536_i64_97 : i64
    %230 = arith.cmpi ult, %226, %229 : i64
    cf.cond_br %230, ^bb42, ^bb43
  ^bb41:  // pred: ^bb38
    %c1_i32_98 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_98) : (i32) -> ()
    cf.br ^bb40
  ^bb42:  // 2 preds: ^bb40, ^bb43
    %231 = llvm.getelementptr %17[%225] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %232 = llvm.load volatile %231 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_99 = arith.constant 12 : i64
    %233 = arith.extui %232 : i32 to i64
    %234 = arith.addi %233, %c12_i64_99 : i64
    %c4_i64_100 = arith.constant 4 : i64
    %235 = arith.addi %234, %c4_i64_100 : i64
    %c0_i32_101 = arith.constant 0 : i32
    %236 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_101) : (!llvm.ptr, i32) -> i32
    %237 = arith.extui %236 : i32 to i64
    %c65536_i64_102 = arith.constant 65536 : i64
    %238 = arith.muli %237, %c65536_i64_102 : i64
    %239 = arith.cmpi ult, %235, %238 : i64
    cf.cond_br %239, ^bb44, ^bb45
  ^bb43:  // pred: ^bb40
    %c1_i32_103 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_103) : (i32) -> ()
    cf.br ^bb42
  ^bb44:  // 2 preds: ^bb42, ^bb45
    %240 = llvm.getelementptr %17[%234] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %241 = llvm.load volatile %240 {alignment = 1 : i64} : !llvm.ptr -> i32
    %242 = arith.cmpi ult, %241, %24 : i32
    cf.cond_br %242, ^bb46, ^bb47
  ^bb45:  // pred: ^bb42
    %c1_i32_104 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_104) : (i32) -> ()
    cf.br ^bb44
  ^bb46:  // 2 preds: ^bb44, ^bb47
    %243 = llvm.getelementptr inbounds %22[%241] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %244 = llvm.load %243 : !llvm.ptr -> !llvm.ptr
    %245 = llvm.ptrtoint %244 : !llvm.ptr to i64
    %c0_i64_105 = arith.constant 0 : i64
    %246 = arith.cmpi eq, %245, %c0_i64_105 : i64
    cf.cond_br %246, ^bb49, ^bb48
  ^bb47:  // pred: ^bb44
    %c3_i32_106 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_106) : (i32) -> ()
    cf.br ^bb46
  ^bb48:  // 2 preds: ^bb46, ^bb49
    %247 = llvm.getelementptr %244[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %248 = llvm.getelementptr %244[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %249 = llvm.getelementptr %244[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %250 = llvm.load %247 : !llvm.ptr -> !llvm.ptr
    %251 = llvm.load %249 : !llvm.ptr -> !llvm.ptr
    %252 = llvm.ptrtoint %250 : !llvm.ptr to i64
    %c0_i64_107 = arith.constant 0 : i64
    %253 = arith.cmpi eq, %252, %c0_i64_107 : i64
    cf.cond_br %253, ^bb51, ^bb50
  ^bb49:  // pred: ^bb46
    %c4_i32_108 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_108) : (i32) -> ()
    cf.br ^bb48
  ^bb50:  // 2 preds: ^bb48, ^bb51
    %254 = llvm.load %248 : !llvm.ptr -> i32
    %255 = arith.cmpi ne, %19, %254 : i32
    cf.cond_br %255, ^bb53, ^bb52
  ^bb51:  // pred: ^bb48
    %c3_i32_109 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_109) : (i32) -> ()
    cf.br ^bb50
  ^bb52:  // 2 preds: ^bb50, ^bb53
    %256 = llvm.call %250(%251, %211, %221, %222) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_110 = arith.constant 0 : i32
    %257 = arith.cmpi ne, %256, %c0_i32_110 : i32
    cf.cond_br %257, ^bb19, ^bb54
  ^bb53:  // pred: ^bb50
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb52
  ^bb54:  // pred: ^bb52
    cf.br ^bb34
  ^bb55:  // 2 preds: ^bb34, ^bb56
    %258 = llvm.getelementptr %17[%191] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %259 = llvm.load volatile %258 {alignment = 1 : i64} : !llvm.ptr -> i32
    %260 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %261 = arith.addi %260, %c12_i32 : i32
    %262 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_111 = arith.constant 4 : i64
    %263 = arith.extui %262 : i32 to i64
    %264 = arith.addi %263, %c4_i64_111 : i64
    %c4_i64_112 = arith.constant 4 : i64
    %265 = arith.addi %264, %c4_i64_112 : i64
    %c0_i32_113 = arith.constant 0 : i32
    %266 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_113) : (!llvm.ptr, i32) -> i32
    %267 = arith.extui %266 : i32 to i64
    %c65536_i64_114 = arith.constant 65536 : i64
    %268 = arith.muli %267, %c65536_i64_114 : i64
    %269 = arith.cmpi ult, %265, %268 : i64
    cf.cond_br %269, ^bb57, ^bb58
  ^bb56:  // pred: ^bb34
    %c1_i32_115 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_115) : (i32) -> ()
    cf.br ^bb55
  ^bb57:  // 2 preds: ^bb55, ^bb58
    %270 = llvm.getelementptr %17[%264] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %271 = llvm.load volatile %270 {alignment = 1 : i64} : !llvm.ptr -> i32
    %272 = arith.cmpi ult, %271, %29 : i32
    cf.cond_br %272, ^bb59, ^bb60
  ^bb58:  // pred: ^bb55
    %c1_i32_116 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_116) : (i32) -> ()
    cf.br ^bb57
  ^bb59:  // 2 preds: ^bb57, ^bb60
    %273 = llvm.getelementptr inbounds %27[%271] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %274 = llvm.load %273 : !llvm.ptr -> !llvm.ptr
    %275 = llvm.ptrtoint %274 : !llvm.ptr to i64
    %c0_i64_117 = arith.constant 0 : i64
    %276 = arith.cmpi eq, %275, %c0_i64_117 : i64
    cf.cond_br %276, ^bb62, ^bb61
  ^bb60:  // pred: ^bb57
    %c3_i32_118 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_118) : (i32) -> ()
    cf.br ^bb59
  ^bb61:  // 2 preds: ^bb59, ^bb62
    %277 = llvm.getelementptr %274[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %278 = llvm.getelementptr %274[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %279 = llvm.getelementptr %274[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %280 = llvm.load %277 : !llvm.ptr -> !llvm.ptr
    %281 = llvm.load %279 : !llvm.ptr -> !llvm.ptr
    %282 = llvm.ptrtoint %280 : !llvm.ptr to i64
    %c0_i64_119 = arith.constant 0 : i64
    %283 = arith.cmpi eq, %282, %c0_i64_119 : i64
    cf.cond_br %283, ^bb64, ^bb63
  ^bb62:  // pred: ^bb59
    %c4_i32_120 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_120) : (i32) -> ()
    cf.br ^bb61
  ^bb63:  // 2 preds: ^bb61, ^bb64
    %284 = llvm.load %278 : !llvm.ptr -> i32
    %285 = arith.cmpi ne, %26, %284 : i32
    cf.cond_br %285, ^bb66, ^bb65
  ^bb64:  // pred: ^bb61
    %c3_i32_121 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_121) : (i32) -> ()
    cf.br ^bb63
  ^bb65:  // 2 preds: ^bb63, ^bb66
    %286 = llvm.call %280(%281, %259, %261) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_122 = arith.constant 0 : i32
    %287 = arith.cmpi ne, %286, %c0_i32_122 : i32
    cf.cond_br %287, ^bb19, ^bb67
  ^bb66:  // pred: ^bb63
    %c5_i32_123 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_123) : (i32) -> ()
    cf.br ^bb65
  ^bb67:  // pred: ^bb65
    %288 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %289 = arith.addi %288, %c8_i32 : i32
    llvm.store %289, %0 : i32, !llvm.ptr
    %290 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_124 = arith.constant 8 : i32
    %291 = arith.addi %290, %c8_i32_124 : i32
    llvm.store %291, %1 : i32, !llvm.ptr
    %292 = llvm.load %6 : !llvm.ptr -> i32
    %293 = arith.cmpi eq, %291, %292 : i32
    %294 = arith.extui %293 : i1 to i32
    %c0_i32_125 = arith.constant 0 : i32
    %295 = arith.cmpi eq, %294, %c0_i32_125 : i32
    %296 = arith.extui %295 : i1 to i32
    %c0_i32_126 = arith.constant 0 : i32
    %297 = arith.cmpi ne, %296, %c0_i32_126 : i32
    cf.cond_br %297, ^bb33, ^bb68
  ^bb68:  // pred: ^bb67
    cf.br ^bb20
  ^bb69:  // 2 preds: ^bb21, ^bb70
    %298 = llvm.getelementptr %17[%130] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %299 = llvm.load volatile %298 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %299, %1 : i32, !llvm.ptr
    %c0_i32_127 = arith.constant 0 : i32
    %300 = arith.cmpi eq, %299, %c0_i32_127 : i32
    %301 = arith.extui %300 : i1 to i32
    %c0_i32_128 = arith.constant 0 : i32
    %302 = arith.cmpi ne, %301, %c0_i32_128 : i32
    cf.cond_br %302, ^bb20, ^bb71
  ^bb70:  // pred: ^bb21
    %c1_i32_129 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_129) : (i32) -> ()
    cf.br ^bb69
  ^bb71:  // pred: ^bb69
    %303 = llvm.load %1 : !llvm.ptr -> i32
    %c5_i32_130 = arith.constant 5 : i32
    %c31_i32_131 = arith.constant 31 : i32
    %304 = arith.cmpi ule, %c5_i32_130, %c31_i32_131 : i32
    %305 = scf.if %304 -> (i32) {
      %746 = arith.shli %303, %c5_i32_130 : i32
      scf.yield %746 : i32
    } else {
      %c0_i32_354 = arith.constant 0 : i32
      scf.yield %c0_i32_354 : i32
    }
    llvm.store %305, %8 : i32, !llvm.ptr
    %306 = llvm.load %1 : !llvm.ptr -> i32
    %c-1_i32_132 = arith.constant -1 : i32
    %307 = arith.addi %306, %c-1_i32_132 : i32
    %c134217727_i32 = arith.constant 134217727 : i32
    %308 = arith.andi %307, %c134217727_i32 : i32
    %c1_i32_133 = arith.constant 1 : i32
    %309 = arith.addi %308, %c1_i32_133 : i32
    llvm.store %309, %4 : i32, !llvm.ptr
    %310 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_134 = arith.constant 8 : i64
    %311 = arith.extui %310 : i32 to i64
    %312 = arith.addi %311, %c8_i64_134 : i64
    %c4_i64_135 = arith.constant 4 : i64
    %313 = arith.addi %312, %c4_i64_135 : i64
    %c0_i32_136 = arith.constant 0 : i32
    %314 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_136) : (!llvm.ptr, i32) -> i32
    %315 = arith.extui %314 : i32 to i64
    %c65536_i64_137 = arith.constant 65536 : i64
    %316 = arith.muli %315, %c65536_i64_137 : i64
    %317 = arith.cmpi ult, %313, %316 : i64
    cf.cond_br %317, ^bb72, ^bb73
  ^bb72:  // 2 preds: ^bb71, ^bb73
    %318 = llvm.getelementptr %17[%312] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %319 = llvm.load volatile %318 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %319, %9 : i32, !llvm.ptr
    %320 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_138 = arith.constant 0 : i64
    %321 = arith.extui %320 : i32 to i64
    %322 = arith.addi %321, %c0_i64_138 : i64
    %c4_i64_139 = arith.constant 4 : i64
    %323 = arith.addi %322, %c4_i64_139 : i64
    %c0_i32_140 = arith.constant 0 : i32
    %324 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_140) : (!llvm.ptr, i32) -> i32
    %325 = arith.extui %324 : i32 to i64
    %c65536_i64_141 = arith.constant 65536 : i64
    %326 = arith.muli %325, %c65536_i64_141 : i64
    %327 = arith.cmpi ult, %323, %326 : i64
    cf.cond_br %327, ^bb74, ^bb75
  ^bb73:  // pred: ^bb71
    %c1_i32_142 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_142) : (i32) -> ()
    cf.br ^bb72
  ^bb74:  // 2 preds: ^bb72, ^bb75
    %328 = llvm.getelementptr %17[%322] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %329 = llvm.load volatile %328 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %329, %0 : i32, !llvm.ptr
    %c0_i32_143 = arith.constant 0 : i32
    llvm.store %c0_i32_143, %7 : i32, !llvm.ptr
    cf.br ^bb77
  ^bb75:  // pred: ^bb72
    %c1_i32_144 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_144) : (i32) -> ()
    cf.br ^bb74
  ^bb76:  // pred: ^bb158
    cf.br ^bb20
  ^bb77:  // 2 preds: ^bb74, ^bb157
    %330 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32_145 = arith.constant 4 : i32
    %331 = arith.addi %330, %c4_i32_145 : i32
    %c0_i64_146 = arith.constant 0 : i64
    %332 = arith.extui %331 : i32 to i64
    %333 = arith.addi %332, %c0_i64_146 : i64
    %c4_i64_147 = arith.constant 4 : i64
    %334 = arith.addi %333, %c4_i64_147 : i64
    %c0_i32_148 = arith.constant 0 : i32
    %335 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_148) : (!llvm.ptr, i32) -> i32
    %336 = arith.extui %335 : i32 to i64
    %c65536_i64_149 = arith.constant 65536 : i64
    %337 = arith.muli %336, %c65536_i64_149 : i64
    %338 = arith.cmpi ult, %334, %337 : i64
    cf.cond_br %338, ^bb79, ^bb80
  ^bb78:  // 2 preds: ^bb79, ^bb98
    %339 = llvm.load %3 : !llvm.ptr -> i32
    %340 = llvm.load %5 : !llvm.ptr -> i32
    %341 = llvm.load %7 : !llvm.ptr -> i32
    %342 = arith.addi %340, %341 : i32
    llvm.store %342, %1 : i32, !llvm.ptr
    %c16_i32 = arith.constant 16 : i32
    %343 = arith.addi %342, %c16_i32 : i32
    %c0_i64_150 = arith.constant 0 : i64
    %344 = arith.extui %343 : i32 to i64
    %345 = arith.addi %344, %c0_i64_150 : i64
    %c4_i64_151 = arith.constant 4 : i64
    %346 = arith.addi %345, %c4_i64_151 : i64
    %c0_i32_152 = arith.constant 0 : i32
    %347 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_152) : (!llvm.ptr, i32) -> i32
    %348 = arith.extui %347 : i32 to i64
    %c65536_i64_153 = arith.constant 65536 : i64
    %349 = arith.muli %348, %c65536_i64_153 : i64
    %350 = arith.cmpi ult, %346, %349 : i64
    cf.cond_br %350, ^bb99, ^bb100
  ^bb79:  // 2 preds: ^bb77, ^bb80
    %351 = llvm.getelementptr %17[%333] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %352 = llvm.load volatile %351 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %352, %1 : i32, !llvm.ptr
    %c0_i32_154 = arith.constant 0 : i32
    %353 = arith.cmpi eq, %352, %c0_i32_154 : i32
    %354 = arith.extui %353 : i1 to i32
    %c0_i32_155 = arith.constant 0 : i32
    %355 = arith.cmpi ne, %354, %c0_i32_155 : i32
    cf.cond_br %355, ^bb78, ^bb81
  ^bb80:  // pred: ^bb77
    %c1_i32_156 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_156) : (i32) -> ()
    cf.br ^bb79
  ^bb81:  // pred: ^bb79
    %356 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i64_157 = arith.constant 32 : i64
    %357 = arith.extui %356 : i32 to i64
    %358 = arith.addi %357, %c32_i64_157 : i64
    %c4_i64_158 = arith.constant 4 : i64
    %359 = arith.addi %358, %c4_i64_158 : i64
    %c0_i32_159 = arith.constant 0 : i32
    %360 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_159) : (!llvm.ptr, i32) -> i32
    %361 = arith.extui %360 : i32 to i64
    %c65536_i64_160 = arith.constant 65536 : i64
    %362 = arith.muli %361, %c65536_i64_160 : i64
    %363 = arith.cmpi ult, %359, %362 : i64
    cf.cond_br %363, ^bb82, ^bb83
  ^bb82:  // 2 preds: ^bb81, ^bb83
    %364 = llvm.getelementptr %17[%358] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %365 = llvm.load volatile %364 {alignment = 1 : i64} : !llvm.ptr -> i32
    %366 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_161 = arith.constant 0 : i64
    %367 = arith.extui %366 : i32 to i64
    %368 = arith.addi %367, %c0_i64_161 : i64
    %c4_i64_162 = arith.constant 4 : i64
    %369 = arith.addi %368, %c4_i64_162 : i64
    %c0_i32_163 = arith.constant 0 : i32
    %370 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_163) : (!llvm.ptr, i32) -> i32
    %371 = arith.extui %370 : i32 to i64
    %c65536_i64_164 = arith.constant 65536 : i64
    %372 = arith.muli %371, %c65536_i64_164 : i64
    %373 = arith.cmpi ult, %369, %372 : i64
    cf.cond_br %373, ^bb84, ^bb85
  ^bb83:  // pred: ^bb81
    %c1_i32_165 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_165) : (i32) -> ()
    cf.br ^bb82
  ^bb84:  // 2 preds: ^bb82, ^bb85
    %374 = llvm.getelementptr %17[%368] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %375 = llvm.load volatile %374 {alignment = 1 : i64} : !llvm.ptr -> i32
    %376 = llvm.load %1 : !llvm.ptr -> i32
    %377 = llvm.load %3 : !llvm.ptr -> i32
    %c36_i64_166 = arith.constant 36 : i64
    %378 = arith.extui %377 : i32 to i64
    %379 = arith.addi %378, %c36_i64_166 : i64
    %c4_i64_167 = arith.constant 4 : i64
    %380 = arith.addi %379, %c4_i64_167 : i64
    %c0_i32_168 = arith.constant 0 : i32
    %381 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_168) : (!llvm.ptr, i32) -> i32
    %382 = arith.extui %381 : i32 to i64
    %c65536_i64_169 = arith.constant 65536 : i64
    %383 = arith.muli %382, %c65536_i64_169 : i64
    %384 = arith.cmpi ult, %380, %383 : i64
    cf.cond_br %384, ^bb86, ^bb87
  ^bb85:  // pred: ^bb82
    %c1_i32_170 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_170) : (i32) -> ()
    cf.br ^bb84
  ^bb86:  // 2 preds: ^bb84, ^bb87
    %385 = llvm.getelementptr %17[%379] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %386 = llvm.load volatile %385 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_171 = arith.constant 12 : i64
    %387 = arith.extui %386 : i32 to i64
    %388 = arith.addi %387, %c12_i64_171 : i64
    %c4_i64_172 = arith.constant 4 : i64
    %389 = arith.addi %388, %c4_i64_172 : i64
    %c0_i32_173 = arith.constant 0 : i32
    %390 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_173) : (!llvm.ptr, i32) -> i32
    %391 = arith.extui %390 : i32 to i64
    %c65536_i64_174 = arith.constant 65536 : i64
    %392 = arith.muli %391, %c65536_i64_174 : i64
    %393 = arith.cmpi ult, %389, %392 : i64
    cf.cond_br %393, ^bb88, ^bb89
  ^bb87:  // pred: ^bb84
    %c1_i32_175 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_175) : (i32) -> ()
    cf.br ^bb86
  ^bb88:  // 2 preds: ^bb86, ^bb89
    %394 = llvm.getelementptr %17[%388] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %395 = llvm.load volatile %394 {alignment = 1 : i64} : !llvm.ptr -> i32
    %396 = arith.cmpi ult, %395, %32 : i32
    cf.cond_br %396, ^bb90, ^bb91
  ^bb89:  // pred: ^bb86
    %c1_i32_176 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_176) : (i32) -> ()
    cf.br ^bb88
  ^bb90:  // 2 preds: ^bb88, ^bb91
    %397 = llvm.getelementptr inbounds %30[%395] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %398 = llvm.load %397 : !llvm.ptr -> !llvm.ptr
    %399 = llvm.ptrtoint %398 : !llvm.ptr to i64
    %c0_i64_177 = arith.constant 0 : i64
    %400 = arith.cmpi eq, %399, %c0_i64_177 : i64
    cf.cond_br %400, ^bb93, ^bb92
  ^bb91:  // pred: ^bb88
    %c3_i32_178 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_178) : (i32) -> ()
    cf.br ^bb90
  ^bb92:  // 2 preds: ^bb90, ^bb93
    %401 = llvm.getelementptr %398[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %402 = llvm.getelementptr %398[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %403 = llvm.getelementptr %398[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %404 = llvm.load %401 : !llvm.ptr -> !llvm.ptr
    %405 = llvm.load %403 : !llvm.ptr -> !llvm.ptr
    %406 = llvm.ptrtoint %404 : !llvm.ptr to i64
    %c0_i64_179 = arith.constant 0 : i64
    %407 = arith.cmpi eq, %406, %c0_i64_179 : i64
    cf.cond_br %407, ^bb95, ^bb94
  ^bb93:  // pred: ^bb90
    %c4_i32_180 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_180) : (i32) -> ()
    cf.br ^bb92
  ^bb94:  // 2 preds: ^bb92, ^bb95
    %408 = llvm.load %402 : !llvm.ptr -> i32
    %409 = arith.cmpi ne, %19, %408 : i32
    cf.cond_br %409, ^bb97, ^bb96
  ^bb95:  // pred: ^bb92
    %c3_i32_181 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_181) : (i32) -> ()
    cf.br ^bb94
  ^bb96:  // 2 preds: ^bb94, ^bb97
    %410 = llvm.call %404(%405, %365, %375, %376) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_182 = arith.constant 0 : i32
    %411 = arith.cmpi ne, %410, %c0_i32_182 : i32
    cf.cond_br %411, ^bb19, ^bb98
  ^bb97:  // pred: ^bb94
    %c5_i32_183 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_183) : (i32) -> ()
    cf.br ^bb96
  ^bb98:  // pred: ^bb96
    cf.br ^bb78
  ^bb99:  // 2 preds: ^bb78, ^bb100
    %412 = llvm.getelementptr %17[%345] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %413 = llvm.load volatile %412 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c28_i64_184 = arith.constant 28 : i64
    %414 = arith.extui %339 : i32 to i64
    %415 = arith.addi %414, %c28_i64_184 : i64
    %c4_i64_185 = arith.constant 4 : i64
    %416 = arith.addi %415, %c4_i64_185 : i64
    %c0_i32_186 = arith.constant 0 : i32
    %417 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_186) : (!llvm.ptr, i32) -> i32
    %418 = arith.extui %417 : i32 to i64
    %c65536_i64_187 = arith.constant 65536 : i64
    %419 = arith.muli %418, %c65536_i64_187 : i64
    %420 = arith.cmpi ult, %416, %419 : i64
    cf.cond_br %420, ^bb101, ^bb102
  ^bb100:  // pred: ^bb78
    %c1_i32_188 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_188) : (i32) -> ()
    cf.br ^bb99
  ^bb101:  // 2 preds: ^bb99, ^bb102
    %421 = llvm.getelementptr %17[%415] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %413, %421 {alignment = 1 : i64} : i32, !llvm.ptr
    %422 = llvm.load %3 : !llvm.ptr -> i32
    %423 = llvm.load %1 : !llvm.ptr -> i32
    %c28_i32 = arith.constant 28 : i32
    %424 = arith.addi %423, %c28_i32 : i32
    %c0_i64_189 = arith.constant 0 : i64
    %425 = arith.extui %424 : i32 to i64
    %426 = arith.addi %425, %c0_i64_189 : i64
    %c1_i64_190 = arith.constant 1 : i64
    %427 = arith.addi %426, %c1_i64_190 : i64
    %c0_i32_191 = arith.constant 0 : i32
    %428 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_191) : (!llvm.ptr, i32) -> i32
    %429 = arith.extui %428 : i32 to i64
    %c65536_i64_192 = arith.constant 65536 : i64
    %430 = arith.muli %429, %c65536_i64_192 : i64
    %431 = arith.cmpi ult, %427, %430 : i64
    cf.cond_br %431, ^bb103, ^bb104
  ^bb102:  // pred: ^bb99
    %c1_i32_193 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_193) : (i32) -> ()
    cf.br ^bb101
  ^bb103:  // 2 preds: ^bb101, ^bb104
    %432 = llvm.getelementptr %17[%426] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %433 = llvm.load volatile %432 {alignment = 1 : i64} : !llvm.ptr -> i8
    %434 = arith.extui %433 : i8 to i32
    %c44_i64_194 = arith.constant 44 : i64
    %435 = arith.extui %422 : i32 to i64
    %436 = arith.addi %435, %c44_i64_194 : i64
    %c1_i64_195 = arith.constant 1 : i64
    %437 = arith.addi %436, %c1_i64_195 : i64
    %c0_i32_196 = arith.constant 0 : i32
    %438 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_196) : (!llvm.ptr, i32) -> i32
    %439 = arith.extui %438 : i32 to i64
    %c65536_i64_197 = arith.constant 65536 : i64
    %440 = arith.muli %439, %c65536_i64_197 : i64
    %441 = arith.cmpi ult, %437, %440 : i64
    cf.cond_br %441, ^bb105, ^bb106
  ^bb104:  // pred: ^bb101
    %c1_i32_198 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_198) : (i32) -> ()
    cf.br ^bb103
  ^bb105:  // 2 preds: ^bb103, ^bb106
    %442 = llvm.getelementptr %17[%436] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %443 = arith.trunci %434 : i32 to i8
    llvm.store volatile %443, %442 {alignment = 1 : i64} : i8, !llvm.ptr
    %444 = llvm.load %3 : !llvm.ptr -> i32
    %445 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %446 = arith.addi %445, %c24_i32 : i32
    %c0_i64_199 = arith.constant 0 : i64
    %447 = arith.extui %446 : i32 to i64
    %448 = arith.addi %447, %c0_i64_199 : i64
    %c4_i64_200 = arith.constant 4 : i64
    %449 = arith.addi %448, %c4_i64_200 : i64
    %c0_i32_201 = arith.constant 0 : i32
    %450 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_201) : (!llvm.ptr, i32) -> i32
    %451 = arith.extui %450 : i32 to i64
    %c65536_i64_202 = arith.constant 65536 : i64
    %452 = arith.muli %451, %c65536_i64_202 : i64
    %453 = arith.cmpi ult, %449, %452 : i64
    cf.cond_br %453, ^bb107, ^bb108
  ^bb106:  // pred: ^bb103
    %c1_i32_203 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_203) : (i32) -> ()
    cf.br ^bb105
  ^bb107:  // 2 preds: ^bb105, ^bb108
    %454 = llvm.getelementptr %17[%448] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %455 = llvm.load volatile %454 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c40_i64_204 = arith.constant 40 : i64
    %456 = arith.extui %444 : i32 to i64
    %457 = arith.addi %456, %c40_i64_204 : i64
    %c4_i64_205 = arith.constant 4 : i64
    %458 = arith.addi %457, %c4_i64_205 : i64
    %c0_i32_206 = arith.constant 0 : i32
    %459 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_206) : (!llvm.ptr, i32) -> i32
    %460 = arith.extui %459 : i32 to i64
    %c65536_i64_207 = arith.constant 65536 : i64
    %461 = arith.muli %460, %c65536_i64_207 : i64
    %462 = arith.cmpi ult, %458, %461 : i64
    cf.cond_br %462, ^bb109, ^bb110
  ^bb108:  // pred: ^bb105
    %c1_i32_208 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_208) : (i32) -> ()
    cf.br ^bb107
  ^bb109:  // 2 preds: ^bb107, ^bb110
    %463 = llvm.getelementptr %17[%457] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %455, %463 {alignment = 1 : i64} : i32, !llvm.ptr
    %464 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32_209 = arith.constant 12 : i32
    %465 = arith.addi %464, %c12_i32_209 : i32
    %c0_i64_210 = arith.constant 0 : i64
    %466 = arith.extui %465 : i32 to i64
    %467 = arith.addi %466, %c0_i64_210 : i64
    %c4_i64_211 = arith.constant 4 : i64
    %468 = arith.addi %467, %c4_i64_211 : i64
    %c0_i32_212 = arith.constant 0 : i32
    %469 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_212) : (!llvm.ptr, i32) -> i32
    %470 = arith.extui %469 : i32 to i64
    %c65536_i64_213 = arith.constant 65536 : i64
    %471 = arith.muli %470, %c65536_i64_213 : i64
    %472 = arith.cmpi ult, %468, %471 : i64
    cf.cond_br %472, ^bb111, ^bb112
  ^bb110:  // pred: ^bb107
    %c1_i32_214 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_214) : (i32) -> ()
    cf.br ^bb109
  ^bb111:  // 2 preds: ^bb109, ^bb112
    %473 = llvm.getelementptr %17[%467] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %474 = llvm.load volatile %473 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %474, %6 : i32, !llvm.ptr
    %c0_i32_215 = arith.constant 0 : i32
    llvm.store %c0_i32_215, %10 : i32, !llvm.ptr
    %c0_i32_216 = arith.constant 0 : i32
    llvm.store %c0_i32_216, %11 : i32, !llvm.ptr
    %475 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_217 = arith.constant 8 : i32
    %476 = arith.addi %475, %c8_i32_217 : i32
    %c0_i64_218 = arith.constant 0 : i64
    %477 = arith.extui %476 : i32 to i64
    %478 = arith.addi %477, %c0_i64_218 : i64
    %c4_i64_219 = arith.constant 4 : i64
    %479 = arith.addi %478, %c4_i64_219 : i64
    %c0_i32_220 = arith.constant 0 : i32
    %480 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_220) : (!llvm.ptr, i32) -> i32
    %481 = arith.extui %480 : i32 to i64
    %c65536_i64_221 = arith.constant 65536 : i64
    %482 = arith.muli %481, %c65536_i64_221 : i64
    %483 = arith.cmpi ult, %479, %482 : i64
    cf.cond_br %483, ^bb116, ^bb117
  ^bb112:  // pred: ^bb109
    %c1_i32_222 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_222) : (i32) -> ()
    cf.br ^bb111
  ^bb113:  // 3 preds: ^bb114, ^bb116, ^bb118
    %484 = llvm.load %3 : !llvm.ptr -> i32
    %485 = llvm.load %6 : !llvm.ptr -> i32
    %c16_i64_223 = arith.constant 16 : i64
    %486 = arith.extui %484 : i32 to i64
    %487 = arith.addi %486, %c16_i64_223 : i64
    %c4_i64_224 = arith.constant 4 : i64
    %488 = arith.addi %487, %c4_i64_224 : i64
    %c0_i32_225 = arith.constant 0 : i32
    %489 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_225) : (!llvm.ptr, i32) -> i32
    %490 = arith.extui %489 : i32 to i64
    %c65536_i64_226 = arith.constant 65536 : i64
    %491 = arith.muli %490, %c65536_i64_226 : i64
    %492 = arith.cmpi ult, %488, %491 : i64
    cf.cond_br %492, ^bb123, ^bb124
  ^bb114:  // 3 preds: ^bb116, ^bb116, ^bb121
    %c1_i32_227 = arith.constant 1 : i32
    llvm.store %c1_i32_227, %11 : i32, !llvm.ptr
    cf.br ^bb113
  ^bb115:  // pred: ^bb116
    %493 = llvm.load %6 : !llvm.ptr -> i32
    %c3_i32_228 = arith.constant 3 : i32
    %c31_i32_229 = arith.constant 31 : i32
    %494 = arith.cmpi ule, %c3_i32_228, %c31_i32_229 : i32
    %495 = scf.if %494 -> (i32) {
      %746 = arith.shli %493, %c3_i32_228 : i32
      scf.yield %746 : i32
    } else {
      %c0_i32_354 = arith.constant 0 : i32
      scf.yield %c0_i32_354 : i32
    }
    llvm.store %495, %12 : i32, !llvm.ptr
    %c0_i32_230 = arith.constant 0 : i32
    llvm.store %c0_i32_230, %11 : i32, !llvm.ptr
    %496 = llvm.load %9 : !llvm.ptr -> i32
    %497 = llvm.load %12 : !llvm.ptr -> i32
    %498 = arith.addi %496, %497 : i32
    llvm.store %498, %12 : i32, !llvm.ptr
    %c0_i64_231 = arith.constant 0 : i64
    %499 = arith.extui %498 : i32 to i64
    %500 = arith.addi %499, %c0_i64_231 : i64
    %c4_i64_232 = arith.constant 4 : i64
    %501 = arith.addi %500, %c4_i64_232 : i64
    %c0_i32_233 = arith.constant 0 : i32
    %502 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_233) : (!llvm.ptr, i32) -> i32
    %503 = arith.extui %502 : i32 to i64
    %c65536_i64_234 = arith.constant 65536 : i64
    %504 = arith.muli %503, %c65536_i64_234 : i64
    %505 = arith.cmpi ult, %501, %504 : i64
    cf.cond_br %505, ^bb118, ^bb119
  ^bb116:  // 2 preds: ^bb111, ^bb117
    %506 = llvm.getelementptr %17[%478] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %507 = llvm.load volatile %506 {alignment = 1 : i64} : !llvm.ptr -> i32
    cf.switch %507 : i32, [
      default: ^bb114,
      0: ^bb114,
      1: ^bb115,
      2: ^bb113
    ]
  ^bb117:  // pred: ^bb111
    %c1_i32_235 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_235) : (i32) -> ()
    cf.br ^bb116
  ^bb118:  // 2 preds: ^bb115, ^bb119
    %508 = llvm.getelementptr %17[%500] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %509 = llvm.load volatile %508 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_236 = arith.constant 0 : i32
    %510 = arith.cmpi ne, %509, %c0_i32_236 : i32
    cf.cond_br %510, ^bb113, ^bb120
  ^bb119:  // pred: ^bb115
    %c1_i32_237 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_237) : (i32) -> ()
    cf.br ^bb118
  ^bb120:  // pred: ^bb118
    %511 = llvm.load %12 : !llvm.ptr -> i32
    %c4_i64_238 = arith.constant 4 : i64
    %512 = arith.extui %511 : i32 to i64
    %513 = arith.addi %512, %c4_i64_238 : i64
    %c4_i64_239 = arith.constant 4 : i64
    %514 = arith.addi %513, %c4_i64_239 : i64
    %c0_i32_240 = arith.constant 0 : i32
    %515 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_240) : (!llvm.ptr, i32) -> i32
    %516 = arith.extui %515 : i32 to i64
    %c65536_i64_241 = arith.constant 65536 : i64
    %517 = arith.muli %516, %c65536_i64_241 : i64
    %518 = arith.cmpi ult, %514, %517 : i64
    cf.cond_br %518, ^bb121, ^bb122
  ^bb121:  // 2 preds: ^bb120, ^bb122
    %519 = llvm.getelementptr %17[%513] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %520 = llvm.load volatile %519 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %520, %6 : i32, !llvm.ptr
    cf.br ^bb114
  ^bb122:  // pred: ^bb120
    %c1_i32_242 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_242) : (i32) -> ()
    cf.br ^bb121
  ^bb123:  // 2 preds: ^bb113, ^bb124
    %521 = llvm.getelementptr %17[%487] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %485, %521 {alignment = 1 : i64} : i32, !llvm.ptr
    %522 = llvm.load %3 : !llvm.ptr -> i32
    %523 = llvm.load %11 : !llvm.ptr -> i32
    %c12_i64_243 = arith.constant 12 : i64
    %524 = arith.extui %522 : i32 to i64
    %525 = arith.addi %524, %c12_i64_243 : i64
    %c4_i64_244 = arith.constant 4 : i64
    %526 = arith.addi %525, %c4_i64_244 : i64
    %c0_i32_245 = arith.constant 0 : i32
    %527 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_245) : (!llvm.ptr, i32) -> i32
    %528 = arith.extui %527 : i32 to i64
    %c65536_i64_246 = arith.constant 65536 : i64
    %529 = arith.muli %528, %c65536_i64_246 : i64
    %530 = arith.cmpi ult, %526, %529 : i64
    cf.cond_br %530, ^bb125, ^bb126
  ^bb124:  // pred: ^bb113
    %c1_i32_247 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_247) : (i32) -> ()
    cf.br ^bb123
  ^bb125:  // 2 preds: ^bb123, ^bb126
    %531 = llvm.getelementptr %17[%525] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %523, %531 {alignment = 1 : i64} : i32, !llvm.ptr
    %532 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32_248 = arith.constant 4 : i32
    %533 = arith.addi %532, %c4_i32_248 : i32
    %c0_i64_249 = arith.constant 0 : i64
    %534 = arith.extui %533 : i32 to i64
    %535 = arith.addi %534, %c0_i64_249 : i64
    %c4_i64_250 = arith.constant 4 : i64
    %536 = arith.addi %535, %c4_i64_250 : i64
    %c0_i32_251 = arith.constant 0 : i32
    %537 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_251) : (!llvm.ptr, i32) -> i32
    %538 = arith.extui %537 : i32 to i64
    %c65536_i64_252 = arith.constant 65536 : i64
    %539 = arith.muli %538, %c65536_i64_252 : i64
    %540 = arith.cmpi ult, %536, %539 : i64
    cf.cond_br %540, ^bb127, ^bb128
  ^bb126:  // pred: ^bb123
    %c1_i32_253 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_253) : (i32) -> ()
    cf.br ^bb125
  ^bb127:  // 2 preds: ^bb125, ^bb128
    %541 = llvm.getelementptr %17[%535] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %542 = llvm.load volatile %541 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %542, %6 : i32, !llvm.ptr
    %543 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_254 = arith.constant 0 : i64
    %544 = arith.extui %543 : i32 to i64
    %545 = arith.addi %544, %c0_i64_254 : i64
    %c4_i64_255 = arith.constant 4 : i64
    %546 = arith.addi %545, %c4_i64_255 : i64
    %c0_i32_256 = arith.constant 0 : i32
    %547 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_256) : (!llvm.ptr, i32) -> i32
    %548 = arith.extui %547 : i32 to i64
    %c65536_i64_257 = arith.constant 65536 : i64
    %549 = arith.muli %548, %c65536_i64_257 : i64
    %550 = arith.cmpi ult, %546, %549 : i64
    cf.cond_br %550, ^bb132, ^bb133
  ^bb128:  // pred: ^bb125
    %c1_i32_258 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_258) : (i32) -> ()
    cf.br ^bb127
  ^bb129:  // 3 preds: ^bb130, ^bb132, ^bb134
    %551 = llvm.load %3 : !llvm.ptr -> i32
    %552 = llvm.load %6 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %553 = arith.extui %551 : i32 to i64
    %554 = arith.addi %553, %c24_i64 : i64
    %c4_i64_259 = arith.constant 4 : i64
    %555 = arith.addi %554, %c4_i64_259 : i64
    %c0_i32_260 = arith.constant 0 : i32
    %556 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_260) : (!llvm.ptr, i32) -> i32
    %557 = arith.extui %556 : i32 to i64
    %c65536_i64_261 = arith.constant 65536 : i64
    %558 = arith.muli %557, %c65536_i64_261 : i64
    %559 = arith.cmpi ult, %555, %558 : i64
    cf.cond_br %559, ^bb139, ^bb140
  ^bb130:  // 3 preds: ^bb132, ^bb132, ^bb137
    %c1_i32_262 = arith.constant 1 : i32
    llvm.store %c1_i32_262, %10 : i32, !llvm.ptr
    cf.br ^bb129
  ^bb131:  // pred: ^bb132
    %560 = llvm.load %6 : !llvm.ptr -> i32
    %c3_i32_263 = arith.constant 3 : i32
    %c31_i32_264 = arith.constant 31 : i32
    %561 = arith.cmpi ule, %c3_i32_263, %c31_i32_264 : i32
    %562 = scf.if %561 -> (i32) {
      %746 = arith.shli %560, %c3_i32_263 : i32
      scf.yield %746 : i32
    } else {
      %c0_i32_354 = arith.constant 0 : i32
      scf.yield %c0_i32_354 : i32
    }
    llvm.store %562, %11 : i32, !llvm.ptr
    %563 = llvm.load %9 : !llvm.ptr -> i32
    %564 = llvm.load %11 : !llvm.ptr -> i32
    %565 = arith.addi %563, %564 : i32
    llvm.store %565, %11 : i32, !llvm.ptr
    %c0_i64_265 = arith.constant 0 : i64
    %566 = arith.extui %565 : i32 to i64
    %567 = arith.addi %566, %c0_i64_265 : i64
    %c4_i64_266 = arith.constant 4 : i64
    %568 = arith.addi %567, %c4_i64_266 : i64
    %c0_i32_267 = arith.constant 0 : i32
    %569 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_267) : (!llvm.ptr, i32) -> i32
    %570 = arith.extui %569 : i32 to i64
    %c65536_i64_268 = arith.constant 65536 : i64
    %571 = arith.muli %570, %c65536_i64_268 : i64
    %572 = arith.cmpi ult, %568, %571 : i64
    cf.cond_br %572, ^bb134, ^bb135
  ^bb132:  // 2 preds: ^bb127, ^bb133
    %573 = llvm.getelementptr %17[%545] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %574 = llvm.load volatile %573 {alignment = 1 : i64} : !llvm.ptr -> i32
    cf.switch %574 : i32, [
      default: ^bb130,
      0: ^bb130,
      1: ^bb131,
      2: ^bb129
    ]
  ^bb133:  // pred: ^bb127
    %c1_i32_269 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_269) : (i32) -> ()
    cf.br ^bb132
  ^bb134:  // 2 preds: ^bb131, ^bb135
    %575 = llvm.getelementptr %17[%567] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %576 = llvm.load volatile %575 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_270 = arith.constant 0 : i32
    %577 = arith.cmpi ne, %576, %c0_i32_270 : i32
    cf.cond_br %577, ^bb129, ^bb136
  ^bb135:  // pred: ^bb131
    %c1_i32_271 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_271) : (i32) -> ()
    cf.br ^bb134
  ^bb136:  // pred: ^bb134
    %578 = llvm.load %11 : !llvm.ptr -> i32
    %c4_i64_272 = arith.constant 4 : i64
    %579 = arith.extui %578 : i32 to i64
    %580 = arith.addi %579, %c4_i64_272 : i64
    %c4_i64_273 = arith.constant 4 : i64
    %581 = arith.addi %580, %c4_i64_273 : i64
    %c0_i32_274 = arith.constant 0 : i32
    %582 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_274) : (!llvm.ptr, i32) -> i32
    %583 = arith.extui %582 : i32 to i64
    %c65536_i64_275 = arith.constant 65536 : i64
    %584 = arith.muli %583, %c65536_i64_275 : i64
    %585 = arith.cmpi ult, %581, %584 : i64
    cf.cond_br %585, ^bb137, ^bb138
  ^bb137:  // 2 preds: ^bb136, ^bb138
    %586 = llvm.getelementptr %17[%580] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %587 = llvm.load volatile %586 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %587, %6 : i32, !llvm.ptr
    cf.br ^bb130
  ^bb138:  // pred: ^bb136
    %c1_i32_276 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_276) : (i32) -> ()
    cf.br ^bb137
  ^bb139:  // 2 preds: ^bb129, ^bb140
    %588 = llvm.getelementptr %17[%554] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %552, %588 {alignment = 1 : i64} : i32, !llvm.ptr
    %589 = llvm.load %3 : !llvm.ptr -> i32
    %590 = llvm.load %10 : !llvm.ptr -> i32
    %c20_i64_277 = arith.constant 20 : i64
    %591 = arith.extui %589 : i32 to i64
    %592 = arith.addi %591, %c20_i64_277 : i64
    %c4_i64_278 = arith.constant 4 : i64
    %593 = arith.addi %592, %c4_i64_278 : i64
    %c0_i32_279 = arith.constant 0 : i32
    %594 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_279) : (!llvm.ptr, i32) -> i32
    %595 = arith.extui %594 : i32 to i64
    %c65536_i64_280 = arith.constant 65536 : i64
    %596 = arith.muli %595, %c65536_i64_280 : i64
    %597 = arith.cmpi ult, %593, %596 : i64
    cf.cond_br %597, ^bb141, ^bb142
  ^bb140:  // pred: ^bb129
    %c1_i32_281 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_281) : (i32) -> ()
    cf.br ^bb139
  ^bb141:  // 2 preds: ^bb139, ^bb142
    %598 = llvm.getelementptr %17[%592] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %590, %598 {alignment = 1 : i64} : i32, !llvm.ptr
    %599 = llvm.load %9 : !llvm.ptr -> i32
    %600 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i32 = arith.constant 20 : i32
    %601 = arith.addi %600, %c20_i32 : i32
    %c0_i64_282 = arith.constant 0 : i64
    %602 = arith.extui %601 : i32 to i64
    %603 = arith.addi %602, %c0_i64_282 : i64
    %c4_i64_283 = arith.constant 4 : i64
    %604 = arith.addi %603, %c4_i64_283 : i64
    %c0_i32_284 = arith.constant 0 : i32
    %605 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_284) : (!llvm.ptr, i32) -> i32
    %606 = arith.extui %605 : i32 to i64
    %c65536_i64_285 = arith.constant 65536 : i64
    %607 = arith.muli %606, %c65536_i64_285 : i64
    %608 = arith.cmpi ult, %604, %607 : i64
    cf.cond_br %608, ^bb143, ^bb144
  ^bb142:  // pred: ^bb139
    %c1_i32_286 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_286) : (i32) -> ()
    cf.br ^bb141
  ^bb143:  // 2 preds: ^bb141, ^bb144
    %609 = llvm.getelementptr %17[%603] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %610 = llvm.load volatile %609 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i32_287 = arith.constant 3 : i32
    %c31_i32_288 = arith.constant 31 : i32
    %611 = arith.cmpi ule, %c3_i32_287, %c31_i32_288 : i32
    %612 = scf.if %611 -> (i32) {
      %746 = arith.shli %610, %c3_i32_287 : i32
      scf.yield %746 : i32
    } else {
      %c0_i32_354 = arith.constant 0 : i32
      scf.yield %c0_i32_354 : i32
    }
    %613 = arith.addi %599, %612 : i32
    llvm.store %613, %1 : i32, !llvm.ptr
    %c0_i64_289 = arith.constant 0 : i64
    %614 = arith.extui %613 : i32 to i64
    %615 = arith.addi %614, %c0_i64_289 : i64
    %c4_i64_290 = arith.constant 4 : i64
    %616 = arith.addi %615, %c4_i64_290 : i64
    %c0_i32_291 = arith.constant 0 : i32
    %617 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_291) : (!llvm.ptr, i32) -> i32
    %618 = arith.extui %617 : i32 to i64
    %c65536_i64_292 = arith.constant 65536 : i64
    %619 = arith.muli %618, %c65536_i64_292 : i64
    %620 = arith.cmpi ult, %616, %619 : i64
    cf.cond_br %620, ^bb145, ^bb146
  ^bb144:  // pred: ^bb141
    %c1_i32_293 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_293) : (i32) -> ()
    cf.br ^bb143
  ^bb145:  // 2 preds: ^bb143, ^bb146
    %621 = llvm.getelementptr %17[%615] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %622 = llvm.load volatile %621 {alignment = 1 : i64} : !llvm.ptr -> i32
    %623 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i32_294 = arith.constant 12 : i32
    %624 = arith.addi %623, %c12_i32_294 : i32
    %625 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_295 = arith.constant 4 : i64
    %626 = arith.extui %625 : i32 to i64
    %627 = arith.addi %626, %c4_i64_295 : i64
    %c4_i64_296 = arith.constant 4 : i64
    %628 = arith.addi %627, %c4_i64_296 : i64
    %c0_i32_297 = arith.constant 0 : i32
    %629 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_297) : (!llvm.ptr, i32) -> i32
    %630 = arith.extui %629 : i32 to i64
    %c65536_i64_298 = arith.constant 65536 : i64
    %631 = arith.muli %630, %c65536_i64_298 : i64
    %632 = arith.cmpi ult, %628, %631 : i64
    cf.cond_br %632, ^bb147, ^bb148
  ^bb146:  // pred: ^bb143
    %c1_i32_299 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_299) : (i32) -> ()
    cf.br ^bb145
  ^bb147:  // 2 preds: ^bb145, ^bb148
    %633 = llvm.getelementptr %17[%627] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %634 = llvm.load volatile %633 {alignment = 1 : i64} : !llvm.ptr -> i32
    %635 = arith.cmpi ult, %634, %35 : i32
    cf.cond_br %635, ^bb149, ^bb150
  ^bb148:  // pred: ^bb145
    %c1_i32_300 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_300) : (i32) -> ()
    cf.br ^bb147
  ^bb149:  // 2 preds: ^bb147, ^bb150
    %636 = llvm.getelementptr inbounds %33[%634] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %637 = llvm.load %636 : !llvm.ptr -> !llvm.ptr
    %638 = llvm.ptrtoint %637 : !llvm.ptr to i64
    %c0_i64_301 = arith.constant 0 : i64
    %639 = arith.cmpi eq, %638, %c0_i64_301 : i64
    cf.cond_br %639, ^bb152, ^bb151
  ^bb150:  // pred: ^bb147
    %c3_i32_302 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_302) : (i32) -> ()
    cf.br ^bb149
  ^bb151:  // 2 preds: ^bb149, ^bb152
    %640 = llvm.getelementptr %637[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %641 = llvm.getelementptr %637[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %642 = llvm.getelementptr %637[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %643 = llvm.load %640 : !llvm.ptr -> !llvm.ptr
    %644 = llvm.load %642 : !llvm.ptr -> !llvm.ptr
    %645 = llvm.ptrtoint %643 : !llvm.ptr to i64
    %c0_i64_303 = arith.constant 0 : i64
    %646 = arith.cmpi eq, %645, %c0_i64_303 : i64
    cf.cond_br %646, ^bb154, ^bb153
  ^bb152:  // pred: ^bb149
    %c4_i32_304 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_304) : (i32) -> ()
    cf.br ^bb151
  ^bb153:  // 2 preds: ^bb151, ^bb154
    %647 = llvm.load %641 : !llvm.ptr -> i32
    %648 = arith.cmpi ne, %26, %647 : i32
    cf.cond_br %648, ^bb156, ^bb155
  ^bb154:  // pred: ^bb151
    %c3_i32_305 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_305) : (i32) -> ()
    cf.br ^bb153
  ^bb155:  // 2 preds: ^bb153, ^bb156
    %649 = llvm.call %643(%644, %622, %624) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_306 = arith.constant 0 : i32
    %650 = arith.cmpi ne, %649, %c0_i32_306 : i32
    cf.cond_br %650, ^bb19, ^bb157
  ^bb156:  // pred: ^bb153
    %c5_i32_307 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_307) : (i32) -> ()
    cf.br ^bb155
  ^bb157:  // pred: ^bb155
    %651 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_308 = arith.constant 8 : i32
    %652 = arith.addi %651, %c8_i32_308 : i32
    llvm.store %652, %0 : i32, !llvm.ptr
    %653 = llvm.load %8 : !llvm.ptr -> i32
    %654 = llvm.load %7 : !llvm.ptr -> i32
    %c32_i32_309 = arith.constant 32 : i32
    %655 = arith.addi %654, %c32_i32_309 : i32
    llvm.store %655, %7 : i32, !llvm.ptr
    %656 = arith.cmpi eq, %653, %655 : i32
    %657 = arith.extui %656 : i1 to i32
    %c0_i32_310 = arith.constant 0 : i32
    %658 = arith.cmpi eq, %657, %c0_i32_310 : i32
    %659 = arith.extui %658 : i1 to i32
    %c0_i32_311 = arith.constant 0 : i32
    %660 = arith.cmpi ne, %659, %c0_i32_311 : i32
    cf.cond_br %660, ^bb77, ^bb158
  ^bb158:  // pred: ^bb157
    cf.br ^bb76
  ^bb159:  // 2 preds: ^bb20, ^bb160
    %661 = llvm.getelementptr %17[%122] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %662 = llvm.load volatile %661 {alignment = 1 : i64} : !llvm.ptr -> i32
    %663 = arith.cmpi uge, %119, %662 : i32
    %664 = arith.extui %663 : i1 to i32
    %c0_i32_312 = arith.constant 0 : i32
    %665 = arith.cmpi ne, %664, %c0_i32_312 : i32
    cf.cond_br %665, ^bb18, ^bb161
  ^bb160:  // pred: ^bb20
    %c1_i32_313 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_313) : (i32) -> ()
    cf.br ^bb159
  ^bb161:  // pred: ^bb159
    %666 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i64_314 = arith.constant 32 : i64
    %667 = arith.extui %666 : i32 to i64
    %668 = arith.addi %667, %c32_i64_314 : i64
    %c4_i64_315 = arith.constant 4 : i64
    %669 = arith.addi %668, %c4_i64_315 : i64
    %c0_i32_316 = arith.constant 0 : i32
    %670 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_316) : (!llvm.ptr, i32) -> i32
    %671 = arith.extui %670 : i32 to i64
    %c65536_i64_317 = arith.constant 65536 : i64
    %672 = arith.muli %671, %c65536_i64_317 : i64
    %673 = arith.cmpi ult, %669, %672 : i64
    cf.cond_br %673, ^bb162, ^bb163
  ^bb162:  // 2 preds: ^bb161, ^bb163
    %674 = llvm.getelementptr %17[%668] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %675 = llvm.load volatile %674 {alignment = 1 : i64} : !llvm.ptr -> i32
    %676 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_318 = arith.constant 0 : i64
    %677 = arith.extui %676 : i32 to i64
    %678 = arith.addi %677, %c0_i64_318 : i64
    %c4_i64_319 = arith.constant 4 : i64
    %679 = arith.addi %678, %c4_i64_319 : i64
    %c0_i32_320 = arith.constant 0 : i32
    %680 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_320) : (!llvm.ptr, i32) -> i32
    %681 = arith.extui %680 : i32 to i64
    %c65536_i64_321 = arith.constant 65536 : i64
    %682 = arith.muli %681, %c65536_i64_321 : i64
    %683 = arith.cmpi ult, %679, %682 : i64
    cf.cond_br %683, ^bb164, ^bb165
  ^bb163:  // pred: ^bb161
    %c1_i32_322 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_322) : (i32) -> ()
    cf.br ^bb162
  ^bb164:  // 2 preds: ^bb162, ^bb165
    %684 = llvm.getelementptr %17[%678] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %685 = llvm.load volatile %684 {alignment = 1 : i64} : !llvm.ptr -> i32
    %686 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i32_323 = arith.constant 3 : i32
    %c31_i32_324 = arith.constant 31 : i32
    %687 = arith.cmpi ule, %c3_i32_323, %c31_i32_324 : i32
    %688 = scf.if %687 -> (i32) {
      %746 = arith.shli %686, %c3_i32_323 : i32
      scf.yield %746 : i32
    } else {
      %c0_i32_354 = arith.constant 0 : i32
      scf.yield %c0_i32_354 : i32
    }
    %689 = arith.addi %685, %688 : i32
    llvm.store %689, %1 : i32, !llvm.ptr
    %c0_i64_325 = arith.constant 0 : i64
    %690 = arith.extui %689 : i32 to i64
    %691 = arith.addi %690, %c0_i64_325 : i64
    %c4_i64_326 = arith.constant 4 : i64
    %692 = arith.addi %691, %c4_i64_326 : i64
    %c0_i32_327 = arith.constant 0 : i32
    %693 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_327) : (!llvm.ptr, i32) -> i32
    %694 = arith.extui %693 : i32 to i64
    %c65536_i64_328 = arith.constant 65536 : i64
    %695 = arith.muli %694, %c65536_i64_328 : i64
    %696 = arith.cmpi ult, %692, %695 : i64
    cf.cond_br %696, ^bb166, ^bb167
  ^bb165:  // pred: ^bb162
    %c1_i32_329 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_329) : (i32) -> ()
    cf.br ^bb164
  ^bb166:  // 2 preds: ^bb164, ^bb167
    %697 = llvm.getelementptr %17[%691] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %698 = llvm.load volatile %697 {alignment = 1 : i64} : !llvm.ptr -> i32
    %699 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_330 = arith.constant 4 : i64
    %700 = arith.extui %699 : i32 to i64
    %701 = arith.addi %700, %c4_i64_330 : i64
    %c4_i64_331 = arith.constant 4 : i64
    %702 = arith.addi %701, %c4_i64_331 : i64
    %c0_i32_332 = arith.constant 0 : i32
    %703 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_332) : (!llvm.ptr, i32) -> i32
    %704 = arith.extui %703 : i32 to i64
    %c65536_i64_333 = arith.constant 65536 : i64
    %705 = arith.muli %704, %c65536_i64_333 : i64
    %706 = arith.cmpi ult, %702, %705 : i64
    cf.cond_br %706, ^bb168, ^bb169
  ^bb167:  // pred: ^bb164
    %c1_i32_334 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_334) : (i32) -> ()
    cf.br ^bb166
  ^bb168:  // 2 preds: ^bb166, ^bb169
    %707 = llvm.getelementptr %17[%701] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %708 = llvm.load volatile %707 {alignment = 1 : i64} : !llvm.ptr -> i32
    %709 = llvm.load %3 : !llvm.ptr -> i32
    %c36_i64_335 = arith.constant 36 : i64
    %710 = arith.extui %709 : i32 to i64
    %711 = arith.addi %710, %c36_i64_335 : i64
    %c4_i64_336 = arith.constant 4 : i64
    %712 = arith.addi %711, %c4_i64_336 : i64
    %c0_i32_337 = arith.constant 0 : i32
    %713 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_337) : (!llvm.ptr, i32) -> i32
    %714 = arith.extui %713 : i32 to i64
    %c65536_i64_338 = arith.constant 65536 : i64
    %715 = arith.muli %714, %c65536_i64_338 : i64
    %716 = arith.cmpi ult, %712, %715 : i64
    cf.cond_br %716, ^bb170, ^bb171
  ^bb169:  // pred: ^bb166
    %c1_i32_339 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_339) : (i32) -> ()
    cf.br ^bb168
  ^bb170:  // 2 preds: ^bb168, ^bb171
    %717 = llvm.getelementptr %17[%711] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %718 = llvm.load volatile %717 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_340 = arith.constant 12 : i64
    %719 = arith.extui %718 : i32 to i64
    %720 = arith.addi %719, %c12_i64_340 : i64
    %c4_i64_341 = arith.constant 4 : i64
    %721 = arith.addi %720, %c4_i64_341 : i64
    %c0_i32_342 = arith.constant 0 : i32
    %722 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_342) : (!llvm.ptr, i32) -> i32
    %723 = arith.extui %722 : i32 to i64
    %c65536_i64_343 = arith.constant 65536 : i64
    %724 = arith.muli %723, %c65536_i64_343 : i64
    %725 = arith.cmpi ult, %721, %724 : i64
    cf.cond_br %725, ^bb172, ^bb173
  ^bb171:  // pred: ^bb168
    %c1_i32_344 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_344) : (i32) -> ()
    cf.br ^bb170
  ^bb172:  // 2 preds: ^bb170, ^bb173
    %726 = llvm.getelementptr %17[%720] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %727 = llvm.load volatile %726 {alignment = 1 : i64} : !llvm.ptr -> i32
    %728 = arith.cmpi ult, %727, %38 : i32
    cf.cond_br %728, ^bb174, ^bb175
  ^bb173:  // pred: ^bb170
    %c1_i32_345 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_345) : (i32) -> ()
    cf.br ^bb172
  ^bb174:  // 2 preds: ^bb172, ^bb175
    %729 = llvm.getelementptr inbounds %36[%727] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %730 = llvm.load %729 : !llvm.ptr -> !llvm.ptr
    %731 = llvm.ptrtoint %730 : !llvm.ptr to i64
    %c0_i64_346 = arith.constant 0 : i64
    %732 = arith.cmpi eq, %731, %c0_i64_346 : i64
    cf.cond_br %732, ^bb177, ^bb176
  ^bb175:  // pred: ^bb172
    %c3_i32_347 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_347) : (i32) -> ()
    cf.br ^bb174
  ^bb176:  // 2 preds: ^bb174, ^bb177
    %733 = llvm.getelementptr %730[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %734 = llvm.getelementptr %730[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %735 = llvm.getelementptr %730[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %736 = llvm.load %733 : !llvm.ptr -> !llvm.ptr
    %737 = llvm.load %735 : !llvm.ptr -> !llvm.ptr
    %738 = llvm.ptrtoint %736 : !llvm.ptr to i64
    %c0_i64_348 = arith.constant 0 : i64
    %739 = arith.cmpi eq, %738, %c0_i64_348 : i64
    cf.cond_br %739, ^bb179, ^bb178
  ^bb177:  // pred: ^bb174
    %c4_i32_349 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_349) : (i32) -> ()
    cf.br ^bb176
  ^bb178:  // 2 preds: ^bb176, ^bb179
    %740 = llvm.load %734 : !llvm.ptr -> i32
    %741 = arith.cmpi ne, %19, %740 : i32
    cf.cond_br %741, ^bb181, ^bb180
  ^bb179:  // pred: ^bb176
    %c3_i32_350 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_350) : (i32) -> ()
    cf.br ^bb178
  ^bb180:  // 2 preds: ^bb178, ^bb181
    %742 = llvm.call %736(%737, %675, %698, %708) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_351 = arith.constant 0 : i32
    %743 = arith.cmpi eq, %742, %c0_i32_351 : i32
    %744 = arith.extui %743 : i1 to i32
    %c0_i32_352 = arith.constant 0 : i32
    %745 = arith.cmpi ne, %744, %c0_i32_352 : i32
    cf.cond_br %745, ^bb18, ^bb182
  ^bb181:  // pred: ^bb178
    %c5_i32_353 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_353) : (i32) -> ()
    cf.br ^bb180
  ^bb182:  // pred: ^bb180
    cf.br ^bb19
  }
  func.func @f151(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %1 : !llvm.ptr -> i32
    %6 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %7 = arith.extui %6 : i32 to i64
    %8 = arith.addi %7, %c0_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %9 = arith.addi %8, %c4_i64 : i64
    %c0_i32 = arith.constant 0 : i32
    %10 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32) : (!llvm.ptr, i32) -> i32
    %11 = arith.extui %10 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %12 = arith.muli %11, %c65536_i64 : i64
    %13 = arith.cmpi ult, %9, %12 : i64
    cf.cond_br %13, ^bb3, ^bb4
  ^bb2(%14: i32):  // pred: ^bb5
    return %14 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %15 = llvm.getelementptr %4[%8] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %16 = llvm.load volatile %15 {alignment = 1 : i64} : !llvm.ptr -> i32
    %17 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_1 = arith.constant 4 : i64
    %18 = arith.extui %17 : i32 to i64
    %19 = arith.addi %18, %c4_i64_1 : i64
    %c4_i64_2 = arith.constant 4 : i64
    %20 = arith.addi %19, %c4_i64_2 : i64
    %c0_i32_3 = arith.constant 0 : i32
    %21 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_3) : (!llvm.ptr, i32) -> i32
    %22 = arith.extui %21 : i32 to i64
    %c65536_i64_4 = arith.constant 65536 : i64
    %23 = arith.muli %22, %c65536_i64_4 : i64
    %24 = arith.cmpi ult, %20, %23 : i64
    cf.cond_br %24, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c1_i32_5 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_5) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %25 = llvm.getelementptr %4[%19] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %26 = llvm.load volatile %25 {alignment = 1 : i64} : !llvm.ptr -> i32
    %27 = call @f147(%arg0, %5, %16, %26) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%27 : i32)
  ^bb6:  // pred: ^bb3
    %c1_i32_6 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_6) : (i32) -> ()
    cf.br ^bb5
  }
  func.func @f152(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %4 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %7 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %8 = arith.subi %7, %c32_i32 : i32
    llvm.store %8, %1 : i32, !llvm.ptr
    llvm.store %8, %3 : i32, !llvm.ptr
    %9 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_1 = arith.constant 1 : i32
    %c4_i64 = arith.constant 4 : i64
    %10 = arith.extui %9 : i32 to i64
    %11 = arith.addi %10, %c4_i64 : i64
    %c4_i64_2 = arith.constant 4 : i64
    %12 = arith.addi %11, %c4_i64_2 : i64
    %c0_i32_3 = arith.constant 0 : i32
    %13 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_3) : (!llvm.ptr, i32) -> i32
    %14 = arith.extui %13 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %15 = arith.muli %14, %c65536_i64 : i64
    %16 = arith.cmpi ult, %12, %15 : i64
    cf.cond_br %16, ^bb3, ^bb4
  ^bb2:  // no predecessors
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %17 = llvm.getelementptr %6[%11] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_1, %17 {alignment = 1 : i64} : i32, !llvm.ptr
    %18 = llvm.load %1 : !llvm.ptr -> i32
    %c1051116_i32 = arith.constant 1051116 : i32
    %c0_i64 = arith.constant 0 : i64
    %19 = arith.extui %18 : i32 to i64
    %20 = arith.addi %19, %c0_i64 : i64
    %c4_i64_4 = arith.constant 4 : i64
    %21 = arith.addi %20, %c4_i64_4 : i64
    %c0_i32_5 = arith.constant 0 : i32
    %22 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_5) : (!llvm.ptr, i32) -> i32
    %23 = arith.extui %22 : i32 to i64
    %c65536_i64_6 = arith.constant 65536 : i64
    %24 = arith.muli %23, %c65536_i64_6 : i64
    %25 = arith.cmpi ult, %21, %24 : i64
    cf.cond_br %25, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c1_i32_7 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_7) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %26 = llvm.getelementptr %6[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1051116_i32, %26 {alignment = 1 : i64} : i32, !llvm.ptr
    %27 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %c12_i64 = arith.constant 12 : i64
    %28 = arith.extui %27 : i32 to i64
    %29 = arith.addi %28, %c12_i64 : i64
    %c8_i64 = arith.constant 8 : i64
    %30 = arith.addi %29, %c8_i64 : i64
    %c0_i32_8 = arith.constant 0 : i32
    %31 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_8) : (!llvm.ptr, i32) -> i32
    %32 = arith.extui %31 : i32 to i64
    %c65536_i64_9 = arith.constant 65536 : i64
    %33 = arith.muli %32, %c65536_i64_9 : i64
    %34 = arith.cmpi ult, %30, %33 : i64
    cf.cond_br %34, ^bb7, ^bb8
  ^bb6:  // pred: ^bb3
    %c1_i32_10 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_10) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %35 = llvm.getelementptr %6[%29] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64, %35 {alignment = 1 : i64} : i64, !llvm.ptr
    %36 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i32 = arith.constant 20 : i32
    %37 = arith.extui %c20_i32 : i32 to i64
    %c32_i64 = arith.constant 32 : i64
    %c63_i64 = arith.constant 63 : i64
    %38 = arith.cmpi ule, %c32_i64, %c63_i64 : i64
    %39 = scf.if %38 -> (i64) {
      %63 = arith.shli %37, %c32_i64 : i64
      scf.yield %63 : i64
    } else {
      %c0_i64_21 = arith.constant 0 : i64
      scf.yield %c0_i64_21 : i64
    }
    %c1051140_i32 = arith.constant 1051140 : i32
    %40 = arith.extui %c1051140_i32 : i32 to i64
    %41 = arith.ori %39, %40 : i64
    %c24_i64 = arith.constant 24 : i64
    %42 = arith.extui %36 : i32 to i64
    %43 = arith.addi %42, %c24_i64 : i64
    %c8_i64_11 = arith.constant 8 : i64
    %44 = arith.addi %43, %c8_i64_11 : i64
    %c0_i32_12 = arith.constant 0 : i32
    %45 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_12) : (!llvm.ptr, i32) -> i32
    %46 = arith.extui %45 : i32 to i64
    %c65536_i64_13 = arith.constant 65536 : i64
    %47 = arith.muli %46, %c65536_i64_13 : i64
    %48 = arith.cmpi ult, %44, %47 : i64
    cf.cond_br %48, ^bb9, ^bb10
  ^bb8:  // pred: ^bb5
    %c1_i32_14 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_14) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %49 = llvm.getelementptr %6[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %41, %49 {alignment = 1 : i64} : i64, !llvm.ptr
    %50 = llvm.load %1 : !llvm.ptr -> i32
    %51 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %52 = arith.addi %51, %c24_i32 : i32
    %c8_i64_15 = arith.constant 8 : i64
    %53 = arith.extui %50 : i32 to i64
    %54 = arith.addi %53, %c8_i64_15 : i64
    %c4_i64_16 = arith.constant 4 : i64
    %55 = arith.addi %54, %c4_i64_16 : i64
    %c0_i32_17 = arith.constant 0 : i32
    %56 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_17) : (!llvm.ptr, i32) -> i32
    %57 = arith.extui %56 : i32 to i64
    %c65536_i64_18 = arith.constant 65536 : i64
    %58 = arith.muli %57, %c65536_i64_18 : i64
    %59 = arith.cmpi ult, %55, %58 : i64
    cf.cond_br %59, ^bb11, ^bb12
  ^bb10:  // pred: ^bb7
    %c1_i32_19 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_19) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %60 = llvm.getelementptr %6[%54] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %52, %60 {alignment = 1 : i64} : i32, !llvm.ptr
    %61 = llvm.load %1 : !llvm.ptr -> i32
    %62 = llvm.load %0 : !llvm.ptr -> i32
    call @f148(%arg0, %61, %62) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb12:  // pred: ^bb9
    %c1_i32_20 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_20) : (i32) -> ()
    cf.br ^bb11
  }
  func.func @f153(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg6, %5 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %c1_i32_9 = arith.constant 1 : i32
    %10 = llvm.alloca %c1_i32_9 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %10 : i32, !llvm.ptr
    %c1_i32_10 = arith.constant 1 : i32
    %11 = llvm.alloca %c1_i32_10 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %11 : i32, !llvm.ptr
    %c1_i32_11 = arith.constant 1 : i32
    %12 = llvm.alloca %c1_i32_11 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %12 : i32, !llvm.ptr
    %13 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %13[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %16 = llvm.getelementptr %arg0[12] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %16 : !llvm.ptr -> i32
    %18 = llvm.getelementptr %arg0[304] : (!llvm.ptr) -> !llvm.ptr, i8
    %19 = llvm.getelementptr %arg0[312] : (!llvm.ptr) -> !llvm.ptr, i8
    %20 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %21 = llvm.load %19 : !llvm.ptr -> i64
    %22 = arith.trunci %21 : i64 to i32
    %23 = llvm.getelementptr %arg0[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %24 = llvm.load %23 : !llvm.ptr -> i32
    %25 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %26 = llvm.load %19 : !llvm.ptr -> i64
    %27 = arith.trunci %26 : i64 to i32
    %28 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %29 = llvm.load %19 : !llvm.ptr -> i64
    %30 = arith.trunci %29 : i64 to i32
    %31 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %32 = llvm.load %19 : !llvm.ptr -> i64
    %33 = arith.trunci %32 : i64 to i32
    %34 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %35 = llvm.load %19 : !llvm.ptr -> i64
    %36 = arith.trunci %35 : i64 to i32
    %37 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %38 = llvm.load %19 : !llvm.ptr -> i64
    %39 = arith.trunci %38 : i64 to i32
    %40 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %41 = llvm.load %19 : !llvm.ptr -> i64
    %42 = arith.trunci %41 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %43 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_12 = arith.constant 0 : i32
    %44 = arith.cmpi ne, %43, %c0_i32_12 : i32
    cf.cond_br %44, ^bb4, ^bb5
  ^bb2(%45: i32):  // 10 preds: ^bb47, ^bb56, ^bb58, ^bb69, ^bb85, ^bb110, ^bb113, ^bb137, ^bb163, ^bb166
    return %45 : i32
  ^bb3:  // 2 preds: ^bb6, ^bb8
    %46 = llvm.load %7 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %47 = arith.andi %46, %c4_i32 : i32
    %c0_i32_13 = arith.constant 0 : i32
    %48 = arith.cmpi ne, %47, %c0_i32_13 : i32
    cf.cond_br %48, ^bb11, ^bb12
  ^bb4:  // pred: ^bb1
    %c43_i32 = arith.constant 43 : i32
    %c1114112_i32 = arith.constant 1114112 : i32
    %49 = llvm.load %0 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %50 = arith.extui %49 : i32 to i64
    %51 = arith.addi %50, %c28_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %52 = arith.addi %51, %c4_i64 : i64
    %c0_i32_14 = arith.constant 0 : i32
    %53 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_14) : (!llvm.ptr, i32) -> i32
    %54 = arith.extui %53 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %55 = arith.muli %54, %c65536_i64 : i64
    %56 = arith.cmpi ult, %52, %55 : i64
    cf.cond_br %56, ^bb8, ^bb9
  ^bb5:  // pred: ^bb1
    %57 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i32_15 = arith.constant 1 : i32
    %58 = arith.addi %57, %c1_i32_15 : i32
    llvm.store %58, %6 : i32, !llvm.ptr
    %59 = llvm.load %0 : !llvm.ptr -> i32
    %c28_i64_16 = arith.constant 28 : i64
    %60 = arith.extui %59 : i32 to i64
    %61 = arith.addi %60, %c28_i64_16 : i64
    %c4_i64_17 = arith.constant 4 : i64
    %62 = arith.addi %61, %c4_i64_17 : i64
    %c0_i32_18 = arith.constant 0 : i32
    %63 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_18) : (!llvm.ptr, i32) -> i32
    %64 = arith.extui %63 : i32 to i64
    %c65536_i64_19 = arith.constant 65536 : i64
    %65 = arith.muli %64, %c65536_i64_19 : i64
    %66 = arith.cmpi ult, %62, %65 : i64
    cf.cond_br %66, ^bb6, ^bb7
  ^bb6:  // 2 preds: ^bb5, ^bb7
    %67 = llvm.getelementptr %15[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %68 = llvm.load volatile %67 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %68, %7 : i32, !llvm.ptr
    %c45_i32 = arith.constant 45 : i32
    llvm.store %c45_i32, %8 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb7:  // pred: ^bb5
    %c1_i32_20 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_20) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // 2 preds: ^bb4, ^bb9
    %69 = llvm.getelementptr %15[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %70 = llvm.load volatile %69 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %70, %7 : i32, !llvm.ptr
    %c1_i32_21 = arith.constant 1 : i32
    %71 = arith.andi %70, %c1_i32_21 : i32
    llvm.store %71, %1 : i32, !llvm.ptr
    %c0_i32_22 = arith.constant 0 : i32
    %72 = arith.cmpi ne, %71, %c0_i32_22 : i32
    %73 = arith.select %72, %c43_i32, %c1114112_i32 : i32
    llvm.store %73, %8 : i32, !llvm.ptr
    %74 = llvm.load %1 : !llvm.ptr -> i32
    %75 = llvm.load %5 : !llvm.ptr -> i32
    %76 = arith.addi %74, %75 : i32
    llvm.store %76, %6 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb9:  // pred: ^bb4
    %c1_i32_23 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_23) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // 2 preds: ^bb12, ^bb13
    %77 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %78 = arith.extui %77 : i32 to i64
    %79 = arith.addi %78, %c0_i64 : i64
    %c4_i64_24 = arith.constant 4 : i64
    %80 = arith.addi %79, %c4_i64_24 : i64
    %c0_i32_25 = arith.constant 0 : i32
    %81 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_25) : (!llvm.ptr, i32) -> i32
    %82 = arith.extui %81 : i32 to i64
    %c65536_i64_26 = arith.constant 65536 : i64
    %83 = arith.muli %82, %c65536_i64_26 : i64
    %84 = arith.cmpi ult, %80, %83 : i64
    cf.cond_br %84, ^bb39, ^bb40
  ^bb11:  // pred: ^bb3
    %85 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %86 = arith.cmpi ult, %85, %c16_i32 : i32
    %87 = arith.extui %86 : i1 to i32
    %c0_i32_27 = arith.constant 0 : i32
    %88 = arith.cmpi ne, %87, %c0_i32_27 : i32
    cf.cond_br %88, ^bb14, ^bb15
  ^bb12:  // pred: ^bb3
    %c0_i32_28 = arith.constant 0 : i32
    llvm.store %c0_i32_28, %2 : i32, !llvm.ptr
    cf.br ^bb10
  ^bb13:  // 4 preds: ^bb15, ^bb17, ^bb18, ^bb33
    %89 = llvm.load %1 : !llvm.ptr -> i32
    %90 = llvm.load %6 : !llvm.ptr -> i32
    %91 = arith.addi %89, %90 : i32
    llvm.store %91, %6 : i32, !llvm.ptr
    cf.br ^bb10
  ^bb14:  // pred: ^bb11
    %92 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_29 = arith.constant 0 : i32
    %93 = arith.cmpi ne, %92, %c0_i32_29 : i32
    cf.cond_br %93, ^bb16, ^bb17
  ^bb15:  // pred: ^bb11
    %94 = llvm.load %2 : !llvm.ptr -> i32
    %95 = llvm.load %3 : !llvm.ptr -> i32
    %96 = call @f154(%arg0, %94, %95) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %96, %1 : i32, !llvm.ptr
    cf.br ^bb13
  ^bb16:  // pred: ^bb14
    %97 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %98 = arith.andi %97, %c3_i32 : i32
    llvm.store %98, %9 : i32, !llvm.ptr
    %99 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32_30 = arith.constant 4 : i32
    %100 = arith.cmpi uge, %99, %c4_i32_30 : i32
    %101 = arith.extui %100 : i1 to i32
    %c0_i32_31 = arith.constant 0 : i32
    %102 = arith.cmpi ne, %101, %c0_i32_31 : i32
    cf.cond_br %102, ^bb19, ^bb20
  ^bb17:  // pred: ^bb14
    %c0_i32_32 = arith.constant 0 : i32
    llvm.store %c0_i32_32, %1 : i32, !llvm.ptr
    cf.br ^bb13
  ^bb18:  // 2 preds: ^bb20, ^bb21
    %103 = llvm.load %9 : !llvm.ptr -> i32
    %c0_i32_33 = arith.constant 0 : i32
    %104 = arith.cmpi eq, %103, %c0_i32_33 : i32
    %105 = arith.extui %104 : i1 to i32
    %c0_i32_34 = arith.constant 0 : i32
    %106 = arith.cmpi ne, %105, %c0_i32_34 : i32
    cf.cond_br %106, ^bb13, ^bb32
  ^bb19:  // pred: ^bb16
    %107 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %108 = arith.andi %107, %c12_i32 : i32
    llvm.store %108, %11 : i32, !llvm.ptr
    %c0_i32_35 = arith.constant 0 : i32
    llvm.store %c0_i32_35, %1 : i32, !llvm.ptr
    %c0_i32_36 = arith.constant 0 : i32
    llvm.store %c0_i32_36, %10 : i32, !llvm.ptr
    cf.br ^bb22
  ^bb20:  // pred: ^bb16
    %c0_i32_37 = arith.constant 0 : i32
    llvm.store %c0_i32_37, %1 : i32, !llvm.ptr
    %c0_i32_38 = arith.constant 0 : i32
    llvm.store %c0_i32_38, %10 : i32, !llvm.ptr
    cf.br ^bb18
  ^bb21:  // pred: ^bb31
    cf.br ^bb18
  ^bb22:  // 2 preds: ^bb19, ^bb29
    %109 = llvm.load %1 : !llvm.ptr -> i32
    %110 = llvm.load %2 : !llvm.ptr -> i32
    %111 = llvm.load %10 : !llvm.ptr -> i32
    %112 = arith.addi %110, %111 : i32
    llvm.store %112, %12 : i32, !llvm.ptr
    %c0_i64_39 = arith.constant 0 : i64
    %113 = arith.extui %112 : i32 to i64
    %114 = arith.addi %113, %c0_i64_39 : i64
    %c1_i64 = arith.constant 1 : i64
    %115 = arith.addi %114, %c1_i64 : i64
    %c0_i32_40 = arith.constant 0 : i32
    %116 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_40) : (!llvm.ptr, i32) -> i32
    %117 = arith.extui %116 : i32 to i64
    %c65536_i64_41 = arith.constant 65536 : i64
    %118 = arith.muli %117, %c65536_i64_41 : i64
    %119 = arith.cmpi ult, %115, %118 : i64
    cf.cond_br %119, ^bb23, ^bb24
  ^bb23:  // 2 preds: ^bb22, ^bb24
    %120 = llvm.getelementptr %15[%114] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %121 = llvm.load volatile %120 {alignment = 1 : i64} : !llvm.ptr -> i8
    %122 = arith.extsi %121 : i8 to i32
    %c-65_i32 = arith.constant -65 : i32
    %123 = arith.cmpi sgt, %122, %c-65_i32 : i32
    %124 = arith.extui %123 : i1 to i32
    %125 = arith.addi %109, %124 : i32
    %126 = llvm.load %12 : !llvm.ptr -> i32
    %c1_i32_42 = arith.constant 1 : i32
    %127 = arith.addi %126, %c1_i32_42 : i32
    %c0_i64_43 = arith.constant 0 : i64
    %128 = arith.extui %127 : i32 to i64
    %129 = arith.addi %128, %c0_i64_43 : i64
    %c1_i64_44 = arith.constant 1 : i64
    %130 = arith.addi %129, %c1_i64_44 : i64
    %c0_i32_45 = arith.constant 0 : i32
    %131 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_45) : (!llvm.ptr, i32) -> i32
    %132 = arith.extui %131 : i32 to i64
    %c65536_i64_46 = arith.constant 65536 : i64
    %133 = arith.muli %132, %c65536_i64_46 : i64
    %134 = arith.cmpi ult, %130, %133 : i64
    cf.cond_br %134, ^bb25, ^bb26
  ^bb24:  // pred: ^bb22
    %c1_i32_47 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_47) : (i32) -> ()
    cf.br ^bb23
  ^bb25:  // 2 preds: ^bb23, ^bb26
    %135 = llvm.getelementptr %15[%129] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %136 = llvm.load volatile %135 {alignment = 1 : i64} : !llvm.ptr -> i8
    %137 = arith.extsi %136 : i8 to i32
    %c-65_i32_48 = arith.constant -65 : i32
    %138 = arith.cmpi sgt, %137, %c-65_i32_48 : i32
    %139 = arith.extui %138 : i1 to i32
    %140 = arith.addi %125, %139 : i32
    %141 = llvm.load %12 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %142 = arith.addi %141, %c2_i32 : i32
    %c0_i64_49 = arith.constant 0 : i64
    %143 = arith.extui %142 : i32 to i64
    %144 = arith.addi %143, %c0_i64_49 : i64
    %c1_i64_50 = arith.constant 1 : i64
    %145 = arith.addi %144, %c1_i64_50 : i64
    %c0_i32_51 = arith.constant 0 : i32
    %146 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_51) : (!llvm.ptr, i32) -> i32
    %147 = arith.extui %146 : i32 to i64
    %c65536_i64_52 = arith.constant 65536 : i64
    %148 = arith.muli %147, %c65536_i64_52 : i64
    %149 = arith.cmpi ult, %145, %148 : i64
    cf.cond_br %149, ^bb27, ^bb28
  ^bb26:  // pred: ^bb23
    %c1_i32_53 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_53) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // 2 preds: ^bb25, ^bb28
    %150 = llvm.getelementptr %15[%144] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %151 = llvm.load volatile %150 {alignment = 1 : i64} : !llvm.ptr -> i8
    %152 = arith.extsi %151 : i8 to i32
    %c-65_i32_54 = arith.constant -65 : i32
    %153 = arith.cmpi sgt, %152, %c-65_i32_54 : i32
    %154 = arith.extui %153 : i1 to i32
    %155 = arith.addi %140, %154 : i32
    %156 = llvm.load %12 : !llvm.ptr -> i32
    %c3_i32_55 = arith.constant 3 : i32
    %157 = arith.addi %156, %c3_i32_55 : i32
    %c0_i64_56 = arith.constant 0 : i64
    %158 = arith.extui %157 : i32 to i64
    %159 = arith.addi %158, %c0_i64_56 : i64
    %c1_i64_57 = arith.constant 1 : i64
    %160 = arith.addi %159, %c1_i64_57 : i64
    %c0_i32_58 = arith.constant 0 : i32
    %161 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_58) : (!llvm.ptr, i32) -> i32
    %162 = arith.extui %161 : i32 to i64
    %c65536_i64_59 = arith.constant 65536 : i64
    %163 = arith.muli %162, %c65536_i64_59 : i64
    %164 = arith.cmpi ult, %160, %163 : i64
    cf.cond_br %164, ^bb29, ^bb30
  ^bb28:  // pred: ^bb25
    %c1_i32_60 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_60) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // 2 preds: ^bb27, ^bb30
    %165 = llvm.getelementptr %15[%159] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %166 = llvm.load volatile %165 {alignment = 1 : i64} : !llvm.ptr -> i8
    %167 = arith.extsi %166 : i8 to i32
    %c-65_i32_61 = arith.constant -65 : i32
    %168 = arith.cmpi sgt, %167, %c-65_i32_61 : i32
    %169 = arith.extui %168 : i1 to i32
    %170 = arith.addi %155, %169 : i32
    llvm.store %170, %1 : i32, !llvm.ptr
    %171 = llvm.load %11 : !llvm.ptr -> i32
    %172 = llvm.load %10 : !llvm.ptr -> i32
    %c4_i32_62 = arith.constant 4 : i32
    %173 = arith.addi %172, %c4_i32_62 : i32
    llvm.store %173, %10 : i32, !llvm.ptr
    %174 = arith.cmpi eq, %171, %173 : i32
    %175 = arith.extui %174 : i1 to i32
    %c0_i32_63 = arith.constant 0 : i32
    %176 = arith.cmpi eq, %175, %c0_i32_63 : i32
    %177 = arith.extui %176 : i1 to i32
    %c0_i32_64 = arith.constant 0 : i32
    %178 = arith.cmpi ne, %177, %c0_i32_64 : i32
    cf.cond_br %178, ^bb22, ^bb31
  ^bb30:  // pred: ^bb27
    %c1_i32_65 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_65) : (i32) -> ()
    cf.br ^bb29
  ^bb31:  // pred: ^bb29
    cf.br ^bb21
  ^bb32:  // pred: ^bb18
    %179 = llvm.load %2 : !llvm.ptr -> i32
    %180 = llvm.load %10 : !llvm.ptr -> i32
    %181 = arith.addi %179, %180 : i32
    llvm.store %181, %12 : i32, !llvm.ptr
    cf.br ^bb34
  ^bb33:  // pred: ^bb37
    cf.br ^bb13
  ^bb34:  // 2 preds: ^bb32, ^bb35
    %182 = llvm.load %1 : !llvm.ptr -> i32
    %183 = llvm.load %12 : !llvm.ptr -> i32
    %c0_i64_66 = arith.constant 0 : i64
    %184 = arith.extui %183 : i32 to i64
    %185 = arith.addi %184, %c0_i64_66 : i64
    %c1_i64_67 = arith.constant 1 : i64
    %186 = arith.addi %185, %c1_i64_67 : i64
    %c0_i32_68 = arith.constant 0 : i32
    %187 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_68) : (!llvm.ptr, i32) -> i32
    %188 = arith.extui %187 : i32 to i64
    %c65536_i64_69 = arith.constant 65536 : i64
    %189 = arith.muli %188, %c65536_i64_69 : i64
    %190 = arith.cmpi ult, %186, %189 : i64
    cf.cond_br %190, ^bb35, ^bb36
  ^bb35:  // 2 preds: ^bb34, ^bb36
    %191 = llvm.getelementptr %15[%185] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %192 = llvm.load volatile %191 {alignment = 1 : i64} : !llvm.ptr -> i8
    %193 = arith.extsi %192 : i8 to i32
    %c-65_i32_70 = arith.constant -65 : i32
    %194 = arith.cmpi sgt, %193, %c-65_i32_70 : i32
    %195 = arith.extui %194 : i1 to i32
    %196 = arith.addi %182, %195 : i32
    llvm.store %196, %1 : i32, !llvm.ptr
    %197 = llvm.load %12 : !llvm.ptr -> i32
    %c1_i32_71 = arith.constant 1 : i32
    %198 = arith.addi %197, %c1_i32_71 : i32
    llvm.store %198, %12 : i32, !llvm.ptr
    %199 = llvm.load %9 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %200 = arith.addi %199, %c-1_i32 : i32
    llvm.store %200, %9 : i32, !llvm.ptr
    %c0_i32_72 = arith.constant 0 : i32
    %201 = arith.cmpi ne, %200, %c0_i32_72 : i32
    cf.cond_br %201, ^bb34, ^bb37
  ^bb36:  // pred: ^bb34
    %c1_i32_73 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_73) : (i32) -> ()
    cf.br ^bb35
  ^bb37:  // pred: ^bb35
    cf.br ^bb33
  ^bb38:  // pred: ^bb39
    %202 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_74 = arith.constant 4 : i64
    %203 = arith.extui %202 : i32 to i64
    %204 = arith.addi %203, %c4_i64_74 : i64
    %c4_i64_75 = arith.constant 4 : i64
    %205 = arith.addi %204, %c4_i64_75 : i64
    %c0_i32_76 = arith.constant 0 : i32
    %206 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_76) : (!llvm.ptr, i32) -> i32
    %207 = arith.extui %206 : i32 to i64
    %c65536_i64_77 = arith.constant 65536 : i64
    %208 = arith.muli %207, %c65536_i64_77 : i64
    %209 = arith.cmpi ult, %205, %208 : i64
    cf.cond_br %209, ^bb62, ^bb63
  ^bb39:  // 2 preds: ^bb10, ^bb40
    %210 = llvm.getelementptr %15[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %211 = llvm.load volatile %210 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_78 = arith.constant 0 : i32
    %212 = arith.cmpi ne, %211, %c0_i32_78 : i32
    cf.cond_br %212, ^bb38, ^bb41
  ^bb40:  // pred: ^bb10
    %c1_i32_79 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_79) : (i32) -> ()
    cf.br ^bb39
  ^bb41:  // pred: ^bb39
    %213 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %214 = arith.extui %213 : i32 to i64
    %215 = arith.addi %214, %c20_i64 : i64
    %c4_i64_80 = arith.constant 4 : i64
    %216 = arith.addi %215, %c4_i64_80 : i64
    %c0_i32_81 = arith.constant 0 : i32
    %217 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_81) : (!llvm.ptr, i32) -> i32
    %218 = arith.extui %217 : i32 to i64
    %c65536_i64_82 = arith.constant 65536 : i64
    %219 = arith.muli %218, %c65536_i64_82 : i64
    %220 = arith.cmpi ult, %216, %219 : i64
    cf.cond_br %220, ^bb43, ^bb44
  ^bb42:  // pred: ^bb45
    %221 = llvm.load %1 : !llvm.ptr -> i32
    %222 = llvm.load %4 : !llvm.ptr -> i32
    %223 = llvm.load %5 : !llvm.ptr -> i32
    %224 = llvm.load %12 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %225 = arith.extui %224 : i32 to i64
    %226 = arith.addi %225, %c12_i64 : i64
    %c4_i64_83 = arith.constant 4 : i64
    %227 = arith.addi %226, %c4_i64_83 : i64
    %c0_i32_84 = arith.constant 0 : i32
    %228 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_84) : (!llvm.ptr, i32) -> i32
    %229 = arith.extui %228 : i32 to i64
    %c65536_i64_85 = arith.constant 65536 : i64
    %230 = arith.muli %229, %c65536_i64_85 : i64
    %231 = arith.cmpi ult, %227, %230 : i64
    cf.cond_br %231, ^bb48, ^bb49
  ^bb43:  // 2 preds: ^bb41, ^bb44
    %232 = llvm.getelementptr %15[%215] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %233 = llvm.load volatile %232 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %233, %1 : i32, !llvm.ptr
    %234 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %235 = arith.extui %234 : i32 to i64
    %236 = arith.addi %235, %c24_i64 : i64
    %c4_i64_86 = arith.constant 4 : i64
    %237 = arith.addi %236, %c4_i64_86 : i64
    %c0_i32_87 = arith.constant 0 : i32
    %238 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_87) : (!llvm.ptr, i32) -> i32
    %239 = arith.extui %238 : i32 to i64
    %c65536_i64_88 = arith.constant 65536 : i64
    %240 = arith.muli %239, %c65536_i64_88 : i64
    %241 = arith.cmpi ult, %237, %240 : i64
    cf.cond_br %241, ^bb45, ^bb46
  ^bb44:  // pred: ^bb41
    %c1_i32_89 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_89) : (i32) -> ()
    cf.br ^bb43
  ^bb45:  // 2 preds: ^bb43, ^bb46
    %242 = llvm.getelementptr %15[%236] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %243 = llvm.load volatile %242 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %243, %12 : i32, !llvm.ptr
    %244 = llvm.load %8 : !llvm.ptr -> i32
    %245 = llvm.load %2 : !llvm.ptr -> i32
    %246 = llvm.load %3 : !llvm.ptr -> i32
    %247 = call @f155(%arg0, %233, %243, %244, %245, %246) : (!llvm.ptr, i32, i32, i32, i32, i32) -> i32
    %c0_i32_90 = arith.constant 0 : i32
    %248 = arith.cmpi eq, %247, %c0_i32_90 : i32
    %249 = arith.extui %248 : i1 to i32
    %c0_i32_91 = arith.constant 0 : i32
    %250 = arith.cmpi ne, %249, %c0_i32_91 : i32
    cf.cond_br %250, ^bb42, ^bb47
  ^bb46:  // pred: ^bb43
    %c1_i32_92 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_92) : (i32) -> ()
    cf.br ^bb45
  ^bb47:  // pred: ^bb45
    %c1_i32_93 = arith.constant 1 : i32
    cf.br ^bb2(%c1_i32_93 : i32)
  ^bb48:  // 2 preds: ^bb42, ^bb49
    %251 = llvm.getelementptr %15[%226] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %252 = llvm.load volatile %251 {alignment = 1 : i64} : !llvm.ptr -> i32
    %253 = arith.cmpi ult, %252, %22 : i32
    cf.cond_br %253, ^bb50, ^bb51
  ^bb49:  // pred: ^bb42
    %c1_i32_94 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_94) : (i32) -> ()
    cf.br ^bb48
  ^bb50:  // 2 preds: ^bb48, ^bb51
    %254 = llvm.getelementptr inbounds %20[%252] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %255 = llvm.load %254 : !llvm.ptr -> !llvm.ptr
    %256 = llvm.ptrtoint %255 : !llvm.ptr to i64
    %c0_i64_95 = arith.constant 0 : i64
    %257 = arith.cmpi eq, %256, %c0_i64_95 : i64
    cf.cond_br %257, ^bb53, ^bb52
  ^bb51:  // pred: ^bb48
    %c3_i32_96 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_96) : (i32) -> ()
    cf.br ^bb50
  ^bb52:  // 2 preds: ^bb50, ^bb53
    %258 = llvm.getelementptr %255[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %259 = llvm.getelementptr %255[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %260 = llvm.getelementptr %255[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %261 = llvm.load %258 : !llvm.ptr -> !llvm.ptr
    %262 = llvm.load %260 : !llvm.ptr -> !llvm.ptr
    %263 = llvm.ptrtoint %261 : !llvm.ptr to i64
    %c0_i64_97 = arith.constant 0 : i64
    %264 = arith.cmpi eq, %263, %c0_i64_97 : i64
    cf.cond_br %264, ^bb55, ^bb54
  ^bb53:  // pred: ^bb50
    %c4_i32_98 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_98) : (i32) -> ()
    cf.br ^bb52
  ^bb54:  // 2 preds: ^bb52, ^bb55
    %265 = llvm.load %259 : !llvm.ptr -> i32
    %266 = arith.cmpi ne, %17, %265 : i32
    cf.cond_br %266, ^bb57, ^bb56
  ^bb55:  // pred: ^bb52
    %c3_i32_99 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_99) : (i32) -> ()
    cf.br ^bb54
  ^bb56:  // 2 preds: ^bb54, ^bb57
    %267 = llvm.call %261(%262, %221, %222, %223) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%267 : i32)
  ^bb57:  // pred: ^bb54
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb56
  ^bb58:  // 4 preds: ^bb81, ^bb123, ^bb136, ^bb160
    %268 = llvm.load %11 : !llvm.ptr -> i32
    cf.br ^bb2(%268 : i32)
  ^bb59:  // pred: ^bb61
    %269 = llvm.load %1 : !llvm.ptr -> i32
    %270 = llvm.load %6 : !llvm.ptr -> i32
    %271 = arith.subi %269, %270 : i32
    llvm.store %271, %6 : i32, !llvm.ptr
    %272 = llvm.load %0 : !llvm.ptr -> i32
    %c32_i64 = arith.constant 32 : i64
    %273 = arith.extui %272 : i32 to i64
    %274 = arith.addi %273, %c32_i64 : i64
    %c1_i64_100 = arith.constant 1 : i64
    %275 = arith.addi %274, %c1_i64_100 : i64
    %c0_i32_101 = arith.constant 0 : i32
    %276 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_101) : (!llvm.ptr, i32) -> i32
    %277 = arith.extui %276 : i32 to i64
    %c65536_i64_102 = arith.constant 65536 : i64
    %278 = arith.muli %277, %c65536_i64_102 : i64
    %279 = arith.cmpi ult, %275, %278 : i64
    cf.cond_br %279, ^bb128, ^bb129
  ^bb60:  // pred: ^bb67
    %280 = llvm.load %1 : !llvm.ptr -> i32
    %281 = llvm.load %4 : !llvm.ptr -> i32
    %282 = llvm.load %5 : !llvm.ptr -> i32
    %283 = llvm.load %12 : !llvm.ptr -> i32
    %c12_i64_103 = arith.constant 12 : i64
    %284 = arith.extui %283 : i32 to i64
    %285 = arith.addi %284, %c12_i64_103 : i64
    %c4_i64_104 = arith.constant 4 : i64
    %286 = arith.addi %285, %c4_i64_104 : i64
    %c0_i32_105 = arith.constant 0 : i32
    %287 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_105) : (!llvm.ptr, i32) -> i32
    %288 = arith.extui %287 : i32 to i64
    %c65536_i64_106 = arith.constant 65536 : i64
    %289 = arith.muli %288, %c65536_i64_106 : i64
    %290 = arith.cmpi ult, %286, %289 : i64
    cf.cond_br %290, ^bb115, ^bb116
  ^bb61:  // pred: ^bb62
    %291 = llvm.load %7 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %292 = arith.andi %291, %c8_i32 : i32
    %c0_i32_107 = arith.constant 0 : i32
    %293 = arith.cmpi eq, %292, %c0_i32_107 : i32
    %294 = arith.extui %293 : i1 to i32
    %c0_i32_108 = arith.constant 0 : i32
    %295 = arith.cmpi ne, %294, %c0_i32_108 : i32
    cf.cond_br %295, ^bb59, ^bb70
  ^bb62:  // 2 preds: ^bb38, ^bb63
    %296 = llvm.getelementptr %15[%204] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %297 = llvm.load volatile %296 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %297, %1 : i32, !llvm.ptr
    %298 = llvm.load %6 : !llvm.ptr -> i32
    %299 = arith.cmpi ugt, %297, %298 : i32
    %300 = arith.extui %299 : i1 to i32
    %c0_i32_109 = arith.constant 0 : i32
    %301 = arith.cmpi ne, %300, %c0_i32_109 : i32
    cf.cond_br %301, ^bb61, ^bb64
  ^bb63:  // pred: ^bb38
    %c1_i32_110 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_110) : (i32) -> ()
    cf.br ^bb62
  ^bb64:  // pred: ^bb62
    %302 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64_111 = arith.constant 20 : i64
    %303 = arith.extui %302 : i32 to i64
    %304 = arith.addi %303, %c20_i64_111 : i64
    %c4_i64_112 = arith.constant 4 : i64
    %305 = arith.addi %304, %c4_i64_112 : i64
    %c0_i32_113 = arith.constant 0 : i32
    %306 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_113) : (!llvm.ptr, i32) -> i32
    %307 = arith.extui %306 : i32 to i64
    %c65536_i64_114 = arith.constant 65536 : i64
    %308 = arith.muli %307, %c65536_i64_114 : i64
    %309 = arith.cmpi ult, %305, %308 : i64
    cf.cond_br %309, ^bb65, ^bb66
  ^bb65:  // 2 preds: ^bb64, ^bb66
    %310 = llvm.getelementptr %15[%304] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %311 = llvm.load volatile %310 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %311, %1 : i32, !llvm.ptr
    %312 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64_115 = arith.constant 24 : i64
    %313 = arith.extui %312 : i32 to i64
    %314 = arith.addi %313, %c24_i64_115 : i64
    %c4_i64_116 = arith.constant 4 : i64
    %315 = arith.addi %314, %c4_i64_116 : i64
    %c0_i32_117 = arith.constant 0 : i32
    %316 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_117) : (!llvm.ptr, i32) -> i32
    %317 = arith.extui %316 : i32 to i64
    %c65536_i64_118 = arith.constant 65536 : i64
    %318 = arith.muli %317, %c65536_i64_118 : i64
    %319 = arith.cmpi ult, %315, %318 : i64
    cf.cond_br %319, ^bb67, ^bb68
  ^bb66:  // pred: ^bb64
    %c1_i32_119 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_119) : (i32) -> ()
    cf.br ^bb65
  ^bb67:  // 2 preds: ^bb65, ^bb68
    %320 = llvm.getelementptr %15[%314] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %321 = llvm.load volatile %320 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %321, %12 : i32, !llvm.ptr
    %322 = llvm.load %8 : !llvm.ptr -> i32
    %323 = llvm.load %2 : !llvm.ptr -> i32
    %324 = llvm.load %3 : !llvm.ptr -> i32
    %325 = call @f155(%arg0, %311, %321, %322, %323, %324) : (!llvm.ptr, i32, i32, i32, i32, i32) -> i32
    %c0_i32_120 = arith.constant 0 : i32
    %326 = arith.cmpi eq, %325, %c0_i32_120 : i32
    %327 = arith.extui %326 : i1 to i32
    %c0_i32_121 = arith.constant 0 : i32
    %328 = arith.cmpi ne, %327, %c0_i32_121 : i32
    cf.cond_br %328, ^bb60, ^bb69
  ^bb68:  // pred: ^bb65
    %c1_i32_122 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_122) : (i32) -> ()
    cf.br ^bb67
  ^bb69:  // pred: ^bb67
    %c1_i32_123 = arith.constant 1 : i32
    cf.br ^bb2(%c1_i32_123 : i32)
  ^bb70:  // pred: ^bb61
    %329 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %330 = arith.extui %329 : i32 to i64
    %331 = arith.addi %330, %c16_i64 : i64
    %c4_i64_124 = arith.constant 4 : i64
    %332 = arith.addi %331, %c4_i64_124 : i64
    %c0_i32_125 = arith.constant 0 : i32
    %333 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_125) : (!llvm.ptr, i32) -> i32
    %334 = arith.extui %333 : i32 to i64
    %c65536_i64_126 = arith.constant 65536 : i64
    %335 = arith.muli %334, %c65536_i64_126 : i64
    %336 = arith.cmpi ult, %332, %335 : i64
    cf.cond_br %336, ^bb71, ^bb72
  ^bb71:  // 2 preds: ^bb70, ^bb72
    %337 = llvm.getelementptr %15[%331] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %338 = llvm.load volatile %337 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %338, %9 : i32, !llvm.ptr
    %339 = llvm.load %0 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %c16_i64_127 = arith.constant 16 : i64
    %340 = arith.extui %339 : i32 to i64
    %341 = arith.addi %340, %c16_i64_127 : i64
    %c4_i64_128 = arith.constant 4 : i64
    %342 = arith.addi %341, %c4_i64_128 : i64
    %c0_i32_129 = arith.constant 0 : i32
    %343 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_129) : (!llvm.ptr, i32) -> i32
    %344 = arith.extui %343 : i32 to i64
    %c65536_i64_130 = arith.constant 65536 : i64
    %345 = arith.muli %344, %c65536_i64_130 : i64
    %346 = arith.cmpi ult, %342, %345 : i64
    cf.cond_br %346, ^bb73, ^bb74
  ^bb72:  // pred: ^bb70
    %c1_i32_131 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_131) : (i32) -> ()
    cf.br ^bb71
  ^bb73:  // 2 preds: ^bb71, ^bb74
    %347 = llvm.getelementptr %15[%341] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c48_i32, %347 {alignment = 1 : i64} : i32, !llvm.ptr
    %348 = llvm.load %0 : !llvm.ptr -> i32
    %c32_i64_132 = arith.constant 32 : i64
    %349 = arith.extui %348 : i32 to i64
    %350 = arith.addi %349, %c32_i64_132 : i64
    %c1_i64_133 = arith.constant 1 : i64
    %351 = arith.addi %350, %c1_i64_133 : i64
    %c0_i32_134 = arith.constant 0 : i32
    %352 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_134) : (!llvm.ptr, i32) -> i32
    %353 = arith.extui %352 : i32 to i64
    %c65536_i64_135 = arith.constant 65536 : i64
    %354 = arith.muli %353, %c65536_i64_135 : i64
    %355 = arith.cmpi ult, %351, %354 : i64
    cf.cond_br %355, ^bb75, ^bb76
  ^bb74:  // pred: ^bb71
    %c1_i32_136 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_136) : (i32) -> ()
    cf.br ^bb73
  ^bb75:  // 2 preds: ^bb73, ^bb76
    %356 = llvm.getelementptr %15[%350] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %357 = llvm.load volatile %356 {alignment = 1 : i64} : !llvm.ptr -> i8
    %358 = arith.extui %357 : i8 to i32
    llvm.store %358, %7 : i32, !llvm.ptr
    %c1_i32_137 = arith.constant 1 : i32
    llvm.store %c1_i32_137, %11 : i32, !llvm.ptr
    %359 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_138 = arith.constant 1 : i32
    %c32_i64_139 = arith.constant 32 : i64
    %360 = arith.extui %359 : i32 to i64
    %361 = arith.addi %360, %c32_i64_139 : i64
    %c1_i64_140 = arith.constant 1 : i64
    %362 = arith.addi %361, %c1_i64_140 : i64
    %c0_i32_141 = arith.constant 0 : i32
    %363 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_141) : (!llvm.ptr, i32) -> i32
    %364 = arith.extui %363 : i32 to i64
    %c65536_i64_142 = arith.constant 65536 : i64
    %365 = arith.muli %364, %c65536_i64_142 : i64
    %366 = arith.cmpi ult, %362, %365 : i64
    cf.cond_br %366, ^bb77, ^bb78
  ^bb76:  // pred: ^bb73
    %c1_i32_143 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_143) : (i32) -> ()
    cf.br ^bb75
  ^bb77:  // 2 preds: ^bb75, ^bb78
    %367 = llvm.getelementptr %15[%361] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %368 = arith.trunci %c1_i32_138 : i32 to i8
    llvm.store volatile %368, %367 {alignment = 1 : i64} : i8, !llvm.ptr
    %369 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64_144 = arith.constant 20 : i64
    %370 = arith.extui %369 : i32 to i64
    %371 = arith.addi %370, %c20_i64_144 : i64
    %c4_i64_145 = arith.constant 4 : i64
    %372 = arith.addi %371, %c4_i64_145 : i64
    %c0_i32_146 = arith.constant 0 : i32
    %373 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_146) : (!llvm.ptr, i32) -> i32
    %374 = arith.extui %373 : i32 to i64
    %c65536_i64_147 = arith.constant 65536 : i64
    %375 = arith.muli %374, %c65536_i64_147 : i64
    %376 = arith.cmpi ult, %372, %375 : i64
    cf.cond_br %376, ^bb79, ^bb80
  ^bb78:  // pred: ^bb75
    %c1_i32_148 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_148) : (i32) -> ()
    cf.br ^bb77
  ^bb79:  // 2 preds: ^bb77, ^bb80
    %377 = llvm.getelementptr %15[%371] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %378 = llvm.load volatile %377 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %378, %12 : i32, !llvm.ptr
    %379 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64_149 = arith.constant 24 : i64
    %380 = arith.extui %379 : i32 to i64
    %381 = arith.addi %380, %c24_i64_149 : i64
    %c4_i64_150 = arith.constant 4 : i64
    %382 = arith.addi %381, %c4_i64_150 : i64
    %c0_i32_151 = arith.constant 0 : i32
    %383 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_151) : (!llvm.ptr, i32) -> i32
    %384 = arith.extui %383 : i32 to i64
    %c65536_i64_152 = arith.constant 65536 : i64
    %385 = arith.muli %384, %c65536_i64_152 : i64
    %386 = arith.cmpi ult, %382, %385 : i64
    cf.cond_br %386, ^bb81, ^bb82
  ^bb80:  // pred: ^bb77
    %c1_i32_153 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_153) : (i32) -> ()
    cf.br ^bb79
  ^bb81:  // 2 preds: ^bb79, ^bb82
    %387 = llvm.getelementptr %15[%381] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %388 = llvm.load volatile %387 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %388, %10 : i32, !llvm.ptr
    %389 = llvm.load %8 : !llvm.ptr -> i32
    %390 = llvm.load %2 : !llvm.ptr -> i32
    %391 = llvm.load %3 : !llvm.ptr -> i32
    %392 = call @f155(%arg0, %378, %388, %389, %390, %391) : (!llvm.ptr, i32, i32, i32, i32, i32) -> i32
    %c0_i32_154 = arith.constant 0 : i32
    %393 = arith.cmpi ne, %392, %c0_i32_154 : i32
    cf.cond_br %393, ^bb58, ^bb83
  ^bb82:  // pred: ^bb79
    %c1_i32_155 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_155) : (i32) -> ()
    cf.br ^bb81
  ^bb83:  // pred: ^bb81
    %394 = llvm.load %1 : !llvm.ptr -> i32
    %395 = llvm.load %6 : !llvm.ptr -> i32
    %396 = arith.subi %394, %395 : i32
    %c1_i32_156 = arith.constant 1 : i32
    %397 = arith.addi %396, %c1_i32_156 : i32
    llvm.store %397, %1 : i32, !llvm.ptr
    cf.br ^bb86
  ^bb84:  // pred: ^bb86
    %398 = llvm.load %12 : !llvm.ptr -> i32
    %399 = llvm.load %4 : !llvm.ptr -> i32
    %400 = llvm.load %5 : !llvm.ptr -> i32
    %401 = llvm.load %10 : !llvm.ptr -> i32
    %c12_i64_157 = arith.constant 12 : i64
    %402 = arith.extui %401 : i32 to i64
    %403 = arith.addi %402, %c12_i64_157 : i64
    %c4_i64_158 = arith.constant 4 : i64
    %404 = arith.addi %403, %c4_i64_158 : i64
    %c0_i32_159 = arith.constant 0 : i32
    %405 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_159) : (!llvm.ptr, i32) -> i32
    %406 = arith.extui %405 : i32 to i64
    %c65536_i64_160 = arith.constant 65536 : i64
    %407 = arith.muli %406, %c65536_i64_160 : i64
    %408 = arith.cmpi ult, %404, %407 : i64
    cf.cond_br %408, ^bb100, ^bb101
  ^bb85:  // pred: ^bb98
    %c1_i32_161 = arith.constant 1 : i32
    cf.br ^bb2(%c1_i32_161 : i32)
  ^bb86:  // 2 preds: ^bb83, ^bb96
    %409 = llvm.load %1 : !llvm.ptr -> i32
    %c-1_i32_162 = arith.constant -1 : i32
    %410 = arith.addi %409, %c-1_i32_162 : i32
    llvm.store %410, %1 : i32, !llvm.ptr
    %c0_i32_163 = arith.constant 0 : i32
    %411 = arith.cmpi eq, %410, %c0_i32_163 : i32
    %412 = arith.extui %411 : i1 to i32
    %c0_i32_164 = arith.constant 0 : i32
    %413 = arith.cmpi ne, %412, %c0_i32_164 : i32
    cf.cond_br %413, ^bb84, ^bb87
  ^bb87:  // pred: ^bb86
    %414 = llvm.load %12 : !llvm.ptr -> i32
    %c48_i32_165 = arith.constant 48 : i32
    %415 = llvm.load %10 : !llvm.ptr -> i32
    %c16_i64_166 = arith.constant 16 : i64
    %416 = arith.extui %415 : i32 to i64
    %417 = arith.addi %416, %c16_i64_166 : i64
    %c4_i64_167 = arith.constant 4 : i64
    %418 = arith.addi %417, %c4_i64_167 : i64
    %c0_i32_168 = arith.constant 0 : i32
    %419 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_168) : (!llvm.ptr, i32) -> i32
    %420 = arith.extui %419 : i32 to i64
    %c65536_i64_169 = arith.constant 65536 : i64
    %421 = arith.muli %420, %c65536_i64_169 : i64
    %422 = arith.cmpi ult, %418, %421 : i64
    cf.cond_br %422, ^bb88, ^bb89
  ^bb88:  // 2 preds: ^bb87, ^bb89
    %423 = llvm.getelementptr %15[%417] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %424 = llvm.load volatile %423 {alignment = 1 : i64} : !llvm.ptr -> i32
    %425 = arith.cmpi ult, %424, %27 : i32
    cf.cond_br %425, ^bb90, ^bb91
  ^bb89:  // pred: ^bb87
    %c1_i32_170 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_170) : (i32) -> ()
    cf.br ^bb88
  ^bb90:  // 2 preds: ^bb88, ^bb91
    %426 = llvm.getelementptr inbounds %25[%424] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %427 = llvm.load %426 : !llvm.ptr -> !llvm.ptr
    %428 = llvm.ptrtoint %427 : !llvm.ptr to i64
    %c0_i64_171 = arith.constant 0 : i64
    %429 = arith.cmpi eq, %428, %c0_i64_171 : i64
    cf.cond_br %429, ^bb93, ^bb92
  ^bb91:  // pred: ^bb88
    %c3_i32_172 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_172) : (i32) -> ()
    cf.br ^bb90
  ^bb92:  // 2 preds: ^bb90, ^bb93
    %430 = llvm.getelementptr %427[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %431 = llvm.getelementptr %427[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %432 = llvm.getelementptr %427[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %433 = llvm.load %430 : !llvm.ptr -> !llvm.ptr
    %434 = llvm.load %432 : !llvm.ptr -> !llvm.ptr
    %435 = llvm.ptrtoint %433 : !llvm.ptr to i64
    %c0_i64_173 = arith.constant 0 : i64
    %436 = arith.cmpi eq, %435, %c0_i64_173 : i64
    cf.cond_br %436, ^bb95, ^bb94
  ^bb93:  // pred: ^bb90
    %c4_i32_174 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_174) : (i32) -> ()
    cf.br ^bb92
  ^bb94:  // 2 preds: ^bb92, ^bb95
    %437 = llvm.load %431 : !llvm.ptr -> i32
    %438 = arith.cmpi ne, %24, %437 : i32
    cf.cond_br %438, ^bb97, ^bb96
  ^bb95:  // pred: ^bb92
    %c3_i32_175 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_175) : (i32) -> ()
    cf.br ^bb94
  ^bb96:  // 2 preds: ^bb94, ^bb97
    %439 = llvm.call %433(%434, %414, %c48_i32_165) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_176 = arith.constant 0 : i32
    %440 = arith.cmpi eq, %439, %c0_i32_176 : i32
    %441 = arith.extui %440 : i1 to i32
    %c0_i32_177 = arith.constant 0 : i32
    %442 = arith.cmpi ne, %441, %c0_i32_177 : i32
    cf.cond_br %442, ^bb86, ^bb98
  ^bb97:  // pred: ^bb94
    %c5_i32_178 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_178) : (i32) -> ()
    cf.br ^bb96
  ^bb98:  // pred: ^bb96
    cf.br ^bb85
  ^bb99:  // pred: ^bb108
    %443 = llvm.load %0 : !llvm.ptr -> i32
    %444 = llvm.load %7 : !llvm.ptr -> i32
    %c32_i64_179 = arith.constant 32 : i64
    %445 = arith.extui %443 : i32 to i64
    %446 = arith.addi %445, %c32_i64_179 : i64
    %c1_i64_180 = arith.constant 1 : i64
    %447 = arith.addi %446, %c1_i64_180 : i64
    %c0_i32_181 = arith.constant 0 : i32
    %448 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_181) : (!llvm.ptr, i32) -> i32
    %449 = arith.extui %448 : i32 to i64
    %c65536_i64_182 = arith.constant 65536 : i64
    %450 = arith.muli %449, %c65536_i64_182 : i64
    %451 = arith.cmpi ult, %447, %450 : i64
    cf.cond_br %451, ^bb111, ^bb112
  ^bb100:  // 2 preds: ^bb84, ^bb101
    %452 = llvm.getelementptr %15[%403] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %453 = llvm.load volatile %452 {alignment = 1 : i64} : !llvm.ptr -> i32
    %454 = arith.cmpi ult, %453, %30 : i32
    cf.cond_br %454, ^bb102, ^bb103
  ^bb101:  // pred: ^bb84
    %c1_i32_183 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_183) : (i32) -> ()
    cf.br ^bb100
  ^bb102:  // 2 preds: ^bb100, ^bb103
    %455 = llvm.getelementptr inbounds %28[%453] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %456 = llvm.load %455 : !llvm.ptr -> !llvm.ptr
    %457 = llvm.ptrtoint %456 : !llvm.ptr to i64
    %c0_i64_184 = arith.constant 0 : i64
    %458 = arith.cmpi eq, %457, %c0_i64_184 : i64
    cf.cond_br %458, ^bb105, ^bb104
  ^bb103:  // pred: ^bb100
    %c3_i32_185 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_185) : (i32) -> ()
    cf.br ^bb102
  ^bb104:  // 2 preds: ^bb102, ^bb105
    %459 = llvm.getelementptr %456[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %460 = llvm.getelementptr %456[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %461 = llvm.getelementptr %456[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %462 = llvm.load %459 : !llvm.ptr -> !llvm.ptr
    %463 = llvm.load %461 : !llvm.ptr -> !llvm.ptr
    %464 = llvm.ptrtoint %462 : !llvm.ptr to i64
    %c0_i64_186 = arith.constant 0 : i64
    %465 = arith.cmpi eq, %464, %c0_i64_186 : i64
    cf.cond_br %465, ^bb107, ^bb106
  ^bb105:  // pred: ^bb102
    %c4_i32_187 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_187) : (i32) -> ()
    cf.br ^bb104
  ^bb106:  // 2 preds: ^bb104, ^bb107
    %466 = llvm.load %460 : !llvm.ptr -> i32
    %467 = arith.cmpi ne, %17, %466 : i32
    cf.cond_br %467, ^bb109, ^bb108
  ^bb107:  // pred: ^bb104
    %c3_i32_188 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_188) : (i32) -> ()
    cf.br ^bb106
  ^bb108:  // 2 preds: ^bb106, ^bb109
    %468 = llvm.call %462(%463, %398, %399, %400) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_189 = arith.constant 0 : i32
    %469 = arith.cmpi eq, %468, %c0_i32_189 : i32
    %470 = arith.extui %469 : i1 to i32
    %c0_i32_190 = arith.constant 0 : i32
    %471 = arith.cmpi ne, %470, %c0_i32_190 : i32
    cf.cond_br %471, ^bb99, ^bb110
  ^bb109:  // pred: ^bb106
    %c5_i32_191 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_191) : (i32) -> ()
    cf.br ^bb108
  ^bb110:  // pred: ^bb108
    %c1_i32_192 = arith.constant 1 : i32
    cf.br ^bb2(%c1_i32_192 : i32)
  ^bb111:  // 2 preds: ^bb99, ^bb112
    %472 = llvm.getelementptr %15[%446] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %473 = arith.trunci %444 : i32 to i8
    llvm.store volatile %473, %472 {alignment = 1 : i64} : i8, !llvm.ptr
    %474 = llvm.load %0 : !llvm.ptr -> i32
    %475 = llvm.load %9 : !llvm.ptr -> i32
    %c16_i64_193 = arith.constant 16 : i64
    %476 = arith.extui %474 : i32 to i64
    %477 = arith.addi %476, %c16_i64_193 : i64
    %c4_i64_194 = arith.constant 4 : i64
    %478 = arith.addi %477, %c4_i64_194 : i64
    %c0_i32_195 = arith.constant 0 : i32
    %479 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_195) : (!llvm.ptr, i32) -> i32
    %480 = arith.extui %479 : i32 to i64
    %c65536_i64_196 = arith.constant 65536 : i64
    %481 = arith.muli %480, %c65536_i64_196 : i64
    %482 = arith.cmpi ult, %478, %481 : i64
    cf.cond_br %482, ^bb113, ^bb114
  ^bb112:  // pred: ^bb99
    %c1_i32_197 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_197) : (i32) -> ()
    cf.br ^bb111
  ^bb113:  // 2 preds: ^bb111, ^bb114
    %483 = llvm.getelementptr %15[%477] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %475, %483 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_198 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32_198 : i32)
  ^bb114:  // pred: ^bb111
    %c1_i32_199 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_199) : (i32) -> ()
    cf.br ^bb113
  ^bb115:  // 2 preds: ^bb60, ^bb116
    %484 = llvm.getelementptr %15[%285] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %485 = llvm.load volatile %484 {alignment = 1 : i64} : !llvm.ptr -> i32
    %486 = arith.cmpi ult, %485, %33 : i32
    cf.cond_br %486, ^bb117, ^bb118
  ^bb116:  // pred: ^bb60
    %c1_i32_200 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_200) : (i32) -> ()
    cf.br ^bb115
  ^bb117:  // 2 preds: ^bb115, ^bb118
    %487 = llvm.getelementptr inbounds %31[%485] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %488 = llvm.load %487 : !llvm.ptr -> !llvm.ptr
    %489 = llvm.ptrtoint %488 : !llvm.ptr to i64
    %c0_i64_201 = arith.constant 0 : i64
    %490 = arith.cmpi eq, %489, %c0_i64_201 : i64
    cf.cond_br %490, ^bb120, ^bb119
  ^bb118:  // pred: ^bb115
    %c3_i32_202 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_202) : (i32) -> ()
    cf.br ^bb117
  ^bb119:  // 2 preds: ^bb117, ^bb120
    %491 = llvm.getelementptr %488[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %492 = llvm.getelementptr %488[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %493 = llvm.getelementptr %488[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %494 = llvm.load %491 : !llvm.ptr -> !llvm.ptr
    %495 = llvm.load %493 : !llvm.ptr -> !llvm.ptr
    %496 = llvm.ptrtoint %494 : !llvm.ptr to i64
    %c0_i64_203 = arith.constant 0 : i64
    %497 = arith.cmpi eq, %496, %c0_i64_203 : i64
    cf.cond_br %497, ^bb122, ^bb121
  ^bb120:  // pred: ^bb117
    %c4_i32_204 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_204) : (i32) -> ()
    cf.br ^bb119
  ^bb121:  // 2 preds: ^bb119, ^bb122
    %498 = llvm.load %492 : !llvm.ptr -> i32
    %499 = arith.cmpi ne, %17, %498 : i32
    cf.cond_br %499, ^bb124, ^bb123
  ^bb122:  // pred: ^bb119
    %c3_i32_205 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_205) : (i32) -> ()
    cf.br ^bb121
  ^bb123:  // 2 preds: ^bb121, ^bb124
    %500 = llvm.call %494(%495, %280, %281, %282) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %500, %11 : i32, !llvm.ptr
    cf.br ^bb58
  ^bb124:  // pred: ^bb121
    %c5_i32_206 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_206) : (i32) -> ()
    cf.br ^bb123
  ^bb125:  // 4 preds: ^bb126, ^bb127, ^bb128, ^bb128
    %501 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_207 = arith.constant 1 : i32
    %502 = arith.addi %501, %c1_i32_207 : i32
    llvm.store %502, %1 : i32, !llvm.ptr
    %503 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i64_208 = arith.constant 16 : i64
    %504 = arith.extui %503 : i32 to i64
    %505 = arith.addi %504, %c16_i64_208 : i64
    %c4_i64_209 = arith.constant 4 : i64
    %506 = arith.addi %505, %c4_i64_209 : i64
    %c0_i32_210 = arith.constant 0 : i32
    %507 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_210) : (!llvm.ptr, i32) -> i32
    %508 = arith.extui %507 : i32 to i64
    %c65536_i64_211 = arith.constant 65536 : i64
    %509 = arith.muli %508, %c65536_i64_211 : i64
    %510 = arith.cmpi ult, %506, %509 : i64
    cf.cond_br %510, ^bb130, ^bb131
  ^bb126:  // pred: ^bb128
    %511 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i32_212 = arith.constant 1 : i32
    %c31_i32 = arith.constant 31 : i32
    %512 = arith.cmpi ule, %c1_i32_212, %c31_i32 : i32
    %513 = scf.if %512 -> (i32) {
      %663 = arith.shrui %511, %c1_i32_212 : i32
      scf.yield %663 : i32
    } else {
      %c0_i32_278 = arith.constant 0 : i32
      scf.yield %c0_i32_278 : i32
    }
    llvm.store %513, %1 : i32, !llvm.ptr
    %514 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i32_213 = arith.constant 1 : i32
    %515 = arith.addi %514, %c1_i32_213 : i32
    %c1_i32_214 = arith.constant 1 : i32
    %c31_i32_215 = arith.constant 31 : i32
    %516 = arith.cmpi ule, %c1_i32_214, %c31_i32_215 : i32
    %517 = scf.if %516 -> (i32) {
      %663 = arith.shrui %515, %c1_i32_214 : i32
      scf.yield %663 : i32
    } else {
      %c0_i32_278 = arith.constant 0 : i32
      scf.yield %c0_i32_278 : i32
    }
    llvm.store %517, %6 : i32, !llvm.ptr
    cf.br ^bb125
  ^bb127:  // 2 preds: ^bb128, ^bb128
    %518 = llvm.load %6 : !llvm.ptr -> i32
    llvm.store %518, %1 : i32, !llvm.ptr
    %c0_i32_216 = arith.constant 0 : i32
    llvm.store %c0_i32_216, %6 : i32, !llvm.ptr
    cf.br ^bb125
  ^bb128:  // 2 preds: ^bb59, ^bb129
    %519 = llvm.getelementptr %15[%274] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %520 = llvm.load volatile %519 {alignment = 1 : i64} : !llvm.ptr -> i8
    %521 = arith.extui %520 : i8 to i32
    llvm.store %521, %1 : i32, !llvm.ptr
    cf.switch %521 : i32, [
      default: ^bb125,
      0: ^bb125,
      1: ^bb127,
      2: ^bb126,
      3: ^bb127
    ]
  ^bb129:  // pred: ^bb59
    %c1_i32_217 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_217) : (i32) -> ()
    cf.br ^bb128
  ^bb130:  // 2 preds: ^bb125, ^bb131
    %522 = llvm.getelementptr %15[%505] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %523 = llvm.load volatile %522 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %523, %9 : i32, !llvm.ptr
    %524 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64_218 = arith.constant 24 : i64
    %525 = arith.extui %524 : i32 to i64
    %526 = arith.addi %525, %c24_i64_218 : i64
    %c4_i64_219 = arith.constant 4 : i64
    %527 = arith.addi %526, %c4_i64_219 : i64
    %c0_i32_220 = arith.constant 0 : i32
    %528 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_220) : (!llvm.ptr, i32) -> i32
    %529 = arith.extui %528 : i32 to i64
    %c65536_i64_221 = arith.constant 65536 : i64
    %530 = arith.muli %529, %c65536_i64_221 : i64
    %531 = arith.cmpi ult, %527, %530 : i64
    cf.cond_br %531, ^bb132, ^bb133
  ^bb131:  // pred: ^bb125
    %c1_i32_222 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_222) : (i32) -> ()
    cf.br ^bb130
  ^bb132:  // 2 preds: ^bb130, ^bb133
    %532 = llvm.getelementptr %15[%526] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %533 = llvm.load volatile %532 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %533, %12 : i32, !llvm.ptr
    %534 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64_223 = arith.constant 20 : i64
    %535 = arith.extui %534 : i32 to i64
    %536 = arith.addi %535, %c20_i64_223 : i64
    %c4_i64_224 = arith.constant 4 : i64
    %537 = arith.addi %536, %c4_i64_224 : i64
    %c0_i32_225 = arith.constant 0 : i32
    %538 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_225) : (!llvm.ptr, i32) -> i32
    %539 = arith.extui %538 : i32 to i64
    %c65536_i64_226 = arith.constant 65536 : i64
    %540 = arith.muli %539, %c65536_i64_226 : i64
    %541 = arith.cmpi ult, %537, %540 : i64
    cf.cond_br %541, ^bb134, ^bb135
  ^bb133:  // pred: ^bb130
    %c1_i32_227 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_227) : (i32) -> ()
    cf.br ^bb132
  ^bb134:  // 2 preds: ^bb132, ^bb135
    %542 = llvm.getelementptr %15[%536] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %543 = llvm.load volatile %542 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %543, %10 : i32, !llvm.ptr
    cf.br ^bb138
  ^bb135:  // pred: ^bb132
    %c1_i32_228 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_228) : (i32) -> ()
    cf.br ^bb134
  ^bb136:  // pred: ^bb138
    %c1_i32_229 = arith.constant 1 : i32
    llvm.store %c1_i32_229, %11 : i32, !llvm.ptr
    %544 = llvm.load %10 : !llvm.ptr -> i32
    %545 = llvm.load %12 : !llvm.ptr -> i32
    %546 = llvm.load %8 : !llvm.ptr -> i32
    %547 = llvm.load %2 : !llvm.ptr -> i32
    %548 = llvm.load %3 : !llvm.ptr -> i32
    %549 = call @f155(%arg0, %544, %545, %546, %547, %548) : (!llvm.ptr, i32, i32, i32, i32, i32) -> i32
    %c0_i32_230 = arith.constant 0 : i32
    %550 = arith.cmpi ne, %549, %c0_i32_230 : i32
    cf.cond_br %550, ^bb58, ^bb151
  ^bb137:  // pred: ^bb150
    %c1_i32_231 = arith.constant 1 : i32
    cf.br ^bb2(%c1_i32_231 : i32)
  ^bb138:  // 2 preds: ^bb134, ^bb148
    %551 = llvm.load %1 : !llvm.ptr -> i32
    %c-1_i32_232 = arith.constant -1 : i32
    %552 = arith.addi %551, %c-1_i32_232 : i32
    llvm.store %552, %1 : i32, !llvm.ptr
    %c0_i32_233 = arith.constant 0 : i32
    %553 = arith.cmpi eq, %552, %c0_i32_233 : i32
    %554 = arith.extui %553 : i1 to i32
    %c0_i32_234 = arith.constant 0 : i32
    %555 = arith.cmpi ne, %554, %c0_i32_234 : i32
    cf.cond_br %555, ^bb136, ^bb139
  ^bb139:  // pred: ^bb138
    %556 = llvm.load %10 : !llvm.ptr -> i32
    %557 = llvm.load %9 : !llvm.ptr -> i32
    %558 = llvm.load %12 : !llvm.ptr -> i32
    %c16_i64_235 = arith.constant 16 : i64
    %559 = arith.extui %558 : i32 to i64
    %560 = arith.addi %559, %c16_i64_235 : i64
    %c4_i64_236 = arith.constant 4 : i64
    %561 = arith.addi %560, %c4_i64_236 : i64
    %c0_i32_237 = arith.constant 0 : i32
    %562 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_237) : (!llvm.ptr, i32) -> i32
    %563 = arith.extui %562 : i32 to i64
    %c65536_i64_238 = arith.constant 65536 : i64
    %564 = arith.muli %563, %c65536_i64_238 : i64
    %565 = arith.cmpi ult, %561, %564 : i64
    cf.cond_br %565, ^bb140, ^bb141
  ^bb140:  // 2 preds: ^bb139, ^bb141
    %566 = llvm.getelementptr %15[%560] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %567 = llvm.load volatile %566 {alignment = 1 : i64} : !llvm.ptr -> i32
    %568 = arith.cmpi ult, %567, %36 : i32
    cf.cond_br %568, ^bb142, ^bb143
  ^bb141:  // pred: ^bb139
    %c1_i32_239 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_239) : (i32) -> ()
    cf.br ^bb140
  ^bb142:  // 2 preds: ^bb140, ^bb143
    %569 = llvm.getelementptr inbounds %34[%567] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %570 = llvm.load %569 : !llvm.ptr -> !llvm.ptr
    %571 = llvm.ptrtoint %570 : !llvm.ptr to i64
    %c0_i64_240 = arith.constant 0 : i64
    %572 = arith.cmpi eq, %571, %c0_i64_240 : i64
    cf.cond_br %572, ^bb145, ^bb144
  ^bb143:  // pred: ^bb140
    %c3_i32_241 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_241) : (i32) -> ()
    cf.br ^bb142
  ^bb144:  // 2 preds: ^bb142, ^bb145
    %573 = llvm.getelementptr %570[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %574 = llvm.getelementptr %570[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %575 = llvm.getelementptr %570[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %576 = llvm.load %573 : !llvm.ptr -> !llvm.ptr
    %577 = llvm.load %575 : !llvm.ptr -> !llvm.ptr
    %578 = llvm.ptrtoint %576 : !llvm.ptr to i64
    %c0_i64_242 = arith.constant 0 : i64
    %579 = arith.cmpi eq, %578, %c0_i64_242 : i64
    cf.cond_br %579, ^bb147, ^bb146
  ^bb145:  // pred: ^bb142
    %c4_i32_243 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_243) : (i32) -> ()
    cf.br ^bb144
  ^bb146:  // 2 preds: ^bb144, ^bb147
    %580 = llvm.load %574 : !llvm.ptr -> i32
    %581 = arith.cmpi ne, %24, %580 : i32
    cf.cond_br %581, ^bb149, ^bb148
  ^bb147:  // pred: ^bb144
    %c3_i32_244 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_244) : (i32) -> ()
    cf.br ^bb146
  ^bb148:  // 2 preds: ^bb146, ^bb149
    %582 = llvm.call %576(%577, %556, %557) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_245 = arith.constant 0 : i32
    %583 = arith.cmpi eq, %582, %c0_i32_245 : i32
    %584 = arith.extui %583 : i1 to i32
    %c0_i32_246 = arith.constant 0 : i32
    %585 = arith.cmpi ne, %584, %c0_i32_246 : i32
    cf.cond_br %585, ^bb138, ^bb150
  ^bb149:  // pred: ^bb146
    %c5_i32_247 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_247) : (i32) -> ()
    cf.br ^bb148
  ^bb150:  // pred: ^bb148
    cf.br ^bb137
  ^bb151:  // pred: ^bb136
    %586 = llvm.load %10 : !llvm.ptr -> i32
    %587 = llvm.load %4 : !llvm.ptr -> i32
    %588 = llvm.load %5 : !llvm.ptr -> i32
    %589 = llvm.load %12 : !llvm.ptr -> i32
    %c12_i64_248 = arith.constant 12 : i64
    %590 = arith.extui %589 : i32 to i64
    %591 = arith.addi %590, %c12_i64_248 : i64
    %c4_i64_249 = arith.constant 4 : i64
    %592 = arith.addi %591, %c4_i64_249 : i64
    %c0_i32_250 = arith.constant 0 : i32
    %593 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_250) : (!llvm.ptr, i32) -> i32
    %594 = arith.extui %593 : i32 to i64
    %c65536_i64_251 = arith.constant 65536 : i64
    %595 = arith.muli %594, %c65536_i64_251 : i64
    %596 = arith.cmpi ult, %592, %595 : i64
    cf.cond_br %596, ^bb152, ^bb153
  ^bb152:  // 2 preds: ^bb151, ^bb153
    %597 = llvm.getelementptr %15[%591] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %598 = llvm.load volatile %597 {alignment = 1 : i64} : !llvm.ptr -> i32
    %599 = arith.cmpi ult, %598, %39 : i32
    cf.cond_br %599, ^bb154, ^bb155
  ^bb153:  // pred: ^bb151
    %c1_i32_252 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_252) : (i32) -> ()
    cf.br ^bb152
  ^bb154:  // 2 preds: ^bb152, ^bb155
    %600 = llvm.getelementptr inbounds %37[%598] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %601 = llvm.load %600 : !llvm.ptr -> !llvm.ptr
    %602 = llvm.ptrtoint %601 : !llvm.ptr to i64
    %c0_i64_253 = arith.constant 0 : i64
    %603 = arith.cmpi eq, %602, %c0_i64_253 : i64
    cf.cond_br %603, ^bb157, ^bb156
  ^bb155:  // pred: ^bb152
    %c3_i32_254 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_254) : (i32) -> ()
    cf.br ^bb154
  ^bb156:  // 2 preds: ^bb154, ^bb157
    %604 = llvm.getelementptr %601[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %605 = llvm.getelementptr %601[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %606 = llvm.getelementptr %601[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %607 = llvm.load %604 : !llvm.ptr -> !llvm.ptr
    %608 = llvm.load %606 : !llvm.ptr -> !llvm.ptr
    %609 = llvm.ptrtoint %607 : !llvm.ptr to i64
    %c0_i64_255 = arith.constant 0 : i64
    %610 = arith.cmpi eq, %609, %c0_i64_255 : i64
    cf.cond_br %610, ^bb159, ^bb158
  ^bb157:  // pred: ^bb154
    %c4_i32_256 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_256) : (i32) -> ()
    cf.br ^bb156
  ^bb158:  // 2 preds: ^bb156, ^bb159
    %611 = llvm.load %605 : !llvm.ptr -> i32
    %612 = arith.cmpi ne, %17, %611 : i32
    cf.cond_br %612, ^bb161, ^bb160
  ^bb159:  // pred: ^bb156
    %c3_i32_257 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_257) : (i32) -> ()
    cf.br ^bb158
  ^bb160:  // 2 preds: ^bb158, ^bb161
    %613 = llvm.call %607(%608, %586, %587, %588) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_258 = arith.constant 0 : i32
    %614 = arith.cmpi ne, %613, %c0_i32_258 : i32
    cf.cond_br %614, ^bb58, ^bb162
  ^bb161:  // pred: ^bb158
    %c5_i32_259 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_259) : (i32) -> ()
    cf.br ^bb160
  ^bb162:  // pred: ^bb160
    %c0_i32_260 = arith.constant 0 : i32
    llvm.store %c0_i32_260, %1 : i32, !llvm.ptr
    cf.br ^bb164
  ^bb163:  // pred: ^bb177
    %615 = llvm.load %1 : !llvm.ptr -> i32
    %c-1_i32_261 = arith.constant -1 : i32
    %616 = arith.addi %615, %c-1_i32_261 : i32
    %617 = llvm.load %6 : !llvm.ptr -> i32
    %618 = arith.cmpi ult, %616, %617 : i32
    %619 = arith.extui %618 : i1 to i32
    cf.br ^bb2(%619 : i32)
  ^bb164:  // 2 preds: ^bb162, ^bb175
    %620 = llvm.load %6 : !llvm.ptr -> i32
    %621 = llvm.load %1 : !llvm.ptr -> i32
    %622 = arith.cmpi eq, %620, %621 : i32
    %623 = arith.extui %622 : i1 to i32
    %c0_i32_262 = arith.constant 0 : i32
    %624 = arith.cmpi eq, %623, %c0_i32_262 : i32
    %625 = arith.extui %624 : i1 to i32
    %c0_i32_263 = arith.constant 0 : i32
    %626 = arith.cmpi ne, %625, %c0_i32_263 : i32
    cf.cond_br %626, ^bb165, ^bb166
  ^bb165:  // pred: ^bb164
    %627 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_264 = arith.constant 1 : i32
    %628 = arith.addi %627, %c1_i32_264 : i32
    llvm.store %628, %1 : i32, !llvm.ptr
    %629 = llvm.load %10 : !llvm.ptr -> i32
    %630 = llvm.load %9 : !llvm.ptr -> i32
    %631 = llvm.load %12 : !llvm.ptr -> i32
    %c16_i64_265 = arith.constant 16 : i64
    %632 = arith.extui %631 : i32 to i64
    %633 = arith.addi %632, %c16_i64_265 : i64
    %c4_i64_266 = arith.constant 4 : i64
    %634 = arith.addi %633, %c4_i64_266 : i64
    %c0_i32_267 = arith.constant 0 : i32
    %635 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_267) : (!llvm.ptr, i32) -> i32
    %636 = arith.extui %635 : i32 to i64
    %c65536_i64_268 = arith.constant 65536 : i64
    %637 = arith.muli %636, %c65536_i64_268 : i64
    %638 = arith.cmpi ult, %634, %637 : i64
    cf.cond_br %638, ^bb167, ^bb168
  ^bb166:  // pred: ^bb164
    %639 = llvm.load %6 : !llvm.ptr -> i32
    %640 = llvm.load %6 : !llvm.ptr -> i32
    %641 = arith.cmpi ult, %639, %640 : i32
    %642 = arith.extui %641 : i1 to i32
    cf.br ^bb2(%642 : i32)
  ^bb167:  // 2 preds: ^bb165, ^bb168
    %643 = llvm.getelementptr %15[%633] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %644 = llvm.load volatile %643 {alignment = 1 : i64} : !llvm.ptr -> i32
    %645 = arith.cmpi ult, %644, %42 : i32
    cf.cond_br %645, ^bb169, ^bb170
  ^bb168:  // pred: ^bb165
    %c1_i32_269 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_269) : (i32) -> ()
    cf.br ^bb167
  ^bb169:  // 2 preds: ^bb167, ^bb170
    %646 = llvm.getelementptr inbounds %40[%644] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %647 = llvm.load %646 : !llvm.ptr -> !llvm.ptr
    %648 = llvm.ptrtoint %647 : !llvm.ptr to i64
    %c0_i64_270 = arith.constant 0 : i64
    %649 = arith.cmpi eq, %648, %c0_i64_270 : i64
    cf.cond_br %649, ^bb172, ^bb171
  ^bb170:  // pred: ^bb167
    %c3_i32_271 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_271) : (i32) -> ()
    cf.br ^bb169
  ^bb171:  // 2 preds: ^bb169, ^bb172
    %650 = llvm.getelementptr %647[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %651 = llvm.getelementptr %647[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %652 = llvm.getelementptr %647[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %653 = llvm.load %650 : !llvm.ptr -> !llvm.ptr
    %654 = llvm.load %652 : !llvm.ptr -> !llvm.ptr
    %655 = llvm.ptrtoint %653 : !llvm.ptr to i64
    %c0_i64_272 = arith.constant 0 : i64
    %656 = arith.cmpi eq, %655, %c0_i64_272 : i64
    cf.cond_br %656, ^bb174, ^bb173
  ^bb172:  // pred: ^bb169
    %c4_i32_273 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_273) : (i32) -> ()
    cf.br ^bb171
  ^bb173:  // 2 preds: ^bb171, ^bb174
    %657 = llvm.load %651 : !llvm.ptr -> i32
    %658 = arith.cmpi ne, %24, %657 : i32
    cf.cond_br %658, ^bb176, ^bb175
  ^bb174:  // pred: ^bb171
    %c3_i32_274 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_274) : (i32) -> ()
    cf.br ^bb173
  ^bb175:  // 2 preds: ^bb173, ^bb176
    %659 = llvm.call %653(%654, %629, %630) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_275 = arith.constant 0 : i32
    %660 = arith.cmpi eq, %659, %c0_i32_275 : i32
    %661 = arith.extui %660 : i1 to i32
    %c0_i32_276 = arith.constant 0 : i32
    %662 = arith.cmpi ne, %661, %c0_i32_276 : i32
    cf.cond_br %662, ^bb164, ^bb177
  ^bb176:  // pred: ^bb173
    %c5_i32_277 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_277) : (i32) -> ()
    cf.br ^bb175
  ^bb177:  // pred: ^bb175
    cf.br ^bb163
  }
  func.func @f154(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %10 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %14 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %15 = arith.addi %14, %c3_i32 : i32
    %c-4_i32 = arith.constant -4 : i32
    %16 = arith.andi %15, %c-4_i32 : i32
    llvm.store %16, %2 : i32, !llvm.ptr
    %17 = llvm.load %0 : !llvm.ptr -> i32
    %18 = arith.subi %16, %17 : i32
    llvm.store %18, %3 : i32, !llvm.ptr
    %19 = arith.cmpi ult, %13, %18 : i32
    %20 = arith.extui %19 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %21 = arith.cmpi ne, %20, %c0_i32_9 : i32
    cf.cond_br %21, ^bb4, ^bb5
  ^bb2(%22: i32):  // 3 preds: ^bb3, ^bb58, ^bb66
    return %22 : i32
  ^bb3:  // 3 preds: ^bb40, ^bb67, ^bb82
    %23 = llvm.load %8 : !llvm.ptr -> i32
    cf.br ^bb2(%23 : i32)
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %24 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_10 = arith.constant 0 : i32
    %25 = arith.cmpi ne, %24, %c0_i32_10 : i32
    cf.cond_br %25, ^bb65, ^bb66
  ^bb5:  // pred: ^bb1
    %26 = llvm.load %1 : !llvm.ptr -> i32
    %27 = llvm.load %3 : !llvm.ptr -> i32
    %28 = arith.subi %26, %27 : i32
    llvm.store %28, %4 : i32, !llvm.ptr
    %c4_i32 = arith.constant 4 : i32
    %29 = arith.cmpi ult, %28, %c4_i32 : i32
    %30 = arith.extui %29 : i1 to i32
    %c0_i32_11 = arith.constant 0 : i32
    %31 = arith.cmpi ne, %30, %c0_i32_11 : i32
    cf.cond_br %31, ^bb4, ^bb6
  ^bb6:  // pred: ^bb5
    %32 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i32_12 = arith.constant 3 : i32
    %33 = arith.andi %32, %c3_i32_12 : i32
    llvm.store %33, %5 : i32, !llvm.ptr
    %c0_i32_13 = arith.constant 0 : i32
    llvm.store %c0_i32_13, %6 : i32, !llvm.ptr
    %c0_i32_14 = arith.constant 0 : i32
    llvm.store %c0_i32_14, %1 : i32, !llvm.ptr
    %34 = llvm.load %2 : !llvm.ptr -> i32
    %35 = llvm.load %0 : !llvm.ptr -> i32
    %36 = arith.cmpi eq, %34, %35 : i32
    %37 = arith.extui %36 : i1 to i32
    llvm.store %37, %7 : i32, !llvm.ptr
    %c0_i32_15 = arith.constant 0 : i32
    %38 = arith.cmpi ne, %37, %c0_i32_15 : i32
    cf.cond_br %38, ^bb7, ^bb8
  ^bb7:  // 3 preds: ^bb6, ^bb9, ^bb24
    %39 = llvm.load %0 : !llvm.ptr -> i32
    %40 = llvm.load %3 : !llvm.ptr -> i32
    %41 = arith.addi %39, %40 : i32
    llvm.store %41, %9 : i32, !llvm.ptr
    %42 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i32_16 = arith.constant 0 : i32
    %43 = arith.cmpi eq, %42, %c0_i32_16 : i32
    %44 = arith.extui %43 : i1 to i32
    %c0_i32_17 = arith.constant 0 : i32
    %45 = arith.cmpi ne, %44, %c0_i32_17 : i32
    cf.cond_br %45, ^bb29, ^bb30
  ^bb8:  // pred: ^bb6
    %c0_i32_18 = arith.constant 0 : i32
    llvm.store %c0_i32_18, %1 : i32, !llvm.ptr
    %46 = llvm.load %0 : !llvm.ptr -> i32
    %47 = llvm.load %2 : !llvm.ptr -> i32
    %48 = arith.subi %46, %47 : i32
    llvm.store %48, %8 : i32, !llvm.ptr
    %c-4_i32_19 = arith.constant -4 : i32
    %49 = arith.cmpi ule, %48, %c-4_i32_19 : i32
    %50 = arith.extui %49 : i1 to i32
    %c0_i32_20 = arith.constant 0 : i32
    %51 = arith.cmpi ne, %50, %c0_i32_20 : i32
    cf.cond_br %51, ^bb10, ^bb11
  ^bb9:  // 2 preds: ^bb11, ^bb12
    %52 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i32_21 = arith.constant 0 : i32
    %53 = arith.cmpi ne, %52, %c0_i32_21 : i32
    cf.cond_br %53, ^bb7, ^bb23
  ^bb10:  // pred: ^bb8
    %c0_i32_22 = arith.constant 0 : i32
    llvm.store %c0_i32_22, %9 : i32, !llvm.ptr
    cf.br ^bb13
  ^bb11:  // pred: ^bb8
    %c0_i32_23 = arith.constant 0 : i32
    llvm.store %c0_i32_23, %9 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb12:  // pred: ^bb22
    cf.br ^bb9
  ^bb13:  // 2 preds: ^bb10, ^bb20
    %54 = llvm.load %1 : !llvm.ptr -> i32
    %55 = llvm.load %0 : !llvm.ptr -> i32
    %56 = llvm.load %9 : !llvm.ptr -> i32
    %57 = arith.addi %55, %56 : i32
    llvm.store %57, %2 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %58 = arith.extui %57 : i32 to i64
    %59 = arith.addi %58, %c0_i64 : i64
    %c1_i64 = arith.constant 1 : i64
    %60 = arith.addi %59, %c1_i64 : i64
    %c0_i32_24 = arith.constant 0 : i32
    %61 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_24) : (!llvm.ptr, i32) -> i32
    %62 = arith.extui %61 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %63 = arith.muli %62, %c65536_i64 : i64
    %64 = arith.cmpi ult, %60, %63 : i64
    cf.cond_br %64, ^bb14, ^bb15
  ^bb14:  // 2 preds: ^bb13, ^bb15
    %65 = llvm.getelementptr %12[%59] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %66 = llvm.load volatile %65 {alignment = 1 : i64} : !llvm.ptr -> i8
    %67 = arith.extsi %66 : i8 to i32
    %c-65_i32 = arith.constant -65 : i32
    %68 = arith.cmpi sgt, %67, %c-65_i32 : i32
    %69 = arith.extui %68 : i1 to i32
    %70 = arith.addi %54, %69 : i32
    %71 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_25 = arith.constant 1 : i32
    %72 = arith.addi %71, %c1_i32_25 : i32
    %c0_i64_26 = arith.constant 0 : i64
    %73 = arith.extui %72 : i32 to i64
    %74 = arith.addi %73, %c0_i64_26 : i64
    %c1_i64_27 = arith.constant 1 : i64
    %75 = arith.addi %74, %c1_i64_27 : i64
    %c0_i32_28 = arith.constant 0 : i32
    %76 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_28) : (!llvm.ptr, i32) -> i32
    %77 = arith.extui %76 : i32 to i64
    %c65536_i64_29 = arith.constant 65536 : i64
    %78 = arith.muli %77, %c65536_i64_29 : i64
    %79 = arith.cmpi ult, %75, %78 : i64
    cf.cond_br %79, ^bb16, ^bb17
  ^bb15:  // pred: ^bb13
    %c1_i32_30 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_30) : (i32) -> ()
    cf.br ^bb14
  ^bb16:  // 2 preds: ^bb14, ^bb17
    %80 = llvm.getelementptr %12[%74] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %81 = llvm.load volatile %80 {alignment = 1 : i64} : !llvm.ptr -> i8
    %82 = arith.extsi %81 : i8 to i32
    %c-65_i32_31 = arith.constant -65 : i32
    %83 = arith.cmpi sgt, %82, %c-65_i32_31 : i32
    %84 = arith.extui %83 : i1 to i32
    %85 = arith.addi %70, %84 : i32
    %86 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %87 = arith.addi %86, %c2_i32 : i32
    %c0_i64_32 = arith.constant 0 : i64
    %88 = arith.extui %87 : i32 to i64
    %89 = arith.addi %88, %c0_i64_32 : i64
    %c1_i64_33 = arith.constant 1 : i64
    %90 = arith.addi %89, %c1_i64_33 : i64
    %c0_i32_34 = arith.constant 0 : i32
    %91 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_34) : (!llvm.ptr, i32) -> i32
    %92 = arith.extui %91 : i32 to i64
    %c65536_i64_35 = arith.constant 65536 : i64
    %93 = arith.muli %92, %c65536_i64_35 : i64
    %94 = arith.cmpi ult, %90, %93 : i64
    cf.cond_br %94, ^bb18, ^bb19
  ^bb17:  // pred: ^bb14
    %c1_i32_36 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_36) : (i32) -> ()
    cf.br ^bb16
  ^bb18:  // 2 preds: ^bb16, ^bb19
    %95 = llvm.getelementptr %12[%89] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %96 = llvm.load volatile %95 {alignment = 1 : i64} : !llvm.ptr -> i8
    %97 = arith.extsi %96 : i8 to i32
    %c-65_i32_37 = arith.constant -65 : i32
    %98 = arith.cmpi sgt, %97, %c-65_i32_37 : i32
    %99 = arith.extui %98 : i1 to i32
    %100 = arith.addi %85, %99 : i32
    %101 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i32_38 = arith.constant 3 : i32
    %102 = arith.addi %101, %c3_i32_38 : i32
    %c0_i64_39 = arith.constant 0 : i64
    %103 = arith.extui %102 : i32 to i64
    %104 = arith.addi %103, %c0_i64_39 : i64
    %c1_i64_40 = arith.constant 1 : i64
    %105 = arith.addi %104, %c1_i64_40 : i64
    %c0_i32_41 = arith.constant 0 : i32
    %106 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_41) : (!llvm.ptr, i32) -> i32
    %107 = arith.extui %106 : i32 to i64
    %c65536_i64_42 = arith.constant 65536 : i64
    %108 = arith.muli %107, %c65536_i64_42 : i64
    %109 = arith.cmpi ult, %105, %108 : i64
    cf.cond_br %109, ^bb20, ^bb21
  ^bb19:  // pred: ^bb16
    %c1_i32_43 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_43) : (i32) -> ()
    cf.br ^bb18
  ^bb20:  // 2 preds: ^bb18, ^bb21
    %110 = llvm.getelementptr %12[%104] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %111 = llvm.load volatile %110 {alignment = 1 : i64} : !llvm.ptr -> i8
    %112 = arith.extsi %111 : i8 to i32
    %c-65_i32_44 = arith.constant -65 : i32
    %113 = arith.cmpi sgt, %112, %c-65_i32_44 : i32
    %114 = arith.extui %113 : i1 to i32
    %115 = arith.addi %100, %114 : i32
    llvm.store %115, %1 : i32, !llvm.ptr
    %116 = llvm.load %9 : !llvm.ptr -> i32
    %c4_i32_45 = arith.constant 4 : i32
    %117 = arith.addi %116, %c4_i32_45 : i32
    llvm.store %117, %9 : i32, !llvm.ptr
    %c0_i32_46 = arith.constant 0 : i32
    %118 = arith.cmpi ne, %117, %c0_i32_46 : i32
    cf.cond_br %118, ^bb13, ^bb22
  ^bb21:  // pred: ^bb18
    %c1_i32_47 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_47) : (i32) -> ()
    cf.br ^bb20
  ^bb22:  // pred: ^bb20
    cf.br ^bb12
  ^bb23:  // pred: ^bb9
    %119 = llvm.load %0 : !llvm.ptr -> i32
    %120 = llvm.load %9 : !llvm.ptr -> i32
    %121 = arith.addi %119, %120 : i32
    llvm.store %121, %2 : i32, !llvm.ptr
    cf.br ^bb25
  ^bb24:  // pred: ^bb28
    cf.br ^bb7
  ^bb25:  // 2 preds: ^bb23, ^bb26
    %122 = llvm.load %1 : !llvm.ptr -> i32
    %123 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_48 = arith.constant 0 : i64
    %124 = arith.extui %123 : i32 to i64
    %125 = arith.addi %124, %c0_i64_48 : i64
    %c1_i64_49 = arith.constant 1 : i64
    %126 = arith.addi %125, %c1_i64_49 : i64
    %c0_i32_50 = arith.constant 0 : i32
    %127 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_50) : (!llvm.ptr, i32) -> i32
    %128 = arith.extui %127 : i32 to i64
    %c65536_i64_51 = arith.constant 65536 : i64
    %129 = arith.muli %128, %c65536_i64_51 : i64
    %130 = arith.cmpi ult, %126, %129 : i64
    cf.cond_br %130, ^bb26, ^bb27
  ^bb26:  // 2 preds: ^bb25, ^bb27
    %131 = llvm.getelementptr %12[%125] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %132 = llvm.load volatile %131 {alignment = 1 : i64} : !llvm.ptr -> i8
    %133 = arith.extsi %132 : i8 to i32
    %c-65_i32_52 = arith.constant -65 : i32
    %134 = arith.cmpi sgt, %133, %c-65_i32_52 : i32
    %135 = arith.extui %134 : i1 to i32
    %136 = arith.addi %122, %135 : i32
    llvm.store %136, %1 : i32, !llvm.ptr
    %137 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_53 = arith.constant 1 : i32
    %138 = arith.addi %137, %c1_i32_53 : i32
    llvm.store %138, %2 : i32, !llvm.ptr
    %139 = llvm.load %8 : !llvm.ptr -> i32
    %c1_i32_54 = arith.constant 1 : i32
    %140 = arith.addi %139, %c1_i32_54 : i32
    llvm.store %140, %8 : i32, !llvm.ptr
    %c0_i32_55 = arith.constant 0 : i32
    %141 = arith.cmpi ne, %140, %c0_i32_55 : i32
    cf.cond_br %141, ^bb25, ^bb28
  ^bb27:  // pred: ^bb25
    %c1_i32_56 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_56) : (i32) -> ()
    cf.br ^bb26
  ^bb28:  // pred: ^bb26
    cf.br ^bb24
  ^bb29:  // 4 preds: ^bb7, ^bb31, ^bb34, ^bb37
    %142 = llvm.load %4 : !llvm.ptr -> i32
    %c2_i32_57 = arith.constant 2 : i32
    %c31_i32 = arith.constant 31 : i32
    %143 = arith.cmpi ule, %c2_i32_57, %c31_i32 : i32
    %144 = scf.if %143 -> (i32) {
      %521 = arith.shrui %142, %c2_i32_57 : i32
      scf.yield %521 : i32
    } else {
      %c0_i32_231 = arith.constant 0 : i32
      scf.yield %c0_i32_231 : i32
    }
    llvm.store %144, %3 : i32, !llvm.ptr
    %145 = llvm.load %6 : !llvm.ptr -> i32
    %146 = llvm.load %1 : !llvm.ptr -> i32
    %147 = arith.addi %145, %146 : i32
    llvm.store %147, %8 : i32, !llvm.ptr
    cf.br ^bb40
  ^bb30:  // pred: ^bb7
    %148 = llvm.load %9 : !llvm.ptr -> i32
    %149 = llvm.load %4 : !llvm.ptr -> i32
    %c-4_i32_58 = arith.constant -4 : i32
    %150 = arith.andi %149, %c-4_i32_58 : i32
    %151 = arith.addi %148, %150 : i32
    llvm.store %151, %2 : i32, !llvm.ptr
    %c0_i64_59 = arith.constant 0 : i64
    %152 = arith.extui %151 : i32 to i64
    %153 = arith.addi %152, %c0_i64_59 : i64
    %c1_i64_60 = arith.constant 1 : i64
    %154 = arith.addi %153, %c1_i64_60 : i64
    %c0_i32_61 = arith.constant 0 : i32
    %155 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_61) : (!llvm.ptr, i32) -> i32
    %156 = arith.extui %155 : i32 to i64
    %c65536_i64_62 = arith.constant 65536 : i64
    %157 = arith.muli %156, %c65536_i64_62 : i64
    %158 = arith.cmpi ult, %154, %157 : i64
    cf.cond_br %158, ^bb31, ^bb32
  ^bb31:  // 2 preds: ^bb30, ^bb32
    %159 = llvm.getelementptr %12[%153] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %160 = llvm.load volatile %159 {alignment = 1 : i64} : !llvm.ptr -> i8
    %161 = arith.extsi %160 : i8 to i32
    %c-65_i32_63 = arith.constant -65 : i32
    %162 = arith.cmpi sgt, %161, %c-65_i32_63 : i32
    %163 = arith.extui %162 : i1 to i32
    llvm.store %163, %6 : i32, !llvm.ptr
    %164 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i32_64 = arith.constant 1 : i32
    %165 = arith.cmpi eq, %164, %c1_i32_64 : i32
    %166 = arith.extui %165 : i1 to i32
    %c0_i32_65 = arith.constant 0 : i32
    %167 = arith.cmpi ne, %166, %c0_i32_65 : i32
    cf.cond_br %167, ^bb29, ^bb33
  ^bb32:  // pred: ^bb30
    %c1_i32_66 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_66) : (i32) -> ()
    cf.br ^bb31
  ^bb33:  // pred: ^bb31
    %168 = llvm.load %6 : !llvm.ptr -> i32
    %169 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_67 = arith.constant 1 : i64
    %170 = arith.extui %169 : i32 to i64
    %171 = arith.addi %170, %c1_i64_67 : i64
    %c1_i64_68 = arith.constant 1 : i64
    %172 = arith.addi %171, %c1_i64_68 : i64
    %c0_i32_69 = arith.constant 0 : i32
    %173 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_69) : (!llvm.ptr, i32) -> i32
    %174 = arith.extui %173 : i32 to i64
    %c65536_i64_70 = arith.constant 65536 : i64
    %175 = arith.muli %174, %c65536_i64_70 : i64
    %176 = arith.cmpi ult, %172, %175 : i64
    cf.cond_br %176, ^bb34, ^bb35
  ^bb34:  // 2 preds: ^bb33, ^bb35
    %177 = llvm.getelementptr %12[%171] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %178 = llvm.load volatile %177 {alignment = 1 : i64} : !llvm.ptr -> i8
    %179 = arith.extsi %178 : i8 to i32
    %c-65_i32_71 = arith.constant -65 : i32
    %180 = arith.cmpi sgt, %179, %c-65_i32_71 : i32
    %181 = arith.extui %180 : i1 to i32
    %182 = arith.addi %168, %181 : i32
    llvm.store %182, %6 : i32, !llvm.ptr
    %183 = llvm.load %5 : !llvm.ptr -> i32
    %c2_i32_72 = arith.constant 2 : i32
    %184 = arith.cmpi eq, %183, %c2_i32_72 : i32
    %185 = arith.extui %184 : i1 to i32
    %c0_i32_73 = arith.constant 0 : i32
    %186 = arith.cmpi ne, %185, %c0_i32_73 : i32
    cf.cond_br %186, ^bb29, ^bb36
  ^bb35:  // pred: ^bb33
    %c1_i32_74 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_74) : (i32) -> ()
    cf.br ^bb34
  ^bb36:  // pred: ^bb34
    %187 = llvm.load %6 : !llvm.ptr -> i32
    %188 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i64 = arith.constant 2 : i64
    %189 = arith.extui %188 : i32 to i64
    %190 = arith.addi %189, %c2_i64 : i64
    %c1_i64_75 = arith.constant 1 : i64
    %191 = arith.addi %190, %c1_i64_75 : i64
    %c0_i32_76 = arith.constant 0 : i32
    %192 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_76) : (!llvm.ptr, i32) -> i32
    %193 = arith.extui %192 : i32 to i64
    %c65536_i64_77 = arith.constant 65536 : i64
    %194 = arith.muli %193, %c65536_i64_77 : i64
    %195 = arith.cmpi ult, %191, %194 : i64
    cf.cond_br %195, ^bb37, ^bb38
  ^bb37:  // 2 preds: ^bb36, ^bb38
    %196 = llvm.getelementptr %12[%190] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %197 = llvm.load volatile %196 {alignment = 1 : i64} : !llvm.ptr -> i8
    %198 = arith.extsi %197 : i8 to i32
    %c-65_i32_78 = arith.constant -65 : i32
    %199 = arith.cmpi sgt, %198, %c-65_i32_78 : i32
    %200 = arith.extui %199 : i1 to i32
    %201 = arith.addi %187, %200 : i32
    llvm.store %201, %6 : i32, !llvm.ptr
    cf.br ^bb29
  ^bb38:  // pred: ^bb36
    %c1_i32_79 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_79) : (i32) -> ()
    cf.br ^bb37
  ^bb39:  // pred: ^bb55
    %202 = llvm.load %4 : !llvm.ptr -> i32
    %203 = llvm.load %6 : !llvm.ptr -> i32
    %c252_i32 = arith.constant 252 : i32
    %204 = arith.andi %203, %c252_i32 : i32
    %c2_i32_80 = arith.constant 2 : i32
    %c31_i32_81 = arith.constant 31 : i32
    %205 = arith.cmpi ule, %c2_i32_80, %c31_i32_81 : i32
    %206 = scf.if %205 -> (i32) {
      %521 = arith.shli %204, %c2_i32_80 : i32
      scf.yield %521 : i32
    } else {
      %c0_i32_231 = arith.constant 0 : i32
      scf.yield %c0_i32_231 : i32
    }
    %207 = arith.addi %202, %206 : i32
    llvm.store %207, %2 : i32, !llvm.ptr
    %c0_i64_82 = arith.constant 0 : i64
    %208 = arith.extui %207 : i32 to i64
    %209 = arith.addi %208, %c0_i64_82 : i64
    %c4_i64 = arith.constant 4 : i64
    %210 = arith.addi %209, %c4_i64 : i64
    %c0_i32_83 = arith.constant 0 : i32
    %211 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_83) : (!llvm.ptr, i32) -> i32
    %212 = arith.extui %211 : i32 to i64
    %c65536_i64_84 = arith.constant 65536 : i64
    %213 = arith.muli %212, %c65536_i64_84 : i64
    %214 = arith.cmpi ult, %210, %213 : i64
    cf.cond_br %214, ^bb56, ^bb57
  ^bb40:  // 2 preds: ^bb29, ^bb42
    %215 = llvm.load %9 : !llvm.ptr -> i32
    llvm.store %215, %4 : i32, !llvm.ptr
    %216 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_85 = arith.constant 0 : i32
    %217 = arith.cmpi eq, %216, %c0_i32_85 : i32
    %218 = arith.extui %217 : i1 to i32
    %c0_i32_86 = arith.constant 0 : i32
    %219 = arith.cmpi ne, %218, %c0_i32_86 : i32
    cf.cond_br %219, ^bb3, ^bb41
  ^bb41:  // pred: ^bb40
    %220 = llvm.load %3 : !llvm.ptr -> i32
    %c192_i32 = arith.constant 192 : i32
    %221 = llvm.load %3 : !llvm.ptr -> i32
    %c192_i32_87 = arith.constant 192 : i32
    %222 = arith.cmpi ult, %221, %c192_i32_87 : i32
    %223 = arith.extui %222 : i1 to i32
    %c0_i32_88 = arith.constant 0 : i32
    %224 = arith.cmpi ne, %223, %c0_i32_88 : i32
    %225 = arith.select %224, %220, %c192_i32 : i32
    llvm.store %225, %6 : i32, !llvm.ptr
    %c3_i32_89 = arith.constant 3 : i32
    %226 = arith.andi %225, %c3_i32_89 : i32
    llvm.store %226, %7 : i32, !llvm.ptr
    %227 = llvm.load %6 : !llvm.ptr -> i32
    %c2_i32_90 = arith.constant 2 : i32
    %c31_i32_91 = arith.constant 31 : i32
    %228 = arith.cmpi ule, %c2_i32_90, %c31_i32_91 : i32
    %229 = scf.if %228 -> (i32) {
      %521 = arith.shli %227, %c2_i32_90 : i32
      scf.yield %521 : i32
    } else {
      %c0_i32_231 = arith.constant 0 : i32
      scf.yield %c0_i32_231 : i32
    }
    llvm.store %229, %5 : i32, !llvm.ptr
    %c0_i32_92 = arith.constant 0 : i32
    llvm.store %c0_i32_92, %2 : i32, !llvm.ptr
    %230 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32_93 = arith.constant 4 : i32
    %231 = arith.cmpi ult, %230, %c4_i32_93 : i32
    %232 = arith.extui %231 : i1 to i32
    %c0_i32_94 = arith.constant 0 : i32
    %233 = arith.cmpi ne, %232, %c0_i32_94 : i32
    cf.cond_br %233, ^bb42, ^bb43
  ^bb42:  // 2 preds: ^bb41, ^bb44
    %234 = llvm.load %3 : !llvm.ptr -> i32
    %235 = llvm.load %6 : !llvm.ptr -> i32
    %236 = arith.subi %234, %235 : i32
    llvm.store %236, %3 : i32, !llvm.ptr
    %237 = llvm.load %4 : !llvm.ptr -> i32
    %238 = llvm.load %5 : !llvm.ptr -> i32
    %239 = arith.addi %237, %238 : i32
    llvm.store %239, %9 : i32, !llvm.ptr
    %240 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %c31_i32_95 = arith.constant 31 : i32
    %241 = arith.cmpi ule, %c8_i32, %c31_i32_95 : i32
    %242 = scf.if %241 -> (i32) {
      %521 = arith.shrui %240, %c8_i32 : i32
      scf.yield %521 : i32
    } else {
      %c0_i32_231 = arith.constant 0 : i32
      scf.yield %c0_i32_231 : i32
    }
    %c16711935_i32 = arith.constant 16711935 : i32
    %243 = arith.andi %242, %c16711935_i32 : i32
    %244 = llvm.load %2 : !llvm.ptr -> i32
    %c16711935_i32_96 = arith.constant 16711935 : i32
    %245 = arith.andi %244, %c16711935_i32_96 : i32
    %246 = arith.addi %243, %245 : i32
    %c65537_i32 = arith.constant 65537 : i32
    %247 = arith.muli %246, %c65537_i32 : i32
    %c16_i32 = arith.constant 16 : i32
    %c31_i32_97 = arith.constant 31 : i32
    %248 = arith.cmpi ule, %c16_i32, %c31_i32_97 : i32
    %249 = scf.if %248 -> (i32) {
      %521 = arith.shrui %247, %c16_i32 : i32
      scf.yield %521 : i32
    } else {
      %c0_i32_231 = arith.constant 0 : i32
      scf.yield %c0_i32_231 : i32
    }
    %250 = llvm.load %8 : !llvm.ptr -> i32
    %251 = arith.addi %249, %250 : i32
    llvm.store %251, %8 : i32, !llvm.ptr
    %252 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i32_98 = arith.constant 0 : i32
    %253 = arith.cmpi eq, %252, %c0_i32_98 : i32
    %254 = arith.extui %253 : i1 to i32
    %c0_i32_99 = arith.constant 0 : i32
    %255 = arith.cmpi ne, %254, %c0_i32_99 : i32
    cf.cond_br %255, ^bb40, ^bb55
  ^bb43:  // pred: ^bb41
    %256 = llvm.load %4 : !llvm.ptr -> i32
    %257 = llvm.load %5 : !llvm.ptr -> i32
    %c1008_i32 = arith.constant 1008 : i32
    %258 = arith.andi %257, %c1008_i32 : i32
    %259 = arith.addi %256, %258 : i32
    llvm.store %259, %0 : i32, !llvm.ptr
    %c0_i32_100 = arith.constant 0 : i32
    llvm.store %c0_i32_100, %2 : i32, !llvm.ptr
    %260 = llvm.load %4 : !llvm.ptr -> i32
    llvm.store %260, %1 : i32, !llvm.ptr
    cf.br ^bb45
  ^bb44:  // pred: ^bb54
    cf.br ^bb42
  ^bb45:  // 2 preds: ^bb43, ^bb52
    %261 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %262 = arith.extui %261 : i32 to i64
    %263 = arith.addi %262, %c12_i64 : i64
    %c4_i64_101 = arith.constant 4 : i64
    %264 = arith.addi %263, %c4_i64_101 : i64
    %c0_i32_102 = arith.constant 0 : i32
    %265 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_102) : (!llvm.ptr, i32) -> i32
    %266 = arith.extui %265 : i32 to i64
    %c65536_i64_103 = arith.constant 65536 : i64
    %267 = arith.muli %266, %c65536_i64_103 : i64
    %268 = arith.cmpi ult, %264, %267 : i64
    cf.cond_br %268, ^bb46, ^bb47
  ^bb46:  // 2 preds: ^bb45, ^bb47
    %269 = llvm.getelementptr %12[%263] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %270 = llvm.load volatile %269 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %270, %9 : i32, !llvm.ptr
    %c-1_i32 = arith.constant -1 : i32
    %271 = arith.xori %270, %c-1_i32 : i32
    %c7_i32 = arith.constant 7 : i32
    %c31_i32_104 = arith.constant 31 : i32
    %272 = arith.cmpi ule, %c7_i32, %c31_i32_104 : i32
    %273 = scf.if %272 -> (i32) {
      %521 = arith.shrui %271, %c7_i32 : i32
      scf.yield %521 : i32
    } else {
      %c0_i32_231 = arith.constant 0 : i32
      scf.yield %c0_i32_231 : i32
    }
    %274 = llvm.load %9 : !llvm.ptr -> i32
    %c6_i32 = arith.constant 6 : i32
    %c31_i32_105 = arith.constant 31 : i32
    %275 = arith.cmpi ule, %c6_i32, %c31_i32_105 : i32
    %276 = scf.if %275 -> (i32) {
      %521 = arith.shrui %274, %c6_i32 : i32
      scf.yield %521 : i32
    } else {
      %c0_i32_231 = arith.constant 0 : i32
      scf.yield %c0_i32_231 : i32
    }
    %277 = arith.ori %273, %276 : i32
    %c16843009_i32 = arith.constant 16843009 : i32
    %278 = arith.andi %277, %c16843009_i32 : i32
    %279 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %280 = arith.extui %279 : i32 to i64
    %281 = arith.addi %280, %c8_i64 : i64
    %c4_i64_106 = arith.constant 4 : i64
    %282 = arith.addi %281, %c4_i64_106 : i64
    %c0_i32_107 = arith.constant 0 : i32
    %283 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_107) : (!llvm.ptr, i32) -> i32
    %284 = arith.extui %283 : i32 to i64
    %c65536_i64_108 = arith.constant 65536 : i64
    %285 = arith.muli %284, %c65536_i64_108 : i64
    %286 = arith.cmpi ult, %282, %285 : i64
    cf.cond_br %286, ^bb48, ^bb49
  ^bb47:  // pred: ^bb45
    %c1_i32_109 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_109) : (i32) -> ()
    cf.br ^bb46
  ^bb48:  // 2 preds: ^bb46, ^bb49
    %287 = llvm.getelementptr %12[%281] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %288 = llvm.load volatile %287 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %288, %9 : i32, !llvm.ptr
    %c-1_i32_110 = arith.constant -1 : i32
    %289 = arith.xori %288, %c-1_i32_110 : i32
    %c7_i32_111 = arith.constant 7 : i32
    %c31_i32_112 = arith.constant 31 : i32
    %290 = arith.cmpi ule, %c7_i32_111, %c31_i32_112 : i32
    %291 = scf.if %290 -> (i32) {
      %521 = arith.shrui %289, %c7_i32_111 : i32
      scf.yield %521 : i32
    } else {
      %c0_i32_231 = arith.constant 0 : i32
      scf.yield %c0_i32_231 : i32
    }
    %292 = llvm.load %9 : !llvm.ptr -> i32
    %c6_i32_113 = arith.constant 6 : i32
    %c31_i32_114 = arith.constant 31 : i32
    %293 = arith.cmpi ule, %c6_i32_113, %c31_i32_114 : i32
    %294 = scf.if %293 -> (i32) {
      %521 = arith.shrui %292, %c6_i32_113 : i32
      scf.yield %521 : i32
    } else {
      %c0_i32_231 = arith.constant 0 : i32
      scf.yield %c0_i32_231 : i32
    }
    %295 = arith.ori %291, %294 : i32
    %c16843009_i32_115 = arith.constant 16843009 : i32
    %296 = arith.andi %295, %c16843009_i32_115 : i32
    %297 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_116 = arith.constant 4 : i64
    %298 = arith.extui %297 : i32 to i64
    %299 = arith.addi %298, %c4_i64_116 : i64
    %c4_i64_117 = arith.constant 4 : i64
    %300 = arith.addi %299, %c4_i64_117 : i64
    %c0_i32_118 = arith.constant 0 : i32
    %301 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_118) : (!llvm.ptr, i32) -> i32
    %302 = arith.extui %301 : i32 to i64
    %c65536_i64_119 = arith.constant 65536 : i64
    %303 = arith.muli %302, %c65536_i64_119 : i64
    %304 = arith.cmpi ult, %300, %303 : i64
    cf.cond_br %304, ^bb50, ^bb51
  ^bb49:  // pred: ^bb46
    %c1_i32_120 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_120) : (i32) -> ()
    cf.br ^bb48
  ^bb50:  // 2 preds: ^bb48, ^bb51
    %305 = llvm.getelementptr %12[%299] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %306 = llvm.load volatile %305 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %306, %9 : i32, !llvm.ptr
    %c-1_i32_121 = arith.constant -1 : i32
    %307 = arith.xori %306, %c-1_i32_121 : i32
    %c7_i32_122 = arith.constant 7 : i32
    %c31_i32_123 = arith.constant 31 : i32
    %308 = arith.cmpi ule, %c7_i32_122, %c31_i32_123 : i32
    %309 = scf.if %308 -> (i32) {
      %521 = arith.shrui %307, %c7_i32_122 : i32
      scf.yield %521 : i32
    } else {
      %c0_i32_231 = arith.constant 0 : i32
      scf.yield %c0_i32_231 : i32
    }
    %310 = llvm.load %9 : !llvm.ptr -> i32
    %c6_i32_124 = arith.constant 6 : i32
    %c31_i32_125 = arith.constant 31 : i32
    %311 = arith.cmpi ule, %c6_i32_124, %c31_i32_125 : i32
    %312 = scf.if %311 -> (i32) {
      %521 = arith.shrui %310, %c6_i32_124 : i32
      scf.yield %521 : i32
    } else {
      %c0_i32_231 = arith.constant 0 : i32
      scf.yield %c0_i32_231 : i32
    }
    %313 = arith.ori %309, %312 : i32
    %c16843009_i32_126 = arith.constant 16843009 : i32
    %314 = arith.andi %313, %c16843009_i32_126 : i32
    %315 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_127 = arith.constant 0 : i64
    %316 = arith.extui %315 : i32 to i64
    %317 = arith.addi %316, %c0_i64_127 : i64
    %c4_i64_128 = arith.constant 4 : i64
    %318 = arith.addi %317, %c4_i64_128 : i64
    %c0_i32_129 = arith.constant 0 : i32
    %319 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_129) : (!llvm.ptr, i32) -> i32
    %320 = arith.extui %319 : i32 to i64
    %c65536_i64_130 = arith.constant 65536 : i64
    %321 = arith.muli %320, %c65536_i64_130 : i64
    %322 = arith.cmpi ult, %318, %321 : i64
    cf.cond_br %322, ^bb52, ^bb53
  ^bb51:  // pred: ^bb48
    %c1_i32_131 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_131) : (i32) -> ()
    cf.br ^bb50
  ^bb52:  // 2 preds: ^bb50, ^bb53
    %323 = llvm.getelementptr %12[%317] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %324 = llvm.load volatile %323 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %324, %9 : i32, !llvm.ptr
    %c-1_i32_132 = arith.constant -1 : i32
    %325 = arith.xori %324, %c-1_i32_132 : i32
    %c7_i32_133 = arith.constant 7 : i32
    %c31_i32_134 = arith.constant 31 : i32
    %326 = arith.cmpi ule, %c7_i32_133, %c31_i32_134 : i32
    %327 = scf.if %326 -> (i32) {
      %521 = arith.shrui %325, %c7_i32_133 : i32
      scf.yield %521 : i32
    } else {
      %c0_i32_231 = arith.constant 0 : i32
      scf.yield %c0_i32_231 : i32
    }
    %328 = llvm.load %9 : !llvm.ptr -> i32
    %c6_i32_135 = arith.constant 6 : i32
    %c31_i32_136 = arith.constant 31 : i32
    %329 = arith.cmpi ule, %c6_i32_135, %c31_i32_136 : i32
    %330 = scf.if %329 -> (i32) {
      %521 = arith.shrui %328, %c6_i32_135 : i32
      scf.yield %521 : i32
    } else {
      %c0_i32_231 = arith.constant 0 : i32
      scf.yield %c0_i32_231 : i32
    }
    %331 = arith.ori %327, %330 : i32
    %c16843009_i32_137 = arith.constant 16843009 : i32
    %332 = arith.andi %331, %c16843009_i32_137 : i32
    %333 = llvm.load %2 : !llvm.ptr -> i32
    %334 = arith.addi %332, %333 : i32
    %335 = arith.addi %314, %334 : i32
    %336 = arith.addi %296, %335 : i32
    %337 = arith.addi %278, %336 : i32
    llvm.store %337, %2 : i32, !llvm.ptr
    %338 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32_138 = arith.constant 16 : i32
    %339 = arith.addi %338, %c16_i32_138 : i32
    llvm.store %339, %1 : i32, !llvm.ptr
    %340 = llvm.load %0 : !llvm.ptr -> i32
    %341 = arith.cmpi eq, %339, %340 : i32
    %342 = arith.extui %341 : i1 to i32
    %c0_i32_139 = arith.constant 0 : i32
    %343 = arith.cmpi eq, %342, %c0_i32_139 : i32
    %344 = arith.extui %343 : i1 to i32
    %c0_i32_140 = arith.constant 0 : i32
    %345 = arith.cmpi ne, %344, %c0_i32_140 : i32
    cf.cond_br %345, ^bb45, ^bb54
  ^bb53:  // pred: ^bb50
    %c1_i32_141 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_141) : (i32) -> ()
    cf.br ^bb52
  ^bb54:  // pred: ^bb52
    cf.br ^bb44
  ^bb55:  // pred: ^bb42
    cf.br ^bb39
  ^bb56:  // 2 preds: ^bb39, ^bb57
    %346 = llvm.getelementptr %12[%209] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %347 = llvm.load volatile %346 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %347, %1 : i32, !llvm.ptr
    %c-1_i32_142 = arith.constant -1 : i32
    %348 = arith.xori %347, %c-1_i32_142 : i32
    %c7_i32_143 = arith.constant 7 : i32
    %c31_i32_144 = arith.constant 31 : i32
    %349 = arith.cmpi ule, %c7_i32_143, %c31_i32_144 : i32
    %350 = scf.if %349 -> (i32) {
      %521 = arith.shrui %348, %c7_i32_143 : i32
      scf.yield %521 : i32
    } else {
      %c0_i32_231 = arith.constant 0 : i32
      scf.yield %c0_i32_231 : i32
    }
    %351 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i32_145 = arith.constant 6 : i32
    %c31_i32_146 = arith.constant 31 : i32
    %352 = arith.cmpi ule, %c6_i32_145, %c31_i32_146 : i32
    %353 = scf.if %352 -> (i32) {
      %521 = arith.shrui %351, %c6_i32_145 : i32
      scf.yield %521 : i32
    } else {
      %c0_i32_231 = arith.constant 0 : i32
      scf.yield %c0_i32_231 : i32
    }
    %354 = arith.ori %350, %353 : i32
    %c16843009_i32_147 = arith.constant 16843009 : i32
    %355 = arith.andi %354, %c16843009_i32_147 : i32
    llvm.store %355, %1 : i32, !llvm.ptr
    %356 = llvm.load %7 : !llvm.ptr -> i32
    %c1_i32_148 = arith.constant 1 : i32
    %357 = arith.cmpi eq, %356, %c1_i32_148 : i32
    %358 = arith.extui %357 : i1 to i32
    %c0_i32_149 = arith.constant 0 : i32
    %359 = arith.cmpi ne, %358, %c0_i32_149 : i32
    cf.cond_br %359, ^bb58, ^bb59
  ^bb57:  // pred: ^bb39
    %c1_i32_150 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_150) : (i32) -> ()
    cf.br ^bb56
  ^bb58:  // 3 preds: ^bb56, ^bb60, ^bb63
    %360 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_151 = arith.constant 8 : i32
    %c31_i32_152 = arith.constant 31 : i32
    %361 = arith.cmpi ule, %c8_i32_151, %c31_i32_152 : i32
    %362 = scf.if %361 -> (i32) {
      %521 = arith.shrui %360, %c8_i32_151 : i32
      scf.yield %521 : i32
    } else {
      %c0_i32_231 = arith.constant 0 : i32
      scf.yield %c0_i32_231 : i32
    }
    %c459007_i32 = arith.constant 459007 : i32
    %363 = arith.andi %362, %c459007_i32 : i32
    %364 = llvm.load %1 : !llvm.ptr -> i32
    %c16711935_i32_153 = arith.constant 16711935 : i32
    %365 = arith.andi %364, %c16711935_i32_153 : i32
    %366 = arith.addi %363, %365 : i32
    %c65537_i32_154 = arith.constant 65537 : i32
    %367 = arith.muli %366, %c65537_i32_154 : i32
    %c16_i32_155 = arith.constant 16 : i32
    %c31_i32_156 = arith.constant 31 : i32
    %368 = arith.cmpi ule, %c16_i32_155, %c31_i32_156 : i32
    %369 = scf.if %368 -> (i32) {
      %521 = arith.shrui %367, %c16_i32_155 : i32
      scf.yield %521 : i32
    } else {
      %c0_i32_231 = arith.constant 0 : i32
      scf.yield %c0_i32_231 : i32
    }
    %370 = llvm.load %8 : !llvm.ptr -> i32
    %371 = arith.addi %369, %370 : i32
    cf.br ^bb2(%371 : i32)
  ^bb59:  // pred: ^bb56
    %372 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_157 = arith.constant 4 : i64
    %373 = arith.extui %372 : i32 to i64
    %374 = arith.addi %373, %c4_i64_157 : i64
    %c4_i64_158 = arith.constant 4 : i64
    %375 = arith.addi %374, %c4_i64_158 : i64
    %c0_i32_159 = arith.constant 0 : i32
    %376 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_159) : (!llvm.ptr, i32) -> i32
    %377 = arith.extui %376 : i32 to i64
    %c65536_i64_160 = arith.constant 65536 : i64
    %378 = arith.muli %377, %c65536_i64_160 : i64
    %379 = arith.cmpi ult, %375, %378 : i64
    cf.cond_br %379, ^bb60, ^bb61
  ^bb60:  // 2 preds: ^bb59, ^bb61
    %380 = llvm.getelementptr %12[%374] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %381 = llvm.load volatile %380 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %381, %9 : i32, !llvm.ptr
    %c-1_i32_161 = arith.constant -1 : i32
    %382 = arith.xori %381, %c-1_i32_161 : i32
    %c7_i32_162 = arith.constant 7 : i32
    %c31_i32_163 = arith.constant 31 : i32
    %383 = arith.cmpi ule, %c7_i32_162, %c31_i32_163 : i32
    %384 = scf.if %383 -> (i32) {
      %521 = arith.shrui %382, %c7_i32_162 : i32
      scf.yield %521 : i32
    } else {
      %c0_i32_231 = arith.constant 0 : i32
      scf.yield %c0_i32_231 : i32
    }
    %385 = llvm.load %9 : !llvm.ptr -> i32
    %c6_i32_164 = arith.constant 6 : i32
    %c31_i32_165 = arith.constant 31 : i32
    %386 = arith.cmpi ule, %c6_i32_164, %c31_i32_165 : i32
    %387 = scf.if %386 -> (i32) {
      %521 = arith.shrui %385, %c6_i32_164 : i32
      scf.yield %521 : i32
    } else {
      %c0_i32_231 = arith.constant 0 : i32
      scf.yield %c0_i32_231 : i32
    }
    %388 = arith.ori %384, %387 : i32
    %c16843009_i32_166 = arith.constant 16843009 : i32
    %389 = arith.andi %388, %c16843009_i32_166 : i32
    %390 = llvm.load %1 : !llvm.ptr -> i32
    %391 = arith.addi %389, %390 : i32
    llvm.store %391, %1 : i32, !llvm.ptr
    %392 = llvm.load %7 : !llvm.ptr -> i32
    %c2_i32_167 = arith.constant 2 : i32
    %393 = arith.cmpi eq, %392, %c2_i32_167 : i32
    %394 = arith.extui %393 : i1 to i32
    %c0_i32_168 = arith.constant 0 : i32
    %395 = arith.cmpi ne, %394, %c0_i32_168 : i32
    cf.cond_br %395, ^bb58, ^bb62
  ^bb61:  // pred: ^bb59
    %c1_i32_169 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_169) : (i32) -> ()
    cf.br ^bb60
  ^bb62:  // pred: ^bb60
    %396 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_170 = arith.constant 8 : i64
    %397 = arith.extui %396 : i32 to i64
    %398 = arith.addi %397, %c8_i64_170 : i64
    %c4_i64_171 = arith.constant 4 : i64
    %399 = arith.addi %398, %c4_i64_171 : i64
    %c0_i32_172 = arith.constant 0 : i32
    %400 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_172) : (!llvm.ptr, i32) -> i32
    %401 = arith.extui %400 : i32 to i64
    %c65536_i64_173 = arith.constant 65536 : i64
    %402 = arith.muli %401, %c65536_i64_173 : i64
    %403 = arith.cmpi ult, %399, %402 : i64
    cf.cond_br %403, ^bb63, ^bb64
  ^bb63:  // 2 preds: ^bb62, ^bb64
    %404 = llvm.getelementptr %12[%398] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %405 = llvm.load volatile %404 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %405, %2 : i32, !llvm.ptr
    %c-1_i32_174 = arith.constant -1 : i32
    %406 = arith.xori %405, %c-1_i32_174 : i32
    %c7_i32_175 = arith.constant 7 : i32
    %c31_i32_176 = arith.constant 31 : i32
    %407 = arith.cmpi ule, %c7_i32_175, %c31_i32_176 : i32
    %408 = scf.if %407 -> (i32) {
      %521 = arith.shrui %406, %c7_i32_175 : i32
      scf.yield %521 : i32
    } else {
      %c0_i32_231 = arith.constant 0 : i32
      scf.yield %c0_i32_231 : i32
    }
    %409 = llvm.load %2 : !llvm.ptr -> i32
    %c6_i32_177 = arith.constant 6 : i32
    %c31_i32_178 = arith.constant 31 : i32
    %410 = arith.cmpi ule, %c6_i32_177, %c31_i32_178 : i32
    %411 = scf.if %410 -> (i32) {
      %521 = arith.shrui %409, %c6_i32_177 : i32
      scf.yield %521 : i32
    } else {
      %c0_i32_231 = arith.constant 0 : i32
      scf.yield %c0_i32_231 : i32
    }
    %412 = arith.ori %408, %411 : i32
    %c16843009_i32_179 = arith.constant 16843009 : i32
    %413 = arith.andi %412, %c16843009_i32_179 : i32
    %414 = llvm.load %1 : !llvm.ptr -> i32
    %415 = arith.addi %413, %414 : i32
    llvm.store %415, %1 : i32, !llvm.ptr
    cf.br ^bb58
  ^bb64:  // pred: ^bb62
    %c1_i32_180 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_180) : (i32) -> ()
    cf.br ^bb63
  ^bb65:  // pred: ^bb4
    %416 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i32_181 = arith.constant 3 : i32
    %417 = arith.andi %416, %c3_i32_181 : i32
    llvm.store %417, %9 : i32, !llvm.ptr
    %418 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32_182 = arith.constant 4 : i32
    %419 = arith.cmpi uge, %418, %c4_i32_182 : i32
    %420 = arith.extui %419 : i1 to i32
    %c0_i32_183 = arith.constant 0 : i32
    %421 = arith.cmpi ne, %420, %c0_i32_183 : i32
    cf.cond_br %421, ^bb68, ^bb69
  ^bb66:  // pred: ^bb4
    %c0_i32_184 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32_184 : i32)
  ^bb67:  // 2 preds: ^bb69, ^bb70
    %422 = llvm.load %9 : !llvm.ptr -> i32
    %c0_i32_185 = arith.constant 0 : i32
    %423 = arith.cmpi eq, %422, %c0_i32_185 : i32
    %424 = arith.extui %423 : i1 to i32
    %c0_i32_186 = arith.constant 0 : i32
    %425 = arith.cmpi ne, %424, %c0_i32_186 : i32
    cf.cond_br %425, ^bb3, ^bb81
  ^bb68:  // pred: ^bb65
    %426 = llvm.load %1 : !llvm.ptr -> i32
    %c-4_i32_187 = arith.constant -4 : i32
    %427 = arith.andi %426, %c-4_i32_187 : i32
    llvm.store %427, %3 : i32, !llvm.ptr
    %c0_i32_188 = arith.constant 0 : i32
    llvm.store %c0_i32_188, %8 : i32, !llvm.ptr
    %c0_i32_189 = arith.constant 0 : i32
    llvm.store %c0_i32_189, %2 : i32, !llvm.ptr
    cf.br ^bb71
  ^bb69:  // pred: ^bb65
    %c0_i32_190 = arith.constant 0 : i32
    llvm.store %c0_i32_190, %8 : i32, !llvm.ptr
    %c0_i32_191 = arith.constant 0 : i32
    llvm.store %c0_i32_191, %2 : i32, !llvm.ptr
    cf.br ^bb67
  ^bb70:  // pred: ^bb80
    cf.br ^bb67
  ^bb71:  // 2 preds: ^bb68, ^bb78
    %428 = llvm.load %8 : !llvm.ptr -> i32
    %429 = llvm.load %0 : !llvm.ptr -> i32
    %430 = llvm.load %2 : !llvm.ptr -> i32
    %431 = arith.addi %429, %430 : i32
    llvm.store %431, %1 : i32, !llvm.ptr
    %c0_i64_192 = arith.constant 0 : i64
    %432 = arith.extui %431 : i32 to i64
    %433 = arith.addi %432, %c0_i64_192 : i64
    %c1_i64_193 = arith.constant 1 : i64
    %434 = arith.addi %433, %c1_i64_193 : i64
    %c0_i32_194 = arith.constant 0 : i32
    %435 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_194) : (!llvm.ptr, i32) -> i32
    %436 = arith.extui %435 : i32 to i64
    %c65536_i64_195 = arith.constant 65536 : i64
    %437 = arith.muli %436, %c65536_i64_195 : i64
    %438 = arith.cmpi ult, %434, %437 : i64
    cf.cond_br %438, ^bb72, ^bb73
  ^bb72:  // 2 preds: ^bb71, ^bb73
    %439 = llvm.getelementptr %12[%433] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %440 = llvm.load volatile %439 {alignment = 1 : i64} : !llvm.ptr -> i8
    %441 = arith.extsi %440 : i8 to i32
    %c-65_i32_196 = arith.constant -65 : i32
    %442 = arith.cmpi sgt, %441, %c-65_i32_196 : i32
    %443 = arith.extui %442 : i1 to i32
    %444 = arith.addi %428, %443 : i32
    %445 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_197 = arith.constant 1 : i32
    %446 = arith.addi %445, %c1_i32_197 : i32
    %c0_i64_198 = arith.constant 0 : i64
    %447 = arith.extui %446 : i32 to i64
    %448 = arith.addi %447, %c0_i64_198 : i64
    %c1_i64_199 = arith.constant 1 : i64
    %449 = arith.addi %448, %c1_i64_199 : i64
    %c0_i32_200 = arith.constant 0 : i32
    %450 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_200) : (!llvm.ptr, i32) -> i32
    %451 = arith.extui %450 : i32 to i64
    %c65536_i64_201 = arith.constant 65536 : i64
    %452 = arith.muli %451, %c65536_i64_201 : i64
    %453 = arith.cmpi ult, %449, %452 : i64
    cf.cond_br %453, ^bb74, ^bb75
  ^bb73:  // pred: ^bb71
    %c1_i32_202 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_202) : (i32) -> ()
    cf.br ^bb72
  ^bb74:  // 2 preds: ^bb72, ^bb75
    %454 = llvm.getelementptr %12[%448] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %455 = llvm.load volatile %454 {alignment = 1 : i64} : !llvm.ptr -> i8
    %456 = arith.extsi %455 : i8 to i32
    %c-65_i32_203 = arith.constant -65 : i32
    %457 = arith.cmpi sgt, %456, %c-65_i32_203 : i32
    %458 = arith.extui %457 : i1 to i32
    %459 = arith.addi %444, %458 : i32
    %460 = llvm.load %1 : !llvm.ptr -> i32
    %c2_i32_204 = arith.constant 2 : i32
    %461 = arith.addi %460, %c2_i32_204 : i32
    %c0_i64_205 = arith.constant 0 : i64
    %462 = arith.extui %461 : i32 to i64
    %463 = arith.addi %462, %c0_i64_205 : i64
    %c1_i64_206 = arith.constant 1 : i64
    %464 = arith.addi %463, %c1_i64_206 : i64
    %c0_i32_207 = arith.constant 0 : i32
    %465 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_207) : (!llvm.ptr, i32) -> i32
    %466 = arith.extui %465 : i32 to i64
    %c65536_i64_208 = arith.constant 65536 : i64
    %467 = arith.muli %466, %c65536_i64_208 : i64
    %468 = arith.cmpi ult, %464, %467 : i64
    cf.cond_br %468, ^bb76, ^bb77
  ^bb75:  // pred: ^bb72
    %c1_i32_209 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_209) : (i32) -> ()
    cf.br ^bb74
  ^bb76:  // 2 preds: ^bb74, ^bb77
    %469 = llvm.getelementptr %12[%463] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %470 = llvm.load volatile %469 {alignment = 1 : i64} : !llvm.ptr -> i8
    %471 = arith.extsi %470 : i8 to i32
    %c-65_i32_210 = arith.constant -65 : i32
    %472 = arith.cmpi sgt, %471, %c-65_i32_210 : i32
    %473 = arith.extui %472 : i1 to i32
    %474 = arith.addi %459, %473 : i32
    %475 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i32_211 = arith.constant 3 : i32
    %476 = arith.addi %475, %c3_i32_211 : i32
    %c0_i64_212 = arith.constant 0 : i64
    %477 = arith.extui %476 : i32 to i64
    %478 = arith.addi %477, %c0_i64_212 : i64
    %c1_i64_213 = arith.constant 1 : i64
    %479 = arith.addi %478, %c1_i64_213 : i64
    %c0_i32_214 = arith.constant 0 : i32
    %480 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_214) : (!llvm.ptr, i32) -> i32
    %481 = arith.extui %480 : i32 to i64
    %c65536_i64_215 = arith.constant 65536 : i64
    %482 = arith.muli %481, %c65536_i64_215 : i64
    %483 = arith.cmpi ult, %479, %482 : i64
    cf.cond_br %483, ^bb78, ^bb79
  ^bb77:  // pred: ^bb74
    %c1_i32_216 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_216) : (i32) -> ()
    cf.br ^bb76
  ^bb78:  // 2 preds: ^bb76, ^bb79
    %484 = llvm.getelementptr %12[%478] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %485 = llvm.load volatile %484 {alignment = 1 : i64} : !llvm.ptr -> i8
    %486 = arith.extsi %485 : i8 to i32
    %c-65_i32_217 = arith.constant -65 : i32
    %487 = arith.cmpi sgt, %486, %c-65_i32_217 : i32
    %488 = arith.extui %487 : i1 to i32
    %489 = arith.addi %474, %488 : i32
    llvm.store %489, %8 : i32, !llvm.ptr
    %490 = llvm.load %3 : !llvm.ptr -> i32
    %491 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i32_218 = arith.constant 4 : i32
    %492 = arith.addi %491, %c4_i32_218 : i32
    llvm.store %492, %2 : i32, !llvm.ptr
    %493 = arith.cmpi eq, %490, %492 : i32
    %494 = arith.extui %493 : i1 to i32
    %c0_i32_219 = arith.constant 0 : i32
    %495 = arith.cmpi eq, %494, %c0_i32_219 : i32
    %496 = arith.extui %495 : i1 to i32
    %c0_i32_220 = arith.constant 0 : i32
    %497 = arith.cmpi ne, %496, %c0_i32_220 : i32
    cf.cond_br %497, ^bb71, ^bb80
  ^bb79:  // pred: ^bb76
    %c1_i32_221 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_221) : (i32) -> ()
    cf.br ^bb78
  ^bb80:  // pred: ^bb78
    cf.br ^bb70
  ^bb81:  // pred: ^bb67
    %498 = llvm.load %0 : !llvm.ptr -> i32
    %499 = llvm.load %2 : !llvm.ptr -> i32
    %500 = arith.addi %498, %499 : i32
    llvm.store %500, %1 : i32, !llvm.ptr
    cf.br ^bb83
  ^bb82:  // pred: ^bb86
    cf.br ^bb3
  ^bb83:  // 2 preds: ^bb81, ^bb84
    %501 = llvm.load %8 : !llvm.ptr -> i32
    %502 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_222 = arith.constant 0 : i64
    %503 = arith.extui %502 : i32 to i64
    %504 = arith.addi %503, %c0_i64_222 : i64
    %c1_i64_223 = arith.constant 1 : i64
    %505 = arith.addi %504, %c1_i64_223 : i64
    %c0_i32_224 = arith.constant 0 : i32
    %506 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_224) : (!llvm.ptr, i32) -> i32
    %507 = arith.extui %506 : i32 to i64
    %c65536_i64_225 = arith.constant 65536 : i64
    %508 = arith.muli %507, %c65536_i64_225 : i64
    %509 = arith.cmpi ult, %505, %508 : i64
    cf.cond_br %509, ^bb84, ^bb85
  ^bb84:  // 2 preds: ^bb83, ^bb85
    %510 = llvm.getelementptr %12[%504] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %511 = llvm.load volatile %510 {alignment = 1 : i64} : !llvm.ptr -> i8
    %512 = arith.extsi %511 : i8 to i32
    %c-65_i32_226 = arith.constant -65 : i32
    %513 = arith.cmpi sgt, %512, %c-65_i32_226 : i32
    %514 = arith.extui %513 : i1 to i32
    %515 = arith.addi %501, %514 : i32
    llvm.store %515, %8 : i32, !llvm.ptr
    %516 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_227 = arith.constant 1 : i32
    %517 = arith.addi %516, %c1_i32_227 : i32
    llvm.store %517, %1 : i32, !llvm.ptr
    %518 = llvm.load %9 : !llvm.ptr -> i32
    %c-1_i32_228 = arith.constant -1 : i32
    %519 = arith.addi %518, %c-1_i32_228 : i32
    llvm.store %519, %9 : i32, !llvm.ptr
    %c0_i32_229 = arith.constant 0 : i32
    %520 = arith.cmpi ne, %519, %c0_i32_229 : i32
    cf.cond_br %520, ^bb83, ^bb86
  ^bb85:  // pred: ^bb83
    %c1_i32_230 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_230) : (i32) -> ()
    cf.br ^bb84
  ^bb86:  // pred: ^bb84
    cf.br ^bb82
  }
  func.func @f155(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %5 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> i32
    %10 = llvm.getelementptr %arg0[304] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.getelementptr %arg0[312] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.load %11 : !llvm.ptr -> i64
    %14 = arith.trunci %13 : i64 to i32
    %15 = llvm.getelementptr %arg0[12] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %15 : !llvm.ptr -> i32
    %17 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.load %11 : !llvm.ptr -> i64
    %19 = arith.trunci %18 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %20 = llvm.load %2 : !llvm.ptr -> i32
    %c1114112_i32 = arith.constant 1114112 : i32
    %21 = arith.cmpi eq, %20, %c1114112_i32 : i32
    %22 = arith.extui %21 : i1 to i32
    %c0_i32 = arith.constant 0 : i32
    %23 = arith.cmpi ne, %22, %c0_i32 : i32
    cf.cond_br %23, ^bb3, ^bb4
  ^bb2(%24: i32):  // 3 preds: ^bb15, ^bb17, ^bb26
    return %24 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb13
    %25 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_4 = arith.constant 0 : i32
    %26 = arith.cmpi ne, %25, %c0_i32_4 : i32
    cf.cond_br %26, ^bb16, ^bb17
  ^bb4:  // pred: ^bb1
    %27 = llvm.load %0 : !llvm.ptr -> i32
    %28 = llvm.load %2 : !llvm.ptr -> i32
    %29 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %30 = arith.extui %29 : i32 to i64
    %31 = arith.addi %30, %c16_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %32 = arith.addi %31, %c4_i64 : i64
    %c0_i32_5 = arith.constant 0 : i32
    %33 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_5) : (!llvm.ptr, i32) -> i32
    %34 = arith.extui %33 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %35 = arith.muli %34, %c65536_i64 : i64
    %36 = arith.cmpi ult, %32, %35 : i64
    cf.cond_br %36, ^bb5, ^bb6
  ^bb5:  // 2 preds: ^bb4, ^bb6
    %37 = llvm.getelementptr %7[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %38 = llvm.load volatile %37 {alignment = 1 : i64} : !llvm.ptr -> i32
    %39 = arith.cmpi ult, %38, %14 : i32
    cf.cond_br %39, ^bb7, ^bb8
  ^bb6:  // pred: ^bb4
    %c1_i32_6 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_6) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %40 = llvm.getelementptr inbounds %12[%38] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %41 = llvm.load %40 : !llvm.ptr -> !llvm.ptr
    %42 = llvm.ptrtoint %41 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %43 = arith.cmpi eq, %42, %c0_i64 : i64
    cf.cond_br %43, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %44 = llvm.getelementptr %41[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %45 = llvm.getelementptr %41[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %46 = llvm.getelementptr %41[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %47 = llvm.load %44 : !llvm.ptr -> !llvm.ptr
    %48 = llvm.load %46 : !llvm.ptr -> !llvm.ptr
    %49 = llvm.ptrtoint %47 : !llvm.ptr to i64
    %c0_i64_7 = arith.constant 0 : i64
    %50 = arith.cmpi eq, %49, %c0_i64_7 : i64
    cf.cond_br %50, ^bb12, ^bb11
  ^bb10:  // pred: ^bb7
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %51 = llvm.load %45 : !llvm.ptr -> i32
    %52 = arith.cmpi ne, %9, %51 : i32
    cf.cond_br %52, ^bb14, ^bb13
  ^bb12:  // pred: ^bb9
    %c3_i32_8 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_8) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %53 = llvm.call %47(%48, %27, %28) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_9 = arith.constant 0 : i32
    %54 = arith.cmpi eq, %53, %c0_i32_9 : i32
    %55 = arith.extui %54 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %56 = arith.cmpi ne, %55, %c0_i32_10 : i32
    cf.cond_br %56, ^bb3, ^bb15
  ^bb14:  // pred: ^bb11
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // pred: ^bb13
    %c1_i32_11 = arith.constant 1 : i32
    cf.br ^bb2(%c1_i32_11 : i32)
  ^bb16:  // pred: ^bb3
    %57 = llvm.load %0 : !llvm.ptr -> i32
    %58 = llvm.load %3 : !llvm.ptr -> i32
    %59 = llvm.load %4 : !llvm.ptr -> i32
    %60 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %61 = arith.extui %60 : i32 to i64
    %62 = arith.addi %61, %c12_i64 : i64
    %c4_i64_12 = arith.constant 4 : i64
    %63 = arith.addi %62, %c4_i64_12 : i64
    %c0_i32_13 = arith.constant 0 : i32
    %64 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_13) : (!llvm.ptr, i32) -> i32
    %65 = arith.extui %64 : i32 to i64
    %c65536_i64_14 = arith.constant 65536 : i64
    %66 = arith.muli %65, %c65536_i64_14 : i64
    %67 = arith.cmpi ult, %63, %66 : i64
    cf.cond_br %67, ^bb18, ^bb19
  ^bb17:  // pred: ^bb3
    %c0_i32_15 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32_15 : i32)
  ^bb18:  // 2 preds: ^bb16, ^bb19
    %68 = llvm.getelementptr %7[%62] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %69 = llvm.load volatile %68 {alignment = 1 : i64} : !llvm.ptr -> i32
    %70 = arith.cmpi ult, %69, %19 : i32
    cf.cond_br %70, ^bb20, ^bb21
  ^bb19:  // pred: ^bb16
    %c1_i32_16 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_16) : (i32) -> ()
    cf.br ^bb18
  ^bb20:  // 2 preds: ^bb18, ^bb21
    %71 = llvm.getelementptr inbounds %17[%69] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %72 = llvm.load %71 : !llvm.ptr -> !llvm.ptr
    %73 = llvm.ptrtoint %72 : !llvm.ptr to i64
    %c0_i64_17 = arith.constant 0 : i64
    %74 = arith.cmpi eq, %73, %c0_i64_17 : i64
    cf.cond_br %74, ^bb23, ^bb22
  ^bb21:  // pred: ^bb18
    %c3_i32_18 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_18) : (i32) -> ()
    cf.br ^bb20
  ^bb22:  // 2 preds: ^bb20, ^bb23
    %75 = llvm.getelementptr %72[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %76 = llvm.getelementptr %72[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %77 = llvm.getelementptr %72[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %78 = llvm.load %75 : !llvm.ptr -> !llvm.ptr
    %79 = llvm.load %77 : !llvm.ptr -> !llvm.ptr
    %80 = llvm.ptrtoint %78 : !llvm.ptr to i64
    %c0_i64_19 = arith.constant 0 : i64
    %81 = arith.cmpi eq, %80, %c0_i64_19 : i64
    cf.cond_br %81, ^bb25, ^bb24
  ^bb23:  // pred: ^bb20
    %c4_i32_20 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_20) : (i32) -> ()
    cf.br ^bb22
  ^bb24:  // 2 preds: ^bb22, ^bb25
    %82 = llvm.load %76 : !llvm.ptr -> i32
    %83 = arith.cmpi ne, %16, %82 : i32
    cf.cond_br %83, ^bb27, ^bb26
  ^bb25:  // pred: ^bb22
    %c3_i32_21 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_21) : (i32) -> ()
    cf.br ^bb24
  ^bb26:  // 2 preds: ^bb24, ^bb27
    %84 = llvm.call %78(%79, %57, %58, %59) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%84 : i32)
  ^bb27:  // pred: ^bb24
    %c5_i32_22 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_22) : (i32) -> ()
    cf.br ^bb26
  }
  func.func @f156(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[12] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> i32
    %8 = llvm.getelementptr %arg0[304] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %arg0[312] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.load %9 : !llvm.ptr -> i64
    %12 = arith.trunci %11 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c20_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %16 = arith.addi %15, %c4_i64 : i64
    %c0_i32 = arith.constant 0 : i32
    %17 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32) : (!llvm.ptr, i32) -> i32
    %18 = arith.extui %17 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %19 = arith.muli %18, %c65536_i64 : i64
    %20 = arith.cmpi ult, %16, %19 : i64
    cf.cond_br %20, ^bb3, ^bb4
  ^bb2(%21: i32):  // pred: ^bb15
    return %21 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %22 = llvm.getelementptr %5[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %23 = llvm.load volatile %22 {alignment = 1 : i64} : !llvm.ptr -> i32
    %24 = llvm.load %1 : !llvm.ptr -> i32
    %25 = llvm.load %2 : !llvm.ptr -> i32
    %26 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %27 = arith.extui %26 : i32 to i64
    %28 = arith.addi %27, %c24_i64 : i64
    %c4_i64_2 = arith.constant 4 : i64
    %29 = arith.addi %28, %c4_i64_2 : i64
    %c0_i32_3 = arith.constant 0 : i32
    %30 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_3) : (!llvm.ptr, i32) -> i32
    %31 = arith.extui %30 : i32 to i64
    %c65536_i64_4 = arith.constant 65536 : i64
    %32 = arith.muli %31, %c65536_i64_4 : i64
    %33 = arith.cmpi ult, %29, %32 : i64
    cf.cond_br %33, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c1_i32_5 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_5) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %34 = llvm.getelementptr %5[%28] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %35 = llvm.load volatile %34 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %36 = arith.extui %35 : i32 to i64
    %37 = arith.addi %36, %c12_i64 : i64
    %c4_i64_6 = arith.constant 4 : i64
    %38 = arith.addi %37, %c4_i64_6 : i64
    %c0_i32_7 = arith.constant 0 : i32
    %39 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_7) : (!llvm.ptr, i32) -> i32
    %40 = arith.extui %39 : i32 to i64
    %c65536_i64_8 = arith.constant 65536 : i64
    %41 = arith.muli %40, %c65536_i64_8 : i64
    %42 = arith.cmpi ult, %38, %41 : i64
    cf.cond_br %42, ^bb7, ^bb8
  ^bb6:  // pred: ^bb3
    %c1_i32_9 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_9) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %43 = llvm.getelementptr %5[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %44 = llvm.load volatile %43 {alignment = 1 : i64} : !llvm.ptr -> i32
    %45 = arith.cmpi ult, %44, %12 : i32
    cf.cond_br %45, ^bb9, ^bb10
  ^bb8:  // pred: ^bb5
    %c1_i32_10 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_10) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %46 = llvm.getelementptr inbounds %10[%44] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %47 = llvm.load %46 : !llvm.ptr -> !llvm.ptr
    %48 = llvm.ptrtoint %47 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %49 = arith.cmpi eq, %48, %c0_i64 : i64
    cf.cond_br %49, ^bb12, ^bb11
  ^bb10:  // pred: ^bb7
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %50 = llvm.getelementptr %47[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %51 = llvm.getelementptr %47[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %52 = llvm.getelementptr %47[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %53 = llvm.load %50 : !llvm.ptr -> !llvm.ptr
    %54 = llvm.load %52 : !llvm.ptr -> !llvm.ptr
    %55 = llvm.ptrtoint %53 : !llvm.ptr to i64
    %c0_i64_11 = arith.constant 0 : i64
    %56 = arith.cmpi eq, %55, %c0_i64_11 : i64
    cf.cond_br %56, ^bb14, ^bb13
  ^bb12:  // pred: ^bb9
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %57 = llvm.load %51 : !llvm.ptr -> i32
    %58 = arith.cmpi ne, %7, %57 : i32
    cf.cond_br %58, ^bb16, ^bb15
  ^bb14:  // pred: ^bb11
    %c3_i32_12 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_12) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // 2 preds: ^bb13, ^bb16
    %59 = llvm.call %53(%54, %23, %24, %25) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%59 : i32)
  ^bb16:  // pred: ^bb13
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb15
  }
  func.func @f157(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %4 : i64, !llvm.ptr
    %5 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %7[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %10 = llvm.load %6 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %11 = arith.subi %10, %c48_i32 : i32
    llvm.store %11, %3 : i32, !llvm.ptr
    llvm.store %11, %6 : i32, !llvm.ptr
    %12 = llvm.load %3 : !llvm.ptr -> i32
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %14 = arith.extui %12 : i32 to i64
    %15 = arith.addi %14, %c4_i64 : i64
    %c4_i64_4 = arith.constant 4 : i64
    %16 = arith.addi %15, %c4_i64_4 : i64
    %c0_i32_5 = arith.constant 0 : i32
    %17 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_5) : (!llvm.ptr, i32) -> i32
    %18 = arith.extui %17 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %19 = arith.muli %18, %c65536_i64 : i64
    %20 = arith.cmpi ult, %16, %19 : i64
    cf.cond_br %20, ^bb3, ^bb4
  ^bb2:  // no predecessors
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %21 = llvm.getelementptr %9[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %13, %21 {alignment = 1 : i64} : i32, !llvm.ptr
    %22 = llvm.load %3 : !llvm.ptr -> i32
    %23 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_6 = arith.constant 0 : i64
    %24 = arith.extui %22 : i32 to i64
    %25 = arith.addi %24, %c0_i64_6 : i64
    %c4_i64_7 = arith.constant 4 : i64
    %26 = arith.addi %25, %c4_i64_7 : i64
    %c0_i32_8 = arith.constant 0 : i32
    %27 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_8) : (!llvm.ptr, i32) -> i32
    %28 = arith.extui %27 : i32 to i64
    %c65536_i64_9 = arith.constant 65536 : i64
    %29 = arith.muli %28, %c65536_i64_9 : i64
    %30 = arith.cmpi ult, %26, %29 : i64
    cf.cond_br %30, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c1_i32_10 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_10) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %31 = llvm.getelementptr %9[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %23, %31 {alignment = 1 : i64} : i32, !llvm.ptr
    %32 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %c12_i64 = arith.constant 12 : i64
    %33 = arith.extui %32 : i32 to i64
    %34 = arith.addi %33, %c12_i64 : i64
    %c4_i64_11 = arith.constant 4 : i64
    %35 = arith.addi %34, %c4_i64_11 : i64
    %c0_i32_12 = arith.constant 0 : i32
    %36 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_12) : (!llvm.ptr, i32) -> i32
    %37 = arith.extui %36 : i32 to i64
    %c65536_i64_13 = arith.constant 65536 : i64
    %38 = arith.muli %37, %c65536_i64_13 : i64
    %39 = arith.cmpi ult, %35, %38 : i64
    cf.cond_br %39, ^bb7, ^bb8
  ^bb6:  // pred: ^bb3
    %c1_i32_14 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_14) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %40 = llvm.getelementptr %9[%34] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c3_i32, %40 {alignment = 1 : i64} : i32, !llvm.ptr
    %41 = llvm.load %3 : !llvm.ptr -> i32
    %c1051512_i32 = arith.constant 1051512 : i32
    %c8_i64 = arith.constant 8 : i64
    %42 = arith.extui %41 : i32 to i64
    %43 = arith.addi %42, %c8_i64 : i64
    %c4_i64_15 = arith.constant 4 : i64
    %44 = arith.addi %43, %c4_i64_15 : i64
    %c0_i32_16 = arith.constant 0 : i32
    %45 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_16) : (!llvm.ptr, i32) -> i32
    %46 = arith.extui %45 : i32 to i64
    %c65536_i64_17 = arith.constant 65536 : i64
    %47 = arith.muli %46, %c65536_i64_17 : i64
    %48 = arith.cmpi ult, %44, %47 : i64
    cf.cond_br %48, ^bb9, ^bb10
  ^bb8:  // pred: ^bb5
    %c1_i32_18 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_18) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %49 = llvm.getelementptr %9[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1051512_i32, %49 {alignment = 1 : i64} : i32, !llvm.ptr
    %50 = llvm.load %3 : !llvm.ptr -> i32
    %c2_i64 = arith.constant 2 : i64
    %c20_i64 = arith.constant 20 : i64
    %51 = arith.extui %50 : i32 to i64
    %52 = arith.addi %51, %c20_i64 : i64
    %c8_i64_19 = arith.constant 8 : i64
    %53 = arith.addi %52, %c8_i64_19 : i64
    %c0_i32_20 = arith.constant 0 : i32
    %54 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_20) : (!llvm.ptr, i32) -> i32
    %55 = arith.extui %54 : i32 to i64
    %c65536_i64_21 = arith.constant 65536 : i64
    %56 = arith.muli %55, %c65536_i64_21 : i64
    %57 = arith.cmpi ult, %53, %56 : i64
    cf.cond_br %57, ^bb11, ^bb12
  ^bb10:  // pred: ^bb7
    %c1_i32_22 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_22) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %58 = llvm.getelementptr %9[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i64, %58 {alignment = 1 : i64} : i64, !llvm.ptr
    %59 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i32_23 = arith.constant 3 : i32
    %60 = arith.extui %c3_i32_23 : i32 to i64
    %c32_i64 = arith.constant 32 : i64
    %c63_i64 = arith.constant 63 : i64
    %61 = arith.cmpi ule, %c32_i64, %c63_i64 : i64
    %62 = scf.if %61 -> (i64) {
      %102 = arith.shli %60, %c32_i64 : i64
      scf.yield %102 : i64
    } else {
      %c0_i64_38 = arith.constant 0 : i64
      scf.yield %c0_i64_38 : i64
    }
    llvm.store %62, %4 : i64, !llvm.ptr
    %63 = llvm.load %3 : !llvm.ptr -> i32
    %64 = arith.extui %63 : i32 to i64
    %65 = arith.ori %62, %64 : i64
    %c40_i64 = arith.constant 40 : i64
    %66 = arith.extui %59 : i32 to i64
    %67 = arith.addi %66, %c40_i64 : i64
    %c8_i64_24 = arith.constant 8 : i64
    %68 = arith.addi %67, %c8_i64_24 : i64
    %c0_i32_25 = arith.constant 0 : i32
    %69 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_25) : (!llvm.ptr, i32) -> i32
    %70 = arith.extui %69 : i32 to i64
    %c65536_i64_26 = arith.constant 65536 : i64
    %71 = arith.muli %70, %c65536_i64_26 : i64
    %72 = arith.cmpi ult, %68, %71 : i64
    cf.cond_br %72, ^bb13, ^bb14
  ^bb12:  // pred: ^bb9
    %c1_i32_27 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_27) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %73 = llvm.getelementptr %9[%67] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %65, %73 {alignment = 1 : i64} : i64, !llvm.ptr
    %74 = llvm.load %3 : !llvm.ptr -> i32
    %75 = llvm.load %4 : !llvm.ptr -> i64
    %76 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %77 = arith.addi %76, %c4_i32 : i32
    %78 = arith.extui %77 : i32 to i64
    %79 = arith.ori %75, %78 : i64
    %c32_i64_28 = arith.constant 32 : i64
    %80 = arith.extui %74 : i32 to i64
    %81 = arith.addi %80, %c32_i64_28 : i64
    %c8_i64_29 = arith.constant 8 : i64
    %82 = arith.addi %81, %c8_i64_29 : i64
    %c0_i32_30 = arith.constant 0 : i32
    %83 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_30) : (!llvm.ptr, i32) -> i32
    %84 = arith.extui %83 : i32 to i64
    %c65536_i64_31 = arith.constant 65536 : i64
    %85 = arith.muli %84, %c65536_i64_31 : i64
    %86 = arith.cmpi ult, %82, %85 : i64
    cf.cond_br %86, ^bb15, ^bb16
  ^bb14:  // pred: ^bb11
    %c1_i32_32 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_32) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // 2 preds: ^bb13, ^bb16
    %87 = llvm.getelementptr %9[%81] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %79, %87 {alignment = 1 : i64} : i64, !llvm.ptr
    %88 = llvm.load %3 : !llvm.ptr -> i32
    %89 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %90 = arith.addi %89, %c32_i32 : i32
    %c16_i64 = arith.constant 16 : i64
    %91 = arith.extui %88 : i32 to i64
    %92 = arith.addi %91, %c16_i64 : i64
    %c4_i64_33 = arith.constant 4 : i64
    %93 = arith.addi %92, %c4_i64_33 : i64
    %c0_i32_34 = arith.constant 0 : i32
    %94 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_34) : (!llvm.ptr, i32) -> i32
    %95 = arith.extui %94 : i32 to i64
    %c65536_i64_35 = arith.constant 65536 : i64
    %96 = arith.muli %95, %c65536_i64_35 : i64
    %97 = arith.cmpi ult, %93, %96 : i64
    cf.cond_br %97, ^bb17, ^bb18
  ^bb16:  // pred: ^bb13
    %c1_i32_36 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_36) : (i32) -> ()
    cf.br ^bb15
  ^bb17:  // 2 preds: ^bb15, ^bb18
    %98 = llvm.getelementptr %9[%92] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %90, %98 {alignment = 1 : i64} : i32, !llvm.ptr
    %99 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %100 = arith.addi %99, %c8_i32 : i32
    %101 = llvm.load %2 : !llvm.ptr -> i32
    call @f148(%arg0, %100, %101) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb18:  // pred: ^bb15
    %c1_i32_37 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_37) : (i32) -> ()
    cf.br ^bb17
  }
  func.func @f158(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %9 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %14 = llvm.load %10 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %15 = arith.subi %14, %c16_i32 : i32
    llvm.store %15, %3 : i32, !llvm.ptr
    llvm.store %15, %10 : i32, !llvm.ptr
    %c10_i32 = arith.constant 10 : i32
    llvm.store %c10_i32, %4 : i32, !llvm.ptr
    %16 = llvm.load %0 : !llvm.ptr -> i32
    %c10000_i32 = arith.constant 10000 : i32
    %17 = arith.cmpi uge, %16, %c10000_i32 : i32
    %18 = arith.extui %17 : i1 to i32
    %c0_i32_8 = arith.constant 0 : i32
    %19 = arith.cmpi ne, %18, %c0_i32_8 : i32
    cf.cond_br %19, ^bb4, ^bb5
  ^bb2(%20: i32):  // pred: ^bb24
    return %20 : i32
  ^bb3:  // 2 preds: ^bb5, ^bb6
    %21 = llvm.load %5 : !llvm.ptr -> i32
    %c99_i32 = arith.constant 99 : i32
    %22 = arith.cmpi ugt, %21, %c99_i32 : i32
    %23 = arith.extui %22 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %24 = arith.cmpi ne, %23, %c0_i32_9 : i32
    cf.cond_br %24, ^bb18, ^bb19
  ^bb4:  // pred: ^bb1
    %c10_i32_10 = arith.constant 10 : i32
    llvm.store %c10_i32_10, %4 : i32, !llvm.ptr
    cf.br ^bb7
  ^bb5:  // pred: ^bb1
    %25 = llvm.load %0 : !llvm.ptr -> i32
    llvm.store %25, %5 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb6:  // pred: ^bb16
    cf.br ^bb3
  ^bb7:  // 2 preds: ^bb4, ^bb14
    %26 = llvm.load %3 : !llvm.ptr -> i32
    %c6_i32 = arith.constant 6 : i32
    %27 = arith.addi %26, %c6_i32 : i32
    %28 = llvm.load %4 : !llvm.ptr -> i32
    %29 = arith.addi %27, %28 : i32
    llvm.store %29, %6 : i32, !llvm.ptr
    %c-4_i32 = arith.constant -4 : i32
    %30 = arith.addi %29, %c-4_i32 : i32
    %31 = llvm.load %0 : !llvm.ptr -> i32
    %32 = llvm.load %0 : !llvm.ptr -> i32
    %c10000_i32_11 = arith.constant 10000 : i32
    %33 = arith.divui %32, %c10000_i32_11 : i32
    %c0_i32_12 = arith.constant 0 : i32
    %34 = arith.cmpi eq, %c10000_i32_11, %c0_i32_12 : i32
    %35 = arith.select %34, %c0_i32_12, %33 : i32
    llvm.store %35, %5 : i32, !llvm.ptr
    %c10000_i32_13 = arith.constant 10000 : i32
    %36 = arith.muli %35, %c10000_i32_13 : i32
    %37 = arith.subi %31, %36 : i32
    llvm.store %37, %7 : i32, !llvm.ptr
    %c65535_i32 = arith.constant 65535 : i32
    %38 = arith.andi %37, %c65535_i32 : i32
    %c100_i32 = arith.constant 100 : i32
    %39 = arith.divui %38, %c100_i32 : i32
    %c0_i32_14 = arith.constant 0 : i32
    %40 = arith.cmpi eq, %c100_i32, %c0_i32_14 : i32
    %41 = arith.select %40, %c0_i32_14, %39 : i32
    llvm.store %41, %8 : i32, !llvm.ptr
    %c1_i32_15 = arith.constant 1 : i32
    %c31_i32 = arith.constant 31 : i32
    %42 = arith.cmpi ule, %c1_i32_15, %c31_i32 : i32
    %43 = scf.if %42 -> (i32) {
      %198 = arith.shli %41, %c1_i32_15 : i32
      scf.yield %198 : i32
    } else {
      %c0_i32_87 = arith.constant 0 : i32
      scf.yield %c0_i32_87 : i32
    }
    %c1051148_i32 = arith.constant 1051148 : i32
    %44 = arith.addi %43, %c1051148_i32 : i32
    %c0_i64 = arith.constant 0 : i64
    %45 = arith.extui %44 : i32 to i64
    %46 = arith.addi %45, %c0_i64 : i64
    %c2_i64 = arith.constant 2 : i64
    %47 = arith.addi %46, %c2_i64 : i64
    %c0_i32_16 = arith.constant 0 : i32
    %48 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_16) : (!llvm.ptr, i32) -> i32
    %49 = arith.extui %48 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %50 = arith.muli %49, %c65536_i64 : i64
    %51 = arith.cmpi ult, %47, %50 : i64
    cf.cond_br %51, ^bb8, ^bb9
  ^bb8:  // 2 preds: ^bb7, ^bb9
    %52 = llvm.getelementptr %13[%46] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %53 = llvm.load volatile %52 {alignment = 1 : i64} : !llvm.ptr -> i16
    %54 = arith.extui %53 : i16 to i32
    %c0_i64_17 = arith.constant 0 : i64
    %55 = arith.extui %30 : i32 to i64
    %56 = arith.addi %55, %c0_i64_17 : i64
    %c2_i64_18 = arith.constant 2 : i64
    %57 = arith.addi %56, %c2_i64_18 : i64
    %c0_i32_19 = arith.constant 0 : i32
    %58 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_19) : (!llvm.ptr, i32) -> i32
    %59 = arith.extui %58 : i32 to i64
    %c65536_i64_20 = arith.constant 65536 : i64
    %60 = arith.muli %59, %c65536_i64_20 : i64
    %61 = arith.cmpi ult, %57, %60 : i64
    cf.cond_br %61, ^bb10, ^bb11
  ^bb9:  // pred: ^bb7
    %c1_i32_21 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_21) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // 2 preds: ^bb8, ^bb11
    %62 = llvm.getelementptr %13[%56] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %63 = arith.trunci %54 : i32 to i16
    llvm.store volatile %63, %62 {alignment = 1 : i64} : i16, !llvm.ptr
    %64 = llvm.load %6 : !llvm.ptr -> i32
    %c-2_i32 = arith.constant -2 : i32
    %65 = arith.addi %64, %c-2_i32 : i32
    %66 = llvm.load %7 : !llvm.ptr -> i32
    %67 = llvm.load %8 : !llvm.ptr -> i32
    %c100_i32_22 = arith.constant 100 : i32
    %68 = arith.muli %67, %c100_i32_22 : i32
    %69 = arith.subi %66, %68 : i32
    %c65535_i32_23 = arith.constant 65535 : i32
    %70 = arith.andi %69, %c65535_i32_23 : i32
    %c1_i32_24 = arith.constant 1 : i32
    %c31_i32_25 = arith.constant 31 : i32
    %71 = arith.cmpi ule, %c1_i32_24, %c31_i32_25 : i32
    %72 = scf.if %71 -> (i32) {
      %198 = arith.shli %70, %c1_i32_24 : i32
      scf.yield %198 : i32
    } else {
      %c0_i32_87 = arith.constant 0 : i32
      scf.yield %c0_i32_87 : i32
    }
    %c1051148_i32_26 = arith.constant 1051148 : i32
    %73 = arith.addi %72, %c1051148_i32_26 : i32
    %c0_i64_27 = arith.constant 0 : i64
    %74 = arith.extui %73 : i32 to i64
    %75 = arith.addi %74, %c0_i64_27 : i64
    %c2_i64_28 = arith.constant 2 : i64
    %76 = arith.addi %75, %c2_i64_28 : i64
    %c0_i32_29 = arith.constant 0 : i32
    %77 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_29) : (!llvm.ptr, i32) -> i32
    %78 = arith.extui %77 : i32 to i64
    %c65536_i64_30 = arith.constant 65536 : i64
    %79 = arith.muli %78, %c65536_i64_30 : i64
    %80 = arith.cmpi ult, %76, %79 : i64
    cf.cond_br %80, ^bb12, ^bb13
  ^bb11:  // pred: ^bb8
    %c1_i32_31 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_31) : (i32) -> ()
    cf.br ^bb10
  ^bb12:  // 2 preds: ^bb10, ^bb13
    %81 = llvm.getelementptr %13[%75] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %82 = llvm.load volatile %81 {alignment = 1 : i64} : !llvm.ptr -> i16
    %83 = arith.extui %82 : i16 to i32
    %c0_i64_32 = arith.constant 0 : i64
    %84 = arith.extui %65 : i32 to i64
    %85 = arith.addi %84, %c0_i64_32 : i64
    %c2_i64_33 = arith.constant 2 : i64
    %86 = arith.addi %85, %c2_i64_33 : i64
    %c0_i32_34 = arith.constant 0 : i32
    %87 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_34) : (!llvm.ptr, i32) -> i32
    %88 = arith.extui %87 : i32 to i64
    %c65536_i64_35 = arith.constant 65536 : i64
    %89 = arith.muli %88, %c65536_i64_35 : i64
    %90 = arith.cmpi ult, %86, %89 : i64
    cf.cond_br %90, ^bb14, ^bb15
  ^bb13:  // pred: ^bb10
    %c1_i32_36 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_36) : (i32) -> ()
    cf.br ^bb12
  ^bb14:  // 2 preds: ^bb12, ^bb15
    %91 = llvm.getelementptr %13[%85] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %92 = arith.trunci %83 : i32 to i16
    llvm.store volatile %92, %91 {alignment = 1 : i64} : i16, !llvm.ptr
    %93 = llvm.load %4 : !llvm.ptr -> i32
    %c-4_i32_37 = arith.constant -4 : i32
    %94 = arith.addi %93, %c-4_i32_37 : i32
    llvm.store %94, %4 : i32, !llvm.ptr
    %95 = llvm.load %0 : !llvm.ptr -> i32
    %c99999999_i32 = arith.constant 99999999 : i32
    %96 = arith.cmpi ugt, %95, %c99999999_i32 : i32
    %97 = arith.extui %96 : i1 to i32
    llvm.store %97, %6 : i32, !llvm.ptr
    %98 = llvm.load %5 : !llvm.ptr -> i32
    llvm.store %98, %0 : i32, !llvm.ptr
    %99 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i32_38 = arith.constant 0 : i32
    %100 = arith.cmpi ne, %99, %c0_i32_38 : i32
    cf.cond_br %100, ^bb7, ^bb16
  ^bb15:  // pred: ^bb12
    %c1_i32_39 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_39) : (i32) -> ()
    cf.br ^bb14
  ^bb16:  // pred: ^bb14
    cf.br ^bb6
  ^bb17:  // 2 preds: ^bb19, ^bb22
    %101 = llvm.load %0 : !llvm.ptr -> i32
    %c10_i32_40 = arith.constant 10 : i32
    %102 = arith.cmpi ult, %101, %c10_i32_40 : i32
    %103 = arith.extui %102 : i1 to i32
    %c0_i32_41 = arith.constant 0 : i32
    %104 = arith.cmpi ne, %103, %c0_i32_41 : i32
    cf.cond_br %104, ^bb25, ^bb26
  ^bb18:  // pred: ^bb3
    %105 = llvm.load %3 : !llvm.ptr -> i32
    %c6_i32_42 = arith.constant 6 : i32
    %106 = arith.addi %105, %c6_i32_42 : i32
    %107 = llvm.load %4 : !llvm.ptr -> i32
    %c-2_i32_43 = arith.constant -2 : i32
    %108 = arith.addi %107, %c-2_i32_43 : i32
    llvm.store %108, %4 : i32, !llvm.ptr
    %109 = arith.addi %106, %108 : i32
    %110 = llvm.load %5 : !llvm.ptr -> i32
    %111 = llvm.load %5 : !llvm.ptr -> i32
    %c65535_i32_44 = arith.constant 65535 : i32
    %112 = arith.andi %111, %c65535_i32_44 : i32
    %c100_i32_45 = arith.constant 100 : i32
    %113 = arith.divui %112, %c100_i32_45 : i32
    %c0_i32_46 = arith.constant 0 : i32
    %114 = arith.cmpi eq, %c100_i32_45, %c0_i32_46 : i32
    %115 = arith.select %114, %c0_i32_46, %113 : i32
    llvm.store %115, %0 : i32, !llvm.ptr
    %c100_i32_47 = arith.constant 100 : i32
    %116 = arith.muli %115, %c100_i32_47 : i32
    %117 = arith.subi %110, %116 : i32
    %c65535_i32_48 = arith.constant 65535 : i32
    %118 = arith.andi %117, %c65535_i32_48 : i32
    %c1_i32_49 = arith.constant 1 : i32
    %c31_i32_50 = arith.constant 31 : i32
    %119 = arith.cmpi ule, %c1_i32_49, %c31_i32_50 : i32
    %120 = scf.if %119 -> (i32) {
      %198 = arith.shli %118, %c1_i32_49 : i32
      scf.yield %198 : i32
    } else {
      %c0_i32_87 = arith.constant 0 : i32
      scf.yield %c0_i32_87 : i32
    }
    %c1051148_i32_51 = arith.constant 1051148 : i32
    %121 = arith.addi %120, %c1051148_i32_51 : i32
    %c0_i64_52 = arith.constant 0 : i64
    %122 = arith.extui %121 : i32 to i64
    %123 = arith.addi %122, %c0_i64_52 : i64
    %c2_i64_53 = arith.constant 2 : i64
    %124 = arith.addi %123, %c2_i64_53 : i64
    %c0_i32_54 = arith.constant 0 : i32
    %125 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_54) : (!llvm.ptr, i32) -> i32
    %126 = arith.extui %125 : i32 to i64
    %c65536_i64_55 = arith.constant 65536 : i64
    %127 = arith.muli %126, %c65536_i64_55 : i64
    %128 = arith.cmpi ult, %124, %127 : i64
    cf.cond_br %128, ^bb20, ^bb21
  ^bb19:  // pred: ^bb3
    %129 = llvm.load %5 : !llvm.ptr -> i32
    llvm.store %129, %0 : i32, !llvm.ptr
    cf.br ^bb17
  ^bb20:  // 2 preds: ^bb18, ^bb21
    %130 = llvm.getelementptr %13[%123] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %131 = llvm.load volatile %130 {alignment = 1 : i64} : !llvm.ptr -> i16
    %132 = arith.extui %131 : i16 to i32
    %c0_i64_56 = arith.constant 0 : i64
    %133 = arith.extui %109 : i32 to i64
    %134 = arith.addi %133, %c0_i64_56 : i64
    %c2_i64_57 = arith.constant 2 : i64
    %135 = arith.addi %134, %c2_i64_57 : i64
    %c0_i32_58 = arith.constant 0 : i32
    %136 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_58) : (!llvm.ptr, i32) -> i32
    %137 = arith.extui %136 : i32 to i64
    %c65536_i64_59 = arith.constant 65536 : i64
    %138 = arith.muli %137, %c65536_i64_59 : i64
    %139 = arith.cmpi ult, %135, %138 : i64
    cf.cond_br %139, ^bb22, ^bb23
  ^bb21:  // pred: ^bb18
    %c1_i32_60 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_60) : (i32) -> ()
    cf.br ^bb20
  ^bb22:  // 2 preds: ^bb20, ^bb23
    %140 = llvm.getelementptr %13[%134] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %141 = arith.trunci %132 : i32 to i16
    llvm.store volatile %141, %140 {alignment = 1 : i64} : i16, !llvm.ptr
    cf.br ^bb17
  ^bb23:  // pred: ^bb20
    %c1_i32_61 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_61) : (i32) -> ()
    cf.br ^bb22
  ^bb24:  // 2 preds: ^bb29, ^bb31
    %142 = llvm.load %2 : !llvm.ptr -> i32
    %143 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_62 = arith.constant 1 : i32
    %c0_i32_63 = arith.constant 0 : i32
    %144 = llvm.load %3 : !llvm.ptr -> i32
    %c6_i32_64 = arith.constant 6 : i32
    %145 = arith.addi %144, %c6_i32_64 : i32
    %146 = llvm.load %4 : !llvm.ptr -> i32
    %147 = arith.addi %145, %146 : i32
    %c10_i32_65 = arith.constant 10 : i32
    %148 = llvm.load %4 : !llvm.ptr -> i32
    %149 = arith.subi %c10_i32_65, %148 : i32
    %150 = call @f153(%arg0, %142, %143, %c1_i32_62, %c0_i32_63, %147, %149) : (!llvm.ptr, i32, i32, i32, i32, i32, i32) -> i32
    llvm.store %150, %0 : i32, !llvm.ptr
    %151 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_66 = arith.constant 16 : i32
    %152 = arith.addi %151, %c16_i32_66 : i32
    llvm.store %152, %10 : i32, !llvm.ptr
    %153 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%153 : i32)
  ^bb25:  // pred: ^bb17
    %154 = llvm.load %3 : !llvm.ptr -> i32
    %c6_i32_67 = arith.constant 6 : i32
    %155 = arith.addi %154, %c6_i32_67 : i32
    %156 = llvm.load %4 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %157 = arith.addi %156, %c-1_i32 : i32
    llvm.store %157, %4 : i32, !llvm.ptr
    %158 = arith.addi %155, %157 : i32
    %159 = llvm.load %0 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %160 = arith.ori %159, %c48_i32 : i32
    %c0_i64_68 = arith.constant 0 : i64
    %161 = arith.extui %158 : i32 to i64
    %162 = arith.addi %161, %c0_i64_68 : i64
    %c1_i64 = arith.constant 1 : i64
    %163 = arith.addi %162, %c1_i64 : i64
    %c0_i32_69 = arith.constant 0 : i32
    %164 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_69) : (!llvm.ptr, i32) -> i32
    %165 = arith.extui %164 : i32 to i64
    %c65536_i64_70 = arith.constant 65536 : i64
    %166 = arith.muli %165, %c65536_i64_70 : i64
    %167 = arith.cmpi ult, %163, %166 : i64
    cf.cond_br %167, ^bb31, ^bb32
  ^bb26:  // pred: ^bb17
    %168 = llvm.load %3 : !llvm.ptr -> i32
    %c6_i32_71 = arith.constant 6 : i32
    %169 = arith.addi %168, %c6_i32_71 : i32
    %170 = llvm.load %4 : !llvm.ptr -> i32
    %c-2_i32_72 = arith.constant -2 : i32
    %171 = arith.addi %170, %c-2_i32_72 : i32
    llvm.store %171, %4 : i32, !llvm.ptr
    %172 = arith.addi %169, %171 : i32
    %173 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_73 = arith.constant 1 : i32
    %c31_i32_74 = arith.constant 31 : i32
    %174 = arith.cmpi ule, %c1_i32_73, %c31_i32_74 : i32
    %175 = scf.if %174 -> (i32) {
      %198 = arith.shli %173, %c1_i32_73 : i32
      scf.yield %198 : i32
    } else {
      %c0_i32_87 = arith.constant 0 : i32
      scf.yield %c0_i32_87 : i32
    }
    %c1051148_i32_75 = arith.constant 1051148 : i32
    %176 = arith.addi %175, %c1051148_i32_75 : i32
    %c0_i64_76 = arith.constant 0 : i64
    %177 = arith.extui %176 : i32 to i64
    %178 = arith.addi %177, %c0_i64_76 : i64
    %c2_i64_77 = arith.constant 2 : i64
    %179 = arith.addi %178, %c2_i64_77 : i64
    %c0_i32_78 = arith.constant 0 : i32
    %180 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_78) : (!llvm.ptr, i32) -> i32
    %181 = arith.extui %180 : i32 to i64
    %c65536_i64_79 = arith.constant 65536 : i64
    %182 = arith.muli %181, %c65536_i64_79 : i64
    %183 = arith.cmpi ult, %179, %182 : i64
    cf.cond_br %183, ^bb27, ^bb28
  ^bb27:  // 2 preds: ^bb26, ^bb28
    %184 = llvm.getelementptr %13[%178] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %185 = llvm.load volatile %184 {alignment = 1 : i64} : !llvm.ptr -> i16
    %186 = arith.extui %185 : i16 to i32
    %c0_i64_80 = arith.constant 0 : i64
    %187 = arith.extui %172 : i32 to i64
    %188 = arith.addi %187, %c0_i64_80 : i64
    %c2_i64_81 = arith.constant 2 : i64
    %189 = arith.addi %188, %c2_i64_81 : i64
    %c0_i32_82 = arith.constant 0 : i32
    %190 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_82) : (!llvm.ptr, i32) -> i32
    %191 = arith.extui %190 : i32 to i64
    %c65536_i64_83 = arith.constant 65536 : i64
    %192 = arith.muli %191, %c65536_i64_83 : i64
    %193 = arith.cmpi ult, %189, %192 : i64
    cf.cond_br %193, ^bb29, ^bb30
  ^bb28:  // pred: ^bb26
    %c1_i32_84 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_84) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // 2 preds: ^bb27, ^bb30
    %194 = llvm.getelementptr %13[%188] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %195 = arith.trunci %186 : i32 to i16
    llvm.store volatile %195, %194 {alignment = 1 : i64} : i16, !llvm.ptr
    cf.br ^bb24
  ^bb30:  // pred: ^bb27
    %c1_i32_85 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_85) : (i32) -> ()
    cf.br ^bb29
  ^bb31:  // 2 preds: ^bb25, ^bb32
    %196 = llvm.getelementptr %13[%162] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %197 = arith.trunci %160 : i32 to i8
    llvm.store volatile %197, %196 {alignment = 1 : i64} : i8, !llvm.ptr
    cf.br ^bb24
  ^bb32:  // pred: ^bb25
    %c1_i32_86 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_86) : (i32) -> ()
    cf.br ^bb31
  }
  func.func @f159(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32_5 = arith.constant 0 : i32
    llvm.store %c0_i32_5, %3 : i32, !llvm.ptr
    %9 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_6 = arith.constant 0 : i32
    %10 = arith.cmpi eq, %9, %c0_i32_6 : i32
    %11 = arith.extui %10 : i1 to i32
    %c0_i32_7 = arith.constant 0 : i32
    %12 = arith.cmpi ne, %11, %c0_i32_7 : i32
    cf.cond_br %12, ^bb3, ^bb4
  ^bb2(%13: i32):  // pred: ^bb3
    return %13 : i32
  ^bb3:  // 3 preds: ^bb1, ^bb5, ^bb12
    %14 = llvm.load %3 : !llvm.ptr -> i32
    cf.br ^bb2(%14 : i32)
  ^bb4:  // pred: ^bb1
    cf.br ^bb7
  ^bb5:  // 2 preds: ^bb6, ^bb10
    %15 = llvm.load %4 : !llvm.ptr -> i32
    %16 = llvm.load %5 : !llvm.ptr -> i32
    %17 = arith.subi %15, %16 : i32
    llvm.store %17, %3 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb6:  // no predecessors
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb4, ^bb13
    %18 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %19 = arith.extui %18 : i32 to i64
    %20 = arith.addi %19, %c0_i64 : i64
    %c1_i64 = arith.constant 1 : i64
    %21 = arith.addi %20, %c1_i64 : i64
    %c0_i32_8 = arith.constant 0 : i32
    %22 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_8) : (!llvm.ptr, i32) -> i32
    %23 = arith.extui %22 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %24 = arith.muli %23, %c65536_i64 : i64
    %25 = arith.cmpi ult, %21, %24 : i64
    cf.cond_br %25, ^bb8, ^bb9
  ^bb8:  // 2 preds: ^bb7, ^bb9
    %26 = llvm.getelementptr %8[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %27 = llvm.load volatile %26 {alignment = 1 : i64} : !llvm.ptr -> i8
    %28 = arith.extui %27 : i8 to i32
    llvm.store %28, %4 : i32, !llvm.ptr
    %29 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_9 = arith.constant 0 : i64
    %30 = arith.extui %29 : i32 to i64
    %31 = arith.addi %30, %c0_i64_9 : i64
    %c1_i64_10 = arith.constant 1 : i64
    %32 = arith.addi %31, %c1_i64_10 : i64
    %c0_i32_11 = arith.constant 0 : i32
    %33 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_11) : (!llvm.ptr, i32) -> i32
    %34 = arith.extui %33 : i32 to i64
    %c65536_i64_12 = arith.constant 65536 : i64
    %35 = arith.muli %34, %c65536_i64_12 : i64
    %36 = arith.cmpi ult, %32, %35 : i64
    cf.cond_br %36, ^bb10, ^bb11
  ^bb9:  // pred: ^bb7
    %c1_i32_13 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_13) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // 2 preds: ^bb8, ^bb11
    %37 = llvm.getelementptr %8[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %38 = llvm.load volatile %37 {alignment = 1 : i64} : !llvm.ptr -> i8
    %39 = arith.extui %38 : i8 to i32
    llvm.store %39, %5 : i32, !llvm.ptr
    %40 = arith.cmpi eq, %28, %39 : i32
    %41 = arith.extui %40 : i1 to i32
    %c0_i32_14 = arith.constant 0 : i32
    %42 = arith.cmpi eq, %41, %c0_i32_14 : i32
    %43 = arith.extui %42 : i1 to i32
    %c0_i32_15 = arith.constant 0 : i32
    %44 = arith.cmpi ne, %43, %c0_i32_15 : i32
    cf.cond_br %44, ^bb5, ^bb12
  ^bb11:  // pred: ^bb8
    %c1_i32_16 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_16) : (i32) -> ()
    cf.br ^bb10
  ^bb12:  // pred: ^bb10
    %45 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_17 = arith.constant 1 : i32
    %46 = arith.addi %45, %c1_i32_17 : i32
    llvm.store %46, %0 : i32, !llvm.ptr
    %47 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_18 = arith.constant 1 : i32
    %48 = arith.addi %47, %c1_i32_18 : i32
    llvm.store %48, %1 : i32, !llvm.ptr
    %49 = llvm.load %2 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %50 = arith.addi %49, %c-1_i32 : i32
    llvm.store %50, %2 : i32, !llvm.ptr
    %c0_i32_19 = arith.constant 0 : i32
    %51 = arith.cmpi eq, %50, %c0_i32_19 : i32
    %52 = arith.extui %51 : i1 to i32
    %c0_i32_20 = arith.constant 0 : i32
    %53 = arith.cmpi ne, %52, %c0_i32_20 : i32
    cf.cond_br %53, ^bb3, ^bb13
  ^bb13:  // pred: ^bb12
    cf.br ^bb7
  }
  func.func @f160(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %10 = arith.cmpi uge, %9, %c16_i32 : i32
    %11 = arith.extui %10 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %12 = arith.cmpi ne, %11, %c0_i32_5 : i32
    cf.cond_br %12, ^bb4, ^bb5
  ^bb2(%13: i32):  // pred: ^bb20
    return %13 : i32
  ^bb3:  // 2 preds: ^bb5, ^bb13
    %14 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_6 = arith.constant 0 : i32
    %15 = arith.cmpi eq, %14, %c0_i32_6 : i32
    %16 = arith.extui %15 : i1 to i32
    %c0_i32_7 = arith.constant 0 : i32
    %17 = arith.cmpi ne, %16, %c0_i32_7 : i32
    cf.cond_br %17, ^bb20, ^bb21
  ^bb4:  // pred: ^bb1
    %18 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_8 = arith.constant 0 : i32
    %19 = llvm.load %0 : !llvm.ptr -> i32
    %20 = arith.subi %c0_i32_8, %19 : i32
    %c3_i32 = arith.constant 3 : i32
    %21 = arith.andi %20, %c3_i32 : i32
    llvm.store %21, %4 : i32, !llvm.ptr
    %22 = arith.addi %18, %21 : i32
    llvm.store %22, %5 : i32, !llvm.ptr
    %23 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i32_9 = arith.constant 0 : i32
    %24 = arith.cmpi eq, %23, %c0_i32_9 : i32
    %25 = arith.extui %24 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %26 = arith.cmpi ne, %25, %c0_i32_10 : i32
    cf.cond_br %26, ^bb6, ^bb7
  ^bb5:  // pred: ^bb1
    %27 = llvm.load %0 : !llvm.ptr -> i32
    llvm.store %27, %3 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb6:  // 2 preds: ^bb4, ^bb8
    %28 = llvm.load %5 : !llvm.ptr -> i32
    %29 = llvm.load %2 : !llvm.ptr -> i32
    %30 = llvm.load %4 : !llvm.ptr -> i32
    %31 = arith.subi %29, %30 : i32
    llvm.store %31, %4 : i32, !llvm.ptr
    %c-4_i32 = arith.constant -4 : i32
    %32 = arith.andi %31, %c-4_i32 : i32
    llvm.store %32, %2 : i32, !llvm.ptr
    %33 = arith.addi %28, %32 : i32
    llvm.store %33, %3 : i32, !llvm.ptr
    %34 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_11 = arith.constant 1 : i32
    %35 = arith.cmpi slt, %34, %c1_i32_11 : i32
    %36 = arith.extui %35 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %37 = arith.cmpi ne, %36, %c0_i32_12 : i32
    cf.cond_br %37, ^bb13, ^bb14
  ^bb7:  // pred: ^bb4
    %38 = llvm.load %0 : !llvm.ptr -> i32
    llvm.store %38, %3 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb8:  // pred: ^bb12
    cf.br ^bb6
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %39 = llvm.load %3 : !llvm.ptr -> i32
    %40 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %41 = arith.extui %39 : i32 to i64
    %42 = arith.addi %41, %c0_i64 : i64
    %c1_i64 = arith.constant 1 : i64
    %43 = arith.addi %42, %c1_i64 : i64
    %c0_i32_13 = arith.constant 0 : i32
    %44 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_13) : (!llvm.ptr, i32) -> i32
    %45 = arith.extui %44 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %46 = arith.muli %45, %c65536_i64 : i64
    %47 = arith.cmpi ult, %43, %46 : i64
    cf.cond_br %47, ^bb10, ^bb11
  ^bb10:  // 2 preds: ^bb9, ^bb11
    %48 = llvm.getelementptr %8[%42] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %49 = arith.trunci %40 : i32 to i8
    llvm.store volatile %49, %48 {alignment = 1 : i64} : i8, !llvm.ptr
    %50 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_14 = arith.constant 1 : i32
    %51 = arith.addi %50, %c1_i32_14 : i32
    llvm.store %51, %3 : i32, !llvm.ptr
    %52 = llvm.load %5 : !llvm.ptr -> i32
    %53 = arith.cmpi ult, %51, %52 : i32
    %54 = arith.extui %53 : i1 to i32
    %c0_i32_15 = arith.constant 0 : i32
    %55 = arith.cmpi ne, %54, %c0_i32_15 : i32
    cf.cond_br %55, ^bb9, ^bb12
  ^bb11:  // pred: ^bb9
    %c1_i32_16 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_16) : (i32) -> ()
    cf.br ^bb10
  ^bb12:  // pred: ^bb10
    cf.br ^bb8
  ^bb13:  // 2 preds: ^bb6, ^bb15
    %56 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i32_17 = arith.constant 3 : i32
    %57 = arith.andi %56, %c3_i32_17 : i32
    llvm.store %57, %2 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb14:  // pred: ^bb6
    %58 = llvm.load %1 : !llvm.ptr -> i32
    %c255_i32 = arith.constant 255 : i32
    %59 = arith.andi %58, %c255_i32 : i32
    %c16843009_i32 = arith.constant 16843009 : i32
    %60 = arith.muli %59, %c16843009_i32 : i32
    llvm.store %60, %2 : i32, !llvm.ptr
    cf.br ^bb16
  ^bb15:  // pred: ^bb19
    cf.br ^bb13
  ^bb16:  // 2 preds: ^bb14, ^bb17
    %61 = llvm.load %5 : !llvm.ptr -> i32
    %62 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_18 = arith.constant 0 : i64
    %63 = arith.extui %61 : i32 to i64
    %64 = arith.addi %63, %c0_i64_18 : i64
    %c4_i64 = arith.constant 4 : i64
    %65 = arith.addi %64, %c4_i64 : i64
    %c0_i32_19 = arith.constant 0 : i32
    %66 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_19) : (!llvm.ptr, i32) -> i32
    %67 = arith.extui %66 : i32 to i64
    %c65536_i64_20 = arith.constant 65536 : i64
    %68 = arith.muli %67, %c65536_i64_20 : i64
    %69 = arith.cmpi ult, %65, %68 : i64
    cf.cond_br %69, ^bb17, ^bb18
  ^bb17:  // 2 preds: ^bb16, ^bb18
    %70 = llvm.getelementptr %8[%64] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %62, %70 {alignment = 1 : i64} : i32, !llvm.ptr
    %71 = llvm.load %5 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %72 = arith.addi %71, %c4_i32 : i32
    llvm.store %72, %5 : i32, !llvm.ptr
    %73 = llvm.load %3 : !llvm.ptr -> i32
    %74 = arith.cmpi ult, %72, %73 : i32
    %75 = arith.extui %74 : i1 to i32
    %c0_i32_21 = arith.constant 0 : i32
    %76 = arith.cmpi ne, %75, %c0_i32_21 : i32
    cf.cond_br %76, ^bb16, ^bb19
  ^bb18:  // pred: ^bb16
    %c1_i32_22 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_22) : (i32) -> ()
    cf.br ^bb17
  ^bb19:  // pred: ^bb17
    cf.br ^bb15
  ^bb20:  // 2 preds: ^bb3, ^bb22
    %77 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%77 : i32)
  ^bb21:  // pred: ^bb3
    %78 = llvm.load %3 : !llvm.ptr -> i32
    %79 = llvm.load %2 : !llvm.ptr -> i32
    %80 = arith.addi %78, %79 : i32
    llvm.store %80, %5 : i32, !llvm.ptr
    cf.br ^bb23
  ^bb22:  // pred: ^bb26
    cf.br ^bb20
  ^bb23:  // 2 preds: ^bb21, ^bb24
    %81 = llvm.load %3 : !llvm.ptr -> i32
    %82 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_23 = arith.constant 0 : i64
    %83 = arith.extui %81 : i32 to i64
    %84 = arith.addi %83, %c0_i64_23 : i64
    %c1_i64_24 = arith.constant 1 : i64
    %85 = arith.addi %84, %c1_i64_24 : i64
    %c0_i32_25 = arith.constant 0 : i32
    %86 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_25) : (!llvm.ptr, i32) -> i32
    %87 = arith.extui %86 : i32 to i64
    %c65536_i64_26 = arith.constant 65536 : i64
    %88 = arith.muli %87, %c65536_i64_26 : i64
    %89 = arith.cmpi ult, %85, %88 : i64
    cf.cond_br %89, ^bb24, ^bb25
  ^bb24:  // 2 preds: ^bb23, ^bb25
    %90 = llvm.getelementptr %8[%84] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %91 = arith.trunci %82 : i32 to i8
    llvm.store volatile %91, %90 {alignment = 1 : i64} : i8, !llvm.ptr
    %92 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_27 = arith.constant 1 : i32
    %93 = arith.addi %92, %c1_i32_27 : i32
    llvm.store %93, %3 : i32, !llvm.ptr
    %94 = llvm.load %5 : !llvm.ptr -> i32
    %95 = arith.cmpi ult, %93, %94 : i32
    %96 = arith.extui %95 : i1 to i32
    %c0_i32_28 = arith.constant 0 : i32
    %97 = arith.cmpi ne, %96, %c0_i32_28 : i32
    cf.cond_br %97, ^bb23, ^bb26
  ^bb25:  // pred: ^bb23
    %c1_i32_29 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_29) : (i32) -> ()
    cf.br ^bb24
  ^bb26:  // pred: ^bb24
    cf.br ^bb22
  }
  func.func @f161(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %c1_i32_9 = arith.constant 1 : i32
    %10 = llvm.alloca %c1_i32_9 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %10 : i32, !llvm.ptr
    %11 = llvm.getelementptr %arg0[320] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %14 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %15 = arith.cmpi uge, %14, %c16_i32 : i32
    %16 = arith.extui %15 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %17 = arith.cmpi ne, %16, %c0_i32_10 : i32
    cf.cond_br %17, ^bb4, ^bb5
  ^bb2(%18: i32):  // pred: ^bb36
    return %18 : i32
  ^bb3:  // 2 preds: ^bb5, ^bb15
    %19 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_11 = arith.constant 0 : i32
    %20 = arith.cmpi eq, %19, %c0_i32_11 : i32
    %21 = arith.extui %20 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %22 = arith.cmpi ne, %21, %c0_i32_12 : i32
    cf.cond_br %22, ^bb36, ^bb37
  ^bb4:  // pred: ^bb1
    %23 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_13 = arith.constant 0 : i32
    %24 = llvm.load %0 : !llvm.ptr -> i32
    %25 = arith.subi %c0_i32_13, %24 : i32
    %c3_i32 = arith.constant 3 : i32
    %26 = arith.andi %25, %c3_i32 : i32
    llvm.store %26, %4 : i32, !llvm.ptr
    %27 = arith.addi %23, %26 : i32
    llvm.store %27, %5 : i32, !llvm.ptr
    %28 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i32_14 = arith.constant 0 : i32
    %29 = arith.cmpi eq, %28, %c0_i32_14 : i32
    %30 = arith.extui %29 : i1 to i32
    %c0_i32_15 = arith.constant 0 : i32
    %31 = arith.cmpi ne, %30, %c0_i32_15 : i32
    cf.cond_br %31, ^bb6, ^bb7
  ^bb5:  // pred: ^bb1
    %32 = llvm.load %0 : !llvm.ptr -> i32
    llvm.store %32, %3 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb6:  // 2 preds: ^bb4, ^bb8
    %33 = llvm.load %5 : !llvm.ptr -> i32
    %34 = llvm.load %2 : !llvm.ptr -> i32
    %35 = llvm.load %4 : !llvm.ptr -> i32
    %36 = arith.subi %34, %35 : i32
    llvm.store %36, %7 : i32, !llvm.ptr
    %c-4_i32 = arith.constant -4 : i32
    %37 = arith.andi %36, %c-4_i32 : i32
    llvm.store %37, %8 : i32, !llvm.ptr
    %38 = arith.addi %33, %37 : i32
    llvm.store %38, %3 : i32, !llvm.ptr
    %39 = llvm.load %1 : !llvm.ptr -> i32
    %40 = llvm.load %4 : !llvm.ptr -> i32
    %41 = arith.addi %39, %40 : i32
    llvm.store %41, %9 : i32, !llvm.ptr
    %c3_i32_16 = arith.constant 3 : i32
    %42 = arith.andi %41, %c3_i32_16 : i32
    %c0_i32_17 = arith.constant 0 : i32
    %43 = arith.cmpi eq, %42, %c0_i32_17 : i32
    %44 = arith.extui %43 : i1 to i32
    %c0_i32_18 = arith.constant 0 : i32
    %45 = arith.cmpi ne, %44, %c0_i32_18 : i32
    cf.cond_br %45, ^bb16, ^bb17
  ^bb7:  // pred: ^bb4
    %46 = llvm.load %0 : !llvm.ptr -> i32
    llvm.store %46, %3 : i32, !llvm.ptr
    %47 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %47, %6 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb8:  // pred: ^bb14
    cf.br ^bb6
  ^bb9:  // 2 preds: ^bb7, ^bb12
    %48 = llvm.load %3 : !llvm.ptr -> i32
    %49 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %50 = arith.extui %49 : i32 to i64
    %51 = arith.addi %50, %c0_i64 : i64
    %c1_i64 = arith.constant 1 : i64
    %52 = arith.addi %51, %c1_i64 : i64
    %c0_i32_19 = arith.constant 0 : i32
    %53 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_19) : (!llvm.ptr, i32) -> i32
    %54 = arith.extui %53 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %55 = arith.muli %54, %c65536_i64 : i64
    %56 = arith.cmpi ult, %52, %55 : i64
    cf.cond_br %56, ^bb10, ^bb11
  ^bb10:  // 2 preds: ^bb9, ^bb11
    %57 = llvm.getelementptr %13[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %58 = llvm.load volatile %57 {alignment = 1 : i64} : !llvm.ptr -> i8
    %59 = arith.extui %58 : i8 to i32
    %c0_i64_20 = arith.constant 0 : i64
    %60 = arith.extui %48 : i32 to i64
    %61 = arith.addi %60, %c0_i64_20 : i64
    %c1_i64_21 = arith.constant 1 : i64
    %62 = arith.addi %61, %c1_i64_21 : i64
    %c0_i32_22 = arith.constant 0 : i32
    %63 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_22) : (!llvm.ptr, i32) -> i32
    %64 = arith.extui %63 : i32 to i64
    %c65536_i64_23 = arith.constant 65536 : i64
    %65 = arith.muli %64, %c65536_i64_23 : i64
    %66 = arith.cmpi ult, %62, %65 : i64
    cf.cond_br %66, ^bb12, ^bb13
  ^bb11:  // pred: ^bb9
    %c1_i32_24 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_24) : (i32) -> ()
    cf.br ^bb10
  ^bb12:  // 2 preds: ^bb10, ^bb13
    %67 = llvm.getelementptr %13[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %68 = arith.trunci %59 : i32 to i8
    llvm.store volatile %68, %67 {alignment = 1 : i64} : i8, !llvm.ptr
    %69 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i32_25 = arith.constant 1 : i32
    %70 = arith.addi %69, %c1_i32_25 : i32
    llvm.store %70, %6 : i32, !llvm.ptr
    %71 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_26 = arith.constant 1 : i32
    %72 = arith.addi %71, %c1_i32_26 : i32
    llvm.store %72, %3 : i32, !llvm.ptr
    %73 = llvm.load %5 : !llvm.ptr -> i32
    %74 = arith.cmpi ult, %72, %73 : i32
    %75 = arith.extui %74 : i1 to i32
    %c0_i32_27 = arith.constant 0 : i32
    %76 = arith.cmpi ne, %75, %c0_i32_27 : i32
    cf.cond_br %76, ^bb9, ^bb14
  ^bb13:  // pred: ^bb10
    %c1_i32_28 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_28) : (i32) -> ()
    cf.br ^bb12
  ^bb14:  // pred: ^bb12
    cf.br ^bb8
  ^bb15:  // 4 preds: ^bb16, ^bb17, ^bb27, ^bb29
    %77 = llvm.load %7 : !llvm.ptr -> i32
    %c3_i32_29 = arith.constant 3 : i32
    %78 = arith.andi %77, %c3_i32_29 : i32
    llvm.store %78, %2 : i32, !llvm.ptr
    %79 = llvm.load %9 : !llvm.ptr -> i32
    %80 = llvm.load %8 : !llvm.ptr -> i32
    %81 = arith.addi %79, %80 : i32
    llvm.store %81, %1 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb16:  // 2 preds: ^bb6, ^bb21
    %82 = llvm.load %8 : !llvm.ptr -> i32
    %c1_i32_30 = arith.constant 1 : i32
    %83 = arith.cmpi slt, %82, %c1_i32_30 : i32
    %84 = arith.extui %83 : i1 to i32
    %c0_i32_31 = arith.constant 0 : i32
    %85 = arith.cmpi ne, %84, %c0_i32_31 : i32
    cf.cond_br %85, ^bb15, ^bb28
  ^bb17:  // pred: ^bb6
    %86 = llvm.load %8 : !llvm.ptr -> i32
    %c1_i32_32 = arith.constant 1 : i32
    %87 = arith.cmpi slt, %86, %c1_i32_32 : i32
    %88 = arith.extui %87 : i1 to i32
    %c0_i32_33 = arith.constant 0 : i32
    %89 = arith.cmpi ne, %88, %c0_i32_33 : i32
    cf.cond_br %89, ^bb15, ^bb18
  ^bb18:  // pred: ^bb17
    %90 = llvm.load %9 : !llvm.ptr -> i32
    %c3_i32_34 = arith.constant 3 : i32
    %c31_i32 = arith.constant 31 : i32
    %91 = arith.cmpi ule, %c3_i32_34, %c31_i32 : i32
    %92 = scf.if %91 -> (i32) {
      %206 = arith.shli %90, %c3_i32_34 : i32
      scf.yield %206 : i32
    } else {
      %c0_i32_83 = arith.constant 0 : i32
      scf.yield %c0_i32_83 : i32
    }
    llvm.store %92, %6 : i32, !llvm.ptr
    %c24_i32 = arith.constant 24 : i32
    %93 = arith.andi %92, %c24_i32 : i32
    llvm.store %93, %2 : i32, !llvm.ptr
    %94 = llvm.load %9 : !llvm.ptr -> i32
    %c-4_i32_35 = arith.constant -4 : i32
    %95 = arith.andi %94, %c-4_i32_35 : i32
    llvm.store %95, %10 : i32, !llvm.ptr
    %c4_i32 = arith.constant 4 : i32
    %96 = arith.addi %95, %c4_i32 : i32
    llvm.store %96, %1 : i32, !llvm.ptr
    %c0_i32_36 = arith.constant 0 : i32
    %97 = llvm.load %6 : !llvm.ptr -> i32
    %98 = arith.subi %c0_i32_36, %97 : i32
    %c24_i32_37 = arith.constant 24 : i32
    %99 = arith.andi %98, %c24_i32_37 : i32
    llvm.store %99, %4 : i32, !llvm.ptr
    %100 = llvm.load %10 : !llvm.ptr -> i32
    %c0_i64_38 = arith.constant 0 : i64
    %101 = arith.extui %100 : i32 to i64
    %102 = arith.addi %101, %c0_i64_38 : i64
    %c4_i64 = arith.constant 4 : i64
    %103 = arith.addi %102, %c4_i64 : i64
    %c0_i32_39 = arith.constant 0 : i32
    %104 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_39) : (!llvm.ptr, i32) -> i32
    %105 = arith.extui %104 : i32 to i64
    %c65536_i64_40 = arith.constant 65536 : i64
    %106 = arith.muli %105, %c65536_i64_40 : i64
    %107 = arith.cmpi ult, %103, %106 : i64
    cf.cond_br %107, ^bb19, ^bb20
  ^bb19:  // 2 preds: ^bb18, ^bb20
    %108 = llvm.getelementptr %13[%102] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %109 = llvm.load volatile %108 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %109, %6 : i32, !llvm.ptr
    cf.br ^bb22
  ^bb20:  // pred: ^bb18
    %c1_i32_41 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_41) : (i32) -> ()
    cf.br ^bb19
  ^bb21:  // no predecessors
    cf.br ^bb16
  ^bb22:  // 2 preds: ^bb19, ^bb25
    %110 = llvm.load %5 : !llvm.ptr -> i32
    %111 = llvm.load %6 : !llvm.ptr -> i32
    %112 = llvm.load %2 : !llvm.ptr -> i32
    %c31_i32_42 = arith.constant 31 : i32
    %113 = arith.cmpi ule, %112, %c31_i32_42 : i32
    %114 = scf.if %113 -> (i32) {
      %206 = arith.shrui %111, %112 : i32
      scf.yield %206 : i32
    } else {
      %c0_i32_83 = arith.constant 0 : i32
      scf.yield %c0_i32_83 : i32
    }
    %115 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_43 = arith.constant 0 : i64
    %116 = arith.extui %115 : i32 to i64
    %117 = arith.addi %116, %c0_i64_43 : i64
    %c4_i64_44 = arith.constant 4 : i64
    %118 = arith.addi %117, %c4_i64_44 : i64
    %c0_i32_45 = arith.constant 0 : i32
    %119 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_45) : (!llvm.ptr, i32) -> i32
    %120 = arith.extui %119 : i32 to i64
    %c65536_i64_46 = arith.constant 65536 : i64
    %121 = arith.muli %120, %c65536_i64_46 : i64
    %122 = arith.cmpi ult, %118, %121 : i64
    cf.cond_br %122, ^bb23, ^bb24
  ^bb23:  // 2 preds: ^bb22, ^bb24
    %123 = llvm.getelementptr %13[%117] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %124 = llvm.load volatile %123 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %124, %6 : i32, !llvm.ptr
    %125 = llvm.load %4 : !llvm.ptr -> i32
    %c31_i32_47 = arith.constant 31 : i32
    %126 = arith.cmpi ule, %125, %c31_i32_47 : i32
    %127 = scf.if %126 -> (i32) {
      %206 = arith.shli %124, %125 : i32
      scf.yield %206 : i32
    } else {
      %c0_i32_83 = arith.constant 0 : i32
      scf.yield %c0_i32_83 : i32
    }
    %128 = arith.ori %114, %127 : i32
    %c0_i64_48 = arith.constant 0 : i64
    %129 = arith.extui %110 : i32 to i64
    %130 = arith.addi %129, %c0_i64_48 : i64
    %c4_i64_49 = arith.constant 4 : i64
    %131 = arith.addi %130, %c4_i64_49 : i64
    %c0_i32_50 = arith.constant 0 : i32
    %132 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_50) : (!llvm.ptr, i32) -> i32
    %133 = arith.extui %132 : i32 to i64
    %c65536_i64_51 = arith.constant 65536 : i64
    %134 = arith.muli %133, %c65536_i64_51 : i64
    %135 = arith.cmpi ult, %131, %134 : i64
    cf.cond_br %135, ^bb25, ^bb26
  ^bb24:  // pred: ^bb22
    %c1_i32_52 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_52) : (i32) -> ()
    cf.br ^bb23
  ^bb25:  // 2 preds: ^bb23, ^bb26
    %136 = llvm.getelementptr %13[%130] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %128, %136 {alignment = 1 : i64} : i32, !llvm.ptr
    %137 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32_53 = arith.constant 4 : i32
    %138 = arith.addi %137, %c4_i32_53 : i32
    llvm.store %138, %1 : i32, !llvm.ptr
    %139 = llvm.load %5 : !llvm.ptr -> i32
    %c4_i32_54 = arith.constant 4 : i32
    %140 = arith.addi %139, %c4_i32_54 : i32
    llvm.store %140, %5 : i32, !llvm.ptr
    %141 = llvm.load %3 : !llvm.ptr -> i32
    %142 = arith.cmpi ult, %140, %141 : i32
    %143 = arith.extui %142 : i1 to i32
    %c0_i32_55 = arith.constant 0 : i32
    %144 = arith.cmpi ne, %143, %c0_i32_55 : i32
    cf.cond_br %144, ^bb22, ^bb27
  ^bb26:  // pred: ^bb23
    %c1_i32_56 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_56) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // pred: ^bb25
    cf.br ^bb15
  ^bb28:  // pred: ^bb16
    %145 = llvm.load %9 : !llvm.ptr -> i32
    llvm.store %145, %1 : i32, !llvm.ptr
    cf.br ^bb30
  ^bb29:  // pred: ^bb35
    cf.br ^bb15
  ^bb30:  // 2 preds: ^bb28, ^bb33
    %146 = llvm.load %5 : !llvm.ptr -> i32
    %147 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_57 = arith.constant 0 : i64
    %148 = arith.extui %147 : i32 to i64
    %149 = arith.addi %148, %c0_i64_57 : i64
    %c4_i64_58 = arith.constant 4 : i64
    %150 = arith.addi %149, %c4_i64_58 : i64
    %c0_i32_59 = arith.constant 0 : i32
    %151 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_59) : (!llvm.ptr, i32) -> i32
    %152 = arith.extui %151 : i32 to i64
    %c65536_i64_60 = arith.constant 65536 : i64
    %153 = arith.muli %152, %c65536_i64_60 : i64
    %154 = arith.cmpi ult, %150, %153 : i64
    cf.cond_br %154, ^bb31, ^bb32
  ^bb31:  // 2 preds: ^bb30, ^bb32
    %155 = llvm.getelementptr %13[%149] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %156 = llvm.load volatile %155 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_61 = arith.constant 0 : i64
    %157 = arith.extui %146 : i32 to i64
    %158 = arith.addi %157, %c0_i64_61 : i64
    %c4_i64_62 = arith.constant 4 : i64
    %159 = arith.addi %158, %c4_i64_62 : i64
    %c0_i32_63 = arith.constant 0 : i32
    %160 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_63) : (!llvm.ptr, i32) -> i32
    %161 = arith.extui %160 : i32 to i64
    %c65536_i64_64 = arith.constant 65536 : i64
    %162 = arith.muli %161, %c65536_i64_64 : i64
    %163 = arith.cmpi ult, %159, %162 : i64
    cf.cond_br %163, ^bb33, ^bb34
  ^bb32:  // pred: ^bb30
    %c1_i32_65 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_65) : (i32) -> ()
    cf.br ^bb31
  ^bb33:  // 2 preds: ^bb31, ^bb34
    %164 = llvm.getelementptr %13[%158] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %156, %164 {alignment = 1 : i64} : i32, !llvm.ptr
    %165 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32_66 = arith.constant 4 : i32
    %166 = arith.addi %165, %c4_i32_66 : i32
    llvm.store %166, %1 : i32, !llvm.ptr
    %167 = llvm.load %5 : !llvm.ptr -> i32
    %c4_i32_67 = arith.constant 4 : i32
    %168 = arith.addi %167, %c4_i32_67 : i32
    llvm.store %168, %5 : i32, !llvm.ptr
    %169 = llvm.load %3 : !llvm.ptr -> i32
    %170 = arith.cmpi ult, %168, %169 : i32
    %171 = arith.extui %170 : i1 to i32
    %c0_i32_68 = arith.constant 0 : i32
    %172 = arith.cmpi ne, %171, %c0_i32_68 : i32
    cf.cond_br %172, ^bb30, ^bb35
  ^bb34:  // pred: ^bb31
    %c1_i32_69 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_69) : (i32) -> ()
    cf.br ^bb33
  ^bb35:  // pred: ^bb33
    cf.br ^bb29
  ^bb36:  // 2 preds: ^bb3, ^bb38
    %173 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%173 : i32)
  ^bb37:  // pred: ^bb3
    %174 = llvm.load %3 : !llvm.ptr -> i32
    %175 = llvm.load %2 : !llvm.ptr -> i32
    %176 = arith.addi %174, %175 : i32
    llvm.store %176, %5 : i32, !llvm.ptr
    cf.br ^bb39
  ^bb38:  // pred: ^bb44
    cf.br ^bb36
  ^bb39:  // 2 preds: ^bb37, ^bb42
    %177 = llvm.load %3 : !llvm.ptr -> i32
    %178 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_70 = arith.constant 0 : i64
    %179 = arith.extui %178 : i32 to i64
    %180 = arith.addi %179, %c0_i64_70 : i64
    %c1_i64_71 = arith.constant 1 : i64
    %181 = arith.addi %180, %c1_i64_71 : i64
    %c0_i32_72 = arith.constant 0 : i32
    %182 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_72) : (!llvm.ptr, i32) -> i32
    %183 = arith.extui %182 : i32 to i64
    %c65536_i64_73 = arith.constant 65536 : i64
    %184 = arith.muli %183, %c65536_i64_73 : i64
    %185 = arith.cmpi ult, %181, %184 : i64
    cf.cond_br %185, ^bb40, ^bb41
  ^bb40:  // 2 preds: ^bb39, ^bb41
    %186 = llvm.getelementptr %13[%180] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %187 = llvm.load volatile %186 {alignment = 1 : i64} : !llvm.ptr -> i8
    %188 = arith.extui %187 : i8 to i32
    %c0_i64_74 = arith.constant 0 : i64
    %189 = arith.extui %177 : i32 to i64
    %190 = arith.addi %189, %c0_i64_74 : i64
    %c1_i64_75 = arith.constant 1 : i64
    %191 = arith.addi %190, %c1_i64_75 : i64
    %c0_i32_76 = arith.constant 0 : i32
    %192 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_76) : (!llvm.ptr, i32) -> i32
    %193 = arith.extui %192 : i32 to i64
    %c65536_i64_77 = arith.constant 65536 : i64
    %194 = arith.muli %193, %c65536_i64_77 : i64
    %195 = arith.cmpi ult, %191, %194 : i64
    cf.cond_br %195, ^bb42, ^bb43
  ^bb41:  // pred: ^bb39
    %c1_i32_78 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_78) : (i32) -> ()
    cf.br ^bb40
  ^bb42:  // 2 preds: ^bb40, ^bb43
    %196 = llvm.getelementptr %13[%190] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %197 = arith.trunci %188 : i32 to i8
    llvm.store volatile %197, %196 {alignment = 1 : i64} : i8, !llvm.ptr
    %198 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_79 = arith.constant 1 : i32
    %199 = arith.addi %198, %c1_i32_79 : i32
    llvm.store %199, %1 : i32, !llvm.ptr
    %200 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_80 = arith.constant 1 : i32
    %201 = arith.addi %200, %c1_i32_80 : i32
    llvm.store %201, %3 : i32, !llvm.ptr
    %202 = llvm.load %5 : !llvm.ptr -> i32
    %203 = arith.cmpi ult, %201, %202 : i32
    %204 = arith.extui %203 : i1 to i32
    %c0_i32_81 = arith.constant 0 : i32
    %205 = arith.cmpi ne, %204, %c0_i32_81 : i32
    cf.cond_br %205, ^bb39, ^bb44
  ^bb43:  // pred: ^bb40
    %c1_i32_82 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_82) : (i32) -> ()
    cf.br ^bb42
  ^bb44:  // pred: ^bb42
    cf.br ^bb38
  }
  func.func private @dora_fn_wasm_table_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_copy(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_fill(!llvm.ptr, i32, i32, !llvm.ptr, i32)
  func.func private @dora_fn_wasm_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_table_set(!llvm.ptr, i32, i32, !llvm.ptr)
  func.func private @dora_fn_wasm_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_imported_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_func_ref(!llvm.ptr, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_data_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_elem_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_raise_trap(i32)
  func.func private @dora_fn_wasm_gas_limit() -> i64
}
