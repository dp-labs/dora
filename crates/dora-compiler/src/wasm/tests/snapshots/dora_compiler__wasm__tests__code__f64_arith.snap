---
source: crates/dora-compiler/src/wasm/tests/code.rs
expression: op
snapshot_kind: text
---
module {
  func.func @f0(%arg0: f64, %arg1: f64) -> f64 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg0, %0 : f64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %1 : f64, !llvm.ptr
    %2 = llvm.load %0 : !llvm.ptr -> f64
    %3 = llvm.load %1 : !llvm.ptr -> f64
    %4 = "wasm.add"(%2, %3) : (f64, f64) -> f64
    cf.br ^bb1(%4 : f64)
  ^bb1(%5: f64):  // pred: ^bb0
    return %5 : f64
  }
  func.func @f1(%arg0: f64, %arg1: f64) -> f64 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg0, %0 : f64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %1 : f64, !llvm.ptr
    %2 = llvm.load %0 : !llvm.ptr -> f64
    %3 = llvm.load %1 : !llvm.ptr -> f64
    %4 = "wasm.sub"(%2, %3) : (f64, f64) -> f64
    cf.br ^bb1(%4 : f64)
  ^bb1(%5: f64):  // pred: ^bb0
    return %5 : f64
  }
  func.func @f2(%arg0: f64, %arg1: f64) -> f64 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg0, %0 : f64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %1 : f64, !llvm.ptr
    %2 = llvm.load %0 : !llvm.ptr -> f64
    %3 = llvm.load %1 : !llvm.ptr -> f64
    %4 = "wasm.mul"(%2, %3) : (f64, f64) -> f64
    cf.br ^bb1(%4 : f64)
  ^bb1(%5: f64):  // pred: ^bb0
    return %5 : f64
  }
  func.func @f3(%arg0: f64, %arg1: f64) -> f64 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg0, %0 : f64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %1 : f64, !llvm.ptr
    %2 = llvm.load %0 : !llvm.ptr -> f64
    %3 = llvm.load %1 : !llvm.ptr -> f64
    %4 = "wasm.div"(%2, %3) : (f64, f64) -> f64
    cf.br ^bb1(%4 : f64)
  ^bb1(%5: f64):  // pred: ^bb0
    return %5 : f64
  }
  func.func @f4(%arg0: f64) -> f64 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg0, %0 : f64, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> f64
    %2 = "wasm.sqrt"(%1) : (f64) -> f64
    cf.br ^bb1(%2 : f64)
  ^bb1(%3: f64):  // pred: ^bb0
    return %3 : f64
  }
  func.func @f5(%arg0: f64, %arg1: f64) -> f64 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg0, %0 : f64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %1 : f64, !llvm.ptr
    %2 = llvm.load %0 : !llvm.ptr -> f64
    %3 = llvm.load %1 : !llvm.ptr -> f64
    %4 = "wasm.min"(%2, %3) : (f64, f64) -> f64
    cf.br ^bb1(%4 : f64)
  ^bb1(%5: f64):  // pred: ^bb0
    return %5 : f64
  }
  func.func @f6(%arg0: f64, %arg1: f64) -> f64 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg0, %0 : f64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %1 : f64, !llvm.ptr
    %2 = llvm.load %0 : !llvm.ptr -> f64
    %3 = llvm.load %1 : !llvm.ptr -> f64
    %4 = "wasm.max"(%2, %3) : (f64, f64) -> f64
    cf.br ^bb1(%4 : f64)
  ^bb1(%5: f64):  // pred: ^bb0
    return %5 : f64
  }
  func.func @f7(%arg0: f64) -> f64 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg0, %0 : f64, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> f64
    %2 = "wasm.ceil"(%1) : (f64) -> f64
    cf.br ^bb1(%2 : f64)
  ^bb1(%3: f64):  // pred: ^bb0
    return %3 : f64
  }
  func.func @f8(%arg0: f64) -> f64 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg0, %0 : f64, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> f64
    %2 = "wasm.floor"(%1) : (f64) -> f64
    cf.br ^bb1(%2 : f64)
  ^bb1(%3: f64):  // pred: ^bb0
    return %3 : f64
  }
  func.func @f9(%arg0: f64) -> f64 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg0, %0 : f64, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> f64
    %2 = "wasm.trunc"(%1) : (f64) -> f64
    cf.br ^bb1(%2 : f64)
  ^bb1(%3: f64):  // pred: ^bb0
    return %3 : f64
  }
  func.func @f10(%arg0: f64) -> f64 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg0, %0 : f64, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> f64
    %2 = "wasm.nearest"(%1) : (f64) -> f64
    cf.br ^bb1(%2 : f64)
  ^bb1(%3: f64):  // pred: ^bb0
    return %3 : f64
  }
  func.func @f11(%arg0: f64) -> f64 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg0, %0 : f64, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> f64
    %2 = "wasm.abs"(%1) : (f64) -> f64
    cf.br ^bb1(%2 : f64)
  ^bb1(%3: f64):  // pred: ^bb0
    return %3 : f64
  }
  func.func @f12(%arg0: f64) -> f64 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg0, %0 : f64, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> f64
    %2 = "wasm.neg"(%1) : (f64) -> f64
    cf.br ^bb1(%2 : f64)
  ^bb1(%3: f64):  // pred: ^bb0
    return %3 : f64
  }
  func.func @f13(%arg0: f64, %arg1: f64) -> f64 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg0, %0 : f64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %1 : f64, !llvm.ptr
    %2 = llvm.load %0 : !llvm.ptr -> f64
    %3 = llvm.load %1 : !llvm.ptr -> f64
    %4 = "wasm.copysign"(%2, %3) : (f64, f64) -> f64
    cf.br ^bb1(%4 : f64)
  ^bb1(%5: f64):  // pred: ^bb0
    return %5 : f64
  }
  func.func @f14(%arg0: f64, %arg1: f64) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg0, %0 : f64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %1 : f64, !llvm.ptr
    %2 = llvm.load %0 : !llvm.ptr -> f64
    %3 = llvm.load %1 : !llvm.ptr -> f64
    %4 = "wasm.eq"(%2, %3) : (f64, f64) -> i32
    cf.br ^bb1(%4 : i32)
  ^bb1(%5: i32):  // pred: ^bb0
    return %5 : i32
  }
  func.func @f15(%arg0: f64, %arg1: f64) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg0, %0 : f64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %1 : f64, !llvm.ptr
    %2 = llvm.load %0 : !llvm.ptr -> f64
    %3 = llvm.load %1 : !llvm.ptr -> f64
    %4 = "wasm.ne"(%2, %3) : (f64, f64) -> i32
    cf.br ^bb1(%4 : i32)
  ^bb1(%5: i32):  // pred: ^bb0
    return %5 : i32
  }
  func.func @f16(%arg0: f64, %arg1: f64) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg0, %0 : f64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %1 : f64, !llvm.ptr
    %2 = llvm.load %0 : !llvm.ptr -> f64
    %3 = llvm.load %1 : !llvm.ptr -> f64
    %4 = "wasm.lt"(%2, %3) : (f64, f64) -> i32
    cf.br ^bb1(%4 : i32)
  ^bb1(%5: i32):  // pred: ^bb0
    return %5 : i32
  }
  func.func @f17(%arg0: f64, %arg1: f64) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg0, %0 : f64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %1 : f64, !llvm.ptr
    %2 = llvm.load %0 : !llvm.ptr -> f64
    %3 = llvm.load %1 : !llvm.ptr -> f64
    %4 = "wasm.le"(%2, %3) : (f64, f64) -> i32
    cf.br ^bb1(%4 : i32)
  ^bb1(%5: i32):  // pred: ^bb0
    return %5 : i32
  }
  func.func @f18(%arg0: f64, %arg1: f64) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg0, %0 : f64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %1 : f64, !llvm.ptr
    %2 = llvm.load %0 : !llvm.ptr -> f64
    %3 = llvm.load %1 : !llvm.ptr -> f64
    %4 = "wasm.gt"(%2, %3) : (f64, f64) -> i32
    cf.br ^bb1(%4 : i32)
  ^bb1(%5: i32):  // pred: ^bb0
    return %5 : i32
  }
  func.func @f19(%arg0: f64, %arg1: f64) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg0, %0 : f64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %1 : f64, !llvm.ptr
    %2 = llvm.load %0 : !llvm.ptr -> f64
    %3 = llvm.load %1 : !llvm.ptr -> f64
    %4 = "wasm.ge"(%2, %3) : (f64, f64) -> i32
    cf.br ^bb1(%4 : i32)
  ^bb1(%5: i32):  // pred: ^bb0
    return %5 : i32
  }
}
