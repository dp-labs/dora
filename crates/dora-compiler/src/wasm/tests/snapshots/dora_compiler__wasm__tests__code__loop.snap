---
source: crates/dora-compiler/src/wasm/tests/code.rs
expression: op
snapshot_kind: text
---
module {
  func.func @dummy(%arg0: !llvm.ptr) {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func public @empty(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb4
  ^bb2:  // pred: ^bb5
    return
  ^bb3:  // pred: ^bb4
    cf.br ^bb6
  ^bb4:  // pred: ^bb1
    cf.br ^bb3
  ^bb5:  // pred: ^bb6
    cf.br ^bb2
  ^bb6:  // pred: ^bb3
    cf.br ^bb5
  }
  func.func public @singular(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb4
  ^bb2(%0: i32):  // pred: ^bb5
    return %0 : i32
  ^bb3:  // pred: ^bb4
    cf.br ^bb6
  ^bb4:  // pred: ^bb1
    cf.br ^bb3
  ^bb5(%1: i32):  // pred: ^bb6
    cf.br ^bb2(%1 : i32)
  ^bb6:  // pred: ^bb3
    %c7_i32 = arith.constant 7 : i32
    cf.br ^bb5(%c7_i32 : i32)
  }
  func.func public @multi(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb4
  ^bb2(%0: i32):  // pred: ^bb7
    return %0 : i32
  ^bb3:  // pred: ^bb4
    cf.br ^bb6
  ^bb4:  // pred: ^bb1
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    cf.br ^bb3
  ^bb5(%1: i32):  // pred: ^bb6
    cf.br ^bb8
  ^bb6:  // pred: ^bb3
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c8_i32 = arith.constant 8 : i32
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    cf.br ^bb5(%c8_i32 : i32)
  ^bb7(%2: i32, %3: i64, %4: i32):  // pred: ^bb8
    cf.br ^bb2(%2 : i32)
  ^bb8:  // pred: ^bb5
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c8_i32_0 = arith.constant 8 : i32
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c7_i64 = arith.constant 7 : i64
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    cf.br ^bb7(%c8_i32_0, %c7_i64, %c9_i32 : i32, i64, i32)
  }
  func.func public @nested(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb4
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // pred: ^bb8
    cf.br ^bb2(%1 : i32)
  ^bb4:  // pred: ^bb1
    cf.br ^bb6
  ^bb5:  // pred: ^bb7
    cf.br ^bb9
  ^bb6:  // pred: ^bb4
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    cf.br ^bb7
  ^bb7:  // pred: ^bb6
    cf.br ^bb5
  ^bb8(%2: i32):  // pred: ^bb9
    cf.br ^bb3(%2 : i32)
  ^bb9:  // pred: ^bb5
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c9_i32 = arith.constant 9 : i32
    cf.br ^bb8(%c9_i32 : i32)
  }
  func.func public @deep(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb4
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // pred: ^bb5
    cf.br ^bb2(%1 : i32)
  ^bb4:  // pred: ^bb1
    cf.br ^bb7
  ^bb5(%2: i32):  // pred: ^bb6
    cf.br ^bb3(%2 : i32)
  ^bb6(%3: i32):  // pred: ^bb8
    cf.br ^bb5(%3 : i32)
  ^bb7:  // pred: ^bb4
    cf.br ^bb10
  ^bb8(%4: i32):  // pred: ^bb9
    cf.br ^bb6(%4 : i32)
  ^bb9(%5: i32):  // pred: ^bb11
    cf.br ^bb8(%5 : i32)
  ^bb10:  // pred: ^bb7
    cf.br ^bb13
  ^bb11(%6: i32):  // pred: ^bb12
    cf.br ^bb9(%6 : i32)
  ^bb12(%7: i32):  // pred: ^bb14
    cf.br ^bb11(%7 : i32)
  ^bb13:  // pred: ^bb10
    cf.br ^bb16
  ^bb14(%8: i32):  // pred: ^bb15
    cf.br ^bb12(%8 : i32)
  ^bb15(%9: i32):  // pred: ^bb17
    cf.br ^bb14(%9 : i32)
  ^bb16:  // pred: ^bb13
    cf.br ^bb19
  ^bb17(%10: i32):  // pred: ^bb18
    cf.br ^bb15(%10 : i32)
  ^bb18(%11: i32):  // pred: ^bb20
    cf.br ^bb17(%11 : i32)
  ^bb19:  // pred: ^bb16
    cf.br ^bb22
  ^bb20(%12: i32):  // pred: ^bb21
    cf.br ^bb18(%12 : i32)
  ^bb21(%13: i32):  // pred: ^bb23
    cf.br ^bb20(%13 : i32)
  ^bb22:  // pred: ^bb19
    cf.br ^bb25
  ^bb23(%14: i32):  // pred: ^bb24
    cf.br ^bb21(%14 : i32)
  ^bb24(%15: i32):  // pred: ^bb26
    cf.br ^bb23(%15 : i32)
  ^bb25:  // pred: ^bb22
    cf.br ^bb28
  ^bb26(%16: i32):  // pred: ^bb27
    cf.br ^bb24(%16 : i32)
  ^bb27(%17: i32):  // pred: ^bb29
    cf.br ^bb26(%17 : i32)
  ^bb28:  // pred: ^bb25
    cf.br ^bb31
  ^bb29(%18: i32):  // pred: ^bb30
    cf.br ^bb27(%18 : i32)
  ^bb30(%19: i32):  // pred: ^bb32
    cf.br ^bb29(%19 : i32)
  ^bb31:  // pred: ^bb28
    cf.br ^bb34
  ^bb32(%20: i32):  // pred: ^bb33
    cf.br ^bb30(%20 : i32)
  ^bb33(%21: i32):  // pred: ^bb35
    cf.br ^bb32(%21 : i32)
  ^bb34:  // pred: ^bb31
    cf.br ^bb37
  ^bb35(%22: i32):  // pred: ^bb36
    cf.br ^bb33(%22 : i32)
  ^bb36(%23: i32):  // pred: ^bb38
    cf.br ^bb35(%23 : i32)
  ^bb37:  // pred: ^bb34
    cf.br ^bb40
  ^bb38(%24: i32):  // pred: ^bb39
    cf.br ^bb36(%24 : i32)
  ^bb39(%25: i32):  // pred: ^bb41
    cf.br ^bb38(%25 : i32)
  ^bb40:  // pred: ^bb37
    cf.br ^bb43
  ^bb41(%26: i32):  // pred: ^bb42
    cf.br ^bb39(%26 : i32)
  ^bb42(%27: i32):  // pred: ^bb44
    cf.br ^bb41(%27 : i32)
  ^bb43:  // pred: ^bb40
    cf.br ^bb46
  ^bb44(%28: i32):  // pred: ^bb45
    cf.br ^bb42(%28 : i32)
  ^bb45(%29: i32):  // pred: ^bb47
    cf.br ^bb44(%29 : i32)
  ^bb46:  // pred: ^bb43
    cf.br ^bb49
  ^bb47(%30: i32):  // pred: ^bb48
    cf.br ^bb45(%30 : i32)
  ^bb48(%31: i32):  // pred: ^bb50
    cf.br ^bb47(%31 : i32)
  ^bb49:  // pred: ^bb46
    cf.br ^bb52
  ^bb50(%32: i32):  // pred: ^bb51
    cf.br ^bb48(%32 : i32)
  ^bb51(%33: i32):  // pred: ^bb53
    cf.br ^bb50(%33 : i32)
  ^bb52:  // pred: ^bb49
    cf.br ^bb55
  ^bb53(%34: i32):  // pred: ^bb54
    cf.br ^bb51(%34 : i32)
  ^bb54(%35: i32):  // pred: ^bb56
    cf.br ^bb53(%35 : i32)
  ^bb55:  // pred: ^bb52
    cf.br ^bb58
  ^bb56(%36: i32):  // pred: ^bb57
    cf.br ^bb54(%36 : i32)
  ^bb57(%37: i32):  // pred: ^bb59
    cf.br ^bb56(%37 : i32)
  ^bb58:  // pred: ^bb55
    cf.br ^bb61
  ^bb59(%38: i32):  // pred: ^bb60
    cf.br ^bb57(%38 : i32)
  ^bb60(%39: i32):  // pred: ^bb62
    cf.br ^bb59(%39 : i32)
  ^bb61:  // pred: ^bb58
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c150_i32 = arith.constant 150 : i32
    cf.br ^bb62(%c150_i32 : i32)
  ^bb62(%40: i32):  // pred: ^bb61
    cf.br ^bb60(%40 : i32)
  }
  func.func public @"as-select-first"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb4
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // pred: ^bb4
    %c2_i32 = arith.constant 2 : i32
    %c3_i32 = arith.constant 3 : i32
    %2 = "wasm.select"(%1, %c2_i32, %c3_i32) : (i32, i32, i32) -> i32
    cf.br ^bb2(%2 : i32)
  ^bb4:  // pred: ^bb1
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb3(%c1_i32 : i32)
  }
  func.func public @"as-select-mid"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2_i32 = arith.constant 2 : i32
    cf.br ^bb4
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // pred: ^bb4
    %c3_i32 = arith.constant 3 : i32
    %2 = "wasm.select"(%c2_i32, %1, %c3_i32) : (i32, i32, i32) -> i32
    cf.br ^bb2(%2 : i32)
  ^bb4:  // pred: ^bb1
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb3(%c1_i32 : i32)
  }
  func.func public @"as-select-last"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2_i32 = arith.constant 2 : i32
    %c3_i32 = arith.constant 3 : i32
    cf.br ^bb4
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // pred: ^bb4
    %2 = "wasm.select"(%c2_i32, %c3_i32, %1) : (i32, i32, i32) -> i32
    cf.br ^bb2(%2 : i32)
  ^bb4:  // pred: ^bb1
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb3(%c1_i32 : i32)
  }
  func.func public @"as-if-condition"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb4
  ^bb2:  // pred: ^bb7
    return
  ^bb3(%0: i32):  // pred: ^bb4
    %c0_i32 = arith.constant 0 : i32
    %1 = arith.cmpi ne, %0, %c0_i32 : i32
    cf.cond_br %1, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb3(%c1_i32 : i32)
  ^bb5:  // pred: ^bb3
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    cf.br ^bb7
  ^bb6:  // pred: ^bb3
    cf.br ^bb7
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cf.br ^bb2
  }
  func.func public @"as-if-then"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %0 = arith.cmpi ne, %c1_i32, %c0_i32 : i32
    cf.cond_br %0, ^bb3, ^bb4
  ^bb2(%1: i32):  // pred: ^bb5
    return %1 : i32
  ^bb3:  // pred: ^bb1
    cf.br ^bb7
  ^bb4:  // pred: ^bb1
    %c2_i32 = arith.constant 2 : i32
    cf.br ^bb5(%c2_i32 : i32)
  ^bb5(%2: i32):  // 2 preds: ^bb4, ^bb6
    cf.br ^bb2(%2 : i32)
  ^bb6(%3: i32):  // pred: ^bb7
    cf.br ^bb5(%3 : i32)
  ^bb7:  // pred: ^bb3
    %c1_i32_0 = arith.constant 1 : i32
    cf.br ^bb6(%c1_i32_0 : i32)
  }
  func.func public @"as-if-else"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %0 = arith.cmpi ne, %c1_i32, %c0_i32 : i32
    cf.cond_br %0, ^bb3, ^bb4
  ^bb2(%1: i32):  // pred: ^bb5
    return %1 : i32
  ^bb3:  // pred: ^bb1
    %c2_i32 = arith.constant 2 : i32
    cf.br ^bb5(%c2_i32 : i32)
  ^bb4:  // pred: ^bb1
    cf.br ^bb7
  ^bb5(%2: i32):  // 2 preds: ^bb3, ^bb6
    cf.br ^bb2(%2 : i32)
  ^bb6(%3: i32):  // pred: ^bb7
    cf.br ^bb5(%3 : i32)
  ^bb7:  // pred: ^bb4
    %c1_i32_0 = arith.constant 1 : i32
    cf.br ^bb6(%c1_i32_0 : i32)
  }
  func.func public @"as-br_if-first"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb5
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // 2 preds: ^bb4, ^bb6
    cf.br ^bb2(%1 : i32)
  ^bb4(%2: i32):  // pred: ^bb5
    %c2_i32 = arith.constant 2 : i32
    %c0_i32 = arith.constant 0 : i32
    %3 = arith.cmpi ne, %c2_i32, %c0_i32 : i32
    cf.cond_br %3, ^bb3(%2 : i32), ^bb6(%2 : i32)
  ^bb5:  // pred: ^bb1
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb4(%c1_i32 : i32)
  ^bb6(%4: i32):  // pred: ^bb4
    cf.br ^bb3(%2 : i32)
  }
  func.func public @"as-br_if-last"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2_i32 = arith.constant 2 : i32
    cf.br ^bb5
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // 2 preds: ^bb4, ^bb6
    cf.br ^bb2(%1 : i32)
  ^bb4(%2: i32):  // pred: ^bb5
    %c0_i32 = arith.constant 0 : i32
    %3 = arith.cmpi ne, %2, %c0_i32 : i32
    cf.cond_br %3, ^bb3(%c2_i32 : i32), ^bb6(%c2_i32 : i32)
  ^bb5:  // pred: ^bb1
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb4(%c1_i32 : i32)
  ^bb6(%4: i32):  // pred: ^bb4
    cf.br ^bb3(%c2_i32 : i32)
  }
  func.func public @"as-br_table-first"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb5
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // 2 preds: ^bb4, ^bb4
    cf.br ^bb2(%1 : i32)
  ^bb4(%2: i32):  // pred: ^bb5
    %c2_i32 = arith.constant 2 : i32
    cf.switch %c2_i32 : i32, [
      default: ^bb3(%2 : i32),
      0: ^bb3(%2 : i32)
    ]
  ^bb5:  // pred: ^bb1
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb4(%c1_i32 : i32)
  }
  func.func public @"as-br_table-last"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2_i32 = arith.constant 2 : i32
    cf.br ^bb5
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // 2 preds: ^bb4, ^bb4
    cf.br ^bb2(%1 : i32)
  ^bb4(%2: i32):  // pred: ^bb5
    cf.switch %2 : i32, [
      default: ^bb3(%c2_i32 : i32),
      0: ^bb3(%c2_i32 : i32)
    ]
  ^bb5:  // pred: ^bb1
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb4(%c1_i32 : i32)
  }
  func.func @func(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%2 : i32)
  ^bb2(%3: i32):  // pred: ^bb1
    return %3 : i32
  }
  func.func public @"as-call_indirect-first"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[56] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb5
  ^bb2(%6: i32):  // pred: ^bb3
    return %6 : i32
  ^bb3(%7: i32):  // pred: ^bb12
    cf.br ^bb2(%7 : i32)
  ^bb4(%8: i32):  // pred: ^bb5
    %c2_i32 = arith.constant 2 : i32
    %c0_i32 = arith.constant 0 : i32
    %9 = arith.cmpi ult, %c0_i32, %5 : i32
    cf.cond_br %9, ^bb6, ^bb7
  ^bb5:  // pred: ^bb1
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb4(%c1_i32 : i32)
  ^bb6:  // 2 preds: ^bb4, ^bb7
    %10 = llvm.getelementptr %4[%c0_i32] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.load %11 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %13 = arith.cmpi eq, %12, %c0_i32_0 : i32
    cf.cond_br %13, ^bb9, ^bb8
  ^bb7:  // pred: ^bb4
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // 2 preds: ^bb6, ^bb9
    %14 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %11[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %11[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.load %17 : !llvm.ptr -> i32
    %c0_i32_1 = arith.constant 0 : i32
    %20 = arith.cmpi eq, %19, %c0_i32_1 : i32
    cf.cond_br %20, ^bb11, ^bb10
  ^bb9:  // pred: ^bb6
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // 2 preds: ^bb8, ^bb11
    %21 = llvm.load %15 : !llvm.ptr -> i32
    %22 = arith.cmpi ne, %1, %21 : i32
    cf.cond_br %22, ^bb13, ^bb12
  ^bb11:  // pred: ^bb8
    %c3_i32_2 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_2) : (i32) -> ()
    cf.br ^bb10
  ^bb12:  // 2 preds: ^bb10, ^bb13
    %23 = llvm.call %17(%18, %8, %c2_i32) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    cf.br ^bb3(%23 : i32)
  ^bb13:  // pred: ^bb10
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb12
  }
  func.func public @"as-call_indirect-mid"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[56] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2_i32 = arith.constant 2 : i32
    cf.br ^bb5
  ^bb2(%6: i32):  // pred: ^bb3
    return %6 : i32
  ^bb3(%7: i32):  // pred: ^bb12
    cf.br ^bb2(%7 : i32)
  ^bb4(%8: i32):  // pred: ^bb5
    %c0_i32 = arith.constant 0 : i32
    %9 = arith.cmpi ult, %c0_i32, %5 : i32
    cf.cond_br %9, ^bb6, ^bb7
  ^bb5:  // pred: ^bb1
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb4(%c1_i32 : i32)
  ^bb6:  // 2 preds: ^bb4, ^bb7
    %10 = llvm.getelementptr %4[%c0_i32] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.load %11 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %13 = arith.cmpi eq, %12, %c0_i32_0 : i32
    cf.cond_br %13, ^bb9, ^bb8
  ^bb7:  // pred: ^bb4
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // 2 preds: ^bb6, ^bb9
    %14 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %11[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %11[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.load %17 : !llvm.ptr -> i32
    %c0_i32_1 = arith.constant 0 : i32
    %20 = arith.cmpi eq, %19, %c0_i32_1 : i32
    cf.cond_br %20, ^bb11, ^bb10
  ^bb9:  // pred: ^bb6
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // 2 preds: ^bb8, ^bb11
    %21 = llvm.load %15 : !llvm.ptr -> i32
    %22 = arith.cmpi ne, %1, %21 : i32
    cf.cond_br %22, ^bb13, ^bb12
  ^bb11:  // pred: ^bb8
    %c3_i32_2 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_2) : (i32) -> ()
    cf.br ^bb10
  ^bb12:  // 2 preds: ^bb10, ^bb13
    %23 = llvm.call %17(%18, %c2_i32, %8) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    cf.br ^bb3(%23 : i32)
  ^bb13:  // pred: ^bb10
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb12
  }
  func.func public @"as-call_indirect-last"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[56] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    cf.br ^bb5
  ^bb2(%6: i32):  // pred: ^bb3
    return %6 : i32
  ^bb3(%7: i32):  // pred: ^bb12
    cf.br ^bb2(%7 : i32)
  ^bb4(%8: i32):  // pred: ^bb5
    %9 = arith.cmpi ult, %8, %5 : i32
    cf.cond_br %9, ^bb6, ^bb7
  ^bb5:  // pred: ^bb1
    %c0_i32 = arith.constant 0 : i32
    cf.br ^bb4(%c0_i32 : i32)
  ^bb6:  // 2 preds: ^bb4, ^bb7
    %10 = llvm.getelementptr %4[%8] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.load %11 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %13 = arith.cmpi eq, %12, %c0_i32_0 : i32
    cf.cond_br %13, ^bb9, ^bb8
  ^bb7:  // pred: ^bb4
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // 2 preds: ^bb6, ^bb9
    %14 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %11[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %11[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.load %17 : !llvm.ptr -> i32
    %c0_i32_1 = arith.constant 0 : i32
    %20 = arith.cmpi eq, %19, %c0_i32_1 : i32
    cf.cond_br %20, ^bb11, ^bb10
  ^bb9:  // pred: ^bb6
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // 2 preds: ^bb8, ^bb11
    %21 = llvm.load %15 : !llvm.ptr -> i32
    %22 = arith.cmpi ne, %1, %21 : i32
    cf.cond_br %22, ^bb13, ^bb12
  ^bb11:  // pred: ^bb8
    %c3_i32_2 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_2) : (i32) -> ()
    cf.br ^bb10
  ^bb12:  // 2 preds: ^bb10, ^bb13
    %23 = llvm.call %17(%18, %c1_i32, %c2_i32) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    cf.br ^bb3(%23 : i32)
  ^bb13:  // pred: ^bb10
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb12
  }
  func.func public @"as-store-first"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3(%3: i32):  // pred: ^bb4
    %c1_i32 = arith.constant 1 : i32
    %c0_i64 = arith.constant 0 : i64
    %4 = arith.extui %3 : i32 to i64
    %5 = arith.addi %4, %c0_i64 : i64
    %6 = llvm.getelementptr %2[%5] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32, %6 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %c1_i32_0 = arith.constant 1 : i32
    cf.br ^bb3(%c1_i32_0 : i32)
  }
  func.func public @"as-store-last"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c10_i32 = arith.constant 10 : i32
    cf.br ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3(%3: i32):  // pred: ^bb4
    %c0_i64 = arith.constant 0 : i64
    %4 = arith.extui %c10_i32 : i32 to i64
    %5 = arith.addi %4, %c0_i64 : i64
    %6 = llvm.getelementptr %2[%5] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %3, %6 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb3(%c1_i32 : i32)
  }
  func.func public @"as-memory.grow-value"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb4
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // pred: ^bb4
    %c0_i32 = arith.constant 0 : i32
    %2 = call @dora_fn_wasm_memory_grow(%arg0, %1, %c0_i32) : (!llvm.ptr, i32, i32) -> i32
    cf.br ^bb2(%2 : i32)
  ^bb4:  // pred: ^bb1
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb3(%c1_i32 : i32)
  }
  func.func @f(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%1 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func public @"as-call-value"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb4
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // pred: ^bb4
    %2 = call @f(%arg0, %1) : (!llvm.ptr, i32) -> i32
    cf.br ^bb2(%2 : i32)
  ^bb4:  // pred: ^bb1
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb3(%c1_i32 : i32)
  }
  func.func public @"as-return-value"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb4
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // pred: ^bb4
    cf.br ^bb2(%1 : i32)
  ^bb4:  // pred: ^bb1
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb3(%c1_i32 : i32)
  }
  func.func public @"as-drop-operand"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3(%0: i32):  // pred: ^bb4
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb3(%c1_i32 : i32)
  }
  func.func public @"as-br-value"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb5
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // pred: ^bb4
    cf.br ^bb2(%1 : i32)
  ^bb4(%2: i32):  // pred: ^bb5
    cf.br ^bb3(%2 : i32)
  ^bb5:  // pred: ^bb1
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb4(%c1_i32 : i32)
  }
  func.func public @"as-local.set-value"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %c0_i32 = arith.constant 0 : i32
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb4
  ^bb2(%1: i32):  // pred: ^bb3
    return %1 : i32
  ^bb3(%2: i32):  // pred: ^bb4
    llvm.store %2, %0 : i32, !llvm.ptr
    %3 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%3 : i32)
  ^bb4:  // pred: ^bb1
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb3(%c1_i32 : i32)
  }
  func.func public @"as-local.tee-value"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %c0_i32 = arith.constant 0 : i32
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb4
  ^bb2(%1: i32):  // pred: ^bb3
    return %1 : i32
  ^bb3(%2: i32):  // pred: ^bb4
    llvm.store %2, %0 : i32, !llvm.ptr
    cf.br ^bb2(%2 : i32)
  ^bb4:  // pred: ^bb1
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb3(%c1_i32 : i32)
  }
  func.func public @"as-global.set-value"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb4
  ^bb2(%2: i32):  // pred: ^bb3
    return %2 : i32
  ^bb3(%3: i32):  // pred: ^bb4
    llvm.store %3, %1 : i32, !llvm.ptr
    %4 = llvm.load %1 : !llvm.ptr -> i32
    cf.br ^bb2(%4 : i32)
  ^bb4:  // pred: ^bb1
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb3(%c1_i32 : i32)
  }
  func.func public @"as-load-operand"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb4
  ^bb2(%3: i32):  // pred: ^bb3
    return %3 : i32
  ^bb3(%4: i32):  // pred: ^bb4
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %4 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %7 = llvm.getelementptr %2[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %8 = llvm.load volatile %7 {alignment = 1 : i64} : !llvm.ptr -> i32
    cf.br ^bb2(%8 : i32)
  ^bb4:  // pred: ^bb1
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb3(%c1_i32 : i32)
  }
  func.func public @"as-unary-operand"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb4
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // pred: ^bb4
    %2 = "wasm.ctz"(%1) : (i32) -> i32
    cf.br ^bb2(%2 : i32)
  ^bb4:  // pred: ^bb1
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c13_i32 = arith.constant 13 : i32
    cf.br ^bb3(%c13_i32 : i32)
  }
  func.func public @"as-binary-operand"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb4
  ^bb2(%0: i32):  // pred: ^bb5
    return %0 : i32
  ^bb3(%1: i32):  // pred: ^bb4
    cf.br ^bb6
  ^bb4:  // pred: ^bb1
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c3_i32 = arith.constant 3 : i32
    cf.br ^bb3(%c3_i32 : i32)
  ^bb5(%2: i32):  // pred: ^bb6
    %3 = "wasm.mul"(%1, %2) : (i32, i32) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb6:  // pred: ^bb3
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c4_i32 = arith.constant 4 : i32
    cf.br ^bb5(%c4_i32 : i32)
  }
  func.func public @"as-test-operand"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb4
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // pred: ^bb4
    %2 = "wasm.eqz"(%1) : (i32) -> i32
    cf.br ^bb2(%2 : i32)
  ^bb4:  // pred: ^bb1
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c13_i32 = arith.constant 13 : i32
    cf.br ^bb3(%c13_i32 : i32)
  }
  func.func public @"as-compare-operand"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb4
  ^bb2(%0: i32):  // pred: ^bb5
    return %0 : i32
  ^bb3(%1: f32):  // pred: ^bb4
    cf.br ^bb6
  ^bb4:  // pred: ^bb1
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c1077936128_i32 = arith.constant 1077936128 : i32
    %2 = arith.bitcast %c1077936128_i32 : i32 to f32
    cf.br ^bb3(%2 : f32)
  ^bb5(%3: f32):  // pred: ^bb6
    %4 = "wasm.fgt"(%1, %3) : (f32, f32) -> i32
    cf.br ^bb2(%4 : i32)
  ^bb6:  // pred: ^bb3
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c1077936128_i32_0 = arith.constant 1077936128 : i32
    %5 = arith.bitcast %c1077936128_i32_0 : i32 to f32
    cf.br ^bb5(%5 : f32)
  }
  func.func public @"as-binary-operands"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb4
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32, %2: i32):  // pred: ^bb4
    %3 = "wasm.mul"(%1, %2) : (i32, i32) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb4:  // pred: ^bb1
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c3_i32 = arith.constant 3 : i32
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c4_i32 = arith.constant 4 : i32
    cf.br ^bb3(%c3_i32, %c4_i32 : i32, i32)
  }
  func.func public @"as-compare-operands"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb4
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: f32, %2: f32):  // pred: ^bb4
    %3 = "wasm.fgt"(%1, %2) : (f32, f32) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb4:  // pred: ^bb1
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c1077936128_i32 = arith.constant 1077936128 : i32
    %4 = arith.bitcast %c1077936128_i32 : i32 to f32
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c1077936128_i32_0 = arith.constant 1077936128 : i32
    %5 = arith.bitcast %c1077936128_i32_0 : i32 to f32
    cf.br ^bb3(%4, %5 : f32, f32)
  }
  func.func public @"as-mixed-operands"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb4
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32, %2: i32):  // pred: ^bb4
    %c5_i32 = arith.constant 5 : i32
    %3 = "wasm.add"(%2, %c5_i32) : (i32, i32) -> i32
    %4 = "wasm.mul"(%1, %3) : (i32, i32) -> i32
    cf.br ^bb2(%4 : i32)
  ^bb4:  // pred: ^bb1
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c3_i32 = arith.constant 3 : i32
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c4_i32 = arith.constant 4 : i32
    cf.br ^bb3(%c3_i32, %c4_i32 : i32, i32)
  }
  func.func public @"break-bare"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb5
  ^bb2(%0: i32):  // pred: ^bb13
    return %0 : i32
  ^bb3:  // 2 preds: ^bb4, ^bb5
    cf.br ^bb8
  ^bb4:  // no predecessors
    cf.br ^bb3
  ^bb5:  // pred: ^bb1
    cf.br ^bb3
  ^bb6:  // 2 preds: ^bb7, ^bb8
    cf.br ^bb12
  ^bb7:  // no predecessors
    cf.br ^bb6
  ^bb8:  // pred: ^bb3
    %c1_i32 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %1 = arith.cmpi ne, %c1_i32, %c0_i32 : i32
    cf.cond_br %1, ^bb6, ^bb9
  ^bb9:  // pred: ^bb8
    "wasm.unreachable"() : () -> ()
  ^bb10:  // 2 preds: ^bb11, ^bb12
    cf.br ^bb15
  ^bb11:  // no predecessors
    cf.br ^bb10
  ^bb12:  // pred: ^bb6
    %c0_i32_0 = arith.constant 0 : i32
    cf.switch %c0_i32_0 : i32, [
      default: ^bb10
    ]
  ^bb13:  // 4 preds: ^bb14, ^bb15, ^bb15, ^bb15
    %c19_i32 = arith.constant 19 : i32
    cf.br ^bb2(%c19_i32 : i32)
  ^bb14:  // no predecessors
    cf.br ^bb13
  ^bb15:  // pred: ^bb10
    %c1_i32_1 = arith.constant 1 : i32
    cf.switch %c1_i32_1 : i32, [
      default: ^bb13,
      0: ^bb13,
      1: ^bb13
    ]
  }
  func.func public @"break-value"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    cf.br ^bb5(%c0_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // 2 preds: ^bb4, ^bb5
    cf.br ^bb2(%1 : i32)
  ^bb4:  // no predecessors
    %c19_i32 = arith.constant 19 : i32
    cf.br ^bb3(%c19_i32 : i32)
  ^bb5(%2: i32):  // 2 preds: ^bb1, ^bb6
    %c18_i32 = arith.constant 18 : i32
    cf.br ^bb3(%c18_i32 : i32)
  ^bb6:  // no predecessors
    %c20_i32 = arith.constant 20 : i32
    cf.br ^bb5(%c20_i32 : i32)
  }
  func.func public @"break-multi-value"(%arg0: !llvm.ptr) -> (i32, i32, i64) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c0_i32_0 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    cf.br ^bb5(%c0_i32, %c0_i32_0, %c0_i64 : i32, i32, i64)
  ^bb2(%0: i32, %1: i32, %2: i64):  // pred: ^bb3
    return %0, %1, %2 : i32, i32, i64
  ^bb3(%3: i32, %4: i32, %5: i64):  // 2 preds: ^bb4, ^bb5
    cf.br ^bb2(%3, %4, %5 : i32, i32, i64)
  ^bb4:  // no predecessors
    %c19_i32 = arith.constant 19 : i32
    %c-19_i32 = arith.constant -19 : i32
    %c19_i64 = arith.constant 19 : i64
    cf.br ^bb3(%c19_i32, %c-19_i32, %c19_i64 : i32, i32, i64)
  ^bb5(%6: i32, %7: i32, %8: i64):  // 2 preds: ^bb1, ^bb6
    %c18_i32 = arith.constant 18 : i32
    %c-18_i32 = arith.constant -18 : i32
    %c18_i64 = arith.constant 18 : i64
    cf.br ^bb3(%c18_i32, %c-18_i32, %c18_i64 : i32, i32, i64)
  ^bb6:  // no predecessors
    %c20_i32 = arith.constant 20 : i32
    %c-20_i32 = arith.constant -20 : i32
    %c20_i64 = arith.constant 20 : i64
    cf.br ^bb5(%c20_i32, %c-20_i32, %c20_i64 : i32, i32, i64)
  }
  func.func public @"break-repeated"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb5
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // 2 preds: ^bb4, ^bb5
    cf.br ^bb2(%1 : i32)
  ^bb4(%2: i32):  // no predecessors
    cf.br ^bb3(%2 : i32)
  ^bb5:  // pred: ^bb1
    %c18_i32 = arith.constant 18 : i32
    cf.br ^bb3(%c18_i32 : i32)
  }
  func.func public @"break-inner"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %c0_i32 = arith.constant 0 : i32
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32_0 = arith.constant 0 : i32
    llvm.store %c0_i32_0, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb5
  ^bb2(%2: i32):  // pred: ^bb21
    return %2 : i32
  ^bb3(%3: i32):  // 2 preds: ^bb4, ^bb5
    %4 = "wasm.add"(%1, %3) : (i32, i32) -> i32
    llvm.store %4, %0 : i32, !llvm.ptr
    %5 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb9
  ^bb4(%6: i32):  // pred: ^bb6
    cf.br ^bb3(%6 : i32)
  ^bb5:  // pred: ^bb1
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb3(%c1_i32 : i32)
  ^bb6(%7: i32):  // no predecessors
    cf.br ^bb4(%7 : i32)
  ^bb7(%8: i32):  // 2 preds: ^bb8, ^bb11
    %9 = "wasm.add"(%5, %8) : (i32, i32) -> i32
    llvm.store %9, %0 : i32, !llvm.ptr
    %10 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb14
  ^bb8(%11: i32):  // pred: ^bb10
    cf.br ^bb7(%11 : i32)
  ^bb9:  // pred: ^bb3
    cf.br ^bb11
  ^bb10(%12: i32):  // no predecessors
    cf.br ^bb8(%12 : i32)
  ^bb11:  // pred: ^bb9
    %c2_i32 = arith.constant 2 : i32
    cf.br ^bb7(%c2_i32 : i32)
  ^bb12(%13: i32):  // pred: ^bb13
    %14 = "wasm.add"(%10, %13) : (i32, i32) -> i32
    llvm.store %14, %0 : i32, !llvm.ptr
    %15 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb20
  ^bb13(%16: i32):  // pred: ^bb15
    cf.br ^bb12(%16 : i32)
  ^bb14:  // pred: ^bb7
    cf.br ^bb17
  ^bb15(%17: i32):  // 2 preds: ^bb16, ^bb17
    cf.br ^bb13(%17 : i32)
  ^bb16(%18: i32):  // no predecessors
    cf.br ^bb15(%18 : i32)
  ^bb17:  // pred: ^bb14
    %c4_i32 = arith.constant 4 : i32
    cf.br ^bb15(%c4_i32 : i32)
  ^bb18(%19: i32):  // 2 preds: ^bb19, ^bb20
    %20 = "wasm.add"(%15, %19) : (i32, i32) -> i32
    llvm.store %20, %0 : i32, !llvm.ptr
    %21 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb23
  ^bb19(%22: i32):  // no predecessors
    cf.br ^bb18(%22 : i32)
  ^bb20:  // pred: ^bb12
    %c8_i32 = arith.constant 8 : i32
    cf.br ^bb18(%c8_i32 : i32)
  ^bb21(%23: i32):  // 2 preds: ^bb22, ^bb25
    %24 = "wasm.add"(%21, %23) : (i32, i32) -> i32
    llvm.store %24, %0 : i32, !llvm.ptr
    %25 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%25 : i32)
  ^bb22(%26: i32):  // pred: ^bb24
    cf.br ^bb21(%26 : i32)
  ^bb23:  // pred: ^bb18
    cf.br ^bb25
  ^bb24(%27: i32):  // no predecessors
    %28 = "wasm.ctz"(%27) : (i32) -> i32
    cf.br ^bb22(%28 : i32)
  ^bb25:  // pred: ^bb23
    %c16_i32 = arith.constant 16 : i32
    cf.br ^bb21(%c16_i32 : i32)
  }
  func.func public @param(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb4(%c1_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // pred: ^bb4
    cf.br ^bb2(%1 : i32)
  ^bb4(%2: i32):  // pred: ^bb1
    %c2_i32 = arith.constant 2 : i32
    %3 = "wasm.add"(%2, %c2_i32) : (i32, i32) -> i32
    cf.br ^bb3(%3 : i32)
  }
  func.func public @params(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    cf.br ^bb4(%c1_i32, %c2_i32 : i32, i32)
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // pred: ^bb4
    cf.br ^bb2(%1 : i32)
  ^bb4(%2: i32, %3: i32):  // pred: ^bb1
    %4 = "wasm.add"(%2, %3) : (i32, i32) -> i32
    cf.br ^bb3(%4 : i32)
  }
  func.func public @"params-id"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    cf.br ^bb4(%c1_i32, %c2_i32 : i32, i32)
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32, %2: i32):  // pred: ^bb4
    %3 = "wasm.add"(%1, %2) : (i32, i32) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb4(%4: i32, %5: i32):  // pred: ^bb1
    cf.br ^bb3(%4, %5 : i32, i32)
  }
  func.func public @"param-break"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %c0_i32 = arith.constant 0 : i32
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb4(%c1_i32 : i32)
  ^bb2(%1: i32):  // pred: ^bb3
    return %1 : i32
  ^bb3(%2: i32):  // pred: ^bb5
    cf.br ^bb2(%2 : i32)
  ^bb4(%3: i32):  // 2 preds: ^bb1, ^bb4
    %c4_i32 = arith.constant 4 : i32
    %4 = "wasm.add"(%3, %c4_i32) : (i32, i32) -> i32
    llvm.store %4, %0 : i32, !llvm.ptr
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c10_i32 = arith.constant 10 : i32
    %6 = "wasm.ltu"(%5, %c10_i32) : (i32, i32) -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %7 = arith.cmpi ne, %6, %c0_i32_0 : i32
    cf.cond_br %7, ^bb4(%4 : i32), ^bb5(%4 : i32)
  ^bb5(%8: i32):  // pred: ^bb4
    cf.br ^bb3(%4 : i32)
  }
  func.func public @"params-break"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %c0_i32 = arith.constant 0 : i32
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    cf.br ^bb4(%c1_i32, %c2_i32 : i32, i32)
  ^bb2(%1: i32):  // pred: ^bb3
    return %1 : i32
  ^bb3(%2: i32):  // pred: ^bb5
    cf.br ^bb2(%2 : i32)
  ^bb4(%3: i32, %4: i32):  // 2 preds: ^bb1, ^bb4
    %5 = "wasm.add"(%3, %4) : (i32, i32) -> i32
    llvm.store %5, %0 : i32, !llvm.ptr
    %c3_i32 = arith.constant 3 : i32
    %6 = llvm.load %0 : !llvm.ptr -> i32
    %c10_i32 = arith.constant 10 : i32
    %7 = "wasm.ltu"(%6, %c10_i32) : (i32, i32) -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %8 = arith.cmpi ne, %7, %c0_i32_0 : i32
    cf.cond_br %8, ^bb4(%5, %c3_i32 : i32, i32), ^bb5(%5, %c3_i32 : i32, i32)
  ^bb5(%9: i32, %10: i32):  // pred: ^bb4
    cf.br ^bb3(%5 : i32)
  }
  func.func public @"params-id-break"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %c0_i32 = arith.constant 0 : i32
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32_0 = arith.constant 0 : i32
    llvm.store %c0_i32_0, %0 : i32, !llvm.ptr
    %c1_i32 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    cf.br ^bb4(%c1_i32, %c2_i32 : i32, i32)
  ^bb2(%1: i32):  // pred: ^bb3
    return %1 : i32
  ^bb3(%2: i32, %3: i32):  // pred: ^bb5
    %4 = "wasm.add"(%2, %3) : (i32, i32) -> i32
    cf.br ^bb2(%4 : i32)
  ^bb4(%5: i32, %6: i32):  // 2 preds: ^bb1, ^bb4
    %7 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_1 = arith.constant 1 : i32
    %8 = "wasm.add"(%7, %c1_i32_1) : (i32, i32) -> i32
    llvm.store %8, %0 : i32, !llvm.ptr
    %9 = llvm.load %0 : !llvm.ptr -> i32
    %c10_i32 = arith.constant 10 : i32
    %10 = "wasm.ltu"(%9, %c10_i32) : (i32, i32) -> i32
    %c0_i32_2 = arith.constant 0 : i32
    %11 = arith.cmpi ne, %10, %c0_i32_2 : i32
    cf.cond_br %11, ^bb4(%5, %6 : i32, i32), ^bb5(%5, %6 : i32, i32)
  ^bb5(%12: i32, %13: i32):  // pred: ^bb4
    cf.br ^bb3(%5, %6 : i32, i32)
  }
  func.func public @effects(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %c0_i32 = arith.constant 0 : i32
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb5
  ^bb2(%1: i32):  // pred: ^bb3
    return %1 : i32
  ^bb3:  // 2 preds: ^bb4, ^bb5
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %c-14_i32 = arith.constant -14 : i32
    %3 = "wasm.eq"(%2, %c-14_i32) : (i32, i32) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb4:  // no predecessors
    cf.br ^bb3
  ^bb5:  // pred: ^bb1
    %c1_i32 = arith.constant 1 : i32
    llvm.store %c1_i32, %0 : i32, !llvm.ptr
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %5 = "wasm.mul"(%4, %c3_i32) : (i32, i32) -> i32
    llvm.store %5, %0 : i32, !llvm.ptr
    %6 = llvm.load %0 : !llvm.ptr -> i32
    %c5_i32 = arith.constant 5 : i32
    %7 = "wasm.sub"(%6, %c5_i32) : (i32, i32) -> i32
    llvm.store %7, %0 : i32, !llvm.ptr
    %8 = llvm.load %0 : !llvm.ptr -> i32
    %c7_i32 = arith.constant 7 : i32
    %9 = "wasm.mul"(%8, %c7_i32) : (i32, i32) -> i32
    llvm.store %9, %0 : i32, !llvm.ptr
    cf.br ^bb3
  }
  func.func public @while(%arg0: !llvm.ptr, %arg1: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i64 : (i64) -> !llvm.ptr
    llvm.store %c0_i64, %1 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i64_1 = arith.constant 1 : i64
    llvm.store %c1_i64_1, %1 : i64, !llvm.ptr
    cf.br ^bb5
  ^bb2(%2: i64):  // pred: ^bb3
    return %2 : i64
  ^bb3:  // 2 preds: ^bb4, ^bb5
    %3 = llvm.load %1 : !llvm.ptr -> i64
    cf.br ^bb2(%3 : i64)
  ^bb4:  // no predecessors
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb1, ^bb6
    %4 = llvm.load %0 : !llvm.ptr -> i64
    %5 = "wasm.eqz"(%4) : (i64) -> i32
    %c0_i32 = arith.constant 0 : i32
    %6 = arith.cmpi ne, %5, %c0_i32 : i32
    cf.cond_br %6, ^bb3, ^bb6
  ^bb6:  // pred: ^bb5
    %7 = llvm.load %0 : !llvm.ptr -> i64
    %8 = llvm.load %1 : !llvm.ptr -> i64
    %9 = "wasm.mul"(%7, %8) : (i64, i64) -> i64
    llvm.store %9, %1 : i64, !llvm.ptr
    %10 = llvm.load %0 : !llvm.ptr -> i64
    %c1_i64_2 = arith.constant 1 : i64
    %11 = "wasm.sub"(%10, %c1_i64_2) : (i64, i64) -> i64
    llvm.store %11, %0 : i64, !llvm.ptr
    cf.br ^bb5
  }
  func.func public @for(%arg0: !llvm.ptr, %arg1: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i64 : (i64) -> !llvm.ptr
    llvm.store %c0_i64, %1 : i64, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i64 : (i64) -> !llvm.ptr
    llvm.store %c0_i64, %2 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i64_2 = arith.constant 1 : i64
    llvm.store %c1_i64_2, %1 : i64, !llvm.ptr
    %c2_i64 = arith.constant 2 : i64
    llvm.store %c2_i64, %2 : i64, !llvm.ptr
    cf.br ^bb5
  ^bb2(%3: i64):  // pred: ^bb3
    return %3 : i64
  ^bb3:  // 2 preds: ^bb4, ^bb5
    %4 = llvm.load %1 : !llvm.ptr -> i64
    cf.br ^bb2(%4 : i64)
  ^bb4:  // no predecessors
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb1, ^bb6
    %5 = llvm.load %2 : !llvm.ptr -> i64
    %6 = llvm.load %0 : !llvm.ptr -> i64
    %7 = "wasm.gtu"(%5, %6) : (i64, i64) -> i32
    %c0_i32 = arith.constant 0 : i32
    %8 = arith.cmpi ne, %7, %c0_i32 : i32
    cf.cond_br %8, ^bb3, ^bb6
  ^bb6:  // pred: ^bb5
    %9 = llvm.load %1 : !llvm.ptr -> i64
    %10 = llvm.load %2 : !llvm.ptr -> i64
    %11 = "wasm.mul"(%9, %10) : (i64, i64) -> i64
    llvm.store %11, %1 : i64, !llvm.ptr
    %12 = llvm.load %2 : !llvm.ptr -> i64
    %c1_i64_3 = arith.constant 1 : i64
    %13 = "wasm.add"(%12, %c1_i64_3) : (i64, i64) -> i64
    llvm.store %13, %2 : i64, !llvm.ptr
    cf.br ^bb5
  }
  func.func public @nesting(%arg0: !llvm.ptr, %arg1: f32, %arg2: f32) -> f32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : f32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : f32, !llvm.ptr
    %cst = arith.constant 0.000000e+00 : f32
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x f32 : (i64) -> !llvm.ptr
    llvm.store %cst, %2 : f32, !llvm.ptr
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x f32 : (i64) -> !llvm.ptr
    llvm.store %cst, %3 : f32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb5
  ^bb2(%4: f32):  // pred: ^bb3
    return %4 : f32
  ^bb3:  // 3 preds: ^bb4, ^bb5, ^bb10
    %5 = llvm.load %3 : !llvm.ptr -> f32
    cf.br ^bb2(%5 : f32)
  ^bb4:  // no predecessors
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb1, ^bb7
    %6 = llvm.load %0 : !llvm.ptr -> f32
    %c0_i32 = arith.constant 0 : i32
    %7 = arith.bitcast %c0_i32 : i32 to f32
    %8 = "wasm.eq"(%6, %7) : (f32, f32) -> i32
    %c0_i32_3 = arith.constant 0 : i32
    %9 = arith.cmpi ne, %8, %c0_i32_3 : i32
    cf.cond_br %9, ^bb3, ^bb6
  ^bb6:  // pred: ^bb5
    %10 = llvm.load %1 : !llvm.ptr -> f32
    llvm.store %10, %2 : f32, !llvm.ptr
    cf.br ^bb9
  ^bb7:  // 2 preds: ^bb8, ^bb9
    %11 = llvm.load %3 : !llvm.ptr -> f32
    %12 = llvm.load %0 : !llvm.ptr -> f32
    %13 = "wasm.divs"(%11, %12) : (f32, f32) -> f32
    llvm.store %13, %3 : f32, !llvm.ptr
    %14 = llvm.load %0 : !llvm.ptr -> f32
    %c1065353216_i32 = arith.constant 1065353216 : i32
    %15 = arith.bitcast %c1065353216_i32 : i32 to f32
    %16 = "wasm.sub"(%14, %15) : (f32, f32) -> f32
    llvm.store %16, %0 : f32, !llvm.ptr
    cf.br ^bb5
  ^bb8:  // no predecessors
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb6, ^bb11
    %17 = llvm.load %2 : !llvm.ptr -> f32
    %c0_i32_4 = arith.constant 0 : i32
    %18 = arith.bitcast %c0_i32_4 : i32 to f32
    %19 = "wasm.eq"(%17, %18) : (f32, f32) -> i32
    %c0_i32_5 = arith.constant 0 : i32
    %20 = arith.cmpi ne, %19, %c0_i32_5 : i32
    cf.cond_br %20, ^bb7, ^bb10
  ^bb10:  // pred: ^bb9
    %21 = llvm.load %2 : !llvm.ptr -> f32
    %c0_i32_6 = arith.constant 0 : i32
    %22 = arith.bitcast %c0_i32_6 : i32 to f32
    %23 = "wasm.flt"(%21, %22) : (f32, f32) -> i32
    %c0_i32_7 = arith.constant 0 : i32
    %24 = arith.cmpi ne, %23, %c0_i32_7 : i32
    cf.cond_br %24, ^bb3, ^bb11
  ^bb11:  // pred: ^bb10
    %25 = llvm.load %3 : !llvm.ptr -> f32
    %26 = llvm.load %2 : !llvm.ptr -> f32
    %27 = "wasm.add"(%25, %26) : (f32, f32) -> f32
    llvm.store %27, %3 : f32, !llvm.ptr
    %28 = llvm.load %2 : !llvm.ptr -> f32
    %c1073741824_i32 = arith.constant 1073741824 : i32
    %29 = arith.bitcast %c1073741824_i32 : i32 to f32
    %30 = "wasm.sub"(%28, %29) : (f32, f32) -> f32
    llvm.store %30, %2 : f32, !llvm.ptr
    cf.br ^bb9
  }
  func.func public @"type-use"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb4
  ^bb2:  // pred: ^bb15
    return
  ^bb3:  // pred: ^bb4
    cf.br ^bb6
  ^bb4:  // pred: ^bb1
    cf.br ^bb3
  ^bb5(%0: i32):  // pred: ^bb6
    cf.br ^bb8(%0 : i32)
  ^bb6:  // pred: ^bb3
    %c0_i32 = arith.constant 0 : i32
    cf.br ^bb5(%c0_i32 : i32)
  ^bb7:  // pred: ^bb8
    %c0_i32_0 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %1 = arith.bitcast %c0_i64 : i64 to f64
    %c0_i32_1 = arith.constant 0 : i32
    cf.br ^bb10(%c0_i32_0, %1, %c0_i32_1 : i32, f64, i32)
  ^bb8(%2: i32):  // pred: ^bb5
    cf.br ^bb7
  ^bb9(%3: i32, %4: f64, %5: i32):  // pred: ^bb10
    cf.br ^bb12
  ^bb10(%6: i32, %7: f64, %8: i32):  // pred: ^bb7
    cf.br ^bb9(%6, %7, %8 : i32, f64, i32)
  ^bb11(%9: i32):  // pred: ^bb12
    cf.br ^bb14(%9 : i32)
  ^bb12:  // pred: ^bb9
    %c0_i32_2 = arith.constant 0 : i32
    cf.br ^bb11(%c0_i32_2 : i32)
  ^bb13:  // pred: ^bb14
    %c0_i32_3 = arith.constant 0 : i32
    %c0_i64_4 = arith.constant 0 : i64
    %10 = arith.bitcast %c0_i64_4 : i64 to f64
    %c0_i32_5 = arith.constant 0 : i32
    cf.br ^bb16(%c0_i32_3, %10, %c0_i32_5 : i32, f64, i32)
  ^bb14(%11: i32):  // pred: ^bb11
    cf.br ^bb13
  ^bb15(%12: i32, %13: f64, %14: i32):  // pred: ^bb16
    cf.br ^bb2
  ^bb16(%15: i32, %16: f64, %17: i32):  // pred: ^bb13
    cf.br ^bb15(%15, %16, %17 : i32, f64, i32)
  }
  func.func private @dora_fn_wasm_table_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_copy(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_fill(!llvm.ptr, i32, i32, !llvm.ptr, i32)
  func.func private @dora_fn_wasm_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_table_set(!llvm.ptr, i32, i32, !llvm.ptr)
  func.func private @dora_fn_wasm_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_imported_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_func_ref(!llvm.ptr, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_data_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_elem_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_raise_trap(i32)
}
