---
source: crates/dora-compiler/src/wasm/tests/conversion.rs
expression: op
snapshot_kind: text
---
module {
  func.func public @vec_sum(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32_2 = arith.constant 0 : i32
    llvm.store %c0_i32_2, %1 : i32, !llvm.ptr
    %c0_i32_3 = arith.constant 0 : i32
    %c1049053_i64 = arith.constant 1049053 : i64
    %6 = arith.extui %c0_i32_3 : i32 to i64
    %7 = arith.addi %6, %c1049053_i64 : i64
    %8 = llvm.getelementptr %5[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> i8
    %10 = arith.extui %9 : i8 to i32
    %c16_i32 = arith.constant 16 : i32
    %c4_i32 = arith.constant 4 : i32
    %11 = call @f2(%arg0, %c16_i32, %c4_i32) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %11, %2 : i32, !llvm.ptr
    %c0_i32_4 = arith.constant 0 : i32
    %12 = arith.cmpi eq, %11, %c0_i32_4 : i32
    %13 = arith.extui %12 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %14 = arith.cmpi ne, %13, %c0_i32_5 : i32
    cf.cond_br %14, ^bb3, ^bb4
  ^bb2(%15: i32):  // pred: ^bb5
    return %15 : i32
  ^bb3:  // pred: ^bb1
    %c4_i32_6 = arith.constant 4 : i32
    %c16_i32_7 = arith.constant 16 : i32
    call @f34(%arg0, %c4_i32_6, %c16_i32_7) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb4:  // pred: ^bb1
    %16 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %c12_i64 = arith.constant 12 : i64
    %17 = arith.extui %16 : i32 to i64
    %18 = arith.addi %17, %c12_i64 : i64
    %19 = llvm.getelementptr %5[%18] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %c3_i32, %19 : i32, !llvm.ptr
    %20 = llvm.load %2 : !llvm.ptr -> i32
    %c8589934593_i64 = arith.constant 8589934593 : i64
    %c4_i64 = arith.constant 4 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c4_i64 : i64
    %23 = llvm.getelementptr %5[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %c8589934593_i64, %23 : i64, !llvm.ptr
    %24 = llvm.load %2 : !llvm.ptr -> i32
    %25 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %26 = arith.extui %24 : i32 to i64
    %27 = arith.addi %26, %c0_i64 : i64
    %28 = llvm.getelementptr %5[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %25, %28 : i32, !llvm.ptr
    %c0_i32_8 = arith.constant 0 : i32
    llvm.store %c0_i32_8, %0 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb5:  // pred: ^bb7
    %29 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_9 = arith.constant 16 : i32
    %c4_i32_10 = arith.constant 4 : i32
    call @f3(%arg0, %29, %c16_i32_9, %c4_i32_10) : (!llvm.ptr, i32, i32, i32) -> ()
    %30 = llvm.load %1 : !llvm.ptr -> i32
    cf.br ^bb2(%30 : i32)
  ^bb6:  // 2 preds: ^bb4, ^bb6
    %31 = llvm.load %2 : !llvm.ptr -> i32
    %32 = llvm.load %0 : !llvm.ptr -> i32
    %33 = arith.addi %31, %32 : i32
    %c0_i64_11 = arith.constant 0 : i64
    %34 = arith.extui %33 : i32 to i64
    %35 = arith.addi %34, %c0_i64_11 : i64
    %36 = llvm.getelementptr %5[%35] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %37 = llvm.load %36 : !llvm.ptr -> i32
    %38 = llvm.load %1 : !llvm.ptr -> i32
    %39 = arith.addi %37, %38 : i32
    llvm.store %39, %1 : i32, !llvm.ptr
    %40 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32_12 = arith.constant 4 : i32
    %41 = arith.addi %40, %c4_i32_12 : i32
    llvm.store %41, %0 : i32, !llvm.ptr
    %c16_i32_13 = arith.constant 16 : i32
    %42 = arith.cmpi eq, %41, %c16_i32_13 : i32
    %43 = arith.extui %42 : i1 to i32
    %c0_i32_14 = arith.constant 0 : i32
    %44 = arith.cmpi eq, %43, %c0_i32_14 : i32
    %45 = arith.extui %44 : i1 to i32
    %c0_i32_15 = arith.constant 0 : i32
    %46 = arith.cmpi ne, %45, %c0_i32_15 : i32
    cf.cond_br %46, ^bb6, ^bb7
  ^bb7:  // pred: ^bb6
    cf.br ^bb5
  }
  func.func @f1(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = llvm.load %1 : !llvm.ptr -> i32
    call @f30(%arg0, %2, %3) : (!llvm.ptr, i32, i32) -> ()
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f2(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1048576_i32 = arith.constant 1048576 : i32
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.load %0 : !llvm.ptr -> i32
    %4 = call @f5(%arg0, %c1048576_i32, %2, %3) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%4 : i32)
  ^bb2(%5: i32):  // pred: ^bb1
    return %5 : i32
  }
  func.func @f3(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f4(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1048576_i32 = arith.constant 1048576 : i32
    %4 = llvm.load %2 : !llvm.ptr -> i32
    %5 = llvm.load %3 : !llvm.ptr -> i32
    %6 = call @f5(%arg0, %c1048576_i32, %4, %5) : (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %6, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %7 = arith.cmpi eq, %6, %c0_i32 : i32
    %8 = arith.extui %7 : i1 to i32
    %c0_i32_3 = arith.constant 0 : i32
    %9 = arith.cmpi ne, %8, %c0_i32_3 : i32
    cf.cond_br %9, ^bb3, ^bb4
  ^bb2(%10: i32):  // pred: ^bb3
    return %10 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %11 = llvm.load %2 : !llvm.ptr -> i32
    cf.br ^bb2(%11 : i32)
  ^bb4:  // pred: ^bb1
    %12 = llvm.load %2 : !llvm.ptr -> i32
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %14 = llvm.load %1 : !llvm.ptr -> i32
    %15 = llvm.load %3 : !llvm.ptr -> i32
    %16 = llvm.load %1 : !llvm.ptr -> i32
    %17 = llvm.load %3 : !llvm.ptr -> i32
    %18 = arith.cmpi ult, %16, %17 : i32
    %19 = arith.extui %18 : i1 to i32
    %c0_i32_4 = arith.constant 0 : i32
    %20 = arith.cmpi ne, %19, %c0_i32_4 : i32
    %21 = arith.select %20, %14, %15 : i32
    %22 = call @f44(%arg0, %12, %13, %21) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb3
  }
  func.func @f5(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i64_4 = arith.constant 1 : i64
    %5 = llvm.alloca %c1_i64_4 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32_5 = arith.constant 0 : i32
    llvm.store %c0_i32_5, %3 : i32, !llvm.ptr
    %c0_i32_6 = arith.constant 0 : i32
    %c1049056_i64 = arith.constant 1049056 : i64
    %9 = arith.extui %c0_i32_6 : i32 to i64
    %10 = arith.addi %9, %c1049056_i64 : i64
    %11 = llvm.getelementptr %8[%10] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> i32
    llvm.store %12, %4 : i32, !llvm.ptr
    %c0_i32_7 = arith.constant 0 : i32
    %13 = arith.cmpi ne, %12, %c0_i32_7 : i32
    cf.cond_br %13, ^bb3, ^bb4
  ^bb2(%14: i32):  // pred: ^bb5
    return %14 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %15 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i32_8 = arith.constant 0 : i32
    %16 = llvm.load %1 : !llvm.ptr -> i32
    %17 = arith.subi %c0_i32_8, %16 : i32
    %18 = arith.andi %15, %17 : i32
    llvm.store %18, %4 : i32, !llvm.ptr
    %19 = llvm.load %2 : !llvm.ptr -> i32
    %20 = arith.cmpi ult, %18, %19 : i32
    %21 = arith.extui %20 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %22 = arith.cmpi ne, %21, %c0_i32_9 : i32
    cf.cond_br %22, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c0_i32_10 = arith.constant 0 : i32
    %23 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_10) : (!llvm.ptr, i32) -> i32
    llvm.store %23, %5 : i32, !llvm.ptr
    %c0_i32_11 = arith.constant 0 : i32
    %c0_i32_12 = arith.constant 0 : i32
    %c1049104_i32 = arith.constant 1049104 : i32
    %24 = arith.subi %c0_i32_12, %c1049104_i32 : i32
    llvm.store %24, %4 : i32, !llvm.ptr
    %c1049056_i64_13 = arith.constant 1049056 : i64
    %25 = arith.extui %c0_i32_11 : i32 to i64
    %26 = arith.addi %25, %c1049056_i64_13 : i64
    %27 = llvm.getelementptr %8[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %24, %27 : i32, !llvm.ptr
    %c0_i32_14 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %28 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %c31_i32 = arith.constant 31 : i32
    %29 = arith.cmpi ule, %c16_i32, %c31_i32 : i32
    %30 = scf.if %29 -> (i32) {
      %81 = arith.shli %28, %c16_i32 : i32
      scf.yield %81 : i32
    } else {
      %c0_i32_37 = arith.constant 0 : i32
      scf.yield %c0_i32_37 : i32
    }
    %31 = arith.subi %c1_i32, %30 : i32
    %c1049060_i64 = arith.constant 1049060 : i64
    %32 = arith.extui %c0_i32_14 : i32 to i64
    %33 = arith.addi %32, %c1049060_i64 : i64
    %34 = llvm.getelementptr %8[%33] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %31, %34 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // 3 preds: ^bb3, ^bb7, ^bb8
    %35 = llvm.load %3 : !llvm.ptr -> i32
    cf.br ^bb2(%35 : i32)
  ^bb6:  // pred: ^bb3
    %c0_i32_15 = arith.constant 0 : i32
    llvm.store %c0_i32_15, %3 : i32, !llvm.ptr
    %c0_i32_16 = arith.constant 0 : i32
    %c1049060_i64_17 = arith.constant 1049060 : i64
    %36 = arith.extui %c0_i32_16 : i32 to i64
    %37 = arith.addi %36, %c1049060_i64_17 : i64
    %38 = llvm.getelementptr %8[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %39 = llvm.load %38 : !llvm.ptr -> i32
    llvm.store %39, %1 : i32, !llvm.ptr
    %40 = llvm.load %4 : !llvm.ptr -> i32
    %41 = llvm.load %2 : !llvm.ptr -> i32
    %42 = arith.subi %40, %41 : i32
    llvm.store %42, %2 : i32, !llvm.ptr
    %c1_i32_18 = arith.constant 1 : i32
    %43 = arith.addi %42, %c1_i32_18 : i32
    llvm.store %43, %5 : i32, !llvm.ptr
    %44 = arith.cmpi ule, %39, %43 : i32
    %45 = arith.extui %44 : i1 to i32
    %c0_i32_19 = arith.constant 0 : i32
    %46 = arith.cmpi ne, %45, %c0_i32_19 : i32
    cf.cond_br %46, ^bb7, ^bb8
  ^bb7:  // 2 preds: ^bb6, ^bb9
    %c0_i32_20 = arith.constant 0 : i32
    %47 = llvm.load %2 : !llvm.ptr -> i32
    %c1049056_i64_21 = arith.constant 1049056 : i64
    %48 = arith.extui %c0_i32_20 : i32 to i64
    %49 = arith.addi %48, %c1049056_i64_21 : i64
    %50 = llvm.getelementptr %8[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %47, %50 : i32, !llvm.ptr
    %c0_i32_22 = arith.constant 0 : i32
    %51 = llvm.load %4 : !llvm.ptr -> i32
    %52 = arith.subi %c0_i32_22, %51 : i32
    llvm.store %52, %3 : i32, !llvm.ptr
    cf.br ^bb5
  ^bb8:  // pred: ^bb6
    %c0_i32_23 = arith.constant 0 : i32
    %53 = llvm.load %1 : !llvm.ptr -> i32
    %54 = llvm.load %5 : !llvm.ptr -> i32
    %55 = arith.subi %53, %54 : i32
    llvm.store %55, %5 : i32, !llvm.ptr
    %56 = llvm.load %5 : !llvm.ptr -> i32
    %57 = llvm.load %1 : !llvm.ptr -> i32
    %58 = arith.cmpi ugt, %56, %57 : i32
    %59 = arith.extui %58 : i1 to i32
    %c0_i32_24 = arith.constant 0 : i32
    %60 = arith.cmpi ne, %59, %c0_i32_24 : i32
    %61 = arith.select %60, %c0_i32_23, %55 : i32
    %c-1_i32 = arith.constant -1 : i32
    %62 = arith.addi %61, %c-1_i32 : i32
    %c16_i32_25 = arith.constant 16 : i32
    %c31_i32_26 = arith.constant 31 : i32
    %63 = arith.cmpi ule, %c16_i32_25, %c31_i32_26 : i32
    %64 = scf.if %63 -> (i32) {
      %81 = arith.shrui %62, %c16_i32_25 : i32
      scf.yield %81 : i32
    } else {
      %c0_i32_37 = arith.constant 0 : i32
      scf.yield %c0_i32_37 : i32
    }
    %c1_i32_27 = arith.constant 1 : i32
    %65 = arith.addi %64, %c1_i32_27 : i32
    llvm.store %65, %1 : i32, !llvm.ptr
    %c0_i32_28 = arith.constant 0 : i32
    %66 = call @dora_fn_wasm_memory_grow(%arg0, %65, %c0_i32_28) : (!llvm.ptr, i32, i32) -> i32
    %c-1_i32_29 = arith.constant -1 : i32
    %67 = arith.cmpi eq, %66, %c-1_i32_29 : i32
    %68 = arith.extui %67 : i1 to i32
    %c0_i32_30 = arith.constant 0 : i32
    %69 = arith.cmpi ne, %68, %c0_i32_30 : i32
    cf.cond_br %69, ^bb5, ^bb9
  ^bb9:  // pred: ^bb8
    %c0_i32_31 = arith.constant 0 : i32
    %c0_i32_32 = arith.constant 0 : i32
    %c1049060_i64_33 = arith.constant 1049060 : i64
    %70 = arith.extui %c0_i32_32 : i32 to i64
    %71 = arith.addi %70, %c1049060_i64_33 : i64
    %72 = llvm.getelementptr %8[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %73 = llvm.load %72 : !llvm.ptr -> i32
    %74 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32_34 = arith.constant 16 : i32
    %c31_i32_35 = arith.constant 31 : i32
    %75 = arith.cmpi ule, %c16_i32_34, %c31_i32_35 : i32
    %76 = scf.if %75 -> (i32) {
      %81 = arith.shli %74, %c16_i32_34 : i32
      scf.yield %81 : i32
    } else {
      %c0_i32_37 = arith.constant 0 : i32
      scf.yield %c0_i32_37 : i32
    }
    %77 = arith.subi %73, %76 : i32
    %c1049060_i64_36 = arith.constant 1049060 : i64
    %78 = arith.extui %c0_i32_31 : i32 to i64
    %79 = arith.addi %78, %c1049060_i64_36 : i64
    %80 = llvm.getelementptr %8[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %77, %80 : i32, !llvm.ptr
    cf.br ^bb7
  }
  func.func @f6(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c4854689474455388916_i64 = arith.constant 4854689474455388916 : i64
    %c8_i64 = arith.constant 8 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c8_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %c4854689474455388916_i64, %8 : i64, !llvm.ptr
    %9 = llvm.load %0 : !llvm.ptr -> i32
    %c-1846477596472271460_i64 = arith.constant -1846477596472271460 : i64
    %c0_i64 = arith.constant 0 : i64
    %10 = arith.extui %9 : i32 to i64
    %11 = arith.addi %10, %c0_i64 : i64
    %12 = llvm.getelementptr %4[%11] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %c-1846477596472271460_i64, %12 : i64, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f7(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c7199936582794304877_i64 = arith.constant 7199936582794304877 : i64
    %c8_i64 = arith.constant 8 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c8_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %c7199936582794304877_i64, %8 : i64, !llvm.ptr
    %9 = llvm.load %0 : !llvm.ptr -> i32
    %c-5076933981314334344_i64 = arith.constant -5076933981314334344 : i64
    %c0_i64 = arith.constant 0 : i64
    %10 = arith.extui %9 : i32 to i64
    %11 = arith.addi %10, %c0_i64 : i64
    %12 = llvm.getelementptr %4[%11] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %c-5076933981314334344_i64, %12 : i64, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f8(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i64_4 = arith.constant 1 : i64
    %5 = llvm.alloca %c1_i64_4 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %11 = llvm.load %7 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %12 = arith.subi %11, %c32_i32 : i32
    llvm.store %12, %3 : i32, !llvm.ptr
    llvm.store %12, %7 : i32, !llvm.ptr
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %14 = llvm.load %2 : !llvm.ptr -> i32
    %15 = arith.addi %13, %14 : i32
    llvm.store %15, %2 : i32, !llvm.ptr
    %16 = llvm.load %1 : !llvm.ptr -> i32
    %17 = arith.cmpi uge, %15, %16 : i32
    %18 = arith.extui %17 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %19 = arith.cmpi ne, %18, %c0_i32_5 : i32
    cf.cond_br %19, ^bb3, ^bb4
  ^bb2:  // pred: ^bb8
    return
  ^bb3:  // pred: ^bb1
    %c1_i32 = arith.constant 1 : i32
    llvm.store %c1_i32, %4 : i32, !llvm.ptr
    %20 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c0_i64 : i64
    %23 = llvm.getelementptr %10[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %24 = llvm.load %23 : !llvm.ptr -> i32
    llvm.store %24, %5 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %c31_i32 = arith.constant 31 : i32
    %25 = arith.cmpi ule, %c1_i32_6, %c31_i32 : i32
    %26 = scf.if %25 -> (i32) {
      %104 = arith.shli %24, %c1_i32_6 : i32
      scf.yield %104 : i32
    } else {
      %c0_i32_23 = arith.constant 0 : i32
      scf.yield %c0_i32_23 : i32
    }
    llvm.store %26, %1 : i32, !llvm.ptr
    %27 = llvm.load %2 : !llvm.ptr -> i32
    %28 = llvm.load %1 : !llvm.ptr -> i32
    %29 = llvm.load %2 : !llvm.ptr -> i32
    %30 = arith.cmpi ugt, %28, %29 : i32
    %31 = arith.extui %30 : i1 to i32
    %c0_i32_7 = arith.constant 0 : i32
    %32 = arith.cmpi ne, %31, %c0_i32_7 : i32
    %33 = arith.select %32, %26, %27 : i32
    llvm.store %33, %1 : i32, !llvm.ptr
    %c8_i32 = arith.constant 8 : i32
    %34 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_8 = arith.constant 8 : i32
    %35 = arith.cmpi ugt, %34, %c8_i32_8 : i32
    %36 = arith.extui %35 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %37 = arith.cmpi ne, %36, %c0_i32_9 : i32
    %38 = arith.select %37, %33, %c8_i32 : i32
    llvm.store %38, %1 : i32, !llvm.ptr
    %c-1_i32 = arith.constant -1 : i32
    %39 = arith.xori %38, %c-1_i32 : i32
    %c31_i32_10 = arith.constant 31 : i32
    %c31_i32_11 = arith.constant 31 : i32
    %40 = arith.cmpi ule, %c31_i32_10, %c31_i32_11 : i32
    %41 = scf.if %40 -> (i32) {
      %104 = arith.shrui %39, %c31_i32_10 : i32
      scf.yield %104 : i32
    } else {
      %c0_i32_23 = arith.constant 0 : i32
      scf.yield %c0_i32_23 : i32
    }
    llvm.store %41, %2 : i32, !llvm.ptr
    %42 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i32_12 = arith.constant 0 : i32
    %43 = arith.cmpi ne, %42, %c0_i32_12 : i32
    cf.cond_br %43, ^bb6, ^bb7
  ^bb4:  // pred: ^bb1
    %c0_i32_13 = arith.constant 0 : i32
    %c0_i32_14 = arith.constant 0 : i32
    call @f33(%arg0, %c0_i32_13, %c0_i32_14) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb5:  // 2 preds: ^bb6, ^bb7
    %44 = llvm.load %3 : !llvm.ptr -> i32
    %45 = llvm.load %4 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %46 = arith.extui %44 : i32 to i64
    %47 = arith.addi %46, %c24_i64 : i64
    %48 = llvm.getelementptr %10[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %45, %48 : i32, !llvm.ptr
    %49 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_15 = arith.constant 8 : i32
    %50 = arith.addi %49, %c8_i32_15 : i32
    %51 = llvm.load %2 : !llvm.ptr -> i32
    %52 = llvm.load %1 : !llvm.ptr -> i32
    %53 = llvm.load %3 : !llvm.ptr -> i32
    %c20_i32 = arith.constant 20 : i32
    %54 = arith.addi %53, %c20_i32 : i32
    call @f16(%arg0, %50, %51, %52, %54) : (!llvm.ptr, i32, i32, i32, i32) -> ()
    %55 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %56 = arith.extui %55 : i32 to i64
    %57 = arith.addi %56, %c8_i64 : i64
    %58 = llvm.getelementptr %10[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %59 = llvm.load %58 : !llvm.ptr -> i32
    %c0_i32_16 = arith.constant 0 : i32
    %60 = arith.cmpi eq, %59, %c0_i32_16 : i32
    %61 = arith.extui %60 : i1 to i32
    %c0_i32_17 = arith.constant 0 : i32
    %62 = arith.cmpi ne, %61, %c0_i32_17 : i32
    cf.cond_br %62, ^bb8, ^bb9
  ^bb6:  // pred: ^bb3
    %63 = llvm.load %3 : !llvm.ptr -> i32
    %64 = llvm.load %5 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %65 = arith.extui %63 : i32 to i64
    %66 = arith.addi %65, %c28_i64 : i64
    %67 = llvm.getelementptr %10[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %64, %67 : i32, !llvm.ptr
    %68 = llvm.load %3 : !llvm.ptr -> i32
    %69 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %70 = arith.extui %69 : i32 to i64
    %71 = arith.addi %70, %c4_i64 : i64
    %72 = llvm.getelementptr %10[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %73 = llvm.load %72 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %74 = arith.extui %68 : i32 to i64
    %75 = arith.addi %74, %c20_i64 : i64
    %76 = llvm.getelementptr %10[%75] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %73, %76 : i32, !llvm.ptr
    cf.br ^bb5
  ^bb7:  // pred: ^bb3
    %c0_i32_18 = arith.constant 0 : i32
    llvm.store %c0_i32_18, %4 : i32, !llvm.ptr
    cf.br ^bb5
  ^bb8:  // pred: ^bb5
    %77 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %78 = arith.extui %77 : i32 to i64
    %79 = arith.addi %78, %c12_i64 : i64
    %80 = llvm.getelementptr %10[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %81 = llvm.load %80 : !llvm.ptr -> i32
    llvm.store %81, %2 : i32, !llvm.ptr
    %82 = llvm.load %0 : !llvm.ptr -> i32
    %83 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_19 = arith.constant 0 : i64
    %84 = arith.extui %82 : i32 to i64
    %85 = arith.addi %84, %c0_i64_19 : i64
    %86 = llvm.getelementptr %10[%85] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %83, %86 : i32, !llvm.ptr
    %87 = llvm.load %0 : !llvm.ptr -> i32
    %88 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_20 = arith.constant 4 : i64
    %89 = arith.extui %87 : i32 to i64
    %90 = arith.addi %89, %c4_i64_20 : i64
    %91 = llvm.getelementptr %10[%90] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %88, %91 : i32, !llvm.ptr
    %92 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_21 = arith.constant 32 : i32
    %93 = arith.addi %92, %c32_i32_21 : i32
    llvm.store %93, %7 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb9:  // pred: ^bb5
    %94 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i64_22 = arith.constant 12 : i64
    %95 = arith.extui %94 : i32 to i64
    %96 = arith.addi %95, %c12_i64_22 : i64
    %97 = llvm.getelementptr %10[%96] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %98 = llvm.load %97 : !llvm.ptr -> i32
    %99 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %100 = arith.extui %99 : i32 to i64
    %101 = arith.addi %100, %c16_i64 : i64
    %102 = llvm.getelementptr %10[%101] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %103 = llvm.load %102 : !llvm.ptr -> i32
    call @f33(%arg0, %98, %103) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  }
  func.func @f9(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %c1048576_i32 = arith.constant 1048576 : i32
    %3 = llvm.load %1 : !llvm.ptr -> i32
    %4 = call @f37(%arg0, %2, %c1048576_i32, %3) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%4 : i32)
  ^bb2(%5: i32):  // pred: ^bb1
    return %5 : i32
  }
  func.func @f10(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> i32
    llvm.store %9, %1 : i32, !llvm.ptr
    %c0_i32_1 = arith.constant 0 : i32
    %10 = arith.cmpi eq, %9, %c0_i32_1 : i32
    %11 = arith.extui %10 : i1 to i32
    %c0_i32_2 = arith.constant 0 : i32
    %12 = arith.cmpi ne, %11, %c0_i32_2 : i32
    cf.cond_br %12, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c4_i64 : i64
    %16 = llvm.getelementptr %4[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load %16 : !llvm.ptr -> i32
    %18 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32 = arith.constant 1 : i32
    call @f3(%arg0, %17, %18, %c1_i32) : (!llvm.ptr, i32, i32, i32) -> ()
    cf.br ^bb3
  }
  func.func @f11(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> i32
    llvm.store %9, %1 : i32, !llvm.ptr
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %10 = arith.ori %9, %c-2147483648_i32 : i32
    %c-2147483648_i32_1 = arith.constant -2147483648 : i32
    %11 = arith.cmpi eq, %10, %c-2147483648_i32_1 : i32
    %12 = arith.extui %11 : i1 to i32
    %c0_i32_2 = arith.constant 0 : i32
    %13 = arith.cmpi ne, %12, %c0_i32_2 : i32
    cf.cond_br %13, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %14 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %15 = arith.extui %14 : i32 to i64
    %16 = arith.addi %15, %c4_i64 : i64
    %17 = llvm.getelementptr %4[%16] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %18 = llvm.load %17 : !llvm.ptr -> i32
    %19 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32 = arith.constant 1 : i32
    call @f3(%arg0, %18, %19, %c1_i32) : (!llvm.ptr, i32, i32, i32) -> ()
    cf.br ^bb3
  }
  func.func @f12(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f13(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %10 = arith.subi %9, %c16_i32 : i32
    llvm.store %10, %2 : i32, !llvm.ptr
    llvm.store %10, %5 : i32, !llvm.ptr
    %11 = llvm.load %1 : !llvm.ptr -> i32
    %c128_i32 = arith.constant 128 : i32
    %12 = arith.cmpi ult, %11, %c128_i32 : i32
    %13 = arith.extui %12 : i1 to i32
    %c0_i32_3 = arith.constant 0 : i32
    %14 = arith.cmpi ne, %13, %c0_i32_3 : i32
    cf.cond_br %14, ^bb6, ^bb7
  ^bb2(%15: i32):  // pred: ^bb3
    return %15 : i32
  ^bb3:  // 2 preds: ^bb11, ^bb13
    %16 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_4 = arith.constant 16 : i32
    %17 = arith.addi %16, %c16_i32_4 : i32
    llvm.store %17, %5 : i32, !llvm.ptr
    %c0_i32_5 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32_5 : i32)
  ^bb4:  // 3 preds: ^bb5, ^bb9, ^bb10
    %18 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %19 = arith.extui %18 : i32 to i64
    %20 = arith.addi %19, %c0_i64 : i64
    %21 = llvm.getelementptr %8[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %22 = llvm.load %21 : !llvm.ptr -> i32
    %23 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %24 = arith.extui %23 : i32 to i64
    %25 = arith.addi %24, %c8_i64 : i64
    %26 = llvm.getelementptr %8[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %27 = llvm.load %26 : !llvm.ptr -> i32
    llvm.store %27, %3 : i32, !llvm.ptr
    %28 = arith.subi %22, %27 : i32
    %29 = llvm.load %1 : !llvm.ptr -> i32
    %30 = arith.cmpi uge, %28, %29 : i32
    %31 = arith.extui %30 : i1 to i32
    %c0_i32_6 = arith.constant 0 : i32
    %32 = arith.cmpi ne, %31, %c0_i32_6 : i32
    cf.cond_br %32, ^bb13, ^bb14
  ^bb5:  // pred: ^bb7
    %33 = llvm.load %2 : !llvm.ptr -> i32
    %34 = llvm.load %1 : !llvm.ptr -> i32
    %c63_i32 = arith.constant 63 : i32
    %35 = arith.andi %34, %c63_i32 : i32
    %c128_i32_7 = arith.constant 128 : i32
    %36 = arith.ori %35, %c128_i32_7 : i32
    %c13_i64 = arith.constant 13 : i64
    %37 = arith.extui %33 : i32 to i64
    %38 = arith.addi %37, %c13_i64 : i64
    %39 = llvm.getelementptr %8[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %40 = arith.trunci %36 : i32 to i8
    llvm.store %40, %39 : i8, !llvm.ptr
    %41 = llvm.load %2 : !llvm.ptr -> i32
    %42 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i32 = arith.constant 6 : i32
    %c31_i32 = arith.constant 31 : i32
    %43 = arith.cmpi ule, %c6_i32, %c31_i32 : i32
    %44 = scf.if %43 -> (i32) {
      %187 = arith.shrui %42, %c6_i32 : i32
      scf.yield %187 : i32
    } else {
      %c0_i32_45 = arith.constant 0 : i32
      scf.yield %c0_i32_45 : i32
    }
    %c192_i32 = arith.constant 192 : i32
    %45 = arith.ori %44, %c192_i32 : i32
    %c12_i64 = arith.constant 12 : i64
    %46 = arith.extui %41 : i32 to i64
    %47 = arith.addi %46, %c12_i64 : i64
    %48 = llvm.getelementptr %8[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %49 = arith.trunci %45 : i32 to i8
    llvm.store %49, %48 : i8, !llvm.ptr
    %c2_i32 = arith.constant 2 : i32
    llvm.store %c2_i32, %1 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb6:  // pred: ^bb1
    %50 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_8 = arith.constant 8 : i64
    %51 = arith.extui %50 : i32 to i64
    %52 = arith.addi %51, %c8_i64_8 : i64
    %53 = llvm.getelementptr %8[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %54 = llvm.load %53 : !llvm.ptr -> i32
    llvm.store %54, %3 : i32, !llvm.ptr
    %55 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_9 = arith.constant 0 : i64
    %56 = arith.extui %55 : i32 to i64
    %57 = arith.addi %56, %c0_i64_9 : i64
    %58 = llvm.getelementptr %8[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %59 = llvm.load %58 : !llvm.ptr -> i32
    %60 = arith.cmpi eq, %54, %59 : i32
    %61 = arith.extui %60 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %62 = arith.cmpi eq, %61, %c0_i32_10 : i32
    %63 = arith.extui %62 : i1 to i32
    %c0_i32_11 = arith.constant 0 : i32
    %64 = arith.cmpi ne, %63, %c0_i32_11 : i32
    cf.cond_br %64, ^bb11, ^bb12
  ^bb7:  // pred: ^bb1
    %65 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_12 = arith.constant 0 : i32
    %c12_i64_13 = arith.constant 12 : i64
    %66 = arith.extui %65 : i32 to i64
    %67 = arith.addi %66, %c12_i64_13 : i64
    %68 = llvm.getelementptr %8[%67] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %c0_i32_12, %68 : i32, !llvm.ptr
    %69 = llvm.load %1 : !llvm.ptr -> i32
    %c2048_i32 = arith.constant 2048 : i32
    %70 = arith.cmpi ult, %69, %c2048_i32 : i32
    %71 = arith.extui %70 : i1 to i32
    %c0_i32_14 = arith.constant 0 : i32
    %72 = arith.cmpi ne, %71, %c0_i32_14 : i32
    cf.cond_br %72, ^bb5, ^bb8
  ^bb8:  // pred: ^bb7
    %73 = llvm.load %1 : !llvm.ptr -> i32
    %c65536_i32 = arith.constant 65536 : i32
    %74 = arith.cmpi uge, %73, %c65536_i32 : i32
    %75 = arith.extui %74 : i1 to i32
    %c0_i32_15 = arith.constant 0 : i32
    %76 = arith.cmpi ne, %75, %c0_i32_15 : i32
    cf.cond_br %76, ^bb9, ^bb10
  ^bb9:  // pred: ^bb8
    %77 = llvm.load %2 : !llvm.ptr -> i32
    %78 = llvm.load %1 : !llvm.ptr -> i32
    %c63_i32_16 = arith.constant 63 : i32
    %79 = arith.andi %78, %c63_i32_16 : i32
    %c128_i32_17 = arith.constant 128 : i32
    %80 = arith.ori %79, %c128_i32_17 : i32
    %c15_i64 = arith.constant 15 : i64
    %81 = arith.extui %77 : i32 to i64
    %82 = arith.addi %81, %c15_i64 : i64
    %83 = llvm.getelementptr %8[%82] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %84 = arith.trunci %80 : i32 to i8
    llvm.store %84, %83 : i8, !llvm.ptr
    %85 = llvm.load %2 : !llvm.ptr -> i32
    %86 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i32_18 = arith.constant 6 : i32
    %c31_i32_19 = arith.constant 31 : i32
    %87 = arith.cmpi ule, %c6_i32_18, %c31_i32_19 : i32
    %88 = scf.if %87 -> (i32) {
      %187 = arith.shrui %86, %c6_i32_18 : i32
      scf.yield %187 : i32
    } else {
      %c0_i32_45 = arith.constant 0 : i32
      scf.yield %c0_i32_45 : i32
    }
    %c63_i32_20 = arith.constant 63 : i32
    %89 = arith.andi %88, %c63_i32_20 : i32
    %c128_i32_21 = arith.constant 128 : i32
    %90 = arith.ori %89, %c128_i32_21 : i32
    %c14_i64 = arith.constant 14 : i64
    %91 = arith.extui %85 : i32 to i64
    %92 = arith.addi %91, %c14_i64 : i64
    %93 = llvm.getelementptr %8[%92] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %94 = arith.trunci %90 : i32 to i8
    llvm.store %94, %93 : i8, !llvm.ptr
    %95 = llvm.load %2 : !llvm.ptr -> i32
    %96 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %c31_i32_22 = arith.constant 31 : i32
    %97 = arith.cmpi ule, %c12_i32, %c31_i32_22 : i32
    %98 = scf.if %97 -> (i32) {
      %187 = arith.shrui %96, %c12_i32 : i32
      scf.yield %187 : i32
    } else {
      %c0_i32_45 = arith.constant 0 : i32
      scf.yield %c0_i32_45 : i32
    }
    %c63_i32_23 = arith.constant 63 : i32
    %99 = arith.andi %98, %c63_i32_23 : i32
    %c128_i32_24 = arith.constant 128 : i32
    %100 = arith.ori %99, %c128_i32_24 : i32
    %c13_i64_25 = arith.constant 13 : i64
    %101 = arith.extui %95 : i32 to i64
    %102 = arith.addi %101, %c13_i64_25 : i64
    %103 = llvm.getelementptr %8[%102] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %104 = arith.trunci %100 : i32 to i8
    llvm.store %104, %103 : i8, !llvm.ptr
    %105 = llvm.load %2 : !llvm.ptr -> i32
    %106 = llvm.load %1 : !llvm.ptr -> i32
    %c18_i32 = arith.constant 18 : i32
    %c31_i32_26 = arith.constant 31 : i32
    %107 = arith.cmpi ule, %c18_i32, %c31_i32_26 : i32
    %108 = scf.if %107 -> (i32) {
      %187 = arith.shrui %106, %c18_i32 : i32
      scf.yield %187 : i32
    } else {
      %c0_i32_45 = arith.constant 0 : i32
      scf.yield %c0_i32_45 : i32
    }
    %c7_i32 = arith.constant 7 : i32
    %109 = arith.andi %108, %c7_i32 : i32
    %c240_i32 = arith.constant 240 : i32
    %110 = arith.ori %109, %c240_i32 : i32
    %c12_i64_27 = arith.constant 12 : i64
    %111 = arith.extui %105 : i32 to i64
    %112 = arith.addi %111, %c12_i64_27 : i64
    %113 = llvm.getelementptr %8[%112] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %114 = arith.trunci %110 : i32 to i8
    llvm.store %114, %113 : i8, !llvm.ptr
    %c4_i32 = arith.constant 4 : i32
    llvm.store %c4_i32, %1 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb10:  // pred: ^bb8
    %115 = llvm.load %2 : !llvm.ptr -> i32
    %116 = llvm.load %1 : !llvm.ptr -> i32
    %c63_i32_28 = arith.constant 63 : i32
    %117 = arith.andi %116, %c63_i32_28 : i32
    %c128_i32_29 = arith.constant 128 : i32
    %118 = arith.ori %117, %c128_i32_29 : i32
    %c14_i64_30 = arith.constant 14 : i64
    %119 = arith.extui %115 : i32 to i64
    %120 = arith.addi %119, %c14_i64_30 : i64
    %121 = llvm.getelementptr %8[%120] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %122 = arith.trunci %118 : i32 to i8
    llvm.store %122, %121 : i8, !llvm.ptr
    %123 = llvm.load %2 : !llvm.ptr -> i32
    %124 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32_31 = arith.constant 12 : i32
    %c31_i32_32 = arith.constant 31 : i32
    %125 = arith.cmpi ule, %c12_i32_31, %c31_i32_32 : i32
    %126 = scf.if %125 -> (i32) {
      %187 = arith.shrui %124, %c12_i32_31 : i32
      scf.yield %187 : i32
    } else {
      %c0_i32_45 = arith.constant 0 : i32
      scf.yield %c0_i32_45 : i32
    }
    %c224_i32 = arith.constant 224 : i32
    %127 = arith.ori %126, %c224_i32 : i32
    %c12_i64_33 = arith.constant 12 : i64
    %128 = arith.extui %123 : i32 to i64
    %129 = arith.addi %128, %c12_i64_33 : i64
    %130 = llvm.getelementptr %8[%129] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %131 = arith.trunci %127 : i32 to i8
    llvm.store %131, %130 : i8, !llvm.ptr
    %132 = llvm.load %2 : !llvm.ptr -> i32
    %133 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i32_34 = arith.constant 6 : i32
    %c31_i32_35 = arith.constant 31 : i32
    %134 = arith.cmpi ule, %c6_i32_34, %c31_i32_35 : i32
    %135 = scf.if %134 -> (i32) {
      %187 = arith.shrui %133, %c6_i32_34 : i32
      scf.yield %187 : i32
    } else {
      %c0_i32_45 = arith.constant 0 : i32
      scf.yield %c0_i32_45 : i32
    }
    %c63_i32_36 = arith.constant 63 : i32
    %136 = arith.andi %135, %c63_i32_36 : i32
    %c128_i32_37 = arith.constant 128 : i32
    %137 = arith.ori %136, %c128_i32_37 : i32
    %c13_i64_38 = arith.constant 13 : i64
    %138 = arith.extui %132 : i32 to i64
    %139 = arith.addi %138, %c13_i64_38 : i64
    %140 = llvm.getelementptr %8[%139] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %141 = arith.trunci %137 : i32 to i8
    llvm.store %141, %140 : i8, !llvm.ptr
    %c3_i32 = arith.constant 3 : i32
    llvm.store %c3_i32, %1 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb11:  // 2 preds: ^bb6, ^bb12
    %142 = llvm.load %0 : !llvm.ptr -> i32
    %143 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32 = arith.constant 1 : i32
    %144 = arith.addi %143, %c1_i32 : i32
    %c8_i64_39 = arith.constant 8 : i64
    %145 = arith.extui %142 : i32 to i64
    %146 = arith.addi %145, %c8_i64_39 : i64
    %147 = llvm.getelementptr %8[%146] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %144, %147 : i32, !llvm.ptr
    %148 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %149 = arith.extui %148 : i32 to i64
    %150 = arith.addi %149, %c4_i64 : i64
    %151 = llvm.getelementptr %8[%150] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %152 = llvm.load %151 : !llvm.ptr -> i32
    %153 = llvm.load %3 : !llvm.ptr -> i32
    %154 = arith.addi %152, %153 : i32
    %155 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_40 = arith.constant 0 : i64
    %156 = arith.extui %154 : i32 to i64
    %157 = arith.addi %156, %c0_i64_40 : i64
    %158 = llvm.getelementptr %8[%157] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %159 = arith.trunci %155 : i32 to i8
    llvm.store %159, %158 : i8, !llvm.ptr
    cf.br ^bb3
  ^bb12:  // pred: ^bb6
    %160 = llvm.load %0 : !llvm.ptr -> i32
    call @f14(%arg0, %160) : (!llvm.ptr, i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb4, ^bb14
    %161 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_41 = arith.constant 4 : i64
    %162 = arith.extui %161 : i32 to i64
    %163 = arith.addi %162, %c4_i64_41 : i64
    %164 = llvm.getelementptr %8[%163] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %165 = llvm.load %164 : !llvm.ptr -> i32
    %166 = llvm.load %3 : !llvm.ptr -> i32
    %167 = arith.addi %165, %166 : i32
    %168 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32_42 = arith.constant 12 : i32
    %169 = arith.addi %168, %c12_i32_42 : i32
    %170 = llvm.load %1 : !llvm.ptr -> i32
    %171 = call @f44(%arg0, %167, %169, %170) : (!llvm.ptr, i32, i32, i32) -> i32
    %172 = llvm.load %0 : !llvm.ptr -> i32
    %173 = llvm.load %3 : !llvm.ptr -> i32
    %174 = llvm.load %1 : !llvm.ptr -> i32
    %175 = arith.addi %173, %174 : i32
    %c8_i64_43 = arith.constant 8 : i64
    %176 = arith.extui %172 : i32 to i64
    %177 = arith.addi %176, %c8_i64_43 : i64
    %178 = llvm.getelementptr %8[%177] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %175, %178 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb14:  // pred: ^bb4
    %179 = llvm.load %0 : !llvm.ptr -> i32
    %180 = llvm.load %3 : !llvm.ptr -> i32
    %181 = llvm.load %1 : !llvm.ptr -> i32
    call @f8(%arg0, %179, %180, %181) : (!llvm.ptr, i32, i32, i32) -> ()
    %182 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_44 = arith.constant 8 : i64
    %183 = arith.extui %182 : i32 to i64
    %184 = arith.addi %183, %c8_i64_44 : i64
    %185 = llvm.getelementptr %8[%184] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %186 = llvm.load %185 : !llvm.ptr -> i32
    llvm.store %186, %3 : i32, !llvm.ptr
    cf.br ^bb13
  }
  func.func @f14(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i64_4 = arith.constant 1 : i64
    %5 = llvm.alloca %c1_i64_4 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %11 = llvm.load %7 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %12 = arith.subi %11, %c32_i32 : i32
    llvm.store %12, %1 : i32, !llvm.ptr
    llvm.store %12, %7 : i32, !llvm.ptr
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c0_i64 : i64
    %16 = llvm.getelementptr %10[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load %16 : !llvm.ptr -> i32
    llvm.store %17, %2 : i32, !llvm.ptr
    %c-1_i32 = arith.constant -1 : i32
    %18 = arith.cmpi eq, %17, %c-1_i32 : i32
    %19 = arith.extui %18 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %20 = arith.cmpi eq, %19, %c0_i32_5 : i32
    %21 = arith.extui %20 : i1 to i32
    %c0_i32_6 = arith.constant 0 : i32
    %22 = arith.cmpi ne, %21, %c0_i32_6 : i32
    cf.cond_br %22, ^bb3, ^bb4
  ^bb2:  // pred: ^bb8
    return
  ^bb3:  // pred: ^bb1
    %c1_i32 = arith.constant 1 : i32
    llvm.store %c1_i32, %3 : i32, !llvm.ptr
    %23 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_7 = arith.constant 1 : i32
    %c31_i32 = arith.constant 31 : i32
    %24 = arith.cmpi ule, %c1_i32_7, %c31_i32 : i32
    %25 = scf.if %24 -> (i32) {
      %104 = arith.shli %23, %c1_i32_7 : i32
      scf.yield %104 : i32
    } else {
      %c0_i32_26 = arith.constant 0 : i32
      scf.yield %c0_i32_26 : i32
    }
    llvm.store %25, %4 : i32, !llvm.ptr
    %26 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_8 = arith.constant 1 : i32
    %27 = arith.addi %26, %c1_i32_8 : i32
    llvm.store %27, %5 : i32, !llvm.ptr
    %28 = llvm.load %4 : !llvm.ptr -> i32
    %29 = llvm.load %5 : !llvm.ptr -> i32
    %30 = arith.cmpi ugt, %28, %29 : i32
    %31 = arith.extui %30 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %32 = arith.cmpi ne, %31, %c0_i32_9 : i32
    %33 = arith.select %32, %25, %27 : i32
    llvm.store %33, %4 : i32, !llvm.ptr
    %c8_i32 = arith.constant 8 : i32
    %34 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i32_10 = arith.constant 8 : i32
    %35 = arith.cmpi ugt, %34, %c8_i32_10 : i32
    %36 = arith.extui %35 : i1 to i32
    %c0_i32_11 = arith.constant 0 : i32
    %37 = arith.cmpi ne, %36, %c0_i32_11 : i32
    %38 = arith.select %37, %33, %c8_i32 : i32
    llvm.store %38, %4 : i32, !llvm.ptr
    %c-1_i32_12 = arith.constant -1 : i32
    %39 = arith.xori %38, %c-1_i32_12 : i32
    %c31_i32_13 = arith.constant 31 : i32
    %c31_i32_14 = arith.constant 31 : i32
    %40 = arith.cmpi ule, %c31_i32_13, %c31_i32_14 : i32
    %41 = scf.if %40 -> (i32) {
      %104 = arith.shrui %39, %c31_i32_13 : i32
      scf.yield %104 : i32
    } else {
      %c0_i32_26 = arith.constant 0 : i32
      scf.yield %c0_i32_26 : i32
    }
    llvm.store %41, %5 : i32, !llvm.ptr
    %42 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_15 = arith.constant 0 : i32
    %43 = arith.cmpi ne, %42, %c0_i32_15 : i32
    cf.cond_br %43, ^bb6, ^bb7
  ^bb4:  // pred: ^bb1
    %c0_i32_16 = arith.constant 0 : i32
    %c0_i32_17 = arith.constant 0 : i32
    call @f33(%arg0, %c0_i32_16, %c0_i32_17) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb5:  // 2 preds: ^bb6, ^bb7
    %44 = llvm.load %1 : !llvm.ptr -> i32
    %45 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %46 = arith.extui %44 : i32 to i64
    %47 = arith.addi %46, %c24_i64 : i64
    %48 = llvm.getelementptr %10[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %45, %48 : i32, !llvm.ptr
    %49 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_18 = arith.constant 8 : i32
    %50 = arith.addi %49, %c8_i32_18 : i32
    %51 = llvm.load %5 : !llvm.ptr -> i32
    %52 = llvm.load %4 : !llvm.ptr -> i32
    %53 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i32 = arith.constant 20 : i32
    %54 = arith.addi %53, %c20_i32 : i32
    call @f16(%arg0, %50, %51, %52, %54) : (!llvm.ptr, i32, i32, i32, i32) -> ()
    %55 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %56 = arith.extui %55 : i32 to i64
    %57 = arith.addi %56, %c8_i64 : i64
    %58 = llvm.getelementptr %10[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %59 = llvm.load %58 : !llvm.ptr -> i32
    %c0_i32_19 = arith.constant 0 : i32
    %60 = arith.cmpi eq, %59, %c0_i32_19 : i32
    %61 = arith.extui %60 : i1 to i32
    %c0_i32_20 = arith.constant 0 : i32
    %62 = arith.cmpi ne, %61, %c0_i32_20 : i32
    cf.cond_br %62, ^bb8, ^bb9
  ^bb6:  // pred: ^bb3
    %63 = llvm.load %1 : !llvm.ptr -> i32
    %64 = llvm.load %2 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %65 = arith.extui %63 : i32 to i64
    %66 = arith.addi %65, %c28_i64 : i64
    %67 = llvm.getelementptr %10[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %64, %67 : i32, !llvm.ptr
    %68 = llvm.load %1 : !llvm.ptr -> i32
    %69 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %70 = arith.extui %69 : i32 to i64
    %71 = arith.addi %70, %c4_i64 : i64
    %72 = llvm.getelementptr %10[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %73 = llvm.load %72 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %74 = arith.extui %68 : i32 to i64
    %75 = arith.addi %74, %c20_i64 : i64
    %76 = llvm.getelementptr %10[%75] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %73, %76 : i32, !llvm.ptr
    cf.br ^bb5
  ^bb7:  // pred: ^bb3
    %c0_i32_21 = arith.constant 0 : i32
    llvm.store %c0_i32_21, %3 : i32, !llvm.ptr
    cf.br ^bb5
  ^bb8:  // pred: ^bb5
    %77 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %78 = arith.extui %77 : i32 to i64
    %79 = arith.addi %78, %c12_i64 : i64
    %80 = llvm.getelementptr %10[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %81 = llvm.load %80 : !llvm.ptr -> i32
    llvm.store %81, %2 : i32, !llvm.ptr
    %82 = llvm.load %0 : !llvm.ptr -> i32
    %83 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_22 = arith.constant 0 : i64
    %84 = arith.extui %82 : i32 to i64
    %85 = arith.addi %84, %c0_i64_22 : i64
    %86 = llvm.getelementptr %10[%85] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %83, %86 : i32, !llvm.ptr
    %87 = llvm.load %0 : !llvm.ptr -> i32
    %88 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_23 = arith.constant 4 : i64
    %89 = arith.extui %87 : i32 to i64
    %90 = arith.addi %89, %c4_i64_23 : i64
    %91 = llvm.getelementptr %10[%90] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %88, %91 : i32, !llvm.ptr
    %92 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i32_24 = arith.constant 32 : i32
    %93 = arith.addi %92, %c32_i32_24 : i32
    llvm.store %93, %7 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb9:  // pred: ^bb5
    %94 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64_25 = arith.constant 12 : i64
    %95 = arith.extui %94 : i32 to i64
    %96 = arith.addi %95, %c12_i64_25 : i64
    %97 = llvm.getelementptr %10[%96] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %98 = llvm.load %97 : !llvm.ptr -> i32
    %99 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %100 = arith.extui %99 : i32 to i64
    %101 = arith.addi %100, %c16_i64 : i64
    %102 = llvm.getelementptr %10[%101] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %103 = llvm.load %102 : !llvm.ptr -> i32
    call @f33(%arg0, %98, %103) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  }
  func.func @f15(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %7 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %8 = arith.extui %7 : i32 to i64
    %9 = arith.addi %8, %c0_i64 : i64
    %10 = llvm.getelementptr %6[%9] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> i32
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c8_i64 : i64
    %15 = llvm.getelementptr %6[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %16 = llvm.load %15 : !llvm.ptr -> i32
    llvm.store %16, %3 : i32, !llvm.ptr
    %17 = arith.subi %11, %16 : i32
    %18 = llvm.load %2 : !llvm.ptr -> i32
    %19 = arith.cmpi uge, %17, %18 : i32
    %20 = arith.extui %19 : i1 to i32
    %c0_i32_3 = arith.constant 0 : i32
    %21 = arith.cmpi ne, %20, %c0_i32_3 : i32
    cf.cond_br %21, ^bb3, ^bb4
  ^bb2(%22: i32):  // pred: ^bb3
    return %22 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %23 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %24 = arith.extui %23 : i32 to i64
    %25 = arith.addi %24, %c4_i64 : i64
    %26 = llvm.getelementptr %6[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %27 = llvm.load %26 : !llvm.ptr -> i32
    %28 = llvm.load %3 : !llvm.ptr -> i32
    %29 = arith.addi %27, %28 : i32
    %30 = llvm.load %1 : !llvm.ptr -> i32
    %31 = llvm.load %2 : !llvm.ptr -> i32
    %32 = call @f44(%arg0, %29, %30, %31) : (!llvm.ptr, i32, i32, i32) -> i32
    %33 = llvm.load %0 : !llvm.ptr -> i32
    %34 = llvm.load %3 : !llvm.ptr -> i32
    %35 = llvm.load %2 : !llvm.ptr -> i32
    %36 = arith.addi %34, %35 : i32
    %c8_i64_4 = arith.constant 8 : i64
    %37 = arith.extui %33 : i32 to i64
    %38 = arith.addi %37, %c8_i64_4 : i64
    %39 = llvm.getelementptr %6[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %36, %39 : i32, !llvm.ptr
    %c0_i32_5 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32_5 : i32)
  ^bb4:  // pred: ^bb1
    %40 = llvm.load %0 : !llvm.ptr -> i32
    %41 = llvm.load %3 : !llvm.ptr -> i32
    %42 = llvm.load %2 : !llvm.ptr -> i32
    call @f8(%arg0, %40, %41, %42) : (!llvm.ptr, i32, i32, i32) -> ()
    %43 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_6 = arith.constant 8 : i64
    %44 = arith.extui %43 : i32 to i64
    %45 = arith.addi %44, %c8_i64_6 : i64
    %46 = llvm.getelementptr %6[%45] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %47 = llvm.load %46 : !llvm.ptr -> i32
    llvm.store %47, %3 : i32, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f16(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %5 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_4 = arith.constant 0 : i32
    %9 = arith.cmpi eq, %8, %c0_i32_4 : i32
    %10 = arith.extui %9 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %11 = arith.cmpi ne, %10, %c0_i32_5 : i32
    cf.cond_br %11, ^bb5, ^bb6
  ^bb2:  // 2 preds: ^bb3, ^bb19
    return
  ^bb3:  // 3 preds: ^bb4, ^bb5, ^bb18
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32 = arith.constant 1 : i32
    %c0_i64 = arith.constant 0 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c0_i64 : i64
    %15 = llvm.getelementptr %7[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %c1_i32, %15 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb6
    %16 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_6 = arith.constant 0 : i32
    %c4_i64 = arith.constant 4 : i64
    %17 = arith.extui %16 : i32 to i64
    %18 = arith.addi %17, %c4_i64 : i64
    %19 = llvm.getelementptr %7[%18] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %c0_i32_6, %19 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // pred: ^bb1
    %20 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_7 = arith.constant 0 : i32
    %c4_i64_8 = arith.constant 4 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c4_i64_8 : i64
    %23 = llvm.getelementptr %7[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %c0_i32_7, %23 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb6:  // pred: ^bb1
    %24 = llvm.load %2 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %25 = arith.cmpi sle, %24, %c-1_i32 : i32
    %26 = arith.extui %25 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %27 = arith.cmpi ne, %26, %c0_i32_9 : i32
    cf.cond_br %27, ^bb4, ^bb7
  ^bb7:  // pred: ^bb6
    %28 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64_10 = arith.constant 4 : i64
    %29 = arith.extui %28 : i32 to i64
    %30 = arith.addi %29, %c4_i64_10 : i64
    %31 = llvm.getelementptr %7[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %32 = llvm.load %31 : !llvm.ptr -> i32
    %c0_i32_11 = arith.constant 0 : i32
    %33 = arith.cmpi eq, %32, %c0_i32_11 : i32
    %34 = arith.extui %33 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %35 = arith.cmpi ne, %34, %c0_i32_12 : i32
    cf.cond_br %35, ^bb10, ^bb11
  ^bb8:  // 4 preds: ^bb9, ^bb12, ^bb15, ^bb17
    %36 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_13 = arith.constant 0 : i32
    %37 = arith.cmpi eq, %36, %c0_i32_13 : i32
    %38 = arith.extui %37 : i1 to i32
    %c0_i32_14 = arith.constant 0 : i32
    %39 = arith.cmpi ne, %38, %c0_i32_14 : i32
    cf.cond_br %39, ^bb18, ^bb19
  ^bb9:  // 2 preds: ^bb14, ^bb16
    %40 = llvm.load %2 : !llvm.ptr -> i32
    %41 = llvm.load %1 : !llvm.ptr -> i32
    %42 = call @f2(%arg0, %40, %41) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %42, %3 : i32, !llvm.ptr
    cf.br ^bb8
  ^bb10:  // pred: ^bb7
    %43 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_15 = arith.constant 0 : i32
    %44 = arith.cmpi ne, %43, %c0_i32_15 : i32
    cf.cond_br %44, ^bb16, ^bb17
  ^bb11:  // pred: ^bb7
    %45 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %46 = arith.extui %45 : i32 to i64
    %47 = arith.addi %46, %c8_i64 : i64
    %48 = llvm.getelementptr %7[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %49 = llvm.load %48 : !llvm.ptr -> i32
    llvm.store %49, %4 : i32, !llvm.ptr
    %c0_i32_16 = arith.constant 0 : i32
    %50 = arith.cmpi ne, %49, %c0_i32_16 : i32
    cf.cond_br %50, ^bb12, ^bb13
  ^bb12:  // pred: ^bb11
    %51 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_17 = arith.constant 0 : i64
    %52 = arith.extui %51 : i32 to i64
    %53 = arith.addi %52, %c0_i64_17 : i64
    %54 = llvm.getelementptr %7[%53] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %55 = llvm.load %54 : !llvm.ptr -> i32
    %56 = llvm.load %4 : !llvm.ptr -> i32
    %57 = llvm.load %1 : !llvm.ptr -> i32
    %58 = llvm.load %2 : !llvm.ptr -> i32
    %59 = call @f4(%arg0, %55, %56, %57, %58) : (!llvm.ptr, i32, i32, i32, i32) -> i32
    llvm.store %59, %3 : i32, !llvm.ptr
    cf.br ^bb8
  ^bb13:  // pred: ^bb11
    %60 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_18 = arith.constant 0 : i32
    %61 = arith.cmpi ne, %60, %c0_i32_18 : i32
    cf.cond_br %61, ^bb14, ^bb15
  ^bb14:  // pred: ^bb13
    %c0_i32_19 = arith.constant 0 : i32
    %c1049053_i64 = arith.constant 1049053 : i64
    %62 = arith.extui %c0_i32_19 : i32 to i64
    %63 = arith.addi %62, %c1049053_i64 : i64
    %64 = llvm.getelementptr %7[%63] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %65 = llvm.load %64 : !llvm.ptr -> i8
    %66 = arith.extui %65 : i8 to i32
    cf.br ^bb9
  ^bb15:  // pred: ^bb13
    %67 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %67, %3 : i32, !llvm.ptr
    cf.br ^bb8
  ^bb16:  // pred: ^bb10
    %c0_i32_20 = arith.constant 0 : i32
    %c1049053_i64_21 = arith.constant 1049053 : i64
    %68 = arith.extui %c0_i32_20 : i32 to i64
    %69 = arith.addi %68, %c1049053_i64_21 : i64
    %70 = llvm.getelementptr %7[%69] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %71 = llvm.load %70 : !llvm.ptr -> i8
    %72 = arith.extui %71 : i8 to i32
    cf.br ^bb9
  ^bb17:  // pred: ^bb10
    %73 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %73, %3 : i32, !llvm.ptr
    cf.br ^bb8
  ^bb18:  // pred: ^bb8
    %74 = llvm.load %0 : !llvm.ptr -> i32
    %75 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_22 = arith.constant 8 : i64
    %76 = arith.extui %74 : i32 to i64
    %77 = arith.addi %76, %c8_i64_22 : i64
    %78 = llvm.getelementptr %7[%77] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %75, %78 : i32, !llvm.ptr
    %79 = llvm.load %0 : !llvm.ptr -> i32
    %80 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_23 = arith.constant 4 : i64
    %81 = arith.extui %79 : i32 to i64
    %82 = arith.addi %81, %c4_i64_23 : i64
    %83 = llvm.getelementptr %7[%82] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %80, %83 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb19:  // pred: ^bb8
    %84 = llvm.load %0 : !llvm.ptr -> i32
    %85 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_24 = arith.constant 8 : i64
    %86 = arith.extui %84 : i32 to i64
    %87 = arith.addi %86, %c8_i64_24 : i64
    %88 = llvm.getelementptr %7[%87] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %85, %88 : i32, !llvm.ptr
    %89 = llvm.load %0 : !llvm.ptr -> i32
    %90 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64_25 = arith.constant 4 : i64
    %91 = arith.extui %89 : i32 to i64
    %92 = arith.addi %91, %c4_i64_25 : i64
    %93 = llvm.getelementptr %7[%92] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %90, %93 : i32, !llvm.ptr
    %94 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_26 = arith.constant 0 : i32
    %c0_i64_27 = arith.constant 0 : i64
    %95 = arith.extui %94 : i32 to i64
    %96 = arith.addi %95, %c0_i64_27 : i64
    %97 = llvm.getelementptr %7[%96] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %c0_i32_26, %97 : i32, !llvm.ptr
    cf.br ^bb2
  }
  func.func @f17(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    call @f18(%arg0, %1) : (!llvm.ptr, i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f18(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %10 = arith.subi %9, %c16_i32 : i32
    llvm.store %10, %1 : i32, !llvm.ptr
    llvm.store %10, %5 : i32, !llvm.ptr
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %12 = arith.extui %11 : i32 to i64
    %13 = arith.addi %12, %c12_i64 : i64
    %14 = llvm.getelementptr %8[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %15 = llvm.load %14 : !llvm.ptr -> i32
    llvm.store %15, %2 : i32, !llvm.ptr
    %16 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %17 = arith.extui %16 : i32 to i64
    %18 = arith.addi %17, %c4_i64 : i64
    %19 = llvm.getelementptr %8[%18] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %20 = llvm.load %19 : !llvm.ptr -> i32
    cf.switch %20 : i32, [
      default: ^bb4,
      0: ^bb6,
      1: ^bb5
    ]
  ^bb2:  // no predecessors
    return
  ^bb3:  // 2 preds: ^bb7, ^bb8
    %21 = llvm.load %1 : !llvm.ptr -> i32
    %22 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64_3 = arith.constant 4 : i64
    %23 = arith.extui %21 : i32 to i64
    %24 = arith.addi %23, %c4_i64_3 : i64
    %25 = llvm.getelementptr %8[%24] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %22, %25 : i32, !llvm.ptr
    %26 = llvm.load %1 : !llvm.ptr -> i32
    %27 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %28 = arith.extui %26 : i32 to i64
    %29 = arith.addi %28, %c0_i64 : i64
    %30 = llvm.getelementptr %8[%29] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %27, %30 : i32, !llvm.ptr
    %31 = llvm.load %1 : !llvm.ptr -> i32
    %c1048724_i32 = arith.constant 1048724 : i32
    %32 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %33 = arith.extui %32 : i32 to i64
    %34 = arith.addi %33, %c24_i64 : i64
    %35 = llvm.getelementptr %8[%34] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %36 = llvm.load %35 : !llvm.ptr -> i32
    %37 = llvm.load %0 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %38 = arith.extui %37 : i32 to i64
    %39 = arith.addi %38, %c28_i64 : i64
    %40 = llvm.getelementptr %8[%39] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %41 = llvm.load %40 : !llvm.ptr -> i32
    llvm.store %41, %0 : i32, !llvm.ptr
    %c28_i64_4 = arith.constant 28 : i64
    %42 = arith.extui %41 : i32 to i64
    %43 = arith.addi %42, %c28_i64_4 : i64
    %44 = llvm.getelementptr %8[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %45 = llvm.load %44 : !llvm.ptr -> i8
    %46 = arith.extui %45 : i8 to i32
    %47 = llvm.load %0 : !llvm.ptr -> i32
    %c29_i64 = arith.constant 29 : i64
    %48 = arith.extui %47 : i32 to i64
    %49 = arith.addi %48, %c29_i64 : i64
    %50 = llvm.getelementptr %8[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %51 = llvm.load %50 : !llvm.ptr -> i8
    %52 = arith.extui %51 : i8 to i32
    call @f28(%arg0, %31, %c1048724_i32, %36, %46, %52) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    llvm.unreachable
  ^bb4:  // 3 preds: ^bb1, ^bb5, ^bb6
    %53 = llvm.load %1 : !llvm.ptr -> i32
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %c0_i64_5 = arith.constant 0 : i64
    %54 = arith.extui %53 : i32 to i64
    %55 = arith.addi %54, %c0_i64_5 : i64
    %56 = llvm.getelementptr %8[%55] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %c-2147483648_i32, %56 : i32, !llvm.ptr
    %57 = llvm.load %1 : !llvm.ptr -> i32
    %58 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64_6 = arith.constant 12 : i64
    %59 = arith.extui %57 : i32 to i64
    %60 = arith.addi %59, %c12_i64_6 : i64
    %61 = llvm.getelementptr %8[%60] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %58, %61 : i32, !llvm.ptr
    %62 = llvm.load %1 : !llvm.ptr -> i32
    %c1048752_i32 = arith.constant 1048752 : i32
    %63 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64_7 = arith.constant 24 : i64
    %64 = arith.extui %63 : i32 to i64
    %65 = arith.addi %64, %c24_i64_7 : i64
    %66 = llvm.getelementptr %8[%65] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %67 = llvm.load %66 : !llvm.ptr -> i32
    %68 = llvm.load %0 : !llvm.ptr -> i32
    %c28_i64_8 = arith.constant 28 : i64
    %69 = arith.extui %68 : i32 to i64
    %70 = arith.addi %69, %c28_i64_8 : i64
    %71 = llvm.getelementptr %8[%70] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %72 = llvm.load %71 : !llvm.ptr -> i32
    llvm.store %72, %0 : i32, !llvm.ptr
    %c28_i64_9 = arith.constant 28 : i64
    %73 = arith.extui %72 : i32 to i64
    %74 = arith.addi %73, %c28_i64_9 : i64
    %75 = llvm.getelementptr %8[%74] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %76 = llvm.load %75 : !llvm.ptr -> i8
    %77 = arith.extui %76 : i8 to i32
    %78 = llvm.load %0 : !llvm.ptr -> i32
    %c29_i64_10 = arith.constant 29 : i64
    %79 = arith.extui %78 : i32 to i64
    %80 = arith.addi %79, %c29_i64_10 : i64
    %81 = llvm.getelementptr %8[%80] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %82 = llvm.load %81 : !llvm.ptr -> i8
    %83 = arith.extui %82 : i8 to i32
    call @f28(%arg0, %62, %c1048752_i32, %67, %77, %83) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    llvm.unreachable
  ^bb5:  // pred: ^bb1
    %84 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_11 = arith.constant 0 : i32
    %85 = arith.cmpi ne, %84, %c0_i32_11 : i32
    cf.cond_br %85, ^bb4, ^bb8
  ^bb6:  // pred: ^bb1
    %86 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_12 = arith.constant 0 : i32
    %87 = arith.cmpi ne, %86, %c0_i32_12 : i32
    cf.cond_br %87, ^bb4, ^bb7
  ^bb7:  // pred: ^bb6
    %c1_i32 = arith.constant 1 : i32
    llvm.store %c1_i32, %2 : i32, !llvm.ptr
    %c0_i32_13 = arith.constant 0 : i32
    llvm.store %c0_i32_13, %3 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb8:  // pred: ^bb5
    %88 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_14 = arith.constant 0 : i64
    %89 = arith.extui %88 : i32 to i64
    %90 = arith.addi %89, %c0_i64_14 : i64
    %91 = llvm.getelementptr %8[%90] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %92 = llvm.load %91 : !llvm.ptr -> i32
    llvm.store %92, %2 : i32, !llvm.ptr
    %c4_i64_15 = arith.constant 4 : i64
    %93 = arith.extui %92 : i32 to i64
    %94 = arith.addi %93, %c4_i64_15 : i64
    %95 = llvm.getelementptr %8[%94] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %96 = llvm.load %95 : !llvm.ptr -> i32
    llvm.store %96, %3 : i32, !llvm.ptr
    %97 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_16 = arith.constant 0 : i64
    %98 = arith.extui %97 : i32 to i64
    %99 = arith.addi %98, %c0_i64_16 : i64
    %100 = llvm.getelementptr %8[%99] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %101 = llvm.load %100 : !llvm.ptr -> i32
    llvm.store %101, %2 : i32, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f19(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %4 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %9 = arith.subi %8, %c48_i32 : i32
    llvm.store %9, %2 : i32, !llvm.ptr
    llvm.store %9, %4 : i32, !llvm.ptr
    %c0_i32_2 = arith.constant 0 : i32
    %c1049052_i64 = arith.constant 1049052 : i64
    %10 = arith.extui %c0_i32_2 : i32 to i64
    %11 = arith.addi %10, %c1049052_i64 : i64
    %12 = llvm.getelementptr %7[%11] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> i8
    %14 = arith.extui %13 : i8 to i32
    %c0_i32_3 = arith.constant 0 : i32
    %15 = arith.cmpi eq, %14, %c0_i32_3 : i32
    %16 = arith.extui %15 : i1 to i32
    %c0_i32_4 = arith.constant 0 : i32
    %17 = arith.cmpi ne, %16, %c0_i32_4 : i32
    cf.cond_br %17, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // pred: ^bb1
    %18 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i32_5 = arith.constant 48 : i32
    %19 = arith.addi %18, %c48_i32_5 : i32
    llvm.store %19, %4 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %20 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c12_i64 = arith.constant 12 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c12_i64 : i64
    %23 = llvm.getelementptr %7[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %c2_i32, %23 : i32, !llvm.ptr
    %24 = llvm.load %2 : !llvm.ptr -> i32
    %c1048636_i32 = arith.constant 1048636 : i32
    %c8_i64 = arith.constant 8 : i64
    %25 = arith.extui %24 : i32 to i64
    %26 = arith.addi %25, %c8_i64 : i64
    %27 = llvm.getelementptr %7[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %c1048636_i32, %27 : i32, !llvm.ptr
    %28 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_6 = arith.constant 1 : i64
    %c20_i64 = arith.constant 20 : i64
    %29 = arith.extui %28 : i32 to i64
    %30 = arith.addi %29, %c20_i64 : i64
    %31 = llvm.getelementptr %7[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %c1_i64_6, %31 : i64, !llvm.ptr
    %32 = llvm.load %2 : !llvm.ptr -> i32
    %33 = llvm.load %1 : !llvm.ptr -> i32
    %c44_i64 = arith.constant 44 : i64
    %34 = arith.extui %32 : i32 to i64
    %35 = arith.addi %34, %c44_i64 : i64
    %36 = llvm.getelementptr %7[%35] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %33, %36 : i32, !llvm.ptr
    %37 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32 = arith.constant 1 : i32
    %38 = arith.extui %c1_i32 : i32 to i64
    %c32_i64 = arith.constant 32 : i64
    %c63_i64 = arith.constant 63 : i64
    %39 = arith.cmpi ule, %c32_i64, %c63_i64 : i64
    %40 = scf.if %39 -> (i64) {
      %56 = arith.shli %38, %c32_i64 : i64
      scf.yield %56 : i64
    } else {
      %c0_i64 = arith.constant 0 : i64
      scf.yield %c0_i64 : i64
    }
    %41 = llvm.load %2 : !llvm.ptr -> i32
    %c44_i32 = arith.constant 44 : i32
    %42 = arith.addi %41, %c44_i32 : i32
    %43 = arith.extui %42 : i32 to i64
    %44 = arith.ori %40, %43 : i64
    %c32_i64_7 = arith.constant 32 : i64
    %45 = arith.extui %37 : i32 to i64
    %46 = arith.addi %45, %c32_i64_7 : i64
    %47 = llvm.getelementptr %7[%46] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %44, %47 : i64, !llvm.ptr
    %48 = llvm.load %2 : !llvm.ptr -> i32
    %49 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %50 = arith.addi %49, %c32_i32 : i32
    %c16_i64 = arith.constant 16 : i64
    %51 = arith.extui %48 : i32 to i64
    %52 = arith.addi %51, %c16_i64 : i64
    %53 = llvm.getelementptr %7[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %50, %53 : i32, !llvm.ptr
    %54 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %55 = arith.addi %54, %c8_i32 : i32
    %c1048676_i32 = arith.constant 1048676 : i32
    call @f35(%arg0, %55, %c1048676_i32) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  }
  func.func @f20(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %4 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %9 = arith.subi %8, %c32_i32 : i32
    llvm.store %9, %1 : i32, !llvm.ptr
    llvm.store %9, %4 : i32, !llvm.ptr
    %10 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %11 = arith.extui %10 : i32 to i64
    %12 = arith.addi %11, %c24_i64 : i64
    %13 = llvm.getelementptr %7[%12] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %14 = llvm.load %13 : !llvm.ptr -> i32
    llvm.store %14, %2 : i32, !llvm.ptr
    %15 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %16 = arith.addi %15, %c16_i32 : i32
    %17 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_2 = arith.constant 16 : i32
    %18 = arith.addi %17, %c16_i32_2 : i32
    %c0_i64 = arith.constant 0 : i64
    %19 = arith.extui %18 : i32 to i64
    %20 = arith.addi %19, %c0_i64 : i64
    %21 = llvm.getelementptr %7[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %22 = llvm.load %21 : !llvm.ptr -> i64
    %c0_i64_3 = arith.constant 0 : i64
    %23 = arith.extui %16 : i32 to i64
    %24 = arith.addi %23, %c0_i64_3 : i64
    %25 = llvm.getelementptr %7[%24] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %22, %25 : i64, !llvm.ptr
    %26 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %27 = arith.addi %26, %c8_i32 : i32
    %28 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_4 = arith.constant 8 : i32
    %29 = arith.addi %28, %c8_i32_4 : i32
    %c0_i64_5 = arith.constant 0 : i64
    %30 = arith.extui %29 : i32 to i64
    %31 = arith.addi %30, %c0_i64_5 : i64
    %32 = llvm.getelementptr %7[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %33 = llvm.load %32 : !llvm.ptr -> i64
    %c0_i64_6 = arith.constant 0 : i64
    %34 = arith.extui %27 : i32 to i64
    %35 = arith.addi %34, %c0_i64_6 : i64
    %36 = llvm.getelementptr %7[%35] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %33, %36 : i64, !llvm.ptr
    %37 = llvm.load %1 : !llvm.ptr -> i32
    %38 = llvm.load %0 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %39 = arith.extui %37 : i32 to i64
    %40 = arith.addi %39, %c28_i64 : i64
    %41 = llvm.getelementptr %7[%40] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %38, %41 : i32, !llvm.ptr
    %42 = llvm.load %1 : !llvm.ptr -> i32
    %43 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i64_7 = arith.constant 24 : i64
    %44 = arith.extui %42 : i32 to i64
    %45 = arith.addi %44, %c24_i64_7 : i64
    %46 = llvm.getelementptr %7[%45] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %43, %46 : i32, !llvm.ptr
    %47 = llvm.load %1 : !llvm.ptr -> i32
    %48 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_8 = arith.constant 0 : i64
    %49 = arith.extui %48 : i32 to i64
    %50 = arith.addi %49, %c0_i64_8 : i64
    %51 = llvm.getelementptr %7[%50] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %52 = llvm.load %51 : !llvm.ptr -> i64
    %c0_i64_9 = arith.constant 0 : i64
    %53 = arith.extui %47 : i32 to i64
    %54 = arith.addi %53, %c0_i64_9 : i64
    %55 = llvm.getelementptr %7[%54] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %52, %55 : i64, !llvm.ptr
    %56 = llvm.load %1 : !llvm.ptr -> i32
    call @f17(%arg0, %56) : (!llvm.ptr, i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f21(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i64_4 = arith.constant 1 : i64
    %5 = llvm.alloca %c1_i64_4 x i64 : (i64) -> !llvm.ptr
    llvm.store %c0_i64, %5 : i64, !llvm.ptr
    %6 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %11 = llvm.load %7 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %12 = arith.subi %11, %c64_i32 : i32
    llvm.store %12, %2 : i32, !llvm.ptr
    llvm.store %12, %7 : i32, !llvm.ptr
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_5 = arith.constant 0 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c0_i64_5 : i64
    %16 = llvm.getelementptr %10[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load %16 : !llvm.ptr -> i32
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %18 = arith.cmpi eq, %17, %c-2147483648_i32 : i32
    %19 = arith.extui %18 : i1 to i32
    %c0_i32_6 = arith.constant 0 : i32
    %20 = arith.cmpi eq, %19, %c0_i32_6 : i32
    %21 = arith.extui %20 : i1 to i32
    %c0_i32_7 = arith.constant 0 : i32
    %22 = arith.cmpi ne, %21, %c0_i32_7 : i32
    cf.cond_br %22, ^bb3, ^bb4
  ^bb2:  // pred: ^bb6
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %23 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_8 = arith.constant 0 : i64
    %24 = arith.extui %23 : i32 to i64
    %25 = arith.addi %24, %c0_i64_8 : i64
    %26 = llvm.getelementptr %10[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %27 = llvm.load %26 : !llvm.ptr -> i64
    llvm.store %27, %5 : i64, !llvm.ptr
    %28 = llvm.load %1 : !llvm.ptr -> i32
    %c4294967296_i64 = arith.constant 4294967296 : i64
    %c0_i64_9 = arith.constant 0 : i64
    %29 = arith.extui %28 : i32 to i64
    %30 = arith.addi %29, %c0_i64_9 : i64
    %31 = llvm.getelementptr %10[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %c4294967296_i64, %31 : i64, !llvm.ptr
    %32 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %33 = arith.addi %32, %c8_i32 : i32
    llvm.store %33, %3 : i32, !llvm.ptr
    %34 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_10 = arith.constant 8 : i32
    %35 = arith.addi %34, %c8_i32_10 : i32
    llvm.store %35, %1 : i32, !llvm.ptr
    %c0_i64_11 = arith.constant 0 : i64
    %36 = arith.extui %35 : i32 to i64
    %37 = arith.addi %36, %c0_i64_11 : i64
    %38 = llvm.getelementptr %10[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %39 = llvm.load %38 : !llvm.ptr -> i32
    %c0_i64_12 = arith.constant 0 : i64
    %40 = arith.extui %33 : i32 to i64
    %41 = arith.addi %40, %c0_i64_12 : i64
    %42 = llvm.getelementptr %10[%41] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %39, %42 : i32, !llvm.ptr
    %43 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_13 = arith.constant 0 : i32
    %c0_i64_14 = arith.constant 0 : i64
    %44 = arith.extui %43 : i32 to i64
    %45 = arith.addi %44, %c0_i64_14 : i64
    %46 = llvm.getelementptr %10[%45] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %c0_i32_13, %46 : i32, !llvm.ptr
    %c0_i32_15 = arith.constant 0 : i32
    %c1049053_i64 = arith.constant 1049053 : i64
    %47 = arith.extui %c0_i32_15 : i32 to i64
    %48 = arith.addi %47, %c1049053_i64 : i64
    %49 = llvm.getelementptr %10[%48] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %50 = llvm.load %49 : !llvm.ptr -> i8
    %51 = arith.extui %50 : i8 to i32
    %52 = llvm.load %2 : !llvm.ptr -> i32
    %53 = llvm.load %5 : !llvm.ptr -> i64
    %c0_i64_16 = arith.constant 0 : i64
    %54 = arith.extui %52 : i32 to i64
    %55 = arith.addi %54, %c0_i64_16 : i64
    %56 = llvm.getelementptr %10[%55] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %53, %56 : i64, !llvm.ptr
    %c12_i32 = arith.constant 12 : i32
    %c4_i32 = arith.constant 4 : i32
    %57 = call @f2(%arg0, %c12_i32, %c4_i32) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %57, %1 : i32, !llvm.ptr
    %c0_i32_17 = arith.constant 0 : i32
    %58 = arith.cmpi eq, %57, %c0_i32_17 : i32
    %59 = arith.extui %58 : i1 to i32
    %c0_i32_18 = arith.constant 0 : i32
    %60 = arith.cmpi ne, %59, %c0_i32_18 : i32
    cf.cond_br %60, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %61 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %62 = arith.extui %61 : i32 to i64
    %63 = arith.addi %62, %c12_i64 : i64
    %64 = llvm.getelementptr %10[%63] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %65 = llvm.load %64 : !llvm.ptr -> i32
    llvm.store %65, %3 : i32, !llvm.ptr
    %66 = llvm.load %2 : !llvm.ptr -> i32
    %c28_i32 = arith.constant 28 : i32
    %67 = arith.addi %66, %c28_i32 : i32
    %c8_i32_19 = arith.constant 8 : i32
    %68 = arith.addi %67, %c8_i32_19 : i32
    llvm.store %68, %4 : i32, !llvm.ptr
    %c0_i32_20 = arith.constant 0 : i32
    %c0_i64_21 = arith.constant 0 : i64
    %69 = arith.extui %68 : i32 to i64
    %70 = arith.addi %69, %c0_i64_21 : i64
    %71 = llvm.getelementptr %10[%70] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %c0_i32_20, %71 : i32, !llvm.ptr
    %72 = llvm.load %2 : !llvm.ptr -> i32
    %c4294967296_i64_22 = arith.constant 4294967296 : i64
    %c28_i64 = arith.constant 28 : i64
    %73 = arith.extui %72 : i32 to i64
    %74 = arith.addi %73, %c28_i64 : i64
    %75 = llvm.getelementptr %10[%74] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %c4294967296_i64_22, %75 : i64, !llvm.ptr
    %76 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32 = arith.constant 40 : i32
    %77 = arith.addi %76, %c40_i32 : i32
    %c16_i32 = arith.constant 16 : i32
    %78 = arith.addi %77, %c16_i32 : i32
    %79 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_23 = arith.constant 16 : i32
    %80 = arith.addi %79, %c16_i32_23 : i32
    %c0_i64_24 = arith.constant 0 : i64
    %81 = arith.extui %80 : i32 to i64
    %82 = arith.addi %81, %c0_i64_24 : i64
    %83 = llvm.getelementptr %10[%82] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %84 = llvm.load %83 : !llvm.ptr -> i64
    %c0_i64_25 = arith.constant 0 : i64
    %85 = arith.extui %78 : i32 to i64
    %86 = arith.addi %85, %c0_i64_25 : i64
    %87 = llvm.getelementptr %10[%86] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %84, %87 : i64, !llvm.ptr
    %88 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_26 = arith.constant 40 : i32
    %89 = arith.addi %88, %c40_i32_26 : i32
    %c8_i32_27 = arith.constant 8 : i32
    %90 = arith.addi %89, %c8_i32_27 : i32
    %91 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_28 = arith.constant 8 : i32
    %92 = arith.addi %91, %c8_i32_28 : i32
    %c0_i64_29 = arith.constant 0 : i64
    %93 = arith.extui %92 : i32 to i64
    %94 = arith.addi %93, %c0_i64_29 : i64
    %95 = llvm.getelementptr %10[%94] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %96 = llvm.load %95 : !llvm.ptr -> i64
    %c0_i64_30 = arith.constant 0 : i64
    %97 = arith.extui %90 : i32 to i64
    %98 = arith.addi %97, %c0_i64_30 : i64
    %99 = llvm.getelementptr %10[%98] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %96, %99 : i64, !llvm.ptr
    %100 = llvm.load %2 : !llvm.ptr -> i32
    %101 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_31 = arith.constant 0 : i64
    %102 = arith.extui %101 : i32 to i64
    %103 = arith.addi %102, %c0_i64_31 : i64
    %104 = llvm.getelementptr %10[%103] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %105 = llvm.load %104 : !llvm.ptr -> i64
    %c40_i64 = arith.constant 40 : i64
    %106 = arith.extui %100 : i32 to i64
    %107 = arith.addi %106, %c40_i64 : i64
    %108 = llvm.getelementptr %10[%107] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %105, %108 : i64, !llvm.ptr
    %109 = llvm.load %2 : !llvm.ptr -> i32
    %c28_i32_32 = arith.constant 28 : i32
    %110 = arith.addi %109, %c28_i32_32 : i32
    %c1048576_i32 = arith.constant 1048576 : i32
    %111 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_33 = arith.constant 40 : i32
    %112 = arith.addi %111, %c40_i32_33 : i32
    %113 = call @f37(%arg0, %110, %c1048576_i32, %112) : (!llvm.ptr, i32, i32, i32) -> i32
    %114 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_34 = arith.constant 16 : i32
    %115 = arith.addi %114, %c16_i32_34 : i32
    %c8_i32_35 = arith.constant 8 : i32
    %116 = arith.addi %115, %c8_i32_35 : i32
    %117 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_36 = arith.constant 0 : i64
    %118 = arith.extui %117 : i32 to i64
    %119 = arith.addi %118, %c0_i64_36 : i64
    %120 = llvm.getelementptr %10[%119] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %121 = llvm.load %120 : !llvm.ptr -> i32
    llvm.store %121, %3 : i32, !llvm.ptr
    %c0_i64_37 = arith.constant 0 : i64
    %122 = arith.extui %116 : i32 to i64
    %123 = arith.addi %122, %c0_i64_37 : i64
    %124 = llvm.getelementptr %10[%123] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %121, %124 : i32, !llvm.ptr
    %125 = llvm.load %2 : !llvm.ptr -> i32
    %126 = llvm.load %2 : !llvm.ptr -> i32
    %c28_i64_38 = arith.constant 28 : i64
    %127 = arith.extui %126 : i32 to i64
    %128 = arith.addi %127, %c28_i64_38 : i64
    %129 = llvm.getelementptr %10[%128] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %130 = llvm.load %129 : !llvm.ptr -> i64
    llvm.store %130, %5 : i64, !llvm.ptr
    %c16_i64 = arith.constant 16 : i64
    %131 = arith.extui %125 : i32 to i64
    %132 = arith.addi %131, %c16_i64 : i64
    %133 = llvm.getelementptr %10[%132] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %130, %133 : i64, !llvm.ptr
    %134 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_39 = arith.constant 8 : i32
    %135 = arith.addi %134, %c8_i32_39 : i32
    %136 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_40 = arith.constant 0 : i64
    %137 = arith.extui %135 : i32 to i64
    %138 = arith.addi %137, %c0_i64_40 : i64
    %139 = llvm.getelementptr %10[%138] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %136, %139 : i32, !llvm.ptr
    %140 = llvm.load %1 : !llvm.ptr -> i32
    %141 = llvm.load %5 : !llvm.ptr -> i64
    %c0_i64_41 = arith.constant 0 : i64
    %142 = arith.extui %140 : i32 to i64
    %143 = arith.addi %142, %c0_i64_41 : i64
    %144 = llvm.getelementptr %10[%143] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %141, %144 : i64, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // pred: ^bb3
    %c4_i32_42 = arith.constant 4 : i32
    %c12_i32_43 = arith.constant 12 : i32
    call @f34(%arg0, %c4_i32_42, %c12_i32_43) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb6:  // pred: ^bb3
    %145 = llvm.load %1 : !llvm.ptr -> i32
    %146 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_44 = arith.constant 0 : i64
    %147 = arith.extui %146 : i32 to i64
    %148 = arith.addi %147, %c0_i64_44 : i64
    %149 = llvm.getelementptr %10[%148] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %150 = llvm.load %149 : !llvm.ptr -> i64
    %c0_i64_45 = arith.constant 0 : i64
    %151 = arith.extui %145 : i32 to i64
    %152 = arith.addi %151, %c0_i64_45 : i64
    %153 = llvm.getelementptr %10[%152] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %150, %153 : i64, !llvm.ptr
    %154 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_46 = arith.constant 8 : i32
    %155 = arith.addi %154, %c8_i32_46 : i32
    %156 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_47 = arith.constant 0 : i64
    %157 = arith.extui %156 : i32 to i64
    %158 = arith.addi %157, %c0_i64_47 : i64
    %159 = llvm.getelementptr %10[%158] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %160 = llvm.load %159 : !llvm.ptr -> i32
    %c0_i64_48 = arith.constant 0 : i64
    %161 = arith.extui %155 : i32 to i64
    %162 = arith.addi %161, %c0_i64_48 : i64
    %163 = llvm.getelementptr %10[%162] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %160, %163 : i32, !llvm.ptr
    %164 = llvm.load %0 : !llvm.ptr -> i32
    %c1048692_i32 = arith.constant 1048692 : i32
    %c4_i64 = arith.constant 4 : i64
    %165 = arith.extui %164 : i32 to i64
    %166 = arith.addi %165, %c4_i64 : i64
    %167 = llvm.getelementptr %10[%166] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %c1048692_i32, %167 : i32, !llvm.ptr
    %168 = llvm.load %0 : !llvm.ptr -> i32
    %169 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_49 = arith.constant 0 : i64
    %170 = arith.extui %168 : i32 to i64
    %171 = arith.addi %170, %c0_i64_49 : i64
    %172 = llvm.getelementptr %10[%171] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %169, %172 : i32, !llvm.ptr
    %173 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_50 = arith.constant 64 : i32
    %174 = arith.addi %173, %c64_i32_50 : i32
    llvm.store %174, %7 : i32, !llvm.ptr
    cf.br ^bb2
  }
  func.func @f22(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i64_4 = arith.constant 1 : i64
    %5 = llvm.alloca %c1_i64_4 x i64 : (i64) -> !llvm.ptr
    llvm.store %c0_i64, %5 : i64, !llvm.ptr
    %6 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %11 = llvm.load %7 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %12 = arith.subi %11, %c48_i32 : i32
    llvm.store %12, %2 : i32, !llvm.ptr
    llvm.store %12, %7 : i32, !llvm.ptr
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_5 = arith.constant 0 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c0_i64_5 : i64
    %16 = llvm.getelementptr %10[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load %16 : !llvm.ptr -> i32
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %18 = arith.cmpi eq, %17, %c-2147483648_i32 : i32
    %19 = arith.extui %18 : i1 to i32
    %c0_i32_6 = arith.constant 0 : i32
    %20 = arith.cmpi eq, %19, %c0_i32_6 : i32
    %21 = arith.extui %20 : i1 to i32
    %c0_i32_7 = arith.constant 0 : i32
    %22 = arith.cmpi ne, %21, %c0_i32_7 : i32
    cf.cond_br %22, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %23 = llvm.load %0 : !llvm.ptr -> i32
    %c1048692_i32 = arith.constant 1048692 : i32
    %c4_i64 = arith.constant 4 : i64
    %24 = arith.extui %23 : i32 to i64
    %25 = arith.addi %24, %c4_i64 : i64
    %26 = llvm.getelementptr %10[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %c1048692_i32, %26 : i32, !llvm.ptr
    %27 = llvm.load %0 : !llvm.ptr -> i32
    %28 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_8 = arith.constant 0 : i64
    %29 = arith.extui %27 : i32 to i64
    %30 = arith.addi %29, %c0_i64_8 : i64
    %31 = llvm.getelementptr %10[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %28, %31 : i32, !llvm.ptr
    %32 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i32_9 = arith.constant 48 : i32
    %33 = arith.addi %32, %c48_i32_9 : i32
    llvm.store %33, %7 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %34 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %35 = arith.extui %34 : i32 to i64
    %36 = arith.addi %35, %c12_i64 : i64
    %37 = llvm.getelementptr %10[%36] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %38 = llvm.load %37 : !llvm.ptr -> i32
    llvm.store %38, %3 : i32, !llvm.ptr
    %39 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %40 = arith.addi %39, %c12_i32 : i32
    %c8_i32 = arith.constant 8 : i32
    %41 = arith.addi %40, %c8_i32 : i32
    llvm.store %41, %4 : i32, !llvm.ptr
    %c0_i32_10 = arith.constant 0 : i32
    %c0_i64_11 = arith.constant 0 : i64
    %42 = arith.extui %41 : i32 to i64
    %43 = arith.addi %42, %c0_i64_11 : i64
    %44 = llvm.getelementptr %10[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %c0_i32_10, %44 : i32, !llvm.ptr
    %45 = llvm.load %2 : !llvm.ptr -> i32
    %c4294967296_i64 = arith.constant 4294967296 : i64
    %c12_i64_12 = arith.constant 12 : i64
    %46 = arith.extui %45 : i32 to i64
    %47 = arith.addi %46, %c12_i64_12 : i64
    %48 = llvm.getelementptr %10[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %c4294967296_i64, %48 : i64, !llvm.ptr
    %49 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %50 = arith.addi %49, %c24_i32 : i32
    %c16_i32 = arith.constant 16 : i32
    %51 = arith.addi %50, %c16_i32 : i32
    %52 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_13 = arith.constant 16 : i32
    %53 = arith.addi %52, %c16_i32_13 : i32
    %c0_i64_14 = arith.constant 0 : i64
    %54 = arith.extui %53 : i32 to i64
    %55 = arith.addi %54, %c0_i64_14 : i64
    %56 = llvm.getelementptr %10[%55] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %57 = llvm.load %56 : !llvm.ptr -> i64
    %c0_i64_15 = arith.constant 0 : i64
    %58 = arith.extui %51 : i32 to i64
    %59 = arith.addi %58, %c0_i64_15 : i64
    %60 = llvm.getelementptr %10[%59] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %57, %60 : i64, !llvm.ptr
    %61 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_16 = arith.constant 24 : i32
    %62 = arith.addi %61, %c24_i32_16 : i32
    %c8_i32_17 = arith.constant 8 : i32
    %63 = arith.addi %62, %c8_i32_17 : i32
    %64 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_18 = arith.constant 8 : i32
    %65 = arith.addi %64, %c8_i32_18 : i32
    %c0_i64_19 = arith.constant 0 : i64
    %66 = arith.extui %65 : i32 to i64
    %67 = arith.addi %66, %c0_i64_19 : i64
    %68 = llvm.getelementptr %10[%67] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %69 = llvm.load %68 : !llvm.ptr -> i64
    %c0_i64_20 = arith.constant 0 : i64
    %70 = arith.extui %63 : i32 to i64
    %71 = arith.addi %70, %c0_i64_20 : i64
    %72 = llvm.getelementptr %10[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %69, %72 : i64, !llvm.ptr
    %73 = llvm.load %2 : !llvm.ptr -> i32
    %74 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_21 = arith.constant 0 : i64
    %75 = arith.extui %74 : i32 to i64
    %76 = arith.addi %75, %c0_i64_21 : i64
    %77 = llvm.getelementptr %10[%76] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %78 = llvm.load %77 : !llvm.ptr -> i64
    %c24_i64 = arith.constant 24 : i64
    %79 = arith.extui %73 : i32 to i64
    %80 = arith.addi %79, %c24_i64 : i64
    %81 = llvm.getelementptr %10[%80] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %78, %81 : i64, !llvm.ptr
    %82 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32_22 = arith.constant 12 : i32
    %83 = arith.addi %82, %c12_i32_22 : i32
    %c1048576_i32 = arith.constant 1048576 : i32
    %84 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_23 = arith.constant 24 : i32
    %85 = arith.addi %84, %c24_i32_23 : i32
    %86 = call @f37(%arg0, %83, %c1048576_i32, %85) : (!llvm.ptr, i32, i32, i32) -> i32
    %87 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_24 = arith.constant 8 : i32
    %88 = arith.addi %87, %c8_i32_24 : i32
    %89 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_25 = arith.constant 0 : i64
    %90 = arith.extui %89 : i32 to i64
    %91 = arith.addi %90, %c0_i64_25 : i64
    %92 = llvm.getelementptr %10[%91] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %93 = llvm.load %92 : !llvm.ptr -> i32
    llvm.store %93, %3 : i32, !llvm.ptr
    %c0_i64_26 = arith.constant 0 : i64
    %94 = arith.extui %88 : i32 to i64
    %95 = arith.addi %94, %c0_i64_26 : i64
    %96 = llvm.getelementptr %10[%95] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %93, %96 : i32, !llvm.ptr
    %97 = llvm.load %2 : !llvm.ptr -> i32
    %98 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64_27 = arith.constant 12 : i64
    %99 = arith.extui %98 : i32 to i64
    %100 = arith.addi %99, %c12_i64_27 : i64
    %101 = llvm.getelementptr %10[%100] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %102 = llvm.load %101 : !llvm.ptr -> i64
    llvm.store %102, %5 : i64, !llvm.ptr
    %c0_i64_28 = arith.constant 0 : i64
    %103 = arith.extui %97 : i32 to i64
    %104 = arith.addi %103, %c0_i64_28 : i64
    %105 = llvm.getelementptr %10[%104] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %102, %105 : i64, !llvm.ptr
    %106 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_29 = arith.constant 8 : i32
    %107 = arith.addi %106, %c8_i32_29 : i32
    %108 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_30 = arith.constant 0 : i64
    %109 = arith.extui %107 : i32 to i64
    %110 = arith.addi %109, %c0_i64_30 : i64
    %111 = llvm.getelementptr %10[%110] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %108, %111 : i32, !llvm.ptr
    %112 = llvm.load %1 : !llvm.ptr -> i32
    %113 = llvm.load %5 : !llvm.ptr -> i64
    %c0_i64_31 = arith.constant 0 : i64
    %114 = arith.extui %112 : i32 to i64
    %115 = arith.addi %114, %c0_i64_31 : i64
    %116 = llvm.getelementptr %10[%115] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %113, %116 : i64, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f23(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %4 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %9 = arith.subi %8, %c32_i32 : i32
    llvm.store %9, %2 : i32, !llvm.ptr
    llvm.store %9, %4 : i32, !llvm.ptr
    %10 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %11 = arith.extui %10 : i32 to i64
    %12 = arith.addi %11, %c0_i64 : i64
    %13 = llvm.getelementptr %7[%12] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %14 = llvm.load %13 : !llvm.ptr -> i32
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %15 = arith.cmpi eq, %14, %c-2147483648_i32 : i32
    %16 = arith.extui %15 : i1 to i32
    %c0_i32_2 = arith.constant 0 : i32
    %17 = arith.cmpi ne, %16, %c0_i32_2 : i32
    cf.cond_br %17, ^bb4, ^bb5
  ^bb2(%18: i32):  // pred: ^bb3
    return %18 : i32
  ^bb3:  // 2 preds: ^bb4, ^bb5
    %19 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32_3 = arith.constant 32 : i32
    %20 = arith.addi %19, %c32_i32_3 : i32
    llvm.store %20, %4 : i32, !llvm.ptr
    %21 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%21 : i32)
  ^bb4:  // pred: ^bb1
    %22 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %23 = arith.addi %22, %c8_i32 : i32
    %c16_i32 = arith.constant 16 : i32
    %24 = arith.addi %23, %c16_i32 : i32
    %25 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %26 = arith.extui %25 : i32 to i64
    %27 = arith.addi %26, %c12_i64 : i64
    %28 = llvm.getelementptr %7[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %29 = llvm.load %28 : !llvm.ptr -> i32
    llvm.store %29, %0 : i32, !llvm.ptr
    %c16_i32_4 = arith.constant 16 : i32
    %30 = arith.addi %29, %c16_i32_4 : i32
    %c0_i64_5 = arith.constant 0 : i64
    %31 = arith.extui %30 : i32 to i64
    %32 = arith.addi %31, %c0_i64_5 : i64
    %33 = llvm.getelementptr %7[%32] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %34 = llvm.load %33 : !llvm.ptr -> i64
    %c0_i64_6 = arith.constant 0 : i64
    %35 = arith.extui %24 : i32 to i64
    %36 = arith.addi %35, %c0_i64_6 : i64
    %37 = llvm.getelementptr %7[%36] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %34, %37 : i64, !llvm.ptr
    %38 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_7 = arith.constant 8 : i32
    %39 = arith.addi %38, %c8_i32_7 : i32
    %c8_i32_8 = arith.constant 8 : i32
    %40 = arith.addi %39, %c8_i32_8 : i32
    %41 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_9 = arith.constant 8 : i32
    %42 = arith.addi %41, %c8_i32_9 : i32
    %c0_i64_10 = arith.constant 0 : i64
    %43 = arith.extui %42 : i32 to i64
    %44 = arith.addi %43, %c0_i64_10 : i64
    %45 = llvm.getelementptr %7[%44] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %46 = llvm.load %45 : !llvm.ptr -> i64
    %c0_i64_11 = arith.constant 0 : i64
    %47 = arith.extui %40 : i32 to i64
    %48 = arith.addi %47, %c0_i64_11 : i64
    %49 = llvm.getelementptr %7[%48] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %46, %49 : i64, !llvm.ptr
    %50 = llvm.load %2 : !llvm.ptr -> i32
    %51 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_12 = arith.constant 0 : i64
    %52 = arith.extui %51 : i32 to i64
    %53 = arith.addi %52, %c0_i64_12 : i64
    %54 = llvm.getelementptr %7[%53] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %55 = llvm.load %54 : !llvm.ptr -> i64
    %c8_i64 = arith.constant 8 : i64
    %56 = arith.extui %50 : i32 to i64
    %57 = arith.addi %56, %c8_i64 : i64
    %58 = llvm.getelementptr %7[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %55, %58 : i64, !llvm.ptr
    %59 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %60 = arith.extui %59 : i32 to i64
    %61 = arith.addi %60, %c20_i64 : i64
    %62 = llvm.getelementptr %7[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %63 = llvm.load %62 : !llvm.ptr -> i32
    %64 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %65 = arith.extui %64 : i32 to i64
    %66 = arith.addi %65, %c24_i64 : i64
    %67 = llvm.getelementptr %7[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %68 = llvm.load %67 : !llvm.ptr -> i32
    %69 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_13 = arith.constant 8 : i32
    %70 = arith.addi %69, %c8_i32_13 : i32
    %71 = call @f37(%arg0, %63, %68, %70) : (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %71, %0 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // pred: ^bb1
    %72 = llvm.load %1 : !llvm.ptr -> i32
    %73 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %74 = arith.extui %73 : i32 to i64
    %75 = arith.addi %74, %c4_i64 : i64
    %76 = llvm.getelementptr %7[%75] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %77 = llvm.load %76 : !llvm.ptr -> i32
    %78 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_14 = arith.constant 8 : i64
    %79 = arith.extui %78 : i32 to i64
    %80 = arith.addi %79, %c8_i64_14 : i64
    %81 = llvm.getelementptr %7[%80] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %82 = llvm.load %81 : !llvm.ptr -> i32
    %83 = call @f41(%arg0, %72, %77, %82) : (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %83, %0 : i32, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f24(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32_3 = arith.constant 0 : i32
    %c1049053_i64 = arith.constant 1049053 : i64
    %7 = arith.extui %c0_i32_3 : i32 to i64
    %8 = arith.addi %7, %c1049053_i64 : i64
    %9 = llvm.getelementptr %6[%8] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> i8
    %11 = arith.extui %10 : i8 to i32
    %12 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c4_i64 : i64
    %15 = llvm.getelementptr %6[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %16 = llvm.load %15 : !llvm.ptr -> i32
    llvm.store %16, %2 : i32, !llvm.ptr
    %17 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %18 = arith.extui %17 : i32 to i64
    %19 = arith.addi %18, %c0_i64 : i64
    %20 = llvm.getelementptr %6[%19] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %21 = llvm.load %20 : !llvm.ptr -> i32
    llvm.store %21, %3 : i32, !llvm.ptr
    %c8_i32 = arith.constant 8 : i32
    %c4_i32 = arith.constant 4 : i32
    %22 = call @f2(%arg0, %c8_i32, %c4_i32) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %22, %1 : i32, !llvm.ptr
    %c0_i32_4 = arith.constant 0 : i32
    %23 = arith.cmpi eq, %22, %c0_i32_4 : i32
    %24 = arith.extui %23 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %25 = arith.cmpi ne, %24, %c0_i32_5 : i32
    cf.cond_br %25, ^bb3, ^bb4
  ^bb2:  // pred: ^bb4
    return
  ^bb3:  // pred: ^bb1
    %c4_i32_6 = arith.constant 4 : i32
    %c8_i32_7 = arith.constant 8 : i32
    call @f34(%arg0, %c4_i32_6, %c8_i32_7) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb4:  // pred: ^bb1
    %26 = llvm.load %1 : !llvm.ptr -> i32
    %27 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_8 = arith.constant 4 : i64
    %28 = arith.extui %26 : i32 to i64
    %29 = arith.addi %28, %c4_i64_8 : i64
    %30 = llvm.getelementptr %6[%29] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %27, %30 : i32, !llvm.ptr
    %31 = llvm.load %1 : !llvm.ptr -> i32
    %32 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_9 = arith.constant 0 : i64
    %33 = arith.extui %31 : i32 to i64
    %34 = arith.addi %33, %c0_i64_9 : i64
    %35 = llvm.getelementptr %6[%34] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %32, %35 : i32, !llvm.ptr
    %36 = llvm.load %0 : !llvm.ptr -> i32
    %c1048708_i32 = arith.constant 1048708 : i32
    %c4_i64_10 = arith.constant 4 : i64
    %37 = arith.extui %36 : i32 to i64
    %38 = arith.addi %37, %c4_i64_10 : i64
    %39 = llvm.getelementptr %6[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %c1048708_i32, %39 : i32, !llvm.ptr
    %40 = llvm.load %0 : !llvm.ptr -> i32
    %41 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_11 = arith.constant 0 : i64
    %42 = arith.extui %40 : i32 to i64
    %43 = arith.addi %42, %c0_i64_11 : i64
    %44 = llvm.getelementptr %6[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %41, %44 : i32, !llvm.ptr
    cf.br ^bb2
  }
  func.func @f25(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c1048708_i32 = arith.constant 1048708 : i32
    %c4_i64 = arith.constant 4 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c4_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %c1048708_i32, %8 : i32, !llvm.ptr
    %9 = llvm.load %0 : !llvm.ptr -> i32
    %10 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %11 = arith.extui %9 : i32 to i64
    %12 = arith.addi %11, %c0_i64 : i64
    %13 = llvm.getelementptr %4[%12] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %10, %13 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f26(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %6 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %7 = arith.extui %6 : i32 to i64
    %8 = arith.addi %7, %c0_i64 : i64
    %9 = llvm.getelementptr %4[%8] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> i64
    %c0_i64_1 = arith.constant 0 : i64
    %11 = arith.extui %5 : i32 to i64
    %12 = arith.addi %11, %c0_i64_1 : i64
    %13 = llvm.getelementptr %4[%12] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %10, %13 : i64, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f27(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %1 : !llvm.ptr -> i32
    %6 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %7 = arith.extui %6 : i32 to i64
    %8 = arith.addi %7, %c0_i64 : i64
    %9 = llvm.getelementptr %4[%8] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> i32
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %12 = arith.extui %11 : i32 to i64
    %13 = arith.addi %12, %c4_i64 : i64
    %14 = llvm.getelementptr %4[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %15 = llvm.load %14 : !llvm.ptr -> i32
    %16 = call @f41(%arg0, %5, %10, %15) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%16 : i32)
  ^bb2(%17: i32):  // pred: ^bb1
    return %17 : i32
  }
  func.func @f28(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_4 = arith.constant 1 : i64
    %5 = llvm.alloca %c1_i64_4 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i64_5 = arith.constant 1 : i64
    %6 = llvm.alloca %c1_i64_5 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %7 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> i32
    %14 = llvm.getelementptr %arg0[56] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.load %15 : !llvm.ptr -> i32
    %18 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.load %15 : !llvm.ptr -> i32
    %20 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %21 = llvm.load %15 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %22 = llvm.load %8 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %23 = arith.subi %22, %c32_i32 : i32
    llvm.store %23, %5 : i32, !llvm.ptr
    llvm.store %23, %8 : i32, !llvm.ptr
    %c0_i32_6 = arith.constant 0 : i32
    %c0_i32_7 = arith.constant 0 : i32
    %c1049080_i64 = arith.constant 1049080 : i64
    %24 = arith.extui %c0_i32_7 : i32 to i64
    %25 = arith.addi %24, %c1049080_i64 : i64
    %26 = llvm.getelementptr %11[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %27 = llvm.load %26 : !llvm.ptr -> i32
    llvm.store %27, %6 : i32, !llvm.ptr
    %c1_i32 = arith.constant 1 : i32
    %28 = arith.addi %27, %c1_i32 : i32
    %c1049080_i64_8 = arith.constant 1049080 : i64
    %29 = arith.extui %c0_i32_6 : i32 to i64
    %30 = arith.addi %29, %c1049080_i64_8 : i64
    %31 = llvm.getelementptr %11[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %28, %31 : i32, !llvm.ptr
    %32 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i32_9 = arith.constant 0 : i32
    %33 = arith.cmpi slt, %32, %c0_i32_9 : i32
    %34 = arith.extui %33 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %35 = arith.cmpi ne, %34, %c0_i32_10 : i32
    cf.cond_br %35, ^bb3, ^bb4
  ^bb2:  // no predecessors
    return
  ^bb3:  // 4 preds: ^bb1, ^bb6, ^bb8, ^bb33
    llvm.unreachable
  ^bb4:  // pred: ^bb1
    %c0_i32_11 = arith.constant 0 : i32
    %c1049088_i64 = arith.constant 1049088 : i64
    %36 = arith.extui %c0_i32_11 : i32 to i64
    %37 = arith.addi %36, %c1049088_i64 : i64
    %38 = llvm.getelementptr %11[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %39 = llvm.load %38 : !llvm.ptr -> i8
    %40 = arith.extui %39 : i8 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %41 = arith.cmpi ne, %40, %c0_i32_12 : i32
    cf.cond_br %41, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    %42 = llvm.load %5 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %43 = arith.addi %42, %c8_i32 : i32
    %44 = llvm.load %0 : !llvm.ptr -> i32
    %45 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %46 = arith.extui %45 : i32 to i64
    %47 = arith.addi %46, %c24_i64 : i64
    %48 = llvm.getelementptr %11[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %49 = llvm.load %48 : !llvm.ptr -> i32
    %50 = arith.cmpi ult, %49, %21 : i32
    cf.cond_br %50, ^bb27, ^bb28
  ^bb6:  // pred: ^bb4
    %c0_i32_13 = arith.constant 0 : i32
    %c1_i32_14 = arith.constant 1 : i32
    %c1049088_i64_15 = arith.constant 1049088 : i64
    %51 = arith.extui %c0_i32_13 : i32 to i64
    %52 = arith.addi %51, %c1049088_i64_15 : i64
    %53 = llvm.getelementptr %11[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %54 = arith.trunci %c1_i32_14 : i32 to i8
    llvm.store %54, %53 : i8, !llvm.ptr
    %c0_i32_16 = arith.constant 0 : i32
    %c0_i32_17 = arith.constant 0 : i32
    %c1049084_i64 = arith.constant 1049084 : i64
    %55 = arith.extui %c0_i32_17 : i32 to i64
    %56 = arith.addi %55, %c1049084_i64 : i64
    %57 = llvm.getelementptr %11[%56] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %58 = llvm.load %57 : !llvm.ptr -> i32
    %c1_i32_18 = arith.constant 1 : i32
    %59 = arith.addi %58, %c1_i32_18 : i32
    %c1049084_i64_19 = arith.constant 1049084 : i64
    %60 = arith.extui %c0_i32_16 : i32 to i64
    %61 = arith.addi %60, %c1049084_i64_19 : i64
    %62 = llvm.getelementptr %11[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %59, %62 : i32, !llvm.ptr
    %c0_i32_20 = arith.constant 0 : i32
    %c1049068_i64 = arith.constant 1049068 : i64
    %63 = arith.extui %c0_i32_20 : i32 to i64
    %64 = arith.addi %63, %c1049068_i64 : i64
    %65 = llvm.getelementptr %11[%64] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %66 = llvm.load %65 : !llvm.ptr -> i32
    llvm.store %66, %6 : i32, !llvm.ptr
    %c-1_i32 = arith.constant -1 : i32
    %67 = arith.cmpi sle, %66, %c-1_i32 : i32
    %68 = arith.extui %67 : i1 to i32
    %c0_i32_21 = arith.constant 0 : i32
    %69 = arith.cmpi ne, %68, %c0_i32_21 : i32
    cf.cond_br %69, ^bb3, ^bb7
  ^bb7:  // pred: ^bb6
    %c0_i32_22 = arith.constant 0 : i32
    %70 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i32_23 = arith.constant 1 : i32
    %71 = arith.addi %70, %c1_i32_23 : i32
    %c1049068_i64_24 = arith.constant 1049068 : i64
    %72 = arith.extui %c0_i32_22 : i32 to i64
    %73 = arith.addi %72, %c1049068_i64_24 : i64
    %74 = llvm.getelementptr %11[%73] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %71, %74 : i32, !llvm.ptr
    %c0_i32_25 = arith.constant 0 : i32
    %c1049072_i64 = arith.constant 1049072 : i64
    %75 = arith.extui %c0_i32_25 : i32 to i64
    %76 = arith.addi %75, %c1049072_i64 : i64
    %77 = llvm.getelementptr %11[%76] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %78 = llvm.load %77 : !llvm.ptr -> i32
    %c0_i32_26 = arith.constant 0 : i32
    %79 = arith.cmpi eq, %78, %c0_i32_26 : i32
    %80 = arith.extui %79 : i1 to i32
    %c0_i32_27 = arith.constant 0 : i32
    %81 = arith.cmpi ne, %80, %c0_i32_27 : i32
    cf.cond_br %81, ^bb8, ^bb9
  ^bb8:  // 2 preds: ^bb7, ^bb24
    %c0_i32_28 = arith.constant 0 : i32
    %82 = llvm.load %6 : !llvm.ptr -> i32
    %c1049068_i64_29 = arith.constant 1049068 : i64
    %83 = arith.extui %c0_i32_28 : i32 to i64
    %84 = arith.addi %83, %c1049068_i64_29 : i64
    %85 = llvm.getelementptr %11[%84] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %82, %85 : i32, !llvm.ptr
    %c0_i32_30 = arith.constant 0 : i32
    %c0_i32_31 = arith.constant 0 : i32
    %c1049088_i64_32 = arith.constant 1049088 : i64
    %86 = arith.extui %c0_i32_30 : i32 to i64
    %87 = arith.addi %86, %c1049088_i64_32 : i64
    %88 = llvm.getelementptr %11[%87] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %89 = arith.trunci %c0_i32_31 : i32 to i8
    llvm.store %89, %88 : i8, !llvm.ptr
    %90 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_33 = arith.constant 0 : i32
    %91 = arith.cmpi eq, %90, %c0_i32_33 : i32
    %92 = arith.extui %91 : i1 to i32
    %c0_i32_34 = arith.constant 0 : i32
    %93 = arith.cmpi ne, %92, %c0_i32_34 : i32
    cf.cond_br %93, ^bb3, ^bb26
  ^bb9:  // pred: ^bb7
    %94 = llvm.load %5 : !llvm.ptr -> i32
    %95 = llvm.load %0 : !llvm.ptr -> i32
    %96 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %97 = arith.extui %96 : i32 to i64
    %98 = arith.addi %97, %c20_i64 : i64
    %99 = llvm.getelementptr %11[%98] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %100 = llvm.load %99 : !llvm.ptr -> i32
    %101 = arith.cmpi ult, %100, %17 : i32
    cf.cond_br %101, ^bb10, ^bb11
  ^bb10:  // 2 preds: ^bb9, ^bb11
    %102 = llvm.getelementptr %16[%100] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %103 = llvm.load %102 : !llvm.ptr -> !llvm.ptr
    %104 = llvm.load %103 : !llvm.ptr -> i32
    %c0_i32_35 = arith.constant 0 : i32
    %105 = arith.cmpi eq, %104, %c0_i32_35 : i32
    cf.cond_br %105, ^bb13, ^bb12
  ^bb11:  // pred: ^bb9
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb10
  ^bb12:  // 2 preds: ^bb10, ^bb13
    %106 = llvm.getelementptr %103[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %107 = llvm.getelementptr %103[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %108 = llvm.getelementptr %103[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %109 = llvm.load %106 : !llvm.ptr -> !llvm.ptr
    %110 = llvm.load %108 : !llvm.ptr -> !llvm.ptr
    %111 = llvm.load %109 : !llvm.ptr -> i32
    %c0_i32_36 = arith.constant 0 : i32
    %112 = arith.cmpi eq, %111, %c0_i32_36 : i32
    cf.cond_br %112, ^bb15, ^bb14
  ^bb13:  // pred: ^bb10
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb12
  ^bb14:  // 2 preds: ^bb12, ^bb15
    %113 = llvm.load %107 : !llvm.ptr -> i32
    %114 = arith.cmpi ne, %13, %113 : i32
    cf.cond_br %114, ^bb17, ^bb16
  ^bb15:  // pred: ^bb12
    %c3_i32_37 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_37) : (i32) -> ()
    cf.br ^bb14
  ^bb16:  // 2 preds: ^bb14, ^bb17
    %115 = llvm.call %109(%110, %94, %95) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> !llvm.void
    %116 = llvm.load %5 : !llvm.ptr -> i32
    %117 = llvm.load %4 : !llvm.ptr -> i32
    %c29_i64 = arith.constant 29 : i64
    %118 = arith.extui %116 : i32 to i64
    %119 = arith.addi %118, %c29_i64 : i64
    %120 = llvm.getelementptr %11[%119] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %121 = arith.trunci %117 : i32 to i8
    llvm.store %121, %120 : i8, !llvm.ptr
    %122 = llvm.load %5 : !llvm.ptr -> i32
    %123 = llvm.load %3 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %124 = arith.extui %122 : i32 to i64
    %125 = arith.addi %124, %c28_i64 : i64
    %126 = llvm.getelementptr %11[%125] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %127 = arith.trunci %123 : i32 to i8
    llvm.store %127, %126 : i8, !llvm.ptr
    %128 = llvm.load %5 : !llvm.ptr -> i32
    %129 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i64_38 = arith.constant 24 : i64
    %130 = arith.extui %128 : i32 to i64
    %131 = arith.addi %130, %c24_i64_38 : i64
    %132 = llvm.getelementptr %11[%131] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %129, %132 : i32, !llvm.ptr
    %133 = llvm.load %5 : !llvm.ptr -> i32
    %134 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %135 = arith.extui %134 : i32 to i64
    %136 = arith.addi %135, %c0_i64 : i64
    %137 = llvm.getelementptr %11[%136] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %138 = llvm.load %137 : !llvm.ptr -> i64
    %c16_i64 = arith.constant 16 : i64
    %139 = arith.extui %133 : i32 to i64
    %140 = arith.addi %139, %c16_i64 : i64
    %141 = llvm.getelementptr %11[%140] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %138, %141 : i64, !llvm.ptr
    %c0_i32_39 = arith.constant 0 : i32
    %c1049072_i64_40 = arith.constant 1049072 : i64
    %142 = arith.extui %c0_i32_39 : i32 to i64
    %143 = arith.addi %142, %c1049072_i64_40 : i64
    %144 = llvm.getelementptr %11[%143] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %145 = llvm.load %144 : !llvm.ptr -> i32
    %146 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %147 = arith.addi %146, %c16_i32 : i32
    %c0_i32_41 = arith.constant 0 : i32
    %c1049076_i64 = arith.constant 1049076 : i64
    %148 = arith.extui %c0_i32_41 : i32 to i64
    %149 = arith.addi %148, %c1049076_i64 : i64
    %150 = llvm.getelementptr %11[%149] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %151 = llvm.load %150 : !llvm.ptr -> i32
    %c20_i64_42 = arith.constant 20 : i64
    %152 = arith.extui %151 : i32 to i64
    %153 = arith.addi %152, %c20_i64_42 : i64
    %154 = llvm.getelementptr %11[%153] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %155 = llvm.load %154 : !llvm.ptr -> i32
    %156 = arith.cmpi ult, %155, %19 : i32
    cf.cond_br %156, ^bb18, ^bb19
  ^bb17:  // pred: ^bb14
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb16
  ^bb18:  // 2 preds: ^bb16, ^bb19
    %157 = llvm.getelementptr %18[%155] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %158 = llvm.load %157 : !llvm.ptr -> !llvm.ptr
    %159 = llvm.load %158 : !llvm.ptr -> i32
    %c0_i32_43 = arith.constant 0 : i32
    %160 = arith.cmpi eq, %159, %c0_i32_43 : i32
    cf.cond_br %160, ^bb21, ^bb20
  ^bb19:  // pred: ^bb16
    %c3_i32_44 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_44) : (i32) -> ()
    cf.br ^bb18
  ^bb20:  // 2 preds: ^bb18, ^bb21
    %161 = llvm.getelementptr %158[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %162 = llvm.getelementptr %158[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %163 = llvm.getelementptr %158[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %164 = llvm.load %161 : !llvm.ptr -> !llvm.ptr
    %165 = llvm.load %163 : !llvm.ptr -> !llvm.ptr
    %166 = llvm.load %164 : !llvm.ptr -> i32
    %c0_i32_45 = arith.constant 0 : i32
    %167 = arith.cmpi eq, %166, %c0_i32_45 : i32
    cf.cond_br %167, ^bb23, ^bb22
  ^bb21:  // pred: ^bb18
    %c4_i32_46 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_46) : (i32) -> ()
    cf.br ^bb20
  ^bb22:  // 2 preds: ^bb20, ^bb23
    %168 = llvm.load %162 : !llvm.ptr -> i32
    %169 = arith.cmpi ne, %13, %168 : i32
    cf.cond_br %169, ^bb25, ^bb24
  ^bb23:  // pred: ^bb20
    %c3_i32_47 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_47) : (i32) -> ()
    cf.br ^bb22
  ^bb24:  // 2 preds: ^bb22, ^bb25
    %170 = llvm.call %164(%165, %145, %147) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> !llvm.void
    %c0_i32_48 = arith.constant 0 : i32
    %c1049068_i64_49 = arith.constant 1049068 : i64
    %171 = arith.extui %c0_i32_48 : i32 to i64
    %172 = arith.addi %171, %c1049068_i64_49 : i64
    %173 = llvm.getelementptr %11[%172] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %174 = llvm.load %173 : !llvm.ptr -> i32
    %c-1_i32_50 = arith.constant -1 : i32
    %175 = arith.addi %174, %c-1_i32_50 : i32
    llvm.store %175, %6 : i32, !llvm.ptr
    cf.br ^bb8
  ^bb25:  // pred: ^bb22
    %c5_i32_51 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_51) : (i32) -> ()
    cf.br ^bb24
  ^bb26:  // pred: ^bb8
    %176 = llvm.load %0 : !llvm.ptr -> i32
    %177 = llvm.load %1 : !llvm.ptr -> i32
    call @f29(%arg0, %176, %177) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb27:  // 2 preds: ^bb5, ^bb28
    %178 = llvm.getelementptr %20[%49] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %179 = llvm.load %178 : !llvm.ptr -> !llvm.ptr
    %180 = llvm.load %179 : !llvm.ptr -> i32
    %c0_i32_52 = arith.constant 0 : i32
    %181 = arith.cmpi eq, %180, %c0_i32_52 : i32
    cf.cond_br %181, ^bb30, ^bb29
  ^bb28:  // pred: ^bb5
    %c3_i32_53 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_53) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // 2 preds: ^bb27, ^bb30
    %182 = llvm.getelementptr %179[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %183 = llvm.getelementptr %179[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %184 = llvm.getelementptr %179[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %185 = llvm.load %182 : !llvm.ptr -> !llvm.ptr
    %186 = llvm.load %184 : !llvm.ptr -> !llvm.ptr
    %187 = llvm.load %185 : !llvm.ptr -> i32
    %c0_i32_54 = arith.constant 0 : i32
    %188 = arith.cmpi eq, %187, %c0_i32_54 : i32
    cf.cond_br %188, ^bb32, ^bb31
  ^bb30:  // pred: ^bb27
    %c4_i32_55 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_55) : (i32) -> ()
    cf.br ^bb29
  ^bb31:  // 2 preds: ^bb29, ^bb32
    %189 = llvm.load %183 : !llvm.ptr -> i32
    %190 = arith.cmpi ne, %13, %189 : i32
    cf.cond_br %190, ^bb34, ^bb33
  ^bb32:  // pred: ^bb29
    %c3_i32_56 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_56) : (i32) -> ()
    cf.br ^bb31
  ^bb33:  // 2 preds: ^bb31, ^bb34
    %191 = llvm.call %185(%186, %43, %44) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> !llvm.void
    cf.br ^bb3
  ^bb34:  // pred: ^bb31
    %c5_i32_57 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_57) : (i32) -> ()
    cf.br ^bb33
  }
  func.func @f29(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = llvm.load %1 : !llvm.ptr -> i32
    %4 = call @f31(%arg0, %2, %3) : (!llvm.ptr, i32, i32) -> i32
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f30(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> i32
    %8 = llvm.getelementptr %arg0[56] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.load %9 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %12 = llvm.load %1 : !llvm.ptr -> i32
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_2 = arith.constant 0 : i32
    %c1049064_i64 = arith.constant 1049064 : i64
    %14 = arith.extui %c0_i32_2 : i32 to i64
    %15 = arith.addi %14, %c1049064_i64 : i64
    %16 = llvm.getelementptr %5[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load %16 : !llvm.ptr -> i32
    llvm.store %17, %2 : i32, !llvm.ptr
    %c2_i32 = arith.constant 2 : i32
    %18 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_3 = arith.constant 0 : i32
    %19 = arith.cmpi ne, %18, %c0_i32_3 : i32
    %20 = arith.select %19, %17, %c2_i32 : i32
    %21 = arith.cmpi ult, %20, %11 : i32
    cf.cond_br %21, ^bb3, ^bb4
  ^bb2:  // no predecessors
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %22 = llvm.getelementptr %10[%20] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %23 = llvm.load %22 : !llvm.ptr -> !llvm.ptr
    %24 = llvm.load %23 : !llvm.ptr -> i32
    %c0_i32_4 = arith.constant 0 : i32
    %25 = arith.cmpi eq, %24, %c0_i32_4 : i32
    cf.cond_br %25, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %26 = llvm.getelementptr %23[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %27 = llvm.getelementptr %23[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %28 = llvm.getelementptr %23[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %29 = llvm.load %26 : !llvm.ptr -> !llvm.ptr
    %30 = llvm.load %28 : !llvm.ptr -> !llvm.ptr
    %31 = llvm.load %29 : !llvm.ptr -> i32
    %c0_i32_5 = arith.constant 0 : i32
    %32 = arith.cmpi eq, %31, %c0_i32_5 : i32
    cf.cond_br %32, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %33 = llvm.load %27 : !llvm.ptr -> i32
    %34 = arith.cmpi ne, %7, %33 : i32
    cf.cond_br %34, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_6 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_6) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %35 = llvm.call %29(%30, %12, %13) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> !llvm.void
    llvm.unreachable
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func @f31(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    llvm.unreachable
  ^bb2(%2: i32):  // no predecessors
    return %2 : i32
  }
  func.func @f32(%arg0: !llvm.ptr) {
    %c0_i32 = arith.constant 0 : i32
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    %3 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %6 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %7 = arith.subi %6, %c32_i32 : i32
    llvm.store %7, %0 : i32, !llvm.ptr
    llvm.store %7, %2 : i32, !llvm.ptr
    %8 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %c24_i64 = arith.constant 24 : i64
    %9 = arith.extui %8 : i32 to i64
    %10 = arith.addi %9, %c24_i64 : i64
    %11 = llvm.getelementptr %5[%10] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %c0_i32_0, %11 : i32, !llvm.ptr
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32 = arith.constant 1 : i32
    %c12_i64 = arith.constant 12 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c12_i64 : i64
    %15 = llvm.getelementptr %5[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %c1_i32, %15 : i32, !llvm.ptr
    %16 = llvm.load %0 : !llvm.ptr -> i32
    %c1048800_i32 = arith.constant 1048800 : i32
    %c8_i64 = arith.constant 8 : i64
    %17 = arith.extui %16 : i32 to i64
    %18 = arith.addi %17, %c8_i64 : i64
    %19 = llvm.getelementptr %5[%18] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %c1048800_i32, %19 : i32, !llvm.ptr
    %20 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %c16_i64 = arith.constant 16 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c16_i64 : i64
    %23 = llvm.getelementptr %5[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %c4_i64, %23 : i64, !llvm.ptr
    %24 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %25 = arith.addi %24, %c8_i32 : i32
    %c1048836_i32 = arith.constant 1048836 : i32
    call @f35(%arg0, %25, %c1048836_i32) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f33(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %3 = arith.cmpi ne, %2, %c0_i32 : i32
    cf.cond_br %3, ^bb3, ^bb4
  ^bb2:  // no predecessors
    return
  ^bb3:  // pred: ^bb1
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %5 = llvm.load %1 : !llvm.ptr -> i32
    call @f34(%arg0, %4, %5) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb4:  // pred: ^bb1
    call @f32(%arg0) : (!llvm.ptr) -> ()
    llvm.unreachable
  }
  func.func @f34(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.load %0 : !llvm.ptr -> i32
    call @f1(%arg0, %2, %3) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f35(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %4 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %9 = arith.subi %8, %c32_i32 : i32
    llvm.store %9, %2 : i32, !llvm.ptr
    llvm.store %9, %4 : i32, !llvm.ptr
    %10 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %11 = arith.addi %10, %c16_i32 : i32
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_2 = arith.constant 16 : i32
    %13 = arith.addi %12, %c16_i32_2 : i32
    %c0_i64 = arith.constant 0 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c0_i64 : i64
    %16 = llvm.getelementptr %7[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load %16 : !llvm.ptr -> i64
    %c0_i64_3 = arith.constant 0 : i64
    %18 = arith.extui %11 : i32 to i64
    %19 = arith.addi %18, %c0_i64_3 : i64
    %20 = llvm.getelementptr %7[%19] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %17, %20 : i64, !llvm.ptr
    %21 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %22 = arith.addi %21, %c8_i32 : i32
    %23 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_4 = arith.constant 8 : i32
    %24 = arith.addi %23, %c8_i32_4 : i32
    %c0_i64_5 = arith.constant 0 : i64
    %25 = arith.extui %24 : i32 to i64
    %26 = arith.addi %25, %c0_i64_5 : i64
    %27 = llvm.getelementptr %7[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %28 = llvm.load %27 : !llvm.ptr -> i64
    %c0_i64_6 = arith.constant 0 : i64
    %29 = arith.extui %22 : i32 to i64
    %30 = arith.addi %29, %c0_i64_6 : i64
    %31 = llvm.getelementptr %7[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %28, %31 : i64, !llvm.ptr
    %32 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32 = arith.constant 1 : i32
    %c28_i64 = arith.constant 28 : i64
    %33 = arith.extui %32 : i32 to i64
    %34 = arith.addi %33, %c28_i64 : i64
    %35 = llvm.getelementptr %7[%34] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %36 = arith.trunci %c1_i32 : i32 to i16
    llvm.store %36, %35 : i16, !llvm.ptr
    %37 = llvm.load %2 : !llvm.ptr -> i32
    %38 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %39 = arith.extui %37 : i32 to i64
    %40 = arith.addi %39, %c24_i64 : i64
    %41 = llvm.getelementptr %7[%40] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %38, %41 : i32, !llvm.ptr
    %42 = llvm.load %2 : !llvm.ptr -> i32
    %43 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_7 = arith.constant 0 : i64
    %44 = arith.extui %43 : i32 to i64
    %45 = arith.addi %44, %c0_i64_7 : i64
    %46 = llvm.getelementptr %7[%45] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %47 = llvm.load %46 : !llvm.ptr -> i64
    %c0_i64_8 = arith.constant 0 : i64
    %48 = arith.extui %42 : i32 to i64
    %49 = arith.addi %48, %c0_i64_8 : i64
    %50 = llvm.getelementptr %7[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %47, %50 : i64, !llvm.ptr
    %51 = llvm.load %2 : !llvm.ptr -> i32
    call @f20(%arg0, %51) : (!llvm.ptr, i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f36(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> i32
    %10 = arith.extui %9 : i32 to i64
    %c1_i32 = arith.constant 1 : i32
    %11 = llvm.load %1 : !llvm.ptr -> i32
    %12 = call @f42(%arg0, %10, %c1_i32, %11) : (!llvm.ptr, i64, i32, i32) -> i32
    cf.br ^bb2(%12 : i32)
  ^bb2(%13: i32):  // pred: ^bb1
    return %13 : i32
  }
  func.func @f37(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i64_4 = arith.constant 1 : i64
    %5 = llvm.alloca %c1_i64_4 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i64_5 = arith.constant 1 : i64
    %6 = llvm.alloca %c1_i64_5 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i64_6 = arith.constant 1 : i64
    %7 = llvm.alloca %c1_i64_6 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i64_7 = arith.constant 1 : i64
    %8 = llvm.alloca %c1_i64_7 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i64_8 = arith.constant 1 : i64
    %9 = llvm.alloca %c1_i64_8 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %c1_i64_9 = arith.constant 1 : i64
    %10 = llvm.alloca %c1_i64_9 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %10 : i32, !llvm.ptr
    %c1_i64_10 = arith.constant 1 : i64
    %11 = llvm.alloca %c1_i64_10 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %11 : i32, !llvm.ptr
    %c1_i64_11 = arith.constant 1 : i64
    %12 = llvm.alloca %c1_i64_11 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %12 : i32, !llvm.ptr
    %13 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %15 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %15[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.getelementptr %arg0[4] : (!llvm.ptr) -> !llvm.ptr, i8
    %19 = llvm.load %18 : !llvm.ptr -> i32
    %20 = llvm.getelementptr %arg0[56] : (!llvm.ptr) -> !llvm.ptr, i8
    %21 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %22 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %23 = llvm.load %21 : !llvm.ptr -> i32
    %24 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %25 = llvm.load %24 : !llvm.ptr -> i32
    %26 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %27 = llvm.load %21 : !llvm.ptr -> i32
    %28 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %29 = llvm.load %21 : !llvm.ptr -> i32
    %30 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %31 = llvm.load %21 : !llvm.ptr -> i32
    %32 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %33 = llvm.load %21 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %34 = llvm.load %14 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %35 = arith.subi %34, %c48_i32 : i32
    llvm.store %35, %3 : i32, !llvm.ptr
    llvm.store %35, %14 : i32, !llvm.ptr
    %36 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %c44_i64 = arith.constant 44 : i64
    %37 = arith.extui %36 : i32 to i64
    %38 = arith.addi %37, %c44_i64 : i64
    %39 = llvm.getelementptr %17[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %40 = arith.trunci %c3_i32 : i32 to i8
    llvm.store %40, %39 : i8, !llvm.ptr
    %41 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %c28_i64 = arith.constant 28 : i64
    %42 = arith.extui %41 : i32 to i64
    %43 = arith.addi %42, %c28_i64 : i64
    %44 = llvm.getelementptr %17[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %c32_i32, %44 : i32, !llvm.ptr
    %c0_i32_12 = arith.constant 0 : i32
    llvm.store %c0_i32_12, %4 : i32, !llvm.ptr
    %45 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_13 = arith.constant 0 : i32
    %c40_i64 = arith.constant 40 : i64
    %46 = arith.extui %45 : i32 to i64
    %47 = arith.addi %46, %c40_i64 : i64
    %48 = llvm.getelementptr %17[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %c0_i32_13, %48 : i32, !llvm.ptr
    %49 = llvm.load %3 : !llvm.ptr -> i32
    %50 = llvm.load %1 : !llvm.ptr -> i32
    %c36_i64 = arith.constant 36 : i64
    %51 = arith.extui %49 : i32 to i64
    %52 = arith.addi %51, %c36_i64 : i64
    %53 = llvm.getelementptr %17[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %50, %53 : i32, !llvm.ptr
    %54 = llvm.load %3 : !llvm.ptr -> i32
    %55 = llvm.load %0 : !llvm.ptr -> i32
    %c32_i64 = arith.constant 32 : i64
    %56 = arith.extui %54 : i32 to i64
    %57 = arith.addi %56, %c32_i64 : i64
    %58 = llvm.getelementptr %17[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %55, %58 : i32, !llvm.ptr
    %59 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_14 = arith.constant 0 : i32
    %c20_i64 = arith.constant 20 : i64
    %60 = arith.extui %59 : i32 to i64
    %61 = arith.addi %60, %c20_i64 : i64
    %62 = llvm.getelementptr %17[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %c0_i32_14, %62 : i32, !llvm.ptr
    %63 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_15 = arith.constant 0 : i32
    %c12_i64 = arith.constant 12 : i64
    %64 = arith.extui %63 : i32 to i64
    %65 = arith.addi %64, %c12_i64 : i64
    %66 = llvm.getelementptr %17[%65] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %c0_i32_15, %66 : i32, !llvm.ptr
    %67 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %68 = arith.extui %67 : i32 to i64
    %69 = arith.addi %68, %c16_i64 : i64
    %70 = llvm.getelementptr %17[%69] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %71 = llvm.load %70 : !llvm.ptr -> i32
    llvm.store %71, %5 : i32, !llvm.ptr
    %c0_i32_16 = arith.constant 0 : i32
    %72 = arith.cmpi ne, %71, %c0_i32_16 : i32
    cf.cond_br %72, ^bb7, ^bb8
  ^bb2(%73: i32):  // pred: ^bb3
    return %73 : i32
  ^bb3:  // 2 preds: ^bb4, ^bb5
    %74 = llvm.load %3 : !llvm.ptr -> i32
    %c48_i32_17 = arith.constant 48 : i32
    %75 = arith.addi %74, %c48_i32_17 : i32
    llvm.store %75, %14 : i32, !llvm.ptr
    %76 = llvm.load %1 : !llvm.ptr -> i32
    cf.br ^bb2(%76 : i32)
  ^bb4:  // 2 preds: ^bb6, ^bb72
    %c0_i32_18 = arith.constant 0 : i32
    llvm.store %c0_i32_18, %1 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // 5 preds: ^bb20, ^bb29, ^bb44, ^bb61, ^bb74
    %c1_i32 = arith.constant 1 : i32
    llvm.store %c1_i32, %1 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb6:  // 4 preds: ^bb7, ^bb8, ^bb32, ^bb34
    %77 = llvm.load %4 : !llvm.ptr -> i32
    %78 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %79 = arith.extui %78 : i32 to i64
    %80 = arith.addi %79, %c4_i64 : i64
    %81 = llvm.getelementptr %17[%80] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %82 = llvm.load %81 : !llvm.ptr -> i32
    %83 = arith.cmpi uge, %77, %82 : i32
    %84 = arith.extui %83 : i1 to i32
    %c0_i32_19 = arith.constant 0 : i32
    %85 = arith.cmpi ne, %84, %c0_i32_19 : i32
    cf.cond_br %85, ^bb4, ^bb65
  ^bb7:  // 2 preds: ^bb1, ^bb10
    %86 = llvm.load %2 : !llvm.ptr -> i32
    %c20_i64_20 = arith.constant 20 : i64
    %87 = arith.extui %86 : i32 to i64
    %88 = arith.addi %87, %c20_i64_20 : i64
    %89 = llvm.getelementptr %17[%88] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %90 = llvm.load %89 : !llvm.ptr -> i32
    llvm.store %90, %1 : i32, !llvm.ptr
    %c0_i32_21 = arith.constant 0 : i32
    %91 = arith.cmpi eq, %90, %c0_i32_21 : i32
    %92 = arith.extui %91 : i1 to i32
    %c0_i32_22 = arith.constant 0 : i32
    %93 = arith.cmpi ne, %92, %c0_i32_22 : i32
    cf.cond_br %93, ^bb6, ^bb33
  ^bb8:  // pred: ^bb1
    %94 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64_23 = arith.constant 12 : i64
    %95 = arith.extui %94 : i32 to i64
    %96 = arith.addi %95, %c12_i64_23 : i64
    %97 = llvm.getelementptr %17[%96] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %98 = llvm.load %97 : !llvm.ptr -> i32
    llvm.store %98, %0 : i32, !llvm.ptr
    %c0_i32_24 = arith.constant 0 : i32
    %99 = arith.cmpi eq, %98, %c0_i32_24 : i32
    %100 = arith.extui %99 : i1 to i32
    %c0_i32_25 = arith.constant 0 : i32
    %101 = arith.cmpi ne, %100, %c0_i32_25 : i32
    cf.cond_br %101, ^bb6, ^bb9
  ^bb9:  // pred: ^bb8
    %102 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %103 = arith.extui %102 : i32 to i64
    %104 = arith.addi %103, %c8_i64 : i64
    %105 = llvm.getelementptr %17[%104] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %106 = llvm.load %105 : !llvm.ptr -> i32
    llvm.store %106, %1 : i32, !llvm.ptr
    %107 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i32_26 = arith.constant 3 : i32
    %c31_i32 = arith.constant 31 : i32
    %108 = arith.cmpi ule, %c3_i32_26, %c31_i32 : i32
    %109 = scf.if %108 -> (i32) {
      %467 = arith.shli %107, %c3_i32_26 : i32
      scf.yield %467 : i32
    } else {
      %c0_i32_138 = arith.constant 0 : i32
      scf.yield %c0_i32_138 : i32
    }
    llvm.store %109, %6 : i32, !llvm.ptr
    %110 = llvm.load %0 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %111 = arith.addi %110, %c-1_i32 : i32
    %c536870911_i32 = arith.constant 536870911 : i32
    %112 = arith.andi %111, %c536870911_i32 : i32
    %c1_i32_27 = arith.constant 1 : i32
    %113 = arith.addi %112, %c1_i32_27 : i32
    llvm.store %113, %4 : i32, !llvm.ptr
    %114 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %115 = arith.extui %114 : i32 to i64
    %116 = arith.addi %115, %c0_i64 : i64
    %117 = llvm.getelementptr %17[%116] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %118 = llvm.load %117 : !llvm.ptr -> i32
    llvm.store %118, %0 : i32, !llvm.ptr
    cf.br ^bb11
  ^bb10:  // no predecessors
    cf.br ^bb7
  ^bb11:  // 2 preds: ^bb9, ^bb31
    %119 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %120 = arith.addi %119, %c4_i32 : i32
    %c0_i64_28 = arith.constant 0 : i64
    %121 = arith.extui %120 : i32 to i64
    %122 = arith.addi %121, %c0_i64_28 : i64
    %123 = llvm.getelementptr %17[%122] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %124 = llvm.load %123 : !llvm.ptr -> i32
    llvm.store %124, %7 : i32, !llvm.ptr
    %c0_i32_29 = arith.constant 0 : i32
    %125 = arith.cmpi eq, %124, %c0_i32_29 : i32
    %126 = arith.extui %125 : i1 to i32
    %c0_i32_30 = arith.constant 0 : i32
    %127 = arith.cmpi ne, %126, %c0_i32_30 : i32
    cf.cond_br %127, ^bb12, ^bb13
  ^bb12:  // 2 preds: ^bb11, ^bb22
    %128 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_31 = arith.constant 0 : i64
    %129 = arith.extui %128 : i32 to i64
    %130 = arith.addi %129, %c0_i64_31 : i64
    %131 = llvm.getelementptr %17[%130] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %132 = llvm.load %131 : !llvm.ptr -> i32
    %133 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %134 = arith.addi %133, %c12_i32 : i32
    %135 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_32 = arith.constant 4 : i64
    %136 = arith.extui %135 : i32 to i64
    %137 = arith.addi %136, %c4_i64_32 : i64
    %138 = llvm.getelementptr %17[%137] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %139 = llvm.load %138 : !llvm.ptr -> i32
    %140 = arith.cmpi ult, %139, %27 : i32
    cf.cond_br %140, ^bb23, ^bb24
  ^bb13:  // pred: ^bb11
    %141 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i64_33 = arith.constant 32 : i64
    %142 = arith.extui %141 : i32 to i64
    %143 = arith.addi %142, %c32_i64_33 : i64
    %144 = llvm.getelementptr %17[%143] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %145 = llvm.load %144 : !llvm.ptr -> i32
    %146 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_34 = arith.constant 0 : i64
    %147 = arith.extui %146 : i32 to i64
    %148 = arith.addi %147, %c0_i64_34 : i64
    %149 = llvm.getelementptr %17[%148] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %150 = llvm.load %149 : !llvm.ptr -> i32
    %151 = llvm.load %7 : !llvm.ptr -> i32
    %152 = llvm.load %3 : !llvm.ptr -> i32
    %c36_i64_35 = arith.constant 36 : i64
    %153 = arith.extui %152 : i32 to i64
    %154 = arith.addi %153, %c36_i64_35 : i64
    %155 = llvm.getelementptr %17[%154] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %156 = llvm.load %155 : !llvm.ptr -> i32
    %c12_i64_36 = arith.constant 12 : i64
    %157 = arith.extui %156 : i32 to i64
    %158 = arith.addi %157, %c12_i64_36 : i64
    %159 = llvm.getelementptr %17[%158] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %160 = llvm.load %159 : !llvm.ptr -> i32
    %161 = arith.cmpi ult, %160, %23 : i32
    cf.cond_br %161, ^bb14, ^bb15
  ^bb14:  // 2 preds: ^bb13, ^bb15
    %162 = llvm.getelementptr %22[%160] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %163 = llvm.load %162 : !llvm.ptr -> !llvm.ptr
    %164 = llvm.load %163 : !llvm.ptr -> i32
    %c0_i32_37 = arith.constant 0 : i32
    %165 = arith.cmpi eq, %164, %c0_i32_37 : i32
    cf.cond_br %165, ^bb17, ^bb16
  ^bb15:  // pred: ^bb13
    %c3_i32_38 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_38) : (i32) -> ()
    cf.br ^bb14
  ^bb16:  // 2 preds: ^bb14, ^bb17
    %166 = llvm.getelementptr %163[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %167 = llvm.getelementptr %163[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %168 = llvm.getelementptr %163[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %169 = llvm.load %166 : !llvm.ptr -> !llvm.ptr
    %170 = llvm.load %168 : !llvm.ptr -> !llvm.ptr
    %171 = llvm.load %169 : !llvm.ptr -> i32
    %c0_i32_39 = arith.constant 0 : i32
    %172 = arith.cmpi eq, %171, %c0_i32_39 : i32
    cf.cond_br %172, ^bb19, ^bb18
  ^bb17:  // pred: ^bb14
    %c4_i32_40 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_40) : (i32) -> ()
    cf.br ^bb16
  ^bb18:  // 2 preds: ^bb16, ^bb19
    %173 = llvm.load %167 : !llvm.ptr -> i32
    %174 = arith.cmpi ne, %19, %173 : i32
    cf.cond_br %174, ^bb21, ^bb20
  ^bb19:  // pred: ^bb16
    %c3_i32_41 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_41) : (i32) -> ()
    cf.br ^bb18
  ^bb20:  // 2 preds: ^bb18, ^bb21
    %175 = llvm.call %169(%170, %145, %150, %151) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_42 = arith.constant 0 : i32
    %176 = arith.cmpi ne, %175, %c0_i32_42 : i32
    cf.cond_br %176, ^bb5, ^bb22
  ^bb21:  // pred: ^bb18
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb20
  ^bb22:  // pred: ^bb20
    cf.br ^bb12
  ^bb23:  // 2 preds: ^bb12, ^bb24
    %177 = llvm.getelementptr %26[%139] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %178 = llvm.load %177 : !llvm.ptr -> !llvm.ptr
    %179 = llvm.load %178 : !llvm.ptr -> i32
    %c0_i32_43 = arith.constant 0 : i32
    %180 = arith.cmpi eq, %179, %c0_i32_43 : i32
    cf.cond_br %180, ^bb26, ^bb25
  ^bb24:  // pred: ^bb12
    %c3_i32_44 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_44) : (i32) -> ()
    cf.br ^bb23
  ^bb25:  // 2 preds: ^bb23, ^bb26
    %181 = llvm.getelementptr %178[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %182 = llvm.getelementptr %178[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %183 = llvm.getelementptr %178[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %184 = llvm.load %181 : !llvm.ptr -> !llvm.ptr
    %185 = llvm.load %183 : !llvm.ptr -> !llvm.ptr
    %186 = llvm.load %184 : !llvm.ptr -> i32
    %c0_i32_45 = arith.constant 0 : i32
    %187 = arith.cmpi eq, %186, %c0_i32_45 : i32
    cf.cond_br %187, ^bb28, ^bb27
  ^bb26:  // pred: ^bb23
    %c4_i32_46 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_46) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // 2 preds: ^bb25, ^bb28
    %188 = llvm.load %182 : !llvm.ptr -> i32
    %189 = arith.cmpi ne, %25, %188 : i32
    cf.cond_br %189, ^bb30, ^bb29
  ^bb28:  // pred: ^bb25
    %c3_i32_47 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_47) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // 2 preds: ^bb27, ^bb30
    %190 = llvm.call %184(%185, %132, %134) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_48 = arith.constant 0 : i32
    %191 = arith.cmpi ne, %190, %c0_i32_48 : i32
    cf.cond_br %191, ^bb5, ^bb31
  ^bb30:  // pred: ^bb27
    %c5_i32_49 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_49) : (i32) -> ()
    cf.br ^bb29
  ^bb31:  // pred: ^bb29
    %192 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %193 = arith.addi %192, %c8_i32 : i32
    llvm.store %193, %1 : i32, !llvm.ptr
    %194 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_50 = arith.constant 8 : i32
    %195 = arith.addi %194, %c8_i32_50 : i32
    llvm.store %195, %0 : i32, !llvm.ptr
    %196 = llvm.load %6 : !llvm.ptr -> i32
    %c-8_i32 = arith.constant -8 : i32
    %197 = arith.addi %196, %c-8_i32 : i32
    llvm.store %197, %6 : i32, !llvm.ptr
    %c0_i32_51 = arith.constant 0 : i32
    %198 = arith.cmpi ne, %197, %c0_i32_51 : i32
    cf.cond_br %198, ^bb11, ^bb32
  ^bb32:  // pred: ^bb31
    cf.br ^bb6
  ^bb33:  // pred: ^bb7
    %199 = llvm.load %1 : !llvm.ptr -> i32
    %c5_i32_52 = arith.constant 5 : i32
    %c31_i32_53 = arith.constant 31 : i32
    %200 = arith.cmpi ule, %c5_i32_52, %c31_i32_53 : i32
    %201 = scf.if %200 -> (i32) {
      %467 = arith.shli %199, %c5_i32_52 : i32
      scf.yield %467 : i32
    } else {
      %c0_i32_138 = arith.constant 0 : i32
      scf.yield %c0_i32_138 : i32
    }
    llvm.store %201, %8 : i32, !llvm.ptr
    %202 = llvm.load %1 : !llvm.ptr -> i32
    %c-1_i32_54 = arith.constant -1 : i32
    %203 = arith.addi %202, %c-1_i32_54 : i32
    %c134217727_i32 = arith.constant 134217727 : i32
    %204 = arith.andi %203, %c134217727_i32 : i32
    %c1_i32_55 = arith.constant 1 : i32
    %205 = arith.addi %204, %c1_i32_55 : i32
    llvm.store %205, %4 : i32, !llvm.ptr
    %206 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_56 = arith.constant 8 : i64
    %207 = arith.extui %206 : i32 to i64
    %208 = arith.addi %207, %c8_i64_56 : i64
    %209 = llvm.getelementptr %17[%208] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %210 = llvm.load %209 : !llvm.ptr -> i32
    llvm.store %210, %9 : i32, !llvm.ptr
    %211 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_57 = arith.constant 0 : i64
    %212 = arith.extui %211 : i32 to i64
    %213 = arith.addi %212, %c0_i64_57 : i64
    %214 = llvm.getelementptr %17[%213] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %215 = llvm.load %214 : !llvm.ptr -> i32
    llvm.store %215, %0 : i32, !llvm.ptr
    %c0_i32_58 = arith.constant 0 : i32
    llvm.store %c0_i32_58, %6 : i32, !llvm.ptr
    cf.br ^bb35
  ^bb34:  // pred: ^bb64
    cf.br ^bb6
  ^bb35:  // 2 preds: ^bb33, ^bb63
    %216 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32_59 = arith.constant 4 : i32
    %217 = arith.addi %216, %c4_i32_59 : i32
    %c0_i64_60 = arith.constant 0 : i64
    %218 = arith.extui %217 : i32 to i64
    %219 = arith.addi %218, %c0_i64_60 : i64
    %220 = llvm.getelementptr %17[%219] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %221 = llvm.load %220 : !llvm.ptr -> i32
    llvm.store %221, %1 : i32, !llvm.ptr
    %c0_i32_61 = arith.constant 0 : i32
    %222 = arith.cmpi eq, %221, %c0_i32_61 : i32
    %223 = arith.extui %222 : i1 to i32
    %c0_i32_62 = arith.constant 0 : i32
    %224 = arith.cmpi ne, %223, %c0_i32_62 : i32
    cf.cond_br %224, ^bb36, ^bb37
  ^bb36:  // 2 preds: ^bb35, ^bb46
    %225 = llvm.load %3 : !llvm.ptr -> i32
    %226 = llvm.load %5 : !llvm.ptr -> i32
    %227 = llvm.load %6 : !llvm.ptr -> i32
    %228 = arith.addi %226, %227 : i32
    llvm.store %228, %1 : i32, !llvm.ptr
    %c16_i32 = arith.constant 16 : i32
    %229 = arith.addi %228, %c16_i32 : i32
    %c0_i64_63 = arith.constant 0 : i64
    %230 = arith.extui %229 : i32 to i64
    %231 = arith.addi %230, %c0_i64_63 : i64
    %232 = llvm.getelementptr %17[%231] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %233 = llvm.load %232 : !llvm.ptr -> i32
    %c28_i64_64 = arith.constant 28 : i64
    %234 = arith.extui %225 : i32 to i64
    %235 = arith.addi %234, %c28_i64_64 : i64
    %236 = llvm.getelementptr %17[%235] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %233, %236 : i32, !llvm.ptr
    %237 = llvm.load %3 : !llvm.ptr -> i32
    %238 = llvm.load %1 : !llvm.ptr -> i32
    %c28_i32 = arith.constant 28 : i32
    %239 = arith.addi %238, %c28_i32 : i32
    %c0_i64_65 = arith.constant 0 : i64
    %240 = arith.extui %239 : i32 to i64
    %241 = arith.addi %240, %c0_i64_65 : i64
    %242 = llvm.getelementptr %17[%241] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %243 = llvm.load %242 : !llvm.ptr -> i8
    %244 = arith.extui %243 : i8 to i32
    %c44_i64_66 = arith.constant 44 : i64
    %245 = arith.extui %237 : i32 to i64
    %246 = arith.addi %245, %c44_i64_66 : i64
    %247 = llvm.getelementptr %17[%246] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %248 = arith.trunci %244 : i32 to i8
    llvm.store %248, %247 : i8, !llvm.ptr
    %249 = llvm.load %3 : !llvm.ptr -> i32
    %250 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %251 = arith.addi %250, %c24_i32 : i32
    %c0_i64_67 = arith.constant 0 : i64
    %252 = arith.extui %251 : i32 to i64
    %253 = arith.addi %252, %c0_i64_67 : i64
    %254 = llvm.getelementptr %17[%253] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %255 = llvm.load %254 : !llvm.ptr -> i32
    %c40_i64_68 = arith.constant 40 : i64
    %256 = arith.extui %249 : i32 to i64
    %257 = arith.addi %256, %c40_i64_68 : i64
    %258 = llvm.getelementptr %17[%257] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %255, %258 : i32, !llvm.ptr
    %259 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32_69 = arith.constant 12 : i32
    %260 = arith.addi %259, %c12_i32_69 : i32
    %c0_i64_70 = arith.constant 0 : i64
    %261 = arith.extui %260 : i32 to i64
    %262 = arith.addi %261, %c0_i64_70 : i64
    %263 = llvm.getelementptr %17[%262] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %264 = llvm.load %263 : !llvm.ptr -> i32
    llvm.store %264, %7 : i32, !llvm.ptr
    %c0_i32_71 = arith.constant 0 : i32
    llvm.store %c0_i32_71, %10 : i32, !llvm.ptr
    %c0_i32_72 = arith.constant 0 : i32
    llvm.store %c0_i32_72, %11 : i32, !llvm.ptr
    %265 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_73 = arith.constant 8 : i32
    %266 = arith.addi %265, %c8_i32_73 : i32
    %c0_i64_74 = arith.constant 0 : i64
    %267 = arith.extui %266 : i32 to i64
    %268 = arith.addi %267, %c0_i64_74 : i64
    %269 = llvm.getelementptr %17[%268] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %270 = llvm.load %269 : !llvm.ptr -> i32
    cf.switch %270 : i32, [
      default: ^bb48,
      0: ^bb48,
      1: ^bb49,
      2: ^bb47
    ]
  ^bb37:  // pred: ^bb35
    %271 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i64_75 = arith.constant 32 : i64
    %272 = arith.extui %271 : i32 to i64
    %273 = arith.addi %272, %c32_i64_75 : i64
    %274 = llvm.getelementptr %17[%273] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %275 = llvm.load %274 : !llvm.ptr -> i32
    %276 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_76 = arith.constant 0 : i64
    %277 = arith.extui %276 : i32 to i64
    %278 = arith.addi %277, %c0_i64_76 : i64
    %279 = llvm.getelementptr %17[%278] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %280 = llvm.load %279 : !llvm.ptr -> i32
    %281 = llvm.load %1 : !llvm.ptr -> i32
    %282 = llvm.load %3 : !llvm.ptr -> i32
    %c36_i64_77 = arith.constant 36 : i64
    %283 = arith.extui %282 : i32 to i64
    %284 = arith.addi %283, %c36_i64_77 : i64
    %285 = llvm.getelementptr %17[%284] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %286 = llvm.load %285 : !llvm.ptr -> i32
    %c12_i64_78 = arith.constant 12 : i64
    %287 = arith.extui %286 : i32 to i64
    %288 = arith.addi %287, %c12_i64_78 : i64
    %289 = llvm.getelementptr %17[%288] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %290 = llvm.load %289 : !llvm.ptr -> i32
    %291 = arith.cmpi ult, %290, %29 : i32
    cf.cond_br %291, ^bb38, ^bb39
  ^bb38:  // 2 preds: ^bb37, ^bb39
    %292 = llvm.getelementptr %28[%290] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %293 = llvm.load %292 : !llvm.ptr -> !llvm.ptr
    %294 = llvm.load %293 : !llvm.ptr -> i32
    %c0_i32_79 = arith.constant 0 : i32
    %295 = arith.cmpi eq, %294, %c0_i32_79 : i32
    cf.cond_br %295, ^bb41, ^bb40
  ^bb39:  // pred: ^bb37
    %c3_i32_80 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_80) : (i32) -> ()
    cf.br ^bb38
  ^bb40:  // 2 preds: ^bb38, ^bb41
    %296 = llvm.getelementptr %293[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %297 = llvm.getelementptr %293[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %298 = llvm.getelementptr %293[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %299 = llvm.load %296 : !llvm.ptr -> !llvm.ptr
    %300 = llvm.load %298 : !llvm.ptr -> !llvm.ptr
    %301 = llvm.load %299 : !llvm.ptr -> i32
    %c0_i32_81 = arith.constant 0 : i32
    %302 = arith.cmpi eq, %301, %c0_i32_81 : i32
    cf.cond_br %302, ^bb43, ^bb42
  ^bb41:  // pred: ^bb38
    %c4_i32_82 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_82) : (i32) -> ()
    cf.br ^bb40
  ^bb42:  // 2 preds: ^bb40, ^bb43
    %303 = llvm.load %297 : !llvm.ptr -> i32
    %304 = arith.cmpi ne, %19, %303 : i32
    cf.cond_br %304, ^bb45, ^bb44
  ^bb43:  // pred: ^bb40
    %c3_i32_83 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_83) : (i32) -> ()
    cf.br ^bb42
  ^bb44:  // 2 preds: ^bb42, ^bb45
    %305 = llvm.call %299(%300, %275, %280, %281) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_84 = arith.constant 0 : i32
    %306 = arith.cmpi ne, %305, %c0_i32_84 : i32
    cf.cond_br %306, ^bb5, ^bb46
  ^bb45:  // pred: ^bb42
    %c5_i32_85 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_85) : (i32) -> ()
    cf.br ^bb44
  ^bb46:  // pred: ^bb44
    cf.br ^bb36
  ^bb47:  // 3 preds: ^bb36, ^bb48, ^bb49
    %307 = llvm.load %3 : !llvm.ptr -> i32
    %308 = llvm.load %7 : !llvm.ptr -> i32
    %c16_i64_86 = arith.constant 16 : i64
    %309 = arith.extui %307 : i32 to i64
    %310 = arith.addi %309, %c16_i64_86 : i64
    %311 = llvm.getelementptr %17[%310] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %308, %311 : i32, !llvm.ptr
    %312 = llvm.load %3 : !llvm.ptr -> i32
    %313 = llvm.load %11 : !llvm.ptr -> i32
    %c12_i64_87 = arith.constant 12 : i64
    %314 = arith.extui %312 : i32 to i64
    %315 = arith.addi %314, %c12_i64_87 : i64
    %316 = llvm.getelementptr %17[%315] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %313, %316 : i32, !llvm.ptr
    %317 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32_88 = arith.constant 4 : i32
    %318 = arith.addi %317, %c4_i32_88 : i32
    %c0_i64_89 = arith.constant 0 : i64
    %319 = arith.extui %318 : i32 to i64
    %320 = arith.addi %319, %c0_i64_89 : i64
    %321 = llvm.getelementptr %17[%320] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %322 = llvm.load %321 : !llvm.ptr -> i32
    llvm.store %322, %7 : i32, !llvm.ptr
    %323 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_90 = arith.constant 0 : i64
    %324 = arith.extui %323 : i32 to i64
    %325 = arith.addi %324, %c0_i64_90 : i64
    %326 = llvm.getelementptr %17[%325] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %327 = llvm.load %326 : !llvm.ptr -> i32
    cf.switch %327 : i32, [
      default: ^bb52,
      0: ^bb52,
      1: ^bb53,
      2: ^bb51
    ]
  ^bb48:  // 3 preds: ^bb36, ^bb36, ^bb50
    %c1_i32_91 = arith.constant 1 : i32
    llvm.store %c1_i32_91, %11 : i32, !llvm.ptr
    cf.br ^bb47
  ^bb49:  // pred: ^bb36
    %328 = llvm.load %7 : !llvm.ptr -> i32
    %c3_i32_92 = arith.constant 3 : i32
    %c31_i32_93 = arith.constant 31 : i32
    %329 = arith.cmpi ule, %c3_i32_92, %c31_i32_93 : i32
    %330 = scf.if %329 -> (i32) {
      %467 = arith.shli %328, %c3_i32_92 : i32
      scf.yield %467 : i32
    } else {
      %c0_i32_138 = arith.constant 0 : i32
      scf.yield %c0_i32_138 : i32
    }
    llvm.store %330, %12 : i32, !llvm.ptr
    %c0_i32_94 = arith.constant 0 : i32
    llvm.store %c0_i32_94, %11 : i32, !llvm.ptr
    %331 = llvm.load %9 : !llvm.ptr -> i32
    %332 = llvm.load %12 : !llvm.ptr -> i32
    %333 = arith.addi %331, %332 : i32
    llvm.store %333, %12 : i32, !llvm.ptr
    %c4_i64_95 = arith.constant 4 : i64
    %334 = arith.extui %333 : i32 to i64
    %335 = arith.addi %334, %c4_i64_95 : i64
    %336 = llvm.getelementptr %17[%335] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %337 = llvm.load %336 : !llvm.ptr -> i32
    %c0_i32_96 = arith.constant 0 : i32
    %338 = arith.cmpi ne, %337, %c0_i32_96 : i32
    cf.cond_br %338, ^bb47, ^bb50
  ^bb50:  // pred: ^bb49
    %339 = llvm.load %12 : !llvm.ptr -> i32
    %c0_i64_97 = arith.constant 0 : i64
    %340 = arith.extui %339 : i32 to i64
    %341 = arith.addi %340, %c0_i64_97 : i64
    %342 = llvm.getelementptr %17[%341] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %343 = llvm.load %342 : !llvm.ptr -> i32
    llvm.store %343, %7 : i32, !llvm.ptr
    cf.br ^bb48
  ^bb51:  // 3 preds: ^bb47, ^bb52, ^bb53
    %344 = llvm.load %3 : !llvm.ptr -> i32
    %345 = llvm.load %7 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %346 = arith.extui %344 : i32 to i64
    %347 = arith.addi %346, %c24_i64 : i64
    %348 = llvm.getelementptr %17[%347] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %345, %348 : i32, !llvm.ptr
    %349 = llvm.load %3 : !llvm.ptr -> i32
    %350 = llvm.load %10 : !llvm.ptr -> i32
    %c20_i64_98 = arith.constant 20 : i64
    %351 = arith.extui %349 : i32 to i64
    %352 = arith.addi %351, %c20_i64_98 : i64
    %353 = llvm.getelementptr %17[%352] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %350, %353 : i32, !llvm.ptr
    %354 = llvm.load %9 : !llvm.ptr -> i32
    %355 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i32 = arith.constant 20 : i32
    %356 = arith.addi %355, %c20_i32 : i32
    %c0_i64_99 = arith.constant 0 : i64
    %357 = arith.extui %356 : i32 to i64
    %358 = arith.addi %357, %c0_i64_99 : i64
    %359 = llvm.getelementptr %17[%358] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %360 = llvm.load %359 : !llvm.ptr -> i32
    %c3_i32_100 = arith.constant 3 : i32
    %c31_i32_101 = arith.constant 31 : i32
    %361 = arith.cmpi ule, %c3_i32_100, %c31_i32_101 : i32
    %362 = scf.if %361 -> (i32) {
      %467 = arith.shli %360, %c3_i32_100 : i32
      scf.yield %467 : i32
    } else {
      %c0_i32_138 = arith.constant 0 : i32
      scf.yield %c0_i32_138 : i32
    }
    %363 = arith.addi %354, %362 : i32
    llvm.store %363, %1 : i32, !llvm.ptr
    %c0_i64_102 = arith.constant 0 : i64
    %364 = arith.extui %363 : i32 to i64
    %365 = arith.addi %364, %c0_i64_102 : i64
    %366 = llvm.getelementptr %17[%365] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %367 = llvm.load %366 : !llvm.ptr -> i32
    %368 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i32_103 = arith.constant 12 : i32
    %369 = arith.addi %368, %c12_i32_103 : i32
    %370 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_104 = arith.constant 4 : i64
    %371 = arith.extui %370 : i32 to i64
    %372 = arith.addi %371, %c4_i64_104 : i64
    %373 = llvm.getelementptr %17[%372] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %374 = llvm.load %373 : !llvm.ptr -> i32
    %375 = arith.cmpi ult, %374, %31 : i32
    cf.cond_br %375, ^bb55, ^bb56
  ^bb52:  // 3 preds: ^bb47, ^bb47, ^bb54
    %c1_i32_105 = arith.constant 1 : i32
    llvm.store %c1_i32_105, %10 : i32, !llvm.ptr
    cf.br ^bb51
  ^bb53:  // pred: ^bb47
    %376 = llvm.load %7 : !llvm.ptr -> i32
    %c3_i32_106 = arith.constant 3 : i32
    %c31_i32_107 = arith.constant 31 : i32
    %377 = arith.cmpi ule, %c3_i32_106, %c31_i32_107 : i32
    %378 = scf.if %377 -> (i32) {
      %467 = arith.shli %376, %c3_i32_106 : i32
      scf.yield %467 : i32
    } else {
      %c0_i32_138 = arith.constant 0 : i32
      scf.yield %c0_i32_138 : i32
    }
    llvm.store %378, %11 : i32, !llvm.ptr
    %379 = llvm.load %9 : !llvm.ptr -> i32
    %380 = llvm.load %11 : !llvm.ptr -> i32
    %381 = arith.addi %379, %380 : i32
    llvm.store %381, %11 : i32, !llvm.ptr
    %c4_i64_108 = arith.constant 4 : i64
    %382 = arith.extui %381 : i32 to i64
    %383 = arith.addi %382, %c4_i64_108 : i64
    %384 = llvm.getelementptr %17[%383] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %385 = llvm.load %384 : !llvm.ptr -> i32
    %c0_i32_109 = arith.constant 0 : i32
    %386 = arith.cmpi ne, %385, %c0_i32_109 : i32
    cf.cond_br %386, ^bb51, ^bb54
  ^bb54:  // pred: ^bb53
    %387 = llvm.load %11 : !llvm.ptr -> i32
    %c0_i64_110 = arith.constant 0 : i64
    %388 = arith.extui %387 : i32 to i64
    %389 = arith.addi %388, %c0_i64_110 : i64
    %390 = llvm.getelementptr %17[%389] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %391 = llvm.load %390 : !llvm.ptr -> i32
    llvm.store %391, %7 : i32, !llvm.ptr
    cf.br ^bb52
  ^bb55:  // 2 preds: ^bb51, ^bb56
    %392 = llvm.getelementptr %30[%374] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %393 = llvm.load %392 : !llvm.ptr -> !llvm.ptr
    %394 = llvm.load %393 : !llvm.ptr -> i32
    %c0_i32_111 = arith.constant 0 : i32
    %395 = arith.cmpi eq, %394, %c0_i32_111 : i32
    cf.cond_br %395, ^bb58, ^bb57
  ^bb56:  // pred: ^bb51
    %c3_i32_112 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_112) : (i32) -> ()
    cf.br ^bb55
  ^bb57:  // 2 preds: ^bb55, ^bb58
    %396 = llvm.getelementptr %393[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %397 = llvm.getelementptr %393[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %398 = llvm.getelementptr %393[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %399 = llvm.load %396 : !llvm.ptr -> !llvm.ptr
    %400 = llvm.load %398 : !llvm.ptr -> !llvm.ptr
    %401 = llvm.load %399 : !llvm.ptr -> i32
    %c0_i32_113 = arith.constant 0 : i32
    %402 = arith.cmpi eq, %401, %c0_i32_113 : i32
    cf.cond_br %402, ^bb60, ^bb59
  ^bb58:  // pred: ^bb55
    %c4_i32_114 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_114) : (i32) -> ()
    cf.br ^bb57
  ^bb59:  // 2 preds: ^bb57, ^bb60
    %403 = llvm.load %397 : !llvm.ptr -> i32
    %404 = arith.cmpi ne, %25, %403 : i32
    cf.cond_br %404, ^bb62, ^bb61
  ^bb60:  // pred: ^bb57
    %c3_i32_115 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_115) : (i32) -> ()
    cf.br ^bb59
  ^bb61:  // 2 preds: ^bb59, ^bb62
    %405 = llvm.call %399(%400, %367, %369) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_116 = arith.constant 0 : i32
    %406 = arith.cmpi ne, %405, %c0_i32_116 : i32
    cf.cond_br %406, ^bb5, ^bb63
  ^bb62:  // pred: ^bb59
    %c5_i32_117 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_117) : (i32) -> ()
    cf.br ^bb61
  ^bb63:  // pred: ^bb61
    %407 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_118 = arith.constant 8 : i32
    %408 = arith.addi %407, %c8_i32_118 : i32
    llvm.store %408, %0 : i32, !llvm.ptr
    %409 = llvm.load %8 : !llvm.ptr -> i32
    %410 = llvm.load %6 : !llvm.ptr -> i32
    %c32_i32_119 = arith.constant 32 : i32
    %411 = arith.addi %410, %c32_i32_119 : i32
    llvm.store %411, %6 : i32, !llvm.ptr
    %412 = arith.cmpi eq, %409, %411 : i32
    %413 = arith.extui %412 : i1 to i32
    %c0_i32_120 = arith.constant 0 : i32
    %414 = arith.cmpi eq, %413, %c0_i32_120 : i32
    %415 = arith.extui %414 : i1 to i32
    %c0_i32_121 = arith.constant 0 : i32
    %416 = arith.cmpi ne, %415, %c0_i32_121 : i32
    cf.cond_br %416, ^bb35, ^bb64
  ^bb64:  // pred: ^bb63
    cf.br ^bb34
  ^bb65:  // pred: ^bb6
    %417 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i64_122 = arith.constant 32 : i64
    %418 = arith.extui %417 : i32 to i64
    %419 = arith.addi %418, %c32_i64_122 : i64
    %420 = llvm.getelementptr %17[%419] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %421 = llvm.load %420 : !llvm.ptr -> i32
    %422 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_123 = arith.constant 0 : i64
    %423 = arith.extui %422 : i32 to i64
    %424 = arith.addi %423, %c0_i64_123 : i64
    %425 = llvm.getelementptr %17[%424] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %426 = llvm.load %425 : !llvm.ptr -> i32
    %427 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i32_124 = arith.constant 3 : i32
    %c31_i32_125 = arith.constant 31 : i32
    %428 = arith.cmpi ule, %c3_i32_124, %c31_i32_125 : i32
    %429 = scf.if %428 -> (i32) {
      %467 = arith.shli %427, %c3_i32_124 : i32
      scf.yield %467 : i32
    } else {
      %c0_i32_138 = arith.constant 0 : i32
      scf.yield %c0_i32_138 : i32
    }
    %430 = arith.addi %426, %429 : i32
    llvm.store %430, %1 : i32, !llvm.ptr
    %c0_i64_126 = arith.constant 0 : i64
    %431 = arith.extui %430 : i32 to i64
    %432 = arith.addi %431, %c0_i64_126 : i64
    %433 = llvm.getelementptr %17[%432] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %434 = llvm.load %433 : !llvm.ptr -> i32
    %435 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_127 = arith.constant 4 : i64
    %436 = arith.extui %435 : i32 to i64
    %437 = arith.addi %436, %c4_i64_127 : i64
    %438 = llvm.getelementptr %17[%437] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %439 = llvm.load %438 : !llvm.ptr -> i32
    %440 = llvm.load %3 : !llvm.ptr -> i32
    %c36_i64_128 = arith.constant 36 : i64
    %441 = arith.extui %440 : i32 to i64
    %442 = arith.addi %441, %c36_i64_128 : i64
    %443 = llvm.getelementptr %17[%442] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %444 = llvm.load %443 : !llvm.ptr -> i32
    %c12_i64_129 = arith.constant 12 : i64
    %445 = arith.extui %444 : i32 to i64
    %446 = arith.addi %445, %c12_i64_129 : i64
    %447 = llvm.getelementptr %17[%446] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %448 = llvm.load %447 : !llvm.ptr -> i32
    %449 = arith.cmpi ult, %448, %33 : i32
    cf.cond_br %449, ^bb66, ^bb67
  ^bb66:  // 2 preds: ^bb65, ^bb67
    %450 = llvm.getelementptr %32[%448] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %451 = llvm.load %450 : !llvm.ptr -> !llvm.ptr
    %452 = llvm.load %451 : !llvm.ptr -> i32
    %c0_i32_130 = arith.constant 0 : i32
    %453 = arith.cmpi eq, %452, %c0_i32_130 : i32
    cf.cond_br %453, ^bb69, ^bb68
  ^bb67:  // pred: ^bb65
    %c3_i32_131 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_131) : (i32) -> ()
    cf.br ^bb66
  ^bb68:  // 2 preds: ^bb66, ^bb69
    %454 = llvm.getelementptr %451[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %455 = llvm.getelementptr %451[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %456 = llvm.getelementptr %451[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %457 = llvm.load %454 : !llvm.ptr -> !llvm.ptr
    %458 = llvm.load %456 : !llvm.ptr -> !llvm.ptr
    %459 = llvm.load %457 : !llvm.ptr -> i32
    %c0_i32_132 = arith.constant 0 : i32
    %460 = arith.cmpi eq, %459, %c0_i32_132 : i32
    cf.cond_br %460, ^bb71, ^bb70
  ^bb69:  // pred: ^bb66
    %c4_i32_133 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_133) : (i32) -> ()
    cf.br ^bb68
  ^bb70:  // 2 preds: ^bb68, ^bb71
    %461 = llvm.load %455 : !llvm.ptr -> i32
    %462 = arith.cmpi ne, %19, %461 : i32
    cf.cond_br %462, ^bb73, ^bb72
  ^bb71:  // pred: ^bb68
    %c3_i32_134 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_134) : (i32) -> ()
    cf.br ^bb70
  ^bb72:  // 2 preds: ^bb70, ^bb73
    %463 = llvm.call %457(%458, %421, %434, %439) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_135 = arith.constant 0 : i32
    %464 = arith.cmpi eq, %463, %c0_i32_135 : i32
    %465 = arith.extui %464 : i1 to i32
    %c0_i32_136 = arith.constant 0 : i32
    %466 = arith.cmpi ne, %465, %c0_i32_136 : i32
    cf.cond_br %466, ^bb4, ^bb74
  ^bb73:  // pred: ^bb70
    %c5_i32_137 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_137) : (i32) -> ()
    cf.br ^bb72
  ^bb74:  // pred: ^bb72
    cf.br ^bb5
  }
  func.func @f38(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c1_i64_4 = arith.constant 1 : i64
    %5 = llvm.alloca %c1_i64_4 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg6, %5 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_5 = arith.constant 1 : i64
    %6 = llvm.alloca %c1_i64_5 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i64_6 = arith.constant 1 : i64
    %7 = llvm.alloca %c1_i64_6 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i64_7 = arith.constant 1 : i64
    %8 = llvm.alloca %c1_i64_7 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i64_8 = arith.constant 1 : i64
    %9 = llvm.alloca %c1_i64_8 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %c1_i64_9 = arith.constant 1 : i64
    %10 = llvm.alloca %c1_i64_9 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %10 : i32, !llvm.ptr
    %c1_i64_10 = arith.constant 1 : i64
    %11 = llvm.alloca %c1_i64_10 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %11 : i32, !llvm.ptr
    %c1_i64_11 = arith.constant 1 : i64
    %12 = llvm.alloca %c1_i64_11 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %12 : i32, !llvm.ptr
    %13 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %13[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %16 = llvm.getelementptr %arg0[4] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %16 : !llvm.ptr -> i32
    %18 = llvm.getelementptr %arg0[56] : (!llvm.ptr) -> !llvm.ptr, i8
    %19 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %20 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %21 = llvm.load %19 : !llvm.ptr -> i32
    %22 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %23 = llvm.load %19 : !llvm.ptr -> i32
    %24 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %25 = llvm.load %24 : !llvm.ptr -> i32
    %26 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %27 = llvm.load %19 : !llvm.ptr -> i32
    %28 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %29 = llvm.load %19 : !llvm.ptr -> i32
    %30 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %31 = llvm.load %19 : !llvm.ptr -> i32
    %32 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %33 = llvm.load %19 : !llvm.ptr -> i32
    %34 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %35 = llvm.load %19 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %36 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_12 = arith.constant 0 : i32
    %37 = arith.cmpi ne, %36, %c0_i32_12 : i32
    cf.cond_br %37, ^bb4, ^bb5
  ^bb2(%38: i32):  // 7 preds: ^bb24, ^bb34, ^bb45, ^bb51, ^bb76, ^bb98, ^bb101
    return %38 : i32
  ^bb3:  // 2 preds: ^bb4, ^bb5
    %39 = llvm.load %7 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %40 = arith.andi %39, %c4_i32 : i32
    %c0_i32_13 = arith.constant 0 : i32
    %41 = arith.cmpi ne, %40, %c0_i32_13 : i32
    cf.cond_br %41, ^bb7, ^bb8
  ^bb4:  // pred: ^bb1
    %c43_i32 = arith.constant 43 : i32
    %c1114112_i32 = arith.constant 1114112 : i32
    %42 = llvm.load %0 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %43 = arith.extui %42 : i32 to i64
    %44 = arith.addi %43, %c28_i64 : i64
    %45 = llvm.getelementptr %15[%44] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %46 = llvm.load %45 : !llvm.ptr -> i32
    llvm.store %46, %7 : i32, !llvm.ptr
    %c1_i32 = arith.constant 1 : i32
    %47 = arith.andi %46, %c1_i32 : i32
    llvm.store %47, %1 : i32, !llvm.ptr
    %c0_i32_14 = arith.constant 0 : i32
    %48 = arith.cmpi ne, %47, %c0_i32_14 : i32
    %49 = arith.select %48, %c43_i32, %c1114112_i32 : i32
    llvm.store %49, %8 : i32, !llvm.ptr
    %50 = llvm.load %1 : !llvm.ptr -> i32
    %51 = llvm.load %5 : !llvm.ptr -> i32
    %52 = arith.addi %50, %51 : i32
    llvm.store %52, %6 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // pred: ^bb1
    %53 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i32_15 = arith.constant 1 : i32
    %54 = arith.addi %53, %c1_i32_15 : i32
    llvm.store %54, %6 : i32, !llvm.ptr
    %55 = llvm.load %0 : !llvm.ptr -> i32
    %c28_i64_16 = arith.constant 28 : i64
    %56 = arith.extui %55 : i32 to i64
    %57 = arith.addi %56, %c28_i64_16 : i64
    %58 = llvm.getelementptr %15[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %59 = llvm.load %58 : !llvm.ptr -> i32
    llvm.store %59, %7 : i32, !llvm.ptr
    %c45_i32 = arith.constant 45 : i32
    llvm.store %c45_i32, %8 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb6:  // 2 preds: ^bb8, ^bb9
    %60 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %61 = arith.extui %60 : i32 to i64
    %62 = arith.addi %61, %c0_i64 : i64
    %63 = llvm.getelementptr %15[%62] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %64 = llvm.load %63 : !llvm.ptr -> i32
    %c0_i32_17 = arith.constant 0 : i32
    %65 = arith.cmpi ne, %64, %c0_i32_17 : i32
    cf.cond_br %65, ^bb25, ^bb26
  ^bb7:  // pred: ^bb3
    %66 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %67 = arith.cmpi ult, %66, %c16_i32 : i32
    %68 = arith.extui %67 : i1 to i32
    %c0_i32_18 = arith.constant 0 : i32
    %69 = arith.cmpi ne, %68, %c0_i32_18 : i32
    cf.cond_br %69, ^bb10, ^bb11
  ^bb8:  // pred: ^bb3
    %c0_i32_19 = arith.constant 0 : i32
    llvm.store %c0_i32_19, %2 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb9:  // 4 preds: ^bb11, ^bb13, ^bb14, ^bb21
    %70 = llvm.load %1 : !llvm.ptr -> i32
    %71 = llvm.load %6 : !llvm.ptr -> i32
    %72 = arith.addi %70, %71 : i32
    llvm.store %72, %6 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb10:  // pred: ^bb7
    %73 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_20 = arith.constant 0 : i32
    %74 = arith.cmpi ne, %73, %c0_i32_20 : i32
    cf.cond_br %74, ^bb12, ^bb13
  ^bb11:  // pred: ^bb7
    %75 = llvm.load %2 : !llvm.ptr -> i32
    %76 = llvm.load %3 : !llvm.ptr -> i32
    %77 = call @f39(%arg0, %75, %76) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %77, %1 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb12:  // pred: ^bb10
    %78 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %79 = arith.andi %78, %c3_i32 : i32
    llvm.store %79, %9 : i32, !llvm.ptr
    %80 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32_21 = arith.constant 4 : i32
    %81 = arith.cmpi uge, %80, %c4_i32_21 : i32
    %82 = arith.extui %81 : i1 to i32
    %c0_i32_22 = arith.constant 0 : i32
    %83 = arith.cmpi ne, %82, %c0_i32_22 : i32
    cf.cond_br %83, ^bb15, ^bb16
  ^bb13:  // pred: ^bb10
    %c0_i32_23 = arith.constant 0 : i32
    llvm.store %c0_i32_23, %1 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb14:  // 2 preds: ^bb16, ^bb17
    %84 = llvm.load %9 : !llvm.ptr -> i32
    %c0_i32_24 = arith.constant 0 : i32
    %85 = arith.cmpi eq, %84, %c0_i32_24 : i32
    %86 = arith.extui %85 : i1 to i32
    %c0_i32_25 = arith.constant 0 : i32
    %87 = arith.cmpi ne, %86, %c0_i32_25 : i32
    cf.cond_br %87, ^bb9, ^bb20
  ^bb15:  // pred: ^bb12
    %88 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %89 = arith.andi %88, %c12_i32 : i32
    llvm.store %89, %11 : i32, !llvm.ptr
    %c0_i32_26 = arith.constant 0 : i32
    llvm.store %c0_i32_26, %1 : i32, !llvm.ptr
    %c0_i32_27 = arith.constant 0 : i32
    llvm.store %c0_i32_27, %10 : i32, !llvm.ptr
    cf.br ^bb18
  ^bb16:  // pred: ^bb12
    %c0_i32_28 = arith.constant 0 : i32
    llvm.store %c0_i32_28, %1 : i32, !llvm.ptr
    %c0_i32_29 = arith.constant 0 : i32
    llvm.store %c0_i32_29, %10 : i32, !llvm.ptr
    cf.br ^bb14
  ^bb17:  // pred: ^bb19
    cf.br ^bb14
  ^bb18:  // 2 preds: ^bb15, ^bb18
    %90 = llvm.load %1 : !llvm.ptr -> i32
    %91 = llvm.load %2 : !llvm.ptr -> i32
    %92 = llvm.load %10 : !llvm.ptr -> i32
    %93 = arith.addi %91, %92 : i32
    llvm.store %93, %12 : i32, !llvm.ptr
    %c0_i64_30 = arith.constant 0 : i64
    %94 = arith.extui %93 : i32 to i64
    %95 = arith.addi %94, %c0_i64_30 : i64
    %96 = llvm.getelementptr %15[%95] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %97 = llvm.load %96 : !llvm.ptr -> i8
    %98 = arith.extsi %97 : i8 to i32
    %c-65_i32 = arith.constant -65 : i32
    %99 = arith.cmpi sgt, %98, %c-65_i32 : i32
    %100 = arith.extui %99 : i1 to i32
    %101 = arith.addi %90, %100 : i32
    %102 = llvm.load %12 : !llvm.ptr -> i32
    %c1_i32_31 = arith.constant 1 : i32
    %103 = arith.addi %102, %c1_i32_31 : i32
    %c0_i64_32 = arith.constant 0 : i64
    %104 = arith.extui %103 : i32 to i64
    %105 = arith.addi %104, %c0_i64_32 : i64
    %106 = llvm.getelementptr %15[%105] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %107 = llvm.load %106 : !llvm.ptr -> i8
    %108 = arith.extsi %107 : i8 to i32
    %c-65_i32_33 = arith.constant -65 : i32
    %109 = arith.cmpi sgt, %108, %c-65_i32_33 : i32
    %110 = arith.extui %109 : i1 to i32
    %111 = arith.addi %101, %110 : i32
    %112 = llvm.load %12 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %113 = arith.addi %112, %c2_i32 : i32
    %c0_i64_34 = arith.constant 0 : i64
    %114 = arith.extui %113 : i32 to i64
    %115 = arith.addi %114, %c0_i64_34 : i64
    %116 = llvm.getelementptr %15[%115] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %117 = llvm.load %116 : !llvm.ptr -> i8
    %118 = arith.extsi %117 : i8 to i32
    %c-65_i32_35 = arith.constant -65 : i32
    %119 = arith.cmpi sgt, %118, %c-65_i32_35 : i32
    %120 = arith.extui %119 : i1 to i32
    %121 = arith.addi %111, %120 : i32
    %122 = llvm.load %12 : !llvm.ptr -> i32
    %c3_i32_36 = arith.constant 3 : i32
    %123 = arith.addi %122, %c3_i32_36 : i32
    %c0_i64_37 = arith.constant 0 : i64
    %124 = arith.extui %123 : i32 to i64
    %125 = arith.addi %124, %c0_i64_37 : i64
    %126 = llvm.getelementptr %15[%125] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %127 = llvm.load %126 : !llvm.ptr -> i8
    %128 = arith.extsi %127 : i8 to i32
    %c-65_i32_38 = arith.constant -65 : i32
    %129 = arith.cmpi sgt, %128, %c-65_i32_38 : i32
    %130 = arith.extui %129 : i1 to i32
    %131 = arith.addi %121, %130 : i32
    llvm.store %131, %1 : i32, !llvm.ptr
    %132 = llvm.load %11 : !llvm.ptr -> i32
    %133 = llvm.load %10 : !llvm.ptr -> i32
    %c4_i32_39 = arith.constant 4 : i32
    %134 = arith.addi %133, %c4_i32_39 : i32
    llvm.store %134, %10 : i32, !llvm.ptr
    %135 = arith.cmpi eq, %132, %134 : i32
    %136 = arith.extui %135 : i1 to i32
    %c0_i32_40 = arith.constant 0 : i32
    %137 = arith.cmpi eq, %136, %c0_i32_40 : i32
    %138 = arith.extui %137 : i1 to i32
    %c0_i32_41 = arith.constant 0 : i32
    %139 = arith.cmpi ne, %138, %c0_i32_41 : i32
    cf.cond_br %139, ^bb18, ^bb19
  ^bb19:  // pred: ^bb18
    cf.br ^bb17
  ^bb20:  // pred: ^bb14
    %140 = llvm.load %2 : !llvm.ptr -> i32
    %141 = llvm.load %10 : !llvm.ptr -> i32
    %142 = arith.addi %140, %141 : i32
    llvm.store %142, %12 : i32, !llvm.ptr
    cf.br ^bb22
  ^bb21:  // pred: ^bb23
    cf.br ^bb9
  ^bb22:  // 2 preds: ^bb20, ^bb22
    %143 = llvm.load %1 : !llvm.ptr -> i32
    %144 = llvm.load %12 : !llvm.ptr -> i32
    %c0_i64_42 = arith.constant 0 : i64
    %145 = arith.extui %144 : i32 to i64
    %146 = arith.addi %145, %c0_i64_42 : i64
    %147 = llvm.getelementptr %15[%146] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %148 = llvm.load %147 : !llvm.ptr -> i8
    %149 = arith.extsi %148 : i8 to i32
    %c-65_i32_43 = arith.constant -65 : i32
    %150 = arith.cmpi sgt, %149, %c-65_i32_43 : i32
    %151 = arith.extui %150 : i1 to i32
    %152 = arith.addi %143, %151 : i32
    llvm.store %152, %1 : i32, !llvm.ptr
    %153 = llvm.load %12 : !llvm.ptr -> i32
    %c1_i32_44 = arith.constant 1 : i32
    %154 = arith.addi %153, %c1_i32_44 : i32
    llvm.store %154, %12 : i32, !llvm.ptr
    %155 = llvm.load %9 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %156 = arith.addi %155, %c-1_i32 : i32
    llvm.store %156, %9 : i32, !llvm.ptr
    %c0_i32_45 = arith.constant 0 : i32
    %157 = arith.cmpi ne, %156, %c0_i32_45 : i32
    cf.cond_br %157, ^bb22, ^bb23
  ^bb23:  // pred: ^bb22
    cf.br ^bb21
  ^bb24:  // 7 preds: ^bb26, ^bb37, ^bb48, ^bb69, ^bb71, ^bb75, ^bb95
    %158 = llvm.load %1 : !llvm.ptr -> i32
    cf.br ^bb2(%158 : i32)
  ^bb25:  // pred: ^bb6
    %159 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %160 = arith.extui %159 : i32 to i64
    %161 = arith.addi %160, %c4_i64 : i64
    %162 = llvm.getelementptr %15[%161] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %163 = llvm.load %162 : !llvm.ptr -> i32
    llvm.store %163, %9 : i32, !llvm.ptr
    %164 = llvm.load %6 : !llvm.ptr -> i32
    %165 = arith.cmpi ugt, %163, %164 : i32
    %166 = arith.extui %165 : i1 to i32
    %c0_i32_46 = arith.constant 0 : i32
    %167 = arith.cmpi ne, %166, %c0_i32_46 : i32
    cf.cond_br %167, ^bb36, ^bb37
  ^bb26:  // pred: ^bb6
    %c1_i32_47 = arith.constant 1 : i32
    llvm.store %c1_i32_47, %1 : i32, !llvm.ptr
    %168 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %169 = arith.extui %168 : i32 to i64
    %170 = arith.addi %169, %c20_i64 : i64
    %171 = llvm.getelementptr %15[%170] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %172 = llvm.load %171 : !llvm.ptr -> i32
    llvm.store %172, %12 : i32, !llvm.ptr
    %173 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %174 = arith.extui %173 : i32 to i64
    %175 = arith.addi %174, %c24_i64 : i64
    %176 = llvm.getelementptr %15[%175] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %177 = llvm.load %176 : !llvm.ptr -> i32
    llvm.store %177, %10 : i32, !llvm.ptr
    %178 = llvm.load %8 : !llvm.ptr -> i32
    %179 = llvm.load %2 : !llvm.ptr -> i32
    %180 = llvm.load %3 : !llvm.ptr -> i32
    %181 = call @f40(%arg0, %172, %177, %178, %179, %180) : (!llvm.ptr, i32, i32, i32, i32, i32) -> i32
    %c0_i32_48 = arith.constant 0 : i32
    %182 = arith.cmpi ne, %181, %c0_i32_48 : i32
    cf.cond_br %182, ^bb24, ^bb27
  ^bb27:  // pred: ^bb26
    %183 = llvm.load %12 : !llvm.ptr -> i32
    %184 = llvm.load %4 : !llvm.ptr -> i32
    %185 = llvm.load %5 : !llvm.ptr -> i32
    %186 = llvm.load %10 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %187 = arith.extui %186 : i32 to i64
    %188 = arith.addi %187, %c12_i64 : i64
    %189 = llvm.getelementptr %15[%188] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %190 = llvm.load %189 : !llvm.ptr -> i32
    %191 = arith.cmpi ult, %190, %21 : i32
    cf.cond_br %191, ^bb28, ^bb29
  ^bb28:  // 2 preds: ^bb27, ^bb29
    %192 = llvm.getelementptr %20[%190] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %193 = llvm.load %192 : !llvm.ptr -> !llvm.ptr
    %194 = llvm.load %193 : !llvm.ptr -> i32
    %c0_i32_49 = arith.constant 0 : i32
    %195 = arith.cmpi eq, %194, %c0_i32_49 : i32
    cf.cond_br %195, ^bb31, ^bb30
  ^bb29:  // pred: ^bb27
    %c3_i32_50 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_50) : (i32) -> ()
    cf.br ^bb28
  ^bb30:  // 2 preds: ^bb28, ^bb31
    %196 = llvm.getelementptr %193[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %197 = llvm.getelementptr %193[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %198 = llvm.getelementptr %193[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %199 = llvm.load %196 : !llvm.ptr -> !llvm.ptr
    %200 = llvm.load %198 : !llvm.ptr -> !llvm.ptr
    %201 = llvm.load %199 : !llvm.ptr -> i32
    %c0_i32_51 = arith.constant 0 : i32
    %202 = arith.cmpi eq, %201, %c0_i32_51 : i32
    cf.cond_br %202, ^bb33, ^bb32
  ^bb31:  // pred: ^bb28
    %c4_i32_52 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_52) : (i32) -> ()
    cf.br ^bb30
  ^bb32:  // 2 preds: ^bb30, ^bb33
    %203 = llvm.load %197 : !llvm.ptr -> i32
    %204 = arith.cmpi ne, %17, %203 : i32
    cf.cond_br %204, ^bb35, ^bb34
  ^bb33:  // pred: ^bb30
    %c3_i32_53 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_53) : (i32) -> ()
    cf.br ^bb32
  ^bb34:  // 2 preds: ^bb32, ^bb35
    %205 = llvm.call %199(%200, %183, %184, %185) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%205 : i32)
  ^bb35:  // pred: ^bb32
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb34
  ^bb36:  // pred: ^bb25
    %206 = llvm.load %7 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %207 = arith.andi %206, %c8_i32 : i32
    %c0_i32_54 = arith.constant 0 : i32
    %208 = arith.cmpi eq, %207, %c0_i32_54 : i32
    %209 = arith.extui %208 : i1 to i32
    %c0_i32_55 = arith.constant 0 : i32
    %210 = arith.cmpi ne, %209, %c0_i32_55 : i32
    cf.cond_br %210, ^bb47, ^bb48
  ^bb37:  // pred: ^bb25
    %c1_i32_56 = arith.constant 1 : i32
    llvm.store %c1_i32_56, %1 : i32, !llvm.ptr
    %211 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64_57 = arith.constant 20 : i64
    %212 = arith.extui %211 : i32 to i64
    %213 = arith.addi %212, %c20_i64_57 : i64
    %214 = llvm.getelementptr %15[%213] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %215 = llvm.load %214 : !llvm.ptr -> i32
    llvm.store %215, %12 : i32, !llvm.ptr
    %216 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64_58 = arith.constant 24 : i64
    %217 = arith.extui %216 : i32 to i64
    %218 = arith.addi %217, %c24_i64_58 : i64
    %219 = llvm.getelementptr %15[%218] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %220 = llvm.load %219 : !llvm.ptr -> i32
    llvm.store %220, %10 : i32, !llvm.ptr
    %221 = llvm.load %8 : !llvm.ptr -> i32
    %222 = llvm.load %2 : !llvm.ptr -> i32
    %223 = llvm.load %3 : !llvm.ptr -> i32
    %224 = call @f40(%arg0, %215, %220, %221, %222, %223) : (!llvm.ptr, i32, i32, i32, i32, i32) -> i32
    %c0_i32_59 = arith.constant 0 : i32
    %225 = arith.cmpi ne, %224, %c0_i32_59 : i32
    cf.cond_br %225, ^bb24, ^bb38
  ^bb38:  // pred: ^bb37
    %226 = llvm.load %12 : !llvm.ptr -> i32
    %227 = llvm.load %4 : !llvm.ptr -> i32
    %228 = llvm.load %5 : !llvm.ptr -> i32
    %229 = llvm.load %10 : !llvm.ptr -> i32
    %c12_i64_60 = arith.constant 12 : i64
    %230 = arith.extui %229 : i32 to i64
    %231 = arith.addi %230, %c12_i64_60 : i64
    %232 = llvm.getelementptr %15[%231] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %233 = llvm.load %232 : !llvm.ptr -> i32
    %234 = arith.cmpi ult, %233, %23 : i32
    cf.cond_br %234, ^bb39, ^bb40
  ^bb39:  // 2 preds: ^bb38, ^bb40
    %235 = llvm.getelementptr %22[%233] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %236 = llvm.load %235 : !llvm.ptr -> !llvm.ptr
    %237 = llvm.load %236 : !llvm.ptr -> i32
    %c0_i32_61 = arith.constant 0 : i32
    %238 = arith.cmpi eq, %237, %c0_i32_61 : i32
    cf.cond_br %238, ^bb42, ^bb41
  ^bb40:  // pred: ^bb38
    %c3_i32_62 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_62) : (i32) -> ()
    cf.br ^bb39
  ^bb41:  // 2 preds: ^bb39, ^bb42
    %239 = llvm.getelementptr %236[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %240 = llvm.getelementptr %236[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %241 = llvm.getelementptr %236[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %242 = llvm.load %239 : !llvm.ptr -> !llvm.ptr
    %243 = llvm.load %241 : !llvm.ptr -> !llvm.ptr
    %244 = llvm.load %242 : !llvm.ptr -> i32
    %c0_i32_63 = arith.constant 0 : i32
    %245 = arith.cmpi eq, %244, %c0_i32_63 : i32
    cf.cond_br %245, ^bb44, ^bb43
  ^bb42:  // pred: ^bb39
    %c4_i32_64 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_64) : (i32) -> ()
    cf.br ^bb41
  ^bb43:  // 2 preds: ^bb41, ^bb44
    %246 = llvm.load %240 : !llvm.ptr -> i32
    %247 = arith.cmpi ne, %17, %246 : i32
    cf.cond_br %247, ^bb46, ^bb45
  ^bb44:  // pred: ^bb41
    %c3_i32_65 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_65) : (i32) -> ()
    cf.br ^bb43
  ^bb45:  // 2 preds: ^bb43, ^bb46
    %248 = llvm.call %242(%243, %226, %227, %228) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%248 : i32)
  ^bb46:  // pred: ^bb43
    %c5_i32_66 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_66) : (i32) -> ()
    cf.br ^bb45
  ^bb47:  // pred: ^bb36
    %249 = llvm.load %9 : !llvm.ptr -> i32
    %250 = llvm.load %6 : !llvm.ptr -> i32
    %251 = arith.subi %249, %250 : i32
    llvm.store %251, %6 : i32, !llvm.ptr
    %252 = llvm.load %0 : !llvm.ptr -> i32
    %c32_i64 = arith.constant 32 : i64
    %253 = arith.extui %252 : i32 to i64
    %254 = arith.addi %253, %c32_i64 : i64
    %255 = llvm.getelementptr %15[%254] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %256 = llvm.load %255 : !llvm.ptr -> i8
    %257 = arith.extui %256 : i8 to i32
    llvm.store %257, %1 : i32, !llvm.ptr
    cf.switch %257 : i32, [
      default: ^bb72,
      0: ^bb72,
      1: ^bb74,
      2: ^bb73,
      3: ^bb74
    ]
  ^bb48:  // pred: ^bb36
    %258 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %259 = arith.extui %258 : i32 to i64
    %260 = arith.addi %259, %c16_i64 : i64
    %261 = llvm.getelementptr %15[%260] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %262 = llvm.load %261 : !llvm.ptr -> i32
    llvm.store %262, %11 : i32, !llvm.ptr
    %263 = llvm.load %0 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %c16_i64_67 = arith.constant 16 : i64
    %264 = arith.extui %263 : i32 to i64
    %265 = arith.addi %264, %c16_i64_67 : i64
    %266 = llvm.getelementptr %15[%265] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %c48_i32, %266 : i32, !llvm.ptr
    %267 = llvm.load %0 : !llvm.ptr -> i32
    %c32_i64_68 = arith.constant 32 : i64
    %268 = arith.extui %267 : i32 to i64
    %269 = arith.addi %268, %c32_i64_68 : i64
    %270 = llvm.getelementptr %15[%269] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %271 = llvm.load %270 : !llvm.ptr -> i8
    %272 = arith.extui %271 : i8 to i32
    llvm.store %272, %7 : i32, !llvm.ptr
    %c1_i32_69 = arith.constant 1 : i32
    llvm.store %c1_i32_69, %1 : i32, !llvm.ptr
    %273 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_70 = arith.constant 1 : i32
    %c32_i64_71 = arith.constant 32 : i64
    %274 = arith.extui %273 : i32 to i64
    %275 = arith.addi %274, %c32_i64_71 : i64
    %276 = llvm.getelementptr %15[%275] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %277 = arith.trunci %c1_i32_70 : i32 to i8
    llvm.store %277, %276 : i8, !llvm.ptr
    %278 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64_72 = arith.constant 20 : i64
    %279 = arith.extui %278 : i32 to i64
    %280 = arith.addi %279, %c20_i64_72 : i64
    %281 = llvm.getelementptr %15[%280] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %282 = llvm.load %281 : !llvm.ptr -> i32
    llvm.store %282, %12 : i32, !llvm.ptr
    %283 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64_73 = arith.constant 24 : i64
    %284 = arith.extui %283 : i32 to i64
    %285 = arith.addi %284, %c24_i64_73 : i64
    %286 = llvm.getelementptr %15[%285] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %287 = llvm.load %286 : !llvm.ptr -> i32
    llvm.store %287, %10 : i32, !llvm.ptr
    %288 = llvm.load %8 : !llvm.ptr -> i32
    %289 = llvm.load %2 : !llvm.ptr -> i32
    %290 = llvm.load %3 : !llvm.ptr -> i32
    %291 = call @f40(%arg0, %282, %287, %288, %289, %290) : (!llvm.ptr, i32, i32, i32, i32, i32) -> i32
    %c0_i32_74 = arith.constant 0 : i32
    %292 = arith.cmpi ne, %291, %c0_i32_74 : i32
    cf.cond_br %292, ^bb24, ^bb49
  ^bb49:  // pred: ^bb48
    %293 = llvm.load %9 : !llvm.ptr -> i32
    %294 = llvm.load %6 : !llvm.ptr -> i32
    %295 = arith.subi %293, %294 : i32
    %c1_i32_75 = arith.constant 1 : i32
    %296 = arith.addi %295, %c1_i32_75 : i32
    llvm.store %296, %1 : i32, !llvm.ptr
    cf.br ^bb52
  ^bb50:  // pred: ^bb52
    %c1_i32_76 = arith.constant 1 : i32
    llvm.store %c1_i32_76, %1 : i32, !llvm.ptr
    %297 = llvm.load %12 : !llvm.ptr -> i32
    %298 = llvm.load %4 : !llvm.ptr -> i32
    %299 = llvm.load %5 : !llvm.ptr -> i32
    %300 = llvm.load %10 : !llvm.ptr -> i32
    %c12_i64_77 = arith.constant 12 : i64
    %301 = arith.extui %300 : i32 to i64
    %302 = arith.addi %301, %c12_i64_77 : i64
    %303 = llvm.getelementptr %15[%302] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %304 = llvm.load %303 : !llvm.ptr -> i32
    %305 = arith.cmpi ult, %304, %29 : i32
    cf.cond_br %305, ^bb63, ^bb64
  ^bb51:  // pred: ^bb62
    %c1_i32_78 = arith.constant 1 : i32
    cf.br ^bb2(%c1_i32_78 : i32)
  ^bb52:  // 2 preds: ^bb49, ^bb60
    %306 = llvm.load %1 : !llvm.ptr -> i32
    %c-1_i32_79 = arith.constant -1 : i32
    %307 = arith.addi %306, %c-1_i32_79 : i32
    llvm.store %307, %1 : i32, !llvm.ptr
    %c0_i32_80 = arith.constant 0 : i32
    %308 = arith.cmpi eq, %307, %c0_i32_80 : i32
    %309 = arith.extui %308 : i1 to i32
    %c0_i32_81 = arith.constant 0 : i32
    %310 = arith.cmpi ne, %309, %c0_i32_81 : i32
    cf.cond_br %310, ^bb50, ^bb53
  ^bb53:  // pred: ^bb52
    %311 = llvm.load %12 : !llvm.ptr -> i32
    %c48_i32_82 = arith.constant 48 : i32
    %312 = llvm.load %10 : !llvm.ptr -> i32
    %c16_i64_83 = arith.constant 16 : i64
    %313 = arith.extui %312 : i32 to i64
    %314 = arith.addi %313, %c16_i64_83 : i64
    %315 = llvm.getelementptr %15[%314] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %316 = llvm.load %315 : !llvm.ptr -> i32
    %317 = arith.cmpi ult, %316, %27 : i32
    cf.cond_br %317, ^bb54, ^bb55
  ^bb54:  // 2 preds: ^bb53, ^bb55
    %318 = llvm.getelementptr %26[%316] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %319 = llvm.load %318 : !llvm.ptr -> !llvm.ptr
    %320 = llvm.load %319 : !llvm.ptr -> i32
    %c0_i32_84 = arith.constant 0 : i32
    %321 = arith.cmpi eq, %320, %c0_i32_84 : i32
    cf.cond_br %321, ^bb57, ^bb56
  ^bb55:  // pred: ^bb53
    %c3_i32_85 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_85) : (i32) -> ()
    cf.br ^bb54
  ^bb56:  // 2 preds: ^bb54, ^bb57
    %322 = llvm.getelementptr %319[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %323 = llvm.getelementptr %319[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %324 = llvm.getelementptr %319[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %325 = llvm.load %322 : !llvm.ptr -> !llvm.ptr
    %326 = llvm.load %324 : !llvm.ptr -> !llvm.ptr
    %327 = llvm.load %325 : !llvm.ptr -> i32
    %c0_i32_86 = arith.constant 0 : i32
    %328 = arith.cmpi eq, %327, %c0_i32_86 : i32
    cf.cond_br %328, ^bb59, ^bb58
  ^bb57:  // pred: ^bb54
    %c4_i32_87 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_87) : (i32) -> ()
    cf.br ^bb56
  ^bb58:  // 2 preds: ^bb56, ^bb59
    %329 = llvm.load %323 : !llvm.ptr -> i32
    %330 = arith.cmpi ne, %25, %329 : i32
    cf.cond_br %330, ^bb61, ^bb60
  ^bb59:  // pred: ^bb56
    %c3_i32_88 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_88) : (i32) -> ()
    cf.br ^bb58
  ^bb60:  // 2 preds: ^bb58, ^bb61
    %331 = llvm.call %325(%326, %311, %c48_i32_82) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_89 = arith.constant 0 : i32
    %332 = arith.cmpi eq, %331, %c0_i32_89 : i32
    %333 = arith.extui %332 : i1 to i32
    %c0_i32_90 = arith.constant 0 : i32
    %334 = arith.cmpi ne, %333, %c0_i32_90 : i32
    cf.cond_br %334, ^bb52, ^bb62
  ^bb61:  // pred: ^bb58
    %c5_i32_91 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_91) : (i32) -> ()
    cf.br ^bb60
  ^bb62:  // pred: ^bb60
    cf.br ^bb51
  ^bb63:  // 2 preds: ^bb50, ^bb64
    %335 = llvm.getelementptr %28[%304] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %336 = llvm.load %335 : !llvm.ptr -> !llvm.ptr
    %337 = llvm.load %336 : !llvm.ptr -> i32
    %c0_i32_92 = arith.constant 0 : i32
    %338 = arith.cmpi eq, %337, %c0_i32_92 : i32
    cf.cond_br %338, ^bb66, ^bb65
  ^bb64:  // pred: ^bb50
    %c3_i32_93 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_93) : (i32) -> ()
    cf.br ^bb63
  ^bb65:  // 2 preds: ^bb63, ^bb66
    %339 = llvm.getelementptr %336[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %340 = llvm.getelementptr %336[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %341 = llvm.getelementptr %336[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %342 = llvm.load %339 : !llvm.ptr -> !llvm.ptr
    %343 = llvm.load %341 : !llvm.ptr -> !llvm.ptr
    %344 = llvm.load %342 : !llvm.ptr -> i32
    %c0_i32_94 = arith.constant 0 : i32
    %345 = arith.cmpi eq, %344, %c0_i32_94 : i32
    cf.cond_br %345, ^bb68, ^bb67
  ^bb66:  // pred: ^bb63
    %c4_i32_95 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_95) : (i32) -> ()
    cf.br ^bb65
  ^bb67:  // 2 preds: ^bb65, ^bb68
    %346 = llvm.load %340 : !llvm.ptr -> i32
    %347 = arith.cmpi ne, %17, %346 : i32
    cf.cond_br %347, ^bb70, ^bb69
  ^bb68:  // pred: ^bb65
    %c3_i32_96 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_96) : (i32) -> ()
    cf.br ^bb67
  ^bb69:  // 2 preds: ^bb67, ^bb70
    %348 = llvm.call %342(%343, %297, %298, %299) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_97 = arith.constant 0 : i32
    %349 = arith.cmpi ne, %348, %c0_i32_97 : i32
    cf.cond_br %349, ^bb24, ^bb71
  ^bb70:  // pred: ^bb67
    %c5_i32_98 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_98) : (i32) -> ()
    cf.br ^bb69
  ^bb71:  // pred: ^bb69
    %350 = llvm.load %0 : !llvm.ptr -> i32
    %351 = llvm.load %7 : !llvm.ptr -> i32
    %c32_i64_99 = arith.constant 32 : i64
    %352 = arith.extui %350 : i32 to i64
    %353 = arith.addi %352, %c32_i64_99 : i64
    %354 = llvm.getelementptr %15[%353] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %355 = arith.trunci %351 : i32 to i8
    llvm.store %355, %354 : i8, !llvm.ptr
    %356 = llvm.load %0 : !llvm.ptr -> i32
    %357 = llvm.load %11 : !llvm.ptr -> i32
    %c16_i64_100 = arith.constant 16 : i64
    %358 = arith.extui %356 : i32 to i64
    %359 = arith.addi %358, %c16_i64_100 : i64
    %360 = llvm.getelementptr %15[%359] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %357, %360 : i32, !llvm.ptr
    %c0_i32_101 = arith.constant 0 : i32
    llvm.store %c0_i32_101, %1 : i32, !llvm.ptr
    cf.br ^bb24
  ^bb72:  // 4 preds: ^bb47, ^bb47, ^bb73, ^bb74
    %361 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_102 = arith.constant 1 : i32
    %362 = arith.addi %361, %c1_i32_102 : i32
    llvm.store %362, %1 : i32, !llvm.ptr
    %363 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i64_103 = arith.constant 16 : i64
    %364 = arith.extui %363 : i32 to i64
    %365 = arith.addi %364, %c16_i64_103 : i64
    %366 = llvm.getelementptr %15[%365] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %367 = llvm.load %366 : !llvm.ptr -> i32
    llvm.store %367, %9 : i32, !llvm.ptr
    %368 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64_104 = arith.constant 24 : i64
    %369 = arith.extui %368 : i32 to i64
    %370 = arith.addi %369, %c24_i64_104 : i64
    %371 = llvm.getelementptr %15[%370] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %372 = llvm.load %371 : !llvm.ptr -> i32
    llvm.store %372, %12 : i32, !llvm.ptr
    %373 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64_105 = arith.constant 20 : i64
    %374 = arith.extui %373 : i32 to i64
    %375 = arith.addi %374, %c20_i64_105 : i64
    %376 = llvm.getelementptr %15[%375] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %377 = llvm.load %376 : !llvm.ptr -> i32
    llvm.store %377, %10 : i32, !llvm.ptr
    cf.br ^bb77
  ^bb73:  // pred: ^bb47
    %378 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i32_106 = arith.constant 1 : i32
    %c31_i32 = arith.constant 31 : i32
    %379 = arith.cmpi ule, %c1_i32_106, %c31_i32 : i32
    %380 = scf.if %379 -> (i32) {
      %490 = arith.shrui %378, %c1_i32_106 : i32
      scf.yield %490 : i32
    } else {
      %c0_i32_148 = arith.constant 0 : i32
      scf.yield %c0_i32_148 : i32
    }
    llvm.store %380, %1 : i32, !llvm.ptr
    %381 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i32_107 = arith.constant 1 : i32
    %382 = arith.addi %381, %c1_i32_107 : i32
    %c1_i32_108 = arith.constant 1 : i32
    %c31_i32_109 = arith.constant 31 : i32
    %383 = arith.cmpi ule, %c1_i32_108, %c31_i32_109 : i32
    %384 = scf.if %383 -> (i32) {
      %490 = arith.shrui %382, %c1_i32_108 : i32
      scf.yield %490 : i32
    } else {
      %c0_i32_148 = arith.constant 0 : i32
      scf.yield %c0_i32_148 : i32
    }
    llvm.store %384, %6 : i32, !llvm.ptr
    cf.br ^bb72
  ^bb74:  // 2 preds: ^bb47, ^bb47
    %385 = llvm.load %6 : !llvm.ptr -> i32
    llvm.store %385, %1 : i32, !llvm.ptr
    %c0_i32_110 = arith.constant 0 : i32
    llvm.store %c0_i32_110, %6 : i32, !llvm.ptr
    cf.br ^bb72
  ^bb75:  // pred: ^bb77
    %c1_i32_111 = arith.constant 1 : i32
    llvm.store %c1_i32_111, %1 : i32, !llvm.ptr
    %386 = llvm.load %10 : !llvm.ptr -> i32
    %387 = llvm.load %12 : !llvm.ptr -> i32
    %388 = llvm.load %8 : !llvm.ptr -> i32
    %389 = llvm.load %2 : !llvm.ptr -> i32
    %390 = llvm.load %3 : !llvm.ptr -> i32
    %391 = call @f40(%arg0, %386, %387, %388, %389, %390) : (!llvm.ptr, i32, i32, i32, i32, i32) -> i32
    %c0_i32_112 = arith.constant 0 : i32
    %392 = arith.cmpi ne, %391, %c0_i32_112 : i32
    cf.cond_br %392, ^bb24, ^bb88
  ^bb76:  // pred: ^bb87
    %c1_i32_113 = arith.constant 1 : i32
    cf.br ^bb2(%c1_i32_113 : i32)
  ^bb77:  // 2 preds: ^bb72, ^bb85
    %393 = llvm.load %1 : !llvm.ptr -> i32
    %c-1_i32_114 = arith.constant -1 : i32
    %394 = arith.addi %393, %c-1_i32_114 : i32
    llvm.store %394, %1 : i32, !llvm.ptr
    %c0_i32_115 = arith.constant 0 : i32
    %395 = arith.cmpi eq, %394, %c0_i32_115 : i32
    %396 = arith.extui %395 : i1 to i32
    %c0_i32_116 = arith.constant 0 : i32
    %397 = arith.cmpi ne, %396, %c0_i32_116 : i32
    cf.cond_br %397, ^bb75, ^bb78
  ^bb78:  // pred: ^bb77
    %398 = llvm.load %10 : !llvm.ptr -> i32
    %399 = llvm.load %9 : !llvm.ptr -> i32
    %400 = llvm.load %12 : !llvm.ptr -> i32
    %c16_i64_117 = arith.constant 16 : i64
    %401 = arith.extui %400 : i32 to i64
    %402 = arith.addi %401, %c16_i64_117 : i64
    %403 = llvm.getelementptr %15[%402] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %404 = llvm.load %403 : !llvm.ptr -> i32
    %405 = arith.cmpi ult, %404, %31 : i32
    cf.cond_br %405, ^bb79, ^bb80
  ^bb79:  // 2 preds: ^bb78, ^bb80
    %406 = llvm.getelementptr %30[%404] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %407 = llvm.load %406 : !llvm.ptr -> !llvm.ptr
    %408 = llvm.load %407 : !llvm.ptr -> i32
    %c0_i32_118 = arith.constant 0 : i32
    %409 = arith.cmpi eq, %408, %c0_i32_118 : i32
    cf.cond_br %409, ^bb82, ^bb81
  ^bb80:  // pred: ^bb78
    %c3_i32_119 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_119) : (i32) -> ()
    cf.br ^bb79
  ^bb81:  // 2 preds: ^bb79, ^bb82
    %410 = llvm.getelementptr %407[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %411 = llvm.getelementptr %407[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %412 = llvm.getelementptr %407[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %413 = llvm.load %410 : !llvm.ptr -> !llvm.ptr
    %414 = llvm.load %412 : !llvm.ptr -> !llvm.ptr
    %415 = llvm.load %413 : !llvm.ptr -> i32
    %c0_i32_120 = arith.constant 0 : i32
    %416 = arith.cmpi eq, %415, %c0_i32_120 : i32
    cf.cond_br %416, ^bb84, ^bb83
  ^bb82:  // pred: ^bb79
    %c4_i32_121 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_121) : (i32) -> ()
    cf.br ^bb81
  ^bb83:  // 2 preds: ^bb81, ^bb84
    %417 = llvm.load %411 : !llvm.ptr -> i32
    %418 = arith.cmpi ne, %25, %417 : i32
    cf.cond_br %418, ^bb86, ^bb85
  ^bb84:  // pred: ^bb81
    %c3_i32_122 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_122) : (i32) -> ()
    cf.br ^bb83
  ^bb85:  // 2 preds: ^bb83, ^bb86
    %419 = llvm.call %413(%414, %398, %399) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_123 = arith.constant 0 : i32
    %420 = arith.cmpi eq, %419, %c0_i32_123 : i32
    %421 = arith.extui %420 : i1 to i32
    %c0_i32_124 = arith.constant 0 : i32
    %422 = arith.cmpi ne, %421, %c0_i32_124 : i32
    cf.cond_br %422, ^bb77, ^bb87
  ^bb86:  // pred: ^bb83
    %c5_i32_125 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_125) : (i32) -> ()
    cf.br ^bb85
  ^bb87:  // pred: ^bb85
    cf.br ^bb76
  ^bb88:  // pred: ^bb75
    %423 = llvm.load %10 : !llvm.ptr -> i32
    %424 = llvm.load %4 : !llvm.ptr -> i32
    %425 = llvm.load %5 : !llvm.ptr -> i32
    %426 = llvm.load %12 : !llvm.ptr -> i32
    %c12_i64_126 = arith.constant 12 : i64
    %427 = arith.extui %426 : i32 to i64
    %428 = arith.addi %427, %c12_i64_126 : i64
    %429 = llvm.getelementptr %15[%428] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %430 = llvm.load %429 : !llvm.ptr -> i32
    %431 = arith.cmpi ult, %430, %33 : i32
    cf.cond_br %431, ^bb89, ^bb90
  ^bb89:  // 2 preds: ^bb88, ^bb90
    %432 = llvm.getelementptr %32[%430] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %433 = llvm.load %432 : !llvm.ptr -> !llvm.ptr
    %434 = llvm.load %433 : !llvm.ptr -> i32
    %c0_i32_127 = arith.constant 0 : i32
    %435 = arith.cmpi eq, %434, %c0_i32_127 : i32
    cf.cond_br %435, ^bb92, ^bb91
  ^bb90:  // pred: ^bb88
    %c3_i32_128 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_128) : (i32) -> ()
    cf.br ^bb89
  ^bb91:  // 2 preds: ^bb89, ^bb92
    %436 = llvm.getelementptr %433[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %437 = llvm.getelementptr %433[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %438 = llvm.getelementptr %433[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %439 = llvm.load %436 : !llvm.ptr -> !llvm.ptr
    %440 = llvm.load %438 : !llvm.ptr -> !llvm.ptr
    %441 = llvm.load %439 : !llvm.ptr -> i32
    %c0_i32_129 = arith.constant 0 : i32
    %442 = arith.cmpi eq, %441, %c0_i32_129 : i32
    cf.cond_br %442, ^bb94, ^bb93
  ^bb92:  // pred: ^bb89
    %c4_i32_130 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_130) : (i32) -> ()
    cf.br ^bb91
  ^bb93:  // 2 preds: ^bb91, ^bb94
    %443 = llvm.load %437 : !llvm.ptr -> i32
    %444 = arith.cmpi ne, %17, %443 : i32
    cf.cond_br %444, ^bb96, ^bb95
  ^bb94:  // pred: ^bb91
    %c3_i32_131 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_131) : (i32) -> ()
    cf.br ^bb93
  ^bb95:  // 2 preds: ^bb93, ^bb96
    %445 = llvm.call %439(%440, %423, %424, %425) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_132 = arith.constant 0 : i32
    %446 = arith.cmpi ne, %445, %c0_i32_132 : i32
    cf.cond_br %446, ^bb24, ^bb97
  ^bb96:  // pred: ^bb93
    %c5_i32_133 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_133) : (i32) -> ()
    cf.br ^bb95
  ^bb97:  // pred: ^bb95
    %c0_i32_134 = arith.constant 0 : i32
    llvm.store %c0_i32_134, %1 : i32, !llvm.ptr
    cf.br ^bb99
  ^bb98:  // pred: ^bb110
    %447 = llvm.load %1 : !llvm.ptr -> i32
    %c-1_i32_135 = arith.constant -1 : i32
    %448 = arith.addi %447, %c-1_i32_135 : i32
    %449 = llvm.load %6 : !llvm.ptr -> i32
    %450 = arith.cmpi ult, %448, %449 : i32
    %451 = arith.extui %450 : i1 to i32
    cf.br ^bb2(%451 : i32)
  ^bb99:  // 2 preds: ^bb97, ^bb108
    %452 = llvm.load %6 : !llvm.ptr -> i32
    %453 = llvm.load %1 : !llvm.ptr -> i32
    %454 = arith.cmpi eq, %452, %453 : i32
    %455 = arith.extui %454 : i1 to i32
    %c0_i32_136 = arith.constant 0 : i32
    %456 = arith.cmpi eq, %455, %c0_i32_136 : i32
    %457 = arith.extui %456 : i1 to i32
    %c0_i32_137 = arith.constant 0 : i32
    %458 = arith.cmpi ne, %457, %c0_i32_137 : i32
    cf.cond_br %458, ^bb100, ^bb101
  ^bb100:  // pred: ^bb99
    %459 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_138 = arith.constant 1 : i32
    %460 = arith.addi %459, %c1_i32_138 : i32
    llvm.store %460, %1 : i32, !llvm.ptr
    %461 = llvm.load %10 : !llvm.ptr -> i32
    %462 = llvm.load %9 : !llvm.ptr -> i32
    %463 = llvm.load %12 : !llvm.ptr -> i32
    %c16_i64_139 = arith.constant 16 : i64
    %464 = arith.extui %463 : i32 to i64
    %465 = arith.addi %464, %c16_i64_139 : i64
    %466 = llvm.getelementptr %15[%465] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %467 = llvm.load %466 : !llvm.ptr -> i32
    %468 = arith.cmpi ult, %467, %35 : i32
    cf.cond_br %468, ^bb102, ^bb103
  ^bb101:  // pred: ^bb99
    %469 = llvm.load %6 : !llvm.ptr -> i32
    %470 = llvm.load %6 : !llvm.ptr -> i32
    %471 = arith.cmpi ult, %469, %470 : i32
    %472 = arith.extui %471 : i1 to i32
    cf.br ^bb2(%472 : i32)
  ^bb102:  // 2 preds: ^bb100, ^bb103
    %473 = llvm.getelementptr %34[%467] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %474 = llvm.load %473 : !llvm.ptr -> !llvm.ptr
    %475 = llvm.load %474 : !llvm.ptr -> i32
    %c0_i32_140 = arith.constant 0 : i32
    %476 = arith.cmpi eq, %475, %c0_i32_140 : i32
    cf.cond_br %476, ^bb105, ^bb104
  ^bb103:  // pred: ^bb100
    %c3_i32_141 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_141) : (i32) -> ()
    cf.br ^bb102
  ^bb104:  // 2 preds: ^bb102, ^bb105
    %477 = llvm.getelementptr %474[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %478 = llvm.getelementptr %474[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %479 = llvm.getelementptr %474[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %480 = llvm.load %477 : !llvm.ptr -> !llvm.ptr
    %481 = llvm.load %479 : !llvm.ptr -> !llvm.ptr
    %482 = llvm.load %480 : !llvm.ptr -> i32
    %c0_i32_142 = arith.constant 0 : i32
    %483 = arith.cmpi eq, %482, %c0_i32_142 : i32
    cf.cond_br %483, ^bb107, ^bb106
  ^bb105:  // pred: ^bb102
    %c4_i32_143 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_143) : (i32) -> ()
    cf.br ^bb104
  ^bb106:  // 2 preds: ^bb104, ^bb107
    %484 = llvm.load %478 : !llvm.ptr -> i32
    %485 = arith.cmpi ne, %25, %484 : i32
    cf.cond_br %485, ^bb109, ^bb108
  ^bb107:  // pred: ^bb104
    %c3_i32_144 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_144) : (i32) -> ()
    cf.br ^bb106
  ^bb108:  // 2 preds: ^bb106, ^bb109
    %486 = llvm.call %480(%481, %461, %462) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_145 = arith.constant 0 : i32
    %487 = arith.cmpi eq, %486, %c0_i32_145 : i32
    %488 = arith.extui %487 : i1 to i32
    %c0_i32_146 = arith.constant 0 : i32
    %489 = arith.cmpi ne, %488, %c0_i32_146 : i32
    cf.cond_br %489, ^bb99, ^bb110
  ^bb109:  // pred: ^bb106
    %c5_i32_147 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_147) : (i32) -> ()
    cf.br ^bb108
  ^bb110:  // pred: ^bb108
    cf.br ^bb98
  }
  func.func @f39(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i64_4 = arith.constant 1 : i64
    %5 = llvm.alloca %c1_i64_4 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i64_5 = arith.constant 1 : i64
    %6 = llvm.alloca %c1_i64_5 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i64_6 = arith.constant 1 : i64
    %7 = llvm.alloca %c1_i64_6 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i64_7 = arith.constant 1 : i64
    %8 = llvm.alloca %c1_i64_7 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i64_8 = arith.constant 1 : i64
    %9 = llvm.alloca %c1_i64_8 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %10 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %14 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %15 = arith.addi %14, %c3_i32 : i32
    %c-4_i32 = arith.constant -4 : i32
    %16 = arith.andi %15, %c-4_i32 : i32
    llvm.store %16, %2 : i32, !llvm.ptr
    %17 = llvm.load %0 : !llvm.ptr -> i32
    %18 = arith.subi %16, %17 : i32
    llvm.store %18, %3 : i32, !llvm.ptr
    %19 = arith.cmpi ult, %13, %18 : i32
    %20 = arith.extui %19 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %21 = arith.cmpi ne, %20, %c0_i32_9 : i32
    cf.cond_br %21, ^bb4, ^bb5
  ^bb2(%22: i32):  // 3 preds: ^bb3, ^bb32, ^bb36
    return %22 : i32
  ^bb3:  // 3 preds: ^bb24, ^bb37, ^bb44
    %23 = llvm.load %8 : !llvm.ptr -> i32
    cf.br ^bb2(%23 : i32)
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %24 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_10 = arith.constant 0 : i32
    %25 = arith.cmpi ne, %24, %c0_i32_10 : i32
    cf.cond_br %25, ^bb35, ^bb36
  ^bb5:  // pred: ^bb1
    %26 = llvm.load %1 : !llvm.ptr -> i32
    %27 = llvm.load %3 : !llvm.ptr -> i32
    %28 = arith.subi %26, %27 : i32
    llvm.store %28, %4 : i32, !llvm.ptr
    %c4_i32 = arith.constant 4 : i32
    %29 = arith.cmpi ult, %28, %c4_i32 : i32
    %30 = arith.extui %29 : i1 to i32
    %c0_i32_11 = arith.constant 0 : i32
    %31 = arith.cmpi ne, %30, %c0_i32_11 : i32
    cf.cond_br %31, ^bb4, ^bb6
  ^bb6:  // pred: ^bb5
    %32 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i32_12 = arith.constant 3 : i32
    %33 = arith.andi %32, %c3_i32_12 : i32
    llvm.store %33, %5 : i32, !llvm.ptr
    %c0_i32_13 = arith.constant 0 : i32
    llvm.store %c0_i32_13, %6 : i32, !llvm.ptr
    %c0_i32_14 = arith.constant 0 : i32
    llvm.store %c0_i32_14, %1 : i32, !llvm.ptr
    %34 = llvm.load %2 : !llvm.ptr -> i32
    %35 = llvm.load %0 : !llvm.ptr -> i32
    %36 = arith.cmpi eq, %34, %35 : i32
    %37 = arith.extui %36 : i1 to i32
    llvm.store %37, %7 : i32, !llvm.ptr
    %c0_i32_15 = arith.constant 0 : i32
    %38 = arith.cmpi ne, %37, %c0_i32_15 : i32
    cf.cond_br %38, ^bb7, ^bb8
  ^bb7:  // 3 preds: ^bb6, ^bb9, ^bb16
    %39 = llvm.load %0 : !llvm.ptr -> i32
    %40 = llvm.load %3 : !llvm.ptr -> i32
    %41 = arith.addi %39, %40 : i32
    llvm.store %41, %9 : i32, !llvm.ptr
    %42 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i32_16 = arith.constant 0 : i32
    %43 = arith.cmpi eq, %42, %c0_i32_16 : i32
    %44 = arith.extui %43 : i1 to i32
    %c0_i32_17 = arith.constant 0 : i32
    %45 = arith.cmpi ne, %44, %c0_i32_17 : i32
    cf.cond_br %45, ^bb19, ^bb20
  ^bb8:  // pred: ^bb6
    %c0_i32_18 = arith.constant 0 : i32
    llvm.store %c0_i32_18, %1 : i32, !llvm.ptr
    %46 = llvm.load %0 : !llvm.ptr -> i32
    %47 = llvm.load %2 : !llvm.ptr -> i32
    %48 = arith.subi %46, %47 : i32
    llvm.store %48, %8 : i32, !llvm.ptr
    %c-4_i32_19 = arith.constant -4 : i32
    %49 = arith.cmpi ule, %48, %c-4_i32_19 : i32
    %50 = arith.extui %49 : i1 to i32
    %c0_i32_20 = arith.constant 0 : i32
    %51 = arith.cmpi ne, %50, %c0_i32_20 : i32
    cf.cond_br %51, ^bb10, ^bb11
  ^bb9:  // 2 preds: ^bb11, ^bb12
    %52 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i32_21 = arith.constant 0 : i32
    %53 = arith.cmpi ne, %52, %c0_i32_21 : i32
    cf.cond_br %53, ^bb7, ^bb15
  ^bb10:  // pred: ^bb8
    %c0_i32_22 = arith.constant 0 : i32
    llvm.store %c0_i32_22, %9 : i32, !llvm.ptr
    cf.br ^bb13
  ^bb11:  // pred: ^bb8
    %c0_i32_23 = arith.constant 0 : i32
    llvm.store %c0_i32_23, %9 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb12:  // pred: ^bb14
    cf.br ^bb9
  ^bb13:  // 2 preds: ^bb10, ^bb13
    %54 = llvm.load %1 : !llvm.ptr -> i32
    %55 = llvm.load %0 : !llvm.ptr -> i32
    %56 = llvm.load %9 : !llvm.ptr -> i32
    %57 = arith.addi %55, %56 : i32
    llvm.store %57, %2 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %58 = arith.extui %57 : i32 to i64
    %59 = arith.addi %58, %c0_i64 : i64
    %60 = llvm.getelementptr %12[%59] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %61 = llvm.load %60 : !llvm.ptr -> i8
    %62 = arith.extsi %61 : i8 to i32
    %c-65_i32 = arith.constant -65 : i32
    %63 = arith.cmpi sgt, %62, %c-65_i32 : i32
    %64 = arith.extui %63 : i1 to i32
    %65 = arith.addi %54, %64 : i32
    %66 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32 = arith.constant 1 : i32
    %67 = arith.addi %66, %c1_i32 : i32
    %c0_i64_24 = arith.constant 0 : i64
    %68 = arith.extui %67 : i32 to i64
    %69 = arith.addi %68, %c0_i64_24 : i64
    %70 = llvm.getelementptr %12[%69] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %71 = llvm.load %70 : !llvm.ptr -> i8
    %72 = arith.extsi %71 : i8 to i32
    %c-65_i32_25 = arith.constant -65 : i32
    %73 = arith.cmpi sgt, %72, %c-65_i32_25 : i32
    %74 = arith.extui %73 : i1 to i32
    %75 = arith.addi %65, %74 : i32
    %76 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %77 = arith.addi %76, %c2_i32 : i32
    %c0_i64_26 = arith.constant 0 : i64
    %78 = arith.extui %77 : i32 to i64
    %79 = arith.addi %78, %c0_i64_26 : i64
    %80 = llvm.getelementptr %12[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %81 = llvm.load %80 : !llvm.ptr -> i8
    %82 = arith.extsi %81 : i8 to i32
    %c-65_i32_27 = arith.constant -65 : i32
    %83 = arith.cmpi sgt, %82, %c-65_i32_27 : i32
    %84 = arith.extui %83 : i1 to i32
    %85 = arith.addi %75, %84 : i32
    %86 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i32_28 = arith.constant 3 : i32
    %87 = arith.addi %86, %c3_i32_28 : i32
    %c0_i64_29 = arith.constant 0 : i64
    %88 = arith.extui %87 : i32 to i64
    %89 = arith.addi %88, %c0_i64_29 : i64
    %90 = llvm.getelementptr %12[%89] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %91 = llvm.load %90 : !llvm.ptr -> i8
    %92 = arith.extsi %91 : i8 to i32
    %c-65_i32_30 = arith.constant -65 : i32
    %93 = arith.cmpi sgt, %92, %c-65_i32_30 : i32
    %94 = arith.extui %93 : i1 to i32
    %95 = arith.addi %85, %94 : i32
    llvm.store %95, %1 : i32, !llvm.ptr
    %96 = llvm.load %9 : !llvm.ptr -> i32
    %c4_i32_31 = arith.constant 4 : i32
    %97 = arith.addi %96, %c4_i32_31 : i32
    llvm.store %97, %9 : i32, !llvm.ptr
    %c0_i32_32 = arith.constant 0 : i32
    %98 = arith.cmpi ne, %97, %c0_i32_32 : i32
    cf.cond_br %98, ^bb13, ^bb14
  ^bb14:  // pred: ^bb13
    cf.br ^bb12
  ^bb15:  // pred: ^bb9
    %99 = llvm.load %0 : !llvm.ptr -> i32
    %100 = llvm.load %9 : !llvm.ptr -> i32
    %101 = arith.addi %99, %100 : i32
    llvm.store %101, %2 : i32, !llvm.ptr
    cf.br ^bb17
  ^bb16:  // pred: ^bb18
    cf.br ^bb7
  ^bb17:  // 2 preds: ^bb15, ^bb17
    %102 = llvm.load %1 : !llvm.ptr -> i32
    %103 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_33 = arith.constant 0 : i64
    %104 = arith.extui %103 : i32 to i64
    %105 = arith.addi %104, %c0_i64_33 : i64
    %106 = llvm.getelementptr %12[%105] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %107 = llvm.load %106 : !llvm.ptr -> i8
    %108 = arith.extsi %107 : i8 to i32
    %c-65_i32_34 = arith.constant -65 : i32
    %109 = arith.cmpi sgt, %108, %c-65_i32_34 : i32
    %110 = arith.extui %109 : i1 to i32
    %111 = arith.addi %102, %110 : i32
    llvm.store %111, %1 : i32, !llvm.ptr
    %112 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_35 = arith.constant 1 : i32
    %113 = arith.addi %112, %c1_i32_35 : i32
    llvm.store %113, %2 : i32, !llvm.ptr
    %114 = llvm.load %8 : !llvm.ptr -> i32
    %c1_i32_36 = arith.constant 1 : i32
    %115 = arith.addi %114, %c1_i32_36 : i32
    llvm.store %115, %8 : i32, !llvm.ptr
    %c0_i32_37 = arith.constant 0 : i32
    %116 = arith.cmpi ne, %115, %c0_i32_37 : i32
    cf.cond_br %116, ^bb17, ^bb18
  ^bb18:  // pred: ^bb17
    cf.br ^bb16
  ^bb19:  // 4 preds: ^bb7, ^bb20, ^bb21, ^bb22
    %117 = llvm.load %4 : !llvm.ptr -> i32
    %c2_i32_38 = arith.constant 2 : i32
    %c31_i32 = arith.constant 31 : i32
    %118 = arith.cmpi ule, %c2_i32_38, %c31_i32 : i32
    %119 = scf.if %118 -> (i32) {
      %421 = arith.shrui %117, %c2_i32_38 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    llvm.store %119, %3 : i32, !llvm.ptr
    %120 = llvm.load %6 : !llvm.ptr -> i32
    %121 = llvm.load %1 : !llvm.ptr -> i32
    %122 = arith.addi %120, %121 : i32
    llvm.store %122, %8 : i32, !llvm.ptr
    cf.br ^bb24
  ^bb20:  // pred: ^bb7
    %123 = llvm.load %9 : !llvm.ptr -> i32
    %124 = llvm.load %4 : !llvm.ptr -> i32
    %c-4_i32_39 = arith.constant -4 : i32
    %125 = arith.andi %124, %c-4_i32_39 : i32
    %126 = arith.addi %123, %125 : i32
    llvm.store %126, %2 : i32, !llvm.ptr
    %c0_i64_40 = arith.constant 0 : i64
    %127 = arith.extui %126 : i32 to i64
    %128 = arith.addi %127, %c0_i64_40 : i64
    %129 = llvm.getelementptr %12[%128] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %130 = llvm.load %129 : !llvm.ptr -> i8
    %131 = arith.extsi %130 : i8 to i32
    %c-65_i32_41 = arith.constant -65 : i32
    %132 = arith.cmpi sgt, %131, %c-65_i32_41 : i32
    %133 = arith.extui %132 : i1 to i32
    llvm.store %133, %6 : i32, !llvm.ptr
    %134 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i32_42 = arith.constant 1 : i32
    %135 = arith.cmpi eq, %134, %c1_i32_42 : i32
    %136 = arith.extui %135 : i1 to i32
    %c0_i32_43 = arith.constant 0 : i32
    %137 = arith.cmpi ne, %136, %c0_i32_43 : i32
    cf.cond_br %137, ^bb19, ^bb21
  ^bb21:  // pred: ^bb20
    %138 = llvm.load %6 : !llvm.ptr -> i32
    %139 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_44 = arith.constant 1 : i64
    %140 = arith.extui %139 : i32 to i64
    %141 = arith.addi %140, %c1_i64_44 : i64
    %142 = llvm.getelementptr %12[%141] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %143 = llvm.load %142 : !llvm.ptr -> i8
    %144 = arith.extsi %143 : i8 to i32
    %c-65_i32_45 = arith.constant -65 : i32
    %145 = arith.cmpi sgt, %144, %c-65_i32_45 : i32
    %146 = arith.extui %145 : i1 to i32
    %147 = arith.addi %138, %146 : i32
    llvm.store %147, %6 : i32, !llvm.ptr
    %148 = llvm.load %5 : !llvm.ptr -> i32
    %c2_i32_46 = arith.constant 2 : i32
    %149 = arith.cmpi eq, %148, %c2_i32_46 : i32
    %150 = arith.extui %149 : i1 to i32
    %c0_i32_47 = arith.constant 0 : i32
    %151 = arith.cmpi ne, %150, %c0_i32_47 : i32
    cf.cond_br %151, ^bb19, ^bb22
  ^bb22:  // pred: ^bb21
    %152 = llvm.load %6 : !llvm.ptr -> i32
    %153 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i64 = arith.constant 2 : i64
    %154 = arith.extui %153 : i32 to i64
    %155 = arith.addi %154, %c2_i64 : i64
    %156 = llvm.getelementptr %12[%155] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %157 = llvm.load %156 : !llvm.ptr -> i8
    %158 = arith.extsi %157 : i8 to i32
    %c-65_i32_48 = arith.constant -65 : i32
    %159 = arith.cmpi sgt, %158, %c-65_i32_48 : i32
    %160 = arith.extui %159 : i1 to i32
    %161 = arith.addi %152, %160 : i32
    llvm.store %161, %6 : i32, !llvm.ptr
    cf.br ^bb19
  ^bb23:  // pred: ^bb31
    %162 = llvm.load %4 : !llvm.ptr -> i32
    %163 = llvm.load %6 : !llvm.ptr -> i32
    %c252_i32 = arith.constant 252 : i32
    %164 = arith.andi %163, %c252_i32 : i32
    %c2_i32_49 = arith.constant 2 : i32
    %c31_i32_50 = arith.constant 31 : i32
    %165 = arith.cmpi ule, %c2_i32_49, %c31_i32_50 : i32
    %166 = scf.if %165 -> (i32) {
      %421 = arith.shli %164, %c2_i32_49 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %167 = arith.addi %162, %166 : i32
    llvm.store %167, %2 : i32, !llvm.ptr
    %c0_i64_51 = arith.constant 0 : i64
    %168 = arith.extui %167 : i32 to i64
    %169 = arith.addi %168, %c0_i64_51 : i64
    %170 = llvm.getelementptr %12[%169] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %171 = llvm.load %170 : !llvm.ptr -> i32
    llvm.store %171, %1 : i32, !llvm.ptr
    %c-1_i32 = arith.constant -1 : i32
    %172 = arith.xori %171, %c-1_i32 : i32
    %c7_i32 = arith.constant 7 : i32
    %c31_i32_52 = arith.constant 31 : i32
    %173 = arith.cmpi ule, %c7_i32, %c31_i32_52 : i32
    %174 = scf.if %173 -> (i32) {
      %421 = arith.shrui %172, %c7_i32 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %175 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i32 = arith.constant 6 : i32
    %c31_i32_53 = arith.constant 31 : i32
    %176 = arith.cmpi ule, %c6_i32, %c31_i32_53 : i32
    %177 = scf.if %176 -> (i32) {
      %421 = arith.shrui %175, %c6_i32 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %178 = arith.ori %174, %177 : i32
    %c16843009_i32 = arith.constant 16843009 : i32
    %179 = arith.andi %178, %c16843009_i32 : i32
    llvm.store %179, %1 : i32, !llvm.ptr
    %180 = llvm.load %7 : !llvm.ptr -> i32
    %c1_i32_54 = arith.constant 1 : i32
    %181 = arith.cmpi eq, %180, %c1_i32_54 : i32
    %182 = arith.extui %181 : i1 to i32
    %c0_i32_55 = arith.constant 0 : i32
    %183 = arith.cmpi ne, %182, %c0_i32_55 : i32
    cf.cond_br %183, ^bb32, ^bb33
  ^bb24:  // 2 preds: ^bb19, ^bb26
    %184 = llvm.load %9 : !llvm.ptr -> i32
    llvm.store %184, %4 : i32, !llvm.ptr
    %185 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_56 = arith.constant 0 : i32
    %186 = arith.cmpi eq, %185, %c0_i32_56 : i32
    %187 = arith.extui %186 : i1 to i32
    %c0_i32_57 = arith.constant 0 : i32
    %188 = arith.cmpi ne, %187, %c0_i32_57 : i32
    cf.cond_br %188, ^bb3, ^bb25
  ^bb25:  // pred: ^bb24
    %189 = llvm.load %3 : !llvm.ptr -> i32
    %c192_i32 = arith.constant 192 : i32
    %190 = llvm.load %3 : !llvm.ptr -> i32
    %c192_i32_58 = arith.constant 192 : i32
    %191 = arith.cmpi ult, %190, %c192_i32_58 : i32
    %192 = arith.extui %191 : i1 to i32
    %c0_i32_59 = arith.constant 0 : i32
    %193 = arith.cmpi ne, %192, %c0_i32_59 : i32
    %194 = arith.select %193, %189, %c192_i32 : i32
    llvm.store %194, %6 : i32, !llvm.ptr
    %c3_i32_60 = arith.constant 3 : i32
    %195 = arith.andi %194, %c3_i32_60 : i32
    llvm.store %195, %7 : i32, !llvm.ptr
    %196 = llvm.load %6 : !llvm.ptr -> i32
    %c2_i32_61 = arith.constant 2 : i32
    %c31_i32_62 = arith.constant 31 : i32
    %197 = arith.cmpi ule, %c2_i32_61, %c31_i32_62 : i32
    %198 = scf.if %197 -> (i32) {
      %421 = arith.shli %196, %c2_i32_61 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    llvm.store %198, %5 : i32, !llvm.ptr
    %c0_i32_63 = arith.constant 0 : i32
    llvm.store %c0_i32_63, %2 : i32, !llvm.ptr
    %199 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32_64 = arith.constant 4 : i32
    %200 = arith.cmpi ult, %199, %c4_i32_64 : i32
    %201 = arith.extui %200 : i1 to i32
    %c0_i32_65 = arith.constant 0 : i32
    %202 = arith.cmpi ne, %201, %c0_i32_65 : i32
    cf.cond_br %202, ^bb26, ^bb27
  ^bb26:  // 2 preds: ^bb25, ^bb28
    %203 = llvm.load %3 : !llvm.ptr -> i32
    %204 = llvm.load %6 : !llvm.ptr -> i32
    %205 = arith.subi %203, %204 : i32
    llvm.store %205, %3 : i32, !llvm.ptr
    %206 = llvm.load %4 : !llvm.ptr -> i32
    %207 = llvm.load %5 : !llvm.ptr -> i32
    %208 = arith.addi %206, %207 : i32
    llvm.store %208, %9 : i32, !llvm.ptr
    %209 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %c31_i32_66 = arith.constant 31 : i32
    %210 = arith.cmpi ule, %c8_i32, %c31_i32_66 : i32
    %211 = scf.if %210 -> (i32) {
      %421 = arith.shrui %209, %c8_i32 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %c16711935_i32 = arith.constant 16711935 : i32
    %212 = arith.andi %211, %c16711935_i32 : i32
    %213 = llvm.load %2 : !llvm.ptr -> i32
    %c16711935_i32_67 = arith.constant 16711935 : i32
    %214 = arith.andi %213, %c16711935_i32_67 : i32
    %215 = arith.addi %212, %214 : i32
    %c65537_i32 = arith.constant 65537 : i32
    %216 = arith.muli %215, %c65537_i32 : i32
    %c16_i32 = arith.constant 16 : i32
    %c31_i32_68 = arith.constant 31 : i32
    %217 = arith.cmpi ule, %c16_i32, %c31_i32_68 : i32
    %218 = scf.if %217 -> (i32) {
      %421 = arith.shrui %216, %c16_i32 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %219 = llvm.load %8 : !llvm.ptr -> i32
    %220 = arith.addi %218, %219 : i32
    llvm.store %220, %8 : i32, !llvm.ptr
    %221 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i32_69 = arith.constant 0 : i32
    %222 = arith.cmpi eq, %221, %c0_i32_69 : i32
    %223 = arith.extui %222 : i1 to i32
    %c0_i32_70 = arith.constant 0 : i32
    %224 = arith.cmpi ne, %223, %c0_i32_70 : i32
    cf.cond_br %224, ^bb24, ^bb31
  ^bb27:  // pred: ^bb25
    %225 = llvm.load %4 : !llvm.ptr -> i32
    %226 = llvm.load %5 : !llvm.ptr -> i32
    %c1008_i32 = arith.constant 1008 : i32
    %227 = arith.andi %226, %c1008_i32 : i32
    %228 = arith.addi %225, %227 : i32
    llvm.store %228, %0 : i32, !llvm.ptr
    %c0_i32_71 = arith.constant 0 : i32
    llvm.store %c0_i32_71, %2 : i32, !llvm.ptr
    %229 = llvm.load %4 : !llvm.ptr -> i32
    llvm.store %229, %1 : i32, !llvm.ptr
    cf.br ^bb29
  ^bb28:  // pred: ^bb30
    cf.br ^bb26
  ^bb29:  // 2 preds: ^bb27, ^bb29
    %230 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %231 = arith.extui %230 : i32 to i64
    %232 = arith.addi %231, %c12_i64 : i64
    %233 = llvm.getelementptr %12[%232] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %234 = llvm.load %233 : !llvm.ptr -> i32
    llvm.store %234, %9 : i32, !llvm.ptr
    %c-1_i32_72 = arith.constant -1 : i32
    %235 = arith.xori %234, %c-1_i32_72 : i32
    %c7_i32_73 = arith.constant 7 : i32
    %c31_i32_74 = arith.constant 31 : i32
    %236 = arith.cmpi ule, %c7_i32_73, %c31_i32_74 : i32
    %237 = scf.if %236 -> (i32) {
      %421 = arith.shrui %235, %c7_i32_73 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %238 = llvm.load %9 : !llvm.ptr -> i32
    %c6_i32_75 = arith.constant 6 : i32
    %c31_i32_76 = arith.constant 31 : i32
    %239 = arith.cmpi ule, %c6_i32_75, %c31_i32_76 : i32
    %240 = scf.if %239 -> (i32) {
      %421 = arith.shrui %238, %c6_i32_75 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %241 = arith.ori %237, %240 : i32
    %c16843009_i32_77 = arith.constant 16843009 : i32
    %242 = arith.andi %241, %c16843009_i32_77 : i32
    %243 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %244 = arith.extui %243 : i32 to i64
    %245 = arith.addi %244, %c8_i64 : i64
    %246 = llvm.getelementptr %12[%245] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %247 = llvm.load %246 : !llvm.ptr -> i32
    llvm.store %247, %9 : i32, !llvm.ptr
    %c-1_i32_78 = arith.constant -1 : i32
    %248 = arith.xori %247, %c-1_i32_78 : i32
    %c7_i32_79 = arith.constant 7 : i32
    %c31_i32_80 = arith.constant 31 : i32
    %249 = arith.cmpi ule, %c7_i32_79, %c31_i32_80 : i32
    %250 = scf.if %249 -> (i32) {
      %421 = arith.shrui %248, %c7_i32_79 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %251 = llvm.load %9 : !llvm.ptr -> i32
    %c6_i32_81 = arith.constant 6 : i32
    %c31_i32_82 = arith.constant 31 : i32
    %252 = arith.cmpi ule, %c6_i32_81, %c31_i32_82 : i32
    %253 = scf.if %252 -> (i32) {
      %421 = arith.shrui %251, %c6_i32_81 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %254 = arith.ori %250, %253 : i32
    %c16843009_i32_83 = arith.constant 16843009 : i32
    %255 = arith.andi %254, %c16843009_i32_83 : i32
    %256 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %257 = arith.extui %256 : i32 to i64
    %258 = arith.addi %257, %c4_i64 : i64
    %259 = llvm.getelementptr %12[%258] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %260 = llvm.load %259 : !llvm.ptr -> i32
    llvm.store %260, %9 : i32, !llvm.ptr
    %c-1_i32_84 = arith.constant -1 : i32
    %261 = arith.xori %260, %c-1_i32_84 : i32
    %c7_i32_85 = arith.constant 7 : i32
    %c31_i32_86 = arith.constant 31 : i32
    %262 = arith.cmpi ule, %c7_i32_85, %c31_i32_86 : i32
    %263 = scf.if %262 -> (i32) {
      %421 = arith.shrui %261, %c7_i32_85 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %264 = llvm.load %9 : !llvm.ptr -> i32
    %c6_i32_87 = arith.constant 6 : i32
    %c31_i32_88 = arith.constant 31 : i32
    %265 = arith.cmpi ule, %c6_i32_87, %c31_i32_88 : i32
    %266 = scf.if %265 -> (i32) {
      %421 = arith.shrui %264, %c6_i32_87 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %267 = arith.ori %263, %266 : i32
    %c16843009_i32_89 = arith.constant 16843009 : i32
    %268 = arith.andi %267, %c16843009_i32_89 : i32
    %269 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_90 = arith.constant 0 : i64
    %270 = arith.extui %269 : i32 to i64
    %271 = arith.addi %270, %c0_i64_90 : i64
    %272 = llvm.getelementptr %12[%271] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %273 = llvm.load %272 : !llvm.ptr -> i32
    llvm.store %273, %9 : i32, !llvm.ptr
    %c-1_i32_91 = arith.constant -1 : i32
    %274 = arith.xori %273, %c-1_i32_91 : i32
    %c7_i32_92 = arith.constant 7 : i32
    %c31_i32_93 = arith.constant 31 : i32
    %275 = arith.cmpi ule, %c7_i32_92, %c31_i32_93 : i32
    %276 = scf.if %275 -> (i32) {
      %421 = arith.shrui %274, %c7_i32_92 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %277 = llvm.load %9 : !llvm.ptr -> i32
    %c6_i32_94 = arith.constant 6 : i32
    %c31_i32_95 = arith.constant 31 : i32
    %278 = arith.cmpi ule, %c6_i32_94, %c31_i32_95 : i32
    %279 = scf.if %278 -> (i32) {
      %421 = arith.shrui %277, %c6_i32_94 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %280 = arith.ori %276, %279 : i32
    %c16843009_i32_96 = arith.constant 16843009 : i32
    %281 = arith.andi %280, %c16843009_i32_96 : i32
    %282 = llvm.load %2 : !llvm.ptr -> i32
    %283 = arith.addi %281, %282 : i32
    %284 = arith.addi %268, %283 : i32
    %285 = arith.addi %255, %284 : i32
    %286 = arith.addi %242, %285 : i32
    llvm.store %286, %2 : i32, !llvm.ptr
    %287 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32_97 = arith.constant 16 : i32
    %288 = arith.addi %287, %c16_i32_97 : i32
    llvm.store %288, %1 : i32, !llvm.ptr
    %289 = llvm.load %0 : !llvm.ptr -> i32
    %290 = arith.cmpi eq, %288, %289 : i32
    %291 = arith.extui %290 : i1 to i32
    %c0_i32_98 = arith.constant 0 : i32
    %292 = arith.cmpi eq, %291, %c0_i32_98 : i32
    %293 = arith.extui %292 : i1 to i32
    %c0_i32_99 = arith.constant 0 : i32
    %294 = arith.cmpi ne, %293, %c0_i32_99 : i32
    cf.cond_br %294, ^bb29, ^bb30
  ^bb30:  // pred: ^bb29
    cf.br ^bb28
  ^bb31:  // pred: ^bb26
    cf.br ^bb23
  ^bb32:  // 3 preds: ^bb23, ^bb33, ^bb34
    %295 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_100 = arith.constant 8 : i32
    %c31_i32_101 = arith.constant 31 : i32
    %296 = arith.cmpi ule, %c8_i32_100, %c31_i32_101 : i32
    %297 = scf.if %296 -> (i32) {
      %421 = arith.shrui %295, %c8_i32_100 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %c459007_i32 = arith.constant 459007 : i32
    %298 = arith.andi %297, %c459007_i32 : i32
    %299 = llvm.load %1 : !llvm.ptr -> i32
    %c16711935_i32_102 = arith.constant 16711935 : i32
    %300 = arith.andi %299, %c16711935_i32_102 : i32
    %301 = arith.addi %298, %300 : i32
    %c65537_i32_103 = arith.constant 65537 : i32
    %302 = arith.muli %301, %c65537_i32_103 : i32
    %c16_i32_104 = arith.constant 16 : i32
    %c31_i32_105 = arith.constant 31 : i32
    %303 = arith.cmpi ule, %c16_i32_104, %c31_i32_105 : i32
    %304 = scf.if %303 -> (i32) {
      %421 = arith.shrui %302, %c16_i32_104 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %305 = llvm.load %8 : !llvm.ptr -> i32
    %306 = arith.addi %304, %305 : i32
    cf.br ^bb2(%306 : i32)
  ^bb33:  // pred: ^bb23
    %307 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_106 = arith.constant 4 : i64
    %308 = arith.extui %307 : i32 to i64
    %309 = arith.addi %308, %c4_i64_106 : i64
    %310 = llvm.getelementptr %12[%309] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %311 = llvm.load %310 : !llvm.ptr -> i32
    llvm.store %311, %9 : i32, !llvm.ptr
    %c-1_i32_107 = arith.constant -1 : i32
    %312 = arith.xori %311, %c-1_i32_107 : i32
    %c7_i32_108 = arith.constant 7 : i32
    %c31_i32_109 = arith.constant 31 : i32
    %313 = arith.cmpi ule, %c7_i32_108, %c31_i32_109 : i32
    %314 = scf.if %313 -> (i32) {
      %421 = arith.shrui %312, %c7_i32_108 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %315 = llvm.load %9 : !llvm.ptr -> i32
    %c6_i32_110 = arith.constant 6 : i32
    %c31_i32_111 = arith.constant 31 : i32
    %316 = arith.cmpi ule, %c6_i32_110, %c31_i32_111 : i32
    %317 = scf.if %316 -> (i32) {
      %421 = arith.shrui %315, %c6_i32_110 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %318 = arith.ori %314, %317 : i32
    %c16843009_i32_112 = arith.constant 16843009 : i32
    %319 = arith.andi %318, %c16843009_i32_112 : i32
    %320 = llvm.load %1 : !llvm.ptr -> i32
    %321 = arith.addi %319, %320 : i32
    llvm.store %321, %1 : i32, !llvm.ptr
    %322 = llvm.load %7 : !llvm.ptr -> i32
    %c2_i32_113 = arith.constant 2 : i32
    %323 = arith.cmpi eq, %322, %c2_i32_113 : i32
    %324 = arith.extui %323 : i1 to i32
    %c0_i32_114 = arith.constant 0 : i32
    %325 = arith.cmpi ne, %324, %c0_i32_114 : i32
    cf.cond_br %325, ^bb32, ^bb34
  ^bb34:  // pred: ^bb33
    %326 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_115 = arith.constant 8 : i64
    %327 = arith.extui %326 : i32 to i64
    %328 = arith.addi %327, %c8_i64_115 : i64
    %329 = llvm.getelementptr %12[%328] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %330 = llvm.load %329 : !llvm.ptr -> i32
    llvm.store %330, %2 : i32, !llvm.ptr
    %c-1_i32_116 = arith.constant -1 : i32
    %331 = arith.xori %330, %c-1_i32_116 : i32
    %c7_i32_117 = arith.constant 7 : i32
    %c31_i32_118 = arith.constant 31 : i32
    %332 = arith.cmpi ule, %c7_i32_117, %c31_i32_118 : i32
    %333 = scf.if %332 -> (i32) {
      %421 = arith.shrui %331, %c7_i32_117 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %334 = llvm.load %2 : !llvm.ptr -> i32
    %c6_i32_119 = arith.constant 6 : i32
    %c31_i32_120 = arith.constant 31 : i32
    %335 = arith.cmpi ule, %c6_i32_119, %c31_i32_120 : i32
    %336 = scf.if %335 -> (i32) {
      %421 = arith.shrui %334, %c6_i32_119 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %337 = arith.ori %333, %336 : i32
    %c16843009_i32_121 = arith.constant 16843009 : i32
    %338 = arith.andi %337, %c16843009_i32_121 : i32
    %339 = llvm.load %1 : !llvm.ptr -> i32
    %340 = arith.addi %338, %339 : i32
    llvm.store %340, %1 : i32, !llvm.ptr
    cf.br ^bb32
  ^bb35:  // pred: ^bb4
    %341 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i32_122 = arith.constant 3 : i32
    %342 = arith.andi %341, %c3_i32_122 : i32
    llvm.store %342, %9 : i32, !llvm.ptr
    %343 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32_123 = arith.constant 4 : i32
    %344 = arith.cmpi uge, %343, %c4_i32_123 : i32
    %345 = arith.extui %344 : i1 to i32
    %c0_i32_124 = arith.constant 0 : i32
    %346 = arith.cmpi ne, %345, %c0_i32_124 : i32
    cf.cond_br %346, ^bb38, ^bb39
  ^bb36:  // pred: ^bb4
    %c0_i32_125 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32_125 : i32)
  ^bb37:  // 2 preds: ^bb39, ^bb40
    %347 = llvm.load %9 : !llvm.ptr -> i32
    %c0_i32_126 = arith.constant 0 : i32
    %348 = arith.cmpi eq, %347, %c0_i32_126 : i32
    %349 = arith.extui %348 : i1 to i32
    %c0_i32_127 = arith.constant 0 : i32
    %350 = arith.cmpi ne, %349, %c0_i32_127 : i32
    cf.cond_br %350, ^bb3, ^bb43
  ^bb38:  // pred: ^bb35
    %351 = llvm.load %1 : !llvm.ptr -> i32
    %c-4_i32_128 = arith.constant -4 : i32
    %352 = arith.andi %351, %c-4_i32_128 : i32
    llvm.store %352, %3 : i32, !llvm.ptr
    %c0_i32_129 = arith.constant 0 : i32
    llvm.store %c0_i32_129, %8 : i32, !llvm.ptr
    %c0_i32_130 = arith.constant 0 : i32
    llvm.store %c0_i32_130, %2 : i32, !llvm.ptr
    cf.br ^bb41
  ^bb39:  // pred: ^bb35
    %c0_i32_131 = arith.constant 0 : i32
    llvm.store %c0_i32_131, %8 : i32, !llvm.ptr
    %c0_i32_132 = arith.constant 0 : i32
    llvm.store %c0_i32_132, %2 : i32, !llvm.ptr
    cf.br ^bb37
  ^bb40:  // pred: ^bb42
    cf.br ^bb37
  ^bb41:  // 2 preds: ^bb38, ^bb41
    %353 = llvm.load %8 : !llvm.ptr -> i32
    %354 = llvm.load %0 : !llvm.ptr -> i32
    %355 = llvm.load %2 : !llvm.ptr -> i32
    %356 = arith.addi %354, %355 : i32
    llvm.store %356, %1 : i32, !llvm.ptr
    %c0_i64_133 = arith.constant 0 : i64
    %357 = arith.extui %356 : i32 to i64
    %358 = arith.addi %357, %c0_i64_133 : i64
    %359 = llvm.getelementptr %12[%358] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %360 = llvm.load %359 : !llvm.ptr -> i8
    %361 = arith.extsi %360 : i8 to i32
    %c-65_i32_134 = arith.constant -65 : i32
    %362 = arith.cmpi sgt, %361, %c-65_i32_134 : i32
    %363 = arith.extui %362 : i1 to i32
    %364 = arith.addi %353, %363 : i32
    %365 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_135 = arith.constant 1 : i32
    %366 = arith.addi %365, %c1_i32_135 : i32
    %c0_i64_136 = arith.constant 0 : i64
    %367 = arith.extui %366 : i32 to i64
    %368 = arith.addi %367, %c0_i64_136 : i64
    %369 = llvm.getelementptr %12[%368] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %370 = llvm.load %369 : !llvm.ptr -> i8
    %371 = arith.extsi %370 : i8 to i32
    %c-65_i32_137 = arith.constant -65 : i32
    %372 = arith.cmpi sgt, %371, %c-65_i32_137 : i32
    %373 = arith.extui %372 : i1 to i32
    %374 = arith.addi %364, %373 : i32
    %375 = llvm.load %1 : !llvm.ptr -> i32
    %c2_i32_138 = arith.constant 2 : i32
    %376 = arith.addi %375, %c2_i32_138 : i32
    %c0_i64_139 = arith.constant 0 : i64
    %377 = arith.extui %376 : i32 to i64
    %378 = arith.addi %377, %c0_i64_139 : i64
    %379 = llvm.getelementptr %12[%378] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %380 = llvm.load %379 : !llvm.ptr -> i8
    %381 = arith.extsi %380 : i8 to i32
    %c-65_i32_140 = arith.constant -65 : i32
    %382 = arith.cmpi sgt, %381, %c-65_i32_140 : i32
    %383 = arith.extui %382 : i1 to i32
    %384 = arith.addi %374, %383 : i32
    %385 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i32_141 = arith.constant 3 : i32
    %386 = arith.addi %385, %c3_i32_141 : i32
    %c0_i64_142 = arith.constant 0 : i64
    %387 = arith.extui %386 : i32 to i64
    %388 = arith.addi %387, %c0_i64_142 : i64
    %389 = llvm.getelementptr %12[%388] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %390 = llvm.load %389 : !llvm.ptr -> i8
    %391 = arith.extsi %390 : i8 to i32
    %c-65_i32_143 = arith.constant -65 : i32
    %392 = arith.cmpi sgt, %391, %c-65_i32_143 : i32
    %393 = arith.extui %392 : i1 to i32
    %394 = arith.addi %384, %393 : i32
    llvm.store %394, %8 : i32, !llvm.ptr
    %395 = llvm.load %3 : !llvm.ptr -> i32
    %396 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i32_144 = arith.constant 4 : i32
    %397 = arith.addi %396, %c4_i32_144 : i32
    llvm.store %397, %2 : i32, !llvm.ptr
    %398 = arith.cmpi eq, %395, %397 : i32
    %399 = arith.extui %398 : i1 to i32
    %c0_i32_145 = arith.constant 0 : i32
    %400 = arith.cmpi eq, %399, %c0_i32_145 : i32
    %401 = arith.extui %400 : i1 to i32
    %c0_i32_146 = arith.constant 0 : i32
    %402 = arith.cmpi ne, %401, %c0_i32_146 : i32
    cf.cond_br %402, ^bb41, ^bb42
  ^bb42:  // pred: ^bb41
    cf.br ^bb40
  ^bb43:  // pred: ^bb37
    %403 = llvm.load %0 : !llvm.ptr -> i32
    %404 = llvm.load %2 : !llvm.ptr -> i32
    %405 = arith.addi %403, %404 : i32
    llvm.store %405, %1 : i32, !llvm.ptr
    cf.br ^bb45
  ^bb44:  // pred: ^bb46
    cf.br ^bb3
  ^bb45:  // 2 preds: ^bb43, ^bb45
    %406 = llvm.load %8 : !llvm.ptr -> i32
    %407 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_147 = arith.constant 0 : i64
    %408 = arith.extui %407 : i32 to i64
    %409 = arith.addi %408, %c0_i64_147 : i64
    %410 = llvm.getelementptr %12[%409] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %411 = llvm.load %410 : !llvm.ptr -> i8
    %412 = arith.extsi %411 : i8 to i32
    %c-65_i32_148 = arith.constant -65 : i32
    %413 = arith.cmpi sgt, %412, %c-65_i32_148 : i32
    %414 = arith.extui %413 : i1 to i32
    %415 = arith.addi %406, %414 : i32
    llvm.store %415, %8 : i32, !llvm.ptr
    %416 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_149 = arith.constant 1 : i32
    %417 = arith.addi %416, %c1_i32_149 : i32
    llvm.store %417, %1 : i32, !llvm.ptr
    %418 = llvm.load %9 : !llvm.ptr -> i32
    %c-1_i32_150 = arith.constant -1 : i32
    %419 = arith.addi %418, %c-1_i32_150 : i32
    llvm.store %419, %9 : i32, !llvm.ptr
    %c0_i32_151 = arith.constant 0 : i32
    %420 = arith.cmpi ne, %419, %c0_i32_151 : i32
    cf.cond_br %420, ^bb45, ^bb46
  ^bb46:  // pred: ^bb45
    cf.br ^bb44
  }
  func.func @f40(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_4 = arith.constant 1 : i64
    %5 = llvm.alloca %c1_i64_4 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> i32
    %11 = llvm.getelementptr %arg0[56] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    %14 = llvm.load %12 : !llvm.ptr -> i32
    %15 = llvm.getelementptr %arg0[4] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %15 : !llvm.ptr -> i32
    %17 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.load %12 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %19 = llvm.load %2 : !llvm.ptr -> i32
    %c1114112_i32 = arith.constant 1114112 : i32
    %20 = arith.cmpi eq, %19, %c1114112_i32 : i32
    %21 = arith.extui %20 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %22 = arith.cmpi ne, %21, %c0_i32_5 : i32
    cf.cond_br %22, ^bb5, ^bb6
  ^bb2(%23: i32):  // 2 preds: ^bb4, ^bb23
    return %23 : i32
  ^bb3:  // pred: ^bb5
    %24 = llvm.load %0 : !llvm.ptr -> i32
    %25 = llvm.load %3 : !llvm.ptr -> i32
    %26 = llvm.load %4 : !llvm.ptr -> i32
    %27 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %28 = arith.extui %27 : i32 to i64
    %29 = arith.addi %28, %c12_i64 : i64
    %30 = llvm.getelementptr %8[%29] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %31 = llvm.load %30 : !llvm.ptr -> i32
    %32 = arith.cmpi ult, %31, %18 : i32
    cf.cond_br %32, ^bb17, ^bb18
  ^bb4:  // 2 preds: ^bb13, ^bb16
    %33 = llvm.load %5 : !llvm.ptr -> i32
    cf.br ^bb2(%33 : i32)
  ^bb5:  // 2 preds: ^bb1, ^bb15
    %34 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_6 = arith.constant 0 : i32
    %35 = arith.cmpi ne, %34, %c0_i32_6 : i32
    cf.cond_br %35, ^bb3, ^bb16
  ^bb6:  // pred: ^bb1
    %c1_i32 = arith.constant 1 : i32
    llvm.store %c1_i32, %5 : i32, !llvm.ptr
    %36 = llvm.load %0 : !llvm.ptr -> i32
    %37 = llvm.load %2 : !llvm.ptr -> i32
    %38 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %39 = arith.extui %38 : i32 to i64
    %40 = arith.addi %39, %c16_i64 : i64
    %41 = llvm.getelementptr %8[%40] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %42 = llvm.load %41 : !llvm.ptr -> i32
    %43 = arith.cmpi ult, %42, %14 : i32
    cf.cond_br %43, ^bb7, ^bb8
  ^bb7:  // 2 preds: ^bb6, ^bb8
    %44 = llvm.getelementptr %13[%42] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %45 = llvm.load %44 : !llvm.ptr -> !llvm.ptr
    %46 = llvm.load %45 : !llvm.ptr -> i32
    %c0_i32_7 = arith.constant 0 : i32
    %47 = arith.cmpi eq, %46, %c0_i32_7 : i32
    cf.cond_br %47, ^bb10, ^bb9
  ^bb8:  // pred: ^bb6
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %48 = llvm.getelementptr %45[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %49 = llvm.getelementptr %45[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %50 = llvm.getelementptr %45[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %51 = llvm.load %48 : !llvm.ptr -> !llvm.ptr
    %52 = llvm.load %50 : !llvm.ptr -> !llvm.ptr
    %53 = llvm.load %51 : !llvm.ptr -> i32
    %c0_i32_8 = arith.constant 0 : i32
    %54 = arith.cmpi eq, %53, %c0_i32_8 : i32
    cf.cond_br %54, ^bb12, ^bb11
  ^bb10:  // pred: ^bb7
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %55 = llvm.load %49 : !llvm.ptr -> i32
    %56 = arith.cmpi ne, %10, %55 : i32
    cf.cond_br %56, ^bb14, ^bb13
  ^bb12:  // pred: ^bb9
    %c3_i32_9 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_9) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %57 = llvm.call %51(%52, %36, %37) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_10 = arith.constant 0 : i32
    %58 = arith.cmpi ne, %57, %c0_i32_10 : i32
    cf.cond_br %58, ^bb4, ^bb15
  ^bb14:  // pred: ^bb11
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // pred: ^bb13
    cf.br ^bb5
  ^bb16:  // pred: ^bb5
    %c0_i32_11 = arith.constant 0 : i32
    llvm.store %c0_i32_11, %5 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb17:  // 2 preds: ^bb3, ^bb18
    %59 = llvm.getelementptr %17[%31] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %60 = llvm.load %59 : !llvm.ptr -> !llvm.ptr
    %61 = llvm.load %60 : !llvm.ptr -> i32
    %c0_i32_12 = arith.constant 0 : i32
    %62 = arith.cmpi eq, %61, %c0_i32_12 : i32
    cf.cond_br %62, ^bb20, ^bb19
  ^bb18:  // pred: ^bb3
    %c3_i32_13 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_13) : (i32) -> ()
    cf.br ^bb17
  ^bb19:  // 2 preds: ^bb17, ^bb20
    %63 = llvm.getelementptr %60[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %64 = llvm.getelementptr %60[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %65 = llvm.getelementptr %60[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %66 = llvm.load %63 : !llvm.ptr -> !llvm.ptr
    %67 = llvm.load %65 : !llvm.ptr -> !llvm.ptr
    %68 = llvm.load %66 : !llvm.ptr -> i32
    %c0_i32_14 = arith.constant 0 : i32
    %69 = arith.cmpi eq, %68, %c0_i32_14 : i32
    cf.cond_br %69, ^bb22, ^bb21
  ^bb20:  // pred: ^bb17
    %c4_i32_15 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_15) : (i32) -> ()
    cf.br ^bb19
  ^bb21:  // 2 preds: ^bb19, ^bb22
    %70 = llvm.load %64 : !llvm.ptr -> i32
    %71 = arith.cmpi ne, %16, %70 : i32
    cf.cond_br %71, ^bb24, ^bb23
  ^bb22:  // pred: ^bb19
    %c3_i32_16 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_16) : (i32) -> ()
    cf.br ^bb21
  ^bb23:  // 2 preds: ^bb21, ^bb24
    %72 = llvm.call %66(%67, %24, %25, %26) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%72 : i32)
  ^bb24:  // pred: ^bb21
    %c5_i32_17 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_17) : (i32) -> ()
    cf.br ^bb23
  }
  func.func @f41(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[4] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> i32
    %8 = llvm.getelementptr %arg0[56] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.load %9 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c20_i64 : i64
    %15 = llvm.getelementptr %5[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %16 = llvm.load %15 : !llvm.ptr -> i32
    %17 = llvm.load %1 : !llvm.ptr -> i32
    %18 = llvm.load %2 : !llvm.ptr -> i32
    %19 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %20 = arith.extui %19 : i32 to i64
    %21 = arith.addi %20, %c24_i64 : i64
    %22 = llvm.getelementptr %5[%21] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %23 = llvm.load %22 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %24 = arith.extui %23 : i32 to i64
    %25 = arith.addi %24, %c12_i64 : i64
    %26 = llvm.getelementptr %5[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %27 = llvm.load %26 : !llvm.ptr -> i32
    %28 = arith.cmpi ult, %27, %11 : i32
    cf.cond_br %28, ^bb3, ^bb4
  ^bb2(%29: i32):  // pred: ^bb9
    return %29 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %30 = llvm.getelementptr %10[%27] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %31 = llvm.load %30 : !llvm.ptr -> !llvm.ptr
    %32 = llvm.load %31 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %33 = arith.cmpi eq, %32, %c0_i32 : i32
    cf.cond_br %33, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %34 = llvm.getelementptr %31[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %35 = llvm.getelementptr %31[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %36 = llvm.getelementptr %31[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %37 = llvm.load %34 : !llvm.ptr -> !llvm.ptr
    %38 = llvm.load %36 : !llvm.ptr -> !llvm.ptr
    %39 = llvm.load %37 : !llvm.ptr -> i32
    %c0_i32_2 = arith.constant 0 : i32
    %40 = arith.cmpi eq, %39, %c0_i32_2 : i32
    cf.cond_br %40, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %41 = llvm.load %35 : !llvm.ptr -> i32
    %42 = arith.cmpi ne, %7, %41 : i32
    cf.cond_br %42, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_3 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_3) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %43 = llvm.call %37(%38, %16, %17, %18) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%43 : i32)
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func @f42(%arg0: !llvm.ptr, %arg1: i64, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i64_4 = arith.constant 1 : i64
    %5 = llvm.alloca %c1_i64_4 x i64 : (i64) -> !llvm.ptr
    llvm.store %c0_i64, %5 : i64, !llvm.ptr
    %c0_i32_5 = arith.constant 0 : i32
    %c1_i64_6 = arith.constant 1 : i64
    %6 = llvm.alloca %c1_i64_6 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32_5, %6 : i32, !llvm.ptr
    %c1_i64_7 = arith.constant 1 : i64
    %7 = llvm.alloca %c1_i64_7 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32_5, %7 : i32, !llvm.ptr
    %c1_i64_8 = arith.constant 1 : i64
    %8 = llvm.alloca %c1_i64_8 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32_5, %8 : i32, !llvm.ptr
    %9 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %14 = llvm.load %10 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %15 = arith.subi %14, %c48_i32 : i32
    llvm.store %15, %3 : i32, !llvm.ptr
    llvm.store %15, %10 : i32, !llvm.ptr
    %c39_i32 = arith.constant 39 : i32
    llvm.store %c39_i32, %4 : i32, !llvm.ptr
    %16 = llvm.load %0 : !llvm.ptr -> i64
    %c10000_i64 = arith.constant 10000 : i64
    %17 = arith.cmpi uge, %16, %c10000_i64 : i64
    %18 = arith.extui %17 : i1 to i64
    %19 = arith.trunci %18 : i64 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %20 = arith.cmpi ne, %19, %c0_i32_9 : i32
    cf.cond_br %20, ^bb4, ^bb5
  ^bb2(%21: i32):  // pred: ^bb11
    return %21 : i32
  ^bb3:  // 2 preds: ^bb5, ^bb6
    %22 = llvm.load %5 : !llvm.ptr -> i64
    %23 = arith.trunci %22 : i64 to i32
    llvm.store %23, %6 : i32, !llvm.ptr
    %c99_i32 = arith.constant 99 : i32
    %24 = arith.cmpi ule, %23, %c99_i32 : i32
    %25 = arith.extui %24 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %26 = arith.cmpi ne, %25, %c0_i32_10 : i32
    cf.cond_br %26, ^bb9, ^bb10
  ^bb4:  // pred: ^bb1
    %c39_i32_11 = arith.constant 39 : i32
    llvm.store %c39_i32_11, %4 : i32, !llvm.ptr
    cf.br ^bb7
  ^bb5:  // pred: ^bb1
    %27 = llvm.load %0 : !llvm.ptr -> i64
    llvm.store %27, %5 : i64, !llvm.ptr
    cf.br ^bb3
  ^bb6:  // pred: ^bb8
    cf.br ^bb3
  ^bb7:  // 2 preds: ^bb4, ^bb7
    %28 = llvm.load %3 : !llvm.ptr -> i32
    %c9_i32 = arith.constant 9 : i32
    %29 = arith.addi %28, %c9_i32 : i32
    %30 = llvm.load %4 : !llvm.ptr -> i32
    %31 = arith.addi %29, %30 : i32
    llvm.store %31, %6 : i32, !llvm.ptr
    %c-4_i32 = arith.constant -4 : i32
    %32 = arith.addi %31, %c-4_i32 : i32
    %33 = llvm.load %0 : !llvm.ptr -> i64
    %34 = llvm.load %0 : !llvm.ptr -> i64
    %c10000_i64_12 = arith.constant 10000 : i64
    %35 = arith.divui %34, %c10000_i64_12 : i64
    %c0_i64_13 = arith.constant 0 : i64
    %36 = arith.cmpi eq, %c10000_i64_12, %c0_i64_13 : i64
    %37 = arith.select %36, %c0_i64_13, %35 : i64
    llvm.store %37, %5 : i64, !llvm.ptr
    %c10000_i64_14 = arith.constant 10000 : i64
    %38 = arith.muli %37, %c10000_i64_14 : i64
    %39 = arith.subi %33, %38 : i64
    %40 = arith.trunci %39 : i64 to i32
    llvm.store %40, %7 : i32, !llvm.ptr
    %c65535_i32 = arith.constant 65535 : i32
    %41 = arith.andi %40, %c65535_i32 : i32
    %c100_i32 = arith.constant 100 : i32
    %42 = arith.divui %41, %c100_i32 : i32
    %c0_i32_15 = arith.constant 0 : i32
    %43 = arith.cmpi eq, %c100_i32, %c0_i32_15 : i32
    %44 = arith.select %43, %c0_i32_15, %42 : i32
    llvm.store %44, %8 : i32, !llvm.ptr
    %c1_i32 = arith.constant 1 : i32
    %c31_i32 = arith.constant 31 : i32
    %45 = arith.cmpi ule, %c1_i32, %c31_i32 : i32
    %46 = scf.if %45 -> (i32) {
      %157 = arith.shli %44, %c1_i32 : i32
      scf.yield %157 : i32
    } else {
      %c0_i32_55 = arith.constant 0 : i32
      scf.yield %c0_i32_55 : i32
    }
    %c1048852_i32 = arith.constant 1048852 : i32
    %47 = arith.addi %46, %c1048852_i32 : i32
    %c0_i64_16 = arith.constant 0 : i64
    %48 = arith.extui %47 : i32 to i64
    %49 = arith.addi %48, %c0_i64_16 : i64
    %50 = llvm.getelementptr %13[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %51 = llvm.load %50 : !llvm.ptr -> i16
    %52 = arith.extui %51 : i16 to i32
    %c0_i64_17 = arith.constant 0 : i64
    %53 = arith.extui %32 : i32 to i64
    %54 = arith.addi %53, %c0_i64_17 : i64
    %55 = llvm.getelementptr %13[%54] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %56 = arith.trunci %52 : i32 to i16
    llvm.store %56, %55 : i16, !llvm.ptr
    %57 = llvm.load %6 : !llvm.ptr -> i32
    %c-2_i32 = arith.constant -2 : i32
    %58 = arith.addi %57, %c-2_i32 : i32
    %59 = llvm.load %7 : !llvm.ptr -> i32
    %60 = llvm.load %8 : !llvm.ptr -> i32
    %c100_i32_18 = arith.constant 100 : i32
    %61 = arith.muli %60, %c100_i32_18 : i32
    %62 = arith.subi %59, %61 : i32
    %c65535_i32_19 = arith.constant 65535 : i32
    %63 = arith.andi %62, %c65535_i32_19 : i32
    %c1_i32_20 = arith.constant 1 : i32
    %c31_i32_21 = arith.constant 31 : i32
    %64 = arith.cmpi ule, %c1_i32_20, %c31_i32_21 : i32
    %65 = scf.if %64 -> (i32) {
      %157 = arith.shli %63, %c1_i32_20 : i32
      scf.yield %157 : i32
    } else {
      %c0_i32_55 = arith.constant 0 : i32
      scf.yield %c0_i32_55 : i32
    }
    %c1048852_i32_22 = arith.constant 1048852 : i32
    %66 = arith.addi %65, %c1048852_i32_22 : i32
    %c0_i64_23 = arith.constant 0 : i64
    %67 = arith.extui %66 : i32 to i64
    %68 = arith.addi %67, %c0_i64_23 : i64
    %69 = llvm.getelementptr %13[%68] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %70 = llvm.load %69 : !llvm.ptr -> i16
    %71 = arith.extui %70 : i16 to i32
    %c0_i64_24 = arith.constant 0 : i64
    %72 = arith.extui %58 : i32 to i64
    %73 = arith.addi %72, %c0_i64_24 : i64
    %74 = llvm.getelementptr %13[%73] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %75 = arith.trunci %71 : i32 to i16
    llvm.store %75, %74 : i16, !llvm.ptr
    %76 = llvm.load %4 : !llvm.ptr -> i32
    %c-4_i32_25 = arith.constant -4 : i32
    %77 = arith.addi %76, %c-4_i32_25 : i32
    llvm.store %77, %4 : i32, !llvm.ptr
    %78 = llvm.load %0 : !llvm.ptr -> i64
    %c99999999_i64 = arith.constant 99999999 : i64
    %79 = arith.cmpi ugt, %78, %c99999999_i64 : i64
    %80 = arith.extui %79 : i1 to i64
    %81 = arith.trunci %80 : i64 to i32
    llvm.store %81, %6 : i32, !llvm.ptr
    %82 = llvm.load %5 : !llvm.ptr -> i64
    llvm.store %82, %0 : i64, !llvm.ptr
    %83 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i32_26 = arith.constant 0 : i32
    %84 = arith.cmpi ne, %83, %c0_i32_26 : i32
    cf.cond_br %84, ^bb7, ^bb8
  ^bb8:  // pred: ^bb7
    cf.br ^bb6
  ^bb9:  // 2 preds: ^bb3, ^bb10
    %85 = llvm.load %6 : !llvm.ptr -> i32
    %c10_i32 = arith.constant 10 : i32
    %86 = arith.cmpi ult, %85, %c10_i32 : i32
    %87 = arith.extui %86 : i1 to i32
    %c0_i32_27 = arith.constant 0 : i32
    %88 = arith.cmpi ne, %87, %c0_i32_27 : i32
    cf.cond_br %88, ^bb12, ^bb13
  ^bb10:  // pred: ^bb3
    %89 = llvm.load %3 : !llvm.ptr -> i32
    %c9_i32_28 = arith.constant 9 : i32
    %90 = arith.addi %89, %c9_i32_28 : i32
    %91 = llvm.load %4 : !llvm.ptr -> i32
    %c-2_i32_29 = arith.constant -2 : i32
    %92 = arith.addi %91, %c-2_i32_29 : i32
    llvm.store %92, %4 : i32, !llvm.ptr
    %93 = arith.addi %90, %92 : i32
    %94 = llvm.load %5 : !llvm.ptr -> i64
    %95 = arith.trunci %94 : i64 to i32
    llvm.store %95, %6 : i32, !llvm.ptr
    %96 = llvm.load %6 : !llvm.ptr -> i32
    %c65535_i32_30 = arith.constant 65535 : i32
    %97 = arith.andi %96, %c65535_i32_30 : i32
    %c100_i32_31 = arith.constant 100 : i32
    %98 = arith.divui %97, %c100_i32_31 : i32
    %c0_i32_32 = arith.constant 0 : i32
    %99 = arith.cmpi eq, %c100_i32_31, %c0_i32_32 : i32
    %100 = arith.select %99, %c0_i32_32, %98 : i32
    llvm.store %100, %6 : i32, !llvm.ptr
    %c100_i32_33 = arith.constant 100 : i32
    %101 = arith.muli %100, %c100_i32_33 : i32
    %102 = arith.subi %95, %101 : i32
    %c65535_i32_34 = arith.constant 65535 : i32
    %103 = arith.andi %102, %c65535_i32_34 : i32
    %c1_i32_35 = arith.constant 1 : i32
    %c31_i32_36 = arith.constant 31 : i32
    %104 = arith.cmpi ule, %c1_i32_35, %c31_i32_36 : i32
    %105 = scf.if %104 -> (i32) {
      %157 = arith.shli %103, %c1_i32_35 : i32
      scf.yield %157 : i32
    } else {
      %c0_i32_55 = arith.constant 0 : i32
      scf.yield %c0_i32_55 : i32
    }
    %c1048852_i32_37 = arith.constant 1048852 : i32
    %106 = arith.addi %105, %c1048852_i32_37 : i32
    %c0_i64_38 = arith.constant 0 : i64
    %107 = arith.extui %106 : i32 to i64
    %108 = arith.addi %107, %c0_i64_38 : i64
    %109 = llvm.getelementptr %13[%108] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %110 = llvm.load %109 : !llvm.ptr -> i16
    %111 = arith.extui %110 : i16 to i32
    %c0_i64_39 = arith.constant 0 : i64
    %112 = arith.extui %93 : i32 to i64
    %113 = arith.addi %112, %c0_i64_39 : i64
    %114 = llvm.getelementptr %13[%113] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %115 = arith.trunci %111 : i32 to i16
    llvm.store %115, %114 : i16, !llvm.ptr
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb12, ^bb13
    %116 = llvm.load %2 : !llvm.ptr -> i32
    %117 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_40 = arith.constant 1 : i32
    %c0_i32_41 = arith.constant 0 : i32
    %118 = llvm.load %3 : !llvm.ptr -> i32
    %c9_i32_42 = arith.constant 9 : i32
    %119 = arith.addi %118, %c9_i32_42 : i32
    %120 = llvm.load %4 : !llvm.ptr -> i32
    %121 = arith.addi %119, %120 : i32
    %c39_i32_43 = arith.constant 39 : i32
    %122 = llvm.load %4 : !llvm.ptr -> i32
    %123 = arith.subi %c39_i32_43, %122 : i32
    %124 = call @f38(%arg0, %116, %117, %c1_i32_40, %c0_i32_41, %121, %123) : (!llvm.ptr, i32, i32, i32, i32, i32, i32) -> i32
    llvm.store %124, %4 : i32, !llvm.ptr
    %125 = llvm.load %3 : !llvm.ptr -> i32
    %c48_i32_44 = arith.constant 48 : i32
    %126 = arith.addi %125, %c48_i32_44 : i32
    llvm.store %126, %10 : i32, !llvm.ptr
    %127 = llvm.load %4 : !llvm.ptr -> i32
    cf.br ^bb2(%127 : i32)
  ^bb12:  // pred: ^bb9
    %128 = llvm.load %3 : !llvm.ptr -> i32
    %c9_i32_45 = arith.constant 9 : i32
    %129 = arith.addi %128, %c9_i32_45 : i32
    %130 = llvm.load %4 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %131 = arith.addi %130, %c-1_i32 : i32
    llvm.store %131, %4 : i32, !llvm.ptr
    %132 = arith.addi %129, %131 : i32
    %133 = llvm.load %6 : !llvm.ptr -> i32
    %c48_i32_46 = arith.constant 48 : i32
    %134 = arith.ori %133, %c48_i32_46 : i32
    %c0_i64_47 = arith.constant 0 : i64
    %135 = arith.extui %132 : i32 to i64
    %136 = arith.addi %135, %c0_i64_47 : i64
    %137 = llvm.getelementptr %13[%136] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %138 = arith.trunci %134 : i32 to i8
    llvm.store %138, %137 : i8, !llvm.ptr
    cf.br ^bb11
  ^bb13:  // pred: ^bb9
    %139 = llvm.load %3 : !llvm.ptr -> i32
    %c9_i32_48 = arith.constant 9 : i32
    %140 = arith.addi %139, %c9_i32_48 : i32
    %141 = llvm.load %4 : !llvm.ptr -> i32
    %c-2_i32_49 = arith.constant -2 : i32
    %142 = arith.addi %141, %c-2_i32_49 : i32
    llvm.store %142, %4 : i32, !llvm.ptr
    %143 = arith.addi %140, %142 : i32
    %144 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i32_50 = arith.constant 1 : i32
    %c31_i32_51 = arith.constant 31 : i32
    %145 = arith.cmpi ule, %c1_i32_50, %c31_i32_51 : i32
    %146 = scf.if %145 -> (i32) {
      %157 = arith.shli %144, %c1_i32_50 : i32
      scf.yield %157 : i32
    } else {
      %c0_i32_55 = arith.constant 0 : i32
      scf.yield %c0_i32_55 : i32
    }
    %c1048852_i32_52 = arith.constant 1048852 : i32
    %147 = arith.addi %146, %c1048852_i32_52 : i32
    %c0_i64_53 = arith.constant 0 : i64
    %148 = arith.extui %147 : i32 to i64
    %149 = arith.addi %148, %c0_i64_53 : i64
    %150 = llvm.getelementptr %13[%149] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %151 = llvm.load %150 : !llvm.ptr -> i16
    %152 = arith.extui %151 : i16 to i32
    %c0_i64_54 = arith.constant 0 : i64
    %153 = arith.extui %143 : i32 to i64
    %154 = arith.addi %153, %c0_i64_54 : i64
    %155 = llvm.getelementptr %13[%154] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %156 = arith.trunci %152 : i32 to i16
    llvm.store %156, %155 : i16, !llvm.ptr
    cf.br ^bb11
  }
  func.func @f43(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i64_4 = arith.constant 1 : i64
    %5 = llvm.alloca %c1_i64_4 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i64_5 = arith.constant 1 : i64
    %6 = llvm.alloca %c1_i64_5 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i64_6 = arith.constant 1 : i64
    %7 = llvm.alloca %c1_i64_6 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i64_7 = arith.constant 1 : i64
    %8 = llvm.alloca %c1_i64_7 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i64_8 = arith.constant 1 : i64
    %9 = llvm.alloca %c1_i64_8 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %c1_i64_9 = arith.constant 1 : i64
    %10 = llvm.alloca %c1_i64_9 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %10 : i32, !llvm.ptr
    %11 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %14 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %15 = arith.cmpi uge, %14, %c16_i32 : i32
    %16 = arith.extui %15 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %17 = arith.cmpi ne, %16, %c0_i32_10 : i32
    cf.cond_br %17, ^bb4, ^bb5
  ^bb2(%18: i32):  // pred: ^bb22
    return %18 : i32
  ^bb3:  // 2 preds: ^bb5, ^bb11
    %19 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_11 = arith.constant 0 : i32
    %20 = arith.cmpi eq, %19, %c0_i32_11 : i32
    %21 = arith.extui %20 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %22 = arith.cmpi ne, %21, %c0_i32_12 : i32
    cf.cond_br %22, ^bb22, ^bb23
  ^bb4:  // pred: ^bb1
    %23 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_13 = arith.constant 0 : i32
    %24 = llvm.load %0 : !llvm.ptr -> i32
    %25 = arith.subi %c0_i32_13, %24 : i32
    %c3_i32 = arith.constant 3 : i32
    %26 = arith.andi %25, %c3_i32 : i32
    llvm.store %26, %4 : i32, !llvm.ptr
    %27 = arith.addi %23, %26 : i32
    llvm.store %27, %5 : i32, !llvm.ptr
    %28 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i32_14 = arith.constant 0 : i32
    %29 = arith.cmpi eq, %28, %c0_i32_14 : i32
    %30 = arith.extui %29 : i1 to i32
    %c0_i32_15 = arith.constant 0 : i32
    %31 = arith.cmpi ne, %30, %c0_i32_15 : i32
    cf.cond_br %31, ^bb6, ^bb7
  ^bb5:  // pred: ^bb1
    %32 = llvm.load %0 : !llvm.ptr -> i32
    llvm.store %32, %3 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb6:  // 2 preds: ^bb4, ^bb8
    %33 = llvm.load %5 : !llvm.ptr -> i32
    %34 = llvm.load %2 : !llvm.ptr -> i32
    %35 = llvm.load %4 : !llvm.ptr -> i32
    %36 = arith.subi %34, %35 : i32
    llvm.store %36, %7 : i32, !llvm.ptr
    %c-4_i32 = arith.constant -4 : i32
    %37 = arith.andi %36, %c-4_i32 : i32
    llvm.store %37, %8 : i32, !llvm.ptr
    %38 = arith.addi %33, %37 : i32
    llvm.store %38, %3 : i32, !llvm.ptr
    %39 = llvm.load %1 : !llvm.ptr -> i32
    %40 = llvm.load %4 : !llvm.ptr -> i32
    %41 = arith.addi %39, %40 : i32
    llvm.store %41, %9 : i32, !llvm.ptr
    %c3_i32_16 = arith.constant 3 : i32
    %42 = arith.andi %41, %c3_i32_16 : i32
    %c0_i32_17 = arith.constant 0 : i32
    %43 = arith.cmpi eq, %42, %c0_i32_17 : i32
    %44 = arith.extui %43 : i1 to i32
    %c0_i32_18 = arith.constant 0 : i32
    %45 = arith.cmpi ne, %44, %c0_i32_18 : i32
    cf.cond_br %45, ^bb12, ^bb13
  ^bb7:  // pred: ^bb4
    %46 = llvm.load %0 : !llvm.ptr -> i32
    llvm.store %46, %3 : i32, !llvm.ptr
    %47 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %47, %6 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb8:  // pred: ^bb10
    cf.br ^bb6
  ^bb9:  // 2 preds: ^bb7, ^bb9
    %48 = llvm.load %3 : !llvm.ptr -> i32
    %49 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %50 = arith.extui %49 : i32 to i64
    %51 = arith.addi %50, %c0_i64 : i64
    %52 = llvm.getelementptr %13[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %53 = llvm.load %52 : !llvm.ptr -> i8
    %54 = arith.extui %53 : i8 to i32
    %c0_i64_19 = arith.constant 0 : i64
    %55 = arith.extui %48 : i32 to i64
    %56 = arith.addi %55, %c0_i64_19 : i64
    %57 = llvm.getelementptr %13[%56] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %58 = arith.trunci %54 : i32 to i8
    llvm.store %58, %57 : i8, !llvm.ptr
    %59 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i32 = arith.constant 1 : i32
    %60 = arith.addi %59, %c1_i32 : i32
    llvm.store %60, %6 : i32, !llvm.ptr
    %61 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_20 = arith.constant 1 : i32
    %62 = arith.addi %61, %c1_i32_20 : i32
    llvm.store %62, %3 : i32, !llvm.ptr
    %63 = llvm.load %5 : !llvm.ptr -> i32
    %64 = arith.cmpi ult, %62, %63 : i32
    %65 = arith.extui %64 : i1 to i32
    %c0_i32_21 = arith.constant 0 : i32
    %66 = arith.cmpi ne, %65, %c0_i32_21 : i32
    cf.cond_br %66, ^bb9, ^bb10
  ^bb10:  // pred: ^bb9
    cf.br ^bb8
  ^bb11:  // 4 preds: ^bb12, ^bb13, ^bb17, ^bb19
    %67 = llvm.load %7 : !llvm.ptr -> i32
    %c3_i32_22 = arith.constant 3 : i32
    %68 = arith.andi %67, %c3_i32_22 : i32
    llvm.store %68, %2 : i32, !llvm.ptr
    %69 = llvm.load %9 : !llvm.ptr -> i32
    %70 = llvm.load %8 : !llvm.ptr -> i32
    %71 = arith.addi %69, %70 : i32
    llvm.store %71, %1 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb12:  // 2 preds: ^bb6, ^bb15
    %72 = llvm.load %8 : !llvm.ptr -> i32
    %c1_i32_23 = arith.constant 1 : i32
    %73 = arith.cmpi slt, %72, %c1_i32_23 : i32
    %74 = arith.extui %73 : i1 to i32
    %c0_i32_24 = arith.constant 0 : i32
    %75 = arith.cmpi ne, %74, %c0_i32_24 : i32
    cf.cond_br %75, ^bb11, ^bb18
  ^bb13:  // pred: ^bb6
    %76 = llvm.load %8 : !llvm.ptr -> i32
    %c1_i32_25 = arith.constant 1 : i32
    %77 = arith.cmpi slt, %76, %c1_i32_25 : i32
    %78 = arith.extui %77 : i1 to i32
    %c0_i32_26 = arith.constant 0 : i32
    %79 = arith.cmpi ne, %78, %c0_i32_26 : i32
    cf.cond_br %79, ^bb11, ^bb14
  ^bb14:  // pred: ^bb13
    %80 = llvm.load %9 : !llvm.ptr -> i32
    %c3_i32_27 = arith.constant 3 : i32
    %c31_i32 = arith.constant 31 : i32
    %81 = arith.cmpi ule, %c3_i32_27, %c31_i32 : i32
    %82 = scf.if %81 -> (i32) {
      %161 = arith.shli %80, %c3_i32_27 : i32
      scf.yield %161 : i32
    } else {
      %c0_i32_49 = arith.constant 0 : i32
      scf.yield %c0_i32_49 : i32
    }
    llvm.store %82, %6 : i32, !llvm.ptr
    %c24_i32 = arith.constant 24 : i32
    %83 = arith.andi %82, %c24_i32 : i32
    llvm.store %83, %2 : i32, !llvm.ptr
    %84 = llvm.load %9 : !llvm.ptr -> i32
    %c-4_i32_28 = arith.constant -4 : i32
    %85 = arith.andi %84, %c-4_i32_28 : i32
    llvm.store %85, %10 : i32, !llvm.ptr
    %c4_i32 = arith.constant 4 : i32
    %86 = arith.addi %85, %c4_i32 : i32
    llvm.store %86, %1 : i32, !llvm.ptr
    %c0_i32_29 = arith.constant 0 : i32
    %87 = llvm.load %6 : !llvm.ptr -> i32
    %88 = arith.subi %c0_i32_29, %87 : i32
    %c24_i32_30 = arith.constant 24 : i32
    %89 = arith.andi %88, %c24_i32_30 : i32
    llvm.store %89, %4 : i32, !llvm.ptr
    %90 = llvm.load %10 : !llvm.ptr -> i32
    %c0_i64_31 = arith.constant 0 : i64
    %91 = arith.extui %90 : i32 to i64
    %92 = arith.addi %91, %c0_i64_31 : i64
    %93 = llvm.getelementptr %13[%92] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %94 = llvm.load %93 : !llvm.ptr -> i32
    llvm.store %94, %6 : i32, !llvm.ptr
    cf.br ^bb16
  ^bb15:  // no predecessors
    cf.br ^bb12
  ^bb16:  // 2 preds: ^bb14, ^bb16
    %95 = llvm.load %5 : !llvm.ptr -> i32
    %96 = llvm.load %6 : !llvm.ptr -> i32
    %97 = llvm.load %2 : !llvm.ptr -> i32
    %c31_i32_32 = arith.constant 31 : i32
    %98 = arith.cmpi ule, %97, %c31_i32_32 : i32
    %99 = scf.if %98 -> (i32) {
      %161 = arith.shrui %96, %97 : i32
      scf.yield %161 : i32
    } else {
      %c0_i32_49 = arith.constant 0 : i32
      scf.yield %c0_i32_49 : i32
    }
    %100 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_33 = arith.constant 0 : i64
    %101 = arith.extui %100 : i32 to i64
    %102 = arith.addi %101, %c0_i64_33 : i64
    %103 = llvm.getelementptr %13[%102] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %104 = llvm.load %103 : !llvm.ptr -> i32
    llvm.store %104, %6 : i32, !llvm.ptr
    %105 = llvm.load %4 : !llvm.ptr -> i32
    %c31_i32_34 = arith.constant 31 : i32
    %106 = arith.cmpi ule, %105, %c31_i32_34 : i32
    %107 = scf.if %106 -> (i32) {
      %161 = arith.shli %104, %105 : i32
      scf.yield %161 : i32
    } else {
      %c0_i32_49 = arith.constant 0 : i32
      scf.yield %c0_i32_49 : i32
    }
    %108 = arith.ori %99, %107 : i32
    %c0_i64_35 = arith.constant 0 : i64
    %109 = arith.extui %95 : i32 to i64
    %110 = arith.addi %109, %c0_i64_35 : i64
    %111 = llvm.getelementptr %13[%110] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %108, %111 : i32, !llvm.ptr
    %112 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32_36 = arith.constant 4 : i32
    %113 = arith.addi %112, %c4_i32_36 : i32
    llvm.store %113, %1 : i32, !llvm.ptr
    %114 = llvm.load %5 : !llvm.ptr -> i32
    %c4_i32_37 = arith.constant 4 : i32
    %115 = arith.addi %114, %c4_i32_37 : i32
    llvm.store %115, %5 : i32, !llvm.ptr
    %116 = llvm.load %3 : !llvm.ptr -> i32
    %117 = arith.cmpi ult, %115, %116 : i32
    %118 = arith.extui %117 : i1 to i32
    %c0_i32_38 = arith.constant 0 : i32
    %119 = arith.cmpi ne, %118, %c0_i32_38 : i32
    cf.cond_br %119, ^bb16, ^bb17
  ^bb17:  // pred: ^bb16
    cf.br ^bb11
  ^bb18:  // pred: ^bb12
    %120 = llvm.load %9 : !llvm.ptr -> i32
    llvm.store %120, %1 : i32, !llvm.ptr
    cf.br ^bb20
  ^bb19:  // pred: ^bb21
    cf.br ^bb11
  ^bb20:  // 2 preds: ^bb18, ^bb20
    %121 = llvm.load %5 : !llvm.ptr -> i32
    %122 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_39 = arith.constant 0 : i64
    %123 = arith.extui %122 : i32 to i64
    %124 = arith.addi %123, %c0_i64_39 : i64
    %125 = llvm.getelementptr %13[%124] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %126 = llvm.load %125 : !llvm.ptr -> i32
    %c0_i64_40 = arith.constant 0 : i64
    %127 = arith.extui %121 : i32 to i64
    %128 = arith.addi %127, %c0_i64_40 : i64
    %129 = llvm.getelementptr %13[%128] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %126, %129 : i32, !llvm.ptr
    %130 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32_41 = arith.constant 4 : i32
    %131 = arith.addi %130, %c4_i32_41 : i32
    llvm.store %131, %1 : i32, !llvm.ptr
    %132 = llvm.load %5 : !llvm.ptr -> i32
    %c4_i32_42 = arith.constant 4 : i32
    %133 = arith.addi %132, %c4_i32_42 : i32
    llvm.store %133, %5 : i32, !llvm.ptr
    %134 = llvm.load %3 : !llvm.ptr -> i32
    %135 = arith.cmpi ult, %133, %134 : i32
    %136 = arith.extui %135 : i1 to i32
    %c0_i32_43 = arith.constant 0 : i32
    %137 = arith.cmpi ne, %136, %c0_i32_43 : i32
    cf.cond_br %137, ^bb20, ^bb21
  ^bb21:  // pred: ^bb20
    cf.br ^bb19
  ^bb22:  // 2 preds: ^bb3, ^bb24
    %138 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%138 : i32)
  ^bb23:  // pred: ^bb3
    %139 = llvm.load %3 : !llvm.ptr -> i32
    %140 = llvm.load %2 : !llvm.ptr -> i32
    %141 = arith.addi %139, %140 : i32
    llvm.store %141, %5 : i32, !llvm.ptr
    cf.br ^bb25
  ^bb24:  // pred: ^bb26
    cf.br ^bb22
  ^bb25:  // 2 preds: ^bb23, ^bb25
    %142 = llvm.load %3 : !llvm.ptr -> i32
    %143 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_44 = arith.constant 0 : i64
    %144 = arith.extui %143 : i32 to i64
    %145 = arith.addi %144, %c0_i64_44 : i64
    %146 = llvm.getelementptr %13[%145] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %147 = llvm.load %146 : !llvm.ptr -> i8
    %148 = arith.extui %147 : i8 to i32
    %c0_i64_45 = arith.constant 0 : i64
    %149 = arith.extui %142 : i32 to i64
    %150 = arith.addi %149, %c0_i64_45 : i64
    %151 = llvm.getelementptr %13[%150] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %152 = arith.trunci %148 : i32 to i8
    llvm.store %152, %151 : i8, !llvm.ptr
    %153 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_46 = arith.constant 1 : i32
    %154 = arith.addi %153, %c1_i32_46 : i32
    llvm.store %154, %1 : i32, !llvm.ptr
    %155 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_47 = arith.constant 1 : i32
    %156 = arith.addi %155, %c1_i32_47 : i32
    llvm.store %156, %3 : i32, !llvm.ptr
    %157 = llvm.load %5 : !llvm.ptr -> i32
    %158 = arith.cmpi ult, %156, %157 : i32
    %159 = arith.extui %158 : i1 to i32
    %c0_i32_48 = arith.constant 0 : i32
    %160 = arith.cmpi ne, %159, %c0_i32_48 : i32
    cf.cond_br %160, ^bb25, ^bb26
  ^bb26:  // pred: ^bb25
    cf.br ^bb24
  }
  func.func @f44(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %3 = llvm.load %0 : !llvm.ptr -> i32
    %4 = llvm.load %1 : !llvm.ptr -> i32
    %5 = llvm.load %2 : !llvm.ptr -> i32
    %6 = call @f43(%arg0, %3, %4, %5) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%6 : i32)
  ^bb2(%7: i32):  // pred: ^bb1
    return %7 : i32
  }
  func.func private @dora_fn_wasm_table_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_copy(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_fill(!llvm.ptr, i32, i32, !llvm.ptr, i32)
  func.func private @dora_fn_wasm_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_table_set(!llvm.ptr, i32, i32, !llvm.ptr)
  func.func private @dora_fn_wasm_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_imported_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_func_ref(!llvm.ptr, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_data_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_elem_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_raise_trap(i32)
}
