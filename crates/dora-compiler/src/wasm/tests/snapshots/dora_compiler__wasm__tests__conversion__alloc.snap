---
source: crates/dora-compiler/src/wasm/tests/conversion.rs
expression: op
snapshot_kind: text
---
module {
  func.func @f0(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i64_4 = arith.constant 1 : i64
    %5 = llvm.alloca %c1_i64_4 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %11 = llvm.load %7 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %12 = arith.subi %11, %c16_i32 : i32
    llvm.store %12, %2 : i32, !llvm.ptr
    llvm.store %12, %7 : i32, !llvm.ptr
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c4_i64 : i64
    %16 = llvm.getelementptr %10[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load volatile %16 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %17, %3 : i32, !llvm.ptr
    %18 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %19 = arith.extui %18 : i32 to i64
    %20 = arith.addi %19, %c0_i64 : i64
    %21 = llvm.getelementptr %10[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %22 = llvm.load volatile %21 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %22, %4 : i32, !llvm.ptr
    %23 = arith.subi %17, %22 : i32
    llvm.store %23, %5 : i32, !llvm.ptr
    %24 = llvm.load %3 : !llvm.ptr -> i32
    %25 = llvm.load %4 : !llvm.ptr -> i32
    %26 = arith.cmpi eq, %24, %25 : i32
    %27 = arith.extui %26 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %28 = arith.cmpi eq, %27, %c0_i32_5 : i32
    %29 = arith.extui %28 : i1 to i32
    %c0_i32_6 = arith.constant 0 : i32
    %30 = arith.cmpi ne, %29, %c0_i32_6 : i32
    cf.cond_br %30, ^bb5, ^bb6
  ^bb2:  // pred: ^bb4
    return
  ^bb3:  // 2 preds: ^bb7, ^bb8
    %31 = llvm.load %4 : !llvm.ptr -> i32
    %32 = llvm.load %5 : !llvm.ptr -> i32
    call @f62(%arg0, %31, %32) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb4:  // 2 preds: ^bb6, ^bb9
    %33 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %34 = arith.addi %33, %c4_i32 : i32
    %c8_i32 = arith.constant 8 : i32
    %35 = arith.addi %34, %c8_i32 : i32
    llvm.store %35, %4 : i32, !llvm.ptr
    %c0_i32_7 = arith.constant 0 : i32
    %c0_i64_8 = arith.constant 0 : i64
    %36 = arith.extui %35 : i32 to i64
    %37 = arith.addi %36, %c0_i64_8 : i64
    %38 = llvm.getelementptr %10[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_7, %38 {alignment = 1 : i64} : i32, !llvm.ptr
    %39 = llvm.load %2 : !llvm.ptr -> i32
    %40 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %41 = arith.extui %39 : i32 to i64
    %42 = arith.addi %41, %c8_i64 : i64
    %43 = llvm.getelementptr %10[%42] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %40, %43 {alignment = 1 : i64} : i32, !llvm.ptr
    %44 = llvm.load %2 : !llvm.ptr -> i32
    %45 = llvm.load %5 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c31_i32 = arith.constant 31 : i32
    %46 = arith.cmpi ule, %c2_i32, %c31_i32 : i32
    %47 = scf.if %46 -> (i32) {
      %89 = arith.shrui %45, %c2_i32 : i32
      scf.yield %89 : i32
    } else {
      %c0_i32_25 = arith.constant 0 : i32
      scf.yield %c0_i32_25 : i32
    }
    %c4_i64_9 = arith.constant 4 : i64
    %48 = arith.extui %44 : i32 to i64
    %49 = arith.addi %48, %c4_i64_9 : i64
    %50 = llvm.getelementptr %10[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %47, %50 {alignment = 1 : i64} : i32, !llvm.ptr
    %51 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i32_10 = arith.constant 4 : i32
    %52 = arith.addi %51, %c4_i32_10 : i32
    %53 = llvm.load %1 : !llvm.ptr -> i32
    call @f1(%arg0, %52, %53) : (!llvm.ptr, i32, i32) -> ()
    %54 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_11 = arith.constant 8 : i32
    %55 = arith.addi %54, %c8_i32_11 : i32
    %56 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_12 = arith.constant 0 : i64
    %57 = arith.extui %56 : i32 to i64
    %58 = arith.addi %57, %c0_i64_12 : i64
    %59 = llvm.getelementptr %10[%58] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %60 = llvm.load volatile %59 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_13 = arith.constant 0 : i64
    %61 = arith.extui %55 : i32 to i64
    %62 = arith.addi %61, %c0_i64_13 : i64
    %63 = llvm.getelementptr %10[%62] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %60, %63 {alignment = 1 : i64} : i32, !llvm.ptr
    %64 = llvm.load %0 : !llvm.ptr -> i32
    %65 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_14 = arith.constant 4 : i64
    %66 = arith.extui %65 : i32 to i64
    %67 = arith.addi %66, %c4_i64_14 : i64
    %68 = llvm.getelementptr %10[%67] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %69 = llvm.load volatile %68 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_15 = arith.constant 0 : i64
    %70 = arith.extui %64 : i32 to i64
    %71 = arith.addi %70, %c0_i64_15 : i64
    %72 = llvm.getelementptr %10[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %69, %72 {alignment = 1 : i64} : i64, !llvm.ptr
    %73 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_16 = arith.constant 16 : i32
    %74 = arith.addi %73, %c16_i32_16 : i32
    llvm.store %74, %7 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb5:  // pred: ^bb1
    %75 = llvm.load %5 : !llvm.ptr -> i32
    %c2147483644_i32 = arith.constant 2147483644 : i32
    %76 = arith.cmpi ule, %75, %c2147483644_i32 : i32
    %77 = arith.extui %76 : i1 to i32
    %c0_i32_17 = arith.constant 0 : i32
    %78 = arith.cmpi ne, %77, %c0_i32_17 : i32
    cf.cond_br %78, ^bb7, ^bb8
  ^bb6:  // pred: ^bb1
    %c4_i32_18 = arith.constant 4 : i32
    llvm.store %c4_i32_18, %3 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb7:  // pred: ^bb5
    %c0_i32_19 = arith.constant 0 : i32
    %c1049537_i64 = arith.constant 1049537 : i64
    %79 = arith.extui %c0_i32_19 : i32 to i64
    %80 = arith.addi %79, %c1049537_i64 : i64
    %81 = llvm.getelementptr %10[%80] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %82 = llvm.load volatile %81 {alignment = 1 : i64} : !llvm.ptr -> i8
    %83 = arith.extui %82 : i8 to i32
    %c4_i32_20 = arith.constant 4 : i32
    llvm.store %c4_i32_20, %4 : i32, !llvm.ptr
    %84 = llvm.load %5 : !llvm.ptr -> i32
    %c4_i32_21 = arith.constant 4 : i32
    %85 = call @f17(%arg0, %84, %c4_i32_21) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %85, %3 : i32, !llvm.ptr
    %c0_i32_22 = arith.constant 0 : i32
    %86 = arith.cmpi eq, %85, %c0_i32_22 : i32
    %87 = arith.extui %86 : i1 to i32
    %c0_i32_23 = arith.constant 0 : i32
    %88 = arith.cmpi ne, %87, %c0_i32_23 : i32
    cf.cond_br %88, ^bb3, ^bb9
  ^bb8:  // pred: ^bb5
    %c0_i32_24 = arith.constant 0 : i32
    llvm.store %c0_i32_24, %4 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb9:  // pred: ^bb7
    cf.br ^bb4
  }
  func.func @f1(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i64_4 = arith.constant 1 : i64
    %5 = llvm.alloca %c1_i64_4 x i64 : (i64) -> !llvm.ptr
    llvm.store %c0_i64, %5 : i64, !llvm.ptr
    %c0_i32_5 = arith.constant 0 : i32
    %c1_i64_6 = arith.constant 1 : i64
    %6 = llvm.alloca %c1_i64_6 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32_5, %6 : i32, !llvm.ptr
    %7 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %12 = llvm.load %8 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %13 = arith.subi %12, %c32_i32 : i32
    llvm.store %13, %2 : i32, !llvm.ptr
    llvm.store %13, %8 : i32, !llvm.ptr
    %14 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %15 = arith.extui %14 : i32 to i64
    %16 = arith.addi %15, %c4_i64 : i64
    %17 = llvm.getelementptr %11[%16] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %18 = llvm.load volatile %17 {alignment = 1 : i64} : !llvm.ptr -> i32
    %19 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_7 = arith.constant 0 : i64
    %20 = arith.extui %19 : i32 to i64
    %21 = arith.addi %20, %c0_i64_7 : i64
    %22 = llvm.getelementptr %11[%21] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %23 = llvm.load volatile %22 {alignment = 1 : i64} : !llvm.ptr -> i32
    %24 = arith.subi %18, %23 : i32
    %c2_i32 = arith.constant 2 : i32
    %c31_i32 = arith.constant 31 : i32
    %25 = arith.cmpi ule, %c2_i32, %c31_i32 : i32
    %26 = scf.if %25 -> (i32) {
      %137 = arith.shrui %24, %c2_i32 : i32
      scf.yield %137 : i32
    } else {
      %c0_i32_34 = arith.constant 0 : i32
      scf.yield %c0_i32_34 : i32
    }
    llvm.store %26, %3 : i32, !llvm.ptr
    %27 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_8 = arith.constant 0 : i64
    %28 = arith.extui %27 : i32 to i64
    %29 = arith.addi %28, %c0_i64_8 : i64
    %30 = llvm.getelementptr %11[%29] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %31 = llvm.load volatile %30 {alignment = 1 : i64} : !llvm.ptr -> i32
    %32 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %33 = arith.extui %32 : i32 to i64
    %34 = arith.addi %33, %c8_i64 : i64
    %35 = llvm.getelementptr %11[%34] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %36 = llvm.load volatile %35 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %36, %4 : i32, !llvm.ptr
    %37 = arith.subi %31, %36 : i32
    %38 = arith.cmpi ule, %26, %37 : i32
    %39 = arith.extui %38 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %40 = arith.cmpi ne, %39, %c0_i32_9 : i32
    cf.cond_br %40, ^bb3, ^bb4
  ^bb2:  // pred: ^bb5
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %41 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_10 = arith.constant 4 : i64
    %42 = arith.extui %41 : i32 to i64
    %43 = arith.addi %42, %c4_i64_10 : i64
    %44 = llvm.getelementptr %11[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %45 = llvm.load volatile %44 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %45, %3 : i32, !llvm.ptr
    %46 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %47 = arith.addi %46, %c8_i32 : i32
    %c16_i32 = arith.constant 16 : i32
    %48 = arith.addi %47, %c16_i32 : i32
    %49 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32_11 = arith.constant 16 : i32
    %50 = arith.addi %49, %c16_i32_11 : i32
    %c0_i64_12 = arith.constant 0 : i64
    %51 = arith.extui %50 : i32 to i64
    %52 = arith.addi %51, %c0_i64_12 : i64
    %53 = llvm.getelementptr %11[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %54 = llvm.load volatile %53 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_13 = arith.constant 0 : i64
    %55 = arith.extui %48 : i32 to i64
    %56 = arith.addi %55, %c0_i64_13 : i64
    %57 = llvm.getelementptr %11[%56] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %54, %57 {alignment = 1 : i64} : i32, !llvm.ptr
    %58 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_14 = arith.constant 8 : i32
    %59 = arith.addi %58, %c8_i32_14 : i32
    %c8_i32_15 = arith.constant 8 : i32
    %60 = arith.addi %59, %c8_i32_15 : i32
    %61 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_16 = arith.constant 8 : i32
    %62 = arith.addi %61, %c8_i32_16 : i32
    %c0_i64_17 = arith.constant 0 : i64
    %63 = arith.extui %62 : i32 to i64
    %64 = arith.addi %63, %c0_i64_17 : i64
    %65 = llvm.getelementptr %11[%64] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %66 = llvm.load volatile %65 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_18 = arith.constant 0 : i64
    %67 = arith.extui %60 : i32 to i64
    %68 = arith.addi %67, %c0_i64_18 : i64
    %69 = llvm.getelementptr %11[%68] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %66, %69 {alignment = 1 : i64} : i64, !llvm.ptr
    %70 = llvm.load %2 : !llvm.ptr -> i32
    %71 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_19 = arith.constant 0 : i64
    %72 = arith.extui %71 : i32 to i64
    %73 = arith.addi %72, %c0_i64_19 : i64
    %74 = llvm.getelementptr %11[%73] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %75 = llvm.load volatile %74 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %75, %5 : i64, !llvm.ptr
    %c8_i64_20 = arith.constant 8 : i64
    %76 = arith.extui %70 : i32 to i64
    %77 = arith.addi %76, %c8_i64_20 : i64
    %78 = llvm.getelementptr %11[%77] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %75, %78 {alignment = 1 : i64} : i64, !llvm.ptr
    %79 = llvm.load %5 : !llvm.ptr -> i64
    %80 = arith.trunci %79 : i64 to i32
    llvm.store %80, %1 : i32, !llvm.ptr
    %81 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %82 = arith.extui %81 : i32 to i64
    %83 = arith.addi %82, %c12_i64 : i64
    %84 = llvm.getelementptr %11[%83] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %85 = llvm.load volatile %84 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %85, %6 : i32, !llvm.ptr
    %86 = arith.cmpi eq, %80, %85 : i32
    %87 = arith.extui %86 : i1 to i32
    %c0_i32_21 = arith.constant 0 : i32
    %88 = arith.cmpi ne, %87, %c0_i32_21 : i32
    cf.cond_br %88, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %89 = llvm.load %0 : !llvm.ptr -> i32
    %90 = llvm.load %4 : !llvm.ptr -> i32
    %91 = llvm.load %3 : !llvm.ptr -> i32
    call @f2(%arg0, %89, %90, %91) : (!llvm.ptr, i32, i32, i32) -> ()
    %92 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_22 = arith.constant 8 : i64
    %93 = arith.extui %92 : i32 to i64
    %94 = arith.addi %93, %c8_i64_22 : i64
    %95 = llvm.getelementptr %11[%94] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %96 = llvm.load volatile %95 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %96, %4 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb7
    %97 = llvm.load %0 : !llvm.ptr -> i32
    %98 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i64_23 = arith.constant 8 : i64
    %99 = arith.extui %97 : i32 to i64
    %100 = arith.addi %99, %c8_i64_23 : i64
    %101 = llvm.getelementptr %11[%100] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %98, %101 {alignment = 1 : i64} : i32, !llvm.ptr
    %102 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_24 = arith.constant 8 : i32
    %103 = arith.addi %102, %c8_i32_24 : i32
    call @f3(%arg0, %103) : (!llvm.ptr, i32) -> ()
    %104 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32_25 = arith.constant 32 : i32
    %105 = arith.addi %104, %c32_i32_25 : i32
    llvm.store %105, %8 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb6:  // pred: ^bb3
    %106 = llvm.load %3 : !llvm.ptr -> i32
    %107 = llvm.load %4 : !llvm.ptr -> i32
    %c2_i32_26 = arith.constant 2 : i32
    %c31_i32_27 = arith.constant 31 : i32
    %108 = arith.cmpi ule, %c2_i32_26, %c31_i32_27 : i32
    %109 = scf.if %108 -> (i32) {
      %137 = arith.shli %107, %c2_i32_26 : i32
      scf.yield %137 : i32
    } else {
      %c0_i32_34 = arith.constant 0 : i32
      scf.yield %c0_i32_34 : i32
    }
    %110 = arith.addi %106, %109 : i32
    llvm.store %110, %3 : i32, !llvm.ptr
    cf.br ^bb8
  ^bb7:  // pred: ^bb9
    %111 = llvm.load %2 : !llvm.ptr -> i32
    %112 = llvm.load %6 : !llvm.ptr -> i32
    %c8_i64_28 = arith.constant 8 : i64
    %113 = arith.extui %111 : i32 to i64
    %114 = arith.addi %113, %c8_i64_28 : i64
    %115 = llvm.getelementptr %11[%114] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %112, %115 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb5
  ^bb8:  // 2 preds: ^bb6, ^bb8
    %116 = llvm.load %3 : !llvm.ptr -> i32
    %117 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_29 = arith.constant 0 : i64
    %118 = arith.extui %117 : i32 to i64
    %119 = arith.addi %118, %c0_i64_29 : i64
    %120 = llvm.getelementptr %11[%119] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %121 = llvm.load volatile %120 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_30 = arith.constant 0 : i64
    %122 = arith.extui %116 : i32 to i64
    %123 = arith.addi %122, %c0_i64_30 : i64
    %124 = llvm.getelementptr %11[%123] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %121, %124 {alignment = 1 : i64} : i32, !llvm.ptr
    %125 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %126 = arith.addi %125, %c4_i32 : i32
    llvm.store %126, %3 : i32, !llvm.ptr
    %127 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i32 = arith.constant 1 : i32
    %128 = arith.addi %127, %c1_i32 : i32
    llvm.store %128, %4 : i32, !llvm.ptr
    %129 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32_31 = arith.constant 4 : i32
    %130 = arith.addi %129, %c4_i32_31 : i32
    llvm.store %130, %1 : i32, !llvm.ptr
    %131 = llvm.load %6 : !llvm.ptr -> i32
    %132 = arith.cmpi eq, %130, %131 : i32
    %133 = arith.extui %132 : i1 to i32
    %c0_i32_32 = arith.constant 0 : i32
    %134 = arith.cmpi eq, %133, %c0_i32_32 : i32
    %135 = arith.extui %134 : i1 to i32
    %c0_i32_33 = arith.constant 0 : i32
    %136 = arith.cmpi ne, %135, %c0_i32_33 : i32
    cf.cond_br %136, ^bb8, ^bb9
  ^bb9:  // pred: ^bb8
    cf.br ^bb7
  }
  func.func @f2(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %10 = arith.subi %9, %c16_i32 : i32
    llvm.store %10, %3 : i32, !llvm.ptr
    llvm.store %10, %5 : i32, !llvm.ptr
    %11 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %12 = arith.addi %11, %c8_i32 : i32
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %14 = llvm.load %1 : !llvm.ptr -> i32
    %15 = llvm.load %2 : !llvm.ptr -> i32
    call @f5(%arg0, %12, %13, %14, %15) : (!llvm.ptr, i32, i32, i32, i32) -> ()
    %16 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %17 = arith.extui %16 : i32 to i64
    %18 = arith.addi %17, %c8_i64 : i64
    %19 = llvm.getelementptr %8[%18] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %20 = llvm.load volatile %19 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %20, %2 : i32, !llvm.ptr
    %c-2147483647_i32 = arith.constant -2147483647 : i32
    %21 = arith.cmpi eq, %20, %c-2147483647_i32 : i32
    %22 = arith.extui %21 : i1 to i32
    %c0_i32_3 = arith.constant 0 : i32
    %23 = arith.cmpi ne, %22, %c0_i32_3 : i32
    cf.cond_br %23, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // pred: ^bb1
    %24 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_4 = arith.constant 16 : i32
    %25 = arith.addi %24, %c16_i32_4 : i32
    llvm.store %25, %5 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %26 = llvm.load %2 : !llvm.ptr -> i32
    %27 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %28 = arith.extui %27 : i32 to i64
    %29 = arith.addi %28, %c12_i64 : i64
    %30 = llvm.getelementptr %8[%29] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %31 = llvm.load volatile %30 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f62(%arg0, %26, %31) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  }
  func.func @f3(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %5 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %9 = arith.extui %8 : i32 to i64
    %10 = arith.addi %9, %c4_i64 : i64
    %11 = llvm.getelementptr %7[%10] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %12 = llvm.load volatile %11 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %12, %1 : i32, !llvm.ptr
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c0_i64 : i64
    %16 = llvm.getelementptr %7[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load volatile %16 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %17, %2 : i32, !llvm.ptr
    %18 = llvm.load %0 : !llvm.ptr -> i32
    %c17179869188_i64 = arith.constant 17179869188 : i64
    %c0_i64_4 = arith.constant 0 : i64
    %19 = arith.extui %18 : i32 to i64
    %20 = arith.addi %19, %c0_i64_4 : i64
    %21 = llvm.getelementptr %7[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c17179869188_i64, %21 {alignment = 1 : i64} : i64, !llvm.ptr
    %22 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %23 = arith.extui %22 : i32 to i64
    %24 = arith.addi %23, %c16_i64 : i64
    %25 = llvm.getelementptr %7[%24] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %26 = llvm.load volatile %25 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %26, %3 : i32, !llvm.ptr
    %27 = llvm.load %1 : !llvm.ptr -> i32
    %28 = llvm.load %2 : !llvm.ptr -> i32
    %29 = arith.cmpi eq, %27, %28 : i32
    %30 = arith.extui %29 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %31 = arith.cmpi ne, %30, %c0_i32_5 : i32
    cf.cond_br %31, ^bb5, ^bb6
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 3 preds: ^bb4, ^bb5, ^bb6
    cf.br ^bb2
  ^bb4:  // 4 preds: ^bb7, ^bb8, ^bb9, ^bb10
    %32 = llvm.load %1 : !llvm.ptr -> i32
    %33 = llvm.load %0 : !llvm.ptr -> i32
    %34 = llvm.load %3 : !llvm.ptr -> i32
    %35 = arith.addi %33, %34 : i32
    %c0_i64_6 = arith.constant 0 : i64
    %36 = arith.extui %32 : i32 to i64
    %37 = arith.addi %36, %c0_i64_6 : i64
    %38 = llvm.getelementptr %7[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %35, %38 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // pred: ^bb1
    %39 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_7 = arith.constant 0 : i32
    %40 = arith.cmpi eq, %39, %c0_i32_7 : i32
    %41 = arith.extui %40 : i1 to i32
    %c0_i32_8 = arith.constant 0 : i32
    %42 = arith.cmpi ne, %41, %c0_i32_8 : i32
    cf.cond_br %42, ^bb3, ^bb9
  ^bb6:  // pred: ^bb1
    %43 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_9 = arith.constant 0 : i32
    %44 = arith.cmpi eq, %43, %c0_i32_9 : i32
    %45 = arith.extui %44 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %46 = arith.cmpi ne, %45, %c0_i32_10 : i32
    cf.cond_br %46, ^bb3, ^bb7
  ^bb7:  // pred: ^bb6
    %47 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %48 = arith.extui %47 : i32 to i64
    %49 = arith.addi %48, %c8_i64 : i64
    %50 = llvm.getelementptr %7[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %51 = llvm.load volatile %50 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %51, %2 : i32, !llvm.ptr
    %c8_i32 = arith.constant 8 : i32
    %52 = arith.addi %51, %c8_i32 : i32
    llvm.store %52, %1 : i32, !llvm.ptr
    %53 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %54 = arith.extui %53 : i32 to i64
    %55 = arith.addi %54, %c12_i64 : i64
    %56 = llvm.getelementptr %7[%55] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %57 = llvm.load volatile %56 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %57, %4 : i32, !llvm.ptr
    %58 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_11 = arith.constant 8 : i64
    %59 = arith.extui %58 : i32 to i64
    %60 = arith.addi %59, %c8_i64_11 : i64
    %61 = llvm.getelementptr %7[%60] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %62 = llvm.load volatile %61 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %62, %0 : i32, !llvm.ptr
    %63 = arith.cmpi eq, %57, %62 : i32
    %64 = arith.extui %63 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %65 = arith.cmpi ne, %64, %c0_i32_12 : i32
    cf.cond_br %65, ^bb4, ^bb8
  ^bb8:  // pred: ^bb7
    %66 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_13 = arith.constant 4 : i64
    %67 = arith.extui %66 : i32 to i64
    %68 = arith.addi %67, %c4_i64_13 : i64
    %69 = llvm.getelementptr %7[%68] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %70 = llvm.load volatile %69 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %70, %2 : i32, !llvm.ptr
    %71 = llvm.load %0 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c31_i32 = arith.constant 31 : i32
    %72 = arith.cmpi ule, %c2_i32, %c31_i32 : i32
    %73 = scf.if %72 -> (i32) {
      %121 = arith.shli %71, %c2_i32 : i32
      scf.yield %121 : i32
    } else {
      %c0_i32_30 = arith.constant 0 : i32
      scf.yield %c0_i32_30 : i32
    }
    %74 = arith.addi %70, %73 : i32
    %75 = llvm.load %2 : !llvm.ptr -> i32
    %76 = llvm.load %4 : !llvm.ptr -> i32
    %c2_i32_14 = arith.constant 2 : i32
    %c31_i32_15 = arith.constant 31 : i32
    %77 = arith.cmpi ule, %c2_i32_14, %c31_i32_15 : i32
    %78 = scf.if %77 -> (i32) {
      %121 = arith.shli %76, %c2_i32_14 : i32
      scf.yield %121 : i32
    } else {
      %c0_i32_30 = arith.constant 0 : i32
      scf.yield %c0_i32_30 : i32
    }
    %79 = arith.addi %75, %78 : i32
    %80 = llvm.load %3 : !llvm.ptr -> i32
    %c2_i32_16 = arith.constant 2 : i32
    %c31_i32_17 = arith.constant 31 : i32
    %81 = arith.cmpi ule, %c2_i32_16, %c31_i32_17 : i32
    %82 = scf.if %81 -> (i32) {
      %121 = arith.shli %80, %c2_i32_16 : i32
      scf.yield %121 : i32
    } else {
      %c0_i32_30 = arith.constant 0 : i32
      scf.yield %c0_i32_30 : i32
    }
    %83 = call @f87(%arg0, %74, %79, %82) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb4
  ^bb9:  // pred: ^bb5
    %84 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_18 = arith.constant 8 : i64
    %85 = arith.extui %84 : i32 to i64
    %86 = arith.addi %85, %c8_i64_18 : i64
    %87 = llvm.getelementptr %7[%86] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %88 = llvm.load volatile %87 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %88, %2 : i32, !llvm.ptr
    %c8_i32_19 = arith.constant 8 : i32
    %89 = arith.addi %88, %c8_i32_19 : i32
    llvm.store %89, %1 : i32, !llvm.ptr
    %90 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64_20 = arith.constant 12 : i64
    %91 = arith.extui %90 : i32 to i64
    %92 = arith.addi %91, %c12_i64_20 : i64
    %93 = llvm.getelementptr %7[%92] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %94 = llvm.load volatile %93 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %94, %4 : i32, !llvm.ptr
    %95 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_21 = arith.constant 8 : i64
    %96 = arith.extui %95 : i32 to i64
    %97 = arith.addi %96, %c8_i64_21 : i64
    %98 = llvm.getelementptr %7[%97] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %99 = llvm.load volatile %98 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %99, %0 : i32, !llvm.ptr
    %100 = arith.cmpi eq, %94, %99 : i32
    %101 = arith.extui %100 : i1 to i32
    %c0_i32_22 = arith.constant 0 : i32
    %102 = arith.cmpi ne, %101, %c0_i32_22 : i32
    cf.cond_br %102, ^bb4, ^bb10
  ^bb10:  // pred: ^bb9
    %103 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_23 = arith.constant 4 : i64
    %104 = arith.extui %103 : i32 to i64
    %105 = arith.addi %104, %c4_i64_23 : i64
    %106 = llvm.getelementptr %7[%105] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %107 = llvm.load volatile %106 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %107, %2 : i32, !llvm.ptr
    %108 = llvm.load %0 : !llvm.ptr -> i32
    %c2_i32_24 = arith.constant 2 : i32
    %c31_i32_25 = arith.constant 31 : i32
    %109 = arith.cmpi ule, %c2_i32_24, %c31_i32_25 : i32
    %110 = scf.if %109 -> (i32) {
      %121 = arith.shli %108, %c2_i32_24 : i32
      scf.yield %121 : i32
    } else {
      %c0_i32_30 = arith.constant 0 : i32
      scf.yield %c0_i32_30 : i32
    }
    %111 = arith.addi %107, %110 : i32
    %112 = llvm.load %2 : !llvm.ptr -> i32
    %113 = llvm.load %4 : !llvm.ptr -> i32
    %c2_i32_26 = arith.constant 2 : i32
    %c31_i32_27 = arith.constant 31 : i32
    %114 = arith.cmpi ule, %c2_i32_26, %c31_i32_27 : i32
    %115 = scf.if %114 -> (i32) {
      %121 = arith.shli %113, %c2_i32_26 : i32
      scf.yield %121 : i32
    } else {
      %c0_i32_30 = arith.constant 0 : i32
      scf.yield %c0_i32_30 : i32
    }
    %116 = arith.addi %112, %115 : i32
    %117 = llvm.load %3 : !llvm.ptr -> i32
    %c2_i32_28 = arith.constant 2 : i32
    %c31_i32_29 = arith.constant 31 : i32
    %118 = arith.cmpi ule, %c2_i32_28, %c31_i32_29 : i32
    %119 = scf.if %118 -> (i32) {
      %121 = arith.shli %117, %c2_i32_28 : i32
      scf.yield %121 : i32
    } else {
      %c0_i32_30 = arith.constant 0 : i32
      scf.yield %c0_i32_30 : i32
    }
    %120 = call @f87(%arg0, %111, %116, %119) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb4
  }
  func.func @f4(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_4 = arith.constant 1 : i64
    %5 = llvm.alloca %c1_i64_4 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_5 = arith.constant 0 : i32
    %10 = arith.cmpi eq, %9, %c0_i32_5 : i32
    %11 = arith.extui %10 : i1 to i32
    %c0_i32_6 = arith.constant 0 : i32
    %12 = arith.cmpi ne, %11, %c0_i32_6 : i32
    cf.cond_br %12, ^bb8, ^bb9
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb4, ^bb19
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %14 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %15 = arith.extui %13 : i32 to i64
    %16 = arith.addi %15, %c0_i64 : i64
    %17 = llvm.getelementptr %8[%16] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %14, %17 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // 3 preds: ^bb7, ^bb8, ^bb18
    %c1_i32 = arith.constant 1 : i32
    llvm.store %c1_i32, %2 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // 3 preds: ^bb6, ^bb11, ^bb14
    %18 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_7 = arith.constant 0 : i32
    %19 = arith.cmpi eq, %18, %c0_i32_7 : i32
    %20 = arith.extui %19 : i1 to i32
    %c0_i32_8 = arith.constant 0 : i32
    %21 = arith.cmpi ne, %20, %c0_i32_8 : i32
    cf.cond_br %21, ^bb18, ^bb19
  ^bb6:  // 2 preds: ^bb12, ^bb15
    %22 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %22, %3 : i32, !llvm.ptr
    cf.br ^bb5
  ^bb7:  // pred: ^bb9
    %23 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_9 = arith.constant 0 : i32
    %c4_i64 = arith.constant 4 : i64
    %24 = arith.extui %23 : i32 to i64
    %25 = arith.addi %24, %c4_i64 : i64
    %26 = llvm.getelementptr %8[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_9, %26 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb4
  ^bb8:  // pred: ^bb1
    %27 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_10 = arith.constant 0 : i32
    %c4_i64_11 = arith.constant 4 : i64
    %28 = arith.extui %27 : i32 to i64
    %29 = arith.addi %28, %c4_i64_11 : i64
    %30 = llvm.getelementptr %8[%29] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_10, %30 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb4
  ^bb9:  // pred: ^bb1
    %31 = llvm.load %2 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %32 = arith.cmpi sle, %31, %c-1_i32 : i32
    %33 = arith.extui %32 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %34 = arith.cmpi ne, %33, %c0_i32_12 : i32
    cf.cond_br %34, ^bb7, ^bb10
  ^bb10:  // pred: ^bb9
    %35 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64_13 = arith.constant 4 : i64
    %36 = arith.extui %35 : i32 to i64
    %37 = arith.addi %36, %c4_i64_13 : i64
    %38 = llvm.getelementptr %8[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %39 = llvm.load volatile %38 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_14 = arith.constant 0 : i32
    %40 = arith.cmpi eq, %39, %c0_i32_14 : i32
    %41 = arith.extui %40 : i1 to i32
    %c0_i32_15 = arith.constant 0 : i32
    %42 = arith.cmpi ne, %41, %c0_i32_15 : i32
    cf.cond_br %42, ^bb12, ^bb13
  ^bb11:  // 2 preds: ^bb16, ^bb17
    %43 = llvm.load %2 : !llvm.ptr -> i32
    %44 = llvm.load %1 : !llvm.ptr -> i32
    %45 = call @f17(%arg0, %43, %44) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %45, %3 : i32, !llvm.ptr
    cf.br ^bb5
  ^bb12:  // pred: ^bb10
    %46 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_16 = arith.constant 0 : i32
    %47 = arith.cmpi eq, %46, %c0_i32_16 : i32
    %48 = arith.extui %47 : i1 to i32
    %c0_i32_17 = arith.constant 0 : i32
    %49 = arith.cmpi ne, %48, %c0_i32_17 : i32
    cf.cond_br %49, ^bb6, ^bb17
  ^bb13:  // pred: ^bb10
    %50 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %51 = arith.extui %50 : i32 to i64
    %52 = arith.addi %51, %c8_i64 : i64
    %53 = llvm.getelementptr %8[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %54 = llvm.load volatile %53 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %54, %5 : i32, !llvm.ptr
    %c0_i32_18 = arith.constant 0 : i32
    %55 = arith.cmpi ne, %54, %c0_i32_18 : i32
    cf.cond_br %55, ^bb14, ^bb15
  ^bb14:  // pred: ^bb13
    %56 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_19 = arith.constant 0 : i64
    %57 = arith.extui %56 : i32 to i64
    %58 = arith.addi %57, %c0_i64_19 : i64
    %59 = llvm.getelementptr %8[%58] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %60 = llvm.load volatile %59 {alignment = 1 : i64} : !llvm.ptr -> i32
    %61 = llvm.load %5 : !llvm.ptr -> i32
    %62 = llvm.load %1 : !llvm.ptr -> i32
    %63 = llvm.load %2 : !llvm.ptr -> i32
    %64 = call @f19(%arg0, %60, %61, %62, %63) : (!llvm.ptr, i32, i32, i32, i32) -> i32
    llvm.store %64, %3 : i32, !llvm.ptr
    cf.br ^bb5
  ^bb15:  // pred: ^bb13
    %65 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_20 = arith.constant 0 : i32
    %66 = arith.cmpi eq, %65, %c0_i32_20 : i32
    %67 = arith.extui %66 : i1 to i32
    %c0_i32_21 = arith.constant 0 : i32
    %68 = arith.cmpi ne, %67, %c0_i32_21 : i32
    cf.cond_br %68, ^bb6, ^bb16
  ^bb16:  // pred: ^bb15
    %c0_i32_22 = arith.constant 0 : i32
    %c1049537_i64 = arith.constant 1049537 : i64
    %69 = arith.extui %c0_i32_22 : i32 to i64
    %70 = arith.addi %69, %c1049537_i64 : i64
    %71 = llvm.getelementptr %8[%70] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %72 = llvm.load volatile %71 {alignment = 1 : i64} : !llvm.ptr -> i8
    %73 = arith.extui %72 : i8 to i32
    cf.br ^bb11
  ^bb17:  // pred: ^bb12
    %c0_i32_23 = arith.constant 0 : i32
    %c1049537_i64_24 = arith.constant 1049537 : i64
    %74 = arith.extui %c0_i32_23 : i32 to i64
    %75 = arith.addi %74, %c1049537_i64_24 : i64
    %76 = llvm.getelementptr %8[%75] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %77 = llvm.load volatile %76 {alignment = 1 : i64} : !llvm.ptr -> i8
    %78 = arith.extui %77 : i8 to i32
    cf.br ^bb11
  ^bb18:  // pred: ^bb5
    %79 = llvm.load %0 : !llvm.ptr -> i32
    %80 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_25 = arith.constant 8 : i64
    %81 = arith.extui %79 : i32 to i64
    %82 = arith.addi %81, %c8_i64_25 : i64
    %83 = llvm.getelementptr %8[%82] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %80, %83 {alignment = 1 : i64} : i32, !llvm.ptr
    %84 = llvm.load %0 : !llvm.ptr -> i32
    %85 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_26 = arith.constant 4 : i64
    %86 = arith.extui %84 : i32 to i64
    %87 = arith.addi %86, %c4_i64_26 : i64
    %88 = llvm.getelementptr %8[%87] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %85, %88 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb4
  ^bb19:  // pred: ^bb5
    %89 = llvm.load %0 : !llvm.ptr -> i32
    %90 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_27 = arith.constant 8 : i64
    %91 = arith.extui %89 : i32 to i64
    %92 = arith.addi %91, %c8_i64_27 : i64
    %93 = llvm.getelementptr %8[%92] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %90, %93 {alignment = 1 : i64} : i32, !llvm.ptr
    %94 = llvm.load %0 : !llvm.ptr -> i32
    %95 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64_28 = arith.constant 4 : i64
    %96 = arith.extui %94 : i32 to i64
    %97 = arith.addi %96, %c4_i64_28 : i64
    %98 = llvm.getelementptr %8[%97] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %95, %98 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_29 = arith.constant 0 : i32
    llvm.store %c0_i32_29, %2 : i32, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f5(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i64_4 = arith.constant 1 : i64
    %5 = llvm.alloca %c1_i64_4 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i64_5 = arith.constant 1 : i64
    %6 = llvm.alloca %c1_i64_5 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i64_6 = arith.constant 1 : i64
    %7 = llvm.alloca %c1_i64_6 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %8 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %13 = llvm.load %9 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %14 = arith.subi %13, %c32_i32 : i32
    llvm.store %14, %4 : i32, !llvm.ptr
    llvm.store %14, %9 : i32, !llvm.ptr
    %15 = llvm.load %2 : !llvm.ptr -> i32
    %16 = llvm.load %3 : !llvm.ptr -> i32
    %17 = arith.addi %15, %16 : i32
    llvm.store %17, %3 : i32, !llvm.ptr
    %18 = llvm.load %2 : !llvm.ptr -> i32
    %19 = arith.cmpi uge, %17, %18 : i32
    %20 = arith.extui %19 : i1 to i32
    %c0_i32_7 = arith.constant 0 : i32
    %21 = arith.cmpi ne, %20, %c0_i32_7 : i32
    cf.cond_br %21, ^bb4, ^bb5
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 3 preds: ^bb5, ^bb9, ^bb10
    %22 = llvm.load %0 : !llvm.ptr -> i32
    %23 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %24 = arith.extui %22 : i32 to i64
    %25 = arith.addi %24, %c4_i64 : i64
    %26 = llvm.getelementptr %12[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %23, %26 {alignment = 1 : i64} : i32, !llvm.ptr
    %27 = llvm.load %0 : !llvm.ptr -> i32
    %28 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %29 = arith.extui %27 : i32 to i64
    %30 = arith.addi %29, %c0_i64 : i64
    %31 = llvm.getelementptr %12[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %28, %31 {alignment = 1 : i64} : i32, !llvm.ptr
    %32 = llvm.load %4 : !llvm.ptr -> i32
    %c32_i32_8 = arith.constant 32 : i32
    %33 = arith.addi %32, %c32_i32_8 : i32
    llvm.store %33, %9 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %c4_i32 = arith.constant 4 : i32
    llvm.store %c4_i32, %5 : i32, !llvm.ptr
    %34 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_9 = arith.constant 0 : i64
    %35 = arith.extui %34 : i32 to i64
    %36 = arith.addi %35, %c0_i64_9 : i64
    %37 = llvm.getelementptr %12[%36] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %38 = llvm.load volatile %37 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %38, %6 : i32, !llvm.ptr
    %c1_i32 = arith.constant 1 : i32
    %c31_i32 = arith.constant 31 : i32
    %39 = arith.cmpi ule, %c1_i32, %c31_i32 : i32
    %40 = scf.if %39 -> (i32) {
      %121 = arith.shli %38, %c1_i32 : i32
      scf.yield %121 : i32
    } else {
      %c0_i32_27 = arith.constant 0 : i32
      scf.yield %c0_i32_27 : i32
    }
    llvm.store %40, %2 : i32, !llvm.ptr
    %41 = llvm.load %3 : !llvm.ptr -> i32
    %42 = llvm.load %2 : !llvm.ptr -> i32
    %43 = llvm.load %3 : !llvm.ptr -> i32
    %44 = arith.cmpi ugt, %42, %43 : i32
    %45 = arith.extui %44 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %46 = arith.cmpi ne, %45, %c0_i32_10 : i32
    %47 = arith.select %46, %40, %41 : i32
    llvm.store %47, %2 : i32, !llvm.ptr
    %c4_i32_11 = arith.constant 4 : i32
    %48 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i32_12 = arith.constant 4 : i32
    %49 = arith.cmpi ugt, %48, %c4_i32_12 : i32
    %50 = arith.extui %49 : i1 to i32
    %c0_i32_13 = arith.constant 0 : i32
    %51 = arith.cmpi ne, %50, %c0_i32_13 : i32
    %52 = arith.select %51, %47, %c4_i32_11 : i32
    llvm.store %52, %7 : i32, !llvm.ptr
    %c2_i32 = arith.constant 2 : i32
    %c31_i32_14 = arith.constant 31 : i32
    %53 = arith.cmpi ule, %c2_i32, %c31_i32_14 : i32
    %54 = scf.if %53 -> (i32) {
      %121 = arith.shli %52, %c2_i32 : i32
      scf.yield %121 : i32
    } else {
      %c0_i32_27 = arith.constant 0 : i32
      scf.yield %c0_i32_27 : i32
    }
    llvm.store %54, %3 : i32, !llvm.ptr
    %55 = llvm.load %2 : !llvm.ptr -> i32
    %c536870912_i32 = arith.constant 536870912 : i32
    %56 = arith.cmpi ult, %55, %c536870912_i32 : i32
    %57 = arith.extui %56 : i1 to i32
    %c2_i32_15 = arith.constant 2 : i32
    %c31_i32_16 = arith.constant 31 : i32
    %58 = arith.cmpi ule, %c2_i32_15, %c31_i32_16 : i32
    %59 = scf.if %58 -> (i32) {
      %121 = arith.shli %57, %c2_i32_15 : i32
      scf.yield %121 : i32
    } else {
      %c0_i32_27 = arith.constant 0 : i32
      scf.yield %c0_i32_27 : i32
    }
    llvm.store %59, %2 : i32, !llvm.ptr
    %60 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i32_17 = arith.constant 0 : i32
    %61 = arith.cmpi ne, %60, %c0_i32_17 : i32
    cf.cond_br %61, ^bb7, ^bb8
  ^bb5:  // pred: ^bb1
    %c0_i32_18 = arith.constant 0 : i32
    llvm.store %c0_i32_18, %2 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb6:  // 2 preds: ^bb7, ^bb8
    %62 = llvm.load %4 : !llvm.ptr -> i32
    %63 = llvm.load %5 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %64 = arith.extui %62 : i32 to i64
    %65 = arith.addi %64, %c24_i64 : i64
    %66 = llvm.getelementptr %12[%65] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %63, %66 {alignment = 1 : i64} : i32, !llvm.ptr
    %67 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %68 = arith.addi %67, %c8_i32 : i32
    %69 = llvm.load %2 : !llvm.ptr -> i32
    %70 = llvm.load %3 : !llvm.ptr -> i32
    %71 = llvm.load %4 : !llvm.ptr -> i32
    %c20_i32 = arith.constant 20 : i32
    %72 = arith.addi %71, %c20_i32 : i32
    %73 = llvm.load %4 : !llvm.ptr -> i32
    call @f4(%arg0, %68, %69, %70, %72, %73) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %74 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %75 = arith.extui %74 : i32 to i64
    %76 = arith.addi %75, %c8_i64 : i64
    %77 = llvm.getelementptr %12[%76] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %78 = llvm.load volatile %77 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_19 = arith.constant 0 : i32
    %79 = arith.cmpi ne, %78, %c0_i32_19 : i32
    cf.cond_br %79, ^bb9, ^bb10
  ^bb7:  // pred: ^bb4
    %80 = llvm.load %4 : !llvm.ptr -> i32
    %81 = llvm.load %6 : !llvm.ptr -> i32
    %c2_i32_20 = arith.constant 2 : i32
    %c31_i32_21 = arith.constant 31 : i32
    %82 = arith.cmpi ule, %c2_i32_20, %c31_i32_21 : i32
    %83 = scf.if %82 -> (i32) {
      %121 = arith.shli %81, %c2_i32_20 : i32
      scf.yield %121 : i32
    } else {
      %c0_i32_27 = arith.constant 0 : i32
      scf.yield %c0_i32_27 : i32
    }
    %c28_i64 = arith.constant 28 : i64
    %84 = arith.extui %80 : i32 to i64
    %85 = arith.addi %84, %c28_i64 : i64
    %86 = llvm.getelementptr %12[%85] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %83, %86 {alignment = 1 : i64} : i32, !llvm.ptr
    %87 = llvm.load %4 : !llvm.ptr -> i32
    %88 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_22 = arith.constant 4 : i64
    %89 = arith.extui %88 : i32 to i64
    %90 = arith.addi %89, %c4_i64_22 : i64
    %91 = llvm.getelementptr %12[%90] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %92 = llvm.load volatile %91 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %93 = arith.extui %87 : i32 to i64
    %94 = arith.addi %93, %c20_i64 : i64
    %95 = llvm.getelementptr %12[%94] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %92, %95 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb6
  ^bb8:  // pred: ^bb4
    %c0_i32_23 = arith.constant 0 : i32
    llvm.store %c0_i32_23, %5 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb9:  // pred: ^bb6
    %96 = llvm.load %4 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %97 = arith.extui %96 : i32 to i64
    %98 = arith.addi %97, %c16_i64 : i64
    %99 = llvm.getelementptr %12[%98] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %100 = llvm.load volatile %99 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %100, %1 : i32, !llvm.ptr
    %101 = llvm.load %4 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %102 = arith.extui %101 : i32 to i64
    %103 = arith.addi %102, %c12_i64 : i64
    %104 = llvm.getelementptr %12[%103] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %105 = llvm.load volatile %104 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %105, %2 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb10:  // pred: ^bb6
    %106 = llvm.load %4 : !llvm.ptr -> i32
    %c12_i64_24 = arith.constant 12 : i64
    %107 = arith.extui %106 : i32 to i64
    %108 = arith.addi %107, %c12_i64_24 : i64
    %109 = llvm.getelementptr %12[%108] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %110 = llvm.load volatile %109 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %110, %2 : i32, !llvm.ptr
    %111 = llvm.load %1 : !llvm.ptr -> i32
    %112 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_25 = arith.constant 0 : i64
    %113 = arith.extui %111 : i32 to i64
    %114 = arith.addi %113, %c0_i64_25 : i64
    %115 = llvm.getelementptr %12[%114] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %112, %115 {alignment = 1 : i64} : i32, !llvm.ptr
    %116 = llvm.load %1 : !llvm.ptr -> i32
    %117 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_26 = arith.constant 4 : i64
    %118 = arith.extui %116 : i32 to i64
    %119 = arith.addi %118, %c4_i64_26 : i64
    %120 = llvm.getelementptr %12[%119] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %117, %120 {alignment = 1 : i64} : i32, !llvm.ptr
    %c-2147483647_i32 = arith.constant -2147483647 : i32
    llvm.store %c-2147483647_i32, %2 : i32, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f6(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i64_4 = arith.constant 1 : i64
    %5 = llvm.alloca %c1_i64_4 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %10 = arith.extui %9 : i32 to i64
    %11 = arith.addi %10, %c4_i64 : i64
    %12 = llvm.getelementptr %8[%11] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %13 = llvm.load volatile %12 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %13, %2 : i32, !llvm.ptr
    %14 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %15 = arith.extui %14 : i32 to i64
    %16 = arith.addi %15, %c8_i64 : i64
    %17 = llvm.getelementptr %8[%16] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %18 = llvm.load volatile %17 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %18, %1 : i32, !llvm.ptr
    %c0_i32_5 = arith.constant 0 : i32
    %19 = arith.cmpi ne, %18, %c0_i32_5 : i32
    cf.cond_br %19, ^bb4, ^bb5
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb5, ^bb7
    %20 = llvm.load %3 : !llvm.ptr -> i32
    %21 = llvm.load %2 : !llvm.ptr -> i32
    %22 = llvm.load %4 : !llvm.ptr -> i32
    %23 = call @f88(%arg0, %20, %21, %22) : (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %23, %4 : i32, !llvm.ptr
    %24 = llvm.load %0 : !llvm.ptr -> i32
    %25 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64_6 = arith.constant 8 : i64
    %26 = arith.extui %24 : i32 to i64
    %27 = arith.addi %26, %c8_i64_6 : i64
    %28 = llvm.getelementptr %8[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %25, %28 {alignment = 1 : i64} : i32, !llvm.ptr
    %29 = llvm.load %0 : !llvm.ptr -> i32
    %30 = llvm.load %4 : !llvm.ptr -> i32
    %c4_i64_7 = arith.constant 4 : i64
    %31 = arith.extui %29 : i32 to i64
    %32 = arith.addi %31, %c4_i64_7 : i64
    %33 = llvm.getelementptr %8[%32] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %30, %33 {alignment = 1 : i64} : i32, !llvm.ptr
    %34 = llvm.load %0 : !llvm.ptr -> i32
    %35 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %36 = arith.extui %34 : i32 to i64
    %37 = arith.addi %36, %c0_i64 : i64
    %38 = llvm.getelementptr %8[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %35, %38 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %39 = llvm.load %1 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c31_i32 = arith.constant 31 : i32
    %40 = arith.cmpi ule, %c2_i32, %c31_i32 : i32
    %41 = scf.if %40 -> (i32) {
      %56 = arith.shli %39, %c2_i32 : i32
      scf.yield %56 : i32
    } else {
      %c0_i32_15 = arith.constant 0 : i32
      scf.yield %c0_i32_15 : i32
    }
    llvm.store %41, %4 : i32, !llvm.ptr
    %42 = llvm.load %1 : !llvm.ptr -> i32
    %c536870911_i32 = arith.constant 536870911 : i32
    %43 = arith.cmpi ule, %42, %c536870911_i32 : i32
    %44 = arith.extui %43 : i1 to i32
    %c0_i32_8 = arith.constant 0 : i32
    %45 = arith.cmpi ne, %44, %c0_i32_8 : i32
    cf.cond_br %45, ^bb7, ^bb8
  ^bb5:  // pred: ^bb1
    %c4_i32 = arith.constant 4 : i32
    llvm.store %c4_i32, %3 : i32, !llvm.ptr
    %c0_i32_9 = arith.constant 0 : i32
    llvm.store %c0_i32_9, %4 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb6:  // 2 preds: ^bb8, ^bb9
    %46 = llvm.load %5 : !llvm.ptr -> i32
    %47 = llvm.load %4 : !llvm.ptr -> i32
    call @f62(%arg0, %46, %47) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb7:  // pred: ^bb4
    %c0_i32_10 = arith.constant 0 : i32
    %c1049537_i64 = arith.constant 1049537 : i64
    %48 = arith.extui %c0_i32_10 : i32 to i64
    %49 = arith.addi %48, %c1049537_i64 : i64
    %50 = llvm.getelementptr %8[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %51 = llvm.load volatile %50 {alignment = 1 : i64} : !llvm.ptr -> i8
    %52 = arith.extui %51 : i8 to i32
    %c4_i32_11 = arith.constant 4 : i32
    llvm.store %c4_i32_11, %5 : i32, !llvm.ptr
    %53 = llvm.load %4 : !llvm.ptr -> i32
    %c4_i32_12 = arith.constant 4 : i32
    %54 = call @f17(%arg0, %53, %c4_i32_12) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %54, %3 : i32, !llvm.ptr
    %c0_i32_13 = arith.constant 0 : i32
    %55 = arith.cmpi ne, %54, %c0_i32_13 : i32
    cf.cond_br %55, ^bb3, ^bb9
  ^bb8:  // pred: ^bb4
    %c0_i32_14 = arith.constant 0 : i32
    llvm.store %c0_i32_14, %5 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb9:  // pred: ^bb7
    cf.br ^bb6
  }
  func.func public @vec_sum(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32_2 = arith.constant 0 : i32
    llvm.store %c0_i32_2, %1 : i32, !llvm.ptr
    %c0_i32_3 = arith.constant 0 : i32
    %c1049537_i64 = arith.constant 1049537 : i64
    %6 = arith.extui %c0_i32_3 : i32 to i64
    %7 = arith.addi %6, %c1049537_i64 : i64
    %8 = llvm.getelementptr %5[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %9 = llvm.load volatile %8 {alignment = 1 : i64} : !llvm.ptr -> i8
    %10 = arith.extui %9 : i8 to i32
    %c16_i32 = arith.constant 16 : i32
    %c4_i32 = arith.constant 4 : i32
    %11 = call @f17(%arg0, %c16_i32, %c4_i32) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %11, %2 : i32, !llvm.ptr
    %c0_i32_4 = arith.constant 0 : i32
    %12 = arith.cmpi eq, %11, %c0_i32_4 : i32
    %13 = arith.extui %12 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %14 = arith.cmpi ne, %13, %c0_i32_5 : i32
    cf.cond_br %14, ^bb3, ^bb4
  ^bb2(%15: i32):  // pred: ^bb5
    return %15 : i32
  ^bb3:  // pred: ^bb1
    %c4_i32_6 = arith.constant 4 : i32
    %c16_i32_7 = arith.constant 16 : i32
    call @f65(%arg0, %c4_i32_6, %c16_i32_7) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb4:  // pred: ^bb1
    %16 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %c12_i64 = arith.constant 12 : i64
    %17 = arith.extui %16 : i32 to i64
    %18 = arith.addi %17, %c12_i64 : i64
    %19 = llvm.getelementptr %5[%18] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c3_i32, %19 {alignment = 1 : i64} : i32, !llvm.ptr
    %20 = llvm.load %2 : !llvm.ptr -> i32
    %c8589934593_i64 = arith.constant 8589934593 : i64
    %c4_i64 = arith.constant 4 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c4_i64 : i64
    %23 = llvm.getelementptr %5[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c8589934593_i64, %23 {alignment = 1 : i64} : i64, !llvm.ptr
    %24 = llvm.load %2 : !llvm.ptr -> i32
    %25 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %26 = arith.extui %24 : i32 to i64
    %27 = arith.addi %26, %c0_i64 : i64
    %28 = llvm.getelementptr %5[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %25, %28 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_8 = arith.constant 0 : i32
    llvm.store %c0_i32_8, %0 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb5:  // pred: ^bb7
    %29 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_9 = arith.constant 16 : i32
    %c4_i32_10 = arith.constant 4 : i32
    call @f18(%arg0, %29, %c16_i32_9, %c4_i32_10) : (!llvm.ptr, i32, i32, i32) -> ()
    %30 = llvm.load %1 : !llvm.ptr -> i32
    cf.br ^bb2(%30 : i32)
  ^bb6:  // 2 preds: ^bb4, ^bb6
    %31 = llvm.load %2 : !llvm.ptr -> i32
    %32 = llvm.load %0 : !llvm.ptr -> i32
    %33 = arith.addi %31, %32 : i32
    %c0_i64_11 = arith.constant 0 : i64
    %34 = arith.extui %33 : i32 to i64
    %35 = arith.addi %34, %c0_i64_11 : i64
    %36 = llvm.getelementptr %5[%35] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %37 = llvm.load volatile %36 {alignment = 1 : i64} : !llvm.ptr -> i32
    %38 = llvm.load %1 : !llvm.ptr -> i32
    %39 = arith.addi %37, %38 : i32
    llvm.store %39, %1 : i32, !llvm.ptr
    %40 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32_12 = arith.constant 4 : i32
    %41 = arith.addi %40, %c4_i32_12 : i32
    llvm.store %41, %0 : i32, !llvm.ptr
    %c16_i32_13 = arith.constant 16 : i32
    %42 = arith.cmpi eq, %41, %c16_i32_13 : i32
    %43 = arith.extui %42 : i1 to i32
    %c0_i32_14 = arith.constant 0 : i32
    %44 = arith.cmpi eq, %43, %c0_i32_14 : i32
    %45 = arith.extui %44 : i1 to i32
    %c0_i32_15 = arith.constant 0 : i32
    %46 = arith.cmpi ne, %45, %c0_i32_15 : i32
    cf.cond_br %46, ^bb6, ^bb7
  ^bb7:  // pred: ^bb6
    cf.br ^bb5
  }
  func.func public @vec_product(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32_2 = arith.constant 0 : i32
    llvm.store %c0_i32_2, %1 : i32, !llvm.ptr
    %c0_i32_3 = arith.constant 0 : i32
    %c1049537_i64 = arith.constant 1049537 : i64
    %6 = arith.extui %c0_i32_3 : i32 to i64
    %7 = arith.addi %6, %c1049537_i64 : i64
    %8 = llvm.getelementptr %5[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %9 = llvm.load volatile %8 {alignment = 1 : i64} : !llvm.ptr -> i8
    %10 = arith.extui %9 : i8 to i32
    %c16_i32 = arith.constant 16 : i32
    %c4_i32 = arith.constant 4 : i32
    %11 = call @f17(%arg0, %c16_i32, %c4_i32) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %11, %2 : i32, !llvm.ptr
    %c0_i32_4 = arith.constant 0 : i32
    %12 = arith.cmpi eq, %11, %c0_i32_4 : i32
    %13 = arith.extui %12 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %14 = arith.cmpi ne, %13, %c0_i32_5 : i32
    cf.cond_br %14, ^bb3, ^bb4
  ^bb2(%15: i32):  // pred: ^bb5
    return %15 : i32
  ^bb3:  // pred: ^bb1
    %c4_i32_6 = arith.constant 4 : i32
    %c16_i32_7 = arith.constant 16 : i32
    call @f65(%arg0, %c4_i32_6, %c16_i32_7) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb4:  // pred: ^bb1
    %16 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %c12_i64 = arith.constant 12 : i64
    %17 = arith.extui %16 : i32 to i64
    %18 = arith.addi %17, %c12_i64 : i64
    %19 = llvm.getelementptr %5[%18] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c3_i32, %19 {alignment = 1 : i64} : i32, !llvm.ptr
    %20 = llvm.load %2 : !llvm.ptr -> i32
    %c8589934593_i64 = arith.constant 8589934593 : i64
    %c4_i64 = arith.constant 4 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c4_i64 : i64
    %23 = llvm.getelementptr %5[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c8589934593_i64, %23 {alignment = 1 : i64} : i64, !llvm.ptr
    %24 = llvm.load %2 : !llvm.ptr -> i32
    %25 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %26 = arith.extui %24 : i32 to i64
    %27 = arith.addi %26, %c0_i64 : i64
    %28 = llvm.getelementptr %5[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %25, %28 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i32 = arith.constant 1 : i32
    llvm.store %c1_i32, %0 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb5:  // pred: ^bb7
    %29 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_8 = arith.constant 16 : i32
    %c4_i32_9 = arith.constant 4 : i32
    call @f18(%arg0, %29, %c16_i32_8, %c4_i32_9) : (!llvm.ptr, i32, i32, i32) -> ()
    %30 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%30 : i32)
  ^bb6:  // 2 preds: ^bb4, ^bb6
    %31 = llvm.load %2 : !llvm.ptr -> i32
    %32 = llvm.load %1 : !llvm.ptr -> i32
    %33 = arith.addi %31, %32 : i32
    %c0_i64_10 = arith.constant 0 : i64
    %34 = arith.extui %33 : i32 to i64
    %35 = arith.addi %34, %c0_i64_10 : i64
    %36 = llvm.getelementptr %5[%35] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %37 = llvm.load volatile %36 {alignment = 1 : i64} : !llvm.ptr -> i32
    %38 = llvm.load %0 : !llvm.ptr -> i32
    %39 = arith.muli %37, %38 : i32
    llvm.store %39, %0 : i32, !llvm.ptr
    %40 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32_11 = arith.constant 4 : i32
    %41 = arith.addi %40, %c4_i32_11 : i32
    llvm.store %41, %1 : i32, !llvm.ptr
    %c16_i32_12 = arith.constant 16 : i32
    %42 = arith.cmpi eq, %41, %c16_i32_12 : i32
    %43 = arith.extui %42 : i1 to i32
    %c0_i32_13 = arith.constant 0 : i32
    %44 = arith.cmpi eq, %43, %c0_i32_13 : i32
    %45 = arith.extui %44 : i1 to i32
    %c0_i32_14 = arith.constant 0 : i32
    %46 = arith.cmpi ne, %45, %c0_i32_14 : i32
    cf.cond_br %46, ^bb6, ^bb7
  ^bb7:  // pred: ^bb6
    cf.br ^bb5
  }
  func.func public @vec_max(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32_3 = arith.constant 0 : i32
    llvm.store %c0_i32_3, %1 : i32, !llvm.ptr
    %c0_i32_4 = arith.constant 0 : i32
    %c1049537_i64 = arith.constant 1049537 : i64
    %7 = arith.extui %c0_i32_4 : i32 to i64
    %8 = arith.addi %7, %c1049537_i64 : i64
    %9 = llvm.getelementptr %6[%8] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %10 = llvm.load volatile %9 {alignment = 1 : i64} : !llvm.ptr -> i8
    %11 = arith.extui %10 : i8 to i32
    %c16_i32 = arith.constant 16 : i32
    %c4_i32 = arith.constant 4 : i32
    %12 = call @f17(%arg0, %c16_i32, %c4_i32) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %12, %2 : i32, !llvm.ptr
    %c0_i32_5 = arith.constant 0 : i32
    %13 = arith.cmpi eq, %12, %c0_i32_5 : i32
    %14 = arith.extui %13 : i1 to i32
    %c0_i32_6 = arith.constant 0 : i32
    %15 = arith.cmpi ne, %14, %c0_i32_6 : i32
    cf.cond_br %15, ^bb3, ^bb4
  ^bb2(%16: i32):  // pred: ^bb5
    return %16 : i32
  ^bb3:  // pred: ^bb1
    %c4_i32_7 = arith.constant 4 : i32
    %c16_i32_8 = arith.constant 16 : i32
    call @f65(%arg0, %c4_i32_7, %c16_i32_8) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb4:  // pred: ^bb1
    %17 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %c12_i64 = arith.constant 12 : i64
    %18 = arith.extui %17 : i32 to i64
    %19 = arith.addi %18, %c12_i64 : i64
    %20 = llvm.getelementptr %6[%19] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c3_i32, %20 {alignment = 1 : i64} : i32, !llvm.ptr
    %21 = llvm.load %2 : !llvm.ptr -> i32
    %c8589934593_i64 = arith.constant 8589934593 : i64
    %c4_i64 = arith.constant 4 : i64
    %22 = arith.extui %21 : i32 to i64
    %23 = arith.addi %22, %c4_i64 : i64
    %24 = llvm.getelementptr %6[%23] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c8589934593_i64, %24 {alignment = 1 : i64} : i64, !llvm.ptr
    %25 = llvm.load %2 : !llvm.ptr -> i32
    %26 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %27 = arith.extui %25 : i32 to i64
    %28 = arith.addi %27, %c0_i64 : i64
    %29 = llvm.getelementptr %6[%28] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %26, %29 {alignment = 1 : i64} : i32, !llvm.ptr
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    llvm.store %c-2147483648_i32, %0 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb5:  // pred: ^bb7
    %30 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_9 = arith.constant 16 : i32
    %c4_i32_10 = arith.constant 4 : i32
    call @f18(%arg0, %30, %c16_i32_9, %c4_i32_10) : (!llvm.ptr, i32, i32, i32) -> ()
    %31 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%31 : i32)
  ^bb6:  // 2 preds: ^bb4, ^bb6
    %32 = llvm.load %2 : !llvm.ptr -> i32
    %33 = llvm.load %1 : !llvm.ptr -> i32
    %34 = arith.addi %32, %33 : i32
    %c0_i64_11 = arith.constant 0 : i64
    %35 = arith.extui %34 : i32 to i64
    %36 = arith.addi %35, %c0_i64_11 : i64
    %37 = llvm.getelementptr %6[%36] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %38 = llvm.load volatile %37 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %38, %3 : i32, !llvm.ptr
    %39 = llvm.load %0 : !llvm.ptr -> i32
    %40 = llvm.load %3 : !llvm.ptr -> i32
    %41 = llvm.load %0 : !llvm.ptr -> i32
    %42 = arith.cmpi sgt, %40, %41 : i32
    %43 = arith.extui %42 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %44 = arith.cmpi ne, %43, %c0_i32_12 : i32
    %45 = arith.select %44, %38, %39 : i32
    llvm.store %45, %0 : i32, !llvm.ptr
    %46 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32_13 = arith.constant 4 : i32
    %47 = arith.addi %46, %c4_i32_13 : i32
    llvm.store %47, %1 : i32, !llvm.ptr
    %c16_i32_14 = arith.constant 16 : i32
    %48 = arith.cmpi eq, %47, %c16_i32_14 : i32
    %49 = arith.extui %48 : i1 to i32
    %c0_i32_15 = arith.constant 0 : i32
    %50 = arith.cmpi eq, %49, %c0_i32_15 : i32
    %51 = arith.extui %50 : i1 to i32
    %c0_i32_16 = arith.constant 0 : i32
    %52 = arith.cmpi ne, %51, %c0_i32_16 : i32
    cf.cond_br %52, ^bb6, ^bb7
  ^bb7:  // pred: ^bb6
    cf.br ^bb5
  }
  func.func public @vec_min(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32_3 = arith.constant 0 : i32
    llvm.store %c0_i32_3, %1 : i32, !llvm.ptr
    %c0_i32_4 = arith.constant 0 : i32
    %c1049537_i64 = arith.constant 1049537 : i64
    %7 = arith.extui %c0_i32_4 : i32 to i64
    %8 = arith.addi %7, %c1049537_i64 : i64
    %9 = llvm.getelementptr %6[%8] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %10 = llvm.load volatile %9 {alignment = 1 : i64} : !llvm.ptr -> i8
    %11 = arith.extui %10 : i8 to i32
    %c16_i32 = arith.constant 16 : i32
    %c4_i32 = arith.constant 4 : i32
    %12 = call @f17(%arg0, %c16_i32, %c4_i32) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %12, %2 : i32, !llvm.ptr
    %c0_i32_5 = arith.constant 0 : i32
    %13 = arith.cmpi eq, %12, %c0_i32_5 : i32
    %14 = arith.extui %13 : i1 to i32
    %c0_i32_6 = arith.constant 0 : i32
    %15 = arith.cmpi ne, %14, %c0_i32_6 : i32
    cf.cond_br %15, ^bb3, ^bb4
  ^bb2(%16: i32):  // pred: ^bb5
    return %16 : i32
  ^bb3:  // pred: ^bb1
    %c4_i32_7 = arith.constant 4 : i32
    %c16_i32_8 = arith.constant 16 : i32
    call @f65(%arg0, %c4_i32_7, %c16_i32_8) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb4:  // pred: ^bb1
    %17 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %c12_i64 = arith.constant 12 : i64
    %18 = arith.extui %17 : i32 to i64
    %19 = arith.addi %18, %c12_i64 : i64
    %20 = llvm.getelementptr %6[%19] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c3_i32, %20 {alignment = 1 : i64} : i32, !llvm.ptr
    %21 = llvm.load %2 : !llvm.ptr -> i32
    %c8589934593_i64 = arith.constant 8589934593 : i64
    %c4_i64 = arith.constant 4 : i64
    %22 = arith.extui %21 : i32 to i64
    %23 = arith.addi %22, %c4_i64 : i64
    %24 = llvm.getelementptr %6[%23] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c8589934593_i64, %24 {alignment = 1 : i64} : i64, !llvm.ptr
    %25 = llvm.load %2 : !llvm.ptr -> i32
    %26 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %27 = arith.extui %25 : i32 to i64
    %28 = arith.addi %27, %c0_i64 : i64
    %29 = llvm.getelementptr %6[%28] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %26, %29 {alignment = 1 : i64} : i32, !llvm.ptr
    %c2147483647_i32 = arith.constant 2147483647 : i32
    llvm.store %c2147483647_i32, %0 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb5:  // pred: ^bb7
    %30 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_9 = arith.constant 16 : i32
    %c4_i32_10 = arith.constant 4 : i32
    call @f18(%arg0, %30, %c16_i32_9, %c4_i32_10) : (!llvm.ptr, i32, i32, i32) -> ()
    %31 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%31 : i32)
  ^bb6:  // 2 preds: ^bb4, ^bb6
    %32 = llvm.load %2 : !llvm.ptr -> i32
    %33 = llvm.load %1 : !llvm.ptr -> i32
    %34 = arith.addi %32, %33 : i32
    %c0_i64_11 = arith.constant 0 : i64
    %35 = arith.extui %34 : i32 to i64
    %36 = arith.addi %35, %c0_i64_11 : i64
    %37 = llvm.getelementptr %6[%36] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %38 = llvm.load volatile %37 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %38, %3 : i32, !llvm.ptr
    %39 = llvm.load %0 : !llvm.ptr -> i32
    %40 = llvm.load %3 : !llvm.ptr -> i32
    %41 = llvm.load %0 : !llvm.ptr -> i32
    %42 = arith.cmpi slt, %40, %41 : i32
    %43 = arith.extui %42 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %44 = arith.cmpi ne, %43, %c0_i32_12 : i32
    %45 = arith.select %44, %38, %39 : i32
    llvm.store %45, %0 : i32, !llvm.ptr
    %46 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32_13 = arith.constant 4 : i32
    %47 = arith.addi %46, %c4_i32_13 : i32
    llvm.store %47, %1 : i32, !llvm.ptr
    %c16_i32_14 = arith.constant 16 : i32
    %48 = arith.cmpi eq, %47, %c16_i32_14 : i32
    %49 = arith.extui %48 : i1 to i32
    %c0_i32_15 = arith.constant 0 : i32
    %50 = arith.cmpi eq, %49, %c0_i32_15 : i32
    %51 = arith.extui %50 : i1 to i32
    %c0_i32_16 = arith.constant 0 : i32
    %52 = arith.cmpi ne, %51, %c0_i32_16 : i32
    cf.cond_br %52, ^bb6, ^bb7
  ^bb7:  // pred: ^bb6
    cf.br ^bb5
  }
  func.func public @vec_average(%arg0: !llvm.ptr, %arg1: i32) -> f32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32_2 = arith.constant 0 : i32
    llvm.store %c0_i32_2, %1 : i32, !llvm.ptr
    %c0_i32_3 = arith.constant 0 : i32
    %c1049537_i64 = arith.constant 1049537 : i64
    %6 = arith.extui %c0_i32_3 : i32 to i64
    %7 = arith.addi %6, %c1049537_i64 : i64
    %8 = llvm.getelementptr %5[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %9 = llvm.load volatile %8 {alignment = 1 : i64} : !llvm.ptr -> i8
    %10 = arith.extui %9 : i8 to i32
    %c16_i32 = arith.constant 16 : i32
    %c4_i32 = arith.constant 4 : i32
    %11 = call @f17(%arg0, %c16_i32, %c4_i32) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %11, %2 : i32, !llvm.ptr
    %c0_i32_4 = arith.constant 0 : i32
    %12 = arith.cmpi eq, %11, %c0_i32_4 : i32
    %13 = arith.extui %12 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %14 = arith.cmpi ne, %13, %c0_i32_5 : i32
    cf.cond_br %14, ^bb3, ^bb4
  ^bb2(%15: f32):  // pred: ^bb5
    return %15 : f32
  ^bb3:  // pred: ^bb1
    %c4_i32_6 = arith.constant 4 : i32
    %c16_i32_7 = arith.constant 16 : i32
    call @f65(%arg0, %c4_i32_6, %c16_i32_7) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb4:  // pred: ^bb1
    %16 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %c12_i64 = arith.constant 12 : i64
    %17 = arith.extui %16 : i32 to i64
    %18 = arith.addi %17, %c12_i64 : i64
    %19 = llvm.getelementptr %5[%18] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c3_i32, %19 {alignment = 1 : i64} : i32, !llvm.ptr
    %20 = llvm.load %2 : !llvm.ptr -> i32
    %c8589934593_i64 = arith.constant 8589934593 : i64
    %c4_i64 = arith.constant 4 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c4_i64 : i64
    %23 = llvm.getelementptr %5[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c8589934593_i64, %23 {alignment = 1 : i64} : i64, !llvm.ptr
    %24 = llvm.load %2 : !llvm.ptr -> i32
    %25 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %26 = arith.extui %24 : i32 to i64
    %27 = arith.addi %26, %c0_i64 : i64
    %28 = llvm.getelementptr %5[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %25, %28 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_8 = arith.constant 0 : i32
    llvm.store %c0_i32_8, %0 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb5:  // pred: ^bb7
    %29 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_9 = arith.constant 16 : i32
    %c4_i32_10 = arith.constant 4 : i32
    call @f18(%arg0, %29, %c16_i32_9, %c4_i32_10) : (!llvm.ptr, i32, i32, i32) -> ()
    %30 = llvm.load %0 : !llvm.ptr -> i32
    %31 = arith.sitofp %30 : i32 to f32
    %c1048576000_i32 = arith.constant 1048576000 : i32
    %32 = arith.bitcast %c1048576000_i32 : i32 to f32
    %33 = arith.mulf %31, %32 : f32
    cf.br ^bb2(%33 : f32)
  ^bb6:  // 2 preds: ^bb4, ^bb6
    %34 = llvm.load %2 : !llvm.ptr -> i32
    %35 = llvm.load %1 : !llvm.ptr -> i32
    %36 = arith.addi %34, %35 : i32
    %c0_i64_11 = arith.constant 0 : i64
    %37 = arith.extui %36 : i32 to i64
    %38 = arith.addi %37, %c0_i64_11 : i64
    %39 = llvm.getelementptr %5[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %40 = llvm.load volatile %39 {alignment = 1 : i64} : !llvm.ptr -> i32
    %41 = llvm.load %0 : !llvm.ptr -> i32
    %42 = arith.addi %40, %41 : i32
    llvm.store %42, %0 : i32, !llvm.ptr
    %43 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32_12 = arith.constant 4 : i32
    %44 = arith.addi %43, %c4_i32_12 : i32
    llvm.store %44, %1 : i32, !llvm.ptr
    %c16_i32_13 = arith.constant 16 : i32
    %45 = arith.cmpi eq, %44, %c16_i32_13 : i32
    %46 = arith.extui %45 : i1 to i32
    %c0_i32_14 = arith.constant 0 : i32
    %47 = arith.cmpi eq, %46, %c0_i32_14 : i32
    %48 = arith.extui %47 : i1 to i32
    %c0_i32_15 = arith.constant 0 : i32
    %49 = arith.cmpi ne, %48, %c0_i32_15 : i32
    cf.cond_br %49, ^bb6, ^bb7
  ^bb7:  // pred: ^bb6
    cf.br ^bb5
  }
  func.func public @vec_reverse(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %5 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32_4 = arith.constant 0 : i32
    llvm.store %c0_i32_4, %1 : i32, !llvm.ptr
    %c0_i32_5 = arith.constant 0 : i32
    %c1049537_i64 = arith.constant 1049537 : i64
    %8 = arith.extui %c0_i32_5 : i32 to i64
    %9 = arith.addi %8, %c1049537_i64 : i64
    %10 = llvm.getelementptr %7[%9] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %11 = llvm.load volatile %10 {alignment = 1 : i64} : !llvm.ptr -> i8
    %12 = arith.extui %11 : i8 to i32
    %c16_i32 = arith.constant 16 : i32
    %c4_i32 = arith.constant 4 : i32
    %13 = call @f17(%arg0, %c16_i32, %c4_i32) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %13, %2 : i32, !llvm.ptr
    %c0_i32_6 = arith.constant 0 : i32
    %14 = arith.cmpi eq, %13, %c0_i32_6 : i32
    %15 = arith.extui %14 : i1 to i32
    %c0_i32_7 = arith.constant 0 : i32
    %16 = arith.cmpi ne, %15, %c0_i32_7 : i32
    cf.cond_br %16, ^bb3, ^bb4
  ^bb2(%17: i32):  // pred: ^bb5
    return %17 : i32
  ^bb3:  // pred: ^bb1
    %c4_i32_8 = arith.constant 4 : i32
    %c16_i32_9 = arith.constant 16 : i32
    call @f65(%arg0, %c4_i32_8, %c16_i32_9) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb4:  // pred: ^bb1
    %18 = llvm.load %2 : !llvm.ptr -> i32
    %c8589934593_i64 = arith.constant 8589934593 : i64
    %c4_i64 = arith.constant 4 : i64
    %19 = arith.extui %18 : i32 to i64
    %20 = arith.addi %19, %c4_i64 : i64
    %21 = llvm.getelementptr %7[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c8589934593_i64, %21 {alignment = 1 : i64} : i64, !llvm.ptr
    %22 = llvm.load %2 : !llvm.ptr -> i32
    %23 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %24 = arith.extui %22 : i32 to i64
    %25 = arith.addi %24, %c0_i64 : i64
    %26 = llvm.getelementptr %7[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %23, %26 {alignment = 1 : i64} : i32, !llvm.ptr
    %27 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %28 = arith.addi %27, %c12_i32 : i32
    llvm.store %28, %0 : i32, !llvm.ptr
    %c3_i32 = arith.constant 3 : i32
    %c0_i64_10 = arith.constant 0 : i64
    %29 = arith.extui %28 : i32 to i64
    %30 = arith.addi %29, %c0_i64_10 : i64
    %31 = llvm.getelementptr %7[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c3_i32, %31 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb6
  ^bb5:  // pred: ^bb7
    %32 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_11 = arith.constant 0 : i64
    %33 = arith.extui %32 : i32 to i64
    %34 = arith.addi %33, %c0_i64_11 : i64
    %35 = llvm.getelementptr %7[%34] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %36 = llvm.load volatile %35 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %36, %0 : i32, !llvm.ptr
    %37 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_12 = arith.constant 16 : i32
    %c4_i32_13 = arith.constant 4 : i32
    call @f18(%arg0, %37, %c16_i32_12, %c4_i32_13) : (!llvm.ptr, i32, i32, i32) -> ()
    %38 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%38 : i32)
  ^bb6:  // 2 preds: ^bb4, ^bb6
    %39 = llvm.load %2 : !llvm.ptr -> i32
    %40 = llvm.load %1 : !llvm.ptr -> i32
    %41 = arith.addi %39, %40 : i32
    llvm.store %41, %3 : i32, !llvm.ptr
    %c0_i64_14 = arith.constant 0 : i64
    %42 = arith.extui %41 : i32 to i64
    %43 = arith.addi %42, %c0_i64_14 : i64
    %44 = llvm.getelementptr %7[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %45 = llvm.load volatile %44 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %45, %4 : i32, !llvm.ptr
    %46 = llvm.load %3 : !llvm.ptr -> i32
    %47 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_15 = arith.constant 0 : i64
    %48 = arith.extui %47 : i32 to i64
    %49 = arith.addi %48, %c0_i64_15 : i64
    %50 = llvm.getelementptr %7[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %51 = llvm.load volatile %50 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_16 = arith.constant 0 : i64
    %52 = arith.extui %46 : i32 to i64
    %53 = arith.addi %52, %c0_i64_16 : i64
    %54 = llvm.getelementptr %7[%53] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %51, %54 {alignment = 1 : i64} : i32, !llvm.ptr
    %55 = llvm.load %0 : !llvm.ptr -> i32
    %56 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_17 = arith.constant 0 : i64
    %57 = arith.extui %55 : i32 to i64
    %58 = arith.addi %57, %c0_i64_17 : i64
    %59 = llvm.getelementptr %7[%58] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %56, %59 {alignment = 1 : i64} : i32, !llvm.ptr
    %60 = llvm.load %0 : !llvm.ptr -> i32
    %c-4_i32 = arith.constant -4 : i32
    %61 = arith.addi %60, %c-4_i32 : i32
    llvm.store %61, %0 : i32, !llvm.ptr
    %62 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32_18 = arith.constant 4 : i32
    %63 = arith.addi %62, %c4_i32_18 : i32
    llvm.store %63, %1 : i32, !llvm.ptr
    %c8_i32 = arith.constant 8 : i32
    %64 = arith.cmpi eq, %63, %c8_i32 : i32
    %65 = arith.extui %64 : i1 to i32
    %c0_i32_19 = arith.constant 0 : i32
    %66 = arith.cmpi eq, %65, %c0_i32_19 : i32
    %67 = arith.extui %66 : i1 to i32
    %c0_i32_20 = arith.constant 0 : i32
    %68 = arith.cmpi ne, %67, %c0_i32_20 : i32
    cf.cond_br %68, ^bb6, ^bb7
  ^bb7:  // pred: ^bb6
    cf.br ^bb5
  }
  func.func public @vec_clone(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %5 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %7[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %10 = llvm.load %6 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %11 = arith.subi %10, %c32_i32 : i32
    llvm.store %11, %1 : i32, !llvm.ptr
    llvm.store %11, %6 : i32, !llvm.ptr
    %c0_i32_4 = arith.constant 0 : i32
    %c1049537_i64 = arith.constant 1049537 : i64
    %12 = arith.extui %c0_i32_4 : i32 to i64
    %13 = arith.addi %12, %c1049537_i64 : i64
    %14 = llvm.getelementptr %9[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %15 = llvm.load volatile %14 {alignment = 1 : i64} : !llvm.ptr -> i8
    %16 = arith.extui %15 : i8 to i32
    %c16_i32 = arith.constant 16 : i32
    %c4_i32 = arith.constant 4 : i32
    %17 = call @f17(%arg0, %c16_i32, %c4_i32) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %17, %2 : i32, !llvm.ptr
    %c0_i32_5 = arith.constant 0 : i32
    %18 = arith.cmpi eq, %17, %c0_i32_5 : i32
    %19 = arith.extui %18 : i1 to i32
    %c0_i32_6 = arith.constant 0 : i32
    %20 = arith.cmpi ne, %19, %c0_i32_6 : i32
    cf.cond_br %20, ^bb4, ^bb5
  ^bb2(%21: i32):  // pred: ^bb7
    return %21 : i32
  ^bb3:  // pred: ^bb5
    %c0_i32_7 = arith.constant 0 : i32
    %c0_i32_8 = arith.constant 0 : i32
    %c1048588_i32 = arith.constant 1048588 : i32
    call @f71(%arg0, %c0_i32_7, %c0_i32_8, %c1048588_i32) : (!llvm.ptr, i32, i32, i32) -> ()
    llvm.unreachable
  ^bb4:  // pred: ^bb1
    %c4_i32_9 = arith.constant 4 : i32
    %c16_i32_10 = arith.constant 16 : i32
    call @f65(%arg0, %c4_i32_9, %c16_i32_10) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb5:  // pred: ^bb1
    %22 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %c12_i64 = arith.constant 12 : i64
    %23 = arith.extui %22 : i32 to i64
    %24 = arith.addi %23, %c12_i64 : i64
    %25 = llvm.getelementptr %9[%24] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c3_i32, %25 {alignment = 1 : i64} : i32, !llvm.ptr
    %26 = llvm.load %2 : !llvm.ptr -> i32
    %c8589934593_i64 = arith.constant 8589934593 : i64
    %c4_i64 = arith.constant 4 : i64
    %27 = arith.extui %26 : i32 to i64
    %28 = arith.addi %27, %c4_i64 : i64
    %29 = llvm.getelementptr %9[%28] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c8589934593_i64, %29 {alignment = 1 : i64} : i64, !llvm.ptr
    %30 = llvm.load %2 : !llvm.ptr -> i32
    %31 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %32 = arith.extui %30 : i32 to i64
    %33 = arith.addi %32, %c0_i64 : i64
    %34 = llvm.getelementptr %9[%33] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %31, %34 {alignment = 1 : i64} : i32, !llvm.ptr
    %35 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32_11 = arith.constant 4 : i32
    %c16_i64 = arith.constant 16 : i64
    %36 = arith.extui %35 : i32 to i64
    %37 = arith.addi %36, %c16_i64 : i64
    %38 = llvm.getelementptr %9[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4_i32_11, %38 {alignment = 1 : i64} : i32, !llvm.ptr
    %39 = llvm.load %1 : !llvm.ptr -> i32
    %40 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64_12 = arith.constant 12 : i64
    %41 = arith.extui %39 : i32 to i64
    %42 = arith.addi %41, %c12_i64_12 : i64
    %43 = llvm.getelementptr %9[%42] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %40, %43 {alignment = 1 : i64} : i32, !llvm.ptr
    %44 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32_13 = arith.constant 4 : i32
    %c8_i64 = arith.constant 8 : i64
    %45 = arith.extui %44 : i32 to i64
    %46 = arith.addi %45, %c8_i64 : i64
    %47 = llvm.getelementptr %9[%46] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4_i32_13, %47 {alignment = 1 : i64} : i32, !llvm.ptr
    %48 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i32 = arith.constant 20 : i32
    %49 = arith.addi %48, %c20_i32 : i32
    %50 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %51 = arith.addi %50, %c8_i32 : i32
    call @f6(%arg0, %49, %51) : (!llvm.ptr, i32, i32) -> ()
    %52 = llvm.load %1 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %53 = arith.extui %52 : i32 to i64
    %54 = arith.addi %53, %c28_i64 : i64
    %55 = llvm.getelementptr %9[%54] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %56 = llvm.load volatile %55 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_14 = arith.constant 0 : i32
    %57 = arith.cmpi eq, %56, %c0_i32_14 : i32
    %58 = arith.extui %57 : i1 to i32
    %c0_i32_15 = arith.constant 0 : i32
    %59 = arith.cmpi ne, %58, %c0_i32_15 : i32
    cf.cond_br %59, ^bb3, ^bb6
  ^bb6:  // pred: ^bb5
    %60 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %61 = arith.extui %60 : i32 to i64
    %62 = arith.addi %61, %c24_i64 : i64
    %63 = llvm.getelementptr %9[%62] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %64 = llvm.load volatile %63 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %64, %3 : i32, !llvm.ptr
    %c0_i64_16 = arith.constant 0 : i64
    %65 = arith.extui %64 : i32 to i64
    %66 = arith.addi %65, %c0_i64_16 : i64
    %67 = llvm.getelementptr %9[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %68 = llvm.load volatile %67 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %68, %0 : i32, !llvm.ptr
    %69 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %70 = arith.extui %69 : i32 to i64
    %71 = arith.addi %70, %c20_i64 : i64
    %72 = llvm.getelementptr %9[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %73 = llvm.load volatile %72 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %73, %4 : i32, !llvm.ptr
    %c0_i32_17 = arith.constant 0 : i32
    %74 = arith.cmpi eq, %73, %c0_i32_17 : i32
    %75 = arith.extui %74 : i1 to i32
    %c0_i32_18 = arith.constant 0 : i32
    %76 = arith.cmpi ne, %75, %c0_i32_18 : i32
    cf.cond_br %76, ^bb7, ^bb8
  ^bb7:  // 2 preds: ^bb6, ^bb8
    %77 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_19 = arith.constant 16 : i32
    %c4_i32_20 = arith.constant 4 : i32
    call @f18(%arg0, %77, %c16_i32_19, %c4_i32_20) : (!llvm.ptr, i32, i32, i32) -> ()
    %78 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i32_21 = arith.constant 32 : i32
    %79 = arith.addi %78, %c32_i32_21 : i32
    llvm.store %79, %6 : i32, !llvm.ptr
    %80 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%80 : i32)
  ^bb8:  // pred: ^bb6
    %81 = llvm.load %3 : !llvm.ptr -> i32
    %82 = llvm.load %4 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c31_i32 = arith.constant 31 : i32
    %83 = arith.cmpi ule, %c2_i32, %c31_i32 : i32
    %84 = scf.if %83 -> (i32) {
      %85 = arith.shli %82, %c2_i32 : i32
      scf.yield %85 : i32
    } else {
      %c0_i32_23 = arith.constant 0 : i32
      scf.yield %c0_i32_23 : i32
    }
    %c4_i32_22 = arith.constant 4 : i32
    call @f18(%arg0, %81, %84, %c4_i32_22) : (!llvm.ptr, i32, i32, i32) -> ()
    cf.br ^bb7
  }
  func.func public @vec_drain(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %5 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %10 = arith.subi %9, %c48_i32 : i32
    llvm.store %10, %1 : i32, !llvm.ptr
    llvm.store %10, %5 : i32, !llvm.ptr
    %c0_i32_3 = arith.constant 0 : i32
    %c1049537_i64 = arith.constant 1049537 : i64
    %11 = arith.extui %c0_i32_3 : i32 to i64
    %12 = arith.addi %11, %c1049537_i64 : i64
    %13 = llvm.getelementptr %8[%12] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %14 = llvm.load volatile %13 {alignment = 1 : i64} : !llvm.ptr -> i8
    %15 = arith.extui %14 : i8 to i32
    %c16_i32 = arith.constant 16 : i32
    %c4_i32 = arith.constant 4 : i32
    %16 = call @f17(%arg0, %c16_i32, %c4_i32) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %16, %2 : i32, !llvm.ptr
    %c0_i32_4 = arith.constant 0 : i32
    %17 = arith.cmpi eq, %16, %c0_i32_4 : i32
    %18 = arith.extui %17 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %19 = arith.cmpi ne, %18, %c0_i32_5 : i32
    cf.cond_br %19, ^bb4, ^bb5
  ^bb2(%20: i32):  // pred: ^bb9
    return %20 : i32
  ^bb3:  // pred: ^bb5
    %c0_i32_6 = arith.constant 0 : i32
    %c0_i32_7 = arith.constant 0 : i32
    %c1048604_i32 = arith.constant 1048604 : i32
    call @f71(%arg0, %c0_i32_6, %c0_i32_7, %c1048604_i32) : (!llvm.ptr, i32, i32, i32) -> ()
    llvm.unreachable
  ^bb4:  // pred: ^bb1
    %c4_i32_8 = arith.constant 4 : i32
    %c16_i32_9 = arith.constant 16 : i32
    call @f65(%arg0, %c4_i32_8, %c16_i32_9) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb5:  // pred: ^bb1
    %21 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %c12_i64 = arith.constant 12 : i64
    %22 = arith.extui %21 : i32 to i64
    %23 = arith.addi %22, %c12_i64 : i64
    %24 = llvm.getelementptr %8[%23] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c3_i32, %24 {alignment = 1 : i64} : i32, !llvm.ptr
    %25 = llvm.load %2 : !llvm.ptr -> i32
    %c8589934593_i64 = arith.constant 8589934593 : i64
    %c4_i64 = arith.constant 4 : i64
    %26 = arith.extui %25 : i32 to i64
    %27 = arith.addi %26, %c4_i64 : i64
    %28 = llvm.getelementptr %8[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c8589934593_i64, %28 {alignment = 1 : i64} : i64, !llvm.ptr
    %29 = llvm.load %2 : !llvm.ptr -> i32
    %30 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %31 = arith.extui %29 : i32 to i64
    %32 = arith.addi %31, %c0_i64 : i64
    %33 = llvm.getelementptr %8[%32] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %30, %33 {alignment = 1 : i64} : i32, !llvm.ptr
    %34 = llvm.load %1 : !llvm.ptr -> i32
    %35 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %36 = arith.extui %34 : i32 to i64
    %37 = arith.addi %36, %c8_i64 : i64
    %38 = llvm.getelementptr %8[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %35, %38 {alignment = 1 : i64} : i32, !llvm.ptr
    %39 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32_10 = arith.constant 4 : i32
    %c4_i64_11 = arith.constant 4 : i64
    %40 = arith.extui %39 : i32 to i64
    %41 = arith.addi %40, %c4_i64_11 : i64
    %42 = llvm.getelementptr %8[%41] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4_i32_10, %42 {alignment = 1 : i64} : i32, !llvm.ptr
    %43 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_12 = arith.constant 0 : i32
    %c12_i64_13 = arith.constant 12 : i64
    %44 = arith.extui %43 : i32 to i64
    %45 = arith.addi %44, %c12_i64_13 : i64
    %46 = llvm.getelementptr %8[%45] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_12, %46 {alignment = 1 : i64} : i32, !llvm.ptr
    %47 = llvm.load %1 : !llvm.ptr -> i32
    %c8589934594_i64 = arith.constant 8589934594 : i64
    %c40_i64 = arith.constant 40 : i64
    %48 = arith.extui %47 : i32 to i64
    %49 = arith.addi %48, %c40_i64 : i64
    %50 = llvm.getelementptr %8[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c8589934594_i64, %50 {alignment = 1 : i64} : i64, !llvm.ptr
    %51 = llvm.load %1 : !llvm.ptr -> i32
    %52 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %53 = arith.addi %52, %c8_i32 : i32
    %c32_i64 = arith.constant 32 : i64
    %54 = arith.extui %51 : i32 to i64
    %55 = arith.addi %54, %c32_i64 : i64
    %56 = llvm.getelementptr %8[%55] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %53, %56 {alignment = 1 : i64} : i32, !llvm.ptr
    %57 = llvm.load %1 : !llvm.ptr -> i32
    %58 = llvm.load %2 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %59 = arith.extui %57 : i32 to i64
    %60 = arith.addi %59, %c28_i64 : i64
    %61 = llvm.getelementptr %8[%60] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %58, %61 {alignment = 1 : i64} : i32, !llvm.ptr
    %62 = llvm.load %1 : !llvm.ptr -> i32
    %63 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32_14 = arith.constant 4 : i32
    %64 = arith.addi %63, %c4_i32_14 : i32
    %c36_i64 = arith.constant 36 : i64
    %65 = arith.extui %62 : i32 to i64
    %66 = arith.addi %65, %c36_i64 : i64
    %67 = llvm.getelementptr %8[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %64, %67 {alignment = 1 : i64} : i32, !llvm.ptr
    %68 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32_15 = arith.constant 16 : i32
    %69 = arith.addi %68, %c16_i32_15 : i32
    %70 = llvm.load %1 : !llvm.ptr -> i32
    %c28_i32 = arith.constant 28 : i32
    %71 = arith.addi %70, %c28_i32 : i32
    call @f0(%arg0, %69, %71) : (!llvm.ptr, i32, i32) -> ()
    %72 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %73 = arith.extui %72 : i32 to i64
    %74 = arith.addi %73, %c24_i64 : i64
    %75 = llvm.getelementptr %8[%74] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %76 = llvm.load volatile %75 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_16 = arith.constant 0 : i32
    %77 = arith.cmpi eq, %76, %c0_i32_16 : i32
    %78 = arith.extui %77 : i1 to i32
    %c0_i32_17 = arith.constant 0 : i32
    %79 = arith.cmpi ne, %78, %c0_i32_17 : i32
    cf.cond_br %79, ^bb3, ^bb6
  ^bb6:  // pred: ^bb5
    %80 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %81 = arith.extui %80 : i32 to i64
    %82 = arith.addi %81, %c20_i64 : i64
    %83 = llvm.getelementptr %8[%82] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %84 = llvm.load volatile %83 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %84, %0 : i32, !llvm.ptr
    %c0_i64_18 = arith.constant 0 : i64
    %85 = arith.extui %84 : i32 to i64
    %86 = arith.addi %85, %c0_i64_18 : i64
    %87 = llvm.getelementptr %8[%86] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %88 = llvm.load volatile %87 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %88, %2 : i32, !llvm.ptr
    %89 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %90 = arith.extui %89 : i32 to i64
    %91 = arith.addi %90, %c16_i64 : i64
    %92 = llvm.getelementptr %8[%91] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %93 = llvm.load volatile %92 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %93, %3 : i32, !llvm.ptr
    %c0_i32_19 = arith.constant 0 : i32
    %94 = arith.cmpi eq, %93, %c0_i32_19 : i32
    %95 = arith.extui %94 : i1 to i32
    %c0_i32_20 = arith.constant 0 : i32
    %96 = arith.cmpi ne, %95, %c0_i32_20 : i32
    cf.cond_br %96, ^bb7, ^bb8
  ^bb7:  // 2 preds: ^bb6, ^bb8
    %97 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_21 = arith.constant 4 : i64
    %98 = arith.extui %97 : i32 to i64
    %99 = arith.addi %98, %c4_i64_21 : i64
    %100 = llvm.getelementptr %8[%99] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %101 = llvm.load volatile %100 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %101, %0 : i32, !llvm.ptr
    %c0_i32_22 = arith.constant 0 : i32
    %102 = arith.cmpi eq, %101, %c0_i32_22 : i32
    %103 = arith.extui %102 : i1 to i32
    %c0_i32_23 = arith.constant 0 : i32
    %104 = arith.cmpi ne, %103, %c0_i32_23 : i32
    cf.cond_br %104, ^bb9, ^bb10
  ^bb8:  // pred: ^bb6
    %105 = llvm.load %0 : !llvm.ptr -> i32
    %106 = llvm.load %3 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c31_i32 = arith.constant 31 : i32
    %107 = arith.cmpi ule, %c2_i32, %c31_i32 : i32
    %108 = scf.if %107 -> (i32) {
      %120 = arith.shli %106, %c2_i32 : i32
      scf.yield %120 : i32
    } else {
      %c0_i32_30 = arith.constant 0 : i32
      scf.yield %c0_i32_30 : i32
    }
    %c4_i32_24 = arith.constant 4 : i32
    call @f18(%arg0, %105, %108, %c4_i32_24) : (!llvm.ptr, i32, i32, i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %109 = llvm.load %1 : !llvm.ptr -> i32
    %c48_i32_25 = arith.constant 48 : i32
    %110 = arith.addi %109, %c48_i32_25 : i32
    llvm.store %110, %5 : i32, !llvm.ptr
    %111 = llvm.load %2 : !llvm.ptr -> i32
    cf.br ^bb2(%111 : i32)
  ^bb10:  // pred: ^bb7
    %112 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64_26 = arith.constant 8 : i64
    %113 = arith.extui %112 : i32 to i64
    %114 = arith.addi %113, %c8_i64_26 : i64
    %115 = llvm.getelementptr %8[%114] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %116 = llvm.load volatile %115 {alignment = 1 : i64} : !llvm.ptr -> i32
    %117 = llvm.load %0 : !llvm.ptr -> i32
    %c2_i32_27 = arith.constant 2 : i32
    %c31_i32_28 = arith.constant 31 : i32
    %118 = arith.cmpi ule, %c2_i32_27, %c31_i32_28 : i32
    %119 = scf.if %118 -> (i32) {
      %120 = arith.shli %117, %c2_i32_27 : i32
      scf.yield %120 : i32
    } else {
      %c0_i32_30 = arith.constant 0 : i32
      scf.yield %c0_i32_30 : i32
    }
    %c4_i32_29 = arith.constant 4 : i32
    call @f18(%arg0, %116, %119, %c4_i32_29) : (!llvm.ptr, i32, i32, i32) -> ()
    cf.br ^bb9
  }
  func.func public @vec_sort(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i64_4 = arith.constant 1 : i64
    %5 = llvm.alloca %c1_i64_4 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i64_5 = arith.constant 1 : i64
    %6 = llvm.alloca %c1_i64_5 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %7 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %7[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32_6 = arith.constant 0 : i32
    llvm.store %c0_i32_6, %1 : i32, !llvm.ptr
    %c0_i32_7 = arith.constant 0 : i32
    %c1049537_i64 = arith.constant 1049537 : i64
    %10 = arith.extui %c0_i32_7 : i32 to i64
    %11 = arith.addi %10, %c1049537_i64 : i64
    %12 = llvm.getelementptr %9[%11] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %13 = llvm.load volatile %12 {alignment = 1 : i64} : !llvm.ptr -> i8
    %14 = arith.extui %13 : i8 to i32
    %c16_i32 = arith.constant 16 : i32
    %c4_i32 = arith.constant 4 : i32
    %15 = call @f17(%arg0, %c16_i32, %c4_i32) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %15, %2 : i32, !llvm.ptr
    %c0_i32_8 = arith.constant 0 : i32
    %16 = arith.cmpi eq, %15, %c0_i32_8 : i32
    %17 = arith.extui %16 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %18 = arith.cmpi ne, %17, %c0_i32_9 : i32
    cf.cond_br %18, ^bb3, ^bb4
  ^bb2(%19: i32):  // pred: ^bb5
    return %19 : i32
  ^bb3:  // pred: ^bb1
    %c4_i32_10 = arith.constant 4 : i32
    %c16_i32_11 = arith.constant 16 : i32
    call @f65(%arg0, %c4_i32_10, %c16_i32_11) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb4:  // pred: ^bb1
    %20 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %c12_i64 = arith.constant 12 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c12_i64 : i64
    %23 = llvm.getelementptr %9[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c3_i32, %23 {alignment = 1 : i64} : i32, !llvm.ptr
    %24 = llvm.load %2 : !llvm.ptr -> i32
    %c8589934593_i64 = arith.constant 8589934593 : i64
    %c4_i64 = arith.constant 4 : i64
    %25 = arith.extui %24 : i32 to i64
    %26 = arith.addi %25, %c4_i64 : i64
    %27 = llvm.getelementptr %9[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c8589934593_i64, %27 {alignment = 1 : i64} : i64, !llvm.ptr
    %28 = llvm.load %2 : !llvm.ptr -> i32
    %29 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %30 = arith.extui %28 : i32 to i64
    %31 = arith.addi %30, %c0_i64 : i64
    %32 = llvm.getelementptr %9[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %29, %32 {alignment = 1 : i64} : i32, !llvm.ptr
    %c4_i32_12 = arith.constant 4 : i32
    llvm.store %c4_i32_12, %3 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb5:  // pred: ^bb15
    %33 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_13 = arith.constant 0 : i64
    %34 = arith.extui %33 : i32 to i64
    %35 = arith.addi %34, %c0_i64_13 : i64
    %36 = llvm.getelementptr %9[%35] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %37 = llvm.load volatile %36 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %37, %0 : i32, !llvm.ptr
    %38 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_14 = arith.constant 16 : i32
    %c4_i32_15 = arith.constant 4 : i32
    call @f18(%arg0, %38, %c16_i32_14, %c4_i32_15) : (!llvm.ptr, i32, i32, i32) -> ()
    %39 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%39 : i32)
  ^bb6:  // 2 preds: ^bb4, ^bb7
    %40 = llvm.load %2 : !llvm.ptr -> i32
    %41 = llvm.load %3 : !llvm.ptr -> i32
    %42 = arith.addi %40, %41 : i32
    llvm.store %42, %0 : i32, !llvm.ptr
    %c0_i64_16 = arith.constant 0 : i64
    %43 = arith.extui %42 : i32 to i64
    %44 = arith.addi %43, %c0_i64_16 : i64
    %45 = llvm.getelementptr %9[%44] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %46 = llvm.load volatile %45 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %46, %4 : i32, !llvm.ptr
    %47 = llvm.load %0 : !llvm.ptr -> i32
    %c-4_i32 = arith.constant -4 : i32
    %48 = arith.addi %47, %c-4_i32 : i32
    %c0_i64_17 = arith.constant 0 : i64
    %49 = arith.extui %48 : i32 to i64
    %50 = arith.addi %49, %c0_i64_17 : i64
    %51 = llvm.getelementptr %9[%50] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %52 = llvm.load volatile %51 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %52, %5 : i32, !llvm.ptr
    %53 = arith.cmpi sge, %46, %52 : i32
    %54 = arith.extui %53 : i1 to i32
    %c0_i32_18 = arith.constant 0 : i32
    %55 = arith.cmpi ne, %54, %c0_i32_18 : i32
    cf.cond_br %55, ^bb7, ^bb8
  ^bb7:  // 2 preds: ^bb6, ^bb9
    %56 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32_19 = arith.constant 4 : i32
    %57 = arith.addi %56, %c4_i32_19 : i32
    llvm.store %57, %1 : i32, !llvm.ptr
    %58 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32_20 = arith.constant 4 : i32
    %59 = arith.addi %58, %c4_i32_20 : i32
    llvm.store %59, %3 : i32, !llvm.ptr
    %c16_i32_21 = arith.constant 16 : i32
    %60 = arith.cmpi eq, %59, %c16_i32_21 : i32
    %61 = arith.extui %60 : i1 to i32
    %c0_i32_22 = arith.constant 0 : i32
    %62 = arith.cmpi eq, %61, %c0_i32_22 : i32
    %63 = arith.extui %62 : i1 to i32
    %c0_i32_23 = arith.constant 0 : i32
    %64 = arith.cmpi ne, %63, %c0_i32_23 : i32
    cf.cond_br %64, ^bb6, ^bb15
  ^bb8:  // pred: ^bb6
    %65 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %65, %0 : i32, !llvm.ptr
    cf.br ^bb11
  ^bb9:  // 2 preds: ^bb10, ^bb13
    %66 = llvm.load %0 : !llvm.ptr -> i32
    %67 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_24 = arith.constant 0 : i64
    %68 = arith.extui %66 : i32 to i64
    %69 = arith.addi %68, %c0_i64_24 : i64
    %70 = llvm.getelementptr %9[%69] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %67, %70 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb7
  ^bb10:  // pred: ^bb14
    %71 = llvm.load %6 : !llvm.ptr -> i32
    %c4_i32_25 = arith.constant 4 : i32
    %72 = arith.addi %71, %c4_i32_25 : i32
    llvm.store %72, %0 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb8, ^bb12
    %73 = llvm.load %2 : !llvm.ptr -> i32
    %74 = llvm.load %0 : !llvm.ptr -> i32
    %75 = arith.addi %73, %74 : i32
    %c4_i32_26 = arith.constant 4 : i32
    %76 = arith.addi %75, %c4_i32_26 : i32
    %77 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64_27 = arith.constant 0 : i64
    %78 = arith.extui %76 : i32 to i64
    %79 = arith.addi %78, %c0_i64_27 : i64
    %80 = llvm.getelementptr %9[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %77, %80 {alignment = 1 : i64} : i32, !llvm.ptr
    %81 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_28 = arith.constant 0 : i32
    %82 = arith.cmpi ne, %81, %c0_i32_28 : i32
    cf.cond_br %82, ^bb12, ^bb13
  ^bb12:  // pred: ^bb11
    %83 = llvm.load %4 : !llvm.ptr -> i32
    %84 = llvm.load %0 : !llvm.ptr -> i32
    %c-4_i32_29 = arith.constant -4 : i32
    %85 = arith.addi %84, %c-4_i32_29 : i32
    llvm.store %85, %0 : i32, !llvm.ptr
    %86 = llvm.load %2 : !llvm.ptr -> i32
    %87 = arith.addi %85, %86 : i32
    llvm.store %87, %6 : i32, !llvm.ptr
    %c0_i64_30 = arith.constant 0 : i64
    %88 = arith.extui %87 : i32 to i64
    %89 = arith.addi %88, %c0_i64_30 : i64
    %90 = llvm.getelementptr %9[%89] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %91 = llvm.load volatile %90 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %91, %5 : i32, !llvm.ptr
    %92 = arith.cmpi slt, %83, %91 : i32
    %93 = arith.extui %92 : i1 to i32
    %c0_i32_31 = arith.constant 0 : i32
    %94 = arith.cmpi ne, %93, %c0_i32_31 : i32
    cf.cond_br %94, ^bb11, ^bb14
  ^bb13:  // pred: ^bb11
    %95 = llvm.load %2 : !llvm.ptr -> i32
    llvm.store %95, %0 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb14:  // pred: ^bb12
    cf.br ^bb10
  ^bb15:  // pred: ^bb7
    cf.br ^bb5
  }
  func.func public @string_format(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %c0_i32 = arith.constant 0 : i32
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %4 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %9 = arith.subi %8, %c48_i32 : i32
    llvm.store %9, %0 : i32, !llvm.ptr
    llvm.store %9, %4 : i32, !llvm.ptr
    %10 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %c0_i64 = arith.constant 0 : i64
    %11 = arith.extui %10 : i32 to i64
    %12 = arith.addi %11, %c0_i64 : i64
    %13 = llvm.getelementptr %7[%12] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c3_i32, %13 {alignment = 1 : i64} : i32, !llvm.ptr
    %14 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32 = arith.constant 1 : i32
    %c20_i64 = arith.constant 20 : i64
    %15 = arith.extui %14 : i32 to i64
    %16 = arith.addi %15, %c20_i64 : i64
    %17 = llvm.getelementptr %7[%16] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32, %17 {alignment = 1 : i64} : i32, !llvm.ptr
    %18 = llvm.load %0 : !llvm.ptr -> i32
    %c1048620_i32 = arith.constant 1048620 : i32
    %c16_i64 = arith.constant 16 : i64
    %19 = arith.extui %18 : i32 to i64
    %20 = arith.addi %19, %c16_i64 : i64
    %21 = llvm.getelementptr %7[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1048620_i32, %21 {alignment = 1 : i64} : i32, !llvm.ptr
    %22 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_2 = arith.constant 1 : i64
    %c28_i64 = arith.constant 28 : i64
    %23 = arith.extui %22 : i32 to i64
    %24 = arith.addi %23, %c28_i64 : i64
    %25 = llvm.getelementptr %7[%24] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_2, %25 {alignment = 1 : i64} : i64, !llvm.ptr
    %26 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_3 = arith.constant 1 : i32
    %c44_i64 = arith.constant 44 : i64
    %27 = arith.extui %26 : i32 to i64
    %28 = arith.addi %27, %c44_i64 : i64
    %29 = llvm.getelementptr %7[%28] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_3, %29 {alignment = 1 : i64} : i32, !llvm.ptr
    %30 = llvm.load %0 : !llvm.ptr -> i32
    %31 = llvm.load %0 : !llvm.ptr -> i32
    %c40_i32 = arith.constant 40 : i32
    %32 = arith.addi %31, %c40_i32 : i32
    %c24_i64 = arith.constant 24 : i64
    %33 = arith.extui %30 : i32 to i64
    %34 = arith.addi %33, %c24_i64 : i64
    %35 = llvm.getelementptr %7[%34] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %32, %35 {alignment = 1 : i64} : i32, !llvm.ptr
    %36 = llvm.load %0 : !llvm.ptr -> i32
    %37 = llvm.load %0 : !llvm.ptr -> i32
    %c40_i64 = arith.constant 40 : i64
    %38 = arith.extui %36 : i32 to i64
    %39 = arith.addi %38, %c40_i64 : i64
    %40 = llvm.getelementptr %7[%39] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %37, %40 {alignment = 1 : i64} : i32, !llvm.ptr
    %41 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %42 = arith.addi %41, %c4_i32 : i32
    %43 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %44 = arith.addi %43, %c16_i32 : i32
    call @f66(%arg0, %42, %44) : (!llvm.ptr, i32, i32) -> ()
    %45 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %46 = arith.extui %45 : i32 to i64
    %47 = arith.addi %46, %c12_i64 : i64
    %48 = llvm.getelementptr %7[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %49 = llvm.load volatile %48 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %49, %1 : i32, !llvm.ptr
    %50 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %51 = arith.extui %50 : i32 to i64
    %52 = arith.addi %51, %c4_i64 : i64
    %53 = llvm.getelementptr %7[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %54 = llvm.load volatile %53 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %54, %2 : i32, !llvm.ptr
    %c0_i32_4 = arith.constant 0 : i32
    %55 = arith.cmpi eq, %54, %c0_i32_4 : i32
    %56 = arith.extui %55 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %57 = arith.cmpi ne, %56, %c0_i32_5 : i32
    cf.cond_br %57, ^bb3, ^bb4
  ^bb2(%58: i32):  // pred: ^bb3
    return %58 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %59 = llvm.load %0 : !llvm.ptr -> i32
    %c48_i32_6 = arith.constant 48 : i32
    %60 = arith.addi %59, %c48_i32_6 : i32
    llvm.store %60, %4 : i32, !llvm.ptr
    %61 = llvm.load %1 : !llvm.ptr -> i32
    cf.br ^bb2(%61 : i32)
  ^bb4:  // pred: ^bb1
    %62 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %63 = arith.extui %62 : i32 to i64
    %64 = arith.addi %63, %c8_i64 : i64
    %65 = llvm.getelementptr %7[%64] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %66 = llvm.load volatile %65 {alignment = 1 : i64} : !llvm.ptr -> i32
    %67 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_7 = arith.constant 1 : i32
    call @f18(%arg0, %66, %67, %c1_i32_7) : (!llvm.ptr, i32, i32, i32) -> ()
    cf.br ^bb3
  }
  func.func @f17(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %3 = llvm.load %0 : !llvm.ptr -> i32
    %4 = llvm.load %1 : !llvm.ptr -> i32
    %5 = call @f41(%arg0, %3, %4) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %5, %2 : i32, !llvm.ptr
    %6 = llvm.load %2 : !llvm.ptr -> i32
    cf.br ^bb2(%6 : i32)
  ^bb2(%7: i32):  // pred: ^bb1
    return %7 : i32
  }
  func.func @f18(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %3 = llvm.load %0 : !llvm.ptr -> i32
    %4 = llvm.load %1 : !llvm.ptr -> i32
    %5 = llvm.load %2 : !llvm.ptr -> i32
    call @f42(%arg0, %3, %4, %5) : (!llvm.ptr, i32, i32, i32) -> ()
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f19(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %6 = llvm.load %1 : !llvm.ptr -> i32
    %7 = llvm.load %2 : !llvm.ptr -> i32
    %8 = llvm.load %3 : !llvm.ptr -> i32
    %9 = call @f43(%arg0, %5, %6, %7, %8) : (!llvm.ptr, i32, i32, i32, i32) -> i32
    llvm.store %9, %4 : i32, !llvm.ptr
    %10 = llvm.load %4 : !llvm.ptr -> i32
    cf.br ^bb2(%10 : i32)
  ^bb2(%11: i32):  // pred: ^bb1
    return %11 : i32
  }
  func.func @f20(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = llvm.load %1 : !llvm.ptr -> i32
    call @f54(%arg0, %2, %3) : (!llvm.ptr, i32, i32) -> ()
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f21(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c4854689474455388916_i64 = arith.constant 4854689474455388916 : i64
    %c8_i64 = arith.constant 8 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c8_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4854689474455388916_i64, %8 {alignment = 1 : i64} : i64, !llvm.ptr
    %9 = llvm.load %0 : !llvm.ptr -> i32
    %c-1846477596472271460_i64 = arith.constant -1846477596472271460 : i64
    %c0_i64 = arith.constant 0 : i64
    %10 = arith.extui %9 : i32 to i64
    %11 = arith.addi %10, %c0_i64 : i64
    %12 = llvm.getelementptr %4[%11] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-1846477596472271460_i64, %12 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f22(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c7199936582794304877_i64 = arith.constant 7199936582794304877 : i64
    %c8_i64 = arith.constant 8 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c8_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c7199936582794304877_i64, %8 {alignment = 1 : i64} : i64, !llvm.ptr
    %9 = llvm.load %0 : !llvm.ptr -> i32
    %c-5076933981314334344_i64 = arith.constant -5076933981314334344 : i64
    %c0_i64 = arith.constant 0 : i64
    %10 = arith.extui %9 : i32 to i64
    %11 = arith.addi %10, %c0_i64 : i64
    %12 = llvm.getelementptr %4[%11] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-5076933981314334344_i64, %12 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f23(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i64_4 = arith.constant 1 : i64
    %5 = llvm.alloca %c1_i64_4 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %11 = llvm.load %7 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %12 = arith.subi %11, %c32_i32 : i32
    llvm.store %12, %3 : i32, !llvm.ptr
    llvm.store %12, %7 : i32, !llvm.ptr
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %14 = llvm.load %2 : !llvm.ptr -> i32
    %15 = arith.addi %13, %14 : i32
    llvm.store %15, %2 : i32, !llvm.ptr
    %16 = llvm.load %1 : !llvm.ptr -> i32
    %17 = arith.cmpi uge, %15, %16 : i32
    %18 = arith.extui %17 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %19 = arith.cmpi ne, %18, %c0_i32_5 : i32
    cf.cond_br %19, ^bb3, ^bb4
  ^bb2:  // pred: ^bb8
    return
  ^bb3:  // pred: ^bb1
    %c1_i32 = arith.constant 1 : i32
    llvm.store %c1_i32, %4 : i32, !llvm.ptr
    %20 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c0_i64 : i64
    %23 = llvm.getelementptr %10[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %24 = llvm.load volatile %23 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %24, %5 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %c31_i32 = arith.constant 31 : i32
    %25 = arith.cmpi ule, %c1_i32_6, %c31_i32 : i32
    %26 = scf.if %25 -> (i32) {
      %104 = arith.shli %24, %c1_i32_6 : i32
      scf.yield %104 : i32
    } else {
      %c0_i32_23 = arith.constant 0 : i32
      scf.yield %c0_i32_23 : i32
    }
    llvm.store %26, %1 : i32, !llvm.ptr
    %27 = llvm.load %2 : !llvm.ptr -> i32
    %28 = llvm.load %1 : !llvm.ptr -> i32
    %29 = llvm.load %2 : !llvm.ptr -> i32
    %30 = arith.cmpi ugt, %28, %29 : i32
    %31 = arith.extui %30 : i1 to i32
    %c0_i32_7 = arith.constant 0 : i32
    %32 = arith.cmpi ne, %31, %c0_i32_7 : i32
    %33 = arith.select %32, %26, %27 : i32
    llvm.store %33, %1 : i32, !llvm.ptr
    %c8_i32 = arith.constant 8 : i32
    %34 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_8 = arith.constant 8 : i32
    %35 = arith.cmpi ugt, %34, %c8_i32_8 : i32
    %36 = arith.extui %35 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %37 = arith.cmpi ne, %36, %c0_i32_9 : i32
    %38 = arith.select %37, %33, %c8_i32 : i32
    llvm.store %38, %1 : i32, !llvm.ptr
    %c-1_i32 = arith.constant -1 : i32
    %39 = arith.xori %38, %c-1_i32 : i32
    %c31_i32_10 = arith.constant 31 : i32
    %c31_i32_11 = arith.constant 31 : i32
    %40 = arith.cmpi ule, %c31_i32_10, %c31_i32_11 : i32
    %41 = scf.if %40 -> (i32) {
      %104 = arith.shrui %39, %c31_i32_10 : i32
      scf.yield %104 : i32
    } else {
      %c0_i32_23 = arith.constant 0 : i32
      scf.yield %c0_i32_23 : i32
    }
    llvm.store %41, %2 : i32, !llvm.ptr
    %42 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i32_12 = arith.constant 0 : i32
    %43 = arith.cmpi ne, %42, %c0_i32_12 : i32
    cf.cond_br %43, ^bb6, ^bb7
  ^bb4:  // pred: ^bb1
    %c0_i32_13 = arith.constant 0 : i32
    %c0_i32_14 = arith.constant 0 : i32
    call @f62(%arg0, %c0_i32_13, %c0_i32_14) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb5:  // 2 preds: ^bb6, ^bb7
    %44 = llvm.load %3 : !llvm.ptr -> i32
    %45 = llvm.load %4 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %46 = arith.extui %44 : i32 to i64
    %47 = arith.addi %46, %c24_i64 : i64
    %48 = llvm.getelementptr %10[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %45, %48 {alignment = 1 : i64} : i32, !llvm.ptr
    %49 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_15 = arith.constant 8 : i32
    %50 = arith.addi %49, %c8_i32_15 : i32
    %51 = llvm.load %2 : !llvm.ptr -> i32
    %52 = llvm.load %1 : !llvm.ptr -> i32
    %53 = llvm.load %3 : !llvm.ptr -> i32
    %c20_i32 = arith.constant 20 : i32
    %54 = arith.addi %53, %c20_i32 : i32
    call @f31(%arg0, %50, %51, %52, %54) : (!llvm.ptr, i32, i32, i32, i32) -> ()
    %55 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %56 = arith.extui %55 : i32 to i64
    %57 = arith.addi %56, %c8_i64 : i64
    %58 = llvm.getelementptr %10[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %59 = llvm.load volatile %58 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_16 = arith.constant 0 : i32
    %60 = arith.cmpi eq, %59, %c0_i32_16 : i32
    %61 = arith.extui %60 : i1 to i32
    %c0_i32_17 = arith.constant 0 : i32
    %62 = arith.cmpi ne, %61, %c0_i32_17 : i32
    cf.cond_br %62, ^bb8, ^bb9
  ^bb6:  // pred: ^bb3
    %63 = llvm.load %3 : !llvm.ptr -> i32
    %64 = llvm.load %5 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %65 = arith.extui %63 : i32 to i64
    %66 = arith.addi %65, %c28_i64 : i64
    %67 = llvm.getelementptr %10[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %64, %67 {alignment = 1 : i64} : i32, !llvm.ptr
    %68 = llvm.load %3 : !llvm.ptr -> i32
    %69 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %70 = arith.extui %69 : i32 to i64
    %71 = arith.addi %70, %c4_i64 : i64
    %72 = llvm.getelementptr %10[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %73 = llvm.load volatile %72 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %74 = arith.extui %68 : i32 to i64
    %75 = arith.addi %74, %c20_i64 : i64
    %76 = llvm.getelementptr %10[%75] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %73, %76 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb5
  ^bb7:  // pred: ^bb3
    %c0_i32_18 = arith.constant 0 : i32
    llvm.store %c0_i32_18, %4 : i32, !llvm.ptr
    cf.br ^bb5
  ^bb8:  // pred: ^bb5
    %77 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %78 = arith.extui %77 : i32 to i64
    %79 = arith.addi %78, %c12_i64 : i64
    %80 = llvm.getelementptr %10[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %81 = llvm.load volatile %80 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %81, %2 : i32, !llvm.ptr
    %82 = llvm.load %0 : !llvm.ptr -> i32
    %83 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_19 = arith.constant 0 : i64
    %84 = arith.extui %82 : i32 to i64
    %85 = arith.addi %84, %c0_i64_19 : i64
    %86 = llvm.getelementptr %10[%85] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %83, %86 {alignment = 1 : i64} : i32, !llvm.ptr
    %87 = llvm.load %0 : !llvm.ptr -> i32
    %88 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_20 = arith.constant 4 : i64
    %89 = arith.extui %87 : i32 to i64
    %90 = arith.addi %89, %c4_i64_20 : i64
    %91 = llvm.getelementptr %10[%90] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %88, %91 {alignment = 1 : i64} : i32, !llvm.ptr
    %92 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_21 = arith.constant 32 : i32
    %93 = arith.addi %92, %c32_i32_21 : i32
    llvm.store %93, %7 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb9:  // pred: ^bb5
    %94 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i64_22 = arith.constant 12 : i64
    %95 = arith.extui %94 : i32 to i64
    %96 = arith.addi %95, %c12_i64_22 : i64
    %97 = llvm.getelementptr %10[%96] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %98 = llvm.load volatile %97 {alignment = 1 : i64} : !llvm.ptr -> i32
    %99 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %100 = arith.extui %99 : i32 to i64
    %101 = arith.addi %100, %c16_i64 : i64
    %102 = llvm.getelementptr %10[%101] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %103 = llvm.load volatile %102 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f62(%arg0, %98, %103) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  }
  func.func @f24(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %c1048628_i32 = arith.constant 1048628 : i32
    %3 = llvm.load %1 : !llvm.ptr -> i32
    %4 = call @f75(%arg0, %2, %c1048628_i32, %3) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%4 : i32)
  ^bb2(%5: i32):  // pred: ^bb1
    return %5 : i32
  }
  func.func @f25(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %9 = llvm.load volatile %8 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %9, %1 : i32, !llvm.ptr
    %c0_i32_1 = arith.constant 0 : i32
    %10 = arith.cmpi eq, %9, %c0_i32_1 : i32
    %11 = arith.extui %10 : i1 to i32
    %c0_i32_2 = arith.constant 0 : i32
    %12 = arith.cmpi ne, %11, %c0_i32_2 : i32
    cf.cond_br %12, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c4_i64 : i64
    %16 = llvm.getelementptr %4[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load volatile %16 {alignment = 1 : i64} : !llvm.ptr -> i32
    %18 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32 = arith.constant 1 : i32
    call @f18(%arg0, %17, %18, %c1_i32) : (!llvm.ptr, i32, i32, i32) -> ()
    cf.br ^bb3
  }
  func.func @f26(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %9 = llvm.load volatile %8 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %9, %1 : i32, !llvm.ptr
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %10 = arith.ori %9, %c-2147483648_i32 : i32
    %c-2147483648_i32_1 = arith.constant -2147483648 : i32
    %11 = arith.cmpi eq, %10, %c-2147483648_i32_1 : i32
    %12 = arith.extui %11 : i1 to i32
    %c0_i32_2 = arith.constant 0 : i32
    %13 = arith.cmpi ne, %12, %c0_i32_2 : i32
    cf.cond_br %13, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %14 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %15 = arith.extui %14 : i32 to i64
    %16 = arith.addi %15, %c4_i64 : i64
    %17 = llvm.getelementptr %4[%16] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %18 = llvm.load volatile %17 {alignment = 1 : i64} : !llvm.ptr -> i32
    %19 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32 = arith.constant 1 : i32
    call @f18(%arg0, %18, %19, %c1_i32) : (!llvm.ptr, i32, i32, i32) -> ()
    cf.br ^bb3
  }
  func.func @f27(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32, %8 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f28(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %10 = arith.subi %9, %c16_i32 : i32
    llvm.store %10, %2 : i32, !llvm.ptr
    llvm.store %10, %5 : i32, !llvm.ptr
    %11 = llvm.load %1 : !llvm.ptr -> i32
    %c128_i32 = arith.constant 128 : i32
    %12 = arith.cmpi ult, %11, %c128_i32 : i32
    %13 = arith.extui %12 : i1 to i32
    %c0_i32_3 = arith.constant 0 : i32
    %14 = arith.cmpi ne, %13, %c0_i32_3 : i32
    cf.cond_br %14, ^bb6, ^bb7
  ^bb2(%15: i32):  // pred: ^bb3
    return %15 : i32
  ^bb3:  // 2 preds: ^bb11, ^bb13
    %16 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_4 = arith.constant 16 : i32
    %17 = arith.addi %16, %c16_i32_4 : i32
    llvm.store %17, %5 : i32, !llvm.ptr
    %c0_i32_5 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32_5 : i32)
  ^bb4:  // 3 preds: ^bb5, ^bb9, ^bb10
    %18 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %19 = arith.extui %18 : i32 to i64
    %20 = arith.addi %19, %c0_i64 : i64
    %21 = llvm.getelementptr %8[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %22 = llvm.load volatile %21 {alignment = 1 : i64} : !llvm.ptr -> i32
    %23 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %24 = arith.extui %23 : i32 to i64
    %25 = arith.addi %24, %c8_i64 : i64
    %26 = llvm.getelementptr %8[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %27 = llvm.load volatile %26 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %27, %3 : i32, !llvm.ptr
    %28 = arith.subi %22, %27 : i32
    %29 = llvm.load %1 : !llvm.ptr -> i32
    %30 = arith.cmpi uge, %28, %29 : i32
    %31 = arith.extui %30 : i1 to i32
    %c0_i32_6 = arith.constant 0 : i32
    %32 = arith.cmpi ne, %31, %c0_i32_6 : i32
    cf.cond_br %32, ^bb13, ^bb14
  ^bb5:  // pred: ^bb7
    %33 = llvm.load %2 : !llvm.ptr -> i32
    %34 = llvm.load %1 : !llvm.ptr -> i32
    %c63_i32 = arith.constant 63 : i32
    %35 = arith.andi %34, %c63_i32 : i32
    %c128_i32_7 = arith.constant 128 : i32
    %36 = arith.ori %35, %c128_i32_7 : i32
    %c13_i64 = arith.constant 13 : i64
    %37 = arith.extui %33 : i32 to i64
    %38 = arith.addi %37, %c13_i64 : i64
    %39 = llvm.getelementptr %8[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %40 = arith.trunci %36 : i32 to i8
    llvm.store volatile %40, %39 {alignment = 1 : i64} : i8, !llvm.ptr
    %41 = llvm.load %2 : !llvm.ptr -> i32
    %42 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i32 = arith.constant 6 : i32
    %c31_i32 = arith.constant 31 : i32
    %43 = arith.cmpi ule, %c6_i32, %c31_i32 : i32
    %44 = scf.if %43 -> (i32) {
      %187 = arith.shrui %42, %c6_i32 : i32
      scf.yield %187 : i32
    } else {
      %c0_i32_45 = arith.constant 0 : i32
      scf.yield %c0_i32_45 : i32
    }
    %c192_i32 = arith.constant 192 : i32
    %45 = arith.ori %44, %c192_i32 : i32
    %c12_i64 = arith.constant 12 : i64
    %46 = arith.extui %41 : i32 to i64
    %47 = arith.addi %46, %c12_i64 : i64
    %48 = llvm.getelementptr %8[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %49 = arith.trunci %45 : i32 to i8
    llvm.store volatile %49, %48 {alignment = 1 : i64} : i8, !llvm.ptr
    %c2_i32 = arith.constant 2 : i32
    llvm.store %c2_i32, %1 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb6:  // pred: ^bb1
    %50 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_8 = arith.constant 8 : i64
    %51 = arith.extui %50 : i32 to i64
    %52 = arith.addi %51, %c8_i64_8 : i64
    %53 = llvm.getelementptr %8[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %54 = llvm.load volatile %53 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %54, %3 : i32, !llvm.ptr
    %55 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_9 = arith.constant 0 : i64
    %56 = arith.extui %55 : i32 to i64
    %57 = arith.addi %56, %c0_i64_9 : i64
    %58 = llvm.getelementptr %8[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %59 = llvm.load volatile %58 {alignment = 1 : i64} : !llvm.ptr -> i32
    %60 = arith.cmpi eq, %54, %59 : i32
    %61 = arith.extui %60 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %62 = arith.cmpi eq, %61, %c0_i32_10 : i32
    %63 = arith.extui %62 : i1 to i32
    %c0_i32_11 = arith.constant 0 : i32
    %64 = arith.cmpi ne, %63, %c0_i32_11 : i32
    cf.cond_br %64, ^bb11, ^bb12
  ^bb7:  // pred: ^bb1
    %65 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_12 = arith.constant 0 : i32
    %c12_i64_13 = arith.constant 12 : i64
    %66 = arith.extui %65 : i32 to i64
    %67 = arith.addi %66, %c12_i64_13 : i64
    %68 = llvm.getelementptr %8[%67] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_12, %68 {alignment = 1 : i64} : i32, !llvm.ptr
    %69 = llvm.load %1 : !llvm.ptr -> i32
    %c2048_i32 = arith.constant 2048 : i32
    %70 = arith.cmpi ult, %69, %c2048_i32 : i32
    %71 = arith.extui %70 : i1 to i32
    %c0_i32_14 = arith.constant 0 : i32
    %72 = arith.cmpi ne, %71, %c0_i32_14 : i32
    cf.cond_br %72, ^bb5, ^bb8
  ^bb8:  // pred: ^bb7
    %73 = llvm.load %1 : !llvm.ptr -> i32
    %c65536_i32 = arith.constant 65536 : i32
    %74 = arith.cmpi uge, %73, %c65536_i32 : i32
    %75 = arith.extui %74 : i1 to i32
    %c0_i32_15 = arith.constant 0 : i32
    %76 = arith.cmpi ne, %75, %c0_i32_15 : i32
    cf.cond_br %76, ^bb9, ^bb10
  ^bb9:  // pred: ^bb8
    %77 = llvm.load %2 : !llvm.ptr -> i32
    %78 = llvm.load %1 : !llvm.ptr -> i32
    %c63_i32_16 = arith.constant 63 : i32
    %79 = arith.andi %78, %c63_i32_16 : i32
    %c128_i32_17 = arith.constant 128 : i32
    %80 = arith.ori %79, %c128_i32_17 : i32
    %c15_i64 = arith.constant 15 : i64
    %81 = arith.extui %77 : i32 to i64
    %82 = arith.addi %81, %c15_i64 : i64
    %83 = llvm.getelementptr %8[%82] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %84 = arith.trunci %80 : i32 to i8
    llvm.store volatile %84, %83 {alignment = 1 : i64} : i8, !llvm.ptr
    %85 = llvm.load %2 : !llvm.ptr -> i32
    %86 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i32_18 = arith.constant 6 : i32
    %c31_i32_19 = arith.constant 31 : i32
    %87 = arith.cmpi ule, %c6_i32_18, %c31_i32_19 : i32
    %88 = scf.if %87 -> (i32) {
      %187 = arith.shrui %86, %c6_i32_18 : i32
      scf.yield %187 : i32
    } else {
      %c0_i32_45 = arith.constant 0 : i32
      scf.yield %c0_i32_45 : i32
    }
    %c63_i32_20 = arith.constant 63 : i32
    %89 = arith.andi %88, %c63_i32_20 : i32
    %c128_i32_21 = arith.constant 128 : i32
    %90 = arith.ori %89, %c128_i32_21 : i32
    %c14_i64 = arith.constant 14 : i64
    %91 = arith.extui %85 : i32 to i64
    %92 = arith.addi %91, %c14_i64 : i64
    %93 = llvm.getelementptr %8[%92] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %94 = arith.trunci %90 : i32 to i8
    llvm.store volatile %94, %93 {alignment = 1 : i64} : i8, !llvm.ptr
    %95 = llvm.load %2 : !llvm.ptr -> i32
    %96 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %c31_i32_22 = arith.constant 31 : i32
    %97 = arith.cmpi ule, %c12_i32, %c31_i32_22 : i32
    %98 = scf.if %97 -> (i32) {
      %187 = arith.shrui %96, %c12_i32 : i32
      scf.yield %187 : i32
    } else {
      %c0_i32_45 = arith.constant 0 : i32
      scf.yield %c0_i32_45 : i32
    }
    %c63_i32_23 = arith.constant 63 : i32
    %99 = arith.andi %98, %c63_i32_23 : i32
    %c128_i32_24 = arith.constant 128 : i32
    %100 = arith.ori %99, %c128_i32_24 : i32
    %c13_i64_25 = arith.constant 13 : i64
    %101 = arith.extui %95 : i32 to i64
    %102 = arith.addi %101, %c13_i64_25 : i64
    %103 = llvm.getelementptr %8[%102] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %104 = arith.trunci %100 : i32 to i8
    llvm.store volatile %104, %103 {alignment = 1 : i64} : i8, !llvm.ptr
    %105 = llvm.load %2 : !llvm.ptr -> i32
    %106 = llvm.load %1 : !llvm.ptr -> i32
    %c18_i32 = arith.constant 18 : i32
    %c31_i32_26 = arith.constant 31 : i32
    %107 = arith.cmpi ule, %c18_i32, %c31_i32_26 : i32
    %108 = scf.if %107 -> (i32) {
      %187 = arith.shrui %106, %c18_i32 : i32
      scf.yield %187 : i32
    } else {
      %c0_i32_45 = arith.constant 0 : i32
      scf.yield %c0_i32_45 : i32
    }
    %c7_i32 = arith.constant 7 : i32
    %109 = arith.andi %108, %c7_i32 : i32
    %c240_i32 = arith.constant 240 : i32
    %110 = arith.ori %109, %c240_i32 : i32
    %c12_i64_27 = arith.constant 12 : i64
    %111 = arith.extui %105 : i32 to i64
    %112 = arith.addi %111, %c12_i64_27 : i64
    %113 = llvm.getelementptr %8[%112] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %114 = arith.trunci %110 : i32 to i8
    llvm.store volatile %114, %113 {alignment = 1 : i64} : i8, !llvm.ptr
    %c4_i32 = arith.constant 4 : i32
    llvm.store %c4_i32, %1 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb10:  // pred: ^bb8
    %115 = llvm.load %2 : !llvm.ptr -> i32
    %116 = llvm.load %1 : !llvm.ptr -> i32
    %c63_i32_28 = arith.constant 63 : i32
    %117 = arith.andi %116, %c63_i32_28 : i32
    %c128_i32_29 = arith.constant 128 : i32
    %118 = arith.ori %117, %c128_i32_29 : i32
    %c14_i64_30 = arith.constant 14 : i64
    %119 = arith.extui %115 : i32 to i64
    %120 = arith.addi %119, %c14_i64_30 : i64
    %121 = llvm.getelementptr %8[%120] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %122 = arith.trunci %118 : i32 to i8
    llvm.store volatile %122, %121 {alignment = 1 : i64} : i8, !llvm.ptr
    %123 = llvm.load %2 : !llvm.ptr -> i32
    %124 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32_31 = arith.constant 12 : i32
    %c31_i32_32 = arith.constant 31 : i32
    %125 = arith.cmpi ule, %c12_i32_31, %c31_i32_32 : i32
    %126 = scf.if %125 -> (i32) {
      %187 = arith.shrui %124, %c12_i32_31 : i32
      scf.yield %187 : i32
    } else {
      %c0_i32_45 = arith.constant 0 : i32
      scf.yield %c0_i32_45 : i32
    }
    %c224_i32 = arith.constant 224 : i32
    %127 = arith.ori %126, %c224_i32 : i32
    %c12_i64_33 = arith.constant 12 : i64
    %128 = arith.extui %123 : i32 to i64
    %129 = arith.addi %128, %c12_i64_33 : i64
    %130 = llvm.getelementptr %8[%129] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %131 = arith.trunci %127 : i32 to i8
    llvm.store volatile %131, %130 {alignment = 1 : i64} : i8, !llvm.ptr
    %132 = llvm.load %2 : !llvm.ptr -> i32
    %133 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i32_34 = arith.constant 6 : i32
    %c31_i32_35 = arith.constant 31 : i32
    %134 = arith.cmpi ule, %c6_i32_34, %c31_i32_35 : i32
    %135 = scf.if %134 -> (i32) {
      %187 = arith.shrui %133, %c6_i32_34 : i32
      scf.yield %187 : i32
    } else {
      %c0_i32_45 = arith.constant 0 : i32
      scf.yield %c0_i32_45 : i32
    }
    %c63_i32_36 = arith.constant 63 : i32
    %136 = arith.andi %135, %c63_i32_36 : i32
    %c128_i32_37 = arith.constant 128 : i32
    %137 = arith.ori %136, %c128_i32_37 : i32
    %c13_i64_38 = arith.constant 13 : i64
    %138 = arith.extui %132 : i32 to i64
    %139 = arith.addi %138, %c13_i64_38 : i64
    %140 = llvm.getelementptr %8[%139] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %141 = arith.trunci %137 : i32 to i8
    llvm.store volatile %141, %140 {alignment = 1 : i64} : i8, !llvm.ptr
    %c3_i32 = arith.constant 3 : i32
    llvm.store %c3_i32, %1 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb11:  // 2 preds: ^bb6, ^bb12
    %142 = llvm.load %0 : !llvm.ptr -> i32
    %143 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32 = arith.constant 1 : i32
    %144 = arith.addi %143, %c1_i32 : i32
    %c8_i64_39 = arith.constant 8 : i64
    %145 = arith.extui %142 : i32 to i64
    %146 = arith.addi %145, %c8_i64_39 : i64
    %147 = llvm.getelementptr %8[%146] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %144, %147 {alignment = 1 : i64} : i32, !llvm.ptr
    %148 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %149 = arith.extui %148 : i32 to i64
    %150 = arith.addi %149, %c4_i64 : i64
    %151 = llvm.getelementptr %8[%150] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %152 = llvm.load volatile %151 {alignment = 1 : i64} : !llvm.ptr -> i32
    %153 = llvm.load %3 : !llvm.ptr -> i32
    %154 = arith.addi %152, %153 : i32
    %155 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_40 = arith.constant 0 : i64
    %156 = arith.extui %154 : i32 to i64
    %157 = arith.addi %156, %c0_i64_40 : i64
    %158 = llvm.getelementptr %8[%157] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %159 = arith.trunci %155 : i32 to i8
    llvm.store volatile %159, %158 {alignment = 1 : i64} : i8, !llvm.ptr
    cf.br ^bb3
  ^bb12:  // pred: ^bb6
    %160 = llvm.load %0 : !llvm.ptr -> i32
    call @f29(%arg0, %160) : (!llvm.ptr, i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb4, ^bb14
    %161 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_41 = arith.constant 4 : i64
    %162 = arith.extui %161 : i32 to i64
    %163 = arith.addi %162, %c4_i64_41 : i64
    %164 = llvm.getelementptr %8[%163] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %165 = llvm.load volatile %164 {alignment = 1 : i64} : !llvm.ptr -> i32
    %166 = llvm.load %3 : !llvm.ptr -> i32
    %167 = arith.addi %165, %166 : i32
    %168 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32_42 = arith.constant 12 : i32
    %169 = arith.addi %168, %c12_i32_42 : i32
    %170 = llvm.load %1 : !llvm.ptr -> i32
    %171 = call @f88(%arg0, %167, %169, %170) : (!llvm.ptr, i32, i32, i32) -> i32
    %172 = llvm.load %0 : !llvm.ptr -> i32
    %173 = llvm.load %3 : !llvm.ptr -> i32
    %174 = llvm.load %1 : !llvm.ptr -> i32
    %175 = arith.addi %173, %174 : i32
    %c8_i64_43 = arith.constant 8 : i64
    %176 = arith.extui %172 : i32 to i64
    %177 = arith.addi %176, %c8_i64_43 : i64
    %178 = llvm.getelementptr %8[%177] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %175, %178 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb3
  ^bb14:  // pred: ^bb4
    %179 = llvm.load %0 : !llvm.ptr -> i32
    %180 = llvm.load %3 : !llvm.ptr -> i32
    %181 = llvm.load %1 : !llvm.ptr -> i32
    call @f23(%arg0, %179, %180, %181) : (!llvm.ptr, i32, i32, i32) -> ()
    %182 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_44 = arith.constant 8 : i64
    %183 = arith.extui %182 : i32 to i64
    %184 = arith.addi %183, %c8_i64_44 : i64
    %185 = llvm.getelementptr %8[%184] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %186 = llvm.load volatile %185 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %186, %3 : i32, !llvm.ptr
    cf.br ^bb13
  }
  func.func @f29(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i64_4 = arith.constant 1 : i64
    %5 = llvm.alloca %c1_i64_4 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %11 = llvm.load %7 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %12 = arith.subi %11, %c32_i32 : i32
    llvm.store %12, %1 : i32, !llvm.ptr
    llvm.store %12, %7 : i32, !llvm.ptr
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c0_i64 : i64
    %16 = llvm.getelementptr %10[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load volatile %16 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %17, %2 : i32, !llvm.ptr
    %c-1_i32 = arith.constant -1 : i32
    %18 = arith.cmpi eq, %17, %c-1_i32 : i32
    %19 = arith.extui %18 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %20 = arith.cmpi eq, %19, %c0_i32_5 : i32
    %21 = arith.extui %20 : i1 to i32
    %c0_i32_6 = arith.constant 0 : i32
    %22 = arith.cmpi ne, %21, %c0_i32_6 : i32
    cf.cond_br %22, ^bb3, ^bb4
  ^bb2:  // pred: ^bb8
    return
  ^bb3:  // pred: ^bb1
    %c1_i32 = arith.constant 1 : i32
    llvm.store %c1_i32, %3 : i32, !llvm.ptr
    %23 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_7 = arith.constant 1 : i32
    %c31_i32 = arith.constant 31 : i32
    %24 = arith.cmpi ule, %c1_i32_7, %c31_i32 : i32
    %25 = scf.if %24 -> (i32) {
      %104 = arith.shli %23, %c1_i32_7 : i32
      scf.yield %104 : i32
    } else {
      %c0_i32_26 = arith.constant 0 : i32
      scf.yield %c0_i32_26 : i32
    }
    llvm.store %25, %4 : i32, !llvm.ptr
    %26 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_8 = arith.constant 1 : i32
    %27 = arith.addi %26, %c1_i32_8 : i32
    llvm.store %27, %5 : i32, !llvm.ptr
    %28 = llvm.load %4 : !llvm.ptr -> i32
    %29 = llvm.load %5 : !llvm.ptr -> i32
    %30 = arith.cmpi ugt, %28, %29 : i32
    %31 = arith.extui %30 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %32 = arith.cmpi ne, %31, %c0_i32_9 : i32
    %33 = arith.select %32, %25, %27 : i32
    llvm.store %33, %4 : i32, !llvm.ptr
    %c8_i32 = arith.constant 8 : i32
    %34 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i32_10 = arith.constant 8 : i32
    %35 = arith.cmpi ugt, %34, %c8_i32_10 : i32
    %36 = arith.extui %35 : i1 to i32
    %c0_i32_11 = arith.constant 0 : i32
    %37 = arith.cmpi ne, %36, %c0_i32_11 : i32
    %38 = arith.select %37, %33, %c8_i32 : i32
    llvm.store %38, %4 : i32, !llvm.ptr
    %c-1_i32_12 = arith.constant -1 : i32
    %39 = arith.xori %38, %c-1_i32_12 : i32
    %c31_i32_13 = arith.constant 31 : i32
    %c31_i32_14 = arith.constant 31 : i32
    %40 = arith.cmpi ule, %c31_i32_13, %c31_i32_14 : i32
    %41 = scf.if %40 -> (i32) {
      %104 = arith.shrui %39, %c31_i32_13 : i32
      scf.yield %104 : i32
    } else {
      %c0_i32_26 = arith.constant 0 : i32
      scf.yield %c0_i32_26 : i32
    }
    llvm.store %41, %5 : i32, !llvm.ptr
    %42 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_15 = arith.constant 0 : i32
    %43 = arith.cmpi ne, %42, %c0_i32_15 : i32
    cf.cond_br %43, ^bb6, ^bb7
  ^bb4:  // pred: ^bb1
    %c0_i32_16 = arith.constant 0 : i32
    %c0_i32_17 = arith.constant 0 : i32
    call @f62(%arg0, %c0_i32_16, %c0_i32_17) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb5:  // 2 preds: ^bb6, ^bb7
    %44 = llvm.load %1 : !llvm.ptr -> i32
    %45 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %46 = arith.extui %44 : i32 to i64
    %47 = arith.addi %46, %c24_i64 : i64
    %48 = llvm.getelementptr %10[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %45, %48 {alignment = 1 : i64} : i32, !llvm.ptr
    %49 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_18 = arith.constant 8 : i32
    %50 = arith.addi %49, %c8_i32_18 : i32
    %51 = llvm.load %5 : !llvm.ptr -> i32
    %52 = llvm.load %4 : !llvm.ptr -> i32
    %53 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i32 = arith.constant 20 : i32
    %54 = arith.addi %53, %c20_i32 : i32
    call @f31(%arg0, %50, %51, %52, %54) : (!llvm.ptr, i32, i32, i32, i32) -> ()
    %55 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %56 = arith.extui %55 : i32 to i64
    %57 = arith.addi %56, %c8_i64 : i64
    %58 = llvm.getelementptr %10[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %59 = llvm.load volatile %58 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_19 = arith.constant 0 : i32
    %60 = arith.cmpi eq, %59, %c0_i32_19 : i32
    %61 = arith.extui %60 : i1 to i32
    %c0_i32_20 = arith.constant 0 : i32
    %62 = arith.cmpi ne, %61, %c0_i32_20 : i32
    cf.cond_br %62, ^bb8, ^bb9
  ^bb6:  // pred: ^bb3
    %63 = llvm.load %1 : !llvm.ptr -> i32
    %64 = llvm.load %2 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %65 = arith.extui %63 : i32 to i64
    %66 = arith.addi %65, %c28_i64 : i64
    %67 = llvm.getelementptr %10[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %64, %67 {alignment = 1 : i64} : i32, !llvm.ptr
    %68 = llvm.load %1 : !llvm.ptr -> i32
    %69 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %70 = arith.extui %69 : i32 to i64
    %71 = arith.addi %70, %c4_i64 : i64
    %72 = llvm.getelementptr %10[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %73 = llvm.load volatile %72 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %74 = arith.extui %68 : i32 to i64
    %75 = arith.addi %74, %c20_i64 : i64
    %76 = llvm.getelementptr %10[%75] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %73, %76 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb5
  ^bb7:  // pred: ^bb3
    %c0_i32_21 = arith.constant 0 : i32
    llvm.store %c0_i32_21, %3 : i32, !llvm.ptr
    cf.br ^bb5
  ^bb8:  // pred: ^bb5
    %77 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %78 = arith.extui %77 : i32 to i64
    %79 = arith.addi %78, %c12_i64 : i64
    %80 = llvm.getelementptr %10[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %81 = llvm.load volatile %80 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %81, %2 : i32, !llvm.ptr
    %82 = llvm.load %0 : !llvm.ptr -> i32
    %83 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_22 = arith.constant 0 : i64
    %84 = arith.extui %82 : i32 to i64
    %85 = arith.addi %84, %c0_i64_22 : i64
    %86 = llvm.getelementptr %10[%85] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %83, %86 {alignment = 1 : i64} : i32, !llvm.ptr
    %87 = llvm.load %0 : !llvm.ptr -> i32
    %88 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_23 = arith.constant 4 : i64
    %89 = arith.extui %87 : i32 to i64
    %90 = arith.addi %89, %c4_i64_23 : i64
    %91 = llvm.getelementptr %10[%90] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %88, %91 {alignment = 1 : i64} : i32, !llvm.ptr
    %92 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i32_24 = arith.constant 32 : i32
    %93 = arith.addi %92, %c32_i32_24 : i32
    llvm.store %93, %7 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb9:  // pred: ^bb5
    %94 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64_25 = arith.constant 12 : i64
    %95 = arith.extui %94 : i32 to i64
    %96 = arith.addi %95, %c12_i64_25 : i64
    %97 = llvm.getelementptr %10[%96] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %98 = llvm.load volatile %97 {alignment = 1 : i64} : !llvm.ptr -> i32
    %99 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %100 = arith.extui %99 : i32 to i64
    %101 = arith.addi %100, %c16_i64 : i64
    %102 = llvm.getelementptr %10[%101] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %103 = llvm.load volatile %102 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f62(%arg0, %98, %103) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  }
  func.func @f30(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %7 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %8 = arith.extui %7 : i32 to i64
    %9 = arith.addi %8, %c0_i64 : i64
    %10 = llvm.getelementptr %6[%9] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %11 = llvm.load volatile %10 {alignment = 1 : i64} : !llvm.ptr -> i32
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c8_i64 : i64
    %15 = llvm.getelementptr %6[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %16 = llvm.load volatile %15 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %16, %3 : i32, !llvm.ptr
    %17 = arith.subi %11, %16 : i32
    %18 = llvm.load %2 : !llvm.ptr -> i32
    %19 = arith.cmpi uge, %17, %18 : i32
    %20 = arith.extui %19 : i1 to i32
    %c0_i32_3 = arith.constant 0 : i32
    %21 = arith.cmpi ne, %20, %c0_i32_3 : i32
    cf.cond_br %21, ^bb3, ^bb4
  ^bb2(%22: i32):  // pred: ^bb3
    return %22 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %23 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %24 = arith.extui %23 : i32 to i64
    %25 = arith.addi %24, %c4_i64 : i64
    %26 = llvm.getelementptr %6[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %27 = llvm.load volatile %26 {alignment = 1 : i64} : !llvm.ptr -> i32
    %28 = llvm.load %3 : !llvm.ptr -> i32
    %29 = arith.addi %27, %28 : i32
    %30 = llvm.load %1 : !llvm.ptr -> i32
    %31 = llvm.load %2 : !llvm.ptr -> i32
    %32 = call @f88(%arg0, %29, %30, %31) : (!llvm.ptr, i32, i32, i32) -> i32
    %33 = llvm.load %0 : !llvm.ptr -> i32
    %34 = llvm.load %3 : !llvm.ptr -> i32
    %35 = llvm.load %2 : !llvm.ptr -> i32
    %36 = arith.addi %34, %35 : i32
    %c8_i64_4 = arith.constant 8 : i64
    %37 = arith.extui %33 : i32 to i64
    %38 = arith.addi %37, %c8_i64_4 : i64
    %39 = llvm.getelementptr %6[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %36, %39 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_5 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32_5 : i32)
  ^bb4:  // pred: ^bb1
    %40 = llvm.load %0 : !llvm.ptr -> i32
    %41 = llvm.load %3 : !llvm.ptr -> i32
    %42 = llvm.load %2 : !llvm.ptr -> i32
    call @f23(%arg0, %40, %41, %42) : (!llvm.ptr, i32, i32, i32) -> ()
    %43 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_6 = arith.constant 8 : i64
    %44 = arith.extui %43 : i32 to i64
    %45 = arith.addi %44, %c8_i64_6 : i64
    %46 = llvm.getelementptr %6[%45] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %47 = llvm.load volatile %46 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %47, %3 : i32, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f31(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %5 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_4 = arith.constant 0 : i32
    %9 = arith.cmpi eq, %8, %c0_i32_4 : i32
    %10 = arith.extui %9 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %11 = arith.cmpi ne, %10, %c0_i32_5 : i32
    cf.cond_br %11, ^bb5, ^bb6
  ^bb2:  // 2 preds: ^bb3, ^bb19
    return
  ^bb3:  // 3 preds: ^bb4, ^bb5, ^bb18
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32 = arith.constant 1 : i32
    %c0_i64 = arith.constant 0 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c0_i64 : i64
    %15 = llvm.getelementptr %7[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32, %15 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb6
    %16 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_6 = arith.constant 0 : i32
    %c4_i64 = arith.constant 4 : i64
    %17 = arith.extui %16 : i32 to i64
    %18 = arith.addi %17, %c4_i64 : i64
    %19 = llvm.getelementptr %7[%18] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_6, %19 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // pred: ^bb1
    %20 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_7 = arith.constant 0 : i32
    %c4_i64_8 = arith.constant 4 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c4_i64_8 : i64
    %23 = llvm.getelementptr %7[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_7, %23 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb3
  ^bb6:  // pred: ^bb1
    %24 = llvm.load %2 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %25 = arith.cmpi sle, %24, %c-1_i32 : i32
    %26 = arith.extui %25 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %27 = arith.cmpi ne, %26, %c0_i32_9 : i32
    cf.cond_br %27, ^bb4, ^bb7
  ^bb7:  // pred: ^bb6
    %28 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64_10 = arith.constant 4 : i64
    %29 = arith.extui %28 : i32 to i64
    %30 = arith.addi %29, %c4_i64_10 : i64
    %31 = llvm.getelementptr %7[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %32 = llvm.load volatile %31 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_11 = arith.constant 0 : i32
    %33 = arith.cmpi eq, %32, %c0_i32_11 : i32
    %34 = arith.extui %33 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %35 = arith.cmpi ne, %34, %c0_i32_12 : i32
    cf.cond_br %35, ^bb10, ^bb11
  ^bb8:  // 4 preds: ^bb9, ^bb12, ^bb15, ^bb17
    %36 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_13 = arith.constant 0 : i32
    %37 = arith.cmpi eq, %36, %c0_i32_13 : i32
    %38 = arith.extui %37 : i1 to i32
    %c0_i32_14 = arith.constant 0 : i32
    %39 = arith.cmpi ne, %38, %c0_i32_14 : i32
    cf.cond_br %39, ^bb18, ^bb19
  ^bb9:  // 2 preds: ^bb14, ^bb16
    %40 = llvm.load %2 : !llvm.ptr -> i32
    %41 = llvm.load %1 : !llvm.ptr -> i32
    %42 = call @f17(%arg0, %40, %41) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %42, %3 : i32, !llvm.ptr
    cf.br ^bb8
  ^bb10:  // pred: ^bb7
    %43 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_15 = arith.constant 0 : i32
    %44 = arith.cmpi ne, %43, %c0_i32_15 : i32
    cf.cond_br %44, ^bb16, ^bb17
  ^bb11:  // pred: ^bb7
    %45 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %46 = arith.extui %45 : i32 to i64
    %47 = arith.addi %46, %c8_i64 : i64
    %48 = llvm.getelementptr %7[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %49 = llvm.load volatile %48 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %49, %4 : i32, !llvm.ptr
    %c0_i32_16 = arith.constant 0 : i32
    %50 = arith.cmpi ne, %49, %c0_i32_16 : i32
    cf.cond_br %50, ^bb12, ^bb13
  ^bb12:  // pred: ^bb11
    %51 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_17 = arith.constant 0 : i64
    %52 = arith.extui %51 : i32 to i64
    %53 = arith.addi %52, %c0_i64_17 : i64
    %54 = llvm.getelementptr %7[%53] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %55 = llvm.load volatile %54 {alignment = 1 : i64} : !llvm.ptr -> i32
    %56 = llvm.load %4 : !llvm.ptr -> i32
    %57 = llvm.load %1 : !llvm.ptr -> i32
    %58 = llvm.load %2 : !llvm.ptr -> i32
    %59 = call @f19(%arg0, %55, %56, %57, %58) : (!llvm.ptr, i32, i32, i32, i32) -> i32
    llvm.store %59, %3 : i32, !llvm.ptr
    cf.br ^bb8
  ^bb13:  // pred: ^bb11
    %60 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_18 = arith.constant 0 : i32
    %61 = arith.cmpi ne, %60, %c0_i32_18 : i32
    cf.cond_br %61, ^bb14, ^bb15
  ^bb14:  // pred: ^bb13
    %c0_i32_19 = arith.constant 0 : i32
    %c1049537_i64 = arith.constant 1049537 : i64
    %62 = arith.extui %c0_i32_19 : i32 to i64
    %63 = arith.addi %62, %c1049537_i64 : i64
    %64 = llvm.getelementptr %7[%63] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %65 = llvm.load volatile %64 {alignment = 1 : i64} : !llvm.ptr -> i8
    %66 = arith.extui %65 : i8 to i32
    cf.br ^bb9
  ^bb15:  // pred: ^bb13
    %67 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %67, %3 : i32, !llvm.ptr
    cf.br ^bb8
  ^bb16:  // pred: ^bb10
    %c0_i32_20 = arith.constant 0 : i32
    %c1049537_i64_21 = arith.constant 1049537 : i64
    %68 = arith.extui %c0_i32_20 : i32 to i64
    %69 = arith.addi %68, %c1049537_i64_21 : i64
    %70 = llvm.getelementptr %7[%69] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %71 = llvm.load volatile %70 {alignment = 1 : i64} : !llvm.ptr -> i8
    %72 = arith.extui %71 : i8 to i32
    cf.br ^bb9
  ^bb17:  // pred: ^bb10
    %73 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %73, %3 : i32, !llvm.ptr
    cf.br ^bb8
  ^bb18:  // pred: ^bb8
    %74 = llvm.load %0 : !llvm.ptr -> i32
    %75 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_22 = arith.constant 8 : i64
    %76 = arith.extui %74 : i32 to i64
    %77 = arith.addi %76, %c8_i64_22 : i64
    %78 = llvm.getelementptr %7[%77] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %75, %78 {alignment = 1 : i64} : i32, !llvm.ptr
    %79 = llvm.load %0 : !llvm.ptr -> i32
    %80 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_23 = arith.constant 4 : i64
    %81 = arith.extui %79 : i32 to i64
    %82 = arith.addi %81, %c4_i64_23 : i64
    %83 = llvm.getelementptr %7[%82] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %80, %83 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb3
  ^bb19:  // pred: ^bb8
    %84 = llvm.load %0 : !llvm.ptr -> i32
    %85 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_24 = arith.constant 8 : i64
    %86 = arith.extui %84 : i32 to i64
    %87 = arith.addi %86, %c8_i64_24 : i64
    %88 = llvm.getelementptr %7[%87] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %85, %88 {alignment = 1 : i64} : i32, !llvm.ptr
    %89 = llvm.load %0 : !llvm.ptr -> i32
    %90 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64_25 = arith.constant 4 : i64
    %91 = arith.extui %89 : i32 to i64
    %92 = arith.addi %91, %c4_i64_25 : i64
    %93 = llvm.getelementptr %7[%92] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %90, %93 {alignment = 1 : i64} : i32, !llvm.ptr
    %94 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_26 = arith.constant 0 : i32
    %c0_i64_27 = arith.constant 0 : i64
    %95 = arith.extui %94 : i32 to i64
    %96 = arith.addi %95, %c0_i64_27 : i64
    %97 = llvm.getelementptr %7[%96] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_26, %97 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  }
  func.func @f32(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i64_4 = arith.constant 1 : i64
    %5 = llvm.alloca %c1_i64_4 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %10 = arith.extui %9 : i32 to i64
    %11 = arith.addi %10, %c12_i64 : i64
    %12 = llvm.getelementptr %8[%11] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %13 = llvm.load volatile %12 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %13, %2 : i32, !llvm.ptr
    %14 = llvm.load %1 : !llvm.ptr -> i32
    %c256_i32 = arith.constant 256 : i32
    %15 = arith.cmpi ult, %14, %c256_i32 : i32
    %16 = arith.extui %15 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %17 = arith.cmpi ne, %16, %c0_i32_5 : i32
    cf.cond_br %17, ^bb5, ^bb6
  ^bb2:  // 4 preds: ^bb3, ^bb20, ^bb21, ^bb24
    return
  ^bb3:  // 4 preds: ^bb7, ^bb17, ^bb19, ^bb22
    cf.br ^bb2
  ^bb4:  // 2 preds: ^bb16, ^bb18
    %18 = llvm.load %2 : !llvm.ptr -> i32
    %19 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %20 = arith.extui %18 : i32 to i64
    %21 = arith.addi %20, %c24_i64 : i64
    %22 = llvm.getelementptr %8[%21] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %19, %22 {alignment = 1 : i64} : i32, !llvm.ptr
    %23 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %24 = arith.extui %23 : i32 to i64
    %25 = arith.addi %24, %c16_i64 : i64
    %26 = llvm.getelementptr %8[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %27 = llvm.load volatile %26 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %27, %1 : i32, !llvm.ptr
    %c0_i32_6 = arith.constant 0 : i32
    %28 = arith.cmpi eq, %27, %c0_i32_6 : i32
    %29 = arith.extui %28 : i1 to i32
    %c0_i32_7 = arith.constant 0 : i32
    %30 = arith.cmpi ne, %29, %c0_i32_7 : i32
    cf.cond_br %30, ^bb22, ^bb23
  ^bb5:  // pred: ^bb1
    %31 = llvm.load %2 : !llvm.ptr -> i32
    %32 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %33 = arith.extui %32 : i32 to i64
    %34 = arith.addi %33, %c8_i64 : i64
    %35 = llvm.getelementptr %8[%34] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %36 = llvm.load volatile %35 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %36, %4 : i32, !llvm.ptr
    %37 = arith.cmpi eq, %31, %36 : i32
    %38 = arith.extui %37 : i1 to i32
    %c0_i32_8 = arith.constant 0 : i32
    %39 = arith.cmpi ne, %38, %c0_i32_8 : i32
    cf.cond_br %39, ^bb20, ^bb21
  ^bb6:  // pred: ^bb1
    %40 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64_9 = arith.constant 24 : i64
    %41 = arith.extui %40 : i32 to i64
    %42 = arith.addi %41, %c24_i64_9 : i64
    %43 = llvm.getelementptr %8[%42] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %44 = llvm.load volatile %43 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %44, %3 : i32, !llvm.ptr
    %45 = llvm.load %2 : !llvm.ptr -> i32
    %46 = llvm.load %0 : !llvm.ptr -> i32
    %47 = arith.cmpi eq, %45, %46 : i32
    %48 = arith.extui %47 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %49 = arith.cmpi eq, %48, %c0_i32_10 : i32
    %50 = arith.extui %49 : i1 to i32
    %c0_i32_11 = arith.constant 0 : i32
    %51 = arith.cmpi ne, %50, %c0_i32_11 : i32
    cf.cond_br %51, ^bb9, ^bb10
  ^bb7:  // 3 preds: ^bb9, ^bb11, ^bb12
    %52 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_12 = arith.constant 0 : i32
    %53 = arith.cmpi eq, %52, %c0_i32_12 : i32
    %54 = arith.extui %53 : i1 to i32
    %c0_i32_13 = arith.constant 0 : i32
    %55 = arith.cmpi ne, %54, %c0_i32_13 : i32
    cf.cond_br %55, ^bb3, ^bb15
  ^bb8:  // pred: ^bb10
    %56 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i32 = arith.constant 20 : i32
    %57 = arith.addi %56, %c20_i32 : i32
    %58 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %59 = arith.addi %58, %c16_i32 : i32
    %60 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_14 = arith.constant 0 : i32
    %61 = arith.cmpi ne, %60, %c0_i32_14 : i32
    %62 = arith.select %61, %57, %59 : i32
    llvm.store %62, %4 : i32, !llvm.ptr
    cf.br ^bb13
  ^bb9:  // pred: ^bb6
    %63 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_15 = arith.constant 8 : i64
    %64 = arith.extui %63 : i32 to i64
    %65 = arith.addi %64, %c8_i64_15 : i64
    %66 = llvm.getelementptr %8[%65] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %67 = llvm.load volatile %66 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %67, %1 : i32, !llvm.ptr
    %68 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64_16 = arith.constant 12 : i64
    %69 = arith.extui %67 : i32 to i64
    %70 = arith.addi %69, %c12_i64_16 : i64
    %71 = llvm.getelementptr %8[%70] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %68, %71 {alignment = 1 : i64} : i32, !llvm.ptr
    %72 = llvm.load %2 : !llvm.ptr -> i32
    %73 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64_17 = arith.constant 8 : i64
    %74 = arith.extui %72 : i32 to i64
    %75 = arith.addi %74, %c8_i64_17 : i64
    %76 = llvm.getelementptr %8[%75] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %73, %76 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb7
  ^bb10:  // pred: ^bb6
    %77 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i32_18 = arith.constant 20 : i32
    %c16_i32_19 = arith.constant 16 : i32
    %78 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %79 = arith.extui %78 : i32 to i64
    %80 = arith.addi %79, %c20_i64 : i64
    %81 = llvm.getelementptr %8[%80] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %82 = llvm.load volatile %81 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %82, %2 : i32, !llvm.ptr
    %c0_i32_20 = arith.constant 0 : i32
    %83 = arith.cmpi ne, %82, %c0_i32_20 : i32
    %84 = arith.select %83, %c20_i32_18, %c16_i32_19 : i32
    %85 = arith.addi %77, %84 : i32
    %c0_i64 = arith.constant 0 : i64
    %86 = arith.extui %85 : i32 to i64
    %87 = arith.addi %86, %c0_i64 : i64
    %88 = llvm.getelementptr %8[%87] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %89 = llvm.load volatile %88 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %89, %1 : i32, !llvm.ptr
    %c0_i32_21 = arith.constant 0 : i32
    %90 = arith.cmpi ne, %89, %c0_i32_21 : i32
    cf.cond_br %90, ^bb8, ^bb11
  ^bb11:  // pred: ^bb10
    %c0_i32_22 = arith.constant 0 : i32
    llvm.store %c0_i32_22, %2 : i32, !llvm.ptr
    cf.br ^bb7
  ^bb12:  // pred: ^bb14
    %91 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i32_23 = arith.constant 0 : i32
    %c0_i64_24 = arith.constant 0 : i64
    %92 = arith.extui %91 : i32 to i64
    %93 = arith.addi %92, %c0_i64_24 : i64
    %94 = llvm.getelementptr %8[%93] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_23, %94 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb7
  ^bb13:  // 2 preds: ^bb8, ^bb13
    %95 = llvm.load %4 : !llvm.ptr -> i32
    llvm.store %95, %5 : i32, !llvm.ptr
    %96 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %96, %2 : i32, !llvm.ptr
    %c20_i32_25 = arith.constant 20 : i32
    %97 = arith.addi %96, %c20_i32_25 : i32
    %98 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_26 = arith.constant 16 : i32
    %99 = arith.addi %98, %c16_i32_26 : i32
    %100 = llvm.load %2 : !llvm.ptr -> i32
    %c20_i64_27 = arith.constant 20 : i64
    %101 = arith.extui %100 : i32 to i64
    %102 = arith.addi %101, %c20_i64_27 : i64
    %103 = llvm.getelementptr %8[%102] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %104 = llvm.load volatile %103 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %104, %1 : i32, !llvm.ptr
    %c0_i32_28 = arith.constant 0 : i32
    %105 = arith.cmpi ne, %104, %c0_i32_28 : i32
    %106 = arith.select %105, %97, %99 : i32
    llvm.store %106, %4 : i32, !llvm.ptr
    %107 = llvm.load %2 : !llvm.ptr -> i32
    %c20_i32_29 = arith.constant 20 : i32
    %c16_i32_30 = arith.constant 16 : i32
    %108 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_31 = arith.constant 0 : i32
    %109 = arith.cmpi ne, %108, %c0_i32_31 : i32
    %110 = arith.select %109, %c20_i32_29, %c16_i32_30 : i32
    %111 = arith.addi %107, %110 : i32
    %c0_i64_32 = arith.constant 0 : i64
    %112 = arith.extui %111 : i32 to i64
    %113 = arith.addi %112, %c0_i64_32 : i64
    %114 = llvm.getelementptr %8[%113] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %115 = llvm.load volatile %114 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %115, %1 : i32, !llvm.ptr
    %c0_i32_33 = arith.constant 0 : i32
    %116 = arith.cmpi ne, %115, %c0_i32_33 : i32
    cf.cond_br %116, ^bb13, ^bb14
  ^bb14:  // pred: ^bb13
    cf.br ^bb12
  ^bb15:  // pred: ^bb7
    %117 = llvm.load %0 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %118 = arith.extui %117 : i32 to i64
    %119 = arith.addi %118, %c28_i64 : i64
    %120 = llvm.getelementptr %8[%119] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %121 = llvm.load volatile %120 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c31_i32 = arith.constant 31 : i32
    %122 = arith.cmpi ule, %c2_i32, %c31_i32 : i32
    %123 = scf.if %122 -> (i32) {
      %232 = arith.shli %121, %c2_i32 : i32
      scf.yield %232 : i32
    } else {
      %c0_i32_64 = arith.constant 0 : i32
      scf.yield %c0_i32_64 : i32
    }
    %c1049560_i32 = arith.constant 1049560 : i32
    %124 = arith.addi %123, %c1049560_i32 : i32
    llvm.store %124, %1 : i32, !llvm.ptr
    %c0_i64_34 = arith.constant 0 : i64
    %125 = arith.extui %124 : i32 to i64
    %126 = arith.addi %125, %c0_i64_34 : i64
    %127 = llvm.getelementptr %8[%126] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %128 = llvm.load volatile %127 {alignment = 1 : i64} : !llvm.ptr -> i32
    %129 = llvm.load %0 : !llvm.ptr -> i32
    %130 = arith.cmpi eq, %128, %129 : i32
    %131 = arith.extui %130 : i1 to i32
    %c0_i32_35 = arith.constant 0 : i32
    %132 = arith.cmpi ne, %131, %c0_i32_35 : i32
    cf.cond_br %132, ^bb16, ^bb17
  ^bb16:  // pred: ^bb15
    %133 = llvm.load %1 : !llvm.ptr -> i32
    %134 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_36 = arith.constant 0 : i64
    %135 = arith.extui %133 : i32 to i64
    %136 = arith.addi %135, %c0_i64_36 : i64
    %137 = llvm.getelementptr %8[%136] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %134, %137 {alignment = 1 : i64} : i32, !llvm.ptr
    %138 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_37 = arith.constant 0 : i32
    %139 = arith.cmpi ne, %138, %c0_i32_37 : i32
    cf.cond_br %139, ^bb4, ^bb19
  ^bb17:  // pred: ^bb15
    %140 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_38 = arith.constant 16 : i32
    %c20_i32_39 = arith.constant 20 : i32
    %141 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i64_40 = arith.constant 16 : i64
    %142 = arith.extui %141 : i32 to i64
    %143 = arith.addi %142, %c16_i64_40 : i64
    %144 = llvm.getelementptr %8[%143] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %145 = llvm.load volatile %144 {alignment = 1 : i64} : !llvm.ptr -> i32
    %146 = llvm.load %0 : !llvm.ptr -> i32
    %147 = arith.cmpi eq, %145, %146 : i32
    %148 = arith.extui %147 : i1 to i32
    %c0_i32_41 = arith.constant 0 : i32
    %149 = arith.cmpi ne, %148, %c0_i32_41 : i32
    %150 = arith.select %149, %c16_i32_38, %c20_i32_39 : i32
    %151 = arith.addi %140, %150 : i32
    %152 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_42 = arith.constant 0 : i64
    %153 = arith.extui %151 : i32 to i64
    %154 = arith.addi %153, %c0_i64_42 : i64
    %155 = llvm.getelementptr %8[%154] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %152, %155 {alignment = 1 : i64} : i32, !llvm.ptr
    %156 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_43 = arith.constant 0 : i32
    %157 = arith.cmpi eq, %156, %c0_i32_43 : i32
    %158 = arith.extui %157 : i1 to i32
    %c0_i32_44 = arith.constant 0 : i32
    %159 = arith.cmpi ne, %158, %c0_i32_44 : i32
    cf.cond_br %159, ^bb3, ^bb18
  ^bb18:  // pred: ^bb17
    cf.br ^bb4
  ^bb19:  // pred: ^bb16
    %c0_i32_45 = arith.constant 0 : i32
    %c0_i32_46 = arith.constant 0 : i32
    %c1049972_i64 = arith.constant 1049972 : i64
    %160 = arith.extui %c0_i32_46 : i32 to i64
    %161 = arith.addi %160, %c1049972_i64 : i64
    %162 = llvm.getelementptr %8[%161] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %163 = llvm.load volatile %162 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-2_i32 = arith.constant -2 : i32
    %164 = llvm.load %0 : !llvm.ptr -> i32
    %c28_i64_47 = arith.constant 28 : i64
    %165 = arith.extui %164 : i32 to i64
    %166 = arith.addi %165, %c28_i64_47 : i64
    %167 = llvm.getelementptr %8[%166] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %168 = llvm.load volatile %167 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %169 = arith.remui %168, %c32_i32 : i32
    %170 = arith.shli %c-2_i32, %169 : i32
    %171 = arith.subi %c32_i32, %169 : i32
    %172 = arith.shrui %c-2_i32, %171 : i32
    %173 = arith.ori %170, %172 : i32
    %174 = arith.andi %163, %173 : i32
    %c1049972_i64_48 = arith.constant 1049972 : i64
    %175 = arith.extui %c0_i32_45 : i32 to i64
    %176 = arith.addi %175, %c1049972_i64_48 : i64
    %177 = llvm.getelementptr %8[%176] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %174, %177 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb3
  ^bb20:  // pred: ^bb5
    %c0_i32_49 = arith.constant 0 : i32
    %c0_i32_50 = arith.constant 0 : i32
    %c1049968_i64 = arith.constant 1049968 : i64
    %178 = arith.extui %c0_i32_50 : i32 to i64
    %179 = arith.addi %178, %c1049968_i64 : i64
    %180 = llvm.getelementptr %8[%179] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %181 = llvm.load volatile %180 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-2_i32_51 = arith.constant -2 : i32
    %182 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %c31_i32_52 = arith.constant 31 : i32
    %183 = arith.cmpi ule, %c3_i32, %c31_i32_52 : i32
    %184 = scf.if %183 -> (i32) {
      %232 = arith.shrui %182, %c3_i32 : i32
      scf.yield %232 : i32
    } else {
      %c0_i32_64 = arith.constant 0 : i32
      scf.yield %c0_i32_64 : i32
    }
    %c32_i32_53 = arith.constant 32 : i32
    %185 = arith.remui %184, %c32_i32_53 : i32
    %186 = arith.shli %c-2_i32_51, %185 : i32
    %187 = arith.subi %c32_i32_53, %185 : i32
    %188 = arith.shrui %c-2_i32_51, %187 : i32
    %189 = arith.ori %186, %188 : i32
    %190 = arith.andi %181, %189 : i32
    %c1049968_i64_54 = arith.constant 1049968 : i64
    %191 = arith.extui %c0_i32_49 : i32 to i64
    %192 = arith.addi %191, %c1049968_i64_54 : i64
    %193 = llvm.getelementptr %8[%192] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %190, %193 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb21:  // pred: ^bb5
    %194 = llvm.load %4 : !llvm.ptr -> i32
    %195 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64_55 = arith.constant 12 : i64
    %196 = arith.extui %194 : i32 to i64
    %197 = arith.addi %196, %c12_i64_55 : i64
    %198 = llvm.getelementptr %8[%197] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %195, %198 {alignment = 1 : i64} : i32, !llvm.ptr
    %199 = llvm.load %2 : !llvm.ptr -> i32
    %200 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i64_56 = arith.constant 8 : i64
    %201 = arith.extui %199 : i32 to i64
    %202 = arith.addi %201, %c8_i64_56 : i64
    %203 = llvm.getelementptr %8[%202] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %200, %203 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb22:  // 2 preds: ^bb4, ^bb23
    %204 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64_57 = arith.constant 20 : i64
    %205 = arith.extui %204 : i32 to i64
    %206 = arith.addi %205, %c20_i64_57 : i64
    %207 = llvm.getelementptr %8[%206] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %208 = llvm.load volatile %207 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %208, %1 : i32, !llvm.ptr
    %c0_i32_58 = arith.constant 0 : i32
    %209 = arith.cmpi eq, %208, %c0_i32_58 : i32
    %210 = arith.extui %209 : i1 to i32
    %c0_i32_59 = arith.constant 0 : i32
    %211 = arith.cmpi ne, %210, %c0_i32_59 : i32
    cf.cond_br %211, ^bb3, ^bb24
  ^bb23:  // pred: ^bb4
    %212 = llvm.load %2 : !llvm.ptr -> i32
    %213 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i64_60 = arith.constant 16 : i64
    %214 = arith.extui %212 : i32 to i64
    %215 = arith.addi %214, %c16_i64_60 : i64
    %216 = llvm.getelementptr %8[%215] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %213, %216 {alignment = 1 : i64} : i32, !llvm.ptr
    %217 = llvm.load %1 : !llvm.ptr -> i32
    %218 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i64_61 = arith.constant 24 : i64
    %219 = arith.extui %217 : i32 to i64
    %220 = arith.addi %219, %c24_i64_61 : i64
    %221 = llvm.getelementptr %8[%220] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %218, %221 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb22
  ^bb24:  // pred: ^bb22
    %222 = llvm.load %2 : !llvm.ptr -> i32
    %223 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64_62 = arith.constant 20 : i64
    %224 = arith.extui %222 : i32 to i64
    %225 = arith.addi %224, %c20_i64_62 : i64
    %226 = llvm.getelementptr %8[%225] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %223, %226 {alignment = 1 : i64} : i32, !llvm.ptr
    %227 = llvm.load %1 : !llvm.ptr -> i32
    %228 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i64_63 = arith.constant 24 : i64
    %229 = arith.extui %227 : i32 to i64
    %230 = arith.addi %229, %c24_i64_63 : i64
    %231 = llvm.getelementptr %8[%230] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %228, %231 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  }
  func.func @f33(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %7 = llvm.load %0 : !llvm.ptr -> i32
    %8 = llvm.load %1 : !llvm.ptr -> i32
    %9 = arith.addi %7, %8 : i32
    llvm.store %9, %2 : i32, !llvm.ptr
    %10 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %11 = arith.extui %10 : i32 to i64
    %12 = arith.addi %11, %c4_i64 : i64
    %13 = llvm.getelementptr %6[%12] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %14 = llvm.load volatile %13 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %14, %3 : i32, !llvm.ptr
    %c1_i32 = arith.constant 1 : i32
    %15 = arith.andi %14, %c1_i32 : i32
    %c0_i32_3 = arith.constant 0 : i32
    %16 = arith.cmpi ne, %15, %c0_i32_3 : i32
    cf.cond_br %16, ^bb4, ^bb5
  ^bb2:  // 6 preds: ^bb3, ^bb10, ^bb17, ^bb19, ^bb20, ^bb23
    return
  ^bb3:  // 3 preds: ^bb5, ^bb9, ^bb11
    cf.br ^bb2
  ^bb4:  // 3 preds: ^bb1, ^bb7, ^bb8
    %17 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_4 = arith.constant 4 : i64
    %18 = arith.extui %17 : i32 to i64
    %19 = arith.addi %18, %c4_i64_4 : i64
    %20 = llvm.getelementptr %6[%19] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %21 = llvm.load volatile %20 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %21, %3 : i32, !llvm.ptr
    %c2_i32 = arith.constant 2 : i32
    %22 = arith.andi %21, %c2_i32 : i32
    %c0_i32_5 = arith.constant 0 : i32
    %23 = arith.cmpi ne, %22, %c0_i32_5 : i32
    cf.cond_br %23, ^bb13, ^bb14
  ^bb5:  // pred: ^bb1
    %24 = llvm.load %3 : !llvm.ptr -> i32
    %c2_i32_6 = arith.constant 2 : i32
    %25 = arith.andi %24, %c2_i32_6 : i32
    %c0_i32_7 = arith.constant 0 : i32
    %26 = arith.cmpi eq, %25, %c0_i32_7 : i32
    %27 = arith.extui %26 : i1 to i32
    %c0_i32_8 = arith.constant 0 : i32
    %28 = arith.cmpi ne, %27, %c0_i32_8 : i32
    cf.cond_br %28, ^bb3, ^bb6
  ^bb6:  // pred: ^bb5
    %29 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %30 = arith.extui %29 : i32 to i64
    %31 = arith.addi %30, %c0_i64 : i64
    %32 = llvm.getelementptr %6[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %33 = llvm.load volatile %32 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %33, %3 : i32, !llvm.ptr
    %34 = llvm.load %1 : !llvm.ptr -> i32
    %35 = arith.addi %33, %34 : i32
    llvm.store %35, %1 : i32, !llvm.ptr
    %36 = llvm.load %0 : !llvm.ptr -> i32
    %37 = llvm.load %3 : !llvm.ptr -> i32
    %38 = arith.subi %36, %37 : i32
    llvm.store %38, %0 : i32, !llvm.ptr
    %c0_i32_9 = arith.constant 0 : i32
    %c1049984_i64 = arith.constant 1049984 : i64
    %39 = arith.extui %c0_i32_9 : i32 to i64
    %40 = arith.addi %39, %c1049984_i64 : i64
    %41 = llvm.getelementptr %6[%40] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %42 = llvm.load volatile %41 {alignment = 1 : i64} : !llvm.ptr -> i32
    %43 = arith.cmpi eq, %38, %42 : i32
    %44 = arith.extui %43 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %45 = arith.cmpi eq, %44, %c0_i32_10 : i32
    %46 = arith.extui %45 : i1 to i32
    %c0_i32_11 = arith.constant 0 : i32
    %47 = arith.cmpi ne, %46, %c0_i32_11 : i32
    cf.cond_br %47, ^bb7, ^bb8
  ^bb7:  // pred: ^bb6
    %48 = llvm.load %0 : !llvm.ptr -> i32
    %49 = llvm.load %3 : !llvm.ptr -> i32
    call @f32(%arg0, %48, %49) : (!llvm.ptr, i32, i32) -> ()
    cf.br ^bb4
  ^bb8:  // pred: ^bb6
    %50 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_12 = arith.constant 4 : i64
    %51 = arith.extui %50 : i32 to i64
    %52 = arith.addi %51, %c4_i64_12 : i64
    %53 = llvm.getelementptr %6[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %54 = llvm.load volatile %53 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %55 = arith.andi %54, %c3_i32 : i32
    %c3_i32_13 = arith.constant 3 : i32
    %56 = arith.cmpi eq, %55, %c3_i32_13 : i32
    %57 = arith.extui %56 : i1 to i32
    %c0_i32_14 = arith.constant 0 : i32
    %58 = arith.cmpi eq, %57, %c0_i32_14 : i32
    %59 = arith.extui %58 : i1 to i32
    %c0_i32_15 = arith.constant 0 : i32
    %60 = arith.cmpi ne, %59, %c0_i32_15 : i32
    cf.cond_br %60, ^bb4, ^bb9
  ^bb9:  // pred: ^bb8
    %c0_i32_16 = arith.constant 0 : i32
    %61 = llvm.load %1 : !llvm.ptr -> i32
    %c1049976_i64 = arith.constant 1049976 : i64
    %62 = arith.extui %c0_i32_16 : i32 to i64
    %63 = arith.addi %62, %c1049976_i64 : i64
    %64 = llvm.getelementptr %6[%63] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %61, %64 {alignment = 1 : i64} : i32, !llvm.ptr
    %65 = llvm.load %2 : !llvm.ptr -> i32
    %66 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_17 = arith.constant 4 : i64
    %67 = arith.extui %66 : i32 to i64
    %68 = arith.addi %67, %c4_i64_17 : i64
    %69 = llvm.getelementptr %6[%68] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %70 = llvm.load volatile %69 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-2_i32 = arith.constant -2 : i32
    %71 = arith.andi %70, %c-2_i32 : i32
    %c4_i64_18 = arith.constant 4 : i64
    %72 = arith.extui %65 : i32 to i64
    %73 = arith.addi %72, %c4_i64_18 : i64
    %74 = llvm.getelementptr %6[%73] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %71, %74 {alignment = 1 : i64} : i32, !llvm.ptr
    %75 = llvm.load %0 : !llvm.ptr -> i32
    %76 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_19 = arith.constant 1 : i32
    %77 = arith.ori %76, %c1_i32_19 : i32
    %c4_i64_20 = arith.constant 4 : i64
    %78 = arith.extui %75 : i32 to i64
    %79 = arith.addi %78, %c4_i64_20 : i64
    %80 = llvm.getelementptr %6[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %77, %80 {alignment = 1 : i64} : i32, !llvm.ptr
    %81 = llvm.load %2 : !llvm.ptr -> i32
    %82 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_21 = arith.constant 0 : i64
    %83 = arith.extui %81 : i32 to i64
    %84 = arith.addi %83, %c0_i64_21 : i64
    %85 = llvm.getelementptr %6[%84] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %82, %85 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb3
  ^bb10:  // pred: ^bb15
    %c0_i32_22 = arith.constant 0 : i32
    %86 = llvm.load %0 : !llvm.ptr -> i32
    %c1049984_i64_23 = arith.constant 1049984 : i64
    %87 = arith.extui %c0_i32_22 : i32 to i64
    %88 = arith.addi %87, %c1049984_i64_23 : i64
    %89 = llvm.getelementptr %6[%88] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %86, %89 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_24 = arith.constant 0 : i32
    %c0_i32_25 = arith.constant 0 : i32
    %c1049976_i64_26 = arith.constant 1049976 : i64
    %90 = arith.extui %c0_i32_25 : i32 to i64
    %91 = arith.addi %90, %c1049976_i64_26 : i64
    %92 = llvm.getelementptr %6[%91] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %93 = llvm.load volatile %92 {alignment = 1 : i64} : !llvm.ptr -> i32
    %94 = llvm.load %1 : !llvm.ptr -> i32
    %95 = arith.addi %93, %94 : i32
    llvm.store %95, %1 : i32, !llvm.ptr
    %c1049976_i64_27 = arith.constant 1049976 : i64
    %96 = arith.extui %c0_i32_24 : i32 to i64
    %97 = arith.addi %96, %c1049976_i64_27 : i64
    %98 = llvm.getelementptr %6[%97] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %95, %98 {alignment = 1 : i64} : i32, !llvm.ptr
    %99 = llvm.load %0 : !llvm.ptr -> i32
    %100 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_28 = arith.constant 1 : i32
    %101 = arith.ori %100, %c1_i32_28 : i32
    %c4_i64_29 = arith.constant 4 : i64
    %102 = arith.extui %99 : i32 to i64
    %103 = arith.addi %102, %c4_i64_29 : i64
    %104 = llvm.getelementptr %6[%103] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %101, %104 {alignment = 1 : i64} : i32, !llvm.ptr
    %105 = llvm.load %0 : !llvm.ptr -> i32
    %106 = llvm.load %1 : !llvm.ptr -> i32
    %107 = arith.addi %105, %106 : i32
    %108 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_30 = arith.constant 0 : i64
    %109 = arith.extui %107 : i32 to i64
    %110 = arith.addi %109, %c0_i64_30 : i64
    %111 = llvm.getelementptr %6[%110] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %108, %111 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb11:  // pred: ^bb14
    %c0_i32_31 = arith.constant 0 : i32
    %112 = llvm.load %0 : !llvm.ptr -> i32
    %c1049988_i64 = arith.constant 1049988 : i64
    %113 = arith.extui %c0_i32_31 : i32 to i64
    %114 = arith.addi %113, %c1049988_i64 : i64
    %115 = llvm.getelementptr %6[%114] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %112, %115 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_32 = arith.constant 0 : i32
    %c0_i32_33 = arith.constant 0 : i32
    %c1049980_i64 = arith.constant 1049980 : i64
    %116 = arith.extui %c0_i32_33 : i32 to i64
    %117 = arith.addi %116, %c1049980_i64 : i64
    %118 = llvm.getelementptr %6[%117] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %119 = llvm.load volatile %118 {alignment = 1 : i64} : !llvm.ptr -> i32
    %120 = llvm.load %1 : !llvm.ptr -> i32
    %121 = arith.addi %119, %120 : i32
    llvm.store %121, %1 : i32, !llvm.ptr
    %c1049980_i64_34 = arith.constant 1049980 : i64
    %122 = arith.extui %c0_i32_32 : i32 to i64
    %123 = arith.addi %122, %c1049980_i64_34 : i64
    %124 = llvm.getelementptr %6[%123] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %121, %124 {alignment = 1 : i64} : i32, !llvm.ptr
    %125 = llvm.load %0 : !llvm.ptr -> i32
    %126 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_35 = arith.constant 1 : i32
    %127 = arith.ori %126, %c1_i32_35 : i32
    %c4_i64_36 = arith.constant 4 : i64
    %128 = arith.extui %125 : i32 to i64
    %129 = arith.addi %128, %c4_i64_36 : i64
    %130 = llvm.getelementptr %6[%129] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %127, %130 {alignment = 1 : i64} : i32, !llvm.ptr
    %131 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_37 = arith.constant 0 : i32
    %c1049984_i64_38 = arith.constant 1049984 : i64
    %132 = arith.extui %c0_i32_37 : i32 to i64
    %133 = arith.addi %132, %c1049984_i64_38 : i64
    %134 = llvm.getelementptr %6[%133] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %135 = llvm.load volatile %134 {alignment = 1 : i64} : !llvm.ptr -> i32
    %136 = arith.cmpi eq, %131, %135 : i32
    %137 = arith.extui %136 : i1 to i32
    %c0_i32_39 = arith.constant 0 : i32
    %138 = arith.cmpi eq, %137, %c0_i32_39 : i32
    %139 = arith.extui %138 : i1 to i32
    %c0_i32_40 = arith.constant 0 : i32
    %140 = arith.cmpi ne, %139, %c0_i32_40 : i32
    cf.cond_br %140, ^bb3, ^bb23
  ^bb12:  // 2 preds: ^bb13, ^bb16
    %141 = llvm.load %1 : !llvm.ptr -> i32
    %c256_i32 = arith.constant 256 : i32
    %142 = arith.cmpi ult, %141, %c256_i32 : i32
    %143 = arith.extui %142 : i1 to i32
    %c0_i32_41 = arith.constant 0 : i32
    %144 = arith.cmpi ne, %143, %c0_i32_41 : i32
    cf.cond_br %144, ^bb18, ^bb19
  ^bb13:  // pred: ^bb4
    %145 = llvm.load %2 : !llvm.ptr -> i32
    %146 = llvm.load %3 : !llvm.ptr -> i32
    %c-2_i32_42 = arith.constant -2 : i32
    %147 = arith.andi %146, %c-2_i32_42 : i32
    %c4_i64_43 = arith.constant 4 : i64
    %148 = arith.extui %145 : i32 to i64
    %149 = arith.addi %148, %c4_i64_43 : i64
    %150 = llvm.getelementptr %6[%149] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %147, %150 {alignment = 1 : i64} : i32, !llvm.ptr
    %151 = llvm.load %0 : !llvm.ptr -> i32
    %152 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_44 = arith.constant 1 : i32
    %153 = arith.ori %152, %c1_i32_44 : i32
    %c4_i64_45 = arith.constant 4 : i64
    %154 = arith.extui %151 : i32 to i64
    %155 = arith.addi %154, %c4_i64_45 : i64
    %156 = llvm.getelementptr %6[%155] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %153, %156 {alignment = 1 : i64} : i32, !llvm.ptr
    %157 = llvm.load %0 : !llvm.ptr -> i32
    %158 = llvm.load %1 : !llvm.ptr -> i32
    %159 = arith.addi %157, %158 : i32
    %160 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_46 = arith.constant 0 : i64
    %161 = arith.extui %159 : i32 to i64
    %162 = arith.addi %161, %c0_i64_46 : i64
    %163 = llvm.getelementptr %6[%162] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %160, %163 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb12
  ^bb14:  // pred: ^bb4
    %164 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_47 = arith.constant 0 : i32
    %c1049988_i64_48 = arith.constant 1049988 : i64
    %165 = arith.extui %c0_i32_47 : i32 to i64
    %166 = arith.addi %165, %c1049988_i64_48 : i64
    %167 = llvm.getelementptr %6[%166] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %168 = llvm.load volatile %167 {alignment = 1 : i64} : !llvm.ptr -> i32
    %169 = arith.cmpi eq, %164, %168 : i32
    %170 = arith.extui %169 : i1 to i32
    %c0_i32_49 = arith.constant 0 : i32
    %171 = arith.cmpi ne, %170, %c0_i32_49 : i32
    cf.cond_br %171, ^bb11, ^bb15
  ^bb15:  // pred: ^bb14
    %172 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_50 = arith.constant 0 : i32
    %c1049984_i64_51 = arith.constant 1049984 : i64
    %173 = arith.extui %c0_i32_50 : i32 to i64
    %174 = arith.addi %173, %c1049984_i64_51 : i64
    %175 = llvm.getelementptr %6[%174] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %176 = llvm.load volatile %175 {alignment = 1 : i64} : !llvm.ptr -> i32
    %177 = arith.cmpi eq, %172, %176 : i32
    %178 = arith.extui %177 : i1 to i32
    %c0_i32_52 = arith.constant 0 : i32
    %179 = arith.cmpi ne, %178, %c0_i32_52 : i32
    cf.cond_br %179, ^bb10, ^bb16
  ^bb16:  // pred: ^bb15
    %180 = llvm.load %2 : !llvm.ptr -> i32
    %181 = llvm.load %3 : !llvm.ptr -> i32
    %c-8_i32 = arith.constant -8 : i32
    %182 = arith.andi %181, %c-8_i32 : i32
    llvm.store %182, %3 : i32, !llvm.ptr
    call @f32(%arg0, %180, %182) : (!llvm.ptr, i32, i32) -> ()
    %183 = llvm.load %0 : !llvm.ptr -> i32
    %184 = llvm.load %3 : !llvm.ptr -> i32
    %185 = llvm.load %1 : !llvm.ptr -> i32
    %186 = arith.addi %184, %185 : i32
    llvm.store %186, %1 : i32, !llvm.ptr
    %c1_i32_53 = arith.constant 1 : i32
    %187 = arith.ori %186, %c1_i32_53 : i32
    %c4_i64_54 = arith.constant 4 : i64
    %188 = arith.extui %183 : i32 to i64
    %189 = arith.addi %188, %c4_i64_54 : i64
    %190 = llvm.getelementptr %6[%189] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %187, %190 {alignment = 1 : i64} : i32, !llvm.ptr
    %191 = llvm.load %0 : !llvm.ptr -> i32
    %192 = llvm.load %1 : !llvm.ptr -> i32
    %193 = arith.addi %191, %192 : i32
    %194 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_55 = arith.constant 0 : i64
    %195 = arith.extui %193 : i32 to i64
    %196 = arith.addi %195, %c0_i64_55 : i64
    %197 = llvm.getelementptr %6[%196] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %194, %197 {alignment = 1 : i64} : i32, !llvm.ptr
    %198 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_56 = arith.constant 0 : i32
    %c1049984_i64_57 = arith.constant 1049984 : i64
    %199 = arith.extui %c0_i32_56 : i32 to i64
    %200 = arith.addi %199, %c1049984_i64_57 : i64
    %201 = llvm.getelementptr %6[%200] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %202 = llvm.load volatile %201 {alignment = 1 : i64} : !llvm.ptr -> i32
    %203 = arith.cmpi eq, %198, %202 : i32
    %204 = arith.extui %203 : i1 to i32
    %c0_i32_58 = arith.constant 0 : i32
    %205 = arith.cmpi eq, %204, %c0_i32_58 : i32
    %206 = arith.extui %205 : i1 to i32
    %c0_i32_59 = arith.constant 0 : i32
    %207 = arith.cmpi ne, %206, %c0_i32_59 : i32
    cf.cond_br %207, ^bb12, ^bb17
  ^bb17:  // pred: ^bb16
    %c0_i32_60 = arith.constant 0 : i32
    %208 = llvm.load %1 : !llvm.ptr -> i32
    %c1049976_i64_61 = arith.constant 1049976 : i64
    %209 = arith.extui %c0_i32_60 : i32 to i64
    %210 = arith.addi %209, %c1049976_i64_61 : i64
    %211 = llvm.getelementptr %6[%210] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %208, %211 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb18:  // pred: ^bb12
    %212 = llvm.load %1 : !llvm.ptr -> i32
    %c-8_i32_62 = arith.constant -8 : i32
    %213 = arith.andi %212, %c-8_i32_62 : i32
    %c1049704_i32 = arith.constant 1049704 : i32
    %214 = arith.addi %213, %c1049704_i32 : i32
    llvm.store %214, %2 : i32, !llvm.ptr
    %c0_i32_63 = arith.constant 0 : i32
    %c1049968_i64 = arith.constant 1049968 : i64
    %215 = arith.extui %c0_i32_63 : i32 to i64
    %216 = arith.addi %215, %c1049968_i64 : i64
    %217 = llvm.getelementptr %6[%216] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %218 = llvm.load volatile %217 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %218, %3 : i32, !llvm.ptr
    %c1_i32_64 = arith.constant 1 : i32
    %219 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i32_65 = arith.constant 3 : i32
    %c31_i32 = arith.constant 31 : i32
    %220 = arith.cmpi ule, %c3_i32_65, %c31_i32 : i32
    %221 = scf.if %220 -> (i32) {
      %266 = arith.shrui %219, %c3_i32_65 : i32
      scf.yield %266 : i32
    } else {
      %c0_i32_79 = arith.constant 0 : i32
      scf.yield %c0_i32_79 : i32
    }
    %c31_i32_66 = arith.constant 31 : i32
    %222 = arith.cmpi ule, %221, %c31_i32_66 : i32
    %223 = scf.if %222 -> (i32) {
      %266 = arith.shli %c1_i32_64, %221 : i32
      scf.yield %266 : i32
    } else {
      %c0_i32_79 = arith.constant 0 : i32
      scf.yield %c0_i32_79 : i32
    }
    llvm.store %223, %1 : i32, !llvm.ptr
    %224 = arith.andi %218, %223 : i32
    %c0_i32_67 = arith.constant 0 : i32
    %225 = arith.cmpi ne, %224, %c0_i32_67 : i32
    cf.cond_br %225, ^bb21, ^bb22
  ^bb19:  // pred: ^bb12
    %226 = llvm.load %0 : !llvm.ptr -> i32
    %227 = llvm.load %1 : !llvm.ptr -> i32
    call @f34(%arg0, %226, %227) : (!llvm.ptr, i32, i32) -> ()
    cf.br ^bb2
  ^bb20:  // 2 preds: ^bb21, ^bb22
    %228 = llvm.load %2 : !llvm.ptr -> i32
    %229 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %230 = arith.extui %228 : i32 to i64
    %231 = arith.addi %230, %c8_i64 : i64
    %232 = llvm.getelementptr %6[%231] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %229, %232 {alignment = 1 : i64} : i32, !llvm.ptr
    %233 = llvm.load %1 : !llvm.ptr -> i32
    %234 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %235 = arith.extui %233 : i32 to i64
    %236 = arith.addi %235, %c12_i64 : i64
    %237 = llvm.getelementptr %6[%236] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %234, %237 {alignment = 1 : i64} : i32, !llvm.ptr
    %238 = llvm.load %0 : !llvm.ptr -> i32
    %239 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64_68 = arith.constant 12 : i64
    %240 = arith.extui %238 : i32 to i64
    %241 = arith.addi %240, %c12_i64_68 : i64
    %242 = llvm.getelementptr %6[%241] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %239, %242 {alignment = 1 : i64} : i32, !llvm.ptr
    %243 = llvm.load %0 : !llvm.ptr -> i32
    %244 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64_69 = arith.constant 8 : i64
    %245 = arith.extui %243 : i32 to i64
    %246 = arith.addi %245, %c8_i64_69 : i64
    %247 = llvm.getelementptr %6[%246] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %244, %247 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb21:  // pred: ^bb18
    %248 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_70 = arith.constant 8 : i64
    %249 = arith.extui %248 : i32 to i64
    %250 = arith.addi %249, %c8_i64_70 : i64
    %251 = llvm.getelementptr %6[%250] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %252 = llvm.load volatile %251 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %252, %1 : i32, !llvm.ptr
    cf.br ^bb20
  ^bb22:  // pred: ^bb18
    %c0_i32_71 = arith.constant 0 : i32
    %253 = llvm.load %3 : !llvm.ptr -> i32
    %254 = llvm.load %1 : !llvm.ptr -> i32
    %255 = arith.ori %253, %254 : i32
    %c1049968_i64_72 = arith.constant 1049968 : i64
    %256 = arith.extui %c0_i32_71 : i32 to i64
    %257 = arith.addi %256, %c1049968_i64_72 : i64
    %258 = llvm.getelementptr %6[%257] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %255, %258 {alignment = 1 : i64} : i32, !llvm.ptr
    %259 = llvm.load %2 : !llvm.ptr -> i32
    llvm.store %259, %1 : i32, !llvm.ptr
    cf.br ^bb20
  ^bb23:  // pred: ^bb11
    %c0_i32_73 = arith.constant 0 : i32
    %c0_i32_74 = arith.constant 0 : i32
    %c1049976_i64_75 = arith.constant 1049976 : i64
    %260 = arith.extui %c0_i32_73 : i32 to i64
    %261 = arith.addi %260, %c1049976_i64_75 : i64
    %262 = llvm.getelementptr %6[%261] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_74, %262 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_76 = arith.constant 0 : i32
    %c0_i32_77 = arith.constant 0 : i32
    %c1049984_i64_78 = arith.constant 1049984 : i64
    %263 = arith.extui %c0_i32_76 : i32 to i64
    %264 = arith.addi %263, %c1049984_i64_78 : i64
    %265 = llvm.getelementptr %6[%264] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_77, %265 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  }
  func.func @f34(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i64_4 = arith.constant 1 : i64
    %5 = llvm.alloca %c1_i64_4 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32_5 = arith.constant 0 : i32
    llvm.store %c0_i32_5, %2 : i32, !llvm.ptr
    %9 = llvm.load %1 : !llvm.ptr -> i32
    %c256_i32 = arith.constant 256 : i32
    %10 = arith.cmpi ult, %9, %c256_i32 : i32
    %11 = arith.extui %10 : i1 to i32
    %c0_i32_6 = arith.constant 0 : i32
    %12 = arith.cmpi ne, %11, %c0_i32_6 : i32
    cf.cond_br %12, ^bb3, ^bb4
  ^bb2:  // 3 preds: ^bb7, ^bb8, ^bb9
    return
  ^bb3:  // 3 preds: ^bb1, ^bb4, ^bb5
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %c16_i64 = arith.constant 16 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c16_i64 : i64
    %16 = llvm.getelementptr %8[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64, %16 {alignment = 1 : i64} : i64, !llvm.ptr
    %17 = llvm.load %0 : !llvm.ptr -> i32
    %18 = llvm.load %2 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %19 = arith.extui %17 : i32 to i64
    %20 = arith.addi %19, %c28_i64 : i64
    %21 = llvm.getelementptr %8[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %18, %21 {alignment = 1 : i64} : i32, !llvm.ptr
    %22 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c31_i32 = arith.constant 31 : i32
    %23 = arith.cmpi ule, %c2_i32, %c31_i32 : i32
    %24 = scf.if %23 -> (i32) {
      %189 = arith.shli %22, %c2_i32 : i32
      scf.yield %189 : i32
    } else {
      %c0_i32_52 = arith.constant 0 : i32
      scf.yield %c0_i32_52 : i32
    }
    %c1049560_i32 = arith.constant 1049560 : i32
    %25 = arith.addi %24, %c1049560_i32 : i32
    llvm.store %25, %3 : i32, !llvm.ptr
    %c0_i32_7 = arith.constant 0 : i32
    %c1049972_i64 = arith.constant 1049972 : i64
    %26 = arith.extui %c0_i32_7 : i32 to i64
    %27 = arith.addi %26, %c1049972_i64 : i64
    %28 = llvm.getelementptr %8[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %29 = llvm.load volatile %28 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32 = arith.constant 1 : i32
    %30 = llvm.load %2 : !llvm.ptr -> i32
    %c31_i32_8 = arith.constant 31 : i32
    %31 = arith.cmpi ule, %30, %c31_i32_8 : i32
    %32 = scf.if %31 -> (i32) {
      %189 = arith.shli %c1_i32, %30 : i32
      scf.yield %189 : i32
    } else {
      %c0_i32_52 = arith.constant 0 : i32
      scf.yield %c0_i32_52 : i32
    }
    llvm.store %32, %4 : i32, !llvm.ptr
    %33 = arith.andi %29, %32 : i32
    %c0_i32_9 = arith.constant 0 : i32
    %34 = arith.cmpi ne, %33, %c0_i32_9 : i32
    cf.cond_br %34, ^bb6, ^bb7
  ^bb4:  // pred: ^bb1
    %c31_i32_10 = arith.constant 31 : i32
    llvm.store %c31_i32_10, %2 : i32, !llvm.ptr
    %35 = llvm.load %1 : !llvm.ptr -> i32
    %c16777215_i32 = arith.constant 16777215 : i32
    %36 = arith.cmpi ugt, %35, %c16777215_i32 : i32
    %37 = arith.extui %36 : i1 to i32
    %c0_i32_11 = arith.constant 0 : i32
    %38 = arith.cmpi ne, %37, %c0_i32_11 : i32
    cf.cond_br %38, ^bb3, ^bb5
  ^bb5:  // pred: ^bb4
    %39 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i32 = arith.constant 6 : i32
    %40 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %c31_i32_12 = arith.constant 31 : i32
    %41 = arith.cmpi ule, %c8_i32, %c31_i32_12 : i32
    %42 = scf.if %41 -> (i32) {
      %189 = arith.shrui %40, %c8_i32 : i32
      scf.yield %189 : i32
    } else {
      %c0_i32_52 = arith.constant 0 : i32
      scf.yield %c0_i32_52 : i32
    }
    %false = arith.constant false
    %43 = llvm.call_intrinsic "llvm.ctlz.i32"(%42, %false) : (i32, i1) -> i32
    llvm.store %43, %2 : i32, !llvm.ptr
    %44 = arith.subi %c6_i32, %43 : i32
    %c31_i32_13 = arith.constant 31 : i32
    %45 = arith.cmpi ule, %44, %c31_i32_13 : i32
    %46 = scf.if %45 -> (i32) {
      %189 = arith.shrui %39, %44 : i32
      scf.yield %189 : i32
    } else {
      %c0_i32_52 = arith.constant 0 : i32
      scf.yield %c0_i32_52 : i32
    }
    %c1_i32_14 = arith.constant 1 : i32
    %47 = arith.andi %46, %c1_i32_14 : i32
    %48 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_15 = arith.constant 1 : i32
    %c31_i32_16 = arith.constant 31 : i32
    %49 = arith.cmpi ule, %c1_i32_15, %c31_i32_16 : i32
    %50 = scf.if %49 -> (i32) {
      %189 = arith.shli %48, %c1_i32_15 : i32
      scf.yield %189 : i32
    } else {
      %c0_i32_52 = arith.constant 0 : i32
      scf.yield %c0_i32_52 : i32
    }
    %51 = arith.subi %47, %50 : i32
    %c62_i32 = arith.constant 62 : i32
    %52 = arith.addi %51, %c62_i32 : i32
    llvm.store %52, %2 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb6:  // pred: ^bb3
    %53 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_17 = arith.constant 0 : i64
    %54 = arith.extui %53 : i32 to i64
    %55 = arith.addi %54, %c0_i64_17 : i64
    %56 = llvm.getelementptr %8[%55] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %57 = llvm.load volatile %56 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %57, %4 : i32, !llvm.ptr
    %c4_i64 = arith.constant 4 : i64
    %58 = arith.extui %57 : i32 to i64
    %59 = arith.addi %58, %c4_i64 : i64
    %60 = llvm.getelementptr %8[%59] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %61 = llvm.load volatile %60 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-8_i32 = arith.constant -8 : i32
    %62 = arith.andi %61, %c-8_i32 : i32
    %63 = llvm.load %1 : !llvm.ptr -> i32
    %64 = arith.cmpi eq, %62, %63 : i32
    %65 = arith.extui %64 : i1 to i32
    %c0_i32_18 = arith.constant 0 : i32
    %66 = arith.cmpi eq, %65, %c0_i32_18 : i32
    %67 = arith.extui %66 : i1 to i32
    %c0_i32_19 = arith.constant 0 : i32
    %68 = arith.cmpi ne, %67, %c0_i32_19 : i32
    cf.cond_br %68, ^bb10, ^bb11
  ^bb7:  // pred: ^bb3
    %69 = llvm.load %3 : !llvm.ptr -> i32
    %70 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_20 = arith.constant 0 : i64
    %71 = arith.extui %69 : i32 to i64
    %72 = arith.addi %71, %c0_i64_20 : i64
    %73 = llvm.getelementptr %8[%72] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %70, %73 {alignment = 1 : i64} : i32, !llvm.ptr
    %74 = llvm.load %0 : !llvm.ptr -> i32
    %75 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %76 = arith.extui %74 : i32 to i64
    %77 = arith.addi %76, %c24_i64 : i64
    %78 = llvm.getelementptr %8[%77] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %75, %78 {alignment = 1 : i64} : i32, !llvm.ptr
    %79 = llvm.load %0 : !llvm.ptr -> i32
    %80 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %81 = arith.extui %79 : i32 to i64
    %82 = arith.addi %81, %c12_i64 : i64
    %83 = llvm.getelementptr %8[%82] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %80, %83 {alignment = 1 : i64} : i32, !llvm.ptr
    %84 = llvm.load %0 : !llvm.ptr -> i32
    %85 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %86 = arith.extui %84 : i32 to i64
    %87 = arith.addi %86, %c8_i64 : i64
    %88 = llvm.getelementptr %8[%87] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %85, %88 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_21 = arith.constant 0 : i32
    %c0_i32_22 = arith.constant 0 : i32
    %c1049972_i64_23 = arith.constant 1049972 : i64
    %89 = arith.extui %c0_i32_22 : i32 to i64
    %90 = arith.addi %89, %c1049972_i64_23 : i64
    %91 = llvm.getelementptr %8[%90] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %92 = llvm.load volatile %91 {alignment = 1 : i64} : !llvm.ptr -> i32
    %93 = llvm.load %4 : !llvm.ptr -> i32
    %94 = arith.ori %92, %93 : i32
    %c1049972_i64_24 = arith.constant 1049972 : i64
    %95 = arith.extui %c0_i32_21 : i32 to i64
    %96 = arith.addi %95, %c1049972_i64_24 : i64
    %97 = llvm.getelementptr %8[%96] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %94, %97 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb8:  // pred: ^bb13
    %98 = llvm.load %5 : !llvm.ptr -> i32
    %99 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_25 = arith.constant 0 : i64
    %100 = arith.extui %98 : i32 to i64
    %101 = arith.addi %100, %c0_i64_25 : i64
    %102 = llvm.getelementptr %8[%101] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %99, %102 {alignment = 1 : i64} : i32, !llvm.ptr
    %103 = llvm.load %0 : !llvm.ptr -> i32
    %104 = llvm.load %4 : !llvm.ptr -> i32
    %c24_i64_26 = arith.constant 24 : i64
    %105 = arith.extui %103 : i32 to i64
    %106 = arith.addi %105, %c24_i64_26 : i64
    %107 = llvm.getelementptr %8[%106] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %104, %107 {alignment = 1 : i64} : i32, !llvm.ptr
    %108 = llvm.load %0 : !llvm.ptr -> i32
    %109 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64_27 = arith.constant 12 : i64
    %110 = arith.extui %108 : i32 to i64
    %111 = arith.addi %110, %c12_i64_27 : i64
    %112 = llvm.getelementptr %8[%111] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %109, %112 {alignment = 1 : i64} : i32, !llvm.ptr
    %113 = llvm.load %0 : !llvm.ptr -> i32
    %114 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_28 = arith.constant 8 : i64
    %115 = arith.extui %113 : i32 to i64
    %116 = arith.addi %115, %c8_i64_28 : i64
    %117 = llvm.getelementptr %8[%116] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %114, %117 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb9:  // 2 preds: ^bb11, ^bb12
    %118 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_29 = arith.constant 8 : i64
    %119 = arith.extui %118 : i32 to i64
    %120 = arith.addi %119, %c8_i64_29 : i64
    %121 = llvm.getelementptr %8[%120] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %122 = llvm.load volatile %121 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %122, %3 : i32, !llvm.ptr
    %123 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64_30 = arith.constant 12 : i64
    %124 = arith.extui %122 : i32 to i64
    %125 = arith.addi %124, %c12_i64_30 : i64
    %126 = llvm.getelementptr %8[%125] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %123, %126 {alignment = 1 : i64} : i32, !llvm.ptr
    %127 = llvm.load %2 : !llvm.ptr -> i32
    %128 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_31 = arith.constant 8 : i64
    %129 = arith.extui %127 : i32 to i64
    %130 = arith.addi %129, %c8_i64_31 : i64
    %131 = llvm.getelementptr %8[%130] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %128, %131 {alignment = 1 : i64} : i32, !llvm.ptr
    %132 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_32 = arith.constant 0 : i32
    %c24_i64_33 = arith.constant 24 : i64
    %133 = arith.extui %132 : i32 to i64
    %134 = arith.addi %133, %c24_i64_33 : i64
    %135 = llvm.getelementptr %8[%134] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_32, %135 {alignment = 1 : i64} : i32, !llvm.ptr
    %136 = llvm.load %0 : !llvm.ptr -> i32
    %137 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64_34 = arith.constant 12 : i64
    %138 = arith.extui %136 : i32 to i64
    %139 = arith.addi %138, %c12_i64_34 : i64
    %140 = llvm.getelementptr %8[%139] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %137, %140 {alignment = 1 : i64} : i32, !llvm.ptr
    %141 = llvm.load %0 : !llvm.ptr -> i32
    %142 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64_35 = arith.constant 8 : i64
    %143 = arith.extui %141 : i32 to i64
    %144 = arith.addi %143, %c8_i64_35 : i64
    %145 = llvm.getelementptr %8[%144] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %142, %145 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb10:  // pred: ^bb6
    %146 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_36 = arith.constant 0 : i32
    %c25_i32 = arith.constant 25 : i32
    %147 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_37 = arith.constant 1 : i32
    %c31_i32_38 = arith.constant 31 : i32
    %148 = arith.cmpi ule, %c1_i32_37, %c31_i32_38 : i32
    %149 = scf.if %148 -> (i32) {
      %189 = arith.shrui %147, %c1_i32_37 : i32
      scf.yield %189 : i32
    } else {
      %c0_i32_52 = arith.constant 0 : i32
      scf.yield %c0_i32_52 : i32
    }
    %150 = arith.subi %c25_i32, %149 : i32
    %151 = llvm.load %2 : !llvm.ptr -> i32
    %c31_i32_39 = arith.constant 31 : i32
    %152 = arith.cmpi eq, %151, %c31_i32_39 : i32
    %153 = arith.extui %152 : i1 to i32
    %c0_i32_40 = arith.constant 0 : i32
    %154 = arith.cmpi ne, %153, %c0_i32_40 : i32
    %155 = arith.select %154, %c0_i32_36, %150 : i32
    %c31_i32_41 = arith.constant 31 : i32
    %156 = arith.cmpi ule, %155, %c31_i32_41 : i32
    %157 = scf.if %156 -> (i32) {
      %189 = arith.shli %146, %155 : i32
      scf.yield %189 : i32
    } else {
      %c0_i32_52 = arith.constant 0 : i32
      scf.yield %c0_i32_52 : i32
    }
    llvm.store %157, %3 : i32, !llvm.ptr
    cf.br ^bb13
  ^bb11:  // pred: ^bb6
    %158 = llvm.load %4 : !llvm.ptr -> i32
    llvm.store %158, %2 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb12:  // pred: ^bb15
    cf.br ^bb9
  ^bb13:  // 2 preds: ^bb10, ^bb14
    %159 = llvm.load %4 : !llvm.ptr -> i32
    %160 = llvm.load %3 : !llvm.ptr -> i32
    %c29_i32 = arith.constant 29 : i32
    %c31_i32_42 = arith.constant 31 : i32
    %161 = arith.cmpi ule, %c29_i32, %c31_i32_42 : i32
    %162 = scf.if %161 -> (i32) {
      %189 = arith.shrui %160, %c29_i32 : i32
      scf.yield %189 : i32
    } else {
      %c0_i32_52 = arith.constant 0 : i32
      scf.yield %c0_i32_52 : i32
    }
    %c4_i32 = arith.constant 4 : i32
    %163 = arith.andi %162, %c4_i32 : i32
    %164 = arith.addi %159, %163 : i32
    %c16_i32 = arith.constant 16 : i32
    %165 = arith.addi %164, %c16_i32 : i32
    llvm.store %165, %5 : i32, !llvm.ptr
    %c0_i64_43 = arith.constant 0 : i64
    %166 = arith.extui %165 : i32 to i64
    %167 = arith.addi %166, %c0_i64_43 : i64
    %168 = llvm.getelementptr %8[%167] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %169 = llvm.load volatile %168 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %169, %2 : i32, !llvm.ptr
    %c0_i32_44 = arith.constant 0 : i32
    %170 = arith.cmpi eq, %169, %c0_i32_44 : i32
    %171 = arith.extui %170 : i1 to i32
    %c0_i32_45 = arith.constant 0 : i32
    %172 = arith.cmpi ne, %171, %c0_i32_45 : i32
    cf.cond_br %172, ^bb8, ^bb14
  ^bb14:  // pred: ^bb13
    %173 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_46 = arith.constant 1 : i32
    %c31_i32_47 = arith.constant 31 : i32
    %174 = arith.cmpi ule, %c1_i32_46, %c31_i32_47 : i32
    %175 = scf.if %174 -> (i32) {
      %189 = arith.shli %173, %c1_i32_46 : i32
      scf.yield %189 : i32
    } else {
      %c0_i32_52 = arith.constant 0 : i32
      scf.yield %c0_i32_52 : i32
    }
    llvm.store %175, %3 : i32, !llvm.ptr
    %176 = llvm.load %2 : !llvm.ptr -> i32
    llvm.store %176, %4 : i32, !llvm.ptr
    %177 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_48 = arith.constant 4 : i64
    %178 = arith.extui %177 : i32 to i64
    %179 = arith.addi %178, %c4_i64_48 : i64
    %180 = llvm.getelementptr %8[%179] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %181 = llvm.load volatile %180 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-8_i32_49 = arith.constant -8 : i32
    %182 = arith.andi %181, %c-8_i32_49 : i32
    %183 = llvm.load %1 : !llvm.ptr -> i32
    %184 = arith.cmpi eq, %182, %183 : i32
    %185 = arith.extui %184 : i1 to i32
    %c0_i32_50 = arith.constant 0 : i32
    %186 = arith.cmpi eq, %185, %c0_i32_50 : i32
    %187 = arith.extui %186 : i1 to i32
    %c0_i32_51 = arith.constant 0 : i32
    %188 = arith.cmpi ne, %187, %c0_i32_51 : i32
    cf.cond_br %188, ^bb13, ^bb15
  ^bb15:  // pred: ^bb14
    cf.br ^bb12
  }
  func.func @f35(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i64_4 = arith.constant 1 : i64
    %5 = llvm.alloca %c1_i64_4 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %0 : !llvm.ptr -> i32
    %c-8_i32 = arith.constant -8 : i32
    %10 = arith.addi %9, %c-8_i32 : i32
    llvm.store %10, %1 : i32, !llvm.ptr
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %c-4_i32 = arith.constant -4 : i32
    %12 = arith.addi %11, %c-4_i32 : i32
    %c0_i64 = arith.constant 0 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c0_i64 : i64
    %15 = llvm.getelementptr %8[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %16 = llvm.load volatile %15 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %16, %2 : i32, !llvm.ptr
    %c-8_i32_5 = arith.constant -8 : i32
    %17 = arith.andi %16, %c-8_i32_5 : i32
    llvm.store %17, %0 : i32, !llvm.ptr
    %18 = arith.addi %10, %17 : i32
    llvm.store %18, %3 : i32, !llvm.ptr
    %19 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32 = arith.constant 1 : i32
    %20 = arith.andi %19, %c1_i32 : i32
    %c0_i32_6 = arith.constant 0 : i32
    %21 = arith.cmpi ne, %20, %c0_i32_6 : i32
    cf.cond_br %21, ^bb4, ^bb5
  ^bb2:  // 6 preds: ^bb3, ^bb9, ^bb12, ^bb19, ^bb22, ^bb37
    return
  ^bb3:  // 6 preds: ^bb5, ^bb20, ^bb27, ^bb29, ^bb40, ^bb45
    cf.br ^bb2
  ^bb4:  // 3 preds: ^bb1, ^bb7, ^bb8
    %22 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %23 = arith.extui %22 : i32 to i64
    %24 = arith.addi %23, %c4_i64 : i64
    %25 = llvm.getelementptr %8[%24] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %26 = llvm.load volatile %25 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %26, %2 : i32, !llvm.ptr
    %c2_i32 = arith.constant 2 : i32
    %27 = arith.andi %26, %c2_i32 : i32
    %c0_i32_7 = arith.constant 0 : i32
    %28 = arith.cmpi ne, %27, %c0_i32_7 : i32
    cf.cond_br %28, ^bb15, ^bb16
  ^bb5:  // pred: ^bb1
    %29 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i32_8 = arith.constant 2 : i32
    %30 = arith.andi %29, %c2_i32_8 : i32
    %c0_i32_9 = arith.constant 0 : i32
    %31 = arith.cmpi eq, %30, %c0_i32_9 : i32
    %32 = arith.extui %31 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %33 = arith.cmpi ne, %32, %c0_i32_10 : i32
    cf.cond_br %33, ^bb3, ^bb6
  ^bb6:  // pred: ^bb5
    %34 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_11 = arith.constant 0 : i64
    %35 = arith.extui %34 : i32 to i64
    %36 = arith.addi %35, %c0_i64_11 : i64
    %37 = llvm.getelementptr %8[%36] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %38 = llvm.load volatile %37 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %38, %2 : i32, !llvm.ptr
    %39 = llvm.load %0 : !llvm.ptr -> i32
    %40 = arith.addi %38, %39 : i32
    llvm.store %40, %0 : i32, !llvm.ptr
    %41 = llvm.load %1 : !llvm.ptr -> i32
    %42 = llvm.load %2 : !llvm.ptr -> i32
    %43 = arith.subi %41, %42 : i32
    llvm.store %43, %1 : i32, !llvm.ptr
    %c0_i32_12 = arith.constant 0 : i32
    %c1049984_i64 = arith.constant 1049984 : i64
    %44 = arith.extui %c0_i32_12 : i32 to i64
    %45 = arith.addi %44, %c1049984_i64 : i64
    %46 = llvm.getelementptr %8[%45] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %47 = llvm.load volatile %46 {alignment = 1 : i64} : !llvm.ptr -> i32
    %48 = arith.cmpi eq, %43, %47 : i32
    %49 = arith.extui %48 : i1 to i32
    %c0_i32_13 = arith.constant 0 : i32
    %50 = arith.cmpi eq, %49, %c0_i32_13 : i32
    %51 = arith.extui %50 : i1 to i32
    %c0_i32_14 = arith.constant 0 : i32
    %52 = arith.cmpi ne, %51, %c0_i32_14 : i32
    cf.cond_br %52, ^bb7, ^bb8
  ^bb7:  // pred: ^bb6
    %53 = llvm.load %1 : !llvm.ptr -> i32
    %54 = llvm.load %2 : !llvm.ptr -> i32
    call @f32(%arg0, %53, %54) : (!llvm.ptr, i32, i32) -> ()
    cf.br ^bb4
  ^bb8:  // pred: ^bb6
    %55 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64_15 = arith.constant 4 : i64
    %56 = arith.extui %55 : i32 to i64
    %57 = arith.addi %56, %c4_i64_15 : i64
    %58 = llvm.getelementptr %8[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %59 = llvm.load volatile %58 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %60 = arith.andi %59, %c3_i32 : i32
    %c3_i32_16 = arith.constant 3 : i32
    %61 = arith.cmpi eq, %60, %c3_i32_16 : i32
    %62 = arith.extui %61 : i1 to i32
    %c0_i32_17 = arith.constant 0 : i32
    %63 = arith.cmpi eq, %62, %c0_i32_17 : i32
    %64 = arith.extui %63 : i1 to i32
    %c0_i32_18 = arith.constant 0 : i32
    %65 = arith.cmpi ne, %64, %c0_i32_18 : i32
    cf.cond_br %65, ^bb4, ^bb9
  ^bb9:  // pred: ^bb8
    %c0_i32_19 = arith.constant 0 : i32
    %66 = llvm.load %0 : !llvm.ptr -> i32
    %c1049976_i64 = arith.constant 1049976 : i64
    %67 = arith.extui %c0_i32_19 : i32 to i64
    %68 = arith.addi %67, %c1049976_i64 : i64
    %69 = llvm.getelementptr %8[%68] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %66, %69 {alignment = 1 : i64} : i32, !llvm.ptr
    %70 = llvm.load %3 : !llvm.ptr -> i32
    %71 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64_20 = arith.constant 4 : i64
    %72 = arith.extui %71 : i32 to i64
    %73 = arith.addi %72, %c4_i64_20 : i64
    %74 = llvm.getelementptr %8[%73] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %75 = llvm.load volatile %74 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-2_i32 = arith.constant -2 : i32
    %76 = arith.andi %75, %c-2_i32 : i32
    %c4_i64_21 = arith.constant 4 : i64
    %77 = arith.extui %70 : i32 to i64
    %78 = arith.addi %77, %c4_i64_21 : i64
    %79 = llvm.getelementptr %8[%78] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %76, %79 {alignment = 1 : i64} : i32, !llvm.ptr
    %80 = llvm.load %1 : !llvm.ptr -> i32
    %81 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_22 = arith.constant 1 : i32
    %82 = arith.ori %81, %c1_i32_22 : i32
    %c4_i64_23 = arith.constant 4 : i64
    %83 = arith.extui %80 : i32 to i64
    %84 = arith.addi %83, %c4_i64_23 : i64
    %85 = llvm.getelementptr %8[%84] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %82, %85 {alignment = 1 : i64} : i32, !llvm.ptr
    %86 = llvm.load %3 : !llvm.ptr -> i32
    %87 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_24 = arith.constant 0 : i64
    %88 = arith.extui %86 : i32 to i64
    %89 = arith.addi %88, %c0_i64_24 : i64
    %90 = llvm.getelementptr %8[%89] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %87, %90 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb10:  // 2 preds: ^bb30, ^bb35
    %c0_i32_25 = arith.constant 0 : i32
    %c1049696_i64 = arith.constant 1049696 : i64
    %91 = arith.extui %c0_i32_25 : i32 to i64
    %92 = arith.addi %91, %c1049696_i64 : i64
    %93 = llvm.getelementptr %8[%92] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %94 = llvm.load volatile %93 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %94, %1 : i32, !llvm.ptr
    %c0_i32_26 = arith.constant 0 : i32
    %95 = arith.cmpi eq, %94, %c0_i32_26 : i32
    %96 = arith.extui %95 : i1 to i32
    %c0_i32_27 = arith.constant 0 : i32
    %97 = arith.cmpi ne, %96, %c0_i32_27 : i32
    cf.cond_br %97, ^bb40, ^bb41
  ^bb11:  // pred: ^bb14
    %98 = llvm.load %0 : !llvm.ptr -> i32
    %c-8_i32_28 = arith.constant -8 : i32
    %99 = arith.andi %98, %c-8_i32_28 : i32
    %c1049704_i32 = arith.constant 1049704 : i32
    %100 = arith.addi %99, %c1049704_i32 : i32
    llvm.store %100, %3 : i32, !llvm.ptr
    %c0_i32_29 = arith.constant 0 : i32
    %c1049968_i64 = arith.constant 1049968 : i64
    %101 = arith.extui %c0_i32_29 : i32 to i64
    %102 = arith.addi %101, %c1049968_i64 : i64
    %103 = llvm.getelementptr %8[%102] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %104 = llvm.load volatile %103 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %104, %2 : i32, !llvm.ptr
    %c1_i32_30 = arith.constant 1 : i32
    %105 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i32_31 = arith.constant 3 : i32
    %c31_i32 = arith.constant 31 : i32
    %106 = arith.cmpi ule, %c3_i32_31, %c31_i32 : i32
    %107 = scf.if %106 -> (i32) {
      %384 = arith.shrui %105, %c3_i32_31 : i32
      scf.yield %384 : i32
    } else {
      %c0_i32_131 = arith.constant 0 : i32
      scf.yield %c0_i32_131 : i32
    }
    %c31_i32_32 = arith.constant 31 : i32
    %108 = arith.cmpi ule, %107, %c31_i32_32 : i32
    %109 = scf.if %108 -> (i32) {
      %384 = arith.shli %c1_i32_30, %107 : i32
      scf.yield %384 : i32
    } else {
      %c0_i32_131 = arith.constant 0 : i32
      scf.yield %c0_i32_131 : i32
    }
    llvm.store %109, %0 : i32, !llvm.ptr
    %110 = arith.andi %104, %109 : i32
    %c0_i32_33 = arith.constant 0 : i32
    %111 = arith.cmpi ne, %110, %c0_i32_33 : i32
    cf.cond_br %111, ^bb38, ^bb39
  ^bb12:  // 2 preds: ^bb17, ^bb32
    %c0_i32_34 = arith.constant 0 : i32
    %112 = llvm.load %1 : !llvm.ptr -> i32
    %c1049984_i64_35 = arith.constant 1049984 : i64
    %113 = arith.extui %c0_i32_34 : i32 to i64
    %114 = arith.addi %113, %c1049984_i64_35 : i64
    %115 = llvm.getelementptr %8[%114] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %112, %115 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_36 = arith.constant 0 : i32
    %c0_i32_37 = arith.constant 0 : i32
    %c1049976_i64_38 = arith.constant 1049976 : i64
    %116 = arith.extui %c0_i32_37 : i32 to i64
    %117 = arith.addi %116, %c1049976_i64_38 : i64
    %118 = llvm.getelementptr %8[%117] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %119 = llvm.load volatile %118 {alignment = 1 : i64} : !llvm.ptr -> i32
    %120 = llvm.load %0 : !llvm.ptr -> i32
    %121 = arith.addi %119, %120 : i32
    llvm.store %121, %0 : i32, !llvm.ptr
    %c1049976_i64_39 = arith.constant 1049976 : i64
    %122 = arith.extui %c0_i32_36 : i32 to i64
    %123 = arith.addi %122, %c1049976_i64_39 : i64
    %124 = llvm.getelementptr %8[%123] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %121, %124 {alignment = 1 : i64} : i32, !llvm.ptr
    %125 = llvm.load %1 : !llvm.ptr -> i32
    %126 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_40 = arith.constant 1 : i32
    %127 = arith.ori %126, %c1_i32_40 : i32
    %c4_i64_41 = arith.constant 4 : i64
    %128 = arith.extui %125 : i32 to i64
    %129 = arith.addi %128, %c4_i64_41 : i64
    %130 = llvm.getelementptr %8[%129] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %127, %130 {alignment = 1 : i64} : i32, !llvm.ptr
    %131 = llvm.load %1 : !llvm.ptr -> i32
    %132 = llvm.load %0 : !llvm.ptr -> i32
    %133 = arith.addi %131, %132 : i32
    %134 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_42 = arith.constant 0 : i64
    %135 = arith.extui %133 : i32 to i64
    %136 = arith.addi %135, %c0_i64_42 : i64
    %137 = llvm.getelementptr %8[%136] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %134, %137 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb13:  // pred: ^bb16
    %c0_i32_43 = arith.constant 0 : i32
    %138 = llvm.load %1 : !llvm.ptr -> i32
    %c1049988_i64 = arith.constant 1049988 : i64
    %139 = arith.extui %c0_i32_43 : i32 to i64
    %140 = arith.addi %139, %c1049988_i64 : i64
    %141 = llvm.getelementptr %8[%140] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %138, %141 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_44 = arith.constant 0 : i32
    %c0_i32_45 = arith.constant 0 : i32
    %c1049980_i64 = arith.constant 1049980 : i64
    %142 = arith.extui %c0_i32_45 : i32 to i64
    %143 = arith.addi %142, %c1049980_i64 : i64
    %144 = llvm.getelementptr %8[%143] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %145 = llvm.load volatile %144 {alignment = 1 : i64} : !llvm.ptr -> i32
    %146 = llvm.load %0 : !llvm.ptr -> i32
    %147 = arith.addi %145, %146 : i32
    llvm.store %147, %0 : i32, !llvm.ptr
    %c1049980_i64_46 = arith.constant 1049980 : i64
    %148 = arith.extui %c0_i32_44 : i32 to i64
    %149 = arith.addi %148, %c1049980_i64_46 : i64
    %150 = llvm.getelementptr %8[%149] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %147, %150 {alignment = 1 : i64} : i32, !llvm.ptr
    %151 = llvm.load %1 : !llvm.ptr -> i32
    %152 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_47 = arith.constant 1 : i32
    %153 = arith.ori %152, %c1_i32_47 : i32
    %c4_i64_48 = arith.constant 4 : i64
    %154 = arith.extui %151 : i32 to i64
    %155 = arith.addi %154, %c4_i64_48 : i64
    %156 = llvm.getelementptr %8[%155] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %153, %156 {alignment = 1 : i64} : i32, !llvm.ptr
    %157 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_49 = arith.constant 0 : i32
    %c1049984_i64_50 = arith.constant 1049984 : i64
    %158 = arith.extui %c0_i32_49 : i32 to i64
    %159 = arith.addi %158, %c1049984_i64_50 : i64
    %160 = llvm.getelementptr %8[%159] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %161 = llvm.load volatile %160 {alignment = 1 : i64} : !llvm.ptr -> i32
    %162 = arith.cmpi eq, %157, %161 : i32
    %163 = arith.extui %162 : i1 to i32
    %c0_i32_51 = arith.constant 0 : i32
    %164 = arith.cmpi eq, %163, %c0_i32_51 : i32
    %165 = arith.extui %164 : i1 to i32
    %c0_i32_52 = arith.constant 0 : i32
    %166 = arith.cmpi ne, %165, %c0_i32_52 : i32
    cf.cond_br %166, ^bb27, ^bb28
  ^bb14:  // 2 preds: ^bb15, ^bb18
    %167 = llvm.load %0 : !llvm.ptr -> i32
    %c256_i32 = arith.constant 256 : i32
    %168 = arith.cmpi ult, %167, %c256_i32 : i32
    %169 = arith.extui %168 : i1 to i32
    %c0_i32_53 = arith.constant 0 : i32
    %170 = arith.cmpi ne, %169, %c0_i32_53 : i32
    cf.cond_br %170, ^bb11, ^bb20
  ^bb15:  // pred: ^bb4
    %171 = llvm.load %3 : !llvm.ptr -> i32
    %172 = llvm.load %2 : !llvm.ptr -> i32
    %c-2_i32_54 = arith.constant -2 : i32
    %173 = arith.andi %172, %c-2_i32_54 : i32
    %c4_i64_55 = arith.constant 4 : i64
    %174 = arith.extui %171 : i32 to i64
    %175 = arith.addi %174, %c4_i64_55 : i64
    %176 = llvm.getelementptr %8[%175] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %173, %176 {alignment = 1 : i64} : i32, !llvm.ptr
    %177 = llvm.load %1 : !llvm.ptr -> i32
    %178 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_56 = arith.constant 1 : i32
    %179 = arith.ori %178, %c1_i32_56 : i32
    %c4_i64_57 = arith.constant 4 : i64
    %180 = arith.extui %177 : i32 to i64
    %181 = arith.addi %180, %c4_i64_57 : i64
    %182 = llvm.getelementptr %8[%181] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %179, %182 {alignment = 1 : i64} : i32, !llvm.ptr
    %183 = llvm.load %1 : !llvm.ptr -> i32
    %184 = llvm.load %0 : !llvm.ptr -> i32
    %185 = arith.addi %183, %184 : i32
    %186 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_58 = arith.constant 0 : i64
    %187 = arith.extui %185 : i32 to i64
    %188 = arith.addi %187, %c0_i64_58 : i64
    %189 = llvm.getelementptr %8[%188] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %186, %189 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb14
  ^bb16:  // pred: ^bb4
    %190 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_59 = arith.constant 0 : i32
    %c1049988_i64_60 = arith.constant 1049988 : i64
    %191 = arith.extui %c0_i32_59 : i32 to i64
    %192 = arith.addi %191, %c1049988_i64_60 : i64
    %193 = llvm.getelementptr %8[%192] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %194 = llvm.load volatile %193 {alignment = 1 : i64} : !llvm.ptr -> i32
    %195 = arith.cmpi eq, %190, %194 : i32
    %196 = arith.extui %195 : i1 to i32
    %c0_i32_61 = arith.constant 0 : i32
    %197 = arith.cmpi ne, %196, %c0_i32_61 : i32
    cf.cond_br %197, ^bb13, ^bb17
  ^bb17:  // pred: ^bb16
    %198 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_62 = arith.constant 0 : i32
    %c1049984_i64_63 = arith.constant 1049984 : i64
    %199 = arith.extui %c0_i32_62 : i32 to i64
    %200 = arith.addi %199, %c1049984_i64_63 : i64
    %201 = llvm.getelementptr %8[%200] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %202 = llvm.load volatile %201 {alignment = 1 : i64} : !llvm.ptr -> i32
    %203 = arith.cmpi eq, %198, %202 : i32
    %204 = arith.extui %203 : i1 to i32
    %c0_i32_64 = arith.constant 0 : i32
    %205 = arith.cmpi ne, %204, %c0_i32_64 : i32
    cf.cond_br %205, ^bb12, ^bb18
  ^bb18:  // pred: ^bb17
    %206 = llvm.load %3 : !llvm.ptr -> i32
    %207 = llvm.load %2 : !llvm.ptr -> i32
    %c-8_i32_65 = arith.constant -8 : i32
    %208 = arith.andi %207, %c-8_i32_65 : i32
    llvm.store %208, %2 : i32, !llvm.ptr
    call @f32(%arg0, %206, %208) : (!llvm.ptr, i32, i32) -> ()
    %209 = llvm.load %1 : !llvm.ptr -> i32
    %210 = llvm.load %2 : !llvm.ptr -> i32
    %211 = llvm.load %0 : !llvm.ptr -> i32
    %212 = arith.addi %210, %211 : i32
    llvm.store %212, %0 : i32, !llvm.ptr
    %c1_i32_66 = arith.constant 1 : i32
    %213 = arith.ori %212, %c1_i32_66 : i32
    %c4_i64_67 = arith.constant 4 : i64
    %214 = arith.extui %209 : i32 to i64
    %215 = arith.addi %214, %c4_i64_67 : i64
    %216 = llvm.getelementptr %8[%215] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %213, %216 {alignment = 1 : i64} : i32, !llvm.ptr
    %217 = llvm.load %1 : !llvm.ptr -> i32
    %218 = llvm.load %0 : !llvm.ptr -> i32
    %219 = arith.addi %217, %218 : i32
    %220 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_68 = arith.constant 0 : i64
    %221 = arith.extui %219 : i32 to i64
    %222 = arith.addi %221, %c0_i64_68 : i64
    %223 = llvm.getelementptr %8[%222] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %220, %223 {alignment = 1 : i64} : i32, !llvm.ptr
    %224 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_69 = arith.constant 0 : i32
    %c1049984_i64_70 = arith.constant 1049984 : i64
    %225 = arith.extui %c0_i32_69 : i32 to i64
    %226 = arith.addi %225, %c1049984_i64_70 : i64
    %227 = llvm.getelementptr %8[%226] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %228 = llvm.load volatile %227 {alignment = 1 : i64} : !llvm.ptr -> i32
    %229 = arith.cmpi eq, %224, %228 : i32
    %230 = arith.extui %229 : i1 to i32
    %c0_i32_71 = arith.constant 0 : i32
    %231 = arith.cmpi eq, %230, %c0_i32_71 : i32
    %232 = arith.extui %231 : i1 to i32
    %c0_i32_72 = arith.constant 0 : i32
    %233 = arith.cmpi ne, %232, %c0_i32_72 : i32
    cf.cond_br %233, ^bb14, ^bb19
  ^bb19:  // pred: ^bb18
    %c0_i32_73 = arith.constant 0 : i32
    %234 = llvm.load %0 : !llvm.ptr -> i32
    %c1049976_i64_74 = arith.constant 1049976 : i64
    %235 = arith.extui %c0_i32_73 : i32 to i64
    %236 = arith.addi %235, %c1049976_i64_74 : i64
    %237 = llvm.getelementptr %8[%236] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %234, %237 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb20:  // pred: ^bb14
    %238 = llvm.load %1 : !llvm.ptr -> i32
    %239 = llvm.load %0 : !llvm.ptr -> i32
    call @f34(%arg0, %238, %239) : (!llvm.ptr, i32, i32) -> ()
    %c0_i32_75 = arith.constant 0 : i32
    llvm.store %c0_i32_75, %1 : i32, !llvm.ptr
    %c0_i32_76 = arith.constant 0 : i32
    %c0_i32_77 = arith.constant 0 : i32
    %c1050008_i64 = arith.constant 1050008 : i64
    %240 = arith.extui %c0_i32_77 : i32 to i64
    %241 = arith.addi %240, %c1050008_i64 : i64
    %242 = llvm.getelementptr %8[%241] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %243 = llvm.load volatile %242 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %244 = arith.addi %243, %c-1_i32 : i32
    llvm.store %244, %0 : i32, !llvm.ptr
    %c1050008_i64_78 = arith.constant 1050008 : i64
    %245 = arith.extui %c0_i32_76 : i32 to i64
    %246 = arith.addi %245, %c1050008_i64_78 : i64
    %247 = llvm.getelementptr %8[%246] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %244, %247 {alignment = 1 : i64} : i32, !llvm.ptr
    %248 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_79 = arith.constant 0 : i32
    %249 = arith.cmpi ne, %248, %c0_i32_79 : i32
    cf.cond_br %249, ^bb3, ^bb21
  ^bb21:  // pred: ^bb20
    %c0_i32_80 = arith.constant 0 : i32
    %c1049696_i64_81 = arith.constant 1049696 : i64
    %250 = arith.extui %c0_i32_80 : i32 to i64
    %251 = arith.addi %250, %c1049696_i64_81 : i64
    %252 = llvm.getelementptr %8[%251] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %253 = llvm.load volatile %252 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %253, %0 : i32, !llvm.ptr
    %c0_i32_82 = arith.constant 0 : i32
    %254 = arith.cmpi eq, %253, %c0_i32_82 : i32
    %255 = arith.extui %254 : i1 to i32
    %c0_i32_83 = arith.constant 0 : i32
    %256 = arith.cmpi ne, %255, %c0_i32_83 : i32
    cf.cond_br %256, ^bb22, ^bb23
  ^bb22:  // 2 preds: ^bb21, ^bb24
    %c0_i32_84 = arith.constant 0 : i32
    %257 = llvm.load %1 : !llvm.ptr -> i32
    %c4095_i32 = arith.constant 4095 : i32
    %258 = llvm.load %1 : !llvm.ptr -> i32
    %c4095_i32_85 = arith.constant 4095 : i32
    %259 = arith.cmpi ugt, %258, %c4095_i32_85 : i32
    %260 = arith.extui %259 : i1 to i32
    %c0_i32_86 = arith.constant 0 : i32
    %261 = arith.cmpi ne, %260, %c0_i32_86 : i32
    %262 = arith.select %261, %257, %c4095_i32 : i32
    %c1050008_i64_87 = arith.constant 1050008 : i64
    %263 = arith.extui %c0_i32_84 : i32 to i64
    %264 = arith.addi %263, %c1050008_i64_87 : i64
    %265 = llvm.getelementptr %8[%264] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %262, %265 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb23:  // pred: ^bb21
    %c0_i32_88 = arith.constant 0 : i32
    llvm.store %c0_i32_88, %1 : i32, !llvm.ptr
    cf.br ^bb25
  ^bb24:  // pred: ^bb26
    cf.br ^bb22
  ^bb25:  // 2 preds: ^bb23, ^bb25
    %266 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_89 = arith.constant 1 : i32
    %267 = arith.addi %266, %c1_i32_89 : i32
    llvm.store %267, %1 : i32, !llvm.ptr
    %268 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %269 = arith.extui %268 : i32 to i64
    %270 = arith.addi %269, %c8_i64 : i64
    %271 = llvm.getelementptr %8[%270] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %272 = llvm.load volatile %271 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %272, %0 : i32, !llvm.ptr
    %c0_i32_90 = arith.constant 0 : i32
    %273 = arith.cmpi ne, %272, %c0_i32_90 : i32
    cf.cond_br %273, ^bb25, ^bb26
  ^bb26:  // pred: ^bb25
    cf.br ^bb24
  ^bb27:  // 2 preds: ^bb13, ^bb28
    %274 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_91 = arith.constant 0 : i32
    %c1050000_i64 = arith.constant 1050000 : i64
    %275 = arith.extui %c0_i32_91 : i32 to i64
    %276 = arith.addi %275, %c1050000_i64 : i64
    %277 = llvm.getelementptr %8[%276] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %278 = llvm.load volatile %277 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %278, %4 : i32, !llvm.ptr
    %279 = arith.cmpi ule, %274, %278 : i32
    %280 = arith.extui %279 : i1 to i32
    %c0_i32_92 = arith.constant 0 : i32
    %281 = arith.cmpi ne, %280, %c0_i32_92 : i32
    cf.cond_br %281, ^bb3, ^bb29
  ^bb28:  // pred: ^bb13
    %c0_i32_93 = arith.constant 0 : i32
    %c0_i32_94 = arith.constant 0 : i32
    %c1049976_i64_95 = arith.constant 1049976 : i64
    %282 = arith.extui %c0_i32_93 : i32 to i64
    %283 = arith.addi %282, %c1049976_i64_95 : i64
    %284 = llvm.getelementptr %8[%283] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_94, %284 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_96 = arith.constant 0 : i32
    %c0_i32_97 = arith.constant 0 : i32
    %c1049984_i64_98 = arith.constant 1049984 : i64
    %285 = arith.extui %c0_i32_96 : i32 to i64
    %286 = arith.addi %285, %c1049984_i64_98 : i64
    %287 = llvm.getelementptr %8[%286] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_97, %287 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb27
  ^bb29:  // pred: ^bb27
    %c0_i32_99 = arith.constant 0 : i32
    %c1049988_i64_100 = arith.constant 1049988 : i64
    %288 = arith.extui %c0_i32_99 : i32 to i64
    %289 = arith.addi %288, %c1049988_i64_100 : i64
    %290 = llvm.getelementptr %8[%289] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %291 = llvm.load volatile %290 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %291, %0 : i32, !llvm.ptr
    %c0_i32_101 = arith.constant 0 : i32
    %292 = arith.cmpi eq, %291, %c0_i32_101 : i32
    %293 = arith.extui %292 : i1 to i32
    %c0_i32_102 = arith.constant 0 : i32
    %294 = arith.cmpi ne, %293, %c0_i32_102 : i32
    cf.cond_br %294, ^bb3, ^bb30
  ^bb30:  // pred: ^bb29
    %c0_i32_103 = arith.constant 0 : i32
    llvm.store %c0_i32_103, %2 : i32, !llvm.ptr
    %c0_i32_104 = arith.constant 0 : i32
    %c1049980_i64_105 = arith.constant 1049980 : i64
    %295 = arith.extui %c0_i32_104 : i32 to i64
    %296 = arith.addi %295, %c1049980_i64_105 : i64
    %297 = llvm.getelementptr %8[%296] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %298 = llvm.load volatile %297 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %298, %5 : i32, !llvm.ptr
    %c41_i32 = arith.constant 41 : i32
    %299 = arith.cmpi ult, %298, %c41_i32 : i32
    %300 = arith.extui %299 : i1 to i32
    %c0_i32_106 = arith.constant 0 : i32
    %301 = arith.cmpi ne, %300, %c0_i32_106 : i32
    cf.cond_br %301, ^bb10, ^bb31
  ^bb31:  // pred: ^bb30
    %c1049688_i32 = arith.constant 1049688 : i32
    llvm.store %c1049688_i32, %1 : i32, !llvm.ptr
    cf.br ^bb33
  ^bb32:  // no predecessors
    cf.br ^bb12
  ^bb33:  // 2 preds: ^bb31, ^bb34
    %302 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_107 = arith.constant 0 : i64
    %303 = arith.extui %302 : i32 to i64
    %304 = arith.addi %303, %c0_i64_107 : i64
    %305 = llvm.getelementptr %8[%304] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %306 = llvm.load volatile %305 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %306, %3 : i32, !llvm.ptr
    %307 = llvm.load %0 : !llvm.ptr -> i32
    %308 = arith.cmpi ugt, %306, %307 : i32
    %309 = arith.extui %308 : i1 to i32
    %c0_i32_108 = arith.constant 0 : i32
    %310 = arith.cmpi ne, %309, %c0_i32_108 : i32
    cf.cond_br %310, ^bb34, ^bb35
  ^bb34:  // 2 preds: ^bb33, ^bb36
    %311 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64_109 = arith.constant 8 : i64
    %312 = arith.extui %311 : i32 to i64
    %313 = arith.addi %312, %c8_i64_109 : i64
    %314 = llvm.getelementptr %8[%313] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %315 = llvm.load volatile %314 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %315, %1 : i32, !llvm.ptr
    cf.br ^bb33
  ^bb35:  // pred: ^bb33
    %316 = llvm.load %0 : !llvm.ptr -> i32
    %317 = llvm.load %3 : !llvm.ptr -> i32
    %318 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_110 = arith.constant 4 : i64
    %319 = arith.extui %318 : i32 to i64
    %320 = arith.addi %319, %c4_i64_110 : i64
    %321 = llvm.getelementptr %8[%320] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %322 = llvm.load volatile %321 {alignment = 1 : i64} : !llvm.ptr -> i32
    %323 = arith.addi %317, %322 : i32
    %324 = arith.cmpi ult, %316, %323 : i32
    %325 = arith.extui %324 : i1 to i32
    %c0_i32_111 = arith.constant 0 : i32
    %326 = arith.cmpi ne, %325, %c0_i32_111 : i32
    cf.cond_br %326, ^bb10, ^bb36
  ^bb36:  // pred: ^bb35
    cf.br ^bb34
  ^bb37:  // 2 preds: ^bb38, ^bb39
    %327 = llvm.load %3 : !llvm.ptr -> i32
    %328 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64_112 = arith.constant 8 : i64
    %329 = arith.extui %327 : i32 to i64
    %330 = arith.addi %329, %c8_i64_112 : i64
    %331 = llvm.getelementptr %8[%330] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %328, %331 {alignment = 1 : i64} : i32, !llvm.ptr
    %332 = llvm.load %0 : !llvm.ptr -> i32
    %333 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %334 = arith.extui %332 : i32 to i64
    %335 = arith.addi %334, %c12_i64 : i64
    %336 = llvm.getelementptr %8[%335] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %333, %336 {alignment = 1 : i64} : i32, !llvm.ptr
    %337 = llvm.load %1 : !llvm.ptr -> i32
    %338 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i64_113 = arith.constant 12 : i64
    %339 = arith.extui %337 : i32 to i64
    %340 = arith.addi %339, %c12_i64_113 : i64
    %341 = llvm.getelementptr %8[%340] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %338, %341 {alignment = 1 : i64} : i32, !llvm.ptr
    %342 = llvm.load %1 : !llvm.ptr -> i32
    %343 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_114 = arith.constant 8 : i64
    %344 = arith.extui %342 : i32 to i64
    %345 = arith.addi %344, %c8_i64_114 : i64
    %346 = llvm.getelementptr %8[%345] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %343, %346 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb38:  // pred: ^bb11
    %347 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64_115 = arith.constant 8 : i64
    %348 = arith.extui %347 : i32 to i64
    %349 = arith.addi %348, %c8_i64_115 : i64
    %350 = llvm.getelementptr %8[%349] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %351 = llvm.load volatile %350 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %351, %0 : i32, !llvm.ptr
    cf.br ^bb37
  ^bb39:  // pred: ^bb11
    %c0_i32_116 = arith.constant 0 : i32
    %352 = llvm.load %2 : !llvm.ptr -> i32
    %353 = llvm.load %0 : !llvm.ptr -> i32
    %354 = arith.ori %352, %353 : i32
    %c1049968_i64_117 = arith.constant 1049968 : i64
    %355 = arith.extui %c0_i32_116 : i32 to i64
    %356 = arith.addi %355, %c1049968_i64_117 : i64
    %357 = llvm.getelementptr %8[%356] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %354, %357 {alignment = 1 : i64} : i32, !llvm.ptr
    %358 = llvm.load %3 : !llvm.ptr -> i32
    llvm.store %358, %0 : i32, !llvm.ptr
    cf.br ^bb37
  ^bb40:  // 2 preds: ^bb10, ^bb42
    %c0_i32_118 = arith.constant 0 : i32
    %359 = llvm.load %2 : !llvm.ptr -> i32
    %c4095_i32_119 = arith.constant 4095 : i32
    %360 = llvm.load %2 : !llvm.ptr -> i32
    %c4095_i32_120 = arith.constant 4095 : i32
    %361 = arith.cmpi ugt, %360, %c4095_i32_120 : i32
    %362 = arith.extui %361 : i1 to i32
    %c0_i32_121 = arith.constant 0 : i32
    %363 = arith.cmpi ne, %362, %c0_i32_121 : i32
    %364 = arith.select %363, %359, %c4095_i32_119 : i32
    %c1050008_i64_122 = arith.constant 1050008 : i64
    %365 = arith.extui %c0_i32_118 : i32 to i64
    %366 = arith.addi %365, %c1050008_i64_122 : i64
    %367 = llvm.getelementptr %8[%366] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %364, %367 {alignment = 1 : i64} : i32, !llvm.ptr
    %368 = llvm.load %5 : !llvm.ptr -> i32
    %369 = llvm.load %4 : !llvm.ptr -> i32
    %370 = arith.cmpi ule, %368, %369 : i32
    %371 = arith.extui %370 : i1 to i32
    %c0_i32_123 = arith.constant 0 : i32
    %372 = arith.cmpi ne, %371, %c0_i32_123 : i32
    cf.cond_br %372, ^bb3, ^bb45
  ^bb41:  // pred: ^bb10
    %c0_i32_124 = arith.constant 0 : i32
    llvm.store %c0_i32_124, %2 : i32, !llvm.ptr
    cf.br ^bb43
  ^bb42:  // pred: ^bb44
    cf.br ^bb40
  ^bb43:  // 2 preds: ^bb41, ^bb43
    %373 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_125 = arith.constant 1 : i32
    %374 = arith.addi %373, %c1_i32_125 : i32
    llvm.store %374, %2 : i32, !llvm.ptr
    %375 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64_126 = arith.constant 8 : i64
    %376 = arith.extui %375 : i32 to i64
    %377 = arith.addi %376, %c8_i64_126 : i64
    %378 = llvm.getelementptr %8[%377] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %379 = llvm.load volatile %378 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %379, %1 : i32, !llvm.ptr
    %c0_i32_127 = arith.constant 0 : i32
    %380 = arith.cmpi ne, %379, %c0_i32_127 : i32
    cf.cond_br %380, ^bb43, ^bb44
  ^bb44:  // pred: ^bb43
    cf.br ^bb42
  ^bb45:  // pred: ^bb40
    %c0_i32_128 = arith.constant 0 : i32
    %c-1_i32_129 = arith.constant -1 : i32
    %c1050000_i64_130 = arith.constant 1050000 : i64
    %381 = arith.extui %c0_i32_128 : i32 to i64
    %382 = arith.addi %381, %c1050000_i64_130 : i64
    %383 = llvm.getelementptr %8[%382] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-1_i32_129, %383 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f36(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i64_4 = arith.constant 1 : i64
    %5 = llvm.alloca %c1_i64_4 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i64_5 = arith.constant 1 : i64
    %6 = llvm.alloca %c1_i64_5 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i64_6 = arith.constant 1 : i64
    %7 = llvm.alloca %c1_i64_6 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i64_7 = arith.constant 1 : i64
    %8 = llvm.alloca %c1_i64_7 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i64_8 = arith.constant 1 : i64
    %9 = llvm.alloca %c1_i64_8 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i64_9 = arith.constant 1 : i64
    %10 = llvm.alloca %c1_i64_9 x i64 : (i64) -> !llvm.ptr
    llvm.store %c0_i64, %10 : i64, !llvm.ptr
    %11 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %13[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %16 = llvm.load %12 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %17 = arith.subi %16, %c16_i32 : i32
    llvm.store %17, %1 : i32, !llvm.ptr
    llvm.store %17, %12 : i32, !llvm.ptr
    %18 = llvm.load %0 : !llvm.ptr -> i32
    %c245_i32 = arith.constant 245 : i32
    %19 = arith.cmpi ult, %18, %c245_i32 : i32
    %20 = arith.extui %19 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %21 = arith.cmpi ne, %20, %c0_i32_10 : i32
    cf.cond_br %21, ^bb10, ^bb11
  ^bb2(%22: i32):  // pred: ^bb3
    return %22 : i32
  ^bb3:  // 11 preds: ^bb11, ^bb28, ^bb58, ^bb66, ^bb100, ^bb101, ^bb107, ^bb110, ^bb160, ^bb163, ^bb167
    %23 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32_11 = arith.constant 16 : i32
    %24 = arith.addi %23, %c16_i32_11 : i32
    llvm.store %24, %12 : i32, !llvm.ptr
    %25 = llvm.load %2 : !llvm.ptr -> i32
    cf.br ^bb2(%25 : i32)
  ^bb4:  // 5 preds: ^bb87, ^bb97, ^bb99, ^bb164, ^bb166
    %26 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_12 = arith.constant 16 : i32
    %27 = arith.cmpi ult, %26, %c16_i32_12 : i32
    %28 = arith.extui %27 : i1 to i32
    %c0_i32_13 = arith.constant 0 : i32
    %29 = arith.cmpi ne, %28, %c0_i32_13 : i32
    cf.cond_br %29, ^bb168, ^bb169
  ^bb5:  // 2 preds: ^bb96, ^bb98
    %30 = llvm.load %0 : !llvm.ptr -> i32
    %31 = llvm.load %5 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %32 = arith.extui %30 : i32 to i64
    %33 = arith.addi %32, %c24_i64 : i64
    %34 = llvm.getelementptr %15[%33] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %31, %34 {alignment = 1 : i64} : i32, !llvm.ptr
    %35 = llvm.load %7 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %36 = arith.extui %35 : i32 to i64
    %37 = arith.addi %36, %c16_i64 : i64
    %38 = llvm.getelementptr %15[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %39 = llvm.load volatile %38 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %39, %6 : i32, !llvm.ptr
    %c0_i32_14 = arith.constant 0 : i32
    %40 = arith.cmpi eq, %39, %c0_i32_14 : i32
    %41 = arith.extui %40 : i1 to i32
    %c0_i32_15 = arith.constant 0 : i32
    %42 = arith.cmpi ne, %41, %c0_i32_15 : i32
    cf.cond_br %42, ^bb164, ^bb165
  ^bb6:  // 6 preds: ^bb7, ^bb12, ^bb26, ^bb35, ^bb75, ^bb85
    %c0_i32_16 = arith.constant 0 : i32
    %c1049976_i64 = arith.constant 1049976 : i64
    %43 = arith.extui %c0_i32_16 : i32 to i64
    %44 = arith.addi %43, %c1049976_i64 : i64
    %45 = llvm.getelementptr %15[%44] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %46 = llvm.load volatile %45 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %46, %0 : i32, !llvm.ptr
    %47 = llvm.load %3 : !llvm.ptr -> i32
    %48 = arith.cmpi uge, %46, %47 : i32
    %49 = arith.extui %48 : i1 to i32
    %c0_i32_17 = arith.constant 0 : i32
    %50 = arith.cmpi ne, %49, %c0_i32_17 : i32
    cf.cond_br %50, ^bb105, ^bb106
  ^bb7:  // 2 preds: ^bb74, ^bb78
    %51 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i32_18 = arith.constant 0 : i32
    %52 = arith.cmpi eq, %51, %c0_i32_18 : i32
    %53 = arith.extui %52 : i1 to i32
    %c0_i32_19 = arith.constant 0 : i32
    %54 = arith.cmpi ne, %53, %c0_i32_19 : i32
    cf.cond_br %54, ^bb6, ^bb83
  ^bb8:  // 2 preds: ^bb24, ^bb77
    cf.br ^bb79
  ^bb9:  // 2 preds: ^bb18, ^bb21
    %55 = llvm.load %0 : !llvm.ptr -> i32
    %56 = llvm.load %7 : !llvm.ptr -> i32
    %57 = arith.ori %55, %56 : i32
    %c0_i32_20 = arith.constant 0 : i32
    %58 = arith.cmpi ne, %57, %c0_i32_20 : i32
    cf.cond_br %58, ^bb74, ^bb75
  ^bb10:  // 2 preds: ^bb1, ^bb19
    %c0_i32_21 = arith.constant 0 : i32
    %c1049968_i64 = arith.constant 1049968 : i64
    %59 = arith.extui %c0_i32_21 : i32 to i64
    %60 = arith.addi %59, %c1049968_i64 : i64
    %61 = llvm.getelementptr %15[%60] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %62 = llvm.load volatile %61 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %62, %6 : i32, !llvm.ptr
    %c16_i32_22 = arith.constant 16 : i32
    %63 = llvm.load %0 : !llvm.ptr -> i32
    %c11_i32 = arith.constant 11 : i32
    %64 = arith.addi %63, %c11_i32 : i32
    %c504_i32 = arith.constant 504 : i32
    %65 = arith.andi %64, %c504_i32 : i32
    %66 = llvm.load %0 : !llvm.ptr -> i32
    %c11_i32_23 = arith.constant 11 : i32
    %67 = arith.cmpi ult, %66, %c11_i32_23 : i32
    %68 = arith.extui %67 : i1 to i32
    %c0_i32_24 = arith.constant 0 : i32
    %69 = arith.cmpi ne, %68, %c0_i32_24 : i32
    %70 = arith.select %69, %c16_i32_22, %65 : i32
    llvm.store %70, %3 : i32, !llvm.ptr
    %c3_i32 = arith.constant 3 : i32
    %c31_i32 = arith.constant 31 : i32
    %71 = arith.cmpi ule, %c3_i32, %c31_i32 : i32
    %72 = scf.if %71 -> (i32) {
      %2086 = arith.shrui %70, %c3_i32 : i32
      scf.yield %2086 : i32
    } else {
      %c0_i32_749 = arith.constant 0 : i32
      scf.yield %c0_i32_749 : i32
    }
    llvm.store %72, %2 : i32, !llvm.ptr
    %c31_i32_25 = arith.constant 31 : i32
    %73 = arith.cmpi ule, %72, %c31_i32_25 : i32
    %74 = scf.if %73 -> (i32) {
      %2086 = arith.shrui %62, %72 : i32
      scf.yield %2086 : i32
    } else {
      %c0_i32_749 = arith.constant 0 : i32
      scf.yield %c0_i32_749 : i32
    }
    llvm.store %74, %0 : i32, !llvm.ptr
    %c3_i32_26 = arith.constant 3 : i32
    %75 = arith.andi %74, %c3_i32_26 : i32
    %c0_i32_27 = arith.constant 0 : i32
    %76 = arith.cmpi eq, %75, %c0_i32_27 : i32
    %77 = arith.extui %76 : i1 to i32
    %c0_i32_28 = arith.constant 0 : i32
    %78 = arith.cmpi ne, %77, %c0_i32_28 : i32
    cf.cond_br %78, ^bb26, ^bb27
  ^bb11:  // pred: ^bb1
    %c0_i32_29 = arith.constant 0 : i32
    llvm.store %c0_i32_29, %2 : i32, !llvm.ptr
    %79 = llvm.load %0 : !llvm.ptr -> i32
    %c-65587_i32 = arith.constant -65587 : i32
    %80 = arith.cmpi uge, %79, %c-65587_i32 : i32
    %81 = arith.extui %80 : i1 to i32
    %c0_i32_30 = arith.constant 0 : i32
    %82 = arith.cmpi ne, %81, %c0_i32_30 : i32
    cf.cond_br %82, ^bb3, ^bb12
  ^bb12:  // pred: ^bb11
    %83 = llvm.load %0 : !llvm.ptr -> i32
    %c11_i32_31 = arith.constant 11 : i32
    %84 = arith.addi %83, %c11_i32_31 : i32
    llvm.store %84, %0 : i32, !llvm.ptr
    %c-8_i32 = arith.constant -8 : i32
    %85 = arith.andi %84, %c-8_i32 : i32
    llvm.store %85, %3 : i32, !llvm.ptr
    %c0_i32_32 = arith.constant 0 : i32
    %c1049972_i64 = arith.constant 1049972 : i64
    %86 = arith.extui %c0_i32_32 : i32 to i64
    %87 = arith.addi %86, %c1049972_i64 : i64
    %88 = llvm.getelementptr %15[%87] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %89 = llvm.load volatile %88 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %89, %4 : i32, !llvm.ptr
    %c0_i32_33 = arith.constant 0 : i32
    %90 = arith.cmpi eq, %89, %c0_i32_33 : i32
    %91 = arith.extui %90 : i1 to i32
    %c0_i32_34 = arith.constant 0 : i32
    %92 = arith.cmpi ne, %91, %c0_i32_34 : i32
    cf.cond_br %92, ^bb6, ^bb13
  ^bb13:  // pred: ^bb12
    %c0_i32_35 = arith.constant 0 : i32
    llvm.store %c0_i32_35, %5 : i32, !llvm.ptr
    %93 = llvm.load %3 : !llvm.ptr -> i32
    %c256_i32 = arith.constant 256 : i32
    %94 = arith.cmpi ult, %93, %c256_i32 : i32
    %95 = arith.extui %94 : i1 to i32
    %c0_i32_36 = arith.constant 0 : i32
    %96 = arith.cmpi ne, %95, %c0_i32_36 : i32
    cf.cond_br %96, ^bb14, ^bb15
  ^bb14:  // 3 preds: ^bb13, ^bb15, ^bb16
    %c0_i32_37 = arith.constant 0 : i32
    %97 = llvm.load %3 : !llvm.ptr -> i32
    %98 = arith.subi %c0_i32_37, %97 : i32
    llvm.store %98, %2 : i32, !llvm.ptr
    %99 = llvm.load %5 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c31_i32_38 = arith.constant 31 : i32
    %100 = arith.cmpi ule, %c2_i32, %c31_i32_38 : i32
    %101 = scf.if %100 -> (i32) {
      %2086 = arith.shli %99, %c2_i32 : i32
      scf.yield %2086 : i32
    } else {
      %c0_i32_749 = arith.constant 0 : i32
      scf.yield %c0_i32_749 : i32
    }
    %c1049560_i32 = arith.constant 1049560 : i32
    %102 = arith.addi %101, %c1049560_i32 : i32
    %c0_i64_39 = arith.constant 0 : i64
    %103 = arith.extui %102 : i32 to i64
    %104 = arith.addi %103, %c0_i64_39 : i64
    %105 = llvm.getelementptr %15[%104] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %106 = llvm.load volatile %105 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %106, %6 : i32, !llvm.ptr
    %c0_i32_40 = arith.constant 0 : i32
    %107 = arith.cmpi ne, %106, %c0_i32_40 : i32
    cf.cond_br %107, ^bb17, ^bb18
  ^bb15:  // pred: ^bb13
    %c31_i32_41 = arith.constant 31 : i32
    llvm.store %c31_i32_41, %5 : i32, !llvm.ptr
    %108 = llvm.load %3 : !llvm.ptr -> i32
    %c16777215_i32 = arith.constant 16777215 : i32
    %109 = arith.cmpi ugt, %108, %c16777215_i32 : i32
    %110 = arith.extui %109 : i1 to i32
    %c0_i32_42 = arith.constant 0 : i32
    %111 = arith.cmpi ne, %110, %c0_i32_42 : i32
    cf.cond_br %111, ^bb14, ^bb16
  ^bb16:  // pred: ^bb15
    %112 = llvm.load %3 : !llvm.ptr -> i32
    %c6_i32 = arith.constant 6 : i32
    %113 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %c31_i32_43 = arith.constant 31 : i32
    %114 = arith.cmpi ule, %c8_i32, %c31_i32_43 : i32
    %115 = scf.if %114 -> (i32) {
      %2086 = arith.shrui %113, %c8_i32 : i32
      scf.yield %2086 : i32
    } else {
      %c0_i32_749 = arith.constant 0 : i32
      scf.yield %c0_i32_749 : i32
    }
    %false = arith.constant false
    %116 = llvm.call_intrinsic "llvm.ctlz.i32"(%115, %false) : (i32, i1) -> i32
    llvm.store %116, %0 : i32, !llvm.ptr
    %117 = arith.subi %c6_i32, %116 : i32
    %c31_i32_44 = arith.constant 31 : i32
    %118 = arith.cmpi ule, %117, %c31_i32_44 : i32
    %119 = scf.if %118 -> (i32) {
      %2086 = arith.shrui %112, %117 : i32
      scf.yield %2086 : i32
    } else {
      %c0_i32_749 = arith.constant 0 : i32
      scf.yield %c0_i32_749 : i32
    }
    %c1_i32 = arith.constant 1 : i32
    %120 = arith.andi %119, %c1_i32 : i32
    %121 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_45 = arith.constant 1 : i32
    %c31_i32_46 = arith.constant 31 : i32
    %122 = arith.cmpi ule, %c1_i32_45, %c31_i32_46 : i32
    %123 = scf.if %122 -> (i32) {
      %2086 = arith.shli %121, %c1_i32_45 : i32
      scf.yield %2086 : i32
    } else {
      %c0_i32_749 = arith.constant 0 : i32
      scf.yield %c0_i32_749 : i32
    }
    %124 = arith.subi %120, %123 : i32
    %c62_i32 = arith.constant 62 : i32
    %125 = arith.addi %124, %c62_i32 : i32
    llvm.store %125, %5 : i32, !llvm.ptr
    cf.br ^bb14
  ^bb17:  // pred: ^bb14
    %c0_i32_47 = arith.constant 0 : i32
    llvm.store %c0_i32_47, %0 : i32, !llvm.ptr
    %126 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_48 = arith.constant 0 : i32
    %c25_i32 = arith.constant 25 : i32
    %127 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i32_49 = arith.constant 1 : i32
    %c31_i32_50 = arith.constant 31 : i32
    %128 = arith.cmpi ule, %c1_i32_49, %c31_i32_50 : i32
    %129 = scf.if %128 -> (i32) {
      %2086 = arith.shrui %127, %c1_i32_49 : i32
      scf.yield %2086 : i32
    } else {
      %c0_i32_749 = arith.constant 0 : i32
      scf.yield %c0_i32_749 : i32
    }
    %130 = arith.subi %c25_i32, %129 : i32
    %131 = llvm.load %5 : !llvm.ptr -> i32
    %c31_i32_51 = arith.constant 31 : i32
    %132 = arith.cmpi eq, %131, %c31_i32_51 : i32
    %133 = arith.extui %132 : i1 to i32
    %c0_i32_52 = arith.constant 0 : i32
    %134 = arith.cmpi ne, %133, %c0_i32_52 : i32
    %135 = arith.select %134, %c0_i32_48, %130 : i32
    %c31_i32_53 = arith.constant 31 : i32
    %136 = arith.cmpi ule, %135, %c31_i32_53 : i32
    %137 = scf.if %136 -> (i32) {
      %2086 = arith.shli %126, %135 : i32
      scf.yield %2086 : i32
    } else {
      %c0_i32_749 = arith.constant 0 : i32
      scf.yield %c0_i32_749 : i32
    }
    llvm.store %137, %8 : i32, !llvm.ptr
    %c0_i32_54 = arith.constant 0 : i32
    llvm.store %c0_i32_54, %7 : i32, !llvm.ptr
    cf.br ^bb20
  ^bb18:  // pred: ^bb14
    %c0_i32_55 = arith.constant 0 : i32
    llvm.store %c0_i32_55, %0 : i32, !llvm.ptr
    %c0_i32_56 = arith.constant 0 : i32
    llvm.store %c0_i32_56, %7 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb19:  // no predecessors
    cf.br ^bb10
  ^bb20:  // 2 preds: ^bb17, ^bb25
    %138 = llvm.load %6 : !llvm.ptr -> i32
    llvm.store %138, %6 : i32, !llvm.ptr
    %c4_i64 = arith.constant 4 : i64
    %139 = arith.extui %138 : i32 to i64
    %140 = arith.addi %139, %c4_i64 : i64
    %141 = llvm.getelementptr %15[%140] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %142 = llvm.load volatile %141 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-8_i32_57 = arith.constant -8 : i32
    %143 = arith.andi %142, %c-8_i32_57 : i32
    llvm.store %143, %9 : i32, !llvm.ptr
    %144 = llvm.load %3 : !llvm.ptr -> i32
    %145 = arith.cmpi ult, %143, %144 : i32
    %146 = arith.extui %145 : i1 to i32
    %c0_i32_58 = arith.constant 0 : i32
    %147 = arith.cmpi ne, %146, %c0_i32_58 : i32
    cf.cond_br %147, ^bb21, ^bb22
  ^bb21:  // 3 preds: ^bb20, ^bb22, ^bb23
    %148 = llvm.load %6 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %149 = arith.extui %148 : i32 to i64
    %150 = arith.addi %149, %c20_i64 : i64
    %151 = llvm.getelementptr %15[%150] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %152 = llvm.load volatile %151 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %152, %9 : i32, !llvm.ptr
    %153 = llvm.load %0 : !llvm.ptr -> i32
    %154 = llvm.load %9 : !llvm.ptr -> i32
    %155 = llvm.load %6 : !llvm.ptr -> i32
    %156 = llvm.load %8 : !llvm.ptr -> i32
    %c29_i32 = arith.constant 29 : i32
    %c31_i32_59 = arith.constant 31 : i32
    %157 = arith.cmpi ule, %c29_i32, %c31_i32_59 : i32
    %158 = scf.if %157 -> (i32) {
      %2086 = arith.shrui %156, %c29_i32 : i32
      scf.yield %2086 : i32
    } else {
      %c0_i32_749 = arith.constant 0 : i32
      scf.yield %c0_i32_749 : i32
    }
    %c4_i32 = arith.constant 4 : i32
    %159 = arith.andi %158, %c4_i32 : i32
    %160 = arith.addi %155, %159 : i32
    %c16_i32_60 = arith.constant 16 : i32
    %161 = arith.addi %160, %c16_i32_60 : i32
    %c0_i64_61 = arith.constant 0 : i64
    %162 = arith.extui %161 : i32 to i64
    %163 = arith.addi %162, %c0_i64_61 : i64
    %164 = llvm.getelementptr %15[%163] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %165 = llvm.load volatile %164 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %165, %6 : i32, !llvm.ptr
    %166 = arith.cmpi eq, %154, %165 : i32
    %167 = arith.extui %166 : i1 to i32
    %c0_i32_62 = arith.constant 0 : i32
    %168 = arith.cmpi eq, %167, %c0_i32_62 : i32
    %169 = arith.extui %168 : i1 to i32
    %c0_i32_63 = arith.constant 0 : i32
    %170 = arith.cmpi ne, %169, %c0_i32_63 : i32
    %171 = arith.select %170, %152, %153 : i32
    %172 = llvm.load %0 : !llvm.ptr -> i32
    %173 = llvm.load %9 : !llvm.ptr -> i32
    %c0_i32_64 = arith.constant 0 : i32
    %174 = arith.cmpi ne, %173, %c0_i32_64 : i32
    %175 = arith.select %174, %171, %172 : i32
    llvm.store %175, %0 : i32, !llvm.ptr
    %176 = llvm.load %8 : !llvm.ptr -> i32
    %c1_i32_65 = arith.constant 1 : i32
    %c31_i32_66 = arith.constant 31 : i32
    %177 = arith.cmpi ule, %c1_i32_65, %c31_i32_66 : i32
    %178 = scf.if %177 -> (i32) {
      %2086 = arith.shli %176, %c1_i32_65 : i32
      scf.yield %2086 : i32
    } else {
      %c0_i32_749 = arith.constant 0 : i32
      scf.yield %c0_i32_749 : i32
    }
    llvm.store %178, %8 : i32, !llvm.ptr
    %179 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i32_67 = arith.constant 0 : i32
    %180 = arith.cmpi eq, %179, %c0_i32_67 : i32
    %181 = arith.extui %180 : i1 to i32
    %c0_i32_68 = arith.constant 0 : i32
    %182 = arith.cmpi ne, %181, %c0_i32_68 : i32
    cf.cond_br %182, ^bb9, ^bb25
  ^bb22:  // pred: ^bb20
    %183 = llvm.load %9 : !llvm.ptr -> i32
    %184 = llvm.load %3 : !llvm.ptr -> i32
    %185 = arith.subi %183, %184 : i32
    llvm.store %185, %9 : i32, !llvm.ptr
    %186 = llvm.load %2 : !llvm.ptr -> i32
    %187 = arith.cmpi uge, %185, %186 : i32
    %188 = arith.extui %187 : i1 to i32
    %c0_i32_69 = arith.constant 0 : i32
    %189 = arith.cmpi ne, %188, %c0_i32_69 : i32
    cf.cond_br %189, ^bb21, ^bb23
  ^bb23:  // pred: ^bb22
    %190 = llvm.load %9 : !llvm.ptr -> i32
    llvm.store %190, %2 : i32, !llvm.ptr
    %191 = llvm.load %6 : !llvm.ptr -> i32
    llvm.store %191, %7 : i32, !llvm.ptr
    %192 = llvm.load %9 : !llvm.ptr -> i32
    %c0_i32_70 = arith.constant 0 : i32
    %193 = arith.cmpi ne, %192, %c0_i32_70 : i32
    cf.cond_br %193, ^bb21, ^bb24
  ^bb24:  // pred: ^bb23
    %c0_i32_71 = arith.constant 0 : i32
    llvm.store %c0_i32_71, %2 : i32, !llvm.ptr
    %194 = llvm.load %6 : !llvm.ptr -> i32
    llvm.store %194, %7 : i32, !llvm.ptr
    %195 = llvm.load %6 : !llvm.ptr -> i32
    llvm.store %195, %0 : i32, !llvm.ptr
    cf.br ^bb8
  ^bb25:  // pred: ^bb21
    cf.br ^bb20
  ^bb26:  // pred: ^bb10
    %196 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_72 = arith.constant 0 : i32
    %c1049976_i64_73 = arith.constant 1049976 : i64
    %197 = arith.extui %c0_i32_72 : i32 to i64
    %198 = arith.addi %197, %c1049976_i64_73 : i64
    %199 = llvm.getelementptr %15[%198] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %200 = llvm.load volatile %199 {alignment = 1 : i64} : !llvm.ptr -> i32
    %201 = arith.cmpi ule, %196, %200 : i32
    %202 = arith.extui %201 : i1 to i32
    %c0_i32_74 = arith.constant 0 : i32
    %203 = arith.cmpi ne, %202, %c0_i32_74 : i32
    cf.cond_br %203, ^bb6, ^bb31
  ^bb27:  // pred: ^bb10
    %204 = llvm.load %0 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %205 = arith.xori %204, %c-1_i32 : i32
    %c1_i32_75 = arith.constant 1 : i32
    %206 = arith.andi %205, %c1_i32_75 : i32
    %207 = llvm.load %2 : !llvm.ptr -> i32
    %208 = arith.addi %206, %207 : i32
    llvm.store %208, %3 : i32, !llvm.ptr
    %c3_i32_76 = arith.constant 3 : i32
    %c31_i32_77 = arith.constant 31 : i32
    %209 = arith.cmpi ule, %c3_i32_76, %c31_i32_77 : i32
    %210 = scf.if %209 -> (i32) {
      %2086 = arith.shli %208, %c3_i32_76 : i32
      scf.yield %2086 : i32
    } else {
      %c0_i32_749 = arith.constant 0 : i32
      scf.yield %c0_i32_749 : i32
    }
    llvm.store %210, %0 : i32, !llvm.ptr
    %c1049704_i32 = arith.constant 1049704 : i32
    %211 = arith.addi %210, %c1049704_i32 : i32
    llvm.store %211, %2 : i32, !llvm.ptr
    %212 = llvm.load %0 : !llvm.ptr -> i32
    %c1049712_i32 = arith.constant 1049712 : i32
    %213 = arith.addi %212, %c1049712_i32 : i32
    %c0_i64_78 = arith.constant 0 : i64
    %214 = arith.extui %213 : i32 to i64
    %215 = arith.addi %214, %c0_i64_78 : i64
    %216 = llvm.getelementptr %15[%215] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %217 = llvm.load volatile %216 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %217, %0 : i32, !llvm.ptr
    %c8_i64 = arith.constant 8 : i64
    %218 = arith.extui %217 : i32 to i64
    %219 = arith.addi %218, %c8_i64 : i64
    %220 = llvm.getelementptr %15[%219] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %221 = llvm.load volatile %220 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %221, %7 : i32, !llvm.ptr
    %222 = arith.cmpi eq, %211, %221 : i32
    %223 = arith.extui %222 : i1 to i32
    %c0_i32_79 = arith.constant 0 : i32
    %224 = arith.cmpi ne, %223, %c0_i32_79 : i32
    cf.cond_br %224, ^bb29, ^bb30
  ^bb28:  // 2 preds: ^bb29, ^bb30
    %225 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_80 = arith.constant 8 : i32
    %226 = arith.addi %225, %c8_i32_80 : i32
    llvm.store %226, %2 : i32, !llvm.ptr
    %227 = llvm.load %0 : !llvm.ptr -> i32
    %228 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i32_81 = arith.constant 3 : i32
    %c31_i32_82 = arith.constant 31 : i32
    %229 = arith.cmpi ule, %c3_i32_81, %c31_i32_82 : i32
    %230 = scf.if %229 -> (i32) {
      %2086 = arith.shli %228, %c3_i32_81 : i32
      scf.yield %2086 : i32
    } else {
      %c0_i32_749 = arith.constant 0 : i32
      scf.yield %c0_i32_749 : i32
    }
    llvm.store %230, %3 : i32, !llvm.ptr
    %c3_i32_83 = arith.constant 3 : i32
    %231 = arith.ori %230, %c3_i32_83 : i32
    %c4_i64_84 = arith.constant 4 : i64
    %232 = arith.extui %227 : i32 to i64
    %233 = arith.addi %232, %c4_i64_84 : i64
    %234 = llvm.getelementptr %15[%233] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %231, %234 {alignment = 1 : i64} : i32, !llvm.ptr
    %235 = llvm.load %0 : !llvm.ptr -> i32
    %236 = llvm.load %3 : !llvm.ptr -> i32
    %237 = arith.addi %235, %236 : i32
    llvm.store %237, %0 : i32, !llvm.ptr
    %238 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_85 = arith.constant 4 : i64
    %239 = arith.extui %238 : i32 to i64
    %240 = arith.addi %239, %c4_i64_85 : i64
    %241 = llvm.getelementptr %15[%240] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %242 = llvm.load volatile %241 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_86 = arith.constant 1 : i32
    %243 = arith.ori %242, %c1_i32_86 : i32
    %c4_i64_87 = arith.constant 4 : i64
    %244 = arith.extui %237 : i32 to i64
    %245 = arith.addi %244, %c4_i64_87 : i64
    %246 = llvm.getelementptr %15[%245] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %243, %246 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb3
  ^bb29:  // pred: ^bb27
    %c0_i32_88 = arith.constant 0 : i32
    %247 = llvm.load %6 : !llvm.ptr -> i32
    %c-2_i32 = arith.constant -2 : i32
    %248 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %249 = arith.remui %248, %c32_i32 : i32
    %250 = arith.shli %c-2_i32, %249 : i32
    %251 = arith.subi %c32_i32, %249 : i32
    %252 = arith.shrui %c-2_i32, %251 : i32
    %253 = arith.ori %250, %252 : i32
    %254 = arith.andi %247, %253 : i32
    %c1049968_i64_89 = arith.constant 1049968 : i64
    %255 = arith.extui %c0_i32_88 : i32 to i64
    %256 = arith.addi %255, %c1049968_i64_89 : i64
    %257 = llvm.getelementptr %15[%256] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %254, %257 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb28
  ^bb30:  // pred: ^bb27
    %258 = llvm.load %7 : !llvm.ptr -> i32
    %259 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %260 = arith.extui %258 : i32 to i64
    %261 = arith.addi %260, %c12_i64 : i64
    %262 = llvm.getelementptr %15[%261] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %259, %262 {alignment = 1 : i64} : i32, !llvm.ptr
    %263 = llvm.load %2 : !llvm.ptr -> i32
    %264 = llvm.load %7 : !llvm.ptr -> i32
    %c8_i64_90 = arith.constant 8 : i64
    %265 = arith.extui %263 : i32 to i64
    %266 = arith.addi %265, %c8_i64_90 : i64
    %267 = llvm.getelementptr %15[%266] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %264, %267 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb28
  ^bb31:  // pred: ^bb26
    %268 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_91 = arith.constant 0 : i32
    %269 = arith.cmpi ne, %268, %c0_i32_91 : i32
    cf.cond_br %269, ^bb34, ^bb35
  ^bb32:  // 5 preds: ^bb42, ^bb52, ^bb54, ^bb63, ^bb65
    %270 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_92 = arith.constant 16 : i32
    %271 = arith.cmpi ult, %270, %c16_i32_92 : i32
    %272 = arith.extui %271 : i1 to i32
    %c0_i32_93 = arith.constant 0 : i32
    %273 = arith.cmpi ne, %272, %c0_i32_93 : i32
    cf.cond_br %273, ^bb68, ^bb69
  ^bb33:  // 2 preds: ^bb51, ^bb53
    %274 = llvm.load %0 : !llvm.ptr -> i32
    %275 = llvm.load %5 : !llvm.ptr -> i32
    %c24_i64_94 = arith.constant 24 : i64
    %276 = arith.extui %274 : i32 to i64
    %277 = arith.addi %276, %c24_i64_94 : i64
    %278 = llvm.getelementptr %15[%277] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %275, %278 {alignment = 1 : i64} : i32, !llvm.ptr
    %279 = llvm.load %6 : !llvm.ptr -> i32
    %c16_i64_95 = arith.constant 16 : i64
    %280 = arith.extui %279 : i32 to i64
    %281 = arith.addi %280, %c16_i64_95 : i64
    %282 = llvm.getelementptr %15[%281] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %283 = llvm.load volatile %282 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %283, %7 : i32, !llvm.ptr
    %c0_i32_96 = arith.constant 0 : i32
    %284 = arith.cmpi eq, %283, %c0_i32_96 : i32
    %285 = arith.extui %284 : i1 to i32
    %c0_i32_97 = arith.constant 0 : i32
    %286 = arith.cmpi ne, %285, %c0_i32_97 : i32
    cf.cond_br %286, ^bb63, ^bb64
  ^bb34:  // 2 preds: ^bb31, ^bb37
    %287 = llvm.load %0 : !llvm.ptr -> i32
    %288 = llvm.load %2 : !llvm.ptr -> i32
    %c31_i32_98 = arith.constant 31 : i32
    %289 = arith.cmpi ule, %288, %c31_i32_98 : i32
    %290 = scf.if %289 -> (i32) {
      %2086 = arith.shli %287, %288 : i32
      scf.yield %2086 : i32
    } else {
      %c0_i32_749 = arith.constant 0 : i32
      scf.yield %c0_i32_749 : i32
    }
    %c2_i32_99 = arith.constant 2 : i32
    %291 = llvm.load %2 : !llvm.ptr -> i32
    %c31_i32_100 = arith.constant 31 : i32
    %292 = arith.cmpi ule, %291, %c31_i32_100 : i32
    %293 = scf.if %292 -> (i32) {
      %2086 = arith.shli %c2_i32_99, %291 : i32
      scf.yield %2086 : i32
    } else {
      %c0_i32_749 = arith.constant 0 : i32
      scf.yield %c0_i32_749 : i32
    }
    llvm.store %293, %0 : i32, !llvm.ptr
    %c0_i32_101 = arith.constant 0 : i32
    %294 = llvm.load %0 : !llvm.ptr -> i32
    %295 = arith.subi %c0_i32_101, %294 : i32
    %296 = arith.ori %293, %295 : i32
    %297 = arith.andi %290, %296 : i32
    %false_102 = arith.constant false
    %298 = llvm.call_intrinsic "llvm.cttz.i32"(%297, %false_102) : (i32, i1) -> i32
    llvm.store %298, %2 : i32, !llvm.ptr
    %c3_i32_103 = arith.constant 3 : i32
    %c31_i32_104 = arith.constant 31 : i32
    %299 = arith.cmpi ule, %c3_i32_103, %c31_i32_104 : i32
    %300 = scf.if %299 -> (i32) {
      %2086 = arith.shli %298, %c3_i32_103 : i32
      scf.yield %2086 : i32
    } else {
      %c0_i32_749 = arith.constant 0 : i32
      scf.yield %c0_i32_749 : i32
    }
    llvm.store %300, %0 : i32, !llvm.ptr
    %c1049704_i32_105 = arith.constant 1049704 : i32
    %301 = arith.addi %300, %c1049704_i32_105 : i32
    llvm.store %301, %7 : i32, !llvm.ptr
    %302 = llvm.load %0 : !llvm.ptr -> i32
    %c1049712_i32_106 = arith.constant 1049712 : i32
    %303 = arith.addi %302, %c1049712_i32_106 : i32
    %c0_i64_107 = arith.constant 0 : i64
    %304 = arith.extui %303 : i32 to i64
    %305 = arith.addi %304, %c0_i64_107 : i64
    %306 = llvm.getelementptr %15[%305] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %307 = llvm.load volatile %306 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %307, %0 : i32, !llvm.ptr
    %c8_i64_108 = arith.constant 8 : i64
    %308 = arith.extui %307 : i32 to i64
    %309 = arith.addi %308, %c8_i64_108 : i64
    %310 = llvm.getelementptr %15[%309] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %311 = llvm.load volatile %310 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %311, %8 : i32, !llvm.ptr
    %312 = arith.cmpi eq, %301, %311 : i32
    %313 = arith.extui %312 : i1 to i32
    %c0_i32_109 = arith.constant 0 : i32
    %314 = arith.cmpi ne, %313, %c0_i32_109 : i32
    cf.cond_br %314, ^bb56, ^bb57
  ^bb35:  // pred: ^bb31
    %c0_i32_110 = arith.constant 0 : i32
    %c1049972_i64_111 = arith.constant 1049972 : i64
    %315 = arith.extui %c0_i32_110 : i32 to i64
    %316 = arith.addi %315, %c1049972_i64_111 : i64
    %317 = llvm.getelementptr %15[%316] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %318 = llvm.load volatile %317 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %318, %0 : i32, !llvm.ptr
    %c0_i32_112 = arith.constant 0 : i32
    %319 = arith.cmpi eq, %318, %c0_i32_112 : i32
    %320 = arith.extui %319 : i1 to i32
    %c0_i32_113 = arith.constant 0 : i32
    %321 = arith.cmpi ne, %320, %c0_i32_113 : i32
    cf.cond_br %321, ^bb6, ^bb36
  ^bb36:  // pred: ^bb35
    %322 = llvm.load %0 : !llvm.ptr -> i32
    %false_114 = arith.constant false
    %323 = llvm.call_intrinsic "llvm.cttz.i32"(%322, %false_114) : (i32, i1) -> i32
    %c2_i32_115 = arith.constant 2 : i32
    %c31_i32_116 = arith.constant 31 : i32
    %324 = arith.cmpi ule, %c2_i32_115, %c31_i32_116 : i32
    %325 = scf.if %324 -> (i32) {
      %2086 = arith.shli %323, %c2_i32_115 : i32
      scf.yield %2086 : i32
    } else {
      %c0_i32_749 = arith.constant 0 : i32
      scf.yield %c0_i32_749 : i32
    }
    %c1049560_i32_117 = arith.constant 1049560 : i32
    %326 = arith.addi %325, %c1049560_i32_117 : i32
    %c0_i64_118 = arith.constant 0 : i64
    %327 = arith.extui %326 : i32 to i64
    %328 = arith.addi %327, %c0_i64_118 : i64
    %329 = llvm.getelementptr %15[%328] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %330 = llvm.load volatile %329 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %330, %7 : i32, !llvm.ptr
    %c4_i64_119 = arith.constant 4 : i64
    %331 = arith.extui %330 : i32 to i64
    %332 = arith.addi %331, %c4_i64_119 : i64
    %333 = llvm.getelementptr %15[%332] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %334 = llvm.load volatile %333 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-8_i32_120 = arith.constant -8 : i32
    %335 = arith.andi %334, %c-8_i32_120 : i32
    %336 = llvm.load %3 : !llvm.ptr -> i32
    %337 = arith.subi %335, %336 : i32
    llvm.store %337, %2 : i32, !llvm.ptr
    %338 = llvm.load %7 : !llvm.ptr -> i32
    llvm.store %338, %6 : i32, !llvm.ptr
    cf.br ^bb38
  ^bb37:  // no predecessors
    cf.br ^bb34
  ^bb38:  // 2 preds: ^bb36, ^bb39
    %339 = llvm.load %7 : !llvm.ptr -> i32
    %c16_i64_121 = arith.constant 16 : i64
    %340 = arith.extui %339 : i32 to i64
    %341 = arith.addi %340, %c16_i64_121 : i64
    %342 = llvm.getelementptr %15[%341] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %343 = llvm.load volatile %342 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %343, %0 : i32, !llvm.ptr
    %c0_i32_122 = arith.constant 0 : i32
    %344 = arith.cmpi ne, %343, %c0_i32_122 : i32
    cf.cond_br %344, ^bb39, ^bb40
  ^bb39:  // 2 preds: ^bb38, ^bb40
    %345 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_123 = arith.constant 4 : i64
    %346 = arith.extui %345 : i32 to i64
    %347 = arith.addi %346, %c4_i64_123 : i64
    %348 = llvm.getelementptr %15[%347] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %349 = llvm.load volatile %348 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-8_i32_124 = arith.constant -8 : i32
    %350 = arith.andi %349, %c-8_i32_124 : i32
    %351 = llvm.load %3 : !llvm.ptr -> i32
    %352 = arith.subi %350, %351 : i32
    llvm.store %352, %7 : i32, !llvm.ptr
    %353 = llvm.load %2 : !llvm.ptr -> i32
    %354 = llvm.load %7 : !llvm.ptr -> i32
    %355 = llvm.load %2 : !llvm.ptr -> i32
    %356 = arith.cmpi ult, %354, %355 : i32
    %357 = arith.extui %356 : i1 to i32
    llvm.store %357, %7 : i32, !llvm.ptr
    %c0_i32_125 = arith.constant 0 : i32
    %358 = arith.cmpi ne, %357, %c0_i32_125 : i32
    %359 = arith.select %358, %352, %353 : i32
    llvm.store %359, %2 : i32, !llvm.ptr
    %360 = llvm.load %0 : !llvm.ptr -> i32
    %361 = llvm.load %6 : !llvm.ptr -> i32
    %362 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i32_126 = arith.constant 0 : i32
    %363 = arith.cmpi ne, %362, %c0_i32_126 : i32
    %364 = arith.select %363, %360, %361 : i32
    llvm.store %364, %6 : i32, !llvm.ptr
    %365 = llvm.load %0 : !llvm.ptr -> i32
    llvm.store %365, %7 : i32, !llvm.ptr
    cf.br ^bb38
  ^bb40:  // pred: ^bb38
    %366 = llvm.load %7 : !llvm.ptr -> i32
    %c20_i64_127 = arith.constant 20 : i64
    %367 = arith.extui %366 : i32 to i64
    %368 = arith.addi %367, %c20_i64_127 : i64
    %369 = llvm.getelementptr %15[%368] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %370 = llvm.load volatile %369 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %370, %0 : i32, !llvm.ptr
    %c0_i32_128 = arith.constant 0 : i32
    %371 = arith.cmpi ne, %370, %c0_i32_128 : i32
    cf.cond_br %371, ^bb39, ^bb41
  ^bb41:  // pred: ^bb40
    %372 = llvm.load %6 : !llvm.ptr -> i32
    %c24_i64_129 = arith.constant 24 : i64
    %373 = arith.extui %372 : i32 to i64
    %374 = arith.addi %373, %c24_i64_129 : i64
    %375 = llvm.getelementptr %15[%374] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %376 = llvm.load volatile %375 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %376, %5 : i32, !llvm.ptr
    %377 = llvm.load %6 : !llvm.ptr -> i32
    %c12_i64_130 = arith.constant 12 : i64
    %378 = arith.extui %377 : i32 to i64
    %379 = arith.addi %378, %c12_i64_130 : i64
    %380 = llvm.getelementptr %15[%379] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %381 = llvm.load volatile %380 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %381, %0 : i32, !llvm.ptr
    %382 = llvm.load %6 : !llvm.ptr -> i32
    %383 = arith.cmpi eq, %381, %382 : i32
    %384 = arith.extui %383 : i1 to i32
    %c0_i32_131 = arith.constant 0 : i32
    %385 = arith.cmpi eq, %384, %c0_i32_131 : i32
    %386 = arith.extui %385 : i1 to i32
    %c0_i32_132 = arith.constant 0 : i32
    %387 = arith.cmpi ne, %386, %c0_i32_132 : i32
    cf.cond_br %387, ^bb44, ^bb45
  ^bb42:  // 3 preds: ^bb44, ^bb46, ^bb47
    %388 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i32_133 = arith.constant 0 : i32
    %389 = arith.cmpi eq, %388, %c0_i32_133 : i32
    %390 = arith.extui %389 : i1 to i32
    %c0_i32_134 = arith.constant 0 : i32
    %391 = arith.cmpi ne, %390, %c0_i32_134 : i32
    cf.cond_br %391, ^bb32, ^bb50
  ^bb43:  // pred: ^bb45
    %392 = llvm.load %6 : !llvm.ptr -> i32
    %c20_i32 = arith.constant 20 : i32
    %393 = arith.addi %392, %c20_i32 : i32
    %394 = llvm.load %6 : !llvm.ptr -> i32
    %c16_i32_135 = arith.constant 16 : i32
    %395 = arith.addi %394, %c16_i32_135 : i32
    %396 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_136 = arith.constant 0 : i32
    %397 = arith.cmpi ne, %396, %c0_i32_136 : i32
    %398 = arith.select %397, %393, %395 : i32
    llvm.store %398, %8 : i32, !llvm.ptr
    cf.br ^bb48
  ^bb44:  // pred: ^bb41
    %399 = llvm.load %6 : !llvm.ptr -> i32
    %c8_i64_137 = arith.constant 8 : i64
    %400 = arith.extui %399 : i32 to i64
    %401 = arith.addi %400, %c8_i64_137 : i64
    %402 = llvm.getelementptr %15[%401] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %403 = llvm.load volatile %402 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %403, %7 : i32, !llvm.ptr
    %404 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64_138 = arith.constant 12 : i64
    %405 = arith.extui %403 : i32 to i64
    %406 = arith.addi %405, %c12_i64_138 : i64
    %407 = llvm.getelementptr %15[%406] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %404, %407 {alignment = 1 : i64} : i32, !llvm.ptr
    %408 = llvm.load %0 : !llvm.ptr -> i32
    %409 = llvm.load %7 : !llvm.ptr -> i32
    %c8_i64_139 = arith.constant 8 : i64
    %410 = arith.extui %408 : i32 to i64
    %411 = arith.addi %410, %c8_i64_139 : i64
    %412 = llvm.getelementptr %15[%411] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %409, %412 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb42
  ^bb45:  // pred: ^bb41
    %413 = llvm.load %6 : !llvm.ptr -> i32
    %c20_i32_140 = arith.constant 20 : i32
    %c16_i32_141 = arith.constant 16 : i32
    %414 = llvm.load %6 : !llvm.ptr -> i32
    %c20_i64_142 = arith.constant 20 : i64
    %415 = arith.extui %414 : i32 to i64
    %416 = arith.addi %415, %c20_i64_142 : i64
    %417 = llvm.getelementptr %15[%416] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %418 = llvm.load volatile %417 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %418, %0 : i32, !llvm.ptr
    %c0_i32_143 = arith.constant 0 : i32
    %419 = arith.cmpi ne, %418, %c0_i32_143 : i32
    %420 = arith.select %419, %c20_i32_140, %c16_i32_141 : i32
    %421 = arith.addi %413, %420 : i32
    %c0_i64_144 = arith.constant 0 : i64
    %422 = arith.extui %421 : i32 to i64
    %423 = arith.addi %422, %c0_i64_144 : i64
    %424 = llvm.getelementptr %15[%423] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %425 = llvm.load volatile %424 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %425, %7 : i32, !llvm.ptr
    %c0_i32_145 = arith.constant 0 : i32
    %426 = arith.cmpi ne, %425, %c0_i32_145 : i32
    cf.cond_br %426, ^bb43, ^bb46
  ^bb46:  // pred: ^bb45
    %c0_i32_146 = arith.constant 0 : i32
    llvm.store %c0_i32_146, %0 : i32, !llvm.ptr
    cf.br ^bb42
  ^bb47:  // pred: ^bb49
    %427 = llvm.load %9 : !llvm.ptr -> i32
    %c0_i32_147 = arith.constant 0 : i32
    %c0_i64_148 = arith.constant 0 : i64
    %428 = arith.extui %427 : i32 to i64
    %429 = arith.addi %428, %c0_i64_148 : i64
    %430 = llvm.getelementptr %15[%429] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_147, %430 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb42
  ^bb48:  // 2 preds: ^bb43, ^bb48
    %431 = llvm.load %8 : !llvm.ptr -> i32
    llvm.store %431, %9 : i32, !llvm.ptr
    %432 = llvm.load %7 : !llvm.ptr -> i32
    llvm.store %432, %0 : i32, !llvm.ptr
    %c20_i32_149 = arith.constant 20 : i32
    %433 = arith.addi %432, %c20_i32_149 : i32
    %434 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_150 = arith.constant 16 : i32
    %435 = arith.addi %434, %c16_i32_150 : i32
    %436 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64_151 = arith.constant 20 : i64
    %437 = arith.extui %436 : i32 to i64
    %438 = arith.addi %437, %c20_i64_151 : i64
    %439 = llvm.getelementptr %15[%438] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %440 = llvm.load volatile %439 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %440, %7 : i32, !llvm.ptr
    %c0_i32_152 = arith.constant 0 : i32
    %441 = arith.cmpi ne, %440, %c0_i32_152 : i32
    %442 = arith.select %441, %433, %435 : i32
    llvm.store %442, %8 : i32, !llvm.ptr
    %443 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i32_153 = arith.constant 20 : i32
    %c16_i32_154 = arith.constant 16 : i32
    %444 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i32_155 = arith.constant 0 : i32
    %445 = arith.cmpi ne, %444, %c0_i32_155 : i32
    %446 = arith.select %445, %c20_i32_153, %c16_i32_154 : i32
    %447 = arith.addi %443, %446 : i32
    %c0_i64_156 = arith.constant 0 : i64
    %448 = arith.extui %447 : i32 to i64
    %449 = arith.addi %448, %c0_i64_156 : i64
    %450 = llvm.getelementptr %15[%449] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %451 = llvm.load volatile %450 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %451, %7 : i32, !llvm.ptr
    %c0_i32_157 = arith.constant 0 : i32
    %452 = arith.cmpi ne, %451, %c0_i32_157 : i32
    cf.cond_br %452, ^bb48, ^bb49
  ^bb49:  // pred: ^bb48
    cf.br ^bb47
  ^bb50:  // pred: ^bb42
    %453 = llvm.load %6 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %454 = arith.extui %453 : i32 to i64
    %455 = arith.addi %454, %c28_i64 : i64
    %456 = llvm.getelementptr %15[%455] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %457 = llvm.load volatile %456 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c2_i32_158 = arith.constant 2 : i32
    %c31_i32_159 = arith.constant 31 : i32
    %458 = arith.cmpi ule, %c2_i32_158, %c31_i32_159 : i32
    %459 = scf.if %458 -> (i32) {
      %2086 = arith.shli %457, %c2_i32_158 : i32
      scf.yield %2086 : i32
    } else {
      %c0_i32_749 = arith.constant 0 : i32
      scf.yield %c0_i32_749 : i32
    }
    %c1049560_i32_160 = arith.constant 1049560 : i32
    %460 = arith.addi %459, %c1049560_i32_160 : i32
    llvm.store %460, %7 : i32, !llvm.ptr
    %c0_i64_161 = arith.constant 0 : i64
    %461 = arith.extui %460 : i32 to i64
    %462 = arith.addi %461, %c0_i64_161 : i64
    %463 = llvm.getelementptr %15[%462] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %464 = llvm.load volatile %463 {alignment = 1 : i64} : !llvm.ptr -> i32
    %465 = llvm.load %6 : !llvm.ptr -> i32
    %466 = arith.cmpi eq, %464, %465 : i32
    %467 = arith.extui %466 : i1 to i32
    %c0_i32_162 = arith.constant 0 : i32
    %468 = arith.cmpi ne, %467, %c0_i32_162 : i32
    cf.cond_br %468, ^bb51, ^bb52
  ^bb51:  // pred: ^bb50
    %469 = llvm.load %7 : !llvm.ptr -> i32
    %470 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_163 = arith.constant 0 : i64
    %471 = arith.extui %469 : i32 to i64
    %472 = arith.addi %471, %c0_i64_163 : i64
    %473 = llvm.getelementptr %15[%472] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %470, %473 {alignment = 1 : i64} : i32, !llvm.ptr
    %474 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_164 = arith.constant 0 : i32
    %475 = arith.cmpi ne, %474, %c0_i32_164 : i32
    cf.cond_br %475, ^bb33, ^bb54
  ^bb52:  // pred: ^bb50
    %476 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32_165 = arith.constant 16 : i32
    %c20_i32_166 = arith.constant 20 : i32
    %477 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i64_167 = arith.constant 16 : i64
    %478 = arith.extui %477 : i32 to i64
    %479 = arith.addi %478, %c16_i64_167 : i64
    %480 = llvm.getelementptr %15[%479] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %481 = llvm.load volatile %480 {alignment = 1 : i64} : !llvm.ptr -> i32
    %482 = llvm.load %6 : !llvm.ptr -> i32
    %483 = arith.cmpi eq, %481, %482 : i32
    %484 = arith.extui %483 : i1 to i32
    %c0_i32_168 = arith.constant 0 : i32
    %485 = arith.cmpi ne, %484, %c0_i32_168 : i32
    %486 = arith.select %485, %c16_i32_165, %c20_i32_166 : i32
    %487 = arith.addi %476, %486 : i32
    %488 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_169 = arith.constant 0 : i64
    %489 = arith.extui %487 : i32 to i64
    %490 = arith.addi %489, %c0_i64_169 : i64
    %491 = llvm.getelementptr %15[%490] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %488, %491 {alignment = 1 : i64} : i32, !llvm.ptr
    %492 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_170 = arith.constant 0 : i32
    %493 = arith.cmpi eq, %492, %c0_i32_170 : i32
    %494 = arith.extui %493 : i1 to i32
    %c0_i32_171 = arith.constant 0 : i32
    %495 = arith.cmpi ne, %494, %c0_i32_171 : i32
    cf.cond_br %495, ^bb32, ^bb53
  ^bb53:  // pred: ^bb52
    cf.br ^bb33
  ^bb54:  // pred: ^bb51
    %c0_i32_172 = arith.constant 0 : i32
    %c0_i32_173 = arith.constant 0 : i32
    %c1049972_i64_174 = arith.constant 1049972 : i64
    %496 = arith.extui %c0_i32_173 : i32 to i64
    %497 = arith.addi %496, %c1049972_i64_174 : i64
    %498 = llvm.getelementptr %15[%497] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %499 = llvm.load volatile %498 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-2_i32_175 = arith.constant -2 : i32
    %500 = llvm.load %6 : !llvm.ptr -> i32
    %c28_i64_176 = arith.constant 28 : i64
    %501 = arith.extui %500 : i32 to i64
    %502 = arith.addi %501, %c28_i64_176 : i64
    %503 = llvm.getelementptr %15[%502] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %504 = llvm.load volatile %503 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c32_i32_177 = arith.constant 32 : i32
    %505 = arith.remui %504, %c32_i32_177 : i32
    %506 = arith.shli %c-2_i32_175, %505 : i32
    %507 = arith.subi %c32_i32_177, %505 : i32
    %508 = arith.shrui %c-2_i32_175, %507 : i32
    %509 = arith.ori %506, %508 : i32
    %510 = arith.andi %499, %509 : i32
    %c1049972_i64_178 = arith.constant 1049972 : i64
    %511 = arith.extui %c0_i32_172 : i32 to i64
    %512 = arith.addi %511, %c1049972_i64_178 : i64
    %513 = llvm.getelementptr %15[%512] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %510, %513 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb32
  ^bb55:  // 2 preds: ^bb56, ^bb57
    %514 = llvm.load %0 : !llvm.ptr -> i32
    %515 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i32_179 = arith.constant 3 : i32
    %516 = arith.ori %515, %c3_i32_179 : i32
    %c4_i64_180 = arith.constant 4 : i64
    %517 = arith.extui %514 : i32 to i64
    %518 = arith.addi %517, %c4_i64_180 : i64
    %519 = llvm.getelementptr %15[%518] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %516, %519 {alignment = 1 : i64} : i32, !llvm.ptr
    %520 = llvm.load %0 : !llvm.ptr -> i32
    %521 = llvm.load %3 : !llvm.ptr -> i32
    %522 = arith.addi %520, %521 : i32
    llvm.store %522, %8 : i32, !llvm.ptr
    %523 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i32_181 = arith.constant 3 : i32
    %c31_i32_182 = arith.constant 31 : i32
    %524 = arith.cmpi ule, %c3_i32_181, %c31_i32_182 : i32
    %525 = scf.if %524 -> (i32) {
      %2086 = arith.shli %523, %c3_i32_181 : i32
      scf.yield %2086 : i32
    } else {
      %c0_i32_749 = arith.constant 0 : i32
      scf.yield %c0_i32_749 : i32
    }
    llvm.store %525, %2 : i32, !llvm.ptr
    %526 = llvm.load %3 : !llvm.ptr -> i32
    %527 = arith.subi %525, %526 : i32
    llvm.store %527, %7 : i32, !llvm.ptr
    %c1_i32_183 = arith.constant 1 : i32
    %528 = arith.ori %527, %c1_i32_183 : i32
    %c4_i64_184 = arith.constant 4 : i64
    %529 = arith.extui %522 : i32 to i64
    %530 = arith.addi %529, %c4_i64_184 : i64
    %531 = llvm.getelementptr %15[%530] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %528, %531 {alignment = 1 : i64} : i32, !llvm.ptr
    %532 = llvm.load %0 : !llvm.ptr -> i32
    %533 = llvm.load %2 : !llvm.ptr -> i32
    %534 = arith.addi %532, %533 : i32
    %535 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_185 = arith.constant 0 : i64
    %536 = arith.extui %534 : i32 to i64
    %537 = arith.addi %536, %c0_i64_185 : i64
    %538 = llvm.getelementptr %15[%537] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %535, %538 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_186 = arith.constant 0 : i32
    %c1049976_i64_187 = arith.constant 1049976 : i64
    %539 = arith.extui %c0_i32_186 : i32 to i64
    %540 = arith.addi %539, %c1049976_i64_187 : i64
    %541 = llvm.getelementptr %15[%540] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %542 = llvm.load volatile %541 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %542, %6 : i32, !llvm.ptr
    %c0_i32_188 = arith.constant 0 : i32
    %543 = arith.cmpi eq, %542, %c0_i32_188 : i32
    %544 = arith.extui %543 : i1 to i32
    %c0_i32_189 = arith.constant 0 : i32
    %545 = arith.cmpi ne, %544, %c0_i32_189 : i32
    cf.cond_br %545, ^bb58, ^bb59
  ^bb56:  // pred: ^bb34
    %c0_i32_190 = arith.constant 0 : i32
    %546 = llvm.load %6 : !llvm.ptr -> i32
    %c-2_i32_191 = arith.constant -2 : i32
    %547 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32_192 = arith.constant 32 : i32
    %548 = arith.remui %547, %c32_i32_192 : i32
    %549 = arith.shli %c-2_i32_191, %548 : i32
    %550 = arith.subi %c32_i32_192, %548 : i32
    %551 = arith.shrui %c-2_i32_191, %550 : i32
    %552 = arith.ori %549, %551 : i32
    %553 = arith.andi %546, %552 : i32
    %c1049968_i64_193 = arith.constant 1049968 : i64
    %554 = arith.extui %c0_i32_190 : i32 to i64
    %555 = arith.addi %554, %c1049968_i64_193 : i64
    %556 = llvm.getelementptr %15[%555] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %553, %556 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb55
  ^bb57:  // pred: ^bb34
    %557 = llvm.load %8 : !llvm.ptr -> i32
    %558 = llvm.load %7 : !llvm.ptr -> i32
    %c12_i64_194 = arith.constant 12 : i64
    %559 = arith.extui %557 : i32 to i64
    %560 = arith.addi %559, %c12_i64_194 : i64
    %561 = llvm.getelementptr %15[%560] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %558, %561 {alignment = 1 : i64} : i32, !llvm.ptr
    %562 = llvm.load %7 : !llvm.ptr -> i32
    %563 = llvm.load %8 : !llvm.ptr -> i32
    %c8_i64_195 = arith.constant 8 : i64
    %564 = arith.extui %562 : i32 to i64
    %565 = arith.addi %564, %c8_i64_195 : i64
    %566 = llvm.getelementptr %15[%565] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %563, %566 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb55
  ^bb58:  // 2 preds: ^bb55, ^bb60
    %567 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_196 = arith.constant 8 : i32
    %568 = arith.addi %567, %c8_i32_196 : i32
    llvm.store %568, %2 : i32, !llvm.ptr
    %c0_i32_197 = arith.constant 0 : i32
    %569 = llvm.load %8 : !llvm.ptr -> i32
    %c1049984_i64 = arith.constant 1049984 : i64
    %570 = arith.extui %c0_i32_197 : i32 to i64
    %571 = arith.addi %570, %c1049984_i64 : i64
    %572 = llvm.getelementptr %15[%571] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %569, %572 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_198 = arith.constant 0 : i32
    %573 = llvm.load %7 : !llvm.ptr -> i32
    %c1049976_i64_199 = arith.constant 1049976 : i64
    %574 = arith.extui %c0_i32_198 : i32 to i64
    %575 = arith.addi %574, %c1049976_i64_199 : i64
    %576 = llvm.getelementptr %15[%575] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %573, %576 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb3
  ^bb59:  // pred: ^bb55
    %577 = llvm.load %6 : !llvm.ptr -> i32
    %c-8_i32_200 = arith.constant -8 : i32
    %578 = arith.andi %577, %c-8_i32_200 : i32
    %c1049704_i32_201 = arith.constant 1049704 : i32
    %579 = arith.addi %578, %c1049704_i32_201 : i32
    llvm.store %579, %2 : i32, !llvm.ptr
    %c0_i32_202 = arith.constant 0 : i32
    %c1049984_i64_203 = arith.constant 1049984 : i64
    %580 = arith.extui %c0_i32_202 : i32 to i64
    %581 = arith.addi %580, %c1049984_i64_203 : i64
    %582 = llvm.getelementptr %15[%581] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %583 = llvm.load volatile %582 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %583, %3 : i32, !llvm.ptr
    %c0_i32_204 = arith.constant 0 : i32
    %c1049968_i64_205 = arith.constant 1049968 : i64
    %584 = arith.extui %c0_i32_204 : i32 to i64
    %585 = arith.addi %584, %c1049968_i64_205 : i64
    %586 = llvm.getelementptr %15[%585] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %587 = llvm.load volatile %586 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %587, %9 : i32, !llvm.ptr
    %c1_i32_206 = arith.constant 1 : i32
    %588 = llvm.load %6 : !llvm.ptr -> i32
    %c3_i32_207 = arith.constant 3 : i32
    %c31_i32_208 = arith.constant 31 : i32
    %589 = arith.cmpi ule, %c3_i32_207, %c31_i32_208 : i32
    %590 = scf.if %589 -> (i32) {
      %2086 = arith.shrui %588, %c3_i32_207 : i32
      scf.yield %2086 : i32
    } else {
      %c0_i32_749 = arith.constant 0 : i32
      scf.yield %c0_i32_749 : i32
    }
    %c31_i32_209 = arith.constant 31 : i32
    %591 = arith.cmpi ule, %590, %c31_i32_209 : i32
    %592 = scf.if %591 -> (i32) {
      %2086 = arith.shli %c1_i32_206, %590 : i32
      scf.yield %2086 : i32
    } else {
      %c0_i32_749 = arith.constant 0 : i32
      scf.yield %c0_i32_749 : i32
    }
    llvm.store %592, %6 : i32, !llvm.ptr
    %593 = arith.andi %587, %592 : i32
    %c0_i32_210 = arith.constant 0 : i32
    %594 = arith.cmpi ne, %593, %c0_i32_210 : i32
    cf.cond_br %594, ^bb61, ^bb62
  ^bb60:  // 2 preds: ^bb61, ^bb62
    %595 = llvm.load %2 : !llvm.ptr -> i32
    %596 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64_211 = arith.constant 8 : i64
    %597 = arith.extui %595 : i32 to i64
    %598 = arith.addi %597, %c8_i64_211 : i64
    %599 = llvm.getelementptr %15[%598] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %596, %599 {alignment = 1 : i64} : i32, !llvm.ptr
    %600 = llvm.load %6 : !llvm.ptr -> i32
    %601 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i64_212 = arith.constant 12 : i64
    %602 = arith.extui %600 : i32 to i64
    %603 = arith.addi %602, %c12_i64_212 : i64
    %604 = llvm.getelementptr %15[%603] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %601, %604 {alignment = 1 : i64} : i32, !llvm.ptr
    %605 = llvm.load %3 : !llvm.ptr -> i32
    %606 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64_213 = arith.constant 12 : i64
    %607 = arith.extui %605 : i32 to i64
    %608 = arith.addi %607, %c12_i64_213 : i64
    %609 = llvm.getelementptr %15[%608] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %606, %609 {alignment = 1 : i64} : i32, !llvm.ptr
    %610 = llvm.load %3 : !llvm.ptr -> i32
    %611 = llvm.load %6 : !llvm.ptr -> i32
    %c8_i64_214 = arith.constant 8 : i64
    %612 = arith.extui %610 : i32 to i64
    %613 = arith.addi %612, %c8_i64_214 : i64
    %614 = llvm.getelementptr %15[%613] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %611, %614 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb58
  ^bb61:  // pred: ^bb59
    %615 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_215 = arith.constant 8 : i64
    %616 = arith.extui %615 : i32 to i64
    %617 = arith.addi %616, %c8_i64_215 : i64
    %618 = llvm.getelementptr %15[%617] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %619 = llvm.load volatile %618 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %619, %6 : i32, !llvm.ptr
    cf.br ^bb60
  ^bb62:  // pred: ^bb59
    %c0_i32_216 = arith.constant 0 : i32
    %620 = llvm.load %9 : !llvm.ptr -> i32
    %621 = llvm.load %6 : !llvm.ptr -> i32
    %622 = arith.ori %620, %621 : i32
    %c1049968_i64_217 = arith.constant 1049968 : i64
    %623 = arith.extui %c0_i32_216 : i32 to i64
    %624 = arith.addi %623, %c1049968_i64_217 : i64
    %625 = llvm.getelementptr %15[%624] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %622, %625 {alignment = 1 : i64} : i32, !llvm.ptr
    %626 = llvm.load %2 : !llvm.ptr -> i32
    llvm.store %626, %6 : i32, !llvm.ptr
    cf.br ^bb60
  ^bb63:  // 2 preds: ^bb33, ^bb64
    %627 = llvm.load %6 : !llvm.ptr -> i32
    %c20_i64_218 = arith.constant 20 : i64
    %628 = arith.extui %627 : i32 to i64
    %629 = arith.addi %628, %c20_i64_218 : i64
    %630 = llvm.getelementptr %15[%629] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %631 = llvm.load volatile %630 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %631, %7 : i32, !llvm.ptr
    %c0_i32_219 = arith.constant 0 : i32
    %632 = arith.cmpi eq, %631, %c0_i32_219 : i32
    %633 = arith.extui %632 : i1 to i32
    %c0_i32_220 = arith.constant 0 : i32
    %634 = arith.cmpi ne, %633, %c0_i32_220 : i32
    cf.cond_br %634, ^bb32, ^bb65
  ^bb64:  // pred: ^bb33
    %635 = llvm.load %0 : !llvm.ptr -> i32
    %636 = llvm.load %7 : !llvm.ptr -> i32
    %c16_i64_221 = arith.constant 16 : i64
    %637 = arith.extui %635 : i32 to i64
    %638 = arith.addi %637, %c16_i64_221 : i64
    %639 = llvm.getelementptr %15[%638] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %636, %639 {alignment = 1 : i64} : i32, !llvm.ptr
    %640 = llvm.load %7 : !llvm.ptr -> i32
    %641 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64_222 = arith.constant 24 : i64
    %642 = arith.extui %640 : i32 to i64
    %643 = arith.addi %642, %c24_i64_222 : i64
    %644 = llvm.getelementptr %15[%643] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %641, %644 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb63
  ^bb65:  // pred: ^bb63
    %645 = llvm.load %0 : !llvm.ptr -> i32
    %646 = llvm.load %7 : !llvm.ptr -> i32
    %c20_i64_223 = arith.constant 20 : i64
    %647 = arith.extui %645 : i32 to i64
    %648 = arith.addi %647, %c20_i64_223 : i64
    %649 = llvm.getelementptr %15[%648] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %646, %649 {alignment = 1 : i64} : i32, !llvm.ptr
    %650 = llvm.load %7 : !llvm.ptr -> i32
    %651 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64_224 = arith.constant 24 : i64
    %652 = arith.extui %650 : i32 to i64
    %653 = arith.addi %652, %c24_i64_224 : i64
    %654 = llvm.getelementptr %15[%653] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %651, %654 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb32
  ^bb66:  // 2 preds: ^bb67, ^bb68
    %655 = llvm.load %6 : !llvm.ptr -> i32
    %c8_i32_225 = arith.constant 8 : i32
    %656 = arith.addi %655, %c8_i32_225 : i32
    llvm.store %656, %2 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb67:  // 2 preds: ^bb69, ^bb71
    %c0_i32_226 = arith.constant 0 : i32
    %657 = llvm.load %3 : !llvm.ptr -> i32
    %c1049984_i64_227 = arith.constant 1049984 : i64
    %658 = arith.extui %c0_i32_226 : i32 to i64
    %659 = arith.addi %658, %c1049984_i64_227 : i64
    %660 = llvm.getelementptr %15[%659] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %657, %660 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_228 = arith.constant 0 : i32
    %661 = llvm.load %2 : !llvm.ptr -> i32
    %c1049976_i64_229 = arith.constant 1049976 : i64
    %662 = arith.extui %c0_i32_228 : i32 to i64
    %663 = arith.addi %662, %c1049976_i64_229 : i64
    %664 = llvm.getelementptr %15[%663] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %661, %664 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb66
  ^bb68:  // pred: ^bb32
    %665 = llvm.load %6 : !llvm.ptr -> i32
    %666 = llvm.load %2 : !llvm.ptr -> i32
    %667 = llvm.load %3 : !llvm.ptr -> i32
    %668 = arith.addi %666, %667 : i32
    llvm.store %668, %0 : i32, !llvm.ptr
    %c3_i32_230 = arith.constant 3 : i32
    %669 = arith.ori %668, %c3_i32_230 : i32
    %c4_i64_231 = arith.constant 4 : i64
    %670 = arith.extui %665 : i32 to i64
    %671 = arith.addi %670, %c4_i64_231 : i64
    %672 = llvm.getelementptr %15[%671] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %669, %672 {alignment = 1 : i64} : i32, !llvm.ptr
    %673 = llvm.load %6 : !llvm.ptr -> i32
    %674 = llvm.load %0 : !llvm.ptr -> i32
    %675 = arith.addi %673, %674 : i32
    llvm.store %675, %0 : i32, !llvm.ptr
    %676 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_232 = arith.constant 4 : i64
    %677 = arith.extui %676 : i32 to i64
    %678 = arith.addi %677, %c4_i64_232 : i64
    %679 = llvm.getelementptr %15[%678] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %680 = llvm.load volatile %679 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_233 = arith.constant 1 : i32
    %681 = arith.ori %680, %c1_i32_233 : i32
    %c4_i64_234 = arith.constant 4 : i64
    %682 = arith.extui %675 : i32 to i64
    %683 = arith.addi %682, %c4_i64_234 : i64
    %684 = llvm.getelementptr %15[%683] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %681, %684 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb66
  ^bb69:  // pred: ^bb32
    %685 = llvm.load %6 : !llvm.ptr -> i32
    %686 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i32_235 = arith.constant 3 : i32
    %687 = arith.ori %686, %c3_i32_235 : i32
    %c4_i64_236 = arith.constant 4 : i64
    %688 = arith.extui %685 : i32 to i64
    %689 = arith.addi %688, %c4_i64_236 : i64
    %690 = llvm.getelementptr %15[%689] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %687, %690 {alignment = 1 : i64} : i32, !llvm.ptr
    %691 = llvm.load %6 : !llvm.ptr -> i32
    %692 = llvm.load %3 : !llvm.ptr -> i32
    %693 = arith.addi %691, %692 : i32
    llvm.store %693, %3 : i32, !llvm.ptr
    %694 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_237 = arith.constant 1 : i32
    %695 = arith.ori %694, %c1_i32_237 : i32
    %c4_i64_238 = arith.constant 4 : i64
    %696 = arith.extui %693 : i32 to i64
    %697 = arith.addi %696, %c4_i64_238 : i64
    %698 = llvm.getelementptr %15[%697] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %695, %698 {alignment = 1 : i64} : i32, !llvm.ptr
    %699 = llvm.load %3 : !llvm.ptr -> i32
    %700 = llvm.load %2 : !llvm.ptr -> i32
    %701 = arith.addi %699, %700 : i32
    %702 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_239 = arith.constant 0 : i64
    %703 = arith.extui %701 : i32 to i64
    %704 = arith.addi %703, %c0_i64_239 : i64
    %705 = llvm.getelementptr %15[%704] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %702, %705 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_240 = arith.constant 0 : i32
    %c1049976_i64_241 = arith.constant 1049976 : i64
    %706 = arith.extui %c0_i32_240 : i32 to i64
    %707 = arith.addi %706, %c1049976_i64_241 : i64
    %708 = llvm.getelementptr %15[%707] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %709 = llvm.load volatile %708 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %709, %8 : i32, !llvm.ptr
    %c0_i32_242 = arith.constant 0 : i32
    %710 = arith.cmpi eq, %709, %c0_i32_242 : i32
    %711 = arith.extui %710 : i1 to i32
    %c0_i32_243 = arith.constant 0 : i32
    %712 = arith.cmpi ne, %711, %c0_i32_243 : i32
    cf.cond_br %712, ^bb67, ^bb70
  ^bb70:  // pred: ^bb69
    %713 = llvm.load %8 : !llvm.ptr -> i32
    %c-8_i32_244 = arith.constant -8 : i32
    %714 = arith.andi %713, %c-8_i32_244 : i32
    %c1049704_i32_245 = arith.constant 1049704 : i32
    %715 = arith.addi %714, %c1049704_i32_245 : i32
    llvm.store %715, %7 : i32, !llvm.ptr
    %c0_i32_246 = arith.constant 0 : i32
    %c1049984_i64_247 = arith.constant 1049984 : i64
    %716 = arith.extui %c0_i32_246 : i32 to i64
    %717 = arith.addi %716, %c1049984_i64_247 : i64
    %718 = llvm.getelementptr %15[%717] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %719 = llvm.load volatile %718 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %719, %0 : i32, !llvm.ptr
    %c0_i32_248 = arith.constant 0 : i32
    %c1049968_i64_249 = arith.constant 1049968 : i64
    %720 = arith.extui %c0_i32_248 : i32 to i64
    %721 = arith.addi %720, %c1049968_i64_249 : i64
    %722 = llvm.getelementptr %15[%721] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %723 = llvm.load volatile %722 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %723, %9 : i32, !llvm.ptr
    %c1_i32_250 = arith.constant 1 : i32
    %724 = llvm.load %8 : !llvm.ptr -> i32
    %c3_i32_251 = arith.constant 3 : i32
    %c31_i32_252 = arith.constant 31 : i32
    %725 = arith.cmpi ule, %c3_i32_251, %c31_i32_252 : i32
    %726 = scf.if %725 -> (i32) {
      %2086 = arith.shrui %724, %c3_i32_251 : i32
      scf.yield %2086 : i32
    } else {
      %c0_i32_749 = arith.constant 0 : i32
      scf.yield %c0_i32_749 : i32
    }
    %c31_i32_253 = arith.constant 31 : i32
    %727 = arith.cmpi ule, %726, %c31_i32_253 : i32
    %728 = scf.if %727 -> (i32) {
      %2086 = arith.shli %c1_i32_250, %726 : i32
      scf.yield %2086 : i32
    } else {
      %c0_i32_749 = arith.constant 0 : i32
      scf.yield %c0_i32_749 : i32
    }
    llvm.store %728, %8 : i32, !llvm.ptr
    %729 = arith.andi %723, %728 : i32
    %c0_i32_254 = arith.constant 0 : i32
    %730 = arith.cmpi ne, %729, %c0_i32_254 : i32
    cf.cond_br %730, ^bb72, ^bb73
  ^bb71:  // 2 preds: ^bb72, ^bb73
    %731 = llvm.load %7 : !llvm.ptr -> i32
    %732 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_255 = arith.constant 8 : i64
    %733 = arith.extui %731 : i32 to i64
    %734 = arith.addi %733, %c8_i64_255 : i64
    %735 = llvm.getelementptr %15[%734] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %732, %735 {alignment = 1 : i64} : i32, !llvm.ptr
    %736 = llvm.load %8 : !llvm.ptr -> i32
    %737 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64_256 = arith.constant 12 : i64
    %738 = arith.extui %736 : i32 to i64
    %739 = arith.addi %738, %c12_i64_256 : i64
    %740 = llvm.getelementptr %15[%739] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %737, %740 {alignment = 1 : i64} : i32, !llvm.ptr
    %741 = llvm.load %0 : !llvm.ptr -> i32
    %742 = llvm.load %7 : !llvm.ptr -> i32
    %c12_i64_257 = arith.constant 12 : i64
    %743 = arith.extui %741 : i32 to i64
    %744 = arith.addi %743, %c12_i64_257 : i64
    %745 = llvm.getelementptr %15[%744] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %742, %745 {alignment = 1 : i64} : i32, !llvm.ptr
    %746 = llvm.load %0 : !llvm.ptr -> i32
    %747 = llvm.load %8 : !llvm.ptr -> i32
    %c8_i64_258 = arith.constant 8 : i64
    %748 = arith.extui %746 : i32 to i64
    %749 = arith.addi %748, %c8_i64_258 : i64
    %750 = llvm.getelementptr %15[%749] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %747, %750 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb67
  ^bb72:  // pred: ^bb70
    %751 = llvm.load %7 : !llvm.ptr -> i32
    %c8_i64_259 = arith.constant 8 : i64
    %752 = arith.extui %751 : i32 to i64
    %753 = arith.addi %752, %c8_i64_259 : i64
    %754 = llvm.getelementptr %15[%753] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %755 = llvm.load volatile %754 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %755, %8 : i32, !llvm.ptr
    cf.br ^bb71
  ^bb73:  // pred: ^bb70
    %c0_i32_260 = arith.constant 0 : i32
    %756 = llvm.load %9 : !llvm.ptr -> i32
    %757 = llvm.load %8 : !llvm.ptr -> i32
    %758 = arith.ori %756, %757 : i32
    %c1049968_i64_261 = arith.constant 1049968 : i64
    %759 = arith.extui %c0_i32_260 : i32 to i64
    %760 = arith.addi %759, %c1049968_i64_261 : i64
    %761 = llvm.getelementptr %15[%760] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %758, %761 {alignment = 1 : i64} : i32, !llvm.ptr
    %762 = llvm.load %7 : !llvm.ptr -> i32
    llvm.store %762, %8 : i32, !llvm.ptr
    cf.br ^bb71
  ^bb74:  // 2 preds: ^bb9, ^bb76
    %763 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_262 = arith.constant 0 : i32
    %764 = arith.cmpi eq, %763, %c0_i32_262 : i32
    %765 = arith.extui %764 : i1 to i32
    %c0_i32_263 = arith.constant 0 : i32
    %766 = arith.cmpi ne, %765, %c0_i32_263 : i32
    cf.cond_br %766, ^bb7, ^bb77
  ^bb75:  // pred: ^bb9
    %c0_i32_264 = arith.constant 0 : i32
    llvm.store %c0_i32_264, %7 : i32, !llvm.ptr
    %c2_i32_265 = arith.constant 2 : i32
    %767 = llvm.load %5 : !llvm.ptr -> i32
    %c31_i32_266 = arith.constant 31 : i32
    %768 = arith.cmpi ule, %767, %c31_i32_266 : i32
    %769 = scf.if %768 -> (i32) {
      %2086 = arith.shli %c2_i32_265, %767 : i32
      scf.yield %2086 : i32
    } else {
      %c0_i32_749 = arith.constant 0 : i32
      scf.yield %c0_i32_749 : i32
    }
    llvm.store %769, %0 : i32, !llvm.ptr
    %c0_i32_267 = arith.constant 0 : i32
    %770 = llvm.load %0 : !llvm.ptr -> i32
    %771 = arith.subi %c0_i32_267, %770 : i32
    %772 = arith.ori %769, %771 : i32
    %773 = llvm.load %4 : !llvm.ptr -> i32
    %774 = arith.andi %772, %773 : i32
    llvm.store %774, %0 : i32, !llvm.ptr
    %c0_i32_268 = arith.constant 0 : i32
    %775 = arith.cmpi eq, %774, %c0_i32_268 : i32
    %776 = arith.extui %775 : i1 to i32
    %c0_i32_269 = arith.constant 0 : i32
    %777 = arith.cmpi ne, %776, %c0_i32_269 : i32
    cf.cond_br %777, ^bb6, ^bb76
  ^bb76:  // pred: ^bb75
    %778 = llvm.load %0 : !llvm.ptr -> i32
    %false_270 = arith.constant false
    %779 = llvm.call_intrinsic "llvm.cttz.i32"(%778, %false_270) : (i32, i1) -> i32
    %c2_i32_271 = arith.constant 2 : i32
    %c31_i32_272 = arith.constant 31 : i32
    %780 = arith.cmpi ule, %c2_i32_271, %c31_i32_272 : i32
    %781 = scf.if %780 -> (i32) {
      %2086 = arith.shli %779, %c2_i32_271 : i32
      scf.yield %2086 : i32
    } else {
      %c0_i32_749 = arith.constant 0 : i32
      scf.yield %c0_i32_749 : i32
    }
    %c1049560_i32_273 = arith.constant 1049560 : i32
    %782 = arith.addi %781, %c1049560_i32_273 : i32
    %c0_i64_274 = arith.constant 0 : i64
    %783 = arith.extui %782 : i32 to i64
    %784 = arith.addi %783, %c0_i64_274 : i64
    %785 = llvm.getelementptr %15[%784] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %786 = llvm.load volatile %785 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %786, %0 : i32, !llvm.ptr
    cf.br ^bb74
  ^bb77:  // pred: ^bb74
    cf.br ^bb8
  ^bb78:  // pred: ^bb82
    cf.br ^bb7
  ^bb79:  // 2 preds: ^bb8, ^bb80
    %787 = llvm.load %0 : !llvm.ptr -> i32
    %788 = llvm.load %7 : !llvm.ptr -> i32
    %789 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_275 = arith.constant 4 : i64
    %790 = arith.extui %789 : i32 to i64
    %791 = arith.addi %790, %c4_i64_275 : i64
    %792 = llvm.getelementptr %15[%791] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %793 = llvm.load volatile %792 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-8_i32_276 = arith.constant -8 : i32
    %794 = arith.andi %793, %c-8_i32_276 : i32
    llvm.store %794, %6 : i32, !llvm.ptr
    %795 = llvm.load %3 : !llvm.ptr -> i32
    %796 = arith.subi %794, %795 : i32
    llvm.store %796, %9 : i32, !llvm.ptr
    %797 = llvm.load %2 : !llvm.ptr -> i32
    %798 = arith.cmpi ult, %796, %797 : i32
    %799 = arith.extui %798 : i1 to i32
    llvm.store %799, %5 : i32, !llvm.ptr
    %c0_i32_277 = arith.constant 0 : i32
    %800 = arith.cmpi ne, %799, %c0_i32_277 : i32
    %801 = arith.select %800, %787, %788 : i32
    llvm.store %801, %4 : i32, !llvm.ptr
    %802 = llvm.load %6 : !llvm.ptr -> i32
    %803 = llvm.load %3 : !llvm.ptr -> i32
    %804 = arith.cmpi ult, %802, %803 : i32
    %805 = arith.extui %804 : i1 to i32
    llvm.store %805, %8 : i32, !llvm.ptr
    %806 = llvm.load %9 : !llvm.ptr -> i32
    %807 = llvm.load %2 : !llvm.ptr -> i32
    %808 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i32_278 = arith.constant 0 : i32
    %809 = arith.cmpi ne, %808, %c0_i32_278 : i32
    %810 = arith.select %809, %806, %807 : i32
    llvm.store %810, %9 : i32, !llvm.ptr
    %811 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i64_279 = arith.constant 16 : i64
    %812 = arith.extui %811 : i32 to i64
    %813 = arith.addi %812, %c16_i64_279 : i64
    %814 = llvm.getelementptr %15[%813] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %815 = llvm.load volatile %814 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %815, %6 : i32, !llvm.ptr
    %c0_i32_280 = arith.constant 0 : i32
    %816 = arith.cmpi ne, %815, %c0_i32_280 : i32
    cf.cond_br %816, ^bb80, ^bb81
  ^bb80:  // 2 preds: ^bb79, ^bb81
    %817 = llvm.load %7 : !llvm.ptr -> i32
    %818 = llvm.load %4 : !llvm.ptr -> i32
    %819 = llvm.load %8 : !llvm.ptr -> i32
    %c0_i32_281 = arith.constant 0 : i32
    %820 = arith.cmpi ne, %819, %c0_i32_281 : i32
    %821 = arith.select %820, %817, %818 : i32
    llvm.store %821, %7 : i32, !llvm.ptr
    %822 = llvm.load %2 : !llvm.ptr -> i32
    %823 = llvm.load %9 : !llvm.ptr -> i32
    %824 = llvm.load %8 : !llvm.ptr -> i32
    %c0_i32_282 = arith.constant 0 : i32
    %825 = arith.cmpi ne, %824, %c0_i32_282 : i32
    %826 = arith.select %825, %822, %823 : i32
    llvm.store %826, %2 : i32, !llvm.ptr
    %827 = llvm.load %6 : !llvm.ptr -> i32
    llvm.store %827, %0 : i32, !llvm.ptr
    %828 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i32_283 = arith.constant 0 : i32
    %829 = arith.cmpi ne, %828, %c0_i32_283 : i32
    cf.cond_br %829, ^bb79, ^bb82
  ^bb81:  // pred: ^bb79
    %830 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64_284 = arith.constant 20 : i64
    %831 = arith.extui %830 : i32 to i64
    %832 = arith.addi %831, %c20_i64_284 : i64
    %833 = llvm.getelementptr %15[%832] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %834 = llvm.load volatile %833 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %834, %6 : i32, !llvm.ptr
    cf.br ^bb80
  ^bb82:  // pred: ^bb80
    cf.br ^bb78
  ^bb83:  // pred: ^bb7
    %c0_i32_285 = arith.constant 0 : i32
    %c1049976_i64_286 = arith.constant 1049976 : i64
    %835 = arith.extui %c0_i32_285 : i32 to i64
    %836 = arith.addi %835, %c1049976_i64_286 : i64
    %837 = llvm.getelementptr %15[%836] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %838 = llvm.load volatile %837 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %838, %0 : i32, !llvm.ptr
    %839 = llvm.load %3 : !llvm.ptr -> i32
    %840 = arith.cmpi ult, %838, %839 : i32
    %841 = arith.extui %840 : i1 to i32
    %c0_i32_287 = arith.constant 0 : i32
    %842 = arith.cmpi ne, %841, %c0_i32_287 : i32
    cf.cond_br %842, ^bb84, ^bb85
  ^bb84:  // 2 preds: ^bb83, ^bb86
    %843 = llvm.load %7 : !llvm.ptr -> i32
    %c24_i64_288 = arith.constant 24 : i64
    %844 = arith.extui %843 : i32 to i64
    %845 = arith.addi %844, %c24_i64_288 : i64
    %846 = llvm.getelementptr %15[%845] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %847 = llvm.load volatile %846 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %847, %5 : i32, !llvm.ptr
    %848 = llvm.load %7 : !llvm.ptr -> i32
    %c12_i64_289 = arith.constant 12 : i64
    %849 = arith.extui %848 : i32 to i64
    %850 = arith.addi %849, %c12_i64_289 : i64
    %851 = llvm.getelementptr %15[%850] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %852 = llvm.load volatile %851 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %852, %0 : i32, !llvm.ptr
    %853 = llvm.load %7 : !llvm.ptr -> i32
    %854 = arith.cmpi eq, %852, %853 : i32
    %855 = arith.extui %854 : i1 to i32
    %c0_i32_290 = arith.constant 0 : i32
    %856 = arith.cmpi eq, %855, %c0_i32_290 : i32
    %857 = arith.extui %856 : i1 to i32
    %c0_i32_291 = arith.constant 0 : i32
    %858 = arith.cmpi ne, %857, %c0_i32_291 : i32
    cf.cond_br %858, ^bb89, ^bb90
  ^bb85:  // pred: ^bb83
    %859 = llvm.load %2 : !llvm.ptr -> i32
    %860 = llvm.load %0 : !llvm.ptr -> i32
    %861 = llvm.load %3 : !llvm.ptr -> i32
    %862 = arith.subi %860, %861 : i32
    %863 = arith.cmpi uge, %859, %862 : i32
    %864 = arith.extui %863 : i1 to i32
    %c0_i32_292 = arith.constant 0 : i32
    %865 = arith.cmpi ne, %864, %c0_i32_292 : i32
    cf.cond_br %865, ^bb6, ^bb86
  ^bb86:  // pred: ^bb85
    cf.br ^bb84
  ^bb87:  // 3 preds: ^bb89, ^bb91, ^bb92
    %866 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i32_293 = arith.constant 0 : i32
    %867 = arith.cmpi eq, %866, %c0_i32_293 : i32
    %868 = arith.extui %867 : i1 to i32
    %c0_i32_294 = arith.constant 0 : i32
    %869 = arith.cmpi ne, %868, %c0_i32_294 : i32
    cf.cond_br %869, ^bb4, ^bb95
  ^bb88:  // pred: ^bb90
    %870 = llvm.load %7 : !llvm.ptr -> i32
    %c20_i32_295 = arith.constant 20 : i32
    %871 = arith.addi %870, %c20_i32_295 : i32
    %872 = llvm.load %7 : !llvm.ptr -> i32
    %c16_i32_296 = arith.constant 16 : i32
    %873 = arith.addi %872, %c16_i32_296 : i32
    %874 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_297 = arith.constant 0 : i32
    %875 = arith.cmpi ne, %874, %c0_i32_297 : i32
    %876 = arith.select %875, %871, %873 : i32
    llvm.store %876, %8 : i32, !llvm.ptr
    cf.br ^bb93
  ^bb89:  // pred: ^bb84
    %877 = llvm.load %7 : !llvm.ptr -> i32
    %c8_i64_298 = arith.constant 8 : i64
    %878 = arith.extui %877 : i32 to i64
    %879 = arith.addi %878, %c8_i64_298 : i64
    %880 = llvm.getelementptr %15[%879] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %881 = llvm.load volatile %880 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %881, %6 : i32, !llvm.ptr
    %882 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64_299 = arith.constant 12 : i64
    %883 = arith.extui %881 : i32 to i64
    %884 = arith.addi %883, %c12_i64_299 : i64
    %885 = llvm.getelementptr %15[%884] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %882, %885 {alignment = 1 : i64} : i32, !llvm.ptr
    %886 = llvm.load %0 : !llvm.ptr -> i32
    %887 = llvm.load %6 : !llvm.ptr -> i32
    %c8_i64_300 = arith.constant 8 : i64
    %888 = arith.extui %886 : i32 to i64
    %889 = arith.addi %888, %c8_i64_300 : i64
    %890 = llvm.getelementptr %15[%889] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %887, %890 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb87
  ^bb90:  // pred: ^bb84
    %891 = llvm.load %7 : !llvm.ptr -> i32
    %c20_i32_301 = arith.constant 20 : i32
    %c16_i32_302 = arith.constant 16 : i32
    %892 = llvm.load %7 : !llvm.ptr -> i32
    %c20_i64_303 = arith.constant 20 : i64
    %893 = arith.extui %892 : i32 to i64
    %894 = arith.addi %893, %c20_i64_303 : i64
    %895 = llvm.getelementptr %15[%894] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %896 = llvm.load volatile %895 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %896, %0 : i32, !llvm.ptr
    %c0_i32_304 = arith.constant 0 : i32
    %897 = arith.cmpi ne, %896, %c0_i32_304 : i32
    %898 = arith.select %897, %c20_i32_301, %c16_i32_302 : i32
    %899 = arith.addi %891, %898 : i32
    %c0_i64_305 = arith.constant 0 : i64
    %900 = arith.extui %899 : i32 to i64
    %901 = arith.addi %900, %c0_i64_305 : i64
    %902 = llvm.getelementptr %15[%901] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %903 = llvm.load volatile %902 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %903, %6 : i32, !llvm.ptr
    %c0_i32_306 = arith.constant 0 : i32
    %904 = arith.cmpi ne, %903, %c0_i32_306 : i32
    cf.cond_br %904, ^bb88, ^bb91
  ^bb91:  // pred: ^bb90
    %c0_i32_307 = arith.constant 0 : i32
    llvm.store %c0_i32_307, %0 : i32, !llvm.ptr
    cf.br ^bb87
  ^bb92:  // pred: ^bb94
    %905 = llvm.load %9 : !llvm.ptr -> i32
    %c0_i32_308 = arith.constant 0 : i32
    %c0_i64_309 = arith.constant 0 : i64
    %906 = arith.extui %905 : i32 to i64
    %907 = arith.addi %906, %c0_i64_309 : i64
    %908 = llvm.getelementptr %15[%907] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_308, %908 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb87
  ^bb93:  // 2 preds: ^bb88, ^bb93
    %909 = llvm.load %8 : !llvm.ptr -> i32
    llvm.store %909, %9 : i32, !llvm.ptr
    %910 = llvm.load %6 : !llvm.ptr -> i32
    llvm.store %910, %0 : i32, !llvm.ptr
    %c20_i32_310 = arith.constant 20 : i32
    %911 = arith.addi %910, %c20_i32_310 : i32
    %912 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_311 = arith.constant 16 : i32
    %913 = arith.addi %912, %c16_i32_311 : i32
    %914 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64_312 = arith.constant 20 : i64
    %915 = arith.extui %914 : i32 to i64
    %916 = arith.addi %915, %c20_i64_312 : i64
    %917 = llvm.getelementptr %15[%916] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %918 = llvm.load volatile %917 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %918, %6 : i32, !llvm.ptr
    %c0_i32_313 = arith.constant 0 : i32
    %919 = arith.cmpi ne, %918, %c0_i32_313 : i32
    %920 = arith.select %919, %911, %913 : i32
    llvm.store %920, %8 : i32, !llvm.ptr
    %921 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i32_314 = arith.constant 20 : i32
    %c16_i32_315 = arith.constant 16 : i32
    %922 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i32_316 = arith.constant 0 : i32
    %923 = arith.cmpi ne, %922, %c0_i32_316 : i32
    %924 = arith.select %923, %c20_i32_314, %c16_i32_315 : i32
    %925 = arith.addi %921, %924 : i32
    %c0_i64_317 = arith.constant 0 : i64
    %926 = arith.extui %925 : i32 to i64
    %927 = arith.addi %926, %c0_i64_317 : i64
    %928 = llvm.getelementptr %15[%927] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %929 = llvm.load volatile %928 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %929, %6 : i32, !llvm.ptr
    %c0_i32_318 = arith.constant 0 : i32
    %930 = arith.cmpi ne, %929, %c0_i32_318 : i32
    cf.cond_br %930, ^bb93, ^bb94
  ^bb94:  // pred: ^bb93
    cf.br ^bb92
  ^bb95:  // pred: ^bb87
    %931 = llvm.load %7 : !llvm.ptr -> i32
    %c28_i64_319 = arith.constant 28 : i64
    %932 = arith.extui %931 : i32 to i64
    %933 = arith.addi %932, %c28_i64_319 : i64
    %934 = llvm.getelementptr %15[%933] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %935 = llvm.load volatile %934 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c2_i32_320 = arith.constant 2 : i32
    %c31_i32_321 = arith.constant 31 : i32
    %936 = arith.cmpi ule, %c2_i32_320, %c31_i32_321 : i32
    %937 = scf.if %936 -> (i32) {
      %2086 = arith.shli %935, %c2_i32_320 : i32
      scf.yield %2086 : i32
    } else {
      %c0_i32_749 = arith.constant 0 : i32
      scf.yield %c0_i32_749 : i32
    }
    %c1049560_i32_322 = arith.constant 1049560 : i32
    %938 = arith.addi %937, %c1049560_i32_322 : i32
    llvm.store %938, %6 : i32, !llvm.ptr
    %c0_i64_323 = arith.constant 0 : i64
    %939 = arith.extui %938 : i32 to i64
    %940 = arith.addi %939, %c0_i64_323 : i64
    %941 = llvm.getelementptr %15[%940] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %942 = llvm.load volatile %941 {alignment = 1 : i64} : !llvm.ptr -> i32
    %943 = llvm.load %7 : !llvm.ptr -> i32
    %944 = arith.cmpi eq, %942, %943 : i32
    %945 = arith.extui %944 : i1 to i32
    %c0_i32_324 = arith.constant 0 : i32
    %946 = arith.cmpi ne, %945, %c0_i32_324 : i32
    cf.cond_br %946, ^bb96, ^bb97
  ^bb96:  // pred: ^bb95
    %947 = llvm.load %6 : !llvm.ptr -> i32
    %948 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_325 = arith.constant 0 : i64
    %949 = arith.extui %947 : i32 to i64
    %950 = arith.addi %949, %c0_i64_325 : i64
    %951 = llvm.getelementptr %15[%950] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %948, %951 {alignment = 1 : i64} : i32, !llvm.ptr
    %952 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_326 = arith.constant 0 : i32
    %953 = arith.cmpi ne, %952, %c0_i32_326 : i32
    cf.cond_br %953, ^bb5, ^bb99
  ^bb97:  // pred: ^bb95
    %954 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32_327 = arith.constant 16 : i32
    %c20_i32_328 = arith.constant 20 : i32
    %955 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i64_329 = arith.constant 16 : i64
    %956 = arith.extui %955 : i32 to i64
    %957 = arith.addi %956, %c16_i64_329 : i64
    %958 = llvm.getelementptr %15[%957] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %959 = llvm.load volatile %958 {alignment = 1 : i64} : !llvm.ptr -> i32
    %960 = llvm.load %7 : !llvm.ptr -> i32
    %961 = arith.cmpi eq, %959, %960 : i32
    %962 = arith.extui %961 : i1 to i32
    %c0_i32_330 = arith.constant 0 : i32
    %963 = arith.cmpi ne, %962, %c0_i32_330 : i32
    %964 = arith.select %963, %c16_i32_327, %c20_i32_328 : i32
    %965 = arith.addi %954, %964 : i32
    %966 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_331 = arith.constant 0 : i64
    %967 = arith.extui %965 : i32 to i64
    %968 = arith.addi %967, %c0_i64_331 : i64
    %969 = llvm.getelementptr %15[%968] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %966, %969 {alignment = 1 : i64} : i32, !llvm.ptr
    %970 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_332 = arith.constant 0 : i32
    %971 = arith.cmpi eq, %970, %c0_i32_332 : i32
    %972 = arith.extui %971 : i1 to i32
    %c0_i32_333 = arith.constant 0 : i32
    %973 = arith.cmpi ne, %972, %c0_i32_333 : i32
    cf.cond_br %973, ^bb4, ^bb98
  ^bb98:  // pred: ^bb97
    cf.br ^bb5
  ^bb99:  // pred: ^bb96
    %c0_i32_334 = arith.constant 0 : i32
    %c0_i32_335 = arith.constant 0 : i32
    %c1049972_i64_336 = arith.constant 1049972 : i64
    %974 = arith.extui %c0_i32_335 : i32 to i64
    %975 = arith.addi %974, %c1049972_i64_336 : i64
    %976 = llvm.getelementptr %15[%975] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %977 = llvm.load volatile %976 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-2_i32_337 = arith.constant -2 : i32
    %978 = llvm.load %7 : !llvm.ptr -> i32
    %c28_i64_338 = arith.constant 28 : i64
    %979 = arith.extui %978 : i32 to i64
    %980 = arith.addi %979, %c28_i64_338 : i64
    %981 = llvm.getelementptr %15[%980] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %982 = llvm.load volatile %981 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c32_i32_339 = arith.constant 32 : i32
    %983 = arith.remui %982, %c32_i32_339 : i32
    %984 = arith.shli %c-2_i32_337, %983 : i32
    %985 = arith.subi %c32_i32_339, %983 : i32
    %986 = arith.shrui %c-2_i32_337, %985 : i32
    %987 = arith.ori %984, %986 : i32
    %988 = arith.andi %977, %987 : i32
    %c1049972_i64_340 = arith.constant 1049972 : i64
    %989 = arith.extui %c0_i32_334 : i32 to i64
    %990 = arith.addi %989, %c1049972_i64_340 : i64
    %991 = llvm.getelementptr %15[%990] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %988, %991 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb4
  ^bb100:  // 5 preds: ^bb104, ^bb119, ^bb142, ^bb147, ^bb148
    %c0_i32_341 = arith.constant 0 : i32
    llvm.store %c0_i32_341, %2 : i32, !llvm.ptr
    %c0_i32_342 = arith.constant 0 : i32
    %c1049980_i64 = arith.constant 1049980 : i64
    %992 = arith.extui %c0_i32_342 : i32 to i64
    %993 = arith.addi %992, %c1049980_i64 : i64
    %994 = llvm.getelementptr %15[%993] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %995 = llvm.load volatile %994 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %995, %0 : i32, !llvm.ptr
    %996 = llvm.load %3 : !llvm.ptr -> i32
    %997 = arith.cmpi ule, %995, %996 : i32
    %998 = arith.extui %997 : i1 to i32
    %c0_i32_343 = arith.constant 0 : i32
    %999 = arith.cmpi ne, %998, %c0_i32_343 : i32
    cf.cond_br %999, ^bb3, ^bb163
  ^bb101:  // 4 preds: ^bb102, ^bb103, ^bb156, ^bb157
    %1000 = llvm.load %6 : !llvm.ptr -> i32
    %c8_i32_344 = arith.constant 8 : i32
    %1001 = arith.addi %1000, %c8_i32_344 : i32
    llvm.store %1001, %2 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb102:  // pred: ^bb151
    %c0_i32_345 = arith.constant 0 : i32
    %1002 = llvm.load %0 : !llvm.ptr -> i32
    %c1049984_i64_346 = arith.constant 1049984 : i64
    %1003 = arith.extui %c0_i32_345 : i32 to i64
    %1004 = arith.addi %1003, %c1049984_i64_346 : i64
    %1005 = llvm.getelementptr %15[%1004] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1002, %1005 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_347 = arith.constant 0 : i32
    %c0_i32_348 = arith.constant 0 : i32
    %c1049976_i64_349 = arith.constant 1049976 : i64
    %1006 = arith.extui %c0_i32_348 : i32 to i64
    %1007 = arith.addi %1006, %c1049976_i64_349 : i64
    %1008 = llvm.getelementptr %15[%1007] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1009 = llvm.load volatile %1008 {alignment = 1 : i64} : !llvm.ptr -> i32
    %1010 = llvm.load %3 : !llvm.ptr -> i32
    %1011 = arith.addi %1009, %1010 : i32
    llvm.store %1011, %3 : i32, !llvm.ptr
    %c1049976_i64_350 = arith.constant 1049976 : i64
    %1012 = arith.extui %c0_i32_347 : i32 to i64
    %1013 = arith.addi %1012, %c1049976_i64_350 : i64
    %1014 = llvm.getelementptr %15[%1013] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1011, %1014 {alignment = 1 : i64} : i32, !llvm.ptr
    %1015 = llvm.load %0 : !llvm.ptr -> i32
    %1016 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_351 = arith.constant 1 : i32
    %1017 = arith.ori %1016, %c1_i32_351 : i32
    %c4_i64_352 = arith.constant 4 : i64
    %1018 = arith.extui %1015 : i32 to i64
    %1019 = arith.addi %1018, %c4_i64_352 : i64
    %1020 = llvm.getelementptr %15[%1019] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1017, %1020 {alignment = 1 : i64} : i32, !llvm.ptr
    %1021 = llvm.load %0 : !llvm.ptr -> i32
    %1022 = llvm.load %3 : !llvm.ptr -> i32
    %1023 = arith.addi %1021, %1022 : i32
    %1024 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_353 = arith.constant 0 : i64
    %1025 = arith.extui %1023 : i32 to i64
    %1026 = arith.addi %1025, %c0_i64_353 : i64
    %1027 = llvm.getelementptr %15[%1026] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1024, %1027 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb101
  ^bb103:  // pred: ^bb127
    %c0_i32_354 = arith.constant 0 : i32
    %1028 = llvm.load %0 : !llvm.ptr -> i32
    %c1049988_i64 = arith.constant 1049988 : i64
    %1029 = arith.extui %c0_i32_354 : i32 to i64
    %1030 = arith.addi %1029, %c1049988_i64 : i64
    %1031 = llvm.getelementptr %15[%1030] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1028, %1031 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_355 = arith.constant 0 : i32
    %c0_i32_356 = arith.constant 0 : i32
    %c1049980_i64_357 = arith.constant 1049980 : i64
    %1032 = arith.extui %c0_i32_356 : i32 to i64
    %1033 = arith.addi %1032, %c1049980_i64_357 : i64
    %1034 = llvm.getelementptr %15[%1033] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1035 = llvm.load volatile %1034 {alignment = 1 : i64} : !llvm.ptr -> i32
    %1036 = llvm.load %3 : !llvm.ptr -> i32
    %1037 = arith.addi %1035, %1036 : i32
    llvm.store %1037, %3 : i32, !llvm.ptr
    %c1049980_i64_358 = arith.constant 1049980 : i64
    %1038 = arith.extui %c0_i32_355 : i32 to i64
    %1039 = arith.addi %1038, %c1049980_i64_358 : i64
    %1040 = llvm.getelementptr %15[%1039] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1037, %1040 {alignment = 1 : i64} : i32, !llvm.ptr
    %1041 = llvm.load %0 : !llvm.ptr -> i32
    %1042 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_359 = arith.constant 1 : i32
    %1043 = arith.ori %1042, %c1_i32_359 : i32
    %c4_i64_360 = arith.constant 4 : i64
    %1044 = arith.extui %1041 : i32 to i64
    %1045 = arith.addi %1044, %c4_i64_360 : i64
    %1046 = llvm.getelementptr %15[%1045] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1043, %1046 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb101
  ^bb104:  // pred: ^bb125
    %1047 = llvm.load %0 : !llvm.ptr -> i32
    %1048 = llvm.load %8 : !llvm.ptr -> i32
    %1049 = llvm.load %9 : !llvm.ptr -> i32
    %1050 = arith.addi %1048, %1049 : i32
    %c4_i64_361 = arith.constant 4 : i64
    %1051 = arith.extui %1047 : i32 to i64
    %1052 = arith.addi %1051, %c4_i64_361 : i64
    %1053 = llvm.getelementptr %15[%1052] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1050, %1053 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_362 = arith.constant 0 : i32
    %c0_i32_363 = arith.constant 0 : i32
    %c1049988_i64_364 = arith.constant 1049988 : i64
    %1054 = arith.extui %c0_i32_363 : i32 to i64
    %1055 = arith.addi %1054, %c1049988_i64_364 : i64
    %1056 = llvm.getelementptr %15[%1055] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1057 = llvm.load volatile %1056 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1057, %0 : i32, !llvm.ptr
    %c15_i32 = arith.constant 15 : i32
    %1058 = arith.addi %1057, %c15_i32 : i32
    %c-8_i32_365 = arith.constant -8 : i32
    %1059 = arith.andi %1058, %c-8_i32_365 : i32
    llvm.store %1059, %2 : i32, !llvm.ptr
    %c-8_i32_366 = arith.constant -8 : i32
    %1060 = arith.addi %1059, %c-8_i32_366 : i32
    llvm.store %1060, %7 : i32, !llvm.ptr
    %c1049988_i64_367 = arith.constant 1049988 : i64
    %1061 = arith.extui %c0_i32_362 : i32 to i64
    %1062 = arith.addi %1061, %c1049988_i64_367 : i64
    %1063 = llvm.getelementptr %15[%1062] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1060, %1063 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_368 = arith.constant 0 : i32
    %1064 = llvm.load %0 : !llvm.ptr -> i32
    %1065 = llvm.load %2 : !llvm.ptr -> i32
    %1066 = arith.subi %1064, %1065 : i32
    %c0_i32_369 = arith.constant 0 : i32
    %c1049980_i64_370 = arith.constant 1049980 : i64
    %1067 = arith.extui %c0_i32_369 : i32 to i64
    %1068 = arith.addi %1067, %c1049980_i64_370 : i64
    %1069 = llvm.getelementptr %15[%1068] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1070 = llvm.load volatile %1069 {alignment = 1 : i64} : !llvm.ptr -> i32
    %1071 = llvm.load %9 : !llvm.ptr -> i32
    %1072 = arith.addi %1070, %1071 : i32
    llvm.store %1072, %2 : i32, !llvm.ptr
    %1073 = arith.addi %1066, %1072 : i32
    %c8_i32_371 = arith.constant 8 : i32
    %1074 = arith.addi %1073, %c8_i32_371 : i32
    llvm.store %1074, %6 : i32, !llvm.ptr
    %c1049980_i64_372 = arith.constant 1049980 : i64
    %1075 = arith.extui %c0_i32_368 : i32 to i64
    %1076 = arith.addi %1075, %c1049980_i64_372 : i64
    %1077 = llvm.getelementptr %15[%1076] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1074, %1077 {alignment = 1 : i64} : i32, !llvm.ptr
    %1078 = llvm.load %7 : !llvm.ptr -> i32
    %1079 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i32_373 = arith.constant 1 : i32
    %1080 = arith.ori %1079, %c1_i32_373 : i32
    %c4_i64_374 = arith.constant 4 : i64
    %1081 = arith.extui %1078 : i32 to i64
    %1082 = arith.addi %1081, %c4_i64_374 : i64
    %1083 = llvm.getelementptr %15[%1082] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1080, %1083 {alignment = 1 : i64} : i32, !llvm.ptr
    %1084 = llvm.load %0 : !llvm.ptr -> i32
    %1085 = llvm.load %2 : !llvm.ptr -> i32
    %1086 = arith.addi %1084, %1085 : i32
    %c40_i32 = arith.constant 40 : i32
    %c4_i64_375 = arith.constant 4 : i64
    %1087 = arith.extui %1086 : i32 to i64
    %1088 = arith.addi %1087, %c4_i64_375 : i64
    %1089 = llvm.getelementptr %15[%1088] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c40_i32, %1089 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_376 = arith.constant 0 : i32
    %c2097152_i32 = arith.constant 2097152 : i32
    %c1050000_i64 = arith.constant 1050000 : i64
    %1090 = arith.extui %c0_i32_376 : i32 to i64
    %1091 = arith.addi %1090, %c1050000_i64 : i64
    %1092 = llvm.getelementptr %15[%1091] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2097152_i32, %1092 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb100
  ^bb105:  // pred: ^bb6
    %c0_i32_377 = arith.constant 0 : i32
    %c1049984_i64_378 = arith.constant 1049984 : i64
    %1093 = arith.extui %c0_i32_377 : i32 to i64
    %1094 = arith.addi %1093, %c1049984_i64_378 : i64
    %1095 = llvm.getelementptr %15[%1094] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1096 = llvm.load volatile %1095 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1096, %2 : i32, !llvm.ptr
    %1097 = llvm.load %0 : !llvm.ptr -> i32
    %1098 = llvm.load %3 : !llvm.ptr -> i32
    %1099 = arith.subi %1097, %1098 : i32
    llvm.store %1099, %7 : i32, !llvm.ptr
    %c15_i32_379 = arith.constant 15 : i32
    %1100 = arith.cmpi ugt, %1099, %c15_i32_379 : i32
    %1101 = arith.extui %1100 : i1 to i32
    %c0_i32_380 = arith.constant 0 : i32
    %1102 = arith.cmpi ne, %1101, %c0_i32_380 : i32
    cf.cond_br %1102, ^bb161, ^bb162
  ^bb106:  // pred: ^bb6
    %c0_i32_381 = arith.constant 0 : i32
    %c1049980_i64_382 = arith.constant 1049980 : i64
    %1103 = arith.extui %c0_i32_381 : i32 to i64
    %1104 = arith.addi %1103, %c1049980_i64_382 : i64
    %1105 = llvm.getelementptr %15[%1104] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1106 = llvm.load volatile %1105 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1106, %0 : i32, !llvm.ptr
    %1107 = llvm.load %3 : !llvm.ptr -> i32
    %1108 = arith.cmpi ugt, %1106, %1107 : i32
    %1109 = arith.extui %1108 : i1 to i32
    %c0_i32_383 = arith.constant 0 : i32
    %1110 = arith.cmpi ne, %1109, %c0_i32_383 : i32
    cf.cond_br %1110, ^bb107, ^bb108
  ^bb107:  // pred: ^bb106
    %c0_i32_384 = arith.constant 0 : i32
    %1111 = llvm.load %0 : !llvm.ptr -> i32
    %1112 = llvm.load %3 : !llvm.ptr -> i32
    %1113 = arith.subi %1111, %1112 : i32
    llvm.store %1113, %2 : i32, !llvm.ptr
    %c1049980_i64_385 = arith.constant 1049980 : i64
    %1114 = arith.extui %c0_i32_384 : i32 to i64
    %1115 = arith.addi %1114, %c1049980_i64_385 : i64
    %1116 = llvm.getelementptr %15[%1115] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1113, %1116 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_386 = arith.constant 0 : i32
    %c0_i32_387 = arith.constant 0 : i32
    %c1049988_i64_388 = arith.constant 1049988 : i64
    %1117 = arith.extui %c0_i32_387 : i32 to i64
    %1118 = arith.addi %1117, %c1049988_i64_388 : i64
    %1119 = llvm.getelementptr %15[%1118] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1120 = llvm.load volatile %1119 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1120, %0 : i32, !llvm.ptr
    %1121 = llvm.load %3 : !llvm.ptr -> i32
    %1122 = arith.addi %1120, %1121 : i32
    llvm.store %1122, %7 : i32, !llvm.ptr
    %c1049988_i64_389 = arith.constant 1049988 : i64
    %1123 = arith.extui %c0_i32_386 : i32 to i64
    %1124 = arith.addi %1123, %c1049988_i64_389 : i64
    %1125 = llvm.getelementptr %15[%1124] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1122, %1125 {alignment = 1 : i64} : i32, !llvm.ptr
    %1126 = llvm.load %7 : !llvm.ptr -> i32
    %1127 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_390 = arith.constant 1 : i32
    %1128 = arith.ori %1127, %c1_i32_390 : i32
    %c4_i64_391 = arith.constant 4 : i64
    %1129 = arith.extui %1126 : i32 to i64
    %1130 = arith.addi %1129, %c4_i64_391 : i64
    %1131 = llvm.getelementptr %15[%1130] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1128, %1131 {alignment = 1 : i64} : i32, !llvm.ptr
    %1132 = llvm.load %0 : !llvm.ptr -> i32
    %1133 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i32_392 = arith.constant 3 : i32
    %1134 = arith.ori %1133, %c3_i32_392 : i32
    %c4_i64_393 = arith.constant 4 : i64
    %1135 = arith.extui %1132 : i32 to i64
    %1136 = arith.addi %1135, %c4_i64_393 : i64
    %1137 = llvm.getelementptr %15[%1136] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1134, %1137 {alignment = 1 : i64} : i32, !llvm.ptr
    %1138 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_394 = arith.constant 8 : i32
    %1139 = arith.addi %1138, %c8_i32_394 : i32
    llvm.store %1139, %2 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb108:  // pred: ^bb106
    %1140 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32_395 = arith.constant 4 : i32
    %1141 = arith.addi %1140, %c4_i32_395 : i32
    %c1050012_i32 = arith.constant 1050012 : i32
    %1142 = llvm.load %3 : !llvm.ptr -> i32
    %c65583_i32 = arith.constant 65583 : i32
    %1143 = arith.addi %1142, %c65583_i32 : i32
    %c-65536_i32 = arith.constant -65536 : i32
    %1144 = arith.andi %1143, %c-65536_i32 : i32
    call @f56(%arg0, %1141, %c1050012_i32, %1144) : (!llvm.ptr, i32, i32, i32) -> ()
    %1145 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_396 = arith.constant 4 : i64
    %1146 = arith.extui %1145 : i32 to i64
    %1147 = arith.addi %1146, %c4_i64_396 : i64
    %1148 = llvm.getelementptr %15[%1147] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1149 = llvm.load volatile %1148 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1149, %6 : i32, !llvm.ptr
    %c0_i32_397 = arith.constant 0 : i32
    %1150 = arith.cmpi ne, %1149, %c0_i32_397 : i32
    cf.cond_br %1150, ^bb109, ^bb110
  ^bb109:  // pred: ^bb108
    %1151 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64_398 = arith.constant 12 : i64
    %1152 = arith.extui %1151 : i32 to i64
    %1153 = arith.addi %1152, %c12_i64_398 : i64
    %1154 = llvm.getelementptr %15[%1153] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1155 = llvm.load volatile %1154 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1155, %5 : i32, !llvm.ptr
    %c0_i32_399 = arith.constant 0 : i32
    %c0_i32_400 = arith.constant 0 : i32
    %c1049992_i64 = arith.constant 1049992 : i64
    %1156 = arith.extui %c0_i32_400 : i32 to i64
    %1157 = arith.addi %1156, %c1049992_i64 : i64
    %1158 = llvm.getelementptr %15[%1157] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1159 = llvm.load volatile %1158 {alignment = 1 : i64} : !llvm.ptr -> i32
    %1160 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64_401 = arith.constant 8 : i64
    %1161 = arith.extui %1160 : i32 to i64
    %1162 = arith.addi %1161, %c8_i64_401 : i64
    %1163 = llvm.getelementptr %15[%1162] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1164 = llvm.load volatile %1163 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1164, %9 : i32, !llvm.ptr
    %1165 = arith.addi %1159, %1164 : i32
    llvm.store %1165, %0 : i32, !llvm.ptr
    %c1049992_i64_402 = arith.constant 1049992 : i64
    %1166 = arith.extui %c0_i32_399 : i32 to i64
    %1167 = arith.addi %1166, %c1049992_i64_402 : i64
    %1168 = llvm.getelementptr %15[%1167] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1165, %1168 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_403 = arith.constant 0 : i32
    %c0_i32_404 = arith.constant 0 : i32
    %c1049996_i64 = arith.constant 1049996 : i64
    %1169 = arith.extui %c0_i32_404 : i32 to i64
    %1170 = arith.addi %1169, %c1049996_i64 : i64
    %1171 = llvm.getelementptr %15[%1170] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1172 = llvm.load volatile %1171 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1172, %2 : i32, !llvm.ptr
    %1173 = llvm.load %0 : !llvm.ptr -> i32
    %1174 = llvm.load %2 : !llvm.ptr -> i32
    %1175 = llvm.load %0 : !llvm.ptr -> i32
    %1176 = arith.cmpi ugt, %1174, %1175 : i32
    %1177 = arith.extui %1176 : i1 to i32
    %c0_i32_405 = arith.constant 0 : i32
    %1178 = arith.cmpi ne, %1177, %c0_i32_405 : i32
    %1179 = arith.select %1178, %1172, %1173 : i32
    %c1049996_i64_406 = arith.constant 1049996 : i64
    %1180 = arith.extui %c0_i32_403 : i32 to i64
    %1181 = arith.addi %1180, %c1049996_i64_406 : i64
    %1182 = llvm.getelementptr %15[%1181] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1179, %1182 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_407 = arith.constant 0 : i32
    %c1049988_i64_408 = arith.constant 1049988 : i64
    %1183 = arith.extui %c0_i32_407 : i32 to i64
    %1184 = arith.addi %1183, %c1049988_i64_408 : i64
    %1185 = llvm.getelementptr %15[%1184] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1186 = llvm.load volatile %1185 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1186, %2 : i32, !llvm.ptr
    %c0_i32_409 = arith.constant 0 : i32
    %1187 = arith.cmpi eq, %1186, %c0_i32_409 : i32
    %1188 = arith.extui %1187 : i1 to i32
    %c0_i32_410 = arith.constant 0 : i32
    %1189 = arith.cmpi ne, %1188, %c0_i32_410 : i32
    cf.cond_br %1189, ^bb113, ^bb114
  ^bb110:  // pred: ^bb108
    %c0_i32_411 = arith.constant 0 : i32
    llvm.store %c0_i32_411, %2 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb111:  // 5 preds: ^bb112, ^bb118, ^bb123, ^bb124, ^bb126
    %c0_i32_412 = arith.constant 0 : i32
    %c0_i32_413 = arith.constant 0 : i32
    %c1050004_i64 = arith.constant 1050004 : i64
    %1190 = arith.extui %c0_i32_413 : i32 to i64
    %1191 = arith.addi %1190, %c1050004_i64 : i64
    %1192 = llvm.getelementptr %15[%1191] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1193 = llvm.load volatile %1192 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1193, %0 : i32, !llvm.ptr
    %1194 = llvm.load %6 : !llvm.ptr -> i32
    %1195 = llvm.load %6 : !llvm.ptr -> i32
    %1196 = llvm.load %0 : !llvm.ptr -> i32
    %1197 = arith.cmpi ugt, %1195, %1196 : i32
    %1198 = arith.extui %1197 : i1 to i32
    %c0_i32_414 = arith.constant 0 : i32
    %1199 = arith.cmpi ne, %1198, %c0_i32_414 : i32
    %1200 = arith.select %1199, %1193, %1194 : i32
    %c1050004_i64_415 = arith.constant 1050004 : i64
    %1201 = arith.extui %c0_i32_412 : i32 to i64
    %1202 = arith.addi %1201, %c1050004_i64_415 : i64
    %1203 = llvm.getelementptr %15[%1202] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1200, %1203 {alignment = 1 : i64} : i32, !llvm.ptr
    %1204 = llvm.load %6 : !llvm.ptr -> i32
    %1205 = llvm.load %9 : !llvm.ptr -> i32
    %1206 = arith.addi %1204, %1205 : i32
    llvm.store %1206, %7 : i32, !llvm.ptr
    %c1049688_i32 = arith.constant 1049688 : i32
    llvm.store %c1049688_i32, %0 : i32, !llvm.ptr
    cf.br ^bb131
  ^bb112:  // pred: ^bb116
    %1207 = llvm.load %2 : !llvm.ptr -> i32
    %1208 = llvm.load %6 : !llvm.ptr -> i32
    %1209 = arith.cmpi uge, %1207, %1208 : i32
    %1210 = arith.extui %1209 : i1 to i32
    %c0_i32_416 = arith.constant 0 : i32
    %1211 = arith.cmpi ne, %1210, %c0_i32_416 : i32
    cf.cond_br %1211, ^bb111, ^bb123
  ^bb113:  // 2 preds: ^bb109, ^bb115
    %c0_i32_417 = arith.constant 0 : i32
    %c1050004_i64_418 = arith.constant 1050004 : i64
    %1212 = arith.extui %c0_i32_417 : i32 to i64
    %1213 = arith.addi %1212, %c1050004_i64_418 : i64
    %1214 = llvm.getelementptr %15[%1213] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1215 = llvm.load volatile %1214 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1215, %0 : i32, !llvm.ptr
    %c0_i32_419 = arith.constant 0 : i32
    %1216 = arith.cmpi eq, %1215, %c0_i32_419 : i32
    %1217 = arith.extui %1216 : i1 to i32
    %c0_i32_420 = arith.constant 0 : i32
    %1218 = arith.cmpi ne, %1217, %c0_i32_420 : i32
    cf.cond_br %1218, ^bb120, ^bb121
  ^bb114:  // pred: ^bb109
    %c1049688_i32_421 = arith.constant 1049688 : i32
    llvm.store %c1049688_i32_421, %0 : i32, !llvm.ptr
    cf.br ^bb116
  ^bb115:  // no predecessors
    cf.br ^bb113
  ^bb116:  // 2 preds: ^bb114, ^bb117
    %1219 = llvm.load %6 : !llvm.ptr -> i32
    %1220 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_422 = arith.constant 0 : i64
    %1221 = arith.extui %1220 : i32 to i64
    %1222 = arith.addi %1221, %c0_i64_422 : i64
    %1223 = llvm.getelementptr %15[%1222] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1224 = llvm.load volatile %1223 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1224, %7 : i32, !llvm.ptr
    %1225 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_423 = arith.constant 4 : i64
    %1226 = arith.extui %1225 : i32 to i64
    %1227 = arith.addi %1226, %c4_i64_423 : i64
    %1228 = llvm.getelementptr %15[%1227] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1229 = llvm.load volatile %1228 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1229, %8 : i32, !llvm.ptr
    %1230 = arith.addi %1224, %1229 : i32
    %1231 = arith.cmpi eq, %1219, %1230 : i32
    %1232 = arith.extui %1231 : i1 to i32
    %c0_i32_424 = arith.constant 0 : i32
    %1233 = arith.cmpi ne, %1232, %c0_i32_424 : i32
    cf.cond_br %1233, ^bb112, ^bb117
  ^bb117:  // pred: ^bb116
    %1234 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_425 = arith.constant 8 : i64
    %1235 = arith.extui %1234 : i32 to i64
    %1236 = arith.addi %1235, %c8_i64_425 : i64
    %1237 = llvm.getelementptr %15[%1236] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1238 = llvm.load volatile %1237 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1238, %0 : i32, !llvm.ptr
    %c0_i32_426 = arith.constant 0 : i32
    %1239 = arith.cmpi ne, %1238, %c0_i32_426 : i32
    cf.cond_br %1239, ^bb116, ^bb118
  ^bb118:  // pred: ^bb117
    cf.br ^bb111
  ^bb119:  // 2 preds: ^bb120, ^bb121
    %c0_i32_427 = arith.constant 0 : i32
    %c4095_i32 = arith.constant 4095 : i32
    %c1050008_i64 = arith.constant 1050008 : i64
    %1240 = arith.extui %c0_i32_427 : i32 to i64
    %1241 = arith.addi %1240, %c1050008_i64 : i64
    %1242 = llvm.getelementptr %15[%1241] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4095_i32, %1242 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_428 = arith.constant 0 : i32
    %1243 = llvm.load %5 : !llvm.ptr -> i32
    %c1049700_i64 = arith.constant 1049700 : i64
    %1244 = arith.extui %c0_i32_428 : i32 to i64
    %1245 = arith.addi %1244, %c1049700_i64 : i64
    %1246 = llvm.getelementptr %15[%1245] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1243, %1246 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_429 = arith.constant 0 : i32
    %1247 = llvm.load %9 : !llvm.ptr -> i32
    %c1049692_i64 = arith.constant 1049692 : i64
    %1248 = arith.extui %c0_i32_429 : i32 to i64
    %1249 = arith.addi %1248, %c1049692_i64 : i64
    %1250 = llvm.getelementptr %15[%1249] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1247, %1250 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_430 = arith.constant 0 : i32
    %1251 = llvm.load %6 : !llvm.ptr -> i32
    %c1049688_i64 = arith.constant 1049688 : i64
    %1252 = arith.extui %c0_i32_430 : i32 to i64
    %1253 = arith.addi %1252, %c1049688_i64 : i64
    %1254 = llvm.getelementptr %15[%1253] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1251, %1254 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_431 = arith.constant 0 : i32
    %c1049704_i32_432 = arith.constant 1049704 : i32
    %c1049716_i64 = arith.constant 1049716 : i64
    %1255 = arith.extui %c0_i32_431 : i32 to i64
    %1256 = arith.addi %1255, %c1049716_i64 : i64
    %1257 = llvm.getelementptr %15[%1256] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049704_i32_432, %1257 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_433 = arith.constant 0 : i32
    %c1049712_i32_434 = arith.constant 1049712 : i32
    %c1049724_i64 = arith.constant 1049724 : i64
    %1258 = arith.extui %c0_i32_433 : i32 to i64
    %1259 = arith.addi %1258, %c1049724_i64 : i64
    %1260 = llvm.getelementptr %15[%1259] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049712_i32_434, %1260 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_435 = arith.constant 0 : i32
    %c1049704_i32_436 = arith.constant 1049704 : i32
    %c1049712_i64 = arith.constant 1049712 : i64
    %1261 = arith.extui %c0_i32_435 : i32 to i64
    %1262 = arith.addi %1261, %c1049712_i64 : i64
    %1263 = llvm.getelementptr %15[%1262] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049704_i32_436, %1263 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_437 = arith.constant 0 : i32
    %c1049720_i32 = arith.constant 1049720 : i32
    %c1049732_i64 = arith.constant 1049732 : i64
    %1264 = arith.extui %c0_i32_437 : i32 to i64
    %1265 = arith.addi %1264, %c1049732_i64 : i64
    %1266 = llvm.getelementptr %15[%1265] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049720_i32, %1266 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_438 = arith.constant 0 : i32
    %c1049712_i32_439 = arith.constant 1049712 : i32
    %c1049720_i64 = arith.constant 1049720 : i64
    %1267 = arith.extui %c0_i32_438 : i32 to i64
    %1268 = arith.addi %1267, %c1049720_i64 : i64
    %1269 = llvm.getelementptr %15[%1268] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049712_i32_439, %1269 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_440 = arith.constant 0 : i32
    %c1049728_i32 = arith.constant 1049728 : i32
    %c1049740_i64 = arith.constant 1049740 : i64
    %1270 = arith.extui %c0_i32_440 : i32 to i64
    %1271 = arith.addi %1270, %c1049740_i64 : i64
    %1272 = llvm.getelementptr %15[%1271] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049728_i32, %1272 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_441 = arith.constant 0 : i32
    %c1049720_i32_442 = arith.constant 1049720 : i32
    %c1049728_i64 = arith.constant 1049728 : i64
    %1273 = arith.extui %c0_i32_441 : i32 to i64
    %1274 = arith.addi %1273, %c1049728_i64 : i64
    %1275 = llvm.getelementptr %15[%1274] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049720_i32_442, %1275 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_443 = arith.constant 0 : i32
    %c1049736_i32 = arith.constant 1049736 : i32
    %c1049748_i64 = arith.constant 1049748 : i64
    %1276 = arith.extui %c0_i32_443 : i32 to i64
    %1277 = arith.addi %1276, %c1049748_i64 : i64
    %1278 = llvm.getelementptr %15[%1277] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049736_i32, %1278 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_444 = arith.constant 0 : i32
    %c1049728_i32_445 = arith.constant 1049728 : i32
    %c1049736_i64 = arith.constant 1049736 : i64
    %1279 = arith.extui %c0_i32_444 : i32 to i64
    %1280 = arith.addi %1279, %c1049736_i64 : i64
    %1281 = llvm.getelementptr %15[%1280] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049728_i32_445, %1281 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_446 = arith.constant 0 : i32
    %c1049744_i32 = arith.constant 1049744 : i32
    %c1049756_i64 = arith.constant 1049756 : i64
    %1282 = arith.extui %c0_i32_446 : i32 to i64
    %1283 = arith.addi %1282, %c1049756_i64 : i64
    %1284 = llvm.getelementptr %15[%1283] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049744_i32, %1284 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_447 = arith.constant 0 : i32
    %c1049736_i32_448 = arith.constant 1049736 : i32
    %c1049744_i64 = arith.constant 1049744 : i64
    %1285 = arith.extui %c0_i32_447 : i32 to i64
    %1286 = arith.addi %1285, %c1049744_i64 : i64
    %1287 = llvm.getelementptr %15[%1286] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049736_i32_448, %1287 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_449 = arith.constant 0 : i32
    %c1049752_i32 = arith.constant 1049752 : i32
    %c1049764_i64 = arith.constant 1049764 : i64
    %1288 = arith.extui %c0_i32_449 : i32 to i64
    %1289 = arith.addi %1288, %c1049764_i64 : i64
    %1290 = llvm.getelementptr %15[%1289] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049752_i32, %1290 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_450 = arith.constant 0 : i32
    %c1049744_i32_451 = arith.constant 1049744 : i32
    %c1049752_i64 = arith.constant 1049752 : i64
    %1291 = arith.extui %c0_i32_450 : i32 to i64
    %1292 = arith.addi %1291, %c1049752_i64 : i64
    %1293 = llvm.getelementptr %15[%1292] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049744_i32_451, %1293 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_452 = arith.constant 0 : i32
    %c1049760_i32 = arith.constant 1049760 : i32
    %c1049772_i64 = arith.constant 1049772 : i64
    %1294 = arith.extui %c0_i32_452 : i32 to i64
    %1295 = arith.addi %1294, %c1049772_i64 : i64
    %1296 = llvm.getelementptr %15[%1295] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049760_i32, %1296 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_453 = arith.constant 0 : i32
    %c1049752_i32_454 = arith.constant 1049752 : i32
    %c1049760_i64 = arith.constant 1049760 : i64
    %1297 = arith.extui %c0_i32_453 : i32 to i64
    %1298 = arith.addi %1297, %c1049760_i64 : i64
    %1299 = llvm.getelementptr %15[%1298] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049752_i32_454, %1299 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_455 = arith.constant 0 : i32
    %c1049768_i32 = arith.constant 1049768 : i32
    %c1049780_i64 = arith.constant 1049780 : i64
    %1300 = arith.extui %c0_i32_455 : i32 to i64
    %1301 = arith.addi %1300, %c1049780_i64 : i64
    %1302 = llvm.getelementptr %15[%1301] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049768_i32, %1302 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_456 = arith.constant 0 : i32
    %c1049760_i32_457 = arith.constant 1049760 : i32
    %c1049768_i64 = arith.constant 1049768 : i64
    %1303 = arith.extui %c0_i32_456 : i32 to i64
    %1304 = arith.addi %1303, %c1049768_i64 : i64
    %1305 = llvm.getelementptr %15[%1304] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049760_i32_457, %1305 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_458 = arith.constant 0 : i32
    %c1049768_i32_459 = arith.constant 1049768 : i32
    %c1049776_i64 = arith.constant 1049776 : i64
    %1306 = arith.extui %c0_i32_458 : i32 to i64
    %1307 = arith.addi %1306, %c1049776_i64 : i64
    %1308 = llvm.getelementptr %15[%1307] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049768_i32_459, %1308 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_460 = arith.constant 0 : i32
    %c1049776_i32 = arith.constant 1049776 : i32
    %c1049788_i64 = arith.constant 1049788 : i64
    %1309 = arith.extui %c0_i32_460 : i32 to i64
    %1310 = arith.addi %1309, %c1049788_i64 : i64
    %1311 = llvm.getelementptr %15[%1310] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049776_i32, %1311 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_461 = arith.constant 0 : i32
    %c1049776_i32_462 = arith.constant 1049776 : i32
    %c1049784_i64 = arith.constant 1049784 : i64
    %1312 = arith.extui %c0_i32_461 : i32 to i64
    %1313 = arith.addi %1312, %c1049784_i64 : i64
    %1314 = llvm.getelementptr %15[%1313] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049776_i32_462, %1314 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_463 = arith.constant 0 : i32
    %c1049784_i32 = arith.constant 1049784 : i32
    %c1049796_i64 = arith.constant 1049796 : i64
    %1315 = arith.extui %c0_i32_463 : i32 to i64
    %1316 = arith.addi %1315, %c1049796_i64 : i64
    %1317 = llvm.getelementptr %15[%1316] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049784_i32, %1317 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_464 = arith.constant 0 : i32
    %c1049784_i32_465 = arith.constant 1049784 : i32
    %c1049792_i64 = arith.constant 1049792 : i64
    %1318 = arith.extui %c0_i32_464 : i32 to i64
    %1319 = arith.addi %1318, %c1049792_i64 : i64
    %1320 = llvm.getelementptr %15[%1319] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049784_i32_465, %1320 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_466 = arith.constant 0 : i32
    %c1049792_i32 = arith.constant 1049792 : i32
    %c1049804_i64 = arith.constant 1049804 : i64
    %1321 = arith.extui %c0_i32_466 : i32 to i64
    %1322 = arith.addi %1321, %c1049804_i64 : i64
    %1323 = llvm.getelementptr %15[%1322] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049792_i32, %1323 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_467 = arith.constant 0 : i32
    %c1049792_i32_468 = arith.constant 1049792 : i32
    %c1049800_i64 = arith.constant 1049800 : i64
    %1324 = arith.extui %c0_i32_467 : i32 to i64
    %1325 = arith.addi %1324, %c1049800_i64 : i64
    %1326 = llvm.getelementptr %15[%1325] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049792_i32_468, %1326 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_469 = arith.constant 0 : i32
    %c1049800_i32 = arith.constant 1049800 : i32
    %c1049812_i64 = arith.constant 1049812 : i64
    %1327 = arith.extui %c0_i32_469 : i32 to i64
    %1328 = arith.addi %1327, %c1049812_i64 : i64
    %1329 = llvm.getelementptr %15[%1328] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049800_i32, %1329 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_470 = arith.constant 0 : i32
    %c1049800_i32_471 = arith.constant 1049800 : i32
    %c1049808_i64 = arith.constant 1049808 : i64
    %1330 = arith.extui %c0_i32_470 : i32 to i64
    %1331 = arith.addi %1330, %c1049808_i64 : i64
    %1332 = llvm.getelementptr %15[%1331] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049800_i32_471, %1332 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_472 = arith.constant 0 : i32
    %c1049808_i32 = arith.constant 1049808 : i32
    %c1049820_i64 = arith.constant 1049820 : i64
    %1333 = arith.extui %c0_i32_472 : i32 to i64
    %1334 = arith.addi %1333, %c1049820_i64 : i64
    %1335 = llvm.getelementptr %15[%1334] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049808_i32, %1335 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_473 = arith.constant 0 : i32
    %c1049808_i32_474 = arith.constant 1049808 : i32
    %c1049816_i64 = arith.constant 1049816 : i64
    %1336 = arith.extui %c0_i32_473 : i32 to i64
    %1337 = arith.addi %1336, %c1049816_i64 : i64
    %1338 = llvm.getelementptr %15[%1337] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049808_i32_474, %1338 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_475 = arith.constant 0 : i32
    %c1049816_i32 = arith.constant 1049816 : i32
    %c1049828_i64 = arith.constant 1049828 : i64
    %1339 = arith.extui %c0_i32_475 : i32 to i64
    %1340 = arith.addi %1339, %c1049828_i64 : i64
    %1341 = llvm.getelementptr %15[%1340] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049816_i32, %1341 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_476 = arith.constant 0 : i32
    %c1049816_i32_477 = arith.constant 1049816 : i32
    %c1049824_i64 = arith.constant 1049824 : i64
    %1342 = arith.extui %c0_i32_476 : i32 to i64
    %1343 = arith.addi %1342, %c1049824_i64 : i64
    %1344 = llvm.getelementptr %15[%1343] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049816_i32_477, %1344 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_478 = arith.constant 0 : i32
    %c1049824_i32 = arith.constant 1049824 : i32
    %c1049836_i64 = arith.constant 1049836 : i64
    %1345 = arith.extui %c0_i32_478 : i32 to i64
    %1346 = arith.addi %1345, %c1049836_i64 : i64
    %1347 = llvm.getelementptr %15[%1346] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049824_i32, %1347 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_479 = arith.constant 0 : i32
    %c1049824_i32_480 = arith.constant 1049824 : i32
    %c1049832_i64 = arith.constant 1049832 : i64
    %1348 = arith.extui %c0_i32_479 : i32 to i64
    %1349 = arith.addi %1348, %c1049832_i64 : i64
    %1350 = llvm.getelementptr %15[%1349] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049824_i32_480, %1350 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_481 = arith.constant 0 : i32
    %c1049832_i32 = arith.constant 1049832 : i32
    %c1049844_i64 = arith.constant 1049844 : i64
    %1351 = arith.extui %c0_i32_481 : i32 to i64
    %1352 = arith.addi %1351, %c1049844_i64 : i64
    %1353 = llvm.getelementptr %15[%1352] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049832_i32, %1353 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_482 = arith.constant 0 : i32
    %c1049840_i32 = arith.constant 1049840 : i32
    %c1049852_i64 = arith.constant 1049852 : i64
    %1354 = arith.extui %c0_i32_482 : i32 to i64
    %1355 = arith.addi %1354, %c1049852_i64 : i64
    %1356 = llvm.getelementptr %15[%1355] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049840_i32, %1356 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_483 = arith.constant 0 : i32
    %c1049832_i32_484 = arith.constant 1049832 : i32
    %c1049840_i64 = arith.constant 1049840 : i64
    %1357 = arith.extui %c0_i32_483 : i32 to i64
    %1358 = arith.addi %1357, %c1049840_i64 : i64
    %1359 = llvm.getelementptr %15[%1358] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049832_i32_484, %1359 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_485 = arith.constant 0 : i32
    %c1049848_i32 = arith.constant 1049848 : i32
    %c1049860_i64 = arith.constant 1049860 : i64
    %1360 = arith.extui %c0_i32_485 : i32 to i64
    %1361 = arith.addi %1360, %c1049860_i64 : i64
    %1362 = llvm.getelementptr %15[%1361] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049848_i32, %1362 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_486 = arith.constant 0 : i32
    %c1049840_i32_487 = arith.constant 1049840 : i32
    %c1049848_i64 = arith.constant 1049848 : i64
    %1363 = arith.extui %c0_i32_486 : i32 to i64
    %1364 = arith.addi %1363, %c1049848_i64 : i64
    %1365 = llvm.getelementptr %15[%1364] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049840_i32_487, %1365 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_488 = arith.constant 0 : i32
    %c1049856_i32 = arith.constant 1049856 : i32
    %c1049868_i64 = arith.constant 1049868 : i64
    %1366 = arith.extui %c0_i32_488 : i32 to i64
    %1367 = arith.addi %1366, %c1049868_i64 : i64
    %1368 = llvm.getelementptr %15[%1367] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049856_i32, %1368 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_489 = arith.constant 0 : i32
    %c1049848_i32_490 = arith.constant 1049848 : i32
    %c1049856_i64 = arith.constant 1049856 : i64
    %1369 = arith.extui %c0_i32_489 : i32 to i64
    %1370 = arith.addi %1369, %c1049856_i64 : i64
    %1371 = llvm.getelementptr %15[%1370] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049848_i32_490, %1371 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_491 = arith.constant 0 : i32
    %c1049864_i32 = arith.constant 1049864 : i32
    %c1049876_i64 = arith.constant 1049876 : i64
    %1372 = arith.extui %c0_i32_491 : i32 to i64
    %1373 = arith.addi %1372, %c1049876_i64 : i64
    %1374 = llvm.getelementptr %15[%1373] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049864_i32, %1374 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_492 = arith.constant 0 : i32
    %c1049856_i32_493 = arith.constant 1049856 : i32
    %c1049864_i64 = arith.constant 1049864 : i64
    %1375 = arith.extui %c0_i32_492 : i32 to i64
    %1376 = arith.addi %1375, %c1049864_i64 : i64
    %1377 = llvm.getelementptr %15[%1376] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049856_i32_493, %1377 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_494 = arith.constant 0 : i32
    %c1049872_i32 = arith.constant 1049872 : i32
    %c1049884_i64 = arith.constant 1049884 : i64
    %1378 = arith.extui %c0_i32_494 : i32 to i64
    %1379 = arith.addi %1378, %c1049884_i64 : i64
    %1380 = llvm.getelementptr %15[%1379] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049872_i32, %1380 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_495 = arith.constant 0 : i32
    %c1049864_i32_496 = arith.constant 1049864 : i32
    %c1049872_i64 = arith.constant 1049872 : i64
    %1381 = arith.extui %c0_i32_495 : i32 to i64
    %1382 = arith.addi %1381, %c1049872_i64 : i64
    %1383 = llvm.getelementptr %15[%1382] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049864_i32_496, %1383 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_497 = arith.constant 0 : i32
    %c1049880_i32 = arith.constant 1049880 : i32
    %c1049892_i64 = arith.constant 1049892 : i64
    %1384 = arith.extui %c0_i32_497 : i32 to i64
    %1385 = arith.addi %1384, %c1049892_i64 : i64
    %1386 = llvm.getelementptr %15[%1385] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049880_i32, %1386 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_498 = arith.constant 0 : i32
    %c1049872_i32_499 = arith.constant 1049872 : i32
    %c1049880_i64 = arith.constant 1049880 : i64
    %1387 = arith.extui %c0_i32_498 : i32 to i64
    %1388 = arith.addi %1387, %c1049880_i64 : i64
    %1389 = llvm.getelementptr %15[%1388] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049872_i32_499, %1389 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_500 = arith.constant 0 : i32
    %c1049888_i32 = arith.constant 1049888 : i32
    %c1049900_i64 = arith.constant 1049900 : i64
    %1390 = arith.extui %c0_i32_500 : i32 to i64
    %1391 = arith.addi %1390, %c1049900_i64 : i64
    %1392 = llvm.getelementptr %15[%1391] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049888_i32, %1392 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_501 = arith.constant 0 : i32
    %c1049880_i32_502 = arith.constant 1049880 : i32
    %c1049888_i64 = arith.constant 1049888 : i64
    %1393 = arith.extui %c0_i32_501 : i32 to i64
    %1394 = arith.addi %1393, %c1049888_i64 : i64
    %1395 = llvm.getelementptr %15[%1394] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049880_i32_502, %1395 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_503 = arith.constant 0 : i32
    %c1049896_i32 = arith.constant 1049896 : i32
    %c1049908_i64 = arith.constant 1049908 : i64
    %1396 = arith.extui %c0_i32_503 : i32 to i64
    %1397 = arith.addi %1396, %c1049908_i64 : i64
    %1398 = llvm.getelementptr %15[%1397] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049896_i32, %1398 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_504 = arith.constant 0 : i32
    %c1049888_i32_505 = arith.constant 1049888 : i32
    %c1049896_i64 = arith.constant 1049896 : i64
    %1399 = arith.extui %c0_i32_504 : i32 to i64
    %1400 = arith.addi %1399, %c1049896_i64 : i64
    %1401 = llvm.getelementptr %15[%1400] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049888_i32_505, %1401 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_506 = arith.constant 0 : i32
    %c1049904_i32 = arith.constant 1049904 : i32
    %c1049916_i64 = arith.constant 1049916 : i64
    %1402 = arith.extui %c0_i32_506 : i32 to i64
    %1403 = arith.addi %1402, %c1049916_i64 : i64
    %1404 = llvm.getelementptr %15[%1403] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049904_i32, %1404 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_507 = arith.constant 0 : i32
    %c1049896_i32_508 = arith.constant 1049896 : i32
    %c1049904_i64 = arith.constant 1049904 : i64
    %1405 = arith.extui %c0_i32_507 : i32 to i64
    %1406 = arith.addi %1405, %c1049904_i64 : i64
    %1407 = llvm.getelementptr %15[%1406] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049896_i32_508, %1407 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_509 = arith.constant 0 : i32
    %c1049912_i32 = arith.constant 1049912 : i32
    %c1049924_i64 = arith.constant 1049924 : i64
    %1408 = arith.extui %c0_i32_509 : i32 to i64
    %1409 = arith.addi %1408, %c1049924_i64 : i64
    %1410 = llvm.getelementptr %15[%1409] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049912_i32, %1410 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_510 = arith.constant 0 : i32
    %c1049904_i32_511 = arith.constant 1049904 : i32
    %c1049912_i64 = arith.constant 1049912 : i64
    %1411 = arith.extui %c0_i32_510 : i32 to i64
    %1412 = arith.addi %1411, %c1049912_i64 : i64
    %1413 = llvm.getelementptr %15[%1412] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049904_i32_511, %1413 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_512 = arith.constant 0 : i32
    %c1049920_i32 = arith.constant 1049920 : i32
    %c1049932_i64 = arith.constant 1049932 : i64
    %1414 = arith.extui %c0_i32_512 : i32 to i64
    %1415 = arith.addi %1414, %c1049932_i64 : i64
    %1416 = llvm.getelementptr %15[%1415] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049920_i32, %1416 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_513 = arith.constant 0 : i32
    %c1049912_i32_514 = arith.constant 1049912 : i32
    %c1049920_i64 = arith.constant 1049920 : i64
    %1417 = arith.extui %c0_i32_513 : i32 to i64
    %1418 = arith.addi %1417, %c1049920_i64 : i64
    %1419 = llvm.getelementptr %15[%1418] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049912_i32_514, %1419 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_515 = arith.constant 0 : i32
    %c1049928_i32 = arith.constant 1049928 : i32
    %c1049940_i64 = arith.constant 1049940 : i64
    %1420 = arith.extui %c0_i32_515 : i32 to i64
    %1421 = arith.addi %1420, %c1049940_i64 : i64
    %1422 = llvm.getelementptr %15[%1421] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049928_i32, %1422 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_516 = arith.constant 0 : i32
    %c1049920_i32_517 = arith.constant 1049920 : i32
    %c1049928_i64 = arith.constant 1049928 : i64
    %1423 = arith.extui %c0_i32_516 : i32 to i64
    %1424 = arith.addi %1423, %c1049928_i64 : i64
    %1425 = llvm.getelementptr %15[%1424] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049920_i32_517, %1425 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_518 = arith.constant 0 : i32
    %c1049936_i32 = arith.constant 1049936 : i32
    %c1049948_i64 = arith.constant 1049948 : i64
    %1426 = arith.extui %c0_i32_518 : i32 to i64
    %1427 = arith.addi %1426, %c1049948_i64 : i64
    %1428 = llvm.getelementptr %15[%1427] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049936_i32, %1428 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_519 = arith.constant 0 : i32
    %c1049928_i32_520 = arith.constant 1049928 : i32
    %c1049936_i64 = arith.constant 1049936 : i64
    %1429 = arith.extui %c0_i32_519 : i32 to i64
    %1430 = arith.addi %1429, %c1049936_i64 : i64
    %1431 = llvm.getelementptr %15[%1430] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049928_i32_520, %1431 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_521 = arith.constant 0 : i32
    %c1049944_i32 = arith.constant 1049944 : i32
    %c1049956_i64 = arith.constant 1049956 : i64
    %1432 = arith.extui %c0_i32_521 : i32 to i64
    %1433 = arith.addi %1432, %c1049956_i64 : i64
    %1434 = llvm.getelementptr %15[%1433] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049944_i32, %1434 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_522 = arith.constant 0 : i32
    %c1049936_i32_523 = arith.constant 1049936 : i32
    %c1049944_i64 = arith.constant 1049944 : i64
    %1435 = arith.extui %c0_i32_522 : i32 to i64
    %1436 = arith.addi %1435, %c1049944_i64 : i64
    %1437 = llvm.getelementptr %15[%1436] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049936_i32_523, %1437 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_524 = arith.constant 0 : i32
    %c1049952_i32 = arith.constant 1049952 : i32
    %c1049964_i64 = arith.constant 1049964 : i64
    %1438 = arith.extui %c0_i32_524 : i32 to i64
    %1439 = arith.addi %1438, %c1049964_i64 : i64
    %1440 = llvm.getelementptr %15[%1439] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049952_i32, %1440 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_525 = arith.constant 0 : i32
    %c1049944_i32_526 = arith.constant 1049944 : i32
    %c1049952_i64 = arith.constant 1049952 : i64
    %1441 = arith.extui %c0_i32_525 : i32 to i64
    %1442 = arith.addi %1441, %c1049952_i64 : i64
    %1443 = llvm.getelementptr %15[%1442] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049944_i32_526, %1443 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_527 = arith.constant 0 : i32
    %1444 = llvm.load %6 : !llvm.ptr -> i32
    %c15_i32_528 = arith.constant 15 : i32
    %1445 = arith.addi %1444, %c15_i32_528 : i32
    %c-8_i32_529 = arith.constant -8 : i32
    %1446 = arith.andi %1445, %c-8_i32_529 : i32
    llvm.store %1446, %0 : i32, !llvm.ptr
    %c-8_i32_530 = arith.constant -8 : i32
    %1447 = arith.addi %1446, %c-8_i32_530 : i32
    llvm.store %1447, %2 : i32, !llvm.ptr
    %c1049988_i64_531 = arith.constant 1049988 : i64
    %1448 = arith.extui %c0_i32_527 : i32 to i64
    %1449 = arith.addi %1448, %c1049988_i64_531 : i64
    %1450 = llvm.getelementptr %15[%1449] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1447, %1450 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_532 = arith.constant 0 : i32
    %c1049952_i32_533 = arith.constant 1049952 : i32
    %c1049960_i64 = arith.constant 1049960 : i64
    %1451 = arith.extui %c0_i32_532 : i32 to i64
    %1452 = arith.addi %1451, %c1049960_i64 : i64
    %1453 = llvm.getelementptr %15[%1452] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049952_i32_533, %1453 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_534 = arith.constant 0 : i32
    %1454 = llvm.load %6 : !llvm.ptr -> i32
    %1455 = llvm.load %0 : !llvm.ptr -> i32
    %1456 = arith.subi %1454, %1455 : i32
    %1457 = llvm.load %9 : !llvm.ptr -> i32
    %c-40_i32 = arith.constant -40 : i32
    %1458 = arith.addi %1457, %c-40_i32 : i32
    llvm.store %1458, %0 : i32, !llvm.ptr
    %1459 = arith.addi %1456, %1458 : i32
    %c8_i32_535 = arith.constant 8 : i32
    %1460 = arith.addi %1459, %c8_i32_535 : i32
    llvm.store %1460, %7 : i32, !llvm.ptr
    %c1049980_i64_536 = arith.constant 1049980 : i64
    %1461 = arith.extui %c0_i32_534 : i32 to i64
    %1462 = arith.addi %1461, %c1049980_i64_536 : i64
    %1463 = llvm.getelementptr %15[%1462] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1460, %1463 {alignment = 1 : i64} : i32, !llvm.ptr
    %1464 = llvm.load %2 : !llvm.ptr -> i32
    %1465 = llvm.load %7 : !llvm.ptr -> i32
    %c1_i32_537 = arith.constant 1 : i32
    %1466 = arith.ori %1465, %c1_i32_537 : i32
    %c4_i64_538 = arith.constant 4 : i64
    %1467 = arith.extui %1464 : i32 to i64
    %1468 = arith.addi %1467, %c4_i64_538 : i64
    %1469 = llvm.getelementptr %15[%1468] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1466, %1469 {alignment = 1 : i64} : i32, !llvm.ptr
    %1470 = llvm.load %6 : !llvm.ptr -> i32
    %1471 = llvm.load %0 : !llvm.ptr -> i32
    %1472 = arith.addi %1470, %1471 : i32
    %c40_i32_539 = arith.constant 40 : i32
    %c4_i64_540 = arith.constant 4 : i64
    %1473 = arith.extui %1472 : i32 to i64
    %1474 = arith.addi %1473, %c4_i64_540 : i64
    %1475 = llvm.getelementptr %15[%1474] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c40_i32_539, %1475 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_541 = arith.constant 0 : i32
    %c2097152_i32_542 = arith.constant 2097152 : i32
    %c1050000_i64_543 = arith.constant 1050000 : i64
    %1476 = arith.extui %c0_i32_541 : i32 to i64
    %1477 = arith.addi %1476, %c1050000_i64_543 : i64
    %1478 = llvm.getelementptr %15[%1477] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2097152_i32_542, %1478 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb100
  ^bb120:  // 2 preds: ^bb113, ^bb122
    %c0_i32_544 = arith.constant 0 : i32
    %1479 = llvm.load %6 : !llvm.ptr -> i32
    %c1050004_i64_545 = arith.constant 1050004 : i64
    %1480 = arith.extui %c0_i32_544 : i32 to i64
    %1481 = arith.addi %1480, %c1050004_i64_545 : i64
    %1482 = llvm.getelementptr %15[%1481] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1479, %1482 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb119
  ^bb121:  // pred: ^bb113
    %1483 = llvm.load %6 : !llvm.ptr -> i32
    %1484 = llvm.load %0 : !llvm.ptr -> i32
    %1485 = arith.cmpi uge, %1483, %1484 : i32
    %1486 = arith.extui %1485 : i1 to i32
    %c0_i32_546 = arith.constant 0 : i32
    %1487 = arith.cmpi ne, %1486, %c0_i32_546 : i32
    cf.cond_br %1487, ^bb119, ^bb122
  ^bb122:  // pred: ^bb121
    cf.br ^bb120
  ^bb123:  // pred: ^bb112
    %1488 = llvm.load %7 : !llvm.ptr -> i32
    %1489 = llvm.load %2 : !llvm.ptr -> i32
    %1490 = arith.cmpi ugt, %1488, %1489 : i32
    %1491 = arith.extui %1490 : i1 to i32
    %c0_i32_547 = arith.constant 0 : i32
    %1492 = arith.cmpi ne, %1491, %c0_i32_547 : i32
    cf.cond_br %1492, ^bb111, ^bb124
  ^bb124:  // pred: ^bb123
    %1493 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64_548 = arith.constant 12 : i64
    %1494 = arith.extui %1493 : i32 to i64
    %1495 = arith.addi %1494, %c12_i64_548 : i64
    %1496 = llvm.getelementptr %15[%1495] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1497 = llvm.load volatile %1496 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1497, %7 : i32, !llvm.ptr
    %c1_i32_549 = arith.constant 1 : i32
    %1498 = arith.andi %1497, %c1_i32_549 : i32
    %c0_i32_550 = arith.constant 0 : i32
    %1499 = arith.cmpi ne, %1498, %c0_i32_550 : i32
    cf.cond_br %1499, ^bb111, ^bb125
  ^bb125:  // pred: ^bb124
    %1500 = llvm.load %7 : !llvm.ptr -> i32
    %c1_i32_551 = arith.constant 1 : i32
    %c31_i32_552 = arith.constant 31 : i32
    %1501 = arith.cmpi ule, %c1_i32_551, %c31_i32_552 : i32
    %1502 = scf.if %1501 -> (i32) {
      %2086 = arith.shrui %1500, %c1_i32_551 : i32
      scf.yield %2086 : i32
    } else {
      %c0_i32_749 = arith.constant 0 : i32
      scf.yield %c0_i32_749 : i32
    }
    %1503 = llvm.load %5 : !llvm.ptr -> i32
    %1504 = arith.cmpi eq, %1502, %1503 : i32
    %1505 = arith.extui %1504 : i1 to i32
    %c0_i32_553 = arith.constant 0 : i32
    %1506 = arith.cmpi ne, %1505, %c0_i32_553 : i32
    cf.cond_br %1506, ^bb104, ^bb126
  ^bb126:  // pred: ^bb125
    cf.br ^bb111
  ^bb127:  // pred: ^bb134
    %1507 = llvm.load %0 : !llvm.ptr -> i32
    %1508 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_554 = arith.constant 0 : i64
    %1509 = arith.extui %1507 : i32 to i64
    %1510 = arith.addi %1509, %c0_i64_554 : i64
    %1511 = llvm.getelementptr %15[%1510] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1508, %1511 {alignment = 1 : i64} : i32, !llvm.ptr
    %1512 = llvm.load %0 : !llvm.ptr -> i32
    %1513 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_555 = arith.constant 4 : i64
    %1514 = arith.extui %1513 : i32 to i64
    %1515 = arith.addi %1514, %c4_i64_555 : i64
    %1516 = llvm.getelementptr %15[%1515] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1517 = llvm.load volatile %1516 {alignment = 1 : i64} : !llvm.ptr -> i32
    %1518 = llvm.load %9 : !llvm.ptr -> i32
    %1519 = arith.addi %1517, %1518 : i32
    %c4_i64_556 = arith.constant 4 : i64
    %1520 = arith.extui %1512 : i32 to i64
    %1521 = arith.addi %1520, %c4_i64_556 : i64
    %1522 = llvm.getelementptr %15[%1521] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1519, %1522 {alignment = 1 : i64} : i32, !llvm.ptr
    %1523 = llvm.load %6 : !llvm.ptr -> i32
    %c15_i32_557 = arith.constant 15 : i32
    %1524 = arith.addi %1523, %c15_i32_557 : i32
    %c-8_i32_558 = arith.constant -8 : i32
    %1525 = arith.andi %1524, %c-8_i32_558 : i32
    %c-8_i32_559 = arith.constant -8 : i32
    %1526 = arith.addi %1525, %c-8_i32_559 : i32
    llvm.store %1526, %6 : i32, !llvm.ptr
    %1527 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i32_560 = arith.constant 3 : i32
    %1528 = arith.ori %1527, %c3_i32_560 : i32
    %c4_i64_561 = arith.constant 4 : i64
    %1529 = arith.extui %1526 : i32 to i64
    %1530 = arith.addi %1529, %c4_i64_561 : i64
    %1531 = llvm.getelementptr %15[%1530] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1528, %1531 {alignment = 1 : i64} : i32, !llvm.ptr
    %1532 = llvm.load %7 : !llvm.ptr -> i32
    %c15_i32_562 = arith.constant 15 : i32
    %1533 = arith.addi %1532, %c15_i32_562 : i32
    %c-8_i32_563 = arith.constant -8 : i32
    %1534 = arith.andi %1533, %c-8_i32_563 : i32
    %c-8_i32_564 = arith.constant -8 : i32
    %1535 = arith.addi %1534, %c-8_i32_564 : i32
    llvm.store %1535, %2 : i32, !llvm.ptr
    %1536 = llvm.load %6 : !llvm.ptr -> i32
    %1537 = llvm.load %3 : !llvm.ptr -> i32
    %1538 = arith.addi %1536, %1537 : i32
    llvm.store %1538, %0 : i32, !llvm.ptr
    %1539 = arith.subi %1535, %1538 : i32
    llvm.store %1539, %3 : i32, !llvm.ptr
    %1540 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_565 = arith.constant 0 : i32
    %c1049988_i64_566 = arith.constant 1049988 : i64
    %1541 = arith.extui %c0_i32_565 : i32 to i64
    %1542 = arith.addi %1541, %c1049988_i64_566 : i64
    %1543 = llvm.getelementptr %15[%1542] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1544 = llvm.load volatile %1543 {alignment = 1 : i64} : !llvm.ptr -> i32
    %1545 = arith.cmpi eq, %1540, %1544 : i32
    %1546 = arith.extui %1545 : i1 to i32
    %c0_i32_567 = arith.constant 0 : i32
    %1547 = arith.cmpi ne, %1546, %c0_i32_567 : i32
    cf.cond_br %1547, ^bb103, ^bb151
  ^bb128:  // 3 preds: ^bb129, ^bb133, ^bb135
    %c1049688_i32_568 = arith.constant 1049688 : i32
    llvm.store %c1049688_i32_568, %0 : i32, !llvm.ptr
    cf.br ^bb138
  ^bb129:  // 2 preds: ^bb130, ^bb131
    %1548 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64_569 = arith.constant 12 : i64
    %1549 = arith.extui %1548 : i32 to i64
    %1550 = arith.addi %1549, %c12_i64_569 : i64
    %1551 = llvm.getelementptr %15[%1550] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1552 = llvm.load volatile %1551 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1552, %8 : i32, !llvm.ptr
    %c1_i32_570 = arith.constant 1 : i32
    %1553 = arith.andi %1552, %c1_i32_570 : i32
    %c0_i32_571 = arith.constant 0 : i32
    %1554 = arith.cmpi ne, %1553, %c0_i32_571 : i32
    cf.cond_br %1554, ^bb128, ^bb134
  ^bb130:  // no predecessors
    cf.br ^bb129
  ^bb131:  // 2 preds: ^bb111, ^bb132
    %1555 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_572 = arith.constant 0 : i64
    %1556 = arith.extui %1555 : i32 to i64
    %1557 = arith.addi %1556, %c0_i64_572 : i64
    %1558 = llvm.getelementptr %15[%1557] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1559 = llvm.load volatile %1558 {alignment = 1 : i64} : !llvm.ptr -> i32
    %1560 = llvm.load %7 : !llvm.ptr -> i32
    %1561 = arith.cmpi eq, %1559, %1560 : i32
    %1562 = arith.extui %1561 : i1 to i32
    %c0_i32_573 = arith.constant 0 : i32
    %1563 = arith.cmpi ne, %1562, %c0_i32_573 : i32
    cf.cond_br %1563, ^bb129, ^bb132
  ^bb132:  // pred: ^bb131
    %1564 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_574 = arith.constant 8 : i64
    %1565 = arith.extui %1564 : i32 to i64
    %1566 = arith.addi %1565, %c8_i64_574 : i64
    %1567 = llvm.getelementptr %15[%1566] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1568 = llvm.load volatile %1567 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1568, %0 : i32, !llvm.ptr
    %c0_i32_575 = arith.constant 0 : i32
    %1569 = arith.cmpi ne, %1568, %c0_i32_575 : i32
    cf.cond_br %1569, ^bb131, ^bb133
  ^bb133:  // pred: ^bb132
    cf.br ^bb128
  ^bb134:  // pred: ^bb129
    %1570 = llvm.load %8 : !llvm.ptr -> i32
    %c1_i32_576 = arith.constant 1 : i32
    %c31_i32_577 = arith.constant 31 : i32
    %1571 = arith.cmpi ule, %c1_i32_576, %c31_i32_577 : i32
    %1572 = scf.if %1571 -> (i32) {
      %2086 = arith.shrui %1570, %c1_i32_576 : i32
      scf.yield %2086 : i32
    } else {
      %c0_i32_749 = arith.constant 0 : i32
      scf.yield %c0_i32_749 : i32
    }
    %1573 = llvm.load %5 : !llvm.ptr -> i32
    %1574 = arith.cmpi eq, %1572, %1573 : i32
    %1575 = arith.extui %1574 : i1 to i32
    %c0_i32_578 = arith.constant 0 : i32
    %1576 = arith.cmpi ne, %1575, %c0_i32_578 : i32
    cf.cond_br %1576, ^bb127, ^bb135
  ^bb135:  // pred: ^bb134
    cf.br ^bb128
  ^bb136:  // 2 preds: ^bb137, ^bb140
    %c0_i32_579 = arith.constant 0 : i32
    %1577 = llvm.load %6 : !llvm.ptr -> i32
    %c15_i32_580 = arith.constant 15 : i32
    %1578 = arith.addi %1577, %c15_i32_580 : i32
    %c-8_i32_581 = arith.constant -8 : i32
    %1579 = arith.andi %1578, %c-8_i32_581 : i32
    llvm.store %1579, %0 : i32, !llvm.ptr
    %c-8_i32_582 = arith.constant -8 : i32
    %1580 = arith.addi %1579, %c-8_i32_582 : i32
    llvm.store %1580, %8 : i32, !llvm.ptr
    %c1049988_i64_583 = arith.constant 1049988 : i64
    %1581 = arith.extui %c0_i32_579 : i32 to i64
    %1582 = arith.addi %1581, %c1049988_i64_583 : i64
    %1583 = llvm.getelementptr %15[%1582] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1580, %1583 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_584 = arith.constant 0 : i32
    %1584 = llvm.load %6 : !llvm.ptr -> i32
    %1585 = llvm.load %0 : !llvm.ptr -> i32
    %1586 = arith.subi %1584, %1585 : i32
    %1587 = llvm.load %9 : !llvm.ptr -> i32
    %c-40_i32_585 = arith.constant -40 : i32
    %1588 = arith.addi %1587, %c-40_i32_585 : i32
    llvm.store %1588, %0 : i32, !llvm.ptr
    %1589 = arith.addi %1586, %1588 : i32
    %c8_i32_586 = arith.constant 8 : i32
    %1590 = arith.addi %1589, %c8_i32_586 : i32
    llvm.store %1590, %4 : i32, !llvm.ptr
    %c1049980_i64_587 = arith.constant 1049980 : i64
    %1591 = arith.extui %c0_i32_584 : i32 to i64
    %1592 = arith.addi %1591, %c1049980_i64_587 : i64
    %1593 = llvm.getelementptr %15[%1592] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1590, %1593 {alignment = 1 : i64} : i32, !llvm.ptr
    %1594 = llvm.load %8 : !llvm.ptr -> i32
    %1595 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i32_588 = arith.constant 1 : i32
    %1596 = arith.ori %1595, %c1_i32_588 : i32
    %c4_i64_589 = arith.constant 4 : i64
    %1597 = arith.extui %1594 : i32 to i64
    %1598 = arith.addi %1597, %c4_i64_589 : i64
    %1599 = llvm.getelementptr %15[%1598] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1596, %1599 {alignment = 1 : i64} : i32, !llvm.ptr
    %1600 = llvm.load %6 : !llvm.ptr -> i32
    %1601 = llvm.load %0 : !llvm.ptr -> i32
    %1602 = arith.addi %1600, %1601 : i32
    %c40_i32_590 = arith.constant 40 : i32
    %c4_i64_591 = arith.constant 4 : i64
    %1603 = arith.extui %1602 : i32 to i64
    %1604 = arith.addi %1603, %c4_i64_591 : i64
    %1605 = llvm.getelementptr %15[%1604] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c40_i32_590, %1605 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_592 = arith.constant 0 : i32
    %c2097152_i32_593 = arith.constant 2097152 : i32
    %c1050000_i64_594 = arith.constant 1050000 : i64
    %1606 = arith.extui %c0_i32_592 : i32 to i64
    %1607 = arith.addi %1606, %c1050000_i64_594 : i64
    %1608 = llvm.getelementptr %15[%1607] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2097152_i32_593, %1608 {alignment = 1 : i64} : i32, !llvm.ptr
    %1609 = llvm.load %2 : !llvm.ptr -> i32
    %1610 = llvm.load %7 : !llvm.ptr -> i32
    %c-32_i32 = arith.constant -32 : i32
    %1611 = arith.addi %1610, %c-32_i32 : i32
    %c-8_i32_595 = arith.constant -8 : i32
    %1612 = arith.andi %1611, %c-8_i32_595 : i32
    %c-8_i32_596 = arith.constant -8 : i32
    %1613 = arith.addi %1612, %c-8_i32_596 : i32
    llvm.store %1613, %0 : i32, !llvm.ptr
    %1614 = llvm.load %0 : !llvm.ptr -> i32
    %1615 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_597 = arith.constant 16 : i32
    %1616 = arith.addi %1615, %c16_i32_597 : i32
    %1617 = arith.cmpi ult, %1614, %1616 : i32
    %1618 = arith.extui %1617 : i1 to i32
    %c0_i32_598 = arith.constant 0 : i32
    %1619 = arith.cmpi ne, %1618, %c0_i32_598 : i32
    %1620 = arith.select %1619, %1609, %1613 : i32
    llvm.store %1620, %8 : i32, !llvm.ptr
    %c27_i32 = arith.constant 27 : i32
    %c4_i64_599 = arith.constant 4 : i64
    %1621 = arith.extui %1620 : i32 to i64
    %1622 = arith.addi %1621, %c4_i64_599 : i64
    %1623 = llvm.getelementptr %15[%1622] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c27_i32, %1623 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_600 = arith.constant 0 : i32
    %c1049688_i64_601 = arith.constant 1049688 : i64
    %1624 = arith.extui %c0_i32_600 : i32 to i64
    %1625 = arith.addi %1624, %c1049688_i64_601 : i64
    %1626 = llvm.getelementptr %15[%1625] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1627 = llvm.load volatile %1626 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %1627, %10 : i64, !llvm.ptr
    %1628 = llvm.load %8 : !llvm.ptr -> i32
    %c16_i32_602 = arith.constant 16 : i32
    %1629 = arith.addi %1628, %c16_i32_602 : i32
    %c0_i32_603 = arith.constant 0 : i32
    %c1049696_i64 = arith.constant 1049696 : i64
    %1630 = arith.extui %c0_i32_603 : i32 to i64
    %1631 = arith.addi %1630, %c1049696_i64 : i64
    %1632 = llvm.getelementptr %15[%1631] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1633 = llvm.load volatile %1632 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_604 = arith.constant 0 : i64
    %1634 = arith.extui %1629 : i32 to i64
    %1635 = arith.addi %1634, %c0_i64_604 : i64
    %1636 = llvm.getelementptr %15[%1635] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1633, %1636 {alignment = 1 : i64} : i64, !llvm.ptr
    %1637 = llvm.load %8 : !llvm.ptr -> i32
    %1638 = llvm.load %10 : !llvm.ptr -> i64
    %c8_i64_605 = arith.constant 8 : i64
    %1639 = arith.extui %1637 : i32 to i64
    %1640 = arith.addi %1639, %c8_i64_605 : i64
    %1641 = llvm.getelementptr %15[%1640] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1638, %1641 {alignment = 1 : i64} : i64, !llvm.ptr
    %c0_i32_606 = arith.constant 0 : i32
    %1642 = llvm.load %5 : !llvm.ptr -> i32
    %c1049700_i64_607 = arith.constant 1049700 : i64
    %1643 = arith.extui %c0_i32_606 : i32 to i64
    %1644 = arith.addi %1643, %c1049700_i64_607 : i64
    %1645 = llvm.getelementptr %15[%1644] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1642, %1645 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_608 = arith.constant 0 : i32
    %1646 = llvm.load %9 : !llvm.ptr -> i32
    %c1049692_i64_609 = arith.constant 1049692 : i64
    %1647 = arith.extui %c0_i32_608 : i32 to i64
    %1648 = arith.addi %1647, %c1049692_i64_609 : i64
    %1649 = llvm.getelementptr %15[%1648] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1646, %1649 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_610 = arith.constant 0 : i32
    %1650 = llvm.load %6 : !llvm.ptr -> i32
    %c1049688_i64_611 = arith.constant 1049688 : i64
    %1651 = arith.extui %c0_i32_610 : i32 to i64
    %1652 = arith.addi %1651, %c1049688_i64_611 : i64
    %1653 = llvm.getelementptr %15[%1652] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1650, %1653 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_612 = arith.constant 0 : i32
    %1654 = llvm.load %8 : !llvm.ptr -> i32
    %c8_i32_613 = arith.constant 8 : i32
    %1655 = arith.addi %1654, %c8_i32_613 : i32
    %c1049696_i64_614 = arith.constant 1049696 : i64
    %1656 = arith.extui %c0_i32_612 : i32 to i64
    %1657 = arith.addi %1656, %c1049696_i64_614 : i64
    %1658 = llvm.getelementptr %15[%1657] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1655, %1658 {alignment = 1 : i64} : i32, !llvm.ptr
    %1659 = llvm.load %8 : !llvm.ptr -> i32
    %c28_i32 = arith.constant 28 : i32
    %1660 = arith.addi %1659, %c28_i32 : i32
    llvm.store %1660, %0 : i32, !llvm.ptr
    cf.br ^bb143
  ^bb137:  // no predecessors
    cf.br ^bb136
  ^bb138:  // 2 preds: ^bb128, ^bb139
    %1661 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_615 = arith.constant 0 : i64
    %1662 = arith.extui %1661 : i32 to i64
    %1663 = arith.addi %1662, %c0_i64_615 : i64
    %1664 = llvm.getelementptr %15[%1663] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1665 = llvm.load volatile %1664 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1665, %7 : i32, !llvm.ptr
    %1666 = llvm.load %2 : !llvm.ptr -> i32
    %1667 = arith.cmpi ugt, %1665, %1666 : i32
    %1668 = arith.extui %1667 : i1 to i32
    %c0_i32_616 = arith.constant 0 : i32
    %1669 = arith.cmpi ne, %1668, %c0_i32_616 : i32
    cf.cond_br %1669, ^bb139, ^bb140
  ^bb139:  // 2 preds: ^bb138, ^bb141
    %1670 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_617 = arith.constant 8 : i64
    %1671 = arith.extui %1670 : i32 to i64
    %1672 = arith.addi %1671, %c8_i64_617 : i64
    %1673 = llvm.getelementptr %15[%1672] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1674 = llvm.load volatile %1673 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1674, %0 : i32, !llvm.ptr
    cf.br ^bb138
  ^bb140:  // pred: ^bb138
    %1675 = llvm.load %2 : !llvm.ptr -> i32
    %1676 = llvm.load %7 : !llvm.ptr -> i32
    %1677 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_618 = arith.constant 4 : i64
    %1678 = arith.extui %1677 : i32 to i64
    %1679 = arith.addi %1678, %c4_i64_618 : i64
    %1680 = llvm.getelementptr %15[%1679] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1681 = llvm.load volatile %1680 {alignment = 1 : i64} : !llvm.ptr -> i32
    %1682 = arith.addi %1676, %1681 : i32
    llvm.store %1682, %7 : i32, !llvm.ptr
    %1683 = arith.cmpi ult, %1675, %1682 : i32
    %1684 = arith.extui %1683 : i1 to i32
    %c0_i32_619 = arith.constant 0 : i32
    %1685 = arith.cmpi ne, %1684, %c0_i32_619 : i32
    cf.cond_br %1685, ^bb136, ^bb141
  ^bb141:  // pred: ^bb140
    cf.br ^bb139
  ^bb142:  // pred: ^bb144
    %1686 = llvm.load %8 : !llvm.ptr -> i32
    %1687 = llvm.load %2 : !llvm.ptr -> i32
    %1688 = arith.cmpi eq, %1686, %1687 : i32
    %1689 = arith.extui %1688 : i1 to i32
    %c0_i32_620 = arith.constant 0 : i32
    %1690 = arith.cmpi ne, %1689, %c0_i32_620 : i32
    cf.cond_br %1690, ^bb100, ^bb145
  ^bb143:  // 2 preds: ^bb136, ^bb143
    %1691 = llvm.load %0 : !llvm.ptr -> i32
    %c7_i32 = arith.constant 7 : i32
    %c0_i64_621 = arith.constant 0 : i64
    %1692 = arith.extui %1691 : i32 to i64
    %1693 = arith.addi %1692, %c0_i64_621 : i64
    %1694 = llvm.getelementptr %15[%1693] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c7_i32, %1694 {alignment = 1 : i64} : i32, !llvm.ptr
    %1695 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32_622 = arith.constant 4 : i32
    %1696 = arith.addi %1695, %c4_i32_622 : i32
    llvm.store %1696, %0 : i32, !llvm.ptr
    %1697 = llvm.load %7 : !llvm.ptr -> i32
    %1698 = arith.cmpi ult, %1696, %1697 : i32
    %1699 = arith.extui %1698 : i1 to i32
    %c0_i32_623 = arith.constant 0 : i32
    %1700 = arith.cmpi ne, %1699, %c0_i32_623 : i32
    cf.cond_br %1700, ^bb143, ^bb144
  ^bb144:  // pred: ^bb143
    cf.br ^bb142
  ^bb145:  // pred: ^bb142
    %1701 = llvm.load %8 : !llvm.ptr -> i32
    %1702 = llvm.load %8 : !llvm.ptr -> i32
    %c4_i64_624 = arith.constant 4 : i64
    %1703 = arith.extui %1702 : i32 to i64
    %1704 = arith.addi %1703, %c4_i64_624 : i64
    %1705 = llvm.getelementptr %15[%1704] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1706 = llvm.load volatile %1705 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-2_i32_625 = arith.constant -2 : i32
    %1707 = arith.andi %1706, %c-2_i32_625 : i32
    %c4_i64_626 = arith.constant 4 : i64
    %1708 = arith.extui %1701 : i32 to i64
    %1709 = arith.addi %1708, %c4_i64_626 : i64
    %1710 = llvm.getelementptr %15[%1709] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1707, %1710 {alignment = 1 : i64} : i32, !llvm.ptr
    %1711 = llvm.load %2 : !llvm.ptr -> i32
    %1712 = llvm.load %8 : !llvm.ptr -> i32
    %1713 = llvm.load %2 : !llvm.ptr -> i32
    %1714 = arith.subi %1712, %1713 : i32
    llvm.store %1714, %0 : i32, !llvm.ptr
    %c1_i32_627 = arith.constant 1 : i32
    %1715 = arith.ori %1714, %c1_i32_627 : i32
    %c4_i64_628 = arith.constant 4 : i64
    %1716 = arith.extui %1711 : i32 to i64
    %1717 = arith.addi %1716, %c4_i64_628 : i64
    %1718 = llvm.getelementptr %15[%1717] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1715, %1718 {alignment = 1 : i64} : i32, !llvm.ptr
    %1719 = llvm.load %8 : !llvm.ptr -> i32
    %1720 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_629 = arith.constant 0 : i64
    %1721 = arith.extui %1719 : i32 to i64
    %1722 = arith.addi %1721, %c0_i64_629 : i64
    %1723 = llvm.getelementptr %15[%1722] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1720, %1723 {alignment = 1 : i64} : i32, !llvm.ptr
    %1724 = llvm.load %0 : !llvm.ptr -> i32
    %c256_i32_630 = arith.constant 256 : i32
    %1725 = arith.cmpi ult, %1724, %c256_i32_630 : i32
    %1726 = arith.extui %1725 : i1 to i32
    %c0_i32_631 = arith.constant 0 : i32
    %1727 = arith.cmpi ne, %1726, %c0_i32_631 : i32
    cf.cond_br %1727, ^bb146, ^bb147
  ^bb146:  // pred: ^bb145
    %1728 = llvm.load %0 : !llvm.ptr -> i32
    %c-8_i32_632 = arith.constant -8 : i32
    %1729 = arith.andi %1728, %c-8_i32_632 : i32
    %c1049704_i32_633 = arith.constant 1049704 : i32
    %1730 = arith.addi %1729, %c1049704_i32_633 : i32
    llvm.store %1730, %7 : i32, !llvm.ptr
    %c0_i32_634 = arith.constant 0 : i32
    %c1049968_i64_635 = arith.constant 1049968 : i64
    %1731 = arith.extui %c0_i32_634 : i32 to i64
    %1732 = arith.addi %1731, %c1049968_i64_635 : i64
    %1733 = llvm.getelementptr %15[%1732] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1734 = llvm.load volatile %1733 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1734, %6 : i32, !llvm.ptr
    %c1_i32_636 = arith.constant 1 : i32
    %1735 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i32_637 = arith.constant 3 : i32
    %c31_i32_638 = arith.constant 31 : i32
    %1736 = arith.cmpi ule, %c3_i32_637, %c31_i32_638 : i32
    %1737 = scf.if %1736 -> (i32) {
      %2086 = arith.shrui %1735, %c3_i32_637 : i32
      scf.yield %2086 : i32
    } else {
      %c0_i32_749 = arith.constant 0 : i32
      scf.yield %c0_i32_749 : i32
    }
    %c31_i32_639 = arith.constant 31 : i32
    %1738 = arith.cmpi ule, %1737, %c31_i32_639 : i32
    %1739 = scf.if %1738 -> (i32) {
      %2086 = arith.shli %c1_i32_636, %1737 : i32
      scf.yield %2086 : i32
    } else {
      %c0_i32_749 = arith.constant 0 : i32
      scf.yield %c0_i32_749 : i32
    }
    llvm.store %1739, %0 : i32, !llvm.ptr
    %1740 = arith.andi %1734, %1739 : i32
    %c0_i32_640 = arith.constant 0 : i32
    %1741 = arith.cmpi ne, %1740, %c0_i32_640 : i32
    cf.cond_br %1741, ^bb149, ^bb150
  ^bb147:  // pred: ^bb145
    %1742 = llvm.load %2 : !llvm.ptr -> i32
    %1743 = llvm.load %0 : !llvm.ptr -> i32
    call @f34(%arg0, %1742, %1743) : (!llvm.ptr, i32, i32) -> ()
    cf.br ^bb100
  ^bb148:  // 2 preds: ^bb149, ^bb150
    %1744 = llvm.load %7 : !llvm.ptr -> i32
    %1745 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_641 = arith.constant 8 : i64
    %1746 = arith.extui %1744 : i32 to i64
    %1747 = arith.addi %1746, %c8_i64_641 : i64
    %1748 = llvm.getelementptr %15[%1747] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1745, %1748 {alignment = 1 : i64} : i32, !llvm.ptr
    %1749 = llvm.load %0 : !llvm.ptr -> i32
    %1750 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64_642 = arith.constant 12 : i64
    %1751 = arith.extui %1749 : i32 to i64
    %1752 = arith.addi %1751, %c12_i64_642 : i64
    %1753 = llvm.getelementptr %15[%1752] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1750, %1753 {alignment = 1 : i64} : i32, !llvm.ptr
    %1754 = llvm.load %2 : !llvm.ptr -> i32
    %1755 = llvm.load %7 : !llvm.ptr -> i32
    %c12_i64_643 = arith.constant 12 : i64
    %1756 = arith.extui %1754 : i32 to i64
    %1757 = arith.addi %1756, %c12_i64_643 : i64
    %1758 = llvm.getelementptr %15[%1757] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1755, %1758 {alignment = 1 : i64} : i32, !llvm.ptr
    %1759 = llvm.load %2 : !llvm.ptr -> i32
    %1760 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_644 = arith.constant 8 : i64
    %1761 = arith.extui %1759 : i32 to i64
    %1762 = arith.addi %1761, %c8_i64_644 : i64
    %1763 = llvm.getelementptr %15[%1762] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1760, %1763 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb100
  ^bb149:  // pred: ^bb146
    %1764 = llvm.load %7 : !llvm.ptr -> i32
    %c8_i64_645 = arith.constant 8 : i64
    %1765 = arith.extui %1764 : i32 to i64
    %1766 = arith.addi %1765, %c8_i64_645 : i64
    %1767 = llvm.getelementptr %15[%1766] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1768 = llvm.load volatile %1767 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1768, %0 : i32, !llvm.ptr
    cf.br ^bb148
  ^bb150:  // pred: ^bb146
    %c0_i32_646 = arith.constant 0 : i32
    %1769 = llvm.load %6 : !llvm.ptr -> i32
    %1770 = llvm.load %0 : !llvm.ptr -> i32
    %1771 = arith.ori %1769, %1770 : i32
    %c1049968_i64_647 = arith.constant 1049968 : i64
    %1772 = arith.extui %c0_i32_646 : i32 to i64
    %1773 = arith.addi %1772, %c1049968_i64_647 : i64
    %1774 = llvm.getelementptr %15[%1773] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1771, %1774 {alignment = 1 : i64} : i32, !llvm.ptr
    %1775 = llvm.load %7 : !llvm.ptr -> i32
    llvm.store %1775, %0 : i32, !llvm.ptr
    cf.br ^bb148
  ^bb151:  // pred: ^bb127
    %1776 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_648 = arith.constant 0 : i32
    %c1049984_i64_649 = arith.constant 1049984 : i64
    %1777 = arith.extui %c0_i32_648 : i32 to i64
    %1778 = arith.addi %1777, %c1049984_i64_649 : i64
    %1779 = llvm.getelementptr %15[%1778] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1780 = llvm.load volatile %1779 {alignment = 1 : i64} : !llvm.ptr -> i32
    %1781 = arith.cmpi eq, %1776, %1780 : i32
    %1782 = arith.extui %1781 : i1 to i32
    %c0_i32_650 = arith.constant 0 : i32
    %1783 = arith.cmpi ne, %1782, %c0_i32_650 : i32
    cf.cond_br %1783, ^bb102, ^bb152
  ^bb152:  // pred: ^bb151
    %1784 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_651 = arith.constant 4 : i64
    %1785 = arith.extui %1784 : i32 to i64
    %1786 = arith.addi %1785, %c4_i64_651 : i64
    %1787 = llvm.getelementptr %15[%1786] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1788 = llvm.load volatile %1787 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1788, %7 : i32, !llvm.ptr
    %c3_i32_652 = arith.constant 3 : i32
    %1789 = arith.andi %1788, %c3_i32_652 : i32
    %c1_i32_653 = arith.constant 1 : i32
    %1790 = arith.cmpi eq, %1789, %c1_i32_653 : i32
    %1791 = arith.extui %1790 : i1 to i32
    %c0_i32_654 = arith.constant 0 : i32
    %1792 = arith.cmpi eq, %1791, %c0_i32_654 : i32
    %1793 = arith.extui %1792 : i1 to i32
    %c0_i32_655 = arith.constant 0 : i32
    %1794 = arith.cmpi ne, %1793, %c0_i32_655 : i32
    cf.cond_br %1794, ^bb153, ^bb154
  ^bb153:  // 2 preds: ^bb152, ^bb154
    %1795 = llvm.load %2 : !llvm.ptr -> i32
    %1796 = llvm.load %7 : !llvm.ptr -> i32
    %c-2_i32_656 = arith.constant -2 : i32
    %1797 = arith.andi %1796, %c-2_i32_656 : i32
    %c4_i64_657 = arith.constant 4 : i64
    %1798 = arith.extui %1795 : i32 to i64
    %1799 = arith.addi %1798, %c4_i64_657 : i64
    %1800 = llvm.getelementptr %15[%1799] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1797, %1800 {alignment = 1 : i64} : i32, !llvm.ptr
    %1801 = llvm.load %0 : !llvm.ptr -> i32
    %1802 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_658 = arith.constant 1 : i32
    %1803 = arith.ori %1802, %c1_i32_658 : i32
    %c4_i64_659 = arith.constant 4 : i64
    %1804 = arith.extui %1801 : i32 to i64
    %1805 = arith.addi %1804, %c4_i64_659 : i64
    %1806 = llvm.getelementptr %15[%1805] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1803, %1806 {alignment = 1 : i64} : i32, !llvm.ptr
    %1807 = llvm.load %0 : !llvm.ptr -> i32
    %1808 = llvm.load %3 : !llvm.ptr -> i32
    %1809 = arith.addi %1807, %1808 : i32
    %1810 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_660 = arith.constant 0 : i64
    %1811 = arith.extui %1809 : i32 to i64
    %1812 = arith.addi %1811, %c0_i64_660 : i64
    %1813 = llvm.getelementptr %15[%1812] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1810, %1813 {alignment = 1 : i64} : i32, !llvm.ptr
    %1814 = llvm.load %3 : !llvm.ptr -> i32
    %c256_i32_661 = arith.constant 256 : i32
    %1815 = arith.cmpi ult, %1814, %c256_i32_661 : i32
    %1816 = arith.extui %1815 : i1 to i32
    %c0_i32_662 = arith.constant 0 : i32
    %1817 = arith.cmpi ne, %1816, %c0_i32_662 : i32
    cf.cond_br %1817, ^bb155, ^bb156
  ^bb154:  // pred: ^bb152
    %1818 = llvm.load %2 : !llvm.ptr -> i32
    %1819 = llvm.load %7 : !llvm.ptr -> i32
    %c-8_i32_663 = arith.constant -8 : i32
    %1820 = arith.andi %1819, %c-8_i32_663 : i32
    llvm.store %1820, %7 : i32, !llvm.ptr
    call @f32(%arg0, %1818, %1820) : (!llvm.ptr, i32, i32) -> ()
    %1821 = llvm.load %7 : !llvm.ptr -> i32
    %1822 = llvm.load %3 : !llvm.ptr -> i32
    %1823 = arith.addi %1821, %1822 : i32
    llvm.store %1823, %3 : i32, !llvm.ptr
    %1824 = llvm.load %2 : !llvm.ptr -> i32
    %1825 = llvm.load %7 : !llvm.ptr -> i32
    %1826 = arith.addi %1824, %1825 : i32
    llvm.store %1826, %2 : i32, !llvm.ptr
    %c4_i64_664 = arith.constant 4 : i64
    %1827 = arith.extui %1826 : i32 to i64
    %1828 = arith.addi %1827, %c4_i64_664 : i64
    %1829 = llvm.getelementptr %15[%1828] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1830 = llvm.load volatile %1829 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1830, %7 : i32, !llvm.ptr
    cf.br ^bb153
  ^bb155:  // pred: ^bb153
    %1831 = llvm.load %3 : !llvm.ptr -> i32
    %c-8_i32_665 = arith.constant -8 : i32
    %1832 = arith.andi %1831, %c-8_i32_665 : i32
    %c1049704_i32_666 = arith.constant 1049704 : i32
    %1833 = arith.addi %1832, %c1049704_i32_666 : i32
    llvm.store %1833, %2 : i32, !llvm.ptr
    %c0_i32_667 = arith.constant 0 : i32
    %c1049968_i64_668 = arith.constant 1049968 : i64
    %1834 = arith.extui %c0_i32_667 : i32 to i64
    %1835 = arith.addi %1834, %c1049968_i64_668 : i64
    %1836 = llvm.getelementptr %15[%1835] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1837 = llvm.load volatile %1836 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1837, %7 : i32, !llvm.ptr
    %c1_i32_669 = arith.constant 1 : i32
    %1838 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i32_670 = arith.constant 3 : i32
    %c31_i32_671 = arith.constant 31 : i32
    %1839 = arith.cmpi ule, %c3_i32_670, %c31_i32_671 : i32
    %1840 = scf.if %1839 -> (i32) {
      %2086 = arith.shrui %1838, %c3_i32_670 : i32
      scf.yield %2086 : i32
    } else {
      %c0_i32_749 = arith.constant 0 : i32
      scf.yield %c0_i32_749 : i32
    }
    %c31_i32_672 = arith.constant 31 : i32
    %1841 = arith.cmpi ule, %1840, %c31_i32_672 : i32
    %1842 = scf.if %1841 -> (i32) {
      %2086 = arith.shli %c1_i32_669, %1840 : i32
      scf.yield %2086 : i32
    } else {
      %c0_i32_749 = arith.constant 0 : i32
      scf.yield %c0_i32_749 : i32
    }
    llvm.store %1842, %3 : i32, !llvm.ptr
    %1843 = arith.andi %1837, %1842 : i32
    %c0_i32_673 = arith.constant 0 : i32
    %1844 = arith.cmpi ne, %1843, %c0_i32_673 : i32
    cf.cond_br %1844, ^bb158, ^bb159
  ^bb156:  // pred: ^bb153
    %1845 = llvm.load %0 : !llvm.ptr -> i32
    %1846 = llvm.load %3 : !llvm.ptr -> i32
    call @f34(%arg0, %1845, %1846) : (!llvm.ptr, i32, i32) -> ()
    cf.br ^bb101
  ^bb157:  // 2 preds: ^bb158, ^bb159
    %1847 = llvm.load %2 : !llvm.ptr -> i32
    %1848 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_674 = arith.constant 8 : i64
    %1849 = arith.extui %1847 : i32 to i64
    %1850 = arith.addi %1849, %c8_i64_674 : i64
    %1851 = llvm.getelementptr %15[%1850] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1848, %1851 {alignment = 1 : i64} : i32, !llvm.ptr
    %1852 = llvm.load %3 : !llvm.ptr -> i32
    %1853 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64_675 = arith.constant 12 : i64
    %1854 = arith.extui %1852 : i32 to i64
    %1855 = arith.addi %1854, %c12_i64_675 : i64
    %1856 = llvm.getelementptr %15[%1855] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1853, %1856 {alignment = 1 : i64} : i32, !llvm.ptr
    %1857 = llvm.load %0 : !llvm.ptr -> i32
    %1858 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64_676 = arith.constant 12 : i64
    %1859 = arith.extui %1857 : i32 to i64
    %1860 = arith.addi %1859, %c12_i64_676 : i64
    %1861 = llvm.getelementptr %15[%1860] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1858, %1861 {alignment = 1 : i64} : i32, !llvm.ptr
    %1862 = llvm.load %0 : !llvm.ptr -> i32
    %1863 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64_677 = arith.constant 8 : i64
    %1864 = arith.extui %1862 : i32 to i64
    %1865 = arith.addi %1864, %c8_i64_677 : i64
    %1866 = llvm.getelementptr %15[%1865] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1863, %1866 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb101
  ^bb158:  // pred: ^bb155
    %1867 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_678 = arith.constant 8 : i64
    %1868 = arith.extui %1867 : i32 to i64
    %1869 = arith.addi %1868, %c8_i64_678 : i64
    %1870 = llvm.getelementptr %15[%1869] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1871 = llvm.load volatile %1870 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1871, %3 : i32, !llvm.ptr
    cf.br ^bb157
  ^bb159:  // pred: ^bb155
    %c0_i32_679 = arith.constant 0 : i32
    %1872 = llvm.load %7 : !llvm.ptr -> i32
    %1873 = llvm.load %3 : !llvm.ptr -> i32
    %1874 = arith.ori %1872, %1873 : i32
    %c1049968_i64_680 = arith.constant 1049968 : i64
    %1875 = arith.extui %c0_i32_679 : i32 to i64
    %1876 = arith.addi %1875, %c1049968_i64_680 : i64
    %1877 = llvm.getelementptr %15[%1876] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1874, %1877 {alignment = 1 : i64} : i32, !llvm.ptr
    %1878 = llvm.load %2 : !llvm.ptr -> i32
    llvm.store %1878, %3 : i32, !llvm.ptr
    cf.br ^bb157
  ^bb160:  // 2 preds: ^bb161, ^bb162
    %1879 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_681 = arith.constant 8 : i32
    %1880 = arith.addi %1879, %c8_i32_681 : i32
    llvm.store %1880, %2 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb161:  // pred: ^bb105
    %c0_i32_682 = arith.constant 0 : i32
    %1881 = llvm.load %7 : !llvm.ptr -> i32
    %c1049976_i64_683 = arith.constant 1049976 : i64
    %1882 = arith.extui %c0_i32_682 : i32 to i64
    %1883 = arith.addi %1882, %c1049976_i64_683 : i64
    %1884 = llvm.getelementptr %15[%1883] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1881, %1884 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_684 = arith.constant 0 : i32
    %1885 = llvm.load %2 : !llvm.ptr -> i32
    %1886 = llvm.load %3 : !llvm.ptr -> i32
    %1887 = arith.addi %1885, %1886 : i32
    llvm.store %1887, %6 : i32, !llvm.ptr
    %c1049984_i64_685 = arith.constant 1049984 : i64
    %1888 = arith.extui %c0_i32_684 : i32 to i64
    %1889 = arith.addi %1888, %c1049984_i64_685 : i64
    %1890 = llvm.getelementptr %15[%1889] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1887, %1890 {alignment = 1 : i64} : i32, !llvm.ptr
    %1891 = llvm.load %6 : !llvm.ptr -> i32
    %1892 = llvm.load %7 : !llvm.ptr -> i32
    %c1_i32_686 = arith.constant 1 : i32
    %1893 = arith.ori %1892, %c1_i32_686 : i32
    %c4_i64_687 = arith.constant 4 : i64
    %1894 = arith.extui %1891 : i32 to i64
    %1895 = arith.addi %1894, %c4_i64_687 : i64
    %1896 = llvm.getelementptr %15[%1895] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1893, %1896 {alignment = 1 : i64} : i32, !llvm.ptr
    %1897 = llvm.load %2 : !llvm.ptr -> i32
    %1898 = llvm.load %0 : !llvm.ptr -> i32
    %1899 = arith.addi %1897, %1898 : i32
    %1900 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_688 = arith.constant 0 : i64
    %1901 = arith.extui %1899 : i32 to i64
    %1902 = arith.addi %1901, %c0_i64_688 : i64
    %1903 = llvm.getelementptr %15[%1902] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1900, %1903 {alignment = 1 : i64} : i32, !llvm.ptr
    %1904 = llvm.load %2 : !llvm.ptr -> i32
    %1905 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i32_689 = arith.constant 3 : i32
    %1906 = arith.ori %1905, %c3_i32_689 : i32
    %c4_i64_690 = arith.constant 4 : i64
    %1907 = arith.extui %1904 : i32 to i64
    %1908 = arith.addi %1907, %c4_i64_690 : i64
    %1909 = llvm.getelementptr %15[%1908] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1906, %1909 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb160
  ^bb162:  // pred: ^bb105
    %c0_i32_691 = arith.constant 0 : i32
    %c0_i32_692 = arith.constant 0 : i32
    %c1049984_i64_693 = arith.constant 1049984 : i64
    %1910 = arith.extui %c0_i32_691 : i32 to i64
    %1911 = arith.addi %1910, %c1049984_i64_693 : i64
    %1912 = llvm.getelementptr %15[%1911] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_692, %1912 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_694 = arith.constant 0 : i32
    %c0_i32_695 = arith.constant 0 : i32
    %c1049976_i64_696 = arith.constant 1049976 : i64
    %1913 = arith.extui %c0_i32_694 : i32 to i64
    %1914 = arith.addi %1913, %c1049976_i64_696 : i64
    %1915 = llvm.getelementptr %15[%1914] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_695, %1915 {alignment = 1 : i64} : i32, !llvm.ptr
    %1916 = llvm.load %2 : !llvm.ptr -> i32
    %1917 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i32_697 = arith.constant 3 : i32
    %1918 = arith.ori %1917, %c3_i32_697 : i32
    %c4_i64_698 = arith.constant 4 : i64
    %1919 = arith.extui %1916 : i32 to i64
    %1920 = arith.addi %1919, %c4_i64_698 : i64
    %1921 = llvm.getelementptr %15[%1920] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1918, %1921 {alignment = 1 : i64} : i32, !llvm.ptr
    %1922 = llvm.load %2 : !llvm.ptr -> i32
    %1923 = llvm.load %0 : !llvm.ptr -> i32
    %1924 = arith.addi %1922, %1923 : i32
    llvm.store %1924, %0 : i32, !llvm.ptr
    %1925 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_699 = arith.constant 4 : i64
    %1926 = arith.extui %1925 : i32 to i64
    %1927 = arith.addi %1926, %c4_i64_699 : i64
    %1928 = llvm.getelementptr %15[%1927] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1929 = llvm.load volatile %1928 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_700 = arith.constant 1 : i32
    %1930 = arith.ori %1929, %c1_i32_700 : i32
    %c4_i64_701 = arith.constant 4 : i64
    %1931 = arith.extui %1924 : i32 to i64
    %1932 = arith.addi %1931, %c4_i64_701 : i64
    %1933 = llvm.getelementptr %15[%1932] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1930, %1933 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb160
  ^bb163:  // pred: ^bb100
    %c0_i32_702 = arith.constant 0 : i32
    %1934 = llvm.load %0 : !llvm.ptr -> i32
    %1935 = llvm.load %3 : !llvm.ptr -> i32
    %1936 = arith.subi %1934, %1935 : i32
    llvm.store %1936, %2 : i32, !llvm.ptr
    %c1049980_i64_703 = arith.constant 1049980 : i64
    %1937 = arith.extui %c0_i32_702 : i32 to i64
    %1938 = arith.addi %1937, %c1049980_i64_703 : i64
    %1939 = llvm.getelementptr %15[%1938] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1936, %1939 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_704 = arith.constant 0 : i32
    %c0_i32_705 = arith.constant 0 : i32
    %c1049988_i64_706 = arith.constant 1049988 : i64
    %1940 = arith.extui %c0_i32_705 : i32 to i64
    %1941 = arith.addi %1940, %c1049988_i64_706 : i64
    %1942 = llvm.getelementptr %15[%1941] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1943 = llvm.load volatile %1942 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1943, %0 : i32, !llvm.ptr
    %1944 = llvm.load %3 : !llvm.ptr -> i32
    %1945 = arith.addi %1943, %1944 : i32
    llvm.store %1945, %7 : i32, !llvm.ptr
    %c1049988_i64_707 = arith.constant 1049988 : i64
    %1946 = arith.extui %c0_i32_704 : i32 to i64
    %1947 = arith.addi %1946, %c1049988_i64_707 : i64
    %1948 = llvm.getelementptr %15[%1947] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1945, %1948 {alignment = 1 : i64} : i32, !llvm.ptr
    %1949 = llvm.load %7 : !llvm.ptr -> i32
    %1950 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_708 = arith.constant 1 : i32
    %1951 = arith.ori %1950, %c1_i32_708 : i32
    %c4_i64_709 = arith.constant 4 : i64
    %1952 = arith.extui %1949 : i32 to i64
    %1953 = arith.addi %1952, %c4_i64_709 : i64
    %1954 = llvm.getelementptr %15[%1953] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1951, %1954 {alignment = 1 : i64} : i32, !llvm.ptr
    %1955 = llvm.load %0 : !llvm.ptr -> i32
    %1956 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i32_710 = arith.constant 3 : i32
    %1957 = arith.ori %1956, %c3_i32_710 : i32
    %c4_i64_711 = arith.constant 4 : i64
    %1958 = arith.extui %1955 : i32 to i64
    %1959 = arith.addi %1958, %c4_i64_711 : i64
    %1960 = llvm.getelementptr %15[%1959] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1957, %1960 {alignment = 1 : i64} : i32, !llvm.ptr
    %1961 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_712 = arith.constant 8 : i32
    %1962 = arith.addi %1961, %c8_i32_712 : i32
    llvm.store %1962, %2 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb164:  // 2 preds: ^bb5, ^bb165
    %1963 = llvm.load %7 : !llvm.ptr -> i32
    %c20_i64_713 = arith.constant 20 : i64
    %1964 = arith.extui %1963 : i32 to i64
    %1965 = arith.addi %1964, %c20_i64_713 : i64
    %1966 = llvm.getelementptr %15[%1965] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1967 = llvm.load volatile %1966 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1967, %6 : i32, !llvm.ptr
    %c0_i32_714 = arith.constant 0 : i32
    %1968 = arith.cmpi eq, %1967, %c0_i32_714 : i32
    %1969 = arith.extui %1968 : i1 to i32
    %c0_i32_715 = arith.constant 0 : i32
    %1970 = arith.cmpi ne, %1969, %c0_i32_715 : i32
    cf.cond_br %1970, ^bb4, ^bb166
  ^bb165:  // pred: ^bb5
    %1971 = llvm.load %0 : !llvm.ptr -> i32
    %1972 = llvm.load %6 : !llvm.ptr -> i32
    %c16_i64_716 = arith.constant 16 : i64
    %1973 = arith.extui %1971 : i32 to i64
    %1974 = arith.addi %1973, %c16_i64_716 : i64
    %1975 = llvm.getelementptr %15[%1974] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1972, %1975 {alignment = 1 : i64} : i32, !llvm.ptr
    %1976 = llvm.load %6 : !llvm.ptr -> i32
    %1977 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64_717 = arith.constant 24 : i64
    %1978 = arith.extui %1976 : i32 to i64
    %1979 = arith.addi %1978, %c24_i64_717 : i64
    %1980 = llvm.getelementptr %15[%1979] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1977, %1980 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb164
  ^bb166:  // pred: ^bb164
    %1981 = llvm.load %0 : !llvm.ptr -> i32
    %1982 = llvm.load %6 : !llvm.ptr -> i32
    %c20_i64_718 = arith.constant 20 : i64
    %1983 = arith.extui %1981 : i32 to i64
    %1984 = arith.addi %1983, %c20_i64_718 : i64
    %1985 = llvm.getelementptr %15[%1984] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1982, %1985 {alignment = 1 : i64} : i32, !llvm.ptr
    %1986 = llvm.load %6 : !llvm.ptr -> i32
    %1987 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64_719 = arith.constant 24 : i64
    %1988 = arith.extui %1986 : i32 to i64
    %1989 = arith.addi %1988, %c24_i64_719 : i64
    %1990 = llvm.getelementptr %15[%1989] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1987, %1990 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb4
  ^bb167:  // 3 preds: ^bb168, ^bb171, ^bb172
    %1991 = llvm.load %7 : !llvm.ptr -> i32
    %c8_i32_720 = arith.constant 8 : i32
    %1992 = arith.addi %1991, %c8_i32_720 : i32
    llvm.store %1992, %2 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb168:  // pred: ^bb4
    %1993 = llvm.load %7 : !llvm.ptr -> i32
    %1994 = llvm.load %2 : !llvm.ptr -> i32
    %1995 = llvm.load %3 : !llvm.ptr -> i32
    %1996 = arith.addi %1994, %1995 : i32
    llvm.store %1996, %0 : i32, !llvm.ptr
    %c3_i32_721 = arith.constant 3 : i32
    %1997 = arith.ori %1996, %c3_i32_721 : i32
    %c4_i64_722 = arith.constant 4 : i64
    %1998 = arith.extui %1993 : i32 to i64
    %1999 = arith.addi %1998, %c4_i64_722 : i64
    %2000 = llvm.getelementptr %15[%1999] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1997, %2000 {alignment = 1 : i64} : i32, !llvm.ptr
    %2001 = llvm.load %7 : !llvm.ptr -> i32
    %2002 = llvm.load %0 : !llvm.ptr -> i32
    %2003 = arith.addi %2001, %2002 : i32
    llvm.store %2003, %0 : i32, !llvm.ptr
    %2004 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_723 = arith.constant 4 : i64
    %2005 = arith.extui %2004 : i32 to i64
    %2006 = arith.addi %2005, %c4_i64_723 : i64
    %2007 = llvm.getelementptr %15[%2006] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2008 = llvm.load volatile %2007 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_724 = arith.constant 1 : i32
    %2009 = arith.ori %2008, %c1_i32_724 : i32
    %c4_i64_725 = arith.constant 4 : i64
    %2010 = arith.extui %2003 : i32 to i64
    %2011 = arith.addi %2010, %c4_i64_725 : i64
    %2012 = llvm.getelementptr %15[%2011] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2009, %2012 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb167
  ^bb169:  // pred: ^bb4
    %2013 = llvm.load %7 : !llvm.ptr -> i32
    %2014 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i32_726 = arith.constant 3 : i32
    %2015 = arith.ori %2014, %c3_i32_726 : i32
    %c4_i64_727 = arith.constant 4 : i64
    %2016 = arith.extui %2013 : i32 to i64
    %2017 = arith.addi %2016, %c4_i64_727 : i64
    %2018 = llvm.getelementptr %15[%2017] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2015, %2018 {alignment = 1 : i64} : i32, !llvm.ptr
    %2019 = llvm.load %7 : !llvm.ptr -> i32
    %2020 = llvm.load %3 : !llvm.ptr -> i32
    %2021 = arith.addi %2019, %2020 : i32
    llvm.store %2021, %0 : i32, !llvm.ptr
    %2022 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_728 = arith.constant 1 : i32
    %2023 = arith.ori %2022, %c1_i32_728 : i32
    %c4_i64_729 = arith.constant 4 : i64
    %2024 = arith.extui %2021 : i32 to i64
    %2025 = arith.addi %2024, %c4_i64_729 : i64
    %2026 = llvm.getelementptr %15[%2025] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2023, %2026 {alignment = 1 : i64} : i32, !llvm.ptr
    %2027 = llvm.load %0 : !llvm.ptr -> i32
    %2028 = llvm.load %2 : !llvm.ptr -> i32
    %2029 = arith.addi %2027, %2028 : i32
    %2030 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_730 = arith.constant 0 : i64
    %2031 = arith.extui %2029 : i32 to i64
    %2032 = arith.addi %2031, %c0_i64_730 : i64
    %2033 = llvm.getelementptr %15[%2032] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2030, %2033 {alignment = 1 : i64} : i32, !llvm.ptr
    %2034 = llvm.load %2 : !llvm.ptr -> i32
    %c256_i32_731 = arith.constant 256 : i32
    %2035 = arith.cmpi ult, %2034, %c256_i32_731 : i32
    %2036 = arith.extui %2035 : i1 to i32
    %c0_i32_732 = arith.constant 0 : i32
    %2037 = arith.cmpi ne, %2036, %c0_i32_732 : i32
    cf.cond_br %2037, ^bb170, ^bb171
  ^bb170:  // pred: ^bb169
    %2038 = llvm.load %2 : !llvm.ptr -> i32
    %c-8_i32_733 = arith.constant -8 : i32
    %2039 = arith.andi %2038, %c-8_i32_733 : i32
    %c1049704_i32_734 = arith.constant 1049704 : i32
    %2040 = arith.addi %2039, %c1049704_i32_734 : i32
    llvm.store %2040, %3 : i32, !llvm.ptr
    %c0_i32_735 = arith.constant 0 : i32
    %c1049968_i64_736 = arith.constant 1049968 : i64
    %2041 = arith.extui %c0_i32_735 : i32 to i64
    %2042 = arith.addi %2041, %c1049968_i64_736 : i64
    %2043 = llvm.getelementptr %15[%2042] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2044 = llvm.load volatile %2043 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %2044, %6 : i32, !llvm.ptr
    %c1_i32_737 = arith.constant 1 : i32
    %2045 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i32_738 = arith.constant 3 : i32
    %c31_i32_739 = arith.constant 31 : i32
    %2046 = arith.cmpi ule, %c3_i32_738, %c31_i32_739 : i32
    %2047 = scf.if %2046 -> (i32) {
      %2086 = arith.shrui %2045, %c3_i32_738 : i32
      scf.yield %2086 : i32
    } else {
      %c0_i32_749 = arith.constant 0 : i32
      scf.yield %c0_i32_749 : i32
    }
    %c31_i32_740 = arith.constant 31 : i32
    %2048 = arith.cmpi ule, %2047, %c31_i32_740 : i32
    %2049 = scf.if %2048 -> (i32) {
      %2086 = arith.shli %c1_i32_737, %2047 : i32
      scf.yield %2086 : i32
    } else {
      %c0_i32_749 = arith.constant 0 : i32
      scf.yield %c0_i32_749 : i32
    }
    llvm.store %2049, %2 : i32, !llvm.ptr
    %2050 = arith.andi %2044, %2049 : i32
    %c0_i32_741 = arith.constant 0 : i32
    %2051 = arith.cmpi ne, %2050, %c0_i32_741 : i32
    cf.cond_br %2051, ^bb173, ^bb174
  ^bb171:  // pred: ^bb169
    %2052 = llvm.load %0 : !llvm.ptr -> i32
    %2053 = llvm.load %2 : !llvm.ptr -> i32
    call @f34(%arg0, %2052, %2053) : (!llvm.ptr, i32, i32) -> ()
    cf.br ^bb167
  ^bb172:  // 2 preds: ^bb173, ^bb174
    %2054 = llvm.load %3 : !llvm.ptr -> i32
    %2055 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_742 = arith.constant 8 : i64
    %2056 = arith.extui %2054 : i32 to i64
    %2057 = arith.addi %2056, %c8_i64_742 : i64
    %2058 = llvm.getelementptr %15[%2057] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2055, %2058 {alignment = 1 : i64} : i32, !llvm.ptr
    %2059 = llvm.load %2 : !llvm.ptr -> i32
    %2060 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64_743 = arith.constant 12 : i64
    %2061 = arith.extui %2059 : i32 to i64
    %2062 = arith.addi %2061, %c12_i64_743 : i64
    %2063 = llvm.getelementptr %15[%2062] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2060, %2063 {alignment = 1 : i64} : i32, !llvm.ptr
    %2064 = llvm.load %0 : !llvm.ptr -> i32
    %2065 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i64_744 = arith.constant 12 : i64
    %2066 = arith.extui %2064 : i32 to i64
    %2067 = arith.addi %2066, %c12_i64_744 : i64
    %2068 = llvm.getelementptr %15[%2067] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2065, %2068 {alignment = 1 : i64} : i32, !llvm.ptr
    %2069 = llvm.load %0 : !llvm.ptr -> i32
    %2070 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_745 = arith.constant 8 : i64
    %2071 = arith.extui %2069 : i32 to i64
    %2072 = arith.addi %2071, %c8_i64_745 : i64
    %2073 = llvm.getelementptr %15[%2072] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2070, %2073 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb167
  ^bb173:  // pred: ^bb170
    %2074 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64_746 = arith.constant 8 : i64
    %2075 = arith.extui %2074 : i32 to i64
    %2076 = arith.addi %2075, %c8_i64_746 : i64
    %2077 = llvm.getelementptr %15[%2076] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2078 = llvm.load volatile %2077 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %2078, %2 : i32, !llvm.ptr
    cf.br ^bb172
  ^bb174:  // pred: ^bb170
    %c0_i32_747 = arith.constant 0 : i32
    %2079 = llvm.load %6 : !llvm.ptr -> i32
    %2080 = llvm.load %2 : !llvm.ptr -> i32
    %2081 = arith.ori %2079, %2080 : i32
    %c1049968_i64_748 = arith.constant 1049968 : i64
    %2082 = arith.extui %c0_i32_747 : i32 to i64
    %2083 = arith.addi %2082, %c1049968_i64_748 : i64
    %2084 = llvm.getelementptr %15[%2083] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2081, %2084 {alignment = 1 : i64} : i32, !llvm.ptr
    %2085 = llvm.load %3 : !llvm.ptr -> i32
    llvm.store %2085, %2 : i32, !llvm.ptr
    cf.br ^bb172
  }
  func.func @f37(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i64_4 = arith.constant 1 : i64
    %5 = llvm.alloca %c1_i64_4 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i64_5 = arith.constant 1 : i64
    %6 = llvm.alloca %c1_i64_5 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %7 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %7[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32_6 = arith.constant 0 : i32
    llvm.store %c0_i32_6, %2 : i32, !llvm.ptr
    %c-65587_i32 = arith.constant -65587 : i32
    %10 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_7 = arith.constant 16 : i32
    %12 = arith.cmpi ugt, %11, %c16_i32_7 : i32
    %13 = arith.extui %12 : i1 to i32
    %c0_i32_8 = arith.constant 0 : i32
    %14 = arith.cmpi ne, %13, %c0_i32_8 : i32
    %15 = arith.select %14, %10, %c16_i32 : i32
    llvm.store %15, %0 : i32, !llvm.ptr
    %16 = arith.subi %c-65587_i32, %15 : i32
    %17 = llvm.load %1 : !llvm.ptr -> i32
    %18 = arith.cmpi ule, %16, %17 : i32
    %19 = arith.extui %18 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %20 = arith.cmpi ne, %19, %c0_i32_9 : i32
    cf.cond_br %20, ^bb3, ^bb4
  ^bb2(%21: i32):  // pred: ^bb3
    return %21 : i32
  ^bb3:  // 3 preds: ^bb1, ^bb4, ^bb11
    %22 = llvm.load %2 : !llvm.ptr -> i32
    cf.br ^bb2(%22 : i32)
  ^bb4:  // pred: ^bb1
    %23 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_10 = arith.constant 16 : i32
    %24 = llvm.load %1 : !llvm.ptr -> i32
    %c11_i32 = arith.constant 11 : i32
    %25 = arith.addi %24, %c11_i32 : i32
    %c-8_i32 = arith.constant -8 : i32
    %26 = arith.andi %25, %c-8_i32 : i32
    %27 = llvm.load %1 : !llvm.ptr -> i32
    %c11_i32_11 = arith.constant 11 : i32
    %28 = arith.cmpi ult, %27, %c11_i32_11 : i32
    %29 = arith.extui %28 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %30 = arith.cmpi ne, %29, %c0_i32_12 : i32
    %31 = arith.select %30, %c16_i32_10, %26 : i32
    llvm.store %31, %3 : i32, !llvm.ptr
    %32 = arith.addi %23, %31 : i32
    %c12_i32 = arith.constant 12 : i32
    %33 = arith.addi %32, %c12_i32 : i32
    %34 = call @f36(%arg0, %33) : (!llvm.ptr, i32) -> i32
    llvm.store %34, %1 : i32, !llvm.ptr
    %c0_i32_13 = arith.constant 0 : i32
    %35 = arith.cmpi eq, %34, %c0_i32_13 : i32
    %36 = arith.extui %35 : i1 to i32
    %c0_i32_14 = arith.constant 0 : i32
    %37 = arith.cmpi ne, %36, %c0_i32_14 : i32
    cf.cond_br %37, ^bb3, ^bb5
  ^bb5:  // pred: ^bb4
    %38 = llvm.load %1 : !llvm.ptr -> i32
    %c-8_i32_15 = arith.constant -8 : i32
    %39 = arith.addi %38, %c-8_i32_15 : i32
    llvm.store %39, %2 : i32, !llvm.ptr
    %40 = llvm.load %0 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %41 = arith.addi %40, %c-1_i32 : i32
    llvm.store %41, %4 : i32, !llvm.ptr
    %42 = llvm.load %1 : !llvm.ptr -> i32
    %43 = arith.andi %41, %42 : i32
    %c0_i32_16 = arith.constant 0 : i32
    %44 = arith.cmpi ne, %43, %c0_i32_16 : i32
    cf.cond_br %44, ^bb7, ^bb8
  ^bb6:  // 3 preds: ^bb8, ^bb9, ^bb10
    %45 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %46 = arith.extui %45 : i32 to i64
    %47 = arith.addi %46, %c4_i64 : i64
    %48 = llvm.getelementptr %9[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %49 = llvm.load volatile %48 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %49, %1 : i32, !llvm.ptr
    %c3_i32 = arith.constant 3 : i32
    %50 = arith.andi %49, %c3_i32 : i32
    %c0_i32_17 = arith.constant 0 : i32
    %51 = arith.cmpi eq, %50, %c0_i32_17 : i32
    %52 = arith.extui %51 : i1 to i32
    %c0_i32_18 = arith.constant 0 : i32
    %53 = arith.cmpi ne, %52, %c0_i32_18 : i32
    cf.cond_br %53, ^bb11, ^bb12
  ^bb7:  // pred: ^bb5
    %54 = llvm.load %1 : !llvm.ptr -> i32
    %c-4_i32 = arith.constant -4 : i32
    %55 = arith.addi %54, %c-4_i32 : i32
    llvm.store %55, %5 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %56 = arith.extui %55 : i32 to i64
    %57 = arith.addi %56, %c0_i64 : i64
    %58 = llvm.getelementptr %9[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %59 = llvm.load volatile %58 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %59, %6 : i32, !llvm.ptr
    %c-8_i32_19 = arith.constant -8 : i32
    %60 = arith.andi %59, %c-8_i32_19 : i32
    %61 = llvm.load %4 : !llvm.ptr -> i32
    %62 = llvm.load %1 : !llvm.ptr -> i32
    %63 = arith.addi %61, %62 : i32
    %c0_i32_20 = arith.constant 0 : i32
    %64 = llvm.load %0 : !llvm.ptr -> i32
    %65 = arith.subi %c0_i32_20, %64 : i32
    %66 = arith.andi %63, %65 : i32
    %c-8_i32_21 = arith.constant -8 : i32
    %67 = arith.addi %66, %c-8_i32_21 : i32
    llvm.store %67, %1 : i32, !llvm.ptr
    %c0_i32_22 = arith.constant 0 : i32
    %68 = llvm.load %0 : !llvm.ptr -> i32
    %69 = llvm.load %1 : !llvm.ptr -> i32
    %70 = llvm.load %2 : !llvm.ptr -> i32
    %71 = arith.subi %69, %70 : i32
    %c16_i32_23 = arith.constant 16 : i32
    %72 = arith.cmpi ugt, %71, %c16_i32_23 : i32
    %73 = arith.extui %72 : i1 to i32
    %c0_i32_24 = arith.constant 0 : i32
    %74 = arith.cmpi ne, %73, %c0_i32_24 : i32
    %75 = arith.select %74, %c0_i32_22, %68 : i32
    %76 = arith.addi %67, %75 : i32
    llvm.store %76, %0 : i32, !llvm.ptr
    %77 = llvm.load %2 : !llvm.ptr -> i32
    %78 = arith.subi %76, %77 : i32
    llvm.store %78, %1 : i32, !llvm.ptr
    %79 = arith.subi %60, %78 : i32
    llvm.store %79, %4 : i32, !llvm.ptr
    %80 = llvm.load %6 : !llvm.ptr -> i32
    %c3_i32_25 = arith.constant 3 : i32
    %81 = arith.andi %80, %c3_i32_25 : i32
    %c0_i32_26 = arith.constant 0 : i32
    %82 = arith.cmpi eq, %81, %c0_i32_26 : i32
    %83 = arith.extui %82 : i1 to i32
    %c0_i32_27 = arith.constant 0 : i32
    %84 = arith.cmpi ne, %83, %c0_i32_27 : i32
    cf.cond_br %84, ^bb9, ^bb10
  ^bb8:  // pred: ^bb5
    %85 = llvm.load %2 : !llvm.ptr -> i32
    llvm.store %85, %0 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb9:  // pred: ^bb7
    %86 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_28 = arith.constant 0 : i64
    %87 = arith.extui %86 : i32 to i64
    %88 = arith.addi %87, %c0_i64_28 : i64
    %89 = llvm.getelementptr %9[%88] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %90 = llvm.load volatile %89 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %90, %2 : i32, !llvm.ptr
    %91 = llvm.load %0 : !llvm.ptr -> i32
    %92 = llvm.load %4 : !llvm.ptr -> i32
    %c4_i64_29 = arith.constant 4 : i64
    %93 = arith.extui %91 : i32 to i64
    %94 = arith.addi %93, %c4_i64_29 : i64
    %95 = llvm.getelementptr %9[%94] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %92, %95 {alignment = 1 : i64} : i32, !llvm.ptr
    %96 = llvm.load %0 : !llvm.ptr -> i32
    %97 = llvm.load %2 : !llvm.ptr -> i32
    %98 = llvm.load %1 : !llvm.ptr -> i32
    %99 = arith.addi %97, %98 : i32
    %c0_i64_30 = arith.constant 0 : i64
    %100 = arith.extui %96 : i32 to i64
    %101 = arith.addi %100, %c0_i64_30 : i64
    %102 = llvm.getelementptr %9[%101] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %99, %102 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb6
  ^bb10:  // pred: ^bb7
    %103 = llvm.load %0 : !llvm.ptr -> i32
    %104 = llvm.load %4 : !llvm.ptr -> i32
    %105 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_31 = arith.constant 4 : i64
    %106 = arith.extui %105 : i32 to i64
    %107 = arith.addi %106, %c4_i64_31 : i64
    %108 = llvm.getelementptr %9[%107] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %109 = llvm.load volatile %108 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32 = arith.constant 1 : i32
    %110 = arith.andi %109, %c1_i32 : i32
    %111 = arith.ori %104, %110 : i32
    %c2_i32 = arith.constant 2 : i32
    %112 = arith.ori %111, %c2_i32 : i32
    %c4_i64_32 = arith.constant 4 : i64
    %113 = arith.extui %103 : i32 to i64
    %114 = arith.addi %113, %c4_i64_32 : i64
    %115 = llvm.getelementptr %9[%114] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %112, %115 {alignment = 1 : i64} : i32, !llvm.ptr
    %116 = llvm.load %0 : !llvm.ptr -> i32
    %117 = llvm.load %4 : !llvm.ptr -> i32
    %118 = arith.addi %116, %117 : i32
    llvm.store %118, %4 : i32, !llvm.ptr
    %119 = llvm.load %4 : !llvm.ptr -> i32
    %c4_i64_33 = arith.constant 4 : i64
    %120 = arith.extui %119 : i32 to i64
    %121 = arith.addi %120, %c4_i64_33 : i64
    %122 = llvm.getelementptr %9[%121] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %123 = llvm.load volatile %122 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_34 = arith.constant 1 : i32
    %124 = arith.ori %123, %c1_i32_34 : i32
    %c4_i64_35 = arith.constant 4 : i64
    %125 = arith.extui %118 : i32 to i64
    %126 = arith.addi %125, %c4_i64_35 : i64
    %127 = llvm.getelementptr %9[%126] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %124, %127 {alignment = 1 : i64} : i32, !llvm.ptr
    %128 = llvm.load %5 : !llvm.ptr -> i32
    %129 = llvm.load %1 : !llvm.ptr -> i32
    %130 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64_36 = arith.constant 0 : i64
    %131 = arith.extui %130 : i32 to i64
    %132 = arith.addi %131, %c0_i64_36 : i64
    %133 = llvm.getelementptr %9[%132] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %134 = llvm.load volatile %133 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_37 = arith.constant 1 : i32
    %135 = arith.andi %134, %c1_i32_37 : i32
    %136 = arith.ori %129, %135 : i32
    %c2_i32_38 = arith.constant 2 : i32
    %137 = arith.ori %136, %c2_i32_38 : i32
    %c0_i64_39 = arith.constant 0 : i64
    %138 = arith.extui %128 : i32 to i64
    %139 = arith.addi %138, %c0_i64_39 : i64
    %140 = llvm.getelementptr %9[%139] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %137, %140 {alignment = 1 : i64} : i32, !llvm.ptr
    %141 = llvm.load %2 : !llvm.ptr -> i32
    %142 = llvm.load %1 : !llvm.ptr -> i32
    %143 = arith.addi %141, %142 : i32
    llvm.store %143, %4 : i32, !llvm.ptr
    %144 = llvm.load %4 : !llvm.ptr -> i32
    %c4_i64_40 = arith.constant 4 : i64
    %145 = arith.extui %144 : i32 to i64
    %146 = arith.addi %145, %c4_i64_40 : i64
    %147 = llvm.getelementptr %9[%146] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %148 = llvm.load volatile %147 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_41 = arith.constant 1 : i32
    %149 = arith.ori %148, %c1_i32_41 : i32
    %c4_i64_42 = arith.constant 4 : i64
    %150 = arith.extui %143 : i32 to i64
    %151 = arith.addi %150, %c4_i64_42 : i64
    %152 = llvm.getelementptr %9[%151] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %149, %152 {alignment = 1 : i64} : i32, !llvm.ptr
    %153 = llvm.load %2 : !llvm.ptr -> i32
    %154 = llvm.load %1 : !llvm.ptr -> i32
    call @f33(%arg0, %153, %154) : (!llvm.ptr, i32, i32) -> ()
    cf.br ^bb6
  ^bb11:  // 3 preds: ^bb6, ^bb12, ^bb13
    %155 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %156 = arith.addi %155, %c8_i32 : i32
    llvm.store %156, %2 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb12:  // pred: ^bb6
    %157 = llvm.load %1 : !llvm.ptr -> i32
    %c-8_i32_43 = arith.constant -8 : i32
    %158 = arith.andi %157, %c-8_i32_43 : i32
    llvm.store %158, %2 : i32, !llvm.ptr
    %159 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_44 = arith.constant 16 : i32
    %160 = arith.addi %159, %c16_i32_44 : i32
    %161 = arith.cmpi ule, %158, %160 : i32
    %162 = arith.extui %161 : i1 to i32
    %c0_i32_45 = arith.constant 0 : i32
    %163 = arith.cmpi ne, %162, %c0_i32_45 : i32
    cf.cond_br %163, ^bb11, ^bb13
  ^bb13:  // pred: ^bb12
    %164 = llvm.load %0 : !llvm.ptr -> i32
    %165 = llvm.load %3 : !llvm.ptr -> i32
    %166 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_46 = arith.constant 1 : i32
    %167 = arith.andi %166, %c1_i32_46 : i32
    %168 = arith.ori %165, %167 : i32
    %c2_i32_47 = arith.constant 2 : i32
    %169 = arith.ori %168, %c2_i32_47 : i32
    %c4_i64_48 = arith.constant 4 : i64
    %170 = arith.extui %164 : i32 to i64
    %171 = arith.addi %170, %c4_i64_48 : i64
    %172 = llvm.getelementptr %9[%171] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %169, %172 {alignment = 1 : i64} : i32, !llvm.ptr
    %173 = llvm.load %0 : !llvm.ptr -> i32
    %174 = llvm.load %3 : !llvm.ptr -> i32
    %175 = arith.addi %173, %174 : i32
    llvm.store %175, %1 : i32, !llvm.ptr
    %176 = llvm.load %2 : !llvm.ptr -> i32
    %177 = llvm.load %3 : !llvm.ptr -> i32
    %178 = arith.subi %176, %177 : i32
    llvm.store %178, %3 : i32, !llvm.ptr
    %c3_i32_49 = arith.constant 3 : i32
    %179 = arith.ori %178, %c3_i32_49 : i32
    %c4_i64_50 = arith.constant 4 : i64
    %180 = arith.extui %175 : i32 to i64
    %181 = arith.addi %180, %c4_i64_50 : i64
    %182 = llvm.getelementptr %9[%181] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %179, %182 {alignment = 1 : i64} : i32, !llvm.ptr
    %183 = llvm.load %0 : !llvm.ptr -> i32
    %184 = llvm.load %2 : !llvm.ptr -> i32
    %185 = arith.addi %183, %184 : i32
    llvm.store %185, %2 : i32, !llvm.ptr
    %186 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_51 = arith.constant 4 : i64
    %187 = arith.extui %186 : i32 to i64
    %188 = arith.addi %187, %c4_i64_51 : i64
    %189 = llvm.getelementptr %9[%188] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %190 = llvm.load volatile %189 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_52 = arith.constant 1 : i32
    %191 = arith.ori %190, %c1_i32_52 : i32
    %c4_i64_53 = arith.constant 4 : i64
    %192 = arith.extui %185 : i32 to i64
    %193 = arith.addi %192, %c4_i64_53 : i64
    %194 = llvm.getelementptr %9[%193] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %191, %194 {alignment = 1 : i64} : i32, !llvm.ptr
    %195 = llvm.load %1 : !llvm.ptr -> i32
    %196 = llvm.load %3 : !llvm.ptr -> i32
    call @f33(%arg0, %195, %196) : (!llvm.ptr, i32, i32) -> ()
    cf.br ^bb11
  }
  func.func @f38(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    call @f39(%arg0, %1) : (!llvm.ptr, i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f39(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %10 = arith.subi %9, %c16_i32 : i32
    llvm.store %10, %1 : i32, !llvm.ptr
    llvm.store %10, %5 : i32, !llvm.ptr
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %12 = arith.extui %11 : i32 to i64
    %13 = arith.addi %12, %c12_i64 : i64
    %14 = llvm.getelementptr %8[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %15 = llvm.load volatile %14 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %15, %2 : i32, !llvm.ptr
    %16 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %17 = arith.extui %16 : i32 to i64
    %18 = arith.addi %17, %c4_i64 : i64
    %19 = llvm.getelementptr %8[%18] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %20 = llvm.load volatile %19 {alignment = 1 : i64} : !llvm.ptr -> i32
    cf.switch %20 : i32, [
      default: ^bb4,
      0: ^bb6,
      1: ^bb5
    ]
  ^bb2:  // no predecessors
    return
  ^bb3:  // 2 preds: ^bb7, ^bb8
    %21 = llvm.load %1 : !llvm.ptr -> i32
    %22 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64_3 = arith.constant 4 : i64
    %23 = arith.extui %21 : i32 to i64
    %24 = arith.addi %23, %c4_i64_3 : i64
    %25 = llvm.getelementptr %8[%24] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %22, %25 {alignment = 1 : i64} : i32, !llvm.ptr
    %26 = llvm.load %1 : !llvm.ptr -> i32
    %27 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %28 = arith.extui %26 : i32 to i64
    %29 = arith.addi %28, %c0_i64 : i64
    %30 = llvm.getelementptr %8[%29] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %27, %30 {alignment = 1 : i64} : i32, !llvm.ptr
    %31 = llvm.load %1 : !llvm.ptr -> i32
    %c1048944_i32 = arith.constant 1048944 : i32
    %32 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %33 = arith.extui %32 : i32 to i64
    %34 = arith.addi %33, %c24_i64 : i64
    %35 = llvm.getelementptr %8[%34] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %36 = llvm.load volatile %35 {alignment = 1 : i64} : !llvm.ptr -> i32
    %37 = llvm.load %0 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %38 = arith.extui %37 : i32 to i64
    %39 = arith.addi %38, %c28_i64 : i64
    %40 = llvm.getelementptr %8[%39] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %41 = llvm.load volatile %40 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %41, %0 : i32, !llvm.ptr
    %c28_i64_4 = arith.constant 28 : i64
    %42 = arith.extui %41 : i32 to i64
    %43 = arith.addi %42, %c28_i64_4 : i64
    %44 = llvm.getelementptr %8[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %45 = llvm.load volatile %44 {alignment = 1 : i64} : !llvm.ptr -> i8
    %46 = arith.extui %45 : i8 to i32
    %47 = llvm.load %0 : !llvm.ptr -> i32
    %c29_i64 = arith.constant 29 : i64
    %48 = arith.extui %47 : i32 to i64
    %49 = arith.addi %48, %c29_i64 : i64
    %50 = llvm.getelementptr %8[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %51 = llvm.load volatile %50 {alignment = 1 : i64} : !llvm.ptr -> i8
    %52 = arith.extui %51 : i8 to i32
    call @f52(%arg0, %31, %c1048944_i32, %36, %46, %52) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    llvm.unreachable
  ^bb4:  // 3 preds: ^bb1, ^bb5, ^bb6
    %53 = llvm.load %1 : !llvm.ptr -> i32
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %c0_i64_5 = arith.constant 0 : i64
    %54 = arith.extui %53 : i32 to i64
    %55 = arith.addi %54, %c0_i64_5 : i64
    %56 = llvm.getelementptr %8[%55] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-2147483648_i32, %56 {alignment = 1 : i64} : i32, !llvm.ptr
    %57 = llvm.load %1 : !llvm.ptr -> i32
    %58 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64_6 = arith.constant 12 : i64
    %59 = arith.extui %57 : i32 to i64
    %60 = arith.addi %59, %c12_i64_6 : i64
    %61 = llvm.getelementptr %8[%60] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %58, %61 {alignment = 1 : i64} : i32, !llvm.ptr
    %62 = llvm.load %1 : !llvm.ptr -> i32
    %c1048972_i32 = arith.constant 1048972 : i32
    %63 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64_7 = arith.constant 24 : i64
    %64 = arith.extui %63 : i32 to i64
    %65 = arith.addi %64, %c24_i64_7 : i64
    %66 = llvm.getelementptr %8[%65] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %67 = llvm.load volatile %66 {alignment = 1 : i64} : !llvm.ptr -> i32
    %68 = llvm.load %0 : !llvm.ptr -> i32
    %c28_i64_8 = arith.constant 28 : i64
    %69 = arith.extui %68 : i32 to i64
    %70 = arith.addi %69, %c28_i64_8 : i64
    %71 = llvm.getelementptr %8[%70] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %72 = llvm.load volatile %71 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %72, %0 : i32, !llvm.ptr
    %c28_i64_9 = arith.constant 28 : i64
    %73 = arith.extui %72 : i32 to i64
    %74 = arith.addi %73, %c28_i64_9 : i64
    %75 = llvm.getelementptr %8[%74] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %76 = llvm.load volatile %75 {alignment = 1 : i64} : !llvm.ptr -> i8
    %77 = arith.extui %76 : i8 to i32
    %78 = llvm.load %0 : !llvm.ptr -> i32
    %c29_i64_10 = arith.constant 29 : i64
    %79 = arith.extui %78 : i32 to i64
    %80 = arith.addi %79, %c29_i64_10 : i64
    %81 = llvm.getelementptr %8[%80] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %82 = llvm.load volatile %81 {alignment = 1 : i64} : !llvm.ptr -> i8
    %83 = arith.extui %82 : i8 to i32
    call @f52(%arg0, %62, %c1048972_i32, %67, %77, %83) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    llvm.unreachable
  ^bb5:  // pred: ^bb1
    %84 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_11 = arith.constant 0 : i32
    %85 = arith.cmpi ne, %84, %c0_i32_11 : i32
    cf.cond_br %85, ^bb4, ^bb8
  ^bb6:  // pred: ^bb1
    %86 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_12 = arith.constant 0 : i32
    %87 = arith.cmpi ne, %86, %c0_i32_12 : i32
    cf.cond_br %87, ^bb4, ^bb7
  ^bb7:  // pred: ^bb6
    %c1_i32 = arith.constant 1 : i32
    llvm.store %c1_i32, %2 : i32, !llvm.ptr
    %c0_i32_13 = arith.constant 0 : i32
    llvm.store %c0_i32_13, %3 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb8:  // pred: ^bb5
    %88 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_14 = arith.constant 0 : i64
    %89 = arith.extui %88 : i32 to i64
    %90 = arith.addi %89, %c0_i64_14 : i64
    %91 = llvm.getelementptr %8[%90] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %92 = llvm.load volatile %91 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %92, %2 : i32, !llvm.ptr
    %c4_i64_15 = arith.constant 4 : i64
    %93 = arith.extui %92 : i32 to i64
    %94 = arith.addi %93, %c4_i64_15 : i64
    %95 = llvm.getelementptr %8[%94] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %96 = llvm.load volatile %95 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %96, %3 : i32, !llvm.ptr
    %97 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_16 = arith.constant 0 : i64
    %98 = arith.extui %97 : i32 to i64
    %99 = arith.addi %98, %c0_i64_16 : i64
    %100 = llvm.getelementptr %8[%99] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %101 = llvm.load volatile %100 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %101, %2 : i32, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f40(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %4 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %9 = arith.subi %8, %c48_i32 : i32
    llvm.store %9, %2 : i32, !llvm.ptr
    llvm.store %9, %4 : i32, !llvm.ptr
    %c0_i32_2 = arith.constant 0 : i32
    %c1049536_i64 = arith.constant 1049536 : i64
    %10 = arith.extui %c0_i32_2 : i32 to i64
    %11 = arith.addi %10, %c1049536_i64 : i64
    %12 = llvm.getelementptr %7[%11] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %13 = llvm.load volatile %12 {alignment = 1 : i64} : !llvm.ptr -> i8
    %14 = arith.extui %13 : i8 to i32
    %c0_i32_3 = arith.constant 0 : i32
    %15 = arith.cmpi eq, %14, %c0_i32_3 : i32
    %16 = arith.extui %15 : i1 to i32
    %c0_i32_4 = arith.constant 0 : i32
    %17 = arith.cmpi ne, %16, %c0_i32_4 : i32
    cf.cond_br %17, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // pred: ^bb1
    %18 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i32_5 = arith.constant 48 : i32
    %19 = arith.addi %18, %c48_i32_5 : i32
    llvm.store %19, %4 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %20 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c12_i64 = arith.constant 12 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c12_i64 : i64
    %23 = llvm.getelementptr %7[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i32, %23 {alignment = 1 : i64} : i32, !llvm.ptr
    %24 = llvm.load %2 : !llvm.ptr -> i32
    %c1048856_i32 = arith.constant 1048856 : i32
    %c8_i64 = arith.constant 8 : i64
    %25 = arith.extui %24 : i32 to i64
    %26 = arith.addi %25, %c8_i64 : i64
    %27 = llvm.getelementptr %7[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1048856_i32, %27 {alignment = 1 : i64} : i32, !llvm.ptr
    %28 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_6 = arith.constant 1 : i64
    %c20_i64 = arith.constant 20 : i64
    %29 = arith.extui %28 : i32 to i64
    %30 = arith.addi %29, %c20_i64 : i64
    %31 = llvm.getelementptr %7[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_6, %31 {alignment = 1 : i64} : i64, !llvm.ptr
    %32 = llvm.load %2 : !llvm.ptr -> i32
    %33 = llvm.load %1 : !llvm.ptr -> i32
    %c44_i64 = arith.constant 44 : i64
    %34 = arith.extui %32 : i32 to i64
    %35 = arith.addi %34, %c44_i64 : i64
    %36 = llvm.getelementptr %7[%35] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %33, %36 {alignment = 1 : i64} : i32, !llvm.ptr
    %37 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i32_7 = arith.constant 2 : i32
    %38 = arith.extui %c2_i32_7 : i32 to i64
    %c32_i64 = arith.constant 32 : i64
    %c63_i64 = arith.constant 63 : i64
    %39 = arith.cmpi ule, %c32_i64, %c63_i64 : i64
    %40 = scf.if %39 -> (i64) {
      %56 = arith.shli %38, %c32_i64 : i64
      scf.yield %56 : i64
    } else {
      %c0_i64 = arith.constant 0 : i64
      scf.yield %c0_i64 : i64
    }
    %41 = llvm.load %2 : !llvm.ptr -> i32
    %c44_i32 = arith.constant 44 : i32
    %42 = arith.addi %41, %c44_i32 : i32
    %43 = arith.extui %42 : i32 to i64
    %44 = arith.ori %40, %43 : i64
    %c32_i64_8 = arith.constant 32 : i64
    %45 = arith.extui %37 : i32 to i64
    %46 = arith.addi %45, %c32_i64_8 : i64
    %47 = llvm.getelementptr %7[%46] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %44, %47 {alignment = 1 : i64} : i64, !llvm.ptr
    %48 = llvm.load %2 : !llvm.ptr -> i32
    %49 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %50 = arith.addi %49, %c32_i32 : i32
    %c16_i64 = arith.constant 16 : i64
    %51 = arith.extui %48 : i32 to i64
    %52 = arith.addi %51, %c16_i64 : i64
    %53 = llvm.getelementptr %7[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %50, %53 {alignment = 1 : i64} : i32, !llvm.ptr
    %54 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %55 = arith.addi %54, %c8_i32 : i32
    %c1048896_i32 = arith.constant 1048896 : i32
    call @f70(%arg0, %55, %c1048896_i32) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  }
  func.func @f41(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %c9_i32 = arith.constant 9 : i32
    %3 = arith.cmpi ult, %2, %c9_i32 : i32
    %4 = arith.extui %3 : i1 to i32
    %c0_i32 = arith.constant 0 : i32
    %5 = arith.cmpi ne, %4, %c0_i32 : i32
    cf.cond_br %5, ^bb3, ^bb4
  ^bb2(%6: i32):  // 2 preds: ^bb3, ^bb4
    return %6 : i32
  ^bb3:  // pred: ^bb1
    %7 = llvm.load %0 : !llvm.ptr -> i32
    %8 = call @f36(%arg0, %7) : (!llvm.ptr, i32) -> i32
    cf.br ^bb2(%8 : i32)
  ^bb4:  // pred: ^bb1
    %9 = llvm.load %1 : !llvm.ptr -> i32
    %10 = llvm.load %0 : !llvm.ptr -> i32
    %11 = call @f37(%arg0, %9, %10) : (!llvm.ptr, i32, i32) -> i32
    cf.br ^bb2(%11 : i32)
  }
  func.func @f42(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %5 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %0 : !llvm.ptr -> i32
    %c-4_i32 = arith.constant -4 : i32
    %9 = arith.addi %8, %c-4_i32 : i32
    %c0_i64 = arith.constant 0 : i64
    %10 = arith.extui %9 : i32 to i64
    %11 = arith.addi %10, %c0_i64 : i64
    %12 = llvm.getelementptr %7[%11] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %13 = llvm.load volatile %12 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %13, %3 : i32, !llvm.ptr
    %c-8_i32 = arith.constant -8 : i32
    %14 = arith.andi %13, %c-8_i32 : i32
    llvm.store %14, %4 : i32, !llvm.ptr
    %c4_i32 = arith.constant 4 : i32
    %c8_i32 = arith.constant 8 : i32
    %15 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %16 = arith.andi %15, %c3_i32 : i32
    llvm.store %16, %3 : i32, !llvm.ptr
    %c0_i32_4 = arith.constant 0 : i32
    %17 = arith.cmpi ne, %16, %c0_i32_4 : i32
    %18 = arith.select %17, %c4_i32, %c8_i32 : i32
    %19 = llvm.load %1 : !llvm.ptr -> i32
    %20 = arith.addi %18, %19 : i32
    %21 = arith.cmpi ult, %14, %20 : i32
    %22 = arith.extui %21 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %23 = arith.cmpi ne, %22, %c0_i32_5 : i32
    cf.cond_br %23, ^bb4, ^bb5
  ^bb2:  // pred: ^bb6
    return
  ^bb3:  // pred: ^bb7
    %c1048756_i32 = arith.constant 1048756 : i32
    %c46_i32 = arith.constant 46 : i32
    %c1048804_i32 = arith.constant 1048804 : i32
    call @f73(%arg0, %c1048756_i32, %c46_i32, %c1048804_i32) : (!llvm.ptr, i32, i32, i32) -> ()
    llvm.unreachable
  ^bb4:  // pred: ^bb1
    %c1048693_i32 = arith.constant 1048693 : i32
    %c46_i32_6 = arith.constant 46 : i32
    %c1048740_i32 = arith.constant 1048740 : i32
    call @f73(%arg0, %c1048693_i32, %c46_i32_6, %c1048740_i32) : (!llvm.ptr, i32, i32, i32) -> ()
    llvm.unreachable
  ^bb5:  // pred: ^bb1
    %24 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_7 = arith.constant 0 : i32
    %25 = arith.cmpi eq, %24, %c0_i32_7 : i32
    %26 = arith.extui %25 : i1 to i32
    %c0_i32_8 = arith.constant 0 : i32
    %27 = arith.cmpi ne, %26, %c0_i32_8 : i32
    cf.cond_br %27, ^bb6, ^bb7
  ^bb6:  // 2 preds: ^bb5, ^bb8
    %28 = llvm.load %0 : !llvm.ptr -> i32
    call @f35(%arg0, %28) : (!llvm.ptr, i32) -> ()
    cf.br ^bb2
  ^bb7:  // pred: ^bb5
    %29 = llvm.load %4 : !llvm.ptr -> i32
    %30 = llvm.load %1 : !llvm.ptr -> i32
    %c39_i32 = arith.constant 39 : i32
    %31 = arith.addi %30, %c39_i32 : i32
    %32 = arith.cmpi ugt, %29, %31 : i32
    %33 = arith.extui %32 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %34 = arith.cmpi ne, %33, %c0_i32_9 : i32
    cf.cond_br %34, ^bb3, ^bb8
  ^bb8:  // pred: ^bb7
    cf.br ^bb6
  }
  func.func @f43(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i64_4 = arith.constant 1 : i64
    %5 = llvm.alloca %c1_i64_4 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i64_5 = arith.constant 1 : i64
    %6 = llvm.alloca %c1_i64_5 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i64_6 = arith.constant 1 : i64
    %7 = llvm.alloca %c1_i64_6 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i64_7 = arith.constant 1 : i64
    %8 = llvm.alloca %c1_i64_7 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i64_8 = arith.constant 1 : i64
    %9 = llvm.alloca %c1_i64_8 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %10 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %c-4_i32 = arith.constant -4 : i32
    %14 = arith.addi %13, %c-4_i32 : i32
    llvm.store %14, %4 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %15 = arith.extui %14 : i32 to i64
    %16 = arith.addi %15, %c0_i64 : i64
    %17 = llvm.getelementptr %12[%16] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %18 = llvm.load volatile %17 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %18, %5 : i32, !llvm.ptr
    %c-8_i32 = arith.constant -8 : i32
    %19 = arith.andi %18, %c-8_i32 : i32
    llvm.store %19, %6 : i32, !llvm.ptr
    %c4_i32 = arith.constant 4 : i32
    %c8_i32 = arith.constant 8 : i32
    %20 = llvm.load %5 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %21 = arith.andi %20, %c3_i32 : i32
    llvm.store %21, %7 : i32, !llvm.ptr
    %c0_i32_9 = arith.constant 0 : i32
    %22 = arith.cmpi ne, %21, %c0_i32_9 : i32
    %23 = arith.select %22, %c4_i32, %c8_i32 : i32
    %24 = llvm.load %1 : !llvm.ptr -> i32
    %25 = arith.addi %23, %24 : i32
    %26 = arith.cmpi ult, %19, %25 : i32
    %27 = arith.extui %26 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %28 = arith.cmpi ne, %27, %c0_i32_10 : i32
    cf.cond_br %28, ^bb7, ^bb8
  ^bb2(%29: i32):  // 10 preds: ^bb3, ^bb12, ^bb16, ^bb23, ^bb25, ^bb27, ^bb34, ^bb35, ^bb37, ^bb41
    return %29 : i32
  ^bb3:  // pred: ^bb24
    %30 = llvm.load %4 : !llvm.ptr -> i32
    %31 = llvm.load %1 : !llvm.ptr -> i32
    %32 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i32 = arith.constant 1 : i32
    %33 = arith.andi %32, %c1_i32 : i32
    %34 = arith.ori %31, %33 : i32
    %c2_i32 = arith.constant 2 : i32
    %35 = arith.ori %34, %c2_i32 : i32
    %c0_i64_11 = arith.constant 0 : i64
    %36 = arith.extui %30 : i32 to i64
    %37 = arith.addi %36, %c0_i64_11 : i64
    %38 = llvm.getelementptr %12[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %35, %38 {alignment = 1 : i64} : i32, !llvm.ptr
    %39 = llvm.load %8 : !llvm.ptr -> i32
    %40 = llvm.load %1 : !llvm.ptr -> i32
    %41 = arith.addi %39, %40 : i32
    llvm.store %41, %3 : i32, !llvm.ptr
    %42 = llvm.load %7 : !llvm.ptr -> i32
    %43 = llvm.load %1 : !llvm.ptr -> i32
    %44 = arith.subi %42, %43 : i32
    llvm.store %44, %1 : i32, !llvm.ptr
    %c1_i32_12 = arith.constant 1 : i32
    %45 = arith.ori %44, %c1_i32_12 : i32
    %c4_i64 = arith.constant 4 : i64
    %46 = arith.extui %41 : i32 to i64
    %47 = arith.addi %46, %c4_i64 : i64
    %48 = llvm.getelementptr %12[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %45, %48 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_13 = arith.constant 0 : i32
    %49 = llvm.load %1 : !llvm.ptr -> i32
    %c1049980_i64 = arith.constant 1049980 : i64
    %50 = arith.extui %c0_i32_13 : i32 to i64
    %51 = arith.addi %50, %c1049980_i64 : i64
    %52 = llvm.getelementptr %12[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %49, %52 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_14 = arith.constant 0 : i32
    %53 = llvm.load %3 : !llvm.ptr -> i32
    %c1049988_i64 = arith.constant 1049988 : i64
    %54 = arith.extui %c0_i32_14 : i32 to i64
    %55 = arith.addi %54, %c1049988_i64 : i64
    %56 = llvm.getelementptr %12[%55] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %53, %56 {alignment = 1 : i64} : i32, !llvm.ptr
    %57 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%57 : i32)
  ^bb4:  // pred: ^bb44
    %c1048756_i32 = arith.constant 1048756 : i32
    %c46_i32 = arith.constant 46 : i32
    %c1048804_i32 = arith.constant 1048804 : i32
    call @f73(%arg0, %c1048756_i32, %c46_i32, %c1048804_i32) : (!llvm.ptr, i32, i32, i32) -> ()
    llvm.unreachable
  ^bb5:  // pred: ^bb13
    %c1048693_i32 = arith.constant 1048693 : i32
    %c46_i32_15 = arith.constant 46 : i32
    %c1048740_i32 = arith.constant 1048740 : i32
    call @f73(%arg0, %c1048693_i32, %c46_i32_15, %c1048740_i32) : (!llvm.ptr, i32, i32, i32) -> ()
    llvm.unreachable
  ^bb6:  // pred: ^bb10
    %c1048756_i32_16 = arith.constant 1048756 : i32
    %c46_i32_17 = arith.constant 46 : i32
    %c1048804_i32_18 = arith.constant 1048804 : i32
    call @f73(%arg0, %c1048756_i32_16, %c46_i32_17, %c1048804_i32_18) : (!llvm.ptr, i32, i32, i32) -> ()
    llvm.unreachable
  ^bb7:  // pred: ^bb1
    %c1048693_i32_19 = arith.constant 1048693 : i32
    %c46_i32_20 = arith.constant 46 : i32
    %c1048740_i32_21 = arith.constant 1048740 : i32
    call @f73(%arg0, %c1048693_i32_19, %c46_i32_20, %c1048740_i32_21) : (!llvm.ptr, i32, i32, i32) -> ()
    llvm.unreachable
  ^bb8:  // pred: ^bb1
    %58 = llvm.load %1 : !llvm.ptr -> i32
    %c39_i32 = arith.constant 39 : i32
    %59 = arith.addi %58, %c39_i32 : i32
    llvm.store %59, %8 : i32, !llvm.ptr
    %60 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i32_22 = arith.constant 0 : i32
    %61 = arith.cmpi eq, %60, %c0_i32_22 : i32
    %62 = arith.extui %61 : i1 to i32
    %c0_i32_23 = arith.constant 0 : i32
    %63 = arith.cmpi ne, %62, %c0_i32_23 : i32
    cf.cond_br %63, ^bb9, ^bb10
  ^bb9:  // 2 preds: ^bb8, ^bb11
    %64 = llvm.load %2 : !llvm.ptr -> i32
    %c9_i32 = arith.constant 9 : i32
    %65 = arith.cmpi ult, %64, %c9_i32 : i32
    %66 = arith.extui %65 : i1 to i32
    %c0_i32_24 = arith.constant 0 : i32
    %67 = arith.cmpi ne, %66, %c0_i32_24 : i32
    cf.cond_br %67, ^bb14, ^bb15
  ^bb10:  // pred: ^bb8
    %68 = llvm.load %6 : !llvm.ptr -> i32
    %69 = llvm.load %8 : !llvm.ptr -> i32
    %70 = arith.cmpi ugt, %68, %69 : i32
    %71 = arith.extui %70 : i1 to i32
    %c0_i32_25 = arith.constant 0 : i32
    %72 = arith.cmpi ne, %71, %c0_i32_25 : i32
    cf.cond_br %72, ^bb6, ^bb11
  ^bb11:  // pred: ^bb10
    cf.br ^bb9
  ^bb12:  // 3 preds: ^bb14, ^bb18, ^bb43
    %73 = llvm.load %2 : !llvm.ptr -> i32
    cf.br ^bb2(%73 : i32)
  ^bb13:  // pred: ^bb15
    %74 = llvm.load %2 : !llvm.ptr -> i32
    %75 = llvm.load %0 : !llvm.ptr -> i32
    %76 = llvm.load %1 : !llvm.ptr -> i32
    %77 = llvm.load %3 : !llvm.ptr -> i32
    %78 = llvm.load %1 : !llvm.ptr -> i32
    %79 = llvm.load %3 : !llvm.ptr -> i32
    %80 = arith.cmpi ult, %78, %79 : i32
    %81 = arith.extui %80 : i1 to i32
    %c0_i32_26 = arith.constant 0 : i32
    %82 = arith.cmpi ne, %81, %c0_i32_26 : i32
    %83 = arith.select %82, %76, %77 : i32
    %84 = call @f88(%arg0, %74, %75, %83) : (!llvm.ptr, i32, i32, i32) -> i32
    %85 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_27 = arith.constant 0 : i64
    %86 = arith.extui %85 : i32 to i64
    %87 = arith.addi %86, %c0_i64_27 : i64
    %88 = llvm.getelementptr %12[%87] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %89 = llvm.load volatile %88 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %89, %3 : i32, !llvm.ptr
    %c-8_i32_28 = arith.constant -8 : i32
    %90 = arith.andi %89, %c-8_i32_28 : i32
    llvm.store %90, %7 : i32, !llvm.ptr
    %c4_i32_29 = arith.constant 4 : i32
    %c8_i32_30 = arith.constant 8 : i32
    %91 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i32_31 = arith.constant 3 : i32
    %92 = arith.andi %91, %c3_i32_31 : i32
    llvm.store %92, %3 : i32, !llvm.ptr
    %c0_i32_32 = arith.constant 0 : i32
    %93 = arith.cmpi ne, %92, %c0_i32_32 : i32
    %94 = arith.select %93, %c4_i32_29, %c8_i32_30 : i32
    %95 = llvm.load %1 : !llvm.ptr -> i32
    %96 = arith.addi %94, %95 : i32
    %97 = arith.cmpi ult, %90, %96 : i32
    %98 = arith.extui %97 : i1 to i32
    %c0_i32_33 = arith.constant 0 : i32
    %99 = arith.cmpi ne, %98, %c0_i32_33 : i32
    cf.cond_br %99, ^bb5, ^bb42
  ^bb14:  // pred: ^bb9
    %c0_i32_34 = arith.constant 0 : i32
    llvm.store %c0_i32_34, %2 : i32, !llvm.ptr
    %100 = llvm.load %3 : !llvm.ptr -> i32
    %c-65588_i32 = arith.constant -65588 : i32
    %101 = arith.cmpi ugt, %100, %c-65588_i32 : i32
    %102 = arith.extui %101 : i1 to i32
    %c0_i32_35 = arith.constant 0 : i32
    %103 = arith.cmpi ne, %102, %c0_i32_35 : i32
    cf.cond_br %103, ^bb12, ^bb17
  ^bb15:  // pred: ^bb9
    %104 = llvm.load %2 : !llvm.ptr -> i32
    %105 = llvm.load %3 : !llvm.ptr -> i32
    %106 = call @f37(%arg0, %104, %105) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %106, %2 : i32, !llvm.ptr
    %c0_i32_36 = arith.constant 0 : i32
    %107 = arith.cmpi ne, %106, %c0_i32_36 : i32
    cf.cond_br %107, ^bb13, ^bb16
  ^bb16:  // pred: ^bb15
    %c0_i32_37 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32_37 : i32)
  ^bb17:  // pred: ^bb14
    %c16_i32 = arith.constant 16 : i32
    %108 = llvm.load %3 : !llvm.ptr -> i32
    %c11_i32 = arith.constant 11 : i32
    %109 = arith.addi %108, %c11_i32 : i32
    %c-8_i32_38 = arith.constant -8 : i32
    %110 = arith.andi %109, %c-8_i32_38 : i32
    %111 = llvm.load %3 : !llvm.ptr -> i32
    %c11_i32_39 = arith.constant 11 : i32
    %112 = arith.cmpi ult, %111, %c11_i32_39 : i32
    %113 = arith.extui %112 : i1 to i32
    %c0_i32_40 = arith.constant 0 : i32
    %114 = arith.cmpi ne, %113, %c0_i32_40 : i32
    %115 = arith.select %114, %c16_i32, %110 : i32
    llvm.store %115, %1 : i32, !llvm.ptr
    %116 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i32_41 = arith.constant 0 : i32
    %117 = arith.cmpi ne, %116, %c0_i32_41 : i32
    cf.cond_br %117, ^bb19, ^bb20
  ^bb18:  // 7 preds: ^bb20, ^bb21, ^bb22, ^bb26, ^bb31, ^bb32, ^bb40
    %118 = llvm.load %3 : !llvm.ptr -> i32
    %119 = call @f36(%arg0, %118) : (!llvm.ptr, i32) -> i32
    llvm.store %119, %1 : i32, !llvm.ptr
    %c0_i32_42 = arith.constant 0 : i32
    %120 = arith.cmpi eq, %119, %c0_i32_42 : i32
    %121 = arith.extui %120 : i1 to i32
    %c0_i32_43 = arith.constant 0 : i32
    %122 = arith.cmpi ne, %121, %c0_i32_43 : i32
    cf.cond_br %122, ^bb12, ^bb41
  ^bb19:  // pred: ^bb17
    %123 = llvm.load %0 : !llvm.ptr -> i32
    %c-8_i32_44 = arith.constant -8 : i32
    %124 = arith.addi %123, %c-8_i32_44 : i32
    llvm.store %124, %8 : i32, !llvm.ptr
    %125 = llvm.load %6 : !llvm.ptr -> i32
    %126 = arith.addi %124, %125 : i32
    llvm.store %126, %7 : i32, !llvm.ptr
    %127 = llvm.load %6 : !llvm.ptr -> i32
    %128 = llvm.load %1 : !llvm.ptr -> i32
    %129 = arith.cmpi uge, %127, %128 : i32
    %130 = arith.extui %129 : i1 to i32
    %c0_i32_45 = arith.constant 0 : i32
    %131 = arith.cmpi ne, %130, %c0_i32_45 : i32
    cf.cond_br %131, ^bb28, ^bb29
  ^bb20:  // pred: ^bb17
    %132 = llvm.load %1 : !llvm.ptr -> i32
    %c256_i32 = arith.constant 256 : i32
    %133 = arith.cmpi ult, %132, %c256_i32 : i32
    %134 = arith.extui %133 : i1 to i32
    %c0_i32_46 = arith.constant 0 : i32
    %135 = arith.cmpi ne, %134, %c0_i32_46 : i32
    cf.cond_br %135, ^bb18, ^bb21
  ^bb21:  // pred: ^bb20
    %136 = llvm.load %6 : !llvm.ptr -> i32
    %137 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32_47 = arith.constant 4 : i32
    %138 = arith.ori %137, %c4_i32_47 : i32
    %139 = arith.cmpi ult, %136, %138 : i32
    %140 = arith.extui %139 : i1 to i32
    %c0_i32_48 = arith.constant 0 : i32
    %141 = arith.cmpi ne, %140, %c0_i32_48 : i32
    cf.cond_br %141, ^bb18, ^bb22
  ^bb22:  // pred: ^bb21
    %142 = llvm.load %6 : !llvm.ptr -> i32
    %143 = llvm.load %1 : !llvm.ptr -> i32
    %144 = arith.subi %142, %143 : i32
    %c131073_i32 = arith.constant 131073 : i32
    %145 = arith.cmpi uge, %144, %c131073_i32 : i32
    %146 = arith.extui %145 : i1 to i32
    %c0_i32_49 = arith.constant 0 : i32
    %147 = arith.cmpi ne, %146, %c0_i32_49 : i32
    cf.cond_br %147, ^bb18, ^bb23
  ^bb23:  // pred: ^bb22
    %148 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%148 : i32)
  ^bb24:  // pred: ^bb29
    %c0_i32_50 = arith.constant 0 : i32
    %c1049980_i64_51 = arith.constant 1049980 : i64
    %149 = arith.extui %c0_i32_50 : i32 to i64
    %150 = arith.addi %149, %c1049980_i64_51 : i64
    %151 = llvm.getelementptr %12[%150] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %152 = llvm.load volatile %151 {alignment = 1 : i64} : !llvm.ptr -> i32
    %153 = llvm.load %6 : !llvm.ptr -> i32
    %154 = arith.addi %152, %153 : i32
    llvm.store %154, %7 : i32, !llvm.ptr
    %155 = llvm.load %1 : !llvm.ptr -> i32
    %156 = arith.cmpi ugt, %154, %155 : i32
    %157 = arith.extui %156 : i1 to i32
    %c0_i32_52 = arith.constant 0 : i32
    %158 = arith.cmpi ne, %157, %c0_i32_52 : i32
    cf.cond_br %158, ^bb3, ^bb40
  ^bb25:  // pred: ^bb28
    %159 = llvm.load %4 : !llvm.ptr -> i32
    %160 = llvm.load %1 : !llvm.ptr -> i32
    %161 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i32_53 = arith.constant 1 : i32
    %162 = arith.andi %161, %c1_i32_53 : i32
    %163 = arith.ori %160, %162 : i32
    %c2_i32_54 = arith.constant 2 : i32
    %164 = arith.ori %163, %c2_i32_54 : i32
    %c0_i64_55 = arith.constant 0 : i64
    %165 = arith.extui %159 : i32 to i64
    %166 = arith.addi %165, %c0_i64_55 : i64
    %167 = llvm.getelementptr %12[%166] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %164, %167 {alignment = 1 : i64} : i32, !llvm.ptr
    %168 = llvm.load %8 : !llvm.ptr -> i32
    %169 = llvm.load %1 : !llvm.ptr -> i32
    %170 = arith.addi %168, %169 : i32
    llvm.store %170, %1 : i32, !llvm.ptr
    %171 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i32_56 = arith.constant 3 : i32
    %172 = arith.ori %171, %c3_i32_56 : i32
    %c4_i64_57 = arith.constant 4 : i64
    %173 = arith.extui %170 : i32 to i64
    %174 = arith.addi %173, %c4_i64_57 : i64
    %175 = llvm.getelementptr %12[%174] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %172, %175 {alignment = 1 : i64} : i32, !llvm.ptr
    %176 = llvm.load %7 : !llvm.ptr -> i32
    %177 = llvm.load %7 : !llvm.ptr -> i32
    %c4_i64_58 = arith.constant 4 : i64
    %178 = arith.extui %177 : i32 to i64
    %179 = arith.addi %178, %c4_i64_58 : i64
    %180 = llvm.getelementptr %12[%179] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %181 = llvm.load volatile %180 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_59 = arith.constant 1 : i32
    %182 = arith.ori %181, %c1_i32_59 : i32
    %c4_i64_60 = arith.constant 4 : i64
    %183 = arith.extui %176 : i32 to i64
    %184 = arith.addi %183, %c4_i64_60 : i64
    %185 = llvm.getelementptr %12[%184] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %182, %185 {alignment = 1 : i64} : i32, !llvm.ptr
    %186 = llvm.load %1 : !llvm.ptr -> i32
    %187 = llvm.load %3 : !llvm.ptr -> i32
    call @f33(%arg0, %186, %187) : (!llvm.ptr, i32, i32) -> ()
    %188 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%188 : i32)
  ^bb26:  // pred: ^bb30
    %c0_i32_61 = arith.constant 0 : i32
    %c1049976_i64 = arith.constant 1049976 : i64
    %189 = arith.extui %c0_i32_61 : i32 to i64
    %190 = arith.addi %189, %c1049976_i64 : i64
    %191 = llvm.getelementptr %12[%190] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %192 = llvm.load volatile %191 {alignment = 1 : i64} : !llvm.ptr -> i32
    %193 = llvm.load %6 : !llvm.ptr -> i32
    %194 = arith.addi %192, %193 : i32
    llvm.store %194, %7 : i32, !llvm.ptr
    %195 = llvm.load %1 : !llvm.ptr -> i32
    %196 = arith.cmpi ult, %194, %195 : i32
    %197 = arith.extui %196 : i1 to i32
    %c0_i32_62 = arith.constant 0 : i32
    %198 = arith.cmpi ne, %197, %c0_i32_62 : i32
    cf.cond_br %198, ^bb18, ^bb36
  ^bb27:  // pred: ^bb33
    %199 = llvm.load %4 : !llvm.ptr -> i32
    %200 = llvm.load %5 : !llvm.ptr -> i32
    %201 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_63 = arith.constant 0 : i64
    %202 = arith.extui %201 : i32 to i64
    %203 = arith.addi %202, %c0_i64_63 : i64
    %204 = llvm.getelementptr %12[%203] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %205 = llvm.load volatile %204 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_64 = arith.constant 1 : i32
    %206 = arith.andi %205, %c1_i32_64 : i32
    %207 = arith.ori %200, %206 : i32
    %c2_i32_65 = arith.constant 2 : i32
    %208 = arith.ori %207, %c2_i32_65 : i32
    %c0_i64_66 = arith.constant 0 : i64
    %209 = arith.extui %199 : i32 to i64
    %210 = arith.addi %209, %c0_i64_66 : i64
    %211 = llvm.getelementptr %12[%210] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %208, %211 {alignment = 1 : i64} : i32, !llvm.ptr
    %212 = llvm.load %8 : !llvm.ptr -> i32
    %213 = llvm.load %5 : !llvm.ptr -> i32
    %214 = arith.addi %212, %213 : i32
    llvm.store %214, %1 : i32, !llvm.ptr
    %215 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_67 = arith.constant 4 : i64
    %216 = arith.extui %215 : i32 to i64
    %217 = arith.addi %216, %c4_i64_67 : i64
    %218 = llvm.getelementptr %12[%217] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %219 = llvm.load volatile %218 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_68 = arith.constant 1 : i32
    %220 = arith.ori %219, %c1_i32_68 : i32
    %c4_i64_69 = arith.constant 4 : i64
    %221 = arith.extui %214 : i32 to i64
    %222 = arith.addi %221, %c4_i64_69 : i64
    %223 = llvm.getelementptr %12[%222] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %220, %223 {alignment = 1 : i64} : i32, !llvm.ptr
    %224 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%224 : i32)
  ^bb28:  // pred: ^bb19
    %225 = llvm.load %6 : !llvm.ptr -> i32
    %226 = llvm.load %1 : !llvm.ptr -> i32
    %227 = arith.subi %225, %226 : i32
    llvm.store %227, %3 : i32, !llvm.ptr
    %c15_i32 = arith.constant 15 : i32
    %228 = arith.cmpi ugt, %227, %c15_i32 : i32
    %229 = arith.extui %228 : i1 to i32
    %c0_i32_70 = arith.constant 0 : i32
    %230 = arith.cmpi ne, %229, %c0_i32_70 : i32
    cf.cond_br %230, ^bb25, ^bb35
  ^bb29:  // pred: ^bb19
    %231 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i32_71 = arith.constant 0 : i32
    %c1049988_i64_72 = arith.constant 1049988 : i64
    %232 = arith.extui %c0_i32_71 : i32 to i64
    %233 = arith.addi %232, %c1049988_i64_72 : i64
    %234 = llvm.getelementptr %12[%233] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %235 = llvm.load volatile %234 {alignment = 1 : i64} : !llvm.ptr -> i32
    %236 = arith.cmpi eq, %231, %235 : i32
    %237 = arith.extui %236 : i1 to i32
    %c0_i32_73 = arith.constant 0 : i32
    %238 = arith.cmpi ne, %237, %c0_i32_73 : i32
    cf.cond_br %238, ^bb24, ^bb30
  ^bb30:  // pred: ^bb29
    %239 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i32_74 = arith.constant 0 : i32
    %c1049984_i64 = arith.constant 1049984 : i64
    %240 = arith.extui %c0_i32_74 : i32 to i64
    %241 = arith.addi %240, %c1049984_i64 : i64
    %242 = llvm.getelementptr %12[%241] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %243 = llvm.load volatile %242 {alignment = 1 : i64} : !llvm.ptr -> i32
    %244 = arith.cmpi eq, %239, %243 : i32
    %245 = arith.extui %244 : i1 to i32
    %c0_i32_75 = arith.constant 0 : i32
    %246 = arith.cmpi ne, %245, %c0_i32_75 : i32
    cf.cond_br %246, ^bb26, ^bb31
  ^bb31:  // pred: ^bb30
    %247 = llvm.load %7 : !llvm.ptr -> i32
    %c4_i64_76 = arith.constant 4 : i64
    %248 = arith.extui %247 : i32 to i64
    %249 = arith.addi %248, %c4_i64_76 : i64
    %250 = llvm.getelementptr %12[%249] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %251 = llvm.load volatile %250 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %251, %5 : i32, !llvm.ptr
    %c2_i32_77 = arith.constant 2 : i32
    %252 = arith.andi %251, %c2_i32_77 : i32
    %c0_i32_78 = arith.constant 0 : i32
    %253 = arith.cmpi ne, %252, %c0_i32_78 : i32
    cf.cond_br %253, ^bb18, ^bb32
  ^bb32:  // pred: ^bb31
    %254 = llvm.load %5 : !llvm.ptr -> i32
    %c-8_i32_79 = arith.constant -8 : i32
    %255 = arith.andi %254, %c-8_i32_79 : i32
    llvm.store %255, %9 : i32, !llvm.ptr
    %256 = llvm.load %6 : !llvm.ptr -> i32
    %257 = arith.addi %255, %256 : i32
    llvm.store %257, %5 : i32, !llvm.ptr
    %258 = llvm.load %1 : !llvm.ptr -> i32
    %259 = arith.cmpi ult, %257, %258 : i32
    %260 = arith.extui %259 : i1 to i32
    %c0_i32_80 = arith.constant 0 : i32
    %261 = arith.cmpi ne, %260, %c0_i32_80 : i32
    cf.cond_br %261, ^bb18, ^bb33
  ^bb33:  // pred: ^bb32
    %262 = llvm.load %7 : !llvm.ptr -> i32
    %263 = llvm.load %9 : !llvm.ptr -> i32
    call @f32(%arg0, %262, %263) : (!llvm.ptr, i32, i32) -> ()
    %264 = llvm.load %5 : !llvm.ptr -> i32
    %265 = llvm.load %1 : !llvm.ptr -> i32
    %266 = arith.subi %264, %265 : i32
    llvm.store %266, %3 : i32, !llvm.ptr
    %c16_i32_81 = arith.constant 16 : i32
    %267 = arith.cmpi ult, %266, %c16_i32_81 : i32
    %268 = arith.extui %267 : i1 to i32
    %c0_i32_82 = arith.constant 0 : i32
    %269 = arith.cmpi ne, %268, %c0_i32_82 : i32
    cf.cond_br %269, ^bb27, ^bb34
  ^bb34:  // pred: ^bb33
    %270 = llvm.load %4 : !llvm.ptr -> i32
    %271 = llvm.load %1 : !llvm.ptr -> i32
    %272 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_83 = arith.constant 0 : i64
    %273 = arith.extui %272 : i32 to i64
    %274 = arith.addi %273, %c0_i64_83 : i64
    %275 = llvm.getelementptr %12[%274] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %276 = llvm.load volatile %275 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_84 = arith.constant 1 : i32
    %277 = arith.andi %276, %c1_i32_84 : i32
    %278 = arith.ori %271, %277 : i32
    %c2_i32_85 = arith.constant 2 : i32
    %279 = arith.ori %278, %c2_i32_85 : i32
    %c0_i64_86 = arith.constant 0 : i64
    %280 = arith.extui %270 : i32 to i64
    %281 = arith.addi %280, %c0_i64_86 : i64
    %282 = llvm.getelementptr %12[%281] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %279, %282 {alignment = 1 : i64} : i32, !llvm.ptr
    %283 = llvm.load %8 : !llvm.ptr -> i32
    %284 = llvm.load %1 : !llvm.ptr -> i32
    %285 = arith.addi %283, %284 : i32
    llvm.store %285, %1 : i32, !llvm.ptr
    %286 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i32_87 = arith.constant 3 : i32
    %287 = arith.ori %286, %c3_i32_87 : i32
    %c4_i64_88 = arith.constant 4 : i64
    %288 = arith.extui %285 : i32 to i64
    %289 = arith.addi %288, %c4_i64_88 : i64
    %290 = llvm.getelementptr %12[%289] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %287, %290 {alignment = 1 : i64} : i32, !llvm.ptr
    %291 = llvm.load %8 : !llvm.ptr -> i32
    %292 = llvm.load %5 : !llvm.ptr -> i32
    %293 = arith.addi %291, %292 : i32
    llvm.store %293, %2 : i32, !llvm.ptr
    %294 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_89 = arith.constant 4 : i64
    %295 = arith.extui %294 : i32 to i64
    %296 = arith.addi %295, %c4_i64_89 : i64
    %297 = llvm.getelementptr %12[%296] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %298 = llvm.load volatile %297 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_90 = arith.constant 1 : i32
    %299 = arith.ori %298, %c1_i32_90 : i32
    %c4_i64_91 = arith.constant 4 : i64
    %300 = arith.extui %293 : i32 to i64
    %301 = arith.addi %300, %c4_i64_91 : i64
    %302 = llvm.getelementptr %12[%301] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %299, %302 {alignment = 1 : i64} : i32, !llvm.ptr
    %303 = llvm.load %1 : !llvm.ptr -> i32
    %304 = llvm.load %3 : !llvm.ptr -> i32
    call @f33(%arg0, %303, %304) : (!llvm.ptr, i32, i32) -> ()
    %305 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%305 : i32)
  ^bb35:  // pred: ^bb28
    %306 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%306 : i32)
  ^bb36:  // pred: ^bb26
    %307 = llvm.load %7 : !llvm.ptr -> i32
    %308 = llvm.load %1 : !llvm.ptr -> i32
    %309 = arith.subi %307, %308 : i32
    llvm.store %309, %3 : i32, !llvm.ptr
    %c15_i32_92 = arith.constant 15 : i32
    %310 = arith.cmpi ugt, %309, %c15_i32_92 : i32
    %311 = arith.extui %310 : i1 to i32
    %c0_i32_93 = arith.constant 0 : i32
    %312 = arith.cmpi ne, %311, %c0_i32_93 : i32
    cf.cond_br %312, ^bb38, ^bb39
  ^bb37:  // 2 preds: ^bb38, ^bb39
    %c0_i32_94 = arith.constant 0 : i32
    %313 = llvm.load %1 : !llvm.ptr -> i32
    %c1049984_i64_95 = arith.constant 1049984 : i64
    %314 = arith.extui %c0_i32_94 : i32 to i64
    %315 = arith.addi %314, %c1049984_i64_95 : i64
    %316 = llvm.getelementptr %12[%315] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %313, %316 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_96 = arith.constant 0 : i32
    %317 = llvm.load %3 : !llvm.ptr -> i32
    %c1049976_i64_97 = arith.constant 1049976 : i64
    %318 = arith.extui %c0_i32_96 : i32 to i64
    %319 = arith.addi %318, %c1049976_i64_97 : i64
    %320 = llvm.getelementptr %12[%319] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %317, %320 {alignment = 1 : i64} : i32, !llvm.ptr
    %321 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%321 : i32)
  ^bb38:  // pred: ^bb36
    %322 = llvm.load %4 : !llvm.ptr -> i32
    %323 = llvm.load %1 : !llvm.ptr -> i32
    %324 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i32_98 = arith.constant 1 : i32
    %325 = arith.andi %324, %c1_i32_98 : i32
    %326 = arith.ori %323, %325 : i32
    %c2_i32_99 = arith.constant 2 : i32
    %327 = arith.ori %326, %c2_i32_99 : i32
    %c0_i64_100 = arith.constant 0 : i64
    %328 = arith.extui %322 : i32 to i64
    %329 = arith.addi %328, %c0_i64_100 : i64
    %330 = llvm.getelementptr %12[%329] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %327, %330 {alignment = 1 : i64} : i32, !llvm.ptr
    %331 = llvm.load %8 : !llvm.ptr -> i32
    %332 = llvm.load %1 : !llvm.ptr -> i32
    %333 = arith.addi %331, %332 : i32
    llvm.store %333, %1 : i32, !llvm.ptr
    %334 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_101 = arith.constant 1 : i32
    %335 = arith.ori %334, %c1_i32_101 : i32
    %c4_i64_102 = arith.constant 4 : i64
    %336 = arith.extui %333 : i32 to i64
    %337 = arith.addi %336, %c4_i64_102 : i64
    %338 = llvm.getelementptr %12[%337] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %335, %338 {alignment = 1 : i64} : i32, !llvm.ptr
    %339 = llvm.load %8 : !llvm.ptr -> i32
    %340 = llvm.load %7 : !llvm.ptr -> i32
    %341 = arith.addi %339, %340 : i32
    llvm.store %341, %2 : i32, !llvm.ptr
    %342 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_103 = arith.constant 0 : i64
    %343 = arith.extui %341 : i32 to i64
    %344 = arith.addi %343, %c0_i64_103 : i64
    %345 = llvm.getelementptr %12[%344] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %342, %345 {alignment = 1 : i64} : i32, !llvm.ptr
    %346 = llvm.load %2 : !llvm.ptr -> i32
    %347 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_104 = arith.constant 4 : i64
    %348 = arith.extui %347 : i32 to i64
    %349 = arith.addi %348, %c4_i64_104 : i64
    %350 = llvm.getelementptr %12[%349] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %351 = llvm.load volatile %350 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-2_i32 = arith.constant -2 : i32
    %352 = arith.andi %351, %c-2_i32 : i32
    %c4_i64_105 = arith.constant 4 : i64
    %353 = arith.extui %346 : i32 to i64
    %354 = arith.addi %353, %c4_i64_105 : i64
    %355 = llvm.getelementptr %12[%354] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %352, %355 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb37
  ^bb39:  // pred: ^bb36
    %356 = llvm.load %4 : !llvm.ptr -> i32
    %357 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i32_106 = arith.constant 1 : i32
    %358 = arith.andi %357, %c1_i32_106 : i32
    %359 = llvm.load %7 : !llvm.ptr -> i32
    %360 = arith.ori %358, %359 : i32
    %c2_i32_107 = arith.constant 2 : i32
    %361 = arith.ori %360, %c2_i32_107 : i32
    %c0_i64_108 = arith.constant 0 : i64
    %362 = arith.extui %356 : i32 to i64
    %363 = arith.addi %362, %c0_i64_108 : i64
    %364 = llvm.getelementptr %12[%363] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %361, %364 {alignment = 1 : i64} : i32, !llvm.ptr
    %365 = llvm.load %8 : !llvm.ptr -> i32
    %366 = llvm.load %7 : !llvm.ptr -> i32
    %367 = arith.addi %365, %366 : i32
    llvm.store %367, %1 : i32, !llvm.ptr
    %368 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_109 = arith.constant 4 : i64
    %369 = arith.extui %368 : i32 to i64
    %370 = arith.addi %369, %c4_i64_109 : i64
    %371 = llvm.getelementptr %12[%370] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %372 = llvm.load volatile %371 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_110 = arith.constant 1 : i32
    %373 = arith.ori %372, %c1_i32_110 : i32
    %c4_i64_111 = arith.constant 4 : i64
    %374 = arith.extui %367 : i32 to i64
    %375 = arith.addi %374, %c4_i64_111 : i64
    %376 = llvm.getelementptr %12[%375] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %373, %376 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_112 = arith.constant 0 : i32
    llvm.store %c0_i32_112, %3 : i32, !llvm.ptr
    %c0_i32_113 = arith.constant 0 : i32
    llvm.store %c0_i32_113, %1 : i32, !llvm.ptr
    cf.br ^bb37
  ^bb40:  // pred: ^bb24
    cf.br ^bb18
  ^bb41:  // pred: ^bb18
    %377 = llvm.load %1 : !llvm.ptr -> i32
    %378 = llvm.load %0 : !llvm.ptr -> i32
    %c-4_i32_114 = arith.constant -4 : i32
    %c-8_i32_115 = arith.constant -8 : i32
    %379 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_116 = arith.constant 0 : i64
    %380 = arith.extui %379 : i32 to i64
    %381 = arith.addi %380, %c0_i64_116 : i64
    %382 = llvm.getelementptr %12[%381] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %383 = llvm.load volatile %382 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %383, %2 : i32, !llvm.ptr
    %c3_i32_117 = arith.constant 3 : i32
    %384 = arith.andi %383, %c3_i32_117 : i32
    %c0_i32_118 = arith.constant 0 : i32
    %385 = arith.cmpi ne, %384, %c0_i32_118 : i32
    %386 = arith.select %385, %c-4_i32_114, %c-8_i32_115 : i32
    %387 = llvm.load %2 : !llvm.ptr -> i32
    %c-8_i32_119 = arith.constant -8 : i32
    %388 = arith.andi %387, %c-8_i32_119 : i32
    %389 = arith.addi %386, %388 : i32
    llvm.store %389, %2 : i32, !llvm.ptr
    %390 = llvm.load %3 : !llvm.ptr -> i32
    %391 = llvm.load %2 : !llvm.ptr -> i32
    %392 = llvm.load %3 : !llvm.ptr -> i32
    %393 = arith.cmpi ult, %391, %392 : i32
    %394 = arith.extui %393 : i1 to i32
    %c0_i32_120 = arith.constant 0 : i32
    %395 = arith.cmpi ne, %394, %c0_i32_120 : i32
    %396 = arith.select %395, %389, %390 : i32
    %397 = call @f88(%arg0, %377, %378, %396) : (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %397, %1 : i32, !llvm.ptr
    %398 = llvm.load %0 : !llvm.ptr -> i32
    call @f35(%arg0, %398) : (!llvm.ptr, i32) -> ()
    %399 = llvm.load %1 : !llvm.ptr -> i32
    cf.br ^bb2(%399 : i32)
  ^bb42:  // pred: ^bb13
    %400 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_121 = arith.constant 0 : i32
    %401 = arith.cmpi eq, %400, %c0_i32_121 : i32
    %402 = arith.extui %401 : i1 to i32
    %c0_i32_122 = arith.constant 0 : i32
    %403 = arith.cmpi ne, %402, %c0_i32_122 : i32
    cf.cond_br %403, ^bb43, ^bb44
  ^bb43:  // 2 preds: ^bb42, ^bb45
    %404 = llvm.load %0 : !llvm.ptr -> i32
    call @f35(%arg0, %404) : (!llvm.ptr, i32) -> ()
    cf.br ^bb12
  ^bb44:  // pred: ^bb42
    %405 = llvm.load %7 : !llvm.ptr -> i32
    %406 = llvm.load %8 : !llvm.ptr -> i32
    %407 = arith.cmpi ugt, %405, %406 : i32
    %408 = arith.extui %407 : i1 to i32
    %c0_i32_123 = arith.constant 0 : i32
    %409 = arith.cmpi ne, %408, %c0_i32_123 : i32
    cf.cond_br %409, ^bb4, ^bb45
  ^bb45:  // pred: ^bb44
    cf.br ^bb43
  }
  func.func @f44(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %4 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %9 = arith.subi %8, %c32_i32 : i32
    llvm.store %9, %1 : i32, !llvm.ptr
    llvm.store %9, %4 : i32, !llvm.ptr
    %10 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %11 = arith.extui %10 : i32 to i64
    %12 = arith.addi %11, %c24_i64 : i64
    %13 = llvm.getelementptr %7[%12] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %14 = llvm.load volatile %13 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %14, %2 : i32, !llvm.ptr
    %15 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %16 = arith.addi %15, %c16_i32 : i32
    %17 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_2 = arith.constant 16 : i32
    %18 = arith.addi %17, %c16_i32_2 : i32
    %c0_i64 = arith.constant 0 : i64
    %19 = arith.extui %18 : i32 to i64
    %20 = arith.addi %19, %c0_i64 : i64
    %21 = llvm.getelementptr %7[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %22 = llvm.load volatile %21 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_3 = arith.constant 0 : i64
    %23 = arith.extui %16 : i32 to i64
    %24 = arith.addi %23, %c0_i64_3 : i64
    %25 = llvm.getelementptr %7[%24] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %22, %25 {alignment = 1 : i64} : i64, !llvm.ptr
    %26 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %27 = arith.addi %26, %c8_i32 : i32
    %28 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_4 = arith.constant 8 : i32
    %29 = arith.addi %28, %c8_i32_4 : i32
    %c0_i64_5 = arith.constant 0 : i64
    %30 = arith.extui %29 : i32 to i64
    %31 = arith.addi %30, %c0_i64_5 : i64
    %32 = llvm.getelementptr %7[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %33 = llvm.load volatile %32 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_6 = arith.constant 0 : i64
    %34 = arith.extui %27 : i32 to i64
    %35 = arith.addi %34, %c0_i64_6 : i64
    %36 = llvm.getelementptr %7[%35] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %33, %36 {alignment = 1 : i64} : i64, !llvm.ptr
    %37 = llvm.load %1 : !llvm.ptr -> i32
    %38 = llvm.load %0 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %39 = arith.extui %37 : i32 to i64
    %40 = arith.addi %39, %c28_i64 : i64
    %41 = llvm.getelementptr %7[%40] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %38, %41 {alignment = 1 : i64} : i32, !llvm.ptr
    %42 = llvm.load %1 : !llvm.ptr -> i32
    %43 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i64_7 = arith.constant 24 : i64
    %44 = arith.extui %42 : i32 to i64
    %45 = arith.addi %44, %c24_i64_7 : i64
    %46 = llvm.getelementptr %7[%45] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %43, %46 {alignment = 1 : i64} : i32, !llvm.ptr
    %47 = llvm.load %1 : !llvm.ptr -> i32
    %48 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_8 = arith.constant 0 : i64
    %49 = arith.extui %48 : i32 to i64
    %50 = arith.addi %49, %c0_i64_8 : i64
    %51 = llvm.getelementptr %7[%50] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %52 = llvm.load volatile %51 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_9 = arith.constant 0 : i64
    %53 = arith.extui %47 : i32 to i64
    %54 = arith.addi %53, %c0_i64_9 : i64
    %55 = llvm.getelementptr %7[%54] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %52, %55 {alignment = 1 : i64} : i64, !llvm.ptr
    %56 = llvm.load %1 : !llvm.ptr -> i32
    call @f38(%arg0, %56) : (!llvm.ptr, i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f45(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i64_4 = arith.constant 1 : i64
    %5 = llvm.alloca %c1_i64_4 x i64 : (i64) -> !llvm.ptr
    llvm.store %c0_i64, %5 : i64, !llvm.ptr
    %6 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %11 = llvm.load %7 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %12 = arith.subi %11, %c64_i32 : i32
    llvm.store %12, %2 : i32, !llvm.ptr
    llvm.store %12, %7 : i32, !llvm.ptr
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_5 = arith.constant 0 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c0_i64_5 : i64
    %16 = llvm.getelementptr %10[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load volatile %16 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %18 = arith.cmpi eq, %17, %c-2147483648_i32 : i32
    %19 = arith.extui %18 : i1 to i32
    %c0_i32_6 = arith.constant 0 : i32
    %20 = arith.cmpi eq, %19, %c0_i32_6 : i32
    %21 = arith.extui %20 : i1 to i32
    %c0_i32_7 = arith.constant 0 : i32
    %22 = arith.cmpi ne, %21, %c0_i32_7 : i32
    cf.cond_br %22, ^bb3, ^bb4
  ^bb2:  // pred: ^bb6
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %23 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_8 = arith.constant 0 : i64
    %24 = arith.extui %23 : i32 to i64
    %25 = arith.addi %24, %c0_i64_8 : i64
    %26 = llvm.getelementptr %10[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %27 = llvm.load volatile %26 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %27, %5 : i64, !llvm.ptr
    %28 = llvm.load %1 : !llvm.ptr -> i32
    %c4294967296_i64 = arith.constant 4294967296 : i64
    %c0_i64_9 = arith.constant 0 : i64
    %29 = arith.extui %28 : i32 to i64
    %30 = arith.addi %29, %c0_i64_9 : i64
    %31 = llvm.getelementptr %10[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4294967296_i64, %31 {alignment = 1 : i64} : i64, !llvm.ptr
    %32 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %33 = arith.addi %32, %c8_i32 : i32
    llvm.store %33, %3 : i32, !llvm.ptr
    %34 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_10 = arith.constant 8 : i32
    %35 = arith.addi %34, %c8_i32_10 : i32
    llvm.store %35, %1 : i32, !llvm.ptr
    %c0_i64_11 = arith.constant 0 : i64
    %36 = arith.extui %35 : i32 to i64
    %37 = arith.addi %36, %c0_i64_11 : i64
    %38 = llvm.getelementptr %10[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %39 = llvm.load volatile %38 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_12 = arith.constant 0 : i64
    %40 = arith.extui %33 : i32 to i64
    %41 = arith.addi %40, %c0_i64_12 : i64
    %42 = llvm.getelementptr %10[%41] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %39, %42 {alignment = 1 : i64} : i32, !llvm.ptr
    %43 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_13 = arith.constant 0 : i32
    %c0_i64_14 = arith.constant 0 : i64
    %44 = arith.extui %43 : i32 to i64
    %45 = arith.addi %44, %c0_i64_14 : i64
    %46 = llvm.getelementptr %10[%45] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_13, %46 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_15 = arith.constant 0 : i32
    %c1049537_i64 = arith.constant 1049537 : i64
    %47 = arith.extui %c0_i32_15 : i32 to i64
    %48 = arith.addi %47, %c1049537_i64 : i64
    %49 = llvm.getelementptr %10[%48] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %50 = llvm.load volatile %49 {alignment = 1 : i64} : !llvm.ptr -> i8
    %51 = arith.extui %50 : i8 to i32
    %52 = llvm.load %2 : !llvm.ptr -> i32
    %53 = llvm.load %5 : !llvm.ptr -> i64
    %c0_i64_16 = arith.constant 0 : i64
    %54 = arith.extui %52 : i32 to i64
    %55 = arith.addi %54, %c0_i64_16 : i64
    %56 = llvm.getelementptr %10[%55] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %53, %56 {alignment = 1 : i64} : i64, !llvm.ptr
    %c12_i32 = arith.constant 12 : i32
    %c4_i32 = arith.constant 4 : i32
    %57 = call @f17(%arg0, %c12_i32, %c4_i32) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %57, %1 : i32, !llvm.ptr
    %c0_i32_17 = arith.constant 0 : i32
    %58 = arith.cmpi eq, %57, %c0_i32_17 : i32
    %59 = arith.extui %58 : i1 to i32
    %c0_i32_18 = arith.constant 0 : i32
    %60 = arith.cmpi ne, %59, %c0_i32_18 : i32
    cf.cond_br %60, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %61 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %62 = arith.extui %61 : i32 to i64
    %63 = arith.addi %62, %c12_i64 : i64
    %64 = llvm.getelementptr %10[%63] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %65 = llvm.load volatile %64 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %65, %3 : i32, !llvm.ptr
    %66 = llvm.load %2 : !llvm.ptr -> i32
    %c28_i32 = arith.constant 28 : i32
    %67 = arith.addi %66, %c28_i32 : i32
    %c8_i32_19 = arith.constant 8 : i32
    %68 = arith.addi %67, %c8_i32_19 : i32
    llvm.store %68, %4 : i32, !llvm.ptr
    %c0_i32_20 = arith.constant 0 : i32
    %c0_i64_21 = arith.constant 0 : i64
    %69 = arith.extui %68 : i32 to i64
    %70 = arith.addi %69, %c0_i64_21 : i64
    %71 = llvm.getelementptr %10[%70] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_20, %71 {alignment = 1 : i64} : i32, !llvm.ptr
    %72 = llvm.load %2 : !llvm.ptr -> i32
    %c4294967296_i64_22 = arith.constant 4294967296 : i64
    %c28_i64 = arith.constant 28 : i64
    %73 = arith.extui %72 : i32 to i64
    %74 = arith.addi %73, %c28_i64 : i64
    %75 = llvm.getelementptr %10[%74] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4294967296_i64_22, %75 {alignment = 1 : i64} : i64, !llvm.ptr
    %76 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32 = arith.constant 40 : i32
    %77 = arith.addi %76, %c40_i32 : i32
    %c16_i32 = arith.constant 16 : i32
    %78 = arith.addi %77, %c16_i32 : i32
    %79 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_23 = arith.constant 16 : i32
    %80 = arith.addi %79, %c16_i32_23 : i32
    %c0_i64_24 = arith.constant 0 : i64
    %81 = arith.extui %80 : i32 to i64
    %82 = arith.addi %81, %c0_i64_24 : i64
    %83 = llvm.getelementptr %10[%82] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %84 = llvm.load volatile %83 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_25 = arith.constant 0 : i64
    %85 = arith.extui %78 : i32 to i64
    %86 = arith.addi %85, %c0_i64_25 : i64
    %87 = llvm.getelementptr %10[%86] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %84, %87 {alignment = 1 : i64} : i64, !llvm.ptr
    %88 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_26 = arith.constant 40 : i32
    %89 = arith.addi %88, %c40_i32_26 : i32
    %c8_i32_27 = arith.constant 8 : i32
    %90 = arith.addi %89, %c8_i32_27 : i32
    %91 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_28 = arith.constant 8 : i32
    %92 = arith.addi %91, %c8_i32_28 : i32
    %c0_i64_29 = arith.constant 0 : i64
    %93 = arith.extui %92 : i32 to i64
    %94 = arith.addi %93, %c0_i64_29 : i64
    %95 = llvm.getelementptr %10[%94] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %96 = llvm.load volatile %95 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_30 = arith.constant 0 : i64
    %97 = arith.extui %90 : i32 to i64
    %98 = arith.addi %97, %c0_i64_30 : i64
    %99 = llvm.getelementptr %10[%98] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %96, %99 {alignment = 1 : i64} : i64, !llvm.ptr
    %100 = llvm.load %2 : !llvm.ptr -> i32
    %101 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_31 = arith.constant 0 : i64
    %102 = arith.extui %101 : i32 to i64
    %103 = arith.addi %102, %c0_i64_31 : i64
    %104 = llvm.getelementptr %10[%103] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %105 = llvm.load volatile %104 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c40_i64 = arith.constant 40 : i64
    %106 = arith.extui %100 : i32 to i64
    %107 = arith.addi %106, %c40_i64 : i64
    %108 = llvm.getelementptr %10[%107] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %105, %108 {alignment = 1 : i64} : i64, !llvm.ptr
    %109 = llvm.load %2 : !llvm.ptr -> i32
    %c28_i32_32 = arith.constant 28 : i32
    %110 = arith.addi %109, %c28_i32_32 : i32
    %c1048628_i32 = arith.constant 1048628 : i32
    %111 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_33 = arith.constant 40 : i32
    %112 = arith.addi %111, %c40_i32_33 : i32
    %113 = call @f75(%arg0, %110, %c1048628_i32, %112) : (!llvm.ptr, i32, i32, i32) -> i32
    %114 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_34 = arith.constant 16 : i32
    %115 = arith.addi %114, %c16_i32_34 : i32
    %c8_i32_35 = arith.constant 8 : i32
    %116 = arith.addi %115, %c8_i32_35 : i32
    %117 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_36 = arith.constant 0 : i64
    %118 = arith.extui %117 : i32 to i64
    %119 = arith.addi %118, %c0_i64_36 : i64
    %120 = llvm.getelementptr %10[%119] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %121 = llvm.load volatile %120 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %121, %3 : i32, !llvm.ptr
    %c0_i64_37 = arith.constant 0 : i64
    %122 = arith.extui %116 : i32 to i64
    %123 = arith.addi %122, %c0_i64_37 : i64
    %124 = llvm.getelementptr %10[%123] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %121, %124 {alignment = 1 : i64} : i32, !llvm.ptr
    %125 = llvm.load %2 : !llvm.ptr -> i32
    %126 = llvm.load %2 : !llvm.ptr -> i32
    %c28_i64_38 = arith.constant 28 : i64
    %127 = arith.extui %126 : i32 to i64
    %128 = arith.addi %127, %c28_i64_38 : i64
    %129 = llvm.getelementptr %10[%128] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %130 = llvm.load volatile %129 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %130, %5 : i64, !llvm.ptr
    %c16_i64 = arith.constant 16 : i64
    %131 = arith.extui %125 : i32 to i64
    %132 = arith.addi %131, %c16_i64 : i64
    %133 = llvm.getelementptr %10[%132] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %130, %133 {alignment = 1 : i64} : i64, !llvm.ptr
    %134 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_39 = arith.constant 8 : i32
    %135 = arith.addi %134, %c8_i32_39 : i32
    %136 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_40 = arith.constant 0 : i64
    %137 = arith.extui %135 : i32 to i64
    %138 = arith.addi %137, %c0_i64_40 : i64
    %139 = llvm.getelementptr %10[%138] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %136, %139 {alignment = 1 : i64} : i32, !llvm.ptr
    %140 = llvm.load %1 : !llvm.ptr -> i32
    %141 = llvm.load %5 : !llvm.ptr -> i64
    %c0_i64_41 = arith.constant 0 : i64
    %142 = arith.extui %140 : i32 to i64
    %143 = arith.addi %142, %c0_i64_41 : i64
    %144 = llvm.getelementptr %10[%143] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %141, %144 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // pred: ^bb3
    %c4_i32_42 = arith.constant 4 : i32
    %c12_i32_43 = arith.constant 12 : i32
    call @f65(%arg0, %c4_i32_42, %c12_i32_43) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb6:  // pred: ^bb3
    %145 = llvm.load %1 : !llvm.ptr -> i32
    %146 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_44 = arith.constant 0 : i64
    %147 = arith.extui %146 : i32 to i64
    %148 = arith.addi %147, %c0_i64_44 : i64
    %149 = llvm.getelementptr %10[%148] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %150 = llvm.load volatile %149 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_45 = arith.constant 0 : i64
    %151 = arith.extui %145 : i32 to i64
    %152 = arith.addi %151, %c0_i64_45 : i64
    %153 = llvm.getelementptr %10[%152] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %150, %153 {alignment = 1 : i64} : i64, !llvm.ptr
    %154 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_46 = arith.constant 8 : i32
    %155 = arith.addi %154, %c8_i32_46 : i32
    %156 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_47 = arith.constant 0 : i64
    %157 = arith.extui %156 : i32 to i64
    %158 = arith.addi %157, %c0_i64_47 : i64
    %159 = llvm.getelementptr %10[%158] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %160 = llvm.load volatile %159 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_48 = arith.constant 0 : i64
    %161 = arith.extui %155 : i32 to i64
    %162 = arith.addi %161, %c0_i64_48 : i64
    %163 = llvm.getelementptr %10[%162] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %160, %163 {alignment = 1 : i64} : i32, !llvm.ptr
    %164 = llvm.load %0 : !llvm.ptr -> i32
    %c1048912_i32 = arith.constant 1048912 : i32
    %c4_i64 = arith.constant 4 : i64
    %165 = arith.extui %164 : i32 to i64
    %166 = arith.addi %165, %c4_i64 : i64
    %167 = llvm.getelementptr %10[%166] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1048912_i32, %167 {alignment = 1 : i64} : i32, !llvm.ptr
    %168 = llvm.load %0 : !llvm.ptr -> i32
    %169 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_49 = arith.constant 0 : i64
    %170 = arith.extui %168 : i32 to i64
    %171 = arith.addi %170, %c0_i64_49 : i64
    %172 = llvm.getelementptr %10[%171] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %169, %172 {alignment = 1 : i64} : i32, !llvm.ptr
    %173 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_50 = arith.constant 64 : i32
    %174 = arith.addi %173, %c64_i32_50 : i32
    llvm.store %174, %7 : i32, !llvm.ptr
    cf.br ^bb2
  }
  func.func @f46(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i64_4 = arith.constant 1 : i64
    %5 = llvm.alloca %c1_i64_4 x i64 : (i64) -> !llvm.ptr
    llvm.store %c0_i64, %5 : i64, !llvm.ptr
    %6 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %11 = llvm.load %7 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %12 = arith.subi %11, %c48_i32 : i32
    llvm.store %12, %2 : i32, !llvm.ptr
    llvm.store %12, %7 : i32, !llvm.ptr
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_5 = arith.constant 0 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c0_i64_5 : i64
    %16 = llvm.getelementptr %10[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load volatile %16 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %18 = arith.cmpi eq, %17, %c-2147483648_i32 : i32
    %19 = arith.extui %18 : i1 to i32
    %c0_i32_6 = arith.constant 0 : i32
    %20 = arith.cmpi eq, %19, %c0_i32_6 : i32
    %21 = arith.extui %20 : i1 to i32
    %c0_i32_7 = arith.constant 0 : i32
    %22 = arith.cmpi ne, %21, %c0_i32_7 : i32
    cf.cond_br %22, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %23 = llvm.load %0 : !llvm.ptr -> i32
    %c1048912_i32 = arith.constant 1048912 : i32
    %c4_i64 = arith.constant 4 : i64
    %24 = arith.extui %23 : i32 to i64
    %25 = arith.addi %24, %c4_i64 : i64
    %26 = llvm.getelementptr %10[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1048912_i32, %26 {alignment = 1 : i64} : i32, !llvm.ptr
    %27 = llvm.load %0 : !llvm.ptr -> i32
    %28 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_8 = arith.constant 0 : i64
    %29 = arith.extui %27 : i32 to i64
    %30 = arith.addi %29, %c0_i64_8 : i64
    %31 = llvm.getelementptr %10[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %28, %31 {alignment = 1 : i64} : i32, !llvm.ptr
    %32 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i32_9 = arith.constant 48 : i32
    %33 = arith.addi %32, %c48_i32_9 : i32
    llvm.store %33, %7 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %34 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %35 = arith.extui %34 : i32 to i64
    %36 = arith.addi %35, %c12_i64 : i64
    %37 = llvm.getelementptr %10[%36] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %38 = llvm.load volatile %37 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %38, %3 : i32, !llvm.ptr
    %39 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %40 = arith.addi %39, %c12_i32 : i32
    %c8_i32 = arith.constant 8 : i32
    %41 = arith.addi %40, %c8_i32 : i32
    llvm.store %41, %4 : i32, !llvm.ptr
    %c0_i32_10 = arith.constant 0 : i32
    %c0_i64_11 = arith.constant 0 : i64
    %42 = arith.extui %41 : i32 to i64
    %43 = arith.addi %42, %c0_i64_11 : i64
    %44 = llvm.getelementptr %10[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_10, %44 {alignment = 1 : i64} : i32, !llvm.ptr
    %45 = llvm.load %2 : !llvm.ptr -> i32
    %c4294967296_i64 = arith.constant 4294967296 : i64
    %c12_i64_12 = arith.constant 12 : i64
    %46 = arith.extui %45 : i32 to i64
    %47 = arith.addi %46, %c12_i64_12 : i64
    %48 = llvm.getelementptr %10[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4294967296_i64, %48 {alignment = 1 : i64} : i64, !llvm.ptr
    %49 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %50 = arith.addi %49, %c24_i32 : i32
    %c16_i32 = arith.constant 16 : i32
    %51 = arith.addi %50, %c16_i32 : i32
    %52 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_13 = arith.constant 16 : i32
    %53 = arith.addi %52, %c16_i32_13 : i32
    %c0_i64_14 = arith.constant 0 : i64
    %54 = arith.extui %53 : i32 to i64
    %55 = arith.addi %54, %c0_i64_14 : i64
    %56 = llvm.getelementptr %10[%55] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %57 = llvm.load volatile %56 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_15 = arith.constant 0 : i64
    %58 = arith.extui %51 : i32 to i64
    %59 = arith.addi %58, %c0_i64_15 : i64
    %60 = llvm.getelementptr %10[%59] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %57, %60 {alignment = 1 : i64} : i64, !llvm.ptr
    %61 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_16 = arith.constant 24 : i32
    %62 = arith.addi %61, %c24_i32_16 : i32
    %c8_i32_17 = arith.constant 8 : i32
    %63 = arith.addi %62, %c8_i32_17 : i32
    %64 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_18 = arith.constant 8 : i32
    %65 = arith.addi %64, %c8_i32_18 : i32
    %c0_i64_19 = arith.constant 0 : i64
    %66 = arith.extui %65 : i32 to i64
    %67 = arith.addi %66, %c0_i64_19 : i64
    %68 = llvm.getelementptr %10[%67] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %69 = llvm.load volatile %68 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_20 = arith.constant 0 : i64
    %70 = arith.extui %63 : i32 to i64
    %71 = arith.addi %70, %c0_i64_20 : i64
    %72 = llvm.getelementptr %10[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %69, %72 {alignment = 1 : i64} : i64, !llvm.ptr
    %73 = llvm.load %2 : !llvm.ptr -> i32
    %74 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_21 = arith.constant 0 : i64
    %75 = arith.extui %74 : i32 to i64
    %76 = arith.addi %75, %c0_i64_21 : i64
    %77 = llvm.getelementptr %10[%76] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %78 = llvm.load volatile %77 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c24_i64 = arith.constant 24 : i64
    %79 = arith.extui %73 : i32 to i64
    %80 = arith.addi %79, %c24_i64 : i64
    %81 = llvm.getelementptr %10[%80] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %78, %81 {alignment = 1 : i64} : i64, !llvm.ptr
    %82 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32_22 = arith.constant 12 : i32
    %83 = arith.addi %82, %c12_i32_22 : i32
    %c1048628_i32 = arith.constant 1048628 : i32
    %84 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_23 = arith.constant 24 : i32
    %85 = arith.addi %84, %c24_i32_23 : i32
    %86 = call @f75(%arg0, %83, %c1048628_i32, %85) : (!llvm.ptr, i32, i32, i32) -> i32
    %87 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_24 = arith.constant 8 : i32
    %88 = arith.addi %87, %c8_i32_24 : i32
    %89 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_25 = arith.constant 0 : i64
    %90 = arith.extui %89 : i32 to i64
    %91 = arith.addi %90, %c0_i64_25 : i64
    %92 = llvm.getelementptr %10[%91] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %93 = llvm.load volatile %92 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %93, %3 : i32, !llvm.ptr
    %c0_i64_26 = arith.constant 0 : i64
    %94 = arith.extui %88 : i32 to i64
    %95 = arith.addi %94, %c0_i64_26 : i64
    %96 = llvm.getelementptr %10[%95] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %93, %96 {alignment = 1 : i64} : i32, !llvm.ptr
    %97 = llvm.load %2 : !llvm.ptr -> i32
    %98 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64_27 = arith.constant 12 : i64
    %99 = arith.extui %98 : i32 to i64
    %100 = arith.addi %99, %c12_i64_27 : i64
    %101 = llvm.getelementptr %10[%100] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %102 = llvm.load volatile %101 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %102, %5 : i64, !llvm.ptr
    %c0_i64_28 = arith.constant 0 : i64
    %103 = arith.extui %97 : i32 to i64
    %104 = arith.addi %103, %c0_i64_28 : i64
    %105 = llvm.getelementptr %10[%104] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %102, %105 {alignment = 1 : i64} : i64, !llvm.ptr
    %106 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_29 = arith.constant 8 : i32
    %107 = arith.addi %106, %c8_i32_29 : i32
    %108 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_30 = arith.constant 0 : i64
    %109 = arith.extui %107 : i32 to i64
    %110 = arith.addi %109, %c0_i64_30 : i64
    %111 = llvm.getelementptr %10[%110] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %108, %111 {alignment = 1 : i64} : i32, !llvm.ptr
    %112 = llvm.load %1 : !llvm.ptr -> i32
    %113 = llvm.load %5 : !llvm.ptr -> i64
    %c0_i64_31 = arith.constant 0 : i64
    %114 = arith.extui %112 : i32 to i64
    %115 = arith.addi %114, %c0_i64_31 : i64
    %116 = llvm.getelementptr %10[%115] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %113, %116 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f47(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %4 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %9 = arith.subi %8, %c32_i32 : i32
    llvm.store %9, %2 : i32, !llvm.ptr
    llvm.store %9, %4 : i32, !llvm.ptr
    %10 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %11 = arith.extui %10 : i32 to i64
    %12 = arith.addi %11, %c0_i64 : i64
    %13 = llvm.getelementptr %7[%12] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %14 = llvm.load volatile %13 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %15 = arith.cmpi eq, %14, %c-2147483648_i32 : i32
    %16 = arith.extui %15 : i1 to i32
    %c0_i32_2 = arith.constant 0 : i32
    %17 = arith.cmpi ne, %16, %c0_i32_2 : i32
    cf.cond_br %17, ^bb4, ^bb5
  ^bb2(%18: i32):  // pred: ^bb3
    return %18 : i32
  ^bb3:  // 2 preds: ^bb4, ^bb5
    %19 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32_3 = arith.constant 32 : i32
    %20 = arith.addi %19, %c32_i32_3 : i32
    llvm.store %20, %4 : i32, !llvm.ptr
    %21 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%21 : i32)
  ^bb4:  // pred: ^bb1
    %22 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %23 = arith.addi %22, %c8_i32 : i32
    %c16_i32 = arith.constant 16 : i32
    %24 = arith.addi %23, %c16_i32 : i32
    %25 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %26 = arith.extui %25 : i32 to i64
    %27 = arith.addi %26, %c12_i64 : i64
    %28 = llvm.getelementptr %7[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %29 = llvm.load volatile %28 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %29, %0 : i32, !llvm.ptr
    %c16_i32_4 = arith.constant 16 : i32
    %30 = arith.addi %29, %c16_i32_4 : i32
    %c0_i64_5 = arith.constant 0 : i64
    %31 = arith.extui %30 : i32 to i64
    %32 = arith.addi %31, %c0_i64_5 : i64
    %33 = llvm.getelementptr %7[%32] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %34 = llvm.load volatile %33 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_6 = arith.constant 0 : i64
    %35 = arith.extui %24 : i32 to i64
    %36 = arith.addi %35, %c0_i64_6 : i64
    %37 = llvm.getelementptr %7[%36] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %34, %37 {alignment = 1 : i64} : i64, !llvm.ptr
    %38 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_7 = arith.constant 8 : i32
    %39 = arith.addi %38, %c8_i32_7 : i32
    %c8_i32_8 = arith.constant 8 : i32
    %40 = arith.addi %39, %c8_i32_8 : i32
    %41 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_9 = arith.constant 8 : i32
    %42 = arith.addi %41, %c8_i32_9 : i32
    %c0_i64_10 = arith.constant 0 : i64
    %43 = arith.extui %42 : i32 to i64
    %44 = arith.addi %43, %c0_i64_10 : i64
    %45 = llvm.getelementptr %7[%44] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %46 = llvm.load volatile %45 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_11 = arith.constant 0 : i64
    %47 = arith.extui %40 : i32 to i64
    %48 = arith.addi %47, %c0_i64_11 : i64
    %49 = llvm.getelementptr %7[%48] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %46, %49 {alignment = 1 : i64} : i64, !llvm.ptr
    %50 = llvm.load %2 : !llvm.ptr -> i32
    %51 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_12 = arith.constant 0 : i64
    %52 = arith.extui %51 : i32 to i64
    %53 = arith.addi %52, %c0_i64_12 : i64
    %54 = llvm.getelementptr %7[%53] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %55 = llvm.load volatile %54 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c8_i64 = arith.constant 8 : i64
    %56 = arith.extui %50 : i32 to i64
    %57 = arith.addi %56, %c8_i64 : i64
    %58 = llvm.getelementptr %7[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %55, %58 {alignment = 1 : i64} : i64, !llvm.ptr
    %59 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %60 = arith.extui %59 : i32 to i64
    %61 = arith.addi %60, %c20_i64 : i64
    %62 = llvm.getelementptr %7[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %63 = llvm.load volatile %62 {alignment = 1 : i64} : !llvm.ptr -> i32
    %64 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %65 = arith.extui %64 : i32 to i64
    %66 = arith.addi %65, %c24_i64 : i64
    %67 = llvm.getelementptr %7[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %68 = llvm.load volatile %67 {alignment = 1 : i64} : !llvm.ptr -> i32
    %69 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_13 = arith.constant 8 : i32
    %70 = arith.addi %69, %c8_i32_13 : i32
    %71 = call @f75(%arg0, %63, %68, %70) : (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %71, %0 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // pred: ^bb1
    %72 = llvm.load %1 : !llvm.ptr -> i32
    %73 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %74 = arith.extui %73 : i32 to i64
    %75 = arith.addi %74, %c4_i64 : i64
    %76 = llvm.getelementptr %7[%75] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %77 = llvm.load volatile %76 {alignment = 1 : i64} : !llvm.ptr -> i32
    %78 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_14 = arith.constant 8 : i64
    %79 = arith.extui %78 : i32 to i64
    %80 = arith.addi %79, %c8_i64_14 : i64
    %81 = llvm.getelementptr %7[%80] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %82 = llvm.load volatile %81 {alignment = 1 : i64} : !llvm.ptr -> i32
    %83 = call @f82(%arg0, %72, %77, %82) : (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %83, %0 : i32, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f48(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32_3 = arith.constant 0 : i32
    %c1049537_i64 = arith.constant 1049537 : i64
    %7 = arith.extui %c0_i32_3 : i32 to i64
    %8 = arith.addi %7, %c1049537_i64 : i64
    %9 = llvm.getelementptr %6[%8] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %10 = llvm.load volatile %9 {alignment = 1 : i64} : !llvm.ptr -> i8
    %11 = arith.extui %10 : i8 to i32
    %12 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c4_i64 : i64
    %15 = llvm.getelementptr %6[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %16 = llvm.load volatile %15 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %16, %2 : i32, !llvm.ptr
    %17 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %18 = arith.extui %17 : i32 to i64
    %19 = arith.addi %18, %c0_i64 : i64
    %20 = llvm.getelementptr %6[%19] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %21 = llvm.load volatile %20 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %21, %3 : i32, !llvm.ptr
    %c8_i32 = arith.constant 8 : i32
    %c4_i32 = arith.constant 4 : i32
    %22 = call @f17(%arg0, %c8_i32, %c4_i32) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %22, %1 : i32, !llvm.ptr
    %c0_i32_4 = arith.constant 0 : i32
    %23 = arith.cmpi eq, %22, %c0_i32_4 : i32
    %24 = arith.extui %23 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %25 = arith.cmpi ne, %24, %c0_i32_5 : i32
    cf.cond_br %25, ^bb3, ^bb4
  ^bb2:  // pred: ^bb4
    return
  ^bb3:  // pred: ^bb1
    %c4_i32_6 = arith.constant 4 : i32
    %c8_i32_7 = arith.constant 8 : i32
    call @f65(%arg0, %c4_i32_6, %c8_i32_7) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb4:  // pred: ^bb1
    %26 = llvm.load %1 : !llvm.ptr -> i32
    %27 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_8 = arith.constant 4 : i64
    %28 = arith.extui %26 : i32 to i64
    %29 = arith.addi %28, %c4_i64_8 : i64
    %30 = llvm.getelementptr %6[%29] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %27, %30 {alignment = 1 : i64} : i32, !llvm.ptr
    %31 = llvm.load %1 : !llvm.ptr -> i32
    %32 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_9 = arith.constant 0 : i64
    %33 = arith.extui %31 : i32 to i64
    %34 = arith.addi %33, %c0_i64_9 : i64
    %35 = llvm.getelementptr %6[%34] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %32, %35 {alignment = 1 : i64} : i32, !llvm.ptr
    %36 = llvm.load %0 : !llvm.ptr -> i32
    %c1048928_i32 = arith.constant 1048928 : i32
    %c4_i64_10 = arith.constant 4 : i64
    %37 = arith.extui %36 : i32 to i64
    %38 = arith.addi %37, %c4_i64_10 : i64
    %39 = llvm.getelementptr %6[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1048928_i32, %39 {alignment = 1 : i64} : i32, !llvm.ptr
    %40 = llvm.load %0 : !llvm.ptr -> i32
    %41 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_11 = arith.constant 0 : i64
    %42 = arith.extui %40 : i32 to i64
    %43 = arith.addi %42, %c0_i64_11 : i64
    %44 = llvm.getelementptr %6[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %41, %44 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  }
  func.func @f49(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c1048928_i32 = arith.constant 1048928 : i32
    %c4_i64 = arith.constant 4 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c4_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1048928_i32, %8 {alignment = 1 : i64} : i32, !llvm.ptr
    %9 = llvm.load %0 : !llvm.ptr -> i32
    %10 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %11 = arith.extui %9 : i32 to i64
    %12 = arith.addi %11, %c0_i64 : i64
    %13 = llvm.getelementptr %4[%12] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %10, %13 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f50(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %6 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %7 = arith.extui %6 : i32 to i64
    %8 = arith.addi %7, %c0_i64 : i64
    %9 = llvm.getelementptr %4[%8] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %10 = llvm.load volatile %9 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1 = arith.constant 0 : i64
    %11 = arith.extui %5 : i32 to i64
    %12 = arith.addi %11, %c0_i64_1 : i64
    %13 = llvm.getelementptr %4[%12] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %10, %13 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f51(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %1 : !llvm.ptr -> i32
    %6 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %7 = arith.extui %6 : i32 to i64
    %8 = arith.addi %7, %c0_i64 : i64
    %9 = llvm.getelementptr %4[%8] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %10 = llvm.load volatile %9 {alignment = 1 : i64} : !llvm.ptr -> i32
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %12 = arith.extui %11 : i32 to i64
    %13 = arith.addi %12, %c4_i64 : i64
    %14 = llvm.getelementptr %4[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %15 = llvm.load volatile %14 {alignment = 1 : i64} : !llvm.ptr -> i32
    %16 = call @f82(%arg0, %5, %10, %15) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%16 : i32)
  ^bb2(%17: i32):  // pred: ^bb1
    return %17 : i32
  }
  func.func @f52(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_4 = arith.constant 1 : i64
    %5 = llvm.alloca %c1_i64_4 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i64_5 = arith.constant 1 : i64
    %6 = llvm.alloca %c1_i64_5 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %7 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> i32
    %14 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.load %15 : !llvm.ptr -> i32
    %18 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.load %15 : !llvm.ptr -> i32
    %20 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %21 = llvm.load %15 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %22 = llvm.load %8 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %23 = arith.subi %22, %c32_i32 : i32
    llvm.store %23, %5 : i32, !llvm.ptr
    llvm.store %23, %8 : i32, !llvm.ptr
    %c0_i32_6 = arith.constant 0 : i32
    %c0_i32_7 = arith.constant 0 : i32
    %c1049556_i64 = arith.constant 1049556 : i64
    %24 = arith.extui %c0_i32_7 : i32 to i64
    %25 = arith.addi %24, %c1049556_i64 : i64
    %26 = llvm.getelementptr %11[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %27 = llvm.load volatile %26 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %27, %6 : i32, !llvm.ptr
    %c1_i32 = arith.constant 1 : i32
    %28 = arith.addi %27, %c1_i32 : i32
    %c1049556_i64_8 = arith.constant 1049556 : i64
    %29 = arith.extui %c0_i32_6 : i32 to i64
    %30 = arith.addi %29, %c1049556_i64_8 : i64
    %31 = llvm.getelementptr %11[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %28, %31 {alignment = 1 : i64} : i32, !llvm.ptr
    %32 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i32_9 = arith.constant 0 : i32
    %33 = arith.cmpi slt, %32, %c0_i32_9 : i32
    %34 = arith.extui %33 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %35 = arith.cmpi ne, %34, %c0_i32_10 : i32
    cf.cond_br %35, ^bb3, ^bb4
  ^bb2:  // no predecessors
    return
  ^bb3:  // 4 preds: ^bb1, ^bb6, ^bb8, ^bb33
    llvm.unreachable
  ^bb4:  // pred: ^bb1
    %c0_i32_11 = arith.constant 0 : i32
    %c1050016_i64 = arith.constant 1050016 : i64
    %36 = arith.extui %c0_i32_11 : i32 to i64
    %37 = arith.addi %36, %c1050016_i64 : i64
    %38 = llvm.getelementptr %11[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %39 = llvm.load volatile %38 {alignment = 1 : i64} : !llvm.ptr -> i8
    %40 = arith.extui %39 : i8 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %41 = arith.cmpi ne, %40, %c0_i32_12 : i32
    cf.cond_br %41, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    %42 = llvm.load %5 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %43 = arith.addi %42, %c8_i32 : i32
    %44 = llvm.load %0 : !llvm.ptr -> i32
    %45 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %46 = arith.extui %45 : i32 to i64
    %47 = arith.addi %46, %c24_i64 : i64
    %48 = llvm.getelementptr %11[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %49 = llvm.load volatile %48 {alignment = 1 : i64} : !llvm.ptr -> i32
    %50 = arith.cmpi ult, %49, %21 : i32
    cf.cond_br %50, ^bb27, ^bb28
  ^bb6:  // pred: ^bb4
    %c0_i32_13 = arith.constant 0 : i32
    %c1_i32_14 = arith.constant 1 : i32
    %c1050016_i64_15 = arith.constant 1050016 : i64
    %51 = arith.extui %c0_i32_13 : i32 to i64
    %52 = arith.addi %51, %c1050016_i64_15 : i64
    %53 = llvm.getelementptr %11[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %54 = arith.trunci %c1_i32_14 : i32 to i8
    llvm.store volatile %54, %53 {alignment = 1 : i64} : i8, !llvm.ptr
    %c0_i32_16 = arith.constant 0 : i32
    %c0_i32_17 = arith.constant 0 : i32
    %c1050012_i64 = arith.constant 1050012 : i64
    %55 = arith.extui %c0_i32_17 : i32 to i64
    %56 = arith.addi %55, %c1050012_i64 : i64
    %57 = llvm.getelementptr %11[%56] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %58 = llvm.load volatile %57 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_18 = arith.constant 1 : i32
    %59 = arith.addi %58, %c1_i32_18 : i32
    %c1050012_i64_19 = arith.constant 1050012 : i64
    %60 = arith.extui %c0_i32_16 : i32 to i64
    %61 = arith.addi %60, %c1050012_i64_19 : i64
    %62 = llvm.getelementptr %11[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %59, %62 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_20 = arith.constant 0 : i32
    %c1049544_i64 = arith.constant 1049544 : i64
    %63 = arith.extui %c0_i32_20 : i32 to i64
    %64 = arith.addi %63, %c1049544_i64 : i64
    %65 = llvm.getelementptr %11[%64] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %66 = llvm.load volatile %65 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %66, %6 : i32, !llvm.ptr
    %c-1_i32 = arith.constant -1 : i32
    %67 = arith.cmpi sle, %66, %c-1_i32 : i32
    %68 = arith.extui %67 : i1 to i32
    %c0_i32_21 = arith.constant 0 : i32
    %69 = arith.cmpi ne, %68, %c0_i32_21 : i32
    cf.cond_br %69, ^bb3, ^bb7
  ^bb7:  // pred: ^bb6
    %c0_i32_22 = arith.constant 0 : i32
    %70 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i32_23 = arith.constant 1 : i32
    %71 = arith.addi %70, %c1_i32_23 : i32
    %c1049544_i64_24 = arith.constant 1049544 : i64
    %72 = arith.extui %c0_i32_22 : i32 to i64
    %73 = arith.addi %72, %c1049544_i64_24 : i64
    %74 = llvm.getelementptr %11[%73] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %71, %74 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_25 = arith.constant 0 : i32
    %c1049548_i64 = arith.constant 1049548 : i64
    %75 = arith.extui %c0_i32_25 : i32 to i64
    %76 = arith.addi %75, %c1049548_i64 : i64
    %77 = llvm.getelementptr %11[%76] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %78 = llvm.load volatile %77 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_26 = arith.constant 0 : i32
    %79 = arith.cmpi eq, %78, %c0_i32_26 : i32
    %80 = arith.extui %79 : i1 to i32
    %c0_i32_27 = arith.constant 0 : i32
    %81 = arith.cmpi ne, %80, %c0_i32_27 : i32
    cf.cond_br %81, ^bb8, ^bb9
  ^bb8:  // 2 preds: ^bb7, ^bb24
    %c0_i32_28 = arith.constant 0 : i32
    %82 = llvm.load %6 : !llvm.ptr -> i32
    %c1049544_i64_29 = arith.constant 1049544 : i64
    %83 = arith.extui %c0_i32_28 : i32 to i64
    %84 = arith.addi %83, %c1049544_i64_29 : i64
    %85 = llvm.getelementptr %11[%84] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %82, %85 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_30 = arith.constant 0 : i32
    %c0_i32_31 = arith.constant 0 : i32
    %c1050016_i64_32 = arith.constant 1050016 : i64
    %86 = arith.extui %c0_i32_30 : i32 to i64
    %87 = arith.addi %86, %c1050016_i64_32 : i64
    %88 = llvm.getelementptr %11[%87] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %89 = arith.trunci %c0_i32_31 : i32 to i8
    llvm.store volatile %89, %88 {alignment = 1 : i64} : i8, !llvm.ptr
    %90 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_33 = arith.constant 0 : i32
    %91 = arith.cmpi eq, %90, %c0_i32_33 : i32
    %92 = arith.extui %91 : i1 to i32
    %c0_i32_34 = arith.constant 0 : i32
    %93 = arith.cmpi ne, %92, %c0_i32_34 : i32
    cf.cond_br %93, ^bb3, ^bb26
  ^bb9:  // pred: ^bb7
    %94 = llvm.load %5 : !llvm.ptr -> i32
    %95 = llvm.load %0 : !llvm.ptr -> i32
    %96 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %97 = arith.extui %96 : i32 to i64
    %98 = arith.addi %97, %c20_i64 : i64
    %99 = llvm.getelementptr %11[%98] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %100 = llvm.load volatile %99 {alignment = 1 : i64} : !llvm.ptr -> i32
    %101 = arith.cmpi ult, %100, %17 : i32
    cf.cond_br %101, ^bb10, ^bb11
  ^bb10:  // 2 preds: ^bb9, ^bb11
    %102 = llvm.getelementptr %16[%100] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %103 = llvm.load %102 : !llvm.ptr -> !llvm.ptr
    %104 = llvm.load %103 : !llvm.ptr -> i32
    %c0_i32_35 = arith.constant 0 : i32
    %105 = arith.cmpi eq, %104, %c0_i32_35 : i32
    cf.cond_br %105, ^bb13, ^bb12
  ^bb11:  // pred: ^bb9
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb10
  ^bb12:  // 2 preds: ^bb10, ^bb13
    %106 = llvm.getelementptr %103[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %107 = llvm.getelementptr %103[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %108 = llvm.getelementptr %103[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %109 = llvm.load %106 : !llvm.ptr -> !llvm.ptr
    %110 = llvm.load %108 : !llvm.ptr -> !llvm.ptr
    %111 = llvm.load %109 : !llvm.ptr -> i32
    %c0_i32_36 = arith.constant 0 : i32
    %112 = arith.cmpi eq, %111, %c0_i32_36 : i32
    cf.cond_br %112, ^bb15, ^bb14
  ^bb13:  // pred: ^bb10
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb12
  ^bb14:  // 2 preds: ^bb12, ^bb15
    %113 = llvm.load %107 : !llvm.ptr -> i32
    %114 = arith.cmpi ne, %13, %113 : i32
    cf.cond_br %114, ^bb17, ^bb16
  ^bb15:  // pred: ^bb12
    %c3_i32_37 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_37) : (i32) -> ()
    cf.br ^bb14
  ^bb16:  // 2 preds: ^bb14, ^bb17
    %115 = llvm.call %109(%110, %94, %95) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> !llvm.void
    %116 = llvm.load %5 : !llvm.ptr -> i32
    %117 = llvm.load %4 : !llvm.ptr -> i32
    %c29_i64 = arith.constant 29 : i64
    %118 = arith.extui %116 : i32 to i64
    %119 = arith.addi %118, %c29_i64 : i64
    %120 = llvm.getelementptr %11[%119] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %121 = arith.trunci %117 : i32 to i8
    llvm.store volatile %121, %120 {alignment = 1 : i64} : i8, !llvm.ptr
    %122 = llvm.load %5 : !llvm.ptr -> i32
    %123 = llvm.load %3 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %124 = arith.extui %122 : i32 to i64
    %125 = arith.addi %124, %c28_i64 : i64
    %126 = llvm.getelementptr %11[%125] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %127 = arith.trunci %123 : i32 to i8
    llvm.store volatile %127, %126 {alignment = 1 : i64} : i8, !llvm.ptr
    %128 = llvm.load %5 : !llvm.ptr -> i32
    %129 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i64_38 = arith.constant 24 : i64
    %130 = arith.extui %128 : i32 to i64
    %131 = arith.addi %130, %c24_i64_38 : i64
    %132 = llvm.getelementptr %11[%131] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %129, %132 {alignment = 1 : i64} : i32, !llvm.ptr
    %133 = llvm.load %5 : !llvm.ptr -> i32
    %134 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %135 = arith.extui %134 : i32 to i64
    %136 = arith.addi %135, %c0_i64 : i64
    %137 = llvm.getelementptr %11[%136] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %138 = llvm.load volatile %137 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c16_i64 = arith.constant 16 : i64
    %139 = arith.extui %133 : i32 to i64
    %140 = arith.addi %139, %c16_i64 : i64
    %141 = llvm.getelementptr %11[%140] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %138, %141 {alignment = 1 : i64} : i64, !llvm.ptr
    %c0_i32_39 = arith.constant 0 : i32
    %c1049548_i64_40 = arith.constant 1049548 : i64
    %142 = arith.extui %c0_i32_39 : i32 to i64
    %143 = arith.addi %142, %c1049548_i64_40 : i64
    %144 = llvm.getelementptr %11[%143] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %145 = llvm.load volatile %144 {alignment = 1 : i64} : !llvm.ptr -> i32
    %146 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %147 = arith.addi %146, %c16_i32 : i32
    %c0_i32_41 = arith.constant 0 : i32
    %c1049552_i64 = arith.constant 1049552 : i64
    %148 = arith.extui %c0_i32_41 : i32 to i64
    %149 = arith.addi %148, %c1049552_i64 : i64
    %150 = llvm.getelementptr %11[%149] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %151 = llvm.load volatile %150 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c20_i64_42 = arith.constant 20 : i64
    %152 = arith.extui %151 : i32 to i64
    %153 = arith.addi %152, %c20_i64_42 : i64
    %154 = llvm.getelementptr %11[%153] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %155 = llvm.load volatile %154 {alignment = 1 : i64} : !llvm.ptr -> i32
    %156 = arith.cmpi ult, %155, %19 : i32
    cf.cond_br %156, ^bb18, ^bb19
  ^bb17:  // pred: ^bb14
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb16
  ^bb18:  // 2 preds: ^bb16, ^bb19
    %157 = llvm.getelementptr %18[%155] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %158 = llvm.load %157 : !llvm.ptr -> !llvm.ptr
    %159 = llvm.load %158 : !llvm.ptr -> i32
    %c0_i32_43 = arith.constant 0 : i32
    %160 = arith.cmpi eq, %159, %c0_i32_43 : i32
    cf.cond_br %160, ^bb21, ^bb20
  ^bb19:  // pred: ^bb16
    %c3_i32_44 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_44) : (i32) -> ()
    cf.br ^bb18
  ^bb20:  // 2 preds: ^bb18, ^bb21
    %161 = llvm.getelementptr %158[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %162 = llvm.getelementptr %158[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %163 = llvm.getelementptr %158[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %164 = llvm.load %161 : !llvm.ptr -> !llvm.ptr
    %165 = llvm.load %163 : !llvm.ptr -> !llvm.ptr
    %166 = llvm.load %164 : !llvm.ptr -> i32
    %c0_i32_45 = arith.constant 0 : i32
    %167 = arith.cmpi eq, %166, %c0_i32_45 : i32
    cf.cond_br %167, ^bb23, ^bb22
  ^bb21:  // pred: ^bb18
    %c4_i32_46 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_46) : (i32) -> ()
    cf.br ^bb20
  ^bb22:  // 2 preds: ^bb20, ^bb23
    %168 = llvm.load %162 : !llvm.ptr -> i32
    %169 = arith.cmpi ne, %13, %168 : i32
    cf.cond_br %169, ^bb25, ^bb24
  ^bb23:  // pred: ^bb20
    %c3_i32_47 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_47) : (i32) -> ()
    cf.br ^bb22
  ^bb24:  // 2 preds: ^bb22, ^bb25
    %170 = llvm.call %164(%165, %145, %147) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> !llvm.void
    %c0_i32_48 = arith.constant 0 : i32
    %c1049544_i64_49 = arith.constant 1049544 : i64
    %171 = arith.extui %c0_i32_48 : i32 to i64
    %172 = arith.addi %171, %c1049544_i64_49 : i64
    %173 = llvm.getelementptr %11[%172] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %174 = llvm.load volatile %173 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-1_i32_50 = arith.constant -1 : i32
    %175 = arith.addi %174, %c-1_i32_50 : i32
    llvm.store %175, %6 : i32, !llvm.ptr
    cf.br ^bb8
  ^bb25:  // pred: ^bb22
    %c5_i32_51 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_51) : (i32) -> ()
    cf.br ^bb24
  ^bb26:  // pred: ^bb8
    %176 = llvm.load %0 : !llvm.ptr -> i32
    %177 = llvm.load %1 : !llvm.ptr -> i32
    call @f53(%arg0, %176, %177) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb27:  // 2 preds: ^bb5, ^bb28
    %178 = llvm.getelementptr %20[%49] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %179 = llvm.load %178 : !llvm.ptr -> !llvm.ptr
    %180 = llvm.load %179 : !llvm.ptr -> i32
    %c0_i32_52 = arith.constant 0 : i32
    %181 = arith.cmpi eq, %180, %c0_i32_52 : i32
    cf.cond_br %181, ^bb30, ^bb29
  ^bb28:  // pred: ^bb5
    %c3_i32_53 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_53) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // 2 preds: ^bb27, ^bb30
    %182 = llvm.getelementptr %179[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %183 = llvm.getelementptr %179[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %184 = llvm.getelementptr %179[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %185 = llvm.load %182 : !llvm.ptr -> !llvm.ptr
    %186 = llvm.load %184 : !llvm.ptr -> !llvm.ptr
    %187 = llvm.load %185 : !llvm.ptr -> i32
    %c0_i32_54 = arith.constant 0 : i32
    %188 = arith.cmpi eq, %187, %c0_i32_54 : i32
    cf.cond_br %188, ^bb32, ^bb31
  ^bb30:  // pred: ^bb27
    %c4_i32_55 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_55) : (i32) -> ()
    cf.br ^bb29
  ^bb31:  // 2 preds: ^bb29, ^bb32
    %189 = llvm.load %183 : !llvm.ptr -> i32
    %190 = arith.cmpi ne, %13, %189 : i32
    cf.cond_br %190, ^bb34, ^bb33
  ^bb32:  // pred: ^bb29
    %c3_i32_56 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_56) : (i32) -> ()
    cf.br ^bb31
  ^bb33:  // 2 preds: ^bb31, ^bb34
    %191 = llvm.call %185(%186, %43, %44) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> !llvm.void
    cf.br ^bb3
  ^bb34:  // pred: ^bb31
    %c5_i32_57 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_57) : (i32) -> ()
    cf.br ^bb33
  }
  func.func @f53(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = llvm.load %1 : !llvm.ptr -> i32
    %4 = call @f55(%arg0, %2, %3) : (!llvm.ptr, i32, i32) -> i32
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f54(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> i32
    %8 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.load %9 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %12 = llvm.load %1 : !llvm.ptr -> i32
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_2 = arith.constant 0 : i32
    %c1049540_i64 = arith.constant 1049540 : i64
    %14 = arith.extui %c0_i32_2 : i32 to i64
    %15 = arith.addi %14, %c1049540_i64 : i64
    %16 = llvm.getelementptr %5[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load volatile %16 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %17, %2 : i32, !llvm.ptr
    %c3_i32 = arith.constant 3 : i32
    %18 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_3 = arith.constant 0 : i32
    %19 = arith.cmpi ne, %18, %c0_i32_3 : i32
    %20 = arith.select %19, %17, %c3_i32 : i32
    %21 = arith.cmpi ult, %20, %11 : i32
    cf.cond_br %21, ^bb3, ^bb4
  ^bb2:  // no predecessors
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %22 = llvm.getelementptr %10[%20] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %23 = llvm.load %22 : !llvm.ptr -> !llvm.ptr
    %24 = llvm.load %23 : !llvm.ptr -> i32
    %c0_i32_4 = arith.constant 0 : i32
    %25 = arith.cmpi eq, %24, %c0_i32_4 : i32
    cf.cond_br %25, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32_5 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_5) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %26 = llvm.getelementptr %23[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %27 = llvm.getelementptr %23[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %28 = llvm.getelementptr %23[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %29 = llvm.load %26 : !llvm.ptr -> !llvm.ptr
    %30 = llvm.load %28 : !llvm.ptr -> !llvm.ptr
    %31 = llvm.load %29 : !llvm.ptr -> i32
    %c0_i32_6 = arith.constant 0 : i32
    %32 = arith.cmpi eq, %31, %c0_i32_6 : i32
    cf.cond_br %32, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %33 = llvm.load %27 : !llvm.ptr -> i32
    %34 = arith.cmpi ne, %7, %33 : i32
    cf.cond_br %34, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_7 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_7) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %35 = llvm.call %29(%30, %12, %13) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> !llvm.void
    llvm.unreachable
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func @f55(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    llvm.unreachable
  ^bb2(%2: i32):  // no predecessors
    return %2 : i32
  }
  func.func @f56(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %7 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %c31_i32 = arith.constant 31 : i32
    %8 = arith.cmpi ule, %c16_i32, %c31_i32 : i32
    %9 = scf.if %8 -> (i32) {
      %36 = arith.shrui %7, %c16_i32 : i32
      scf.yield %36 : i32
    } else {
      %c0_i32_11 = arith.constant 0 : i32
      scf.yield %c0_i32_11 : i32
    }
    %c0_i32_3 = arith.constant 0 : i32
    %10 = call @dora_fn_wasm_memory_grow(%arg0, %9, %c0_i32_3) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %10, %3 : i32, !llvm.ptr
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_4 = arith.constant 0 : i32
    %c8_i64 = arith.constant 8 : i64
    %12 = arith.extui %11 : i32 to i64
    %13 = arith.addi %12, %c8_i64 : i64
    %14 = llvm.getelementptr %6[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_4, %14 {alignment = 1 : i64} : i32, !llvm.ptr
    %15 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_5 = arith.constant 0 : i32
    %16 = llvm.load %2 : !llvm.ptr -> i32
    %c-65536_i32 = arith.constant -65536 : i32
    %17 = arith.andi %16, %c-65536_i32 : i32
    %18 = llvm.load %3 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %19 = arith.cmpi eq, %18, %c-1_i32 : i32
    %20 = arith.extui %19 : i1 to i32
    llvm.store %20, %2 : i32, !llvm.ptr
    %c0_i32_6 = arith.constant 0 : i32
    %21 = arith.cmpi ne, %20, %c0_i32_6 : i32
    %22 = arith.select %21, %c0_i32_5, %17 : i32
    %c4_i64 = arith.constant 4 : i64
    %23 = arith.extui %15 : i32 to i64
    %24 = arith.addi %23, %c4_i64 : i64
    %25 = llvm.getelementptr %6[%24] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %22, %25 {alignment = 1 : i64} : i32, !llvm.ptr
    %26 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_7 = arith.constant 0 : i32
    %27 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_8 = arith.constant 16 : i32
    %c31_i32_9 = arith.constant 31 : i32
    %28 = arith.cmpi ule, %c16_i32_8, %c31_i32_9 : i32
    %29 = scf.if %28 -> (i32) {
      %36 = arith.shli %27, %c16_i32_8 : i32
      scf.yield %36 : i32
    } else {
      %c0_i32_11 = arith.constant 0 : i32
      scf.yield %c0_i32_11 : i32
    }
    %30 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_10 = arith.constant 0 : i32
    %31 = arith.cmpi ne, %30, %c0_i32_10 : i32
    %32 = arith.select %31, %c0_i32_7, %29 : i32
    %c0_i64 = arith.constant 0 : i64
    %33 = arith.extui %26 : i32 to i64
    %34 = arith.addi %33, %c0_i64 : i64
    %35 = llvm.getelementptr %6[%34] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %32, %35 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f57(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %c1049008_i32 = arith.constant 1049008 : i32
    %3 = llvm.load %1 : !llvm.ptr -> i32
    %4 = call @f75(%arg0, %2, %c1049008_i32, %3) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%4 : i32)
  ^bb2(%5: i32):  // pred: ^bb1
    return %5 : i32
  }
  func.func @f58(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %9 = llvm.load volatile %8 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %9, %1 : i32, !llvm.ptr
    %c0_i32_1 = arith.constant 0 : i32
    %10 = arith.cmpi eq, %9, %c0_i32_1 : i32
    %11 = arith.extui %10 : i1 to i32
    %c0_i32_2 = arith.constant 0 : i32
    %12 = arith.cmpi ne, %11, %c0_i32_2 : i32
    cf.cond_br %12, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c4_i64 : i64
    %16 = llvm.getelementptr %4[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load volatile %16 {alignment = 1 : i64} : !llvm.ptr -> i32
    %18 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32 = arith.constant 1 : i32
    call @f18(%arg0, %17, %18, %c1_i32) : (!llvm.ptr, i32, i32, i32) -> ()
    cf.br ^bb3
  }
  func.func @f59(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %c1049000_i32 = arith.constant 1049000 : i32
    %c5_i32 = arith.constant 5 : i32
    %3 = call @f82(%arg0, %2, %c1049000_i32, %c5_i32) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func @f60(%arg0: !llvm.ptr) {
    %c0_i32 = arith.constant 0 : i32
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    %3 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %6 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %7 = arith.subi %6, %c32_i32 : i32
    llvm.store %7, %0 : i32, !llvm.ptr
    llvm.store %7, %2 : i32, !llvm.ptr
    %8 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %c24_i64 = arith.constant 24 : i64
    %9 = arith.extui %8 : i32 to i64
    %10 = arith.addi %9, %c24_i64 : i64
    %11 = llvm.getelementptr %5[%10] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_0, %11 {alignment = 1 : i64} : i32, !llvm.ptr
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32 = arith.constant 1 : i32
    %c12_i64 = arith.constant 12 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c12_i64 : i64
    %15 = llvm.getelementptr %5[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32, %15 {alignment = 1 : i64} : i32, !llvm.ptr
    %16 = llvm.load %0 : !llvm.ptr -> i32
    %c1049052_i32 = arith.constant 1049052 : i32
    %c8_i64 = arith.constant 8 : i64
    %17 = arith.extui %16 : i32 to i64
    %18 = arith.addi %17, %c8_i64 : i64
    %19 = llvm.getelementptr %5[%18] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049052_i32, %19 {alignment = 1 : i64} : i32, !llvm.ptr
    %20 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %c16_i64 = arith.constant 16 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c16_i64 : i64
    %23 = llvm.getelementptr %5[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4_i64, %23 {alignment = 1 : i64} : i64, !llvm.ptr
    %24 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %25 = arith.addi %24, %c8_i32 : i32
    %c1049088_i32 = arith.constant 1049088 : i32
    call @f70(%arg0, %25, %c1049088_i32) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f61(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i64_4 = arith.constant 1 : i64
    %5 = llvm.alloca %c1_i64_4 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %11 = llvm.load %7 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %12 = arith.subi %11, %c32_i32 : i32
    llvm.store %12, %3 : i32, !llvm.ptr
    llvm.store %12, %7 : i32, !llvm.ptr
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %14 = llvm.load %2 : !llvm.ptr -> i32
    %15 = arith.addi %13, %14 : i32
    llvm.store %15, %2 : i32, !llvm.ptr
    %16 = llvm.load %1 : !llvm.ptr -> i32
    %17 = arith.cmpi uge, %15, %16 : i32
    %18 = arith.extui %17 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %19 = arith.cmpi ne, %18, %c0_i32_5 : i32
    cf.cond_br %19, ^bb3, ^bb4
  ^bb2:  // pred: ^bb8
    return
  ^bb3:  // pred: ^bb1
    %c1_i32 = arith.constant 1 : i32
    llvm.store %c1_i32, %4 : i32, !llvm.ptr
    %20 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c0_i64 : i64
    %23 = llvm.getelementptr %10[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %24 = llvm.load volatile %23 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %24, %5 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %c31_i32 = arith.constant 31 : i32
    %25 = arith.cmpi ule, %c1_i32_6, %c31_i32 : i32
    %26 = scf.if %25 -> (i32) {
      %104 = arith.shli %24, %c1_i32_6 : i32
      scf.yield %104 : i32
    } else {
      %c0_i32_23 = arith.constant 0 : i32
      scf.yield %c0_i32_23 : i32
    }
    llvm.store %26, %1 : i32, !llvm.ptr
    %27 = llvm.load %2 : !llvm.ptr -> i32
    %28 = llvm.load %1 : !llvm.ptr -> i32
    %29 = llvm.load %2 : !llvm.ptr -> i32
    %30 = arith.cmpi ugt, %28, %29 : i32
    %31 = arith.extui %30 : i1 to i32
    %c0_i32_7 = arith.constant 0 : i32
    %32 = arith.cmpi ne, %31, %c0_i32_7 : i32
    %33 = arith.select %32, %26, %27 : i32
    llvm.store %33, %1 : i32, !llvm.ptr
    %c8_i32 = arith.constant 8 : i32
    %34 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_8 = arith.constant 8 : i32
    %35 = arith.cmpi ugt, %34, %c8_i32_8 : i32
    %36 = arith.extui %35 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %37 = arith.cmpi ne, %36, %c0_i32_9 : i32
    %38 = arith.select %37, %33, %c8_i32 : i32
    llvm.store %38, %1 : i32, !llvm.ptr
    %c-1_i32 = arith.constant -1 : i32
    %39 = arith.xori %38, %c-1_i32 : i32
    %c31_i32_10 = arith.constant 31 : i32
    %c31_i32_11 = arith.constant 31 : i32
    %40 = arith.cmpi ule, %c31_i32_10, %c31_i32_11 : i32
    %41 = scf.if %40 -> (i32) {
      %104 = arith.shrui %39, %c31_i32_10 : i32
      scf.yield %104 : i32
    } else {
      %c0_i32_23 = arith.constant 0 : i32
      scf.yield %c0_i32_23 : i32
    }
    llvm.store %41, %2 : i32, !llvm.ptr
    %42 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i32_12 = arith.constant 0 : i32
    %43 = arith.cmpi ne, %42, %c0_i32_12 : i32
    cf.cond_br %43, ^bb6, ^bb7
  ^bb4:  // pred: ^bb1
    %c0_i32_13 = arith.constant 0 : i32
    %c0_i32_14 = arith.constant 0 : i32
    call @f62(%arg0, %c0_i32_13, %c0_i32_14) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb5:  // 2 preds: ^bb6, ^bb7
    %44 = llvm.load %3 : !llvm.ptr -> i32
    %45 = llvm.load %4 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %46 = arith.extui %44 : i32 to i64
    %47 = arith.addi %46, %c24_i64 : i64
    %48 = llvm.getelementptr %10[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %45, %48 {alignment = 1 : i64} : i32, !llvm.ptr
    %49 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_15 = arith.constant 8 : i32
    %50 = arith.addi %49, %c8_i32_15 : i32
    %51 = llvm.load %2 : !llvm.ptr -> i32
    %52 = llvm.load %1 : !llvm.ptr -> i32
    %53 = llvm.load %3 : !llvm.ptr -> i32
    %c20_i32 = arith.constant 20 : i32
    %54 = arith.addi %53, %c20_i32 : i32
    call @f63(%arg0, %50, %51, %52, %54) : (!llvm.ptr, i32, i32, i32, i32) -> ()
    %55 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %56 = arith.extui %55 : i32 to i64
    %57 = arith.addi %56, %c8_i64 : i64
    %58 = llvm.getelementptr %10[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %59 = llvm.load volatile %58 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_16 = arith.constant 0 : i32
    %60 = arith.cmpi eq, %59, %c0_i32_16 : i32
    %61 = arith.extui %60 : i1 to i32
    %c0_i32_17 = arith.constant 0 : i32
    %62 = arith.cmpi ne, %61, %c0_i32_17 : i32
    cf.cond_br %62, ^bb8, ^bb9
  ^bb6:  // pred: ^bb3
    %63 = llvm.load %3 : !llvm.ptr -> i32
    %64 = llvm.load %5 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %65 = arith.extui %63 : i32 to i64
    %66 = arith.addi %65, %c28_i64 : i64
    %67 = llvm.getelementptr %10[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %64, %67 {alignment = 1 : i64} : i32, !llvm.ptr
    %68 = llvm.load %3 : !llvm.ptr -> i32
    %69 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %70 = arith.extui %69 : i32 to i64
    %71 = arith.addi %70, %c4_i64 : i64
    %72 = llvm.getelementptr %10[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %73 = llvm.load volatile %72 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %74 = arith.extui %68 : i32 to i64
    %75 = arith.addi %74, %c20_i64 : i64
    %76 = llvm.getelementptr %10[%75] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %73, %76 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb5
  ^bb7:  // pred: ^bb3
    %c0_i32_18 = arith.constant 0 : i32
    llvm.store %c0_i32_18, %4 : i32, !llvm.ptr
    cf.br ^bb5
  ^bb8:  // pred: ^bb5
    %77 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %78 = arith.extui %77 : i32 to i64
    %79 = arith.addi %78, %c12_i64 : i64
    %80 = llvm.getelementptr %10[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %81 = llvm.load volatile %80 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %81, %2 : i32, !llvm.ptr
    %82 = llvm.load %0 : !llvm.ptr -> i32
    %83 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_19 = arith.constant 0 : i64
    %84 = arith.extui %82 : i32 to i64
    %85 = arith.addi %84, %c0_i64_19 : i64
    %86 = llvm.getelementptr %10[%85] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %83, %86 {alignment = 1 : i64} : i32, !llvm.ptr
    %87 = llvm.load %0 : !llvm.ptr -> i32
    %88 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_20 = arith.constant 4 : i64
    %89 = arith.extui %87 : i32 to i64
    %90 = arith.addi %89, %c4_i64_20 : i64
    %91 = llvm.getelementptr %10[%90] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %88, %91 {alignment = 1 : i64} : i32, !llvm.ptr
    %92 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_21 = arith.constant 32 : i32
    %93 = arith.addi %92, %c32_i32_21 : i32
    llvm.store %93, %7 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb9:  // pred: ^bb5
    %94 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i64_22 = arith.constant 12 : i64
    %95 = arith.extui %94 : i32 to i64
    %96 = arith.addi %95, %c12_i64_22 : i64
    %97 = llvm.getelementptr %10[%96] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %98 = llvm.load volatile %97 {alignment = 1 : i64} : !llvm.ptr -> i32
    %99 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %100 = arith.extui %99 : i32 to i64
    %101 = arith.addi %100, %c16_i64 : i64
    %102 = llvm.getelementptr %10[%101] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %103 = llvm.load volatile %102 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f62(%arg0, %98, %103) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  }
  func.func @f62(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %3 = arith.cmpi ne, %2, %c0_i32 : i32
    cf.cond_br %3, ^bb3, ^bb4
  ^bb2:  // no predecessors
    return
  ^bb3:  // pred: ^bb1
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %5 = llvm.load %1 : !llvm.ptr -> i32
    call @f65(%arg0, %4, %5) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb4:  // pred: ^bb1
    call @f60(%arg0) : (!llvm.ptr) -> ()
    llvm.unreachable
  }
  func.func @f63(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i64_4 = arith.constant 1 : i64
    %5 = llvm.alloca %c1_i64_4 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i64_5 = arith.constant 1 : i64
    %6 = llvm.alloca %c1_i64_5 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %7 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %7[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    llvm.store %c1_i32, %4 : i32, !llvm.ptr
    %c0_i32_6 = arith.constant 0 : i32
    llvm.store %c0_i32_6, %5 : i32, !llvm.ptr
    %c4_i32 = arith.constant 4 : i32
    llvm.store %c4_i32, %6 : i32, !llvm.ptr
    %10 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_7 = arith.constant 0 : i32
    %11 = arith.cmpi eq, %10, %c0_i32_7 : i32
    %12 = arith.extui %11 : i1 to i32
    %c0_i32_8 = arith.constant 0 : i32
    %13 = arith.cmpi ne, %12, %c0_i32_8 : i32
    cf.cond_br %13, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 3 preds: ^bb1, ^bb4, ^bb6
    %14 = llvm.load %0 : !llvm.ptr -> i32
    %15 = llvm.load %6 : !llvm.ptr -> i32
    %16 = arith.addi %14, %15 : i32
    %17 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %18 = arith.extui %16 : i32 to i64
    %19 = arith.addi %18, %c0_i64 : i64
    %20 = llvm.getelementptr %9[%19] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %17, %20 {alignment = 1 : i64} : i32, !llvm.ptr
    %21 = llvm.load %0 : !llvm.ptr -> i32
    %22 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_9 = arith.constant 0 : i64
    %23 = arith.extui %21 : i32 to i64
    %24 = arith.addi %23, %c0_i64_9 : i64
    %25 = llvm.getelementptr %9[%24] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %22, %25 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %26 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_10 = arith.constant 0 : i32
    %27 = arith.cmpi slt, %26, %c0_i32_10 : i32
    %28 = arith.extui %27 : i1 to i32
    %c0_i32_11 = arith.constant 0 : i32
    %29 = arith.cmpi ne, %28, %c0_i32_11 : i32
    cf.cond_br %29, ^bb3, ^bb5
  ^bb5:  // pred: ^bb4
    %30 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %31 = arith.extui %30 : i32 to i64
    %32 = arith.addi %31, %c4_i64 : i64
    %33 = llvm.getelementptr %9[%32] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %34 = llvm.load volatile %33 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_12 = arith.constant 0 : i32
    %35 = arith.cmpi eq, %34, %c0_i32_12 : i32
    %36 = arith.extui %35 : i1 to i32
    %c0_i32_13 = arith.constant 0 : i32
    %37 = arith.cmpi ne, %36, %c0_i32_13 : i32
    cf.cond_br %37, ^bb10, ^bb11
  ^bb6:  // 2 preds: ^bb7, ^bb8
    %c8_i32 = arith.constant 8 : i32
    llvm.store %c8_i32, %6 : i32, !llvm.ptr
    %38 = llvm.load %2 : !llvm.ptr -> i32
    llvm.store %38, %5 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb7:  // pred: ^bb9
    %c1_i32_14 = arith.constant 1 : i32
    llvm.store %c1_i32_14, %4 : i32, !llvm.ptr
    %39 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_15 = arith.constant 1 : i32
    %c4_i64_16 = arith.constant 4 : i64
    %40 = arith.extui %39 : i32 to i64
    %41 = arith.addi %40, %c4_i64_16 : i64
    %42 = llvm.getelementptr %9[%41] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_15, %42 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb6
  ^bb8:  // 3 preds: ^bb15, ^bb17, ^bb18
    %43 = llvm.load %0 : !llvm.ptr -> i32
    %44 = llvm.load %4 : !llvm.ptr -> i32
    %c4_i64_17 = arith.constant 4 : i64
    %45 = arith.extui %43 : i32 to i64
    %46 = arith.addi %45, %c4_i64_17 : i64
    %47 = llvm.getelementptr %9[%46] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %44, %47 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_18 = arith.constant 0 : i32
    llvm.store %c0_i32_18, %4 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb9:  // 3 preds: ^bb12, ^bb14, ^bb16
    %48 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i32_19 = arith.constant 0 : i32
    %49 = arith.cmpi eq, %48, %c0_i32_19 : i32
    %50 = arith.extui %49 : i1 to i32
    %c0_i32_20 = arith.constant 0 : i32
    %51 = arith.cmpi ne, %50, %c0_i32_20 : i32
    cf.cond_br %51, ^bb7, ^bb18
  ^bb10:  // pred: ^bb5
    %52 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_21 = arith.constant 0 : i32
    %53 = arith.cmpi ne, %52, %c0_i32_21 : i32
    cf.cond_br %53, ^bb16, ^bb17
  ^bb11:  // pred: ^bb5
    %54 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %55 = arith.extui %54 : i32 to i64
    %56 = arith.addi %55, %c8_i64 : i64
    %57 = llvm.getelementptr %9[%56] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %58 = llvm.load volatile %57 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %58, %4 : i32, !llvm.ptr
    %c0_i32_22 = arith.constant 0 : i32
    %59 = arith.cmpi ne, %58, %c0_i32_22 : i32
    cf.cond_br %59, ^bb12, ^bb13
  ^bb12:  // pred: ^bb11
    %60 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_23 = arith.constant 0 : i64
    %61 = arith.extui %60 : i32 to i64
    %62 = arith.addi %61, %c0_i64_23 : i64
    %63 = llvm.getelementptr %9[%62] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %64 = llvm.load volatile %63 {alignment = 1 : i64} : !llvm.ptr -> i32
    %65 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i32_24 = arith.constant 1 : i32
    %66 = llvm.load %2 : !llvm.ptr -> i32
    %67 = call @f19(%arg0, %64, %65, %c1_i32_24, %66) : (!llvm.ptr, i32, i32, i32, i32) -> i32
    llvm.store %67, %4 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb13:  // pred: ^bb11
    %68 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_25 = arith.constant 0 : i32
    %69 = arith.cmpi ne, %68, %c0_i32_25 : i32
    cf.cond_br %69, ^bb14, ^bb15
  ^bb14:  // pred: ^bb13
    %c0_i32_26 = arith.constant 0 : i32
    %c1049537_i64 = arith.constant 1049537 : i64
    %70 = arith.extui %c0_i32_26 : i32 to i64
    %71 = arith.addi %70, %c1049537_i64 : i64
    %72 = llvm.getelementptr %9[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %73 = llvm.load volatile %72 {alignment = 1 : i64} : !llvm.ptr -> i8
    %74 = arith.extui %73 : i8 to i32
    %75 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_27 = arith.constant 1 : i32
    %76 = call @f17(%arg0, %75, %c1_i32_27) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %76, %4 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb15:  // pred: ^bb13
    %c1_i32_28 = arith.constant 1 : i32
    llvm.store %c1_i32_28, %4 : i32, !llvm.ptr
    cf.br ^bb8
  ^bb16:  // pred: ^bb10
    %c0_i32_29 = arith.constant 0 : i32
    %c1049537_i64_30 = arith.constant 1049537 : i64
    %77 = arith.extui %c0_i32_29 : i32 to i64
    %78 = arith.addi %77, %c1049537_i64_30 : i64
    %79 = llvm.getelementptr %9[%78] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %80 = llvm.load volatile %79 {alignment = 1 : i64} : !llvm.ptr -> i8
    %81 = arith.extui %80 : i8 to i32
    %82 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_31 = arith.constant 1 : i32
    %83 = call @f17(%arg0, %82, %c1_i32_31) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %83, %4 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb17:  // pred: ^bb10
    %c1_i32_32 = arith.constant 1 : i32
    llvm.store %c1_i32_32, %4 : i32, !llvm.ptr
    cf.br ^bb8
  ^bb18:  // pred: ^bb9
    cf.br ^bb8
  }
  func.func @f64(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i64_4 = arith.constant 1 : i64
    %5 = llvm.alloca %c1_i64_4 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %11 = llvm.load %7 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %12 = arith.subi %11, %c32_i32 : i32
    llvm.store %12, %1 : i32, !llvm.ptr
    llvm.store %12, %7 : i32, !llvm.ptr
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c0_i64 : i64
    %16 = llvm.getelementptr %10[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load volatile %16 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %17, %2 : i32, !llvm.ptr
    %c-1_i32 = arith.constant -1 : i32
    %18 = arith.cmpi eq, %17, %c-1_i32 : i32
    %19 = arith.extui %18 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %20 = arith.cmpi eq, %19, %c0_i32_5 : i32
    %21 = arith.extui %20 : i1 to i32
    %c0_i32_6 = arith.constant 0 : i32
    %22 = arith.cmpi ne, %21, %c0_i32_6 : i32
    cf.cond_br %22, ^bb3, ^bb4
  ^bb2:  // pred: ^bb8
    return
  ^bb3:  // pred: ^bb1
    %c1_i32 = arith.constant 1 : i32
    llvm.store %c1_i32, %3 : i32, !llvm.ptr
    %23 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_7 = arith.constant 1 : i32
    %c31_i32 = arith.constant 31 : i32
    %24 = arith.cmpi ule, %c1_i32_7, %c31_i32 : i32
    %25 = scf.if %24 -> (i32) {
      %104 = arith.shli %23, %c1_i32_7 : i32
      scf.yield %104 : i32
    } else {
      %c0_i32_26 = arith.constant 0 : i32
      scf.yield %c0_i32_26 : i32
    }
    llvm.store %25, %4 : i32, !llvm.ptr
    %26 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_8 = arith.constant 1 : i32
    %27 = arith.addi %26, %c1_i32_8 : i32
    llvm.store %27, %5 : i32, !llvm.ptr
    %28 = llvm.load %4 : !llvm.ptr -> i32
    %29 = llvm.load %5 : !llvm.ptr -> i32
    %30 = arith.cmpi ugt, %28, %29 : i32
    %31 = arith.extui %30 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %32 = arith.cmpi ne, %31, %c0_i32_9 : i32
    %33 = arith.select %32, %25, %27 : i32
    llvm.store %33, %4 : i32, !llvm.ptr
    %c8_i32 = arith.constant 8 : i32
    %34 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i32_10 = arith.constant 8 : i32
    %35 = arith.cmpi ugt, %34, %c8_i32_10 : i32
    %36 = arith.extui %35 : i1 to i32
    %c0_i32_11 = arith.constant 0 : i32
    %37 = arith.cmpi ne, %36, %c0_i32_11 : i32
    %38 = arith.select %37, %33, %c8_i32 : i32
    llvm.store %38, %4 : i32, !llvm.ptr
    %c-1_i32_12 = arith.constant -1 : i32
    %39 = arith.xori %38, %c-1_i32_12 : i32
    %c31_i32_13 = arith.constant 31 : i32
    %c31_i32_14 = arith.constant 31 : i32
    %40 = arith.cmpi ule, %c31_i32_13, %c31_i32_14 : i32
    %41 = scf.if %40 -> (i32) {
      %104 = arith.shrui %39, %c31_i32_13 : i32
      scf.yield %104 : i32
    } else {
      %c0_i32_26 = arith.constant 0 : i32
      scf.yield %c0_i32_26 : i32
    }
    llvm.store %41, %5 : i32, !llvm.ptr
    %42 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_15 = arith.constant 0 : i32
    %43 = arith.cmpi ne, %42, %c0_i32_15 : i32
    cf.cond_br %43, ^bb6, ^bb7
  ^bb4:  // pred: ^bb1
    %c0_i32_16 = arith.constant 0 : i32
    %c0_i32_17 = arith.constant 0 : i32
    call @f62(%arg0, %c0_i32_16, %c0_i32_17) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb5:  // 2 preds: ^bb6, ^bb7
    %44 = llvm.load %1 : !llvm.ptr -> i32
    %45 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %46 = arith.extui %44 : i32 to i64
    %47 = arith.addi %46, %c24_i64 : i64
    %48 = llvm.getelementptr %10[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %45, %48 {alignment = 1 : i64} : i32, !llvm.ptr
    %49 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_18 = arith.constant 8 : i32
    %50 = arith.addi %49, %c8_i32_18 : i32
    %51 = llvm.load %5 : !llvm.ptr -> i32
    %52 = llvm.load %4 : !llvm.ptr -> i32
    %53 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i32 = arith.constant 20 : i32
    %54 = arith.addi %53, %c20_i32 : i32
    call @f63(%arg0, %50, %51, %52, %54) : (!llvm.ptr, i32, i32, i32, i32) -> ()
    %55 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %56 = arith.extui %55 : i32 to i64
    %57 = arith.addi %56, %c8_i64 : i64
    %58 = llvm.getelementptr %10[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %59 = llvm.load volatile %58 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_19 = arith.constant 0 : i32
    %60 = arith.cmpi eq, %59, %c0_i32_19 : i32
    %61 = arith.extui %60 : i1 to i32
    %c0_i32_20 = arith.constant 0 : i32
    %62 = arith.cmpi ne, %61, %c0_i32_20 : i32
    cf.cond_br %62, ^bb8, ^bb9
  ^bb6:  // pred: ^bb3
    %63 = llvm.load %1 : !llvm.ptr -> i32
    %64 = llvm.load %2 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %65 = arith.extui %63 : i32 to i64
    %66 = arith.addi %65, %c28_i64 : i64
    %67 = llvm.getelementptr %10[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %64, %67 {alignment = 1 : i64} : i32, !llvm.ptr
    %68 = llvm.load %1 : !llvm.ptr -> i32
    %69 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %70 = arith.extui %69 : i32 to i64
    %71 = arith.addi %70, %c4_i64 : i64
    %72 = llvm.getelementptr %10[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %73 = llvm.load volatile %72 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %74 = arith.extui %68 : i32 to i64
    %75 = arith.addi %74, %c20_i64 : i64
    %76 = llvm.getelementptr %10[%75] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %73, %76 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb5
  ^bb7:  // pred: ^bb3
    %c0_i32_21 = arith.constant 0 : i32
    llvm.store %c0_i32_21, %3 : i32, !llvm.ptr
    cf.br ^bb5
  ^bb8:  // pred: ^bb5
    %77 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %78 = arith.extui %77 : i32 to i64
    %79 = arith.addi %78, %c12_i64 : i64
    %80 = llvm.getelementptr %10[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %81 = llvm.load volatile %80 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %81, %2 : i32, !llvm.ptr
    %82 = llvm.load %0 : !llvm.ptr -> i32
    %83 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_22 = arith.constant 0 : i64
    %84 = arith.extui %82 : i32 to i64
    %85 = arith.addi %84, %c0_i64_22 : i64
    %86 = llvm.getelementptr %10[%85] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %83, %86 {alignment = 1 : i64} : i32, !llvm.ptr
    %87 = llvm.load %0 : !llvm.ptr -> i32
    %88 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_23 = arith.constant 4 : i64
    %89 = arith.extui %87 : i32 to i64
    %90 = arith.addi %89, %c4_i64_23 : i64
    %91 = llvm.getelementptr %10[%90] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %88, %91 {alignment = 1 : i64} : i32, !llvm.ptr
    %92 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i32_24 = arith.constant 32 : i32
    %93 = arith.addi %92, %c32_i32_24 : i32
    llvm.store %93, %7 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb9:  // pred: ^bb5
    %94 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64_25 = arith.constant 12 : i64
    %95 = arith.extui %94 : i32 to i64
    %96 = arith.addi %95, %c12_i64_25 : i64
    %97 = llvm.getelementptr %10[%96] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %98 = llvm.load volatile %97 {alignment = 1 : i64} : !llvm.ptr -> i32
    %99 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %100 = arith.extui %99 : i32 to i64
    %101 = arith.addi %100, %c16_i64 : i64
    %102 = llvm.getelementptr %10[%101] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %103 = llvm.load volatile %102 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f62(%arg0, %98, %103) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  }
  func.func @f65(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.load %0 : !llvm.ptr -> i32
    call @f20(%arg0, %2, %3) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f66(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i64_4 = arith.constant 1 : i64
    %5 = llvm.alloca %c1_i64_4 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i64_5 = arith.constant 1 : i64
    %6 = llvm.alloca %c1_i64_5 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i64_6 = arith.constant 1 : i64
    %7 = llvm.alloca %c1_i64_6 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i64_7 = arith.constant 1 : i64
    %8 = llvm.alloca %c1_i64_7 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %9 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %14 = llvm.load %10 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %15 = arith.subi %14, %c16_i32 : i32
    llvm.store %15, %2 : i32, !llvm.ptr
    llvm.store %15, %10 : i32, !llvm.ptr
    %16 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %17 = arith.extui %16 : i32 to i64
    %18 = arith.addi %17, %c4_i64 : i64
    %19 = llvm.getelementptr %13[%18] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %20 = llvm.load volatile %19 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %20, %3 : i32, !llvm.ptr
    %c0_i32_8 = arith.constant 0 : i32
    %21 = arith.cmpi eq, %20, %c0_i32_8 : i32
    %22 = arith.extui %21 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %23 = arith.cmpi ne, %22, %c0_i32_9 : i32
    cf.cond_br %23, ^bb7, ^bb8
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // pred: ^bb5
    %24 = llvm.load %0 : !llvm.ptr -> i32
    %25 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %26 = arith.extui %25 : i32 to i64
    %27 = arith.addi %26, %c0_i64 : i64
    %28 = llvm.getelementptr %13[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %29 = llvm.load volatile %28 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_10 = arith.constant 0 : i64
    %30 = arith.extui %24 : i32 to i64
    %31 = arith.addi %30, %c0_i64_10 : i64
    %32 = llvm.getelementptr %13[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %29, %32 {alignment = 1 : i64} : i64, !llvm.ptr
    %33 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %34 = arith.addi %33, %c8_i32 : i32
    %35 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_11 = arith.constant 8 : i32
    %36 = arith.addi %35, %c8_i32_11 : i32
    %c0_i64_12 = arith.constant 0 : i64
    %37 = arith.extui %36 : i32 to i64
    %38 = arith.addi %37, %c0_i64_12 : i64
    %39 = llvm.getelementptr %13[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %40 = llvm.load volatile %39 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_13 = arith.constant 0 : i64
    %41 = arith.extui %34 : i32 to i64
    %42 = arith.addi %41, %c0_i64_13 : i64
    %43 = llvm.getelementptr %13[%42] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %40, %43 {alignment = 1 : i64} : i32, !llvm.ptr
    %44 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_14 = arith.constant 16 : i32
    %45 = arith.addi %44, %c16_i32_14 : i32
    llvm.store %45, %10 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // 2 preds: ^bb6, ^bb25
    %46 = llvm.load %5 : !llvm.ptr -> i32
    %47 = llvm.load %3 : !llvm.ptr -> i32
    call @f62(%arg0, %46, %47) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb5:  // 2 preds: ^bb7, ^bb26
    %48 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_15 = arith.constant 0 : i32
    %c8_i64 = arith.constant 8 : i64
    %49 = arith.extui %48 : i32 to i64
    %50 = arith.addi %49, %c8_i64 : i64
    %51 = llvm.getelementptr %13[%50] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_15, %51 {alignment = 1 : i64} : i32, !llvm.ptr
    %52 = llvm.load %2 : !llvm.ptr -> i32
    %53 = llvm.load %7 : !llvm.ptr -> i32
    %c4_i64_16 = arith.constant 4 : i64
    %54 = arith.extui %52 : i32 to i64
    %55 = arith.addi %54, %c4_i64_16 : i64
    %56 = llvm.getelementptr %13[%55] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %53, %56 {alignment = 1 : i64} : i32, !llvm.ptr
    %57 = llvm.load %2 : !llvm.ptr -> i32
    %58 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_17 = arith.constant 0 : i64
    %59 = arith.extui %57 : i32 to i64
    %60 = arith.addi %59, %c0_i64_17 : i64
    %61 = llvm.getelementptr %13[%60] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %58, %61 {alignment = 1 : i64} : i32, !llvm.ptr
    %62 = llvm.load %2 : !llvm.ptr -> i32
    %c1049008_i32 = arith.constant 1049008 : i32
    %63 = llvm.load %1 : !llvm.ptr -> i32
    %64 = call @f75(%arg0, %62, %c1049008_i32, %63) : (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_18 = arith.constant 0 : i32
    %65 = arith.cmpi eq, %64, %c0_i32_18 : i32
    %66 = arith.extui %65 : i1 to i32
    %c0_i32_19 = arith.constant 0 : i32
    %67 = arith.cmpi ne, %66, %c0_i32_19 : i32
    cf.cond_br %67, ^bb3, ^bb27
  ^bb6:  // pred: ^bb20
    %c0_i32_20 = arith.constant 0 : i32
    llvm.store %c0_i32_20, %5 : i32, !llvm.ptr
    %68 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_21 = arith.constant 0 : i32
    %69 = arith.cmpi slt, %68, %c0_i32_21 : i32
    %70 = arith.extui %69 : i1 to i32
    %c0_i32_22 = arith.constant 0 : i32
    %71 = arith.cmpi ne, %70, %c0_i32_22 : i32
    cf.cond_br %71, ^bb4, ^bb25
  ^bb7:  // 4 preds: ^bb1, ^bb21, ^bb22, ^bb24
    %c1_i32 = arith.constant 1 : i32
    llvm.store %c1_i32, %7 : i32, !llvm.ptr
    %c0_i32_23 = arith.constant 0 : i32
    llvm.store %c0_i32_23, %3 : i32, !llvm.ptr
    cf.br ^bb5
  ^bb8:  // pred: ^bb1
    %72 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_24 = arith.constant 0 : i64
    %73 = arith.extui %72 : i32 to i64
    %74 = arith.addi %73, %c0_i64_24 : i64
    %75 = llvm.getelementptr %13[%74] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %76 = llvm.load volatile %75 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %76, %4 : i32, !llvm.ptr
    %77 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %78 = arith.andi %77, %c3_i32 : i32
    llvm.store %78, %5 : i32, !llvm.ptr
    %79 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %80 = arith.cmpi uge, %79, %c4_i32 : i32
    %81 = arith.extui %80 : i1 to i32
    %c0_i32_25 = arith.constant 0 : i32
    %82 = arith.cmpi ne, %81, %c0_i32_25 : i32
    cf.cond_br %82, ^bb10, ^bb11
  ^bb9:  // 2 preds: ^bb11, ^bb12
    %83 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i32_26 = arith.constant 0 : i32
    %84 = arith.cmpi eq, %83, %c0_i32_26 : i32
    %85 = arith.extui %84 : i1 to i32
    %c0_i32_27 = arith.constant 0 : i32
    %86 = arith.cmpi ne, %85, %c0_i32_27 : i32
    cf.cond_br %86, ^bb15, ^bb16
  ^bb10:  // pred: ^bb8
    %87 = llvm.load %4 : !llvm.ptr -> i32
    %c28_i32 = arith.constant 28 : i32
    %88 = arith.addi %87, %c28_i32 : i32
    llvm.store %88, %7 : i32, !llvm.ptr
    %89 = llvm.load %3 : !llvm.ptr -> i32
    %c-4_i32 = arith.constant -4 : i32
    %90 = arith.andi %89, %c-4_i32 : i32
    llvm.store %90, %8 : i32, !llvm.ptr
    %c0_i32_28 = arith.constant 0 : i32
    llvm.store %c0_i32_28, %3 : i32, !llvm.ptr
    %c0_i32_29 = arith.constant 0 : i32
    llvm.store %c0_i32_29, %6 : i32, !llvm.ptr
    cf.br ^bb13
  ^bb11:  // pred: ^bb8
    %c0_i32_30 = arith.constant 0 : i32
    llvm.store %c0_i32_30, %3 : i32, !llvm.ptr
    %c0_i32_31 = arith.constant 0 : i32
    llvm.store %c0_i32_31, %6 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb12:  // pred: ^bb14
    cf.br ^bb9
  ^bb13:  // 2 preds: ^bb10, ^bb13
    %91 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_32 = arith.constant 0 : i64
    %92 = arith.extui %91 : i32 to i64
    %93 = arith.addi %92, %c0_i64_32 : i64
    %94 = llvm.getelementptr %13[%93] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %95 = llvm.load volatile %94 {alignment = 1 : i64} : !llvm.ptr -> i32
    %96 = llvm.load %7 : !llvm.ptr -> i32
    %c-8_i32 = arith.constant -8 : i32
    %97 = arith.addi %96, %c-8_i32 : i32
    %c0_i64_33 = arith.constant 0 : i64
    %98 = arith.extui %97 : i32 to i64
    %99 = arith.addi %98, %c0_i64_33 : i64
    %100 = llvm.getelementptr %13[%99] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %101 = llvm.load volatile %100 {alignment = 1 : i64} : !llvm.ptr -> i32
    %102 = llvm.load %7 : !llvm.ptr -> i32
    %c-16_i32 = arith.constant -16 : i32
    %103 = arith.addi %102, %c-16_i32 : i32
    %c0_i64_34 = arith.constant 0 : i64
    %104 = arith.extui %103 : i32 to i64
    %105 = arith.addi %104, %c0_i64_34 : i64
    %106 = llvm.getelementptr %13[%105] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %107 = llvm.load volatile %106 {alignment = 1 : i64} : !llvm.ptr -> i32
    %108 = llvm.load %7 : !llvm.ptr -> i32
    %c-24_i32 = arith.constant -24 : i32
    %109 = arith.addi %108, %c-24_i32 : i32
    %c0_i64_35 = arith.constant 0 : i64
    %110 = arith.extui %109 : i32 to i64
    %111 = arith.addi %110, %c0_i64_35 : i64
    %112 = llvm.getelementptr %13[%111] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %113 = llvm.load volatile %112 {alignment = 1 : i64} : !llvm.ptr -> i32
    %114 = llvm.load %3 : !llvm.ptr -> i32
    %115 = arith.addi %113, %114 : i32
    %116 = arith.addi %107, %115 : i32
    %117 = arith.addi %101, %116 : i32
    %118 = arith.addi %95, %117 : i32
    llvm.store %118, %3 : i32, !llvm.ptr
    %119 = llvm.load %7 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %120 = arith.addi %119, %c32_i32 : i32
    llvm.store %120, %7 : i32, !llvm.ptr
    %121 = llvm.load %8 : !llvm.ptr -> i32
    %122 = llvm.load %6 : !llvm.ptr -> i32
    %c4_i32_36 = arith.constant 4 : i32
    %123 = arith.addi %122, %c4_i32_36 : i32
    llvm.store %123, %6 : i32, !llvm.ptr
    %124 = arith.cmpi eq, %121, %123 : i32
    %125 = arith.extui %124 : i1 to i32
    %c0_i32_37 = arith.constant 0 : i32
    %126 = arith.cmpi eq, %125, %c0_i32_37 : i32
    %127 = arith.extui %126 : i1 to i32
    %c0_i32_38 = arith.constant 0 : i32
    %128 = arith.cmpi ne, %127, %c0_i32_38 : i32
    cf.cond_br %128, ^bb13, ^bb14
  ^bb14:  // pred: ^bb13
    cf.br ^bb12
  ^bb15:  // 2 preds: ^bb9, ^bb17
    %129 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %130 = arith.extui %129 : i32 to i64
    %131 = arith.addi %130, %c12_i64 : i64
    %132 = llvm.getelementptr %13[%131] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %133 = llvm.load volatile %132 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_39 = arith.constant 0 : i32
    %134 = arith.cmpi eq, %133, %c0_i32_39 : i32
    %135 = arith.extui %134 : i1 to i32
    %c0_i32_40 = arith.constant 0 : i32
    %136 = arith.cmpi ne, %135, %c0_i32_40 : i32
    cf.cond_br %136, ^bb20, ^bb21
  ^bb16:  // pred: ^bb9
    %137 = llvm.load %6 : !llvm.ptr -> i32
    %c3_i32_41 = arith.constant 3 : i32
    %c31_i32 = arith.constant 31 : i32
    %138 = arith.cmpi ule, %c3_i32_41, %c31_i32 : i32
    %139 = scf.if %138 -> (i32) {
      %188 = arith.shli %137, %c3_i32_41 : i32
      scf.yield %188 : i32
    } else {
      %c0_i32_60 = arith.constant 0 : i32
      scf.yield %c0_i32_60 : i32
    }
    %140 = llvm.load %4 : !llvm.ptr -> i32
    %141 = arith.addi %139, %140 : i32
    %c4_i32_42 = arith.constant 4 : i32
    %142 = arith.addi %141, %c4_i32_42 : i32
    llvm.store %142, %7 : i32, !llvm.ptr
    cf.br ^bb18
  ^bb17:  // pred: ^bb19
    cf.br ^bb15
  ^bb18:  // 2 preds: ^bb16, ^bb18
    %143 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_43 = arith.constant 0 : i64
    %144 = arith.extui %143 : i32 to i64
    %145 = arith.addi %144, %c0_i64_43 : i64
    %146 = llvm.getelementptr %13[%145] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %147 = llvm.load volatile %146 {alignment = 1 : i64} : !llvm.ptr -> i32
    %148 = llvm.load %3 : !llvm.ptr -> i32
    %149 = arith.addi %147, %148 : i32
    llvm.store %149, %3 : i32, !llvm.ptr
    %150 = llvm.load %7 : !llvm.ptr -> i32
    %c8_i32_44 = arith.constant 8 : i32
    %151 = arith.addi %150, %c8_i32_44 : i32
    llvm.store %151, %7 : i32, !llvm.ptr
    %152 = llvm.load %5 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %153 = arith.addi %152, %c-1_i32 : i32
    llvm.store %153, %5 : i32, !llvm.ptr
    %c0_i32_45 = arith.constant 0 : i32
    %154 = arith.cmpi ne, %153, %c0_i32_45 : i32
    cf.cond_br %154, ^bb18, ^bb19
  ^bb19:  // pred: ^bb18
    cf.br ^bb17
  ^bb20:  // 2 preds: ^bb15, ^bb23
    %155 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_46 = arith.constant 0 : i32
    %156 = arith.cmpi ne, %155, %c0_i32_46 : i32
    cf.cond_br %156, ^bb6, ^bb24
  ^bb21:  // pred: ^bb15
    %157 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_47 = arith.constant 0 : i32
    %158 = arith.cmpi slt, %157, %c0_i32_47 : i32
    %159 = arith.extui %158 : i1 to i32
    %c0_i32_48 = arith.constant 0 : i32
    %160 = arith.cmpi ne, %159, %c0_i32_48 : i32
    cf.cond_br %160, ^bb7, ^bb22
  ^bb22:  // pred: ^bb21
    %161 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_49 = arith.constant 16 : i32
    %162 = arith.cmpi ult, %161, %c16_i32_49 : i32
    %163 = arith.extui %162 : i1 to i32
    %164 = llvm.load %4 : !llvm.ptr -> i32
    %c4_i64_50 = arith.constant 4 : i64
    %165 = arith.extui %164 : i32 to i64
    %166 = arith.addi %165, %c4_i64_50 : i64
    %167 = llvm.getelementptr %13[%166] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %168 = llvm.load volatile %167 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_51 = arith.constant 0 : i32
    %169 = arith.cmpi eq, %168, %c0_i32_51 : i32
    %170 = arith.extui %169 : i1 to i32
    %171 = arith.andi %163, %170 : i32
    %c0_i32_52 = arith.constant 0 : i32
    %172 = arith.cmpi ne, %171, %c0_i32_52 : i32
    cf.cond_br %172, ^bb7, ^bb23
  ^bb23:  // pred: ^bb22
    %173 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_53 = arith.constant 1 : i32
    %c31_i32_54 = arith.constant 31 : i32
    %174 = arith.cmpi ule, %c1_i32_53, %c31_i32_54 : i32
    %175 = scf.if %174 -> (i32) {
      %188 = arith.shli %173, %c1_i32_53 : i32
      scf.yield %188 : i32
    } else {
      %c0_i32_60 = arith.constant 0 : i32
      scf.yield %c0_i32_60 : i32
    }
    llvm.store %175, %3 : i32, !llvm.ptr
    cf.br ^bb20
  ^bb24:  // pred: ^bb20
    cf.br ^bb7
  ^bb25:  // pred: ^bb6
    %c0_i32_55 = arith.constant 0 : i32
    %c1049537_i64 = arith.constant 1049537 : i64
    %176 = arith.extui %c0_i32_55 : i32 to i64
    %177 = arith.addi %176, %c1049537_i64 : i64
    %178 = llvm.getelementptr %13[%177] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %179 = llvm.load volatile %178 {alignment = 1 : i64} : !llvm.ptr -> i8
    %180 = arith.extui %179 : i8 to i32
    %c1_i32_56 = arith.constant 1 : i32
    llvm.store %c1_i32_56, %5 : i32, !llvm.ptr
    %181 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_57 = arith.constant 1 : i32
    %182 = call @f17(%arg0, %181, %c1_i32_57) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %182, %7 : i32, !llvm.ptr
    %c0_i32_58 = arith.constant 0 : i32
    %183 = arith.cmpi eq, %182, %c0_i32_58 : i32
    %184 = arith.extui %183 : i1 to i32
    %c0_i32_59 = arith.constant 0 : i32
    %185 = arith.cmpi ne, %184, %c0_i32_59 : i32
    cf.cond_br %185, ^bb4, ^bb26
  ^bb26:  // pred: ^bb25
    cf.br ^bb5
  ^bb27:  // pred: ^bb5
    %c1049120_i32 = arith.constant 1049120 : i32
    %c86_i32 = arith.constant 86 : i32
    %186 = llvm.load %2 : !llvm.ptr -> i32
    %c15_i32 = arith.constant 15 : i32
    %187 = arith.addi %186, %c15_i32 : i32
    %c1049104_i32 = arith.constant 1049104 : i32
    %c1049232_i32 = arith.constant 1049232 : i32
    call @f76(%arg0, %c1049120_i32, %c86_i32, %187, %c1049104_i32, %c1049232_i32) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    llvm.unreachable
  }
  func.func @f67(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %10 = arith.subi %9, %c16_i32 : i32
    llvm.store %10, %2 : i32, !llvm.ptr
    llvm.store %10, %5 : i32, !llvm.ptr
    %11 = llvm.load %1 : !llvm.ptr -> i32
    %c128_i32 = arith.constant 128 : i32
    %12 = arith.cmpi ult, %11, %c128_i32 : i32
    %13 = arith.extui %12 : i1 to i32
    %c0_i32_3 = arith.constant 0 : i32
    %14 = arith.cmpi ne, %13, %c0_i32_3 : i32
    cf.cond_br %14, ^bb6, ^bb7
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb11, ^bb13
    %15 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_4 = arith.constant 16 : i32
    %16 = arith.addi %15, %c16_i32_4 : i32
    llvm.store %16, %5 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // 3 preds: ^bb5, ^bb9, ^bb10
    %17 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %18 = arith.extui %17 : i32 to i64
    %19 = arith.addi %18, %c0_i64 : i64
    %20 = llvm.getelementptr %8[%19] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %21 = llvm.load volatile %20 {alignment = 1 : i64} : !llvm.ptr -> i32
    %22 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %23 = arith.extui %22 : i32 to i64
    %24 = arith.addi %23, %c8_i64 : i64
    %25 = llvm.getelementptr %8[%24] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %26 = llvm.load volatile %25 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %26, %3 : i32, !llvm.ptr
    %27 = arith.subi %21, %26 : i32
    %28 = llvm.load %1 : !llvm.ptr -> i32
    %29 = arith.cmpi uge, %27, %28 : i32
    %30 = arith.extui %29 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %31 = arith.cmpi ne, %30, %c0_i32_5 : i32
    cf.cond_br %31, ^bb13, ^bb14
  ^bb5:  // pred: ^bb7
    %32 = llvm.load %2 : !llvm.ptr -> i32
    %33 = llvm.load %1 : !llvm.ptr -> i32
    %c63_i32 = arith.constant 63 : i32
    %34 = arith.andi %33, %c63_i32 : i32
    %c128_i32_6 = arith.constant 128 : i32
    %35 = arith.ori %34, %c128_i32_6 : i32
    %c13_i64 = arith.constant 13 : i64
    %36 = arith.extui %32 : i32 to i64
    %37 = arith.addi %36, %c13_i64 : i64
    %38 = llvm.getelementptr %8[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %39 = arith.trunci %35 : i32 to i8
    llvm.store volatile %39, %38 {alignment = 1 : i64} : i8, !llvm.ptr
    %40 = llvm.load %2 : !llvm.ptr -> i32
    %41 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i32 = arith.constant 6 : i32
    %c31_i32 = arith.constant 31 : i32
    %42 = arith.cmpi ule, %c6_i32, %c31_i32 : i32
    %43 = scf.if %42 -> (i32) {
      %186 = arith.shrui %41, %c6_i32 : i32
      scf.yield %186 : i32
    } else {
      %c0_i32_44 = arith.constant 0 : i32
      scf.yield %c0_i32_44 : i32
    }
    %c192_i32 = arith.constant 192 : i32
    %44 = arith.ori %43, %c192_i32 : i32
    %c12_i64 = arith.constant 12 : i64
    %45 = arith.extui %40 : i32 to i64
    %46 = arith.addi %45, %c12_i64 : i64
    %47 = llvm.getelementptr %8[%46] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %48 = arith.trunci %44 : i32 to i8
    llvm.store volatile %48, %47 {alignment = 1 : i64} : i8, !llvm.ptr
    %c2_i32 = arith.constant 2 : i32
    llvm.store %c2_i32, %1 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb6:  // pred: ^bb1
    %49 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_7 = arith.constant 8 : i64
    %50 = arith.extui %49 : i32 to i64
    %51 = arith.addi %50, %c8_i64_7 : i64
    %52 = llvm.getelementptr %8[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %53 = llvm.load volatile %52 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %53, %3 : i32, !llvm.ptr
    %54 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_8 = arith.constant 0 : i64
    %55 = arith.extui %54 : i32 to i64
    %56 = arith.addi %55, %c0_i64_8 : i64
    %57 = llvm.getelementptr %8[%56] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %58 = llvm.load volatile %57 {alignment = 1 : i64} : !llvm.ptr -> i32
    %59 = arith.cmpi eq, %53, %58 : i32
    %60 = arith.extui %59 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %61 = arith.cmpi eq, %60, %c0_i32_9 : i32
    %62 = arith.extui %61 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %63 = arith.cmpi ne, %62, %c0_i32_10 : i32
    cf.cond_br %63, ^bb11, ^bb12
  ^bb7:  // pred: ^bb1
    %64 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_11 = arith.constant 0 : i32
    %c12_i64_12 = arith.constant 12 : i64
    %65 = arith.extui %64 : i32 to i64
    %66 = arith.addi %65, %c12_i64_12 : i64
    %67 = llvm.getelementptr %8[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_11, %67 {alignment = 1 : i64} : i32, !llvm.ptr
    %68 = llvm.load %1 : !llvm.ptr -> i32
    %c2048_i32 = arith.constant 2048 : i32
    %69 = arith.cmpi ult, %68, %c2048_i32 : i32
    %70 = arith.extui %69 : i1 to i32
    %c0_i32_13 = arith.constant 0 : i32
    %71 = arith.cmpi ne, %70, %c0_i32_13 : i32
    cf.cond_br %71, ^bb5, ^bb8
  ^bb8:  // pred: ^bb7
    %72 = llvm.load %1 : !llvm.ptr -> i32
    %c65536_i32 = arith.constant 65536 : i32
    %73 = arith.cmpi uge, %72, %c65536_i32 : i32
    %74 = arith.extui %73 : i1 to i32
    %c0_i32_14 = arith.constant 0 : i32
    %75 = arith.cmpi ne, %74, %c0_i32_14 : i32
    cf.cond_br %75, ^bb9, ^bb10
  ^bb9:  // pred: ^bb8
    %76 = llvm.load %2 : !llvm.ptr -> i32
    %77 = llvm.load %1 : !llvm.ptr -> i32
    %c63_i32_15 = arith.constant 63 : i32
    %78 = arith.andi %77, %c63_i32_15 : i32
    %c128_i32_16 = arith.constant 128 : i32
    %79 = arith.ori %78, %c128_i32_16 : i32
    %c15_i64 = arith.constant 15 : i64
    %80 = arith.extui %76 : i32 to i64
    %81 = arith.addi %80, %c15_i64 : i64
    %82 = llvm.getelementptr %8[%81] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %83 = arith.trunci %79 : i32 to i8
    llvm.store volatile %83, %82 {alignment = 1 : i64} : i8, !llvm.ptr
    %84 = llvm.load %2 : !llvm.ptr -> i32
    %85 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i32_17 = arith.constant 6 : i32
    %c31_i32_18 = arith.constant 31 : i32
    %86 = arith.cmpi ule, %c6_i32_17, %c31_i32_18 : i32
    %87 = scf.if %86 -> (i32) {
      %186 = arith.shrui %85, %c6_i32_17 : i32
      scf.yield %186 : i32
    } else {
      %c0_i32_44 = arith.constant 0 : i32
      scf.yield %c0_i32_44 : i32
    }
    %c63_i32_19 = arith.constant 63 : i32
    %88 = arith.andi %87, %c63_i32_19 : i32
    %c128_i32_20 = arith.constant 128 : i32
    %89 = arith.ori %88, %c128_i32_20 : i32
    %c14_i64 = arith.constant 14 : i64
    %90 = arith.extui %84 : i32 to i64
    %91 = arith.addi %90, %c14_i64 : i64
    %92 = llvm.getelementptr %8[%91] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %93 = arith.trunci %89 : i32 to i8
    llvm.store volatile %93, %92 {alignment = 1 : i64} : i8, !llvm.ptr
    %94 = llvm.load %2 : !llvm.ptr -> i32
    %95 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %c31_i32_21 = arith.constant 31 : i32
    %96 = arith.cmpi ule, %c12_i32, %c31_i32_21 : i32
    %97 = scf.if %96 -> (i32) {
      %186 = arith.shrui %95, %c12_i32 : i32
      scf.yield %186 : i32
    } else {
      %c0_i32_44 = arith.constant 0 : i32
      scf.yield %c0_i32_44 : i32
    }
    %c63_i32_22 = arith.constant 63 : i32
    %98 = arith.andi %97, %c63_i32_22 : i32
    %c128_i32_23 = arith.constant 128 : i32
    %99 = arith.ori %98, %c128_i32_23 : i32
    %c13_i64_24 = arith.constant 13 : i64
    %100 = arith.extui %94 : i32 to i64
    %101 = arith.addi %100, %c13_i64_24 : i64
    %102 = llvm.getelementptr %8[%101] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %103 = arith.trunci %99 : i32 to i8
    llvm.store volatile %103, %102 {alignment = 1 : i64} : i8, !llvm.ptr
    %104 = llvm.load %2 : !llvm.ptr -> i32
    %105 = llvm.load %1 : !llvm.ptr -> i32
    %c18_i32 = arith.constant 18 : i32
    %c31_i32_25 = arith.constant 31 : i32
    %106 = arith.cmpi ule, %c18_i32, %c31_i32_25 : i32
    %107 = scf.if %106 -> (i32) {
      %186 = arith.shrui %105, %c18_i32 : i32
      scf.yield %186 : i32
    } else {
      %c0_i32_44 = arith.constant 0 : i32
      scf.yield %c0_i32_44 : i32
    }
    %c7_i32 = arith.constant 7 : i32
    %108 = arith.andi %107, %c7_i32 : i32
    %c240_i32 = arith.constant 240 : i32
    %109 = arith.ori %108, %c240_i32 : i32
    %c12_i64_26 = arith.constant 12 : i64
    %110 = arith.extui %104 : i32 to i64
    %111 = arith.addi %110, %c12_i64_26 : i64
    %112 = llvm.getelementptr %8[%111] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %113 = arith.trunci %109 : i32 to i8
    llvm.store volatile %113, %112 {alignment = 1 : i64} : i8, !llvm.ptr
    %c4_i32 = arith.constant 4 : i32
    llvm.store %c4_i32, %1 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb10:  // pred: ^bb8
    %114 = llvm.load %2 : !llvm.ptr -> i32
    %115 = llvm.load %1 : !llvm.ptr -> i32
    %c63_i32_27 = arith.constant 63 : i32
    %116 = arith.andi %115, %c63_i32_27 : i32
    %c128_i32_28 = arith.constant 128 : i32
    %117 = arith.ori %116, %c128_i32_28 : i32
    %c14_i64_29 = arith.constant 14 : i64
    %118 = arith.extui %114 : i32 to i64
    %119 = arith.addi %118, %c14_i64_29 : i64
    %120 = llvm.getelementptr %8[%119] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %121 = arith.trunci %117 : i32 to i8
    llvm.store volatile %121, %120 {alignment = 1 : i64} : i8, !llvm.ptr
    %122 = llvm.load %2 : !llvm.ptr -> i32
    %123 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32_30 = arith.constant 12 : i32
    %c31_i32_31 = arith.constant 31 : i32
    %124 = arith.cmpi ule, %c12_i32_30, %c31_i32_31 : i32
    %125 = scf.if %124 -> (i32) {
      %186 = arith.shrui %123, %c12_i32_30 : i32
      scf.yield %186 : i32
    } else {
      %c0_i32_44 = arith.constant 0 : i32
      scf.yield %c0_i32_44 : i32
    }
    %c224_i32 = arith.constant 224 : i32
    %126 = arith.ori %125, %c224_i32 : i32
    %c12_i64_32 = arith.constant 12 : i64
    %127 = arith.extui %122 : i32 to i64
    %128 = arith.addi %127, %c12_i64_32 : i64
    %129 = llvm.getelementptr %8[%128] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %130 = arith.trunci %126 : i32 to i8
    llvm.store volatile %130, %129 {alignment = 1 : i64} : i8, !llvm.ptr
    %131 = llvm.load %2 : !llvm.ptr -> i32
    %132 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i32_33 = arith.constant 6 : i32
    %c31_i32_34 = arith.constant 31 : i32
    %133 = arith.cmpi ule, %c6_i32_33, %c31_i32_34 : i32
    %134 = scf.if %133 -> (i32) {
      %186 = arith.shrui %132, %c6_i32_33 : i32
      scf.yield %186 : i32
    } else {
      %c0_i32_44 = arith.constant 0 : i32
      scf.yield %c0_i32_44 : i32
    }
    %c63_i32_35 = arith.constant 63 : i32
    %135 = arith.andi %134, %c63_i32_35 : i32
    %c128_i32_36 = arith.constant 128 : i32
    %136 = arith.ori %135, %c128_i32_36 : i32
    %c13_i64_37 = arith.constant 13 : i64
    %137 = arith.extui %131 : i32 to i64
    %138 = arith.addi %137, %c13_i64_37 : i64
    %139 = llvm.getelementptr %8[%138] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %140 = arith.trunci %136 : i32 to i8
    llvm.store volatile %140, %139 {alignment = 1 : i64} : i8, !llvm.ptr
    %c3_i32 = arith.constant 3 : i32
    llvm.store %c3_i32, %1 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb11:  // 2 preds: ^bb6, ^bb12
    %141 = llvm.load %0 : !llvm.ptr -> i32
    %142 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32 = arith.constant 1 : i32
    %143 = arith.addi %142, %c1_i32 : i32
    %c8_i64_38 = arith.constant 8 : i64
    %144 = arith.extui %141 : i32 to i64
    %145 = arith.addi %144, %c8_i64_38 : i64
    %146 = llvm.getelementptr %8[%145] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %143, %146 {alignment = 1 : i64} : i32, !llvm.ptr
    %147 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %148 = arith.extui %147 : i32 to i64
    %149 = arith.addi %148, %c4_i64 : i64
    %150 = llvm.getelementptr %8[%149] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %151 = llvm.load volatile %150 {alignment = 1 : i64} : !llvm.ptr -> i32
    %152 = llvm.load %3 : !llvm.ptr -> i32
    %153 = arith.addi %151, %152 : i32
    %154 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_39 = arith.constant 0 : i64
    %155 = arith.extui %153 : i32 to i64
    %156 = arith.addi %155, %c0_i64_39 : i64
    %157 = llvm.getelementptr %8[%156] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %158 = arith.trunci %154 : i32 to i8
    llvm.store volatile %158, %157 {alignment = 1 : i64} : i8, !llvm.ptr
    cf.br ^bb3
  ^bb12:  // pred: ^bb6
    %159 = llvm.load %0 : !llvm.ptr -> i32
    call @f64(%arg0, %159) : (!llvm.ptr, i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb4, ^bb14
    %160 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_40 = arith.constant 4 : i64
    %161 = arith.extui %160 : i32 to i64
    %162 = arith.addi %161, %c4_i64_40 : i64
    %163 = llvm.getelementptr %8[%162] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %164 = llvm.load volatile %163 {alignment = 1 : i64} : !llvm.ptr -> i32
    %165 = llvm.load %3 : !llvm.ptr -> i32
    %166 = arith.addi %164, %165 : i32
    %167 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32_41 = arith.constant 12 : i32
    %168 = arith.addi %167, %c12_i32_41 : i32
    %169 = llvm.load %1 : !llvm.ptr -> i32
    %170 = call @f88(%arg0, %166, %168, %169) : (!llvm.ptr, i32, i32, i32) -> i32
    %171 = llvm.load %0 : !llvm.ptr -> i32
    %172 = llvm.load %3 : !llvm.ptr -> i32
    %173 = llvm.load %1 : !llvm.ptr -> i32
    %174 = arith.addi %172, %173 : i32
    %c8_i64_42 = arith.constant 8 : i64
    %175 = arith.extui %171 : i32 to i64
    %176 = arith.addi %175, %c8_i64_42 : i64
    %177 = llvm.getelementptr %8[%176] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %174, %177 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb3
  ^bb14:  // pred: ^bb4
    %178 = llvm.load %0 : !llvm.ptr -> i32
    %179 = llvm.load %3 : !llvm.ptr -> i32
    %180 = llvm.load %1 : !llvm.ptr -> i32
    call @f61(%arg0, %178, %179, %180) : (!llvm.ptr, i32, i32, i32) -> ()
    %181 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_43 = arith.constant 8 : i64
    %182 = arith.extui %181 : i32 to i64
    %183 = arith.addi %182, %c8_i64_43 : i64
    %184 = llvm.getelementptr %8[%183] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %185 = llvm.load volatile %184 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %185, %3 : i32, !llvm.ptr
    cf.br ^bb13
  }
  func.func @f68(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %7 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %8 = arith.extui %7 : i32 to i64
    %9 = arith.addi %8, %c0_i64 : i64
    %10 = llvm.getelementptr %6[%9] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %11 = llvm.load volatile %10 {alignment = 1 : i64} : !llvm.ptr -> i32
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c8_i64 : i64
    %15 = llvm.getelementptr %6[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %16 = llvm.load volatile %15 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %16, %3 : i32, !llvm.ptr
    %17 = arith.subi %11, %16 : i32
    %18 = llvm.load %2 : !llvm.ptr -> i32
    %19 = arith.cmpi uge, %17, %18 : i32
    %20 = arith.extui %19 : i1 to i32
    %c0_i32_3 = arith.constant 0 : i32
    %21 = arith.cmpi ne, %20, %c0_i32_3 : i32
    cf.cond_br %21, ^bb3, ^bb4
  ^bb2(%22: i32):  // pred: ^bb3
    return %22 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %23 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %24 = arith.extui %23 : i32 to i64
    %25 = arith.addi %24, %c4_i64 : i64
    %26 = llvm.getelementptr %6[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %27 = llvm.load volatile %26 {alignment = 1 : i64} : !llvm.ptr -> i32
    %28 = llvm.load %3 : !llvm.ptr -> i32
    %29 = arith.addi %27, %28 : i32
    %30 = llvm.load %1 : !llvm.ptr -> i32
    %31 = llvm.load %2 : !llvm.ptr -> i32
    %32 = call @f88(%arg0, %29, %30, %31) : (!llvm.ptr, i32, i32, i32) -> i32
    %33 = llvm.load %0 : !llvm.ptr -> i32
    %34 = llvm.load %3 : !llvm.ptr -> i32
    %35 = llvm.load %2 : !llvm.ptr -> i32
    %36 = arith.addi %34, %35 : i32
    %c8_i64_4 = arith.constant 8 : i64
    %37 = arith.extui %33 : i32 to i64
    %38 = arith.addi %37, %c8_i64_4 : i64
    %39 = llvm.getelementptr %6[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %36, %39 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_5 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32_5 : i32)
  ^bb4:  // pred: ^bb1
    %40 = llvm.load %0 : !llvm.ptr -> i32
    %41 = llvm.load %3 : !llvm.ptr -> i32
    %42 = llvm.load %2 : !llvm.ptr -> i32
    call @f61(%arg0, %40, %41, %42) : (!llvm.ptr, i32, i32, i32) -> ()
    %43 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_6 = arith.constant 8 : i64
    %44 = arith.extui %43 : i32 to i64
    %45 = arith.addi %44, %c8_i64_6 : i64
    %46 = llvm.getelementptr %6[%45] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %47 = llvm.load volatile %46 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %47, %3 : i32, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f69(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = llvm.load %1 : !llvm.ptr -> i32
    call @f67(%arg0, %2, %3) : (!llvm.ptr, i32, i32) -> ()
    %c0_i32 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func @f70(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %4 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %9 = arith.subi %8, %c32_i32 : i32
    llvm.store %9, %2 : i32, !llvm.ptr
    llvm.store %9, %4 : i32, !llvm.ptr
    %10 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %11 = arith.addi %10, %c16_i32 : i32
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_2 = arith.constant 16 : i32
    %13 = arith.addi %12, %c16_i32_2 : i32
    %c0_i64 = arith.constant 0 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c0_i64 : i64
    %16 = llvm.getelementptr %7[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load volatile %16 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_3 = arith.constant 0 : i64
    %18 = arith.extui %11 : i32 to i64
    %19 = arith.addi %18, %c0_i64_3 : i64
    %20 = llvm.getelementptr %7[%19] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %17, %20 {alignment = 1 : i64} : i64, !llvm.ptr
    %21 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %22 = arith.addi %21, %c8_i32 : i32
    %23 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_4 = arith.constant 8 : i32
    %24 = arith.addi %23, %c8_i32_4 : i32
    %c0_i64_5 = arith.constant 0 : i64
    %25 = arith.extui %24 : i32 to i64
    %26 = arith.addi %25, %c0_i64_5 : i64
    %27 = llvm.getelementptr %7[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %28 = llvm.load volatile %27 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_6 = arith.constant 0 : i64
    %29 = arith.extui %22 : i32 to i64
    %30 = arith.addi %29, %c0_i64_6 : i64
    %31 = llvm.getelementptr %7[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %28, %31 {alignment = 1 : i64} : i64, !llvm.ptr
    %32 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32 = arith.constant 1 : i32
    %c28_i64 = arith.constant 28 : i64
    %33 = arith.extui %32 : i32 to i64
    %34 = arith.addi %33, %c28_i64 : i64
    %35 = llvm.getelementptr %7[%34] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %36 = arith.trunci %c1_i32 : i32 to i16
    llvm.store volatile %36, %35 {alignment = 1 : i64} : i16, !llvm.ptr
    %37 = llvm.load %2 : !llvm.ptr -> i32
    %38 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %39 = arith.extui %37 : i32 to i64
    %40 = arith.addi %39, %c24_i64 : i64
    %41 = llvm.getelementptr %7[%40] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %38, %41 {alignment = 1 : i64} : i32, !llvm.ptr
    %42 = llvm.load %2 : !llvm.ptr -> i32
    %43 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_7 = arith.constant 0 : i64
    %44 = arith.extui %43 : i32 to i64
    %45 = arith.addi %44, %c0_i64_7 : i64
    %46 = llvm.getelementptr %7[%45] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %47 = llvm.load volatile %46 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_8 = arith.constant 0 : i64
    %48 = arith.extui %42 : i32 to i64
    %49 = arith.addi %48, %c0_i64_8 : i64
    %50 = llvm.getelementptr %7[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %47, %50 {alignment = 1 : i64} : i64, !llvm.ptr
    %51 = llvm.load %2 : !llvm.ptr -> i32
    call @f44(%arg0, %51) : (!llvm.ptr, i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f71(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x i64 : (i64) -> !llvm.ptr
    llvm.store %c0_i64, %4 : i64, !llvm.ptr
    %5 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %7[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %10 = llvm.load %6 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %11 = arith.subi %10, %c48_i32 : i32
    llvm.store %11, %3 : i32, !llvm.ptr
    llvm.store %11, %6 : i32, !llvm.ptr
    %12 = llvm.load %3 : !llvm.ptr -> i32
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %14 = arith.extui %12 : i32 to i64
    %15 = arith.addi %14, %c4_i64 : i64
    %16 = llvm.getelementptr %9[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %13, %16 {alignment = 1 : i64} : i32, !llvm.ptr
    %17 = llvm.load %3 : !llvm.ptr -> i32
    %18 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_4 = arith.constant 0 : i64
    %19 = arith.extui %17 : i32 to i64
    %20 = arith.addi %19, %c0_i64_4 : i64
    %21 = llvm.getelementptr %9[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %18, %21 {alignment = 1 : i64} : i32, !llvm.ptr
    %22 = llvm.load %3 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c12_i64 = arith.constant 12 : i64
    %23 = arith.extui %22 : i32 to i64
    %24 = arith.addi %23, %c12_i64 : i64
    %25 = llvm.getelementptr %9[%24] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i32, %25 {alignment = 1 : i64} : i32, !llvm.ptr
    %26 = llvm.load %3 : !llvm.ptr -> i32
    %c1049300_i32 = arith.constant 1049300 : i32
    %c8_i64 = arith.constant 8 : i64
    %27 = arith.extui %26 : i32 to i64
    %28 = arith.addi %27, %c8_i64 : i64
    %29 = llvm.getelementptr %9[%28] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049300_i32, %29 {alignment = 1 : i64} : i32, !llvm.ptr
    %30 = llvm.load %3 : !llvm.ptr -> i32
    %c2_i64 = arith.constant 2 : i64
    %c20_i64 = arith.constant 20 : i64
    %31 = arith.extui %30 : i32 to i64
    %32 = arith.addi %31, %c20_i64 : i64
    %33 = llvm.getelementptr %9[%32] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i64, %33 {alignment = 1 : i64} : i64, !llvm.ptr
    %34 = llvm.load %3 : !llvm.ptr -> i32
    %c2_i32_5 = arith.constant 2 : i32
    %35 = arith.extui %c2_i32_5 : i32 to i64
    %c32_i64 = arith.constant 32 : i64
    %c63_i64 = arith.constant 63 : i64
    %36 = arith.cmpi ule, %c32_i64, %c63_i64 : i64
    %37 = scf.if %36 -> (i64) {
      %62 = arith.shli %35, %c32_i64 : i64
      scf.yield %62 : i64
    } else {
      %c0_i64_7 = arith.constant 0 : i64
      scf.yield %c0_i64_7 : i64
    }
    llvm.store %37, %4 : i64, !llvm.ptr
    %38 = llvm.load %3 : !llvm.ptr -> i32
    %39 = arith.extui %38 : i32 to i64
    %40 = arith.ori %37, %39 : i64
    %c40_i64 = arith.constant 40 : i64
    %41 = arith.extui %34 : i32 to i64
    %42 = arith.addi %41, %c40_i64 : i64
    %43 = llvm.getelementptr %9[%42] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %40, %43 {alignment = 1 : i64} : i64, !llvm.ptr
    %44 = llvm.load %3 : !llvm.ptr -> i32
    %45 = llvm.load %4 : !llvm.ptr -> i64
    %46 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %47 = arith.addi %46, %c4_i32 : i32
    %48 = arith.extui %47 : i32 to i64
    %49 = arith.ori %45, %48 : i64
    %c32_i64_6 = arith.constant 32 : i64
    %50 = arith.extui %44 : i32 to i64
    %51 = arith.addi %50, %c32_i64_6 : i64
    %52 = llvm.getelementptr %9[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %49, %52 {alignment = 1 : i64} : i64, !llvm.ptr
    %53 = llvm.load %3 : !llvm.ptr -> i32
    %54 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %55 = arith.addi %54, %c32_i32 : i32
    %c16_i64 = arith.constant 16 : i64
    %56 = arith.extui %53 : i32 to i64
    %57 = arith.addi %56, %c16_i64 : i64
    %58 = llvm.getelementptr %9[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %55, %58 {alignment = 1 : i64} : i32, !llvm.ptr
    %59 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %60 = arith.addi %59, %c8_i32 : i32
    %61 = llvm.load %2 : !llvm.ptr -> i32
    call @f70(%arg0, %60, %61) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f72(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i64_4 = arith.constant 1 : i64
    %5 = llvm.alloca %c1_i64_4 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i64_5 = arith.constant 1 : i64
    %6 = llvm.alloca %c1_i64_5 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i64_6 = arith.constant 1 : i64
    %7 = llvm.alloca %c1_i64_6 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i64_7 = arith.constant 1 : i64
    %8 = llvm.alloca %c1_i64_7 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %9 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.getelementptr %arg0[4] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> i32
    %14 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.load %15 : !llvm.ptr -> i32
    %18 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %19 = llvm.load %18 : !llvm.ptr -> i32
    %20 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %21 = llvm.load %15 : !llvm.ptr -> i32
    %22 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %23 = llvm.load %15 : !llvm.ptr -> i32
    %24 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %25 = llvm.load %15 : !llvm.ptr -> i32
    %26 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %27 = llvm.load %15 : !llvm.ptr -> i32
    %28 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %29 = llvm.load %15 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %30 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %31 = arith.extui %30 : i32 to i64
    %32 = arith.addi %31, %c0_i64 : i64
    %33 = llvm.getelementptr %11[%32] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %34 = llvm.load volatile %33 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %34, %3 : i32, !llvm.ptr
    %35 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %36 = arith.extui %35 : i32 to i64
    %37 = arith.addi %36, %c8_i64 : i64
    %38 = llvm.getelementptr %11[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %39 = llvm.load volatile %38 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %39, %4 : i32, !llvm.ptr
    %40 = arith.ori %34, %39 : i32
    %c0_i32_8 = arith.constant 0 : i32
    %41 = arith.cmpi eq, %40, %c0_i32_8 : i32
    %42 = arith.extui %41 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %43 = arith.cmpi ne, %42, %c0_i32_9 : i32
    cf.cond_br %43, ^bb3, ^bb4
  ^bb2(%44: i32):  // 5 preds: ^bb39, ^bb62, ^bb80, ^bb82, ^bb112
    return %44 : i32
  ^bb3:  // pred: ^bb1
    %45 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %46 = arith.extui %45 : i32 to i64
    %47 = arith.addi %46, %c20_i64 : i64
    %48 = llvm.getelementptr %11[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %49 = llvm.load volatile %48 {alignment = 1 : i64} : !llvm.ptr -> i32
    %50 = llvm.load %1 : !llvm.ptr -> i32
    %51 = llvm.load %2 : !llvm.ptr -> i32
    %52 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %53 = arith.extui %52 : i32 to i64
    %54 = arith.addi %53, %c24_i64 : i64
    %55 = llvm.getelementptr %11[%54] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %56 = llvm.load volatile %55 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %57 = arith.extui %56 : i32 to i64
    %58 = arith.addi %57, %c12_i64 : i64
    %59 = llvm.getelementptr %11[%58] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %60 = llvm.load volatile %59 {alignment = 1 : i64} : !llvm.ptr -> i32
    %61 = arith.cmpi ult, %60, %29 : i32
    cf.cond_br %61, ^bb106, ^bb107
  ^bb4:  // pred: ^bb1
    %62 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i32_10 = arith.constant 0 : i32
    %63 = arith.cmpi eq, %62, %c0_i32_10 : i32
    %64 = arith.extui %63 : i1 to i32
    %c0_i32_11 = arith.constant 0 : i32
    %65 = arith.cmpi ne, %64, %c0_i32_11 : i32
    cf.cond_br %65, ^bb5, ^bb6
  ^bb5:  // 4 preds: ^bb4, ^bb7, ^bb11, ^bb24
    %66 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_12 = arith.constant 0 : i32
    %67 = arith.cmpi ne, %66, %c0_i32_12 : i32
    cf.cond_br %67, ^bb31, ^bb32
  ^bb6:  // pred: ^bb4
    %68 = llvm.load %1 : !llvm.ptr -> i32
    %69 = llvm.load %2 : !llvm.ptr -> i32
    %70 = arith.addi %68, %69 : i32
    llvm.store %70, %5 : i32, !llvm.ptr
    %71 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64_13 = arith.constant 12 : i64
    %72 = arith.extui %71 : i32 to i64
    %73 = arith.addi %72, %c12_i64_13 : i64
    %74 = llvm.getelementptr %11[%73] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %75 = llvm.load volatile %74 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %75, %6 : i32, !llvm.ptr
    %c0_i32_14 = arith.constant 0 : i32
    %76 = arith.cmpi ne, %75, %c0_i32_14 : i32
    cf.cond_br %76, ^bb8, ^bb9
  ^bb7:  // 2 preds: ^bb9, ^bb10
    %77 = llvm.load %8 : !llvm.ptr -> i32
    %78 = llvm.load %5 : !llvm.ptr -> i32
    %79 = arith.cmpi eq, %77, %78 : i32
    %80 = arith.extui %79 : i1 to i32
    %c0_i32_15 = arith.constant 0 : i32
    %81 = arith.cmpi ne, %80, %c0_i32_15 : i32
    cf.cond_br %81, ^bb5, ^bb21
  ^bb8:  // pred: ^bb6
    %c0_i32_16 = arith.constant 0 : i32
    llvm.store %c0_i32_16, %7 : i32, !llvm.ptr
    %82 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %82, %8 : i32, !llvm.ptr
    cf.br ^bb11
  ^bb9:  // pred: ^bb6
    %c0_i32_17 = arith.constant 0 : i32
    llvm.store %c0_i32_17, %7 : i32, !llvm.ptr
    %83 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %83, %8 : i32, !llvm.ptr
    cf.br ^bb7
  ^bb10:  // pred: ^bb20
    cf.br ^bb7
  ^bb11:  // 2 preds: ^bb8, ^bb13
    %84 = llvm.load %8 : !llvm.ptr -> i32
    llvm.store %84, %4 : i32, !llvm.ptr
    %85 = llvm.load %5 : !llvm.ptr -> i32
    %86 = arith.cmpi eq, %84, %85 : i32
    %87 = arith.extui %86 : i1 to i32
    %c0_i32_18 = arith.constant 0 : i32
    %88 = arith.cmpi ne, %87, %c0_i32_18 : i32
    cf.cond_br %88, ^bb5, ^bb12
  ^bb12:  // pred: ^bb11
    %89 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_19 = arith.constant 0 : i64
    %90 = arith.extui %89 : i32 to i64
    %91 = arith.addi %90, %c0_i64_19 : i64
    %92 = llvm.getelementptr %11[%91] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %93 = llvm.load volatile %92 {alignment = 1 : i64} : !llvm.ptr -> i8
    %94 = arith.extsi %93 : i8 to i32
    llvm.store %94, %8 : i32, !llvm.ptr
    %c-1_i32 = arith.constant -1 : i32
    %95 = arith.cmpi sle, %94, %c-1_i32 : i32
    %96 = arith.extui %95 : i1 to i32
    %c0_i32_20 = arith.constant 0 : i32
    %97 = arith.cmpi ne, %96, %c0_i32_20 : i32
    cf.cond_br %97, ^bb14, ^bb15
  ^bb13:  // 4 preds: ^bb15, ^bb17, ^bb18, ^bb19
    %98 = llvm.load %8 : !llvm.ptr -> i32
    %99 = llvm.load %4 : !llvm.ptr -> i32
    %100 = arith.subi %98, %99 : i32
    %101 = llvm.load %7 : !llvm.ptr -> i32
    %102 = arith.addi %100, %101 : i32
    llvm.store %102, %7 : i32, !llvm.ptr
    %103 = llvm.load %6 : !llvm.ptr -> i32
    %c-1_i32_21 = arith.constant -1 : i32
    %104 = arith.addi %103, %c-1_i32_21 : i32
    llvm.store %104, %6 : i32, !llvm.ptr
    %c0_i32_22 = arith.constant 0 : i32
    %105 = arith.cmpi ne, %104, %c0_i32_22 : i32
    cf.cond_br %105, ^bb11, ^bb20
  ^bb14:  // pred: ^bb12
    %106 = llvm.load %8 : !llvm.ptr -> i32
    %c-32_i32 = arith.constant -32 : i32
    %107 = arith.cmpi uge, %106, %c-32_i32 : i32
    %108 = arith.extui %107 : i1 to i32
    %c0_i32_23 = arith.constant 0 : i32
    %109 = arith.cmpi ne, %108, %c0_i32_23 : i32
    cf.cond_br %109, ^bb16, ^bb17
  ^bb15:  // pred: ^bb12
    %110 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i32 = arith.constant 1 : i32
    %111 = arith.addi %110, %c1_i32 : i32
    llvm.store %111, %8 : i32, !llvm.ptr
    cf.br ^bb13
  ^bb16:  // pred: ^bb14
    %112 = llvm.load %8 : !llvm.ptr -> i32
    %c-16_i32 = arith.constant -16 : i32
    %113 = arith.cmpi uge, %112, %c-16_i32 : i32
    %114 = arith.extui %113 : i1 to i32
    %c0_i32_24 = arith.constant 0 : i32
    %115 = arith.cmpi ne, %114, %c0_i32_24 : i32
    cf.cond_br %115, ^bb18, ^bb19
  ^bb17:  // pred: ^bb14
    %116 = llvm.load %4 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %117 = arith.addi %116, %c2_i32 : i32
    llvm.store %117, %8 : i32, !llvm.ptr
    cf.br ^bb13
  ^bb18:  // pred: ^bb16
    %118 = llvm.load %4 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %119 = arith.addi %118, %c4_i32 : i32
    llvm.store %119, %8 : i32, !llvm.ptr
    cf.br ^bb13
  ^bb19:  // pred: ^bb16
    %120 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %121 = arith.addi %120, %c3_i32 : i32
    llvm.store %121, %8 : i32, !llvm.ptr
    cf.br ^bb13
  ^bb20:  // pred: ^bb13
    cf.br ^bb10
  ^bb21:  // pred: ^bb7
    %122 = llvm.load %8 : !llvm.ptr -> i32
    %c0_i64_25 = arith.constant 0 : i64
    %123 = arith.extui %122 : i32 to i64
    %124 = arith.addi %123, %c0_i64_25 : i64
    %125 = llvm.getelementptr %11[%124] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %126 = llvm.load volatile %125 {alignment = 1 : i64} : !llvm.ptr -> i8
    %127 = arith.extsi %126 : i8 to i32
    llvm.store %127, %4 : i32, !llvm.ptr
    %c-1_i32_26 = arith.constant -1 : i32
    %128 = arith.cmpi sgt, %127, %c-1_i32_26 : i32
    %129 = arith.extui %128 : i1 to i32
    %c0_i32_27 = arith.constant 0 : i32
    %130 = arith.cmpi ne, %129, %c0_i32_27 : i32
    cf.cond_br %130, ^bb22, ^bb23
  ^bb22:  // 2 preds: ^bb21, ^bb23
    %131 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i32_28 = arith.constant 0 : i32
    %132 = arith.cmpi eq, %131, %c0_i32_28 : i32
    %133 = arith.extui %132 : i1 to i32
    %c0_i32_29 = arith.constant 0 : i32
    %134 = arith.cmpi ne, %133, %c0_i32_29 : i32
    cf.cond_br %134, ^bb25, ^bb26
  ^bb23:  // pred: ^bb21
    %135 = llvm.load %4 : !llvm.ptr -> i32
    %c-32_i32_30 = arith.constant -32 : i32
    %136 = arith.cmpi ult, %135, %c-32_i32_30 : i32
    %137 = arith.extui %136 : i1 to i32
    cf.br ^bb22
  ^bb24:  // 3 preds: ^bb25, ^bb27, ^bb29
    %138 = llvm.load %7 : !llvm.ptr -> i32
    %139 = llvm.load %2 : !llvm.ptr -> i32
    %140 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i32_31 = arith.constant 0 : i32
    %141 = arith.cmpi ne, %140, %c0_i32_31 : i32
    %142 = arith.select %141, %138, %139 : i32
    llvm.store %142, %2 : i32, !llvm.ptr
    %143 = llvm.load %4 : !llvm.ptr -> i32
    %144 = llvm.load %1 : !llvm.ptr -> i32
    %145 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i32_32 = arith.constant 0 : i32
    %146 = arith.cmpi ne, %145, %c0_i32_32 : i32
    %147 = arith.select %146, %143, %144 : i32
    llvm.store %147, %1 : i32, !llvm.ptr
    cf.br ^bb5
  ^bb25:  // 3 preds: ^bb22, ^bb28, ^bb30
    %148 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %148, %4 : i32, !llvm.ptr
    cf.br ^bb24
  ^bb26:  // pred: ^bb22
    %149 = llvm.load %7 : !llvm.ptr -> i32
    %150 = llvm.load %2 : !llvm.ptr -> i32
    %151 = arith.cmpi uge, %149, %150 : i32
    %152 = arith.extui %151 : i1 to i32
    %c0_i32_33 = arith.constant 0 : i32
    %153 = arith.cmpi ne, %152, %c0_i32_33 : i32
    cf.cond_br %153, ^bb27, ^bb28
  ^bb27:  // pred: ^bb26
    %c0_i32_34 = arith.constant 0 : i32
    llvm.store %c0_i32_34, %4 : i32, !llvm.ptr
    %154 = llvm.load %7 : !llvm.ptr -> i32
    %155 = llvm.load %2 : !llvm.ptr -> i32
    %156 = arith.cmpi eq, %154, %155 : i32
    %157 = arith.extui %156 : i1 to i32
    %c0_i32_35 = arith.constant 0 : i32
    %158 = arith.cmpi eq, %157, %c0_i32_35 : i32
    %159 = arith.extui %158 : i1 to i32
    %c0_i32_36 = arith.constant 0 : i32
    %160 = arith.cmpi ne, %159, %c0_i32_36 : i32
    cf.cond_br %160, ^bb24, ^bb30
  ^bb28:  // pred: ^bb26
    %c0_i32_37 = arith.constant 0 : i32
    llvm.store %c0_i32_37, %4 : i32, !llvm.ptr
    %161 = llvm.load %1 : !llvm.ptr -> i32
    %162 = llvm.load %7 : !llvm.ptr -> i32
    %163 = arith.addi %161, %162 : i32
    %c0_i64_38 = arith.constant 0 : i64
    %164 = arith.extui %163 : i32 to i64
    %165 = arith.addi %164, %c0_i64_38 : i64
    %166 = llvm.getelementptr %11[%165] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %167 = llvm.load volatile %166 {alignment = 1 : i64} : !llvm.ptr -> i8
    %168 = arith.extsi %167 : i8 to i32
    %c-65_i32 = arith.constant -65 : i32
    %169 = arith.cmpi sgt, %168, %c-65_i32 : i32
    %170 = arith.extui %169 : i1 to i32
    %c0_i32_39 = arith.constant 0 : i32
    %171 = arith.cmpi ne, %170, %c0_i32_39 : i32
    cf.cond_br %171, ^bb25, ^bb29
  ^bb29:  // pred: ^bb28
    cf.br ^bb24
  ^bb30:  // pred: ^bb27
    cf.br ^bb25
  ^bb31:  // pred: ^bb5
    %172 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %173 = arith.extui %172 : i32 to i64
    %174 = arith.addi %173, %c4_i64 : i64
    %175 = llvm.getelementptr %11[%174] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %176 = llvm.load volatile %175 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %176, %3 : i32, !llvm.ptr
    %177 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %178 = arith.cmpi ult, %177, %c16_i32 : i32
    %179 = arith.extui %178 : i1 to i32
    %c0_i32_40 = arith.constant 0 : i32
    %180 = arith.cmpi ne, %179, %c0_i32_40 : i32
    cf.cond_br %180, ^bb42, ^bb43
  ^bb32:  // pred: ^bb5
    %181 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64_41 = arith.constant 20 : i64
    %182 = arith.extui %181 : i32 to i64
    %183 = arith.addi %182, %c20_i64_41 : i64
    %184 = llvm.getelementptr %11[%183] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %185 = llvm.load volatile %184 {alignment = 1 : i64} : !llvm.ptr -> i32
    %186 = llvm.load %1 : !llvm.ptr -> i32
    %187 = llvm.load %2 : !llvm.ptr -> i32
    %188 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64_42 = arith.constant 24 : i64
    %189 = arith.extui %188 : i32 to i64
    %190 = arith.addi %189, %c24_i64_42 : i64
    %191 = llvm.getelementptr %11[%190] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %192 = llvm.load volatile %191 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_43 = arith.constant 12 : i64
    %193 = arith.extui %192 : i32 to i64
    %194 = arith.addi %193, %c12_i64_43 : i64
    %195 = llvm.getelementptr %11[%194] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %196 = llvm.load volatile %195 {alignment = 1 : i64} : !llvm.ptr -> i32
    %197 = arith.cmpi ult, %196, %17 : i32
    cf.cond_br %197, ^bb33, ^bb34
  ^bb33:  // 2 preds: ^bb32, ^bb34
    %198 = llvm.getelementptr %16[%196] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %199 = llvm.load %198 : !llvm.ptr -> !llvm.ptr
    %200 = llvm.load %199 : !llvm.ptr -> i32
    %c0_i32_44 = arith.constant 0 : i32
    %201 = arith.cmpi eq, %200, %c0_i32_44 : i32
    cf.cond_br %201, ^bb36, ^bb35
  ^bb34:  // pred: ^bb32
    %c3_i32_45 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_45) : (i32) -> ()
    cf.br ^bb33
  ^bb35:  // 2 preds: ^bb33, ^bb36
    %202 = llvm.getelementptr %199[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %203 = llvm.getelementptr %199[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %204 = llvm.getelementptr %199[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %205 = llvm.load %202 : !llvm.ptr -> !llvm.ptr
    %206 = llvm.load %204 : !llvm.ptr -> !llvm.ptr
    %207 = llvm.load %205 : !llvm.ptr -> i32
    %c0_i32_46 = arith.constant 0 : i32
    %208 = arith.cmpi eq, %207, %c0_i32_46 : i32
    cf.cond_br %208, ^bb38, ^bb37
  ^bb36:  // pred: ^bb33
    %c4_i32_47 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_47) : (i32) -> ()
    cf.br ^bb35
  ^bb37:  // 2 preds: ^bb35, ^bb38
    %209 = llvm.load %203 : !llvm.ptr -> i32
    %210 = arith.cmpi ne, %13, %209 : i32
    cf.cond_br %210, ^bb40, ^bb39
  ^bb38:  // pred: ^bb35
    %c3_i32_48 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_48) : (i32) -> ()
    cf.br ^bb37
  ^bb39:  // 2 preds: ^bb37, ^bb40
    %211 = llvm.call %205(%206, %185, %186, %187) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%211 : i32)
  ^bb40:  // pred: ^bb37
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb39
  ^bb41:  // 4 preds: ^bb43, ^bb45, ^bb46, ^bb53
    %212 = llvm.load %3 : !llvm.ptr -> i32
    %213 = llvm.load %4 : !llvm.ptr -> i32
    %214 = arith.cmpi ule, %212, %213 : i32
    %215 = arith.extui %214 : i1 to i32
    %c0_i32_49 = arith.constant 0 : i32
    %216 = arith.cmpi ne, %215, %c0_i32_49 : i32
    cf.cond_br %216, ^bb57, ^bb58
  ^bb42:  // pred: ^bb31
    %217 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_50 = arith.constant 0 : i32
    %218 = arith.cmpi ne, %217, %c0_i32_50 : i32
    cf.cond_br %218, ^bb44, ^bb45
  ^bb43:  // pred: ^bb31
    %219 = llvm.load %1 : !llvm.ptr -> i32
    %220 = llvm.load %2 : !llvm.ptr -> i32
    %221 = call @f80(%arg0, %219, %220) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %221, %4 : i32, !llvm.ptr
    cf.br ^bb41
  ^bb44:  // pred: ^bb42
    %222 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i32_51 = arith.constant 3 : i32
    %223 = arith.andi %222, %c3_i32_51 : i32
    llvm.store %223, %6 : i32, !llvm.ptr
    %224 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i32_52 = arith.constant 4 : i32
    %225 = arith.cmpi uge, %224, %c4_i32_52 : i32
    %226 = arith.extui %225 : i1 to i32
    %c0_i32_53 = arith.constant 0 : i32
    %227 = arith.cmpi ne, %226, %c0_i32_53 : i32
    cf.cond_br %227, ^bb47, ^bb48
  ^bb45:  // pred: ^bb42
    %c0_i32_54 = arith.constant 0 : i32
    llvm.store %c0_i32_54, %4 : i32, !llvm.ptr
    cf.br ^bb41
  ^bb46:  // 2 preds: ^bb48, ^bb49
    %228 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i32_55 = arith.constant 0 : i32
    %229 = arith.cmpi eq, %228, %c0_i32_55 : i32
    %230 = arith.extui %229 : i1 to i32
    %c0_i32_56 = arith.constant 0 : i32
    %231 = arith.cmpi ne, %230, %c0_i32_56 : i32
    cf.cond_br %231, ^bb41, ^bb52
  ^bb47:  // pred: ^bb44
    %232 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %233 = arith.andi %232, %c12_i32 : i32
    llvm.store %233, %5 : i32, !llvm.ptr
    %c0_i32_57 = arith.constant 0 : i32
    llvm.store %c0_i32_57, %4 : i32, !llvm.ptr
    %c0_i32_58 = arith.constant 0 : i32
    llvm.store %c0_i32_58, %7 : i32, !llvm.ptr
    cf.br ^bb50
  ^bb48:  // pred: ^bb44
    %c0_i32_59 = arith.constant 0 : i32
    llvm.store %c0_i32_59, %4 : i32, !llvm.ptr
    %c0_i32_60 = arith.constant 0 : i32
    llvm.store %c0_i32_60, %7 : i32, !llvm.ptr
    cf.br ^bb46
  ^bb49:  // pred: ^bb51
    cf.br ^bb46
  ^bb50:  // 2 preds: ^bb47, ^bb50
    %234 = llvm.load %4 : !llvm.ptr -> i32
    %235 = llvm.load %1 : !llvm.ptr -> i32
    %236 = llvm.load %7 : !llvm.ptr -> i32
    %237 = arith.addi %235, %236 : i32
    llvm.store %237, %8 : i32, !llvm.ptr
    %c0_i64_61 = arith.constant 0 : i64
    %238 = arith.extui %237 : i32 to i64
    %239 = arith.addi %238, %c0_i64_61 : i64
    %240 = llvm.getelementptr %11[%239] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %241 = llvm.load volatile %240 {alignment = 1 : i64} : !llvm.ptr -> i8
    %242 = arith.extsi %241 : i8 to i32
    %c-65_i32_62 = arith.constant -65 : i32
    %243 = arith.cmpi sgt, %242, %c-65_i32_62 : i32
    %244 = arith.extui %243 : i1 to i32
    %245 = arith.addi %234, %244 : i32
    %246 = llvm.load %8 : !llvm.ptr -> i32
    %c1_i32_63 = arith.constant 1 : i32
    %247 = arith.addi %246, %c1_i32_63 : i32
    %c0_i64_64 = arith.constant 0 : i64
    %248 = arith.extui %247 : i32 to i64
    %249 = arith.addi %248, %c0_i64_64 : i64
    %250 = llvm.getelementptr %11[%249] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %251 = llvm.load volatile %250 {alignment = 1 : i64} : !llvm.ptr -> i8
    %252 = arith.extsi %251 : i8 to i32
    %c-65_i32_65 = arith.constant -65 : i32
    %253 = arith.cmpi sgt, %252, %c-65_i32_65 : i32
    %254 = arith.extui %253 : i1 to i32
    %255 = arith.addi %245, %254 : i32
    %256 = llvm.load %8 : !llvm.ptr -> i32
    %c2_i32_66 = arith.constant 2 : i32
    %257 = arith.addi %256, %c2_i32_66 : i32
    %c0_i64_67 = arith.constant 0 : i64
    %258 = arith.extui %257 : i32 to i64
    %259 = arith.addi %258, %c0_i64_67 : i64
    %260 = llvm.getelementptr %11[%259] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %261 = llvm.load volatile %260 {alignment = 1 : i64} : !llvm.ptr -> i8
    %262 = arith.extsi %261 : i8 to i32
    %c-65_i32_68 = arith.constant -65 : i32
    %263 = arith.cmpi sgt, %262, %c-65_i32_68 : i32
    %264 = arith.extui %263 : i1 to i32
    %265 = arith.addi %255, %264 : i32
    %266 = llvm.load %8 : !llvm.ptr -> i32
    %c3_i32_69 = arith.constant 3 : i32
    %267 = arith.addi %266, %c3_i32_69 : i32
    %c0_i64_70 = arith.constant 0 : i64
    %268 = arith.extui %267 : i32 to i64
    %269 = arith.addi %268, %c0_i64_70 : i64
    %270 = llvm.getelementptr %11[%269] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %271 = llvm.load volatile %270 {alignment = 1 : i64} : !llvm.ptr -> i8
    %272 = arith.extsi %271 : i8 to i32
    %c-65_i32_71 = arith.constant -65 : i32
    %273 = arith.cmpi sgt, %272, %c-65_i32_71 : i32
    %274 = arith.extui %273 : i1 to i32
    %275 = arith.addi %265, %274 : i32
    llvm.store %275, %4 : i32, !llvm.ptr
    %276 = llvm.load %5 : !llvm.ptr -> i32
    %277 = llvm.load %7 : !llvm.ptr -> i32
    %c4_i32_72 = arith.constant 4 : i32
    %278 = arith.addi %277, %c4_i32_72 : i32
    llvm.store %278, %7 : i32, !llvm.ptr
    %279 = arith.cmpi eq, %276, %278 : i32
    %280 = arith.extui %279 : i1 to i32
    %c0_i32_73 = arith.constant 0 : i32
    %281 = arith.cmpi eq, %280, %c0_i32_73 : i32
    %282 = arith.extui %281 : i1 to i32
    %c0_i32_74 = arith.constant 0 : i32
    %283 = arith.cmpi ne, %282, %c0_i32_74 : i32
    cf.cond_br %283, ^bb50, ^bb51
  ^bb51:  // pred: ^bb50
    cf.br ^bb49
  ^bb52:  // pred: ^bb46
    %284 = llvm.load %1 : !llvm.ptr -> i32
    %285 = llvm.load %7 : !llvm.ptr -> i32
    %286 = arith.addi %284, %285 : i32
    llvm.store %286, %8 : i32, !llvm.ptr
    cf.br ^bb54
  ^bb53:  // pred: ^bb55
    cf.br ^bb41
  ^bb54:  // 2 preds: ^bb52, ^bb54
    %287 = llvm.load %4 : !llvm.ptr -> i32
    %288 = llvm.load %8 : !llvm.ptr -> i32
    %c0_i64_75 = arith.constant 0 : i64
    %289 = arith.extui %288 : i32 to i64
    %290 = arith.addi %289, %c0_i64_75 : i64
    %291 = llvm.getelementptr %11[%290] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %292 = llvm.load volatile %291 {alignment = 1 : i64} : !llvm.ptr -> i8
    %293 = arith.extsi %292 : i8 to i32
    %c-65_i32_76 = arith.constant -65 : i32
    %294 = arith.cmpi sgt, %293, %c-65_i32_76 : i32
    %295 = arith.extui %294 : i1 to i32
    %296 = arith.addi %287, %295 : i32
    llvm.store %296, %4 : i32, !llvm.ptr
    %297 = llvm.load %8 : !llvm.ptr -> i32
    %c1_i32_77 = arith.constant 1 : i32
    %298 = arith.addi %297, %c1_i32_77 : i32
    llvm.store %298, %8 : i32, !llvm.ptr
    %299 = llvm.load %6 : !llvm.ptr -> i32
    %c-1_i32_78 = arith.constant -1 : i32
    %300 = arith.addi %299, %c-1_i32_78 : i32
    llvm.store %300, %6 : i32, !llvm.ptr
    %c0_i32_79 = arith.constant 0 : i32
    %301 = arith.cmpi ne, %300, %c0_i32_79 : i32
    cf.cond_br %301, ^bb54, ^bb55
  ^bb55:  // pred: ^bb54
    cf.br ^bb53
  ^bb56:  // pred: ^bb63
    %c1_i32_80 = arith.constant 1 : i32
    llvm.store %c1_i32_80, %4 : i32, !llvm.ptr
    %302 = llvm.load %7 : !llvm.ptr -> i32
    %303 = llvm.load %1 : !llvm.ptr -> i32
    %304 = llvm.load %2 : !llvm.ptr -> i32
    %305 = llvm.load %8 : !llvm.ptr -> i32
    %c12_i64_81 = arith.constant 12 : i64
    %306 = arith.extui %305 : i32 to i64
    %307 = arith.addi %306, %c12_i64_81 : i64
    %308 = llvm.getelementptr %11[%307] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %309 = llvm.load volatile %308 {alignment = 1 : i64} : !llvm.ptr -> i32
    %310 = arith.cmpi ult, %309, %25 : i32
    cf.cond_br %310, ^bb83, ^bb84
  ^bb57:  // pred: ^bb41
    %311 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64_82 = arith.constant 20 : i64
    %312 = arith.extui %311 : i32 to i64
    %313 = arith.addi %312, %c20_i64_82 : i64
    %314 = llvm.getelementptr %11[%313] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %315 = llvm.load volatile %314 {alignment = 1 : i64} : !llvm.ptr -> i32
    %316 = llvm.load %1 : !llvm.ptr -> i32
    %317 = llvm.load %2 : !llvm.ptr -> i32
    %318 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64_83 = arith.constant 24 : i64
    %319 = arith.extui %318 : i32 to i64
    %320 = arith.addi %319, %c24_i64_83 : i64
    %321 = llvm.getelementptr %11[%320] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %322 = llvm.load volatile %321 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_84 = arith.constant 12 : i64
    %323 = arith.extui %322 : i32 to i64
    %324 = arith.addi %323, %c12_i64_84 : i64
    %325 = llvm.getelementptr %11[%324] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %326 = llvm.load volatile %325 {alignment = 1 : i64} : !llvm.ptr -> i32
    %327 = arith.cmpi ult, %326, %23 : i32
    cf.cond_br %327, ^bb74, ^bb75
  ^bb58:  // pred: ^bb41
    %328 = llvm.load %3 : !llvm.ptr -> i32
    %329 = llvm.load %4 : !llvm.ptr -> i32
    %330 = arith.subi %328, %329 : i32
    llvm.store %330, %5 : i32, !llvm.ptr
    %c0_i32_85 = arith.constant 0 : i32
    llvm.store %c0_i32_85, %4 : i32, !llvm.ptr
    %331 = llvm.load %0 : !llvm.ptr -> i32
    %c32_i64 = arith.constant 32 : i64
    %332 = arith.extui %331 : i32 to i64
    %333 = arith.addi %332, %c32_i64 : i64
    %334 = llvm.getelementptr %11[%333] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %335 = llvm.load volatile %334 {alignment = 1 : i64} : !llvm.ptr -> i8
    %336 = arith.extui %335 : i8 to i32
    cf.switch %336 : i32, [
      default: ^bb59,
      0: ^bb59,
      1: ^bb61,
      2: ^bb60,
      3: ^bb59
    ]
  ^bb59:  // 5 preds: ^bb58, ^bb58, ^bb58, ^bb60, ^bb61
    %337 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i32_86 = arith.constant 1 : i32
    %338 = arith.addi %337, %c1_i32_86 : i32
    llvm.store %338, %4 : i32, !llvm.ptr
    %339 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %340 = arith.extui %339 : i32 to i64
    %341 = arith.addi %340, %c16_i64 : i64
    %342 = llvm.getelementptr %11[%341] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %343 = llvm.load volatile %342 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %343, %6 : i32, !llvm.ptr
    %344 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64_87 = arith.constant 24 : i64
    %345 = arith.extui %344 : i32 to i64
    %346 = arith.addi %345, %c24_i64_87 : i64
    %347 = llvm.getelementptr %11[%346] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %348 = llvm.load volatile %347 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %348, %8 : i32, !llvm.ptr
    %349 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64_88 = arith.constant 20 : i64
    %350 = arith.extui %349 : i32 to i64
    %351 = arith.addi %350, %c20_i64_88 : i64
    %352 = llvm.getelementptr %11[%351] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %353 = llvm.load volatile %352 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %353, %7 : i32, !llvm.ptr
    cf.br ^bb63
  ^bb60:  // pred: ^bb58
    %354 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i32_89 = arith.constant 1 : i32
    %c31_i32 = arith.constant 31 : i32
    %355 = arith.cmpi ule, %c1_i32_89, %c31_i32 : i32
    %356 = scf.if %355 -> (i32) {
      %477 = arith.shrui %354, %c1_i32_89 : i32
      scf.yield %477 : i32
    } else {
      %c0_i32_140 = arith.constant 0 : i32
      scf.yield %c0_i32_140 : i32
    }
    llvm.store %356, %4 : i32, !llvm.ptr
    %357 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i32_90 = arith.constant 1 : i32
    %358 = arith.addi %357, %c1_i32_90 : i32
    %c1_i32_91 = arith.constant 1 : i32
    %c31_i32_92 = arith.constant 31 : i32
    %359 = arith.cmpi ule, %c1_i32_91, %c31_i32_92 : i32
    %360 = scf.if %359 -> (i32) {
      %477 = arith.shrui %358, %c1_i32_91 : i32
      scf.yield %477 : i32
    } else {
      %c0_i32_140 = arith.constant 0 : i32
      scf.yield %c0_i32_140 : i32
    }
    llvm.store %360, %5 : i32, !llvm.ptr
    cf.br ^bb59
  ^bb61:  // pred: ^bb58
    %361 = llvm.load %5 : !llvm.ptr -> i32
    llvm.store %361, %4 : i32, !llvm.ptr
    %c0_i32_93 = arith.constant 0 : i32
    llvm.store %c0_i32_93, %5 : i32, !llvm.ptr
    cf.br ^bb59
  ^bb62:  // pred: ^bb73
    %c1_i32_94 = arith.constant 1 : i32
    cf.br ^bb2(%c1_i32_94 : i32)
  ^bb63:  // 2 preds: ^bb59, ^bb71
    %362 = llvm.load %4 : !llvm.ptr -> i32
    %c-1_i32_95 = arith.constant -1 : i32
    %363 = arith.addi %362, %c-1_i32_95 : i32
    llvm.store %363, %4 : i32, !llvm.ptr
    %c0_i32_96 = arith.constant 0 : i32
    %364 = arith.cmpi eq, %363, %c0_i32_96 : i32
    %365 = arith.extui %364 : i1 to i32
    %c0_i32_97 = arith.constant 0 : i32
    %366 = arith.cmpi ne, %365, %c0_i32_97 : i32
    cf.cond_br %366, ^bb56, ^bb64
  ^bb64:  // pred: ^bb63
    %367 = llvm.load %7 : !llvm.ptr -> i32
    %368 = llvm.load %6 : !llvm.ptr -> i32
    %369 = llvm.load %8 : !llvm.ptr -> i32
    %c16_i64_98 = arith.constant 16 : i64
    %370 = arith.extui %369 : i32 to i64
    %371 = arith.addi %370, %c16_i64_98 : i64
    %372 = llvm.getelementptr %11[%371] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %373 = llvm.load volatile %372 {alignment = 1 : i64} : !llvm.ptr -> i32
    %374 = arith.cmpi ult, %373, %21 : i32
    cf.cond_br %374, ^bb65, ^bb66
  ^bb65:  // 2 preds: ^bb64, ^bb66
    %375 = llvm.getelementptr %20[%373] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %376 = llvm.load %375 : !llvm.ptr -> !llvm.ptr
    %377 = llvm.load %376 : !llvm.ptr -> i32
    %c0_i32_99 = arith.constant 0 : i32
    %378 = arith.cmpi eq, %377, %c0_i32_99 : i32
    cf.cond_br %378, ^bb68, ^bb67
  ^bb66:  // pred: ^bb64
    %c3_i32_100 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_100) : (i32) -> ()
    cf.br ^bb65
  ^bb67:  // 2 preds: ^bb65, ^bb68
    %379 = llvm.getelementptr %376[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %380 = llvm.getelementptr %376[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %381 = llvm.getelementptr %376[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %382 = llvm.load %379 : !llvm.ptr -> !llvm.ptr
    %383 = llvm.load %381 : !llvm.ptr -> !llvm.ptr
    %384 = llvm.load %382 : !llvm.ptr -> i32
    %c0_i32_101 = arith.constant 0 : i32
    %385 = arith.cmpi eq, %384, %c0_i32_101 : i32
    cf.cond_br %385, ^bb70, ^bb69
  ^bb68:  // pred: ^bb65
    %c4_i32_102 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_102) : (i32) -> ()
    cf.br ^bb67
  ^bb69:  // 2 preds: ^bb67, ^bb70
    %386 = llvm.load %380 : !llvm.ptr -> i32
    %387 = arith.cmpi ne, %19, %386 : i32
    cf.cond_br %387, ^bb72, ^bb71
  ^bb70:  // pred: ^bb67
    %c3_i32_103 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_103) : (i32) -> ()
    cf.br ^bb69
  ^bb71:  // 2 preds: ^bb69, ^bb72
    %388 = llvm.call %382(%383, %367, %368) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_104 = arith.constant 0 : i32
    %389 = arith.cmpi eq, %388, %c0_i32_104 : i32
    %390 = arith.extui %389 : i1 to i32
    %c0_i32_105 = arith.constant 0 : i32
    %391 = arith.cmpi ne, %390, %c0_i32_105 : i32
    cf.cond_br %391, ^bb63, ^bb73
  ^bb72:  // pred: ^bb69
    %c5_i32_106 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_106) : (i32) -> ()
    cf.br ^bb71
  ^bb73:  // pred: ^bb71
    cf.br ^bb62
  ^bb74:  // 2 preds: ^bb57, ^bb75
    %392 = llvm.getelementptr %22[%326] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %393 = llvm.load %392 : !llvm.ptr -> !llvm.ptr
    %394 = llvm.load %393 : !llvm.ptr -> i32
    %c0_i32_107 = arith.constant 0 : i32
    %395 = arith.cmpi eq, %394, %c0_i32_107 : i32
    cf.cond_br %395, ^bb77, ^bb76
  ^bb75:  // pred: ^bb57
    %c3_i32_108 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_108) : (i32) -> ()
    cf.br ^bb74
  ^bb76:  // 2 preds: ^bb74, ^bb77
    %396 = llvm.getelementptr %393[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %397 = llvm.getelementptr %393[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %398 = llvm.getelementptr %393[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %399 = llvm.load %396 : !llvm.ptr -> !llvm.ptr
    %400 = llvm.load %398 : !llvm.ptr -> !llvm.ptr
    %401 = llvm.load %399 : !llvm.ptr -> i32
    %c0_i32_109 = arith.constant 0 : i32
    %402 = arith.cmpi eq, %401, %c0_i32_109 : i32
    cf.cond_br %402, ^bb79, ^bb78
  ^bb77:  // pred: ^bb74
    %c4_i32_110 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_110) : (i32) -> ()
    cf.br ^bb76
  ^bb78:  // 2 preds: ^bb76, ^bb79
    %403 = llvm.load %397 : !llvm.ptr -> i32
    %404 = arith.cmpi ne, %13, %403 : i32
    cf.cond_br %404, ^bb81, ^bb80
  ^bb79:  // pred: ^bb76
    %c3_i32_111 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_111) : (i32) -> ()
    cf.br ^bb78
  ^bb80:  // 2 preds: ^bb78, ^bb81
    %405 = llvm.call %399(%400, %315, %316, %317) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%405 : i32)
  ^bb81:  // pred: ^bb78
    %c5_i32_112 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_112) : (i32) -> ()
    cf.br ^bb80
  ^bb82:  // 2 preds: ^bb89, ^bb92
    %406 = llvm.load %4 : !llvm.ptr -> i32
    cf.br ^bb2(%406 : i32)
  ^bb83:  // 2 preds: ^bb56, ^bb84
    %407 = llvm.getelementptr %24[%309] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %408 = llvm.load %407 : !llvm.ptr -> !llvm.ptr
    %409 = llvm.load %408 : !llvm.ptr -> i32
    %c0_i32_113 = arith.constant 0 : i32
    %410 = arith.cmpi eq, %409, %c0_i32_113 : i32
    cf.cond_br %410, ^bb86, ^bb85
  ^bb84:  // pred: ^bb56
    %c3_i32_114 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_114) : (i32) -> ()
    cf.br ^bb83
  ^bb85:  // 2 preds: ^bb83, ^bb86
    %411 = llvm.getelementptr %408[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %412 = llvm.getelementptr %408[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %413 = llvm.getelementptr %408[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %414 = llvm.load %411 : !llvm.ptr -> !llvm.ptr
    %415 = llvm.load %413 : !llvm.ptr -> !llvm.ptr
    %416 = llvm.load %414 : !llvm.ptr -> i32
    %c0_i32_115 = arith.constant 0 : i32
    %417 = arith.cmpi eq, %416, %c0_i32_115 : i32
    cf.cond_br %417, ^bb88, ^bb87
  ^bb86:  // pred: ^bb83
    %c4_i32_116 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_116) : (i32) -> ()
    cf.br ^bb85
  ^bb87:  // 2 preds: ^bb85, ^bb88
    %418 = llvm.load %412 : !llvm.ptr -> i32
    %419 = arith.cmpi ne, %13, %418 : i32
    cf.cond_br %419, ^bb90, ^bb89
  ^bb88:  // pred: ^bb85
    %c3_i32_117 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_117) : (i32) -> ()
    cf.br ^bb87
  ^bb89:  // 2 preds: ^bb87, ^bb90
    %420 = llvm.call %414(%415, %302, %303, %304) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_118 = arith.constant 0 : i32
    %421 = arith.cmpi ne, %420, %c0_i32_118 : i32
    cf.cond_br %421, ^bb82, ^bb91
  ^bb90:  // pred: ^bb87
    %c5_i32_119 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_119) : (i32) -> ()
    cf.br ^bb89
  ^bb91:  // pred: ^bb89
    %c0_i32_120 = arith.constant 0 : i32
    llvm.store %c0_i32_120, %4 : i32, !llvm.ptr
    cf.br ^bb94
  ^bb92:  // 2 preds: ^bb93, ^bb96
    %422 = llvm.load %4 : !llvm.ptr -> i32
    %423 = llvm.load %5 : !llvm.ptr -> i32
    %424 = arith.cmpi ult, %422, %423 : i32
    %425 = arith.extui %424 : i1 to i32
    llvm.store %425, %4 : i32, !llvm.ptr
    cf.br ^bb82
  ^bb93:  // pred: ^bb105
    %426 = llvm.load %4 : !llvm.ptr -> i32
    %c-1_i32_121 = arith.constant -1 : i32
    %427 = arith.addi %426, %c-1_i32_121 : i32
    llvm.store %427, %4 : i32, !llvm.ptr
    cf.br ^bb92
  ^bb94:  // 2 preds: ^bb91, ^bb103
    %428 = llvm.load %5 : !llvm.ptr -> i32
    %429 = llvm.load %4 : !llvm.ptr -> i32
    %430 = arith.cmpi eq, %428, %429 : i32
    %431 = arith.extui %430 : i1 to i32
    %c0_i32_122 = arith.constant 0 : i32
    %432 = arith.cmpi eq, %431, %c0_i32_122 : i32
    %433 = arith.extui %432 : i1 to i32
    %c0_i32_123 = arith.constant 0 : i32
    %434 = arith.cmpi ne, %433, %c0_i32_123 : i32
    cf.cond_br %434, ^bb95, ^bb96
  ^bb95:  // pred: ^bb94
    %435 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i32_124 = arith.constant 1 : i32
    %436 = arith.addi %435, %c1_i32_124 : i32
    llvm.store %436, %4 : i32, !llvm.ptr
    %437 = llvm.load %7 : !llvm.ptr -> i32
    %438 = llvm.load %6 : !llvm.ptr -> i32
    %439 = llvm.load %8 : !llvm.ptr -> i32
    %c16_i64_125 = arith.constant 16 : i64
    %440 = arith.extui %439 : i32 to i64
    %441 = arith.addi %440, %c16_i64_125 : i64
    %442 = llvm.getelementptr %11[%441] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %443 = llvm.load volatile %442 {alignment = 1 : i64} : !llvm.ptr -> i32
    %444 = arith.cmpi ult, %443, %27 : i32
    cf.cond_br %444, ^bb97, ^bb98
  ^bb96:  // pred: ^bb94
    %445 = llvm.load %5 : !llvm.ptr -> i32
    llvm.store %445, %4 : i32, !llvm.ptr
    cf.br ^bb92
  ^bb97:  // 2 preds: ^bb95, ^bb98
    %446 = llvm.getelementptr %26[%443] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %447 = llvm.load %446 : !llvm.ptr -> !llvm.ptr
    %448 = llvm.load %447 : !llvm.ptr -> i32
    %c0_i32_126 = arith.constant 0 : i32
    %449 = arith.cmpi eq, %448, %c0_i32_126 : i32
    cf.cond_br %449, ^bb100, ^bb99
  ^bb98:  // pred: ^bb95
    %c3_i32_127 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_127) : (i32) -> ()
    cf.br ^bb97
  ^bb99:  // 2 preds: ^bb97, ^bb100
    %450 = llvm.getelementptr %447[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %451 = llvm.getelementptr %447[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %452 = llvm.getelementptr %447[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %453 = llvm.load %450 : !llvm.ptr -> !llvm.ptr
    %454 = llvm.load %452 : !llvm.ptr -> !llvm.ptr
    %455 = llvm.load %453 : !llvm.ptr -> i32
    %c0_i32_128 = arith.constant 0 : i32
    %456 = arith.cmpi eq, %455, %c0_i32_128 : i32
    cf.cond_br %456, ^bb102, ^bb101
  ^bb100:  // pred: ^bb97
    %c4_i32_129 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_129) : (i32) -> ()
    cf.br ^bb99
  ^bb101:  // 2 preds: ^bb99, ^bb102
    %457 = llvm.load %451 : !llvm.ptr -> i32
    %458 = arith.cmpi ne, %19, %457 : i32
    cf.cond_br %458, ^bb104, ^bb103
  ^bb102:  // pred: ^bb99
    %c3_i32_130 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_130) : (i32) -> ()
    cf.br ^bb101
  ^bb103:  // 2 preds: ^bb101, ^bb104
    %459 = llvm.call %453(%454, %437, %438) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_131 = arith.constant 0 : i32
    %460 = arith.cmpi eq, %459, %c0_i32_131 : i32
    %461 = arith.extui %460 : i1 to i32
    %c0_i32_132 = arith.constant 0 : i32
    %462 = arith.cmpi ne, %461, %c0_i32_132 : i32
    cf.cond_br %462, ^bb94, ^bb105
  ^bb104:  // pred: ^bb101
    %c5_i32_133 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_133) : (i32) -> ()
    cf.br ^bb103
  ^bb105:  // pred: ^bb103
    cf.br ^bb93
  ^bb106:  // 2 preds: ^bb3, ^bb107
    %463 = llvm.getelementptr %28[%60] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %464 = llvm.load %463 : !llvm.ptr -> !llvm.ptr
    %465 = llvm.load %464 : !llvm.ptr -> i32
    %c0_i32_134 = arith.constant 0 : i32
    %466 = arith.cmpi eq, %465, %c0_i32_134 : i32
    cf.cond_br %466, ^bb109, ^bb108
  ^bb107:  // pred: ^bb3
    %c3_i32_135 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_135) : (i32) -> ()
    cf.br ^bb106
  ^bb108:  // 2 preds: ^bb106, ^bb109
    %467 = llvm.getelementptr %464[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %468 = llvm.getelementptr %464[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %469 = llvm.getelementptr %464[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %470 = llvm.load %467 : !llvm.ptr -> !llvm.ptr
    %471 = llvm.load %469 : !llvm.ptr -> !llvm.ptr
    %472 = llvm.load %470 : !llvm.ptr -> i32
    %c0_i32_136 = arith.constant 0 : i32
    %473 = arith.cmpi eq, %472, %c0_i32_136 : i32
    cf.cond_br %473, ^bb111, ^bb110
  ^bb109:  // pred: ^bb106
    %c4_i32_137 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_137) : (i32) -> ()
    cf.br ^bb108
  ^bb110:  // 2 preds: ^bb108, ^bb111
    %474 = llvm.load %468 : !llvm.ptr -> i32
    %475 = arith.cmpi ne, %13, %474 : i32
    cf.cond_br %475, ^bb113, ^bb112
  ^bb111:  // pred: ^bb108
    %c3_i32_138 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_138) : (i32) -> ()
    cf.br ^bb110
  ^bb112:  // 2 preds: ^bb110, ^bb113
    %476 = llvm.call %470(%471, %49, %50, %51) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%476 : i32)
  ^bb113:  // pred: ^bb110
    %c5_i32_139 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_139) : (i32) -> ()
    cf.br ^bb112
  }
  func.func @f73(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %5 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %10 = arith.subi %9, %c32_i32 : i32
    llvm.store %10, %3 : i32, !llvm.ptr
    llvm.store %10, %5 : i32, !llvm.ptr
    %11 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_3 = arith.constant 0 : i32
    %c16_i64 = arith.constant 16 : i64
    %12 = arith.extui %11 : i32 to i64
    %13 = arith.addi %12, %c16_i64 : i64
    %14 = llvm.getelementptr %8[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_3, %14 {alignment = 1 : i64} : i32, !llvm.ptr
    %15 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32 = arith.constant 1 : i32
    %c4_i64 = arith.constant 4 : i64
    %16 = arith.extui %15 : i32 to i64
    %17 = arith.addi %16, %c4_i64 : i64
    %18 = llvm.getelementptr %8[%17] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32, %18 {alignment = 1 : i64} : i32, !llvm.ptr
    %19 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64_4 = arith.constant 4 : i64
    %c8_i64 = arith.constant 8 : i64
    %20 = arith.extui %19 : i32 to i64
    %21 = arith.addi %20, %c8_i64 : i64
    %22 = llvm.getelementptr %8[%21] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4_i64_4, %22 {alignment = 1 : i64} : i64, !llvm.ptr
    %23 = llvm.load %3 : !llvm.ptr -> i32
    %24 = llvm.load %1 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %25 = arith.extui %23 : i32 to i64
    %26 = arith.addi %25, %c28_i64 : i64
    %27 = llvm.getelementptr %8[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %24, %27 {alignment = 1 : i64} : i32, !llvm.ptr
    %28 = llvm.load %3 : !llvm.ptr -> i32
    %29 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %30 = arith.extui %28 : i32 to i64
    %31 = arith.addi %30, %c24_i64 : i64
    %32 = llvm.getelementptr %8[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %29, %32 {alignment = 1 : i64} : i32, !llvm.ptr
    %33 = llvm.load %3 : !llvm.ptr -> i32
    %34 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %35 = arith.addi %34, %c24_i32 : i32
    %c0_i64 = arith.constant 0 : i64
    %36 = arith.extui %33 : i32 to i64
    %37 = arith.addi %36, %c0_i64 : i64
    %38 = llvm.getelementptr %8[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %35, %38 {alignment = 1 : i64} : i32, !llvm.ptr
    %39 = llvm.load %3 : !llvm.ptr -> i32
    %40 = llvm.load %2 : !llvm.ptr -> i32
    call @f70(%arg0, %39, %40) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f74(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %9 = llvm.load volatile %8 {alignment = 1 : i64} : !llvm.ptr -> i32
    %10 = arith.extui %9 : i32 to i64
    %c1_i32 = arith.constant 1 : i32
    %11 = llvm.load %1 : !llvm.ptr -> i32
    %12 = call @f83(%arg0, %10, %c1_i32, %11) : (!llvm.ptr, i64, i32, i32) -> i32
    cf.br ^bb2(%12 : i32)
  ^bb2(%13: i32):  // pred: ^bb1
    return %13 : i32
  }
  func.func @f75(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i64_4 = arith.constant 1 : i64
    %5 = llvm.alloca %c1_i64_4 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i64_5 = arith.constant 1 : i64
    %6 = llvm.alloca %c1_i64_5 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i64_6 = arith.constant 1 : i64
    %7 = llvm.alloca %c1_i64_6 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i64_7 = arith.constant 1 : i64
    %8 = llvm.alloca %c1_i64_7 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i64_8 = arith.constant 1 : i64
    %9 = llvm.alloca %c1_i64_8 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %c1_i64_9 = arith.constant 1 : i64
    %10 = llvm.alloca %c1_i64_9 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %10 : i32, !llvm.ptr
    %c1_i64_10 = arith.constant 1 : i64
    %11 = llvm.alloca %c1_i64_10 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %11 : i32, !llvm.ptr
    %c1_i64_11 = arith.constant 1 : i64
    %12 = llvm.alloca %c1_i64_11 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %12 : i32, !llvm.ptr
    %13 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %15 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %15[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.getelementptr %arg0[4] : (!llvm.ptr) -> !llvm.ptr, i8
    %19 = llvm.load %18 : !llvm.ptr -> i32
    %20 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %21 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %22 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %23 = llvm.load %21 : !llvm.ptr -> i32
    %24 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %25 = llvm.load %24 : !llvm.ptr -> i32
    %26 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %27 = llvm.load %21 : !llvm.ptr -> i32
    %28 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %29 = llvm.load %21 : !llvm.ptr -> i32
    %30 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %31 = llvm.load %21 : !llvm.ptr -> i32
    %32 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %33 = llvm.load %21 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %34 = llvm.load %14 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %35 = arith.subi %34, %c48_i32 : i32
    llvm.store %35, %3 : i32, !llvm.ptr
    llvm.store %35, %14 : i32, !llvm.ptr
    %36 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %c44_i64 = arith.constant 44 : i64
    %37 = arith.extui %36 : i32 to i64
    %38 = arith.addi %37, %c44_i64 : i64
    %39 = llvm.getelementptr %17[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %40 = arith.trunci %c3_i32 : i32 to i8
    llvm.store volatile %40, %39 {alignment = 1 : i64} : i8, !llvm.ptr
    %41 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %c28_i64 = arith.constant 28 : i64
    %42 = arith.extui %41 : i32 to i64
    %43 = arith.addi %42, %c28_i64 : i64
    %44 = llvm.getelementptr %17[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c32_i32, %44 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_12 = arith.constant 0 : i32
    llvm.store %c0_i32_12, %4 : i32, !llvm.ptr
    %45 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_13 = arith.constant 0 : i32
    %c40_i64 = arith.constant 40 : i64
    %46 = arith.extui %45 : i32 to i64
    %47 = arith.addi %46, %c40_i64 : i64
    %48 = llvm.getelementptr %17[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_13, %48 {alignment = 1 : i64} : i32, !llvm.ptr
    %49 = llvm.load %3 : !llvm.ptr -> i32
    %50 = llvm.load %1 : !llvm.ptr -> i32
    %c36_i64 = arith.constant 36 : i64
    %51 = arith.extui %49 : i32 to i64
    %52 = arith.addi %51, %c36_i64 : i64
    %53 = llvm.getelementptr %17[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %50, %53 {alignment = 1 : i64} : i32, !llvm.ptr
    %54 = llvm.load %3 : !llvm.ptr -> i32
    %55 = llvm.load %0 : !llvm.ptr -> i32
    %c32_i64 = arith.constant 32 : i64
    %56 = arith.extui %54 : i32 to i64
    %57 = arith.addi %56, %c32_i64 : i64
    %58 = llvm.getelementptr %17[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %55, %58 {alignment = 1 : i64} : i32, !llvm.ptr
    %59 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_14 = arith.constant 0 : i32
    %c20_i64 = arith.constant 20 : i64
    %60 = arith.extui %59 : i32 to i64
    %61 = arith.addi %60, %c20_i64 : i64
    %62 = llvm.getelementptr %17[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_14, %62 {alignment = 1 : i64} : i32, !llvm.ptr
    %63 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_15 = arith.constant 0 : i32
    %c12_i64 = arith.constant 12 : i64
    %64 = arith.extui %63 : i32 to i64
    %65 = arith.addi %64, %c12_i64 : i64
    %66 = llvm.getelementptr %17[%65] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_15, %66 {alignment = 1 : i64} : i32, !llvm.ptr
    %67 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %68 = arith.extui %67 : i32 to i64
    %69 = arith.addi %68, %c16_i64 : i64
    %70 = llvm.getelementptr %17[%69] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %71 = llvm.load volatile %70 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %71, %5 : i32, !llvm.ptr
    %c0_i32_16 = arith.constant 0 : i32
    %72 = arith.cmpi ne, %71, %c0_i32_16 : i32
    cf.cond_br %72, ^bb7, ^bb8
  ^bb2(%73: i32):  // pred: ^bb3
    return %73 : i32
  ^bb3:  // 2 preds: ^bb4, ^bb5
    %74 = llvm.load %3 : !llvm.ptr -> i32
    %c48_i32_17 = arith.constant 48 : i32
    %75 = arith.addi %74, %c48_i32_17 : i32
    llvm.store %75, %14 : i32, !llvm.ptr
    %76 = llvm.load %1 : !llvm.ptr -> i32
    cf.br ^bb2(%76 : i32)
  ^bb4:  // 2 preds: ^bb6, ^bb72
    %c0_i32_18 = arith.constant 0 : i32
    llvm.store %c0_i32_18, %1 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // 5 preds: ^bb20, ^bb29, ^bb44, ^bb61, ^bb74
    %c1_i32 = arith.constant 1 : i32
    llvm.store %c1_i32, %1 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb6:  // 4 preds: ^bb7, ^bb8, ^bb32, ^bb34
    %77 = llvm.load %4 : !llvm.ptr -> i32
    %78 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %79 = arith.extui %78 : i32 to i64
    %80 = arith.addi %79, %c4_i64 : i64
    %81 = llvm.getelementptr %17[%80] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %82 = llvm.load volatile %81 {alignment = 1 : i64} : !llvm.ptr -> i32
    %83 = arith.cmpi uge, %77, %82 : i32
    %84 = arith.extui %83 : i1 to i32
    %c0_i32_19 = arith.constant 0 : i32
    %85 = arith.cmpi ne, %84, %c0_i32_19 : i32
    cf.cond_br %85, ^bb4, ^bb65
  ^bb7:  // 2 preds: ^bb1, ^bb10
    %86 = llvm.load %2 : !llvm.ptr -> i32
    %c20_i64_20 = arith.constant 20 : i64
    %87 = arith.extui %86 : i32 to i64
    %88 = arith.addi %87, %c20_i64_20 : i64
    %89 = llvm.getelementptr %17[%88] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %90 = llvm.load volatile %89 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %90, %1 : i32, !llvm.ptr
    %c0_i32_21 = arith.constant 0 : i32
    %91 = arith.cmpi eq, %90, %c0_i32_21 : i32
    %92 = arith.extui %91 : i1 to i32
    %c0_i32_22 = arith.constant 0 : i32
    %93 = arith.cmpi ne, %92, %c0_i32_22 : i32
    cf.cond_br %93, ^bb6, ^bb33
  ^bb8:  // pred: ^bb1
    %94 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64_23 = arith.constant 12 : i64
    %95 = arith.extui %94 : i32 to i64
    %96 = arith.addi %95, %c12_i64_23 : i64
    %97 = llvm.getelementptr %17[%96] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %98 = llvm.load volatile %97 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %98, %0 : i32, !llvm.ptr
    %c0_i32_24 = arith.constant 0 : i32
    %99 = arith.cmpi eq, %98, %c0_i32_24 : i32
    %100 = arith.extui %99 : i1 to i32
    %c0_i32_25 = arith.constant 0 : i32
    %101 = arith.cmpi ne, %100, %c0_i32_25 : i32
    cf.cond_br %101, ^bb6, ^bb9
  ^bb9:  // pred: ^bb8
    %102 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %103 = arith.extui %102 : i32 to i64
    %104 = arith.addi %103, %c8_i64 : i64
    %105 = llvm.getelementptr %17[%104] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %106 = llvm.load volatile %105 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %106, %1 : i32, !llvm.ptr
    %107 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i32_26 = arith.constant 3 : i32
    %c31_i32 = arith.constant 31 : i32
    %108 = arith.cmpi ule, %c3_i32_26, %c31_i32 : i32
    %109 = scf.if %108 -> (i32) {
      %467 = arith.shli %107, %c3_i32_26 : i32
      scf.yield %467 : i32
    } else {
      %c0_i32_138 = arith.constant 0 : i32
      scf.yield %c0_i32_138 : i32
    }
    llvm.store %109, %6 : i32, !llvm.ptr
    %110 = llvm.load %0 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %111 = arith.addi %110, %c-1_i32 : i32
    %c536870911_i32 = arith.constant 536870911 : i32
    %112 = arith.andi %111, %c536870911_i32 : i32
    %c1_i32_27 = arith.constant 1 : i32
    %113 = arith.addi %112, %c1_i32_27 : i32
    llvm.store %113, %4 : i32, !llvm.ptr
    %114 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %115 = arith.extui %114 : i32 to i64
    %116 = arith.addi %115, %c0_i64 : i64
    %117 = llvm.getelementptr %17[%116] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %118 = llvm.load volatile %117 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %118, %0 : i32, !llvm.ptr
    cf.br ^bb11
  ^bb10:  // no predecessors
    cf.br ^bb7
  ^bb11:  // 2 preds: ^bb9, ^bb31
    %119 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %120 = arith.addi %119, %c4_i32 : i32
    %c0_i64_28 = arith.constant 0 : i64
    %121 = arith.extui %120 : i32 to i64
    %122 = arith.addi %121, %c0_i64_28 : i64
    %123 = llvm.getelementptr %17[%122] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %124 = llvm.load volatile %123 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %124, %7 : i32, !llvm.ptr
    %c0_i32_29 = arith.constant 0 : i32
    %125 = arith.cmpi eq, %124, %c0_i32_29 : i32
    %126 = arith.extui %125 : i1 to i32
    %c0_i32_30 = arith.constant 0 : i32
    %127 = arith.cmpi ne, %126, %c0_i32_30 : i32
    cf.cond_br %127, ^bb12, ^bb13
  ^bb12:  // 2 preds: ^bb11, ^bb22
    %128 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_31 = arith.constant 0 : i64
    %129 = arith.extui %128 : i32 to i64
    %130 = arith.addi %129, %c0_i64_31 : i64
    %131 = llvm.getelementptr %17[%130] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %132 = llvm.load volatile %131 {alignment = 1 : i64} : !llvm.ptr -> i32
    %133 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %134 = arith.addi %133, %c12_i32 : i32
    %135 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_32 = arith.constant 4 : i64
    %136 = arith.extui %135 : i32 to i64
    %137 = arith.addi %136, %c4_i64_32 : i64
    %138 = llvm.getelementptr %17[%137] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %139 = llvm.load volatile %138 {alignment = 1 : i64} : !llvm.ptr -> i32
    %140 = arith.cmpi ult, %139, %27 : i32
    cf.cond_br %140, ^bb23, ^bb24
  ^bb13:  // pred: ^bb11
    %141 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i64_33 = arith.constant 32 : i64
    %142 = arith.extui %141 : i32 to i64
    %143 = arith.addi %142, %c32_i64_33 : i64
    %144 = llvm.getelementptr %17[%143] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %145 = llvm.load volatile %144 {alignment = 1 : i64} : !llvm.ptr -> i32
    %146 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_34 = arith.constant 0 : i64
    %147 = arith.extui %146 : i32 to i64
    %148 = arith.addi %147, %c0_i64_34 : i64
    %149 = llvm.getelementptr %17[%148] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %150 = llvm.load volatile %149 {alignment = 1 : i64} : !llvm.ptr -> i32
    %151 = llvm.load %7 : !llvm.ptr -> i32
    %152 = llvm.load %3 : !llvm.ptr -> i32
    %c36_i64_35 = arith.constant 36 : i64
    %153 = arith.extui %152 : i32 to i64
    %154 = arith.addi %153, %c36_i64_35 : i64
    %155 = llvm.getelementptr %17[%154] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %156 = llvm.load volatile %155 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_36 = arith.constant 12 : i64
    %157 = arith.extui %156 : i32 to i64
    %158 = arith.addi %157, %c12_i64_36 : i64
    %159 = llvm.getelementptr %17[%158] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %160 = llvm.load volatile %159 {alignment = 1 : i64} : !llvm.ptr -> i32
    %161 = arith.cmpi ult, %160, %23 : i32
    cf.cond_br %161, ^bb14, ^bb15
  ^bb14:  // 2 preds: ^bb13, ^bb15
    %162 = llvm.getelementptr %22[%160] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %163 = llvm.load %162 : !llvm.ptr -> !llvm.ptr
    %164 = llvm.load %163 : !llvm.ptr -> i32
    %c0_i32_37 = arith.constant 0 : i32
    %165 = arith.cmpi eq, %164, %c0_i32_37 : i32
    cf.cond_br %165, ^bb17, ^bb16
  ^bb15:  // pred: ^bb13
    %c3_i32_38 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_38) : (i32) -> ()
    cf.br ^bb14
  ^bb16:  // 2 preds: ^bb14, ^bb17
    %166 = llvm.getelementptr %163[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %167 = llvm.getelementptr %163[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %168 = llvm.getelementptr %163[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %169 = llvm.load %166 : !llvm.ptr -> !llvm.ptr
    %170 = llvm.load %168 : !llvm.ptr -> !llvm.ptr
    %171 = llvm.load %169 : !llvm.ptr -> i32
    %c0_i32_39 = arith.constant 0 : i32
    %172 = arith.cmpi eq, %171, %c0_i32_39 : i32
    cf.cond_br %172, ^bb19, ^bb18
  ^bb17:  // pred: ^bb14
    %c4_i32_40 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_40) : (i32) -> ()
    cf.br ^bb16
  ^bb18:  // 2 preds: ^bb16, ^bb19
    %173 = llvm.load %167 : !llvm.ptr -> i32
    %174 = arith.cmpi ne, %19, %173 : i32
    cf.cond_br %174, ^bb21, ^bb20
  ^bb19:  // pred: ^bb16
    %c3_i32_41 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_41) : (i32) -> ()
    cf.br ^bb18
  ^bb20:  // 2 preds: ^bb18, ^bb21
    %175 = llvm.call %169(%170, %145, %150, %151) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_42 = arith.constant 0 : i32
    %176 = arith.cmpi ne, %175, %c0_i32_42 : i32
    cf.cond_br %176, ^bb5, ^bb22
  ^bb21:  // pred: ^bb18
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb20
  ^bb22:  // pred: ^bb20
    cf.br ^bb12
  ^bb23:  // 2 preds: ^bb12, ^bb24
    %177 = llvm.getelementptr %26[%139] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %178 = llvm.load %177 : !llvm.ptr -> !llvm.ptr
    %179 = llvm.load %178 : !llvm.ptr -> i32
    %c0_i32_43 = arith.constant 0 : i32
    %180 = arith.cmpi eq, %179, %c0_i32_43 : i32
    cf.cond_br %180, ^bb26, ^bb25
  ^bb24:  // pred: ^bb12
    %c3_i32_44 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_44) : (i32) -> ()
    cf.br ^bb23
  ^bb25:  // 2 preds: ^bb23, ^bb26
    %181 = llvm.getelementptr %178[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %182 = llvm.getelementptr %178[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %183 = llvm.getelementptr %178[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %184 = llvm.load %181 : !llvm.ptr -> !llvm.ptr
    %185 = llvm.load %183 : !llvm.ptr -> !llvm.ptr
    %186 = llvm.load %184 : !llvm.ptr -> i32
    %c0_i32_45 = arith.constant 0 : i32
    %187 = arith.cmpi eq, %186, %c0_i32_45 : i32
    cf.cond_br %187, ^bb28, ^bb27
  ^bb26:  // pred: ^bb23
    %c4_i32_46 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_46) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // 2 preds: ^bb25, ^bb28
    %188 = llvm.load %182 : !llvm.ptr -> i32
    %189 = arith.cmpi ne, %25, %188 : i32
    cf.cond_br %189, ^bb30, ^bb29
  ^bb28:  // pred: ^bb25
    %c3_i32_47 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_47) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // 2 preds: ^bb27, ^bb30
    %190 = llvm.call %184(%185, %132, %134) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_48 = arith.constant 0 : i32
    %191 = arith.cmpi ne, %190, %c0_i32_48 : i32
    cf.cond_br %191, ^bb5, ^bb31
  ^bb30:  // pred: ^bb27
    %c5_i32_49 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_49) : (i32) -> ()
    cf.br ^bb29
  ^bb31:  // pred: ^bb29
    %192 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %193 = arith.addi %192, %c8_i32 : i32
    llvm.store %193, %1 : i32, !llvm.ptr
    %194 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_50 = arith.constant 8 : i32
    %195 = arith.addi %194, %c8_i32_50 : i32
    llvm.store %195, %0 : i32, !llvm.ptr
    %196 = llvm.load %6 : !llvm.ptr -> i32
    %c-8_i32 = arith.constant -8 : i32
    %197 = arith.addi %196, %c-8_i32 : i32
    llvm.store %197, %6 : i32, !llvm.ptr
    %c0_i32_51 = arith.constant 0 : i32
    %198 = arith.cmpi ne, %197, %c0_i32_51 : i32
    cf.cond_br %198, ^bb11, ^bb32
  ^bb32:  // pred: ^bb31
    cf.br ^bb6
  ^bb33:  // pred: ^bb7
    %199 = llvm.load %1 : !llvm.ptr -> i32
    %c5_i32_52 = arith.constant 5 : i32
    %c31_i32_53 = arith.constant 31 : i32
    %200 = arith.cmpi ule, %c5_i32_52, %c31_i32_53 : i32
    %201 = scf.if %200 -> (i32) {
      %467 = arith.shli %199, %c5_i32_52 : i32
      scf.yield %467 : i32
    } else {
      %c0_i32_138 = arith.constant 0 : i32
      scf.yield %c0_i32_138 : i32
    }
    llvm.store %201, %8 : i32, !llvm.ptr
    %202 = llvm.load %1 : !llvm.ptr -> i32
    %c-1_i32_54 = arith.constant -1 : i32
    %203 = arith.addi %202, %c-1_i32_54 : i32
    %c134217727_i32 = arith.constant 134217727 : i32
    %204 = arith.andi %203, %c134217727_i32 : i32
    %c1_i32_55 = arith.constant 1 : i32
    %205 = arith.addi %204, %c1_i32_55 : i32
    llvm.store %205, %4 : i32, !llvm.ptr
    %206 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_56 = arith.constant 8 : i64
    %207 = arith.extui %206 : i32 to i64
    %208 = arith.addi %207, %c8_i64_56 : i64
    %209 = llvm.getelementptr %17[%208] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %210 = llvm.load volatile %209 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %210, %9 : i32, !llvm.ptr
    %211 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_57 = arith.constant 0 : i64
    %212 = arith.extui %211 : i32 to i64
    %213 = arith.addi %212, %c0_i64_57 : i64
    %214 = llvm.getelementptr %17[%213] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %215 = llvm.load volatile %214 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %215, %0 : i32, !llvm.ptr
    %c0_i32_58 = arith.constant 0 : i32
    llvm.store %c0_i32_58, %6 : i32, !llvm.ptr
    cf.br ^bb35
  ^bb34:  // pred: ^bb64
    cf.br ^bb6
  ^bb35:  // 2 preds: ^bb33, ^bb63
    %216 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32_59 = arith.constant 4 : i32
    %217 = arith.addi %216, %c4_i32_59 : i32
    %c0_i64_60 = arith.constant 0 : i64
    %218 = arith.extui %217 : i32 to i64
    %219 = arith.addi %218, %c0_i64_60 : i64
    %220 = llvm.getelementptr %17[%219] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %221 = llvm.load volatile %220 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %221, %1 : i32, !llvm.ptr
    %c0_i32_61 = arith.constant 0 : i32
    %222 = arith.cmpi eq, %221, %c0_i32_61 : i32
    %223 = arith.extui %222 : i1 to i32
    %c0_i32_62 = arith.constant 0 : i32
    %224 = arith.cmpi ne, %223, %c0_i32_62 : i32
    cf.cond_br %224, ^bb36, ^bb37
  ^bb36:  // 2 preds: ^bb35, ^bb46
    %225 = llvm.load %3 : !llvm.ptr -> i32
    %226 = llvm.load %5 : !llvm.ptr -> i32
    %227 = llvm.load %6 : !llvm.ptr -> i32
    %228 = arith.addi %226, %227 : i32
    llvm.store %228, %1 : i32, !llvm.ptr
    %c16_i32 = arith.constant 16 : i32
    %229 = arith.addi %228, %c16_i32 : i32
    %c0_i64_63 = arith.constant 0 : i64
    %230 = arith.extui %229 : i32 to i64
    %231 = arith.addi %230, %c0_i64_63 : i64
    %232 = llvm.getelementptr %17[%231] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %233 = llvm.load volatile %232 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c28_i64_64 = arith.constant 28 : i64
    %234 = arith.extui %225 : i32 to i64
    %235 = arith.addi %234, %c28_i64_64 : i64
    %236 = llvm.getelementptr %17[%235] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %233, %236 {alignment = 1 : i64} : i32, !llvm.ptr
    %237 = llvm.load %3 : !llvm.ptr -> i32
    %238 = llvm.load %1 : !llvm.ptr -> i32
    %c28_i32 = arith.constant 28 : i32
    %239 = arith.addi %238, %c28_i32 : i32
    %c0_i64_65 = arith.constant 0 : i64
    %240 = arith.extui %239 : i32 to i64
    %241 = arith.addi %240, %c0_i64_65 : i64
    %242 = llvm.getelementptr %17[%241] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %243 = llvm.load volatile %242 {alignment = 1 : i64} : !llvm.ptr -> i8
    %244 = arith.extui %243 : i8 to i32
    %c44_i64_66 = arith.constant 44 : i64
    %245 = arith.extui %237 : i32 to i64
    %246 = arith.addi %245, %c44_i64_66 : i64
    %247 = llvm.getelementptr %17[%246] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %248 = arith.trunci %244 : i32 to i8
    llvm.store volatile %248, %247 {alignment = 1 : i64} : i8, !llvm.ptr
    %249 = llvm.load %3 : !llvm.ptr -> i32
    %250 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %251 = arith.addi %250, %c24_i32 : i32
    %c0_i64_67 = arith.constant 0 : i64
    %252 = arith.extui %251 : i32 to i64
    %253 = arith.addi %252, %c0_i64_67 : i64
    %254 = llvm.getelementptr %17[%253] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %255 = llvm.load volatile %254 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c40_i64_68 = arith.constant 40 : i64
    %256 = arith.extui %249 : i32 to i64
    %257 = arith.addi %256, %c40_i64_68 : i64
    %258 = llvm.getelementptr %17[%257] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %255, %258 {alignment = 1 : i64} : i32, !llvm.ptr
    %259 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32_69 = arith.constant 12 : i32
    %260 = arith.addi %259, %c12_i32_69 : i32
    %c0_i64_70 = arith.constant 0 : i64
    %261 = arith.extui %260 : i32 to i64
    %262 = arith.addi %261, %c0_i64_70 : i64
    %263 = llvm.getelementptr %17[%262] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %264 = llvm.load volatile %263 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %264, %7 : i32, !llvm.ptr
    %c0_i32_71 = arith.constant 0 : i32
    llvm.store %c0_i32_71, %10 : i32, !llvm.ptr
    %c0_i32_72 = arith.constant 0 : i32
    llvm.store %c0_i32_72, %11 : i32, !llvm.ptr
    %265 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_73 = arith.constant 8 : i32
    %266 = arith.addi %265, %c8_i32_73 : i32
    %c0_i64_74 = arith.constant 0 : i64
    %267 = arith.extui %266 : i32 to i64
    %268 = arith.addi %267, %c0_i64_74 : i64
    %269 = llvm.getelementptr %17[%268] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %270 = llvm.load volatile %269 {alignment = 1 : i64} : !llvm.ptr -> i32
    cf.switch %270 : i32, [
      default: ^bb48,
      0: ^bb48,
      1: ^bb49,
      2: ^bb47
    ]
  ^bb37:  // pred: ^bb35
    %271 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i64_75 = arith.constant 32 : i64
    %272 = arith.extui %271 : i32 to i64
    %273 = arith.addi %272, %c32_i64_75 : i64
    %274 = llvm.getelementptr %17[%273] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %275 = llvm.load volatile %274 {alignment = 1 : i64} : !llvm.ptr -> i32
    %276 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_76 = arith.constant 0 : i64
    %277 = arith.extui %276 : i32 to i64
    %278 = arith.addi %277, %c0_i64_76 : i64
    %279 = llvm.getelementptr %17[%278] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %280 = llvm.load volatile %279 {alignment = 1 : i64} : !llvm.ptr -> i32
    %281 = llvm.load %1 : !llvm.ptr -> i32
    %282 = llvm.load %3 : !llvm.ptr -> i32
    %c36_i64_77 = arith.constant 36 : i64
    %283 = arith.extui %282 : i32 to i64
    %284 = arith.addi %283, %c36_i64_77 : i64
    %285 = llvm.getelementptr %17[%284] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %286 = llvm.load volatile %285 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_78 = arith.constant 12 : i64
    %287 = arith.extui %286 : i32 to i64
    %288 = arith.addi %287, %c12_i64_78 : i64
    %289 = llvm.getelementptr %17[%288] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %290 = llvm.load volatile %289 {alignment = 1 : i64} : !llvm.ptr -> i32
    %291 = arith.cmpi ult, %290, %29 : i32
    cf.cond_br %291, ^bb38, ^bb39
  ^bb38:  // 2 preds: ^bb37, ^bb39
    %292 = llvm.getelementptr %28[%290] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %293 = llvm.load %292 : !llvm.ptr -> !llvm.ptr
    %294 = llvm.load %293 : !llvm.ptr -> i32
    %c0_i32_79 = arith.constant 0 : i32
    %295 = arith.cmpi eq, %294, %c0_i32_79 : i32
    cf.cond_br %295, ^bb41, ^bb40
  ^bb39:  // pred: ^bb37
    %c3_i32_80 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_80) : (i32) -> ()
    cf.br ^bb38
  ^bb40:  // 2 preds: ^bb38, ^bb41
    %296 = llvm.getelementptr %293[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %297 = llvm.getelementptr %293[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %298 = llvm.getelementptr %293[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %299 = llvm.load %296 : !llvm.ptr -> !llvm.ptr
    %300 = llvm.load %298 : !llvm.ptr -> !llvm.ptr
    %301 = llvm.load %299 : !llvm.ptr -> i32
    %c0_i32_81 = arith.constant 0 : i32
    %302 = arith.cmpi eq, %301, %c0_i32_81 : i32
    cf.cond_br %302, ^bb43, ^bb42
  ^bb41:  // pred: ^bb38
    %c4_i32_82 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_82) : (i32) -> ()
    cf.br ^bb40
  ^bb42:  // 2 preds: ^bb40, ^bb43
    %303 = llvm.load %297 : !llvm.ptr -> i32
    %304 = arith.cmpi ne, %19, %303 : i32
    cf.cond_br %304, ^bb45, ^bb44
  ^bb43:  // pred: ^bb40
    %c3_i32_83 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_83) : (i32) -> ()
    cf.br ^bb42
  ^bb44:  // 2 preds: ^bb42, ^bb45
    %305 = llvm.call %299(%300, %275, %280, %281) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_84 = arith.constant 0 : i32
    %306 = arith.cmpi ne, %305, %c0_i32_84 : i32
    cf.cond_br %306, ^bb5, ^bb46
  ^bb45:  // pred: ^bb42
    %c5_i32_85 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_85) : (i32) -> ()
    cf.br ^bb44
  ^bb46:  // pred: ^bb44
    cf.br ^bb36
  ^bb47:  // 3 preds: ^bb36, ^bb48, ^bb49
    %307 = llvm.load %3 : !llvm.ptr -> i32
    %308 = llvm.load %7 : !llvm.ptr -> i32
    %c16_i64_86 = arith.constant 16 : i64
    %309 = arith.extui %307 : i32 to i64
    %310 = arith.addi %309, %c16_i64_86 : i64
    %311 = llvm.getelementptr %17[%310] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %308, %311 {alignment = 1 : i64} : i32, !llvm.ptr
    %312 = llvm.load %3 : !llvm.ptr -> i32
    %313 = llvm.load %11 : !llvm.ptr -> i32
    %c12_i64_87 = arith.constant 12 : i64
    %314 = arith.extui %312 : i32 to i64
    %315 = arith.addi %314, %c12_i64_87 : i64
    %316 = llvm.getelementptr %17[%315] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %313, %316 {alignment = 1 : i64} : i32, !llvm.ptr
    %317 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32_88 = arith.constant 4 : i32
    %318 = arith.addi %317, %c4_i32_88 : i32
    %c0_i64_89 = arith.constant 0 : i64
    %319 = arith.extui %318 : i32 to i64
    %320 = arith.addi %319, %c0_i64_89 : i64
    %321 = llvm.getelementptr %17[%320] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %322 = llvm.load volatile %321 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %322, %7 : i32, !llvm.ptr
    %323 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_90 = arith.constant 0 : i64
    %324 = arith.extui %323 : i32 to i64
    %325 = arith.addi %324, %c0_i64_90 : i64
    %326 = llvm.getelementptr %17[%325] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %327 = llvm.load volatile %326 {alignment = 1 : i64} : !llvm.ptr -> i32
    cf.switch %327 : i32, [
      default: ^bb52,
      0: ^bb52,
      1: ^bb53,
      2: ^bb51
    ]
  ^bb48:  // 3 preds: ^bb36, ^bb36, ^bb50
    %c1_i32_91 = arith.constant 1 : i32
    llvm.store %c1_i32_91, %11 : i32, !llvm.ptr
    cf.br ^bb47
  ^bb49:  // pred: ^bb36
    %328 = llvm.load %7 : !llvm.ptr -> i32
    %c3_i32_92 = arith.constant 3 : i32
    %c31_i32_93 = arith.constant 31 : i32
    %329 = arith.cmpi ule, %c3_i32_92, %c31_i32_93 : i32
    %330 = scf.if %329 -> (i32) {
      %467 = arith.shli %328, %c3_i32_92 : i32
      scf.yield %467 : i32
    } else {
      %c0_i32_138 = arith.constant 0 : i32
      scf.yield %c0_i32_138 : i32
    }
    llvm.store %330, %12 : i32, !llvm.ptr
    %c0_i32_94 = arith.constant 0 : i32
    llvm.store %c0_i32_94, %11 : i32, !llvm.ptr
    %331 = llvm.load %9 : !llvm.ptr -> i32
    %332 = llvm.load %12 : !llvm.ptr -> i32
    %333 = arith.addi %331, %332 : i32
    llvm.store %333, %12 : i32, !llvm.ptr
    %c4_i64_95 = arith.constant 4 : i64
    %334 = arith.extui %333 : i32 to i64
    %335 = arith.addi %334, %c4_i64_95 : i64
    %336 = llvm.getelementptr %17[%335] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %337 = llvm.load volatile %336 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_96 = arith.constant 0 : i32
    %338 = arith.cmpi ne, %337, %c0_i32_96 : i32
    cf.cond_br %338, ^bb47, ^bb50
  ^bb50:  // pred: ^bb49
    %339 = llvm.load %12 : !llvm.ptr -> i32
    %c0_i64_97 = arith.constant 0 : i64
    %340 = arith.extui %339 : i32 to i64
    %341 = arith.addi %340, %c0_i64_97 : i64
    %342 = llvm.getelementptr %17[%341] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %343 = llvm.load volatile %342 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %343, %7 : i32, !llvm.ptr
    cf.br ^bb48
  ^bb51:  // 3 preds: ^bb47, ^bb52, ^bb53
    %344 = llvm.load %3 : !llvm.ptr -> i32
    %345 = llvm.load %7 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %346 = arith.extui %344 : i32 to i64
    %347 = arith.addi %346, %c24_i64 : i64
    %348 = llvm.getelementptr %17[%347] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %345, %348 {alignment = 1 : i64} : i32, !llvm.ptr
    %349 = llvm.load %3 : !llvm.ptr -> i32
    %350 = llvm.load %10 : !llvm.ptr -> i32
    %c20_i64_98 = arith.constant 20 : i64
    %351 = arith.extui %349 : i32 to i64
    %352 = arith.addi %351, %c20_i64_98 : i64
    %353 = llvm.getelementptr %17[%352] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %350, %353 {alignment = 1 : i64} : i32, !llvm.ptr
    %354 = llvm.load %9 : !llvm.ptr -> i32
    %355 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i32 = arith.constant 20 : i32
    %356 = arith.addi %355, %c20_i32 : i32
    %c0_i64_99 = arith.constant 0 : i64
    %357 = arith.extui %356 : i32 to i64
    %358 = arith.addi %357, %c0_i64_99 : i64
    %359 = llvm.getelementptr %17[%358] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %360 = llvm.load volatile %359 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i32_100 = arith.constant 3 : i32
    %c31_i32_101 = arith.constant 31 : i32
    %361 = arith.cmpi ule, %c3_i32_100, %c31_i32_101 : i32
    %362 = scf.if %361 -> (i32) {
      %467 = arith.shli %360, %c3_i32_100 : i32
      scf.yield %467 : i32
    } else {
      %c0_i32_138 = arith.constant 0 : i32
      scf.yield %c0_i32_138 : i32
    }
    %363 = arith.addi %354, %362 : i32
    llvm.store %363, %1 : i32, !llvm.ptr
    %c0_i64_102 = arith.constant 0 : i64
    %364 = arith.extui %363 : i32 to i64
    %365 = arith.addi %364, %c0_i64_102 : i64
    %366 = llvm.getelementptr %17[%365] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %367 = llvm.load volatile %366 {alignment = 1 : i64} : !llvm.ptr -> i32
    %368 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i32_103 = arith.constant 12 : i32
    %369 = arith.addi %368, %c12_i32_103 : i32
    %370 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_104 = arith.constant 4 : i64
    %371 = arith.extui %370 : i32 to i64
    %372 = arith.addi %371, %c4_i64_104 : i64
    %373 = llvm.getelementptr %17[%372] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %374 = llvm.load volatile %373 {alignment = 1 : i64} : !llvm.ptr -> i32
    %375 = arith.cmpi ult, %374, %31 : i32
    cf.cond_br %375, ^bb55, ^bb56
  ^bb52:  // 3 preds: ^bb47, ^bb47, ^bb54
    %c1_i32_105 = arith.constant 1 : i32
    llvm.store %c1_i32_105, %10 : i32, !llvm.ptr
    cf.br ^bb51
  ^bb53:  // pred: ^bb47
    %376 = llvm.load %7 : !llvm.ptr -> i32
    %c3_i32_106 = arith.constant 3 : i32
    %c31_i32_107 = arith.constant 31 : i32
    %377 = arith.cmpi ule, %c3_i32_106, %c31_i32_107 : i32
    %378 = scf.if %377 -> (i32) {
      %467 = arith.shli %376, %c3_i32_106 : i32
      scf.yield %467 : i32
    } else {
      %c0_i32_138 = arith.constant 0 : i32
      scf.yield %c0_i32_138 : i32
    }
    llvm.store %378, %11 : i32, !llvm.ptr
    %379 = llvm.load %9 : !llvm.ptr -> i32
    %380 = llvm.load %11 : !llvm.ptr -> i32
    %381 = arith.addi %379, %380 : i32
    llvm.store %381, %11 : i32, !llvm.ptr
    %c4_i64_108 = arith.constant 4 : i64
    %382 = arith.extui %381 : i32 to i64
    %383 = arith.addi %382, %c4_i64_108 : i64
    %384 = llvm.getelementptr %17[%383] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %385 = llvm.load volatile %384 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_109 = arith.constant 0 : i32
    %386 = arith.cmpi ne, %385, %c0_i32_109 : i32
    cf.cond_br %386, ^bb51, ^bb54
  ^bb54:  // pred: ^bb53
    %387 = llvm.load %11 : !llvm.ptr -> i32
    %c0_i64_110 = arith.constant 0 : i64
    %388 = arith.extui %387 : i32 to i64
    %389 = arith.addi %388, %c0_i64_110 : i64
    %390 = llvm.getelementptr %17[%389] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %391 = llvm.load volatile %390 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %391, %7 : i32, !llvm.ptr
    cf.br ^bb52
  ^bb55:  // 2 preds: ^bb51, ^bb56
    %392 = llvm.getelementptr %30[%374] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %393 = llvm.load %392 : !llvm.ptr -> !llvm.ptr
    %394 = llvm.load %393 : !llvm.ptr -> i32
    %c0_i32_111 = arith.constant 0 : i32
    %395 = arith.cmpi eq, %394, %c0_i32_111 : i32
    cf.cond_br %395, ^bb58, ^bb57
  ^bb56:  // pred: ^bb51
    %c3_i32_112 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_112) : (i32) -> ()
    cf.br ^bb55
  ^bb57:  // 2 preds: ^bb55, ^bb58
    %396 = llvm.getelementptr %393[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %397 = llvm.getelementptr %393[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %398 = llvm.getelementptr %393[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %399 = llvm.load %396 : !llvm.ptr -> !llvm.ptr
    %400 = llvm.load %398 : !llvm.ptr -> !llvm.ptr
    %401 = llvm.load %399 : !llvm.ptr -> i32
    %c0_i32_113 = arith.constant 0 : i32
    %402 = arith.cmpi eq, %401, %c0_i32_113 : i32
    cf.cond_br %402, ^bb60, ^bb59
  ^bb58:  // pred: ^bb55
    %c4_i32_114 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_114) : (i32) -> ()
    cf.br ^bb57
  ^bb59:  // 2 preds: ^bb57, ^bb60
    %403 = llvm.load %397 : !llvm.ptr -> i32
    %404 = arith.cmpi ne, %25, %403 : i32
    cf.cond_br %404, ^bb62, ^bb61
  ^bb60:  // pred: ^bb57
    %c3_i32_115 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_115) : (i32) -> ()
    cf.br ^bb59
  ^bb61:  // 2 preds: ^bb59, ^bb62
    %405 = llvm.call %399(%400, %367, %369) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_116 = arith.constant 0 : i32
    %406 = arith.cmpi ne, %405, %c0_i32_116 : i32
    cf.cond_br %406, ^bb5, ^bb63
  ^bb62:  // pred: ^bb59
    %c5_i32_117 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_117) : (i32) -> ()
    cf.br ^bb61
  ^bb63:  // pred: ^bb61
    %407 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_118 = arith.constant 8 : i32
    %408 = arith.addi %407, %c8_i32_118 : i32
    llvm.store %408, %0 : i32, !llvm.ptr
    %409 = llvm.load %8 : !llvm.ptr -> i32
    %410 = llvm.load %6 : !llvm.ptr -> i32
    %c32_i32_119 = arith.constant 32 : i32
    %411 = arith.addi %410, %c32_i32_119 : i32
    llvm.store %411, %6 : i32, !llvm.ptr
    %412 = arith.cmpi eq, %409, %411 : i32
    %413 = arith.extui %412 : i1 to i32
    %c0_i32_120 = arith.constant 0 : i32
    %414 = arith.cmpi eq, %413, %c0_i32_120 : i32
    %415 = arith.extui %414 : i1 to i32
    %c0_i32_121 = arith.constant 0 : i32
    %416 = arith.cmpi ne, %415, %c0_i32_121 : i32
    cf.cond_br %416, ^bb35, ^bb64
  ^bb64:  // pred: ^bb63
    cf.br ^bb34
  ^bb65:  // pred: ^bb6
    %417 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i64_122 = arith.constant 32 : i64
    %418 = arith.extui %417 : i32 to i64
    %419 = arith.addi %418, %c32_i64_122 : i64
    %420 = llvm.getelementptr %17[%419] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %421 = llvm.load volatile %420 {alignment = 1 : i64} : !llvm.ptr -> i32
    %422 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_123 = arith.constant 0 : i64
    %423 = arith.extui %422 : i32 to i64
    %424 = arith.addi %423, %c0_i64_123 : i64
    %425 = llvm.getelementptr %17[%424] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %426 = llvm.load volatile %425 {alignment = 1 : i64} : !llvm.ptr -> i32
    %427 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i32_124 = arith.constant 3 : i32
    %c31_i32_125 = arith.constant 31 : i32
    %428 = arith.cmpi ule, %c3_i32_124, %c31_i32_125 : i32
    %429 = scf.if %428 -> (i32) {
      %467 = arith.shli %427, %c3_i32_124 : i32
      scf.yield %467 : i32
    } else {
      %c0_i32_138 = arith.constant 0 : i32
      scf.yield %c0_i32_138 : i32
    }
    %430 = arith.addi %426, %429 : i32
    llvm.store %430, %1 : i32, !llvm.ptr
    %c0_i64_126 = arith.constant 0 : i64
    %431 = arith.extui %430 : i32 to i64
    %432 = arith.addi %431, %c0_i64_126 : i64
    %433 = llvm.getelementptr %17[%432] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %434 = llvm.load volatile %433 {alignment = 1 : i64} : !llvm.ptr -> i32
    %435 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_127 = arith.constant 4 : i64
    %436 = arith.extui %435 : i32 to i64
    %437 = arith.addi %436, %c4_i64_127 : i64
    %438 = llvm.getelementptr %17[%437] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %439 = llvm.load volatile %438 {alignment = 1 : i64} : !llvm.ptr -> i32
    %440 = llvm.load %3 : !llvm.ptr -> i32
    %c36_i64_128 = arith.constant 36 : i64
    %441 = arith.extui %440 : i32 to i64
    %442 = arith.addi %441, %c36_i64_128 : i64
    %443 = llvm.getelementptr %17[%442] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %444 = llvm.load volatile %443 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_129 = arith.constant 12 : i64
    %445 = arith.extui %444 : i32 to i64
    %446 = arith.addi %445, %c12_i64_129 : i64
    %447 = llvm.getelementptr %17[%446] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %448 = llvm.load volatile %447 {alignment = 1 : i64} : !llvm.ptr -> i32
    %449 = arith.cmpi ult, %448, %33 : i32
    cf.cond_br %449, ^bb66, ^bb67
  ^bb66:  // 2 preds: ^bb65, ^bb67
    %450 = llvm.getelementptr %32[%448] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %451 = llvm.load %450 : !llvm.ptr -> !llvm.ptr
    %452 = llvm.load %451 : !llvm.ptr -> i32
    %c0_i32_130 = arith.constant 0 : i32
    %453 = arith.cmpi eq, %452, %c0_i32_130 : i32
    cf.cond_br %453, ^bb69, ^bb68
  ^bb67:  // pred: ^bb65
    %c3_i32_131 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_131) : (i32) -> ()
    cf.br ^bb66
  ^bb68:  // 2 preds: ^bb66, ^bb69
    %454 = llvm.getelementptr %451[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %455 = llvm.getelementptr %451[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %456 = llvm.getelementptr %451[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %457 = llvm.load %454 : !llvm.ptr -> !llvm.ptr
    %458 = llvm.load %456 : !llvm.ptr -> !llvm.ptr
    %459 = llvm.load %457 : !llvm.ptr -> i32
    %c0_i32_132 = arith.constant 0 : i32
    %460 = arith.cmpi eq, %459, %c0_i32_132 : i32
    cf.cond_br %460, ^bb71, ^bb70
  ^bb69:  // pred: ^bb66
    %c4_i32_133 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_133) : (i32) -> ()
    cf.br ^bb68
  ^bb70:  // 2 preds: ^bb68, ^bb71
    %461 = llvm.load %455 : !llvm.ptr -> i32
    %462 = arith.cmpi ne, %19, %461 : i32
    cf.cond_br %462, ^bb73, ^bb72
  ^bb71:  // pred: ^bb68
    %c3_i32_134 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_134) : (i32) -> ()
    cf.br ^bb70
  ^bb72:  // 2 preds: ^bb70, ^bb73
    %463 = llvm.call %457(%458, %421, %434, %439) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_135 = arith.constant 0 : i32
    %464 = arith.cmpi eq, %463, %c0_i32_135 : i32
    %465 = arith.extui %464 : i1 to i32
    %c0_i32_136 = arith.constant 0 : i32
    %466 = arith.cmpi ne, %465, %c0_i32_136 : i32
    cf.cond_br %466, ^bb4, ^bb74
  ^bb73:  // pred: ^bb70
    %c5_i32_137 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_137) : (i32) -> ()
    cf.br ^bb72
  ^bb74:  // pred: ^bb72
    cf.br ^bb5
  }
  func.func @f76(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_4 = arith.constant 1 : i64
    %5 = llvm.alloca %c1_i64_4 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %11 = llvm.load %7 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %12 = arith.subi %11, %c64_i32 : i32
    llvm.store %12, %5 : i32, !llvm.ptr
    llvm.store %12, %7 : i32, !llvm.ptr
    %13 = llvm.load %5 : !llvm.ptr -> i32
    %14 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %15 = arith.extui %13 : i32 to i64
    %16 = arith.addi %15, %c12_i64 : i64
    %17 = llvm.getelementptr %10[%16] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %14, %17 {alignment = 1 : i64} : i32, !llvm.ptr
    %18 = llvm.load %5 : !llvm.ptr -> i32
    %19 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %20 = arith.extui %18 : i32 to i64
    %21 = arith.addi %20, %c8_i64 : i64
    %22 = llvm.getelementptr %10[%21] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %19, %22 {alignment = 1 : i64} : i32, !llvm.ptr
    %23 = llvm.load %5 : !llvm.ptr -> i32
    %24 = llvm.load %3 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %25 = arith.extui %23 : i32 to i64
    %26 = arith.addi %25, %c20_i64 : i64
    %27 = llvm.getelementptr %10[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %24, %27 {alignment = 1 : i64} : i32, !llvm.ptr
    %28 = llvm.load %5 : !llvm.ptr -> i32
    %29 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %30 = arith.extui %28 : i32 to i64
    %31 = arith.addi %30, %c16_i64 : i64
    %32 = llvm.getelementptr %10[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %29, %32 {alignment = 1 : i64} : i32, !llvm.ptr
    %33 = llvm.load %5 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c28_i64 = arith.constant 28 : i64
    %34 = arith.extui %33 : i32 to i64
    %35 = arith.addi %34, %c28_i64 : i64
    %36 = llvm.getelementptr %10[%35] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i32, %36 {alignment = 1 : i64} : i32, !llvm.ptr
    %37 = llvm.load %5 : !llvm.ptr -> i32
    %c1049320_i32 = arith.constant 1049320 : i32
    %c24_i64 = arith.constant 24 : i64
    %38 = arith.extui %37 : i32 to i64
    %39 = arith.addi %38, %c24_i64 : i64
    %40 = llvm.getelementptr %10[%39] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049320_i32, %40 {alignment = 1 : i64} : i32, !llvm.ptr
    %41 = llvm.load %5 : !llvm.ptr -> i32
    %c2_i64 = arith.constant 2 : i64
    %c36_i64 = arith.constant 36 : i64
    %42 = arith.extui %41 : i32 to i64
    %43 = arith.addi %42, %c36_i64 : i64
    %44 = llvm.getelementptr %10[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i64, %44 {alignment = 1 : i64} : i64, !llvm.ptr
    %45 = llvm.load %5 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %46 = arith.extui %c24_i32 : i32 to i64
    %c32_i64 = arith.constant 32 : i64
    %c63_i64 = arith.constant 63 : i64
    %47 = arith.cmpi ule, %c32_i64, %c63_i64 : i64
    %48 = scf.if %47 -> (i64) {
      %76 = arith.shli %46, %c32_i64 : i64
      scf.yield %76 : i64
    } else {
      %c0_i64 = arith.constant 0 : i64
      scf.yield %c0_i64 : i64
    }
    %49 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %50 = arith.addi %49, %c16_i32 : i32
    %51 = arith.extui %50 : i32 to i64
    %52 = arith.ori %48, %51 : i64
    %c56_i64 = arith.constant 56 : i64
    %53 = arith.extui %45 : i32 to i64
    %54 = arith.addi %53, %c56_i64 : i64
    %55 = llvm.getelementptr %10[%54] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %52, %55 {alignment = 1 : i64} : i64, !llvm.ptr
    %56 = llvm.load %5 : !llvm.ptr -> i32
    %c25_i32 = arith.constant 25 : i32
    %57 = arith.extui %c25_i32 : i32 to i64
    %c32_i64_5 = arith.constant 32 : i64
    %c63_i64_6 = arith.constant 63 : i64
    %58 = arith.cmpi ule, %c32_i64_5, %c63_i64_6 : i64
    %59 = scf.if %58 -> (i64) {
      %76 = arith.shli %57, %c32_i64_5 : i64
      scf.yield %76 : i64
    } else {
      %c0_i64 = arith.constant 0 : i64
      scf.yield %c0_i64 : i64
    }
    %60 = llvm.load %5 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %61 = arith.addi %60, %c8_i32 : i32
    %62 = arith.extui %61 : i32 to i64
    %63 = arith.ori %59, %62 : i64
    %c48_i64 = arith.constant 48 : i64
    %64 = arith.extui %56 : i32 to i64
    %65 = arith.addi %64, %c48_i64 : i64
    %66 = llvm.getelementptr %10[%65] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %63, %66 {alignment = 1 : i64} : i64, !llvm.ptr
    %67 = llvm.load %5 : !llvm.ptr -> i32
    %68 = llvm.load %5 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %69 = arith.addi %68, %c48_i32 : i32
    %c32_i64_7 = arith.constant 32 : i64
    %70 = arith.extui %67 : i32 to i64
    %71 = arith.addi %70, %c32_i64_7 : i64
    %72 = llvm.getelementptr %10[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %69, %72 {alignment = 1 : i64} : i32, !llvm.ptr
    %73 = llvm.load %5 : !llvm.ptr -> i32
    %c24_i32_8 = arith.constant 24 : i32
    %74 = arith.addi %73, %c24_i32_8 : i32
    %75 = llvm.load %4 : !llvm.ptr -> i32
    call @f70(%arg0, %74, %75) : (!llvm.ptr, i32, i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f77(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %1 : !llvm.ptr -> i32
    %6 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %7 = arith.extui %6 : i32 to i64
    %8 = arith.addi %7, %c0_i64 : i64
    %9 = llvm.getelementptr %4[%8] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %10 = llvm.load volatile %9 {alignment = 1 : i64} : !llvm.ptr -> i32
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %12 = arith.extui %11 : i32 to i64
    %13 = arith.addi %12, %c4_i64 : i64
    %14 = llvm.getelementptr %4[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %15 = llvm.load volatile %14 {alignment = 1 : i64} : !llvm.ptr -> i32
    %16 = call @f72(%arg0, %5, %10, %15) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%16 : i32)
  ^bb2(%17: i32):  // pred: ^bb1
    return %17 : i32
  }
  func.func @f78(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> i32
    %7 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.load %8 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %12 = arith.extui %11 : i32 to i64
    %13 = arith.addi %12, %c0_i64 : i64
    %14 = llvm.getelementptr %4[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %15 = llvm.load volatile %14 {alignment = 1 : i64} : !llvm.ptr -> i32
    %16 = llvm.load %1 : !llvm.ptr -> i32
    %17 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %18 = arith.extui %17 : i32 to i64
    %19 = arith.addi %18, %c4_i64 : i64
    %20 = llvm.getelementptr %4[%19] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %21 = llvm.load volatile %20 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %22 = arith.extui %21 : i32 to i64
    %23 = arith.addi %22, %c12_i64 : i64
    %24 = llvm.getelementptr %4[%23] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %25 = llvm.load volatile %24 {alignment = 1 : i64} : !llvm.ptr -> i32
    %26 = arith.cmpi ult, %25, %10 : i32
    cf.cond_br %26, ^bb3, ^bb4
  ^bb2(%27: i32):  // pred: ^bb9
    return %27 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %28 = llvm.getelementptr %9[%25] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %29 = llvm.load %28 : !llvm.ptr -> !llvm.ptr
    %30 = llvm.load %29 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %31 = arith.cmpi eq, %30, %c0_i32 : i32
    cf.cond_br %31, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %32 = llvm.getelementptr %29[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %33 = llvm.getelementptr %29[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %34 = llvm.getelementptr %29[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %35 = llvm.load %32 : !llvm.ptr -> !llvm.ptr
    %36 = llvm.load %34 : !llvm.ptr -> !llvm.ptr
    %37 = llvm.load %35 : !llvm.ptr -> i32
    %c0_i32_1 = arith.constant 0 : i32
    %38 = arith.cmpi eq, %37, %c0_i32_1 : i32
    cf.cond_br %38, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %39 = llvm.load %33 : !llvm.ptr -> i32
    %40 = arith.cmpi ne, %6, %39 : i32
    cf.cond_br %40, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_2 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_2) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %41 = llvm.call %35(%36, %15, %16) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    cf.br ^bb2(%41 : i32)
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func @f79(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c1_i64_4 = arith.constant 1 : i64
    %5 = llvm.alloca %c1_i64_4 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg6, %5 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_5 = arith.constant 1 : i64
    %6 = llvm.alloca %c1_i64_5 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i64_6 = arith.constant 1 : i64
    %7 = llvm.alloca %c1_i64_6 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i64_7 = arith.constant 1 : i64
    %8 = llvm.alloca %c1_i64_7 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i64_8 = arith.constant 1 : i64
    %9 = llvm.alloca %c1_i64_8 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %c1_i64_9 = arith.constant 1 : i64
    %10 = llvm.alloca %c1_i64_9 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %10 : i32, !llvm.ptr
    %c1_i64_10 = arith.constant 1 : i64
    %11 = llvm.alloca %c1_i64_10 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %11 : i32, !llvm.ptr
    %c1_i64_11 = arith.constant 1 : i64
    %12 = llvm.alloca %c1_i64_11 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %12 : i32, !llvm.ptr
    %13 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %13[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %16 = llvm.getelementptr %arg0[4] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %16 : !llvm.ptr -> i32
    %18 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %19 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %20 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %21 = llvm.load %19 : !llvm.ptr -> i32
    %22 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %23 = llvm.load %19 : !llvm.ptr -> i32
    %24 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %25 = llvm.load %24 : !llvm.ptr -> i32
    %26 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %27 = llvm.load %19 : !llvm.ptr -> i32
    %28 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %29 = llvm.load %19 : !llvm.ptr -> i32
    %30 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %31 = llvm.load %19 : !llvm.ptr -> i32
    %32 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %33 = llvm.load %19 : !llvm.ptr -> i32
    %34 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %35 = llvm.load %19 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %36 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_12 = arith.constant 0 : i32
    %37 = arith.cmpi ne, %36, %c0_i32_12 : i32
    cf.cond_br %37, ^bb4, ^bb5
  ^bb2(%38: i32):  // 7 preds: ^bb24, ^bb34, ^bb45, ^bb51, ^bb76, ^bb98, ^bb101
    return %38 : i32
  ^bb3:  // 2 preds: ^bb4, ^bb5
    %39 = llvm.load %7 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %40 = arith.andi %39, %c4_i32 : i32
    %c0_i32_13 = arith.constant 0 : i32
    %41 = arith.cmpi ne, %40, %c0_i32_13 : i32
    cf.cond_br %41, ^bb7, ^bb8
  ^bb4:  // pred: ^bb1
    %c43_i32 = arith.constant 43 : i32
    %c1114112_i32 = arith.constant 1114112 : i32
    %42 = llvm.load %0 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %43 = arith.extui %42 : i32 to i64
    %44 = arith.addi %43, %c28_i64 : i64
    %45 = llvm.getelementptr %15[%44] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %46 = llvm.load volatile %45 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %46, %7 : i32, !llvm.ptr
    %c1_i32 = arith.constant 1 : i32
    %47 = arith.andi %46, %c1_i32 : i32
    llvm.store %47, %1 : i32, !llvm.ptr
    %c0_i32_14 = arith.constant 0 : i32
    %48 = arith.cmpi ne, %47, %c0_i32_14 : i32
    %49 = arith.select %48, %c43_i32, %c1114112_i32 : i32
    llvm.store %49, %8 : i32, !llvm.ptr
    %50 = llvm.load %1 : !llvm.ptr -> i32
    %51 = llvm.load %5 : !llvm.ptr -> i32
    %52 = arith.addi %50, %51 : i32
    llvm.store %52, %6 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // pred: ^bb1
    %53 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i32_15 = arith.constant 1 : i32
    %54 = arith.addi %53, %c1_i32_15 : i32
    llvm.store %54, %6 : i32, !llvm.ptr
    %55 = llvm.load %0 : !llvm.ptr -> i32
    %c28_i64_16 = arith.constant 28 : i64
    %56 = arith.extui %55 : i32 to i64
    %57 = arith.addi %56, %c28_i64_16 : i64
    %58 = llvm.getelementptr %15[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %59 = llvm.load volatile %58 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %59, %7 : i32, !llvm.ptr
    %c45_i32 = arith.constant 45 : i32
    llvm.store %c45_i32, %8 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb6:  // 2 preds: ^bb8, ^bb9
    %60 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %61 = arith.extui %60 : i32 to i64
    %62 = arith.addi %61, %c0_i64 : i64
    %63 = llvm.getelementptr %15[%62] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %64 = llvm.load volatile %63 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_17 = arith.constant 0 : i32
    %65 = arith.cmpi ne, %64, %c0_i32_17 : i32
    cf.cond_br %65, ^bb25, ^bb26
  ^bb7:  // pred: ^bb3
    %66 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %67 = arith.cmpi ult, %66, %c16_i32 : i32
    %68 = arith.extui %67 : i1 to i32
    %c0_i32_18 = arith.constant 0 : i32
    %69 = arith.cmpi ne, %68, %c0_i32_18 : i32
    cf.cond_br %69, ^bb10, ^bb11
  ^bb8:  // pred: ^bb3
    %c0_i32_19 = arith.constant 0 : i32
    llvm.store %c0_i32_19, %2 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb9:  // 4 preds: ^bb11, ^bb13, ^bb14, ^bb21
    %70 = llvm.load %1 : !llvm.ptr -> i32
    %71 = llvm.load %6 : !llvm.ptr -> i32
    %72 = arith.addi %70, %71 : i32
    llvm.store %72, %6 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb10:  // pred: ^bb7
    %73 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_20 = arith.constant 0 : i32
    %74 = arith.cmpi ne, %73, %c0_i32_20 : i32
    cf.cond_br %74, ^bb12, ^bb13
  ^bb11:  // pred: ^bb7
    %75 = llvm.load %2 : !llvm.ptr -> i32
    %76 = llvm.load %3 : !llvm.ptr -> i32
    %77 = call @f80(%arg0, %75, %76) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %77, %1 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb12:  // pred: ^bb10
    %78 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %79 = arith.andi %78, %c3_i32 : i32
    llvm.store %79, %9 : i32, !llvm.ptr
    %80 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32_21 = arith.constant 4 : i32
    %81 = arith.cmpi uge, %80, %c4_i32_21 : i32
    %82 = arith.extui %81 : i1 to i32
    %c0_i32_22 = arith.constant 0 : i32
    %83 = arith.cmpi ne, %82, %c0_i32_22 : i32
    cf.cond_br %83, ^bb15, ^bb16
  ^bb13:  // pred: ^bb10
    %c0_i32_23 = arith.constant 0 : i32
    llvm.store %c0_i32_23, %1 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb14:  // 2 preds: ^bb16, ^bb17
    %84 = llvm.load %9 : !llvm.ptr -> i32
    %c0_i32_24 = arith.constant 0 : i32
    %85 = arith.cmpi eq, %84, %c0_i32_24 : i32
    %86 = arith.extui %85 : i1 to i32
    %c0_i32_25 = arith.constant 0 : i32
    %87 = arith.cmpi ne, %86, %c0_i32_25 : i32
    cf.cond_br %87, ^bb9, ^bb20
  ^bb15:  // pred: ^bb12
    %88 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %89 = arith.andi %88, %c12_i32 : i32
    llvm.store %89, %11 : i32, !llvm.ptr
    %c0_i32_26 = arith.constant 0 : i32
    llvm.store %c0_i32_26, %1 : i32, !llvm.ptr
    %c0_i32_27 = arith.constant 0 : i32
    llvm.store %c0_i32_27, %10 : i32, !llvm.ptr
    cf.br ^bb18
  ^bb16:  // pred: ^bb12
    %c0_i32_28 = arith.constant 0 : i32
    llvm.store %c0_i32_28, %1 : i32, !llvm.ptr
    %c0_i32_29 = arith.constant 0 : i32
    llvm.store %c0_i32_29, %10 : i32, !llvm.ptr
    cf.br ^bb14
  ^bb17:  // pred: ^bb19
    cf.br ^bb14
  ^bb18:  // 2 preds: ^bb15, ^bb18
    %90 = llvm.load %1 : !llvm.ptr -> i32
    %91 = llvm.load %2 : !llvm.ptr -> i32
    %92 = llvm.load %10 : !llvm.ptr -> i32
    %93 = arith.addi %91, %92 : i32
    llvm.store %93, %12 : i32, !llvm.ptr
    %c0_i64_30 = arith.constant 0 : i64
    %94 = arith.extui %93 : i32 to i64
    %95 = arith.addi %94, %c0_i64_30 : i64
    %96 = llvm.getelementptr %15[%95] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %97 = llvm.load volatile %96 {alignment = 1 : i64} : !llvm.ptr -> i8
    %98 = arith.extsi %97 : i8 to i32
    %c-65_i32 = arith.constant -65 : i32
    %99 = arith.cmpi sgt, %98, %c-65_i32 : i32
    %100 = arith.extui %99 : i1 to i32
    %101 = arith.addi %90, %100 : i32
    %102 = llvm.load %12 : !llvm.ptr -> i32
    %c1_i32_31 = arith.constant 1 : i32
    %103 = arith.addi %102, %c1_i32_31 : i32
    %c0_i64_32 = arith.constant 0 : i64
    %104 = arith.extui %103 : i32 to i64
    %105 = arith.addi %104, %c0_i64_32 : i64
    %106 = llvm.getelementptr %15[%105] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %107 = llvm.load volatile %106 {alignment = 1 : i64} : !llvm.ptr -> i8
    %108 = arith.extsi %107 : i8 to i32
    %c-65_i32_33 = arith.constant -65 : i32
    %109 = arith.cmpi sgt, %108, %c-65_i32_33 : i32
    %110 = arith.extui %109 : i1 to i32
    %111 = arith.addi %101, %110 : i32
    %112 = llvm.load %12 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %113 = arith.addi %112, %c2_i32 : i32
    %c0_i64_34 = arith.constant 0 : i64
    %114 = arith.extui %113 : i32 to i64
    %115 = arith.addi %114, %c0_i64_34 : i64
    %116 = llvm.getelementptr %15[%115] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %117 = llvm.load volatile %116 {alignment = 1 : i64} : !llvm.ptr -> i8
    %118 = arith.extsi %117 : i8 to i32
    %c-65_i32_35 = arith.constant -65 : i32
    %119 = arith.cmpi sgt, %118, %c-65_i32_35 : i32
    %120 = arith.extui %119 : i1 to i32
    %121 = arith.addi %111, %120 : i32
    %122 = llvm.load %12 : !llvm.ptr -> i32
    %c3_i32_36 = arith.constant 3 : i32
    %123 = arith.addi %122, %c3_i32_36 : i32
    %c0_i64_37 = arith.constant 0 : i64
    %124 = arith.extui %123 : i32 to i64
    %125 = arith.addi %124, %c0_i64_37 : i64
    %126 = llvm.getelementptr %15[%125] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %127 = llvm.load volatile %126 {alignment = 1 : i64} : !llvm.ptr -> i8
    %128 = arith.extsi %127 : i8 to i32
    %c-65_i32_38 = arith.constant -65 : i32
    %129 = arith.cmpi sgt, %128, %c-65_i32_38 : i32
    %130 = arith.extui %129 : i1 to i32
    %131 = arith.addi %121, %130 : i32
    llvm.store %131, %1 : i32, !llvm.ptr
    %132 = llvm.load %11 : !llvm.ptr -> i32
    %133 = llvm.load %10 : !llvm.ptr -> i32
    %c4_i32_39 = arith.constant 4 : i32
    %134 = arith.addi %133, %c4_i32_39 : i32
    llvm.store %134, %10 : i32, !llvm.ptr
    %135 = arith.cmpi eq, %132, %134 : i32
    %136 = arith.extui %135 : i1 to i32
    %c0_i32_40 = arith.constant 0 : i32
    %137 = arith.cmpi eq, %136, %c0_i32_40 : i32
    %138 = arith.extui %137 : i1 to i32
    %c0_i32_41 = arith.constant 0 : i32
    %139 = arith.cmpi ne, %138, %c0_i32_41 : i32
    cf.cond_br %139, ^bb18, ^bb19
  ^bb19:  // pred: ^bb18
    cf.br ^bb17
  ^bb20:  // pred: ^bb14
    %140 = llvm.load %2 : !llvm.ptr -> i32
    %141 = llvm.load %10 : !llvm.ptr -> i32
    %142 = arith.addi %140, %141 : i32
    llvm.store %142, %12 : i32, !llvm.ptr
    cf.br ^bb22
  ^bb21:  // pred: ^bb23
    cf.br ^bb9
  ^bb22:  // 2 preds: ^bb20, ^bb22
    %143 = llvm.load %1 : !llvm.ptr -> i32
    %144 = llvm.load %12 : !llvm.ptr -> i32
    %c0_i64_42 = arith.constant 0 : i64
    %145 = arith.extui %144 : i32 to i64
    %146 = arith.addi %145, %c0_i64_42 : i64
    %147 = llvm.getelementptr %15[%146] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %148 = llvm.load volatile %147 {alignment = 1 : i64} : !llvm.ptr -> i8
    %149 = arith.extsi %148 : i8 to i32
    %c-65_i32_43 = arith.constant -65 : i32
    %150 = arith.cmpi sgt, %149, %c-65_i32_43 : i32
    %151 = arith.extui %150 : i1 to i32
    %152 = arith.addi %143, %151 : i32
    llvm.store %152, %1 : i32, !llvm.ptr
    %153 = llvm.load %12 : !llvm.ptr -> i32
    %c1_i32_44 = arith.constant 1 : i32
    %154 = arith.addi %153, %c1_i32_44 : i32
    llvm.store %154, %12 : i32, !llvm.ptr
    %155 = llvm.load %9 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %156 = arith.addi %155, %c-1_i32 : i32
    llvm.store %156, %9 : i32, !llvm.ptr
    %c0_i32_45 = arith.constant 0 : i32
    %157 = arith.cmpi ne, %156, %c0_i32_45 : i32
    cf.cond_br %157, ^bb22, ^bb23
  ^bb23:  // pred: ^bb22
    cf.br ^bb21
  ^bb24:  // 7 preds: ^bb26, ^bb37, ^bb48, ^bb69, ^bb71, ^bb75, ^bb95
    %158 = llvm.load %1 : !llvm.ptr -> i32
    cf.br ^bb2(%158 : i32)
  ^bb25:  // pred: ^bb6
    %159 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %160 = arith.extui %159 : i32 to i64
    %161 = arith.addi %160, %c4_i64 : i64
    %162 = llvm.getelementptr %15[%161] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %163 = llvm.load volatile %162 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %163, %9 : i32, !llvm.ptr
    %164 = llvm.load %6 : !llvm.ptr -> i32
    %165 = arith.cmpi ugt, %163, %164 : i32
    %166 = arith.extui %165 : i1 to i32
    %c0_i32_46 = arith.constant 0 : i32
    %167 = arith.cmpi ne, %166, %c0_i32_46 : i32
    cf.cond_br %167, ^bb36, ^bb37
  ^bb26:  // pred: ^bb6
    %c1_i32_47 = arith.constant 1 : i32
    llvm.store %c1_i32_47, %1 : i32, !llvm.ptr
    %168 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %169 = arith.extui %168 : i32 to i64
    %170 = arith.addi %169, %c20_i64 : i64
    %171 = llvm.getelementptr %15[%170] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %172 = llvm.load volatile %171 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %172, %12 : i32, !llvm.ptr
    %173 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %174 = arith.extui %173 : i32 to i64
    %175 = arith.addi %174, %c24_i64 : i64
    %176 = llvm.getelementptr %15[%175] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %177 = llvm.load volatile %176 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %177, %10 : i32, !llvm.ptr
    %178 = llvm.load %8 : !llvm.ptr -> i32
    %179 = llvm.load %2 : !llvm.ptr -> i32
    %180 = llvm.load %3 : !llvm.ptr -> i32
    %181 = call @f81(%arg0, %172, %177, %178, %179, %180) : (!llvm.ptr, i32, i32, i32, i32, i32) -> i32
    %c0_i32_48 = arith.constant 0 : i32
    %182 = arith.cmpi ne, %181, %c0_i32_48 : i32
    cf.cond_br %182, ^bb24, ^bb27
  ^bb27:  // pred: ^bb26
    %183 = llvm.load %12 : !llvm.ptr -> i32
    %184 = llvm.load %4 : !llvm.ptr -> i32
    %185 = llvm.load %5 : !llvm.ptr -> i32
    %186 = llvm.load %10 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %187 = arith.extui %186 : i32 to i64
    %188 = arith.addi %187, %c12_i64 : i64
    %189 = llvm.getelementptr %15[%188] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %190 = llvm.load volatile %189 {alignment = 1 : i64} : !llvm.ptr -> i32
    %191 = arith.cmpi ult, %190, %21 : i32
    cf.cond_br %191, ^bb28, ^bb29
  ^bb28:  // 2 preds: ^bb27, ^bb29
    %192 = llvm.getelementptr %20[%190] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %193 = llvm.load %192 : !llvm.ptr -> !llvm.ptr
    %194 = llvm.load %193 : !llvm.ptr -> i32
    %c0_i32_49 = arith.constant 0 : i32
    %195 = arith.cmpi eq, %194, %c0_i32_49 : i32
    cf.cond_br %195, ^bb31, ^bb30
  ^bb29:  // pred: ^bb27
    %c3_i32_50 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_50) : (i32) -> ()
    cf.br ^bb28
  ^bb30:  // 2 preds: ^bb28, ^bb31
    %196 = llvm.getelementptr %193[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %197 = llvm.getelementptr %193[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %198 = llvm.getelementptr %193[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %199 = llvm.load %196 : !llvm.ptr -> !llvm.ptr
    %200 = llvm.load %198 : !llvm.ptr -> !llvm.ptr
    %201 = llvm.load %199 : !llvm.ptr -> i32
    %c0_i32_51 = arith.constant 0 : i32
    %202 = arith.cmpi eq, %201, %c0_i32_51 : i32
    cf.cond_br %202, ^bb33, ^bb32
  ^bb31:  // pred: ^bb28
    %c4_i32_52 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_52) : (i32) -> ()
    cf.br ^bb30
  ^bb32:  // 2 preds: ^bb30, ^bb33
    %203 = llvm.load %197 : !llvm.ptr -> i32
    %204 = arith.cmpi ne, %17, %203 : i32
    cf.cond_br %204, ^bb35, ^bb34
  ^bb33:  // pred: ^bb30
    %c3_i32_53 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_53) : (i32) -> ()
    cf.br ^bb32
  ^bb34:  // 2 preds: ^bb32, ^bb35
    %205 = llvm.call %199(%200, %183, %184, %185) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%205 : i32)
  ^bb35:  // pred: ^bb32
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb34
  ^bb36:  // pred: ^bb25
    %206 = llvm.load %7 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %207 = arith.andi %206, %c8_i32 : i32
    %c0_i32_54 = arith.constant 0 : i32
    %208 = arith.cmpi eq, %207, %c0_i32_54 : i32
    %209 = arith.extui %208 : i1 to i32
    %c0_i32_55 = arith.constant 0 : i32
    %210 = arith.cmpi ne, %209, %c0_i32_55 : i32
    cf.cond_br %210, ^bb47, ^bb48
  ^bb37:  // pred: ^bb25
    %c1_i32_56 = arith.constant 1 : i32
    llvm.store %c1_i32_56, %1 : i32, !llvm.ptr
    %211 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64_57 = arith.constant 20 : i64
    %212 = arith.extui %211 : i32 to i64
    %213 = arith.addi %212, %c20_i64_57 : i64
    %214 = llvm.getelementptr %15[%213] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %215 = llvm.load volatile %214 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %215, %12 : i32, !llvm.ptr
    %216 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64_58 = arith.constant 24 : i64
    %217 = arith.extui %216 : i32 to i64
    %218 = arith.addi %217, %c24_i64_58 : i64
    %219 = llvm.getelementptr %15[%218] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %220 = llvm.load volatile %219 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %220, %10 : i32, !llvm.ptr
    %221 = llvm.load %8 : !llvm.ptr -> i32
    %222 = llvm.load %2 : !llvm.ptr -> i32
    %223 = llvm.load %3 : !llvm.ptr -> i32
    %224 = call @f81(%arg0, %215, %220, %221, %222, %223) : (!llvm.ptr, i32, i32, i32, i32, i32) -> i32
    %c0_i32_59 = arith.constant 0 : i32
    %225 = arith.cmpi ne, %224, %c0_i32_59 : i32
    cf.cond_br %225, ^bb24, ^bb38
  ^bb38:  // pred: ^bb37
    %226 = llvm.load %12 : !llvm.ptr -> i32
    %227 = llvm.load %4 : !llvm.ptr -> i32
    %228 = llvm.load %5 : !llvm.ptr -> i32
    %229 = llvm.load %10 : !llvm.ptr -> i32
    %c12_i64_60 = arith.constant 12 : i64
    %230 = arith.extui %229 : i32 to i64
    %231 = arith.addi %230, %c12_i64_60 : i64
    %232 = llvm.getelementptr %15[%231] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %233 = llvm.load volatile %232 {alignment = 1 : i64} : !llvm.ptr -> i32
    %234 = arith.cmpi ult, %233, %23 : i32
    cf.cond_br %234, ^bb39, ^bb40
  ^bb39:  // 2 preds: ^bb38, ^bb40
    %235 = llvm.getelementptr %22[%233] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %236 = llvm.load %235 : !llvm.ptr -> !llvm.ptr
    %237 = llvm.load %236 : !llvm.ptr -> i32
    %c0_i32_61 = arith.constant 0 : i32
    %238 = arith.cmpi eq, %237, %c0_i32_61 : i32
    cf.cond_br %238, ^bb42, ^bb41
  ^bb40:  // pred: ^bb38
    %c3_i32_62 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_62) : (i32) -> ()
    cf.br ^bb39
  ^bb41:  // 2 preds: ^bb39, ^bb42
    %239 = llvm.getelementptr %236[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %240 = llvm.getelementptr %236[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %241 = llvm.getelementptr %236[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %242 = llvm.load %239 : !llvm.ptr -> !llvm.ptr
    %243 = llvm.load %241 : !llvm.ptr -> !llvm.ptr
    %244 = llvm.load %242 : !llvm.ptr -> i32
    %c0_i32_63 = arith.constant 0 : i32
    %245 = arith.cmpi eq, %244, %c0_i32_63 : i32
    cf.cond_br %245, ^bb44, ^bb43
  ^bb42:  // pred: ^bb39
    %c4_i32_64 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_64) : (i32) -> ()
    cf.br ^bb41
  ^bb43:  // 2 preds: ^bb41, ^bb44
    %246 = llvm.load %240 : !llvm.ptr -> i32
    %247 = arith.cmpi ne, %17, %246 : i32
    cf.cond_br %247, ^bb46, ^bb45
  ^bb44:  // pred: ^bb41
    %c3_i32_65 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_65) : (i32) -> ()
    cf.br ^bb43
  ^bb45:  // 2 preds: ^bb43, ^bb46
    %248 = llvm.call %242(%243, %226, %227, %228) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%248 : i32)
  ^bb46:  // pred: ^bb43
    %c5_i32_66 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_66) : (i32) -> ()
    cf.br ^bb45
  ^bb47:  // pred: ^bb36
    %249 = llvm.load %9 : !llvm.ptr -> i32
    %250 = llvm.load %6 : !llvm.ptr -> i32
    %251 = arith.subi %249, %250 : i32
    llvm.store %251, %6 : i32, !llvm.ptr
    %252 = llvm.load %0 : !llvm.ptr -> i32
    %c32_i64 = arith.constant 32 : i64
    %253 = arith.extui %252 : i32 to i64
    %254 = arith.addi %253, %c32_i64 : i64
    %255 = llvm.getelementptr %15[%254] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %256 = llvm.load volatile %255 {alignment = 1 : i64} : !llvm.ptr -> i8
    %257 = arith.extui %256 : i8 to i32
    llvm.store %257, %1 : i32, !llvm.ptr
    cf.switch %257 : i32, [
      default: ^bb72,
      0: ^bb72,
      1: ^bb74,
      2: ^bb73,
      3: ^bb74
    ]
  ^bb48:  // pred: ^bb36
    %258 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %259 = arith.extui %258 : i32 to i64
    %260 = arith.addi %259, %c16_i64 : i64
    %261 = llvm.getelementptr %15[%260] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %262 = llvm.load volatile %261 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %262, %11 : i32, !llvm.ptr
    %263 = llvm.load %0 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %c16_i64_67 = arith.constant 16 : i64
    %264 = arith.extui %263 : i32 to i64
    %265 = arith.addi %264, %c16_i64_67 : i64
    %266 = llvm.getelementptr %15[%265] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c48_i32, %266 {alignment = 1 : i64} : i32, !llvm.ptr
    %267 = llvm.load %0 : !llvm.ptr -> i32
    %c32_i64_68 = arith.constant 32 : i64
    %268 = arith.extui %267 : i32 to i64
    %269 = arith.addi %268, %c32_i64_68 : i64
    %270 = llvm.getelementptr %15[%269] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %271 = llvm.load volatile %270 {alignment = 1 : i64} : !llvm.ptr -> i8
    %272 = arith.extui %271 : i8 to i32
    llvm.store %272, %7 : i32, !llvm.ptr
    %c1_i32_69 = arith.constant 1 : i32
    llvm.store %c1_i32_69, %1 : i32, !llvm.ptr
    %273 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_70 = arith.constant 1 : i32
    %c32_i64_71 = arith.constant 32 : i64
    %274 = arith.extui %273 : i32 to i64
    %275 = arith.addi %274, %c32_i64_71 : i64
    %276 = llvm.getelementptr %15[%275] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %277 = arith.trunci %c1_i32_70 : i32 to i8
    llvm.store volatile %277, %276 {alignment = 1 : i64} : i8, !llvm.ptr
    %278 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64_72 = arith.constant 20 : i64
    %279 = arith.extui %278 : i32 to i64
    %280 = arith.addi %279, %c20_i64_72 : i64
    %281 = llvm.getelementptr %15[%280] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %282 = llvm.load volatile %281 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %282, %12 : i32, !llvm.ptr
    %283 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64_73 = arith.constant 24 : i64
    %284 = arith.extui %283 : i32 to i64
    %285 = arith.addi %284, %c24_i64_73 : i64
    %286 = llvm.getelementptr %15[%285] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %287 = llvm.load volatile %286 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %287, %10 : i32, !llvm.ptr
    %288 = llvm.load %8 : !llvm.ptr -> i32
    %289 = llvm.load %2 : !llvm.ptr -> i32
    %290 = llvm.load %3 : !llvm.ptr -> i32
    %291 = call @f81(%arg0, %282, %287, %288, %289, %290) : (!llvm.ptr, i32, i32, i32, i32, i32) -> i32
    %c0_i32_74 = arith.constant 0 : i32
    %292 = arith.cmpi ne, %291, %c0_i32_74 : i32
    cf.cond_br %292, ^bb24, ^bb49
  ^bb49:  // pred: ^bb48
    %293 = llvm.load %9 : !llvm.ptr -> i32
    %294 = llvm.load %6 : !llvm.ptr -> i32
    %295 = arith.subi %293, %294 : i32
    %c1_i32_75 = arith.constant 1 : i32
    %296 = arith.addi %295, %c1_i32_75 : i32
    llvm.store %296, %1 : i32, !llvm.ptr
    cf.br ^bb52
  ^bb50:  // pred: ^bb52
    %c1_i32_76 = arith.constant 1 : i32
    llvm.store %c1_i32_76, %1 : i32, !llvm.ptr
    %297 = llvm.load %12 : !llvm.ptr -> i32
    %298 = llvm.load %4 : !llvm.ptr -> i32
    %299 = llvm.load %5 : !llvm.ptr -> i32
    %300 = llvm.load %10 : !llvm.ptr -> i32
    %c12_i64_77 = arith.constant 12 : i64
    %301 = arith.extui %300 : i32 to i64
    %302 = arith.addi %301, %c12_i64_77 : i64
    %303 = llvm.getelementptr %15[%302] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %304 = llvm.load volatile %303 {alignment = 1 : i64} : !llvm.ptr -> i32
    %305 = arith.cmpi ult, %304, %29 : i32
    cf.cond_br %305, ^bb63, ^bb64
  ^bb51:  // pred: ^bb62
    %c1_i32_78 = arith.constant 1 : i32
    cf.br ^bb2(%c1_i32_78 : i32)
  ^bb52:  // 2 preds: ^bb49, ^bb60
    %306 = llvm.load %1 : !llvm.ptr -> i32
    %c-1_i32_79 = arith.constant -1 : i32
    %307 = arith.addi %306, %c-1_i32_79 : i32
    llvm.store %307, %1 : i32, !llvm.ptr
    %c0_i32_80 = arith.constant 0 : i32
    %308 = arith.cmpi eq, %307, %c0_i32_80 : i32
    %309 = arith.extui %308 : i1 to i32
    %c0_i32_81 = arith.constant 0 : i32
    %310 = arith.cmpi ne, %309, %c0_i32_81 : i32
    cf.cond_br %310, ^bb50, ^bb53
  ^bb53:  // pred: ^bb52
    %311 = llvm.load %12 : !llvm.ptr -> i32
    %c48_i32_82 = arith.constant 48 : i32
    %312 = llvm.load %10 : !llvm.ptr -> i32
    %c16_i64_83 = arith.constant 16 : i64
    %313 = arith.extui %312 : i32 to i64
    %314 = arith.addi %313, %c16_i64_83 : i64
    %315 = llvm.getelementptr %15[%314] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %316 = llvm.load volatile %315 {alignment = 1 : i64} : !llvm.ptr -> i32
    %317 = arith.cmpi ult, %316, %27 : i32
    cf.cond_br %317, ^bb54, ^bb55
  ^bb54:  // 2 preds: ^bb53, ^bb55
    %318 = llvm.getelementptr %26[%316] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %319 = llvm.load %318 : !llvm.ptr -> !llvm.ptr
    %320 = llvm.load %319 : !llvm.ptr -> i32
    %c0_i32_84 = arith.constant 0 : i32
    %321 = arith.cmpi eq, %320, %c0_i32_84 : i32
    cf.cond_br %321, ^bb57, ^bb56
  ^bb55:  // pred: ^bb53
    %c3_i32_85 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_85) : (i32) -> ()
    cf.br ^bb54
  ^bb56:  // 2 preds: ^bb54, ^bb57
    %322 = llvm.getelementptr %319[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %323 = llvm.getelementptr %319[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %324 = llvm.getelementptr %319[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %325 = llvm.load %322 : !llvm.ptr -> !llvm.ptr
    %326 = llvm.load %324 : !llvm.ptr -> !llvm.ptr
    %327 = llvm.load %325 : !llvm.ptr -> i32
    %c0_i32_86 = arith.constant 0 : i32
    %328 = arith.cmpi eq, %327, %c0_i32_86 : i32
    cf.cond_br %328, ^bb59, ^bb58
  ^bb57:  // pred: ^bb54
    %c4_i32_87 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_87) : (i32) -> ()
    cf.br ^bb56
  ^bb58:  // 2 preds: ^bb56, ^bb59
    %329 = llvm.load %323 : !llvm.ptr -> i32
    %330 = arith.cmpi ne, %25, %329 : i32
    cf.cond_br %330, ^bb61, ^bb60
  ^bb59:  // pred: ^bb56
    %c3_i32_88 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_88) : (i32) -> ()
    cf.br ^bb58
  ^bb60:  // 2 preds: ^bb58, ^bb61
    %331 = llvm.call %325(%326, %311, %c48_i32_82) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_89 = arith.constant 0 : i32
    %332 = arith.cmpi eq, %331, %c0_i32_89 : i32
    %333 = arith.extui %332 : i1 to i32
    %c0_i32_90 = arith.constant 0 : i32
    %334 = arith.cmpi ne, %333, %c0_i32_90 : i32
    cf.cond_br %334, ^bb52, ^bb62
  ^bb61:  // pred: ^bb58
    %c5_i32_91 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_91) : (i32) -> ()
    cf.br ^bb60
  ^bb62:  // pred: ^bb60
    cf.br ^bb51
  ^bb63:  // 2 preds: ^bb50, ^bb64
    %335 = llvm.getelementptr %28[%304] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %336 = llvm.load %335 : !llvm.ptr -> !llvm.ptr
    %337 = llvm.load %336 : !llvm.ptr -> i32
    %c0_i32_92 = arith.constant 0 : i32
    %338 = arith.cmpi eq, %337, %c0_i32_92 : i32
    cf.cond_br %338, ^bb66, ^bb65
  ^bb64:  // pred: ^bb50
    %c3_i32_93 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_93) : (i32) -> ()
    cf.br ^bb63
  ^bb65:  // 2 preds: ^bb63, ^bb66
    %339 = llvm.getelementptr %336[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %340 = llvm.getelementptr %336[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %341 = llvm.getelementptr %336[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %342 = llvm.load %339 : !llvm.ptr -> !llvm.ptr
    %343 = llvm.load %341 : !llvm.ptr -> !llvm.ptr
    %344 = llvm.load %342 : !llvm.ptr -> i32
    %c0_i32_94 = arith.constant 0 : i32
    %345 = arith.cmpi eq, %344, %c0_i32_94 : i32
    cf.cond_br %345, ^bb68, ^bb67
  ^bb66:  // pred: ^bb63
    %c4_i32_95 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_95) : (i32) -> ()
    cf.br ^bb65
  ^bb67:  // 2 preds: ^bb65, ^bb68
    %346 = llvm.load %340 : !llvm.ptr -> i32
    %347 = arith.cmpi ne, %17, %346 : i32
    cf.cond_br %347, ^bb70, ^bb69
  ^bb68:  // pred: ^bb65
    %c3_i32_96 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_96) : (i32) -> ()
    cf.br ^bb67
  ^bb69:  // 2 preds: ^bb67, ^bb70
    %348 = llvm.call %342(%343, %297, %298, %299) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_97 = arith.constant 0 : i32
    %349 = arith.cmpi ne, %348, %c0_i32_97 : i32
    cf.cond_br %349, ^bb24, ^bb71
  ^bb70:  // pred: ^bb67
    %c5_i32_98 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_98) : (i32) -> ()
    cf.br ^bb69
  ^bb71:  // pred: ^bb69
    %350 = llvm.load %0 : !llvm.ptr -> i32
    %351 = llvm.load %7 : !llvm.ptr -> i32
    %c32_i64_99 = arith.constant 32 : i64
    %352 = arith.extui %350 : i32 to i64
    %353 = arith.addi %352, %c32_i64_99 : i64
    %354 = llvm.getelementptr %15[%353] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %355 = arith.trunci %351 : i32 to i8
    llvm.store volatile %355, %354 {alignment = 1 : i64} : i8, !llvm.ptr
    %356 = llvm.load %0 : !llvm.ptr -> i32
    %357 = llvm.load %11 : !llvm.ptr -> i32
    %c16_i64_100 = arith.constant 16 : i64
    %358 = arith.extui %356 : i32 to i64
    %359 = arith.addi %358, %c16_i64_100 : i64
    %360 = llvm.getelementptr %15[%359] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %357, %360 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_101 = arith.constant 0 : i32
    llvm.store %c0_i32_101, %1 : i32, !llvm.ptr
    cf.br ^bb24
  ^bb72:  // 4 preds: ^bb47, ^bb47, ^bb73, ^bb74
    %361 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_102 = arith.constant 1 : i32
    %362 = arith.addi %361, %c1_i32_102 : i32
    llvm.store %362, %1 : i32, !llvm.ptr
    %363 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i64_103 = arith.constant 16 : i64
    %364 = arith.extui %363 : i32 to i64
    %365 = arith.addi %364, %c16_i64_103 : i64
    %366 = llvm.getelementptr %15[%365] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %367 = llvm.load volatile %366 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %367, %9 : i32, !llvm.ptr
    %368 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64_104 = arith.constant 24 : i64
    %369 = arith.extui %368 : i32 to i64
    %370 = arith.addi %369, %c24_i64_104 : i64
    %371 = llvm.getelementptr %15[%370] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %372 = llvm.load volatile %371 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %372, %12 : i32, !llvm.ptr
    %373 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64_105 = arith.constant 20 : i64
    %374 = arith.extui %373 : i32 to i64
    %375 = arith.addi %374, %c20_i64_105 : i64
    %376 = llvm.getelementptr %15[%375] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %377 = llvm.load volatile %376 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %377, %10 : i32, !llvm.ptr
    cf.br ^bb77
  ^bb73:  // pred: ^bb47
    %378 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i32_106 = arith.constant 1 : i32
    %c31_i32 = arith.constant 31 : i32
    %379 = arith.cmpi ule, %c1_i32_106, %c31_i32 : i32
    %380 = scf.if %379 -> (i32) {
      %490 = arith.shrui %378, %c1_i32_106 : i32
      scf.yield %490 : i32
    } else {
      %c0_i32_148 = arith.constant 0 : i32
      scf.yield %c0_i32_148 : i32
    }
    llvm.store %380, %1 : i32, !llvm.ptr
    %381 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i32_107 = arith.constant 1 : i32
    %382 = arith.addi %381, %c1_i32_107 : i32
    %c1_i32_108 = arith.constant 1 : i32
    %c31_i32_109 = arith.constant 31 : i32
    %383 = arith.cmpi ule, %c1_i32_108, %c31_i32_109 : i32
    %384 = scf.if %383 -> (i32) {
      %490 = arith.shrui %382, %c1_i32_108 : i32
      scf.yield %490 : i32
    } else {
      %c0_i32_148 = arith.constant 0 : i32
      scf.yield %c0_i32_148 : i32
    }
    llvm.store %384, %6 : i32, !llvm.ptr
    cf.br ^bb72
  ^bb74:  // 2 preds: ^bb47, ^bb47
    %385 = llvm.load %6 : !llvm.ptr -> i32
    llvm.store %385, %1 : i32, !llvm.ptr
    %c0_i32_110 = arith.constant 0 : i32
    llvm.store %c0_i32_110, %6 : i32, !llvm.ptr
    cf.br ^bb72
  ^bb75:  // pred: ^bb77
    %c1_i32_111 = arith.constant 1 : i32
    llvm.store %c1_i32_111, %1 : i32, !llvm.ptr
    %386 = llvm.load %10 : !llvm.ptr -> i32
    %387 = llvm.load %12 : !llvm.ptr -> i32
    %388 = llvm.load %8 : !llvm.ptr -> i32
    %389 = llvm.load %2 : !llvm.ptr -> i32
    %390 = llvm.load %3 : !llvm.ptr -> i32
    %391 = call @f81(%arg0, %386, %387, %388, %389, %390) : (!llvm.ptr, i32, i32, i32, i32, i32) -> i32
    %c0_i32_112 = arith.constant 0 : i32
    %392 = arith.cmpi ne, %391, %c0_i32_112 : i32
    cf.cond_br %392, ^bb24, ^bb88
  ^bb76:  // pred: ^bb87
    %c1_i32_113 = arith.constant 1 : i32
    cf.br ^bb2(%c1_i32_113 : i32)
  ^bb77:  // 2 preds: ^bb72, ^bb85
    %393 = llvm.load %1 : !llvm.ptr -> i32
    %c-1_i32_114 = arith.constant -1 : i32
    %394 = arith.addi %393, %c-1_i32_114 : i32
    llvm.store %394, %1 : i32, !llvm.ptr
    %c0_i32_115 = arith.constant 0 : i32
    %395 = arith.cmpi eq, %394, %c0_i32_115 : i32
    %396 = arith.extui %395 : i1 to i32
    %c0_i32_116 = arith.constant 0 : i32
    %397 = arith.cmpi ne, %396, %c0_i32_116 : i32
    cf.cond_br %397, ^bb75, ^bb78
  ^bb78:  // pred: ^bb77
    %398 = llvm.load %10 : !llvm.ptr -> i32
    %399 = llvm.load %9 : !llvm.ptr -> i32
    %400 = llvm.load %12 : !llvm.ptr -> i32
    %c16_i64_117 = arith.constant 16 : i64
    %401 = arith.extui %400 : i32 to i64
    %402 = arith.addi %401, %c16_i64_117 : i64
    %403 = llvm.getelementptr %15[%402] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %404 = llvm.load volatile %403 {alignment = 1 : i64} : !llvm.ptr -> i32
    %405 = arith.cmpi ult, %404, %31 : i32
    cf.cond_br %405, ^bb79, ^bb80
  ^bb79:  // 2 preds: ^bb78, ^bb80
    %406 = llvm.getelementptr %30[%404] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %407 = llvm.load %406 : !llvm.ptr -> !llvm.ptr
    %408 = llvm.load %407 : !llvm.ptr -> i32
    %c0_i32_118 = arith.constant 0 : i32
    %409 = arith.cmpi eq, %408, %c0_i32_118 : i32
    cf.cond_br %409, ^bb82, ^bb81
  ^bb80:  // pred: ^bb78
    %c3_i32_119 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_119) : (i32) -> ()
    cf.br ^bb79
  ^bb81:  // 2 preds: ^bb79, ^bb82
    %410 = llvm.getelementptr %407[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %411 = llvm.getelementptr %407[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %412 = llvm.getelementptr %407[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %413 = llvm.load %410 : !llvm.ptr -> !llvm.ptr
    %414 = llvm.load %412 : !llvm.ptr -> !llvm.ptr
    %415 = llvm.load %413 : !llvm.ptr -> i32
    %c0_i32_120 = arith.constant 0 : i32
    %416 = arith.cmpi eq, %415, %c0_i32_120 : i32
    cf.cond_br %416, ^bb84, ^bb83
  ^bb82:  // pred: ^bb79
    %c4_i32_121 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_121) : (i32) -> ()
    cf.br ^bb81
  ^bb83:  // 2 preds: ^bb81, ^bb84
    %417 = llvm.load %411 : !llvm.ptr -> i32
    %418 = arith.cmpi ne, %25, %417 : i32
    cf.cond_br %418, ^bb86, ^bb85
  ^bb84:  // pred: ^bb81
    %c3_i32_122 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_122) : (i32) -> ()
    cf.br ^bb83
  ^bb85:  // 2 preds: ^bb83, ^bb86
    %419 = llvm.call %413(%414, %398, %399) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_123 = arith.constant 0 : i32
    %420 = arith.cmpi eq, %419, %c0_i32_123 : i32
    %421 = arith.extui %420 : i1 to i32
    %c0_i32_124 = arith.constant 0 : i32
    %422 = arith.cmpi ne, %421, %c0_i32_124 : i32
    cf.cond_br %422, ^bb77, ^bb87
  ^bb86:  // pred: ^bb83
    %c5_i32_125 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_125) : (i32) -> ()
    cf.br ^bb85
  ^bb87:  // pred: ^bb85
    cf.br ^bb76
  ^bb88:  // pred: ^bb75
    %423 = llvm.load %10 : !llvm.ptr -> i32
    %424 = llvm.load %4 : !llvm.ptr -> i32
    %425 = llvm.load %5 : !llvm.ptr -> i32
    %426 = llvm.load %12 : !llvm.ptr -> i32
    %c12_i64_126 = arith.constant 12 : i64
    %427 = arith.extui %426 : i32 to i64
    %428 = arith.addi %427, %c12_i64_126 : i64
    %429 = llvm.getelementptr %15[%428] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %430 = llvm.load volatile %429 {alignment = 1 : i64} : !llvm.ptr -> i32
    %431 = arith.cmpi ult, %430, %33 : i32
    cf.cond_br %431, ^bb89, ^bb90
  ^bb89:  // 2 preds: ^bb88, ^bb90
    %432 = llvm.getelementptr %32[%430] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %433 = llvm.load %432 : !llvm.ptr -> !llvm.ptr
    %434 = llvm.load %433 : !llvm.ptr -> i32
    %c0_i32_127 = arith.constant 0 : i32
    %435 = arith.cmpi eq, %434, %c0_i32_127 : i32
    cf.cond_br %435, ^bb92, ^bb91
  ^bb90:  // pred: ^bb88
    %c3_i32_128 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_128) : (i32) -> ()
    cf.br ^bb89
  ^bb91:  // 2 preds: ^bb89, ^bb92
    %436 = llvm.getelementptr %433[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %437 = llvm.getelementptr %433[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %438 = llvm.getelementptr %433[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %439 = llvm.load %436 : !llvm.ptr -> !llvm.ptr
    %440 = llvm.load %438 : !llvm.ptr -> !llvm.ptr
    %441 = llvm.load %439 : !llvm.ptr -> i32
    %c0_i32_129 = arith.constant 0 : i32
    %442 = arith.cmpi eq, %441, %c0_i32_129 : i32
    cf.cond_br %442, ^bb94, ^bb93
  ^bb92:  // pred: ^bb89
    %c4_i32_130 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_130) : (i32) -> ()
    cf.br ^bb91
  ^bb93:  // 2 preds: ^bb91, ^bb94
    %443 = llvm.load %437 : !llvm.ptr -> i32
    %444 = arith.cmpi ne, %17, %443 : i32
    cf.cond_br %444, ^bb96, ^bb95
  ^bb94:  // pred: ^bb91
    %c3_i32_131 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_131) : (i32) -> ()
    cf.br ^bb93
  ^bb95:  // 2 preds: ^bb93, ^bb96
    %445 = llvm.call %439(%440, %423, %424, %425) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_132 = arith.constant 0 : i32
    %446 = arith.cmpi ne, %445, %c0_i32_132 : i32
    cf.cond_br %446, ^bb24, ^bb97
  ^bb96:  // pred: ^bb93
    %c5_i32_133 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_133) : (i32) -> ()
    cf.br ^bb95
  ^bb97:  // pred: ^bb95
    %c0_i32_134 = arith.constant 0 : i32
    llvm.store %c0_i32_134, %1 : i32, !llvm.ptr
    cf.br ^bb99
  ^bb98:  // pred: ^bb110
    %447 = llvm.load %1 : !llvm.ptr -> i32
    %c-1_i32_135 = arith.constant -1 : i32
    %448 = arith.addi %447, %c-1_i32_135 : i32
    %449 = llvm.load %6 : !llvm.ptr -> i32
    %450 = arith.cmpi ult, %448, %449 : i32
    %451 = arith.extui %450 : i1 to i32
    cf.br ^bb2(%451 : i32)
  ^bb99:  // 2 preds: ^bb97, ^bb108
    %452 = llvm.load %6 : !llvm.ptr -> i32
    %453 = llvm.load %1 : !llvm.ptr -> i32
    %454 = arith.cmpi eq, %452, %453 : i32
    %455 = arith.extui %454 : i1 to i32
    %c0_i32_136 = arith.constant 0 : i32
    %456 = arith.cmpi eq, %455, %c0_i32_136 : i32
    %457 = arith.extui %456 : i1 to i32
    %c0_i32_137 = arith.constant 0 : i32
    %458 = arith.cmpi ne, %457, %c0_i32_137 : i32
    cf.cond_br %458, ^bb100, ^bb101
  ^bb100:  // pred: ^bb99
    %459 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_138 = arith.constant 1 : i32
    %460 = arith.addi %459, %c1_i32_138 : i32
    llvm.store %460, %1 : i32, !llvm.ptr
    %461 = llvm.load %10 : !llvm.ptr -> i32
    %462 = llvm.load %9 : !llvm.ptr -> i32
    %463 = llvm.load %12 : !llvm.ptr -> i32
    %c16_i64_139 = arith.constant 16 : i64
    %464 = arith.extui %463 : i32 to i64
    %465 = arith.addi %464, %c16_i64_139 : i64
    %466 = llvm.getelementptr %15[%465] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %467 = llvm.load volatile %466 {alignment = 1 : i64} : !llvm.ptr -> i32
    %468 = arith.cmpi ult, %467, %35 : i32
    cf.cond_br %468, ^bb102, ^bb103
  ^bb101:  // pred: ^bb99
    %469 = llvm.load %6 : !llvm.ptr -> i32
    %470 = llvm.load %6 : !llvm.ptr -> i32
    %471 = arith.cmpi ult, %469, %470 : i32
    %472 = arith.extui %471 : i1 to i32
    cf.br ^bb2(%472 : i32)
  ^bb102:  // 2 preds: ^bb100, ^bb103
    %473 = llvm.getelementptr %34[%467] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %474 = llvm.load %473 : !llvm.ptr -> !llvm.ptr
    %475 = llvm.load %474 : !llvm.ptr -> i32
    %c0_i32_140 = arith.constant 0 : i32
    %476 = arith.cmpi eq, %475, %c0_i32_140 : i32
    cf.cond_br %476, ^bb105, ^bb104
  ^bb103:  // pred: ^bb100
    %c3_i32_141 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_141) : (i32) -> ()
    cf.br ^bb102
  ^bb104:  // 2 preds: ^bb102, ^bb105
    %477 = llvm.getelementptr %474[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %478 = llvm.getelementptr %474[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %479 = llvm.getelementptr %474[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %480 = llvm.load %477 : !llvm.ptr -> !llvm.ptr
    %481 = llvm.load %479 : !llvm.ptr -> !llvm.ptr
    %482 = llvm.load %480 : !llvm.ptr -> i32
    %c0_i32_142 = arith.constant 0 : i32
    %483 = arith.cmpi eq, %482, %c0_i32_142 : i32
    cf.cond_br %483, ^bb107, ^bb106
  ^bb105:  // pred: ^bb102
    %c4_i32_143 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_143) : (i32) -> ()
    cf.br ^bb104
  ^bb106:  // 2 preds: ^bb104, ^bb107
    %484 = llvm.load %478 : !llvm.ptr -> i32
    %485 = arith.cmpi ne, %25, %484 : i32
    cf.cond_br %485, ^bb109, ^bb108
  ^bb107:  // pred: ^bb104
    %c3_i32_144 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_144) : (i32) -> ()
    cf.br ^bb106
  ^bb108:  // 2 preds: ^bb106, ^bb109
    %486 = llvm.call %480(%481, %461, %462) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_145 = arith.constant 0 : i32
    %487 = arith.cmpi eq, %486, %c0_i32_145 : i32
    %488 = arith.extui %487 : i1 to i32
    %c0_i32_146 = arith.constant 0 : i32
    %489 = arith.cmpi ne, %488, %c0_i32_146 : i32
    cf.cond_br %489, ^bb99, ^bb110
  ^bb109:  // pred: ^bb106
    %c5_i32_147 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_147) : (i32) -> ()
    cf.br ^bb108
  ^bb110:  // pred: ^bb108
    cf.br ^bb98
  }
  func.func @f80(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i64_4 = arith.constant 1 : i64
    %5 = llvm.alloca %c1_i64_4 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i64_5 = arith.constant 1 : i64
    %6 = llvm.alloca %c1_i64_5 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i64_6 = arith.constant 1 : i64
    %7 = llvm.alloca %c1_i64_6 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i64_7 = arith.constant 1 : i64
    %8 = llvm.alloca %c1_i64_7 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i64_8 = arith.constant 1 : i64
    %9 = llvm.alloca %c1_i64_8 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %10 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %14 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %15 = arith.addi %14, %c3_i32 : i32
    %c-4_i32 = arith.constant -4 : i32
    %16 = arith.andi %15, %c-4_i32 : i32
    llvm.store %16, %2 : i32, !llvm.ptr
    %17 = llvm.load %0 : !llvm.ptr -> i32
    %18 = arith.subi %16, %17 : i32
    llvm.store %18, %3 : i32, !llvm.ptr
    %19 = arith.cmpi ult, %13, %18 : i32
    %20 = arith.extui %19 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %21 = arith.cmpi ne, %20, %c0_i32_9 : i32
    cf.cond_br %21, ^bb4, ^bb5
  ^bb2(%22: i32):  // 3 preds: ^bb3, ^bb32, ^bb36
    return %22 : i32
  ^bb3:  // 3 preds: ^bb24, ^bb37, ^bb44
    %23 = llvm.load %8 : !llvm.ptr -> i32
    cf.br ^bb2(%23 : i32)
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %24 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_10 = arith.constant 0 : i32
    %25 = arith.cmpi ne, %24, %c0_i32_10 : i32
    cf.cond_br %25, ^bb35, ^bb36
  ^bb5:  // pred: ^bb1
    %26 = llvm.load %1 : !llvm.ptr -> i32
    %27 = llvm.load %3 : !llvm.ptr -> i32
    %28 = arith.subi %26, %27 : i32
    llvm.store %28, %4 : i32, !llvm.ptr
    %c4_i32 = arith.constant 4 : i32
    %29 = arith.cmpi ult, %28, %c4_i32 : i32
    %30 = arith.extui %29 : i1 to i32
    %c0_i32_11 = arith.constant 0 : i32
    %31 = arith.cmpi ne, %30, %c0_i32_11 : i32
    cf.cond_br %31, ^bb4, ^bb6
  ^bb6:  // pred: ^bb5
    %32 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i32_12 = arith.constant 3 : i32
    %33 = arith.andi %32, %c3_i32_12 : i32
    llvm.store %33, %5 : i32, !llvm.ptr
    %c0_i32_13 = arith.constant 0 : i32
    llvm.store %c0_i32_13, %6 : i32, !llvm.ptr
    %c0_i32_14 = arith.constant 0 : i32
    llvm.store %c0_i32_14, %1 : i32, !llvm.ptr
    %34 = llvm.load %2 : !llvm.ptr -> i32
    %35 = llvm.load %0 : !llvm.ptr -> i32
    %36 = arith.cmpi eq, %34, %35 : i32
    %37 = arith.extui %36 : i1 to i32
    llvm.store %37, %7 : i32, !llvm.ptr
    %c0_i32_15 = arith.constant 0 : i32
    %38 = arith.cmpi ne, %37, %c0_i32_15 : i32
    cf.cond_br %38, ^bb7, ^bb8
  ^bb7:  // 3 preds: ^bb6, ^bb9, ^bb16
    %39 = llvm.load %0 : !llvm.ptr -> i32
    %40 = llvm.load %3 : !llvm.ptr -> i32
    %41 = arith.addi %39, %40 : i32
    llvm.store %41, %9 : i32, !llvm.ptr
    %42 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i32_16 = arith.constant 0 : i32
    %43 = arith.cmpi eq, %42, %c0_i32_16 : i32
    %44 = arith.extui %43 : i1 to i32
    %c0_i32_17 = arith.constant 0 : i32
    %45 = arith.cmpi ne, %44, %c0_i32_17 : i32
    cf.cond_br %45, ^bb19, ^bb20
  ^bb8:  // pred: ^bb6
    %c0_i32_18 = arith.constant 0 : i32
    llvm.store %c0_i32_18, %1 : i32, !llvm.ptr
    %46 = llvm.load %0 : !llvm.ptr -> i32
    %47 = llvm.load %2 : !llvm.ptr -> i32
    %48 = arith.subi %46, %47 : i32
    llvm.store %48, %8 : i32, !llvm.ptr
    %c-4_i32_19 = arith.constant -4 : i32
    %49 = arith.cmpi ule, %48, %c-4_i32_19 : i32
    %50 = arith.extui %49 : i1 to i32
    %c0_i32_20 = arith.constant 0 : i32
    %51 = arith.cmpi ne, %50, %c0_i32_20 : i32
    cf.cond_br %51, ^bb10, ^bb11
  ^bb9:  // 2 preds: ^bb11, ^bb12
    %52 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i32_21 = arith.constant 0 : i32
    %53 = arith.cmpi ne, %52, %c0_i32_21 : i32
    cf.cond_br %53, ^bb7, ^bb15
  ^bb10:  // pred: ^bb8
    %c0_i32_22 = arith.constant 0 : i32
    llvm.store %c0_i32_22, %9 : i32, !llvm.ptr
    cf.br ^bb13
  ^bb11:  // pred: ^bb8
    %c0_i32_23 = arith.constant 0 : i32
    llvm.store %c0_i32_23, %9 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb12:  // pred: ^bb14
    cf.br ^bb9
  ^bb13:  // 2 preds: ^bb10, ^bb13
    %54 = llvm.load %1 : !llvm.ptr -> i32
    %55 = llvm.load %0 : !llvm.ptr -> i32
    %56 = llvm.load %9 : !llvm.ptr -> i32
    %57 = arith.addi %55, %56 : i32
    llvm.store %57, %2 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %58 = arith.extui %57 : i32 to i64
    %59 = arith.addi %58, %c0_i64 : i64
    %60 = llvm.getelementptr %12[%59] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %61 = llvm.load volatile %60 {alignment = 1 : i64} : !llvm.ptr -> i8
    %62 = arith.extsi %61 : i8 to i32
    %c-65_i32 = arith.constant -65 : i32
    %63 = arith.cmpi sgt, %62, %c-65_i32 : i32
    %64 = arith.extui %63 : i1 to i32
    %65 = arith.addi %54, %64 : i32
    %66 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32 = arith.constant 1 : i32
    %67 = arith.addi %66, %c1_i32 : i32
    %c0_i64_24 = arith.constant 0 : i64
    %68 = arith.extui %67 : i32 to i64
    %69 = arith.addi %68, %c0_i64_24 : i64
    %70 = llvm.getelementptr %12[%69] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %71 = llvm.load volatile %70 {alignment = 1 : i64} : !llvm.ptr -> i8
    %72 = arith.extsi %71 : i8 to i32
    %c-65_i32_25 = arith.constant -65 : i32
    %73 = arith.cmpi sgt, %72, %c-65_i32_25 : i32
    %74 = arith.extui %73 : i1 to i32
    %75 = arith.addi %65, %74 : i32
    %76 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %77 = arith.addi %76, %c2_i32 : i32
    %c0_i64_26 = arith.constant 0 : i64
    %78 = arith.extui %77 : i32 to i64
    %79 = arith.addi %78, %c0_i64_26 : i64
    %80 = llvm.getelementptr %12[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %81 = llvm.load volatile %80 {alignment = 1 : i64} : !llvm.ptr -> i8
    %82 = arith.extsi %81 : i8 to i32
    %c-65_i32_27 = arith.constant -65 : i32
    %83 = arith.cmpi sgt, %82, %c-65_i32_27 : i32
    %84 = arith.extui %83 : i1 to i32
    %85 = arith.addi %75, %84 : i32
    %86 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i32_28 = arith.constant 3 : i32
    %87 = arith.addi %86, %c3_i32_28 : i32
    %c0_i64_29 = arith.constant 0 : i64
    %88 = arith.extui %87 : i32 to i64
    %89 = arith.addi %88, %c0_i64_29 : i64
    %90 = llvm.getelementptr %12[%89] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %91 = llvm.load volatile %90 {alignment = 1 : i64} : !llvm.ptr -> i8
    %92 = arith.extsi %91 : i8 to i32
    %c-65_i32_30 = arith.constant -65 : i32
    %93 = arith.cmpi sgt, %92, %c-65_i32_30 : i32
    %94 = arith.extui %93 : i1 to i32
    %95 = arith.addi %85, %94 : i32
    llvm.store %95, %1 : i32, !llvm.ptr
    %96 = llvm.load %9 : !llvm.ptr -> i32
    %c4_i32_31 = arith.constant 4 : i32
    %97 = arith.addi %96, %c4_i32_31 : i32
    llvm.store %97, %9 : i32, !llvm.ptr
    %c0_i32_32 = arith.constant 0 : i32
    %98 = arith.cmpi ne, %97, %c0_i32_32 : i32
    cf.cond_br %98, ^bb13, ^bb14
  ^bb14:  // pred: ^bb13
    cf.br ^bb12
  ^bb15:  // pred: ^bb9
    %99 = llvm.load %0 : !llvm.ptr -> i32
    %100 = llvm.load %9 : !llvm.ptr -> i32
    %101 = arith.addi %99, %100 : i32
    llvm.store %101, %2 : i32, !llvm.ptr
    cf.br ^bb17
  ^bb16:  // pred: ^bb18
    cf.br ^bb7
  ^bb17:  // 2 preds: ^bb15, ^bb17
    %102 = llvm.load %1 : !llvm.ptr -> i32
    %103 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_33 = arith.constant 0 : i64
    %104 = arith.extui %103 : i32 to i64
    %105 = arith.addi %104, %c0_i64_33 : i64
    %106 = llvm.getelementptr %12[%105] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %107 = llvm.load volatile %106 {alignment = 1 : i64} : !llvm.ptr -> i8
    %108 = arith.extsi %107 : i8 to i32
    %c-65_i32_34 = arith.constant -65 : i32
    %109 = arith.cmpi sgt, %108, %c-65_i32_34 : i32
    %110 = arith.extui %109 : i1 to i32
    %111 = arith.addi %102, %110 : i32
    llvm.store %111, %1 : i32, !llvm.ptr
    %112 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_35 = arith.constant 1 : i32
    %113 = arith.addi %112, %c1_i32_35 : i32
    llvm.store %113, %2 : i32, !llvm.ptr
    %114 = llvm.load %8 : !llvm.ptr -> i32
    %c1_i32_36 = arith.constant 1 : i32
    %115 = arith.addi %114, %c1_i32_36 : i32
    llvm.store %115, %8 : i32, !llvm.ptr
    %c0_i32_37 = arith.constant 0 : i32
    %116 = arith.cmpi ne, %115, %c0_i32_37 : i32
    cf.cond_br %116, ^bb17, ^bb18
  ^bb18:  // pred: ^bb17
    cf.br ^bb16
  ^bb19:  // 4 preds: ^bb7, ^bb20, ^bb21, ^bb22
    %117 = llvm.load %4 : !llvm.ptr -> i32
    %c2_i32_38 = arith.constant 2 : i32
    %c31_i32 = arith.constant 31 : i32
    %118 = arith.cmpi ule, %c2_i32_38, %c31_i32 : i32
    %119 = scf.if %118 -> (i32) {
      %421 = arith.shrui %117, %c2_i32_38 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    llvm.store %119, %3 : i32, !llvm.ptr
    %120 = llvm.load %6 : !llvm.ptr -> i32
    %121 = llvm.load %1 : !llvm.ptr -> i32
    %122 = arith.addi %120, %121 : i32
    llvm.store %122, %8 : i32, !llvm.ptr
    cf.br ^bb24
  ^bb20:  // pred: ^bb7
    %123 = llvm.load %9 : !llvm.ptr -> i32
    %124 = llvm.load %4 : !llvm.ptr -> i32
    %c-4_i32_39 = arith.constant -4 : i32
    %125 = arith.andi %124, %c-4_i32_39 : i32
    %126 = arith.addi %123, %125 : i32
    llvm.store %126, %2 : i32, !llvm.ptr
    %c0_i64_40 = arith.constant 0 : i64
    %127 = arith.extui %126 : i32 to i64
    %128 = arith.addi %127, %c0_i64_40 : i64
    %129 = llvm.getelementptr %12[%128] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %130 = llvm.load volatile %129 {alignment = 1 : i64} : !llvm.ptr -> i8
    %131 = arith.extsi %130 : i8 to i32
    %c-65_i32_41 = arith.constant -65 : i32
    %132 = arith.cmpi sgt, %131, %c-65_i32_41 : i32
    %133 = arith.extui %132 : i1 to i32
    llvm.store %133, %6 : i32, !llvm.ptr
    %134 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i32_42 = arith.constant 1 : i32
    %135 = arith.cmpi eq, %134, %c1_i32_42 : i32
    %136 = arith.extui %135 : i1 to i32
    %c0_i32_43 = arith.constant 0 : i32
    %137 = arith.cmpi ne, %136, %c0_i32_43 : i32
    cf.cond_br %137, ^bb19, ^bb21
  ^bb21:  // pred: ^bb20
    %138 = llvm.load %6 : !llvm.ptr -> i32
    %139 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_44 = arith.constant 1 : i64
    %140 = arith.extui %139 : i32 to i64
    %141 = arith.addi %140, %c1_i64_44 : i64
    %142 = llvm.getelementptr %12[%141] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %143 = llvm.load volatile %142 {alignment = 1 : i64} : !llvm.ptr -> i8
    %144 = arith.extsi %143 : i8 to i32
    %c-65_i32_45 = arith.constant -65 : i32
    %145 = arith.cmpi sgt, %144, %c-65_i32_45 : i32
    %146 = arith.extui %145 : i1 to i32
    %147 = arith.addi %138, %146 : i32
    llvm.store %147, %6 : i32, !llvm.ptr
    %148 = llvm.load %5 : !llvm.ptr -> i32
    %c2_i32_46 = arith.constant 2 : i32
    %149 = arith.cmpi eq, %148, %c2_i32_46 : i32
    %150 = arith.extui %149 : i1 to i32
    %c0_i32_47 = arith.constant 0 : i32
    %151 = arith.cmpi ne, %150, %c0_i32_47 : i32
    cf.cond_br %151, ^bb19, ^bb22
  ^bb22:  // pred: ^bb21
    %152 = llvm.load %6 : !llvm.ptr -> i32
    %153 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i64 = arith.constant 2 : i64
    %154 = arith.extui %153 : i32 to i64
    %155 = arith.addi %154, %c2_i64 : i64
    %156 = llvm.getelementptr %12[%155] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %157 = llvm.load volatile %156 {alignment = 1 : i64} : !llvm.ptr -> i8
    %158 = arith.extsi %157 : i8 to i32
    %c-65_i32_48 = arith.constant -65 : i32
    %159 = arith.cmpi sgt, %158, %c-65_i32_48 : i32
    %160 = arith.extui %159 : i1 to i32
    %161 = arith.addi %152, %160 : i32
    llvm.store %161, %6 : i32, !llvm.ptr
    cf.br ^bb19
  ^bb23:  // pred: ^bb31
    %162 = llvm.load %4 : !llvm.ptr -> i32
    %163 = llvm.load %6 : !llvm.ptr -> i32
    %c252_i32 = arith.constant 252 : i32
    %164 = arith.andi %163, %c252_i32 : i32
    %c2_i32_49 = arith.constant 2 : i32
    %c31_i32_50 = arith.constant 31 : i32
    %165 = arith.cmpi ule, %c2_i32_49, %c31_i32_50 : i32
    %166 = scf.if %165 -> (i32) {
      %421 = arith.shli %164, %c2_i32_49 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %167 = arith.addi %162, %166 : i32
    llvm.store %167, %2 : i32, !llvm.ptr
    %c0_i64_51 = arith.constant 0 : i64
    %168 = arith.extui %167 : i32 to i64
    %169 = arith.addi %168, %c0_i64_51 : i64
    %170 = llvm.getelementptr %12[%169] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %171 = llvm.load volatile %170 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %171, %1 : i32, !llvm.ptr
    %c-1_i32 = arith.constant -1 : i32
    %172 = arith.xori %171, %c-1_i32 : i32
    %c7_i32 = arith.constant 7 : i32
    %c31_i32_52 = arith.constant 31 : i32
    %173 = arith.cmpi ule, %c7_i32, %c31_i32_52 : i32
    %174 = scf.if %173 -> (i32) {
      %421 = arith.shrui %172, %c7_i32 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %175 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i32 = arith.constant 6 : i32
    %c31_i32_53 = arith.constant 31 : i32
    %176 = arith.cmpi ule, %c6_i32, %c31_i32_53 : i32
    %177 = scf.if %176 -> (i32) {
      %421 = arith.shrui %175, %c6_i32 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %178 = arith.ori %174, %177 : i32
    %c16843009_i32 = arith.constant 16843009 : i32
    %179 = arith.andi %178, %c16843009_i32 : i32
    llvm.store %179, %1 : i32, !llvm.ptr
    %180 = llvm.load %7 : !llvm.ptr -> i32
    %c1_i32_54 = arith.constant 1 : i32
    %181 = arith.cmpi eq, %180, %c1_i32_54 : i32
    %182 = arith.extui %181 : i1 to i32
    %c0_i32_55 = arith.constant 0 : i32
    %183 = arith.cmpi ne, %182, %c0_i32_55 : i32
    cf.cond_br %183, ^bb32, ^bb33
  ^bb24:  // 2 preds: ^bb19, ^bb26
    %184 = llvm.load %9 : !llvm.ptr -> i32
    llvm.store %184, %4 : i32, !llvm.ptr
    %185 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_56 = arith.constant 0 : i32
    %186 = arith.cmpi eq, %185, %c0_i32_56 : i32
    %187 = arith.extui %186 : i1 to i32
    %c0_i32_57 = arith.constant 0 : i32
    %188 = arith.cmpi ne, %187, %c0_i32_57 : i32
    cf.cond_br %188, ^bb3, ^bb25
  ^bb25:  // pred: ^bb24
    %189 = llvm.load %3 : !llvm.ptr -> i32
    %c192_i32 = arith.constant 192 : i32
    %190 = llvm.load %3 : !llvm.ptr -> i32
    %c192_i32_58 = arith.constant 192 : i32
    %191 = arith.cmpi ult, %190, %c192_i32_58 : i32
    %192 = arith.extui %191 : i1 to i32
    %c0_i32_59 = arith.constant 0 : i32
    %193 = arith.cmpi ne, %192, %c0_i32_59 : i32
    %194 = arith.select %193, %189, %c192_i32 : i32
    llvm.store %194, %6 : i32, !llvm.ptr
    %c3_i32_60 = arith.constant 3 : i32
    %195 = arith.andi %194, %c3_i32_60 : i32
    llvm.store %195, %7 : i32, !llvm.ptr
    %196 = llvm.load %6 : !llvm.ptr -> i32
    %c2_i32_61 = arith.constant 2 : i32
    %c31_i32_62 = arith.constant 31 : i32
    %197 = arith.cmpi ule, %c2_i32_61, %c31_i32_62 : i32
    %198 = scf.if %197 -> (i32) {
      %421 = arith.shli %196, %c2_i32_61 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    llvm.store %198, %5 : i32, !llvm.ptr
    %c0_i32_63 = arith.constant 0 : i32
    llvm.store %c0_i32_63, %2 : i32, !llvm.ptr
    %199 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32_64 = arith.constant 4 : i32
    %200 = arith.cmpi ult, %199, %c4_i32_64 : i32
    %201 = arith.extui %200 : i1 to i32
    %c0_i32_65 = arith.constant 0 : i32
    %202 = arith.cmpi ne, %201, %c0_i32_65 : i32
    cf.cond_br %202, ^bb26, ^bb27
  ^bb26:  // 2 preds: ^bb25, ^bb28
    %203 = llvm.load %3 : !llvm.ptr -> i32
    %204 = llvm.load %6 : !llvm.ptr -> i32
    %205 = arith.subi %203, %204 : i32
    llvm.store %205, %3 : i32, !llvm.ptr
    %206 = llvm.load %4 : !llvm.ptr -> i32
    %207 = llvm.load %5 : !llvm.ptr -> i32
    %208 = arith.addi %206, %207 : i32
    llvm.store %208, %9 : i32, !llvm.ptr
    %209 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %c31_i32_66 = arith.constant 31 : i32
    %210 = arith.cmpi ule, %c8_i32, %c31_i32_66 : i32
    %211 = scf.if %210 -> (i32) {
      %421 = arith.shrui %209, %c8_i32 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %c16711935_i32 = arith.constant 16711935 : i32
    %212 = arith.andi %211, %c16711935_i32 : i32
    %213 = llvm.load %2 : !llvm.ptr -> i32
    %c16711935_i32_67 = arith.constant 16711935 : i32
    %214 = arith.andi %213, %c16711935_i32_67 : i32
    %215 = arith.addi %212, %214 : i32
    %c65537_i32 = arith.constant 65537 : i32
    %216 = arith.muli %215, %c65537_i32 : i32
    %c16_i32 = arith.constant 16 : i32
    %c31_i32_68 = arith.constant 31 : i32
    %217 = arith.cmpi ule, %c16_i32, %c31_i32_68 : i32
    %218 = scf.if %217 -> (i32) {
      %421 = arith.shrui %216, %c16_i32 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %219 = llvm.load %8 : !llvm.ptr -> i32
    %220 = arith.addi %218, %219 : i32
    llvm.store %220, %8 : i32, !llvm.ptr
    %221 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i32_69 = arith.constant 0 : i32
    %222 = arith.cmpi eq, %221, %c0_i32_69 : i32
    %223 = arith.extui %222 : i1 to i32
    %c0_i32_70 = arith.constant 0 : i32
    %224 = arith.cmpi ne, %223, %c0_i32_70 : i32
    cf.cond_br %224, ^bb24, ^bb31
  ^bb27:  // pred: ^bb25
    %225 = llvm.load %4 : !llvm.ptr -> i32
    %226 = llvm.load %5 : !llvm.ptr -> i32
    %c1008_i32 = arith.constant 1008 : i32
    %227 = arith.andi %226, %c1008_i32 : i32
    %228 = arith.addi %225, %227 : i32
    llvm.store %228, %0 : i32, !llvm.ptr
    %c0_i32_71 = arith.constant 0 : i32
    llvm.store %c0_i32_71, %2 : i32, !llvm.ptr
    %229 = llvm.load %4 : !llvm.ptr -> i32
    llvm.store %229, %1 : i32, !llvm.ptr
    cf.br ^bb29
  ^bb28:  // pred: ^bb30
    cf.br ^bb26
  ^bb29:  // 2 preds: ^bb27, ^bb29
    %230 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %231 = arith.extui %230 : i32 to i64
    %232 = arith.addi %231, %c12_i64 : i64
    %233 = llvm.getelementptr %12[%232] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %234 = llvm.load volatile %233 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %234, %9 : i32, !llvm.ptr
    %c-1_i32_72 = arith.constant -1 : i32
    %235 = arith.xori %234, %c-1_i32_72 : i32
    %c7_i32_73 = arith.constant 7 : i32
    %c31_i32_74 = arith.constant 31 : i32
    %236 = arith.cmpi ule, %c7_i32_73, %c31_i32_74 : i32
    %237 = scf.if %236 -> (i32) {
      %421 = arith.shrui %235, %c7_i32_73 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %238 = llvm.load %9 : !llvm.ptr -> i32
    %c6_i32_75 = arith.constant 6 : i32
    %c31_i32_76 = arith.constant 31 : i32
    %239 = arith.cmpi ule, %c6_i32_75, %c31_i32_76 : i32
    %240 = scf.if %239 -> (i32) {
      %421 = arith.shrui %238, %c6_i32_75 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %241 = arith.ori %237, %240 : i32
    %c16843009_i32_77 = arith.constant 16843009 : i32
    %242 = arith.andi %241, %c16843009_i32_77 : i32
    %243 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %244 = arith.extui %243 : i32 to i64
    %245 = arith.addi %244, %c8_i64 : i64
    %246 = llvm.getelementptr %12[%245] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %247 = llvm.load volatile %246 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %247, %9 : i32, !llvm.ptr
    %c-1_i32_78 = arith.constant -1 : i32
    %248 = arith.xori %247, %c-1_i32_78 : i32
    %c7_i32_79 = arith.constant 7 : i32
    %c31_i32_80 = arith.constant 31 : i32
    %249 = arith.cmpi ule, %c7_i32_79, %c31_i32_80 : i32
    %250 = scf.if %249 -> (i32) {
      %421 = arith.shrui %248, %c7_i32_79 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %251 = llvm.load %9 : !llvm.ptr -> i32
    %c6_i32_81 = arith.constant 6 : i32
    %c31_i32_82 = arith.constant 31 : i32
    %252 = arith.cmpi ule, %c6_i32_81, %c31_i32_82 : i32
    %253 = scf.if %252 -> (i32) {
      %421 = arith.shrui %251, %c6_i32_81 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %254 = arith.ori %250, %253 : i32
    %c16843009_i32_83 = arith.constant 16843009 : i32
    %255 = arith.andi %254, %c16843009_i32_83 : i32
    %256 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %257 = arith.extui %256 : i32 to i64
    %258 = arith.addi %257, %c4_i64 : i64
    %259 = llvm.getelementptr %12[%258] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %260 = llvm.load volatile %259 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %260, %9 : i32, !llvm.ptr
    %c-1_i32_84 = arith.constant -1 : i32
    %261 = arith.xori %260, %c-1_i32_84 : i32
    %c7_i32_85 = arith.constant 7 : i32
    %c31_i32_86 = arith.constant 31 : i32
    %262 = arith.cmpi ule, %c7_i32_85, %c31_i32_86 : i32
    %263 = scf.if %262 -> (i32) {
      %421 = arith.shrui %261, %c7_i32_85 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %264 = llvm.load %9 : !llvm.ptr -> i32
    %c6_i32_87 = arith.constant 6 : i32
    %c31_i32_88 = arith.constant 31 : i32
    %265 = arith.cmpi ule, %c6_i32_87, %c31_i32_88 : i32
    %266 = scf.if %265 -> (i32) {
      %421 = arith.shrui %264, %c6_i32_87 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %267 = arith.ori %263, %266 : i32
    %c16843009_i32_89 = arith.constant 16843009 : i32
    %268 = arith.andi %267, %c16843009_i32_89 : i32
    %269 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_90 = arith.constant 0 : i64
    %270 = arith.extui %269 : i32 to i64
    %271 = arith.addi %270, %c0_i64_90 : i64
    %272 = llvm.getelementptr %12[%271] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %273 = llvm.load volatile %272 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %273, %9 : i32, !llvm.ptr
    %c-1_i32_91 = arith.constant -1 : i32
    %274 = arith.xori %273, %c-1_i32_91 : i32
    %c7_i32_92 = arith.constant 7 : i32
    %c31_i32_93 = arith.constant 31 : i32
    %275 = arith.cmpi ule, %c7_i32_92, %c31_i32_93 : i32
    %276 = scf.if %275 -> (i32) {
      %421 = arith.shrui %274, %c7_i32_92 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %277 = llvm.load %9 : !llvm.ptr -> i32
    %c6_i32_94 = arith.constant 6 : i32
    %c31_i32_95 = arith.constant 31 : i32
    %278 = arith.cmpi ule, %c6_i32_94, %c31_i32_95 : i32
    %279 = scf.if %278 -> (i32) {
      %421 = arith.shrui %277, %c6_i32_94 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %280 = arith.ori %276, %279 : i32
    %c16843009_i32_96 = arith.constant 16843009 : i32
    %281 = arith.andi %280, %c16843009_i32_96 : i32
    %282 = llvm.load %2 : !llvm.ptr -> i32
    %283 = arith.addi %281, %282 : i32
    %284 = arith.addi %268, %283 : i32
    %285 = arith.addi %255, %284 : i32
    %286 = arith.addi %242, %285 : i32
    llvm.store %286, %2 : i32, !llvm.ptr
    %287 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32_97 = arith.constant 16 : i32
    %288 = arith.addi %287, %c16_i32_97 : i32
    llvm.store %288, %1 : i32, !llvm.ptr
    %289 = llvm.load %0 : !llvm.ptr -> i32
    %290 = arith.cmpi eq, %288, %289 : i32
    %291 = arith.extui %290 : i1 to i32
    %c0_i32_98 = arith.constant 0 : i32
    %292 = arith.cmpi eq, %291, %c0_i32_98 : i32
    %293 = arith.extui %292 : i1 to i32
    %c0_i32_99 = arith.constant 0 : i32
    %294 = arith.cmpi ne, %293, %c0_i32_99 : i32
    cf.cond_br %294, ^bb29, ^bb30
  ^bb30:  // pred: ^bb29
    cf.br ^bb28
  ^bb31:  // pred: ^bb26
    cf.br ^bb23
  ^bb32:  // 3 preds: ^bb23, ^bb33, ^bb34
    %295 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_100 = arith.constant 8 : i32
    %c31_i32_101 = arith.constant 31 : i32
    %296 = arith.cmpi ule, %c8_i32_100, %c31_i32_101 : i32
    %297 = scf.if %296 -> (i32) {
      %421 = arith.shrui %295, %c8_i32_100 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %c459007_i32 = arith.constant 459007 : i32
    %298 = arith.andi %297, %c459007_i32 : i32
    %299 = llvm.load %1 : !llvm.ptr -> i32
    %c16711935_i32_102 = arith.constant 16711935 : i32
    %300 = arith.andi %299, %c16711935_i32_102 : i32
    %301 = arith.addi %298, %300 : i32
    %c65537_i32_103 = arith.constant 65537 : i32
    %302 = arith.muli %301, %c65537_i32_103 : i32
    %c16_i32_104 = arith.constant 16 : i32
    %c31_i32_105 = arith.constant 31 : i32
    %303 = arith.cmpi ule, %c16_i32_104, %c31_i32_105 : i32
    %304 = scf.if %303 -> (i32) {
      %421 = arith.shrui %302, %c16_i32_104 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %305 = llvm.load %8 : !llvm.ptr -> i32
    %306 = arith.addi %304, %305 : i32
    cf.br ^bb2(%306 : i32)
  ^bb33:  // pred: ^bb23
    %307 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_106 = arith.constant 4 : i64
    %308 = arith.extui %307 : i32 to i64
    %309 = arith.addi %308, %c4_i64_106 : i64
    %310 = llvm.getelementptr %12[%309] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %311 = llvm.load volatile %310 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %311, %9 : i32, !llvm.ptr
    %c-1_i32_107 = arith.constant -1 : i32
    %312 = arith.xori %311, %c-1_i32_107 : i32
    %c7_i32_108 = arith.constant 7 : i32
    %c31_i32_109 = arith.constant 31 : i32
    %313 = arith.cmpi ule, %c7_i32_108, %c31_i32_109 : i32
    %314 = scf.if %313 -> (i32) {
      %421 = arith.shrui %312, %c7_i32_108 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %315 = llvm.load %9 : !llvm.ptr -> i32
    %c6_i32_110 = arith.constant 6 : i32
    %c31_i32_111 = arith.constant 31 : i32
    %316 = arith.cmpi ule, %c6_i32_110, %c31_i32_111 : i32
    %317 = scf.if %316 -> (i32) {
      %421 = arith.shrui %315, %c6_i32_110 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %318 = arith.ori %314, %317 : i32
    %c16843009_i32_112 = arith.constant 16843009 : i32
    %319 = arith.andi %318, %c16843009_i32_112 : i32
    %320 = llvm.load %1 : !llvm.ptr -> i32
    %321 = arith.addi %319, %320 : i32
    llvm.store %321, %1 : i32, !llvm.ptr
    %322 = llvm.load %7 : !llvm.ptr -> i32
    %c2_i32_113 = arith.constant 2 : i32
    %323 = arith.cmpi eq, %322, %c2_i32_113 : i32
    %324 = arith.extui %323 : i1 to i32
    %c0_i32_114 = arith.constant 0 : i32
    %325 = arith.cmpi ne, %324, %c0_i32_114 : i32
    cf.cond_br %325, ^bb32, ^bb34
  ^bb34:  // pred: ^bb33
    %326 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_115 = arith.constant 8 : i64
    %327 = arith.extui %326 : i32 to i64
    %328 = arith.addi %327, %c8_i64_115 : i64
    %329 = llvm.getelementptr %12[%328] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %330 = llvm.load volatile %329 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %330, %2 : i32, !llvm.ptr
    %c-1_i32_116 = arith.constant -1 : i32
    %331 = arith.xori %330, %c-1_i32_116 : i32
    %c7_i32_117 = arith.constant 7 : i32
    %c31_i32_118 = arith.constant 31 : i32
    %332 = arith.cmpi ule, %c7_i32_117, %c31_i32_118 : i32
    %333 = scf.if %332 -> (i32) {
      %421 = arith.shrui %331, %c7_i32_117 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %334 = llvm.load %2 : !llvm.ptr -> i32
    %c6_i32_119 = arith.constant 6 : i32
    %c31_i32_120 = arith.constant 31 : i32
    %335 = arith.cmpi ule, %c6_i32_119, %c31_i32_120 : i32
    %336 = scf.if %335 -> (i32) {
      %421 = arith.shrui %334, %c6_i32_119 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %337 = arith.ori %333, %336 : i32
    %c16843009_i32_121 = arith.constant 16843009 : i32
    %338 = arith.andi %337, %c16843009_i32_121 : i32
    %339 = llvm.load %1 : !llvm.ptr -> i32
    %340 = arith.addi %338, %339 : i32
    llvm.store %340, %1 : i32, !llvm.ptr
    cf.br ^bb32
  ^bb35:  // pred: ^bb4
    %341 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i32_122 = arith.constant 3 : i32
    %342 = arith.andi %341, %c3_i32_122 : i32
    llvm.store %342, %9 : i32, !llvm.ptr
    %343 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32_123 = arith.constant 4 : i32
    %344 = arith.cmpi uge, %343, %c4_i32_123 : i32
    %345 = arith.extui %344 : i1 to i32
    %c0_i32_124 = arith.constant 0 : i32
    %346 = arith.cmpi ne, %345, %c0_i32_124 : i32
    cf.cond_br %346, ^bb38, ^bb39
  ^bb36:  // pred: ^bb4
    %c0_i32_125 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32_125 : i32)
  ^bb37:  // 2 preds: ^bb39, ^bb40
    %347 = llvm.load %9 : !llvm.ptr -> i32
    %c0_i32_126 = arith.constant 0 : i32
    %348 = arith.cmpi eq, %347, %c0_i32_126 : i32
    %349 = arith.extui %348 : i1 to i32
    %c0_i32_127 = arith.constant 0 : i32
    %350 = arith.cmpi ne, %349, %c0_i32_127 : i32
    cf.cond_br %350, ^bb3, ^bb43
  ^bb38:  // pred: ^bb35
    %351 = llvm.load %1 : !llvm.ptr -> i32
    %c-4_i32_128 = arith.constant -4 : i32
    %352 = arith.andi %351, %c-4_i32_128 : i32
    llvm.store %352, %3 : i32, !llvm.ptr
    %c0_i32_129 = arith.constant 0 : i32
    llvm.store %c0_i32_129, %8 : i32, !llvm.ptr
    %c0_i32_130 = arith.constant 0 : i32
    llvm.store %c0_i32_130, %2 : i32, !llvm.ptr
    cf.br ^bb41
  ^bb39:  // pred: ^bb35
    %c0_i32_131 = arith.constant 0 : i32
    llvm.store %c0_i32_131, %8 : i32, !llvm.ptr
    %c0_i32_132 = arith.constant 0 : i32
    llvm.store %c0_i32_132, %2 : i32, !llvm.ptr
    cf.br ^bb37
  ^bb40:  // pred: ^bb42
    cf.br ^bb37
  ^bb41:  // 2 preds: ^bb38, ^bb41
    %353 = llvm.load %8 : !llvm.ptr -> i32
    %354 = llvm.load %0 : !llvm.ptr -> i32
    %355 = llvm.load %2 : !llvm.ptr -> i32
    %356 = arith.addi %354, %355 : i32
    llvm.store %356, %1 : i32, !llvm.ptr
    %c0_i64_133 = arith.constant 0 : i64
    %357 = arith.extui %356 : i32 to i64
    %358 = arith.addi %357, %c0_i64_133 : i64
    %359 = llvm.getelementptr %12[%358] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %360 = llvm.load volatile %359 {alignment = 1 : i64} : !llvm.ptr -> i8
    %361 = arith.extsi %360 : i8 to i32
    %c-65_i32_134 = arith.constant -65 : i32
    %362 = arith.cmpi sgt, %361, %c-65_i32_134 : i32
    %363 = arith.extui %362 : i1 to i32
    %364 = arith.addi %353, %363 : i32
    %365 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_135 = arith.constant 1 : i32
    %366 = arith.addi %365, %c1_i32_135 : i32
    %c0_i64_136 = arith.constant 0 : i64
    %367 = arith.extui %366 : i32 to i64
    %368 = arith.addi %367, %c0_i64_136 : i64
    %369 = llvm.getelementptr %12[%368] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %370 = llvm.load volatile %369 {alignment = 1 : i64} : !llvm.ptr -> i8
    %371 = arith.extsi %370 : i8 to i32
    %c-65_i32_137 = arith.constant -65 : i32
    %372 = arith.cmpi sgt, %371, %c-65_i32_137 : i32
    %373 = arith.extui %372 : i1 to i32
    %374 = arith.addi %364, %373 : i32
    %375 = llvm.load %1 : !llvm.ptr -> i32
    %c2_i32_138 = arith.constant 2 : i32
    %376 = arith.addi %375, %c2_i32_138 : i32
    %c0_i64_139 = arith.constant 0 : i64
    %377 = arith.extui %376 : i32 to i64
    %378 = arith.addi %377, %c0_i64_139 : i64
    %379 = llvm.getelementptr %12[%378] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %380 = llvm.load volatile %379 {alignment = 1 : i64} : !llvm.ptr -> i8
    %381 = arith.extsi %380 : i8 to i32
    %c-65_i32_140 = arith.constant -65 : i32
    %382 = arith.cmpi sgt, %381, %c-65_i32_140 : i32
    %383 = arith.extui %382 : i1 to i32
    %384 = arith.addi %374, %383 : i32
    %385 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i32_141 = arith.constant 3 : i32
    %386 = arith.addi %385, %c3_i32_141 : i32
    %c0_i64_142 = arith.constant 0 : i64
    %387 = arith.extui %386 : i32 to i64
    %388 = arith.addi %387, %c0_i64_142 : i64
    %389 = llvm.getelementptr %12[%388] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %390 = llvm.load volatile %389 {alignment = 1 : i64} : !llvm.ptr -> i8
    %391 = arith.extsi %390 : i8 to i32
    %c-65_i32_143 = arith.constant -65 : i32
    %392 = arith.cmpi sgt, %391, %c-65_i32_143 : i32
    %393 = arith.extui %392 : i1 to i32
    %394 = arith.addi %384, %393 : i32
    llvm.store %394, %8 : i32, !llvm.ptr
    %395 = llvm.load %3 : !llvm.ptr -> i32
    %396 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i32_144 = arith.constant 4 : i32
    %397 = arith.addi %396, %c4_i32_144 : i32
    llvm.store %397, %2 : i32, !llvm.ptr
    %398 = arith.cmpi eq, %395, %397 : i32
    %399 = arith.extui %398 : i1 to i32
    %c0_i32_145 = arith.constant 0 : i32
    %400 = arith.cmpi eq, %399, %c0_i32_145 : i32
    %401 = arith.extui %400 : i1 to i32
    %c0_i32_146 = arith.constant 0 : i32
    %402 = arith.cmpi ne, %401, %c0_i32_146 : i32
    cf.cond_br %402, ^bb41, ^bb42
  ^bb42:  // pred: ^bb41
    cf.br ^bb40
  ^bb43:  // pred: ^bb37
    %403 = llvm.load %0 : !llvm.ptr -> i32
    %404 = llvm.load %2 : !llvm.ptr -> i32
    %405 = arith.addi %403, %404 : i32
    llvm.store %405, %1 : i32, !llvm.ptr
    cf.br ^bb45
  ^bb44:  // pred: ^bb46
    cf.br ^bb3
  ^bb45:  // 2 preds: ^bb43, ^bb45
    %406 = llvm.load %8 : !llvm.ptr -> i32
    %407 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_147 = arith.constant 0 : i64
    %408 = arith.extui %407 : i32 to i64
    %409 = arith.addi %408, %c0_i64_147 : i64
    %410 = llvm.getelementptr %12[%409] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %411 = llvm.load volatile %410 {alignment = 1 : i64} : !llvm.ptr -> i8
    %412 = arith.extsi %411 : i8 to i32
    %c-65_i32_148 = arith.constant -65 : i32
    %413 = arith.cmpi sgt, %412, %c-65_i32_148 : i32
    %414 = arith.extui %413 : i1 to i32
    %415 = arith.addi %406, %414 : i32
    llvm.store %415, %8 : i32, !llvm.ptr
    %416 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_149 = arith.constant 1 : i32
    %417 = arith.addi %416, %c1_i32_149 : i32
    llvm.store %417, %1 : i32, !llvm.ptr
    %418 = llvm.load %9 : !llvm.ptr -> i32
    %c-1_i32_150 = arith.constant -1 : i32
    %419 = arith.addi %418, %c-1_i32_150 : i32
    llvm.store %419, %9 : i32, !llvm.ptr
    %c0_i32_151 = arith.constant 0 : i32
    %420 = arith.cmpi ne, %419, %c0_i32_151 : i32
    cf.cond_br %420, ^bb45, ^bb46
  ^bb46:  // pred: ^bb45
    cf.br ^bb44
  }
  func.func @f81(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_4 = arith.constant 1 : i64
    %5 = llvm.alloca %c1_i64_4 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> i32
    %11 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    %14 = llvm.load %12 : !llvm.ptr -> i32
    %15 = llvm.getelementptr %arg0[4] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %15 : !llvm.ptr -> i32
    %17 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.load %12 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %19 = llvm.load %2 : !llvm.ptr -> i32
    %c1114112_i32 = arith.constant 1114112 : i32
    %20 = arith.cmpi eq, %19, %c1114112_i32 : i32
    %21 = arith.extui %20 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %22 = arith.cmpi ne, %21, %c0_i32_5 : i32
    cf.cond_br %22, ^bb5, ^bb6
  ^bb2(%23: i32):  // 2 preds: ^bb4, ^bb23
    return %23 : i32
  ^bb3:  // pred: ^bb5
    %24 = llvm.load %0 : !llvm.ptr -> i32
    %25 = llvm.load %3 : !llvm.ptr -> i32
    %26 = llvm.load %4 : !llvm.ptr -> i32
    %27 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %28 = arith.extui %27 : i32 to i64
    %29 = arith.addi %28, %c12_i64 : i64
    %30 = llvm.getelementptr %8[%29] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %31 = llvm.load volatile %30 {alignment = 1 : i64} : !llvm.ptr -> i32
    %32 = arith.cmpi ult, %31, %18 : i32
    cf.cond_br %32, ^bb17, ^bb18
  ^bb4:  // 2 preds: ^bb13, ^bb16
    %33 = llvm.load %5 : !llvm.ptr -> i32
    cf.br ^bb2(%33 : i32)
  ^bb5:  // 2 preds: ^bb1, ^bb15
    %34 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_6 = arith.constant 0 : i32
    %35 = arith.cmpi ne, %34, %c0_i32_6 : i32
    cf.cond_br %35, ^bb3, ^bb16
  ^bb6:  // pred: ^bb1
    %c1_i32 = arith.constant 1 : i32
    llvm.store %c1_i32, %5 : i32, !llvm.ptr
    %36 = llvm.load %0 : !llvm.ptr -> i32
    %37 = llvm.load %2 : !llvm.ptr -> i32
    %38 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %39 = arith.extui %38 : i32 to i64
    %40 = arith.addi %39, %c16_i64 : i64
    %41 = llvm.getelementptr %8[%40] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %42 = llvm.load volatile %41 {alignment = 1 : i64} : !llvm.ptr -> i32
    %43 = arith.cmpi ult, %42, %14 : i32
    cf.cond_br %43, ^bb7, ^bb8
  ^bb7:  // 2 preds: ^bb6, ^bb8
    %44 = llvm.getelementptr %13[%42] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %45 = llvm.load %44 : !llvm.ptr -> !llvm.ptr
    %46 = llvm.load %45 : !llvm.ptr -> i32
    %c0_i32_7 = arith.constant 0 : i32
    %47 = arith.cmpi eq, %46, %c0_i32_7 : i32
    cf.cond_br %47, ^bb10, ^bb9
  ^bb8:  // pred: ^bb6
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %48 = llvm.getelementptr %45[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %49 = llvm.getelementptr %45[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %50 = llvm.getelementptr %45[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %51 = llvm.load %48 : !llvm.ptr -> !llvm.ptr
    %52 = llvm.load %50 : !llvm.ptr -> !llvm.ptr
    %53 = llvm.load %51 : !llvm.ptr -> i32
    %c0_i32_8 = arith.constant 0 : i32
    %54 = arith.cmpi eq, %53, %c0_i32_8 : i32
    cf.cond_br %54, ^bb12, ^bb11
  ^bb10:  // pred: ^bb7
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %55 = llvm.load %49 : !llvm.ptr -> i32
    %56 = arith.cmpi ne, %10, %55 : i32
    cf.cond_br %56, ^bb14, ^bb13
  ^bb12:  // pred: ^bb9
    %c3_i32_9 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_9) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %57 = llvm.call %51(%52, %36, %37) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_10 = arith.constant 0 : i32
    %58 = arith.cmpi ne, %57, %c0_i32_10 : i32
    cf.cond_br %58, ^bb4, ^bb15
  ^bb14:  // pred: ^bb11
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // pred: ^bb13
    cf.br ^bb5
  ^bb16:  // pred: ^bb5
    %c0_i32_11 = arith.constant 0 : i32
    llvm.store %c0_i32_11, %5 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb17:  // 2 preds: ^bb3, ^bb18
    %59 = llvm.getelementptr %17[%31] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %60 = llvm.load %59 : !llvm.ptr -> !llvm.ptr
    %61 = llvm.load %60 : !llvm.ptr -> i32
    %c0_i32_12 = arith.constant 0 : i32
    %62 = arith.cmpi eq, %61, %c0_i32_12 : i32
    cf.cond_br %62, ^bb20, ^bb19
  ^bb18:  // pred: ^bb3
    %c3_i32_13 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_13) : (i32) -> ()
    cf.br ^bb17
  ^bb19:  // 2 preds: ^bb17, ^bb20
    %63 = llvm.getelementptr %60[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %64 = llvm.getelementptr %60[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %65 = llvm.getelementptr %60[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %66 = llvm.load %63 : !llvm.ptr -> !llvm.ptr
    %67 = llvm.load %65 : !llvm.ptr -> !llvm.ptr
    %68 = llvm.load %66 : !llvm.ptr -> i32
    %c0_i32_14 = arith.constant 0 : i32
    %69 = arith.cmpi eq, %68, %c0_i32_14 : i32
    cf.cond_br %69, ^bb22, ^bb21
  ^bb20:  // pred: ^bb17
    %c4_i32_15 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_15) : (i32) -> ()
    cf.br ^bb19
  ^bb21:  // 2 preds: ^bb19, ^bb22
    %70 = llvm.load %64 : !llvm.ptr -> i32
    %71 = arith.cmpi ne, %16, %70 : i32
    cf.cond_br %71, ^bb24, ^bb23
  ^bb22:  // pred: ^bb19
    %c3_i32_16 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_16) : (i32) -> ()
    cf.br ^bb21
  ^bb23:  // 2 preds: ^bb21, ^bb24
    %72 = llvm.call %66(%67, %24, %25, %26) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%72 : i32)
  ^bb24:  // pred: ^bb21
    %c5_i32_17 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_17) : (i32) -> ()
    cf.br ^bb23
  }
  func.func @f82(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[4] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> i32
    %8 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.load %9 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c20_i64 : i64
    %15 = llvm.getelementptr %5[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %16 = llvm.load volatile %15 {alignment = 1 : i64} : !llvm.ptr -> i32
    %17 = llvm.load %1 : !llvm.ptr -> i32
    %18 = llvm.load %2 : !llvm.ptr -> i32
    %19 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %20 = arith.extui %19 : i32 to i64
    %21 = arith.addi %20, %c24_i64 : i64
    %22 = llvm.getelementptr %5[%21] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %23 = llvm.load volatile %22 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %24 = arith.extui %23 : i32 to i64
    %25 = arith.addi %24, %c12_i64 : i64
    %26 = llvm.getelementptr %5[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %27 = llvm.load volatile %26 {alignment = 1 : i64} : !llvm.ptr -> i32
    %28 = arith.cmpi ult, %27, %11 : i32
    cf.cond_br %28, ^bb3, ^bb4
  ^bb2(%29: i32):  // pred: ^bb9
    return %29 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %30 = llvm.getelementptr %10[%27] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %31 = llvm.load %30 : !llvm.ptr -> !llvm.ptr
    %32 = llvm.load %31 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %33 = arith.cmpi eq, %32, %c0_i32 : i32
    cf.cond_br %33, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %34 = llvm.getelementptr %31[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %35 = llvm.getelementptr %31[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %36 = llvm.getelementptr %31[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %37 = llvm.load %34 : !llvm.ptr -> !llvm.ptr
    %38 = llvm.load %36 : !llvm.ptr -> !llvm.ptr
    %39 = llvm.load %37 : !llvm.ptr -> i32
    %c0_i32_2 = arith.constant 0 : i32
    %40 = arith.cmpi eq, %39, %c0_i32_2 : i32
    cf.cond_br %40, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %41 = llvm.load %35 : !llvm.ptr -> i32
    %42 = arith.cmpi ne, %7, %41 : i32
    cf.cond_br %42, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_3 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_3) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %43 = llvm.call %37(%38, %16, %17, %18) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%43 : i32)
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func @f83(%arg0: !llvm.ptr, %arg1: i64, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i64_4 = arith.constant 1 : i64
    %5 = llvm.alloca %c1_i64_4 x i64 : (i64) -> !llvm.ptr
    llvm.store %c0_i64, %5 : i64, !llvm.ptr
    %c0_i32_5 = arith.constant 0 : i32
    %c1_i64_6 = arith.constant 1 : i64
    %6 = llvm.alloca %c1_i64_6 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32_5, %6 : i32, !llvm.ptr
    %c1_i64_7 = arith.constant 1 : i64
    %7 = llvm.alloca %c1_i64_7 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32_5, %7 : i32, !llvm.ptr
    %c1_i64_8 = arith.constant 1 : i64
    %8 = llvm.alloca %c1_i64_8 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32_5, %8 : i32, !llvm.ptr
    %9 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %14 = llvm.load %10 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %15 = arith.subi %14, %c48_i32 : i32
    llvm.store %15, %3 : i32, !llvm.ptr
    llvm.store %15, %10 : i32, !llvm.ptr
    %c39_i32 = arith.constant 39 : i32
    llvm.store %c39_i32, %4 : i32, !llvm.ptr
    %16 = llvm.load %0 : !llvm.ptr -> i64
    %c10000_i64 = arith.constant 10000 : i64
    %17 = arith.cmpi uge, %16, %c10000_i64 : i64
    %18 = arith.extui %17 : i1 to i64
    %19 = arith.trunci %18 : i64 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %20 = arith.cmpi ne, %19, %c0_i32_9 : i32
    cf.cond_br %20, ^bb4, ^bb5
  ^bb2(%21: i32):  // pred: ^bb11
    return %21 : i32
  ^bb3:  // 2 preds: ^bb5, ^bb6
    %22 = llvm.load %5 : !llvm.ptr -> i64
    %23 = arith.trunci %22 : i64 to i32
    llvm.store %23, %6 : i32, !llvm.ptr
    %c99_i32 = arith.constant 99 : i32
    %24 = arith.cmpi ule, %23, %c99_i32 : i32
    %25 = arith.extui %24 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %26 = arith.cmpi ne, %25, %c0_i32_10 : i32
    cf.cond_br %26, ^bb9, ^bb10
  ^bb4:  // pred: ^bb1
    %c39_i32_11 = arith.constant 39 : i32
    llvm.store %c39_i32_11, %4 : i32, !llvm.ptr
    cf.br ^bb7
  ^bb5:  // pred: ^bb1
    %27 = llvm.load %0 : !llvm.ptr -> i64
    llvm.store %27, %5 : i64, !llvm.ptr
    cf.br ^bb3
  ^bb6:  // pred: ^bb8
    cf.br ^bb3
  ^bb7:  // 2 preds: ^bb4, ^bb7
    %28 = llvm.load %3 : !llvm.ptr -> i32
    %c9_i32 = arith.constant 9 : i32
    %29 = arith.addi %28, %c9_i32 : i32
    %30 = llvm.load %4 : !llvm.ptr -> i32
    %31 = arith.addi %29, %30 : i32
    llvm.store %31, %6 : i32, !llvm.ptr
    %c-4_i32 = arith.constant -4 : i32
    %32 = arith.addi %31, %c-4_i32 : i32
    %33 = llvm.load %0 : !llvm.ptr -> i64
    %34 = llvm.load %0 : !llvm.ptr -> i64
    %c10000_i64_12 = arith.constant 10000 : i64
    %35 = arith.divui %34, %c10000_i64_12 : i64
    %c0_i64_13 = arith.constant 0 : i64
    %36 = arith.cmpi eq, %c10000_i64_12, %c0_i64_13 : i64
    %37 = arith.select %36, %c0_i64_13, %35 : i64
    llvm.store %37, %5 : i64, !llvm.ptr
    %c10000_i64_14 = arith.constant 10000 : i64
    %38 = arith.muli %37, %c10000_i64_14 : i64
    %39 = arith.subi %33, %38 : i64
    %40 = arith.trunci %39 : i64 to i32
    llvm.store %40, %7 : i32, !llvm.ptr
    %c65535_i32 = arith.constant 65535 : i32
    %41 = arith.andi %40, %c65535_i32 : i32
    %c100_i32 = arith.constant 100 : i32
    %42 = arith.divui %41, %c100_i32 : i32
    %c0_i32_15 = arith.constant 0 : i32
    %43 = arith.cmpi eq, %c100_i32, %c0_i32_15 : i32
    %44 = arith.select %43, %c0_i32_15, %42 : i32
    llvm.store %44, %8 : i32, !llvm.ptr
    %c1_i32 = arith.constant 1 : i32
    %c31_i32 = arith.constant 31 : i32
    %45 = arith.cmpi ule, %c1_i32, %c31_i32 : i32
    %46 = scf.if %45 -> (i32) {
      %157 = arith.shli %44, %c1_i32 : i32
      scf.yield %157 : i32
    } else {
      %c0_i32_55 = arith.constant 0 : i32
      scf.yield %c0_i32_55 : i32
    }
    %c1049336_i32 = arith.constant 1049336 : i32
    %47 = arith.addi %46, %c1049336_i32 : i32
    %c0_i64_16 = arith.constant 0 : i64
    %48 = arith.extui %47 : i32 to i64
    %49 = arith.addi %48, %c0_i64_16 : i64
    %50 = llvm.getelementptr %13[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %51 = llvm.load volatile %50 {alignment = 1 : i64} : !llvm.ptr -> i16
    %52 = arith.extui %51 : i16 to i32
    %c0_i64_17 = arith.constant 0 : i64
    %53 = arith.extui %32 : i32 to i64
    %54 = arith.addi %53, %c0_i64_17 : i64
    %55 = llvm.getelementptr %13[%54] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %56 = arith.trunci %52 : i32 to i16
    llvm.store volatile %56, %55 {alignment = 1 : i64} : i16, !llvm.ptr
    %57 = llvm.load %6 : !llvm.ptr -> i32
    %c-2_i32 = arith.constant -2 : i32
    %58 = arith.addi %57, %c-2_i32 : i32
    %59 = llvm.load %7 : !llvm.ptr -> i32
    %60 = llvm.load %8 : !llvm.ptr -> i32
    %c100_i32_18 = arith.constant 100 : i32
    %61 = arith.muli %60, %c100_i32_18 : i32
    %62 = arith.subi %59, %61 : i32
    %c65535_i32_19 = arith.constant 65535 : i32
    %63 = arith.andi %62, %c65535_i32_19 : i32
    %c1_i32_20 = arith.constant 1 : i32
    %c31_i32_21 = arith.constant 31 : i32
    %64 = arith.cmpi ule, %c1_i32_20, %c31_i32_21 : i32
    %65 = scf.if %64 -> (i32) {
      %157 = arith.shli %63, %c1_i32_20 : i32
      scf.yield %157 : i32
    } else {
      %c0_i32_55 = arith.constant 0 : i32
      scf.yield %c0_i32_55 : i32
    }
    %c1049336_i32_22 = arith.constant 1049336 : i32
    %66 = arith.addi %65, %c1049336_i32_22 : i32
    %c0_i64_23 = arith.constant 0 : i64
    %67 = arith.extui %66 : i32 to i64
    %68 = arith.addi %67, %c0_i64_23 : i64
    %69 = llvm.getelementptr %13[%68] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %70 = llvm.load volatile %69 {alignment = 1 : i64} : !llvm.ptr -> i16
    %71 = arith.extui %70 : i16 to i32
    %c0_i64_24 = arith.constant 0 : i64
    %72 = arith.extui %58 : i32 to i64
    %73 = arith.addi %72, %c0_i64_24 : i64
    %74 = llvm.getelementptr %13[%73] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %75 = arith.trunci %71 : i32 to i16
    llvm.store volatile %75, %74 {alignment = 1 : i64} : i16, !llvm.ptr
    %76 = llvm.load %4 : !llvm.ptr -> i32
    %c-4_i32_25 = arith.constant -4 : i32
    %77 = arith.addi %76, %c-4_i32_25 : i32
    llvm.store %77, %4 : i32, !llvm.ptr
    %78 = llvm.load %0 : !llvm.ptr -> i64
    %c99999999_i64 = arith.constant 99999999 : i64
    %79 = arith.cmpi ugt, %78, %c99999999_i64 : i64
    %80 = arith.extui %79 : i1 to i64
    %81 = arith.trunci %80 : i64 to i32
    llvm.store %81, %6 : i32, !llvm.ptr
    %82 = llvm.load %5 : !llvm.ptr -> i64
    llvm.store %82, %0 : i64, !llvm.ptr
    %83 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i32_26 = arith.constant 0 : i32
    %84 = arith.cmpi ne, %83, %c0_i32_26 : i32
    cf.cond_br %84, ^bb7, ^bb8
  ^bb8:  // pred: ^bb7
    cf.br ^bb6
  ^bb9:  // 2 preds: ^bb3, ^bb10
    %85 = llvm.load %6 : !llvm.ptr -> i32
    %c10_i32 = arith.constant 10 : i32
    %86 = arith.cmpi ult, %85, %c10_i32 : i32
    %87 = arith.extui %86 : i1 to i32
    %c0_i32_27 = arith.constant 0 : i32
    %88 = arith.cmpi ne, %87, %c0_i32_27 : i32
    cf.cond_br %88, ^bb12, ^bb13
  ^bb10:  // pred: ^bb3
    %89 = llvm.load %3 : !llvm.ptr -> i32
    %c9_i32_28 = arith.constant 9 : i32
    %90 = arith.addi %89, %c9_i32_28 : i32
    %91 = llvm.load %4 : !llvm.ptr -> i32
    %c-2_i32_29 = arith.constant -2 : i32
    %92 = arith.addi %91, %c-2_i32_29 : i32
    llvm.store %92, %4 : i32, !llvm.ptr
    %93 = arith.addi %90, %92 : i32
    %94 = llvm.load %5 : !llvm.ptr -> i64
    %95 = arith.trunci %94 : i64 to i32
    llvm.store %95, %6 : i32, !llvm.ptr
    %96 = llvm.load %6 : !llvm.ptr -> i32
    %c65535_i32_30 = arith.constant 65535 : i32
    %97 = arith.andi %96, %c65535_i32_30 : i32
    %c100_i32_31 = arith.constant 100 : i32
    %98 = arith.divui %97, %c100_i32_31 : i32
    %c0_i32_32 = arith.constant 0 : i32
    %99 = arith.cmpi eq, %c100_i32_31, %c0_i32_32 : i32
    %100 = arith.select %99, %c0_i32_32, %98 : i32
    llvm.store %100, %6 : i32, !llvm.ptr
    %c100_i32_33 = arith.constant 100 : i32
    %101 = arith.muli %100, %c100_i32_33 : i32
    %102 = arith.subi %95, %101 : i32
    %c65535_i32_34 = arith.constant 65535 : i32
    %103 = arith.andi %102, %c65535_i32_34 : i32
    %c1_i32_35 = arith.constant 1 : i32
    %c31_i32_36 = arith.constant 31 : i32
    %104 = arith.cmpi ule, %c1_i32_35, %c31_i32_36 : i32
    %105 = scf.if %104 -> (i32) {
      %157 = arith.shli %103, %c1_i32_35 : i32
      scf.yield %157 : i32
    } else {
      %c0_i32_55 = arith.constant 0 : i32
      scf.yield %c0_i32_55 : i32
    }
    %c1049336_i32_37 = arith.constant 1049336 : i32
    %106 = arith.addi %105, %c1049336_i32_37 : i32
    %c0_i64_38 = arith.constant 0 : i64
    %107 = arith.extui %106 : i32 to i64
    %108 = arith.addi %107, %c0_i64_38 : i64
    %109 = llvm.getelementptr %13[%108] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %110 = llvm.load volatile %109 {alignment = 1 : i64} : !llvm.ptr -> i16
    %111 = arith.extui %110 : i16 to i32
    %c0_i64_39 = arith.constant 0 : i64
    %112 = arith.extui %93 : i32 to i64
    %113 = arith.addi %112, %c0_i64_39 : i64
    %114 = llvm.getelementptr %13[%113] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %115 = arith.trunci %111 : i32 to i16
    llvm.store volatile %115, %114 {alignment = 1 : i64} : i16, !llvm.ptr
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb12, ^bb13
    %116 = llvm.load %2 : !llvm.ptr -> i32
    %117 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_40 = arith.constant 1 : i32
    %c0_i32_41 = arith.constant 0 : i32
    %118 = llvm.load %3 : !llvm.ptr -> i32
    %c9_i32_42 = arith.constant 9 : i32
    %119 = arith.addi %118, %c9_i32_42 : i32
    %120 = llvm.load %4 : !llvm.ptr -> i32
    %121 = arith.addi %119, %120 : i32
    %c39_i32_43 = arith.constant 39 : i32
    %122 = llvm.load %4 : !llvm.ptr -> i32
    %123 = arith.subi %c39_i32_43, %122 : i32
    %124 = call @f79(%arg0, %116, %117, %c1_i32_40, %c0_i32_41, %121, %123) : (!llvm.ptr, i32, i32, i32, i32, i32, i32) -> i32
    llvm.store %124, %4 : i32, !llvm.ptr
    %125 = llvm.load %3 : !llvm.ptr -> i32
    %c48_i32_44 = arith.constant 48 : i32
    %126 = arith.addi %125, %c48_i32_44 : i32
    llvm.store %126, %10 : i32, !llvm.ptr
    %127 = llvm.load %4 : !llvm.ptr -> i32
    cf.br ^bb2(%127 : i32)
  ^bb12:  // pred: ^bb9
    %128 = llvm.load %3 : !llvm.ptr -> i32
    %c9_i32_45 = arith.constant 9 : i32
    %129 = arith.addi %128, %c9_i32_45 : i32
    %130 = llvm.load %4 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %131 = arith.addi %130, %c-1_i32 : i32
    llvm.store %131, %4 : i32, !llvm.ptr
    %132 = arith.addi %129, %131 : i32
    %133 = llvm.load %6 : !llvm.ptr -> i32
    %c48_i32_46 = arith.constant 48 : i32
    %134 = arith.ori %133, %c48_i32_46 : i32
    %c0_i64_47 = arith.constant 0 : i64
    %135 = arith.extui %132 : i32 to i64
    %136 = arith.addi %135, %c0_i64_47 : i64
    %137 = llvm.getelementptr %13[%136] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %138 = arith.trunci %134 : i32 to i8
    llvm.store volatile %138, %137 {alignment = 1 : i64} : i8, !llvm.ptr
    cf.br ^bb11
  ^bb13:  // pred: ^bb9
    %139 = llvm.load %3 : !llvm.ptr -> i32
    %c9_i32_48 = arith.constant 9 : i32
    %140 = arith.addi %139, %c9_i32_48 : i32
    %141 = llvm.load %4 : !llvm.ptr -> i32
    %c-2_i32_49 = arith.constant -2 : i32
    %142 = arith.addi %141, %c-2_i32_49 : i32
    llvm.store %142, %4 : i32, !llvm.ptr
    %143 = arith.addi %140, %142 : i32
    %144 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i32_50 = arith.constant 1 : i32
    %c31_i32_51 = arith.constant 31 : i32
    %145 = arith.cmpi ule, %c1_i32_50, %c31_i32_51 : i32
    %146 = scf.if %145 -> (i32) {
      %157 = arith.shli %144, %c1_i32_50 : i32
      scf.yield %157 : i32
    } else {
      %c0_i32_55 = arith.constant 0 : i32
      scf.yield %c0_i32_55 : i32
    }
    %c1049336_i32_52 = arith.constant 1049336 : i32
    %147 = arith.addi %146, %c1049336_i32_52 : i32
    %c0_i64_53 = arith.constant 0 : i64
    %148 = arith.extui %147 : i32 to i64
    %149 = arith.addi %148, %c0_i64_53 : i64
    %150 = llvm.getelementptr %13[%149] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %151 = llvm.load volatile %150 {alignment = 1 : i64} : !llvm.ptr -> i16
    %152 = arith.extui %151 : i16 to i32
    %c0_i64_54 = arith.constant 0 : i64
    %153 = arith.extui %143 : i32 to i64
    %154 = arith.addi %153, %c0_i64_54 : i64
    %155 = llvm.getelementptr %13[%154] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %156 = arith.trunci %152 : i32 to i16
    llvm.store volatile %156, %155 {alignment = 1 : i64} : i16, !llvm.ptr
    cf.br ^bb11
  }
  func.func @f84(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %6 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %7 = arith.extui %6 : i32 to i64
    %8 = arith.addi %7, %c0_i64 : i64
    %9 = llvm.getelementptr %5[%8] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %10 = llvm.load volatile %9 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %10, %0 : i32, !llvm.ptr
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %c31_i32 = arith.constant 31 : i32
    %c31_i32_2 = arith.constant 31 : i32
    %12 = arith.minui %c31_i32, %c31_i32_2 : i32
    %13 = arith.shrsi %11, %12 : i32
    llvm.store %13, %2 : i32, !llvm.ptr
    %14 = arith.xori %10, %13 : i32
    %15 = llvm.load %2 : !llvm.ptr -> i32
    %16 = arith.subi %14, %15 : i32
    %17 = arith.extui %16 : i32 to i64
    %18 = llvm.load %0 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %19 = arith.xori %18, %c-1_i32 : i32
    %c31_i32_3 = arith.constant 31 : i32
    %c31_i32_4 = arith.constant 31 : i32
    %20 = arith.cmpi ule, %c31_i32_3, %c31_i32_4 : i32
    %21 = scf.if %20 -> (i32) {
      %25 = arith.shrui %19, %c31_i32_3 : i32
      scf.yield %25 : i32
    } else {
      %c0_i32_5 = arith.constant 0 : i32
      scf.yield %c0_i32_5 : i32
    }
    %22 = llvm.load %1 : !llvm.ptr -> i32
    %23 = call @f83(%arg0, %17, %21, %22) : (!llvm.ptr, i64, i32, i32) -> i32
    cf.br ^bb2(%23 : i32)
  ^bb2(%24: i32):  // pred: ^bb1
    return %24 : i32
  }
  func.func @f85(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i64_4 = arith.constant 1 : i64
    %5 = llvm.alloca %c1_i64_4 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i64_5 = arith.constant 1 : i64
    %6 = llvm.alloca %c1_i64_5 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i64_6 = arith.constant 1 : i64
    %7 = llvm.alloca %c1_i64_6 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i64_7 = arith.constant 1 : i64
    %8 = llvm.alloca %c1_i64_7 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i64_8 = arith.constant 1 : i64
    %9 = llvm.alloca %c1_i64_8 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %c1_i64_9 = arith.constant 1 : i64
    %10 = llvm.alloca %c1_i64_9 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %10 : i32, !llvm.ptr
    %11 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %14 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %15 = arith.cmpi uge, %14, %c16_i32 : i32
    %16 = arith.extui %15 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %17 = arith.cmpi ne, %16, %c0_i32_10 : i32
    cf.cond_br %17, ^bb4, ^bb5
  ^bb2(%18: i32):  // pred: ^bb22
    return %18 : i32
  ^bb3:  // 2 preds: ^bb5, ^bb11
    %19 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_11 = arith.constant 0 : i32
    %20 = arith.cmpi eq, %19, %c0_i32_11 : i32
    %21 = arith.extui %20 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %22 = arith.cmpi ne, %21, %c0_i32_12 : i32
    cf.cond_br %22, ^bb22, ^bb23
  ^bb4:  // pred: ^bb1
    %23 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_13 = arith.constant 0 : i32
    %24 = llvm.load %0 : !llvm.ptr -> i32
    %25 = arith.subi %c0_i32_13, %24 : i32
    %c3_i32 = arith.constant 3 : i32
    %26 = arith.andi %25, %c3_i32 : i32
    llvm.store %26, %4 : i32, !llvm.ptr
    %27 = arith.addi %23, %26 : i32
    llvm.store %27, %5 : i32, !llvm.ptr
    %28 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i32_14 = arith.constant 0 : i32
    %29 = arith.cmpi eq, %28, %c0_i32_14 : i32
    %30 = arith.extui %29 : i1 to i32
    %c0_i32_15 = arith.constant 0 : i32
    %31 = arith.cmpi ne, %30, %c0_i32_15 : i32
    cf.cond_br %31, ^bb6, ^bb7
  ^bb5:  // pred: ^bb1
    %32 = llvm.load %0 : !llvm.ptr -> i32
    llvm.store %32, %3 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb6:  // 2 preds: ^bb4, ^bb8
    %33 = llvm.load %5 : !llvm.ptr -> i32
    %34 = llvm.load %2 : !llvm.ptr -> i32
    %35 = llvm.load %4 : !llvm.ptr -> i32
    %36 = arith.subi %34, %35 : i32
    llvm.store %36, %7 : i32, !llvm.ptr
    %c-4_i32 = arith.constant -4 : i32
    %37 = arith.andi %36, %c-4_i32 : i32
    llvm.store %37, %8 : i32, !llvm.ptr
    %38 = arith.addi %33, %37 : i32
    llvm.store %38, %3 : i32, !llvm.ptr
    %39 = llvm.load %1 : !llvm.ptr -> i32
    %40 = llvm.load %4 : !llvm.ptr -> i32
    %41 = arith.addi %39, %40 : i32
    llvm.store %41, %9 : i32, !llvm.ptr
    %c3_i32_16 = arith.constant 3 : i32
    %42 = arith.andi %41, %c3_i32_16 : i32
    %c0_i32_17 = arith.constant 0 : i32
    %43 = arith.cmpi eq, %42, %c0_i32_17 : i32
    %44 = arith.extui %43 : i1 to i32
    %c0_i32_18 = arith.constant 0 : i32
    %45 = arith.cmpi ne, %44, %c0_i32_18 : i32
    cf.cond_br %45, ^bb12, ^bb13
  ^bb7:  // pred: ^bb4
    %46 = llvm.load %0 : !llvm.ptr -> i32
    llvm.store %46, %3 : i32, !llvm.ptr
    %47 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %47, %6 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb8:  // pred: ^bb10
    cf.br ^bb6
  ^bb9:  // 2 preds: ^bb7, ^bb9
    %48 = llvm.load %3 : !llvm.ptr -> i32
    %49 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %50 = arith.extui %49 : i32 to i64
    %51 = arith.addi %50, %c0_i64 : i64
    %52 = llvm.getelementptr %13[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %53 = llvm.load volatile %52 {alignment = 1 : i64} : !llvm.ptr -> i8
    %54 = arith.extui %53 : i8 to i32
    %c0_i64_19 = arith.constant 0 : i64
    %55 = arith.extui %48 : i32 to i64
    %56 = arith.addi %55, %c0_i64_19 : i64
    %57 = llvm.getelementptr %13[%56] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %58 = arith.trunci %54 : i32 to i8
    llvm.store volatile %58, %57 {alignment = 1 : i64} : i8, !llvm.ptr
    %59 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i32 = arith.constant 1 : i32
    %60 = arith.addi %59, %c1_i32 : i32
    llvm.store %60, %6 : i32, !llvm.ptr
    %61 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_20 = arith.constant 1 : i32
    %62 = arith.addi %61, %c1_i32_20 : i32
    llvm.store %62, %3 : i32, !llvm.ptr
    %63 = llvm.load %5 : !llvm.ptr -> i32
    %64 = arith.cmpi ult, %62, %63 : i32
    %65 = arith.extui %64 : i1 to i32
    %c0_i32_21 = arith.constant 0 : i32
    %66 = arith.cmpi ne, %65, %c0_i32_21 : i32
    cf.cond_br %66, ^bb9, ^bb10
  ^bb10:  // pred: ^bb9
    cf.br ^bb8
  ^bb11:  // 4 preds: ^bb12, ^bb13, ^bb17, ^bb19
    %67 = llvm.load %7 : !llvm.ptr -> i32
    %c3_i32_22 = arith.constant 3 : i32
    %68 = arith.andi %67, %c3_i32_22 : i32
    llvm.store %68, %2 : i32, !llvm.ptr
    %69 = llvm.load %9 : !llvm.ptr -> i32
    %70 = llvm.load %8 : !llvm.ptr -> i32
    %71 = arith.addi %69, %70 : i32
    llvm.store %71, %1 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb12:  // 2 preds: ^bb6, ^bb15
    %72 = llvm.load %8 : !llvm.ptr -> i32
    %c1_i32_23 = arith.constant 1 : i32
    %73 = arith.cmpi slt, %72, %c1_i32_23 : i32
    %74 = arith.extui %73 : i1 to i32
    %c0_i32_24 = arith.constant 0 : i32
    %75 = arith.cmpi ne, %74, %c0_i32_24 : i32
    cf.cond_br %75, ^bb11, ^bb18
  ^bb13:  // pred: ^bb6
    %76 = llvm.load %8 : !llvm.ptr -> i32
    %c1_i32_25 = arith.constant 1 : i32
    %77 = arith.cmpi slt, %76, %c1_i32_25 : i32
    %78 = arith.extui %77 : i1 to i32
    %c0_i32_26 = arith.constant 0 : i32
    %79 = arith.cmpi ne, %78, %c0_i32_26 : i32
    cf.cond_br %79, ^bb11, ^bb14
  ^bb14:  // pred: ^bb13
    %80 = llvm.load %9 : !llvm.ptr -> i32
    %c3_i32_27 = arith.constant 3 : i32
    %c31_i32 = arith.constant 31 : i32
    %81 = arith.cmpi ule, %c3_i32_27, %c31_i32 : i32
    %82 = scf.if %81 -> (i32) {
      %161 = arith.shli %80, %c3_i32_27 : i32
      scf.yield %161 : i32
    } else {
      %c0_i32_49 = arith.constant 0 : i32
      scf.yield %c0_i32_49 : i32
    }
    llvm.store %82, %6 : i32, !llvm.ptr
    %c24_i32 = arith.constant 24 : i32
    %83 = arith.andi %82, %c24_i32 : i32
    llvm.store %83, %2 : i32, !llvm.ptr
    %84 = llvm.load %9 : !llvm.ptr -> i32
    %c-4_i32_28 = arith.constant -4 : i32
    %85 = arith.andi %84, %c-4_i32_28 : i32
    llvm.store %85, %10 : i32, !llvm.ptr
    %c4_i32 = arith.constant 4 : i32
    %86 = arith.addi %85, %c4_i32 : i32
    llvm.store %86, %1 : i32, !llvm.ptr
    %c0_i32_29 = arith.constant 0 : i32
    %87 = llvm.load %6 : !llvm.ptr -> i32
    %88 = arith.subi %c0_i32_29, %87 : i32
    %c24_i32_30 = arith.constant 24 : i32
    %89 = arith.andi %88, %c24_i32_30 : i32
    llvm.store %89, %4 : i32, !llvm.ptr
    %90 = llvm.load %10 : !llvm.ptr -> i32
    %c0_i64_31 = arith.constant 0 : i64
    %91 = arith.extui %90 : i32 to i64
    %92 = arith.addi %91, %c0_i64_31 : i64
    %93 = llvm.getelementptr %13[%92] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %94 = llvm.load volatile %93 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %94, %6 : i32, !llvm.ptr
    cf.br ^bb16
  ^bb15:  // no predecessors
    cf.br ^bb12
  ^bb16:  // 2 preds: ^bb14, ^bb16
    %95 = llvm.load %5 : !llvm.ptr -> i32
    %96 = llvm.load %6 : !llvm.ptr -> i32
    %97 = llvm.load %2 : !llvm.ptr -> i32
    %c31_i32_32 = arith.constant 31 : i32
    %98 = arith.cmpi ule, %97, %c31_i32_32 : i32
    %99 = scf.if %98 -> (i32) {
      %161 = arith.shrui %96, %97 : i32
      scf.yield %161 : i32
    } else {
      %c0_i32_49 = arith.constant 0 : i32
      scf.yield %c0_i32_49 : i32
    }
    %100 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_33 = arith.constant 0 : i64
    %101 = arith.extui %100 : i32 to i64
    %102 = arith.addi %101, %c0_i64_33 : i64
    %103 = llvm.getelementptr %13[%102] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %104 = llvm.load volatile %103 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %104, %6 : i32, !llvm.ptr
    %105 = llvm.load %4 : !llvm.ptr -> i32
    %c31_i32_34 = arith.constant 31 : i32
    %106 = arith.cmpi ule, %105, %c31_i32_34 : i32
    %107 = scf.if %106 -> (i32) {
      %161 = arith.shli %104, %105 : i32
      scf.yield %161 : i32
    } else {
      %c0_i32_49 = arith.constant 0 : i32
      scf.yield %c0_i32_49 : i32
    }
    %108 = arith.ori %99, %107 : i32
    %c0_i64_35 = arith.constant 0 : i64
    %109 = arith.extui %95 : i32 to i64
    %110 = arith.addi %109, %c0_i64_35 : i64
    %111 = llvm.getelementptr %13[%110] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %108, %111 {alignment = 1 : i64} : i32, !llvm.ptr
    %112 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32_36 = arith.constant 4 : i32
    %113 = arith.addi %112, %c4_i32_36 : i32
    llvm.store %113, %1 : i32, !llvm.ptr
    %114 = llvm.load %5 : !llvm.ptr -> i32
    %c4_i32_37 = arith.constant 4 : i32
    %115 = arith.addi %114, %c4_i32_37 : i32
    llvm.store %115, %5 : i32, !llvm.ptr
    %116 = llvm.load %3 : !llvm.ptr -> i32
    %117 = arith.cmpi ult, %115, %116 : i32
    %118 = arith.extui %117 : i1 to i32
    %c0_i32_38 = arith.constant 0 : i32
    %119 = arith.cmpi ne, %118, %c0_i32_38 : i32
    cf.cond_br %119, ^bb16, ^bb17
  ^bb17:  // pred: ^bb16
    cf.br ^bb11
  ^bb18:  // pred: ^bb12
    %120 = llvm.load %9 : !llvm.ptr -> i32
    llvm.store %120, %1 : i32, !llvm.ptr
    cf.br ^bb20
  ^bb19:  // pred: ^bb21
    cf.br ^bb11
  ^bb20:  // 2 preds: ^bb18, ^bb20
    %121 = llvm.load %5 : !llvm.ptr -> i32
    %122 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_39 = arith.constant 0 : i64
    %123 = arith.extui %122 : i32 to i64
    %124 = arith.addi %123, %c0_i64_39 : i64
    %125 = llvm.getelementptr %13[%124] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %126 = llvm.load volatile %125 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_40 = arith.constant 0 : i64
    %127 = arith.extui %121 : i32 to i64
    %128 = arith.addi %127, %c0_i64_40 : i64
    %129 = llvm.getelementptr %13[%128] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %126, %129 {alignment = 1 : i64} : i32, !llvm.ptr
    %130 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32_41 = arith.constant 4 : i32
    %131 = arith.addi %130, %c4_i32_41 : i32
    llvm.store %131, %1 : i32, !llvm.ptr
    %132 = llvm.load %5 : !llvm.ptr -> i32
    %c4_i32_42 = arith.constant 4 : i32
    %133 = arith.addi %132, %c4_i32_42 : i32
    llvm.store %133, %5 : i32, !llvm.ptr
    %134 = llvm.load %3 : !llvm.ptr -> i32
    %135 = arith.cmpi ult, %133, %134 : i32
    %136 = arith.extui %135 : i1 to i32
    %c0_i32_43 = arith.constant 0 : i32
    %137 = arith.cmpi ne, %136, %c0_i32_43 : i32
    cf.cond_br %137, ^bb20, ^bb21
  ^bb21:  // pred: ^bb20
    cf.br ^bb19
  ^bb22:  // 2 preds: ^bb3, ^bb24
    %138 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%138 : i32)
  ^bb23:  // pred: ^bb3
    %139 = llvm.load %3 : !llvm.ptr -> i32
    %140 = llvm.load %2 : !llvm.ptr -> i32
    %141 = arith.addi %139, %140 : i32
    llvm.store %141, %5 : i32, !llvm.ptr
    cf.br ^bb25
  ^bb24:  // pred: ^bb26
    cf.br ^bb22
  ^bb25:  // 2 preds: ^bb23, ^bb25
    %142 = llvm.load %3 : !llvm.ptr -> i32
    %143 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_44 = arith.constant 0 : i64
    %144 = arith.extui %143 : i32 to i64
    %145 = arith.addi %144, %c0_i64_44 : i64
    %146 = llvm.getelementptr %13[%145] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %147 = llvm.load volatile %146 {alignment = 1 : i64} : !llvm.ptr -> i8
    %148 = arith.extui %147 : i8 to i32
    %c0_i64_45 = arith.constant 0 : i64
    %149 = arith.extui %142 : i32 to i64
    %150 = arith.addi %149, %c0_i64_45 : i64
    %151 = llvm.getelementptr %13[%150] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %152 = arith.trunci %148 : i32 to i8
    llvm.store volatile %152, %151 {alignment = 1 : i64} : i8, !llvm.ptr
    %153 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_46 = arith.constant 1 : i32
    %154 = arith.addi %153, %c1_i32_46 : i32
    llvm.store %154, %1 : i32, !llvm.ptr
    %155 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_47 = arith.constant 1 : i32
    %156 = arith.addi %155, %c1_i32_47 : i32
    llvm.store %156, %3 : i32, !llvm.ptr
    %157 = llvm.load %5 : !llvm.ptr -> i32
    %158 = arith.cmpi ult, %156, %157 : i32
    %159 = arith.extui %158 : i1 to i32
    %c0_i32_48 = arith.constant 0 : i32
    %160 = arith.cmpi ne, %159, %c0_i32_48 : i32
    cf.cond_br %160, ^bb25, ^bb26
  ^bb26:  // pred: ^bb25
    cf.br ^bb24
  }
  func.func @f86(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i64_4 = arith.constant 1 : i64
    %5 = llvm.alloca %c1_i64_4 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i64_5 = arith.constant 1 : i64
    %6 = llvm.alloca %c1_i64_5 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i64_6 = arith.constant 1 : i64
    %7 = llvm.alloca %c1_i64_6 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i64_7 = arith.constant 1 : i64
    %8 = llvm.alloca %c1_i64_7 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i64_8 = arith.constant 1 : i64
    %9 = llvm.alloca %c1_i64_8 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %c1_i64_9 = arith.constant 1 : i64
    %10 = llvm.alloca %c1_i64_9 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %10 : i32, !llvm.ptr
    %11 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %14 = llvm.load %0 : !llvm.ptr -> i32
    %15 = llvm.load %1 : !llvm.ptr -> i32
    %16 = arith.subi %14, %15 : i32
    %17 = llvm.load %2 : !llvm.ptr -> i32
    %18 = arith.cmpi uge, %16, %17 : i32
    %19 = arith.extui %18 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %20 = arith.cmpi ne, %19, %c0_i32_10 : i32
    cf.cond_br %20, ^bb6, ^bb7
  ^bb2(%21: i32):  // pred: ^bb3
    return %21 : i32
  ^bb3:  // 4 preds: ^bb5, ^bb25, ^bb47, ^bb49
    %22 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%22 : i32)
  ^bb4:  // 2 preds: ^bb9, ^bb48
    %23 = llvm.load %3 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %24 = arith.addi %23, %c-1_i32 : i32
    llvm.store %24, %1 : i32, !llvm.ptr
    cf.br ^bb50
  ^bb5:  // 5 preds: ^bb15, ^bb16, ^bb20, ^bb24, ^bb45
    %25 = llvm.load %9 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %26 = arith.andi %25, %c3_i32 : i32
    llvm.store %26, %1 : i32, !llvm.ptr
    %c0_i32_11 = arith.constant 0 : i32
    %27 = arith.cmpi eq, %26, %c0_i32_11 : i32
    %28 = arith.extui %27 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %29 = arith.cmpi ne, %28, %c0_i32_12 : i32
    cf.cond_br %29, ^bb3, ^bb48
  ^bb6:  // 2 preds: ^bb1, ^bb22
    %30 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %31 = arith.cmpi uge, %30, %c16_i32 : i32
    %32 = arith.extui %31 : i1 to i32
    %c0_i32_13 = arith.constant 0 : i32
    %33 = arith.cmpi ne, %32, %c0_i32_13 : i32
    cf.cond_br %33, ^bb26, ^bb27
  ^bb7:  // pred: ^bb1
    %34 = llvm.load %1 : !llvm.ptr -> i32
    %35 = llvm.load %2 : !llvm.ptr -> i32
    %36 = arith.addi %34, %35 : i32
    llvm.store %36, %3 : i32, !llvm.ptr
    %37 = llvm.load %0 : !llvm.ptr -> i32
    %38 = llvm.load %2 : !llvm.ptr -> i32
    %39 = arith.addi %37, %38 : i32
    llvm.store %39, %4 : i32, !llvm.ptr
    %40 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_14 = arith.constant 16 : i32
    %41 = arith.cmpi uge, %40, %c16_i32_14 : i32
    %42 = arith.extui %41 : i1 to i32
    %c0_i32_15 = arith.constant 0 : i32
    %43 = arith.cmpi ne, %42, %c0_i32_15 : i32
    cf.cond_br %43, ^bb8, ^bb9
  ^bb8:  // pred: ^bb7
    %44 = llvm.load %4 : !llvm.ptr -> i32
    %c-4_i32 = arith.constant -4 : i32
    %45 = arith.andi %44, %c-4_i32 : i32
    llvm.store %45, %5 : i32, !llvm.ptr
    %c0_i32_16 = arith.constant 0 : i32
    %46 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i32_17 = arith.constant 3 : i32
    %47 = arith.andi %46, %c3_i32_17 : i32
    llvm.store %47, %6 : i32, !llvm.ptr
    %48 = arith.subi %c0_i32_16, %47 : i32
    llvm.store %48, %7 : i32, !llvm.ptr
    %49 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i32_18 = arith.constant 0 : i32
    %50 = arith.cmpi eq, %49, %c0_i32_18 : i32
    %51 = arith.extui %50 : i1 to i32
    %c0_i32_19 = arith.constant 0 : i32
    %52 = arith.cmpi ne, %51, %c0_i32_19 : i32
    cf.cond_br %52, ^bb10, ^bb11
  ^bb9:  // pred: ^bb7
    %53 = llvm.load %0 : !llvm.ptr -> i32
    llvm.store %53, %5 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb10:  // 2 preds: ^bb8, ^bb12
    %54 = llvm.load %5 : !llvm.ptr -> i32
    %55 = llvm.load %2 : !llvm.ptr -> i32
    %56 = llvm.load %6 : !llvm.ptr -> i32
    %57 = arith.subi %55, %56 : i32
    llvm.store %57, %9 : i32, !llvm.ptr
    %c-4_i32_20 = arith.constant -4 : i32
    %58 = arith.andi %57, %c-4_i32_20 : i32
    llvm.store %58, %6 : i32, !llvm.ptr
    %59 = arith.subi %54, %58 : i32
    llvm.store %59, %4 : i32, !llvm.ptr
    %60 = llvm.load %3 : !llvm.ptr -> i32
    %61 = llvm.load %7 : !llvm.ptr -> i32
    %62 = arith.addi %60, %61 : i32
    llvm.store %62, %7 : i32, !llvm.ptr
    %c3_i32_21 = arith.constant 3 : i32
    %63 = arith.andi %62, %c3_i32_21 : i32
    %c0_i32_22 = arith.constant 0 : i32
    %64 = arith.cmpi eq, %63, %c0_i32_22 : i32
    %65 = arith.extui %64 : i1 to i32
    %c0_i32_23 = arith.constant 0 : i32
    %66 = arith.cmpi ne, %65, %c0_i32_23 : i32
    cf.cond_br %66, ^bb15, ^bb16
  ^bb11:  // pred: ^bb8
    %67 = llvm.load %1 : !llvm.ptr -> i32
    %68 = llvm.load %2 : !llvm.ptr -> i32
    %69 = arith.addi %67, %68 : i32
    %c-1_i32_24 = arith.constant -1 : i32
    %70 = arith.addi %69, %c-1_i32_24 : i32
    llvm.store %70, %8 : i32, !llvm.ptr
    cf.br ^bb13
  ^bb12:  // pred: ^bb14
    cf.br ^bb10
  ^bb13:  // 2 preds: ^bb11, ^bb13
    %71 = llvm.load %4 : !llvm.ptr -> i32
    %c-1_i32_25 = arith.constant -1 : i32
    %72 = arith.addi %71, %c-1_i32_25 : i32
    llvm.store %72, %4 : i32, !llvm.ptr
    %73 = llvm.load %8 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %74 = arith.extui %73 : i32 to i64
    %75 = arith.addi %74, %c0_i64 : i64
    %76 = llvm.getelementptr %13[%75] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %77 = llvm.load volatile %76 {alignment = 1 : i64} : !llvm.ptr -> i8
    %78 = arith.extui %77 : i8 to i32
    %c0_i64_26 = arith.constant 0 : i64
    %79 = arith.extui %72 : i32 to i64
    %80 = arith.addi %79, %c0_i64_26 : i64
    %81 = llvm.getelementptr %13[%80] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %82 = arith.trunci %78 : i32 to i8
    llvm.store volatile %82, %81 {alignment = 1 : i64} : i8, !llvm.ptr
    %83 = llvm.load %8 : !llvm.ptr -> i32
    %c-1_i32_27 = arith.constant -1 : i32
    %84 = arith.addi %83, %c-1_i32_27 : i32
    llvm.store %84, %8 : i32, !llvm.ptr
    %85 = llvm.load %5 : !llvm.ptr -> i32
    %86 = llvm.load %4 : !llvm.ptr -> i32
    %87 = arith.cmpi ult, %85, %86 : i32
    %88 = arith.extui %87 : i1 to i32
    %c0_i32_28 = arith.constant 0 : i32
    %89 = arith.cmpi ne, %88, %c0_i32_28 : i32
    cf.cond_br %89, ^bb13, ^bb14
  ^bb14:  // pred: ^bb13
    cf.br ^bb12
  ^bb15:  // 2 preds: ^bb10, ^bb18
    %90 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i32 = arith.constant 1 : i32
    %91 = arith.cmpi slt, %90, %c1_i32 : i32
    %92 = arith.extui %91 : i1 to i32
    %c0_i32_29 = arith.constant 0 : i32
    %93 = arith.cmpi ne, %92, %c0_i32_29 : i32
    cf.cond_br %93, ^bb5, ^bb21
  ^bb16:  // pred: ^bb10
    %94 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i32_30 = arith.constant 1 : i32
    %95 = arith.cmpi slt, %94, %c1_i32_30 : i32
    %96 = arith.extui %95 : i1 to i32
    %c0_i32_31 = arith.constant 0 : i32
    %97 = arith.cmpi ne, %96, %c0_i32_31 : i32
    cf.cond_br %97, ^bb5, ^bb17
  ^bb17:  // pred: ^bb16
    %98 = llvm.load %7 : !llvm.ptr -> i32
    %c3_i32_32 = arith.constant 3 : i32
    %c31_i32 = arith.constant 31 : i32
    %99 = arith.cmpi ule, %c3_i32_32, %c31_i32 : i32
    %100 = scf.if %99 -> (i32) {
      %326 = arith.shli %98, %c3_i32_32 : i32
      scf.yield %326 : i32
    } else {
      %c0_i32_101 = arith.constant 0 : i32
      scf.yield %c0_i32_101 : i32
    }
    llvm.store %100, %8 : i32, !llvm.ptr
    %c24_i32 = arith.constant 24 : i32
    %101 = arith.andi %100, %c24_i32 : i32
    llvm.store %101, %2 : i32, !llvm.ptr
    %102 = llvm.load %7 : !llvm.ptr -> i32
    %c-4_i32_33 = arith.constant -4 : i32
    %103 = arith.andi %102, %c-4_i32_33 : i32
    llvm.store %103, %10 : i32, !llvm.ptr
    %c-4_i32_34 = arith.constant -4 : i32
    %104 = arith.addi %103, %c-4_i32_34 : i32
    llvm.store %104, %1 : i32, !llvm.ptr
    %c0_i32_35 = arith.constant 0 : i32
    %105 = llvm.load %8 : !llvm.ptr -> i32
    %106 = arith.subi %c0_i32_35, %105 : i32
    %c24_i32_36 = arith.constant 24 : i32
    %107 = arith.andi %106, %c24_i32_36 : i32
    llvm.store %107, %3 : i32, !llvm.ptr
    %108 = llvm.load %10 : !llvm.ptr -> i32
    %c0_i64_37 = arith.constant 0 : i64
    %109 = arith.extui %108 : i32 to i64
    %110 = arith.addi %109, %c0_i64_37 : i64
    %111 = llvm.getelementptr %13[%110] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %112 = llvm.load volatile %111 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %112, %8 : i32, !llvm.ptr
    cf.br ^bb19
  ^bb18:  // no predecessors
    cf.br ^bb15
  ^bb19:  // 2 preds: ^bb17, ^bb19
    %113 = llvm.load %5 : !llvm.ptr -> i32
    %c-4_i32_38 = arith.constant -4 : i32
    %114 = arith.addi %113, %c-4_i32_38 : i32
    llvm.store %114, %5 : i32, !llvm.ptr
    %115 = llvm.load %8 : !llvm.ptr -> i32
    %116 = llvm.load %3 : !llvm.ptr -> i32
    %c31_i32_39 = arith.constant 31 : i32
    %117 = arith.cmpi ule, %116, %c31_i32_39 : i32
    %118 = scf.if %117 -> (i32) {
      %326 = arith.shli %115, %116 : i32
      scf.yield %326 : i32
    } else {
      %c0_i32_101 = arith.constant 0 : i32
      scf.yield %c0_i32_101 : i32
    }
    %119 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_40 = arith.constant 0 : i64
    %120 = arith.extui %119 : i32 to i64
    %121 = arith.addi %120, %c0_i64_40 : i64
    %122 = llvm.getelementptr %13[%121] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %123 = llvm.load volatile %122 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %123, %8 : i32, !llvm.ptr
    %124 = llvm.load %2 : !llvm.ptr -> i32
    %c31_i32_41 = arith.constant 31 : i32
    %125 = arith.cmpi ule, %124, %c31_i32_41 : i32
    %126 = scf.if %125 -> (i32) {
      %326 = arith.shrui %123, %124 : i32
      scf.yield %326 : i32
    } else {
      %c0_i32_101 = arith.constant 0 : i32
      scf.yield %c0_i32_101 : i32
    }
    %127 = arith.ori %118, %126 : i32
    %c0_i64_42 = arith.constant 0 : i64
    %128 = arith.extui %114 : i32 to i64
    %129 = arith.addi %128, %c0_i64_42 : i64
    %130 = llvm.getelementptr %13[%129] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %127, %130 {alignment = 1 : i64} : i32, !llvm.ptr
    %131 = llvm.load %1 : !llvm.ptr -> i32
    %c-4_i32_43 = arith.constant -4 : i32
    %132 = arith.addi %131, %c-4_i32_43 : i32
    llvm.store %132, %1 : i32, !llvm.ptr
    %133 = llvm.load %4 : !llvm.ptr -> i32
    %134 = llvm.load %5 : !llvm.ptr -> i32
    %135 = arith.cmpi ult, %133, %134 : i32
    %136 = arith.extui %135 : i1 to i32
    %c0_i32_44 = arith.constant 0 : i32
    %137 = arith.cmpi ne, %136, %c0_i32_44 : i32
    cf.cond_br %137, ^bb19, ^bb20
  ^bb20:  // pred: ^bb19
    cf.br ^bb5
  ^bb21:  // pred: ^bb15
    %138 = llvm.load %9 : !llvm.ptr -> i32
    %139 = llvm.load %1 : !llvm.ptr -> i32
    %140 = arith.addi %138, %139 : i32
    %c-4_i32_45 = arith.constant -4 : i32
    %141 = arith.addi %140, %c-4_i32_45 : i32
    llvm.store %141, %1 : i32, !llvm.ptr
    cf.br ^bb23
  ^bb22:  // no predecessors
    cf.br ^bb6
  ^bb23:  // 2 preds: ^bb21, ^bb23
    %142 = llvm.load %5 : !llvm.ptr -> i32
    %c-4_i32_46 = arith.constant -4 : i32
    %143 = arith.addi %142, %c-4_i32_46 : i32
    llvm.store %143, %5 : i32, !llvm.ptr
    %144 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_47 = arith.constant 0 : i64
    %145 = arith.extui %144 : i32 to i64
    %146 = arith.addi %145, %c0_i64_47 : i64
    %147 = llvm.getelementptr %13[%146] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %148 = llvm.load volatile %147 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_48 = arith.constant 0 : i64
    %149 = arith.extui %143 : i32 to i64
    %150 = arith.addi %149, %c0_i64_48 : i64
    %151 = llvm.getelementptr %13[%150] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %148, %151 {alignment = 1 : i64} : i32, !llvm.ptr
    %152 = llvm.load %1 : !llvm.ptr -> i32
    %c-4_i32_49 = arith.constant -4 : i32
    %153 = arith.addi %152, %c-4_i32_49 : i32
    llvm.store %153, %1 : i32, !llvm.ptr
    %154 = llvm.load %4 : !llvm.ptr -> i32
    %155 = llvm.load %5 : !llvm.ptr -> i32
    %156 = arith.cmpi ult, %154, %155 : i32
    %157 = arith.extui %156 : i1 to i32
    %c0_i32_50 = arith.constant 0 : i32
    %158 = arith.cmpi ne, %157, %c0_i32_50 : i32
    cf.cond_br %158, ^bb23, ^bb24
  ^bb24:  // pred: ^bb23
    cf.br ^bb5
  ^bb25:  // 2 preds: ^bb27, ^bb33
    %159 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_51 = arith.constant 0 : i32
    %160 = arith.cmpi eq, %159, %c0_i32_51 : i32
    %161 = arith.extui %160 : i1 to i32
    %c0_i32_52 = arith.constant 0 : i32
    %162 = arith.cmpi ne, %161, %c0_i32_52 : i32
    cf.cond_br %162, ^bb3, ^bb44
  ^bb26:  // pred: ^bb6
    %163 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_53 = arith.constant 0 : i32
    %164 = llvm.load %0 : !llvm.ptr -> i32
    %165 = arith.subi %c0_i32_53, %164 : i32
    %c3_i32_54 = arith.constant 3 : i32
    %166 = arith.andi %165, %c3_i32_54 : i32
    llvm.store %166, %3 : i32, !llvm.ptr
    %167 = arith.addi %163, %166 : i32
    llvm.store %167, %5 : i32, !llvm.ptr
    %168 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_55 = arith.constant 0 : i32
    %169 = arith.cmpi eq, %168, %c0_i32_55 : i32
    %170 = arith.extui %169 : i1 to i32
    %c0_i32_56 = arith.constant 0 : i32
    %171 = arith.cmpi ne, %170, %c0_i32_56 : i32
    cf.cond_br %171, ^bb28, ^bb29
  ^bb27:  // pred: ^bb6
    %172 = llvm.load %0 : !llvm.ptr -> i32
    llvm.store %172, %4 : i32, !llvm.ptr
    cf.br ^bb25
  ^bb28:  // 2 preds: ^bb26, ^bb30
    %173 = llvm.load %5 : !llvm.ptr -> i32
    %174 = llvm.load %2 : !llvm.ptr -> i32
    %175 = llvm.load %3 : !llvm.ptr -> i32
    %176 = arith.subi %174, %175 : i32
    llvm.store %176, %9 : i32, !llvm.ptr
    %c-4_i32_57 = arith.constant -4 : i32
    %177 = arith.andi %176, %c-4_i32_57 : i32
    llvm.store %177, %7 : i32, !llvm.ptr
    %178 = arith.addi %173, %177 : i32
    llvm.store %178, %4 : i32, !llvm.ptr
    %179 = llvm.load %1 : !llvm.ptr -> i32
    %180 = llvm.load %3 : !llvm.ptr -> i32
    %181 = arith.addi %179, %180 : i32
    llvm.store %181, %6 : i32, !llvm.ptr
    %c3_i32_58 = arith.constant 3 : i32
    %182 = arith.andi %181, %c3_i32_58 : i32
    %c0_i32_59 = arith.constant 0 : i32
    %183 = arith.cmpi eq, %182, %c0_i32_59 : i32
    %184 = arith.extui %183 : i1 to i32
    %c0_i32_60 = arith.constant 0 : i32
    %185 = arith.cmpi ne, %184, %c0_i32_60 : i32
    cf.cond_br %185, ^bb34, ^bb35
  ^bb29:  // pred: ^bb26
    %186 = llvm.load %0 : !llvm.ptr -> i32
    llvm.store %186, %4 : i32, !llvm.ptr
    %187 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %187, %8 : i32, !llvm.ptr
    cf.br ^bb31
  ^bb30:  // pred: ^bb32
    cf.br ^bb28
  ^bb31:  // 2 preds: ^bb29, ^bb31
    %188 = llvm.load %4 : !llvm.ptr -> i32
    %189 = llvm.load %8 : !llvm.ptr -> i32
    %c0_i64_61 = arith.constant 0 : i64
    %190 = arith.extui %189 : i32 to i64
    %191 = arith.addi %190, %c0_i64_61 : i64
    %192 = llvm.getelementptr %13[%191] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %193 = llvm.load volatile %192 {alignment = 1 : i64} : !llvm.ptr -> i8
    %194 = arith.extui %193 : i8 to i32
    %c0_i64_62 = arith.constant 0 : i64
    %195 = arith.extui %188 : i32 to i64
    %196 = arith.addi %195, %c0_i64_62 : i64
    %197 = llvm.getelementptr %13[%196] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %198 = arith.trunci %194 : i32 to i8
    llvm.store volatile %198, %197 {alignment = 1 : i64} : i8, !llvm.ptr
    %199 = llvm.load %8 : !llvm.ptr -> i32
    %c1_i32_63 = arith.constant 1 : i32
    %200 = arith.addi %199, %c1_i32_63 : i32
    llvm.store %200, %8 : i32, !llvm.ptr
    %201 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i32_64 = arith.constant 1 : i32
    %202 = arith.addi %201, %c1_i32_64 : i32
    llvm.store %202, %4 : i32, !llvm.ptr
    %203 = llvm.load %5 : !llvm.ptr -> i32
    %204 = arith.cmpi ult, %202, %203 : i32
    %205 = arith.extui %204 : i1 to i32
    %c0_i32_65 = arith.constant 0 : i32
    %206 = arith.cmpi ne, %205, %c0_i32_65 : i32
    cf.cond_br %206, ^bb31, ^bb32
  ^bb32:  // pred: ^bb31
    cf.br ^bb30
  ^bb33:  // 4 preds: ^bb34, ^bb35, ^bb39, ^bb41
    %207 = llvm.load %9 : !llvm.ptr -> i32
    %c3_i32_66 = arith.constant 3 : i32
    %208 = arith.andi %207, %c3_i32_66 : i32
    llvm.store %208, %2 : i32, !llvm.ptr
    %209 = llvm.load %6 : !llvm.ptr -> i32
    %210 = llvm.load %7 : !llvm.ptr -> i32
    %211 = arith.addi %209, %210 : i32
    llvm.store %211, %1 : i32, !llvm.ptr
    cf.br ^bb25
  ^bb34:  // 2 preds: ^bb28, ^bb37
    %212 = llvm.load %7 : !llvm.ptr -> i32
    %c1_i32_67 = arith.constant 1 : i32
    %213 = arith.cmpi slt, %212, %c1_i32_67 : i32
    %214 = arith.extui %213 : i1 to i32
    %c0_i32_68 = arith.constant 0 : i32
    %215 = arith.cmpi ne, %214, %c0_i32_68 : i32
    cf.cond_br %215, ^bb33, ^bb40
  ^bb35:  // pred: ^bb28
    %216 = llvm.load %7 : !llvm.ptr -> i32
    %c1_i32_69 = arith.constant 1 : i32
    %217 = arith.cmpi slt, %216, %c1_i32_69 : i32
    %218 = arith.extui %217 : i1 to i32
    %c0_i32_70 = arith.constant 0 : i32
    %219 = arith.cmpi ne, %218, %c0_i32_70 : i32
    cf.cond_br %219, ^bb33, ^bb36
  ^bb36:  // pred: ^bb35
    %220 = llvm.load %6 : !llvm.ptr -> i32
    %c3_i32_71 = arith.constant 3 : i32
    %c31_i32_72 = arith.constant 31 : i32
    %221 = arith.cmpi ule, %c3_i32_71, %c31_i32_72 : i32
    %222 = scf.if %221 -> (i32) {
      %326 = arith.shli %220, %c3_i32_71 : i32
      scf.yield %326 : i32
    } else {
      %c0_i32_101 = arith.constant 0 : i32
      scf.yield %c0_i32_101 : i32
    }
    llvm.store %222, %8 : i32, !llvm.ptr
    %c24_i32_73 = arith.constant 24 : i32
    %223 = arith.andi %222, %c24_i32_73 : i32
    llvm.store %223, %2 : i32, !llvm.ptr
    %224 = llvm.load %6 : !llvm.ptr -> i32
    %c-4_i32_74 = arith.constant -4 : i32
    %225 = arith.andi %224, %c-4_i32_74 : i32
    llvm.store %225, %10 : i32, !llvm.ptr
    %c4_i32 = arith.constant 4 : i32
    %226 = arith.addi %225, %c4_i32 : i32
    llvm.store %226, %1 : i32, !llvm.ptr
    %c0_i32_75 = arith.constant 0 : i32
    %227 = llvm.load %8 : !llvm.ptr -> i32
    %228 = arith.subi %c0_i32_75, %227 : i32
    %c24_i32_76 = arith.constant 24 : i32
    %229 = arith.andi %228, %c24_i32_76 : i32
    llvm.store %229, %3 : i32, !llvm.ptr
    %230 = llvm.load %10 : !llvm.ptr -> i32
    %c0_i64_77 = arith.constant 0 : i64
    %231 = arith.extui %230 : i32 to i64
    %232 = arith.addi %231, %c0_i64_77 : i64
    %233 = llvm.getelementptr %13[%232] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %234 = llvm.load volatile %233 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %234, %8 : i32, !llvm.ptr
    cf.br ^bb38
  ^bb37:  // no predecessors
    cf.br ^bb34
  ^bb38:  // 2 preds: ^bb36, ^bb38
    %235 = llvm.load %5 : !llvm.ptr -> i32
    %236 = llvm.load %8 : !llvm.ptr -> i32
    %237 = llvm.load %2 : !llvm.ptr -> i32
    %c31_i32_78 = arith.constant 31 : i32
    %238 = arith.cmpi ule, %237, %c31_i32_78 : i32
    %239 = scf.if %238 -> (i32) {
      %326 = arith.shrui %236, %237 : i32
      scf.yield %326 : i32
    } else {
      %c0_i32_101 = arith.constant 0 : i32
      scf.yield %c0_i32_101 : i32
    }
    %240 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_79 = arith.constant 0 : i64
    %241 = arith.extui %240 : i32 to i64
    %242 = arith.addi %241, %c0_i64_79 : i64
    %243 = llvm.getelementptr %13[%242] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %244 = llvm.load volatile %243 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %244, %8 : i32, !llvm.ptr
    %245 = llvm.load %3 : !llvm.ptr -> i32
    %c31_i32_80 = arith.constant 31 : i32
    %246 = arith.cmpi ule, %245, %c31_i32_80 : i32
    %247 = scf.if %246 -> (i32) {
      %326 = arith.shli %244, %245 : i32
      scf.yield %326 : i32
    } else {
      %c0_i32_101 = arith.constant 0 : i32
      scf.yield %c0_i32_101 : i32
    }
    %248 = arith.ori %239, %247 : i32
    %c0_i64_81 = arith.constant 0 : i64
    %249 = arith.extui %235 : i32 to i64
    %250 = arith.addi %249, %c0_i64_81 : i64
    %251 = llvm.getelementptr %13[%250] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %248, %251 {alignment = 1 : i64} : i32, !llvm.ptr
    %252 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32_82 = arith.constant 4 : i32
    %253 = arith.addi %252, %c4_i32_82 : i32
    llvm.store %253, %1 : i32, !llvm.ptr
    %254 = llvm.load %5 : !llvm.ptr -> i32
    %c4_i32_83 = arith.constant 4 : i32
    %255 = arith.addi %254, %c4_i32_83 : i32
    llvm.store %255, %5 : i32, !llvm.ptr
    %256 = llvm.load %4 : !llvm.ptr -> i32
    %257 = arith.cmpi ult, %255, %256 : i32
    %258 = arith.extui %257 : i1 to i32
    %c0_i32_84 = arith.constant 0 : i32
    %259 = arith.cmpi ne, %258, %c0_i32_84 : i32
    cf.cond_br %259, ^bb38, ^bb39
  ^bb39:  // pred: ^bb38
    cf.br ^bb33
  ^bb40:  // pred: ^bb34
    %260 = llvm.load %6 : !llvm.ptr -> i32
    llvm.store %260, %1 : i32, !llvm.ptr
    cf.br ^bb42
  ^bb41:  // pred: ^bb43
    cf.br ^bb33
  ^bb42:  // 2 preds: ^bb40, ^bb42
    %261 = llvm.load %5 : !llvm.ptr -> i32
    %262 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_85 = arith.constant 0 : i64
    %263 = arith.extui %262 : i32 to i64
    %264 = arith.addi %263, %c0_i64_85 : i64
    %265 = llvm.getelementptr %13[%264] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %266 = llvm.load volatile %265 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_86 = arith.constant 0 : i64
    %267 = arith.extui %261 : i32 to i64
    %268 = arith.addi %267, %c0_i64_86 : i64
    %269 = llvm.getelementptr %13[%268] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %266, %269 {alignment = 1 : i64} : i32, !llvm.ptr
    %270 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32_87 = arith.constant 4 : i32
    %271 = arith.addi %270, %c4_i32_87 : i32
    llvm.store %271, %1 : i32, !llvm.ptr
    %272 = llvm.load %5 : !llvm.ptr -> i32
    %c4_i32_88 = arith.constant 4 : i32
    %273 = arith.addi %272, %c4_i32_88 : i32
    llvm.store %273, %5 : i32, !llvm.ptr
    %274 = llvm.load %4 : !llvm.ptr -> i32
    %275 = arith.cmpi ult, %273, %274 : i32
    %276 = arith.extui %275 : i1 to i32
    %c0_i32_89 = arith.constant 0 : i32
    %277 = arith.cmpi ne, %276, %c0_i32_89 : i32
    cf.cond_br %277, ^bb42, ^bb43
  ^bb43:  // pred: ^bb42
    cf.br ^bb41
  ^bb44:  // pred: ^bb25
    %278 = llvm.load %4 : !llvm.ptr -> i32
    %279 = llvm.load %2 : !llvm.ptr -> i32
    %280 = arith.addi %278, %279 : i32
    llvm.store %280, %5 : i32, !llvm.ptr
    cf.br ^bb46
  ^bb45:  // no predecessors
    cf.br ^bb5
  ^bb46:  // 2 preds: ^bb44, ^bb46
    %281 = llvm.load %4 : !llvm.ptr -> i32
    %282 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_90 = arith.constant 0 : i64
    %283 = arith.extui %282 : i32 to i64
    %284 = arith.addi %283, %c0_i64_90 : i64
    %285 = llvm.getelementptr %13[%284] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %286 = llvm.load volatile %285 {alignment = 1 : i64} : !llvm.ptr -> i8
    %287 = arith.extui %286 : i8 to i32
    %c0_i64_91 = arith.constant 0 : i64
    %288 = arith.extui %281 : i32 to i64
    %289 = arith.addi %288, %c0_i64_91 : i64
    %290 = llvm.getelementptr %13[%289] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %291 = arith.trunci %287 : i32 to i8
    llvm.store volatile %291, %290 {alignment = 1 : i64} : i8, !llvm.ptr
    %292 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_92 = arith.constant 1 : i32
    %293 = arith.addi %292, %c1_i32_92 : i32
    llvm.store %293, %1 : i32, !llvm.ptr
    %294 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i32_93 = arith.constant 1 : i32
    %295 = arith.addi %294, %c1_i32_93 : i32
    llvm.store %295, %4 : i32, !llvm.ptr
    %296 = llvm.load %5 : !llvm.ptr -> i32
    %297 = arith.cmpi ult, %295, %296 : i32
    %298 = arith.extui %297 : i1 to i32
    %c0_i32_94 = arith.constant 0 : i32
    %299 = arith.cmpi ne, %298, %c0_i32_94 : i32
    cf.cond_br %299, ^bb46, ^bb47
  ^bb47:  // pred: ^bb46
    cf.br ^bb3
  ^bb48:  // pred: ^bb5
    %300 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i32_95 = arith.constant 0 : i32
    %301 = llvm.load %6 : !llvm.ptr -> i32
    %302 = arith.subi %c0_i32_95, %301 : i32
    %303 = arith.addi %300, %302 : i32
    llvm.store %303, %3 : i32, !llvm.ptr
    %304 = llvm.load %4 : !llvm.ptr -> i32
    %305 = llvm.load %1 : !llvm.ptr -> i32
    %306 = arith.subi %304, %305 : i32
    llvm.store %306, %5 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb49:  // pred: ^bb51
    cf.br ^bb3
  ^bb50:  // 2 preds: ^bb4, ^bb50
    %307 = llvm.load %4 : !llvm.ptr -> i32
    %c-1_i32_96 = arith.constant -1 : i32
    %308 = arith.addi %307, %c-1_i32_96 : i32
    llvm.store %308, %4 : i32, !llvm.ptr
    %309 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_97 = arith.constant 0 : i64
    %310 = arith.extui %309 : i32 to i64
    %311 = arith.addi %310, %c0_i64_97 : i64
    %312 = llvm.getelementptr %13[%311] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %313 = llvm.load volatile %312 {alignment = 1 : i64} : !llvm.ptr -> i8
    %314 = arith.extui %313 : i8 to i32
    %c0_i64_98 = arith.constant 0 : i64
    %315 = arith.extui %308 : i32 to i64
    %316 = arith.addi %315, %c0_i64_98 : i64
    %317 = llvm.getelementptr %13[%316] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %318 = arith.trunci %314 : i32 to i8
    llvm.store volatile %318, %317 {alignment = 1 : i64} : i8, !llvm.ptr
    %319 = llvm.load %1 : !llvm.ptr -> i32
    %c-1_i32_99 = arith.constant -1 : i32
    %320 = arith.addi %319, %c-1_i32_99 : i32
    llvm.store %320, %1 : i32, !llvm.ptr
    %321 = llvm.load %5 : !llvm.ptr -> i32
    %322 = llvm.load %4 : !llvm.ptr -> i32
    %323 = arith.cmpi ult, %321, %322 : i32
    %324 = arith.extui %323 : i1 to i32
    %c0_i32_100 = arith.constant 0 : i32
    %325 = arith.cmpi ne, %324, %c0_i32_100 : i32
    cf.cond_br %325, ^bb50, ^bb51
  ^bb51:  // pred: ^bb50
    cf.br ^bb49
  }
  func.func @f87(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %3 = llvm.load %0 : !llvm.ptr -> i32
    %4 = llvm.load %1 : !llvm.ptr -> i32
    %5 = llvm.load %2 : !llvm.ptr -> i32
    %6 = call @f86(%arg0, %3, %4, %5) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%6 : i32)
  ^bb2(%7: i32):  // pred: ^bb1
    return %7 : i32
  }
  func.func @f88(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %3 = llvm.load %0 : !llvm.ptr -> i32
    %4 = llvm.load %1 : !llvm.ptr -> i32
    %5 = llvm.load %2 : !llvm.ptr -> i32
    %6 = call @f85(%arg0, %3, %4, %5) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%6 : i32)
  ^bb2(%7: i32):  // pred: ^bb1
    return %7 : i32
  }
  func.func private @dora_fn_wasm_table_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_copy(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_fill(!llvm.ptr, i32, i32, !llvm.ptr, i32)
  func.func private @dora_fn_wasm_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_table_set(!llvm.ptr, i32, i32, !llvm.ptr)
  func.func private @dora_fn_wasm_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_imported_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_func_ref(!llvm.ptr, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_data_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_elem_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_raise_trap(i32)
}
