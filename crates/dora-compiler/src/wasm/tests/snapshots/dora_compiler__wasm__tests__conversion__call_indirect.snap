---
source: crates/dora-compiler/src/wasm/tests/conversion.rs
expression: op
snapshot_kind: text
---
module {
  func.func @"const-i32"(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c306_i32 = arith.constant 306 : i32
    cf.br ^bb2(%c306_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func @"const-i64"(%arg0: !llvm.ptr) -> i64 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c356_i64 = arith.constant 356 : i64
    cf.br ^bb2(%c356_i64 : i64)
  ^bb2(%0: i64):  // pred: ^bb1
    return %0 : i64
  }
  func.func @"const-f32"(%arg0: !llvm.ptr) -> f32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1165172736_i32 = arith.constant 1165172736 : i32
    %0 = arith.bitcast %c1165172736_i32 : i32 to f32
    cf.br ^bb2(%0 : f32)
  ^bb2(%1: f32):  // pred: ^bb1
    return %1 : f32
  }
  func.func @"const-f64"(%arg0: !llvm.ptr) -> f64 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c4660882566700597248_i64 = arith.constant 4660882566700597248 : i64
    %0 = arith.bitcast %c4660882566700597248_i64 : i64 to f64
    cf.br ^bb2(%0 : f64)
  ^bb2(%1: f64):  // pred: ^bb1
    return %1 : f64
  }
  func.func @"const-f64-i32"(%arg0: !llvm.ptr) -> (f64, i32) {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c4660882566700597248_i64 = arith.constant 4660882566700597248 : i64
    %0 = arith.bitcast %c4660882566700597248_i64 : i64 to f64
    %c32_i32 = arith.constant 32 : i32
    cf.br ^bb2(%0, %c32_i32 : f64, i32)
  ^bb2(%1: f64, %2: i32):  // pred: ^bb1
    return %1, %2 : f64, i32
  }
  func.func @"id-i32"(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%1 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func @"id-i64"(%arg0: !llvm.ptr, %arg1: i64) -> i64 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i64
    cf.br ^bb2(%1 : i64)
  ^bb2(%2: i64):  // pred: ^bb1
    return %2 : i64
  }
  func.func @"id-f32"(%arg0: !llvm.ptr, %arg1: f32) -> f32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : f32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> f32
    cf.br ^bb2(%1 : f32)
  ^bb2(%2: f32):  // pred: ^bb1
    return %2 : f32
  }
  func.func @"id-f64"(%arg0: !llvm.ptr, %arg1: f64) -> f64 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : f64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> f64
    cf.br ^bb2(%1 : f64)
  ^bb2(%2: f64):  // pred: ^bb1
    return %2 : f64
  }
  func.func @"id-i32-f64"(%arg0: !llvm.ptr, %arg1: i32, %arg2: f64) -> (i32, f64) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : f64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = llvm.load %1 : !llvm.ptr -> f64
    cf.br ^bb2(%2, %3 : i32, f64)
  ^bb2(%4: i32, %5: f64):  // pred: ^bb1
    return %4, %5 : i32, f64
  }
  func.func @"swap-i32-i64"(%arg0: !llvm.ptr, %arg1: i32, %arg2: i64) -> (i64, i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %1 : !llvm.ptr -> i64
    %3 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%2, %3 : i64, i32)
  ^bb2(%4: i64, %5: i32):  // pred: ^bb1
    return %4, %5 : i64, i32
  }
  func.func @"i32-i64"(%arg0: !llvm.ptr, %arg1: i32, %arg2: i64) -> i64 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %1 : !llvm.ptr -> i64
    cf.br ^bb2(%2 : i64)
  ^bb2(%3: i64):  // pred: ^bb1
    return %3 : i64
  }
  func.func @"i64-f64"(%arg0: !llvm.ptr, %arg1: i64, %arg2: f64) -> f64 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : f64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %1 : !llvm.ptr -> f64
    cf.br ^bb2(%2 : f64)
  ^bb2(%3: f64):  // pred: ^bb1
    return %3 : f64
  }
  func.func @"f32-i32"(%arg0: !llvm.ptr, %arg1: f32, %arg2: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : f32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %1 : !llvm.ptr -> i32
    cf.br ^bb2(%2 : i32)
  ^bb2(%3: i32):  // pred: ^bb1
    return %3 : i32
  }
  func.func @"f64-f32"(%arg0: !llvm.ptr, %arg1: f64, %arg2: f32) -> f32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : f64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : f32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %1 : !llvm.ptr -> f32
    cf.br ^bb2(%2 : f32)
  ^bb2(%3: f32):  // pred: ^bb1
    return %3 : f32
  }
  func.func @"over-i32-duplicate"(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%1 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func @"over-i64-duplicate"(%arg0: !llvm.ptr, %arg1: i64) -> i64 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i64
    cf.br ^bb2(%1 : i64)
  ^bb2(%2: i64):  // pred: ^bb1
    return %2 : i64
  }
  func.func @"over-f32-duplicate"(%arg0: !llvm.ptr, %arg1: f32) -> f32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : f32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> f32
    cf.br ^bb2(%1 : f32)
  ^bb2(%2: f32):  // pred: ^bb1
    return %2 : f32
  }
  func.func @"over-f64-duplicate"(%arg0: !llvm.ptr, %arg1: f64) -> f64 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : f64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> f64
    cf.br ^bb2(%1 : f64)
  ^bb2(%2: f64):  // pred: ^bb1
    return %2 : f64
  }
  func.func @f19(%arg0: !llvm.ptr) {
    %0 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i32
    %6 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> i32
    %8 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.load %3 : !llvm.ptr -> i32
    %10 = llvm.getelementptr %arg0[84] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> i32
    %12 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.load %3 : !llvm.ptr -> i32
    %14 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %15 = llvm.load %3 : !llvm.ptr -> i32
    %16 = llvm.getelementptr %arg0[4] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %16 : !llvm.ptr -> i32
    %18 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.load %3 : !llvm.ptr -> i32
    %20 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %21 = llvm.load %3 : !llvm.ptr -> i32
    %22 = llvm.getelementptr %arg0[88] : (!llvm.ptr) -> !llvm.ptr, i8
    %23 = llvm.load %22 : !llvm.ptr -> i32
    %24 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %25 = llvm.load %3 : !llvm.ptr -> i32
    %26 = llvm.getelementptr %arg0[92] : (!llvm.ptr) -> !llvm.ptr, i8
    %27 = llvm.load %26 : !llvm.ptr -> i32
    %28 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %29 = llvm.load %3 : !llvm.ptr -> i32
    %30 = llvm.getelementptr %arg0[28] : (!llvm.ptr) -> !llvm.ptr, i8
    %31 = llvm.load %30 : !llvm.ptr -> i32
    %32 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %33 = llvm.load %3 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %34 = arith.cmpi ult, %c0_i32, %5 : i32
    cf.cond_br %34, ^bb3, ^bb4
  ^bb2:  // pred: ^bb55
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %35 = llvm.getelementptr %4[%c0_i32] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %36 = llvm.load %35 : !llvm.ptr -> !llvm.ptr
    %37 = llvm.load %36 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %38 = arith.cmpi eq, %37, %c0_i32_0 : i32
    cf.cond_br %38, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 3 preds: ^bb3, ^bb6, ^bb8
    %39 = llvm.getelementptr %36[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %40 = llvm.getelementptr %36[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %41 = llvm.getelementptr %36[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %42 = llvm.load %39 : !llvm.ptr -> !llvm.ptr
    %43 = llvm.load %40 : !llvm.ptr -> i32
    %44 = llvm.load %41 : !llvm.ptr -> !llvm.ptr
    %45 = llvm.load %42 : !llvm.ptr -> i32
    %c0_i32_1 = arith.constant 0 : i32
    %46 = arith.cmpi eq, %45, %c0_i32_1 : i32
    %47 = arith.cmpi ne, %1, %43 : i32
    %48 = arith.ori %46, %47 : i1
    cf.cond_br %48, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // pred: ^bb5
    %49 = llvm.call %42(%44) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr) -> !llvm.void
    %c0_i64 = arith.constant 0 : i64
    %c0_i32_2 = arith.constant 0 : i32
    %50 = arith.cmpi ult, %c0_i32_2, %9 : i32
    cf.cond_br %50, ^bb9, ^bb10
  ^bb8:  // pred: ^bb5
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %51 = llvm.getelementptr %8[%c0_i32_2] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %52 = llvm.load %51 : !llvm.ptr -> !llvm.ptr
    %53 = llvm.load %52 : !llvm.ptr -> i32
    %c0_i32_3 = arith.constant 0 : i32
    %54 = arith.cmpi eq, %53, %c0_i32_3 : i32
    cf.cond_br %54, ^bb12, ^bb11
  ^bb10:  // pred: ^bb7
    %c3_i32_4 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_4) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 3 preds: ^bb9, ^bb12, ^bb14
    %55 = llvm.getelementptr %52[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %56 = llvm.getelementptr %52[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %57 = llvm.getelementptr %52[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %58 = llvm.load %55 : !llvm.ptr -> !llvm.ptr
    %59 = llvm.load %56 : !llvm.ptr -> i32
    %60 = llvm.load %57 : !llvm.ptr -> !llvm.ptr
    %61 = llvm.load %58 : !llvm.ptr -> i32
    %c0_i32_5 = arith.constant 0 : i32
    %62 = arith.cmpi eq, %61, %c0_i32_5 : i32
    %63 = arith.cmpi ne, %7, %59 : i32
    %64 = arith.ori %62, %63 : i1
    cf.cond_br %64, ^bb14, ^bb13
  ^bb12:  // pred: ^bb9
    %c4_i32_6 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_6) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // pred: ^bb11
    %65 = llvm.call %58(%60, %c0_i64) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i64) -> !llvm.void
    %c0_i64_7 = arith.constant 0 : i64
    %c0_i64_8 = arith.constant 0 : i64
    %66 = arith.bitcast %c0_i64_8 : i64 to f64
    %c0_i32_9 = arith.constant 0 : i32
    %c0_i64_10 = arith.constant 0 : i64
    %c0_i32_11 = arith.constant 0 : i32
    %67 = arith.cmpi ult, %c0_i32_11, %13 : i32
    cf.cond_br %67, ^bb15, ^bb16
  ^bb14:  // pred: ^bb11
    %c5_i32_12 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_12) : (i32) -> ()
    cf.br ^bb11
  ^bb15:  // 2 preds: ^bb13, ^bb16
    %68 = llvm.getelementptr %12[%c0_i32_11] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %69 = llvm.load %68 : !llvm.ptr -> !llvm.ptr
    %70 = llvm.load %69 : !llvm.ptr -> i32
    %c0_i32_13 = arith.constant 0 : i32
    %71 = arith.cmpi eq, %70, %c0_i32_13 : i32
    cf.cond_br %71, ^bb18, ^bb17
  ^bb16:  // pred: ^bb13
    %c3_i32_14 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_14) : (i32) -> ()
    cf.br ^bb15
  ^bb17:  // 3 preds: ^bb15, ^bb18, ^bb20
    %72 = llvm.getelementptr %69[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %73 = llvm.getelementptr %69[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %74 = llvm.getelementptr %69[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %75 = llvm.load %72 : !llvm.ptr -> !llvm.ptr
    %76 = llvm.load %73 : !llvm.ptr -> i32
    %77 = llvm.load %74 : !llvm.ptr -> !llvm.ptr
    %78 = llvm.load %75 : !llvm.ptr -> i32
    %c0_i32_15 = arith.constant 0 : i32
    %79 = arith.cmpi eq, %78, %c0_i32_15 : i32
    %80 = arith.cmpi ne, %11, %76 : i32
    %81 = arith.ori %79, %80 : i1
    cf.cond_br %81, ^bb20, ^bb19
  ^bb18:  // pred: ^bb15
    %c4_i32_16 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_16) : (i32) -> ()
    cf.br ^bb17
  ^bb19:  // pred: ^bb17
    %82 = llvm.call %75(%77, %c0_i64_7, %66, %c0_i32_9, %c0_i64_10) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i64, f64, i32, i64) -> !llvm.void
    %c0_i32_17 = arith.constant 0 : i32
    %83 = arith.cmpi ult, %c0_i32_17, %15 : i32
    cf.cond_br %83, ^bb21, ^bb22
  ^bb20:  // pred: ^bb17
    %c5_i32_18 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_18) : (i32) -> ()
    cf.br ^bb17
  ^bb21:  // 2 preds: ^bb19, ^bb22
    %84 = llvm.getelementptr %14[%c0_i32_17] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %85 = llvm.load %84 : !llvm.ptr -> !llvm.ptr
    %86 = llvm.load %85 : !llvm.ptr -> i32
    %c0_i32_19 = arith.constant 0 : i32
    %87 = arith.cmpi eq, %86, %c0_i32_19 : i32
    cf.cond_br %87, ^bb24, ^bb23
  ^bb22:  // pred: ^bb19
    %c3_i32_20 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_20) : (i32) -> ()
    cf.br ^bb21
  ^bb23:  // 3 preds: ^bb21, ^bb24, ^bb26
    %88 = llvm.getelementptr %85[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %89 = llvm.getelementptr %85[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %90 = llvm.getelementptr %85[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %91 = llvm.load %88 : !llvm.ptr -> !llvm.ptr
    %92 = llvm.load %89 : !llvm.ptr -> i32
    %93 = llvm.load %90 : !llvm.ptr -> !llvm.ptr
    %94 = llvm.load %91 : !llvm.ptr -> i32
    %c0_i32_21 = arith.constant 0 : i32
    %95 = arith.cmpi eq, %94, %c0_i32_21 : i32
    %96 = arith.cmpi ne, %1, %92 : i32
    %97 = arith.ori %95, %96 : i1
    cf.cond_br %97, ^bb26, ^bb25
  ^bb24:  // pred: ^bb21
    %c4_i32_22 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_22) : (i32) -> ()
    cf.br ^bb23
  ^bb25:  // pred: ^bb23
    %98 = llvm.call %91(%93) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr) -> !llvm.void
    %c0_i32_23 = arith.constant 0 : i32
    %99 = arith.cmpi ult, %c0_i32_23, %19 : i32
    cf.cond_br %99, ^bb27, ^bb28
  ^bb26:  // pred: ^bb23
    %c5_i32_24 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_24) : (i32) -> ()
    cf.br ^bb23
  ^bb27:  // 2 preds: ^bb25, ^bb28
    %100 = llvm.getelementptr %18[%c0_i32_23] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %101 = llvm.load %100 : !llvm.ptr -> !llvm.ptr
    %102 = llvm.load %101 : !llvm.ptr -> i32
    %c0_i32_25 = arith.constant 0 : i32
    %103 = arith.cmpi eq, %102, %c0_i32_25 : i32
    cf.cond_br %103, ^bb30, ^bb29
  ^bb28:  // pred: ^bb25
    %c3_i32_26 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_26) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // 3 preds: ^bb27, ^bb30, ^bb32
    %104 = llvm.getelementptr %101[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %105 = llvm.getelementptr %101[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %106 = llvm.getelementptr %101[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %107 = llvm.load %104 : !llvm.ptr -> !llvm.ptr
    %108 = llvm.load %105 : !llvm.ptr -> i32
    %109 = llvm.load %106 : !llvm.ptr -> !llvm.ptr
    %110 = llvm.load %107 : !llvm.ptr -> i32
    %c0_i32_27 = arith.constant 0 : i32
    %111 = arith.cmpi eq, %110, %c0_i32_27 : i32
    %112 = arith.cmpi ne, %17, %108 : i32
    %113 = arith.ori %111, %112 : i1
    cf.cond_br %113, ^bb32, ^bb31
  ^bb30:  // pred: ^bb27
    %c4_i32_28 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_28) : (i32) -> ()
    cf.br ^bb29
  ^bb31:  // pred: ^bb29
    %114 = llvm.call %107(%109) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr) -> i32
    %c0_i32_29 = arith.constant 0 : i32
    %115 = arith.cmpi eq, %114, %c0_i32_29 : i32
    %116 = arith.extui %115 : i1 to i32
    %c0_i32_30 = arith.constant 0 : i32
    %117 = arith.cmpi ult, %c0_i32_30, %21 : i32
    cf.cond_br %117, ^bb33, ^bb34
  ^bb32:  // pred: ^bb29
    %c5_i32_31 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_31) : (i32) -> ()
    cf.br ^bb29
  ^bb33:  // 2 preds: ^bb31, ^bb34
    %118 = llvm.getelementptr %20[%c0_i32_30] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %119 = llvm.load %118 : !llvm.ptr -> !llvm.ptr
    %120 = llvm.load %119 : !llvm.ptr -> i32
    %c0_i32_32 = arith.constant 0 : i32
    %121 = arith.cmpi eq, %120, %c0_i32_32 : i32
    cf.cond_br %121, ^bb36, ^bb35
  ^bb34:  // pred: ^bb31
    %c3_i32_33 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_33) : (i32) -> ()
    cf.br ^bb33
  ^bb35:  // 3 preds: ^bb33, ^bb36, ^bb38
    %122 = llvm.getelementptr %119[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %123 = llvm.getelementptr %119[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %124 = llvm.getelementptr %119[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %125 = llvm.load %122 : !llvm.ptr -> !llvm.ptr
    %126 = llvm.load %123 : !llvm.ptr -> i32
    %127 = llvm.load %124 : !llvm.ptr -> !llvm.ptr
    %128 = llvm.load %125 : !llvm.ptr -> i32
    %c0_i32_34 = arith.constant 0 : i32
    %129 = arith.cmpi eq, %128, %c0_i32_34 : i32
    %130 = arith.cmpi ne, %17, %126 : i32
    %131 = arith.ori %129, %130 : i1
    cf.cond_br %131, ^bb38, ^bb37
  ^bb36:  // pred: ^bb33
    %c4_i32_35 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_35) : (i32) -> ()
    cf.br ^bb35
  ^bb37:  // pred: ^bb35
    %132 = llvm.call %125(%127) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr) -> i32
    %c0_i32_36 = arith.constant 0 : i32
    %133 = arith.cmpi eq, %132, %c0_i32_36 : i32
    %134 = arith.extui %133 : i1 to i32
    %c0_i64_37 = arith.constant 0 : i64
    %c0_i32_38 = arith.constant 0 : i32
    %135 = arith.cmpi ult, %c0_i32_38, %25 : i32
    cf.cond_br %135, ^bb39, ^bb40
  ^bb38:  // pred: ^bb35
    %c5_i32_39 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_39) : (i32) -> ()
    cf.br ^bb35
  ^bb39:  // 2 preds: ^bb37, ^bb40
    %136 = llvm.getelementptr %24[%c0_i32_38] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %137 = llvm.load %136 : !llvm.ptr -> !llvm.ptr
    %138 = llvm.load %137 : !llvm.ptr -> i32
    %c0_i32_40 = arith.constant 0 : i32
    %139 = arith.cmpi eq, %138, %c0_i32_40 : i32
    cf.cond_br %139, ^bb42, ^bb41
  ^bb40:  // pred: ^bb37
    %c3_i32_41 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_41) : (i32) -> ()
    cf.br ^bb39
  ^bb41:  // 3 preds: ^bb39, ^bb42, ^bb44
    %140 = llvm.getelementptr %137[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %141 = llvm.getelementptr %137[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %142 = llvm.getelementptr %137[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %143 = llvm.load %140 : !llvm.ptr -> !llvm.ptr
    %144 = llvm.load %141 : !llvm.ptr -> i32
    %145 = llvm.load %142 : !llvm.ptr -> !llvm.ptr
    %146 = llvm.load %143 : !llvm.ptr -> i32
    %c0_i32_42 = arith.constant 0 : i32
    %147 = arith.cmpi eq, %146, %c0_i32_42 : i32
    %148 = arith.cmpi ne, %23, %144 : i32
    %149 = arith.ori %147, %148 : i1
    cf.cond_br %149, ^bb44, ^bb43
  ^bb42:  // pred: ^bb39
    %c4_i32_43 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_43) : (i32) -> ()
    cf.br ^bb41
  ^bb43:  // pred: ^bb41
    %150 = llvm.call %143(%145, %c0_i64_37) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i64) -> i32
    %c0_i32_44 = arith.constant 0 : i32
    %151 = arith.cmpi eq, %150, %c0_i32_44 : i32
    %152 = arith.extui %151 : i1 to i32
    %c0_i64_45 = arith.constant 0 : i64
    %c0_i64_46 = arith.constant 0 : i64
    %153 = arith.bitcast %c0_i64_46 : i64 to f64
    %c0_i32_47 = arith.constant 0 : i32
    %c0_i64_48 = arith.constant 0 : i64
    %c0_i32_49 = arith.constant 0 : i32
    %154 = arith.cmpi ult, %c0_i32_49, %29 : i32
    cf.cond_br %154, ^bb45, ^bb46
  ^bb44:  // pred: ^bb41
    %c5_i32_50 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_50) : (i32) -> ()
    cf.br ^bb41
  ^bb45:  // 2 preds: ^bb43, ^bb46
    %155 = llvm.getelementptr %28[%c0_i32_49] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %156 = llvm.load %155 : !llvm.ptr -> !llvm.ptr
    %157 = llvm.load %156 : !llvm.ptr -> i32
    %c0_i32_51 = arith.constant 0 : i32
    %158 = arith.cmpi eq, %157, %c0_i32_51 : i32
    cf.cond_br %158, ^bb48, ^bb47
  ^bb46:  // pred: ^bb43
    %c3_i32_52 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_52) : (i32) -> ()
    cf.br ^bb45
  ^bb47:  // 3 preds: ^bb45, ^bb48, ^bb50
    %159 = llvm.getelementptr %156[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %160 = llvm.getelementptr %156[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %161 = llvm.getelementptr %156[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %162 = llvm.load %159 : !llvm.ptr -> !llvm.ptr
    %163 = llvm.load %160 : !llvm.ptr -> i32
    %164 = llvm.load %161 : !llvm.ptr -> !llvm.ptr
    %165 = llvm.load %162 : !llvm.ptr -> i32
    %c0_i32_53 = arith.constant 0 : i32
    %166 = arith.cmpi eq, %165, %c0_i32_53 : i32
    %167 = arith.cmpi ne, %27, %163 : i32
    %168 = arith.ori %166, %167 : i1
    cf.cond_br %168, ^bb50, ^bb49
  ^bb48:  // pred: ^bb45
    %c4_i32_54 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_54) : (i32) -> ()
    cf.br ^bb47
  ^bb49:  // pred: ^bb47
    %169 = llvm.call %162(%164, %c0_i64_45, %153, %c0_i32_47, %c0_i64_48) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i64, f64, i32, i64) -> i32
    %c0_i32_55 = arith.constant 0 : i32
    %170 = arith.cmpi eq, %169, %c0_i32_55 : i32
    %171 = arith.extui %170 : i1 to i32
    %c0_i64_56 = arith.constant 0 : i64
    %c0_i32_57 = arith.constant 0 : i32
    %172 = arith.cmpi ult, %c0_i32_57, %33 : i32
    cf.cond_br %172, ^bb51, ^bb52
  ^bb50:  // pred: ^bb47
    %c5_i32_58 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_58) : (i32) -> ()
    cf.br ^bb47
  ^bb51:  // 2 preds: ^bb49, ^bb52
    %173 = llvm.getelementptr %32[%c0_i32_57] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %174 = llvm.load %173 : !llvm.ptr -> !llvm.ptr
    %175 = llvm.load %174 : !llvm.ptr -> i32
    %c0_i32_59 = arith.constant 0 : i32
    %176 = arith.cmpi eq, %175, %c0_i32_59 : i32
    cf.cond_br %176, ^bb54, ^bb53
  ^bb52:  // pred: ^bb49
    %c3_i32_60 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_60) : (i32) -> ()
    cf.br ^bb51
  ^bb53:  // 3 preds: ^bb51, ^bb54, ^bb56
    %177 = llvm.getelementptr %174[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %178 = llvm.getelementptr %174[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %179 = llvm.getelementptr %174[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %180 = llvm.load %177 : !llvm.ptr -> !llvm.ptr
    %181 = llvm.load %178 : !llvm.ptr -> i32
    %182 = llvm.load %179 : !llvm.ptr -> !llvm.ptr
    %183 = llvm.load %180 : !llvm.ptr -> i32
    %c0_i32_61 = arith.constant 0 : i32
    %184 = arith.cmpi eq, %183, %c0_i32_61 : i32
    %185 = arith.cmpi ne, %31, %181 : i32
    %186 = arith.ori %184, %185 : i1
    cf.cond_br %186, ^bb56, ^bb55
  ^bb54:  // pred: ^bb51
    %c4_i32_62 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_62) : (i32) -> ()
    cf.br ^bb53
  ^bb55:  // pred: ^bb53
    %187 = llvm.call %180(%182, %c0_i64_56) vararg(!llvm.func<i64 (...)>) : !llvm.ptr, (!llvm.ptr, i64) -> i64
    %c0_i64_63 = arith.constant 0 : i64
    %188 = arith.cmpi eq, %187, %c0_i64_63 : i64
    %189 = arith.extui %188 : i1 to i32
    cf.br ^bb2
  ^bb56:  // pred: ^bb53
    %c5_i32_64 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_64) : (i32) -> ()
    cf.br ^bb53
  }
  func.func public @"type-i32"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[4] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %6 = arith.cmpi ult, %c0_i32, %5 : i32
    cf.cond_br %6, ^bb3, ^bb4
  ^bb2(%7: i32):  // pred: ^bb7
    return %7 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %8 = llvm.getelementptr %4[%c0_i32] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.load %9 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %11 = arith.cmpi eq, %10, %c0_i32_0 : i32
    cf.cond_br %11, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 3 preds: ^bb3, ^bb6, ^bb8
    %12 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.getelementptr %9[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %9[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    %16 = llvm.load %13 : !llvm.ptr -> i32
    %17 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.load %15 : !llvm.ptr -> i32
    %c0_i32_1 = arith.constant 0 : i32
    %19 = arith.cmpi eq, %18, %c0_i32_1 : i32
    %20 = arith.cmpi ne, %1, %16 : i32
    %21 = arith.ori %19, %20 : i1
    cf.cond_br %21, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // pred: ^bb5
    %22 = llvm.call %15(%17) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr) -> i32
    cf.br ^bb2(%22 : i32)
  ^bb8:  // pred: ^bb5
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb5
  }
  func.func public @"type-i64"(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %6 = arith.cmpi ult, %c0_i32, %5 : i32
    cf.cond_br %6, ^bb3, ^bb4
  ^bb2(%7: i64):  // pred: ^bb7
    return %7 : i64
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %8 = llvm.getelementptr %4[%c0_i32] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.load %9 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %11 = arith.cmpi eq, %10, %c0_i32_0 : i32
    cf.cond_br %11, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 3 preds: ^bb3, ^bb6, ^bb8
    %12 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.getelementptr %9[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %9[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    %16 = llvm.load %13 : !llvm.ptr -> i32
    %17 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.load %15 : !llvm.ptr -> i32
    %c0_i32_1 = arith.constant 0 : i32
    %19 = arith.cmpi eq, %18, %c0_i32_1 : i32
    %20 = arith.cmpi ne, %1, %16 : i32
    %21 = arith.ori %19, %20 : i1
    cf.cond_br %21, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // pred: ^bb5
    %22 = llvm.call %15(%17) vararg(!llvm.func<i64 (...)>) : !llvm.ptr, (!llvm.ptr) -> i64
    cf.br ^bb2(%22 : i64)
  ^bb8:  // pred: ^bb5
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb5
  }
  func.func public @"type-f32"(%arg0: !llvm.ptr) -> f32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[12] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2_i32 = arith.constant 2 : i32
    %6 = arith.cmpi ult, %c2_i32, %5 : i32
    cf.cond_br %6, ^bb3, ^bb4
  ^bb2(%7: f32):  // pred: ^bb7
    return %7 : f32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %8 = llvm.getelementptr %4[%c2_i32] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.load %9 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %11 = arith.cmpi eq, %10, %c0_i32 : i32
    cf.cond_br %11, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 3 preds: ^bb3, ^bb6, ^bb8
    %12 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.getelementptr %9[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %9[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    %16 = llvm.load %13 : !llvm.ptr -> i32
    %17 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.load %15 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %19 = arith.cmpi eq, %18, %c0_i32_0 : i32
    %20 = arith.cmpi ne, %1, %16 : i32
    %21 = arith.ori %19, %20 : i1
    cf.cond_br %21, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // pred: ^bb5
    %22 = llvm.call %15(%17) vararg(!llvm.func<f32 (...)>) : !llvm.ptr, (!llvm.ptr) -> f32
    cf.br ^bb2(%22 : f32)
  ^bb8:  // pred: ^bb5
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb5
  }
  func.func public @"type-f64"(%arg0: !llvm.ptr) -> f64 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i32 = arith.constant 3 : i32
    %6 = arith.cmpi ult, %c3_i32, %5 : i32
    cf.cond_br %6, ^bb3, ^bb4
  ^bb2(%7: f64):  // pred: ^bb7
    return %7 : f64
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %8 = llvm.getelementptr %4[%c3_i32] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.load %9 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %11 = arith.cmpi eq, %10, %c0_i32 : i32
    cf.cond_br %11, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32_0 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_0) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 3 preds: ^bb3, ^bb6, ^bb8
    %12 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.getelementptr %9[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %9[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    %16 = llvm.load %13 : !llvm.ptr -> i32
    %17 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.load %15 : !llvm.ptr -> i32
    %c0_i32_1 = arith.constant 0 : i32
    %19 = arith.cmpi eq, %18, %c0_i32_1 : i32
    %20 = arith.cmpi ne, %1, %16 : i32
    %21 = arith.ori %19, %20 : i1
    cf.cond_br %21, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // pred: ^bb5
    %22 = llvm.call %15(%17) vararg(!llvm.func<f64 (...)>) : !llvm.ptr, (!llvm.ptr) -> f64
    cf.br ^bb2(%22 : f64)
  ^bb8:  // pred: ^bb5
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb5
  }
  func.func public @"type-index"(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[28] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c100_i64 = arith.constant 100 : i64
    %c5_i32 = arith.constant 5 : i32
    %6 = arith.cmpi ult, %c5_i32, %5 : i32
    cf.cond_br %6, ^bb3, ^bb4
  ^bb2(%7: i64):  // pred: ^bb7
    return %7 : i64
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %8 = llvm.getelementptr %4[%c5_i32] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.load %9 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %11 = arith.cmpi eq, %10, %c0_i32 : i32
    cf.cond_br %11, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 3 preds: ^bb3, ^bb6, ^bb8
    %12 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.getelementptr %9[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %9[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    %16 = llvm.load %13 : !llvm.ptr -> i32
    %17 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.load %15 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %19 = arith.cmpi eq, %18, %c0_i32_0 : i32
    %20 = arith.cmpi ne, %1, %16 : i32
    %21 = arith.ori %19, %20 : i1
    cf.cond_br %21, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // pred: ^bb5
    %22 = llvm.call %15(%17, %c100_i64) vararg(!llvm.func<i64 (...)>) : !llvm.ptr, (!llvm.ptr, i64) -> i64
    cf.br ^bb2(%22 : i64)
  ^bb8:  // pred: ^bb5
    %c5_i32_1 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_1) : (i32) -> ()
    cf.br ^bb5
  }
  func.func public @"type-first-i32"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[24] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c32_i32 = arith.constant 32 : i32
    %c4_i32 = arith.constant 4 : i32
    %6 = arith.cmpi ult, %c4_i32, %5 : i32
    cf.cond_br %6, ^bb3, ^bb4
  ^bb2(%7: i32):  // pred: ^bb7
    return %7 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %8 = llvm.getelementptr %4[%c4_i32] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.load %9 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %11 = arith.cmpi eq, %10, %c0_i32 : i32
    cf.cond_br %11, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 3 preds: ^bb3, ^bb6, ^bb8
    %12 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.getelementptr %9[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %9[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    %16 = llvm.load %13 : !llvm.ptr -> i32
    %17 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.load %15 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %19 = arith.cmpi eq, %18, %c0_i32_0 : i32
    %20 = arith.cmpi ne, %1, %16 : i32
    %21 = arith.ori %19, %20 : i1
    cf.cond_br %21, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32_1 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_1) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // pred: ^bb5
    %22 = llvm.call %15(%17, %c32_i32) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> i32
    cf.br ^bb2(%22 : i32)
  ^bb8:  // pred: ^bb5
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb5
  }
  func.func public @"type-first-i64"(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[28] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c64_i64 = arith.constant 64 : i64
    %c5_i32 = arith.constant 5 : i32
    %6 = arith.cmpi ult, %c5_i32, %5 : i32
    cf.cond_br %6, ^bb3, ^bb4
  ^bb2(%7: i64):  // pred: ^bb7
    return %7 : i64
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %8 = llvm.getelementptr %4[%c5_i32] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.load %9 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %11 = arith.cmpi eq, %10, %c0_i32 : i32
    cf.cond_br %11, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 3 preds: ^bb3, ^bb6, ^bb8
    %12 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.getelementptr %9[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %9[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    %16 = llvm.load %13 : !llvm.ptr -> i32
    %17 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.load %15 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %19 = arith.cmpi eq, %18, %c0_i32_0 : i32
    %20 = arith.cmpi ne, %1, %16 : i32
    %21 = arith.ori %19, %20 : i1
    cf.cond_br %21, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // pred: ^bb5
    %22 = llvm.call %15(%17, %c64_i64) vararg(!llvm.func<i64 (...)>) : !llvm.ptr, (!llvm.ptr, i64) -> i64
    cf.br ^bb2(%22 : i64)
  ^bb8:  // pred: ^bb5
    %c5_i32_1 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_1) : (i32) -> ()
    cf.br ^bb5
  }
  func.func public @"type-first-f32"(%arg0: !llvm.ptr) -> f32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1068037571_i32 = arith.constant 1068037571 : i32
    %6 = arith.bitcast %c1068037571_i32 : i32 to f32
    %c6_i32 = arith.constant 6 : i32
    %7 = arith.cmpi ult, %c6_i32, %5 : i32
    cf.cond_br %7, ^bb3, ^bb4
  ^bb2(%8: f32):  // pred: ^bb7
    return %8 : f32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %9 = llvm.getelementptr %4[%c6_i32] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.load %10 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %12 = arith.cmpi eq, %11, %c0_i32 : i32
    cf.cond_br %12, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 3 preds: ^bb3, ^bb6, ^bb8
    %13 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %10[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %10[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.load %14 : !llvm.ptr -> i32
    %18 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.load %16 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %20 = arith.cmpi eq, %19, %c0_i32_0 : i32
    %21 = arith.cmpi ne, %1, %17 : i32
    %22 = arith.ori %20, %21 : i1
    cf.cond_br %22, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // pred: ^bb5
    %23 = llvm.call %16(%18, %6) vararg(!llvm.func<f32 (...)>) : !llvm.ptr, (!llvm.ptr, f32) -> f32
    cf.br ^bb2(%23 : f32)
  ^bb8:  // pred: ^bb5
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb5
  }
  func.func public @"type-first-f64"(%arg0: !llvm.ptr) -> f64 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[36] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c4610064722561534525_i64 = arith.constant 4610064722561534525 : i64
    %6 = arith.bitcast %c4610064722561534525_i64 : i64 to f64
    %c7_i32 = arith.constant 7 : i32
    %7 = arith.cmpi ult, %c7_i32, %5 : i32
    cf.cond_br %7, ^bb3, ^bb4
  ^bb2(%8: f64):  // pred: ^bb7
    return %8 : f64
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %9 = llvm.getelementptr %4[%c7_i32] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.load %10 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %12 = arith.cmpi eq, %11, %c0_i32 : i32
    cf.cond_br %12, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 3 preds: ^bb3, ^bb6, ^bb8
    %13 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %10[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %10[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.load %14 : !llvm.ptr -> i32
    %18 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.load %16 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %20 = arith.cmpi eq, %19, %c0_i32_0 : i32
    %21 = arith.cmpi ne, %1, %17 : i32
    %22 = arith.ori %20, %21 : i1
    cf.cond_br %22, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // pred: ^bb5
    %23 = llvm.call %16(%18, %6) vararg(!llvm.func<f64 (...)>) : !llvm.ptr, (!llvm.ptr, f64) -> f64
    cf.br ^bb2(%23 : f64)
  ^bb8:  // pred: ^bb5
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb5
  }
  func.func public @"type-second-i32"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[48] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1107322470_i32 = arith.constant 1107322470 : i32
    %6 = arith.bitcast %c1107322470_i32 : i32 to f32
    %c32_i32 = arith.constant 32 : i32
    %c8_i32 = arith.constant 8 : i32
    %7 = arith.cmpi ult, %c8_i32, %5 : i32
    cf.cond_br %7, ^bb3, ^bb4
  ^bb2(%8: i32):  // pred: ^bb7
    return %8 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %9 = llvm.getelementptr %4[%c8_i32] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.load %10 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %12 = arith.cmpi eq, %11, %c0_i32 : i32
    cf.cond_br %12, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 3 preds: ^bb3, ^bb6, ^bb8
    %13 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %10[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %10[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.load %14 : !llvm.ptr -> i32
    %18 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.load %16 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %20 = arith.cmpi eq, %19, %c0_i32_0 : i32
    %21 = arith.cmpi ne, %1, %17 : i32
    %22 = arith.ori %20, %21 : i1
    cf.cond_br %22, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // pred: ^bb5
    %23 = llvm.call %16(%18, %6, %c32_i32) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, f32, i32) -> i32
    cf.br ^bb2(%23 : i32)
  ^bb8:  // pred: ^bb5
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb5
  }
  func.func public @"type-second-i64"(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[52] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c32_i32 = arith.constant 32 : i32
    %c64_i64 = arith.constant 64 : i64
    %c9_i32 = arith.constant 9 : i32
    %6 = arith.cmpi ult, %c9_i32, %5 : i32
    cf.cond_br %6, ^bb3, ^bb4
  ^bb2(%7: i64):  // pred: ^bb7
    return %7 : i64
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %8 = llvm.getelementptr %4[%c9_i32] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.load %9 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %11 = arith.cmpi eq, %10, %c0_i32 : i32
    cf.cond_br %11, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 3 preds: ^bb3, ^bb6, ^bb8
    %12 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.getelementptr %9[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %9[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    %16 = llvm.load %13 : !llvm.ptr -> i32
    %17 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.load %15 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %19 = arith.cmpi eq, %18, %c0_i32_0 : i32
    %20 = arith.cmpi ne, %1, %16 : i32
    %21 = arith.ori %19, %20 : i1
    cf.cond_br %21, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // pred: ^bb5
    %22 = llvm.call %15(%17, %c32_i32, %c64_i64) vararg(!llvm.func<i64 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i64) -> i64
    cf.br ^bb2(%22 : i64)
  ^bb8:  // pred: ^bb5
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb5
  }
  func.func public @"type-second-f32"(%arg0: !llvm.ptr) -> f32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[56] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c4634204016564240384_i64 = arith.constant 4634204016564240384 : i64
    %6 = arith.bitcast %c4634204016564240384_i64 : i64 to f64
    %c1107296256_i32 = arith.constant 1107296256 : i32
    %7 = arith.bitcast %c1107296256_i32 : i32 to f32
    %c10_i32 = arith.constant 10 : i32
    %8 = arith.cmpi ult, %c10_i32, %5 : i32
    cf.cond_br %8, ^bb3, ^bb4
  ^bb2(%9: f32):  // pred: ^bb7
    return %9 : f32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %10 = llvm.getelementptr %4[%c10_i32] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.load %11 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %13 = arith.cmpi eq, %12, %c0_i32 : i32
    cf.cond_br %13, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 3 preds: ^bb3, ^bb6, ^bb8
    %14 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %11[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %11[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.load %15 : !llvm.ptr -> i32
    %19 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %20 = llvm.load %17 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %21 = arith.cmpi eq, %20, %c0_i32_0 : i32
    %22 = arith.cmpi ne, %1, %18 : i32
    %23 = arith.ori %21, %22 : i1
    cf.cond_br %23, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // pred: ^bb5
    %24 = llvm.call %17(%19, %6, %7) vararg(!llvm.func<f32 (...)>) : !llvm.ptr, (!llvm.ptr, f64, f32) -> f32
    cf.br ^bb2(%24 : f32)
  ^bb8:  // pred: ^bb5
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb5
  }
  func.func public @"type-second-f64"(%arg0: !llvm.ptr) -> f64 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[60] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c64_i64 = arith.constant 64 : i64
    %c4634211053438658150_i64 = arith.constant 4634211053438658150 : i64
    %6 = arith.bitcast %c4634211053438658150_i64 : i64 to f64
    %c11_i32 = arith.constant 11 : i32
    %7 = arith.cmpi ult, %c11_i32, %5 : i32
    cf.cond_br %7, ^bb3, ^bb4
  ^bb2(%8: f64):  // pred: ^bb7
    return %8 : f64
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %9 = llvm.getelementptr %4[%c11_i32] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.load %10 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %12 = arith.cmpi eq, %11, %c0_i32 : i32
    cf.cond_br %12, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 3 preds: ^bb3, ^bb6, ^bb8
    %13 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %10[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %10[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.load %14 : !llvm.ptr -> i32
    %18 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.load %16 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %20 = arith.cmpi eq, %19, %c0_i32_0 : i32
    %21 = arith.cmpi ne, %1, %17 : i32
    %22 = arith.ori %20, %21 : i1
    cf.cond_br %22, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // pred: ^bb5
    %23 = llvm.call %16(%18, %c64_i64, %6) vararg(!llvm.func<f64 (...)>) : !llvm.ptr, (!llvm.ptr, i64, f64) -> f64
    cf.br ^bb2(%23 : f64)
  ^bb8:  // pred: ^bb5
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb5
  }
  func.func public @dispatch(%arg0: !llvm.ptr, %arg1: i32, %arg2: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i64, !llvm.ptr
    %2 = llvm.getelementptr %arg0[28] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> i32
    %4 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.load %5 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %1 : !llvm.ptr -> i64
    %9 = llvm.load %0 : !llvm.ptr -> i32
    %10 = arith.cmpi ult, %9, %7 : i32
    cf.cond_br %10, ^bb3, ^bb4
  ^bb2(%11: i64):  // pred: ^bb7
    return %11 : i64
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %12 = llvm.getelementptr %6[%9] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    %14 = llvm.load %13 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %15 = arith.cmpi eq, %14, %c0_i32 : i32
    cf.cond_br %15, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 3 preds: ^bb3, ^bb6, ^bb8
    %16 = llvm.getelementptr %13[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.getelementptr %13[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %18 = llvm.getelementptr %13[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %19 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %20 = llvm.load %17 : !llvm.ptr -> i32
    %21 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %22 = llvm.load %19 : !llvm.ptr -> i32
    %c0_i32_1 = arith.constant 0 : i32
    %23 = arith.cmpi eq, %22, %c0_i32_1 : i32
    %24 = arith.cmpi ne, %3, %20 : i32
    %25 = arith.ori %23, %24 : i1
    cf.cond_br %25, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // pred: ^bb5
    %26 = llvm.call %19(%21, %8) vararg(!llvm.func<i64 (...)>) : !llvm.ptr, (!llvm.ptr, i64) -> i64
    cf.br ^bb2(%26 : i64)
  ^bb8:  // pred: ^bb5
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb5
  }
  func.func public @"dispatch-structural-i64"(%arg0: !llvm.ptr, %arg1: i32) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[68] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.load %4 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c9_i64 = arith.constant 9 : i64
    %7 = llvm.load %0 : !llvm.ptr -> i32
    %8 = arith.cmpi ult, %7, %6 : i32
    cf.cond_br %8, ^bb3, ^bb4
  ^bb2(%9: i64):  // pred: ^bb7
    return %9 : i64
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %10 = llvm.getelementptr %5[%7] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.load %11 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %13 = arith.cmpi eq, %12, %c0_i32 : i32
    cf.cond_br %13, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 3 preds: ^bb3, ^bb6, ^bb8
    %14 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %11[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %11[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.load %15 : !llvm.ptr -> i32
    %19 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %20 = llvm.load %17 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %21 = arith.cmpi eq, %20, %c0_i32_0 : i32
    %22 = arith.cmpi ne, %2, %18 : i32
    %23 = arith.ori %21, %22 : i1
    cf.cond_br %23, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // pred: ^bb5
    %24 = llvm.call %17(%19, %c9_i64) vararg(!llvm.func<i64 (...)>) : !llvm.ptr, (!llvm.ptr, i64) -> i64
    cf.br ^bb2(%24 : i64)
  ^bb8:  // pred: ^bb5
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb5
  }
  func.func public @"dispatch-structural-i32"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.load %4 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c9_i32 = arith.constant 9 : i32
    %7 = llvm.load %0 : !llvm.ptr -> i32
    %8 = arith.cmpi ult, %7, %6 : i32
    cf.cond_br %8, ^bb3, ^bb4
  ^bb2(%9: i32):  // pred: ^bb7
    return %9 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %10 = llvm.getelementptr %5[%7] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.load %11 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %13 = arith.cmpi eq, %12, %c0_i32 : i32
    cf.cond_br %13, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 3 preds: ^bb3, ^bb6, ^bb8
    %14 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %11[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %11[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.load %15 : !llvm.ptr -> i32
    %19 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %20 = llvm.load %17 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %21 = arith.cmpi eq, %20, %c0_i32_0 : i32
    %22 = arith.cmpi ne, %2, %18 : i32
    %23 = arith.ori %21, %22 : i1
    cf.cond_br %23, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // pred: ^bb5
    %24 = llvm.call %17(%19, %c9_i32) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> i32
    cf.br ^bb2(%24 : i32)
  ^bb8:  // pred: ^bb5
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb5
  }
  func.func public @"dispatch-structural-f32"(%arg0: !llvm.ptr, %arg1: i32) -> f32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.load %4 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1091567616_i32 = arith.constant 1091567616 : i32
    %7 = arith.bitcast %c1091567616_i32 : i32 to f32
    %8 = llvm.load %0 : !llvm.ptr -> i32
    %9 = arith.cmpi ult, %8, %6 : i32
    cf.cond_br %9, ^bb3, ^bb4
  ^bb2(%10: f32):  // pred: ^bb7
    return %10 : f32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %11 = llvm.getelementptr %5[%8] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.load %12 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %14 = arith.cmpi eq, %13, %c0_i32 : i32
    cf.cond_br %14, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 3 preds: ^bb3, ^bb6, ^bb8
    %15 = llvm.getelementptr %12[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %12[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.getelementptr %12[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %18 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.load %16 : !llvm.ptr -> i32
    %20 = llvm.load %17 : !llvm.ptr -> !llvm.ptr
    %21 = llvm.load %18 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %22 = arith.cmpi eq, %21, %c0_i32_0 : i32
    %23 = arith.cmpi ne, %2, %19 : i32
    %24 = arith.ori %22, %23 : i1
    cf.cond_br %24, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // pred: ^bb5
    %25 = llvm.call %18(%20, %7) vararg(!llvm.func<f32 (...)>) : !llvm.ptr, (!llvm.ptr, f32) -> f32
    cf.br ^bb2(%25 : f32)
  ^bb8:  // pred: ^bb5
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb5
  }
  func.func public @"dispatch-structural-f64"(%arg0: !llvm.ptr, %arg1: i32) -> f64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[76] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.load %4 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c4621256167635550208_i64 = arith.constant 4621256167635550208 : i64
    %7 = arith.bitcast %c4621256167635550208_i64 : i64 to f64
    %8 = llvm.load %0 : !llvm.ptr -> i32
    %9 = arith.cmpi ult, %8, %6 : i32
    cf.cond_br %9, ^bb3, ^bb4
  ^bb2(%10: f64):  // pred: ^bb7
    return %10 : f64
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %11 = llvm.getelementptr %5[%8] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.load %12 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %14 = arith.cmpi eq, %13, %c0_i32 : i32
    cf.cond_br %14, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 3 preds: ^bb3, ^bb6, ^bb8
    %15 = llvm.getelementptr %12[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %12[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.getelementptr %12[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %18 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.load %16 : !llvm.ptr -> i32
    %20 = llvm.load %17 : !llvm.ptr -> !llvm.ptr
    %21 = llvm.load %18 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %22 = arith.cmpi eq, %21, %c0_i32_0 : i32
    %23 = arith.cmpi ne, %2, %19 : i32
    %24 = arith.ori %22, %23 : i1
    cf.cond_br %24, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // pred: ^bb5
    %25 = llvm.call %18(%20, %7) vararg(!llvm.func<f64 (...)>) : !llvm.ptr, (!llvm.ptr, f64) -> f64
    cf.br ^bb2(%25 : f64)
  ^bb8:  // pred: ^bb5
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb5
  }
  func.func public @"fac-i64"(%arg0: !llvm.ptr, %arg1: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %1 = llvm.getelementptr %arg0[28] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.load %4 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %7 = llvm.load %0 : !llvm.ptr -> i64
    %c0_i64 = arith.constant 0 : i64
    %8 = arith.cmpi eq, %7, %c0_i64 : i64
    %9 = arith.extui %8 : i1 to i32
    %c0_i32 = arith.constant 0 : i32
    %10 = arith.cmpi ne, %9, %c0_i32 : i32
    cf.cond_br %10, ^bb3, ^bb4
  ^bb2(%11: i64):  // pred: ^bb5
    return %11 : i64
  ^bb3:  // pred: ^bb1
    %c1_i64_0 = arith.constant 1 : i64
    cf.br ^bb5(%c1_i64_0 : i64)
  ^bb4:  // pred: ^bb1
    %12 = llvm.load %0 : !llvm.ptr -> i64
    %13 = llvm.load %0 : !llvm.ptr -> i64
    %c1_i64_1 = arith.constant 1 : i64
    %14 = arith.subi %13, %c1_i64_1 : i64
    %c12_i32 = arith.constant 12 : i32
    %15 = arith.cmpi ult, %c12_i32, %6 : i32
    cf.cond_br %15, ^bb6, ^bb7
  ^bb5(%16: i64):  // 2 preds: ^bb3, ^bb10
    cf.br ^bb2(%16 : i64)
  ^bb6:  // 2 preds: ^bb4, ^bb7
    %17 = llvm.getelementptr %5[%c12_i32] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %18 = llvm.load %17 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.load %18 : !llvm.ptr -> i32
    %c0_i32_2 = arith.constant 0 : i32
    %20 = arith.cmpi eq, %19, %c0_i32_2 : i32
    cf.cond_br %20, ^bb9, ^bb8
  ^bb7:  // pred: ^bb4
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // 3 preds: ^bb6, ^bb9, ^bb11
    %21 = llvm.getelementptr %18[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %22 = llvm.getelementptr %18[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %23 = llvm.getelementptr %18[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %24 = llvm.load %21 : !llvm.ptr -> !llvm.ptr
    %25 = llvm.load %22 : !llvm.ptr -> i32
    %26 = llvm.load %23 : !llvm.ptr -> !llvm.ptr
    %27 = llvm.load %24 : !llvm.ptr -> i32
    %c0_i32_3 = arith.constant 0 : i32
    %28 = arith.cmpi eq, %27, %c0_i32_3 : i32
    %29 = arith.cmpi ne, %2, %25 : i32
    %30 = arith.ori %28, %29 : i1
    cf.cond_br %30, ^bb11, ^bb10
  ^bb9:  // pred: ^bb6
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // pred: ^bb8
    %31 = llvm.call %24(%26, %14) vararg(!llvm.func<i64 (...)>) : !llvm.ptr, (!llvm.ptr, i64) -> i64
    %32 = arith.muli %12, %31 : i64
    cf.br ^bb5(%32 : i64)
  ^bb11:  // pred: ^bb8
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb8
  }
  func.func public @"fib-i64"(%arg0: !llvm.ptr, %arg1: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %1 = llvm.getelementptr %arg0[28] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.load %4 : !llvm.ptr -> i32
    %7 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.load %4 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %0 : !llvm.ptr -> i64
    %c1_i64_0 = arith.constant 1 : i64
    %10 = arith.cmpi ule, %9, %c1_i64_0 : i64
    %11 = arith.extui %10 : i1 to i64
    %12 = arith.trunci %11 : i64 to i32
    %c0_i32 = arith.constant 0 : i32
    %13 = arith.cmpi ne, %12, %c0_i32 : i32
    cf.cond_br %13, ^bb3, ^bb4
  ^bb2(%14: i64):  // pred: ^bb5
    return %14 : i64
  ^bb3:  // pred: ^bb1
    %c1_i64_1 = arith.constant 1 : i64
    cf.br ^bb5(%c1_i64_1 : i64)
  ^bb4:  // pred: ^bb1
    %15 = llvm.load %0 : !llvm.ptr -> i64
    %c2_i64 = arith.constant 2 : i64
    %16 = arith.subi %15, %c2_i64 : i64
    %c13_i32 = arith.constant 13 : i32
    %17 = arith.cmpi ult, %c13_i32, %6 : i32
    cf.cond_br %17, ^bb6, ^bb7
  ^bb5(%18: i64):  // 2 preds: ^bb3, ^bb16
    cf.br ^bb2(%18 : i64)
  ^bb6:  // 2 preds: ^bb4, ^bb7
    %19 = llvm.getelementptr %5[%c13_i32] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %20 = llvm.load %19 : !llvm.ptr -> !llvm.ptr
    %21 = llvm.load %20 : !llvm.ptr -> i32
    %c0_i32_2 = arith.constant 0 : i32
    %22 = arith.cmpi eq, %21, %c0_i32_2 : i32
    cf.cond_br %22, ^bb9, ^bb8
  ^bb7:  // pred: ^bb4
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // 3 preds: ^bb6, ^bb9, ^bb11
    %23 = llvm.getelementptr %20[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %24 = llvm.getelementptr %20[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %25 = llvm.getelementptr %20[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %26 = llvm.load %23 : !llvm.ptr -> !llvm.ptr
    %27 = llvm.load %24 : !llvm.ptr -> i32
    %28 = llvm.load %25 : !llvm.ptr -> !llvm.ptr
    %29 = llvm.load %26 : !llvm.ptr -> i32
    %c0_i32_3 = arith.constant 0 : i32
    %30 = arith.cmpi eq, %29, %c0_i32_3 : i32
    %31 = arith.cmpi ne, %2, %27 : i32
    %32 = arith.ori %30, %31 : i1
    cf.cond_br %32, ^bb11, ^bb10
  ^bb9:  // pred: ^bb6
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // pred: ^bb8
    %33 = llvm.call %26(%28, %16) vararg(!llvm.func<i64 (...)>) : !llvm.ptr, (!llvm.ptr, i64) -> i64
    %34 = llvm.load %0 : !llvm.ptr -> i64
    %c1_i64_4 = arith.constant 1 : i64
    %35 = arith.subi %34, %c1_i64_4 : i64
    %c13_i32_5 = arith.constant 13 : i32
    %36 = arith.cmpi ult, %c13_i32_5, %8 : i32
    cf.cond_br %36, ^bb12, ^bb13
  ^bb11:  // pred: ^bb8
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb8
  ^bb12:  // 2 preds: ^bb10, ^bb13
    %37 = llvm.getelementptr %7[%c13_i32_5] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %38 = llvm.load %37 : !llvm.ptr -> !llvm.ptr
    %39 = llvm.load %38 : !llvm.ptr -> i32
    %c0_i32_6 = arith.constant 0 : i32
    %40 = arith.cmpi eq, %39, %c0_i32_6 : i32
    cf.cond_br %40, ^bb15, ^bb14
  ^bb13:  // pred: ^bb10
    %c3_i32_7 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_7) : (i32) -> ()
    cf.br ^bb12
  ^bb14:  // 3 preds: ^bb12, ^bb15, ^bb17
    %41 = llvm.getelementptr %38[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %42 = llvm.getelementptr %38[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %43 = llvm.getelementptr %38[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %44 = llvm.load %41 : !llvm.ptr -> !llvm.ptr
    %45 = llvm.load %42 : !llvm.ptr -> i32
    %46 = llvm.load %43 : !llvm.ptr -> !llvm.ptr
    %47 = llvm.load %44 : !llvm.ptr -> i32
    %c0_i32_8 = arith.constant 0 : i32
    %48 = arith.cmpi eq, %47, %c0_i32_8 : i32
    %49 = arith.cmpi ne, %2, %45 : i32
    %50 = arith.ori %48, %49 : i1
    cf.cond_br %50, ^bb17, ^bb16
  ^bb15:  // pred: ^bb12
    %c4_i32_9 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_9) : (i32) -> ()
    cf.br ^bb14
  ^bb16:  // pred: ^bb14
    %51 = llvm.call %44(%46, %35) vararg(!llvm.func<i64 (...)>) : !llvm.ptr, (!llvm.ptr, i64) -> i64
    %52 = arith.addi %33, %51 : i64
    cf.br ^bb5(%52 : i64)
  ^bb17:  // pred: ^bb14
    %c5_i32_10 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_10) : (i32) -> ()
    cf.br ^bb14
  }
  func.func public @"fac-i32"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[24] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.load %4 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %7 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %8 = arith.cmpi eq, %7, %c0_i32 : i32
    %9 = arith.extui %8 : i1 to i32
    %c0_i32_0 = arith.constant 0 : i32
    %10 = arith.cmpi ne, %9, %c0_i32_0 : i32
    cf.cond_br %10, ^bb3, ^bb4
  ^bb2(%11: i32):  // pred: ^bb5
    return %11 : i32
  ^bb3:  // pred: ^bb1
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb5(%c1_i32 : i32)
  ^bb4:  // pred: ^bb1
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_1 = arith.constant 1 : i32
    %14 = arith.subi %13, %c1_i32_1 : i32
    %c23_i32 = arith.constant 23 : i32
    %15 = arith.cmpi ult, %c23_i32, %6 : i32
    cf.cond_br %15, ^bb6, ^bb7
  ^bb5(%16: i32):  // 2 preds: ^bb3, ^bb10
    cf.br ^bb2(%16 : i32)
  ^bb6:  // 2 preds: ^bb4, ^bb7
    %17 = llvm.getelementptr %5[%c23_i32] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %18 = llvm.load %17 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.load %18 : !llvm.ptr -> i32
    %c0_i32_2 = arith.constant 0 : i32
    %20 = arith.cmpi eq, %19, %c0_i32_2 : i32
    cf.cond_br %20, ^bb9, ^bb8
  ^bb7:  // pred: ^bb4
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // 3 preds: ^bb6, ^bb9, ^bb11
    %21 = llvm.getelementptr %18[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %22 = llvm.getelementptr %18[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %23 = llvm.getelementptr %18[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %24 = llvm.load %21 : !llvm.ptr -> !llvm.ptr
    %25 = llvm.load %22 : !llvm.ptr -> i32
    %26 = llvm.load %23 : !llvm.ptr -> !llvm.ptr
    %27 = llvm.load %24 : !llvm.ptr -> i32
    %c0_i32_3 = arith.constant 0 : i32
    %28 = arith.cmpi eq, %27, %c0_i32_3 : i32
    %29 = arith.cmpi ne, %2, %25 : i32
    %30 = arith.ori %28, %29 : i1
    cf.cond_br %30, ^bb11, ^bb10
  ^bb9:  // pred: ^bb6
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // pred: ^bb8
    %31 = llvm.call %24(%26, %14) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> i32
    %32 = arith.muli %12, %31 : i32
    cf.br ^bb5(%32 : i32)
  ^bb11:  // pred: ^bb8
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb8
  }
  func.func public @"fac-f32"(%arg0: !llvm.ptr, %arg1: f32) -> f32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : f32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.load %4 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %7 = llvm.load %0 : !llvm.ptr -> f32
    %c0_i32 = arith.constant 0 : i32
    %8 = arith.bitcast %c0_i32 : i32 to f32
    %9 = arith.cmpf oeq, %7, %8 : f32
    %10 = arith.extui %9 : i1 to i32
    %c0_i32_0 = arith.constant 0 : i32
    %11 = arith.cmpi ne, %10, %c0_i32_0 : i32
    cf.cond_br %11, ^bb3, ^bb4
  ^bb2(%12: f32):  // pred: ^bb5
    return %12 : f32
  ^bb3:  // pred: ^bb1
    %c1065353216_i32 = arith.constant 1065353216 : i32
    %13 = arith.bitcast %c1065353216_i32 : i32 to f32
    cf.br ^bb5(%13 : f32)
  ^bb4:  // pred: ^bb1
    %14 = llvm.load %0 : !llvm.ptr -> f32
    %15 = llvm.load %0 : !llvm.ptr -> f32
    %c1065353216_i32_1 = arith.constant 1065353216 : i32
    %16 = arith.bitcast %c1065353216_i32_1 : i32 to f32
    %17 = arith.subf %15, %16 : f32
    %c24_i32 = arith.constant 24 : i32
    %18 = arith.cmpi ult, %c24_i32, %6 : i32
    cf.cond_br %18, ^bb6, ^bb7
  ^bb5(%19: f32):  // 2 preds: ^bb3, ^bb10
    cf.br ^bb2(%19 : f32)
  ^bb6:  // 2 preds: ^bb4, ^bb7
    %20 = llvm.getelementptr %5[%c24_i32] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %21 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %22 = llvm.load %21 : !llvm.ptr -> i32
    %c0_i32_2 = arith.constant 0 : i32
    %23 = arith.cmpi eq, %22, %c0_i32_2 : i32
    cf.cond_br %23, ^bb9, ^bb8
  ^bb7:  // pred: ^bb4
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // 3 preds: ^bb6, ^bb9, ^bb11
    %24 = llvm.getelementptr %21[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %25 = llvm.getelementptr %21[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %26 = llvm.getelementptr %21[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %27 = llvm.load %24 : !llvm.ptr -> !llvm.ptr
    %28 = llvm.load %25 : !llvm.ptr -> i32
    %29 = llvm.load %26 : !llvm.ptr -> !llvm.ptr
    %30 = llvm.load %27 : !llvm.ptr -> i32
    %c0_i32_3 = arith.constant 0 : i32
    %31 = arith.cmpi eq, %30, %c0_i32_3 : i32
    %32 = arith.cmpi ne, %2, %28 : i32
    %33 = arith.ori %31, %32 : i1
    cf.cond_br %33, ^bb11, ^bb10
  ^bb9:  // pred: ^bb6
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // pred: ^bb8
    %34 = llvm.call %27(%29, %17) vararg(!llvm.func<f32 (...)>) : !llvm.ptr, (!llvm.ptr, f32) -> f32
    %35 = arith.mulf %14, %34 : f32
    cf.br ^bb5(%35 : f32)
  ^bb11:  // pred: ^bb8
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb8
  }
  func.func public @"fac-f64"(%arg0: !llvm.ptr, %arg1: f64) -> f64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : f64, !llvm.ptr
    %1 = llvm.getelementptr %arg0[36] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.load %4 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %7 = llvm.load %0 : !llvm.ptr -> f64
    %c0_i64 = arith.constant 0 : i64
    %8 = arith.bitcast %c0_i64 : i64 to f64
    %9 = arith.cmpf oeq, %7, %8 : f64
    %10 = arith.extui %9 : i1 to i32
    %c0_i32 = arith.constant 0 : i32
    %11 = arith.cmpi ne, %10, %c0_i32 : i32
    cf.cond_br %11, ^bb3, ^bb4
  ^bb2(%12: f64):  // pred: ^bb5
    return %12 : f64
  ^bb3:  // pred: ^bb1
    %c4607182418800017408_i64 = arith.constant 4607182418800017408 : i64
    %13 = arith.bitcast %c4607182418800017408_i64 : i64 to f64
    cf.br ^bb5(%13 : f64)
  ^bb4:  // pred: ^bb1
    %14 = llvm.load %0 : !llvm.ptr -> f64
    %15 = llvm.load %0 : !llvm.ptr -> f64
    %c4607182418800017408_i64_0 = arith.constant 4607182418800017408 : i64
    %16 = arith.bitcast %c4607182418800017408_i64_0 : i64 to f64
    %17 = arith.subf %15, %16 : f64
    %c25_i32 = arith.constant 25 : i32
    %18 = arith.cmpi ult, %c25_i32, %6 : i32
    cf.cond_br %18, ^bb6, ^bb7
  ^bb5(%19: f64):  // 2 preds: ^bb3, ^bb10
    cf.br ^bb2(%19 : f64)
  ^bb6:  // 2 preds: ^bb4, ^bb7
    %20 = llvm.getelementptr %5[%c25_i32] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %21 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %22 = llvm.load %21 : !llvm.ptr -> i32
    %c0_i32_1 = arith.constant 0 : i32
    %23 = arith.cmpi eq, %22, %c0_i32_1 : i32
    cf.cond_br %23, ^bb9, ^bb8
  ^bb7:  // pred: ^bb4
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // 3 preds: ^bb6, ^bb9, ^bb11
    %24 = llvm.getelementptr %21[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %25 = llvm.getelementptr %21[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %26 = llvm.getelementptr %21[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %27 = llvm.load %24 : !llvm.ptr -> !llvm.ptr
    %28 = llvm.load %25 : !llvm.ptr -> i32
    %29 = llvm.load %26 : !llvm.ptr -> !llvm.ptr
    %30 = llvm.load %27 : !llvm.ptr -> i32
    %c0_i32_2 = arith.constant 0 : i32
    %31 = arith.cmpi eq, %30, %c0_i32_2 : i32
    %32 = arith.cmpi ne, %2, %28 : i32
    %33 = arith.ori %31, %32 : i1
    cf.cond_br %33, ^bb11, ^bb10
  ^bb9:  // pred: ^bb6
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // pred: ^bb8
    %34 = llvm.call %27(%29, %17) vararg(!llvm.func<f64 (...)>) : !llvm.ptr, (!llvm.ptr, f64) -> f64
    %35 = arith.mulf %14, %34 : f64
    cf.br ^bb5(%35 : f64)
  ^bb11:  // pred: ^bb8
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb8
  }
  func.func public @"fib-i32"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[24] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.load %4 : !llvm.ptr -> i32
    %7 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.load %4 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32 = arith.constant 1 : i32
    %10 = arith.cmpi ule, %9, %c1_i32 : i32
    %11 = arith.extui %10 : i1 to i32
    %c0_i32 = arith.constant 0 : i32
    %12 = arith.cmpi ne, %11, %c0_i32 : i32
    cf.cond_br %12, ^bb3, ^bb4
  ^bb2(%13: i32):  // pred: ^bb5
    return %13 : i32
  ^bb3:  // pred: ^bb1
    %c1_i32_0 = arith.constant 1 : i32
    cf.br ^bb5(%c1_i32_0 : i32)
  ^bb4:  // pred: ^bb1
    %14 = llvm.load %0 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %15 = arith.subi %14, %c2_i32 : i32
    %c26_i32 = arith.constant 26 : i32
    %16 = arith.cmpi ult, %c26_i32, %6 : i32
    cf.cond_br %16, ^bb6, ^bb7
  ^bb5(%17: i32):  // 2 preds: ^bb3, ^bb16
    cf.br ^bb2(%17 : i32)
  ^bb6:  // 2 preds: ^bb4, ^bb7
    %18 = llvm.getelementptr %5[%c26_i32] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %19 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %20 = llvm.load %19 : !llvm.ptr -> i32
    %c0_i32_1 = arith.constant 0 : i32
    %21 = arith.cmpi eq, %20, %c0_i32_1 : i32
    cf.cond_br %21, ^bb9, ^bb8
  ^bb7:  // pred: ^bb4
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // 3 preds: ^bb6, ^bb9, ^bb11
    %22 = llvm.getelementptr %19[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %23 = llvm.getelementptr %19[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %24 = llvm.getelementptr %19[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %25 = llvm.load %22 : !llvm.ptr -> !llvm.ptr
    %26 = llvm.load %23 : !llvm.ptr -> i32
    %27 = llvm.load %24 : !llvm.ptr -> !llvm.ptr
    %28 = llvm.load %25 : !llvm.ptr -> i32
    %c0_i32_2 = arith.constant 0 : i32
    %29 = arith.cmpi eq, %28, %c0_i32_2 : i32
    %30 = arith.cmpi ne, %2, %26 : i32
    %31 = arith.ori %29, %30 : i1
    cf.cond_br %31, ^bb11, ^bb10
  ^bb9:  // pred: ^bb6
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // pred: ^bb8
    %32 = llvm.call %25(%27, %15) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> i32
    %33 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_3 = arith.constant 1 : i32
    %34 = arith.subi %33, %c1_i32_3 : i32
    %c26_i32_4 = arith.constant 26 : i32
    %35 = arith.cmpi ult, %c26_i32_4, %8 : i32
    cf.cond_br %35, ^bb12, ^bb13
  ^bb11:  // pred: ^bb8
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb8
  ^bb12:  // 2 preds: ^bb10, ^bb13
    %36 = llvm.getelementptr %7[%c26_i32_4] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %37 = llvm.load %36 : !llvm.ptr -> !llvm.ptr
    %38 = llvm.load %37 : !llvm.ptr -> i32
    %c0_i32_5 = arith.constant 0 : i32
    %39 = arith.cmpi eq, %38, %c0_i32_5 : i32
    cf.cond_br %39, ^bb15, ^bb14
  ^bb13:  // pred: ^bb10
    %c3_i32_6 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_6) : (i32) -> ()
    cf.br ^bb12
  ^bb14:  // 3 preds: ^bb12, ^bb15, ^bb17
    %40 = llvm.getelementptr %37[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %41 = llvm.getelementptr %37[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %42 = llvm.getelementptr %37[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %43 = llvm.load %40 : !llvm.ptr -> !llvm.ptr
    %44 = llvm.load %41 : !llvm.ptr -> i32
    %45 = llvm.load %42 : !llvm.ptr -> !llvm.ptr
    %46 = llvm.load %43 : !llvm.ptr -> i32
    %c0_i32_7 = arith.constant 0 : i32
    %47 = arith.cmpi eq, %46, %c0_i32_7 : i32
    %48 = arith.cmpi ne, %2, %44 : i32
    %49 = arith.ori %47, %48 : i1
    cf.cond_br %49, ^bb17, ^bb16
  ^bb15:  // pred: ^bb12
    %c4_i32_8 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_8) : (i32) -> ()
    cf.br ^bb14
  ^bb16:  // pred: ^bb14
    %50 = llvm.call %43(%45, %34) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> i32
    %51 = arith.addi %32, %50 : i32
    cf.br ^bb5(%51 : i32)
  ^bb17:  // pred: ^bb14
    %c5_i32_9 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_9) : (i32) -> ()
    cf.br ^bb14
  }
  func.func public @"fib-f32"(%arg0: !llvm.ptr, %arg1: f32) -> f32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : f32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.load %4 : !llvm.ptr -> i32
    %7 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.load %4 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %0 : !llvm.ptr -> f32
    %c1065353216_i32 = arith.constant 1065353216 : i32
    %10 = arith.bitcast %c1065353216_i32 : i32 to f32
    %11 = arith.cmpf ole, %9, %10 : f32
    %12 = arith.extui %11 : i1 to i32
    %c0_i32 = arith.constant 0 : i32
    %13 = arith.cmpi ne, %12, %c0_i32 : i32
    cf.cond_br %13, ^bb3, ^bb4
  ^bb2(%14: f32):  // pred: ^bb5
    return %14 : f32
  ^bb3:  // pred: ^bb1
    %c1065353216_i32_0 = arith.constant 1065353216 : i32
    %15 = arith.bitcast %c1065353216_i32_0 : i32 to f32
    cf.br ^bb5(%15 : f32)
  ^bb4:  // pred: ^bb1
    %16 = llvm.load %0 : !llvm.ptr -> f32
    %c1073741824_i32 = arith.constant 1073741824 : i32
    %17 = arith.bitcast %c1073741824_i32 : i32 to f32
    %18 = arith.subf %16, %17 : f32
    %c27_i32 = arith.constant 27 : i32
    %19 = arith.cmpi ult, %c27_i32, %6 : i32
    cf.cond_br %19, ^bb6, ^bb7
  ^bb5(%20: f32):  // 2 preds: ^bb3, ^bb16
    cf.br ^bb2(%20 : f32)
  ^bb6:  // 2 preds: ^bb4, ^bb7
    %21 = llvm.getelementptr %5[%c27_i32] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %22 = llvm.load %21 : !llvm.ptr -> !llvm.ptr
    %23 = llvm.load %22 : !llvm.ptr -> i32
    %c0_i32_1 = arith.constant 0 : i32
    %24 = arith.cmpi eq, %23, %c0_i32_1 : i32
    cf.cond_br %24, ^bb9, ^bb8
  ^bb7:  // pred: ^bb4
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // 3 preds: ^bb6, ^bb9, ^bb11
    %25 = llvm.getelementptr %22[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %26 = llvm.getelementptr %22[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %27 = llvm.getelementptr %22[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %28 = llvm.load %25 : !llvm.ptr -> !llvm.ptr
    %29 = llvm.load %26 : !llvm.ptr -> i32
    %30 = llvm.load %27 : !llvm.ptr -> !llvm.ptr
    %31 = llvm.load %28 : !llvm.ptr -> i32
    %c0_i32_2 = arith.constant 0 : i32
    %32 = arith.cmpi eq, %31, %c0_i32_2 : i32
    %33 = arith.cmpi ne, %2, %29 : i32
    %34 = arith.ori %32, %33 : i1
    cf.cond_br %34, ^bb11, ^bb10
  ^bb9:  // pred: ^bb6
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // pred: ^bb8
    %35 = llvm.call %28(%30, %18) vararg(!llvm.func<f32 (...)>) : !llvm.ptr, (!llvm.ptr, f32) -> f32
    %36 = llvm.load %0 : !llvm.ptr -> f32
    %c1065353216_i32_3 = arith.constant 1065353216 : i32
    %37 = arith.bitcast %c1065353216_i32_3 : i32 to f32
    %38 = arith.subf %36, %37 : f32
    %c27_i32_4 = arith.constant 27 : i32
    %39 = arith.cmpi ult, %c27_i32_4, %8 : i32
    cf.cond_br %39, ^bb12, ^bb13
  ^bb11:  // pred: ^bb8
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb8
  ^bb12:  // 2 preds: ^bb10, ^bb13
    %40 = llvm.getelementptr %7[%c27_i32_4] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %41 = llvm.load %40 : !llvm.ptr -> !llvm.ptr
    %42 = llvm.load %41 : !llvm.ptr -> i32
    %c0_i32_5 = arith.constant 0 : i32
    %43 = arith.cmpi eq, %42, %c0_i32_5 : i32
    cf.cond_br %43, ^bb15, ^bb14
  ^bb13:  // pred: ^bb10
    %c3_i32_6 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_6) : (i32) -> ()
    cf.br ^bb12
  ^bb14:  // 3 preds: ^bb12, ^bb15, ^bb17
    %44 = llvm.getelementptr %41[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %45 = llvm.getelementptr %41[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %46 = llvm.getelementptr %41[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %47 = llvm.load %44 : !llvm.ptr -> !llvm.ptr
    %48 = llvm.load %45 : !llvm.ptr -> i32
    %49 = llvm.load %46 : !llvm.ptr -> !llvm.ptr
    %50 = llvm.load %47 : !llvm.ptr -> i32
    %c0_i32_7 = arith.constant 0 : i32
    %51 = arith.cmpi eq, %50, %c0_i32_7 : i32
    %52 = arith.cmpi ne, %2, %48 : i32
    %53 = arith.ori %51, %52 : i1
    cf.cond_br %53, ^bb17, ^bb16
  ^bb15:  // pred: ^bb12
    %c4_i32_8 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_8) : (i32) -> ()
    cf.br ^bb14
  ^bb16:  // pred: ^bb14
    %54 = llvm.call %47(%49, %38) vararg(!llvm.func<f32 (...)>) : !llvm.ptr, (!llvm.ptr, f32) -> f32
    %55 = arith.addf %35, %54 : f32
    cf.br ^bb5(%55 : f32)
  ^bb17:  // pred: ^bb14
    %c5_i32_9 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_9) : (i32) -> ()
    cf.br ^bb14
  }
  func.func public @"fib-f64"(%arg0: !llvm.ptr, %arg1: f64) -> f64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : f64, !llvm.ptr
    %1 = llvm.getelementptr %arg0[36] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.load %4 : !llvm.ptr -> i32
    %7 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.load %4 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %0 : !llvm.ptr -> f64
    %c4607182418800017408_i64 = arith.constant 4607182418800017408 : i64
    %10 = arith.bitcast %c4607182418800017408_i64 : i64 to f64
    %11 = arith.cmpf ole, %9, %10 : f64
    %12 = arith.extui %11 : i1 to i32
    %c0_i32 = arith.constant 0 : i32
    %13 = arith.cmpi ne, %12, %c0_i32 : i32
    cf.cond_br %13, ^bb3, ^bb4
  ^bb2(%14: f64):  // pred: ^bb5
    return %14 : f64
  ^bb3:  // pred: ^bb1
    %c4607182418800017408_i64_0 = arith.constant 4607182418800017408 : i64
    %15 = arith.bitcast %c4607182418800017408_i64_0 : i64 to f64
    cf.br ^bb5(%15 : f64)
  ^bb4:  // pred: ^bb1
    %16 = llvm.load %0 : !llvm.ptr -> f64
    %c4611686018427387904_i64 = arith.constant 4611686018427387904 : i64
    %17 = arith.bitcast %c4611686018427387904_i64 : i64 to f64
    %18 = arith.subf %16, %17 : f64
    %c28_i32 = arith.constant 28 : i32
    %19 = arith.cmpi ult, %c28_i32, %6 : i32
    cf.cond_br %19, ^bb6, ^bb7
  ^bb5(%20: f64):  // 2 preds: ^bb3, ^bb16
    cf.br ^bb2(%20 : f64)
  ^bb6:  // 2 preds: ^bb4, ^bb7
    %21 = llvm.getelementptr %5[%c28_i32] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %22 = llvm.load %21 : !llvm.ptr -> !llvm.ptr
    %23 = llvm.load %22 : !llvm.ptr -> i32
    %c0_i32_1 = arith.constant 0 : i32
    %24 = arith.cmpi eq, %23, %c0_i32_1 : i32
    cf.cond_br %24, ^bb9, ^bb8
  ^bb7:  // pred: ^bb4
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // 3 preds: ^bb6, ^bb9, ^bb11
    %25 = llvm.getelementptr %22[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %26 = llvm.getelementptr %22[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %27 = llvm.getelementptr %22[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %28 = llvm.load %25 : !llvm.ptr -> !llvm.ptr
    %29 = llvm.load %26 : !llvm.ptr -> i32
    %30 = llvm.load %27 : !llvm.ptr -> !llvm.ptr
    %31 = llvm.load %28 : !llvm.ptr -> i32
    %c0_i32_2 = arith.constant 0 : i32
    %32 = arith.cmpi eq, %31, %c0_i32_2 : i32
    %33 = arith.cmpi ne, %2, %29 : i32
    %34 = arith.ori %32, %33 : i1
    cf.cond_br %34, ^bb11, ^bb10
  ^bb9:  // pred: ^bb6
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // pred: ^bb8
    %35 = llvm.call %28(%30, %18) vararg(!llvm.func<f64 (...)>) : !llvm.ptr, (!llvm.ptr, f64) -> f64
    %36 = llvm.load %0 : !llvm.ptr -> f64
    %c4607182418800017408_i64_3 = arith.constant 4607182418800017408 : i64
    %37 = arith.bitcast %c4607182418800017408_i64_3 : i64 to f64
    %38 = arith.subf %36, %37 : f64
    %c28_i32_4 = arith.constant 28 : i32
    %39 = arith.cmpi ult, %c28_i32_4, %8 : i32
    cf.cond_br %39, ^bb12, ^bb13
  ^bb11:  // pred: ^bb8
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb8
  ^bb12:  // 2 preds: ^bb10, ^bb13
    %40 = llvm.getelementptr %7[%c28_i32_4] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %41 = llvm.load %40 : !llvm.ptr -> !llvm.ptr
    %42 = llvm.load %41 : !llvm.ptr -> i32
    %c0_i32_5 = arith.constant 0 : i32
    %43 = arith.cmpi eq, %42, %c0_i32_5 : i32
    cf.cond_br %43, ^bb15, ^bb14
  ^bb13:  // pred: ^bb10
    %c3_i32_6 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_6) : (i32) -> ()
    cf.br ^bb12
  ^bb14:  // 3 preds: ^bb12, ^bb15, ^bb17
    %44 = llvm.getelementptr %41[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %45 = llvm.getelementptr %41[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %46 = llvm.getelementptr %41[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %47 = llvm.load %44 : !llvm.ptr -> !llvm.ptr
    %48 = llvm.load %45 : !llvm.ptr -> i32
    %49 = llvm.load %46 : !llvm.ptr -> !llvm.ptr
    %50 = llvm.load %47 : !llvm.ptr -> i32
    %c0_i32_7 = arith.constant 0 : i32
    %51 = arith.cmpi eq, %50, %c0_i32_7 : i32
    %52 = arith.cmpi ne, %2, %48 : i32
    %53 = arith.ori %51, %52 : i1
    cf.cond_br %53, ^bb17, ^bb16
  ^bb15:  // pred: ^bb12
    %c4_i32_8 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_8) : (i32) -> ()
    cf.br ^bb14
  ^bb16:  // pred: ^bb14
    %54 = llvm.call %47(%49, %38) vararg(!llvm.func<f64 (...)>) : !llvm.ptr, (!llvm.ptr, f64) -> f64
    %55 = arith.addf %35, %54 : f64
    cf.br ^bb5(%55 : f64)
  ^bb17:  // pred: ^bb14
    %c5_i32_9 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_9) : (i32) -> ()
    cf.br ^bb14
  }
  func.func public @even(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[24] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.load %4 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %7 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %8 = arith.cmpi eq, %7, %c0_i32 : i32
    %9 = arith.extui %8 : i1 to i32
    %c0_i32_0 = arith.constant 0 : i32
    %10 = arith.cmpi ne, %9, %c0_i32_0 : i32
    cf.cond_br %10, ^bb3, ^bb4
  ^bb2(%11: i32):  // pred: ^bb5
    return %11 : i32
  ^bb3:  // pred: ^bb1
    %c44_i32 = arith.constant 44 : i32
    cf.br ^bb5(%c44_i32 : i32)
  ^bb4:  // pred: ^bb1
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32 = arith.constant 1 : i32
    %13 = arith.subi %12, %c1_i32 : i32
    %c15_i32 = arith.constant 15 : i32
    %14 = arith.cmpi ult, %c15_i32, %6 : i32
    cf.cond_br %14, ^bb6, ^bb7
  ^bb5(%15: i32):  // 2 preds: ^bb3, ^bb10
    cf.br ^bb2(%15 : i32)
  ^bb6:  // 2 preds: ^bb4, ^bb7
    %16 = llvm.getelementptr %5[%c15_i32] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %17 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.load %17 : !llvm.ptr -> i32
    %c0_i32_1 = arith.constant 0 : i32
    %19 = arith.cmpi eq, %18, %c0_i32_1 : i32
    cf.cond_br %19, ^bb9, ^bb8
  ^bb7:  // pred: ^bb4
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // 3 preds: ^bb6, ^bb9, ^bb11
    %20 = llvm.getelementptr %17[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %21 = llvm.getelementptr %17[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %22 = llvm.getelementptr %17[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %23 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %24 = llvm.load %21 : !llvm.ptr -> i32
    %25 = llvm.load %22 : !llvm.ptr -> !llvm.ptr
    %26 = llvm.load %23 : !llvm.ptr -> i32
    %c0_i32_2 = arith.constant 0 : i32
    %27 = arith.cmpi eq, %26, %c0_i32_2 : i32
    %28 = arith.cmpi ne, %2, %24 : i32
    %29 = arith.ori %27, %28 : i1
    cf.cond_br %29, ^bb11, ^bb10
  ^bb9:  // pred: ^bb6
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // pred: ^bb8
    %30 = llvm.call %23(%25, %13) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> i32
    cf.br ^bb5(%30 : i32)
  ^bb11:  // pred: ^bb8
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb8
  }
  func.func public @odd(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[24] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.load %4 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %7 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %8 = arith.cmpi eq, %7, %c0_i32 : i32
    %9 = arith.extui %8 : i1 to i32
    %c0_i32_0 = arith.constant 0 : i32
    %10 = arith.cmpi ne, %9, %c0_i32_0 : i32
    cf.cond_br %10, ^bb3, ^bb4
  ^bb2(%11: i32):  // pred: ^bb5
    return %11 : i32
  ^bb3:  // pred: ^bb1
    %c99_i32 = arith.constant 99 : i32
    cf.br ^bb5(%c99_i32 : i32)
  ^bb4:  // pred: ^bb1
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32 = arith.constant 1 : i32
    %13 = arith.subi %12, %c1_i32 : i32
    %c14_i32 = arith.constant 14 : i32
    %14 = arith.cmpi ult, %c14_i32, %6 : i32
    cf.cond_br %14, ^bb6, ^bb7
  ^bb5(%15: i32):  // 2 preds: ^bb3, ^bb10
    cf.br ^bb2(%15 : i32)
  ^bb6:  // 2 preds: ^bb4, ^bb7
    %16 = llvm.getelementptr %5[%c14_i32] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %17 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.load %17 : !llvm.ptr -> i32
    %c0_i32_1 = arith.constant 0 : i32
    %19 = arith.cmpi eq, %18, %c0_i32_1 : i32
    cf.cond_br %19, ^bb9, ^bb8
  ^bb7:  // pred: ^bb4
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // 3 preds: ^bb6, ^bb9, ^bb11
    %20 = llvm.getelementptr %17[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %21 = llvm.getelementptr %17[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %22 = llvm.getelementptr %17[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %23 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %24 = llvm.load %21 : !llvm.ptr -> i32
    %25 = llvm.load %22 : !llvm.ptr -> !llvm.ptr
    %26 = llvm.load %23 : !llvm.ptr -> i32
    %c0_i32_2 = arith.constant 0 : i32
    %27 = arith.cmpi eq, %26, %c0_i32_2 : i32
    %28 = arith.cmpi ne, %2, %24 : i32
    %29 = arith.ori %27, %28 : i1
    cf.cond_br %29, ^bb11, ^bb10
  ^bb9:  // pred: ^bb6
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // pred: ^bb8
    %30 = llvm.call %23(%25, %13) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> i32
    cf.br ^bb5(%30 : i32)
  ^bb11:  // pred: ^bb8
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb8
  }
  func.func public @runaway(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c16_i32 = arith.constant 16 : i32
    %6 = arith.cmpi ult, %c16_i32, %5 : i32
    cf.cond_br %6, ^bb3, ^bb4
  ^bb2:  // pred: ^bb7
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %7 = llvm.getelementptr %4[%c16_i32] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.load %8 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %10 = arith.cmpi eq, %9, %c0_i32 : i32
    cf.cond_br %10, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 3 preds: ^bb3, ^bb6, ^bb8
    %11 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.getelementptr %8[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.getelementptr %8[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    %15 = llvm.load %12 : !llvm.ptr -> i32
    %16 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.load %14 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %18 = arith.cmpi eq, %17, %c0_i32_0 : i32
    %19 = arith.cmpi ne, %1, %15 : i32
    %20 = arith.ori %18, %19 : i1
    cf.cond_br %20, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // pred: ^bb5
    %21 = llvm.call %14(%16) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr) -> !llvm.void
    cf.br ^bb2
  ^bb8:  // pred: ^bb5
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb5
  }
  func.func public @"mutual-runaway"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c18_i32 = arith.constant 18 : i32
    %6 = arith.cmpi ult, %c18_i32, %5 : i32
    cf.cond_br %6, ^bb3, ^bb4
  ^bb2:  // pred: ^bb7
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %7 = llvm.getelementptr %4[%c18_i32] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.load %8 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %10 = arith.cmpi eq, %9, %c0_i32 : i32
    cf.cond_br %10, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 3 preds: ^bb3, ^bb6, ^bb8
    %11 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.getelementptr %8[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.getelementptr %8[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    %15 = llvm.load %12 : !llvm.ptr -> i32
    %16 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.load %14 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %18 = arith.cmpi eq, %17, %c0_i32_0 : i32
    %19 = arith.cmpi ne, %1, %15 : i32
    %20 = arith.ori %18, %19 : i1
    cf.cond_br %20, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // pred: ^bb5
    %21 = llvm.call %14(%16) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr) -> !llvm.void
    cf.br ^bb2
  ^bb8:  // pred: ^bb5
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb5
  }
  func.func @"mutual-runaway2"(%arg0: !llvm.ptr) {
    %0 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c17_i32 = arith.constant 17 : i32
    %6 = arith.cmpi ult, %c17_i32, %5 : i32
    cf.cond_br %6, ^bb3, ^bb4
  ^bb2:  // pred: ^bb7
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %7 = llvm.getelementptr %4[%c17_i32] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.load %8 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %10 = arith.cmpi eq, %9, %c0_i32 : i32
    cf.cond_br %10, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 3 preds: ^bb3, ^bb6, ^bb8
    %11 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.getelementptr %8[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.getelementptr %8[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    %15 = llvm.load %12 : !llvm.ptr -> i32
    %16 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.load %14 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %18 = arith.cmpi eq, %17, %c0_i32_0 : i32
    %19 = arith.cmpi ne, %1, %15 : i32
    %20 = arith.ori %18, %19 : i1
    cf.cond_br %20, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // pred: ^bb5
    %21 = llvm.call %14(%16) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr) -> !llvm.void
    cf.br ^bb2
  ^bb8:  // pred: ^bb5
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb5
  }
  func.func public @"as-select-first"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[4] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %6 = arith.cmpi ult, %c0_i32, %5 : i32
    cf.cond_br %6, ^bb3, ^bb4
  ^bb2(%7: i32):  // pred: ^bb7
    return %7 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %8 = llvm.getelementptr %4[%c0_i32] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.load %9 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %11 = arith.cmpi eq, %10, %c0_i32_0 : i32
    cf.cond_br %11, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 3 preds: ^bb3, ^bb6, ^bb8
    %12 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.getelementptr %9[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %9[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    %16 = llvm.load %13 : !llvm.ptr -> i32
    %17 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.load %15 : !llvm.ptr -> i32
    %c0_i32_1 = arith.constant 0 : i32
    %19 = arith.cmpi eq, %18, %c0_i32_1 : i32
    %20 = arith.cmpi ne, %1, %16 : i32
    %21 = arith.ori %19, %20 : i1
    cf.cond_br %21, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // pred: ^bb5
    %22 = llvm.call %15(%17) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr) -> i32
    %c2_i32 = arith.constant 2 : i32
    %c3_i32_2 = arith.constant 3 : i32
    %c0_i32_3 = arith.constant 0 : i32
    %23 = arith.cmpi ne, %c3_i32_2, %c0_i32_3 : i32
    %24 = arith.select %23, %22, %c2_i32 : i32
    cf.br ^bb2(%24 : i32)
  ^bb8:  // pred: ^bb5
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb5
  }
  func.func public @"as-select-mid"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[4] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2_i32 = arith.constant 2 : i32
    %c0_i32 = arith.constant 0 : i32
    %6 = arith.cmpi ult, %c0_i32, %5 : i32
    cf.cond_br %6, ^bb3, ^bb4
  ^bb2(%7: i32):  // pred: ^bb7
    return %7 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %8 = llvm.getelementptr %4[%c0_i32] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.load %9 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %11 = arith.cmpi eq, %10, %c0_i32_0 : i32
    cf.cond_br %11, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 3 preds: ^bb3, ^bb6, ^bb8
    %12 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.getelementptr %9[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %9[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    %16 = llvm.load %13 : !llvm.ptr -> i32
    %17 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.load %15 : !llvm.ptr -> i32
    %c0_i32_1 = arith.constant 0 : i32
    %19 = arith.cmpi eq, %18, %c0_i32_1 : i32
    %20 = arith.cmpi ne, %1, %16 : i32
    %21 = arith.ori %19, %20 : i1
    cf.cond_br %21, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // pred: ^bb5
    %22 = llvm.call %15(%17) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr) -> i32
    %c3_i32_2 = arith.constant 3 : i32
    %c0_i32_3 = arith.constant 0 : i32
    %23 = arith.cmpi ne, %c3_i32_2, %c0_i32_3 : i32
    %24 = arith.select %23, %c2_i32, %22 : i32
    cf.br ^bb2(%24 : i32)
  ^bb8:  // pred: ^bb5
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb5
  }
  func.func public @"as-select-last"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[4] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2_i32 = arith.constant 2 : i32
    %c3_i32 = arith.constant 3 : i32
    %c0_i32 = arith.constant 0 : i32
    %6 = arith.cmpi ult, %c0_i32, %5 : i32
    cf.cond_br %6, ^bb3, ^bb4
  ^bb2(%7: i32):  // pred: ^bb7
    return %7 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %8 = llvm.getelementptr %4[%c0_i32] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.load %9 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %11 = arith.cmpi eq, %10, %c0_i32_0 : i32
    cf.cond_br %11, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32_1 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_1) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 3 preds: ^bb3, ^bb6, ^bb8
    %12 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.getelementptr %9[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %9[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    %16 = llvm.load %13 : !llvm.ptr -> i32
    %17 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.load %15 : !llvm.ptr -> i32
    %c0_i32_2 = arith.constant 0 : i32
    %19 = arith.cmpi eq, %18, %c0_i32_2 : i32
    %20 = arith.cmpi ne, %1, %16 : i32
    %21 = arith.ori %19, %20 : i1
    cf.cond_br %21, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // pred: ^bb5
    %22 = llvm.call %15(%17) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr) -> i32
    %c0_i32_3 = arith.constant 0 : i32
    %23 = arith.cmpi ne, %22, %c0_i32_3 : i32
    %24 = arith.select %23, %c2_i32, %c3_i32 : i32
    cf.br ^bb2(%24 : i32)
  ^bb8:  // pred: ^bb5
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb5
  }
  func.func public @"as-if-condition"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[4] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %6 = arith.cmpi ult, %c0_i32, %5 : i32
    cf.cond_br %6, ^bb3, ^bb4
  ^bb2(%7: i32):  // pred: ^bb11
    return %7 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %8 = llvm.getelementptr %4[%c0_i32] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.load %9 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %11 = arith.cmpi eq, %10, %c0_i32_0 : i32
    cf.cond_br %11, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 3 preds: ^bb3, ^bb6, ^bb8
    %12 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.getelementptr %9[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %9[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    %16 = llvm.load %13 : !llvm.ptr -> i32
    %17 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.load %15 : !llvm.ptr -> i32
    %c0_i32_1 = arith.constant 0 : i32
    %19 = arith.cmpi eq, %18, %c0_i32_1 : i32
    %20 = arith.cmpi ne, %1, %16 : i32
    %21 = arith.ori %19, %20 : i1
    cf.cond_br %21, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // pred: ^bb5
    %22 = llvm.call %15(%17) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr) -> i32
    %c0_i32_2 = arith.constant 0 : i32
    %23 = arith.cmpi ne, %22, %c0_i32_2 : i32
    cf.cond_br %23, ^bb9, ^bb10
  ^bb8:  // pred: ^bb5
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb9:  // pred: ^bb7
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb11(%c1_i32 : i32)
  ^bb10:  // pred: ^bb7
    %c2_i32 = arith.constant 2 : i32
    cf.br ^bb11(%c2_i32 : i32)
  ^bb11(%24: i32):  // 2 preds: ^bb9, ^bb10
    cf.br ^bb2(%24 : i32)
  }
  func.func public @"as-br_if-first"(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %6 = arith.cmpi ult, %c1_i32, %5 : i32
    cf.cond_br %6, ^bb4, ^bb5
  ^bb2(%7: i64):  // pred: ^bb3
    return %7 : i64
  ^bb3(%8: i64):  // 2 preds: ^bb8, ^bb10
    cf.br ^bb2(%8 : i64)
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %9 = llvm.getelementptr %4[%c1_i32] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.load %10 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %12 = arith.cmpi eq, %11, %c0_i32 : i32
    cf.cond_br %12, ^bb7, ^bb6
  ^bb5:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb4
  ^bb6:  // 3 preds: ^bb4, ^bb7, ^bb9
    %13 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %10[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %10[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.load %14 : !llvm.ptr -> i32
    %18 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.load %16 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %20 = arith.cmpi eq, %19, %c0_i32_0 : i32
    %21 = arith.cmpi ne, %1, %17 : i32
    %22 = arith.ori %20, %21 : i1
    cf.cond_br %22, ^bb9, ^bb8
  ^bb7:  // pred: ^bb4
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // pred: ^bb6
    %23 = llvm.call %16(%18) vararg(!llvm.func<i64 (...)>) : !llvm.ptr, (!llvm.ptr) -> i64
    %c2_i32 = arith.constant 2 : i32
    %c0_i32_1 = arith.constant 0 : i32
    %24 = arith.cmpi ne, %c2_i32, %c0_i32_1 : i32
    cf.cond_br %24, ^bb3(%23 : i64), ^bb10(%23 : i64)
  ^bb9:  // pred: ^bb6
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb6
  ^bb10(%25: i64):  // pred: ^bb8
    cf.br ^bb3(%23 : i64)
  }
  func.func public @"as-br_if-last"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[4] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2_i32 = arith.constant 2 : i32
    %c0_i32 = arith.constant 0 : i32
    %6 = arith.cmpi ult, %c0_i32, %5 : i32
    cf.cond_br %6, ^bb4, ^bb5
  ^bb2(%7: i32):  // pred: ^bb3
    return %7 : i32
  ^bb3(%8: i32):  // 2 preds: ^bb8, ^bb10
    cf.br ^bb2(%8 : i32)
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %9 = llvm.getelementptr %4[%c0_i32] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.load %10 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %12 = arith.cmpi eq, %11, %c0_i32_0 : i32
    cf.cond_br %12, ^bb7, ^bb6
  ^bb5:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb4
  ^bb6:  // 3 preds: ^bb4, ^bb7, ^bb9
    %13 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %10[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %10[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.load %14 : !llvm.ptr -> i32
    %18 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.load %16 : !llvm.ptr -> i32
    %c0_i32_1 = arith.constant 0 : i32
    %20 = arith.cmpi eq, %19, %c0_i32_1 : i32
    %21 = arith.cmpi ne, %1, %17 : i32
    %22 = arith.ori %20, %21 : i1
    cf.cond_br %22, ^bb9, ^bb8
  ^bb7:  // pred: ^bb4
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // pred: ^bb6
    %23 = llvm.call %16(%18) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr) -> i32
    %c0_i32_2 = arith.constant 0 : i32
    %24 = arith.cmpi ne, %23, %c0_i32_2 : i32
    cf.cond_br %24, ^bb3(%c2_i32 : i32), ^bb10(%c2_i32 : i32)
  ^bb9:  // pred: ^bb6
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb6
  ^bb10(%25: i32):  // pred: ^bb8
    cf.br ^bb3(%c2_i32 : i32)
  }
  func.func public @"as-br_table-first"(%arg0: !llvm.ptr) -> f32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[12] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2_i32 = arith.constant 2 : i32
    %6 = arith.cmpi ult, %c2_i32, %5 : i32
    cf.cond_br %6, ^bb4, ^bb5
  ^bb2(%7: f32):  // pred: ^bb3
    return %7 : f32
  ^bb3(%8: f32):  // 2 preds: ^bb8, ^bb8
    cf.br ^bb2(%8 : f32)
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %9 = llvm.getelementptr %4[%c2_i32] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.load %10 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %12 = arith.cmpi eq, %11, %c0_i32 : i32
    cf.cond_br %12, ^bb7, ^bb6
  ^bb5:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb4
  ^bb6:  // 3 preds: ^bb4, ^bb7, ^bb9
    %13 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %10[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %10[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.load %14 : !llvm.ptr -> i32
    %18 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.load %16 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %20 = arith.cmpi eq, %19, %c0_i32_0 : i32
    %21 = arith.cmpi ne, %1, %17 : i32
    %22 = arith.ori %20, %21 : i1
    cf.cond_br %22, ^bb9, ^bb8
  ^bb7:  // pred: ^bb4
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // pred: ^bb6
    %23 = llvm.call %16(%18) vararg(!llvm.func<f32 (...)>) : !llvm.ptr, (!llvm.ptr) -> f32
    %c2_i32_1 = arith.constant 2 : i32
    cf.switch %c2_i32_1 : i32, [
      default: ^bb3(%23 : f32),
      0: ^bb3(%23 : f32)
    ]
  ^bb9:  // pred: ^bb6
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb6
  }
  func.func public @"as-br_table-last"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[4] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2_i32 = arith.constant 2 : i32
    %c0_i32 = arith.constant 0 : i32
    %6 = arith.cmpi ult, %c0_i32, %5 : i32
    cf.cond_br %6, ^bb4, ^bb5
  ^bb2(%7: i32):  // pred: ^bb3
    return %7 : i32
  ^bb3(%8: i32):  // 2 preds: ^bb8, ^bb8
    cf.br ^bb2(%8 : i32)
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %9 = llvm.getelementptr %4[%c0_i32] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.load %10 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %12 = arith.cmpi eq, %11, %c0_i32_0 : i32
    cf.cond_br %12, ^bb7, ^bb6
  ^bb5:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb4
  ^bb6:  // 3 preds: ^bb4, ^bb7, ^bb9
    %13 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %10[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %10[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.load %14 : !llvm.ptr -> i32
    %18 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.load %16 : !llvm.ptr -> i32
    %c0_i32_1 = arith.constant 0 : i32
    %20 = arith.cmpi eq, %19, %c0_i32_1 : i32
    %21 = arith.cmpi ne, %1, %17 : i32
    %22 = arith.ori %20, %21 : i1
    cf.cond_br %22, ^bb9, ^bb8
  ^bb7:  // pred: ^bb4
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // pred: ^bb6
    %23 = llvm.call %16(%18) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr) -> i32
    cf.switch %23 : i32, [
      default: ^bb3(%c2_i32 : i32),
      0: ^bb3(%c2_i32 : i32)
    ]
  ^bb9:  // pred: ^bb6
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb6
  }
  func.func public @"as-store-first"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[4] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i32
    %6 = llvm.getelementptr %arg0[128] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %9 = arith.cmpi ult, %c0_i32, %5 : i32
    cf.cond_br %9, ^bb3, ^bb4
  ^bb2:  // pred: ^bb7
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %10 = llvm.getelementptr %4[%c0_i32] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.load %11 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %13 = arith.cmpi eq, %12, %c0_i32_0 : i32
    cf.cond_br %13, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 3 preds: ^bb3, ^bb6, ^bb8
    %14 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %11[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %11[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.load %15 : !llvm.ptr -> i32
    %19 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %20 = llvm.load %17 : !llvm.ptr -> i32
    %c0_i32_1 = arith.constant 0 : i32
    %21 = arith.cmpi eq, %20, %c0_i32_1 : i32
    %22 = arith.cmpi ne, %1, %18 : i32
    %23 = arith.ori %21, %22 : i1
    cf.cond_br %23, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // pred: ^bb5
    %24 = llvm.call %17(%19) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr) -> i32
    %c1_i32 = arith.constant 1 : i32
    %c0_i64 = arith.constant 0 : i64
    %25 = arith.extui %24 : i32 to i64
    %26 = arith.addi %25, %c0_i64 : i64
    %27 = llvm.getelementptr %8[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %c1_i32, %27 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb8:  // pred: ^bb5
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb5
  }
  func.func public @"as-store-last"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i32
    %6 = llvm.getelementptr %arg0[128] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c10_i32 = arith.constant 10 : i32
    %c3_i32 = arith.constant 3 : i32
    %9 = arith.cmpi ult, %c3_i32, %5 : i32
    cf.cond_br %9, ^bb3, ^bb4
  ^bb2:  // pred: ^bb7
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %10 = llvm.getelementptr %4[%c3_i32] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.load %11 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %13 = arith.cmpi eq, %12, %c0_i32 : i32
    cf.cond_br %13, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32_0 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_0) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 3 preds: ^bb3, ^bb6, ^bb8
    %14 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %11[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %11[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.load %15 : !llvm.ptr -> i32
    %19 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %20 = llvm.load %17 : !llvm.ptr -> i32
    %c0_i32_1 = arith.constant 0 : i32
    %21 = arith.cmpi eq, %20, %c0_i32_1 : i32
    %22 = arith.cmpi ne, %1, %18 : i32
    %23 = arith.ori %21, %22 : i1
    cf.cond_br %23, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // pred: ^bb5
    %24 = llvm.call %17(%19) vararg(!llvm.func<f64 (...)>) : !llvm.ptr, (!llvm.ptr) -> f64
    %c0_i64 = arith.constant 0 : i64
    %25 = arith.extui %c10_i32 : i32 to i64
    %26 = arith.addi %25, %c0_i64 : i64
    %27 = llvm.getelementptr %8[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %24, %27 : f64, !llvm.ptr
    cf.br ^bb2
  ^bb8:  // pred: ^bb5
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb5
  }
  func.func public @"as-memory.grow-value"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[4] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %6 = arith.cmpi ult, %c0_i32, %5 : i32
    cf.cond_br %6, ^bb3, ^bb4
  ^bb2(%7: i32):  // pred: ^bb7
    return %7 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %8 = llvm.getelementptr %4[%c0_i32] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.load %9 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %11 = arith.cmpi eq, %10, %c0_i32_0 : i32
    cf.cond_br %11, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 3 preds: ^bb3, ^bb6, ^bb8
    %12 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.getelementptr %9[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %9[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    %16 = llvm.load %13 : !llvm.ptr -> i32
    %17 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.load %15 : !llvm.ptr -> i32
    %c0_i32_1 = arith.constant 0 : i32
    %19 = arith.cmpi eq, %18, %c0_i32_1 : i32
    %20 = arith.cmpi ne, %1, %16 : i32
    %21 = arith.ori %19, %20 : i1
    cf.cond_br %21, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // pred: ^bb5
    %22 = llvm.call %15(%17) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr) -> i32
    %c0_i32_2 = arith.constant 0 : i32
    %23 = call @dora_fn_wasm_memory_grow(%arg0, %22, %c0_i32_2) : (!llvm.ptr, i32, i32) -> i32
    cf.br ^bb2(%23 : i32)
  ^bb8:  // pred: ^bb5
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb5
  }
  func.func public @"as-return-value"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[24] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c4_i32 = arith.constant 4 : i32
    %6 = arith.cmpi ult, %c4_i32, %5 : i32
    cf.cond_br %6, ^bb3, ^bb4
  ^bb2(%7: i32):  // pred: ^bb7
    return %7 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %8 = llvm.getelementptr %4[%c4_i32] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.load %9 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %11 = arith.cmpi eq, %10, %c0_i32 : i32
    cf.cond_br %11, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 3 preds: ^bb3, ^bb6, ^bb8
    %12 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.getelementptr %9[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %9[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    %16 = llvm.load %13 : !llvm.ptr -> i32
    %17 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.load %15 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %19 = arith.cmpi eq, %18, %c0_i32_0 : i32
    %20 = arith.cmpi ne, %1, %16 : i32
    %21 = arith.ori %19, %20 : i1
    cf.cond_br %21, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32_1 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_1) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // pred: ^bb5
    %22 = llvm.call %15(%17, %c1_i32) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> i32
    cf.br ^bb2(%22 : i32)
  ^bb8:  // pred: ^bb5
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb5
  }
  func.func public @"as-drop-operand"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[28] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i64 = arith.constant 1 : i64
    %c5_i32 = arith.constant 5 : i32
    %6 = arith.cmpi ult, %c5_i32, %5 : i32
    cf.cond_br %6, ^bb3, ^bb4
  ^bb2:  // pred: ^bb7
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %7 = llvm.getelementptr %4[%c5_i32] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.load %8 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %10 = arith.cmpi eq, %9, %c0_i32 : i32
    cf.cond_br %10, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 3 preds: ^bb3, ^bb6, ^bb8
    %11 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.getelementptr %8[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.getelementptr %8[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    %15 = llvm.load %12 : !llvm.ptr -> i32
    %16 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.load %14 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %18 = arith.cmpi eq, %17, %c0_i32_0 : i32
    %19 = arith.cmpi ne, %1, %15 : i32
    %20 = arith.ori %18, %19 : i1
    cf.cond_br %20, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // pred: ^bb5
    %21 = llvm.call %14(%16, %c1_i64) vararg(!llvm.func<i64 (...)>) : !llvm.ptr, (!llvm.ptr, i64) -> i64
    cf.br ^bb2
  ^bb8:  // pred: ^bb5
    %c5_i32_1 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_1) : (i32) -> ()
    cf.br ^bb5
  }
  func.func public @"as-br-value"(%arg0: !llvm.ptr) -> f32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1065353216_i32 = arith.constant 1065353216 : i32
    %6 = arith.bitcast %c1065353216_i32 : i32 to f32
    %c6_i32 = arith.constant 6 : i32
    %7 = arith.cmpi ult, %c6_i32, %5 : i32
    cf.cond_br %7, ^bb4, ^bb5
  ^bb2(%8: f32):  // pred: ^bb3
    return %8 : f32
  ^bb3(%9: f32):  // pred: ^bb8
    cf.br ^bb2(%9 : f32)
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %10 = llvm.getelementptr %4[%c6_i32] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.load %11 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %13 = arith.cmpi eq, %12, %c0_i32 : i32
    cf.cond_br %13, ^bb7, ^bb6
  ^bb5:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb4
  ^bb6:  // 3 preds: ^bb4, ^bb7, ^bb9
    %14 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %11[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %11[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.load %15 : !llvm.ptr -> i32
    %19 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %20 = llvm.load %17 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %21 = arith.cmpi eq, %20, %c0_i32_0 : i32
    %22 = arith.cmpi ne, %1, %18 : i32
    %23 = arith.ori %21, %22 : i1
    cf.cond_br %23, ^bb9, ^bb8
  ^bb7:  // pred: ^bb4
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // pred: ^bb6
    %24 = llvm.call %17(%19, %6) vararg(!llvm.func<f32 (...)>) : !llvm.ptr, (!llvm.ptr, f32) -> f32
    cf.br ^bb3(%24 : f32)
  ^bb9:  // pred: ^bb6
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb6
  }
  func.func public @"as-local.set-value"(%arg0: !llvm.ptr) -> f64 attributes {llvm.emit_c_interface} {
    %cst = arith.constant 0.000000e+00 : f64
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f64 : (i64) -> !llvm.ptr
    llvm.store %cst, %0 : f64, !llvm.ptr
    %1 = llvm.getelementptr %arg0[36] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.load %4 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c4607182418800017408_i64 = arith.constant 4607182418800017408 : i64
    %7 = arith.bitcast %c4607182418800017408_i64 : i64 to f64
    %c7_i32 = arith.constant 7 : i32
    %8 = arith.cmpi ult, %c7_i32, %6 : i32
    cf.cond_br %8, ^bb3, ^bb4
  ^bb2(%9: f64):  // pred: ^bb7
    return %9 : f64
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %10 = llvm.getelementptr %5[%c7_i32] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.load %11 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %13 = arith.cmpi eq, %12, %c0_i32 : i32
    cf.cond_br %13, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 3 preds: ^bb3, ^bb6, ^bb8
    %14 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %11[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %11[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.load %15 : !llvm.ptr -> i32
    %19 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %20 = llvm.load %17 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %21 = arith.cmpi eq, %20, %c0_i32_0 : i32
    %22 = arith.cmpi ne, %2, %18 : i32
    %23 = arith.ori %21, %22 : i1
    cf.cond_br %23, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // pred: ^bb5
    %24 = llvm.call %17(%19, %7) vararg(!llvm.func<f64 (...)>) : !llvm.ptr, (!llvm.ptr, f64) -> f64
    llvm.store %24, %0 : f64, !llvm.ptr
    %25 = llvm.load %0 : !llvm.ptr -> f64
    cf.br ^bb2(%25 : f64)
  ^bb8:  // pred: ^bb5
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb5
  }
  func.func public @"as-local.tee-value"(%arg0: !llvm.ptr) -> f64 attributes {llvm.emit_c_interface} {
    %cst = arith.constant 0.000000e+00 : f64
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f64 : (i64) -> !llvm.ptr
    llvm.store %cst, %0 : f64, !llvm.ptr
    %1 = llvm.getelementptr %arg0[36] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.load %4 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c4607182418800017408_i64 = arith.constant 4607182418800017408 : i64
    %7 = arith.bitcast %c4607182418800017408_i64 : i64 to f64
    %c7_i32 = arith.constant 7 : i32
    %8 = arith.cmpi ult, %c7_i32, %6 : i32
    cf.cond_br %8, ^bb3, ^bb4
  ^bb2(%9: f64):  // pred: ^bb7
    return %9 : f64
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %10 = llvm.getelementptr %5[%c7_i32] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.load %11 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %13 = arith.cmpi eq, %12, %c0_i32 : i32
    cf.cond_br %13, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 3 preds: ^bb3, ^bb6, ^bb8
    %14 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %11[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %11[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.load %15 : !llvm.ptr -> i32
    %19 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %20 = llvm.load %17 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %21 = arith.cmpi eq, %20, %c0_i32_0 : i32
    %22 = arith.cmpi ne, %2, %18 : i32
    %23 = arith.ori %21, %22 : i1
    cf.cond_br %23, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // pred: ^bb5
    %24 = llvm.call %17(%19, %7) vararg(!llvm.func<f64 (...)>) : !llvm.ptr, (!llvm.ptr, f64) -> f64
    llvm.store %24, %0 : f64, !llvm.ptr
    cf.br ^bb2(%24 : f64)
  ^bb8:  // pred: ^bb5
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb5
  }
  func.func public @"as-global.set-value"(%arg0: !llvm.ptr) -> f64 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[36] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i32
    %6 = llvm.getelementptr %arg0[144] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c4607182418800017408_i64 = arith.constant 4607182418800017408 : i64
    %8 = arith.bitcast %c4607182418800017408_i64 : i64 to f64
    %c7_i32 = arith.constant 7 : i32
    %9 = arith.cmpi ult, %c7_i32, %5 : i32
    cf.cond_br %9, ^bb3, ^bb4
  ^bb2(%10: f64):  // pred: ^bb7
    return %10 : f64
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %11 = llvm.getelementptr %4[%c7_i32] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.load %12 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %14 = arith.cmpi eq, %13, %c0_i32 : i32
    cf.cond_br %14, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 3 preds: ^bb3, ^bb6, ^bb8
    %15 = llvm.getelementptr %12[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %12[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.getelementptr %12[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %18 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.load %16 : !llvm.ptr -> i32
    %20 = llvm.load %17 : !llvm.ptr -> !llvm.ptr
    %21 = llvm.load %18 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %22 = arith.cmpi eq, %21, %c0_i32_0 : i32
    %23 = arith.cmpi ne, %1, %19 : i32
    %24 = arith.ori %22, %23 : i1
    cf.cond_br %24, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // pred: ^bb5
    %25 = llvm.call %18(%20, %8) vararg(!llvm.func<f64 (...)>) : !llvm.ptr, (!llvm.ptr, f64) -> f64
    llvm.store %25, %7 : f64, !llvm.ptr
    %26 = llvm.load %7 : !llvm.ptr -> f64
    cf.br ^bb2(%26 : f64)
  ^bb8:  // pred: ^bb5
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb5
  }
  func.func public @"as-load-operand"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[4] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i32
    %6 = llvm.getelementptr %arg0[128] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %9 = arith.cmpi ult, %c0_i32, %5 : i32
    cf.cond_br %9, ^bb3, ^bb4
  ^bb2(%10: i32):  // pred: ^bb7
    return %10 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %11 = llvm.getelementptr %4[%c0_i32] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.load %12 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %14 = arith.cmpi eq, %13, %c0_i32_0 : i32
    cf.cond_br %14, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 3 preds: ^bb3, ^bb6, ^bb8
    %15 = llvm.getelementptr %12[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %12[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.getelementptr %12[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %18 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.load %16 : !llvm.ptr -> i32
    %20 = llvm.load %17 : !llvm.ptr -> !llvm.ptr
    %21 = llvm.load %18 : !llvm.ptr -> i32
    %c0_i32_1 = arith.constant 0 : i32
    %22 = arith.cmpi eq, %21, %c0_i32_1 : i32
    %23 = arith.cmpi ne, %1, %19 : i32
    %24 = arith.ori %22, %23 : i1
    cf.cond_br %24, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // pred: ^bb5
    %25 = llvm.call %18(%20) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr) -> i32
    %c0_i64 = arith.constant 0 : i64
    %26 = arith.extui %25 : i32 to i64
    %27 = arith.addi %26, %c0_i64 : i64
    %28 = llvm.getelementptr %8[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %29 = llvm.load %28 : !llvm.ptr -> i32
    cf.br ^bb2(%29 : i32)
  ^bb8:  // pred: ^bb5
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb5
  }
  func.func public @"as-unary-operand"(%arg0: !llvm.ptr) -> f32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %6 = arith.bitcast %c0_i32 : i32 to f32
    %c6_i32 = arith.constant 6 : i32
    %7 = arith.cmpi ult, %c6_i32, %5 : i32
    cf.cond_br %7, ^bb4, ^bb5
  ^bb2(%8: f32):  // pred: ^bb3
    return %8 : f32
  ^bb3(%9: f32):  // pred: ^bb8
    cf.br ^bb2(%9 : f32)
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %10 = llvm.getelementptr %4[%c6_i32] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.load %11 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %13 = arith.cmpi eq, %12, %c0_i32_0 : i32
    cf.cond_br %13, ^bb7, ^bb6
  ^bb5:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb4
  ^bb6:  // 3 preds: ^bb4, ^bb7, ^bb9
    %14 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %11[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %11[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.load %15 : !llvm.ptr -> i32
    %19 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %20 = llvm.load %17 : !llvm.ptr -> i32
    %c0_i32_1 = arith.constant 0 : i32
    %21 = arith.cmpi eq, %20, %c0_i32_1 : i32
    %22 = arith.cmpi ne, %1, %18 : i32
    %23 = arith.ori %21, %22 : i1
    cf.cond_br %23, ^bb9, ^bb8
  ^bb7:  // pred: ^bb4
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // pred: ^bb6
    %24 = llvm.call %17(%19, %6) vararg(!llvm.func<f32 (...)>) : !llvm.ptr, (!llvm.ptr, f32) -> f32
    %25 = math.sqrt %24 : f32
    cf.br ^bb3(%25 : f32)
  ^bb9:  // pred: ^bb6
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb6
  }
  func.func public @"as-binary-left"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[24] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c4_i32 = arith.constant 4 : i32
    %6 = arith.cmpi ult, %c4_i32, %5 : i32
    cf.cond_br %6, ^bb4, ^bb5
  ^bb2(%7: i32):  // pred: ^bb3
    return %7 : i32
  ^bb3(%8: i32):  // pred: ^bb8
    cf.br ^bb2(%8 : i32)
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %9 = llvm.getelementptr %4[%c4_i32] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.load %10 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %12 = arith.cmpi eq, %11, %c0_i32 : i32
    cf.cond_br %12, ^bb7, ^bb6
  ^bb5:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb4
  ^bb6:  // 3 preds: ^bb4, ^bb7, ^bb9
    %13 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %10[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %10[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.load %14 : !llvm.ptr -> i32
    %18 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.load %16 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %20 = arith.cmpi eq, %19, %c0_i32_0 : i32
    %21 = arith.cmpi ne, %1, %17 : i32
    %22 = arith.ori %20, %21 : i1
    cf.cond_br %22, ^bb9, ^bb8
  ^bb7:  // pred: ^bb4
    %c4_i32_1 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_1) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // pred: ^bb6
    %23 = llvm.call %16(%18, %c1_i32) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> i32
    %c10_i32 = arith.constant 10 : i32
    %24 = arith.addi %23, %c10_i32 : i32
    cf.br ^bb3(%24 : i32)
  ^bb9:  // pred: ^bb6
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb6
  }
  func.func public @"as-binary-right"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[24] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c10_i32 = arith.constant 10 : i32
    %c1_i32 = arith.constant 1 : i32
    %c4_i32 = arith.constant 4 : i32
    %6 = arith.cmpi ult, %c4_i32, %5 : i32
    cf.cond_br %6, ^bb4, ^bb5
  ^bb2(%7: i32):  // pred: ^bb3
    return %7 : i32
  ^bb3(%8: i32):  // pred: ^bb8
    cf.br ^bb2(%8 : i32)
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %9 = llvm.getelementptr %4[%c4_i32] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.load %10 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %12 = arith.cmpi eq, %11, %c0_i32 : i32
    cf.cond_br %12, ^bb7, ^bb6
  ^bb5:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb4
  ^bb6:  // 3 preds: ^bb4, ^bb7, ^bb9
    %13 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %10[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %10[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.load %14 : !llvm.ptr -> i32
    %18 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.load %16 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %20 = arith.cmpi eq, %19, %c0_i32_0 : i32
    %21 = arith.cmpi ne, %1, %17 : i32
    %22 = arith.ori %20, %21 : i1
    cf.cond_br %22, ^bb9, ^bb8
  ^bb7:  // pred: ^bb4
    %c4_i32_1 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_1) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // pred: ^bb6
    %23 = llvm.call %16(%18, %c1_i32) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> i32
    %24 = arith.subi %c10_i32, %23 : i32
    cf.br ^bb3(%24 : i32)
  ^bb9:  // pred: ^bb6
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb6
  }
  func.func public @"as-test-operand"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[24] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c4_i32 = arith.constant 4 : i32
    %6 = arith.cmpi ult, %c4_i32, %5 : i32
    cf.cond_br %6, ^bb4, ^bb5
  ^bb2(%7: i32):  // pred: ^bb3
    return %7 : i32
  ^bb3(%8: i32):  // pred: ^bb8
    cf.br ^bb2(%8 : i32)
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %9 = llvm.getelementptr %4[%c4_i32] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.load %10 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %12 = arith.cmpi eq, %11, %c0_i32 : i32
    cf.cond_br %12, ^bb7, ^bb6
  ^bb5:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb4
  ^bb6:  // 3 preds: ^bb4, ^bb7, ^bb9
    %13 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %10[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %10[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.load %14 : !llvm.ptr -> i32
    %18 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.load %16 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %20 = arith.cmpi eq, %19, %c0_i32_0 : i32
    %21 = arith.cmpi ne, %1, %17 : i32
    %22 = arith.ori %20, %21 : i1
    cf.cond_br %22, ^bb9, ^bb8
  ^bb7:  // pred: ^bb4
    %c4_i32_1 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_1) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // pred: ^bb6
    %23 = llvm.call %16(%18, %c1_i32) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> i32
    %c0_i32_2 = arith.constant 0 : i32
    %24 = arith.cmpi eq, %23, %c0_i32_2 : i32
    %25 = arith.extui %24 : i1 to i32
    cf.br ^bb3(%25 : i32)
  ^bb9:  // pred: ^bb6
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb6
  }
  func.func public @"as-compare-left"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[24] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c4_i32 = arith.constant 4 : i32
    %6 = arith.cmpi ult, %c4_i32, %5 : i32
    cf.cond_br %6, ^bb4, ^bb5
  ^bb2(%7: i32):  // pred: ^bb3
    return %7 : i32
  ^bb3(%8: i32):  // pred: ^bb8
    cf.br ^bb2(%8 : i32)
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %9 = llvm.getelementptr %4[%c4_i32] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.load %10 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %12 = arith.cmpi eq, %11, %c0_i32 : i32
    cf.cond_br %12, ^bb7, ^bb6
  ^bb5:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb4
  ^bb6:  // 3 preds: ^bb4, ^bb7, ^bb9
    %13 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %10[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %10[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.load %14 : !llvm.ptr -> i32
    %18 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.load %16 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %20 = arith.cmpi eq, %19, %c0_i32_0 : i32
    %21 = arith.cmpi ne, %1, %17 : i32
    %22 = arith.ori %20, %21 : i1
    cf.cond_br %22, ^bb9, ^bb8
  ^bb7:  // pred: ^bb4
    %c4_i32_1 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_1) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // pred: ^bb6
    %23 = llvm.call %16(%18, %c1_i32) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> i32
    %c10_i32 = arith.constant 10 : i32
    %24 = arith.cmpi ule, %23, %c10_i32 : i32
    %25 = arith.extui %24 : i1 to i32
    cf.br ^bb3(%25 : i32)
  ^bb9:  // pred: ^bb6
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb6
  }
  func.func public @"as-compare-right"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[24] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c10_i32 = arith.constant 10 : i32
    %c1_i32 = arith.constant 1 : i32
    %c4_i32 = arith.constant 4 : i32
    %6 = arith.cmpi ult, %c4_i32, %5 : i32
    cf.cond_br %6, ^bb4, ^bb5
  ^bb2(%7: i32):  // pred: ^bb3
    return %7 : i32
  ^bb3(%8: i32):  // pred: ^bb8
    cf.br ^bb2(%8 : i32)
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %9 = llvm.getelementptr %4[%c4_i32] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.load %10 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %12 = arith.cmpi eq, %11, %c0_i32 : i32
    cf.cond_br %12, ^bb7, ^bb6
  ^bb5:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb4
  ^bb6:  // 3 preds: ^bb4, ^bb7, ^bb9
    %13 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %10[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %10[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.load %14 : !llvm.ptr -> i32
    %18 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.load %16 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %20 = arith.cmpi eq, %19, %c0_i32_0 : i32
    %21 = arith.cmpi ne, %1, %17 : i32
    %22 = arith.ori %20, %21 : i1
    cf.cond_br %22, ^bb9, ^bb8
  ^bb7:  // pred: ^bb4
    %c4_i32_1 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_1) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // pred: ^bb6
    %23 = llvm.call %16(%18, %c1_i32) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> i32
    %24 = arith.cmpi eq, %c10_i32, %23 : i32
    %25 = arith.extui %24 : i1 to i32
    %c-1_i32 = arith.constant -1 : i32
    %26 = arith.xori %25, %c-1_i32 : i32
    cf.br ^bb3(%26 : i32)
  ^bb9:  // pred: ^bb6
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb6
  }
  func.func public @"as-convert-operand"(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[24] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c4_i32 = arith.constant 4 : i32
    %6 = arith.cmpi ult, %c4_i32, %5 : i32
    cf.cond_br %6, ^bb4, ^bb5
  ^bb2(%7: i64):  // pred: ^bb3
    return %7 : i64
  ^bb3(%8: i64):  // pred: ^bb8
    cf.br ^bb2(%8 : i64)
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %9 = llvm.getelementptr %4[%c4_i32] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.load %10 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %12 = arith.cmpi eq, %11, %c0_i32 : i32
    cf.cond_br %12, ^bb7, ^bb6
  ^bb5:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb4
  ^bb6:  // 3 preds: ^bb4, ^bb7, ^bb9
    %13 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %10[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %10[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.load %14 : !llvm.ptr -> i32
    %18 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.load %16 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %20 = arith.cmpi eq, %19, %c0_i32_0 : i32
    %21 = arith.cmpi ne, %1, %17 : i32
    %22 = arith.ori %20, %21 : i1
    cf.cond_br %22, ^bb9, ^bb8
  ^bb7:  // pred: ^bb4
    %c4_i32_1 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_1) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // pred: ^bb6
    %23 = llvm.call %16(%18, %c1_i32) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> i32
    %24 = arith.extsi %23 : i32 to i64
    cf.br ^bb3(%24 : i64)
  ^bb9:  // pred: ^bb6
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb6
  }
  func.func private @dora_fn_wasm_table_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_copy(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_fill(!llvm.ptr, i32, i32, !llvm.ptr, i32)
  func.func private @dora_fn_wasm_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_table_set(!llvm.ptr, i32, i32, !llvm.ptr)
  func.func private @dora_fn_wasm_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_imported_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_func_ref(!llvm.ptr, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_data_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_elem_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_raise_trap(i32)
}
