---
source: crates/dora-compiler/src/wasm/tests/conversion.rs
expression: op
snapshot_kind: text
---
module {
  func.func @"const-i32"(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c306_i32 = arith.constant 306 : i32
    cf.br ^bb2(%c306_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func @"const-i64"(%arg0: !llvm.ptr) -> i64 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c356_i64 = arith.constant 356 : i64
    cf.br ^bb2(%c356_i64 : i64)
  ^bb2(%0: i64):  // pred: ^bb1
    return %0 : i64
  }
  func.func @"const-f32"(%arg0: !llvm.ptr) -> f32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1165172736_i32 = arith.constant 1165172736 : i32
    %0 = arith.bitcast %c1165172736_i32 : i32 to f32
    cf.br ^bb2(%0 : f32)
  ^bb2(%1: f32):  // pred: ^bb1
    return %1 : f32
  }
  func.func @"const-f64"(%arg0: !llvm.ptr) -> f64 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c4660882566700597248_i64 = arith.constant 4660882566700597248 : i64
    %0 = arith.bitcast %c4660882566700597248_i64 : i64 to f64
    cf.br ^bb2(%0 : f64)
  ^bb2(%1: f64):  // pred: ^bb1
    return %1 : f64
  }
  func.func @"const-f64-i32"(%arg0: !llvm.ptr) -> (f64, i32) {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c4660882566700597248_i64 = arith.constant 4660882566700597248 : i64
    %0 = arith.bitcast %c4660882566700597248_i64 : i64 to f64
    %c32_i32 = arith.constant 32 : i32
    cf.br ^bb2(%0, %c32_i32 : f64, i32)
  ^bb2(%1: f64, %2: i32):  // pred: ^bb1
    return %1, %2 : f64, i32
  }
  func.func @"id-i32"(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%1 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func @"id-i64"(%arg0: !llvm.ptr, %arg1: i64) -> i64 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i64
    cf.br ^bb2(%1 : i64)
  ^bb2(%2: i64):  // pred: ^bb1
    return %2 : i64
  }
  func.func @"id-f32"(%arg0: !llvm.ptr, %arg1: f32) -> f32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : f32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> f32
    cf.br ^bb2(%1 : f32)
  ^bb2(%2: f32):  // pred: ^bb1
    return %2 : f32
  }
  func.func @"id-f64"(%arg0: !llvm.ptr, %arg1: f64) -> f64 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f64 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : f64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> f64
    cf.br ^bb2(%1 : f64)
  ^bb2(%2: f64):  // pred: ^bb1
    return %2 : f64
  }
  func.func @"id-i32-f64"(%arg0: !llvm.ptr, %arg1: i32, %arg2: f64) -> (i32, f64) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x f64 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : f64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = llvm.load %1 : !llvm.ptr -> f64
    cf.br ^bb2(%2, %3 : i32, f64)
  ^bb2(%4: i32, %5: f64):  // pred: ^bb1
    return %4, %5 : i32, f64
  }
  func.func @"swap-i32-i64"(%arg0: !llvm.ptr, %arg1: i32, %arg2: i64) -> (i64, i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i64 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %1 : !llvm.ptr -> i64
    %3 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%2, %3 : i64, i32)
  ^bb2(%4: i64, %5: i32):  // pred: ^bb1
    return %4, %5 : i64, i32
  }
  func.func @"i32-i64"(%arg0: !llvm.ptr, %arg1: i32, %arg2: i64) -> i64 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i64 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %1 : !llvm.ptr -> i64
    cf.br ^bb2(%2 : i64)
  ^bb2(%3: i64):  // pred: ^bb1
    return %3 : i64
  }
  func.func @"i64-f64"(%arg0: !llvm.ptr, %arg1: i64, %arg2: f64) -> f64 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x f64 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : f64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %1 : !llvm.ptr -> f64
    cf.br ^bb2(%2 : f64)
  ^bb2(%3: f64):  // pred: ^bb1
    return %3 : f64
  }
  func.func @"f32-i32"(%arg0: !llvm.ptr, %arg1: f32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : f32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %1 : !llvm.ptr -> i32
    cf.br ^bb2(%2 : i32)
  ^bb2(%3: i32):  // pred: ^bb1
    return %3 : i32
  }
  func.func @"f64-f32"(%arg0: !llvm.ptr, %arg1: f64, %arg2: f32) -> f32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f64 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : f64, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x f32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : f32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %1 : !llvm.ptr -> f32
    cf.br ^bb2(%2 : f32)
  ^bb2(%3: f32):  // pred: ^bb1
    return %3 : f32
  }
  func.func @"over-i32-duplicate"(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%1 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func @"over-i64-duplicate"(%arg0: !llvm.ptr, %arg1: i64) -> i64 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i64
    cf.br ^bb2(%1 : i64)
  ^bb2(%2: i64):  // pred: ^bb1
    return %2 : i64
  }
  func.func @"over-f32-duplicate"(%arg0: !llvm.ptr, %arg1: f32) -> f32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : f32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> f32
    cf.br ^bb2(%1 : f32)
  ^bb2(%2: f32):  // pred: ^bb1
    return %2 : f32
  }
  func.func @"over-f64-duplicate"(%arg0: !llvm.ptr, %arg1: f64) -> f64 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f64 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : f64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> f64
    cf.br ^bb2(%1 : f64)
  ^bb2(%2: f64):  // pred: ^bb1
    return %2 : f64
  }
  func.func @f19(%arg0: !llvm.ptr) {
    %0 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i64
    %6 = arith.trunci %5 : i64 to i32
    %7 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> i32
    %9 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.load %3 : !llvm.ptr -> i64
    %11 = arith.trunci %10 : i64 to i32
    %12 = llvm.getelementptr %arg0[84] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> i32
    %14 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %15 = llvm.load %3 : !llvm.ptr -> i64
    %16 = arith.trunci %15 : i64 to i32
    %17 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.load %3 : !llvm.ptr -> i64
    %19 = arith.trunci %18 : i64 to i32
    %20 = llvm.getelementptr %arg0[4] : (!llvm.ptr) -> !llvm.ptr, i8
    %21 = llvm.load %20 : !llvm.ptr -> i32
    %22 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %23 = llvm.load %3 : !llvm.ptr -> i64
    %24 = arith.trunci %23 : i64 to i32
    %25 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %26 = llvm.load %3 : !llvm.ptr -> i64
    %27 = arith.trunci %26 : i64 to i32
    %28 = llvm.getelementptr %arg0[88] : (!llvm.ptr) -> !llvm.ptr, i8
    %29 = llvm.load %28 : !llvm.ptr -> i32
    %30 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %31 = llvm.load %3 : !llvm.ptr -> i64
    %32 = arith.trunci %31 : i64 to i32
    %33 = llvm.getelementptr %arg0[92] : (!llvm.ptr) -> !llvm.ptr, i8
    %34 = llvm.load %33 : !llvm.ptr -> i32
    %35 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %36 = llvm.load %3 : !llvm.ptr -> i64
    %37 = arith.trunci %36 : i64 to i32
    %38 = llvm.getelementptr %arg0[28] : (!llvm.ptr) -> !llvm.ptr, i8
    %39 = llvm.load %38 : !llvm.ptr -> i32
    %40 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %41 = llvm.load %3 : !llvm.ptr -> i64
    %42 = arith.trunci %41 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %43 = arith.cmpi ult, %c0_i32, %6 : i32
    cf.cond_br %43, ^bb3, ^bb4
  ^bb2:  // pred: ^bb73
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %44 = llvm.getelementptr inbounds %4[%c0_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %45 = llvm.load %44 : !llvm.ptr -> !llvm.ptr
    %46 = llvm.ptrtoint %45 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %47 = arith.cmpi eq, %46, %c0_i64 : i64
    cf.cond_br %47, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %48 = llvm.getelementptr %45[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %49 = llvm.getelementptr %45[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %50 = llvm.getelementptr %45[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %51 = llvm.load %48 : !llvm.ptr -> !llvm.ptr
    %52 = llvm.load %50 : !llvm.ptr -> !llvm.ptr
    %53 = llvm.ptrtoint %51 : !llvm.ptr to i64
    %c0_i64_0 = arith.constant 0 : i64
    %54 = arith.cmpi eq, %53, %c0_i64_0 : i64
    cf.cond_br %54, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %55 = llvm.load %49 : !llvm.ptr -> i32
    %56 = arith.cmpi ne, %1, %55 : i32
    cf.cond_br %56, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_1 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_1) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %57 = llvm.call %51(%52) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr) -> !llvm.void
    %c0_i64_2 = arith.constant 0 : i64
    %c0_i32_3 = arith.constant 0 : i32
    %58 = arith.cmpi ult, %c0_i32_3, %11 : i32
    cf.cond_br %58, ^bb11, ^bb12
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %59 = llvm.getelementptr inbounds %9[%c0_i32_3] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %60 = llvm.load %59 : !llvm.ptr -> !llvm.ptr
    %61 = llvm.ptrtoint %60 : !llvm.ptr to i64
    %c0_i64_4 = arith.constant 0 : i64
    %62 = arith.cmpi eq, %61, %c0_i64_4 : i64
    cf.cond_br %62, ^bb14, ^bb13
  ^bb12:  // pred: ^bb9
    %c3_i32_5 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_5) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %63 = llvm.getelementptr %60[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %64 = llvm.getelementptr %60[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %65 = llvm.getelementptr %60[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %66 = llvm.load %63 : !llvm.ptr -> !llvm.ptr
    %67 = llvm.load %65 : !llvm.ptr -> !llvm.ptr
    %68 = llvm.ptrtoint %66 : !llvm.ptr to i64
    %c0_i64_6 = arith.constant 0 : i64
    %69 = arith.cmpi eq, %68, %c0_i64_6 : i64
    cf.cond_br %69, ^bb16, ^bb15
  ^bb14:  // pred: ^bb11
    %c4_i32_7 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_7) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // 2 preds: ^bb13, ^bb16
    %70 = llvm.load %64 : !llvm.ptr -> i32
    %71 = arith.cmpi ne, %8, %70 : i32
    cf.cond_br %71, ^bb18, ^bb17
  ^bb16:  // pred: ^bb13
    %c3_i32_8 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_8) : (i32) -> ()
    cf.br ^bb15
  ^bb17:  // 2 preds: ^bb15, ^bb18
    %72 = llvm.call %66(%67, %c0_i64_2) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i64) -> !llvm.void
    %c0_i64_9 = arith.constant 0 : i64
    %c0_i64_10 = arith.constant 0 : i64
    %73 = arith.bitcast %c0_i64_10 : i64 to f64
    %c0_i32_11 = arith.constant 0 : i32
    %c0_i64_12 = arith.constant 0 : i64
    %c0_i32_13 = arith.constant 0 : i32
    %74 = arith.cmpi ult, %c0_i32_13, %16 : i32
    cf.cond_br %74, ^bb19, ^bb20
  ^bb18:  // pred: ^bb15
    %c5_i32_14 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_14) : (i32) -> ()
    cf.br ^bb17
  ^bb19:  // 2 preds: ^bb17, ^bb20
    %75 = llvm.getelementptr inbounds %14[%c0_i32_13] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %76 = llvm.load %75 : !llvm.ptr -> !llvm.ptr
    %77 = llvm.ptrtoint %76 : !llvm.ptr to i64
    %c0_i64_15 = arith.constant 0 : i64
    %78 = arith.cmpi eq, %77, %c0_i64_15 : i64
    cf.cond_br %78, ^bb22, ^bb21
  ^bb20:  // pred: ^bb17
    %c3_i32_16 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_16) : (i32) -> ()
    cf.br ^bb19
  ^bb21:  // 2 preds: ^bb19, ^bb22
    %79 = llvm.getelementptr %76[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %80 = llvm.getelementptr %76[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %81 = llvm.getelementptr %76[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %82 = llvm.load %79 : !llvm.ptr -> !llvm.ptr
    %83 = llvm.load %81 : !llvm.ptr -> !llvm.ptr
    %84 = llvm.ptrtoint %82 : !llvm.ptr to i64
    %c0_i64_17 = arith.constant 0 : i64
    %85 = arith.cmpi eq, %84, %c0_i64_17 : i64
    cf.cond_br %85, ^bb24, ^bb23
  ^bb22:  // pred: ^bb19
    %c4_i32_18 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_18) : (i32) -> ()
    cf.br ^bb21
  ^bb23:  // 2 preds: ^bb21, ^bb24
    %86 = llvm.load %80 : !llvm.ptr -> i32
    %87 = arith.cmpi ne, %13, %86 : i32
    cf.cond_br %87, ^bb26, ^bb25
  ^bb24:  // pred: ^bb21
    %c3_i32_19 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_19) : (i32) -> ()
    cf.br ^bb23
  ^bb25:  // 2 preds: ^bb23, ^bb26
    %88 = llvm.call %82(%83, %c0_i64_9, %73, %c0_i32_11, %c0_i64_12) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i64, f64, i32, i64) -> !llvm.void
    %c0_i32_20 = arith.constant 0 : i32
    %89 = arith.cmpi ult, %c0_i32_20, %19 : i32
    cf.cond_br %89, ^bb27, ^bb28
  ^bb26:  // pred: ^bb23
    %c5_i32_21 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_21) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // 2 preds: ^bb25, ^bb28
    %90 = llvm.getelementptr inbounds %17[%c0_i32_20] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %91 = llvm.load %90 : !llvm.ptr -> !llvm.ptr
    %92 = llvm.ptrtoint %91 : !llvm.ptr to i64
    %c0_i64_22 = arith.constant 0 : i64
    %93 = arith.cmpi eq, %92, %c0_i64_22 : i64
    cf.cond_br %93, ^bb30, ^bb29
  ^bb28:  // pred: ^bb25
    %c3_i32_23 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_23) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // 2 preds: ^bb27, ^bb30
    %94 = llvm.getelementptr %91[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %95 = llvm.getelementptr %91[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %96 = llvm.getelementptr %91[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %97 = llvm.load %94 : !llvm.ptr -> !llvm.ptr
    %98 = llvm.load %96 : !llvm.ptr -> !llvm.ptr
    %99 = llvm.ptrtoint %97 : !llvm.ptr to i64
    %c0_i64_24 = arith.constant 0 : i64
    %100 = arith.cmpi eq, %99, %c0_i64_24 : i64
    cf.cond_br %100, ^bb32, ^bb31
  ^bb30:  // pred: ^bb27
    %c4_i32_25 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_25) : (i32) -> ()
    cf.br ^bb29
  ^bb31:  // 2 preds: ^bb29, ^bb32
    %101 = llvm.load %95 : !llvm.ptr -> i32
    %102 = arith.cmpi ne, %1, %101 : i32
    cf.cond_br %102, ^bb34, ^bb33
  ^bb32:  // pred: ^bb29
    %c3_i32_26 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_26) : (i32) -> ()
    cf.br ^bb31
  ^bb33:  // 2 preds: ^bb31, ^bb34
    %103 = llvm.call %97(%98) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr) -> !llvm.void
    %c0_i32_27 = arith.constant 0 : i32
    %104 = arith.cmpi ult, %c0_i32_27, %24 : i32
    cf.cond_br %104, ^bb35, ^bb36
  ^bb34:  // pred: ^bb31
    %c5_i32_28 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_28) : (i32) -> ()
    cf.br ^bb33
  ^bb35:  // 2 preds: ^bb33, ^bb36
    %105 = llvm.getelementptr inbounds %22[%c0_i32_27] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %106 = llvm.load %105 : !llvm.ptr -> !llvm.ptr
    %107 = llvm.ptrtoint %106 : !llvm.ptr to i64
    %c0_i64_29 = arith.constant 0 : i64
    %108 = arith.cmpi eq, %107, %c0_i64_29 : i64
    cf.cond_br %108, ^bb38, ^bb37
  ^bb36:  // pred: ^bb33
    %c3_i32_30 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_30) : (i32) -> ()
    cf.br ^bb35
  ^bb37:  // 2 preds: ^bb35, ^bb38
    %109 = llvm.getelementptr %106[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %110 = llvm.getelementptr %106[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %111 = llvm.getelementptr %106[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %112 = llvm.load %109 : !llvm.ptr -> !llvm.ptr
    %113 = llvm.load %111 : !llvm.ptr -> !llvm.ptr
    %114 = llvm.ptrtoint %112 : !llvm.ptr to i64
    %c0_i64_31 = arith.constant 0 : i64
    %115 = arith.cmpi eq, %114, %c0_i64_31 : i64
    cf.cond_br %115, ^bb40, ^bb39
  ^bb38:  // pred: ^bb35
    %c4_i32_32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_32) : (i32) -> ()
    cf.br ^bb37
  ^bb39:  // 2 preds: ^bb37, ^bb40
    %116 = llvm.load %110 : !llvm.ptr -> i32
    %117 = arith.cmpi ne, %21, %116 : i32
    cf.cond_br %117, ^bb42, ^bb41
  ^bb40:  // pred: ^bb37
    %c3_i32_33 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_33) : (i32) -> ()
    cf.br ^bb39
  ^bb41:  // 2 preds: ^bb39, ^bb42
    %118 = llvm.call %112(%113) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr) -> i32
    %c0_i32_34 = arith.constant 0 : i32
    %119 = arith.cmpi eq, %118, %c0_i32_34 : i32
    %120 = arith.extui %119 : i1 to i32
    %c0_i32_35 = arith.constant 0 : i32
    %121 = arith.cmpi ult, %c0_i32_35, %27 : i32
    cf.cond_br %121, ^bb43, ^bb44
  ^bb42:  // pred: ^bb39
    %c5_i32_36 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_36) : (i32) -> ()
    cf.br ^bb41
  ^bb43:  // 2 preds: ^bb41, ^bb44
    %122 = llvm.getelementptr inbounds %25[%c0_i32_35] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %123 = llvm.load %122 : !llvm.ptr -> !llvm.ptr
    %124 = llvm.ptrtoint %123 : !llvm.ptr to i64
    %c0_i64_37 = arith.constant 0 : i64
    %125 = arith.cmpi eq, %124, %c0_i64_37 : i64
    cf.cond_br %125, ^bb46, ^bb45
  ^bb44:  // pred: ^bb41
    %c3_i32_38 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_38) : (i32) -> ()
    cf.br ^bb43
  ^bb45:  // 2 preds: ^bb43, ^bb46
    %126 = llvm.getelementptr %123[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %127 = llvm.getelementptr %123[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %128 = llvm.getelementptr %123[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %129 = llvm.load %126 : !llvm.ptr -> !llvm.ptr
    %130 = llvm.load %128 : !llvm.ptr -> !llvm.ptr
    %131 = llvm.ptrtoint %129 : !llvm.ptr to i64
    %c0_i64_39 = arith.constant 0 : i64
    %132 = arith.cmpi eq, %131, %c0_i64_39 : i64
    cf.cond_br %132, ^bb48, ^bb47
  ^bb46:  // pred: ^bb43
    %c4_i32_40 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_40) : (i32) -> ()
    cf.br ^bb45
  ^bb47:  // 2 preds: ^bb45, ^bb48
    %133 = llvm.load %127 : !llvm.ptr -> i32
    %134 = arith.cmpi ne, %21, %133 : i32
    cf.cond_br %134, ^bb50, ^bb49
  ^bb48:  // pred: ^bb45
    %c3_i32_41 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_41) : (i32) -> ()
    cf.br ^bb47
  ^bb49:  // 2 preds: ^bb47, ^bb50
    %135 = llvm.call %129(%130) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr) -> i32
    %c0_i32_42 = arith.constant 0 : i32
    %136 = arith.cmpi eq, %135, %c0_i32_42 : i32
    %137 = arith.extui %136 : i1 to i32
    %c0_i64_43 = arith.constant 0 : i64
    %c0_i32_44 = arith.constant 0 : i32
    %138 = arith.cmpi ult, %c0_i32_44, %32 : i32
    cf.cond_br %138, ^bb51, ^bb52
  ^bb50:  // pred: ^bb47
    %c5_i32_45 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_45) : (i32) -> ()
    cf.br ^bb49
  ^bb51:  // 2 preds: ^bb49, ^bb52
    %139 = llvm.getelementptr inbounds %30[%c0_i32_44] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %140 = llvm.load %139 : !llvm.ptr -> !llvm.ptr
    %141 = llvm.ptrtoint %140 : !llvm.ptr to i64
    %c0_i64_46 = arith.constant 0 : i64
    %142 = arith.cmpi eq, %141, %c0_i64_46 : i64
    cf.cond_br %142, ^bb54, ^bb53
  ^bb52:  // pred: ^bb49
    %c3_i32_47 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_47) : (i32) -> ()
    cf.br ^bb51
  ^bb53:  // 2 preds: ^bb51, ^bb54
    %143 = llvm.getelementptr %140[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %144 = llvm.getelementptr %140[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %145 = llvm.getelementptr %140[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %146 = llvm.load %143 : !llvm.ptr -> !llvm.ptr
    %147 = llvm.load %145 : !llvm.ptr -> !llvm.ptr
    %148 = llvm.ptrtoint %146 : !llvm.ptr to i64
    %c0_i64_48 = arith.constant 0 : i64
    %149 = arith.cmpi eq, %148, %c0_i64_48 : i64
    cf.cond_br %149, ^bb56, ^bb55
  ^bb54:  // pred: ^bb51
    %c4_i32_49 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_49) : (i32) -> ()
    cf.br ^bb53
  ^bb55:  // 2 preds: ^bb53, ^bb56
    %150 = llvm.load %144 : !llvm.ptr -> i32
    %151 = arith.cmpi ne, %29, %150 : i32
    cf.cond_br %151, ^bb58, ^bb57
  ^bb56:  // pred: ^bb53
    %c3_i32_50 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_50) : (i32) -> ()
    cf.br ^bb55
  ^bb57:  // 2 preds: ^bb55, ^bb58
    %152 = llvm.call %146(%147, %c0_i64_43) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i64) -> i32
    %c0_i32_51 = arith.constant 0 : i32
    %153 = arith.cmpi eq, %152, %c0_i32_51 : i32
    %154 = arith.extui %153 : i1 to i32
    %c0_i64_52 = arith.constant 0 : i64
    %c0_i64_53 = arith.constant 0 : i64
    %155 = arith.bitcast %c0_i64_53 : i64 to f64
    %c0_i32_54 = arith.constant 0 : i32
    %c0_i64_55 = arith.constant 0 : i64
    %c0_i32_56 = arith.constant 0 : i32
    %156 = arith.cmpi ult, %c0_i32_56, %37 : i32
    cf.cond_br %156, ^bb59, ^bb60
  ^bb58:  // pred: ^bb55
    %c5_i32_57 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_57) : (i32) -> ()
    cf.br ^bb57
  ^bb59:  // 2 preds: ^bb57, ^bb60
    %157 = llvm.getelementptr inbounds %35[%c0_i32_56] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %158 = llvm.load %157 : !llvm.ptr -> !llvm.ptr
    %159 = llvm.ptrtoint %158 : !llvm.ptr to i64
    %c0_i64_58 = arith.constant 0 : i64
    %160 = arith.cmpi eq, %159, %c0_i64_58 : i64
    cf.cond_br %160, ^bb62, ^bb61
  ^bb60:  // pred: ^bb57
    %c3_i32_59 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_59) : (i32) -> ()
    cf.br ^bb59
  ^bb61:  // 2 preds: ^bb59, ^bb62
    %161 = llvm.getelementptr %158[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %162 = llvm.getelementptr %158[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %163 = llvm.getelementptr %158[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %164 = llvm.load %161 : !llvm.ptr -> !llvm.ptr
    %165 = llvm.load %163 : !llvm.ptr -> !llvm.ptr
    %166 = llvm.ptrtoint %164 : !llvm.ptr to i64
    %c0_i64_60 = arith.constant 0 : i64
    %167 = arith.cmpi eq, %166, %c0_i64_60 : i64
    cf.cond_br %167, ^bb64, ^bb63
  ^bb62:  // pred: ^bb59
    %c4_i32_61 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_61) : (i32) -> ()
    cf.br ^bb61
  ^bb63:  // 2 preds: ^bb61, ^bb64
    %168 = llvm.load %162 : !llvm.ptr -> i32
    %169 = arith.cmpi ne, %34, %168 : i32
    cf.cond_br %169, ^bb66, ^bb65
  ^bb64:  // pred: ^bb61
    %c3_i32_62 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_62) : (i32) -> ()
    cf.br ^bb63
  ^bb65:  // 2 preds: ^bb63, ^bb66
    %170 = llvm.call %164(%165, %c0_i64_52, %155, %c0_i32_54, %c0_i64_55) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i64, f64, i32, i64) -> i32
    %c0_i32_63 = arith.constant 0 : i32
    %171 = arith.cmpi eq, %170, %c0_i32_63 : i32
    %172 = arith.extui %171 : i1 to i32
    %c0_i64_64 = arith.constant 0 : i64
    %c0_i32_65 = arith.constant 0 : i32
    %173 = arith.cmpi ult, %c0_i32_65, %42 : i32
    cf.cond_br %173, ^bb67, ^bb68
  ^bb66:  // pred: ^bb63
    %c5_i32_66 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_66) : (i32) -> ()
    cf.br ^bb65
  ^bb67:  // 2 preds: ^bb65, ^bb68
    %174 = llvm.getelementptr inbounds %40[%c0_i32_65] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %175 = llvm.load %174 : !llvm.ptr -> !llvm.ptr
    %176 = llvm.ptrtoint %175 : !llvm.ptr to i64
    %c0_i64_67 = arith.constant 0 : i64
    %177 = arith.cmpi eq, %176, %c0_i64_67 : i64
    cf.cond_br %177, ^bb70, ^bb69
  ^bb68:  // pred: ^bb65
    %c3_i32_68 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_68) : (i32) -> ()
    cf.br ^bb67
  ^bb69:  // 2 preds: ^bb67, ^bb70
    %178 = llvm.getelementptr %175[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %179 = llvm.getelementptr %175[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %180 = llvm.getelementptr %175[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %181 = llvm.load %178 : !llvm.ptr -> !llvm.ptr
    %182 = llvm.load %180 : !llvm.ptr -> !llvm.ptr
    %183 = llvm.ptrtoint %181 : !llvm.ptr to i64
    %c0_i64_69 = arith.constant 0 : i64
    %184 = arith.cmpi eq, %183, %c0_i64_69 : i64
    cf.cond_br %184, ^bb72, ^bb71
  ^bb70:  // pred: ^bb67
    %c4_i32_70 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_70) : (i32) -> ()
    cf.br ^bb69
  ^bb71:  // 2 preds: ^bb69, ^bb72
    %185 = llvm.load %179 : !llvm.ptr -> i32
    %186 = arith.cmpi ne, %39, %185 : i32
    cf.cond_br %186, ^bb74, ^bb73
  ^bb72:  // pred: ^bb69
    %c3_i32_71 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_71) : (i32) -> ()
    cf.br ^bb71
  ^bb73:  // 2 preds: ^bb71, ^bb74
    %187 = llvm.call %181(%182, %c0_i64_64) vararg(!llvm.func<i64 (...)>) : !llvm.ptr, (!llvm.ptr, i64) -> i64
    %c0_i64_72 = arith.constant 0 : i64
    %188 = arith.cmpi eq, %187, %c0_i64_72 : i64
    %189 = arith.extui %188 : i1 to i32
    cf.br ^bb2
  ^bb74:  // pred: ^bb71
    %c5_i32_73 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_73) : (i32) -> ()
    cf.br ^bb73
  }
  func.func public @"type-i32"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[4] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i64
    %6 = arith.trunci %5 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %7 = arith.cmpi ult, %c0_i32, %6 : i32
    cf.cond_br %7, ^bb3, ^bb4
  ^bb2(%8: i32):  // pred: ^bb9
    return %8 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %9 = llvm.getelementptr inbounds %4[%c0_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.ptrtoint %10 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %12 = arith.cmpi eq, %11, %c0_i64 : i64
    cf.cond_br %12, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %13 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %10[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %10[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.ptrtoint %16 : !llvm.ptr to i64
    %c0_i64_0 = arith.constant 0 : i64
    %19 = arith.cmpi eq, %18, %c0_i64_0 : i64
    cf.cond_br %19, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %20 = llvm.load %14 : !llvm.ptr -> i32
    %21 = arith.cmpi ne, %1, %20 : i32
    cf.cond_br %21, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_1 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_1) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %22 = llvm.call %16(%17) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr) -> i32
    cf.br ^bb2(%22 : i32)
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func public @"type-i64"(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i64
    %6 = arith.trunci %5 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %7 = arith.cmpi ult, %c1_i32, %6 : i32
    cf.cond_br %7, ^bb3, ^bb4
  ^bb2(%8: i64):  // pred: ^bb9
    return %8 : i64
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %9 = llvm.getelementptr inbounds %4[%c1_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.ptrtoint %10 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %12 = arith.cmpi eq, %11, %c0_i64 : i64
    cf.cond_br %12, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %13 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %10[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %10[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.ptrtoint %16 : !llvm.ptr to i64
    %c0_i64_0 = arith.constant 0 : i64
    %19 = arith.cmpi eq, %18, %c0_i64_0 : i64
    cf.cond_br %19, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %20 = llvm.load %14 : !llvm.ptr -> i32
    %21 = arith.cmpi ne, %1, %20 : i32
    cf.cond_br %21, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_1 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_1) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %22 = llvm.call %16(%17) vararg(!llvm.func<i64 (...)>) : !llvm.ptr, (!llvm.ptr) -> i64
    cf.br ^bb2(%22 : i64)
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func public @"type-f32"(%arg0: !llvm.ptr) -> f32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[12] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i64
    %6 = arith.trunci %5 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2_i32 = arith.constant 2 : i32
    %7 = arith.cmpi ult, %c2_i32, %6 : i32
    cf.cond_br %7, ^bb3, ^bb4
  ^bb2(%8: f32):  // pred: ^bb9
    return %8 : f32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %9 = llvm.getelementptr inbounds %4[%c2_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.ptrtoint %10 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %12 = arith.cmpi eq, %11, %c0_i64 : i64
    cf.cond_br %12, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %13 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %10[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %10[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.ptrtoint %16 : !llvm.ptr to i64
    %c0_i64_0 = arith.constant 0 : i64
    %19 = arith.cmpi eq, %18, %c0_i64_0 : i64
    cf.cond_br %19, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %20 = llvm.load %14 : !llvm.ptr -> i32
    %21 = arith.cmpi ne, %1, %20 : i32
    cf.cond_br %21, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_1 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_1) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %22 = llvm.call %16(%17) vararg(!llvm.func<f32 (...)>) : !llvm.ptr, (!llvm.ptr) -> f32
    cf.br ^bb2(%22 : f32)
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func public @"type-f64"(%arg0: !llvm.ptr) -> f64 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i64
    %6 = arith.trunci %5 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i32 = arith.constant 3 : i32
    %7 = arith.cmpi ult, %c3_i32, %6 : i32
    cf.cond_br %7, ^bb3, ^bb4
  ^bb2(%8: f64):  // pred: ^bb9
    return %8 : f64
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %9 = llvm.getelementptr inbounds %4[%c3_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.ptrtoint %10 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %12 = arith.cmpi eq, %11, %c0_i64 : i64
    cf.cond_br %12, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32_0 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_0) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %13 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %10[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %10[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.ptrtoint %16 : !llvm.ptr to i64
    %c0_i64_1 = arith.constant 0 : i64
    %19 = arith.cmpi eq, %18, %c0_i64_1 : i64
    cf.cond_br %19, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %20 = llvm.load %14 : !llvm.ptr -> i32
    %21 = arith.cmpi ne, %1, %20 : i32
    cf.cond_br %21, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_2 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_2) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %22 = llvm.call %16(%17) vararg(!llvm.func<f64 (...)>) : !llvm.ptr, (!llvm.ptr) -> f64
    cf.br ^bb2(%22 : f64)
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func public @"type-index"(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[28] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i64
    %6 = arith.trunci %5 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c100_i64 = arith.constant 100 : i64
    %c5_i32 = arith.constant 5 : i32
    %7 = arith.cmpi ult, %c5_i32, %6 : i32
    cf.cond_br %7, ^bb3, ^bb4
  ^bb2(%8: i64):  // pred: ^bb9
    return %8 : i64
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %9 = llvm.getelementptr inbounds %4[%c5_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.ptrtoint %10 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %12 = arith.cmpi eq, %11, %c0_i64 : i64
    cf.cond_br %12, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %13 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %10[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %10[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.ptrtoint %16 : !llvm.ptr to i64
    %c0_i64_0 = arith.constant 0 : i64
    %19 = arith.cmpi eq, %18, %c0_i64_0 : i64
    cf.cond_br %19, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %20 = llvm.load %14 : !llvm.ptr -> i32
    %21 = arith.cmpi ne, %1, %20 : i32
    cf.cond_br %21, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_1 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_1) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %22 = llvm.call %16(%17, %c100_i64) vararg(!llvm.func<i64 (...)>) : !llvm.ptr, (!llvm.ptr, i64) -> i64
    cf.br ^bb2(%22 : i64)
  ^bb10:  // pred: ^bb7
    %c5_i32_2 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_2) : (i32) -> ()
    cf.br ^bb9
  }
  func.func public @"type-first-i32"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[24] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i64
    %6 = arith.trunci %5 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c32_i32 = arith.constant 32 : i32
    %c4_i32 = arith.constant 4 : i32
    %7 = arith.cmpi ult, %c4_i32, %6 : i32
    cf.cond_br %7, ^bb3, ^bb4
  ^bb2(%8: i32):  // pred: ^bb9
    return %8 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %9 = llvm.getelementptr inbounds %4[%c4_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.ptrtoint %10 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %12 = arith.cmpi eq, %11, %c0_i64 : i64
    cf.cond_br %12, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %13 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %10[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %10[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.ptrtoint %16 : !llvm.ptr to i64
    %c0_i64_0 = arith.constant 0 : i64
    %19 = arith.cmpi eq, %18, %c0_i64_0 : i64
    cf.cond_br %19, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32_1 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_1) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %20 = llvm.load %14 : !llvm.ptr -> i32
    %21 = arith.cmpi ne, %1, %20 : i32
    cf.cond_br %21, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_2 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_2) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %22 = llvm.call %16(%17, %c32_i32) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> i32
    cf.br ^bb2(%22 : i32)
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func public @"type-first-i64"(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[28] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i64
    %6 = arith.trunci %5 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c64_i64 = arith.constant 64 : i64
    %c5_i32 = arith.constant 5 : i32
    %7 = arith.cmpi ult, %c5_i32, %6 : i32
    cf.cond_br %7, ^bb3, ^bb4
  ^bb2(%8: i64):  // pred: ^bb9
    return %8 : i64
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %9 = llvm.getelementptr inbounds %4[%c5_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.ptrtoint %10 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %12 = arith.cmpi eq, %11, %c0_i64 : i64
    cf.cond_br %12, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %13 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %10[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %10[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.ptrtoint %16 : !llvm.ptr to i64
    %c0_i64_0 = arith.constant 0 : i64
    %19 = arith.cmpi eq, %18, %c0_i64_0 : i64
    cf.cond_br %19, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %20 = llvm.load %14 : !llvm.ptr -> i32
    %21 = arith.cmpi ne, %1, %20 : i32
    cf.cond_br %21, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_1 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_1) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %22 = llvm.call %16(%17, %c64_i64) vararg(!llvm.func<i64 (...)>) : !llvm.ptr, (!llvm.ptr, i64) -> i64
    cf.br ^bb2(%22 : i64)
  ^bb10:  // pred: ^bb7
    %c5_i32_2 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_2) : (i32) -> ()
    cf.br ^bb9
  }
  func.func public @"type-first-f32"(%arg0: !llvm.ptr) -> f32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i64
    %6 = arith.trunci %5 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1068037571_i32 = arith.constant 1068037571 : i32
    %7 = arith.bitcast %c1068037571_i32 : i32 to f32
    %c6_i32 = arith.constant 6 : i32
    %8 = arith.cmpi ult, %c6_i32, %6 : i32
    cf.cond_br %8, ^bb3, ^bb4
  ^bb2(%9: f32):  // pred: ^bb9
    return %9 : f32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %10 = llvm.getelementptr inbounds %4[%c6_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.ptrtoint %11 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %13 = arith.cmpi eq, %12, %c0_i64 : i64
    cf.cond_br %13, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %14 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %11[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %11[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.ptrtoint %17 : !llvm.ptr to i64
    %c0_i64_0 = arith.constant 0 : i64
    %20 = arith.cmpi eq, %19, %c0_i64_0 : i64
    cf.cond_br %20, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %21 = llvm.load %15 : !llvm.ptr -> i32
    %22 = arith.cmpi ne, %1, %21 : i32
    cf.cond_br %22, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_1 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_1) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %23 = llvm.call %17(%18, %7) vararg(!llvm.func<f32 (...)>) : !llvm.ptr, (!llvm.ptr, f32) -> f32
    cf.br ^bb2(%23 : f32)
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func public @"type-first-f64"(%arg0: !llvm.ptr) -> f64 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[36] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i64
    %6 = arith.trunci %5 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c4610064722561534525_i64 = arith.constant 4610064722561534525 : i64
    %7 = arith.bitcast %c4610064722561534525_i64 : i64 to f64
    %c7_i32 = arith.constant 7 : i32
    %8 = arith.cmpi ult, %c7_i32, %6 : i32
    cf.cond_br %8, ^bb3, ^bb4
  ^bb2(%9: f64):  // pred: ^bb9
    return %9 : f64
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %10 = llvm.getelementptr inbounds %4[%c7_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.ptrtoint %11 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %13 = arith.cmpi eq, %12, %c0_i64 : i64
    cf.cond_br %13, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %14 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %11[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %11[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.ptrtoint %17 : !llvm.ptr to i64
    %c0_i64_0 = arith.constant 0 : i64
    %20 = arith.cmpi eq, %19, %c0_i64_0 : i64
    cf.cond_br %20, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %21 = llvm.load %15 : !llvm.ptr -> i32
    %22 = arith.cmpi ne, %1, %21 : i32
    cf.cond_br %22, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_1 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_1) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %23 = llvm.call %17(%18, %7) vararg(!llvm.func<f64 (...)>) : !llvm.ptr, (!llvm.ptr, f64) -> f64
    cf.br ^bb2(%23 : f64)
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func public @"type-second-i32"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[48] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i64
    %6 = arith.trunci %5 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1107322470_i32 = arith.constant 1107322470 : i32
    %7 = arith.bitcast %c1107322470_i32 : i32 to f32
    %c32_i32 = arith.constant 32 : i32
    %c8_i32 = arith.constant 8 : i32
    %8 = arith.cmpi ult, %c8_i32, %6 : i32
    cf.cond_br %8, ^bb3, ^bb4
  ^bb2(%9: i32):  // pred: ^bb9
    return %9 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %10 = llvm.getelementptr inbounds %4[%c8_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.ptrtoint %11 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %13 = arith.cmpi eq, %12, %c0_i64 : i64
    cf.cond_br %13, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %14 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %11[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %11[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.ptrtoint %17 : !llvm.ptr to i64
    %c0_i64_0 = arith.constant 0 : i64
    %20 = arith.cmpi eq, %19, %c0_i64_0 : i64
    cf.cond_br %20, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %21 = llvm.load %15 : !llvm.ptr -> i32
    %22 = arith.cmpi ne, %1, %21 : i32
    cf.cond_br %22, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_1 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_1) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %23 = llvm.call %17(%18, %7, %c32_i32) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, f32, i32) -> i32
    cf.br ^bb2(%23 : i32)
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func public @"type-second-i64"(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[52] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i64
    %6 = arith.trunci %5 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c32_i32 = arith.constant 32 : i32
    %c64_i64 = arith.constant 64 : i64
    %c9_i32 = arith.constant 9 : i32
    %7 = arith.cmpi ult, %c9_i32, %6 : i32
    cf.cond_br %7, ^bb3, ^bb4
  ^bb2(%8: i64):  // pred: ^bb9
    return %8 : i64
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %9 = llvm.getelementptr inbounds %4[%c9_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.ptrtoint %10 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %12 = arith.cmpi eq, %11, %c0_i64 : i64
    cf.cond_br %12, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %13 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %10[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %10[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.ptrtoint %16 : !llvm.ptr to i64
    %c0_i64_0 = arith.constant 0 : i64
    %19 = arith.cmpi eq, %18, %c0_i64_0 : i64
    cf.cond_br %19, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %20 = llvm.load %14 : !llvm.ptr -> i32
    %21 = arith.cmpi ne, %1, %20 : i32
    cf.cond_br %21, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_1 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_1) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %22 = llvm.call %16(%17, %c32_i32, %c64_i64) vararg(!llvm.func<i64 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i64) -> i64
    cf.br ^bb2(%22 : i64)
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func public @"type-second-f32"(%arg0: !llvm.ptr) -> f32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[56] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i64
    %6 = arith.trunci %5 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c4634204016564240384_i64 = arith.constant 4634204016564240384 : i64
    %7 = arith.bitcast %c4634204016564240384_i64 : i64 to f64
    %c1107296256_i32 = arith.constant 1107296256 : i32
    %8 = arith.bitcast %c1107296256_i32 : i32 to f32
    %c10_i32 = arith.constant 10 : i32
    %9 = arith.cmpi ult, %c10_i32, %6 : i32
    cf.cond_br %9, ^bb3, ^bb4
  ^bb2(%10: f32):  // pred: ^bb9
    return %10 : f32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %11 = llvm.getelementptr inbounds %4[%c10_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.ptrtoint %12 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %14 = arith.cmpi eq, %13, %c0_i64 : i64
    cf.cond_br %14, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %15 = llvm.getelementptr %12[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %12[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.getelementptr %12[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %18 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.load %17 : !llvm.ptr -> !llvm.ptr
    %20 = llvm.ptrtoint %18 : !llvm.ptr to i64
    %c0_i64_0 = arith.constant 0 : i64
    %21 = arith.cmpi eq, %20, %c0_i64_0 : i64
    cf.cond_br %21, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %22 = llvm.load %16 : !llvm.ptr -> i32
    %23 = arith.cmpi ne, %1, %22 : i32
    cf.cond_br %23, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_1 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_1) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %24 = llvm.call %18(%19, %7, %8) vararg(!llvm.func<f32 (...)>) : !llvm.ptr, (!llvm.ptr, f64, f32) -> f32
    cf.br ^bb2(%24 : f32)
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func public @"type-second-f64"(%arg0: !llvm.ptr) -> f64 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[60] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i64
    %6 = arith.trunci %5 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c64_i64 = arith.constant 64 : i64
    %c4634211053438658150_i64 = arith.constant 4634211053438658150 : i64
    %7 = arith.bitcast %c4634211053438658150_i64 : i64 to f64
    %c11_i32 = arith.constant 11 : i32
    %8 = arith.cmpi ult, %c11_i32, %6 : i32
    cf.cond_br %8, ^bb3, ^bb4
  ^bb2(%9: f64):  // pred: ^bb9
    return %9 : f64
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %10 = llvm.getelementptr inbounds %4[%c11_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.ptrtoint %11 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %13 = arith.cmpi eq, %12, %c0_i64 : i64
    cf.cond_br %13, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %14 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %11[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %11[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.ptrtoint %17 : !llvm.ptr to i64
    %c0_i64_0 = arith.constant 0 : i64
    %20 = arith.cmpi eq, %19, %c0_i64_0 : i64
    cf.cond_br %20, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %21 = llvm.load %15 : !llvm.ptr -> i32
    %22 = arith.cmpi ne, %1, %21 : i32
    cf.cond_br %22, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_1 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_1) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %23 = llvm.call %17(%18, %c64_i64, %7) vararg(!llvm.func<f64 (...)>) : !llvm.ptr, (!llvm.ptr, i64, f64) -> f64
    cf.br ^bb2(%23 : f64)
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func public @dispatch(%arg0: !llvm.ptr, %arg1: i32, %arg2: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i64 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i64, !llvm.ptr
    %2 = llvm.getelementptr %arg0[28] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> i32
    %4 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.load %5 : !llvm.ptr -> i64
    %8 = arith.trunci %7 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %1 : !llvm.ptr -> i64
    %10 = llvm.load %0 : !llvm.ptr -> i32
    %11 = arith.cmpi ult, %10, %8 : i32
    cf.cond_br %11, ^bb3, ^bb4
  ^bb2(%12: i64):  // pred: ^bb9
    return %12 : i64
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %13 = llvm.getelementptr inbounds %6[%10] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %14 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %15 = llvm.ptrtoint %14 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %16 = arith.cmpi eq, %15, %c0_i64 : i64
    cf.cond_br %16, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %17 = llvm.getelementptr %14[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %18 = llvm.getelementptr %14[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %19 = llvm.getelementptr %14[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %20 = llvm.load %17 : !llvm.ptr -> !llvm.ptr
    %21 = llvm.load %19 : !llvm.ptr -> !llvm.ptr
    %22 = llvm.ptrtoint %20 : !llvm.ptr to i64
    %c0_i64_1 = arith.constant 0 : i64
    %23 = arith.cmpi eq, %22, %c0_i64_1 : i64
    cf.cond_br %23, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %24 = llvm.load %18 : !llvm.ptr -> i32
    %25 = arith.cmpi ne, %3, %24 : i32
    cf.cond_br %25, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_2 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_2) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %26 = llvm.call %20(%21, %9) vararg(!llvm.func<i64 (...)>) : !llvm.ptr, (!llvm.ptr, i64) -> i64
    cf.br ^bb2(%26 : i64)
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func public @"dispatch-structural-i64"(%arg0: !llvm.ptr, %arg1: i32) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[68] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.load %4 : !llvm.ptr -> i64
    %7 = arith.trunci %6 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c9_i64 = arith.constant 9 : i64
    %8 = llvm.load %0 : !llvm.ptr -> i32
    %9 = arith.cmpi ult, %8, %7 : i32
    cf.cond_br %9, ^bb3, ^bb4
  ^bb2(%10: i64):  // pred: ^bb9
    return %10 : i64
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %11 = llvm.getelementptr inbounds %5[%8] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.ptrtoint %12 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %14 = arith.cmpi eq, %13, %c0_i64 : i64
    cf.cond_br %14, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %15 = llvm.getelementptr %12[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %12[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.getelementptr %12[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %18 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.load %17 : !llvm.ptr -> !llvm.ptr
    %20 = llvm.ptrtoint %18 : !llvm.ptr to i64
    %c0_i64_0 = arith.constant 0 : i64
    %21 = arith.cmpi eq, %20, %c0_i64_0 : i64
    cf.cond_br %21, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %22 = llvm.load %16 : !llvm.ptr -> i32
    %23 = arith.cmpi ne, %2, %22 : i32
    cf.cond_br %23, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_1 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_1) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %24 = llvm.call %18(%19, %c9_i64) vararg(!llvm.func<i64 (...)>) : !llvm.ptr, (!llvm.ptr, i64) -> i64
    cf.br ^bb2(%24 : i64)
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func public @"dispatch-structural-i32"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.load %4 : !llvm.ptr -> i64
    %7 = arith.trunci %6 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c9_i32 = arith.constant 9 : i32
    %8 = llvm.load %0 : !llvm.ptr -> i32
    %9 = arith.cmpi ult, %8, %7 : i32
    cf.cond_br %9, ^bb3, ^bb4
  ^bb2(%10: i32):  // pred: ^bb9
    return %10 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %11 = llvm.getelementptr inbounds %5[%8] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.ptrtoint %12 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %14 = arith.cmpi eq, %13, %c0_i64 : i64
    cf.cond_br %14, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %15 = llvm.getelementptr %12[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %12[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.getelementptr %12[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %18 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.load %17 : !llvm.ptr -> !llvm.ptr
    %20 = llvm.ptrtoint %18 : !llvm.ptr to i64
    %c0_i64_0 = arith.constant 0 : i64
    %21 = arith.cmpi eq, %20, %c0_i64_0 : i64
    cf.cond_br %21, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %22 = llvm.load %16 : !llvm.ptr -> i32
    %23 = arith.cmpi ne, %2, %22 : i32
    cf.cond_br %23, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_1 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_1) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %24 = llvm.call %18(%19, %c9_i32) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> i32
    cf.br ^bb2(%24 : i32)
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func public @"dispatch-structural-f32"(%arg0: !llvm.ptr, %arg1: i32) -> f32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.load %4 : !llvm.ptr -> i64
    %7 = arith.trunci %6 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1091567616_i32 = arith.constant 1091567616 : i32
    %8 = arith.bitcast %c1091567616_i32 : i32 to f32
    %9 = llvm.load %0 : !llvm.ptr -> i32
    %10 = arith.cmpi ult, %9, %7 : i32
    cf.cond_br %10, ^bb3, ^bb4
  ^bb2(%11: f32):  // pred: ^bb9
    return %11 : f32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %12 = llvm.getelementptr inbounds %5[%9] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    %14 = llvm.ptrtoint %13 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %15 = arith.cmpi eq, %14, %c0_i64 : i64
    cf.cond_br %15, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %16 = llvm.getelementptr %13[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.getelementptr %13[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %18 = llvm.getelementptr %13[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %19 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %20 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %21 = llvm.ptrtoint %19 : !llvm.ptr to i64
    %c0_i64_0 = arith.constant 0 : i64
    %22 = arith.cmpi eq, %21, %c0_i64_0 : i64
    cf.cond_br %22, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %23 = llvm.load %17 : !llvm.ptr -> i32
    %24 = arith.cmpi ne, %2, %23 : i32
    cf.cond_br %24, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_1 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_1) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %25 = llvm.call %19(%20, %8) vararg(!llvm.func<f32 (...)>) : !llvm.ptr, (!llvm.ptr, f32) -> f32
    cf.br ^bb2(%25 : f32)
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func public @"dispatch-structural-f64"(%arg0: !llvm.ptr, %arg1: i32) -> f64 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[76] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.load %4 : !llvm.ptr -> i64
    %7 = arith.trunci %6 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c4621256167635550208_i64 = arith.constant 4621256167635550208 : i64
    %8 = arith.bitcast %c4621256167635550208_i64 : i64 to f64
    %9 = llvm.load %0 : !llvm.ptr -> i32
    %10 = arith.cmpi ult, %9, %7 : i32
    cf.cond_br %10, ^bb3, ^bb4
  ^bb2(%11: f64):  // pred: ^bb9
    return %11 : f64
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %12 = llvm.getelementptr inbounds %5[%9] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    %14 = llvm.ptrtoint %13 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %15 = arith.cmpi eq, %14, %c0_i64 : i64
    cf.cond_br %15, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %16 = llvm.getelementptr %13[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.getelementptr %13[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %18 = llvm.getelementptr %13[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %19 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %20 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %21 = llvm.ptrtoint %19 : !llvm.ptr to i64
    %c0_i64_0 = arith.constant 0 : i64
    %22 = arith.cmpi eq, %21, %c0_i64_0 : i64
    cf.cond_br %22, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %23 = llvm.load %17 : !llvm.ptr -> i32
    %24 = arith.cmpi ne, %2, %23 : i32
    cf.cond_br %24, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_1 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_1) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %25 = llvm.call %19(%20, %8) vararg(!llvm.func<f64 (...)>) : !llvm.ptr, (!llvm.ptr, f64) -> f64
    cf.br ^bb2(%25 : f64)
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func public @"fac-i64"(%arg0: !llvm.ptr, %arg1: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %1 = llvm.getelementptr %arg0[28] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.load %4 : !llvm.ptr -> i64
    %7 = arith.trunci %6 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %0 : !llvm.ptr -> i64
    %c0_i64 = arith.constant 0 : i64
    %9 = arith.cmpi eq, %8, %c0_i64 : i64
    %10 = arith.extui %9 : i1 to i32
    %c0_i32 = arith.constant 0 : i32
    %11 = arith.cmpi ne, %10, %c0_i32 : i32
    cf.cond_br %11, ^bb3, ^bb4
  ^bb2(%12: i64):  // pred: ^bb5
    return %12 : i64
  ^bb3:  // pred: ^bb1
    %c1_i64 = arith.constant 1 : i64
    cf.br ^bb5(%c1_i64 : i64)
  ^bb4:  // pred: ^bb1
    %13 = llvm.load %0 : !llvm.ptr -> i64
    %14 = llvm.load %0 : !llvm.ptr -> i64
    %c1_i64_0 = arith.constant 1 : i64
    %15 = arith.subi %14, %c1_i64_0 : i64
    %c12_i32 = arith.constant 12 : i32
    %16 = arith.cmpi ult, %c12_i32, %7 : i32
    cf.cond_br %16, ^bb6, ^bb7
  ^bb5(%17: i64):  // 2 preds: ^bb3, ^bb12
    cf.br ^bb2(%17 : i64)
  ^bb6:  // 2 preds: ^bb4, ^bb7
    %18 = llvm.getelementptr inbounds %5[%c12_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %19 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %20 = llvm.ptrtoint %19 : !llvm.ptr to i64
    %c0_i64_1 = arith.constant 0 : i64
    %21 = arith.cmpi eq, %20, %c0_i64_1 : i64
    cf.cond_br %21, ^bb9, ^bb8
  ^bb7:  // pred: ^bb4
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // 2 preds: ^bb6, ^bb9
    %22 = llvm.getelementptr %19[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %23 = llvm.getelementptr %19[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %24 = llvm.getelementptr %19[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %25 = llvm.load %22 : !llvm.ptr -> !llvm.ptr
    %26 = llvm.load %24 : !llvm.ptr -> !llvm.ptr
    %27 = llvm.ptrtoint %25 : !llvm.ptr to i64
    %c0_i64_2 = arith.constant 0 : i64
    %28 = arith.cmpi eq, %27, %c0_i64_2 : i64
    cf.cond_br %28, ^bb11, ^bb10
  ^bb9:  // pred: ^bb6
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // 2 preds: ^bb8, ^bb11
    %29 = llvm.load %23 : !llvm.ptr -> i32
    %30 = arith.cmpi ne, %2, %29 : i32
    cf.cond_br %30, ^bb13, ^bb12
  ^bb11:  // pred: ^bb8
    %c3_i32_3 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_3) : (i32) -> ()
    cf.br ^bb10
  ^bb12:  // 2 preds: ^bb10, ^bb13
    %31 = llvm.call %25(%26, %15) vararg(!llvm.func<i64 (...)>) : !llvm.ptr, (!llvm.ptr, i64) -> i64
    %32 = arith.muli %13, %31 : i64
    cf.br ^bb5(%32 : i64)
  ^bb13:  // pred: ^bb10
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb12
  }
  func.func public @"fib-i64"(%arg0: !llvm.ptr, %arg1: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %1 = llvm.getelementptr %arg0[28] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.load %4 : !llvm.ptr -> i64
    %7 = arith.trunci %6 : i64 to i32
    %8 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.load %4 : !llvm.ptr -> i64
    %10 = arith.trunci %9 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %11 = llvm.load %0 : !llvm.ptr -> i64
    %c1_i64 = arith.constant 1 : i64
    %12 = arith.cmpi ule, %11, %c1_i64 : i64
    %13 = arith.extui %12 : i1 to i64
    %14 = arith.trunci %13 : i64 to i32
    %c0_i32 = arith.constant 0 : i32
    %15 = arith.cmpi ne, %14, %c0_i32 : i32
    cf.cond_br %15, ^bb3, ^bb4
  ^bb2(%16: i64):  // pred: ^bb5
    return %16 : i64
  ^bb3:  // pred: ^bb1
    %c1_i64_0 = arith.constant 1 : i64
    cf.br ^bb5(%c1_i64_0 : i64)
  ^bb4:  // pred: ^bb1
    %17 = llvm.load %0 : !llvm.ptr -> i64
    %c2_i64 = arith.constant 2 : i64
    %18 = arith.subi %17, %c2_i64 : i64
    %c13_i32 = arith.constant 13 : i32
    %19 = arith.cmpi ult, %c13_i32, %7 : i32
    cf.cond_br %19, ^bb6, ^bb7
  ^bb5(%20: i64):  // 2 preds: ^bb3, ^bb20
    cf.br ^bb2(%20 : i64)
  ^bb6:  // 2 preds: ^bb4, ^bb7
    %21 = llvm.getelementptr inbounds %5[%c13_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %22 = llvm.load %21 : !llvm.ptr -> !llvm.ptr
    %23 = llvm.ptrtoint %22 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %24 = arith.cmpi eq, %23, %c0_i64 : i64
    cf.cond_br %24, ^bb9, ^bb8
  ^bb7:  // pred: ^bb4
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // 2 preds: ^bb6, ^bb9
    %25 = llvm.getelementptr %22[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %26 = llvm.getelementptr %22[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %27 = llvm.getelementptr %22[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %28 = llvm.load %25 : !llvm.ptr -> !llvm.ptr
    %29 = llvm.load %27 : !llvm.ptr -> !llvm.ptr
    %30 = llvm.ptrtoint %28 : !llvm.ptr to i64
    %c0_i64_1 = arith.constant 0 : i64
    %31 = arith.cmpi eq, %30, %c0_i64_1 : i64
    cf.cond_br %31, ^bb11, ^bb10
  ^bb9:  // pred: ^bb6
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // 2 preds: ^bb8, ^bb11
    %32 = llvm.load %26 : !llvm.ptr -> i32
    %33 = arith.cmpi ne, %2, %32 : i32
    cf.cond_br %33, ^bb13, ^bb12
  ^bb11:  // pred: ^bb8
    %c3_i32_2 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_2) : (i32) -> ()
    cf.br ^bb10
  ^bb12:  // 2 preds: ^bb10, ^bb13
    %34 = llvm.call %28(%29, %18) vararg(!llvm.func<i64 (...)>) : !llvm.ptr, (!llvm.ptr, i64) -> i64
    %35 = llvm.load %0 : !llvm.ptr -> i64
    %c1_i64_3 = arith.constant 1 : i64
    %36 = arith.subi %35, %c1_i64_3 : i64
    %c13_i32_4 = arith.constant 13 : i32
    %37 = arith.cmpi ult, %c13_i32_4, %10 : i32
    cf.cond_br %37, ^bb14, ^bb15
  ^bb13:  // pred: ^bb10
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb12
  ^bb14:  // 2 preds: ^bb12, ^bb15
    %38 = llvm.getelementptr inbounds %8[%c13_i32_4] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %39 = llvm.load %38 : !llvm.ptr -> !llvm.ptr
    %40 = llvm.ptrtoint %39 : !llvm.ptr to i64
    %c0_i64_5 = arith.constant 0 : i64
    %41 = arith.cmpi eq, %40, %c0_i64_5 : i64
    cf.cond_br %41, ^bb17, ^bb16
  ^bb15:  // pred: ^bb12
    %c3_i32_6 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_6) : (i32) -> ()
    cf.br ^bb14
  ^bb16:  // 2 preds: ^bb14, ^bb17
    %42 = llvm.getelementptr %39[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %43 = llvm.getelementptr %39[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %44 = llvm.getelementptr %39[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %45 = llvm.load %42 : !llvm.ptr -> !llvm.ptr
    %46 = llvm.load %44 : !llvm.ptr -> !llvm.ptr
    %47 = llvm.ptrtoint %45 : !llvm.ptr to i64
    %c0_i64_7 = arith.constant 0 : i64
    %48 = arith.cmpi eq, %47, %c0_i64_7 : i64
    cf.cond_br %48, ^bb19, ^bb18
  ^bb17:  // pred: ^bb14
    %c4_i32_8 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_8) : (i32) -> ()
    cf.br ^bb16
  ^bb18:  // 2 preds: ^bb16, ^bb19
    %49 = llvm.load %43 : !llvm.ptr -> i32
    %50 = arith.cmpi ne, %2, %49 : i32
    cf.cond_br %50, ^bb21, ^bb20
  ^bb19:  // pred: ^bb16
    %c3_i32_9 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_9) : (i32) -> ()
    cf.br ^bb18
  ^bb20:  // 2 preds: ^bb18, ^bb21
    %51 = llvm.call %45(%46, %36) vararg(!llvm.func<i64 (...)>) : !llvm.ptr, (!llvm.ptr, i64) -> i64
    %52 = arith.addi %34, %51 : i64
    cf.br ^bb5(%52 : i64)
  ^bb21:  // pred: ^bb18
    %c5_i32_10 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_10) : (i32) -> ()
    cf.br ^bb20
  }
  func.func public @"fac-i32"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[24] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.load %4 : !llvm.ptr -> i64
    %7 = arith.trunci %6 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %9 = arith.cmpi eq, %8, %c0_i32 : i32
    %10 = arith.extui %9 : i1 to i32
    %c0_i32_0 = arith.constant 0 : i32
    %11 = arith.cmpi ne, %10, %c0_i32_0 : i32
    cf.cond_br %11, ^bb3, ^bb4
  ^bb2(%12: i32):  // pred: ^bb5
    return %12 : i32
  ^bb3:  // pred: ^bb1
    %c1_i32_1 = arith.constant 1 : i32
    cf.br ^bb5(%c1_i32_1 : i32)
  ^bb4:  // pred: ^bb1
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %14 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_2 = arith.constant 1 : i32
    %15 = arith.subi %14, %c1_i32_2 : i32
    %c23_i32 = arith.constant 23 : i32
    %16 = arith.cmpi ult, %c23_i32, %7 : i32
    cf.cond_br %16, ^bb6, ^bb7
  ^bb5(%17: i32):  // 2 preds: ^bb3, ^bb12
    cf.br ^bb2(%17 : i32)
  ^bb6:  // 2 preds: ^bb4, ^bb7
    %18 = llvm.getelementptr inbounds %5[%c23_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %19 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %20 = llvm.ptrtoint %19 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %21 = arith.cmpi eq, %20, %c0_i64 : i64
    cf.cond_br %21, ^bb9, ^bb8
  ^bb7:  // pred: ^bb4
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // 2 preds: ^bb6, ^bb9
    %22 = llvm.getelementptr %19[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %23 = llvm.getelementptr %19[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %24 = llvm.getelementptr %19[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %25 = llvm.load %22 : !llvm.ptr -> !llvm.ptr
    %26 = llvm.load %24 : !llvm.ptr -> !llvm.ptr
    %27 = llvm.ptrtoint %25 : !llvm.ptr to i64
    %c0_i64_3 = arith.constant 0 : i64
    %28 = arith.cmpi eq, %27, %c0_i64_3 : i64
    cf.cond_br %28, ^bb11, ^bb10
  ^bb9:  // pred: ^bb6
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // 2 preds: ^bb8, ^bb11
    %29 = llvm.load %23 : !llvm.ptr -> i32
    %30 = arith.cmpi ne, %2, %29 : i32
    cf.cond_br %30, ^bb13, ^bb12
  ^bb11:  // pred: ^bb8
    %c3_i32_4 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_4) : (i32) -> ()
    cf.br ^bb10
  ^bb12:  // 2 preds: ^bb10, ^bb13
    %31 = llvm.call %25(%26, %15) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> i32
    %32 = arith.muli %13, %31 : i32
    cf.br ^bb5(%32 : i32)
  ^bb13:  // pred: ^bb10
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb12
  }
  func.func public @"fac-f32"(%arg0: !llvm.ptr, %arg1: f32) -> f32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : f32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.load %4 : !llvm.ptr -> i64
    %7 = arith.trunci %6 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %0 : !llvm.ptr -> f32
    %c0_i32 = arith.constant 0 : i32
    %9 = arith.bitcast %c0_i32 : i32 to f32
    %10 = arith.cmpf oeq, %8, %9 : f32
    %11 = arith.extui %10 : i1 to i32
    %c0_i32_0 = arith.constant 0 : i32
    %12 = arith.cmpi ne, %11, %c0_i32_0 : i32
    cf.cond_br %12, ^bb3, ^bb4
  ^bb2(%13: f32):  // pred: ^bb5
    return %13 : f32
  ^bb3:  // pred: ^bb1
    %c1065353216_i32 = arith.constant 1065353216 : i32
    %14 = arith.bitcast %c1065353216_i32 : i32 to f32
    cf.br ^bb5(%14 : f32)
  ^bb4:  // pred: ^bb1
    %15 = llvm.load %0 : !llvm.ptr -> f32
    %16 = llvm.load %0 : !llvm.ptr -> f32
    %c1065353216_i32_1 = arith.constant 1065353216 : i32
    %17 = arith.bitcast %c1065353216_i32_1 : i32 to f32
    %18 = arith.subf %16, %17 : f32
    %c24_i32 = arith.constant 24 : i32
    %19 = arith.cmpi ult, %c24_i32, %7 : i32
    cf.cond_br %19, ^bb6, ^bb7
  ^bb5(%20: f32):  // 2 preds: ^bb3, ^bb12
    cf.br ^bb2(%20 : f32)
  ^bb6:  // 2 preds: ^bb4, ^bb7
    %21 = llvm.getelementptr inbounds %5[%c24_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %22 = llvm.load %21 : !llvm.ptr -> !llvm.ptr
    %23 = llvm.ptrtoint %22 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %24 = arith.cmpi eq, %23, %c0_i64 : i64
    cf.cond_br %24, ^bb9, ^bb8
  ^bb7:  // pred: ^bb4
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // 2 preds: ^bb6, ^bb9
    %25 = llvm.getelementptr %22[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %26 = llvm.getelementptr %22[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %27 = llvm.getelementptr %22[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %28 = llvm.load %25 : !llvm.ptr -> !llvm.ptr
    %29 = llvm.load %27 : !llvm.ptr -> !llvm.ptr
    %30 = llvm.ptrtoint %28 : !llvm.ptr to i64
    %c0_i64_2 = arith.constant 0 : i64
    %31 = arith.cmpi eq, %30, %c0_i64_2 : i64
    cf.cond_br %31, ^bb11, ^bb10
  ^bb9:  // pred: ^bb6
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // 2 preds: ^bb8, ^bb11
    %32 = llvm.load %26 : !llvm.ptr -> i32
    %33 = arith.cmpi ne, %2, %32 : i32
    cf.cond_br %33, ^bb13, ^bb12
  ^bb11:  // pred: ^bb8
    %c3_i32_3 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_3) : (i32) -> ()
    cf.br ^bb10
  ^bb12:  // 2 preds: ^bb10, ^bb13
    %34 = llvm.call %28(%29, %18) vararg(!llvm.func<f32 (...)>) : !llvm.ptr, (!llvm.ptr, f32) -> f32
    %35 = arith.mulf %15, %34 : f32
    cf.br ^bb5(%35 : f32)
  ^bb13:  // pred: ^bb10
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb12
  }
  func.func public @"fac-f64"(%arg0: !llvm.ptr, %arg1: f64) -> f64 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f64 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : f64, !llvm.ptr
    %1 = llvm.getelementptr %arg0[36] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.load %4 : !llvm.ptr -> i64
    %7 = arith.trunci %6 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %0 : !llvm.ptr -> f64
    %c0_i64 = arith.constant 0 : i64
    %9 = arith.bitcast %c0_i64 : i64 to f64
    %10 = arith.cmpf oeq, %8, %9 : f64
    %11 = arith.extui %10 : i1 to i32
    %c0_i32 = arith.constant 0 : i32
    %12 = arith.cmpi ne, %11, %c0_i32 : i32
    cf.cond_br %12, ^bb3, ^bb4
  ^bb2(%13: f64):  // pred: ^bb5
    return %13 : f64
  ^bb3:  // pred: ^bb1
    %c4607182418800017408_i64 = arith.constant 4607182418800017408 : i64
    %14 = arith.bitcast %c4607182418800017408_i64 : i64 to f64
    cf.br ^bb5(%14 : f64)
  ^bb4:  // pred: ^bb1
    %15 = llvm.load %0 : !llvm.ptr -> f64
    %16 = llvm.load %0 : !llvm.ptr -> f64
    %c4607182418800017408_i64_0 = arith.constant 4607182418800017408 : i64
    %17 = arith.bitcast %c4607182418800017408_i64_0 : i64 to f64
    %18 = arith.subf %16, %17 : f64
    %c25_i32 = arith.constant 25 : i32
    %19 = arith.cmpi ult, %c25_i32, %7 : i32
    cf.cond_br %19, ^bb6, ^bb7
  ^bb5(%20: f64):  // 2 preds: ^bb3, ^bb12
    cf.br ^bb2(%20 : f64)
  ^bb6:  // 2 preds: ^bb4, ^bb7
    %21 = llvm.getelementptr inbounds %5[%c25_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %22 = llvm.load %21 : !llvm.ptr -> !llvm.ptr
    %23 = llvm.ptrtoint %22 : !llvm.ptr to i64
    %c0_i64_1 = arith.constant 0 : i64
    %24 = arith.cmpi eq, %23, %c0_i64_1 : i64
    cf.cond_br %24, ^bb9, ^bb8
  ^bb7:  // pred: ^bb4
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // 2 preds: ^bb6, ^bb9
    %25 = llvm.getelementptr %22[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %26 = llvm.getelementptr %22[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %27 = llvm.getelementptr %22[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %28 = llvm.load %25 : !llvm.ptr -> !llvm.ptr
    %29 = llvm.load %27 : !llvm.ptr -> !llvm.ptr
    %30 = llvm.ptrtoint %28 : !llvm.ptr to i64
    %c0_i64_2 = arith.constant 0 : i64
    %31 = arith.cmpi eq, %30, %c0_i64_2 : i64
    cf.cond_br %31, ^bb11, ^bb10
  ^bb9:  // pred: ^bb6
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // 2 preds: ^bb8, ^bb11
    %32 = llvm.load %26 : !llvm.ptr -> i32
    %33 = arith.cmpi ne, %2, %32 : i32
    cf.cond_br %33, ^bb13, ^bb12
  ^bb11:  // pred: ^bb8
    %c3_i32_3 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_3) : (i32) -> ()
    cf.br ^bb10
  ^bb12:  // 2 preds: ^bb10, ^bb13
    %34 = llvm.call %28(%29, %18) vararg(!llvm.func<f64 (...)>) : !llvm.ptr, (!llvm.ptr, f64) -> f64
    %35 = arith.mulf %15, %34 : f64
    cf.br ^bb5(%35 : f64)
  ^bb13:  // pred: ^bb10
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb12
  }
  func.func public @"fib-i32"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[24] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.load %4 : !llvm.ptr -> i64
    %7 = arith.trunci %6 : i64 to i32
    %8 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.load %4 : !llvm.ptr -> i64
    %10 = arith.trunci %9 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_0 = arith.constant 1 : i32
    %12 = arith.cmpi ule, %11, %c1_i32_0 : i32
    %13 = arith.extui %12 : i1 to i32
    %c0_i32 = arith.constant 0 : i32
    %14 = arith.cmpi ne, %13, %c0_i32 : i32
    cf.cond_br %14, ^bb3, ^bb4
  ^bb2(%15: i32):  // pred: ^bb5
    return %15 : i32
  ^bb3:  // pred: ^bb1
    %c1_i32_1 = arith.constant 1 : i32
    cf.br ^bb5(%c1_i32_1 : i32)
  ^bb4:  // pred: ^bb1
    %16 = llvm.load %0 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %17 = arith.subi %16, %c2_i32 : i32
    %c26_i32 = arith.constant 26 : i32
    %18 = arith.cmpi ult, %c26_i32, %7 : i32
    cf.cond_br %18, ^bb6, ^bb7
  ^bb5(%19: i32):  // 2 preds: ^bb3, ^bb20
    cf.br ^bb2(%19 : i32)
  ^bb6:  // 2 preds: ^bb4, ^bb7
    %20 = llvm.getelementptr inbounds %5[%c26_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %21 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %22 = llvm.ptrtoint %21 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %23 = arith.cmpi eq, %22, %c0_i64 : i64
    cf.cond_br %23, ^bb9, ^bb8
  ^bb7:  // pred: ^bb4
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // 2 preds: ^bb6, ^bb9
    %24 = llvm.getelementptr %21[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %25 = llvm.getelementptr %21[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %26 = llvm.getelementptr %21[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %27 = llvm.load %24 : !llvm.ptr -> !llvm.ptr
    %28 = llvm.load %26 : !llvm.ptr -> !llvm.ptr
    %29 = llvm.ptrtoint %27 : !llvm.ptr to i64
    %c0_i64_2 = arith.constant 0 : i64
    %30 = arith.cmpi eq, %29, %c0_i64_2 : i64
    cf.cond_br %30, ^bb11, ^bb10
  ^bb9:  // pred: ^bb6
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // 2 preds: ^bb8, ^bb11
    %31 = llvm.load %25 : !llvm.ptr -> i32
    %32 = arith.cmpi ne, %2, %31 : i32
    cf.cond_br %32, ^bb13, ^bb12
  ^bb11:  // pred: ^bb8
    %c3_i32_3 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_3) : (i32) -> ()
    cf.br ^bb10
  ^bb12:  // 2 preds: ^bb10, ^bb13
    %33 = llvm.call %27(%28, %17) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> i32
    %34 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_4 = arith.constant 1 : i32
    %35 = arith.subi %34, %c1_i32_4 : i32
    %c26_i32_5 = arith.constant 26 : i32
    %36 = arith.cmpi ult, %c26_i32_5, %10 : i32
    cf.cond_br %36, ^bb14, ^bb15
  ^bb13:  // pred: ^bb10
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb12
  ^bb14:  // 2 preds: ^bb12, ^bb15
    %37 = llvm.getelementptr inbounds %8[%c26_i32_5] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %38 = llvm.load %37 : !llvm.ptr -> !llvm.ptr
    %39 = llvm.ptrtoint %38 : !llvm.ptr to i64
    %c0_i64_6 = arith.constant 0 : i64
    %40 = arith.cmpi eq, %39, %c0_i64_6 : i64
    cf.cond_br %40, ^bb17, ^bb16
  ^bb15:  // pred: ^bb12
    %c3_i32_7 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_7) : (i32) -> ()
    cf.br ^bb14
  ^bb16:  // 2 preds: ^bb14, ^bb17
    %41 = llvm.getelementptr %38[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %42 = llvm.getelementptr %38[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %43 = llvm.getelementptr %38[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %44 = llvm.load %41 : !llvm.ptr -> !llvm.ptr
    %45 = llvm.load %43 : !llvm.ptr -> !llvm.ptr
    %46 = llvm.ptrtoint %44 : !llvm.ptr to i64
    %c0_i64_8 = arith.constant 0 : i64
    %47 = arith.cmpi eq, %46, %c0_i64_8 : i64
    cf.cond_br %47, ^bb19, ^bb18
  ^bb17:  // pred: ^bb14
    %c4_i32_9 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_9) : (i32) -> ()
    cf.br ^bb16
  ^bb18:  // 2 preds: ^bb16, ^bb19
    %48 = llvm.load %42 : !llvm.ptr -> i32
    %49 = arith.cmpi ne, %2, %48 : i32
    cf.cond_br %49, ^bb21, ^bb20
  ^bb19:  // pred: ^bb16
    %c3_i32_10 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_10) : (i32) -> ()
    cf.br ^bb18
  ^bb20:  // 2 preds: ^bb18, ^bb21
    %50 = llvm.call %44(%45, %35) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> i32
    %51 = arith.addi %33, %50 : i32
    cf.br ^bb5(%51 : i32)
  ^bb21:  // pred: ^bb18
    %c5_i32_11 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_11) : (i32) -> ()
    cf.br ^bb20
  }
  func.func public @"fib-f32"(%arg0: !llvm.ptr, %arg1: f32) -> f32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : f32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.load %4 : !llvm.ptr -> i64
    %7 = arith.trunci %6 : i64 to i32
    %8 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.load %4 : !llvm.ptr -> i64
    %10 = arith.trunci %9 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %11 = llvm.load %0 : !llvm.ptr -> f32
    %c1065353216_i32 = arith.constant 1065353216 : i32
    %12 = arith.bitcast %c1065353216_i32 : i32 to f32
    %13 = arith.cmpf ole, %11, %12 : f32
    %14 = arith.extui %13 : i1 to i32
    %c0_i32 = arith.constant 0 : i32
    %15 = arith.cmpi ne, %14, %c0_i32 : i32
    cf.cond_br %15, ^bb3, ^bb4
  ^bb2(%16: f32):  // pred: ^bb5
    return %16 : f32
  ^bb3:  // pred: ^bb1
    %c1065353216_i32_0 = arith.constant 1065353216 : i32
    %17 = arith.bitcast %c1065353216_i32_0 : i32 to f32
    cf.br ^bb5(%17 : f32)
  ^bb4:  // pred: ^bb1
    %18 = llvm.load %0 : !llvm.ptr -> f32
    %c1073741824_i32 = arith.constant 1073741824 : i32
    %19 = arith.bitcast %c1073741824_i32 : i32 to f32
    %20 = arith.subf %18, %19 : f32
    %c27_i32 = arith.constant 27 : i32
    %21 = arith.cmpi ult, %c27_i32, %7 : i32
    cf.cond_br %21, ^bb6, ^bb7
  ^bb5(%22: f32):  // 2 preds: ^bb3, ^bb20
    cf.br ^bb2(%22 : f32)
  ^bb6:  // 2 preds: ^bb4, ^bb7
    %23 = llvm.getelementptr inbounds %5[%c27_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %24 = llvm.load %23 : !llvm.ptr -> !llvm.ptr
    %25 = llvm.ptrtoint %24 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %26 = arith.cmpi eq, %25, %c0_i64 : i64
    cf.cond_br %26, ^bb9, ^bb8
  ^bb7:  // pred: ^bb4
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // 2 preds: ^bb6, ^bb9
    %27 = llvm.getelementptr %24[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %28 = llvm.getelementptr %24[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %29 = llvm.getelementptr %24[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %30 = llvm.load %27 : !llvm.ptr -> !llvm.ptr
    %31 = llvm.load %29 : !llvm.ptr -> !llvm.ptr
    %32 = llvm.ptrtoint %30 : !llvm.ptr to i64
    %c0_i64_1 = arith.constant 0 : i64
    %33 = arith.cmpi eq, %32, %c0_i64_1 : i64
    cf.cond_br %33, ^bb11, ^bb10
  ^bb9:  // pred: ^bb6
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // 2 preds: ^bb8, ^bb11
    %34 = llvm.load %28 : !llvm.ptr -> i32
    %35 = arith.cmpi ne, %2, %34 : i32
    cf.cond_br %35, ^bb13, ^bb12
  ^bb11:  // pred: ^bb8
    %c3_i32_2 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_2) : (i32) -> ()
    cf.br ^bb10
  ^bb12:  // 2 preds: ^bb10, ^bb13
    %36 = llvm.call %30(%31, %20) vararg(!llvm.func<f32 (...)>) : !llvm.ptr, (!llvm.ptr, f32) -> f32
    %37 = llvm.load %0 : !llvm.ptr -> f32
    %c1065353216_i32_3 = arith.constant 1065353216 : i32
    %38 = arith.bitcast %c1065353216_i32_3 : i32 to f32
    %39 = arith.subf %37, %38 : f32
    %c27_i32_4 = arith.constant 27 : i32
    %40 = arith.cmpi ult, %c27_i32_4, %10 : i32
    cf.cond_br %40, ^bb14, ^bb15
  ^bb13:  // pred: ^bb10
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb12
  ^bb14:  // 2 preds: ^bb12, ^bb15
    %41 = llvm.getelementptr inbounds %8[%c27_i32_4] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %42 = llvm.load %41 : !llvm.ptr -> !llvm.ptr
    %43 = llvm.ptrtoint %42 : !llvm.ptr to i64
    %c0_i64_5 = arith.constant 0 : i64
    %44 = arith.cmpi eq, %43, %c0_i64_5 : i64
    cf.cond_br %44, ^bb17, ^bb16
  ^bb15:  // pred: ^bb12
    %c3_i32_6 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_6) : (i32) -> ()
    cf.br ^bb14
  ^bb16:  // 2 preds: ^bb14, ^bb17
    %45 = llvm.getelementptr %42[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %46 = llvm.getelementptr %42[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %47 = llvm.getelementptr %42[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %48 = llvm.load %45 : !llvm.ptr -> !llvm.ptr
    %49 = llvm.load %47 : !llvm.ptr -> !llvm.ptr
    %50 = llvm.ptrtoint %48 : !llvm.ptr to i64
    %c0_i64_7 = arith.constant 0 : i64
    %51 = arith.cmpi eq, %50, %c0_i64_7 : i64
    cf.cond_br %51, ^bb19, ^bb18
  ^bb17:  // pred: ^bb14
    %c4_i32_8 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_8) : (i32) -> ()
    cf.br ^bb16
  ^bb18:  // 2 preds: ^bb16, ^bb19
    %52 = llvm.load %46 : !llvm.ptr -> i32
    %53 = arith.cmpi ne, %2, %52 : i32
    cf.cond_br %53, ^bb21, ^bb20
  ^bb19:  // pred: ^bb16
    %c3_i32_9 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_9) : (i32) -> ()
    cf.br ^bb18
  ^bb20:  // 2 preds: ^bb18, ^bb21
    %54 = llvm.call %48(%49, %39) vararg(!llvm.func<f32 (...)>) : !llvm.ptr, (!llvm.ptr, f32) -> f32
    %55 = arith.addf %36, %54 : f32
    cf.br ^bb5(%55 : f32)
  ^bb21:  // pred: ^bb18
    %c5_i32_10 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_10) : (i32) -> ()
    cf.br ^bb20
  }
  func.func public @"fib-f64"(%arg0: !llvm.ptr, %arg1: f64) -> f64 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f64 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : f64, !llvm.ptr
    %1 = llvm.getelementptr %arg0[36] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.load %4 : !llvm.ptr -> i64
    %7 = arith.trunci %6 : i64 to i32
    %8 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.load %4 : !llvm.ptr -> i64
    %10 = arith.trunci %9 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %11 = llvm.load %0 : !llvm.ptr -> f64
    %c4607182418800017408_i64 = arith.constant 4607182418800017408 : i64
    %12 = arith.bitcast %c4607182418800017408_i64 : i64 to f64
    %13 = arith.cmpf ole, %11, %12 : f64
    %14 = arith.extui %13 : i1 to i32
    %c0_i32 = arith.constant 0 : i32
    %15 = arith.cmpi ne, %14, %c0_i32 : i32
    cf.cond_br %15, ^bb3, ^bb4
  ^bb2(%16: f64):  // pred: ^bb5
    return %16 : f64
  ^bb3:  // pred: ^bb1
    %c4607182418800017408_i64_0 = arith.constant 4607182418800017408 : i64
    %17 = arith.bitcast %c4607182418800017408_i64_0 : i64 to f64
    cf.br ^bb5(%17 : f64)
  ^bb4:  // pred: ^bb1
    %18 = llvm.load %0 : !llvm.ptr -> f64
    %c4611686018427387904_i64 = arith.constant 4611686018427387904 : i64
    %19 = arith.bitcast %c4611686018427387904_i64 : i64 to f64
    %20 = arith.subf %18, %19 : f64
    %c28_i32 = arith.constant 28 : i32
    %21 = arith.cmpi ult, %c28_i32, %7 : i32
    cf.cond_br %21, ^bb6, ^bb7
  ^bb5(%22: f64):  // 2 preds: ^bb3, ^bb20
    cf.br ^bb2(%22 : f64)
  ^bb6:  // 2 preds: ^bb4, ^bb7
    %23 = llvm.getelementptr inbounds %5[%c28_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %24 = llvm.load %23 : !llvm.ptr -> !llvm.ptr
    %25 = llvm.ptrtoint %24 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %26 = arith.cmpi eq, %25, %c0_i64 : i64
    cf.cond_br %26, ^bb9, ^bb8
  ^bb7:  // pred: ^bb4
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // 2 preds: ^bb6, ^bb9
    %27 = llvm.getelementptr %24[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %28 = llvm.getelementptr %24[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %29 = llvm.getelementptr %24[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %30 = llvm.load %27 : !llvm.ptr -> !llvm.ptr
    %31 = llvm.load %29 : !llvm.ptr -> !llvm.ptr
    %32 = llvm.ptrtoint %30 : !llvm.ptr to i64
    %c0_i64_1 = arith.constant 0 : i64
    %33 = arith.cmpi eq, %32, %c0_i64_1 : i64
    cf.cond_br %33, ^bb11, ^bb10
  ^bb9:  // pred: ^bb6
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // 2 preds: ^bb8, ^bb11
    %34 = llvm.load %28 : !llvm.ptr -> i32
    %35 = arith.cmpi ne, %2, %34 : i32
    cf.cond_br %35, ^bb13, ^bb12
  ^bb11:  // pred: ^bb8
    %c3_i32_2 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_2) : (i32) -> ()
    cf.br ^bb10
  ^bb12:  // 2 preds: ^bb10, ^bb13
    %36 = llvm.call %30(%31, %20) vararg(!llvm.func<f64 (...)>) : !llvm.ptr, (!llvm.ptr, f64) -> f64
    %37 = llvm.load %0 : !llvm.ptr -> f64
    %c4607182418800017408_i64_3 = arith.constant 4607182418800017408 : i64
    %38 = arith.bitcast %c4607182418800017408_i64_3 : i64 to f64
    %39 = arith.subf %37, %38 : f64
    %c28_i32_4 = arith.constant 28 : i32
    %40 = arith.cmpi ult, %c28_i32_4, %10 : i32
    cf.cond_br %40, ^bb14, ^bb15
  ^bb13:  // pred: ^bb10
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb12
  ^bb14:  // 2 preds: ^bb12, ^bb15
    %41 = llvm.getelementptr inbounds %8[%c28_i32_4] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %42 = llvm.load %41 : !llvm.ptr -> !llvm.ptr
    %43 = llvm.ptrtoint %42 : !llvm.ptr to i64
    %c0_i64_5 = arith.constant 0 : i64
    %44 = arith.cmpi eq, %43, %c0_i64_5 : i64
    cf.cond_br %44, ^bb17, ^bb16
  ^bb15:  // pred: ^bb12
    %c3_i32_6 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_6) : (i32) -> ()
    cf.br ^bb14
  ^bb16:  // 2 preds: ^bb14, ^bb17
    %45 = llvm.getelementptr %42[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %46 = llvm.getelementptr %42[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %47 = llvm.getelementptr %42[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %48 = llvm.load %45 : !llvm.ptr -> !llvm.ptr
    %49 = llvm.load %47 : !llvm.ptr -> !llvm.ptr
    %50 = llvm.ptrtoint %48 : !llvm.ptr to i64
    %c0_i64_7 = arith.constant 0 : i64
    %51 = arith.cmpi eq, %50, %c0_i64_7 : i64
    cf.cond_br %51, ^bb19, ^bb18
  ^bb17:  // pred: ^bb14
    %c4_i32_8 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_8) : (i32) -> ()
    cf.br ^bb16
  ^bb18:  // 2 preds: ^bb16, ^bb19
    %52 = llvm.load %46 : !llvm.ptr -> i32
    %53 = arith.cmpi ne, %2, %52 : i32
    cf.cond_br %53, ^bb21, ^bb20
  ^bb19:  // pred: ^bb16
    %c3_i32_9 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_9) : (i32) -> ()
    cf.br ^bb18
  ^bb20:  // 2 preds: ^bb18, ^bb21
    %54 = llvm.call %48(%49, %39) vararg(!llvm.func<f64 (...)>) : !llvm.ptr, (!llvm.ptr, f64) -> f64
    %55 = arith.addf %36, %54 : f64
    cf.br ^bb5(%55 : f64)
  ^bb21:  // pred: ^bb18
    %c5_i32_10 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_10) : (i32) -> ()
    cf.br ^bb20
  }
  func.func public @even(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[24] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.load %4 : !llvm.ptr -> i64
    %7 = arith.trunci %6 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %9 = arith.cmpi eq, %8, %c0_i32 : i32
    %10 = arith.extui %9 : i1 to i32
    %c0_i32_0 = arith.constant 0 : i32
    %11 = arith.cmpi ne, %10, %c0_i32_0 : i32
    cf.cond_br %11, ^bb3, ^bb4
  ^bb2(%12: i32):  // pred: ^bb5
    return %12 : i32
  ^bb3:  // pred: ^bb1
    %c44_i32 = arith.constant 44 : i32
    cf.br ^bb5(%c44_i32 : i32)
  ^bb4:  // pred: ^bb1
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_1 = arith.constant 1 : i32
    %14 = arith.subi %13, %c1_i32_1 : i32
    %c15_i32 = arith.constant 15 : i32
    %15 = arith.cmpi ult, %c15_i32, %7 : i32
    cf.cond_br %15, ^bb6, ^bb7
  ^bb5(%16: i32):  // 2 preds: ^bb3, ^bb12
    cf.br ^bb2(%16 : i32)
  ^bb6:  // 2 preds: ^bb4, ^bb7
    %17 = llvm.getelementptr inbounds %5[%c15_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %18 = llvm.load %17 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.ptrtoint %18 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %20 = arith.cmpi eq, %19, %c0_i64 : i64
    cf.cond_br %20, ^bb9, ^bb8
  ^bb7:  // pred: ^bb4
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // 2 preds: ^bb6, ^bb9
    %21 = llvm.getelementptr %18[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %22 = llvm.getelementptr %18[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %23 = llvm.getelementptr %18[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %24 = llvm.load %21 : !llvm.ptr -> !llvm.ptr
    %25 = llvm.load %23 : !llvm.ptr -> !llvm.ptr
    %26 = llvm.ptrtoint %24 : !llvm.ptr to i64
    %c0_i64_2 = arith.constant 0 : i64
    %27 = arith.cmpi eq, %26, %c0_i64_2 : i64
    cf.cond_br %27, ^bb11, ^bb10
  ^bb9:  // pred: ^bb6
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // 2 preds: ^bb8, ^bb11
    %28 = llvm.load %22 : !llvm.ptr -> i32
    %29 = arith.cmpi ne, %2, %28 : i32
    cf.cond_br %29, ^bb13, ^bb12
  ^bb11:  // pred: ^bb8
    %c3_i32_3 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_3) : (i32) -> ()
    cf.br ^bb10
  ^bb12:  // 2 preds: ^bb10, ^bb13
    %30 = llvm.call %24(%25, %14) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> i32
    cf.br ^bb5(%30 : i32)
  ^bb13:  // pred: ^bb10
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb12
  }
  func.func public @odd(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[24] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.load %4 : !llvm.ptr -> i64
    %7 = arith.trunci %6 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %9 = arith.cmpi eq, %8, %c0_i32 : i32
    %10 = arith.extui %9 : i1 to i32
    %c0_i32_0 = arith.constant 0 : i32
    %11 = arith.cmpi ne, %10, %c0_i32_0 : i32
    cf.cond_br %11, ^bb3, ^bb4
  ^bb2(%12: i32):  // pred: ^bb5
    return %12 : i32
  ^bb3:  // pred: ^bb1
    %c99_i32 = arith.constant 99 : i32
    cf.br ^bb5(%c99_i32 : i32)
  ^bb4:  // pred: ^bb1
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_1 = arith.constant 1 : i32
    %14 = arith.subi %13, %c1_i32_1 : i32
    %c14_i32 = arith.constant 14 : i32
    %15 = arith.cmpi ult, %c14_i32, %7 : i32
    cf.cond_br %15, ^bb6, ^bb7
  ^bb5(%16: i32):  // 2 preds: ^bb3, ^bb12
    cf.br ^bb2(%16 : i32)
  ^bb6:  // 2 preds: ^bb4, ^bb7
    %17 = llvm.getelementptr inbounds %5[%c14_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %18 = llvm.load %17 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.ptrtoint %18 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %20 = arith.cmpi eq, %19, %c0_i64 : i64
    cf.cond_br %20, ^bb9, ^bb8
  ^bb7:  // pred: ^bb4
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // 2 preds: ^bb6, ^bb9
    %21 = llvm.getelementptr %18[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %22 = llvm.getelementptr %18[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %23 = llvm.getelementptr %18[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %24 = llvm.load %21 : !llvm.ptr -> !llvm.ptr
    %25 = llvm.load %23 : !llvm.ptr -> !llvm.ptr
    %26 = llvm.ptrtoint %24 : !llvm.ptr to i64
    %c0_i64_2 = arith.constant 0 : i64
    %27 = arith.cmpi eq, %26, %c0_i64_2 : i64
    cf.cond_br %27, ^bb11, ^bb10
  ^bb9:  // pred: ^bb6
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // 2 preds: ^bb8, ^bb11
    %28 = llvm.load %22 : !llvm.ptr -> i32
    %29 = arith.cmpi ne, %2, %28 : i32
    cf.cond_br %29, ^bb13, ^bb12
  ^bb11:  // pred: ^bb8
    %c3_i32_3 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_3) : (i32) -> ()
    cf.br ^bb10
  ^bb12:  // 2 preds: ^bb10, ^bb13
    %30 = llvm.call %24(%25, %14) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> i32
    cf.br ^bb5(%30 : i32)
  ^bb13:  // pred: ^bb10
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb12
  }
  func.func public @runaway(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i64
    %6 = arith.trunci %5 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c16_i32 = arith.constant 16 : i32
    %7 = arith.cmpi ult, %c16_i32, %6 : i32
    cf.cond_br %7, ^bb3, ^bb4
  ^bb2:  // pred: ^bb9
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %8 = llvm.getelementptr inbounds %4[%c16_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.ptrtoint %9 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %11 = arith.cmpi eq, %10, %c0_i64 : i64
    cf.cond_br %11, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %12 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.getelementptr %9[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %9[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    %16 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.ptrtoint %15 : !llvm.ptr to i64
    %c0_i64_0 = arith.constant 0 : i64
    %18 = arith.cmpi eq, %17, %c0_i64_0 : i64
    cf.cond_br %18, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %19 = llvm.load %13 : !llvm.ptr -> i32
    %20 = arith.cmpi ne, %1, %19 : i32
    cf.cond_br %20, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_1 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_1) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %21 = llvm.call %15(%16) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr) -> !llvm.void
    cf.br ^bb2
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func public @"mutual-runaway"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i64
    %6 = arith.trunci %5 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c18_i32 = arith.constant 18 : i32
    %7 = arith.cmpi ult, %c18_i32, %6 : i32
    cf.cond_br %7, ^bb3, ^bb4
  ^bb2:  // pred: ^bb9
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %8 = llvm.getelementptr inbounds %4[%c18_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.ptrtoint %9 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %11 = arith.cmpi eq, %10, %c0_i64 : i64
    cf.cond_br %11, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %12 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.getelementptr %9[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %9[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    %16 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.ptrtoint %15 : !llvm.ptr to i64
    %c0_i64_0 = arith.constant 0 : i64
    %18 = arith.cmpi eq, %17, %c0_i64_0 : i64
    cf.cond_br %18, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %19 = llvm.load %13 : !llvm.ptr -> i32
    %20 = arith.cmpi ne, %1, %19 : i32
    cf.cond_br %20, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_1 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_1) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %21 = llvm.call %15(%16) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr) -> !llvm.void
    cf.br ^bb2
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func @"mutual-runaway2"(%arg0: !llvm.ptr) {
    %0 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i64
    %6 = arith.trunci %5 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c17_i32 = arith.constant 17 : i32
    %7 = arith.cmpi ult, %c17_i32, %6 : i32
    cf.cond_br %7, ^bb3, ^bb4
  ^bb2:  // pred: ^bb9
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %8 = llvm.getelementptr inbounds %4[%c17_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.ptrtoint %9 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %11 = arith.cmpi eq, %10, %c0_i64 : i64
    cf.cond_br %11, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %12 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.getelementptr %9[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %9[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    %16 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.ptrtoint %15 : !llvm.ptr to i64
    %c0_i64_0 = arith.constant 0 : i64
    %18 = arith.cmpi eq, %17, %c0_i64_0 : i64
    cf.cond_br %18, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %19 = llvm.load %13 : !llvm.ptr -> i32
    %20 = arith.cmpi ne, %1, %19 : i32
    cf.cond_br %20, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_1 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_1) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %21 = llvm.call %15(%16) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr) -> !llvm.void
    cf.br ^bb2
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func public @"as-select-first"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[4] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i64
    %6 = arith.trunci %5 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %7 = arith.cmpi ult, %c0_i32, %6 : i32
    cf.cond_br %7, ^bb3, ^bb4
  ^bb2(%8: i32):  // pred: ^bb9
    return %8 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %9 = llvm.getelementptr inbounds %4[%c0_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.ptrtoint %10 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %12 = arith.cmpi eq, %11, %c0_i64 : i64
    cf.cond_br %12, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %13 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %10[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %10[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.ptrtoint %16 : !llvm.ptr to i64
    %c0_i64_0 = arith.constant 0 : i64
    %19 = arith.cmpi eq, %18, %c0_i64_0 : i64
    cf.cond_br %19, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %20 = llvm.load %14 : !llvm.ptr -> i32
    %21 = arith.cmpi ne, %1, %20 : i32
    cf.cond_br %21, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_1 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_1) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %22 = llvm.call %16(%17) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr) -> i32
    %c2_i32 = arith.constant 2 : i32
    %c3_i32_2 = arith.constant 3 : i32
    %c0_i32_3 = arith.constant 0 : i32
    %23 = arith.cmpi ne, %c3_i32_2, %c0_i32_3 : i32
    %24 = arith.select %23, %22, %c2_i32 : i32
    cf.br ^bb2(%24 : i32)
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func public @"as-select-mid"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[4] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i64
    %6 = arith.trunci %5 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2_i32 = arith.constant 2 : i32
    %c0_i32 = arith.constant 0 : i32
    %7 = arith.cmpi ult, %c0_i32, %6 : i32
    cf.cond_br %7, ^bb3, ^bb4
  ^bb2(%8: i32):  // pred: ^bb9
    return %8 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %9 = llvm.getelementptr inbounds %4[%c0_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.ptrtoint %10 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %12 = arith.cmpi eq, %11, %c0_i64 : i64
    cf.cond_br %12, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %13 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %10[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %10[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.ptrtoint %16 : !llvm.ptr to i64
    %c0_i64_0 = arith.constant 0 : i64
    %19 = arith.cmpi eq, %18, %c0_i64_0 : i64
    cf.cond_br %19, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %20 = llvm.load %14 : !llvm.ptr -> i32
    %21 = arith.cmpi ne, %1, %20 : i32
    cf.cond_br %21, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_1 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_1) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %22 = llvm.call %16(%17) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr) -> i32
    %c3_i32_2 = arith.constant 3 : i32
    %c0_i32_3 = arith.constant 0 : i32
    %23 = arith.cmpi ne, %c3_i32_2, %c0_i32_3 : i32
    %24 = arith.select %23, %c2_i32, %22 : i32
    cf.br ^bb2(%24 : i32)
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func public @"as-select-last"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[4] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i64
    %6 = arith.trunci %5 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2_i32 = arith.constant 2 : i32
    %c3_i32 = arith.constant 3 : i32
    %c0_i32 = arith.constant 0 : i32
    %7 = arith.cmpi ult, %c0_i32, %6 : i32
    cf.cond_br %7, ^bb3, ^bb4
  ^bb2(%8: i32):  // pred: ^bb9
    return %8 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %9 = llvm.getelementptr inbounds %4[%c0_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.ptrtoint %10 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %12 = arith.cmpi eq, %11, %c0_i64 : i64
    cf.cond_br %12, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32_0 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_0) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %13 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %10[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %10[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.ptrtoint %16 : !llvm.ptr to i64
    %c0_i64_1 = arith.constant 0 : i64
    %19 = arith.cmpi eq, %18, %c0_i64_1 : i64
    cf.cond_br %19, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %20 = llvm.load %14 : !llvm.ptr -> i32
    %21 = arith.cmpi ne, %1, %20 : i32
    cf.cond_br %21, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_2 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_2) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %22 = llvm.call %16(%17) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr) -> i32
    %c0_i32_3 = arith.constant 0 : i32
    %23 = arith.cmpi ne, %22, %c0_i32_3 : i32
    %24 = arith.select %23, %c2_i32, %c3_i32 : i32
    cf.br ^bb2(%24 : i32)
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func public @"as-if-condition"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[4] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i64
    %6 = arith.trunci %5 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %7 = arith.cmpi ult, %c0_i32, %6 : i32
    cf.cond_br %7, ^bb3, ^bb4
  ^bb2(%8: i32):  // pred: ^bb13
    return %8 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %9 = llvm.getelementptr inbounds %4[%c0_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.ptrtoint %10 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %12 = arith.cmpi eq, %11, %c0_i64 : i64
    cf.cond_br %12, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %13 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %10[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %10[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.ptrtoint %16 : !llvm.ptr to i64
    %c0_i64_0 = arith.constant 0 : i64
    %19 = arith.cmpi eq, %18, %c0_i64_0 : i64
    cf.cond_br %19, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %20 = llvm.load %14 : !llvm.ptr -> i32
    %21 = arith.cmpi ne, %1, %20 : i32
    cf.cond_br %21, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_1 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_1) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %22 = llvm.call %16(%17) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr) -> i32
    %c0_i32_2 = arith.constant 0 : i32
    %23 = arith.cmpi ne, %22, %c0_i32_2 : i32
    cf.cond_br %23, ^bb11, ^bb12
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // pred: ^bb9
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb13(%c1_i32 : i32)
  ^bb12:  // pred: ^bb9
    %c2_i32 = arith.constant 2 : i32
    cf.br ^bb13(%c2_i32 : i32)
  ^bb13(%24: i32):  // 2 preds: ^bb11, ^bb12
    cf.br ^bb2(%24 : i32)
  }
  func.func public @"as-br_if-first"(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i64
    %6 = arith.trunci %5 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %7 = arith.cmpi ult, %c1_i32, %6 : i32
    cf.cond_br %7, ^bb4, ^bb5
  ^bb2(%8: i64):  // pred: ^bb3
    return %8 : i64
  ^bb3(%9: i64):  // 2 preds: ^bb10, ^bb12
    cf.br ^bb2(%9 : i64)
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %10 = llvm.getelementptr inbounds %4[%c1_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.ptrtoint %11 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %13 = arith.cmpi eq, %12, %c0_i64 : i64
    cf.cond_br %13, ^bb7, ^bb6
  ^bb5:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb4
  ^bb6:  // 2 preds: ^bb4, ^bb7
    %14 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %11[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %11[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.ptrtoint %17 : !llvm.ptr to i64
    %c0_i64_0 = arith.constant 0 : i64
    %20 = arith.cmpi eq, %19, %c0_i64_0 : i64
    cf.cond_br %20, ^bb9, ^bb8
  ^bb7:  // pred: ^bb4
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // 2 preds: ^bb6, ^bb9
    %21 = llvm.load %15 : !llvm.ptr -> i32
    %22 = arith.cmpi ne, %1, %21 : i32
    cf.cond_br %22, ^bb11, ^bb10
  ^bb9:  // pred: ^bb6
    %c3_i32_1 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_1) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // 2 preds: ^bb8, ^bb11
    %23 = llvm.call %17(%18) vararg(!llvm.func<i64 (...)>) : !llvm.ptr, (!llvm.ptr) -> i64
    %c2_i32 = arith.constant 2 : i32
    %c0_i32 = arith.constant 0 : i32
    %24 = arith.cmpi ne, %c2_i32, %c0_i32 : i32
    cf.cond_br %24, ^bb3(%23 : i64), ^bb12(%23 : i64)
  ^bb11:  // pred: ^bb8
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb10
  ^bb12(%25: i64):  // pred: ^bb10
    cf.br ^bb3(%23 : i64)
  }
  func.func public @"as-br_if-last"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[4] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i64
    %6 = arith.trunci %5 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2_i32 = arith.constant 2 : i32
    %c0_i32 = arith.constant 0 : i32
    %7 = arith.cmpi ult, %c0_i32, %6 : i32
    cf.cond_br %7, ^bb4, ^bb5
  ^bb2(%8: i32):  // pred: ^bb3
    return %8 : i32
  ^bb3(%9: i32):  // 2 preds: ^bb10, ^bb12
    cf.br ^bb2(%9 : i32)
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %10 = llvm.getelementptr inbounds %4[%c0_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.ptrtoint %11 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %13 = arith.cmpi eq, %12, %c0_i64 : i64
    cf.cond_br %13, ^bb7, ^bb6
  ^bb5:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb4
  ^bb6:  // 2 preds: ^bb4, ^bb7
    %14 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %11[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %11[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.ptrtoint %17 : !llvm.ptr to i64
    %c0_i64_0 = arith.constant 0 : i64
    %20 = arith.cmpi eq, %19, %c0_i64_0 : i64
    cf.cond_br %20, ^bb9, ^bb8
  ^bb7:  // pred: ^bb4
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // 2 preds: ^bb6, ^bb9
    %21 = llvm.load %15 : !llvm.ptr -> i32
    %22 = arith.cmpi ne, %1, %21 : i32
    cf.cond_br %22, ^bb11, ^bb10
  ^bb9:  // pred: ^bb6
    %c3_i32_1 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_1) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // 2 preds: ^bb8, ^bb11
    %23 = llvm.call %17(%18) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr) -> i32
    %c0_i32_2 = arith.constant 0 : i32
    %24 = arith.cmpi ne, %23, %c0_i32_2 : i32
    cf.cond_br %24, ^bb3(%c2_i32 : i32), ^bb12(%c2_i32 : i32)
  ^bb11:  // pred: ^bb8
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb10
  ^bb12(%25: i32):  // pred: ^bb10
    cf.br ^bb3(%c2_i32 : i32)
  }
  func.func public @"as-br_table-first"(%arg0: !llvm.ptr) -> f32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[12] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i64
    %6 = arith.trunci %5 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2_i32 = arith.constant 2 : i32
    %7 = arith.cmpi ult, %c2_i32, %6 : i32
    cf.cond_br %7, ^bb4, ^bb5
  ^bb2(%8: f32):  // pred: ^bb3
    return %8 : f32
  ^bb3(%9: f32):  // 2 preds: ^bb10, ^bb10
    cf.br ^bb2(%9 : f32)
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %10 = llvm.getelementptr inbounds %4[%c2_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.ptrtoint %11 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %13 = arith.cmpi eq, %12, %c0_i64 : i64
    cf.cond_br %13, ^bb7, ^bb6
  ^bb5:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb4
  ^bb6:  // 2 preds: ^bb4, ^bb7
    %14 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %11[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %11[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.ptrtoint %17 : !llvm.ptr to i64
    %c0_i64_0 = arith.constant 0 : i64
    %20 = arith.cmpi eq, %19, %c0_i64_0 : i64
    cf.cond_br %20, ^bb9, ^bb8
  ^bb7:  // pred: ^bb4
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // 2 preds: ^bb6, ^bb9
    %21 = llvm.load %15 : !llvm.ptr -> i32
    %22 = arith.cmpi ne, %1, %21 : i32
    cf.cond_br %22, ^bb11, ^bb10
  ^bb9:  // pred: ^bb6
    %c3_i32_1 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_1) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // 2 preds: ^bb8, ^bb11
    %23 = llvm.call %17(%18) vararg(!llvm.func<f32 (...)>) : !llvm.ptr, (!llvm.ptr) -> f32
    %c2_i32_2 = arith.constant 2 : i32
    cf.switch %c2_i32_2 : i32, [
      default: ^bb3(%23 : f32),
      0: ^bb3(%23 : f32)
    ]
  ^bb11:  // pred: ^bb8
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb10
  }
  func.func public @"as-br_table-last"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[4] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i64
    %6 = arith.trunci %5 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2_i32 = arith.constant 2 : i32
    %c0_i32 = arith.constant 0 : i32
    %7 = arith.cmpi ult, %c0_i32, %6 : i32
    cf.cond_br %7, ^bb4, ^bb5
  ^bb2(%8: i32):  // pred: ^bb3
    return %8 : i32
  ^bb3(%9: i32):  // 2 preds: ^bb10, ^bb10
    cf.br ^bb2(%9 : i32)
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %10 = llvm.getelementptr inbounds %4[%c0_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.ptrtoint %11 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %13 = arith.cmpi eq, %12, %c0_i64 : i64
    cf.cond_br %13, ^bb7, ^bb6
  ^bb5:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb4
  ^bb6:  // 2 preds: ^bb4, ^bb7
    %14 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %11[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %11[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.ptrtoint %17 : !llvm.ptr to i64
    %c0_i64_0 = arith.constant 0 : i64
    %20 = arith.cmpi eq, %19, %c0_i64_0 : i64
    cf.cond_br %20, ^bb9, ^bb8
  ^bb7:  // pred: ^bb4
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // 2 preds: ^bb6, ^bb9
    %21 = llvm.load %15 : !llvm.ptr -> i32
    %22 = arith.cmpi ne, %1, %21 : i32
    cf.cond_br %22, ^bb11, ^bb10
  ^bb9:  // pred: ^bb6
    %c3_i32_1 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_1) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // 2 preds: ^bb8, ^bb11
    %23 = llvm.call %17(%18) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr) -> i32
    cf.switch %23 : i32, [
      default: ^bb3(%c2_i32 : i32),
      0: ^bb3(%c2_i32 : i32)
    ]
  ^bb11:  // pred: ^bb8
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb10
  }
  func.func public @"as-store-first"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[4] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i64
    %6 = arith.trunci %5 : i64 to i32
    %7 = llvm.getelementptr %arg0[128] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %7[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %10 = arith.cmpi ult, %c0_i32, %6 : i32
    cf.cond_br %10, ^bb3, ^bb4
  ^bb2:  // pred: ^bb9
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %11 = llvm.getelementptr inbounds %4[%c0_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.ptrtoint %12 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %14 = arith.cmpi eq, %13, %c0_i64 : i64
    cf.cond_br %14, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %15 = llvm.getelementptr %12[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %12[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.getelementptr %12[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %18 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.load %17 : !llvm.ptr -> !llvm.ptr
    %20 = llvm.ptrtoint %18 : !llvm.ptr to i64
    %c0_i64_0 = arith.constant 0 : i64
    %21 = arith.cmpi eq, %20, %c0_i64_0 : i64
    cf.cond_br %21, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %22 = llvm.load %16 : !llvm.ptr -> i32
    %23 = arith.cmpi ne, %1, %22 : i32
    cf.cond_br %23, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_1 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_1) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %24 = llvm.call %18(%19) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr) -> i32
    %c1_i32 = arith.constant 1 : i32
    %c0_i64_2 = arith.constant 0 : i64
    %25 = arith.extui %24 : i32 to i64
    %26 = arith.addi %25, %c0_i64_2 : i64
    %27 = llvm.getelementptr %9[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32, %27 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func public @"as-store-last"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i64
    %6 = arith.trunci %5 : i64 to i32
    %7 = llvm.getelementptr %arg0[128] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %7[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c10_i32 = arith.constant 10 : i32
    %c3_i32 = arith.constant 3 : i32
    %10 = arith.cmpi ult, %c3_i32, %6 : i32
    cf.cond_br %10, ^bb3, ^bb4
  ^bb2:  // pred: ^bb9
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %11 = llvm.getelementptr inbounds %4[%c3_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.ptrtoint %12 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %14 = arith.cmpi eq, %13, %c0_i64 : i64
    cf.cond_br %14, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32_0 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_0) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %15 = llvm.getelementptr %12[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %12[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.getelementptr %12[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %18 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.load %17 : !llvm.ptr -> !llvm.ptr
    %20 = llvm.ptrtoint %18 : !llvm.ptr to i64
    %c0_i64_1 = arith.constant 0 : i64
    %21 = arith.cmpi eq, %20, %c0_i64_1 : i64
    cf.cond_br %21, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %22 = llvm.load %16 : !llvm.ptr -> i32
    %23 = arith.cmpi ne, %1, %22 : i32
    cf.cond_br %23, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_2 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_2) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %24 = llvm.call %18(%19) vararg(!llvm.func<f64 (...)>) : !llvm.ptr, (!llvm.ptr) -> f64
    %c0_i64_3 = arith.constant 0 : i64
    %25 = arith.extui %c10_i32 : i32 to i64
    %26 = arith.addi %25, %c0_i64_3 : i64
    %27 = llvm.getelementptr %9[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %24, %27 {alignment = 1 : i64} : f64, !llvm.ptr
    cf.br ^bb2
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func public @"as-memory.grow-value"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[4] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i64
    %6 = arith.trunci %5 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %7 = arith.cmpi ult, %c0_i32, %6 : i32
    cf.cond_br %7, ^bb3, ^bb4
  ^bb2(%8: i32):  // pred: ^bb9
    return %8 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %9 = llvm.getelementptr inbounds %4[%c0_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.ptrtoint %10 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %12 = arith.cmpi eq, %11, %c0_i64 : i64
    cf.cond_br %12, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %13 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %10[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %10[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.ptrtoint %16 : !llvm.ptr to i64
    %c0_i64_0 = arith.constant 0 : i64
    %19 = arith.cmpi eq, %18, %c0_i64_0 : i64
    cf.cond_br %19, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %20 = llvm.load %14 : !llvm.ptr -> i32
    %21 = arith.cmpi ne, %1, %20 : i32
    cf.cond_br %21, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_1 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_1) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %22 = llvm.call %16(%17) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr) -> i32
    %c0_i32_2 = arith.constant 0 : i32
    %23 = call @dora_fn_wasm_memory_grow(%arg0, %22, %c0_i32_2) : (!llvm.ptr, i32, i32) -> i32
    cf.br ^bb2(%23 : i32)
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func public @"as-return-value"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[24] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i64
    %6 = arith.trunci %5 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c4_i32 = arith.constant 4 : i32
    %7 = arith.cmpi ult, %c4_i32, %6 : i32
    cf.cond_br %7, ^bb3, ^bb4
  ^bb2(%8: i32):  // pred: ^bb9
    return %8 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %9 = llvm.getelementptr inbounds %4[%c4_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.ptrtoint %10 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %12 = arith.cmpi eq, %11, %c0_i64 : i64
    cf.cond_br %12, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %13 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %10[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %10[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.ptrtoint %16 : !llvm.ptr to i64
    %c0_i64_0 = arith.constant 0 : i64
    %19 = arith.cmpi eq, %18, %c0_i64_0 : i64
    cf.cond_br %19, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32_1 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_1) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %20 = llvm.load %14 : !llvm.ptr -> i32
    %21 = arith.cmpi ne, %1, %20 : i32
    cf.cond_br %21, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_2 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_2) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %22 = llvm.call %16(%17, %c1_i32) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> i32
    cf.br ^bb2(%22 : i32)
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func public @"as-drop-operand"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[28] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i64
    %6 = arith.trunci %5 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i64 = arith.constant 1 : i64
    %c5_i32 = arith.constant 5 : i32
    %7 = arith.cmpi ult, %c5_i32, %6 : i32
    cf.cond_br %7, ^bb3, ^bb4
  ^bb2:  // pred: ^bb9
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %8 = llvm.getelementptr inbounds %4[%c5_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.ptrtoint %9 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %11 = arith.cmpi eq, %10, %c0_i64 : i64
    cf.cond_br %11, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %12 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.getelementptr %9[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %9[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    %16 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.ptrtoint %15 : !llvm.ptr to i64
    %c0_i64_0 = arith.constant 0 : i64
    %18 = arith.cmpi eq, %17, %c0_i64_0 : i64
    cf.cond_br %18, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %19 = llvm.load %13 : !llvm.ptr -> i32
    %20 = arith.cmpi ne, %1, %19 : i32
    cf.cond_br %20, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_1 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_1) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %21 = llvm.call %15(%16, %c1_i64) vararg(!llvm.func<i64 (...)>) : !llvm.ptr, (!llvm.ptr, i64) -> i64
    cf.br ^bb2
  ^bb10:  // pred: ^bb7
    %c5_i32_2 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_2) : (i32) -> ()
    cf.br ^bb9
  }
  func.func public @"as-br-value"(%arg0: !llvm.ptr) -> f32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i64
    %6 = arith.trunci %5 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1065353216_i32 = arith.constant 1065353216 : i32
    %7 = arith.bitcast %c1065353216_i32 : i32 to f32
    %c6_i32 = arith.constant 6 : i32
    %8 = arith.cmpi ult, %c6_i32, %6 : i32
    cf.cond_br %8, ^bb4, ^bb5
  ^bb2(%9: f32):  // pred: ^bb3
    return %9 : f32
  ^bb3(%10: f32):  // pred: ^bb10
    cf.br ^bb2(%10 : f32)
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %11 = llvm.getelementptr inbounds %4[%c6_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.ptrtoint %12 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %14 = arith.cmpi eq, %13, %c0_i64 : i64
    cf.cond_br %14, ^bb7, ^bb6
  ^bb5:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb4
  ^bb6:  // 2 preds: ^bb4, ^bb7
    %15 = llvm.getelementptr %12[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %12[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.getelementptr %12[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %18 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.load %17 : !llvm.ptr -> !llvm.ptr
    %20 = llvm.ptrtoint %18 : !llvm.ptr to i64
    %c0_i64_0 = arith.constant 0 : i64
    %21 = arith.cmpi eq, %20, %c0_i64_0 : i64
    cf.cond_br %21, ^bb9, ^bb8
  ^bb7:  // pred: ^bb4
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // 2 preds: ^bb6, ^bb9
    %22 = llvm.load %16 : !llvm.ptr -> i32
    %23 = arith.cmpi ne, %1, %22 : i32
    cf.cond_br %23, ^bb11, ^bb10
  ^bb9:  // pred: ^bb6
    %c3_i32_1 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_1) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // 2 preds: ^bb8, ^bb11
    %24 = llvm.call %18(%19, %7) vararg(!llvm.func<f32 (...)>) : !llvm.ptr, (!llvm.ptr, f32) -> f32
    cf.br ^bb3(%24 : f32)
  ^bb11:  // pred: ^bb8
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb10
  }
  func.func public @"as-local.set-value"(%arg0: !llvm.ptr) -> f64 attributes {llvm.emit_c_interface} {
    %cst = arith.constant 0.000000e+00 : f64
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f64 : (i32) -> !llvm.ptr
    llvm.store %cst, %0 : f64, !llvm.ptr
    %1 = llvm.getelementptr %arg0[36] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.load %4 : !llvm.ptr -> i64
    %7 = arith.trunci %6 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c4607182418800017408_i64 = arith.constant 4607182418800017408 : i64
    %8 = arith.bitcast %c4607182418800017408_i64 : i64 to f64
    %c7_i32 = arith.constant 7 : i32
    %9 = arith.cmpi ult, %c7_i32, %7 : i32
    cf.cond_br %9, ^bb3, ^bb4
  ^bb2(%10: f64):  // pred: ^bb9
    return %10 : f64
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %11 = llvm.getelementptr inbounds %5[%c7_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.ptrtoint %12 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %14 = arith.cmpi eq, %13, %c0_i64 : i64
    cf.cond_br %14, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %15 = llvm.getelementptr %12[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %12[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.getelementptr %12[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %18 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.load %17 : !llvm.ptr -> !llvm.ptr
    %20 = llvm.ptrtoint %18 : !llvm.ptr to i64
    %c0_i64_0 = arith.constant 0 : i64
    %21 = arith.cmpi eq, %20, %c0_i64_0 : i64
    cf.cond_br %21, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %22 = llvm.load %16 : !llvm.ptr -> i32
    %23 = arith.cmpi ne, %2, %22 : i32
    cf.cond_br %23, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_1 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_1) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %24 = llvm.call %18(%19, %8) vararg(!llvm.func<f64 (...)>) : !llvm.ptr, (!llvm.ptr, f64) -> f64
    llvm.store %24, %0 : f64, !llvm.ptr
    %25 = llvm.load %0 : !llvm.ptr -> f64
    cf.br ^bb2(%25 : f64)
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func public @"as-local.tee-value"(%arg0: !llvm.ptr) -> f64 attributes {llvm.emit_c_interface} {
    %cst = arith.constant 0.000000e+00 : f64
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f64 : (i32) -> !llvm.ptr
    llvm.store %cst, %0 : f64, !llvm.ptr
    %1 = llvm.getelementptr %arg0[36] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.load %4 : !llvm.ptr -> i64
    %7 = arith.trunci %6 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c4607182418800017408_i64 = arith.constant 4607182418800017408 : i64
    %8 = arith.bitcast %c4607182418800017408_i64 : i64 to f64
    %c7_i32 = arith.constant 7 : i32
    %9 = arith.cmpi ult, %c7_i32, %7 : i32
    cf.cond_br %9, ^bb3, ^bb4
  ^bb2(%10: f64):  // pred: ^bb9
    return %10 : f64
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %11 = llvm.getelementptr inbounds %5[%c7_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.ptrtoint %12 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %14 = arith.cmpi eq, %13, %c0_i64 : i64
    cf.cond_br %14, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %15 = llvm.getelementptr %12[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %12[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.getelementptr %12[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %18 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.load %17 : !llvm.ptr -> !llvm.ptr
    %20 = llvm.ptrtoint %18 : !llvm.ptr to i64
    %c0_i64_0 = arith.constant 0 : i64
    %21 = arith.cmpi eq, %20, %c0_i64_0 : i64
    cf.cond_br %21, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %22 = llvm.load %16 : !llvm.ptr -> i32
    %23 = arith.cmpi ne, %2, %22 : i32
    cf.cond_br %23, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_1 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_1) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %24 = llvm.call %18(%19, %8) vararg(!llvm.func<f64 (...)>) : !llvm.ptr, (!llvm.ptr, f64) -> f64
    llvm.store %24, %0 : f64, !llvm.ptr
    cf.br ^bb2(%24 : f64)
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func public @"as-global.set-value"(%arg0: !llvm.ptr) -> f64 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[36] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i64
    %6 = arith.trunci %5 : i64 to i32
    %7 = llvm.getelementptr %arg0[144] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c4607182418800017408_i64 = arith.constant 4607182418800017408 : i64
    %9 = arith.bitcast %c4607182418800017408_i64 : i64 to f64
    %c7_i32 = arith.constant 7 : i32
    %10 = arith.cmpi ult, %c7_i32, %6 : i32
    cf.cond_br %10, ^bb3, ^bb4
  ^bb2(%11: f64):  // pred: ^bb9
    return %11 : f64
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %12 = llvm.getelementptr inbounds %4[%c7_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    %14 = llvm.ptrtoint %13 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %15 = arith.cmpi eq, %14, %c0_i64 : i64
    cf.cond_br %15, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %16 = llvm.getelementptr %13[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.getelementptr %13[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %18 = llvm.getelementptr %13[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %19 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %20 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %21 = llvm.ptrtoint %19 : !llvm.ptr to i64
    %c0_i64_0 = arith.constant 0 : i64
    %22 = arith.cmpi eq, %21, %c0_i64_0 : i64
    cf.cond_br %22, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %23 = llvm.load %17 : !llvm.ptr -> i32
    %24 = arith.cmpi ne, %1, %23 : i32
    cf.cond_br %24, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_1 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_1) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %25 = llvm.call %19(%20, %9) vararg(!llvm.func<f64 (...)>) : !llvm.ptr, (!llvm.ptr, f64) -> f64
    llvm.store %25, %8 : f64, !llvm.ptr
    %26 = llvm.load %8 : !llvm.ptr -> f64
    cf.br ^bb2(%26 : f64)
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func public @"as-load-operand"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[4] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i64
    %6 = arith.trunci %5 : i64 to i32
    %7 = llvm.getelementptr %arg0[128] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %7[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %10 = arith.cmpi ult, %c0_i32, %6 : i32
    cf.cond_br %10, ^bb3, ^bb4
  ^bb2(%11: i32):  // pred: ^bb9
    return %11 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %12 = llvm.getelementptr inbounds %4[%c0_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    %14 = llvm.ptrtoint %13 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %15 = arith.cmpi eq, %14, %c0_i64 : i64
    cf.cond_br %15, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %16 = llvm.getelementptr %13[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.getelementptr %13[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %18 = llvm.getelementptr %13[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %19 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %20 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %21 = llvm.ptrtoint %19 : !llvm.ptr to i64
    %c0_i64_0 = arith.constant 0 : i64
    %22 = arith.cmpi eq, %21, %c0_i64_0 : i64
    cf.cond_br %22, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %23 = llvm.load %17 : !llvm.ptr -> i32
    %24 = arith.cmpi ne, %1, %23 : i32
    cf.cond_br %24, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_1 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_1) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %25 = llvm.call %19(%20) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr) -> i32
    %c0_i64_2 = arith.constant 0 : i64
    %26 = arith.extui %25 : i32 to i64
    %27 = arith.addi %26, %c0_i64_2 : i64
    %28 = llvm.getelementptr %9[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %29 = llvm.load volatile %28 {alignment = 1 : i64} : !llvm.ptr -> i32
    cf.br ^bb2(%29 : i32)
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func public @"as-unary-operand"(%arg0: !llvm.ptr) -> f32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i64
    %6 = arith.trunci %5 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %7 = arith.bitcast %c0_i32 : i32 to f32
    %c6_i32 = arith.constant 6 : i32
    %8 = arith.cmpi ult, %c6_i32, %6 : i32
    cf.cond_br %8, ^bb4, ^bb5
  ^bb2(%9: f32):  // pred: ^bb3
    return %9 : f32
  ^bb3(%10: f32):  // pred: ^bb10
    cf.br ^bb2(%10 : f32)
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %11 = llvm.getelementptr inbounds %4[%c6_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.ptrtoint %12 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %14 = arith.cmpi eq, %13, %c0_i64 : i64
    cf.cond_br %14, ^bb7, ^bb6
  ^bb5:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb4
  ^bb6:  // 2 preds: ^bb4, ^bb7
    %15 = llvm.getelementptr %12[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %12[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.getelementptr %12[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %18 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.load %17 : !llvm.ptr -> !llvm.ptr
    %20 = llvm.ptrtoint %18 : !llvm.ptr to i64
    %c0_i64_0 = arith.constant 0 : i64
    %21 = arith.cmpi eq, %20, %c0_i64_0 : i64
    cf.cond_br %21, ^bb9, ^bb8
  ^bb7:  // pred: ^bb4
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // 2 preds: ^bb6, ^bb9
    %22 = llvm.load %16 : !llvm.ptr -> i32
    %23 = arith.cmpi ne, %1, %22 : i32
    cf.cond_br %23, ^bb11, ^bb10
  ^bb9:  // pred: ^bb6
    %c3_i32_1 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_1) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // 2 preds: ^bb8, ^bb11
    %24 = llvm.call %18(%19, %7) vararg(!llvm.func<f32 (...)>) : !llvm.ptr, (!llvm.ptr, f32) -> f32
    %25 = math.sqrt %24 : f32
    cf.br ^bb3(%25 : f32)
  ^bb11:  // pred: ^bb8
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb10
  }
  func.func public @"as-binary-left"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[24] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i64
    %6 = arith.trunci %5 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c4_i32 = arith.constant 4 : i32
    %7 = arith.cmpi ult, %c4_i32, %6 : i32
    cf.cond_br %7, ^bb4, ^bb5
  ^bb2(%8: i32):  // pred: ^bb3
    return %8 : i32
  ^bb3(%9: i32):  // pred: ^bb10
    cf.br ^bb2(%9 : i32)
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %10 = llvm.getelementptr inbounds %4[%c4_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.ptrtoint %11 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %13 = arith.cmpi eq, %12, %c0_i64 : i64
    cf.cond_br %13, ^bb7, ^bb6
  ^bb5:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb4
  ^bb6:  // 2 preds: ^bb4, ^bb7
    %14 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %11[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %11[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.ptrtoint %17 : !llvm.ptr to i64
    %c0_i64_0 = arith.constant 0 : i64
    %20 = arith.cmpi eq, %19, %c0_i64_0 : i64
    cf.cond_br %20, ^bb9, ^bb8
  ^bb7:  // pred: ^bb4
    %c4_i32_1 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_1) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // 2 preds: ^bb6, ^bb9
    %21 = llvm.load %15 : !llvm.ptr -> i32
    %22 = arith.cmpi ne, %1, %21 : i32
    cf.cond_br %22, ^bb11, ^bb10
  ^bb9:  // pred: ^bb6
    %c3_i32_2 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_2) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // 2 preds: ^bb8, ^bb11
    %23 = llvm.call %17(%18, %c1_i32) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> i32
    %c10_i32 = arith.constant 10 : i32
    %24 = arith.addi %23, %c10_i32 : i32
    cf.br ^bb3(%24 : i32)
  ^bb11:  // pred: ^bb8
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb10
  }
  func.func public @"as-binary-right"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[24] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i64
    %6 = arith.trunci %5 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c10_i32 = arith.constant 10 : i32
    %c1_i32 = arith.constant 1 : i32
    %c4_i32 = arith.constant 4 : i32
    %7 = arith.cmpi ult, %c4_i32, %6 : i32
    cf.cond_br %7, ^bb4, ^bb5
  ^bb2(%8: i32):  // pred: ^bb3
    return %8 : i32
  ^bb3(%9: i32):  // pred: ^bb10
    cf.br ^bb2(%9 : i32)
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %10 = llvm.getelementptr inbounds %4[%c4_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.ptrtoint %11 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %13 = arith.cmpi eq, %12, %c0_i64 : i64
    cf.cond_br %13, ^bb7, ^bb6
  ^bb5:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb4
  ^bb6:  // 2 preds: ^bb4, ^bb7
    %14 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %11[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %11[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.ptrtoint %17 : !llvm.ptr to i64
    %c0_i64_0 = arith.constant 0 : i64
    %20 = arith.cmpi eq, %19, %c0_i64_0 : i64
    cf.cond_br %20, ^bb9, ^bb8
  ^bb7:  // pred: ^bb4
    %c4_i32_1 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_1) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // 2 preds: ^bb6, ^bb9
    %21 = llvm.load %15 : !llvm.ptr -> i32
    %22 = arith.cmpi ne, %1, %21 : i32
    cf.cond_br %22, ^bb11, ^bb10
  ^bb9:  // pred: ^bb6
    %c3_i32_2 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_2) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // 2 preds: ^bb8, ^bb11
    %23 = llvm.call %17(%18, %c1_i32) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> i32
    %24 = arith.subi %c10_i32, %23 : i32
    cf.br ^bb3(%24 : i32)
  ^bb11:  // pred: ^bb8
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb10
  }
  func.func public @"as-test-operand"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[24] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i64
    %6 = arith.trunci %5 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c4_i32 = arith.constant 4 : i32
    %7 = arith.cmpi ult, %c4_i32, %6 : i32
    cf.cond_br %7, ^bb4, ^bb5
  ^bb2(%8: i32):  // pred: ^bb3
    return %8 : i32
  ^bb3(%9: i32):  // pred: ^bb10
    cf.br ^bb2(%9 : i32)
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %10 = llvm.getelementptr inbounds %4[%c4_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.ptrtoint %11 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %13 = arith.cmpi eq, %12, %c0_i64 : i64
    cf.cond_br %13, ^bb7, ^bb6
  ^bb5:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb4
  ^bb6:  // 2 preds: ^bb4, ^bb7
    %14 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %11[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %11[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.ptrtoint %17 : !llvm.ptr to i64
    %c0_i64_0 = arith.constant 0 : i64
    %20 = arith.cmpi eq, %19, %c0_i64_0 : i64
    cf.cond_br %20, ^bb9, ^bb8
  ^bb7:  // pred: ^bb4
    %c4_i32_1 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_1) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // 2 preds: ^bb6, ^bb9
    %21 = llvm.load %15 : !llvm.ptr -> i32
    %22 = arith.cmpi ne, %1, %21 : i32
    cf.cond_br %22, ^bb11, ^bb10
  ^bb9:  // pred: ^bb6
    %c3_i32_2 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_2) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // 2 preds: ^bb8, ^bb11
    %23 = llvm.call %17(%18, %c1_i32) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> i32
    %c0_i32 = arith.constant 0 : i32
    %24 = arith.cmpi eq, %23, %c0_i32 : i32
    %25 = arith.extui %24 : i1 to i32
    cf.br ^bb3(%25 : i32)
  ^bb11:  // pred: ^bb8
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb10
  }
  func.func public @"as-compare-left"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[24] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i64
    %6 = arith.trunci %5 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c4_i32 = arith.constant 4 : i32
    %7 = arith.cmpi ult, %c4_i32, %6 : i32
    cf.cond_br %7, ^bb4, ^bb5
  ^bb2(%8: i32):  // pred: ^bb3
    return %8 : i32
  ^bb3(%9: i32):  // pred: ^bb10
    cf.br ^bb2(%9 : i32)
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %10 = llvm.getelementptr inbounds %4[%c4_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.ptrtoint %11 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %13 = arith.cmpi eq, %12, %c0_i64 : i64
    cf.cond_br %13, ^bb7, ^bb6
  ^bb5:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb4
  ^bb6:  // 2 preds: ^bb4, ^bb7
    %14 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %11[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %11[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.ptrtoint %17 : !llvm.ptr to i64
    %c0_i64_0 = arith.constant 0 : i64
    %20 = arith.cmpi eq, %19, %c0_i64_0 : i64
    cf.cond_br %20, ^bb9, ^bb8
  ^bb7:  // pred: ^bb4
    %c4_i32_1 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_1) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // 2 preds: ^bb6, ^bb9
    %21 = llvm.load %15 : !llvm.ptr -> i32
    %22 = arith.cmpi ne, %1, %21 : i32
    cf.cond_br %22, ^bb11, ^bb10
  ^bb9:  // pred: ^bb6
    %c3_i32_2 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_2) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // 2 preds: ^bb8, ^bb11
    %23 = llvm.call %17(%18, %c1_i32) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> i32
    %c10_i32 = arith.constant 10 : i32
    %24 = arith.cmpi ule, %23, %c10_i32 : i32
    %25 = arith.extui %24 : i1 to i32
    cf.br ^bb3(%25 : i32)
  ^bb11:  // pred: ^bb8
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb10
  }
  func.func public @"as-compare-right"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[24] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i64
    %6 = arith.trunci %5 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c10_i32 = arith.constant 10 : i32
    %c1_i32 = arith.constant 1 : i32
    %c4_i32 = arith.constant 4 : i32
    %7 = arith.cmpi ult, %c4_i32, %6 : i32
    cf.cond_br %7, ^bb4, ^bb5
  ^bb2(%8: i32):  // pred: ^bb3
    return %8 : i32
  ^bb3(%9: i32):  // pred: ^bb10
    cf.br ^bb2(%9 : i32)
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %10 = llvm.getelementptr inbounds %4[%c4_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.ptrtoint %11 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %13 = arith.cmpi eq, %12, %c0_i64 : i64
    cf.cond_br %13, ^bb7, ^bb6
  ^bb5:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb4
  ^bb6:  // 2 preds: ^bb4, ^bb7
    %14 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %11[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %11[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.ptrtoint %17 : !llvm.ptr to i64
    %c0_i64_0 = arith.constant 0 : i64
    %20 = arith.cmpi eq, %19, %c0_i64_0 : i64
    cf.cond_br %20, ^bb9, ^bb8
  ^bb7:  // pred: ^bb4
    %c4_i32_1 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_1) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // 2 preds: ^bb6, ^bb9
    %21 = llvm.load %15 : !llvm.ptr -> i32
    %22 = arith.cmpi ne, %1, %21 : i32
    cf.cond_br %22, ^bb11, ^bb10
  ^bb9:  // pred: ^bb6
    %c3_i32_2 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_2) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // 2 preds: ^bb8, ^bb11
    %23 = llvm.call %17(%18, %c1_i32) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> i32
    %24 = arith.cmpi eq, %c10_i32, %23 : i32
    %25 = arith.extui %24 : i1 to i32
    %c0_i32 = arith.constant 0 : i32
    %26 = arith.cmpi eq, %25, %c0_i32 : i32
    %27 = arith.extui %26 : i1 to i32
    cf.br ^bb3(%27 : i32)
  ^bb11:  // pred: ^bb8
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb10
  }
  func.func public @"as-convert-operand"(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[24] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i64
    %6 = arith.trunci %5 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c4_i32 = arith.constant 4 : i32
    %7 = arith.cmpi ult, %c4_i32, %6 : i32
    cf.cond_br %7, ^bb4, ^bb5
  ^bb2(%8: i64):  // pred: ^bb3
    return %8 : i64
  ^bb3(%9: i64):  // pred: ^bb10
    cf.br ^bb2(%9 : i64)
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %10 = llvm.getelementptr inbounds %4[%c4_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.ptrtoint %11 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %13 = arith.cmpi eq, %12, %c0_i64 : i64
    cf.cond_br %13, ^bb7, ^bb6
  ^bb5:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb4
  ^bb6:  // 2 preds: ^bb4, ^bb7
    %14 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %11[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %11[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.ptrtoint %17 : !llvm.ptr to i64
    %c0_i64_0 = arith.constant 0 : i64
    %20 = arith.cmpi eq, %19, %c0_i64_0 : i64
    cf.cond_br %20, ^bb9, ^bb8
  ^bb7:  // pred: ^bb4
    %c4_i32_1 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_1) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // 2 preds: ^bb6, ^bb9
    %21 = llvm.load %15 : !llvm.ptr -> i32
    %22 = arith.cmpi ne, %1, %21 : i32
    cf.cond_br %22, ^bb11, ^bb10
  ^bb9:  // pred: ^bb6
    %c3_i32_2 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_2) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // 2 preds: ^bb8, ^bb11
    %23 = llvm.call %17(%18, %c1_i32) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> i32
    %24 = arith.extsi %23 : i32 to i64
    cf.br ^bb3(%24 : i64)
  ^bb11:  // pred: ^bb8
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb10
  }
  func.func private @dora_fn_wasm_table_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_copy(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_fill(!llvm.ptr, i32, i32, !llvm.ptr, i32)
  func.func private @dora_fn_wasm_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_table_set(!llvm.ptr, i32, i32, !llvm.ptr)
  func.func private @dora_fn_wasm_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_imported_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_func_ref(!llvm.ptr, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_data_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_elem_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_raise_trap(i32)
  func.func private @dora_fn_wasm_gas_limit() -> i64
}
