---
source: crates/dora-compiler/src/wasm/tests/code.rs
expression: op
snapshot_kind: text
---
module {
  func.func @"fib-recursive"(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32 = arith.constant 1 : i32
    %2 = "wasm.leu"(%1, %c1_i32) : (i32, i32) -> i32
    %c0_i32 = arith.constant 0 : i32
    %3 = arith.cmpi ne, %2, %c0_i32 : i32
    cf.cond_br %3, ^bb2, ^bb3
  ^bb1(%4: i32):  // 2 preds: ^bb2, ^bb4
    return %4 : i32
  ^bb2:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb1(%5 : i32)
  ^bb3:  // pred: ^bb0
    cf.br ^bb4
  ^bb4:  // pred: ^bb3
    %6 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_0 = arith.constant 1 : i32
    %7 = "wasm.sub"(%6, %c1_i32_0) : (i32, i32) -> i32
    %8 = call @"fib-recursive"(%arg0, %7) : (!llvm.ptr, i32) -> i32
    %9 = llvm.load %0 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %10 = "wasm.sub"(%9, %c2_i32) : (i32, i32) -> i32
    %11 = call @"fib-recursive"(%arg0, %10) : (!llvm.ptr, i32) -> i32
    %12 = "wasm.add"(%8, %11) : (i32, i32) -> i32
    cf.br ^bb1(%12 : i32)
  }
  func.func @"fib-iterative"(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c0_i32_4 = arith.constant 0 : i32
    llvm.store %c0_i32_4, %1 : i32, !llvm.ptr
    %c1_i32 = arith.constant 1 : i32
    llvm.store %c1_i32, %2 : i32, !llvm.ptr
    %c0_i32_5 = arith.constant 0 : i32
    llvm.store %c0_i32_5, %3 : i32, !llvm.ptr
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_6 = arith.constant 0 : i32
    %6 = "wasm.eq"(%5, %c0_i32_6) : (i32, i32) -> i32
    %c0_i32_7 = arith.constant 0 : i32
    %7 = arith.cmpi ne, %6, %c0_i32_7 : i32
    cf.cond_br %7, ^bb2, ^bb3
  ^bb1(%8: i32):  // 3 preds: ^bb2, ^bb5, ^bb8
    return %8 : i32
  ^bb2:  // pred: ^bb0
    %c0_i32_8 = arith.constant 0 : i32
    cf.br ^bb1(%c0_i32_8 : i32)
  ^bb3:  // pred: ^bb0
    cf.br ^bb4
  ^bb4:  // pred: ^bb3
    %9 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_9 = arith.constant 1 : i32
    %10 = "wasm.eq"(%9, %c1_i32_9) : (i32, i32) -> i32
    %c0_i32_10 = arith.constant 0 : i32
    %11 = arith.cmpi ne, %10, %c0_i32_10 : i32
    cf.cond_br %11, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    %c1_i32_11 = arith.constant 1 : i32
    cf.br ^bb1(%c1_i32_11 : i32)
  ^bb6:  // pred: ^bb4
    cf.br ^bb7
  ^bb7:  // pred: ^bb6
    cf.br ^bb9
  ^bb8:  // pred: ^bb10
    %12 = llvm.load %2 : !llvm.ptr -> i32
    cf.br ^bb1(%12 : i32)
  ^bb9:  // 2 preds: ^bb7, ^bb9
    %13 = llvm.load %2 : !llvm.ptr -> i32
    llvm.store %13, %4 : i32, !llvm.ptr
    %14 = llvm.load %1 : !llvm.ptr -> i32
    %15 = llvm.load %2 : !llvm.ptr -> i32
    %16 = "wasm.add"(%14, %15) : (i32, i32) -> i32
    llvm.store %16, %2 : i32, !llvm.ptr
    %17 = llvm.load %4 : !llvm.ptr -> i32
    llvm.store %17, %1 : i32, !llvm.ptr
    %18 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_12 = arith.constant 1 : i32
    %19 = "wasm.add"(%18, %c1_i32_12) : (i32, i32) -> i32
    llvm.store %19, %3 : i32, !llvm.ptr
    %20 = llvm.load %3 : !llvm.ptr -> i32
    %21 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_13 = arith.constant 1 : i32
    %22 = "wasm.sub"(%21, %c1_i32_13) : (i32, i32) -> i32
    %23 = "wasm.ltu"(%20, %22) : (i32, i32) -> i32
    %c0_i32_14 = arith.constant 0 : i32
    %24 = arith.cmpi ne, %23, %c0_i32_14 : i32
    cf.cond_br %24, ^bb9, ^bb10
  ^bb10:  // pred: ^bb9
    cf.br ^bb8
  }
}
