---
source: crates/dora-compiler/src/wasm/tests/code.rs
expression: op
snapshot_kind: text
---
module {
  func.func public @"as-br-value"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c0_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %5 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %6 = llvm.load volatile %5 {alignment = 1 : i64} : !llvm.ptr -> i32
    cf.br ^bb3(%6 : i32)
  ^bb2(%7: i32):  // pred: ^bb3
    return %7 : i32
  ^bb3(%8: i32):  // pred: ^bb1
    cf.br ^bb2(%8 : i32)
  }
  func.func public @"as-br_if-cond"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c0_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %5 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %6 = llvm.load volatile %5 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %7 = arith.cmpi ne, %6, %c0_i32_0 : i32
    cf.cond_br %7, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    cf.br ^bb3
  }
  func.func public @"as-br_if-value"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c0_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %5 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %6 = llvm.load volatile %5 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32 = arith.constant 1 : i32
    %c0_i32_0 = arith.constant 0 : i32
    %7 = arith.cmpi ne, %c1_i32, %c0_i32_0 : i32
    cf.cond_br %7, ^bb3(%6 : i32), ^bb4(%6 : i32)
  ^bb2(%8: i32):  // pred: ^bb3
    return %8 : i32
  ^bb3(%9: i32):  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2(%9 : i32)
  ^bb4(%10: i32):  // pred: ^bb1
    %c7_i32 = arith.constant 7 : i32
    cf.br ^bb3(%c7_i32 : i32)
  }
  func.func public @"as-br_if-value-cond"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c6_i32 = arith.constant 6 : i32
    %c0_i32 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c0_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %5 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %6 = llvm.load volatile %5 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %7 = arith.cmpi ne, %6, %c0_i32_0 : i32
    cf.cond_br %7, ^bb3(%c6_i32 : i32), ^bb4(%c6_i32 : i32)
  ^bb2(%8: i32):  // pred: ^bb3
    return %8 : i32
  ^bb3(%9: i32):  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2(%9 : i32)
  ^bb4(%10: i32):  // pred: ^bb1
    %c7_i32 = arith.constant 7 : i32
    cf.br ^bb3(%c7_i32 : i32)
  }
  func.func public @"as-br_table-index"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c0_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %5 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %6 = llvm.load volatile %5 {alignment = 1 : i64} : !llvm.ptr -> i32
    cf.switch %6 : i32, [
      default: ^bb3,
      0: ^bb3,
      1: ^bb3
    ]
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 3 preds: ^bb1, ^bb1, ^bb1
    cf.br ^bb2
  }
  func.func public @"as-br_table-value"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c0_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %5 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %6 = llvm.load volatile %5 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32 = arith.constant 1 : i32
    cf.switch %c1_i32 : i32, [
      default: ^bb3(%6 : i32),
      0: ^bb3(%6 : i32),
      1: ^bb3(%6 : i32)
    ]
  ^bb2(%7: i32):  // pred: ^bb3
    return %7 : i32
  ^bb3(%8: i32):  // 3 preds: ^bb1, ^bb1, ^bb1
    cf.br ^bb2(%8 : i32)
  }
  func.func public @"as-br_table-value-index"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c6_i32 = arith.constant 6 : i32
    %c0_i32 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c0_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %5 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %6 = llvm.load volatile %5 {alignment = 1 : i64} : !llvm.ptr -> i32
    cf.switch %6 : i32, [
      default: ^bb3(%c6_i32 : i32),
      0: ^bb3(%c6_i32 : i32)
    ]
  ^bb2(%7: i32):  // pred: ^bb3
    return %7 : i32
  ^bb3(%8: i32):  // 2 preds: ^bb1, ^bb1
    cf.br ^bb2(%8 : i32)
  }
  func.func public @"as-return-value"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c0_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %5 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %6 = llvm.load volatile %5 {alignment = 1 : i64} : !llvm.ptr -> i32
    cf.br ^bb2(%6 : i32)
  ^bb2(%7: i32):  // pred: ^bb1
    return %7 : i32
  }
  func.func public @"as-if-cond"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c0_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %5 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %6 = llvm.load volatile %5 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %7 = arith.cmpi ne, %6, %c0_i32_0 : i32
    cf.cond_br %7, ^bb3, ^bb4
  ^bb2(%8: i32):  // pred: ^bb5
    return %8 : i32
  ^bb3:  // pred: ^bb1
    %c0_i32_1 = arith.constant 0 : i32
    cf.br ^bb5(%c0_i32_1 : i32)
  ^bb4:  // pred: ^bb1
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb5(%c1_i32 : i32)
  ^bb5(%9: i32):  // 2 preds: ^bb3, ^bb4
    cf.br ^bb2(%9 : i32)
  }
  func.func public @"as-if-then"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %3 = arith.cmpi ne, %c1_i32, %c0_i32 : i32
    cf.cond_br %3, ^bb3, ^bb4
  ^bb2(%4: i32):  // pred: ^bb5
    return %4 : i32
  ^bb3:  // pred: ^bb1
    %c0_i32_0 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %c0_i32_0 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %7 = llvm.getelementptr %2[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %8 = llvm.load volatile %7 {alignment = 1 : i64} : !llvm.ptr -> i32
    cf.br ^bb5(%8 : i32)
  ^bb4:  // pred: ^bb1
    %c0_i32_1 = arith.constant 0 : i32
    cf.br ^bb5(%c0_i32_1 : i32)
  ^bb5(%9: i32):  // 2 preds: ^bb3, ^bb4
    cf.br ^bb2(%9 : i32)
  }
  func.func public @"as-if-else"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c0_i32_0 = arith.constant 0 : i32
    %3 = arith.cmpi ne, %c0_i32, %c0_i32_0 : i32
    cf.cond_br %3, ^bb3, ^bb4
  ^bb2(%4: i32):  // pred: ^bb5
    return %4 : i32
  ^bb3:  // pred: ^bb1
    %c0_i32_1 = arith.constant 0 : i32
    cf.br ^bb5(%c0_i32_1 : i32)
  ^bb4:  // pred: ^bb1
    %c0_i32_2 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %c0_i32_2 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %7 = llvm.getelementptr %2[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %8 = llvm.load volatile %7 {alignment = 1 : i64} : !llvm.ptr -> i32
    cf.br ^bb5(%8 : i32)
  ^bb5(%9: i32):  // 2 preds: ^bb3, ^bb4
    cf.br ^bb2(%9 : i32)
  }
  func.func public @"as-select-first"(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %c0_i32 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %7 = llvm.getelementptr %4[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %8 = llvm.load volatile %7 {alignment = 1 : i64} : !llvm.ptr -> i32
    %9 = llvm.load %0 : !llvm.ptr -> i32
    %10 = llvm.load %1 : !llvm.ptr -> i32
    %11 = "wasm.select"(%8, %9, %10) : (i32, i32, i32) -> i32
    cf.br ^bb2(%11 : i32)
  ^bb2(%12: i32):  // pred: ^bb1
    return %12 : i32
  }
  func.func public @"as-select-second"(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %c0_i32 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %9 = llvm.load volatile %8 {alignment = 1 : i64} : !llvm.ptr -> i32
    %10 = llvm.load %1 : !llvm.ptr -> i32
    %11 = "wasm.select"(%5, %9, %10) : (i32, i32, i32) -> i32
    cf.br ^bb2(%11 : i32)
  ^bb2(%12: i32):  // pred: ^bb1
    return %12 : i32
  }
  func.func public @"as-select-cond"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %c0_i32_0 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c0_i32_0 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %5 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %6 = llvm.load volatile %5 {alignment = 1 : i64} : !llvm.ptr -> i32
    %7 = "wasm.select"(%c0_i32, %c1_i32, %6) : (i32, i32, i32) -> i32
    cf.br ^bb2(%7 : i32)
  ^bb2(%8: i32):  // pred: ^bb1
    return %8 : i32
  }
  func.func @f(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c-1_i32 = arith.constant -1 : i32
    cf.br ^bb2(%c-1_i32 : i32)
  ^bb2(%3: i32):  // pred: ^bb1
    return %3 : i32
  }
  func.func public @"as-call-first"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c0_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %5 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %6 = llvm.load volatile %5 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c3_i32 = arith.constant 3 : i32
    %7 = call @f(%arg0, %6, %c2_i32, %c3_i32) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%7 : i32)
  ^bb2(%8: i32):  // pred: ^bb1
    return %8 : i32
  }
  func.func public @"as-call-mid"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c0_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %5 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %6 = llvm.load volatile %5 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %7 = call @f(%arg0, %c1_i32, %6, %c3_i32) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%7 : i32)
  ^bb2(%8: i32):  // pred: ^bb1
    return %8 : i32
  }
  func.func public @"as-call-last"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %c0_i32 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c0_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %5 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %6 = llvm.load volatile %5 {alignment = 1 : i64} : !llvm.ptr -> i32
    %7 = call @f(%arg0, %c1_i32, %c2_i32, %6) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%7 : i32)
  ^bb2(%8: i32):  // pred: ^bb1
    return %8 : i32
  }
  func.func public @"as-call_indirect-first"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    %3 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> i32
    %5 = llvm.getelementptr %arg0[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %arg0[24] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.load %6 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %9 = arith.extui %c0_i32 : i32 to i64
    %10 = arith.addi %9, %c0_i64 : i64
    %11 = llvm.getelementptr %2[%10] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %12 = llvm.load volatile %11 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c3_i32 = arith.constant 3 : i32
    %c0_i32_0 = arith.constant 0 : i32
    %13 = arith.cmpi ult, %c0_i32_0, %8 : i32
    cf.cond_br %13, ^bb3, ^bb4
  ^bb2(%14: i32):  // pred: ^bb9
    return %14 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %15 = llvm.getelementptr %7[%c0_i32_0] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %16 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.load %16 : !llvm.ptr -> i32
    %c0_i32_1 = arith.constant 0 : i32
    %18 = arith.cmpi eq, %17, %c0_i32_1 : i32
    cf.cond_br %18, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32_2 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_2) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %19 = llvm.getelementptr %16[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %20 = llvm.getelementptr %16[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %21 = llvm.getelementptr %16[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %22 = llvm.load %19 : !llvm.ptr -> !llvm.ptr
    %23 = llvm.load %21 : !llvm.ptr -> !llvm.ptr
    %24 = llvm.load %22 : !llvm.ptr -> i32
    %c0_i32_3 = arith.constant 0 : i32
    %25 = arith.cmpi eq, %24, %c0_i32_3 : i32
    cf.cond_br %25, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %26 = llvm.load %20 : !llvm.ptr -> i32
    %27 = arith.cmpi ne, %4, %26 : i32
    cf.cond_br %27, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_4 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_4) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %28 = llvm.call %22(%23, %12, %c2_i32, %c3_i32) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%28 : i32)
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func public @"as-call_indirect-mid"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    %3 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> i32
    %5 = llvm.getelementptr %arg0[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %arg0[24] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.load %6 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %9 = arith.extui %c0_i32 : i32 to i64
    %10 = arith.addi %9, %c0_i64 : i64
    %11 = llvm.getelementptr %2[%10] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %12 = llvm.load volatile %11 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %c0_i32_0 = arith.constant 0 : i32
    %13 = arith.cmpi ult, %c0_i32_0, %8 : i32
    cf.cond_br %13, ^bb3, ^bb4
  ^bb2(%14: i32):  // pred: ^bb9
    return %14 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %15 = llvm.getelementptr %7[%c0_i32_0] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %16 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.load %16 : !llvm.ptr -> i32
    %c0_i32_1 = arith.constant 0 : i32
    %18 = arith.cmpi eq, %17, %c0_i32_1 : i32
    cf.cond_br %18, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32_2 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_2) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %19 = llvm.getelementptr %16[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %20 = llvm.getelementptr %16[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %21 = llvm.getelementptr %16[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %22 = llvm.load %19 : !llvm.ptr -> !llvm.ptr
    %23 = llvm.load %21 : !llvm.ptr -> !llvm.ptr
    %24 = llvm.load %22 : !llvm.ptr -> i32
    %c0_i32_3 = arith.constant 0 : i32
    %25 = arith.cmpi eq, %24, %c0_i32_3 : i32
    cf.cond_br %25, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %26 = llvm.load %20 : !llvm.ptr -> i32
    %27 = arith.cmpi ne, %4, %26 : i32
    cf.cond_br %27, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_4 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_4) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %28 = llvm.call %22(%23, %c1_i32, %12, %c3_i32) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%28 : i32)
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func public @"as-call_indirect-last"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    %3 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> i32
    %5 = llvm.getelementptr %arg0[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %arg0[24] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.load %6 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %c0_i32 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %9 = arith.extui %c0_i32 : i32 to i64
    %10 = arith.addi %9, %c0_i64 : i64
    %11 = llvm.getelementptr %2[%10] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %12 = llvm.load volatile %11 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %13 = arith.cmpi ult, %c0_i32_0, %8 : i32
    cf.cond_br %13, ^bb3, ^bb4
  ^bb2(%14: i32):  // pred: ^bb9
    return %14 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %15 = llvm.getelementptr %7[%c0_i32_0] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %16 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.load %16 : !llvm.ptr -> i32
    %c0_i32_1 = arith.constant 0 : i32
    %18 = arith.cmpi eq, %17, %c0_i32_1 : i32
    cf.cond_br %18, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %19 = llvm.getelementptr %16[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %20 = llvm.getelementptr %16[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %21 = llvm.getelementptr %16[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %22 = llvm.load %19 : !llvm.ptr -> !llvm.ptr
    %23 = llvm.load %21 : !llvm.ptr -> !llvm.ptr
    %24 = llvm.load %22 : !llvm.ptr -> i32
    %c0_i32_2 = arith.constant 0 : i32
    %25 = arith.cmpi eq, %24, %c0_i32_2 : i32
    cf.cond_br %25, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %26 = llvm.load %20 : !llvm.ptr -> i32
    %27 = arith.cmpi ne, %4, %26 : i32
    cf.cond_br %27, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_3 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_3) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %28 = llvm.call %22(%23, %c1_i32, %c2_i32, %12) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%28 : i32)
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func public @"as-call_indirect-index"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    %3 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> i32
    %5 = llvm.getelementptr %arg0[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %arg0[24] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.load %6 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %c3_i32 = arith.constant 3 : i32
    %c0_i32 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %9 = arith.extui %c0_i32 : i32 to i64
    %10 = arith.addi %9, %c0_i64 : i64
    %11 = llvm.getelementptr %2[%10] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %12 = llvm.load volatile %11 {alignment = 1 : i64} : !llvm.ptr -> i32
    %13 = arith.cmpi ult, %12, %8 : i32
    cf.cond_br %13, ^bb3, ^bb4
  ^bb2(%14: i32):  // pred: ^bb9
    return %14 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %15 = llvm.getelementptr %7[%12] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %16 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.load %16 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %18 = arith.cmpi eq, %17, %c0_i32_0 : i32
    cf.cond_br %18, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32_1 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_1) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %19 = llvm.getelementptr %16[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %20 = llvm.getelementptr %16[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %21 = llvm.getelementptr %16[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %22 = llvm.load %19 : !llvm.ptr -> !llvm.ptr
    %23 = llvm.load %21 : !llvm.ptr -> !llvm.ptr
    %24 = llvm.load %22 : !llvm.ptr -> i32
    %c0_i32_2 = arith.constant 0 : i32
    %25 = arith.cmpi eq, %24, %c0_i32_2 : i32
    cf.cond_br %25, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %26 = llvm.load %20 : !llvm.ptr -> i32
    %27 = arith.cmpi ne, %4, %26 : i32
    cf.cond_br %27, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_3 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_3) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %28 = llvm.call %22(%23, %c1_i32, %c2_i32, %c3_i32) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%28 : i32)
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func public @"as-local.set-value"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32_0 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %4 = arith.extui %c0_i32_0 : i32 to i64
    %5 = arith.addi %4, %c0_i64 : i64
    %6 = llvm.getelementptr %3[%5] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %7 = llvm.load volatile %6 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %7, %0 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func public @"as-local.tee-value"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32_0 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %4 = arith.extui %c0_i32_0 : i32 to i64
    %5 = arith.addi %4, %c0_i64 : i64
    %6 = llvm.getelementptr %3[%5] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %7 = llvm.load volatile %6 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %7, %0 : i32, !llvm.ptr
    cf.br ^bb2(%7 : i32)
  ^bb2(%8: i32):  // pred: ^bb1
    return %8 : i32
  }
  func.func public @"as-global.set-value"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %4 = llvm.getelementptr %arg0[48] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32_0 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %c0_i32_0 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %8 = llvm.getelementptr %3[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %9 = llvm.load volatile %8 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %9, %5 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func public @"as-load-address"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c0_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %5 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %6 = llvm.load volatile %5 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_0 = arith.constant 0 : i64
    %7 = arith.extui %6 : i32 to i64
    %8 = arith.addi %7, %c0_i64_0 : i64
    %9 = llvm.getelementptr %2[%8] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %10 = llvm.load volatile %9 {alignment = 1 : i64} : !llvm.ptr -> i32
    cf.br ^bb2(%10 : i32)
  ^bb2(%11: i32):  // pred: ^bb1
    return %11 : i32
  }
  func.func public @"as-loadN-address"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c0_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %5 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %6 = llvm.load volatile %5 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_0 = arith.constant 0 : i64
    %7 = arith.extui %6 : i32 to i64
    %8 = arith.addi %7, %c0_i64_0 : i64
    %9 = llvm.getelementptr %2[%8] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %10 = llvm.load volatile %9 {alignment = 1 : i64} : !llvm.ptr -> i8
    %11 = arith.extsi %10 : i8 to i32
    cf.br ^bb2(%11 : i32)
  ^bb2(%12: i32):  // pred: ^bb1
    return %12 : i32
  }
  func.func public @"as-store-address"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c0_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %5 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %6 = llvm.load volatile %5 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c7_i32 = arith.constant 7 : i32
    %c0_i64_0 = arith.constant 0 : i64
    %7 = arith.extui %6 : i32 to i64
    %8 = arith.addi %7, %c0_i64_0 : i64
    %9 = llvm.getelementptr %2[%8] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c7_i32, %9 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func public @"as-store-value"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2_i32 = arith.constant 2 : i32
    %c0_i32 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c0_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %5 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %6 = llvm.load volatile %5 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_0 = arith.constant 0 : i64
    %7 = arith.extui %c2_i32 : i32 to i64
    %8 = arith.addi %7, %c0_i64_0 : i64
    %9 = llvm.getelementptr %2[%8] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %6, %9 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func public @"as-storeN-address"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c0_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %5 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %6 = llvm.load volatile %5 {alignment = 1 : i64} : !llvm.ptr -> i8
    %7 = arith.extsi %6 : i8 to i32
    %c7_i32 = arith.constant 7 : i32
    %c0_i64_0 = arith.constant 0 : i64
    %8 = arith.extui %7 : i32 to i64
    %9 = arith.addi %8, %c0_i64_0 : i64
    %10 = llvm.getelementptr %2[%9] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %11 = arith.trunci %c7_i32 : i32 to i8
    llvm.store volatile %11, %10 {alignment = 1 : i64} : i8, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func public @"as-storeN-value"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2_i32 = arith.constant 2 : i32
    %c0_i32 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c0_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %5 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %6 = llvm.load volatile %5 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_0 = arith.constant 0 : i64
    %7 = arith.extui %c2_i32 : i32 to i64
    %8 = arith.addi %7, %c0_i64_0 : i64
    %9 = llvm.getelementptr %2[%8] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %10 = arith.trunci %6 : i32 to i16
    llvm.store volatile %10, %9 {alignment = 1 : i64} : i16, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func public @"as-unary-operand"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c100_i32 = arith.constant 100 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c100_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %5 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %6 = llvm.load volatile %5 {alignment = 1 : i64} : !llvm.ptr -> i32
    %7 = "wasm.clz"(%6) : (i32) -> i32
    cf.br ^bb2(%7 : i32)
  ^bb2(%8: i32):  // pred: ^bb1
    return %8 : i32
  }
  func.func public @"as-binary-left"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c100_i32 = arith.constant 100 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c100_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %5 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %6 = llvm.load volatile %5 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c10_i32 = arith.constant 10 : i32
    %7 = "wasm.add"(%6, %c10_i32) : (i32, i32) -> i32
    cf.br ^bb2(%7 : i32)
  ^bb2(%8: i32):  // pred: ^bb1
    return %8 : i32
  }
  func.func public @"as-binary-right"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c10_i32 = arith.constant 10 : i32
    %c100_i32 = arith.constant 100 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c100_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %5 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %6 = llvm.load volatile %5 {alignment = 1 : i64} : !llvm.ptr -> i32
    %7 = "wasm.sub"(%c10_i32, %6) : (i32, i32) -> i32
    cf.br ^bb2(%7 : i32)
  ^bb2(%8: i32):  // pred: ^bb1
    return %8 : i32
  }
  func.func public @"as-test-operand"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c100_i32 = arith.constant 100 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c100_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %5 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %6 = llvm.load volatile %5 {alignment = 1 : i64} : !llvm.ptr -> i32
    %7 = "wasm.eqz"(%6) : (i32) -> i32
    cf.br ^bb2(%7 : i32)
  ^bb2(%8: i32):  // pred: ^bb1
    return %8 : i32
  }
  func.func public @"as-compare-left"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c100_i32 = arith.constant 100 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c100_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %5 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %6 = llvm.load volatile %5 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c10_i32 = arith.constant 10 : i32
    %7 = "wasm.les"(%6, %c10_i32) : (i32, i32) -> i32
    cf.br ^bb2(%7 : i32)
  ^bb2(%8: i32):  // pred: ^bb1
    return %8 : i32
  }
  func.func public @"as-compare-right"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c10_i32 = arith.constant 10 : i32
    %c100_i32 = arith.constant 100 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c100_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %5 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %6 = llvm.load volatile %5 {alignment = 1 : i64} : !llvm.ptr -> i32
    %7 = "wasm.ne"(%c10_i32, %6) : (i32, i32) -> i32
    cf.br ^bb2(%7 : i32)
  ^bb2(%8: i32):  // pred: ^bb1
    return %8 : i32
  }
  func.func public @"as-memory.grow-size"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c100_i32 = arith.constant 100 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c100_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %5 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %6 = llvm.load volatile %5 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %7 = call @dora_fn_wasm_memory_grow(%arg0, %6, %c0_i32) : (!llvm.ptr, i32, i32) -> i32
    cf.br ^bb2(%7 : i32)
  ^bb2(%8: i32):  // pred: ^bb1
    return %8 : i32
  }
  func.func private @dora_fn_wasm_table_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_copy(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_fill(!llvm.ptr, i32, i32, !llvm.ptr, i32)
  func.func private @dora_fn_wasm_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_table_set(!llvm.ptr, i32, i32, !llvm.ptr)
  func.func private @dora_fn_wasm_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_imported_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_func_ref(!llvm.ptr, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_data_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_elem_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_raise_trap(i32)
}
