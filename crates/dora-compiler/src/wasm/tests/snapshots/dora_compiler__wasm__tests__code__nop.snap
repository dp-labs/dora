---
source: crates/dora-compiler/src/wasm/tests/code.rs
expression: op
snapshot_kind: text
---
module {
  func.func @dummy(%arg0: !llvm.ptr) {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    return
  }
  func.func @"3-ary"(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %3 = llvm.load %0 : !llvm.ptr -> i32
    %4 = llvm.load %1 : !llvm.ptr -> i32
    %5 = llvm.load %2 : !llvm.ptr -> i32
    %6 = "wasm.sub"(%4, %5) : (i32, i32) -> i32
    %7 = "wasm.add"(%3, %6) : (i32, i32) -> i32
    cf.br ^bb1(%7 : i32)
  ^bb1(%8: i32):  // pred: ^bb0
    return %8 : i32
  }
  func.func @f2(%arg0: !llvm.ptr) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb1(%c1_i32 : i32)
  ^bb1(%0: i32):  // pred: ^bb0
    return %0 : i32
  }
  func.func @f3(%arg0: !llvm.ptr) -> i32 {
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c2_i32 = arith.constant 2 : i32
    cf.br ^bb1(%c2_i32 : i32)
  ^bb1(%0: i32):  // pred: ^bb0
    return %0 : i32
  }
  func.func @f4(%arg0: !llvm.ptr) -> i32 {
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c3_i32 = arith.constant 3 : i32
    cf.br ^bb1(%c3_i32 : i32)
  ^bb1(%0: i32):  // pred: ^bb0
    return %0 : i32
  }
  func.func @f5(%arg0: !llvm.ptr) -> i32 {
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c4_i32 = arith.constant 4 : i32
    cf.br ^bb1(%c4_i32 : i32)
  ^bb1(%0: i32):  // pred: ^bb0
    return %0 : i32
  }
  func.func @f6(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    return
  }
  func.func @f7(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    return
  }
  func.func @f8(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    return
  }
  func.func @f9(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = llvm.load %0 : !llvm.ptr -> i32
    %4 = "wasm.select"(%1, %2, %3) : (i32, i32, i32) -> i32
    cf.br ^bb1(%4 : i32)
  ^bb1(%5: i32):  // pred: ^bb0
    return %5 : i32
  }
  func.func @f10(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = llvm.load %0 : !llvm.ptr -> i32
    %4 = "wasm.select"(%1, %2, %3) : (i32, i32, i32) -> i32
    cf.br ^bb1(%4 : i32)
  ^bb1(%5: i32):  // pred: ^bb0
    return %5 : i32
  }
  func.func @f11(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = llvm.load %0 : !llvm.ptr -> i32
    %4 = "wasm.select"(%1, %2, %3) : (i32, i32, i32) -> i32
    cf.br ^bb1(%4 : i32)
  ^bb1(%5: i32):  // pred: ^bb0
    return %5 : i32
  }
  func.func @f12(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = llvm.load %0 : !llvm.ptr -> i32
    %4 = "wasm.select"(%1, %2, %3) : (i32, i32, i32) -> i32
    cf.br ^bb1(%4 : i32)
  ^bb1(%5: i32):  // pred: ^bb0
    return %5 : i32
  }
  func.func @f13(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = llvm.load %0 : !llvm.ptr -> i32
    %4 = "wasm.select"(%1, %2, %3) : (i32, i32, i32) -> i32
    cf.br ^bb1(%4 : i32)
  ^bb1(%5: i32):  // pred: ^bb0
    return %5 : i32
  }
  func.func @f14(%arg0: !llvm.ptr) -> i32 {
    %c2_i32 = arith.constant 2 : i32
    cf.br ^bb2(%c2_i32 : i32)
  ^bb1(%0: i32):  // pred: ^bb2
    return %0 : i32
  ^bb2(%1: i32):  // pred: ^bb0
    cf.br ^bb1(%1 : i32)
  }
  func.func @f15(%arg0: !llvm.ptr) -> i32 {
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c2_i32 = arith.constant 2 : i32
    cf.br ^bb2(%c2_i32 : i32)
  ^bb1(%0: i32):  // pred: ^bb2
    return %0 : i32
  ^bb2(%1: i32):  // pred: ^bb0
    cf.br ^bb1(%1 : i32)
  }
  func.func @f16(%arg0: !llvm.ptr) -> i32 {
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c3_i32 = arith.constant 3 : i32
    cf.br ^bb2(%c3_i32 : i32)
  ^bb1(%0: i32):  // pred: ^bb2
    return %0 : i32
  ^bb2(%1: i32):  // pred: ^bb0
    cf.br ^bb1(%1 : i32)
  }
  func.func @f17(%arg0: !llvm.ptr) -> i32 {
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c4_i32 = arith.constant 4 : i32
    cf.br ^bb2(%c4_i32 : i32)
  ^bb1(%0: i32):  // pred: ^bb2
    return %0 : i32
  ^bb2(%1: i32):  // pred: ^bb0
    cf.br ^bb1(%1 : i32)
  }
  func.func @f18(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb3
  ^bb1(%0: i32):  // pred: ^bb2
    return %0 : i32
  ^bb2(%1: i32):  // pred: ^bb3
    cf.br ^bb1(%1 : i32)
  ^bb3:  // pred: ^bb0
    %c2_i32 = arith.constant 2 : i32
    cf.br ^bb2(%c2_i32 : i32)
  }
  func.func @f19(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb3
  ^bb1(%0: i32):  // pred: ^bb2
    return %0 : i32
  ^bb2(%1: i32):  // pred: ^bb3
    cf.br ^bb1(%1 : i32)
  ^bb3:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c2_i32 = arith.constant 2 : i32
    cf.br ^bb2(%c2_i32 : i32)
  }
  func.func @f20(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb3
  ^bb1(%0: i32):  // pred: ^bb2
    return %0 : i32
  ^bb2(%1: i32):  // pred: ^bb3
    cf.br ^bb1(%1 : i32)
  ^bb3:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c3_i32 = arith.constant 3 : i32
    cf.br ^bb2(%c3_i32 : i32)
  }
  func.func @f21(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb3
  ^bb1(%0: i32):  // pred: ^bb2
    return %0 : i32
  ^bb2(%1: i32):  // pred: ^bb3
    cf.br ^bb1(%1 : i32)
  ^bb3:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c4_i32 = arith.constant 4 : i32
    cf.br ^bb2(%c4_i32 : i32)
  }
  func.func @f22(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb2, ^bb3
  ^bb1:  // pred: ^bb4
    return
  ^bb2:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    cf.br ^bb4
  ^bb3:  // pred: ^bb0
    cf.br ^bb4
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cf.br ^bb1
  }
  func.func @f23(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb2, ^bb3
  ^bb1:  // pred: ^bb4
    return
  ^bb2:  // pred: ^bb0
    cf.br ^bb4
  ^bb3:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    cf.br ^bb4
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cf.br ^bb1
  }
  func.func @f24(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb2, ^bb3
  ^bb1:  // pred: ^bb4
    return
  ^bb2:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    cf.br ^bb4
  ^bb3:  // pred: ^bb0
    cf.br ^bb4
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cf.br ^bb1
  }
  func.func @f25(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%1 : i32)
  ^bb1(%2: i32):  // pred: ^bb2
    return %2 : i32
  ^bb2(%3: i32):  // pred: ^bb0
    cf.br ^bb1(%3 : i32)
  }
  func.func @f26(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%1 : i32)
  ^bb1(%2: i32):  // pred: ^bb2
    return %2 : i32
  ^bb2(%3: i32):  // pred: ^bb0
    cf.br ^bb1(%3 : i32)
  }
  func.func @f27(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%1 : i32)
  ^bb1(%2: i32):  // pred: ^bb2
    return %2 : i32
  ^bb2(%3: i32):  // pred: ^bb0
    cf.br ^bb1(%3 : i32)
  }
  func.func @f28(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %3 = arith.cmpi ne, %2, %c0_i32 : i32
    cf.cond_br %3, ^bb2(%1 : i32), ^bb3(%1 : i32)
  ^bb1(%4: i32):  // pred: ^bb2
    return %4 : i32
  ^bb2(%5: i32):  // 2 preds: ^bb0, ^bb3
    cf.br ^bb1(%5 : i32)
  ^bb3(%6: i32):  // pred: ^bb0
    cf.br ^bb2(%1 : i32)
  }
  func.func @f29(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %3 = arith.cmpi ne, %2, %c0_i32 : i32
    cf.cond_br %3, ^bb2(%1 : i32), ^bb3(%1 : i32)
  ^bb1(%4: i32):  // pred: ^bb2
    return %4 : i32
  ^bb2(%5: i32):  // 2 preds: ^bb0, ^bb3
    cf.br ^bb1(%5 : i32)
  ^bb3(%6: i32):  // pred: ^bb0
    cf.br ^bb2(%1 : i32)
  }
  func.func @f30(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %3 = arith.cmpi ne, %2, %c0_i32 : i32
    cf.cond_br %3, ^bb2(%1 : i32), ^bb3(%1 : i32)
  ^bb1(%4: i32):  // pred: ^bb2
    return %4 : i32
  ^bb2(%5: i32):  // 2 preds: ^bb0, ^bb3
    cf.br ^bb1(%5 : i32)
  ^bb3(%6: i32):  // pred: ^bb0
    cf.br ^bb2(%1 : i32)
  }
  func.func @f31(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %3 = arith.cmpi ne, %2, %c0_i32 : i32
    cf.cond_br %3, ^bb2(%1 : i32), ^bb3(%1 : i32)
  ^bb1(%4: i32):  // pred: ^bb2
    return %4 : i32
  ^bb2(%5: i32):  // 2 preds: ^bb0, ^bb3
    cf.br ^bb1(%5 : i32)
  ^bb3(%6: i32):  // pred: ^bb0
    cf.br ^bb2(%1 : i32)
  }
  func.func @f32(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    cf.switch %2 : i32, [
      default: ^bb2(%1 : i32),
      0: ^bb2(%1 : i32)
    ]
  ^bb1(%3: i32):  // pred: ^bb2
    return %3 : i32
  ^bb2(%4: i32):  // 2 preds: ^bb0, ^bb0
    cf.br ^bb1(%4 : i32)
  }
  func.func @f33(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    cf.switch %2 : i32, [
      default: ^bb2(%1 : i32),
      0: ^bb2(%1 : i32)
    ]
  ^bb1(%3: i32):  // pred: ^bb2
    return %3 : i32
  ^bb2(%4: i32):  // 2 preds: ^bb0, ^bb0
    cf.br ^bb1(%4 : i32)
  }
  func.func @f34(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    cf.switch %2 : i32, [
      default: ^bb2(%1 : i32),
      0: ^bb2(%1 : i32)
    ]
  ^bb1(%3: i32):  // pred: ^bb2
    return %3 : i32
  ^bb2(%4: i32):  // 2 preds: ^bb0, ^bb0
    cf.br ^bb1(%4 : i32)
  }
  func.func @f35(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    cf.switch %2 : i32, [
      default: ^bb2(%1 : i32),
      0: ^bb2(%1 : i32)
    ]
  ^bb1(%3: i32):  // pred: ^bb2
    return %3 : i32
  ^bb2(%4: i32):  // 2 preds: ^bb0, ^bb0
    cf.br ^bb1(%4 : i32)
  }
  func.func @f36(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb1(%1 : i32)
  ^bb1(%2: i32):  // pred: ^bb0
    return %2 : i32
  }
  func.func @f37(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb1(%1 : i32)
  ^bb1(%2: i32):  // pred: ^bb0
    return %2 : i32
  }
  func.func @f38(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb1(%1 : i32)
  ^bb1(%2: i32):  // pred: ^bb0
    return %2 : i32
  }
  func.func @f39(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %3 = llvm.load %0 : !llvm.ptr -> i32
    %4 = llvm.load %1 : !llvm.ptr -> i32
    %5 = llvm.load %2 : !llvm.ptr -> i32
    %6 = call @"3-ary"(%arg0, %3, %4, %5) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb1(%6 : i32)
  ^bb1(%7: i32):  // pred: ^bb0
    return %7 : i32
  }
  func.func @f40(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %3 = llvm.load %0 : !llvm.ptr -> i32
    %4 = llvm.load %1 : !llvm.ptr -> i32
    %5 = llvm.load %2 : !llvm.ptr -> i32
    %6 = call @"3-ary"(%arg0, %3, %4, %5) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb1(%6 : i32)
  ^bb1(%7: i32):  // pred: ^bb0
    return %7 : i32
  }
  func.func @f41(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %3 = llvm.load %0 : !llvm.ptr -> i32
    %4 = llvm.load %1 : !llvm.ptr -> i32
    %5 = llvm.load %2 : !llvm.ptr -> i32
    %6 = call @"3-ary"(%arg0, %3, %4, %5) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb1(%6 : i32)
  ^bb1(%7: i32):  // pred: ^bb0
    return %7 : i32
  }
  func.func @f42(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %3 = llvm.load %0 : !llvm.ptr -> i32
    %4 = llvm.load %1 : !llvm.ptr -> i32
    %5 = llvm.load %2 : !llvm.ptr -> i32
    %6 = call @"3-ary"(%arg0, %3, %4, %5) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb1(%6 : i32)
  ^bb1(%7: i32):  // pred: ^bb0
    return %7 : i32
  }
  func.func @f43(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %3 = llvm.load %0 : !llvm.ptr -> i32
    %4 = llvm.load %1 : !llvm.ptr -> i32
    %5 = llvm.load %2 : !llvm.ptr -> i32
    %6 = call @"3-ary"(%arg0, %3, %4, %5) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb1(%6 : i32)
  ^bb1(%7: i32):  // pred: ^bb0
    return %7 : i32
  }
  func.func @f44(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = "wasm.ctz"(%1) : (i32) -> i32
    cf.br ^bb1(%2 : i32)
  ^bb1(%3: i32):  // pred: ^bb0
    return %3 : i32
  }
  func.func @f45(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = "wasm.ctz"(%1) : (i32) -> i32
    cf.br ^bb1(%2 : i32)
  ^bb1(%3: i32):  // pred: ^bb0
    return %3 : i32
  }
  func.func @f46(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = "wasm.ctz"(%1) : (i32) -> i32
    cf.br ^bb1(%2 : i32)
  ^bb1(%3: i32):  // pred: ^bb0
    return %3 : i32
  }
  func.func @f47(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = "wasm.add"(%1, %2) : (i32, i32) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f48(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = "wasm.add"(%1, %2) : (i32, i32) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f49(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = "wasm.add"(%1, %2) : (i32, i32) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f50(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = "wasm.add"(%1, %2) : (i32, i32) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f51(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = "wasm.eqz"(%1) : (i32) -> i32
    cf.br ^bb1(%2 : i32)
  ^bb1(%3: i32):  // pred: ^bb0
    return %3 : i32
  }
  func.func @f52(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = "wasm.eqz"(%1) : (i32) -> i32
    cf.br ^bb1(%2 : i32)
  ^bb1(%3: i32):  // pred: ^bb0
    return %3 : i32
  }
  func.func @f53(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = "wasm.eqz"(%1) : (i32) -> i32
    cf.br ^bb1(%2 : i32)
  ^bb1(%3: i32):  // pred: ^bb0
    return %3 : i32
  }
  func.func @f54(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = "wasm.ne"(%1, %2) : (i32, i32) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f55(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = "wasm.ne"(%1, %2) : (i32, i32) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f56(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = "wasm.ltu"(%1, %2) : (i32, i32) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f57(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = "wasm.les"(%1, %2) : (i32, i32) -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f58(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = "wasm.mem_grow"(%1, %c0_i32) : (i32, i32) -> i32
    cf.br ^bb1(%2 : i32)
  ^bb1(%3: i32):  // pred: ^bb0
    return %3 : i32
  }
  func.func @f59(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = "wasm.mem_grow"(%1, %c0_i32) : (i32, i32) -> i32
    cf.br ^bb1(%2 : i32)
  ^bb1(%3: i32):  // pred: ^bb0
    return %3 : i32
  }
  func.func @f60(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = "wasm.mem_grow"(%1, %c0_i32) : (i32, i32) -> i32
    cf.br ^bb1(%2 : i32)
  ^bb1(%3: i32):  // pred: ^bb0
    return %3 : i32
  }
  func.func @func(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb1(%2 : i32)
  ^bb1(%3: i32):  // pred: ^bb0
    return %3 : i32
  }
  func.func @f62(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c2_i32 = arith.constant 2 : i32
    llvm.store %c2_i32, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb1(%1 : i32)
  ^bb1(%2: i32):  // pred: ^bb0
    return %2 : i32
  }
  func.func @f63(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c2_i32 = arith.constant 2 : i32
    llvm.store %c2_i32, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb1(%1 : i32)
  ^bb1(%2: i32):  // pred: ^bb0
    return %2 : i32
  }
  func.func @f64(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c2_i32 = arith.constant 2 : i32
    llvm.store %c2_i32, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb1(%1 : i32)
  ^bb1(%2: i32):  // pred: ^bb0
    return %2 : i32
  }
  func.func @f65(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c2_i32 = arith.constant 2 : i32
    llvm.store %c2_i32, %0 : i32, !llvm.ptr
    cf.br ^bb1(%c2_i32 : i32)
  ^bb1(%1: i32):  // pred: ^bb0
    return %1 : i32
  }
  func.func @f66(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c2_i32 = arith.constant 2 : i32
    llvm.store %c2_i32, %0 : i32, !llvm.ptr
    cf.br ^bb1(%c2_i32 : i32)
  ^bb1(%1: i32):  // pred: ^bb0
    return %1 : i32
  }
  func.func @f67(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c2_i32 = arith.constant 2 : i32
    llvm.store %c2_i32, %0 : i32, !llvm.ptr
    cf.br ^bb1(%c2_i32 : i32)
  ^bb1(%1: i32):  // pred: ^bb0
    return %1 : i32
  }
  func.func @f68(%arg0: !llvm.ptr) -> i32 {
    %c2_i32 = arith.constant 2 : i32
    %0 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c2_i32, %1 : i32, !llvm.ptr
    %2 = llvm.load %1 : !llvm.ptr -> i32
    cf.br ^bb1(%2 : i32)
  ^bb1(%3: i32):  // pred: ^bb0
    return %3 : i32
  }
  func.func @f69(%arg0: !llvm.ptr) -> i32 {
    %c2_i32 = arith.constant 2 : i32
    %0 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c2_i32, %1 : i32, !llvm.ptr
    %2 = llvm.load %1 : !llvm.ptr -> i32
    cf.br ^bb1(%2 : i32)
  ^bb1(%3: i32):  // pred: ^bb0
    return %3 : i32
  }
  func.func @f70(%arg0: !llvm.ptr) -> i32 {
    %c2_i32 = arith.constant 2 : i32
    %0 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    llvm.store %c2_i32, %1 : i32, !llvm.ptr
    %2 = llvm.load %1 : !llvm.ptr -> i32
    cf.br ^bb1(%2 : i32)
  ^bb1(%3: i32):  // pred: ^bb0
    return %3 : i32
  }
  func.func @f71(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %2 = arith.extui %1 : i32 to i64
    %3 = arith.addi %2, %c0_i64 : i64
    %4 = llvm.getelementptr %arg0[48] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %6[%3] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %8 = llvm.load %7 : !llvm.ptr -> i32
    cf.br ^bb1(%8 : i32)
  ^bb1(%9: i32):  // pred: ^bb0
    return %9 : i32
  }
  func.func @f72(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %2 = arith.extui %1 : i32 to i64
    %3 = arith.addi %2, %c0_i64 : i64
    %4 = llvm.getelementptr %arg0[48] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %6[%3] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %8 = llvm.load %7 : !llvm.ptr -> i32
    cf.br ^bb1(%8 : i32)
  ^bb1(%9: i32):  // pred: ^bb0
    return %9 : i32
  }
  func.func @f73(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %2 = arith.extui %1 : i32 to i64
    %3 = arith.addi %2, %c0_i64 : i64
    %4 = llvm.getelementptr %arg0[48] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %6[%3] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %8 = llvm.load %7 : !llvm.ptr -> i32
    cf.br ^bb1(%8 : i32)
  ^bb1(%9: i32):  // pred: ^bb0
    return %9 : i32
  }
  func.func @f74(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %4 = arith.extui %2 : i32 to i64
    %5 = arith.addi %4, %c0_i64 : i64
    %6 = llvm.getelementptr %arg0[48] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %8[%5] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    llvm.store %3, %9 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    return
  }
  func.func @f75(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %4 = arith.extui %2 : i32 to i64
    %5 = arith.addi %4, %c0_i64 : i64
    %6 = llvm.getelementptr %arg0[48] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %8[%5] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    llvm.store %3, %9 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    return
  }
  func.func @f76(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %4 = arith.extui %2 : i32 to i64
    %5 = arith.addi %4, %c0_i64 : i64
    %6 = llvm.getelementptr %arg0[48] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %8[%5] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    llvm.store %3, %9 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    return
  }
  func.func @f77(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %4 = arith.extui %2 : i32 to i64
    %5 = arith.addi %4, %c0_i64 : i64
    %6 = llvm.getelementptr %arg0[48] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %8[%5] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    llvm.store %3, %9 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    return
  }
}
