---
source: crates/dora-compiler/src/wasm/tests/static_mem_check.rs
expression: op
snapshot_kind: text
---
module {
  func.func public @"8u_good1"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %4 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %c1_i64 = arith.constant 1 : i64
    %7 = arith.addi %6, %c1_i64 : i64
    %c0_i32 = arith.constant 0 : i32
    %8 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32) : (!llvm.ptr, i32) -> i32
    %9 = arith.extui %8 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %10 = arith.muli %9, %c65536_i64 : i64
    %11 = arith.cmpi ult, %7, %10 : i64
    cf.cond_br %11, ^bb3, ^bb4
  ^bb2(%12: i32):  // pred: ^bb3
    return %12 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %13 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %14 = llvm.load volatile %13 {alignment = 1 : i64} : !llvm.ptr -> i8
    %15 = arith.extui %14 : i8 to i32
    cf.br ^bb2(%15 : i32)
  ^bb4:  // pred: ^bb1
    %c1_i32_0 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_0) : (i32) -> ()
    cf.br ^bb3
  }
  func.func public @"8u_good2"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %4 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %c1_i64 = arith.constant 1 : i64
    %7 = arith.addi %6, %c1_i64 : i64
    %c0_i32 = arith.constant 0 : i32
    %8 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32) : (!llvm.ptr, i32) -> i32
    %9 = arith.extui %8 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %10 = arith.muli %9, %c65536_i64 : i64
    %11 = arith.cmpi ult, %7, %10 : i64
    cf.cond_br %11, ^bb3, ^bb4
  ^bb2(%12: i32):  // pred: ^bb3
    return %12 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %13 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %14 = llvm.load volatile %13 {alignment = 1 : i64} : !llvm.ptr -> i8
    %15 = arith.extui %14 : i8 to i32
    cf.br ^bb2(%15 : i32)
  ^bb4:  // pred: ^bb1
    %c1_i32_0 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_0) : (i32) -> ()
    cf.br ^bb3
  }
  func.func public @"8u_good3"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %5 = arith.extui %4 : i32 to i64
    %6 = arith.addi %5, %c1_i64 : i64
    %c1_i64_0 = arith.constant 1 : i64
    %7 = arith.addi %6, %c1_i64_0 : i64
    %c0_i32 = arith.constant 0 : i32
    %8 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32) : (!llvm.ptr, i32) -> i32
    %9 = arith.extui %8 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %10 = arith.muli %9, %c65536_i64 : i64
    %11 = arith.cmpi ult, %7, %10 : i64
    cf.cond_br %11, ^bb3, ^bb4
  ^bb2(%12: i32):  // pred: ^bb3
    return %12 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %13 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %14 = llvm.load volatile %13 {alignment = 1 : i64} : !llvm.ptr -> i8
    %15 = arith.extui %14 : i8 to i32
    cf.br ^bb2(%15 : i32)
  ^bb4:  // pred: ^bb1
    %c1_i32_1 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1) : (i32) -> ()
    cf.br ^bb3
  }
  func.func public @"8u_good4"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c2_i64 = arith.constant 2 : i64
    %5 = arith.extui %4 : i32 to i64
    %6 = arith.addi %5, %c2_i64 : i64
    %c1_i64 = arith.constant 1 : i64
    %7 = arith.addi %6, %c1_i64 : i64
    %c0_i32 = arith.constant 0 : i32
    %8 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32) : (!llvm.ptr, i32) -> i32
    %9 = arith.extui %8 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %10 = arith.muli %9, %c65536_i64 : i64
    %11 = arith.cmpi ult, %7, %10 : i64
    cf.cond_br %11, ^bb3, ^bb4
  ^bb2(%12: i32):  // pred: ^bb3
    return %12 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %13 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %14 = llvm.load volatile %13 {alignment = 1 : i64} : !llvm.ptr -> i8
    %15 = arith.extui %14 : i8 to i32
    cf.br ^bb2(%15 : i32)
  ^bb4:  // pred: ^bb1
    %c1_i32_0 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_0) : (i32) -> ()
    cf.br ^bb3
  }
  func.func public @"8u_good5"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c25_i64 = arith.constant 25 : i64
    %5 = arith.extui %4 : i32 to i64
    %6 = arith.addi %5, %c25_i64 : i64
    %c1_i64 = arith.constant 1 : i64
    %7 = arith.addi %6, %c1_i64 : i64
    %c0_i32 = arith.constant 0 : i32
    %8 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32) : (!llvm.ptr, i32) -> i32
    %9 = arith.extui %8 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %10 = arith.muli %9, %c65536_i64 : i64
    %11 = arith.cmpi ult, %7, %10 : i64
    cf.cond_br %11, ^bb3, ^bb4
  ^bb2(%12: i32):  // pred: ^bb3
    return %12 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %13 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %14 = llvm.load volatile %13 {alignment = 1 : i64} : !llvm.ptr -> i8
    %15 = arith.extui %14 : i8 to i32
    cf.br ^bb2(%15 : i32)
  ^bb4:  // pred: ^bb1
    %c1_i32_0 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_0) : (i32) -> ()
    cf.br ^bb3
  }
  func.func public @"8s_good1"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %4 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %c1_i64 = arith.constant 1 : i64
    %7 = arith.addi %6, %c1_i64 : i64
    %c0_i32 = arith.constant 0 : i32
    %8 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32) : (!llvm.ptr, i32) -> i32
    %9 = arith.extui %8 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %10 = arith.muli %9, %c65536_i64 : i64
    %11 = arith.cmpi ult, %7, %10 : i64
    cf.cond_br %11, ^bb3, ^bb4
  ^bb2(%12: i32):  // pred: ^bb3
    return %12 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %13 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %14 = llvm.load volatile %13 {alignment = 1 : i64} : !llvm.ptr -> i8
    %15 = arith.extsi %14 : i8 to i32
    cf.br ^bb2(%15 : i32)
  ^bb4:  // pred: ^bb1
    %c1_i32_0 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_0) : (i32) -> ()
    cf.br ^bb3
  }
  func.func public @"8s_good2"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %4 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %c1_i64 = arith.constant 1 : i64
    %7 = arith.addi %6, %c1_i64 : i64
    %c0_i32 = arith.constant 0 : i32
    %8 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32) : (!llvm.ptr, i32) -> i32
    %9 = arith.extui %8 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %10 = arith.muli %9, %c65536_i64 : i64
    %11 = arith.cmpi ult, %7, %10 : i64
    cf.cond_br %11, ^bb3, ^bb4
  ^bb2(%12: i32):  // pred: ^bb3
    return %12 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %13 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %14 = llvm.load volatile %13 {alignment = 1 : i64} : !llvm.ptr -> i8
    %15 = arith.extsi %14 : i8 to i32
    cf.br ^bb2(%15 : i32)
  ^bb4:  // pred: ^bb1
    %c1_i32_0 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_0) : (i32) -> ()
    cf.br ^bb3
  }
  func.func public @"8s_good3"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %5 = arith.extui %4 : i32 to i64
    %6 = arith.addi %5, %c1_i64 : i64
    %c1_i64_0 = arith.constant 1 : i64
    %7 = arith.addi %6, %c1_i64_0 : i64
    %c0_i32 = arith.constant 0 : i32
    %8 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32) : (!llvm.ptr, i32) -> i32
    %9 = arith.extui %8 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %10 = arith.muli %9, %c65536_i64 : i64
    %11 = arith.cmpi ult, %7, %10 : i64
    cf.cond_br %11, ^bb3, ^bb4
  ^bb2(%12: i32):  // pred: ^bb3
    return %12 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %13 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %14 = llvm.load volatile %13 {alignment = 1 : i64} : !llvm.ptr -> i8
    %15 = arith.extsi %14 : i8 to i32
    cf.br ^bb2(%15 : i32)
  ^bb4:  // pred: ^bb1
    %c1_i32_1 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1) : (i32) -> ()
    cf.br ^bb3
  }
  func.func public @"8s_good4"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c2_i64 = arith.constant 2 : i64
    %5 = arith.extui %4 : i32 to i64
    %6 = arith.addi %5, %c2_i64 : i64
    %c1_i64 = arith.constant 1 : i64
    %7 = arith.addi %6, %c1_i64 : i64
    %c0_i32 = arith.constant 0 : i32
    %8 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32) : (!llvm.ptr, i32) -> i32
    %9 = arith.extui %8 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %10 = arith.muli %9, %c65536_i64 : i64
    %11 = arith.cmpi ult, %7, %10 : i64
    cf.cond_br %11, ^bb3, ^bb4
  ^bb2(%12: i32):  // pred: ^bb3
    return %12 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %13 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %14 = llvm.load volatile %13 {alignment = 1 : i64} : !llvm.ptr -> i8
    %15 = arith.extsi %14 : i8 to i32
    cf.br ^bb2(%15 : i32)
  ^bb4:  // pred: ^bb1
    %c1_i32_0 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_0) : (i32) -> ()
    cf.br ^bb3
  }
  func.func public @"8s_good5"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c25_i64 = arith.constant 25 : i64
    %5 = arith.extui %4 : i32 to i64
    %6 = arith.addi %5, %c25_i64 : i64
    %c1_i64 = arith.constant 1 : i64
    %7 = arith.addi %6, %c1_i64 : i64
    %c0_i32 = arith.constant 0 : i32
    %8 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32) : (!llvm.ptr, i32) -> i32
    %9 = arith.extui %8 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %10 = arith.muli %9, %c65536_i64 : i64
    %11 = arith.cmpi ult, %7, %10 : i64
    cf.cond_br %11, ^bb3, ^bb4
  ^bb2(%12: i32):  // pred: ^bb3
    return %12 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %13 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %14 = llvm.load volatile %13 {alignment = 1 : i64} : !llvm.ptr -> i8
    %15 = arith.extsi %14 : i8 to i32
    cf.br ^bb2(%15 : i32)
  ^bb4:  // pred: ^bb1
    %c1_i32_0 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_0) : (i32) -> ()
    cf.br ^bb3
  }
  func.func public @"16u_good1"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %4 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %c2_i64 = arith.constant 2 : i64
    %7 = arith.addi %6, %c2_i64 : i64
    %c0_i32 = arith.constant 0 : i32
    %8 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32) : (!llvm.ptr, i32) -> i32
    %9 = arith.extui %8 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %10 = arith.muli %9, %c65536_i64 : i64
    %11 = arith.cmpi ult, %7, %10 : i64
    cf.cond_br %11, ^bb3, ^bb4
  ^bb2(%12: i32):  // pred: ^bb3
    return %12 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %13 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %14 = llvm.load volatile %13 {alignment = 1 : i64} : !llvm.ptr -> i16
    %15 = arith.extui %14 : i16 to i32
    cf.br ^bb2(%15 : i32)
  ^bb4:  // pred: ^bb1
    %c1_i32_0 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_0) : (i32) -> ()
    cf.br ^bb3
  }
  func.func public @"16u_good2"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %4 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %c2_i64 = arith.constant 2 : i64
    %7 = arith.addi %6, %c2_i64 : i64
    %c0_i32 = arith.constant 0 : i32
    %8 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32) : (!llvm.ptr, i32) -> i32
    %9 = arith.extui %8 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %10 = arith.muli %9, %c65536_i64 : i64
    %11 = arith.cmpi ult, %7, %10 : i64
    cf.cond_br %11, ^bb3, ^bb4
  ^bb2(%12: i32):  // pred: ^bb3
    return %12 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %13 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %14 = llvm.load volatile %13 {alignment = 1 : i64} : !llvm.ptr -> i16
    %15 = arith.extui %14 : i16 to i32
    cf.br ^bb2(%15 : i32)
  ^bb4:  // pred: ^bb1
    %c1_i32_0 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_0) : (i32) -> ()
    cf.br ^bb3
  }
  func.func public @"16u_good3"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %5 = arith.extui %4 : i32 to i64
    %6 = arith.addi %5, %c1_i64 : i64
    %c2_i64 = arith.constant 2 : i64
    %7 = arith.addi %6, %c2_i64 : i64
    %c0_i32 = arith.constant 0 : i32
    %8 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32) : (!llvm.ptr, i32) -> i32
    %9 = arith.extui %8 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %10 = arith.muli %9, %c65536_i64 : i64
    %11 = arith.cmpi ult, %7, %10 : i64
    cf.cond_br %11, ^bb3, ^bb4
  ^bb2(%12: i32):  // pred: ^bb3
    return %12 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %13 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %14 = llvm.load volatile %13 {alignment = 1 : i64} : !llvm.ptr -> i16
    %15 = arith.extui %14 : i16 to i32
    cf.br ^bb2(%15 : i32)
  ^bb4:  // pred: ^bb1
    %c1_i32_0 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_0) : (i32) -> ()
    cf.br ^bb3
  }
  func.func public @"16u_good4"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c2_i64 = arith.constant 2 : i64
    %5 = arith.extui %4 : i32 to i64
    %6 = arith.addi %5, %c2_i64 : i64
    %c2_i64_0 = arith.constant 2 : i64
    %7 = arith.addi %6, %c2_i64_0 : i64
    %c0_i32 = arith.constant 0 : i32
    %8 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32) : (!llvm.ptr, i32) -> i32
    %9 = arith.extui %8 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %10 = arith.muli %9, %c65536_i64 : i64
    %11 = arith.cmpi ult, %7, %10 : i64
    cf.cond_br %11, ^bb3, ^bb4
  ^bb2(%12: i32):  // pred: ^bb3
    return %12 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %13 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %14 = llvm.load volatile %13 {alignment = 1 : i64} : !llvm.ptr -> i16
    %15 = arith.extui %14 : i16 to i32
    cf.br ^bb2(%15 : i32)
  ^bb4:  // pred: ^bb1
    %c1_i32_1 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1) : (i32) -> ()
    cf.br ^bb3
  }
  func.func public @"16u_good5"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c25_i64 = arith.constant 25 : i64
    %5 = arith.extui %4 : i32 to i64
    %6 = arith.addi %5, %c25_i64 : i64
    %c2_i64 = arith.constant 2 : i64
    %7 = arith.addi %6, %c2_i64 : i64
    %c0_i32 = arith.constant 0 : i32
    %8 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32) : (!llvm.ptr, i32) -> i32
    %9 = arith.extui %8 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %10 = arith.muli %9, %c65536_i64 : i64
    %11 = arith.cmpi ult, %7, %10 : i64
    cf.cond_br %11, ^bb3, ^bb4
  ^bb2(%12: i32):  // pred: ^bb3
    return %12 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %13 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %14 = llvm.load volatile %13 {alignment = 1 : i64} : !llvm.ptr -> i16
    %15 = arith.extui %14 : i16 to i32
    cf.br ^bb2(%15 : i32)
  ^bb4:  // pred: ^bb1
    %c1_i32_0 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_0) : (i32) -> ()
    cf.br ^bb3
  }
  func.func public @"16s_good1"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %4 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %c2_i64 = arith.constant 2 : i64
    %7 = arith.addi %6, %c2_i64 : i64
    %c0_i32 = arith.constant 0 : i32
    %8 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32) : (!llvm.ptr, i32) -> i32
    %9 = arith.extui %8 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %10 = arith.muli %9, %c65536_i64 : i64
    %11 = arith.cmpi ult, %7, %10 : i64
    cf.cond_br %11, ^bb3, ^bb4
  ^bb2(%12: i32):  // pred: ^bb3
    return %12 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %13 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %14 = llvm.load volatile %13 {alignment = 1 : i64} : !llvm.ptr -> i16
    %15 = arith.extsi %14 : i16 to i32
    cf.br ^bb2(%15 : i32)
  ^bb4:  // pred: ^bb1
    %c1_i32_0 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_0) : (i32) -> ()
    cf.br ^bb3
  }
  func.func public @"16s_good2"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %4 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %c2_i64 = arith.constant 2 : i64
    %7 = arith.addi %6, %c2_i64 : i64
    %c0_i32 = arith.constant 0 : i32
    %8 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32) : (!llvm.ptr, i32) -> i32
    %9 = arith.extui %8 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %10 = arith.muli %9, %c65536_i64 : i64
    %11 = arith.cmpi ult, %7, %10 : i64
    cf.cond_br %11, ^bb3, ^bb4
  ^bb2(%12: i32):  // pred: ^bb3
    return %12 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %13 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %14 = llvm.load volatile %13 {alignment = 1 : i64} : !llvm.ptr -> i16
    %15 = arith.extsi %14 : i16 to i32
    cf.br ^bb2(%15 : i32)
  ^bb4:  // pred: ^bb1
    %c1_i32_0 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_0) : (i32) -> ()
    cf.br ^bb3
  }
  func.func public @"16s_good3"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %5 = arith.extui %4 : i32 to i64
    %6 = arith.addi %5, %c1_i64 : i64
    %c2_i64 = arith.constant 2 : i64
    %7 = arith.addi %6, %c2_i64 : i64
    %c0_i32 = arith.constant 0 : i32
    %8 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32) : (!llvm.ptr, i32) -> i32
    %9 = arith.extui %8 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %10 = arith.muli %9, %c65536_i64 : i64
    %11 = arith.cmpi ult, %7, %10 : i64
    cf.cond_br %11, ^bb3, ^bb4
  ^bb2(%12: i32):  // pred: ^bb3
    return %12 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %13 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %14 = llvm.load volatile %13 {alignment = 1 : i64} : !llvm.ptr -> i16
    %15 = arith.extsi %14 : i16 to i32
    cf.br ^bb2(%15 : i32)
  ^bb4:  // pred: ^bb1
    %c1_i32_0 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_0) : (i32) -> ()
    cf.br ^bb3
  }
  func.func public @"16s_good4"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c2_i64 = arith.constant 2 : i64
    %5 = arith.extui %4 : i32 to i64
    %6 = arith.addi %5, %c2_i64 : i64
    %c2_i64_0 = arith.constant 2 : i64
    %7 = arith.addi %6, %c2_i64_0 : i64
    %c0_i32 = arith.constant 0 : i32
    %8 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32) : (!llvm.ptr, i32) -> i32
    %9 = arith.extui %8 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %10 = arith.muli %9, %c65536_i64 : i64
    %11 = arith.cmpi ult, %7, %10 : i64
    cf.cond_br %11, ^bb3, ^bb4
  ^bb2(%12: i32):  // pred: ^bb3
    return %12 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %13 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %14 = llvm.load volatile %13 {alignment = 1 : i64} : !llvm.ptr -> i16
    %15 = arith.extsi %14 : i16 to i32
    cf.br ^bb2(%15 : i32)
  ^bb4:  // pred: ^bb1
    %c1_i32_1 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1) : (i32) -> ()
    cf.br ^bb3
  }
  func.func public @"16s_good5"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c25_i64 = arith.constant 25 : i64
    %5 = arith.extui %4 : i32 to i64
    %6 = arith.addi %5, %c25_i64 : i64
    %c2_i64 = arith.constant 2 : i64
    %7 = arith.addi %6, %c2_i64 : i64
    %c0_i32 = arith.constant 0 : i32
    %8 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32) : (!llvm.ptr, i32) -> i32
    %9 = arith.extui %8 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %10 = arith.muli %9, %c65536_i64 : i64
    %11 = arith.cmpi ult, %7, %10 : i64
    cf.cond_br %11, ^bb3, ^bb4
  ^bb2(%12: i32):  // pred: ^bb3
    return %12 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %13 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %14 = llvm.load volatile %13 {alignment = 1 : i64} : !llvm.ptr -> i16
    %15 = arith.extsi %14 : i16 to i32
    cf.br ^bb2(%15 : i32)
  ^bb4:  // pred: ^bb1
    %c1_i32_0 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_0) : (i32) -> ()
    cf.br ^bb3
  }
  func.func public @"32_good1"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %4 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %7 = arith.addi %6, %c4_i64 : i64
    %c0_i32 = arith.constant 0 : i32
    %8 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32) : (!llvm.ptr, i32) -> i32
    %9 = arith.extui %8 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %10 = arith.muli %9, %c65536_i64 : i64
    %11 = arith.cmpi ult, %7, %10 : i64
    cf.cond_br %11, ^bb3, ^bb4
  ^bb2(%12: i32):  // pred: ^bb3
    return %12 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %13 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %14 = llvm.load volatile %13 {alignment = 1 : i64} : !llvm.ptr -> i32
    cf.br ^bb2(%14 : i32)
  ^bb4:  // pred: ^bb1
    %c1_i32_0 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_0) : (i32) -> ()
    cf.br ^bb3
  }
  func.func public @"32_good2"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %4 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %7 = arith.addi %6, %c4_i64 : i64
    %c0_i32 = arith.constant 0 : i32
    %8 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32) : (!llvm.ptr, i32) -> i32
    %9 = arith.extui %8 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %10 = arith.muli %9, %c65536_i64 : i64
    %11 = arith.cmpi ult, %7, %10 : i64
    cf.cond_br %11, ^bb3, ^bb4
  ^bb2(%12: i32):  // pred: ^bb3
    return %12 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %13 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %14 = llvm.load volatile %13 {alignment = 1 : i64} : !llvm.ptr -> i32
    cf.br ^bb2(%14 : i32)
  ^bb4:  // pred: ^bb1
    %c1_i32_0 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_0) : (i32) -> ()
    cf.br ^bb3
  }
  func.func public @"32_good3"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %5 = arith.extui %4 : i32 to i64
    %6 = arith.addi %5, %c1_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %7 = arith.addi %6, %c4_i64 : i64
    %c0_i32 = arith.constant 0 : i32
    %8 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32) : (!llvm.ptr, i32) -> i32
    %9 = arith.extui %8 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %10 = arith.muli %9, %c65536_i64 : i64
    %11 = arith.cmpi ult, %7, %10 : i64
    cf.cond_br %11, ^bb3, ^bb4
  ^bb2(%12: i32):  // pred: ^bb3
    return %12 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %13 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %14 = llvm.load volatile %13 {alignment = 1 : i64} : !llvm.ptr -> i32
    cf.br ^bb2(%14 : i32)
  ^bb4:  // pred: ^bb1
    %c1_i32_0 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_0) : (i32) -> ()
    cf.br ^bb3
  }
  func.func public @"32_good4"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c2_i64 = arith.constant 2 : i64
    %5 = arith.extui %4 : i32 to i64
    %6 = arith.addi %5, %c2_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %7 = arith.addi %6, %c4_i64 : i64
    %c0_i32 = arith.constant 0 : i32
    %8 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32) : (!llvm.ptr, i32) -> i32
    %9 = arith.extui %8 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %10 = arith.muli %9, %c65536_i64 : i64
    %11 = arith.cmpi ult, %7, %10 : i64
    cf.cond_br %11, ^bb3, ^bb4
  ^bb2(%12: i32):  // pred: ^bb3
    return %12 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %13 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %14 = llvm.load volatile %13 {alignment = 1 : i64} : !llvm.ptr -> i32
    cf.br ^bb2(%14 : i32)
  ^bb4:  // pred: ^bb1
    %c1_i32_0 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_0) : (i32) -> ()
    cf.br ^bb3
  }
  func.func public @"32_good5"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c25_i64 = arith.constant 25 : i64
    %5 = arith.extui %4 : i32 to i64
    %6 = arith.addi %5, %c25_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %7 = arith.addi %6, %c4_i64 : i64
    %c0_i32 = arith.constant 0 : i32
    %8 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32) : (!llvm.ptr, i32) -> i32
    %9 = arith.extui %8 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %10 = arith.muli %9, %c65536_i64 : i64
    %11 = arith.cmpi ult, %7, %10 : i64
    cf.cond_br %11, ^bb3, ^bb4
  ^bb2(%12: i32):  // pred: ^bb3
    return %12 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %13 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %14 = llvm.load volatile %13 {alignment = 1 : i64} : !llvm.ptr -> i32
    cf.br ^bb2(%14 : i32)
  ^bb4:  // pred: ^bb1
    %c1_i32_0 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_0) : (i32) -> ()
    cf.br ^bb3
  }
  func.func public @"8u_bad"(%arg0: !llvm.ptr, %arg1: i32) attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c4294967295_i64 = arith.constant 4294967295 : i64
    %5 = arith.extui %4 : i32 to i64
    %6 = arith.addi %5, %c4294967295_i64 : i64
    %c1_i64 = arith.constant 1 : i64
    %7 = arith.addi %6, %c1_i64 : i64
    %c0_i32 = arith.constant 0 : i32
    %8 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32) : (!llvm.ptr, i32) -> i32
    %9 = arith.extui %8 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %10 = arith.muli %9, %c65536_i64 : i64
    %11 = arith.cmpi ult, %7, %10 : i64
    cf.cond_br %11, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %12 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %13 = llvm.load volatile %12 {alignment = 1 : i64} : !llvm.ptr -> i8
    %14 = arith.extui %13 : i8 to i32
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %c1_i32_0 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_0) : (i32) -> ()
    cf.br ^bb3
  }
  func.func public @"8s_bad"(%arg0: !llvm.ptr, %arg1: i32) attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c4294967295_i64 = arith.constant 4294967295 : i64
    %5 = arith.extui %4 : i32 to i64
    %6 = arith.addi %5, %c4294967295_i64 : i64
    %c1_i64 = arith.constant 1 : i64
    %7 = arith.addi %6, %c1_i64 : i64
    %c0_i32 = arith.constant 0 : i32
    %8 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32) : (!llvm.ptr, i32) -> i32
    %9 = arith.extui %8 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %10 = arith.muli %9, %c65536_i64 : i64
    %11 = arith.cmpi ult, %7, %10 : i64
    cf.cond_br %11, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %12 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %13 = llvm.load volatile %12 {alignment = 1 : i64} : !llvm.ptr -> i8
    %14 = arith.extsi %13 : i8 to i32
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %c1_i32_0 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_0) : (i32) -> ()
    cf.br ^bb3
  }
  func.func public @"16u_bad"(%arg0: !llvm.ptr, %arg1: i32) attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c4294967295_i64 = arith.constant 4294967295 : i64
    %5 = arith.extui %4 : i32 to i64
    %6 = arith.addi %5, %c4294967295_i64 : i64
    %c2_i64 = arith.constant 2 : i64
    %7 = arith.addi %6, %c2_i64 : i64
    %c0_i32 = arith.constant 0 : i32
    %8 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32) : (!llvm.ptr, i32) -> i32
    %9 = arith.extui %8 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %10 = arith.muli %9, %c65536_i64 : i64
    %11 = arith.cmpi ult, %7, %10 : i64
    cf.cond_br %11, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %12 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %13 = llvm.load volatile %12 {alignment = 1 : i64} : !llvm.ptr -> i16
    %14 = arith.extui %13 : i16 to i32
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %c1_i32_0 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_0) : (i32) -> ()
    cf.br ^bb3
  }
  func.func public @"16s_bad"(%arg0: !llvm.ptr, %arg1: i32) attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c4294967295_i64 = arith.constant 4294967295 : i64
    %5 = arith.extui %4 : i32 to i64
    %6 = arith.addi %5, %c4294967295_i64 : i64
    %c2_i64 = arith.constant 2 : i64
    %7 = arith.addi %6, %c2_i64 : i64
    %c0_i32 = arith.constant 0 : i32
    %8 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32) : (!llvm.ptr, i32) -> i32
    %9 = arith.extui %8 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %10 = arith.muli %9, %c65536_i64 : i64
    %11 = arith.cmpi ult, %7, %10 : i64
    cf.cond_br %11, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %12 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %13 = llvm.load volatile %12 {alignment = 1 : i64} : !llvm.ptr -> i16
    %14 = arith.extsi %13 : i16 to i32
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %c1_i32_0 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_0) : (i32) -> ()
    cf.br ^bb3
  }
  func.func public @"32_bad"(%arg0: !llvm.ptr, %arg1: i32) attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c4294967295_i64 = arith.constant 4294967295 : i64
    %5 = arith.extui %4 : i32 to i64
    %6 = arith.addi %5, %c4294967295_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %7 = arith.addi %6, %c4_i64 : i64
    %c0_i32 = arith.constant 0 : i32
    %8 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32) : (!llvm.ptr, i32) -> i32
    %9 = arith.extui %8 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %10 = arith.muli %9, %c65536_i64 : i64
    %11 = arith.cmpi ult, %7, %10 : i64
    cf.cond_br %11, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %12 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %13 = llvm.load volatile %12 {alignment = 1 : i64} : !llvm.ptr -> i32
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %c1_i32_0 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_0) : (i32) -> ()
    cf.br ^bb3
  }
  func.func private @dora_fn_wasm_table_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_copy(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_fill(!llvm.ptr, i32, i32, !llvm.ptr, i32)
  func.func private @dora_fn_wasm_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_table_set(!llvm.ptr, i32, i32, !llvm.ptr)
  func.func private @dora_fn_wasm_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_imported_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_func_ref(!llvm.ptr, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_data_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_elem_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_raise_trap(i32)
  func.func private @dora_fn_wasm_gas_limit() -> i64
}
