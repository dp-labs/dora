---
source: crates/dora-compiler/src/wasm/tests/conversion.rs
expression: op
snapshot_kind: text
---
module {
  func.func @dummy(%arg0: !llvm.ptr) {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f1(%arg0: !llvm.ptr) {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func public @export_f(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f(%arg0: !llvm.ptr) {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func public @g(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f5(%arg0: !llvm.ptr) {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f6(%arg0: !llvm.ptr) {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f7(%arg0: !llvm.ptr) {
    %c0_i32 = arith.constant 0 : i32
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f8(%arg0: !llvm.ptr) {
    %c0_i32 = arith.constant 0 : i32
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f9(%arg0: !llvm.ptr) {
    %c0_i32 = arith.constant 0 : i32
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    %cst = arith.constant 0.000000e+00 : f64
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x f64 : (i64) -> !llvm.ptr
    llvm.store %cst, %1 : f64, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i64 : (i64) -> !llvm.ptr
    llvm.store %c0_i64, %2 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f10(%arg0: !llvm.ptr) {
    %c0_i32 = arith.constant 0 : i32
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    %cst = arith.constant 0.000000e+00 : f64
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x f64 : (i64) -> !llvm.ptr
    llvm.store %cst, %1 : f64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f11(%arg0: !llvm.ptr) {
    %c0_i32 = arith.constant 0 : i32
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    %cst = arith.constant 0.000000e+00 : f32
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x f32 : (i64) -> !llvm.ptr
    llvm.store %cst, %1 : f32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i64 : (i64) -> !llvm.ptr
    llvm.store %c0_i64, %2 : i64, !llvm.ptr
    %c0_i32_2 = arith.constant 0 : i32
    %c1_i64_3 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_3 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32_2, %3 : i32, !llvm.ptr
    %cst_4 = arith.constant 0.000000e+00 : f64
    %c1_i64_5 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_5 x f64 : (i64) -> !llvm.ptr
    llvm.store %cst_4, %4 : f64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f12(%arg0: !llvm.ptr) {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f13(%arg0: !llvm.ptr) {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f14(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f15(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f16(%arg0: !llvm.ptr, %arg1: i32, %arg2: f64, %arg3: i64) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : f64, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f17(%arg0: !llvm.ptr, %arg1: i32, %arg2: f64) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : f64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f18(%arg0: !llvm.ptr, %arg1: i32, %arg2: f32, %arg3: i64, %arg4: i32, %arg5: f64) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : f32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i64, !llvm.ptr
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg5, %4 : f64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f19(%arg0: !llvm.ptr) {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f20(%arg0: !llvm.ptr) {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f21(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    llvm.unreachable
  ^bb2(%0: i32):  // no predecessors
    return %0 : i32
  }
  func.func @f22(%arg0: !llvm.ptr) -> (i32, f64, f32) {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    llvm.unreachable
  ^bb2(%0: i32, %1: f64, %2: f32):  // no predecessors
    return %0, %1, %2 : i32, f64, f32
  }
  func.func @f23(%arg0: !llvm.ptr) -> (i32, f64) {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    llvm.unreachable
  ^bb2(%0: i32, %1: f64):  // no predecessors
    return %0, %1 : i32, f64
  }
  func.func @f24(%arg0: !llvm.ptr) -> (i32, f32, i64, i32, f64) {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    llvm.unreachable
  ^bb2(%0: i32, %1: f32, %2: i64, %3: i32, %4: f64):  // no predecessors
    return %0, %1, %2, %3, %4 : i32, f32, i64, i32, f64
  }
  func.func public @"type-use-1"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func public @"type-use-2"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func public @"type-use-3"(%arg0: !llvm.ptr, %arg1: i32) attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func public @"type-use-4"(%arg0: !llvm.ptr, %arg1: i32, %arg2: f64, %arg3: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : f64, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32 : i32)
  ^bb2(%3: i32):  // pred: ^bb1
    return %3 : i32
  }
  func.func public @"type-use-5"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func public @"type-use-6"(%arg0: !llvm.ptr, %arg1: i32) attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func public @"type-use-7"(%arg0: !llvm.ptr, %arg1: i32, %arg2: f64, %arg3: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : f64, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32 : i32)
  ^bb2(%3: i32):  // pred: ^bb1
    return %3 : i32
  }
  func.func @f32(%arg0: !llvm.ptr) {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f33(%arg0: !llvm.ptr) {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @complex(%arg0: !llvm.ptr, %arg1: i32, %arg2: f32, %arg3: i64, %arg4: i32) -> (i32, i64, i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : f32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i64, !llvm.ptr
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %cst = arith.constant 0.000000e+00 : f32
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x f32 : (i64) -> !llvm.ptr
    llvm.store %cst, %4 : f32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_4 = arith.constant 1 : i64
    %5 = llvm.alloca %c1_i64_4 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i64_5 = arith.constant 1 : i64
    %6 = llvm.alloca %c1_i64_5 x i64 : (i64) -> !llvm.ptr
    llvm.store %c0_i64, %6 : i64, !llvm.ptr
    %c0_i32_6 = arith.constant 0 : i32
    %c1_i64_7 = arith.constant 1 : i64
    %7 = llvm.alloca %c1_i64_7 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32_6, %7 : i32, !llvm.ptr
    %cst_8 = arith.constant 0.000000e+00 : f64
    %c1_i64_9 = arith.constant 1 : i64
    %8 = llvm.alloca %c1_i64_9 x f64 : (i64) -> !llvm.ptr
    llvm.store %cst_8, %8 : f64, !llvm.ptr
    %c0_i32_10 = arith.constant 0 : i32
    %c1_i64_11 = arith.constant 1 : i64
    %9 = llvm.alloca %c1_i64_11 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32_10, %9 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    llvm.unreachable
  ^bb2(%10: i32, %11: i64, %12: i32):  // no predecessors
    return %10, %11, %12 : i32, i64, i32
  }
  func.func @"complex-sig"(%arg0: !llvm.ptr) {
    %cst = arith.constant 0.000000e+00 : f32
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f32 : (i64) -> !llvm.ptr
    llvm.store %cst, %0 : f32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i64 : (i64) -> !llvm.ptr
    llvm.store %c0_i64, %2 : i64, !llvm.ptr
    %c0_i32_2 = arith.constant 0 : i32
    %c1_i64_3 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_3 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32_2, %3 : i32, !llvm.ptr
    %cst_4 = arith.constant 0.000000e+00 : f64
    %c1_i64_5 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_5 x f64 : (i64) -> !llvm.ptr
    llvm.store %cst_4, %4 : f64, !llvm.ptr
    %c0_i32_6 = arith.constant 0 : i32
    %c1_i64_7 = arith.constant 1 : i64
    %5 = llvm.alloca %c1_i64_7 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32_6, %5 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func public @"local-first-i32"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %c0_i32 = arith.constant 0 : i32
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%2 : i32)
  ^bb2(%3: i32):  // pred: ^bb1
    return %3 : i32
  }
  func.func public @"local-first-i64"(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    %c0_i64 = arith.constant 0 : i64
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %c0_i64, %0 : i64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i64 : (i64) -> !llvm.ptr
    llvm.store %c0_i64, %1 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i64
    cf.br ^bb2(%2 : i64)
  ^bb2(%3: i64):  // pred: ^bb1
    return %3 : i64
  }
  func.func public @"local-first-f32"(%arg0: !llvm.ptr) -> f32 attributes {llvm.emit_c_interface} {
    %cst = arith.constant 0.000000e+00 : f32
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f32 : (i64) -> !llvm.ptr
    llvm.store %cst, %0 : f32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x f32 : (i64) -> !llvm.ptr
    llvm.store %cst, %1 : f32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> f32
    cf.br ^bb2(%2 : f32)
  ^bb2(%3: f32):  // pred: ^bb1
    return %3 : f32
  }
  func.func public @"local-first-f64"(%arg0: !llvm.ptr) -> f64 attributes {llvm.emit_c_interface} {
    %cst = arith.constant 0.000000e+00 : f64
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f64 : (i64) -> !llvm.ptr
    llvm.store %cst, %0 : f64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x f64 : (i64) -> !llvm.ptr
    llvm.store %cst, %1 : f64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> f64
    cf.br ^bb2(%2 : f64)
  ^bb2(%3: f64):  // pred: ^bb1
    return %3 : f64
  }
  func.func public @"local-second-i32"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %c0_i32 = arith.constant 0 : i32
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %1 : !llvm.ptr -> i32
    cf.br ^bb2(%2 : i32)
  ^bb2(%3: i32):  // pred: ^bb1
    return %3 : i32
  }
  func.func public @"local-second-i64"(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    %c0_i64 = arith.constant 0 : i64
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %c0_i64, %0 : i64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i64 : (i64) -> !llvm.ptr
    llvm.store %c0_i64, %1 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %1 : !llvm.ptr -> i64
    cf.br ^bb2(%2 : i64)
  ^bb2(%3: i64):  // pred: ^bb1
    return %3 : i64
  }
  func.func public @"local-second-f32"(%arg0: !llvm.ptr) -> f32 attributes {llvm.emit_c_interface} {
    %cst = arith.constant 0.000000e+00 : f32
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f32 : (i64) -> !llvm.ptr
    llvm.store %cst, %0 : f32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x f32 : (i64) -> !llvm.ptr
    llvm.store %cst, %1 : f32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %1 : !llvm.ptr -> f32
    cf.br ^bb2(%2 : f32)
  ^bb2(%3: f32):  // pred: ^bb1
    return %3 : f32
  }
  func.func public @"local-second-f64"(%arg0: !llvm.ptr) -> f64 attributes {llvm.emit_c_interface} {
    %cst = arith.constant 0.000000e+00 : f64
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f64 : (i64) -> !llvm.ptr
    llvm.store %cst, %0 : f64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x f64 : (i64) -> !llvm.ptr
    llvm.store %cst, %1 : f64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %1 : !llvm.ptr -> f64
    cf.br ^bb2(%2 : f64)
  ^bb2(%3: f64):  // pred: ^bb1
    return %3 : f64
  }
  func.func public @"local-mixed"(%arg0: !llvm.ptr) -> f64 attributes {llvm.emit_c_interface} {
    %cst = arith.constant 0.000000e+00 : f32
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f32 : (i64) -> !llvm.ptr
    llvm.store %cst, %0 : f32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i64 : (i64) -> !llvm.ptr
    llvm.store %c0_i64, %2 : i64, !llvm.ptr
    %c0_i32_2 = arith.constant 0 : i32
    %c1_i64_3 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_3 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32_2, %3 : i32, !llvm.ptr
    %cst_4 = arith.constant 0.000000e+00 : f64
    %c1_i64_5 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_5 x f64 : (i64) -> !llvm.ptr
    llvm.store %cst_4, %4 : f64, !llvm.ptr
    %c0_i32_6 = arith.constant 0 : i32
    %c1_i64_7 = arith.constant 1 : i64
    %5 = llvm.alloca %c1_i64_7 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32_6, %5 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %6 = llvm.load %0 : !llvm.ptr -> f32
    %7 = arith.negf %6 : f32
    %8 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_8 = arith.constant 0 : i32
    %9 = arith.cmpi eq, %8, %c0_i32_8 : i32
    %10 = arith.extui %9 : i1 to i32
    %11 = llvm.load %2 : !llvm.ptr -> i64
    %c0_i64_9 = arith.constant 0 : i64
    %12 = arith.cmpi eq, %11, %c0_i64_9 : i64
    %13 = arith.extui %12 : i1 to i32
    %14 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_10 = arith.constant 0 : i32
    %15 = arith.cmpi eq, %14, %c0_i32_10 : i32
    %16 = arith.extui %15 : i1 to i32
    %17 = llvm.load %4 : !llvm.ptr -> f64
    %18 = arith.negf %17 : f64
    %19 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i32_11 = arith.constant 0 : i32
    %20 = arith.cmpi eq, %19, %c0_i32_11 : i32
    %21 = arith.extui %20 : i1 to i32
    %22 = llvm.load %4 : !llvm.ptr -> f64
    cf.br ^bb2(%22 : f64)
  ^bb2(%23: f64):  // pred: ^bb1
    return %23 : f64
  }
  func.func public @"param-first-i32"(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%2 : i32)
  ^bb2(%3: i32):  // pred: ^bb1
    return %3 : i32
  }
  func.func public @"param-first-i64"(%arg0: !llvm.ptr, %arg1: i64, %arg2: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i64
    cf.br ^bb2(%2 : i64)
  ^bb2(%3: i64):  // pred: ^bb1
    return %3 : i64
  }
  func.func public @"param-first-f32"(%arg0: !llvm.ptr, %arg1: f32, %arg2: f32) -> f32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : f32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : f32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> f32
    cf.br ^bb2(%2 : f32)
  ^bb2(%3: f32):  // pred: ^bb1
    return %3 : f32
  }
  func.func public @"param-first-f64"(%arg0: !llvm.ptr, %arg1: f64, %arg2: f64) -> f64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : f64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : f64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> f64
    cf.br ^bb2(%2 : f64)
  ^bb2(%3: f64):  // pred: ^bb1
    return %3 : f64
  }
  func.func public @"param-second-i32"(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %1 : !llvm.ptr -> i32
    cf.br ^bb2(%2 : i32)
  ^bb2(%3: i32):  // pred: ^bb1
    return %3 : i32
  }
  func.func public @"param-second-i64"(%arg0: !llvm.ptr, %arg1: i64, %arg2: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %1 : !llvm.ptr -> i64
    cf.br ^bb2(%2 : i64)
  ^bb2(%3: i64):  // pred: ^bb1
    return %3 : i64
  }
  func.func public @"param-second-f32"(%arg0: !llvm.ptr, %arg1: f32, %arg2: f32) -> f32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : f32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : f32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %1 : !llvm.ptr -> f32
    cf.br ^bb2(%2 : f32)
  ^bb2(%3: f32):  // pred: ^bb1
    return %3 : f32
  }
  func.func public @"param-second-f64"(%arg0: !llvm.ptr, %arg1: f64, %arg2: f64) -> f64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : f64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : f64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %1 : !llvm.ptr -> f64
    cf.br ^bb2(%2 : f64)
  ^bb2(%3: f64):  // pred: ^bb1
    return %3 : f64
  }
  func.func public @"param-mixed"(%arg0: !llvm.ptr, %arg1: f32, %arg2: i32, %arg3: i64, %arg4: i32, %arg5: f64, %arg6: i32) -> f64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : f32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i64, !llvm.ptr
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg5, %4 : f64, !llvm.ptr
    %c1_i64_4 = arith.constant 1 : i64
    %5 = llvm.alloca %c1_i64_4 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg6, %5 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %6 = llvm.load %0 : !llvm.ptr -> f32
    %7 = arith.negf %6 : f32
    %8 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %9 = arith.cmpi eq, %8, %c0_i32 : i32
    %10 = arith.extui %9 : i1 to i32
    %11 = llvm.load %2 : !llvm.ptr -> i64
    %c0_i64 = arith.constant 0 : i64
    %12 = arith.cmpi eq, %11, %c0_i64 : i64
    %13 = arith.extui %12 : i1 to i32
    %14 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_5 = arith.constant 0 : i32
    %15 = arith.cmpi eq, %14, %c0_i32_5 : i32
    %16 = arith.extui %15 : i1 to i32
    %17 = llvm.load %4 : !llvm.ptr -> f64
    %18 = arith.negf %17 : f64
    %19 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i32_6 = arith.constant 0 : i32
    %20 = arith.cmpi eq, %19, %c0_i32_6 : i32
    %21 = arith.extui %20 : i1 to i32
    %22 = llvm.load %4 : !llvm.ptr -> f64
    cf.br ^bb2(%22 : f64)
  ^bb2(%23: f64):  // pred: ^bb1
    return %23 : f64
  }
  func.func public @empty(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func public @"value-void"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func public @"value-i32"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c77_i32 = arith.constant 77 : i32
    cf.br ^bb2(%c77_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func public @"value-i64"(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c7777_i64 = arith.constant 7777 : i64
    cf.br ^bb2(%c7777_i64 : i64)
  ^bb2(%0: i64):  // pred: ^bb1
    return %0 : i64
  }
  func.func public @"value-f32"(%arg0: !llvm.ptr) -> f32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1117480550_i32 = arith.constant 1117480550 : i32
    %0 = arith.bitcast %c1117480550_i32 : i32 to f32
    cf.br ^bb2(%0 : f32)
  ^bb2(%1: f32):  // pred: ^bb1
    return %1 : f32
  }
  func.func public @"value-f64"(%arg0: !llvm.ptr) -> f64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c4635172994171566817_i64 = arith.constant 4635172994171566817 : i64
    %0 = arith.bitcast %c4635172994171566817_i64 : i64 to f64
    cf.br ^bb2(%0 : f64)
  ^bb2(%1: f64):  // pred: ^bb1
    return %1 : f64
  }
  func.func public @"value-i32-f64"(%arg0: !llvm.ptr) -> (i32, f64) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c77_i32 = arith.constant 77 : i32
    %c4619567317775286272_i64 = arith.constant 4619567317775286272 : i64
    %0 = arith.bitcast %c4619567317775286272_i64 : i64 to f64
    cf.br ^bb2(%c77_i32, %0 : i32, f64)
  ^bb2(%1: i32, %2: f64):  // pred: ^bb1
    return %1, %2 : i32, f64
  }
  func.func public @"value-i32-i32-i32"(%arg0: !llvm.ptr) -> (i32, i32, i32) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %c3_i32 = arith.constant 3 : i32
    cf.br ^bb2(%c1_i32, %c2_i32, %c3_i32 : i32, i32, i32)
  ^bb2(%0: i32, %1: i32, %2: i32):  // pred: ^bb1
    return %0, %1, %2 : i32, i32, i32
  }
  func.func public @"value-block-void"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    cf.br ^bb3
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // pred: ^bb1
    cf.br ^bb2
  }
  func.func public @"value-block-i32"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c77_i32 = arith.constant 77 : i32
    cf.br ^bb3(%c77_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // pred: ^bb1
    cf.br ^bb2(%1 : i32)
  }
  func.func public @"value-block-i32-i64"(%arg0: !llvm.ptr) -> (i32, i64) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c1_i32 = arith.constant 1 : i32
    %c2_i64 = arith.constant 2 : i64
    cf.br ^bb3(%c1_i32, %c2_i64 : i32, i64)
  ^bb2(%0: i32, %1: i64):  // pred: ^bb3
    return %0, %1 : i32, i64
  ^bb3(%2: i32, %3: i64):  // pred: ^bb1
    cf.br ^bb2(%2, %3 : i32, i64)
  }
  func.func public @"return-empty"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func public @"return-i32"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c78_i32 = arith.constant 78 : i32
    cf.br ^bb2(%c78_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func public @"return-i64"(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c7878_i64 = arith.constant 7878 : i64
    cf.br ^bb2(%c7878_i64 : i64)
  ^bb2(%0: i64):  // pred: ^bb1
    return %0 : i64
  }
  func.func public @"return-f32"(%arg0: !llvm.ptr) -> f32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1117611622_i32 = arith.constant 1117611622 : i32
    %0 = arith.bitcast %c1117611622_i32 : i32 to f32
    cf.br ^bb2(%0 : f32)
  ^bb2(%1: f32):  // pred: ^bb1
    return %1 : f32
  }
  func.func public @"return-f64"(%arg0: !llvm.ptr) -> f64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c4635244066603186258_i64 = arith.constant 4635244066603186258 : i64
    %0 = arith.bitcast %c4635244066603186258_i64 : i64 to f64
    cf.br ^bb2(%0 : f64)
  ^bb2(%1: f64):  // pred: ^bb1
    return %1 : f64
  }
  func.func public @"return-i32-f64"(%arg0: !llvm.ptr) -> (i32, f64) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c78_i32 = arith.constant 78 : i32
    %c4635244066603186258_i64 = arith.constant 4635244066603186258 : i64
    %0 = arith.bitcast %c4635244066603186258_i64 : i64 to f64
    cf.br ^bb2(%c78_i32, %0 : i32, f64)
  ^bb2(%1: i32, %2: f64):  // pred: ^bb1
    return %1, %2 : i32, f64
  }
  func.func public @"return-i32-i32-i32"(%arg0: !llvm.ptr) -> (i32, i32, i32) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %c3_i32 = arith.constant 3 : i32
    cf.br ^bb2(%c1_i32, %c2_i32, %c3_i32 : i32, i32, i32)
  ^bb2(%0: i32, %1: i32, %2: i32):  // pred: ^bb1
    return %0, %1, %2 : i32, i32, i32
  }
  func.func public @"return-block-i32"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c77_i32 = arith.constant 77 : i32
    cf.br ^bb3(%c77_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // pred: ^bb1
    cf.br ^bb2(%1 : i32)
  }
  func.func public @"return-block-i32-i64"(%arg0: !llvm.ptr) -> (i32, i64) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c1_i32 = arith.constant 1 : i32
    %c2_i64 = arith.constant 2 : i64
    cf.br ^bb3(%c1_i32, %c2_i64 : i32, i64)
  ^bb2(%0: i32, %1: i64):  // pred: ^bb3
    return %0, %1 : i32, i64
  ^bb3(%2: i32, %3: i64):  // pred: ^bb1
    cf.br ^bb2(%2, %3 : i32, i64)
  }
  func.func public @"break-empty"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func public @"break-i32"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c79_i32 = arith.constant 79 : i32
    cf.br ^bb2(%c79_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func public @"break-i64"(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c7979_i64 = arith.constant 7979 : i64
    cf.br ^bb2(%c7979_i64 : i64)
  ^bb2(%0: i64):  // pred: ^bb1
    return %0 : i64
  }
  func.func public @"break-f32"(%arg0: !llvm.ptr) -> f32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1117768909_i32 = arith.constant 1117768909 : i32
    %0 = arith.bitcast %c1117768909_i32 : i32 to f32
    cf.br ^bb2(%0 : f32)
  ^bb2(%1: f32):  // pred: ^bb1
    return %1 : f32
  }
  func.func public @"break-f64"(%arg0: !llvm.ptr) -> f64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c4635315139034805699_i64 = arith.constant 4635315139034805699 : i64
    %0 = arith.bitcast %c4635315139034805699_i64 : i64 to f64
    cf.br ^bb2(%0 : f64)
  ^bb2(%1: f64):  // pred: ^bb1
    return %1 : f64
  }
  func.func public @"break-i32-f64"(%arg0: !llvm.ptr) -> (i32, f64) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c79_i32 = arith.constant 79 : i32
    %c4635315139034805699_i64 = arith.constant 4635315139034805699 : i64
    %0 = arith.bitcast %c4635315139034805699_i64 : i64 to f64
    cf.br ^bb2(%c79_i32, %0 : i32, f64)
  ^bb2(%1: i32, %2: f64):  // pred: ^bb1
    return %1, %2 : i32, f64
  }
  func.func public @"break-i32-i32-i32"(%arg0: !llvm.ptr) -> (i32, i32, i32) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %c3_i32 = arith.constant 3 : i32
    cf.br ^bb2(%c1_i32, %c2_i32, %c3_i32 : i32, i32, i32)
  ^bb2(%0: i32, %1: i32, %2: i32):  // pred: ^bb1
    return %0, %1, %2 : i32, i32, i32
  }
  func.func public @"break-block-i32"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c77_i32 = arith.constant 77 : i32
    cf.br ^bb3(%c77_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // pred: ^bb1
    cf.br ^bb2(%1 : i32)
  }
  func.func public @"break-block-i32-i64"(%arg0: !llvm.ptr) -> (i32, i64) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c1_i32 = arith.constant 1 : i32
    %c2_i64 = arith.constant 2 : i64
    cf.br ^bb3(%c1_i32, %c2_i64 : i32, i64)
  ^bb2(%0: i32, %1: i64):  // pred: ^bb3
    return %0, %1 : i32, i64
  ^bb3(%2: i32, %3: i64):  // pred: ^bb1
    cf.br ^bb2(%2, %3 : i32, i64)
  }
  func.func public @"break-br_if-empty"(%arg0: !llvm.ptr, %arg1: i32) attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb2, ^bb3
  ^bb2:  // 2 preds: ^bb1, ^bb3
    return
  ^bb3:  // pred: ^bb1
    cf.br ^bb2
  }
  func.func public @"break-br_if-num"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c50_i32 = arith.constant 50 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb2(%c50_i32 : i32), ^bb3(%c50_i32 : i32)
  ^bb2(%3: i32):  // 2 preds: ^bb1, ^bb3
    return %3 : i32
  ^bb3(%4: i32):  // pred: ^bb1
    %c51_i32 = arith.constant 51 : i32
    cf.br ^bb2(%c51_i32 : i32)
  }
  func.func public @"break-br_if-num-num"(%arg0: !llvm.ptr, %arg1: i32) -> (i32, i64) attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c50_i32 = arith.constant 50 : i32
    %c51_i64 = arith.constant 51 : i64
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb2(%c50_i32, %c51_i64 : i32, i64), ^bb3(%c50_i32, %c51_i64 : i32, i64)
  ^bb2(%3: i32, %4: i64):  // 2 preds: ^bb1, ^bb3
    return %3, %4 : i32, i64
  ^bb3(%5: i32, %6: i64):  // pred: ^bb1
    %c51_i32 = arith.constant 51 : i32
    %c52_i64 = arith.constant 52 : i64
    cf.br ^bb2(%c51_i32, %c52_i64 : i32, i64)
  }
  func.func public @"break-br_table-empty"(%arg0: !llvm.ptr, %arg1: i32) attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    cf.switch %1 : i32, [
      default: ^bb2,
      0: ^bb2,
      1: ^bb2
    ]
  ^bb2:  // 3 preds: ^bb1, ^bb1, ^bb1
    return
  }
  func.func public @"break-br_table-num"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c50_i32 = arith.constant 50 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i32
    cf.switch %1 : i32, [
      default: ^bb2(%c50_i32 : i32),
      0: ^bb2(%c50_i32 : i32)
    ]
  ^bb2(%2: i32):  // 2 preds: ^bb1, ^bb1
    return %2 : i32
  }
  func.func public @"break-br_table-num-num"(%arg0: !llvm.ptr, %arg1: i32) -> (i32, i64) attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c50_i32 = arith.constant 50 : i32
    %c51_i64 = arith.constant 51 : i64
    %1 = llvm.load %0 : !llvm.ptr -> i32
    cf.switch %1 : i32, [
      default: ^bb2(%c50_i32, %c51_i64 : i32, i64),
      0: ^bb2(%c50_i32, %c51_i64 : i32, i64)
    ]
  ^bb2(%2: i32, %3: i64):  // 2 preds: ^bb1, ^bb1
    return %2, %3 : i32, i64
  }
  func.func public @"break-br_table-nested-empty"(%arg0: !llvm.ptr, %arg1: i32) attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    cf.switch %1 : i32, [
      default: ^bb3,
      0: ^bb3,
      1: ^bb2
    ]
  ^bb2:  // 2 preds: ^bb1, ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb1
    cf.br ^bb2
  }
  func.func public @"break-br_table-nested-num"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c50_i32 = arith.constant 50 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i32
    cf.switch %1 : i32, [
      default: ^bb3(%c50_i32 : i32),
      0: ^bb3(%c50_i32 : i32),
      1: ^bb2(%c50_i32 : i32)
    ]
  ^bb2(%2: i32):  // 2 preds: ^bb1, ^bb3
    return %2 : i32
  ^bb3(%3: i32):  // 2 preds: ^bb1, ^bb1
    %c2_i32 = arith.constant 2 : i32
    %4 = arith.addi %3, %c2_i32 : i32
    cf.br ^bb2(%4 : i32)
  }
  func.func public @"break-br_table-nested-num-num"(%arg0: !llvm.ptr, %arg1: i32) -> (i32, i32) attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c50_i32 = arith.constant 50 : i32
    %c51_i32 = arith.constant 51 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i32
    cf.switch %1 : i32, [
      default: ^bb3(%c50_i32, %c51_i32 : i32, i32),
      0: ^bb3(%c50_i32, %c51_i32 : i32, i32),
      1: ^bb2(%c50_i32, %c51_i32 : i32, i32)
    ]
  ^bb2(%2: i32, %3: i32):  // 2 preds: ^bb1, ^bb3
    return %2, %3 : i32, i32
  ^bb3(%4: i32, %5: i32):  // 2 preds: ^bb1, ^bb1
    %6 = arith.addi %4, %5 : i32
    %c52_i32 = arith.constant 52 : i32
    cf.br ^bb2(%6, %c52_i32 : i32, i32)
  }
  func.func public @"large-sig"(%arg0: !llvm.ptr, %arg1: i32, %arg2: i64, %arg3: f32, %arg4: f32, %arg5: i32, %arg6: f64, %arg7: f32, %arg8: i32, %arg9: i32, %arg10: i32, %arg11: f32, %arg12: f64, %arg13: f64, %arg14: f64, %arg15: i32, %arg16: i32, %arg17: f32) -> (f64, f32, i32, i32, i32, i64, f32, i32, i32, f32, f64, f64, i32, f32, i32, f64) attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i64, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : f32, !llvm.ptr
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg4, %3 : f32, !llvm.ptr
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c1_i64_4 = arith.constant 1 : i64
    %5 = llvm.alloca %c1_i64_4 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg6, %5 : f64, !llvm.ptr
    %c1_i64_5 = arith.constant 1 : i64
    %6 = llvm.alloca %c1_i64_5 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg7, %6 : f32, !llvm.ptr
    %c1_i64_6 = arith.constant 1 : i64
    %7 = llvm.alloca %c1_i64_6 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg8, %7 : i32, !llvm.ptr
    %c1_i64_7 = arith.constant 1 : i64
    %8 = llvm.alloca %c1_i64_7 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg9, %8 : i32, !llvm.ptr
    %c1_i64_8 = arith.constant 1 : i64
    %9 = llvm.alloca %c1_i64_8 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg10, %9 : i32, !llvm.ptr
    %c1_i64_9 = arith.constant 1 : i64
    %10 = llvm.alloca %c1_i64_9 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg11, %10 : f32, !llvm.ptr
    %c1_i64_10 = arith.constant 1 : i64
    %11 = llvm.alloca %c1_i64_10 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg12, %11 : f64, !llvm.ptr
    %c1_i64_11 = arith.constant 1 : i64
    %12 = llvm.alloca %c1_i64_11 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg13, %12 : f64, !llvm.ptr
    %c1_i64_12 = arith.constant 1 : i64
    %13 = llvm.alloca %c1_i64_12 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg14, %13 : f64, !llvm.ptr
    %c1_i64_13 = arith.constant 1 : i64
    %14 = llvm.alloca %c1_i64_13 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg15, %14 : i32, !llvm.ptr
    %c1_i64_14 = arith.constant 1 : i64
    %15 = llvm.alloca %c1_i64_14 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg16, %15 : i32, !llvm.ptr
    %c1_i64_15 = arith.constant 1 : i64
    %16 = llvm.alloca %c1_i64_15 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg17, %16 : f32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %17 = llvm.load %5 : !llvm.ptr -> f64
    %18 = llvm.load %2 : !llvm.ptr -> f32
    %19 = llvm.load %0 : !llvm.ptr -> i32
    %20 = llvm.load %8 : !llvm.ptr -> i32
    %21 = llvm.load %7 : !llvm.ptr -> i32
    %22 = llvm.load %1 : !llvm.ptr -> i64
    %23 = llvm.load %3 : !llvm.ptr -> f32
    %24 = llvm.load %9 : !llvm.ptr -> i32
    %25 = llvm.load %4 : !llvm.ptr -> i32
    %26 = llvm.load %6 : !llvm.ptr -> f32
    %27 = llvm.load %13 : !llvm.ptr -> f64
    %28 = llvm.load %11 : !llvm.ptr -> f64
    %29 = llvm.load %15 : !llvm.ptr -> i32
    %30 = llvm.load %16 : !llvm.ptr -> f32
    %31 = llvm.load %14 : !llvm.ptr -> i32
    %32 = llvm.load %12 : !llvm.ptr -> f64
    cf.br ^bb2(%17, %18, %19, %20, %21, %22, %23, %24, %25, %26, %27, %28, %29, %30, %31, %32 : f64, f32, i32, i32, i32, i64, f32, i32, i32, f32, f64, f64, i32, f32, i32, f64)
  ^bb2(%33: f64, %34: f32, %35: i32, %36: i32, %37: i32, %38: i64, %39: f32, %40: i32, %41: i32, %42: f32, %43: f64, %44: f64, %45: i32, %46: f32, %47: i32, %48: f64):  // pred: ^bb1
    return %33, %34, %35, %36, %37, %38, %39, %40, %41, %42, %43, %44, %45, %46, %47, %48 : f64, f32, i32, i32, i32, i64, f32, i32, i32, f32, f64, f64, i32, f32, i32, f64
  }
  func.func public @"init-local-i32"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %c0_i32 = arith.constant 0 : i32
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%1 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func public @"init-local-i64"(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    %c0_i64 = arith.constant 0 : i64
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %c0_i64, %0 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i64
    cf.br ^bb2(%1 : i64)
  ^bb2(%2: i64):  // pred: ^bb1
    return %2 : i64
  }
  func.func public @"init-local-f32"(%arg0: !llvm.ptr) -> f32 attributes {llvm.emit_c_interface} {
    %cst = arith.constant 0.000000e+00 : f32
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f32 : (i64) -> !llvm.ptr
    llvm.store %cst, %0 : f32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> f32
    cf.br ^bb2(%1 : f32)
  ^bb2(%2: f32):  // pred: ^bb1
    return %2 : f32
  }
  func.func public @"init-local-f64"(%arg0: !llvm.ptr) -> f64 attributes {llvm.emit_c_interface} {
    %cst = arith.constant 0.000000e+00 : f64
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f64 : (i64) -> !llvm.ptr
    llvm.store %cst, %0 : f64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> f64
    cf.br ^bb2(%1 : f64)
  ^bb2(%2: f64):  // pred: ^bb1
    return %2 : f64
  }
  func.func private @dora_fn_wasm_table_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_copy(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_fill(!llvm.ptr, i32, i32, !llvm.ptr, i32)
  func.func private @dora_fn_wasm_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_table_set(!llvm.ptr, i32, i32, !llvm.ptr)
  func.func private @dora_fn_wasm_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_imported_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_func_ref(!llvm.ptr, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_data_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_elem_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_raise_trap(i32)
}
