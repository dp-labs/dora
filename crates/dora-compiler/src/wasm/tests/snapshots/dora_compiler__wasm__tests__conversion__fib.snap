---
source: crates/dora-compiler/src/wasm/tests/conversion.rs
expression: op
snapshot_kind: text
---
module {
  func.func public @"fib-recursive"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_0 = arith.constant 1 : i32
    %2 = arith.cmpi ule, %1, %c1_i32_0 : i32
    %3 = arith.extui %2 : i1 to i32
    %c0_i32 = arith.constant 0 : i32
    %4 = arith.cmpi ne, %3, %c0_i32 : i32
    cf.cond_br %4, ^bb3, ^bb4
  ^bb2(%5: i32):  // 2 preds: ^bb3, ^bb5
    return %5 : i32
  ^bb3:  // pred: ^bb1
    %6 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%6 : i32)
  ^bb4:  // pred: ^bb1
    cf.br ^bb5
  ^bb5:  // pred: ^bb4
    %7 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_1 = arith.constant 1 : i32
    %8 = arith.subi %7, %c1_i32_1 : i32
    %9 = call @"fib-recursive"(%arg0, %8) : (!llvm.ptr, i32) -> i32
    %10 = llvm.load %0 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %11 = arith.subi %10, %c2_i32 : i32
    %12 = call @"fib-recursive"(%arg0, %11) : (!llvm.ptr, i32) -> i32
    %13 = arith.addi %9, %12 : i32
    cf.br ^bb2(%13 : i32)
  }
  func.func public @"fib-iterative"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32_4 = arith.constant 0 : i32
    llvm.store %c0_i32_4, %1 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    llvm.store %c1_i32_5, %2 : i32, !llvm.ptr
    %c0_i32_6 = arith.constant 0 : i32
    llvm.store %c0_i32_6, %3 : i32, !llvm.ptr
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_7 = arith.constant 0 : i32
    %6 = arith.cmpi eq, %5, %c0_i32_7 : i32
    %7 = arith.extui %6 : i1 to i32
    %c0_i32_8 = arith.constant 0 : i32
    %8 = arith.cmpi ne, %7, %c0_i32_8 : i32
    cf.cond_br %8, ^bb3, ^bb4
  ^bb2(%9: i32):  // 3 preds: ^bb3, ^bb6, ^bb9
    return %9 : i32
  ^bb3:  // pred: ^bb1
    %c0_i32_9 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32_9 : i32)
  ^bb4:  // pred: ^bb1
    cf.br ^bb5
  ^bb5:  // pred: ^bb4
    %10 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_10 = arith.constant 1 : i32
    %11 = arith.cmpi eq, %10, %c1_i32_10 : i32
    %12 = arith.extui %11 : i1 to i32
    %c0_i32_11 = arith.constant 0 : i32
    %13 = arith.cmpi ne, %12, %c0_i32_11 : i32
    cf.cond_br %13, ^bb6, ^bb7
  ^bb6:  // pred: ^bb5
    %c1_i32_12 = arith.constant 1 : i32
    cf.br ^bb2(%c1_i32_12 : i32)
  ^bb7:  // pred: ^bb5
    cf.br ^bb8
  ^bb8:  // pred: ^bb7
    cf.br ^bb10
  ^bb9:  // pred: ^bb11
    %14 = llvm.load %2 : !llvm.ptr -> i32
    cf.br ^bb2(%14 : i32)
  ^bb10:  // 2 preds: ^bb8, ^bb10
    %15 = llvm.load %2 : !llvm.ptr -> i32
    llvm.store %15, %4 : i32, !llvm.ptr
    %16 = llvm.load %1 : !llvm.ptr -> i32
    %17 = llvm.load %2 : !llvm.ptr -> i32
    %18 = arith.addi %16, %17 : i32
    llvm.store %18, %2 : i32, !llvm.ptr
    %19 = llvm.load %4 : !llvm.ptr -> i32
    llvm.store %19, %1 : i32, !llvm.ptr
    %20 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_13 = arith.constant 1 : i32
    %21 = arith.addi %20, %c1_i32_13 : i32
    llvm.store %21, %3 : i32, !llvm.ptr
    %22 = llvm.load %3 : !llvm.ptr -> i32
    %23 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_14 = arith.constant 1 : i32
    %24 = arith.subi %23, %c1_i32_14 : i32
    %25 = arith.cmpi ult, %22, %24 : i32
    %26 = arith.extui %25 : i1 to i32
    %c0_i32_15 = arith.constant 0 : i32
    %27 = arith.cmpi ne, %26, %c0_i32_15 : i32
    cf.cond_br %27, ^bb10, ^bb11
  ^bb11:  // pred: ^bb10
    cf.br ^bb9
  }
  func.func private @dora_fn_wasm_table_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_copy(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_fill(!llvm.ptr, i32, i32, !llvm.ptr, i32)
  func.func private @dora_fn_wasm_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_table_set(!llvm.ptr, i32, i32, !llvm.ptr)
  func.func private @dora_fn_wasm_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_imported_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_func_ref(!llvm.ptr, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_data_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_elem_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_raise_trap(i32)
}
