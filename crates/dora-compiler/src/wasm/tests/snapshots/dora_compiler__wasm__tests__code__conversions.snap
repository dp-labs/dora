---
source: crates/dora-compiler/src/wasm/tests/code.rs
expression: op
---
module {
  func.func public @i64.extend_i32_s(%arg0: !llvm.ptr, %arg1: i32) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = "wasm.i64_extend_i32s"(%1) : (i32) -> i64
    cf.br ^bb2(%2 : i64)
  ^bb2(%3: i64):  // pred: ^bb1
    return %3 : i64
  }
  func.func public @i64.extend_i32_u(%arg0: !llvm.ptr, %arg1: i32) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = "wasm.i64_extend_i32u"(%1) : (i32) -> i64
    cf.br ^bb2(%2 : i64)
  ^bb2(%3: i64):  // pred: ^bb1
    return %3 : i64
  }
  func.func public @i32.wrap_i64(%arg0: !llvm.ptr, %arg1: i64) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i64
    %2 = "wasm.i32_wrap_i64"(%1) : (i64) -> i32
    cf.br ^bb2(%2 : i32)
  ^bb2(%3: i32):  // pred: ^bb1
    return %3 : i32
  }
  func.func public @i32.trunc_f32_s(%arg0: !llvm.ptr, %arg1: f32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : f32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> f32
    %c-822083584_i32 = arith.constant -822083584 : i32
    %c1325400063_i32 = arith.constant 1325400063 : i32
    %2 = arith.bitcast %c-822083584_i32 : i32 to f32
    %3 = arith.bitcast %c1325400063_i32 : i32 to f32
    %4 = arith.cmpf ugt, %1, %3 : f32
    %5 = arith.cmpf ult, %1, %2 : f32
    %6 = arith.ori %4, %5 : i1
    cf.cond_br %6, ^bb3, ^bb4
  ^bb2(%7: i32):  // pred: ^bb4
    return %7 : i32
  ^bb3:  // pred: ^bb1
    %8 = arith.cmpf uno, %1, %1 : f32
    %c8_i32 = arith.constant 8 : i32
    %c6_i32 = arith.constant 6 : i32
    %9 = arith.select %8, %c8_i32, %c6_i32 : i32
    call @dora_fn_wasm_raise_trap(%9) : (i32) -> ()
    cf.br ^bb4
  ^bb4:  // 2 preds: ^bb1, ^bb3
    %10 = "wasm.i32_trunc_f32s"(%1) : (f32) -> i32
    cf.br ^bb2(%10 : i32)
  }
  func.func public @i32.trunc_f32_u(%arg0: !llvm.ptr, %arg1: f32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : f32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> f32
    %c-1082130433_i32 = arith.constant -1082130433 : i32
    %c1333788671_i32 = arith.constant 1333788671 : i32
    %2 = arith.bitcast %c-1082130433_i32 : i32 to f32
    %3 = arith.bitcast %c1333788671_i32 : i32 to f32
    %4 = arith.cmpf ugt, %1, %3 : f32
    %5 = arith.cmpf ult, %1, %2 : f32
    %6 = arith.ori %4, %5 : i1
    cf.cond_br %6, ^bb3, ^bb4
  ^bb2(%7: i32):  // pred: ^bb4
    return %7 : i32
  ^bb3:  // pred: ^bb1
    %8 = arith.cmpf uno, %1, %1 : f32
    %c8_i32 = arith.constant 8 : i32
    %c6_i32 = arith.constant 6 : i32
    %9 = arith.select %8, %c8_i32, %c6_i32 : i32
    call @dora_fn_wasm_raise_trap(%9) : (i32) -> ()
    cf.br ^bb4
  ^bb4:  // 2 preds: ^bb1, ^bb3
    %10 = "wasm.i32_trunc_f32u"(%1) : (f32) -> i32
    cf.br ^bb2(%10 : i32)
  }
  func.func public @i32.trunc_f64_s(%arg0: !llvm.ptr, %arg1: f64) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f64 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : f64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> f64
    %c-4476578029604175873_i64 = arith.constant -4476578029604175873 : i64
    %c4746794007248502783_i64 = arith.constant 4746794007248502783 : i64
    %2 = arith.bitcast %c-4476578029604175873_i64 : i64 to f64
    %3 = arith.bitcast %c4746794007248502783_i64 : i64 to f64
    %4 = arith.cmpf ugt, %1, %3 : f64
    %5 = arith.cmpf ult, %1, %2 : f64
    %6 = arith.ori %4, %5 : i1
    cf.cond_br %6, ^bb3, ^bb4
  ^bb2(%7: i32):  // pred: ^bb4
    return %7 : i32
  ^bb3:  // pred: ^bb1
    %8 = arith.cmpf uno, %1, %1 : f64
    %c8_i32 = arith.constant 8 : i32
    %c6_i32 = arith.constant 6 : i32
    %9 = arith.select %8, %c8_i32, %c6_i32 : i32
    call @dora_fn_wasm_raise_trap(%9) : (i32) -> ()
    cf.br ^bb4
  ^bb4:  // 2 preds: ^bb1, ^bb3
    %10 = "wasm.i32_trunc_f64s"(%1) : (f64) -> i32
    cf.br ^bb2(%10 : i32)
  }
  func.func public @i32.trunc_f64_u(%arg0: !llvm.ptr, %arg1: f64) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f64 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : f64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> f64
    %c-4616189618054758401_i64 = arith.constant -4616189618054758401 : i64
    %c4751297606875873279_i64 = arith.constant 4751297606875873279 : i64
    %2 = arith.bitcast %c-4616189618054758401_i64 : i64 to f64
    %3 = arith.bitcast %c4751297606875873279_i64 : i64 to f64
    %4 = arith.cmpf ugt, %1, %3 : f64
    %5 = arith.cmpf ult, %1, %2 : f64
    %6 = arith.ori %4, %5 : i1
    cf.cond_br %6, ^bb3, ^bb4
  ^bb2(%7: i32):  // pred: ^bb4
    return %7 : i32
  ^bb3:  // pred: ^bb1
    %8 = arith.cmpf uno, %1, %1 : f64
    %c8_i32 = arith.constant 8 : i32
    %c6_i32 = arith.constant 6 : i32
    %9 = arith.select %8, %c8_i32, %c6_i32 : i32
    call @dora_fn_wasm_raise_trap(%9) : (i32) -> ()
    cf.br ^bb4
  ^bb4:  // 2 preds: ^bb1, ^bb3
    %10 = "wasm.i32_trunc_f64u"(%1) : (f64) -> i32
    cf.br ^bb2(%10 : i32)
  }
  func.func public @i64.trunc_f32_s(%arg0: !llvm.ptr, %arg1: f32) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : f32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> f32
    %c-553648128_i32 = arith.constant -553648128 : i32
    %c1593835519_i32 = arith.constant 1593835519 : i32
    %2 = arith.bitcast %c-553648128_i32 : i32 to f32
    %3 = arith.bitcast %c1593835519_i32 : i32 to f32
    %4 = arith.cmpf ugt, %1, %3 : f32
    %5 = arith.cmpf ult, %1, %2 : f32
    %6 = arith.ori %4, %5 : i1
    cf.cond_br %6, ^bb3, ^bb4
  ^bb2(%7: i64):  // pred: ^bb4
    return %7 : i64
  ^bb3:  // pred: ^bb1
    %8 = arith.cmpf uno, %1, %1 : f32
    %c8_i32 = arith.constant 8 : i32
    %c6_i32 = arith.constant 6 : i32
    %9 = arith.select %8, %c8_i32, %c6_i32 : i32
    call @dora_fn_wasm_raise_trap(%9) : (i32) -> ()
    cf.br ^bb4
  ^bb4:  // 2 preds: ^bb1, ^bb3
    %10 = "wasm.i64_trunc_f32s"(%1) : (f32) -> i64
    cf.br ^bb2(%10 : i64)
  }
  func.func public @i64.trunc_f32_u(%arg0: !llvm.ptr, %arg1: f32) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : f32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> f32
    %c-1082130433_i32 = arith.constant -1082130433 : i32
    %c1602224127_i32 = arith.constant 1602224127 : i32
    %2 = arith.bitcast %c-1082130433_i32 : i32 to f32
    %3 = arith.bitcast %c1602224127_i32 : i32 to f32
    %4 = arith.cmpf ugt, %1, %3 : f32
    %5 = arith.cmpf ult, %1, %2 : f32
    %6 = arith.ori %4, %5 : i1
    cf.cond_br %6, ^bb3, ^bb4
  ^bb2(%7: i64):  // pred: ^bb4
    return %7 : i64
  ^bb3:  // pred: ^bb1
    %8 = arith.cmpf uno, %1, %1 : f32
    %c8_i32 = arith.constant 8 : i32
    %c6_i32 = arith.constant 6 : i32
    %9 = arith.select %8, %c8_i32, %c6_i32 : i32
    call @dora_fn_wasm_raise_trap(%9) : (i32) -> ()
    cf.br ^bb4
  ^bb4:  // 2 preds: ^bb1, ^bb3
    %10 = "wasm.i64_trunc_f32u"(%1) : (f32) -> i64
    cf.br ^bb2(%10 : i64)
  }
  func.func public @i64.trunc_f64_s(%arg0: !llvm.ptr, %arg1: f64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f64 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : f64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> f64
    %c-4332462841530417152_i64 = arith.constant -4332462841530417152 : i64
    %c4890909195324358655_i64 = arith.constant 4890909195324358655 : i64
    %2 = arith.bitcast %c-4332462841530417152_i64 : i64 to f64
    %3 = arith.bitcast %c4890909195324358655_i64 : i64 to f64
    %4 = arith.cmpf ugt, %1, %3 : f64
    %5 = arith.cmpf ult, %1, %2 : f64
    %6 = arith.ori %4, %5 : i1
    cf.cond_br %6, ^bb3, ^bb4
  ^bb2(%7: i64):  // pred: ^bb4
    return %7 : i64
  ^bb3:  // pred: ^bb1
    %8 = arith.cmpf uno, %1, %1 : f64
    %c8_i32 = arith.constant 8 : i32
    %c6_i32 = arith.constant 6 : i32
    %9 = arith.select %8, %c8_i32, %c6_i32 : i32
    call @dora_fn_wasm_raise_trap(%9) : (i32) -> ()
    cf.br ^bb4
  ^bb4:  // 2 preds: ^bb1, ^bb3
    %10 = "wasm.i64_trunc_f64s"(%1) : (f64) -> i64
    cf.br ^bb2(%10 : i64)
  }
  func.func public @i64.trunc_f64_u(%arg0: !llvm.ptr, %arg1: f64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f64 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : f64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> f64
    %c-4616189618054758401_i64 = arith.constant -4616189618054758401 : i64
    %c4895412794951729151_i64 = arith.constant 4895412794951729151 : i64
    %2 = arith.bitcast %c-4616189618054758401_i64 : i64 to f64
    %3 = arith.bitcast %c4895412794951729151_i64 : i64 to f64
    %4 = arith.cmpf ugt, %1, %3 : f64
    %5 = arith.cmpf ult, %1, %2 : f64
    %6 = arith.ori %4, %5 : i1
    cf.cond_br %6, ^bb3, ^bb4
  ^bb2(%7: i64):  // pred: ^bb4
    return %7 : i64
  ^bb3:  // pred: ^bb1
    %8 = arith.cmpf uno, %1, %1 : f64
    %c8_i32 = arith.constant 8 : i32
    %c6_i32 = arith.constant 6 : i32
    %9 = arith.select %8, %c8_i32, %c6_i32 : i32
    call @dora_fn_wasm_raise_trap(%9) : (i32) -> ()
    cf.br ^bb4
  ^bb4:  // 2 preds: ^bb1, ^bb3
    %10 = "wasm.i64_trunc_f64u"(%1) : (f64) -> i64
    cf.br ^bb2(%10 : i64)
  }
  func.func public @i32.trunc_sat_f32_s(%arg0: !llvm.ptr, %arg1: f32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : f32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> f32
    %2 = "wasm.i32_trunc_sat_f32s"(%1) : (f32) -> i32
    cf.br ^bb2(%2 : i32)
  ^bb2(%3: i32):  // pred: ^bb1
    return %3 : i32
  }
  func.func public @i32.trunc_sat_f32_u(%arg0: !llvm.ptr, %arg1: f32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : f32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> f32
    %2 = "wasm.i32_trunc_sat_f32u"(%1) : (f32) -> i32
    cf.br ^bb2(%2 : i32)
  ^bb2(%3: i32):  // pred: ^bb1
    return %3 : i32
  }
  func.func public @i32.trunc_sat_f64_s(%arg0: !llvm.ptr, %arg1: f64) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f64 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : f64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> f64
    %2 = "wasm.i32_trunc_sat_f64s"(%1) : (f64) -> i32
    cf.br ^bb2(%2 : i32)
  ^bb2(%3: i32):  // pred: ^bb1
    return %3 : i32
  }
  func.func public @i32.trunc_sat_f64_u(%arg0: !llvm.ptr, %arg1: f64) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f64 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : f64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> f64
    %2 = "wasm.i32_trunc_sat_f64u"(%1) : (f64) -> i32
    cf.br ^bb2(%2 : i32)
  ^bb2(%3: i32):  // pred: ^bb1
    return %3 : i32
  }
  func.func public @i64.trunc_sat_f32_s(%arg0: !llvm.ptr, %arg1: f32) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : f32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> f32
    %2 = "wasm.i64_trunc_sat_f32s"(%1) : (f32) -> i64
    cf.br ^bb2(%2 : i64)
  ^bb2(%3: i64):  // pred: ^bb1
    return %3 : i64
  }
  func.func public @i64.trunc_sat_f32_u(%arg0: !llvm.ptr, %arg1: f32) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : f32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> f32
    %2 = "wasm.i64_trunc_sat_f32u"(%1) : (f32) -> i64
    cf.br ^bb2(%2 : i64)
  ^bb2(%3: i64):  // pred: ^bb1
    return %3 : i64
  }
  func.func public @i64.trunc_sat_f64_s(%arg0: !llvm.ptr, %arg1: f64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f64 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : f64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> f64
    %2 = "wasm.i64_trunc_sat_f64s"(%1) : (f64) -> i64
    cf.br ^bb2(%2 : i64)
  ^bb2(%3: i64):  // pred: ^bb1
    return %3 : i64
  }
  func.func public @i64.trunc_sat_f64_u(%arg0: !llvm.ptr, %arg1: f64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f64 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : f64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> f64
    %2 = "wasm.i64_trunc_sat_f64u"(%1) : (f64) -> i64
    cf.br ^bb2(%2 : i64)
  ^bb2(%3: i64):  // pred: ^bb1
    return %3 : i64
  }
  func.func public @f32.convert_i32_s(%arg0: !llvm.ptr, %arg1: i32) -> f32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = "wasm.f32_convert_i32s"(%1) : (i32) -> f32
    cf.br ^bb2(%2 : f32)
  ^bb2(%3: f32):  // pred: ^bb1
    return %3 : f32
  }
  func.func public @f32.convert_i64_s(%arg0: !llvm.ptr, %arg1: i64) -> f32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i64
    %2 = "wasm.f32_convert_i64s"(%1) : (i64) -> f32
    cf.br ^bb2(%2 : f32)
  ^bb2(%3: f32):  // pred: ^bb1
    return %3 : f32
  }
  func.func public @f64.convert_i32_s(%arg0: !llvm.ptr, %arg1: i32) -> f64 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = "wasm.f64_convert_i32s"(%1) : (i32) -> f64
    cf.br ^bb2(%2 : f64)
  ^bb2(%3: f64):  // pred: ^bb1
    return %3 : f64
  }
  func.func public @f64.convert_i64_s(%arg0: !llvm.ptr, %arg1: i64) -> f64 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i64
    %2 = "wasm.f64_convert_i64s"(%1) : (i64) -> f64
    cf.br ^bb2(%2 : f64)
  ^bb2(%3: f64):  // pred: ^bb1
    return %3 : f64
  }
  func.func public @f32.convert_i32_u(%arg0: !llvm.ptr, %arg1: i32) -> f32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = "wasm.f32_convert_i32u"(%1) : (i32) -> f32
    cf.br ^bb2(%2 : f32)
  ^bb2(%3: f32):  // pred: ^bb1
    return %3 : f32
  }
  func.func public @f32.convert_i64_u(%arg0: !llvm.ptr, %arg1: i64) -> f32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i64
    %2 = "wasm.f32_convert_i64u"(%1) : (i64) -> f32
    cf.br ^bb2(%2 : f32)
  ^bb2(%3: f32):  // pred: ^bb1
    return %3 : f32
  }
  func.func public @f64.convert_i32_u(%arg0: !llvm.ptr, %arg1: i32) -> f64 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = "wasm.f64_convert_i32u"(%1) : (i32) -> f64
    cf.br ^bb2(%2 : f64)
  ^bb2(%3: f64):  // pred: ^bb1
    return %3 : f64
  }
  func.func public @f64.convert_i64_u(%arg0: !llvm.ptr, %arg1: i64) -> f64 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i64
    %2 = "wasm.f64_convert_i64u"(%1) : (i64) -> f64
    cf.br ^bb2(%2 : f64)
  ^bb2(%3: f64):  // pred: ^bb1
    return %3 : f64
  }
  func.func public @f64.promote_f32(%arg0: !llvm.ptr, %arg1: f32) -> f64 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : f32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> f32
    %2 = "wasm.f64_promote_f32"(%1) : (f32) -> f64
    cf.br ^bb2(%2 : f64)
  ^bb2(%3: f64):  // pred: ^bb1
    return %3 : f64
  }
  func.func public @f32.demote_f64(%arg0: !llvm.ptr, %arg1: f64) -> f32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f64 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : f64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> f64
    %2 = "wasm.f32_demote_f64"(%1) : (f64) -> f32
    cf.br ^bb2(%2 : f32)
  ^bb2(%3: f32):  // pred: ^bb1
    return %3 : f32
  }
  func.func public @f32.reinterpret_i32(%arg0: !llvm.ptr, %arg1: i32) -> f32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = "wasm.f32_reinterpret_i32"(%1) : (i32) -> f32
    cf.br ^bb2(%2 : f32)
  ^bb2(%3: f32):  // pred: ^bb1
    return %3 : f32
  }
  func.func public @f64.reinterpret_i64(%arg0: !llvm.ptr, %arg1: i64) -> f64 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i64
    %2 = "wasm.f64_reinterpret_i64"(%1) : (i64) -> f64
    cf.br ^bb2(%2 : f64)
  ^bb2(%3: f64):  // pred: ^bb1
    return %3 : f64
  }
  func.func public @i32.reinterpret_f32(%arg0: !llvm.ptr, %arg1: f32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : f32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> f32
    %2 = "wasm.i32_reinterpret_f32"(%1) : (f32) -> i32
    cf.br ^bb2(%2 : i32)
  ^bb2(%3: i32):  // pred: ^bb1
    return %3 : i32
  }
  func.func public @i64.reinterpret_f64(%arg0: !llvm.ptr, %arg1: f64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f64 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : f64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> f64
    %2 = "wasm.i64_reinterpret_f64"(%1) : (f64) -> i64
    cf.br ^bb2(%2 : i64)
  ^bb2(%3: i64):  // pred: ^bb1
    return %3 : i64
  }
  func.func private @dora_fn_wasm_table_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_copy(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_fill(!llvm.ptr, i32, i32, !llvm.ptr, i32)
  func.func private @dora_fn_wasm_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_table_set(!llvm.ptr, i32, i32, !llvm.ptr)
  func.func private @dora_fn_wasm_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_imported_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_func_ref(!llvm.ptr, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_data_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_elem_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_raise_trap(i32)
  func.func private @dora_fn_wasm_gas_limit() -> i64
}
