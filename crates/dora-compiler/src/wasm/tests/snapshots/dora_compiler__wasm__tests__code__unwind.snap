---
source: crates/dora-compiler/src/wasm/tests/code.rs
expression: op
snapshot_kind: text
---
module {
  func.func @f0(%arg0: !llvm.ptr) {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i32 = arith.constant 3 : i32
    %c1_i64 = arith.constant 1 : i64
    "wasm.unreachable"() : () -> ()
  ^bb2:  // no predecessors
    return
  }
  func.func @f1(%arg0: !llvm.ptr) {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i32 = arith.constant 3 : i32
    %c1_i64 = arith.constant 1 : i64
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f2(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i32 = arith.constant 3 : i32
    %c1_i64 = arith.constant 1 : i64
    %c9_i32 = arith.constant 9 : i32
    cf.br ^bb2(%c9_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func @f3(%arg0: !llvm.ptr) {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i32 = arith.constant 3 : i32
    %c1_i64 = arith.constant 1 : i64
    %c1_i32 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %0 = arith.cmpi ne, %c1_i32, %c0_i32 : i32
    cf.cond_br %0, ^bb2, ^bb3
  ^bb2:  // 2 preds: ^bb1, ^bb3
    return
  ^bb3:  // pred: ^bb1
    cf.br ^bb2
  }
  func.func @f4(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i32 = arith.constant 3 : i32
    %c1_i64 = arith.constant 1 : i64
    %c9_i32 = arith.constant 9 : i32
    %c1_i32 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %0 = arith.cmpi ne, %c1_i32, %c0_i32 : i32
    cf.cond_br %0, ^bb2(%c9_i32 : i32), ^bb3(%c9_i32 : i32)
  ^bb2(%1: i32):  // 2 preds: ^bb1, ^bb3
    return %1 : i32
  ^bb3(%2: i32):  // pred: ^bb1
    cf.br ^bb2(%c3_i32 : i32)
  }
  func.func @f5(%arg0: !llvm.ptr) {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i32 = arith.constant 3 : i32
    %c1_i64 = arith.constant 1 : i64
    %c0_i32 = arith.constant 0 : i32
    cf.switch %c0_i32 : i32, [
      default: ^bb2
    ]
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f6(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i32 = arith.constant 3 : i32
    %c1_i64 = arith.constant 1 : i64
    %c9_i32 = arith.constant 9 : i32
    %c0_i32 = arith.constant 0 : i32
    cf.switch %c0_i32 : i32, [
      default: ^bb2(%c9_i32 : i32)
    ]
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func @f7(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i32 = arith.constant 3 : i32
    %c1_i64 = arith.constant 1 : i64
    %c9_i32 = arith.constant 9 : i32
    cf.br ^bb2(%c9_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func @f8(%arg0: !llvm.ptr) {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i32 = arith.constant 3 : i32
    %c1_i64 = arith.constant 1 : i64
    "wasm.unreachable"() : () -> ()
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // no predecessors
    cf.br ^bb2
  }
  func.func @f9(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i32 = arith.constant 3 : i32
    %c1_i64 = arith.constant 1 : i64
    cf.br ^bb3
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3:  // pred: ^bb1
    %c9_i32 = arith.constant 9 : i32
    cf.br ^bb2(%c9_i32 : i32)
  }
  func.func @f10(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i32 = arith.constant 3 : i32
    %c1_i64 = arith.constant 1 : i64
    %c9_i32 = arith.constant 9 : i32
    cf.br ^bb3(%c9_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // pred: ^bb1
    cf.br ^bb2(%1 : i32)
  }
  func.func @f11(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i32 = arith.constant 3 : i32
    %c1_i64 = arith.constant 1 : i64
    %c1_i32 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %0 = arith.cmpi ne, %c1_i32, %c0_i32 : i32
    cf.cond_br %0, ^bb3, ^bb4
  ^bb2(%1: i32):  // pred: ^bb3
    return %1 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %c9_i32 = arith.constant 9 : i32
    cf.br ^bb2(%c9_i32 : i32)
  ^bb4:  // pred: ^bb1
    cf.br ^bb3
  }
  func.func @f12(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i32 = arith.constant 3 : i32
    %c1_i64 = arith.constant 1 : i64
    %c9_i32 = arith.constant 9 : i32
    %c1_i32 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %0 = arith.cmpi ne, %c1_i32, %c0_i32 : i32
    cf.cond_br %0, ^bb3(%c9_i32 : i32), ^bb4(%c9_i32 : i32)
  ^bb2(%1: i32):  // pred: ^bb3
    return %1 : i32
  ^bb3(%2: i32):  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2(%2 : i32)
  ^bb4(%3: i32):  // pred: ^bb1
    cf.br ^bb3(%c3_i32 : i32)
  }
  func.func @f13(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i32 = arith.constant 3 : i32
    %c1_i64 = arith.constant 1 : i64
    %c0_i32 = arith.constant 0 : i32
    cf.switch %c0_i32 : i32, [
      default: ^bb3
    ]
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3:  // pred: ^bb1
    %c9_i32 = arith.constant 9 : i32
    cf.br ^bb2(%c9_i32 : i32)
  }
  func.func @f14(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i32 = arith.constant 3 : i32
    %c1_i64 = arith.constant 1 : i64
    %c9_i32 = arith.constant 9 : i32
    %c0_i32 = arith.constant 0 : i32
    cf.switch %c0_i32 : i32, [
      default: ^bb3(%c9_i32 : i32)
    ]
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // pred: ^bb1
    cf.br ^bb2(%1 : i32)
  }
  func.func @f15(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i32 = arith.constant 3 : i32
    %c1_i64 = arith.constant 1 : i64
    %c9_i32 = arith.constant 9 : i32
    cf.br ^bb2(%c9_i32 : i32)
  ^bb2(%0: i32):  // 2 preds: ^bb1, ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // no predecessors
    cf.br ^bb2(%1 : i32)
  }
  func.func @f16(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i32 = arith.constant 3 : i32
    %c1_i64 = arith.constant 1 : i64
    "wasm.unreachable"() : () -> ()
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // pred: ^bb4
    cf.br ^bb2(%1 : i32)
  ^bb4:  // no predecessors
    cf.br ^bb3(%c3_i32 : i32)
  }
  func.func @f17(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i32 = arith.constant 3 : i32
    %c1_i64 = arith.constant 1 : i64
    cf.br ^bb3
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %c9_i32 = arith.constant 9 : i32
    cf.br ^bb2(%c9_i32 : i32)
  ^bb4:  // no predecessors
    cf.br ^bb3
  }
  func.func @f18(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i32 = arith.constant 3 : i32
    %c1_i64 = arith.constant 1 : i64
    %c9_i32 = arith.constant 9 : i32
    cf.br ^bb3(%c9_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2(%1 : i32)
  ^bb4:  // no predecessors
    cf.br ^bb3(%c3_i32 : i32)
  }
  func.func @f19(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i32 = arith.constant 3 : i32
    %c1_i64 = arith.constant 1 : i64
    %c1_i32 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %0 = arith.cmpi ne, %c1_i32, %c0_i32 : i32
    cf.cond_br %0, ^bb3, ^bb5
  ^bb2(%1: i32):  // pred: ^bb3
    return %1 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %c9_i32 = arith.constant 9 : i32
    cf.br ^bb2(%c9_i32 : i32)
  ^bb4:  // pred: ^bb5
    cf.br ^bb3
  ^bb5:  // pred: ^bb1
    cf.br ^bb4
  }
  func.func @f20(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i32 = arith.constant 3 : i32
    %c1_i64 = arith.constant 1 : i64
    %c9_i32 = arith.constant 9 : i32
    %c1_i32 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %0 = arith.cmpi ne, %c1_i32, %c0_i32 : i32
    cf.cond_br %0, ^bb3(%c9_i32 : i32), ^bb5(%c9_i32 : i32)
  ^bb2(%1: i32):  // pred: ^bb3
    return %1 : i32
  ^bb3(%2: i32):  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2(%2 : i32)
  ^bb4:  // pred: ^bb5
    cf.br ^bb3(%c3_i32 : i32)
  ^bb5(%3: i32):  // pred: ^bb1
    cf.br ^bb4
  }
  func.func @f21(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i32 = arith.constant 3 : i32
    %c1_i64 = arith.constant 1 : i64
    %c1_i32 = arith.constant 1 : i32
    cf.switch %c1_i32 : i32, [
      default: ^bb3
    ]
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %c9_i32 = arith.constant 9 : i32
    cf.br ^bb2(%c9_i32 : i32)
  ^bb4:  // no predecessors
    cf.br ^bb3
  }
  func.func @f22(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i32 = arith.constant 3 : i32
    %c1_i64 = arith.constant 1 : i64
    %c9_i32 = arith.constant 9 : i32
    %c1_i32 = arith.constant 1 : i32
    cf.switch %c1_i32 : i32, [
      default: ^bb3(%c9_i32 : i32)
    ]
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2(%1 : i32)
  ^bb4:  // no predecessors
    cf.br ^bb3(%c3_i32 : i32)
  }
  func.func @f23(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i32 = arith.constant 3 : i32
    %c1_i64 = arith.constant 1 : i64
    %c9_i32 = arith.constant 9 : i32
    cf.br ^bb2(%c9_i32 : i32)
  ^bb2(%0: i32):  // 2 preds: ^bb1, ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // pred: ^bb4
    cf.br ^bb2(%1 : i32)
  ^bb4:  // no predecessors
    cf.br ^bb3(%c3_i32 : i32)
  }
  func.func @f24(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 0.000000e+00 : f32
    "wasm.unreachable"() : () -> ()
  ^bb2(%0: i32):  // no predecessors
    return %0 : i32
  }
  func.func @f25(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 0.000000e+00 : f32
    %c9_i32 = arith.constant 9 : i32
    cf.br ^bb3(%c9_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // pred: ^bb1
    cf.br ^bb2(%1 : i32)
  }
  func.func @f26(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i64 = arith.constant 0 : i64
    %c9_i32 = arith.constant 9 : i32
    %c1_i32 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %0 = arith.cmpi ne, %c1_i32, %c0_i32 : i32
    cf.cond_br %0, ^bb3(%c9_i32 : i32), ^bb4(%c9_i32 : i32)
  ^bb2(%1: i32):  // pred: ^bb3
    return %1 : i32
  ^bb3(%2: i32):  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2(%2 : i32)
  ^bb4(%3: i32):  // pred: ^bb1
    %4 = "wasm.eqz"(%c0_i64) : (i64) -> i32
    cf.br ^bb3(%4 : i32)
  }
  func.func @f27(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 0.000000e+00 : f32
    %c9_i32 = arith.constant 9 : i32
    %c0_i32 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    cf.switch %c0_i32 : i32, [
      default: ^bb3(%c9_i32 : i32),
      0: ^bb3(%c9_i32 : i32)
    ]
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // 2 preds: ^bb1, ^bb1
    cf.br ^bb2(%1 : i32)
  }
  func.func @f28(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 0.000000e+00 : f32
    %c9_i32 = arith.constant 9 : i32
    cf.br ^bb2(%c9_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func @f29(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 0.000000e+00 : f32
    %cst_0 = arith.constant 4.6071824188000174E+18 : f64
    "wasm.unreachable"() : () -> ()
  ^bb2(%0: i32):  // no predecessors
    return %0 : i32
  }
  func.func @f30(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 0.000000e+00 : f32
    %cst_0 = arith.constant 4.6071824188000174E+18 : f64
    %c9_i32 = arith.constant 9 : i32
    cf.br ^bb3(%c9_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // pred: ^bb1
    cf.br ^bb2(%1 : i32)
  }
  func.func @f31(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i64 = arith.constant 0 : i64
    %c1_i64 = arith.constant 1 : i64
    %c9_i32 = arith.constant 9 : i32
    %c1_i32 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %0 = arith.cmpi ne, %c1_i32, %c0_i32 : i32
    cf.cond_br %0, ^bb3(%c9_i32 : i32), ^bb4(%c9_i32 : i32)
  ^bb2(%1: i32):  // pred: ^bb3
    return %1 : i32
  ^bb3(%2: i32):  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2(%2 : i32)
  ^bb4(%3: i32):  // pred: ^bb1
    %4 = "wasm.eq"(%c0_i64, %c1_i64) : (i64, i64) -> i32
    cf.br ^bb3(%4 : i32)
  }
  func.func @f32(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 0.000000e+00 : f32
    %cst_0 = arith.constant 4.6071824188000174E+18 : f64
    %c9_i32 = arith.constant 9 : i32
    %c0_i32 = arith.constant 0 : i32
    cf.switch %c0_i32 : i32, [
      default: ^bb3(%c9_i32 : i32)
    ]
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // pred: ^bb1
    cf.br ^bb2(%1 : i32)
  }
  func.func @f33(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 0.000000e+00 : f32
    %cst_0 = arith.constant 4.6071824188000174E+18 : f64
    %c9_i32 = arith.constant 9 : i32
    cf.br ^bb2(%c9_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func @f34(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 0.000000e+00 : f32
    %cst_0 = arith.constant 4.6071824188000174E+18 : f64
    %c0_i64 = arith.constant 0 : i64
    "wasm.unreachable"() : () -> ()
  ^bb2(%0: i32):  // no predecessors
    return %0 : i32
  }
  func.func @f35(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 0.000000e+00 : f32
    %cst_0 = arith.constant 4.6071824188000174E+18 : f64
    %c0_i64 = arith.constant 0 : i64
    %c9_i32 = arith.constant 9 : i32
    cf.br ^bb3(%c9_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // pred: ^bb1
    cf.br ^bb2(%1 : i32)
  }
  func.func @f36(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %c0_i32_0 = arith.constant 0 : i32
    %c9_i32 = arith.constant 9 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %c0_i32_2 = arith.constant 0 : i32
    %0 = arith.cmpi ne, %c1_i32_1, %c0_i32_2 : i32
    cf.cond_br %0, ^bb3(%c9_i32 : i32), ^bb4(%c9_i32 : i32)
  ^bb2(%1: i32):  // pred: ^bb3
    return %1 : i32
  ^bb3(%2: i32):  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2(%2 : i32)
  ^bb4(%3: i32):  // pred: ^bb1
    %4 = "wasm.select"(%c0_i32, %c1_i32, %c0_i32_0) : (i32, i32, i32) -> i32
    cf.br ^bb3(%4 : i32)
  }
  func.func @f37(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 0.000000e+00 : f32
    %cst_0 = arith.constant 4.6071824188000174E+18 : f64
    %c0_i64 = arith.constant 0 : i64
    %c9_i32 = arith.constant 9 : i32
    %c0_i32 = arith.constant 0 : i32
    cf.switch %c0_i32 : i32, [
      default: ^bb3(%c9_i32 : i32)
    ]
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // pred: ^bb1
    cf.br ^bb2(%1 : i32)
  }
  func.func @f38(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 0.000000e+00 : f32
    %cst_0 = arith.constant 4.6071824188000174E+18 : f64
    %c1_i64 = arith.constant 1 : i64
    %c9_i32 = arith.constant 9 : i32
    cf.br ^bb2(%c9_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func @f39(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 0.000000e+00 : f32
    "wasm.unreachable"() : () -> ()
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // no predecessors
    cf.br ^bb2(%1 : i32)
  }
  func.func @f40(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 0.000000e+00 : f32
    %c9_i32 = arith.constant 9 : i32
    cf.br ^bb3(%c9_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // pred: ^bb1
    cf.br ^bb2(%1 : i32)
  }
  func.func @f41(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c9_i32 = arith.constant 9 : i32
    %c1_i32 = arith.constant 1 : i32
    %c0_i32_0 = arith.constant 0 : i32
    %0 = arith.cmpi ne, %c1_i32, %c0_i32_0 : i32
    cf.cond_br %0, ^bb3(%c9_i32 : i32), ^bb4(%c9_i32 : i32)
  ^bb2(%1: i32):  // pred: ^bb3
    return %1 : i32
  ^bb3(%2: i32):  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2(%2 : i32)
  ^bb4(%3: i32):  // pred: ^bb1
    cf.br ^bb3(%c0_i32 : i32)
  }
  func.func @f42(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 0.000000e+00 : f32
    %c9_i32 = arith.constant 9 : i32
    %c0_i32 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    cf.switch %c0_i32 : i32, [
      default: ^bb3(%c9_i32 : i32),
      0: ^bb3(%c9_i32 : i32)
    ]
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // 2 preds: ^bb1, ^bb1
    cf.br ^bb2(%1 : i32)
  }
  func.func @f43(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 0.000000e+00 : f32
    %c9_i32 = arith.constant 9 : i32
    cf.br ^bb2(%c9_i32 : i32)
  ^bb2(%0: i32):  // 2 preds: ^bb1, ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // no predecessors
    cf.br ^bb2(%1 : i32)
  }
  func.func @f44(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb4
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // no predecessors
    cf.br ^bb2(%1 : i32)
  ^bb4:  // pred: ^bb1
    %cst = arith.constant 0.000000e+00 : f32
    "wasm.unreachable"() : () -> ()
  }
  func.func @f45(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb5
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // 2 preds: ^bb4, ^bb5
    cf.br ^bb2(%1 : i32)
  ^bb4(%2: i32):  // no predecessors
    cf.br ^bb3(%2 : i32)
  ^bb5:  // pred: ^bb1
    %cst = arith.constant 0.000000e+00 : f32
    %c9_i32 = arith.constant 9 : i32
    cf.br ^bb3(%c9_i32 : i32)
  }
  func.func @f46(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb5
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // 2 preds: ^bb4, ^bb5
    cf.br ^bb2(%1 : i32)
  ^bb4(%2: i32):  // pred: ^bb6
    cf.br ^bb3(%2 : i32)
  ^bb5:  // pred: ^bb1
    %c0_i32 = arith.constant 0 : i32
    %c9_i32 = arith.constant 9 : i32
    %c1_i32 = arith.constant 1 : i32
    %c0_i32_0 = arith.constant 0 : i32
    %3 = arith.cmpi ne, %c1_i32, %c0_i32_0 : i32
    cf.cond_br %3, ^bb3(%c9_i32 : i32), ^bb6(%c9_i32 : i32)
  ^bb6(%4: i32):  // pred: ^bb5
    cf.br ^bb4(%c0_i32 : i32)
  }
  func.func @f47(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb5
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // 3 preds: ^bb4, ^bb5, ^bb5
    cf.br ^bb2(%1 : i32)
  ^bb4(%2: i32):  // no predecessors
    cf.br ^bb3(%2 : i32)
  ^bb5:  // pred: ^bb1
    %cst = arith.constant 0.000000e+00 : f32
    %c9_i32 = arith.constant 9 : i32
    %c0_i32 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    cf.switch %c0_i32 : i32, [
      default: ^bb3(%c9_i32 : i32),
      0: ^bb3(%c9_i32 : i32)
    ]
  }
  func.func @f48(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb4
  ^bb2(%0: i32):  // 2 preds: ^bb3, ^bb4
    return %0 : i32
  ^bb3(%1: i32):  // no predecessors
    cf.br ^bb2(%1 : i32)
  ^bb4:  // pred: ^bb1
    %cst = arith.constant 0.000000e+00 : f32
    %c9_i32 = arith.constant 9 : i32
    cf.br ^bb2(%c9_i32 : i32)
  }
  func.func private @dora_fn_wasm_table_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_fill(!llvm.ptr, i32, i32, !llvm.ptr, i32)
  func.func private @dora_fn_wasm_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_table_set(!llvm.ptr, i32, i32, !llvm.ptr)
  func.func private @dora_fn_wasm_imported_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_imported_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_func_ref(!llvm.ptr, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_data_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_elem_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_raise_trap(!llvm.ptr, i32)
}
