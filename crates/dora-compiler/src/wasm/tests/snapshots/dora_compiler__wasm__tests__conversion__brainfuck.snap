---
source: crates/dora-compiler/src/wasm/tests/conversion.rs
expression: op
snapshot_kind: text
---
module {
  func.func public @user_entrypoint(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[104] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    %3 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %arg0[24] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %5[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.load %11 : !llvm.ptr -> i32
    %13 = llvm.getelementptr %arg0[128] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %15 = llvm.load %14 : !llvm.ptr -> i32
    %16 = llvm.getelementptr %arg0[136] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %18 = llvm.load %0 : !llvm.ptr -> i32
    llvm.store %18, %2 : i32, !llvm.ptr
    %19 = llvm.load %4 : !llvm.ptr -> i32
    %20 = llvm.call %7(%9, %19) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> !llvm.void
    %21 = arith.addi %12, %15 : i32
    llvm.store %21, %17 : i32, !llvm.ptr
    call @user(%arg0) : (!llvm.ptr) -> ()
    %c0_i32 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32 : i32)
  ^bb2(%22: i32):  // pred: ^bb1
    return %22 : i32
  }
  func.func @comma(%arg0: !llvm.ptr) {
    %0 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %2 = llvm.getelementptr %arg0[104] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %4 = llvm.getelementptr %arg0[136] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %1 : !llvm.ptr -> i32
    %10 = llvm.load %3 : !llvm.ptr -> i32
    %11 = arith.cmpi eq, %9, %10 : i32
    %12 = arith.extui %11 : i1 to i32
    %c0_i32 = arith.constant 0 : i32
    %13 = arith.cmpi ne, %12, %c0_i32 : i32
    cf.cond_br %13, ^bb3, ^bb4
  ^bb2:  // 2 preds: ^bb3, ^bb5
    return
  ^bb3:  // pred: ^bb1
    %14 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %15 = arith.extui %14 : i32 to i64
    %16 = arith.addi %15, %c0_i64 : i64
    %17 = llvm.getelementptr %8[%16] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %18 = arith.trunci %c0_i32_0 : i32 to i8
    llvm.store volatile %18, %17 {alignment = 1 : i64} : i8, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    cf.br ^bb5
  ^bb5:  // pred: ^bb4
    %19 = llvm.load %5 : !llvm.ptr -> i32
    %20 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_1 = arith.constant 0 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c0_i64_1 : i64
    %23 = llvm.getelementptr %8[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %24 = llvm.load volatile %23 {alignment = 1 : i64} : !llvm.ptr -> i8
    %25 = arith.extui %24 : i8 to i32
    %c0_i64_2 = arith.constant 0 : i64
    %26 = arith.extui %19 : i32 to i64
    %27 = arith.addi %26, %c0_i64_2 : i64
    %28 = llvm.getelementptr %8[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %29 = arith.trunci %25 : i32 to i8
    llvm.store volatile %29, %28 {alignment = 1 : i64} : i8, !llvm.ptr
    %30 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32 = arith.constant 1 : i32
    %31 = arith.addi %30, %c1_i32 : i32
    llvm.store %31, %1 : i32, !llvm.ptr
    cf.br ^bb2
  }
  func.func @dot(%arg0: !llvm.ptr) {
    %0 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %2 = llvm.getelementptr %arg0[128] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %4 = llvm.load %3 : !llvm.ptr -> i32
    %5 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.load %6 : !llvm.ptr -> i32
    %8 = llvm.getelementptr %arg0[136] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %14 = arith.cmpi eq, %13, %4 : i32
    %15 = arith.extui %14 : i1 to i32
    %c0_i32 = arith.constant 0 : i32
    %16 = arith.cmpi ne, %15, %c0_i32 : i32
    cf.cond_br %16, ^bb3, ^bb4
  ^bb2:  // 2 preds: ^bb3, ^bb5
    return
  ^bb3:  // pred: ^bb1
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    cf.br ^bb5
  ^bb5:  // pred: ^bb4
    %17 = llvm.load %1 : !llvm.ptr -> i32
    %18 = arith.addi %7, %17 : i32
    %19 = llvm.load %9 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %20 = arith.extui %19 : i32 to i64
    %21 = arith.addi %20, %c0_i64 : i64
    %22 = llvm.getelementptr %12[%21] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %23 = llvm.load volatile %22 {alignment = 1 : i64} : !llvm.ptr -> i8
    %24 = arith.extui %23 : i8 to i32
    %c0_i64_0 = arith.constant 0 : i64
    %25 = arith.extui %18 : i32 to i64
    %26 = arith.addi %25, %c0_i64_0 : i64
    %27 = llvm.getelementptr %12[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %28 = arith.trunci %24 : i32 to i8
    llvm.store volatile %28, %27 {alignment = 1 : i64} : i8, !llvm.ptr
    %29 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32 = arith.constant 1 : i32
    %30 = arith.addi %29, %c1_i32 : i32
    llvm.store %30, %1 : i32, !llvm.ptr
    cf.br ^bb2
  }
  func.func @right(%arg0: !llvm.ptr) {
    %0 = llvm.getelementptr %arg0[136] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32 = arith.constant 1 : i32
    %3 = arith.addi %2, %c1_i32 : i32
    llvm.store %3, %1 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @left(%arg0: !llvm.ptr) {
    %0 = llvm.getelementptr %arg0[136] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32 = arith.constant 1 : i32
    %3 = arith.subi %2, %c1_i32 : i32
    llvm.store %3, %1 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @plus(%arg0: !llvm.ptr) {
    %0 = llvm.getelementptr %arg0[136] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %2 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %1 : !llvm.ptr -> i32
    %6 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %7 = arith.extui %6 : i32 to i64
    %8 = arith.addi %7, %c0_i64 : i64
    %9 = llvm.getelementptr %4[%8] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %10 = llvm.load volatile %9 {alignment = 1 : i64} : !llvm.ptr -> i8
    %11 = arith.extui %10 : i8 to i32
    %c1_i32 = arith.constant 1 : i32
    %12 = arith.addi %11, %c1_i32 : i32
    %c0_i64_0 = arith.constant 0 : i64
    %13 = arith.extui %5 : i32 to i64
    %14 = arith.addi %13, %c0_i64_0 : i64
    %15 = llvm.getelementptr %4[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %16 = arith.trunci %12 : i32 to i8
    llvm.store volatile %16, %15 {alignment = 1 : i64} : i8, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @minus(%arg0: !llvm.ptr) {
    %0 = llvm.getelementptr %arg0[136] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %2 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %1 : !llvm.ptr -> i32
    %6 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %7 = arith.extui %6 : i32 to i64
    %8 = arith.addi %7, %c0_i64 : i64
    %9 = llvm.getelementptr %4[%8] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %10 = llvm.load volatile %9 {alignment = 1 : i64} : !llvm.ptr -> i8
    %11 = arith.extui %10 : i8 to i32
    %c1_i32 = arith.constant 1 : i32
    %12 = arith.subi %11, %c1_i32 : i32
    %c0_i64_0 = arith.constant 0 : i64
    %13 = arith.extui %5 : i32 to i64
    %14 = arith.addi %13, %c0_i64_0 : i64
    %15 = llvm.getelementptr %4[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %16 = arith.trunci %12 : i32 to i8
    llvm.store volatile %16, %15 {alignment = 1 : i64} : i8, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @repeat(%arg0: !llvm.ptr) -> i32 {
    %0 = llvm.getelementptr %arg0[136] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    %2 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %9 = llvm.load volatile %8 {alignment = 1 : i64} : !llvm.ptr -> i8
    %10 = arith.extui %9 : i8 to i32
    %c0_i32 = arith.constant 0 : i32
    %11 = arith.cmpi eq, %10, %c0_i32 : i32
    %12 = arith.extui %11 : i1 to i32
    %c0_i32_0 = arith.constant 0 : i32
    %13 = arith.cmpi eq, %12, %c0_i32_0 : i32
    %14 = arith.extui %13 : i1 to i32
    cf.br ^bb2(%14 : i32)
  ^bb2(%15: i32):  // pred: ^bb1
    return %15 : i32
  }
  func.func @user(%arg0: !llvm.ptr) {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func private @dora_fn_wasm_table_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_copy(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_fill(!llvm.ptr, i32, i32, !llvm.ptr, i32)
  func.func private @dora_fn_wasm_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_table_set(!llvm.ptr, i32, i32, !llvm.ptr)
  func.func private @dora_fn_wasm_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_imported_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_func_ref(!llvm.ptr, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_data_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_elem_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_raise_trap(i32)
}
