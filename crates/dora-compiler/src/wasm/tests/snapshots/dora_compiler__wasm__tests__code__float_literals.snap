---
source: crates/dora-compiler/src/wasm/tests/code.rs
expression: op
snapshot_kind: text
---
module {
  func.func public @f32.nan(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 2.14328934E+9 : f32
    %0 = "wasm.i32_reinterpret_f32"(%cst) : (f32) -> i32
    cf.br ^bb2(%0 : i32)
  ^bb2(%1: i32):  // pred: ^bb1
    return %1 : i32
  }
  func.func public @f32.positive_nan(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 2.14328934E+9 : f32
    %0 = "wasm.i32_reinterpret_f32"(%cst) : (f32) -> i32
    cf.br ^bb2(%0 : i32)
  ^bb2(%1: i32):  // pred: ^bb1
    return %1 : i32
  }
  func.func public @f32.negative_nan(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 4.29077299E+9 : f32
    %0 = "wasm.i32_reinterpret_f32"(%cst) : (f32) -> i32
    cf.br ^bb2(%0 : i32)
  ^bb2(%1: i32):  // pred: ^bb1
    return %1 : i32
  }
  func.func public @f32.plain_nan(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 2.14328934E+9 : f32
    %0 = "wasm.i32_reinterpret_f32"(%cst) : (f32) -> i32
    cf.br ^bb2(%0 : i32)
  ^bb2(%1: i32):  // pred: ^bb1
    return %1 : i32
  }
  func.func public @f32.informally_known_as_plain_snan(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 2.14119219E+9 : f32
    %0 = "wasm.i32_reinterpret_f32"(%cst) : (f32) -> i32
    cf.br ^bb2(%0 : i32)
  ^bb2(%1: i32):  // pred: ^bb1
    return %1 : i32
  }
  func.func public @f32.all_ones_nan(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 4.2949673E+9 : f32
    %0 = "wasm.i32_reinterpret_f32"(%cst) : (f32) -> i32
    cf.br ^bb2(%0 : i32)
  ^bb2(%1: i32):  // pred: ^bb1
    return %1 : i32
  }
  func.func public @f32.misc_nan(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 2.13916966E+9 : f32
    %0 = "wasm.i32_reinterpret_f32"(%cst) : (f32) -> i32
    cf.br ^bb2(%0 : i32)
  ^bb2(%1: i32):  // pred: ^bb1
    return %1 : i32
  }
  func.func public @f32.misc_positive_nan(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 2.14225728E+9 : f32
    %0 = "wasm.i32_reinterpret_f32"(%cst) : (f32) -> i32
    cf.br ^bb2(%0 : i32)
  ^bb2(%1: i32):  // pred: ^bb1
    return %1 : i32
  }
  func.func public @f32.misc_negative_nan(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 4.28937958E+9 : f32
    %0 = "wasm.i32_reinterpret_f32"(%cst) : (f32) -> i32
    cf.br ^bb2(%0 : i32)
  ^bb2(%1: i32):  // pred: ^bb1
    return %1 : i32
  }
  func.func public @f32.infinity(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 2.13909504E+9 : f32
    %0 = "wasm.i32_reinterpret_f32"(%cst) : (f32) -> i32
    cf.br ^bb2(%0 : i32)
  ^bb2(%1: i32):  // pred: ^bb1
    return %1 : i32
  }
  func.func public @f32.positive_infinity(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 2.13909504E+9 : f32
    %0 = "wasm.i32_reinterpret_f32"(%cst) : (f32) -> i32
    cf.br ^bb2(%0 : i32)
  ^bb2(%1: i32):  // pred: ^bb1
    return %1 : i32
  }
  func.func public @f32.negative_infinity(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 4.28657869E+9 : f32
    %0 = "wasm.i32_reinterpret_f32"(%cst) : (f32) -> i32
    cf.br ^bb2(%0 : i32)
  ^bb2(%1: i32):  // pred: ^bb1
    return %1 : i32
  }
  func.func public @f32.zero(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 0.000000e+00 : f32
    %0 = "wasm.i32_reinterpret_f32"(%cst) : (f32) -> i32
    cf.br ^bb2(%0 : i32)
  ^bb2(%1: i32):  // pred: ^bb1
    return %1 : i32
  }
  func.func public @f32.positive_zero(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 0.000000e+00 : f32
    %0 = "wasm.i32_reinterpret_f32"(%cst) : (f32) -> i32
    cf.br ^bb2(%0 : i32)
  ^bb2(%1: i32):  // pred: ^bb1
    return %1 : i32
  }
  func.func public @f32.negative_zero(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 2.14748365E+9 : f32
    %0 = "wasm.i32_reinterpret_f32"(%cst) : (f32) -> i32
    cf.br ^bb2(%0 : i32)
  ^bb2(%1: i32):  // pred: ^bb1
    return %1 : i32
  }
  func.func public @f32.misc(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 1.08691866E+9 : f32
    %0 = "wasm.i32_reinterpret_f32"(%cst) : (f32) -> i32
    cf.br ^bb2(%0 : i32)
  ^bb2(%1: i32):  // pred: ^bb1
    return %1 : i32
  }
  func.func public @f32.min_positive(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 1.000000e+00 : f32
    %0 = "wasm.i32_reinterpret_f32"(%cst) : (f32) -> i32
    cf.br ^bb2(%0 : i32)
  ^bb2(%1: i32):  // pred: ^bb1
    return %1 : i32
  }
  func.func public @f32.min_normal(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 0x4B000000 : f32
    %0 = "wasm.i32_reinterpret_f32"(%cst) : (f32) -> i32
    cf.br ^bb2(%0 : i32)
  ^bb2(%1: i32):  // pred: ^bb1
    return %1 : i32
  }
  func.func public @f32.max_finite(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 2.13909504E+9 : f32
    %0 = "wasm.i32_reinterpret_f32"(%cst) : (f32) -> i32
    cf.br ^bb2(%0 : i32)
  ^bb2(%1: i32):  // pred: ^bb1
    return %1 : i32
  }
  func.func public @f32.max_subnormal(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 0x4AFFFFFE : f32
    %0 = "wasm.i32_reinterpret_f32"(%cst) : (f32) -> i32
    cf.br ^bb2(%0 : i32)
  ^bb2(%1: i32):  // pred: ^bb1
    return %1 : i32
  }
  func.func public @f32.trailing_dot(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 1.1492393E+9 : f32
    %0 = "wasm.i32_reinterpret_f32"(%cst) : (f32) -> i32
    cf.br ^bb2(%0 : i32)
  ^bb2(%1: i32):  // pred: ^bb1
    return %1 : i32
  }
  func.func public @f32.misc_int(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 1.20072666E+9 : f32
    %0 = "wasm.i32_reinterpret_f32"(%cst) : (f32) -> i32
    cf.br ^bb2(%0 : i32)
  ^bb2(%1: i32):  // pred: ^bb1
    return %1 : i32
  }
  func.func public @f32.large_int(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 1.73644186E+9 : f32
    %0 = "wasm.i32_reinterpret_f32"(%cst) : (f32) -> i32
    cf.br ^bb2(%0 : i32)
  ^bb2(%1: i32):  // pred: ^bb1
    return %1 : i32
  }
  func.func public @f32.min_int32(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 3.47288371E+9 : f32
    %0 = "wasm.i32_reinterpret_f32"(%cst) : (f32) -> i32
    cf.br ^bb2(%0 : i32)
  ^bb2(%1: i32):  // pred: ^bb1
    return %1 : i32
  }
  func.func public @f32.min_int64(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 3.74131917E+9 : f32
    %0 = "wasm.i32_reinterpret_f32"(%cst) : (f32) -> i32
    cf.br ^bb2(%0 : i32)
  ^bb2(%1: i32):  // pred: ^bb1
    return %1 : i32
  }
  func.func public @f32_dec.zero(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 0.000000e+00 : f32
    %0 = "wasm.i32_reinterpret_f32"(%cst) : (f32) -> i32
    cf.br ^bb2(%0 : i32)
  ^bb2(%1: i32):  // pred: ^bb1
    return %1 : i32
  }
  func.func public @f32_dec.positive_zero(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 0.000000e+00 : f32
    %0 = "wasm.i32_reinterpret_f32"(%cst) : (f32) -> i32
    cf.br ^bb2(%0 : i32)
  ^bb2(%1: i32):  // pred: ^bb1
    return %1 : i32
  }
  func.func public @f32_dec.negative_zero(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 2.14748365E+9 : f32
    %0 = "wasm.i32_reinterpret_f32"(%cst) : (f32) -> i32
    cf.br ^bb2(%0 : i32)
  ^bb2(%1: i32):  // pred: ^bb1
    return %1 : i32
  }
  func.func public @f32_dec.misc(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 1.08691866E+9 : f32
    %0 = "wasm.i32_reinterpret_f32"(%cst) : (f32) -> i32
    cf.br ^bb2(%0 : i32)
  ^bb2(%1: i32):  // pred: ^bb1
    return %1 : i32
  }
  func.func public @f32_dec.min_positive(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 1.000000e+00 : f32
    %0 = "wasm.i32_reinterpret_f32"(%cst) : (f32) -> i32
    cf.br ^bb2(%0 : i32)
  ^bb2(%1: i32):  // pred: ^bb1
    return %1 : i32
  }
  func.func public @f32_dec.min_normal(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 0x4B000000 : f32
    %0 = "wasm.i32_reinterpret_f32"(%cst) : (f32) -> i32
    cf.br ^bb2(%0 : i32)
  ^bb2(%1: i32):  // pred: ^bb1
    return %1 : i32
  }
  func.func public @f32_dec.max_subnormal(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 0x4AFFFFFE : f32
    %0 = "wasm.i32_reinterpret_f32"(%cst) : (f32) -> i32
    cf.br ^bb2(%0 : i32)
  ^bb2(%1: i32):  // pred: ^bb1
    return %1 : i32
  }
  func.func public @f32_dec.max_finite(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 2.13909504E+9 : f32
    %0 = "wasm.i32_reinterpret_f32"(%cst) : (f32) -> i32
    cf.br ^bb2(%0 : i32)
  ^bb2(%1: i32):  // pred: ^bb1
    return %1 : i32
  }
  func.func public @f32_dec.trailing_dot(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 1.3435543E+9 : f32
    %0 = "wasm.i32_reinterpret_f32"(%cst) : (f32) -> i32
    cf.br ^bb2(%0 : i32)
  ^bb2(%1: i32):  // pred: ^bb1
    return %1 : i32
  }
  func.func public @f32_dec.misc_int(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 1.17865779E+9 : f32
    %0 = "wasm.i32_reinterpret_f32"(%cst) : (f32) -> i32
    cf.br ^bb2(%0 : i32)
  ^bb2(%1: i32):  // pred: ^bb1
    return %1 : i32
  }
  func.func public @f32_dec.large_int(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 1.62198144E+9 : f32
    %0 = "wasm.i32_reinterpret_f32"(%cst) : (f32) -> i32
    cf.br ^bb2(%0 : i32)
  ^bb2(%1: i32):  // pred: ^bb1
    return %1 : i32
  }
  func.func public @f32_dec.min_int32(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 3.47288371E+9 : f32
    %0 = "wasm.i32_reinterpret_f32"(%cst) : (f32) -> i32
    cf.br ^bb2(%0 : i32)
  ^bb2(%1: i32):  // pred: ^bb1
    return %1 : i32
  }
  func.func public @f32_dec.min_int64(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 3.74131917E+9 : f32
    %0 = "wasm.i32_reinterpret_f32"(%cst) : (f32) -> i32
    cf.br ^bb2(%0 : i32)
  ^bb2(%1: i32):  // pred: ^bb1
    return %1 : i32
  }
  func.func public @f32_dec.root_beer_float(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 1.06535322E+9 : f32
    %0 = "wasm.i32_reinterpret_f32"(%cst) : (f32) -> i32
    cf.br ^bb2(%0 : i32)
  ^bb2(%1: i32):  // pred: ^bb1
    return %1 : i32
  }
  func.func public @f64.nan(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 9.2211202370410906E+18 : f64
    %0 = "wasm.i64_reinterpret_f64"(%cst) : (f64) -> i64
    cf.br ^bb2(%0 : i64)
  ^bb2(%1: i64):  // pred: ^bb1
    return %1 : i64
  }
  func.func public @f64.positive_nan(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 9.2211202370410906E+18 : f64
    %0 = "wasm.i64_reinterpret_f64"(%cst) : (f64) -> i64
    cf.br ^bb2(%0 : i64)
  ^bb2(%1: i64):  // pred: ^bb1
    return %1 : i64
  }
  func.func public @f64.negative_nan(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 1.8444492273895866E+19 : f64
    %0 = "wasm.i64_reinterpret_f64"(%cst) : (f64) -> i64
    cf.br ^bb2(%0 : i64)
  ^bb2(%1: i64):  // pred: ^bb1
    return %1 : i64
  }
  func.func public @f64.plain_nan(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 9.2211202370410906E+18 : f64
    %0 = "wasm.i64_reinterpret_f64"(%cst) : (f64) -> i64
    cf.br ^bb2(%0 : i64)
  ^bb2(%1: i64):  // pred: ^bb1
    return %1 : i64
  }
  func.func public @f64.informally_known_as_plain_snan(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 9.2199943371342479E+18 : f64
    %0 = "wasm.i64_reinterpret_f64"(%cst) : (f64) -> i64
    cf.br ^bb2(%0 : i64)
  ^bb2(%1: i64):  // pred: ^bb1
    return %1 : i64
  }
  func.func public @f64.all_ones_nan(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 1.8446744073709552E+19 : f64
    %0 = "wasm.i64_reinterpret_f64"(%cst) : (f64) -> i64
    cf.br ^bb2(%0 : i64)
  ^bb2(%1: i64):  // pred: ^bb1
    return %1 : i64
  }
  func.func public @f64.misc_nan(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 9.2188884532257495E+18 : f64
    %0 = "wasm.i64_reinterpret_f64"(%cst) : (f64) -> i64
    cf.br ^bb2(%0 : i64)
  ^bb2(%1: i64):  // pred: ^bb1
    return %1 : i64
  }
  func.func public @f64.misc_positive_nan(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 9.219717281780009E+18 : f64
    %0 = "wasm.i64_reinterpret_f64"(%cst) : (f64) -> i64
    cf.br ^bb2(%0 : i64)
  ^bb2(%1: i64):  // pred: ^bb1
    return %1 : i64
  }
  func.func public @f64.misc_negative_nan(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 1.8442992325002076E+19 : f64
    %0 = "wasm.i64_reinterpret_f64"(%cst) : (f64) -> i64
    cf.br ^bb2(%0 : i64)
  ^bb2(%1: i64):  // pred: ^bb1
    return %1 : i64
  }
  func.func public @f64.infinity(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 9.2188684372274053E+18 : f64
    %0 = "wasm.i64_reinterpret_f64"(%cst) : (f64) -> i64
    cf.br ^bb2(%0 : i64)
  ^bb2(%1: i64):  // pred: ^bb1
    return %1 : i64
  }
  func.func public @f64.positive_infinity(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 9.2188684372274053E+18 : f64
    %0 = "wasm.i64_reinterpret_f64"(%cst) : (f64) -> i64
    cf.br ^bb2(%0 : i64)
  ^bb2(%1: i64):  // pred: ^bb1
    return %1 : i64
  }
  func.func public @f64.negative_infinity(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 1.8442240474082181E+19 : f64
    %0 = "wasm.i64_reinterpret_f64"(%cst) : (f64) -> i64
    cf.br ^bb2(%0 : i64)
  ^bb2(%1: i64):  // pred: ^bb1
    return %1 : i64
  }
  func.func public @f64.zero(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 0.000000e+00 : f64
    %0 = "wasm.i64_reinterpret_f64"(%cst) : (f64) -> i64
    cf.br ^bb2(%0 : i64)
  ^bb2(%1: i64):  // pred: ^bb1
    return %1 : i64
  }
  func.func public @f64.positive_zero(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 0.000000e+00 : f64
    %0 = "wasm.i64_reinterpret_f64"(%cst) : (f64) -> i64
    cf.br ^bb2(%0 : i64)
  ^bb2(%1: i64):  // pred: ^bb1
    return %1 : i64
  }
  func.func public @f64.negative_zero(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 9.2233720368547758E+18 : f64
    %0 = "wasm.i64_reinterpret_f64"(%cst) : (f64) -> i64
    cf.br ^bb2(%0 : i64)
  ^bb2(%1: i64):  // pred: ^bb1
    return %1 : i64
  }
  func.func public @f64.misc(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 4.6187602561794161E+18 : f64
    %0 = "wasm.i64_reinterpret_f64"(%cst) : (f64) -> i64
    cf.br ^bb2(%0 : i64)
  ^bb2(%1: i64):  // pred: ^bb1
    return %1 : i64
  }
  func.func public @f64.min_positive(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 1.000000e+00 : f64
    %0 = "wasm.i64_reinterpret_f64"(%cst) : (f64) -> i64
    cf.br ^bb2(%0 : i64)
  ^bb2(%1: i64):  // pred: ^bb1
    return %1 : i64
  }
  func.func public @f64.min_normal(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 0x4330000000000000 : f64
    %0 = "wasm.i64_reinterpret_f64"(%cst) : (f64) -> i64
    cf.br ^bb2(%0 : i64)
  ^bb2(%1: i64):  // pred: ^bb1
    return %1 : i64
  }
  func.func public @f64.max_subnormal(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 0x432FFFFFFFFFFFFE : f64
    %0 = "wasm.i64_reinterpret_f64"(%cst) : (f64) -> i64
    cf.br ^bb2(%0 : i64)
  ^bb2(%1: i64):  // pred: ^bb1
    return %1 : i64
  }
  func.func public @f64.max_finite(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 9.2188684372274053E+18 : f64
    %0 = "wasm.i64_reinterpret_f64"(%cst) : (f64) -> i64
    cf.br ^bb2(%0 : i64)
  ^bb2(%1: i64):  // pred: ^bb1
    return %1 : i64
  }
  func.func public @f64.trailing_dot(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 5.057542381537067E+18 : f64
    %0 = "wasm.i64_reinterpret_f64"(%cst) : (f64) -> i64
    cf.br ^bb2(%0 : i64)
  ^bb2(%1: i64):  // pred: ^bb1
    return %1 : i64
  }
  func.func public @f64.misc_int(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 4.6798604809933947E+18 : f64
    %0 = "wasm.i64_reinterpret_f64"(%cst) : (f64) -> i64
    cf.br ^bb2(%0 : i64)
  ^bb2(%1: i64):  // pred: ^bb1
    return %1 : i64
  }
  func.func public @f64.large_int(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 4.9674703889896571E+18 : f64
    %0 = "wasm.i64_reinterpret_f64"(%cst) : (f64) -> i64
    cf.br ^bb2(%0 : i64)
  ^bb2(%1: i64):  // pred: ^bb1
    return %1 : i64
  }
  func.func public @f64.min_int32(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 1.3970166044103279E+19 : f64
    %0 = "wasm.i64_reinterpret_f64"(%cst) : (f64) -> i64
    cf.br ^bb2(%0 : i64)
  ^bb2(%1: i64):  // pred: ^bb1
    return %1 : i64
  }
  func.func public @f64.min_int64(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 1.4114281232179134E+19 : f64
    %0 = "wasm.i64_reinterpret_f64"(%cst) : (f64) -> i64
    cf.br ^bb2(%0 : i64)
  ^bb2(%1: i64):  // pred: ^bb1
    return %1 : i64
  }
  func.func public @f64_dec.zero(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 0.000000e+00 : f64
    %0 = "wasm.i64_reinterpret_f64"(%cst) : (f64) -> i64
    cf.br ^bb2(%0 : i64)
  ^bb2(%1: i64):  // pred: ^bb1
    return %1 : i64
  }
  func.func public @f64_dec.positive_zero(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 0.000000e+00 : f64
    %0 = "wasm.i64_reinterpret_f64"(%cst) : (f64) -> i64
    cf.br ^bb2(%0 : i64)
  ^bb2(%1: i64):  // pred: ^bb1
    return %1 : i64
  }
  func.func public @f64_dec.negative_zero(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 9.2233720368547758E+18 : f64
    %0 = "wasm.i64_reinterpret_f64"(%cst) : (f64) -> i64
    cf.br ^bb2(%0 : i64)
  ^bb2(%1: i64):  // pred: ^bb1
    return %1 : i64
  }
  func.func public @f64_dec.misc(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 4.6187602561794161E+18 : f64
    %0 = "wasm.i64_reinterpret_f64"(%cst) : (f64) -> i64
    cf.br ^bb2(%0 : i64)
  ^bb2(%1: i64):  // pred: ^bb1
    return %1 : i64
  }
  func.func public @f64_dec.min_positive(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 1.000000e+00 : f64
    %0 = "wasm.i64_reinterpret_f64"(%cst) : (f64) -> i64
    cf.br ^bb2(%0 : i64)
  ^bb2(%1: i64):  // pred: ^bb1
    return %1 : i64
  }
  func.func public @f64_dec.min_normal(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 0x4330000000000000 : f64
    %0 = "wasm.i64_reinterpret_f64"(%cst) : (f64) -> i64
    cf.br ^bb2(%0 : i64)
  ^bb2(%1: i64):  // pred: ^bb1
    return %1 : i64
  }
  func.func public @f64_dec.max_subnormal(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 0x432FFFFFFFFFFFFE : f64
    %0 = "wasm.i64_reinterpret_f64"(%cst) : (f64) -> i64
    cf.br ^bb2(%0 : i64)
  ^bb2(%1: i64):  // pred: ^bb1
    return %1 : i64
  }
  func.func public @f64_dec.max_finite(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 9.2188684372274053E+18 : f64
    %0 = "wasm.i64_reinterpret_f64"(%cst) : (f64) -> i64
    cf.br ^bb2(%0 : i64)
  ^bb2(%1: i64):  // pred: ^bb1
    return %1 : i64
  }
  func.func public @f64_dec.trailing_dot(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 6.1030214530491197E+18 : f64
    %0 = "wasm.i64_reinterpret_f64"(%cst) : (f64) -> i64
    cf.br ^bb2(%0 : i64)
  ^bb2(%1: i64):  // pred: ^bb1
    return %1 : i64
  }
  func.func public @f64_dec.misc_int(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 4.6680123498509107E+18 : f64
    %0 = "wasm.i64_reinterpret_f64"(%cst) : (f64) -> i64
    cf.br ^bb2(%0 : i64)
  ^bb2(%1: i64):  // pred: ^bb1
    return %1 : i64
  }
  func.func public @f64_dec.large_int(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 4.9060199102040996E+18 : f64
    %0 = "wasm.i64_reinterpret_f64"(%cst) : (f64) -> i64
    cf.br ^bb2(%0 : i64)
  ^bb2(%1: i64):  // pred: ^bb1
    return %1 : i64
  }
  func.func public @f64_dec.min_int32(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 1.3970166044103279E+19 : f64
    %0 = "wasm.i64_reinterpret_f64"(%cst) : (f64) -> i64
    cf.br ^bb2(%0 : i64)
  ^bb2(%1: i64):  // pred: ^bb1
    return %1 : i64
  }
  func.func public @f64_dec.min_int64(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 1.4114281232179134E+19 : f64
    %0 = "wasm.i64_reinterpret_f64"(%cst) : (f64) -> i64
    cf.br ^bb2(%0 : i64)
  ^bb2(%1: i64):  // pred: ^bb1
    return %1 : i64
  }
  func.func public @f64_dec.root_beer_float(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 4.6071824193359457E+18 : f64
    %0 = "wasm.i64_reinterpret_f64"(%cst) : (f64) -> i64
    cf.br ^bb2(%0 : i64)
  ^bb2(%1: i64):  // pred: ^bb1
    return %1 : i64
  }
  func.func public @"f32-dec-sep1"(%arg0: !llvm.ptr) -> f32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 1.23234816E+9 : f32
    cf.br ^bb2(%cst : f32)
  ^bb2(%0: f32):  // pred: ^bb1
    return %0 : f32
  }
  func.func public @"f32-dec-sep2"(%arg0: !llvm.ptr) -> f32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 1.14884608E+9 : f32
    cf.br ^bb2(%cst : f32)
  ^bb2(%0: f32):  // pred: ^bb1
    return %0 : f32
  }
  func.func public @"f32-dec-sep3"(%arg0: !llvm.ptr) -> f32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 1.14889754E+9 : f32
    cf.br ^bb2(%cst : f32)
  ^bb2(%0: f32):  // pred: ^bb1
    return %0 : f32
  }
  func.func public @"f32-dec-sep4"(%arg0: !llvm.ptr) -> f32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 1.48275853E+9 : f32
    cf.br ^bb2(%cst : f32)
  ^bb2(%0: f32):  // pred: ^bb1
    return %0 : f32
  }
  func.func public @"f32-dec-sep5"(%arg0: !llvm.ptr) -> f32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 1.84743898E+9 : f32
    cf.br ^bb2(%cst : f32)
  ^bb2(%0: f32):  // pred: ^bb1
    return %0 : f32
  }
  func.func public @"f32-hex-sep1"(%arg0: !llvm.ptr) -> f32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 1.29400422E+9 : f32
    cf.br ^bb2(%cst : f32)
  ^bb2(%0: f32):  // pred: ^bb1
    return %0 : f32
  }
  func.func public @"f32-hex-sep2"(%arg0: !llvm.ptr) -> f32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 1.20514342E+9 : f32
    cf.br ^bb2(%cst : f32)
  ^bb2(%0: f32):  // pred: ^bb1
    return %0 : f32
  }
  func.func public @"f32-hex-sep3"(%arg0: !llvm.ptr) -> f32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 1.19334502E+9 : f32
    cf.br ^bb2(%cst : f32)
  ^bb2(%0: f32):  // pred: ^bb1
    return %0 : f32
  }
  func.func public @"f32-hex-sep4"(%arg0: !llvm.ptr) -> f32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 1.24046541E+9 : f32
    cf.br ^bb2(%cst : f32)
  ^bb2(%0: f32):  // pred: ^bb1
    return %0 : f32
  }
  func.func public @"f32-hex-sep5"(%arg0: !llvm.ptr) -> f32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 1.43731917E+9 : f32
    cf.br ^bb2(%cst : f32)
  ^bb2(%0: f32):  // pred: ^bb1
    return %0 : f32
  }
  func.func public @"f64-dec-sep1"(%arg0: !llvm.ptr) -> f64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 4.6968371466846863E+18 : f64
    cf.br ^bb2(%cst : f64)
  ^bb2(%0: f64):  // pred: ^bb1
    return %0 : f64
  }
  func.func public @"f64-dec-sep2"(%arg0: !llvm.ptr) -> f64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 4.6520073088411894E+18 : f64
    cf.br ^bb2(%cst : f64)
  ^bb2(%0: f64):  // pred: ^bb1
    return %0 : f64
  }
  func.func public @"f64-dec-sep3"(%arg0: !llvm.ptr) -> f64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 4.6520349425766595E+18 : f64
    cf.br ^bb2(%cst : f64)
  ^bb2(%0: f64):  // pred: ^bb1
    return %0 : f64
  }
  func.func public @"f64-dec-sep4"(%arg0: !llvm.ptr) -> f64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 2.7968370191268444E+18 : f64
    cf.br ^bb2(%cst : f64)
  ^bb2(%0: f64):  // pred: ^bb1
    return %0 : f64
  }
  func.func public @"f64-dec-sep5"(%arg0: !llvm.ptr) -> f64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 5.0270615073621197E+18 : f64
    cf.br ^bb2(%cst : f64)
  ^bb2(%0: f64):  // pred: ^bb1
    return %0 : f64
  }
  func.func public @"f64-hex-sep1"(%arg0: !llvm.ptr) -> f64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 4.8385197941331855E+18 : f64
    cf.br ^bb2(%cst : f64)
  ^bb2(%0: f64):  // pred: ^bb1
    return %0 : f64
  }
  func.func public @"f64-hex-sep2"(%arg0: !llvm.ptr) -> f64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 4.6822317152576471E+18 : f64
    cf.br ^bb2(%cst : f64)
  ^bb2(%0: f64):  // pred: ^bb1
    return %0 : f64
  }
  func.func public @"f64-hex-sep3"(%arg0: !llvm.ptr) -> f64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 4.6758974895741143E+18 : f64
    cf.br ^bb2(%cst : f64)
  ^bb2(%0: f64):  // pred: ^bb1
    return %0 : f64
  }
  func.func public @"f64-hex-sep4"(%arg0: !llvm.ptr) -> f64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 4.7011950610213765E+18 : f64
    cf.br ^bb2(%cst : f64)
  ^bb2(%0: f64):  // pred: ^bb1
    return %0 : f64
  }
  func.func public @"f64-hex-sep5"(%arg0: !llvm.ptr) -> f64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 4.8068801404201492E+18 : f64
    cf.br ^bb2(%cst : f64)
  ^bb2(%0: f64):  // pred: ^bb1
    return %0 : f64
  }
  func.func private @dora_fn_wasm_table_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_copy(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_fill(!llvm.ptr, i32, i32, !llvm.ptr, i32)
  func.func private @dora_fn_wasm_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_table_set(!llvm.ptr, i32, i32, !llvm.ptr)
  func.func private @dora_fn_wasm_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_imported_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_func_ref(!llvm.ptr, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_data_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_elem_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_raise_trap(i32)
}
