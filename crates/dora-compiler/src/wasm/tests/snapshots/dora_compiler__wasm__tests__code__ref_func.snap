---
source: crates/dora-compiler/src/wasm/tests/code.rs
expression: op
snapshot_kind: text
---
module {
  func.func @g(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32 = arith.constant 1 : i32
    %2 = "wasm.add"(%1, %c1_i32) : (i32, i32) -> i32
    cf.br ^bb2(%2 : i32)
  ^bb2(%3: i32):  // pred: ^bb1
    return %3 : i32
  }
  func.func @f1(%arg0: !llvm.ptr) {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c5_i32 = arith.constant 5 : i32
    %0 = call @dora_fn_wasm_func_ref(%arg0, %c5_i32) : (!llvm.ptr, i32) -> !llvm.ptr
    %c6_i32 = arith.constant 6 : i32
    %1 = call @dora_fn_wasm_func_ref(%arg0, %c6_i32) : (!llvm.ptr, i32) -> !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @gf1(%arg0: !llvm.ptr) {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @gf2(%arg0: !llvm.ptr) {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @ff1(%arg0: !llvm.ptr) {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @ff2(%arg0: !llvm.ptr) {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f6(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %0 = call @dora_fn_wasm_func_ref(%arg0, %c0_i32) : (!llvm.ptr, i32) -> !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %2 = arith.cmpi eq, %1, %c0_i32_0 : i32
    %3 = arith.extui %2 : i1 to i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func @f7(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %0 = call @dora_fn_wasm_func_ref(%arg0, %c1_i32) : (!llvm.ptr, i32) -> !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi eq, %1, %c0_i32 : i32
    %3 = arith.extui %2 : i1 to i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func @f8(%arg0: !llvm.ptr) -> i32 {
    %0 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    %3 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %4 = arith.cmpi eq, %3, %c0_i32 : i32
    %5 = arith.extui %4 : i1 to i32
    cf.br ^bb2(%5 : i32)
  ^bb2(%6: i32):  // pred: ^bb1
    return %6 : i32
  }
  func.func @f9(%arg0: !llvm.ptr) {
    %0 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %2 = call @dora_fn_wasm_func_ref(%arg0, %c0_i32) : (!llvm.ptr, i32) -> !llvm.ptr
    llvm.store %2, %1 : !llvm.ptr, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f10(%arg0: !llvm.ptr) {
    %0 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %2 = call @dora_fn_wasm_func_ref(%arg0, %c1_i32) : (!llvm.ptr, i32) -> !llvm.ptr
    llvm.store %2, %1 : !llvm.ptr, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f11(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.getelementptr %arg0[40] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %arg0[48] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.load %4 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c0_i32_0 = arith.constant 0 : i32
    %7 = call @dora_fn_wasm_func_ref(%arg0, %c0_i32_0) : (!llvm.ptr, i32) -> !llvm.ptr
    %c0_i32_1 = arith.constant 0 : i32
    "wasm.table_set"(%c0_i32_1, %c0_i32, %7) : (i32, i32, !llvm.ptr) -> ()
    %8 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_2 = arith.constant 0 : i32
    %9 = arith.cmpi ult, %c0_i32_2, %6 : i32
    cf.cond_br %9, ^bb3, ^bb4
  ^bb2(%10: i32):  // pred: ^bb7
    return %10 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %11 = llvm.getelementptr %5[%c0_i32_2] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.load %12 : !llvm.ptr -> i32
    %c0_i32_3 = arith.constant 0 : i32
    %14 = arith.cmpi eq, %13, %c0_i32_3 : i32
    cf.cond_br %14, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 3 preds: ^bb3, ^bb6, ^bb8
    %15 = llvm.getelementptr %12[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %12[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.getelementptr %12[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %18 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.load %16 : !llvm.ptr -> i32
    %20 = llvm.load %17 : !llvm.ptr -> !llvm.ptr
    %21 = llvm.load %18 : !llvm.ptr -> i32
    %c0_i32_4 = arith.constant 0 : i32
    %22 = arith.cmpi eq, %21, %c0_i32_4 : i32
    %23 = arith.cmpi ne, %2, %19 : i32
    %24 = arith.ori %22, %23 : i1
    cf.cond_br %24, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // pred: ^bb5
    %25 = llvm.call %18(%8) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (i32) -> i32
    cf.br ^bb2(%25 : i32)
  ^bb8:  // pred: ^bb5
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb5
  }
  func.func @f12(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.getelementptr %arg0[40] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %arg0[48] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.load %4 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %7 = call @dora_fn_wasm_func_ref(%arg0, %c1_i32) : (!llvm.ptr, i32) -> !llvm.ptr
    %c0_i32_0 = arith.constant 0 : i32
    "wasm.table_set"(%c0_i32_0, %c0_i32, %7) : (i32, i32, !llvm.ptr) -> ()
    %8 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_1 = arith.constant 0 : i32
    %9 = arith.cmpi ult, %c0_i32_1, %6 : i32
    cf.cond_br %9, ^bb3, ^bb4
  ^bb2(%10: i32):  // pred: ^bb7
    return %10 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %11 = llvm.getelementptr %5[%c0_i32_1] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.load %12 : !llvm.ptr -> i32
    %c0_i32_2 = arith.constant 0 : i32
    %14 = arith.cmpi eq, %13, %c0_i32_2 : i32
    cf.cond_br %14, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 3 preds: ^bb3, ^bb6, ^bb8
    %15 = llvm.getelementptr %12[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %12[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.getelementptr %12[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %18 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.load %16 : !llvm.ptr -> i32
    %20 = llvm.load %17 : !llvm.ptr -> !llvm.ptr
    %21 = llvm.load %18 : !llvm.ptr -> i32
    %c0_i32_3 = arith.constant 0 : i32
    %22 = arith.cmpi eq, %21, %c0_i32_3 : i32
    %23 = arith.cmpi ne, %2, %19 : i32
    %24 = arith.ori %22, %23 : i1
    cf.cond_br %24, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // pred: ^bb5
    %25 = llvm.call %18(%8) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (i32) -> i32
    cf.br ^bb2(%25 : i32)
  ^bb8:  // pred: ^bb5
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb5
  }
  func.func @f13(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    %3 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> i32
    %5 = llvm.getelementptr %arg0[40] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %arg0[48] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.load %6 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %9 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %c0_i32_0 = arith.constant 0 : i32
    "wasm.table_set"(%c0_i32_0, %c0_i32, %9) : (i32, i32, !llvm.ptr) -> ()
    %10 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_1 = arith.constant 0 : i32
    %11 = arith.cmpi ult, %c0_i32_1, %8 : i32
    cf.cond_br %11, ^bb3, ^bb4
  ^bb2(%12: i32):  // pred: ^bb7
    return %12 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %13 = llvm.getelementptr %7[%c0_i32_1] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %14 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %15 = llvm.load %14 : !llvm.ptr -> i32
    %c0_i32_2 = arith.constant 0 : i32
    %16 = arith.cmpi eq, %15, %c0_i32_2 : i32
    cf.cond_br %16, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 3 preds: ^bb3, ^bb6, ^bb8
    %17 = llvm.getelementptr %14[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %18 = llvm.getelementptr %14[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %19 = llvm.getelementptr %14[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %20 = llvm.load %17 : !llvm.ptr -> !llvm.ptr
    %21 = llvm.load %18 : !llvm.ptr -> i32
    %22 = llvm.load %19 : !llvm.ptr -> !llvm.ptr
    %23 = llvm.load %20 : !llvm.ptr -> i32
    %c0_i32_3 = arith.constant 0 : i32
    %24 = arith.cmpi eq, %23, %c0_i32_3 : i32
    %25 = arith.cmpi ne, %4, %21 : i32
    %26 = arith.ori %24, %25 : i1
    cf.cond_br %26, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // pred: ^bb5
    %27 = llvm.call %20(%10) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (i32) -> i32
    cf.br ^bb2(%27 : i32)
  ^bb8:  // pred: ^bb5
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb5
  }
  func.func private @dora_fn_wasm_table_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_fill(!llvm.ptr, i32, i32, !llvm.ptr, i32)
  func.func private @dora_fn_wasm_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_table_set(!llvm.ptr, i32, i32, !llvm.ptr)
  func.func private @dora_fn_wasm_imported_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_imported_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_func_ref(!llvm.ptr, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_data_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_elem_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_raise_trap(i32)
}
